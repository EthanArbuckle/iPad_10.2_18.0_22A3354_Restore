void `non-virtual thunk to'WebCore::AudioTrack::~AudioTrack(WebCore::AudioTrack *this, WTF::StringImpl *a2)
{
  WebCore::AudioTrack::~AudioTrack((WebCore::AudioTrack *)((char *)this - 24), a2);
}

{
  WebCore::AudioTrack::~AudioTrack((WebCore::AudioTrack *)((char *)this - 128), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::AudioTrack::~AudioTrack((WebCore::AudioTrack *)((char *)this - 24), a2);
  WTF::fastFree(v2, v3);
}

{
  WTF *v2;
  void *v3;

  WebCore::AudioTrack::~AudioTrack((WebCore::AudioTrack *)((char *)this - 128), a2);
  WTF::fastFree(v2, v3);
}

WTF::StringImpl *WebCore::AudioTrack::setPrivate(WTF::StringImpl *this, WebCore::AudioTrackPrivate *a2)
{
  WebCore::AudioTrackPrivate *v2;
  WTF::StringImpl *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned __int8 *v8;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  WTF::StringImpl *v28;
  WTF::AtomString *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  int v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *v35[2];
  __int128 v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v2 = (WebCore::AudioTrackPrivate *)*((_QWORD *)this + 21);
  if (v2 != a2)
  {
    v4 = this;
    v5 = (unsigned int *)((char *)v2 + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
    v7 = *((_DWORD *)this + 28);
    v8 = (unsigned __int8 *)v2 + 12;
    if (__ldaxr((unsigned __int8 *)v2 + 12))
    {
      __clrex();
    }
    else if (!__stxr(1u, v8))
    {
      goto LABEL_8;
    }
    this = (WTF::StringImpl *)MEMORY[0x19AEA534C]((char *)v2 + 12);
LABEL_8:
    if (*((_DWORD *)v2 + 7) <= v7)
    {
      __break(0xC471u);
      return this;
    }
    v10 = __ldxr(v8);
    if (v10 == 1)
    {
      if (!__stlxr(0, v8))
      {
        do
        {
LABEL_14:
          v11 = __ldaxr(v5);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v5));
        if (!v12)
        {
          atomic_store(1u, (unsigned int *)v2 + 2);
          (*(void (**)(WebCore::AudioTrackPrivate *))(*(_QWORD *)v2 + 8))(v2);
        }
        v13 = (unsigned int *)((char *)a2 + 8);
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 + 1, v13));
        v15 = (unsigned int *)*((_QWORD *)v4 + 21);
        *((_QWORD *)v4 + 21) = a2;
        if (v15)
        {
          v16 = v15 + 2;
          do
          {
            v17 = __ldaxr(v16);
            v18 = v17 - 1;
          }
          while (__stlxr(v18, v16));
          if (!v18)
          {
            atomic_store(1u, v15 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 8))(v15);
          }
        }
        (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)v4 + 21) + 120))(*((_QWORD *)v4 + 21), *((unsigned __int8 *)v4 + 176));
        v19 = *((_QWORD *)v4 + 1);
        if (v19)
        {
          v20 = *(_QWORD *)(v19 + 8);
          if (v20)
          {
            v21 = *(_OWORD *)(v20 + 144);
            *(_OWORD *)v35 = *(_OWORD *)(v20 + 128);
            v36 = v21;
            v22 = WTF::fastMalloc((WTF *)0x30);
            *(_QWORD *)v22 = off_1E33EBF28;
            *(_OWORD *)(v22 + 16) = *(_OWORD *)v35;
            *(_OWORD *)(v22 + 32) = v36;
            v34 = v22;
            *((_QWORD *)v4 + 14) = WebCore::TrackPrivateBase::addClient((uint64_t)a2, &v34, (uint64_t)v4 + 128);
            v23 = v34;
            v34 = 0;
            if (v23)
              (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
          }
        }
        (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)v4 + 21) + 112))(*((_QWORD *)v4 + 21), *((_QWORD *)v4 + 11), *((_QWORD *)v4 + 12));
        WebCore::AudioTrack::updateKindFromPrivate(v4);
        v25 = *((_QWORD *)v4 + 23);
        v26 = *((_QWORD *)v4 + 21);
        v27 = *(_DWORD **)(v26 + 56);
        if (v27)
          *v27 += 2;
        v28 = *(WTF::StringImpl **)(v25 + 8);
        *(_QWORD *)(v25 + 8) = v27;
        if (v28)
        {
          if (*(_DWORD *)v28 == 2)
            WTF::StringImpl::destroy(v28, v24);
          else
            *(_DWORD *)v28 -= 2;
        }
        *(_OWORD *)(v25 + 16) = *(_OWORD *)(v26 + 64);
        v29 = (WTF::AtomString *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v4 + 21) + 48))(*((_QWORD *)v4 + 21));
        WTF::AtomString::number(v29);
        v31 = v35[0];
        v35[0] = 0;
        this = (WTF::StringImpl *)*((_QWORD *)v4 + 6);
        *((_QWORD *)v4 + 6) = v31;
        if (!this)
          goto LABEL_36;
        v32 = *(_DWORD *)this - 2;
        if (*(_DWORD *)this == 2)
        {
          WTF::StringImpl::destroy(this, v30);
          this = v35[0];
          v35[0] = 0;
          if (!this)
            goto LABEL_36;
          v32 = *(_DWORD *)this - 2;
          if (*(_DWORD *)this == 2)
          {
            this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, v33);
            goto LABEL_36;
          }
        }
        *(_DWORD *)this = v32;
LABEL_36:
        *((_QWORD *)v4 + 7) = v29;
        return this;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WebCore::AudioTrackPrivate *)((char *)v2 + 12));
    goto LABEL_14;
  }
  return this;
}

uint64_t WebCore::TrackBase::logger(WebCore::TrackBase *this)
{
  return *((_QWORD *)this + 11);
}

uint64_t WebCore::TrackBase::logIdentifier(WebCore::TrackBase *this)
{
  return *((_QWORD *)this + 12);
}

WTF::StringImpl *WebCore::TrackBase::setId(WebCore::TrackBase *this, WTF::AtomString *a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;

  WTF::AtomString::number(a2);
  result = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = v6;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      WTF::StringImpl::destroy(result, v4);
      result = 0;
    }
    else
    {
      *(_DWORD *)result -= 2;
    }
  }
  *((_QWORD *)this + 7) = a2;
  return result;
}

uint64_t WebCore::AudioTrack::setLanguage(uint64_t **this, const WTF::AtomString *a2)
{
  _QWORD *v3;
  uint64_t result;
  uint64_t v5;

  WebCore::TrackBase::setLanguage((WebCore::TrackBase *)this, a2);
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = off_1E33E9F50;
  v3[1] = this;
  v5 = (uint64_t)v3;
  WTF::WeakHashSet<WebCore::MediaSessionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(this + 19, &v5);
  result = v5;
  v5 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::AudioTrack::isValidKind(uint64_t a1, _QWORD *a2)
{
  if ((MEMORY[0x19AEA53F4](*a2, "alternative", 11) & 1) == 0
    && (MEMORY[0x19AEA53F4](*a2, "commentary", 10) & 1) == 0
    && (MEMORY[0x19AEA53F4](*a2, "description", 11) & 1) == 0
    && (MEMORY[0x19AEA53F4](*a2, "main", 4) & 1) == 0
    && (MEMORY[0x19AEA53F4](*a2, "main-desc", 9) & 1) == 0)
  {
    JUMPOUT(0x19AEA53F4);
  }
  return 1;
}

_BYTE *WebCore::AudioTrack::enabledChanged(_BYTE *this, int a2)
{
  _BYTE *v2;
  uint64_t **v3;
  _QWORD *v4;
  _BYTE *v5;

  if (this[176] != a2)
  {
    v2 = this;
    this[176] = a2;
    v3 = (uint64_t **)(this + 152);
    v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v4 = off_1E33E9FA0;
    v4[1] = v2;
    v5 = v4;
    WTF::WeakHashSet<WebCore::MediaSessionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v3, &v5);
    this = v5;
    v5 = 0;
    if (this)
      return (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)this + 8))(this);
  }
  return this;
}

uint64_t **`non-virtual thunk to'WebCore::AudioTrack::enabledChanged(uint64_t **this, int a2)
{
  uint64_t **v2;
  uint64_t **v3;
  uint64_t **v4;
  uint64_t **v5;

  if (*((unsigned __int8 *)this + 48) != a2)
  {
    v2 = this - 16;
    *((_BYTE *)this + 48) = a2;
    v3 = this + 3;
    v4 = (uint64_t **)WTF::fastMalloc((WTF *)0x10);
    *v4 = (uint64_t *)off_1E33E9FA0;
    v4[1] = (uint64_t *)v2;
    v5 = v4;
    WTF::WeakHashSet<WebCore::MediaSessionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v3, &v5);
    this = v5;
    v5 = 0;
    if (this)
      return (uint64_t **)((uint64_t (*)(uint64_t **))(*this)[1])(this);
  }
  return this;
}

__n128 WebCore::AudioTrack::configurationChanged(uint64_t a1, uint64_t a2)
{
  __n128 *v3;
  _DWORD *v4;
  WTF::StringImpl *v5;
  __n128 result;

  v3 = *(__n128 **)(a1 + 184);
  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  v5 = (WTF::StringImpl *)v3->n128_u64[1];
  v3->n128_u64[1] = (unint64_t)v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = *(__n128 *)(a2 + 8);
  v3[1] = result;
  return result;
}

__n128 `non-virtual thunk to'WebCore::AudioTrack::configurationChanged(uint64_t a1, uint64_t a2)
{
  __n128 *v3;
  _DWORD *v4;
  WTF::StringImpl *v5;
  __n128 result;

  v3 = *(__n128 **)(a1 + 56);
  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  v5 = (WTF::StringImpl *)v3->n128_u64[1];
  v3->n128_u64[1] = (unint64_t)v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = *(__n128 *)(a2 + 8);
  v3[1] = result;
  return result;
}

WTF::StringImpl *WebCore::AudioTrack::idChanged(WebCore::AudioTrack *this, WTF::AtomString *a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  int v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *result;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  WTF::AtomString::number(a2);
  v5 = v11;
  v11 = 0;
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = v5;
  if (!v6)
    goto LABEL_4;
  v7 = *(_DWORD *)v6 - 2;
  if (*(_DWORD *)v6 != 2)
    goto LABEL_3;
  WTF::StringImpl::destroy(v6, v4);
  v6 = v11;
  v11 = 0;
  if (v6)
  {
    v7 = *(_DWORD *)v6 - 2;
    if (*(_DWORD *)v6 != 2)
    {
LABEL_3:
      *(_DWORD *)v6 = v7;
      goto LABEL_4;
    }
    WTF::StringImpl::destroy(v6, v10);
  }
LABEL_4:
  *((_QWORD *)this + 7) = a2;
  v8 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v8 = off_1E33E9FC8;
  *((_QWORD *)v8 + 1) = this;
  v11 = v8;
  WTF::WeakHashSet<WebCore::MediaSessionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)this + 19, &v11);
  result = v11;
  v11 = 0;
  if (result)
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::AudioTrack::idChanged(WebCore::AudioTrack *this, WTF::AtomString *a2)
{
  return WebCore::AudioTrack::idChanged((WebCore::AudioTrack *)((char *)this - 128), a2);
}

uint64_t WebCore::AudioTrack::labelChanged(WebCore::AudioTrack *this, const WTF::AtomString *a2)
{
  _DWORD *v3;
  WTF::StringImpl *v4;
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;

  v3 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v3 += 2;
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = v3;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v5 = off_1E33E9FF0;
  v5[1] = this;
  v7 = (uint64_t)v5;
  WTF::WeakHashSet<WebCore::MediaSessionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)this + 19, &v7);
  result = v7;
  v7 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

WTF::StringImpl *WebCore::TrackBase::setLabel(WebCore::TrackBase *this, const WTF::AtomString *a2)
{
  _DWORD *v3;
  WTF::StringImpl *result;

  v3 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v3 += 2;
  result = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = v3;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::AudioTrack::labelChanged(WebCore::AudioTrack *this, const WTF::AtomString *a2)
{
  _DWORD *v3;
  WTF::StringImpl *v4;
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;

  v3 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v3 += 2;
  v4 = (WTF::StringImpl *)*((_QWORD *)this - 8);
  *((_QWORD *)this - 8) = v3;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v5 = off_1E33E9FF0;
  v5[1] = (char *)this - 128;
  v7 = (uint64_t)v5;
  WTF::WeakHashSet<WebCore::MediaSessionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)this + 3, &v7);
  result = v7;
  v7 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::AudioTrack::languageChanged(uint64_t **this, const WTF::AtomString *a2)
{
  _QWORD *v3;
  uint64_t result;
  uint64_t v5;

  WebCore::TrackBase::setLanguage((WebCore::TrackBase *)this, a2);
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = off_1E33E9F50;
  v3[1] = this;
  v5 = (uint64_t)v3;
  WTF::WeakHashSet<WebCore::MediaSessionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(this + 19, &v5);
  result = v5;
  v5 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t `non-virtual thunk to'WebCore::AudioTrack::languageChanged(uint64_t **this, const WTF::AtomString *a2)
{
  uint64_t **v3;
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;

  v3 = this - 16;
  WebCore::TrackBase::setLanguage((WebCore::TrackBase *)(this - 16), a2);
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = off_1E33E9F50;
  v4[1] = v3;
  v6 = (uint64_t)v4;
  WTF::WeakHashSet<WebCore::MediaSessionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(this + 3, &v6);
  result = v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::AudioTrack::willRemove(WebCore::AudioTrack *this)
{
  uint64_t **v2;
  _QWORD *v3;
  uint64_t result;
  uint64_t v5;

  v2 = (uint64_t **)((char *)this + 152);
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = off_1E33EA018;
  v3[1] = this;
  v5 = (uint64_t)v3;
  WTF::WeakHashSet<WebCore::MediaSessionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v2, &v5);
  result = v5;
  v5 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t `non-virtual thunk to'WebCore::AudioTrack::willRemove(WebCore::AudioTrack *this)
{
  char *v1;
  uint64_t **v2;
  _QWORD *v3;
  uint64_t result;
  uint64_t v5;

  v1 = (char *)this - 128;
  v2 = (uint64_t **)((char *)this + 24);
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = off_1E33EA018;
  v3[1] = v1;
  v5 = (uint64_t)v3;
  WTF::WeakHashSet<WebCore::MediaSessionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v2, &v5);
  result = v5;
  v5 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::AudioTrack::setLogger(WebCore::AudioTrack *this, const WTF::Logger *a2, unint64_t a3)
{
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v6 = (unsigned int *)((char *)a2 + 8);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  v8 = (unsigned int *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = a2;
  if (v8)
  {
    v9 = v8 + 2;
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v8 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 8))(v8);
    }
  }
  *((_QWORD *)this + 12) = a3 & 0xFFFFFFFFFFFF0000 | *((unsigned __int16 *)this + 22);
  return (*(uint64_t (**)(_QWORD, const WTF::Logger *))(**((_QWORD **)this + 21) + 112))(*((_QWORD *)this + 21), a2);
}

void WebCore::ProgressInnerElement::~ProgressInnerElement(WebCore::ProgressInnerElement *this)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v1, v2);
}

uint64_t WebCore::RenderElement::canDestroyDecodedData(WebCore::RenderElement *this)
{
  WebCore::LocalFrameView *v2;
  uint64_t v3;
  const WebCore::IntRect *v4;
  uint64_t v5;
  int isVisibleInDocumentRect;
  _QWORD v8[2];
  _QWORD v9[2];

  v2 = *(WebCore::LocalFrameView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40)
                                                           + 8)
                                               + 1944)
                                   + 248);
  ++*((_DWORD *)v2 + 2);
  v8[0] = WebCore::LocalFrameView::windowClipRect(v2);
  v8[1] = v3;
  v9[0] = WebCore::ScrollView::windowToContents((WebCore::Widget **)v2, (const WebCore::IntRect *)v8, v4);
  v9[1] = v5;
  isVisibleInDocumentRect = WebCore::RenderElement::isVisibleInDocumentRect(this, (const WebCore::IntRect *)v9);
  if (*((_DWORD *)v2 + 2) == 1)
    (*(void (**)(WebCore::LocalFrameView *))(*(_QWORD *)v2 + 8))(v2);
  else
    --*((_DWORD *)v2 + 2);
  return isVisibleInDocumentRect ^ 1u;
}

uint64_t WebCore::RenderElement::lastChildSlow(WebCore::RenderElement *this)
{
  uint64_t v1;

  v1 = *(unsigned int *)((char *)this + 71);
  if (v1 | ((unint64_t)*((unsigned __int8 *)this + 75) << 32))
    return *(_QWORD *)((v1 | ((unint64_t)*((unsigned __int8 *)this + 75) << 32)) + 8);
  else
    return 0;
}

uint64_t WebCore::RenderObject::createsAnonymousWrapper(WebCore::RenderObject *this)
{
  return 0;
}

uint64_t WebCore::RenderObject::isRenderMathMLOperator(WebCore::RenderObject *this)
{
  return 0;
}

uint64_t WebCore::RenderObject::isRenderMathMLSquareRoot(WebCore::RenderObject *this)
{
  return 0;
}

uint64_t WebCore::RenderObject::isRenderMathMLScripts(WebCore::RenderObject *this)
{
  return 0;
}

uint64_t WebCore::RenderObject::isRenderMathMLToken(WebCore::RenderObject *this)
{
  return 0;
}

float WebCore::RenderBox::objectBoundingBox(WebCore::RenderBox *this)
{
  return 0.0;
}

uint64_t WebCore::RenderObject::objectBoundingBoxWithoutTransformations(WebCore::RenderObject *this)
{
  return (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)this + 232))(this);
}

float WebCore::RenderBox::repaintRectInLocalCoordinates()
{
  return 0.0;
}

uint64_t WebCore::RenderObject::absoluteQuadsForSelection(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 392))(a1, a2, 0);
}

uint64_t WebCore::RenderObject::length(WebCore::RenderObject *this)
{
  return 1;
}

unint64_t WebCore::RenderBlock::selectionRectForRepaint(WebCore::RenderBlock *this, const WebCore::RenderLayerModelObject *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  int v20;
  uint64_t v21;
  __int128 v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  int v29;
  int v30;

  WebCore::RenderBlock::selectionGapRectsForRepaint((uint64_t)this, a2, &v23);
  v3 = v23;
  v2 = DWORD1(v23);
  v4 = *((_QWORD *)&v23 + 1);
  if ((int)v26 >= 1 && SHIDWORD(v26) >= 1)
  {
    if (SDWORD2(v23) < 1 || SHIDWORD(v23) <= 0)
    {
      v3 = v24;
      v2 = v25;
      v4 = v26;
    }
    else
    {
      if (v24 >= (int)v23)
        v7 = v23;
      else
        v7 = v24;
      if ((int)v25 >= SDWORD1(v23))
        v8 = DWORD1(v23);
      else
        v8 = v25;
      v9 = (v23 >> 31) + 0x7FFFFFFF;
      if (!__OFADD__((_DWORD)v23, DWORD2(v23)))
        v9 = v23 + DWORD2(v23);
      v10 = v24 + v26;
      if (__OFADD__(v24, (_DWORD)v26))
        v10 = (v24 >> 31) + 0x7FFFFFFF;
      if ((int)v9 <= v10)
        v9 = v10;
      v11 = (DWORD1(v23) >> 31) + 0x7FFFFFFF;
      if (!__OFADD__(DWORD1(v23), HIDWORD(v23)))
        v11 = DWORD1(v23) + HIDWORD(v23);
      v12 = v25 + HIDWORD(v26);
      if (__OFADD__(v25, HIDWORD(v26)))
        v12 = (v25 >> 31) + 0x7FFFFFFF;
      if (v11 <= v12)
        v11 = v12;
      v13 = __OFSUB__(v9, v7);
      v14 = v9 - v7;
      LODWORD(v15) = (v9 >> 31) + 0x7FFFFFFF;
      if (v13)
        v15 = v15;
      else
        v15 = v14;
      v13 = __OFSUB__(v11, (_DWORD)v8);
      v16 = v11 - v8;
      LODWORD(v17) = (v11 >> 31) + 0x7FFFFFFF;
      if (v13)
        v17 = v17;
      else
        v17 = v16;
      v4 = v15 | (v17 << 32);
      v2 = v8;
      v3 = v7;
    }
  }
  if (v29 >= 1 && v30 >= 1)
  {
    if ((int)v4 < 1 || SHIDWORD(v4) <= 0)
    {
      v3 = v27;
      v2 = v28;
    }
    else
    {
      if (v27 >= v3)
        v20 = v3;
      else
        v20 = v27;
      if ((int)v28 >= (int)v2)
        v21 = v2;
      else
        v21 = v28;
      v2 = v21;
      v3 = v20;
    }
  }
  return v3 | (unint64_t)(v2 << 32);
}

uint64_t WebCore::RenderObject::canBeSelectionLeaf(WebCore::RenderObject *this)
{
  return 0;
}

uint64_t WebCore::RenderLayerModelObject::needsHasSVGTransformFlags(WebCore::RenderLayerModelObject *this)
{
  return 0;
}

uint64_t WebCore::RenderLayerModelObject::currentSVGLayoutLocation(WebCore::RenderLayerModelObject *this)
{
  return 0;
}

uint64_t WebCore::RenderBox::borderBoundingBox(WebCore::RenderBox *this)
{
  return 0;
}

unint64_t WebCore::RenderBoxModelObject::padding(WebCore::RenderBoxModelObject *this)
{
  unsigned __int8 *v2;
  int v3;
  float v4;
  float v5;
  double v6;
  unsigned int v8;
  unsigned __int8 *v9;
  int v10;
  float v11;
  float v12;
  double v13;
  uint64_t v15;
  uint64_t v16;
  int v17;
  float v18;
  uint64_t v19;
  int v20;
  float v21;
  float v23;
  float v24;
  float v26;
  float v27;
  int v29;
  int v30;
  int v31;
  uint64_t (*v32)(WebCore::RenderBoxModelObject *);
  WebCore::RenderBoxModelObject *v33;
  uint64_t v34;
  int v35;

  v2 = *(unsigned __int8 **)(*((_QWORD *)this + 11) + 24);
  v3 = v2[76];
  if ((v3 & 0xFFFFFFF7) == 3)
  {
    v29 = (*(uint64_t (**)(WebCore::RenderBoxModelObject *))(*(_QWORD *)this + 1144))(this);
    v3 = v2[76];
    v4 = (float)v29 * 0.015625;
  }
  else
  {
    v4 = 0.0;
  }
  if (v3 == 4)
  {
    v5 = *((float *)v2 + 18);
    if (!v2[78])
      v5 = (float)SLODWORD(v5);
    v6 = v5 * 64.0;
    if (v6 < 2147483650.0 && v6 > -2147483650.0)
      goto LABEL_10;
    if (v6 < 2147483650.0)
      goto LABEL_71;
  }
  else
  {
    if (v3 == 3)
    {
      v23 = *((float *)v2 + 18);
      if (!v2[78])
        v23 = (float)SLODWORD(v23);
      v24 = (float)(v4 * v23) / 100.0;
    }
    else
    {
      if (v3 != 11)
      {
        v8 = 0;
        goto LABEL_11;
      }
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v2 + 72), v4);
    }
    v6 = v24 * 64.0;
    if (v6 < 2147483650.0 && v6 > -2147483650.0)
      goto LABEL_10;
    if (v6 < 2147483650.0)
    {
LABEL_71:
      if (v6 <= -2147483650.0)
      {
        v8 = 0x80000000;
        goto LABEL_11;
      }
LABEL_10:
      v8 = (int)v6;
      goto LABEL_11;
    }
  }
  v8 = 0x7FFFFFFF;
LABEL_11:
  v9 = *(unsigned __int8 **)(*((_QWORD *)this + 11) + 24);
  v10 = v9[84];
  if ((v10 & 0xFFFFFFF7) == 3)
  {
    v30 = (*(uint64_t (**)(WebCore::RenderBoxModelObject *))(*(_QWORD *)this + 1144))(this);
    v10 = v9[84];
    v11 = (float)v30 * 0.015625;
  }
  else
  {
    v11 = 0.0;
  }
  if (v10 == 4)
  {
    v12 = *((float *)v9 + 20);
    if (!v9[86])
      v12 = (float)SLODWORD(v12);
    v13 = v12 * 64.0;
    if (v13 < 2147483650.0 && v13 > -2147483650.0)
      goto LABEL_20;
    if (v13 < 2147483650.0)
      goto LABEL_74;
  }
  else
  {
    if (v10 == 3)
    {
      v26 = *((float *)v9 + 20);
      if (!v9[86])
        v26 = (float)SLODWORD(v26);
      v27 = (float)(v11 * v26) / 100.0;
    }
    else
    {
      if (v10 != 11)
      {
        v15 = 0;
        goto LABEL_21;
      }
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v9 + 80), v11);
    }
    v13 = v27 * 64.0;
    if (v13 < 2147483650.0 && v13 > -2147483650.0)
      goto LABEL_20;
    if (v13 < 2147483650.0)
    {
LABEL_74:
      if (v13 <= -2147483650.0)
      {
        v15 = 0x80000000;
        goto LABEL_21;
      }
LABEL_20:
      v15 = (int)v13;
      goto LABEL_21;
    }
  }
  v15 = 0x7FFFFFFFLL;
LABEL_21:
  v16 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
  v17 = *(unsigned __int8 *)(v16 + 92);
  if ((v17 & 0xFFFFFFF7) == 3)
  {
    v31 = (*(uint64_t (**)(WebCore::RenderBoxModelObject *))(*(_QWORD *)this + 1144))(this);
    v17 = *(unsigned __int8 *)(v16 + 92);
    v18 = (float)v31 * 0.015625;
  }
  else
  {
    v18 = 0.0;
  }
  if (v17 != 4 && v17 != 3 && v17 == 11)
    WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v16 + 88), v18);
  v19 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
  v20 = *(unsigned __int8 *)(v19 + 100);
  if ((v20 & 0xFFFFFFF7) == 3)
  {
    v32 = *(uint64_t (**)(WebCore::RenderBoxModelObject *))(*(_QWORD *)this + 1144);
    v33 = this;
    v34 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
    v35 = v32(v33);
    v19 = v34;
    v20 = *(unsigned __int8 *)(v34 + 100);
    v21 = (float)v35 * 0.015625;
  }
  else
  {
    v21 = 0.0;
  }
  if (v20 != 4 && v20 != 3 && v20 == 11)
    WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v19 + 96), v21);
  return v8 | (unint64_t)(v15 << 32);
}

uint64_t WebCore::RenderBoxModelObject::horizontalBorderExtent(WebCore::RenderBoxModelObject *this)
{
  unsigned int v2;
  int v3;

  v2 = (*(uint64_t (**)(WebCore::RenderBoxModelObject *))(*(_QWORD *)this + 1016))(this);
  v3 = (*(uint64_t (**)(WebCore::RenderBoxModelObject *))(*(_QWORD *)this + 1024))(this);
  if (__OFADD__(v2, v3))
    return (v2 >> 31) + 0x7FFFFFFF;
  else
    return v2 + v3;
}

uint64_t WebCore::RenderBoxModelObject::verticalBorderExtent(WebCore::RenderBoxModelObject *this)
{
  unsigned int v2;
  int v3;

  v2 = (*(uint64_t (**)(WebCore::RenderBoxModelObject *))(*(_QWORD *)this + 1000))(this);
  v3 = (*(uint64_t (**)(WebCore::RenderBoxModelObject *))(*(_QWORD *)this + 1008))(this);
  if (__OFADD__(v2, v3))
    return (v2 >> 31) + 0x7FFFFFFF;
  else
    return v2 + v3;
}

uint64_t WebCore::RenderBox::frameRectForStickyPositioning(WebCore::RenderBox *this)
{
  return *((_QWORD *)this + 19);
}

uint64_t WebCore::RenderBox::collapsedMarginBefore(WebCore::RenderBox *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = ((unsigned __int16)*((_DWORD *)this + 31) >> 13) - 1;
  if (v1 > 4)
    v2 = 0;
  else
    v2 = qword_1969F1F90[v1];
  return *((unsigned int *)this + v2 + 42);
}

uint64_t WebCore::RenderBox::collapsedMarginAfter(WebCore::RenderBox *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = ((unsigned __int16)*((_DWORD *)this + 31) >> 13) - 1;
  if (v1 > 4)
    v2 = 2;
  else
    v2 = qword_1969F1FB8[v1];
  return *((unsigned int *)this + v2 + 42);
}

uint64_t WebCore::RenderBox::intrinsicSize(WebCore::RenderBox *this)
{
  return 0;
}

uint64_t WebCore::RenderBox::controlClipRect(WebCore::RenderBox *this, const WebCore::LayoutPoint *a2)
{
  return 0;
}

WTF::StringImpl *WebCore::RenderBlock::createAnonymousBoxWithSameTypeAs@<X0>(WebCore::RenderBlock *this@<X0>, const WebCore::RenderBox *a2@<X1>, WebCore::RenderElement **a3@<X8>)
{
  return WebCore::RenderBlock::createAnonymousBlockWithStyleAndDisplay(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8), (_QWORD *)a2 + 10, (const WTF::StringImpl *)(*((_DWORD *)this + 24) & 0x1F), a3);
}

uint64_t WebCore::RenderBox::needsLayoutAfterFragmentRangeChange(WebCore::RenderBox *this)
{
  return 0;
}

uint64_t WebCore::RenderBlock::shouldChildInlineMarginContributeToContainerIntrinsicSize()
{
  return 1;
}

uint64_t WebCore::RenderFlexibleBox::canDropAnonymousBlockChild(WebCore::RenderFlexibleBox *this)
{
  return 0;
}

uint64_t WebCore::RenderBlock::logicalRightFloatOffsetForLine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t WebCore::RenderBlock::logicalLeftFloatOffsetForLine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t WebCore::RenderBlock::hitTestFloats()
{
  return 0;
}

uint64_t WebCore::RenderBlock::hitTestInlineChildren()
{
  return 0;
}

uint64_t WebCore::RenderSliderContainer::isFlexibleBoxImpl(WebCore::RenderSliderContainer *this)
{
  return 1;
}

void WebCore::SliderThumbElement::~SliderThumbElement(WebCore::SliderThumbElement *this)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v1, v2);
}

uint64_t WebCore::SliderThumbElement::isSliderThumbElement(WebCore::SliderThumbElement *this)
{
  return 1;
}

void WebCore::SliderContainerElement::~SliderContainerElement(WebCore::SliderContainerElement *this)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v1, v2);
}

uint64_t WebCore::SliderContainerElement::isSliderContainerElement(WebCore::SliderContainerElement *this)
{
  return 1;
}

void WebCore::SpinButtonElement::~SpinButtonElement(WebCore::SpinButtonElement *this)
{
  WebCore::TimerBase *v2;
  uint64_t v3;
  void *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *((_QWORD *)this + 19) = off_1E31F7378;
  v2 = (WebCore::SpinButtonElement *)((char *)this + 152);
  v3 = *((_QWORD *)this + 25);
  *((_QWORD *)v2 + 6) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::TimerBase::~TimerBase(v2);
  v5 = (unsigned int *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, v4);
    }
  }
  WTF::WeakPtrFactory<WebCore::FileReaderLoaderClient,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 15, v4);
  WebCore::Element::~Element((uint64_t)this);
}

{
  WebCore::TimerBase *v2;
  uint64_t v3;
  void *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  bmalloc::api *v8;
  void *v9;

  *((_QWORD *)this + 19) = off_1E31F7378;
  v2 = (WebCore::SpinButtonElement *)((char *)this + 152);
  v3 = *((_QWORD *)this + 25);
  *((_QWORD *)v2 + 6) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::TimerBase::~TimerBase(v2);
  v5 = (unsigned int *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, v4);
    }
  }
  WTF::WeakPtrFactory<WebCore::FileReaderLoaderClient,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 15, v4);
  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v8, v9);
}

uint64_t WebCore::SpinButtonElement::isMouseFocusable(WebCore::SpinButtonElement *this)
{
  return 0;
}

uint64_t WebCore::SpinButtonElement::isSpinButtonElement(WebCore::SpinButtonElement *this)
{
  return 1;
}

uint64_t WebCore::SpinButtonElement::isDisabledFormControl(WebCore::SpinButtonElement *this)
{
  uint64_t v1;
  BOOL v2;
  uint64_t v3;
  uint64_t v5;

  v1 = **((_QWORD **)this + 5);
  if (v1)
    v2 = (*(_WORD *)(v1 + 28) & 0x80) == 0;
  else
    v2 = 1;
  if (!v2 && (v3 = *(_QWORD *)(v1 + 200)) != 0 && (v5 = *(_QWORD *)(v3 + 8)) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 960))(v5);
  else
    return 0;
}

void `non-virtual thunk to'WebCore::SpinButtonElement::~SpinButtonElement(WebCore::SpinButtonElement *this)
{
  WebCore::TimerBase *v2;
  uint64_t v3;
  void *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *((_QWORD *)this + 5) = off_1E31F7378;
  v2 = (WebCore::SpinButtonElement *)((char *)this + 40);
  v3 = *((_QWORD *)this + 11);
  *((_QWORD *)v2 + 6) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::TimerBase::~TimerBase(v2);
  v5 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, v4);
    }
  }
  WTF::WeakPtrFactory<WebCore::FileReaderLoaderClient,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v4);
  WebCore::Element::~Element((uint64_t)this - 112);
}

{
  WebCore::TimerBase *v2;
  uint64_t v3;
  void *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  bmalloc::api *v8;
  void *v9;

  *((_QWORD *)this + 5) = off_1E31F7378;
  v2 = (WebCore::SpinButtonElement *)((char *)this + 40);
  v3 = *((_QWORD *)this + 11);
  *((_QWORD *)v2 + 6) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::TimerBase::~TimerBase(v2);
  v5 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, v4);
    }
  }
  WTF::WeakPtrFactory<WebCore::FileReaderLoaderClient,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v4);
  WebCore::Element::~Element((uint64_t)this - 112);
  bmalloc::api::isoDeallocate(v8, v9);
}

void WebCore::TextControlInnerContainer::~TextControlInnerContainer(WebCore::TextControlInnerContainer *this)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v1, v2);
}

void WebCore::TextControlInnerElement::~TextControlInnerElement(WebCore::TextControlInnerElement *this)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v1, v2);
}

uint64_t WebCore::TextControlInnerElement::isMouseFocusable(WebCore::TextControlInnerElement *this)
{
  return 0;
}

uint64_t WebCore::TextControlInnerTextElement::isMouseFocusable(WebCore::TextControlInnerTextElement *this)
{
  return 0;
}

uint64_t WebCore::TextControlInnerTextElement::isTextControlInnerTextElement(WebCore::TextControlInnerTextElement *this)
{
  return 1;
}

void WebCore::TextControlPlaceholderElement::~TextControlPlaceholderElement(WebCore::TextControlPlaceholderElement *this)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v1, v2);
}

void WebCore::SearchFieldResultsButtonElement::~SearchFieldResultsButtonElement(WebCore::SearchFieldResultsButtonElement *this)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v1, v2);
}

uint64_t WebCore::SearchFieldResultsButtonElement::isMouseFocusable(WebCore::SearchFieldResultsButtonElement *this)
{
  return 0;
}

uint64_t WebCore::SearchFieldResultsButtonElement::isSearchFieldResultsButtonElement(WebCore::SearchFieldResultsButtonElement *this)
{
  return 1;
}

void WebCore::SearchFieldCancelButtonElement::~SearchFieldCancelButtonElement(WebCore::SearchFieldCancelButtonElement *this)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v1, v2);
}

uint64_t WebCore::SearchFieldCancelButtonElement::isMouseFocusable(WebCore::SearchFieldCancelButtonElement *this)
{
  return 0;
}

void WebCore::TextPlaceholderElement::~TextPlaceholderElement(WebCore::TextPlaceholderElement *this)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v1, v2);
}

uint64_t WebCore::TextPlaceholderElement::isTextPlaceholderElement(WebCore::TextPlaceholderElement *this)
{
  return 1;
}

void WebCore::YouTubeEmbedShadowElement::~YouTubeEmbedShadowElement(WebCore::YouTubeEmbedShadowElement *this)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v1, v2);
}

uint64_t WebCore::TrackBase::id@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(this + 48);
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return this;
}

uint64_t WebCore::TrackBase::uniqueId(WebCore::TrackBase *this)
{
  return *((unsigned int *)this + 11);
}

uint64_t WebCore::AudioTrack::enabled(WebCore::AudioTrack *this)
{
  return *((unsigned __int8 *)this + 176);
}

const char *WebCore::AudioTrack::logClassName(WebCore::AudioTrack *this)
{
  return "AudioTrack";
}

uint64_t `non-virtual thunk to'WebCore::TrackBase::logger(WebCore::TrackBase *this)
{
  return *((_QWORD *)this + 8);
}

const char *`non-virtual thunk to'WebCore::AudioTrack::logClassName(WebCore::AudioTrack *this)
{
  return "AudioTrack";
}

uint64_t `non-virtual thunk to'WebCore::TrackBase::logIdentifier(WebCore::TrackBase *this)
{
  return *((_QWORD *)this + 9);
}

uint64_t WebCore::AudioTrackPrivateClient::type(WebCore::AudioTrackPrivateClient *this)
{
  return 1;
}

void WebCore::ProgressBarElement::~ProgressBarElement(WebCore::ProgressBarElement *this)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v1, v2);
}

void WebCore::ProgressValueElement::~ProgressValueElement(WebCore::ProgressValueElement *this)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v1, v2);
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::SpinButtonElement::*&)(void),WebCore::SpinButtonElement*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

double WebCore::RenderSliderContainer::operator delete(WebCore::RenderFlexibleBox *a1, void *a2)
{
  uint64_t v2;
  void *v3;
  double result;

  WebCore::RenderFlexibleBox::~RenderFlexibleBox(a1, a2);
  if (*(_DWORD *)(v2 + 16))
  {
    *(_QWORD *)(v2 + 400) = 0;
    result = 0.0;
    *(_OWORD *)(v2 + 368) = 0u;
    *(_OWORD *)(v2 + 384) = 0u;
    *(_OWORD *)(v2 + 336) = 0u;
    *(_OWORD *)(v2 + 352) = 0u;
    *(_OWORD *)(v2 + 304) = 0u;
    *(_OWORD *)(v2 + 320) = 0u;
    *(_OWORD *)(v2 + 272) = 0u;
    *(_OWORD *)(v2 + 288) = 0u;
    *(_OWORD *)(v2 + 240) = 0u;
    *(_OWORD *)(v2 + 256) = 0u;
    *(_OWORD *)(v2 + 208) = 0u;
    *(_OWORD *)(v2 + 224) = 0u;
    *(_OWORD *)(v2 + 176) = 0u;
    *(_OWORD *)(v2 + 192) = 0u;
    *(_OWORD *)(v2 + 144) = 0u;
    *(_OWORD *)(v2 + 160) = 0u;
    *(_OWORD *)(v2 + 112) = 0u;
    *(_OWORD *)(v2 + 128) = 0u;
    *(_OWORD *)(v2 + 80) = 0u;
    *(_OWORD *)(v2 + 96) = 0u;
    *(_OWORD *)(v2 + 48) = 0u;
    *(_OWORD *)(v2 + 64) = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_OWORD *)v2 = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate((bmalloc::api *)v2, v3);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AudioTrack::setLanguage(WTF::AtomString const&)::$_0,void,WebCore::AudioTrackClient &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 48))(a2, *(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AudioTrack::setEnabled(BOOL)::$_0,void,WebCore::AudioTrackClient &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AudioTrack::enabledChanged(BOOL)::$_0,void,WebCore::AudioTrackClient &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AudioTrack::idChanged(unsigned long long)::$_0,void,WebCore::AudioTrackClient &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AudioTrack::labelChanged(WTF::AtomString const&)::$_0,void,WebCore::AudioTrackClient &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 40))(a2, *(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AudioTrack::willRemove(void)::$_0,void,WebCore::AudioTrackClient &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 56))(a2, *(_QWORD *)(a1 + 8));
}

void `non-virtual thunk to'WebCore::AudioTrackList::~AudioTrackList(WebCore::AudioTrackList *this, void *a2)
{
  WebCore::TrackListBase::~TrackListBase((WebCore::AudioTrackList *)((char *)this - 32), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::TrackListBase::~TrackListBase((WebCore::AudioTrackList *)((char *)this - 32), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void WebCore::AudioTrackList::~AudioTrackList(WebCore::AudioTrackList *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::TrackListBase::~TrackListBase(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

_DWORD *WebCore::AudioTrackList::append(uint64_t a1, uint64_t *a2)
{
  unsigned int v4;
  unint64_t v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  void *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *result;
  uint64_t v34;
  WTF *v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;

  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a2 + 168) + 72))(*(_QWORD *)(*a2 + 168));
  LODWORD(v5) = *(_DWORD *)(a1 + 68);
  if ((_DWORD)v5)
  {
    v6 = v4;
    v7 = 0;
    do
    {
      v8 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v7);
      if (*(_DWORD *)(v8 + 40) != 2)
      {
        __break(0xC471u);
        JUMPOUT(0x195D7CC68);
      }
      v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v8 + 168) + 72))(*(_QWORD *)(v8 + 168));
      v5 = *(unsigned int *)(a1 + 68);
      if (v9 > v6)
        break;
      ++v7;
    }
    while (v7 < v5);
  }
  else
  {
    v7 = 0;
  }
  v10 = *a2;
  if ((_DWORD)v5 == *(_DWORD *)(a1 + 64))
  {
    v11 = v5;
    v12 = v5 + 1;
    v13 = v11 + (v11 >> 2);
    if (v13 >= 0x10)
      v14 = v13 + 1;
    else
      v14 = 16;
    if (v14 <= v12)
      v15 = v11 + 1;
    else
      v15 = v14;
    if (v15 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x195D7CCBCLL);
    }
    v16 = *(void **)(a1 + 56);
    v17 = (void *)WTF::fastMalloc((WTF *)(8 * v15));
    *(_DWORD *)(a1 + 64) = v15;
    *(_QWORD *)(a1 + 56) = v17;
    memcpy(v17, v16, 8 * v11);
    if (v16)
    {
      if (*(void **)(a1 + 56) == v16)
      {
        *(_QWORD *)(a1 + 56) = 0;
        *(_DWORD *)(a1 + 64) = 0;
      }
      WTF::fastFree((WTF *)v16, v18);
    }
  }
  v19 = (_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v7);
  v20 = (uint64_t)memmove(v19 + 1, v19, 8 * *(unsigned int *)(a1 + 68) - 8 * v7);
  if (v10)
    ++*(_DWORD *)(v10 + 16);
  *v19 = v10;
  ++*(_DWORD *)(a1 + 68);
  v21 = *a2;
  v22 = *(_QWORD *)(*a2 + 104);
  if (!v22 || !*(_QWORD *)(v22 + 8))
  {
    v23 = (unsigned int *)WTF::WeakPtr<WebCore::Clipboard,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::Clipboard>(a1);
    v25 = v23;
    if (v23)
    {
      do
        v26 = __ldaxr(v23);
      while (__stlxr(v26 + 1, v23));
    }
    v20 = *(_QWORD *)(v21 + 104);
    *(_QWORD *)(v21 + 104) = v25;
    if (v20)
    {
      do
      {
        v27 = __ldaxr((unsigned int *)v20);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, (unsigned int *)v20));
      if (!v28)
      {
        atomic_store(1u, (unsigned int *)v20);
        v34 = *(unsigned int *)(v20 + 28);
        if ((_DWORD)v34)
        {
          v37 = v20;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v20 + 16), (WTF::StringImpl *)(*(_QWORD *)(v20 + 16) + 32 * v34));
          v20 = v37;
        }
        v35 = *(WTF **)(v20 + 16);
        if (v35)
        {
          *(_QWORD *)(v20 + 16) = 0;
          *(_DWORD *)(v20 + 24) = 0;
          v36 = v20;
          WTF::fastFree(v35, v24);
          v20 = v36;
        }
        v20 = WTF::fastFree((WTF *)v20, v24);
      }
    }
  }
  v29 = (_DWORD *)*a2;
  *a2 = 0;
  v38 = v29;
  v30 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v30 || (v31 = *(_QWORD *)(v30 + 96)) == 0)
    v31 = WebCore::threadGlobalDataSlow((WebCore *)v20);
  v32 = *(_QWORD *)(v31 + 40);
  if (!v32)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v31);
    v32 = *(_QWORD *)(v31 + 40);
  }
  WebCore::TrackListBase::scheduleTrackEvent(a1, (_QWORD *)(v32 + 104), (uint64_t *)&v38);
  result = v38;
  if (v38)
  {
    if (v38[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v38 + 16))();
    else
      --v38[4];
  }
  return result;
}

WebCore *WebCore::AudioTrackList::remove(WebCore::AudioTrackList *this, WebCore::TrackBase *a2, int a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v10;
  uint64_t v11;
  WebCore *v14;

  if (*((_DWORD *)a2 + 10) != 2)
  {
    __break(0xC471u);
    JUMPOUT(0x195D7CD90);
  }
  v4 = *((_QWORD *)a2 + 13);
  if (!v4)
  {
    if (!this)
      *((_QWORD *)a2 + 13) = 0;
    return WebCore::TrackListBase::remove(this, a2, a3);
  }
  if (*(WebCore::AudioTrackList **)(v4 + 8) != this)
    return WebCore::TrackListBase::remove(this, a2, a3);
  *((_QWORD *)a2 + 13) = 0;
  do
  {
    v5 = __ldaxr((unsigned int *)v4);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, (unsigned int *)v4));
  if (v6)
    return WebCore::TrackListBase::remove(this, a2, a3);
  v14 = this;
  atomic_store(1u, (unsigned int *)v4);
  v7 = *(unsigned int *)(v4 + 28);
  if ((_DWORD)v7)
  {
    v11 = v4;
    WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v4 + 16), (WTF::StringImpl *)(*(_QWORD *)(v4 + 16) + 32 * v7));
    v4 = v11;
  }
  v8 = *(WTF **)(v4 + 16);
  if (v8)
  {
    *(_QWORD *)(v4 + 16) = 0;
    *(_DWORD *)(v4 + 24) = 0;
    v10 = v4;
    WTF::fastFree(v8, a2);
    v4 = v10;
  }
  WTF::fastFree((WTF *)v4, a2);
  return WebCore::TrackListBase::remove(v14, a2, a3);
}

uint64_t WebCore::AudioTrackList::eventTargetInterface(WebCore::AudioTrackList *this)
{
  return 22;
}

uint64_t WebCore::BufferedLineReader::nextLine@<X0>(uint64_t this@<X0>, WTF::StringImpl *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v3;
  unsigned int v5;
  uint64_t v6;
  __int16 v7;
  int v8;
  int v9;
  unsigned int v10;
  char v11;
  unsigned __int8 *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(_QWORD *);
  uint64_t v19;
  _QWORD *v20;
  int v21;
  int v23;
  uint64_t (*v24)(uint64_t, WTF::StringImpl *);
  int v25;
  unsigned int v26;
  uint64_t v27;
  __int16 v28;
  int v29;
  uint64_t (*v30)(uint64_t, WTF::StringImpl *);
  int v31;
  uint64_t (*v32)(uint64_t, WTF::StringImpl *);
  uint64_t (*v33)(_QWORD *);
  uint64_t v34;
  _QWORD *v35;
  uint64_t (*v36)(_QWORD *);
  uint64_t v37;
  _QWORD *v38;
  char v39;
  WTF::StringImpl *v40;
  WTF::StringImpl **v41;
  int v42;

  v3 = this;
  if (*(_BYTE *)(this + 145))
  {
    v5 = *(_DWORD *)(this + 12);
    if (v5)
    {
      if (*(_WORD *)(this + 66) == 10)
      {
        if (v5 < 2)
        {
          v33 = *(uint64_t (**)(_QWORD *))(this + 104);
          v34 = *(_QWORD *)(this + 112);
          v35 = (_QWORD *)(this + (v34 >> 1));
          if ((v34 & 1) != 0)
            v33 = *(uint64_t (**)(_QWORD *))(*v35 + v33);
          this = v33(v35);
          goto LABEL_10;
        }
        v6 = *(_QWORD *)(this + 16);
        if (*(_BYTE *)(this + 24))
        {
          *(_QWORD *)(this + 16) = v6 + 1;
          v7 = *(unsigned __int8 *)(v6 + 1);
        }
        else
        {
          *(_QWORD *)(this + 16) = v6 + 2;
          v7 = *(_WORD *)(v6 + 2);
        }
        *(_WORD *)(this + 66) = v7;
        *(_DWORD *)(this + 12) = v5 - 1;
        if (v5 == 2)
        {
          *(_BYTE *)(this + 80) = 0;
          v30 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
          *(_QWORD *)(this + 88) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
          *(_QWORD *)(this + 96) = 0;
          v31 = *(unsigned __int8 *)(this + 25);
          if (*(_BYTE *)(this + 25))
            v30 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
          *(_QWORD *)(this + 104) = v30;
          *(_QWORD *)(this + 112) = 0;
          if (!v31)
            goto LABEL_10;
          goto LABEL_9;
        }
        if (*(_BYTE *)(this + 25))
        {
LABEL_9:
          v8 = *(_DWORD *)(this + 76) + 1;
          *(_DWORD *)(this + 72) = *(_DWORD *)(this + 68) - v5 + *(_DWORD *)(this + 8) + 1;
          *(_DWORD *)(this + 76) = v8;
        }
      }
LABEL_10:
      *(_BYTE *)(v3 + 145) = 0;
    }
  }
  v9 = *(_DWORD *)(v3 + 12);
  if (!v9)
  {
LABEL_43:
    LOBYTE(v25) = 1;
    goto LABEL_70;
  }
  while (1)
  {
    v10 = *(unsigned __int16 *)(v3 + 66);
    v11 = *(_BYTE *)(v3 + 80);
    if ((v11 & 2) != 0)
    {
      v12 = (unsigned __int8 *)(*(_QWORD *)(v3 + 16) + 1);
      *(_QWORD *)(v3 + 16) = v12;
      *(_WORD *)(v3 + 66) = *v12;
      *(_DWORD *)(v3 + 12) = v9 - 1;
      if (v9 == 2 || v10 == 10)
      {
        v21 = v11 & 1;
        if (v10 == 10 && v21 != 0)
        {
          v23 = *(_DWORD *)(v3 + 76) + 1;
          *(_DWORD *)(v3 + 72) = *(_DWORD *)(v3 + 68) - v9 + *(_DWORD *)(v3 + 8) + 1;
          *(_DWORD *)(v3 + 76) = v23;
        }
        if (v9 == 2)
        {
          *(_BYTE *)(v3 + 80) = 0;
          *(_QWORD *)(v3 + 88) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
          *(_QWORD *)(v3 + 96) = 0;
          if (*(_BYTE *)(v3 + 25))
            v24 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
          else
            v24 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
          *(_QWORD *)(v3 + 104) = v24;
          *(_QWORD *)(v3 + 112) = 0;
        }
      }
    }
    else
    {
      v18 = *(uint64_t (**)(_QWORD *))(v3 + 104);
      v19 = *(_QWORD *)(v3 + 112);
      v20 = (_QWORD *)(v3 + (v19 >> 1));
      if ((v19 & 1) != 0)
        v18 = *(uint64_t (**)(_QWORD *))(*v20 + v18);
      this = v18(v20);
    }
    if (v10 == 10)
      goto LABEL_69;
    if (v10 == 13)
      break;
    if (v10)
      v13 = v10;
    else
      v13 = 65533;
    v14 = *(_QWORD *)(v3 + 128);
    if (v14)
    {
      v15 = *(unsigned int *)(v3 + 136);
      if (v15 < *(_DWORD *)(v14 + 4) && !*(_QWORD *)(v3 + 120))
      {
        if ((*(_BYTE *)(v14 + 16) & 4) == 0)
        {
          v16 = *(_QWORD *)(v14 + 8);
          *(_DWORD *)(v3 + 136) = v15 + 1;
          *(_WORD *)(v16 + 2 * v15) = v13;
          goto LABEL_24;
        }
        if (v13 <= 0xFF)
        {
          v17 = *(_QWORD *)(v14 + 8);
          *(_DWORD *)(v3 + 136) = v15 + 1;
          *(_BYTE *)(v17 + v15) = v13;
          goto LABEL_24;
        }
      }
    }
    this = WTF::StringBuilder::append();
LABEL_24:
    v9 = *(_DWORD *)(v3 + 12);
    if (!v9)
      goto LABEL_43;
  }
  v26 = *(_DWORD *)(v3 + 12);
  if (!v26)
  {
    LOBYTE(v25) = 0;
    *(_BYTE *)(v3 + 145) = 1;
    goto LABEL_70;
  }
  if (*(_WORD *)(v3 + 66) != 10)
  {
LABEL_69:
    LOBYTE(v25) = 0;
    goto LABEL_70;
  }
  if (v26 < 2)
  {
    v36 = *(uint64_t (**)(_QWORD *))(v3 + 104);
    v37 = *(_QWORD *)(v3 + 112);
    v38 = (_QWORD *)(v3 + (v37 >> 1));
    if ((v37 & 1) != 0)
      v36 = *(uint64_t (**)(_QWORD *))(*v38 + v36);
    this = v36(v38);
    goto LABEL_69;
  }
  v27 = *(_QWORD *)(v3 + 16);
  if (*(_BYTE *)(v3 + 24))
  {
    *(_QWORD *)(v3 + 16) = v27 + 1;
    v28 = *(unsigned __int8 *)(v27 + 1);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v27 + 2;
    v28 = *(_WORD *)(v27 + 2);
  }
  *(_WORD *)(v3 + 66) = v28;
  *(_DWORD *)(v3 + 12) = v26 - 1;
  v25 = *(unsigned __int8 *)(v3 + 25);
  if (v26 != 2)
  {
    if (!*(_BYTE *)(v3 + 25))
      goto LABEL_70;
    goto LABEL_51;
  }
  *(_BYTE *)(v3 + 80) = 0;
  *(_QWORD *)(v3 + 88) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
  *(_QWORD *)(v3 + 96) = 0;
  if (v25)
    v32 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
  else
    v32 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
  *(_QWORD *)(v3 + 104) = v32;
  *(_QWORD *)(v3 + 112) = 0;
  if (v25)
  {
LABEL_51:
    LOBYTE(v25) = 0;
    v29 = *(_DWORD *)(v3 + 76) + 1;
    *(_DWORD *)(v3 + 72) = *(_DWORD *)(v3 + 68) - v26 + *(_DWORD *)(v3 + 8) + 1;
    *(_DWORD *)(v3 + 76) = v29;
  }
LABEL_70:
  if (*(_BYTE *)(v3 + 144) && !*(_DWORD *)(v3 + 12))
  {
    if (*(_DWORD *)(v3 + 136) | v9)
      goto LABEL_75;
LABEL_73:
    v39 = 0;
    *a3 = 0;
  }
  else
  {
    if ((v25 & 1) != 0)
      goto LABEL_73;
LABEL_75:
    v41 = (WTF::StringImpl **)(v3 + 120);
    v40 = *(WTF::StringImpl **)(v3 + 120);
    if (v40
      || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)(v3 + 120)),
          WTF::StringBuilder::reifyString((WTF::StringBuilder *)(v3 + 120)),
          (v40 = *v41) != 0))
    {
      v42 = *(_DWORD *)v40;
      *(_DWORD *)v40 += 2;
      *v41 = 0;
      if (v42)
        *(_DWORD *)v40 = v42;
      else
        WTF::StringImpl::destroy(v40, a2);
    }
    else
    {
      *v41 = 0;
    }
    this = *(_QWORD *)(v3 + 128);
    *(_QWORD *)(v3 + 128) = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        this = WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
      else
        *(_DWORD *)this -= 2;
    }
    *(_DWORD *)(v3 + 136) = 0;
    *(_QWORD *)a3 = v40;
    v39 = 1;
  }
  a3[8] = v39;
  return this;
}

uint64_t *WebCore::DataCue::setData(WebCore::DataCue *this, JSC::ArrayBuffer *a2)
{
  _DWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t v14;
  void *v15;
  WTF *v16;
  WTF *v17;
  uint64_t v18;

  v4 = (_DWORD *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = *((_QWORD *)this + 20);
  if (v5)
  {
    v6 = (uint64_t *)(v5 - 16);
    v7 = *(_QWORD *)(((v5 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v8 = *(uint64_t **)(v5 - 8);
    if (v8)
    {
      v9 = *v6;
      *v8 = *v6;
      *(_QWORD *)(v9 + 8) = v8;
      *v6 = 0;
      v6[1] = 0;
    }
    *v6 = *(_QWORD *)(v7 + 40);
    *(_QWORD *)(v7 + 40) = v6;
    *((_QWORD *)this + 20) = 0;
  }
  JSC::ArrayBuffer::create(a2, a2);
  v10 = v18;
  v18 = 0;
  v11 = (_QWORD *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = v10;
  if (v11)
  {
    v12 = *(_DWORD *)v11 == 2;
    *(_DWORD *)v11 -= 2;
    if (v12)
    {
      v14 = v11[10];
      if (v14)
      {
        *(_QWORD *)(v14 + 8) = 3;
        v11[10] = 0;
      }
      if ((v11[9] & 1) == 0)
        JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v11 + 9));
      JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v11 + 2));
      v16 = (WTF *)v11[1];
      if ((v16 & 1) == 0 && v16)
      {
        v17 = *(WTF **)v16;
        if (*(_QWORD *)v16)
        {
          *(_QWORD *)v16 = 0;
          *((_DWORD *)v16 + 2) = 0;
          WTF::fastFree(v17, v15);
        }
        WTF::fastFree(v16, v15);
      }
      WTF::fastFree((WTF *)v11, v15);
    }
  }
  return WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v18);
}

uint64_t WebCore::DataCue::DataCue(uint64_t a1, uint64_t a2, _OWORD *a3, _OWORD *a4, uint64_t a5, _DWORD **a6)
{
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  _DWORD *v16;
  uint64_t v17;
  unint64_t v19;
  _QWORD *v20;
  int v22;
  int v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29[3];
  uint64_t v30;

  v10 = a2;
  *(_DWORD *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E33A4FC0;
  v12 = a1 + 32;
  v13 = *(_QWORD *)(a2 + 704);
  if (v13)
  {
    v14 = *(_QWORD *)(v13 + 8);
    if (v14)
      v10 = v14;
  }
  *(_QWORD *)(a1 + 32) = &off_1E33A18C0;
  *(_QWORD *)(a1 + 40) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)(a1 + 32), (WebCore::ScriptExecutionContext *)(v10 + 192));
  *(_QWORD *)(a1 + 32) = &off_1E33A0540;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(_BYTE *)(v10 + 470))
  {
    __break(0xC471u);
    JUMPOUT(0x195D7D548);
  }
  v30 = v12;
  v15 = WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)(v10 + 320), &v30, (uint64_t)v29);
  *(_QWORD *)a1 = off_1E33EC380;
  *(_QWORD *)(a1 + 32) = &unk_1E33EC4A0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 64) = *a3;
  *(_OWORD *)(a1 + 80) = *a4;
  *(_DWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 127) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 135) = 1;
  *(_QWORD *)a1 = off_1E33EA150;
  *(_QWORD *)(a1 + 32) = &unk_1E33EA270;
  *(_QWORD *)(a1 + 136) = 0;
  v16 = *a6;
  if (*a6)
    *v16 += 2;
  *(_QWORD *)(a1 + 144) = v16;
  *(_QWORD *)(a1 + 152) = 0;
  v17 = WebCore::g_commonVMOrNull;
  if (!WebCore::g_commonVMOrNull)
  {
    WTF::RunLoop::webIfExists((WTF::RunLoop *)v15);
    JSC::VM::create();
    v17 = v29[0];
    WebCore::g_commonVMOrNull = v29[0];
    if (__ldaxr((unsigned int *)(v29[0] + 1096)))
    {
      __clrex();
    }
    else if (!__stlxr(4u, (unsigned int *)(v29[0] + 1096)))
    {
LABEL_12:
      if (webThreadStarted == 1)
        *(_BYTE *)(*(_QWORD *)(v17 + 112) + 5) = 1;
      WTF::ThreadGroup::addCurrentThread(**(WTF::ThreadGroup ***)(v17 + 584));
      WebCore::JSVMClientData::initNormalWorld((JSC::VM *)v17, 0);
      goto LABEL_15;
    }
    JSC::Heap::acquireAccessSlow((JSC::Heap *)(v17 + 192));
    goto LABEL_12;
  }
LABEL_15:
  v19 = *(_QWORD *)(v17 + 712);
  if (!v19)
  {
    JSC::HandleSet::grow((JSC::HandleSet *)(v17 + 672));
    v19 = *(_QWORD *)(v17 + 712);
  }
  *(_QWORD *)(v17 + 712) = *(_QWORD *)v19;
  *(_QWORD *)(v19 + 16) = 0;
  v20 = (_QWORD *)(v19 + 16);
  *(_QWORD *)v19 = 0;
  *(_QWORD *)(v19 + 8) = 0;
  *(_QWORD *)(a1 + 160) = v19 + 16;
  v22 = (a5 & 0xFFFE000000000002) == 0 && a5 != 0;
  v23 = (*v20 & 0xFFFE000000000002) == 0;
  if (!*v20)
    v23 = 0;
  if (v23 != v22)
  {
    if ((v22 & 1) != 0)
    {
      v24 = *(unint64_t **)((v19 & 0xFFFFFFFFFFFFF000) + 0x10);
      v25 = v24[3];
      v24 += 3;
      *(_QWORD *)v19 = v25;
      *(_QWORD *)(v19 + 8) = v24;
      *v24 = v19;
      *(_QWORD *)(v25 + 8) = v19;
    }
    else
    {
      v28 = *(_QWORD *)v19;
      v27 = *(_QWORD **)(v19 + 8);
      *v27 = *(_QWORD *)v19;
      *(_QWORD *)(v28 + 8) = v27;
      *(_QWORD *)v19 = 0;
      *(_QWORD *)(v19 + 8) = 0;
      v20 = *(_QWORD **)(a1 + 160);
    }
  }
  *v20 = a5;
  return a1;
}

uint64_t WebCore::DataCue::create@<X0>(WebCore::DataCue *this@<X0>, WebCore::Document *a2@<X1>, double a3@<D0>, double a4@<D1>, uint64_t *a5@<X8>)
{
  uint64_t v11;
  WTF::MediaTime *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WebCore::DataCue *v19;
  _DWORD *v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;

  v11 = bmalloc::api::isoAllocate();
  v12 = (WTF::MediaTime *)WTF::MediaTime::createWithDouble((WTF::MediaTime *)v11, a3);
  v14 = v13;
  v15 = WTF::MediaTime::createWithDouble(v12, a4);
  v17 = v16;
  *(_DWORD *)(v11 + 24) = 1;
  *(_QWORD *)(v11 + 8) = 0;
  *(_QWORD *)(v11 + 16) = 0;
  *(_QWORD *)v11 = &unk_1E33A4FC0;
  v18 = *((_QWORD *)this + 88);
  if (v18)
  {
    v19 = *(WebCore::DataCue **)(v18 + 8);
    if (v19)
      this = v19;
  }
  *(_QWORD *)(v11 + 32) = &off_1E33A18C0;
  *(_QWORD *)(v11 + 40) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)(v11 + 32), (WebCore::DataCue *)((char *)this + 192));
  *(_QWORD *)(v11 + 32) = &off_1E33A0540;
  *(_QWORD *)(v11 + 48) = 0;
  if (*((_BYTE *)this + 470))
  {
    result = 422;
    __break(0xC471u);
  }
  else
  {
    v23 = v11 + 32;
    WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)this + 40, &v23, (uint64_t)&v22);
    *(_QWORD *)(v11 + 56) = 0;
    *(_QWORD *)(v11 + 64) = v12;
    *(_QWORD *)(v11 + 72) = v14;
    *(_QWORD *)(v11 + 80) = v15;
    *(_QWORD *)(v11 + 88) = v17;
    *(_DWORD *)(v11 + 96) = 0;
    *(_QWORD *)(v11 + 112) = 0;
    *(_QWORD *)(v11 + 120) = 0;
    *(_QWORD *)(v11 + 104) = 0;
    *(_QWORD *)(v11 + 127) = 0;
    *(_BYTE *)(v11 + 135) = 1;
    *(_QWORD *)v11 = off_1E33EA150;
    *(_QWORD *)(v11 + 32) = &unk_1E33EA270;
    *(_QWORD *)(v11 + 136) = 0;
    v20 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v20 += 2;
    *(_QWORD *)(v11 + 152) = 0;
    *(_QWORD *)(v11 + 160) = 0;
    *(_QWORD *)(v11 + 144) = v20;
    WebCore::DataCue::setData((WebCore::DataCue *)v11, a2);
    *a5 = v11;
    return (uint64_t)WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)(v11 + 32));
  }
  return result;
}

void WebCore::DataCue::~DataCue(WebCore::DataCue *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _DWORD *v8;
  WTF::StringImpl *v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  void *v13;
  WTF **v14;
  WTF *v15;
  WTF *v16;

  v3 = *((_QWORD *)this + 20);
  if (v3)
  {
    v4 = (uint64_t *)(v3 - 16);
    v5 = *(_QWORD *)(((v3 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v6 = *(uint64_t **)(v3 - 8);
    if (v6)
    {
      v7 = *v4;
      *v6 = *v4;
      *(_QWORD *)(v7 + 8) = v6;
      *v4 = 0;
      v4[1] = 0;
    }
    *v4 = *(_QWORD *)(v5 + 40);
    *(_QWORD *)(v5 + 40) = v4;
    *((_QWORD *)this + 20) = 0;
  }
  v8 = (_DWORD *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = (_QWORD *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v10)
  {
    v11 = *(_DWORD *)v10 == 2;
    *(_DWORD *)v10 -= 2;
    if (v11)
    {
      v12 = v10[10];
      if (v12)
      {
        *(_QWORD *)(v12 + 8) = 3;
        v10[10] = 0;
      }
      if ((v10[9] & 1) == 0)
        JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v10 + 9));
      JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v10 + 2));
      v14 = (WTF **)v10[1];
      if ((v14 & 1) == 0 && v14)
      {
        v16 = (WTF *)v10[1];
        v15 = *v14;
        if (*v14)
        {
          *(_QWORD *)v16 = 0;
          *((_DWORD *)v16 + 2) = 0;
          WTF::fastFree(v15, v13);
        }
        WTF::fastFree(v16, v13);
      }
      WTF::fastFree((WTF *)v10, v13);
    }
  }
  WebCore::TextTrackCue::~TextTrackCue(this, a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::DataCue::~DataCue(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void WebCore::TextTrackCue::~TextTrackCue(WebCore::TextTrackCue *this, void *a2)
{
  WebCore::ActiveDOMObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  WTF::StringImpl *v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E33EC380;
  *((_QWORD *)this + 4) = &unk_1E33EC4A0;
  v3 = (WebCore::TextTrackCue *)((char *)this + 32);
  v4 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  v5 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  v6 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr((unsigned int *)v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, (unsigned int *)v6));
    if (!v8)
    {
      atomic_store(1u, (unsigned int *)v6);
      v11 = *(unsigned int *)(v6 + 28);
      if ((_DWORD)v11)
      {
        v14 = v6;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v6 + 16), (WTF::StringImpl *)(*(_QWORD *)(v6 + 16) + 32 * v11));
        v6 = v14;
      }
      v12 = *(WTF **)(v6 + 16);
      if (v12)
      {
        *(_QWORD *)(v6 + 16) = 0;
        *(_DWORD *)(v6 + 24) = 0;
        v13 = v6;
        WTF::fastFree(v12, a2);
        v6 = v13;
      }
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  WebCore::ActiveDOMObject::~ActiveDOMObject(v3, a2);
  WebCore::EventTarget::~EventTarget(this, v10);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::TextTrackCue::~TextTrackCue(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void `non-virtual thunk to'WebCore::DataCue::~DataCue(WebCore::DataCue *this, WTF::StringImpl *a2)
{
  WebCore::DataCue::~DataCue((WebCore::DataCue *)((char *)this - 32), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::DataCue::~DataCue((WebCore::DataCue *)((char *)this - 32), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t WebCore::DataCue::cueContentsMatch(WebCore::DataCue *this, const WebCore::TextTrackCue *a2)
{
  JSC::ArrayBuffer *v4;
  uint64_t v5;
  JSC::ArrayBuffer *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v17;
  void *v18;
  WTF **v19;
  WTF *v20;
  uint64_t v21;
  uint64_t v22;
  size_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  double v31;
  unint64_t *v32;
  unint64_t v33;
  double v34;
  BOOL v35;
  int v36;
  const WTF::StringImpl *v37;
  uint64_t v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;

  if ((*(unsigned int (**)(const WebCore::TextTrackCue *))(*(_QWORD *)a2 + 128))(a2) != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x195D7DAFCLL);
  }
  v5 = *((_QWORD *)a2 + 19);
  if (v5)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v5 + 24))(&v41);
  }
  else
  {
    v6 = (JSC::ArrayBuffer *)*((_QWORD *)a2 + 17);
    if (!v6)
    {
      v41 = 0;
LABEL_20:
      if (*((_QWORD *)this + 17))
        goto LABEL_21;
      goto LABEL_46;
    }
    JSC::ArrayBuffer::create(v6, v4);
    v41 = v42;
    v42 = 0;
    WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v42);
  }
  if (!v41)
    goto LABEL_20;
  v7 = *((_QWORD *)this + 17);
  if (!v7)
    goto LABEL_21;
  if (*(_BYTE *)(v7 + 64) && (v21 = *(_QWORD *)(v7 + 32)) != 0)
    v8 = *(_QWORD *)(v21 + 32);
  else
    v8 = *(_QWORD *)(v7 + 48);
  if (*(_BYTE *)(v41 + 64) && (v22 = *(_QWORD *)(v41 + 32)) != 0)
    v9 = *(_QWORD *)(v22 + 32);
  else
    v9 = *(_QWORD *)(v41 + 48);
  if (v8 != v9)
    goto LABEL_21;
  v10 = *(_QWORD *)(v7 + 16);
  if (v10)
  {
    v11 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
    if (v11 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]))
    {
      if (!((v10 & 0x3FFFFFFFFLL) + v11))
        goto LABEL_46;
      v10 = (v10 & 0x3FFFFFFFFLL) + v11;
      v12 = *(_QWORD *)(v41 + 16);
      if (v12)
        v13 = (const void *)((v12 & 0x3FFFFFFFFLL) + v11);
      else
        v13 = 0;
    }
    else
    {
      v13 = *(const void **)(v41 + 16);
    }
    if (*(_BYTE *)(v7 + 64) && (v39 = *(_QWORD *)(v7 + 32)) != 0)
      v23 = *(_QWORD *)(v39 + 32);
    else
      v23 = *(_QWORD *)(v7 + 48);
    if (memcmp((const void *)v10, v13, v23))
      goto LABEL_21;
  }
LABEL_46:
  v24 = *((_QWORD *)this + 19);
  if (!*((_QWORD *)a2 + 19))
  {
    if (!v24)
      goto LABEL_51;
LABEL_21:
    v14 = 0;
    goto LABEL_22;
  }
  if (!v24 || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24))
    goto LABEL_21;
LABEL_51:
  v25 = (unint64_t *)*((_QWORD *)this + 20);
  if (!v25)
  {
    v32 = (unint64_t *)*((_QWORD *)a2 + 20);
    if (v32)
    {
      v33 = *v32;
      v35 = *v32 == 0;
      v28 = 2;
      if (v35)
        v27 = 2;
      else
        v27 = v33;
    }
    else
    {
      v28 = 2;
      v27 = 2;
    }
    goto LABEL_82;
  }
  v26 = *v25;
  v27 = 2;
  if (*v25)
    v28 = *v25;
  else
    v28 = 2;
  v29 = (unint64_t *)*((_QWORD *)a2 + 20);
  if (!v29)
    goto LABEL_82;
  v30 = *v29;
  if (v30)
    v27 = v30;
  else
    v27 = 2;
  if (v28 < 0xFFFE000000000000)
  {
    if (v28 >> 49)
    {
      v26 = v28;
      if (v27 >> 49)
      {
        *(_QWORD *)&v31 = v28 - 0x2000000000000;
        if (v27 >= 0xFFFE000000000000)
        {
          v34 = (double)(int)v27;
          goto LABEL_71;
        }
LABEL_70:
        *(_QWORD *)&v34 = v30 - 0x2000000000000;
LABEL_71:
        v35 = v31 == v34;
        goto LABEL_83;
      }
    }
    else
    {
      v26 = v28;
    }
  }
  else
  {
    if (v27 >= 0xFFFE000000000000)
    {
LABEL_82:
      v35 = v28 == v27;
      goto LABEL_83;
    }
    if (v27 >> 49)
    {
      v31 = (double)(int)v28;
      goto LABEL_70;
    }
  }
  if (((v26 | v27) & 0xFFFE000000000002) != 0)
  {
    v28 = v26;
    goto LABEL_82;
  }
  v36 = *(unsigned __int8 *)(v26 + 5);
  if (v36 == 3)
  {
    if (*(_BYTE *)(v27 + 5) == 3)
    {
      v38 = JSC::JSBigInt::equals((JSC::JSBigInt *)v26, (JSC::JSBigInt *)v27, (JSC::JSBigInt *)v27);
LABEL_90:
      v14 = v38;
      goto LABEL_22;
    }
  }
  else if (v36 == 2 && *(_BYTE *)(v27 + 5) == 2)
  {
    if ((*(_QWORD *)(v26 + 8) & 1) != 0
      || (v37 = *(const WTF::StringImpl **)(v27 + 8), (v37 & 1) != 0))
    {
      v38 = JSC::JSString::equalSlowCase();
    }
    else
    {
      v38 = WTF::equal(*(WTF **)(v26 + 8), v37, (const WTF::StringImpl *)v27);
    }
    goto LABEL_90;
  }
  v35 = v26 == v27;
LABEL_83:
  v14 = v35;
LABEL_22:
  v15 = (_QWORD *)v41;
  v41 = 0;
  if (v15)
  {
    v35 = *(_DWORD *)v15 == 2;
    *(_DWORD *)v15 -= 2;
    if (v35)
    {
      v17 = v15[10];
      if (v17)
      {
        *(_QWORD *)(v17 + 8) = 3;
        v15[10] = 0;
      }
      if ((v15[9] & 1) == 0)
        JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v15 + 9));
      JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v15 + 2));
      v19 = (WTF **)v15[1];
      if ((v19 & 1) == 0 && v19)
      {
        v40 = (WTF *)v15[1];
        v20 = *v19;
        if (*v19)
        {
          *(_QWORD *)v40 = 0;
          *((_DWORD *)v40 + 2) = 0;
          WTF::fastFree(v20, v18);
        }
        WTF::fastFree(v40, v18);
      }
      WTF::fastFree((WTF *)v15, v18);
    }
  }
  return v14;
}

_DWORD *WebCore::DataCue::setValue(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _DWORD *result;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  void *v13;
  WTF *v14;
  WTF *v15;
  uint64_t **v16;
  uint64_t v17;

  v6 = a1[20];
  v5 = (uint64_t **)(a1 + 20);
  if (!v6)
  {
    v7 = *(_QWORD *)(a2 + 56);
    v8 = *(_QWORD **)(v7 + 712);
    if (!v8)
    {
      v16 = v5;
      v17 = *(_QWORD *)(a2 + 56);
      JSC::HandleSet::grow((JSC::HandleSet *)(v7 + 672));
      v5 = v16;
      v7 = v17;
      v8 = *(_QWORD **)(v17 + 712);
    }
    *(_QWORD *)(v7 + 712) = *v8;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
    *v5 = v8 + 2;
  }
  JSC::Strong<JSC::Unknown,(JSC::ShouldStrongDestructorGrabLock)0>::set(v5, a3);
  result = (_DWORD *)a1[19];
  a1[19] = 0;
  if (result)
  {
    if (result[2] == 1)
      result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  v10 = (_QWORD *)a1[17];
  a1[17] = 0;
  if (v10)
  {
    v11 = *(_DWORD *)v10 == 2;
    *(_DWORD *)v10 -= 2;
    if (v11)
    {
      v12 = v10[10];
      if (v12)
      {
        *(_QWORD *)(v12 + 8) = 3;
        v10[10] = 0;
      }
      if ((v10[9] & 1) == 0)
        JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v10 + 9));
      JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v10 + 2));
      v14 = (WTF *)v10[1];
      if ((v14 & 1) == 0 && v14)
      {
        v15 = *(WTF **)v14;
        if (*(_QWORD *)v14)
        {
          *(_QWORD *)v14 = 0;
          *((_DWORD *)v14 + 2) = 0;
          WTF::fastFree(v15, v13);
        }
        WTF::fastFree(v14, v13);
      }
      return (_DWORD *)WTF::fastFree((WTF *)v10, v13);
    }
  }
  return result;
}

WTF::StringImpl *WebCore::DataCue::toJSON(WebCore::DataCue *this, WTF::JSONImpl::Object *a2)
{
  WTF::StringImpl *result;
  uint64_t v5;
  WTF::JSONImpl::Value *v6;
  uint64_t v7;
  const WTF::String *v8;
  WTF::StringImpl *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  _DWORD *v14;
  _DWORD **v15;
  uint64_t v16;
  _DWORD *v17;
  WTF::StringImpl *v18;
  _DWORD *v19;
  _BYTE v20[24];

  result = WebCore::TextTrackCue::toJSON(this, a2);
  v7 = *((_QWORD *)this + 18);
  v6 = (WebCore::DataCue *)((char *)this + 144);
  v5 = v7;
  if (v7 && *(_DWORD *)(v5 + 4))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::Value::create(v6, v8);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)a2 + 2, &v18, (const WTF::StringImpl *)&v19, (uint64_t)v20);
    if (v20[16])
    {
      v10 = (uint64_t *)((char *)a2 + 24);
      v11 = *((unsigned int *)a2 + 9);
      if ((_DWORD)v11 == *((_DWORD *)a2 + 8))
      {
        v15 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v10, v11 + 1, (unint64_t)&v18);
        v11 = *((unsigned int *)a2 + 9);
        v16 = *((_QWORD *)a2 + 3);
        v17 = *v15;
        if (*v15)
          *v17 += 2;
        *(_QWORD *)(v16 + 8 * v11) = v17;
      }
      else
      {
        v12 = *v10;
        v13 = v18;
        if (v18)
          *(_DWORD *)v18 += 2;
        *(_QWORD *)(v12 + 8 * v11) = v13;
      }
      *((_DWORD *)a2 + 9) = v11 + 1;
    }
    v14 = v19;
    v19 = 0;
    if (v14)
    {
      if (*v14 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v14;
    }
    result = v18;
    v18 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void WebCore::InbandTextTrack::~InbandTextTrack(WebCore::InbandTextTrack *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned __int8 *v7;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;

  *(_QWORD *)this = &off_1E33EA2C8;
  *((_QWORD *)this + 3) = &unk_1E33EA458;
  *((_QWORD *)this + 15) = &unk_1E33EA498;
  *((_QWORD *)this + 18) = &unk_1E33EA510;
  *((_QWORD *)this + 33) = &unk_1E33EA568;
  v3 = *((_QWORD *)this + 35);
  v4 = (unsigned int *)(v3 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = *((_DWORD *)this + 28);
  v7 = (unsigned __int8 *)(v3 + 12);
  if (__ldaxr((unsigned __int8 *)(v3 + 12)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v7))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEA534C](v3 + 12);
LABEL_7:
  if (*(_DWORD *)(v3 + 28) <= v6)
  {
    __break(0xC471u);
    return;
  }
  v9 = __ldxr(v7);
  if (v9 == 1)
  {
    if (!__stlxr(0, v7))
      goto LABEL_13;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(v3 + 12));
  do
  {
LABEL_13:
    v10 = __ldaxr(v4);
    v11 = v10 - 1;
  }
  while (__stlxr(v11, v4));
  if (!v11)
  {
    atomic_store(1u, (unsigned int *)(v3 + 8));
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  v12 = (unsigned int *)*((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v12)
  {
    v13 = v12 + 2;
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v12 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 8))(v12);
    }
  }
  v16 = *((_QWORD *)this + 34);
  if (v16)
  {
    *(_QWORD *)(v16 + 8) = 0;
    v17 = (unsigned int *)*((_QWORD *)this + 34);
    *((_QWORD *)this + 34) = 0;
    if (v17)
    {
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        atomic_store(1u, v17);
        WTF::fastFree((WTF *)v17, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 34) = 0;
  }
  WebCore::TextTrack::~TextTrack(this, a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::InbandTextTrack::~InbandTextTrack(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void WebCore::InbandDataTextTrack::~InbandDataTextTrack(WebCore::InbandDataTextTrack *this, void *a2)
{
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;

  v3 = *((unsigned int *)this + 75);
  if ((_DWORD)v3)
  {
    v4 = (_DWORD **)*((_QWORD *)this + 36);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (v6[6] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 72))(v6);
        else
          --v6[6];
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 36);
  if (v7)
  {
    *((_QWORD *)this + 36) = 0;
    *((_DWORD *)this + 74) = 0;
    WTF::fastFree(v7, a2);
  }
  WebCore::InbandTextTrack::~InbandTextTrack(this, a2);
}

{
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;
  bmalloc::api *v8;
  void *v9;

  v3 = *((unsigned int *)this + 75);
  if ((_DWORD)v3)
  {
    v4 = (_DWORD **)*((_QWORD *)this + 36);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (v6[6] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 72))(v6);
        else
          --v6[6];
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 36);
  if (v7)
  {
    *((_QWORD *)this + 36) = 0;
    *((_DWORD *)this + 74) = 0;
    WTF::fastFree(v7, a2);
  }
  WebCore::InbandTextTrack::~InbandTextTrack(this, a2);
  bmalloc::api::isoDeallocate(v8, v9);
}

void `non-virtual thunk to'WebCore::InbandDataTextTrack::~InbandDataTextTrack(WebCore::InbandDataTextTrack *this, void *a2)
{
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;

  v3 = *((unsigned int *)this + 69);
  if ((_DWORD)v3)
  {
    v4 = (_DWORD **)*((_QWORD *)this + 33);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (v6[6] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 72))(v6);
        else
          --v6[6];
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 33);
  if (v7)
  {
    *((_QWORD *)this + 33) = 0;
    *((_DWORD *)this + 68) = 0;
    WTF::fastFree(v7, a2);
  }
  WebCore::InbandTextTrack::~InbandTextTrack((WebCore::InbandDataTextTrack *)((char *)this - 24), a2);
}

{
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;

  v3 = *((unsigned int *)this + 45);
  if ((_DWORD)v3)
  {
    v4 = (_DWORD **)*((_QWORD *)this + 21);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (v6[6] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 72))(v6);
        else
          --v6[6];
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 21);
  if (v7)
  {
    *((_QWORD *)this + 21) = 0;
    *((_DWORD *)this + 44) = 0;
    WTF::fastFree(v7, a2);
  }
  WebCore::InbandTextTrack::~InbandTextTrack((WebCore::InbandDataTextTrack *)((char *)this - 120), a2);
}

{
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;

  v3 = *((unsigned int *)this + 39);
  if ((_DWORD)v3)
  {
    v4 = (_DWORD **)*((_QWORD *)this + 18);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (v6[6] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 72))(v6);
        else
          --v6[6];
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 18);
  if (v7)
  {
    *((_QWORD *)this + 18) = 0;
    *((_DWORD *)this + 38) = 0;
    WTF::fastFree(v7, a2);
  }
  WebCore::InbandTextTrack::~InbandTextTrack((WebCore::InbandDataTextTrack *)((char *)this - 144), a2);
}

{
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;

  v3 = *((unsigned int *)this + 9);
  if ((_DWORD)v3)
  {
    v4 = (_DWORD **)*((_QWORD *)this + 3);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (v6[6] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 72))(v6);
        else
          --v6[6];
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 3);
  if (v7)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  WebCore::InbandTextTrack::~InbandTextTrack((WebCore::InbandDataTextTrack *)((char *)this - 264), a2);
}

{
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;
  bmalloc::api *v8;
  void *v9;

  v3 = *((unsigned int *)this + 69);
  if ((_DWORD)v3)
  {
    v4 = (_DWORD **)*((_QWORD *)this + 33);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (v6[6] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 72))(v6);
        else
          --v6[6];
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 33);
  if (v7)
  {
    *((_QWORD *)this + 33) = 0;
    *((_DWORD *)this + 68) = 0;
    WTF::fastFree(v7, a2);
  }
  WebCore::InbandTextTrack::~InbandTextTrack((WebCore::InbandDataTextTrack *)((char *)this - 24), a2);
  bmalloc::api::isoDeallocate(v8, v9);
}

{
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;
  bmalloc::api *v8;
  void *v9;

  v3 = *((unsigned int *)this + 45);
  if ((_DWORD)v3)
  {
    v4 = (_DWORD **)*((_QWORD *)this + 21);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (v6[6] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 72))(v6);
        else
          --v6[6];
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 21);
  if (v7)
  {
    *((_QWORD *)this + 21) = 0;
    *((_DWORD *)this + 44) = 0;
    WTF::fastFree(v7, a2);
  }
  WebCore::InbandTextTrack::~InbandTextTrack((WebCore::InbandDataTextTrack *)((char *)this - 120), a2);
  bmalloc::api::isoDeallocate(v8, v9);
}

{
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;
  bmalloc::api *v8;
  void *v9;

  v3 = *((unsigned int *)this + 39);
  if ((_DWORD)v3)
  {
    v4 = (_DWORD **)*((_QWORD *)this + 18);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (v6[6] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 72))(v6);
        else
          --v6[6];
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 18);
  if (v7)
  {
    *((_QWORD *)this + 18) = 0;
    *((_DWORD *)this + 38) = 0;
    WTF::fastFree(v7, a2);
  }
  WebCore::InbandTextTrack::~InbandTextTrack((WebCore::InbandDataTextTrack *)((char *)this - 144), a2);
  bmalloc::api::isoDeallocate(v8, v9);
}

{
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;
  bmalloc::api *v8;
  void *v9;

  v3 = *((unsigned int *)this + 9);
  if ((_DWORD)v3)
  {
    v4 = (_DWORD **)*((_QWORD *)this + 3);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (v6[6] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 72))(v6);
        else
          --v6[6];
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 3);
  if (v7)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  WebCore::InbandTextTrack::~InbandTextTrack((WebCore::InbandDataTextTrack *)((char *)this - 264), a2);
  bmalloc::api::isoDeallocate(v8, v9);
}

uint64_t WebCore::InbandDataTextTrack::addDataCue(uint64_t result, _OWORD *a2, _OWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  _BYTE v18[8];
  WTF::StringImpl *v19;
  char v20;
  uint64_t v21[3];
  _QWORD *v22;

  v3 = *(_QWORD *)(result + 152);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      if (!*(_BYTE *)(v4 + 178))
      {
        v7 = result;
        v8 = v4 - 288;
        v9 = (_DWORD *)(v4 - 264);
        *(_DWORD *)(v4 - 264) += 2;
        v10 = bmalloc::api::isoAllocate();
        v11 = v10;
        *(_DWORD *)(v10 + 24) = 1;
        *(_QWORD *)(v10 + 8) = 0;
        *(_QWORD *)(v10 + 16) = 0;
        *(_QWORD *)v10 = &unk_1E33A4FC0;
        v12 = (_QWORD *)(v10 + 32);
        v13 = *(_QWORD *)(v4 + 416);
        if (v13)
        {
          v14 = *(_QWORD *)(v13 + 8);
          if (v14)
            v8 = v14;
        }
        *(_QWORD *)(v10 + 32) = &off_1E33A18C0;
        *(_QWORD *)(v10 + 40) = 0;
        WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)(v10 + 32), (WebCore::ScriptExecutionContext *)(v8 + 192));
        *(_QWORD *)(v11 + 32) = &off_1E33A0540;
        *(_QWORD *)(v11 + 48) = 0;
        if (*(_BYTE *)(v8 + 470))
        {
          result = 422;
          __break(0xC471u);
        }
        else
        {
          v22 = v12;
          WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)(v8 + 320), (uint64_t *)&v22, (uint64_t)v21);
          *(_QWORD *)v11 = off_1E33EC380;
          *(_QWORD *)(v11 + 32) = &unk_1E33EC4A0;
          *(_QWORD *)(v11 + 56) = 0;
          *(_OWORD *)(v11 + 64) = *a2;
          *(_OWORD *)(v11 + 80) = *a3;
          *(_DWORD *)(v11 + 96) = 0;
          *(_QWORD *)(v11 + 127) = 0;
          *(_QWORD *)(v11 + 112) = 0;
          *(_QWORD *)(v11 + 120) = 0;
          *(_QWORD *)(v11 + 104) = 0;
          *(_BYTE *)(v11 + 135) = 1;
          *(_QWORD *)v11 = off_1E33EA150;
          *(_QWORD *)(v11 + 32) = &unk_1E33EA270;
          JSC::ArrayBuffer::create();
          v15 = v21[0];
          v21[0] = 0;
          *(_QWORD *)(v11 + 136) = v15;
          WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(v21);
          *(_QWORD *)(v11 + 144) = 0;
          *(_QWORD *)(v11 + 152) = 0;
          *(_QWORD *)(v11 + 160) = 0;
          WebCore::ActiveDOMObject::suspendIfNeeded(v12);
          v21[0] = v11;
          WebCore::TextTrack::addCue(v7, v21, (uint64_t)v18);
          if (v20)
          {
            v17 = v19;
            v19 = 0;
            if (v17)
            {
              if (*(_DWORD *)v17 == 2)
                WTF::StringImpl::destroy(v17, v16);
              else
                *(_DWORD *)v17 -= 2;
            }
          }
          result = v21[0];
          v21[0] = 0;
          if (result)
          {
            if (*(_DWORD *)(result + 24) == 1)
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 72))(result);
            else
              --*(_DWORD *)(result + 24);
          }
          if (*v9 == 2)
          {
            if ((*(_WORD *)(v4 - 258) & 0x400) == 0)
              return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)(v4 - 288), v16);
          }
          else
          {
            *v9 -= 2;
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::TextTrack::scriptExecutionContext(WebCore::TextTrack *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 19);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

uint64_t `non-virtual thunk to'WebCore::InbandDataTextTrack::addDataCue(uint64_t a1, _OWORD *a2, _OWORD *a3)
{
  return WebCore::InbandDataTextTrack::addDataCue(a1 - 264, a2, a3);
}

unsigned int *WebCore::InbandDataTextTrack::addDataCue(unsigned int *result, _OWORD *a2, uint64_t a3, uint64_t *a4, _DWORD **a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  WebCore::Node *v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  unsigned int v25;
  uint64_t (*v26)();
  uint64_t v27;
  uint64_t v28;
  WTF::JSONImpl::Object *v29;
  _DWORD *v30;
  int v31;
  int v32;
  int v33;
  BOOL v34;
  int v35;
  char v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  int v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  void *v49;
  void *v50;
  void *v51;
  uint64_t v52;
  uint64_t *v53;
  unsigned int v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  NSObject *v59;
  uint64_t v60;
  char *v61;
  unsigned __int8 *v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  WTF::JSONImpl::Object *v69;
  WTF::Logger *v70;
  WTF::Logger *v71;
  uint64_t v72;
  uint64_t v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::Logger *v76;
  WebCore::Node *v77;
  uint64_t v78;
  WTF::StringImpl **v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  WTF::JSONImpl::Object *v87;
  _DWORD *v88;
  int v89;
  int v90;
  uint64_t v91;
  unsigned int v92;
  int v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  NSObject *v97;
  uint64_t v98;
  void *v99;
  char *v100;
  unsigned __int8 *v101;
  int v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  WTF::JSONImpl::Object *v108;
  WTF::Logger *v109;
  WTF::Logger *v110;
  uint64_t v111;
  uint64_t v112;
  WTF::StringImpl *v113;
  WTF::Logger *v114;
  WebCore::Node *v115;
  uint64_t v116;
  WTF::StringImpl **v117;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119;
  WTF::StringImpl *v120;
  int v121;
  _DWORD *v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t **v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char v132[8];
  WTF::StringImpl *v133;
  char v134;
  const char *v135;
  uint64_t v136;
  const char *v137;
  uint64_t v138;
  WTF::StringImpl *v139;
  WTF::Logger *v140;
  uint64_t v141;
  WTF::StringImpl *v142;
  WTF::StringImpl *v143;
  WTF::StringImpl *v144;
  __int128 buf;
  int v146;
  WTF::StringImpl *v147;
  int v148;
  WTF::StringImpl *v149;
  uint64_t v150;

  v150 = *MEMORY[0x1E0C80C00];
  v5 = *((_QWORD *)result + 19);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
    {
      if (!*(_BYTE *)(v6 + 178))
      {
        v11 = (uint64_t)result;
        v12 = (WebCore::Node *)(v6 - 288);
        *(_DWORD *)(v6 - 264) += 2;
        if (result[75])
        {
          v13 = 0;
          v14 = *a4;
          while (((*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v14 + 32))(v14, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 288) + 8 * v13) + 152)) & 1) == 0)
          {
            if (++v13 >= *(unsigned int *)(v11 + 300))
              goto LABEL_8;
          }
          if (v13 >= *(unsigned int *)(v11 + 300))
          {
            __break(0xC471u);
            JUMPOUT(0x195D7F7C8);
          }
          result = *(unsigned int **)(*(_QWORD *)(v11 + 288) + 8 * v13);
          if (result)
          {
            v39 = result[6];
            result[6] = v39 + 1;
            if (v39)
              result[6] = v39;
            else
              result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 72))(result);
            goto LABEL_213;
          }
        }
LABEL_8:
        v16 = *a4;
        ++*(_DWORD *)(*a4 + 8);
        v17 = bmalloc::api::isoAllocate();
        v18 = v17;
        *(_DWORD *)(v17 + 24) = 1;
        *(_QWORD *)(v17 + 8) = 0;
        *(_QWORD *)(v17 + 16) = 0;
        *(_QWORD *)v17 = &unk_1E33A4FC0;
        v19 = (char *)(v17 + 32);
        v20 = *(_QWORD *)(v6 + 416);
        v21 = v6 - 288;
        if (v20)
        {
          v22 = *(_QWORD *)(v20 + 8);
          if (v22)
            v21 = v22;
          else
            v21 = v6 - 288;
        }
        *(_QWORD *)(v17 + 32) = &off_1E33A18C0;
        *(_QWORD *)(v17 + 40) = 0;
        WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)(v17 + 32), (WebCore::ScriptExecutionContext *)(v21 + 192));
        *(_QWORD *)(v18 + 32) = &off_1E33A0540;
        *(_QWORD *)(v18 + 48) = 0;
        if (*(_BYTE *)(v21 + 470))
        {
          __break(0xC471u);
          goto LABEL_269;
        }
        v135 = v19;
        WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)(v21 + 320), (uint64_t *)&v135, (uint64_t)&buf);
        *(_QWORD *)v18 = off_1E33EC380;
        *(_QWORD *)(v18 + 32) = &unk_1E33EC4A0;
        *(_QWORD *)(v18 + 56) = 0;
        *(_OWORD *)(v18 + 64) = *a2;
        *(_OWORD *)(v18 + 80) = *(_OWORD *)a3;
        *(_DWORD *)(v18 + 96) = 0;
        *(_QWORD *)(v18 + 104) = 0;
        v23 = v18 + 104;
        *(_QWORD *)(v18 + 127) = 0;
        *(_BYTE *)(v18 + 135) = 1;
        *(_QWORD *)(v18 + 112) = 0;
        *(_QWORD *)(v18 + 120) = 0;
        *(_QWORD *)v18 = off_1E33EA150;
        *(_QWORD *)(v18 + 32) = &unk_1E33EA270;
        *(_QWORD *)(v18 + 136) = 0;
        v24 = *a5;
        if (*a5)
          *v24 += 2;
        *(_QWORD *)(v18 + 144) = v24;
        *(_QWORD *)(v18 + 152) = v16;
        *(_QWORD *)(v18 + 160) = 0;
        WebCore::ActiveDOMObject::suspendIfNeeded(v19);
        WebCore::TextTrack::matchCue((WTF::MediaTime *)v11, (WebCore::TextTrackCue *)v18, 1, (uint64_t *)&buf);
        result = (unsigned int *)buf;
        *(_QWORD *)&buf = 0;
        if (result)
        {
          v25 = result[6];
          if (v25 == 1)
            result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 72))(result);
          else
            result[6] = v25 - 1;
          v26 = WTF::RefPtr<WebCore::TextTrackCue,WTF::RawPtrTraits<WebCore::TextTrackCue>,WTF::DefaultRefDerefTraits<WebCore::TextTrackCue>>::unspecifiedBoolTypeInstance;
        }
        else
        {
          v26 = 0;
        }
        if (v26)
        {
          v27 = *(_QWORD *)(v11 + 88);
          v28 = *(_QWORD *)(v11 + 96);
          v135 = "DataCue";
          v136 = 8;
          v137 = "addDataCue";
          v138 = v28;
          if (!*(_BYTE *)(v27 + 12) || !WebCore::LogMedia || byte_1ECE7C490 < 3u)
          {
LABEL_211:
            if (*(_DWORD *)(v18 + 24) == 1)
              result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 72))(v18);
            else
              --*(_DWORD *)(v18 + 24);
LABEL_213:
            v122 = (_DWORD *)(v6 - 264);
LABEL_214:
            if (*v122 == 2)
            {
              if ((*(_WORD *)(v6 - 258) & 0x400) == 0)
                return WebCore::Node::removedLastRef(v12, v15);
            }
            else
            {
              *v122 -= 2;
            }
            return result;
          }
          WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v135);
          v29 = (WTF::JSONImpl::Object *)WTF::String::String((WTF::String *)&v142, "ignoring already added cue: ");
          WTF::JSONImpl::Object::create(v29);
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v18 + 264))(v18, buf);
          WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)buf);
          v30 = (_DWORD *)buf;
          *(_QWORD *)&buf = 0;
          if (v30)
          {
            if (*v30 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v30;
          }
          if (v143)
          {
            v31 = *((_DWORD *)v143 + 1);
            if (v142)
              goto LABEL_28;
          }
          else
          {
            v31 = 0;
            if (v142)
            {
LABEL_28:
              v32 = *((_DWORD *)v142 + 1);
              if (v139)
              {
LABEL_29:
                v33 = *((_DWORD *)v139 + 1);
LABEL_30:
                if ((v33 | v32) < 0
                  || ((v34 = __OFADD__(v32, v33), v35 = v32 + v33, !v34) ? (v36 = 0) : (v36 = 1),
                      v31 < 0 || (v36 & 1) != 0 || (v37 = (v31 + v35), __OFADD__(v31, v35))))
                {
                  v144 = 0;
                  goto LABEL_264;
                }
                if (v143 && (*((_BYTE *)v143 + 16) & 4) == 0)
                {
                  v38 = 0;
                  goto LABEL_69;
                }
                if (v142)
                {
                  v54 = *((_DWORD *)v142 + 4);
                  v38 = (v54 >> 2) & 1;
                  if (v139 && (v54 & 4) != 0)
                    goto LABEL_68;
                }
                else
                {
                  if (v139)
                  {
LABEL_68:
                    v38 = (*((unsigned __int8 *)v139 + 16) >> 2) & 1;
                    goto LABEL_69;
                  }
                  v38 = 1;
                }
LABEL_69:
                WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v37, v38, v143, (uint64_t)v142, (uint64_t)v139, &v144);
                if (v144)
                {
                  v56 = v139;
                  v139 = 0;
                  if (v56)
                  {
                    if (*(_DWORD *)v56 == 2)
                      WTF::StringImpl::destroy(v56, v55);
                    else
                      *(_DWORD *)v56 -= 2;
                  }
                  v57 = v142;
                  v142 = 0;
                  if (v57)
                  {
                    if (*(_DWORD *)v57 == 2)
                      WTF::StringImpl::destroy(v57, v55);
                    else
                      *(_DWORD *)v57 -= 2;
                  }
                  v58 = v143;
                  v143 = 0;
                  if (v58)
                  {
                    if (*(_DWORD *)v58 == 2)
                      WTF::StringImpl::destroy(v58, v55);
                    else
                      *(_DWORD *)v58 -= 2;
                  }
                  v59 = qword_1ECE7C4A0;
                  v60 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
                  if ((_DWORD)v60)
                  {
                    WTF::String::utf8();
                    v61 = v140 ? (char *)v140 + 16 : 0;
                    LODWORD(buf) = 136446210;
                    *(_QWORD *)((char *)&buf + 4) = v61;
                    _os_log_impl(&dword_1940B8000, v59, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
                    v60 = (uint64_t)v140;
                    v140 = 0;
                    if (v60)
                    {
                      if (*(_DWORD *)v60 == 1)
                        v60 = WTF::fastFree((WTF *)v60, v15);
                      else
                        --*(_DWORD *)v60;
                    }
                  }
                  if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
                  {
                    v62 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
                    while (1)
                    {
                      v63 = *v62;
                      if ((v63 & 1) != 0)
                        break;
                      v64 = __ldaxr(v62);
                      if (v64 == v63)
                      {
                        if (!__stxr(v63 | 1, v62))
                        {
                          v65 = WTF::Logger::observers((WTF::Logger *)v60);
                          v66 = *(unsigned int *)(v65 + 12);
                          if ((_DWORD)v66)
                          {
                            v67 = *(uint64_t **)v65;
                            v130 = *(_QWORD *)v65 + 8 * v66;
                            do
                            {
                              v68 = *v67;
                              LODWORD(buf) = 0;
                              WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v135);
                              v146 = 0;
                              v69 = (WTF::JSONImpl::Object *)WTF::String::String((WTF::String *)&v147, "ignoring already added cue: ");
                              v148 = 1;
                              WTF::JSONImpl::Object::create(v69);
                              (*(void (**)(uint64_t, WTF::Logger *))(*(_QWORD *)v18 + 264))(v18, v140);
                              WTF::JSONImpl::Value::toJSONString(v140);
                              v70 = v140;
                              v140 = 0;
                              if (v70)
                              {
                                if (*(_DWORD *)v70 == 1)
                                  WTF::JSONImpl::Value::operator delete();
                                else
                                  --*(_DWORD *)v70;
                              }
                              v140 = 0;
                              v141 = 0;
                              v71 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
                              LODWORD(v141) = 3;
                              v140 = v71;
                              v72 = HIDWORD(v141);
                              *((_DWORD *)v71 + 4 * HIDWORD(v141)) = buf;
                              v73 = *((_QWORD *)&buf + 1);
                              if (*((_QWORD *)&buf + 1))
                                **((_DWORD **)&buf + 1) += 2;
                              *((_QWORD *)v71 + 2 * v72 + 1) = v73;
                              *((_DWORD *)v71 + 4 * (v72 + 1)) = v146;
                              v74 = v147;
                              if (v147)
                                *(_DWORD *)v147 += 2;
                              *((_QWORD *)v71 + 2 * (v72 + 1) + 1) = v74;
                              *((_DWORD *)v71 + 4 * (v72 + 2)) = v148;
                              v75 = v149;
                              if (v149)
                                *(_DWORD *)v149 += 2;
                              *((_QWORD *)v71 + 2 * (v72 + 2) + 1) = v75;
                              HIDWORD(v141) = v72 + 3;
                              (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v68 + 16))(v68, &WebCore::LogMedia, 3, &v140);
                              v76 = v140;
                              if (HIDWORD(v141))
                              {
                                v77 = v12;
                                v78 = 16 * HIDWORD(v141);
                                v79 = (WTF::StringImpl **)((char *)v140 + 8);
                                do
                                {
                                  v80 = *v79;
                                  *v79 = 0;
                                  if (v80)
                                  {
                                    if (*(_DWORD *)v80 == 2)
                                      WTF::StringImpl::destroy(v80, (WTF::StringImpl *)v15);
                                    else
                                      *(_DWORD *)v80 -= 2;
                                  }
                                  v79 += 2;
                                  v78 -= 16;
                                }
                                while (v78);
                                v76 = v140;
                                v12 = v77;
                              }
                              if (v76)
                              {
                                v140 = 0;
                                LODWORD(v141) = 0;
                                WTF::fastFree(v76, v15);
                              }
                              v81 = v149;
                              v149 = 0;
                              if (v81)
                              {
                                if (*(_DWORD *)v81 == 2)
                                  WTF::StringImpl::destroy(v81, (WTF::StringImpl *)v15);
                                else
                                  *(_DWORD *)v81 -= 2;
                              }
                              v82 = v147;
                              v147 = 0;
                              if (v82)
                              {
                                if (*(_DWORD *)v82 == 2)
                                  WTF::StringImpl::destroy(v82, (WTF::StringImpl *)v15);
                                else
                                  *(_DWORD *)v82 -= 2;
                              }
                              v83 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                              *((_QWORD *)&buf + 1) = 0;
                              if (v83)
                              {
                                if (*(_DWORD *)v83 == 2)
                                  WTF::StringImpl::destroy(v83, (WTF::StringImpl *)v15);
                                else
                                  *(_DWORD *)v83 -= 2;
                              }
                              ++v67;
                            }
                            while (v67 != (uint64_t *)v130);
                          }
                          v84 = __ldxr(v62);
                          if (v84 == 1)
                          {
                            if (!__stlxr(0, v62))
                              break;
                          }
                          else
                          {
                            __clrex();
                          }
                          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                          break;
                        }
                      }
                      else
                      {
                        __clrex();
                      }
                    }
                  }
                  result = (unsigned int *)v144;
                  v144 = 0;
                  if (result)
                  {
                    if (*result == 2)
                      result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v15);
                    else
                      *result -= 2;
                  }
                  goto LABEL_211;
                }
LABEL_264:
                __break(0xC471u);
                JUMPOUT(0x195D7F7C0);
              }
LABEL_251:
              v33 = 0;
              goto LABEL_30;
            }
          }
          v32 = 0;
          if (v139)
            goto LABEL_29;
          goto LABEL_251;
        }
        v40 = *(_QWORD *)(v11 + 104);
        if (v40 && (v41 = *(_QWORD *)(v40 + 8)) != 0)
        {
          if (*(_DWORD *)(v41 + 72) != 1)
          {
            __break(0xC471u);
            JUMPOUT(0x195D7F7B0);
          }
          if ((*(_BYTE *)(a3 + 12) & 4) != 0)
          {
            if ((*(_BYTE *)(v41 + 140) & 1) != 0)
            {
              v42 = (uint64_t *)(v41 + 128);
              v43 = *(_DWORD *)(v18 + 96);
              *(_DWORD *)(v18 + 96) = v43 + 1;
              if (v43 <= 0)
              {
                if (*(_QWORD *)v23)
                {
                  v125 = *(_QWORD *)(*(_QWORD *)v23 + 8);
                  if (v125)
                  {
                    v126 = v125 - 120;
                    v127 = (uint64_t **)(v125 + 80);
                    v128 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
                    *v128 = off_1E33EBDF8;
                    v128[1] = v126;
                    v128[2] = v18;
                    *(_QWORD *)&buf = v128;
                    WTF::WeakHashSet<WebCore::TextTrackClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v127, &buf);
                    v129 = buf;
                    *(_QWORD *)&buf = 0;
                    if (v129)
                      (*(void (**)(uint64_t))(*(_QWORD *)v129 + 8))(v129);
                  }
                }
              }
              v44 = *v42;
              *(_QWORD *)(v18 + 85) = *(uint64_t *)((char *)v42 + 5);
              *(_QWORD *)(v18 + 80) = v44;
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 144))(v18, 1);
            }
            goto LABEL_52;
          }
        }
        else if ((*(_BYTE *)(a3 + 12) & 4) != 0)
        {
LABEL_52:
          v45 = *(unsigned int *)(v11 + 300);
          if ((_DWORD)v45 != *(_DWORD *)(v11 + 296))
          {
            v53 = (uint64_t *)(*(_QWORD *)(v11 + 288) + 8 * v45);
            ++*(_DWORD *)(v18 + 24);
LABEL_134:
            *v53 = v18;
            *(_DWORD *)(v11 + 300) = v45 + 1;
            goto LABEL_135;
          }
          v46 = v45 + (v45 >> 2);
          if (v46 >= 0x10)
            v47 = v46 + 1;
          else
            v47 = 16;
          if (v47 <= v45 + 1)
            v48 = v45 + 1;
          else
            v48 = v47;
          if (!(v48 >> 29))
          {
            v49 = *(void **)(v11 + 288);
            v50 = (void *)WTF::fastMalloc((WTF *)(8 * v48));
            *(_DWORD *)(v11 + 296) = v48;
            *(_QWORD *)(v11 + 288) = v50;
            memcpy(v50, v49, 8 * v45);
            if (v49)
            {
              if (*(void **)(v11 + 288) == v49)
              {
                *(_QWORD *)(v11 + 288) = 0;
                *(_DWORD *)(v11 + 296) = 0;
              }
              WTF::fastFree((WTF *)v49, v51);
            }
            v45 = *(unsigned int *)(v11 + 300);
            v52 = *(_QWORD *)(v11 + 288);
            ++*(_DWORD *)(v18 + 24);
            v53 = (uint64_t *)(v52 + 8 * v45);
            goto LABEL_134;
          }
          __break(0xC471u);
LABEL_269:
          JUMPOUT(0x195D7F784);
        }
LABEL_135:
        v85 = *(_QWORD *)(v11 + 88);
        v86 = *(_QWORD *)(v11 + 96);
        v135 = "DataCue";
        v136 = 8;
        v137 = "addDataCue";
        v138 = v86;
        if (!*(_BYTE *)(v85 + 12) || !WebCore::LogMedia || byte_1ECE7C490 < 3u)
        {
LABEL_227:
          *(_QWORD *)&buf = v18;
          WebCore::TextTrack::addCue(v11, (uint64_t *)&buf, (uint64_t)v132);
          v122 = (_DWORD *)(v6 - 264);
          if (v134)
          {
            v124 = v133;
            v133 = 0;
            if (v124)
            {
              if (*(_DWORD *)v124 == 2)
                WTF::StringImpl::destroy(v124, (WTF::StringImpl *)v15);
              else
                *(_DWORD *)v124 -= 2;
            }
          }
          result = (unsigned int *)buf;
          *(_QWORD *)&buf = 0;
          if (result)
          {
            if (result[6] == 1)
              result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 72))(result);
            else
              --result[6];
          }
          goto LABEL_214;
        }
        v87 = (WTF::JSONImpl::Object *)WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v135);
        WTF::JSONImpl::Object::create(v87);
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v18 + 264))(v18, buf);
        WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)buf);
        v88 = (_DWORD *)buf;
        *(_QWORD *)&buf = 0;
        if (v88)
        {
          if (*v88 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v88;
        }
        if (v143)
        {
          v89 = *((_DWORD *)v143 + 1);
          if (v142)
          {
LABEL_143:
            v90 = *((_DWORD *)v142 + 1);
LABEL_144:
            if ((v90 | v89) < 0 || (v91 = (v89 + v90), __OFADD__(v89, v90)))
            {
              v144 = 0;
              goto LABEL_267;
            }
            if (v143)
            {
              v92 = *((_DWORD *)v143 + 4);
              v93 = (v92 >> 2) & 1;
              if (v142 && (v92 & 4) != 0)
                goto LABEL_149;
            }
            else
            {
              if (v142)
              {
LABEL_149:
                v93 = (*((unsigned __int8 *)v142 + 16) >> 2) & 1;
                goto LABEL_150;
              }
              v93 = 1;
            }
LABEL_150:
            WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v91, v93, (uint64_t)v143, (uint64_t)v142, &v144);
            if (v144)
            {
              v95 = v142;
              v142 = 0;
              if (v95)
              {
                if (*(_DWORD *)v95 == 2)
                  WTF::StringImpl::destroy(v95, v94);
                else
                  *(_DWORD *)v95 -= 2;
              }
              v96 = v143;
              v143 = 0;
              if (v96)
              {
                if (*(_DWORD *)v96 == 2)
                  WTF::StringImpl::destroy(v96, v94);
                else
                  *(_DWORD *)v96 -= 2;
              }
              v97 = qword_1ECE7C4A0;
              v98 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
              if ((_DWORD)v98)
              {
                WTF::String::utf8();
                v100 = v140 ? (char *)v140 + 16 : 0;
                LODWORD(buf) = 136446210;
                *(_QWORD *)((char *)&buf + 4) = v100;
                _os_log_impl(&dword_1940B8000, v97, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
                v98 = (uint64_t)v140;
                v140 = 0;
                if (v98)
                {
                  if (*(_DWORD *)v98 == 1)
                    v98 = WTF::fastFree((WTF *)v98, v99);
                  else
                    --*(_DWORD *)v98;
                }
              }
              if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
              {
                v101 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
                while (1)
                {
                  v102 = *v101;
                  if ((v102 & 1) != 0)
                    break;
                  v103 = __ldaxr(v101);
                  if (v103 == v102)
                  {
                    if (!__stxr(v102 | 1, v101))
                    {
                      v104 = WTF::Logger::observers((WTF::Logger *)v98);
                      v105 = *(unsigned int *)(v104 + 12);
                      if ((_DWORD)v105)
                      {
                        v106 = *(uint64_t **)v104;
                        v131 = *(_QWORD *)v104 + 8 * v105;
                        do
                        {
                          v107 = *v106;
                          LODWORD(buf) = 0;
                          v108 = (WTF::JSONImpl::Object *)WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v135);
                          v146 = 1;
                          WTF::JSONImpl::Object::create(v108);
                          (*(void (**)(uint64_t, WTF::Logger *))(*(_QWORD *)v18 + 264))(v18, v140);
                          WTF::JSONImpl::Value::toJSONString(v140);
                          v109 = v140;
                          v140 = 0;
                          if (v109)
                          {
                            if (*(_DWORD *)v109 == 1)
                              WTF::JSONImpl::Value::operator delete();
                            else
                              --*(_DWORD *)v109;
                          }
                          v140 = 0;
                          v141 = 0;
                          v110 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
                          LODWORD(v141) = 2;
                          v140 = v110;
                          v111 = HIDWORD(v141);
                          *((_DWORD *)v110 + 4 * HIDWORD(v141)) = buf;
                          v112 = *((_QWORD *)&buf + 1);
                          if (*((_QWORD *)&buf + 1))
                            **((_DWORD **)&buf + 1) += 2;
                          *((_QWORD *)v110 + 2 * v111 + 1) = v112;
                          *((_DWORD *)v110 + 4 * (v111 + 1)) = v146;
                          v113 = v147;
                          if (v147)
                            *(_DWORD *)v147 += 2;
                          *((_QWORD *)v110 + 2 * (v111 + 1) + 1) = v113;
                          HIDWORD(v141) = v111 + 2;
                          (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v107 + 16))(v107, &WebCore::LogMedia, 3, &v140);
                          v114 = v140;
                          if (HIDWORD(v141))
                          {
                            v115 = v12;
                            v116 = 16 * HIDWORD(v141);
                            v117 = (WTF::StringImpl **)((char *)v140 + 8);
                            do
                            {
                              v118 = *v117;
                              *v117 = 0;
                              if (v118)
                              {
                                if (*(_DWORD *)v118 == 2)
                                  WTF::StringImpl::destroy(v118, (WTF::StringImpl *)v99);
                                else
                                  *(_DWORD *)v118 -= 2;
                              }
                              v117 += 2;
                              v116 -= 16;
                            }
                            while (v116);
                            v114 = v140;
                            v12 = v115;
                          }
                          if (v114)
                          {
                            v140 = 0;
                            LODWORD(v141) = 0;
                            WTF::fastFree(v114, v99);
                          }
                          v119 = v147;
                          v147 = 0;
                          if (v119)
                          {
                            if (*(_DWORD *)v119 == 2)
                              WTF::StringImpl::destroy(v119, (WTF::StringImpl *)v99);
                            else
                              *(_DWORD *)v119 -= 2;
                          }
                          v120 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                          *((_QWORD *)&buf + 1) = 0;
                          if (v120)
                          {
                            if (*(_DWORD *)v120 == 2)
                              WTF::StringImpl::destroy(v120, (WTF::StringImpl *)v99);
                            else
                              *(_DWORD *)v120 -= 2;
                          }
                          ++v106;
                        }
                        while (v106 != (uint64_t *)v131);
                      }
                      v121 = __ldxr(v101);
                      if (v121 == 1)
                      {
                        if (!__stlxr(0, v101))
                          break;
                      }
                      else
                      {
                        __clrex();
                      }
                      WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                      break;
                    }
                  }
                  else
                  {
                    __clrex();
                  }
                }
              }
              v123 = v144;
              v144 = 0;
              if (v123)
              {
                if (*(_DWORD *)v123 == 2)
                  WTF::StringImpl::destroy(v123, (WTF::StringImpl *)v99);
                else
                  *(_DWORD *)v123 -= 2;
              }
              goto LABEL_227;
            }
LABEL_267:
            __break(0xC471u);
            JUMPOUT(0x195D7F7D4);
          }
        }
        else
        {
          v89 = 0;
          if (v142)
            goto LABEL_143;
        }
        v90 = 0;
        goto LABEL_144;
      }
    }
  }
  return result;
}

const char *WebCore::InbandDataTextTrack::logClassName(WebCore::InbandDataTextTrack *this)
{
  return "DataCue";
}

unsigned int *`non-virtual thunk to'WebCore::InbandDataTextTrack::addDataCue(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t *a4, _DWORD **a5)
{
  return WebCore::InbandDataTextTrack::addDataCue((unsigned int *)(a1 - 264), a2, a3, a4, a5);
}

uint64_t WebCore::InbandDataTextTrack::updateDataCue(uint64_t result, uint64_t *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t **v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  __int128 v27;
  _QWORD *v28;
  BOOL v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  NSObject *v40;
  uint64_t v41;
  void *v42;
  char *v43;
  unsigned __int8 *v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  WTF::Logger *v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::Logger *v62;
  uint64_t v63;
  WTF::StringImpl **v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  int v75;
  WTF::StringImpl *v76;
  int v77;
  uint64_t v78;
  int v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t **v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t **v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t **v96;
  _QWORD *v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  _QWORD v101[4];
  __int128 v102;
  WTF::Logger *v103;
  uint64_t v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  WTF::StringImpl *v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119;
  WTF::StringImpl *v120;
  WTF::StringImpl *v121;
  __int128 buf;
  int v123;
  WTF::StringImpl *v124;
  int v125;
  WTF::StringImpl *v126;
  int v127;
  WTF::StringImpl *v128;
  int v129;
  WTF::StringImpl *v130;
  int v131;
  WTF::StringImpl *v132;
  int v133;
  WTF::StringImpl *v134;
  int v135;
  WTF::StringImpl *v136;
  int v137;
  WTF::StringImpl *v138;
  uint64_t v139;

  v139 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(result + 300))
  {
    v7 = result;
    v8 = 0;
    while (1)
    {
      result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a4 + 32))(a4, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 288) + 8 * v8) + 152));
      if ((result & 1) != 0)
        break;
      if (++v8 >= *(unsigned int *)(v7 + 300))
        return result;
    }
    if (v8 >= *(unsigned int *)(v7 + 300))
    {
      __break(0xC471u);
      JUMPOUT(0x195D8042CLL);
    }
    v9 = *(_QWORD *)(*(_QWORD *)(v7 + 288) + 8 * v8);
    if (v9)
    {
      ++*(_DWORD *)(v9 + 24);
      v10 = *(_DWORD *)(v9 + 96);
      *(_DWORD *)(v9 + 96) = v10 + 1;
      if (v10 <= 0)
      {
        v17 = *(_QWORD *)(v9 + 104);
        if (v17)
        {
          v18 = *(_QWORD *)(v17 + 8);
          if (v18)
          {
            v19 = v18 - 120;
            v20 = (uint64_t **)(v18 + 80);
            v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
            *v21 = off_1E33EBDF8;
            v21[1] = v19;
            v21[2] = v9;
            *(_QWORD *)&buf = v21;
            WTF::WeakHashSet<WebCore::TextTrackClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v20, &buf);
            v22 = buf;
            *(_QWORD *)&buf = 0;
            if (v22)
              (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
          }
        }
      }
      v102 = *a3;
      v11 = *(_QWORD *)(v7 + 104);
      if (!v11)
        goto LABEL_14;
      v12 = *(_QWORD *)(v11 + 8);
      if (!v12)
        goto LABEL_14;
      if (*(_DWORD *)(v12 + 72) != 1)
      {
        __break(0xC471u);
        goto LABEL_188;
      }
      if ((BYTE12(v102) & 4) != 0 && (*(_BYTE *)(v12 + 140) & 1) != 0)
      {
        *(_QWORD *)&v102 = *(_QWORD *)(v12 + 128);
        *(_QWORD *)((char *)&v102 + 5) = *(_QWORD *)(v12 + 133);
      }
      else
      {
LABEL_14:
        v13 = *(unsigned int *)(v7 + 300);
        if ((_DWORD)v13)
        {
          v14 = *(_QWORD **)(v7 + 288);
          if (*v14 == v9)
          {
            v15 = 0;
LABEL_25:
            v23 = &v14[v15];
            *v23 = 0;
            if (*(_DWORD *)(v9 + 24) == 1)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v9 + 72))(v9);
              v13 = *(unsigned int *)(v7 + 300);
            }
            else
            {
              --*(_DWORD *)(v9 + 24);
            }
            memmove(v23, v23 + 1, *(_QWORD *)(v7 + 288) + 8 * v13 - (_QWORD)(v23 + 1));
            --*(_DWORD *)(v7 + 300);
          }
          else
          {
            v15 = 0;
            while (v13 - 1 != v15)
            {
              v16 = v14[++v15];
              if (v16 == v9)
                goto LABEL_25;
            }
          }
        }
      }
      v101[0] = "DataCue";
      v101[1] = 8;
      v24 = *(_QWORD *)(v7 + 88);
      v25 = *(_QWORD *)(v7 + 96);
      v101[2] = "updateDataCue";
      v101[3] = v25;
      v26 = (_QWORD *)(v9 + 64);
      v27 = *(_OWORD *)(v9 + 64);
      v28 = (_QWORD *)(v9 + 80);
      v99 = *(_OWORD *)(v9 + 80);
      v100 = v27;
      if (!*(_BYTE *)(v24 + 12)
        || (WebCore::LogMedia ? (v29 = byte_1ECE7C490 >= 3u) : (v29 = 0), !v29))
      {
LABEL_154:
        v77 = *(_DWORD *)(v9 + 96);
        *(_DWORD *)(v9 + 96) = v77 + 1;
        if (v77 <= 0)
        {
          v81 = *(_QWORD *)(v9 + 104);
          if (v81)
          {
            v82 = *(_QWORD *)(v81 + 8);
            if (v82)
            {
              v83 = v82 - 120;
              v84 = (uint64_t **)(v82 + 80);
              v85 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
              *v85 = off_1E33EBDF8;
              v85[1] = v83;
              v85[2] = v9;
              *(_QWORD *)&buf = v85;
              WTF::WeakHashSet<WebCore::TextTrackClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v84, &buf);
              v86 = buf;
              *(_QWORD *)&buf = 0;
              if (v86)
                (*(void (**)(uint64_t))(*(_QWORD *)v86 + 8))(v86);
            }
          }
        }
        v78 = *a2;
        *(_QWORD *)((char *)v26 + 5) = *(uint64_t *)((char *)a2 + 5);
        *v26 = v78;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 144))(v9, 1);
        v79 = *(_DWORD *)(v9 + 96);
        *(_DWORD *)(v9 + 96) = v79 + 1;
        if (v79 <= 0)
        {
          v87 = *(_QWORD *)(v9 + 104);
          if (v87)
          {
            v88 = *(_QWORD *)(v87 + 8);
            if (v88)
            {
              v89 = v88 - 120;
              v90 = (uint64_t **)(v88 + 80);
              v91 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
              *v91 = off_1E33EBDF8;
              v91[1] = v89;
              v91[2] = v9;
              *(_QWORD *)&buf = v91;
              WTF::WeakHashSet<WebCore::TextTrackClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v90, &buf);
              v92 = buf;
              *(_QWORD *)&buf = 0;
              if (v92)
                (*(void (**)(uint64_t))(*(_QWORD *)v92 + 8))(v92);
            }
          }
        }
        *v28 = v102;
        *(_QWORD *)((char *)v28 + 5) = *(_QWORD *)((char *)&v102 + 5);
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 144))(v9, 1);
        v80 = *(_DWORD *)(v9 + 96) - 1;
        *(_DWORD *)(v9 + 96) = v80;
        if (!v80)
        {
          *(_BYTE *)(v9 + 135) = 1;
          v93 = *(_QWORD *)(v9 + 104);
          if (v93)
          {
            v94 = *(_QWORD *)(v93 + 8);
            if (v94)
            {
              v95 = v94 - 120;
              v96 = (uint64_t **)(v94 + 80);
              v97 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
              *v97 = off_1E33EBE20;
              v97[1] = v95;
              v97[2] = v9;
              *(_QWORD *)&buf = v97;
              WTF::WeakHashSet<WebCore::TextTrackClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v96, &buf);
              result = buf;
              *(_QWORD *)&buf = 0;
              if (result)
                result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
            }
          }
        }
        if (*(_DWORD *)(v9 + 24) == 1)
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 72))(v9);
        --*(_DWORD *)(v9 + 24);
        return result;
      }
      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v101);
      WTF::String::String((WTF::String *)&v112, "was start = ");
      WTF::MediaTime::toJSONString((WTF::MediaTime *)&v100);
      WTF::String::String((WTF::String *)&v110, ", end = ");
      WTF::MediaTime::toJSONString((WTF::MediaTime *)&v99);
      WTF::String::String((WTF::String *)&v108, ", will be start = ");
      WTF::MediaTime::toJSONString((WTF::MediaTime *)a2);
      WTF::String::String((WTF::String *)&v106, ", end = ");
      WTF::MediaTime::toJSONString((WTF::MediaTime *)&v102);
      v103 = v112;
      v121 = v111;
      *(_QWORD *)&buf = v113;
      v120 = v110;
      v118 = v108;
      v119 = v109;
      v116 = v106;
      v117 = v107;
      v115 = v105;
      WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t *)&buf, (uint64_t *)&v103, (uint64_t *)&v121, (uint64_t *)&v120, (uint64_t *)&v119, (uint64_t *)&v118, (uint64_t *)&v117, (uint64_t *)&v116, &v114, (uint64_t *)&v115);
      if (v114)
      {
        v31 = v105;
        v105 = 0;
        if (v31)
        {
          if (*(_DWORD *)v31 == 2)
            WTF::StringImpl::destroy(v31, v30);
          else
            *(_DWORD *)v31 -= 2;
        }
        v32 = v106;
        v106 = 0;
        if (v32)
        {
          if (*(_DWORD *)v32 == 2)
            WTF::StringImpl::destroy(v32, v30);
          else
            *(_DWORD *)v32 -= 2;
        }
        v33 = v107;
        v107 = 0;
        if (v33)
        {
          if (*(_DWORD *)v33 == 2)
            WTF::StringImpl::destroy(v33, v30);
          else
            *(_DWORD *)v33 -= 2;
        }
        v34 = v108;
        v108 = 0;
        if (v34)
        {
          if (*(_DWORD *)v34 == 2)
            WTF::StringImpl::destroy(v34, v30);
          else
            *(_DWORD *)v34 -= 2;
        }
        v35 = v109;
        v109 = 0;
        if (v35)
        {
          if (*(_DWORD *)v35 == 2)
            WTF::StringImpl::destroy(v35, v30);
          else
            *(_DWORD *)v35 -= 2;
        }
        v36 = v110;
        v110 = 0;
        if (v36)
        {
          if (*(_DWORD *)v36 == 2)
            WTF::StringImpl::destroy(v36, v30);
          else
            *(_DWORD *)v36 -= 2;
        }
        v37 = v111;
        v111 = 0;
        if (v37)
        {
          if (*(_DWORD *)v37 == 2)
            WTF::StringImpl::destroy(v37, v30);
          else
            *(_DWORD *)v37 -= 2;
        }
        v38 = v112;
        v112 = 0;
        if (v38)
        {
          if (*(_DWORD *)v38 == 2)
            WTF::StringImpl::destroy(v38, v30);
          else
            *(_DWORD *)v38 -= 2;
        }
        v39 = v113;
        v113 = 0;
        if (v39)
        {
          if (*(_DWORD *)v39 == 2)
            WTF::StringImpl::destroy(v39, v30);
          else
            *(_DWORD *)v39 -= 2;
        }
        v40 = qword_1ECE7C4A0;
        v41 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)v41)
        {
          WTF::String::utf8();
          v43 = v103 ? (char *)v103 + 16 : 0;
          LODWORD(buf) = 136446210;
          *(_QWORD *)((char *)&buf + 4) = v43;
          _os_log_impl(&dword_1940B8000, v40, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
          v41 = (uint64_t)v103;
          v103 = 0;
          if (v41)
          {
            if (*(_DWORD *)v41 == 1)
              v41 = WTF::fastFree((WTF *)v41, v42);
            else
              --*(_DWORD *)v41;
          }
        }
        if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
        {
          v44 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
          while (1)
          {
            v45 = *v44;
            if ((v45 & 1) != 0)
              break;
            v46 = __ldaxr(v44);
            if (v46 == v45)
            {
              if (!__stxr(v45 | 1, v44))
              {
                v47 = WTF::Logger::observers((WTF::Logger *)v41);
                v48 = *(unsigned int *)(v47 + 12);
                if ((_DWORD)v48)
                {
                  v49 = *(uint64_t **)v47;
                  v98 = *(_QWORD *)v47 + 8 * v48;
                  do
                  {
                    v50 = *v49;
                    LODWORD(buf) = 0;
                    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v101);
                    v123 = 0;
                    WTF::String::String((WTF::String *)&v124, "was start = ");
                    v125 = 1;
                    WTF::MediaTime::toJSONString((WTF::MediaTime *)&v100);
                    v127 = 0;
                    WTF::String::String((WTF::String *)&v128, ", end = ");
                    v129 = 1;
                    WTF::MediaTime::toJSONString((WTF::MediaTime *)&v99);
                    v131 = 0;
                    WTF::String::String((WTF::String *)&v132, ", will be start = ");
                    v133 = 1;
                    WTF::MediaTime::toJSONString((WTF::MediaTime *)a2);
                    v135 = 0;
                    WTF::String::String((WTF::String *)&v136, ", end = ");
                    v137 = 1;
                    WTF::MediaTime::toJSONString((WTF::MediaTime *)&v102);
                    v103 = 0;
                    v104 = 0;
                    v51 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x90);
                    LODWORD(v104) = 9;
                    v103 = v51;
                    v52 = HIDWORD(v104);
                    *((_DWORD *)v51 + 4 * HIDWORD(v104)) = buf;
                    v53 = *((_QWORD *)&buf + 1);
                    if (*((_QWORD *)&buf + 1))
                      **((_DWORD **)&buf + 1) += 2;
                    *((_QWORD *)v51 + 2 * v52 + 1) = v53;
                    *((_DWORD *)v51 + 4 * (v52 + 1)) = v123;
                    v54 = v124;
                    if (v124)
                      *(_DWORD *)v124 += 2;
                    *((_QWORD *)v51 + 2 * (v52 + 1) + 1) = v54;
                    *((_DWORD *)v51 + 4 * (v52 + 2)) = v125;
                    v55 = v126;
                    if (v126)
                      *(_DWORD *)v126 += 2;
                    *((_QWORD *)v51 + 2 * (v52 + 2) + 1) = v55;
                    *((_DWORD *)v51 + 4 * (v52 + 3)) = v127;
                    v56 = v128;
                    if (v128)
                      *(_DWORD *)v128 += 2;
                    *((_QWORD *)v51 + 2 * (v52 + 3) + 1) = v56;
                    *((_DWORD *)v51 + 4 * (v52 + 4)) = v129;
                    v57 = v130;
                    if (v130)
                      *(_DWORD *)v130 += 2;
                    *((_QWORD *)v51 + 2 * (v52 + 4) + 1) = v57;
                    *((_DWORD *)v51 + 4 * (v52 + 5)) = v131;
                    v58 = v132;
                    if (v132)
                      *(_DWORD *)v132 += 2;
                    *((_QWORD *)v51 + 2 * (v52 + 5) + 1) = v58;
                    *((_DWORD *)v51 + 4 * (v52 + 6)) = v133;
                    v59 = v134;
                    if (v134)
                      *(_DWORD *)v134 += 2;
                    *((_QWORD *)v51 + 2 * (v52 + 6) + 1) = v59;
                    *((_DWORD *)v51 + 4 * (v52 + 7)) = v135;
                    v60 = v136;
                    if (v136)
                      *(_DWORD *)v136 += 2;
                    *((_QWORD *)v51 + 2 * (v52 + 7) + 1) = v60;
                    *((_DWORD *)v51 + 4 * (v52 + 8)) = v137;
                    v61 = v138;
                    if (v138)
                      *(_DWORD *)v138 += 2;
                    *((_QWORD *)v51 + 2 * (v52 + 8) + 1) = v61;
                    HIDWORD(v104) = v52 + 9;
                    (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v50 + 16))(v50, &WebCore::LogMedia, 3, &v103);
                    v62 = v103;
                    if (HIDWORD(v104))
                    {
                      v63 = 16 * HIDWORD(v104);
                      v64 = (WTF::StringImpl **)((char *)v103 + 8);
                      do
                      {
                        v65 = *v64;
                        *v64 = 0;
                        if (v65)
                        {
                          if (*(_DWORD *)v65 == 2)
                            WTF::StringImpl::destroy(v65, (WTF::StringImpl *)v42);
                          else
                            *(_DWORD *)v65 -= 2;
                        }
                        v64 += 2;
                        v63 -= 16;
                      }
                      while (v63);
                      v62 = v103;
                    }
                    if (v62)
                    {
                      v103 = 0;
                      LODWORD(v104) = 0;
                      WTF::fastFree(v62, v42);
                    }
                    v66 = v138;
                    v138 = 0;
                    if (v66)
                    {
                      if (*(_DWORD *)v66 == 2)
                        WTF::StringImpl::destroy(v66, (WTF::StringImpl *)v42);
                      else
                        *(_DWORD *)v66 -= 2;
                    }
                    v67 = v136;
                    v136 = 0;
                    if (v67)
                    {
                      if (*(_DWORD *)v67 == 2)
                        WTF::StringImpl::destroy(v67, (WTF::StringImpl *)v42);
                      else
                        *(_DWORD *)v67 -= 2;
                    }
                    v68 = v134;
                    v134 = 0;
                    if (v68)
                    {
                      if (*(_DWORD *)v68 == 2)
                        WTF::StringImpl::destroy(v68, (WTF::StringImpl *)v42);
                      else
                        *(_DWORD *)v68 -= 2;
                    }
                    v69 = v132;
                    v132 = 0;
                    if (v69)
                    {
                      if (*(_DWORD *)v69 == 2)
                        WTF::StringImpl::destroy(v69, (WTF::StringImpl *)v42);
                      else
                        *(_DWORD *)v69 -= 2;
                    }
                    v70 = v130;
                    v130 = 0;
                    if (v70)
                    {
                      if (*(_DWORD *)v70 == 2)
                        WTF::StringImpl::destroy(v70, (WTF::StringImpl *)v42);
                      else
                        *(_DWORD *)v70 -= 2;
                    }
                    v71 = v128;
                    v128 = 0;
                    if (v71)
                    {
                      if (*(_DWORD *)v71 == 2)
                        WTF::StringImpl::destroy(v71, (WTF::StringImpl *)v42);
                      else
                        *(_DWORD *)v71 -= 2;
                    }
                    v72 = v126;
                    v126 = 0;
                    if (v72)
                    {
                      if (*(_DWORD *)v72 == 2)
                        WTF::StringImpl::destroy(v72, (WTF::StringImpl *)v42);
                      else
                        *(_DWORD *)v72 -= 2;
                    }
                    v73 = v124;
                    v124 = 0;
                    if (v73)
                    {
                      if (*(_DWORD *)v73 == 2)
                        WTF::StringImpl::destroy(v73, (WTF::StringImpl *)v42);
                      else
                        *(_DWORD *)v73 -= 2;
                    }
                    v74 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                    *((_QWORD *)&buf + 1) = 0;
                    if (v74)
                    {
                      if (*(_DWORD *)v74 == 2)
                        WTF::StringImpl::destroy(v74, (WTF::StringImpl *)v42);
                      else
                        *(_DWORD *)v74 -= 2;
                    }
                    ++v49;
                  }
                  while (v49 != (uint64_t *)v98);
                }
                v75 = __ldxr(v44);
                if (v75 == 1)
                {
                  v26 = (_QWORD *)(v9 + 64);
                  v28 = (_QWORD *)(v9 + 80);
                  if (!__stlxr(0, v44))
                    break;
                }
                else
                {
                  __clrex();
                  v26 = (_QWORD *)(v9 + 64);
                  v28 = (_QWORD *)(v9 + 80);
                }
                WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                break;
              }
            }
            else
            {
              __clrex();
            }
          }
        }
        v76 = v114;
        v114 = 0;
        if (v76)
        {
          if (*(_DWORD *)v76 == 2)
            WTF::StringImpl::destroy(v76, (WTF::StringImpl *)v42);
          else
            *(_DWORD *)v76 -= 2;
        }
        goto LABEL_154;
      }
      __break(0xC471u);
LABEL_188:
      JUMPOUT(0x195D80420);
    }
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::InbandDataTextTrack::updateDataCue(uint64_t a1, uint64_t *a2, __int128 *a3, uint64_t a4)
{
  return WebCore::InbandDataTextTrack::updateDataCue(a1 - 264, a2, a3, a4);
}

uint64_t WebCore::InbandDataTextTrack::removeDataCue(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v6;
  WebCore::TextTrackCue *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::JSONImpl::Object *v10;
  _DWORD *v11;
  int v12;
  int v13;
  int v14;
  BOOL v15;
  int v16;
  char v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  NSObject *v25;
  uint64_t v26;
  void *v27;
  char *v28;
  unsigned __int8 *v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  WTF::JSONImpl::Object *v37;
  WTF::Logger *v38;
  WTF::Logger *v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::Logger *v44;
  uint64_t v45;
  WTF::StringImpl **v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  int v51;
  WTF::StringImpl *v52;
  uint64_t v53;
  WebCore::TextTrackCue **v54;
  uint64_t v55;
  WebCore::TextTrackCue *v56;
  WebCore::TextTrackCue **v57;
  WTF::StringImpl *v58;
  char v59[8];
  WTF::StringImpl *v60;
  char v61;
  _QWORD v62[4];
  WTF::Logger *v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  __int128 buf;
  int v70;
  WTF::StringImpl *v71;
  int v72;
  WTF::StringImpl *v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  if (!*(_DWORD *)(result + 300))
    return result;
  v5 = result;
  v6 = 0;
  while (1)
  {
    result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a4 + 32))(a4, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 288) + 8 * v6) + 152));
    if ((result & 1) != 0)
      break;
    if (++v6 >= *(unsigned int *)(v5 + 300))
      return result;
  }
  if (v6 >= *(unsigned int *)(v5 + 300))
  {
    __break(0xC471u);
LABEL_135:
    JUMPOUT(0x195D80B30);
  }
  v7 = *(WebCore::TextTrackCue **)(*(_QWORD *)(v5 + 288) + 8 * v6);
  if (!v7)
    return result;
  ++*((_DWORD *)v7 + 6);
  v8 = *(_QWORD *)(v5 + 88);
  v9 = *(_QWORD *)(v5 + 96);
  v62[0] = "DataCue";
  v62[1] = 8;
  v62[2] = "removeDataCue";
  v62[3] = v9;
  if (!*(_BYTE *)(v8 + 12) || !WebCore::LogMedia || byte_1ECE7C490 < 3u)
    goto LABEL_101;
  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v62);
  v10 = (WTF::JSONImpl::Object *)WTF::String::String((WTF::String *)&v66, "removing: ");
  WTF::JSONImpl::Object::create(v10);
  (*(void (**)(WebCore::TextTrackCue *, _QWORD))(*(_QWORD *)v7 + 264))(v7, buf);
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)buf);
  v11 = (_DWORD *)buf;
  *(_QWORD *)&buf = 0;
  if (v11)
  {
    if (*v11 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v11;
  }
  if (v67)
  {
    v12 = *((_DWORD *)v67 + 1);
    if (v66)
      goto LABEL_16;
LABEL_128:
    v13 = 0;
    if (v65)
      goto LABEL_17;
LABEL_129:
    v14 = 0;
    goto LABEL_18;
  }
  v12 = 0;
  if (!v66)
    goto LABEL_128;
LABEL_16:
  v13 = *((_DWORD *)v66 + 1);
  if (!v65)
    goto LABEL_129;
LABEL_17:
  v14 = *((_DWORD *)v65 + 1);
LABEL_18:
  if ((v14 | v13) < 0
    || ((v15 = __OFADD__(v13, v14), v16 = v13 + v14, !v15) ? (v17 = 0) : (v17 = 1),
        v12 < 0 || (v17 & 1) != 0 || (v18 = (v12 + v16), __OFADD__(v12, v16))))
  {
    v68 = 0;
    goto LABEL_133;
  }
  if (v67 && (*((_BYTE *)v67 + 16) & 4) == 0)
  {
    v19 = 0;
    goto LABEL_32;
  }
  if (v66)
  {
    v20 = *((_DWORD *)v66 + 4);
    v19 = (v20 >> 2) & 1;
    if (v65 && (v20 & 4) != 0)
      goto LABEL_31;
  }
  else
  {
    if (v65)
    {
LABEL_31:
      v19 = (*((unsigned __int8 *)v65 + 16) >> 2) & 1;
      goto LABEL_32;
    }
    v19 = 1;
  }
LABEL_32:
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v18, v19, v67, (uint64_t)v66, (uint64_t)v65, &v68);
  if (!v68)
  {
LABEL_133:
    __break(0xC471u);
    goto LABEL_135;
  }
  v22 = v65;
  v65 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v21);
    else
      *(_DWORD *)v22 -= 2;
  }
  v23 = v66;
  v66 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v21);
    else
      *(_DWORD *)v23 -= 2;
  }
  v24 = v67;
  v67 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v21);
    else
      *(_DWORD *)v24 -= 2;
  }
  v25 = qword_1ECE7C4A0;
  v26 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v26)
  {
    WTF::String::utf8();
    v28 = v63 ? (char *)v63 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v28;
    _os_log_impl(&dword_1940B8000, v25, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v26 = (uint64_t)v63;
    v63 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 1)
        v26 = WTF::fastFree((WTF *)v26, v27);
      else
        --*(_DWORD *)v26;
    }
  }
  if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
  {
    v29 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v30 = *v29;
      if ((v30 & 1) != 0)
        break;
      v31 = __ldaxr(v29);
      if (v31 == v30)
      {
        if (!__stxr(v30 | 1, v29))
        {
          v32 = WTF::Logger::observers((WTF::Logger *)v26);
          v33 = *(unsigned int *)(v32 + 12);
          if ((_DWORD)v33)
          {
            v34 = *(uint64_t **)v32;
            v35 = *(_QWORD *)v32 + 8 * v33;
            do
            {
              v36 = *v34;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v62);
              v70 = 0;
              v37 = (WTF::JSONImpl::Object *)WTF::String::String((WTF::String *)&v71, "removing: ");
              v72 = 1;
              WTF::JSONImpl::Object::create(v37);
              (*(void (**)(WebCore::TextTrackCue *, WTF::Logger *))(*(_QWORD *)v7 + 264))(v7, v63);
              WTF::JSONImpl::Value::toJSONString(v63);
              v38 = v63;
              v63 = 0;
              if (v38)
              {
                if (*(_DWORD *)v38 == 1)
                  WTF::JSONImpl::Value::operator delete();
                else
                  --*(_DWORD *)v38;
              }
              v63 = 0;
              v64 = 0;
              v39 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
              LODWORD(v64) = 3;
              v63 = v39;
              v40 = HIDWORD(v64);
              *((_DWORD *)v39 + 4 * HIDWORD(v64)) = buf;
              v41 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v39 + 2 * v40 + 1) = v41;
              *((_DWORD *)v39 + 4 * (v40 + 1)) = v70;
              v42 = v71;
              if (v71)
                *(_DWORD *)v71 += 2;
              *((_QWORD *)v39 + 2 * (v40 + 1) + 1) = v42;
              *((_DWORD *)v39 + 4 * (v40 + 2)) = v72;
              v43 = v73;
              if (v73)
                *(_DWORD *)v73 += 2;
              *((_QWORD *)v39 + 2 * (v40 + 2) + 1) = v43;
              HIDWORD(v64) = v40 + 3;
              (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v36 + 16))(v36, &WebCore::LogMedia, 3, &v63);
              v44 = v63;
              if (HIDWORD(v64))
              {
                v45 = 16 * HIDWORD(v64);
                v46 = (WTF::StringImpl **)((char *)v63 + 8);
                do
                {
                  v47 = *v46;
                  *v46 = 0;
                  if (v47)
                  {
                    if (*(_DWORD *)v47 == 2)
                      WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v27);
                    else
                      *(_DWORD *)v47 -= 2;
                  }
                  v46 += 2;
                  v45 -= 16;
                }
                while (v45);
                v44 = v63;
              }
              if (v44)
              {
                v63 = 0;
                LODWORD(v64) = 0;
                WTF::fastFree(v44, v27);
              }
              v48 = v73;
              v73 = 0;
              if (v48)
              {
                if (*(_DWORD *)v48 == 2)
                  WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v27);
                else
                  *(_DWORD *)v48 -= 2;
              }
              v49 = v71;
              v71 = 0;
              if (v49)
              {
                if (*(_DWORD *)v49 == 2)
                  WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v27);
                else
                  *(_DWORD *)v49 -= 2;
              }
              v50 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v50)
              {
                if (*(_DWORD *)v50 == 2)
                  WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v27);
                else
                  *(_DWORD *)v50 -= 2;
              }
              ++v34;
            }
            while (v34 != (uint64_t *)v35);
          }
          v51 = __ldxr(v29);
          if (v51 == 1)
          {
            if (!__stlxr(0, v29))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  v52 = v68;
  v68 = 0;
  if (v52)
  {
    if (*(_DWORD *)v52 == 2)
      WTF::StringImpl::destroy(v52, (WTF::StringImpl *)v27);
    else
      *(_DWORD *)v52 -= 2;
  }
LABEL_101:
  v53 = *(unsigned int *)(v5 + 300);
  if ((_DWORD)v53)
  {
    v54 = *(WebCore::TextTrackCue ***)(v5 + 288);
    if (*v54 == v7)
    {
      v55 = 0;
LABEL_108:
      v57 = &v54[v55];
      *v57 = 0;
      if (*((_DWORD *)v7 + 6) == 1)
      {
        (*(void (**)(WebCore::TextTrackCue *))(*(_QWORD *)v7 + 72))(v7);
        v53 = *(unsigned int *)(v5 + 300);
      }
      else
      {
        --*((_DWORD *)v7 + 6);
      }
      memmove(v57, v57 + 1, *(_QWORD *)(v5 + 288) + 8 * v53 - (_QWORD)(v57 + 1));
      --*(_DWORD *)(v5 + 300);
    }
    else
    {
      v55 = 0;
      while (v53 - 1 != v55)
      {
        v56 = v54[++v55];
        if (v56 == v7)
          goto LABEL_108;
      }
    }
  }
  result = (uint64_t)WebCore::TextTrack::removeCue((uint64_t **)v5, v7, (uint64_t)v59);
  if (v61)
  {
    result = (uint64_t)v60;
    v60 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v58);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (*((_DWORD *)v7 + 6) == 1)
    return (*(uint64_t (**)(WebCore::TextTrackCue *))(*(_QWORD *)v7 + 72))(v7);
  --*((_DWORD *)v7 + 6);
  return result;
}

uint64_t `non-virtual thunk to'WebCore::InbandDataTextTrack::removeDataCue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return WebCore::InbandDataTextTrack::removeDataCue(a1 - 264, a2, a3, a4);
}

uint64_t WebCore::InbandDataTextTrack::removeCue@<X0>(uint64_t **this@<X0>, WebCore::TextTrackCue *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  if ((*(unsigned int (**)(WebCore::TextTrackCue *))(*(_QWORD *)a2 + 128))(a2) == 1)
  {
    v8 = *((_QWORD *)a2 + 19);
    if (v8)
      WebCore::InbandDataTextTrack::removeDataCue((uint64_t)this, v6, v7, v8);
    return (uint64_t)WebCore::TextTrack::removeCue(this, a2, a3);
  }
  else
  {
    result = 96;
    __break(0xC471u);
  }
  return result;
}

uint64_t WTF::HashMap<WebCore::TextTrackCue *,WTF::ObjectIdentifierGeneric<WebCore::InbandGenericCueIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WebCore::TextTrackCue *>,WTF::HashTraits<WebCore::TextTrackCue *>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::InbandGenericCueIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::take(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
  v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  v7 = v3 & ((v6 >> 31) ^ v6);
  v8 = *(_QWORD *)(v2 + 16 * v7);
  if (v8 != a2)
  {
    v9 = 1;
    while (v8)
    {
      v7 = ((_DWORD)v7 + v9) & v3;
      v8 = *(_QWORD *)(v2 + 16 * v7);
      ++v9;
      if (v8 == a2)
        goto LABEL_8;
    }
    v7 = *(unsigned int *)(v2 - 4);
  }
LABEL_8:
  if (v7 == *(_DWORD *)(v2 - 4))
    return 0;
  v12 = (_QWORD *)(v2 + 16 * v7);
  v10 = v12[1];
  *v12 = -1;
  ++*(_DWORD *)(*a1 - 16);
  v13 = *a1;
  if (*a1)
    v14 = *(_DWORD *)(v13 - 12) - 1;
  else
    v14 = -1;
  *(_DWORD *)(v13 - 12) = v14;
  v15 = *a1;
  if (*a1)
  {
    v16 = 6 * *(_DWORD *)(v15 - 12);
    v17 = *(_DWORD *)(v15 - 4);
    if (v16 < v17 && v17 >= 9)
      WTF::HashTable<WebCore::StyleRuleFontFace *,WTF::KeyValuePair<WebCore::StyleRuleFontFace *,WebCore::CSSFontFace *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::StyleRuleFontFace *,WebCore::CSSFontFace *>>,WTF::DefaultHash<WebCore::StyleRuleFontFace *>,WTF::HashMap<WebCore::StyleRuleFontFace *,WebCore::CSSFontFace *,WTF::DefaultHash<WebCore::StyleRuleFontFace *>,WTF::HashTraits<WebCore::StyleRuleFontFace *>,WTF::HashTraits<WebCore::CSSFontFace *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::StyleRuleFontFace *>>::rehash(a1, v17 >> 1);
  }
  return v10;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::InbandGenericCueIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::TextTrackCueGeneric,WTF::RawPtrTraits<WebCore::TextTrackCueGeneric>,WTF::DefaultRefDerefTraits<WebCore::TextTrackCueGeneric>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::InbandGenericCueIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::InbandGenericCueIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebCore::TextTrackCueGeneric,WTF::RawPtrTraits<WebCore::TextTrackCueGeneric>,WTF::DefaultRefDerefTraits<WebCore::TextTrackCueGeneric>>>,WTF::HashTableTraits>::remove(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;

  v2 = *result;
  if (*result)
  {
    v3 = result;
    v4 = *(_DWORD *)(v2 - 8);
    v5 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    v8 = v4 & ((v7 >> 31) ^ v7);
    v9 = *(_QWORD *)(v2 + 16 * v8);
    if (v9 != a2)
    {
      v10 = 1;
      while (v9)
      {
        v8 = ((_DWORD)v8 + v10) & v4;
        v9 = *(_QWORD *)(v2 + 16 * v8);
        ++v10;
        if (v9 == a2)
          goto LABEL_8;
      }
      v8 = *(unsigned int *)(v2 - 4);
    }
LABEL_8:
    if (v8 != *(_DWORD *)(v2 - 4))
    {
      v11 = (_QWORD *)(v2 + 16 * v8);
      result = (uint64_t *)v11[1];
      *v11 = -1;
      v11[1] = 0;
      if (result)
      {
        if (*((_DWORD *)result + 6) == 1)
          result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 72))(result);
        else
          --*((_DWORD *)result + 6);
      }
      ++*(_DWORD *)(*v3 - 16);
      v12 = *v3;
      if (*v3)
        v13 = *(_DWORD *)(v12 - 12) - 1;
      else
        v13 = -1;
      *(_DWORD *)(v12 - 12) = v13;
      v14 = *v3;
      if (*v3)
      {
        v15 = 6 * *(_DWORD *)(v14 - 12);
        v16 = *(_DWORD *)(v14 - 4);
        if (v15 < v16 && v16 >= 9)
          return (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::InbandGenericCueIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::InbandGenericCueIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::TextTrackCueGeneric,WTF::RawPtrTraits<WebCore::TextTrackCueGeneric>,WTF::DefaultRefDerefTraits<WebCore::TextTrackCueGeneric>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::InbandGenericCueIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::TextTrackCueGeneric,WTF::RawPtrTraits<WebCore::TextTrackCueGeneric>,WTF::DefaultRefDerefTraits<WebCore::TextTrackCueGeneric>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::InbandGenericCueIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::InbandGenericCueIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::TextTrackCueGeneric,WTF::RawPtrTraits<WebCore::TextTrackCueGeneric>,WTF::DefaultRefDerefTraits<WebCore::TextTrackCueGeneric>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::InbandGenericCueIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::InbandGenericCueIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebCore::TextTrackCueGeneric,WTF::RawPtrTraits<WebCore::TextTrackCueGeneric>,WTF::DefaultRefDerefTraits<WebCore::TextTrackCueGeneric>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::InbandGenericCueIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v3, v16 >> 1);
      }
    }
  }
  return result;
}

void WebCore::InbandGenericTextTrack::~InbandGenericTextTrack(WebCore::InbandGenericTextTrack *this, WTF::StringImpl *a2)
{
  WebCore::WebVTTParser *v3;
  WTF *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD **v8;
  _DWORD *v9;
  uint64_t v10;

  v3 = (WebCore::WebVTTParser *)*((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = 0;
  if (v3)
  {
    WebCore::WebVTTParser::~WebVTTParser(v3, a2);
    WTF::fastFree(v4, v5);
  }
  v6 = *((_QWORD *)this + 38);
  if (v6)
  {
    v7 = *(unsigned int *)(v6 - 4);
    if ((_DWORD)v7)
    {
      v8 = (_DWORD **)(v6 + 8);
      do
      {
        if (*(v8 - 1) != (_DWORD *)-1)
        {
          v9 = *v8;
          *v8 = 0;
          if (v9)
          {
            if (v9[6] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 72))(v9);
            else
              --v9[6];
          }
        }
        v8 += 2;
        --v7;
      }
      while (v7);
    }
    WTF::fastFree((WTF *)(v6 - 16), a2);
  }
  v10 = *((_QWORD *)this + 37);
  if (v10)
    WTF::fastFree((WTF *)(v10 - 16), a2);
  WebCore::InbandTextTrack::~InbandTextTrack(this, a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::InbandGenericTextTrack::~InbandGenericTextTrack(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void `non-virtual thunk to'WebCore::InbandGenericTextTrack::~InbandGenericTextTrack(WebCore::InbandGenericTextTrack *this, WTF::StringImpl *a2)
{
  WebCore::InbandGenericTextTrack::~InbandGenericTextTrack((WebCore::InbandGenericTextTrack *)((char *)this - 24), a2);
}

{
  WebCore::InbandGenericTextTrack::~InbandGenericTextTrack((WebCore::InbandGenericTextTrack *)((char *)this - 120), a2);
}

{
  WebCore::InbandGenericTextTrack::~InbandGenericTextTrack((WebCore::InbandGenericTextTrack *)((char *)this - 144), a2);
}

{
  WebCore::InbandGenericTextTrack::~InbandGenericTextTrack((WebCore::InbandGenericTextTrack *)((char *)this - 264), a2);
}

{
  WebCore::InbandGenericTextTrack::~InbandGenericTextTrack((WebCore::InbandGenericTextTrack *)((char *)this - 288), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::InbandGenericTextTrack::~InbandGenericTextTrack((WebCore::InbandGenericTextTrack *)((char *)this - 24), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::InbandGenericTextTrack::~InbandGenericTextTrack((WebCore::InbandGenericTextTrack *)((char *)this - 120), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::InbandGenericTextTrack::~InbandGenericTextTrack((WebCore::InbandGenericTextTrack *)((char *)this - 144), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::InbandGenericTextTrack::~InbandGenericTextTrack((WebCore::InbandGenericTextTrack *)((char *)this - 264), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::InbandGenericTextTrack::~InbandGenericTextTrack((WebCore::InbandGenericTextTrack *)((char *)this - 288), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t WebCore::InbandGenericTextTrack::updateCueFromCueData(WebCore::InbandGenericTextTrack *this, WebCore::TextTrackCueGeneric *a2, WebCore::InbandGenericCue *a3)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t **v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  const WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t **v29;
  _QWORD *v30;
  uint64_t v31;
  int v32;
  double v33;
  int v34;
  _DWORD *v35;
  WTF::StringImpl *v36;
  double v37;
  WTF::StringImpl *v38;
  double v39;
  double v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t result;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t **v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t **v61;
  _QWORD *v62;
  uint64_t v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int v78;
  _BOOL4 v79;
  unint64_t v80;
  _BOOL4 v81;
  unint64_t v82;
  _BOOL4 v83;
  unint64_t v84;
  uint64_t v85;
  WTF::StringImpl *v86;
  char v87;
  _BYTE v88[8];
  WTF::StringImpl *v89;
  char v90;
  __int128 v91;
  __int128 v92;

  v6 = *((_DWORD *)a2 + 24);
  v7 = v6 + 1;
  *((_DWORD *)a2 + 24) = v6 + 1;
  if (v6 < 1)
  {
    v10 = *((_QWORD *)a2 + 13);
    if (v10)
    {
      v11 = *(_QWORD *)(v10 + 8);
      if (v11)
      {
        v12 = v11 - 120;
        v13 = (uint64_t **)(v11 + 80);
        v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v14 = off_1E33EBDF8;
        v14[1] = v12;
        v14[2] = a2;
        *(_QWORD *)&v92 = v14;
        WTF::WeakHashSet<WebCore::TextTrackClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v13, &v92);
        v15 = v92;
        *(_QWORD *)&v92 = 0;
        if (v15)
          (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
        v7 = *((_DWORD *)a2 + 24);
      }
    }
    v8 = *((_QWORD *)a3 + 2);
    v9 = *((_QWORD *)a3 + 3);
    *((_DWORD *)a2 + 24) = v7 + 1;
    if (v7 <= 0)
    {
      v58 = *((_QWORD *)a2 + 13);
      if (v58)
      {
        v59 = *(_QWORD *)(v58 + 8);
        if (v59)
        {
          v60 = v59 - 120;
          v61 = (uint64_t **)(v59 + 80);
          v62 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v62 = off_1E33EBDF8;
          v62[1] = v60;
          v62[2] = a2;
          *(_QWORD *)&v92 = v62;
          WTF::WeakHashSet<WebCore::TextTrackClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v61, &v92);
          v63 = v92;
          *(_QWORD *)&v92 = 0;
          if (v63)
            (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
        }
      }
    }
  }
  else
  {
    v8 = *((_QWORD *)a3 + 2);
    v9 = *((_QWORD *)a3 + 3);
    *((_DWORD *)a2 + 24) = v6 + 2;
  }
  *((_QWORD *)a2 + 8) = v8;
  *((_DWORD *)a2 + 18) = v9;
  *((_BYTE *)a2 + 76) = BYTE4(v9);
  (*(void (**)(WebCore::TextTrackCueGeneric *, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1);
  v16 = *((_QWORD *)a3 + 4);
  v17 = *((_QWORD *)a3 + 5);
  if ((v17 & 0x400000000) != 0)
  {
    v18 = *((_QWORD *)this + 13);
    if (v18)
    {
      v19 = *(_QWORD *)(v18 + 8);
      if (v19)
      {
        if (*(_DWORD *)(v19 + 72) != 1)
        {
          __break(0xC471u);
          JUMPOUT(0x195D814F4);
        }
        if ((*(_BYTE *)(v19 + 140) & 1) != 0)
        {
          v16 = *(_QWORD *)(v19 + 128);
          v17 = *(unsigned int *)(v19 + 136) | ((unint64_t)*(unsigned __int8 *)(v19 + 140) << 32);
        }
      }
    }
  }
  v20 = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v20 + 1;
  if (v20 <= 0)
  {
    v26 = *((_QWORD *)a2 + 13);
    if (v26)
    {
      v27 = *(_QWORD *)(v26 + 8);
      if (v27)
      {
        v28 = v27 - 120;
        v29 = (uint64_t **)(v27 + 80);
        v30 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v30 = off_1E33EBDF8;
        v30[1] = v28;
        v30[2] = a2;
        *(_QWORD *)&v92 = v30;
        WTF::WeakHashSet<WebCore::TextTrackClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v29, &v92);
        v31 = v92;
        *(_QWORD *)&v92 = 0;
        if (v31)
          (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
      }
    }
  }
  *((_QWORD *)a2 + 10) = v16;
  *((_DWORD *)a2 + 22) = v17;
  *((_BYTE *)a2 + 92) = BYTE4(v17);
  (*(void (**)(WebCore::TextTrackCueGeneric *, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1);
  WebCore::VTTCue::setText((WTF **)a2, (const WTF::StringImpl **)a3 + 7, v21);
  WebCore::TextTrackCue::setId((uint64_t)a2, (WebCore::InbandGenericCue *)((char *)a3 + 48));
  v23 = *((double *)a3 + 12);
  v24 = *((double *)a2 + 58);
  if (v24 == v23)
  {
    v25 = *((double *)a2 + 59);
  }
  else
  {
    *((double *)a2 + 58) = v23;
    v25 = *((double *)a2 + 59);
    v32 = (int)(v23 * v25);
    if (*((_DWORD *)a2 + 88) != v32)
    {
      *((_BYTE *)a2 + 357) |= 2u;
      *((_DWORD *)a2 + 88) = v32;
    }
    v24 = v23;
  }
  v33 = *((double *)a3 + 13);
  if (v25 != v33)
  {
    *((double *)a2 + 59) = v33;
    v34 = (int)(v33 * v24);
    if (*((_DWORD *)a2 + 88) != v34)
    {
      *((_BYTE *)a2 + 357) |= 2u;
      *((_DWORD *)a2 + 88) = v34;
    }
  }
  v35 = (_DWORD *)*((_QWORD *)a3 + 8);
  if (v35)
    *v35 += 2;
  v36 = (WTF::StringImpl *)*((_QWORD *)a2 + 60);
  *((_QWORD *)a2 + 60) = v35;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
      WTF::StringImpl::destroy(v36, v22);
    else
      *(_DWORD *)v36 -= 2;
  }
  v37 = *((double *)a3 + 10);
  if (v37 > 0.0)
  {
    *(_QWORD *)&v92 = round(v37);
    DWORD2(v92) = 0;
    WebCore::VTTCue::setPosition((uint64_t)a2, (uint64_t)&v92, (uint64_t)v88);
    if (v90)
    {
      v38 = v89;
      v89 = 0;
      if (v38)
      {
        if (*(_DWORD *)v38 == 2)
          WTF::StringImpl::destroy(v38, v22);
        else
          *(_DWORD *)v38 -= 2;
      }
    }
    else
    {
      *((_BYTE *)a2 + 488) = 0;
    }
  }
  v39 = *((double *)a3 + 9);
  if (v39 > 0.0)
  {
    *(_QWORD *)&v92 = round(v39);
    DWORD2(v92) = 0;
    WebCore::VTTCue::setLine((uint64_t)a2, (uint64_t)&v92);
  }
  v40 = *((double *)a3 + 11);
  if (v40 > 0.0)
  {
    WebCore::VTTCue::setSize((uint64_t)a2, round(v40), (uint64_t)&v85);
    if (v87)
    {
      v41 = v86;
      v86 = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2)
          WTF::StringImpl::destroy(v41, v22);
        else
          *(_DWORD *)v41 -= 2;
      }
    }
  }
  v42 = *((_QWORD *)a3 + 15);
  if ((v42 & 0x4000000000000) != 0)
  {
    v43 = *((_QWORD *)a2 + 56);
    if ((v43 & 0x8000000000000) != 0)
    {
      if ((v42 & 0x8000000000000) != 0)
      {
        v92 = *(_OWORD *)((v43 & 0xFFFFFFFFFFFFLL) + 4);
        v91 = *(_OWORD *)((v42 & 0xFFFFFFFFFFFFLL) + 4);
        v79 = WebCore::operator==<float,4ul>((float *)&v92, (float *)&v91);
        v43 = *((_QWORD *)a2 + 56);
        if (v79)
        {
          v80 = *((_QWORD *)a3 + 15);
          if (HIBYTE(v43) == HIBYTE(v80) && BYTE6(v43) == BYTE6(v80))
            goto LABEL_52;
        }
      }
    }
    else if ((v42 & 0x8000000000000) == 0 && v43 == v42)
    {
      goto LABEL_52;
    }
    if ((v43 & 0x8000000000000) != 0)
    {
      v70 = (unsigned int *)(v43 & 0xFFFFFFFFFFFFLL);
      do
      {
        v71 = __ldaxr(v70);
        v72 = v71 - 1;
      }
      while (__stlxr(v72, v70));
      if (!v72)
      {
        atomic_store(1u, v70);
        WTF::fastFree((WTF *)v70, v22);
      }
    }
    v44 = *((_QWORD *)a3 + 15);
    *((_QWORD *)a2 + 56) = v44;
    if ((v44 & 0x8000000000000) != 0)
    {
      v64 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFLL);
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 + 1, v64));
    }
  }
LABEL_52:
  v45 = *((_QWORD *)a3 + 14);
  if ((v45 & 0x4000000000000) == 0)
    goto LABEL_58;
  v46 = *((_QWORD *)a2 + 55);
  if ((v46 & 0x8000000000000) != 0)
  {
    if ((v45 & 0x8000000000000) != 0)
    {
      v92 = *(_OWORD *)((v46 & 0xFFFFFFFFFFFFLL) + 4);
      v91 = *(_OWORD *)((v45 & 0xFFFFFFFFFFFFLL) + 4);
      v81 = WebCore::operator==<float,4ul>((float *)&v92, (float *)&v91);
      v46 = *((_QWORD *)a2 + 55);
      if (v81)
      {
        v82 = *((_QWORD *)a3 + 14);
        if (HIBYTE(v46) == HIBYTE(v82) && BYTE6(v46) == BYTE6(v82))
          goto LABEL_58;
      }
    }
  }
  else if ((v45 & 0x8000000000000) == 0 && v46 == v45)
  {
    goto LABEL_58;
  }
  if ((v46 & 0x8000000000000) != 0)
  {
    v73 = (unsigned int *)(v46 & 0xFFFFFFFFFFFFLL);
    do
    {
      v74 = __ldaxr(v73);
      v75 = v74 - 1;
    }
    while (__stlxr(v75, v73));
    if (!v75)
    {
      atomic_store(1u, v73);
      WTF::fastFree((WTF *)v73, v22);
    }
  }
  v47 = *((_QWORD *)a3 + 14);
  *((_QWORD *)a2 + 55) = v47;
  if ((v47 & 0x8000000000000) != 0)
  {
    v66 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFLL);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 + 1, v66));
  }
LABEL_58:
  v48 = *((_QWORD *)a3 + 16);
  if ((v48 & 0x4000000000000) == 0)
    goto LABEL_64;
  v49 = *((_QWORD *)a2 + 57);
  if ((v49 & 0x8000000000000) != 0)
  {
    if ((v48 & 0x8000000000000) != 0)
    {
      v92 = *(_OWORD *)((v49 & 0xFFFFFFFFFFFFLL) + 4);
      v91 = *(_OWORD *)((v48 & 0xFFFFFFFFFFFFLL) + 4);
      v83 = WebCore::operator==<float,4ul>((float *)&v92, (float *)&v91);
      v49 = *((_QWORD *)a2 + 57);
      if (v83)
      {
        v84 = *((_QWORD *)a3 + 16);
        if (HIBYTE(v49) == HIBYTE(v84) && BYTE6(v49) == BYTE6(v84))
          goto LABEL_64;
      }
    }
  }
  else if ((v48 & 0x8000000000000) == 0 && v49 == v48)
  {
    goto LABEL_64;
  }
  if ((v49 & 0x8000000000000) != 0)
  {
    v76 = (unsigned int *)(v49 & 0xFFFFFFFFFFFFLL);
    do
    {
      v77 = __ldaxr(v76);
      v78 = v77 - 1;
    }
    while (__stlxr(v78, v76));
    if (!v78)
    {
      atomic_store(1u, v76);
      WTF::fastFree((WTF *)v76, v22);
    }
  }
  v50 = *((_QWORD *)a3 + 16);
  *((_QWORD *)a2 + 57) = v50;
  if ((v50 & 0x8000000000000) != 0)
  {
    v68 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFLL);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 + 1, v68));
  }
LABEL_64:
  if (*((unsigned __int8 *)a3 + 136) - 1 <= 2)
    WebCore::VTTCue::setPositionAlign((uint64_t)a2, (*((_BYTE *)a3 + 136) - 1));
  if (*((unsigned __int8 *)a3 + 137) - 1 <= 2)
    WebCore::VTTCue::setAlign((uint64_t)a2, (*((_BYTE *)a3 + 137) - 1));
  result = WebCore::VTTCue::setSnapToLines((uint64_t)a2, 0);
  v52 = *((_DWORD *)a2 + 24) - 1;
  *((_DWORD *)a2 + 24) = v52;
  if (!v52)
  {
    *((_BYTE *)a2 + 135) = 1;
    v53 = *((_QWORD *)a2 + 13);
    if (v53)
    {
      v54 = *(_QWORD *)(v53 + 8);
      if (v54)
      {
        v55 = v54 - 120;
        v56 = (uint64_t **)(v54 + 80);
        v57 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v57 = off_1E33EBE20;
        v57[1] = v55;
        v57[2] = a2;
        *(_QWORD *)&v92 = v57;
        WTF::WeakHashSet<WebCore::TextTrackClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v56, &v92);
        result = v92;
        *(_QWORD *)&v92 = 0;
        if (result)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      }
    }
  }
  *((_BYTE *)a2 + 357) |= 2u;
  return result;
}

uint64_t *WebCore::InbandGenericTextTrack::addGenericCue(uint64_t *this, WebCore::InbandGenericCue *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  WebCore::TextTrackCueGeneric *v14;
  __int128 v15;
  WebCore::TextTrackCueGeneric *v16;
  int v17;
  uint64_t (*v18)();
  uint64_t v19;
  uint64_t v20;
  WTF::JSONImpl::Object *v21;
  _DWORD *v22;
  int v23;
  int v24;
  int v25;
  BOOL v26;
  int v27;
  char v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  WTF::JSONImpl::Object *v32;
  _DWORD *v33;
  int v34;
  int v35;
  int v36;
  int v37;
  char v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  NSObject *v46;
  uint64_t v47;
  void *v48;
  char *v49;
  unsigned __int8 *v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  WTF::JSONImpl::Object *v58;
  WTF::Logger *v59;
  WTF::Logger *v60;
  uint64_t v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::Logger *v65;
  uint64_t v66;
  WTF::StringImpl **v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  int v72;
  unsigned int v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  NSObject *v78;
  uint64_t v79;
  void *v80;
  char *v81;
  unsigned __int8 *v82;
  int v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  WTF::JSONImpl::Object *v89;
  WTF::Logger *v90;
  WTF::Logger *v91;
  uint64_t v92;
  uint64_t v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  WTF::Logger *v96;
  uint64_t v97;
  WTF::StringImpl **v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  int v103;
  WTF::StringImpl *v104;
  uint64_t *v105;
  WebCore::TextTrackCueGeneric *v106;
  uint64_t v107;
  int v108;
  uint64_t *v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unsigned int v113;
  WebCore::TextTrackCueGeneric **v114;
  WebCore::TextTrackCueGeneric *v115;
  WebCore::TextTrackCueGeneric **v116;
  int v117;
  WebCore::TextTrackCueGeneric *v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  unint64_t v124;
  unsigned int v125;
  uint64_t v126;
  int v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unsigned int v131;
  WebCore::TextTrackCueGeneric **v132;
  WebCore::TextTrackCueGeneric *v133;
  WebCore::TextTrackCueGeneric **v134;
  int v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  unint64_t v141;
  unsigned int v142;
  WTF::StringImpl *v143;
  WTF::StringImpl *v144;
  uint64_t v145;
  char v146[8];
  WTF::StringImpl *v147;
  char v148;
  __int128 v149;
  const char *v150;
  uint64_t v151;
  WebCore::TextTrackCueGeneric *v152;
  WTF::Logger *v153;
  uint64_t v154;
  WTF::StringImpl *v155;
  WTF::StringImpl *v156;
  WTF::StringImpl *v157;
  WTF::StringImpl *v158;
  uint8_t buf[16];
  int v160;
  WTF::StringImpl *v161;
  int v162;
  WTF::StringImpl *v163;
  uint64_t v164;

  v3 = this;
  v164 = *MEMORY[0x1E0C80C00];
  v4 = this[38];
  if (v4)
  {
    v5 = *((_QWORD *)a2 + 1);
    v6 = *(_DWORD *)(v4 - 8);
    v7 = (v5 + ~(v5 << 32)) ^ ((unint64_t)(v5 + ~(v5 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(_QWORD *)(v4 + 16 * v10);
    if (v11 == v5)
    {
LABEL_6:
      if (*(_QWORD *)(v4 + 16 * v10 + 8))
        return this;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(_QWORD *)(v4 + 16 * v10);
        ++v12;
        if (v11 == v5)
          goto LABEL_6;
      }
    }
  }
  v13 = *(_QWORD *)(this[19] + 8);
  if (v13)
    v14 = (WebCore::TextTrackCueGeneric *)(v13 - 96);
  else
    v14 = 0;
  v15 = *((_OWORD *)a2 + 2);
  *(_OWORD *)buf = *((_OWORD *)a2 + 1);
  v149 = v15;
  WebCore::TextTrackCueGeneric::create(v14, (WebCore::ScriptExecutionContext *)buf, (const WTF::MediaTime *)&v149, (WTF::StringImpl **)a2 + 7, (uint64_t *)&v152);
  v16 = v152;
  WebCore::InbandGenericTextTrack::updateCueFromCueData((WebCore::InbandGenericTextTrack *)v3, v152, a2);
  WebCore::TextTrack::matchCue((WTF::MediaTime *)v3, v16, 1, (uint64_t *)buf);
  this = *(uint64_t **)buf;
  *(_QWORD *)buf = 0;
  if (this)
  {
    v17 = *((_DWORD *)this + 6);
    if (v17 == 1)
      this = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*this + 72))(this);
    else
      *((_DWORD *)this + 6) = v17 - 1;
    v18 = WTF::RefPtr<WebCore::TextTrackCue,WTF::RawPtrTraits<WebCore::TextTrackCue>,WTF::DefaultRefDerefTraits<WebCore::TextTrackCue>>::unspecifiedBoolTypeInstance;
  }
  else
  {
    v18 = 0;
  }
  v19 = v3[11];
  if (v18)
  {
    v20 = v3[12];
    *(_QWORD *)&v149 = "InbandGenericTextTrack";
    *((_QWORD *)&v149 + 1) = 23;
    v150 = "addGenericCue";
    v151 = v20;
    if (!*(_BYTE *)(v19 + 12) || !WebCore::LogMedia || byte_1ECE7C490 < 3u)
    {
LABEL_198:
      if (v16)
      {
        if (*((_DWORD *)v16 + 6) == 1)
          return (uint64_t *)(*(uint64_t (**)(WebCore::TextTrackCueGeneric *))(*(_QWORD *)v16 + 72))(v16);
        else
          --*((_DWORD *)v16 + 6);
      }
      return this;
    }
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v149);
    v21 = (WTF::JSONImpl::Object *)WTF::String::String((WTF::String *)&v156, "ignoring already added cue: ");
    WTF::JSONImpl::Object::create(v21);
    (*(void (**)(WebCore::TextTrackCueGeneric *, _QWORD))(*(_QWORD *)v16 + 264))(v16, *(_QWORD *)buf);
    WTF::JSONImpl::Value::toJSONString(*(WTF::JSONImpl::Value **)buf);
    v22 = *(_DWORD **)buf;
    *(_QWORD *)buf = 0;
    if (v22)
    {
      if (*v22 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v22;
    }
    if (v157)
    {
      v23 = *((_DWORD *)v157 + 1);
      if (v156)
        goto LABEL_23;
    }
    else
    {
      v23 = 0;
      if (v156)
      {
LABEL_23:
        v24 = *((_DWORD *)v156 + 1);
        if (v155)
        {
LABEL_24:
          v25 = *((_DWORD *)v155 + 1);
LABEL_25:
          if ((v25 | v24) < 0
            || ((v26 = __OFADD__(v24, v25), v27 = v24 + v25, !v26) ? (v28 = 0) : (v28 = 1),
                v23 < 0 || (v28 & 1) != 0 || (v29 = (v23 + v27), __OFADD__(v23, v27))))
          {
            v158 = 0;
            goto LABEL_304;
          }
          if (v157 && (*((_BYTE *)v157 + 16) & 4) == 0)
          {
            v30 = 0;
            goto LABEL_59;
          }
          if (v156)
          {
            v41 = *((_DWORD *)v156 + 4);
            v30 = (v41 >> 2) & 1;
            if (v155 && (v41 & 4) != 0)
              goto LABEL_58;
          }
          else
          {
            if (v155)
            {
LABEL_58:
              v30 = (*((unsigned __int8 *)v155 + 16) >> 2) & 1;
              goto LABEL_59;
            }
            v30 = 1;
          }
LABEL_59:
          WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v29, v30, v157, (uint64_t)v156, (uint64_t)v155, &v158);
          if (v158)
          {
            v43 = v155;
            v155 = 0;
            if (v43)
            {
              if (*(_DWORD *)v43 == 2)
                WTF::StringImpl::destroy(v43, v42);
              else
                *(_DWORD *)v43 -= 2;
            }
            v44 = v156;
            v156 = 0;
            if (v44)
            {
              if (*(_DWORD *)v44 == 2)
                WTF::StringImpl::destroy(v44, v42);
              else
                *(_DWORD *)v44 -= 2;
            }
            v45 = v157;
            v157 = 0;
            if (v45)
            {
              if (*(_DWORD *)v45 == 2)
                WTF::StringImpl::destroy(v45, v42);
              else
                *(_DWORD *)v45 -= 2;
            }
            v46 = qword_1ECE7C4A0;
            v47 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
            if ((_DWORD)v47)
            {
              WTF::String::utf8();
              v49 = v153 ? (char *)v153 + 16 : 0;
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = v49;
              _os_log_impl(&dword_1940B8000, v46, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
              v47 = (uint64_t)v153;
              v153 = 0;
              if (v47)
              {
                if (*(_DWORD *)v47 == 1)
                  v47 = WTF::fastFree((WTF *)v47, v48);
                else
                  --*(_DWORD *)v47;
              }
            }
            if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
            {
              v50 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
              while (1)
              {
                v51 = *v50;
                if ((v51 & 1) != 0)
                  break;
                v52 = __ldaxr(v50);
                if (v52 == v51)
                {
                  if (!__stxr(v51 | 1, v50))
                  {
                    v53 = WTF::Logger::observers((WTF::Logger *)v47);
                    v54 = *(unsigned int *)(v53 + 12);
                    if ((_DWORD)v54)
                    {
                      v55 = *(uint64_t **)v53;
                      v56 = *(_QWORD *)v53 + 8 * v54;
                      do
                      {
                        v57 = *v55;
                        *(_DWORD *)buf = 0;
                        WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v149);
                        v160 = 0;
                        v58 = (WTF::JSONImpl::Object *)WTF::String::String((WTF::String *)&v161, "ignoring already added cue: ");
                        v162 = 1;
                        WTF::JSONImpl::Object::create(v58);
                        (*(void (**)(WebCore::TextTrackCueGeneric *, WTF::Logger *))(*(_QWORD *)v16 + 264))(v16, v153);
                        WTF::JSONImpl::Value::toJSONString(v153);
                        v59 = v153;
                        v153 = 0;
                        if (v59)
                        {
                          if (*(_DWORD *)v59 == 1)
                            WTF::JSONImpl::Value::operator delete();
                          else
                            --*(_DWORD *)v59;
                        }
                        v153 = 0;
                        v154 = 0;
                        v60 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
                        LODWORD(v154) = 3;
                        v153 = v60;
                        v61 = HIDWORD(v154);
                        *((_DWORD *)v60 + 4 * HIDWORD(v154)) = *(_DWORD *)buf;
                        v62 = *(_QWORD *)&buf[8];
                        if (*(_QWORD *)&buf[8])
                          **(_DWORD **)&buf[8] += 2;
                        *((_QWORD *)v60 + 2 * v61 + 1) = v62;
                        *((_DWORD *)v60 + 4 * (v61 + 1)) = v160;
                        v63 = v161;
                        if (v161)
                          *(_DWORD *)v161 += 2;
                        *((_QWORD *)v60 + 2 * (v61 + 1) + 1) = v63;
                        *((_DWORD *)v60 + 4 * (v61 + 2)) = v162;
                        v64 = v163;
                        if (v163)
                          *(_DWORD *)v163 += 2;
                        *((_QWORD *)v60 + 2 * (v61 + 2) + 1) = v64;
                        HIDWORD(v154) = v61 + 3;
                        (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v57 + 16))(v57, &WebCore::LogMedia, 3, &v153);
                        v65 = v153;
                        if (HIDWORD(v154))
                        {
                          v66 = 16 * HIDWORD(v154);
                          v67 = (WTF::StringImpl **)((char *)v153 + 8);
                          do
                          {
                            v68 = *v67;
                            *v67 = 0;
                            if (v68)
                            {
                              if (*(_DWORD *)v68 == 2)
                                WTF::StringImpl::destroy(v68, (WTF::StringImpl *)v48);
                              else
                                *(_DWORD *)v68 -= 2;
                            }
                            v67 += 2;
                            v66 -= 16;
                          }
                          while (v66);
                          v65 = v153;
                        }
                        if (v65)
                        {
                          v153 = 0;
                          LODWORD(v154) = 0;
                          WTF::fastFree(v65, v48);
                        }
                        v69 = v163;
                        v163 = 0;
                        if (v69)
                        {
                          if (*(_DWORD *)v69 == 2)
                            WTF::StringImpl::destroy(v69, (WTF::StringImpl *)v48);
                          else
                            *(_DWORD *)v69 -= 2;
                        }
                        v70 = v161;
                        v161 = 0;
                        if (v70)
                        {
                          if (*(_DWORD *)v70 == 2)
                            WTF::StringImpl::destroy(v70, (WTF::StringImpl *)v48);
                          else
                            *(_DWORD *)v70 -= 2;
                        }
                        v71 = *(WTF::StringImpl **)&buf[8];
                        *(_QWORD *)&buf[8] = 0;
                        if (v71)
                        {
                          if (*(_DWORD *)v71 == 2)
                            WTF::StringImpl::destroy(v71, (WTF::StringImpl *)v48);
                          else
                            *(_DWORD *)v71 -= 2;
                        }
                        ++v55;
                      }
                      while (v55 != (uint64_t *)v56);
                    }
                    v72 = __ldxr(v50);
                    if (v72 == 1)
                    {
                      if (!__stlxr(0, v50))
                        break;
                    }
                    else
                    {
                      __clrex();
                    }
                    WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                    break;
                  }
                }
                else
                {
                  __clrex();
                }
              }
            }
            this = (uint64_t *)v158;
            v158 = 0;
            if (this)
            {
              if (*(_DWORD *)this == 2)
                this = (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)this, (WTF::StringImpl *)v48);
              else
                *(_DWORD *)this -= 2;
            }
            v16 = v152;
            goto LABEL_198;
          }
LABEL_304:
          __break(0xC471u);
          JUMPOUT(0x195D825F4);
        }
LABEL_290:
        v25 = 0;
        goto LABEL_25;
      }
    }
    v24 = 0;
    if (v155)
      goto LABEL_24;
    goto LABEL_290;
  }
  v31 = v3[12];
  *(_QWORD *)&v149 = "InbandGenericTextTrack";
  *((_QWORD *)&v149 + 1) = 23;
  v150 = "addGenericCue";
  v151 = v31;
  if (*(_BYTE *)(v19 + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 3u)
  {
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v149);
    v32 = (WTF::JSONImpl::Object *)WTF::String::String((WTF::String *)&v156, "added cue: ");
    WTF::JSONImpl::Object::create(v32);
    (*(void (**)(WebCore::TextTrackCueGeneric *, _QWORD))(*(_QWORD *)v16 + 264))(v16, *(_QWORD *)buf);
    WTF::JSONImpl::Value::toJSONString(*(WTF::JSONImpl::Value **)buf);
    v33 = *(_DWORD **)buf;
    *(_QWORD *)buf = 0;
    if (v33)
    {
      if (*v33 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v33;
    }
    if (v157)
    {
      v34 = *((_DWORD *)v157 + 1);
      if (v156)
        goto LABEL_43;
    }
    else
    {
      v34 = 0;
      if (v156)
      {
LABEL_43:
        v35 = *((_DWORD *)v156 + 1);
        if (v155)
        {
LABEL_44:
          v36 = *((_DWORD *)v155 + 1);
LABEL_45:
          if ((v36 | v35) < 0
            || ((v26 = __OFADD__(v35, v36), v37 = v35 + v36, !v26) ? (v38 = 0) : (v38 = 1),
                v34 < 0 || (v38 & 1) != 0 || (v39 = (v34 + v37), __OFADD__(v34, v37))))
          {
            v158 = 0;
            goto LABEL_304;
          }
          if (!v157 || (*((_BYTE *)v157 + 16) & 4) != 0)
          {
            if (v156)
            {
              v73 = *((_DWORD *)v156 + 4);
              v40 = (v73 >> 2) & 1;
              if (!v155 || (v73 & 4) == 0)
                goto LABEL_128;
            }
            else if (!v155)
            {
              v40 = 1;
              goto LABEL_128;
            }
            v40 = (*((unsigned __int8 *)v155 + 16) >> 2) & 1;
          }
          else
          {
            v40 = 0;
          }
LABEL_128:
          WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v39, v40, v157, (uint64_t)v156, (uint64_t)v155, &v158);
          if (!v158)
            goto LABEL_304;
          v75 = v155;
          v155 = 0;
          if (v75)
          {
            if (*(_DWORD *)v75 == 2)
              WTF::StringImpl::destroy(v75, v74);
            else
              *(_DWORD *)v75 -= 2;
          }
          v76 = v156;
          v156 = 0;
          if (v76)
          {
            if (*(_DWORD *)v76 == 2)
              WTF::StringImpl::destroy(v76, v74);
            else
              *(_DWORD *)v76 -= 2;
          }
          v77 = v157;
          v157 = 0;
          if (v77)
          {
            if (*(_DWORD *)v77 == 2)
              WTF::StringImpl::destroy(v77, v74);
            else
              *(_DWORD *)v77 -= 2;
          }
          v78 = qword_1ECE7C4A0;
          v79 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)v79)
          {
            WTF::String::utf8();
            v81 = v153 ? (char *)v153 + 16 : 0;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = v81;
            _os_log_impl(&dword_1940B8000, v78, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
            v79 = (uint64_t)v153;
            v153 = 0;
            if (v79)
            {
              if (*(_DWORD *)v79 == 1)
                v79 = WTF::fastFree((WTF *)v79, v80);
              else
                --*(_DWORD *)v79;
            }
          }
          if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
          {
            v82 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
            while (1)
            {
              v83 = *v82;
              if ((v83 & 1) != 0)
                break;
              v84 = __ldaxr(v82);
              if (v84 == v83)
              {
                if (!__stxr(v83 | 1, v82))
                {
                  v85 = WTF::Logger::observers((WTF::Logger *)v79);
                  v86 = *(unsigned int *)(v85 + 12);
                  if ((_DWORD)v86)
                  {
                    v87 = *(uint64_t **)v85;
                    v145 = *(_QWORD *)v85 + 8 * v86;
                    do
                    {
                      v88 = *v87;
                      *(_DWORD *)buf = 0;
                      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v149);
                      v160 = 0;
                      v89 = (WTF::JSONImpl::Object *)WTF::String::String((WTF::String *)&v161, "added cue: ");
                      v162 = 1;
                      WTF::JSONImpl::Object::create(v89);
                      (*(void (**)(WebCore::TextTrackCueGeneric *, WTF::Logger *))(*(_QWORD *)v16 + 264))(v16, v153);
                      WTF::JSONImpl::Value::toJSONString(v153);
                      v90 = v153;
                      v153 = 0;
                      if (v90)
                      {
                        if (*(_DWORD *)v90 == 1)
                          WTF::JSONImpl::Value::operator delete();
                        else
                          --*(_DWORD *)v90;
                      }
                      v153 = 0;
                      v154 = 0;
                      v91 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
                      LODWORD(v154) = 3;
                      v153 = v91;
                      v92 = HIDWORD(v154);
                      *((_DWORD *)v91 + 4 * HIDWORD(v154)) = *(_DWORD *)buf;
                      v93 = *(_QWORD *)&buf[8];
                      if (*(_QWORD *)&buf[8])
                        **(_DWORD **)&buf[8] += 2;
                      *((_QWORD *)v91 + 2 * v92 + 1) = v93;
                      *((_DWORD *)v91 + 4 * (v92 + 1)) = v160;
                      v94 = v161;
                      if (v161)
                        *(_DWORD *)v161 += 2;
                      *((_QWORD *)v91 + 2 * (v92 + 1) + 1) = v94;
                      *((_DWORD *)v91 + 4 * (v92 + 2)) = v162;
                      v95 = v163;
                      if (v163)
                        *(_DWORD *)v163 += 2;
                      *((_QWORD *)v91 + 2 * (v92 + 2) + 1) = v95;
                      HIDWORD(v154) = v92 + 3;
                      (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v88 + 16))(v88, &WebCore::LogMedia, 3, &v153);
                      v96 = v153;
                      if (HIDWORD(v154))
                      {
                        v97 = 16 * HIDWORD(v154);
                        v98 = (WTF::StringImpl **)((char *)v153 + 8);
                        do
                        {
                          v99 = *v98;
                          *v98 = 0;
                          if (v99)
                          {
                            if (*(_DWORD *)v99 == 2)
                              WTF::StringImpl::destroy(v99, (WTF::StringImpl *)v80);
                            else
                              *(_DWORD *)v99 -= 2;
                          }
                          v98 += 2;
                          v97 -= 16;
                        }
                        while (v97);
                        v96 = v153;
                      }
                      if (v96)
                      {
                        v153 = 0;
                        LODWORD(v154) = 0;
                        WTF::fastFree(v96, v80);
                      }
                      v100 = v163;
                      v163 = 0;
                      if (v100)
                      {
                        if (*(_DWORD *)v100 == 2)
                          WTF::StringImpl::destroy(v100, (WTF::StringImpl *)v80);
                        else
                          *(_DWORD *)v100 -= 2;
                      }
                      v101 = v161;
                      v161 = 0;
                      if (v101)
                      {
                        if (*(_DWORD *)v101 == 2)
                          WTF::StringImpl::destroy(v101, (WTF::StringImpl *)v80);
                        else
                          *(_DWORD *)v101 -= 2;
                      }
                      v102 = *(WTF::StringImpl **)&buf[8];
                      *(_QWORD *)&buf[8] = 0;
                      if (v102)
                      {
                        if (*(_DWORD *)v102 == 2)
                          WTF::StringImpl::destroy(v102, (WTF::StringImpl *)v80);
                        else
                          *(_DWORD *)v102 -= 2;
                      }
                      ++v87;
                    }
                    while (v87 != (uint64_t *)v145);
                  }
                  v103 = __ldxr(v82);
                  if (v103 == 1)
                  {
                    if (!__stlxr(0, v82))
                      break;
                  }
                  else
                  {
                    __clrex();
                  }
                  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                  break;
                }
              }
              else
              {
                __clrex();
              }
            }
          }
          v104 = v158;
          v158 = 0;
          if (v104)
          {
            if (*(_DWORD *)v104 == 2)
              WTF::StringImpl::destroy(v104, (WTF::StringImpl *)v80);
            else
              *(_DWORD *)v104 -= 2;
          }
          v16 = v152;
          goto LABEL_208;
        }
LABEL_295:
        v36 = 0;
        goto LABEL_45;
      }
    }
    v35 = 0;
    if (v155)
      goto LABEL_44;
    goto LABEL_295;
  }
LABEL_208:
  if (*((_BYTE *)a2 + 138) == 2)
    goto LABEL_263;
  v105 = v3 + 38;
  v106 = (WebCore::TextTrackCueGeneric *)*((_QWORD *)a2 + 1);
  v107 = v3[38];
  if (v107
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::InbandGenericCueIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::InbandGenericCueIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::TextTrackCueGeneric,WTF::RawPtrTraits<WebCore::TextTrackCueGeneric>,WTF::DefaultRefDerefTraits<WebCore::TextTrackCueGeneric>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::InbandGenericCueIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::TextTrackCueGeneric,WTF::RawPtrTraits<WebCore::TextTrackCueGeneric>,WTF::DefaultRefDerefTraits<WebCore::TextTrackCueGeneric>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::InbandGenericCueIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::InbandGenericCueIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::TextTrackCueGeneric,WTF::RawPtrTraits<WebCore::TextTrackCueGeneric>,WTF::DefaultRefDerefTraits<WebCore::TextTrackCueGeneric>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::InbandGenericCueIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::InbandGenericCueIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebCore::TextTrackCueGeneric,WTF::RawPtrTraits<WebCore::TextTrackCueGeneric>,WTF::DefaultRefDerefTraits<WebCore::TextTrackCueGeneric>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::InbandGenericCueIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v3 + 38, 8u), (v107 = *v105) != 0))
  {
    v108 = *(_DWORD *)(v107 - 8);
  }
  else
  {
    v108 = 0;
  }
  v109 = v3 + 37;
  v110 = ((unint64_t)v106 + ~((_QWORD)v106 << 32)) ^ (((unint64_t)v106 + ~((_QWORD)v106 << 32)) >> 22);
  v111 = 9 * ((v110 + ~(v110 << 13)) ^ ((v110 + ~(v110 << 13)) >> 8));
  v112 = (v111 ^ (v111 >> 15)) + ~((v111 ^ (v111 >> 15)) << 27);
  v113 = v108 & ((v112 >> 31) ^ v112);
  v114 = (WebCore::TextTrackCueGeneric **)(v107 + 16 * v113);
  v115 = *v114;
  if (!*v114)
  {
LABEL_220:
    *v114 = v106;
    if (v16)
      ++*((_DWORD *)v16 + 6);
    v118 = v114[1];
    v114[1] = v16;
    if (v118)
    {
      if (*((_DWORD *)v118 + 6) == 1)
        (*(void (**)(WebCore::TextTrackCueGeneric *))(*(_QWORD *)v118 + 72))(v118);
      else
        --*((_DWORD *)v118 + 6);
    }
    v119 = *v105;
    if (*v105)
      v120 = *(_DWORD *)(v119 - 12) + 1;
    else
      v120 = 1;
    *(_DWORD *)(v119 - 12) = v120;
    v121 = *v105;
    if (*v105)
      v122 = *(_DWORD *)(v121 - 12);
    else
      v122 = 0;
    v123 = (*(_DWORD *)(v121 - 16) + v122);
    v124 = *(unsigned int *)(v121 - 4);
    if (v124 > 0x400)
    {
      if (v124 > 2 * v123)
        goto LABEL_238;
    }
    else
    {
      if (3 * v124 > 4 * v123)
        goto LABEL_238;
      if (!(_DWORD)v124)
      {
        v125 = 8;
        goto LABEL_237;
      }
    }
    v125 = (_DWORD)v124 << (6 * *(_DWORD *)(v121 - 12) >= (2 * v124));
LABEL_237:
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::InbandGenericCueIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::InbandGenericCueIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::TextTrackCueGeneric,WTF::RawPtrTraits<WebCore::TextTrackCueGeneric>,WTF::DefaultRefDerefTraits<WebCore::TextTrackCueGeneric>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::InbandGenericCueIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::TextTrackCueGeneric,WTF::RawPtrTraits<WebCore::TextTrackCueGeneric>,WTF::DefaultRefDerefTraits<WebCore::TextTrackCueGeneric>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::InbandGenericCueIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::InbandGenericCueIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::TextTrackCueGeneric,WTF::RawPtrTraits<WebCore::TextTrackCueGeneric>,WTF::DefaultRefDerefTraits<WebCore::TextTrackCueGeneric>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::InbandGenericCueIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::InbandGenericCueIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebCore::TextTrackCueGeneric,WTF::RawPtrTraits<WebCore::TextTrackCueGeneric>,WTF::DefaultRefDerefTraits<WebCore::TextTrackCueGeneric>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::InbandGenericCueIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v3 + 38, v125);
    goto LABEL_238;
  }
  v116 = 0;
  v117 = 1;
  while (v115 != v106)
  {
    if (v115 == (WebCore::TextTrackCueGeneric *)-1)
      v116 = v114;
    v113 = (v113 + v117) & v108;
    v114 = (WebCore::TextTrackCueGeneric **)(v107 + 16 * v113);
    v115 = *v114;
    ++v117;
    if (!*v114)
    {
      if (v116)
      {
        *v116 = 0;
        v116[1] = 0;
        --*(_DWORD *)(*v105 - 16);
        v114 = v116;
      }
      goto LABEL_220;
    }
  }
LABEL_238:
  v126 = *v109;
  if (*v109
    || (WTF::HashTable<WebCore::StyleRuleFontFace *,WTF::KeyValuePair<WebCore::StyleRuleFontFace *,WebCore::CSSFontFace *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::StyleRuleFontFace *,WebCore::CSSFontFace *>>,WTF::DefaultHash<WebCore::StyleRuleFontFace *>,WTF::HashMap<WebCore::StyleRuleFontFace *,WebCore::CSSFontFace *,WTF::DefaultHash<WebCore::StyleRuleFontFace *>,WTF::HashTraits<WebCore::StyleRuleFontFace *>,WTF::HashTraits<WebCore::CSSFontFace *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::StyleRuleFontFace *>>::rehash(v3 + 37, 8u), (v126 = *v109) != 0))
  {
    v127 = *(_DWORD *)(v126 - 8);
  }
  else
  {
    v127 = 0;
  }
  v128 = ((unint64_t)v16 + ~((_QWORD)v16 << 32)) ^ (((unint64_t)v16 + ~((_QWORD)v16 << 32)) >> 22);
  v129 = 9 * ((v128 + ~(v128 << 13)) ^ ((v128 + ~(v128 << 13)) >> 8));
  v130 = (v129 ^ (v129 >> 15)) + ~((v129 ^ (v129 >> 15)) << 27);
  v131 = v127 & ((v130 >> 31) ^ v130);
  v132 = (WebCore::TextTrackCueGeneric **)(v126 + 16 * v131);
  v133 = *v132;
  if (*v132)
  {
    v134 = 0;
    v135 = 1;
    while (v133 != v16)
    {
      if (v133 == (WebCore::TextTrackCueGeneric *)-1)
        v134 = v132;
      v131 = (v131 + v135) & v127;
      v132 = (WebCore::TextTrackCueGeneric **)(v126 + 16 * v131);
      v133 = *v132;
      ++v135;
      if (!*v132)
      {
        if (v134)
        {
          *v134 = 0;
          v134[1] = 0;
          --*(_DWORD *)(*v109 - 16);
          v132 = v134;
        }
        goto LABEL_249;
      }
    }
    goto LABEL_262;
  }
LABEL_249:
  *v132 = v16;
  v132[1] = v106;
  v136 = *v109;
  if (*v109)
    v137 = *(_DWORD *)(v136 - 12) + 1;
  else
    v137 = 1;
  *(_DWORD *)(v136 - 12) = v137;
  v138 = *v109;
  if (*v109)
    v139 = *(_DWORD *)(v138 - 12);
  else
    v139 = 0;
  v140 = (*(_DWORD *)(v138 - 16) + v139);
  v141 = *(unsigned int *)(v138 - 4);
  if (v141 > 0x400)
  {
    if (v141 > 2 * v140)
      goto LABEL_262;
    goto LABEL_258;
  }
  if (3 * v141 <= 4 * v140)
  {
    if (!(_DWORD)v141)
    {
      v142 = 8;
      goto LABEL_261;
    }
LABEL_258:
    v142 = (_DWORD)v141 << (6 * *(_DWORD *)(v138 - 12) >= (2 * v141));
LABEL_261:
    WTF::HashTable<WebCore::StyleRuleFontFace *,WTF::KeyValuePair<WebCore::StyleRuleFontFace *,WebCore::CSSFontFace *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::StyleRuleFontFace *,WebCore::CSSFontFace *>>,WTF::DefaultHash<WebCore::StyleRuleFontFace *>,WTF::HashMap<WebCore::StyleRuleFontFace *,WebCore::CSSFontFace *,WTF::DefaultHash<WebCore::StyleRuleFontFace *>,WTF::HashTraits<WebCore::StyleRuleFontFace *>,WTF::HashTraits<WebCore::CSSFontFace *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::StyleRuleFontFace *>>::rehash(v3 + 37, v142);
  }
LABEL_262:
  v16 = v152;
LABEL_263:
  *(_QWORD *)buf = v16;
  WebCore::TextTrack::addCue((uint64_t)v3, (uint64_t *)buf, (uint64_t)v146);
  if (v148)
  {
    v144 = v147;
    v147 = 0;
    if (v144)
    {
      if (*(_DWORD *)v144 == 2)
        WTF::StringImpl::destroy(v144, v143);
      else
        *(_DWORD *)v144 -= 2;
    }
  }
  this = *(uint64_t **)buf;
  *(_QWORD *)buf = 0;
  if (this)
  {
    if (*((_DWORD *)this + 6) == 1)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*this + 72))(this);
    else
      --*((_DWORD *)this + 6);
  }
  return this;
}

const char *WebCore::InbandGenericTextTrack::logClassName(WebCore::InbandGenericTextTrack *this)
{
  return "InbandGenericTextTrack";
}

uint64_t *`non-virtual thunk to'WebCore::InbandGenericTextTrack::addGenericCue(WebCore::InbandGenericTextTrack *this, WebCore::InbandGenericCue *a2)
{
  return WebCore::InbandGenericTextTrack::addGenericCue((uint64_t *)this - 33, a2);
}

_QWORD *WebCore::InbandGenericTextTrack::updateGenericCue(_QWORD *this, WebCore::InbandGenericCue *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  WebCore::TextTrackCueGeneric *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  _QWORD *v23;
  _DWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v32;
  unsigned int v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;

  v2 = this[38];
  if (v2)
  {
    v4 = this;
    v5 = *((_QWORD *)a2 + 1);
    v6 = *(_DWORD *)(v2 - 8);
    v7 = (v5 + ~(v5 << 32)) ^ ((unint64_t)(v5 + ~(v5 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(_QWORD *)(v2 + 16 * v10);
    if (v11 == v5)
    {
LABEL_6:
      v13 = *(WebCore::TextTrackCueGeneric **)(v2 + 16 * v10 + 8);
      if (v13)
      {
        ++*((_DWORD *)v13 + 6);
        this = (_QWORD *)WebCore::InbandGenericTextTrack::updateCueFromCueData((WebCore::InbandGenericTextTrack *)this, v13, a2);
        if (*((_BYTE *)a2 + 138) == 2)
        {
          this = v4 + 38;
          v14 = v4[38];
          if (v14)
          {
            v15 = *((_QWORD *)a2 + 1);
            v16 = *(_DWORD *)(v14 - 8);
            v17 = (v15 + ~(v15 << 32)) ^ ((unint64_t)(v15 + ~(v15 << 32)) >> 22);
            v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
            v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
            v20 = v16 & ((v19 >> 31) ^ v19);
            v21 = *(_QWORD *)(v14 + 16 * v20);
            if (v21 != v15)
            {
              v22 = 1;
              while (v21)
              {
                v20 = ((_DWORD)v20 + v22) & v16;
                v21 = *(_QWORD *)(v14 + 16 * v20);
                ++v22;
                if (v21 == v15)
                  goto LABEL_15;
              }
              v20 = *(unsigned int *)(v14 - 4);
            }
LABEL_15:
            if (v20 != *(_DWORD *)(v14 - 4))
            {
              v23 = (_QWORD *)(v14 + 16 * v20);
              v24 = (_DWORD *)v23[1];
              v23[1] = 0;
              v25 = (_QWORD *)*this;
              if (!*this || (v25 += 2 * *((unsigned int *)v25 - 1), v25 != v23))
              {
                if (v25 != v23)
                {
                  *v23 = -1;
                  v23[1] = 0;
                  ++*(_DWORD *)(*this - 16);
                  v26 = *this;
                  v27 = *this ? *(_DWORD *)(v26 - 12) - 1 : -1;
                  *(_DWORD *)(v26 - 12) = v27;
                  v28 = *this;
                  if (*this)
                  {
                    v29 = 6 * *(_DWORD *)(v28 - 12);
                    v30 = *(_DWORD *)(v28 - 4);
                    if (v29 < v30 && v30 >= 9)
                      this = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::InbandGenericCueIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::InbandGenericCueIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::TextTrackCueGeneric,WTF::RawPtrTraits<WebCore::TextTrackCueGeneric>,WTF::DefaultRefDerefTraits<WebCore::TextTrackCueGeneric>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::InbandGenericCueIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::TextTrackCueGeneric,WTF::RawPtrTraits<WebCore::TextTrackCueGeneric>,WTF::DefaultRefDerefTraits<WebCore::TextTrackCueGeneric>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::InbandGenericCueIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::InbandGenericCueIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::TextTrackCueGeneric,WTF::RawPtrTraits<WebCore::TextTrackCueGeneric>,WTF::DefaultRefDerefTraits<WebCore::TextTrackCueGeneric>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::InbandGenericCueIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::InbandGenericCueIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebCore::TextTrackCueGeneric,WTF::RawPtrTraits<WebCore::TextTrackCueGeneric>,WTF::DefaultRefDerefTraits<WebCore::TextTrackCueGeneric>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::InbandGenericCueIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(this, v30 >> 1);
                  }
                }
              }
              if (v24)
              {
                this = v4 + 37;
                v32 = v4[37];
                if (v32)
                {
                  v33 = *(_DWORD *)(v32 - 8);
                  v34 = ((unint64_t)v24 + ~((_QWORD)v24 << 32)) ^ (((unint64_t)v24 + ~((_QWORD)v24 << 32)) >> 22);
                  v35 = 9 * ((v34 + ~(v34 << 13)) ^ ((v34 + ~(v34 << 13)) >> 8));
                  v36 = (v35 ^ (v35 >> 15)) + ~((v35 ^ (v35 >> 15)) << 27);
                  v37 = v33 & ((v36 >> 31) ^ v36);
                  v38 = *(_DWORD **)(v32 + 16 * v37);
                  if (v38 != v24)
                  {
                    v39 = 1;
                    while (v38)
                    {
                      v37 = ((_DWORD)v37 + v39) & v33;
                      v38 = *(_DWORD **)(v32 + 16 * v37);
                      ++v39;
                      if (v38 == v24)
                        goto LABEL_37;
                    }
                    v37 = *(unsigned int *)(v32 - 4);
                  }
LABEL_37:
                  if (v37 != *(_DWORD *)(v32 - 4))
                  {
                    *(_QWORD *)(v32 + 16 * v37) = -1;
                    ++*(_DWORD *)(*this - 16);
                    v40 = *this;
                    v41 = *this ? *(_DWORD *)(v40 - 12) - 1 : -1;
                    *(_DWORD *)(v40 - 12) = v41;
                    v42 = *this;
                    if (*this)
                    {
                      v43 = 6 * *(_DWORD *)(v42 - 12);
                      v44 = *(_DWORD *)(v42 - 4);
                      if (v43 < v44 && v44 >= 9)
                        this = (_QWORD *)WTF::HashTable<WebCore::StyleRuleFontFace *,WTF::KeyValuePair<WebCore::StyleRuleFontFace *,WebCore::CSSFontFace *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::StyleRuleFontFace *,WebCore::CSSFontFace *>>,WTF::DefaultHash<WebCore::StyleRuleFontFace *>,WTF::HashMap<WebCore::StyleRuleFontFace *,WebCore::CSSFontFace *,WTF::DefaultHash<WebCore::StyleRuleFontFace *>,WTF::HashTraits<WebCore::StyleRuleFontFace *>,WTF::HashTraits<WebCore::CSSFontFace *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::StyleRuleFontFace *>>::rehash(this, v44 >> 1);
                    }
                  }
                }
                if (v24[6] == 1)
                  this = (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v24 + 72))(v24);
                else
                  --v24[6];
              }
            }
          }
        }
        if (*((_DWORD *)v13 + 6) == 1)
          return (_QWORD *)(*(uint64_t (**)(WebCore::TextTrackCueGeneric *))(*(_QWORD *)v13 + 72))(v13);
        else
          --*((_DWORD *)v13 + 6);
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(_QWORD *)(v2 + 16 * v10);
        ++v12;
        if (v11 == v5)
          goto LABEL_6;
      }
    }
  }
  return this;
}

_QWORD *`non-virtual thunk to'WebCore::InbandGenericTextTrack::updateGenericCue(WebCore::InbandGenericTextTrack *this, WebCore::InbandGenericCue *a2)
{
  return WebCore::InbandGenericTextTrack::updateGenericCue((_QWORD *)this - 33, a2);
}

_QWORD *WebCore::InbandGenericTextTrack::removeGenericCue(_QWORD *this, WebCore::InbandGenericCue *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  WebCore::TextTrackCue *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  WTF::JSONImpl::Object *v17;
  _DWORD *v18;
  int v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  NSObject *v27;
  uint64_t v28;
  void *v29;
  char *v30;
  unsigned __int8 *v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v37;
  int v38;
  int v39;
  BOOL v40;
  int v41;
  char v42;
  uint64_t v43;
  int v44;
  unsigned int v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  NSObject *v50;
  uint64_t v51;
  void *v52;
  char *v53;
  unsigned __int8 *v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  WTF::Logger *v62;
  uint64_t v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::Logger *v67;
  uint64_t v68;
  WTF::StringImpl **v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  WTF::JSONImpl::Object *v80;
  WTF::Logger *v81;
  WTF::Logger *v82;
  uint64_t v83;
  uint64_t v84;
  WTF::StringImpl *v85;
  WTF::Logger *v86;
  uint64_t v87;
  WTF::StringImpl **v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  int v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  _BYTE v95[8];
  WTF::StringImpl *v96;
  char v97;
  const char *v98;
  uint64_t v99;
  const char *v100;
  uint64_t v101;
  WTF::Logger *v102;
  uint64_t v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  __int128 buf;
  int v109;
  WTF::StringImpl *v110;
  int v111;
  WTF::StringImpl *v112;
  uint64_t v113;

  v3 = this;
  v113 = *MEMORY[0x1E0C80C00];
  v4 = this[38];
  if (!v4)
    goto LABEL_47;
  v5 = *((_QWORD *)a2 + 1);
  v6 = *(_DWORD *)(v4 - 8);
  v7 = (v5 + ~(v5 << 32)) ^ ((unint64_t)(v5 + ~(v5 << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(_QWORD *)(v4 + 16 * v10);
  if (v11 == v5)
  {
LABEL_6:
    v13 = *(WebCore::TextTrackCue **)(v4 + 16 * v10 + 8);
    if (!v13)
      goto LABEL_47;
    ++*((_DWORD *)v13 + 6);
    v14 = this[11];
    v15 = this[12];
    v98 = "InbandGenericTextTrack";
    v99 = 23;
    v100 = "removeGenericCue";
    v101 = v15;
    if (!*(_BYTE *)(v14 + 12) || (WebCore::LogMedia ? (v16 = byte_1ECE7C490 >= 3u) : (v16 = 0), !v16))
    {
LABEL_174:
      WebCore::TextTrack::removeCue((uint64_t **)v3, v13, (uint64_t)v95);
      if (v97)
        goto LABEL_178;
      this = (_QWORD *)WTF::HashMap<WebCore::TextTrackCue *,WTF::ObjectIdentifierGeneric<WebCore::InbandGenericCueIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WebCore::TextTrackCue *>,WTF::HashTraits<WebCore::TextTrackCue *>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::InbandGenericCueIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::take(v3 + 37, (uint64_t)v13);
      if (this)
        this = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::InbandGenericCueIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::TextTrackCueGeneric,WTF::RawPtrTraits<WebCore::TextTrackCueGeneric>,WTF::DefaultRefDerefTraits<WebCore::TextTrackCueGeneric>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::InbandGenericCueIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::InbandGenericCueIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebCore::TextTrackCueGeneric,WTF::RawPtrTraits<WebCore::TextTrackCueGeneric>,WTF::DefaultRefDerefTraits<WebCore::TextTrackCueGeneric>>>,WTF::HashTableTraits>::remove(v3 + 38, (uint64_t)this);
      if (v97)
      {
LABEL_178:
        this = v96;
        v96 = 0;
        if (this)
        {
          if (*(_DWORD *)this == 2)
            this = (_QWORD *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v94);
          else
            *(_DWORD *)this -= 2;
        }
      }
      if (*((_DWORD *)v13 + 6) == 1)
        return (_QWORD *)(*(uint64_t (**)(WebCore::TextTrackCue *))(*(_QWORD *)v13 + 72))(v13);
      --*((_DWORD *)v13 + 6);
      return this;
    }
    v17 = (WTF::JSONImpl::Object *)WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v98);
    WTF::JSONImpl::Object::create(v17);
    (*(void (**)(WebCore::TextTrackCue *, _QWORD))(*(_QWORD *)v13 + 264))(v13, buf);
    WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)buf);
    v18 = (_DWORD *)buf;
    *(_QWORD *)&buf = 0;
    if (v18)
    {
      if (*v18 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v18;
    }
    if (v106)
    {
      v19 = *((_DWORD *)v106 + 1);
      if (v105)
      {
LABEL_18:
        v20 = *((_DWORD *)v105 + 1);
LABEL_19:
        if ((v20 | v19) < 0 || (v21 = (v19 + v20), __OFADD__(v19, v20)))
        {
          v107 = 0;
          goto LABEL_208;
        }
        if (v106)
        {
          v22 = *((_DWORD *)v106 + 4);
          v23 = (v22 >> 2) & 1;
          if (v105 && (v22 & 4) != 0)
            goto LABEL_24;
        }
        else
        {
          if (v105)
          {
LABEL_24:
            v23 = (*((unsigned __int8 *)v105 + 16) >> 2) & 1;
            goto LABEL_25;
          }
          v23 = 1;
        }
LABEL_25:
        WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v21, v23, (uint64_t)v106, (uint64_t)v105, &v107);
        if (v107)
        {
          v25 = v105;
          v105 = 0;
          if (v25)
          {
            if (*(_DWORD *)v25 == 2)
              WTF::StringImpl::destroy(v25, v24);
            else
              *(_DWORD *)v25 -= 2;
          }
          v26 = v106;
          v106 = 0;
          if (v26)
          {
            if (*(_DWORD *)v26 == 2)
              WTF::StringImpl::destroy(v26, v24);
            else
              *(_DWORD *)v26 -= 2;
          }
          v27 = qword_1ECE7C4A0;
          v28 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)v28)
          {
            WTF::String::utf8();
            v30 = v102 ? (char *)v102 + 16 : 0;
            LODWORD(buf) = 136446210;
            *(_QWORD *)((char *)&buf + 4) = v30;
            _os_log_impl(&dword_1940B8000, v27, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
            v28 = (uint64_t)v102;
            v102 = 0;
            if (v28)
            {
              if (*(_DWORD *)v28 == 1)
                v28 = WTF::fastFree((WTF *)v28, v29);
              else
                --*(_DWORD *)v28;
            }
          }
          if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
          {
            v31 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
            while (1)
            {
              v32 = *v31;
              if ((v32 & 1) != 0)
                break;
              v33 = __ldaxr(v31);
              if (v33 == v32)
              {
                if (!__stxr(v32 | 1, v31))
                {
                  v75 = WTF::Logger::observers((WTF::Logger *)v28);
                  v76 = *(unsigned int *)(v75 + 12);
                  if ((_DWORD)v76)
                  {
                    v77 = *(uint64_t **)v75;
                    v78 = *(_QWORD *)v75 + 8 * v76;
                    do
                    {
                      v79 = *v77;
                      LODWORD(buf) = 0;
                      v80 = (WTF::JSONImpl::Object *)WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v98);
                      v109 = 1;
                      WTF::JSONImpl::Object::create(v80);
                      (*(void (**)(WebCore::TextTrackCue *, WTF::Logger *))(*(_QWORD *)v13 + 264))(v13, v102);
                      WTF::JSONImpl::Value::toJSONString(v102);
                      v81 = v102;
                      v102 = 0;
                      if (v81)
                      {
                        if (*(_DWORD *)v81 == 1)
                          WTF::JSONImpl::Value::operator delete();
                        else
                          --*(_DWORD *)v81;
                      }
                      v102 = 0;
                      v103 = 0;
                      v82 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
                      LODWORD(v103) = 2;
                      v102 = v82;
                      v83 = HIDWORD(v103);
                      *((_DWORD *)v82 + 4 * HIDWORD(v103)) = buf;
                      v84 = *((_QWORD *)&buf + 1);
                      if (*((_QWORD *)&buf + 1))
                        **((_DWORD **)&buf + 1) += 2;
                      *((_QWORD *)v82 + 2 * v83 + 1) = v84;
                      *((_DWORD *)v82 + 4 * (v83 + 1)) = v109;
                      v85 = v110;
                      if (v110)
                        *(_DWORD *)v110 += 2;
                      *((_QWORD *)v82 + 2 * (v83 + 1) + 1) = v85;
                      HIDWORD(v103) = v83 + 2;
                      (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v79 + 16))(v79, &WebCore::LogMedia, 3, &v102);
                      v86 = v102;
                      if (HIDWORD(v103))
                      {
                        v87 = 16 * HIDWORD(v103);
                        v88 = (WTF::StringImpl **)((char *)v102 + 8);
                        do
                        {
                          v89 = *v88;
                          *v88 = 0;
                          if (v89)
                          {
                            if (*(_DWORD *)v89 == 2)
                              WTF::StringImpl::destroy(v89, (WTF::StringImpl *)v29);
                            else
                              *(_DWORD *)v89 -= 2;
                          }
                          v88 += 2;
                          v87 -= 16;
                        }
                        while (v87);
                        v86 = v102;
                      }
                      if (v86)
                      {
                        v102 = 0;
                        LODWORD(v103) = 0;
                        WTF::fastFree(v86, v29);
                      }
                      v90 = v110;
                      v110 = 0;
                      if (v90)
                      {
                        if (*(_DWORD *)v90 == 2)
                          WTF::StringImpl::destroy(v90, (WTF::StringImpl *)v29);
                        else
                          *(_DWORD *)v90 -= 2;
                      }
                      v91 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                      *((_QWORD *)&buf + 1) = 0;
                      if (v91)
                      {
                        if (*(_DWORD *)v91 == 2)
                          WTF::StringImpl::destroy(v91, (WTF::StringImpl *)v29);
                        else
                          *(_DWORD *)v91 -= 2;
                      }
                      ++v77;
                    }
                    while (v77 != (uint64_t *)v78);
                  }
                  v92 = __ldxr(v31);
                  if (v92 == 1)
                  {
                    if (!__stlxr(0, v31))
                      break;
                  }
                  else
                  {
                    __clrex();
                  }
                  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                  break;
                }
              }
              else
              {
                __clrex();
              }
            }
          }
          v93 = v107;
          v107 = 0;
          if (v93)
          {
            if (*(_DWORD *)v93 == 2)
              WTF::StringImpl::destroy(v93, (WTF::StringImpl *)v29);
            else
              *(_DWORD *)v93 -= 2;
          }
          goto LABEL_174;
        }
LABEL_208:
        __break(0xC471u);
        JUMPOUT(0x195D833E0);
      }
    }
    else
    {
      v19 = 0;
      if (v105)
        goto LABEL_18;
    }
    v20 = 0;
    goto LABEL_19;
  }
  v12 = 1;
  while (v11)
  {
    v10 = ((_DWORD)v10 + v12) & v6;
    v11 = *(_QWORD *)(v4 + 16 * v10);
    ++v12;
    if (v11 == v5)
      goto LABEL_6;
  }
LABEL_47:
  v34 = this[11];
  v35 = this[12];
  v98 = "InbandGenericTextTrack";
  v99 = 23;
  v100 = "removeGenericCue";
  v101 = v35;
  if (!*(_BYTE *)(v34 + 12))
    return this;
  if (!WebCore::LogMedia || byte_1ECE7C490 < 3u)
    return this;
  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v98);
  WTF::String::String((WTF::String *)&v105, "UNABLE to find cue: ");
  WebCore::InbandGenericCue::toJSONString(a2);
  if (v106)
  {
    v37 = *((_DWORD *)v106 + 1);
    if (v105)
      goto LABEL_55;
LABEL_196:
    v38 = 0;
    if (v104)
      goto LABEL_56;
LABEL_197:
    v39 = 0;
    goto LABEL_57;
  }
  v37 = 0;
  if (!v105)
    goto LABEL_196;
LABEL_55:
  v38 = *((_DWORD *)v105 + 1);
  if (!v104)
    goto LABEL_197;
LABEL_56:
  v39 = *((_DWORD *)v104 + 1);
LABEL_57:
  if ((v39 | v38) < 0
    || ((v40 = __OFADD__(v38, v39), v41 = v38 + v39, !v40) ? (v42 = 0) : (v42 = 1),
        v37 < 0 || (v42 & 1) != 0 || (v43 = (v37 + v41), __OFADD__(v37, v41))))
  {
    v107 = 0;
    goto LABEL_208;
  }
  if (v106 && (*((_BYTE *)v106 + 16) & 4) == 0)
  {
    v44 = 0;
    goto LABEL_71;
  }
  if (v105)
  {
    v45 = *((_DWORD *)v105 + 4);
    v44 = (v45 >> 2) & 1;
    if (v104 && (v45 & 4) != 0)
      goto LABEL_70;
  }
  else
  {
    if (v104)
    {
LABEL_70:
      v44 = (*((unsigned __int8 *)v104 + 16) >> 2) & 1;
      goto LABEL_71;
    }
    v44 = 1;
  }
LABEL_71:
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v43, v44, v106, (uint64_t)v105, (uint64_t)v104, &v107);
  if (!v107)
    goto LABEL_208;
  v47 = v104;
  v104 = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 2)
      WTF::StringImpl::destroy(v47, v46);
    else
      *(_DWORD *)v47 -= 2;
  }
  v48 = v105;
  v105 = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 2)
      WTF::StringImpl::destroy(v48, v46);
    else
      *(_DWORD *)v48 -= 2;
  }
  v49 = v106;
  v106 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
      WTF::StringImpl::destroy(v49, v46);
    else
      *(_DWORD *)v49 -= 2;
  }
  v50 = qword_1ECE7C4A0;
  v51 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v51)
  {
    WTF::String::utf8();
    v53 = v102 ? (char *)v102 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v53;
    _os_log_impl(&dword_1940B8000, v50, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v51 = (uint64_t)v102;
    v102 = 0;
    if (v51)
    {
      if (*(_DWORD *)v51 == 1)
        v51 = WTF::fastFree((WTF *)v51, v52);
      else
        --*(_DWORD *)v51;
    }
  }
  if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
  {
    v54 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v55 = *v54;
      if ((v55 & 1) != 0)
        break;
      v56 = __ldaxr(v54);
      if (v56 == v55)
      {
        if (!__stxr(v55 | 1, v54))
        {
          v57 = WTF::Logger::observers((WTF::Logger *)v51);
          v58 = *(unsigned int *)(v57 + 12);
          if ((_DWORD)v58)
          {
            v59 = *(uint64_t **)v57;
            v60 = *(_QWORD *)v57 + 8 * v58;
            do
            {
              v61 = *v59;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v98);
              v109 = 0;
              WTF::String::String((WTF::String *)&v110, "UNABLE to find cue: ");
              v111 = 1;
              WebCore::InbandGenericCue::toJSONString(a2);
              v102 = 0;
              v103 = 0;
              v62 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
              LODWORD(v103) = 3;
              v102 = v62;
              v63 = HIDWORD(v103);
              *((_DWORD *)v62 + 4 * HIDWORD(v103)) = buf;
              v64 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v62 + 2 * v63 + 1) = v64;
              *((_DWORD *)v62 + 4 * (v63 + 1)) = v109;
              v65 = v110;
              if (v110)
                *(_DWORD *)v110 += 2;
              *((_QWORD *)v62 + 2 * (v63 + 1) + 1) = v65;
              *((_DWORD *)v62 + 4 * (v63 + 2)) = v111;
              v66 = v112;
              if (v112)
                *(_DWORD *)v112 += 2;
              *((_QWORD *)v62 + 2 * (v63 + 2) + 1) = v66;
              HIDWORD(v103) = v63 + 3;
              (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v61 + 16))(v61, &WebCore::LogMedia, 3, &v102);
              v67 = v102;
              if (HIDWORD(v103))
              {
                v68 = 16 * HIDWORD(v103);
                v69 = (WTF::StringImpl **)((char *)v102 + 8);
                do
                {
                  v70 = *v69;
                  *v69 = 0;
                  if (v70)
                  {
                    if (*(_DWORD *)v70 == 2)
                      WTF::StringImpl::destroy(v70, (WTF::StringImpl *)v52);
                    else
                      *(_DWORD *)v70 -= 2;
                  }
                  v69 += 2;
                  v68 -= 16;
                }
                while (v68);
                v67 = v102;
              }
              if (v67)
              {
                v102 = 0;
                LODWORD(v103) = 0;
                WTF::fastFree(v67, v52);
              }
              v71 = v112;
              v112 = 0;
              if (v71)
              {
                if (*(_DWORD *)v71 == 2)
                  WTF::StringImpl::destroy(v71, (WTF::StringImpl *)v52);
                else
                  *(_DWORD *)v71 -= 2;
              }
              v72 = v110;
              v110 = 0;
              if (v72)
              {
                if (*(_DWORD *)v72 == 2)
                  WTF::StringImpl::destroy(v72, (WTF::StringImpl *)v52);
                else
                  *(_DWORD *)v72 -= 2;
              }
              v73 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v73)
              {
                if (*(_DWORD *)v73 == 2)
                  WTF::StringImpl::destroy(v73, (WTF::StringImpl *)v52);
                else
                  *(_DWORD *)v73 -= 2;
              }
              ++v59;
            }
            while (v59 != (uint64_t *)v60);
          }
          v74 = __ldxr(v54);
          if (v74 == 1)
          {
            if (!__stlxr(0, v54))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  this = v107;
  v107 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      return (_QWORD *)WTF::StringImpl::destroy((WTF::StringImpl *)this, (WTF::StringImpl *)v52);
    else
      *(_DWORD *)this -= 2;
  }
  return this;
}

uint64_t *WebCore::InbandGenericTextTrack::removeCue@<X0>(WebCore::InbandGenericTextTrack *this@<X0>, WebCore::TextTrackCue *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *result;

  result = (uint64_t *)WebCore::TextTrack::removeCue((uint64_t **)this, a2, a3);
  if (!*(_BYTE *)(a3 + 16))
  {
    result = (uint64_t *)WTF::HashMap<WebCore::TextTrackCue *,WTF::ObjectIdentifierGeneric<WebCore::InbandGenericCueIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WebCore::TextTrackCue *>,WTF::HashTraits<WebCore::TextTrackCue *>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::InbandGenericCueIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::take((uint64_t *)this + 37, (uint64_t)a2);
    if (result)
      return WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::InbandGenericCueIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::TextTrackCueGeneric,WTF::RawPtrTraits<WebCore::TextTrackCueGeneric>,WTF::DefaultRefDerefTraits<WebCore::TextTrackCueGeneric>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::InbandGenericCueIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::InbandGenericCueIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebCore::TextTrackCueGeneric,WTF::RawPtrTraits<WebCore::TextTrackCueGeneric>,WTF::DefaultRefDerefTraits<WebCore::TextTrackCueGeneric>>>,WTF::HashTableTraits>::remove((uint64_t *)this + 38, (uint64_t)result);
  }
  return result;
}

_QWORD *`non-virtual thunk to'WebCore::InbandGenericTextTrack::removeGenericCue(WebCore::InbandGenericTextTrack *this, WebCore::InbandGenericCue *a2)
{
  return WebCore::InbandGenericTextTrack::removeGenericCue((_QWORD *)this - 33, a2);
}

uint64_t WebCore::InbandGenericTextTrack::parseWebVTTCueData(uint64_t a1, WebCore::ISOWebVTTCue *a2)
{
  WebCore::WebVTTParser *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WebCore::WebVTTParser *v10;
  WTF *v11;
  void *v12;
  uint64_t result;

  v4 = *(WebCore::WebVTTParser **)(a1 + 312);
  if (v4)
    return (uint64_t)WebCore::WebVTTParser::parseCueData(v4, a2);
  v5 = *(_QWORD *)(a1 + 152);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
      v5 = v6 - 96;
    else
      v5 = 0;
  }
  if (!*(_BYTE *)(v5 + 274))
  {
    v7 = v5 - 192;
    v8 = WTF::fastMalloc((WTF *)0x158);
    v4 = (WebCore::WebVTTParser *)WebCore::WebVTTParser::WebVTTParser(v8, (const char *)(a1 + 288), v7);
    v10 = *(WebCore::WebVTTParser **)(a1 + 312);
    *(_QWORD *)(a1 + 312) = v4;
    if (v10)
    {
      WebCore::WebVTTParser::~WebVTTParser(v10, v9);
      WTF::fastFree(v11, v12);
      v4 = *(WebCore::WebVTTParser **)(a1 + 312);
    }
    return (uint64_t)WebCore::WebVTTParser::parseCueData(v4, a2);
  }
  result = 96;
  __break(0xC471u);
  return result;
}

uint64_t `non-virtual thunk to'WebCore::InbandGenericTextTrack::parseWebVTTCueData(uint64_t a1, WebCore::ISOWebVTTCue *a2)
{
  return WebCore::InbandGenericTextTrack::parseWebVTTCueData(a1 - 264, a2);
}

uint64_t WebCore::InbandGenericTextTrack::parseWebVTTFileHeader(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WebCore::WebVTTParser *v10;
  WTF *v11;
  void *v12;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 312);
  if (v4)
    return WebCore::WebVTTParser::parseFileHeader(v4, a2);
  v5 = *(_QWORD *)(a1 + 152);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
      v5 = v6 - 96;
    else
      v5 = 0;
  }
  if (!*(_BYTE *)(v5 + 274))
  {
    v7 = v5 - 192;
    v8 = WTF::fastMalloc((WTF *)0x158);
    v4 = WebCore::WebVTTParser::WebVTTParser(v8, (const char *)(a1 + 288), v7);
    v10 = *(WebCore::WebVTTParser **)(a1 + 312);
    *(_QWORD *)(a1 + 312) = v4;
    if (v10)
    {
      WebCore::WebVTTParser::~WebVTTParser(v10, v9);
      WTF::fastFree(v11, v12);
      v4 = *(_QWORD *)(a1 + 312);
    }
    return WebCore::WebVTTParser::parseFileHeader(v4, a2);
  }
  result = 96;
  __break(0xC471u);
  return result;
}

uint64_t `non-virtual thunk to'WebCore::InbandGenericTextTrack::parseWebVTTFileHeader(uint64_t a1, WTF::StringImpl *a2)
{
  return WebCore::InbandGenericTextTrack::parseWebVTTFileHeader(a1 - 264, a2);
}

unsigned int *WebCore::InbandGenericTextTrack::newCuesParsed(unsigned int *this, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  WebCore::WebVTTParser *v7;
  WTF *v8;
  void *v9;
  WTF *v10;
  uint64_t v11;
  WTF *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  WTF::MediaTime *v16;
  const WTF::MediaTime *v17;
  WTF::MediaTime *v18;
  const WTF::MediaTime *v19;
  uint64_t v20;
  unint64_t v21;
  _DWORD *v22;
  __int128 v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  double v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  double v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  _DWORD *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int **v44;
  uint64_t v45;
  WTF *v46;
  _BYTE v47[8];
  WTF::StringImpl *v48;
  char v49;
  __int128 v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  double v57[4];

  v2 = *((_QWORD *)this + 19);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if (!*(_BYTE *)(v3 + 178))
      {
        v4 = (uint64_t)this;
        v5 = (_DWORD *)(v3 - 264);
        *(_DWORD *)(v3 - 264) += 2;
        this = (unsigned int *)*((_QWORD *)this + 39);
        if (!this)
        {
          v6 = WTF::fastMalloc((WTF *)0x158);
          this = (unsigned int *)WebCore::WebVTTParser::WebVTTParser(v6, (const char *)(v4 + 288), v3 - 288);
          v7 = *(WebCore::WebVTTParser **)(v4 + 312);
          *(_QWORD *)(v4 + 312) = this;
          if (v7)
          {
            WebCore::WebVTTParser::~WebVTTParser(v7, a2);
            WTF::fastFree(v8, v9);
            this = *(unsigned int **)(v4 + 312);
          }
        }
        v10 = (WTF *)*((_QWORD *)this + 37);
        v11 = this[77];
        *((_QWORD *)this + 37) = 0;
        *((_QWORD *)this + 38) = 0;
        if ((_DWORD)v11)
        {
          v45 = v11;
          v12 = (WTF *)((char *)v10 + 8 * v11);
          v46 = v10;
          while (1)
          {
            v13 = *(_QWORD **)v10;
            v14 = bmalloc::api::isoAllocate();
            v15 = WebCore::VTTCue::VTTCue(v14, v3 - 288, v13);
            v16 = (WTF::MediaTime *)WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)(v15 + 32));
            v50 = *(_OWORD *)(v14 + 64);
            v17 = (const WTF::MediaTime *)WTF::MediaTime::zeroTime(v16);
            v18 = (WTF::MediaTime *)WTF::MediaTime::compare((WTF::MediaTime *)&v50, v17);
            if ((_DWORD)v18 == -1
              || (*(_OWORD *)v57 = *(_OWORD *)(v14 + 80),
                  v19 = (const WTF::MediaTime *)WTF::MediaTime::zeroTime(v18),
                  WTF::MediaTime::compare((WTF::MediaTime *)v57, v19) == -1)
              || (v20 = *(_QWORD *)(v4 + 168)) == 0
              || *(_DWORD *)(v20 + 20) < 2u)
            {
LABEL_18:
              WebCore::TextTrack::matchCue((WTF::MediaTime *)v4, (WebCore::TextTrackCue *)v14, 1, (uint64_t *)&v50);
              v22 = (_DWORD *)v50;
              if (!(_QWORD)v50)
              {
                v38 = *(_QWORD *)(v4 + 88);
                v39 = *(_QWORD *)(v4 + 96);
                *(_QWORD *)&v50 = "InbandGenericTextTrack";
                *((_QWORD *)&v50 + 1) = 23;
                v51 = "newCuesParsed";
                v52 = v39;
                if (*(_BYTE *)(v38 + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 3u)
                  WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::VTTCue>((uint64_t)&WebCore::LogMedia, (WTF::Logger::LogSiteIdentifier *)&v50, v14);
                *(_QWORD *)&v50 = v14;
                WebCore::TextTrack::addCue(v4, (uint64_t *)&v50, (uint64_t)v47);
                if (v49)
                {
                  v40 = v48;
                  v48 = 0;
                  if (v40)
                  {
                    if (*(_DWORD *)v40 == 2)
                      WTF::StringImpl::destroy(v40, a2);
                    else
                      *(_DWORD *)v40 -= 2;
                  }
                }
                v41 = (_DWORD *)v50;
                *(_QWORD *)&v50 = 0;
                if (v41)
                {
                  if (v41[6] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v41 + 72))(v41);
                  else
                    --v41[6];
                }
                goto LABEL_42;
              }
            }
            else
            {
              v21 = 0;
              while (1)
              {
                v22 = *(_DWORD **)(*(_QWORD *)(v20 + 8) + 8 * v21);
                v23 = *(_OWORD *)(v14 + 64);
                v55 = *((_OWORD *)v22 + 4);
                v56 = v23;
                *(_QWORD *)&v57[0] = WTF::MediaTime::operator-();
                v57[1] = v24;
                *(_QWORD *)&v50 = WTF::abs();
                *((_QWORD *)&v50 + 1) = v25;
                v53 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 280) + 96))(*(_QWORD *)(v4 + 280));
                v54 = v26;
                if (WTF::MediaTime::compare((WTF::MediaTime *)&v50, (const WTF::MediaTime *)&v53) != 1)
                {
                  v27 = *(_OWORD *)(v14 + 64);
                  v55 = *((_OWORD *)v22 + 5);
                  v56 = v27;
                  *(_QWORD *)&v57[0] = WTF::MediaTime::operator-();
                  v57[1] = v28;
                  *(_QWORD *)&v50 = WTF::abs();
                  *((_QWORD *)&v50 + 1) = v29;
                  v53 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 280) + 96))(*(_QWORD *)(v4 + 280));
                  v54 = v30;
                  if (WTF::MediaTime::compare((WTF::MediaTime *)&v50, (const WTF::MediaTime *)&v53) == 1)
                    goto LABEL_18;
                  if (((*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)v22 + 256))(v22, v14) & 1) != 0)
                    break;
                }
                ++v21;
                v20 = *(_QWORD *)(v4 + 168);
                if (v21 >= *(unsigned int *)(v20 + 20))
                  goto LABEL_18;
              }
              ++v22[6];
            }
            v50 = *((_OWORD *)v22 + 5);
            WTF::MediaTime::toDouble((WTF::MediaTime *)&v50);
            v32 = v31;
            v50 = *(_OWORD *)(v14 + 80);
            WTF::MediaTime::toDouble((WTF::MediaTime *)&v50);
            v33 = *(_QWORD *)(v4 + 88);
            if (v32 >= v34)
            {
              v42 = *(_QWORD *)(v4 + 96);
              *(_QWORD *)&v50 = "InbandGenericTextTrack";
              *((_QWORD *)&v50 + 1) = 23;
              v51 = "newCuesParsed";
              v52 = v42;
              if (*(_BYTE *)(v33 + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 3u)
                WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [29],WebCore::VTTCue>((uint64_t)&WebCore::LogMedia, (WTF::Logger::LogSiteIdentifier *)&v50, v14);
            }
            else
            {
              v35 = *(_QWORD *)(v4 + 96);
              *(_QWORD *)&v50 = "InbandGenericTextTrack";
              *((_QWORD *)&v50 + 1) = 23;
              v51 = "newCuesParsed";
              v52 = v35;
              *(_OWORD *)v57 = *(_OWORD *)(v14 + 80);
              WTF::MediaTime::toDouble((WTF::MediaTime *)v57);
              v57[0] = v36;
              if (*(_BYTE *)(v33 + 12))
                WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [36],WebCore::TextTrackCue,char [5],double>((uint64_t)&WebCore::LogMedia, (WTF::Logger::LogSiteIdentifier *)&v50, (uint64_t)v22, v57);
              v50 = *(_OWORD *)(v14 + 80);
              WTF::MediaTime::toDouble((WTF::MediaTime *)&v50);
              WebCore::TextTrackCue::setEndTime((WebCore::TextTrackCue *)v22, v37);
            }
            if (v22[6] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v22 + 72))(v22);
            else
              --v22[6];
            if (*(_DWORD *)(v14 + 24) == 1)
              (*(void (**)(uint64_t))(*(_QWORD *)v14 + 72))(v14);
            else
              --*(_DWORD *)(v14 + 24);
LABEL_42:
            v10 = (WTF *)((char *)v10 + 8);
            if (v10 == v12)
            {
              v10 = v46;
              v43 = 8 * v45;
              v44 = (unsigned int **)v46;
              v5 = (_DWORD *)(v3 - 264);
              do
              {
                this = *v44;
                *v44 = 0;
                if (this)
                  this = (unsigned int *)WTF::RefCounted<WebCore::WebVTTCueData>::deref((WTF::StringImpl **)this, a2);
                ++v44;
                v43 -= 8;
              }
              while (v43);
              break;
            }
          }
        }
        if (v10)
          this = (unsigned int *)WTF::fastFree(v10, a2);
        if (*v5 == 2)
        {
          if ((*(_WORD *)(v3 - 258) & 0x400) == 0)
            return WebCore::Node::removedLastRef((WebCore::Node *)(v3 - 288), a2);
        }
        else
        {
          *v5 -= 2;
        }
      }
    }
  }
  return this;
}

unsigned int *`non-virtual thunk to'WebCore::InbandGenericTextTrack::newCuesParsed(WebCore::InbandGenericTextTrack *this, WTF::StringImpl *a2)
{
  return WebCore::InbandGenericTextTrack::newCuesParsed((unsigned int *)this - 72, a2);
}

uint64_t WebCore::InbandGenericTextTrack::newRegionsParsed(WebCore::InbandGenericTextTrack *this, WTF::StringImpl *a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::WebVTTParser *v8;
  WTF *v9;
  void *v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char **v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t *v22;
  WTF *v23;
  void *v24;

  result = *((_QWORD *)this + 39);
  if (!result)
  {
    v4 = *((_QWORD *)this + 19);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
        v4 = v5 - 96;
      else
        v4 = 0;
    }
    if (*(_BYTE *)(v4 + 274))
    {
      result = 96;
      __break(0xC471u);
      return result;
    }
    v6 = v4 - 192;
    v7 = WTF::fastMalloc((WTF *)0x158);
    result = WebCore::WebVTTParser::WebVTTParser(v7, (const char *)this + 288, v6);
    v8 = (WebCore::WebVTTParser *)*((_QWORD *)this + 39);
    *((_QWORD *)this + 39) = result;
    if (v8)
    {
      WebCore::WebVTTParser::~WebVTTParser(v8, a2);
      WTF::fastFree(v9, v10);
      result = *((_QWORD *)this + 39);
    }
  }
  v11 = *(WTF **)(result + 312);
  v12 = *(unsigned int *)(result + 324);
  *(_QWORD *)(result + 312) = 0;
  *(_QWORD *)(result + 320) = 0;
  if ((_DWORD)v12)
  {
    v13 = 8 * v12;
    v14 = 8 * v12;
    v15 = (unint64_t)v11;
    do
    {
      v16 = WebCore::TextTrack::ensureVTTRegionList(this);
      v17 = (char **)(v16 + 8);
      v18 = *(unsigned int *)(v16 + 20);
      if ((_DWORD)v18 == *(_DWORD *)(v16 + 16))
      {
        v19 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v17, v18 + 1, v15);
        v18 = *(unsigned int *)(v16 + 20);
        v20 = (char *)(*(_QWORD *)(v16 + 8) + 8 * v18);
      }
      else
      {
        v20 = &(*v17)[8 * v18];
        v19 = (char *)v15;
      }
      v21 = *(_QWORD *)v19;
      *(_QWORD *)v19 = 0;
      *(_QWORD *)v20 = v21;
      *(_DWORD *)(v16 + 20) = v18 + 1;
      v15 += 8;
      v14 -= 8;
    }
    while (v14);
    v22 = (uint64_t *)v11;
    do
    {
      result = *v22;
      *v22 = 0;
      if (result)
      {
        if (*(_DWORD *)(result + 16) == 1)
        {
          WebCore::VTTRegion::~VTTRegion((WebCore::VTTRegion *)result);
          result = WTF::fastFree(v23, v24);
        }
        else
        {
          --*(_DWORD *)(result + 16);
        }
      }
      ++v22;
      v13 -= 8;
    }
    while (v13);
  }
  if (v11)
    return WTF::fastFree(v11, a2);
  return result;
}

uint64_t `non-virtual thunk to'WebCore::InbandGenericTextTrack::newRegionsParsed(WebCore::InbandGenericTextTrack *this, WTF::StringImpl *a2)
{
  return WebCore::InbandGenericTextTrack::newRegionsParsed((WebCore::InbandGenericTextTrack *)((char *)this - 288), a2);
}

uint64_t WebCore::InbandGenericTextTrack::newStyleSheetsParsed(WebCore::InbandGenericTextTrack *this, WTF::StringImpl *a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::WebVTTParser *v8;
  WTF *v9;
  void *v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  WTF::StringImpl **v15;
  uint64_t v16;
  WTF::StringImpl *v17;

  result = *((_QWORD *)this + 39);
  if (!result)
  {
    v4 = *((_QWORD *)this + 19);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
        v4 = v5 - 96;
      else
        v4 = 0;
    }
    if (*(_BYTE *)(v4 + 274))
    {
      result = 96;
      __break(0xC471u);
      return result;
    }
    v6 = v4 - 192;
    v7 = WTF::fastMalloc((WTF *)0x158);
    result = WebCore::WebVTTParser::WebVTTParser(v7, (const char *)this + 288, v6);
    v8 = (WebCore::WebVTTParser *)*((_QWORD *)this + 39);
    *((_QWORD *)this + 39) = result;
    if (v8)
    {
      WebCore::WebVTTParser::~WebVTTParser(v8, a2);
      WTF::fastFree(v9, v10);
      result = *((_QWORD *)this + 39);
    }
  }
  v11 = *(_QWORD *)(result + 328);
  v12 = *(_DWORD *)(result + 336);
  v13 = *(_DWORD *)(result + 340);
  *(_QWORD *)(result + 328) = 0;
  *(_QWORD *)(result + 336) = 0;
  if (*((_BYTE *)this + 192))
  {
    v14 = *((unsigned int *)this + 47);
    if ((_DWORD)v14)
    {
      v15 = (WTF::StringImpl **)*((_QWORD *)this + 22);
      v16 = 8 * v14;
      do
      {
        v17 = *v15;
        *v15 = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2)
            WTF::StringImpl::destroy(v17, a2);
          else
            *(_DWORD *)v17 -= 2;
        }
        ++v15;
        v16 -= 8;
      }
      while (v16);
    }
    result = *((_QWORD *)this + 22);
    if (result)
    {
      *((_QWORD *)this + 22) = 0;
      *((_DWORD *)this + 46) = 0;
      result = WTF::fastFree((WTF *)result, a2);
    }
    *((_QWORD *)this + 22) = v11;
    *((_DWORD *)this + 46) = v12;
    *((_DWORD *)this + 47) = v13;
  }
  else
  {
    *((_QWORD *)this + 22) = v11;
    *((_DWORD *)this + 46) = v12;
    *((_DWORD *)this + 47) = v13;
    *((_BYTE *)this + 192) = 1;
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::InbandGenericTextTrack::newStyleSheetsParsed(WebCore::InbandGenericTextTrack *this, WTF::StringImpl *a2)
{
  return WebCore::InbandGenericTextTrack::newStyleSheetsParsed((WebCore::InbandGenericTextTrack *)((char *)this - 288), a2);
}

uint64_t WebCore::InbandGenericTextTrack::fileFailedToParse(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[4];

  v1 = *(_QWORD *)(this + 88);
  v2 = *(_QWORD *)(this + 96);
  v3[0] = "InbandGenericTextTrack";
  v3[1] = 23;
  v3[2] = "fileFailedToParse";
  v3[3] = v2;
  if (*(_BYTE *)(v1 + 12))
    return WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 1, (WTF::Logger::LogSiteIdentifier *)v3);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::InbandGenericTextTrack::fileFailedToParse(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[4];

  v1 = *(_QWORD *)(this - 200);
  v2 = *(_QWORD *)(this - 192);
  v3[0] = "InbandGenericTextTrack";
  v3[1] = 23;
  v3[2] = "fileFailedToParse";
  v3[3] = v2;
  if (*(_BYTE *)(v1 + 12))
    return WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 1, (WTF::Logger::LogSiteIdentifier *)v3);
  return this;
}

_QWORD *WebCore::InbandTextTrack::create@<X0>(WebCore::InbandTextTrack *this@<X0>, WebCore::ScriptExecutionContext *a2@<X1>, WebCore::InbandTextTrack **a3@<X8>)
{
  int v7;
  WebCore::InbandTextTrack *v8;
  WebCore::InbandTextTrack *v9;
  _QWORD *v10;
  WebCore::InbandTextTrack *v11;
  WebCore::InbandTextTrack *v12;
  WebCore::InbandTextTrack *v13;
  _QWORD *result;

  v7 = *((unsigned __int8 *)a2 + 48);
  if (v7 == 2)
  {
    v8 = (WebCore::InbandTextTrack *)bmalloc::api::isoAllocate();
    v11 = WebCore::InbandTextTrack::InbandTextTrack(v8, this, a2);
    *(_QWORD *)v11 = &off_1E33EAF60;
    *((_QWORD *)v11 + 3) = &unk_1E33EB110;
    *((_QWORD *)v11 + 18) = &unk_1E33EB1C8;
    v10 = (_QWORD *)((char *)v11 + 144);
    *((_QWORD *)v11 + 15) = &unk_1E33EB150;
    *((_QWORD *)v11 + 33) = &unk_1E33EB220;
    *((_QWORD *)v11 + 36) = &unk_1E33EB2B8;
    *((_QWORD *)v11 + 37) = 0;
  }
  else if (v7 == 1)
  {
    v8 = (WebCore::InbandTextTrack *)bmalloc::api::isoAllocate();
    v12 = WebCore::InbandTextTrack::InbandTextTrack(v8, this, a2);
    *(_QWORD *)v12 = &off_1E33EABC8;
    *((_QWORD *)v12 + 3) = &unk_1E33EAD78;
    *((_QWORD *)v12 + 15) = &unk_1E33EADB8;
    *((_QWORD *)v12 + 18) = &unk_1E33EAE30;
    v10 = (_QWORD *)((char *)v12 + 144);
    *((_QWORD *)v12 + 33) = &unk_1E33EAE88;
    *((_QWORD *)v12 + 36) = &unk_1E33EAF20;
    *((_QWORD *)v12 + 37) = 0;
    *((_QWORD *)v12 + 38) = 0;
    *((_QWORD *)v12 + 39) = 0;
  }
  else if (*((_BYTE *)a2 + 48))
  {
    v8 = (WebCore::InbandTextTrack *)bmalloc::api::isoAllocate();
    v13 = WebCore::InbandTextTrack::InbandTextTrack(v8, this, a2);
    *(_QWORD *)v13 = &off_1E33EA890;
    *((_QWORD *)v13 + 3) = &unk_1E33EAA20;
    *((_QWORD *)v13 + 15) = &unk_1E33EAA60;
    *((_QWORD *)v13 + 18) = &unk_1E33EAAD8;
    v10 = (_QWORD *)((char *)v13 + 144);
    *((_QWORD *)v13 + 33) = &unk_1E33EAB30;
    *((_QWORD *)v13 + 36) = 0;
    *((_QWORD *)v13 + 37) = 0;
    WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v13 + 18);
  }
  else
  {
    v8 = (WebCore::InbandTextTrack *)bmalloc::api::isoAllocate();
    v9 = WebCore::InbandTextTrack::InbandTextTrack(v8, this, a2);
    *(_QWORD *)v9 = &off_1E33EA890;
    *((_QWORD *)v9 + 3) = &unk_1E33EAA20;
    *((_QWORD *)v9 + 15) = &unk_1E33EAA60;
    *((_QWORD *)v9 + 18) = &unk_1E33EAAD8;
    v10 = (_QWORD *)((char *)v9 + 144);
    *((_QWORD *)v9 + 33) = &unk_1E33EAB30;
    *((_QWORD *)v9 + 36) = 0;
    *((_QWORD *)v9 + 37) = 0;
  }
  result = WebCore::ActiveDOMObject::suspendIfNeeded(v10);
  *a3 = v8;
  return result;
}

WebCore::InbandTextTrack *WebCore::InbandTextTrack::InbandTextTrack(WebCore::InbandTextTrack *this, WebCore::ScriptExecutionContext *a2, WebCore::InbandTextTrackPrivate *a3)
{
  WebCore::InbandTextTrackPrivate *v3;
  WTF::AtomString *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27[2];
  __int128 v28;
  uint64_t v29;

  v3 = a3;
  v29 = *MEMORY[0x1E0C80C00];
  v6 = (WTF::AtomString *)(*(uint64_t (**)(WebCore::InbandTextTrackPrivate *))(*(_QWORD *)a3 + 48))(a3);
  (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::InbandTextTrackPrivate *))(*(_QWORD *)v3 + 56))(v27, v3);
  (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::InbandTextTrackPrivate *))(*(_QWORD *)v3 + 64))(&v26, v3);
  WebCore::TextTrack::TextTrack((uint64_t)this, a2, MEMORY[0x1E0CBF3B8], v6, (_DWORD **)v27, (_DWORD **)&v26, 2);
  v8 = v26;
  v26 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = v27[0];
  v27[0] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  *(_QWORD *)this = &off_1E33EA2C8;
  *((_QWORD *)this + 3) = &unk_1E33EA458;
  *((_QWORD *)this + 15) = &unk_1E33EA498;
  *((_QWORD *)this + 18) = &unk_1E33EA510;
  *((_QWORD *)this + 33) = &unk_1E33EA568;
  *((_QWORD *)this + 34) = 0;
  v10 = (unsigned int *)((char *)v3 + 8);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  *((_QWORD *)this + 35) = v3;
  v12 = *((_QWORD *)this + 1);
  if (v12)
  {
    v13 = *(_QWORD *)(v12 + 8);
    if (v13)
    {
      v14 = *(_OWORD *)(v13 + 144);
      *(_OWORD *)v27 = *(_OWORD *)(v13 + 128);
      v28 = v14;
      v15 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x30);
      *(_QWORD *)v15 = off_1E33EBF28;
      *((_OWORD *)v15 + 1) = *(_OWORD *)v27;
      *((_OWORD *)v15 + 2) = v28;
      v26 = v15;
      *((_QWORD *)this + 14) = WebCore::TrackPrivateBase::addClient((uint64_t)v3, (uint64_t *)&v26, (uint64_t)this + 264);
      v16 = v26;
      v26 = 0;
      if (v16)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v16 + 8))(v16);
      v3 = (WebCore::InbandTextTrackPrivate *)*((_QWORD *)this + 35);
    }
  }
  v17 = (*(uint64_t (**)(WebCore::InbandTextTrackPrivate *))(*(_QWORD *)v3 + 136))(v3);
  if (v17 <= 5)
  {
    v18 = *((_DWORD *)this + 57);
    *((_DWORD *)this + 57) = v17;
    if (v18 != v17)
    {
      v19 = *((_QWORD *)this + 11);
      v20 = (WTF::StringImpl *)(*(uint64_t (**)(WebCore::InbandTextTrack *))(*(_QWORD *)this + 264))(this);
      v21 = *((_QWORD *)this + 12);
      v27[0] = v20;
      v27[1] = v22;
      *(_QWORD *)&v28 = "setKind";
      *((_QWORD *)&v28 + 1) = v21;
      if (*(_BYTE *)(v19 + 12))
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::TextTrack::Kind>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v27, (int *)this + 57);
      v23 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v23 = off_1E33EBD08;
      *((_QWORD *)v23 + 1) = this;
      v27[0] = v23;
      WTF::WeakHashSet<WebCore::TextTrackClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)this + 25, v27);
      v24 = v27[0];
      v27[0] = 0;
      if (v24)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v24 + 8))(v24);
    }
  }
  return this;
}

void `non-virtual thunk to'WebCore::InbandTextTrack::~InbandTextTrack(WebCore::InbandTextTrack *this, void *a2)
{
  WebCore::InbandTextTrack::~InbandTextTrack((WebCore::InbandTextTrack *)((char *)this - 24), a2);
}

{
  WebCore::InbandTextTrack::~InbandTextTrack((WebCore::InbandTextTrack *)((char *)this - 120), a2);
}

{
  WebCore::InbandTextTrack::~InbandTextTrack((WebCore::InbandTextTrack *)((char *)this - 144), a2);
}

{
  WebCore::InbandTextTrack::~InbandTextTrack((WebCore::InbandTextTrack *)((char *)this - 264), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::InbandTextTrack::~InbandTextTrack((WebCore::InbandTextTrack *)((char *)this - 24), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::InbandTextTrack::~InbandTextTrack((WebCore::InbandTextTrack *)((char *)this - 120), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::InbandTextTrack::~InbandTextTrack((WebCore::InbandTextTrack *)((char *)this - 144), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::InbandTextTrack::~InbandTextTrack((WebCore::InbandTextTrack *)((char *)this - 264), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t WebCore::InbandTextTrack::setPrivate(uint64_t this, WebCore::InbandTextTrackPrivate *a2)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned __int8 *v8;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(this + 280);
  if ((WebCore::InbandTextTrackPrivate *)v2 == a2)
    return this;
  v4 = this;
  v5 = (unsigned int *)(v2 + 8);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  v7 = *(_DWORD *)(this + 112);
  v8 = (unsigned __int8 *)(v2 + 12);
  if (__ldaxr((unsigned __int8 *)(v2 + 12)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v8))
  {
    goto LABEL_9;
  }
  this = MEMORY[0x19AEA534C](v2 + 12);
LABEL_9:
  if (*(_DWORD *)(v2 + 28) <= v7)
  {
    __break(0xC471u);
    return this;
  }
  v10 = __ldxr(v8);
  if (v10 == 1)
  {
    if (!__stlxr(0, v8))
      goto LABEL_15;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 12));
  do
  {
LABEL_15:
    v11 = __ldaxr(v5);
    v12 = v11 - 1;
  }
  while (__stlxr(v12, v5));
  if (!v12)
  {
    atomic_store(1u, (unsigned int *)(v2 + 8));
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  v13 = (unsigned int *)((char *)a2 + 8);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 + 1, v13));
  v15 = *(unsigned int **)(v4 + 280);
  *(_QWORD *)(v4 + 280) = a2;
  if (v15)
  {
    v16 = v15 + 2;
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      atomic_store(1u, v15 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 8))(v15);
    }
  }
  v19 = *(_QWORD *)(v4 + 8);
  if (v19)
  {
    v20 = *(_QWORD *)(v19 + 8);
    if (v20)
    {
      v21 = *(_OWORD *)(v20 + 144);
      v36 = *(_OWORD *)(v20 + 128);
      v37 = v21;
      v22 = WTF::fastMalloc((WTF *)0x30);
      *(_QWORD *)v22 = off_1E33EBF28;
      *(_OWORD *)(v22 + 16) = v36;
      *(_OWORD *)(v22 + 32) = v37;
      v35 = v22;
      *(_QWORD *)(v4 + 112) = WebCore::TrackPrivateBase::addClient((uint64_t)a2, &v35, v4 + 264);
      v23 = v35;
      v35 = 0;
      if (v23)
        (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
    }
  }
  v24 = *(_DWORD *)(v4 + 224);
  if (v24 == 2)
    v25 = 2;
  else
    v25 = v24 == 1;
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v4 + 280) + 120))(*(_QWORD *)(v4 + 280), v25);
  v26 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 280) + 136))(*(_QWORD *)(v4 + 280));
  if (v26 <= 5)
  {
    v27 = *(_DWORD *)(v4 + 228);
    *(_DWORD *)(v4 + 228) = v26;
    if (v27 != v26)
    {
      v28 = *(_QWORD *)(v4 + 88);
      v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 264))(v4);
      v30 = *(_QWORD *)(v4 + 96);
      *(_QWORD *)&v36 = v29;
      *((_QWORD *)&v36 + 1) = v31;
      *(_QWORD *)&v37 = "setKind";
      *((_QWORD *)&v37 + 1) = v30;
      if (*(_BYTE *)(v28 + 12))
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::TextTrack::Kind>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v36, (int *)(v4 + 228));
      v32 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v32 = off_1E33EBD08;
      v32[1] = v4;
      *(_QWORD *)&v36 = v32;
      WTF::WeakHashSet<WebCore::TextTrackClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)(v4 + 200), &v36);
      v33 = v36;
      *(_QWORD *)&v36 = 0;
      if (v33)
        (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    }
  }
  v34 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 280) + 48))(*(_QWORD *)(v4 + 280));
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 88))(v4, v34);
}

uint64_t WebCore::InbandTextTrack::setMode(uint64_t a1, int a2)
{
  uint64_t v4;

  WebCore::TextTrack::setMode(a1, a2);
  if (a2 == 2)
    v4 = 2;
  else
    v4 = a2 == 1;
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 280) + 120))(*(_QWORD *)(a1 + 280), v4);
}

uint64_t WebCore::InbandTextTrack::isClosedCaptions(WebCore::InbandTextTrack *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 35) + 144))(*((_QWORD *)this + 35));
}

uint64_t WebCore::InbandTextTrack::isSDH(WebCore::InbandTextTrack *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 35) + 152))(*((_QWORD *)this + 35));
}

uint64_t WebCore::InbandTextTrack::containsOnlyForcedSubtitles(WebCore::InbandTextTrack *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 35) + 160))(*((_QWORD *)this + 35));
}

uint64_t WebCore::InbandTextTrack::isMainProgramContent(WebCore::InbandTextTrack *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 35) + 168))(*((_QWORD *)this + 35));
}

uint64_t WebCore::InbandTextTrack::isEasyToRead(WebCore::InbandTextTrack *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 35) + 176))(*((_QWORD *)this + 35));
}

uint64_t WebCore::InbandTextTrack::isDefault(WebCore::InbandTextTrack *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 35) + 184))(*((_QWORD *)this + 35));
}

uint64_t WebCore::InbandTextTrack::inBandMetadataTrackDispatchType(WebCore::InbandTextTrack *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 35) + 192))(*((_QWORD *)this + 35));
}

uint64_t WebCore::InbandTextTrack::idChanged(WebCore::InbandTextTrack *this)
{
  return (*(uint64_t (**)(WebCore::InbandTextTrack *))(*(_QWORD *)this + 88))(this);
}

uint64_t `non-virtual thunk to'WebCore::InbandTextTrack::idChanged(WebCore::InbandTextTrack *this)
{
  return (*(uint64_t (**)(char *))(*((_QWORD *)this - 33) + 88))((char *)this - 264);
}

uint64_t WebCore::InbandTextTrack::labelChanged(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
}

uint64_t `non-virtual thunk to'WebCore::InbandTextTrack::labelChanged(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 - 264) + 96))(a1 - 264);
}

uint64_t WebCore::InbandTextTrack::languageChanged(uint64_t **this, const WTF::AtomString *a2)
{
  _QWORD *v3;
  uint64_t result;
  uint64_t v5;

  WebCore::TrackBase::setLanguage((WebCore::TrackBase *)this, a2);
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = off_1E33EBE48;
  v3[1] = this;
  v5 = (uint64_t)v3;
  WTF::WeakHashSet<WebCore::TextTrackClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(this + 25, &v5);
  result = v5;
  v5 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t `non-virtual thunk to'WebCore::InbandTextTrack::languageChanged(uint64_t **this, const WTF::AtomString *a2)
{
  uint64_t **v3;
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;

  v3 = this - 33;
  WebCore::TrackBase::setLanguage((WebCore::TrackBase *)(this - 33), a2);
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = off_1E33EBE48;
  v4[1] = v3;
  v6 = (uint64_t)v4;
  WTF::WeakHashSet<WebCore::TextTrackClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(this - 8, &v6);
  result = v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::InbandTextTrack::willRemove(WebCore::InbandTextTrack *this)
{
  uint64_t **v2;
  _QWORD *v3;
  uint64_t result;
  uint64_t v5;

  v2 = (uint64_t **)((char *)this + 200);
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = off_1E33EB328;
  v3[1] = this;
  v5 = (uint64_t)v3;
  WTF::WeakHashSet<WebCore::TextTrackClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v2, &v5);
  result = v5;
  v5 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

unsigned int *WTF::WeakHashSet<WebCore::TextTrackClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(uint64_t **a1, _QWORD *a2)
{
  unsigned int *result;
  void *v5;
  WTF *v6;
  WTF *v7;
  unsigned int *v8;
  uint64_t *v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  int i;
  uint64_t v16;
  WTF *v17;
  unsigned int v18;
  unsigned int v19;
  WTF *v20;
  uint64_t v21;

  v20 = 0;
  v21 = 0;
  result = (unsigned int *)WTF::Mapper<WTF::WeakHashSet<WebCore::TextTrackClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(WTF::Function<void ()(WebCore::TextTrackClient&)> const&)::{lambda(WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>> const&)#1},WTF::Vector<WTF::WeakPtr<WebCore::TextTrackClient,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits> &,void>::map((uint64_t)&v20, a1);
  v6 = v20;
  if (HIDWORD(v21))
  {
    v7 = (WTF *)((char *)v20 + 8 * HIDWORD(v21));
    do
    {
      v8 = *(unsigned int **)v6;
      if (*(_QWORD *)v6)
      {
        v5 = (void *)*((_QWORD *)v8 + 1);
        if (v5)
        {
          v9 = *a1;
          if (*a1)
          {
            v10 = *((_DWORD *)v9 - 2);
            v11 = ((unint64_t)v8 + ~((_QWORD)v8 << 32)) ^ (((unint64_t)v8 + ~((_QWORD)v8 << 32)) >> 22);
            v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
            v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
            v14 = v10 & ((v13 >> 31) ^ v13);
            for (i = 1; ; ++i)
            {
              v16 = v9[v14];
              if (v16 != -1)
              {
                if (!v16)
                  goto LABEL_12;
                if ((unsigned int *)v16 == v8)
                  break;
              }
              v14 = (v14 + i) & v10;
            }
            result = (unsigned int *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
          }
        }
      }
LABEL_12:
      v6 = (WTF *)((char *)v6 + 8);
    }
    while (v6 != v7);
    v6 = v20;
    if (HIDWORD(v21))
    {
      v17 = (WTF *)((char *)v20 + 8 * HIDWORD(v21));
      do
      {
        result = *(unsigned int **)v6;
        *(_QWORD *)v6 = 0;
        if (result)
        {
          do
          {
            v18 = __ldaxr(result);
            v19 = v18 - 1;
          }
          while (__stlxr(v19, result));
          if (!v19)
          {
            atomic_store(1u, result);
            result = (unsigned int *)WTF::fastFree((WTF *)result, v5);
          }
        }
        v6 = (WTF *)((char *)v6 + 8);
      }
      while (v6 != v17);
      v6 = v20;
    }
  }
  if (v6)
  {
    v20 = 0;
    LODWORD(v21) = 0;
    return (unsigned int *)WTF::fastFree(v6, v5);
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::InbandTextTrack::willRemove(WebCore::InbandTextTrack *this)
{
  char *v1;
  uint64_t **v2;
  _QWORD *v3;
  uint64_t result;
  uint64_t v5;

  v1 = (char *)this - 264;
  v2 = (uint64_t **)((char *)this - 64);
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = off_1E33EB328;
  v3[1] = v1;
  v5 = (uint64_t)v3;
  WTF::WeakHashSet<WebCore::TextTrackClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v2, &v5);
  result = v5;
  v5 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::InbandTextTrack::startTimeVariance(WebCore::InbandTextTrack *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 35) + 96))(*((_QWORD *)this + 35));
}

uint64_t WebCore::InbandTextTrack::setLogger(WebCore::InbandTextTrack *this, const WTF::Logger *a2, unint64_t a3)
{
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v6 = (unsigned int *)((char *)a2 + 8);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  v8 = (unsigned int *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = a2;
  if (v8)
  {
    v9 = v8 + 2;
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v8 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 8))(v8);
    }
  }
  *((_QWORD *)this + 12) = a3 & 0xFFFFFFFFFFFF0000 | *((unsigned __int16 *)this + 22);
  return (*(uint64_t (**)(_QWORD, const WTF::Logger *))(**((_QWORD **)this + 35) + 112))(*((_QWORD *)this + 35), a2);
}

void WebCore::InbandWebVTTTextTrack::~InbandWebVTTTextTrack(WebCore::InbandWebVTTTextTrack *this, WTF::StringImpl *a2)
{
  WebCore::WebVTTParser *v3;
  WTF *v4;
  void *v5;

  v3 = (WebCore::WebVTTParser *)*((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v3)
  {
    WebCore::WebVTTParser::~WebVTTParser(v3, a2);
    WTF::fastFree(v4, v5);
  }
  WebCore::InbandTextTrack::~InbandTextTrack(this, a2);
}

{
  WebCore::WebVTTParser *v3;
  WTF *v4;
  void *v5;
  bmalloc::api *v6;
  void *v7;

  v3 = (WebCore::WebVTTParser *)*((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v3)
  {
    WebCore::WebVTTParser::~WebVTTParser(v3, a2);
    WTF::fastFree(v4, v5);
  }
  WebCore::InbandTextTrack::~InbandTextTrack(this, a2);
  bmalloc::api::isoDeallocate(v6, v7);
}

void `non-virtual thunk to'WebCore::InbandWebVTTTextTrack::~InbandWebVTTTextTrack(WebCore::InbandWebVTTTextTrack *this, WTF::StringImpl *a2)
{
  WebCore::WebVTTParser *v3;
  WTF *v4;
  void *v5;

  v3 = (WebCore::WebVTTParser *)*((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v3)
  {
    WebCore::WebVTTParser::~WebVTTParser(v3, a2);
    WTF::fastFree(v4, v5);
  }
  WebCore::InbandTextTrack::~InbandTextTrack((WebCore::InbandWebVTTTextTrack *)((char *)this - 24), a2);
}

{
  WebCore::WebVTTParser *v3;
  WTF *v4;
  void *v5;

  v3 = (WebCore::WebVTTParser *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v3)
  {
    WebCore::WebVTTParser::~WebVTTParser(v3, a2);
    WTF::fastFree(v4, v5);
  }
  WebCore::InbandTextTrack::~InbandTextTrack((WebCore::InbandWebVTTTextTrack *)((char *)this - 120), a2);
}

{
  WebCore::WebVTTParser *v3;
  WTF *v4;
  void *v5;

  v3 = (WebCore::WebVTTParser *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v3)
  {
    WebCore::WebVTTParser::~WebVTTParser(v3, a2);
    WTF::fastFree(v4, v5);
  }
  WebCore::InbandTextTrack::~InbandTextTrack((WebCore::InbandWebVTTTextTrack *)((char *)this - 144), a2);
}

{
  WebCore::WebVTTParser *v3;
  WTF *v4;
  void *v5;

  v3 = (WebCore::WebVTTParser *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    WebCore::WebVTTParser::~WebVTTParser(v3, a2);
    WTF::fastFree(v4, v5);
  }
  WebCore::InbandTextTrack::~InbandTextTrack((WebCore::InbandWebVTTTextTrack *)((char *)this - 264), a2);
}

{
  WebCore::WebVTTParser *v3;
  WTF *v4;
  void *v5;

  v3 = (WebCore::WebVTTParser *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    WebCore::WebVTTParser::~WebVTTParser(v3, a2);
    WTF::fastFree(v4, v5);
  }
  WebCore::InbandTextTrack::~InbandTextTrack((WebCore::InbandWebVTTTextTrack *)((char *)this - 288), a2);
}

{
  WebCore::WebVTTParser *v3;
  WTF *v4;
  void *v5;
  bmalloc::api *v6;
  void *v7;

  v3 = (WebCore::WebVTTParser *)*((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v3)
  {
    WebCore::WebVTTParser::~WebVTTParser(v3, a2);
    WTF::fastFree(v4, v5);
  }
  WebCore::InbandTextTrack::~InbandTextTrack((WebCore::InbandWebVTTTextTrack *)((char *)this - 24), a2);
  bmalloc::api::isoDeallocate(v6, v7);
}

{
  WebCore::WebVTTParser *v3;
  WTF *v4;
  void *v5;
  bmalloc::api *v6;
  void *v7;

  v3 = (WebCore::WebVTTParser *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v3)
  {
    WebCore::WebVTTParser::~WebVTTParser(v3, a2);
    WTF::fastFree(v4, v5);
  }
  WebCore::InbandTextTrack::~InbandTextTrack((WebCore::InbandWebVTTTextTrack *)((char *)this - 120), a2);
  bmalloc::api::isoDeallocate(v6, v7);
}

{
  WebCore::WebVTTParser *v3;
  WTF *v4;
  void *v5;
  bmalloc::api *v6;
  void *v7;

  v3 = (WebCore::WebVTTParser *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v3)
  {
    WebCore::WebVTTParser::~WebVTTParser(v3, a2);
    WTF::fastFree(v4, v5);
  }
  WebCore::InbandTextTrack::~InbandTextTrack((WebCore::InbandWebVTTTextTrack *)((char *)this - 144), a2);
  bmalloc::api::isoDeallocate(v6, v7);
}

{
  WebCore::WebVTTParser *v3;
  WTF *v4;
  void *v5;
  bmalloc::api *v6;
  void *v7;

  v3 = (WebCore::WebVTTParser *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    WebCore::WebVTTParser::~WebVTTParser(v3, a2);
    WTF::fastFree(v4, v5);
  }
  WebCore::InbandTextTrack::~InbandTextTrack((WebCore::InbandWebVTTTextTrack *)((char *)this - 264), a2);
  bmalloc::api::isoDeallocate(v6, v7);
}

{
  WebCore::WebVTTParser *v3;
  WTF *v4;
  void *v5;
  bmalloc::api *v6;
  void *v7;

  v3 = (WebCore::WebVTTParser *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    WebCore::WebVTTParser::~WebVTTParser(v3, a2);
    WTF::fastFree(v4, v5);
  }
  WebCore::InbandTextTrack::~InbandTextTrack((WebCore::InbandWebVTTTextTrack *)((char *)this - 288), a2);
  bmalloc::api::isoDeallocate(v6, v7);
}

uint64_t WebCore::InbandWebVTTTextTrack::parseWebVTTCueData(uint64_t a1, const char *a2, size_t a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WebCore::WebVTTParser *v12;
  WTF *v13;
  void *v14;
  uint64_t result;

  v6 = *(uint64_t **)(a1 + 296);
  if (v6)
    return WebCore::WebVTTParser::parseBytes(v6, a2, a3);
  v7 = *(_QWORD *)(a1 + 152);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (v8)
      v7 = v8 - 96;
    else
      v7 = 0;
  }
  if (!*(_BYTE *)(v7 + 274))
  {
    v9 = v7 - 192;
    v10 = WTF::fastMalloc((WTF *)0x158);
    v6 = (uint64_t *)WebCore::WebVTTParser::WebVTTParser(v10, (const char *)(a1 + 288), v9);
    v12 = *(WebCore::WebVTTParser **)(a1 + 296);
    *(_QWORD *)(a1 + 296) = v6;
    if (v12)
    {
      WebCore::WebVTTParser::~WebVTTParser(v12, v11);
      WTF::fastFree(v13, v14);
      v6 = *(uint64_t **)(a1 + 296);
    }
    return WebCore::WebVTTParser::parseBytes(v6, a2, a3);
  }
  result = 96;
  __break(0xC471u);
  return result;
}

uint64_t `non-virtual thunk to'WebCore::InbandWebVTTTextTrack::parseWebVTTCueData(uint64_t a1, const char *a2, size_t a3)
{
  return WebCore::InbandWebVTTTextTrack::parseWebVTTCueData(a1 - 264, a2, a3);
}

uint64_t WebCore::InbandWebVTTTextTrack::parseWebVTTCueData(uint64_t a1, WebCore::ISOWebVTTCue *a2)
{
  WebCore::WebVTTParser *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WebCore::WebVTTParser *v10;
  WTF *v11;
  void *v12;
  uint64_t result;

  v4 = *(WebCore::WebVTTParser **)(a1 + 296);
  if (v4)
    return (uint64_t)WebCore::WebVTTParser::parseCueData(v4, a2);
  v5 = *(_QWORD *)(a1 + 152);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
      v5 = v6 - 96;
    else
      v5 = 0;
  }
  if (!*(_BYTE *)(v5 + 274))
  {
    v7 = v5 - 192;
    v8 = WTF::fastMalloc((WTF *)0x158);
    v4 = (WebCore::WebVTTParser *)WebCore::WebVTTParser::WebVTTParser(v8, (const char *)(a1 + 288), v7);
    v10 = *(WebCore::WebVTTParser **)(a1 + 296);
    *(_QWORD *)(a1 + 296) = v4;
    if (v10)
    {
      WebCore::WebVTTParser::~WebVTTParser(v10, v9);
      WTF::fastFree(v11, v12);
      v4 = *(WebCore::WebVTTParser **)(a1 + 296);
    }
    return (uint64_t)WebCore::WebVTTParser::parseCueData(v4, a2);
  }
  result = 96;
  __break(0xC471u);
  return result;
}

uint64_t `non-virtual thunk to'WebCore::InbandWebVTTTextTrack::parseWebVTTCueData(uint64_t a1, WebCore::ISOWebVTTCue *a2)
{
  return WebCore::InbandWebVTTTextTrack::parseWebVTTCueData(a1 - 264, a2);
}

unsigned int *WebCore::InbandWebVTTTextTrack::newCuesParsed(unsigned int *this, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WebCore::Node *v5;
  _DWORD *v6;
  uint64_t v7;
  WebCore::WebVTTParser *v8;
  WTF *v9;
  void *v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WebCore::TextTrackCue *v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v31;
  _DWORD *v32;
  uint64_t v33;
  WebCore::TextTrackCue *v35;
  unsigned int **v36;
  uint64_t v37;
  _DWORD *v38;
  char v39[8];
  WTF::StringImpl *v40;
  char v41;
  __int128 v42;
  const char *v43;
  uint64_t v44;
  WebCore::TextTrackCue *v45;
  __int128 v46;

  v2 = *((_QWORD *)this + 19);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if (!*(_BYTE *)(v3 + 178))
      {
        v4 = (uint64_t)this;
        v5 = (WebCore::Node *)(v3 - 288);
        v37 = *(_QWORD *)(v2 + 8);
        v6 = (_DWORD *)(v3 - 264);
        *(_DWORD *)(v3 - 264) += 2;
        this = (unsigned int *)*((_QWORD *)this + 37);
        if (!this)
        {
          v7 = WTF::fastMalloc((WTF *)0x158);
          this = (unsigned int *)WebCore::WebVTTParser::WebVTTParser(v7, (const char *)(v4 + 288), (uint64_t)v5);
          v8 = *(WebCore::WebVTTParser **)(v4 + 296);
          *(_QWORD *)(v4 + 296) = this;
          if (v8)
          {
            WebCore::WebVTTParser::~WebVTTParser(v8, a2);
            WTF::fastFree(v9, v10);
            this = *(unsigned int **)(v4 + 296);
          }
        }
        v11 = (WTF *)*((_QWORD *)this + 37);
        v12 = this[77];
        *((_QWORD *)this + 37) = 0;
        *((_QWORD *)this + 38) = 0;
        if ((_DWORD)v12)
        {
          v38 = v6;
          v13 = 8 * v12;
          v14 = 8 * v12;
          v15 = v11;
          while (1)
          {
            v16 = *(_QWORD **)v15;
            v17 = bmalloc::api::isoAllocate();
            v18 = WebCore::VTTCue::VTTCue(v17, (uint64_t)v5, v16);
            WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)(v18 + 32));
            WebCore::TextTrack::matchCue((WTF::MediaTime *)v4, (WebCore::TextTrackCue *)v17, 1, (uint64_t *)&v45);
            if (v45)
            {
              v42 = *((_OWORD *)v45 + 5);
              WTF::MediaTime::toDouble((WTF::MediaTime *)&v42);
              v20 = v19;
              v42 = *(_OWORD *)(v17 + 80);
              WTF::MediaTime::toDouble((WTF::MediaTime *)&v42);
              v21 = *(_QWORD *)(v4 + 88);
              if (v20 >= v22)
              {
                v33 = *(_QWORD *)(v4 + 96);
                *(_QWORD *)&v42 = "InbandWebVTTTextTrack";
                *((_QWORD *)&v42 + 1) = 22;
                v43 = "newCuesParsed";
                v44 = v33;
                if (*(_BYTE *)(v21 + 12))
                {
                  if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
                    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [29],WebCore::VTTCue>((uint64_t)&WebCore::LogMedia, (WTF::Logger::LogSiteIdentifier *)&v42, v17);
                }
              }
              else
              {
                v23 = *(_QWORD *)(v4 + 96);
                *(_QWORD *)&v42 = "InbandWebVTTTextTrack";
                *((_QWORD *)&v42 + 1) = 22;
                v43 = "newCuesParsed";
                v44 = v23;
                v24 = (uint64_t)v45;
                v46 = *(_OWORD *)(v17 + 80);
                WTF::MediaTime::toDouble((WTF::MediaTime *)&v46);
                *(_QWORD *)&v46 = v25;
                if (*(_BYTE *)(v21 + 12))
                  WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [36],WebCore::TextTrackCue,char [5],double>((uint64_t)&WebCore::LogMedia, (WTF::Logger::LogSiteIdentifier *)&v42, v24, (double *)&v46);
                v26 = v45;
                v42 = *(_OWORD *)(v17 + 80);
                WTF::MediaTime::toDouble((WTF::MediaTime *)&v42);
                WebCore::TextTrackCue::setEndTime(v26, v27);
              }
            }
            else
            {
              v28 = *(_QWORD *)(v4 + 88);
              v29 = *(_QWORD *)(v4 + 96);
              *(_QWORD *)&v42 = "InbandWebVTTTextTrack";
              *((_QWORD *)&v42 + 1) = 22;
              v43 = "newCuesParsed";
              v44 = v29;
              if (*(_BYTE *)(v28 + 12))
              {
                if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
                  WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::VTTCue>((uint64_t)&WebCore::LogMedia, (WTF::Logger::LogSiteIdentifier *)&v42, v17);
              }
              *(_QWORD *)&v42 = v17;
              WebCore::TextTrack::addCue(v4, (uint64_t *)&v42, (uint64_t)v39);
              if (v41)
              {
                v31 = v40;
                v40 = 0;
                if (v31)
                {
                  if (*(_DWORD *)v31 == 2)
                    WTF::StringImpl::destroy(v31, a2);
                  else
                    *(_DWORD *)v31 -= 2;
                }
              }
              v32 = (_DWORD *)v42;
              *(_QWORD *)&v42 = 0;
              if (v32)
              {
                if (v32[6] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v32 + 72))(v32);
                else
                  --v32[6];
              }
              v17 = 0;
            }
            v35 = v45;
            v45 = 0;
            if (!v35)
              goto LABEL_39;
            if (*((_DWORD *)v35 + 6) != 1)
              break;
            (*(void (**)(WebCore::TextTrackCue *))(*(_QWORD *)v35 + 72))(v35);
            if (v17)
            {
LABEL_40:
              if (*(_DWORD *)(v17 + 24) == 1)
                (*(void (**)(uint64_t))(*(_QWORD *)v17 + 72))(v17);
              else
                --*(_DWORD *)(v17 + 24);
            }
LABEL_42:
            v15 = (WTF *)((char *)v15 + 8);
            v14 -= 8;
            if (!v14)
            {
              v6 = v38;
              v36 = (unsigned int **)v11;
              do
              {
                this = *v36;
                *v36 = 0;
                if (this)
                  this = (unsigned int *)WTF::RefCounted<WebCore::WebVTTCueData>::deref((WTF::StringImpl **)this, a2);
                ++v36;
                v13 -= 8;
              }
              while (v13);
              goto LABEL_52;
            }
          }
          --*((_DWORD *)v35 + 6);
LABEL_39:
          if (v17)
            goto LABEL_40;
          goto LABEL_42;
        }
LABEL_52:
        if (v11)
          this = (unsigned int *)WTF::fastFree(v11, a2);
        if (*v6 == 2)
        {
          if ((*(_WORD *)(v37 - 258) & 0x400) == 0)
            return WebCore::Node::removedLastRef(v5, a2);
        }
        else
        {
          *v6 -= 2;
        }
      }
    }
  }
  return this;
}

const char *WebCore::InbandWebVTTTextTrack::logClassName(WebCore::InbandWebVTTTextTrack *this)
{
  return "InbandWebVTTTextTrack";
}

unsigned int *`non-virtual thunk to'WebCore::InbandWebVTTTextTrack::newCuesParsed(WebCore::InbandWebVTTTextTrack *this, WTF::StringImpl *a2)
{
  return WebCore::InbandWebVTTTextTrack::newCuesParsed((unsigned int *)this - 72, a2);
}

uint64_t WebCore::InbandWebVTTTextTrack::newRegionsParsed(WebCore::InbandWebVTTTextTrack *this, WTF::StringImpl *a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::WebVTTParser *v8;
  WTF *v9;
  void *v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char **v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t *v22;
  WTF *v23;
  void *v24;

  result = *((_QWORD *)this + 37);
  if (!result)
  {
    v4 = *((_QWORD *)this + 19);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
        v4 = v5 - 96;
      else
        v4 = 0;
    }
    if (*(_BYTE *)(v4 + 274))
    {
      result = 96;
      __break(0xC471u);
      return result;
    }
    v6 = v4 - 192;
    v7 = WTF::fastMalloc((WTF *)0x158);
    result = WebCore::WebVTTParser::WebVTTParser(v7, (const char *)this + 288, v6);
    v8 = (WebCore::WebVTTParser *)*((_QWORD *)this + 37);
    *((_QWORD *)this + 37) = result;
    if (v8)
    {
      WebCore::WebVTTParser::~WebVTTParser(v8, a2);
      WTF::fastFree(v9, v10);
      result = *((_QWORD *)this + 37);
    }
  }
  v11 = *(WTF **)(result + 312);
  v12 = *(unsigned int *)(result + 324);
  *(_QWORD *)(result + 312) = 0;
  *(_QWORD *)(result + 320) = 0;
  if ((_DWORD)v12)
  {
    v13 = 8 * v12;
    v14 = 8 * v12;
    v15 = (unint64_t)v11;
    do
    {
      v16 = WebCore::TextTrack::ensureVTTRegionList(this);
      v17 = (char **)(v16 + 8);
      v18 = *(unsigned int *)(v16 + 20);
      if ((_DWORD)v18 == *(_DWORD *)(v16 + 16))
      {
        v19 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v17, v18 + 1, v15);
        v18 = *(unsigned int *)(v16 + 20);
        v20 = (char *)(*(_QWORD *)(v16 + 8) + 8 * v18);
      }
      else
      {
        v20 = &(*v17)[8 * v18];
        v19 = (char *)v15;
      }
      v21 = *(_QWORD *)v19;
      *(_QWORD *)v19 = 0;
      *(_QWORD *)v20 = v21;
      *(_DWORD *)(v16 + 20) = v18 + 1;
      v15 += 8;
      v14 -= 8;
    }
    while (v14);
    v22 = (uint64_t *)v11;
    do
    {
      result = *v22;
      *v22 = 0;
      if (result)
      {
        if (*(_DWORD *)(result + 16) == 1)
        {
          WebCore::VTTRegion::~VTTRegion((WebCore::VTTRegion *)result);
          result = WTF::fastFree(v23, v24);
        }
        else
        {
          --*(_DWORD *)(result + 16);
        }
      }
      ++v22;
      v13 -= 8;
    }
    while (v13);
  }
  if (v11)
    return WTF::fastFree(v11, a2);
  return result;
}

uint64_t `non-virtual thunk to'WebCore::InbandWebVTTTextTrack::newRegionsParsed(WebCore::InbandWebVTTTextTrack *this, WTF::StringImpl *a2)
{
  return WebCore::InbandWebVTTTextTrack::newRegionsParsed((WebCore::InbandWebVTTTextTrack *)((char *)this - 288), a2);
}

uint64_t WebCore::InbandWebVTTTextTrack::fileFailedToParse(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[4];

  v1 = *(_QWORD *)(this + 88);
  v2 = *(_QWORD *)(this + 96);
  v3[0] = "InbandWebVTTTextTrack";
  v3[1] = 22;
  v3[2] = "fileFailedToParse";
  v3[3] = v2;
  if (*(_BYTE *)(v1 + 12))
    return WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [29]>((uint64_t)&WebCore::LogMedia, 1u, (WTF::Logger::LogSiteIdentifier *)v3, "Error parsing WebVTT stream.");
  return this;
}

uint64_t `non-virtual thunk to'WebCore::InbandWebVTTTextTrack::fileFailedToParse(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[4];

  v1 = *(_QWORD *)(this - 200);
  v2 = *(_QWORD *)(this - 192);
  v3[0] = "InbandWebVTTTextTrack";
  v3[1] = 22;
  v3[2] = "fileFailedToParse";
  v3[3] = v2;
  if (*(_BYTE *)(v1 + 12))
    return WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [29]>((uint64_t)&WebCore::LogMedia, 1u, (WTF::Logger::LogSiteIdentifier *)v3, "Error parsing WebVTT stream.");
  return this;
}

uint64_t WebCore::LoadableTextTrack::scheduleLoad(const WTF::StringImpl **this, const WTF::URL *a2, const WTF::StringImpl *a3)
{
  uint64_t result;
  WTF::StringImpl *v6;
  WTF *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)();

  result = WTF::equal(*(WTF **)a2, this[37], a3);
  if ((result & 1) == 0)
  {
    result = (uint64_t)WebCore::TextTrack::removeAllCues((WTF *)this);
    if (this[35])
    {
      v7 = *(WTF **)a2;
      if (*(_QWORD *)a2)
        *(_DWORD *)v7 += 2;
      result = (uint64_t)this[37];
      this[37] = v7;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
        else
          *(_DWORD *)result -= 2;
      }
      v8 = *(_OWORD *)((char *)a2 + 24);
      *((_OWORD *)this + 19) = *(_OWORD *)((char *)a2 + 8);
      *((_OWORD *)this + 20) = v8;
      if (!*((_BYTE *)this + 336))
      {
        v9 = (uint64_t)this[35];
        v10 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v10 = off_1E33EB370;
        *(_QWORD *)(v10 + 8) = this;
        v11 = (uint64_t (*)())v10;
        WebCore::HTMLTrackElement::scheduleTask(v9, &v11);
        result = (uint64_t)v11;
        if (v11)
          return (*(uint64_t (**)(uint64_t (*)()))(*(_QWORD *)v11 + 8))(v11);
      }
    }
  }
  return result;
}

uint64_t WebCore::LoadableTextTrack::newCuesAvailable(WebCore::LoadableTextTrack *this, WebCore::TextTrackLoader *a2)
{
  uint64_t v3;
  WebCore::TextTrackCueList *v4;
  void *v5;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::VTTCue **v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::VTTCue *v12;
  uint64_t v14;
  _DWORD *v15;
  WTF *v16;
  _DWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t result;
  WTF *v21;
  void *v22;
  uint64_t v23[4];
  WTF *v24;
  unsigned int v25;

  if (!*((_QWORD *)this + 21))
  {
    v3 = WTF::fastMalloc((WTF *)0x20);
    *(_DWORD *)v3 = 1;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 24) = 0;
    *(_QWORD *)(v3 + 8) = 0;
    v4 = (WebCore::TextTrackCueList *)*((_QWORD *)this + 21);
    *((_QWORD *)this + 21) = v3;
    if (v4)
    {
      if (*(_DWORD *)v4 == 1)
      {
        WebCore::TextTrackCueList::~TextTrackCueList(v4, a2);
        WTF::fastFree(v21, v22);
      }
      else
      {
        --*(_DWORD *)v4;
      }
    }
  }
  WebCore::TextTrackLoader::getNewCues(*((WTF::StringImpl ***)this + 36), a2, (uint64_t)&v24);
  v6 = v24;
  if (v25)
  {
    v7 = 8 * v25;
    v8 = v7;
    v9 = (WebCore::VTTCue **)v24;
    do
    {
      WebCore::VTTCue::setTrack(*v9, this);
      v10 = *((_QWORD *)this + 11);
      v11 = *((_QWORD *)this + 12);
      v23[0] = (uint64_t)"LoadableTextTrack";
      v23[1] = 18;
      v23[2] = (uint64_t)"newCuesAvailable";
      v23[3] = v11;
      v12 = *v9;
      if (*(_BYTE *)(v10 + 12))
      {
        if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
        {
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::VTTCue>((uint64_t)&WebCore::LogMedia, (WTF::Logger::LogSiteIdentifier *)v23, (uint64_t)v12);
          v12 = *v9;
        }
      }
      v14 = *((_QWORD *)this + 21);
      *v9 = 0;
      v23[0] = (uint64_t)v12;
      WebCore::TextTrackCueList::add(v14, v23);
      v15 = (_DWORD *)v23[0];
      v23[0] = 0;
      if (v15)
      {
        if (v15[6] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 72))(v15);
        else
          --v15[6];
      }
      ++v9;
      v8 -= 8;
    }
    while (v8);
    v16 = v6;
    do
    {
      v17 = *(_DWORD **)v16;
      *(_QWORD *)v16 = 0;
      if (v17)
      {
        if (v17[6] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 72))(v17);
        else
          --v17[6];
      }
      v16 = (WTF *)((char *)v16 + 8);
      v7 -= 8;
    }
    while (v7);
  }
  if (v6)
    WTF::fastFree(v6, v5);
  v18 = *((_QWORD *)this + 21);
  v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v19 = off_1E33EBEC0;
  v19[1] = this;
  v19[2] = v18;
  v23[0] = (uint64_t)v19;
  WTF::WeakHashSet<WebCore::TextTrackClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)this + 25, v23);
  result = v23[0];
  v23[0] = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

const char *WebCore::LoadableTextTrack::logClassName(WebCore::LoadableTextTrack *this)
{
  return "LoadableTextTrack";
}

uint64_t `non-virtual thunk to'WebCore::LoadableTextTrack::newCuesAvailable(WebCore::LoadableTextTrack *this, WebCore::TextTrackLoader *a2)
{
  return WebCore::LoadableTextTrack::newCuesAvailable((WebCore::LoadableTextTrack *)((char *)this - 264), a2);
}

uint64_t WebCore::LoadableTextTrack::cueLoadingCompleted(WebCore::LoadableTextTrack *this, WebCore::TextTrackLoader *a2, int a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  _QWORD v9[4];

  result = *((_QWORD *)this + 35);
  if (result)
  {
    v6 = *((_QWORD *)this + 11);
    v7 = *((_QWORD *)this + 12);
    v9[0] = "LoadableTextTrack";
    v9[1] = 18;
    v9[2] = "cueLoadingCompleted";
    v9[3] = v7;
    if (*(_BYTE *)(v6 + 12))
    {
      if (WebCore::LogMedia)
        v8 = byte_1ECE7C490 >= 3u;
      else
        v8 = 0;
      if (v8)
      {
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 3, (WTF::Logger::LogSiteIdentifier *)v9);
        result = *((_QWORD *)this + 35);
      }
    }
    return WebCore::HTMLTrackElement::didCompleteLoad(result, a3 ^ 1u);
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::LoadableTextTrack::cueLoadingCompleted(WebCore::LoadableTextTrack *this, WebCore::TextTrackLoader *a2, int a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  _QWORD v9[4];

  result = *((_QWORD *)this + 2);
  if (result)
  {
    v6 = *((_QWORD *)this - 22);
    v7 = *((_QWORD *)this - 21);
    v9[0] = "LoadableTextTrack";
    v9[1] = 18;
    v9[2] = "cueLoadingCompleted";
    v9[3] = v7;
    if (*(_BYTE *)(v6 + 12))
    {
      if (WebCore::LogMedia)
        v8 = byte_1ECE7C490 >= 3u;
      else
        v8 = 0;
      if (v8)
      {
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 3, (WTF::Logger::LogSiteIdentifier *)v9);
        result = *((_QWORD *)this + 2);
      }
    }
    return WebCore::HTMLTrackElement::didCompleteLoad(result, a3 ^ 1u);
  }
  return result;
}

uint64_t WebCore::LoadableTextTrack::newRegionsAvailable(uint64_t this, WebCore::TextTrackLoader *a2)
{
  uint64_t v2;
  WTF *v3;
  uint64_t v4;
  WebCore::TextTrack *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char **v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  WTF *v16;
  void *v17;

  v2 = *(_QWORD *)(*(_QWORD *)(this + 288) + 32);
  if (v2)
  {
    v3 = *(WTF **)(v2 + 312);
    v4 = *(unsigned int *)(v2 + 324);
    *(_QWORD *)(v2 + 312) = 0;
    *(_QWORD *)(v2 + 320) = 0;
    if ((_DWORD)v4)
    {
      v5 = (WebCore::TextTrack *)this;
      v6 = 8 * v4;
      v7 = 8 * v4;
      v8 = (unint64_t)v3;
      do
      {
        v9 = WebCore::TextTrack::ensureVTTRegionList(v5);
        v10 = (char **)(v9 + 8);
        v11 = *(unsigned int *)(v9 + 20);
        if ((_DWORD)v11 == *(_DWORD *)(v9 + 16))
        {
          v12 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v10, v11 + 1, v8);
          v11 = *(unsigned int *)(v9 + 20);
          v13 = (char *)(*(_QWORD *)(v9 + 8) + 8 * v11);
        }
        else
        {
          v13 = &(*v10)[8 * v11];
          v12 = (char *)v8;
        }
        v14 = *(_QWORD *)v12;
        *(_QWORD *)v12 = 0;
        *(_QWORD *)v13 = v14;
        *(_DWORD *)(v9 + 20) = v11 + 1;
        v8 += 8;
        v7 -= 8;
      }
      while (v7);
      v15 = (uint64_t *)v3;
      do
      {
        this = *v15;
        *v15 = 0;
        if (this)
        {
          if (*(_DWORD *)(this + 16) == 1)
          {
            WebCore::VTTRegion::~VTTRegion((WebCore::VTTRegion *)this);
            this = WTF::fastFree(v16, v17);
          }
          else
          {
            --*(_DWORD *)(this + 16);
          }
        }
        ++v15;
        v6 -= 8;
      }
      while (v6);
    }
    if (v3)
      return WTF::fastFree(v3, a2);
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::LoadableTextTrack::newRegionsAvailable(WebCore::LoadableTextTrack *this, WebCore::TextTrackLoader *a2)
{
  return WebCore::LoadableTextTrack::newRegionsAvailable((uint64_t)this - 264, a2);
}

uint64_t WebCore::LoadableTextTrack::newStyleSheetsAvailable(uint64_t this, WebCore::TextTrackLoader *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF::StringImpl *v10;

  v2 = this;
  v3 = *(_QWORD *)(*(_QWORD *)(this + 288) + 32);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 328);
    v5 = *(_DWORD *)(v3 + 336);
    v6 = *(_DWORD *)(v3 + 340);
    *(_QWORD *)(v3 + 328) = 0;
    *(_QWORD *)(v3 + 336) = 0;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
  }
  if (*(_BYTE *)(this + 192))
  {
    v7 = *(unsigned int *)(this + 188);
    if ((_DWORD)v7)
    {
      v8 = *(WTF::StringImpl ***)(this + 176);
      v9 = 8 * v7;
      do
      {
        v10 = *v8;
        *v8 = 0;
        if (v10)
        {
          if (*(_DWORD *)v10 == 2)
            WTF::StringImpl::destroy(v10, a2);
          else
            *(_DWORD *)v10 -= 2;
        }
        ++v8;
        v9 -= 8;
      }
      while (v9);
    }
    this = *(_QWORD *)(v2 + 176);
    if (this)
    {
      *(_QWORD *)(v2 + 176) = 0;
      *(_DWORD *)(v2 + 184) = 0;
      this = WTF::fastFree((WTF *)this, a2);
    }
    *(_QWORD *)(v2 + 176) = v4;
    *(_DWORD *)(v2 + 184) = v5;
    *(_DWORD *)(v2 + 188) = v6;
  }
  else
  {
    *(_QWORD *)(this + 176) = v4;
    *(_DWORD *)(this + 184) = v5;
    *(_DWORD *)(this + 188) = v6;
    *(_BYTE *)(this + 192) = 1;
  }
  return this;
}

_QWORD *`non-virtual thunk to'WebCore::LoadableTextTrack::newStyleSheetsAvailable(_QWORD *this, WebCore::TextTrackLoader *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF::StringImpl *v10;

  v2 = this;
  v3 = *(_QWORD *)(this[3] + 32);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 328);
    v5 = *(_DWORD *)(v3 + 336);
    v6 = *(_DWORD *)(v3 + 340);
    *(_QWORD *)(v3 + 328) = 0;
    *(_QWORD *)(v3 + 336) = 0;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
  }
  if (*((_BYTE *)this - 72))
  {
    v7 = *((unsigned int *)this - 19);
    if ((_DWORD)v7)
    {
      v8 = (WTF::StringImpl **)*(this - 11);
      v9 = 8 * v7;
      do
      {
        v10 = *v8;
        *v8 = 0;
        if (v10)
        {
          if (*(_DWORD *)v10 == 2)
            WTF::StringImpl::destroy(v10, a2);
          else
            *(_DWORD *)v10 -= 2;
        }
        ++v8;
        v9 -= 8;
      }
      while (v9);
    }
    this = (_QWORD *)*(v2 - 11);
    if (this)
    {
      *(v2 - 11) = 0;
      *((_DWORD *)v2 - 20) = 0;
      this = (_QWORD *)WTF::fastFree((WTF *)this, a2);
    }
    *(v2 - 11) = v4;
    *((_DWORD *)v2 - 20) = v5;
    *((_DWORD *)v2 - 19) = v6;
  }
  else
  {
    *(this - 11) = v4;
    *((_DWORD *)this - 20) = v5;
    *((_DWORD *)this - 19) = v6;
    *((_BYTE *)this - 72) = 1;
  }
  return this;
}

uint64_t WebCore::LoadableTextTrack::id@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD **v7;
  uint64_t v8;
  _DWORD *v9;

  v2 = *(_QWORD *)(this + 280);
  if (!v2)
  {
    v7 = (_DWORD **)MEMORY[0x1E0CBF3B8];
    goto LABEL_15;
  }
  v3 = *(_QWORD *)(v2 + 104);
  if (!v3)
    goto LABEL_14;
  v4 = *(_DWORD *)(v3 + 4);
  if ((v4 & 1) == 0)
  {
    v5 = v3 + 32;
    LODWORD(v6) = v4 >> 5;
    if ((_DWORD)v6)
      goto LABEL_5;
LABEL_14:
    v7 = (_DWORD **)MEMORY[0x1E0CBF2F8];
    goto LABEL_15;
  }
  v5 = *(_QWORD *)(v3 + 40);
  LODWORD(v6) = *(_DWORD *)(v3 + 52);
  if (!(_DWORD)v6)
    goto LABEL_14;
LABEL_5:
  v6 = v6;
  v7 = (_DWORD **)(v5 + 8);
  while (1)
  {
    v8 = (uint64_t)*(v7 - 1);
    if (v8 == WebCore::HTMLNames::idAttr
      || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 24)
      && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 32))
    {
      break;
    }
    v7 += 2;
    if (!--v6)
    {
      v7 = (_DWORD **)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_15:
  v9 = *v7;
  if (v9)
    *v9 += 2;
  *a2 = v9;
  return this;
}

uint64_t WebCore::LoadableTextTrack::trackElementIndex(WebCore::LoadableTextTrack *this, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 35) + 32) + 80);
  if (!v2)
    return 0;
  v4 = 0;
  *(_DWORD *)(v2 + 24) += 2;
  while (1)
  {
    v5 = v2;
    if ((*(_WORD *)(v2 + 28) & 0x10) == 0
      || *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::trackTag + 24)
      || !*(_QWORD *)(v2 + 32))
    {
      goto LABEL_8;
    }
    if (v2 == *((_QWORD *)this + 35))
      break;
    ++v4;
LABEL_8:
    v2 = *(_QWORD *)(v2 + 56);
    if (v2)
      *(_DWORD *)(v2 + 24) += 2;
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
    if (!v2)
      return 0;
  }
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v2, a2);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  return v4;
}

uint64_t WebCore::LoadableTextTrack::isDefault(WebCore::LoadableTextTrack *this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v1 = *((_QWORD *)this + 35);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 104);
  if (!v2)
    return 0;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) == 0)
  {
    v4 = (uint64_t *)(v2 + 32);
    LODWORD(v5) = v3 >> 5;
    if ((_DWORD)v5)
      goto LABEL_5;
    return 0;
  }
  v4 = *(uint64_t **)(v2 + 40);
  LODWORD(v5) = *(_DWORD *)(v2 + 52);
  if (!(_DWORD)v5)
    return 0;
LABEL_5:
  v5 = v5;
  while (1)
  {
    v6 = *v4;
    if (*v4 == WebCore::HTMLNames::defaultAttr
      || *(_QWORD *)(v6 + 24) == *(_QWORD *)(WebCore::HTMLNames::defaultAttr + 24)
      && *(_QWORD *)(v6 + 32) == *(_QWORD *)(WebCore::HTMLNames::defaultAttr + 32))
    {
      break;
    }
    result = 0;
    v4 += 2;
    if (!--v5)
      return result;
  }
  return 1;
}

uint64_t WebCore::TrackListBase::scriptExecutionContext(WebCore::TrackListBase *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 5);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

uint64_t WebCore::TrackListBase::refEventTarget(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

_DWORD *WebCore::TrackListBase::derefEventTarget(_DWORD *this)
{
  if (this[6] == 1)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 72))(this);
  --this[6];
  return this;
}

uint64_t WebCore::TrackListBase::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

_DWORD *WebCore::TrackListBase::deref(_DWORD *this)
{
  if (this[6] == 1)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 72))(this);
  --this[6];
  return this;
}

uint64_t `non-virtual thunk to'WebCore::TrackListBase::ref(uint64_t this)
{
  ++*(_DWORD *)(this - 8);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::TrackListBase::deref(uint64_t this)
{
  if (*(_DWORD *)(this - 8) == 1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(this - 32) + 72))(this - 32);
  --*(_DWORD *)(this - 8);
  return this;
}

uint64_t WebCore::TextTrackCue::eventTargetInterface(WebCore::TextTrackCue *this)
{
  return 25;
}

uint64_t WebCore::TextTrackCue::refEventTarget(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

_DWORD *WebCore::TextTrackCue::derefEventTarget(_DWORD *this)
{
  if (this[6] == 1)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 72))(this);
  --this[6];
  return this;
}

uint64_t WebCore::TextTrackCue::isPositionedAbove(WebCore::TextTrackCue *this, const WebCore::TextTrackCue *a2)
{
  return (*(uint64_t (**)(WebCore::TextTrackCue *, const WebCore::TextTrackCue *))(*(_QWORD *)this + 112))(this, a2);
}

uint64_t WebCore::DataCue::cueType(WebCore::DataCue *this)
{
  return 1;
}

uint64_t WebCore::TextTrackCue::text(WebCore::TextTrackCue *this)
{
  return MEMORY[0x1E0CBF738];
}

uint64_t WebCore::TextTrackCue::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

_DWORD *WebCore::TextTrackCue::deref(_DWORD *this)
{
  if (this[6] == 1)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 72))(this);
  --this[6];
  return this;
}

uint64_t WebCore::TextTrackCue::recalculateStyles(uint64_t this)
{
  *(_BYTE *)(this + 135) = 1;
  return this;
}

uint64_t `non-virtual thunk to'WebCore::TextTrackCue::ref(uint64_t this)
{
  ++*(_DWORD *)(this - 8);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::TextTrackCue::deref(uint64_t this)
{
  if (*(_DWORD *)(this - 8) == 1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(this - 32) + 72))(this - 32);
  --*(_DWORD *)(this - 8);
  return this;
}

uint64_t WebCore::InbandTextTrack::isInband(WebCore::InbandTextTrack *this)
{
  return 1;
}

uint64_t WebCore::TextTrack::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 16);
  return this;
}

_DWORD *WebCore::TextTrack::deref(_DWORD *this)
{
  if (this[4] == 1)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 16))(this);
  --this[4];
  return this;
}

uint64_t WebCore::InbandDataTextTrack::shouldPurgeCuesFromUnbufferedRanges(WebCore::InbandDataTextTrack *this)
{
  return 1;
}

uint64_t WebCore::TextTrack::eventTargetInterface(WebCore::TextTrack *this)
{
  return 24;
}

uint64_t WebCore::TextTrack::refEventTarget(uint64_t this)
{
  ++*(_DWORD *)(this + 16);
  return this;
}

_DWORD *WebCore::TextTrack::derefEventTarget(_DWORD *this)
{
  if (this[4] == 1)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 16))(this);
  --this[4];
  return this;
}

const char *`non-virtual thunk to'WebCore::InbandDataTextTrack::logClassName(WebCore::InbandDataTextTrack *this)
{
  return "DataCue";
}

uint64_t `non-virtual thunk to'WebCore::TextTrack::eventTargetInterface(WebCore::TextTrack *this)
{
  return 24;
}

uint64_t `non-virtual thunk to'WebCore::TextTrack::scriptExecutionContext(WebCore::TextTrack *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 4);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

uint64_t `non-virtual thunk to'WebCore::TextTrack::refEventTarget(uint64_t this)
{
  ++*(_DWORD *)(this - 104);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::TextTrack::derefEventTarget(uint64_t this)
{
  if (*(_DWORD *)(this - 104) == 1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(this - 120) + 16))(this - 120);
  --*(_DWORD *)(this - 104);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::TextTrack::ref(uint64_t this)
{
  ++*(_DWORD *)(this - 128);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::TextTrack::deref(uint64_t this)
{
  if (*(_DWORD *)(this - 128) == 1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(this - 144) + 16))(this - 144);
  --*(_DWORD *)(this - 128);
  return this;
}

uint64_t WebCore::InbandTextTrackPrivateClient::type(WebCore::InbandTextTrackPrivateClient *this)
{
  return 0;
}

uint64_t WebCore::InbandGenericTextTrack::shouldPurgeCuesFromUnbufferedRanges(WebCore::InbandGenericTextTrack *this)
{
  return 1;
}

const char *`non-virtual thunk to'WebCore::InbandGenericTextTrack::logClassName(WebCore::InbandGenericTextTrack *this)
{
  return "InbandGenericTextTrack";
}

uint64_t WebCore::TextTrack::shouldPurgeCuesFromUnbufferedRanges(WebCore::TextTrack *this)
{
  return 0;
}

const char *WebCore::TextTrack::logClassName(WebCore::TextTrack *this)
{
  return "TextTrack";
}

const char *`non-virtual thunk to'WebCore::TextTrack::logClassName(WebCore::TextTrack *this)
{
  return "TextTrack";
}

const char *`non-virtual thunk to'WebCore::InbandWebVTTTextTrack::logClassName(WebCore::InbandWebVTTTextTrack *this)
{
  return "InbandWebVTTTextTrack";
}

void WebCore::LoadableTextTrack::~LoadableTextTrack(WebCore::LoadableTextTrack *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WebCore::TextTrackLoader *v4;
  WTF *v5;
  void *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WebCore::TextTrackLoader *)*((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v4)
  {
    WebCore::TextTrackLoader::~TextTrackLoader(v4, a2);
    WTF::fastFree(v5, v6);
  }
  v7 = *((_QWORD *)this + 34);
  if (v7)
  {
    *(_QWORD *)(v7 + 8) = 0;
    v8 = (unsigned int *)*((_QWORD *)this + 34);
    *((_QWORD *)this + 34) = 0;
    if (v8)
    {
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, v8);
        WTF::fastFree((WTF *)v8, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 34) = 0;
  }
  WebCore::TextTrack::~TextTrack(this, a2);
}

{
  WTF::StringImpl *v3;
  WebCore::TextTrackLoader *v4;
  WTF *v5;
  void *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  bmalloc::api *v11;
  void *v12;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WebCore::TextTrackLoader *)*((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v4)
  {
    WebCore::TextTrackLoader::~TextTrackLoader(v4, a2);
    WTF::fastFree(v5, v6);
  }
  v7 = *((_QWORD *)this + 34);
  if (v7)
  {
    *(_QWORD *)(v7 + 8) = 0;
    v8 = (unsigned int *)*((_QWORD *)this + 34);
    *((_QWORD *)this + 34) = 0;
    if (v8)
    {
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, v8);
        WTF::fastFree((WTF *)v8, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 34) = 0;
  }
  WebCore::TextTrack::~TextTrack(this, a2);
  bmalloc::api::isoDeallocate(v11, v12);
}

void WebCore::TextTrack::inBandMetadataTrackDispatchType(_QWORD *a1@<X8>)
{
  _DWORD *v2;

  v2 = (_DWORD *)*MEMORY[0x1E0CBF3B8];
  if (*MEMORY[0x1E0CBF3B8])
    *v2 += 2;
  *a1 = v2;
}

uint64_t WebCore::TextTrack::isClosedCaptions(WebCore::TextTrack *this)
{
  return 0;
}

uint64_t WebCore::TextTrack::isSDH(WebCore::TextTrack *this)
{
  return 0;
}

uint64_t WebCore::TextTrack::isEasyToRead(WebCore::TextTrack *this)
{
  return 0;
}

uint64_t WebCore::TextTrack::isInband(WebCore::TextTrack *this)
{
  return 0;
}

uint64_t WebCore::TextTrack::startTimeVariance(WebCore::TextTrack *this)
{
  return *(_QWORD *)WTF::MediaTime::zeroTime(this);
}

void `non-virtual thunk to'WebCore::LoadableTextTrack::~LoadableTextTrack(WebCore::LoadableTextTrack *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WebCore::TextTrackLoader *v4;
  WTF *v5;
  void *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WebCore::TextTrackLoader *)*((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v4)
  {
    WebCore::TextTrackLoader::~TextTrackLoader(v4, a2);
    WTF::fastFree(v5, v6);
  }
  v7 = *((_QWORD *)this + 31);
  if (v7)
  {
    *(_QWORD *)(v7 + 8) = 0;
    v8 = (unsigned int *)*((_QWORD *)this + 31);
    *((_QWORD *)this + 31) = 0;
    if (v8)
    {
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, v8);
        WTF::fastFree((WTF *)v8, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 31) = 0;
  }
  WebCore::TextTrack::~TextTrack((WebCore::LoadableTextTrack *)((char *)this - 24), a2);
}

{
  WTF::StringImpl *v3;
  WebCore::TextTrackLoader *v4;
  WTF *v5;
  void *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  bmalloc::api *v11;
  void *v12;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WebCore::TextTrackLoader *)*((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v4)
  {
    WebCore::TextTrackLoader::~TextTrackLoader(v4, a2);
    WTF::fastFree(v5, v6);
  }
  v7 = *((_QWORD *)this + 31);
  if (v7)
  {
    *(_QWORD *)(v7 + 8) = 0;
    v8 = (unsigned int *)*((_QWORD *)this + 31);
    *((_QWORD *)this + 31) = 0;
    if (v8)
    {
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, v8);
        WTF::fastFree((WTF *)v8, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 31) = 0;
  }
  WebCore::TextTrack::~TextTrack((WebCore::LoadableTextTrack *)((char *)this - 24), a2);
  bmalloc::api::isoDeallocate(v11, v12);
}

{
  WTF::StringImpl *v3;
  WebCore::TextTrackLoader *v4;
  WTF *v5;
  void *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WebCore::TextTrackLoader *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v4)
  {
    WebCore::TextTrackLoader::~TextTrackLoader(v4, a2);
    WTF::fastFree(v5, v6);
  }
  v7 = *((_QWORD *)this + 19);
  if (v7)
  {
    *(_QWORD *)(v7 + 8) = 0;
    v8 = (unsigned int *)*((_QWORD *)this + 19);
    *((_QWORD *)this + 19) = 0;
    if (v8)
    {
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, v8);
        WTF::fastFree((WTF *)v8, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 19) = 0;
  }
  WebCore::TextTrack::~TextTrack((WebCore::LoadableTextTrack *)((char *)this - 120), a2);
}

{
  WTF::StringImpl *v3;
  WebCore::TextTrackLoader *v4;
  WTF *v5;
  void *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  bmalloc::api *v11;
  void *v12;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WebCore::TextTrackLoader *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v4)
  {
    WebCore::TextTrackLoader::~TextTrackLoader(v4, a2);
    WTF::fastFree(v5, v6);
  }
  v7 = *((_QWORD *)this + 19);
  if (v7)
  {
    *(_QWORD *)(v7 + 8) = 0;
    v8 = (unsigned int *)*((_QWORD *)this + 19);
    *((_QWORD *)this + 19) = 0;
    if (v8)
    {
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, v8);
        WTF::fastFree((WTF *)v8, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 19) = 0;
  }
  WebCore::TextTrack::~TextTrack((WebCore::LoadableTextTrack *)((char *)this - 120), a2);
  bmalloc::api::isoDeallocate(v11, v12);
}

{
  WTF::StringImpl *v3;
  WebCore::TextTrackLoader *v4;
  WTF *v5;
  void *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WebCore::TextTrackLoader *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v4)
  {
    WebCore::TextTrackLoader::~TextTrackLoader(v4, a2);
    WTF::fastFree(v5, v6);
  }
  v7 = *((_QWORD *)this + 16);
  if (v7)
  {
    *(_QWORD *)(v7 + 8) = 0;
    v8 = (unsigned int *)*((_QWORD *)this + 16);
    *((_QWORD *)this + 16) = 0;
    if (v8)
    {
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, v8);
        WTF::fastFree((WTF *)v8, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 16) = 0;
  }
  WebCore::TextTrack::~TextTrack((WebCore::LoadableTextTrack *)((char *)this - 144), a2);
}

{
  WTF::StringImpl *v3;
  WebCore::TextTrackLoader *v4;
  WTF *v5;
  void *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  bmalloc::api *v11;
  void *v12;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WebCore::TextTrackLoader *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v4)
  {
    WebCore::TextTrackLoader::~TextTrackLoader(v4, a2);
    WTF::fastFree(v5, v6);
  }
  v7 = *((_QWORD *)this + 16);
  if (v7)
  {
    *(_QWORD *)(v7 + 8) = 0;
    v8 = (unsigned int *)*((_QWORD *)this + 16);
    *((_QWORD *)this + 16) = 0;
    if (v8)
    {
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, v8);
        WTF::fastFree((WTF *)v8, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 16) = 0;
  }
  WebCore::TextTrack::~TextTrack((WebCore::LoadableTextTrack *)((char *)this - 144), a2);
  bmalloc::api::isoDeallocate(v11, v12);
}

{
  WTF::StringImpl *v3;
  WebCore::TextTrackLoader *v4;
  WTF *v5;
  void *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WebCore::TextTrackLoader *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    WebCore::TextTrackLoader::~TextTrackLoader(v4, a2);
    WTF::fastFree(v5, v6);
  }
  v7 = *((_QWORD *)this + 1);
  if (v7)
  {
    *(_QWORD *)(v7 + 8) = 0;
    v8 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v8)
    {
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, v8);
        WTF::fastFree((WTF *)v8, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
  WebCore::TextTrack::~TextTrack((WebCore::LoadableTextTrack *)((char *)this - 264), a2);
}

{
  WTF::StringImpl *v3;
  WebCore::TextTrackLoader *v4;
  WTF *v5;
  void *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  bmalloc::api *v11;
  void *v12;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WebCore::TextTrackLoader *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    WebCore::TextTrackLoader::~TextTrackLoader(v4, a2);
    WTF::fastFree(v5, v6);
  }
  v7 = *((_QWORD *)this + 1);
  if (v7)
  {
    *(_QWORD *)(v7 + 8) = 0;
    v8 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v8)
    {
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, v8);
        WTF::fastFree((WTF *)v8, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
  WebCore::TextTrack::~TextTrack((WebCore::LoadableTextTrack *)((char *)this - 264), a2);
  bmalloc::api::isoDeallocate(v11, v12);
}

const char *`non-virtual thunk to'WebCore::LoadableTextTrack::logClassName(WebCore::LoadableTextTrack *this)
{
  return "LoadableTextTrack";
}

void WebCore::WebVTTParser::~WebVTTParser(WebCore::WebVTTParser *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  WebCore::VTTRegion **v6;
  uint64_t v7;
  WebCore::VTTRegion *v8;
  WTF *v9;
  void *v10;
  WTF *v11;
  uint64_t v12;
  WTF::StringImpl ***v13;
  uint64_t v14;
  WTF::StringImpl **v15;
  WTF *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WebCore::VTTRegion *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF *v30;
  void *v31;
  WTF *v32;
  WebCore::HTMLMetaCharsetParser *v33;
  WTF *v34;
  void *v35;
  uint64_t v36;
  WTF::StringImpl **v37;
  uint64_t v38;
  WTF::StringImpl *v39;

  v3 = *((unsigned int *)this + 85);
  if ((_DWORD)v3)
  {
    v37 = (WTF::StringImpl **)*((_QWORD *)this + 41);
    v38 = 8 * v3;
    do
    {
      v39 = *v37;
      *v37 = 0;
      if (v39)
      {
        if (*(_DWORD *)v39 == 2)
          WTF::StringImpl::destroy(v39, a2);
        else
          *(_DWORD *)v39 -= 2;
      }
      ++v37;
      v38 -= 8;
    }
    while (v38);
  }
  v4 = (WTF *)*((_QWORD *)this + 41);
  if (v4)
  {
    *((_QWORD *)this + 41) = 0;
    *((_DWORD *)this + 84) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = *((unsigned int *)this + 81);
  if ((_DWORD)v5)
  {
    v6 = (WebCore::VTTRegion **)*((_QWORD *)this + 39);
    v7 = 8 * v5;
    do
    {
      v8 = *v6;
      *v6 = 0;
      if (v8)
      {
        if (*((_DWORD *)v8 + 4) == 1)
        {
          WebCore::VTTRegion::~VTTRegion(v8);
          WTF::fastFree(v9, v10);
        }
        else
        {
          --*((_DWORD *)v8 + 4);
        }
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  v11 = (WTF *)*((_QWORD *)this + 39);
  if (v11)
  {
    *((_QWORD *)this + 39) = 0;
    *((_DWORD *)this + 80) = 0;
    WTF::fastFree(v11, a2);
  }
  v12 = *((unsigned int *)this + 77);
  if ((_DWORD)v12)
  {
    v13 = (WTF::StringImpl ***)*((_QWORD *)this + 37);
    v14 = 8 * v12;
    do
    {
      v15 = *v13;
      *v13 = 0;
      if (v15)
        WTF::RefCounted<WebCore::WebVTTCueData>::deref(v15, a2);
      ++v13;
      v14 -= 8;
    }
    while (v14);
  }
  v16 = (WTF *)*((_QWORD *)this + 37);
  if (v16)
  {
    *((_QWORD *)this + 37) = 0;
    *((_DWORD *)this + 76) = 0;
    WTF::fastFree(v16, a2);
  }
  v17 = (WTF::StringImpl *)*((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, a2);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = (WTF::StringImpl *)*((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, a2);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = (WebCore::VTTRegion *)*((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v19)
  {
    if (*((_DWORD *)v19 + 4) == 1)
    {
      WebCore::VTTRegion::~VTTRegion(v19);
      WTF::fastFree(v30, v31);
    }
    else
    {
      --*((_DWORD *)v19 + 4);
    }
  }
  v20 = (WTF::StringImpl *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, a2);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = (WTF::StringImpl *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, a2);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = (WTF::StringImpl *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, a2);
    else
      *(_DWORD *)v22 -= 2;
  }
  v23 = (WTF::StringImpl *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, a2);
    else
      *(_DWORD *)v23 -= 2;
  }
  v24 = (WTF::StringImpl *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, a2);
    else
      *(_DWORD *)v24 -= 2;
  }
  v25 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 1)
    {
      v32 = *(WTF **)(v25 + 72);
      if (v32)
      {
        *(_QWORD *)(v25 + 72) = 0;
        *(_DWORD *)(v25 + 80) = 0;
        WTF::fastFree(v32, a2);
      }
      v33 = *(WebCore::HTMLMetaCharsetParser **)(v25 + 48);
      *(_QWORD *)(v25 + 48) = 0;
      if (v33)
      {
        WebCore::HTMLMetaCharsetParser::~HTMLMetaCharsetParser(v33, a2);
        WTF::fastFree(v34, v35);
      }
      v36 = *(_QWORD *)(v25 + 40);
      *(_QWORD *)(v25 + 40) = 0;
      if (v36)
        (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
      WTF::fastFree((WTF *)v25, a2);
    }
    else
    {
      --*(_DWORD *)v25;
    }
  }
  v26 = (WTF::StringImpl *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, a2);
    else
      *(_DWORD *)v26 -= 2;
  }
  v27 = (WTF::StringImpl *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, a2);
    else
      *(_DWORD *)v27 -= 2;
  }
  WTF::Deque<WebCore::SegmentedString::Substring,0ul>::~Deque((unint64_t *)this + 6, a2);
  v29 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, v28);
    else
      *(_DWORD *)v29 -= 2;
  }
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::InbandGenericCueIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::InbandGenericCueIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::TextTrackCueGeneric,WTF::RawPtrTraits<WebCore::TextTrackCueGeneric>,WTF::DefaultRefDerefTraits<WebCore::TextTrackCueGeneric>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::InbandGenericCueIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::TextTrackCueGeneric,WTF::RawPtrTraits<WebCore::TextTrackCueGeneric>,WTF::DefaultRefDerefTraits<WebCore::TextTrackCueGeneric>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::InbandGenericCueIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::InbandGenericCueIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::TextTrackCueGeneric,WTF::RawPtrTraits<WebCore::TextTrackCueGeneric>,WTF::DefaultRefDerefTraits<WebCore::TextTrackCueGeneric>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::InbandGenericCueIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::InbandGenericCueIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebCore::TextTrackCueGeneric,WTF::RawPtrTraits<WebCore::TextTrackCueGeneric>,WTF::DefaultRefDerefTraits<WebCore::TextTrackCueGeneric>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::InbandGenericCueIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t *v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    while (1)
    {
      v10 = (uint64_t *)(v4 + 16 * v9);
      v11 = *v10;
      if (*v10 != -1)
      {
        if (v11)
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v16 = (v11 + ~(v11 << 32)) ^ ((unint64_t)(v11 + ~(v11 << 32)) >> 22);
          v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
          v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
          v19 = v15 & ((v18 >> 31) ^ v18);
          v20 = 1;
          do
          {
            v21 = v19;
            v22 = *(_QWORD *)(v14 + 16 * v19);
            v19 = (v19 + v20++) & v15;
          }
          while (v22);
          v23 = (uint64_t *)(v14 + 16 * v21);
          v24 = (_DWORD *)v23[1];
          v23[1] = 0;
          if (v24)
          {
            if (v24[6] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 72))(v24);
            else
              --v24[6];
          }
          *v23 = *v10;
          v25 = v4 + 16 * v9;
          v26 = *(_QWORD *)(v25 + 8);
          *(_QWORD *)(v25 + 8) = 0;
          v23[1] = v26;
          v13 = *(_DWORD **)(v25 + 8);
          *(_QWORD *)(v25 + 8) = 0;
          if (!v13)
            goto LABEL_22;
          if (v13[6] == 1)
          {
LABEL_24:
            (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 72))(v13);
            goto LABEL_22;
          }
          --v13[6];
        }
        else
        {
          v12 = v4 + 16 * v9;
          v13 = *(_DWORD **)(v12 + 8);
          *(_QWORD *)(v12 + 8) = 0;
          if (v13)
          {
            if (v13[6] == 1)
              goto LABEL_24;
            --v13[6];
          }
        }
      }
LABEL_22:
      if (++v9 == v5)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

WTF::StringImpl **WTF::RefCounted<WebCore::WebVTTCueData>::deref(WTF::StringImpl **this, WTF::StringImpl *a2)
{
  WTF *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  v2 = (WTF *)this;
  if (*(_DWORD *)this == 1)
  {
    v3 = this[9];
    *((_QWORD *)v2 + 9) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = (WTF::StringImpl *)*((_QWORD *)v2 + 8);
    *((_QWORD *)v2 + 8) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = (WTF::StringImpl *)*((_QWORD *)v2 + 7);
    *((_QWORD *)v2 + 7) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
    return (WTF::StringImpl **)WTF::fastFree(v2, a2);
  }
  else
  {
    --*(_DWORD *)this;
  }
  return this;
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::VTTCue>(uint64_t a1, WTF::Logger::LogSiteIdentifier *this, uint64_t a3)
{
  WTF::JSONImpl::Object *v6;
  uint64_t result;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::JSONImpl::Object *v27;
  WTF::Logger *v28;
  WTF::Logger *v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::Logger *v33;
  uint64_t v34;
  WTF::StringImpl **v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  int v39;
  WTF::Logger *v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  __int128 buf;
  int v46;
  WTF::StringImpl *v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v6 = (WTF::JSONImpl::Object *)WTF::Logger::LogSiteIdentifier::toString(this);
  WTF::JSONImpl::Object::create(v6);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 264))(a3, buf);
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)buf);
  result = buf;
  *(_QWORD *)&buf = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      result = WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)result;
  }
  if (!v43)
  {
    v8 = 0;
    if (v42)
      goto LABEL_6;
LABEL_80:
    v9 = 0;
    goto LABEL_7;
  }
  v8 = *((_DWORD *)v43 + 1);
  if (!v42)
    goto LABEL_80;
LABEL_6:
  v9 = *((_DWORD *)v42 + 1);
LABEL_7:
  if ((v9 | v8) < 0 || (result = (v8 + v9), __OFADD__(v8, v9)))
  {
    v44 = 0;
    goto LABEL_84;
  }
  if (v43)
  {
    v10 = *((_DWORD *)v43 + 4);
    v11 = (v10 >> 2) & 1;
    if (v42 && (v10 & 4) != 0)
      goto LABEL_12;
  }
  else
  {
    if (v42)
    {
LABEL_12:
      v11 = (*((unsigned __int8 *)v42 + 16) >> 2) & 1;
      goto LABEL_13;
    }
    v11 = 1;
  }
LABEL_13:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v11, (uint64_t)v43, (uint64_t)v42, &v44);
  if (!v44)
  {
LABEL_84:
    __break(0xC471u);
    return result;
  }
  v13 = v42;
  v42 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v43;
  v43 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *(NSObject **)(a1 + 32);
  v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v16)
  {
    WTF::String::utf8();
    v18 = v40 ? (char *)v40 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v18;
    _os_log_impl(&dword_1940B8000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v16 = (uint64_t)v40;
    v40 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
        v16 = WTF::fastFree((WTF *)v16, v17);
      else
        --*(_DWORD *)v16;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= 3u)
  {
    v19 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v20 = *v19;
      if ((v20 & 1) != 0)
        break;
      v21 = __ldaxr(v19);
      if (v21 == v20)
      {
        if (!__stxr(v20 | 1, v19))
        {
          v22 = WTF::Logger::observers((WTF::Logger *)v16);
          v23 = *(unsigned int *)(v22 + 12);
          if ((_DWORD)v23)
          {
            v24 = *(uint64_t **)v22;
            v25 = *(_QWORD *)v22 + 8 * v23;
            do
            {
              v26 = *v24;
              LODWORD(buf) = 0;
              v27 = (WTF::JSONImpl::Object *)WTF::Logger::LogSiteIdentifier::toString(this);
              v46 = 1;
              WTF::JSONImpl::Object::create(v27);
              (*(void (**)(uint64_t, WTF::Logger *))(*(_QWORD *)a3 + 264))(a3, v40);
              WTF::JSONImpl::Value::toJSONString(v40);
              v28 = v40;
              v40 = 0;
              if (v28)
              {
                if (*(_DWORD *)v28 == 1)
                  WTF::JSONImpl::Value::operator delete();
                else
                  --*(_DWORD *)v28;
              }
              v40 = 0;
              v41 = 0;
              v29 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v41) = 2;
              v40 = v29;
              v30 = HIDWORD(v41);
              *((_DWORD *)v29 + 4 * HIDWORD(v41)) = buf;
              v31 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v29 + 2 * v30 + 1) = v31;
              *((_DWORD *)v29 + 4 * (v30 + 1)) = v46;
              v32 = v47;
              if (v47)
                *(_DWORD *)v47 += 2;
              *((_QWORD *)v29 + 2 * (v30 + 1) + 1) = v32;
              HIDWORD(v41) = v30 + 2;
              (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, a1, 3, &v40);
              v33 = v40;
              if (HIDWORD(v41))
              {
                v34 = 16 * HIDWORD(v41);
                v35 = (WTF::StringImpl **)((char *)v40 + 8);
                do
                {
                  v36 = *v35;
                  *v35 = 0;
                  if (v36)
                  {
                    if (*(_DWORD *)v36 == 2)
                      WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v17);
                    else
                      *(_DWORD *)v36 -= 2;
                  }
                  v35 += 2;
                  v34 -= 16;
                }
                while (v34);
                v33 = v40;
              }
              if (v33)
              {
                v40 = 0;
                LODWORD(v41) = 0;
                WTF::fastFree(v33, v17);
              }
              v37 = v47;
              v47 = 0;
              if (v37)
              {
                if (*(_DWORD *)v37 == 2)
                  WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v37 -= 2;
              }
              v38 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v38)
              {
                if (*(_DWORD *)v38 == 2)
                  WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v38 -= 2;
              }
              ++v24;
            }
            while (v24 != (uint64_t *)v25);
          }
          v39 = __ldxr(v19);
          if (v39 == 1)
          {
            if (!__stlxr(0, v19))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v44;
  v44 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [29],WebCore::VTTCue>(uint64_t a1, WTF::Logger::LogSiteIdentifier *this, uint64_t a3)
{
  WTF::JSONImpl::Object *v5;
  uint64_t result;
  int v7;
  int v8;
  int v9;
  BOOL v10;
  int v11;
  char v12;
  int v13;
  unsigned int v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  NSObject *v19;
  uint64_t v20;
  void *v21;
  char *v22;
  unsigned __int8 *v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  WTF::JSONImpl::Object *v31;
  WTF::Logger *v32;
  WTF::Logger *v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::Logger *v38;
  uint64_t v39;
  WTF::StringImpl **v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  int v45;
  WTF::Logger *v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  __int128 buf;
  int v54;
  WTF::StringImpl *v55;
  int v56;
  WTF::StringImpl *v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  v5 = (WTF::JSONImpl::Object *)WTF::String::String((WTF::String *)&v50, "ignoring already added cue: ");
  WTF::JSONImpl::Object::create(v5);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 264))(a3, buf);
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)buf);
  result = buf;
  *(_QWORD *)&buf = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      result = WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)result;
  }
  if (v51)
  {
    v7 = *((_DWORD *)v51 + 1);
    if (v50)
      goto LABEL_6;
LABEL_99:
    v8 = 0;
    if (v49)
      goto LABEL_7;
LABEL_100:
    v9 = 0;
    goto LABEL_8;
  }
  v7 = 0;
  if (!v50)
    goto LABEL_99;
LABEL_6:
  v8 = *((_DWORD *)v50 + 1);
  if (!v49)
    goto LABEL_100;
LABEL_7:
  v9 = *((_DWORD *)v49 + 1);
LABEL_8:
  if ((v9 | v8) < 0
    || ((v10 = __OFADD__(v8, v9), v11 = v8 + v9, !v10) ? (v12 = 0) : (v12 = 1),
        v7 < 0 || (v12 & 1) != 0 || (result = (v7 + v11), __OFADD__(v7, v11))))
  {
    v52 = 0;
    goto LABEL_104;
  }
  if (v51 && (*((_BYTE *)v51 + 16) & 4) == 0)
  {
    v13 = 0;
    goto LABEL_22;
  }
  if (v50)
  {
    v14 = *((_DWORD *)v50 + 4);
    v13 = (v14 >> 2) & 1;
    if (v49 && (v14 & 4) != 0)
      goto LABEL_21;
  }
  else
  {
    if (v49)
    {
LABEL_21:
      v13 = (*((unsigned __int8 *)v49 + 16) >> 2) & 1;
      goto LABEL_22;
    }
    v13 = 1;
  }
LABEL_22:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v13, v51, (uint64_t)v50, (uint64_t)v49, &v52);
  if (!v52)
  {
LABEL_104:
    __break(0xC471u);
    return result;
  }
  v16 = v49;
  v49 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = v50;
  v50 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v15);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = v51;
  v51 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v15);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = *(NSObject **)(a1 + 32);
  v20 = os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v20)
  {
    WTF::String::utf8();
    v22 = v47 ? (char *)v47 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v22;
    _os_log_impl(&dword_1940B8000, v19, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v20 = (uint64_t)v47;
    v47 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 1)
        v20 = WTF::fastFree((WTF *)v20, v21);
      else
        --*(_DWORD *)v20;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= 3u)
  {
    v23 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v24 = *v23;
      if ((v24 & 1) != 0)
        break;
      v25 = __ldaxr(v23);
      if (v25 == v24)
      {
        if (!__stxr(v24 | 1, v23))
        {
          v26 = WTF::Logger::observers((WTF::Logger *)v20);
          v27 = *(unsigned int *)(v26 + 12);
          if ((_DWORD)v27)
          {
            v28 = *(uint64_t **)v26;
            v29 = *(_QWORD *)v26 + 8 * v27;
            do
            {
              v30 = *v28;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v54 = 0;
              v31 = (WTF::JSONImpl::Object *)WTF::String::String((WTF::String *)&v55, "ignoring already added cue: ");
              v56 = 1;
              WTF::JSONImpl::Object::create(v31);
              (*(void (**)(uint64_t, WTF::Logger *))(*(_QWORD *)a3 + 264))(a3, v47);
              WTF::JSONImpl::Value::toJSONString(v47);
              v32 = v47;
              v47 = 0;
              if (v32)
              {
                if (*(_DWORD *)v32 == 1)
                  WTF::JSONImpl::Value::operator delete();
                else
                  --*(_DWORD *)v32;
              }
              v47 = 0;
              v48 = 0;
              v33 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
              LODWORD(v48) = 3;
              v47 = v33;
              v34 = HIDWORD(v48);
              *((_DWORD *)v33 + 4 * HIDWORD(v48)) = buf;
              v35 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v33 + 2 * v34 + 1) = v35;
              *((_DWORD *)v33 + 4 * (v34 + 1)) = v54;
              v36 = v55;
              if (v55)
                *(_DWORD *)v55 += 2;
              *((_QWORD *)v33 + 2 * (v34 + 1) + 1) = v36;
              *((_DWORD *)v33 + 4 * (v34 + 2)) = v56;
              v37 = v57;
              if (v57)
                *(_DWORD *)v57 += 2;
              *((_QWORD *)v33 + 2 * (v34 + 2) + 1) = v37;
              HIDWORD(v48) = v34 + 3;
              (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::Logger **))(*(_QWORD *)v30 + 16))(v30, a1, 3, &v47);
              v38 = v47;
              if (HIDWORD(v48))
              {
                v39 = 16 * HIDWORD(v48);
                v40 = (WTF::StringImpl **)((char *)v47 + 8);
                do
                {
                  v41 = *v40;
                  *v40 = 0;
                  if (v41)
                  {
                    if (*(_DWORD *)v41 == 2)
                      WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v21);
                    else
                      *(_DWORD *)v41 -= 2;
                  }
                  v40 += 2;
                  v39 -= 16;
                }
                while (v39);
                v38 = v47;
              }
              if (v38)
              {
                v47 = 0;
                LODWORD(v48) = 0;
                WTF::fastFree(v38, v21);
              }
              v42 = v57;
              v57 = 0;
              if (v42)
              {
                if (*(_DWORD *)v42 == 2)
                  WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v21);
                else
                  *(_DWORD *)v42 -= 2;
              }
              v43 = v55;
              v55 = 0;
              if (v43)
              {
                if (*(_DWORD *)v43 == 2)
                  WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v21);
                else
                  *(_DWORD *)v43 -= 2;
              }
              v44 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v44)
              {
                if (*(_DWORD *)v44 == 2)
                  WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v21);
                else
                  *(_DWORD *)v44 -= 2;
              }
              ++v28;
            }
            while (v28 != (uint64_t *)v29);
          }
          v45 = __ldxr(v23);
          if (v45 == 1)
          {
            if (!__stlxr(0, v23))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v52;
  v52 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v21);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [36],WebCore::TextTrackCue,char [5],double>(uint64_t a1, WTF::Logger::LogSiteIdentifier *this, uint64_t a3, double *a4)
{
  WTF::JSONImpl::Object *v5;
  _DWORD *v6;
  WTF::String *v7;
  WTF::StringImpl *result;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  WTF::JSONImpl::Object *v26;
  WTF::Logger *v27;
  WTF::String *v28;
  double v29;
  WTF::Logger *v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::Logger *v37;
  uint64_t v38;
  WTF::StringImpl **v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  int v46;
  uint64_t v47;
  WTF::Logger *v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  __int128 buf;
  int v63;
  WTF::StringImpl *v64;
  int v65;
  WTF::StringImpl *v66;
  int v67;
  WTF::StringImpl *v68;
  int v69;
  WTF::StringImpl *v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  v5 = (WTF::JSONImpl::Object *)WTF::String::String((WTF::String *)&v56, "extending endTime of existing cue: ");
  WTF::JSONImpl::Object::create(v5);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 264))(a3, buf);
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)buf);
  v6 = (_DWORD *)buf;
  *(_QWORD *)&buf = 0;
  if (v6)
  {
    if (*v6 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v6;
  }
  v7 = (WTF::String *)WTF::String::String((WTF::String *)&v54, " to ");
  WTF::String::number(v7, *a4);
  v51 = v56;
  v61 = v55;
  *(_QWORD *)&buf = v57;
  v59 = v53;
  v60 = v54;
  result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v51, (uint64_t *)&v61, (uint64_t *)&v60, (uint64_t *)&v59, &v58);
  if (v58)
  {
    v10 = v53;
    v53 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v9);
      else
        *(_DWORD *)v10 -= 2;
    }
    v11 = v54;
    v54 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v9);
      else
        *(_DWORD *)v11 -= 2;
    }
    v12 = v55;
    v55 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v9);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = v56;
    v56 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v9);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = v57;
    v57 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v9);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = *(NSObject **)(a1 + 32);
    v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v16)
    {
      WTF::String::utf8();
      v18 = v51 ? (char *)v51 + 16 : 0;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v18;
      _os_log_impl(&dword_1940B8000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      v16 = (uint64_t)v51;
      v51 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 1)
          v16 = WTF::fastFree((WTF *)v16, v17);
        else
          --*(_DWORD *)v16;
      }
    }
    if (*(_BYTE *)a1)
    {
      v19 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v20 = *v19;
        if ((v20 & 1) != 0)
          break;
        v21 = __ldaxr(v19);
        if (v21 == v20)
        {
          if (!__stxr(v20 | 1, v19))
          {
            v22 = WTF::Logger::observers((WTF::Logger *)v16);
            v23 = *(unsigned int *)(v22 + 12);
            if ((_DWORD)v23)
            {
              v24 = *(uint64_t **)v22;
              v47 = *(_QWORD *)v22 + 8 * v23;
              do
              {
                v25 = *v24;
                LODWORD(buf) = 0;
                WTF::Logger::LogSiteIdentifier::toString(this);
                v63 = 0;
                v26 = (WTF::JSONImpl::Object *)WTF::String::String((WTF::String *)&v64, "extending endTime of existing cue: ");
                v65 = 1;
                WTF::JSONImpl::Object::create(v26);
                (*(void (**)(uint64_t, WTF::Logger *))(*(_QWORD *)a3 + 264))(a3, v51);
                WTF::JSONImpl::Value::toJSONString(v51);
                v27 = v51;
                v51 = 0;
                if (v27)
                {
                  if (*(_DWORD *)v27 == 1)
                    WTF::JSONImpl::Value::operator delete();
                  else
                    --*(_DWORD *)v27;
                }
                v67 = 0;
                v28 = (WTF::String *)WTF::String::String((WTF::String *)&v68, " to ");
                v29 = *a4;
                v69 = 0;
                WTF::String::number(v28, v29);
                v51 = 0;
                v52 = 0;
                v30 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x50);
                LODWORD(v52) = 5;
                v51 = v30;
                v31 = HIDWORD(v52);
                *((_DWORD *)v30 + 4 * HIDWORD(v52)) = buf;
                v32 = *((_QWORD *)&buf + 1);
                if (*((_QWORD *)&buf + 1))
                  **((_DWORD **)&buf + 1) += 2;
                *((_QWORD *)v30 + 2 * v31 + 1) = v32;
                *((_DWORD *)v30 + 4 * (v31 + 1)) = v63;
                v33 = v64;
                if (v64)
                  *(_DWORD *)v64 += 2;
                *((_QWORD *)v30 + 2 * (v31 + 1) + 1) = v33;
                *((_DWORD *)v30 + 4 * (v31 + 2)) = v65;
                v34 = v66;
                if (v66)
                  *(_DWORD *)v66 += 2;
                *((_QWORD *)v30 + 2 * (v31 + 2) + 1) = v34;
                *((_DWORD *)v30 + 4 * (v31 + 3)) = v67;
                v35 = v68;
                if (v68)
                  *(_DWORD *)v68 += 2;
                *((_QWORD *)v30 + 2 * (v31 + 3) + 1) = v35;
                *((_DWORD *)v30 + 4 * (v31 + 4)) = v69;
                v36 = v70;
                if (v70)
                  *(_DWORD *)v70 += 2;
                *((_QWORD *)v30 + 2 * (v31 + 4) + 1) = v36;
                HIDWORD(v52) = v31 + 5;
                (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v25 + 16))(v25, a1, 0, &v51);
                v37 = v51;
                if (HIDWORD(v52))
                {
                  v38 = 16 * HIDWORD(v52);
                  v39 = (WTF::StringImpl **)((char *)v51 + 8);
                  do
                  {
                    v40 = *v39;
                    *v39 = 0;
                    if (v40)
                    {
                      if (*(_DWORD *)v40 == 2)
                        WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v17);
                      else
                        *(_DWORD *)v40 -= 2;
                    }
                    v39 += 2;
                    v38 -= 16;
                  }
                  while (v38);
                  v37 = v51;
                }
                if (v37)
                {
                  v51 = 0;
                  LODWORD(v52) = 0;
                  WTF::fastFree(v37, v17);
                }
                v41 = v70;
                v70 = 0;
                if (v41)
                {
                  if (*(_DWORD *)v41 == 2)
                    WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v17);
                  else
                    *(_DWORD *)v41 -= 2;
                }
                v42 = v68;
                v68 = 0;
                if (v42)
                {
                  if (*(_DWORD *)v42 == 2)
                    WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v17);
                  else
                    *(_DWORD *)v42 -= 2;
                }
                v43 = v66;
                v66 = 0;
                if (v43)
                {
                  if (*(_DWORD *)v43 == 2)
                    WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v17);
                  else
                    *(_DWORD *)v43 -= 2;
                }
                v44 = v64;
                v64 = 0;
                if (v44)
                {
                  if (*(_DWORD *)v44 == 2)
                    WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v17);
                  else
                    *(_DWORD *)v44 -= 2;
                }
                v45 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                *((_QWORD *)&buf + 1) = 0;
                if (v45)
                {
                  if (*(_DWORD *)v45 == 2)
                    WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v17);
                  else
                    *(_DWORD *)v45 -= 2;
                }
                ++v24;
              }
              while (v24 != (uint64_t *)v47);
            }
            v46 = __ldxr(v19);
            if (v46 == 1)
            {
              if (!__stlxr(0, v19))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    result = v58;
    v58 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v17);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

uint64_t WTF::Mapper<WTF::WeakHashSet<WebCore::TextTrackClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(WTF::Function<void ()(WebCore::TextTrackClient&)> const&)::{lambda(WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>> const&)#1},WTF::Vector<WTF::WeakPtr<WebCore::TextTrackClient,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits> &,void>::map(uint64_t result, uint64_t **a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *i;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;

  if (*a2)
  {
    v2 = *((unsigned int *)*a2 - 3);
    if ((_DWORD)v2)
    {
      if (v2 >> 29)
      {
        __break(0xC471u);
      }
      else
      {
        v4 = result;
        result = WTF::fastMalloc((WTF *)(8 * v2));
        *(_DWORD *)(v4 + 8) = v2;
        *(_QWORD *)v4 = result;
        v5 = *a2;
        if (*a2 && *((_DWORD *)v5 - 3))
        {
          v6 = *((unsigned int *)v5 - 1);
          if ((_DWORD)v6)
          {
            v7 = 8 * v6;
            for (i = *a2; (unint64_t)(*i + 1) <= 1; ++i)
            {
              v7 -= 8;
              if (!v7)
                return result;
            }
          }
          else
          {
            i = *a2;
          }
          v9 = &v5[v6];
          if (i != v9)
          {
            v10 = *i;
LABEL_15:
            v11 = *(_QWORD *)(v10 + 8);
            if (v11)
            {
              result = *(_QWORD *)(v11 + 8);
              if (result)
                goto LABEL_33;
              result = WTF::fastCompactMalloc((WTF *)0x10);
              *(_DWORD *)result = 1;
              *(_QWORD *)(result + 8) = v11;
              v13 = *(unsigned int **)(v11 + 8);
              *(_QWORD *)(v11 + 8) = result;
              if (!v13)
                goto LABEL_33;
              do
              {
                v14 = __ldaxr(v13);
                v15 = v14 - 1;
              }
              while (__stlxr(v15, v13));
              if (!v15)
              {
                atomic_store(1u, v13);
                WTF::fastFree((WTF *)v13, v12);
              }
              result = *(_QWORD *)(v11 + 8);
              if (result)
              {
LABEL_33:
                do
                  v16 = __ldaxr((unsigned int *)result);
                while (__stlxr(v16 + 1, (unsigned int *)result));
              }
            }
            else
            {
              result = 0;
            }
            v17 = *(unsigned int *)(v4 + 12);
            *(_QWORD *)(*(_QWORD *)v4 + 8 * v17) = result;
            *(_DWORD *)(v4 + 12) = v17 + 1;
            while (++i != v9)
            {
              v10 = *i;
              if ((unint64_t)(*i + 1) > 1)
              {
                if (i != v9)
                  goto LABEL_15;
                return result;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::InbandTextTrack::willRemove(void)::$_0,void,WebCore::TextTrackClient &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 88))(a2, *(_QWORD *)(a1 + 8));
}

void WTF::Detail::CallableWrapper<WebCore::LoadableTextTrack::scheduleLoad(WTF::URL const&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  WebCore::TextTrackLoader *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::TextTrackLoader *v6;
  void *v7;
  WebCore::TextTrackLoader *v8;
  WTF *v9;
  void *v10;
  char v11;

  v1 = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(v1 + 336) = 1;
  v2 = *(WebCore::TextTrackLoader **)(v1 + 288);
  if (v2)
    WebCore::TextTrackLoader::cancelLoad(v2);
  v3 = *(_QWORD *)(v1 + 280);
  if (v3)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(v3 + 40) + 8);
    v5 = WTF::fastMalloc((WTF *)0x80);
    v6 = (WebCore::TextTrackLoader *)WebCore::TextTrackLoader::TextTrackLoader(v5, v1 + 264, v4);
    v8 = *(WebCore::TextTrackLoader **)(v1 + 288);
    *(_QWORD *)(v1 + 288) = v6;
    if (v8)
    {
      WebCore::TextTrackLoader::~TextTrackLoader(v8, v7);
      WTF::fastFree(v9, v10);
      v6 = *(WebCore::TextTrackLoader **)(v1 + 288);
    }
    WebCore::TextTrackLoader::load(v6, (const WTF::URL *)(v1 + 296), *(WebCore::HTMLTrackElement **)(v1 + 280));
    if ((v11 & 1) == 0)
      WebCore::HTMLTrackElement::didCompleteLoad(*(_QWORD *)(v1 + 280), 0);
  }
  *(_BYTE *)(v1 + 336) = 0;
}

uint64_t WebCore::TextTrack::captionMenuOffItem(WebCore::TextTrack *this)
{
  uint64_t result;
  WTF::StringImpl *v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

    return WebCore::TextTrack::captionMenuOffItem(void)::off;
  WTF::AtomStringImpl::add();
  v2 = v7;
  v6 = v7;
  v3 = bmalloc::api::isoAllocate();
  v4 = WebCore::TextTrack::TextTrack(v3, 0, (const WTF::AtomString *)&v6, MEMORY[0x1E0CBF3B8], MEMORY[0x1E0CBF3B8], MEMORY[0x1E0CBF3B8], 1);
  WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)(v4 + 144));
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, v5);
    else
      *(_DWORD *)v2 -= 2;
  }
  result = v4;
  WebCore::TextTrack::captionMenuOffItem(void)::off = v4;
  return result;
}

_QWORD *WebCore::TextTrack::create@<X0>(WebCore::TextTrack *this@<X0>, WebCore::ScriptExecutionContext *a2@<X1>, WTF::StringImpl **a3@<X2>, const WTF::AtomString *a4@<X3>, const WTF::AtomString *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v13;
  uint64_t v14;

  v13 = bmalloc::api::isoAllocate();
  v14 = WebCore::TextTrack::TextTrack(v13, this, a2, a3, (_DWORD **)a4, (_DWORD **)a5, 1);
  *a6 = v14;
  return WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)(v14 + 144));
}

uint64_t WebCore::TextTrack::captionMenuAutomaticItem(WebCore::TextTrack *this)
{
  uint64_t result;
  WTF::StringImpl *v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

    return WebCore::TextTrack::captionMenuAutomaticItem(void)::automatic;
  WTF::AtomStringImpl::add();
  v2 = v7;
  v6 = v7;
  v3 = bmalloc::api::isoAllocate();
  v4 = WebCore::TextTrack::TextTrack(v3, 0, (const WTF::AtomString *)&v6, MEMORY[0x1E0CBF3B8], MEMORY[0x1E0CBF3B8], MEMORY[0x1E0CBF3B8], 1);
  WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)(v4 + 144));
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, v5);
    else
      *(_DWORD *)v2 -= 2;
  }
  result = v4;
  WebCore::TextTrack::captionMenuAutomaticItem(void)::automatic = v4;
  return result;
}

uint64_t WebCore::TextTrack::convertKind(WebCore::TextTrack *this, const WTF::AtomString *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const WTF::AtomString *v8;
  const WTF::AtomString *v9;
  const WTF::AtomString *v10;
  const WTF::AtomString *v11;
  uint64_t v12;

  v2 = *(_QWORD *)a2;
  if (*(_QWORD *)a2 == WebCore::captionsAtomData)
    return 1;
  {
    v3 = WebCore::chaptersKeyword(void)::chapters;
  }
  else
  {
    v9 = a2;
    WTF::AtomStringImpl::add();
    a2 = v9;
    v3 = v12;
    WebCore::chaptersKeyword(void)::chapters = v12;
    v2 = *(_QWORD *)v9;
  }
  if (v2 == v3)
    return 3;
  {
    v4 = WebCore::descriptionsKeyword(void)::descriptions;
  }
  else
  {
    v10 = a2;
    WTF::AtomStringImpl::add();
    a2 = v10;
    v4 = v12;
    WebCore::descriptionsKeyword(void)::descriptions = v12;
    v2 = *(_QWORD *)v10;
  }
  if (v2 == v4)
    return 2;
  {
    v5 = WebCore::forcedKeyword(void)::forced;
  }
  else
  {
    v11 = a2;
    WTF::AtomStringImpl::add();
    a2 = v11;
    v5 = v12;
    WebCore::forcedKeyword(void)::forced = v12;
    v2 = *(_QWORD *)v11;
  }
  if (v2 == v5)
    return 5;
  {
    v6 = WebCore::metadataKeyword(void)::metadata;
  }
  else
  {
    v8 = a2;
    WTF::AtomStringImpl::add();
    v6 = v12;
    WebCore::metadataKeyword(void)::metadata = v12;
    v2 = *(_QWORD *)v8;
  }
  return 4 * (v2 == v6);
}

uint64_t WebCore::TextTrack::TextTrack(uint64_t a1, WebCore::ScriptExecutionContext *a2, const WTF::AtomString *a3, WTF::AtomString *a4, _DWORD **a5, _DWORD **a6, int a7)
{
  WebCore::ScriptExecutionContext *v9;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t *v16;
  _BYTE v18[24];
  uint64_t v19;

  v9 = a2;
  v18[0] = 0;
  v18[8] = 0;
  v11 = (_QWORD *)WebCore::TrackBase::TrackBase(a1, a2, 1, (uint64_t)v18, a4, a5, a6);
  v11[16] = 0;
  v11[17] = 0;
  v11[15] = &unk_1E33A4FC0;
  v12 = (uint64_t)(v11 + 18);
  if (v9 && !*((_BYTE *)v9 + 274))
  {
    v13 = (char *)v9 - 192;
    v14 = *((_QWORD *)v9 + 64);
    if (v14)
    {
      v15 = *(char **)(v14 + 8);
      if (v15)
        v13 = v15;
    }
    v9 = (WebCore::ScriptExecutionContext *)(v13 + 192);
  }
  *(_QWORD *)(a1 + 144) = &off_1E33A18C0;
  *(_QWORD *)(a1 + 152) = 0;
  v16 = WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)(v11 + 18), v9);
  *(_QWORD *)(a1 + 144) = &off_1E33A0540;
  *(_QWORD *)(a1 + 160) = 0;
  if (v9)
  {
    if (*((_BYTE *)v9 + 278))
    {
      __break(0xC471u);
      JUMPOUT(0x195D88428);
    }
    v19 = v12;
    v16 = WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)v9 + 16, &v19, (uint64_t)v18);
  }
  *(_QWORD *)a1 = &off_1E33EB398;
  *(_QWORD *)(a1 + 24) = &unk_1E33EB4B8;
  *(_QWORD *)(a1 + 120) = &unk_1E33EB4F8;
  *(_QWORD *)(a1 + 144) = &unk_1E33EB570;
  *(_QWORD *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 176) = 0;
  *(_BYTE *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_DWORD *)(a1 + 224) = 0;
  *(_DWORD *)(a1 + 228) = WebCore::TextTrack::convertKind((WebCore::TextTrack *)v16, a3);
  *(_DWORD *)(a1 + 232) = a7;
  *(_DWORD *)(a1 + 236) = 0;
  *(_BYTE *)(a1 + 240) = 0;
  *(_BYTE *)(a1 + 244) = 0;
  *(_BYTE *)(a1 + 248) = 0;
  *(_BYTE *)(a1 + 252) = 0;
  *(_BYTE *)(a1 + 256) = 0;
  return a1;
}

uint64_t WebCore::TrackBase::TrackBase(uint64_t a1, WebCore::ScriptExecutionContext *a2, int a3, uint64_t a4, WTF::AtomString *a5, _DWORD **a6, _DWORD **a7)
{
  const WTF::String *v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v27;
  uint64_t **v28;
  uint64_t *v29;

  *(_DWORD *)(a1 + 16) = 1;
  *(_QWORD *)a1 = &off_1E33A18C0;
  *(_QWORD *)(a1 + 8) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)a1, a2);
  *(_QWORD *)a1 = &off_1E33EBAC0;
  *(_QWORD *)(a1 + 24) = &unk_1E33EBB40;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 44) = ++_MergedGlobals_199;
  if (*(_BYTE *)(a4 + 8))
  {
    v14 = *(_DWORD **)a4;
    if (*(_QWORD *)a4)
      *v14 += 2;
    *(_QWORD *)(a1 + 48) = v14;
  }
  else
  {
    WTF::AtomString::number(a5);
  }
  *(_QWORD *)(a1 + 56) = a5;
  v15 = *a6;
  if (*a6)
    *v15 += 2;
  *(_QWORD *)(a1 + 64) = v15;
  v16 = *a7;
  if (*a7)
    *v16 += 2;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_QWORD *)(a1 + 72) = v16;
  *(_OWORD *)(a1 + 96) = 0u;
  v17 = *a7;
  if (WebCore::isValidBCP47LanguageTag((_BOOL8)v17, v13))
  {
    if (v17)
      *v17 += 2;
    *(_QWORD *)(a1 + 80) = v17;
  }
  *(_DWORD *)(a1 + 40) = a3;
  v27 = a1;
  v18 = atomic_load(&qword_1ECE83710);
  if (v18 != -1)
  {
    v29 = &v27;
    v28 = &v29;
    std::__call_once(&qword_1ECE83710, &v28, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::nullLogger(WebCore::TrackBase &)::$_0 &&>>);
  }
  v19 = qword_1ECE83718;
  v20 = (unsigned int *)(qword_1ECE83718 + 8);
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 + 1, v20));
  v22 = *(unsigned int **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v19;
  if (v22)
  {
    v23 = v22 + 2;
    do
    {
      v24 = __ldaxr(v23);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v23));
    if (!v25)
    {
      atomic_store(1u, v22 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v22 + 8))(v22);
    }
  }
  return a1;
}

uint64_t WebCore::TextTrack::TextTrack(uint64_t a1, WebCore::ScriptExecutionContext *a2, const WTF::AtomString *a3, WTF::StringImpl **a4, _DWORD **a5, _DWORD **a6, int a7)
{
  WebCore::ScriptExecutionContext *v9;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t *v16;
  WTF::StringImpl *v18;
  char v19;
  uint64_t v20;

  v9 = a2;
  v11 = *a4;
  if (*a4)
  {
    *(_DWORD *)v11 += 2;
    v18 = v11;
    v19 = 1;
    WebCore::TrackBase::TrackBase(a1, a2, 1, (uint64_t)&v18, 0, a5, a6);
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v12);
    else
      *(_DWORD *)v11 -= 2;
  }
  else
  {
    v18 = 0;
    v19 = 1;
    WebCore::TrackBase::TrackBase(a1, a2, 1, (uint64_t)&v18, 0, a5, a6);
  }
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 120) = &unk_1E33A4FC0;
  if (v9 && !*((_BYTE *)v9 + 274))
  {
    v13 = (char *)v9 - 192;
    v14 = *((_QWORD *)v9 + 64);
    if (v14)
    {
      v15 = *(char **)(v14 + 8);
      if (v15)
        v13 = v15;
    }
    v9 = (WebCore::ScriptExecutionContext *)(v13 + 192);
  }
  *(_QWORD *)(a1 + 144) = &off_1E33A18C0;
  *(_QWORD *)(a1 + 152) = 0;
  v16 = WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)(a1 + 144), v9);
  *(_QWORD *)(a1 + 144) = &off_1E33A0540;
  *(_QWORD *)(a1 + 160) = 0;
  if (v9)
  {
    if (*((_BYTE *)v9 + 278))
    {
      __break(0xC471u);
      JUMPOUT(0x195D887C0);
    }
    v20 = a1 + 144;
    v16 = WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)v9 + 16, &v20, (uint64_t)&v18);
  }
  *(_QWORD *)a1 = &off_1E33EB398;
  *(_QWORD *)(a1 + 24) = &unk_1E33EB4B8;
  *(_QWORD *)(a1 + 120) = &unk_1E33EB4F8;
  *(_QWORD *)(a1 + 144) = &unk_1E33EB570;
  *(_QWORD *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 176) = 0;
  *(_BYTE *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_DWORD *)(a1 + 224) = 0;
  *(_DWORD *)(a1 + 228) = WebCore::TextTrack::convertKind((WebCore::TextTrack *)v16, a3);
  *(_DWORD *)(a1 + 232) = a7;
  *(_DWORD *)(a1 + 236) = 0;
  *(_BYTE *)(a1 + 240) = 0;
  *(_BYTE *)(a1 + 244) = 0;
  *(_BYTE *)(a1 + 248) = 0;
  *(_BYTE *)(a1 + 252) = 0;
  *(_BYTE *)(a1 + 256) = 0;
  return a1;
}

void WebCore::TextTrack::~TextTrack(WebCore::TextTrack *this, void *a2)
{
  WebCore::EventTarget *v3;
  WebCore::ActiveDOMObject *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  WebCore::TextTrackCueList *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  WebCore::VTTRegion **v23;
  uint64_t v24;
  WebCore::VTTRegion *v25;
  WTF *v26;
  void *v27;
  WTF *v28;
  void *v29;
  WTF *v30;
  uint64_t v31;
  uint64_t i;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  WTF::StringImpl **v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  _QWORD *v39;

  *(_QWORD *)this = &off_1E33EB398;
  *((_QWORD *)this + 15) = &unk_1E33EB4F8;
  v3 = (WebCore::TextTrack *)((char *)this + 120);
  *((_QWORD *)this + 3) = &unk_1E33EB4B8;
  *((_QWORD *)this + 18) = &unk_1E33EB570;
  v4 = (WebCore::TextTrack *)((char *)this + 144);
  if (*((_QWORD *)this + 21))
  {
    v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v5 = off_1E33EBCE0;
    v5[1] = this;
    v39 = v5;
    WTF::WeakHashSet<WebCore::TextTrackClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)this + 25, &v39);
    v6 = v39;
    v39 = 0;
    if (v6)
      (*(void (**)(_QWORD *))(*v6 + 8))(v6);
    v7 = *((_QWORD *)this + 21);
    if (*(_DWORD *)(v7 + 20))
    {
      v8 = 0;
      do
      {
        v9 = *(_QWORD *)(*(_QWORD *)(v7 + 8) + 8 * v8);
        v10 = *(_QWORD *)(v9 + 104);
        *(_QWORD *)(v9 + 104) = 0;
        if (v10)
        {
          do
          {
            v11 = __ldaxr((unsigned int *)v10);
            v12 = v11 - 1;
          }
          while (__stlxr(v12, (unsigned int *)v10));
          if (!v12)
          {
            atomic_store(1u, (unsigned int *)v10);
            v13 = *(unsigned int *)(v10 + 28);
            if ((_DWORD)v13)
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v10 + 16), (WTF::StringImpl *)(*(_QWORD *)(v10 + 16) + 32 * v13));
            v14 = *(WTF **)(v10 + 16);
            if (v14)
            {
              *(_QWORD *)(v10 + 16) = 0;
              *(_DWORD *)(v10 + 24) = 0;
              WTF::fastFree(v14, a2);
            }
            WTF::fastFree((WTF *)v10, a2);
          }
        }
        ++v8;
        v7 = *((_QWORD *)this + 21);
      }
      while (v8 < *(unsigned int *)(v7 + 20));
    }
  }
  v15 = *((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 1)
    {
      v22 = *(unsigned int *)(v15 + 20);
      if ((_DWORD)v22)
      {
        v23 = *(WebCore::VTTRegion ***)(v15 + 8);
        v24 = 8 * v22;
        do
        {
          v25 = *v23;
          *v23 = 0;
          if (v25)
          {
            if (*((_DWORD *)v25 + 4) == 1)
            {
              WebCore::VTTRegion::~VTTRegion(v25);
              WTF::fastFree(v26, v27);
            }
            else
            {
              --*((_DWORD *)v25 + 4);
            }
          }
          ++v23;
          v24 -= 8;
        }
        while (v24);
      }
      v30 = *(WTF **)(v15 + 8);
      if (v30)
      {
        *(_QWORD *)(v15 + 8) = 0;
        *(_DWORD *)(v15 + 16) = 0;
        WTF::fastFree(v30, a2);
      }
      WTF::fastFree((WTF *)v15, a2);
    }
    else
    {
      --*(_DWORD *)v15;
    }
  }
  v16 = *((_QWORD *)this + 25);
  if (v16)
  {
    v31 = *(unsigned int *)(v16 - 4);
    if ((_DWORD)v31)
    {
      for (i = 0; i != v31; ++i)
      {
        v33 = *(unsigned int **)(v16 + 8 * i);
        if (v33 != (unsigned int *)-1)
        {
          *(_QWORD *)(v16 + 8 * i) = 0;
          if (v33)
          {
            do
            {
              v34 = __ldaxr(v33);
              v35 = v34 - 1;
            }
            while (__stlxr(v35, v33));
            if (!v35)
            {
              atomic_store(1u, v33);
              WTF::fastFree((WTF *)v33, a2);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v16 - 16), a2);
  }
  if (*((_BYTE *)this + 192))
  {
    v17 = *((unsigned int *)this + 47);
    if ((_DWORD)v17)
    {
      v36 = (WTF::StringImpl **)*((_QWORD *)this + 22);
      v37 = 8 * v17;
      do
      {
        v38 = *v36;
        *v36 = 0;
        if (v38)
        {
          if (*(_DWORD *)v38 == 2)
            WTF::StringImpl::destroy(v38, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v38 -= 2;
        }
        ++v36;
        v37 -= 8;
      }
      while (v37);
    }
    v18 = (WTF *)*((_QWORD *)this + 22);
    if (v18)
    {
      *((_QWORD *)this + 22) = 0;
      *((_DWORD *)this + 46) = 0;
      WTF::fastFree(v18, a2);
    }
  }
  v19 = (WebCore::TextTrackCueList *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 1)
    {
      WebCore::TextTrackCueList::~TextTrackCueList(v19, a2);
      WTF::fastFree(v28, v29);
    }
    else
    {
      --*(_DWORD *)v19;
    }
  }
  WebCore::ActiveDOMObject::~ActiveDOMObject(v4, a2);
  WebCore::EventTarget::~EventTarget(v3, v20);
  WebCore::TrackBase::~TrackBase(this, v21);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::TextTrack::~TextTrack(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void WebCore::TrackBase::~TrackBase(WebCore::TrackBase *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = &off_1E33EBAC0;
  *((_QWORD *)this + 3) = &unk_1E33EBB40;
  v3 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v14 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v14)
      {
        v17 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v14));
        v3 = v17;
      }
      v15 = *(WTF **)(v3 + 16);
      if (v15)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v16 = v3;
        WTF::fastFree(v15, a2);
        v3 = v16;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (unsigned int *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v6 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
    }
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  WebCore::ContextDestructionObserver::~ContextDestructionObserver(this, a2);
}

void `non-virtual thunk to'WebCore::TextTrack::~TextTrack(WebCore::TextTrack *this, void *a2)
{
  WebCore::TextTrack::~TextTrack((WebCore::TextTrack *)((char *)this - 24), a2);
}

{
  WebCore::TextTrack::~TextTrack((WebCore::TextTrack *)((char *)this - 120), a2);
}

{
  WebCore::TextTrack::~TextTrack((WebCore::TextTrack *)((char *)this - 144), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::TextTrack::~TextTrack((WebCore::TextTrack *)((char *)this - 24), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::TextTrack::~TextTrack((WebCore::TextTrack *)((char *)this - 120), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::TextTrack::~TextTrack((WebCore::TextTrack *)((char *)this - 144), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

WebCore::TextTrackCueList *WebCore::TextTrack::didMoveToNewDocument(WebCore::TextTrack *this, WebCore::Document *a2)
{
  uint64_t v4;
  WebCore::Document *v5;
  WebCore::Document *v6;
  WebCore::TextTrackCueList *result;
  void *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  WebCore::TextTrackCue **v12;
  uint64_t v13;
  WebCore::TextTrackCue *v14;
  WTF *v15;
  void *v16;
  WTF *v17;
  void *v18;

  v4 = *((_QWORD *)a2 + 88);
  v5 = a2;
  if (v4)
  {
    v6 = *(WebCore::Document **)(v4 + 8);
    v5 = a2;
    if (v6)
      v5 = v6;
  }
  WebCore::ContextDestructionObserver::observeContext(this, (WebCore::Document *)((char *)v5 + 192));
  result = (WebCore::TextTrackCueList *)WebCore::ActiveDOMObject::didMoveToNewDocument((WebCore::TextTrack *)((char *)this + 144), a2);
  if (*((_DWORD *)this + 56))
  {
    v9 = *((_QWORD *)this + 21);
    if (!v9)
    {
      v9 = WTF::fastMalloc((WTF *)0x20);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 16) = 0;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 8) = 0;
      result = (WebCore::TextTrackCueList *)*((_QWORD *)this + 21);
      *((_QWORD *)this + 21) = v9;
      if (result)
      {
        if (*(_DWORD *)result == 1)
        {
          WebCore::TextTrackCueList::~TextTrackCueList(result, v8);
          result = (WebCore::TextTrackCueList *)WTF::fastFree(v17, v18);
          v9 = *((_QWORD *)this + 21);
          if (!v9)
            return result;
        }
        else
        {
          --*(_DWORD *)result;
        }
      }
    }
    v10 = (*(_DWORD *)v9)++;
    v11 = *(unsigned int *)(v9 + 20);
    if ((_DWORD)v11)
    {
      v12 = *(WebCore::TextTrackCue ***)(v9 + 8);
      v13 = 8 * v11;
      do
      {
        v14 = *v12;
        if (*v12)
        {
          ++*((_DWORD *)v14 + 6);
          result = (WebCore::TextTrackCueList *)WebCore::TextTrackCue::didMoveToNewDocument(v14, a2);
          if (*((_DWORD *)v14 + 6) == 1)
            result = (WebCore::TextTrackCueList *)(*(uint64_t (**)(WebCore::TextTrackCue *))(*(_QWORD *)v14 + 72))(v14);
          else
            --*((_DWORD *)v14 + 6);
        }
        else
        {
          result = (WebCore::TextTrackCueList *)WebCore::TextTrackCue::didMoveToNewDocument(0, a2);
        }
        ++v12;
        v13 -= 8;
      }
      while (v13);
      v10 = *(_DWORD *)v9 - 1;
    }
    if (v10)
    {
      *(_DWORD *)v9 = v10;
    }
    else
    {
      WebCore::TextTrackCueList::~TextTrackCueList((WebCore::TextTrackCueList *)v9, v8);
      return (WebCore::TextTrackCueList *)WTF::fastFree(v15, v16);
    }
  }
  return result;
}

uint64_t *WebCore::TrackBase::didMoveToNewDocument(WebCore::TrackBase *this, WebCore::Document *a2)
{
  uint64_t v2;
  WebCore::Document *v3;

  v2 = *((_QWORD *)a2 + 88);
  if (v2)
  {
    v3 = *(WebCore::Document **)(v2 + 8);
    if (v3)
      a2 = v3;
  }
  return WebCore::ContextDestructionObserver::observeContext(this, (WebCore::Document *)((char *)a2 + 192));
}

BOOL WebCore::TextTrack::enabled(WebCore::TextTrack *this)
{
  return *((_DWORD *)this + 56) != 0;
}

BOOL WebCore::TextTrack::isValidKindKeyword(WebCore::TextTrack *this, const WTF::AtomString *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::TextTrack *v9;
  WebCore::TextTrack *v10;
  WebCore::TextTrack *v11;
  WebCore::TextTrack *v12;
  uint64_t v13;

  v2 = *(_QWORD *)this;
  if (*(_QWORD *)this == WebCore::subtitlesAtomData || v2 == WebCore::captionsAtomData)
    return 1;
  {
    v4 = WebCore::descriptionsKeyword(void)::descriptions;
  }
  else
  {
    v10 = this;
    WTF::AtomStringImpl::add();
    this = v10;
    v4 = v13;
    WebCore::descriptionsKeyword(void)::descriptions = v13;
    v2 = *(_QWORD *)v10;
  }
  if (v2 == v4)
    return 1;
  {
    v5 = WebCore::chaptersKeyword(void)::chapters;
  }
  else
  {
    v11 = this;
    WTF::AtomStringImpl::add();
    this = v11;
    v5 = v13;
    WebCore::chaptersKeyword(void)::chapters = v13;
    v2 = *(_QWORD *)v11;
  }
  if (v2 == v5)
    return 1;
  {
    v6 = WebCore::metadataKeyword(void)::metadata;
  }
  else
  {
    v12 = this;
    WTF::AtomStringImpl::add();
    this = v12;
    v6 = v13;
    WebCore::metadataKeyword(void)::metadata = v13;
    v2 = *(_QWORD *)v12;
  }
  if (v2 == v6)
    return 1;
  {
    v7 = WebCore::forcedKeyword(void)::forced;
  }
  else
  {
    v9 = this;
    WTF::AtomStringImpl::add();
    v7 = v13;
    WebCore::forcedKeyword(void)::forced = v13;
    v2 = *(_QWORD *)v9;
  }
  return v2 == v7;
}

uint64_t *WebCore::TextTrack::kindKeyword(WebCore::TextTrack *this)
{
  int v1;
  uint64_t *result;
  uint64_t v3;

  v1 = *((_DWORD *)this + 57);
  result = &WebCore::captionsAtomData;
  switch(v1)
  {
    case 1:
      return result;
    case 2:
      result = &WebCore::descriptionsKeyword(void)::descriptions;
      {
        WTF::AtomStringImpl::add();
        result = &WebCore::descriptionsKeyword(void)::descriptions;
        WebCore::descriptionsKeyword(void)::descriptions = v3;
      }
      break;
    case 3:
      result = &WebCore::chaptersKeyword(void)::chapters;
      {
        WTF::AtomStringImpl::add();
        result = &WebCore::chaptersKeyword(void)::chapters;
        WebCore::chaptersKeyword(void)::chapters = v3;
      }
      break;
    case 4:
      result = &WebCore::metadataKeyword(void)::metadata;
      {
        WTF::AtomStringImpl::add();
        result = &WebCore::metadataKeyword(void)::metadata;
        WebCore::metadataKeyword(void)::metadata = v3;
      }
      break;
    case 5:
      result = &WebCore::forcedKeyword(void)::forced;
      {
        WTF::AtomStringImpl::add();
        result = &WebCore::forcedKeyword(void)::forced;
        WebCore::forcedKeyword(void)::forced = v3;
      }
      break;
    default:
      result = &WebCore::subtitlesAtomData;
      break;
  }
  return result;
}

char *WebCore::TrackBase::logChannel(WebCore::TrackBase *this)
{
  return &WebCore::LogMedia;
}

uint64_t WebCore::TextTrack::setKindKeywordIgnoringASCIICase(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  int *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  _QWORD v19[4];

  v3 = result;
  if (a2)
  {
    switch((int)a3)
    {
      case 6:
        if ((a3 & 0xFF00000000) != 0)
        {
          if ((*(_BYTE *)a2 & 0xDF) != 0x46
            || (*(_BYTE *)(a2 + 1) & 0xDF) != 0x4F
            || (*(_BYTE *)(a2 + 2) & 0xDF) != 0x52
            || (*(_BYTE *)(a2 + 3) & 0xDF) != 0x43
            || (*(_BYTE *)(a2 + 4) & 0xDF) != 0x45)
          {
            goto LABEL_3;
          }
          v9 = *(unsigned __int8 *)(a2 + 5);
        }
        else
        {
          if ((*(_WORD *)a2 & 0xFFDF) != 0x46
            || (*(_WORD *)(a2 + 2) & 0xFFDF) != 0x4F
            || (*(_WORD *)(a2 + 4) & 0xFFDF) != 0x52
            || (*(_WORD *)(a2 + 6) & 0xFFDF) != 0x43
            || (*(_WORD *)(a2 + 8) & 0xFFDF) != 0x45)
          {
            goto LABEL_3;
          }
          v9 = *(unsigned __int16 *)(a2 + 10);
        }
        if ((v9 & 0xFFFFFFDF) != 0x44)
          goto LABEL_3;
        v5 = (int *)(result + 228);
        v10 = *(_DWORD *)(result + 228);
        *(_DWORD *)(result + 228) = 5;
        if (v10 != 5)
          goto LABEL_54;
        return result;
      case 8:
        if ((a3 & 0xFF00000000) != 0)
        {
          if ((*(_BYTE *)a2 & 0xDF) == 0x43
            && (*(_BYTE *)(a2 + 1) & 0xDF) == 0x41
            && (*(_BYTE *)(a2 + 2) & 0xDF) == 0x50
            && (*(_BYTE *)(a2 + 3) & 0xDF) == 0x54
            && (*(_BYTE *)(a2 + 4) & 0xDF) == 0x49
            && (*(_BYTE *)(a2 + 5) & 0xDF) == 0x4F
            && (*(_BYTE *)(a2 + 6) & 0xDF) == 0x4E
            && (*(_BYTE *)(a2 + 7) & 0xDF) == 0x53)
          {
LABEL_14:
            v5 = (int *)(result + 228);
            v6 = *(_DWORD *)(result + 228);
            *(_DWORD *)(result + 228) = 1;
            if (v6 != 1)
              goto LABEL_54;
            return result;
          }
          if ((*(_BYTE *)a2 & 0xDF) != 0x43
            || (*(_BYTE *)(a2 + 1) & 0xDF) != 0x48
            || (*(_BYTE *)(a2 + 2) & 0xDF) != 0x41
            || (*(_BYTE *)(a2 + 3) & 0xDF) != 0x50
            || (*(_BYTE *)(a2 + 4) & 0xDF) != 0x54
            || (*(_BYTE *)(a2 + 5) & 0xDF) != 0x45
            || (*(_BYTE *)(a2 + 6) & 0xDF) != 0x52
            || (*(_BYTE *)(a2 + 7) & 0xDF) != 0x53)
          {
            goto LABEL_3;
          }
        }
        else
        {
          if ((*(_WORD *)a2 & 0xFFDF) != 0x43)
            goto LABEL_3;
          if ((*(_WORD *)(a2 + 2) & 0xFFDF) == 0x41
            && (*(_WORD *)(a2 + 4) & 0xFFDF) == 0x50
            && (*(_WORD *)(a2 + 6) & 0xFFDF) == 0x54
            && (*(_WORD *)(a2 + 8) & 0xFFDF) == 0x49
            && (*(_WORD *)(a2 + 10) & 0xFFDF) == 0x4F
            && (*(_WORD *)(a2 + 12) & 0xFFDF) == 0x4E
            && (*(_WORD *)(a2 + 14) & 0xFFDF) == 0x53)
          {
            goto LABEL_14;
          }
          if ((*(_WORD *)(a2 + 2) & 0xFFDF) != 0x48
            || (*(_WORD *)(a2 + 4) & 0xFFDF) != 0x41
            || (*(_WORD *)(a2 + 6) & 0xFFDF) != 0x50
            || (*(_WORD *)(a2 + 8) & 0xFFDF) != 0x54
            || (*(_WORD *)(a2 + 10) & 0xFFDF) != 0x45
            || (*(_WORD *)(a2 + 12) & 0xFFDF) != 0x52
            || (*(_WORD *)(a2 + 14) & 0xFFDF) != 0x53)
          {
            goto LABEL_3;
          }
        }
        v5 = (int *)(result + 228);
        v18 = *(_DWORD *)(result + 228);
        *(_DWORD *)(result + 228) = 3;
        if (v18 != 3)
          goto LABEL_54;
        return result;
      case 9:
        if ((a3 & 0xFF00000000) != 0)
        {
          if ((*(_BYTE *)a2 & 0xDF) != 0x53
            || (*(_BYTE *)(a2 + 1) & 0xDF) != 0x55
            || (*(_BYTE *)(a2 + 2) & 0xDF) != 0x42
            || (*(_BYTE *)(a2 + 3) & 0xDF) != 0x54
            || (*(_BYTE *)(a2 + 4) & 0xDF) != 0x49
            || (*(_BYTE *)(a2 + 5) & 0xDF) != 0x54
            || (*(_BYTE *)(a2 + 6) & 0xDF) != 0x4C
            || (*(_BYTE *)(a2 + 7) & 0xDF) != 0x45)
          {
            goto LABEL_3;
          }
          v11 = *(unsigned __int8 *)(a2 + 8);
        }
        else
        {
          if ((*(_WORD *)a2 & 0xFFDF) != 0x53
            || (*(_WORD *)(a2 + 2) & 0xFFDF) != 0x55
            || (*(_WORD *)(a2 + 4) & 0xFFDF) != 0x42
            || (*(_WORD *)(a2 + 6) & 0xFFDF) != 0x54
            || (*(_WORD *)(a2 + 8) & 0xFFDF) != 0x49
            || (*(_WORD *)(a2 + 10) & 0xFFDF) != 0x54
            || (*(_WORD *)(a2 + 12) & 0xFFDF) != 0x4C
            || (*(_WORD *)(a2 + 14) & 0xFFDF) != 0x45)
          {
            goto LABEL_3;
          }
          v11 = *(unsigned __int16 *)(a2 + 16);
        }
        if ((v11 & 0xFFFFFFDF) != 0x53)
          goto LABEL_3;
        break;
      case 12:
        if ((a3 & 0xFF00000000) != 0)
        {
          if ((*(_BYTE *)a2 & 0xDF) != 0x44
            || (*(_BYTE *)(a2 + 1) & 0xDF) != 0x45
            || (*(_BYTE *)(a2 + 2) & 0xDF) != 0x53
            || (*(_BYTE *)(a2 + 3) & 0xDF) != 0x43
            || (*(_BYTE *)(a2 + 4) & 0xDF) != 0x52
            || (*(_BYTE *)(a2 + 5) & 0xDF) != 0x49
            || (*(_BYTE *)(a2 + 6) & 0xDF) != 0x50
            || (*(_BYTE *)(a2 + 7) & 0xDF) != 0x54
            || (*(_BYTE *)(a2 + 8) & 0xDF) != 0x49
            || (*(_BYTE *)(a2 + 9) & 0xDF) != 0x4F
            || (*(_BYTE *)(a2 + 10) & 0xDF) != 0x4E)
          {
            goto LABEL_3;
          }
          v7 = *(unsigned __int8 *)(a2 + 11);
        }
        else
        {
          if ((*(_WORD *)a2 & 0xFFDF) != 0x44
            || (*(_WORD *)(a2 + 2) & 0xFFDF) != 0x45
            || (*(_WORD *)(a2 + 4) & 0xFFDF) != 0x53
            || (*(_WORD *)(a2 + 6) & 0xFFDF) != 0x43
            || (*(_WORD *)(a2 + 8) & 0xFFDF) != 0x52
            || (*(_WORD *)(a2 + 10) & 0xFFDF) != 0x49
            || (*(_WORD *)(a2 + 12) & 0xFFDF) != 0x50
            || (*(_WORD *)(a2 + 14) & 0xFFDF) != 0x54
            || (*(_WORD *)(a2 + 16) & 0xFFDF) != 0x49
            || (*(_WORD *)(a2 + 18) & 0xFFDF) != 0x4F
            || (*(_WORD *)(a2 + 20) & 0xFFDF) != 0x4E)
          {
            goto LABEL_3;
          }
          v7 = *(unsigned __int16 *)(a2 + 22);
        }
        if ((v7 & 0xFFFFFFDF) == 0x53)
        {
          v5 = (int *)(result + 228);
          v8 = *(_DWORD *)(result + 228);
          *(_DWORD *)(result + 228) = 2;
          if (v8 != 2)
            goto LABEL_54;
          return result;
        }
LABEL_3:
        v5 = (int *)(result + 228);
        v4 = *(_DWORD *)(result + 228);
        *(_DWORD *)(result + 228) = 4;
        if (v4 != 4)
          goto LABEL_54;
        return result;
      default:
        goto LABEL_3;
    }
  }
  v5 = (int *)(result + 228);
  v12 = *(_DWORD *)(result + 228);
  *(_DWORD *)(result + 228) = 0;
  if (v12)
  {
LABEL_54:
    v13 = *(_QWORD *)(result + 88);
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 264))(result);
    v15 = *(_QWORD *)(v3 + 96);
    v19[0] = v14;
    v19[1] = v16;
    v19[2] = "setKind";
    v19[3] = v15;
    if (*(_BYTE *)(v13 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::TextTrack::Kind>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v19, v5);
    v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v17 = off_1E33EBD08;
    v17[1] = v3;
    v19[0] = v17;
    WTF::WeakHashSet<WebCore::TextTrackClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)(v3 + 200), v19);
    result = v19[0];
    v19[0] = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t WebCore::TextTrack::setMode(uint64_t result, int a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  WTF::StringImpl *v15;
  NSObject *v16;
  uint64_t v17;
  void *v18;
  char *v19;
  uint64_t v20;
  unsigned __int8 *v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::Logger *v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::Logger *v34;
  uint64_t v35;
  WTF::StringImpl **v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  int v40;
  WTF::StringImpl *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  int v49;
  _QWORD v50[4];
  WTF::Logger *v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  __int128 buf;
  int v56;
  WTF::StringImpl *v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(result + 224) == a2)
    return result;
  v2 = a2;
  v3 = result;
  v4 = *(_QWORD *)(result + 88);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 264))(result);
  v6 = *(_QWORD *)(v3 + 96);
  v50[0] = v5;
  v50[1] = v7;
  v50[2] = "setMode";
  v50[3] = v6;
  if (*(_BYTE *)(v4 + 12))
  {
    result = WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v50);
    {
      WebCore::convertEnumerationToString(WebCore::TextTrack::Mode)::$_0::operator() const(void)::impl += 2;
      WebCore::convertEnumerationToString(WebCore::TextTrack::Mode)::$_1::operator() const(void)::impl += 2;
      WebCore::convertEnumerationToString(WebCore::TextTrack::Mode)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::TextTrack::Mode)::$_0::operator() const(void)::impl;
      *(_QWORD *)algn_1EE2F4C38 = &WebCore::convertEnumerationToString(WebCore::TextTrack::Mode)::$_1::operator() const(void)::impl;
      WebCore::convertEnumerationToString(WebCore::TextTrack::Mode)::$_2::operator() const(void)::impl += 2;
      qword_1EE2F4C40 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::TextTrack::Mode)::$_2::operator() const(void)::impl;
    }
    v9 = WebCore::convertEnumerationToString(WebCore::TextTrack::Mode)::values[v2];
    if (v9)
      *(_DWORD *)v9 += 2;
    if (v53)
    {
      v10 = *((_DWORD *)v53 + 1);
      if (v9)
      {
LABEL_9:
        v11 = *(_DWORD *)(v9 + 4);
LABEL_10:
        if (((v11 | v10) & 0x80000000) == 0)
        {
          v12 = (v10 + v11);
          if (!__OFADD__(v10, v11))
          {
            if (v53)
            {
              v13 = *((_DWORD *)v53 + 4);
              v14 = (v13 >> 2) & 1;
              if (!v9 || (v13 & 4) == 0)
              {
LABEL_16:
                result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v12, v14, (uint64_t)v53, v9, &v54);
                if (v54)
                {
                  if (v9)
                  {
                    if (*(_DWORD *)v9 == 2)
                      WTF::StringImpl::destroy((WTF::StringImpl *)v9, v8);
                    else
                      *(_DWORD *)v9 -= 2;
                  }
                  goto LABEL_20;
                }
LABEL_101:
                __break(0xC471u);
                return result;
              }
LABEL_15:
              v14 = (*(unsigned __int8 *)(v9 + 16) >> 2) & 1;
              goto LABEL_16;
            }
            if (v9)
              goto LABEL_15;
            if (!(_DWORD)v12)
            {
              v48 = MEMORY[0x1E0CBEF70];
              *MEMORY[0x1E0CBEF70] += 2;
              goto LABEL_98;
            }
            if ((v12 & 0x80000000) == 0)
            {
              result = WTF::tryFastCompactMalloc((WTF *)(v12 + 20));
              v48 = buf;
              if ((_QWORD)buf)
              {
                *(_DWORD *)buf = 2;
                *(_DWORD *)(v48 + 4) = v12;
                *(_QWORD *)(v48 + 8) = v48 + 20;
                *(_DWORD *)(v48 + 16) = 4;
LABEL_98:
                v54 = (WTF::StringImpl *)v48;
LABEL_20:
                v15 = v53;
                v53 = 0;
                if (v15)
                {
                  if (*(_DWORD *)v15 == 2)
                    WTF::StringImpl::destroy(v15, v8);
                  else
                    *(_DWORD *)v15 -= 2;
                }
                v16 = qword_1ECE7C4A0;
                v17 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
                if ((_DWORD)v17)
                {
                  WTF::String::utf8();
                  v19 = v51 ? (char *)v51 + 16 : 0;
                  LODWORD(buf) = 136446210;
                  *(_QWORD *)((char *)&buf + 4) = v19;
                  _os_log_impl(&dword_1940B8000, v16, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
                  v17 = (uint64_t)v51;
                  v51 = 0;
                  if (v17)
                  {
                    if (*(_DWORD *)v17 == 1)
                      v17 = WTF::fastFree((WTF *)v17, v18);
                    else
                      --*(_DWORD *)v17;
                  }
                }
                if (WebCore::LogMedia)
                {
                  v20 = v2;
                  v21 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
                  while (1)
                  {
                    v22 = *v21;
                    if ((v22 & 1) != 0)
                      break;
                    v23 = __ldaxr(v21);
                    if (v23 == v22)
                    {
                      if (!__stxr(v22 | 1, v21))
                      {
                        v49 = v2;
                        v24 = WTF::Logger::observers((WTF::Logger *)v17);
                        v25 = *(unsigned int *)(v24 + 12);
                        if ((_DWORD)v25)
                        {
                          v26 = *(uint64_t **)v24;
                          v27 = *(_QWORD *)v24 + 8 * v25;
                          do
                          {
                            v28 = *v26;
                            LODWORD(buf) = 0;
                            WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v50);
                            v56 = 0;
                            {
                              WebCore::convertEnumerationToString(WebCore::TextTrack::Mode)::$_0::operator() const(void)::impl += 2;
                              WebCore::convertEnumerationToString(WebCore::TextTrack::Mode)::$_1::operator() const(void)::impl += 2;
                              WebCore::convertEnumerationToString(WebCore::TextTrack::Mode)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::TextTrack::Mode)::$_0::operator() const(void)::impl;
                              *(_QWORD *)algn_1EE2F4C38 = &WebCore::convertEnumerationToString(WebCore::TextTrack::Mode)::$_1::operator() const(void)::impl;
                              WebCore::convertEnumerationToString(WebCore::TextTrack::Mode)::$_2::operator() const(void)::impl += 2;
                              qword_1EE2F4C40 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::TextTrack::Mode)::$_2::operator() const(void)::impl;
                            }
                            v29 = (WTF::StringImpl *)WebCore::convertEnumerationToString(WebCore::TextTrack::Mode)::values[v20];
                            if (v29)
                              *(_DWORD *)v29 += 2;
                            v57 = v29;
                            v51 = 0;
                            v52 = 0;
                            v30 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
                            LODWORD(v52) = 2;
                            v51 = v30;
                            v31 = HIDWORD(v52);
                            *((_DWORD *)v30 + 4 * HIDWORD(v52)) = buf;
                            v32 = *((_QWORD *)&buf + 1);
                            if (*((_QWORD *)&buf + 1))
                              **((_DWORD **)&buf + 1) += 2;
                            *((_QWORD *)v30 + 2 * v31 + 1) = v32;
                            *((_DWORD *)v30 + 4 * (v31 + 1)) = v56;
                            v33 = v57;
                            if (v57)
                              *(_DWORD *)v57 += 2;
                            *((_QWORD *)v30 + 2 * (v31 + 1) + 1) = v33;
                            HIDWORD(v52) = v31 + 2;
                            (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v28 + 16))(v28, &WebCore::LogMedia, 0, &v51);
                            v34 = v51;
                            if (HIDWORD(v52))
                            {
                              v35 = 16 * HIDWORD(v52);
                              v36 = (WTF::StringImpl **)((char *)v51 + 8);
                              do
                              {
                                v37 = *v36;
                                *v36 = 0;
                                if (v37)
                                {
                                  if (*(_DWORD *)v37 == 2)
                                    WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v18);
                                  else
                                    *(_DWORD *)v37 -= 2;
                                }
                                v36 += 2;
                                v35 -= 16;
                              }
                              while (v35);
                              v34 = v51;
                            }
                            if (v34)
                            {
                              v51 = 0;
                              LODWORD(v52) = 0;
                              WTF::fastFree(v34, v18);
                            }
                            v38 = v57;
                            v57 = 0;
                            if (v38)
                            {
                              if (*(_DWORD *)v38 == 2)
                                WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v18);
                              else
                                *(_DWORD *)v38 -= 2;
                            }
                            v39 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                            *((_QWORD *)&buf + 1) = 0;
                            if (v39)
                            {
                              if (*(_DWORD *)v39 == 2)
                                WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v18);
                              else
                                *(_DWORD *)v39 -= 2;
                            }
                            ++v26;
                          }
                          while (v26 != (uint64_t *)v27);
                        }
                        v40 = __ldxr(v21);
                        if (v40 == 1)
                        {
                          v2 = v49;
                          if (!__stlxr(0, v21))
                            break;
                        }
                        else
                        {
                          __clrex();
                          v2 = v49;
                        }
                        WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                        break;
                      }
                    }
                    else
                    {
                      __clrex();
                    }
                  }
                }
                v41 = v54;
                v54 = 0;
                if (v41)
                {
                  if (*(_DWORD *)v41 == 2)
                    WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v18);
                  else
                    *(_DWORD *)v41 -= 2;
                }
                goto LABEL_75;
              }
            }
          }
        }
        v54 = 0;
        goto LABEL_101;
      }
    }
    else
    {
      v10 = 0;
      if (v9)
        goto LABEL_9;
    }
    v11 = 0;
    goto LABEL_10;
  }
LABEL_75:
  if (v2 != 2)
  {
    if (!v2)
    {
      if (*(_QWORD *)(v3 + 168))
      {
        v42 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v42 = off_1E33EBD30;
        v42[1] = v3;
        *(_QWORD *)&buf = v42;
        WTF::WeakHashSet<WebCore::TextTrackClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)(v3 + 200), &buf);
        v43 = buf;
        *(_QWORD *)&buf = 0;
        if (v43)
          (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
      }
    }
    v44 = *(_QWORD *)(v3 + 168);
    if (v44 && *(_DWORD *)(v44 + 20))
    {
      v45 = 0;
      do
      {
        v46 = *(_QWORD *)(*(_QWORD *)(v44 + 8) + 8 * v45);
        (*(void (**)(uint64_t))(*(_QWORD *)v46 + 160))(v46);
        ++v45;
        v44 = *(_QWORD *)(v3 + 168);
      }
      while (v45 < *(unsigned int *)(v44 + 20));
    }
  }
  *(_DWORD *)(v3 + 224) = v2;
  v47 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v47 = off_1E33EBD58;
  v47[1] = v3;
  *(_QWORD *)&buf = v47;
  WTF::WeakHashSet<WebCore::TextTrackClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)(v3 + 200), &buf);
  result = buf;
  *(_QWORD *)&buf = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

WTF *WebCore::TextTrack::removeAllCues(WTF *this)
{
  WTF *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  WTF *v16;
  _DWORD *v17;
  _DWORD ***v18;
  _DWORD **v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD **v24;
  uint64_t v25;
  _DWORD *v26;
  _QWORD v27[4];

  if (!*((_QWORD *)this + 21))
    return this;
  v1 = this;
  v2 = *((_QWORD *)this + 11);
  v3 = (*(uint64_t (**)(WTF *))(*(_QWORD *)this + 264))(this);
  v4 = *((_QWORD *)v1 + 12);
  v27[0] = v3;
  v27[1] = v5;
  v27[2] = "removeAllCues";
  v27[3] = v4;
  if (*(_BYTE *)(v2 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v27);
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v6 = off_1E33EBD80;
  v6[1] = v1;
  v27[0] = v6;
  WTF::WeakHashSet<WebCore::TextTrackClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)v1 + 25, v27);
  this = (WTF *)v27[0];
  v27[0] = 0;
  if (this)
    this = (WTF *)(*(uint64_t (**)(WTF *))(*(_QWORD *)this + 8))(this);
  v8 = *((_QWORD *)v1 + 21);
  if (*(_DWORD *)(v8 + 20))
  {
    v9 = 0;
    do
    {
      v10 = *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8 * v9);
      v11 = *(_QWORD *)(v10 + 104);
      *(_QWORD *)(v10 + 104) = 0;
      if (v11)
      {
        do
        {
          v12 = __ldaxr((unsigned int *)v11);
          v13 = v12 - 1;
        }
        while (__stlxr(v13, (unsigned int *)v11));
        if (!v13)
        {
          atomic_store(1u, (unsigned int *)v11);
          v15 = *(unsigned int *)(v11 + 28);
          if ((_DWORD)v15)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v11 + 16), (WTF::StringImpl *)(*(_QWORD *)(v11 + 16) + 32 * v15));
          v16 = *(WTF **)(v11 + 16);
          if (v16)
          {
            *(_QWORD *)(v11 + 16) = 0;
            *(_DWORD *)(v11 + 24) = 0;
            WTF::fastFree(v16, v7);
          }
          this = (WTF *)WTF::fastFree((WTF *)v11, v7);
        }
      }
      ++v9;
      v8 = *((_QWORD *)v1 + 21);
      v14 = *(unsigned int *)(v8 + 20);
    }
    while (v9 < v14);
    v17 = (_DWORD *)(v8 + 16);
    if (!*(_DWORD *)(v8 + 16))
      goto LABEL_31;
    v18 = (_DWORD ***)(v8 + 8);
    if ((_DWORD)v14)
    {
      v19 = *v18;
      v20 = 8 * v14;
      do
      {
        v21 = *v19;
        *v19 = 0;
        if (v21)
        {
          if (v21[6] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 72))(v21);
          else
            --v21[6];
        }
        ++v19;
        v20 -= 8;
      }
      while (v20);
      *(_DWORD *)(v8 + 20) = 0;
    }
    goto LABEL_29;
  }
  v17 = (_DWORD *)(v8 + 16);
  if (*(_DWORD *)(v8 + 16))
  {
    v18 = (_DWORD ***)(v8 + 8);
LABEL_29:
    this = *(WTF **)(v8 + 8);
    if (this)
    {
      *v18 = 0;
      *v17 = 0;
      this = (WTF *)WTF::fastFree(this, v7);
    }
  }
LABEL_31:
  v22 = *(_QWORD *)(v8 + 24);
  if (v22 && *(_DWORD *)(v22 + 16))
  {
    v23 = *(unsigned int *)(v22 + 20);
    if ((_DWORD)v23)
    {
      v24 = *(_DWORD ***)(v22 + 8);
      v25 = 8 * v23;
      do
      {
        v26 = *v24;
        *v24 = 0;
        if (v26)
        {
          if (v26[6] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v26 + 72))(v26);
          else
            --v26[6];
        }
        ++v24;
        v25 -= 8;
      }
      while (v25);
      *(_DWORD *)(v22 + 20) = 0;
    }
    this = *(WTF **)(v22 + 8);
    if (this)
    {
      *(_QWORD *)(v22 + 8) = 0;
      *(_DWORD *)(v22 + 16) = 0;
      return (WTF *)WTF::fastFree(this, v7);
    }
  }
  return this;
}

uint64_t WebCore::TextTrackCueList::activeCues(WebCore::TextTrackCueList *this, void *a2)
{
  uint64_t v3;
  WebCore::TextTrackCueList *v4;
  uint64_t v5;
  char *v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD **v16;
  uint64_t v17;
  _DWORD *v18;
  WTF *v19;
  WTF *v21;
  void *v22;
  char *v23;
  uint64_t v24;

  if (!*((_QWORD *)this + 3))
  {
    v3 = WTF::fastMalloc((WTF *)0x20);
    *(_DWORD *)v3 = 1;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 24) = 0;
    *(_QWORD *)(v3 + 8) = 0;
    v4 = (WebCore::TextTrackCueList *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = v3;
    if (v4)
    {
      if (*(_DWORD *)v4 == 1)
      {
        WebCore::TextTrackCueList::~TextTrackCueList(v4, a2);
        WTF::fastFree(v21, v22);
      }
      else
      {
        --*(_DWORD *)v4;
      }
    }
  }
  v23 = 0;
  v24 = 0;
  v5 = *((unsigned int *)this + 5);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = 0;
    v8 = *((_QWORD *)this + 1);
    v9 = 8 * v5;
    do
    {
      v10 = *(_QWORD *)v8;
      if (*(_BYTE *)(*(_QWORD *)v8 + 133))
      {
        v11 = *(_QWORD *)(v10 + 104);
        if (v11)
        {
          v12 = *(_QWORD *)(v11 + 8);
          if (v12)
          {
            if (*(_DWORD *)(v12 + 104))
            {
              if (v7 == (_DWORD)v24)
              {
                v13 = *(_QWORD *)WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(&v23, v7 + 1, v8);
                if (v13)
                  ++*(_DWORD *)(v13 + 24);
                v7 = HIDWORD(v24);
                v6 = v23;
                *(_QWORD *)&v23[8 * HIDWORD(v24)] = v13;
              }
              else
              {
                ++*(_DWORD *)(v10 + 24);
                *(_QWORD *)&v6[8 * v7] = v10;
              }
              HIDWORD(v24) = ++v7;
            }
          }
        }
      }
      v8 += 8;
      v9 -= 8;
    }
    while (v9);
  }
  else
  {
    v7 = 0;
  }
  v14 = *((_QWORD *)this + 3);
  v15 = *(unsigned int *)(v14 + 20);
  if ((_DWORD)v15)
  {
    v16 = *(_DWORD ***)(v14 + 8);
    v17 = 8 * v15;
    do
    {
      v18 = *v16;
      *v16 = 0;
      if (v18)
      {
        if (v18[6] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 72))(v18);
        else
          --v18[6];
      }
      ++v16;
      v17 -= 8;
    }
    while (v17);
  }
  v19 = *(WTF **)(v14 + 8);
  if (v19)
  {
    *(_QWORD *)(v14 + 8) = 0;
    *(_DWORD *)(v14 + 16) = 0;
    WTF::fastFree(v19, a2);
  }
  *(_QWORD *)(v14 + 8) = v23;
  *(_DWORD *)(v14 + 16) = v24;
  *(_DWORD *)(v14 + 20) = v7;
  return *((_QWORD *)this + 3);
}

uint64_t WebCore::TextTrack::addCue@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  char v17;
  uint64_t v18;
  unsigned int *v19;
  void *v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  void *v27;
  WebCore::TextTrackCueList *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  WTF *v32;
  void *v33;
  uint64_t v34;
  WTF *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  char v40;
  uint64_t v41[4];

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 128))(*a2);
  if ((_DWORD)result == 1 && *(_DWORD *)(a1 + 228) != 4)
  {
    *(_BYTE *)a3 = 20;
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 16) = 1;
    return result;
  }
  v7 = *(_QWORD *)(a1 + 88);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 264))(a1);
  v8 = *(_QWORD *)(a1 + 96);
  v41[0] = result;
  v41[1] = v9;
  v41[2] = (uint64_t)"addCue";
  v41[3] = v8;
  v10 = *a2;
  if (*(_BYTE *)(v7 + 12))
  {
    if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
    {
      result = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::TextTrackCue>((uint64_t)&WebCore::LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)v41, v10);
      v10 = *a2;
    }
  }
  if ((*(_BYTE *)(v10 + 76) & 1) == 0 || (*(_BYTE *)(v10 + 92) & 1) == 0)
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    return result;
  }
  v12 = *(_QWORD *)(v10 + 104);
  if (v12 && (v13 = *(_QWORD *)(v12 + 8)) != 0)
  {
    v14 = (_DWORD *)(v13 - 120);
    ++*(_DWORD *)(v13 - 104);
    if (v13 - 120 == a1)
    {
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      v14 = (_DWORD *)a1;
      *(_QWORD *)(a3 + 16) = 0;
LABEL_37:
      if (v14[4] == 1)
        return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v14 + 16))(v14);
      --v14[4];
      return result;
    }
    (*(void (**)(uint64_t *__return_ptr, _DWORD *, uint64_t))(*(_QWORD *)v14 + 128))(&v38, v14, v10);
    if (v40)
    {
      v16 = v39;
      v39 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 != 2)
        {
          v17 = 0;
          *(_DWORD *)v16 -= 2;
          goto LABEL_22;
        }
        WTF::StringImpl::destroy(v16, v15);
      }
    }
    v17 = 0;
  }
  else
  {
    v14 = 0;
    v17 = 1;
  }
LABEL_22:
  v18 = *a2;
  v19 = (unsigned int *)WTF::WeakPtr<WebCore::TextTrack,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::TextTrack>(a1);
  v21 = v19;
  if (v19)
  {
    do
      v22 = __ldaxr(v19);
    while (__stlxr(v22 + 1, v19));
  }
  v23 = *(_QWORD *)(v18 + 104);
  *(_QWORD *)(v18 + 104) = v21;
  if (v23)
  {
    do
    {
      v24 = __ldaxr((unsigned int *)v23);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, (unsigned int *)v23));
    if (!v25)
    {
      atomic_store(1u, (unsigned int *)v23);
      v34 = *(unsigned int *)(v23 + 28);
      if ((_DWORD)v34)
      {
        v37 = v23;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v23 + 16), (WTF::StringImpl *)(*(_QWORD *)(v23 + 16) + 32 * v34));
        v23 = v37;
      }
      v35 = *(WTF **)(v23 + 16);
      if (v35)
      {
        *(_QWORD *)(v23 + 16) = 0;
        *(_DWORD *)(v23 + 24) = 0;
        v36 = v23;
        WTF::fastFree(v35, v20);
        v23 = v36;
      }
      WTF::fastFree((WTF *)v23, v20);
    }
  }
  v26 = *(_QWORD *)(a1 + 168);
  if (!v26)
  {
    v26 = WTF::fastMalloc((WTF *)0x20);
    *(_DWORD *)v26 = 1;
    *(_QWORD *)(v26 + 16) = 0;
    *(_QWORD *)(v26 + 24) = 0;
    *(_QWORD *)(v26 + 8) = 0;
    v28 = *(WebCore::TextTrackCueList **)(a1 + 168);
    *(_QWORD *)(a1 + 168) = v26;
    if (v28)
    {
      if (*(_DWORD *)v28 == 1)
      {
        WebCore::TextTrackCueList::~TextTrackCueList(v28, v27);
        WTF::fastFree(v32, v33);
        v26 = *(_QWORD *)(a1 + 168);
      }
      else
      {
        --*(_DWORD *)v28;
      }
    }
  }
  v29 = *a2;
  *(_DWORD *)(v29 + 24) = *(_DWORD *)(*a2 + 24) + 1;
  v41[0] = v29;
  WebCore::TextTrackCueList::add(v26, v41);
  if (v41[0])
  {
    if (*(_DWORD *)(v41[0] + 24) == 1)
      (*(void (**)(void))(*(_QWORD *)v41[0] + 72))();
    else
      --*(_DWORD *)(v41[0] + 24);
  }
  v30 = *a2;
  ++*(_DWORD *)(v30 + 24);
  v31 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v31 = &off_1E33EBDA8;
  v31[1] = a1;
  v31[2] = v30;
  v41[0] = (uint64_t)v31;
  WTF::WeakHashSet<WebCore::TextTrackClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)(a1 + 200), v41);
  result = v41[0];
  v41[0] = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  if ((v17 & 1) == 0)
    goto LABEL_37;
  return result;
}

_DWORD *WebCore::TextTrackCueList::add(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char **v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  _DWORD *result;
  _DWORD *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v3 = *a2;
  *a2 = 0;
  v16 = (_DWORD *)v3;
  v5 = (char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  v6 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD *)(a1 + 8);
    do
    {
      v8 = v6 >> 1;
      v9 = v7 + 8 * (v6 >> 1);
      v20 = *(_OWORD *)(v3 + 64);
      v19 = *(_OWORD *)(*(_QWORD *)v9 + 64);
      if (WTF::MediaTime::compare((WTF::MediaTime *)&v20, (const WTF::MediaTime *)&v19) != -1)
      {
        v20 = *(_OWORD *)(v3 + 64);
        v19 = *(_OWORD *)(*(_QWORD *)v9 + 64);
        if (WTF::MediaTime::compare((WTF::MediaTime *)&v20, (const WTF::MediaTime *)&v19))
        {
          v7 = v9 + 8;
          v8 = v6 + ~v8;
        }
        else
        {
          v18 = *(_OWORD *)(v3 + 80);
          v17 = *(_OWORD *)(*(_QWORD *)(v7 + 8 * v8) + 80);
          if (WTF::MediaTime::compare((WTF::MediaTime *)&v18, (const WTF::MediaTime *)&v17) != 1)
          {
            v7 = v9 + 8;
            v8 = v6 + ~v8;
          }
        }
      }
      v6 = v8;
    }
    while (v8);
    v4 = *(_QWORD *)(a1 + 8);
    v10 = *(_DWORD *)(a1 + 20);
  }
  else
  {
    v10 = 0;
    v7 = v4 + 8 * v6;
  }
  v11 = ((unint64_t)(v7 - v4) >> 3);
  if (v10 == *(_DWORD *)(a1 + 16))
  {
    v12 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v5, v10 + 1, (unint64_t)&v16);
    v10 = *(_DWORD *)(a1 + 20);
    v4 = *(_QWORD *)(a1 + 8);
  }
  else
  {
    v12 = (char *)&v16;
  }
  v13 = (_QWORD *)(v4 + 8 * v11);
  memmove(v13 + 1, v13, v4 + 8 * v10 - (_QWORD)v13);
  v14 = *(_QWORD *)v12;
  *(_QWORD *)v12 = 0;
  *v13 = v14;
  ++*(_DWORD *)(a1 + 20);
  result = v16;
  v16 = 0;
  if (result)
  {
    if (result[6] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 72))(result);
    else
      --result[6];
  }
  return result;
}

uint64_t **WebCore::TextTrack::removeCue@<X0>(uint64_t **this@<X0>, WebCore::TextTrackCue *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t **v4;
  uint64_t **v6;
  uint64_t *v7;
  char v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _DWORD *v19;
  void *v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  _QWORD *v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[4];

  v4 = this;
  v6 = (uint64_t **)*((_QWORD *)a2 + 13);
  if (v6)
  {
    v7 = v6[1];
    if (v7)
      v6 = (uint64_t **)(v7 - 15);
    else
      v6 = 0;
  }
  if (v6 != this)
  {
    v8 = 5;
LABEL_7:
    *(_BYTE *)a3 = v8;
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 16) = 1;
    return this;
  }
  if (!this[21])
  {
    v8 = 8;
    goto LABEL_7;
  }
  v9 = this[11];
  v10 = ((uint64_t (*)(uint64_t **))(*this)[33])(this);
  v11 = v4[12];
  v29[0] = v10;
  v29[1] = v12;
  v29[2] = "removeCue";
  v29[3] = v11;
  if (*((_BYTE *)v9 + 12))
  {
    if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::TextTrackCue>((uint64_t)&WebCore::LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)v29, (uint64_t)a2);
  }
  v14 = v4[21];
  v15 = *((unsigned int *)v14 + 5);
  v16 = v14[1];
  if ((_DWORD)v15)
  {
    v17 = 0;
    while (*(WebCore::TextTrackCue **)(v16 + 8 * v17) != a2)
    {
      if (v15 == ++v17)
        goto LABEL_20;
    }
  }
  else
  {
LABEL_20:
    LODWORD(v17) = -1;
  }
  v18 = (_QWORD *)(v16 + 8 * v17);
  v19 = (_DWORD *)*v18;
  *v18 = 0;
  if (v19)
  {
    if (v19[6] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 72))(v19);
      v15 = *((unsigned int *)v14 + 5);
    }
    else
    {
      --v19[6];
    }
  }
  memmove(v18, v18 + 1, v14[1] + 8 * v15 - (_QWORD)(v18 + 1));
  --*((_DWORD *)v14 + 5);
  (*(void (**)(WebCore::TextTrackCue *, _QWORD))(*(_QWORD *)a2 + 104))(a2, 0);
  v21 = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = 0;
  if (v21)
  {
    do
    {
      v22 = __ldaxr((unsigned int *)v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, (unsigned int *)v21));
    if (!v23)
    {
      atomic_store(1u, (unsigned int *)v21);
      v25 = *(unsigned int *)(v21 + 28);
      if ((_DWORD)v25)
      {
        v28 = v21;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v21 + 16), (WTF::StringImpl *)(*(_QWORD *)(v21 + 16) + 32 * v25));
        v21 = v28;
      }
      v26 = *(WTF **)(v21 + 16);
      if (v26)
      {
        *(_QWORD *)(v21 + 16) = 0;
        *(_DWORD *)(v21 + 24) = 0;
        v27 = v21;
        WTF::fastFree(v26, v20);
        v21 = v27;
      }
      WTF::fastFree((WTF *)v21, v20);
    }
  }
  v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v24 = off_1E33EBDD0;
  v24[1] = v4;
  v24[2] = a2;
  v29[0] = v24;
  WTF::WeakHashSet<WebCore::TextTrackClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v4 + 25, v29);
  this = (uint64_t **)v29[0];
  v29[0] = 0;
  if (this)
    this = (uint64_t **)((uint64_t (*)(uint64_t **))(*this)[1])(this);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  return this;
}

uint64_t WebCore::TextTrack::removeCuesNotInTimeRanges(uint64_t this, __int128 **a2)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *v5;
  unint64_t v6;
  unsigned int v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  __int128 v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  BOOL v24;
  int v25;
  char v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  NSObject *v34;
  WTF *v35;
  void *v36;
  char *v37;
  unsigned __int8 *v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  WTF::Logger *v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF *v51;
  uint64_t v52;
  WTF::StringImpl **v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  int v58;
  WTF::StringImpl *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  WTF::StringImpl *v63;
  uint64_t *v64;
  uint64_t v65;
  WTF::StringImpl *v66;
  char v67;
  __int128 v68;
  const char *v69;
  uint64_t v70;
  WTF::Logger *v71[2];
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  __int128 buf;
  int v77;
  WTF::StringImpl *v78;
  int v79;
  WTF::StringImpl *v80;
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(this + 168);
  if (v2)
  {
    LODWORD(v3) = *(_DWORD *)(v2 + 20);
    if ((_DWORD)v3)
    {
      v5 = (_QWORD *)this;
      v6 = 0;
      v7 = 0;
      LODWORD(v8) = 0;
      v9 = 0;
      do
      {
        if (v3 <= v6)
          v10 = 0;
        else
          v10 = *(_QWORD *)(*(_QWORD *)(v2 + 8) + 8 * v6);
        v11 = *(_OWORD *)(v10 + 80);
        v68 = *(_OWORD *)(v10 + 64);
        *(_OWORD *)v71 = v11;
        buf = 0uLL;
        WebCore::PlatformTimeRanges::add((WebCore::PlatformTimeRanges *)&buf, &v68, (__int128 *)v71, 0);
        WebCore::PlatformTimeRanges::intersectWith((WTF *)&buf, a2);
        if (!HIDWORD(buf))
        {
          v13 = v7;
          if (v7 == (_DWORD)v8)
          {
            v14 = v7 + ((unint64_t)v7 >> 2);
            if (v14 >= 0x10)
              v15 = v14 + 1;
            else
              v15 = 16;
            if (v15 <= (unint64_t)v7 + 1)
              v8 = v7 + 1;
            else
              v8 = v15;
            if (v8 >> 29)
              goto LABEL_141;
            v16 = (void *)WTF::fastMalloc((WTF *)(8 * v8));
            memcpy(v16, v9, 8 * v7);
            if (v9)
            {
              if (v16 == v9)
              {
                v16 = 0;
                LODWORD(v8) = 0;
              }
              WTF::fastFree((WTF *)v9, v12);
            }
            v9 = v16;
          }
          ++v7;
          ++*(_DWORD *)(v10 + 24);
          *((_QWORD *)v9 + v13) = v10;
        }
        this = buf;
        if ((_QWORD)buf)
        {
          *(_QWORD *)&buf = 0;
          DWORD2(buf) = 0;
          this = WTF::fastFree((WTF *)this, v12);
        }
        ++v6;
        v2 = v5[21];
        v3 = *(unsigned int *)(v2 + 20);
      }
      while (v6 < v3);
      if (!v7)
        goto LABEL_126;
      v17 = v5[11];
      v18 = (*(uint64_t (**)(_QWORD *))(*v5 + 264))(v5);
      v19 = v5[12];
      *(_QWORD *)&v68 = v18;
      *((_QWORD *)&v68 + 1) = v20;
      v69 = "removeCuesNotInTimeRanges";
      v70 = v19;
      if (!*(_BYTE *)(v17 + 12) || !WebCore::LogMedia || byte_1ECE7C490 < 3u)
      {
LABEL_112:
        v60 = 8 * v7;
        v61 = v60;
        v62 = v9;
        do
        {
          (*(void (**)(uint64_t *__return_ptr, _QWORD *, _QWORD))(*v5 + 128))(&v65, v5, *v62);
          if (v67)
          {
            v63 = v66;
            v66 = 0;
            if (v63)
            {
              if (*(_DWORD *)v63 == 2)
                WTF::StringImpl::destroy(v63, (WTF::StringImpl *)v12);
              else
                *(_DWORD *)v63 -= 2;
            }
          }
          ++v62;
          v61 -= 8;
        }
        while (v61);
        v64 = (uint64_t *)v9;
        do
        {
          this = *v64;
          *v64 = 0;
          if (this)
          {
            if (*(_DWORD *)(this + 24) == 1)
              this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 72))(this);
            else
              --*(_DWORD *)(this + 24);
          }
          ++v64;
          v60 -= 8;
        }
        while (v60);
LABEL_126:
        if (v9)
          return WTF::fastFree((WTF *)v9, v12);
        return this;
      }
      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v68);
      WTF::String::String((WTF::String *)&v73, "purging ");
      WTF::String::number((WTF::String *)v7);
      if (v74)
      {
        v21 = *((_DWORD *)v74 + 1);
        if (v73)
          goto LABEL_31;
      }
      else
      {
        v21 = 0;
        if (v73)
        {
LABEL_31:
          v22 = *((_DWORD *)v73 + 1);
          if (v72)
          {
LABEL_32:
            v23 = *((_DWORD *)v72 + 1);
LABEL_33:
            if ((v23 | v22) < 0
              || ((v24 = __OFADD__(v22, v23), v25 = v22 + v23, !v24) ? (v26 = 0) : (v26 = 1),
                  v21 < 0 || (v26 & 1) != 0 || (v27 = (v21 + v25), __OFADD__(v21, v25))))
            {
              v75 = 0;
              goto LABEL_141;
            }
            if (v74 && (*((_BYTE *)v74 + 16) & 4) == 0)
            {
              v28 = 0;
              goto LABEL_47;
            }
            if (v73)
            {
              v29 = *((_DWORD *)v73 + 4);
              v28 = (v29 >> 2) & 1;
              if (v72 && (v29 & 4) != 0)
                goto LABEL_46;
            }
            else
            {
              if (v72)
              {
LABEL_46:
                v28 = (*((unsigned __int8 *)v72 + 16) >> 2) & 1;
                goto LABEL_47;
              }
              v28 = 1;
            }
LABEL_47:
            WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v27, v28, v74, (uint64_t)v73, (uint64_t)v72, &v75);
            if (v75)
            {
              v31 = v72;
              v72 = 0;
              if (v31)
              {
                if (*(_DWORD *)v31 == 2)
                  WTF::StringImpl::destroy(v31, v30);
                else
                  *(_DWORD *)v31 -= 2;
              }
              v32 = v73;
              v73 = 0;
              if (v32)
              {
                if (*(_DWORD *)v32 == 2)
                  WTF::StringImpl::destroy(v32, v30);
                else
                  *(_DWORD *)v32 -= 2;
              }
              v33 = v74;
              v74 = 0;
              if (v33)
              {
                if (*(_DWORD *)v33 == 2)
                  WTF::StringImpl::destroy(v33, v30);
                else
                  *(_DWORD *)v33 -= 2;
              }
              v34 = qword_1ECE7C4A0;
              v35 = (WTF *)os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
              if ((_DWORD)v35)
              {
                WTF::String::utf8();
                v37 = v71[0] ? (char *)v71[0] + 16 : 0;
                LODWORD(buf) = 136446210;
                *(_QWORD *)((char *)&buf + 4) = v37;
                _os_log_impl(&dword_1940B8000, v34, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
                v35 = v71[0];
                v71[0] = 0;
                if (v35)
                {
                  if (*(_DWORD *)v35 == 1)
                    v35 = (WTF *)WTF::fastFree(v35, v36);
                  else
                    --*(_DWORD *)v35;
                }
              }
              if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
              {
                v38 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
                while (1)
                {
                  v39 = *v38;
                  if ((v39 & 1) != 0)
                    break;
                  v40 = __ldaxr(v38);
                  if (v40 == v39)
                  {
                    if (!__stxr(v39 | 1, v38))
                    {
                      v41 = WTF::Logger::observers(v35);
                      v42 = *(unsigned int *)(v41 + 12);
                      if ((_DWORD)v42)
                      {
                        v43 = *(uint64_t **)v41;
                        v44 = *(_QWORD *)v41 + 8 * v42;
                        do
                        {
                          v45 = *v43;
                          LODWORD(buf) = 0;
                          WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v68);
                          v77 = 0;
                          WTF::String::String((WTF::String *)&v78, "purging ");
                          v79 = 0;
                          WTF::String::number((WTF::String *)v7);
                          v71[0] = 0;
                          v71[1] = 0;
                          v46 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
                          LODWORD(v71[1]) = 3;
                          v71[0] = v46;
                          v47 = HIDWORD(v71[1]);
                          *((_DWORD *)v46 + 4 * HIDWORD(v71[1])) = buf;
                          v48 = *((_QWORD *)&buf + 1);
                          if (*((_QWORD *)&buf + 1))
                            **((_DWORD **)&buf + 1) += 2;
                          *((_QWORD *)v46 + 2 * v47 + 1) = v48;
                          *((_DWORD *)v46 + 4 * (v47 + 1)) = v77;
                          v49 = v78;
                          if (v78)
                            *(_DWORD *)v78 += 2;
                          *((_QWORD *)v46 + 2 * (v47 + 1) + 1) = v49;
                          *((_DWORD *)v46 + 4 * (v47 + 2)) = v79;
                          v50 = v80;
                          if (v80)
                            *(_DWORD *)v80 += 2;
                          *((_QWORD *)v46 + 2 * (v47 + 2) + 1) = v50;
                          HIDWORD(v71[1]) = v47 + 3;
                          (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v45 + 16))(v45, &WebCore::LogMedia, 3, v71);
                          v51 = v71[0];
                          if (HIDWORD(v71[1]))
                          {
                            v52 = 16 * HIDWORD(v71[1]);
                            v53 = (WTF::StringImpl **)((char *)v71[0] + 8);
                            do
                            {
                              v54 = *v53;
                              *v53 = 0;
                              if (v54)
                              {
                                if (*(_DWORD *)v54 == 2)
                                  WTF::StringImpl::destroy(v54, (WTF::StringImpl *)v36);
                                else
                                  *(_DWORD *)v54 -= 2;
                              }
                              v53 += 2;
                              v52 -= 16;
                            }
                            while (v52);
                            v51 = v71[0];
                          }
                          if (v51)
                          {
                            v71[0] = 0;
                            LODWORD(v71[1]) = 0;
                            WTF::fastFree(v51, v36);
                          }
                          v55 = v80;
                          v80 = 0;
                          if (v55)
                          {
                            if (*(_DWORD *)v55 == 2)
                              WTF::StringImpl::destroy(v55, (WTF::StringImpl *)v36);
                            else
                              *(_DWORD *)v55 -= 2;
                          }
                          v56 = v78;
                          v78 = 0;
                          if (v56)
                          {
                            if (*(_DWORD *)v56 == 2)
                              WTF::StringImpl::destroy(v56, (WTF::StringImpl *)v36);
                            else
                              *(_DWORD *)v56 -= 2;
                          }
                          v57 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                          *((_QWORD *)&buf + 1) = 0;
                          if (v57)
                          {
                            if (*(_DWORD *)v57 == 2)
                              WTF::StringImpl::destroy(v57, (WTF::StringImpl *)v36);
                            else
                              *(_DWORD *)v57 -= 2;
                          }
                          ++v43;
                        }
                        while (v43 != (uint64_t *)v44);
                      }
                      v58 = __ldxr(v38);
                      if (v58 == 1)
                      {
                        if (!__stlxr(0, v38))
                          break;
                      }
                      else
                      {
                        __clrex();
                      }
                      WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                      break;
                    }
                  }
                  else
                  {
                    __clrex();
                  }
                }
              }
              v59 = v75;
              v75 = 0;
              if (v59)
              {
                if (*(_DWORD *)v59 == 2)
                  WTF::StringImpl::destroy(v59, (WTF::StringImpl *)v36);
                else
                  *(_DWORD *)v59 -= 2;
              }
              goto LABEL_112;
            }
LABEL_141:
            __break(0xC471u);
            JUMPOUT(0x195D8B194);
          }
LABEL_136:
          v23 = 0;
          goto LABEL_33;
        }
      }
      v22 = 0;
      if (v72)
        goto LABEL_32;
      goto LABEL_136;
    }
  }
  return this;
}

uint64_t WebCore::TextTrack::ensureVTTRegionList(WebCore::TextTrack *this)
{
  uint64_t result;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::VTTRegion **v6;
  uint64_t v7;
  WebCore::VTTRegion *v8;
  WTF *v9;
  void *v10;
  WTF *v11;

  result = *((_QWORD *)this + 27);
  if (!result)
  {
    result = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)result = 1;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    v4 = *((_QWORD *)this + 27);
    *((_QWORD *)this + 27) = result;
    if (v4)
    {
      if (*(_DWORD *)v4 == 1)
      {
        v5 = *(unsigned int *)(v4 + 20);
        if ((_DWORD)v5)
        {
          v6 = *(WebCore::VTTRegion ***)(v4 + 8);
          v7 = 8 * v5;
          do
          {
            v8 = *v6;
            *v6 = 0;
            if (v8)
            {
              if (*((_DWORD *)v8 + 4) == 1)
              {
                WebCore::VTTRegion::~VTTRegion(v8);
                WTF::fastFree(v9, v10);
              }
              else
              {
                --*((_DWORD *)v8 + 4);
              }
            }
            ++v6;
            v7 -= 8;
          }
          while (v7);
        }
        v11 = *(WTF **)(v4 + 8);
        if (v11)
        {
          *(_QWORD *)(v4 + 8) = 0;
          *(_DWORD *)(v4 + 16) = 0;
          WTF::fastFree(v11, v3);
        }
        WTF::fastFree((WTF *)v4, v3);
        return *((_QWORD *)this + 27);
      }
      else
      {
        --*(_DWORD *)v4;
      }
    }
  }
  return result;
}

uint64_t WebCore::TextTrack::cueDidChange(WebCore::TextTrack *this, WebCore::TextTrackCue *a2, int a3)
{
  uint64_t v5;
  void *v6;
  WebCore::TextTrackCueList *v7;
  _QWORD *v8;
  uint64_t result;
  WTF *v10;
  void *v11;
  uint64_t v12;

  if (a3)
  {
    v5 = *((_QWORD *)this + 21);
    if (!v5)
    {
      v5 = WTF::fastMalloc((WTF *)0x20);
      *(_DWORD *)v5 = 1;
      *(_QWORD *)(v5 + 16) = 0;
      *(_QWORD *)(v5 + 24) = 0;
      *(_QWORD *)(v5 + 8) = 0;
      v7 = (WebCore::TextTrackCueList *)*((_QWORD *)this + 21);
      *((_QWORD *)this + 21) = v5;
      if (v7)
      {
        if (*(_DWORD *)v7 == 1)
        {
          WebCore::TextTrackCueList::~TextTrackCueList(v7, v6);
          WTF::fastFree(v10, v11);
          v5 = *((_QWORD *)this + 21);
        }
        else
        {
          --*(_DWORD *)v7;
        }
      }
    }
    WebCore::TextTrackCueList::updateCueIndex(v5, a2);
  }
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v8 = off_1E33EBE20;
  v8[1] = this;
  v8[2] = a2;
  v12 = (uint64_t)v8;
  WTF::WeakHashSet<WebCore::TextTrackClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)this + 25, &v12);
  result = v12;
  v12 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::TextTrackCueList::updateCueIndex(uint64_t this, const WebCore::TextTrackCue *a2)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  char *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *i;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;

  v2 = this;
  v3 = *(char **)(this + 8);
  v4 = *(unsigned int *)(this + 20);
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = *(char **)(this + 8);
    while (*(const WebCore::TextTrackCue **)v6 != a2)
    {
      ++v5;
      v6 += 8;
      if (v4 == v5)
        goto LABEL_5;
    }
    v7 = v6 + 8;
    if (!v5)
      goto LABEL_24;
  }
  else
  {
LABEL_5:
    v6 = v3 + 0x7FFFFFFF8;
    v7 = v3 + 0x800000000;
    v5 = 0xFFFFFFFFLL;
  }
  do
  {
    v8 = v5 >> 1;
    v9 = &v3[8 * (v5 >> 1)];
    v31 = *(_OWORD *)(*(_QWORD *)v6 + 64);
    v30 = *(_OWORD *)(*(_QWORD *)v9 + 64);
    this = WTF::MediaTime::compare((WTF::MediaTime *)&v31, (const WTF::MediaTime *)&v30);
    if ((_DWORD)this != -1)
    {
      v31 = *(_OWORD *)(*(_QWORD *)v6 + 64);
      v30 = *(_OWORD *)(*(_QWORD *)v9 + 64);
      this = WTF::MediaTime::compare((WTF::MediaTime *)&v31, (const WTF::MediaTime *)&v30);
      if ((_DWORD)this)
      {
        v3 = v9 + 8;
        v8 = v5 + ~v8;
      }
      else
      {
        v29 = *(_OWORD *)(*(_QWORD *)v6 + 80);
        v28 = *(_OWORD *)(*(_QWORD *)&v3[8 * v8] + 80);
        this = WTF::MediaTime::compare((WTF::MediaTime *)&v29, (const WTF::MediaTime *)&v28);
        if ((_DWORD)this != 1)
        {
          v3 = v9 + 8;
          v8 = v5 + ~v8;
        }
      }
    }
    v5 = v8;
  }
  while (v8);
  if (v3 != v6)
  {
    v10 = *(_QWORD *)v3;
    *(_QWORD *)v3 = *(_QWORD *)v6;
    *(_QWORD *)v6 = v10;
    if (v3 + 8 != v6)
    {
      v11 = v3 + 16;
      v12 = v6;
      for (i = v6; ; i = v15)
      {
        v14 = *((_QWORD *)v11 - 1);
        *((_QWORD *)v11 - 1) = v10;
        *(_QWORD *)v12 = v14;
        if (v12 == v6)
        {
          v15 = i;
          if (v11 == i)
            return this;
        }
        else
        {
          if (v11 == i)
            v15 = v12 + 8;
          else
            v15 = i;
          i = v12 + 8;
        }
        v10 = *(_QWORD *)i;
        v11 += 8;
        v12 = i;
      }
    }
    return this;
  }
  v3 = *(char **)(v2 + 8);
  v4 = *(unsigned int *)(v2 + 20);
LABEL_24:
  v16 = &v3[8 * v4] - v7;
  if (v16)
  {
    v17 = v16 >> 3;
    v18 = v7;
    do
    {
      v19 = v17 >> 1;
      v20 = &v18[8 * (v17 >> 1)];
      v31 = *(_OWORD *)(*(_QWORD *)v6 + 64);
      v30 = *(_OWORD *)(*(_QWORD *)v20 + 64);
      this = WTF::MediaTime::compare((WTF::MediaTime *)&v31, (const WTF::MediaTime *)&v30);
      if ((_DWORD)this != -1)
      {
        v31 = *(_OWORD *)(*(_QWORD *)v6 + 64);
        v30 = *(_OWORD *)(*(_QWORD *)v20 + 64);
        this = WTF::MediaTime::compare((WTF::MediaTime *)&v31, (const WTF::MediaTime *)&v30);
        if ((_DWORD)this)
        {
          v18 = v20 + 8;
          v19 = v17 + ~v19;
        }
        else
        {
          v29 = *(_OWORD *)(*(_QWORD *)v6 + 80);
          v28 = *(_OWORD *)(*(_QWORD *)&v18[8 * v19] + 80);
          this = WTF::MediaTime::compare((WTF::MediaTime *)&v29, (const WTF::MediaTime *)&v28);
          if ((_DWORD)this != 1)
          {
            v18 = v20 + 8;
            v19 = v17 + ~v19;
          }
        }
      }
      v17 = v19;
    }
    while (v19);
    if (v18 != v7)
    {
      v21 = *(_QWORD *)v6;
      *(_QWORD *)v6 = *(_QWORD *)v7;
      v22 = v6 + 16;
      *(_QWORD *)v7 = v21;
      if (v22 != v18)
      {
        v23 = v7;
        do
        {
          if (v7 == v23)
            v23 = v22;
          v24 = *(_QWORD *)v7;
          *(_QWORD *)v7 = *(_QWORD *)v22;
          v7 += 8;
          *(_QWORD *)v22 = v24;
          v22 += 8;
        }
        while (v22 != v18);
        if (v7 != v23)
        {
          v25 = v23;
          while (1)
          {
            v26 = v7;
            while (1)
            {
              v27 = *(_QWORD *)v7;
              *(_QWORD *)v26 = *(_QWORD *)v23;
              v26 += 8;
              *(_QWORD *)v23 = v27;
              v23 += 8;
              if (v23 != v18)
                break;
              v7 = v26;
              v23 = v25;
              if (v26 == v25)
                return this;
            }
            if (v26 == v25)
              v25 = v23;
            v7 += 8;
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::TextTrack::trackIndex(WebCore::TextTrack *this, void *a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*((_BYTE *)this + 244))
    return *((unsigned int *)this + 60);
  v4 = *((_QWORD *)this + 13);
  if (!v4)
    return 0;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    return 0;
  if (*(_DWORD *)(v5 + 72) == 1)
  {
    v6 = *((_DWORD *)this + 58);
    if (v6 == 2)
    {
      v7 = *(_DWORD *)(v5 + 108) + *(_DWORD *)(v5 + 124);
      v8 = *(unsigned int *)(v5 + 68);
      if ((_DWORD)v8)
      {
        v9 = 0;
        v10 = *(_QWORD *)(v5 + 56);
        while (*(WebCore::TextTrack **)(v10 + 8 * v9) != this)
        {
          if (v8 == ++v9)
            goto LABEL_15;
        }
      }
      else
      {
LABEL_15:
        LODWORD(v9) = -1;
      }
      result = (v7 + v9);
    }
    else if (v6 == 1)
    {
      v11 = *(_DWORD *)(v5 + 124);
      v12 = *(unsigned int *)(v5 + 108);
      if ((_DWORD)v12)
      {
        v13 = 0;
        v14 = *(_QWORD *)(v5 + 96);
        while (*(WebCore::TextTrack **)(v14 + 8 * v13) != this)
        {
          if (v12 == ++v13)
            goto LABEL_21;
        }
      }
      else
      {
LABEL_21:
        LODWORD(v13) = -1;
      }
      result = (v11 + v13);
    }
    else if (v6)
    {
      result = 0xFFFFFFFFLL;
    }
    else
    {
      result = WebCore::LoadableTextTrack::trackElementIndex(this, a2);
    }
    *((_DWORD *)this + 60) = result;
    *((_BYTE *)this + 244) = 1;
  }
  else
  {
    result = 105;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::TextTrackList::getTrackIndexRelativeToRenderedTracks(WebCore::TextTrackList *this, WebCore::TextTrack *a2)
{
  uint64_t v3;
  uint64_t result;
  WebCore::TextTrack **v5;
  uint64_t v6;
  WebCore::TextTrack *v7;
  unsigned int v8;
  BOOL v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  WebCore::TextTrack **v13;
  uint64_t v14;
  WebCore::TextTrack *v15;
  unsigned int v16;
  int v17;
  BOOL v18;
  uint64_t v19;
  WebCore::TextTrack **v20;
  uint64_t v21;
  WebCore::TextTrack *v22;
  unsigned int v23;
  int v24;
  BOOL v25;

  v3 = *((unsigned int *)this + 31);
  if ((_DWORD)v3)
  {
    result = 0;
    v5 = (WebCore::TextTrack **)*((_QWORD *)this + 14);
    v6 = 8 * v3;
    while (1)
    {
      v7 = *v5;
      if (*((_DWORD *)*v5 + 10) != 1)
        break;
      v8 = *((_DWORD *)v7 + 57);
      v9 = v8 > 5;
      v10 = (1 << v8) & 0x27;
      v11 = v9 || v10 == 0;
      if (!v11 && *((_DWORD *)v7 + 56) == 2)
      {
        if (v7 == a2)
          return result;
        result = (result + 1);
      }
      ++v5;
      v6 -= 8;
      if (!v6)
        goto LABEL_14;
    }
LABEL_40:
    __break(0xC471u);
    JUMPOUT(0x195D8B8C8);
  }
  result = 0;
LABEL_14:
  v12 = *((unsigned int *)this + 27);
  if ((_DWORD)v12)
  {
    v13 = (WebCore::TextTrack **)*((_QWORD *)this + 12);
    v14 = 8 * v12;
    do
    {
      v15 = *v13;
      if (*((_DWORD *)*v13 + 10) != 1)
      {
        __break(0xC471u);
        JUMPOUT(0x195D8B8E8);
      }
      v16 = *((_DWORD *)v15 + 57);
      v9 = v16 > 5;
      v17 = (1 << v16) & 0x27;
      v18 = v9 || v17 == 0;
      if (!v18 && *((_DWORD *)v15 + 56) == 2)
      {
        if (v15 == a2)
          return result;
        result = (result + 1);
      }
      ++v13;
      v14 -= 8;
    }
    while (v14);
  }
  v19 = *((unsigned int *)this + 17);
  if ((_DWORD)v19)
  {
    v20 = (WebCore::TextTrack **)*((_QWORD *)this + 7);
    v21 = 8 * v19;
    while (1)
    {
      v22 = *v20;
      if (*((_DWORD *)*v20 + 10) != 1)
        break;
      v23 = *((_DWORD *)v22 + 57);
      v9 = v23 > 5;
      v24 = (1 << v23) & 0x27;
      v25 = v9 || v24 == 0;
      if (!v25 && *((_DWORD *)v22 + 56) == 2)
      {
        if (v22 == a2)
          return result;
        result = (result + 1);
      }
      ++v20;
      v21 -= 8;
      if (!v21)
        return 0xFFFFFFFFLL;
    }
    goto LABEL_40;
  }
  return 0xFFFFFFFFLL;
}

uint64_t WebCore::TextTrack::matchCue@<X0>(WTF::MediaTime *a1@<X0>, WebCore::TextTrackCue *a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  const WTF::MediaTime *v8;
  uint64_t result;
  const WTF::MediaTime *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t i;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  int v28;
  BOOL v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;

  v35 = *((_OWORD *)a2 + 4);
  v8 = (const WTF::MediaTime *)WTF::MediaTime::zeroTime(a1);
  result = WTF::MediaTime::compare((WTF::MediaTime *)&v35, v8);
  if ((_DWORD)result != -1)
  {
    v34 = *((_OWORD *)a2 + 5);
    v10 = (const WTF::MediaTime *)WTF::MediaTime::zeroTime((WTF::MediaTime *)result);
    result = WTF::MediaTime::compare((WTF::MediaTime *)&v34, v10);
    if ((_DWORD)result != -1)
    {
      v11 = *((_QWORD *)a1 + 21);
      if (v11)
      {
        v12 = *(unsigned int *)(v11 + 20);
        if ((_DWORD)v12)
        {
          v13 = 0;
          while (v13 != v12)
          {
            v17 = (v12 + v13) >> 1;
            v19 = *((_QWORD *)a1 + 21);
            if (*(_DWORD *)(v19 + 20) <= v17)
            {
              v20 = 0;
            }
            else
            {
              v20 = *(_QWORD *)(*(_QWORD *)(v19 + 8) + 8 * v17);
              if (v20)
                ++*(_DWORD *)(v20 + 24);
            }
            v34 = *((_OWORD *)a2 + 4);
            *(_QWORD *)&v33 = (*(uint64_t (**)(WTF::MediaTime *))(*(_QWORD *)a1 + 192))(a1);
            *((_QWORD *)&v33 + 1) = v21;
            *(_QWORD *)&v35 = WTF::MediaTime::operator+();
            *((_QWORD *)&v35 + 1) = v22;
            v32 = *(_OWORD *)(v20 + 64);
            result = WTF::MediaTime::compare((WTF::MediaTime *)&v35, (const WTF::MediaTime *)&v32);
            if ((_DWORD)result == -1
              || a3 != 1
              && (result = WebCore::TextTrackCue::hasEquivalentStartTime(a2, (const WebCore::TextTrackCue *)v20),
                  (_DWORD)result)
              && (v23 = *((_OWORD *)a2 + 5),
                  v30 = *(_OWORD *)(v20 + 80),
                  v31 = v23,
                  result = WTF::MediaTime::compare((WTF::MediaTime *)&v31, (const WTF::MediaTime *)&v30),
                  (_DWORD)result == 1))
            {
              v18 = v13;
            }
            else
            {
              v18 = v17 + 1;
              v17 = v12;
            }
LABEL_47:
            if (*(_DWORD *)(v20 + 24) == 1)
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 72))(v20);
            else
              --*(_DWORD *)(v20 + 24);
LABEL_49:
            v29 = v13 == v12;
            v13 = v18;
            v12 = v17;
            if (v29)
              return result;
          }
          i = v13;
          if (v13 == 1)
            goto LABEL_13;
          if (v13)
          {
            for (i = v13; i > 1; --i)
            {
              result = WebCore::TextTrackCue::hasEquivalentStartTime(a2, *(const WebCore::TextTrackCue **)(*(_QWORD *)(*((_QWORD *)a1 + 21) + 8)+ 8 * (i - 2)));
              if (!(_DWORD)result)
                goto LABEL_13;
            }
            i = 1;
LABEL_13:
            v15 = *((_QWORD *)a1 + 21);
            v16 = *(unsigned int *)(v15 + 20);
            if (i > v16)
            {
              *a4 = 0;
              v17 = v13;
              v18 = i;
              goto LABEL_49;
            }
            v20 = 0;
            while (1)
            {
              result = v20;
              v18 = i;
              if (v16 <= (int)i - 1)
              {
                v20 = 0;
              }
              else
              {
                v20 = *(_QWORD *)(*(_QWORD *)(v15 + 8) + 8 * (i - 1));
                if (v20)
                {
                  v24 = 0;
                  ++*(_DWORD *)(v20 + 24);
                  goto LABEL_31;
                }
              }
              v24 = 1;
LABEL_31:
              if (!result)
                goto LABEL_34;
              if (*(_DWORD *)(result + 24) != 1)
              {
                --*(_DWORD *)(result + 24);
LABEL_34:
                if ((v24 & 1) != 0)
                  goto LABEL_44;
                goto LABEL_35;
              }
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 72))(result);
              if ((v24 & 1) != 0)
              {
LABEL_44:
                *a4 = 0;
                v17 = v13;
                if (v20)
                  goto LABEL_47;
                goto LABEL_49;
              }
LABEL_35:
              v35 = *((_OWORD *)a2 + 4);
              v33 = *(_OWORD *)(v20 + 64);
              *(_QWORD *)&v32 = (*(uint64_t (**)(WTF::MediaTime *))(*(_QWORD *)a1 + 192))(a1);
              *((_QWORD *)&v32 + 1) = v25;
              *(_QWORD *)&v34 = WTF::MediaTime::operator+();
              *((_QWORD *)&v34 + 1) = v26;
              result = WTF::MediaTime::compare((WTF::MediaTime *)&v35, (const WTF::MediaTime *)&v34);
              if ((_DWORD)result == 1)
              {
                *a4 = 0;
                v17 = v13;
                goto LABEL_47;
              }
              if (a3 == 1
                || (v27 = *(_OWORD *)(v20 + 80),
                    v34 = *((_OWORD *)a2 + 5),
                    v35 = v27,
                    result = WTF::MediaTime::compare((WTF::MediaTime *)&v35, (const WTF::MediaTime *)&v34),
                    !(_DWORD)result))
              {
                v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 128))(v20);
                result = (*(uint64_t (**)(WebCore::TextTrackCue *))(*(_QWORD *)a2 + 128))(a2);
                if (v28 == (_DWORD)result)
                {
                  result = WebCore::TextTrackCue::hasEquivalentStartTime((WebCore::TextTrackCue *)v20, a2);
                  if ((_DWORD)result)
                  {
                    result = (*(uint64_t (**)(uint64_t, WebCore::TextTrackCue *))(*(_QWORD *)v20 + 256))(v20, a2);
                    if ((result & 1) != 0)
                    {
                      *a4 = v20;
                      v17 = v13;
                      goto LABEL_49;
                    }
                  }
                }
              }
              ++i;
              v15 = *((_QWORD *)a1 + 21);
              v16 = *(unsigned int *)(v15 + 20);
              if (v18 >= v16)
              {
                *a4 = 0;
                v17 = v13;
                ++v18;
                goto LABEL_47;
              }
            }
          }
        }
      }
    }
  }
  *a4 = 0;
  return result;
}

BOOL WebCore::TextTrackCue::hasEquivalentStartTime(WebCore::TextTrackCue *this, const WebCore::TextTrackCue *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  _QWORD v11[2];
  __int128 v12;

  v12 = *(_OWORD *)WTF::MediaTime::zeroTime(this);
  v4 = *((_QWORD *)this + 13);
  if (v4 && (v5 = *(_QWORD *)(v4 + 8)) != 0 || (v6 = *((_QWORD *)a2 + 13)) != 0 && (v5 = *(_QWORD *)(v6 + 8)) != 0)
  {
    *(_QWORD *)&v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 - 120) + 192))(v5 - 120);
    DWORD2(v12) = v7;
    BYTE12(v12) = v8;
  }
  WTF::abs();
  WTF::abs();
  WTF::MediaTime::operator-();
  v11[0] = WTF::abs();
  v11[1] = v9;
  return (int)WTF::MediaTime::compare((WTF::MediaTime *)v11, (const WTF::MediaTime *)&v12) < 1;
}

BOOL WebCore::TextTrack::isMainProgramContent(WebCore::TextTrack *this)
{
  return *((_DWORD *)this + 57) == 1;
}

BOOL WebCore::TextTrack::containsOnlyForcedSubtitles(WebCore::TextTrack *this)
{
  return *((_DWORD *)this + 57) == 5;
}

uint64_t WebCore::TextTrack::setLanguage(uint64_t **this, const WTF::AtomString *a2)
{
  _QWORD *v3;
  uint64_t result;
  uint64_t v5;

  WebCore::TrackBase::setLanguage((WebCore::TrackBase *)this, a2);
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = off_1E33EBE48;
  v3[1] = this;
  v5 = (uint64_t)v3;
  WTF::WeakHashSet<WebCore::TextTrackClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(this + 25, &v5);
  result = v5;
  v5 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

WTF::StringImpl *WebCore::TrackBase::setLanguage(WebCore::TrackBase *this, const WTF::AtomString *a2)
{
  _DWORD *v4;
  WTF::StringImpl *v5;
  _DWORD *v6;
  double v7;
  double v8;
  float v9;
  WTF::StringImpl *result;
  int v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  char v17;
  BOOL v18;
  int v19;
  _BOOL4 v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;

  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *(_DWORD **)a2;
  if (!*(_QWORD *)a2)
    goto LABEL_10;
  if (!v6[1] || WebCore::isValidBCP47LanguageTag(*(_QWORD *)a2, a2))
  {
    *v6 += 2;
LABEL_10:
    result = (WTF::StringImpl *)*((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = v6;
    if (!result)
      return result;
    v11 = *(_DWORD *)result - 2;
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    goto LABEL_12;
  }
  v12 = (_DWORD *)*MEMORY[0x1E0CBF3B8];
  if (*MEMORY[0x1E0CBF3B8])
    *v12 += 2;
  result = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = v12;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  v13 = *((_QWORD *)this + 1);
  if (v13)
  {
    v14 = *(_QWORD *)(v13 + 8);
    if (v14)
    {
      v25 = 0;
      if (*(_QWORD *)a2)
      {
        if (WTF::StringImpl::find(*(_QWORD *)a2, 0, 0, v7, v8, v9) != -1)
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          goto LABEL_38;
        }
        v15 = *(_QWORD *)a2;
        if (v15)
        {
          v16 = *(_DWORD *)(v15 + 4);
          *(_DWORD *)v15 += 2;
          if (v16 < 0)
            goto LABEL_45;
          v17 = 0;
LABEL_29:
          v18 = __OFADD__(v16, 37);
          v19 = v16 + 37;
          if (!v18 && !__OFADD__(v19, 14))
          {
            v20 = (v17 & 1) != 0 || (*(_BYTE *)(v15 + 16) & 4) != 0;
            WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::AtomString,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v19 + 14), v20, (int8x16_t *)"The language '", 0xEu, v15, (int8x16_t *)"' is not a valid BCP 47 language tag.", 0x25u, &v24);
            v22 = v24;
            if (v24)
            {
              v24 = 0;
              v25 = v22;
              if ((v17 & 1) == 0)
              {
                if (*(_DWORD *)v15 == 2)
                  WTF::StringImpl::destroy((WTF::StringImpl *)v15, v21);
                else
                  *(_DWORD *)v15 -= 2;
              }
LABEL_38:
              (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::StringImpl **, _QWORD))(*(_QWORD *)(v14 - 96)
                                                                                            + 248))(v14 - 96, 6, 1, &v25, 0);
              result = v25;
              v25 = 0;
              if (result)
              {
                v11 = *(_DWORD *)result - 2;
                if (*(_DWORD *)result == 2)
                  return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v23);
LABEL_12:
                *(_DWORD *)result = v11;
                return result;
              }
              return result;
            }
LABEL_46:
            __break(0xC471u);
            JUMPOUT(0x195D8C010);
          }
LABEL_45:
          v24 = 0;
          goto LABEL_46;
        }
      }
      else
      {
        v15 = 0;
      }
      v16 = 0;
      v17 = 1;
      goto LABEL_29;
    }
  }
  return result;
}

WTF::StringImpl *WebCore::TextTrack::setId(WebCore::TextTrack *this, WTF::AtomString *a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  int v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *result;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  WTF::AtomString::number(a2);
  v5 = v11;
  v11 = 0;
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = v5;
  if (!v6)
    goto LABEL_4;
  v7 = *(_DWORD *)v6 - 2;
  if (*(_DWORD *)v6 != 2)
    goto LABEL_3;
  WTF::StringImpl::destroy(v6, v4);
  v6 = v11;
  v11 = 0;
  if (v6)
  {
    v7 = *(_DWORD *)v6 - 2;
    if (*(_DWORD *)v6 != 2)
    {
LABEL_3:
      *(_DWORD *)v6 = v7;
      goto LABEL_4;
    }
    WTF::StringImpl::destroy(v6, v10);
  }
LABEL_4:
  *((_QWORD *)this + 7) = a2;
  v8 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v8 = off_1E33EBE70;
  *((_QWORD *)v8 + 1) = this;
  v11 = v8;
  WTF::WeakHashSet<WebCore::TextTrackClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)this + 25, &v11);
  result = v11;
  v11 = 0;
  if (result)
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::TextTrack::setLabel(WebCore::TextTrack *this, const WTF::AtomString *a2)
{
  _DWORD *v3;
  WTF::StringImpl *v4;
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;

  v3 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v3 += 2;
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = v3;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v5 = off_1E33EBE98;
  v5[1] = this;
  v7 = (uint64_t)v5;
  WTF::WeakHashSet<WebCore::TextTrackClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)this + 25, &v7);
  result = v7;
  v7 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::TextTrackCue::create@<X0>(WebCore::TextTrackCue *this@<X0>, WebCore::Document *a2@<X1>, double a3@<D0>, double a4@<D1>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t result;
  WebCore::Node *v13;
  WebCore::ContainerNode *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::MediaTime *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WebCore::TextTrackCue *v27;
  WebCore::ContainerNode *v28;
  int v29;
  WebCore::ContainerNode *v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;

  v7 = *((_QWORD *)a2 + 10);
  if (v7 && (*(_WORD *)(v7 + 28) & 0xF000) != 0x3000)
  {
    do
    {
      result = (uint64_t)WebCore::checkForInvalidNodeTypes((WTF::StringImpl *)&v31, (WebCore::Node *)v7);
      if (v33)
      {
        v17 = v32;
        *(_BYTE *)a5 = v31;
        *(_QWORD *)(a5 + 8) = v17;
        goto LABEL_4;
      }
      v7 = *(_QWORD *)(v7 + 56);
    }
    while (v7);
    WebCore::DocumentFragment::create(this, (uint64_t *)&v30);
    v13 = (WebCore::Node *)*((_QWORD *)a2 + 10);
    v14 = v30;
    if (v13)
    {
      while (1)
      {
        result = WebCore::ContainerNode::ensurePreInsertionValidity((uint64_t)v14, v13, 0, &v31);
        if (v33)
          break;
        v13 = (WebCore::Node *)*((_QWORD *)v13 + 7);
        if (!v13)
          goto LABEL_11;
      }
    }
    else
    {
LABEL_11:
      WebCore::ContainerNode::cloneChildNodes(a2, v14);
      v29 = 0;
      v16 = *((_QWORD *)v14 + 10);
      if (!v16)
      {
LABEL_15:
        result = WTF::StringImpl::createWithoutCopyingNonEmpty();
        *(_BYTE *)a5 = 20;
        goto LABEL_18;
      }
      while (1)
      {
        result = (uint64_t)WebCore::tagPseudoObjects((unsigned int *)&v31, v16, &v29);
        if (v33)
          break;
        v16 = *(_QWORD *)(v16 + 56);
        if (!v16)
        {
          if ((v29 & 1) == 0 || (v29 & 2) == 0)
            goto LABEL_15;
          v19 = bmalloc::api::isoAllocate();
          v20 = (WTF::MediaTime *)WTF::MediaTime::createWithDouble((WTF::MediaTime *)v19, a3);
          v22 = v21;
          v23 = WTF::MediaTime::createWithDouble(v20, a4);
          v25 = v24;
          *(_DWORD *)(v19 + 24) = 1;
          *(_QWORD *)(v19 + 8) = 0;
          *(_QWORD *)(v19 + 16) = 0;
          *(_QWORD *)v19 = &unk_1E33A4FC0;
          v26 = *((_QWORD *)this + 88);
          if (v26)
          {
            v27 = *(WebCore::TextTrackCue **)(v26 + 8);
            if (v27)
              this = v27;
          }
          *(_QWORD *)(v19 + 32) = &off_1E33A18C0;
          *(_QWORD *)(v19 + 40) = 0;
          WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)(v19 + 32), (WebCore::TextTrackCue *)((char *)this + 192));
          *(_QWORD *)(v19 + 32) = &off_1E33A0540;
          *(_QWORD *)(v19 + 48) = 0;
          if (!*((_BYTE *)this + 470))
          {
            v34 = v19 + 32;
            WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)this + 40, &v34, (uint64_t)&v31);
            *(_QWORD *)v19 = off_1E33EC380;
            *(_QWORD *)(v19 + 32) = &unk_1E33EC4A0;
            *(_QWORD *)(v19 + 56) = 0;
            *(_QWORD *)(v19 + 64) = v20;
            *(_QWORD *)(v19 + 72) = v22;
            *(_QWORD *)(v19 + 80) = v23;
            *(_QWORD *)(v19 + 88) = v25;
            *(_DWORD *)(v19 + 96) = 0;
            v28 = v30;
            v30 = 0;
            *(_QWORD *)(v19 + 104) = 0;
            *(_QWORD *)(v19 + 112) = v28;
            *(_QWORD *)(v19 + 120) = 0;
            *(_QWORD *)(v19 + 127) = 0;
            *(_BYTE *)(v19 + 135) = 1;
            result = (uint64_t)WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)(v19 + 32));
            v14 = 0;
            *(_QWORD *)a5 = v19;
            *(_DWORD *)(a5 + 16) = 0;
            goto LABEL_19;
          }
          result = 422;
          __break(0xC471u);
          return result;
        }
      }
    }
    v18 = v32;
    *(_BYTE *)a5 = v31;
    *(_QWORD *)(a5 + 8) = v18;
LABEL_18:
    *(_DWORD *)(a5 + 16) = 1;
LABEL_19:
    v30 = 0;
    if (v14)
    {
      if (*((_DWORD *)v14 + 6) == 2)
      {
        if ((*((_WORD *)v14 + 15) & 0x400) == 0)
          return (uint64_t)WebCore::Node::removedLastRef(v14, v15);
      }
      else
      {
        *((_DWORD *)v14 + 6) -= 2;
      }
    }
    return result;
  }
  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_BYTE *)a5 = 20;
LABEL_4:
  *(_DWORD *)(a5 + 16) = 1;
  return result;
}

WTF::StringImpl *WebCore::checkForInvalidNodeTypes(WTF::StringImpl *this, WebCore::Node *a2)
{
  WTF::StringImpl *v2;
  __int16 v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WebCore::Node *i;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  _QWORD v17[2];
  char v18;
  WTF::StringImpl *v19;

  v2 = this;
  v3 = *((_WORD *)a2 + 14);
  if ((v3 & 0x10) != 0)
  {
    v4 = *(_QWORD *)(*((_QWORD *)a2 + 12) + 24);
    if (v4 != *(_QWORD *)(WebCore::HTMLNames::bTag + 24)
      && v4 != *(_QWORD *)(WebCore::HTMLNames::brTag + 24)
      && v4 != *(_QWORD *)(WebCore::HTMLNames::divTag + 24)
      && v4 != *(_QWORD *)(WebCore::HTMLNames::iTag + 24)
      && v4 != *(_QWORD *)(WebCore::HTMLNames::pTag + 24)
      && v4 != *(_QWORD *)(WebCore::HTMLNames::rbTag + 24)
      && v4 != *(_QWORD *)(WebCore::HTMLNames::rtcTag + 24)
      && v4 != *(_QWORD *)(WebCore::HTMLNames::rtTag + 24)
      && v4 != *(_QWORD *)(WebCore::HTMLNames::rubyTag + 24)
      && (v3 & 0xF000) != 0x3000
      && v4 != *(_QWORD *)(WebCore::HTMLNames::spanTag + 24))
    {
LABEL_13:
      (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::Node *))(*(_QWORD *)a2 + 104))(&v19, a2);
      if (v19)
      {
        v5 = *((_DWORD *)v19 + 1);
        if (v5 < 0 || (v6 = (v5 + 19), __OFADD__(v5, 19)))
        {
          v17[0] = 0;
          goto LABEL_56;
        }
        v7 = (*((unsigned __int8 *)v19 + 16) >> 2) & 1;
      }
      else
      {
        v7 = 1;
        v6 = 19;
      }
      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v6, v7, (int8x16_t *)"Invalid node type: ", 0x13u, (uint64_t)v19, v17);
      v9 = v17[0];
      if (!v17[0])
        goto LABEL_56;
LABEL_46:
      v17[0] = 0;
      this = v19;
      v19 = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2)
          this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, v8);
        else
          *(_DWORD *)this -= 2;
      }
      *(_BYTE *)v2 = 20;
      *((_QWORD *)v2 + 1) = v9;
LABEL_50:
      *((_BYTE *)v2 + 16) = 1;
      return this;
    }
  }
  else if ((v3 & 0xF000) != 0x3000)
  {
    goto LABEL_13;
  }
  if ((v3 & 4) != 0)
  {
    for (i = (WebCore::Node *)*((_QWORD *)a2 + 10); i; i = (WebCore::Node *)*((_QWORD *)i + 7))
    {
      v11 = *((_WORD *)i + 14);
      if ((v11 & 0x10) != 0)
      {
        v12 = *(_QWORD *)(*((_QWORD *)i + 12) + 24);
        if (v12 != *(_QWORD *)(WebCore::HTMLNames::bTag + 24)
          && v12 != *(_QWORD *)(WebCore::HTMLNames::brTag + 24)
          && v12 != *(_QWORD *)(WebCore::HTMLNames::divTag + 24)
          && v12 != *(_QWORD *)(WebCore::HTMLNames::iTag + 24)
          && v12 != *(_QWORD *)(WebCore::HTMLNames::pTag + 24)
          && v12 != *(_QWORD *)(WebCore::HTMLNames::rbTag + 24)
          && v12 != *(_QWORD *)(WebCore::HTMLNames::rtcTag + 24)
          && v12 != *(_QWORD *)(WebCore::HTMLNames::rtTag + 24)
          && v12 != *(_QWORD *)(WebCore::HTMLNames::rubyTag + 24)
          && (v11 & 0xF000) != 0x3000
          && v12 != *(_QWORD *)(WebCore::HTMLNames::spanTag + 24))
        {
LABEL_41:
          (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::Node *))(*(_QWORD *)i + 104))(&v19, i);
          if (v19)
          {
            v14 = *((_DWORD *)v19 + 1);
            if ((v14 & 0x80000000) == 0)
            {
              v15 = (v14 + 19);
              if (!__OFADD__(v14, 19))
              {
                v16 = (*((unsigned __int8 *)v19 + 16) >> 2) & 1;
                goto LABEL_45;
              }
            }
            v17[0] = 0;
LABEL_56:
            __break(0xC471u);
            JUMPOUT(0x195D8C824);
          }
          v16 = 1;
          v15 = 19;
LABEL_45:
          WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v15, v16, (int8x16_t *)"Invalid node type: ", 0x13u, (uint64_t)v19, v17);
          v9 = v17[0];
          if (!v17[0])
            goto LABEL_56;
          goto LABEL_46;
        }
      }
      else if ((v11 & 0xF000) != 0x3000)
      {
        goto LABEL_41;
      }
      if ((v11 & 4) != 0)
      {
        this = (WTF::StringImpl *)WebCore::checkForInvalidNodeTypes((WebCore *)v17, i);
        if (v18)
        {
          v13 = v17[1];
          *(_BYTE *)v2 = v17[0];
          *((_QWORD *)v2 + 1) = v13;
          goto LABEL_50;
        }
      }
    }
  }
  *(_QWORD *)v2 = 0;
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  return this;
}

unsigned int *WebCore::tagPseudoObjects(unsigned int *result, uint64_t a2, _BYTE *a3)
{
  WebCore::Element *v3;
  unsigned int *v4;
  __int16 v5;
  WebCore::Element *v6;
  uint64_t v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t *v18;
  unsigned int v19;
  uint64_t i;
  uint64_t v21;
  uint64_t v22;
  int16x8_t v23;
  __n128 v24;
  int v25;
  WTF::StringImpl *v26;
  int v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t *v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  char v40;
  WTF::StringImpl *v41;
  const char *v42;
  uint64_t v43;
  int v44;
  char v45;

  v4 = result;
  v5 = *(_WORD *)(a2 + 28);
  if ((v5 & 8) != 0)
    v6 = (WebCore::Element *)a2;
  else
    v6 = 0;
  if ((v5 & 8) != 0)
  {
    *(_DWORD *)(a2 + 24) += 2;
    v9 = *(_QWORD *)(a2 + 104);
    if (v9)
    {
      v10 = *(_DWORD *)(v9 + 4);
      if ((v10 & 1) != 0)
      {
        v11 = *(uint64_t **)(v9 + 40);
        LODWORD(v12) = *(_DWORD *)(v9 + 52);
        if (!(_DWORD)v12)
        {
LABEL_8:
          if ((v10 & 1) != 0)
            goto LABEL_35;
LABEL_9:
          v13 = (uint64_t *)(v9 + 32);
          LODWORD(v14) = v10 >> 5;
          if (!(_DWORD)v14)
            goto LABEL_66;
          while (1)
          {
            v14 = v14;
            while (1)
            {
              v22 = *v13;
              if (*v13 == WebCore::HTMLNames::cueAttr
                || *(_QWORD *)(v22 + 24) == *(_QWORD *)(WebCore::HTMLNames::cueAttr + 24)
                && *(_QWORD *)(v22 + 32) == *(_QWORD *)(WebCore::HTMLNames::cueAttr + 32))
              {
                break;
              }
              v13 += 2;
              if (!--v14)
                goto LABEL_66;
            }
            if ((*a3 & 2) == 0)
              goto LABEL_89;
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            WebCore::Document::selectorQueryForString(*(WebCore::Document **)(*((_QWORD *)v6 + 5) + 8), &v41, (uint64_t)&v42, v23);
            v25 = v44;
            if (v44)
            {
              if (v44 != 1)
                goto LABEL_93;
              v3 = (WebCore::Element *)v42;
              v43 = 0;
              v27 = 1;
            }
            else
            {
              v3 = WebCore::SelectorDataList::closest((const WebCore::CSSSelector ***)v42 + 1, v6, v24);
              v27 = v44;
              if (v44 == -1)
                goto LABEL_46;
            }
            ((void (*)(char *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN7WebCore13SelectorQueryENS6_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v27])(&v45, &v42);
            if (!v25)
            {
LABEL_46:
              v28 = v41;
              v41 = 0;
              if (!v28)
                goto LABEL_49;
              if (*(_DWORD *)v28 == 2)
              {
                WTF::StringImpl::destroy(v28, v26);
                if (v3)
                  goto LABEL_50;
              }
              else
              {
                *(_DWORD *)v28 -= 2;
LABEL_49:
                if (v3)
                {
LABEL_50:
                  {
                    v42 = "cue";
                    v43 = 4;
                    WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&WebCore::UserAgentParts::cue(void)::cue, (uint64_t)&v42);
                  }
                  v29 = *((_QWORD *)v6 + 13);
                  if (v29
                    && ((v30 = *(_DWORD *)(v29 + 4), (v30 & 1) != 0)
                      ? (v31 = *(uint64_t **)(v29 + 40), v32 = *(_DWORD *)(v29 + 52))
                      : (v31 = (uint64_t *)(v29 + 32), v32 = v30 >> 5),
                        v32))
                  {
                    v33 = 0;
                    while (1)
                    {
                      v34 = *v31;
                      if (*v31 == WebCore::HTMLNames::useragentpartAttr
                        || *(_QWORD *)(v34 + 24) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 24)
                        && *(_QWORD *)(v34 + 32) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 32))
                      {
                        break;
                      }
                      ++v33;
                      v31 += 2;
                      if (v32 == v33)
                        goto LABEL_64;
                    }
                  }
                  else
                  {
LABEL_64:
                    v33 = 0xFFFFFFFFLL;
                  }
                  result = (unsigned int *)WebCore::Element::setAttributeInternal(v6, v33, (WebCore::TreeScope *)&WebCore::HTMLNames::useragentpartAttr, (WTF::StringImpl **)&WebCore::UserAgentParts::cue(void)::cue, 0);
                  *(_DWORD *)a3 |= 1u;
                  goto LABEL_66;
                }
              }
LABEL_89:
              result = (unsigned int *)WTF::StringImpl::createWithoutCopyingNonEmpty();
              v37 = v42;
              *(_BYTE *)v4 = 1;
              *((_QWORD *)v4 + 1) = v37;
              *((_BYTE *)v4 + 16) = 1;
              goto LABEL_68;
            }
LABEL_93:
            std::__throw_bad_variant_access[abi:sn180100]();
LABEL_94:
            WTF::AtomStringImpl::add();
            WebCore::UserAgentParts::webkitMediaTextTrackDisplayBackdrop(void)::webkitMediaTextTrackDisplayBackdrop = (uint64_t)v42;
            *((_BYTE *)v3 + 2544) = 1;
LABEL_19:
            v16 = *((_QWORD *)v6 + 13);
            if (v16)
            {
              v17 = *(_DWORD *)(v16 + 4);
              if ((v17 & 1) != 0)
              {
                v18 = *(uint64_t **)(v16 + 40);
                v19 = *(_DWORD *)(v16 + 52);
                if (v19)
                {
LABEL_24:
                  for (i = 0; i != v19; ++i)
                  {
                    v21 = *v18;
                    if (*v18 == WebCore::HTMLNames::useragentpartAttr
                      || *(_QWORD *)(v21 + 24) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 24)
                      && *(_QWORD *)(v21 + 32) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 32))
                    {
                      goto LABEL_32;
                    }
                    v18 += 2;
                  }
                }
              }
              else
              {
                v18 = (uint64_t *)(v16 + 32);
                v19 = v17 >> 5;
                if (v19)
                  goto LABEL_24;
              }
            }
            i = 0xFFFFFFFFLL;
LABEL_32:
            result = (unsigned int *)WebCore::Element::setAttributeInternal(v6, i, (WebCore::TreeScope *)&WebCore::HTMLNames::useragentpartAttr, (WTF::StringImpl **)&WebCore::UserAgentParts::webkitMediaTextTrackDisplayBackdrop(void)::webkitMediaTextTrackDisplayBackdrop, 0);
            *(_DWORD *)a3 |= 2u;
            v9 = *(_QWORD *)(a2 + 104);
LABEL_33:
            if (v9)
            {
              v10 = *(_DWORD *)(v9 + 4);
              if ((v10 & 1) == 0)
                goto LABEL_9;
LABEL_35:
              v13 = *(uint64_t **)(v9 + 40);
              LODWORD(v14) = *(_DWORD *)(v9 + 52);
              if ((_DWORD)v14)
                continue;
            }
            goto LABEL_66;
          }
        }
      }
      else
      {
        v11 = (uint64_t *)(v9 + 32);
        LODWORD(v12) = v10 >> 5;
        if (!(v10 >> 5))
          goto LABEL_8;
      }
      v12 = v12;
      while (1)
      {
        v15 = *v11;
        if (*v11 == WebCore::HTMLNames::cuebackgroundAttr
          || *(_QWORD *)(v15 + 24) == *(_QWORD *)(WebCore::HTMLNames::cuebackgroundAttr + 24)
          && *(_QWORD *)(v15 + 32) == *(_QWORD *)(WebCore::HTMLNames::cuebackgroundAttr + 32))
        {
          break;
        }
        v11 += 2;
        if (!--v12)
          goto LABEL_33;
      }
      v3 = (WebCore::Element *)&unk_1EE2F9000;
        goto LABEL_94;
      goto LABEL_19;
    }
LABEL_66:
    if ((~*(_DWORD *)a3 & 3) != 0)
    {
      v35 = *((_QWORD *)v6 + 10);
      if (v35)
      {
        *(_DWORD *)(v35 + 24) += 2;
        do
        {
          v36 = v35;
          result = (unsigned int *)WebCore::tagPseudoObjects(&v38, v35, a3);
          if (v40)
          {
            result = (unsigned int *)v39;
            v39 = 0;
            if (result)
            {
              if (*result == 2)
                result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
              else
                *result -= 2;
            }
          }
          v35 = *(_QWORD *)(v35 + 56);
          if (v35)
            *(_DWORD *)(v35 + 24) += 2;
          if (*(_DWORD *)(v36 + 24) == 2)
          {
            if ((*(_WORD *)(v36 + 30) & 0x400) == 0)
              result = WebCore::Node::removedLastRef((WebCore::Node *)v36, (void *)a2);
          }
          else
          {
            *(_DWORD *)(v36 + 24) -= 2;
          }
        }
        while (v35);
      }
    }
    *(_QWORD *)v4 = 0;
    *((_QWORD *)v4 + 1) = 0;
    *((_QWORD *)v4 + 2) = 0;
LABEL_68:
    if (*(_DWORD *)(a2 + 24) == 2)
    {
      if ((*(_WORD *)(a2 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)a2, (void *)a2);
    }
    else
    {
      *(_DWORD *)(a2 + 24) -= 2;
    }
  }
  else
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = 0;
    *((_QWORD *)result + 2) = 0;
  }
  return result;
}

unsigned int *WebCore::TextTrackCue::didMoveToNewDocument(WebCore::TextTrackCue *this, WebCore::Document *a2)
{
  unsigned int *result;
  WebCore::TreeScope *v5;
  uint64_t v6;
  int v7;
  WebCore::Node *v8;
  uint64_t v9;
  int v10;
  WebCore::Node *v11;

  result = WebCore::ActiveDOMObject::didMoveToNewDocument((WebCore::TextTrackCue *)((char *)this + 32), a2);
  v6 = *((_QWORD *)this + 14);
  if (v6)
  {
    v7 = *(_DWORD *)(v6 + 24);
    *(_DWORD *)(v6 + 24) = v7 + 2;
    v8 = *(WebCore::Node **)(v6 + 40);
    if (v8 == (WebCore::Document *)((char *)a2 + 96))
    {
      if (v7)
      {
LABEL_4:
        *(_DWORD *)(v6 + 24) = v7;
        goto LABEL_5;
      }
    }
    else
    {
      result = (unsigned int *)WebCore::Node::moveTreeToNewScope(v6, v8, (WebCore::Document *)((char *)a2 + 96), v5);
      v7 = *(_DWORD *)(v6 + 24) - 2;
      if (*(_DWORD *)(v6 + 24) != 2)
        goto LABEL_4;
    }
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      result = WebCore::Node::removedLastRef((WebCore::Node *)v6, v8);
  }
LABEL_5:
  v9 = *((_QWORD *)this + 15);
  if (!v9)
    return result;
  v10 = *(_DWORD *)(v9 + 24);
  *(_DWORD *)(v9 + 24) = v10 + 2;
  v11 = *(WebCore::Node **)(v9 + 40);
  if (v11 == (WebCore::Document *)((char *)a2 + 96))
  {
    if (v10)
    {
LABEL_8:
      *(_DWORD *)(v9 + 24) = v10;
      return result;
    }
  }
  else
  {
    result = (unsigned int *)WebCore::Node::moveTreeToNewScope(v9, v11, (WebCore::Document *)((char *)a2 + 96), v5);
    v10 = *(_DWORD *)(v9 + 24) - 2;
    if (*(_DWORD *)(v9 + 24) != 2)
      goto LABEL_8;
  }
  if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
    return WebCore::Node::removedLastRef((WebCore::Node *)v9, v11);
  return result;
}

uint64_t WebCore::TextTrackCue::scriptExecutionContext(WebCore::TextTrackCue *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 5);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

uint64_t WebCore::TextTrackCue::didChange(uint64_t this, int a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_DWORD *)(this + 96) - 1;
  *(_DWORD *)(this + 96) = v2;
  if (!v2)
  {
    *(_BYTE *)(this + 135) = 1;
    v3 = *(_QWORD *)(this + 104);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 8);
      if (v4)
        return WebCore::TextTrack::cueDidChange((WebCore::TextTrack *)(v4 - 120), (WebCore::TextTrackCue *)this, a2);
    }
  }
  return this;
}

uint64_t WebCore::TextTrackCue::setId(uint64_t this, const WTF::AtomString *a2)
{
  _DWORD *v2;
  _QWORD *v3;
  int v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t **v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;

  v2 = *(_DWORD **)a2;
  if (*(_QWORD *)(this + 56) != *(_QWORD *)a2)
  {
    v3 = (_QWORD *)this;
    v4 = *(_DWORD *)(this + 96);
    *(_DWORD *)(this + 96) = v4 + 1;
    if (v4 <= 0)
    {
      v6 = *(_QWORD *)(this + 104);
      if (v6)
      {
        v7 = *(_QWORD *)(v6 + 8);
        if (v7)
        {
          v9 = v7 - 120;
          v10 = (uint64_t **)(v7 + 80);
          v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v11 = off_1E33EBDF8;
          v11[1] = v9;
          v11[2] = v3;
          v13 = v11;
          WTF::WeakHashSet<WebCore::TextTrackClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v10, &v13);
          v12 = v13;
          v13 = 0;
          if (v12)
            (*(void (**)(_QWORD *))(*v12 + 8))(v12);
          v2 = *(_DWORD **)a2;
        }
      }
    }
    if (v2)
      *v2 += 2;
    v5 = (WTF::StringImpl *)v3[7];
    v3[7] = v2;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
    return (*(uint64_t (**)(_QWORD *, _QWORD))(*v3 + 144))(v3, 0);
  }
  return this;
}

WTF::MediaTime *WebCore::TextTrackCue::setStartTime(WebCore::TextTrackCue *this, double a2)
{
  WTF::MediaTime *result;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t **v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;

  result = (WTF::MediaTime *)WTF::MediaTime::toDouble((WebCore::TextTrackCue *)((char *)this + 64));
  if (v5 != a2)
  {
    v6 = WTF::MediaTime::createWithDouble(result, a2);
    v8 = v7;
    v9 = *((_DWORD *)this + 24);
    *((_DWORD *)this + 24) = v9 + 1;
    if (v9 <= 0)
    {
      v10 = *((_QWORD *)this + 13);
      if (v10)
      {
        v11 = *(_QWORD *)(v10 + 8);
        if (v11)
        {
          v12 = v11 - 120;
          v13 = (uint64_t **)(v11 + 80);
          v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v14 = off_1E33EBDF8;
          v14[1] = v12;
          v14[2] = this;
          v16 = v14;
          WTF::WeakHashSet<WebCore::TextTrackClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v13, &v16);
          v15 = v16;
          v16 = 0;
          if (v15)
            (*(void (**)(_QWORD *))(*v15 + 8))(v15);
        }
      }
    }
    *((_QWORD *)this + 8) = v6;
    *((_DWORD *)this + 18) = v8;
    *((_BYTE *)this + 76) = BYTE4(v8);
    return (WTF::MediaTime *)(*(uint64_t (**)(WebCore::TextTrackCue *, uint64_t))(*(_QWORD *)this + 144))(this, 1);
  }
  return result;
}

WTF::MediaTime *WebCore::TextTrackCue::setEndTime(WebCore::TextTrackCue *this, double a2)
{
  WTF::MediaTime *result;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t **v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;

  result = (WTF::MediaTime *)WTF::MediaTime::toDouble((WebCore::TextTrackCue *)((char *)this + 80));
  if (v5 != a2)
  {
    v6 = WTF::MediaTime::createWithDouble(result, a2);
    v8 = v7;
    v9 = *((_DWORD *)this + 24);
    *((_DWORD *)this + 24) = v9 + 1;
    if (v9 <= 0)
    {
      v10 = *((_QWORD *)this + 13);
      if (v10)
      {
        v11 = *(_QWORD *)(v10 + 8);
        if (v11)
        {
          v12 = v11 - 120;
          v13 = (uint64_t **)(v11 + 80);
          v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v14 = off_1E33EBDF8;
          v14[1] = v12;
          v14[2] = this;
          v16 = v14;
          WTF::WeakHashSet<WebCore::TextTrackClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v13, &v16);
          v15 = v16;
          v16 = 0;
          if (v15)
            (*(void (**)(_QWORD *))(*v15 + 8))(v15);
        }
      }
    }
    *((_QWORD *)this + 10) = v6;
    *((_DWORD *)this + 22) = v8;
    *((_BYTE *)this + 92) = BYTE4(v8);
    return (WTF::MediaTime *)(*(uint64_t (**)(WebCore::TextTrackCue *, uint64_t))(*(_QWORD *)this + 144))(this, 1);
  }
  return result;
}

WTF *WebCore::TextTrackCue::dispatchEvent(WTF *this, WebCore::Event *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 13);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if (*(_DWORD *)(v3 + 104))
        return WebCore::EventTarget::dispatchEvent(this, a2);
    }
  }
  return this;
}

_BYTE *WebCore::TextTrackCue::setIsActive(_BYTE *this, char a2)
{
  WebCore::Node *v2;
  uint64_t v3;
  __int16 v4;
  __int16 v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;

  this[133] = a2;
  if ((a2 & 1) == 0)
  {
    v2 = (WebCore::Node *)*((_QWORD *)this + 15);
    if (v2)
    {
      v3 = *((_QWORD *)v2 + 4);
      if (v3)
      {
        *(_DWORD *)(v3 + 24) += 2;
        this = WebCore::ContainerNode::removeChild((WebCore::ContainerNode *)v3, v2, &v6);
        if (*(_DWORD *)(v3 + 24) == 2)
        {
          v4 = *(_WORD *)(v3 + 30);
          if ((v4 & 0x400) == 0)
          {
            v5 = *(_WORD *)(v3 + 28);
            if ((v5 & 0xF000) == 0x9000)
            {
              this = WebCore::Document::removedLastRef((WebCore::Document *)v3, v2);
            }
            else
            {
              if ((v5 & 0x20) != 0)
              {
                (*(void (**)(_QWORD))(**(_QWORD **)(v3 + 160) + 16))(*(_QWORD *)(v3 + 160));
                v4 = *(_WORD *)(v3 + 30);
              }
              *(_WORD *)(v3 + 30) = v4 | 0x400;
              this = (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
            }
          }
        }
        else
        {
          *(_DWORD *)(v3 + 24) -= 2;
        }
      }
      else
      {
        v6 = 0;
        v7 = 0;
        v8 = 0;
      }
      if ((_BYTE)v8)
      {
        this = v7;
        v7 = 0;
        if (this)
        {
          if (*(_DWORD *)this == 2)
            return (_BYTE *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v2);
          else
            *(_DWORD *)this -= 2;
        }
      }
    }
  }
  return this;
}

BOOL WebCore::TextTrackCue::isOrderedBefore(WebCore::TextTrackCue *this, const WebCore::TextTrackCue *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v7;
  __int128 v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;

  v4 = *((_OWORD *)this + 4);
  v22 = *((_OWORD *)a2 + 4);
  v23 = v4;
  if (WTF::MediaTime::compare((WTF::MediaTime *)&v23, (const WTF::MediaTime *)&v22))
  {
    v5 = *((_OWORD *)this + 4);
    v22 = *((_OWORD *)a2 + 4);
    v23 = v5;
    return WTF::MediaTime::compare((WTF::MediaTime *)&v23, (const WTF::MediaTime *)&v22) == -1;
  }
  v7 = *((_OWORD *)this + 5);
  v22 = *((_OWORD *)a2 + 5);
  v23 = v7;
  if (WTF::MediaTime::compare((WTF::MediaTime *)&v23, (const WTF::MediaTime *)&v22))
  {
    v8 = *((_OWORD *)this + 5);
    v22 = *((_OWORD *)a2 + 5);
    v23 = v8;
    return WTF::MediaTime::compare((WTF::MediaTime *)&v23, (const WTF::MediaTime *)&v22) == 1;
  }
  v10 = *((_QWORD *)this + 13);
  if (v10 && (v11 = *(_QWORD *)(v10 + 8)) != 0 && (v12 = *(_QWORD *)(v11 + 48)) != 0)
  {
    v13 = *(unsigned int *)(v12 + 20);
    if ((_DWORD)v13)
    {
      v14 = 0;
      v15 = *(_QWORD *)(v12 + 8);
      while (*(WebCore::TextTrackCue **)(v15 + 8 * v14) != this)
      {
        if (v13 == ++v14)
          goto LABEL_16;
      }
    }
    else
    {
LABEL_16:
      LODWORD(v14) = -1;
    }
  }
  else
  {
    LODWORD(v14) = -1;
  }
  v16 = *((_QWORD *)a2 + 13);
  if (v16 && (v17 = *(_QWORD *)(v16 + 8)) != 0 && (v18 = *(_QWORD *)(v17 + 48)) != 0)
  {
    v19 = *(unsigned int *)(v18 + 20);
    if ((_DWORD)v19)
    {
      v20 = 0;
      v21 = *(_QWORD *)(v18 + 8);
      while (*(const WebCore::TextTrackCue **)(v21 + 8 * v20) != a2)
      {
        if (v19 == ++v20)
          goto LABEL_25;
      }
    }
    else
    {
LABEL_25:
      LODWORD(v20) = -1;
    }
  }
  else
  {
    LODWORD(v20) = -1;
  }
  return v14 < v20;
}

BOOL WebCore::TextTrackCue::cueContentsMatch(WebCore::TextTrackCue *this, const WebCore::TextTrackCue *a2)
{
  return *((_QWORD *)this + 7) == *((_QWORD *)a2 + 7);
}

WTF::StringImpl *WebCore::TextTrackCue::toJSON(WebCore::TextTrackCue *this, WTF::JSONImpl::Object *a2)
{
  const WTF::String *v4;
  WTF::StringImpl *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  _DWORD *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::JSONImpl::Value *v13;
  double v14;
  WTF::StringImpl *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  _DWORD *v20;
  WTF::StringImpl *v21;
  WTF::JSONImpl::Value *v22;
  double v23;
  WTF::StringImpl *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  _DWORD *v29;
  WTF::StringImpl *result;
  _DWORD **v31;
  uint64_t v32;
  _DWORD *v33;
  _DWORD **v34;
  uint64_t v35;
  _DWORD *v36;
  _DWORD **v37;
  uint64_t v38;
  _DWORD *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  _DWORD *v42;
  __int128 v43;
  char v44;

  (*(uint64_t (**)(WebCore::TextTrackCue *))(*(_QWORD *)this + 128))(this);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v41 = (WTF::StringImpl *)v43;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v40 = (WTF::StringImpl *)v43;
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v40, v4);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)a2 + 2, &v41, (const WTF::StringImpl *)&v42, (uint64_t)&v43);
  if (v44)
  {
    v6 = (uint64_t *)((char *)a2 + 24);
    v7 = *((unsigned int *)a2 + 9);
    if ((_DWORD)v7 == *((_DWORD *)a2 + 8))
    {
      v31 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v6, v7 + 1, (unint64_t)&v41);
      v7 = *((unsigned int *)a2 + 9);
      v32 = *((_QWORD *)a2 + 3);
      v33 = *v31;
      if (*v31)
        *v33 += 2;
      *(_QWORD *)(v32 + 8 * v7) = v33;
    }
    else
    {
      v8 = *v6;
      v9 = v41;
      if (v41)
        *(_DWORD *)v41 += 2;
      *(_QWORD *)(v8 + 8 * v7) = v9;
    }
    *((_DWORD *)a2 + 9) = v7 + 1;
  }
  v10 = v42;
  v42 = 0;
  if (v10)
  {
    if (*v10 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v10;
  }
  v11 = v40;
  v40 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v5);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = v41;
  v41 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v5);
    else
      *(_DWORD *)v12 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v41 = (WTF::StringImpl *)v43;
  v43 = *((_OWORD *)this + 4);
  v13 = (WTF::JSONImpl::Value *)WTF::MediaTime::toDouble((WTF::MediaTime *)&v43);
  WTF::JSONImpl::Value::create(v13, v14);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)a2 + 2, &v41, (const WTF::StringImpl *)&v42, (uint64_t)&v43);
  if (v44)
  {
    v16 = (uint64_t *)((char *)a2 + 24);
    v17 = *((unsigned int *)a2 + 9);
    if ((_DWORD)v17 == *((_DWORD *)a2 + 8))
    {
      v34 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v16, v17 + 1, (unint64_t)&v41);
      v17 = *((unsigned int *)a2 + 9);
      v35 = *((_QWORD *)a2 + 3);
      v36 = *v34;
      if (*v34)
        *v36 += 2;
      *(_QWORD *)(v35 + 8 * v17) = v36;
    }
    else
    {
      v18 = *v16;
      v19 = v41;
      if (v41)
        *(_DWORD *)v41 += 2;
      *(_QWORD *)(v18 + 8 * v17) = v19;
    }
    *((_DWORD *)a2 + 9) = v17 + 1;
  }
  v20 = v42;
  v42 = 0;
  if (v20)
  {
    if (*v20 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v20;
  }
  v21 = v41;
  v41 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v15);
    else
      *(_DWORD *)v21 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v43 = *((_OWORD *)this + 5);
  v22 = (WTF::JSONImpl::Value *)WTF::MediaTime::toDouble((WTF::MediaTime *)&v43);
  WTF::JSONImpl::Value::create(v22, v23);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)a2 + 2, &v41, (const WTF::StringImpl *)&v42, (uint64_t)&v43);
  if (v44)
  {
    v25 = (uint64_t *)((char *)a2 + 24);
    v26 = *((unsigned int *)a2 + 9);
    if ((_DWORD)v26 == *((_DWORD *)a2 + 8))
    {
      v37 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v25, v26 + 1, (unint64_t)&v41);
      v26 = *((unsigned int *)a2 + 9);
      v38 = *((_QWORD *)a2 + 3);
      v39 = *v37;
      if (*v37)
        *v39 += 2;
      *(_QWORD *)(v38 + 8 * v26) = v39;
    }
    else
    {
      v27 = *v25;
      v28 = v41;
      if (v41)
        *(_DWORD *)v41 += 2;
      *(_QWORD *)(v27 + 8 * v26) = v28;
    }
    *((_DWORD *)a2 + 9) = v26 + 1;
  }
  v29 = v42;
  v42 = 0;
  if (v29)
  {
    if (*v29 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v29;
  }
  result = v41;
  v41 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v24);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::TextTrackCue::getCueAsHTML@<X0>(uint64_t this@<X0>, WebCore::ContainerNode **a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::ContainerNode *v6;
  WebCore::ContainerNode *v7;
  WebCore::Node *v8;
  uint64_t i;
  WebCore::ContainerNode *v10;

  if (*(_QWORD *)(this + 112) && (v3 = this, (v4 = *(_QWORD *)(this + 40)) != 0) && (v5 = *(_QWORD *)(v4 + 8)) != 0)
  {
    if (*(_BYTE *)(v5 + 178))
    {
      this = 105;
      __break(0xC471u);
    }
    else
    {
      WebCore::DocumentFragment::create((WebCore::DocumentFragment *)(v5 - 288), (uint64_t *)&v10);
      v6 = *(WebCore::ContainerNode **)(v3 + 112);
      v7 = v10;
      this = (uint64_t)WebCore::ContainerNode::cloneChildNodes(v6, v10);
      for (i = *((_QWORD *)v7 + 10); i; i = *(_QWORD *)(i + 56))
        this = (uint64_t)WebCore::removeUserAgentPartAttributes((unsigned int *)i, v8);
      *a2 = v7;
    }
  }
  else
  {
    *a2 = 0;
  }
  return this;
}

unsigned int *WebCore::removeUserAgentPartAttributes(unsigned int *this, WebCore::Node *a2)
{
  __int16 v2;
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *((_WORD *)this + 14);
  if ((v2 & 8) != 0)
    v3 = this;
  else
    v3 = 0;
  if ((v2 & 8) == 0)
    return this;
  v4 = (uint64_t)this;
  this[6] += 2;
  v5 = *((_QWORD *)this + 13);
  if (!v5)
    goto LABEL_28;
  v6 = *(_DWORD *)(v5 + 4);
  LODWORD(v7) = v6 >> 5;
  if ((v6 & 1) == 0)
  {
    v8 = (uint64_t *)(v5 + 32);
    LODWORD(v9) = v6 >> 5;
    if (!(_DWORD)v7)
      goto LABEL_17;
LABEL_10:
    v9 = v9;
    while (1)
    {
      v10 = *v8;
      if (*v8 == WebCore::HTMLNames::cueAttr
        || *(_QWORD *)(v10 + 24) == *(_QWORD *)(WebCore::HTMLNames::cueAttr + 24)
        && *(_QWORD *)(v10 + 32) == *(_QWORD *)(WebCore::HTMLNames::cueAttr + 32))
      {
        goto LABEL_27;
      }
      v8 += 2;
      if (!--v9)
        goto LABEL_17;
    }
  }
  v8 = *(uint64_t **)(v5 + 40);
  LODWORD(v9) = *(_DWORD *)(v5 + 52);
  if ((_DWORD)v9)
    goto LABEL_10;
LABEL_17:
  if ((v6 & 1) == 0)
  {
    v11 = (uint64_t *)(v5 + 32);
    if (!(_DWORD)v7)
      goto LABEL_28;
    goto LABEL_21;
  }
  v11 = *(uint64_t **)(v5 + 40);
  LODWORD(v7) = *(_DWORD *)(v5 + 52);
  if ((_DWORD)v7)
  {
LABEL_21:
    v7 = v7;
    while (1)
    {
      v12 = *v11;
      if (*v11 == WebCore::HTMLNames::cuebackgroundAttr
        || *(_QWORD *)(v12 + 24) == *(_QWORD *)(WebCore::HTMLNames::cuebackgroundAttr + 24)
        && *(_QWORD *)(v12 + 32) == *(_QWORD *)(WebCore::HTMLNames::cuebackgroundAttr + 32))
      {
        break;
      }
      v11 += 2;
      if (!--v7)
        goto LABEL_28;
    }
LABEL_27:
    this = (unsigned int *)WebCore::Element::removeAttribute((WebCore::Element *)v3, (const WebCore::QualifiedName *)&WebCore::HTMLNames::useragentpartAttr);
  }
LABEL_28:
  v13 = *((_QWORD *)v3 + 10);
  if (v13)
  {
    *(_DWORD *)(v13 + 24) += 2;
    do
    {
      v14 = v13;
      this = (unsigned int *)WebCore::removeUserAgentPartAttributes((WebCore *)v13, a2);
      v13 = *(_QWORD *)(v13 + 56);
      if (v13)
        *(_DWORD *)(v13 + 24) += 2;
      if (*(_DWORD *)(v14 + 24) == 2)
      {
        if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
          this = WebCore::Node::removedLastRef((WebCore::Node *)v14, a2);
      }
      else
      {
        *(_DWORD *)(v14 + 24) -= 2;
      }
    }
    while (v13);
  }
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  return this;
}

BOOL WebCore::TextTrackCue::isRenderable(WebCore::TextTrackCue *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 14);
  return v1 && *(_QWORD *)(v1 + 80) != 0;
}

uint64_t WebCore::TextTrackCue::getDisplayTree@<X0>(WebCore::TextTrackCue *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  WebCore::Node *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  const char *v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  unsigned int v45;
  BOOL v46;
  BOOL v47;
  int v48;
  int v49;
  BOOL v50;
  int v51;
  int v52;
  BOOL v53;
  uint64_t v54;
  char *v55;
  size_t v56;
  char *v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  WTF::StringImpl *v63;
  char *v64;
  _WORD *v65;
  uint64_t v66;
  unsigned int v67;
  size_t v68;
  _WORD *v69;
  BOOL v70;
  unsigned int v71;
  uint64_t v72;
  _WORD *v73;
  unsigned int v74;
  char *v75;
  char *v76;
  char *v77;
  __int128 v78;
  int8x16_t v79;
  __int128 v80;
  __int128 v81;
  char *v82;
  char *v83;
  char *v84;
  __int16 v85;
  char *v86;
  unsigned __int128 *v87;
  WTF::StringImpl *v88;
  size_t v89;
  uint64_t v90;
  _BYTE *v91;
  _BYTE *v92;
  size_t v93;
  uint64_t v94;
  _BYTE *v95;
  char *v96;
  uint64_t v97;
  unsigned int v98;
  size_t v99;
  unsigned int v100;
  char *v101;
  unsigned int v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  WTF::StringImpl **v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  unsigned int v118;
  WTF::StringImpl *v119;
  unsigned int v120;
  unsigned int v121;
  uint64_t v122;
  unsigned int v123;
  unsigned __int128 *v124;
  unsigned __int128 *v125;
  unsigned __int128 v126;
  unsigned __int128 *v127;
  unsigned __int128 *v128;
  unsigned __int128 v129;
  char v130;
  char v131;
  size_t v132;
  size_t __n;
  _DWORD *v134;
  _QWORD *v135;
  WTF::StringImpl *v136;
  uint64_t v137;
  WTF::StringImpl *v138;
  char v139;
  WTF::StringImpl *v140;
  WTF::StringImpl *v141;
  WTF::StringImpl *v142;
  char v143;
  uint64_t v144;
  WTF::StringImpl *v145;
  char v146;
  WebCore::Node *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int8x16x2_t v152;
  int8x16x2_t v153;
  int8x16x2_t v154;

  v151 = *MEMORY[0x1E0C80C00];
  result = *((_QWORD *)this + 15);
  if (result && !*((_BYTE *)this + 135))
    goto LABEL_198;
  if (!*((_QWORD *)this + 14))
    goto LABEL_197;
  v5 = *((_QWORD *)this + 5);
  if (!v5)
    goto LABEL_197;
  v6 = *(_QWORD *)(v5 + 8);
  if (!v6)
    goto LABEL_197;
  if (*(_BYTE *)(v6 + 178))
  {
    __break(0xC471u);
    goto LABEL_266;
  }
  v135 = a2;
  v134 = (_DWORD *)(v6 - 264);
  *(_DWORD *)(v6 - 264) += 2;
  if (!result)
  {
    v7 = bmalloc::api::isoAllocate();
    v8 = (WTF::StringImpl *)v7;
    *(_OWORD *)(v7 + 8) = xmmword_1968BC9D0;
    *(_QWORD *)(v7 + 24) = 0x141C00000002;
    *(_QWORD *)(v7 + 32) = 0;
    *(_QWORD *)(v7 + 40) = v6 - 192;
    *(_OWORD *)(v7 + 48) = 0u;
    *(_OWORD *)(v7 + 64) = 0u;
    ++*(_DWORD *)(v6 + 3036);
    *(_QWORD *)(v7 + 80) = 0;
    *(_QWORD *)(v7 + 88) = 0;
    v9 = WebCore::HTMLNames::divTag;
    if (WebCore::HTMLNames::divTag)
      ++*(_DWORD *)WebCore::HTMLNames::divTag;
    *(_QWORD *)(v7 + 96) = v9;
    *(_QWORD *)(v7 + 104) = 0;
    *(_QWORD *)v7 = off_1E33EC5C8;
    v10 = (unsigned int *)WTF::WeakPtr<WebCore::Clipboard,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::Clipboard>((uint64_t)this);
    if (v10)
    {
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
    }
    *((_QWORD *)v8 + 14) = v10;
    {
      WTF::AtomStringImpl::add();
      WebCore::UserAgentParts::webkitMediaTextTrackDisplay(void)::webkitMediaTextTrackDisplay = v144;
    }
    v12 = *((_QWORD *)v8 + 13);
    if (!v12)
      goto LABEL_26;
    v13 = *(_DWORD *)(v12 + 4);
    if ((v13 & 1) != 0)
    {
      v14 = *(uint64_t **)(v12 + 40);
      v15 = *(_DWORD *)(v12 + 52);
      if (!v15)
      {
LABEL_26:
        v16 = 0xFFFFFFFFLL;
        goto LABEL_27;
      }
    }
    else
    {
      v14 = (uint64_t *)(v12 + 32);
      v15 = v13 >> 5;
      if (!v15)
        goto LABEL_26;
    }
    v16 = 0;
    while (1)
    {
      v17 = *v14;
      if (*v14 == WebCore::HTMLNames::useragentpartAttr
        || *(_QWORD *)(v17 + 24) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 24)
        && *(_QWORD *)(v17 + 32) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 32))
      {
        break;
      }
      ++v16;
      v14 += 2;
      if (v15 == v16)
        goto LABEL_26;
    }
LABEL_27:
    WebCore::Element::setAttributeInternal(v8, v16, (WebCore::TreeScope *)&WebCore::HTMLNames::useragentpartAttr, (WTF::StringImpl **)&WebCore::UserAgentParts::webkitMediaTextTrackDisplay(void)::webkitMediaTextTrackDisplay, 0);
    v19 = *((_QWORD *)this + 15);
    *((_QWORD *)this + 15) = v8;
    if (v19)
    {
      if (*(_DWORD *)(v19 + 24) == 2)
      {
        if ((*(_WORD *)(v19 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v19, v18);
          v8 = (WTF::StringImpl *)*((_QWORD *)this + 15);
        }
      }
      else
      {
        *(_DWORD *)(v19 + 24) -= 2;
      }
    }
    {
      WTF::AtomStringImpl::add();
      WebCore::UserAgentParts::webkitGenericCueRoot(void)::webkitGenericCueRoot = v144;
    }
    v20 = *((_QWORD *)v8 + 13);
    if (!v20)
      goto LABEL_44;
    v21 = *(_DWORD *)(v20 + 4);
    if ((v21 & 1) != 0)
    {
      v22 = *(uint64_t **)(v20 + 40);
      v23 = *(_DWORD *)(v20 + 52);
      if (!v23)
      {
LABEL_44:
        v24 = 0xFFFFFFFFLL;
LABEL_45:
        WebCore::Element::setAttributeInternal(v8, v24, (WebCore::TreeScope *)&WebCore::HTMLNames::useragentpartAttr, (WTF::StringImpl **)&WebCore::UserAgentParts::webkitGenericCueRoot(void)::webkitGenericCueRoot, 0);
        result = *((_QWORD *)this + 15);
        goto LABEL_46;
      }
    }
    else
    {
      v22 = (uint64_t *)(v20 + 32);
      v23 = v21 >> 5;
      if (!v23)
        goto LABEL_44;
    }
    v24 = 0;
    while (1)
    {
      v25 = *v22;
      if (*v22 == WebCore::HTMLNames::useragentpartAttr
        || *(_QWORD *)(v25 + 24) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 24)
        && *(_QWORD *)(v25 + 32) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 32))
      {
        goto LABEL_45;
      }
      ++v24;
      v22 += 2;
      if (v23 == v24)
        goto LABEL_44;
    }
  }
LABEL_46:
  WebCore::ContainerNode::removeChildren(result);
  WebCore::DocumentFragment::create((WebCore::DocumentFragment *)(v6 - 288), (uint64_t *)&v147);
  v26 = v147;
  WebCore::ContainerNode::cloneChildNodes(*((WebCore::ContainerNode **)this + 14), v147);
  WebCore::ContainerNode::appendChild(*((_QWORD *)this + 15), v26, (uint64_t)&v144);
  if (v146)
  {
    v28 = v145;
    v145 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, v27);
      else
        *(_DWORD *)v28 -= 2;
    }
  }
  if (!*((_DWORD *)this + 32))
    goto LABEL_168;
  v29 = *(_QWORD *)(v6 + 240);
  if (!v29)
    goto LABEL_168;
  v30 = *(_QWORD *)(v29 + 8);
  if (!v30)
    goto LABEL_168;
  v31 = *(_QWORD *)(v30 + 24);
  if (!v31)
    goto LABEL_168;
  v32 = *(_QWORD *)(v31 + 8);
  if (!v32)
    goto LABEL_168;
  v33 = bmalloc::api::isoAllocate();
  v35 = v33;
  *(_OWORD *)(v33 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v33 + 24) = 0x101C00000002;
  *(_QWORD *)(v33 + 32) = 0;
  *(_QWORD *)(v33 + 40) = v6 - 192;
  *(_OWORD *)(v33 + 48) = 0u;
  *(_OWORD *)(v33 + 64) = 0u;
  ++*(_DWORD *)(v6 + 3036);
  *(_QWORD *)(v33 + 80) = 0;
  *(_QWORD *)(v33 + 88) = 0;
  v36 = WebCore::HTMLNames::styleTag;
  if (WebCore::HTMLNames::styleTag)
    ++*(_DWORD *)WebCore::HTMLNames::styleTag;
  *(_QWORD *)(v33 + 96) = v36;
  *(_QWORD *)(v33 + 104) = 0;
  *(_QWORD *)v33 = off_1E33CD4C8;
  *(_WORD *)(v33 + 112) = 0;
  *(_DWORD *)(v33 + 116) = 0;
  *(_DWORD *)(v33 + 120) = 0;
  *(_OWORD *)(v33 + 128) = 0uLL;
  *(_OWORD *)(v33 + 144) = 0uLL;
  *(_BYTE *)(v33 + 160) = 0;
  v37 = *(_QWORD *)(v32 + 512);
  if (v37)
    *(_DWORD *)v37 += 2;
  {
    v148 = "cue";
    v149 = 4;
    WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&WebCore::UserAgentParts::cue(void)::cue, (uint64_t)&v148);
  }
  v38 = WebCore::UserAgentParts::cue(void)::cue;
  if (WebCore::UserAgentParts::cue(void)::cue)
    *(_DWORD *)WebCore::UserAgentParts::cue(void)::cue += 2;
  v39 = *((_DWORD *)this + 32);
  if (*((_BYTE *)this + 132))
    v40 = "px !important}";
  else
    v40 = "px}";
  v41 = 15;
  if (!*((_BYTE *)this + 132))
    v41 = 4;
  v132 = v41 - 1;
  if ((unint64_t)(v41 - 1) >> 31)
  {
    __break(0xC471u);
LABEL_266:
    JUMPOUT(0x195D8E668);
  }
  if (v37)
  {
    v42 = *(_DWORD *)(v37 + 4);
    if (v38)
      goto LABEL_71;
  }
  else
  {
    v42 = 0;
    if (v38)
    {
LABEL_71:
      v43 = *(_DWORD *)(v38 + 4);
      if ((v39 & 0x80000000) == 0)
        goto LABEL_72;
LABEL_214:
      v118 = -v39;
      v44 = 1;
      do
      {
        ++v44;
        v70 = v118 >= 0xA;
        v118 /= 0xAu;
      }
      while (v70);
      goto LABEL_74;
    }
  }
  v43 = 0;
  if ((v39 & 0x80000000) != 0)
    goto LABEL_214;
LABEL_72:
  v44 = 0;
  v45 = *((_DWORD *)this + 32);
  do
  {
    ++v44;
    v46 = v45 > 9;
    v45 /= 0xAu;
  }
  while (v46);
LABEL_74:
  if (v44 < 0)
    goto LABEL_263;
  v47 = __OFADD__(v44, (_DWORD)v132);
  v48 = v44 + v132;
  if (v47)
    goto LABEL_263;
  v47 = __OFADD__(v48, 11);
  v49 = v48 + 11;
  v50 = v47;
  if (v43 < 0)
    goto LABEL_263;
  if (v50)
    goto LABEL_263;
  v47 = __OFADD__(v43, v49);
  v51 = v43 + v49;
  if (v47)
    goto LABEL_263;
  v47 = __OFADD__(v51, 3);
  v52 = v51 + 3;
  v53 = v47;
  if (v42 < 0)
    goto LABEL_263;
  if (v53)
    goto LABEL_263;
  v54 = (v42 + v52);
  if (__OFADD__(v42, v52))
    goto LABEL_263;
  v136 = (WTF::StringImpl *)v37;
  if ((!v37 || (*(_BYTE *)(v37 + 16) & 4) != 0) && (!v38 || (*(_BYTE *)(v38 + 16) & 4) != 0))
  {
    if (!(_DWORD)v54)
      goto LABEL_232;
    if ((v54 & 0x80000000) != 0)
      goto LABEL_263;
    WTF::tryFastCompactMalloc((WTF *)(v54 + 20));
    v86 = v148;
    if (!v148)
      goto LABEL_263;
    __n = v132;
    v87 = (unsigned __int128 *)(v148 + 20);
    *(_DWORD *)v148 = 2;
    *((_DWORD *)v86 + 1) = v54;
    *((_QWORD *)v86 + 1) = v86 + 20;
    v88 = (WTF::StringImpl *)v86;
    *((_DWORD *)v86 + 4) = 4;
    if (v37)
    {
      v34 = *(_BYTE **)(v37 + 8);
      v89 = *(unsigned int *)(v37 + 4);
      if ((*(_BYTE *)(v37 + 16) & 4) != 0)
      {
        if ((_DWORD)v89)
        {
          if ((_DWORD)v89 == 1)
            *(_BYTE *)v87 = *v34;
          else
            memcpy(v86 + 20, v34, v89);
        }
      }
      else
      {
        if (v89 < 0x10)
        {
          v124 = (unsigned __int128 *)(v86 + 20);
        }
        else
        {
          v124 = (unsigned __int128 *)((char *)v87 + (v89 & 0xFFFFFFF0));
          v125 = v87;
          do
          {
            v126 = (unsigned __int128)vld2q_s8(v34);
            v34 += 32;
            *v125++ = v126;
          }
          while (v125 != v124);
        }
        while (v124 != (unsigned __int128 *)((char *)v87 + v89))
        {
          v130 = *v34;
          v34 += 2;
          *(_BYTE *)v124 = v130;
          v124 = (unsigned __int128 *)((char *)v124 + 1);
        }
      }
      v90 = *(unsigned int *)(v37 + 4);
    }
    else
    {
      v90 = 0;
    }
    v91 = (char *)v87 + v90;
    v91[2] = 58;
    *(_WORD *)v91 = 14880;
    v92 = v91 + 3;
    if (v38)
    {
      v34 = *(_BYTE **)(v38 + 8);
      v93 = *(unsigned int *)(v38 + 4);
      if ((*(_BYTE *)(v38 + 16) & 4) != 0)
      {
        if ((_DWORD)v93)
        {
          if ((_DWORD)v93 == 1)
            *v92 = *v34;
          else
            memcpy(v92, v34, v93);
        }
      }
      else
      {
        if (v93 < 0x10)
        {
          v127 = (unsigned __int128 *)(v91 + 3);
        }
        else
        {
          v127 = (unsigned __int128 *)&v92[v93 & 0xFFFFFFF0];
          v128 = (unsigned __int128 *)(v91 + 3);
          do
          {
            v129 = (unsigned __int128)vld2q_s8(v34);
            v34 += 32;
            *v128++ = v129;
          }
          while (v128 != v127);
        }
        while (v127 != (unsigned __int128 *)&v92[v93])
        {
          v131 = *v34;
          v34 += 2;
          *(_BYTE *)v127 = v131;
          v127 = (unsigned __int128 *)((char *)v127 + 1);
        }
      }
      v94 = *(unsigned int *)(v38 + 4);
    }
    else
    {
      v94 = 0;
    }
    v95 = &v92[v94];
    *(_QWORD *)v95 = *(_QWORD *)"{font-size:";
    *(_DWORD *)(v95 + 7) = 979729001;
    v96 = v95 + 11;
    v97 = 0;
    if ((v39 & 0x80000000) != 0)
    {
      v121 = -v39;
      do
      {
        *((_BYTE *)&v149 + v97-- + 4) = (v121 % 0xA) | 0x30;
        v46 = v121 > 9;
        v121 /= 0xAu;
      }
      while (v46);
      v122 = v97 + 12;
      v34 = (char *)&v148 + v97 + 12;
      *v34 = 45;
      if (v97 + 14 <= 14)
      {
        if (v122 <= 12)
          v122 = 12;
        v99 = v122 - v97 - 11;
        goto LABEL_142;
      }
    }
    else
    {
      v98 = v39;
      do
      {
        *((_BYTE *)&v149 + v97-- + 4) = (v98 % 0xA) | 0x30;
        v46 = v98 > 9;
        v98 /= 0xAu;
      }
      while (v46);
      if (v97 + 14 <= 13)
      {
        v34 = (char *)&v149 + v97 + 5;
        v99 = -v97;
LABEL_142:
        memcpy(v96, v34, v99);
      }
    }
    if ((v39 & 0x80000000) != 0)
    {
      v123 = -v39;
      v100 = 1;
      do
      {
        ++v100;
        v70 = v123 >= 0xA;
        v123 /= 0xAu;
      }
      while (v70);
    }
    else
    {
      v100 = 0;
      do
      {
        ++v100;
        v46 = v39 > 9;
        v39 /= 0xAu;
      }
      while (v46);
    }
    if ((_DWORD)__n)
    {
      v101 = &v96[v100];
      if ((_DWORD)__n == 1)
        *v101 = *v40;
      else
        memcpy(v101, v40, __n);
    }
    v59 = v88;
    goto LABEL_150;
  }
  if ((_DWORD)v54)
  {
    if (v54 <= 0x7FFFFFEF)
    {
      WTF::tryFastCompactMalloc((WTF *)(2 * v54 + 20));
      v55 = v148;
      if (v148)
      {
        v56 = v132;
        v57 = v148 + 20;
        *(_DWORD *)v148 = 2;
        *((_DWORD *)v55 + 1) = v54;
        *((_QWORD *)v55 + 1) = v55 + 20;
        v58 = v37;
        v59 = (WTF::StringImpl *)v55;
        *((_DWORD *)v55 + 4) = 0;
        v137 = v58;
        WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v137, v55 + 20);
        v60 = v137;
        if (v137)
          v60 = *(unsigned int *)(v137 + 4);
        v61 = &v57[2 * v60];
        *(_DWORD *)v61 = 3801120;
        *((_WORD *)v61 + 2) = 58;
        v62 = v61 + 6;
        v141 = (WTF::StringImpl *)v38;
        WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v141, v61 + 6);
        v63 = v141;
        if (v141)
          v63 = (WTF::StringImpl *)*((unsigned int *)v141 + 1);
        v64 = &v62[2 * (_QWORD)v63];
        *(_OWORD *)v64 = xmmword_1969F2000;
        *((_DWORD *)v64 + 4) = 6619258;
        *((_WORD *)v64 + 10) = 58;
        v65 = v64 + 22;
        if ((v39 & 0x80000000) != 0)
        {
          v71 = -v39;
          v72 = 12;
          v68 = v56;
          do
          {
            *((_BYTE *)&v148 + v72--) = (v71 % 0xA) | 0x30;
            v46 = v71 > 9;
            v71 /= 0xAu;
          }
          while (v46);
          *((_BYTE *)&v148 + v72) = 45;
          if (v72 + 2 <= 14)
          {
            v73 = v65;
            do
            {
              *v73++ = *((unsigned __int8 *)&v148 + v72);
              v46 = v72++ < 12;
            }
            while (v46);
          }
        }
        else
        {
          v66 = 0;
          v67 = v39;
          v68 = v56;
          do
          {
            *((_BYTE *)&v149 + v66-- + 4) = (v67 % 0xA) | 0x30;
            v46 = v67 > 9;
            v67 /= 0xAu;
          }
          while (v46);
          if (v66 + 14 <= 13)
          {
            v69 = v65;
            do
            {
              *v69++ = *((unsigned __int8 *)&v149 + v66 + 5);
              v70 = __CFADD__(v66++, 1);
            }
            while (!v70);
          }
        }
        if ((v39 & 0x80000000) != 0)
        {
          v120 = -v39;
          v74 = 1;
          do
          {
            ++v74;
            v70 = v120 >= 0xA;
            v120 /= 0xAu;
          }
          while (v70);
        }
        else
        {
          v74 = 0;
          do
          {
            ++v74;
            v46 = v39 > 9;
            v39 /= 0xAu;
          }
          while (v46);
        }
        v75 = (char *)&v65[v74];
        v76 = &v75[2 * v68];
        if ((v68 & 0x7FFFFFC0) != 0)
        {
          v77 = &v75[2 * (v68 & 0x7FFFFFC0)];
          v78 = 0uLL;
          do
          {
            v152.val[0] = *(int8x16_t *)v40;
            v79 = *((int8x16_t *)v40 + 1);
            v153.val[0] = (int8x16_t)*((_OWORD *)v40 + 2);
            v80 = *((_OWORD *)v40 + 3);
            v40 += 64;
            v81 = v80;
            v153.val[1] = 0uLL;
            v154.val[0] = v79;
            v152.val[1] = 0uLL;
            v82 = v75;
            vst2q_s8(v82, v152);
            v82 += 32;
            v154.val[1] = 0uLL;
            vst2q_s8(v82, v154);
            v83 = v75 + 64;
            vst2q_s8(v83, v153);
            v84 = v75 + 96;
            vst2q_s8(v84, *(int8x16x2_t *)(&v78 - 1));
            v75 += 128;
          }
          while (v75 != v77);
          v75 = v77;
        }
        while (v75 != v76)
        {
          v85 = *(unsigned __int8 *)v40++;
          *(_WORD *)v75 = v85;
          v75 += 2;
        }
        goto LABEL_150;
      }
    }
LABEL_263:
    v141 = 0;
    __break(0xC471u);
    JUMPOUT(0x195D8E8B8);
  }
LABEL_232:
  v59 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
  *MEMORY[0x1E0CBEF70] += 2;
LABEL_150:
  v141 = v59;
  v102 = *(unsigned __int16 *)(v35 + 28) >> 12;
  if (v102 == 1)
    goto LABEL_151;
  if (v102 > 0xB)
    goto LABEL_152;
  if (v102 == 11)
  {
LABEL_151:
    WebCore::ContainerNode::stringReplaceAll((WebCore::ContainerNode *)v35, (uint64_t)&v141);
LABEL_152:
    v148 = 0;
    v149 = 0;
    v150 = 0;
    goto LABEL_153;
  }
  if (((1 << v102) & 0x19C) == 0)
    goto LABEL_152;
  (*(void (**)(char **__return_ptr, uint64_t, WTF::StringImpl **))(*(_QWORD *)v35 + 120))(&v148, v35, &v141);
  if ((_BYTE)v150)
  {
    v119 = (WTF::StringImpl *)v149;
    v149 = 0;
    if (v119)
    {
      if (*(_DWORD *)v119 == 2)
        WTF::StringImpl::destroy(v119, (WTF::StringImpl *)v34);
      else
        *(_DWORD *)v119 -= 2;
    }
  }
LABEL_153:
  v103 = v141;
  v141 = 0;
  if (!v103)
    goto LABEL_156;
  if (*(_DWORD *)v103 != 2)
  {
    *(_DWORD *)v103 -= 2;
LABEL_156:
    if (v38)
      goto LABEL_157;
    goto LABEL_159;
  }
  WTF::StringImpl::destroy(v103, (WTF::StringImpl *)v34);
  if (v38)
  {
LABEL_157:
    if (*(_DWORD *)v38 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v38, (WTF::StringImpl *)v34);
    else
      *(_DWORD *)v38 -= 2;
  }
LABEL_159:
  if (v136)
  {
    if (*(_DWORD *)v136 == 2)
      WTF::StringImpl::destroy(v136, (WTF::StringImpl *)v34);
    else
      *(_DWORD *)v136 -= 2;
  }
  WebCore::ContainerNode::appendChild(*((_QWORD *)this + 15), (WebCore::Node *)v35, (uint64_t)&v141);
  if (v143)
  {
    v104 = v142;
    v142 = 0;
    if (v104)
    {
      if (*(_DWORD *)v104 == 2)
        WTF::StringImpl::destroy(v104, v27);
      else
        *(_DWORD *)v104 -= 2;
    }
  }
  if (*(_DWORD *)(v35 + 24) == 2)
  {
    if ((*(_WORD *)(v35 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v35, v27);
  }
  else
  {
    *(_DWORD *)(v35 + 24) -= 2;
  }
LABEL_168:
  v105 = *((_QWORD *)this + 13);
  if (v105)
  {
    v106 = *(_QWORD *)(v105 + 8);
    if (v106)
    {
      if (*(_BYTE *)(v106 + 72))
      {
        v107 = *(unsigned int *)(v106 + 68);
        if ((_DWORD)v107)
        {
          v108 = *(WTF::StringImpl ***)(v106 + 56);
          v109 = 8 * v107;
          do
          {
            v110 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 15) + 40) + 8);
            v111 = bmalloc::api::isoAllocate();
            v112 = v111;
            *(_OWORD *)(v111 + 8) = xmmword_1968BC9D0;
            *(_QWORD *)(v111 + 24) = 0x101C00000002;
            *(_QWORD *)(v111 + 32) = 0;
            *(_QWORD *)(v111 + 40) = v110 + 96;
            *(_OWORD *)(v111 + 48) = 0u;
            *(_OWORD *)(v111 + 64) = 0u;
            ++*(_DWORD *)(v110 + 3324);
            *(_QWORD *)(v111 + 80) = 0;
            *(_QWORD *)(v111 + 88) = 0;
            v113 = WebCore::HTMLNames::styleTag;
            if (WebCore::HTMLNames::styleTag)
              ++*(_DWORD *)WebCore::HTMLNames::styleTag;
            *(_QWORD *)(v111 + 96) = v113;
            *(_QWORD *)(v111 + 104) = 0;
            *(_QWORD *)v111 = off_1E33CD4C8;
            *(_WORD *)(v111 + 112) = 0;
            *(_DWORD *)(v111 + 116) = 0;
            *(_DWORD *)(v111 + 120) = 0;
            *(_OWORD *)(v111 + 128) = 0uLL;
            *(_OWORD *)(v111 + 144) = 0uLL;
            *(_BYTE *)(v111 + 160) = 0;
            v114 = *v108;
            if (*v108)
              *(_DWORD *)v114 += 2;
            v140 = v114;
            WebCore::ContainerNode::stringReplaceAll((WebCore::ContainerNode *)v111, (uint64_t)&v140);
            v116 = v140;
            v140 = 0;
            if (v116)
            {
              if (*(_DWORD *)v116 == 2)
                WTF::StringImpl::destroy(v116, v115);
              else
                *(_DWORD *)v116 -= 2;
            }
            WebCore::ContainerNode::appendChild(*((_QWORD *)this + 15), (WebCore::Node *)v112, (uint64_t)&v137);
            if (v139)
            {
              v117 = v138;
              v138 = 0;
              if (v117)
              {
                if (*(_DWORD *)v117 == 2)
                  WTF::StringImpl::destroy(v117, v27);
                else
                  *(_DWORD *)v117 -= 2;
              }
            }
            if (*(_DWORD *)(v112 + 24) == 2)
            {
              if ((*(_WORD *)(v112 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v112, v27);
            }
            else
            {
              *(_DWORD *)(v112 + 24) -= 2;
            }
            ++v108;
            v109 -= 8;
          }
          while (v109);
        }
      }
    }
  }
  *((_BYTE *)this + 135) = 0;
  a2 = v135;
  if (v147)
  {
    if (*((_DWORD *)v147 + 6) == 2)
    {
      if ((*((_WORD *)v147 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v147, v27);
    }
    else
    {
      *((_DWORD *)v147 + 6) -= 2;
    }
  }
  if (*v134 == 2)
  {
    if ((*(_WORD *)(v6 - 258) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)(v6 - 288), v27);
  }
  else
  {
    *v134 -= 2;
  }
LABEL_197:
  result = *((_QWORD *)this + 15);
  if (result)
LABEL_198:
    *(_DWORD *)(result + 24) += 2;
  *a2 = result;
  return result;
}

WTF::StringImpl *WebCore::TextTrackCue::removeDisplayTree(WTF::StringImpl *this)
{
  WebCore::Node *v1;
  uint64_t v2;
  __int16 v3;
  __int16 v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;

  v1 = (WebCore::Node *)*((_QWORD *)this + 15);
  if (v1)
  {
    v2 = *((_QWORD *)v1 + 4);
    if (v2)
    {
      *(_DWORD *)(v2 + 24) += 2;
      this = WebCore::ContainerNode::removeChild((WebCore::ContainerNode *)v2, v1, &v5);
      if (*(_DWORD *)(v2 + 24) == 2)
      {
        v3 = *(_WORD *)(v2 + 30);
        if ((v3 & 0x400) == 0)
        {
          v4 = *(_WORD *)(v2 + 28);
          if ((v4 & 0xF000) == 0x9000)
          {
            this = (WTF::StringImpl *)WebCore::Document::removedLastRef((WebCore::Document *)v2, v1);
          }
          else
          {
            if ((v4 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 160) + 16))(*(_QWORD *)(v2 + 160));
              v3 = *(_WORD *)(v2 + 30);
            }
            *(_WORD *)(v2 + 30) = v3 | 0x400;
            this = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
          }
        }
      }
      else
      {
        *(_DWORD *)(v2 + 24) -= 2;
      }
    }
    else
    {
      v5 = 0;
      v6 = 0;
      v7 = 0;
    }
    if ((_BYTE)v7)
    {
      this = v6;
      v6 = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v1);
        else
          *(_DWORD *)this -= 2;
      }
    }
  }
  return this;
}

uint64_t WebCore::TextTrackCue::setFontSize(uint64_t this, int a2, int a3)
{
  if (*(_DWORD *)(this + 128) != a2 || *(unsigned __int8 *)(this + 132) != a3)
  {
    *(_BYTE *)(this + 135) = 1;
    *(_BYTE *)(this + 132) = a3;
    *(_DWORD *)(this + 128) = a2;
  }
  return this;
}

void *WebCore::TextTrackCueGeneric::bisoHeap(WebCore::TextTrackCueGeneric *this)
{
  return &WebCore::TextTrackCueGeneric::bisoHeap(void)::heap;
}

uint64_t WebCore::TextTrackCueGeneric::operator new(uint64_t this)
{
  if (this == 496)
    return bmalloc::api::isoAllocate();
  __break(0xC471u);
  return this;
}

WTF::StringImpl *WebCore::TextTrackCueGenericBoxElement::applyCSSProperties(WebCore::TextTrackCueGenericBoxElement *this)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;

  result = (WTF::StringImpl *)WebCore::VTTCueBox::applyCSSProperties(this);
  v4 = *((_QWORD *)this + 14);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      ++*(_DWORD *)(v5 + 24);
      v6 = *(_QWORD *)(v5 + 248);
      *(_DWORD *)(v6 + 24) += 2;
      if ((*(_BYTE *)(v5 + 446) & 4) != 0)
      {
        WebCore::serializationForHTML((WebCore *)(v5 + 440), &v7);
        WebCore::StyledElement::setInlineStyleProperty((WebCore::StyledElement *)v6, (WTF::StringImpl *)5, (uint64_t)&v7, 0, 0);
        result = v7;
        v7 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
          else
            *(_DWORD *)result -= 2;
        }
      }
      if ((*(_BYTE *)(v5 + 462) & 4) != 0)
      {
        WebCore::serializationForHTML((WebCore *)(v5 + 456), &v7);
        WebCore::StyledElement::setInlineStyleProperty((WebCore::StyledElement *)v6, (WTF::StringImpl *)0x3D, (uint64_t)&v7, 0, 0);
        result = v7;
        v7 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
          else
            *(_DWORD *)result -= 2;
        }
      }
      if ((*(_BYTE *)(v5 + 454) & 4) != 0)
      {
        WebCore::serializationForHTML((WebCore *)(v5 + 448), &v7);
        WebCore::StyledElement::setInlineStyleProperty(this, (WTF::StringImpl *)0x3D, (uint64_t)&v7, 0, 0);
        result = v7;
        v7 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
          else
            *(_DWORD *)result -= 2;
        }
      }
      if (*(_DWORD *)(v6 + 24) == 2)
      {
        if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
          result = (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)v6, v3);
      }
      else
      {
        *(_DWORD *)(v6 + 24) -= 2;
      }
      if (*(_DWORD *)(v5 + 24) == 1)
        return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5);
      else
        --*(_DWORD *)(v5 + 24);
    }
  }
  return result;
}

uint64_t WebCore::TextTrackCueGeneric::create@<X0>(WebCore::TextTrackCueGeneric *this@<X0>, WebCore::ScriptExecutionContext *a2@<X1>, const WTF::MediaTime *a3@<X2>, WTF::StringImpl **a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t result;
  WTF::StringImpl *v16;

  v11 = bmalloc::api::isoAllocate();
  if (*((_BYTE *)this + 274))
  {
    result = 96;
    __break(0xC471u);
  }
  else
  {
    v12 = v11;
    v13 = *a4;
    if (*a4)
      *(_DWORD *)v13 += 2;
    v16 = v13;
    WebCore::VTTCue::VTTCue(v11, (uint64_t)this - 192, a2, a3, (uint64_t *)&v16);
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v14);
      else
        *(_DWORD *)v16 -= 2;
    }
    *(_QWORD *)(v12 + 32) = &unk_1E33EC110;
    *(_QWORD *)v12 = off_1E33EBFC0;
    *(_QWORD *)(v12 + 136) = &unk_1E33EC168;
    *(_OWORD *)(v12 + 440) = 0u;
    *(_OWORD *)(v12 + 456) = 0u;
    *(_OWORD *)(v12 + 472) = 0u;
    *(_BYTE *)(v12 + 488) = 1;
    *a5 = v12;
    return (uint64_t)WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)(v12 + 32));
  }
  return result;
}

WTF::StringImpl *WebCore::TextTrackCueGeneric::createDisplayTree@<X0>(WTF::StringImpl *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = *((_QWORD *)this + 5);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      if (*(_BYTE *)(v4 + 178))
      {
        __break(0xC471u);
        JUMPOUT(0x195D8EE90);
      }
      v5 = (uint64_t)this;
      v6 = bmalloc::api::isoAllocate();
      v7 = (WTF::StringImpl *)v6;
      *(_OWORD *)(v6 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v6 + 24) = 0x141C00000002;
      *(_QWORD *)(v6 + 32) = 0;
      *(_QWORD *)(v6 + 40) = v4 - 192;
      *(_OWORD *)(v6 + 48) = 0u;
      *(_OWORD *)(v6 + 64) = 0u;
      ++*(_DWORD *)(v4 + 3036);
      *(_QWORD *)(v6 + 80) = 0;
      *(_QWORD *)(v6 + 88) = 0;
      v8 = WebCore::HTMLNames::divTag;
      if (WebCore::HTMLNames::divTag)
        ++*(_DWORD *)WebCore::HTMLNames::divTag;
      *(_QWORD *)(v6 + 96) = v8;
      *(_QWORD *)(v6 + 104) = 0;
      *(_QWORD *)v6 = off_1E33EC5C8;
      v9 = (unsigned int *)WTF::WeakPtr<WebCore::Clipboard,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::Clipboard>(v5);
      if (v9)
      {
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 + 1, v9));
      }
      *((_QWORD *)v7 + 14) = v9;
      *((_QWORD *)v7 + 15) = 0;
      *(_QWORD *)v7 = off_1E33EB5C8;
      {
        WTF::AtomStringImpl::add();
        WebCore::UserAgentParts::webkitMediaTextTrackDisplay(void)::webkitMediaTextTrackDisplay = v17;
      }
      v11 = *((_QWORD *)v7 + 13);
      if (!v11)
        goto LABEL_23;
      v12 = *(_DWORD *)(v11 + 4);
      if ((v12 & 1) != 0)
      {
        v13 = *(uint64_t **)(v11 + 40);
        v14 = *(_DWORD *)(v11 + 52);
        if (!v14)
        {
LABEL_23:
          v15 = 0xFFFFFFFFLL;
LABEL_24:
          this = WebCore::Element::setAttributeInternal(v7, v15, (WebCore::TreeScope *)&WebCore::HTMLNames::useragentpartAttr, (WTF::StringImpl **)&WebCore::UserAgentParts::webkitMediaTextTrackDisplay(void)::webkitMediaTextTrackDisplay, 0);
          goto LABEL_25;
        }
      }
      else
      {
        v13 = (uint64_t *)(v11 + 32);
        v14 = v12 >> 5;
        if (!v14)
          goto LABEL_23;
      }
      v15 = 0;
      while (1)
      {
        v16 = *v13;
        if (*v13 == WebCore::HTMLNames::useragentpartAttr
          || *(_QWORD *)(v16 + 24) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 24)
          && *(_QWORD *)(v16 + 32) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 32))
        {
          goto LABEL_24;
        }
        ++v15;
        v13 += 2;
        if (v14 == v15)
          goto LABEL_23;
      }
    }
  }
  v7 = 0;
LABEL_25:
  *a2 = v7;
  return this;
}

uint64_t WebCore::TextTrackCueGeneric::setPosition@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;

  result = WebCore::VTTCue::setPosition(a1, a2, a3);
  if (!*(_BYTE *)(a3 + 16))
    *(_BYTE *)(a1 + 488) = 0;
  return result;
}

uint64_t WebCore::TextTrackCueGeneric::cueContentsMatch(WTF **this, const WTF::StringImpl **a2)
{
  uint64_t result;
  const WTF::StringImpl *v5;
  WTF *v6;
  const WTF::StringImpl *v7;
  WTF *v8;
  const WTF::StringImpl *v9;

  if ((*((unsigned int (**)(const WTF::StringImpl **))*a2 + 16))(a2) != 2)
  {
    __break(0xC471u);
    JUMPOUT(0x195D8EFB0);
  }
  result = WebCore::VTTCue::cueContentsMatch((WebCore::VTTCue *)this, (const WebCore::TextTrackCue *)a2);
  if ((_DWORD)result)
  {
    if (*((double *)this + 58) != *((double *)a2 + 58) || *((double *)this + 59) != *((double *)a2 + 59))
      return 0;
    result = WTF::equal(this[60], a2[60], v5);
    if (!(_DWORD)result)
      return result;
    v6 = this[55];
    v7 = a2[55];
    if (((unint64_t)v6 & 0x8000000000000) != 0)
    {
      if (((unint64_t)v7 & 0x8000000000000) == 0
        || *(float *)(((unint64_t)v6 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)(((unint64_t)v7 & 0xFFFFFFFFFFFFLL)
                                                                                 + 4)
        || *(float *)(((unint64_t)v6 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)(((unint64_t)v7 & 0xFFFFFFFFFFFFLL)
                                                                                 + 8))
      {
        return 0;
      }
      if (*(float *)(((unint64_t)v6 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)(((unint64_t)v7 & 0xFFFFFFFFFFFFLL)
                                                                                   + 0xC))
        return 0;
      if (*(float *)(((unint64_t)v6 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)(((unint64_t)v7 & 0xFFFFFFFFFFFFLL)
                                                                                    + 0x10))
        return 0;
      if ((unint64_t)v6 >> 56 != (unint64_t)v7 >> 56 || BYTE6(v6) != BYTE6(v7))
        return 0;
      goto LABEL_9;
    }
    result = 0;
    if (v6 == v7 && ((unint64_t)v7 & 0x8000000000000) == 0)
    {
LABEL_9:
      v8 = this[56];
      v9 = a2[56];
      if (((unint64_t)v8 & 0x8000000000000) == 0)
        return ((unint64_t)v9 & 0x8000000000000) == 0 && v8 == v9;
      if (((unint64_t)v9 & 0x8000000000000) != 0)
      {
        if (*(float *)(((unint64_t)v8 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)(((unint64_t)v9 & 0xFFFFFFFFFFFFLL)
                                                                                   + 4))
          return 0;
        if (*(float *)(((unint64_t)v8 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)(((unint64_t)v9 & 0xFFFFFFFFFFFFLL)
                                                                                   + 8))
          return 0;
        if (*(float *)(((unint64_t)v8 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)(((unint64_t)v9 & 0xFFFFFFFFFFFFLL)
                                                                                     + 0xC))
          return 0;
        if (*(float *)(((unint64_t)v8 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)(((unint64_t)v9 & 0xFFFFFFFFFFFFLL)
                                                                                      + 0x10))
          return 0;
        if ((unint64_t)v8 >> 56 == (unint64_t)v9 >> 56)
          return BYTE6(v8) == BYTE6(v9);
      }
      return 0;
    }
  }
  return result;
}

BOOL WebCore::TextTrackCueGeneric::isOrderedBefore(WebCore::TextTrackCueGeneric *this, const WebCore::TextTrackCue *a2)
{
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  _BOOL4 v16;
  double v17;
  __int128 v18;

  if (WebCore::TextTrackCue::isOrderedBefore(this, a2))
    return 1;
  if ((*(unsigned int (**)(const WebCore::TextTrackCue *))(*(_QWORD *)a2 + 128))(a2) != 2)
    return 0;
  v18 = *((_OWORD *)this + 4);
  WTF::MediaTime::toDouble((WTF::MediaTime *)&v18);
  v6 = v5;
  v18 = *((_OWORD *)a2 + 4);
  WTF::MediaTime::toDouble((WTF::MediaTime *)&v18);
  if (v6 != v7)
    return 0;
  v18 = *((_OWORD *)this + 5);
  WTF::MediaTime::toDouble((WTF::MediaTime *)&v18);
  v9 = v8;
  v18 = *((_OWORD *)a2 + 5);
  WTF::MediaTime::toDouble((WTF::MediaTime *)&v18);
  if (v9 != v10)
    return 0;
  WebCore::VTTCue::getPositionCoordinates((uint64_t)this);
  v12 = v11;
  v14 = v13;
  WebCore::VTTCue::getPositionCoordinates((uint64_t)a2);
  v16 = v14 == v15;
  if (v12 >= v17)
    v16 = 0;
  return v14 > v15 || v16;
}

BOOL WebCore::TextTrackCueGeneric::isPositionedAbove(WebCore::TextTrackCueGeneric *this, const WebCore::TextTrackCue *a2)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  _BOOL4 v15;
  double v16;
  double v18;
  double v19;
  double v20;
  __int128 v21;

  if ((*(unsigned int (**)(const WebCore::TextTrackCue *))(*(_QWORD *)a2 + 128))(a2) != 2)
    return WebCore::TextTrackCue::isOrderedBefore(this, a2);
  v21 = *((_OWORD *)this + 4);
  WTF::MediaTime::toDouble((WTF::MediaTime *)&v21);
  v5 = v4;
  v21 = *((_OWORD *)a2 + 4);
  WTF::MediaTime::toDouble((WTF::MediaTime *)&v21);
  if (v5 == v6
    && (v21 = *((_OWORD *)this + 5),
        WTF::MediaTime::toDouble((WTF::MediaTime *)&v21),
        v8 = v7,
        v21 = *((_OWORD *)a2 + 5),
        WTF::MediaTime::toDouble((WTF::MediaTime *)&v21),
        v8 == v9))
  {
    WebCore::VTTCue::getPositionCoordinates((uint64_t)this);
    v11 = v10;
    v13 = v12;
    WebCore::VTTCue::getPositionCoordinates((uint64_t)a2);
    v15 = v13 == v14;
    if (v11 >= v16)
      v15 = 0;
    return v13 > v14 || v15;
  }
  else
  {
    v21 = *((_OWORD *)this + 4);
    WTF::MediaTime::toDouble((WTF::MediaTime *)&v21);
    v19 = v18;
    v21 = *((_OWORD *)a2 + 4);
    WTF::MediaTime::toDouble((WTF::MediaTime *)&v21);
    return v19 > v20;
  }
}

WTF::StringImpl *WebCore::TextTrackCueGeneric::toJSON(WebCore::TextTrackCueGeneric *this, WTF::JSONImpl::Object *a2)
{
  WTF::StringImpl *result;
  const WTF::String *v5;
  WTF::StringImpl *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  _DWORD *v11;
  WTF::StringImpl *v12;
  const WTF::String *v13;
  WTF::StringImpl *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  _DWORD *v19;
  WTF::StringImpl *v20;
  const WTF::String *v21;
  WTF::StringImpl *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  _DWORD *v27;
  WTF::StringImpl *v28;
  WTF::JSONImpl::Value *v29;
  WTF::StringImpl *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  _DWORD *v35;
  WTF::JSONImpl::Value *v36;
  WTF::StringImpl *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  _DWORD *v42;
  uint64_t v43;
  const WTF::String *v44;
  WTF::StringImpl *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  _DWORD *v50;
  _DWORD **v51;
  uint64_t v52;
  _DWORD *v53;
  _DWORD **v54;
  uint64_t v55;
  _DWORD *v56;
  _DWORD **v57;
  uint64_t v58;
  _DWORD *v59;
  _DWORD **v60;
  uint64_t v61;
  _DWORD *v62;
  _DWORD **v63;
  uint64_t v64;
  _DWORD *v65;
  _DWORD **v66;
  uint64_t v67;
  _DWORD *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  _DWORD *v71;
  _QWORD v72[2];
  char v73;

  result = WebCore::VTTCue::toJSON(this, a2);
  if ((*((_BYTE *)this + 446) & 4) != 0)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v70 = (WTF::StringImpl *)v72[0];
    WebCore::serializationForHTML((WebCore::TextTrackCueGeneric *)((char *)this + 440), &v69);
    WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v69, v5);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)a2 + 2, &v70, (const WTF::StringImpl *)&v71, (uint64_t)v72);
    if (v73)
    {
      v7 = (uint64_t *)((char *)a2 + 24);
      v8 = *((unsigned int *)a2 + 9);
      if ((_DWORD)v8 == *((_DWORD *)a2 + 8))
      {
        v57 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v7, v8 + 1, (unint64_t)&v70);
        v8 = *((unsigned int *)a2 + 9);
        v58 = *((_QWORD *)a2 + 3);
        v59 = *v57;
        if (*v57)
          *v59 += 2;
        *(_QWORD *)(v58 + 8 * v8) = v59;
      }
      else
      {
        v9 = *v7;
        v10 = v70;
        if (v70)
          *(_DWORD *)v70 += 2;
        *(_QWORD *)(v9 + 8 * v8) = v10;
      }
      *((_DWORD *)a2 + 9) = v8 + 1;
    }
    v11 = v71;
    v71 = 0;
    if (v11)
    {
      if (*v11 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v11;
    }
    v12 = v69;
    v69 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v6);
      else
        *(_DWORD *)v12 -= 2;
    }
    result = v70;
    v70 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if ((*((_BYTE *)this + 454) & 4) != 0)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v70 = (WTF::StringImpl *)v72[0];
    WebCore::serializationForHTML((WebCore::TextTrackCueGeneric *)((char *)this + 448), &v69);
    WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v69, v13);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)a2 + 2, &v70, (const WTF::StringImpl *)&v71, (uint64_t)v72);
    if (v73)
    {
      v15 = (uint64_t *)((char *)a2 + 24);
      v16 = *((unsigned int *)a2 + 9);
      if ((_DWORD)v16 == *((_DWORD *)a2 + 8))
      {
        v60 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v15, v16 + 1, (unint64_t)&v70);
        v16 = *((unsigned int *)a2 + 9);
        v61 = *((_QWORD *)a2 + 3);
        v62 = *v60;
        if (*v60)
          *v62 += 2;
        *(_QWORD *)(v61 + 8 * v16) = v62;
      }
      else
      {
        v17 = *v15;
        v18 = v70;
        if (v70)
          *(_DWORD *)v70 += 2;
        *(_QWORD *)(v17 + 8 * v16) = v18;
      }
      *((_DWORD *)a2 + 9) = v16 + 1;
    }
    v19 = v71;
    v71 = 0;
    if (v19)
    {
      if (*v19 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v19;
    }
    v20 = v69;
    v69 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v14);
      else
        *(_DWORD *)v20 -= 2;
    }
    result = v70;
    v70 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if ((*((_BYTE *)this + 462) & 4) != 0)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v70 = (WTF::StringImpl *)v72[0];
    WebCore::serializationForHTML((WebCore::TextTrackCueGeneric *)((char *)this + 456), &v69);
    WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v69, v21);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)a2 + 2, &v70, (const WTF::StringImpl *)&v71, (uint64_t)v72);
    if (v73)
    {
      v23 = (uint64_t *)((char *)a2 + 24);
      v24 = *((unsigned int *)a2 + 9);
      if ((_DWORD)v24 == *((_DWORD *)a2 + 8))
      {
        v63 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v23, v24 + 1, (unint64_t)&v70);
        v24 = *((unsigned int *)a2 + 9);
        v64 = *((_QWORD *)a2 + 3);
        v65 = *v63;
        if (*v63)
          *v65 += 2;
        *(_QWORD *)(v64 + 8 * v24) = v65;
      }
      else
      {
        v25 = *v23;
        v26 = v70;
        if (v70)
          *(_DWORD *)v70 += 2;
        *(_QWORD *)(v25 + 8 * v24) = v26;
      }
      *((_DWORD *)a2 + 9) = v24 + 1;
    }
    v27 = v71;
    v71 = 0;
    if (v27)
    {
      if (*v27 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v27;
    }
    v28 = v69;
    v69 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, v22);
      else
        *(_DWORD *)v28 -= 2;
    }
    result = v70;
    v70 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v22);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (*((double *)this + 58) != 0.0)
  {
    v29 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    v70 = (WTF::StringImpl *)v72[0];
    WTF::JSONImpl::Value::create(v29, *((double *)this + 58));
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)a2 + 2, &v70, (const WTF::StringImpl *)&v71, (uint64_t)v72);
    if (v73)
    {
      v31 = (uint64_t *)((char *)a2 + 24);
      v32 = *((unsigned int *)a2 + 9);
      if ((_DWORD)v32 == *((_DWORD *)a2 + 8))
      {
        v51 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v31, v32 + 1, (unint64_t)&v70);
        v32 = *((unsigned int *)a2 + 9);
        v52 = *((_QWORD *)a2 + 3);
        v53 = *v51;
        if (*v51)
          *v53 += 2;
        *(_QWORD *)(v52 + 8 * v32) = v53;
      }
      else
      {
        v33 = *v31;
        v34 = v70;
        if (v70)
          *(_DWORD *)v70 += 2;
        *(_QWORD *)(v33 + 8 * v32) = v34;
      }
      *((_DWORD *)a2 + 9) = v32 + 1;
    }
    v35 = v71;
    v71 = 0;
    if (v35)
    {
      if (*v35 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v35;
    }
    result = v70;
    v70 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v30);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (*((double *)this + 59) != 0.0)
  {
    v36 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    v70 = (WTF::StringImpl *)v72[0];
    WTF::JSONImpl::Value::create(v36, *((double *)this + 59));
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)a2 + 2, &v70, (const WTF::StringImpl *)&v71, (uint64_t)v72);
    if (v73)
    {
      v38 = (uint64_t *)((char *)a2 + 24);
      v39 = *((unsigned int *)a2 + 9);
      if ((_DWORD)v39 == *((_DWORD *)a2 + 8))
      {
        v54 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v38, v39 + 1, (unint64_t)&v70);
        v39 = *((unsigned int *)a2 + 9);
        v55 = *((_QWORD *)a2 + 3);
        v56 = *v54;
        if (*v54)
          *v56 += 2;
        *(_QWORD *)(v55 + 8 * v39) = v56;
      }
      else
      {
        v40 = *v38;
        v41 = v70;
        if (v70)
          *(_DWORD *)v70 += 2;
        *(_QWORD *)(v40 + 8 * v39) = v41;
      }
      *((_DWORD *)a2 + 9) = v39 + 1;
    }
    v42 = v71;
    v71 = 0;
    if (v42)
    {
      if (*v42 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v42;
    }
    result = v70;
    v70 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v37);
      else
        *(_DWORD *)result -= 2;
    }
  }
  v43 = *((_QWORD *)this + 60);
  if (v43 && *(_DWORD *)(v43 + 4))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::Value::create((WebCore::TextTrackCueGeneric *)((char *)this + 480), v44);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)a2 + 2, &v70, (const WTF::StringImpl *)&v71, (uint64_t)v72);
    if (v73)
    {
      v46 = (uint64_t *)((char *)a2 + 24);
      v47 = *((unsigned int *)a2 + 9);
      if ((_DWORD)v47 == *((_DWORD *)a2 + 8))
      {
        v66 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v46, v47 + 1, (unint64_t)&v70);
        v47 = *((unsigned int *)a2 + 9);
        v67 = *((_QWORD *)a2 + 3);
        v68 = *v66;
        if (*v66)
          *v68 += 2;
        *(_QWORD *)(v67 + 8 * v47) = v68;
      }
      else
      {
        v48 = *v46;
        v49 = v70;
        if (v70)
          *(_DWORD *)v70 += 2;
        *(_QWORD *)(v48 + 8 * v47) = v49;
      }
      *((_DWORD *)a2 + 9) = v47 + 1;
    }
    v50 = v71;
    v71 = 0;
    if (v50)
    {
      if (*v50 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v50;
    }
    result = v70;
    v70 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v45);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WebCore::TextTrackList *WebCore::TextTrackList::TextTrackList(WebCore::TextTrackList *this, WebCore::ScriptExecutionContext *a2)
{
  WebCore::ScriptExecutionContext *v2;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;
  char *v10;

  v2 = a2;
  *((_DWORD *)this + 6) = 1;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = &unk_1E33A4FC0;
  v4 = (char *)this + 32;
  if (a2 && !*((_BYTE *)a2 + 274))
  {
    v5 = (char *)a2 - 192;
    v6 = *((_QWORD *)a2 + 64);
    if (v6)
    {
      v7 = *(char **)(v6 + 8);
      if (v7)
        v5 = v7;
    }
    v2 = (WebCore::ScriptExecutionContext *)(v5 + 192);
  }
  *((_QWORD *)this + 4) = &off_1E33A18C0;
  *((_QWORD *)this + 5) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::TextTrackList *)((char *)this + 32), v2);
  *((_QWORD *)this + 4) = &off_1E33A0540;
  *((_QWORD *)this + 6) = 0;
  if (v2)
  {
    if (*((_BYTE *)v2 + 278))
    {
      __break(0xC471u);
      JUMPOUT(0x195D8FAF0);
    }
    v10 = v4;
    WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)v2 + 16, (uint64_t *)&v10, (uint64_t)&v9);
  }
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_DWORD *)this + 18) = 1;
  *((_QWORD *)this + 10) = 0;
  *((_BYTE *)this + 88) = 0;
  *(_QWORD *)this = off_1E33EC1A8;
  *((_QWORD *)this + 4) = &unk_1E33EC260;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_QWORD *)this + 16) = 0;
  *((_DWORD *)this + 34) = 10000000;
  *((_BYTE *)this + 140) = 1;
  return this;
}

void WebCore::TextTrackList::~TextTrackList(WebCore::TextTrackList *this, void *a2)
{
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;
  uint64_t v8;
  _DWORD **v9;
  uint64_t v10;
  _DWORD *v11;
  WTF *v12;

  v3 = *((unsigned int *)this + 31);
  if ((_DWORD)v3)
  {
    v4 = (_DWORD **)*((_QWORD *)this + 14);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (v6[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
        else
          --v6[4];
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 14);
  if (v7)
  {
    *((_QWORD *)this + 14) = 0;
    *((_DWORD *)this + 30) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = *((unsigned int *)this + 27);
  if ((_DWORD)v8)
  {
    v9 = (_DWORD **)*((_QWORD *)this + 12);
    v10 = 8 * v8;
    do
    {
      v11 = *v9;
      *v9 = 0;
      if (v11)
      {
        if (v11[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 16))(v11);
        else
          --v11[4];
      }
      ++v9;
      v10 -= 8;
    }
    while (v10);
  }
  v12 = (WTF *)*((_QWORD *)this + 12);
  if (v12)
  {
    *((_QWORD *)this + 12) = 0;
    *((_DWORD *)this + 26) = 0;
    WTF::fastFree(v12, a2);
  }
  WebCore::TrackListBase::~TrackListBase(this, a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::TextTrackList::~TextTrackList(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void WebCore::TrackListBase::~TrackListBase(WebCore::TrackListBase *this, void *a2)
{
  WebCore::ActiveDOMObject *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  _DWORD **v8;
  uint64_t v9;
  _DWORD *v10;
  WTF *v11;
  void *v12;

  *(_QWORD *)this = &unk_1E33EBB80;
  *((_QWORD *)this + 4) = &unk_1E33EBC38;
  v3 = (WebCore::TrackListBase *)((char *)this + 32);
  v4 = (unsigned int *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  v7 = *((unsigned int *)this + 17);
  if ((_DWORD)v7)
  {
    v8 = (_DWORD **)*((_QWORD *)this + 7);
    v9 = 8 * v7;
    do
    {
      v10 = *v8;
      *v8 = 0;
      if (v10)
      {
        if (v10[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 16))(v10);
        else
          --v10[4];
      }
      ++v8;
      v9 -= 8;
    }
    while (v9);
  }
  v11 = (WTF *)*((_QWORD *)this + 7);
  if (v11)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v11, a2);
  }
  WebCore::ActiveDOMObject::~ActiveDOMObject(v3, a2);
  WebCore::EventTarget::~EventTarget(this, v12);
}

void `non-virtual thunk to'WebCore::TextTrackList::~TextTrackList(WebCore::TextTrackList *this, void *a2)
{
  WebCore::TextTrackList::~TextTrackList((WebCore::TextTrackList *)((char *)this - 32), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::TextTrackList::~TextTrackList((WebCore::TextTrackList *)((char *)this - 32), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t WebCore::TextTrackList::length(WebCore::TextTrackList *this)
{
  return (*((_DWORD *)this + 31) + *((_DWORD *)this + 27) + *((_DWORD *)this + 17));
}

_DWORD *WebCore::TextTrackList::getTrackById(WebCore::TextTrackList *this, WTF::StringImpl **a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  _DWORD *v5;
  unint64_t v9;
  unsigned int v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;

  v2 = *((_DWORD *)this + 27);
  v3 = *((_DWORD *)this + 31);
  v4 = *((_DWORD *)this + 17);
  if (!(v3 + v2 + v4))
    return 0;
  v9 = 0;
  while (1)
  {
    if (v9 >= v3)
    {
      if (v2 <= v9 - v3)
      {
        v10 = v9 - (v3 + v2);
        if (v4 <= v10)
        {
          v5 = 0;
        }
        else
        {
          v5 = *(_DWORD **)(*((_QWORD *)this + 7) + 8 * v10);
          if (v5 && v5[10] != 1)
          {
LABEL_8:
            __break(0xC471u);
            JUMPOUT(0x195D8FE74);
          }
        }
      }
      else
      {
        v5 = *(_DWORD **)(*((_QWORD *)this + 12) + 8 * (v9 - v3));
        if (v5 && v5[10] != 1)
        {
          __break(0xC471u);
          JUMPOUT(0x195D8FE94);
        }
      }
    }
    else
    {
      v5 = *(_DWORD **)(*((_QWORD *)this + 14) + 8 * v9);
      if (v5 && v5[10] != 1)
        goto LABEL_8;
    }
    (*(void (**)(WTF::StringImpl **__return_ptr, _DWORD *))(*(_QWORD *)v5 + 32))(&v14, v5);
    v12 = v14;
    v13 = *a2;
    v14 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    if (v12 == v13)
      return v5;
    ++v9;
    v2 = *((_DWORD *)this + 27);
    v3 = *((_DWORD *)this + 31);
    v4 = *((_DWORD *)this + 17);
    if (v9 >= v3 + v2 + v4)
      return 0;
  }
}

uint64_t WebCore::TextTrackList::getTrackById(WebCore::TextTrackList *this, uint64_t a2)
{
  unsigned int v2;
  unint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;

  v2 = *((_DWORD *)this + 27);
  v3 = *((unsigned int *)this + 31);
  v4 = *((_DWORD *)this + 17);
  if ((_DWORD)v3 + v2 + v4)
  {
    v5 = 0;
    v6 = -(int)v3 - v2;
    do
    {
      if (v5 >= v3)
      {
        if (v2 <= (int)v5 - (int)v3)
        {
          if (v4 <= v6 + v5)
          {
            v7 = 0;
          }
          else
          {
            v7 = *(_QWORD *)(*((_QWORD *)this + 7) + 8 * (v6 + v5));
            if (v7 && *(_DWORD *)(v7 + 40) != 1)
            {
LABEL_6:
              __break(0xC471u);
              JUMPOUT(0x195D8FF94);
            }
          }
        }
        else
        {
          v7 = *(_QWORD *)(*((_QWORD *)this + 12) + 8 * (v5 - v3));
          if (v7 && *(_DWORD *)(v7 + 40) != 1)
          {
            __break(0xC471u);
            JUMPOUT(0x195D8FFB4);
          }
        }
      }
      else
      {
        v7 = *(_QWORD *)(*((_QWORD *)this + 14) + 8 * v5);
        if (v7 && *(_DWORD *)(v7 + 40) != 1)
          goto LABEL_6;
      }
      if (*(_QWORD *)(v7 + 56) == a2)
        return v7;
      ++v5;
    }
    while ((_DWORD)v3 + v2 + v4 != v5);
  }
  return 0;
}

uint64_t WebCore::TextTrackList::invalidateTrackIndexesAfterTrack(uint64_t this, WebCore::TextTrack *a2)
{
  int v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;

  v2 = *((_DWORD *)a2 + 58);
  if (v2 == 2)
  {
    v7 = (uint64_t *)(this + 56);
  }
  else if (v2 == 1)
  {
    v7 = (uint64_t *)(this + 96);
    v12 = *(unsigned int *)(this + 68);
    if ((_DWORD)v12)
    {
      v13 = *(uint64_t **)(this + 56);
      v14 = 8 * v12;
      do
      {
        v15 = *v13;
        if (*v13 && *(_DWORD *)(v15 + 40) != 1)
        {
          __break(0xC471u);
          JUMPOUT(0x195D9017CLL);
        }
        if (*(_BYTE *)(v15 + 244))
          *(_BYTE *)(v15 + 244) = 0;
        if (*(_BYTE *)(v15 + 252))
          *(_BYTE *)(v15 + 252) = 0;
        ++v13;
        v14 -= 8;
      }
      while (v14);
    }
  }
  else if (v2)
  {
    v7 = 0;
  }
  else
  {
    v3 = *(unsigned int *)(this + 108);
    if ((_DWORD)v3)
    {
      v4 = *(uint64_t **)(this + 96);
      v5 = 8 * v3;
      while (1)
      {
        v6 = *v4;
        if (*v4)
        {
          if (*(_DWORD *)(v6 + 40) != 1)
            break;
        }
        if (*(_BYTE *)(v6 + 244))
          *(_BYTE *)(v6 + 244) = 0;
        if (*(_BYTE *)(v6 + 252))
          *(_BYTE *)(v6 + 252) = 0;
        ++v4;
        v5 -= 8;
        if (!v5)
          goto LABEL_13;
      }
LABEL_49:
      __break(0xC471u);
      JUMPOUT(0x195D9015CLL);
    }
LABEL_13:
    v7 = (uint64_t *)(this + 112);
    v8 = *(unsigned int *)(this + 68);
    if ((_DWORD)v8)
    {
      v9 = *(uint64_t **)(this + 56);
      v10 = 8 * v8;
      do
      {
        v11 = *v9;
        if (*v9 && *(_DWORD *)(v11 + 40) != 1)
        {
          __break(0xC471u);
          JUMPOUT(0x195D9019CLL);
        }
        if (*(_BYTE *)(v11 + 244))
          *(_BYTE *)(v11 + 244) = 0;
        if (*(_BYTE *)(v11 + 252))
          *(_BYTE *)(v11 + 252) = 0;
        ++v9;
        v10 -= 8;
      }
      while (v10);
    }
  }
  v16 = *((unsigned int *)v7 + 3);
  if ((_DWORD)v16)
  {
    v17 = 0;
    v18 = *v7;
    while (*(WebCore::TextTrack **)(v18 + 8 * v17) != a2)
    {
      if (v16 == ++v17)
        return this;
    }
    if (v17 < v16)
    {
      if (*((_DWORD *)a2 + 10) != 1)
        goto LABEL_49;
      v19 = *((unsigned __int8 *)a2 + 252);
      if (*((_BYTE *)a2 + 244))
        *((_BYTE *)a2 + 244) = 0;
      if (v19)
        *((_BYTE *)a2 + 252) = 0;
    }
  }
  return this;
}

WebCore::LoadableTextTrack *WebCore::TextTrackList::append(WebCore::TextTrackList *this, WebCore::LoadableTextTrack **a2)
{
  WebCore::LoadableTextTrack *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  WebCore::LoadableTextTrack *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  WebCore::LoadableTextTrack **v25;
  uint64_t v26;
  WebCore::LoadableTextTrack *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  void *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  WebCore::LoadableTextTrack **v36;
  uint64_t v37;
  unsigned int *v38;
  WebCore::LoadableTextTrack *v39;
  uint64_t v40;
  void *v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  WebCore::LoadableTextTrack *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WebCore::LoadableTextTrack *result;
  uint64_t v51;
  WTF *v52;
  WebCore::LoadableTextTrack *v53;

  v4 = *a2;
  v5 = *((_DWORD *)*a2 + 58);
  if (v5)
  {
    if (v5 != 2)
    {
      if (v5 == 1)
      {
        v6 = *((unsigned int *)this + 27);
        if ((_DWORD)v6 == *((_DWORD *)this + 26))
        {
          v7 = v6 + (v6 >> 2);
          if (v7 >= 0x10)
            v8 = v7 + 1;
          else
            v8 = 16;
          if (v8 <= v6 + 1)
            v9 = v6 + 1;
          else
            v9 = v8;
          if (v9 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x195D905C4);
          }
          v10 = (void *)*((_QWORD *)this + 12);
          v11 = (void *)WTF::fastMalloc((WTF *)(8 * v9));
          *((_DWORD *)this + 26) = v9;
          *((_QWORD *)this + 12) = v11;
          memcpy(v11, v10, 8 * v6);
          if (v10)
          {
            if (*((void **)this + 12) == v10)
            {
              *((_QWORD *)this + 12) = 0;
              *((_DWORD *)this + 26) = 0;
            }
            WTF::fastFree((WTF *)v10, v12);
          }
          v13 = *((unsigned int *)this + 27);
          v14 = *((_QWORD *)this + 12);
          ++*((_DWORD *)v4 + 4);
          *(_QWORD *)(v14 + 8 * v13) = v4;
          *((_DWORD *)this + 27) = v13 + 1;
        }
        else
        {
          v37 = *((_QWORD *)this + 12);
          ++*((_DWORD *)v4 + 4);
          *(_QWORD *)(v37 + 8 * v6) = v4;
          *((_DWORD *)this + 27) = v6 + 1;
        }
      }
      goto LABEL_49;
    }
    if (((*(uint64_t (**)(WebCore::LoadableTextTrack *))(*(_QWORD *)v4 + 184))(*a2) & 1) != 0)
    {
      v15 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v4 + 35) + 72))(*((_QWORD *)v4 + 35));
      v16 = *a2;
      v17 = *((unsigned int *)this + 17);
      if ((_DWORD)v17 == *((_DWORD *)this + 16))
      {
        v18 = v17 + (v17 >> 2);
        if (v18 >= 0x10)
          v19 = v18 + 1;
        else
          v19 = 16;
        if (v19 <= v17 + 1)
          v20 = v17 + 1;
        else
          v20 = v19;
        if (v20 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x195D905CCLL);
        }
        v21 = (void *)*((_QWORD *)this + 7);
        v22 = (void *)WTF::fastMalloc((WTF *)(8 * v20));
        *((_DWORD *)this + 16) = v20;
        *((_QWORD *)this + 7) = v22;
        memcpy(v22, v21, 8 * v17);
        if (v21)
        {
          if (*((void **)this + 7) == v21)
          {
            *((_QWORD *)this + 7) = 0;
            *((_DWORD *)this + 16) = 0;
          }
          WTF::fastFree((WTF *)v21, v23);
        }
      }
      v24 = *((_QWORD *)this + 7);
      v25 = (WebCore::LoadableTextTrack **)(v24 + 8 * v15);
      memmove(v25 + 1, v25, v24 + 8 * *((unsigned int *)this + 17) - (_QWORD)v25);
      if (v16)
        ++*((_DWORD *)v16 + 4);
      *v25 = v16;
      ++*((_DWORD *)this + 17);
      goto LABEL_49;
    }
LABEL_74:
    __break(0xC471u);
    JUMPOUT(0x195D9059CLL);
  }
  v26 = WebCore::LoadableTextTrack::trackElementIndex(*a2, a2);
  v27 = *a2;
  v28 = *((unsigned int *)this + 31);
  if ((_DWORD)v28 == *((_DWORD *)this + 30))
  {
    v29 = v28 + (v28 >> 2);
    if (v29 >= 0x10)
      v30 = v29 + 1;
    else
      v30 = 16;
    if (v30 <= v28 + 1)
      v31 = v28 + 1;
    else
      v31 = v30;
    if (v31 >> 29)
      goto LABEL_74;
    v32 = (void *)*((_QWORD *)this + 14);
    v33 = (void *)WTF::fastMalloc((WTF *)(8 * v31));
    *((_DWORD *)this + 30) = v31;
    *((_QWORD *)this + 14) = v33;
    memcpy(v33, v32, 8 * v28);
    if (v32)
    {
      if (*((void **)this + 14) == v32)
      {
        *((_QWORD *)this + 14) = 0;
        *((_DWORD *)this + 30) = 0;
      }
      WTF::fastFree((WTF *)v32, v34);
    }
  }
  v35 = *((_QWORD *)this + 14);
  v36 = (WebCore::LoadableTextTrack **)(v35 + 8 * v26);
  memmove(v36 + 1, v36, v35 + 8 * *((unsigned int *)this + 31) - (_QWORD)v36);
  if (v27)
    ++*((_DWORD *)v27 + 4);
  *v36 = v27;
  ++*((_DWORD *)this + 31);
LABEL_49:
  v38 = (unsigned int *)WebCore::TextTrackList::invalidateTrackIndexesAfterTrack((uint64_t)this, *a2);
  v39 = *a2;
  v40 = *((_QWORD *)*a2 + 13);
  if (!v40 || !*(_QWORD *)(v40 + 8))
  {
    v38 = (unsigned int *)WTF::WeakPtr<WebCore::Clipboard,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::Clipboard>((uint64_t)this);
    if (v38)
    {
      do
        v42 = __ldaxr(v38);
      while (__stlxr(v42 + 1, v38));
    }
    v43 = *((_QWORD *)v39 + 13);
    *((_QWORD *)v39 + 13) = v38;
    if (v43)
    {
      do
      {
        v44 = __ldaxr((unsigned int *)v43);
        v45 = v44 - 1;
      }
      while (__stlxr(v45, (unsigned int *)v43));
      if (!v45)
      {
        atomic_store(1u, (unsigned int *)v43);
        v51 = *(unsigned int *)(v43 + 28);
        if ((_DWORD)v51)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v43 + 16), (WTF::StringImpl *)(*(_QWORD *)(v43 + 16) + 32 * v51));
        v52 = *(WTF **)(v43 + 16);
        if (v52)
        {
          *(_QWORD *)(v43 + 16) = 0;
          *(_DWORD *)(v43 + 24) = 0;
          WTF::fastFree(v52, v41);
        }
        v38 = (unsigned int *)WTF::fastFree((WTF *)v43, v41);
      }
    }
  }
  v46 = *a2;
  *a2 = 0;
  v53 = v46;
  v47 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v47 || (v48 = *(_QWORD *)(v47 + 96)) == 0)
    v48 = WebCore::threadGlobalDataSlow((WebCore *)v38);
  v49 = *(_QWORD *)(v48 + 40);
  if (!v49)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v48);
    v49 = *(_QWORD *)(v48 + 40);
  }
  WebCore::TrackListBase::scheduleTrackEvent((uint64_t)this, (_QWORD *)(v49 + 104), (uint64_t *)&v53);
  result = v53;
  if (v53)
  {
    if (*((_DWORD *)v53 + 4) == 1)
      return (WebCore::LoadableTextTrack *)(*(uint64_t (**)(void))(*(_QWORD *)v53 + 16))();
    else
      --*((_DWORD *)v53 + 4);
  }
  return result;
}

WebCore *WebCore::TextTrackList::remove(WebCore *this, WebCore::TrackBase *a2, int a3)
{
  WebCore *v4;
  int v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;

  if (*((_DWORD *)a2 + 10) != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x195D907ECLL);
  }
  v4 = this;
  v5 = *((_DWORD *)a2 + 58);
  v6 = (char *)this + 96;
  v7 = (char *)this + 112;
  if (v5)
    v7 = 0;
  if (v5 != 1)
    v6 = v7;
  if (v5 == 2)
    v8 = (char *)this + 56;
  else
    v8 = v6;
  v9 = *((unsigned int *)v8 + 3);
  if ((_DWORD)v9)
  {
    v11 = 0;
    v12 = -v9;
    for (i = 8; *(WebCore::TrackBase **)(*(_QWORD *)v8 + i - 8) != a2; i += 8)
    {
      if (v12 == --v11)
        return this;
    }
    WebCore::TextTrackList::invalidateTrackIndexesAfterTrack((uint64_t)this, a2);
    v15 = *((_QWORD *)a2 + 13);
    v16 = -v11;
    if (v15)
    {
      if (*(WebCore **)(v15 + 8) == v4)
      {
        *((_QWORD *)a2 + 13) = 0;
        do
        {
          v17 = __ldaxr((unsigned int *)v15);
          v18 = v17 - 1;
        }
        while (__stlxr(v18, (unsigned int *)v15));
        if (!v18)
        {
          atomic_store(1u, (unsigned int *)v15);
          v19 = v15;
          v20 = *(unsigned int *)(v15 + 28);
          if ((_DWORD)v20)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v19 + 16), (WTF::StringImpl *)(*(_QWORD *)(v19 + 16) + 32 * v20));
          v21 = *(WTF **)(v19 + 16);
          if (v21)
          {
            *(_QWORD *)(v19 + 16) = 0;
            *(_DWORD *)(v19 + 24) = 0;
            WTF::fastFree(v21, v14);
          }
          WTF::fastFree((WTF *)v19, v14);
        }
      }
    }
    else if (!v4)
    {
      *((_QWORD *)a2 + 13) = 0;
    }
    v22 = *((unsigned int *)v8 + 3);
    if (v16 >= v22)
    {
      __break(0xC471u);
      JUMPOUT(0x195D90814);
    }
    v23 = *(_QWORD *)v8;
    v24 = *(_QWORD *)v8 + i;
    v27 = *(_QWORD *)(v24 - 8);
    v26 = (_QWORD *)(v24 - 8);
    v25 = (_DWORD *)v27;
    v28 = *(_DWORD *)(v27 + 16);
    *(_DWORD *)(v27 + 16) = v28 + 1;
    v32 = (_DWORD *)v27;
    *v26 = 0;
    if (v28)
    {
      v25[4] = v28;
    }
    else
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v25 + 16))(v25);
      v22 = *((unsigned int *)v8 + 3);
    }
    this = (WebCore *)memmove(v26, (const void *)(v23 + i), *(_QWORD *)v8 + 8 * v22 - v23 - i);
    --*((_DWORD *)v8 + 3);
    if (!a3)
      goto LABEL_36;
    v29 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v29 || (v30 = *(_QWORD *)(v29 + 96)) == 0)
      v30 = WebCore::threadGlobalDataSlow(this);
    v31 = *(_QWORD *)(v30 + 40);
    if (!v31)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v30);
      v31 = *(_QWORD *)(v30 + 40);
    }
    this = (WebCore *)WebCore::TrackListBase::scheduleTrackEvent((uint64_t)v4, (_QWORD *)(v31 + 1680), (uint64_t *)&v32);
    v25 = v32;
    if (v32)
    {
LABEL_36:
      if (v25[4] == 1)
        return (WebCore *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v25 + 16))(v25);
      else
        --v25[4];
    }
  }
  return this;
}

uint64_t WebCore::TextTrackList::contains(WebCore::TextTrackList *this, WebCore::TrackBase *a2)
{
  int v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  WebCore::TrackBase **v7;
  uint64_t v8;
  WebCore::TrackBase *v9;
  uint64_t result;

  if (*((_DWORD *)a2 + 10) == 1)
  {
    v2 = *((_DWORD *)a2 + 58);
    v3 = (char *)this + 96;
    v4 = (char *)this + 112;
    if (v2)
      v4 = 0;
    if (v2 != 1)
      v3 = v4;
    if (v2 == 2)
      v5 = (char *)this + 56;
    else
      v5 = v3;
    v6 = *((unsigned int *)v5 + 3);
    if ((_DWORD)v6)
    {
      v7 = *(WebCore::TrackBase ***)v5;
      v8 = v6 - 1;
      do
      {
        v9 = *v7++;
        result = v9 == a2;
      }
      while (v9 != a2 && v8-- != 0);
    }
    else
    {
      return 0;
    }
  }
  else
  {
    result = 96;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::TextTrackList::eventTargetInterface(WebCore::TextTrackList *this)
{
  return 27;
}

BOOL WebCore::isValidBCP47LanguageTag(_BOOL8 this, const WTF::String *a2)
{
  unint64_t v2;
  int v3;
  unsigned __int8 *v4;
  int v5;
  int v6;
  int v7;
  unint64_t v8;
  int v9;
  int v13;
  int v14;
  int v15;
  int v16;

  if (!this)
    return this;
  v2 = *(unsigned int *)(this + 4);
  if ((v2 - 101) < 0xFFFFFF9D)
    return 0;
  v3 = *(_DWORD *)(this + 16);
  v4 = *(unsigned __int8 **)(this + 8);
  if ((v3 & 4) != 0)
  {
    v5 = *v4;
    if ((v5 | 0x20u) - 97 > 0x19)
      return 0;
    v6 = v4[1];
  }
  else
  {
    v5 = *(unsigned __int16 *)v4;
    if ((v5 | 0x20u) - 97 >= 0x1A)
      return 0;
    v6 = *((unsigned __int16 *)v4 + 1);
  }
  if ((_DWORD)v2 == 2)
  {
    v7 = v6 | 0x20;
    return (v7 - 97) < 0x1A;
  }
  if ((v5 == 120 || v5 == 105) && v6 == 45)
  {
    LODWORD(v8) = 2;
    goto LABEL_13;
  }
  if ((v6 | 0x20u) - 97 > 0x19)
    return 0;
  if ((_DWORD)v2 == 3)
  {
    if ((v3 & 4) != 0)
      v13 = v4[2];
    else
      v13 = *((unsigned __int16 *)v4 + 2);
    v7 = v13 | 0x20;
    return (v7 - 97) < 0x1A;
  }
  if ((v3 & 4) != 0)
  {
    v14 = v4[2];
    if ((v14 | 0x20u) - 97 <= 0x19)
    {
      v15 = v4[3];
      goto LABEL_44;
    }
  }
  else
  {
    v14 = *((unsigned __int16 *)v4 + 2);
    if ((v14 | 0x20u) - 97 < 0x1A)
    {
      v15 = *((unsigned __int16 *)v4 + 3);
LABEL_44:
      if (v15 == 45)
      {
        LODWORD(v8) = 4;
        goto LABEL_13;
      }
      return 0;
    }
  }
  if (v14 != 45)
    return 0;
  LODWORD(v8) = 3;
LABEL_13:
  if (v8 >= v2)
    return 1;
  v8 = v8;
  if ((v3 & 4) != 0)
  {
    do
    {
      if (v8 >= v2)
        v9 = 0;
      else
        v9 = v4[v8];
      this = (v9 - 48) < 0xA || (v9 | 0x20u) - 97 < 0x1A || v9 == 45;
    }
    while ((_DWORD)this == 1 && v2 - 1 != v8++);
  }
  else
  {
    do
    {
      if (v8 >= v2)
        v16 = 0;
      else
        v16 = *(unsigned __int16 *)&v4[2 * v8];
      this = (v16 - 48) < 0xA || (v16 | 0x20u) - 97 < 0x1A || v16 == 45;
    }
    while ((_DWORD)this == 1 && v2 - 1 != v8++);
  }
  return this;
}

unsigned int *WebCore::TrackBase::setLogger(WebCore::TrackBase *this, const WTF::Logger *a2, unint64_t a3)
{
  unsigned int *v5;
  unsigned int v6;
  unsigned int *result;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v5 = (unsigned int *)((char *)a2 + 8);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  result = (unsigned int *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = a2;
  if (result)
  {
    v8 = result + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, result + 2);
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  *((_QWORD *)this + 12) = a3 & 0xFFFFFFFFFFFF0000 | *((unsigned __int16 *)this + 22);
  return result;
}

char *`non-virtual thunk to'WebCore::TrackBase::logChannel(WebCore::TrackBase *this)
{
  return &WebCore::LogMedia;
}

WTF::StringImpl *WebCore::MediaTrackBase::setKind(WTF::StringImpl **this, WTF::StringImpl **a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;

  if ((*((unsigned int (**)(WTF::StringImpl **))*this + 15))(this))
  {
    v5 = *a2;
    if (!*a2)
      goto LABEL_4;
    goto LABEL_3;
  }
  v5 = (WTF::StringImpl *)*MEMORY[0x1E0CBF3B8];
  if (*MEMORY[0x1E0CBF3B8])
LABEL_3:
    *(_DWORD *)v5 += 2;
LABEL_4:
  result = this[15];
  this[15] = v5;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::TrackEvent::~TrackEvent(WebCore::TrackEvent *this, void *a2)
{
  uint64_t v3;
  char v4;

  if (*((_BYTE *)this + 88))
  {
    v3 = *((unsigned int *)this + 20);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, char *))off_1E33EBC90[v3])(&v4, (char *)this + 72);
    *((_DWORD *)this + 20) = -1;
  }
  WebCore::Event::~Event(this, a2);
}

{
  uint64_t v3;
  bmalloc::api *v4;
  void *v5;
  char v6;

  if (*((_BYTE *)this + 88))
  {
    v3 = *((unsigned int *)this + 20);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, char *))off_1E33EBC90[v3])(&v6, (char *)this + 72);
    *((_DWORD *)this + 20) = -1;
  }
  WebCore::Event::~Event(this, a2);
  bmalloc::api::isoDeallocate(v4, v5);
}

uint64_t WebCore::TrackListBase::length(WebCore::TrackListBase *this)
{
  return *((unsigned int *)this + 17);
}

uint64_t WebCore::TrackListBase::find@<X0>(uint64_t this@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v3 = *(unsigned int *)(this + 68);
  if (!(_DWORD)v3)
  {
LABEL_5:
    v5 = 0;
LABEL_8:
    *a3 = v5;
    return this;
  }
  v4 = 0;
  while (1)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(this + 56) + 8 * v4);
    if (*(_QWORD *)(v5 + 56) == a2)
      break;
    if (v3 == ++v4)
      goto LABEL_5;
  }
  if (v4 < v3)
  {
    ++*(_DWORD *)(v5 + 16);
    goto LABEL_8;
  }
  __break(0xC471u);
  return this;
}

_DWORD *WebCore::TrackListBase::remove(WebCore::TrackListBase *this, unint64_t a2, uint64_t a3)
{
  _DWORD *result;
  _DWORD *v6;

  result = (*(_QWORD *(**)(_DWORD **__return_ptr))(*(_QWORD *)this + 144))(&v6);
  if (v6)
  {
    (*(void (**)(WebCore::TrackListBase *, _DWORD *, uint64_t))(*(_QWORD *)this + 128))(this, v6, a3);
    result = v6;
    v6 = 0;
    if (result)
    {
      if (result[4] == 1)
        return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
      else
        --result[4];
    }
  }
  return result;
}

WebCore *WebCore::TrackListBase::remove(WebCore *this, WebCore::TrackBase *a2, int a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  WTF *v14;
  unint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;

  v3 = *((unsigned int *)this + 17);
  if ((_DWORD)v3)
  {
    v5 = (uint64_t)this;
    v6 = 0;
    v7 = -v3;
    for (i = 8; *(WebCore::TrackBase **)(*((_QWORD *)this + 7) + i - 8) != a2; i += 8)
    {
      if (v7 == --v6)
        return this;
    }
    v9 = *((_QWORD *)a2 + 13);
    v10 = -v6;
    if (v9)
    {
      if (*(WebCore **)(v9 + 8) == this)
      {
        *((_QWORD *)a2 + 13) = 0;
        do
        {
          v11 = __ldaxr((unsigned int *)v9);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, (unsigned int *)v9));
        if (!v12)
        {
          atomic_store(1u, (unsigned int *)v9);
          v13 = *(unsigned int *)(v9 + 28);
          if ((_DWORD)v13)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v9 + 16), (WTF::StringImpl *)(*(_QWORD *)(v9 + 16) + 32 * v13));
          v14 = *(WTF **)(v9 + 16);
          if (v14)
          {
            *(_QWORD *)(v9 + 16) = 0;
            *(_DWORD *)(v9 + 24) = 0;
            WTF::fastFree(v14, a2);
          }
          WTF::fastFree((WTF *)v9, a2);
        }
      }
    }
    else if (!this)
    {
      *((_QWORD *)a2 + 13) = 0;
    }
    v15 = *(unsigned int *)(v5 + 68);
    if (v10 >= v15)
    {
      __break(0xC471u);
      JUMPOUT(0x195D90F28);
    }
    v16 = *(_QWORD *)(v5 + 56);
    v17 = *(_DWORD **)(v16 + i - 8);
    v18 = v17[4];
    v17[4] = v18 + 1;
    v22 = v17;
    *(_QWORD *)(v16 + i - 8) = 0;
    if (v18)
    {
      v17[4] = v18;
    }
    else
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 16))(v17);
      v15 = *(unsigned int *)(v5 + 68);
    }
    this = (WebCore *)memmove((void *)(v16 + i - 8), (const void *)(v16 + i), *(_QWORD *)(v5 + 56) + 8 * v15 - v16 - i);
    --*(_DWORD *)(v5 + 68);
    if (!a3)
      goto LABEL_28;
    v19 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v19 || (v20 = *(_QWORD *)(v19 + 96)) == 0)
      v20 = WebCore::threadGlobalDataSlow(this);
    v21 = *(_QWORD *)(v20 + 40);
    if (!v21)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v20);
      v21 = *(_QWORD *)(v20 + 40);
    }
    this = (WebCore *)WebCore::TrackListBase::scheduleTrackEvent(v5, (_QWORD *)(v21 + 1680), (uint64_t *)&v22);
    v17 = v22;
    if (v22)
    {
LABEL_28:
      if (v17[4] == 1)
        return (WebCore *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v17 + 16))(v17);
      else
        --v17[4];
    }
  }
  return this;
}

BOOL WebCore::TrackListBase::contains(WebCore::TrackListBase *this, WebCore::TrackBase *a2)
{
  uint64_t v2;
  WebCore::TrackBase **v3;
  uint64_t v4;
  WebCore::TrackBase *v5;
  _BOOL8 result;

  v2 = *((unsigned int *)this + 17);
  if (!(_DWORD)v2)
    return 0;
  v3 = (WebCore::TrackBase **)*((_QWORD *)this + 7);
  v4 = v2 - 1;
  do
  {
    v5 = *v3++;
    result = v5 == a2;
  }
  while (v5 != a2 && v4-- != 0);
  return result;
}

BOOL WebCore::TrackListBase::contains(WebCore::TrackListBase *this)
{
  _DWORD *v1;
  int v2;
  uint64_t (*v3)();
  _DWORD *v5;

  (*(void (**)(_DWORD **__return_ptr))(*(_QWORD *)this + 144))(&v5);
  v1 = v5;
  v5 = 0;
  if (v1)
  {
    v2 = v1[4];
    if (v2 == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 16))(v1);
    else
      v1[4] = v2 - 1;
    v3 = WTF::RefPtr<WebCore::TrackBase,WTF::RawPtrTraits<WebCore::TrackBase>,WTF::DefaultRefDerefTraits<WebCore::TrackBase>>::unspecifiedBoolTypeInstance;
  }
  else
  {
    v3 = 0;
  }
  return v3 != 0;
}

_DWORD *WebCore::TrackListBase::scheduleTrackEvent(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  _DWORD *v9;
  uint64_t v10;
  char v11;
  _DWORD *result;
  _DWORD *v13;

  v6 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v6);
  *(_QWORD *)(v6 + 8) = 0;
  v8 = *(_DWORD *)(v6 + 20) & 0xFFC00000 | (*a2 != 0) | 0xF0200;
  *(_DWORD *)(v6 + 16) = 1;
  *(_DWORD *)(v6 + 20) = v8;
  v9 = (_DWORD *)*a2;
  if (*a2)
    *v9 += 2;
  *(_QWORD *)(v6 + 24) = v9;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 40) = 0;
  *(_QWORD *)(v6 + 48) = 0;
  *(_QWORD *)(v6 + 56) = v7;
  *(_QWORD *)(v6 + 64) = 0;
  *(_QWORD *)v6 = off_1E33EC2B8;
  v10 = *a3;
  switch(*(_DWORD *)(*a3 + 40))
  {
    case 1:
      *a3 = 0;
      *(_QWORD *)(v6 + 72) = v10;
      *(_DWORD *)(v6 + 80) = 2;
      v11 = 1;
      break;
    case 2:
      *a3 = 0;
      *(_QWORD *)(v6 + 72) = v10;
      v11 = 1;
      *(_DWORD *)(v6 + 80) = 1;
      break;
    case 3:
      *a3 = 0;
      *(_QWORD *)(v6 + 72) = v10;
      v11 = 1;
      *(_DWORD *)(v6 + 80) = 0;
      break;
    default:
      v11 = 0;
      *(_BYTE *)(v6 + 72) = 0;
      break;
  }
  *(_BYTE *)(v6 + 88) = v11;
  v13 = (_DWORD *)v6;
  WebCore::ActiveDOMObject::queueTaskToDispatchEventInternal((_QWORD *)(a1 + 32), a1, 9, (uint64_t *)&v13);
  result = v13;
  if (v13)
  {
    if (v13[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v13 + 8))();
    else
      --v13[4];
  }
  return result;
}

_QWORD *WebCore::TrackListBase::scheduleChangeEvent(WebCore::TrackListBase *this)
{
  _QWORD *v2;
  uint64_t v3;
  int v4;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (**v9)();
  _QWORD *v10;

  *((_BYTE *)this + 88) = 1;
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E33EBF98;
  v2[1] = this;
  v3 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v3 = 1;
  v4 = *((_DWORD *)this + 6);
  *(_QWORD *)(v3 + 8) = this;
  ++*((_QWORD *)this + 6);
  *((_DWORD *)this + 6) = v4 + 2;
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *result = &off_1E33EBF70;
  result[1] = this;
  result[2] = v3;
  result[3] = v2;
  v10 = result;
  v6 = *((_QWORD *)this + 5);
  if (!v6)
  {
    v10 = 0;
    v9 = &off_1E33EBF70;
    return (_QWORD *)v9[1]();
  }
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7)
  {
    v10 = 0;
    goto LABEL_6;
  }
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v7 - 96) + 104))(v7 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v8, 9, (uint64_t *)&v10);
  result = v10;
  v10 = 0;
  if (result)
  {
LABEL_6:
    v9 = (uint64_t (**)())*result;
    return (_QWORD *)v9[1]();
  }
  return result;
}

uint64_t WebCore::TextTrack::isDefault(WebCore::TextTrack *this)
{
  return 0;
}

uint64_t WebCore::TextTrackCue::cueType(WebCore::TextTrackCue *this)
{
  return 0;
}

void `non-virtual thunk to'WebCore::TextTrackCue::~TextTrackCue(WebCore::TextTrackCue *this, void *a2)
{
  WebCore::TextTrackCue::~TextTrackCue((WebCore::TextTrackCue *)((char *)this - 32), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::TextTrackCue::~TextTrackCue((WebCore::TextTrackCue *)((char *)this - 32), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void WebCore::TextTrackCueGenericBoxElement::~TextTrackCueGenericBoxElement(WebCore::TextTrackCueGenericBoxElement *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)this = off_1E33ED5B8;
  v3 = (unsigned int *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  *(_QWORD *)this = off_1E33EC5C8;
  v6 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr((unsigned int *)v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, (unsigned int *)v6));
    if (!v8)
    {
      atomic_store(1u, (unsigned int *)v6);
      v9 = *(unsigned int *)(v6 + 28);
      if ((_DWORD)v9)
      {
        v12 = v6;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v6 + 16), (WTF::StringImpl *)(*(_QWORD *)(v6 + 16) + 32 * v9));
        v6 = v12;
      }
      v10 = *(WTF **)(v6 + 16);
      if (v10)
      {
        *(_QWORD *)(v6 + 16) = 0;
        *(_DWORD *)(v6 + 24) = 0;
        v11 = v6;
        WTF::fastFree(v10, a2);
        v6 = v11;
      }
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  WebCore::Element::~Element((uint64_t)this);
}

{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  bmalloc::api *v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E33ED5B8;
  v3 = (unsigned int *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  *(_QWORD *)this = off_1E33EC5C8;
  v6 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr((unsigned int *)v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, (unsigned int *)v6));
    if (!v8)
    {
      atomic_store(1u, (unsigned int *)v6);
      v11 = *(unsigned int *)(v6 + 28);
      if ((_DWORD)v11)
      {
        v14 = v6;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v6 + 16), (WTF::StringImpl *)(*(_QWORD *)(v6 + 16) + 32 * v11));
        v6 = v14;
      }
      v12 = *(WTF **)(v6 + 16);
      if (v12)
      {
        *(_QWORD *)(v6 + 16) = 0;
        *(_DWORD *)(v6 + 24) = 0;
        v13 = v6;
        WTF::fastFree(v12, a2);
        v6 = v13;
      }
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v9, v10);
}

void WebCore::TextTrackCueGeneric::~TextTrackCueGeneric(WebCore::TextTrackCueGeneric *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 60);
  *((_QWORD *)this + 60) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 57);
  if ((v4 & 0x8000000000000) != 0)
  {
    v7 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  v5 = *((_QWORD *)this + 56);
  if ((v5 & 0x8000000000000) != 0)
  {
    v10 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFLL);
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, a2);
    }
  }
  v6 = *((_QWORD *)this + 55);
  if ((v6 & 0x8000000000000) != 0)
  {
    v13 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFLL);
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      WTF::fastFree((WTF *)v13, a2);
    }
  }
  WebCore::VTTCue::~VTTCue(this, a2);
}

{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  bmalloc::api *v7;
  void *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 60);
  *((_QWORD *)this + 60) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 57);
  if ((v4 & 0x8000000000000) != 0)
  {
    v9 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, a2);
    }
  }
  v5 = *((_QWORD *)this + 56);
  if ((v5 & 0x8000000000000) != 0)
  {
    v12 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFLL);
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v12);
      WTF::fastFree((WTF *)v12, a2);
    }
  }
  v6 = *((_QWORD *)this + 55);
  if ((v6 & 0x8000000000000) != 0)
  {
    v15 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFLL);
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
    {
      atomic_store(1u, v15);
      WTF::fastFree((WTF *)v15, a2);
    }
  }
  WebCore::VTTCue::~VTTCue(this, a2);
  bmalloc::api::isoDeallocate(v7, v8);
}

uint64_t WebCore::TextTrackCueGeneric::cueType(WebCore::TextTrackCueGeneric *this)
{
  return 2;
}

BOOL WebCore::VTTCue::isRenderable(WebCore::VTTCue *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 18);
  return v1 && *(_DWORD *)(v1 + 4) != 0;
}

uint64_t WebCore::VTTCue::text(WebCore::VTTCue *this)
{
  return (uint64_t)this + 144;
}

uint64_t WebCore::VTTCue::recalculateStyles(uint64_t this)
{
  *(_BYTE *)(this + 357) |= 2u;
  return this;
}

uint64_t WebCore::VTTCue::logger(WebCore::VTTCue *this)
{
  return *((_QWORD *)this + 53);
}

const char *WebCore::VTTCue::logClassName(WebCore::VTTCue *this)
{
  return "VTTCue";
}

void `non-virtual thunk to'WebCore::TextTrackCueGeneric::~TextTrackCueGeneric(WebCore::TextTrackCueGeneric *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 56);
  *((_QWORD *)this + 56) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 53);
  if ((v4 & 0x8000000000000) != 0)
  {
    v7 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  v5 = *((_QWORD *)this + 52);
  if ((v5 & 0x8000000000000) != 0)
  {
    v10 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFLL);
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, a2);
    }
  }
  v6 = *((_QWORD *)this + 51);
  if ((v6 & 0x8000000000000) != 0)
  {
    v13 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFLL);
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      WTF::fastFree((WTF *)v13, a2);
    }
  }
  WebCore::VTTCue::~VTTCue((WebCore::TextTrackCueGeneric *)((char *)this - 32), a2);
}

{
  WebCore::TextTrackCueGeneric::~TextTrackCueGeneric((WebCore::TextTrackCueGeneric *)((char *)this - 32), a2);
}

{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 43);
  *((_QWORD *)this + 43) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 40);
  if ((v4 & 0x8000000000000) != 0)
  {
    v7 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  v5 = *((_QWORD *)this + 39);
  if ((v5 & 0x8000000000000) != 0)
  {
    v10 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFLL);
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, a2);
    }
  }
  v6 = *((_QWORD *)this + 38);
  if ((v6 & 0x8000000000000) != 0)
  {
    v13 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFLL);
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      WTF::fastFree((WTF *)v13, a2);
    }
  }
  WebCore::VTTCue::~VTTCue((WebCore::TextTrackCueGeneric *)((char *)this - 136), a2);
}

{
  WebCore::TextTrackCueGeneric::~TextTrackCueGeneric((WebCore::TextTrackCueGeneric *)((char *)this - 136), a2);
}

uint64_t `non-virtual thunk to'WebCore::VTTCue::logger(WebCore::VTTCue *this)
{
  return *((_QWORD *)this + 36);
}

const char *`non-virtual thunk to'WebCore::VTTCue::logClassName(WebCore::VTTCue *this)
{
  return "VTTCue";
}

void WebCore::TextTrackCueBox::~TextTrackCueBox(WebCore::TextTrackCueBox *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)this = off_1E33EC5C8;
  v3 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v6 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v6)
      {
        v9 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v6));
        v3 = v9;
      }
      v7 = *(WTF **)(v3 + 16);
      if (v7)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v8 = v3;
        WTF::fastFree(v7, a2);
        v3 = v8;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WebCore::Element::~Element((uint64_t)this);
}

{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  bmalloc::api *v6;
  void *v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)this = off_1E33EC5C8;
  v3 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v8 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v8)
      {
        v11 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v8));
        v3 = v11;
      }
      v9 = *(WTF **)(v3 + 16);
      if (v9)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v10 = v3;
        WTF::fastFree(v9, a2);
        v3 = v10;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v6, v7);
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::nullLogger(WebCore::TrackBase &)::$_0 &&>>(uint64_t ***a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;

  v1 = **a1;
  v2 = *v1;
  result = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E335DEC0;
  *(_BYTE *)(result + 12) = 1;
  *(_QWORD *)(result + 16) = v2;
  qword_1ECE83718 = result;
  if (v2 == *v1)
    *(_BYTE *)(result + 12) = 0;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::TextTrack::~TextTrack()::$_0,void,WebCore::TextTrackClient &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 64))(a2, *(_QWORD *)(a1 + 8), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 168));
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::TextTrack::Kind>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, int *a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  NSObject *v16;
  uint64_t v17;
  void *v18;
  char *v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::Logger *v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::Logger *v34;
  uint64_t v35;
  WTF::StringImpl **v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  int v40;
  WTF::Logger *v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  uint8_t buf[4];
  _BYTE v47[12];
  int v48;
  WTF::StringImpl *v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  result = WTF::Logger::LogSiteIdentifier::toString(this);
  v8 = *a4;
  {
    WebCore::convertEnumerationToString(WebCore::TextTrack::Kind)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::TextTrack::Kind)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::TextTrack::Kind)::$_2::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::TextTrack::Kind)::$_3::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::TextTrack::Kind)::$_4::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::TextTrack::Kind)::$_5::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::TextTrack::Kind)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::TextTrack::Kind)::$_0::operator() const(void)::impl;
    *(_QWORD *)algn_1EE2F4C58 = &WebCore::convertEnumerationToString(WebCore::TextTrack::Kind)::$_1::operator() const(void)::impl;
    qword_1EE2F4C60 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::TextTrack::Kind)::$_2::operator() const(void)::impl;
    unk_1EE2F4C68 = &WebCore::convertEnumerationToString(WebCore::TextTrack::Kind)::$_3::operator() const(void)::impl;
    qword_1EE2F4C70 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::TextTrack::Kind)::$_4::operator() const(void)::impl;
    unk_1EE2F4C78 = &WebCore::convertEnumerationToString(WebCore::TextTrack::Kind)::$_5::operator() const(void)::impl;
  }
  v9 = WebCore::convertEnumerationToString(WebCore::TextTrack::Kind)::values[v8];
  if (v9)
    *(_DWORD *)v9 += 2;
  if (!v44)
  {
    v10 = 0;
    if (v9)
      goto LABEL_7;
LABEL_80:
    v11 = 0;
    goto LABEL_8;
  }
  v10 = *((_DWORD *)v44 + 1);
  if (!v9)
    goto LABEL_80;
LABEL_7:
  v11 = *(_DWORD *)(v9 + 4);
LABEL_8:
  if ((v11 | v10) < 0 || (result = (v10 + v11), __OFADD__(v10, v11)))
  {
    v45 = 0;
    goto LABEL_85;
  }
  if (v44)
  {
    v12 = *((_DWORD *)v44 + 4);
    v13 = (v12 >> 2) & 1;
    if (!v9 || (v12 & 4) == 0)
    {
LABEL_14:
      result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v13, (uint64_t)v44, v9, &v45);
      if (v45)
      {
        if (v9)
        {
          if (*(_DWORD *)v9 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v9, v14);
          else
            *(_DWORD *)v9 -= 2;
        }
        goto LABEL_18;
      }
LABEL_85:
      __break(0xC471u);
      return result;
    }
LABEL_13:
    v13 = (*(unsigned __int8 *)(v9 + 16) >> 2) & 1;
    goto LABEL_14;
  }
  if (v9)
    goto LABEL_13;
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, 1, 0, 0, &v45);
  if (!v45)
    goto LABEL_85;
LABEL_18:
  v15 = v44;
  v44 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v14);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = *(NSObject **)(a1 + 32);
  v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v17)
  {
    WTF::String::utf8();
    v19 = v42 ? (char *)v42 + 16 : 0;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)v47 = v19;
    _os_log_impl(&dword_1940B8000, v16, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    v17 = (uint64_t)v42;
    v42 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 1)
        v17 = WTF::fastFree((WTF *)v17, v18);
      else
        --*(_DWORD *)v17;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v20 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v21 = *v20;
      if ((v21 & 1) != 0)
        break;
      v22 = __ldaxr(v20);
      if (v22 == v21)
      {
        if (!__stxr(v21 | 1, v20))
        {
          v23 = WTF::Logger::observers((WTF::Logger *)v17);
          v24 = *(unsigned int *)(v23 + 12);
          if ((_DWORD)v24)
          {
            v25 = *(uint64_t **)v23;
            v26 = *(_QWORD *)v23 + 8 * v24;
            do
            {
              v27 = *v25;
              *(_DWORD *)buf = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v28 = *a4;
              v48 = 0;
              {
                WebCore::convertEnumerationToString(WebCore::TextTrack::Kind)::$_0::operator() const(void)::impl += 2;
                WebCore::convertEnumerationToString(WebCore::TextTrack::Kind)::$_1::operator() const(void)::impl += 2;
                WebCore::convertEnumerationToString(WebCore::TextTrack::Kind)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::TextTrack::Kind)::$_0::operator() const(void)::impl;
                *(_QWORD *)algn_1EE2F4C58 = &WebCore::convertEnumerationToString(WebCore::TextTrack::Kind)::$_1::operator() const(void)::impl;
                WebCore::convertEnumerationToString(WebCore::TextTrack::Kind)::$_2::operator() const(void)::impl += 2;
                WebCore::convertEnumerationToString(WebCore::TextTrack::Kind)::$_3::operator() const(void)::impl += 2;
                qword_1EE2F4C60 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::TextTrack::Kind)::$_2::operator() const(void)::impl;
                unk_1EE2F4C68 = &WebCore::convertEnumerationToString(WebCore::TextTrack::Kind)::$_3::operator() const(void)::impl;
                WebCore::convertEnumerationToString(WebCore::TextTrack::Kind)::$_4::operator() const(void)::impl += 2;
                WebCore::convertEnumerationToString(WebCore::TextTrack::Kind)::$_5::operator() const(void)::impl += 2;
                qword_1EE2F4C70 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::TextTrack::Kind)::$_4::operator() const(void)::impl;
                unk_1EE2F4C78 = &WebCore::convertEnumerationToString(WebCore::TextTrack::Kind)::$_5::operator() const(void)::impl;
              }
              v29 = (WTF::StringImpl *)WebCore::convertEnumerationToString(WebCore::TextTrack::Kind)::values[v28];
              if (v29)
                *(_DWORD *)v29 += 2;
              v49 = v29;
              v42 = 0;
              v43 = 0;
              v30 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v43) = 2;
              v42 = v30;
              v31 = HIDWORD(v43);
              *((_DWORD *)v30 + 4 * HIDWORD(v43)) = *(_DWORD *)buf;
              v32 = *(_QWORD *)&v47[4];
              if (*(_QWORD *)&v47[4])
                **(_DWORD **)&v47[4] += 2;
              *((_QWORD *)v30 + 2 * v31 + 1) = v32;
              *((_DWORD *)v30 + 4 * (v31 + 1)) = v48;
              v33 = v49;
              if (v49)
                *(_DWORD *)v49 += 2;
              *((_QWORD *)v30 + 2 * (v31 + 1) + 1) = v33;
              HIDWORD(v43) = v31 + 2;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v27 + 16))(v27, a1, a2, &v42);
              v34 = v42;
              if (HIDWORD(v43))
              {
                v35 = 16 * HIDWORD(v43);
                v36 = (WTF::StringImpl **)((char *)v42 + 8);
                do
                {
                  v37 = *v36;
                  *v36 = 0;
                  if (v37)
                  {
                    if (*(_DWORD *)v37 == 2)
                      WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v18);
                    else
                      *(_DWORD *)v37 -= 2;
                  }
                  v36 += 2;
                  v35 -= 16;
                }
                while (v35);
                v34 = v42;
              }
              if (v34)
              {
                v42 = 0;
                LODWORD(v43) = 0;
                WTF::fastFree(v34, v18);
              }
              v38 = v49;
              v49 = 0;
              if (v38)
              {
                if (*(_DWORD *)v38 == 2)
                  WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v18);
                else
                  *(_DWORD *)v38 -= 2;
              }
              v39 = *(WTF::StringImpl **)&v47[4];
              *(_QWORD *)&v47[4] = 0;
              if (v39)
              {
                if (*(_DWORD *)v39 == 2)
                  WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v18);
                else
                  *(_DWORD *)v39 -= 2;
              }
              ++v25;
            }
            while (v25 != (uint64_t *)v26);
          }
          v40 = __ldxr(v20);
          if (v40 == 1)
          {
            if (!__stlxr(0, v20))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v45;
  v45 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v18);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::TextTrack::setKind(WebCore::TextTrack::Kind)::$_0,void,WebCore::TextTrackClient &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WebCore::TextTrack::setMode(WebCore::TextTrack::Mode)::$_0,void,WebCore::TextTrackClient &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 64))(a2, *(_QWORD *)(a1 + 8), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 168));
}

uint64_t WTF::Detail::CallableWrapper<WebCore::TextTrack::setMode(WebCore::TextTrack::Mode)::$_1,void,WebCore::TextTrackClient &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WebCore::TextTrack::removeAllCues(void)::$_0,void,WebCore::TextTrackClient &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 64))(a2, *(_QWORD *)(a1 + 8), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 168));
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::TextTrack::addCue(WTF::Ref<WebCore::TextTrackCue,WTF::RawPtrTraits<WebCore::TextTrackCue>,WTF::DefaultRefDerefTraits<WebCore::TextTrackCue>> &&)::$_0,void,WebCore::TextTrackClient &>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  *a1 = &off_1E33EBDA8;
  v2 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v2)
  {
    if (v2[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 72))(v2);
    else
      --v2[6];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::TextTrack::addCue(WTF::Ref<WebCore::TextTrackCue,WTF::RawPtrTraits<WebCore::TextTrackCue>,WTF::DefaultRefDerefTraits<WebCore::TextTrackCue>> &&)::$_0,void,WebCore::TextTrackClient &>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  *(_QWORD *)this = &off_1E33EBDA8;
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 72))(v3);
    else
      --v3[6];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::TextTrack::addCue(WTF::Ref<WebCore::TextTrackCue,WTF::RawPtrTraits<WebCore::TextTrackCue>,WTF::DefaultRefDerefTraits<WebCore::TextTrackCue>> &&)::$_0,void,WebCore::TextTrackClient &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 72))(a2, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
}

uint64_t WTF::Detail::CallableWrapper<WebCore::TextTrack::removeCue(WebCore::TextTrackCue &)::$_0,void,WebCore::TextTrackClient &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 80))(a2, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
}

uint64_t WTF::Detail::CallableWrapper<WebCore::TextTrack::cueWillChange(WebCore::TextTrackCue &)::$_0,void,WebCore::TextTrackClient &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 80))(a2, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
}

uint64_t WTF::Detail::CallableWrapper<WebCore::TextTrack::cueDidChange(WebCore::TextTrackCue &,BOOL)::$_0,void,WebCore::TextTrackClient &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 72))(a2, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
}

uint64_t WTF::Detail::CallableWrapper<WebCore::TextTrack::setLanguage(WTF::AtomString const&)::$_0,void,WebCore::TextTrackClient &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 48))(a2, *(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WebCore::TextTrack::setId(unsigned long long)::$_0,void,WebCore::TextTrackClient &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WebCore::TextTrack::setLabel(WTF::AtomString const&)::$_0,void,WebCore::TextTrackClient &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 40))(a2, *(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WebCore::TextTrack::newCuesAvailable(WebCore::TextTrackCueList const&)::$_0,void,WebCore::TextTrackClient &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 56))(a2, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
}

uint64_t WTF::WeakPtr<WebCore::TextTrack,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::TextTrack>(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;

  if ((*(_QWORD *)(a1 + 136) & 0xFFFFFFFFFFFFLL) == 0)
  {
    v2 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v2 = 1;
    *(_QWORD *)(v2 + 16) = 0;
    *(_QWORD *)(v2 + 24) = 0;
    *(_QWORD *)(v2 + 8) = a1 + 120;
    *(_BYTE *)(v2 + 32) = 0;
    v4 = *(_QWORD *)(a1 + 136);
    *(_QWORD *)(a1 + 136) = v4 & 0xFFFF000000000000 | v2;
    v5 = v4 & 0xFFFFFFFFFFFFLL;
    if ((v4 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v6 = __ldaxr((unsigned int *)v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, (unsigned int *)v5));
      if (!v7)
      {
        atomic_store(1u, (unsigned int *)v5);
        v9 = *(unsigned int *)(v5 + 28);
        if ((_DWORD)v9)
        {
          v12 = v5;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v5 + 16), (WTF::StringImpl *)(*(_QWORD *)(v5 + 16) + 32 * v9));
          v5 = v12;
        }
        v10 = *(WTF **)(v5 + 16);
        if (v10)
        {
          *(_QWORD *)(v5 + 16) = 0;
          *(_DWORD *)(v5 + 24) = 0;
          v11 = v5;
          WTF::fastFree(v10, v3);
          v5 = v11;
        }
        WTF::fastFree((WTF *)v5, v3);
      }
    }
  }
  return *(_QWORD *)(a1 + 136) & 0xFFFFFFFFFFFFLL;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::TrackBase::addClientToTrackPrivateBase(WebCore::TrackPrivateBaseClient &,WebCore::TrackPrivateBase &)::$_0,void,WTF::Function<void ()(void)> &&>::call(uint64_t a1, uint64_t *a2)
{
  __int128 v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t result;
  _QWORD *v11;
  char v12;
  _OWORD v13[2];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = *(_OWORD *)(a1 + 32);
  v13[0] = *(_OWORD *)(a1 + 16);
  v13[1] = v2;
  v3 = *a2;
  *a2 = 0;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = &off_1E335A090;
  v4[1] = v3;
  v11 = v4;
  v12 = 0;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_5:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v6 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, (uint64_t *)v13);
  if (v6)
  {
    v7 = v6[4];
    if (v7)
    {
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 88))(v6[4]) & 1) != 0)
      {
        v8 = 1;
        goto LABEL_11;
      }
      (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v7 + 336))(v7, &v11);
    }
  }
  else
  {
    v7 = 0;
  }
  v8 = 0;
LABEL_11:
  v9 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v9 == 1)
  {
    if (!__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
    {
      if (!v8)
        goto LABEL_15;
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  if (v8)
LABEL_14:
    (*(void (**)(_QWORD *, uint64_t))(*v11 + 16))(v11, v7);
LABEL_15:
  result = (uint64_t)v11;
  v11 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::TrackListBase>(WebCore::TrackListBase &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  _DWORD *v5;
  uint64_t v7;

  *a1 = &off_1E33EBF70;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v7 = *((_QWORD *)v4 + 1);
      --*(_QWORD *)(v7 + 48);
      *((_QWORD *)v4 + 1) = 0;
      if (*(_DWORD *)(v7 + 24) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 72))(v7);
      else
        --*(_DWORD *)(v7 + 24);
      WTF::fastFree(v4, a2);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  v5 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v5)
  {
    if (v5[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 72))(v5);
    else
      --v5[6];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::TrackListBase>(WebCore::TrackListBase &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  _DWORD *v5;
  uint64_t v7;

  *(_QWORD *)this = &off_1E33EBF70;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v7 = *((_QWORD *)v4 + 1);
      --*(_QWORD *)(v7 + 48);
      *((_QWORD *)v4 + 1) = 0;
      if (*(_DWORD *)(v7 + 24) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 72))(v7);
      else
        --*(_DWORD *)(v7 + 24);
      WTF::fastFree(v4, a2);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  v5 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    if (v5[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 72))(v5);
    else
      --v5[6];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::TrackListBase>(WebCore::TrackListBase &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
}

uint64_t WTF::Detail::CallableWrapper<WebCore::TrackListBase::scheduleChangeEvent(void)::$_0,void>::call(WebCore *a1)
{
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  _BOOL4 v8;
  _DWORD *v9;
  uint64_t result;

  v1 = (_BYTE *)*((_QWORD *)a1 + 1);
  v1[88] = 0;
  v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v2 || (v3 = *(_QWORD *)(v2 + 96)) == 0)
    v3 = WebCore::threadGlobalDataSlow(a1);
  v4 = *(_QWORD *)(v3 + 40);
  if (!v4)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v3);
    v4 = *(_QWORD *)(v3 + 40);
  }
  v5 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v5);
  *(_QWORD *)v5 = off_1E33A4B48;
  *(_QWORD *)(v5 + 8) = 0;
  v7 = *(_DWORD *)(v5 + 20) & 0xFFC00000 | 0x1E8200;
  v8 = *(_QWORD *)(v4 + 368) != 0;
  *(_DWORD *)(v5 + 16) = 1;
  *(_DWORD *)(v5 + 20) = v7 | v8;
  v9 = *(_DWORD **)(v4 + 368);
  if (v9)
    *v9 += 2;
  *(_QWORD *)(v5 + 24) = v9;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 56) = v6;
  *(_QWORD *)(v5 + 64) = 0;
  result = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)v1 + 48))(v1, v5);
  if (*(_DWORD *)(v5 + 16) == 1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  --*(_DWORD *)(v5 + 16);
  return result;
}

uint64_t WebCore::VTTCueBox::applyCSSProperties(WebCore::VTTCueBox *this)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::VTTCueBox *v9;
  WebCore::VTTCueBox *v10;
  WebCore::VTTCueBox **v11;

  v2 = *(_QWORD *)(*((_QWORD *)this + 14) + 8);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 128))(v2) == 3
    || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 128))(v2), (_DWORD)result == 2))
  {
    ++*(_DWORD *)(v2 + 24);
    WebCore::StyledElement::setInlineStyleProperty(this, (WTF::StringImpl *)3, WebCore::displayWritingModeMap[*(unsigned __int8 *)(v2 + 216)], 0);
    v9 = this;
    v10 = this;
    v4 = *(unsigned int *)(v2 + 384);
    if ((_DWORD)v4 == -1)
      goto LABEL_13;
    v11 = &v9;
    ((void (*)(WebCore::VTTCueBox ***, uint64_t))off_1E33ECF38[v4])(&v11, v2 + 376);
    v9 = this;
    v10 = this;
    v5 = *(unsigned int *)(v2 + 368);
    if ((_DWORD)v5 == -1)
      goto LABEL_13;
    v11 = &v9;
    ((void (*)(WebCore::VTTCueBox ***, uint64_t))off_1E33ECF48[v5])(&v11, v2 + 360);
    v9 = this;
    v10 = this;
    v6 = *(unsigned int *)(v2 + 400);
    if ((_DWORD)v6 == -1
      || (v11 = &v9,
          ((void (*)(WebCore::VTTCueBox ***, uint64_t))off_1E33ECF58[v6])(&v11, v2 + 392),
          v9 = this,
          v10 = this,
          v7 = *(unsigned int *)(v2 + 416),
          (_DWORD)v7 == -1))
    {
LABEL_13:
      v8 = std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::VTTCueBox::createElementRenderer(v8);
    }
    else
    {
      v11 = &v9;
      ((void (*)(WebCore::VTTCueBox ***, uint64_t))off_1E33ECF68[v7])(&v11, v2 + 408);
      WebCore::StyledElement::setInlineStyleProperty(this, (WTF::StringImpl *)0xF9, WebCore::displayAlignmentMap[*(unsigned __int8 *)(v2 + 217)], 0);
      WebCore::StyledElement::setInlineStyleProperty(this, (WTF::StringImpl *)0xCA, 0x1BDu, 0);
      result = WebCore::StyledElement::setInlineStyleProperty(this, (WTF::StringImpl *)0xD, 53, *(unsigned __int8 *)(v2 + 356), (double)*(int *)(v2 + 352));
      if ((*(_BYTE *)(v2 + 357) & 1) == 0)
      {
        WebCore::StyledElement::setInlineStyleProperty(this, (WTF::StringImpl *)0x126, 0x23Au, 0);
        result = WebCore::StyledElement::setInlineStyleProperty(this, (WTF::StringImpl *)0x10E, 0x1E1u, 0);
      }
      if (*(_DWORD *)(v2 + 24) == 1)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
      else
        --*(_DWORD *)(v2 + 24);
    }
  }
  return result;
}

_QWORD *WebCore::VTTCueBox::createElementRenderer@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;

  v6 = bmalloc::api::isoAllocate();
  result = (_QWORD *)WebCore::RenderBlockFlow::RenderBlockFlow(v6, 47, a1, a2, 0);
  *result = off_1E34378C8;
  v8 = *(_QWORD *)(a1 + 112);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (v9)
    {
      result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 128))(v9);
      if ((_DWORD)result != 3)
      {
        result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 128))(v9);
        if ((_DWORD)result != 2)
        {
          __break(0xC471u);
          JUMPOUT(0x195D929C8);
        }
      }
    }
  }
  else
  {
    v9 = 0;
  }
  *(_QWORD *)(v6 + 248) = v9;
  *(_QWORD *)(v6 + 256) = 0;
  *a3 = v6;
  return result;
}

uint64_t WebCore::VTTCue::create@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  uint64_t v10;
  WTF::MediaTime *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  uint64_t result;
  _BYTE v29[24];
  uint64_t v30;

  v10 = bmalloc::api::isoAllocate();
  v11 = (WTF::MediaTime *)WTF::MediaTime::createWithDouble((WTF::MediaTime *)v10, a4);
  v13 = v12;
  v14 = WTF::MediaTime::createWithDouble(v11, a5);
  v16 = v15;
  *(_DWORD *)(v10 + 24) = 1;
  *(_QWORD *)(v10 + 8) = 0;
  *(_QWORD *)(v10 + 16) = 0;
  *(_QWORD *)v10 = &unk_1E33A4FC0;
  v17 = *(_QWORD *)(a1 + 704);
  v18 = a1;
  if (v17)
  {
    v19 = *(_QWORD *)(v17 + 8);
    if (v19)
      v18 = v19;
    else
      v18 = a1;
  }
  *(_QWORD *)(v10 + 32) = &off_1E33A18C0;
  *(_QWORD *)(v10 + 40) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)(v10 + 32), (WebCore::ScriptExecutionContext *)(v18 + 192));
  *(_QWORD *)(v10 + 32) = &off_1E33A0540;
  *(_QWORD *)(v10 + 48) = 0;
  if (*(_BYTE *)(v18 + 470))
  {
    result = 422;
    __break(0xC471u);
  }
  else
  {
    v30 = v10 + 32;
    WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)(v18 + 320), &v30, (uint64_t)v29);
    *(_QWORD *)(v10 + 56) = 0;
    *(_QWORD *)(v10 + 64) = v11;
    *(_QWORD *)(v10 + 72) = v13;
    *(_QWORD *)(v10 + 80) = v14;
    *(_QWORD *)(v10 + 88) = v16;
    *(_DWORD *)(v10 + 96) = 0;
    *(_QWORD *)(v10 + 112) = 0;
    *(_QWORD *)(v10 + 120) = 0;
    *(_QWORD *)(v10 + 104) = 0;
    *(_QWORD *)(v10 + 127) = 0;
    *(_BYTE *)(v10 + 135) = 1;
    *(_QWORD *)v10 = off_1E33ED130;
    *(_QWORD *)(v10 + 32) = &unk_1E33ED280;
    *(_QWORD *)(v10 + 136) = &unk_1E33ED2D8;
    v20 = *a2;
    *a2 = 0;
    *(_QWORD *)(v10 + 144) = v20;
    *(_QWORD *)(v10 + 152) = 0;
    *(_BYTE *)(v10 + 160) = 0;
    *(_BYTE *)(v10 + 168) = 0;
    *(_BYTE *)(v10 + 176) = 0;
    *(_BYTE *)(v10 + 184) = 0;
    *(_BYTE *)(v10 + 192) = 0;
    *(_BYTE *)(v10 + 200) = 0;
    *(_QWORD *)(v10 + 208) = 0x4059000000000000;
    *(_WORD *)(v10 + 216) = 256;
    *(_QWORD *)(v10 + 232) = 0;
    *(_QWORD *)(v10 + 240) = 0;
    *(_QWORD *)(v10 + 224) = 0;
    v21 = bmalloc::api::isoAllocate();
    *(_OWORD *)(v21 + 8) = xmmword_1968BC9D0;
    *(_QWORD *)(v21 + 24) = 0x101C00000002;
    *(_QWORD *)(v21 + 32) = 0;
    *(_QWORD *)(v21 + 40) = a1 + 96;
    *(_OWORD *)(v21 + 48) = 0u;
    *(_OWORD *)(v21 + 64) = 0u;
    ++*(_DWORD *)(a1 + 3324);
    *(_QWORD *)(v21 + 80) = 0;
    *(_QWORD *)(v21 + 88) = 0;
    v22 = WebCore::HTMLNames::spanTag;
    if (WebCore::HTMLNames::spanTag)
      ++*(_DWORD *)WebCore::HTMLNames::spanTag;
    *(_QWORD *)(v21 + 96) = v22;
    *(_QWORD *)(v21 + 104) = 0;
    *(_QWORD *)v21 = off_1E33CBA30;
    *(_QWORD *)(v10 + 248) = v21;
    v23 = bmalloc::api::isoAllocate();
    *(_OWORD *)(v23 + 8) = xmmword_1968BC9D0;
    *(_QWORD *)(v23 + 24) = 0x101C00000002;
    *(_QWORD *)(v23 + 32) = 0;
    *(_QWORD *)(v23 + 40) = a1 + 96;
    *(_OWORD *)(v23 + 48) = 0u;
    *(_OWORD *)(v23 + 64) = 0u;
    ++*(_DWORD *)(a1 + 3324);
    *(_QWORD *)(v23 + 80) = 0;
    *(_QWORD *)(v23 + 88) = 0;
    v24 = WebCore::HTMLNames::divTag;
    if (WebCore::HTMLNames::divTag)
      ++*(_DWORD *)WebCore::HTMLNames::divTag;
    *(_QWORD *)(v23 + 96) = v24;
    *(_QWORD *)(v23 + 104) = 0;
    *(_QWORD *)v23 = off_1E33B9CC0;
    *(_QWORD *)(v10 + 272) = 0;
    *(_QWORD *)(v10 + 280) = 0;
    *(_QWORD *)(v10 + 256) = v23;
    *(_QWORD *)(v10 + 264) = 0;
    *(_WORD *)(v10 + 288) = 433;
    *(_QWORD *)(v10 + 296) = 0;
    *(_BYTE *)(v10 + 304) = 0;
    *(_BYTE *)(v10 + 312) = 0;
    *(_BYTE *)(v10 + 320) = 0;
    *(_BYTE *)(v10 + 328) = 0;
    *(_OWORD *)(v10 + 336) = *(_OWORD *)WTF::MediaTime::zeroTime((WTF::MediaTime *)v23);
    *(_DWORD *)(v10 + 352) = 0;
    *(_BYTE *)(v10 + 356) = 0;
    *(_BYTE *)(v10 + 357) |= 7u;
    *(_WORD *)(v10 + 358) = 3;
    *(_DWORD *)(v10 + 360) = 0;
    *(_DWORD *)(v10 + 368) = 1;
    *(_DWORD *)(v10 + 376) = 0;
    *(_DWORD *)(v10 + 384) = 1;
    *(_DWORD *)(v10 + 392) = 0;
    *(_DWORD *)(v10 + 400) = 1;
    *(_DWORD *)(v10 + 408) = 0;
    *(_DWORD *)(v10 + 416) = 1;
    v25 = WebCore::Document::logger((WebCore::Document *)a1);
    v26 = (unsigned int *)(v25 + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 + 1, v26));
    *(_QWORD *)(v10 + 424) = v25;
    *(_QWORD *)(v10 + 432) = 0;
    *a3 = v10;
    return (uint64_t)WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)(v10 + 32));
  }
  return result;
}

uint64_t WebCore::VTTCue::VTTCue(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  WTF::MediaTime *v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const WTF::StringImpl *v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  const WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  const WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  unsigned __int8 **v31;
  WTF::StringImpl *v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t **v36;
  const WTF::StringImpl *v37;
  const WTF::StringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t **v41;
  const WTF::StringImpl *v42;
  const WTF::StringImpl *v43;
  const WTF::StringImpl *v44[3];
  uint64_t v45;

  v6 = (WTF::MediaTime *)WTF::MediaTime::zeroTime((WTF::MediaTime *)a1);
  v7 = (_OWORD *)WTF::MediaTime::zeroTime(v6);
  *(_DWORD *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E33A4FC0;
  v8 = *(_QWORD *)(a2 + 704);
  v9 = a2;
  if (v8)
  {
    v10 = *(_QWORD *)(v8 + 8);
    if (v10)
      v9 = v10;
    else
      v9 = a2;
  }
  *(_QWORD *)(a1 + 32) = &off_1E33A18C0;
  *(_QWORD *)(a1 + 40) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)(a1 + 32), (WebCore::ScriptExecutionContext *)(v9 + 192));
  *(_QWORD *)(a1 + 32) = &off_1E33A0540;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(_BYTE *)(v9 + 470))
  {
    __break(0xC471u);
    JUMPOUT(0x195D931ECLL);
  }
  v45 = a1 + 32;
  WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)(v9 + 320), &v45, (uint64_t)v44);
  *(_QWORD *)a1 = off_1E33EC380;
  *(_QWORD *)(a1 + 32) = &unk_1E33EC4A0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v6;
  *(_OWORD *)(a1 + 80) = *v7;
  *(_DWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  v11 = a1 + 104;
  *(_QWORD *)(a1 + 127) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 135) = 1;
  *(_QWORD *)a1 = off_1E33ED130;
  *(_QWORD *)(a1 + 32) = &unk_1E33ED280;
  *(_BYTE *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 176) = 0;
  *(_BYTE *)(a1 + 184) = 0;
  *(_BYTE *)(a1 + 192) = 0;
  *(_BYTE *)(a1 + 200) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 136) = &unk_1E33ED2D8;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 208) = 0x4059000000000000;
  *(_WORD *)(a1 + 216) = 256;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  v12 = bmalloc::api::isoAllocate();
  *(_OWORD *)(v12 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v12 + 24) = 0x101C00000002;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 40) = a2 + 96;
  *(_OWORD *)(v12 + 48) = 0u;
  *(_OWORD *)(v12 + 64) = 0u;
  ++*(_DWORD *)(a2 + 3324);
  *(_QWORD *)(v12 + 80) = 0;
  *(_QWORD *)(v12 + 88) = 0;
  v13 = WebCore::HTMLNames::spanTag;
  if (WebCore::HTMLNames::spanTag)
    ++*(_DWORD *)WebCore::HTMLNames::spanTag;
  *(_QWORD *)(v12 + 96) = v13;
  *(_QWORD *)(v12 + 104) = 0;
  *(_QWORD *)v12 = off_1E33CBA30;
  *(_QWORD *)(a1 + 248) = v12;
  v14 = bmalloc::api::isoAllocate();
  *(_OWORD *)(v14 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v14 + 24) = 0x101C00000002;
  *(_QWORD *)(v14 + 32) = 0;
  *(_QWORD *)(v14 + 40) = a2 + 96;
  *(_OWORD *)(v14 + 48) = 0u;
  *(_OWORD *)(v14 + 64) = 0u;
  ++*(_DWORD *)(a2 + 3324);
  *(_QWORD *)(v14 + 80) = 0;
  *(_QWORD *)(v14 + 88) = 0;
  v15 = WebCore::HTMLNames::divTag;
  if (WebCore::HTMLNames::divTag)
    ++*(_DWORD *)WebCore::HTMLNames::divTag;
  *(_QWORD *)(v14 + 96) = v15;
  *(_QWORD *)(v14 + 104) = 0;
  *(_QWORD *)v14 = off_1E33B9CC0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 256) = v14;
  *(_QWORD *)(a1 + 264) = 0;
  *(_WORD *)(a1 + 288) = 433;
  *(_QWORD *)(a1 + 296) = 0;
  *(_BYTE *)(a1 + 304) = 0;
  *(_BYTE *)(a1 + 312) = 0;
  *(_BYTE *)(a1 + 320) = 0;
  *(_BYTE *)(a1 + 328) = 0;
  *(_OWORD *)(a1 + 336) = *(_OWORD *)WTF::MediaTime::zeroTime((WTF::MediaTime *)v14);
  *(_DWORD *)(a1 + 352) = 0;
  *(_BYTE *)(a1 + 356) = 0;
  *(_BYTE *)(a1 + 357) |= 7u;
  *(_WORD *)(a1 + 358) = 3;
  *(_DWORD *)(a1 + 360) = 0;
  *(_DWORD *)(a1 + 368) = 1;
  *(_DWORD *)(a1 + 376) = 0;
  *(_DWORD *)(a1 + 384) = 1;
  *(_DWORD *)(a1 + 392) = 0;
  *(_DWORD *)(a1 + 400) = 1;
  *(_DWORD *)(a1 + 408) = 0;
  *(_DWORD *)(a1 + 416) = 1;
  v16 = WebCore::Document::logger((WebCore::Document *)a2);
  v18 = (unsigned int *)(v16 + 8);
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 + 1, v18));
  *(_QWORD *)(a1 + 424) = v16;
  *(_QWORD *)(a1 + 432) = 0;
  v20 = a3[6];
  *(_QWORD *)(a1 + 336) = a3[5];
  *(_DWORD *)(a1 + 344) = v20;
  *(_BYTE *)(a1 + 348) = BYTE4(v20);
  v21 = (const WTF::StringImpl *)a3[8];
  if (v21)
  {
    *(_DWORD *)v21 += 2;
    v44[0] = v21;
    WebCore::VTTCue::setText((WTF **)a1, v44, v17);
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v22);
    else
      *(_DWORD *)v21 -= 2;
  }
  else
  {
    v44[0] = 0;
    WebCore::VTTCue::setText((WTF **)a1, v44, v17);
  }
  v24 = a3[1];
  v23 = a3[2];
  v25 = *(_DWORD *)(a1 + 96);
  *(_DWORD *)(a1 + 96) = v25 + 1;
  if (v25 <= 0)
  {
    if (*(_QWORD *)v11)
    {
      v34 = *(_QWORD *)(*(_QWORD *)v11 + 8);
      if (v34)
      {
        v35 = v34 - 120;
        v36 = (uint64_t **)(v34 + 80);
        v37 = (const WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
        *(_QWORD *)v37 = off_1E33EBDF8;
        *((_QWORD *)v37 + 1) = v35;
        *((_QWORD *)v37 + 2) = a1;
        v44[0] = v37;
        WTF::WeakHashSet<WebCore::TextTrackClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v36, v44);
        v38 = v44[0];
        v44[0] = 0;
        if (v38)
          (*(void (**)(const WTF::StringImpl *))(*(_QWORD *)v38 + 8))(v38);
      }
    }
  }
  *(_QWORD *)(a1 + 64) = v24;
  *(_DWORD *)(a1 + 72) = v23;
  *(_BYTE *)(a1 + 76) = BYTE4(v23);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, 1);
  v27 = a3[3];
  v26 = a3[4];
  v28 = *(_DWORD *)(a1 + 96);
  *(_DWORD *)(a1 + 96) = v28 + 1;
  if (v28 <= 0)
  {
    if (*(_QWORD *)v11)
    {
      v39 = *(_QWORD *)(*(_QWORD *)v11 + 8);
      if (v39)
      {
        v40 = v39 - 120;
        v41 = (uint64_t **)(v39 + 80);
        v42 = (const WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
        *(_QWORD *)v42 = off_1E33EBDF8;
        *((_QWORD *)v42 + 1) = v40;
        *((_QWORD *)v42 + 2) = a1;
        v44[0] = v42;
        WTF::WeakHashSet<WebCore::TextTrackClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v41, v44);
        v43 = v44[0];
        v44[0] = 0;
        if (v43)
          (*(void (**)(const WTF::StringImpl *))(*(_QWORD *)v43 + 8))(v43);
      }
    }
  }
  *(_QWORD *)(a1 + 80) = v27;
  *(_DWORD *)(a1 + 88) = v26;
  *(_BYTE *)(a1 + 92) = BYTE4(v26);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, 1);
  v29 = (const WTF::StringImpl *)a3[7];
  if (v29)
  {
    *(_DWORD *)v29 += 2;
    v44[0] = v29;
    WebCore::TextTrackCue::setId(a1, (const WTF::AtomString *)v44);
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, v30);
    else
      *(_DWORD *)v29 -= 2;
  }
  else
  {
    v44[0] = 0;
    WebCore::TextTrackCue::setId(a1, (const WTF::AtomString *)v44);
  }
  v31 = (unsigned __int8 **)a3[9];
  if (v31)
  {
    *(_DWORD *)v31 += 2;
    WebCore::VTTCue::setCueSettings(a1, v31);
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v31, v32);
    else
      *(_DWORD *)v31 -= 2;
  }
  else
  {
    WebCore::VTTCue::setCueSettings(a1, 0);
  }
  return a1;
}

uint64_t WebCore::VTTCue::VTTCue(uint64_t a1, uint64_t a2, _OWORD *a3, _OWORD *a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t result;
  _BYTE v23[24];
  uint64_t v24;

  *(_DWORD *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E33A4FC0;
  v10 = a1 + 32;
  v11 = *(_QWORD *)(a2 + 704);
  v12 = a2;
  if (v11)
  {
    v13 = *(_QWORD *)(v11 + 8);
    if (v13)
      v12 = v13;
    else
      v12 = a2;
  }
  *(_QWORD *)(a1 + 32) = &off_1E33A18C0;
  *(_QWORD *)(a1 + 40) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)(a1 + 32), (WebCore::ScriptExecutionContext *)(v12 + 192));
  *(_QWORD *)(a1 + 32) = &off_1E33A0540;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(_BYTE *)(v12 + 470))
  {
    result = 422;
    __break(0xC471u);
  }
  else
  {
    v24 = v10;
    WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)(v12 + 320), &v24, (uint64_t)v23);
    *(_QWORD *)a1 = off_1E33EC380;
    *(_QWORD *)(a1 + 32) = &unk_1E33EC4A0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_OWORD *)(a1 + 64) = *a3;
    *(_OWORD *)(a1 + 80) = *a4;
    *(_DWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 127) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    *(_BYTE *)(a1 + 135) = 1;
    *(_QWORD *)a1 = off_1E33ED130;
    *(_QWORD *)(a1 + 32) = &unk_1E33ED280;
    *(_QWORD *)(a1 + 136) = &unk_1E33ED2D8;
    v14 = *a5;
    *a5 = 0;
    *(_QWORD *)(a1 + 144) = v14;
    *(_QWORD *)(a1 + 152) = 0;
    *(_BYTE *)(a1 + 160) = 0;
    *(_BYTE *)(a1 + 168) = 0;
    *(_BYTE *)(a1 + 176) = 0;
    *(_BYTE *)(a1 + 184) = 0;
    *(_BYTE *)(a1 + 192) = 0;
    *(_BYTE *)(a1 + 200) = 0;
    *(_QWORD *)(a1 + 208) = 0x4059000000000000;
    *(_WORD *)(a1 + 216) = 256;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 240) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    v15 = bmalloc::api::isoAllocate();
    *(_OWORD *)(v15 + 8) = xmmword_1968BC9D0;
    *(_QWORD *)(v15 + 24) = 0x101C00000002;
    *(_QWORD *)(v15 + 32) = 0;
    *(_QWORD *)(v15 + 40) = a2 + 96;
    *(_OWORD *)(v15 + 48) = 0u;
    *(_OWORD *)(v15 + 64) = 0u;
    ++*(_DWORD *)(a2 + 3324);
    *(_QWORD *)(v15 + 80) = 0;
    *(_QWORD *)(v15 + 88) = 0;
    v16 = WebCore::HTMLNames::spanTag;
    if (WebCore::HTMLNames::spanTag)
      ++*(_DWORD *)WebCore::HTMLNames::spanTag;
    *(_QWORD *)(v15 + 96) = v16;
    *(_QWORD *)(v15 + 104) = 0;
    *(_QWORD *)v15 = off_1E33CBA30;
    *(_QWORD *)(a1 + 248) = v15;
    v17 = bmalloc::api::isoAllocate();
    *(_OWORD *)(v17 + 8) = xmmword_1968BC9D0;
    *(_QWORD *)(v17 + 24) = 0x101C00000002;
    *(_QWORD *)(v17 + 32) = 0;
    *(_QWORD *)(v17 + 40) = a2 + 96;
    *(_OWORD *)(v17 + 48) = 0u;
    *(_OWORD *)(v17 + 64) = 0u;
    ++*(_DWORD *)(a2 + 3324);
    *(_QWORD *)(v17 + 80) = 0;
    *(_QWORD *)(v17 + 88) = 0;
    v18 = WebCore::HTMLNames::divTag;
    if (WebCore::HTMLNames::divTag)
      ++*(_DWORD *)WebCore::HTMLNames::divTag;
    *(_QWORD *)(v17 + 96) = v18;
    *(_QWORD *)(v17 + 104) = 0;
    *(_QWORD *)v17 = off_1E33B9CC0;
    *(_QWORD *)(a1 + 272) = 0;
    *(_QWORD *)(a1 + 280) = 0;
    *(_QWORD *)(a1 + 256) = v17;
    *(_QWORD *)(a1 + 264) = 0;
    *(_WORD *)(a1 + 288) = 433;
    *(_QWORD *)(a1 + 296) = 0;
    *(_BYTE *)(a1 + 304) = 0;
    *(_BYTE *)(a1 + 312) = 0;
    *(_BYTE *)(a1 + 320) = 0;
    *(_BYTE *)(a1 + 328) = 0;
    *(_OWORD *)(a1 + 336) = *(_OWORD *)WTF::MediaTime::zeroTime((WTF::MediaTime *)v17);
    *(_DWORD *)(a1 + 352) = 0;
    *(_BYTE *)(a1 + 356) = 0;
    *(_BYTE *)(a1 + 357) |= 7u;
    *(_WORD *)(a1 + 358) = 3;
    *(_DWORD *)(a1 + 360) = 0;
    *(_DWORD *)(a1 + 368) = 1;
    *(_DWORD *)(a1 + 376) = 0;
    *(_DWORD *)(a1 + 384) = 1;
    *(_DWORD *)(a1 + 392) = 0;
    *(_DWORD *)(a1 + 400) = 1;
    *(_DWORD *)(a1 + 408) = 0;
    *(_DWORD *)(a1 + 416) = 1;
    v19 = WebCore::Document::logger((WebCore::Document *)a2);
    v20 = (unsigned int *)(v19 + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 + 1, v20));
    *(_QWORD *)(a1 + 424) = v19;
    *(_QWORD *)(a1 + 432) = 0;
    return a1;
  }
  return result;
}

uint64_t WebCore::VTTCue::setText(WTF **this, const WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t result;
  void *v6;
  int v7;
  WTF *v8;
  const WTF::StringImpl *v9;
  int v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t **v14;
  _QWORD *v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t **v20;
  _QWORD *v21;
  uint64_t v22;

  result = WTF::equal(this[18], *a2, a3);
  if ((result & 1) == 0)
  {
    v7 = *((_DWORD *)this + 24);
    *((_DWORD *)this + 24) = v7 + 1;
    if (v7 <= 0)
    {
      v11 = this[13];
      if (v11)
      {
        v12 = *((_QWORD *)v11 + 1);
        if (v12)
        {
          v13 = v12 - 120;
          v14 = (uint64_t **)(v12 + 80);
          v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v15 = off_1E33EBDF8;
          v15[1] = v13;
          v15[2] = this;
          v22 = (uint64_t)v15;
          WTF::WeakHashSet<WebCore::TextTrackClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v14, &v22);
          v16 = v22;
          v22 = 0;
          if (v16)
            (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
        }
      }
    }
    v8 = this[30];
    this[30] = 0;
    if (v8)
    {
      if (*((_DWORD *)v8 + 6) == 2)
      {
        if ((*((_WORD *)v8 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v8, v6);
      }
      else
      {
        *((_DWORD *)v8 + 6) -= 2;
      }
    }
    v9 = *a2;
    if (*a2)
      *(_DWORD *)v9 += 2;
    result = (uint64_t)this[18];
    this[18] = v9;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v6);
      else
        *(_DWORD *)result -= 2;
    }
    v10 = *((_DWORD *)this + 24) - 1;
    *((_DWORD *)this + 24) = v10;
    if (!v10)
    {
      *((_BYTE *)this + 135) = 1;
      v17 = this[13];
      if (v17)
      {
        v18 = *((_QWORD *)v17 + 1);
        if (v18)
        {
          v19 = v18 - 120;
          v20 = (uint64_t **)(v18 + 80);
          v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v21 = off_1E33EBE20;
          v21[1] = v19;
          v21[2] = this;
          v22 = (uint64_t)v21;
          WTF::WeakHashSet<WebCore::TextTrackClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v20, &v22);
          result = v22;
          v22 = 0;
          if (result)
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        }
      }
    }
    *((_BYTE *)this + 357) |= 2u;
  }
  return result;
}

uint64_t WebCore::VTTCue::setCueSettings(uint64_t this, unsigned __int8 **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const WTF::String *v6;
  uint64_t v7;
  int v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  int64_t v13;
  int v14;
  BOOL v15;
  int v16;
  int64_t v18;
  uint64_t v19;
  int v20;
  uint16x8_t v21;
  uint16x8_t v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  int v25;
  unsigned __int16 *v26;
  uint64_t v27;
  int64_t v28;
  int v29;
  int v30;
  int *v31;
  unint64_t v32;
  char v33;
  int *v34;
  unint64_t v35;
  int v36;
  unsigned __int8 *v37;
  int v38;
  int v39;
  WTF::StringImpl *v40;
  int *v41;
  char v42;
  _BOOL4 v43;
  int *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int8 *v50;
  float v51;
  int v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int8 *v58;
  int v59;
  unsigned __int8 *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  const char *v66;
  int *v67;
  unsigned __int8 *v68;
  int *v69;
  int8x16_t *v70;
  unint64_t v71;
  char v72;
  float v74;
  char v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int *v86;
  int8x16_t *v87;
  unint64_t v88;
  char v89;
  int *v90;
  int8x16_t *v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned __int8 *v98;
  int *v99;
  int8x16_t *v100;
  unint64_t v101;
  int *v102;
  int8x16_t *v103;
  unint64_t v104;
  int *v105;
  int8x16_t *v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  BOOL v113;
  BOOL v114[4];
  unsigned __int8 *v115;
  unsigned __int8 *v116;
  const WTF::String *v117;
  char v118;
  const char *v119;
  uint64_t v120;
  const char *v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;

  if (!a2)
    return this;
  v123 = v5;
  v124 = v4;
  v125 = v2;
  v126 = v3;
  v6 = (const WTF::String *)a2;
  v7 = *((unsigned int *)a2 + 1);
  if (!(_DWORD)v7)
    return this;
  v8 = *(_DWORD *)a2;
  *(_DWORD *)a2 += 2;
  v15 = ((_DWORD)a2[2] & 4) == 0;
  v118 = ((_DWORD)a2[2] & 4u) >> 2;
  v9 = a2[1];
  v10 = &v9[2 * v7];
  v11 = &v9[v7];
  if (v15)
    v11 = v10;
  v115 = (unsigned __int8 *)*((_QWORD *)v6 + 1);
  v116 = v11;
  v117 = v6;
  if (v9 == v11)
  {
LABEL_338:
    if (!v8)
      return WTF::StringImpl::destroy(v6, (WTF::StringImpl *)v9);
    *(_DWORD *)v6 = v8;
    return this;
  }
  v12 = this;
  while (2)
  {
    if (v118)
    {
      if (v9 >= v11)
      {
        if (v9 == v11)
          goto LABEL_336;
        LODWORD(v18) = (_DWORD)v11 - (_DWORD)v9;
        goto LABEL_30;
      }
      v13 = v11 - v9;
      while (1)
      {
        v14 = *v9;
        v15 = v14 == 32 || v14 == 9;
        if (!v15)
          break;
        v115 = ++v9;
        if (!--v13)
        {
          v9 = v11;
          break;
        }
      }
LABEL_25:
      if (v9 == v11)
        goto LABEL_336;
      v18 = v11 - v9;
      if (!v118)
        goto LABEL_45;
LABEL_30:
      if ((v18 & 0xFFFFFFF8) != 0 && *(_DWORD *)v9 == 1953654134 && *((_DWORD *)v9 + 1) == 1818321769)
        goto LABEL_47;
      if ((v18 & 0xFFFFFFFC) != 0 && *(_WORD *)v9 == 26988 && *((_WORD *)v9 + 1) == 25966)
      {
LABEL_54:
        v20 = 2;
        v19 = 4;
        goto LABEL_63;
      }
      if ((v18 & 0xFFFFFFF8) != 0 && *(_DWORD *)v9 == 1769172848 && *((_DWORD *)v9 + 1) == 1852795252)
      {
LABEL_61:
        v20 = 3;
        goto LABEL_62;
      }
      if ((v18 & 0xFFFFFFFC) == 0 || *(_WORD *)v9 != 26995 || *((_WORD *)v9 + 1) != 25978)
      {
        if (v18 < 5uLL || *(_DWORD *)v9 != 1734962273 || *(_DWORD *)(v9 + 1) != 1852270956)
        {
          if ((v18 & 0xFFFFFFFE) < 6uLL
            || *(_DWORD *)v9 != 1768383858
            || *(_DWORD *)(v9 + 2) != 1852795239)
          {
            if (v9 >= v11)
              goto LABEL_132;
            v20 = 0;
            goto LABEL_79;
          }
LABEL_58:
          v19 = 6;
          v20 = 6;
          goto LABEL_63;
        }
LABEL_51:
        v19 = 5;
        v20 = 5;
        goto LABEL_63;
      }
LABEL_42:
      v19 = 4;
      v20 = 4;
      goto LABEL_63;
    }
    if (v9 < v11)
    {
      do
      {
        v16 = *(unsigned __int16 *)v9;
        if (v16 != 32 && v16 != 9)
          break;
        v9 += 2;
      }
      while (v9 < v11);
      v115 = v9;
      goto LABEL_25;
    }
    if (v9 == v11)
      goto LABEL_336;
    v18 = v11 - v9;
LABEL_45:
    if ((v18 & 0x1FFFFFFF0) == 0
      || (v21 = (uint16x8_t)vceqq_s16(*(int16x8_t *)v9, (int16x8_t)xmmword_1968A3110),
          v21.i16[0] = vminvq_u16(v21),
          !v21.i32[0]))
    {
      if ((v18 & 0x1FFFFFFF8) != 0 && *(_QWORD *)v9 == 0x65006E0069006CLL)
        goto LABEL_54;
      if ((v18 & 0x1FFFFFFF0) != 0)
      {
        v22 = (uint16x8_t)vceqq_s16(*(int16x8_t *)v9, (int16x8_t)xmmword_1969F2010);
        v22.i16[0] = vminvq_u16(v22);
        if (v22.i32[0])
          goto LABEL_61;
      }
      if ((v18 & 0x1FFFFFFF8) == 0 || *(_QWORD *)v9 != 0x65007A00690073)
      {
        if ((v18 & 0x1FFFFFFFEuLL) < 0xA
          || *(_QWORD *)v9 != 0x670069006C0061
          || *(_QWORD *)(v9 + 2) != 0x6E00670069006CLL)
        {
          if ((v18 & 0x1FFFFFFFCuLL) < 0xC
            || *(_QWORD *)v9 != 0x69006700650072
            || *(_QWORD *)(v9 + 4) != 0x6E006F00690067)
          {
            if (v9 >= v11)
            {
LABEL_132:
              v26 = (unsigned __int16 *)v9;
              goto LABEL_254;
            }
            v20 = 0;
            goto LABEL_85;
          }
          goto LABEL_58;
        }
        goto LABEL_51;
      }
      goto LABEL_42;
    }
LABEL_47:
    v20 = 1;
LABEL_62:
    v19 = 8;
LABEL_63:
    v23 = &v9[2 * v19];
    v24 = &v9[v19];
    if (v118)
      v9 = v24;
    else
      v9 = v23;
    v115 = v9;
    if (v9 == v11)
    {
      v20 = 0;
      v9 = v11;
    }
    else
    {
      if (v118)
        v25 = *v24;
      else
        v25 = *(unsigned __int16 *)v23;
      if (v25 == 58)
      {
        if (v118)
          ++v9;
        else
          v9 += 2;
        v115 = v9;
      }
      else
      {
        v20 = 0;
      }
    }
    v26 = (unsigned __int16 *)v9;
    if (!v118)
    {
      if (v9 >= v11)
        goto LABEL_91;
LABEL_85:
      v26 = (unsigned __int16 *)v9;
      do
      {
        v30 = *v26;
        if (v30 == 9)
          break;
        if (v30 == 32)
          break;
        ++v26;
      }
      while (v26 < (unsigned __int16 *)v11);
      goto LABEL_91;
    }
    if (v9 < v11)
    {
LABEL_79:
      v27 = 0;
      v28 = v11 - v9;
      v26 = (unsigned __int16 *)v11;
      while (1)
      {
        v29 = v9[v27];
        if (v29 == 9 || v29 == 32)
          break;
        if (v28 == ++v27)
          goto LABEL_91;
      }
      v26 = (unsigned __int16 *)&v9[v27];
    }
LABEL_91:
    switch(v20)
    {
      case 1:
        if ((byte_1EE337CE3 & 1) != 0)
        {
          v31 = (int *)qword_1EE337D10;
          v32 = ((char *)v26 - (char *)v9) >> (v118 == 0);
          if (!qword_1EE337D10)
          {
LABEL_95:
            if (v118)
            {
              this = MEMORY[0x19AEA53F4]();
              if ((this & 1) != 0)
                goto LABEL_97;
            }
            else
            {
              this = MEMORY[0x19AEA53E8]();
              if ((_DWORD)this)
              {
LABEL_97:
                v33 = 1;
                goto LABEL_147;
              }
            }
LABEL_141:
            if ((byte_1EE337CE4 & 1) != 0)
            {
              this = qword_1EE337D18;
              if (!qword_1EE337D18)
              {
LABEL_144:
                if (v118)
                {
                  this = MEMORY[0x19AEA53F4]();
                  if ((this & 1) != 0)
                    goto LABEL_146;
                  goto LABEL_157;
                }
                this = MEMORY[0x19AEA53E8]();
                if (!(_DWORD)this)
                {
LABEL_157:
                  v46 = *(_QWORD *)(v12 + 424);
                  v45 = *(_QWORD *)(v12 + 432);
                  if (!v45)
                  {
                    v47 = *(_QWORD *)(v12 + 104);
                    if (v47 && (v48 = *(_QWORD *)(v47 + 8)) != 0)
                    {
                      v49 = *(_QWORD *)(v48 - 24);
                      this = WTF::cryptographicallyRandomNumber<unsigned long long>();
                      v45 = v49 & 0xFFFFFFFFFFFF0000 | (unsigned __int16)this;
                      *(_QWORD *)(v12 + 432) = v45;
                    }
                    else
                    {
                      v45 = 0;
                    }
                  }
                  v119 = "VTTCue";
                  v120 = 7;
                  v121 = "setCueSettings";
                  v122 = v45;
                  if (*(_BYTE *)(v46 + 12))
                    this = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogMedia, 1u, (WTF::Logger::LogSiteIdentifier *)&v119, "Invalid vertical");
                  goto LABEL_254;
                }
LABEL_146:
                v33 = 2;
LABEL_147:
                *(_BYTE *)(v12 + 216) = v33;
                goto LABEL_254;
              }
            }
            else
            {
              this = (uint64_t)&dword_1ECE7BB90;
              dword_1ECE7BB90 += 2;
              qword_1EE337D18 = (uint64_t)&dword_1ECE7BB90;
              byte_1EE337CE4 = 1;
            }
            if (v32 < *(unsigned int *)(this + 4))
              goto LABEL_157;
            goto LABEL_144;
          }
        }
        else
        {
          v31 = &_MergedGlobals_41;
          _MergedGlobals_41 += 2;
          qword_1EE337D10 = (uint64_t)&_MergedGlobals_41;
          byte_1EE337CE3 = 1;
          v32 = ((char *)v26 - (char *)v9) >> (v118 == 0);
        }
        if (v32 < v31[1])
          goto LABEL_141;
        goto LABEL_95;
      case 2:
        *(float *)v114 = 0.0;
        v113 = 0;
        this = WebCore::VTTScanner::scanFloat((WebCore::VTTScanner *)&v115, (float *)v114, &v113);
        if (!(_DWORD)this)
          goto LABEL_246;
        v37 = v115;
        if (v115 == v116)
        {
          v43 = 0;
        }
        else
        {
          if (v118)
            v38 = *v115;
          else
            v38 = *(unsigned __int16 *)v115;
          if (v118)
            v58 = v115 + 1;
          else
            v58 = v115 + 2;
          if (v38 == 37)
            v37 = v58;
          v43 = v38 == 37;
        }
        if (v37 == (unsigned __int8 *)v26)
          goto LABEL_232;
        if (v37 == v116)
          goto LABEL_246;
        v59 = v118 ? *v37 : *(unsigned __int16 *)v37;
        if (v59 != 44)
          goto LABEL_246;
        if (v118)
          v68 = v37 + 1;
        else
          v68 = v37 + 2;
        v115 = v68;
        if ((byte_1EE337CE5 & 1) != 0)
        {
          v69 = (int *)qword_1EE337D20;
          if (!qword_1EE337D20)
          {
            v70 = 0;
            v71 = 0;
            goto LABEL_231;
          }
        }
        else
        {
          dword_1ECE7BBB0 += 2;
          qword_1EE337D20 = (uint64_t)&dword_1ECE7BBB0;
          byte_1EE337CE5 = 1;
          v69 = &dword_1ECE7BBB0;
        }
        v70 = (int8x16_t *)*((_QWORD *)v69 + 1);
        v71 = v69[1];
LABEL_231:
        this = WebCore::VTTScanner::scan((uint64_t)&v115, v70, v71);
        if ((this & 1) != 0)
        {
LABEL_232:
          v72 = 0;
          goto LABEL_233;
        }
        if ((byte_1EE337CE6 & 1) != 0)
        {
          v86 = (int *)qword_1EE337D28;
          if (!qword_1EE337D28)
          {
            v87 = 0;
            v88 = 0;
            goto LABEL_267;
          }
        }
        else
        {
          dword_1ECE7BBD0 += 2;
          qword_1EE337D28 = (uint64_t)&dword_1ECE7BBD0;
          byte_1EE337CE6 = 1;
          v86 = &dword_1ECE7BBD0;
        }
        v87 = (int8x16_t *)*((_QWORD *)v86 + 1);
        v88 = v86[1];
LABEL_267:
        this = WebCore::VTTScanner::scan((uint64_t)&v115, v87, v88);
        if ((this & 1) != 0)
        {
          v72 = 1;
          goto LABEL_233;
        }
        if ((byte_1EE337CE7 & 1) != 0)
        {
          v90 = (int *)qword_1EE337D30;
          if (!qword_1EE337D30)
          {
            v91 = 0;
            v92 = 0;
            goto LABEL_278;
          }
        }
        else
        {
          dword_1ECE7BBF0 += 2;
          qword_1EE337D30 = (uint64_t)&dword_1ECE7BBF0;
          byte_1EE337CE7 = 1;
          v90 = &dword_1ECE7BBF0;
        }
        v91 = (int8x16_t *)*((_QWORD *)v90 + 1);
        v92 = v90[1];
LABEL_278:
        this = WebCore::VTTScanner::scan((uint64_t)&v115, v91, v92);
        if ((this & 1) == 0)
        {
          v93 = *(_QWORD *)(v12 + 424);
          v94 = *(_QWORD *)(v12 + 432);
          if (!v94)
          {
            v95 = *(_QWORD *)(v12 + 104);
            if (v95 && (v96 = *(_QWORD *)(v95 + 8)) != 0)
            {
              v97 = *(_QWORD *)(v96 - 24);
              this = WTF::cryptographicallyRandomNumber<unsigned long long>();
              v94 = v97 & 0xFFFFFFFFFFFF0000 | (unsigned __int16)this;
              *(_QWORD *)(v12 + 432) = v94;
            }
            else
            {
              v94 = 0;
            }
          }
          v119 = "VTTCue";
          v120 = 7;
          v121 = "setCueSettings";
          v122 = v94;
          if (*(_BYTE *)(v93 + 12))
            this = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [31]>((uint64_t)&WebCore::LogMedia, 1u, (WTF::Logger::LogSiteIdentifier *)&v119, "Invalid line setting alignment");
          goto LABEL_246;
        }
        v72 = 2;
LABEL_233:
        if (!v113 || !v43)
        {
          v74 = *(float *)v114;
          if (v43)
          {
            if (*(float *)v114 >= 0.0 && *(float *)v114 <= 100.0)
            {
              v75 = *(_BYTE *)(v12 + 357) & 0xFE;
LABEL_272:
              *(_BYTE *)(v12 + 357) = v75;
              if (!*(_BYTE *)(v12 + 168))
                *(_BYTE *)(v12 + 168) = 1;
              *(double *)(v12 + 160) = v74;
              *(_BYTE *)(v12 + 359) = v72;
              goto LABEL_254;
            }
          }
          else if ((float)(*(float *)v114 - (float)(int)*(float *)v114) == 0.0)
          {
            v75 = *(_BYTE *)(v12 + 357) | 1;
            goto LABEL_272;
          }
        }
LABEL_246:
        v77 = *(_QWORD *)(v12 + 424);
        v76 = *(_QWORD *)(v12 + 432);
        if (!v76)
        {
          v78 = *(_QWORD *)(v12 + 104);
          if (v78 && (v79 = *(_QWORD *)(v78 + 8)) != 0)
          {
            v80 = *(_QWORD *)(v79 - 24);
            this = WTF::cryptographicallyRandomNumber<unsigned long long>();
            v76 = v80 & 0xFFFFFFFFFFFF0000 | (unsigned __int16)this;
            *(_QWORD *)(v12 + 432) = v76;
          }
          else
          {
            v76 = 0;
          }
        }
        v119 = "VTTCue";
        v120 = 7;
        v121 = "setCueSettings";
        v122 = v76;
        if (*(_BYTE *)(v77 + 12))
        {
          v66 = "Invalid line";
          goto LABEL_253;
        }
        goto LABEL_254;
      case 3:
        LODWORD(v119) = 0;
        v114[0] = 0;
        this = WebCore::VTTScanner::scanFloat((WebCore::VTTScanner *)&v115, (float *)&v119, v114);
        if (!(_DWORD)this
          || v115 == v116
          || (!v118 ? (v36 = *(unsigned __int16 *)v115) : (v36 = *v115),
              v36 != 37
           || (v118 ? (v50 = v115 + 1) : (v50 = v115 + 2), v114[0] || (v51 = *(float *)&v119, *(float *)&v119 > 100.0))))
        {
          v54 = *(_QWORD *)(v12 + 424);
          v53 = *(_QWORD *)(v12 + 432);
          if (!v53)
          {
            v55 = *(_QWORD *)(v12 + 104);
            if (v55 && (v56 = *(_QWORD *)(v55 + 8)) != 0)
            {
              v57 = *(_QWORD *)(v56 - 24);
              this = WTF::cryptographicallyRandomNumber<unsigned long long>();
              v53 = v57 & 0xFFFFFFFFFFFF0000 | (unsigned __int16)this;
              *(_QWORD *)(v12 + 432) = v53;
            }
            else
            {
              v53 = 0;
            }
          }
          v119 = "VTTCue";
          v120 = 7;
          v121 = "operator()";
          v122 = v53;
          if (*(_BYTE *)(v54 + 12))
            this = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [28]>((uint64_t)&WebCore::LogMedia, 1u, (WTF::Logger::LogSiteIdentifier *)&v119, "Invalid position percentage");
          goto LABEL_254;
        }
        if (v50 == (unsigned __int8 *)v26)
        {
          v89 = 3;
LABEL_304:
          if (!*(_BYTE *)(v12 + 200))
            *(_BYTE *)(v12 + 200) = 1;
          *(double *)(v12 + 192) = v51;
          *(_BYTE *)(v12 + 358) = v89;
          goto LABEL_254;
        }
        if (v50 == v116)
          goto LABEL_254;
        v52 = v118 ? v115[1] : *((unsigned __int16 *)v115 + 1);
        if (v52 != 44)
          goto LABEL_254;
        if (v118)
          v98 = v50 + 1;
        else
          v98 = v50 + 2;
        v115 = v98;
        if ((byte_1EE337CE8 & 1) != 0)
        {
          v99 = (int *)qword_1EE337D38;
          if (!qword_1EE337D38)
          {
            v100 = 0;
            v101 = 0;
            goto LABEL_292;
          }
        }
        else
        {
          dword_1ECE7BC10 += 2;
          qword_1EE337D38 = (uint64_t)&dword_1ECE7BC10;
          byte_1EE337CE8 = 1;
          v99 = &dword_1ECE7BC10;
        }
        v100 = (int8x16_t *)*((_QWORD *)v99 + 1);
        v101 = v99[1];
LABEL_292:
        this = WebCore::VTTScanner::scan((uint64_t)&v115, v100, v101);
        if ((this & 1) != 0)
        {
          v89 = 0;
          goto LABEL_304;
        }
        if ((byte_1EE337CE6 & 1) != 0)
        {
          v102 = (int *)qword_1EE337D28;
          if (!qword_1EE337D28)
          {
            v103 = 0;
            v104 = 0;
            goto LABEL_297;
          }
        }
        else
        {
          dword_1ECE7BBD0 += 2;
          qword_1EE337D28 = (uint64_t)&dword_1ECE7BBD0;
          byte_1EE337CE6 = 1;
          v102 = &dword_1ECE7BBD0;
        }
        v103 = (int8x16_t *)*((_QWORD *)v102 + 1);
        v104 = v102[1];
LABEL_297:
        this = WebCore::VTTScanner::scan((uint64_t)&v115, v103, v104);
        if ((this & 1) != 0)
        {
          v89 = 1;
          goto LABEL_304;
        }
        if ((byte_1EE337CE9 & 1) != 0)
        {
          v105 = (int *)qword_1EE337D40;
          if (!qword_1EE337D40)
          {
            v106 = 0;
            v107 = 0;
            goto LABEL_302;
          }
        }
        else
        {
          dword_1ECE7BC30 += 2;
          qword_1EE337D40 = (uint64_t)&dword_1ECE7BC30;
          byte_1EE337CE9 = 1;
          v105 = &dword_1ECE7BC30;
        }
        v106 = (int8x16_t *)*((_QWORD *)v105 + 1);
        v107 = v105[1];
LABEL_302:
        this = WebCore::VTTScanner::scan((uint64_t)&v115, v106, v107);
        if ((this & 1) != 0)
        {
          v89 = 2;
          goto LABEL_304;
        }
        v109 = *(_QWORD *)(v12 + 424);
        v108 = *(_QWORD *)(v12 + 432);
        if (!v108)
        {
          v110 = *(_QWORD *)(v12 + 104);
          if (v110 && (v111 = *(_QWORD *)(v110 + 8)) != 0)
          {
            v112 = *(_QWORD *)(v111 - 24);
            this = WTF::cryptographicallyRandomNumber<unsigned long long>();
            v108 = v112 & 0xFFFFFFFFFFFF0000 | (unsigned __int16)this;
            *(_QWORD *)(v12 + 432) = v108;
          }
          else
          {
            v108 = 0;
          }
        }
        v119 = "VTTCue";
        v120 = 7;
        v121 = "operator()";
        v122 = v108;
        if (*(_BYTE *)(v109 + 12))
          this = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [35]>((uint64_t)&WebCore::LogMedia, 1u, (WTF::Logger::LogSiteIdentifier *)&v119, "Invalid position setting alignment");
        goto LABEL_254;
      case 4:
        LODWORD(v119) = 0;
        v114[0] = 0;
        this = WebCore::VTTScanner::scanFloat((WebCore::VTTScanner *)&v115, (float *)&v119, v114);
        if ((_DWORD)this
          && v115 != v116
          && (!v118 ? (v39 = *(unsigned __int16 *)v115) : (v39 = *v115),
              v39 == 37
           && (v118 ? (v60 = v115 + 1) : (v60 = v115 + 2),
               (v115 = v60, !v114[0]) && *(float *)&v119 <= 100.0 && v60 == (unsigned __int8 *)v26)))
        {
          *(double *)(v12 + 208) = *(float *)&v119;
        }
        else
        {
          v62 = *(_QWORD *)(v12 + 424);
          v61 = *(_QWORD *)(v12 + 432);
          if (!v61)
          {
            v63 = *(_QWORD *)(v12 + 104);
            if (v63 && (v64 = *(_QWORD *)(v63 + 8)) != 0)
            {
              v65 = *(_QWORD *)(v64 - 24);
              this = WTF::cryptographicallyRandomNumber<unsigned long long>();
              v61 = v65 & 0xFFFFFFFFFFFF0000 | (unsigned __int16)this;
              *(_QWORD *)(v12 + 432) = v61;
            }
            else
            {
              v61 = 0;
            }
          }
          v119 = "VTTCue";
          v120 = 7;
          v121 = "setCueSettings";
          v122 = v61;
          if (*(_BYTE *)(v62 + 12))
          {
            v66 = "Invalid size";
LABEL_253:
            this = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [13]>((WTF::Logger::LogSiteIdentifier *)&v119, v66);
          }
        }
        goto LABEL_254;
      case 5:
        if ((byte_1EE337CE5 & 1) != 0)
        {
          v34 = (int *)qword_1EE337D20;
          v35 = ((char *)v26 - (char *)v9) >> (v118 == 0);
          if (!qword_1EE337D20)
            goto LABEL_101;
        }
        else
        {
          v34 = &dword_1ECE7BBB0;
          dword_1ECE7BBB0 += 2;
          qword_1EE337D20 = (uint64_t)&dword_1ECE7BBB0;
          byte_1EE337CE5 = 1;
          v35 = ((char *)v26 - (char *)v9) >> (v118 == 0);
        }
        if (v35 < v34[1])
          goto LABEL_134;
LABEL_101:
        if (v118)
        {
          this = MEMORY[0x19AEA53F4]();
          if ((this & 1) != 0)
            goto LABEL_103;
        }
        else
        {
          this = MEMORY[0x19AEA53E8]();
          if ((_DWORD)this)
          {
LABEL_103:
            v115 = (unsigned __int8 *)v26;
            *(_BYTE *)(v12 + 217) = 0;
            goto LABEL_254;
          }
        }
LABEL_134:
        if ((byte_1EE337CE6 & 1) != 0)
        {
          v41 = (int *)qword_1EE337D28;
          if (!qword_1EE337D28)
            goto LABEL_137;
        }
        else
        {
          v41 = &dword_1ECE7BBD0;
          dword_1ECE7BBD0 += 2;
          qword_1EE337D28 = (uint64_t)&dword_1ECE7BBD0;
          byte_1EE337CE6 = 1;
        }
        if (v35 < v41[1])
          goto LABEL_150;
LABEL_137:
        if (v118)
        {
          this = MEMORY[0x19AEA53F4]();
          if ((this & 1) != 0)
            goto LABEL_139;
        }
        else
        {
          this = MEMORY[0x19AEA53E8]();
          if ((_DWORD)this)
          {
LABEL_139:
            v115 = (unsigned __int8 *)v26;
            v42 = 1;
            goto LABEL_215;
          }
        }
LABEL_150:
        if ((byte_1EE337CE7 & 1) != 0)
        {
          v44 = (int *)qword_1EE337D30;
          if (!qword_1EE337D30)
            goto LABEL_153;
        }
        else
        {
          v44 = &dword_1ECE7BBF0;
          dword_1ECE7BBF0 += 2;
          qword_1EE337D30 = (uint64_t)&dword_1ECE7BBF0;
          byte_1EE337CE7 = 1;
        }
        if (v35 < v44[1])
          goto LABEL_209;
LABEL_153:
        if (v118)
        {
          this = MEMORY[0x19AEA53F4]();
          if ((this & 1) != 0)
            goto LABEL_155;
        }
        else
        {
          this = MEMORY[0x19AEA53E8]();
          if ((_DWORD)this)
          {
LABEL_155:
            v115 = (unsigned __int8 *)v26;
            v42 = 2;
            goto LABEL_215;
          }
        }
LABEL_209:
        if ((byte_1EE337CEA & 1) != 0)
        {
          v67 = (int *)qword_1EE337D48;
          if (!qword_1EE337D48)
            goto LABEL_212;
        }
        else
        {
          v67 = &dword_1ECE7BC50;
          dword_1ECE7BC50 += 2;
          qword_1EE337D48 = (uint64_t)&dword_1ECE7BC50;
          byte_1EE337CEA = 1;
        }
        if (v35 < v67[1])
          goto LABEL_217;
LABEL_212:
        if (!v118)
        {
          this = MEMORY[0x19AEA53E8]();
          if (!(_DWORD)this)
            goto LABEL_217;
LABEL_214:
          v115 = (unsigned __int8 *)v26;
          v42 = 3;
LABEL_215:
          *(_BYTE *)(v12 + 217) = v42;
          goto LABEL_254;
        }
        this = MEMORY[0x19AEA53F4]();
        if ((this & 1) != 0)
          goto LABEL_214;
LABEL_217:
        if ((byte_1EE337CEB & 1) != 0)
        {
          this = qword_1EE337D50;
          if (!qword_1EE337D50)
            goto LABEL_220;
        }
        else
        {
          this = (uint64_t)&dword_1ECE7BC70;
          dword_1ECE7BC70 += 2;
          qword_1EE337D50 = (uint64_t)&dword_1ECE7BC70;
          byte_1EE337CEB = 1;
        }
        if (v35 >= *(unsigned int *)(this + 4))
        {
LABEL_220:
          if (v118)
          {
            this = MEMORY[0x19AEA53F4]();
            if ((this & 1) != 0)
              goto LABEL_222;
          }
          else
          {
            this = MEMORY[0x19AEA53E8]();
            if ((_DWORD)this)
            {
LABEL_222:
              v115 = (unsigned __int8 *)v26;
              *(_BYTE *)(v12 + 217) = 4;
              goto LABEL_254;
            }
          }
        }
        v82 = *(_QWORD *)(v12 + 424);
        v81 = *(_QWORD *)(v12 + 432);
        if (!v81)
        {
          v83 = *(_QWORD *)(v12 + 104);
          if (v83 && (v84 = *(_QWORD *)(v83 + 8)) != 0)
          {
            v85 = *(_QWORD *)(v84 - 24);
            this = WTF::cryptographicallyRandomNumber<unsigned long long>();
            v81 = v85 & 0xFFFFFFFFFFFF0000 | (unsigned __int16)this;
            *(_QWORD *)(v12 + 432) = v81;
          }
          else
          {
            v81 = 0;
          }
        }
        v119 = "VTTCue";
        v120 = 7;
        v121 = "setCueSettings";
        v122 = v81;
        if (*(_BYTE *)(v82 + 12))
          this = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [14]>((uint64_t)&WebCore::LogMedia, 1u, (WTF::Logger::LogSiteIdentifier *)&v119, "Invalid align");
LABEL_254:
        v115 = (unsigned __int8 *)v26;
        v11 = v116;
        v9 = (unsigned __int8 *)v26;
        if (v26 != (unsigned __int16 *)v116)
          continue;
LABEL_336:
        v6 = v117;
        if (v117)
        {
          v8 = *(_DWORD *)v117 - 2;
          goto LABEL_338;
        }
        return this;
      case 6:
        if (v118)
          WTF::String::String();
        else
          WTF::String::String();
        v115 = (unsigned __int8 *)v26;
        this = *(_QWORD *)(v12 + 232);
        *(_QWORD *)(v12 + 232) = v119;
        if (this)
        {
          if (*(_DWORD *)this == 2)
            this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v40);
          else
            *(_DWORD *)this -= 2;
        }
        goto LABEL_254;
      default:
        goto LABEL_254;
    }
  }
}

void WebCore::VTTCue::~VTTCue(WebCore::VTTCue *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WebCore::SpeechSynthesisUtterance *v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WebCore::VTTRegion *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  bmalloc::api *v17;
  void *v18;
  WTF *v19;
  void *v20;

  *(_QWORD *)this = off_1E33ED130;
  *((_QWORD *)this + 4) = &unk_1E33ED280;
  *((_QWORD *)this + 17) = &unk_1E33ED2D8;
  v3 = (unsigned int *)*((_QWORD *)this + 53);
  *((_QWORD *)this + 53) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = (WebCore::SpeechSynthesisUtterance *)*((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v7)
  {
    if (*((_DWORD *)v7 + 8) == 1)
    {
      WebCore::SpeechSynthesisUtterance::~SpeechSynthesisUtterance(v7, a2);
      bmalloc::api::isoDeallocate(v17, v18);
    }
    else
    {
      --*((_DWORD *)v7 + 8);
    }
  }
  v8 = (_DWORD *)*((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v8)
  {
    if (v8[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 64))(v8);
    else
      --v8[6];
  }
  v9 = *((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v9)
  {
    if (*(_DWORD *)(v9 + 24) == 2)
    {
      if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v9, a2);
    }
    else
    {
      *(_DWORD *)(v9 + 24) -= 2;
    }
  }
  v10 = *((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v10)
  {
    if (*(_DWORD *)(v10 + 24) == 2)
    {
      if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v10, a2);
    }
    else
    {
      *(_DWORD *)(v10 + 24) -= 2;
    }
  }
  v11 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v11)
  {
    if (*(_DWORD *)(v11 + 24) == 2)
    {
      if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v11, a2);
    }
    else
    {
      *(_DWORD *)(v11 + 24) -= 2;
    }
  }
  v12 = *((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v12)
  {
    if (*(_DWORD *)(v12 + 24) == 2)
    {
      if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v12, a2);
    }
    else
    {
      *(_DWORD *)(v12 + 24) -= 2;
    }
  }
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = (WebCore::VTTRegion *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v14)
  {
    if (*((_DWORD *)v14 + 4) == 1)
    {
      WebCore::VTTRegion::~VTTRegion(v14);
      WTF::fastFree(v19, v20);
    }
    else
    {
      --*((_DWORD *)v14 + 4);
    }
  }
  v15 = (WTF::StringImpl *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = (WTF::StringImpl *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v16 -= 2;
  }
  WebCore::TextTrackCue::~TextTrackCue(this, a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::VTTCue::~VTTCue(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void `non-virtual thunk to'WebCore::VTTCue::~VTTCue(WebCore::VTTCue *this, void *a2)
{
  WebCore::VTTCue::~VTTCue((WebCore::VTTCue *)((char *)this - 32), a2);
}

{
  WebCore::VTTCue::~VTTCue((WebCore::VTTCue *)((char *)this - 136), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::VTTCue::~VTTCue((WebCore::VTTCue *)((char *)this - 32), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::VTTCue::~VTTCue((WebCore::VTTCue *)((char *)this - 136), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

WTF::StringImpl *WebCore::VTTCue::createDisplayTree@<X0>(WTF::StringImpl *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = *((_QWORD *)this + 5);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      if (*(_BYTE *)(v4 + 178))
      {
        __break(0xC471u);
        JUMPOUT(0x195D94B40);
      }
      v5 = (uint64_t)this;
      v6 = bmalloc::api::isoAllocate();
      v7 = (WTF::StringImpl *)v6;
      *(_OWORD *)(v6 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v6 + 24) = 0x141C00000002;
      *(_QWORD *)(v6 + 32) = 0;
      *(_QWORD *)(v6 + 40) = v4 - 192;
      *(_OWORD *)(v6 + 48) = 0u;
      *(_OWORD *)(v6 + 64) = 0u;
      ++*(_DWORD *)(v4 + 3036);
      *(_QWORD *)(v6 + 80) = 0;
      *(_QWORD *)(v6 + 88) = 0;
      v8 = WebCore::HTMLNames::divTag;
      if (WebCore::HTMLNames::divTag)
        ++*(_DWORD *)WebCore::HTMLNames::divTag;
      *(_QWORD *)(v6 + 96) = v8;
      *(_QWORD *)(v6 + 104) = 0;
      *(_QWORD *)v6 = off_1E33EC5C8;
      v9 = (unsigned int *)WTF::WeakPtr<WebCore::Clipboard,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::Clipboard>(v5);
      if (v9)
      {
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 + 1, v9));
      }
      *(_QWORD *)v7 = off_1E33ED5B8;
      *((_QWORD *)v7 + 14) = v9;
      *((_QWORD *)v7 + 15) = 0;
      {
        WTF::AtomStringImpl::add();
        WebCore::UserAgentParts::webkitMediaTextTrackDisplay(void)::webkitMediaTextTrackDisplay = v17;
      }
      v11 = *((_QWORD *)v7 + 13);
      if (!v11)
        goto LABEL_23;
      v12 = *(_DWORD *)(v11 + 4);
      if ((v12 & 1) != 0)
      {
        v13 = *(uint64_t **)(v11 + 40);
        v14 = *(_DWORD *)(v11 + 52);
        if (!v14)
        {
LABEL_23:
          v15 = 0xFFFFFFFFLL;
LABEL_24:
          this = WebCore::Element::setAttributeInternal(v7, v15, (WebCore::TreeScope *)&WebCore::HTMLNames::useragentpartAttr, (WTF::StringImpl **)&WebCore::UserAgentParts::webkitMediaTextTrackDisplay(void)::webkitMediaTextTrackDisplay, 0);
          goto LABEL_25;
        }
      }
      else
      {
        v13 = (uint64_t *)(v11 + 32);
        v14 = v12 >> 5;
        if (!v14)
          goto LABEL_23;
      }
      v15 = 0;
      while (1)
      {
        v16 = *v13;
        if (*v13 == WebCore::HTMLNames::useragentpartAttr
          || *(_QWORD *)(v16 + 24) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 24)
          && *(_QWORD *)(v16 + 32) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 32))
        {
          goto LABEL_24;
        }
        ++v15;
        v13 += 2;
        if (v14 == v15)
          goto LABEL_23;
      }
    }
  }
  v7 = 0;
LABEL_25:
  *a2 = v7;
  return this;
}

uint64_t WebCore::VTTCue::didChange(uint64_t this, int a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v2 = this;
  v3 = *(_DWORD *)(this + 96) - 1;
  *(_DWORD *)(this + 96) = v3;
  if (!v3)
  {
    *(_BYTE *)(this + 135) = 1;
    v4 = *(_QWORD *)(this + 104);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
        this = WebCore::TextTrack::cueDidChange((WebCore::TextTrack *)(v5 - 120), (WebCore::TextTrackCue *)this, a2);
    }
  }
  *(_BYTE *)(v2 + 357) |= 2u;
  return this;
}

uint64_t WebCore::VTTCue::setVertical(uint64_t result, int a2)
{
  char v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t **v13;
  _QWORD *v14;
  _QWORD *v15;

  if (*(unsigned __int8 *)(result + 216) != a2)
  {
    v2 = a2;
    v3 = result;
    v4 = *(_DWORD *)(result + 96);
    *(_DWORD *)(result + 96) = v4 + 1;
    if (v4 < 1)
    {
      v5 = *(_QWORD *)(result + 104);
      if (v5)
      {
        v6 = *(_QWORD *)(v5 + 8);
        if (v6)
        {
          v7 = v6 - 120;
          v8 = (uint64_t **)(v6 + 80);
          v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v9 = off_1E33EBDF8;
          v9[1] = v7;
          v9[2] = v3;
          v15 = v9;
          WTF::WeakHashSet<WebCore::TextTrackClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v8, &v15);
          result = (uint64_t)v15;
          v15 = 0;
          if (result)
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
          v4 = *(_DWORD *)(v3 + 96) - 1;
        }
      }
      *(_BYTE *)(v3 + 216) = v2;
      *(_DWORD *)(v3 + 96) = v4;
      if (!v4)
      {
        *(_BYTE *)(v3 + 135) = 1;
        v10 = *(_QWORD *)(v3 + 104);
        if (v10)
        {
          v11 = *(_QWORD *)(v10 + 8);
          if (v11)
          {
            v12 = v11 - 120;
            v13 = (uint64_t **)(v11 + 80);
            v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
            *v14 = off_1E33EBE20;
            v14[1] = v12;
            v14[2] = v3;
            v15 = v14;
            WTF::WeakHashSet<WebCore::TextTrackClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v13, &v15);
            result = (uint64_t)v15;
            v15 = 0;
            if (result)
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
          }
        }
      }
    }
    else
    {
      *(_BYTE *)(result + 216) = a2;
      *(_DWORD *)(result + 96) = v4;
    }
    *(_BYTE *)(v3 + 357) |= 2u;
  }
  return result;
}

uint64_t WebCore::VTTCue::setSnapToLines(uint64_t this, int a2)
{
  char v2;
  char v3;
  uint64_t v4;
  int v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t **v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t **v15;
  _QWORD *v16;
  uint64_t v17;

  v2 = *(_BYTE *)(this + 357);
  if (((((v2 & 1) == 0) ^ a2) & 1) == 0)
  {
    v3 = a2;
    v4 = this;
    v5 = *(_DWORD *)(this + 96);
    *(_DWORD *)(this + 96) = v5 + 1;
    if (v5 < 1)
    {
      v7 = *(_QWORD *)(this + 104);
      if (v7)
      {
        v8 = *(_QWORD *)(v7 + 8);
        if (v8)
        {
          v9 = v8 - 120;
          v10 = (uint64_t **)(v8 + 80);
          v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v11 = off_1E33EBDF8;
          v11[1] = v9;
          v11[2] = v4;
          v17 = (uint64_t)v11;
          WTF::WeakHashSet<WebCore::TextTrackClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v10, &v17);
          this = v17;
          v17 = 0;
          if (this)
            this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
          v2 = *(_BYTE *)(v4 + 357);
          v5 = *(_DWORD *)(v4 + 96) - 1;
        }
      }
      v6 = v2 & 0xFE | v3;
      *(_BYTE *)(v4 + 357) = v6;
      *(_DWORD *)(v4 + 96) = v5;
      if (!v5)
      {
        *(_BYTE *)(v4 + 135) = 1;
        v12 = *(_QWORD *)(v4 + 104);
        if (v12)
        {
          v13 = *(_QWORD *)(v12 + 8);
          if (v13)
          {
            v14 = v13 - 120;
            v15 = (uint64_t **)(v13 + 80);
            v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
            *v16 = off_1E33EBE20;
            v16[1] = v14;
            v16[2] = v4;
            v17 = (uint64_t)v16;
            WTF::WeakHashSet<WebCore::TextTrackClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v15, &v17);
            this = v17;
            v17 = 0;
            if (this)
              this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
            v6 = *(_BYTE *)(v4 + 357);
          }
        }
      }
    }
    else
    {
      v6 = v2 & 0xFE | a2;
      *(_DWORD *)(this + 96) = v5;
    }
    *(_BYTE *)(v4 + 357) = v6 | 2;
  }
  return this;
}

uint64_t WebCore::VTTCue::setLine(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int v3;
  char v4;
  double v5;
  char v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t **v14;
  _QWORD *v15;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t **v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;

  v2 = result;
  v3 = *(_DWORD *)(a2 + 8);
  if (!v3)
  {
    v5 = *(double *)a2;
    if (*(_BYTE *)(result + 168) && *(double *)(result + 160) == v5)
      return result;
    v6 = 0;
    v4 = 1;
LABEL_8:
    v7 = *(_DWORD *)(result + 96);
    *(_DWORD *)(result + 96) = v7 + 1;
    if (v7 <= 0)
    {
      v11 = *(_QWORD *)(result + 104);
      if (v11)
      {
        v12 = *(_QWORD *)(v11 + 8);
        if (v12)
        {
          v13 = v12 - 120;
          v14 = (uint64_t **)(v12 + 80);
          v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v15 = off_1E33EBDF8;
          v15[1] = v13;
          v15[2] = v2;
          v25 = v15;
          WTF::WeakHashSet<WebCore::TextTrackClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v14, &v25);
          result = (uint64_t)v25;
          v25 = 0;
          if (result)
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        }
      }
    }
    *(double *)(v2 + 160) = v5;
    *(_BYTE *)(v2 + 168) = v4;
    if ((*(_BYTE *)(v2 + 357) & 1) != 0)
    {
      if ((v6 & 1) != 0)
      {
        v9 = *(_QWORD *)(v2 + 104);
        if (v9 && (v10 = *(_QWORD *)(v9 + 8)) != 0)
        {
          if (*(_BYTE *)(v10 + 132))
          {
            result = *(unsigned int *)(v10 + 128);
          }
          else
          {
            v23 = *(_QWORD *)(v10 - 16);
            if (v23)
            {
              result = *(_QWORD *)(v23 + 8);
              if (result)
              {
                if (*(_DWORD *)(result + 72) != 1)
                {
                  __break(0xC471u);
                  JUMPOUT(0x195D950A0);
                }
                result = WebCore::TextTrackList::getTrackIndexRelativeToRenderedTracks((WebCore::TextTrackList *)result, (WebCore::TextTrack *)(v10 - 120));
                *(_DWORD *)(v10 + 128) = result;
                *(_BYTE *)(v10 + 132) = 1;
              }
            }
            else
            {
              result = 0;
            }
          }
          v8 = ~(_DWORD)result;
        }
        else
        {
          v8 = -1;
        }
        goto LABEL_29;
      }
      if (v5 < 0.0 && v5 > 100.0)
        goto LABEL_11;
    }
    else if ((v6 & 1) != 0)
    {
LABEL_11:
      v8 = 100;
LABEL_29:
      if (!*(_BYTE *)(v2 + 184))
        *(_BYTE *)(v2 + 184) = 1;
      *(double *)(v2 + 176) = (double)v8;
      v17 = *(_DWORD *)(v2 + 96) - 1;
      *(_DWORD *)(v2 + 96) = v17;
      if (!v17)
      {
        *(_BYTE *)(v2 + 135) = 1;
        v18 = *(_QWORD *)(v2 + 104);
        if (v18)
        {
          v19 = *(_QWORD *)(v18 + 8);
          if (v19)
          {
            v20 = v19 - 120;
            v21 = (uint64_t **)(v19 + 80);
            v22 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
            *v22 = off_1E33EBE20;
            v22[1] = v20;
            v22[2] = v2;
            v25 = v22;
            WTF::WeakHashSet<WebCore::TextTrackClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v21, &v25);
            result = (uint64_t)v25;
            v25 = 0;
            if (result)
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
          }
        }
      }
      *(_BYTE *)(v2 + 357) |= 2u;
      return result;
    }
    v8 = (int)v5;
    goto LABEL_29;
  }
  if (v3 != 1)
  {
    v24 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::VTTCue::setLineAlign(v24);
  }
  if (*(_BYTE *)(result + 168))
  {
    v4 = 0;
    v5 = 0.0;
    v6 = 1;
    goto LABEL_8;
  }
  return result;
}

uint64_t WebCore::VTTCue::setLineAlign(uint64_t result, int a2)
{
  char v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t **v13;
  _QWORD *v14;
  _QWORD *v15;

  if (*(unsigned __int8 *)(result + 359) != a2)
  {
    v2 = a2;
    v3 = result;
    v4 = *(_DWORD *)(result + 96);
    *(_DWORD *)(result + 96) = v4 + 1;
    if (v4 < 1)
    {
      v5 = *(_QWORD *)(result + 104);
      if (v5)
      {
        v6 = *(_QWORD *)(v5 + 8);
        if (v6)
        {
          v7 = v6 - 120;
          v8 = (uint64_t **)(v6 + 80);
          v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v9 = off_1E33EBDF8;
          v9[1] = v7;
          v9[2] = v3;
          v15 = v9;
          WTF::WeakHashSet<WebCore::TextTrackClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v8, &v15);
          result = (uint64_t)v15;
          v15 = 0;
          if (result)
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
          v4 = *(_DWORD *)(v3 + 96) - 1;
        }
      }
      *(_BYTE *)(v3 + 359) = v2;
      *(_DWORD *)(v3 + 96) = v4;
      if (!v4)
      {
        *(_BYTE *)(v3 + 135) = 1;
        v10 = *(_QWORD *)(v3 + 104);
        if (v10)
        {
          v11 = *(_QWORD *)(v10 + 8);
          if (v11)
          {
            v12 = v11 - 120;
            v13 = (uint64_t **)(v11 + 80);
            v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
            *v14 = off_1E33EBE20;
            v14[1] = v12;
            v14[2] = v3;
            v15 = v14;
            WTF::WeakHashSet<WebCore::TextTrackClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v13, &v15);
            result = (uint64_t)v15;
            v15 = 0;
            if (result)
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
          }
        }
      }
    }
    else
    {
      *(_BYTE *)(result + 359) = a2;
      *(_DWORD *)(result + 96) = v4;
    }
    *(_BYTE *)(v3 + 357) |= 2u;
  }
  return result;
}

uint64_t WebCore::VTTCue::setPosition@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  int v5;
  char v6;
  double v7;
  int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t **v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t **v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  _QWORD *v22;

  v3 = result;
  v5 = *(_DWORD *)(a2 + 8);
  if (!v5)
  {
    v7 = *(double *)a2;
    if (*(double *)a2 < 0.0 || v7 > 100.0)
    {
      *(_BYTE *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 16) = 1;
      return result;
    }
    if (!*(_BYTE *)(result + 200) || *(double *)(result + 192) != v7)
    {
      v6 = 1;
      goto LABEL_5;
    }
LABEL_21:
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    return result;
  }
  if (v5 != 1)
  {
    v20 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::VTTCue::setPositionAlign(v20, v21);
  }
  if (!*(_BYTE *)(result + 200))
    goto LABEL_21;
  v6 = 0;
  v7 = 0.0;
LABEL_5:
  v8 = *(_DWORD *)(result + 96);
  *(_DWORD *)(result + 96) = v8 + 1;
  if (v8 < 1)
  {
    v10 = *(_QWORD *)(result + 104);
    if (v10)
    {
      v11 = *(_QWORD *)(v10 + 8);
      if (v11)
      {
        v12 = v11 - 120;
        v13 = (uint64_t **)(v11 + 80);
        v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v14 = off_1E33EBDF8;
        v14[1] = v12;
        v14[2] = v3;
        v22 = v14;
        WTF::WeakHashSet<WebCore::TextTrackClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v13, &v22);
        result = (uint64_t)v22;
        v22 = 0;
        if (result)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        v8 = *(_DWORD *)(v3 + 96) - 1;
      }
    }
    *(double *)(v3 + 192) = v7;
    *(_BYTE *)(v3 + 200) = v6;
    *(_DWORD *)(v3 + 96) = v8;
    if (!v8)
    {
      *(_BYTE *)(v3 + 135) = 1;
      v15 = *(_QWORD *)(v3 + 104);
      if (v15)
      {
        v16 = *(_QWORD *)(v15 + 8);
        if (v16)
        {
          v17 = v16 - 120;
          v18 = (uint64_t **)(v16 + 80);
          v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v19 = off_1E33EBE20;
          v19[1] = v17;
          v19[2] = v3;
          v22 = v19;
          WTF::WeakHashSet<WebCore::TextTrackClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v18, &v22);
          result = (uint64_t)v22;
          v22 = 0;
          if (result)
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        }
      }
    }
  }
  else
  {
    *(double *)(result + 192) = v7;
    *(_BYTE *)(result + 200) = v6;
    *(_DWORD *)(result + 96) = v8;
  }
  *(_BYTE *)(v3 + 357) |= 2u;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  return result;
}

uint64_t WebCore::VTTCue::setPositionAlign(uint64_t result, int a2)
{
  char v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t **v13;
  _QWORD *v14;
  _QWORD *v15;

  if (*(unsigned __int8 *)(result + 358) != a2)
  {
    v2 = a2;
    v3 = result;
    v4 = *(_DWORD *)(result + 96);
    *(_DWORD *)(result + 96) = v4 + 1;
    if (v4 < 1)
    {
      v5 = *(_QWORD *)(result + 104);
      if (v5)
      {
        v6 = *(_QWORD *)(v5 + 8);
        if (v6)
        {
          v7 = v6 - 120;
          v8 = (uint64_t **)(v6 + 80);
          v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v9 = off_1E33EBDF8;
          v9[1] = v7;
          v9[2] = v3;
          v15 = v9;
          WTF::WeakHashSet<WebCore::TextTrackClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v8, &v15);
          result = (uint64_t)v15;
          v15 = 0;
          if (result)
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
          v4 = *(_DWORD *)(v3 + 96) - 1;
        }
      }
      *(_BYTE *)(v3 + 358) = v2;
      *(_DWORD *)(v3 + 96) = v4;
      if (!v4)
      {
        *(_BYTE *)(v3 + 135) = 1;
        v10 = *(_QWORD *)(v3 + 104);
        if (v10)
        {
          v11 = *(_QWORD *)(v10 + 8);
          if (v11)
          {
            v12 = v11 - 120;
            v13 = (uint64_t **)(v11 + 80);
            v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
            *v14 = off_1E33EBE20;
            v14[1] = v12;
            v14[2] = v3;
            v15 = v14;
            WTF::WeakHashSet<WebCore::TextTrackClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v13, &v15);
            result = (uint64_t)v15;
            v15 = 0;
            if (result)
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
          }
        }
      }
    }
    else
    {
      *(_BYTE *)(result + 358) = a2;
      *(_DWORD *)(result + 96) = v4;
    }
    *(_BYTE *)(v3 + 357) |= 2u;
  }
  return result;
}

uint64_t WebCore::VTTCue::setSize@<X0>(uint64_t this@<X0>, double a2@<D0>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t **v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t **v16;
  _QWORD *v17;
  uint64_t v18;

  if (a2 < 0.0 || a2 > 100.0)
  {
    *(_BYTE *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 16) = 1;
  }
  else
  {
    v6 = this;
    if (*(double *)(this + 208) == a2)
    {
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
    }
    else
    {
      v7 = *(_DWORD *)(this + 96);
      *(_DWORD *)(this + 96) = v7 + 1;
      if (v7 < 1)
      {
        v8 = *(_QWORD *)(this + 104);
        if (v8)
        {
          v9 = *(_QWORD *)(v8 + 8);
          if (v9)
          {
            v10 = v9 - 120;
            v11 = (uint64_t **)(v9 + 80);
            v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
            *v12 = off_1E33EBDF8;
            v12[1] = v10;
            v12[2] = v6;
            v18 = (uint64_t)v12;
            WTF::WeakHashSet<WebCore::TextTrackClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v11, &v18);
            this = v18;
            v18 = 0;
            if (this)
              this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
            v7 = *(_DWORD *)(v6 + 96) - 1;
          }
        }
        *(double *)(v6 + 208) = a2;
        *(_DWORD *)(v6 + 96) = v7;
        if (!v7)
        {
          *(_BYTE *)(v6 + 135) = 1;
          v13 = *(_QWORD *)(v6 + 104);
          if (v13)
          {
            v14 = *(_QWORD *)(v13 + 8);
            if (v14)
            {
              v15 = v14 - 120;
              v16 = (uint64_t **)(v14 + 80);
              v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
              *v17 = off_1E33EBE20;
              v17[1] = v15;
              v17[2] = v6;
              v18 = (uint64_t)v17;
              WTF::WeakHashSet<WebCore::TextTrackClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v16, &v18);
              this = v18;
              v18 = 0;
              if (this)
                this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
            }
          }
        }
      }
      else
      {
        *(double *)(this + 208) = a2;
        *(_DWORD *)(this + 96) = v7;
      }
      *(_BYTE *)(v6 + 357) |= 2u;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = 0;
    }
  }
  return this;
}

uint64_t WebCore::VTTCue::setAlign(uint64_t result, int a2)
{
  char v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t **v13;
  _QWORD *v14;
  _QWORD *v15;

  if (*(unsigned __int8 *)(result + 217) != a2)
  {
    v2 = a2;
    v3 = result;
    v4 = *(_DWORD *)(result + 96);
    *(_DWORD *)(result + 96) = v4 + 1;
    if (v4 < 1)
    {
      v5 = *(_QWORD *)(result + 104);
      if (v5)
      {
        v6 = *(_QWORD *)(v5 + 8);
        if (v6)
        {
          v7 = v6 - 120;
          v8 = (uint64_t **)(v6 + 80);
          v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v9 = off_1E33EBDF8;
          v9[1] = v7;
          v9[2] = v3;
          v15 = v9;
          WTF::WeakHashSet<WebCore::TextTrackClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v8, &v15);
          result = (uint64_t)v15;
          v15 = 0;
          if (result)
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
          v4 = *(_DWORD *)(v3 + 96) - 1;
        }
      }
      *(_BYTE *)(v3 + 217) = v2;
      *(_DWORD *)(v3 + 96) = v4;
      if (!v4)
      {
        *(_BYTE *)(v3 + 135) = 1;
        v10 = *(_QWORD *)(v3 + 104);
        if (v10)
        {
          v11 = *(_QWORD *)(v10 + 8);
          if (v11)
          {
            v12 = v11 - 120;
            v13 = (uint64_t **)(v11 + 80);
            v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
            *v14 = off_1E33EBE20;
            v14[1] = v12;
            v14[2] = v3;
            v15 = v14;
            WTF::WeakHashSet<WebCore::TextTrackClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v13, &v15);
            result = (uint64_t)v15;
            v15 = 0;
            if (result)
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
          }
        }
      }
    }
    else
    {
      *(_BYTE *)(result + 217) = a2;
      *(_DWORD *)(result + 96) = v4;
    }
    *(_BYTE *)(v3 + 357) |= 2u;
  }
  return result;
}

uint64_t WebCore::VTTCue::createWebVTTNodeTree(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  void *v5;
  WebCore::Node *v6;
  int v7;
  void *v8;
  WebCore::Node *v9;
  int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  if (!*(_QWORD *)(this + 240))
  {
    v1 = this;
    v2 = *(_QWORD *)(this + 40);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 8);
      if (v3)
      {
        if (*(_BYTE *)(v3 + 178))
        {
          this = 105;
          __break(0xC471u);
          return this;
        }
        v10 = 0;
        v11 = 0u;
        v12 = 0u;
        v13 = 0u;
        v14 = 0u;
        v15 = v3 - 288;
        WebCore::WebVTTTreeBuilder::buildFromString((WebCore::WebVTTTreeBuilder *)&v10, (unsigned int **)(this + 144), (uint64_t *)&v9);
        WebCore::WebVTTTreeBuilder::~WebVTTTreeBuilder((WebCore::WebVTTTreeBuilder *)&v10, v4);
        v6 = v9;
        v9 = 0;
        this = *(_QWORD *)(v1 + 240);
        *(_QWORD *)(v1 + 240) = v6;
        if (this)
        {
          v7 = *(_DWORD *)(this + 24) - 2;
          if (*(_DWORD *)(this + 24) != 2)
          {
LABEL_7:
            *(_DWORD *)(this + 24) = v7;
            return this;
          }
          if ((*(_WORD *)(this + 30) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef((WebCore::Node *)this, v5);
            this = (uint64_t)v9;
            v9 = 0;
            if (this)
            {
              v7 = *(_DWORD *)(this + 24) - 2;
              if (*(_DWORD *)(this + 24) != 2)
                goto LABEL_7;
              if ((*(_WORD *)(this + 30) & 0x400) == 0)
                return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)this, v8);
            }
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::VTTCue::getCueAsHTML@<X0>(WebCore::VTTCue *this@<X0>, WebCore::ContainerNode **a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WebCore::ContainerNode *v8;
  WebCore::Node *v9;
  WebCore::ContainerNode *v10;

  result = WebCore::VTTCue::createWebVTTNodeTree((uint64_t)this);
  if (*((_QWORD *)this + 30) && (v5 = *((_QWORD *)this + 5)) != 0 && (v6 = *(_QWORD *)(v5 + 8)) != 0)
  {
    if (*(_BYTE *)(v6 + 178))
    {
      result = 105;
      __break(0xC471u);
    }
    else
    {
      WebCore::DocumentFragment::create((WebCore::DocumentFragment *)(v6 - 288), (uint64_t *)&v10);
      v7 = (WTF::StringImpl *)*((_QWORD *)this + 30);
      v8 = v10;
      result = (uint64_t)WebCore::copyWebVTTNodeToDOMTree(v7, v10, v9);
      *a2 = v8;
    }
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

WTF::StringImpl *WebCore::copyWebVTTNodeToDOMTree(WTF::StringImpl *this, WebCore::ContainerNode *a2, WebCore::Node *a3)
{
  WebCore *v3;
  WTF::StringImpl **v5;
  WebCore *v6;
  WebCore::Node *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  _DWORD *v17;
  WTF::StringImpl **v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  WTF::StringImpl **v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  WTF::StringImpl **v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50[8];
  WTF::StringImpl *v51;
  char v52;
  WebCore::Node *v53;
  uint64_t v54;

  v3 = (WebCore *)*((_QWORD *)this + 10);
  if (v3)
  {
    *((_DWORD *)v3 + 6) += 2;
    v5 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
    while (1)
    {
      v6 = v3;
      this = (WTF::StringImpl *)(*(uint64_t (**)(WebCore *, WebCore::ContainerNode *, WebCore::Node *))(*(_QWORD *)v3 + 176))(v3, a2, a3);
      if ((_DWORD)this)
        v7 = v3;
      else
        v7 = 0;
      if (v7)
        *((_DWORD *)v7 + 6) += 2;
      if ((_DWORD)this)
        break;
      this = (WTF::StringImpl *)(*(_QWORD *(**)(WebCore::Node **__return_ptr, WebCore *, _QWORD, _QWORD))(*(_QWORD *)v3 + 136))(&v53, v3, *(_QWORD *)(*((_QWORD *)v3 + 5) + 8), 0);
      v10 = (uint64_t)v53;
LABEL_106:
      if (v7)
      {
        if (*((_DWORD *)v7 + 6) == 2)
        {
          if ((*((_WORD *)v7 + 15) & 0x400) == 0)
            this = (WTF::StringImpl *)WebCore::Node::removedLastRef(v7, a2);
        }
        else
        {
          *((_DWORD *)v7 + 6) -= 2;
        }
      }
      if ((*((_WORD *)a2 + 14) & 4) != 0)
      {
        this = (WTF::StringImpl *)WebCore::ContainerNode::appendChild((uint64_t)a2, (WebCore::Node *)v10, (uint64_t)v50);
        if (v52)
        {
          this = v51;
          v51 = 0;
          if (this)
          {
            if (*(_DWORD *)this == 2)
              this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, a2);
            else
              *(_DWORD *)this -= 2;
          }
        }
      }
      else
      {
        v50[0] = 1;
        v52 = 1;
        v51 = 0;
      }
      if ((*((_WORD *)v6 + 14) & 4) != 0)
      {
        *((_DWORD *)v6 + 6) += 2;
        this = (WTF::StringImpl *)WebCore::copyWebVTTNodeToDOMTree(v6, (WebCore::ContainerNode *)v10, a3);
        if (*((_DWORD *)v6 + 6) == 2)
        {
          if ((*((_WORD *)v6 + 15) & 0x400) == 0)
            this = (WTF::StringImpl *)WebCore::Node::removedLastRef(v6, a2);
        }
        else
        {
          *((_DWORD *)v6 + 6) -= 2;
        }
      }
      if (*(_DWORD *)(v10 + 24) == 2)
      {
        if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
          this = (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)v10, a2);
      }
      else
      {
        *(_DWORD *)(v10 + 24) -= 2;
      }
      v3 = (WebCore *)*((_QWORD *)v6 + 7);
      if (v3)
        *((_DWORD *)v3 + 6) += 2;
      if (*((_DWORD *)v6 + 6) == 2)
      {
        if ((*((_WORD *)v6 + 15) & 0x400) == 0)
          this = (WTF::StringImpl *)WebCore::Node::removedLastRef(v6, a2);
      }
      else
      {
        *((_DWORD *)v6 + 6) -= 2;
      }
      if (!v3)
        return this;
    }
    v8 = *(_QWORD *)(*((_QWORD *)a2 + 5) + 8);
    switch(*((_DWORD *)v3 + 29))
    {
      case 1:
      case 3:
      case 8:
        v9 = bmalloc::api::isoAllocate();
        v10 = v9;
        *(_OWORD *)(v9 + 8) = xmmword_1968BC9D0;
        *(_QWORD *)(v9 + 24) = 0x101C00000002;
        *(_QWORD *)(v9 + 32) = 0;
        *(_QWORD *)(v9 + 40) = v8 + 96;
        *(_OWORD *)(v9 + 48) = 0u;
        *(_OWORD *)(v9 + 64) = 0u;
        ++*(_DWORD *)(v8 + 3324);
        *(_QWORD *)(v9 + 80) = 0;
        *(_QWORD *)(v9 + 88) = 0;
        v11 = WebCore::HTMLNames::spanTag;
        if (WebCore::HTMLNames::spanTag)
          ++*(_DWORD *)WebCore::HTMLNames::spanTag;
        *(_QWORD *)(v9 + 96) = v11;
        *(_QWORD *)(v9 + 104) = 0;
        *(_QWORD *)v9 = off_1E33CBA30;
        {
          v53 = (WebCore::Node *)"voice";
          v54 = 6;
          WTF::NeverDestroyed<WebCore::QualifiedName,WTF::AnyThreadsAccessTraits>::NeverDestroyed<WTF::AtomString const&,WTF::ASCIILiteral,WTF::AtomString const&>((WebCore::QualifiedName *)&WebCore::WebVTTElement::voiceAttributeName(void)::voiceAttr, v5, (uint64_t)&v53, v5);
        }
        v12 = *((_QWORD *)v6 + 13);
        if (!v12)
          goto LABEL_36;
        v13 = *(unsigned int *)(v12 + 4);
        if ((v13 & 1) != 0)
        {
          v14 = *(_QWORD *)(v12 + 40);
          v15 = *(unsigned int *)(v12 + 52);
          if (!v15)
          {
LABEL_36:
            v18 = v5;
            goto LABEL_37;
          }
        }
        else
        {
          v14 = v12 + 32;
          v15 = v13 >> 5;
          if (!(v13 >> 5))
            goto LABEL_36;
        }
        v18 = (WTF::StringImpl **)(v14 + 8);
        while (1)
        {
          v19 = (uint64_t)*(v18 - 1);
          if ((_UNKNOWN *)v19 == WebCore::WebVTTElement::voiceAttributeName(void)::voiceAttr
            || *(_QWORD *)(v19 + 24) == *((_QWORD *)WebCore::WebVTTElement::voiceAttributeName(void)::voiceAttr + 3)
            && *(_QWORD *)(v19 + 32) == *((_QWORD *)WebCore::WebVTTElement::voiceAttributeName(void)::voiceAttr + 4))
          {
            break;
          }
          v18 += 2;
          if (!--v15)
            goto LABEL_36;
        }
LABEL_37:
        v20 = *(_QWORD *)(v10 + 104);
        if (v20)
        {
          v21 = *(unsigned int *)(v20 + 4);
          if ((v21 & 1) == 0)
          {
            v22 = (uint64_t *)(v20 + 32);
            v23 = v21 >> 5;
            if (!(v21 >> 5))
              goto LABEL_49;
LABEL_42:
            v24 = 0;
            while (1)
            {
              v25 = *v22;
              if (*v22 == WebCore::HTMLNames::titleAttr
                || *(_QWORD *)(v25 + 24) == *(_QWORD *)(WebCore::HTMLNames::titleAttr + 24)
                && *(_QWORD *)(v25 + 32) == *(_QWORD *)(WebCore::HTMLNames::titleAttr + 32))
              {
                break;
              }
              ++v24;
              v22 += 2;
              if (v23 == v24)
                goto LABEL_49;
            }
LABEL_50:
            WebCore::Element::setAttributeInternal((WTF::StringImpl *)v10, v24, (WebCore::TreeScope *)&WebCore::HTMLNames::titleAttr, v18, 0);
            {
              v53 = (WebCore::Node *)"lang";
              v54 = 5;
              WTF::NeverDestroyed<WebCore::QualifiedName,WTF::AnyThreadsAccessTraits>::NeverDestroyed<WTF::AtomString const&,WTF::ASCIILiteral,WTF::AtomString const&>((WebCore::QualifiedName *)&WebCore::WebVTTElement::langAttributeName(void)::voiceAttr, v5, (uint64_t)&v53, v5);
            }
            v26 = *((_QWORD *)v6 + 13);
            if (!v26)
              goto LABEL_64;
            v27 = *(unsigned int *)(v26 + 4);
            if ((v27 & 1) != 0)
            {
              v28 = *(_QWORD *)(v26 + 40);
              v29 = *(unsigned int *)(v26 + 52);
              if (!v29)
              {
LABEL_64:
                v30 = v5;
                goto LABEL_65;
              }
            }
            else
            {
              v28 = v26 + 32;
              v29 = v27 >> 5;
              if (!(v27 >> 5))
                goto LABEL_64;
            }
            v30 = (WTF::StringImpl **)(v28 + 8);
            while (1)
            {
              v31 = (uint64_t)*(v30 - 1);
              if ((_UNKNOWN *)v31 == WebCore::WebVTTElement::langAttributeName(void)::voiceAttr
                || *(_QWORD *)(v31 + 24) == *((_QWORD *)WebCore::WebVTTElement::langAttributeName(void)::voiceAttr + 3)
                && *(_QWORD *)(v31 + 32) == *((_QWORD *)WebCore::WebVTTElement::langAttributeName(void)::voiceAttr + 4))
              {
                break;
              }
              v30 += 2;
              if (!--v29)
                goto LABEL_64;
            }
LABEL_65:
            v32 = *(_QWORD *)(v10 + 104);
            if (v32)
            {
              v33 = *(unsigned int *)(v32 + 4);
              if ((v33 & 1) == 0)
              {
                v34 = (uint64_t *)(v32 + 32);
                v35 = v33 >> 5;
                if (!(v33 >> 5))
                  goto LABEL_77;
LABEL_70:
                v36 = 0;
                while (1)
                {
                  v37 = *v34;
                  if (*v34 == WebCore::HTMLNames::langAttr
                    || *(_QWORD *)(v37 + 24) == *(_QWORD *)(WebCore::HTMLNames::langAttr + 24)
                    && *(_QWORD *)(v37 + 32) == *(_QWORD *)(WebCore::HTMLNames::langAttr + 32))
                  {
                    break;
                  }
                  ++v36;
                  v34 += 2;
                  if (v35 == v36)
                    goto LABEL_77;
                }
LABEL_78:
                WebCore::Element::setAttributeInternal((WTF::StringImpl *)v10, v36, (WebCore::TreeScope *)&WebCore::HTMLNames::langAttr, v30, 0);
                goto LABEL_79;
              }
              v34 = *(uint64_t **)(v32 + 40);
              v35 = *(unsigned int *)(v32 + 52);
              if (v35)
                goto LABEL_70;
            }
LABEL_77:
            v36 = 0xFFFFFFFFLL;
            goto LABEL_78;
          }
          v22 = *(uint64_t **)(v20 + 40);
          v23 = *(unsigned int *)(v20 + 52);
          if (v23)
            goto LABEL_42;
        }
LABEL_49:
        v24 = 0xFFFFFFFFLL;
        goto LABEL_50;
      case 2:
        v10 = bmalloc::api::isoAllocate();
        *(_OWORD *)(v10 + 8) = xmmword_1968BC9D0;
        *(_QWORD *)(v10 + 24) = 0x101C00000002;
        *(_QWORD *)(v10 + 32) = 0;
        *(_QWORD *)(v10 + 40) = v8 + 96;
        *(_OWORD *)(v10 + 48) = 0u;
        *(_OWORD *)(v10 + 64) = 0u;
        ++*(_DWORD *)(v8 + 3324);
        *(_QWORD *)(v10 + 80) = 0;
        *(_QWORD *)(v10 + 88) = 0;
        v16 = &WebCore::HTMLNames::iTag;
        goto LABEL_25;
      case 4:
        v10 = bmalloc::api::isoAllocate();
        *(_OWORD *)(v10 + 8) = xmmword_1968BC9D0;
        *(_QWORD *)(v10 + 24) = 0x101C00000002;
        *(_QWORD *)(v10 + 32) = 0;
        *(_QWORD *)(v10 + 40) = v8 + 96;
        *(_OWORD *)(v10 + 48) = 0u;
        *(_OWORD *)(v10 + 64) = 0u;
        ++*(_DWORD *)(v8 + 3324);
        *(_QWORD *)(v10 + 80) = 0;
        *(_QWORD *)(v10 + 88) = 0;
        v16 = &WebCore::HTMLNames::bTag;
        goto LABEL_25;
      case 5:
        v10 = bmalloc::api::isoAllocate();
        *(_OWORD *)(v10 + 8) = xmmword_1968BC9D0;
        *(_QWORD *)(v10 + 24) = 0x101C00000002;
        *(_QWORD *)(v10 + 32) = 0;
        *(_QWORD *)(v10 + 40) = v8 + 96;
        *(_OWORD *)(v10 + 48) = 0u;
        *(_OWORD *)(v10 + 64) = 0u;
        ++*(_DWORD *)(v8 + 3324);
        *(_QWORD *)(v10 + 80) = 0;
        *(_QWORD *)(v10 + 88) = 0;
        v16 = &WebCore::HTMLNames::uTag;
        goto LABEL_25;
      case 6:
        v10 = bmalloc::api::isoAllocate();
        *(_OWORD *)(v10 + 8) = xmmword_1968BC9D0;
        *(_QWORD *)(v10 + 24) = 0x101C00000002;
        *(_QWORD *)(v10 + 32) = 0;
        *(_QWORD *)(v10 + 40) = v8 + 96;
        *(_OWORD *)(v10 + 48) = 0u;
        *(_OWORD *)(v10 + 64) = 0u;
        ++*(_DWORD *)(v8 + 3324);
        *(_QWORD *)(v10 + 80) = 0;
        *(_QWORD *)(v10 + 88) = 0;
        v16 = &WebCore::HTMLNames::rubyTag;
        goto LABEL_25;
      case 7:
        v10 = bmalloc::api::isoAllocate();
        *(_OWORD *)(v10 + 8) = xmmword_1968BC9D0;
        *(_QWORD *)(v10 + 24) = 0x101C00000002;
        *(_QWORD *)(v10 + 32) = 0;
        *(_QWORD *)(v10 + 40) = v8 + 96;
        *(_OWORD *)(v10 + 48) = 0u;
        *(_OWORD *)(v10 + 64) = 0u;
        ++*(_DWORD *)(v8 + 3324);
        *(_QWORD *)(v10 + 80) = 0;
        *(_QWORD *)(v10 + 88) = 0;
        v16 = &WebCore::HTMLNames::rtTag;
LABEL_25:
        v17 = (_DWORD *)*v16;
        if (v17)
          ++*v17;
        *(_QWORD *)(v10 + 96) = v17;
        *(_QWORD *)(v10 + 104) = 0;
        *(_QWORD *)v10 = off_1E33BC680;
LABEL_79:
        v38 = *((_QWORD *)v6 + 13);
        if (!v38)
          goto LABEL_91;
        v39 = *(unsigned int *)(v38 + 4);
        if ((v39 & 1) != 0)
        {
          v40 = *(_QWORD *)(v38 + 40);
          v41 = *(unsigned int *)(v38 + 52);
          if (!v41)
          {
LABEL_91:
            v42 = v5;
            goto LABEL_92;
          }
        }
        else
        {
          v40 = v38 + 32;
          v41 = v39 >> 5;
          if (!(v39 >> 5))
            goto LABEL_91;
        }
        v42 = (WTF::StringImpl **)(v40 + 8);
        while (1)
        {
          v43 = (uint64_t)*(v42 - 1);
          if (v43 == WebCore::HTMLNames::classAttr
            || *(_QWORD *)(v43 + 24) == *(_QWORD *)(WebCore::HTMLNames::classAttr + 24)
            && *(_QWORD *)(v43 + 32) == *(_QWORD *)(WebCore::HTMLNames::classAttr + 32))
          {
            break;
          }
          v42 += 2;
          if (!--v41)
            goto LABEL_91;
        }
LABEL_92:
        v44 = *(_QWORD *)(v10 + 104);
        if (!v44)
          goto LABEL_104;
        v45 = *(unsigned int *)(v44 + 4);
        if ((v45 & 1) != 0)
        {
          v46 = *(uint64_t **)(v44 + 40);
          v47 = *(unsigned int *)(v44 + 52);
          if (!v47)
          {
LABEL_104:
            v48 = 0xFFFFFFFFLL;
            goto LABEL_105;
          }
        }
        else
        {
          v46 = (uint64_t *)(v44 + 32);
          v47 = v45 >> 5;
          if (!(v45 >> 5))
            goto LABEL_104;
        }
        v48 = 0;
        while (1)
        {
          v49 = *v46;
          if (*v46 == WebCore::HTMLNames::classAttr
            || *(_QWORD *)(v49 + 24) == *(_QWORD *)(WebCore::HTMLNames::classAttr + 24)
            && *(_QWORD *)(v49 + 32) == *(_QWORD *)(WebCore::HTMLNames::classAttr + 32))
          {
            break;
          }
          ++v48;
          v46 += 2;
          if (v47 == v48)
            goto LABEL_104;
        }
LABEL_105:
        this = WebCore::Element::setAttributeInternal((WTF::StringImpl *)v10, v48, (WebCore::TreeScope *)&WebCore::HTMLNames::classAttr, v42, 0);
        goto LABEL_106;
      default:
        v10 = 0;
        goto LABEL_106;
    }
  }
  return this;
}

unsigned int *WebCore::VTTCue::setIsActive(WebCore::VTTCue *this, char a2)
{
  unsigned int *result;
  void *v5;
  uint64_t (*v6)();

  result = (unsigned int *)WebCore::TextTrackCue::setIsActive(this, a2);
  if ((a2 & 1) == 0)
  {
    if (*((_QWORD *)this + 33))
      v6 = WTF::RefPtr<WebCore::VTTCueBox,WTF::RawPtrTraits<WebCore::VTTCueBox>,WTF::DefaultRefDerefTraits<WebCore::VTTCueBox>>::unspecifiedBoolTypeInstance;
    else
      v6 = 0;
    if (v6)
      return WebCore::VTTCue::removeDisplayTree((unsigned int *)this, v5);
  }
  return result;
}

unsigned int *WebCore::VTTCue::removeDisplayTree(unsigned int *this, void *a2)
{
  WebCore::Node *v2;
  uint64_t (*v3)();
  unsigned int *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  __int16 v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WebCore::Node *v13;

  v2 = (WebCore::Node *)*((_QWORD *)this + 33);
  v3 = WTF::RefPtr<WebCore::VTTCueBox,WTF::RawPtrTraits<WebCore::VTTCueBox>,WTF::DefaultRefDerefTraits<WebCore::VTTCueBox>>::unspecifiedBoolTypeInstance;
  if (!v2)
    v3 = 0;
  if (v3)
  {
    v4 = this;
    if ((*((_BYTE *)this + 357) & 4) != 0)
    {
      v5 = *((_QWORD *)this + 13);
      if (v5)
      {
        if (*(_QWORD *)(v5 + 8))
        {
          this = (unsigned int *)*((_QWORD *)this + 28);
          if (this)
          {
            if (!v2)
              goto LABEL_11;
            this = (unsigned int *)WebCore::VTTRegion::willRemoveTextTrackCueBox((WebCore::Element **)this, v2);
            v2 = (WebCore::Node *)*((_QWORD *)v4 + 33);
          }
        }
      }
    }
    if (v2)
    {
LABEL_16:
      *((_DWORD *)v2 + 6) += 2;
      v7 = *((_QWORD *)v2 + 4);
      if (v7)
      {
        *(_DWORD *)(v7 + 24) += 2;
        this = (unsigned int *)WebCore::ContainerNode::removeChild((WebCore::ContainerNode *)v7, v2, &v10);
        if (*(_DWORD *)(v7 + 24) == 2)
        {
          v8 = *(_WORD *)(v7 + 30);
          if ((v8 & 0x400) == 0)
          {
            v9 = *(_WORD *)(v7 + 28);
            if ((v9 & 0xF000) == 0x9000)
            {
              this = WebCore::Document::removedLastRef((WebCore::Document *)v7, a2);
            }
            else
            {
              if ((v9 & 0x20) != 0)
              {
                (*(void (**)(_QWORD))(**(_QWORD **)(v7 + 160) + 16))(*(_QWORD *)(v7 + 160));
                v8 = *(_WORD *)(v7 + 30);
              }
              *(_WORD *)(v7 + 30) = v8 | 0x400;
              this = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 72))(v7);
            }
          }
        }
        else
        {
          *(_DWORD *)(v7 + 24) -= 2;
        }
      }
      else
      {
        v10 = 0;
        v11 = 0;
        v12 = 0;
      }
      if ((_BYTE)v12)
      {
        this = (unsigned int *)v11;
        v11 = 0;
        if (this)
        {
          if (*this == 2)
            this = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)this, (WTF::StringImpl *)a2);
          else
            *this -= 2;
        }
      }
      if (*((_DWORD *)v2 + 6) == 2)
      {
        if ((*((_WORD *)v2 + 15) & 0x400) == 0)
          return WebCore::Node::removedLastRef(v2, a2);
      }
      else
      {
        *((_DWORD *)v2 + 6) -= 2;
      }
      return this;
    }
LABEL_11:
    (*(void (**)(WebCore::Node **__return_ptr, unsigned int *))(*(_QWORD *)v4 + 280))(&v13, v4);
    v2 = v13;
    v13 = 0;
    this = (unsigned int *)*((_QWORD *)v4 + 33);
    *((_QWORD *)v4 + 33) = v2;
    if (!this)
      goto LABEL_15;
    v6 = this[6] - 2;
    if (this[6] == 2)
    {
      if ((*((_WORD *)this + 15) & 0x400) != 0)
        goto LABEL_14;
      WebCore::Node::removedLastRef((WebCore::Node *)this, a2);
      this = (unsigned int *)v13;
      v13 = 0;
      if (!this)
        goto LABEL_14;
      v6 = this[6] - 2;
      if (this[6] == 2)
      {
        if ((*((_WORD *)this + 15) & 0x400) == 0)
          this = WebCore::Node::removedLastRef((WebCore::Node *)this, a2);
        goto LABEL_14;
      }
    }
    this[6] = v6;
LABEL_14:
    v2 = (WebCore::Node *)*((_QWORD *)v4 + 33);
LABEL_15:
    if (!v2)
      return this;
    goto LABEL_16;
  }
  return this;
}

uint64_t WebCore::VTTCue::setTrack(WebCore::VTTCue *this, WebCore::TextTrack *a2)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t result;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  WTF *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[4];

  if (a2)
  {
    v4 = (unsigned int *)WTF::WeakPtr<WebCore::TextTrack,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::TextTrack>((uint64_t)a2);
    v5 = v4;
    if (v4)
    {
      do
        v6 = __ldaxr(v4);
      while (__stlxr(v6 + 1, v4));
    }
  }
  else
  {
    v5 = 0;
  }
  result = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = v5;
  if (result)
  {
    do
    {
      v8 = __ldaxr((unsigned int *)result);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, (unsigned int *)result));
    if (!v9)
    {
      atomic_store(1u, (unsigned int *)result);
      v23 = *(unsigned int *)(result + 28);
      if ((_DWORD)v23)
      {
        v28 = result;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(result + 16), (WTF::StringImpl *)(*(_QWORD *)(result + 16) + 32 * v23));
        result = v28;
      }
      v24 = *(WTF **)(result + 16);
      if (v24)
      {
        *(_QWORD *)(result + 16) = 0;
        *(_DWORD *)(result + 24) = 0;
        v27 = result;
        WTF::fastFree(v24, a2);
        result = v27;
      }
      result = WTF::fastFree((WTF *)result, a2);
    }
  }
  v10 = *((_QWORD *)this + 29);
  if (v10)
  {
    if (a2)
    {
      if (*(_DWORD *)(v10 + 4))
      {
        if (*((_DWORD *)a2 + 56))
        {
          result = WebCore::TextTrack::ensureVTTRegionList(a2);
          v17 = *((_QWORD *)this + 29);
          if (v17)
          {
            if (*(_DWORD *)(v17 + 4))
            {
              v18 = *(unsigned int *)(result + 20);
              if ((_DWORD)v18)
              {
                v19 = *(uint64_t **)(result + 8);
                v20 = 8 * v18;
                while (1)
                {
                  result = WTF::equal(*(WTF **)(*v19 + 24), *((const WTF::StringImpl **)this + 29), v16);
                  if ((result & 1) != 0)
                    break;
                  ++v19;
                  v20 -= 8;
                  if (!v20)
                    goto LABEL_10;
                }
                v22 = *v19;
                if (*v19)
                {
                  ++*(_DWORD *)(v22 + 16);
                  result = *((_QWORD *)this + 28);
                  *((_QWORD *)this + 28) = v22;
                  if (result)
                  {
                    if (*(_DWORD *)(result + 16) == 1)
                    {
                      WebCore::VTTRegion::~VTTRegion((WebCore::VTTRegion *)result);
                      result = WTF::fastFree(v25, v26);
                    }
                    else
                    {
                      --*(_DWORD *)(result + 16);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_10:
  v11 = *((_QWORD *)this + 53);
  v12 = *((_QWORD *)this + 54);
  if (!v12)
  {
    v13 = *((_QWORD *)this + 13);
    if (v13 && (v14 = *(_QWORD *)(v13 + 8)) != 0)
    {
      v15 = *(_QWORD *)(v14 - 24);
      result = WTF::cryptographicallyRandomNumber<unsigned long long>();
      v12 = v15 & 0xFFFFFFFFFFFF0000 | (unsigned __int16)result;
      *((_QWORD *)this + 54) = v12;
    }
    else
    {
      v12 = 0;
    }
  }
  v29[0] = "VTTCue";
  v29[1] = 7;
  v29[2] = "setTrack";
  v29[3] = v12;
  if (*(_BYTE *)(v11 + 12))
  {
    if (WebCore::LogMedia)
      v21 = byte_1ECE7C490 >= 3u;
    else
      v21 = 0;
    if (v21)
      return WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 3, (WTF::Logger::LogSiteIdentifier *)v29);
  }
  return result;
}

char *WebCore::VTTCue::logChannel(WebCore::VTTCue *this)
{
  return &WebCore::LogMedia;
}

unint64_t WebCore::VTTCue::logIdentifier(WebCore::VTTCue *this)
{
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *((_QWORD *)this + 54);
  if (!v1)
  {
    v3 = *((_QWORD *)this + 13);
    if (v3 && (v4 = *(_QWORD *)(v3 + 8)) != 0)
    {
      v5 = *(_QWORD *)(v4 - 24);
      v1 = v5 & 0xFFFFFFFFFFFF0000 | (unsigned __int16)WTF::cryptographicallyRandomNumber<unsigned long long>();
      *((_QWORD *)this + 54) = v1;
    }
    else
    {
      return 0;
    }
  }
  return v1;
}

uint64_t WebCore::VTTCue::setRegion(uint64_t this, WebCore::VTTRegion *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t **v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t **v15;
  _QWORD *v16;
  WTF *v17;
  void *v18;
  uint64_t v19;

  if (*(WebCore::VTTRegion **)(this + 224) != a2)
  {
    v3 = this;
    v4 = *(_DWORD *)(this + 96);
    *(_DWORD *)(this + 96) = v4 + 1;
    if (v4 <= 0)
    {
      v6 = *(_QWORD *)(this + 104);
      if (v6)
      {
        v7 = *(_QWORD *)(v6 + 8);
        if (v7)
        {
          v8 = v7 - 120;
          v9 = (uint64_t **)(v7 + 80);
          v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v10 = off_1E33EBDF8;
          v10[1] = v8;
          v10[2] = v3;
          v19 = (uint64_t)v10;
          WTF::WeakHashSet<WebCore::TextTrackClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v9, &v19);
          v11 = v19;
          v19 = 0;
          if (v11)
            (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
        }
      }
    }
    if (a2)
      ++*((_DWORD *)a2 + 4);
    this = *(_QWORD *)(v3 + 224);
    *(_QWORD *)(v3 + 224) = a2;
    if (this)
    {
      if (*(_DWORD *)(this + 16) == 1)
      {
        WebCore::VTTRegion::~VTTRegion((WebCore::VTTRegion *)this);
        this = WTF::fastFree(v17, v18);
      }
      else
      {
        --*(_DWORD *)(this + 16);
      }
    }
    v5 = *(_DWORD *)(v3 + 96) - 1;
    *(_DWORD *)(v3 + 96) = v5;
    if (!v5)
    {
      *(_BYTE *)(v3 + 135) = 1;
      v12 = *(_QWORD *)(v3 + 104);
      if (v12)
      {
        v13 = *(_QWORD *)(v12 + 8);
        if (v13)
        {
          v14 = v13 - 120;
          v15 = (uint64_t **)(v13 + 80);
          v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v16 = off_1E33EBE20;
          v16[1] = v14;
          v16[2] = v3;
          v19 = (uint64_t)v16;
          WTF::WeakHashSet<WebCore::TextTrackClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v15, &v19);
          this = v19;
          v19 = 0;
          if (this)
            this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
        }
      }
    }
    *(_BYTE *)(v3 + 357) |= 2u;
  }
  return this;
}

unsigned int *WebCore::VTTCue::updateDisplayTree(unsigned int *this, const WTF::MediaTime *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  BOOL v5;
  int v6;
  BOOL v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  __int128 v13;
  int v14;
  WTF::StringImpl *v15;
  char v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  const WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  int v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::MediaTime *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  int v31;
  char v32;
  void *v33;
  __int16 v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  uint64_t v39;
  unint64_t v40;
  uint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  char v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  int v51;
  char v52;
  __int128 v53;
  WTF::StringImpl *v54[2];
  WTF::StringImpl *v55;
  char v56;

  v2 = *((_QWORD *)this + 13);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(_DWORD *)(v3 + 108);
      v5 = v4 > 5;
      v6 = (1 << v4) & 0x27;
      v7 = v5 || v6 == 0;
      if (!v7 && *(_DWORD *)(v3 + 104) == 2)
      {
        v9 = (uint64_t)this;
        WebCore::ContainerNode::removeChildren(*((_QWORD *)this + 31));
        this = (unsigned int *)WebCore::VTTCue::createWebVTTNodeTree(v9);
        if (*(_QWORD *)(v9 + 240))
        {
          v10 = *(_QWORD *)(v9 + 40);
          if (v10)
          {
            v11 = *(_QWORD *)(v10 + 8);
            if (v11)
            {
              if (*(_BYTE *)(v11 + 178))
              {
                __break(0xC471u);
                JUMPOUT(0x195D96B20);
              }
              WebCore::DocumentFragment::create((WebCore::DocumentFragment *)(v11 - 288), (uint64_t *)v54);
              v12 = v54[0];
              WebCore::ContainerNode::cloneChildNodes(*(WebCore::ContainerNode **)(v9 + 240), v54[0]);
              v13 = *(_OWORD *)(v9 + 64);
              if ((byte_1EE337CE1 & 1) == 0)
              {
                WebCore::VTTCue::markFutureAndPastNodes(WebCore::ContainerNode *,WTF::MediaTime const&,WTF::MediaTime const&)::$_0::operator() const(void)::impl += 2;
                qword_1EE337D00 = (uint64_t)&WebCore::VTTCue::markFutureAndPastNodes(WebCore::ContainerNode *,WTF::MediaTime const&,WTF::MediaTime const&)::$_0::operator() const(void)::impl;
                byte_1EE337CE1 = 1;
              }
              v53 = v13;
              v14 = WTF::MediaTime::compare((WTF::MediaTime *)&v53, a2);
              v15 = (WTF::StringImpl *)*((_QWORD *)v12 + 10);
              if (v15)
              {
                v16 = v14 != 1;
                *((_DWORD *)v15 + 6) += 2;
                v17 = v9 + 56;
                while (1)
                {
                  v18 = v15;
                  (*(void (**)(WTF::StringImpl **__return_ptr, WTF::StringImpl *))(*(_QWORD *)v15 + 104))(v54, v15);
                  v21 = WTF::equal(v54[0], (const WTF::StringImpl *)qword_1EE337D00, v19);
                  v22 = v54[0];
                  v54[0] = 0;
                  if (!v22)
                    goto LABEL_19;
                  if (*(_DWORD *)v22 != 2)
                    break;
                  WTF::StringImpl::destroy(v22, v20);
                  if (v21)
                    goto LABEL_20;
LABEL_35:
                  if ((*(unsigned int (**)(WTF::StringImpl *))(*(_QWORD *)v18 + 176))(v18))
                    *((_BYTE *)v18 + 112) = v16 & 1;
                  v34 = *((_WORD *)v18 + 14);
                  if ((v34 & 8) != 0)
                    v35 = v18;
                  else
                    v35 = 0;
                  if (*(_QWORD *)v17)
                  {
                    if (*(_DWORD *)(*(_QWORD *)v17 + 4) && (v34 & 8) != 0)
                    {
                      v39 = *((_QWORD *)v35 + 13);
                      if (!v39)
                        goto LABEL_75;
                      v40 = *(unsigned int *)(v39 + 4);
                      if ((v40 & 1) != 0)
                      {
                        v41 = *(uint64_t **)(v39 + 40);
                        v42 = *(unsigned int *)(v39 + 52);
                        if (!v42)
                          goto LABEL_75;
                      }
                      else
                      {
                        v41 = (uint64_t *)(v39 + 32);
                        v42 = v40 >> 5;
                        if (!(v40 >> 5))
                        {
LABEL_75:
                          v43 = 0xFFFFFFFFLL;
LABEL_76:
                          WebCore::Element::setAttributeInternal(v35, v43, (WebCore::TreeScope *)&WebCore::HTMLNames::idAttr, (WTF::StringImpl **)(v9 + 56), 0);
                          v34 = *((_WORD *)v18 + 14);
                          goto LABEL_41;
                        }
                      }
                      v43 = 0;
                      while (1)
                      {
                        v44 = *v41;
                        if (*v41 == WebCore::HTMLNames::idAttr
                          || *(_QWORD *)(v44 + 24) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 24)
                          && *(_QWORD *)(v44 + 32) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 32))
                        {
                          goto LABEL_76;
                        }
                        ++v43;
                        v41 += 2;
                        if (v42 == v43)
                          goto LABEL_75;
                      }
                    }
                  }
LABEL_41:
                  if ((v34 & 4) != 0)
                  {
                    v15 = (WTF::StringImpl *)*((_QWORD *)v18 + 10);
                    if (v15)
                    {
LABEL_52:
                      *((_DWORD *)v15 + 6) += 2;
                      goto LABEL_53;
                    }
                  }
                  if (v18 != v12)
                  {
                    v15 = (WTF::StringImpl *)*((_QWORD *)v18 + 7);
                    if (v15)
                      goto LABEL_52;
                    v36 = v18;
                    while (1)
                    {
                      v36 = (WTF::StringImpl *)*((_QWORD *)v36 + 4);
                      if (!v36 || v36 == v12)
                        break;
                      v15 = (WTF::StringImpl *)*((_QWORD *)v36 + 7);
                      if (v15)
                        goto LABEL_52;
                    }
                  }
                  v15 = 0;
LABEL_53:
                  if (*((_DWORD *)v18 + 6) == 2)
                  {
                    if ((*((_WORD *)v18 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v18, v33);
                  }
                  else
                  {
                    *((_DWORD *)v18 + 6) -= 2;
                  }
                  if (!v15)
                    goto LABEL_79;
                }
                *(_DWORD *)v22 -= 2;
LABEL_19:
                if (!v21)
                  goto LABEL_35;
LABEL_20:
                v50 = 0;
                v51 = 10000000;
                v52 = 1;
                (*(void (**)(WTF::StringImpl **__return_ptr, WTF::StringImpl *))(*(_QWORD *)v18 + 112))(&v49, v18);
                v25 = v49;
                if (v49)
                {
                  v26 = *((unsigned int *)v49 + 1);
                  if ((_DWORD)v26)
                  {
                    *(_DWORD *)v49 += 2;
                    v55 = v25;
                    v7 = (*((_DWORD *)v25 + 4) & 4) == 0;
                    v56 = (*((_DWORD *)v25 + 4) & 4u) >> 2;
                    v27 = *((_QWORD *)v25 + 1);
                    v28 = (WTF::StringImpl *)(v27 + 2 * v26);
                    v29 = (WTF::StringImpl *)(v27 + v26);
                    if (v7)
                      v29 = v28;
                    v54[0] = *((WTF::StringImpl **)v25 + 1);
                    v54[1] = v29;
                    WebCore::WebVTTParser::collectTimeStamp((WebCore::WebVTTParser *)v54, (WebCore::VTTScanner *)&v50, v24);
                    v30 = v55;
                    v55 = 0;
                    if (v30)
                    {
                      if (*(_DWORD *)v30 == 2)
                        WTF::StringImpl::destroy(v30, v23);
                      else
                        *(_DWORD *)v30 -= 2;
                    }
                    v25 = v49;
                    v49 = 0;
                    if (!v25)
                      goto LABEL_34;
                  }
                  else
                  {
                    v49 = 0;
                  }
                  if (*(_DWORD *)v25 == 2)
                    WTF::StringImpl::destroy(v25, v23);
                  else
                    *(_DWORD *)v25 -= 2;
                }
LABEL_34:
                v50 = WTF::MediaTime::operator+();
                v51 = v31;
                v52 = v32;
                v16 &= WTF::MediaTime::compare((WTF::MediaTime *)&v50, a2) != 1;
                goto LABEL_35;
              }
LABEL_79:
              this = (unsigned int *)WebCore::ContainerNode::appendChild(*(_QWORD *)(v9 + 248), v12, (uint64_t)&v46);
              if (v48)
              {
                this = (unsigned int *)v47;
                v47 = 0;
                if (this)
                {
                  if (*this == 2)
                    this = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v45);
                  else
                    *this -= 2;
                }
              }
              if (*((_DWORD *)v12 + 6) == 2)
              {
                if ((*((_WORD *)v12 + 15) & 0x400) == 0)
                  return WebCore::Node::removedLastRef(v12, v45);
              }
              else
              {
                *((_DWORD *)v12 + 6) -= 2;
              }
            }
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::VTTRegion::willRemoveTextTrackCueBox(WebCore::Element **this, WebCore::VTTCueBox *a2)
{
  float v3;
  float v4;
  uint64_t v5;
  WTF::String *v6;
  __n128 v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  double v10;
  uint64_t v12;
  _BYTE v13[8];
  WTF::StringImpl *v14;
  char v15;
  uint64_t v16;

  WebCore::Element::boundingClientRect(a2);
  v4 = v3;
  v5 = WebCore::Element::classList(this[9]);
  if ((byte_1EE337CE2 & 1) == 0)
  {
    v12 = v5;
    WTF::AtomStringImpl::add();
    v5 = v12;
    qword_1EE337D08 = v16;
    byte_1EE337CE2 = 1;
  }
  WebCore::DOMTokenList::removeInternal(v5, (WTF::StringImpl *)&qword_1EE337D08, 1, v6, (uint64_t)v13, v7);
  if (v15)
  {
    v9 = v14;
    v14 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
  }
  v10 = *((double *)this + 11) + v4;
  *((double *)this + 11) = v10;
  return WebCore::StyledElement::setInlineStyleProperty(this[9], (WTF::StringImpl *)0x1C1, 6, 0, v10);
}

uint64_t WebCore::VTTCue::getPositionCoordinates(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = this;
  if (!*(_BYTE *)(this + 184) && (*(_BYTE *)(this + 357) & 1) != 0 && !*(_BYTE *)(this + 168))
  {
    v2 = *(_QWORD *)(this + 104);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 8);
      if (v3)
      {
        if (*(_BYTE *)(v3 + 132))
        {
          this = *(unsigned int *)(v3 + 128);
        }
        else
        {
          v4 = *(_QWORD *)(v3 - 16);
          if (v4)
          {
            this = *(_QWORD *)(v4 + 8);
            if (this)
            {
              if (*(_DWORD *)(this + 72) != 1)
              {
                this = 105;
                __break(0xC471u);
LABEL_17:
                __break(1u);
                return this;
              }
              this = WebCore::TextTrackList::getTrackIndexRelativeToRenderedTracks((WebCore::TextTrackList *)this, (WebCore::TextTrack *)(v3 - 120));
              *(_DWORD *)(v3 + 128) = this;
              *(_BYTE *)(v3 + 132) = 1;
            }
          }
          else
          {
            this = 0;
          }
        }
      }
    }
  }
  if (*(_BYTE *)(v1 + 216) == 1 && !*(_BYTE *)(v1 + 184))
    goto LABEL_17;
  return this;
}

uint64_t WebCore::VTTScanner::scanFloat(WebCore::VTTScanner *this, float *a2, BOOL *a3)
{
  unsigned __int16 *v6;
  unint64_t v7;
  int v8;
  int v9;
  BOOL v10;
  unint64_t v11;
  unsigned __int16 *v12;
  _BYTE *v13;
  uint64_t v14;
  unsigned __int16 *v15;
  uint64_t v16;
  int v17;

  v6 = *(unsigned __int16 **)this;
  v7 = *((_QWORD *)this + 1);
  v8 = *((unsigned __int8 *)this + 24);
  if (v6 == (unsigned __int16 *)v7 || (!*((_BYTE *)this + 24) ? (v9 = *v6) : (v9 = *(unsigned __int8 *)v6), v9 != 45))
  {
    v10 = 0;
  }
  else
  {
    if (*((_BYTE *)this + 24))
      v6 = (unsigned __int16 *)((char *)v6 + 1);
    else
      ++v6;
    *(_QWORD *)this = v6;
    v10 = 1;
  }
  if (v8)
  {
    if ((unint64_t)v6 < v7)
    {
      v11 = v7 - (_QWORD)v6;
      v12 = v6;
      while (*(unsigned __int8 *)v12 - 48 <= 9)
      {
        v12 = (unsigned __int16 *)((char *)v12 + 1);
        if (!--v11)
        {
          v12 = (unsigned __int16 *)v7;
          break;
        }
      }
LABEL_21:
      *(_QWORD *)this = v12;
      if (v12 == (unsigned __int16 *)v7)
      {
        v12 = (unsigned __int16 *)v7;
        v13 = (_BYTE *)v7;
        goto LABEL_45;
      }
      if (!v8)
        goto LABEL_34;
LABEL_26:
      if (*(_BYTE *)v12 == 46)
      {
        v13 = (char *)v12 + 1;
        *(_QWORD *)this = (char *)v12 + 1;
        if ((unint64_t)v12 + 1 < v7)
        {
          v14 = 1;
          while (*((unsigned __int8 *)v12 + v14) - 48 <= 9)
          {
            if (v7 - (_QWORD)v12 == ++v14)
              goto LABEL_44;
          }
          v7 = (unint64_t)v12 + v14;
          goto LABEL_44;
        }
        goto LABEL_42;
      }
      goto LABEL_40;
    }
    *(_QWORD *)this = v6;
    if (v6 != (unsigned __int16 *)v7)
    {
      v12 = v6;
      goto LABEL_26;
    }
    goto LABEL_47;
  }
  if ((unint64_t)v6 < v7)
  {
    v12 = v6;
    do
    {
      if (*v12 - 48 > 9)
        break;
      ++v12;
    }
    while ((unint64_t)v12 < v7);
    goto LABEL_21;
  }
  *(_QWORD *)this = v6;
  if (v6 == (unsigned __int16 *)v7)
  {
LABEL_47:
    v16 = 0;
    *(_QWORD *)this = v6;
    return v16;
  }
  v12 = v6;
LABEL_34:
  if (*v12 == 46)
  {
    v13 = v12 + 1;
    *(_QWORD *)this = v12 + 1;
    if ((unint64_t)(v12 + 1) < v7)
    {
      v15 = v12 + 1;
      do
      {
        if (*v15 - 48 > 9)
          break;
        ++v15;
      }
      while ((unint64_t)v15 < v7);
      v7 = (unint64_t)v15;
      goto LABEL_44;
    }
LABEL_42:
    v7 = (unint64_t)v13;
LABEL_44:
    *(_QWORD *)this = v7;
    goto LABEL_45;
  }
LABEL_40:
  v7 = (unint64_t)v12;
  v13 = v12;
LABEL_45:
  if (v6 == v12 && v13 == (_BYTE *)v7)
    goto LABEL_47;
  if (v8)
    WTF::charactersToFloat();
  else
    WTF::charactersToFloat();
  *(_DWORD *)a2 = v17;
  *a2 = 3.4028e38;
  if (a3)
    *a3 = v10;
  return 1;
}

uint64_t WebCore::VTTScanner::scan(uint64_t result, int8x16_t *a2, unint64_t a3)
{
  int8x16_t *v3;
  unint64_t v4;
  unsigned int v5;
  int v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __int8 *v13;
  __int8 *v14;
  __int8 *v15;
  uint16x8_t v16;
  unsigned int v17;
  uint16x8_t v18;
  uint8x16_t v19;
  uint8x16_t v20;
  unsigned int v21;
  uint8x16_t v22;

  v3 = *(int8x16_t **)result;
  v4 = *(_QWORD *)(result + 8) - *(_QWORD *)result;
  if (*(_BYTE *)(result + 24))
  {
    if (a3 > v4)
      return 0;
    if ((_DWORD)a3)
    {
      if ((_DWORD)a3 == 1)
      {
        if (!a3)
        {
          __break(1u);
          return result;
        }
        v6 = v3->u8[0];
        v7 = a2->u8[0];
      }
      else
      {
        v5 = 32 - __clz(a3 - 1);
        if (v5 != 1)
        {
          switch(v5)
          {
            case 2u:
              if (v3->u16[0] != a2->u16[0])
                return 0;
              v6 = *(unsigned __int16 *)((char *)&v3->u16[-1] + a3);
              v7 = *(unsigned __int16 *)((char *)&a2->u16[-1] + a3);
              goto LABEL_31;
            case 3u:
              if (v3->i32[0] != a2->i32[0])
                return 0;
              v6 = *(__int32 *)((char *)&v3->i32[-1] + a3);
              v7 = *(__int32 *)((char *)&a2->i32[-1] + a3);
              goto LABEL_31;
            case 4u:
              if (v3->i64[0] != a2->i64[0]
                || *(uint64_t *)((char *)&v3->i64[-1] + a3) != *(uint64_t *)((char *)&a2->i64[-1]
                                                                                       + a3))
              {
                return 0;
              }
              goto LABEL_32;
            case 5u:
              v19 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)((char *)&v3[-1] + a3), *(int8x16_t *)((char *)&a2[-1] + a3)), vceqq_s8(*v3, *a2));
              v19.i8[0] = vminvq_u8(v19);
              if (!v19.i32[0])
                return 0;
              goto LABEL_32;
            default:
              v20 = (uint8x16_t)vceqq_s8(*v3, *a2);
              v20.i8[0] = vminvq_u8(v20);
              if (!v20.i32[0])
                return 0;
              if (a3 < 0x10)
                goto LABEL_32;
              v21 = a3 & 0xF;
              break;
          }
          while (1)
          {
            v22 = (uint8x16_t)vceqq_s8(*(int8x16_t *)((char *)v3 + v21), *(int8x16_t *)((char *)a2 + v21));
            v22.i8[0] = vminvq_u8(v22);
            if (!v22.i32[0])
              return 0;
            v21 += 16;
            if (v21 >= a3)
              goto LABEL_32;
          }
        }
        v6 = v3->u16[0];
        v7 = a2->u16[0];
      }
LABEL_31:
      if (v6 == v7)
        goto LABEL_32;
      return 0;
    }
  }
  else
  {
    if (a3 > (v4 >> 1))
      return 0;
    if (a3 >= 8)
    {
      v16 = (uint16x8_t)vceqq_s16(*(int16x8_t *)v3, (int16x8_t)vmovl_u8(*(uint8x8_t *)a2->i8));
      v16.i16[0] = vminvq_u16(v16);
      if (v16.i32[0])
      {
        v17 = a3 & 7;
        while (1)
        {
          v18 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v3 + 2 * v17), (int16x8_t)vmovl_u8(*(uint8x8_t *)&a2->i8[v17]));
          v18.i16[0] = vminvq_u16(v18);
          if (!v18.i32[0])
            break;
          v17 += 8;
          if (v17 >= a3)
            goto LABEL_32;
        }
      }
      return 0;
    }
    if (a3 >= 4)
    {
      v8 = (a2->u32[0] | ((unint64_t)a2->u32[0] << 16)) & 0xFFFF0000FFFFLL;
      v9 = (*(unsigned int *)((char *)a2->u32 + (a3 & 3)) | ((unint64_t)*(unsigned int *)((char *)a2->u32
                                                                                               + (a3 & 3)) << 16)) & 0xFFFF0000FFFFLL;
      v10 = (v9 | (v9 << 8)) & 0xFF00FF00FF00FFLL;
      if (((v8 | (v8 << 8)) & 0xFF00FF00FF00FFLL) == v3->i64[0] && v10 == *(uint64_t *)((char *)v3->i64 + 2 * (a3 & 3)))
        goto LABEL_32;
      return 0;
    }
    if (a3 >= 2)
    {
      if (((a2->u16[0] | (a2->u16[0] << 8)) & 0xFF00FF) == v3->i32[0]
        && ((*(unsigned __int16 *)((char *)a2->u16 + (a3 & 1)) | (*(unsigned __int16 *)((char *)a2->u16 + (a3 & 1)) << 8)) & 0xFF00FF) == *(__int32 *)((char *)v3->i32 + 2 * (a3 & 1)))
      {
        goto LABEL_32;
      }
      return 0;
    }
    if ((_DWORD)a3 == 1 && v3->i16[0] != a2->u8[0])
      return 0;
  }
LABEL_32:
  v13 = &v3->i8[2 * a3];
  v14 = &v3->i8[a3];
  if (*(_BYTE *)(result + 24))
    v15 = v14;
  else
    v15 = v13;
  *(_QWORD *)result = v15;
  return 1;
}

uint64_t WebCore::VTTCue::cueContentsMatch(WebCore::VTTCue *this, const WebCore::TextTrackCue *a2)
{
  const WTF::StringImpl *v4;
  uint64_t result;
  const WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];
  _QWORD v16[2];
  _QWORD v17[2];
  _QWORD v18[2];
  char v19;
  char *v20;

  if ((*(unsigned int (**)(const WebCore::TextTrackCue *))(*(_QWORD *)a2 + 128))(a2) == 3
    || (*(unsigned int (**)(const WebCore::TextTrackCue *))(*(_QWORD *)a2 + 128))(a2) == 2)
  {
    if (*((_QWORD *)this + 7) != *((_QWORD *)a2 + 7))
      return 0;
    result = WTF::equal(*((WTF **)this + 18), *((const WTF::StringImpl **)a2 + 18), v4);
    if ((_DWORD)result)
    {
      result = WTF::equal(*((WTF **)this + 19), *((const WTF::StringImpl **)a2 + 19), v6);
      if ((_DWORD)result)
      {
        if (*((_BYTE *)this + 200))
        {
          v7 = 0;
          v8 = *((_QWORD *)this + 24);
        }
        else
        {
          v8 = 0;
          v7 = 1;
        }
        v18[0] = v8;
        v18[1] = v7;
        if (*((_BYTE *)a2 + 200))
        {
          v9 = 0;
          v10 = *((_QWORD *)a2 + 24);
        }
        else
        {
          v10 = 0;
          v9 = 1;
        }
        v17[0] = v10;
        v17[1] = v9;
        if ((_DWORD)v9 != (_DWORD)v7)
          return 0;
        v16[0] = v15;
        result = ((uint64_t (*)(_QWORD *, _QWORD *, _QWORD *))off_1E33ECF78[v7])(v16, v18, v17);
        if ((_DWORD)result)
        {
          if (*((_BYTE *)this + 168))
          {
            v11 = 0;
            v12 = *((_QWORD *)this + 20);
          }
          else
          {
            v12 = 0;
            v11 = 1;
          }
          v16[0] = v12;
          v16[1] = v11;
          if (*((_BYTE *)a2 + 168))
          {
            v13 = 0;
            v14 = *((_QWORD *)a2 + 20);
          }
          else
          {
            v14 = 0;
            v13 = 1;
          }
          v15[0] = v14;
          v15[1] = v13;
          if ((_DWORD)v13 != (_DWORD)v11)
            return 0;
          v20 = &v19;
          result = ((uint64_t (*)(char **, _QWORD *, _QWORD *))off_1E33ECF78[v11])(&v20, v16, v15);
          if ((_DWORD)result)
          {
            if (*((double *)this + 26) != *((double *)a2 + 26))
              return 0;
            return *((unsigned __int8 *)this + 217) == *((unsigned __int8 *)a2 + 217);
          }
        }
      }
    }
  }
  else
  {
    result = 96;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::VTTCue::setFontSize(uint64_t this, int a2, int a3)
{
  if (*(_DWORD *)(this + 352) != a2 || *(unsigned __int8 *)(this + 356) != a3)
  {
    *(_BYTE *)(this + 357) |= 2u;
    *(_BYTE *)(this + 356) = a3;
    *(_DWORD *)(this + 352) = a2;
  }
  return this;
}

WTF::StringImpl *WebCore::VTTCue::toJSON(WebCore::VTTCue *this, WTF::JSONImpl::Object *a2)
{
  const WTF::String *v4;
  WTF::StringImpl *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  _DWORD *v10;
  WTF::StringImpl *v11;
  const WTF::String *v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  _DWORD *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  _DWORD *v30;
  WTF::StringImpl *v31;
  WTF::JSONImpl::Value *v32;
  const WTF::String *v33;
  WTF::StringImpl *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  _DWORD *v39;
  WTF::StringImpl *v40;
  WTF::JSONImpl::Value *v41;
  const WTF::String *v42;
  WTF::StringImpl *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  _DWORD *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  _DWORD *v55;
  WTF::StringImpl *v56;
  const WTF::String *v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  WTF::StringImpl *v64;
  _DWORD *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *result;
  _DWORD **v68;
  uint64_t v69;
  _DWORD *v70;
  _DWORD **v71;
  uint64_t v72;
  _DWORD *v73;
  _DWORD **v74;
  uint64_t v75;
  _DWORD *v76;
  _DWORD **v77;
  uint64_t v78;
  _DWORD *v79;
  _DWORD **v80;
  uint64_t v81;
  _DWORD *v82;
  _DWORD **v83;
  uint64_t v84;
  _DWORD *v85;
  _DWORD **v86;
  uint64_t v87;
  _DWORD *v88;
  _DWORD *v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  _DWORD *v92;
  _QWORD v93[2];
  char v94;

  WebCore::TextTrackCue::toJSON(this, a2);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WebCore::VTTCue *)((char *)this + 144), v4);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)a2 + 2, &v91, (const WTF::StringImpl *)&v92, (uint64_t)v93);
  if (v94)
  {
    v6 = (uint64_t *)((char *)a2 + 24);
    v7 = *((unsigned int *)a2 + 9);
    if ((_DWORD)v7 == *((_DWORD *)a2 + 8))
    {
      v68 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v6, v7 + 1, (unint64_t)&v91);
      v7 = *((unsigned int *)a2 + 9);
      v69 = *((_QWORD *)a2 + 3);
      v70 = *v68;
      if (*v68)
        *v70 += 2;
      *(_QWORD *)(v69 + 8 * v7) = v70;
    }
    else
    {
      v8 = *v6;
      v9 = v91;
      if (v91)
        *(_DWORD *)v91 += 2;
      *(_QWORD *)(v8 + 8 * v7) = v9;
    }
    *((_DWORD *)a2 + 9) = v7 + 1;
  }
  v10 = v92;
  v92 = 0;
  if (v10)
  {
    if (*v10 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v10;
  }
  v11 = v91;
  v91 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v5);
    else
      *(_DWORD *)v11 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v91 = (WTF::StringImpl *)v93[0];
  v13 = *((unsigned __int8 *)this + 216);
  v14 = &unk_1EE2F4000;
  v15 = WebCore::convertEnumerationToString(WebCore::VTTDirectionSetting)::values;
    goto LABEL_145;
  while (1)
  {
    v16 = (WTF::StringImpl *)v15[v13];
    if (v16)
      *(_DWORD *)v16 += 2;
    v90 = v16;
    WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v90, v12);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)a2 + 2, &v91, (const WTF::StringImpl *)&v92, (uint64_t)v93);
    if (v94)
    {
      v18 = (uint64_t *)((char *)a2 + 24);
      v19 = *((unsigned int *)a2 + 9);
      if ((_DWORD)v19 == *((_DWORD *)a2 + 8))
      {
        v71 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v18, v19 + 1, (unint64_t)&v91);
        v19 = *((unsigned int *)a2 + 9);
        v72 = *((_QWORD *)a2 + 3);
        v73 = *v71;
        if (*v71)
          *v73 += 2;
        *(_QWORD *)(v72 + 8 * v19) = v73;
      }
      else
      {
        v20 = *v18;
        v21 = v91;
        if (v91)
          *(_DWORD *)v91 += 2;
        *(_QWORD *)(v20 + 8 * v19) = v21;
      }
      *((_DWORD *)a2 + 9) = v19 + 1;
    }
    v22 = v92;
    v92 = 0;
    if (v22)
    {
      if (*v22 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v22;
    }
    v23 = v90;
    v90 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v17);
      else
        *(_DWORD *)v23 -= 2;
    }
    v24 = v91;
    v91 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v17);
      else
        *(_DWORD *)v24 -= 2;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v91 = (WTF::StringImpl *)v93[0];
    WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)(*((_BYTE *)this + 357) & 1));
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)a2 + 2, &v91, (const WTF::StringImpl *)&v92, (uint64_t)v93);
    if (v94)
    {
      v26 = (uint64_t *)((char *)a2 + 24);
      v27 = *((unsigned int *)a2 + 9);
      if ((_DWORD)v27 == *((_DWORD *)a2 + 8))
      {
        v74 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v26, v27 + 1, (unint64_t)&v91);
        v27 = *((unsigned int *)a2 + 9);
        v75 = *((_QWORD *)a2 + 3);
        v76 = *v74;
        if (*v74)
          *v76 += 2;
        *(_QWORD *)(v75 + 8 * v27) = v76;
      }
      else
      {
        v28 = *v26;
        v29 = v91;
        if (v91)
          *(_DWORD *)v91 += 2;
        *(_QWORD *)(v28 + 8 * v27) = v29;
      }
      *((_DWORD *)a2 + 9) = v27 + 1;
    }
    v30 = v92;
    v92 = 0;
    if (v30)
    {
      if (*v30 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v30;
    }
    v31 = v91;
    v91 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
        WTF::StringImpl::destroy(v31, v25);
      else
        *(_DWORD *)v31 -= 2;
    }
    if (*((_BYTE *)this + 168))
    {
      v32 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
      v91 = (WTF::StringImpl *)v93[0];
      v13 = *((unsigned __int8 *)this + 168);
      if (!*((_BYTE *)this + 168))
        goto LABEL_144;
      WTF::JSONImpl::Value::create(v32, *((double *)this + 20));
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v91 = (WTF::StringImpl *)v93[0];
      WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&WebCore::autoAtomData, v33);
    }
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)a2 + 2, &v91, (const WTF::StringImpl *)&v92, (uint64_t)v93);
    if (v94)
    {
      v35 = (uint64_t *)((char *)a2 + 24);
      v36 = *((unsigned int *)a2 + 9);
      if ((_DWORD)v36 == *((_DWORD *)a2 + 8))
      {
        v77 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v35, v36 + 1, (unint64_t)&v91);
        v36 = *((unsigned int *)a2 + 9);
        v78 = *((_QWORD *)a2 + 3);
        v79 = *v77;
        if (*v77)
          *v79 += 2;
        *(_QWORD *)(v78 + 8 * v36) = v79;
      }
      else
      {
        v37 = *v35;
        v38 = v91;
        if (v91)
          *(_DWORD *)v91 += 2;
        *(_QWORD *)(v37 + 8 * v36) = v38;
      }
      *((_DWORD *)a2 + 9) = v36 + 1;
    }
    v39 = v92;
    v92 = 0;
    if (v39)
    {
      if (*v39 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v39;
    }
    v40 = v91;
    v91 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2)
        WTF::StringImpl::destroy(v40, v34);
      else
        *(_DWORD *)v40 -= 2;
    }
    if (!*((_BYTE *)this + 200))
      break;
    v41 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    v91 = (WTF::StringImpl *)v93[0];
    v13 = *((unsigned __int8 *)this + 200);
    if (*((_BYTE *)this + 200))
    {
      WTF::JSONImpl::Value::create(v41, *((double *)this + 24));
      goto LABEL_63;
    }
LABEL_144:
    __break(1u);
LABEL_145:
    v89 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v89 += 2;
    WebCore::convertEnumerationToString(WebCore::VTTDirectionSetting)::$_0::operator() const(void)::impl += 2;
    *v15 = (uint64_t)v89;
    v15[1] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::VTTDirectionSetting)::$_0::operator() const(void)::impl;
    WebCore::convertEnumerationToString(WebCore::VTTDirectionSetting)::$_1::operator() const(void)::impl += 2;
    v15[2] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::VTTDirectionSetting)::$_1::operator() const(void)::impl;
    v14[3232] = 1;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v91 = (WTF::StringImpl *)v93[0];
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&WebCore::autoAtomData, v42);
LABEL_63:
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)a2 + 2, &v91, (const WTF::StringImpl *)&v92, (uint64_t)v93);
  if (v94)
  {
    v44 = (uint64_t *)((char *)a2 + 24);
    v45 = *((unsigned int *)a2 + 9);
    if ((_DWORD)v45 == *((_DWORD *)a2 + 8))
    {
      v80 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v44, v45 + 1, (unint64_t)&v91);
      v45 = *((unsigned int *)a2 + 9);
      v81 = *((_QWORD *)a2 + 3);
      v82 = *v80;
      if (*v80)
        *v82 += 2;
      *(_QWORD *)(v81 + 8 * v45) = v82;
    }
    else
    {
      v46 = *v44;
      v47 = v91;
      if (v91)
        *(_DWORD *)v91 += 2;
      *(_QWORD *)(v46 + 8 * v45) = v47;
    }
    *((_DWORD *)a2 + 9) = v45 + 1;
  }
  v48 = v92;
  v92 = 0;
  if (v48)
  {
    if (*v48 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v48;
  }
  v49 = v91;
  v91 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
      WTF::StringImpl::destroy(v49, v43);
    else
      *(_DWORD *)v49 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v91 = (WTF::StringImpl *)v93[0];
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)(int)*((double *)this + 26));
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)a2 + 2, &v91, (const WTF::StringImpl *)&v92, (uint64_t)v93);
  if (v94)
  {
    v51 = (uint64_t *)((char *)a2 + 24);
    v52 = *((unsigned int *)a2 + 9);
    if ((_DWORD)v52 == *((_DWORD *)a2 + 8))
    {
      v83 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v51, v52 + 1, (unint64_t)&v91);
      v52 = *((unsigned int *)a2 + 9);
      v84 = *((_QWORD *)a2 + 3);
      v85 = *v83;
      if (*v83)
        *v85 += 2;
      *(_QWORD *)(v84 + 8 * v52) = v85;
    }
    else
    {
      v53 = *v51;
      v54 = v91;
      if (v91)
        *(_DWORD *)v91 += 2;
      *(_QWORD *)(v53 + 8 * v52) = v54;
    }
    *((_DWORD *)a2 + 9) = v52 + 1;
  }
  v55 = v92;
  v92 = 0;
  if (v55)
  {
    if (*v55 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v55;
  }
  v56 = v91;
  v91 = 0;
  if (v56)
  {
    if (*(_DWORD *)v56 == 2)
      WTF::StringImpl::destroy(v56, v50);
    else
      *(_DWORD *)v56 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v58 = *((unsigned __int8 *)this + 217);
  {
    WebCore::convertEnumerationToString(WebCore::VTTAlignSetting)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::VTTAlignSetting)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::VTTAlignSetting)::$_2::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::VTTAlignSetting)::$_3::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::VTTAlignSetting)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::VTTAlignSetting)::$_0::operator() const(void)::impl;
    unk_1EE2F4CB0 = &WebCore::convertEnumerationToString(WebCore::VTTAlignSetting)::$_1::operator() const(void)::impl;
    qword_1EE2F4CB8 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::VTTAlignSetting)::$_2::operator() const(void)::impl;
    unk_1EE2F4CC0 = &WebCore::convertEnumerationToString(WebCore::VTTAlignSetting)::$_3::operator() const(void)::impl;
    WebCore::convertEnumerationToString(WebCore::VTTAlignSetting)::$_4::operator() const(void)::impl += 2;
    qword_1EE2F4CC8 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::VTTAlignSetting)::$_4::operator() const(void)::impl;
  }
  v59 = (WTF::StringImpl *)WebCore::convertEnumerationToString(WebCore::VTTAlignSetting)::values[v58];
  if (v59)
    *(_DWORD *)v59 += 2;
  v90 = v59;
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v90, v57);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)a2 + 2, &v91, (const WTF::StringImpl *)&v92, (uint64_t)v93);
  if (v94)
  {
    v61 = (uint64_t *)((char *)a2 + 24);
    v62 = *((unsigned int *)a2 + 9);
    if ((_DWORD)v62 == *((_DWORD *)a2 + 8))
    {
      v86 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v61, v62 + 1, (unint64_t)&v91);
      v62 = *((unsigned int *)a2 + 9);
      v87 = *((_QWORD *)a2 + 3);
      v88 = *v86;
      if (*v86)
        *v88 += 2;
      *(_QWORD *)(v87 + 8 * v62) = v88;
    }
    else
    {
      v63 = *v61;
      v64 = v91;
      if (v91)
        *(_DWORD *)v91 += 2;
      *(_QWORD *)(v63 + 8 * v62) = v64;
    }
    *((_DWORD *)a2 + 9) = v62 + 1;
  }
  v65 = v92;
  v92 = 0;
  if (v65)
  {
    if (*v65 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v65;
  }
  v66 = v90;
  v90 = 0;
  if (v66)
  {
    if (*(_DWORD *)v66 == 2)
      WTF::StringImpl::destroy(v66, v60);
    else
      *(_DWORD *)v66 -= 2;
  }
  result = v91;
  v91 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v60);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::VTTCue::prepareToSpeak(uint64_t a1, uint64_t a2, _QWORD *a3, double a4, double a5)
{
  uint64_t v7;
  _DWORD **v8;
  WTF::StringImpl *result;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  _QWORD *v20;
  void *v21;
  WebCore::SpeechSynthesisUtterance *v22;
  int v23;
  int *v24;
  int v25;
  int v26;
  WTF::StringImpl **v27;
  int *v28;
  char v29;
  float v30;
  float v31;
  float32x2_t v32;
  int8x8_t v33;
  bmalloc::api *v34;
  void *v35;
  _QWORD *v36;
  uint64_t v37;

  v8 = (_DWORD **)(a1 + 144);
  v7 = *(_QWORD *)(a1 + 144);
  if (!v7)
    return (WTF::StringImpl *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a3 + 16))(*a3, a1);
  if (!*(_DWORD *)(v7 + 4))
    return (WTF::StringImpl *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a3 + 16))(*a3, a1);
  v10 = *(_QWORD *)(a1 + 104);
  if (!v10)
    return (WTF::StringImpl *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a3 + 16))(*a3, a1);
  v11 = *(_QWORD *)(v10 + 8);
  if (!v11)
    return (WTF::StringImpl *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a3 + 16))(*a3, a1);
  ++*(_DWORD *)(v11 - 104);
  ++*(_DWORD *)(a2 + 24);
  v14 = *(_DWORD **)(a1 + 272);
  *(_QWORD *)(a1 + 272) = a2;
  if (v14)
  {
    if (v14[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 64))(v14);
    else
      --v14[6];
  }
  v15 = *(_QWORD *)(v11 + 32);
  if (v15)
  {
    v16 = *(_QWORD *)(v15 + 8);
    if (v16)
      v17 = v16 - 96;
    else
      v17 = 0;
  }
  else
  {
    v17 = 0;
  }
  v18 = *(unsigned __int8 *)(v17 + 274);
  if (*(_BYTE *)(v17 + 274))
  {
    if (v18 == 1 || v18 == 2)
      ++*(_DWORD *)(v17 + 312);
  }
  else
  {
    *(_DWORD *)(v17 - 168) += 2;
  }
  ++*(_DWORD *)(a1 + 24);
  v19 = *a3;
  *a3 = 0;
  v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v20 = &off_1E33ECFB8;
  v20[1] = a1;
  v20[2] = v19;
  v36 = v20;
  WebCore::SpeechSynthesisUtterance::create(v17, v8, (uint64_t *)&v36, &v37);
  v22 = *(WebCore::SpeechSynthesisUtterance **)(a1 + 280);
  *(_QWORD *)(a1 + 280) = v37;
  if (v22)
  {
    if (*((_DWORD *)v22 + 8) == 1)
    {
      WebCore::SpeechSynthesisUtterance::~SpeechSynthesisUtterance(v22, v21);
      bmalloc::api::isoDeallocate(v34, v35);
    }
    else
    {
      --*((_DWORD *)v22 + 8);
    }
    v37 = 0;
  }
  if (v36)
    (*(void (**)(_QWORD *))(*v36 + 8))(v36);
  v23 = *(unsigned __int8 *)(v17 + 274);
  if (*(_BYTE *)(v17 + 274))
  {
    if (v23 == 1)
    {
      if (*(_DWORD *)(v17 + 312) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17);
      else
        --*(_DWORD *)(v17 + 312);
    }
    else if (v23 == 2)
    {
      WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v17 + 312));
    }
  }
  else if (*(_DWORD *)(v17 - 168) == 2)
  {
    if ((*(_WORD *)(v17 - 162) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)(v17 - 192), v21);
  }
  else
  {
    *(_DWORD *)(v17 - 168) -= 2;
  }
  v24 = *(int **)(v11 - 40);
  if (v24 && (v25 = v24[1], v26 = *v24 + 2, *v24 = v26, v25))
  {
    v27 = (WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(a1 + 280) + 64) + 24);
  }
  else
  {
    v28 = *(int **)(v11 - 48);
    if (v28)
      *v28 += 2;
    if (v24)
    {
      if (*v24 == 2)
        WTF::StringImpl::destroy((WTF::StringImpl *)v24, (WTF::StringImpl *)v21);
      else
        *v24 -= 2;
    }
    v27 = (WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(a1 + 280) + 64) + 24);
    if (!v28)
    {
      v24 = 0;
      v29 = 1;
      goto LABEL_35;
    }
    v26 = *v28;
    v24 = v28;
  }
  v29 = 0;
  *v24 = v26 + 2;
LABEL_35:
  result = *v27;
  *v27 = (WTF::StringImpl *)v24;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v21);
    else
      *(_DWORD *)result -= 2;
  }
  v30 = a4;
  if (v30 > 1.0)
  {
    v31 = (v30 + -1.0) * 9.0 + 1.0;
    v30 = v31;
  }
  v32.f32[1] = v30;
  v32.f32[0] = a5;
  v33 = (int8x8_t)vminnm_f32(v32, (float32x2_t)0x412000003F800000);
  *(int8x8_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 280) + 64) + 40) = vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)0x3DCCCCCD00000000, (float32x2_t)v33), (int8x8_t)0x3DCCCCCD00000000, v33);
  if ((v29 & 1) == 0)
  {
    if (*v24 == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy((WTF::StringImpl *)v24, (WTF::StringImpl *)v21);
    else
      *v24 -= 2;
  }
  if (*(_DWORD *)(v11 - 104) == 1)
    return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v11 - 120) + 16))(v11 - 120);
  --*(_DWORD *)(v11 - 104);
  return result;
}

unint64_t `non-virtual thunk to'WebCore::VTTCue::logIdentifier(WebCore::VTTCue *this)
{
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *((_QWORD *)this + 37);
  if (!v1)
  {
    v3 = *((_QWORD *)this - 4);
    if (v3 && (v4 = *(_QWORD *)(v3 + 8)) != 0)
    {
      v5 = *(_QWORD *)(v4 - 24);
      v1 = v5 & 0xFFFFFFFFFFFF0000 | (unsigned __int16)WTF::cryptographicallyRandomNumber<unsigned long long>();
      *((_QWORD *)this + 37) = v1;
    }
    else
    {
      return 0;
    }
  }
  return v1;
}

char *`non-virtual thunk to'WebCore::VTTCue::logChannel(WebCore::VTTCue *this)
{
  return &WebCore::LogMedia;
}

WTF *WebCore::VTTCue::beginSpeaking(WebCore::VTTCue *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 34);
  if (*(_BYTE *)(v2 + 152))
    return (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 + 32) + 32))(v2 + 32);
  else
    return WebCore::SpeechSynthesis::speak((WebCore::SpeechSynthesis *)v2, *((WebCore::SpeechSynthesisUtterance **)this + 35));
}

_QWORD *WebCore::VTTCue::pauseSpeaking(_QWORD *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = this[34];
  if (v1 && !*(_BYTE *)(v1 + 152))
  {
    v2 = *(_QWORD *)(v1 + 160);
    if (v2 && (this = *(_QWORD **)(v2 + 8)) != 0)
    {
      v3 = 7;
    }
    else
    {
      this = *(_QWORD **)(v1 + 80);
      if (!this)
        return this;
      v3 = 3;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*this + 8 * v3))();
  }
  return this;
}

WebCore::SpeechSynthesis *WebCore::VTTCue::cancelSpeaking(WebCore::VTTCue *this, void *a2)
{
  WebCore::SpeechSynthesis *result;
  void *v4;
  _DWORD *v5;
  bmalloc::api *v6;
  void *v7;

  result = (WebCore::SpeechSynthesis *)*((_QWORD *)this + 34);
  if (result)
  {
    WebCore::SpeechSynthesis::cancel(result, a2);
    v5 = (_DWORD *)*((_QWORD *)this + 34);
    *((_QWORD *)this + 34) = 0;
    if (v5)
    {
      if (v5[6] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 64))(v5);
      else
        --v5[6];
    }
    result = (WebCore::SpeechSynthesis *)*((_QWORD *)this + 35);
    *((_QWORD *)this + 35) = 0;
    if (result)
    {
      if (*((_DWORD *)result + 8) == 1)
      {
        WebCore::SpeechSynthesisUtterance::~SpeechSynthesisUtterance(result, v4);
        return (WebCore::SpeechSynthesis *)bmalloc::api::isoDeallocate(v6, v7);
      }
      else
      {
        --*((_DWORD *)result + 8);
      }
    }
  }
  return result;
}

WebCore::VTTRegion *WebCore::VTTRegion::VTTRegion(WebCore::VTTRegion *this, WebCore::ScriptExecutionContext *a2)
{
  _DWORD *v3;
  unint64_t StatusReg;
  unsigned int *v5;
  unsigned int v6;
  _QWORD *v7;

  *((_DWORD *)this + 4) = 1;
  *(_QWORD *)this = &off_1E33A18C0;
  *((_QWORD *)this + 1) = 0;
  WebCore::ContextDestructionObserver::observeContext(this, a2);
  *(_QWORD *)this = &off_1E33ED318;
  v3 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v3 += 2;
  *((_QWORD *)this + 3) = v3;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0x4059000000000000;
  *((_DWORD *)this + 12) = 3;
  *(_OWORD *)((char *)this + 52) = xmmword_1968C15A0;
  *((_BYTE *)this + 68) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  v5 = *(unsigned int **)(StatusReg + 736);
  if (!v5)
    v5 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  *((_QWORD *)this + 17) = v5;
  *((_QWORD *)this + 12) = off_1E31F7378;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v7 = off_1E33ECFE0;
  v7[1] = WebCore::VTTRegion::scrollTimerFired;
  v7[2] = 0;
  v7[3] = this;
  *((_QWORD *)this + 18) = v7;
  *((_BYTE *)this + 152) = 1;
  return this;
}

{
  _DWORD *v3;
  unint64_t StatusReg;
  unsigned int *v5;
  unsigned int v6;
  _QWORD *v7;

  *((_DWORD *)this + 4) = 1;
  *(_QWORD *)this = &off_1E33A18C0;
  *((_QWORD *)this + 1) = 0;
  WebCore::ContextDestructionObserver::observeContext(this, a2);
  *(_QWORD *)this = &off_1E33ED318;
  v3 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v3 += 2;
  *((_QWORD *)this + 3) = v3;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0x4059000000000000;
  *((_DWORD *)this + 12) = 3;
  *(_OWORD *)((char *)this + 52) = xmmword_1968C15A0;
  *((_BYTE *)this + 68) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  v5 = *(unsigned int **)(StatusReg + 736);
  if (!v5)
    v5 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  *((_QWORD *)this + 17) = v5;
  *((_QWORD *)this + 12) = off_1E31F7378;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v7 = off_1E33ECFE0;
  v7[1] = WebCore::VTTRegion::scrollTimerFired;
  v7[2] = 0;
  v7[3] = this;
  *((_QWORD *)this + 18) = v7;
  *((_BYTE *)this + 152) = 1;
  return this;
}

WebCore::Element *WebCore::VTTRegion::scrollTimerFired(WebCore::VTTRegion *this)
{
  if ((*((_QWORD *)this + 16) & 0xFFFFFFFFFFFFLL) == 0
    || *(double *)((*((_QWORD *)this + 16) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
  {
    return WebCore::VTTRegion::displayLastTextTrackCueBox(this);
  }
  WebCore::TimerBase::stopSlowCase((WebCore::VTTRegion *)((char *)this + 96));
  return WebCore::VTTRegion::displayLastTextTrackCueBox(this);
}

void WebCore::VTTRegion::~VTTRegion(WebCore::VTTRegion *this)
{
  WebCore::TimerBase *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  *((_QWORD *)this + 12) = off_1E31F7378;
  v2 = (WebCore::VTTRegion *)((char *)this + 96);
  v3 = *((_QWORD *)this + 18);
  *((_QWORD *)v2 + 6) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::TimerBase::~TimerBase(v2);
  v5 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, v4);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  v6 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v6)
  {
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6, v4);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)v4);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, (WTF::StringImpl *)v4);
    else
      *(_DWORD *)v8 -= 2;
  }
  WebCore::ContextDestructionObserver::~ContextDestructionObserver(this, v4);
}

{
  WTF *v1;
  void *v2;

  WebCore::VTTRegion::~VTTRegion(this);
  WTF::fastFree(v1, v2);
}

WTF::StringImpl *WebCore::VTTRegion::setId(WebCore::VTTRegion *this, const WTF::String *a2)
{
  _DWORD *v3;
  WTF::StringImpl *result;

  v3 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v3 += 2;
  result = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = v3;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::VTTRegion::setWidth@<X0>(uint64_t this@<X0>, double a2@<D0>, _QWORD *a3@<X8>)
{
  BOOL v3;
  BOOL v4;
  char v5;

  if (a2 >= 0.0)
  {
    v4 = a2 == 100.0;
    v3 = a2 >= 100.0;
  }
  else
  {
    v3 = 1;
    v4 = 0;
  }
  if (!v4 && v3)
  {
    a3[1] = 0;
    v5 = 1;
  }
  else
  {
    v5 = 0;
    *(double *)(this + 40) = a2;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
  }
  *(_BYTE *)a3 = 0;
  *((_BYTE *)a3 + 16) = v5;
  return this;
}

uint64_t WebCore::VTTRegion::setLines(uint64_t this, int a2)
{
  *(_DWORD *)(this + 48) = a2;
  return this;
}

uint64_t WebCore::VTTRegion::setRegionAnchorX@<X0>(uint64_t this@<X0>, double a2@<D0>, _QWORD *a3@<X8>)
{
  BOOL v3;
  BOOL v4;
  char v5;
  float v6;

  if (a2 >= 0.0)
  {
    v4 = a2 == 100.0;
    v3 = a2 >= 100.0;
  }
  else
  {
    v3 = 1;
    v4 = 0;
  }
  if (!v4 && v3)
  {
    a3[1] = 0;
    v5 = 1;
  }
  else
  {
    v5 = 0;
    v6 = a2;
    *(float *)(this + 52) = v6;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
  }
  *(_BYTE *)a3 = 0;
  *((_BYTE *)a3 + 16) = v5;
  return this;
}

uint64_t WebCore::VTTRegion::setRegionAnchorY@<X0>(uint64_t this@<X0>, double a2@<D0>, _QWORD *a3@<X8>)
{
  BOOL v3;
  BOOL v4;
  char v5;
  float v6;

  if (a2 >= 0.0)
  {
    v4 = a2 == 100.0;
    v3 = a2 >= 100.0;
  }
  else
  {
    v3 = 1;
    v4 = 0;
  }
  if (!v4 && v3)
  {
    a3[1] = 0;
    v5 = 1;
  }
  else
  {
    v5 = 0;
    v6 = a2;
    *(float *)(this + 56) = v6;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
  }
  *(_BYTE *)a3 = 0;
  *((_BYTE *)a3 + 16) = v5;
  return this;
}

uint64_t WebCore::VTTRegion::setViewportAnchorX@<X0>(uint64_t this@<X0>, double a2@<D0>, _QWORD *a3@<X8>)
{
  BOOL v3;
  BOOL v4;
  char v5;
  float v6;

  if (a2 >= 0.0)
  {
    v4 = a2 == 100.0;
    v3 = a2 >= 100.0;
  }
  else
  {
    v3 = 1;
    v4 = 0;
  }
  if (!v4 && v3)
  {
    a3[1] = 0;
    v5 = 1;
  }
  else
  {
    v5 = 0;
    v6 = a2;
    *(float *)(this + 60) = v6;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
  }
  *(_BYTE *)a3 = 0;
  *((_BYTE *)a3 + 16) = v5;
  return this;
}

uint64_t WebCore::VTTRegion::setViewportAnchorY@<X0>(uint64_t this@<X0>, double a2@<D0>, _QWORD *a3@<X8>)
{
  BOOL v3;
  BOOL v4;
  char v5;
  float v6;

  if (a2 >= 0.0)
  {
    v4 = a2 == 100.0;
    v3 = a2 >= 100.0;
  }
  else
  {
    v3 = 1;
    v4 = 0;
  }
  if (!v4 && v3)
  {
    a3[1] = 0;
    v5 = 1;
  }
  else
  {
    v5 = 0;
    v6 = a2;
    *(float *)(this + 64) = v6;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
  }
  *(_BYTE *)a3 = 0;
  *((_BYTE *)a3 + 16) = v5;
  return this;
}

uint64_t WebCore::VTTRegion::setScroll(uint64_t result, char a2)
{
  *(_BYTE *)(result + 68) = a2;
  return result;
}

double WebCore::VTTRegion::updateParametersFromRegion(WebCore::VTTRegion *this, const WebCore::VTTRegion *a2)
{
  double result;

  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  result = *((double *)a2 + 5);
  *((double *)this + 5) = result;
  *(_QWORD *)((char *)this + 52) = *(_QWORD *)((char *)a2 + 52);
  *(_QWORD *)((char *)this + 60) = *(_QWORD *)((char *)a2 + 60);
  *((_BYTE *)this + 68) = *((_BYTE *)a2 + 68);
  return result;
}

WTF::StringImpl *WebCore::VTTRegion::setRegionSettings(WebCore::VTTRegion *this, const WTF::String *a2)
{
  _DWORD *v4;
  WTF::StringImpl *result;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  int64_t v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;
  unsigned __int8 *v17;
  unsigned int v18;
  uint64_t v19;
  int64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t *v29;
  int v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  int v34;
  WebCore::FloatPoint *v35;
  uint64_t *v36;
  uint64_t *v37;
  WTF::StringImpl *v38;
  BOOL v39;

  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  result = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v4;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  v6 = *(_QWORD *)a2;
  if (v6)
  {
    v7 = *(unsigned int *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    v8 = *(_DWORD *)(v6 + 16);
    v9 = (v8 >> 2) & 1;
    v10 = *(unsigned __int8 **)(v6 + 8);
    if ((v8 & 4) == 0)
    {
      v11 = &v10[2 * v7];
      goto LABEL_12;
    }
  }
  else
  {
    v10 = 0;
    v7 = 0;
    v9 = 1;
  }
  v11 = &v10[v7];
LABEL_12:
  while (v10 != v11)
  {
    if (v9)
    {
      if (v10 >= v11)
        goto LABEL_53;
      v12 = v11 - v10;
      while (1)
      {
        v13 = *v10;
        v14 = v13 > 0x20;
        v15 = (1 << v13) & 0x100003600;
        if (v14 || v15 == 0)
          break;
        ++v10;
        if (!--v12)
        {
          v17 = v11;
          goto LABEL_33;
        }
      }
      v17 = v10;
    }
    else
    {
      if (v10 >= v11)
        goto LABEL_55;
      v17 = v10;
      do
      {
        v18 = *(unsigned __int16 *)v17;
        v14 = v18 > 0x20;
        v19 = (1 << v18) & 0x100003600;
        if (v14 || v19 == 0)
          break;
        v17 += 2;
      }
      while (v17 < v11);
    }
LABEL_33:
    if (v9)
    {
      if (v17 >= v11)
      {
        v10 = v17;
      }
      else
      {
        v21 = v11 - v17;
        v10 = v17;
        while (1)
        {
          v22 = *v10;
          v14 = v22 > 0x20;
          v23 = (1 << v22) & 0x100003600;
          if (!v14 && v23 != 0)
            break;
          ++v10;
          if (!--v21)
          {
            v10 = v11;
            break;
          }
        }
      }
LABEL_53:
      v28 = WTF::String::String();
      goto LABEL_56;
    }
    if (v17 >= v11)
    {
      v10 = v17;
    }
    else
    {
      v10 = v17;
      do
      {
        v25 = *(unsigned __int16 *)v10;
        v14 = v25 > 0x20;
        v26 = (1 << v25) & 0x100003600;
        if (!v14 && v26 != 0)
          break;
        v10 += 2;
      }
      while (v10 < v11);
    }
LABEL_55:
    v28 = WTF::String::String();
LABEL_56:
    v29 = v36;
    if (!v36)
    {
      v31 = 0;
      v32 = 0;
      v39 = 1;
      v38 = 0;
      v36 = 0;
LABEL_60:
      v33 = (uint64_t *)((char *)v31 + v32);
      goto LABEL_61;
    }
    *(_DWORD *)v36 += 2;
    v38 = (WTF::StringImpl *)v29;
    v30 = *((_DWORD *)v29 + 4);
    v39 = (v30 & 4) != 0;
    v31 = (uint64_t *)v29[1];
    v36 = v31;
    v32 = *((unsigned int *)v29 + 1);
    if ((v30 & 4) != 0)
      goto LABEL_60;
    v33 = (uint64_t *)((char *)v31 + 2 * v32);
LABEL_61:
    v37 = v33;
    v34 = WebCore::VTTRegion::scanSettingName(v28, &v36);
    if (v34 && v36 != v37)
      WebCore::VTTRegion::parseSettingValue((uint64_t)this, v34, (WebCore::WebVTTParser *)&v36, v35);
    result = v38;
    v38 = 0;
    if (!result)
      goto LABEL_67;
    if (*(_DWORD *)result != 2)
    {
      *(_DWORD *)result -= 2;
LABEL_67:
      if (v29)
        goto LABEL_68;
      continue;
    }
    result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    if (v29)
    {
LABEL_68:
      if (*(_DWORD *)v29 == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy((WTF::StringImpl *)v29, a2);
      else
        *(_DWORD *)v29 -= 2;
    }
  }
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy((WTF::StringImpl *)v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  return result;
}

uint64_t WebCore::VTTRegion::scanSettingName(uint64_t a1, uint64_t **a2)
{
  char *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  int16x8_t v16;
  uint16x8_t v17;
  uint16x8_t v18;
  uint16x8_t v19;
  uint16x8_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;

  v2 = (char *)*a2;
  v3 = (char *)a2[1] - (char *)*a2;
  if (!*((_BYTE *)a2 + 24))
  {
    v6 = v3 & 0x1FFFFFFFELL;
    if ((v3 & 0x1FFFFFFFEuLL) >= 6 && *(_DWORD *)v2 == 6553705 && *(_DWORD *)(v2 + 2) == 3801188)
      goto LABEL_28;
    if ((v3 & 0x1FFFFFFFCuLL) >= 0xC)
    {
      v13 = *(_QWORD *)(v2 + 4);
      if (*(_QWORD *)v2 == 0x65006E0069006CLL && v13 == 0x3A00730065006ELL)
      {
LABEL_42:
        result = 3;
        goto LABEL_43;
      }
      if (*(_QWORD *)v2 == 0x74006400690077 && v13 == 0x3A006800740064)
      {
LABEL_41:
        result = 2;
LABEL_43:
        v12 = 6;
        goto LABEL_58;
      }
    }
    if (v6 >= 0x1E)
    {
      v16 = *(int16x8_t *)v2;
      v17 = (uint16x8_t)vceqq_s16(*(int16x8_t *)v2, (int16x8_t)xmmword_1969F2020);
      v17.i16[0] = vminvq_u16(v17);
      v8 = *(_QWORD *)v2;
      v9 = *(__int128 *)v2 >> 48;
      if (v17.i32[0])
      {
        v18 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v2 + 14), (int16x8_t)xmmword_1969F2030);
        v18.i16[0] = vminvq_u16(v18);
        if (v18.i32[0])
          goto LABEL_53;
      }
    }
    else
    {
      if (v6 < 0x1A)
      {
        if (v6 < 0xE)
          return 0;
        v8 = *(_QWORD *)v2;
        v9 = *(_QWORD *)(v2 + 6);
        goto LABEL_22;
      }
      v16 = *(int16x8_t *)v2;
      v8 = *(_QWORD *)v2;
      v9 = *(__int128 *)v2 >> 48;
    }
    v19 = (uint16x8_t)vceqq_s16(v16, (int16x8_t)xmmword_1969F2040);
    v19.i16[0] = vminvq_u16(v19);
    if (v19.i32[0])
    {
      v20 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v2 + 10), (int16x8_t)xmmword_1969F2050);
      v20.i16[0] = vminvq_u16(v20);
      if (v20.i32[0])
        goto LABEL_57;
    }
LABEL_22:
    if (v8 == 0x6F007200630073 && v9 == 0x3A006C006C006FLL)
      goto LABEL_49;
    return 0;
  }
  v4 = (*((_DWORD *)a2 + 2) - *(_DWORD *)a2);
  if (v4 < 3 || *(_WORD *)v2 != 25705 || *(_WORD *)(v2 + 1) != 14948)
  {
    if ((v3 & 0xFFFFFFFE) < 6uLL)
    {
LABEL_8:
      if (v4 < 0xF)
      {
        if (v4 < 0xD)
        {
          if (v4 < 7)
            return 0;
          LODWORD(v5) = *(_DWORD *)v2;
          goto LABEL_47;
        }
        v5 = *(_QWORD *)v2;
        goto LABEL_45;
      }
      v5 = *(_QWORD *)v2;
      if (*(_QWORD *)v2 != 0x74726F7077656976)
      {
LABEL_45:
        if (v5 != 0x6E616E6F69676572 || *(_QWORD *)(v2 + 5) != 0x3A726F68636E616ELL)
        {
LABEL_47:
          if ((_DWORD)v5 == 1869767539 && *(_DWORD *)(v2 + 3) == 980184175)
          {
LABEL_49:
            result = 6;
            v12 = 7;
            goto LABEL_58;
          }
          return 0;
        }
LABEL_57:
        result = 4;
        v12 = 13;
        goto LABEL_58;
      }
      if (*(_QWORD *)(v2 + 7) != 0x3A726F68636E6174)
        return 0;
LABEL_53:
      result = 5;
      v12 = 15;
      goto LABEL_58;
    }
    if (*(_DWORD *)v2 == 1701734764)
    {
      if (*(_DWORD *)(v2 + 2) != 980641134)
        goto LABEL_8;
      goto LABEL_42;
    }
    if (*(_DWORD *)v2 != 1952737655 || *(_DWORD *)(v2 + 2) != 979924068)
      goto LABEL_8;
    goto LABEL_41;
  }
LABEL_28:
  result = 1;
  v12 = 3;
LABEL_58:
  v21 = (uint64_t *)&v2[2 * v12];
  v22 = (uint64_t *)&v2[v12];
  if (*((_BYTE *)a2 + 24))
    v23 = v22;
  else
    v23 = v21;
  *a2 = v23;
  return result;
}

uint64_t WebCore::VTTRegion::parseSettingValue(uint64_t result, int a2, WebCore::WebVTTParser *this, WebCore::FloatPoint *a4)
{
  uint64_t v6;
  int v7;
  unsigned __int8 *v8;
  unint64_t v9;
  unsigned __int8 *v10;
  unint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  unsigned int v16;
  uint64_t v17;
  WTF::StringImpl *v19;
  unsigned __int8 *v20;
  int v21;
  unint64_t v22;
  unsigned __int8 *v23;
  WTF::StringImpl *v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unsigned __int8 *v32;
  WTF::StringImpl *v33;
  BOOL v34;

  v6 = result;
  v7 = *((unsigned __int8 *)this + 24);
  v8 = *(unsigned __int8 **)this;
  v9 = *((_QWORD *)this + 1);
  v10 = *(unsigned __int8 **)this;
  if (*((_BYTE *)this + 24))
  {
    if (*(_QWORD *)this < v9)
    {
      v11 = v9 - (_QWORD)v8;
      v10 = *(unsigned __int8 **)this;
      while (1)
      {
        v12 = *v10;
        v13 = v12 > 0x20;
        v14 = (1 << v12) & 0x100003600;
        if (!v13 && v14 != 0)
          break;
        ++v10;
        if (!--v11)
        {
          v10 = (unsigned __int8 *)*((_QWORD *)this + 1);
          break;
        }
      }
    }
  }
  else if (*(_QWORD *)this < v9)
  {
    v10 = *(unsigned __int8 **)this;
    do
    {
      v16 = *(unsigned __int16 *)v10;
      v13 = v16 > 0x20;
      v17 = (1 << v16) & 0x100003600;
      if (!v13 && v17 != 0)
        break;
      v10 += 2;
    }
    while ((unint64_t)v10 < v9);
  }
  switch(a2)
  {
    case 1:
      if (*((_BYTE *)this + 24))
        WTF::String::String();
      else
        WTF::String::String();
      v24 = v33;
      *(_QWORD *)this = v10;
      if (!v24)
        goto LABEL_47;
      result = WTF::StringImpl::find();
      v25 = *(_DWORD *)v24;
      if (result != -1)
        goto LABEL_52;
      *(_DWORD *)v24 = v25 + 2;
LABEL_47:
      result = *(_QWORD *)(v6 + 24);
      *(_QWORD *)(v6 + 24) = v24;
      if (!result)
        goto LABEL_50;
      if (*(_DWORD *)result == 2)
      {
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v19);
        if (!v24)
          goto LABEL_80;
        goto LABEL_51;
      }
      *(_DWORD *)result -= 2;
LABEL_50:
      if (v24)
      {
LABEL_51:
        v25 = *(_DWORD *)v24;
LABEL_52:
        v26 = v25 - 2;
        if (v26)
          *(_DWORD *)v24 = v26;
        else
          result = WTF::StringImpl::destroy(v24, v19);
      }
LABEL_80:
      *(_QWORD *)this = v10;
      return result;
    case 2:
      LODWORD(v33) = 0;
      v34 = 0;
      result = WebCore::VTTScanner::scanFloat(this, (float *)&v33, &v34);
      if ((_DWORD)result)
      {
        v20 = *(unsigned __int8 **)this;
        if (*(_QWORD *)this != *((_QWORD *)this + 1))
        {
          v21 = *((_BYTE *)this + 24) ? *v20 : *(unsigned __int16 *)v20;
          if (v21 == 37 && !v34 && *(float *)&v33 <= 100.0)
          {
            v31 = (uint64_t)(*((_BYTE *)this + 24) ? v20 + 1 : v20 + 2);
            if ((unsigned __int8 *)v31 == v10)
              *(double *)(v6 + 40) = *(float *)&v33;
          }
        }
      }
      goto LABEL_80;
    case 3:
      if (*((_BYTE *)this + 24))
      {
        if ((unint64_t)v8 >= v9)
          goto LABEL_80;
        v22 = v9 - (_QWORD)v8;
        v23 = *(unsigned __int8 **)this;
        while (*v23 - 48 <= 9)
        {
          ++v23;
          if (!--v22)
          {
            v23 = (unsigned __int8 *)*((_QWORD *)this + 1);
            break;
          }
        }
      }
      else
      {
        if ((unint64_t)v8 >= v9)
          goto LABEL_80;
        v23 = *(unsigned __int8 **)this;
        do
        {
          if (*(unsigned __int16 *)v23 - 48 > 9)
            break;
          v23 += 2;
        }
        while ((unint64_t)v23 < v9);
      }
      if (v8 == v23)
        goto LABEL_80;
      v27 = v23 - v8;
      v28 = (v23 - v8) >> (v7 == 0);
      if (!*((_BYTE *)this + 24))
        v27 >>= v7 == 0;
      v29 = *(_QWORD *)this;
      if (*((_BYTE *)this + 24))
      {
        result = WTF::parseInteger<unsigned int,unsigned char>(v29, v27, 10, 0);
        if (!(_DWORD)v28)
          goto LABEL_80;
      }
      else
      {
        result = WTF::parseInteger<unsigned int,char16_t>(v29, v27, 10, 0);
        if (!(_DWORD)v28)
          goto LABEL_80;
      }
      if (v23 == v10)
      {
        if ((result & 0xFF00000000) != 0)
          v30 = result;
        else
          v30 = -1;
        *(_DWORD *)(v6 + 48) = v30;
      }
      goto LABEL_80;
    case 4:
      v33 = 0;
      result = WebCore::WebVTTParser::parseFloatPercentageValuePair(this, (WebCore::VTTScanner *)0x2C, (float *)&v33, a4);
      if ((_DWORD)result && *(unsigned __int8 **)this == v10)
        *(_QWORD *)(v6 + 52) = v33;
      goto LABEL_80;
    case 5:
      v33 = 0;
      result = WebCore::WebVTTParser::parseFloatPercentageValuePair(this, (WebCore::VTTScanner *)0x2C, (float *)&v33, a4);
      if ((_DWORD)result && *(unsigned __int8 **)this == v10)
        *(_QWORD *)(v6 + 60) = v33;
      goto LABEL_80;
    case 6:
      if ((byte_1EE337CEC & 1) != 0)
      {
        result = qword_1EE337D58;
      }
      else
      {
        v32 = *(unsigned __int8 **)this;
        WTF::AtomStringImpl::add();
        v8 = v32;
        result = (uint64_t)v33;
        qword_1EE337D58 = (uint64_t)v33;
        byte_1EE337CEC = 1;
      }
      if (result && (v10 - v8) >> (v7 == 0) < (unint64_t)*(unsigned int *)(result + 4))
        goto LABEL_80;
      if (*((_BYTE *)this + 24))
      {
        result = MEMORY[0x19AEA53F4]();
        if ((result & 1) == 0)
          goto LABEL_80;
      }
      else
      {
        result = MEMORY[0x19AEA53E8]();
        if (!(_DWORD)result)
          goto LABEL_80;
      }
      *(_BYTE *)(v6 + 68) = 1;
      goto LABEL_80;
    default:
      goto LABEL_80;
  }
}

uint64_t *WebCore::VTTRegion::textTrackCueContainerScrollingClass(WebCore::VTTRegion *this)
{
  uint64_t v2;

  if ((byte_1EE337CE2 & 1) == 0)
  {
    WTF::AtomStringImpl::add();
    qword_1EE337D08 = v2;
    byte_1EE337CE2 = 1;
  }
  return &qword_1EE337D08;
}

WebCore::Element *WebCore::VTTRegion::appendTextTrackCueBox(WebCore::VTTRegion *a1, uint64_t *a2)
{
  uint64_t v3;
  WebCore::Element *result;
  __int16 v5;
  WebCore::Element *v6;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  char v10[8];
  WTF::StringImpl *v11;
  char v12;

  v3 = *a2;
  result = (WebCore::Element *)*((_QWORD *)a1 + 9);
  if (result == (WebCore::Element *)v3)
    return result;
  v5 = *((_WORD *)result + 14);
  if ((v5 & 0xF000) == 0x9000)
  {
    if (**(WebCore::Element ***)(v3 + 40) == result
      && (*(_WORD *)(v3 + 28) & 0xF000) != 0x9000
      && (*(_BYTE *)(v3 + 22) & 8) != 0)
    {
      return result;
    }
    goto LABEL_13;
  }
  if ((v5 & 4) == 0
    || !*((_QWORD *)result + 10)
    || ((*(unsigned __int8 *)(v3 + 22) ^ *((unsigned __int8 *)result + 22)) & 8) != 0)
  {
    goto LABEL_13;
  }
  v6 = (WebCore::Element *)v3;
  do
    v6 = (WebCore::Element *)*((_QWORD *)v6 + 4);
  while (v6 != result && v6 != 0);
  if (!v6)
  {
LABEL_13:
    WebCore::ContainerNode::appendChild((uint64_t)result, (WebCore::Node *)v3, (uint64_t)v10);
    if (v12)
    {
      v9 = v11;
      v11 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v8);
        else
          *(_DWORD *)v9 -= 2;
      }
    }
    return WebCore::VTTRegion::displayLastTextTrackCueBox(a1);
  }
  return result;
}

WebCore::Element *WebCore::VTTRegion::displayLastTextTrackCueBox(WebCore::VTTRegion *this)
{
  WebCore::Element *result;
  WTF::String *v3;
  WTF *v4;
  __n128 v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  float v8;
  float v9;
  uint64_t v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  double v17;
  double v18;
  double v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  char v22;
  uint64_t v23;

  result = (WebCore::Element *)*((_QWORD *)this + 9);
  if ((*((_QWORD *)result + 8) & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)((*((_QWORD *)result + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195D9A518);
    }
    if (*((_QWORD *)result + 10)
      && ((*((_QWORD *)this + 16) & 0xFFFFFFFFFFFFLL) == 0
       || *(double *)((*((_QWORD *)this + 16) & 0xFFFFFFFFFFFFLL) + 8) == 0.0))
    {
      if (*((_BYTE *)this + 68))
      {
        v4 = (WTF *)WebCore::Element::classList(result);
        if ((byte_1EE337CE2 & 1) == 0)
        {
          WTF::AtomStringImpl::add();
          qword_1EE337D08 = v23;
          byte_1EE337CE2 = 1;
        }
        WebCore::DOMTokenList::addInternal(v4, &qword_1EE337D08, 1uLL, v3, &v20, v5);
        if (v22)
        {
          v7 = v21;
          v21 = 0;
          if (v7)
          {
            if (*(_DWORD *)v7 == 2)
              WTF::StringImpl::destroy(v7, v6);
            else
              *(_DWORD *)v7 -= 2;
          }
        }
      }
      result = (WebCore::Element *)WebCore::Element::boundingClientRect(*((WebCore::Element **)this + 10));
      v10 = *(_QWORD *)(*((_QWORD *)this + 9) + 80);
      if (v10)
      {
        v11 = v8 + v9;
        while ((*(_WORD *)(v10 + 28) & 8) == 0)
        {
          v10 = *(_QWORD *)(v10 + 56);
          if (!v10)
            return result;
        }
LABEL_19:
        result = (WebCore::Element *)WebCore::Element::boundingClientRect((WebCore::Element *)v10);
        v14 = v12 + v13;
        if (v11 >= (float)(v12 + v13))
        {
          while (1)
          {
            v10 = *(_QWORD *)(v10 + 56);
            if (!v10)
              break;
            if ((*(_WORD *)(v10 + 28) & 8) != 0)
              goto LABEL_19;
          }
        }
        else
        {
          v15 = v14 - v12;
          v16 = v14 - v11;
          if (v16 >= v15)
            v16 = v15;
          v17 = *((double *)this + 11) - v16;
          *((double *)this + 11) = v17;
          result = (WebCore::Element *)WebCore::StyledElement::setInlineStyleProperty(*((WebCore::StyledElement **)this + 9), (WTF::StringImpl *)0x1C1, 6, 0, v17);
          if ((*((_QWORD *)this + 16) & 0xFFFFFFFFFFFFLL) == 0
            || *(double *)((*((_QWORD *)this + 16) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
          {
            if (*((_BYTE *)this + 68))
              v18 = 0.433;
            else
              v18 = 0.0;
            *((_QWORD *)this + 15) = 0;
            WTF::MonotonicTime::now(result);
            return (WebCore::Element *)WebCore::TimerBase::setNextFireTime((uint64_t)this + 96, v18 + v19);
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::VTTRegion::startTimer(uint64_t this)
{
  uint64_t v1;
  double v2;
  double v3;

  if ((*(_QWORD *)(this + 128) & 0xFFFFFFFFFFFFLL) == 0
    || *(double *)((*(_QWORD *)(this + 128) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
  {
    v1 = this + 96;
    if (*(_BYTE *)(this + 68))
      v2 = 0.433;
    else
      v2 = 0.0;
    *(_QWORD *)(this + 120) = 0;
    WTF::MonotonicTime::now((WTF::MonotonicTime *)this);
    return WebCore::TimerBase::setNextFireTime(v1, v2 + v3);
  }
  return this;
}

uint64_t WebCore::VTTRegion::getDisplayTree(WebCore::VTTRegion *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  result = *((_QWORD *)this + 10);
  if (!result)
  {
    v3 = *((_QWORD *)this + 1);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 8);
      if (v4)
        v5 = v4 - 96;
      else
        v5 = 0;
    }
    else
    {
      v5 = 0;
    }
    if (*(_BYTE *)(v5 + 274))
    {
      __break(0xC471u);
      JUMPOUT(0x195D9A7B8);
    }
    v6 = bmalloc::api::isoAllocate();
    *(_OWORD *)(v6 + 8) = xmmword_1968BC9D0;
    *(_QWORD *)(v6 + 24) = 0x101C00000002;
    *(_QWORD *)(v6 + 32) = 0;
    *(_QWORD *)(v6 + 40) = v5 - 96;
    *(_OWORD *)(v6 + 48) = 0u;
    *(_OWORD *)(v6 + 64) = 0u;
    ++*(_DWORD *)(v5 + 3132);
    *(_QWORD *)(v6 + 80) = 0;
    *(_QWORD *)(v6 + 88) = 0;
    v8 = WebCore::HTMLNames::divTag;
    if (WebCore::HTMLNames::divTag)
      ++*(_DWORD *)WebCore::HTMLNames::divTag;
    *(_QWORD *)(v6 + 96) = v8;
    *(_QWORD *)(v6 + 104) = 0;
    *(_QWORD *)v6 = off_1E33B9CC0;
    v9 = *((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = v6;
    if (v9)
    {
      if (*(_DWORD *)(v9 + 24) == 2)
      {
        if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v9, v7);
          v6 = *((_QWORD *)this + 10);
        }
      }
      else
      {
        *(_DWORD *)(v9 + 24) -= 2;
      }
    }
    {
      v16 = v6;
      WTF::AtomStringImpl::add();
      v6 = v16;
      WebCore::UserAgentParts::webkitMediaTextTrackRegion(void)::webkitMediaTextTrackRegion = v17;
    }
    v10 = *(_QWORD *)(v6 + 104);
    if (!v10)
      goto LABEL_28;
    v11 = *(_DWORD *)(v10 + 4);
    if ((v11 & 1) != 0)
    {
      v12 = *(uint64_t **)(v10 + 40);
      v13 = *(_DWORD *)(v10 + 52);
      if (!v13)
      {
LABEL_28:
        v14 = 0xFFFFFFFFLL;
LABEL_29:
        WebCore::Element::setAttributeInternal((WTF::StringImpl *)v6, v14, (WebCore::TreeScope *)&WebCore::HTMLNames::useragentpartAttr, (WTF::StringImpl **)&WebCore::UserAgentParts::webkitMediaTextTrackRegion(void)::webkitMediaTextTrackRegion, 0);
        *((_BYTE *)this + 152) = 1;
        goto LABEL_30;
      }
    }
    else
    {
      v12 = (uint64_t *)(v10 + 32);
      v13 = v11 >> 5;
      if (!v13)
        goto LABEL_28;
    }
    v14 = 0;
    while (1)
    {
      v15 = *v12;
      if (*v12 == WebCore::HTMLNames::useragentpartAttr
        || *(_QWORD *)(v15 + 24) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 24)
        && *(_QWORD *)(v15 + 32) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 32))
      {
        goto LABEL_29;
      }
      ++v14;
      v12 += 2;
      if (v13 == v14)
        goto LABEL_28;
    }
  }
  if (*((_BYTE *)this + 152))
  {
LABEL_30:
    WebCore::VTTRegion::prepareRegionDisplayTree(this);
    return *((_QWORD *)this + 10);
  }
  return result;
}

uint64_t WebCore::VTTRegion::prepareRegionDisplayTree(WebCore::VTTRegion *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  double v17;
  double v18;
  double v19;
  uint64_t result;
  uint64_t v21;
  _BYTE v22[8];
  WTF::StringImpl *v23;
  char v24;
  uint64_t v25;

  if (*((_QWORD *)this + 9))
    goto LABEL_31;
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
      v4 = v3 - 96;
    else
      v4 = 0;
  }
  else
  {
    v4 = 0;
  }
  if (*(_BYTE *)(v4 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x195D9AB14);
  }
  v5 = bmalloc::api::isoAllocate();
  *(_OWORD *)(v5 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v5 + 24) = 0x101C00000002;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = v4 - 96;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  ++*(_DWORD *)(v4 + 3132);
  *(_QWORD *)(v5 + 80) = 0;
  *(_QWORD *)(v5 + 88) = 0;
  v7 = WebCore::HTMLNames::divTag;
  if (WebCore::HTMLNames::divTag)
    ++*(_DWORD *)WebCore::HTMLNames::divTag;
  *(_QWORD *)(v5 + 96) = v7;
  *(_QWORD *)(v5 + 104) = 0;
  *(_QWORD *)v5 = off_1E33B9CC0;
  v8 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = v5;
  if (v8)
  {
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v8, v6);
        v5 = *((_QWORD *)this + 9);
      }
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
  }
  {
    v21 = v5;
    WTF::AtomStringImpl::add();
    v5 = v21;
    WebCore::UserAgentParts::webkitMediaTextTrackRegionContainer(void)::webkitMediaTextTrackRegionContainer = v25;
  }
  v9 = *(_QWORD *)(v5 + 104);
  if (!v9)
    goto LABEL_26;
  v10 = *(_DWORD *)(v9 + 4);
  if ((v10 & 1) == 0)
  {
    v11 = (uint64_t *)(v9 + 32);
    v12 = v10 >> 5;
    if (!v12)
      goto LABEL_26;
LABEL_19:
    v13 = 0;
    while (1)
    {
      v14 = *v11;
      if (*v11 == WebCore::HTMLNames::useragentpartAttr
        || *(_QWORD *)(v14 + 24) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 24)
        && *(_QWORD *)(v14 + 32) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 32))
      {
        goto LABEL_27;
      }
      ++v13;
      v11 += 2;
      if (v12 == v13)
        goto LABEL_26;
    }
  }
  v11 = *(uint64_t **)(v9 + 40);
  v12 = *(_DWORD *)(v9 + 52);
  if (v12)
    goto LABEL_19;
LABEL_26:
  v13 = 0xFFFFFFFFLL;
LABEL_27:
  WebCore::Element::setAttributeInternal((WTF::StringImpl *)v5, v13, (WebCore::TreeScope *)&WebCore::HTMLNames::useragentpartAttr, (WTF::StringImpl **)&WebCore::UserAgentParts::webkitMediaTextTrackRegionContainer(void)::webkitMediaTextTrackRegionContainer, 0);
  WebCore::ContainerNode::appendChild(*((_QWORD *)this + 10), *((WebCore::Node **)this + 9), (uint64_t)v22);
  if (v24)
  {
    v16 = v23;
    v23 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v15);
      else
        *(_DWORD *)v16 -= 2;
    }
  }
LABEL_31:
  WebCore::StyledElement::setInlineStyleProperty(*((WebCore::StyledElement **)this + 10), (WTF::StringImpl *)0x1C2, 49, 0, *((double *)this + 5));
  WebCore::StyledElement::setInlineStyleProperty(*((WebCore::StyledElement **)this + 9), (WTF::StringImpl *)0x1C2, 49, 0, *((double *)this + 5));
  v17 = (float)((float)*((unsigned int *)this + 12) * 6.0);
  WebCore::StyledElement::setInlineStyleProperty(*((WebCore::StyledElement **)this + 10), (WTF::StringImpl *)0x189, 50, 0, v17);
  WebCore::StyledElement::setInlineStyleProperty(*((WebCore::StyledElement **)this + 9), (WTF::StringImpl *)0x189, 50, 0, v17);
  v18 = *((float *)this + 15) - *((double *)this + 5) * *((float *)this + 13) / 100.0;
  WebCore::StyledElement::setInlineStyleProperty(*((WebCore::StyledElement **)this + 10), (WTF::StringImpl *)0x18F, 49, 0, v18);
  WebCore::StyledElement::setInlineStyleProperty(*((WebCore::StyledElement **)this + 9), (WTF::StringImpl *)0x18F, 49, 0, v18);
  v19 = *((float *)this + 16) - v17 * *((float *)this + 14) / 100.0;
  WebCore::StyledElement::setInlineStyleProperty(*((WebCore::StyledElement **)this + 10), (WTF::StringImpl *)0x1C1, 50, 0, v19);
  result = WebCore::StyledElement::setInlineStyleProperty(*((WebCore::StyledElement **)this + 9), (WTF::StringImpl *)0x1C1, 50, 0, v19);
  *((_BYTE *)this + 152) = 0;
  return result;
}

uint64_t WebCore::VTTRegion::stopTimer(uint64_t this)
{
  if ((*(_QWORD *)(this + 128) & 0xFFFFFFFFFFFFLL) != 0
    && *(double *)((*(_QWORD *)(this + 128) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
  {
    return WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(this + 96));
  }
  return this;
}

WebCore::VideoTrack *WebCore::VideoTrack::VideoTrack(WebCore::VideoTrack *this, WebCore::ScriptExecutionContext *a2, WebCore::VideoTrackPrivate *a3)
{
  WTF::AtomString *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  WTF::StringImpl *v24;
  __int128 v25;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29[2];
  __int128 v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::VideoTrackPrivate *))(*(_QWORD *)a3 + 80))(v29, a3);
  v6 = (WTF::AtomString *)(*(uint64_t (**)(WebCore::VideoTrackPrivate *))(*(_QWORD *)a3 + 48))(a3);
  (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::VideoTrackPrivate *))(*(_QWORD *)a3 + 56))(&v28, a3);
  (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::VideoTrackPrivate *))(*(_QWORD *)a3 + 64))(&v27, a3);
  WebCore::TrackBase::TrackBase((uint64_t)this, a2, 3, (uint64_t)v29, v6, (_DWORD **)&v28, (_DWORD **)&v27);
  *(_QWORD *)this = &off_1E33EC4F8;
  *((_QWORD *)this + 3) = &unk_1E33EC588;
  *((_QWORD *)this + 15) = 0;
  v8 = v27;
  v27 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = v28;
  v28 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  if (LOBYTE(v29[1]))
  {
    v10 = v29[0];
    v29[0] = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v7);
      else
        *(_DWORD *)v10 -= 2;
    }
  }
  *((_QWORD *)this + 16) = &unk_1E33ED450;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  *(_QWORD *)this = &off_1E33ED340;
  *((_QWORD *)this + 3) = &unk_1E33ED410;
  v11 = (unsigned int *)((char *)a3 + 8);
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = 0;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  *((_QWORD *)this + 21) = a3;
  v13 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)v13 = 1;
  *(_OWORD *)(v13 + 8) = 0u;
  *(_OWORD *)(v13 + 24) = 0u;
  *(_QWORD *)(v13 + 40) = 0;
  v14 = WTF::fastMalloc((WTF *)0xC);
  *(_DWORD *)v14 = 1;
  *(_QWORD *)(v14 + 4) = 0;
  *(_QWORD *)(v13 + 48) = v14;
  *((_QWORD *)this + 22) = v13;
  *((_BYTE *)this + 184) = (*(uint64_t (**)(WebCore::VideoTrackPrivate *))(*(_QWORD *)a3 + 128))(a3);
  v15 = *((_QWORD *)this + 1);
  if (v15)
  {
    v16 = *(_QWORD *)(v15 + 8);
    if (v16)
    {
      v17 = *(_OWORD *)(v16 + 144);
      *(_OWORD *)v29 = *(_OWORD *)(v16 + 128);
      v30 = v17;
      v18 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x30);
      *(_QWORD *)v18 = off_1E33EBF28;
      *((_OWORD *)v18 + 1) = *(_OWORD *)v29;
      *((_OWORD *)v18 + 2) = v30;
      v28 = v18;
      *((_QWORD *)this + 14) = WebCore::TrackPrivateBase::addClient((uint64_t)a3, (uint64_t *)&v28, (uint64_t)this + 128);
      v19 = v28;
      v28 = 0;
      if (v19)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v19 + 8))(v19);
    }
  }
  WebCore::VideoTrack::updateKindFromPrivate(this);
  v22 = *((_QWORD *)this + 21);
  v21 = *((_QWORD *)this + 22);
  v23 = *(_DWORD **)(v22 + 56);
  if (v23)
    *v23 += 2;
  v24 = *(WTF::StringImpl **)(v21 + 8);
  *(_QWORD *)(v21 + 8) = v23;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v20);
    else
      *(_DWORD *)v24 -= 2;
  }
  v25 = *(_OWORD *)(v22 + 80);
  *(_OWORD *)(v21 + 16) = *(_OWORD *)(v22 + 64);
  *(_OWORD *)(v21 + 32) = v25;
  *(_QWORD *)(*(_QWORD *)(v21 + 48) + 4) = *(_QWORD *)(v21 + 24);
  return this;
}

uint64_t WebCore::VideoTrack::updateKindFromPrivate(WebCore::VideoTrack *this)
{
  uint64_t result;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  _DWORD *v6;
  WTF::StringImpl *v7;
  _QWORD *v8;
  _DWORD **v9;
  WTF::StringImpl *v10;
  _DWORD *v11;
  WTF::StringImpl *v12;
  _QWORD *v13;
  _DWORD *v14;
  uint64_t v15;

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 21) + 136))(*((_QWORD *)this + 21));
  switch((int)result)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      WTF::AtomStringImpl::add();
      v3 = (WTF::StringImpl *)v15;
      v14 = (_DWORD *)v15;
      if ((MEMORY[0x19AEA53F4](v15, "alternative", 11) & 1) == 0
        && (MEMORY[0x19AEA53F4](v15, "commentary", 10) & 1) == 0
        && (MEMORY[0x19AEA53F4](v15, "captions", 8) & 1) == 0
        && (MEMORY[0x19AEA53F4](v15, "main", 4) & 1) == 0
        && (MEMORY[0x19AEA53F4](v15, "sign", 4) & 1) == 0)
      {
        result = MEMORY[0x19AEA53F4](v15, "subtitles", 9);
        if (!(_DWORD)result)
          goto LABEL_17;
      }
      if ((*(unsigned int (**)(WebCore::VideoTrack *, _DWORD **))(*(_QWORD *)this + 120))(this, &v14))
      {
        v6 = v14;
        if (!v14)
          goto LABEL_11;
        goto LABEL_10;
      }
      v6 = (_DWORD *)*MEMORY[0x1E0CBF3B8];
      if (*MEMORY[0x1E0CBF3B8])
LABEL_10:
        *v6 += 2;
LABEL_11:
      v7 = (WTF::StringImpl *)*((_QWORD *)this + 15);
      *((_QWORD *)this + 15) = v6;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, v5);
        else
          *(_DWORD *)v7 -= 2;
      }
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v8 = off_1E33ED0D0;
      v8[1] = this;
      v15 = (uint64_t)v8;
      WTF::WeakHashSet<WebCore::MediaSessionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)this + 19, &v15);
      result = v15;
      v15 = 0;
      if (result)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      v3 = (WTF::StringImpl *)v14;
LABEL_17:
      v14 = 0;
      if (v3)
      {
        if (*(_DWORD *)v3 == 2)
          return WTF::StringImpl::destroy(v3, v4);
        else
          *(_DWORD *)v3 -= 2;
      }
      return result;
    case 6:
      v9 = (_DWORD **)MEMORY[0x1E0CBF3B8];
      result = WebCore::VideoTrack::isValidKind(result, MEMORY[0x1E0CBF3B8]);
      if ((_DWORD)result)
      {
        (*(void (**)(WebCore::VideoTrack *, _DWORD **))(*(_QWORD *)this + 120))(this, v9);
        v11 = *v9;
        if (*v9)
          *v11 += 2;
        v12 = (WTF::StringImpl *)*((_QWORD *)this + 15);
        *((_QWORD *)this + 15) = v11;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy(v12, v10);
          else
            *(_DWORD *)v12 -= 2;
        }
        v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v13 = off_1E33ED0D0;
        v13[1] = this;
        v15 = (uint64_t)v13;
        WTF::WeakHashSet<WebCore::MediaSessionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)this + 19, &v15);
        result = v15;
        v15 = 0;
        if (result)
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      }
      return result;
    default:
      return result;
  }
}

void WebCore::VideoTrack::~VideoTrack(WebCore::VideoTrack *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned __int8 *v7;
  int v9;
  unsigned int v10;
  unsigned int v11;
  WTF *v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  WTF::StringImpl *v25;
  WTF *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t i;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;

  v3 = *((_QWORD *)this + 21);
  v4 = (unsigned int *)(v3 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = *((_DWORD *)this + 28);
  v7 = (unsigned __int8 *)(v3 + 12);
  if (__ldaxr((unsigned __int8 *)(v3 + 12)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v7))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEA534C](v3 + 12);
LABEL_7:
  if (*(_DWORD *)(v3 + 28) <= v6)
  {
    __break(0xC471u);
    return;
  }
  v9 = __ldxr(v7);
  if (v9 == 1)
  {
    if (!__stlxr(0, v7))
      goto LABEL_13;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(v3 + 12));
  do
  {
LABEL_13:
    v10 = __ldaxr(v4);
    v11 = v10 - 1;
  }
  while (__stlxr(v11, v4));
  if (!v11)
  {
    atomic_store(1u, (unsigned int *)(v3 + 8));
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  v12 = (WTF *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 1)
    {
      v26 = (WTF *)*((_QWORD *)v12 + 6);
      *((_QWORD *)v12 + 6) = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 1)
          WTF::fastFree(v26, a2);
        else
          --*(_DWORD *)v26;
      }
      v27 = (WTF::StringImpl *)*((_QWORD *)v12 + 1);
      *((_QWORD *)v12 + 1) = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
          WTF::StringImpl::destroy(v27, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v27 -= 2;
      }
      WTF::fastFree(v12, a2);
    }
    else
    {
      --*(_DWORD *)v12;
    }
  }
  v13 = (unsigned int *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v13)
  {
    v14 = v13 + 2;
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, v13 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 8))(v13);
    }
  }
  v17 = *((_QWORD *)this + 19);
  if (v17)
  {
    v28 = *(unsigned int *)(v17 - 4);
    if ((_DWORD)v28)
    {
      for (i = 0; i != v28; ++i)
      {
        v30 = *(unsigned int **)(v17 + 8 * i);
        if (v30 != (unsigned int *)-1)
        {
          *(_QWORD *)(v17 + 8 * i) = 0;
          if (v30)
          {
            do
            {
              v31 = __ldaxr(v30);
              v32 = v31 - 1;
            }
            while (__stlxr(v32, v30));
            if (!v32)
            {
              atomic_store(1u, v30);
              WTF::fastFree((WTF *)v30, a2);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v17 - 16), a2);
  }
  v18 = (unsigned int *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v18)
  {
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v18);
      WTF::fastFree((WTF *)v18, a2);
    }
  }
  v21 = *((_QWORD *)this + 17);
  if (v21)
  {
    *(_QWORD *)(v21 + 8) = 0;
    v22 = (unsigned int *)*((_QWORD *)this + 17);
    *((_QWORD *)this + 17) = 0;
    if (v22)
    {
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
      {
        atomic_store(1u, v22);
        WTF::fastFree((WTF *)v22, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 17) = 0;
  }
  *(_QWORD *)this = &off_1E33EC4F8;
  *((_QWORD *)this + 3) = &unk_1E33EC588;
  v25 = (WTF::StringImpl *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v25 -= 2;
  }
  WebCore::TrackBase::~TrackBase(this, a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::VideoTrack::~VideoTrack(this, a2);
  WTF::fastFree(v2, v3);
}

void `non-virtual thunk to'WebCore::VideoTrack::~VideoTrack(WebCore::VideoTrack *this, void *a2)
{
  WebCore::VideoTrack::~VideoTrack((WebCore::VideoTrack *)((char *)this - 24), a2);
}

{
  WebCore::VideoTrack::~VideoTrack((WebCore::VideoTrack *)((char *)this - 128), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::VideoTrack::~VideoTrack((WebCore::VideoTrack *)((char *)this - 24), a2);
  WTF::fastFree(v2, v3);
}

{
  WTF *v2;
  void *v3;

  WebCore::VideoTrack::~VideoTrack((WebCore::VideoTrack *)((char *)this - 128), a2);
  WTF::fastFree(v2, v3);
}

WTF::StringImpl *WebCore::VideoTrack::setPrivate(WTF::StringImpl *this, WebCore::VideoTrackPrivate *a2)
{
  WebCore::VideoTrackPrivate *v2;
  WTF::StringImpl *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned __int8 *v8;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  WTF::StringImpl *v28;
  __int128 v29;
  WTF::AtomString *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  int v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  WTF::StringImpl *v36[2];
  __int128 v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v2 = (WebCore::VideoTrackPrivate *)*((_QWORD *)this + 21);
  if (v2 != a2)
  {
    v4 = this;
    v5 = (unsigned int *)((char *)v2 + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
    v7 = *((_DWORD *)this + 28);
    v8 = (unsigned __int8 *)v2 + 12;
    if (__ldaxr((unsigned __int8 *)v2 + 12))
    {
      __clrex();
    }
    else if (!__stxr(1u, v8))
    {
      goto LABEL_8;
    }
    this = (WTF::StringImpl *)MEMORY[0x19AEA534C]((char *)v2 + 12);
LABEL_8:
    if (*((_DWORD *)v2 + 7) <= v7)
    {
      __break(0xC471u);
      return this;
    }
    v10 = __ldxr(v8);
    if (v10 == 1)
    {
      if (!__stlxr(0, v8))
      {
        do
        {
LABEL_14:
          v11 = __ldaxr(v5);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v5));
        if (!v12)
        {
          atomic_store(1u, (unsigned int *)v2 + 2);
          (*(void (**)(WebCore::VideoTrackPrivate *))(*(_QWORD *)v2 + 8))(v2);
        }
        v13 = (unsigned int *)((char *)a2 + 8);
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 + 1, v13));
        v15 = (unsigned int *)*((_QWORD *)v4 + 21);
        *((_QWORD *)v4 + 21) = a2;
        if (v15)
        {
          v16 = v15 + 2;
          do
          {
            v17 = __ldaxr(v16);
            v18 = v17 - 1;
          }
          while (__stlxr(v18, v16));
          if (!v18)
          {
            atomic_store(1u, v15 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 8))(v15);
          }
        }
        v19 = *((_QWORD *)v4 + 1);
        if (v19)
        {
          v20 = *(_QWORD *)(v19 + 8);
          if (v20)
          {
            v21 = *(_OWORD *)(v20 + 144);
            *(_OWORD *)v36 = *(_OWORD *)(v20 + 128);
            v37 = v21;
            v22 = WTF::fastMalloc((WTF *)0x30);
            *(_QWORD *)v22 = off_1E33EBF28;
            *(_OWORD *)(v22 + 16) = *(_OWORD *)v36;
            *(_OWORD *)(v22 + 32) = v37;
            v35 = v22;
            *((_QWORD *)v4 + 14) = WebCore::TrackPrivateBase::addClient((uint64_t)a2, &v35, (uint64_t)v4 + 128);
            v23 = v35;
            v35 = 0;
            if (v23)
              (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
          }
        }
        (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)v4 + 21) + 112))(*((_QWORD *)v4 + 21), *((_QWORD *)v4 + 11), *((_QWORD *)v4 + 12));
        (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)v4 + 21) + 120))(*((_QWORD *)v4 + 21), *((unsigned __int8 *)v4 + 184));
        WebCore::VideoTrack::updateKindFromPrivate(v4);
        v26 = *((_QWORD *)v4 + 21);
        v25 = *((_QWORD *)v4 + 22);
        v27 = *(_DWORD **)(v26 + 56);
        if (v27)
          *v27 += 2;
        v28 = *(WTF::StringImpl **)(v25 + 8);
        *(_QWORD *)(v25 + 8) = v27;
        if (v28)
        {
          if (*(_DWORD *)v28 == 2)
            WTF::StringImpl::destroy(v28, v24);
          else
            *(_DWORD *)v28 -= 2;
        }
        v29 = *(_OWORD *)(v26 + 80);
        *(_OWORD *)(v25 + 16) = *(_OWORD *)(v26 + 64);
        *(_OWORD *)(v25 + 32) = v29;
        *(_QWORD *)(*(_QWORD *)(v25 + 48) + 4) = *(_QWORD *)(v25 + 24);
        v30 = (WTF::AtomString *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v4 + 21) + 48))(*((_QWORD *)v4 + 21));
        WTF::AtomString::number(v30);
        v32 = v36[0];
        v36[0] = 0;
        this = (WTF::StringImpl *)*((_QWORD *)v4 + 6);
        *((_QWORD *)v4 + 6) = v32;
        if (!this)
          goto LABEL_36;
        v33 = *(_DWORD *)this - 2;
        if (*(_DWORD *)this == 2)
        {
          WTF::StringImpl::destroy(this, v31);
          this = v36[0];
          v36[0] = 0;
          if (!this)
            goto LABEL_36;
          v33 = *(_DWORD *)this - 2;
          if (*(_DWORD *)this == 2)
          {
            this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, v34);
            goto LABEL_36;
          }
        }
        *(_DWORD *)this = v33;
LABEL_36:
        *((_QWORD *)v4 + 7) = v30;
        return this;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WebCore::VideoTrackPrivate *)((char *)v2 + 12));
    goto LABEL_14;
  }
  return this;
}

uint64_t WebCore::VideoTrack::isValidKind(uint64_t a1, _QWORD *a2)
{
  if ((MEMORY[0x19AEA53F4](*a2, "alternative", 11) & 1) == 0
    && (MEMORY[0x19AEA53F4](*a2, "commentary", 10) & 1) == 0
    && (MEMORY[0x19AEA53F4](*a2, "captions", 8) & 1) == 0
    && (MEMORY[0x19AEA53F4](*a2, "main", 4) & 1) == 0
    && (MEMORY[0x19AEA53F4](*a2, "sign", 4) & 1) == 0)
  {
    JUMPOUT(0x19AEA53F4);
  }
  return 1;
}

uint64_t WebCore::VideoTrack::setSelected(uint64_t this, int a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  if (*(unsigned __int8 *)(this + 184) != a2)
  {
    v2 = this;
    *(_BYTE *)(this + 184) = a2;
    (*(void (**)(_QWORD))(**(_QWORD **)(this + 168) + 120))(*(_QWORD *)(this + 168));
    v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v3 = off_1E33ED008;
    v3[1] = v2;
    v4 = (uint64_t)v3;
    WTF::WeakHashSet<WebCore::MediaSessionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)(v2 + 152), &v4);
    this = v4;
    v4 = 0;
    if (this)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  return this;
}

uint64_t WebCore::VideoTrack::selectedChanged(WebCore::VideoTrack *this, int a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;

  if (*((unsigned __int8 *)this + 184) != a2)
  {
    *((_BYTE *)this + 184) = a2;
    (*(void (**)(_QWORD))(**((_QWORD **)this + 21) + 120))(*((_QWORD *)this + 21));
    v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v3 = off_1E33ED008;
    v3[1] = this;
    v7 = (uint64_t)v3;
    WTF::WeakHashSet<WebCore::MediaSessionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)this + 19, &v7);
    v4 = v7;
    v7 = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v5 = off_1E33ED030;
  v5[1] = this;
  v7 = (uint64_t)v5;
  WTF::WeakHashSet<WebCore::MediaSessionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)this + 19, &v7);
  result = v7;
  v7 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t `non-virtual thunk to'WebCore::VideoTrack::selectedChanged(WebCore::VideoTrack *this, int a2)
{
  return WebCore::VideoTrack::selectedChanged((WebCore::VideoTrack *)((char *)this - 128), a2);
}

__n128 WebCore::VideoTrack::configurationChanged(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _DWORD *v4;
  WTF::StringImpl *v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 176);
  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  v5 = *(WTF::StringImpl **)(v3 + 8);
  *(_QWORD *)(v3 + 8) = v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = *(__n128 *)(a2 + 24);
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(a2 + 8);
  *(__n128 *)(v3 + 32) = result;
  *(_QWORD *)(*(_QWORD *)(v3 + 48) + 4) = *(_QWORD *)(v3 + 24);
  return result;
}

__n128 `non-virtual thunk to'WebCore::VideoTrack::configurationChanged(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _DWORD *v4;
  WTF::StringImpl *v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  v5 = *(WTF::StringImpl **)(v3 + 8);
  *(_QWORD *)(v3 + 8) = v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = *(__n128 *)(a2 + 24);
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(a2 + 8);
  *(__n128 *)(v3 + 32) = result;
  *(_QWORD *)(*(_QWORD *)(v3 + 48) + 4) = *(_QWORD *)(v3 + 24);
  return result;
}

WTF::StringImpl *WebCore::VideoTrack::idChanged(WebCore::VideoTrack *this, WTF::AtomString *a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  int v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *result;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  WTF::AtomString::number(a2);
  v5 = v11;
  v11 = 0;
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = v5;
  if (!v6)
    goto LABEL_4;
  v7 = *(_DWORD *)v6 - 2;
  if (*(_DWORD *)v6 != 2)
    goto LABEL_3;
  WTF::StringImpl::destroy(v6, v4);
  v6 = v11;
  v11 = 0;
  if (v6)
  {
    v7 = *(_DWORD *)v6 - 2;
    if (*(_DWORD *)v6 != 2)
    {
LABEL_3:
      *(_DWORD *)v6 = v7;
      goto LABEL_4;
    }
    WTF::StringImpl::destroy(v6, v10);
  }
LABEL_4:
  *((_QWORD *)this + 7) = a2;
  v8 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v8 = off_1E33ED058;
  *((_QWORD *)v8 + 1) = this;
  v11 = v8;
  WTF::WeakHashSet<WebCore::MediaSessionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)this + 19, &v11);
  result = v11;
  v11 = 0;
  if (result)
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::VideoTrack::idChanged(WebCore::VideoTrack *this, WTF::AtomString *a2)
{
  return WebCore::VideoTrack::idChanged((WebCore::VideoTrack *)((char *)this - 128), a2);
}

uint64_t WebCore::VideoTrack::labelChanged(WebCore::VideoTrack *this, const WTF::AtomString *a2)
{
  _DWORD *v3;
  WTF::StringImpl *v4;
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;

  v3 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v3 += 2;
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = v3;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v5 = off_1E33ED080;
  v5[1] = this;
  v7 = (uint64_t)v5;
  WTF::WeakHashSet<WebCore::MediaSessionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)this + 19, &v7);
  result = v7;
  v7 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t `non-virtual thunk to'WebCore::VideoTrack::labelChanged(WebCore::VideoTrack *this, const WTF::AtomString *a2)
{
  _DWORD *v3;
  WTF::StringImpl *v4;
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;

  v3 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v3 += 2;
  v4 = (WTF::StringImpl *)*((_QWORD *)this - 8);
  *((_QWORD *)this - 8) = v3;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v5 = off_1E33ED080;
  v5[1] = (char *)this - 128;
  v7 = (uint64_t)v5;
  WTF::WeakHashSet<WebCore::MediaSessionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)this + 3, &v7);
  result = v7;
  v7 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::VideoTrack::languageChanged(uint64_t **this, const WTF::AtomString *a2)
{
  _QWORD *v3;
  uint64_t result;
  uint64_t v5;

  WebCore::TrackBase::setLanguage((WebCore::TrackBase *)this, a2);
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = off_1E33ED0F8;
  v3[1] = this;
  v5 = (uint64_t)v3;
  WTF::WeakHashSet<WebCore::MediaSessionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(this + 19, &v5);
  result = v5;
  v5 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::VideoTrack::setLanguage(uint64_t **this, const WTF::AtomString *a2)
{
  _QWORD *v3;
  uint64_t result;
  uint64_t v5;

  WebCore::TrackBase::setLanguage((WebCore::TrackBase *)this, a2);
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = off_1E33ED0F8;
  v3[1] = this;
  v5 = (uint64_t)v3;
  WTF::WeakHashSet<WebCore::MediaSessionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(this + 19, &v5);
  result = v5;
  v5 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t `non-virtual thunk to'WebCore::VideoTrack::languageChanged(uint64_t **this, const WTF::AtomString *a2)
{
  uint64_t **v3;
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;

  v3 = this - 16;
  WebCore::TrackBase::setLanguage((WebCore::TrackBase *)(this - 16), a2);
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = off_1E33ED0F8;
  v4[1] = v3;
  v6 = (uint64_t)v4;
  WTF::WeakHashSet<WebCore::MediaSessionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(this + 3, &v6);
  result = v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::VideoTrack::willRemove(WebCore::VideoTrack *this)
{
  uint64_t **v2;
  _QWORD *v3;
  uint64_t result;
  uint64_t v5;

  v2 = (uint64_t **)((char *)this + 152);
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = off_1E33ED0A8;
  v3[1] = this;
  v5 = (uint64_t)v3;
  WTF::WeakHashSet<WebCore::MediaSessionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v2, &v5);
  result = v5;
  v5 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t `non-virtual thunk to'WebCore::VideoTrack::willRemove(WebCore::VideoTrack *this)
{
  char *v1;
  uint64_t **v2;
  _QWORD *v3;
  uint64_t result;
  uint64_t v5;

  v1 = (char *)this - 128;
  v2 = (uint64_t **)((char *)this + 24);
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = off_1E33ED0A8;
  v3[1] = v1;
  v5 = (uint64_t)v3;
  WTF::WeakHashSet<WebCore::MediaSessionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v2, &v5);
  result = v5;
  v5 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::VideoTrack::setKind(WTF::StringImpl **this, WTF::StringImpl **a2)
{
  uint64_t result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  _QWORD *v8;
  uint64_t v9;

  result = WebCore::VideoTrack::isValidKind((uint64_t)this, a2);
  if (!(_DWORD)result)
    return result;
  if (!(*((unsigned int (**)(WTF::StringImpl **, WTF::StringImpl **))*this + 15))(this, a2))
  {
    v6 = (WTF::StringImpl *)*MEMORY[0x1E0CBF3B8];
    if (!*MEMORY[0x1E0CBF3B8])
      goto LABEL_5;
    goto LABEL_4;
  }
  v6 = *a2;
  if (*a2)
LABEL_4:
    *(_DWORD *)v6 += 2;
LABEL_5:
  v7 = this[15];
  this[15] = v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v5);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v8 = off_1E33ED0D0;
  v8[1] = this;
  v9 = (uint64_t)v8;
  WTF::WeakHashSet<WebCore::MediaSessionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)this + 19, &v9);
  result = v9;
  v9 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::VideoTrack::setLogger(WebCore::VideoTrack *this, const WTF::Logger *a2, unint64_t a3)
{
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v6 = (unsigned int *)((char *)a2 + 8);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  v8 = (unsigned int *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = a2;
  if (v8)
  {
    v9 = v8 + 2;
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v8 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 8))(v8);
    }
  }
  *((_QWORD *)this + 12) = a3 & 0xFFFFFFFFFFFF0000 | *((unsigned __int16 *)this + 22);
  return (*(uint64_t (**)(_QWORD, const WTF::Logger *))(**((_QWORD **)this + 21) + 112))(*((_QWORD *)this + 21), a2);
}

void `non-virtual thunk to'WebCore::VideoTrackList::~VideoTrackList(WebCore::VideoTrackList *this, void *a2)
{
  WebCore::TrackListBase::~TrackListBase((WebCore::VideoTrackList *)((char *)this - 32), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::TrackListBase::~TrackListBase((WebCore::VideoTrackList *)((char *)this - 32), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void WebCore::VideoTrackList::~VideoTrackList(WebCore::VideoTrackList *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::TrackListBase::~TrackListBase(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

_DWORD *WebCore::VideoTrackList::append(uint64_t a1, uint64_t *a2)
{
  unsigned int v4;
  unint64_t v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  void *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *result;
  uint64_t v34;
  WTF *v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;

  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a2 + 168) + 72))(*(_QWORD *)(*a2 + 168));
  LODWORD(v5) = *(_DWORD *)(a1 + 68);
  if ((_DWORD)v5)
  {
    v6 = v4;
    v7 = 0;
    do
    {
      v8 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v7);
      if (*(_DWORD *)(v8 + 40) != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x195D9C1D4);
      }
      v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v8 + 168) + 72))(*(_QWORD *)(v8 + 168));
      v5 = *(unsigned int *)(a1 + 68);
      if (v9 > v6)
        break;
      ++v7;
    }
    while (v7 < v5);
  }
  else
  {
    v7 = 0;
  }
  v10 = *a2;
  if ((_DWORD)v5 == *(_DWORD *)(a1 + 64))
  {
    v11 = v5;
    v12 = v5 + 1;
    v13 = v11 + (v11 >> 2);
    if (v13 >= 0x10)
      v14 = v13 + 1;
    else
      v14 = 16;
    if (v14 <= v12)
      v15 = v11 + 1;
    else
      v15 = v14;
    if (v15 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x195D9C228);
    }
    v16 = *(void **)(a1 + 56);
    v17 = (void *)WTF::fastMalloc((WTF *)(8 * v15));
    *(_DWORD *)(a1 + 64) = v15;
    *(_QWORD *)(a1 + 56) = v17;
    memcpy(v17, v16, 8 * v11);
    if (v16)
    {
      if (*(void **)(a1 + 56) == v16)
      {
        *(_QWORD *)(a1 + 56) = 0;
        *(_DWORD *)(a1 + 64) = 0;
      }
      WTF::fastFree((WTF *)v16, v18);
    }
  }
  v19 = (_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v7);
  v20 = (uint64_t)memmove(v19 + 1, v19, 8 * *(unsigned int *)(a1 + 68) - 8 * v7);
  if (v10)
    ++*(_DWORD *)(v10 + 16);
  *v19 = v10;
  ++*(_DWORD *)(a1 + 68);
  v21 = *a2;
  v22 = *(_QWORD *)(*a2 + 104);
  if (!v22 || !*(_QWORD *)(v22 + 8))
  {
    v23 = (unsigned int *)WTF::WeakPtr<WebCore::Clipboard,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::Clipboard>(a1);
    v25 = v23;
    if (v23)
    {
      do
        v26 = __ldaxr(v23);
      while (__stlxr(v26 + 1, v23));
    }
    v20 = *(_QWORD *)(v21 + 104);
    *(_QWORD *)(v21 + 104) = v25;
    if (v20)
    {
      do
      {
        v27 = __ldaxr((unsigned int *)v20);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, (unsigned int *)v20));
      if (!v28)
      {
        atomic_store(1u, (unsigned int *)v20);
        v34 = *(unsigned int *)(v20 + 28);
        if ((_DWORD)v34)
        {
          v37 = v20;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v20 + 16), (WTF::StringImpl *)(*(_QWORD *)(v20 + 16) + 32 * v34));
          v20 = v37;
        }
        v35 = *(WTF **)(v20 + 16);
        if (v35)
        {
          *(_QWORD *)(v20 + 16) = 0;
          *(_DWORD *)(v20 + 24) = 0;
          v36 = v20;
          WTF::fastFree(v35, v24);
          v20 = v36;
        }
        v20 = WTF::fastFree((WTF *)v20, v24);
      }
    }
  }
  v29 = (_DWORD *)*a2;
  *a2 = 0;
  v38 = v29;
  v30 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v30 || (v31 = *(_QWORD *)(v30 + 96)) == 0)
    v31 = WebCore::threadGlobalDataSlow((WebCore *)v20);
  v32 = *(_QWORD *)(v31 + 40);
  if (!v32)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v31);
    v32 = *(_QWORD *)(v31 + 40);
  }
  WebCore::TrackListBase::scheduleTrackEvent(a1, (_QWORD *)(v32 + 104), (uint64_t *)&v38);
  result = v38;
  if (v38)
  {
    if (v38[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v38 + 16))();
    else
      --v38[4];
  }
  return result;
}

uint64_t WebCore::VideoTrackList::eventTargetInterface(WebCore::VideoTrackList *this)
{
  return 28;
}

uint64_t WebCore::WebVTTElement::WebVTTElement(uint64_t result, int a2, _DWORD **a3, uint64_t a4)
{
  uint64_t *v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD **v31;
  _DWORD **v32;
  _DWORD **v33;
  _DWORD **v34;
  _DWORD **v35;
  _DWORD **v36;
  _DWORD **v37;
  _DWORD **v38;
  const char *v39;
  uint64_t v40;

  if ((byte_1EE337CED & 1) == 0)
  {
    v39 = "c";
    v40 = 2;
    v23 = result;
    v31 = a3;
    v15 = a2;
    v7 = a4;
    WTF::NeverDestroyed<WebCore::QualifiedName,WTF::AnyThreadsAccessTraits>::NeverDestroyed<WTF::AtomString const&,WTF::ASCIILiteral,WTF::AtomString const&>((WebCore::QualifiedName *)&qword_1EE337D60, MEMORY[0x1E0CBF2F8], (uint64_t)&v39, MEMORY[0x1E0CBF2F8]);
    a4 = v7;
    a2 = v15;
    result = v23;
    a3 = v31;
    byte_1EE337CED = 1;
  }
  if ((byte_1EE337CEE & 1) == 0)
  {
    v39 = "v";
    v40 = 2;
    v24 = result;
    v32 = a3;
    v16 = a2;
    v8 = a4;
    WTF::NeverDestroyed<WebCore::QualifiedName,WTF::AnyThreadsAccessTraits>::NeverDestroyed<WTF::AtomString const&,WTF::ASCIILiteral,WTF::AtomString const&>((WebCore::QualifiedName *)&unk_1EE337D68, MEMORY[0x1E0CBF2F8], (uint64_t)&v39, MEMORY[0x1E0CBF2F8]);
    a4 = v8;
    a2 = v16;
    result = v24;
    a3 = v32;
    byte_1EE337CEE = 1;
  }
  if ((byte_1EE337CEF & 1) == 0)
  {
    v39 = "lang";
    v40 = 5;
    v25 = result;
    v33 = a3;
    v17 = a2;
    v9 = a4;
    WTF::NeverDestroyed<WebCore::QualifiedName,WTF::AnyThreadsAccessTraits>::NeverDestroyed<WTF::AtomString const&,WTF::ASCIILiteral,WTF::AtomString const&>((WebCore::QualifiedName *)&unk_1EE337D70, MEMORY[0x1E0CBF2F8], (uint64_t)&v39, MEMORY[0x1E0CBF2F8]);
    a4 = v9;
    a2 = v17;
    result = v25;
    a3 = v33;
    byte_1EE337CEF = 1;
  }
  if ((byte_1EE337CF0 & 1) == 0)
  {
    v39 = "b";
    v40 = 2;
    v26 = result;
    v34 = a3;
    v18 = a2;
    v10 = a4;
    WTF::NeverDestroyed<WebCore::QualifiedName,WTF::AnyThreadsAccessTraits>::NeverDestroyed<WTF::AtomString const&,WTF::ASCIILiteral,WTF::AtomString const&>((WebCore::QualifiedName *)&unk_1EE337D78, MEMORY[0x1E0CBF2F8], (uint64_t)&v39, MEMORY[0x1E0CBF2F8]);
    a4 = v10;
    a2 = v18;
    result = v26;
    a3 = v34;
    byte_1EE337CF0 = 1;
  }
  if ((byte_1EE337CF1 & 1) == 0)
  {
    v39 = "u";
    v40 = 2;
    v27 = result;
    v35 = a3;
    v19 = a2;
    v11 = a4;
    WTF::NeverDestroyed<WebCore::QualifiedName,WTF::AnyThreadsAccessTraits>::NeverDestroyed<WTF::AtomString const&,WTF::ASCIILiteral,WTF::AtomString const&>((WebCore::QualifiedName *)&unk_1EE337D80, MEMORY[0x1E0CBF2F8], (uint64_t)&v39, MEMORY[0x1E0CBF2F8]);
    a4 = v11;
    a2 = v19;
    result = v27;
    a3 = v35;
    byte_1EE337CF1 = 1;
  }
  if ((byte_1EE337CF2 & 1) == 0)
  {
    v39 = "i";
    v40 = 2;
    v28 = result;
    v36 = a3;
    v20 = a2;
    v12 = a4;
    WTF::NeverDestroyed<WebCore::QualifiedName,WTF::AnyThreadsAccessTraits>::NeverDestroyed<WTF::AtomString const&,WTF::ASCIILiteral,WTF::AtomString const&>((WebCore::QualifiedName *)&unk_1EE337D88, MEMORY[0x1E0CBF2F8], (uint64_t)&v39, MEMORY[0x1E0CBF2F8]);
    a4 = v12;
    a2 = v20;
    result = v28;
    a3 = v36;
    byte_1EE337CF2 = 1;
  }
  if ((byte_1EE337CF3 & 1) == 0)
  {
    v39 = "ruby";
    v40 = 5;
    v29 = result;
    v37 = a3;
    v21 = a2;
    v13 = a4;
    WTF::NeverDestroyed<WebCore::QualifiedName,WTF::AnyThreadsAccessTraits>::NeverDestroyed<WTF::AtomString const&,WTF::ASCIILiteral,WTF::AtomString const&>((WebCore::QualifiedName *)&unk_1EE337D90, MEMORY[0x1E0CBF2F8], (uint64_t)&v39, MEMORY[0x1E0CBF2F8]);
    a4 = v13;
    a2 = v21;
    result = v29;
    a3 = v37;
    byte_1EE337CF3 = 1;
  }
  if ((byte_1EE337CF4 & 1) == 0)
  {
    v39 = "rt";
    v40 = 3;
    v30 = result;
    v38 = a3;
    v22 = a2;
    v14 = a4;
    WTF::NeverDestroyed<WebCore::QualifiedName,WTF::AnyThreadsAccessTraits>::NeverDestroyed<WTF::AtomString const&,WTF::ASCIILiteral,WTF::AtomString const&>((WebCore::QualifiedName *)&unk_1EE337D98, MEMORY[0x1E0CBF2F8], (uint64_t)&v39, MEMORY[0x1E0CBF2F8]);
    a4 = v14;
    a2 = v22;
    result = v30;
    a3 = v38;
    byte_1EE337CF4 = 1;
  }
  if ((a2 - 2) > 6)
    v4 = &qword_1EE337D60;
  else
    v4 = (uint64_t *)*(&off_1E33EDAA0 + a2 - 2);
  *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(result + 24) = 0x100C00000002;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = a4 + 96;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  ++*(_DWORD *)(a4 + 3324);
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = 0;
  v5 = (_DWORD *)*v4;
  if (v5)
    ++*v5;
  *(_QWORD *)(result + 96) = v5;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)result = off_1E33ECAC0;
  *(_BYTE *)(result + 112) = 0;
  *(_DWORD *)(result + 116) = a2;
  v6 = *a3;
  if (*a3)
    *v6 += 2;
  *(_QWORD *)(result + 120) = v6;
  return result;
}

uint64_t WebCore::WebVTTElement::cloneElementWithoutAttributesAndChildren@<X0>(WebCore::WebVTTElement *this@<X0>, WebCore::Document *a2@<X1>, _QWORD *a3@<X8>)
{
  int v5;
  int *v6;
  uint64_t v7;
  uint64_t result;
  WTF::StringImpl *v9;
  int v10;
  int v11;
  uint64_t v12;
  int *v13;

  v5 = *((_DWORD *)this + 29);
  v6 = (int *)*((_QWORD *)this + 15);
  if (v6)
  {
    *v6 += 2;
    v7 = bmalloc::api::isoAllocate();
    *v6 += 2;
    v13 = v6;
    result = WebCore::WebVTTElement::WebVTTElement(v7, v5, &v13, (uint64_t)a2);
    *a3 = result;
    v10 = *v6 - 2;
    if (*v6 == 2)
    {
      result = WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
      v10 = *v6;
    }
    else
    {
      *v6 = v10;
    }
    v11 = v10 - 2;
    if (v11)
      *v6 = v11;
    else
      return WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
  }
  else
  {
    v12 = bmalloc::api::isoAllocate();
    v13 = 0;
    result = WebCore::WebVTTElement::WebVTTElement(v12, v5, &v13, (uint64_t)a2);
    *a3 = result;
  }
  return result;
}

void WebCore::VTTCueBox::~VTTCueBox(WebCore::VTTCueBox *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)this = off_1E33ED5B8;
  v3 = (unsigned int *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  *(_QWORD *)this = off_1E33EC5C8;
  v6 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr((unsigned int *)v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, (unsigned int *)v6));
    if (!v8)
    {
      atomic_store(1u, (unsigned int *)v6);
      v9 = *(unsigned int *)(v6 + 28);
      if ((_DWORD)v9)
      {
        v12 = v6;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v6 + 16), (WTF::StringImpl *)(*(_QWORD *)(v6 + 16) + 32 * v9));
        v6 = v12;
      }
      v10 = *(WTF **)(v6 + 16);
      if (v10)
      {
        *(_QWORD *)(v6 + 16) = 0;
        *(_DWORD *)(v6 + 24) = 0;
        v11 = v6;
        WTF::fastFree(v10, a2);
        v6 = v11;
      }
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  WebCore::Element::~Element((uint64_t)this);
}

{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  bmalloc::api *v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E33ED5B8;
  v3 = (unsigned int *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  *(_QWORD *)this = off_1E33EC5C8;
  v6 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr((unsigned int *)v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, (unsigned int *)v6));
    if (!v8)
    {
      atomic_store(1u, (unsigned int *)v6);
      v11 = *(unsigned int *)(v6 + 28);
      if ((_DWORD)v11)
      {
        v14 = v6;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v6 + 16), (WTF::StringImpl *)(*(_QWORD *)(v6 + 16) + 32 * v11));
        v6 = v14;
      }
      v12 = *(WTF **)(v6 + 16);
      if (v12)
      {
        *(_QWORD *)(v6 + 16) = 0;
        *(_DWORD *)(v6 + 24) = 0;
        v13 = v6;
        WTF::fastFree(v12, a2);
        v6 = v13;
      }
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v9, v10);
}

uint64_t WebCore::VTTCue::cueType(WebCore::VTTCue *this)
{
  return 3;
}

uint64_t WebCore::VideoTrack::enabled(WebCore::VideoTrack *this)
{
  return *((unsigned __int8 *)this + 184);
}

const char *WebCore::VideoTrack::logClassName(WebCore::VideoTrack *this)
{
  return "VideoTrack";
}

const char *`non-virtual thunk to'WebCore::VideoTrack::logClassName(WebCore::VideoTrack *this)
{
  return "VideoTrack";
}

uint64_t WebCore::VideoTrackPrivateClient::type(WebCore::VideoTrackPrivateClient *this)
{
  return 2;
}

void WebCore::WebVTTElement::~WebVTTElement(WebCore::WebVTTElement *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WebCore::Element::~Element((uint64_t)this);
}

{
  WTF::StringImpl *v3;
  bmalloc::api *v4;
  void *v5;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v4, v5);
}

uint64_t WebCore::WebVTTElement::isWebVTTElement(WebCore::WebVTTElement *this)
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::VTTCueBox::applyCSSPropertiesWithRegion(void)::$_0,WebCore::VTTCueBox::applyCSSPropertiesWithRegion(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,double,WebCore::VTTCue::AutoKeyword> const&>(WebCore::StyledElement ***a1, double *a2)
{
  return WebCore::StyledElement::setInlineStyleProperty(**a1, (WTF::StringImpl *)0x18F, 3, 0, *a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::VTTCueBox::applyCSSPropertiesWithRegion(void)::$_0,WebCore::VTTCueBox::applyCSSPropertiesWithRegion(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,double,WebCore::VTTCue::AutoKeyword> const&>(uint64_t a1)
{
  return WebCore::StyledElement::setInlineStyleProperty(*(WebCore::StyledElement **)(*(_QWORD *)a1 + 8), (WTF::StringImpl *)0x18F, 0x18Au, 0);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::VTTCueBox::applyCSSProperties(void)::$_0,WebCore::VTTCueBox::applyCSSProperties(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,double,WebCore::VTTCue::AutoKeyword> const&>(WebCore::StyledElement ***a1, double *a2)
{
  return WebCore::StyledElement::setInlineStyleProperty(**a1, (WTF::StringImpl *)0x1C1, 50, 0, *a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::VTTCueBox::applyCSSProperties(void)::$_0,WebCore::VTTCueBox::applyCSSProperties(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,double,WebCore::VTTCue::AutoKeyword> const&>(uint64_t a1)
{
  return WebCore::StyledElement::setInlineStyleProperty(*(WebCore::StyledElement **)(*(_QWORD *)a1 + 8), (WTF::StringImpl *)0x1C1, 0x18Au, 0);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::VTTCueBox::applyCSSProperties(void)::$_2,WebCore::VTTCueBox::applyCSSProperties(void)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,double,WebCore::VTTCue::AutoKeyword> const&>(WebCore::StyledElement ***a1, double *a2)
{
  return WebCore::StyledElement::setInlineStyleProperty(**a1, (WTF::StringImpl *)0x18F, 49, 0, *a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::VTTCueBox::applyCSSProperties(void)::$_2,WebCore::VTTCueBox::applyCSSProperties(void)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,double,WebCore::VTTCue::AutoKeyword> const&>(uint64_t a1)
{
  return WebCore::StyledElement::setInlineStyleProperty(*(WebCore::StyledElement **)(*(_QWORD *)a1 + 8), (WTF::StringImpl *)0x18F, 0x18Au, 0);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::VTTCueBox::applyCSSProperties(void)::$_4,WebCore::VTTCueBox::applyCSSProperties(void)::$_5>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,double,WebCore::VTTCue::AutoKeyword> const&>(WebCore::StyledElement ***a1, double *a2)
{
  return WebCore::StyledElement::setInlineStyleProperty(**a1, (WTF::StringImpl *)0x1C2, 49, 0, *a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::VTTCueBox::applyCSSProperties(void)::$_4,WebCore::VTTCueBox::applyCSSProperties(void)::$_5>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,double,WebCore::VTTCue::AutoKeyword> const&>(uint64_t a1)
{
  return WebCore::StyledElement::setInlineStyleProperty(*(WebCore::StyledElement **)(*(_QWORD *)a1 + 8), (WTF::StringImpl *)0x1C2, 0x18Au, 0);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::VTTCueBox::applyCSSProperties(void)::$_6,WebCore::VTTCueBox::applyCSSProperties(void)::$_7>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,double,WebCore::VTTCue::AutoKeyword> const&>(WebCore::StyledElement ***a1, double *a2)
{
  return WebCore::StyledElement::setInlineStyleProperty(**a1, (WTF::StringImpl *)0x189, 50, 0, *a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::VTTCueBox::applyCSSProperties(void)::$_6,WebCore::VTTCueBox::applyCSSProperties(void)::$_7>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,double,WebCore::VTTCue::AutoKeyword> const&>(uint64_t a1)
{
  return WebCore::StyledElement::setInlineStyleProperty(*(WebCore::StyledElement **)(*(_QWORD *)a1 + 8), (WTF::StringImpl *)0x189, 0x18Au, 0);
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,double,WebCore::VTTCue::AutoKeyword> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,double,WebCore::VTTCue::AutoKeyword> const>(uint64_t a1, double *a2, double *a3)
{
  return *a2 == *a3;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<1ul,1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,double,WebCore::VTTCue::AutoKeyword> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,double,WebCore::VTTCue::AutoKeyword> const>(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  return *a2 == *a3;
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [13]>(WTF::Logger::LogSiteIdentifier *a1, const char *a2)
{
  uint64_t result;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  NSObject *v12;
  uint64_t v13;
  void *v14;
  char *v15;
  unsigned __int8 *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  WTF::Logger *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::Logger *v28;
  uint64_t v29;
  WTF::StringImpl **v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  int v34;
  WTF::Logger *v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  uint8_t buf[4];
  _BYTE v41[12];
  int v42;
  WTF::StringImpl *v43[3];

  v43[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(a1);
  result = WTF::String::String((WTF::String *)&v37, a2);
  if (!v38)
  {
    v5 = 0;
    if (v37)
      goto LABEL_3;
LABEL_72:
    v6 = 0;
    goto LABEL_4;
  }
  v5 = *((_DWORD *)v38 + 1);
  if (!v37)
    goto LABEL_72;
LABEL_3:
  v6 = *((_DWORD *)v37 + 1);
LABEL_4:
  if ((v6 | v5) < 0 || (result = (v5 + v6), __OFADD__(v5, v6)))
  {
    v39 = 0;
    goto LABEL_76;
  }
  if (v38)
  {
    v7 = *((_DWORD *)v38 + 4);
    v8 = (v7 >> 2) & 1;
    if (v37 && (v7 & 4) != 0)
      goto LABEL_9;
  }
  else
  {
    if (v37)
    {
LABEL_9:
      v8 = (*((unsigned __int8 *)v37 + 16) >> 2) & 1;
      goto LABEL_10;
    }
    v8 = 1;
  }
LABEL_10:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (uint64_t)v38, (uint64_t)v37, &v39);
  if (!v39)
  {
LABEL_76:
    __break(0xC471u);
    return result;
  }
  v10 = v37;
  v37 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = v38;
  v38 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = qword_1ECE7C4A0;
  v13 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v13)
  {
    WTF::String::utf8();
    v15 = v35 ? (char *)v35 + 16 : 0;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)v41 = v15;
    _os_log_impl(&dword_1940B8000, v12, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    v13 = (uint64_t)v35;
    v35 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 1)
        v13 = WTF::fastFree((WTF *)v13, v14);
      else
        --*(_DWORD *)v13;
    }
  }
  if (WebCore::LogMedia && byte_1ECE7C490)
  {
    v16 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v17 = *v16;
      if ((v17 & 1) != 0)
        break;
      v18 = __ldaxr(v16);
      if (v18 == v17)
      {
        if (!__stxr(v17 | 1, v16))
        {
          v19 = WTF::Logger::observers((WTF::Logger *)v13);
          v20 = *(unsigned int *)(v19 + 12);
          if ((_DWORD)v20)
          {
            v21 = *(uint64_t **)v19;
            v22 = *(_QWORD *)v19 + 8 * v20;
            do
            {
              v23 = *v21;
              *(_DWORD *)buf = 0;
              WTF::Logger::LogSiteIdentifier::toString(a1);
              v42 = 0;
              WTF::String::String((WTF::String *)v43, a2);
              v35 = 0;
              v36 = 0;
              v24 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v36) = 2;
              v35 = v24;
              v25 = HIDWORD(v36);
              *((_DWORD *)v24 + 4 * HIDWORD(v36)) = *(_DWORD *)buf;
              v26 = *(_QWORD *)&v41[4];
              if (*(_QWORD *)&v41[4])
                **(_DWORD **)&v41[4] += 2;
              *((_QWORD *)v24 + 2 * v25 + 1) = v26;
              *((_DWORD *)v24 + 4 * (v25 + 1)) = v42;
              v27 = v43[0];
              if (v43[0])
                *(_DWORD *)v43[0] += 2;
              *((_QWORD *)v24 + 2 * (v25 + 1) + 1) = v27;
              HIDWORD(v36) = v25 + 2;
              (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v23 + 16))(v23, &WebCore::LogMedia, 1, &v35);
              v28 = v35;
              if (HIDWORD(v36))
              {
                v29 = 16 * HIDWORD(v36);
                v30 = (WTF::StringImpl **)((char *)v35 + 8);
                do
                {
                  v31 = *v30;
                  *v30 = 0;
                  if (v31)
                  {
                    if (*(_DWORD *)v31 == 2)
                      WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v14);
                    else
                      *(_DWORD *)v31 -= 2;
                  }
                  v30 += 2;
                  v29 -= 16;
                }
                while (v29);
                v28 = v35;
              }
              if (v28)
              {
                v35 = 0;
                LODWORD(v36) = 0;
                WTF::fastFree(v28, v14);
              }
              v32 = v43[0];
              v43[0] = 0;
              if (v32)
              {
                if (*(_DWORD *)v32 == 2)
                  WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v14);
                else
                  *(_DWORD *)v32 -= 2;
              }
              v33 = *(WTF::StringImpl **)&v41[4];
              *(_QWORD *)&v41[4] = 0;
              if (v33)
              {
                if (*(_DWORD *)v33 == 2)
                  WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v14);
                else
                  *(_DWORD *)v33 -= 2;
              }
              ++v21;
            }
            while (v21 != (uint64_t *)v22);
          }
          v34 = __ldxr(v16);
          if (v34 == 1)
          {
            if (!__stlxr(0, v16))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v39;
  v39 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v14);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::VTTCue::prepareToSpeak(WebCore::SpeechSynthesis &,double,double,WTF::Function<void ()(WebCore::TextTrackCue const&)> &&)::$_0,void,WebCore::SpeechSynthesisUtterance const&>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  _DWORD *v3;

  *a1 = &off_1E33ECFB8;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (v3[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 72))(v3);
    else
      --v3[6];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::VTTCue::prepareToSpeak(WebCore::SpeechSynthesis &,double,double,WTF::Function<void ()(WebCore::TextTrackCue const&)> &&)::$_0,void,WebCore::SpeechSynthesisUtterance const&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  _DWORD *v4;

  *(_QWORD *)this = &off_1E33ECFB8;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (v4[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 72))(v4);
    else
      --v4[6];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::VTTCue::prepareToSpeak(WebCore::SpeechSynthesis &,double,double,WTF::Function<void ()(WebCore::TextTrackCue const&)> &&)::$_0,void,WebCore::SpeechSynthesisUtterance const&>::call(uint64_t a1, void *a2)
{
  uint64_t v3;
  WebCore::SpeechSynthesisUtterance *v4;
  uint64_t v5;
  _DWORD *v6;
  bmalloc::api *v8;
  void *v9;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(WebCore::SpeechSynthesisUtterance **)(v3 + 280);
  *(_QWORD *)(v3 + 280) = 0;
  if (v4)
  {
    if (*((_DWORD *)v4 + 8) == 1)
    {
      WebCore::SpeechSynthesisUtterance::~SpeechSynthesisUtterance(v4, a2);
      bmalloc::api::isoDeallocate(v8, v9);
    }
    else
    {
      --*((_DWORD *)v4 + 8);
    }
  }
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_DWORD **)(v5 + 272);
  *(_QWORD *)(v5 + 272) = 0;
  if (v6)
  {
    if (v6[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 64))(v6);
    else
      --v6[6];
  }
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::VTTRegion::*&)(void),WebCore::VTTRegion*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::VideoTrack::setSelected(BOOL)::$_0,void,WebCore::VideoTrackClient &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 48))(a2, *(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WebCore::VideoTrack::selectedChanged(BOOL)::$_0,void,WebCore::VideoTrackClient &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 48))(a2, *(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WebCore::VideoTrack::idChanged(unsigned long long)::$_0,void,WebCore::VideoTrackClient &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WebCore::VideoTrack::labelChanged(WTF::AtomString const&)::$_0,void,WebCore::VideoTrackClient &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WebCore::VideoTrack::willRemove(void)::$_0,void,WebCore::VideoTrackClient &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 56))(a2, *(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WebCore::VideoTrack::setKind(WTF::AtomString const&)::$_0,void,WebCore::VideoTrackClient &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WebCore::VideoTrack::setLanguage(WTF::AtomString const&)::$_0,void,WebCore::VideoTrackClient &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 40))(a2, *(_QWORD *)(a1 + 8));
}

uint64_t WebCore::WebVTTParser::parseFloatPercentageValue(WebCore::WebVTTParser *this, WebCore::VTTScanner *a2, float *a3)
{
  int v5;
  uint64_t result;
  unsigned __int8 *v7;
  int v8;
  unsigned __int8 *v9;
  BOOL v10;
  float v11;

  v11 = 0.0;
  v10 = 0;
  v5 = WebCore::VTTScanner::scanFloat(this, &v11, &v10);
  result = 0;
  if (v5)
  {
    v7 = *(unsigned __int8 **)this;
    if (*(_QWORD *)this == *((_QWORD *)this + 1))
      return 0;
    v8 = *((_BYTE *)this + 24) ? *v7 : *(unsigned __int16 *)v7;
    if (v8 != 37)
    {
      return 0;
    }
    else
    {
      result = 0;
      if (*((_BYTE *)this + 24))
        v9 = v7 + 1;
      else
        v9 = v7 + 2;
      *(_QWORD *)this = v9;
      if (!v10 && v11 <= 100.0)
      {
        *(float *)a2 = v11;
        return 1;
      }
    }
  }
  return result;
}

uint64_t WebCore::WebVTTParser::parseFloatPercentageValuePair(WebCore::WebVTTParser *this, WebCore::VTTScanner *a2, float *a3, WebCore::FloatPoint *a4)
{
  int v5;
  unsigned __int8 *v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  float v12;
  int v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  uint64_t v17;
  float v18;
  BOOL v20;
  float v21;
  BOOL v22;
  float v23;

  v5 = (int)a2;
  v21 = 0.0;
  v20 = 0;
  if (!WebCore::VTTScanner::scanFloat(this, &v21, &v20))
    return 0;
  v7 = *(unsigned __int8 **)this;
  v8 = *((_QWORD *)this + 1);
  if (*(_QWORD *)this == v8)
    return 0;
  v9 = *((unsigned __int8 *)this + 24);
  v10 = *((_BYTE *)this + 24) ? *v7 : *(unsigned __int16 *)v7;
  if (v10 != 37)
    return 0;
  v11 = (uint64_t)(*((_BYTE *)this + 24) ? v7 + 1 : v7 + 2);
  *(_QWORD *)this = v11;
  if (v20)
    return 0;
  v12 = v21;
  if (v21 > 100.0 || v11 == v8)
    return 0;
  v13 = v9 ? v7[1] : *((unsigned __int16 *)v7 + 1);
  if (v13 != v5)
    return 0;
  v14 = v9 ? v11 + 1 : v11 + 2;
  *(_QWORD *)this = v14;
  v23 = 0.0;
  v22 = 0;
  if (!WebCore::VTTScanner::scanFloat(this, &v23, &v22))
    return 0;
  v15 = *(unsigned __int8 **)this;
  if (*(_QWORD *)this == *((_QWORD *)this + 1))
    return 0;
  v16 = *((_BYTE *)this + 24) ? *v15 : *(unsigned __int16 *)v15;
  if (v16 != 37)
    return 0;
  v17 = (uint64_t)(*((_BYTE *)this + 24) ? v15 + 1 : v15 + 2);
  *(_QWORD *)this = v17;
  if (v22)
    return 0;
  v18 = v23;
  if (v23 > 100.0)
    return 0;
  *a3 = v12;
  a3[1] = v18;
  return 1;
}

uint64_t WebCore::WebVTTParser::WebVTTParser(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v5;
  const WTF::String *v6;
  int v7;
  const char *v8;
  uint64_t *v9;
  __int128 v10;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  const char *v16;
  uint64_t v17;

  *(_QWORD *)a1 = a3;
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 40) = 257;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_BYTE *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 82) = 0;
  *(_QWORD *)(a1 + 89) = 0;
  *(_QWORD *)(a1 + 104) = WebCore::SegmentedString::advanceEmpty;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = WebCore::SegmentedString::advanceEmpty;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 156) = 1;
  *(_WORD *)(a1 + 160) = 0;
  {
    PAL::UTF8Encoding(void)::globalUTF8Encoding = (uint64_t)&off_1E31F4A18;
    *((_QWORD *)&xmmword_1ECE86C80 + 1) = v14;
    v16 = (const char *)xmmword_1ECE86C80;
    v17 = v14;
    if (v14 && PAL::nonBackslashEncodings && *(_QWORD *)PAL::nonBackslashEncodings)
    {
      if (WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, &v16))
      {
        v15 = 165;
      }
      else
      {
        v15 = 92;
      }
    }
    else
    {
      v15 = 92;
    }
    word_1ECE86C90 = v15;
  }
  v5 = WTF::fastMalloc((WTF *)0x60);
  *(_DWORD *)v5 = 1;
  v7 = WebCore::TextResourceDecoder::determineContentType((WebCore::TextResourceDecoder *)&WebCore::textPlainContentTypeAtomData, v6);
  *(_DWORD *)(v5 + 4) = v7;
  if (v7 == 2)
  {
    v9 = &PAL::UTF8Encoding(void)::globalUTF8Encoding;
    {
      PAL::UTF8Encoding(void)::globalUTF8Encoding = (uint64_t)&off_1E31F4A18;
      *(_QWORD *)&xmmword_1ECE86C80 = PAL::atomCanonicalTextEncodingName((uint64_t *)"UTF-8", (PAL *)"UTF-8", v8);
      *((_QWORD *)&xmmword_1ECE86C80 + 1) = v12;
      v16 = (const char *)xmmword_1ECE86C80;
      v17 = v12;
      if (v12 && PAL::nonBackslashEncodings && *(_QWORD *)PAL::nonBackslashEncodings)
      {
        if (WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, &v16))
        {
          v13 = 165;
        }
        else
        {
          v13 = 92;
        }
      }
      else
      {
        v13 = 92;
      }
      v9 = &PAL::UTF8Encoding(void)::globalUTF8Encoding;
      word_1ECE86C90 = v13;
    }
  }
  else
  {
    v9 = &PAL::UTF8Encoding(void)::globalUTF8Encoding;
    if (!*((_QWORD *)&xmmword_1ECE86C80 + 1))
      v9 = PAL::Latin1Encoding((PAL *)&PAL::UTF8Encoding(void)::globalUTF8Encoding);
  }
  *(_QWORD *)(v5 + 8) = &off_1E31F4A18;
  v10 = *(_OWORD *)(v9 + 1);
  *(_WORD *)(v5 + 32) = *((_WORD *)v9 + 12);
  *(_OWORD *)(v5 + 16) = v10;
  *(_QWORD *)(v5 + 40) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_DWORD *)(v5 + 56) = 0;
  *(_QWORD *)(v5 + 72) = 0;
  *(_QWORD *)(v5 + 80) = 0;
  *(_QWORD *)(v5 + 64) = 0;
  *(_QWORD *)(v5 + 87) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = v5;
  *(_DWORD *)(a1 + 192) = 10000000;
  *(_BYTE *)(a1 + 196) = 1;
  *(_QWORD *)(a1 + 200) = 0;
  *(_DWORD *)(a1 + 208) = 10000000;
  *(_BYTE *)(a1 + 212) = 1;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_DWORD *)(a1 + 232) = 0;
  *(_BYTE *)(a1 + 236) = 1;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 268) = 0u;
  *(_BYTE *)(a1 + 284) = 1;
  *(_QWORD *)(a1 + 288) = a2;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  return a1;
}

{
  uint64_t v5;
  const WTF::String *v6;
  int v7;
  const char *v8;
  uint64_t *v9;
  __int128 v10;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  const char *v16;
  uint64_t v17;

  *(_QWORD *)a1 = a3;
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 40) = 257;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_BYTE *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 82) = 0;
  *(_QWORD *)(a1 + 89) = 0;
  *(_QWORD *)(a1 + 104) = WebCore::SegmentedString::advanceEmpty;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = WebCore::SegmentedString::advanceEmpty;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 156) = 1;
  *(_WORD *)(a1 + 160) = 0;
  {
    PAL::UTF8Encoding(void)::globalUTF8Encoding = (uint64_t)&off_1E31F4A18;
    *((_QWORD *)&xmmword_1ECE86C80 + 1) = v14;
    v16 = (const char *)xmmword_1ECE86C80;
    v17 = v14;
    if (v14 && PAL::nonBackslashEncodings && *(_QWORD *)PAL::nonBackslashEncodings)
    {
      if (WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, &v16))
      {
        v15 = 165;
      }
      else
      {
        v15 = 92;
      }
    }
    else
    {
      v15 = 92;
    }
    word_1ECE86C90 = v15;
  }
  v5 = WTF::fastMalloc((WTF *)0x60);
  *(_DWORD *)v5 = 1;
  v7 = WebCore::TextResourceDecoder::determineContentType((WebCore::TextResourceDecoder *)&WebCore::textPlainContentTypeAtomData, v6);
  *(_DWORD *)(v5 + 4) = v7;
  if (v7 == 2)
  {
    v9 = &PAL::UTF8Encoding(void)::globalUTF8Encoding;
    {
      PAL::UTF8Encoding(void)::globalUTF8Encoding = (uint64_t)&off_1E31F4A18;
      *(_QWORD *)&xmmword_1ECE86C80 = PAL::atomCanonicalTextEncodingName((uint64_t *)"UTF-8", (PAL *)"UTF-8", v8);
      *((_QWORD *)&xmmword_1ECE86C80 + 1) = v12;
      v16 = (const char *)xmmword_1ECE86C80;
      v17 = v12;
      if (v12 && PAL::nonBackslashEncodings && *(_QWORD *)PAL::nonBackslashEncodings)
      {
        if (WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, &v16))
        {
          v13 = 165;
        }
        else
        {
          v13 = 92;
        }
      }
      else
      {
        v13 = 92;
      }
      v9 = &PAL::UTF8Encoding(void)::globalUTF8Encoding;
      word_1ECE86C90 = v13;
    }
  }
  else
  {
    v9 = &PAL::UTF8Encoding(void)::globalUTF8Encoding;
    if (!*((_QWORD *)&xmmword_1ECE86C80 + 1))
      v9 = PAL::Latin1Encoding((PAL *)&PAL::UTF8Encoding(void)::globalUTF8Encoding);
  }
  *(_QWORD *)(v5 + 8) = &off_1E31F4A18;
  v10 = *(_OWORD *)(v9 + 1);
  *(_WORD *)(v5 + 32) = *((_WORD *)v9 + 12);
  *(_OWORD *)(v5 + 16) = v10;
  *(_QWORD *)(v5 + 40) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_DWORD *)(v5 + 56) = 0;
  *(_QWORD *)(v5 + 72) = 0;
  *(_QWORD *)(v5 + 80) = 0;
  *(_QWORD *)(v5 + 64) = 0;
  *(_QWORD *)(v5 + 87) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = v5;
  *(_DWORD *)(a1 + 192) = 10000000;
  *(_BYTE *)(a1 + 196) = 1;
  *(_QWORD *)(a1 + 200) = 0;
  *(_DWORD *)(a1 + 208) = 10000000;
  *(_BYTE *)(a1 + 212) = 1;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_DWORD *)(a1 + 232) = 0;
  *(_BYTE *)(a1 + 236) = 1;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 268) = 0u;
  *(_BYTE *)(a1 + 284) = 1;
  *(_QWORD *)(a1 + 288) = a2;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  return a1;
}

double WebCore::WebVTTParser::takeCues@<D0>(WebCore::WebVTTParser *this@<X0>, uint64_t a2@<X8>)
{
  double result;

  *(_QWORD *)a2 = *((_QWORD *)this + 37);
  result = *((double *)this + 38);
  *((_QWORD *)this + 37) = 0;
  *((_QWORD *)this + 38) = 0;
  *(double *)(a2 + 8) = result;
  return result;
}

double WebCore::WebVTTParser::takeRegions@<D0>(WebCore::WebVTTParser *this@<X0>, uint64_t a2@<X8>)
{
  double result;

  *(_QWORD *)a2 = *((_QWORD *)this + 39);
  result = *((double *)this + 40);
  *((_QWORD *)this + 39) = 0;
  *((_QWORD *)this + 40) = 0;
  *(double *)(a2 + 8) = result;
  return result;
}

double WebCore::WebVTTParser::takeStyleSheets@<D0>(WebCore::WebVTTParser *this@<X0>, uint64_t a2@<X8>)
{
  double result;

  *(_QWORD *)a2 = *((_QWORD *)this + 41);
  result = *((double *)this + 42);
  *((_QWORD *)this + 41) = 0;
  *((_QWORD *)this + 42) = 0;
  *(double *)(a2 + 8) = result;
  return result;
}

uint64_t WebCore::WebVTTParser::parseFileHeader(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t result;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;

  *(_DWORD *)(a1 + 8) = 0;
  v4 = a1 + 16;
  WebCore::SegmentedString::clear((WebCore::SegmentedString *)(a1 + 16), a2);
  v6 = *(WTF::StringImpl **)(a1 + 136);
  *(_QWORD *)(a1 + 136) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = *(WTF::StringImpl **)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v5);
    else
      *(_DWORD *)v7 -= 2;
  }
  *(_DWORD *)(a1 + 152) = 0;
  *(_WORD *)(a1 + 160) = 0;
  v8 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v12 = (WTF::StringImpl *)v8;
  if (v8)
  {
    LODWORD(v13) = *(_DWORD *)(v8 + 4);
    HIDWORD(v13) = v13;
    v14 = 0;
    v15 = 257;
    if ((_DWORD)v13)
    {
      LOBYTE(v15) = (*(_BYTE *)(v8 + 16) & 4) != 0;
      v14 = *(_QWORD *)(v8 + 8);
    }
  }
  else
  {
    v13 = 0;
    v14 = 0;
    v15 = 257;
  }
  WebCore::SegmentedString::appendSubstring(v4, (uint64_t *)&v12);
  v10 = v12;
  v12 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  result = WebCore::WebVTTParser::parse((WebCore::WebVTTParser *)a1, v9);
  if (*(_DWORD *)(a1 + 324))
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 288) + 24))(*(_QWORD *)(a1 + 288));
  if (*(_DWORD *)(a1 + 340))
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 288) + 32))(*(_QWORD *)(a1 + 288));
  return result;
}

uint64_t WebCore::WebVTTParser::parse(WebCore::WebVTTParser *this, WTF::StringImpl *a2)
{
  char *v3;
  uint64_t result;
  WTF::MediaTime *v5;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  char v10;

  v3 = (char *)this + 16;
  while (2)
  {
    result = WebCore::BufferedLineReader::nextLine((uint64_t)v3, a2, &v9);
    if (!v10)
      return result;
    switch(*((_DWORD *)this + 2))
    {
      case 0:
        if (v9
          && (result = WTF::StringImpl::startsWith(), (_DWORD)result)
          && (!v9
           || *((_DWORD *)v9 + 1) < 7u
           || ((v6 = *((_QWORD *)v9 + 1), (*((_BYTE *)v9 + 16) & 4) == 0)
             ? (v7 = *(unsigned __int16 *)(v6 + 12))
             : (v7 = *(unsigned __int8 *)(v6 + 6)),
               v7 == 9 || v7 == 32)))
        {
          v8 = 0;
          *((_DWORD *)this + 2) = 1;
        }
        else
        {
          result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 36) + 40))(*((_QWORD *)this + 36));
          v8 = 1;
        }
        goto LABEL_35;
      case 1:
        result = WebCore::WebVTTParser::collectWebVTTBlock(this, (const WTF::String *)&v9);
        goto LABEL_34;
      case 2:
        if (!v9 || !*((_DWORD *)v9 + 1))
        {
          v8 = 0;
LABEL_35:
          if (v10)
          {
LABEL_36:
            result = (uint64_t)v9;
            v9 = 0;
            if (!result)
              goto LABEL_39;
            if (*(_DWORD *)result != 2)
            {
              *(_DWORD *)result -= 2;
              goto LABEL_39;
            }
            result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
            if (v8)
              return result;
          }
          else
          {
LABEL_39:
            if (v8)
              return result;
          }
          continue;
        }
        result = (uint64_t)WebCore::WebVTTParser::resetCueValues(this, a2);
        if (v10)
        {
          result = WebCore::WebVTTParser::collectCueId((WTF::StringImpl **)this, &v9);
LABEL_34:
          v8 = 0;
          *((_DWORD *)this + 2) = result;
          goto LABEL_35;
        }
        __break(1u);
        return result;
      case 3:
        if (v9 && *((_DWORD *)v9 + 1))
          goto LABEL_33;
        v8 = 0;
        *((_DWORD *)this + 2) = 2;
        goto LABEL_35;
      case 4:
        result = WebCore::WebVTTParser::collectCueText(this, (const WTF::String *)&v9);
        goto LABEL_34;
      case 5:
        result = WebCore::WebVTTParser::collectRegionSettings((WebCore::VTTRegion **)this, (const WTF::String *)&v9);
        goto LABEL_34;
      case 6:
        result = WebCore::WebVTTParser::collectStyleSheet(this, (const WTF::String *)&v9);
        goto LABEL_34;
      case 7:
        if (v9 && *((_DWORD *)v9 + 1))
        {
          if (WTF::StringImpl::find() == -1)
          {
            result = 7;
          }
          else
          {
            WebCore::WebVTTParser::resetCueValues(this, a2);
LABEL_33:
            result = WebCore::WebVTTParser::collectTimingsAndSettings(this, (const WTF::String *)&v9, v5);
          }
        }
        else
        {
          result = 2;
        }
        goto LABEL_34;
      default:
        v8 = 0;
        goto LABEL_36;
    }
  }
}

uint64_t WebCore::WebVTTParser::parseBytes(uint64_t *a1, const char *a2, size_t a3)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;

  v4 = (uint64_t)(a1 + 2);
  WebCore::TextResourceDecoder::decode(a1[21], a2, a3, &v10);
  v5 = v10;
  v10 = 0;
  v11 = v5;
  if (v5)
  {
    LODWORD(v12) = *((_DWORD *)v5 + 1);
    HIDWORD(v12) = v12;
    v13 = 0;
    v14 = 257;
    if ((_DWORD)v12)
    {
      LOBYTE(v14) = (*((_BYTE *)v5 + 16) & 4) != 0;
      v13 = *((_QWORD *)v5 + 1);
    }
  }
  else
  {
    v12 = 0;
    v13 = 0;
    v14 = 257;
  }
  WebCore::SegmentedString::appendSubstring(v4, (uint64_t *)&v11);
  v7 = v11;
  v11 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = v10;
  v10 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v6);
    else
      *(_DWORD *)v8 -= 2;
  }
  return WebCore::WebVTTParser::parse((WebCore::WebVTTParser *)a1, v6);
}

WTF::StringImpl **WebCore::WebVTTParser::parseCueData(WebCore::WebVTTParser *this, const WebCore::ISOWebVTTCue *a2)
{
  uint64_t v4;
  WTF::StringImpl **v5;
  uint64_t v6;
  int v7;
  WTF::StringImpl *v8;
  WTF::MediaTime *v9;
  _DWORD *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  _DWORD *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  char **v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl **result;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  int v31;
  _BYTE v32[13];
  __int128 v33;
  WTF *v34;
  _QWORD v35[2];
  WTF::StringImpl *v36;
  char v37;

  v4 = WTF::fastMalloc((WTF *)0x50);
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  v5 = (WTF::StringImpl **)(v4 + 56);
  *(_DWORD *)v4 = 1;
  *(_DWORD *)(v4 + 16) = 10000000;
  *(_BYTE *)(v4 + 20) = 1;
  *(_DWORD *)(v4 + 32) = 10000000;
  *(_BYTE *)(v4 + 36) = 1;
  *(_DWORD *)(v4 + 48) = 10000000;
  *(_BYTE *)(v4 + 52) = 1;
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 72) = 0;
  v34 = (WTF *)v4;
  v33 = *(_OWORD *)((char *)a2 + 40);
  v6 = *((_QWORD *)a2 + 5);
  v7 = *((_DWORD *)a2 + 12);
  *(_BYTE *)(v4 + 20) = *((_BYTE *)a2 + 52);
  *(_DWORD *)(v4 + 16) = v7;
  *(_QWORD *)(v4 + 8) = v6;
  *(_QWORD *)(v4 + 24) = WTF::MediaTime::operator+();
  *(_DWORD *)(v4 + 32) = (_DWORD)v8;
  *(_BYTE *)(v4 + 36) = BYTE4(v8);
  v10 = (_DWORD *)*((_QWORD *)a2 + 13);
  if (v10)
    *v10 += 2;
  v11 = *(WTF::StringImpl **)(v4 + 64);
  *(_QWORD *)(v4 + 64) = v10;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v8);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = (WTF::StringImpl *)*((_QWORD *)a2 + 10);
  if (v12)
    *(_DWORD *)v12 += 2;
  v13 = *v5;
  *v5 = v12;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v8);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = (_DWORD *)*((_QWORD *)a2 + 12);
  if (v14)
    *v14 += 2;
  v15 = *(WTF::StringImpl **)(v4 + 72);
  *(_QWORD *)(v4 + 72) = v14;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v8);
    else
      *(_DWORD *)v15 -= 2;
  }
  *(_QWORD *)v32 = 0;
  *(_DWORD *)&v32[8] = 10000000;
  v32[12] = 1;
  v16 = *((_QWORD *)a2 + 11);
  if (v16)
  {
    v25 = *(unsigned int *)(v16 + 4);
    if ((_DWORD)v25)
    {
      *(_DWORD *)v16 += 2;
      v36 = (WTF::StringImpl *)v16;
      v26 = (*(_DWORD *)(v16 + 16) & 4) == 0;
      v37 = (*(_DWORD *)(v16 + 16) & 4u) >> 2;
      v27 = *(_QWORD *)(v16 + 8);
      v28 = v27 + 2 * v25;
      v29 = v27 + v25;
      if (v26)
        v29 = v28;
      v35[0] = v27;
      v35[1] = v29;
      v31 = WebCore::WebVTTParser::collectTimeStamp((WebCore::WebVTTParser *)v35, (WebCore::VTTScanner *)v32, v9);
      if (!v36)
      {
LABEL_29:
        if (!v31)
          goto LABEL_17;
        goto LABEL_30;
      }
      if (*(_DWORD *)v36 != 2)
      {
        *(_DWORD *)v36 -= 2;
        goto LABEL_29;
      }
      WTF::StringImpl::destroy(v36, v30);
      if (v31)
      {
LABEL_30:
        *(_QWORD *)(v4 + 40) = *(_QWORD *)v32;
        *(_QWORD *)(v4 + 45) = *(_QWORD *)&v32[5];
      }
    }
  }
LABEL_17:
  v17 = (char **)((char *)this + 296);
  v18 = *((unsigned int *)this + 77);
  if ((_DWORD)v18 == *((_DWORD *)this + 76))
  {
    v19 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v17, v18 + 1, (unint64_t)&v34);
    v18 = *((unsigned int *)this + 77);
    v20 = *((_QWORD *)this + 37);
    v21 = *(_QWORD *)v19;
    *(_QWORD *)v19 = 0;
    *(_QWORD *)(v20 + 8 * v18) = v21;
  }
  else
  {
    v22 = *v17;
    v34 = 0;
    *(_QWORD *)&v22[8 * v18] = v4;
  }
  *((_DWORD *)this + 77) = v18 + 1;
  (*(void (**)(_QWORD))(**((_QWORD **)this + 36) + 16))(*((_QWORD *)this + 36));
  result = (WTF::StringImpl **)v34;
  v34 = 0;
  if (result)
    return WTF::RefCounted<WebCore::WebVTTCueData>::deref(result, v23);
  return result;
}

uint64_t WebCore::WebVTTParser::collectTimeStamp(WebCore::WebVTTParser *this, const WTF::String *a2, WTF::MediaTime *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  _QWORD v12[2];
  WTF::StringImpl *v13;
  char v14;

  v3 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return 0;
  v6 = *(unsigned int *)(v3 + 4);
  if (!(_DWORD)v6)
    return 0;
  *(_DWORD *)v3 += 2;
  v13 = (WTF::StringImpl *)v3;
  v7 = (*(_DWORD *)(v3 + 16) & 4) == 0;
  v14 = (*(_DWORD *)(v3 + 16) & 4u) >> 2;
  v8 = *(_QWORD *)(v3 + 8);
  v9 = v8 + 2 * v6;
  v10 = v8 + v6;
  if (v7)
    v10 = v9;
  v12[0] = v8;
  v12[1] = v10;
  v4 = WebCore::WebVTTParser::collectTimeStamp((WebCore::WebVTTParser *)v12, a2, a3);
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  return v4;
}

WTF::StringImpl **WebCore::WebVTTParser::flush(WebCore::TextResourceDecoder **this)
{
  char *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl **result;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;

  v2 = (char *)(this + 2);
  WebCore::TextResourceDecoder::flush((uint64_t *)&v8, this[21]);
  v3 = v8;
  v8 = 0;
  v9 = v3;
  if (v3)
  {
    LODWORD(v10) = *((_DWORD *)v3 + 1);
    HIDWORD(v10) = v10;
    v11 = 0;
    v12 = 257;
    if ((_DWORD)v10)
    {
      LOBYTE(v12) = (*((_BYTE *)v3 + 16) & 4) != 0;
      v11 = *((_QWORD *)v3 + 1);
    }
  }
  else
  {
    v10 = 0;
    v11 = 0;
    v12 = 257;
  }
  WebCore::SegmentedString::appendSubstring((uint64_t)v2, (uint64_t *)&v9);
  v5 = v9;
  v9 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = v8;
  v8 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
  *((_BYTE *)this + 160) = 1;
  result = (WTF::StringImpl **)WebCore::WebVTTParser::parse((WebCore::WebVTTParser *)this, v4);
  if (*((_DWORD *)this + 2) == 4)
    return WebCore::WebVTTParser::createNewCue((WebCore::WebVTTParser *)this);
  return result;
}

WTF::StringImpl **WebCore::WebVTTParser::flushPendingCue(WTF::StringImpl **this)
{
  if (*((_DWORD *)this + 2) == 4)
    return WebCore::WebVTTParser::createNewCue((WebCore::WebVTTParser *)this);
  return this;
}

uint64_t WebCore::WebVTTParser::hasRequiredFileIdentifier(WebCore::WebVTTParser *this, const WTF::String *a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  int v6;

  result = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    result = WTF::StringImpl::startsWith();
    if ((_DWORD)result)
    {
      v4 = *(_QWORD *)a2;
      if (*(_QWORD *)a2 && *(_DWORD *)(v4 + 4) >= 7u)
      {
        v5 = *(_QWORD *)(v4 + 8);
        if ((*(_BYTE *)(v4 + 16) & 4) != 0)
          v6 = *(unsigned __int8 *)(v5 + 6);
        else
          v6 = *(unsigned __int16 *)(v5 + 12);
        return v6 == 32 || v6 == 9;
      }
      else
      {
        return 1;
      }
    }
  }
  return result;
}

uint64_t WebCore::WebVTTParser::collectWebVTTBlock(WebCore::WebVTTParser *this, const WTF::String *a2)
{
  _DWORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  _DWORD *v15;
  _DWORD *v17;
  WTF::MediaTime *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::AtomStringImpl *v22;
  WTF::StringImpl *v23;
  WTF::AtomStringImpl *v24;

  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
  {
    v5 = v4[4];
    v6 = *((_QWORD *)v4 + 1);
    LODWORD(v4) = v4[1];
    v7 = (v5 >> 2) & 1;
  }
  else
  {
    v6 = 0;
    v7 = 1;
  }
  if ((WebCore::WebVTTParser::checkAndCreateRegion(this, v6, v4 | (unint64_t)(v7 << 32)) & 1) != 0)
    return 5;
  v9 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
  {
    v10 = v9[4];
    v11 = *((_QWORD *)v9 + 1);
    LODWORD(v9) = v9[1];
    v12 = (v10 >> 2) & 1;
  }
  else
  {
    v11 = 0;
    v12 = 1;
  }
  if ((WebCore::WebVTTParser::checkStyleSheet((uint64_t)this, v11, v9 | (unint64_t)(v12 << 32)) & 1) != 0)
    return 6;
  if (!*(_QWORD *)a2
    || WTF::StringImpl::find() == -1
    || (WebCore::WebVTTParser::resetCueValues(this, v13),
        v19 = WebCore::WebVTTParser::collectTimingsAndSettings(this, a2, v18),
        (_DWORD)v19 == 7))
  {
    v14 = (WTF::StringImpl *)*((_QWORD *)this + 30);
    if (v14 && *((_DWORD *)v14 + 1))
    {
      v17 = (_DWORD *)*MEMORY[0x1E0CBF738];
      if (*MEMORY[0x1E0CBF738])
        *v17 += 2;
      *((_QWORD *)this + 30) = v17;
    }
    else
    {
      v15 = *(_DWORD **)a2;
      if (*(_QWORD *)a2)
        *v15 += 2;
      *((_QWORD *)this + 30) = v15;
      if (!v14)
        return 1;
    }
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
    return 1;
  }
  v8 = v19;
  if (*((_DWORD *)this + 81))
    (*(void (**)(_QWORD))(**((_QWORD **)this + 36) + 24))(*((_QWORD *)this + 36));
  if (*((_DWORD *)this + 85))
    (*(void (**)(_QWORD))(**((_QWORD **)this + 36) + 32))(*((_QWORD *)this + 36));
  v20 = *((_QWORD *)this + 30);
  if (v20 && *(_DWORD *)(v20 + 4) && WTF::StringImpl::find() == -1)
  {
    v22 = (WTF::AtomStringImpl *)*((_QWORD *)this + 30);
    if (v22)
    {
      if ((*((_BYTE *)v22 + 16) & 0x10) != 0)
      {
        *(_DWORD *)v22 += 2;
      }
      else
      {
        WTF::AtomStringImpl::addSlowCase(v22, v21);
        v22 = v24;
      }
    }
    v23 = (WTF::StringImpl *)*((_QWORD *)this + 22);
    *((_QWORD *)this + 22) = v22;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v21);
      else
        *(_DWORD *)v23 -= 2;
    }
  }
  return v8;
}

uint64_t WebCore::WebVTTParser::collectRegionSettings(WebCore::VTTRegion **this, const WTF::String *a2)
{
  uint64_t v4;
  WebCore::VTTRegion *v5;
  unint64_t v6;
  uint64_t result;
  WTF::StringImpl *v8;
  WTF::MediaTime *v9;

  v4 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v5 = *(WebCore::VTTRegion **)(v4 + 8);
    v6 = *(unsigned int *)(v4 + 4) | ((unint64_t)((*(_DWORD *)(v4 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v5 = 0;
    v6 = 0x100000000;
  }
  if (WebCore::WebVTTParser::checkAndStoreRegion((uint64_t)this, v5, (WebCore::VTTRegion *)v6))
  {
    if (!*(_QWORD *)a2)
      return 1;
    if (WTF::StringImpl::find() == -1)
      return 1;
    WebCore::WebVTTParser::resetCueValues((WebCore::WebVTTParser *)this, v8);
    result = WebCore::WebVTTParser::collectTimingsAndSettings((WebCore::WebVTTParser *)this, a2, v9);
    if ((_DWORD)result == 7)
      return 1;
  }
  else
  {
    WebCore::VTTRegion::setRegionSettings(this[32], a2);
    return 5;
  }
  return result;
}

uint64_t WebCore::WebVTTParser::collectStyleSheet(WebCore::WebVTTParser *this, const WTF::String *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  unint64_t v6;
  WTF::StringImpl *v7;
  uint64_t result;
  WTF::StringImpl **v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::MediaTime *v14;

  v4 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v5 = *(WTF::StringImpl **)(v4 + 8);
    v6 = *(unsigned int *)(v4 + 4) | ((unint64_t)((*(_DWORD *)(v4 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v5 = 0;
    v6 = 0x100000000;
  }
  if (WebCore::WebVTTParser::checkAndStoreStyleSheet((uint64_t)this, v5, (WTF::StringImpl *)v6))
  {
    if (!*(_QWORD *)a2)
      return 1;
    if (WTF::StringImpl::find() == -1)
      return 1;
    WebCore::WebVTTParser::resetCueValues(this, v13);
    result = WebCore::WebVTTParser::collectTimingsAndSettings(this, a2, v14);
    if ((_DWORD)result == 7)
      return 1;
  }
  else
  {
    v9 = (WTF::StringImpl **)((char *)this + 264);
    if (*((_DWORD *)this + 70) || *((_QWORD *)this + 34))
    {
      if (*(_QWORD *)a2 && (*(_BYTE *)(*(_QWORD *)a2 + 16) & 4) == 0)
        WTF::StringBuilder::append();
      else
        WTF::StringBuilder::append();
    }
    else
    {
      v10 = *(WTF::StringImpl **)a2;
      if (*(_QWORD *)a2)
        *(_DWORD *)v10 += 2;
      v11 = *v9;
      *v9 = v10;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v7);
        else
          *(_DWORD *)v11 -= 2;
      }
      v12 = *(_QWORD *)a2;
      if (*(_QWORD *)a2)
        LODWORD(v12) = *(_DWORD *)(v12 + 4);
      *((_DWORD *)this + 70) = v12;
    }
    return 6;
  }
  return result;
}

WTF::StringImpl *WebCore::WebVTTParser::resetCueValues(WebCore::WebVTTParser *this, WTF::StringImpl *a2)
{
  _DWORD *v3;
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *result;

  v3 = (_DWORD *)*MEMORY[0x1E0CBF3B8];
  if (*MEMORY[0x1E0CBF3B8])
    *v3 += 2;
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = v3;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v5 += 2;
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = v5;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      v6 = (WTF::StringImpl *)WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = WTF::MediaTime::zeroTime(v6);
  v8 = *(_QWORD *)(v7 + 5);
  *((_QWORD *)this + 23) = *(_QWORD *)v7;
  *(_QWORD *)((char *)this + 189) = v8;
  v9 = (uint64_t *)WTF::MediaTime::zeroTime((WTF::MediaTime *)v7);
  v11 = *v9;
  *(_QWORD *)((char *)this + 205) = *(uint64_t *)((char *)v9 + 5);
  *((_QWORD *)this + 25) = v11;
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  result = (WTF::StringImpl *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
    else
      *(_DWORD *)result -= 2;
  }
  *((_DWORD *)this + 58) = 0;
  return result;
}

uint64_t WebCore::WebVTTParser::collectCueId(WTF::StringImpl **this, WTF::AtomStringImpl **a2)
{
  WTF::AtomStringImpl *v3;
  WTF::StringImpl *v4;
  WTF::MediaTime *v7;
  WTF::AtomStringImpl *v8;

  v3 = *a2;
  if (*a2)
  {
    if (WTF::StringImpl::find() != -1)
      return WebCore::WebVTTParser::collectTimingsAndSettings((WebCore::WebVTTParser *)this, (const WTF::String *)a2, v7);
    v3 = *a2;
    if (*a2)
    {
      if ((*((_BYTE *)v3 + 16) & 0x10) != 0)
      {
        *(_DWORD *)v3 += 2;
      }
      else
      {
        WTF::AtomStringImpl::addSlowCase(v3, (WTF::StringImpl *)a2);
        v3 = v8;
      }
    }
  }
  v4 = this[22];
  this[22] = v3;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return 3;
}

uint64_t WebCore::WebVTTParser::collectTimingsAndSettings(WebCore::WebVTTParser *this, const WTF::String *a2, WTF::MediaTime *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  unsigned int v8;
  unsigned __int16 *v9;
  unsigned __int16 *v10;
  unsigned __int16 *v11;
  int64_t v12;
  unsigned __int16 *v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  BOOL v17;
  unsigned int v18;
  uint64_t v19;
  WTF::StringImpl *v21;
  unsigned __int16 *v22;
  unint64_t v23;
  unsigned __int16 *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v28;
  uint64_t v29;
  WTF::MediaTime *v31;
  unsigned __int16 *v32;
  unint64_t v33;
  unsigned __int16 *v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v38;
  uint64_t v39;
  unsigned __int16 *v41;
  unsigned __int16 *v42;
  unint64_t v43;
  unsigned int v44;
  uint64_t v45;
  WTF::StringImpl *v47;
  unsigned int v48;
  uint64_t v49;
  WTF::StringImpl *v51;
  unsigned __int16 *v52;
  unint64_t v53;
  WTF::StringImpl *v54;
  char v55;
  uint64_t v56;

  v3 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
    return 7;
  v6 = *(unsigned int *)(v3 + 4);
  if (!(_DWORD)v6)
    return 7;
  *(_DWORD *)v3 += 2;
  v54 = (WTF::StringImpl *)v3;
  v17 = (*(_DWORD *)(v3 + 16) & 4) == 0;
  v8 = (*(_DWORD *)(v3 + 16) & 4u) >> 2;
  v55 = v8;
  v9 = *(unsigned __int16 **)(v3 + 8);
  v10 = &v9[v6];
  v11 = (unsigned __int16 *)((char *)v9 + v6);
  if (v17)
    v11 = v10;
  v52 = v9;
  v53 = (unint64_t)v11;
  if (v8)
  {
    if (v9 < v11)
    {
      v12 = (char *)v11 - (char *)v9;
      v13 = (unsigned __int16 *)((char *)v9 + 1);
      do
      {
        v14 = *((unsigned __int8 *)v13 - 1);
        v15 = v14 > 0x20;
        v16 = (1 << v14) & 0x100003600;
        v17 = v15 || v16 == 0;
        if (v17)
          break;
        v52 = v13;
        v13 = (unsigned __int16 *)((char *)v13 + 1);
        --v12;
      }
      while (v12);
    }
  }
  else
  {
    for (; v9 < v11; v52 = v9)
    {
      v18 = *v9;
      v15 = v18 > 0x20;
      v19 = (1 << v18) & 0x100003600;
      if (v15 || v19 == 0)
        break;
      ++v9;
    }
  }
  if (WebCore::WebVTTParser::collectTimeStamp((WebCore::WebVTTParser *)&v52, (WebCore::WebVTTParser *)((char *)this + 184), a3))
  {
    v22 = v52;
    if (v55)
    {
      if ((unint64_t)v52 < v53)
      {
        v23 = v53 - (_QWORD)v52;
        v24 = (unsigned __int16 *)((char *)v52 + 1);
        do
        {
          v25 = *((unsigned __int8 *)v24 - 1);
          v15 = v25 > 0x20;
          v26 = (1 << v25) & 0x100003600;
          if (v15 || v26 == 0)
            break;
          v52 = v24;
          v24 = (unsigned __int16 *)((char *)v24 + 1);
          --v23;
        }
        while (v23);
      }
    }
    else if ((unint64_t)v52 < v53)
    {
      do
      {
        v28 = *v22;
        v15 = v28 > 0x20;
        v29 = (1 << v28) & 0x100003600;
        if (v15 || v29 == 0)
          break;
        v52 = ++v22;
      }
      while ((unint64_t)v22 < v53);
    }
    if (WebCore::VTTScanner::scan((uint64_t)&v52, (int8x16_t *)"-->", 3uLL))
    {
      v32 = v52;
      if (v55)
      {
        if ((unint64_t)v52 < v53)
        {
          v33 = v53 - (_QWORD)v52;
          v34 = (unsigned __int16 *)((char *)v52 + 1);
          do
          {
            v35 = *((unsigned __int8 *)v34 - 1);
            v15 = v35 > 0x20;
            v36 = (1 << v35) & 0x100003600;
            if (v15 || v36 == 0)
              break;
            v52 = v34;
            v34 = (unsigned __int16 *)((char *)v34 + 1);
            --v33;
          }
          while (v33);
        }
      }
      else if ((unint64_t)v52 < v53)
      {
        do
        {
          v38 = *v32;
          v15 = v38 > 0x20;
          v39 = (1 << v38) & 0x100003600;
          if (v15 || v39 == 0)
            break;
          v52 = ++v32;
        }
        while ((unint64_t)v32 < v53);
      }
      if (WebCore::WebVTTParser::collectTimeStamp((WebCore::WebVTTParser *)&v52, (WebCore::WebVTTParser *)((char *)this + 200), v31))
      {
        v41 = v52;
        v42 = (unsigned __int16 *)v53;
        if (v55)
        {
          if ((unint64_t)v52 >= v53)
          {
LABEL_76:
            WTF::String::String();
LABEL_78:
            v52 = v42;
            v51 = (WTF::StringImpl *)*((_QWORD *)this + 31);
            *((_QWORD *)this + 31) = v56;
            if (v51)
            {
              if (*(_DWORD *)v51 == 2)
                WTF::StringImpl::destroy(v51, v21);
              else
                *(_DWORD *)v51 -= 2;
            }
            v4 = 4;
            goto LABEL_65;
          }
          v43 = v53 - (_QWORD)v52;
          do
          {
            v44 = *(unsigned __int8 *)v41;
            v15 = v44 > 0x20;
            v45 = (1 << v44) & 0x100003600;
            if (v15 || v45 == 0)
              break;
            v41 = (unsigned __int16 *)((char *)v41 + 1);
            v52 = v41;
            --v43;
          }
          while (v43);
        }
        else
        {
          if ((unint64_t)v52 >= v53)
            goto LABEL_77;
          do
          {
            v48 = *v41;
            v15 = v48 > 0x20;
            v49 = (1 << v48) & 0x100003600;
            if (v15 || v49 == 0)
              break;
            v52 = ++v41;
          }
          while ((unint64_t)v41 < v53);
        }
        if (v55)
          goto LABEL_76;
LABEL_77:
        WTF::String::String();
        goto LABEL_78;
      }
    }
  }
  v4 = 7;
LABEL_65:
  v47 = v54;
  v54 = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 2)
      WTF::StringImpl::destroy(v47, v21);
    else
      *(_DWORD *)v47 -= 2;
  }
  return v4;
}

uint64_t WebCore::WebVTTParser::collectCueText(WebCore::WebVTTParser *this, const WTF::String *a2)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::MediaTime *v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  if (!*(_QWORD *)a2 || !*(_DWORD *)(*(_QWORD *)a2 + 4))
  {
    WebCore::WebVTTParser::createNewCue(this);
    return 2;
  }
  if (WTF::StringImpl::find() != -1)
  {
    WebCore::WebVTTParser::createNewCue(this);
    WebCore::WebVTTParser::resetCueValues(this, v6);
    return WebCore::WebVTTParser::collectTimingsAndSettings(this, a2, v7);
  }
  v8 = (WTF::StringImpl **)((char *)this + 216);
  v9 = *((unsigned int *)this + 58);
  if (!(_DWORD)v9)
    goto LABEL_33;
  v10 = *((_QWORD *)this + 28);
  if (v10 && v9 < *(_DWORD *)(v10 + 4) && !*v8)
  {
    v14 = *(_DWORD *)(v10 + 16);
    v15 = *(_QWORD *)(v10 + 8);
    *((_DWORD *)this + 58) = v9 + 1;
    if ((v14 & 4) == 0)
    {
      *(_WORD *)(v15 + 2 * v9) = 10;
      goto LABEL_24;
    }
    *(_BYTE *)(v15 + v9) = 10;
  }
  else
  {
    WTF::StringBuilder::append();
  }
  if (!*((_DWORD *)this + 58))
  {
LABEL_33:
    if (!*((_QWORD *)this + 28))
    {
      v11 = *(WTF::StringImpl **)a2;
      if (*(_QWORD *)a2)
        *(_DWORD *)v11 += 2;
      v12 = *v8;
      *v8 = v11;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v5);
        else
          *(_DWORD *)v12 -= 2;
      }
      v13 = *(_QWORD *)a2;
      if (*(_QWORD *)a2)
        LODWORD(v13) = *(_DWORD *)(v13 + 4);
      *((_DWORD *)this + 58) = v13;
      return 4;
    }
  }
LABEL_24:
  if (*(_QWORD *)a2 && (*(_BYTE *)(*(_QWORD *)a2 + 16) & 4) == 0)
    WTF::StringBuilder::append();
  else
    WTF::StringBuilder::append();
  return 4;
}

uint64_t WebCore::WebVTTParser::ignoreBadCue(WebCore::WebVTTParser *this, const WTF::String *a2)
{
  WTF::StringImpl *v5;
  WTF::MediaTime *v6;

  if (!*(_QWORD *)a2 || !*(_DWORD *)(*(_QWORD *)a2 + 4))
    return 2;
  if (WTF::StringImpl::find() == -1)
    return 7;
  WebCore::WebVTTParser::resetCueValues(this, v5);
  return WebCore::WebVTTParser::collectTimingsAndSettings(this, a2, v6);
}

uint64_t WebCore::WebVTTParser::fileFinished(WebCore::WebVTTParser *this)
{
  char *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t result;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;

  v2 = (char *)this + 16;
  WebCore::TextResourceDecoder::decode(*((_QWORD *)this + 21), "\n\n", 2uLL, &v8);
  v3 = v8;
  v8 = 0;
  v9 = v3;
  if (v3)
  {
    LODWORD(v10) = *((_DWORD *)v3 + 1);
    HIDWORD(v10) = v10;
    v11 = 0;
    v12 = 257;
    if ((_DWORD)v10)
    {
      LOBYTE(v12) = (*((_BYTE *)v3 + 16) & 4) != 0;
      v11 = *((_QWORD *)v3 + 1);
    }
  }
  else
  {
    v10 = 0;
    v11 = 0;
    v12 = 257;
  }
  WebCore::SegmentedString::appendSubstring((uint64_t)v2, (uint64_t *)&v9);
  v5 = v9;
  v9 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = v8;
  v8 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
  result = WebCore::WebVTTParser::parse(this, v4);
  *((_DWORD *)this + 2) = 8;
  return result;
}

WTF::StringImpl **WebCore::WebVTTParser::createNewCue(WebCore::WebVTTParser *this)
{
  WTF::StringImpl *v2;
  uint64_t v3;
  WTF::StringImpl **v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl **v8;
  char v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  _DWORD *v13;
  WTF::StringImpl *v14;
  char **v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl **result;
  WTF *v23;

  v3 = WTF::fastMalloc((WTF *)0x50);
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_QWORD *)(v3 + 56) = 0;
  v4 = (WTF::StringImpl **)(v3 + 56);
  *(_QWORD *)(v3 + 48) = 0;
  *(_DWORD *)v3 = 1;
  *(_DWORD *)(v3 + 16) = 10000000;
  *(_BYTE *)(v3 + 20) = 1;
  *(_DWORD *)(v3 + 32) = 10000000;
  *(_BYTE *)(v3 + 36) = 1;
  *(_DWORD *)(v3 + 48) = 10000000;
  *(_BYTE *)(v3 + 52) = 1;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = 0;
  v23 = (WTF *)v3;
  v5 = *((_QWORD *)this + 23);
  *(_QWORD *)(v3 + 13) = *(_QWORD *)((char *)this + 189);
  *(_QWORD *)(v3 + 8) = v5;
  v6 = *(_QWORD *)((char *)this + 205);
  *(_QWORD *)(v3 + 24) = *((_QWORD *)this + 25);
  *(_QWORD *)(v3 + 29) = v6;
  v8 = (WTF::StringImpl **)((char *)this + 216);
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 27);
  if (v7
    || (WTF::StringBuilder::shrinkToFit((WebCore::WebVTTParser *)((char *)this + 216)),
        WTF::StringBuilder::reifyString((WebCore::WebVTTParser *)((char *)this + 216)),
        (v7 = *v8) != 0))
  {
    v9 = 0;
    *(_DWORD *)v7 += 4;
  }
  else
  {
    v9 = 1;
  }
  v10 = *(WTF::StringImpl **)(v3 + 64);
  *(_QWORD *)(v3 + 64) = v7;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::destroy(v10, v2);
      if ((v9 & 1) != 0)
        goto LABEL_10;
      goto LABEL_8;
    }
    *(_DWORD *)v10 -= 2;
  }
  if ((v9 & 1) != 0)
    goto LABEL_10;
LABEL_8:
  if (*(_DWORD *)v7 == 2)
    WTF::StringImpl::destroy(v7, v2);
  else
    *(_DWORD *)v7 -= 2;
LABEL_10:
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 22);
  if (v11)
    *(_DWORD *)v11 += 2;
  v12 = *v4;
  *v4 = v11;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v2);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (_DWORD *)*((_QWORD *)this + 31);
  if (v13)
    *v13 += 2;
  v14 = *(WTF::StringImpl **)(v3 + 72);
  *(_QWORD *)(v3 + 72) = v13;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v2);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (char **)((char *)this + 296);
  v16 = *((unsigned int *)this + 77);
  if ((_DWORD)v16 == *((_DWORD *)this + 76))
  {
    v17 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v15, v16 + 1, (unint64_t)&v23);
    v16 = *((unsigned int *)this + 77);
    v18 = *((_QWORD *)this + 37);
    v19 = *(_QWORD *)v17;
    *(_QWORD *)v17 = 0;
    *(_QWORD *)(v18 + 8 * v16) = v19;
  }
  else
  {
    v20 = *v15;
    v23 = 0;
    *(_QWORD *)&v20[8 * v16] = v3;
  }
  *((_DWORD *)this + 77) = v16 + 1;
  (*(void (**)(_QWORD))(**((_QWORD **)this + 36) + 16))(*((_QWORD *)this + 36));
  result = (WTF::StringImpl **)v23;
  v23 = 0;
  if (result)
    return WTF::RefCounted<WebCore::WebVTTCueData>::deref(result, v21);
  return result;
}

uint64_t WebCore::WebVTTParser::checkAndStoreRegion(uint64_t a1, WebCore::VTTRegion *a2, WebCore::VTTRegion *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  void *v12;
  uint64_t v13;
  WebCore::VTTRegion **v14;
  WebCore::VTTRegion *v15;
  WebCore::VTTRegion *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WebCore::VTTRegion *v21;
  WTF *v22;
  void *v23;
  WTF *v24;
  void *v25;
  WebCore::VTTRegion *v26[3];

  v26[1] = a2;
  v26[2] = a3;
  if (!(_DWORD)a3 || WTF::StringView::find() != -1)
  {
    v4 = *(_QWORD *)(a1 + 256);
    v5 = *(_QWORD *)(v4 + 24);
    if (v5 && *(_DWORD *)(v5 + 4))
    {
      v7 = (uint64_t *)(a1 + 312);
      LODWORD(v8) = *(_DWORD *)(a1 + 324);
      if ((_DWORD)v8)
      {
        v9 = 0;
        v10 = -8;
        while (!WTF::equal(*(WTF **)(*(_QWORD *)(*(_QWORD *)(a1 + 312) + 8 * v9) + 24), *(const WTF::StringImpl **)(*(_QWORD *)(a1 + 256) + 24), a3))
        {
          ++v9;
          v8 = *(unsigned int *)(a1 + 324);
          v10 -= 8;
          if (v9 >= v8)
            goto LABEL_20;
        }
        v13 = *v7;
        v14 = (WebCore::VTTRegion **)(*v7 + 8 * v9);
        v15 = *v14;
        *v14 = 0;
        if (v15)
        {
          if (*((_DWORD *)v15 + 4) == 1)
          {
            WebCore::VTTRegion::~VTTRegion(v15);
            WTF::fastFree(v24, v25);
          }
          else
          {
            --*((_DWORD *)v15 + 4);
          }
        }
        memmove(v14, v14 + 1, *(_QWORD *)(a1 + 312) + 8 * *(unsigned int *)(a1 + 324) - v13 + v10);
        LODWORD(v8) = *(_DWORD *)(a1 + 324) - 1;
        *(_DWORD *)(a1 + 324) = v8;
      }
LABEL_20:
      v16 = *(WebCore::VTTRegion **)(a1 + 256);
      v26[0] = v16;
      *(_QWORD *)(a1 + 256) = 0;
      if ((_DWORD)v8 == *(_DWORD *)(a1 + 320))
      {
        v17 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a1 + 312), v8 + 1, (unint64_t)v26);
        v18 = *(unsigned int *)(a1 + 324);
        v19 = *(_QWORD *)(a1 + 312);
        v20 = *(_QWORD *)v17;
        *(_QWORD *)v17 = 0;
        *(_QWORD *)(v19 + 8 * v18) = v20;
        v21 = v26[0];
        *(_DWORD *)(a1 + 324) = v18 + 1;
        v26[0] = 0;
        if (v21)
        {
          if (*((_DWORD *)v21 + 4) == 1)
          {
            WebCore::VTTRegion::~VTTRegion(v21);
            WTF::fastFree(v22, v23);
          }
          else
          {
            --*((_DWORD *)v21 + 4);
          }
        }
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)(a1 + 312) + 8 * v8) = v16;
        *(_DWORD *)(a1 + 324) = v8 + 1;
      }
      v4 = *(_QWORD *)(a1 + 256);
      *(_QWORD *)(a1 + 256) = 0;
      if (!v4)
        return 1;
    }
    else
    {
      *(_QWORD *)(a1 + 256) = 0;
    }
    if (*(_DWORD *)(v4 + 16) == 1)
    {
      WebCore::VTTRegion::~VTTRegion((WebCore::VTTRegion *)v4);
      WTF::fastFree(v11, v12);
    }
    else
    {
      --*(_DWORD *)(v4 + 16);
    }
    return 1;
  }
  return 0;
}

uint64_t WebCore::WebVTTParser::checkAndRecoverCue(WebCore::WebVTTParser *this, const WTF::String *a2)
{
  uint64_t result;
  WTF::StringImpl *v5;
  WTF::MediaTime *v6;

  if (!*(_QWORD *)a2)
    return 1;
  if (WTF::StringImpl::find() == -1)
    return 1;
  WebCore::WebVTTParser::resetCueValues(this, v5);
  result = WebCore::WebVTTParser::collectTimingsAndSettings(this, a2, v6);
  if ((_DWORD)result == 7)
    return 1;
  return result;
}

uint64_t WebCore::WebVTTParser::checkAndCreateRegion(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  BOOL v9;
  uint64_t v10;
  WebCore::ScriptExecutionContext *v12;
  uint64_t v13;
  _DWORD *v14;
  unint64_t StatusReg;
  unsigned int *v16;
  unsigned int v17;
  _QWORD *v18;
  WebCore::VTTRegion *v19;
  WTF *v20;
  void *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;

  if (a1[30] && WTF::StringImpl::find() != -1)
    return 0;
  result = WTF::StringView::startsWith();
  if ((_DWORD)result)
  {
    if (a3 < 7)
    {
LABEL_16:
      v12 = (WebCore::ScriptExecutionContext *)(*a1 + 192);
      v13 = WTF::fastMalloc((WTF *)0xA0);
      *(_DWORD *)(v13 + 16) = 1;
      *(_QWORD *)v13 = &off_1E33A18C0;
      *(_QWORD *)(v13 + 8) = 0;
      WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v13, v12);
      *(_QWORD *)v13 = &off_1E33ED318;
      v14 = (_DWORD *)*MEMORY[0x1E0CBF738];
      if (*MEMORY[0x1E0CBF738])
        *v14 += 2;
      *(_QWORD *)(v13 + 24) = v14;
      *(_QWORD *)(v13 + 32) = 0;
      *(_QWORD *)(v13 + 40) = 0x4059000000000000;
      *(_DWORD *)(v13 + 48) = 3;
      *(_OWORD *)(v13 + 52) = xmmword_1968C15A0;
      *(_BYTE *)(v13 + 68) = 0;
      *(_QWORD *)(v13 + 72) = 0;
      *(_QWORD *)(v13 + 80) = 0;
      *(_QWORD *)(v13 + 88) = 0;
      *(_QWORD *)(v13 + 96) = off_1E3407128;
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      *(_OWORD *)(v13 + 104) = 0u;
      *(_OWORD *)(v13 + 120) = 0u;
      v16 = *(unsigned int **)(StatusReg + 736);
      if (!v16)
        v16 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 + 1, v16));
      *(_QWORD *)(v13 + 136) = v16;
      *(_QWORD *)(v13 + 96) = off_1E31F7378;
      v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *v18 = off_1E33ECFE0;
      v18[1] = WebCore::VTTRegion::scrollTimerFired;
      v18[2] = 0;
      v18[3] = v13;
      *(_QWORD *)(v13 + 144) = v18;
      result = 1;
      *(_BYTE *)(v13 + 152) = 1;
      v19 = (WebCore::VTTRegion *)a1[32];
      a1[32] = v13;
      if (v19)
      {
        if (*((_DWORD *)v19 + 4) == 1)
        {
          WebCore::VTTRegion::~VTTRegion(v19);
          WTF::fastFree(v20, v21);
          return 1;
        }
        else
        {
          --*((_DWORD *)v19 + 4);
        }
      }
      return result;
    }
    v6 = BYTE4(a3);
    v7 = (unsigned __int8 *)(a3 - 6);
    v5 = v7;
    if (BYTE4(a3))
    {
      if ((unint64_t)v7 >= v7)
      {
        v7 = (unsigned __int8 *)(a2 + 6);
        v5 |= 0x100000000uLL;
        goto LABEL_9;
      }
    }
    else if ((unint64_t)v7 >= v7)
    {
      v7 = (unsigned __int8 *)(a2 + 12);
LABEL_9:
      v6 = v5;
      if ((v5 & 0x100000000) != 0)
      {
        if ((_DWORD)v5)
        {
          while (1)
          {
            v8 = *v7;
            v9 = v8 > 0x20;
            v10 = (1 << v8) & 0x100003600;
            if (v9 || v10 == 0)
              return 0;
            ++v7;
            if (!--v6)
              goto LABEL_16;
          }
        }
        goto LABEL_16;
      }
      goto LABEL_29;
    }
    __break(1u);
LABEL_29:
    if (v6)
    {
      v22 = 2 * v6;
      while (1)
      {
        v23 = *(unsigned __int16 *)v7;
        v9 = v23 > 0x20;
        v24 = (1 << v23) & 0x100003600;
        if (v9 || v24 == 0)
          return 0;
        v7 += 2;
        v22 -= 2;
        if (!v22)
          goto LABEL_16;
      }
    }
    goto LABEL_16;
  }
  return result;
}

uint64_t WebCore::WebVTTParser::checkStyleSheet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;

  if (*(_QWORD *)(a1 + 240) && WTF::StringImpl::find() != -1)
    return 0;
  result = WTF::StringView::startsWith();
  if ((_DWORD)result)
  {
    if (a3 < 6)
      return 1;
    v5 = BYTE4(a3);
    v6 = (unsigned __int8 *)(a3 - 5);
    v4 = v6;
    if (BYTE4(a3))
    {
      if ((unint64_t)v6 >= v6)
      {
        v6 = (unsigned __int8 *)(a2 + 5);
        v4 |= 0x100000000uLL;
        goto LABEL_9;
      }
    }
    else if ((unint64_t)v6 >= v6)
    {
      v6 = (unsigned __int8 *)(a2 + 10);
LABEL_9:
      v5 = v4;
      if ((v4 & 0x100000000) != 0)
      {
        if ((_DWORD)v4)
        {
          while (1)
          {
            v7 = *v6;
            v8 = v7 > 0x20;
            v9 = (1 << v7) & 0x100003600;
            if (v8 || v9 == 0)
              break;
            ++v6;
            if (!--v5)
              return 1;
          }
          return 0;
        }
        return 1;
      }
      goto LABEL_21;
    }
    __break(1u);
LABEL_21:
    if (v5)
    {
      v11 = 2 * v5;
      result = 1;
      while (1)
      {
        v12 = *(unsigned __int16 *)v6;
        v8 = v12 > 0x20;
        v13 = (1 << v12) & 0x100003600;
        if (v8 || v13 == 0)
          break;
        v6 += 2;
        v11 -= 2;
        if (!v11)
          return result;
      }
      return 0;
    }
    return 1;
  }
  return result;
}

uint64_t WebCore::WebVTTParser::recoverCue(WebCore::WebVTTParser *this, const WTF::String *a2)
{
  WTF::MediaTime *v4;

  WebCore::WebVTTParser::resetCueValues(this, a2);
  return WebCore::WebVTTParser::collectTimingsAndSettings(this, a2, v4);
}

uint64_t WebCore::WebVTTParser::checkAndStoreStyleSheet(uint64_t a1, WTF::StringImpl *a2, WTF::StringImpl *a3)
{
  WTF::StringImpl **v4;
  WTF::StringImpl *v5;
  int v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  unint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WebCore::StyleSheetContents *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  int **v20;
  int **v21;
  int *v22;
  int v23;
  int v24;
  int v25;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  int v30;
  unsigned int v31;
  WTF::String *v32;
  __n128 v33;
  WebCore::StyleProperties *v34;
  unsigned int v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  _WORD *v39;
  WTF::StringImpl *v40;
  int v41;
  WTF::StringImpl *v42;
  int v43;
  char *v44;
  WTF::StringImpl *v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF *v51;
  void *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59[2];
  __int128 v60;
  WTF::StringImpl *v61[2];
  __int128 v62;
  WTF::StringImpl *v63[3];
  char v64;
  WTF::StringImpl **v65;
  WTF::StringImpl *v66;

  v63[1] = a2;
  v63[2] = a3;
  if ((_DWORD)a3 && WTF::StringView::find() == -1)
    return 0;
  v4 = (WTF::StringImpl **)(a1 + 264);
  v5 = *(WTF::StringImpl **)(a1 + 264);
  if (v5
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)(a1 + 264)),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)(a1 + 264)),
        (v5 = *v4) != 0))
  {
    v6 = *(_DWORD *)v5;
    *(_DWORD *)v5 += 2;
    v63[0] = v5;
    *v4 = 0;
    if (v6)
      *(_DWORD *)v5 = v6;
    else
      WTF::StringImpl::destroy(v5, a2);
  }
  else
  {
    v63[0] = 0;
    *v4 = 0;
  }
  v7 = *(WTF::StringImpl **)(a1 + 272);
  *(_QWORD *)(a1 + 272) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  *(_DWORD *)(a1 + 280) = 0;
  v58 = 0;
  WTF::URL::invalidate((WTF::URL *)&v58);
  v8 = v58;
  if (v58)
    *(_DWORD *)v58 += 2;
  *(_OWORD *)v61 = *(_OWORD *)v59;
  v62 = v60;
  v9 = atomic_load(&WebCore::StaticCSSValuePool::init(void)::onceKey);
  if (v9 != -1)
  {
    v66 = (WTF::StringImpl *)&v64;
    v65 = &v66;
    std::__call_once(&WebCore::StaticCSSValuePool::init(void)::onceKey, &v65, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::StaticCSSValuePool::init(void)::$_0 &&>>);
  }
  v10 = WTF::fastMalloc((WTF *)0xD8);
  v14 = v10;
  *(_DWORD *)v10 = 1;
  *(_OWORD *)(v10 + 8) = 0u;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_OWORD *)(v10 + 40) = 0u;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  *(_OWORD *)(v10 + 88) = 0u;
  *(_QWORD *)(v10 + 104) = 0;
  v15 = WebCore::starAtomData;
  if (WebCore::starAtomData)
    *(_DWORD *)WebCore::starAtomData += 2;
  *(_QWORD *)(v10 + 112) = v15;
  *(_WORD *)(v10 + 120) = 0;
  *(_BYTE *)(v10 + 122) = 1;
  *(_QWORD *)(v10 + 123) = 0;
  *(_BYTE *)(v10 + 131) = 0;
  if (v8)
    *(_DWORD *)v8 += 2;
  *(_QWORD *)(v10 + 136) = v8;
  v16 = v62;
  *(_OWORD *)(v10 + 144) = *(_OWORD *)v61;
  *(_OWORD *)(v10 + 160) = v16;
  *(_QWORD *)(v10 + 176) = 0;
  *(_BYTE *)(v10 + 184) = 5;
  *(_QWORD *)(v10 + 200) = 0;
  *(_QWORD *)(v10 + 208) = 0;
  *(_QWORD *)(v10 + 185) = 0;
  *(_BYTE *)(v10 + 193) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v11);
    else
      *(_DWORD *)v8 -= 2;
  }
  v17 = v58;
  v58 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v11);
    else
      *(_DWORD *)v17 -= 2;
  }
  if (!WebCore::StyleSheetContents::parseString((WebCore::StyleSheetContents *)v14, (const WTF::String *)v63, v12, v13))goto LABEL_96;
  if (*(_DWORD *)(v14 + 84))
    goto LABEL_96;
  if (*(_DWORD *)(v14 + 68))
    goto LABEL_96;
  v19 = *(unsigned int *)(v14 + 100);
  if (!(_DWORD)v19)
    goto LABEL_96;
  v20 = *(int ***)(v14 + 88);
  v21 = &v20[v19];
  v58 = 0;
  v59[0] = 0;
  LODWORD(v59[1]) = 0;
  BYTE4(v59[1]) = 1;
  do
  {
    v22 = *v20;
    v23 = **v20;
    v24 = v23 + 1;
    *v22 = v23 + 1;
    v25 = v22[1] & 0x1F;
    if (v25 != 1 && v25 != 22)
    {
      if (v23)
        *v22 = v23;
      else
        WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v22, v18);
      goto LABEL_90;
    }
    v27 = (unsigned int *)*((_QWORD *)v22 + 2);
    if (!v27)
      goto LABEL_57;
    v28 = *v27;
    if ((*v27 & 0x20000) == 0)
    {
      v29 = v27 + 4;
      v30 = 1;
      do
      {
        v30 += (v28 >> 19) & 1;
        v31 = *v29;
        v29 += 4;
        v28 = v31;
      }
      while ((v31 & 0x20000) == 0);
      if (v30 != 1)
      {
LABEL_57:
        v41 = 1;
        goto LABEL_65;
      }
    }
    WebCore::CSSSelector::selectorText(v27, 0, (WTF::StringBuilder *)0x100000000, 0, 0x100000000, v61);
    if ((MEMORY[0x19AEA53F4](v61[0], "::cue", 5) & 1) != 0)
      goto LABEL_42;
    if (v61[0])
    {
      if (WTF::StringImpl::startsWith())
      {
LABEL_42:
        v34 = (WebCore::StyleProperties *)*((_QWORD *)v22 + 1);
        v35 = *((_DWORD *)v34 + 1);
        if ((v35 & 8) != 0)
        {
          if (*((_DWORD *)v34 + 7))
          {
LABEL_44:
            WebCore::StyleProperties::asText(v34, (unsigned __int8 *)v18, v32, &v66, v33);
            v36 = v61[0];
            v37 = (uint64_t)v66;
            v38 = v59[0];
            if ((v59[0] || (v38 = v58) != 0) && (*((_BYTE *)v38 + 16) & 4) == 0
              || v61[0] && (*((_BYTE *)v61[0] + 16) & 4) == 0
              || v66 && (*((_BYTE *)v66 + 16) & 4) == 0)
            {
              v39 = (_WORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v58);
              if (v39)
                WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v39, (uint64_t)v36, (int8x16_t *)" { ", 3, v37, (int8x16_t *)"  }\n", 4);
            }
            else
            {
              v44 = (char *)MEMORY[0x19AEA4824](&v58);
              if (v44)
                WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v44, (uint64_t)v36, " { ", 3u, v37, "  }\n", 4u);
            }
            v40 = v66;
            v66 = 0;
            if (v40)
            {
              if (*(_DWORD *)v40 == 2)
                WTF::StringImpl::destroy(v40, v18);
              else
                *(_DWORD *)v40 -= 2;
            }
            v41 = 0;
            goto LABEL_61;
          }
        }
        else if (v35 >> 4)
        {
          goto LABEL_44;
        }
        v41 = 3;
      }
      else
      {
        v41 = 1;
      }
LABEL_61:
      v42 = v61[0];
      v61[0] = 0;
      if (v42)
      {
        if (*(_DWORD *)v42 == 2)
          WTF::StringImpl::destroy(v42, v18);
        else
          *(_DWORD *)v42 -= 2;
      }
      goto LABEL_64;
    }
    v41 = 1;
LABEL_64:
    v24 = *v22;
LABEL_65:
    v43 = v24 - 1;
    if (v43)
      *v22 = v43;
    else
      WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v22, v18);
    if (v41 != 3 && v41)
      goto LABEL_90;
    ++v20;
  }
  while (v20 != v21);
  if (LODWORD(v59[1]))
  {
    v46 = v58;
    if (v58
      || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v58),
          WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v58),
          (v46 = v58) != 0))
    {
      *(_DWORD *)v46 += 2;
    }
    v61[0] = v46;
    v47 = *(unsigned int *)(a1 + 340);
    if ((_DWORD)v47 == *(_DWORD *)(a1 + 336))
    {
      v53 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 328, v47 + 1, (unint64_t)v61);
      v54 = *(unsigned int *)(a1 + 340);
      v55 = *(_QWORD *)(a1 + 328);
      v56 = *v53;
      *v53 = 0;
      *(_QWORD *)(v55 + 8 * v54) = v56;
      v57 = v61[0];
      *(_DWORD *)(a1 + 340) = v54 + 1;
      v61[0] = 0;
      if (v57)
      {
        if (*(_DWORD *)v57 == 2)
          WTF::StringImpl::destroy(v57, v18);
        else
          *(_DWORD *)v57 -= 2;
      }
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 328) + 8 * v47) = v46;
      *(_DWORD *)(a1 + 340) = v47 + 1;
    }
  }
LABEL_90:
  v48 = v59[0];
  v59[0] = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 2)
      WTF::StringImpl::destroy(v48, v18);
    else
      *(_DWORD *)v48 -= 2;
  }
  v49 = v58;
  v58 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
      WTF::StringImpl::destroy(v49, v18);
    else
      *(_DWORD *)v49 -= 2;
  }
LABEL_96:
  if (*(_DWORD *)v14 == 1)
  {
    WebCore::StyleSheetContents::~StyleSheetContents((WebCore::StyleSheetContents *)v14, v18);
    WTF::fastFree(v51, v52);
  }
  else
  {
    --*(_DWORD *)v14;
  }
  v50 = v63[0];
  v63[0] = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
      WTF::StringImpl::destroy(v50, v18);
    else
      *(_DWORD *)v50 -= 2;
  }
  return 1;
}

uint64_t WebCore::WebVTTParser::collectTimeStamp(WebCore::WebVTTParser *this, WebCore::VTTScanner *a2, WTF::MediaTime *a3)
{
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  BOOL v14;
  BOOL v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unint64_t v24;
  int v25;
  double v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  unsigned __int16 *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t result;
  double v40;
  int v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double v47;

  v5 = *((unsigned __int8 *)this + 24);
  v6 = *(_QWORD *)this;
  v7 = *((_QWORD *)this + 1);
  if (v5)
  {
    if (v6 >= v7)
      return 0;
    v8 = v7 - v6;
    v9 = (_BYTE *)v6;
    while (*v9 - 48 <= 9)
    {
      ++v9;
      if (!--v8)
      {
        v9 = (_BYTE *)*((_QWORD *)this + 1);
        break;
      }
    }
  }
  else
  {
    if (v6 >= v7)
      return 0;
    v9 = (_BYTE *)v6;
    do
    {
      if (*(unsigned __int16 *)v9 - 48 > 9)
        break;
      v9 += 2;
    }
    while ((unint64_t)v9 < v7);
  }
  if ((_BYTE *)v6 == v9)
    return 0;
  v10 = (uint64_t)&v9[-v6];
  v11 = (uint64_t)&v9[-v6] >> (v5 == 0);
  v43 = v5
      ? WTF::parseInteger<unsigned int,unsigned char>(v6, v10, 10, 0)
      : WTF::parseInteger<unsigned int,char16_t>(v6, (v10 >> 1), 10, 0);
  v12 = v43;
  v13 = (v43 & 0xFF00000000) != 0 ? v43 : -1;
  *(_QWORD *)this = v9;
  if (!(_DWORD)v11)
    return 0;
  v14 = (_DWORD)v11 != 2 || v13 > 0x3B;
  v15 = v14;
  v16 = *((_QWORD *)this + 1);
  if (v9 == (_BYTE *)v16)
    return 0;
  v17 = *((unsigned __int8 *)this + 24);
  if (*((_BYTE *)this + 24))
  {
    if (*v9 != 58)
      return 0;
    v18 = (uint64_t)(v9 + 1);
    *(_QWORD *)this = v9 + 1;
    if ((unint64_t)(v9 + 1) >= v16)
      return 0;
    v19 = v16 - v18;
    v20 = v9 + 1;
    while (*v20 - 48 <= 9)
    {
      ++v20;
      if (!--v19)
      {
        v20 = (_BYTE *)v16;
        break;
      }
    }
  }
  else
  {
    if (*(_WORD *)v9 != 58)
      return 0;
    v18 = (uint64_t)(v9 + 2);
    *(_QWORD *)this = v9 + 2;
    if ((unint64_t)(v9 + 2) >= v16)
      return 0;
    v20 = v9 + 2;
    do
    {
      if (*(unsigned __int16 *)v20 - 48 > 9)
        break;
      v20 += 2;
    }
    while ((unint64_t)v20 < v16);
  }
  if ((_BYTE *)v18 == v20)
    return 0;
  v21 = (uint64_t)&v20[-v18];
  v22 = (uint64_t)&v20[-v18] >> (v17 == 0);
  v44 = v17
      ? WTF::parseInteger<unsigned int,unsigned char>(v18, v21, 10, 0)
      : WTF::parseInteger<unsigned int,char16_t>(v18, (v21 >> 1), 10, 0);
  v23 = (v44 & 0xFF00000000) != 0 ? v44 : -1;
  *(_QWORD *)this = v20;
  if ((_DWORD)v22 != 2)
    return 0;
  v24 = *((_QWORD *)this + 1);
  if (v15)
    goto LABEL_52;
  if (v20 == (_BYTE *)v24)
    return 0;
  v25 = *((_BYTE *)this + 24) ? *v20 : *(unsigned __int16 *)v20;
  v26 = 0.0;
  if (v25 == 58)
  {
LABEL_52:
    if (v20 == (_BYTE *)v24)
      return 0;
    v27 = *((unsigned __int8 *)this + 24);
    if (*((_BYTE *)this + 24))
    {
      if (*v20 != 58)
        return 0;
      v28 = (uint64_t)(v20 + 1);
      *(_QWORD *)this = v20 + 1;
      if ((unint64_t)(v20 + 1) >= v24)
        return 0;
      v29 = v24 - v28;
      ++v20;
      while (*v20 - 48 <= 9)
      {
        ++v20;
        if (!--v29)
        {
          v20 = (_BYTE *)v24;
          break;
        }
      }
    }
    else
    {
      if (*(_WORD *)v20 != 58)
        return 0;
      v28 = (uint64_t)(v20 + 2);
      *(_QWORD *)this = v20 + 2;
      if ((unint64_t)(v20 + 2) >= v24)
        return 0;
      v20 += 2;
      do
      {
        if (*(unsigned __int16 *)v20 - 48 > 9)
          break;
        v20 += 2;
      }
      while ((unint64_t)v20 < v24);
    }
    if ((_BYTE *)v28 == v20)
      return 0;
    v30 = (uint64_t)&v20[-v28];
    v31 = (uint64_t)&v20[-v28] >> (v27 == 0);
    v45 = v27
        ? WTF::parseInteger<unsigned int,unsigned char>(v28, v30, 10, 0)
        : WTF::parseInteger<unsigned int,char16_t>(v28, (v30 >> 1), 10, 0);
    *(_QWORD *)this = v20;
    if ((_DWORD)v31 != 2)
      return 0;
    v12 = v23;
    if ((v45 & 0xFF00000000) != 0)
      v23 = v45;
    else
      v23 = -1;
    v24 = *((_QWORD *)this + 1);
    v26 = (double)v13;
  }
  if (v20 == (_BYTE *)v24)
    return 0;
  v32 = *((unsigned __int8 *)this + 24);
  if (!*((_BYTE *)this + 24))
  {
    if (*(_WORD *)v20 == 46)
    {
      v33 = (uint64_t)(v20 + 2);
      *(_QWORD *)this = v20 + 2;
      if ((unint64_t)(v20 + 2) < v24)
      {
        v35 = (unsigned __int16 *)(v20 + 2);
        do
        {
          if (*v35 - 48 > 9)
            break;
          ++v35;
        }
        while ((unint64_t)v35 < v24);
        goto LABEL_87;
      }
    }
    return 0;
  }
  if (*v20 != 46)
    return 0;
  v33 = (uint64_t)(v20 + 1);
  *(_QWORD *)this = v20 + 1;
  if ((unint64_t)(v20 + 1) >= v24)
    return 0;
  v34 = v24 - v33;
  v35 = (unsigned __int16 *)(v20 + 1);
  while (*(unsigned __int8 *)v35 - 48 <= 9)
  {
    v35 = (unsigned __int16 *)((char *)v35 + 1);
    if (!--v34)
    {
      v35 = (unsigned __int16 *)v24;
      break;
    }
  }
LABEL_87:
  if ((unsigned __int16 *)v33 == v35)
    return 0;
  v47 = v26;
  v36 = (uint64_t)v35 - v33;
  v37 = ((uint64_t)v35 - v33) >> (v32 == 0);
  v46 = v32
      ? WTF::parseInteger<unsigned int,unsigned char>(v33, v36, 10, 0)
      : WTF::parseInteger<unsigned int,char16_t>(v33, (v36 >> 1), 10, 0);
  v38 = v46;
  *(_QWORD *)this = v35;
  if ((_DWORD)v37 != 3)
    return 0;
  result = 0;
  if (v12 <= 0x3B && v23 <= 0x3B)
  {
    v40 = (double)v38;
    if ((v38 & 0xFF00000000) == 0)
      v40 = 4294967300.0;
    *(_QWORD *)a2 = WTF::MediaTime::createWithDouble(0, (double)v12 * 60.0 + v47 * 3600.0 + (double)v23 + v40 * 0.001);
    *((_DWORD *)a2 + 2) = v41;
    *((_BYTE *)a2 + 12) = v42;
    return 1;
  }
  return result;
}

WTF::StringImpl *WebCore::WebVTTTreeBuilder::buildFromString@<X0>(WebCore::WebVTTTreeBuilder *this@<X0>, unsigned int **a2@<X1>, uint64_t *a3@<X8>)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl **v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  const WebCore::Style::RuleSet *v12;
  WTF::String *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *result;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  int v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::MediaTime *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  char *v28;
  WTF::StringImpl **v29;
  char *v30;
  unsigned int v31;
  uint64_t v32;
  BOOL v33;
  int v34;
  unsigned int v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;
  int v40;
  int v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(WebCore::SegmentedString *__hidden);
  WebCore::SegmentedString *v46;
  uint64_t (*v47)(WebCore::SegmentedString *__hidden);
  WebCore::SegmentedString *v48;
  uint64_t (*v49)(uint64_t, WTF::StringImpl *);
  uint64_t (*v50)(uint64_t, WTF::StringImpl *);
  WTF::StringImpl *v51;
  char v52;
  int v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  int v57;
  char v58;
  int v59;
  int v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  uint64_t v67;
  uint64_t v68;
  int *v69;
  uint64_t v70;
  const WebCore::Style::RuleSet *v71;
  WTF::String *v72;
  uint64_t v73;
  int *v74;
  int v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  int v79;
  WTF::StringImpl *v80;
  uint64_t v81;
  uint64_t v82;
  const char *v83;
  const char *v84;
  const char *v85;
  int v86;
  uint64_t v87;
  double v88;
  unint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  int v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  int **v97;
  int v98;
  unsigned int v99;
  int v100;
  int v101;
  int v102;
  unsigned int v103;
  int v104;
  int v105;
  uint64_t v107;
  BOOL v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t (*v111)(WebCore::SegmentedString *__hidden);
  WebCore::SegmentedString *v112;
  uint64_t (*v113)(uint64_t, WTF::StringImpl *);
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  const WebCore::Style::RuleSet *v116;
  WTF::String *v117;
  int v118;
  int v119;
  uint64_t v120;
  unint64_t v121;
  _QWORD *v122;
  unint64_t v123;
  uint64_t v124;
  WTF::StringImpl **v125;
  WTF::StringImpl *v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t *v138;
  unint64_t v139;
  _DWORD **v140;
  uint64_t v141;
  _DWORD *v142;
  unsigned int v143;
  uint64_t v144;
  unint64_t v145;
  _QWORD *v146;
  unint64_t v147;
  char v148;
  int v149;
  WTF::StringImpl *v150;
  int v151;
  int v152;
  uint64_t v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  uint64_t v158;
  WTF::StringImpl *v159;
  WTF::StringImpl *v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  _QWORD *v165;
  WTF::StringImpl *v166;
  WebCore::TreeScope *v167;
  WTF::StringImpl **v168;
  _QWORD *v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  WTF::StringImpl *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t (*v177)(WebCore::SegmentedString *__hidden);
  WebCore::SegmentedString *v178;
  uint64_t (*v179)(uint64_t, WTF::StringImpl *);
  int v180;
  uint64_t v181;
  uint64_t v182;
  BOOL v183;
  WTF::StringImpl *v184;
  WTF::StringImpl *v185;
  WTF::StringImpl *v186;
  WTF::StringImpl *v187;
  WTF::StringImpl *v188;
  uint64_t v189;
  const WebCore::Style::RuleSet *v190;
  WTF::String *v191;
  uint64_t v192;
  WTF::StringImpl *v193;
  WTF::StringImpl *v194;
  char v195;
  int v196;
  unsigned int v197;
  int v198;
  int v199;
  uint64_t (*v200)(uint64_t, WTF::StringImpl *);
  uint64_t (*v201)(WebCore::SegmentedString *__hidden);
  WebCore::SegmentedString *v202;
  int v203;
  unsigned int v204;
  int v205;
  int v206;
  uint64_t (*v208)(WebCore::SegmentedString *__hidden);
  WebCore::SegmentedString *v209;
  uint64_t (*v210)(uint64_t, WTF::StringImpl *);
  uint64_t v211;
  BOOL v212;
  uint64_t v213;
  uint64_t v214;
  WTF::StringImpl *v215;
  WTF::StringImpl *v216;
  WTF::StringImpl *v217;
  WTF::StringImpl *v218;
  uint64_t v219;
  BOOL v220;
  uint64_t v221;
  int v222;
  uint64_t v223;
  uint64_t v224;
  WTF::StringImpl *v225;
  uint64_t (*v226)(WebCore::SegmentedString *__hidden);
  WebCore::SegmentedString *v227;
  int v228;
  uint64_t (*v229)(uint64_t, WTF::StringImpl *);
  int v230;
  unsigned int v231;
  int v232;
  uint64_t v233;
  BOOL v234;
  WTF::StringImpl *v235;
  WTF::StringImpl *v236;
  uint64_t v237;
  BOOL v238;
  WTF::StringImpl *v239;
  WTF::StringImpl *v240;
  WTF::StringImpl *v241;
  char v242;
  WTF::StringImpl *v243;
  WTF::StringImpl *v244;
  WTF::StringImpl *v245;
  uint64_t v246;
  BOOL v247;
  WTF::StringImpl *v248;
  WTF::StringImpl *v249;
  WTF::StringImpl *v250;
  int v251;
  uint64_t v252;
  int v253;
  uint64_t v254;
  int v255;
  unsigned int v256;
  int v257;
  int v258;
  int v261;
  uint64_t (*v262)(WebCore::SegmentedString *__hidden);
  WebCore::SegmentedString *v263;
  uint64_t (*v264)(uint64_t, WTF::StringImpl *);
  int v265;
  unsigned int v266;
  int v267;
  int v268;
  uint64_t v269;
  BOOL v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t (*v273)(WebCore::SegmentedString *__hidden);
  WebCore::SegmentedString *v274;
  uint64_t (*v275)(uint64_t, WTF::StringImpl *);
  int v277;
  uint64_t v278;
  WTF *v279;
  uint64_t (*v280)(uint64_t);
  int v281;
  unsigned int v282;
  int v283;
  int v284;
  uint64_t v285;
  WTF *v286;
  WTF::StringImpl **v287;
  uint64_t v288;
  WTF::StringImpl *v289;
  WTF::StringImpl **v290;
  uint64_t v291;
  WTF::StringImpl *v292;
  uint64_t v293;
  WTF::StringImpl *v294;
  WTF::StringImpl **v295;
  uint64_t v296;
  WTF::StringImpl *v297;
  uint64_t (*v298)(WebCore::SegmentedString *__hidden);
  WebCore::SegmentedString *v299;
  uint64_t (*v300)(uint64_t, WTF::StringImpl *);
  WTF::StringImpl ***v301;
  char **v302;
  WTF::StringImpl *v303;
  uint64_t v304;
  unsigned int *v305;
  __int16 v306;
  __int128 v307;
  WTF *v308[2];
  char v309;
  _QWORD v310[2];
  uint64_t (*v311)(WebCore::SegmentedString *__hidden);
  uint64_t v312;
  uint64_t (*v313)(WebCore::SegmentedString *__hidden);
  uint64_t v314;
  WTF::StringImpl **v315;
  unsigned __int16 v316;
  char v317;
  WTF::StringImpl *v318;
  WTF::StringImpl *v319;
  WTF::StringImpl *v320;
  uint64_t v321;
  unsigned int v322;
  char v323;
  WTF::StringImpl *v324;
  uint64_t v325;
  unsigned int v326;
  char v327;
  WTF::StringImpl *v328;
  uint64_t v329;
  unsigned int v330;
  char v331;
  const char *v332;
  uint64_t v333;
  WTF::StringImpl *v334;
  WTF::StringImpl *v335;

  WebCore::DocumentFragment::create(*((WebCore::DocumentFragment **)this + 9), a3);
  if (*a2 && (*a2)[1])
  {
    v18 = *a3;
    if (*a3)
      *(_DWORD *)(v18 + 24) += 2;
    v19 = *((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = v18;
    if (v19)
    {
      if (*(_DWORD *)(v19 + 24) == 2)
      {
        if ((*(_WORD *)(v19 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v19, v6);
      }
      else
      {
        *(_DWORD *)(v19 + 24) -= 2;
      }
    }
    v20 = *a2;
    if (*a2)
    {
      *v20 += 2;
      v303 = (WTF::StringImpl *)v20;
      v21 = v20[1];
      LODWORD(v304) = v21;
      HIDWORD(v304) = v21;
      v305 = 0;
      v306 = 257;
      if (v21)
      {
        v22 = (v20[4] >> 2) & 1;
        LOBYTE(v306) = (v20[4] & 4) != 0;
        v20 = (unsigned int *)*((_QWORD *)v20 + 1);
        v305 = v20;
        goto LABEL_22;
      }
      v20 = 0;
    }
    else
    {
      v21 = 0;
      v303 = 0;
      v304 = 0;
      v305 = 0;
      v306 = 257;
    }
    v22 = 1;
LABEL_22:
    v309 = 0;
    *(_OWORD *)v308 = 0u;
    v307 = 0u;
    memset(v310, 0, 15);
    v311 = WebCore::SegmentedString::advanceEmpty;
    v312 = 0;
    v313 = WebCore::SegmentedString::advanceEmpty;
    v314 = 0;
    if (!v21)
    {
LABEL_26:
      v315 = &v303;
      v316 = 0;
      v317 = 0;
      WTF::String::String();
      v23 = v328;
      v328 = 0;
      v332 = (const char *)v23;
      if (v23)
      {
        LODWORD(v333) = *((_DWORD *)v23 + 1);
        HIDWORD(v333) = v333;
        v334 = 0;
        LOWORD(v335) = 257;
        if ((_DWORD)v333)
        {
          LOBYTE(v335) = (*((_BYTE *)v23 + 16) & 4) != 0;
          v334 = (WTF::StringImpl *)*((_QWORD *)v23 + 1);
        }
      }
      else
      {
        v333 = 0;
        v334 = 0;
        LOWORD(v335) = 257;
      }
      WebCore::SegmentedString::appendSubstring((uint64_t)&v303, (uint64_t *)&v332);
      v26 = (WTF::StringImpl *)v332;
      v332 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
          WTF::StringImpl::destroy(v26, v24);
        else
          *(_DWORD *)v26 -= 2;
      }
      v27 = v328;
      v328 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
          WTF::StringImpl::destroy(v27, v24);
        else
          *(_DWORD *)v27 -= 2;
      }
      v309 = 1;
      v301 = (WTF::StringImpl ***)((char *)this + 56);
      if (*((_DWORD *)this + 16))
      {
        v278 = *((unsigned int *)this + 17);
        if ((_DWORD)v278)
        {
          v290 = *v301;
          v291 = 8 * v278;
          do
          {
            v292 = *v290;
            *v290 = 0;
            if (v292)
            {
              if (*(_DWORD *)v292 == 2)
                WTF::StringImpl::destroy(v292, v24);
              else
                *(_DWORD *)v292 -= 2;
            }
            ++v290;
            v291 -= 8;
          }
          while (v291);
          *((_DWORD *)this + 17) = 0;
        }
        v279 = (WTF *)*v301;
        if (*v301)
        {
          *((_QWORD *)this + 7) = 0;
          *((_DWORD *)this + 16) = 0;
          WTF::fastFree(v279, v24);
        }
      }
      v302 = (char **)((char *)this + 32);
      if (*((_DWORD *)this + 10))
      {
        if (*((_DWORD *)this + 11))
          *((_DWORD *)this + 11) = 0;
        v28 = *v302;
        if (*v302)
        {
          *((_QWORD *)this + 4) = 0;
          *((_DWORD *)this + 10) = 0;
          WTF::fastFree((WTF *)v28, v24);
        }
      }
      if (!HIDWORD(v304))
        goto LABEL_785;
      v29 = (WTF::StringImpl **)((char *)this + 16);
      v30 = (char *)this + 24;
LABEL_43:
      v31 = LOWORD(v310[0]);
      v316 = v310[0];
      if (LOWORD(v310[0]) >= 0x10u)
      {
        v317 = 0;
LABEL_45:
        v328 = 0;
        v329 = 0;
        v330 = 0;
        v331 = 1;
        v324 = 0;
        v325 = 0;
        v326 = 0;
        v327 = 1;
        v320 = 0;
        v321 = 0;
        v322 = 0;
        v323 = 1;
        while (v31 != 38)
        {
          if (!v31)
          {
            v51 = v324;
            if (v324
              || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v324),
                  WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v324),
                  (v51 = v324) != 0))
            {
              v58 = 0;
              v59 = *(_DWORD *)v51;
              LODWORD(v332) = 1;
              *(_DWORD *)v51 = v59 + 4;
            }
            else
            {
              v58 = 1;
              LODWORD(v332) = 1;
            }
            v333 = (uint64_t)v51;
            v334 = 0;
            v335 = 0;
            WebCore::advanceAndEmitToken((uint64_t)&v303, this, (uint64_t)&v332);
            v333 = 0;
            v334 = 0;
            v335 = 0;
            if (!v51)
              goto LABEL_122;
LABEL_120:
            if (*(_DWORD *)v51 == 2)
              WTF::StringImpl::destroy(v51, v24);
            else
              *(_DWORD *)v51 -= 2;
            goto LABEL_122;
          }
          if (v31 == 60)
          {
            if (v326)
            {
              v51 = v324;
              if (v324
                || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v324),
                    WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v324),
                    (v51 = v324) != 0))
              {
                v52 = 0;
                v53 = *(_DWORD *)v51;
                *(_DWORD *)this = 1;
                *(_DWORD *)v51 = v53 + 6;
              }
              else
              {
                v52 = 1;
                *(_DWORD *)this = 1;
              }
              v54 = (WTF::StringImpl *)*((_QWORD *)this + 1);
              *((_QWORD *)this + 1) = v51;
              if (v54)
              {
                if (*(_DWORD *)v54 == 2)
                  WTF::StringImpl::destroy(v54, v24);
                else
                  *(_DWORD *)v54 -= 2;
              }
              v55 = *v29;
              *v29 = 0;
              if (v55)
              {
                if (*(_DWORD *)v55 == 2)
                  WTF::StringImpl::destroy(v55, v24);
                else
                  *(_DWORD *)v55 -= 2;
              }
              v56 = *(WTF::StringImpl **)v30;
              *(_QWORD *)v30 = 0;
              if (!v56)
                goto LABEL_113;
              if (*(_DWORD *)v56 == 2)
              {
                WTF::StringImpl::destroy(v56, v24);
                if ((v52 & 1) != 0)
                  goto LABEL_126;
              }
              else
              {
                *(_DWORD *)v56 -= 2;
LABEL_113:
                if ((v52 & 1) != 0)
                  goto LABEL_126;
              }
              v57 = *(_DWORD *)v51 - 2;
              if (*(_DWORD *)v51 == 2)
              {
                WTF::StringImpl::destroy(v51, v24);
                goto LABEL_123;
              }
              *(_DWORD *)v51 = v57;
              goto LABEL_124;
            }
            if ((v310[1] & 0x2000000000000) == 0)
            {
              v177 = v313;
              v178 = (WebCore::SegmentedString *)((char *)&v303 + (v314 >> 1));
              if ((v314 & 1) != 0)
                v177 = *(uint64_t (**)(WebCore::SegmentedString *__hidden))(*(_QWORD *)v178
                                                                                    + v313);
              v177(v178);
              v101 = HIDWORD(v304);
LABEL_184:
              if (v101)
              {
                v99 = LOWORD(v310[0]);
                goto LABEL_186;
              }
              goto LABEL_400;
            }
            v98 = LOWORD(v310[0]);
            v305 = (unsigned int *)((char *)v305 + 1);
            v99 = *(unsigned __int8 *)v305;
            LOWORD(v310[0]) = *(unsigned __int8 *)v305;
            v100 = HIDWORD(v304);
            v101 = --HIDWORD(v304);
            if (v98 != 10 && v101 != 1)
              goto LABEL_184;
            if ((v310[1] & 0x1000000000000) != 0 && v98 == 10)
            {
              *(_DWORD *)((char *)v310 + 6) = *(_DWORD *)((char *)v310 + 2) - v100 + v304 + 1;
              ++*(_DWORD *)((char *)&v310[1] + 2);
            }
            if (v101 != 1)
              goto LABEL_184;
            BYTE6(v310[1]) = 0;
            v311 = (uint64_t (*)(WebCore::SegmentedString *__hidden))WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
            v312 = 0;
            v179 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
            if (!HIBYTE(v306))
              v179 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
            v313 = (uint64_t (*)(WebCore::SegmentedString *__hidden))v179;
            v314 = 0;
LABEL_186:
            v316 = v99;
            if (v99 >= 0x10)
            {
              v317 = 0;
              goto LABEL_188;
            }
            WebCore::InputStreamPreprocessor<WebCore::WebVTTTokenizer>::processNextInputCharacter((uint64_t)&v315, (uint64_t)&v303);
LABEL_400:
            v99 = v316;
LABEL_188:
            if (v99 > 0x2F)
              goto LABEL_251;
            if (((1 << v99) & 0x100001600) != 0)
              goto LABEL_476;
            if (v99 == 46)
            {
              while (1)
              {
LABEL_586:
                if ((v310[1] & 0x2000000000000) != 0)
                {
                  v230 = LOWORD(v310[0]);
                  v305 = (unsigned int *)((char *)v305 + 1);
                  v231 = *(unsigned __int8 *)v305;
                  LOWORD(v310[0]) = *(unsigned __int8 *)v305;
                  v232 = HIDWORD(v304);
                  v228 = --HIDWORD(v304);
                  if (v230 == 10 || v228 == 1)
                  {
                    if ((v310[1] & 0x1000000000000) != 0 && v230 == 10)
                    {
                      *(_DWORD *)((char *)v310 + 6) = *(_DWORD *)((char *)v310 + 2) - v232 + v304 + 1;
                      ++*(_DWORD *)((char *)&v310[1] + 2);
                    }
                    if (v228 == 1)
                    {
                      BYTE6(v310[1]) = 0;
                      v311 = (uint64_t (*)(WebCore::SegmentedString *__hidden))WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                      v312 = 0;
                      v229 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
                      if (!HIBYTE(v306))
                        v229 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                      v313 = (uint64_t (*)(WebCore::SegmentedString *__hidden))v229;
                      v314 = 0;
                      goto LABEL_591;
                    }
                  }
                }
                else
                {
                  v226 = v313;
                  v227 = (WebCore::SegmentedString *)((char *)&v303 + (v314 >> 1));
                  if ((v314 & 1) != 0)
                    v226 = *(uint64_t (**)(WebCore::SegmentedString *__hidden))(*(_QWORD *)v227
                                                                                        + v313);
                  v226(v227);
                  v228 = HIDWORD(v304);
                }
                if (v228)
                {
                  v231 = LOWORD(v310[0]);
LABEL_591:
                  v316 = v231;
                  if (v231 < 0x10)
                    WebCore::InputStreamPreprocessor<WebCore::WebVTTTokenizer>::processNextInputCharacter((uint64_t)&v315, (uint64_t)&v303);
                  else
                    v317 = 0;
                }
                if (v316 > 0x3Eu)
                {
LABEL_560:
                  LOWORD(v332) = v316;
                  if (v329 && ((v219 = v330, v330 < *(_DWORD *)(v329 + 4)) ? (v220 = v328 == 0) : (v220 = 0), v220))
                  {
                    if ((*(_BYTE *)(v329 + 16) & 4) != 0)
                    {
                      if (v316 > 0xFFu)
                        goto LABEL_565;
                      v224 = *(_QWORD *)(v329 + 8);
                      ++v330;
                      *(_BYTE *)(v224 + v219) = v316;
                    }
                    else
                    {
                      v221 = *(_QWORD *)(v329 + 8);
                      ++v330;
                      *(_WORD *)(v221 + 2 * v219) = v316;
                    }
                  }
                  else
                  {
LABEL_565:
                    WTF::StringBuilder::append();
                  }
                }
                else
                {
                  if (v316 != 46)
                  {
                    if (((1 << v316) & 0x100001600) != 0)
                    {
                      v246 = v322;
                      if (v322)
                      {
                        LOBYTE(v332) = 32;
                        if (v321 && (v322 < *(_DWORD *)(v321 + 4) ? (v247 = v320 == 0) : (v247 = 0), v247))
                        {
                          v251 = *(_DWORD *)(v321 + 16);
                          v252 = *(_QWORD *)(v321 + 8);
                          ++v322;
                          if ((v251 & 4) != 0)
                            *(_BYTE *)(v252 + v246) = 32;
                          else
                            *(_WORD *)(v252 + 2 * v246) = 32;
                        }
                        else
                        {
                          WTF::StringBuilder::append();
                        }
                      }
                      WTF::StringBuilder::append(&v320, &v328);
                      v249 = v328;
                      v328 = 0;
                      if (v249)
                      {
                        if (*(_DWORD *)v249 == 2)
                          WTF::StringImpl::destroy(v249, v248);
                        else
                          *(_DWORD *)v249 -= 2;
                      }
                      v250 = (WTF::StringImpl *)v329;
                      v329 = 0;
                      if (v250)
                      {
                        if (*(_DWORD *)v250 == 2)
                          WTF::StringImpl::destroy(v250, v248);
                        else
                          *(_DWORD *)v250 -= 2;
                      }
                      v330 = 0;
                      goto LABEL_476;
                    }
                    if (((1 << v316) & 0x4000000000000001) != 0)
                    {
                      v237 = v322;
                      if (v322)
                      {
                        LOBYTE(v332) = 32;
                        if (v321 && (v322 < *(_DWORD *)(v321 + 4) ? (v238 = v320 == 0) : (v238 = 0), v238))
                        {
                          v253 = *(_DWORD *)(v321 + 16);
                          v254 = *(_QWORD *)(v321 + 8);
                          ++v322;
                          if ((v253 & 4) != 0)
                            *(_BYTE *)(v254 + v237) = 32;
                          else
                            *(_WORD *)(v254 + 2 * v237) = 32;
                        }
                        else
                        {
                          WTF::StringBuilder::append();
                        }
                      }
                      WTF::StringBuilder::append(&v320, &v328);
                      v240 = v328;
                      v328 = 0;
                      if (v240)
                      {
                        if (*(_DWORD *)v240 == 2)
                          WTF::StringImpl::destroy(v240, v239);
                        else
                          *(_DWORD *)v240 -= 2;
                      }
                      v241 = (WTF::StringImpl *)v329;
                      v329 = 0;
                      if (v241)
                      {
                        if (*(_DWORD *)v241 == 2)
                          WTF::StringImpl::destroy(v241, v239);
                        else
                          *(_DWORD *)v241 -= 2;
                      }
                      v330 = 0;
                      v51 = v324;
                      if (v324
                        || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v324),
                            WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v324),
                            (v51 = v324) != 0))
                      {
                        *(_DWORD *)v51 += 2;
                        WTF::StringBuilder::toAtomString((WTF::AtomString *)&v320, (WTF::AtomString *)&v319);
                        v242 = 0;
                        LODWORD(v332) = 2;
                        *(_DWORD *)v51 += 2;
                      }
                      else
                      {
                        WTF::StringBuilder::toAtomString((WTF::AtomString *)&v320, (WTF::AtomString *)&v319);
                        LODWORD(v332) = 2;
                        v242 = 1;
                      }
                      v333 = (uint64_t)v51;
                      v243 = v319;
                      if (v319)
                        *(_DWORD *)v319 += 2;
                      v335 = v243;
                      v244 = (WTF::StringImpl *)*MEMORY[0x1E0CBF3B8];
                      if (*MEMORY[0x1E0CBF3B8])
                        *(_DWORD *)v244 += 2;
                      v334 = v244;
                      WebCore::advanceAndEmitToken((uint64_t)&v303, this, (uint64_t)&v332);
                      v335 = 0;
                      if (v243)
                      {
                        if (*(_DWORD *)v243 == 2)
                          WTF::StringImpl::destroy(v243, v24);
                        else
                          *(_DWORD *)v243 -= 2;
                      }
                      v334 = 0;
                      if (v244)
                      {
                        if (*(_DWORD *)v244 == 2)
                          WTF::StringImpl::destroy(v244, v24);
                        else
                          *(_DWORD *)v244 -= 2;
                      }
                      v333 = 0;
                      if (v51)
                      {
                        if (*(_DWORD *)v51 == 2)
                          WTF::StringImpl::destroy(v51, v24);
                        else
                          *(_DWORD *)v51 -= 2;
                      }
                      v245 = v319;
                      v319 = 0;
                      if (v245)
                      {
                        if (*(_DWORD *)v245 == 2)
                          WTF::StringImpl::destroy(v245, v24);
                        else
                          *(_DWORD *)v245 -= 2;
                      }
                      if ((v242 & 1) != 0)
                        goto LABEL_126;
                      goto LABEL_123;
                    }
                    goto LABEL_560;
                  }
                  v233 = v322;
                  if (v322)
                  {
                    LOBYTE(v332) = 32;
                    if (v321 && (v322 < *(_DWORD *)(v321 + 4) ? (v234 = v320 == 0) : (v234 = 0), v234))
                    {
                      v222 = *(_DWORD *)(v321 + 16);
                      v223 = *(_QWORD *)(v321 + 8);
                      ++v322;
                      if ((v222 & 4) != 0)
                        *(_BYTE *)(v223 + v233) = 32;
                      else
                        *(_WORD *)(v223 + 2 * v233) = 32;
                    }
                    else
                    {
                      WTF::StringBuilder::append();
                    }
                  }
                  WTF::StringBuilder::append(&v320, &v328);
                  v235 = v328;
                  v328 = 0;
                  if (v235)
                  {
                    if (*(_DWORD *)v235 == 2)
                      WTF::StringImpl::destroy(v235, v225);
                    else
                      *(_DWORD *)v235 -= 2;
                  }
                  v236 = (WTF::StringImpl *)v329;
                  v329 = 0;
                  if (v236)
                  {
                    if (*(_DWORD *)v236 == 2)
                      WTF::StringImpl::destroy(v236, v225);
                    else
                      *(_DWORD *)v236 -= 2;
                  }
                  v330 = 0;
                }
              }
            }
            if (v99 == 47)
            {
              while (1)
              {
                if ((v310[1] & 0x2000000000000) != 0)
                {
                  v102 = LOWORD(v310[0]);
                  v305 = (unsigned int *)((char *)v305 + 1);
                  v103 = *(unsigned __int8 *)v305;
                  LOWORD(v310[0]) = *(unsigned __int8 *)v305;
                  v104 = HIDWORD(v304);
                  v105 = --HIDWORD(v304);
                  if (v102 == 10 || v105 == 1)
                  {
                    if ((v310[1] & 0x1000000000000) != 0 && v102 == 10)
                    {
                      *(_DWORD *)((char *)v310 + 6) = *(_DWORD *)((char *)v310 + 2) - v104 + v304 + 1;
                      ++*(_DWORD *)((char *)&v310[1] + 2);
                    }
                    if (v105 == 1)
                    {
                      BYTE6(v310[1]) = 0;
                      v311 = (uint64_t (*)(WebCore::SegmentedString *__hidden))WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                      v312 = 0;
                      v113 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
                      if (!HIBYTE(v306))
                        v113 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                      v313 = (uint64_t (*)(WebCore::SegmentedString *__hidden))v113;
                      v314 = 0;
                      goto LABEL_197;
                    }
                  }
                }
                else
                {
                  v111 = v313;
                  v112 = (WebCore::SegmentedString *)((char *)&v303 + (v314 >> 1));
                  if ((v314 & 1) != 0)
                    v111 = *(uint64_t (**)(WebCore::SegmentedString *__hidden))(*(_QWORD *)v112
                                                                                        + v313);
                  v111(v112);
                  v105 = HIDWORD(v304);
                }
                if (!v105)
                  goto LABEL_199;
                v103 = LOWORD(v310[0]);
LABEL_197:
                v316 = v103;
                if (v103 < 0x10)
                  WebCore::InputStreamPreprocessor<WebCore::WebVTTTokenizer>::processNextInputCharacter((uint64_t)&v315, (uint64_t)&v303);
                else
                  v317 = 0;
LABEL_199:
                if (v316 == 62 || v316 == 0)
                {
                  v51 = v324;
                  if (v324
                    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v324),
                        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v324),
                        (v51 = v324) != 0))
                  {
                    v58 = 0;
                    v130 = *(_DWORD *)v51;
                    LODWORD(v332) = 3;
                    *(_DWORD *)v51 = v130 + 4;
                  }
                  else
                  {
                    LODWORD(v332) = 3;
                    v58 = 1;
                  }
                  goto LABEL_700;
                }
                LOWORD(v332) = v316;
                if (v325 && ((v107 = v326, v326 < *(_DWORD *)(v325 + 4)) ? (v108 = v324 == 0) : (v108 = 0), v108))
                {
                  if ((*(_BYTE *)(v325 + 16) & 4) != 0)
                  {
                    if (v316 > 0xFFu)
                      goto LABEL_208;
                    v110 = *(_QWORD *)(v325 + 8);
                    ++v326;
                    *(_BYTE *)(v110 + v107) = v316;
                  }
                  else
                  {
                    v109 = *(_QWORD *)(v325 + 8);
                    ++v326;
                    *(_WORD *)(v109 + 2 * v107) = v316;
                  }
                }
                else
                {
LABEL_208:
                  WTF::StringBuilder::append();
                }
              }
            }
LABEL_251:
            if (v99 - 48 > 9)
            {
              if (v99 == 62 || !v99)
              {
                v51 = v324;
                if (v324
                  || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v324),
                      WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v324),
                      (v51 = v324) != 0))
                {
                  v148 = 0;
                  v149 = *(_DWORD *)v51;
                  LODWORD(v332) = 2;
                  *(_DWORD *)v51 = v149 + 4;
                }
                else
                {
                  LODWORD(v332) = 2;
                  v148 = 1;
                }
                v333 = (uint64_t)v51;
                v150 = (WTF::StringImpl *)*MEMORY[0x1E0CBF3B8];
                if (!*MEMORY[0x1E0CBF3B8])
                  goto LABEL_467;
                goto LABEL_295;
              }
              LOWORD(v332) = v99;
              if (!v325)
                goto LABEL_714;
              v162 = v326;
              if (v326 >= *(_DWORD *)(v325 + 4) || v324)
                goto LABEL_714;
              if ((*(_BYTE *)(v325 + 16) & 4) != 0)
              {
                if (v99 > 0xFF)
                  goto LABEL_714;
                v176 = *(_QWORD *)(v325 + 8);
                ++v326;
                *(_BYTE *)(v176 + v162) = v99;
              }
              else
              {
                v163 = *(_QWORD *)(v325 + 8);
                ++v326;
                *(_WORD *)(v163 + 2 * v162) = v99;
              }
              while (1)
              {
                if ((v310[1] & 0x2000000000000) != 0)
                {
                  v265 = LOWORD(v310[0]);
                  v305 = (unsigned int *)((char *)v305 + 1);
                  v266 = *(unsigned __int8 *)v305;
                  LOWORD(v310[0]) = *(unsigned __int8 *)v305;
                  v267 = HIDWORD(v304);
                  v268 = --HIDWORD(v304);
                  if (v265 == 10 || v268 == 1)
                  {
                    if ((v310[1] & 0x1000000000000) != 0 && v265 == 10)
                    {
                      *(_DWORD *)((char *)v310 + 6) = *(_DWORD *)((char *)v310 + 2) - v267 + v304 + 1;
                      ++*(_DWORD *)((char *)&v310[1] + 2);
                    }
                    if (v268 == 1)
                    {
                      BYTE6(v310[1]) = 0;
                      v311 = (uint64_t (*)(WebCore::SegmentedString *__hidden))WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                      v312 = 0;
                      v275 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
                      if (!HIBYTE(v306))
                        v275 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                      v313 = (uint64_t (*)(WebCore::SegmentedString *__hidden))v275;
                      v314 = 0;
                      goto LABEL_720;
                    }
                  }
                }
                else
                {
                  v273 = v313;
                  v274 = (WebCore::SegmentedString *)((char *)&v303 + (v314 >> 1));
                  if ((v314 & 1) != 0)
                    v273 = *(uint64_t (**)(WebCore::SegmentedString *__hidden))(*(_QWORD *)v274
                                                                                        + v313);
                  v273(v274);
                  v268 = HIDWORD(v304);
                }
                if (v268)
                {
                  v266 = LOWORD(v310[0]);
LABEL_720:
                  v316 = v266;
                  if (v266 < 0x10)
                    WebCore::InputStreamPreprocessor<WebCore::WebVTTTokenizer>::processNextInputCharacter((uint64_t)&v315, (uint64_t)&v303);
                  else
                    v317 = 0;
                }
                if (v316 <= 0x3Eu)
                {
                  if (((1 << v316) & 0x100001600) != 0)
                  {
                    v195 = BYTE6(v310[1]);
                    if ((v310[1] & 0x2000000000000) == 0)
                      goto LABEL_486;
                    v196 = LOWORD(v310[0]);
                    v305 = (unsigned int *)((char *)v305 + 1);
                    v197 = *(unsigned __int8 *)v305;
                    LOWORD(v310[0]) = *(unsigned __int8 *)v305;
                    v198 = HIDWORD(v304);
                    v199 = --HIDWORD(v304);
                    if (v196 != 10 && v199 != 1)
                      goto LABEL_489;
                    while (2)
                    {
                      if ((v195 & 1) != 0 && v196 == 10)
                      {
                        *(_DWORD *)((char *)v310 + 6) = *(_DWORD *)((char *)v310 + 2) - v198 + v304 + 1;
                        ++*(_DWORD *)((char *)&v310[1] + 2);
                      }
                      if (v199 == 1)
                      {
                        BYTE6(v310[1]) = 0;
                        v311 = (uint64_t (*)(WebCore::SegmentedString *__hidden))WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                        v312 = 0;
                        v200 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
                        if (!HIBYTE(v306))
                          v200 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                        v313 = (uint64_t (*)(WebCore::SegmentedString *__hidden))v200;
                        v314 = 0;
                      }
                      else
                      {
LABEL_489:
                        if (!v199)
                          goto LABEL_493;
LABEL_490:
                        v197 = LOWORD(v310[0]);
                      }
                      v316 = v197;
                      if (v197 < 0x10)
                        WebCore::InputStreamPreprocessor<WebCore::WebVTTTokenizer>::processNextInputCharacter((uint64_t)&v315, (uint64_t)&v303);
                      else
                        v317 = 0;
LABEL_493:
                      if (v316 != 38)
                      {
                        if (v316 && v316 != 62)
                        {
                          LOWORD(v332) = v316;
                          if (v329
                            && ((v211 = v330, v330 < *(_DWORD *)(v329 + 4)) ? (v212 = v328 == 0) : (v212 = 0), v212))
                          {
                            if ((*(_BYTE *)(v329 + 16) & 4) != 0)
                            {
                              if (v316 > 0xFFu)
                                goto LABEL_475;
                              v214 = *(_QWORD *)(v329 + 8);
                              ++v330;
                              *(_BYTE *)(v214 + v211) = v316;
                            }
                            else
                            {
                              v213 = *(_QWORD *)(v329 + 8);
                              ++v330;
                              *(_WORD *)(v213 + 2 * v211) = v316;
                            }
                          }
                          else
                          {
LABEL_475:
                            WTF::StringBuilder::append();
                          }
LABEL_476:
                          v195 = BYTE6(v310[1]);
                          if ((v310[1] & 0x2000000000000) != 0)
                          {
                            v196 = LOWORD(v310[0]);
                            v305 = (unsigned int *)((char *)v305 + 1);
                            v197 = *(unsigned __int8 *)v305;
                            LOWORD(v310[0]) = *(unsigned __int8 *)v305;
                            v198 = HIDWORD(v304);
                            v199 = --HIDWORD(v304);
                            if (v196 == 10 || v199 == 1)
                              continue;
                            goto LABEL_489;
                          }
LABEL_486:
                          v201 = v313;
                          v202 = (WebCore::SegmentedString *)((char *)&v303 + (v314 >> 1));
                          if ((v314 & 1) != 0)
                            v201 = *(uint64_t (**)(WebCore::SegmentedString *__hidden))(*(_QWORD *)v202
                                                                                                + v313);
                          v201(v202);
                          v199 = HIDWORD(v304);
                          goto LABEL_489;
                        }
                        v51 = v324;
                        if (v324
                          || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v324),
                              WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v324),
                              (v51 = v324) != 0))
                        {
                          *(_DWORD *)v51 += 2;
                        }
                        WTF::StringBuilder::toAtomString((WTF::AtomString *)&v320, (WTF::AtomString *)&v319);
                        WTF::StringBuilder::toAtomString((WTF::AtomString *)&v328, (WTF::AtomString *)&v318);
                        LODWORD(v332) = 2;
                        if (v51)
                          *(_DWORD *)v51 += 2;
                        v333 = (uint64_t)v51;
                        v215 = v319;
                        if (v319)
                          *(_DWORD *)v319 += 2;
                        v335 = v215;
                        v216 = v318;
                        if (v318)
                          *(_DWORD *)v318 += 2;
                        v334 = v216;
                        WebCore::advanceAndEmitToken((uint64_t)&v303, this, (uint64_t)&v332);
                        v335 = 0;
                        if (v215)
                        {
                          if (*(_DWORD *)v215 == 2)
                            WTF::StringImpl::destroy(v215, v24);
                          else
                            *(_DWORD *)v215 -= 2;
                        }
                        v334 = 0;
                        if (v216)
                        {
                          if (*(_DWORD *)v216 == 2)
                            WTF::StringImpl::destroy(v216, v24);
                          else
                            *(_DWORD *)v216 -= 2;
                        }
                        v333 = 0;
                        if (v51)
                        {
                          if (*(_DWORD *)v51 == 2)
                            WTF::StringImpl::destroy(v51, v24);
                          else
                            *(_DWORD *)v51 -= 2;
                        }
                        v217 = v318;
                        v318 = 0;
                        if (v217)
                        {
                          if (*(_DWORD *)v217 == 2)
                            WTF::StringImpl::destroy(v217, v24);
                          else
                            *(_DWORD *)v217 -= 2;
                        }
                        v218 = v319;
                        v319 = 0;
                        if (v218)
                        {
                          if (*(_DWORD *)v218 == 2)
                            WTF::StringImpl::destroy(v218, v24);
                          else
                            *(_DWORD *)v218 -= 2;
                        }
                        if (!v51)
                          goto LABEL_126;
LABEL_123:
                        v57 = *(_DWORD *)v51;
LABEL_124:
                        v60 = v57 - 2;
                        if (v60)
                          *(_DWORD *)v51 = v60;
                        else
                          WTF::StringImpl::destroy(v51, v24);
                        goto LABEL_126;
                      }
                      break;
                    }
                    if ((v310[1] & 0x2000000000000) != 0)
                    {
                      v203 = LOWORD(v310[0]);
                      v305 = (unsigned int *)((char *)v305 + 1);
                      v204 = *(unsigned __int8 *)v305;
                      LOWORD(v310[0]) = *(unsigned __int8 *)v305;
                      v205 = HIDWORD(v304);
                      v206 = --HIDWORD(v304);
                      if (v203 == 10 || v206 == 1)
                      {
                        if ((v310[1] & 0x1000000000000) != 0 && v203 == 10)
                        {
                          *(_DWORD *)((char *)v310 + 6) = *(_DWORD *)((char *)v310 + 2) - v205 + v304 + 1;
                          ++*(_DWORD *)((char *)&v310[1] + 2);
                        }
                        if (v206 == 1)
                        {
                          BYTE6(v310[1]) = 0;
                          v311 = (uint64_t (*)(WebCore::SegmentedString *__hidden))WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                          v312 = 0;
                          v210 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
                          if (!HIBYTE(v306))
                            v210 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                          v313 = (uint64_t (*)(WebCore::SegmentedString *__hidden))v210;
                          v314 = 0;
LABEL_501:
                          v316 = v204;
                          if (v204 < 0x10)
                            WebCore::InputStreamPreprocessor<WebCore::WebVTTTokenizer>::processNextInputCharacter((uint64_t)&v315, (uint64_t)&v303);
                          else
                            v317 = 0;
                          goto LABEL_503;
                        }
                      }
                    }
                    else
                    {
                      v208 = v313;
                      v209 = (WebCore::SegmentedString *)((char *)&v303 + (v314 >> 1));
                      if ((v314 & 1) != 0)
                        v208 = *(uint64_t (**)(WebCore::SegmentedString *__hidden))(*(_QWORD *)v209
                                                                                            + v313);
                      v208(v209);
                      v206 = HIDWORD(v304);
                    }
                    if (v206)
                    {
                      v204 = LOWORD(v310[0]);
                      goto LABEL_501;
                    }
LABEL_503:
                    WebCore::ProcessEntity((unint64_t)&v303, (uint64_t)&v324, 62);
                    if (HIDWORD(v304))
                      goto LABEL_490;
                    goto LABEL_493;
                  }
                  if (((1 << v316) & 0x4000000000000001) != 0)
                  {
                    v51 = v324;
                    if (v324
                      || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v324),
                          WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v324),
                          (v51 = v324) != 0))
                    {
                      v148 = 0;
                      v277 = *(_DWORD *)v51;
                      LODWORD(v332) = 2;
                      *(_DWORD *)v51 = v277 + 4;
                    }
                    else
                    {
                      LODWORD(v332) = 2;
                      v148 = 1;
                    }
                    v333 = (uint64_t)v51;
                    v150 = (WTF::StringImpl *)*MEMORY[0x1E0CBF3B8];
                    if (!*MEMORY[0x1E0CBF3B8])
                    {
LABEL_467:
                      v334 = 0;
                      v335 = 0;
                      WebCore::advanceAndEmitToken((uint64_t)&v303, this, (uint64_t)&v332);
                      v334 = 0;
                      v335 = 0;
                      goto LABEL_299;
                    }
LABEL_295:
                    *(_DWORD *)v150 += 4;
                    v334 = v150;
                    v335 = v150;
                    WebCore::advanceAndEmitToken((uint64_t)&v303, this, (uint64_t)&v332);
                    v335 = 0;
                    v151 = *(_DWORD *)v150 - 2;
                    if (*(_DWORD *)v150 == 2)
                    {
                      WTF::StringImpl::destroy(v150, v24);
                      v151 = *(_DWORD *)v150;
                    }
                    else
                    {
                      *(_DWORD *)v150 = v151;
                    }
                    v334 = 0;
                    v152 = v151 - 2;
                    if (v152)
                      *(_DWORD *)v150 = v152;
                    else
                      WTF::StringImpl::destroy(v150, v24);
LABEL_299:
                    v333 = 0;
                    if (v51)
                    {
                      if (*(_DWORD *)v51 == 2)
                        WTF::StringImpl::destroy(v51, v24);
                      else
                        *(_DWORD *)v51 -= 2;
                    }
                    if ((v148 & 1) != 0)
                      goto LABEL_126;
                    goto LABEL_123;
                  }
                  if (v316 == 46)
                    goto LABEL_586;
                }
                LOWORD(v332) = v316;
                if (v325 && ((v269 = v326, v326 < *(_DWORD *)(v325 + 4)) ? (v270 = v324 == 0) : (v270 = 0), v270))
                {
                  if ((*(_BYTE *)(v325 + 16) & 4) != 0)
                  {
                    if (v316 > 0xFFu)
                      goto LABEL_714;
                    v272 = *(_QWORD *)(v325 + 8);
                    ++v326;
                    *(_BYTE *)(v272 + v269) = v316;
                  }
                  else
                  {
                    v271 = *(_QWORD *)(v325 + 8);
                    ++v326;
                    *(_WORD *)(v271 + 2 * v269) = v316;
                  }
                }
                else
                {
LABEL_714:
                  WTF::StringBuilder::append();
                }
              }
            }
            LOWORD(v332) = v99;
            if (v325)
            {
              v127 = v326;
              if (v326 < *(_DWORD *)(v325 + 4) && !v324)
              {
                v128 = *(_DWORD *)(v325 + 16);
                v129 = *(_QWORD *)(v325 + 8);
                ++v326;
                if ((v128 & 4) == 0)
                  goto LABEL_474;
LABEL_696:
                *(_BYTE *)(v129 + v127) = v99;
                goto LABEL_675;
              }
            }
LABEL_674:
            WTF::StringBuilder::append();
LABEL_675:
            while (2)
            {
              if ((v310[1] & 0x2000000000000) != 0)
              {
                v255 = LOWORD(v310[0]);
                v305 = (unsigned int *)((char *)v305 + 1);
                v256 = *(unsigned __int8 *)v305;
                LOWORD(v310[0]) = *(unsigned __int8 *)v305;
                v257 = HIDWORD(v304);
                v258 = --HIDWORD(v304);
                if (v255 == 10 || v258 == 1)
                {
                  if ((v310[1] & 0x1000000000000) != 0 && v255 == 10)
                  {
                    *(_DWORD *)((char *)v310 + 6) = *(_DWORD *)((char *)v310 + 2) - v257 + v304 + 1;
                    ++*(_DWORD *)((char *)&v310[1] + 2);
                  }
                  if (v258 == 1)
                  {
                    BYTE6(v310[1]) = 0;
                    v311 = (uint64_t (*)(WebCore::SegmentedString *__hidden))WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                    v312 = 0;
                    v264 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
                    if (!HIBYTE(v306))
                      v264 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                    v313 = (uint64_t (*)(WebCore::SegmentedString *__hidden))v264;
                    v314 = 0;
LABEL_680:
                    v316 = v256;
                    if (v256 < 0x10)
                      WebCore::InputStreamPreprocessor<WebCore::WebVTTTokenizer>::processNextInputCharacter((uint64_t)&v315, (uint64_t)&v303);
                    else
                      v317 = 0;
                    goto LABEL_682;
                  }
                }
              }
              else
              {
                v262 = v313;
                v263 = (WebCore::SegmentedString *)((char *)&v303 + (v314 >> 1));
                if ((v314 & 1) != 0)
                  v262 = *(uint64_t (**)(WebCore::SegmentedString *__hidden))(*(_QWORD *)v263
                                                                                      + v313);
                v262(v263);
                v258 = HIDWORD(v304);
              }
              if (v258)
              {
                v256 = LOWORD(v310[0]);
                goto LABEL_680;
              }
LABEL_682:
              LOWORD(v99) = v316;
              if (v316 != 62 && v316 != 0)
              {
                LOWORD(v332) = v316;
                if (v325)
                {
                  v127 = v326;
                  if (v326 < *(_DWORD *)(v325 + 4) && v324 == 0)
                  {
                    if ((*(_BYTE *)(v325 + 16) & 4) == 0)
                    {
                      v129 = *(_QWORD *)(v325 + 8);
                      ++v326;
LABEL_474:
                      *(_WORD *)(v129 + 2 * v127) = v99;
                      continue;
                    }
                    if (v316 <= 0xFFu)
                    {
                      v129 = *(_QWORD *)(v325 + 8);
                      ++v326;
                      goto LABEL_696;
                    }
                  }
                }
                goto LABEL_674;
              }
              break;
            }
            v51 = v324;
            if (v324
              || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v324),
                  WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v324),
                  (v51 = v324) != 0))
            {
              v58 = 0;
              v261 = *(_DWORD *)v51;
              LODWORD(v332) = 4;
              *(_DWORD *)v51 = v261 + 4;
            }
            else
            {
              LODWORD(v332) = 4;
              v58 = 1;
            }
LABEL_700:
            v333 = (uint64_t)v51;
            v334 = 0;
            v335 = 0;
            WebCore::advanceAndEmitToken((uint64_t)&v303, this, (uint64_t)&v332);
            v333 = 0;
            v334 = 0;
            v335 = 0;
            if (v51)
              goto LABEL_120;
LABEL_122:
            if ((v58 & 1) == 0)
              goto LABEL_123;
LABEL_126:
            v61 = (WTF::StringImpl *)v321;
            v321 = 0;
            if (v61)
            {
              if (*(_DWORD *)v61 == 2)
                WTF::StringImpl::destroy(v61, v24);
              else
                *(_DWORD *)v61 -= 2;
            }
            v62 = v320;
            v320 = 0;
            if (v62)
            {
              if (*(_DWORD *)v62 == 2)
                WTF::StringImpl::destroy(v62, v24);
              else
                *(_DWORD *)v62 -= 2;
            }
            v63 = (WTF::StringImpl *)v325;
            v325 = 0;
            if (v63)
            {
              if (*(_DWORD *)v63 == 2)
                WTF::StringImpl::destroy(v63, v24);
              else
                *(_DWORD *)v63 -= 2;
            }
            v64 = v324;
            v324 = 0;
            if (v64)
            {
              if (*(_DWORD *)v64 == 2)
                WTF::StringImpl::destroy(v64, v24);
              else
                *(_DWORD *)v64 -= 2;
            }
            v65 = (WTF::StringImpl *)v329;
            v329 = 0;
            if (v65)
            {
              if (*(_DWORD *)v65 == 2)
                WTF::StringImpl::destroy(v65, v24);
              else
                *(_DWORD *)v65 -= 2;
            }
            v66 = v328;
            v328 = 0;
            if (v66)
            {
              if (*(_DWORD *)v66 == 2)
                WTF::StringImpl::destroy(v66, v24);
              else
                *(_DWORD *)v66 -= 2;
            }
            v67 = *((_QWORD *)this + 9);
            switch(*(_DWORD *)this)
            {
              case 1:
                v68 = *((_QWORD *)this + 6);
                v69 = (int *)*((_QWORD *)this + 1);
                if (v69)
                  *v69 += 2;
                v70 = bmalloc::api::isoAllocate();
                v73 = v70;
                *(_OWORD *)(v70 + 8) = xmmword_1968BC9D0;
                *(_QWORD *)(v70 + 24) = 0x300300000002;
                *(_QWORD *)(v70 + 32) = 0;
                *(_QWORD *)(v70 + 40) = v67 + 96;
                *(_OWORD *)(v70 + 48) = 0u;
                *(_OWORD *)(v70 + 64) = 0u;
                ++*(_DWORD *)(v67 + 3324);
                v74 = v69;
                if (v69 || (v74 = (int *)*MEMORY[0x1E0CBF738]) != 0)
                  *v74 += 2;
                *(_QWORD *)(v70 + 80) = v74;
                *(_QWORD *)v70 = off_1E33A8078;
                WebCore::ContainerNode::parserAppendChild(v68, (WebCore::Node *)v70, v71, v72);
                if (*(_DWORD *)(v73 + 24) == 2)
                {
                  if ((*(_WORD *)(v73 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v73, v24);
                }
                else
                {
                  *(_DWORD *)(v73 + 24) -= 2;
                }
                goto LABEL_357;
              case 2:
                v93 = WebCore::tokenToNodeType(*((_QWORD *)this + 1));
                LODWORD(v328) = v93;
                if (!v93)
                  goto LABEL_360;
                v94 = v93;
                if (v93 == 7)
                {
                  v95 = *((unsigned int *)this + 11);
                  if (!(_DWORD)v95 || *(_DWORD *)&(*v302)[4 * v95 - 4] != 6)
                    goto LABEL_360;
                }
                v96 = *((unsigned int *)this + 17);
                if ((_DWORD)v96)
                  v97 = (int **)&(*v301)[v96 - 1];
                else
                  v97 = (int **)MEMORY[0x1E0CBF3B8];
                v69 = *v97;
                if (*v97)
                {
                  *v69 += 4;
                  v114 = (WTF::StringImpl *)bmalloc::api::isoAllocate();
                  *v69 += 2;
                  v332 = (const char *)v69;
                  WebCore::WebVTTElement::WebVTTElement((uint64_t)v114, v94, (_DWORD **)&v332, v67);
                  v118 = *v69 - 2;
                  if (*v69 == 2)
                  {
                    WTF::StringImpl::destroy((WTF::StringImpl *)v69, v115);
                    v118 = *v69;
                  }
                  else
                  {
                    *v69 = v118;
                  }
                  v119 = v118 - 2;
                  if (v119)
                    *v69 = v119;
                  else
                    WTF::StringImpl::destroy((WTF::StringImpl *)v69, v115);
                }
                else
                {
                  v114 = (WTF::StringImpl *)bmalloc::api::isoAllocate();
                  v332 = 0;
                  WebCore::WebVTTElement::WebVTTElement((uint64_t)v114, v94, (_DWORD **)&v332, v67);
                }
                if (!*(_QWORD *)v30 || !*(_DWORD *)(*(_QWORD *)v30 + 4))
                  goto LABEL_239;
                v136 = *((_QWORD *)v114 + 13);
                if (!v136)
                  goto LABEL_380;
                v137 = *(unsigned int *)(v136 + 4);
                if ((v137 & 1) != 0)
                {
                  v138 = *(uint64_t **)(v136 + 40);
                  v139 = *(unsigned int *)(v136 + 52);
                }
                else
                {
                  v138 = (uint64_t *)(v136 + 32);
                  v139 = v137 >> 5;
                }
                if (!v139)
                  goto LABEL_380;
                v174 = 0;
                while (1)
                {
                  v175 = *v138;
                  if (*v138 == WebCore::HTMLNames::classAttr
                    || *(_QWORD *)(v175 + 24) == *(_QWORD *)(WebCore::HTMLNames::classAttr + 24)
                    && *(_QWORD *)(v175 + 32) == *(_QWORD *)(WebCore::HTMLNames::classAttr + 32))
                  {
                    break;
                  }
                  ++v174;
                  v138 += 2;
                  if (v139 == v174)
                  {
LABEL_380:
                    v174 = 0xFFFFFFFFLL;
                    break;
                  }
                }
                WebCore::Element::setAttributeInternal(v114, v174, (WebCore::TreeScope *)&WebCore::HTMLNames::classAttr, (WTF::StringImpl **)this + 3, 0);
LABEL_239:
                if (v94 != 3)
                {
                  if (v94 != 8)
                    goto LABEL_350;
                  {
                    v332 = "voice";
                    v333 = 6;
                    WTF::NeverDestroyed<WebCore::QualifiedName,WTF::AnyThreadsAccessTraits>::NeverDestroyed<WTF::AtomString const&,WTF::ASCIILiteral,WTF::AtomString const&>((WebCore::QualifiedName *)&WebCore::WebVTTElement::voiceAttributeName(void)::voiceAttr, MEMORY[0x1E0CBF2F8], (uint64_t)&v332, MEMORY[0x1E0CBF2F8]);
                  }
                  v120 = *((_QWORD *)v114 + 13);
                  if (!v120)
                    goto LABEL_337;
                  v121 = *(unsigned int *)(v120 + 4);
                  if ((v121 & 1) != 0)
                  {
                    v122 = *(_QWORD **)(v120 + 40);
                    v123 = *(unsigned int *)(v120 + 52);
                    if (!v123)
                    {
LABEL_337:
                      v164 = 0xFFFFFFFFLL;
LABEL_338:
                      v166 = v114;
                      v167 = (WebCore::TreeScope *)&WebCore::WebVTTElement::voiceAttributeName(void)::voiceAttr;
                      v168 = (WTF::StringImpl **)((char *)this + 16);
                      goto LABEL_349;
                    }
                  }
                  else
                  {
                    v122 = (_QWORD *)(v120 + 32);
                    v123 = v121 >> 5;
                    if (!(v121 >> 5))
                      goto LABEL_337;
                  }
                  v164 = 0;
                  while (1)
                  {
                    v165 = (_QWORD *)*v122;
                    if ((_UNKNOWN *)*v122 == WebCore::WebVTTElement::voiceAttributeName(void)::voiceAttr
                      || v165[3] == *((_QWORD *)WebCore::WebVTTElement::voiceAttributeName(void)::voiceAttr + 3)
                      && v165[4] == *((_QWORD *)WebCore::WebVTTElement::voiceAttributeName(void)::voiceAttr + 4))
                    {
                      goto LABEL_338;
                    }
                    ++v164;
                    v122 += 2;
                    if (v123 == v164)
                      goto LABEL_337;
                  }
                }
                v124 = *((unsigned int *)this + 17);
                if ((_DWORD)v124 == *((_DWORD *)this + 16))
                {
                  v140 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v301, v124 + 1, (unint64_t)this + 16);
                  v124 = *((unsigned int *)this + 17);
                  v141 = *((_QWORD *)this + 7);
                  v142 = *v140;
                  if (*v140)
                    *v142 += 2;
                  *(_QWORD *)(v141 + 8 * v124) = v142;
                }
                else
                {
                  v125 = *v301;
                  v126 = *v29;
                  if (*v29)
                    *(_DWORD *)v126 += 2;
                  v125[v124] = v126;
                }
                v143 = v124 + 1;
                *((_DWORD *)this + 17) = v143;
                {
                  if (!v143)
                    goto LABEL_838;
                }
                else
                {
                  v332 = "lang";
                  v333 = 5;
                  WTF::NeverDestroyed<WebCore::QualifiedName,WTF::AnyThreadsAccessTraits>::NeverDestroyed<WTF::AtomString const&,WTF::ASCIILiteral,WTF::AtomString const&>((WebCore::QualifiedName *)&WebCore::WebVTTElement::langAttributeName(void)::voiceAttr, MEMORY[0x1E0CBF2F8], (uint64_t)&v332, MEMORY[0x1E0CBF2F8]);
                  v143 = *((_DWORD *)this + 17);
                  if (!v143)
                  {
LABEL_838:
                    __break(0xC471u);
                    JUMPOUT(0x195DA29A0);
                  }
                }
                v144 = *((_QWORD *)v114 + 13);
                if (!v144)
                  goto LABEL_347;
                v145 = *(unsigned int *)(v144 + 4);
                if ((v145 & 1) != 0)
                {
                  v146 = *(_QWORD **)(v144 + 40);
                  v147 = *(unsigned int *)(v144 + 52);
                  if (!v147)
                  {
LABEL_347:
                    v164 = 0xFFFFFFFFLL;
                    goto LABEL_348;
                  }
                }
                else
                {
                  v146 = (_QWORD *)(v144 + 32);
                  v147 = v145 >> 5;
                  if (!(v145 >> 5))
                    goto LABEL_347;
                }
                v164 = 0;
                while (1)
                {
                  v169 = (_QWORD *)*v146;
                  if ((_UNKNOWN *)*v146 == WebCore::WebVTTElement::langAttributeName(void)::voiceAttr
                    || v169[3] == *((_QWORD *)WebCore::WebVTTElement::langAttributeName(void)::voiceAttr + 3)
                    && v169[4] == *((_QWORD *)WebCore::WebVTTElement::langAttributeName(void)::voiceAttr + 4))
                  {
                    break;
                  }
                  ++v164;
                  v146 += 2;
                  if (v147 == v164)
                    goto LABEL_347;
                }
LABEL_348:
                v168 = &(*v301)[v143 - 1];
                v166 = v114;
                v167 = (WebCore::TreeScope *)&WebCore::WebVTTElement::langAttributeName(void)::voiceAttr;
LABEL_349:
                WebCore::Element::setAttributeInternal(v166, v164, v167, v168, 0);
LABEL_350:
                WebCore::ContainerNode::parserAppendChild(*((_QWORD *)this + 6), v114, v116, v117);
                v170 = *((_QWORD *)this + 6);
                *((_QWORD *)this + 6) = v114;
                if (v170)
                {
                  if (*(_DWORD *)(v170 + 24) == 2)
                  {
                    if ((*(_WORD *)(v170 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v170, v24);
                  }
                  else
                  {
                    *(_DWORD *)(v170 + 24) -= 2;
                  }
                }
                v171 = *((unsigned int *)this + 11);
                if ((_DWORD)v171 == *((_DWORD *)this + 10))
                {
                  v172 = WTF::Vector<WebCore::CryptoKeyUsage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v302, v171 + 1, (unint64_t)&v328);
                  v171 = *((unsigned int *)this + 11);
                  *(_DWORD *)(*((_QWORD *)this + 4) + 4 * v171) = *(_DWORD *)v172;
                }
                else
                {
                  *(_DWORD *)&(*v302)[4 * v171] = v94;
                }
                *((_DWORD *)this + 11) = v171 + 1;
LABEL_357:
                if (v69)
                {
                  if (*v69 == 2)
                  {
                    v173 = (WTF::StringImpl *)v69;
LABEL_363:
                    WTF::StringImpl::destroy(v173, v24);
                  }
                  else
                  {
                    *v69 -= 2;
                  }
                }
                goto LABEL_360;
              case 3:
                v75 = WebCore::tokenToNodeType(*((_QWORD *)this + 1));
                if (!v75)
                  goto LABEL_360;
                v76 = *((unsigned int *)this + 11);
                if (!(_DWORD)v76)
                  goto LABEL_360;
                v77 = *(_DWORD *)&(*v302)[4 * v76 - 4];
                if (!v77)
                  goto LABEL_360;
                if (v75 == v77)
                {
                  if (v75 == 3)
                  {
                    v78 = *((unsigned int *)this + 17);
                    if (!(_DWORD)v78)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x195DA2988);
                    }
                    v79 = v78 - 1;
                    v80 = (*v301)[v78 - 1];
                    (*v301)[v78 - 1] = 0;
                    if (v80)
                    {
                      if (*(_DWORD *)v80 == 2)
                        WTF::StringImpl::destroy(v80, v24);
                      else
                        *(_DWORD *)v80 -= 2;
                    }
                    *((_DWORD *)this + 17) = v79;
                  }
                }
                else
                {
                  if (v75 != 6 || v77 != 7)
                    goto LABEL_360;
                  v131 = *((_QWORD *)this + 6);
                  v132 = *(_QWORD *)(v131 + 32);
                  if (v132)
                  {
                    *(_DWORD *)(v132 + 24) += 2;
                    *((_QWORD *)this + 6) = v132;
                    if (*(_DWORD *)(v131 + 24) == 2)
                    {
                      if ((*(_WORD *)(v131 + 30) & 0x400) == 0)
                      {
                        WebCore::Node::removedLastRef((WebCore::Node *)v131, v24);
                        LODWORD(v76) = *((_DWORD *)this + 11);
                        if (!(_DWORD)v76)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x195DA2998);
                        }
                      }
                    }
                    else
                    {
                      *(_DWORD *)(v131 + 24) -= 2;
                    }
                    *((_DWORD *)this + 11) = v76 - 1;
                  }
                }
                v133 = *((_QWORD *)this + 6);
                v134 = *(_QWORD *)(v133 + 32);
                if (v134)
                {
                  *(_DWORD *)(v134 + 24) += 2;
                  *((_QWORD *)this + 6) = v134;
                  if (*(_DWORD *)(v133 + 24) == 2)
                  {
                    if ((*(_WORD *)(v133 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v133, v24);
                  }
                  else
                  {
                    *(_DWORD *)(v133 + 24) -= 2;
                  }
                  v135 = *((_DWORD *)this + 11);
                  if (!v135)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x195DA2990);
                  }
                  *((_DWORD *)this + 11) = v135 - 1;
                }
                goto LABEL_360;
              case 4:
                v328 = 0;
                LODWORD(v329) = 10000000;
                BYTE4(v329) = 1;
                v81 = *((_QWORD *)this + 1);
                if (!v81)
                  goto LABEL_360;
                v82 = *(unsigned int *)(v81 + 4);
                if (!(_DWORD)v82)
                  goto LABEL_360;
                *(_DWORD *)v81 += 2;
                v334 = (WTF::StringImpl *)v81;
                v33 = (*(_DWORD *)(v81 + 16) & 4) == 0;
                LOBYTE(v335) = (*(_DWORD *)(v81 + 16) & 4u) >> 2;
                v83 = *(const char **)(v81 + 8);
                v84 = &v83[2 * v82];
                v85 = &v83[v82];
                if (v33)
                  v85 = v84;
                v332 = v83;
                v333 = (uint64_t)v85;
                v86 = WebCore::WebVTTParser::collectTimeStamp((WebCore::WebVTTParser *)&v332, (WebCore::VTTScanner *)&v328, v25);
                if (!v334)
                  goto LABEL_169;
                if (*(_DWORD *)v334 == 2)
                {
                  WTF::StringImpl::destroy(v334, v24);
                  if (!v86)
                    goto LABEL_360;
                }
                else
                {
                  *(_DWORD *)v334 -= 2;
LABEL_169:
                  if (!v86)
                    goto LABEL_360;
                }
                v87 = *((_QWORD *)this + 6);
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                WTF::MediaTime::toDouble((WTF::MediaTime *)&v328);
                v89 = (unint64_t)(v88 * 1000.0);
                v332 = 0;
                v333 = 0;
                LODWORD(v334) = 0;
                BYTE4(v334) = 1;
                WebCore::appendNumber<2>((uint64_t)&v332, (WTF::String *)(v89 / 0x36EE80));
                LOBYTE(v324) = 58;
                if (!v333 || (v90 = v334, v334 >= *(_DWORD *)(v333 + 4)) || v332)
                {
                  WTF::StringBuilder::append();
                }
                else
                {
                  v91 = *(_DWORD *)(v333 + 16);
                  v92 = *(_QWORD *)(v333 + 8);
                  LODWORD(v334) = (_DWORD)v334 + 1;
                  if ((v91 & 4) != 0)
                    *(_BYTE *)(v92 + v90) = 58;
                  else
                    *(_WORD *)(v92 + 2 * v90) = 58;
                }
                WebCore::appendNumber<2>((uint64_t)&v332, (WTF::String *)((v89 / 0xEA60)- 60 * ((v89 / 0xEA60 * (unsigned __int128)0x444444444444445uLL) >> 64)));
                LOBYTE(v324) = 58;
                if (!v333 || (v153 = v334, v334 >= *(_DWORD *)(v333 + 4)) || v332)
                {
                  WTF::StringBuilder::append();
                }
                else
                {
                  v154 = *(_DWORD *)(v333 + 16);
                  v155 = *(_QWORD *)(v333 + 8);
                  LODWORD(v334) = (_DWORD)v334 + 1;
                  if ((v154 & 4) != 0)
                    *(_BYTE *)(v155 + v153) = 58;
                  else
                    *(_WORD *)(v155 + 2 * v153) = 58;
                }
                WebCore::appendNumber<2>((uint64_t)&v332, (WTF::String *)((v89 / 0x3E8)- 60 * ((v89 / 0x3E8 * (unsigned __int128)0x444444444444445uLL) >> 64)));
                LOBYTE(v324) = 46;
                if (!v333 || (v156 = v334, v334 >= *(_DWORD *)(v333 + 4)) || v332)
                {
                  WTF::StringBuilder::append();
                }
                else
                {
                  v157 = *(_DWORD *)(v333 + 16);
                  v158 = *(_QWORD *)(v333 + 8);
                  LODWORD(v334) = (_DWORD)v334 + 1;
                  if ((v157 & 4) != 0)
                    *(_BYTE *)(v158 + v156) = 46;
                  else
                    *(_WORD *)(v158 + 2 * v156) = 46;
                }
                WTF::String::number((WTF::String *)(v89 % 0x3E8));
                v160 = v324;
                if (v324)
                {
                  v161 = 3 - *((_DWORD *)v324 + 1);
                  if (v161 < 1)
                    goto LABEL_420;
                }
                else
                {
                  v161 = 3;
                }
                do
                {
                  LOBYTE(v319) = 48;
                  if (v333
                    && ((v182 = v334, v334 < *(_DWORD *)(v333 + 4))
                      ? (v183 = v332 == 0)
                      : (v183 = 0),
                        v183))
                  {
                    v180 = *(_DWORD *)(v333 + 16);
                    v181 = *(_QWORD *)(v333 + 8);
                    LODWORD(v334) = (_DWORD)v334 + 1;
                    if ((v180 & 4) != 0)
                      *(_BYTE *)(v181 + v182) = 48;
                    else
                      *(_WORD *)(v181 + 2 * v182) = 48;
                  }
                  else
                  {
                    WTF::StringBuilder::append();
                  }
                  --v161;
                }
                while (v161);
                v160 = v324;
LABEL_420:
                if (!(_DWORD)v334 && !v333)
                {
                  if (v160)
                    *(_DWORD *)v160 += 2;
                  v184 = (WTF::StringImpl *)v332;
                  v332 = (const char *)v160;
                  if (v184)
                  {
                    if (*(_DWORD *)v184 == 2)
                    {
                      WTF::StringImpl::destroy(v184, v159);
                      v160 = v324;
                      if (!v324)
                        goto LABEL_429;
                      goto LABEL_428;
                    }
                    *(_DWORD *)v184 -= 2;
                  }
                  if (!v160)
                  {
LABEL_429:
                    LODWORD(v334) = (_DWORD)v160;
                    goto LABEL_430;
                  }
LABEL_428:
                  LODWORD(v160) = *((_DWORD *)v160 + 1);
                  goto LABEL_429;
                }
                if (v160 && (*((_BYTE *)v160 + 16) & 4) == 0)
                  WTF::StringBuilder::append();
                else
                  WTF::StringBuilder::append();
LABEL_430:
                v185 = v324;
                v324 = 0;
                if (v185)
                {
                  if (*(_DWORD *)v185 == 2)
                    WTF::StringImpl::destroy(v185, v159);
                  else
                    *(_DWORD *)v185 -= 2;
                }
                v186 = (WTF::StringImpl *)v332;
                if (v332
                  || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v332),
                      WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v332),
                      (v186 = (WTF::StringImpl *)v332) != 0))
                {
                  *(_DWORD *)v186 += 2;
                }
                v187 = (WTF::StringImpl *)v333;
                v333 = 0;
                if (v187)
                {
                  if (*(_DWORD *)v187 == 2)
                    WTF::StringImpl::destroy(v187, v159);
                  else
                    *(_DWORD *)v187 -= 2;
                }
                v188 = (WTF::StringImpl *)v332;
                v332 = 0;
                if (v188)
                {
                  if (*(_DWORD *)v188 == 2)
                    WTF::StringImpl::destroy(v188, v159);
                  else
                    *(_DWORD *)v188 -= 2;
                }
                v189 = bmalloc::api::isoAllocate();
                v192 = v189;
                *(_OWORD *)(v189 + 8) = xmmword_1968BC9D0;
                *(_QWORD *)(v189 + 24) = 0x700100000002;
                *(_QWORD *)(v189 + 32) = 0;
                *(_QWORD *)(v189 + 40) = v67 + 96;
                *(_OWORD *)(v189 + 48) = 0u;
                *(_OWORD *)(v189 + 64) = 0u;
                ++*(_DWORD *)(v67 + 3324);
                v193 = v186;
                if (v186 || (v193 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738]) != 0)
                  *(_DWORD *)v193 += 2;
                *(_QWORD *)v189 = off_1E33A6788;
                *(_QWORD *)(v189 + 80) = v193;
                *(_QWORD *)(v189 + 88) = &unk_1E33A6928;
                v194 = v320;
                v320 = 0;
                *(_QWORD *)(v189 + 96) = 0;
                *(_QWORD *)(v189 + 104) = v194;
                *(_OWORD *)(v189 + 112) = 0uLL;
                *(_OWORD *)(v189 + 128) = 0uLL;
                *(_OWORD *)(v189 + 141) = 0uLL;
                WebCore::ContainerNode::parserAppendChild(v87, (WebCore::Node *)v189, v190, v191);
                if (*(_DWORD *)(v192 + 24) == 2)
                {
                  if ((*(_WORD *)(v192 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v192, v24);
                }
                else
                {
                  *(_DWORD *)(v192 + 24) -= 2;
                }
                if (v186)
                {
                  if (*(_DWORD *)v186 == 2)
                    WTF::StringImpl::destroy(v186, v24);
                  else
                    *(_DWORD *)v186 -= 2;
                }
                v173 = v320;
                v320 = 0;
                if (v173)
                {
                  if (*(_DWORD *)v173 == 2)
                    goto LABEL_363;
                  *(_DWORD *)v173 -= 2;
                }
LABEL_360:
                if (!HIDWORD(v304))
                  goto LABEL_785;
                break;
              default:
                goto LABEL_360;
            }
            goto LABEL_43;
          }
          LOWORD(v332) = v31;
          if (v325)
          {
            v32 = v326;
            v33 = v326 < *(_DWORD *)(v325 + 4) && v324 == 0;
            if (v33)
            {
              if ((*(_BYTE *)(v325 + 16) & 4) == 0)
              {
                v43 = *(_QWORD *)(v325 + 8);
                ++v326;
                *(_WORD *)(v43 + 2 * v32) = v31;
                goto LABEL_55;
              }
              if (v31 <= 0xFF)
              {
                v44 = *(_QWORD *)(v325 + 8);
                ++v326;
                *(_BYTE *)(v44 + v32) = v31;
                goto LABEL_55;
              }
            }
          }
          WTF::StringBuilder::append();
LABEL_55:
          if ((v310[1] & 0x2000000000000) != 0)
          {
            v34 = LOWORD(v310[0]);
            v305 = (unsigned int *)((char *)v305 + 1);
            v35 = *(unsigned __int8 *)v305;
            LOWORD(v310[0]) = *(unsigned __int8 *)v305;
            v36 = HIDWORD(v304);
            v37 = --HIDWORD(v304);
            if (v34 == 10 || v37 == 1)
            {
              if ((v310[1] & 0x1000000000000) != 0 && v34 == 10)
              {
                *(_DWORD *)((char *)v310 + 6) = *(_DWORD *)((char *)v310 + 2) - v36 + v304 + 1;
                ++*(_DWORD *)((char *)&v310[1] + 2);
              }
              if (v37 == 1)
              {
                BYTE6(v310[1]) = 0;
                v311 = (uint64_t (*)(WebCore::SegmentedString *__hidden))WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                v312 = 0;
                v50 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
                if (!HIBYTE(v306))
                  v50 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
                v313 = (uint64_t (*)(WebCore::SegmentedString *__hidden))v50;
                v314 = 0;
                goto LABEL_71;
              }
            }
          }
          else
          {
            v45 = v313;
            v46 = (WebCore::SegmentedString *)((char *)&v303 + (v314 >> 1));
            if ((v314 & 1) != 0)
              v45 = *(uint64_t (**)(WebCore::SegmentedString *__hidden))(*(_QWORD *)v46 + v313);
            v45(v46);
            v37 = HIDWORD(v304);
          }
          if (!v37)
            goto LABEL_73;
LABEL_70:
          v35 = LOWORD(v310[0]);
LABEL_71:
          v316 = v35;
          if (v35 < 0x10)
            WebCore::InputStreamPreprocessor<WebCore::WebVTTTokenizer>::processNextInputCharacter((uint64_t)&v315, (uint64_t)&v303);
          else
            v317 = 0;
LABEL_73:
          v31 = v316;
        }
        if ((v310[1] & 0x2000000000000) != 0)
        {
          v38 = LOWORD(v310[0]);
          v305 = (unsigned int *)((char *)v305 + 1);
          v39 = *(unsigned __int8 *)v305;
          LOWORD(v310[0]) = *(unsigned __int8 *)v305;
          v40 = HIDWORD(v304);
          v41 = --HIDWORD(v304);
          if (v38 == 10 || v41 == 1)
          {
            if ((v310[1] & 0x1000000000000) != 0 && v38 == 10)
            {
              *(_DWORD *)((char *)v310 + 6) = *(_DWORD *)((char *)v310 + 2) - v40 + v304 + 1;
              ++*(_DWORD *)((char *)&v310[1] + 2);
            }
            if (v41 == 1)
            {
              BYTE6(v310[1]) = 0;
              v311 = (uint64_t (*)(WebCore::SegmentedString *__hidden))WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
              v312 = 0;
              v49 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
              if (!HIBYTE(v306))
                v49 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
              v313 = (uint64_t (*)(WebCore::SegmentedString *__hidden))v49;
              v314 = 0;
              goto LABEL_67;
            }
          }
        }
        else
        {
          v47 = v313;
          v48 = (WebCore::SegmentedString *)((char *)&v303 + (v314 >> 1));
          if ((v314 & 1) != 0)
            v47 = *(uint64_t (**)(WebCore::SegmentedString *__hidden))(*(_QWORD *)v48 + v313);
          v47(v48);
          v41 = HIDWORD(v304);
        }
        if (!v41)
          goto LABEL_69;
        v39 = LOWORD(v310[0]);
LABEL_67:
        v316 = v39;
        if (v39 < 0x10)
          WebCore::InputStreamPreprocessor<WebCore::WebVTTTokenizer>::processNextInputCharacter((uint64_t)&v315, (uint64_t)&v303);
        else
          v317 = 0;
LABEL_69:
        WebCore::ProcessEntity((unint64_t)&v303, (uint64_t)&v324, 0);
        if (!HIDWORD(v304))
          goto LABEL_73;
        goto LABEL_70;
      }
      if (!WebCore::InputStreamPreprocessor<WebCore::WebVTTTokenizer>::processNextInputCharacter((uint64_t)&v315, (uint64_t)&v303))goto LABEL_785;
      v31 = v316;
      if (v316)
        goto LABEL_45;
      if ((v310[1] & 0x2000000000000) != 0)
      {
        v281 = LOWORD(v310[0]);
        v305 = (unsigned int *)((char *)v305 + 1);
        v282 = *(unsigned __int8 *)v305;
        LOWORD(v310[0]) = *(unsigned __int8 *)v305;
        v283 = HIDWORD(v304);
        v284 = --HIDWORD(v304);
        if (v281 == 10 || v284 == 1)
        {
          if ((v310[1] & 0x1000000000000) != 0 && v281 == 10)
          {
            *(_DWORD *)((char *)v310 + 6) = *(_DWORD *)((char *)v310 + 2) - v283 + v304 + 1;
            ++*(_DWORD *)((char *)&v310[1] + 2);
          }
          if (v284 == 1)
          {
            BYTE6(v310[1]) = 0;
            v311 = (uint64_t (*)(WebCore::SegmentedString *__hidden))WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
            v312 = 0;
            v300 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
            if (!HIBYTE(v306))
              v300 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
            v313 = (uint64_t (*)(WebCore::SegmentedString *__hidden))v300;
            v314 = 0;
LABEL_783:
            v316 = v282;
            if (v282 < 0x10)
              WebCore::InputStreamPreprocessor<WebCore::WebVTTTokenizer>::processNextInputCharacter((uint64_t)&v315, (uint64_t)&v303);
            else
              v317 = 0;
            goto LABEL_785;
          }
        }
      }
      else
      {
        v298 = v313;
        v299 = (WebCore::SegmentedString *)((char *)&v303 + (v314 >> 1));
        if ((v314 & 1) != 0)
          v298 = *(uint64_t (**)(WebCore::SegmentedString *__hidden))(*(_QWORD *)v299 + v313);
        v298(v299);
        v284 = HIDWORD(v304);
      }
      if (v284)
      {
        v282 = LOWORD(v310[0]);
        goto LABEL_783;
      }
LABEL_785:
      v285 = v307;
      v286 = v308[0];
      if ((unint64_t)v307 > *((_QWORD *)&v307 + 1))
      {
        if (*((_QWORD *)&v307 + 1))
        {
          v293 = 32 * *((_QWORD *)&v307 + 1);
          do
          {
            v294 = *(WTF::StringImpl **)v286;
            *(_QWORD *)v286 = 0;
            if (v294)
            {
              if (*(_DWORD *)v294 == 2)
                WTF::StringImpl::destroy(v294, v24);
              else
                *(_DWORD *)v294 -= 2;
            }
            v286 = (WTF *)((char *)v286 + 32);
            v293 -= 32;
          }
          while (v293);
          v286 = v308[0];
          v285 = v307;
        }
        if (v285 != LODWORD(v308[1]))
        {
          v295 = (WTF::StringImpl **)((char *)v286 + 32 * v285);
          v296 = 32 * LODWORD(v308[1]) - 32 * v285;
          do
          {
            v297 = *v295;
            *v295 = 0;
            if (v297)
            {
              if (*(_DWORD *)v297 == 2)
                WTF::StringImpl::destroy(v297, v24);
              else
                *(_DWORD *)v297 -= 2;
            }
            v295 += 4;
            v296 -= 32;
          }
          while (v296);
        }
      }
      else
      {
        if ((_QWORD)v307 == *((_QWORD *)&v307 + 1))
        {
          if (!v308[0])
            goto LABEL_789;
LABEL_809:
          v308[0] = 0;
          LODWORD(v308[1]) = 0;
          WTF::fastFree(v286, v24);
LABEL_789:
          result = v303;
          v303 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v24);
            else
              *(_DWORD *)result -= 2;
          }
          return result;
        }
        v287 = (WTF::StringImpl **)((char *)v308[0] + 32 * v307);
        v288 = 32 * *((_QWORD *)&v307 + 1) - 32 * v307;
        do
        {
          v289 = *v287;
          *v287 = 0;
          if (v289)
          {
            if (*(_DWORD *)v289 == 2)
              WTF::StringImpl::destroy(v289, v24);
            else
              *(_DWORD *)v289 -= 2;
          }
          v287 += 4;
          v288 -= 32;
        }
        while (v288);
      }
      v286 = v308[0];
      if (!v308[0])
        goto LABEL_789;
      goto LABEL_809;
    }
    if (v22)
    {
      LOWORD(v310[0]) = *(unsigned __int8 *)v20;
      if (v21 >= 2)
      {
        BYTE6(v310[1]) = 3;
        goto LABEL_26;
      }
    }
    else
    {
      LOWORD(v310[0]) = *(_WORD *)v20;
      if (v21 > 1)
      {
        BYTE6(v310[1]) = 0;
        v311 = (uint64_t (*)(WebCore::SegmentedString *__hidden))WebCore::SegmentedString::advanceWithoutUpdatingLineNumber16;
        v312 = 0;
        v280 = WebCore::SegmentedString::advanceAndUpdateLineNumber16;
LABEL_773:
        v313 = (uint64_t (*)(WebCore::SegmentedString *__hidden))v280;
        v314 = 0;
        goto LABEL_26;
      }
    }
    BYTE6(v310[1]) = 0;
    v311 = (uint64_t (*)(WebCore::SegmentedString *__hidden))WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
    v312 = 0;
    v280 = (uint64_t (*)(uint64_t))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
    goto LABEL_773;
  }
  v7 = *a3;
  v8 = *((_QWORD *)this + 9);
  v9 = (WTF::StringImpl **)MEMORY[0x1E0CBF738];
  v10 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *(_DWORD *)v10 += 2;
  v11 = bmalloc::api::isoAllocate();
  v14 = v11;
  *(_OWORD *)(v11 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v11 + 24) = 0x300300000002;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)(v11 + 40) = v8 + 96;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  ++*(_DWORD *)(v8 + 3324);
  v15 = v10;
  if (v10 || (v15 = *v9) != 0)
    *(_DWORD *)v15 += 2;
  *(_QWORD *)(v11 + 80) = v15;
  *(_QWORD *)v11 = off_1E33A8078;
  result = (WTF::StringImpl *)WebCore::ContainerNode::parserAppendChild(v7, (WebCore::Node *)v11, v12, v13);
  if (*(_DWORD *)(v14 + 24) == 2)
  {
    if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
      result = (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)v14, v17);
  }
  else
  {
    *(_DWORD *)(v14 + 24) -= 2;
  }
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v10, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)v10 -= 2;
  }
  return result;
}

void WebCore::WebVTTParser::createDocumentFragmentFromCueText(WebCore::WebVTTParser *this@<X0>, unsigned int **a2@<X1>, uint64_t *a3@<X8>)
{
  WTF::StringImpl *v4;
  int v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  WebCore::WebVTTParser *v10;

  v5 = 0;
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = this;
  WebCore::WebVTTTreeBuilder::buildFromString((WebCore::WebVTTTreeBuilder *)&v5, a2, a3);
  WebCore::WebVTTTreeBuilder::~WebVTTTreeBuilder((WebCore::WebVTTTreeBuilder *)&v5, v4);
}

uint64_t WebCore::tokenToNodeType(uint64_t a1)
{
  int v1;
  unsigned __int8 *v2;
  int v3;
  unsigned __int8 *v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;

  if (!a1)
    return 0;
  v1 = *(_DWORD *)(a1 + 4);
  if (v1 == 4)
  {
    v5 = *(unsigned __int8 **)(a1 + 8);
    if ((*(_BYTE *)(a1 + 16) & 4) != 0)
    {
      v6 = *v5;
      if (v6 != 108)
      {
        if (v6 != 114 || v5[1] != 117 || v5[2] != 98)
          return 0;
        v7 = v5[3];
LABEL_38:
        if (v7 == 121)
          return 6;
        return 0;
      }
      if (v5[1] != 97 || v5[2] != 110)
        return 0;
      v10 = v5[3];
    }
    else
    {
      v11 = *(unsigned __int16 *)v5;
      if (v11 != 108)
      {
        if (v11 != 114 || *((_WORD *)v5 + 1) != 117 || *((_WORD *)v5 + 2) != 98)
          return 0;
        v7 = *((unsigned __int16 *)v5 + 3);
        goto LABEL_38;
      }
      if (*((_WORD *)v5 + 1) != 97 || *((_WORD *)v5 + 2) != 110)
        return 0;
      v10 = *((unsigned __int16 *)v5 + 3);
    }
    if (v10 == 103)
      return 3;
    return 0;
  }
  if (v1 != 2)
  {
    if (v1 == 1)
    {
      v2 = *(unsigned __int8 **)(a1 + 8);
      if ((*(_BYTE *)(a1 + 16) & 4) != 0)
        v3 = *v2;
      else
        v3 = *(unsigned __int16 *)v2;
      if (v3 > 104)
      {
        if (v3 == 105)
          return 2;
        if (v3 == 118)
          return 8;
      }
      else
      {
        if (v3 == 98)
          return 4;
        if (v3 == 99)
          return 1;
      }
      if (v3 == 117)
        return 5;
    }
    return 0;
  }
  v8 = *(_QWORD *)(a1 + 8);
  if ((*(_BYTE *)(a1 + 16) & 4) != 0)
  {
    if (*(_BYTE *)v8 == 114)
    {
      v9 = *(unsigned __int8 *)(v8 + 1);
      goto LABEL_20;
    }
  }
  else if (*(_WORD *)v8 == 114)
  {
    v9 = *(unsigned __int16 *)(v8 + 2);
LABEL_20:
    if (v9 == 116)
      return 7;
  }
  return 0;
}

WTF::StringImpl *WebCore::advanceAndEmitToken(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  char v5;
  int v6;
  unsigned __int8 *v7;
  int v8;
  _DWORD *v10;
  WTF::StringImpl *v11;
  _DWORD *v12;
  WTF::StringImpl *v13;
  _DWORD *v14;
  WTF::StringImpl *result;
  void (*v16)(_QWORD *);
  uint64_t v17;
  _QWORD *v18;
  int v19;
  uint64_t (*v20)(uint64_t, WTF::StringImpl *);

  v5 = *(_BYTE *)(a1 + 80);
  if ((v5 & 2) != 0)
  {
    v6 = *(unsigned __int16 *)(a1 + 66);
    v7 = (unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 1);
    *(_QWORD *)(a1 + 16) = v7;
    *(_WORD *)(a1 + 66) = *v7;
    v8 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = v8 - 1;
    if (v6 == 10 || v8 == 2)
    {
      if ((v5 & 1) != 0 && v6 == 10)
      {
        v19 = *(_DWORD *)(a1 + 76) + 1;
        *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 68) - v8 + *(_DWORD *)(a1 + 8) + 1;
        *(_DWORD *)(a1 + 76) = v19;
      }
      if (v8 == 2)
      {
        *(_BYTE *)(a1 + 80) = 0;
        v20 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
        *(_QWORD *)(a1 + 88) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
        *(_QWORD *)(a1 + 96) = 0;
        if (*(_BYTE *)(a1 + 25))
          v20 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
        *(_QWORD *)(a1 + 104) = v20;
        *(_QWORD *)(a1 + 112) = 0;
      }
    }
  }
  else
  {
    v16 = *(void (**)(_QWORD *))(a1 + 104);
    v17 = *(_QWORD *)(a1 + 112);
    v18 = (_QWORD *)(a1 + (v17 >> 1));
    if ((v17 & 1) != 0)
      v16 = *(void (**)(_QWORD *))(*v18 + v16);
    v16(v18);
  }
  *(_DWORD *)a2 = *(_DWORD *)a3;
  v10 = *(_DWORD **)(a3 + 8);
  if (v10)
    *v10 += 2;
  v11 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v10;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = *(_DWORD **)(a3 + 16);
  if (v12)
    *v12 += 2;
  v13 = (WTF::StringImpl *)*((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v12;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = *(_DWORD **)(a3 + 24);
  if (v14)
    *v14 += 2;
  result = (WTF::StringImpl *)*((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v14;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF *WebCore::ProcessEntity(unint64_t a1, uint64_t a2, int a3)
{
  void *v4;
  unint64_t v5;
  WTF *result;
  uint64_t v8;
  unsigned __int16 *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v20;
  uint64_t v21;
  unint64_t v22;
  WTF *v23;
  uint64_t v24;
  _BYTE v25[128];

  v22 = a1;
  v23 = (WTF *)v25;
  v24 = 64;
  v5 = WebCore::consumeHTMLEntity<WebCore::SegmentedStringSource>((WebCore::SegmentedStringSource *)&v22, a3);
  result = v23;
  if (v25 != (_BYTE *)v23 && v23 != 0)
  {
    v23 = 0;
    LODWORD(v24) = 0;
    result = (WTF *)WTF::fastFree(result, v4);
  }
  v22 = v5;
  v8 = v5;
  if ((_BYTE)v5 && (v5 & 0xFF00) == 0)
  {
    v9 = (unsigned __int16 *)&v22 + 1;
    v10 = 2 * v8;
    while (1)
    {
      v11 = *v9;
      v12 = *(_QWORD *)(a2 + 8);
      if (v12)
      {
        v13 = *(unsigned int *)(a2 + 16);
        if (v13 < *(_DWORD *)(v12 + 4) && *(_QWORD *)a2 == 0)
        {
          if ((*(_BYTE *)(v12 + 16) & 4) == 0)
          {
            v15 = *(_QWORD *)(v12 + 8);
            *(_DWORD *)(a2 + 16) = v13 + 1;
            *(_WORD *)(v15 + 2 * v13) = v11;
            goto LABEL_15;
          }
          if (v11 <= 0xFF)
          {
            v16 = *(_QWORD *)(v12 + 8);
            *(_DWORD *)(a2 + 16) = v13 + 1;
            *(_BYTE *)(v16 + v13) = v11;
            goto LABEL_15;
          }
        }
      }
      result = (WTF *)WTF::StringBuilder::append();
LABEL_15:
      ++v9;
      v10 -= 2;
      if (!v10)
        return result;
    }
  }
  v17 = *(_QWORD *)(a2 + 8);
  if (!v17)
    return (WTF *)WTF::StringBuilder::append();
  v18 = *(unsigned int *)(a2 + 16);
  if (v18 >= *(_DWORD *)(v17 + 4) || *(_QWORD *)a2 != 0)
    return (WTF *)WTF::StringBuilder::append();
  v20 = *(_DWORD *)(v17 + 16);
  v21 = *(_QWORD *)(v17 + 8);
  *(_DWORD *)(a2 + 16) = v18 + 1;
  if ((v20 & 4) != 0)
    *(_BYTE *)(v21 + v18) = 38;
  else
    *(_WORD *)(v21 + 2 * v18) = 38;
  return result;
}

void WebCore::WebVTTTreeBuilder::~WebVTTTreeBuilder(WebCore::WebVTTTreeBuilder *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  WTF *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF::StringImpl *v12;

  v3 = *((unsigned int *)this + 17);
  if ((_DWORD)v3)
  {
    v10 = (WTF::StringImpl **)*((_QWORD *)this + 7);
    v11 = 8 * v3;
    do
    {
      v12 = *v10;
      *v10 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, a2);
        else
          *(_DWORD *)v12 -= 2;
      }
      ++v10;
      v11 -= 8;
    }
    while (v11);
  }
  v4 = (WTF *)*((_QWORD *)this + 7);
  if (v4)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  v6 = (WTF *)*((_QWORD *)this + 4);
  if (v6)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v6, a2);
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
}

WTF::StringImpl *WebCore::appendNumber<2>(uint64_t a1, WTF::String *this)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  int v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13;

  WTF::String::number(this);
  v4 = v13;
  v5 = 2;
  if (!v13 || (v5 = 2 - *((_DWORD *)v13 + 1), v5 >= 1))
  {
    do
    {
      v6 = *(_QWORD *)(a1 + 8);
      if (v6
        && ((v7 = *(unsigned int *)(a1 + 16), v7 < *(_DWORD *)(v6 + 4))
          ? (v8 = *(_QWORD *)a1 == 0)
          : (v8 = 0),
            v8))
      {
        v9 = *(_DWORD *)(v6 + 16);
        v10 = *(_QWORD *)(v6 + 8);
        *(_DWORD *)(a1 + 16) = v7 + 1;
        if ((v9 & 4) != 0)
          *(_BYTE *)(v10 + v7) = 48;
        else
          *(_WORD *)(v10 + 2 * v7) = 48;
      }
      else
      {
        WTF::StringBuilder::append();
      }
      --v5;
    }
    while (v5);
    v4 = v13;
  }
  if (*(_DWORD *)(a1 + 16) || *(_QWORD *)(a1 + 8))
  {
    if (v4 && (*((_BYTE *)v4 + 16) & 4) == 0)
      WTF::StringBuilder::append();
    else
      WTF::StringBuilder::append();
    goto LABEL_24;
  }
  if (v4)
    *(_DWORD *)v4 += 2;
  v11 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v4;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::destroy(v11, v3);
      v4 = v13;
      if (!v13)
        goto LABEL_23;
      goto LABEL_22;
    }
    *(_DWORD *)v11 -= 2;
  }
  if (v4)
LABEL_22:
    LODWORD(v4) = *((_DWORD *)v4 + 1);
LABEL_23:
  *(_DWORD *)(a1 + 16) = (_DWORD)v4;
LABEL_24:
  result = v13;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v13, v3);
    else
      *(_DWORD *)v13 -= 2;
  }
  return result;
}

uint64_t WebCore::InputStreamPreprocessor<WebCore::WebVTTTokenizer>::processNextInputCharacter(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t (*v11)(uint64_t, WTF::StringImpl *);
  int v12;
  unint64_t v13;
  int v14;
  void (*v15)(_QWORD *);
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;

  v2 = *(unsigned __int16 *)(a1 + 8);
  if (v2 == 10)
  {
    v3 = *(unsigned __int8 *)(a1 + 10);
    *(_BYTE *)(a1 + 10) = 0;
    if (!v3)
      return 1;
    v4 = *(_DWORD *)(a2 + 12);
    if (v4 < 2)
    {
      v18 = a1;
      v19 = a2;
      v15 = *(void (**)(_QWORD *))(a2 + 104);
      v16 = *(_QWORD *)(a2 + 112);
      v17 = (_QWORD *)(a2 + (v16 >> 1));
      if ((v16 & 1) != 0)
        v15 = *(void (**)(_QWORD *))(*v17 + v15);
      v15(v17);
      v7 = *(unsigned int *)(v19 + 12);
      if (!(_DWORD)v7)
        return v7;
      a1 = v18;
      a2 = v19;
      v2 = *(unsigned __int16 *)(v19 + 66);
      goto LABEL_9;
    }
    v5 = *(_QWORD *)(a2 + 16);
    if (*(_BYTE *)(a2 + 24))
    {
      *(_QWORD *)(a2 + 16) = v5 + 1;
      v2 = *(unsigned __int8 *)(v5 + 1);
    }
    else
    {
      *(_QWORD *)(a2 + 16) = v5 + 2;
      v2 = *(unsigned __int16 *)(v5 + 2);
    }
    *(_WORD *)(a2 + 66) = v2;
    *(_DWORD *)(a2 + 12) = v4 - 1;
    if (v4 == 2)
    {
      *(_BYTE *)(a2 + 80) = 0;
      v11 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
      *(_QWORD *)(a2 + 88) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
      *(_QWORD *)(a2 + 96) = 0;
      v12 = *(unsigned __int8 *)(a2 + 25);
      if (*(_BYTE *)(a2 + 25))
        v11 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
      *(_QWORD *)(a2 + 104) = v11;
      *(_QWORD *)(a2 + 112) = 0;
      if (!v12)
        goto LABEL_9;
    }
    else if (!*(_BYTE *)(a2 + 25))
    {
LABEL_9:
      *(_WORD *)(a1 + 8) = v2;
      goto LABEL_10;
    }
    v6 = *(_DWORD *)(a2 + 76) + 1;
    *(_DWORD *)(a2 + 72) = *(_DWORD *)(a2 + 68) - v4 + *(_DWORD *)(a2 + 8) + 1;
    *(_DWORD *)(a2 + 76) = v6;
    goto LABEL_9;
  }
LABEL_10:
  if (v2 == 13)
  {
    *(_WORD *)(a1 + 8) = 10;
    v7 = 1;
    *(_BYTE *)(a1 + 10) = 1;
    return v7;
  }
  *(_BYTE *)(a1 + 10) = 0;
  if (v2)
    return 1;
  if (!*(_BYTE *)(a2 + 64))
    goto LABEL_16;
  v7 = *(unsigned int *)(a2 + 12);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  if (v8 != v9)
  {
    v13 = *(unsigned int *)(a2 + 56);
    do
    {
      v14 = *(_DWORD *)(*(_QWORD *)(a2 + 48) + 32 * v8 + 12);
      v8 += v13 + 1;
      do
        v8 -= v13;
      while (v8 >= v13);
      v7 = (v14 + v7);
    }
    while (v9 != v8);
  }
  if ((_DWORD)v7 != 1)
  {
LABEL_16:
    *(_WORD *)(a1 + 8) = -3;
    return 1;
  }
  return v7;
}

void WebCore::CommandLineAPIHost::~CommandLineAPIHost(WebCore::CommandLineAPIHost *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;

  v3 = *((_QWORD *)this + 3);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = (uint64_t *)(v3 + 8);
      do
      {
        if (*(v5 - 1) != -1)
        {
          v6 = *v5;
          if (*v5)
          {
            v7 = (uint64_t *)(v6 - 16);
            v8 = *(_QWORD *)(((v6 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
            v9 = *(uint64_t **)(v6 - 8);
            if (v9)
            {
              v10 = *v7;
              *v9 = *v7;
              *(_QWORD *)(v10 + 8) = v9;
              *v7 = 0;
              v7[1] = 0;
            }
            *v7 = *(_QWORD *)(v8 + 40);
            *(_QWORD *)(v8 + 40) = v7;
            *v5 = 0;
          }
        }
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v11 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
  v12 = (WTF *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 1)
      WTF::fastFree(v12, a2);
    else
      --*(_DWORD *)v12;
  }
}

WTF *WebCore::CommandLineAPIHost::disconnect(WebCore::CommandLineAPIHost *this, void *a2)
{
  WTF *result;

  result = (WTF *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF *)WTF::fastFree(result, a2);
    else
      --*(_DWORD *)result;
  }
  return result;
}

uint64_t WebCore::CommandLineAPIHost::inspect(uint64_t result, Inspector *a2, JSValue a3, JSC::JSGlobalObject *a4)
{
  uint64_t v4;
  JSValue v7;
  _DWORD *v8;
  unsigned int v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;

  v4 = *(_QWORD *)(result + 8);
  if (v4)
  {
    if (*(_QWORD *)(v4 + 48))
    {
      result = Inspector::toInspectorValue(a2, a3.super.isa, a3);
      if (v13)
      {
        Inspector::toInspectorValue(a2, a4, v7);
        v8 = v12;
        if (v12)
        {
          v9 = v12[1];
          if (v9 >= 5)
          {
            if (v9 == 5)
            {
              ++*v12;
              v10 = v13;
              v13 = 0;
              Inspector::Protocol::BindingTraits<Inspector::Protocol::Runtime::RemoteObject>::runtimeCast();
              if (*v10 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*v10;
              Inspector::InspectorAgent::inspect();
              if (*v12 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*v12;
              if (v11)
              {
                if (*v11 == 1)
                  WTF::JSONImpl::Value::operator delete();
                else
                  --*v11;
              }
              v8 = v12;
            }
            else if (v9 != 6)
            {
              __break(0xC471u);
              JUMPOUT(0x195DA3494);
            }
          }
          if (*v8 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v8;
        }
        result = (uint64_t)v13;
        if (v13)
        {
          if (*v13 == 1)
            return WTF::JSONImpl::Value::operator delete();
          else
            --*v13;
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::CommandLineAPIHost::getEventListeners@<X0>(JSC::JSGlobalObject *a1@<X1>, WebCore::EventTarget *a2@<X2>, _QWORD *a3@<X8>)
{
  WebCore::EventTarget *v4;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  WTF *v15;
  uint64_t v16;
  _DWORD **v17;
  uint64_t v18;
  _QWORD *v19;
  _DWORD *v20;
  WTF::StringImpl **v21;
  uint64_t *v22;
  uint64_t v23;
  WTF *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  char v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  _QWORD *v41;
  JSC::HandleSet *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  __int16 v49;
  char *v50;
  char *v51;
  uint64_t v52;
  _QWORD *v53;
  WTF::StringImpl **v54;
  WTF::StringImpl *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  __int16 v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *Allocator;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  int v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  WTF *v81;
  WTF *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  WTF::StringImpl *v89;
  uint64_t v90;
  WTF::StringImpl **v91;
  WTF::StringImpl *v92;
  uint64_t v93;
  uint64_t v94;
  JSC::HandleSet *v95;
  uint64_t v96;
  uint64_t v97;
  WTF *v98;
  uint64_t v99;
  WebCore::EventTarget *v100;
  WTF::StringImpl **v101;
  WTF::StringImpl *v102;
  WTF *v103;
  int v104;
  unsigned int v105;
  WTF *v106;
  uint64_t v107;

  v4 = a2;
  result = (*(uint64_t (**)(WebCore::EventTarget *))(*(_QWORD *)a2 + 8))(a2);
  *a3 = 0;
  a3[1] = 0;
  if (!result)
    return result;
  v8 = *((_QWORD *)v4 + 2);
  if ((v8 & 0x1000000000000) == 0)
    return result;
  v9 = v8 & 0xFFFFFFFFFFFFLL;
  v10 = *(unsigned int *)((v8 & 0xFFFFFFFFFFFFLL) + 0x1C);
  if (!(_DWORD)v10)
    return result;
  if (v10 >> 29)
  {
    __break(0xC471u);
    return result;
  }
  v11 = result;
  v12 = *((_QWORD *)a1 + 7);
  v13 = WTF::fastMalloc((WTF *)(8 * v10));
  v15 = (WTF *)v13;
  v16 = *(unsigned int *)(v9 + 28);
  if (!(_DWORD)v16)
    return WTF::fastFree(v15, (void *)v14);
  v17 = *(_DWORD ***)(v9 + 16);
  v18 = *(unsigned int *)(v9 + 28);
  v19 = (_QWORD *)v13;
  do
  {
    v20 = *v17;
    if (*v17)
      *v20 += 2;
    *v19++ = v20;
    v17 += 4;
    --v18;
  }
  while (v18);
  v98 = (WTF *)v13;
  v99 = (uint64_t)a3;
  v96 = v11;
  v21 = (WTF::StringImpl **)v13;
  v97 = v16;
  v101 = (WTF::StringImpl **)(v13 + 8 * v16);
  v100 = v4;
  do
  {
    v106 = 0;
    v107 = 0;
    v22 = WebCore::EventTarget::eventListeners((uint64_t)v4, v21);
    v23 = *((unsigned int *)v22 + 3);
    if (!(_DWORD)v23)
      goto LABEL_83;
    v24 = 0;
    LODWORD(v25) = 0;
    v26 = *v22;
    v27 = 8 * v23;
    do
    {
      v28 = *(_QWORD *)(*(_QWORD *)v26 + 8);
      if (!*(_BYTE *)(v28 + 20))
      {
        v29 = *(_QWORD *)(v28 + 64);
        if (v29 && v29 == *((_QWORD *)a1 + 415))
        {
          v31 = *(_QWORD *)(v29 + 16);
          ++*(_DWORD *)(v28 + 16);
          v32 = *(_BYTE *)(v28 + 40);
          if ((v32 & 4) == 0)
          {
            v64 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v28 + 88))(v28, v96);
            if (v64)
            {
              v94 = v64;
              if ((v64 & 8) != 0)
                v14 = (v64 - 112) | 1;
              else
                v14 = v64 & 0xFFFFFFFFFFFFC000;
              if ((v14 & 1) != 0)
                v65 = v14 + 47;
              else
                v65 = *(_QWORD *)v14 + 32;
              Allocator = *(_QWORD **)(v65 + 16);
              if (!Allocator)
              {
                v93 = v65;
                Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
                v65 = v93;
              }
              *(_QWORD *)(v65 + 16) = *Allocator;
              *Allocator = v94;
              Allocator[1] = 0;
              Allocator[2] = 0;
              v67 = *(_QWORD *)(v28 + 48);
              *(_QWORD *)(v28 + 48) = Allocator;
              if (v67)
                *(_QWORD *)(v67 + 8) = 3;
              v68 = *(_QWORD *)(v28 + 56);
              if (v68)
              {
                if ((*(_BYTE *)(v68 + 8) & 3) == 0)
                {
                  v14 = *(_QWORD *)v68;
                  if (*(_QWORD *)v68)
                  {
                    if (*(_DWORD *)(v31 + 760) >= *(unsigned __int8 *)(v14 + 7))
                      JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v31 + 192), (const JSCell *)v14);
                  }
                }
              }
              v32 = *(_BYTE *)(v28 + 40) | 4;
              *(_BYTE *)(v28 + 40) = v32;
            }
            else
            {
              v32 = *(_BYTE *)(v28 + 40);
            }
          }
          if ((v32 & 4) != 0 && (v33 = *(uint64_t **)(v28 + 48)) != 0 && (v33[1] & 3) == 0)
            v34 = *v33;
          else
            v34 = 0;
          if (*(_DWORD *)(v28 + 16) == 1)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
            if (!v34)
              goto LABEL_53;
          }
          else
          {
            --*(_DWORD *)(v28 + 16);
            if (!v34)
              goto LABEL_53;
          }
          v35 = *(_QWORD *)(v12 + 712);
          if (!v35)
          {
            JSC::HandleSet::grow((JSC::HandleSet *)(v12 + 672));
            v35 = *(_QWORD *)(v12 + 712);
          }
          *(_QWORD *)(v12 + 712) = *(_QWORD *)v35;
          *(_QWORD *)(v35 + 16) = 0;
          *(_QWORD *)v35 = 0;
          *(_QWORD *)(v35 + 8) = 0;
          v102 = (WTF::StringImpl *)(v35 + 16);
          v36 = *(unint64_t **)((v35 & 0xFFFFFFFFFFFFF000) + 0x10);
          v37 = v36[3];
          v36 += 3;
          *(_QWORD *)v35 = v37;
          *(_QWORD *)(v35 + 8) = v36;
          *v36 = v35;
          *(_QWORD *)(v37 + 8) = v35;
          *(_QWORD *)(v35 + 16) = v34;
          v38 = *(_QWORD *)v26;
          LOBYTE(v103) = *(_BYTE *)(*(_QWORD *)v26 + 4) & 1;
          BYTE1(v103) = (*(_BYTE *)(v38 + 4) & 2) != 0;
          BYTE2(v103) = (*(_BYTE *)(v38 + 4) & 4) != 0;
          if ((_DWORD)v25 == (_DWORD)v107)
          {
            v39 = WTF::Vector<WebCore::CommandLineAPIHost::ListenerEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v106, v25 + 1, (unint64_t)&v102);
            v40 = v39;
            v25 = HIDWORD(v107);
            v24 = v106;
            v41 = (_QWORD *)((char *)v106 + 16 * HIDWORD(v107));
            *v41 = 0;
            if (*(_QWORD *)v39)
            {
              v42 = *(JSC::HandleSet **)(((*(_QWORD *)v39 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
              v43 = (_QWORD *)*((_QWORD *)v42 + 5);
              if (!v43)
              {
                v95 = *(JSC::HandleSet **)(((*(_QWORD *)v39 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
                JSC::HandleSet::grow(v42);
                v42 = v95;
                v43 = (_QWORD *)*((_QWORD *)v95 + 5);
              }
              *((_QWORD *)v42 + 5) = *v43;
              v43[2] = 0;
              v44 = v43 + 2;
              *v43 = 0;
              v43[1] = 0;
              *v41 = v43 + 2;
              v45 = *(_QWORD **)v40;
              if (*(_QWORD *)v40)
                v45 = (_QWORD *)*v45;
              v46 = (unint64_t)(v44 - 2);
              if ((v45 != 0) != (*v44 != 0))
              {
                if (v45)
                {
                  v47 = *(unint64_t **)((v46 & 0xFFFFFFFFFFFFF000) + 0x10);
                  v48 = v47[3];
                  v47 += 3;
                  *(_QWORD *)v46 = v48;
                  *(v44 - 1) = v47;
                  *v47 = v46;
                  *(_QWORD *)(v48 + 8) = v46;
                }
                else
                {
                  v70 = *(_QWORD *)v46;
                  v69 = (_QWORD *)*(v44 - 1);
                  *v69 = *(_QWORD *)v46;
                  *(_QWORD *)(v70 + 8) = v69;
                  *(_QWORD *)v46 = 0;
                  *(_QWORD *)(v46 + 8) = 0;
                  v44 = (_QWORD *)*v41;
                }
              }
              *v44 = v45;
            }
            v49 = *((_WORD *)v40 + 4);
            v50 = (char *)v24 + 16 * v25;
            v50[10] = v40[10];
            *((_WORD *)v50 + 4) = v49;
          }
          else
          {
            v51 = (char *)v24 + 16 * v25;
            *(_QWORD *)v51 = 0;
            if (v102)
            {
              v52 = *(_QWORD *)((((unint64_t)v102 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
              v53 = *(_QWORD **)(v52 + 40);
              if (!v53)
              {
                JSC::HandleSet::grow(*(JSC::HandleSet **)((((unint64_t)v102 - 16) & 0xFFFFFFFFFFFFF000) + 0x10));
                v53 = *(_QWORD **)(v52 + 40);
              }
              *(_QWORD *)(v52 + 40) = *v53;
              v53[2] = 0;
              v54 = (WTF::StringImpl **)(v53 + 2);
              *v53 = 0;
              v53[1] = 0;
              *(_QWORD *)v51 = v53 + 2;
              v55 = v102;
              if (v102)
                v55 = *(WTF::StringImpl **)v102;
              v56 = (unint64_t)(v54 - 2);
              if ((v55 != 0) != (*v54 != 0))
              {
                if (v55)
                {
                  v57 = *(unint64_t **)((v56 & 0xFFFFFFFFFFFFF000) + 0x10);
                  v58 = v57[3];
                  v57 += 3;
                  *(_QWORD *)v56 = v58;
                  *(v54 - 1) = (WTF::StringImpl *)v57;
                  *v57 = v56;
                  *(_QWORD *)(v58 + 8) = v56;
                }
                else
                {
                  v72 = *(_QWORD *)v56;
                  v71 = *(v54 - 1);
                  *v71 = *(_QWORD *)v56;
                  *(_QWORD *)(v72 + 8) = v71;
                  *(_QWORD *)v56 = 0;
                  *(_QWORD *)(v56 + 8) = 0;
                  v54 = *(WTF::StringImpl ***)v51;
                }
              }
              *v54 = v55;
            }
            v59 = (__int16)v103;
            v51[10] = BYTE2(v103);
            *((_WORD *)v51 + 4) = v59;
          }
          LODWORD(v25) = v25 + 1;
          HIDWORD(v107) = v25;
          if (v102)
          {
            v60 = (uint64_t *)((char *)v102 - 16);
            v61 = *(_QWORD *)((((unint64_t)v102 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
            v62 = (uint64_t *)*((_QWORD *)v102 - 1);
            if (v62)
            {
              v63 = *v60;
              *v62 = *v60;
              *(_QWORD *)(v63 + 8) = v62;
              *v60 = 0;
              v60[1] = 0;
            }
            *v60 = *(_QWORD *)(v61 + 40);
            *(_QWORD *)(v61 + 40) = v60;
          }
        }
      }
LABEL_53:
      v26 += 8;
      v27 -= 8;
    }
    while (v27);
    v4 = v100;
    if ((_DWORD)v25)
    {
      v73 = *v21;
      if (*v21)
        *(_DWORD *)v73 += 2;
      v102 = v73;
      v103 = v106;
      v74 = v107;
      v106 = 0;
      v107 = 0;
      v104 = v74;
      v105 = v25;
      v75 = *(unsigned int *)(v99 + 12);
      if ((_DWORD)v75 == *(_DWORD *)(v99 + 8))
      {
        v76 = WTF::Vector<WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::CommandLineAPIHost::ListenerEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v99, v75 + 1, (unint64_t)&v102);
        LODWORD(v75) = *(_DWORD *)(v99 + 12);
        v77 = *(_QWORD *)v99 + 24 * v75;
        v78 = *(_QWORD *)v76;
        *(_QWORD *)v76 = 0;
        *(_QWORD *)(v77 + 8) = 0;
        *(_QWORD *)(v77 + 16) = 0;
        *(_QWORD *)v77 = v78;
        v79 = *((_QWORD *)v76 + 1);
        *((_QWORD *)v76 + 1) = 0;
        *(_QWORD *)(v77 + 8) = v79;
        LODWORD(v79) = *((_DWORD *)v76 + 4);
        *((_DWORD *)v76 + 4) = 0;
        *(_DWORD *)(v77 + 16) = v79;
        LODWORD(v79) = *((_DWORD *)v76 + 5);
        *((_DWORD *)v76 + 5) = 0;
        *(_DWORD *)(v77 + 20) = v79;
      }
      else
      {
        v80 = *(_QWORD *)v99 + 24 * v75;
        v102 = 0;
        *(_QWORD *)(v80 + 8) = 0;
        *(_QWORD *)(v80 + 16) = 0;
        *(_QWORD *)v80 = v73;
        v81 = v103;
        v103 = 0;
        *(_QWORD *)(v80 + 8) = v81;
        LODWORD(v81) = v104;
        v104 = 0;
        *(_DWORD *)(v80 + 16) = (_DWORD)v81;
        LODWORD(v81) = v105;
        v105 = 0;
        *(_DWORD *)(v80 + 20) = (_DWORD)v81;
      }
      *(_DWORD *)(v99 + 12) = v75 + 1;
      v82 = v103;
      if (v105)
      {
        v83 = 16 * v105;
        do
        {
          v84 = *(_QWORD *)v82;
          if (*(_QWORD *)v82)
          {
            v85 = (uint64_t *)(v84 - 16);
            v86 = *(_QWORD *)(((v84 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
            v87 = *(uint64_t **)(v84 - 8);
            if (v87)
            {
              v88 = *v85;
              *v87 = *v85;
              *(_QWORD *)(v88 + 8) = v87;
              *v85 = 0;
              v85[1] = 0;
            }
            *v85 = *(_QWORD *)(v86 + 40);
            *(_QWORD *)(v86 + 40) = v85;
            *(_QWORD *)v82 = 0;
          }
          v82 = (WTF *)((char *)v82 + 16);
          v83 -= 16;
        }
        while (v83);
        v82 = v103;
      }
      if (v82)
      {
        v103 = 0;
        v104 = 0;
        WTF::fastFree(v82, (void *)v14);
      }
      v89 = v102;
      v102 = 0;
      if (v89)
      {
        if (*(_DWORD *)v89 == 2)
          WTF::StringImpl::destroy(v89, (WTF::StringImpl *)v14);
        else
          *(_DWORD *)v89 -= 2;
      }
      goto LABEL_99;
    }
LABEL_83:
    if (v106)
      WTF::fastFree(v106, (void *)v14);
LABEL_99:
    ++v21;
  }
  while (v21 != v101);
  v15 = v98;
  v90 = 8 * v97;
  v91 = (WTF::StringImpl **)v98;
  do
  {
    v92 = *v91;
    *v91 = 0;
    if (v92)
    {
      if (*(_DWORD *)v92 == 2)
        WTF::StringImpl::destroy(v92, (WTF::StringImpl *)v14);
      else
        *(_DWORD *)v92 -= 2;
    }
    ++v91;
    v90 -= 8;
  }
  while (v90);
  return WTF::fastFree(v15, (void *)v14);
}

unsigned int *WebCore::CommandLineAPIHost::gatherRTCLogs(int a1, WebCore::JSDOMGlobalObject *this, uint64_t *a3)
{
  unsigned int *result;
  void *v5;
  unsigned int *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (**v13)();
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  void *v19;
  WTF *v20;
  void *v21;
  unsigned int *v22;

  result = (unsigned int *)WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if (result)
  {
    v6 = result;
    if (!*((_BYTE *)result + 274))
    {
      *(result - 42) += 2;
      v7 = *a3;
      if (!*a3)
      {
        v14 = *((_QWORD *)result + 42);
        if (v14)
        {
          v15 = *(_QWORD *)(v14 + 8);
          if (v15)
          {
            v16 = *(_QWORD *)(v15 + 24);
            if (v16)
            {
              v17 = *(_QWORD *)(v16 + 8);
              if (v17)
              {
                ++*(_DWORD *)v17;
                result = (unsigned int *)WebCore::RTCController::stopGatheringLogs(*(WebCore::RTCController **)(v17 + 304), v5);
                if (*(_DWORD *)v17 == 1)
                {
                  WebCore::Page::~Page(v17);
                  result = (unsigned int *)WTF::fastFree(v20, v21);
                }
                else
                {
                  --*(_DWORD *)v17;
                }
              }
            }
          }
        }
        goto LABEL_19;
      }
      *a3 = 0;
      v8 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v8 = &off_1E33EE108;
      *((_QWORD *)v8 + 1) = v7;
      v22 = v8;
      v9 = *((_QWORD *)v6 + 42);
      if (v9)
      {
        v10 = *(_QWORD *)(v9 + 8);
        if (v10)
        {
          v11 = *(_QWORD *)(v10 + 24);
          if (v11)
          {
            v12 = *(_QWORD *)(v11 + 8);
            if (v12)
            {
              ++*(_DWORD *)v12;
              WebCore::RTCController::startGatheringLogs(*(uint64_t **)(v12 + 304), (uint64_t)(v6 - 48), (uint64_t *)&v22);
              if (*(_DWORD *)v12 == 1)
              {
                WebCore::Page::~Page(v12);
                WTF::fastFree(v18, v19);
              }
              else
              {
                --*(_DWORD *)v12;
              }
            }
          }
        }
        result = v22;
        v22 = 0;
        if (!result)
          goto LABEL_19;
        v13 = *(uint64_t (***)())result;
      }
      else
      {
        v22 = 0;
        v13 = &off_1E33EE108;
      }
      result = (unsigned int *)v13[1]();
LABEL_19:
      if (*(v6 - 42) == 2)
      {
        if ((*((_WORD *)v6 - 81) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)(v6 - 48), v5);
      }
      else
      {
        *(v6 - 42) -= 2;
      }
    }
  }
  return result;
}

uint64_t WebCore::CommandLineAPIHost::InspectableObject::get()
{
  return 0;
}

uint64_t WebCore::CommandLineAPIHost::clearAllWrappers(WebCore::CommandLineAPIHost *this)
{
  _QWORD *v2;
  uint64_t result;

  Inspector::PerGlobalObjectWrapperWorld::clearAllWrappers((WebCore::CommandLineAPIHost *)((char *)this + 24));
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v2 = &off_1E33EDB18;
  result = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = v2;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

uint64_t WebCore::CommandLineAPIModule::injectModuleFunction(WebCore::CommandLineAPIModule *this, JSC::JSGlobalObject *a2)
{
  uint64_t result;

  if (a2)
    return *(_QWORD *)(*((_QWORD *)a2 + 418) + 1424);
  WTFLogAlways();
  result = 57;
  __break(0xC471u);
  return result;
}

JSC::JSObject *WebCore::CommandLineAPIModule::host(WebCore::CommandLineAPIModule *this, Inspector::InjectedScriptManager *a2, JSC::JSGlobalObject *a3)
{
  uint64_t v4;
  JSC::JSObject *Wrapper;
  uint64_t *v6;
  unint64_t Structure;
  JSC::Structure *v8;
  JSC::JSCell *v9;
  unint64_t v10;
  void *v11;
  WebCore::CommandLineAPIHost *v12;
  WTF *v14;
  void *v15;
  WebCore::CommandLineAPIHost *v16;

  v4 = *((_QWORD *)a2 + 6);
  Wrapper = (JSC::JSObject *)Inspector::PerGlobalObjectWrapperWorld::getWrapper((Inspector::PerGlobalObjectWrapperWorld *)(v4 + 24), a3);
  if (!Wrapper)
  {
    v6 = (uint64_t *)*((_QWORD *)a3 + 7);
    Structure = WebCore::JSCommandLineAPIHostPrototype::createStructure(v6, (uint64_t)a3, *((JSC::JSCell **)a3 + 82));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v9 = (JSC::JSCell *)WebCore::JSCommandLineAPIHostPrototype::create((WebCore::JSCommandLineAPIHostPrototype *)v6, a3, Structure, v8);
    v10 = WebCore::JSCommandLineAPIHost::createStructure(*((uint64_t **)a3 + 7), (uint64_t)a3, v9);
    ++*(_DWORD *)v4;
    v16 = (WebCore::CommandLineAPIHost *)v4;
    Wrapper = (JSC::JSObject *)WebCore::JSCommandLineAPIHost::create(v10, a3, (uint64_t *)&v16);
    v12 = v16;
    v16 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
      {
        WebCore::CommandLineAPIHost::~CommandLineAPIHost(v12, v11);
        WTF::fastFree(v14, v15);
      }
      else
      {
        --*(_DWORD *)v12;
      }
    }
    Inspector::PerGlobalObjectWrapperWorld::addWrapper((Inspector::PerGlobalObjectWrapperWorld *)(v4 + 24), a3, Wrapper);
  }
  return Wrapper;
}

BOOL WebCore::DOMEditor::insertBefore(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4, WTF::StringImpl **a5)
{
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  int v14;
  WTF::StringImpl *v15;
  char **v16;
  char *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  char v22[8];
  WTF::StringImpl *v23;
  unsigned __int8 v24;
  WTF::StringImpl *v25;

  v9 = *a1;
  v10 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v10 = off_1E33EDB40;
  *((_QWORD *)v10 + 1) = 0;
  *(_DWORD *)(a2 + 24) += 2;
  *((_QWORD *)v10 + 2) = a2;
  v11 = *a3;
  *a3 = 0;
  *((_QWORD *)v10 + 3) = v11;
  if (a4)
    *(_DWORD *)(a4 + 24) += 2;
  *((_QWORD *)v10 + 4) = a4;
  *((_QWORD *)v10 + 5) = 0;
  v25 = v10;
  WebCore::InspectorHistory::perform(v9, (char *)&v25, (uint64_t)v22);
  v13 = v25;
  v25 = 0;
  if (v13)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v13 + 8))(v13);
  v14 = v24;
  if (v24)
  {
    v15 = v23;
    v23 = 0;
    if (v22[0] >= 0x20u)
      v16 = (char **)&WebCore::DOMException::description(WebCore::ExceptionCode)::emptyDescription;
    else
      v16 = &(&WebCore::descriptions)[5 * v22[0]];
    v17 = v16[1];
    if (v17)
    {
      v12 = (WTF::StringImpl *)(v17 - 1);
      if (v17 == (char *)1)
      {
        v18 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
        *MEMORY[0x1E0CBEF70] += 2;
      }
      else
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v18 = v25;
      }
    }
    else
    {
      v18 = 0;
    }
    v19 = *a5;
    *a5 = v18;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::destroy(v19, v12);
        if (!v15)
          goto LABEL_18;
LABEL_16:
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v12);
        else
          *(_DWORD *)v15 -= 2;
LABEL_18:
        if (v24)
        {
          v20 = v23;
          v23 = 0;
          if (v20)
          {
            if (*(_DWORD *)v20 == 2)
              WTF::StringImpl::destroy(v20, v12);
            else
              *(_DWORD *)v20 -= 2;
          }
        }
        return v14 == 0;
      }
      *(_DWORD *)v19 -= 2;
    }
    if (!v15)
      goto LABEL_18;
    goto LABEL_16;
  }
  return v14 == 0;
}

BOOL WebCore::DOMEditor::removeChild(WebCore::DOMEditor *this, WebCore::ContainerNode *a2, WebCore::Node *a3, WTF::StringImpl **a4)
{
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  int v11;
  WTF::StringImpl *v12;
  char **v13;
  char *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  char v19[8];
  WTF::StringImpl *v20;
  unsigned __int8 v21;
  WTF::StringImpl *v22;

  v7 = *(_QWORD *)this;
  v8 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v8 = off_1E33EDB90;
  *((_QWORD *)v8 + 1) = 0;
  *((_DWORD *)a2 + 6) += 2;
  *((_QWORD *)v8 + 2) = a2;
  *((_DWORD *)a3 + 6) += 2;
  *((_QWORD *)v8 + 3) = a3;
  *((_QWORD *)v8 + 4) = 0;
  v22 = v8;
  WebCore::InspectorHistory::perform(v7, (char *)&v22, (uint64_t)v19);
  v10 = v22;
  v22 = 0;
  if (v10)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v10 + 8))(v10);
  v11 = v21;
  if (v21)
  {
    v12 = v20;
    v20 = 0;
    if (v19[0] >= 0x20u)
      v13 = (char **)&WebCore::DOMException::description(WebCore::ExceptionCode)::emptyDescription;
    else
      v13 = &(&WebCore::descriptions)[5 * v19[0]];
    v14 = v13[1];
    if (v14)
    {
      v9 = (WTF::StringImpl *)(v14 - 1);
      if (v14 == (char *)1)
      {
        v15 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
        *MEMORY[0x1E0CBEF70] += 2;
      }
      else
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v15 = v22;
      }
    }
    else
    {
      v15 = 0;
    }
    v16 = *a4;
    *a4 = v15;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
      {
        WTF::StringImpl::destroy(v16, v9);
        if (!v12)
          goto LABEL_16;
LABEL_14:
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v9);
        else
          *(_DWORD *)v12 -= 2;
LABEL_16:
        if (v21)
        {
          v17 = v20;
          v20 = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 2)
              WTF::StringImpl::destroy(v17, v9);
            else
              *(_DWORD *)v17 -= 2;
          }
        }
        return v11 == 0;
      }
      *(_DWORD *)v16 -= 2;
    }
    if (!v12)
      goto LABEL_16;
    goto LABEL_14;
  }
  return v11 == 0;
}

BOOL WebCore::DOMEditor::setAttribute(WebCore::DOMEditor *this, WebCore::Element *a2, const WTF::AtomString *a3, const WTF::AtomString *a4, WTF::StringImpl **a5)
{
  uint64_t v9;
  WTF::StringImpl *v10;
  _DWORD *v11;
  _DWORD *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  int v15;
  WTF::StringImpl *v16;
  char **v17;
  char *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  char v23[8];
  WTF::StringImpl *v24;
  unsigned __int8 v25;
  WTF::StringImpl *v26;

  v9 = *(_QWORD *)this;
  v10 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v10 = off_1E33EDBE0;
  *((_QWORD *)v10 + 1) = 0;
  *((_DWORD *)a2 + 6) += 2;
  *((_QWORD *)v10 + 2) = a2;
  v11 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v11 += 2;
  *((_QWORD *)v10 + 3) = v11;
  v12 = *(_DWORD **)a4;
  if (*(_QWORD *)a4)
    *v12 += 2;
  *((_QWORD *)v10 + 4) = v12;
  *((_QWORD *)v10 + 5) = 0;
  v26 = v10;
  WebCore::InspectorHistory::perform(v9, (char *)&v26, (uint64_t)v23);
  v14 = v26;
  v26 = 0;
  if (v14)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v14 + 8))(v14);
  v15 = v25;
  if (v25)
  {
    v16 = v24;
    v24 = 0;
    if (v23[0] >= 0x20u)
      v17 = (char **)&WebCore::DOMException::description(WebCore::ExceptionCode)::emptyDescription;
    else
      v17 = &(&WebCore::descriptions)[5 * v23[0]];
    v18 = v17[1];
    if (v18)
    {
      v13 = (WTF::StringImpl *)(v18 - 1);
      if (v18 == (char *)1)
      {
        v19 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
        *MEMORY[0x1E0CBEF70] += 2;
      }
      else
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v19 = v26;
      }
    }
    else
    {
      v19 = 0;
    }
    v20 = *a5;
    *a5 = v19;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
      {
        WTF::StringImpl::destroy(v20, v13);
        if (!v16)
          goto LABEL_20;
LABEL_18:
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v13);
        else
          *(_DWORD *)v16 -= 2;
LABEL_20:
        if (v25)
        {
          v21 = v24;
          v24 = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 2)
              WTF::StringImpl::destroy(v21, v13);
            else
              *(_DWORD *)v21 -= 2;
          }
        }
        return v15 == 0;
      }
      *(_DWORD *)v20 -= 2;
    }
    if (!v16)
      goto LABEL_20;
    goto LABEL_18;
  }
  return v15 == 0;
}

BOOL WebCore::DOMEditor::removeAttribute(WebCore::DOMEditor *this, WebCore::Element *a2, const WTF::AtomString *a3, WTF::StringImpl **a4)
{
  uint64_t v7;
  WTF::StringImpl *v8;
  _DWORD *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  int v12;
  WTF::StringImpl *v13;
  char **v14;
  char *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  char v20[8];
  WTF::StringImpl *v21;
  unsigned __int8 v22;
  WTF::StringImpl *v23;

  v7 = *(_QWORD *)this;
  v8 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v8 = off_1E33EDC30;
  *((_QWORD *)v8 + 1) = 0;
  *((_DWORD *)a2 + 6) += 2;
  *((_QWORD *)v8 + 2) = a2;
  v9 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v9 += 2;
  *((_QWORD *)v8 + 3) = v9;
  *((_QWORD *)v8 + 4) = 0;
  v23 = v8;
  WebCore::InspectorHistory::perform(v7, (char *)&v23, (uint64_t)v20);
  v11 = v23;
  v23 = 0;
  if (v11)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v11 + 8))(v11);
  v12 = v22;
  if (v22)
  {
    v13 = v21;
    v21 = 0;
    if (v20[0] >= 0x20u)
      v14 = (char **)&WebCore::DOMException::description(WebCore::ExceptionCode)::emptyDescription;
    else
      v14 = &(&WebCore::descriptions)[5 * v20[0]];
    v15 = v14[1];
    if (v15)
    {
      v10 = (WTF::StringImpl *)(v15 - 1);
      if (v15 == (char *)1)
      {
        v16 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
        *MEMORY[0x1E0CBEF70] += 2;
      }
      else
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v16 = v23;
      }
    }
    else
    {
      v16 = 0;
    }
    v17 = *a4;
    *a4 = v16;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::destroy(v17, v10);
        if (!v13)
          goto LABEL_18;
LABEL_16:
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v10);
        else
          *(_DWORD *)v13 -= 2;
LABEL_18:
        if (v22)
        {
          v18 = v21;
          v21 = 0;
          if (v18)
          {
            if (*(_DWORD *)v18 == 2)
              WTF::StringImpl::destroy(v18, v10);
            else
              *(_DWORD *)v18 -= 2;
          }
        }
        return v12 == 0;
      }
      *(_DWORD *)v17 -= 2;
    }
    if (!v13)
      goto LABEL_18;
    goto LABEL_16;
  }
  return v12 == 0;
}

BOOL WebCore::DOMEditor::setOuterHTML(WebCore::DOMEditor *this, WebCore::Node *a2, const WTF::String *a3, WebCore::Node **a4, WTF::StringImpl **a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  int v17;
  WTF::StringImpl *v18;
  char **v19;
  char *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  char v25[8];
  WTF::StringImpl *v26;
  unsigned __int8 v27;
  WTF::StringImpl *v28;

  v10 = WTF::fastMalloc((WTF *)0x58);
  v11 = v10;
  *(_QWORD *)v10 = off_1E33EDC80;
  *(_QWORD *)(v10 + 8) = 0;
  *((_DWORD *)a2 + 6) += 2;
  *(_QWORD *)(v10 + 16) = a2;
  v12 = *((_QWORD *)a2 + 7);
  if (v12)
    *(_DWORD *)(v12 + 24) += 2;
  *(_QWORD *)(v10 + 24) = v12;
  v13 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v13 += 2;
  *(_QWORD *)(v10 + 32) = v13;
  *(_OWORD *)(v10 + 40) = 0u;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_QWORD *)(v10 + 72) = 0;
  *(_QWORD *)(v10 + 80) = v10 + 56;
  v14 = *(_QWORD *)this;
  v28 = (WTF::StringImpl *)v11;
  WebCore::InspectorHistory::perform(v14, (char *)&v28, (uint64_t)v25);
  v16 = v28;
  v28 = 0;
  if (v16)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v16 + 8))(v16);
  v17 = v27;
  if (!v27)
  {
    *a4 = *(WebCore::Node **)(v11 + 48);
    goto LABEL_21;
  }
  v18 = v26;
  v26 = 0;
  if (v25[0] >= 0x20u)
    v19 = (char **)&WebCore::DOMException::description(WebCore::ExceptionCode)::emptyDescription;
  else
    v19 = &(&WebCore::descriptions)[5 * v25[0]];
  v20 = v19[1];
  if (v20)
  {
    v15 = (WTF::StringImpl *)(v20 - 1);
    if (v20 == (char *)1)
    {
      v21 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v21 = v28;
    }
  }
  else
  {
    v21 = 0;
  }
  v22 = *a5;
  *a5 = v21;
  if (!v22)
  {
LABEL_17:
    if (!v18)
      goto LABEL_21;
    goto LABEL_18;
  }
  if (*(_DWORD *)v22 != 2)
  {
    *(_DWORD *)v22 -= 2;
    goto LABEL_17;
  }
  WTF::StringImpl::destroy(v22, v15);
  if (!v18)
    goto LABEL_21;
LABEL_18:
  if (*(_DWORD *)v18 == 2)
    WTF::StringImpl::destroy(v18, v15);
  else
    *(_DWORD *)v18 -= 2;
LABEL_21:
  if (v27)
  {
    v23 = v26;
    v26 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v15);
      else
        *(_DWORD *)v23 -= 2;
    }
  }
  return v17 == 0;
}

BOOL WebCore::DOMEditor::insertAdjacentHTML(WebCore::DOMEditor *this, WebCore::Element *a2, const WTF::String *a3, const WTF::String *a4, WTF::StringImpl **a5)
{
  uint64_t v9;
  WTF::StringImpl *v10;
  _DWORD *v11;
  _DWORD *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  int v15;
  WTF::StringImpl *v16;
  char **v17;
  char *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  char v23[8];
  WTF::StringImpl *v24;
  unsigned __int8 v25;
  WTF::StringImpl *v26;

  v9 = *(_QWORD *)this;
  v10 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x90);
  *(_QWORD *)v10 = off_1E33EDCE0;
  *((_QWORD *)v10 + 1) = 0;
  *((_DWORD *)a2 + 6) += 2;
  *((_QWORD *)v10 + 2) = a2;
  *((_QWORD *)v10 + 3) = (char *)v10 + 40;
  *((_QWORD *)v10 + 4) = 11;
  v11 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v11 += 2;
  *((_QWORD *)v10 + 16) = v11;
  v12 = *(_DWORD **)a4;
  if (*(_QWORD *)a4)
    *v12 += 2;
  *((_QWORD *)v10 + 17) = v12;
  v26 = v10;
  WebCore::InspectorHistory::perform(v9, (char *)&v26, (uint64_t)v23);
  v14 = v26;
  v26 = 0;
  if (v14)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v14 + 8))(v14);
  v15 = v25;
  if (v25)
  {
    v16 = v24;
    v24 = 0;
    if (v23[0] >= 0x20u)
      v17 = (char **)&WebCore::DOMException::description(WebCore::ExceptionCode)::emptyDescription;
    else
      v17 = &(&WebCore::descriptions)[5 * v23[0]];
    v18 = v17[1];
    if (v18)
    {
      v13 = (WTF::StringImpl *)(v18 - 1);
      if (v18 == (char *)1)
      {
        v19 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
        *MEMORY[0x1E0CBEF70] += 2;
      }
      else
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v19 = v26;
      }
    }
    else
    {
      v19 = 0;
    }
    v20 = *a5;
    *a5 = v19;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
      {
        WTF::StringImpl::destroy(v20, v13);
        if (!v16)
          goto LABEL_20;
LABEL_18:
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v13);
        else
          *(_DWORD *)v16 -= 2;
LABEL_20:
        if (v25)
        {
          v21 = v24;
          v24 = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 2)
              WTF::StringImpl::destroy(v21, v13);
            else
              *(_DWORD *)v21 -= 2;
          }
        }
        return v15 == 0;
      }
      *(_DWORD *)v20 -= 2;
    }
    if (!v16)
      goto LABEL_20;
    goto LABEL_18;
  }
  return v15 == 0;
}

BOOL WebCore::DOMEditor::replaceWholeText(WebCore::DOMEditor *this, WebCore::Text *a2, const WTF::String *a3, WTF::StringImpl **a4)
{
  uint64_t v7;
  WTF::StringImpl *v8;
  _DWORD *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  int v12;
  WTF::StringImpl *v13;
  char **v14;
  char *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  char v20[8];
  WTF::StringImpl *v21;
  unsigned __int8 v22;
  WTF::StringImpl *v23;

  v7 = *(_QWORD *)this;
  v8 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v8 = off_1E33EDD30;
  *((_QWORD *)v8 + 1) = 0;
  *((_DWORD *)a2 + 6) += 2;
  *((_QWORD *)v8 + 2) = a2;
  v9 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v9 += 2;
  *((_QWORD *)v8 + 3) = v9;
  *((_QWORD *)v8 + 4) = 0;
  v23 = v8;
  WebCore::InspectorHistory::perform(v7, (char *)&v23, (uint64_t)v20);
  v11 = v23;
  v23 = 0;
  if (v11)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v11 + 8))(v11);
  v12 = v22;
  if (v22)
  {
    v13 = v21;
    v21 = 0;
    if (v20[0] >= 0x20u)
      v14 = (char **)&WebCore::DOMException::description(WebCore::ExceptionCode)::emptyDescription;
    else
      v14 = &(&WebCore::descriptions)[5 * v20[0]];
    v15 = v14[1];
    if (v15)
    {
      v10 = (WTF::StringImpl *)(v15 - 1);
      if (v15 == (char *)1)
      {
        v16 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
        *MEMORY[0x1E0CBEF70] += 2;
      }
      else
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v16 = v23;
      }
    }
    else
    {
      v16 = 0;
    }
    v17 = *a4;
    *a4 = v16;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::destroy(v17, v10);
        if (!v13)
          goto LABEL_18;
LABEL_16:
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v10);
        else
          *(_DWORD *)v13 -= 2;
LABEL_18:
        if (v22)
        {
          v18 = v21;
          v21 = 0;
          if (v18)
          {
            if (*(_DWORD *)v18 == 2)
              WTF::StringImpl::destroy(v18, v10);
            else
              *(_DWORD *)v18 -= 2;
          }
        }
        return v12 == 0;
      }
      *(_DWORD *)v17 -= 2;
    }
    if (!v13)
      goto LABEL_18;
    goto LABEL_16;
  }
  return v12 == 0;
}

unsigned int *WebCore::DOMPatchSupport::patchDocument(WebCore::DOMPatchSupport *this, unsigned int **a2)
{
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl **v10;
  WTF::StringImpl *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 v16;
  WTF::StringImpl *v17;
  int v18;
  uint64_t v19;
  WTF::StringImpl **v20;
  int v22;
  WTF::StringImpl *v23;
  _DWORD *v24;
  unsigned int *v25;
  unsigned int v26;
  int v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  WTF *v30;
  WTF::StringImpl *v31;
  unsigned int *result;
  void *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  int v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  WTF *v42;
  WTF::StringImpl *v43;
  WTF *v44;
  void *v45;
  WTF *v46;
  void *v47;
  WTF::StringImpl **v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  uint64_t (*v51)(uint64_t);
  WTF::StringImpl **v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  uint64_t (*v55)(uint64_t);
  uint64_t v56;
  WTF::StringImpl *v57;
  WTF::StringImpl **v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  WTF::StringImpl **v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  WTF::StringImpl **v66;
  char v67[8];
  WTF::StringImpl *v68;
  char v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  unsigned int *v72;
  __int16 v73;
  __int128 v74;
  WTF *v75[2];
  char v76;
  _QWORD v77[2];
  uint64_t (*v78)(WebCore::SegmentedString *__hidden);
  uint64_t v79;
  uint64_t (*v80)(WebCore::SegmentedString *__hidden);
  uint64_t v81;
  WTF::StringImpl **v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 1);
  v5 = *(_WORD *)(v4 + 3358);
  if ((v5 & 1) != 0)
  {
    v7 = *(_QWORD *)(v4 + 680);
    v70 = 0;
    WTF::URL::invalidate((WTF::URL *)&v70);
    v6 = bmalloc::api::isoAllocate();
    v84 = 0;
    v83 = 0u;
    v8 = WebCore::Document::Document(v6, 0, v7, (uint64_t)&v70, 1, 0, (uint64_t *)&v83);
    *(_QWORD *)v8 = off_1E33BA1B0;
    *(_QWORD *)(v8 + 192) = &unk_1E33BA500;
    v10 = (WTF::StringImpl **)(v8 + 192);
    *(_QWORD *)(v8 + 288) = &unk_1E33BA6C0;
    *(_QWORD *)(v8 + 504) = &unk_1E33BA6E8;
    *(_QWORD *)(v8 + 512) = &unk_1E33BA710;
    *(_QWORD *)(v8 + 544) = &unk_1E33BA740;
    *(_QWORD *)(v8 + 552) = &unk_1E33BA768;
    *(_OWORD *)(v8 + 3512) = 0u;
    v11 = *(WTF::StringImpl **)(v8 + 1704);
    *(_QWORD *)(v6 + 1704) = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v9);
      else
        *(_DWORD *)v11 -= 2;
    }
    if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
    {
      __clrex();
    }
    else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
    {
      goto LABEL_13;
    }
    MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_13:
    {
      WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
    }
    v82 = v10;
    WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::ScriptExecutionContext *,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ScriptExecutionContext *>,WTF::HashTableTraits>::add<WebCore::ScriptExecutionContext *>((uint64_t)&WebCore::allScriptExecutionContextsMap(void)::contexts, (_QWORD *)(v6 + 416), (uint64_t *)&v82, (uint64_t)&v83);
    v18 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
    if (v18 == 1)
    {
      if (!__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
        goto LABEL_30;
LABEL_29:
      WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
      goto LABEL_30;
    }
LABEL_28:
    __clrex();
    goto LABEL_29;
  }
  if ((v5 & 2) != 0)
  {
    v13 = *(_QWORD *)(v4 + 680);
    v70 = 0;
    WTF::URL::invalidate((WTF::URL *)&v70);
    v14 = bmalloc::api::isoAllocate();
    v6 = v14;
    v15 = v13;
    v16 = 130;
  }
  else
  {
    if ((v5 & 0x20) == 0)
    {
      v6 = 0;
      goto LABEL_33;
    }
    v19 = *(_QWORD *)(v4 + 680);
    v70 = 0;
    WTF::URL::invalidate((WTF::URL *)&v70);
    v14 = bmalloc::api::isoAllocate();
    v6 = v14;
    v15 = v19;
    v16 = 128;
  }
  v20 = (WTF::StringImpl **)(WebCore::XMLDocument::XMLDocument(v14, 0, v15, (uint64_t)&v70, v16) + 24);
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_23;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_23:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v82 = v20;
  WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::ScriptExecutionContext *,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ScriptExecutionContext *>,WTF::HashTableTraits>::add<WebCore::ScriptExecutionContext *>((uint64_t)&WebCore::allScriptExecutionContextsMap(void)::contexts, (_QWORD *)(v6 + 416), (uint64_t *)&v82, (uint64_t)&v83);
  v22 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v22 != 1)
    goto LABEL_28;
  if (__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
    goto LABEL_29;
LABEL_30:
  v23 = v70;
  v70 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v17);
    else
      *(_DWORD *)v23 -= 2;
  }
LABEL_33:
  if ((*(_WORD *)(v6 + 3358) & 1) != 0)
  {
    v24 = (_DWORD *)WTF::fastMalloc((WTF *)0xD10);
    WebCore::HTMLDocumentParser::HTMLDocumentParser((uint64_t)v24, v6, 5);
  }
  else
  {
    v24 = (_DWORD *)WTF::fastMalloc((WTF *)0x1D8);
    WebCore::XMLDocumentParser::XMLDocumentParser((uint64_t)v24, (WebCore::Document *)v6, 0, 5);
  }
  v25 = *a2;
  if (*a2)
  {
    *v25 += 2;
    v70 = (WTF::StringImpl *)v25;
    v26 = v25[1];
    LODWORD(v71) = v26;
    HIDWORD(v71) = v26;
    v72 = 0;
    v73 = 257;
    if (v26)
    {
      v27 = (v25[4] >> 2) & 1;
      LOBYTE(v73) = (v25[4] & 4) != 0;
      v25 = (unsigned int *)*((_QWORD *)v25 + 1);
      v72 = v25;
      goto LABEL_39;
    }
    v25 = 0;
  }
  else
  {
    v26 = 0;
    v70 = 0;
    v71 = 0;
    v72 = 0;
    v73 = 257;
  }
  v27 = 1;
LABEL_39:
  v76 = 0;
  v74 = 0u;
  *(_OWORD *)v75 = 0u;
  memset(v77, 0, 15);
  v78 = WebCore::SegmentedString::advanceEmpty;
  v79 = 0;
  v80 = WebCore::SegmentedString::advanceEmpty;
  v81 = 0;
  if (!v26)
    goto LABEL_43;
  if (v27)
  {
    LOWORD(v77[0]) = *(unsigned __int8 *)v25;
    if (v26 >= 2)
    {
      BYTE6(v77[1]) = 3;
      goto LABEL_43;
    }
    goto LABEL_101;
  }
  LOWORD(v77[0]) = *(_WORD *)v25;
  if (v26 <= 1)
  {
LABEL_101:
    BYTE6(v77[1]) = 0;
    v78 = (uint64_t (*)(WebCore::SegmentedString *__hidden))WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
    v79 = 0;
    v51 = (uint64_t (*)(uint64_t))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
    goto LABEL_102;
  }
  BYTE6(v77[1]) = 0;
  v78 = (uint64_t (*)(WebCore::SegmentedString *__hidden))WebCore::SegmentedString::advanceWithoutUpdatingLineNumber16;
  v79 = 0;
  v51 = WebCore::SegmentedString::advanceAndUpdateLineNumber16;
LABEL_102:
  v80 = (uint64_t (*)(WebCore::SegmentedString *__hidden))v51;
  v81 = 0;
LABEL_43:
  (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v24 + 32))(v24, &v70);
  v29 = v74;
  v30 = v75[0];
  if ((unint64_t)v74 > *((_QWORD *)&v74 + 1))
  {
    v66 = (WTF::StringImpl **)v75[0];
    if (*((_QWORD *)&v74 + 1))
    {
      v56 = 32 * *((_QWORD *)&v74 + 1);
      do
      {
        v57 = *v66;
        *v66 = 0;
        if (v57)
        {
          if (*(_DWORD *)v57 == 2)
            WTF::StringImpl::destroy(v57, v28);
          else
            *(_DWORD *)v57 -= 2;
        }
        v66 += 4;
        v56 -= 32;
      }
      while (v56);
      v66 = (WTF::StringImpl **)v75[0];
      v29 = v74;
    }
    if (v29 != LODWORD(v75[1]))
    {
      v58 = &v66[4 * v29];
      v59 = 32 * LODWORD(v75[1]) - 32 * v29;
      do
      {
        v60 = *v58;
        *v58 = 0;
        if (v60)
        {
          if (*(_DWORD *)v60 == 2)
            WTF::StringImpl::destroy(v60, v28);
          else
            *(_DWORD *)v60 -= 2;
        }
        v58 += 4;
        v59 -= 32;
      }
      while (v59);
    }
LABEL_126:
    v30 = v75[0];
    if (!v75[0])
      goto LABEL_47;
    goto LABEL_127;
  }
  if ((_QWORD)v74 != *((_QWORD *)&v74 + 1))
  {
    v48 = (WTF::StringImpl **)((char *)v75[0] + 32 * v74);
    v49 = 32 * *((_QWORD *)&v74 + 1) - 32 * v74;
    do
    {
      v50 = *v48;
      *v48 = 0;
      if (v50)
      {
        if (*(_DWORD *)v50 == 2)
          WTF::StringImpl::destroy(v50, v28);
        else
          *(_DWORD *)v50 -= 2;
      }
      v48 += 4;
      v49 -= 32;
    }
    while (v49);
    goto LABEL_126;
  }
  if (!v75[0])
    goto LABEL_47;
LABEL_127:
  v75[0] = 0;
  LODWORD(v75[1]) = 0;
  WTF::fastFree(v30, v28);
LABEL_47:
  v31 = v70;
  v70 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, v28);
    else
      *(_DWORD *)v31 -= 2;
  }
  (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 72))(v24);
  result = (unsigned int *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v24 + 112))(v24);
  v33 = *(void **)(*((_QWORD *)this + 1) + 1272);
  if (v33 && *(_QWORD *)(v6 + 1272))
  {
    WebCore::DOMPatchSupport::createDigest((WTF::StringImpl ***)&v83, (uint64_t)v33, 0);
    WebCore::DOMPatchSupport::createDigest(&v82, *(_QWORD *)(v6 + 1272), (uint64_t *)this + 2);
    WebCore::DOMPatchSupport::innerPatchNode((WebCore::DOMPatchSupport *)&v70, (uint64_t **)this, (WebCore::DOMPatchSupport::Digest *)v83, (uint64_t)v82);
    if (!(_BYTE)v72)
    {
LABEL_77:
      if (v82)
      {
        WebCore::DOMPatchSupport::Digest::~Digest((WebCore::DOMPatchSupport::Digest *)v82, v33);
        WTF::fastFree(v44, v45);
      }
      result = (unsigned int *)v83;
      if ((_QWORD)v83)
      {
        WebCore::DOMPatchSupport::Digest::~Digest((WebCore::DOMPatchSupport::Digest *)v83, v33);
        result = (unsigned int *)WTF::fastFree(v46, v47);
      }
      goto LABEL_81;
    }
    v34 = v71;
    v71 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v33);
      else
        *(_DWORD *)v34 -= 2;
    }
    v35 = *((_QWORD *)this + 1);
    *(_DWORD *)(v35 + 24) += 2;
    v36 = *a2;
    if (*a2)
    {
      *v36 += 2;
      v70 = (WTF::StringImpl *)v36;
      v37 = v36[1];
      LODWORD(v71) = v37;
      HIDWORD(v71) = v37;
      v72 = 0;
      v73 = 257;
      if (v37)
      {
        v38 = (v36[4] >> 2) & 1;
        LOBYTE(v73) = (v36[4] & 4) != 0;
        v36 = (unsigned int *)*((_QWORD *)v36 + 1);
        v72 = v36;
        goto LABEL_59;
      }
      v36 = 0;
    }
    else
    {
      v37 = 0;
      v70 = 0;
      v71 = 0;
      v72 = 0;
      v73 = 257;
    }
    v38 = 1;
LABEL_59:
    v76 = 0;
    v74 = 0u;
    *(_OWORD *)v75 = 0u;
    memset(v77, 0, 15);
    v78 = WebCore::SegmentedString::advanceEmpty;
    v79 = 0;
    v80 = WebCore::SegmentedString::advanceEmpty;
    v81 = 0;
    if (!v37)
    {
LABEL_63:
      WebCore::Document::write(v35, 0, (uint64_t)&v70, (uint64_t)v67);
      if (v69)
      {
        v40 = v68;
        v68 = 0;
        if (v40)
        {
          if (*(_DWORD *)v40 == 2)
            WTF::StringImpl::destroy(v40, v39);
          else
            *(_DWORD *)v40 -= 2;
        }
      }
      v41 = v74;
      v42 = v75[0];
      if ((unint64_t)v74 > *((_QWORD *)&v74 + 1))
      {
        if (*((_QWORD *)&v74 + 1))
        {
          v61 = 32 * *((_QWORD *)&v74 + 1);
          do
          {
            v62 = *(WTF::StringImpl **)v42;
            *(_QWORD *)v42 = 0;
            if (v62)
            {
              if (*(_DWORD *)v62 == 2)
                WTF::StringImpl::destroy(v62, v39);
              else
                *(_DWORD *)v62 -= 2;
            }
            v42 = (WTF *)((char *)v42 + 32);
            v61 -= 32;
          }
          while (v61);
          v42 = v75[0];
          v41 = v74;
        }
        if (v41 != LODWORD(v75[1]))
        {
          v63 = (WTF::StringImpl **)((char *)v42 + 32 * v41);
          v64 = 32 * LODWORD(v75[1]) - 32 * v41;
          do
          {
            v65 = *v63;
            *v63 = 0;
            if (v65)
            {
              if (*(_DWORD *)v65 == 2)
                WTF::StringImpl::destroy(v65, v39);
              else
                *(_DWORD *)v65 -= 2;
            }
            v63 += 4;
            v64 -= 32;
          }
          while (v64);
        }
      }
      else
      {
        if ((_QWORD)v74 == *((_QWORD *)&v74 + 1))
        {
          if (v75[0])
          {
LABEL_131:
            v75[0] = 0;
            LODWORD(v75[1]) = 0;
            WTF::fastFree(v42, v39);
          }
LABEL_71:
          v43 = v70;
          v70 = 0;
          if (v43)
          {
            if (*(_DWORD *)v43 == 2)
              WTF::StringImpl::destroy(v43, v39);
            else
              *(_DWORD *)v43 -= 2;
          }
          WebCore::Document::close((WebCore::Document *)v35);
          if (v35)
          {
            if (*(_DWORD *)(v35 + 24) == 2)
            {
              if ((*(_WORD *)(v35 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v35, v33);
            }
            else
            {
              *(_DWORD *)(v35 + 24) -= 2;
            }
          }
          goto LABEL_77;
        }
        v52 = (WTF::StringImpl **)((char *)v75[0] + 32 * v74);
        v53 = 32 * *((_QWORD *)&v74 + 1) - 32 * v74;
        do
        {
          v54 = *v52;
          *v52 = 0;
          if (v54)
          {
            if (*(_DWORD *)v54 == 2)
              WTF::StringImpl::destroy(v54, v39);
            else
              *(_DWORD *)v54 -= 2;
          }
          v52 += 4;
          v53 -= 32;
        }
        while (v53);
      }
      v42 = v75[0];
      if (v75[0])
        goto LABEL_131;
      goto LABEL_71;
    }
    if (v38)
    {
      LOWORD(v77[0]) = *(unsigned __int8 *)v36;
      if (v37 >= 2)
      {
        BYTE6(v77[1]) = 3;
        goto LABEL_63;
      }
    }
    else
    {
      LOWORD(v77[0]) = *(_WORD *)v36;
      if (v37 > 1)
      {
        BYTE6(v77[1]) = 0;
        v78 = (uint64_t (*)(WebCore::SegmentedString *__hidden))WebCore::SegmentedString::advanceWithoutUpdatingLineNumber16;
        v79 = 0;
        v55 = WebCore::SegmentedString::advanceAndUpdateLineNumber16;
LABEL_117:
        v80 = (uint64_t (*)(WebCore::SegmentedString *__hidden))v55;
        v81 = 0;
        goto LABEL_63;
      }
    }
    BYTE6(v77[1]) = 0;
    v78 = (uint64_t (*)(WebCore::SegmentedString *__hidden))WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
    v79 = 0;
    v55 = (uint64_t (*)(uint64_t))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
    goto LABEL_117;
  }
LABEL_81:
  if (v24[2] == 1)
  {
    result = (unsigned int *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v24 + 8))(v24);
    if (!v6)
      return result;
  }
  else
  {
    --v24[2];
    if (!v6)
      return result;
  }
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v6, v33);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
  return result;
}

uint64_t WebCore::DOMPatchSupport::createDigest(WTF::StringImpl ***a1, uint64_t a2, uint64_t *a3)
{
  WTF::StringImpl **v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  __int16 v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  char *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WebCore::DOMPatchSupport::Digest *v18;
  WTF *v19;
  void *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  BOOL v37;
  int v38;
  char v39;
  uint64_t v40;
  unsigned int v41;
  BOOL v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  const WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  uint64_t result;
  int v50;
  uint64_t v51;
  int v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t *v55;
  int i;
  unsigned int v57;
  uint64_t *v58;
  WTF::StringImpl *v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  unint64_t v65;
  unsigned int v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  int data;
  CC_SHA1_CTX c;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72[13];

  v72[12] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v6 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)0x28);
  *(_OWORD *)v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  v6[4] = 0;
  *a1 = v6;
  v6[2] = (WTF::StringImpl *)a2;
  WTF::SHA1::SHA1((WTF::SHA1 *)&c);
  data = *(unsigned __int16 *)(a2 + 28) >> 12;
  CC_SHA1_Update(&c, &data, 4u);
  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(_QWORD *)a2 + 104))(v72, a2);
  WTF::SHA1::addUTF8Bytes();
  v8 = v72[0];
  v72[0] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(_QWORD *)a2 + 112))(v72, a2);
  WTF::SHA1::addUTF8Bytes();
  v10 = v72[0];
  v72[0] = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = *(_WORD *)(a2 + 28);
  if ((v11 & 0xF000) == 0x1000)
  {
    if ((v11 & 4) != 0)
    {
      v12 = *(_QWORD *)(a2 + 80);
      if (v12)
      {
        do
        {
          WebCore::DOMPatchSupport::createDigest(v72, v12, a3);
          WTF::SHA1::addUTF8Bytes();
          v12 = *(_QWORD *)(v12 + 56);
          v14 = *((unsigned int *)v6 + 9);
          if ((_DWORD)v14 == *((_DWORD *)v6 + 8))
          {
            v15 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v6 + 3, v14 + 1, (unint64_t)v72);
            v14 = *((unsigned int *)v6 + 9);
            v16 = v6[3];
            v17 = *(WTF::StringImpl **)v15;
            *(_QWORD *)v15 = 0;
          }
          else
          {
            v16 = v6[3];
            v17 = v72[0];
            v72[0] = 0;
          }
          *((_QWORD *)v16 + v14) = v17;
          *((_DWORD *)v6 + 9) = v14 + 1;
          v18 = v72[0];
          v72[0] = 0;
          if (v18)
          {
            WebCore::DOMPatchSupport::Digest::~Digest(v18, v13);
            WTF::fastFree(v19, v20);
          }
        }
        while (v12);
        v11 = *(_WORD *)(a2 + 28);
      }
    }
    if ((v11 & 8) == 0)
    {
LABEL_109:
      __break(0xC471u);
      JUMPOUT(0x195DA5AE8);
    }
    v21 = *(_QWORD *)(a2 + 104);
    if (v21)
    {
      v22 = *(_DWORD *)(v21 + 4);
      if ((v22 & 1) != 0)
      {
        if (!*(_DWORD *)(v21 + 52))
          goto LABEL_64;
      }
      else if (!(v22 >> 5))
      {
        goto LABEL_64;
      }
      WTF::SHA1::SHA1((WTF::SHA1 *)v72);
      v23 = *(_QWORD *)(a2 + 104);
      v24 = *(_DWORD *)(v23 + 4);
      if ((v24 & 1) != 0)
      {
        v25 = *(_QWORD *)(v23 + 40);
        v26 = *(_DWORD *)(v23 + 52);
        if (!v26)
        {
LABEL_60:
          WTF::SHA1::computeHash();
          WTF::base64EncodeToString();
          v45 = v6[1];
          v6[1] = v68;
          if (v45)
          {
            if (*(_DWORD *)v45 == 2)
              WTF::StringImpl::destroy(v45, v44);
            else
              *(_DWORD *)v45 -= 2;
          }
          WTF::SHA1::addUTF8Bytes();
          goto LABEL_64;
        }
      }
      else
      {
        v25 = v23 + 32;
        v26 = v24 >> 5;
        if (!(v24 >> 5))
          goto LABEL_60;
      }
      v27 = 0;
      while (1)
      {
        v28 = *(_QWORD *)(v25 + 16 * v27);
        v29 = *(WTF::StringImpl **)(v28 + 16);
        if (v29)
        {
          *(_DWORD *)v29 += 2;
          v34 = *(_QWORD *)(v28 + 24);
          if (v34)
          {
            v35 = *(_DWORD *)(v34 + 4);
            *(_DWORD *)v34 += 2;
            if (v35 < 0)
              goto LABEL_108;
          }
          else
          {
            v35 = 0;
          }
          v36 = *((_DWORD *)v29 + 1);
          v37 = __OFADD__(v35, 1);
          v38 = v35 + 1;
          v39 = v37;
          if (v36 < 0 || (v39 & 1) != 0 || (v40 = (v36 + v38), __OFADD__(v36, v38)))
          {
LABEL_108:
            v71 = 0;
            goto LABEL_109;
          }
          v41 = *((_DWORD *)v29 + 4);
          if (v34)
            v42 = (*((_DWORD *)v29 + 4) & 4) == 0;
          else
            v42 = 1;
          if (!v42)
            v41 = *(unsigned __int8 *)(v34 + 16);
          WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(v40, (v41 >> 2) & 1, (uint64_t)v29, 58, v34, &v71);
          if (!v71)
            goto LABEL_109;
          if (v34)
          {
            if (*(_DWORD *)v34 == 2)
              WTF::StringImpl::destroy((WTF::StringImpl *)v34, v43);
            else
              *(_DWORD *)v34 -= 2;
          }
          if (*(_DWORD *)v29 == 2)
            WTF::StringImpl::destroy(v29, v43);
          else
            *(_DWORD *)v29 -= 2;
        }
        else
        {
          v30 = *(WTF::StringImpl **)(v28 + 24);
          if (v30)
            *(_DWORD *)v30 += 2;
          v71 = v30;
        }
        WTF::SHA1::addUTF8Bytes();
        v32 = v71;
        v71 = 0;
        if (v32)
        {
          if (*(_DWORD *)v32 == 2)
            WTF::StringImpl::destroy(v32, v31);
          else
            *(_DWORD *)v32 -= 2;
        }
        WTF::SHA1::addUTF8Bytes();
        v33 = v27 + 1;
        v27 = (v27 + 1);
        if (v26 == v33)
          goto LABEL_60;
      }
    }
  }
LABEL_64:
  WTF::SHA1::computeHash();
  WTF::base64EncodeToString();
  v48 = v71;
  v71 = 0;
  result = (uint64_t)*v6;
  *v6 = v48;
  if (result)
  {
    v50 = *(_DWORD *)result - 2;
    if (*(_DWORD *)result == 2)
    {
      WTF::StringImpl::destroy((WTF::StringImpl *)result, v46);
      result = (uint64_t)v71;
      v71 = 0;
      if (!result)
        goto LABEL_67;
      v50 = *(_DWORD *)result - 2;
      if (*(_DWORD *)result == 2)
      {
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v67);
        goto LABEL_67;
      }
    }
    *(_DWORD *)result = v50;
  }
LABEL_67:
  if (!a3)
    return result;
  v51 = *a3;
  if (*a3
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a3, 8u), (v51 = *a3) != 0))
  {
    v52 = *(_DWORD *)(v51 - 8);
  }
  else
  {
    v52 = 0;
  }
  v53 = *((_DWORD *)*v6 + 4);
  if (v53 < 0x100)
    v54 = WTF::StringImpl::hashSlowCase(*v6);
  else
    v54 = v53 >> 8;
  v55 = 0;
  for (i = 1; ; ++i)
  {
    v57 = v54 & v52;
    v58 = (uint64_t *)(v51 + 16 * (v54 & v52));
    result = *v58;
    if (*v58 == -1)
    {
      v55 = (uint64_t *)(v51 + 16 * v57);
      goto LABEL_80;
    }
    if (!result)
      break;
    result = WTF::equal((WTF *)result, *v6, v47);
    if ((result & 1) != 0)
      return result;
LABEL_80:
    v54 = i + v57;
  }
  if (v55)
  {
    result = 0;
    *v55 = 0;
    v55[1] = 0;
    --*(_DWORD *)(*a3 - 16);
    v58 = v55;
  }
  v59 = *v6;
  if (*v6)
    *(_DWORD *)v59 += 2;
  *v58 = (uint64_t)v59;
  v58[1] = (uint64_t)v6;
  v60 = *a3;
  if (*a3)
    v61 = *(_DWORD *)(v60 - 12) + 1;
  else
    v61 = 1;
  *(_DWORD *)(v60 - 12) = v61;
  v62 = *a3;
  if (*a3)
    v63 = *(_DWORD *)(v62 - 12);
  else
    v63 = 0;
  v64 = (*(_DWORD *)(v62 - 16) + v63);
  v65 = *(unsigned int *)(v62 - 4);
  if (v65 > 0x400)
  {
    if (v65 <= 2 * v64)
    {
LABEL_94:
      v66 = (_DWORD)v65 << (6 * *(_DWORD *)(v62 - 12) >= (2 * v65));
      return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a3, v66);
    }
  }
  else if (3 * v65 <= 4 * v64)
  {
    if ((_DWORD)v65)
      goto LABEL_94;
    v66 = 8;
    return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a3, v66);
  }
  return result;
}

uint64_t WebCore::DOMPatchSupport::innerPatchNode(WebCore::DOMPatchSupport *this, uint64_t **a2, WebCore::DOMPatchSupport::Digest *a3, uint64_t a4)
{
  uint64_t result;
  const WTF::StringImpl *v9;
  uint64_t v10;
  const WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  char v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  const WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  const WTF::StringImpl *v18;
  char v19;
  WTF::StringImpl *v20;
  uint64_t *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  const WTF::StringImpl *v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t *i;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  _DWORD *v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _DWORD **v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  _DWORD *v50;
  _DWORD *v51;
  int v52;
  unsigned int v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55[2];
  char v56;
  WTF::StringImpl *v57;

  result = WTF::equal(*(WTF **)a3, *(const WTF::StringImpl **)a4, a3);
  if ((_DWORD)result)
    goto LABEL_2;
  v9 = (const WTF::StringImpl *)*((_QWORD *)a3 + 2);
  v10 = *(_QWORD *)(a4 + 16);
  if ((*((unsigned __int16 *)v9 + 14) ^ *(unsigned __int16 *)(v10 + 28)) > 0xFFF)
    goto LABEL_29;
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD))(*(_QWORD *)v10 + 104))(v55, *(_QWORD *)(a4 + 16));
  (*(void (**)(WTF::StringImpl **__return_ptr, const WTF::StringImpl *))(*(_QWORD *)v9 + 104))(&v57, v9);
  v13 = WTF::equal(v55[0], v57, v11);
  v14 = v57;
  v57 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = v55[0];
  v55[0] = 0;
  if (!v15)
    goto LABEL_10;
  if (*(_DWORD *)v15 != 2)
  {
    *(_DWORD *)v15 -= 2;
LABEL_10:
    if ((v13 & 1) != 0)
      goto LABEL_11;
LABEL_29:
    v28 = *a2;
    v29 = *((_QWORD *)v9 + 4);
    *(_DWORD *)(v10 + 24) += 2;
    v30 = *v28;
    v31 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v31 = off_1E33EDD80;
    *((_QWORD *)v31 + 1) = 0;
    *(_DWORD *)(v29 + 24) += 2;
    *((_QWORD *)v31 + 2) = v29;
    *((_QWORD *)v31 + 3) = v10;
    *((_DWORD *)v9 + 6) += 2;
    *((_QWORD *)v31 + 4) = v9;
    v55[0] = v31;
    WebCore::InspectorHistory::perform(v30, (char *)v55, (uint64_t)this);
    result = (uint64_t)v55[0];
    v55[0] = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    return result;
  }
  WTF::StringImpl::destroy(v15, v12);
  if ((v13 & 1) == 0)
    goto LABEL_29;
LABEL_11:
  (*(void (**)(WTF::StringImpl **__return_ptr, const WTF::StringImpl *))(*(_QWORD *)v9 + 112))(v55, v9);
  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(_QWORD *)v10 + 112))(&v57, v10);
  v19 = WTF::equal(v55[0], v57, v16);
  v20 = v57;
  v57 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v17);
    else
      *(_DWORD *)v20 -= 2;
  }
  result = (uint64_t)v55[0];
  v55[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v17);
      if ((v19 & 1) != 0)
        goto LABEL_34;
      goto LABEL_18;
    }
    *(_DWORD *)result -= 2;
  }
  if ((v19 & 1) != 0)
    goto LABEL_34;
LABEL_18:
  v21 = *a2;
  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(_QWORD *)v10 + 112))(&v54, v10);
  v22 = *v21;
  v23 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v23 = off_1E33EDDD0;
  *((_QWORD *)v23 + 1) = 0;
  *((_DWORD *)v9 + 6) += 2;
  *((_QWORD *)v23 + 2) = v9;
  v24 = v54;
  if (v54)
    *(_DWORD *)v54 += 2;
  *((_QWORD *)v23 + 3) = v24;
  *((_QWORD *)v23 + 4) = 0;
  v57 = v23;
  WebCore::InspectorHistory::perform(v22, (char *)&v57, (uint64_t)v55);
  v26 = v57;
  v57 = 0;
  if (v26)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v26 + 8))(v26);
  result = (uint64_t)v54;
  v54 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v25);
    else
      *(_DWORD *)result -= 2;
  }
  if (v56)
  {
LABEL_26:
    v27 = v55[1];
    *(_BYTE *)this = v55[0];
    *((_QWORD *)this + 1) = v27;
    *((_BYTE *)this + 16) = 1;
    return result;
  }
LABEL_34:
  if ((*((_WORD *)v9 + 14) & 8) == 0)
  {
LABEL_2:
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
    *((_QWORD *)this + 2) = 0;
    return result;
  }
  if ((*(_WORD *)(v10 + 28) & 8) != 0)
  {
    if ((WTF::equal(*((WTF **)a3 + 1), *(const WTF::StringImpl **)(a4 + 8), v18) & 1) == 0)
    {
      v33 = *((_QWORD *)v9 + 13);
      if (v33)
      {
        v34 = *(_DWORD *)(v33 + 4);
        if ((v34 & 1) != 0 ? *(_DWORD *)(v33 + 52) : v34 >> 5)
        {
          if ((v34 & 1) != 0)
            goto LABEL_46;
LABEL_44:
          if (v34 >= 0x20)
          {
            for (i = (uint64_t *)(v33 + 32); ; i = *(uint64_t **)(v33 + 40))
            {
              v37 = *i;
              v38 = **a2;
              v39 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x28);
              *(_QWORD *)v39 = off_1E33EDC30;
              *((_QWORD *)v39 + 1) = 0;
              *((_DWORD *)v9 + 6) += 2;
              *((_QWORD *)v39 + 2) = v9;
              v40 = *(_DWORD **)(v37 + 24);
              if (v40)
                *v40 += 2;
              *((_QWORD *)v39 + 3) = v40;
              *((_QWORD *)v39 + 4) = 0;
              v57 = v39;
              WebCore::InspectorHistory::perform(v38, (char *)&v57, (uint64_t)v55);
              result = (uint64_t)v57;
              v57 = 0;
              if (result)
                result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
              if (v56)
                break;
              v33 = *((_QWORD *)v9 + 13);
              v34 = *(_DWORD *)(v33 + 4);
              if ((v34 & 1) == 0)
                goto LABEL_44;
LABEL_46:
              if (!*(_DWORD *)(v33 + 52))
                goto LABEL_55;
            }
            goto LABEL_26;
          }
        }
      }
LABEL_55:
      v41 = *(_QWORD *)(v10 + 104);
      if (v41)
      {
        v42 = *(_DWORD *)(v41 + 4);
        if ((v42 & 1) != 0)
        {
          v53 = *(_DWORD *)(v41 + 52);
          if (v53)
          {
            v43 = *(_QWORD *)(v41 + 40);
LABEL_62:
            v44 = 0;
            do
            {
              v45 = (_QWORD *)(v43 + 16 * v44);
              v47 = *v45;
              v46 = (_DWORD **)(v45 + 1);
              v48 = **a2;
              v49 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x30);
              *(_QWORD *)v49 = off_1E33EDBE0;
              *((_QWORD *)v49 + 1) = 0;
              *((_DWORD *)v9 + 6) += 2;
              *((_QWORD *)v49 + 2) = v9;
              v50 = *(_DWORD **)(v47 + 24);
              if (v50)
                *v50 += 2;
              *((_QWORD *)v49 + 3) = v50;
              v51 = *v46;
              if (*v46)
                *v51 += 2;
              *((_QWORD *)v49 + 4) = v51;
              *((_QWORD *)v49 + 5) = 0;
              v57 = v49;
              WebCore::InspectorHistory::perform(v48, (char *)&v57, (uint64_t)v55);
              result = (uint64_t)v57;
              v57 = 0;
              if (result)
                result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
              if (v56)
                goto LABEL_26;
              v52 = v44 + 1;
              v44 = (v44 + 1);
            }
            while (v53 != v52);
          }
        }
        else if (v42 >= 0x20)
        {
          v43 = v41 + 32;
          v53 = v42 >> 5;
          goto LABEL_62;
        }
      }
    }
    WebCore::DOMPatchSupport::innerPatchChildren((uint64_t)this, a2, v9, (uint64_t *)a3 + 3, (uint64_t *)(a4 + 24));
    return WTF::HashMap<WTF::String,WebCore::DOMPatchSupport::Digest *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::DOMPatchSupport::Digest *>,WTF::HashTableTraits>::remove((uint64_t)(a2 + 2), (WTF::StringImpl **)a4, v32);
  }
  else
  {
    result = 96;
    __break(0xC471u);
  }
  return result;
}

WTF *WebCore::DOMPatchSupport::innerPatchChildren(uint64_t a1, uint64_t **a2, const WTF::StringImpl *a3, uint64_t *a4, uint64_t *a5)
{
  const WTF::StringImpl *v7;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  BOOL v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  WTF::StringImpl **v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  WTF::StringImpl **v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v53;
  unsigned int v54;
  int v55;
  int i;
  int v57;
  uint64_t v58;
  WTF *v59;
  unsigned int v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  _QWORD *v74;
  unint64_t v75;
  unint64_t v76;
  char *v77;
  int v78;
  unint64_t v79;
  uint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  int v88;
  char *v89;
  WTF *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  WTF::StringImpl *v95;
  WTF *v96;
  uint64_t v97;
  uint64_t v98;
  WTF::StringImpl *v99;
  WTF *v100;
  WTF *result;
  unint64_t v102;
  char *v103;
  int v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unsigned int v108;
  uint64_t v109;
  int v110;
  WTF::StringImpl **v111;
  WTF::StringImpl *v112;
  BOOL v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int v116;
  unsigned int v117;
  int v118;
  int j;
  int v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unsigned int v130;
  uint64_t v131;
  const WTF::StringImpl *v132;
  int v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  unint64_t v137;
  unsigned int v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t *v141;
  WTF *v142;
  int v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unsigned int v147;
  WTF *v148;
  int v149;
  __int128 v150;
  unint64_t k;
  uint64_t v152;
  BOOL v153;
  uint64_t v154;
  BOOL v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t v163;
  int v164;
  uint64_t v165;
  int v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  unsigned int v170;
  uint64_t v171;
  int v172;
  uint64_t v173;
  int v174;
  BOOL v175;
  uint64_t *v176;
  uint64_t v177;
  uint64_t v178;
  WTF *v179;
  WTF *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  int v184;
  uint64_t v185;
  BOOL v186;
  int v187;
  char v188;
  uint64_t v189;
  uint64_t v190;
  WTF *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unsigned int v195;
  unsigned int v196;
  WTF *v197;
  uint64_t v198;
  uint64_t v199;
  WTF *v200;
  const WTF::StringImpl *v201;
  char *__src;
  void *__srca;
  uint64_t *v205;
  unint64_t v206;
  _QWORD *v207;
  char *v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  WTF *v212;
  uint64_t v213;
  __int128 v214;
  char v215;
  unint64_t v216;
  __int128 v217;

  v7 = a3;
  v9 = *((unsigned int *)a5 + 3);
  if ((_DWORD)v9)
  {
    if (v9 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x195DA74A8);
    }
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)(16 * v9));
  }
  else
  {
    v10 = 0;
  }
  v11 = *((unsigned int *)a4 + 3);
  v200 = (WTF *)(16 * v11);
  v201 = v7;
  v195 = v11 >> 28;
  if (!(_DWORD)v11)
  {
    v12 = 0;
    if (!(_DWORD)v9)
      goto LABEL_9;
    goto LABEL_8;
  }
  if (v11 >> 28)
  {
    __break(0xC471u);
    JUMPOUT(0x195DA74B0);
  }
  v12 = (unint64_t *)WTF::fastMalloc(v200);
  bzero(v12, (size_t)v200);
  if ((_DWORD)v9)
LABEL_8:
    bzero(v10, 16 * v9);
LABEL_9:
  v196 = v9 >> 28;
  v197 = (WTF *)(16 * v9);
  LODWORD(v13) = *((_DWORD *)a4 + 3);
  v207 = v10;
  __src = (char *)v12;
  if ((_DWORD)v13 && *((_DWORD *)a5 + 3))
  {
    v14 = *a4;
    v15 = *a5;
    v16 = 0;
    v17 = v10 + 1;
    v18 = v12 + 1;
    if (v11 > v9)
    {
      do
      {
        if ((WTF::equal(**(WTF ***)(v14 + 8 * v16), **(const WTF::StringImpl ***)(v15 + 8 * v16), a3) & 1) == 0)
          break;
        v20 = *((unsigned int *)a4 + 3);
        if (v16 >= v20)
        {
LABEL_387:
          __break(0xC471u);
          JUMPOUT(0x195DA73B8);
        }
        if (v11 == v16)
        {
LABEL_388:
          __break(0xC471u);
          JUMPOUT(0x195DA73C0);
        }
        v14 = *a4;
        *(v18 - 1) = *(_QWORD *)(*a4 + 8 * v16);
        *v18 = v16;
        if (v16 >= *((unsigned int *)a5 + 3))
        {
LABEL_389:
          __break(0xC471u);
          JUMPOUT(0x195DA73C8);
        }
        if (v9 == v16)
        {
          __break(0xC471u);
          JUMPOUT(0x195DA7400);
        }
        v15 = *a5;
        *(v17 - 1) = *(_QWORD *)(*a5 + 8 * v16);
        *v17 = v16++;
        if (v16 >= v20)
          break;
        v17 += 2;
        v18 += 2;
      }
      while (v16 < *((unsigned int *)a5 + 3));
    }
    else
    {
      do
      {
        if (!WTF::equal(**(WTF ***)(v14 + 8 * v16), **(const WTF::StringImpl ***)(v15 + 8 * v16), a3))
          break;
        v19 = *((unsigned int *)a4 + 3);
        if (v16 >= v19)
          goto LABEL_387;
        if (v11 == v16)
          goto LABEL_388;
        v14 = *a4;
        *(v18 - 1) = *(_QWORD *)(*a4 + 8 * v16);
        *v18 = v16;
        if (v16 >= *((unsigned int *)a5 + 3))
          goto LABEL_389;
        v15 = *a5;
        *(v17 - 1) = *(_QWORD *)(*a5 + 8 * v16);
        *v17 = v16++;
        if (v16 >= v19)
          break;
        v17 += 2;
        v18 += 2;
      }
      while (v16 < *((unsigned int *)a5 + 3));
    }
    LODWORD(v13) = *((_DWORD *)a4 + 3);
    v12 = (unint64_t *)__src;
  }
  if ((_DWORD)v13)
  {
    v21 = 0;
    v13 = v13;
    v22 = -1;
    while (1)
    {
      v23 = *((unsigned int *)a5 + 3);
      if (v21 >= v23)
        break;
      v24 = __CFADD__(v13, v22);
      v25 = v13 + v22;
      if (!v24)
      {
        __break(0xC471u);
        JUMPOUT(0x195DA73D0);
      }
      v24 = __CFADD__(v22, v23);
      v26 = v22 + v23;
      if (!v24)
      {
        __break(0xC471u);
        JUMPOUT(0x195DA73D8);
      }
      if ((WTF::equal(**(WTF ***)(*a4 + 8 * v25), **(const WTF::StringImpl ***)(*a5 + 8 * v26), a3) & 1) != 0)
      {
        v13 = *((unsigned int *)a4 + 3);
        v27 = v22 + v13;
        if (!__CFADD__(v22, v13))
        {
          __break(0xC471u);
          JUMPOUT(0x195DA73E0);
        }
        if (v27 >= v11)
        {
          __break(0xC471u);
          JUMPOUT(0x195DA73E8);
        }
        v28 = *((unsigned int *)a5 + 3);
        v29 = v22 + v28;
        v30 = &v12[2 * v27];
        *v30 = *(_QWORD *)(*a4 + 8 * v27);
        v30[1] = v22 + v28;
        if (v22 + v28 >= v28)
        {
          __break(0xC471u);
          JUMPOUT(0x195DA73F0);
        }
        if (v29 >= v9)
        {
          __break(0xC471u);
          JUMPOUT(0x195DA73F8);
        }
        v31 = *(_QWORD *)(*a5 + 8 * v29);
        v32 = &v10[2 * v29];
        *v32 = v31;
        v32[1] = v27;
        ++v21;
        --v22;
        if (v21 < v13)
          continue;
      }
      goto LABEL_41;
    }
  }
  else
  {
LABEL_41:
    LODWORD(v23) = *((_DWORD *)a5 + 3);
  }
  v217 = 0uLL;
  v216 = 0;
  if ((_DWORD)v23)
  {
    v33 = 0;
    do
    {
      v34 = *(WTF::StringImpl ***)(*a5 + 8 * v33);
      v212 = 0;
      v213 = 0;
      WTF::HashMap<WTF::String,WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::add<WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v214, (uint64_t *)&v217 + 1, v34, (uint64_t *)&v212);
      v35 = v214;
      v36 = (_QWORD *)(v214 + 8);
      v37 = *(unsigned int *)(v214 + 20);
      if ((_DWORD)v37 == *(_DWORD *)(v214 + 16))
      {
        v38 = (_QWORD *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v36, v37 + 1, (unint64_t)&v216);
        v37 = *(unsigned int *)(v35 + 20);
        *(_QWORD *)(*(_QWORD *)(v35 + 8) + 8 * v37) = *v38;
      }
      else
      {
        *(_QWORD *)(*v36 + 8 * v37) = v216;
      }
      *(_DWORD *)(v35 + 20) = v37 + 1;
      if (v212)
        WTF::fastFree(v212, a2);
      v33 = v216 + 1;
      v216 = v33;
    }
    while (v33 < *((unsigned int *)a5 + 3));
  }
  v216 = 0;
  if (*((_DWORD *)a4 + 3))
  {
    v39 = 0;
    do
    {
      v40 = *(WTF::StringImpl ***)(*a4 + 8 * v39);
      v212 = 0;
      v213 = 0;
      WTF::HashMap<WTF::String,WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::add<WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v214, (uint64_t *)&v217, v40, (uint64_t *)&v212);
      v41 = v214;
      v42 = (_QWORD *)(v214 + 8);
      v43 = *(unsigned int *)(v214 + 20);
      if ((_DWORD)v43 == *(_DWORD *)(v214 + 16))
      {
        v44 = (_QWORD *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v42, v43 + 1, (unint64_t)&v216);
        v43 = *(unsigned int *)(v41 + 20);
        *(_QWORD *)(*(_QWORD *)(v41 + 8) + 8 * v43) = *v44;
      }
      else
      {
        *(_QWORD *)(*v42 + 8 * v43) = v216;
      }
      *(_DWORD *)(v41 + 20) = v43 + 1;
      if (v212)
        WTF::fastFree(v212, a2);
      v39 = v216 + 1;
      v216 = v39;
    }
    while (v39 < *((unsigned int *)a4 + 3));
  }
  v209 = v9;
  if (!*((_QWORD *)&v217 + 1))
  {
    v47 = 0;
    LODWORD(v45) = 0;
LABEL_69:
    v46 = *((_QWORD *)&v217 + 1) + 24 * v45;
    goto LABEL_70;
  }
  v45 = *(unsigned int *)(*((_QWORD *)&v217 + 1) - 4);
  v46 = *((_QWORD *)&v217 + 1) + 24 * v45;
  if (!*(_DWORD *)(*((_QWORD *)&v217 + 1) - 12))
  {
    v47 = *((_QWORD *)&v217 + 1) + 24 * v45;
    goto LABEL_69;
  }
  v47 = *((_QWORD *)&v217 + 1);
  if ((_DWORD)v45)
  {
    v48 = 24 * v45;
    v47 = *((_QWORD *)&v217 + 1);
    while ((unint64_t)(*(_QWORD *)v47 + 1) <= 1)
    {
      v47 += 24;
      v48 -= 24;
      if (!v48)
      {
        v47 = v46;
        break;
      }
    }
  }
LABEL_70:
  v205 = a5;
  v198 = a1;
  v199 = *((_QWORD *)&v217 + 1);
  if (*((_QWORD *)&v217 + 1))
    v49 = *((_QWORD *)&v217 + 1) + 24 * *(unsigned int *)(*((_QWORD *)&v217 + 1) - 4);
  else
    v49 = 0;
  v50 = (uint64_t)a2;
  v206 = v11;
  if (v49 != v47)
  {
    v51 = v217;
    do
    {
      if (*(_DWORD *)(v47 + 20) == 1 && v51 != 0)
      {
        v53 = *(_DWORD *)(v51 - 8);
        v54 = *(_DWORD *)(*(_QWORD *)v47 + 16);
        if (v54 < 0x100)
          v55 = WTF::StringImpl::hashSlowCase(*(WTF::StringImpl **)v47);
        else
          v55 = v54 >> 8;
        for (i = 0; ; v55 = i + v57)
        {
          v57 = v55 & v53;
          v58 = v51 + 24 * (v55 & v53);
          v59 = *(WTF **)v58;
          if (*(_QWORD *)v58 != -1)
          {
            if (!v59)
            {
              v60 = *(_DWORD *)(v51 - 4);
              v58 = v51 + 24 * v60;
              goto LABEL_89;
            }
            if ((WTF::equal(v59, *(const WTF::StringImpl **)v47, a3) & 1) != 0)
              break;
          }
          ++i;
        }
        v60 = *(_DWORD *)(v51 - 4);
LABEL_89:
        v50 = (uint64_t)a2;
        v11 = v206;
        if (v58 != v51 + 24 * v60 && *(_DWORD *)(v58 + 20) == 1)
        {
          if (!*(_DWORD *)(v47 + 20))
          {
            __break(0xC471u);
            JUMPOUT(0x195DA7408);
          }
          v61 = *(unint64_t **)(v47 + 8);
          v62 = *v61;
          if (*v61 >= *((unsigned int *)a5 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x195DA7420);
          }
          if (v62 >= v209)
          {
            __break(0xC471u);
            JUMPOUT(0x195DA7428);
          }
          v63 = *(unint64_t **)(v58 + 8);
          v64 = *v63;
          v65 = *(_QWORD *)(*a5 + 8 * v62);
          v66 = &v207[2 * v62];
          *v66 = v65;
          v66[1] = v64;
          v67 = *v63;
          if (*v63 >= *((unsigned int *)a4 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x195DA7430);
          }
          if (v67 >= v206)
          {
            __break(0xC471u);
            JUMPOUT(0x195DA7438);
          }
          v68 = *v61;
          v69 = *(_QWORD *)(*a4 + 8 * v67);
          v70 = &__src[16 * v67];
          *(_QWORD *)v70 = v69;
          *((_QWORD *)v70 + 1) = v68;
        }
      }
      v71 = v47 + 24;
      v47 = v46;
      if (v71 != v46)
      {
        v47 = v71;
        while ((unint64_t)(*(_QWORD *)v47 + 1) <= 1)
        {
          v47 += 24;
          if (v47 == v46)
          {
            v47 = v46;
            break;
          }
        }
      }
    }
    while (v47 != v49);
  }
  v72 = *((unsigned int *)a5 + 3);
  if (v72 < 2)
  {
    v79 = v72 - 1;
  }
  else
  {
    v73 = v209;
    v74 = v207 + 2;
    v75 = 1;
    while (1)
    {
      if (v75 - v209 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x195DA7390);
      }
      if (*(v74 - 2))
      {
        if (v75 >= v73)
        {
          __break(0xC471u);
          JUMPOUT(0x195DA73A0);
        }
        if (!*v74)
        {
          v76 = *(v74 - 1) + 1;
          if (v76 < v11)
          {
            v77 = &__src[16 * v76];
            if (!*(_QWORD *)v77)
            {
              if (v75 >= v72)
              {
                __break(0xC471u);
                JUMPOUT(0x195DA7460);
              }
              if (v76 >= *((unsigned int *)a4 + 3))
              {
                __break(0xC471u);
                JUMPOUT(0x195DA7468);
              }
              v78 = WTF::equal(**(WTF ***)(*a5 + 8 * v75), **(const WTF::StringImpl ***)(*a4 + 8 * v76), a3);
              v72 = *((unsigned int *)a5 + 3);
              if (v78)
              {
                if (v75 >= v72)
                {
                  __break(0xC471u);
                  JUMPOUT(0x195DA7470);
                }
                *v74 = *(_QWORD *)(*a5 + 8 * v75);
                v74[1] = v76;
                if (v76 >= *((unsigned int *)a4 + 3))
                {
                  __break(0xC471u);
                  JUMPOUT(0x195DA7478);
                }
                *(_QWORD *)v77 = *(_QWORD *)(*a4 + 8 * v76);
                *(_QWORD *)&__src[16 * v76 + 8] = v75;
              }
            }
          }
        }
      }
      v79 = v72 - 1;
      if (!v72)
        break;
      v74 += 2;
      v24 = v75++ >= v79;
      v73 = v209;
      if (v24)
        goto LABEL_123;
    }
  }
  v73 = v209;
  if (v72)
  {
LABEL_123:
    if (v79)
    {
      v80 = &v207[2 * v79 + 1];
      v81 = v72;
      do
      {
        if (v79 >= v73)
        {
          __break(0xC471u);
          JUMPOUT(0x195DA7398);
        }
        v82 = v79;
        if (*(v80 - 1))
        {
          v83 = v81 - 2;
          if (v81 - 2 >= v73)
          {
            __break(0xC471u);
            JUMPOUT(0x195DA73A8);
          }
          v84 = &v207[2 * v83];
          if (!*v84)
          {
            v85 = *v80;
            if (*v80)
            {
              v86 = v85 - 1;
              if (v85 - 1 >= v11)
              {
                __break(0xC471u);
                JUMPOUT(0x195DA7440);
              }
              v87 = &__src[16 * v86];
              if (!*(_QWORD *)v87)
              {
                if (v83 >= v72)
                {
                  __break(0xC471u);
                  JUMPOUT(0x195DA7480);
                }
                if (v86 >= *((unsigned int *)a4 + 3))
                {
                  __break(0xC471u);
                  JUMPOUT(0x195DA7488);
                }
                v88 = WTF::equal(**(WTF ***)(*a5 + 8 * v83), **(const WTF::StringImpl ***)(*a4 + 8 * v86), a3);
                v72 = *((unsigned int *)a5 + 3);
                if (v88)
                {
                  if (v83 >= v72)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x195DA7490);
                  }
                  *v84 = *(_QWORD *)(*a5 + 8 * v83);
                  v207[2 * v83 + 1] = v86;
                  if (v86 >= *((unsigned int *)a4 + 3))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x195DA7498);
                  }
                  *(_QWORD *)v87 = *(_QWORD *)(*a4 + 8 * v86);
                  *(_QWORD *)&__src[16 * v86 + 8] = v83;
                }
              }
            }
          }
          v73 = v209;
        }
        v79 = v82 - 1;
        if (v82 == 1)
          break;
        v80 -= 2;
        v81 = v82;
      }
      while (v72);
    }
  }
  if ((_DWORD)v11)
  {
    if (v195)
    {
      __break(0xC471u);
      JUMPOUT(0x195DA74B8);
    }
    v89 = (char *)WTF::fastMalloc(v200);
    memcpy(v89, __src, (size_t)v200);
  }
  else
  {
    v89 = 0;
  }
  v90 = (WTF *)v207;
  if ((_DWORD)v73)
  {
    if (v196)
    {
      __break(0xC471u);
LABEL_418:
      JUMPOUT(0x195DA7380);
    }
    v91 = (char *)WTF::fastMalloc(v197);
    memcpy(v91, v207, (size_t)v197);
  }
  else
  {
    v91 = 0;
  }
  v92 = v217;
  if ((_QWORD)v217)
  {
    v93 = *(unsigned int *)(v217 - 4);
    if ((_DWORD)v93)
    {
      v94 = v217;
      do
      {
        v95 = *(WTF::StringImpl **)v94;
        if (*(_QWORD *)v94 != -1)
        {
          v96 = *(WTF **)(v94 + 8);
          if (v96)
          {
            *(_QWORD *)(v94 + 8) = 0;
            *(_DWORD *)(v94 + 16) = 0;
            WTF::fastFree(v96, a2);
            v95 = *(WTF::StringImpl **)v94;
          }
          *(_QWORD *)v94 = 0;
          if (v95)
          {
            if (*(_DWORD *)v95 == 2)
              WTF::StringImpl::destroy(v95, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v95 -= 2;
          }
        }
        v94 += 24;
        --v93;
      }
      while (v93);
    }
    WTF::fastFree((WTF *)(v92 - 16), a2);
    v90 = (WTF *)v207;
  }
  if (v199)
  {
    v97 = *(unsigned int *)(v199 - 4);
    if ((_DWORD)v97)
    {
      v98 = v199;
      do
      {
        v99 = *(WTF::StringImpl **)v98;
        if (*(_QWORD *)v98 != -1)
        {
          v100 = *(WTF **)(v98 + 8);
          if (v100)
          {
            *(_QWORD *)(v98 + 8) = 0;
            *(_DWORD *)(v98 + 16) = 0;
            WTF::fastFree(v100, a2);
            v99 = *(WTF::StringImpl **)v98;
          }
          *(_QWORD *)v98 = 0;
          if (v99)
          {
            if (*(_DWORD *)v99 == 2)
              WTF::StringImpl::destroy(v99, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v99 -= 2;
          }
        }
        v98 += 24;
        --v97;
      }
      while (v97);
    }
    WTF::fastFree((WTF *)(v199 - 16), a2);
  }
  result = (WTF *)__src;
  if (__src)
    result = (WTF *)WTF::fastFree((WTF *)__src, a2);
  if (v90)
    result = (WTF *)WTF::fastFree(v90, a2);
  v217 = 0uLL;
  v216 = 0;
  v211 = 0;
  v208 = v91;
  if (*((_DWORD *)a4 + 3))
  {
    v102 = 0;
    __srca = (void *)(v11 - 1);
    while (1)
    {
      if (v102 == v11)
      {
        __break(0xC471u);
        JUMPOUT(0x195DA7388);
      }
      v103 = &v89[16 * v102];
      if (*(_QWORD *)v103)
      {
        a3 = (const WTF::StringImpl *)(v103 + 8);
        if (!v211)
          goto LABEL_199;
        v104 = *(_DWORD *)(v211 - 8);
        v105 = *(_QWORD *)a3 + ~(*(_QWORD *)a3 << 32);
        v106 = (v105 ^ (v105 >> 22)) + ~((v105 ^ (v105 >> 22)) << 13);
        v107 = (9 * (v106 ^ (v106 >> 8))) ^ ((9 * (v106 ^ (v106 >> 8))) >> 15);
        v108 = v104 & (((v107 + ~(v107 << 27)) >> 31) ^ (v107 + ~((_DWORD)v107 << 27)));
        v109 = *(_QWORD *)(v211 + 8 * v108);
        if (v109 != *(_QWORD *)a3)
        {
          v110 = 1;
          while (v109 != -1)
          {
            v108 = (v108 + v110) & v104;
            v109 = *(_QWORD *)(v211 + 8 * v108);
            ++v110;
            if (v109 == *(_QWORD *)a3)
              goto LABEL_189;
          }
LABEL_199:
          result = (WTF *)WTF::HashTable<unsigned long,unsigned long,WTF::IdentityExtractor,WTF::IntHash<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>>::add((uint64_t *)&v214, &v211, (uint64_t *)a3);
          goto LABEL_251;
        }
LABEL_189:
        *(_QWORD *)v103 = 0;
        *((_QWORD *)v103 + 1) = 0;
      }
      v111 = *(WTF::StringImpl ***)(*a4 + 8 * v102);
      v112 = v111[2];
      if (v112)
        v113 = (*((_WORD *)v112 + 14) & 0x10) == 0;
      else
        v113 = 1;
      if (!v113)
      {
        v114 = *(_QWORD *)(*((_QWORD *)v112 + 12) + 24);
        if (v114 == *(_QWORD *)(WebCore::HTMLNames::headTag + 24))
        {
          *((_QWORD *)&v217 + 1) = *(_QWORD *)(*a4 + 8 * v102);
          goto LABEL_251;
        }
        if (v114 == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
        {
          *(_QWORD *)&v217 = *(_QWORD *)(*a4 + 8 * v102);
          goto LABEL_251;
        }
      }
      v115 = *(_QWORD *)(v50 + 16);
      if (v115)
        break;
LABEL_208:
      if (v102 && !*(_QWORD *)&v89[16 * v102 - 16])
        goto LABEL_215;
      if ((void *)v102 != __srca)
      {
        if (v102 + 1 >= v206)
        {
          __break(0xC471u);
          JUMPOUT(0x195DA7448);
        }
        if (!*(_QWORD *)&v89[16 * v102 + 16])
          goto LABEL_215;
      }
      if (v102)
        v121 = *(_QWORD *)&v89[16 * v102 - 8] + 1;
      else
        v121 = 0;
      v91 = v208;
      v73 = v209;
      v11 = v206;
      if ((void *)v102 == __srca)
      {
        v122 = v121 + 1;
      }
      else
      {
        if (v102 + 1 >= v206)
        {
          __break(0xC471u);
          JUMPOUT(0x195DA7450);
        }
        v122 = *(_QWORD *)&v89[16 * v102 + 24];
      }
      if (v122 - v121 == 1 && v121 < *((unsigned int *)a5 + 3))
      {
        if (v102 >= *((unsigned int *)a4 + 3))
        {
          __break(0xC471u);
          JUMPOUT(0x195DA74A0);
        }
        v123 = *(_QWORD *)(*a5 + 8 * v121);
        v124 = *(_QWORD *)(*a4 + 8 * v102);
        v125 = v216;
        if (v216
          || (result = (WTF *)WTF::HashTable<void const*,WTF::KeyValuePair<void const*,JSC::Bindings::ObjcInstance *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void const*,JSC::Bindings::ObjcInstance *>>,WTF::DefaultHash<void const*>,WTF::HashMap<void const*,JSC::Bindings::ObjcInstance *,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<JSC::Bindings::ObjcInstance *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void const*>>::rehash((uint64_t *)&v216, 8u, 0), (v125 = v216) != 0))
        {
          v126 = *(_DWORD *)(v125 - 8);
        }
        else
        {
          v126 = 0;
        }
        v127 = (~(v123 << 32) + v123) ^ ((unint64_t)(~(v123 << 32) + v123) >> 22);
        v128 = 9 * ((v127 + ~(v127 << 13)) ^ ((v127 + ~(v127 << 13)) >> 8));
        v129 = (v128 ^ (v128 >> 15)) + ~((v128 ^ (v128 >> 15)) << 27);
        v130 = v126 & ((v129 >> 31) ^ v129);
        a3 = (const WTF::StringImpl *)(v125 + 16 * v130);
        v131 = *(_QWORD *)a3;
        if (*(_QWORD *)a3)
        {
          v132 = 0;
          v133 = 1;
          do
          {
            if (v131 == v123)
            {
              *((_QWORD *)a3 + 1) = v124;
              v91 = v208;
              goto LABEL_251;
            }
            if (v131 == -1)
              v132 = a3;
            v130 = (v130 + v133) & v126;
            a3 = (const WTF::StringImpl *)(v125 + 16 * v130);
            v131 = *(_QWORD *)a3;
            ++v133;
          }
          while (*(_QWORD *)a3);
          if (v132)
          {
            *(_QWORD *)v132 = 0;
            *((_QWORD *)v132 + 1) = 0;
            --*(_DWORD *)(v125 - 16);
            a3 = v132;
          }
        }
        *(_QWORD *)a3 = v123;
        *((_QWORD *)a3 + 1) = v124;
        v134 = v216;
        if (v216)
          v135 = *(_DWORD *)(v216 - 12) + 1;
        else
          v135 = 1;
        v91 = v208;
        *(_DWORD *)(v216 - 12) = v135;
        v136 = (*(_DWORD *)(v134 - 16) + v135);
        v137 = *(unsigned int *)(v134 - 4);
        if (v137 > 0x400)
        {
          if (v137 > 2 * v136)
            goto LABEL_251;
LABEL_247:
          v138 = (_DWORD)v137 << (6 * v135 >= (2 * v137));
LABEL_250:
          result = (WTF *)WTF::HashTable<void const*,WTF::KeyValuePair<void const*,JSC::Bindings::ObjcInstance *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void const*,JSC::Bindings::ObjcInstance *>>,WTF::DefaultHash<void const*>,WTF::HashMap<void const*,JSC::Bindings::ObjcInstance *,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<JSC::Bindings::ObjcInstance *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void const*>>::rehash((uint64_t *)&v216, v138, a3);
          goto LABEL_251;
        }
        if (3 * v137 <= 4 * v136)
        {
          if ((_DWORD)v137)
            goto LABEL_247;
          v138 = 8;
          goto LABEL_250;
        }
      }
      else
      {
        if (v102 >= *((unsigned int *)a4 + 3))
        {
          __break(0xC471u);
          JUMPOUT(0x195DA7458);
        }
        result = (WTF *)WebCore::DOMPatchSupport::removeChildAndMoveToNew((WebCore::DOMPatchSupport *)&v214, (uint64_t **)v50, *(WTF::StringImpl ***)(*a4 + 8 * v102));
        if (v215)
        {
LABEL_379:
          v193 = *((_QWORD *)&v214 + 1);
          *(_BYTE *)v198 = v214;
          *(_QWORD *)(v198 + 8) = v193;
          *(_BYTE *)(v198 + 16) = 1;
          goto LABEL_370;
        }
      }
LABEL_251:
      if (++v102 >= *((unsigned int *)a4 + 3))
        goto LABEL_255;
    }
    v116 = *(_DWORD *)(v115 - 8);
    v117 = *((_DWORD *)*v111 + 4);
    if (v117 < 0x100)
      v118 = WTF::StringImpl::hashSlowCase(*v111);
    else
      v118 = v117 >> 8;
    for (j = 0; ; v118 = j + v120)
    {
      v120 = v118 & v116;
      result = *(WTF **)(v115 + 16 * (v118 & v116));
      if (result != (WTF *)-1)
      {
        if (!result)
          goto LABEL_208;
        if ((WTF::equal(result, *v111, a3) & 1) != 0)
          break;
      }
      ++j;
    }
LABEL_215:
    v73 = v209;
    if (v102 >= *((unsigned int *)a4 + 3))
    {
      __break(0xC471u);
      JUMPOUT(0x195DA7418);
    }
    result = (WTF *)WebCore::DOMPatchSupport::removeChildAndMoveToNew((WebCore::DOMPatchSupport *)&v214, (uint64_t **)v50, *(WTF::StringImpl ***)(*a4 + 8 * v102));
    v91 = v208;
    if (v215)
      goto LABEL_379;
    v11 = v206;
    goto LABEL_251;
  }
LABEL_255:
  v210 = 0;
  v139 = *((unsigned int *)a5 + 3);
  if ((_DWORD)v139)
  {
    v140 = 0;
    while (1)
    {
      if (v140 == v73)
      {
        __break(0xC471u);
        goto LABEL_418;
      }
      v141 = (uint64_t *)&v91[16 * v140];
      if (*v141)
        break;
LABEL_267:
      if (++v140 >= v139)
        goto LABEL_270;
    }
    v142 = (WTF *)v141[1];
    v212 = v142;
    if (v210)
    {
      v143 = *(_DWORD *)(v210 - 8);
      v144 = ((unint64_t)v142 + ~((_QWORD)v142 << 32)) ^ (((unint64_t)v142 + ~((_QWORD)v142 << 32)) >> 22);
      v145 = 9 * ((v144 + ~(v144 << 13)) ^ ((v144 + ~(v144 << 13)) >> 8));
      v146 = (v145 ^ (v145 >> 15)) + ~((v145 ^ (v145 >> 15)) << 27);
      v147 = v143 & ((v146 >> 31) ^ v146);
      v148 = *(WTF **)(v210 + 8 * v147);
      if (v148 == v142)
      {
LABEL_264:
        *v141 = 0;
        v141[1] = 0;
LABEL_266:
        v139 = *((unsigned int *)a5 + 3);
        goto LABEL_267;
      }
      v149 = 1;
      while (v148 != (WTF *)-1)
      {
        v147 = (v147 + v149) & v143;
        v148 = *(WTF **)(v210 + 8 * v147);
        ++v149;
        if (v148 == v142)
          goto LABEL_264;
      }
    }
    WTF::HashTable<unsigned long,unsigned long,WTF::IdentityExtractor,WTF::IntHash<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>>::add((uint64_t *)&v214, &v210, (uint64_t *)&v212);
    result = (WTF *)WebCore::DOMPatchSupport::markNodeAsUsed(v50, *v141);
    goto LABEL_266;
  }
  v139 = 0;
LABEL_270:
  v150 = v217;
  if (v139 && v217 != 0)
  {
    for (k = 0; k < v139; ++k)
    {
      if (*((_QWORD *)&v150 + 1)
        && ((v152 = *(_QWORD *)(*(_QWORD *)(*a5 + 8 * k) + 16)) != 0
          ? (v153 = (*(_WORD *)(v152 + 28) & 0x10) == 0)
          : (v153 = 1),
            !v153 && *(_QWORD *)(*(_QWORD *)(v152 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::headTag + 24)))
      {
        v212 = *(WTF **)(*a5 + 8 * k);
        result = (WTF *)WTF::HashMap<WebCore::DOMPatchSupport::Digest *,WebCore::DOMPatchSupport::Digest *,WTF::DefaultHash<WebCore::DOMPatchSupport::Digest *>,WTF::HashTraits<WebCore::DOMPatchSupport::Digest *>,WTF::HashTraits<WebCore::DOMPatchSupport::Digest *>,WTF::HashTableTraits>::inlineSet<WebCore::DOMPatchSupport::Digest *,WebCore::DOMPatchSupport::Digest *&>(&v214, (uint64_t *)&v216, (uint64_t *)&v212, (_QWORD *)&v217 + 1);
        v139 = *((unsigned int *)a5 + 3);
        if ((_QWORD)v150)
        {
LABEL_280:
          if (k >= v139)
          {
            __break(0xC471u);
            JUMPOUT(0x195DA73B0);
          }
          v154 = *(_QWORD *)(*(_QWORD *)(*a5 + 8 * k) + 16);
          if (v154)
            v155 = (*(_WORD *)(v154 + 28) & 0x10) == 0;
          else
            v155 = 1;
          if (!v155 && *(_QWORD *)(*(_QWORD *)(v154 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
          {
            v212 = *(WTF **)(*a5 + 8 * k);
            result = (WTF *)WTF::HashMap<WebCore::DOMPatchSupport::Digest *,WebCore::DOMPatchSupport::Digest *,WTF::DefaultHash<WebCore::DOMPatchSupport::Digest *>,WTF::HashTraits<WebCore::DOMPatchSupport::Digest *>,WTF::HashTraits<WebCore::DOMPatchSupport::Digest *>,WTF::HashTableTraits>::inlineSet<WebCore::DOMPatchSupport::Digest *,WebCore::DOMPatchSupport::Digest *&>(&v214, (uint64_t *)&v216, (uint64_t *)&v212, &v217);
            v139 = *((unsigned int *)a5 + 3);
          }
        }
      }
      else if ((_QWORD)v150)
      {
        goto LABEL_280;
      }
    }
  }
  v156 = v216;
  if (v216)
  {
    v157 = *(unsigned int *)(v216 - 4);
    v158 = v216 + 16 * v157;
    if (*(_DWORD *)(v216 - 12))
    {
      v159 = v216;
      if ((_DWORD)v157)
      {
        v160 = 16 * v157;
        v159 = v216;
        while ((unint64_t)(*(_QWORD *)v159 + 1) <= 1)
        {
          v159 += 16;
          v160 -= 16;
          if (!v160)
          {
            v159 = v158;
            goto LABEL_296;
          }
        }
      }
      goto LABEL_296;
    }
    v159 = v216 + 16 * v157;
  }
  else
  {
    v159 = 0;
    v157 = 0;
  }
  v158 = v216 + 16 * v157;
  if (!v216)
  {
    v161 = 0;
    goto LABEL_301;
  }
LABEL_296:
  v161 = v216 + 16 * *(unsigned int *)(v216 - 4);
LABEL_301:
  while (v159 != v161)
  {
    result = (WTF *)WebCore::DOMPatchSupport::innerPatchNode((WebCore::DOMPatchSupport *)&v214, (WebCore::DOMPatchSupport::Digest *)v50, *(WebCore::DOMPatchSupport::Digest **)(v159 + 8));
    if (v215)
    {
LABEL_367:
      v192 = *((_QWORD *)&v214 + 1);
      *(_BYTE *)v198 = v214;
      *(_QWORD *)(v198 + 8) = v192;
      *(_BYTE *)(v198 + 16) = 1;
      goto LABEL_368;
    }
    v162 = v159 + 16;
    v159 = v158;
    if (v162 != v158)
    {
      v159 = v162;
      while ((unint64_t)(*(_QWORD *)v159 + 1) <= 1)
      {
        v159 += 16;
        if (v159 == v158)
        {
          v159 = v158;
          break;
        }
      }
    }
  }
  if ((_DWORD)v73)
  {
    v163 = 0;
    v164 = 1;
    do
    {
      if (!*(_QWORD *)&v91[16 * v163])
      {
        if (v163 >= *((unsigned int *)v205 + 3))
        {
          __break(0xC471u);
          JUMPOUT(0x195DA7410);
        }
        v165 = *(_QWORD *)(*v205 + 8 * v163);
        if (v156)
        {
          v166 = *(_DWORD *)(v156 - 8);
          v167 = (~(v165 << 32) + v165) ^ ((unint64_t)(~(v165 << 32) + v165) >> 22);
          v168 = 9 * ((v167 + ~(v167 << 13)) ^ ((v167 + ~(v167 << 13)) >> 8));
          v169 = (v168 ^ (v168 >> 15)) + ~((v168 ^ (v168 >> 15)) << 27);
          v170 = v166 & ((v169 >> 31) ^ v169);
          v171 = *(_QWORD *)(v156 + 16 * v170);
          if (v171 == v165)
            goto LABEL_332;
          v172 = 1;
          while (v171)
          {
            v170 = (v170 + v172) & v166;
            v171 = *(_QWORD *)(v156 + 16 * v170);
            ++v172;
            if (v171 == v165)
              goto LABEL_332;
          }
        }
        v173 = *((_QWORD *)v201 + 10);
        if ((_DWORD)v163 && v173)
        {
          v174 = v164;
          do
          {
            v173 = *(_QWORD *)(v173 + 56);
            if (v173)
              v175 = v174 == 0;
            else
              v175 = 1;
            ++v174;
          }
          while (!v175);
        }
        v176 = *(uint64_t **)v50;
        v177 = *(_QWORD *)(v165 + 16);
        *(_DWORD *)(v177 + 24) += 2;
        v178 = *v176;
        v179 = (WTF *)WTF::fastMalloc((WTF *)0x30);
        *(_QWORD *)v179 = off_1E33EDB40;
        *((_QWORD *)v179 + 1) = 0;
        *((_DWORD *)v201 + 6) += 2;
        *((_QWORD *)v179 + 2) = v201;
        *((_QWORD *)v179 + 3) = v177;
        if (v173)
          *(_DWORD *)(v173 + 24) += 2;
        *((_QWORD *)v179 + 4) = v173;
        *((_QWORD *)v179 + 5) = 0;
        v212 = v179;
        WebCore::InspectorHistory::perform(v178, (char *)&v212, (uint64_t)&v214);
        v180 = v212;
        v212 = 0;
        if (v180)
          (*(void (**)(WTF *))(*(_QWORD *)v180 + 8))(v180);
        result = (WTF *)WebCore::DOMPatchSupport::markNodeAsUsed(v50, v165);
        v91 = v208;
        v73 = v209;
        if (v215)
          goto LABEL_367;
      }
LABEL_332:
      ++v163;
      --v164;
    }
    while (v163 != v73);
  }
  if (!(_DWORD)v11)
  {
LABEL_366:
    *(_QWORD *)v198 = 0;
    *(_QWORD *)(v198 + 8) = 0;
    *(_QWORD *)(v198 + 16) = 0;
    goto LABEL_368;
  }
  v181 = 0;
  while (1)
  {
    v182 = *(_QWORD *)&v89[16 * v181];
    if (!v182)
      goto LABEL_362;
    v183 = *(_QWORD *)(v182 + 16);
    if (v183)
      *(_DWORD *)(v183 + 24) += 2;
    v184 = *(_DWORD *)&v89[16 * v181 + 8];
    v185 = *((_QWORD *)v201 + 10);
    if (v184)
      v186 = v185 == 0;
    else
      v186 = 1;
    if (!v186)
    {
      v187 = v184 - 1;
      do
      {
        v185 = *(_QWORD *)(v185 + 56);
        v24 = v187-- != 0;
        v188 = v24;
      }
      while (v185 && (v188 & 1) != 0);
    }
    if (v183 == v185)
    {
      if (v183)
        goto LABEL_360;
      goto LABEL_362;
    }
    if (v183)
    {
      if ((*(_WORD *)(v183 + 28) & 0x10) != 0)
      {
        v189 = *(_QWORD *)(*(_QWORD *)(v183 + 96) + 24);
        if (v189 == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24)
          || v189 == *(_QWORD *)(WebCore::HTMLNames::headTag + 24))
        {
LABEL_360:
          if (*(_DWORD *)(v183 + 24) == 2)
          {
            if ((*(_WORD *)(v183 + 30) & 0x400) == 0)
              result = (WTF *)WebCore::Node::removedLastRef((WebCore::Node *)v183, a2);
          }
          else
          {
            *(_DWORD *)(v183 + 24) -= 2;
          }
          goto LABEL_362;
        }
      }
    }
    v190 = **a2;
    v191 = (WTF *)WTF::fastMalloc((WTF *)0x30);
    *(_QWORD *)v191 = off_1E33EDB40;
    *((_QWORD *)v191 + 1) = 0;
    *((_DWORD *)v201 + 6) += 2;
    *((_QWORD *)v191 + 2) = v201;
    *((_QWORD *)v191 + 3) = v183;
    if (v185)
      *(_DWORD *)(v185 + 24) += 2;
    *((_QWORD *)v191 + 4) = v185;
    *((_QWORD *)v191 + 5) = 0;
    v212 = v191;
    WebCore::InspectorHistory::perform(v190, (char *)&v212, (uint64_t)&v214);
    result = v212;
    v212 = 0;
    if (result)
      result = (WTF *)(*(uint64_t (**)(WTF *))(*(_QWORD *)result + 8))(result);
    if (v215)
      break;
LABEL_362:
    if (++v181 == v11)
      goto LABEL_366;
  }
  v194 = *((_QWORD *)&v214 + 1);
  *(_BYTE *)v198 = v214;
  *(_QWORD *)(v198 + 8) = v194;
  *(_BYTE *)(v198 + 16) = 1;
LABEL_368:
  if (v210)
    result = (WTF *)WTF::fastFree((WTF *)(v210 - 16), a2);
LABEL_370:
  if (v211)
    result = (WTF *)WTF::fastFree((WTF *)(v211 - 16), a2);
  if (v216)
    result = (WTF *)WTF::fastFree((WTF *)(v216 - 16), a2);
  if (v91)
    result = (WTF *)WTF::fastFree((WTF *)v91, a2);
  if (v89)
    return (WTF *)WTF::fastFree((WTF *)v89, a2);
  return result;
}

uint64_t WTF::HashMap<WTF::String,WebCore::DOMPatchSupport::Digest *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::DOMPatchSupport::Digest *>,WTF::HashTableTraits>::remove(uint64_t result, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;

  v3 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v5 = (uint64_t *)result;
    v6 = *(_DWORD *)(v3 - 8);
    v7 = *((_DWORD *)*a2 + 4);
    if (v7 < 0x100)
      v8 = WTF::StringImpl::hashSlowCase(*a2);
    else
      v8 = v7 >> 8;
    for (i = 0; ; v8 = i + v10)
    {
      v10 = v8 & v6;
      result = *(_QWORD *)(v3 + 16 * v10);
      if (result != -1)
      {
        if (!result)
        {
          v11 = *v5;
          if (!*v5)
            return result;
          v12 = *(unsigned int *)(v11 - 4);
          v13 = (uint64_t *)(v11 + 16 * v12);
          goto LABEL_14;
        }
        result = WTF::equal((WTF *)result, *a2, a3);
        if ((result & 1) != 0)
          break;
      }
      ++i;
    }
    v13 = (uint64_t *)(v3 + 16 * v10);
    v11 = *v5;
    if (!*v5)
      goto LABEL_15;
    v12 = *(unsigned int *)(v11 - 4);
LABEL_14:
    v11 += 16 * v12;
    if ((uint64_t *)v11 == v13)
      return result;
LABEL_15:
    if ((uint64_t *)v11 != v13)
    {
      result = *v13;
      *v13 = -1;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)result -= 2;
      }
      ++*(_DWORD *)(*v5 - 16);
      v14 = *v5;
      if (*v5)
        v15 = *(_DWORD *)(v14 - 12) - 1;
      else
        v15 = -1;
      *(_DWORD *)(v14 - 12) = v15;
      v16 = *v5;
      if (*v5)
      {
        v17 = 6 * *(_DWORD *)(v16 - 12);
        v18 = *(_DWORD *)(v16 - 4);
        if (v17 < v18 && v18 >= 9)
          return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashSet<WebCore::Database *,WTF::DefaultHash<WebCore::Database *>,WTF::HashTraits<WebCore::Database *>,WTF::HashTableTraits> *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v5, v18 >> 1);
      }
    }
  }
  return result;
}

WTF *WTF::HashMap<WTF::String,WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::add<WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, uint64_t *a2, WTF::StringImpl **a3, uint64_t *a4)
{
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  WTF *v11;
  int i;
  unsigned int v13;
  WTF *v14;
  WTF *v15;
  WTF *result;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  char v29;
  uint64_t v30;

  v7 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, 8u, 0), (v7 = *a2) != 0))
  {
    v8 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    v8 = 0;
  }
  v9 = *((_DWORD *)*a3 + 4);
  if (v9 < 0x100)
    v10 = WTF::StringImpl::hashSlowCase(*a3);
  else
    v10 = v9 >> 8;
  v11 = 0;
  for (i = 1; ; ++i)
  {
    v13 = v10 & v8;
    v14 = (WTF *)(v7 + 24 * (v10 & v8));
    v15 = *(WTF **)v14;
    if (*(_QWORD *)v14 != -1)
      break;
    v11 = (WTF *)(v7 + 24 * v13);
LABEL_13:
    v10 = i + v13;
  }
  if (!v15)
  {
    if (v11)
    {
      *(_QWORD *)v11 = 0;
      *((_QWORD *)v11 + 1) = 0;
      *((_QWORD *)v11 + 2) = 0;
      --*(_DWORD *)(*a2 - 16);
      v14 = v11;
    }
    v17 = *a3;
    if (*a3)
      *(_DWORD *)v17 += 2;
    *(_QWORD *)v14 = v17;
    result = (WTF *)*((_QWORD *)v14 + 1);
    if (result)
    {
      *((_QWORD *)v14 + 1) = 0;
      *((_DWORD *)v14 + 4) = 0;
      result = (WTF *)WTF::fastFree(result, a2);
    }
    v18 = *a4;
    *a4 = 0;
    *((_QWORD *)v14 + 1) = v18;
    LODWORD(v18) = *((_DWORD *)a4 + 2);
    *((_DWORD *)a4 + 2) = 0;
    *((_DWORD *)v14 + 4) = v18;
    LODWORD(v18) = *((_DWORD *)a4 + 3);
    *((_DWORD *)a4 + 3) = 0;
    *((_DWORD *)v14 + 5) = v18;
    v19 = *a2;
    if (*a2)
      v20 = *(_DWORD *)(v19 - 12) + 1;
    else
      v20 = 1;
    *(_DWORD *)(v19 - 12) = v20;
    v23 = *a2;
    if (*a2)
      v24 = *(_DWORD *)(v23 - 12);
    else
      v24 = 0;
    v25 = (*(_DWORD *)(v23 - 16) + v24);
    v26 = *(unsigned int *)(v23 - 4);
    if (v26 > 0x400)
    {
      if (v26 <= 2 * v25)
        goto LABEL_31;
    }
    else if (3 * v26 <= 4 * v25)
    {
      if (!(_DWORD)v26)
      {
        v27 = 8;
LABEL_36:
        result = (WTF *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, v27, (WTF::StringImpl **)v14);
        v14 = result;
        v23 = *a2;
        if (*a2)
          LODWORD(v26) = *(_DWORD *)(v23 - 4);
        else
          LODWORD(v26) = 0;
        goto LABEL_40;
      }
LABEL_31:
      v27 = (_DWORD)v26 << (6 * *(_DWORD *)(v23 - 12) >= (2 * v26));
      goto LABEL_36;
    }
LABEL_40:
    v28 = a1;
    v30 = v23 + 24 * v26;
    v29 = 1;
    goto LABEL_41;
  }
  result = (WTF *)WTF::equal(v15, *a3, (const WTF::StringImpl *)a3);
  if (!(_DWORD)result)
    goto LABEL_13;
  v21 = *a2;
  if (*a2)
    v22 = *(_DWORD *)(v21 - 4);
  else
    v22 = 0;
  v28 = a1;
  v29 = 0;
  v30 = v21 + 24 * v22;
LABEL_41:
  *(_QWORD *)v28 = v14;
  *(_QWORD *)(v28 + 8) = v30;
  *(_BYTE *)(v28 + 16) = v29;
  return result;
}

uint64_t WebCore::DOMPatchSupport::removeChildAndMoveToNew(WebCore::DOMPatchSupport *this, uint64_t **a2, WTF::StringImpl **a3)
{
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  WTF::StringImpl *v10;
  const WTF::StringImpl *v11;
  uint64_t result;
  char v13;
  WTF::StringImpl *v14;
  uint64_t *v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int i;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  char v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  char v36;
  char v37[8];
  WTF::StringImpl *v38;
  char v39;
  uint64_t v40;

  v6 = a3[2];
  *((_DWORD *)v6 + 6) += 2;
  v7 = *((_QWORD *)v6 + 4);
  v8 = **a2;
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v9 = off_1E33EDB90;
  v9[1] = 0;
  *(_DWORD *)(v7 + 24) += 2;
  v9[2] = v7;
  *((_DWORD *)v6 + 6) += 2;
  v9[3] = v6;
  v9[4] = 0;
  v34 = (uint64_t)v9;
  WebCore::InspectorHistory::perform(v8, (char *)&v34, (uint64_t)v37);
  result = v34;
  v34 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (v39)
  {
    v13 = v37[0];
    v14 = v38;
    v38 = 0;
LABEL_5:
    *(_BYTE *)this = v13;
    *((_QWORD *)this + 1) = v14;
LABEL_6:
    *((_BYTE *)this + 16) = 1;
    goto LABEL_7;
  }
  v15 = a2[2];
  if (!v15)
  {
LABEL_33:
    v31 = *((unsigned int *)a3 + 9);
    if (!(_DWORD)v31)
    {
LABEL_37:
      *(_QWORD *)this = 0;
      *((_QWORD *)this + 1) = 0;
      *((_QWORD *)this + 2) = 0;
      goto LABEL_7;
    }
    v32 = a3[3];
    v33 = 8 * v31;
    while (1)
    {
      result = WebCore::DOMPatchSupport::removeChildAndMoveToNew((WebCore::DOMPatchSupport *)&v34, (WebCore::DOMPatchSupport::Digest *)a2);
      if (v36)
        break;
      v32 = (WTF::StringImpl *)((char *)v32 + 8);
      v33 -= 8;
      if (!v33)
        goto LABEL_37;
    }
    v13 = v34;
    v14 = v35;
    goto LABEL_5;
  }
  v16 = *((_DWORD *)v15 - 2);
  v17 = *((_DWORD *)*a3 + 4);
  if (v17 < 0x100)
    v18 = WTF::StringImpl::hashSlowCase(*a3);
  else
    v18 = v17 >> 8;
  for (i = 0; ; v18 = i + v20)
  {
    v20 = v18 & v16;
    result = v15[2 * v20];
    if (result != -1)
    {
      if (!result)
      {
        v21 = a2[2];
        if (!v21)
          goto LABEL_33;
        v22 = *((unsigned int *)v21 - 1);
        v23 = &v21[2 * v22];
        goto LABEL_28;
      }
      result = WTF::equal((WTF *)result, *a3, v11);
      if ((result & 1) != 0)
        break;
    }
    ++i;
  }
  v23 = &v15[2 * v20];
  v21 = a2[2];
  if (!v21)
    goto LABEL_29;
  v22 = *((unsigned int *)v21 - 1);
LABEL_28:
  if (v23 == &v21[2 * v22])
    goto LABEL_33;
LABEL_29:
  v24 = v23[1];
  v25 = *(_QWORD *)(v24 + 16);
  v26 = *a2;
  v27 = *(_QWORD *)(v25 + 32);
  *((_DWORD *)v6 + 6) += 2;
  v28 = *v26;
  v29 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v29 = off_1E33EDD80;
  v29[1] = 0;
  *(_DWORD *)(v27 + 24) += 2;
  v29[2] = v27;
  v29[3] = v6;
  *(_DWORD *)(v25 + 24) += 2;
  v29[4] = v25;
  v40 = (uint64_t)v29;
  WebCore::InspectorHistory::perform(v28, (char *)&v40, (uint64_t)&v34);
  result = v40;
  v40 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (v36)
  {
    v30 = v34;
    *((_QWORD *)this + 1) = v35;
    *(_BYTE *)this = v30;
    goto LABEL_6;
  }
  *(_QWORD *)(v24 + 16) = v6;
  result = WebCore::DOMPatchSupport::markNodeAsUsed((uint64_t)a2, v24);
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  if (v36)
  {
    result = (uint64_t)v35;
    v35 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v10);
      else
        *(_DWORD *)result -= 2;
    }
  }
LABEL_7:
  if (v39)
  {
    result = (uint64_t)v38;
    v38 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v10);
        if (!v6)
          return result;
        goto LABEL_12;
      }
      *(_DWORD *)result -= 2;
    }
  }
  if (!v6)
    return result;
LABEL_12:
  if (*((_DWORD *)v6 + 6) == 2)
  {
    if ((*((_WORD *)v6 + 15) & 0x400) == 0)
      return (uint64_t)WebCore::Node::removedLastRef(v6, v10);
  }
  else
  {
    *((_DWORD *)v6 + 6) -= 2;
  }
  return result;
}

uint64_t WebCore::DOMPatchSupport::markNodeAsUsed(uint64_t a1, uint64_t a2)
{
  const WTF::StringImpl *v4;
  WTF *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  WTF *v18;
  WTF *v19;
  void *v20;
  uint64_t v21;

  v5 = (WTF *)WTF::fastMalloc((WTF *)0x80);
  v6 = 0;
  *(_QWORD *)v5 = a2;
  v21 = a1 + 16;
  v7 = 16;
  v8 = 1;
  while (1)
  {
    v9 = *((_QWORD *)v5 + v6);
    if (v6 == v7 - 1)
      v6 = 0;
    else
      ++v6;
    result = WTF::HashMap<WTF::String,WebCore::DOMPatchSupport::Digest *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::DOMPatchSupport::Digest *>,WTF::HashTableTraits>::remove(v21, (WTF::StringImpl **)v9, v4);
    v12 = *(unsigned int *)(v9 + 36);
    if ((_DWORD)v12)
      break;
LABEL_33:
    if (v6 == v8)
      return WTF::fastFree(v5, v11);
  }
  v13 = *(uint64_t **)(v9 + 24);
  v14 = 8 * v12;
  while (1)
  {
    v15 = *v13;
    if (v6)
    {
      v16 = v7;
      if (v8 + 1 == v6)
        goto LABEL_15;
      goto LABEL_27;
    }
    if (v8)
      break;
    v16 = 0;
    if (!v7)
      goto LABEL_15;
    v6 = 0;
LABEL_27:
    *((_QWORD *)v5 + v8) = v15;
    if (v8 == v7 - 1)
      v8 = 0;
    else
      ++v8;
    ++v13;
    v14 -= 8;
    if (!v14)
      goto LABEL_33;
  }
  if (v8 != v7 - 1)
  {
    v6 = 0;
    goto LABEL_27;
  }
  v16 = v7;
LABEL_15:
  v17 = v16 + (v16 >> 2);
  if (v17 <= 0xF)
    v17 = 15;
  if (v17 < 0x1FFFFFFF)
  {
    v7 = v17 + 1;
    v18 = (WTF *)WTF::fastMalloc((WTF *)(8 * (v17 + 1)));
    v19 = v18;
    if (v6 <= v8)
    {
      memcpy((char *)v18 + 8 * v6, (char *)v5 + 8 * v6, 8 * v8 - 8 * v6);
    }
    else
    {
      memcpy(v18, v5, 8 * v8);
      memcpy((char *)v19 + 8 * v7 + 8 * (v6 - v16), (char *)v5 + 8 * v6, 8 * v16 - 8 * v6);
      v6 = v7 + v6 - v16;
    }
    if (v19 == v5)
      v7 = 0;
    else
      v7 = v7;
    if (v19 == v5)
      v19 = 0;
    result = WTF::fastFree(v5, v20);
    v5 = v19;
    goto LABEL_27;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::InspectorAuditAccessibilityObject::getElementsByComputedRole@<X0>(Inspector::InspectorAuditAgent **this@<X0>, WebCore::Document *a2@<X1>, const WTF::StringImpl **a3@<X2>, WebCore::Node *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t result;
  WebCore::Node *v10;
  int v11;
  WebCore::Document *v12;
  WebCore::Document *v13;
  unint64_t v14;
  unsigned int v15;
  void *v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  uint64_t v19;
  WebCore::Document *v20;
  BOOL v22;
  uint64_t v23;
  BOOL v24;
  WebCore::AXObjectCache **v25;
  uint64_t v26;
  WebCore::AXObjectCache *v27;
  const WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  void *v33;
  void *v34;
  unint64_t v35;
  WebCore::Document *v36;
  unsigned int v37;
  void *__src;
  unint64_t v39;
  uint64_t v40;
  WebCore::AXObjectCache *v41;
  WTF::StringImpl *v42;

  result = Inspector::InspectorAuditAgent::hasActiveAudit(this[1]);
  if ((result & 1) == 0)
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a5 = 31;
    v11 = 1;
    goto LABEL_17;
  }
  if (a4)
  {
    if ((*((_WORD *)a4 + 14) & 4) != 0)
      v10 = a4;
    else
      v10 = 0;
  }
  else
  {
    v10 = 0;
  }
  if (v10)
    v12 = v10;
  else
    v12 = a2;
  v13 = (WebCore::Document *)*((_QWORD *)v12 + 10);
  if (!v13)
  {
    LODWORD(v14) = 0;
    v15 = 0;
    v16 = 0;
    goto LABEL_16;
  }
  v16 = 0;
  while ((*((_WORD *)v13 + 14) & 8) == 0)
  {
    LODWORD(v14) = 0;
    v15 = 0;
    v13 = (WebCore::Document *)*((_QWORD *)v13 + 7);
    if (!v13)
      goto LABEL_16;
  }
  v16 = 0;
  v15 = 0;
  v14 = 0;
  do
  {
LABEL_19:
    v17 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
    if ((v17 & 1) == 0)
      atomic_store(1u, WebCore::AXObjectCache::gAccessibilityEnabled);
    result = *(_QWORD *)(*((_QWORD *)v13 + 5) + 8);
    v18 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
    if ((v18 & 1) != 0)
    {
      v36 = v12;
      v39 = v14;
      v40 = (uint64_t)v13;
      v37 = v15;
      __src = v16;
      v23 = WebCore::Document::topDocument(result);
      *(_DWORD *)(v23 + 24) += 2;
      v42 = (WTF::StringImpl *)v23;
      if (*(_QWORD *)(v23 + 1944))
        v24 = *(_BYTE *)(v23 + 3405) == 0;
      else
        v24 = 0;
      if (!v24)
      {
        result = (uint64_t)WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v42);
LABEL_49:
        v16 = __src;
        v13 = (WebCore::Document *)v40;
        v15 = v37;
LABEL_50:
        v14 = v39;
        v12 = v36;
        goto LABEL_22;
      }
      v25 = (WebCore::AXObjectCache **)v23;
      v26 = *(_QWORD *)(v23 + 1488);
      if (v26)
      {
        WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v42);
      }
      else
      {
        v27 = (WebCore::AXObjectCache *)WTF::fastMalloc((WTF *)0x318);
        v41 = WebCore::AXObjectCache::AXObjectCache(v27, (WebCore::Document *)v25);
        std::unique_ptr<WebCore::AXObjectCache>::operator=[abi:sn180100](v25 + 186, &v41);
        std::unique_ptr<WebCore::AXObjectCache>::~unique_ptr[abi:sn180100](&v41);
        WebCore::Document::hasEverCreatedAnAXObjectCache = 1;
        v26 = (uint64_t)v25[186];
        result = (uint64_t)WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v42);
        if (!v26)
          goto LABEL_49;
      }
      result = WebCore::AXObjectCache::getOrCreate(v26, v40, 0);
      if (!result)
        goto LABEL_49;
      (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)result + 2192))(&v42);
      v30 = WTF::equal(v42, *a3, v28);
      result = (uint64_t)v42;
      v42 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
        {
          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v29);
          if (!v30)
            goto LABEL_49;
          goto LABEL_59;
        }
        *(_DWORD *)result -= 2;
      }
      if (!v30)
        goto LABEL_49;
LABEL_59:
      if (v37 == (_DWORD)v39)
      {
        v31 = v37 + ((unint64_t)v37 >> 2);
        v32 = 16;
        if (v31 >= 0x10)
          v32 = v31 + 1;
        if (v32 <= (unint64_t)v37 + 1)
          v32 = v37 + 1;
        v39 = v32;
        if (v32 >> 29)
        {
          __break(0xC471u);
          return result;
        }
        v33 = (void *)WTF::fastMalloc((WTF *)(8 * v32));
        result = (uint64_t)memcpy(v33, __src, 8 * v37);
        if (__src)
        {
          if (v33 == __src)
            v35 = 0;
          else
            v35 = v39;
          v39 = v35;
          if (v33 == __src)
            v33 = 0;
          result = WTF::fastFree((WTF *)__src, v34);
        }
        __src = v33;
      }
      v15 = v37 + 1;
      v13 = (WebCore::Document *)v40;
      *(_DWORD *)(v40 + 24) += 2;
      v16 = __src;
      *((_QWORD *)__src + v37) = v40;
      goto LABEL_50;
    }
LABEL_22:
    v19 = *((_QWORD *)v13 + 10);
    if (!v19)
    {
      if (v13 == v12)
        goto LABEL_16;
      while (1)
      {
        v19 = *((_QWORD *)v13 + 7);
        if (v19)
          break;
        v13 = (WebCore::Document *)*((_QWORD *)v13 + 4);
        if (v13)
          v22 = v13 == v12;
        else
          v22 = 1;
        if (v22)
          goto LABEL_16;
      }
    }
    v13 = (WebCore::Document *)v19;
  }
  while ((*(_WORD *)(v19 + 28) & 8) != 0);
  while ((WebCore::Document *)v19 != v12)
  {
    if (!*(_QWORD *)(v19 + 56))
    {
      v20 = (WebCore::Document *)v19;
      while (1)
      {
        v20 = (WebCore::Document *)*((_QWORD *)v20 + 4);
        if (!v20 || v20 == v12)
          goto LABEL_16;
        v19 = *((_QWORD *)v20 + 7);
        if (v19)
          goto LABEL_34;
      }
    }
    v19 = *(_QWORD *)(v19 + 56);
LABEL_34:
    if ((*(_WORD *)(v19 + 28) & 8) != 0)
    {
      v13 = (WebCore::Document *)v19;
      goto LABEL_19;
    }
  }
LABEL_16:
  v11 = 0;
  *(_QWORD *)a5 = v16;
  *(_DWORD *)(a5 + 8) = v14;
  *(_DWORD *)(a5 + 12) = v15;
LABEL_17:
  *(_DWORD *)(a5 + 16) = v11;
  return result;
}

_DWORD *WebCore::InspectorAuditAccessibilityObject::getActiveDescendant@<X0>(Inspector::InspectorAuditAgent **this@<X0>, WebCore::Node *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v5;
  _DWORD *result;
  unsigned __int8 v7;
  int v8;
  _QWORD *v9;
  BOOL v10;
  WebCore::AXObjectCache **v11;
  uint64_t v12;
  WebCore::AXObjectCache *v13;
  void *v14;
  uint64_t v15;
  WebCore::AXObjectCache *v16;
  uint64_t *v17;
  int v18;

  if ((Inspector::InspectorAuditAgent::hasActiveAudit(this[1]) & 1) == 0)
  {
    result = (_DWORD *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 31;
    v8 = 1;
    goto LABEL_7;
  }
  v5 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
  if ((v5 & 1) == 0)
    atomic_store(1u, WebCore::AXObjectCache::gAccessibilityEnabled);
  result = *(_DWORD **)(*((_QWORD *)a2 + 5) + 8);
  v7 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
  if ((v7 & 1) == 0)
    goto LABEL_5;
  v9 = (_QWORD *)WebCore::Document::topDocument((uint64_t)result);
  *((_DWORD *)v9 + 6) += 2;
  v17 = v9;
  if (v9[243])
    v10 = *((_BYTE *)v9 + 3405) == 0;
  else
    v10 = 0;
  if (!v10)
  {
    result = WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v17);
    goto LABEL_5;
  }
  v11 = (WebCore::AXObjectCache **)v9;
  v12 = v9[186];
  if (v12)
  {
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v17);
  }
  else
  {
    v13 = (WebCore::AXObjectCache *)WTF::fastMalloc((WTF *)0x318);
    v16 = WebCore::AXObjectCache::AXObjectCache(v13, (WebCore::Document *)v11);
    std::unique_ptr<WebCore::AXObjectCache>::operator=[abi:sn180100](v11 + 186, &v16);
    std::unique_ptr<WebCore::AXObjectCache>::~unique_ptr[abi:sn180100](&v16);
    WebCore::Document::hasEverCreatedAnAXObjectCache = 1;
    v12 = (uint64_t)v11[186];
    result = WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v17);
    if (!v12)
      goto LABEL_5;
  }
  result = (_DWORD *)WebCore::AXObjectCache::getOrCreate(v12, (uint64_t)a2, 0);
  if (!result)
    goto LABEL_5;
  (*(void (**)(uint64_t **__return_ptr, _DWORD *, uint64_t))(*(_QWORD *)result + 984))(&v17, result, 1);
  if (!v18)
  {
    result = (_DWORD *)WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v17, v14);
    goto LABEL_5;
  }
  v15 = *v17;
  result = (_DWORD *)WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v17, v14);
  if (!v15)
  {
LABEL_5:
    v8 = 0;
    *(_QWORD *)a3 = 0;
    goto LABEL_7;
  }
  result = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 840))(v15);
  if (result)
    result[6] += 2;
  v8 = 0;
  *(_QWORD *)a3 = result;
LABEL_7:
  *(_DWORD *)(a3 + 16) = v8;
  return result;
}

uint64_t WebCore::InspectorAuditAccessibilityObject::getChildNodes@<X0>(Inspector::InspectorAuditAgent **this@<X0>, WebCore::Node *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v5;
  uint64_t result;
  unsigned __int8 v7;
  int v8;
  uint64_t v9;
  BOOL v10;
  WebCore::AXObjectCache **v11;
  uint64_t v12;
  WebCore::AXObjectCache *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WebCore::AXObjectCache *v17;

  if ((Inspector::InspectorAuditAgent::hasActiveAudit(this[1]) & 1) == 0)
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)(a3 + 8) = 31;
    v8 = 1;
    goto LABEL_7;
  }
  v5 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
  if ((v5 & 1) == 0)
    atomic_store(1u, WebCore::AXObjectCache::gAccessibilityEnabled);
  result = *(_QWORD *)(*((_QWORD *)a2 + 5) + 8);
  v7 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
  if ((v7 & 1) != 0)
  {
    v9 = WebCore::Document::topDocument(result);
    *(_DWORD *)(v9 + 24) += 2;
    v15 = v9;
    if (*(_QWORD *)(v9 + 1944))
      v10 = *(_BYTE *)(v9 + 3405) == 0;
    else
      v10 = 0;
    if (v10)
    {
      v11 = (WebCore::AXObjectCache **)v9;
      v12 = *(_QWORD *)(v9 + 1488);
      if (v12)
      {
        WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v15);
      }
      else
      {
        v13 = (WebCore::AXObjectCache *)WTF::fastMalloc((WTF *)0x318);
        v17 = WebCore::AXObjectCache::AXObjectCache(v13, (WebCore::Document *)v11);
        std::unique_ptr<WebCore::AXObjectCache>::operator=[abi:sn180100](v11 + 186, &v17);
        std::unique_ptr<WebCore::AXObjectCache>::~unique_ptr[abi:sn180100](&v17);
        WebCore::Document::hasEverCreatedAnAXObjectCache = 1;
        v12 = (uint64_t)v11[186];
        result = (uint64_t)WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v15);
        if (!v12)
          goto LABEL_5;
      }
      result = WebCore::AXObjectCache::getOrCreate(v12, (uint64_t)a2, 0);
      if (result)
      {
        v15 = 0;
        v16 = 0;
        result = (uint64_t)WebCore::addChildren(result, (uint64_t)&v15);
        v8 = 0;
        v14 = v16;
        *(_QWORD *)(a3 + 8) = v15;
        *(_QWORD *)(a3 + 16) = v14;
        *(_BYTE *)(a3 + 24) = 1;
        goto LABEL_7;
      }
      goto LABEL_5;
    }
    result = (uint64_t)WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v15);
  }
LABEL_5:
  v8 = 0;
  *(_BYTE *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 24) = 0;
LABEL_7:
  *(_DWORD *)(a3 + 32) = v8;
  return result;
}

WebCore::Node *WebCore::addChildren(uint64_t a1, uint64_t a2)
{
  WebCore::Node *result;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  WebCore::Node *v7;
  void *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  WebCore::Node *v14;

  result = (WebCore::Node *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 1896))(a1, 1);
  v4 = *((unsigned int *)result + 3);
  if ((_DWORD)v4)
  {
    v5 = *(_QWORD **)result;
    v6 = 8 * v4;
    do
    {
      v7 = (WebCore::Node *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v5 + 840))(*v5);
      if (v7)
      {
        *((_DWORD *)v7 + 6) += 2;
        v14 = v7;
        v9 = *(unsigned int *)(a2 + 12);
        if ((_DWORD)v9 == *(_DWORD *)(a2 + 8))
        {
          v10 = WTF::Vector<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a2, v9 + 1, (unint64_t)&v14);
          v9 = *(unsigned int *)(a2 + 12);
          v11 = *(char **)a2;
          v12 = *(_QWORD *)v10;
          *(_QWORD *)v10 = 0;
          *(_QWORD *)&v11[8 * v9] = v12;
        }
        else
        {
          v13 = *(char **)a2;
          v14 = 0;
          *(_QWORD *)&v13[8 * v9] = v7;
        }
        *(_DWORD *)(a2 + 12) = v9 + 1;
        result = v14;
        v14 = 0;
        if (result)
        {
          if (*((_DWORD *)result + 6) == 2)
          {
            if ((*((_WORD *)result + 15) & 0x400) == 0)
              result = (WebCore::Node *)WebCore::Node::removedLastRef(result, v8);
          }
          else
          {
            *((_DWORD *)result + 6) -= 2;
          }
        }
      }
      else
      {
        result = (WebCore::Node *)WebCore::addChildren(*v5, a2);
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  return result;
}

void WebCore::InspectorAuditAccessibilityObject::getComputedProperties(Inspector::InspectorAuditAgent **this@<X0>, WebCore::Node *a2@<X1>, uint64_t a3@<X8>)
{
  WTF::StringImpl *v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  __int128 v8;
  __int128 v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  BOOL v14;
  WebCore::AXObjectCache **v15;
  uint64_t v16;
  WebCore::AXObjectCache *v17;
  uint64_t v18;
  WebCore::AccessibilityObject *v19;
  __int16 v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  int v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  int v30;
  WebCore::AccessibilityObject *v31;
  __int16 isDOMHidden;
  int v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  __int16 hasPopup;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  int v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  _BOOL4 IsEnabled;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  int v51;
  int v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  int v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  unsigned int v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  void *v82;
  unint64_t v83;
  WTF::StringImpl *v84;
  _BOOL4 v85;
  int v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  WTF *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  WTF::StringImpl *v104;
  void *v105;
  uint64_t v106;
  unsigned int v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  WTF::StringImpl *v113;
  uint64_t v114;
  WTF::StringImpl *v115;
  int v116;
  int v117;
  WTF *v118;
  WTF::StringImpl *v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  WTF::StringImpl *v124;
  WTF::StringImpl *v125;
  WTF::StringImpl *v126;
  WTF::StringImpl **v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  WTF::StringImpl *v132;
  WTF::StringImpl *v133;
  WTF::StringImpl *v134;
  WTF::StringImpl **v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  WTF::StringImpl *v140;
  WTF::StringImpl *v141;
  _QWORD *v142;
  _DWORD **v143;
  uint64_t v144;
  _DWORD *v145;
  uint64_t v146;
  WTF::StringImpl *v147;
  _QWORD *v148;
  WTF::StringImpl *v149;
  uint64_t v150;
  _DWORD *v151;
  const WTF::AtomString *v152;
  WTF::StringImpl *v153;
  WTF::StringImpl *v154;
  WTF *v155;
  WTF::StringImpl *v156;
  uint64_t v157;
  WTF::StringImpl *v158;
  WTF::StringImpl *v159;
  uint64_t v160;
  WTF::StringImpl *v161;
  _BYTE v162[24];
  _BYTE v163[26];
  WTF::StringImpl *v164;
  __int16 v165;
  _DWORD **v166;
  int v167;
  unsigned int v168;
  char v169;
  WTF::StringImpl *v170[2];
  WTF::StringImpl *v171;
  __int16 v172;
  __int16 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  WTF::StringImpl *v177;
  __int16 v178;
  WTF::StringImpl *v179;
  __int16 v180;
  _QWORD *v181;
  uint64_t v182;
  char v183;
  WTF::StringImpl *v184;
  int v185;
  __int16 v186;
  WTF::StringImpl *v187;
  __int16 v188;
  char v189;
  WTF::StringImpl *v190;

  if ((Inspector::InspectorAuditAgent::hasActiveAudit(this[1]) & 1) == 0)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)(a3 + 8) = 31;
    *(_DWORD *)(a3 + 160) = 1;
    return;
  }
  LOBYTE(v173) = 0;
  v189 = 0;
  v6 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
  if ((v6 & 1) == 0)
    atomic_store(1u, WebCore::AXObjectCache::gAccessibilityEnabled);
  v7 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
  if ((v7 & 1) != 0)
  {
    v13 = WebCore::Document::topDocument(*(_QWORD *)(*((_QWORD *)a2 + 5) + 8));
    *(_DWORD *)(v13 + 24) += 2;
    v160 = v13;
    if (*(_QWORD *)(v13 + 1944))
      v14 = *(_BYTE *)(v13 + 3405) == 0;
    else
      v14 = 0;
    if (!v14)
    {
      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v160);
      goto LABEL_5;
    }
    v15 = (WebCore::AXObjectCache **)v13;
    v16 = *(_QWORD *)(v13 + 1488);
    if (v16)
    {
      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v160);
    }
    else
    {
      v17 = (WebCore::AXObjectCache *)WTF::fastMalloc((WTF *)0x318);
      v156 = WebCore::AXObjectCache::AXObjectCache(v17, (WebCore::Document *)v15);
      std::unique_ptr<WebCore::AXObjectCache>::operator=[abi:sn180100](v15 + 186, &v156);
      std::unique_ptr<WebCore::AXObjectCache>::~unique_ptr[abi:sn180100](&v156);
      WebCore::Document::hasEverCreatedAnAXObjectCache = 1;
      v16 = (uint64_t)v15[186];
      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v160);
      if (!v16)
        goto LABEL_5;
    }
    v18 = WebCore::AXObjectCache::getOrCreate(v16, (uint64_t)a2, 0);
    if (v18)
    {
      v19 = (WebCore::AccessibilityObject *)v18;
      LOWORD(v160) = 0;
      v162[16] = 0;
      v162[20] = 0;
      *(_WORD *)v163 = 0;
      v163[4] = 0;
      v163[8] = 0;
      v164 = 0;
      v165 = 0;
      LOBYTE(v166) = 0;
      v169 = 0;
      v172 = 0;
      v161 = 0;
      *(_QWORD *)v162 = 0;
      *(_QWORD *)&v162[6] = 0;
      *(_QWORD *)&v163[18] = 0;
      *(_QWORD *)&v163[12] = 0;
      v171 = 0;
      memset(v170, 0, 14);
      v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 2256))(v18);
      v21 = v20;
      LOWORD(v160) = v20 | 0x100;
      v22 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v19 + 1232))(v19);
      if (v22)
      {
        v23 = v22;
        do
        {
          if ((v21 & 1) != 0)
            break;
          v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 2256))(v23);
          v21 = v24;
          LOWORD(v160) = v24 | 0x100;
          v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 1232))(v23);
        }
        while (v23);
      }
      if ((*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v19 + 1048))(v19))
      {
        v25 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v19 + 880))(v19);
        if (v25 != 2 && v25 != 1)
          (*(void (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v19 + 528))(v19);
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v27 = v161;
        v161 = v156;
        if (v27)
        {
          if (*(_DWORD *)v27 == 2)
            WTF::StringImpl::destroy(v27, v26);
          else
            *(_DWORD *)v27 -= 2;
        }
      }
      switch((*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v19 + 1096))(v19))
      {
        case 0u:
        case 1u:
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 6u:
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v29 = *(WTF::StringImpl **)v162;
          *(_QWORD *)v162 = v156;
          if (v29)
          {
            if (*(_DWORD *)v29 == 2)
              WTF::StringImpl::destroy(v29, v28);
            else
              *(_DWORD *)v29 -= 2;
          }
          break;
        default:
          break;
      }
      *(_WORD *)&v162[8] = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v19 + 536))(v19) ^ 1 | 0x100;
      if ((*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v19 + 1040))(v19))
        *(_WORD *)&v162[10] = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v19 + 632))(v19) | 0x100;
      if ((*((_WORD *)a2 + 14) & 8) != 0
        && (*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v19 + 800))(v19))
      {
        *(_WORD *)&v162[12] = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v19 + 552))(v19) | 0x100;
      }
      v30 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v19 + 872))(v19);
      if (!v162[20])
        v162[20] = 1;
      *(_DWORD *)&v162[16] = v30;
      if (((*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v19 + 552))(v19) & 1) != 0)
      {
LABEL_46:
        isDOMHidden = WebCore::AccessibilityObject::isDOMHidden(v19);
      }
      else
      {
        v31 = v19;
        while (!WebCore::AccessibilityObject::isARIAHidden(v31))
        {
          v31 = (WebCore::AccessibilityObject *)(*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v31 + 1232))(v31);
          if (!v31)
            goto LABEL_46;
        }
        isDOMHidden = 1;
      }
      *(_WORD *)v163 = isDOMHidden | 0x100;
      v33 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v19 + 1744))(v19);
      if (!v163[8])
        v163[8] = 1;
      *(_DWORD *)&v163[4] = v33;
      *(_WORD *)&v163[12] = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v19 + 856))(v19) | 0x100;
      *(_WORD *)&v163[14] = (WebCore::AccessibilityObject::defaultObjectInclusion(v19) == 1) | 0x100;
      (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::AccessibilityObject *))(*(_QWORD *)v19 + 1032))(&v159, v19);
      if (!MEMORY[0x19AEA53F4](v159, "false", 5)
        && !MEMORY[0x19AEA53F4](v159, "grammar", 7))
      {
        MEMORY[0x19AEA53F4](v159, "spelling", 8);
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v35 = *(WTF::StringImpl **)&v163[16];
      *(_QWORD *)&v163[16] = v156;
      if (v35)
      {
        if (*(_DWORD *)v35 == 2)
          WTF::StringImpl::destroy(v35, v34);
        else
          *(_DWORD *)v35 -= 2;
      }
      if ((*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v19 + 1456))(v19) == 84)
        hasPopup = 1;
      else
        hasPopup = WebCore::AXCoreObject::hasPopup(v19);
      *(_WORD *)&v163[24] = hasPopup | 0x100;
      WebCore::AccessibilityObject::computedLabel(v19, &v156);
      v38 = v156;
      v156 = 0;
      v39 = v164;
      v164 = v38;
      if (v39)
      {
        v40 = *(_DWORD *)v39 - 2;
        if (*(_DWORD *)v39 != 2)
        {
LABEL_61:
          *(_DWORD *)v39 = v40;
          goto LABEL_62;
        }
        WTF::StringImpl::destroy(v39, v37);
        v39 = v156;
        v156 = 0;
        if (v39)
        {
          v40 = *(_DWORD *)v39 - 2;
          if (*(_DWORD *)v39 != 2)
            goto LABEL_61;
          WTF::StringImpl::destroy(v39, v94);
        }
      }
LABEL_62:
      (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::AccessibilityObject *))(*(_QWORD *)v19 + 2232))(&v190, v19);
      v42 = v190;
      if (v190)
      {
        if ((*((_BYTE *)v190 + 16) & 0x10) != 0)
        {
          *(_DWORD *)v190 += 2;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase(v190, v41);
          v42 = v156;
        }
      }
      v156 = v42;
      IsEnabled = WebCore::AXCoreObject::liveRegionStatusIsEnabled((uint64_t *)&v156);
      v45 = v156;
      v156 = 0;
      if (v45)
      {
        if (*(_DWORD *)v45 == 2)
          WTF::StringImpl::destroy(v45, v43);
        else
          *(_DWORD *)v45 -= 2;
      }
      v46 = v190;
      v190 = 0;
      if (v46)
      {
        if (*(_DWORD *)v46 == 2)
          WTF::StringImpl::destroy(v46, v43);
        else
          *(_DWORD *)v46 -= 2;
      }
      if (!IsEnabled)
      {
LABEL_84:
        v51 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v19 + 1024))(v19);
        if (v51)
          LOWORD(v51) = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v19 + 600))(v19);
        LOWORD(v170[1]) = v51 | 0x100;
        v52 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v19 + 1456))(v19);
        if ((v52 - 101) <= 0x19 && ((1 << (v52 - 101)) & 0x3000001) != 0 || v52 == 19)
          WORD1(v170[1]) = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v19 + 808))(v19) ^ 1 | 0x100;
        if ((*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v19 + 624))(v19))
          WORD2(v170[1]) = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v19 + 616))(v19) | 0x100;
        (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::AccessibilityObject *))(*(_QWORD *)v19 + 2192))(&v156, v19);
        v54 = v156;
        v156 = 0;
        v55 = v171;
        v171 = v54;
        if (!v55)
          goto LABEL_95;
        v56 = *(_DWORD *)v55 - 2;
        if (*(_DWORD *)v55 == 2)
        {
          WTF::StringImpl::destroy(v55, v53);
          v55 = v156;
          v156 = 0;
          if (!v55)
            goto LABEL_95;
          v56 = *(_DWORD *)v55 - 2;
          if (*(_DWORD *)v55 == 2)
          {
            WTF::StringImpl::destroy(v55, v95);
            goto LABEL_95;
          }
        }
        *(_DWORD *)v55 = v56;
LABEL_95:
        v172 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v19 + 544))(v19) | 0x100;
        v173 = v160;
        v58 = v161;
        if (v189)
        {
          if (v161)
            *(_DWORD *)v161 += 2;
          v59 = (WTF::StringImpl *)v174;
          *(_QWORD *)&v174 = v58;
          if (v59)
          {
            if (*(_DWORD *)v59 == 2)
              WTF::StringImpl::destroy(v59, v57);
            else
              *(_DWORD *)v59 -= 2;
          }
          v60 = *(_QWORD *)v162;
          if (*(_QWORD *)v162)
            **(_DWORD **)v162 += 2;
          v61 = (WTF::StringImpl *)*((_QWORD *)&v174 + 1);
          *((_QWORD *)&v174 + 1) = v60;
          if (v61)
          {
            if (*(_DWORD *)v61 == 2)
              WTF::StringImpl::destroy(v61, v57);
            else
              *(_DWORD *)v61 -= 2;
          }
          v175 = *(_OWORD *)&v162[8];
          v176 = *(_OWORD *)v163;
          v62 = *(WTF::StringImpl **)&v163[16];
          if (*(_QWORD *)&v163[16])
            **(_DWORD **)&v163[16] += 2;
          v63 = v177;
          v177 = v62;
          if (v63)
          {
            if (*(_DWORD *)v63 == 2)
              WTF::StringImpl::destroy(v63, v57);
            else
              *(_DWORD *)v63 -= 2;
          }
          v178 = *(_WORD *)&v163[24];
          v64 = v164;
          if (v164)
            *(_DWORD *)v164 += 2;
          v65 = v179;
          v179 = v64;
          if (v65)
          {
            if (*(_DWORD *)v65 == 2)
              WTF::StringImpl::destroy(v65, v57);
            else
              *(_DWORD *)v65 -= 2;
          }
          v180 = v165;
          std::__optional_storage_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false> const&>((unsigned int *)&v181, (unsigned int *)&v166);
          v66 = v170[0];
          if (v170[0])
            *(_DWORD *)v170[0] += 2;
          v67 = v184;
          v184 = v66;
          if (v67)
          {
            if (*(_DWORD *)v67 == 2)
              WTF::StringImpl::destroy(v67, v57);
            else
              *(_DWORD *)v67 -= 2;
          }
          v185 = (int)v170[1];
          v186 = WORD2(v170[1]);
          v68 = v171;
          if (v171)
            *(_DWORD *)v171 += 2;
          v69 = v187;
          v187 = v68;
          if (v69)
          {
            if (*(_DWORD *)v69 == 2)
              WTF::StringImpl::destroy(v69, v57);
            else
              *(_DWORD *)v69 -= 2;
          }
          v188 = v172;
        }
        else
        {
          if (v161)
            *(_DWORD *)v161 += 2;
          *(_QWORD *)&v174 = v58;
          v70 = *(_QWORD *)v162;
          if (*(_QWORD *)v162)
            **(_DWORD **)v162 += 2;
          *((_QWORD *)&v174 + 1) = v70;
          v175 = *(_OWORD *)&v162[8];
          v176 = *(_OWORD *)v163;
          v71 = *(WTF::StringImpl **)&v163[16];
          if (*(_QWORD *)&v163[16])
            **(_DWORD **)&v163[16] += 2;
          v177 = v71;
          v178 = *(_WORD *)&v163[24];
          v72 = v164;
          if (v164)
            *(_DWORD *)v164 += 2;
          v179 = v72;
          v180 = v165;
          LOBYTE(v181) = 0;
          v183 = 0;
          if (v169)
          {
            v73 = v168;
            v181 = 0;
            LODWORD(v182) = 0;
            HIDWORD(v182) = v168;
            if (v168)
            {
              if (v168 >> 29)
              {
                __break(0xC471u);
                JUMPOUT(0x195DA98DCLL);
              }
              v142 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v168));
              LODWORD(v182) = v73;
              v181 = v142;
              if (v168)
              {
                v143 = v166;
                v144 = 8 * v168;
                do
                {
                  v145 = *v143;
                  if (*v143)
                    *v145 += 2;
                  *v142++ = v145;
                  ++v143;
                  v144 -= 8;
                }
                while (v144);
              }
            }
            v183 = 1;
          }
          v74 = v170[0];
          if (v170[0])
            *(_DWORD *)v170[0] += 2;
          v184 = v74;
          v185 = (int)v170[1];
          v186 = WORD2(v170[1]);
          v75 = v171;
          if (v171)
            *(_DWORD *)v171 += 2;
          v187 = v75;
          v188 = v172;
          v189 = 1;
        }
        v76 = v159;
        v159 = 0;
        if (v76)
        {
          if (*(_DWORD *)v76 == 2)
            WTF::StringImpl::destroy(v76, v57);
          else
            *(_DWORD *)v76 -= 2;
        }
        WebCore::InspectorAuditAccessibilityObject::ComputedProperties::~ComputedProperties((WebCore::InspectorAuditAccessibilityObject::ComputedProperties *)&v160, v57);
        goto LABEL_5;
      }
      v165 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v19 + 2248))(v19) | 0x100;
      (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::AccessibilityObject *))(*(_QWORD *)v19 + 2240))(&v158, v19);
      if (!v158 || !*((_DWORD *)v158 + 1))
        goto LABEL_73;
      v156 = 0;
      v157 = 0;
      WTF::AtomStringImpl::add();
      v77 = v190;
      WTF::AtomStringImpl::add();
      v78 = v190;
      WTF::AtomStringImpl::add();
      v80 = v190;
      v81 = v158;
      if (!v158)
        goto LABEL_152;
      if ((*((_BYTE *)v158 + 16) & 0x10) != 0)
      {
        *(_DWORD *)v158 += 2;
        v154 = v81;
      }
      else
      {
        WTF::AtomStringImpl::addSlowCase(v158, v79);
        v81 = v190;
        v154 = v190;
        if (!v190)
          goto LABEL_152;
      }
      if (*((_DWORD *)v81 + 1))
      {
        WTF::AtomString::convertToASCIILowercase((WTF::AtomString *)&v154);
        WebCore::SpaceSplitStringData::create((WebCore::SpaceSplitStringData *)&v190, v152, &v155);
        v153 = v190;
        v190 = 0;
        if (v153)
        {
          if (*(_DWORD *)v153 == 2)
            WTF::StringImpl::destroy(v153, v79);
          else
            *(_DWORD *)v153 -= 2;
        }
        v81 = v154;
LABEL_153:
        v154 = 0;
        if (v81)
        {
          if (*(_DWORD *)v81 == 2)
            WTF::StringImpl::destroy(v81, v79);
          else
            *(_DWORD *)v81 -= 2;
        }
        WTF::AtomStringImpl::add();
        if (v155)
        {
          v83 = 0;
          do
          {
            v84 = (WTF::StringImpl *)*((_QWORD *)v155 + v83 + 2);
            v85 = v84 == v190;
            if (v84 == v190)
              break;
            ++v83;
          }
          while (v83 < *((unsigned int *)v155 + 3));
          if (!v190)
          {
LABEL_163:
            if (v85)
            {
              v86 = v157;
              v87 = HIDWORD(v157);
              if (HIDWORD(v157) == (_DWORD)v157)
              {
                v88 = HIDWORD(v157) + ((unint64_t)HIDWORD(v157) >> 2);
                if (v88 >= 0x10)
                  v89 = v88 + 1;
                else
                  v89 = 16;
                if (v89 <= (unint64_t)HIDWORD(v157) + 1)
                  v90 = HIDWORD(v157) + 1;
                else
                  v90 = v89;
                if (v90 >> 29)
                {
                  __break(0xC471u);
                  JUMPOUT(0x195DA98ACLL);
                }
                v91 = v156;
                v92 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(8 * v90));
                LODWORD(v157) = v90;
                v156 = v92;
                memcpy(v92, v91, 8 * v87);
                if (v91)
                {
                  if (v156 == v91)
                  {
                    v156 = 0;
                    LODWORD(v157) = 0;
                  }
                  WTF::fastFree(v91, v82);
                }
                v87 = HIDWORD(v157);
                v93 = v156;
                if (v77)
                  *(_DWORD *)v77 += 2;
                *((_QWORD *)v93 + v87) = v77;
                v86 = v157;
              }
              else
              {
                v93 = v156;
                if (v77)
                  *(_DWORD *)v77 += 2;
                *((_QWORD *)v93 + v87) = v77;
              }
              v100 = (v87 + 1);
              HIDWORD(v157) = v100;
              if ((_DWORD)v100 == v86)
              {
                v101 = v100 + (v100 >> 2);
                if (v101 >= 0x10)
                  v102 = v101 + 1;
                else
                  v102 = 16;
                if (v102 <= v100 + 1)
                  v103 = v100 + 1;
                else
                  v103 = v102;
                if (v103 >> 29)
                {
                  __break(0xC471u);
                  JUMPOUT(0x195DA98B4);
                }
                v104 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(8 * v103));
                LODWORD(v157) = v103;
                v156 = v104;
                memcpy(v104, v93, 8 * v100);
                if (v156 == v93)
                {
                  v156 = 0;
                  LODWORD(v157) = 0;
                }
                WTF::fastFree(v93, v105);
                v106 = HIDWORD(v157);
                v93 = v156;
                if (v78)
                  *(_DWORD *)v78 += 2;
                v107 = v106 + 1;
                *((_QWORD *)v93 + v106) = v78;
                v86 = v157;
              }
              else
              {
                v107 = v87 + 2;
                if (v78)
                  *(_DWORD *)v78 += 2;
                *((_QWORD *)v93 + v100) = v78;
              }
              HIDWORD(v157) = v107;
              v108 = v107;
              if (v107 != v86)
              {
                v116 = v107 + 1;
                if (v80)
                  *(_DWORD *)v80 += 2;
                *((_QWORD *)v93 + v107) = v80;
LABEL_246:
                HIDWORD(v157) = v116;
LABEL_247:
                if (v169)
                {
                  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)&v166, (unsigned int *)&v156);
                }
                else
                {
                  v117 = HIDWORD(v157);
                  v166 = 0;
                  v167 = 0;
                  v168 = HIDWORD(v157);
                  if (HIDWORD(v157))
                  {
                    if (HIDWORD(v157) >> 29)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x195DA98E4);
                    }
                    v148 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * HIDWORD(v157)));
                    v167 = v117;
                    v166 = (_DWORD **)v148;
                    if (HIDWORD(v157))
                    {
                      v149 = v156;
                      v150 = 8 * HIDWORD(v157);
                      do
                      {
                        v151 = *(_DWORD **)v149;
                        if (*(_QWORD *)v149)
                          *v151 += 2;
                        *v148++ = v151;
                        v149 = (WTF::StringImpl *)((char *)v149 + 8);
                        v150 -= 8;
                      }
                      while (v150);
                    }
                  }
                  v169 = 1;
                }
                v118 = v155;
                v155 = 0;
                if (v118)
                {
                  if (*((_DWORD *)v118 + 2) == 1)
                  {
                    WebCore::SpaceSplitStringData::destroy(v118, (WTF::StringImpl *)v82);
                    if (!v80)
                      goto LABEL_257;
                    goto LABEL_255;
                  }
                  --*((_DWORD *)v118 + 2);
                }
                if (!v80)
                  goto LABEL_257;
LABEL_255:
                if (*(_DWORD *)v80 == 2)
                  WTF::StringImpl::destroy(v80, (WTF::StringImpl *)v82);
                else
                  *(_DWORD *)v80 -= 2;
LABEL_257:
                if (v78)
                {
                  if (*(_DWORD *)v78 == 2)
                  {
                    WTF::StringImpl::destroy(v78, (WTF::StringImpl *)v82);
                    if (v77)
                    {
LABEL_261:
                      if (*(_DWORD *)v77 == 2)
                        WTF::StringImpl::destroy(v77, (WTF::StringImpl *)v82);
                      else
                        *(_DWORD *)v77 -= 2;
                    }
LABEL_263:
                    v119 = v156;
                    if (HIDWORD(v157))
                    {
                      v146 = 8 * HIDWORD(v157);
                      do
                      {
                        v147 = *(WTF::StringImpl **)v119;
                        *(_QWORD *)v119 = 0;
                        if (v147)
                        {
                          if (*(_DWORD *)v147 == 2)
                            WTF::StringImpl::destroy(v147, (WTF::StringImpl *)v82);
                          else
                            *(_DWORD *)v147 -= 2;
                        }
                        v119 = (WTF::StringImpl *)((char *)v119 + 8);
                        v146 -= 8;
                      }
                      while (v146);
                      v119 = v156;
                      if (!v156)
                        goto LABEL_73;
                      goto LABEL_265;
                    }
                    if (v156)
                    {
LABEL_265:
                      v156 = 0;
                      LODWORD(v157) = 0;
                      WTF::fastFree(v119, v82);
                    }
LABEL_73:
                    (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::AccessibilityObject *))(*(_QWORD *)v19 + 2232))(&v156, v19);
                    v48 = v156;
                    if (v156)
                      *(_DWORD *)v156 += 2;
                    v49 = v170[0];
                    v170[0] = v48;
                    if (v49)
                    {
                      if (*(_DWORD *)v49 == 2)
                      {
                        WTF::StringImpl::destroy(v49, v47);
                        v48 = v156;
                      }
                      else
                      {
                        *(_DWORD *)v49 -= 2;
                      }
                    }
                    v156 = 0;
                    if (v48)
                    {
                      if (*(_DWORD *)v48 == 2)
                        WTF::StringImpl::destroy(v48, v47);
                      else
                        *(_DWORD *)v48 -= 2;
                    }
                    v50 = v158;
                    v158 = 0;
                    if (v50)
                    {
                      if (*(_DWORD *)v50 == 2)
                        WTF::StringImpl::destroy(v50, v47);
                      else
                        *(_DWORD *)v50 -= 2;
                    }
                    goto LABEL_84;
                  }
                  *(_DWORD *)v78 -= 2;
                }
                if (v77)
                  goto LABEL_261;
                goto LABEL_263;
              }
              v109 = v107 + 1;
              v110 = v107 + ((unint64_t)v107 >> 2);
              if (v110 >= 0x10)
                v111 = v110 + 1;
              else
                v111 = 16;
              if (v111 <= v109)
                v112 = v108 + 1;
              else
                v112 = v111;
              if (v112 >> 29)
              {
                __break(0xC471u);
                JUMPOUT(0x195DA98BCLL);
              }
              v113 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(8 * v112));
              LODWORD(v157) = v112;
              v156 = v113;
              memcpy(v113, v93, 8 * v108);
            }
            else
            {
              v96 = v155;
              if (!v155)
                goto LABEL_247;
              v97 = 0;
              while (*((WTF::StringImpl **)v155 + v97 + 2) != v77)
              {
                if (++v97 >= (unint64_t)*((unsigned int *)v155 + 3))
                  goto LABEL_197;
              }
              v120 = HIDWORD(v157);
              if (HIDWORD(v157) == (_DWORD)v157)
              {
                v121 = HIDWORD(v157) + ((unint64_t)HIDWORD(v157) >> 2);
                if (v121 >= 0x10)
                  v122 = v121 + 1;
                else
                  v122 = 16;
                if (v122 <= (unint64_t)HIDWORD(v157) + 1)
                  v123 = HIDWORD(v157) + 1;
                else
                  v123 = v122;
                if (v123 >> 29)
                {
                  __break(0xC471u);
                  JUMPOUT(0x195DA98C4);
                }
                v124 = v156;
                v125 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(8 * v123));
                LODWORD(v157) = v123;
                v156 = v125;
                memcpy(v125, v124, 8 * v120);
                if (v124)
                {
                  if (v156 == v124)
                  {
                    v156 = 0;
                    LODWORD(v157) = 0;
                  }
                  WTF::fastFree(v124, v82);
                }
                v120 = HIDWORD(v157);
                v126 = v156;
                if (v77)
                  *(_DWORD *)v77 += 2;
                v127 = (WTF::StringImpl **)((char *)v126 + 8 * v120);
              }
              else
              {
                v127 = (WTF::StringImpl **)((char *)v156 + 8 * HIDWORD(v157));
                if (v77)
                  *(_DWORD *)v77 += 2;
              }
              *v127 = v77;
              HIDWORD(v157) = v120 + 1;
              v96 = v155;
              if (!v155)
                goto LABEL_247;
LABEL_197:
              v98 = 0;
              while (*((WTF::StringImpl **)v96 + v98 + 2) != v78)
              {
                if (++v98 >= (unint64_t)*((unsigned int *)v96 + 3))
                  goto LABEL_200;
              }
              v128 = HIDWORD(v157);
              if (HIDWORD(v157) == (_DWORD)v157)
              {
                v129 = HIDWORD(v157) + ((unint64_t)HIDWORD(v157) >> 2);
                if (v129 >= 0x10)
                  v130 = v129 + 1;
                else
                  v130 = 16;
                if (v130 <= (unint64_t)HIDWORD(v157) + 1)
                  v131 = HIDWORD(v157) + 1;
                else
                  v131 = v130;
                if (v131 >> 29)
                {
                  __break(0xC471u);
                  JUMPOUT(0x195DA98CCLL);
                }
                v132 = v156;
                v133 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(8 * v131));
                LODWORD(v157) = v131;
                v156 = v133;
                memcpy(v133, v132, 8 * v128);
                if (v132)
                {
                  if (v156 == v132)
                  {
                    v156 = 0;
                    LODWORD(v157) = 0;
                  }
                  WTF::fastFree(v132, v82);
                }
                v128 = HIDWORD(v157);
                v134 = v156;
                if (v78)
                  *(_DWORD *)v78 += 2;
                v135 = (WTF::StringImpl **)((char *)v134 + 8 * v128);
              }
              else
              {
                v135 = (WTF::StringImpl **)((char *)v156 + 8 * HIDWORD(v157));
                if (v78)
                  *(_DWORD *)v78 += 2;
              }
              *v135 = v78;
              HIDWORD(v157) = v128 + 1;
              v96 = v155;
              if (!v155)
                goto LABEL_247;
LABEL_200:
              v99 = 0;
              while (*((WTF::StringImpl **)v96 + v99 + 2) != v80)
              {
                if (++v99 >= (unint64_t)*((unsigned int *)v96 + 3))
                  goto LABEL_247;
              }
              v136 = HIDWORD(v157);
              if (HIDWORD(v157) != (_DWORD)v157)
              {
                v116 = HIDWORD(v157) + 1;
                v141 = v156;
                if (v80)
                  *(_DWORD *)v80 += 2;
                *((_QWORD *)v141 + v136) = v80;
                goto LABEL_246;
              }
              v137 = HIDWORD(v157) + ((unint64_t)HIDWORD(v157) >> 2);
              if (v137 >= 0x10)
                v138 = v137 + 1;
              else
                v138 = 16;
              if (v138 <= (unint64_t)HIDWORD(v157) + 1)
                v139 = HIDWORD(v157) + 1;
              else
                v139 = v138;
              if (v139 >> 29)
              {
                __break(0xC471u);
                JUMPOUT(0x195DA98D4);
              }
              v93 = v156;
              v140 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(8 * v139));
              LODWORD(v157) = v139;
              v156 = v140;
              memcpy(v140, v93, 8 * v136);
              if (!v93)
                goto LABEL_240;
            }
            if (v156 == v93)
            {
              v156 = 0;
              LODWORD(v157) = 0;
            }
            WTF::fastFree(v93, v82);
LABEL_240:
            v114 = HIDWORD(v157);
            v115 = v156;
            if (v80)
              *(_DWORD *)v80 += 2;
            *((_QWORD *)v115 + v114) = v80;
            HIDWORD(v157) = v114 + 1;
            goto LABEL_247;
          }
        }
        else
        {
          v85 = 0;
          if (!v190)
            goto LABEL_163;
        }
        if (*(_DWORD *)v190 == 2)
          WTF::StringImpl::destroy(v190, (WTF::StringImpl *)v82);
        else
          *(_DWORD *)v190 -= 2;
        goto LABEL_163;
      }
LABEL_152:
      v155 = 0;
      goto LABEL_153;
    }
  }
LABEL_5:
  *(_BYTE *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 152) = 0;
  if (v189)
  {
    *(_WORD *)(a3 + 8) = v173;
    v8 = v174;
    v174 = 0uLL;
    v9 = v175;
    *(_OWORD *)(a3 + 16) = v8;
    *(_OWORD *)(a3 + 32) = v9;
    *(_OWORD *)(a3 + 48) = v176;
    *(_QWORD *)(a3 + 64) = v177;
    *(_WORD *)(a3 + 72) = v178;
    v10 = v179;
    v177 = 0;
    v179 = 0;
    *(_QWORD *)(a3 + 80) = v10;
    *(_WORD *)(a3 + 88) = v180;
    *(_BYTE *)(a3 + 96) = 0;
    *(_BYTE *)(a3 + 112) = 0;
    if (v183)
    {
      *(_QWORD *)(a3 + 96) = v181;
      v11 = v182;
      v181 = 0;
      v182 = 0;
      *(_QWORD *)(a3 + 104) = v11;
      *(_BYTE *)(a3 + 112) = 1;
    }
    *(_QWORD *)(a3 + 120) = v184;
    *(_DWORD *)(a3 + 128) = v185;
    *(_WORD *)(a3 + 132) = v186;
    v12 = v187;
    v184 = 0;
    v187 = 0;
    *(_QWORD *)(a3 + 136) = v12;
    *(_WORD *)(a3 + 144) = v188;
    *(_BYTE *)(a3 + 152) = 1;
    *(_DWORD *)(a3 + 160) = 0;
    WebCore::InspectorAuditAccessibilityObject::ComputedProperties::~ComputedProperties((WebCore::InspectorAuditAccessibilityObject::ComputedProperties *)&v173, v5);
  }
  else
  {
    *(_DWORD *)(a3 + 160) = 0;
  }
}

WebCore::AccessibilityObject *WebCore::InspectorAuditAccessibilityObject::getControlledNodes@<X0>(Inspector::InspectorAuditAgent **this@<X0>, WebCore::Node *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v5;
  WebCore::AccessibilityObject *result;
  unsigned __int8 v7;
  int v8;
  uint64_t v9;
  BOOL v10;
  WebCore::AXObjectCache **v11;
  uint64_t v12;
  WebCore::AXObjectCache *v13;
  void *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  WTF *v23;
  int v24;
  unsigned int v25;
  WebCore::AXObjectCache *v26;

  if ((Inspector::InspectorAuditAgent::hasActiveAudit(this[1]) & 1) == 0)
  {
    result = (WebCore::AccessibilityObject *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)(a3 + 8) = 31;
    v8 = 1;
    goto LABEL_7;
  }
  v5 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
  if ((v5 & 1) == 0)
    atomic_store(1u, WebCore::AXObjectCache::gAccessibilityEnabled);
  result = *(WebCore::AccessibilityObject **)(*((_QWORD *)a2 + 5) + 8);
  v7 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
  if ((v7 & 1) == 0)
  {
LABEL_5:
    v8 = 0;
    *(_BYTE *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 24) = 0;
LABEL_7:
    *(_DWORD *)(a3 + 32) = v8;
    return result;
  }
  v9 = WebCore::Document::topDocument((uint64_t)result);
  *(_DWORD *)(v9 + 24) += 2;
  v23 = (WTF *)v9;
  if (*(_QWORD *)(v9 + 1944))
    v10 = *(_BYTE *)(v9 + 3405) == 0;
  else
    v10 = 0;
  if (!v10)
  {
    result = (WebCore::AccessibilityObject *)WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v23);
    goto LABEL_5;
  }
  v11 = (WebCore::AXObjectCache **)v9;
  v12 = *(_QWORD *)(v9 + 1488);
  if (v12)
  {
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v23);
  }
  else
  {
    v13 = (WebCore::AXObjectCache *)WTF::fastMalloc((WTF *)0x318);
    v26 = WebCore::AXObjectCache::AXObjectCache(v13, (WebCore::Document *)v11);
    std::unique_ptr<WebCore::AXObjectCache>::operator=[abi:sn180100](v11 + 186, &v26);
    std::unique_ptr<WebCore::AXObjectCache>::~unique_ptr[abi:sn180100](&v26);
    WebCore::Document::hasEverCreatedAnAXObjectCache = 1;
    v12 = (uint64_t)v11[186];
    result = (WebCore::AccessibilityObject *)WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v23);
    if (!v12)
      goto LABEL_5;
  }
  result = (WebCore::AccessibilityObject *)WebCore::AXObjectCache::getOrCreate(v12, (uint64_t)a2, 0);
  if (!result)
    goto LABEL_5;
  result = (WebCore::AccessibilityObject *)WebCore::AccessibilityObject::elementsFromAttribute(result, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_controlsAttr, (WTF::StringImpl *)&v23);
  v15 = v25;
  if (!v25)
  {
    LODWORD(v17) = 0;
    v16 = 0;
    goto LABEL_31;
  }
  if (!(v25 >> 29))
  {
    v16 = WTF::fastMalloc((WTF *)(8 * v25));
    result = v23;
    if (!v25)
    {
      LODWORD(v17) = 0;
      goto LABEL_33;
    }
    v17 = 0;
    v18 = 8 * v25;
    v19 = v18;
    do
    {
      v20 = *((_QWORD *)result + v17);
      *((_QWORD *)result + v17) = 0;
      *(_QWORD *)(v16 + 8 * v17++) = v20;
      v19 -= 8;
    }
    while (v19);
    v21 = v23;
    do
    {
      v22 = *(_QWORD *)v21;
      *(_QWORD *)v21 = 0;
      if (v22)
      {
        if (*(_DWORD *)(v22 + 24) == 2)
        {
          if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v22, v14);
        }
        else
        {
          *(_DWORD *)(v22 + 24) -= 2;
        }
      }
      v21 = (WTF *)((char *)v21 + 8);
      v18 -= 8;
    }
    while (v18);
LABEL_31:
    result = v23;
LABEL_33:
    if (result)
    {
      v23 = 0;
      v24 = 0;
      result = (WebCore::AccessibilityObject *)WTF::fastFree(result, v14);
    }
    v8 = 0;
    *(_QWORD *)(a3 + 8) = v16;
    *(_DWORD *)(a3 + 16) = v15;
    *(_DWORD *)(a3 + 20) = v17;
    *(_BYTE *)(a3 + 24) = 1;
    goto LABEL_7;
  }
  __break(0xC471u);
  return result;
}

WebCore::AccessibilityObject *WebCore::InspectorAuditAccessibilityObject::getFlowedNodes@<X0>(Inspector::InspectorAuditAgent **this@<X0>, WebCore::Node *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v5;
  WebCore::AccessibilityObject *result;
  unsigned __int8 v7;
  int v8;
  uint64_t v9;
  BOOL v10;
  WebCore::AXObjectCache **v11;
  uint64_t v12;
  WebCore::AXObjectCache *v13;
  void *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  WTF *v23;
  int v24;
  unsigned int v25;
  WebCore::AXObjectCache *v26;

  if ((Inspector::InspectorAuditAgent::hasActiveAudit(this[1]) & 1) == 0)
  {
    result = (WebCore::AccessibilityObject *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)(a3 + 8) = 31;
    v8 = 1;
    goto LABEL_7;
  }
  v5 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
  if ((v5 & 1) == 0)
    atomic_store(1u, WebCore::AXObjectCache::gAccessibilityEnabled);
  result = *(WebCore::AccessibilityObject **)(*((_QWORD *)a2 + 5) + 8);
  v7 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
  if ((v7 & 1) == 0)
  {
LABEL_5:
    v8 = 0;
    *(_BYTE *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 24) = 0;
LABEL_7:
    *(_DWORD *)(a3 + 32) = v8;
    return result;
  }
  v9 = WebCore::Document::topDocument((uint64_t)result);
  *(_DWORD *)(v9 + 24) += 2;
  v23 = (WTF *)v9;
  if (*(_QWORD *)(v9 + 1944))
    v10 = *(_BYTE *)(v9 + 3405) == 0;
  else
    v10 = 0;
  if (!v10)
  {
    result = (WebCore::AccessibilityObject *)WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v23);
    goto LABEL_5;
  }
  v11 = (WebCore::AXObjectCache **)v9;
  v12 = *(_QWORD *)(v9 + 1488);
  if (v12)
  {
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v23);
  }
  else
  {
    v13 = (WebCore::AXObjectCache *)WTF::fastMalloc((WTF *)0x318);
    v26 = WebCore::AXObjectCache::AXObjectCache(v13, (WebCore::Document *)v11);
    std::unique_ptr<WebCore::AXObjectCache>::operator=[abi:sn180100](v11 + 186, &v26);
    std::unique_ptr<WebCore::AXObjectCache>::~unique_ptr[abi:sn180100](&v26);
    WebCore::Document::hasEverCreatedAnAXObjectCache = 1;
    v12 = (uint64_t)v11[186];
    result = (WebCore::AccessibilityObject *)WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v23);
    if (!v12)
      goto LABEL_5;
  }
  result = (WebCore::AccessibilityObject *)WebCore::AXObjectCache::getOrCreate(v12, (uint64_t)a2, 0);
  if (!result)
    goto LABEL_5;
  result = (WebCore::AccessibilityObject *)WebCore::AccessibilityObject::elementsFromAttribute(result, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_flowtoAttr, (WTF::StringImpl *)&v23);
  v15 = v25;
  if (!v25)
  {
    LODWORD(v17) = 0;
    v16 = 0;
    goto LABEL_31;
  }
  if (!(v25 >> 29))
  {
    v16 = WTF::fastMalloc((WTF *)(8 * v25));
    result = v23;
    if (!v25)
    {
      LODWORD(v17) = 0;
      goto LABEL_33;
    }
    v17 = 0;
    v18 = 8 * v25;
    v19 = v18;
    do
    {
      v20 = *((_QWORD *)result + v17);
      *((_QWORD *)result + v17) = 0;
      *(_QWORD *)(v16 + 8 * v17++) = v20;
      v19 -= 8;
    }
    while (v19);
    v21 = v23;
    do
    {
      v22 = *(_QWORD *)v21;
      *(_QWORD *)v21 = 0;
      if (v22)
      {
        if (*(_DWORD *)(v22 + 24) == 2)
        {
          if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v22, v14);
        }
        else
        {
          *(_DWORD *)(v22 + 24) -= 2;
        }
      }
      v21 = (WTF *)((char *)v21 + 8);
      v18 -= 8;
    }
    while (v18);
LABEL_31:
    result = v23;
LABEL_33:
    if (result)
    {
      v23 = 0;
      v24 = 0;
      result = (WebCore::AccessibilityObject *)WTF::fastFree(result, v14);
    }
    v8 = 0;
    *(_QWORD *)(a3 + 8) = v16;
    *(_DWORD *)(a3 + 16) = v15;
    *(_DWORD *)(a3 + 20) = v17;
    *(_BYTE *)(a3 + 24) = 1;
    goto LABEL_7;
  }
  __break(0xC471u);
  return result;
}

_DWORD *WebCore::InspectorAuditAccessibilityObject::getMouseEventNode@<X0>(Inspector::InspectorAuditAgent **this@<X0>, WebCore::Node *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v5;
  _DWORD *result;
  unsigned __int8 v7;
  int v8;
  uint64_t v9;
  BOOL v10;
  WebCore::AXObjectCache **v11;
  uint64_t v12;
  WebCore::AXObjectCache *v13;
  _DWORD *v14;
  WebCore::AXObjectCache *v15;
  uint64_t v16;

  if ((Inspector::InspectorAuditAgent::hasActiveAudit(this[1]) & 1) == 0)
  {
    result = (_DWORD *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 31;
    v8 = 1;
    goto LABEL_7;
  }
  v5 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
  if ((v5 & 1) == 0)
    atomic_store(1u, WebCore::AXObjectCache::gAccessibilityEnabled);
  result = *(_DWORD **)(*((_QWORD *)a2 + 5) + 8);
  v7 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
  if ((v7 & 1) == 0)
    goto LABEL_5;
  v9 = WebCore::Document::topDocument((uint64_t)result);
  *(_DWORD *)(v9 + 24) += 2;
  v16 = v9;
  if (*(_QWORD *)(v9 + 1944))
    v10 = *(_BYTE *)(v9 + 3405) == 0;
  else
    v10 = 0;
  if (!v10)
  {
    result = WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v16);
LABEL_5:
    v8 = 0;
    *(_QWORD *)a3 = 0;
    goto LABEL_7;
  }
  v11 = (WebCore::AXObjectCache **)v9;
  v12 = *(_QWORD *)(v9 + 1488);
  if (v12)
  {
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v16);
  }
  else
  {
    v13 = (WebCore::AXObjectCache *)WTF::fastMalloc((WTF *)0x318);
    v15 = WebCore::AXObjectCache::AXObjectCache(v13, (WebCore::Document *)v11);
    std::unique_ptr<WebCore::AXObjectCache>::operator=[abi:sn180100](v11 + 186, &v15);
    std::unique_ptr<WebCore::AXObjectCache>::~unique_ptr[abi:sn180100](&v15);
    WebCore::Document::hasEverCreatedAnAXObjectCache = 1;
    v12 = (uint64_t)v11[186];
    result = WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v16);
    if (!v12)
      goto LABEL_5;
  }
  result = (_DWORD *)WebCore::AXObjectCache::getOrCreate(v12, (uint64_t)a2, 0);
  if (!result)
    goto LABEL_5;
  v14 = result;
  result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 2672))(result);
  if (!(_DWORD)result)
    goto LABEL_5;
  result = (_DWORD *)WebCore::AccessibilityNodeObject::mouseButtonListener((uint64_t)v14, 2);
  if (result)
    result[6] += 2;
  v8 = 0;
  *(_QWORD *)a3 = result;
LABEL_7:
  *(_DWORD *)(a3 + 16) = v8;
  return result;
}

WTF *WebCore::InspectorAuditAccessibilityObject::getOwnedNodes@<X0>(Inspector::InspectorAuditAgent **this@<X0>, WebCore::Node *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v5;
  WTF *result;
  unsigned __int8 v7;
  int v8;
  uint64_t v9;
  BOOL v10;
  WebCore::AXObjectCache **v11;
  uint64_t v12;
  WebCore::AXObjectCache *v13;
  WebCore::AccessibilityObject *v14;
  void *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;
  uint64_t v23;
  WTF *v24;
  int v25;
  unsigned int v26;
  WebCore::AXObjectCache *v27;

  if ((Inspector::InspectorAuditAgent::hasActiveAudit(this[1]) & 1) == 0)
  {
    result = (WTF *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)(a3 + 8) = 31;
    v8 = 1;
    goto LABEL_7;
  }
  v5 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
  if ((v5 & 1) == 0)
    atomic_store(1u, WebCore::AXObjectCache::gAccessibilityEnabled);
  result = *(WTF **)(*((_QWORD *)a2 + 5) + 8);
  v7 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
  if ((v7 & 1) == 0)
  {
LABEL_5:
    v8 = 0;
    *(_BYTE *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 24) = 0;
LABEL_7:
    *(_DWORD *)(a3 + 32) = v8;
    return result;
  }
  v9 = WebCore::Document::topDocument((uint64_t)result);
  *(_DWORD *)(v9 + 24) += 2;
  v24 = (WTF *)v9;
  if (*(_QWORD *)(v9 + 1944))
    v10 = *(_BYTE *)(v9 + 3405) == 0;
  else
    v10 = 0;
  if (!v10)
  {
    result = (WTF *)WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v24);
    goto LABEL_5;
  }
  v11 = (WebCore::AXObjectCache **)v9;
  v12 = *(_QWORD *)(v9 + 1488);
  if (v12)
  {
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v24);
  }
  else
  {
    v13 = (WebCore::AXObjectCache *)WTF::fastMalloc((WTF *)0x318);
    v27 = WebCore::AXObjectCache::AXObjectCache(v13, (WebCore::Document *)v11);
    std::unique_ptr<WebCore::AXObjectCache>::operator=[abi:sn180100](v11 + 186, &v27);
    std::unique_ptr<WebCore::AXObjectCache>::~unique_ptr[abi:sn180100](&v27);
    WebCore::Document::hasEverCreatedAnAXObjectCache = 1;
    v12 = (uint64_t)v11[186];
    result = (WTF *)WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v24);
    if (!v12)
      goto LABEL_5;
  }
  result = (WTF *)WebCore::AXObjectCache::getOrCreate(v12, (uint64_t)a2, 0);
  if (!result)
    goto LABEL_5;
  v14 = result;
  result = (WTF *)(*(uint64_t (**)(WTF *))(*(_QWORD *)result + 976))(result);
  if (!(_DWORD)result)
    goto LABEL_5;
  result = (WTF *)WebCore::AccessibilityObject::elementsFromAttribute(v14, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_ownsAttr, (WTF::StringImpl *)&v24);
  v16 = v26;
  if (!v26)
  {
    LODWORD(v18) = 0;
    v17 = 0;
    goto LABEL_32;
  }
  if (!(v26 >> 29))
  {
    v17 = WTF::fastMalloc((WTF *)(8 * v26));
    result = v24;
    if (!v26)
    {
      LODWORD(v18) = 0;
      goto LABEL_34;
    }
    v18 = 0;
    v19 = 8 * v26;
    v20 = v19;
    do
    {
      v21 = *((_QWORD *)result + v18);
      *((_QWORD *)result + v18) = 0;
      *(_QWORD *)(v17 + 8 * v18++) = v21;
      v20 -= 8;
    }
    while (v20);
    v22 = v24;
    do
    {
      v23 = *(_QWORD *)v22;
      *(_QWORD *)v22 = 0;
      if (v23)
      {
        if (*(_DWORD *)(v23 + 24) == 2)
        {
          if ((*(_WORD *)(v23 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v23, v15);
        }
        else
        {
          *(_DWORD *)(v23 + 24) -= 2;
        }
      }
      v22 = (WTF *)((char *)v22 + 8);
      v19 -= 8;
    }
    while (v19);
LABEL_32:
    result = v24;
LABEL_34:
    if (result)
    {
      v24 = 0;
      v25 = 0;
      result = (WTF *)WTF::fastFree(result, v15);
    }
    v8 = 0;
    *(_QWORD *)(a3 + 8) = v17;
    *(_DWORD *)(a3 + 16) = v16;
    *(_DWORD *)(a3 + 20) = v18;
    *(_BYTE *)(a3 + 24) = 1;
    goto LABEL_7;
  }
  __break(0xC471u);
  return result;
}

_DWORD *WebCore::InspectorAuditAccessibilityObject::getParentNode@<X0>(Inspector::InspectorAuditAgent **this@<X0>, WebCore::Node *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v5;
  _DWORD *result;
  unsigned __int8 v7;
  int v8;
  uint64_t v9;
  BOOL v10;
  WebCore::AXObjectCache **v11;
  uint64_t v12;
  WebCore::AXObjectCache *v13;
  WebCore::AXObjectCache *v14;
  uint64_t v15;

  if ((Inspector::InspectorAuditAgent::hasActiveAudit(this[1]) & 1) == 0)
  {
    result = (_DWORD *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 31;
    v8 = 1;
    goto LABEL_7;
  }
  v5 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
  if ((v5 & 1) == 0)
    atomic_store(1u, WebCore::AXObjectCache::gAccessibilityEnabled);
  result = *(_DWORD **)(*((_QWORD *)a2 + 5) + 8);
  v7 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
  if ((v7 & 1) == 0)
    goto LABEL_5;
  v9 = WebCore::Document::topDocument((uint64_t)result);
  *(_DWORD *)(v9 + 24) += 2;
  v15 = v9;
  if (*(_QWORD *)(v9 + 1944))
    v10 = *(_BYTE *)(v9 + 3405) == 0;
  else
    v10 = 0;
  if (!v10)
  {
    result = WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v15);
LABEL_5:
    v8 = 0;
    *(_QWORD *)a3 = 0;
    goto LABEL_7;
  }
  v11 = (WebCore::AXObjectCache **)v9;
  v12 = *(_QWORD *)(v9 + 1488);
  if (v12)
  {
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v15);
  }
  else
  {
    v13 = (WebCore::AXObjectCache *)WTF::fastMalloc((WTF *)0x318);
    v14 = WebCore::AXObjectCache::AXObjectCache(v13, (WebCore::Document *)v11);
    std::unique_ptr<WebCore::AXObjectCache>::operator=[abi:sn180100](v11 + 186, &v14);
    std::unique_ptr<WebCore::AXObjectCache>::~unique_ptr[abi:sn180100](&v14);
    WebCore::Document::hasEverCreatedAnAXObjectCache = 1;
    v12 = (uint64_t)v11[186];
    result = WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v15);
    if (!v12)
      goto LABEL_5;
  }
  result = (_DWORD *)WebCore::AXObjectCache::getOrCreate(v12, (uint64_t)a2, 0);
  if (!result)
    goto LABEL_5;
  result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 1240))(result);
  if (!result)
    goto LABEL_5;
  result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 840))(result);
  if (result)
    result[6] += 2;
  v8 = 0;
  *(_QWORD *)a3 = result;
LABEL_7:
  *(_DWORD *)(a3 + 16) = v8;
  return result;
}

WebCore::Node *WebCore::InspectorAuditAccessibilityObject::getSelectedChildNodes@<X0>(Inspector::InspectorAuditAgent **this@<X0>, WebCore::Node *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v5;
  WebCore::Node *result;
  unsigned __int8 v7;
  int v8;
  uint64_t v9;
  BOOL v10;
  WebCore::AXObjectCache **v11;
  uint64_t v12;
  WebCore::AXObjectCache *v13;
  void *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  WebCore::Node *v22;
  _QWORD *v23;
  unsigned int v24;
  char v25;
  WebCore::AXObjectCache *v26;
  uint64_t v27;

  if ((Inspector::InspectorAuditAgent::hasActiveAudit(this[1]) & 1) == 0)
  {
    result = (WebCore::Node *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)(a3 + 8) = 31;
    v8 = 1;
    goto LABEL_7;
  }
  v5 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
  if ((v5 & 1) == 0)
    atomic_store(1u, WebCore::AXObjectCache::gAccessibilityEnabled);
  result = *(WebCore::Node **)(*((_QWORD *)a2 + 5) + 8);
  v7 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
  if ((v7 & 1) == 0)
    goto LABEL_5;
  v9 = WebCore::Document::topDocument((uint64_t)result);
  *(_DWORD *)(v9 + 24) += 2;
  v23 = (_QWORD *)v9;
  if (*(_QWORD *)(v9 + 1944))
    v10 = *(_BYTE *)(v9 + 3405) == 0;
  else
    v10 = 0;
  if (!v10)
  {
    result = (WebCore::Node *)WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v23);
LABEL_5:
    v8 = 0;
    *(_BYTE *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 24) = 0;
    goto LABEL_7;
  }
  v11 = (WebCore::AXObjectCache **)v9;
  v12 = *(_QWORD *)(v9 + 1488);
  if (v12)
  {
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v23);
  }
  else
  {
    v13 = (WebCore::AXObjectCache *)WTF::fastMalloc((WTF *)0x318);
    v26 = WebCore::AXObjectCache::AXObjectCache(v13, (WebCore::Document *)v11);
    std::unique_ptr<WebCore::AXObjectCache>::operator=[abi:sn180100](v11 + 186, &v26);
    std::unique_ptr<WebCore::AXObjectCache>::~unique_ptr[abi:sn180100](&v26);
    WebCore::Document::hasEverCreatedAnAXObjectCache = 1;
    v12 = (uint64_t)v11[186];
    result = (WebCore::Node *)WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v23);
    if (!v12)
      goto LABEL_5;
  }
  result = (WebCore::Node *)WebCore::AXObjectCache::getOrCreate(v12, (uint64_t)a2, 0);
  if (!result)
    goto LABEL_5;
  v26 = 0;
  v27 = 0;
  result = (WebCore::Node *)(*(_QWORD *(**)(_QWORD **__return_ptr))(*(_QWORD *)result + 1928))(&v23);
  if (v25)
  {
    if (!v24)
      goto LABEL_32;
    v15 = v23;
    v16 = 8 * v24;
    do
    {
      result = (WebCore::Node *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v15 + 840))(*v15);
      if (result)
      {
        *((_DWORD *)result + 6) += 2;
        v22 = result;
        LODWORD(v17) = HIDWORD(v27);
        if (HIDWORD(v27) == (_DWORD)v27)
        {
          v18 = WTF::Vector<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v26, HIDWORD(v27) + 1, (unint64_t)&v22);
          v17 = HIDWORD(v27);
          v19 = (char *)v26;
          v20 = *(_QWORD *)v18;
          *(_QWORD *)v18 = 0;
          *(_QWORD *)&v19[8 * v17] = v20;
        }
        else
        {
          v22 = 0;
          *((_QWORD *)v26 + HIDWORD(v27)) = result;
        }
        HIDWORD(v27) = v17 + 1;
        result = v22;
        v22 = 0;
        if (result)
        {
          if (*((_DWORD *)result + 6) == 2)
          {
            if ((*((_WORD *)result + 15) & 0x400) == 0)
              result = (WebCore::Node *)WebCore::Node::removedLastRef(result, v14);
          }
          else
          {
            *((_DWORD *)result + 6) -= 2;
          }
        }
      }
      ++v15;
      v16 -= 8;
    }
    while (v16);
    if (v25)
LABEL_32:
      result = (WebCore::Node *)WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v23, v14);
  }
  v8 = 0;
  v21 = v27;
  *(_QWORD *)(a3 + 8) = v26;
  *(_QWORD *)(a3 + 16) = v21;
  *(_BYTE *)(a3 + 24) = 1;
LABEL_7:
  *(_DWORD *)(a3 + 32) = v8;
  return result;
}

uint64_t WebCore::InspectorAuditDOMObject::hasEventListeners@<X0>(Inspector::InspectorAuditAgent **this@<X0>, WebCore::Node *a2@<X1>, WTF::AtomStringImpl **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF *v10;
  WTF::AtomStringImpl *v11;
  char *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD **v20;
  _DWORD *v21;
  WTF *v22;
  uint64_t *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  WTF::StringImpl **v29;
  WTF::StringImpl *v30;
  WTF::AtomStringImpl *v31;

  result = Inspector::InspectorAuditAgent::hasActiveAudit(this[1]);
  if ((result & 1) == 0)
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v13 = 1;
    LOBYTE(v14) = 31;
LABEL_37:
    *(_BYTE *)a4 = v14;
    *(_DWORD *)(a4 + 16) = v13;
    return result;
  }
  v8 = *((_QWORD *)a2 + 2);
  if ((v8 & 0x1000000000000) == 0)
    goto LABEL_35;
  if (*a3)
  {
    v10 = (WTF *)WTF::fastMalloc((WTF *)0x80);
    v11 = *a3;
    if (*a3)
    {
      if ((*((_BYTE *)v11 + 16) & 0x10) != 0)
      {
        *(_DWORD *)v11 += 2;
      }
      else
      {
        WTF::AtomStringImpl::addSlowCase(v11, v9);
        v11 = v31;
      }
    }
    *(_QWORD *)v10 = v11;
    v12 = (char *)v10 + 8;
  }
  else
  {
    v15 = v8 & 0xFFFFFFFFFFFFLL;
    v14 = *(unsigned int *)((v8 & 0xFFFFFFFFFFFFLL) + 0x1C);
    if (!(_DWORD)v14)
    {
LABEL_36:
      v13 = 0;
      goto LABEL_37;
    }
    if (v14 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v16 = (WTF *)WTF::fastMalloc((WTF *)(8 * v14));
    v10 = v16;
    v18 = *(unsigned int *)(v15 + 28);
    if (!(_DWORD)v18)
    {
      result = WTF::fastFree(v16, v17);
LABEL_35:
      LOBYTE(v14) = 0;
      goto LABEL_36;
    }
    v19 = 0;
    v20 = *(_DWORD ***)(v15 + 16);
    do
    {
      v21 = *v20;
      if (*v20)
        *v21 += 2;
      *(_QWORD *)((char *)v16 + v19) = v21;
      v19 += 8;
      v20 += 4;
    }
    while (8 * v18 != v19);
    v12 = (char *)v16 + 8 * v18;
  }
  v22 = v10;
  while (1)
  {
    v23 = WebCore::EventTarget::eventListeners((uint64_t)a2, v22);
    v25 = *((unsigned int *)v23 + 3);
    if ((_DWORD)v25)
      break;
LABEL_22:
    v22 = (WTF *)((char *)v22 + 8);
    if (v22 == (WTF *)v12)
    {
      v28 = 1;
      goto LABEL_25;
    }
  }
  v26 = *v23;
  v27 = 8 * v25;
  while (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)v26 + 8) + 20))
  {
    v26 += 8;
    v27 -= 8;
    if (!v27)
      goto LABEL_22;
  }
  v28 = 0;
  *(_BYTE *)a4 = 1;
  *(_DWORD *)(a4 + 16) = 0;
LABEL_25:
  v29 = (WTF::StringImpl **)v10;
  do
  {
    v30 = *v29;
    *v29 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, v24);
      else
        *(_DWORD *)v30 -= 2;
    }
    ++v29;
  }
  while (v29 != (WTF::StringImpl **)v12);
  result = WTF::fastFree(v10, v24);
  if (v28)
    goto LABEL_35;
  return result;
}

void WebCore::InspectorAuditDOMObject::simulateUserInteraction(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  __int128 v13;
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if ((Inspector::InspectorAuditAgent::hasActiveAudit(*(Inspector::InspectorAuditAgent **)(a1 + 8)) & 1) != 0)
  {
    v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 48) + 16);
    LOBYTE(v13) = 0;
    v14 = 0;
    WebCore::UserGestureIndicator::UserGestureIndicator(&v11, 257, a2, 1, 0, &v13, 1);
    v12 = 1;
    HIBYTE(v12) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 1656))(v10);
    if ((v12 & 0x100) == 0)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 1664))(v10, 1);
    (*(void (**)(_QWORD))(*(_QWORD *)*a3 + 40))(*a3);
    a4[1] = 0;
    a4[2] = 0;
    *a4 = 0;
    if ((_BYTE)v12 && !HIBYTE(v12) && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 1656))(v10))
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 1664))(v10, 0);
    WebCore::UserGestureIndicator::~UserGestureIndicator((WebCore::UserGestureIndicator *)&v11);
    v8 = 0;
    v9 = 0;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v9 = 1;
    v8 = 31;
  }
  *(_BYTE *)a4 = v8;
  *((_BYTE *)a4 + 16) = v9;
}

void WebCore::InspectorAuditResourcesObject::~InspectorAuditResourcesObject(WebCore::InspectorAuditResourcesObject *this, WTF::StringImpl *a2)
{
  WTF *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  WebCore::CachedResource *v8;
  unsigned int **v9;
  uint64_t v10;
  WTF::StringImpl **v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  WTF *v22;
  uint64_t v23;
  WTF *v24;

  v3 = (WTF *)*((_QWORD *)this + 14);
  if (*((_DWORD *)this + 31))
  {
    v4 = *((unsigned int *)this + 30);
    v5 = (_QWORD *)*((_QWORD *)this + 14);
    if ((_DWORD)v4)
    {
      v6 = 0;
      while (!*(_QWORD *)((char *)v3 + v6))
      {
        v6 += 16;
        if (16 * v4 == v6)
          goto LABEL_20;
      }
      v5 = (_QWORD *)((char *)v3 + v6);
    }
    v7 = (_QWORD *)((char *)v3 + 16 * v4);
    if (v5 != v7)
    {
LABEL_9:
      v8 = (WebCore::CachedResource *)v5[1];
      v9 = (unsigned int **)((char *)this + 96);
      switch(*((_BYTE *)v8 + 556) & 0x1F)
      {
        case 0:
        case 6:
        case 7:
        case 8:
        case 9:
        case 0xA:
        case 0xB:
          v9 = (unsigned int **)((char *)this + 64);
          break;
        case 1:
          v9 = (unsigned int **)((char *)this + 48);
          break;
        case 2:
          break;
        case 4:
          v9 = (unsigned int **)((char *)this + 32);
          break;
        case 0x10:
          v9 = (unsigned int **)((char *)this + 80);
          break;
        default:
          v9 = (unsigned int **)((char *)this + 16);
          break;
      }
      WebCore::CachedResource::removeClient(v8, v9);
      while (1)
      {
        v5 += 2;
        if (v5 == v7)
          break;
        if (*v5)
        {
          if (v5 != v7)
            goto LABEL_9;
          break;
        }
      }
      v3 = (WTF *)*((_QWORD *)this + 14);
    }
  }
LABEL_20:
  if (v3)
  {
    v10 = *((unsigned int *)this + 30);
    if ((_DWORD)v10)
    {
      v11 = (WTF::StringImpl **)v3;
      do
      {
        v12 = *v11;
        *v11 = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy(v12, a2);
          else
            *(_DWORD *)v12 -= 2;
        }
        v11 += 2;
        --v10;
      }
      while (v10);
    }
    WTF::fastFree(v3, a2);
  }
  *((_QWORD *)this + 12) = &off_1E33F87C8;
  v13 = *((_QWORD *)this + 13);
  if (v13)
  {
    *(_QWORD *)(v13 + 8) = 0;
    v14 = (WTF *)*((_QWORD *)this + 13);
    *((_QWORD *)this + 13) = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 1)
        WTF::fastFree(v14, a2);
      else
        --*(_DWORD *)v14;
    }
  }
  else
  {
    *((_QWORD *)this + 13) = 0;
  }
  *((_QWORD *)this + 10) = &off_1E33F87C8;
  v15 = *((_QWORD *)this + 11);
  if (v15)
  {
    *(_QWORD *)(v15 + 8) = 0;
    v16 = (WTF *)*((_QWORD *)this + 11);
    *((_QWORD *)this + 11) = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
        WTF::fastFree(v16, a2);
      else
        --*(_DWORD *)v16;
    }
  }
  else
  {
    *((_QWORD *)this + 11) = 0;
  }
  *((_QWORD *)this + 8) = &off_1E33F87C8;
  v17 = *((_QWORD *)this + 9);
  if (v17)
  {
    *(_QWORD *)(v17 + 8) = 0;
    v18 = (WTF *)*((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 1)
        WTF::fastFree(v18, a2);
      else
        --*(_DWORD *)v18;
    }
  }
  else
  {
    *((_QWORD *)this + 9) = 0;
  }
  *((_QWORD *)this + 6) = &off_1E33F87C8;
  v19 = *((_QWORD *)this + 7);
  if (v19)
  {
    *(_QWORD *)(v19 + 8) = 0;
    v20 = (WTF *)*((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 1)
        WTF::fastFree(v20, a2);
      else
        --*(_DWORD *)v20;
    }
  }
  else
  {
    *((_QWORD *)this + 7) = 0;
  }
  *((_QWORD *)this + 4) = &off_1E33F87C8;
  v21 = *((_QWORD *)this + 5);
  if (v21)
  {
    *(_QWORD *)(v21 + 8) = 0;
    v22 = (WTF *)*((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 1)
        WTF::fastFree(v22, a2);
      else
        --*(_DWORD *)v22;
    }
  }
  else
  {
    *((_QWORD *)this + 5) = 0;
  }
  *((_QWORD *)this + 2) = &off_1E33F87C8;
  v23 = *((_QWORD *)this + 3);
  if (v23)
  {
    *(_QWORD *)(v23 + 8) = 0;
    v24 = (WTF *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 1)
        WTF::fastFree(v24, a2);
      else
        --*(_DWORD *)v24;
    }
  }
  else
  {
    *((_QWORD *)this + 3) = 0;
  }
}

void WebCore::InspectorAuditResourcesObject::InspectorAuditCachedStyleSheetClient::~InspectorAuditCachedStyleSheetClient(WebCore::InspectorAuditResourcesObject::InspectorAuditCachedStyleSheetClient *this, void *a2)
{
  uint64_t v3;
  WTF *v4;

  *(_QWORD *)this = &off_1E33F87C8;
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 0;
    v4 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 1)
        WTF::fastFree(v4, a2);
      else
        --*(_DWORD *)v4;
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  uint64_t v3;
  WTF *v4;

  *(_QWORD *)this = &off_1E33F87C8;
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 0;
    v4 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 1)
        WTF::fastFree(v4, a2);
      else
        --*(_DWORD *)v4;
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
  JUMPOUT(0x19AEA7644);
}

void WebCore::InspectorAuditResourcesObject::InspectorAuditCachedSVGDocumentClient::~InspectorAuditCachedSVGDocumentClient(WebCore::InspectorAuditResourcesObject::InspectorAuditCachedSVGDocumentClient *this, void *a2)
{
  uint64_t v3;
  WTF *v4;

  *(_QWORD *)this = &off_1E33F87C8;
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 0;
    v4 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 1)
        WTF::fastFree(v4, a2);
      else
        --*(_DWORD *)v4;
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  uint64_t v3;
  WTF *v4;

  *(_QWORD *)this = &off_1E33F87C8;
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 0;
    v4 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 1)
        WTF::fastFree(v4, a2);
      else
        --*(_DWORD *)v4;
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
  JUMPOUT(0x19AEA7644);
}

void WebCore::InspectorAuditResourcesObject::InspectorAuditCachedRawResourceClient::~InspectorAuditCachedRawResourceClient(WebCore::InspectorAuditResourcesObject::InspectorAuditCachedRawResourceClient *this, void *a2)
{
  uint64_t v3;
  WTF *v4;

  *(_QWORD *)this = &off_1E33F87C8;
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 0;
    v4 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 1)
        WTF::fastFree(v4, a2);
      else
        --*(_DWORD *)v4;
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  uint64_t v3;
  WTF *v4;

  *(_QWORD *)this = &off_1E33F87C8;
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 0;
    v4 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 1)
        WTF::fastFree(v4, a2);
      else
        --*(_DWORD *)v4;
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
  JUMPOUT(0x19AEA7644);
}

void WebCore::InspectorAuditResourcesObject::InspectorAuditCachedImageClient::~InspectorAuditCachedImageClient(WebCore::InspectorAuditResourcesObject::InspectorAuditCachedImageClient *this, void *a2)
{
  uint64_t v3;
  WTF *v4;

  *(_QWORD *)this = &off_1E33F87C8;
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 0;
    v4 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 1)
        WTF::fastFree(v4, a2);
      else
        --*(_DWORD *)v4;
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  uint64_t v3;
  WTF *v4;

  *(_QWORD *)this = &off_1E33F87C8;
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 0;
    v4 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 1)
        WTF::fastFree(v4, a2);
      else
        --*(_DWORD *)v4;
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
  JUMPOUT(0x19AEA7644);
}

void WebCore::InspectorAuditResourcesObject::InspectorAuditCachedFontClient::~InspectorAuditCachedFontClient(WebCore::InspectorAuditResourcesObject::InspectorAuditCachedFontClient *this, void *a2)
{
  uint64_t v3;
  WTF *v4;

  *(_QWORD *)this = &off_1E33F87C8;
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 0;
    v4 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 1)
        WTF::fastFree(v4, a2);
      else
        --*(_DWORD *)v4;
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  uint64_t v3;
  WTF *v4;

  *(_QWORD *)this = &off_1E33F87C8;
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 0;
    v4 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 1)
        WTF::fastFree(v4, a2);
      else
        --*(_DWORD *)v4;
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
  JUMPOUT(0x19AEA7644);
}

void WebCore::InspectorAuditResourcesObject::InspectorAuditCachedResourceClient::~InspectorAuditCachedResourceClient(WebCore::InspectorAuditResourcesObject::InspectorAuditCachedResourceClient *this, void *a2)
{
  uint64_t v3;
  WTF *v4;

  *(_QWORD *)this = &off_1E33F87C8;
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 0;
    v4 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 1)
        WTF::fastFree(v4, a2);
      else
        --*(_DWORD *)v4;
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  uint64_t v3;
  WTF *v4;

  *(_QWORD *)this = &off_1E33F87C8;
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 0;
    v4 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 1)
        WTF::fastFree(v4, a2);
      else
        --*(_DWORD *)v4;
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
  JUMPOUT(0x19AEA7644);
}

unsigned int *WebCore::InspectorAuditResourcesObject::getResources@<X0>(Inspector::InspectorAuditAgent **this@<X0>, WebCore::Document *a2@<X1>, uint64_t a3@<X8>)
{
  WebCore::LocalFrame *v6;
  uint64_t v7;
  WebCore::InspectorPageAgent *v8;
  WTF::StringImpl *v9;
  WTF *v10;
  WebCore::CachedResource *v11;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t *v15;
  unint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  Inspector::InspectorAuditAgent **v19;
  WTF::StringImpl **v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl **v23;
  WebCore::CachedResourceClient *v24;
  WTF::StringImpl **v25;
  const WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  int v29;
  Inspector::InspectorAuditAgent **v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  WTF *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  WTF::StringImpl **v40;
  WTF::StringImpl *v41;
  int v42;
  int v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  Inspector::InspectorAuditAgent *v48;
  WTF::StringImpl **v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t *v53;
  unsigned int v54;
  int v55;
  unsigned int v56;
  WTF::StringImpl *v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  uint64_t v73;
  Inspector::InspectorAuditAgent *v74;
  uint64_t v75;
  WTF *v76;
  unsigned int v77;
  unsigned int v78;
  int v79;
  unsigned int v80;
  char v81;
  WebCore::CachedResource *v82;
  WTF::StringImpl *v83;
  WTF *v84;
  uint64_t v85;
  WebCore::CachedResource **v86;
  uint64_t v87;
  uint64_t v88;
  WTF::StringImpl *v89;
  Inspector::InspectorAuditAgent *v90;
  WTF **v91;
  WTF::StringImpl *v92;
  unsigned int v93;
  int v94;
  WTF *v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  char *v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  WTF::StringImpl **v104;
  WTF::StringImpl **v105;
  WTF::StringImpl **v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  int v110;
  WTF::StringImpl *v111;
  WTF::StringImpl *v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  unsigned int *result;
  int v117;
  int v118;
  uint64_t v119;
  WTF *v120;
  WebCore::CachedResource *v121;
  WTF *v122;
  WTF *v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  Inspector::InspectorAuditAgent **v127;
  WTF::StringImpl *v128;
  WTF::StringImpl *v129;
  WTF::StringImpl *v130;
  WTF *v131;
  int v132;
  unsigned int v133;
  uint64_t v134;
  uint64_t v135;
  char v136;
  WTF::StringImpl **v137;
  WTF::StringImpl *v138;

  if ((Inspector::InspectorAuditAgent::hasActiveAudit(this[1]) & 1) != 0)
  {
    v127 = this;
    v134 = 0;
    v135 = 0;
    v7 = *((_QWORD *)a2 + 66);
    if (v7 && (v8 = *(WebCore::InspectorPageAgent **)(v7 + 8)) != 0)
    {
      WebCore::InspectorPageAgent::cachedResourcesForFrame(v8, v6, (uint64_t)&v131);
      v10 = v131;
      v119 = a3;
      if (v133)
      {
        v120 = (WTF *)((char *)v131 + 8 * v133);
        while (1)
        {
          v11 = *(WebCore::CachedResource **)v10;
          v128 = 0;
          v129 = 0;
          v130 = 0;
          v12 = (WTF::StringImpl **)((char *)v11 + 160);
          if ((*((_BYTE *)v11 + 344) & 1) == 0)
          {
            WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::CachedResource *)((char *)v11 + 160));
            *((_BYTE *)v11 + 344) |= 1u;
          }
          v13 = *v12;
          if (*v12)
            *(_DWORD *)v13 += 2;
          v14 = v129;
          v129 = v13;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, v9);
            else
              *(_DWORD *)v14 -= 2;
          }
          v15 = (uint64_t *)*((_QWORD *)v11 + 50);
          if (!v15)
          {
            v16 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
            if (v16 != -1)
            {
              v138 = (WTF::StringImpl *)&v136;
              v137 = &v138;
              std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, &v137, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
            }
            v15 = &WebCore::CachedResource::response(void)const::staticEmptyResponse;
          }
          WebCore::ResourceResponse::platformLazyInit((uint64_t)v15, 1);
          v17 = (WTF::StringImpl *)v15[5];
          if (v17)
            *(_DWORD *)v17 += 2;
          v18 = v130;
          v130 = v17;
          v19 = v127;
          if (v18)
          {
            if (*(_DWORD *)v18 == 2)
            {
              WTF::StringImpl::destroy(v18, v9);
              v19 = v127;
            }
            else
            {
              *(_DWORD *)v18 -= 2;
            }
          }
          v122 = v10;
          if (!*((_DWORD *)v19 + 31))
            goto LABEL_27;
          v20 = (WTF::StringImpl **)v19[14];
          v21 = *((unsigned int *)v19 + 30);
          if ((_DWORD)v21)
          {
            v22 = 16 * v21;
            v23 = v20;
            while (!*v23)
            {
              v23 += 2;
              v22 -= 16;
              if (!v22)
                goto LABEL_27;
            }
          }
          else
          {
            v23 = v20;
          }
          v25 = &v20[2 * v21];
LABEL_32:
          if (v23 == v25)
            goto LABEL_27;
          if (v23[1] != v11)
            break;
          v114 = *v23;
          if (v114)
            *(_DWORD *)v114 += 2;
          v115 = v128;
          v128 = v114;
          if (v115)
          {
            if (*(_DWORD *)v115 == 2)
              WTF::StringImpl::destroy(v115, v9);
            else
              *(_DWORD *)v115 -= 2;
          }
LABEL_120:
          v98 = HIDWORD(v135);
          if (HIDWORD(v135) == (_DWORD)v135)
          {
            v99 = WTF::Vector<WebCore::RsaOtherPrimesInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v134, HIDWORD(v135) + 1, (unint64_t)&v128);
            v98 = HIDWORD(v135);
            v100 = v134;
            v101 = (_QWORD *)(v134 + 24 * HIDWORD(v135));
            v102 = *(_QWORD *)v99;
            *(_QWORD *)v99 = 0;
            *v101 = v102;
            v103 = *((_QWORD *)v99 + 1);
            *((_QWORD *)v99 + 1) = 0;
            v101[1] = v103;
            v104 = (WTF::StringImpl **)(v101 + 2);
            v105 = (WTF::StringImpl **)(v99 + 16);
          }
          else
          {
            v100 = v134;
            v106 = (WTF::StringImpl **)(v134 + 24 * HIDWORD(v135));
            v107 = v128;
            v128 = 0;
            *v106 = v107;
            v108 = v129;
            v129 = 0;
            v106[1] = v108;
            v104 = v106 + 2;
            v105 = &v130;
          }
          v109 = *v105;
          *v105 = 0;
          *v104 = v109;
          v110 = v98 + 1;
          HIDWORD(v135) = v98 + 1;
          v111 = v130;
          v130 = 0;
          if (v111)
          {
            if (*(_DWORD *)v111 == 2)
              WTF::StringImpl::destroy(v111, v9);
            else
              *(_DWORD *)v111 -= 2;
          }
          v112 = v129;
          v129 = 0;
          if (v112)
          {
            if (*(_DWORD *)v112 == 2)
              WTF::StringImpl::destroy(v112, v9);
            else
              *(_DWORD *)v112 -= 2;
          }
          v113 = v128;
          v128 = 0;
          if (v113)
          {
            if (*(_DWORD *)v113 == 2)
              WTF::StringImpl::destroy(v113, v9);
            else
              *(_DWORD *)v113 -= 2;
          }
          v10 = (WTF *)((char *)v122 + 8);
          if ((WTF *)((char *)v122 + 8) == v120)
          {
            v10 = v131;
            if (v131)
              goto LABEL_149;
            goto LABEL_150;
          }
        }
        while (1)
        {
          v23 += 2;
          if (v23 == v25)
            break;
          if (*v23)
            goto LABEL_32;
        }
LABEL_27:
        v24 = (WebCore::CachedResourceClient *)(v127 + 12);
        switch(*((_BYTE *)v11 + 556) & 0x1F)
        {
          case 0:
          case 6:
          case 7:
          case 8:
          case 9:
          case 0xA:
          case 0xB:
            v24 = (WebCore::CachedResourceClient *)(v127 + 8);
            break;
          case 1:
            v24 = (WebCore::CachedResourceClient *)(v127 + 6);
            break;
          case 2:
            break;
          case 4:
            v24 = (WebCore::CachedResourceClient *)(v127 + 4);
            break;
          case 0x10:
            v24 = (WebCore::CachedResourceClient *)(v127 + 10);
            break;
          default:
            v24 = (WebCore::CachedResourceClient *)(v127 + 2);
            break;
        }
        if (WebCore::CachedResource::addClientToSet(v11, v24))
          (*(void (**)(WebCore::CachedResource *, WebCore::CachedResourceClient *))(*(_QWORD *)v11 + 88))(v11, v24);
        WTF::String::number((WTF::String *)(*((_DWORD *)v127 + 31) + 1));
        v27 = v138;
        v138 = 0;
        v28 = v128;
        v128 = v27;
        if (v28)
        {
          v29 = *(_DWORD *)v28 - 2;
          if (*(_DWORD *)v28 == 2)
          {
            WTF::StringImpl::destroy(v28, v9);
            v28 = v138;
            v138 = 0;
            if (!v28)
              goto LABEL_47;
            v29 = *(_DWORD *)v28 - 2;
            if (*(_DWORD *)v28 == 2)
            {
              WTF::StringImpl::destroy(v28, v9);
              goto LABEL_47;
            }
          }
          *(_DWORD *)v28 = v29;
        }
LABEL_47:
        v30 = v127;
        v32 = *((unsigned int *)v127 + 30);
        v31 = *((unsigned int *)v127 + 31);
        v121 = v11;
        if (10 * v31 >= (unint64_t)(9 * v32) || v32 <= 2 * (int)v31 && *((_BYTE *)v127 + 132))
        {
          if ((_DWORD)v32)
            v33 = 2 * v32;
          else
            v33 = 8;
          v34 = v127[14];
          v35 = WTF::fastZeroedMalloc((WTF *)(16 * v33));
          v30 = v127;
          v127[14] = (Inspector::InspectorAuditAgent *)v35;
          *((_DWORD *)v127 + 30) = v33;
          v36 = (~(v35 << 32) + v35) ^ ((unint64_t)(~(v35 << 32) + v35) >> 22);
          v37 = 9 * ((v36 + ~(v36 << 13)) ^ ((v36 + ~(v36 << 13)) >> 8));
          v38 = (v37 ^ (v37 >> 15)) + ~((v37 ^ (v37 >> 15)) << 27);
          *((_DWORD *)v127 + 32) = (v38 >> 31) ^ v38;
          *((_BYTE *)v127 + 132) = 0;
          if ((_DWORD)v32)
          {
            v39 = 0;
            v123 = v34;
            v124 = v32;
            do
            {
              v40 = (WTF::StringImpl **)((char *)v34 + 16 * v39);
              v41 = *v40;
              if (*v40)
              {
                v42 = *((_DWORD *)v30 + 30);
                v43 = *((_DWORD *)v30 + 32);
                v44 = *((_DWORD *)v41 + 4);
                v126 = v42;
                if (v44 < 0x100)
                {
                  v45 = WTF::StringImpl::hashSlowCase(v41);
                  v42 = v126;
                  v30 = v127;
                }
                else
                {
                  v45 = v44 >> 8;
                }
                v46 = v42 - 1;
                v47 = (v45 ^ v43) & (v42 - 1);
                v48 = v30[14];
                v49 = (WTF::StringImpl **)((char *)v48 + 16 * v47);
                v50 = *v49;
                v125 = v39;
                if (*v49)
                {
                  v51 = v39;
                  v52 = 0;
                  v53 = (uint64_t *)((char *)v34 + 16 * v51 + 8);
                  do
                  {
                    v54 = *((_DWORD *)v50 + 4);
                    if (v54 < 0x100)
                    {
                      v55 = WTF::StringImpl::hashSlowCase(v50);
                      v42 = v126;
                      v30 = v127;
                    }
                    else
                    {
                      v55 = v54 >> 8;
                    }
                    v56 = (v47 + v42 - ((v55 ^ v43) & v46)) & v46;
                    if (v52 > v56)
                    {
                      v57 = *v40;
                      *v40 = 0;
                      v58 = *v53;
                      v59 = *v49;
                      *v49 = 0;
                      v60 = *v40;
                      *v40 = v59;
                      if (v60)
                      {
                        if (*(_DWORD *)v60 == 2)
                        {
                          WTF::StringImpl::destroy(v60, v9);
                          v42 = v126;
                          v30 = v127;
                        }
                        else
                        {
                          *(_DWORD *)v60 -= 2;
                        }
                      }
                      v61 = (uint64_t)v48 + 16 * v47;
                      v63 = *(_QWORD *)(v61 + 8);
                      v62 = (_QWORD *)(v61 + 8);
                      *v53 = v63;
                      v64 = *v49;
                      *v49 = v57;
                      if (v64)
                      {
                        if (*(_DWORD *)v64 == 2)
                        {
                          WTF::StringImpl::destroy(v64, v9);
                          v42 = v126;
                          v30 = v127;
                        }
                        else
                        {
                          *(_DWORD *)v64 -= 2;
                        }
                      }
                      *v62 = v58;
                      v52 = v56;
                    }
                    v47 = ((_DWORD)v47 + 1) & v46;
                    ++v52;
                    v48 = v30[14];
                    v49 = (WTF::StringImpl **)((char *)v48 + 16 * v47);
                    v50 = *v49;
                  }
                  while (*v49);
                }
                v65 = *v40;
                *v40 = 0;
                v66 = *v49;
                *v49 = v65;
                v34 = v123;
                v32 = v124;
                v39 = v125;
                if (v66)
                {
                  if (*(_DWORD *)v66 == 2)
                  {
                    WTF::StringImpl::destroy(v66, v9);
                    v30 = v127;
                  }
                  else
                  {
                    *(_DWORD *)v66 -= 2;
                  }
                }
                *((_QWORD *)v48 + 2 * v47 + 1) = *((_QWORD *)v123 + 2 * v125 + 1);
                v67 = *v40;
                *v40 = 0;
                if (v67)
                {
                  if (*(_DWORD *)v67 == 2)
                  {
                    WTF::StringImpl::destroy(v67, v9);
                    v30 = v127;
                  }
                  else
                  {
                    *(_DWORD *)v67 -= 2;
                  }
                }
              }
              else
              {
                *v40 = 0;
              }
              ++v39;
            }
            while (v39 != v32);
          }
          else if (!v34)
          {
            LODWORD(v32) = 8;
            goto LABEL_89;
          }
          WTF::fastFree(v34, v9);
          v30 = v127;
          LODWORD(v32) = *((_DWORD *)v127 + 30);
        }
LABEL_89:
        v68 = *((_DWORD *)v30 + 32);
        v69 = *((_DWORD *)v128 + 4);
        if (v69 < 0x100)
        {
          v71 = WTF::StringImpl::hashSlowCase(v128);
          v30 = v127;
          v70 = v71;
        }
        else
        {
          v70 = v69 >> 8;
        }
        v72 = v32 - 1;
        v73 = (v70 ^ v68) & ((_DWORD)v32 - 1);
        v74 = v30[14];
        v75 = (uint64_t)v74 + 16 * v73;
        v76 = *(WTF **)v75;
        if (*(_QWORD *)v75)
        {
          v77 = 0;
          while (1)
          {
            v78 = *((_DWORD *)v76 + 4);
            if (v78 < 0x100)
            {
              v79 = WTF::StringImpl::hashSlowCase(v76);
              v30 = v127;
            }
            else
            {
              v79 = v78 >> 8;
            }
            v80 = (v73 + v32 - ((v79 ^ v68) & v72)) & v72;
            if (v77 > v80)
              break;
            if (v79 == v70)
            {
              v81 = WTF::equal(*(WTF **)v75, v128, v26);
              v30 = v127;
              if ((v81 & 1) != 0)
                goto LABEL_120;
            }
            v74 = v30[14];
            v73 = ((_DWORD)v73 + 1) & v72;
            ++v77;
            v75 = (uint64_t)v74 + 16 * v73;
            v76 = *(WTF **)v75;
            if (!*(_QWORD *)v75)
            {
              v82 = v121;
              if (v77 >= 0x80)
                *((_BYTE *)v30 + 132) = 1;
              goto LABEL_104;
            }
          }
          if (v77 >= 0x80)
            *((_BYTE *)v30 + 132) = 1;
          v84 = *(WTF **)v75;
          *(_QWORD *)v75 = 0;
          v85 = (uint64_t)v74 + 16 * v73;
          v88 = *(_QWORD *)(v85 + 8);
          v86 = (WebCore::CachedResource **)(v85 + 8);
          v87 = v88;
          *(_QWORD *)v75 = 0;
          *(_QWORD *)(v75 + 8) = 0;
          v89 = v128;
          if (v128)
            *(_DWORD *)v128 += 2;
          *(_QWORD *)v75 = v89;
          *v86 = v121;
          while (1)
          {
            v73 = ((_DWORD)v73 + 1) & v72;
            v90 = v30[14];
            v91 = (WTF **)((char *)v90 + 16 * v73);
            v92 = *v91;
            if (!*v91)
              break;
            v93 = *((_DWORD *)v92 + 4);
            if (v93 < 0x100)
            {
              v94 = WTF::StringImpl::hashSlowCase(v92);
              v30 = v127;
            }
            else
            {
              v94 = v93 >> 8;
            }
            if (++v80 > (((_DWORD)v73 + (_DWORD)v32 - ((v94 ^ v68) & v72)) & v72))
            {
              v95 = *v91;
              *v91 = 0;
              v96 = (uint64_t)v90 + 16 * v73;
              v97 = *(_QWORD *)(v96 + 8);
              *v91 = v84;
              *(_QWORD *)(v96 + 8) = v87;
              v87 = v97;
              v84 = v95;
              v80 = (v73 + v32 - ((v94 ^ v68) & v72)) & v72;
            }
          }
          *v91 = v84;
          *((_QWORD *)v90 + 2 * v73 + 1) = v87;
        }
        else
        {
          v82 = v121;
LABEL_104:
          v83 = v128;
          if (v128)
            *(_DWORD *)v128 += 2;
          *(_QWORD *)v75 = v83;
          *((_QWORD *)v74 + 2 * v73 + 1) = v82;
        }
        ++*((_DWORD *)v30 + 31);
        goto LABEL_120;
      }
      v110 = 0;
      v100 = 0;
      if (v131)
      {
LABEL_149:
        v131 = 0;
        v132 = 0;
        WTF::fastFree(v10, v9);
      }
LABEL_150:
      v117 = 0;
      *(_QWORD *)v119 = v100;
      a3 = v119;
      v118 = v135;
      v134 = 0;
      v135 = 0;
      *(_DWORD *)(v119 + 8) = v118;
      *(_DWORD *)(v119 + 12) = v110;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_BYTE *)a3 = 31;
      v117 = 1;
    }
    *(_DWORD *)(a3 + 16) = v117;
    return WTF::Vector<WebCore::InspectorAuditResourcesObject::Resource,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v134, v9);
  }
  else
  {
    result = (unsigned int *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 31;
    *(_DWORD *)(a3 + 16) = 1;
  }
  return result;
}

uint64_t WebCore::InspectorAuditResourcesObject::getResourceContent@<X0>(Inspector::InspectorAuditAgent **this@<X0>, WebCore::Document *a2@<X1>, WTF::StringImpl **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  const WTF::StringImpl *v9;
  uint64_t v10;
  WTF::String *v11;
  Inspector::InspectorAuditAgent *v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  BOOL *v22;
  WTF::StringImpl *v23;
  int v24;
  int v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  WTF::String *v29;
  WTF::StringImpl *v30;
  _BYTE v31[8];
  WTF::StringImpl *v32;
  uint64_t v33;

  result = Inspector::InspectorAuditAgent::hasActiveAudit(this[1]);
  if ((result & 1) == 0 || (v10 = *((_QWORD *)a2 + 66)) == 0 || (v11 = *(WTF::String **)(v10 + 8)) == 0)
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a4 = 31;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  v29 = v11;
  v12 = this[14];
  if (v12)
  {
    v13 = *((_DWORD *)this + 30);
    v14 = v13 - 1;
    v15 = *((_DWORD *)this + 32);
    v16 = *((_DWORD *)*a3 + 4);
    if (v16 < 0x100)
    {
      v17 = WTF::StringImpl::hashSlowCase(*a3);
      v12 = this[14];
    }
    else
    {
      v17 = v16 >> 8;
    }
    v18 = (v17 ^ v15) & v14;
    v19 = (uint64_t)v12 + 16 * v18;
    result = *(_QWORD *)v19;
    if (*(_QWORD *)v19)
    {
      v20 = -1;
      do
      {
        v21 = *(_DWORD *)(result + 16);
        result = v21 < 0x100 ? WTF::StringImpl::hashSlowCase((WTF::StringImpl *)result) : v21 >> 8;
        if (++v20 > ((v18 + v13 - ((result ^ v15) & v14)) & v14))
          break;
        if ((_DWORD)result == v17)
        {
          result = WTF::equal(*(WTF **)v19, *a3, v9);
          if ((result & 1) != 0)
          {
            v28 = *(_QWORD *)(v19 + 8);
            if (!v28)
              break;
            v32 = 0;
            v30 = 0;
            if ((*(_BYTE *)(v28 + 344) & 1) == 0)
            {
              WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v28 + 160));
              *(_BYTE *)(v28 + 344) |= 1u;
            }
            result = WebCore::InspectorPageAgent::resourceContent((WebCore::InspectorPageAgent *)&v32, v29, (WebCore::LocalFrame *)(v28 + 160), &v30, (WTF::String *)v31, v22);
            v23 = v32;
            if (!v32)
            {
              *(_QWORD *)a4 = v30;
              *(_BYTE *)(a4 + 8) = v31[0];
              *(_DWORD *)(a4 + 16) = 0;
              return result;
            }
            if (*((_DWORD *)v32 + 1))
            {
              *(_DWORD *)v32 += 2;
              *(_BYTE *)a4 = 5;
              *(_QWORD *)(a4 + 8) = v23;
              *(_DWORD *)(a4 + 16) = 1;
              result = (uint64_t)v30;
              if (v30)
              {
                if (*(_DWORD *)v30 == 2)
                  result = WTF::StringImpl::destroy(v30, v26);
                else
                  *(_DWORD *)v30 -= 2;
              }
            }
            else
            {
              *(_QWORD *)a4 = v30;
              *(_BYTE *)(a4 + 8) = v31[0];
              *(_DWORD *)(a4 + 16) = 0;
            }
            goto LABEL_24;
          }
        }
        v18 = (v18 + 1) & v14;
        v19 = (uint64_t)this[14] + 16 * v18;
        result = *(_QWORD *)v19;
      }
      while (*(_QWORD *)v19);
    }
  }
  v23 = *a3;
  if (*a3)
  {
    v24 = *((_DWORD *)v23 + 1);
    *(_DWORD *)v23 += 2;
    if (v24 < 0 || (result = (v24 + 19), __OFADD__(v24, 19)))
    {
      v33 = 0;
      goto LABEL_41;
    }
    v25 = (*((unsigned __int8 *)v23 + 16) >> 2) & 1;
  }
  else
  {
    v25 = 1;
    result = 19;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v25, (int8x16_t *)"Unknown identifier ", 0x13u, (uint64_t)v23, &v33);
  v27 = v33;
  if (!v33)
  {
LABEL_41:
    __break(0xC471u);
    return result;
  }
  *(_BYTE *)a4 = 5;
  *(_QWORD *)(a4 + 8) = v27;
  *(_DWORD *)(a4 + 16) = 1;
  v33 = 0;
  if (v23)
  {
LABEL_24:
    if (*(_DWORD *)v23 == 2)
      return WTF::StringImpl::destroy(v23, v26);
    else
      *(_DWORD *)v23 -= 2;
  }
  return result;
}

uint64_t WebCore::InspectorCanvas::InspectorCanvas(WebCore::InspectorCanvas *this, WebCore::CanvasRenderingContext *a2)
{
  int v4;
  _QWORD *v5;
  uint64_t result;
  int v7;
  WTF::StringImpl *v8;
  unsigned int *v9;
  unsigned int v10;
  void *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  WTF::StringImpl *v16;

  v4 = 1;
  *(_DWORD *)this = 1;
  v5 = (_QWORD *)((char *)this + 8);
  result = Inspector::IdentifiersFactory::createIdentifier(this);
  if (v16)
  {
    v7 = *((_DWORD *)v16 + 1);
    if (v7 < 0 || (result = (v7 + 7), __OFADD__(v7, 7)))
    {
      *v5 = 0;
      goto LABEL_20;
    }
    v4 = (*((unsigned __int8 *)v16 + 16) >> 2) & 1;
  }
  else
  {
    result = 7;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v4, (int8x16_t *)"canvas:", 7u, (uint64_t)v16, v5);
  if (!*v5)
  {
LABEL_20:
    __break(0xC471u);
    return result;
  }
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v8);
    else
      *(_DWORD *)v16 -= 2;
  }
  if (!*((_QWORD *)a2 + 2))
  {
    v12 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v12 = 1;
    *(_QWORD *)(v12 + 8) = a2;
    v13 = (unsigned int *)*((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = v12;
    if (v13)
    {
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        atomic_store(1u, v13);
        WTF::fastFree((WTF *)v13, v11);
      }
    }
  }
  v9 = (unsigned int *)*((_QWORD *)a2 + 2);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  *((_QWORD *)this + 2) = v9;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_QWORD *)this + 11) = 0x7FF8000000000000;
  *((_OWORD *)this + 6) = xmmword_1969F2190;
  *((_BYTE *)this + 112) = 0;
  *((_BYTE *)this + 120) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_BYTE *)this + 136) = 0;
  return (uint64_t)this;
}

unint64_t WebCore::InspectorCanvas::resolveContext(WebCore::InspectorCanvas *this, JSC::JSGlobalObject *a2)
{
  int v4;
  WebCore::JSDOMGlobalObject *v5;
  uint64_t v6;
  WebCore::CanvasRenderingContext2D *v7;
  unint64_t v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v21[8];

  JSC::JSLockHolder::JSLockHolder();
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 2) + 8) + 24))(*(_QWORD *)(*((_QWORD *)this + 2) + 8));
  v5 = *(WebCore::JSDOMGlobalObject **)(*((_QWORD *)this + 2) + 8);
  v6 = *(_QWORD *)v5;
  if (v4)
  {
    if (((*(uint64_t (**)(_QWORD))(v6 + 24))(*(_QWORD *)(*((_QWORD *)this + 2) + 8)) & 1) != 0)
    {
      v8 = WebCore::toJS(a2, a2, v5, v7);
      goto LABEL_16;
    }
LABEL_22:
    __break(0xC471u);
    JUMPOUT(0x195DABCA8);
  }
  v9 = (*(uint64_t (**)(_QWORD))(v6 + 80))(*(_QWORD *)(*((_QWORD *)this + 2) + 8));
  v10 = *(uint64_t **)(*((_QWORD *)this + 2) + 8);
  v11 = *v10;
  if (v9)
  {
    if (((*(uint64_t (**)(_QWORD))(v11 + 80))(*(_QWORD *)(*((_QWORD *)this + 2) + 8)) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195DABCC8);
    }
    v8 = WebCore::wrap<WebCore::OffscreenCanvasRenderingContext2D>((uint64_t)a2, (uint64_t)a2, (uint64_t)v10);
  }
  else
  {
    v12 = (*(uint64_t (**)(_QWORD))(v11 + 64))(*(_QWORD *)(*((_QWORD *)this + 2) + 8));
    v13 = *(uint64_t **)(*((_QWORD *)this + 2) + 8);
    v14 = *v13;
    if (v12)
    {
      if (((*(uint64_t (**)(_QWORD))(v14 + 64))(*(_QWORD *)(*((_QWORD *)this + 2) + 8)) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195DABCE8);
      }
      v8 = WebCore::wrap<WebCore::ImageBitmapRenderingContext>((uint64_t)a2, (uint64_t)a2, (uint64_t)v13);
    }
    else
    {
      v15 = (*(uint64_t (**)(_QWORD))(v14 + 32))(*(_QWORD *)(*((_QWORD *)this + 2) + 8));
      v16 = *(uint64_t **)(*((_QWORD *)this + 2) + 8);
      v17 = *v16;
      if (v15)
      {
        if (((*(uint64_t (**)(_QWORD))(v17 + 32))(*(_QWORD *)(*((_QWORD *)this + 2) + 8)) & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195DABD08);
        }
        v8 = WebCore::wrap<WebCore::WebGLRenderingContext>((uint64_t)a2, (uint64_t)a2, (uint64_t)(v16 - 1));
      }
      else
      {
        if (!(*(unsigned int (**)(_QWORD))(v17 + 40))(*(_QWORD *)(*((_QWORD *)this + 2) + 8)))
          goto LABEL_22;
        v18 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 40))(v18) & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195DABD28);
        }
        v8 = WebCore::wrap<WebCore::WebGL2RenderingContext>((uint64_t)a2, (uint64_t)a2, v18 - 8);
      }
    }
  }
LABEL_16:
  v19 = v8;
  MEMORY[0x19AEA32A0](v21);
  return v19;
}

WTF::StringImpl *WebCore::InspectorCanvas::resetRecordingData(WebCore::InspectorCanvas *this, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *result;
  char v12;

  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*v3 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v3;
  }
  v4 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (*v4 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v4;
  }
  v5 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v5)
  {
    if (*v5 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v5;
  }
  v6 = (_DWORD *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v6)
  {
    if (*v6 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v6;
  }
  if (*((_DWORD *)this + 18))
  {
    v7 = *((unsigned int *)this + 19);
    v8 = (unsigned int *)*((_QWORD *)this + 8);
    if ((_DWORD)v7)
    {
      v9 = 48 * v7;
      do
      {
        v10 = v8[10];
        if ((_DWORD)v10 != -1)
          ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v10])(&v12, v8);
        v8[10] = -1;
        v8 += 12;
        v9 -= 48;
      }
      while (v9);
      *((_DWORD *)this + 19) = 0;
      v8 = (unsigned int *)*((_QWORD *)this + 8);
    }
    if (v8)
    {
      *((_QWORD *)this + 8) = 0;
      *((_DWORD *)this + 18) = 0;
      WTF::fastFree((WTF *)v8, a2);
    }
  }
  result = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  *((_OWORD *)this + 6) = xmmword_1969F2190;
  if (*((_BYTE *)this + 120))
    *((_BYTE *)this + 120) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_BYTE *)this + 136) = 0;
  *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 25) = 0;
  return result;
}

uint64_t WebCore::InspectorCanvas::processArgument@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  WTF::StringImpl *v4;
  WTF::JSONImpl::Value *v5;
  uint64_t result;
  WTF::StringImpl *v7;
  uint64_t v8;
  char v9;
  _QWORD v10[5];
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  {
    WebCore::convertEnumerationToString(WebCore::CanvasDirection)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::CanvasDirection)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::CanvasDirection)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::CanvasDirection)::$_0::operator() const(void)::impl;
    unk_1EE2F43A0 = &WebCore::convertEnumerationToString(WebCore::CanvasDirection)::$_1::operator() const(void)::impl;
    WebCore::convertEnumerationToString(WebCore::CanvasDirection)::$_2::operator() const(void)::impl += 2;
    qword_1EE2F43A8 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::CanvasDirection)::$_2::operator() const(void)::impl;
  }
  v4 = (WTF::StringImpl *)WebCore::convertEnumerationToString(WebCore::CanvasDirection)::values[a2];
  if (v4)
    *(_DWORD *)v4 += 4;
  v10[0] = v4;
  v11 = 12;
  v5 = (WTF::JSONImpl::Value *)WebCore::InspectorCanvas::indexForData(a1, (unint64_t)v10);
  result = WTF::JSONImpl::Value::create(v5);
  if (v11 != -1)
    result = ((uint64_t (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v11])(&v9, v10);
  *(_QWORD *)a3 = v8;
  *(_DWORD *)(a3 + 8) = 3;
  *(_BYTE *)(a3 + 16) = 1;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      return WTF::StringImpl::destroy(v4, v7);
    else
      *(_DWORD *)v4 -= 2;
  }
  return result;
}

{
  WTF::StringImpl *v4;
  WTF::JSONImpl::Value *v5;
  uint64_t result;
  WTF::StringImpl *v7;
  uint64_t v8;
  char v9;
  _QWORD v10[5];
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  {
    WebCore::convertEnumerationToString(WebCore::CanvasFillRule)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::CanvasFillRule)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::CanvasFillRule)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::CanvasFillRule)::$_0::operator() const(void)::impl;
    unk_1EE2F43C0 = &WebCore::convertEnumerationToString(WebCore::CanvasFillRule)::$_1::operator() const(void)::impl;
  }
  v4 = (WTF::StringImpl *)WebCore::convertEnumerationToString(WebCore::CanvasFillRule)::values[a2];
  if (v4)
    *(_DWORD *)v4 += 4;
  v10[0] = v4;
  v11 = 12;
  v5 = (WTF::JSONImpl::Value *)WebCore::InspectorCanvas::indexForData(a1, (unint64_t)v10);
  result = WTF::JSONImpl::Value::create(v5);
  if (v11 != -1)
    result = ((uint64_t (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v11])(&v9, v10);
  *(_QWORD *)a3 = v8;
  *(_DWORD *)(a3 + 8) = 3;
  *(_BYTE *)(a3 + 16) = 1;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      return WTF::StringImpl::destroy(v4, v7);
    else
      *(_DWORD *)v4 -= 2;
  }
  return result;
}

{
  WTF::StringImpl *v4;
  WTF::JSONImpl::Value *v5;
  uint64_t result;
  WTF::StringImpl *v7;
  uint64_t v8;
  char v9;
  _QWORD v10[5];
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  {
    WebCore::convertEnumerationToString(WebCore::CanvasLineCap)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::CanvasLineCap)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::CanvasLineCap)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::CanvasLineCap)::$_0::operator() const(void)::impl;
    *(_QWORD *)algn_1EE2F43D8 = &WebCore::convertEnumerationToString(WebCore::CanvasLineCap)::$_1::operator() const(void)::impl;
    WebCore::convertEnumerationToString(WebCore::CanvasLineCap)::$_2::operator() const(void)::impl += 2;
    qword_1EE2F43E0 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::CanvasLineCap)::$_2::operator() const(void)::impl;
  }
  v4 = (WTF::StringImpl *)WebCore::convertEnumerationToString(WebCore::CanvasLineCap)::values[a2];
  if (v4)
    *(_DWORD *)v4 += 4;
  v10[0] = v4;
  v11 = 12;
  v5 = (WTF::JSONImpl::Value *)WebCore::InspectorCanvas::indexForData(a1, (unint64_t)v10);
  result = WTF::JSONImpl::Value::create(v5);
  if (v11 != -1)
    result = ((uint64_t (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v11])(&v9, v10);
  *(_QWORD *)a3 = v8;
  *(_DWORD *)(a3 + 8) = 3;
  *(_BYTE *)(a3 + 16) = 1;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      return WTF::StringImpl::destroy(v4, v7);
    else
      *(_DWORD *)v4 -= 2;
  }
  return result;
}

{
  WTF::StringImpl *v4;
  WTF::JSONImpl::Value *v5;
  uint64_t result;
  WTF::StringImpl *v7;
  uint64_t v8;
  char v9;
  _QWORD v10[5];
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  {
    WebCore::convertEnumerationToString(WebCore::CanvasLineJoin)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::CanvasLineJoin)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::CanvasLineJoin)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::CanvasLineJoin)::$_0::operator() const(void)::impl;
    *(_QWORD *)algn_1EE2F43F8 = &WebCore::convertEnumerationToString(WebCore::CanvasLineJoin)::$_1::operator() const(void)::impl;
    WebCore::convertEnumerationToString(WebCore::CanvasLineJoin)::$_2::operator() const(void)::impl += 2;
    qword_1EE2F4400 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::CanvasLineJoin)::$_2::operator() const(void)::impl;
  }
  v4 = (WTF::StringImpl *)WebCore::convertEnumerationToString(WebCore::CanvasLineJoin)::values[a2];
  if (v4)
    *(_DWORD *)v4 += 4;
  v10[0] = v4;
  v11 = 12;
  v5 = (WTF::JSONImpl::Value *)WebCore::InspectorCanvas::indexForData(a1, (unint64_t)v10);
  result = WTF::JSONImpl::Value::create(v5);
  if (v11 != -1)
    result = ((uint64_t (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v11])(&v9, v10);
  *(_QWORD *)a3 = v8;
  *(_DWORD *)(a3 + 8) = 3;
  *(_BYTE *)(a3 + 16) = 1;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      return WTF::StringImpl::destroy(v4, v7);
    else
      *(_DWORD *)v4 -= 2;
  }
  return result;
}

{
  WTF::StringImpl *v4;
  WTF::JSONImpl::Value *v5;
  uint64_t result;
  WTF::StringImpl *v7;
  uint64_t v8;
  char v9;
  _QWORD v10[5];
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  {
    WebCore::convertEnumerationToString(WebCore::CanvasTextAlign)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::CanvasTextAlign)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::CanvasTextAlign)::$_2::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::CanvasTextAlign)::$_3::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::CanvasTextAlign)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::CanvasTextAlign)::$_0::operator() const(void)::impl;
    *(_QWORD *)algn_1EE2F4418 = &WebCore::convertEnumerationToString(WebCore::CanvasTextAlign)::$_1::operator() const(void)::impl;
    qword_1EE2F4420 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::CanvasTextAlign)::$_2::operator() const(void)::impl;
    unk_1EE2F4428 = &WebCore::convertEnumerationToString(WebCore::CanvasTextAlign)::$_3::operator() const(void)::impl;
    WebCore::convertEnumerationToString(WebCore::CanvasTextAlign)::$_4::operator() const(void)::impl += 2;
    qword_1EE2F4430 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::CanvasTextAlign)::$_4::operator() const(void)::impl;
  }
  v4 = (WTF::StringImpl *)WebCore::convertEnumerationToString(WebCore::CanvasTextAlign)::values[a2];
  if (v4)
    *(_DWORD *)v4 += 4;
  v10[0] = v4;
  v11 = 12;
  v5 = (WTF::JSONImpl::Value *)WebCore::InspectorCanvas::indexForData(a1, (unint64_t)v10);
  result = WTF::JSONImpl::Value::create(v5);
  if (v11 != -1)
    result = ((uint64_t (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v11])(&v9, v10);
  *(_QWORD *)a3 = v8;
  *(_DWORD *)(a3 + 8) = 3;
  *(_BYTE *)(a3 + 16) = 1;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      return WTF::StringImpl::destroy(v4, v7);
    else
      *(_DWORD *)v4 -= 2;
  }
  return result;
}

{
  WTF::StringImpl *v4;
  WTF::JSONImpl::Value *v5;
  uint64_t result;
  WTF::StringImpl *v7;
  uint64_t v8;
  char v9;
  _QWORD v10[5];
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  {
    WebCore::convertEnumerationToString(WebCore::CanvasTextBaseline)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::CanvasTextBaseline)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::CanvasTextBaseline)::$_2::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::CanvasTextBaseline)::$_3::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::CanvasTextBaseline)::$_4::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::CanvasTextBaseline)::$_5::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::CanvasTextBaseline)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::CanvasTextBaseline)::$_0::operator() const(void)::impl;
    *(_QWORD *)algn_1EE2F4448 = &WebCore::convertEnumerationToString(WebCore::CanvasTextBaseline)::$_1::operator() const(void)::impl;
    qword_1EE2F4450 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::CanvasTextBaseline)::$_2::operator() const(void)::impl;
    unk_1EE2F4458 = &WebCore::convertEnumerationToString(WebCore::CanvasTextBaseline)::$_3::operator() const(void)::impl;
    qword_1EE2F4460 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::CanvasTextBaseline)::$_4::operator() const(void)::impl;
    unk_1EE2F4468 = &WebCore::convertEnumerationToString(WebCore::CanvasTextBaseline)::$_5::operator() const(void)::impl;
  }
  v4 = (WTF::StringImpl *)WebCore::convertEnumerationToString(WebCore::CanvasTextBaseline)::values[a2];
  if (v4)
    *(_DWORD *)v4 += 4;
  v10[0] = v4;
  v11 = 12;
  v5 = (WTF::JSONImpl::Value *)WebCore::InspectorCanvas::indexForData(a1, (unint64_t)v10);
  result = WTF::JSONImpl::Value::create(v5);
  if (v11 != -1)
    result = ((uint64_t (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v11])(&v9, v10);
  *(_QWORD *)a3 = v8;
  *(_DWORD *)(a3 + 8) = 3;
  *(_BYTE *)(a3 + 16) = 1;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      return WTF::StringImpl::destroy(v4, v7);
    else
      *(_DWORD *)v4 -= 2;
  }
  return result;
}

{
  WTF::StringImpl *v4;
  WTF::JSONImpl::Value *v5;
  uint64_t result;
  WTF::StringImpl *v7;
  uint64_t v8;
  char v9;
  _QWORD v10[5];
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  {
    WebCore::convertEnumerationToString(WebCore::ImageSmoothingQuality)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::ImageSmoothingQuality)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::ImageSmoothingQuality)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::ImageSmoothingQuality)::$_0::operator() const(void)::impl;
    unk_1EE2F4700 = &WebCore::convertEnumerationToString(WebCore::ImageSmoothingQuality)::$_1::operator() const(void)::impl;
    WebCore::convertEnumerationToString(WebCore::ImageSmoothingQuality)::$_2::operator() const(void)::impl += 2;
    qword_1EE2F4708 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::ImageSmoothingQuality)::$_2::operator() const(void)::impl;
  }
  v4 = (WTF::StringImpl *)WebCore::convertEnumerationToString(WebCore::ImageSmoothingQuality)::values[a2];
  if (v4)
    *(_DWORD *)v4 += 4;
  v10[0] = v4;
  v11 = 12;
  v5 = (WTF::JSONImpl::Value *)WebCore::InspectorCanvas::indexForData(a1, (unint64_t)v10);
  result = WTF::JSONImpl::Value::create(v5);
  if (v11 != -1)
    result = ((uint64_t (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v11])(&v9, v10);
  *(_QWORD *)a3 = v8;
  *(_DWORD *)(a3 + 8) = 3;
  *(_BYTE *)(a3 + 16) = 1;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      return WTF::StringImpl::destroy(v4, v7);
    else
      *(_DWORD *)v4 -= 2;
  }
  return result;
}

{
  WTF::StringImpl *v4;
  WTF::JSONImpl::Value *v5;
  uint64_t result;
  WTF::StringImpl *v7;
  uint64_t v8;
  char v9;
  _QWORD v10[5];
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  {
    WebCore::convertEnumerationToString(WebCore::PredefinedColorSpace)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::PredefinedColorSpace)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::PredefinedColorSpace)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::PredefinedColorSpace)::$_0::operator() const(void)::impl;
    *(_QWORD *)algn_1EE2F4978 = &WebCore::convertEnumerationToString(WebCore::PredefinedColorSpace)::$_1::operator() const(void)::impl;
  }
  v4 = (WTF::StringImpl *)WebCore::convertEnumerationToString(WebCore::PredefinedColorSpace)::values[a2];
  if (v4)
    *(_DWORD *)v4 += 4;
  v10[0] = v4;
  v11 = 12;
  v5 = (WTF::JSONImpl::Value *)WebCore::InspectorCanvas::indexForData(a1, (unint64_t)v10);
  result = WTF::JSONImpl::Value::create(v5);
  if (v11 != -1)
    result = ((uint64_t (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v11])(&v9, v10);
  *(_QWORD *)a3 = v8;
  *(_DWORD *)(a3 + 8) = 3;
  *(_BYTE *)(a3 + 16) = 1;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      return WTF::StringImpl::destroy(v4, v7);
    else
      *(_DWORD *)v4 -= 2;
  }
  return result;
}

_DWORD *WebCore::InspectorCanvas::processArgument@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  WTF::JSONImpl::Value *v5;
  double v6;
  char **v7;
  uint64_t v8;
  char *v9;
  char *v10;
  WTF::JSONImpl::Value *v11;
  WTF::JSONImpl::Value *v12;
  double v13;
  uint64_t v14;
  char *v15;
  char *v16;
  WTF::JSONImpl::Value *v17;
  WTF::JSONImpl::Value *v18;
  double v19;
  uint64_t v20;
  char *v21;
  char *v22;
  WTF::JSONImpl::Value *v23;
  WTF::JSONImpl::Value *v24;
  double v25;
  uint64_t v26;
  char *v27;
  char *v28;
  WTF::JSONImpl::Value *v29;
  WTF::JSONImpl::Value *v30;
  double v31;
  uint64_t v32;
  char *v33;
  char *v34;
  WTF::JSONImpl::Value *v35;
  WTF::JSONImpl::Value *v36;
  double v37;
  uint64_t v38;
  char *v39;
  char *v40;
  WTF::JSONImpl::Value *v41;
  _DWORD *result;
  WTF::JSONImpl::Value *v43;

  v4 = WTF::fastMalloc((WTF *)0x20);
  v5 = (WTF::JSONImpl::Value *)WTF::JSONImpl::ArrayBase::ArrayBase((WTF::JSONImpl::ArrayBase *)v4);
  v6 = *(double *)a1;
  if (!*(_BYTE *)(a1 + 8))
    v6 = 1.0;
  v7 = (char **)((char *)v5 + 16);
  WTF::JSONImpl::Value::create(v5, v6);
  v8 = *(unsigned int *)(v4 + 28);
  if ((_DWORD)v8 == *(_DWORD *)(v4 + 24))
  {
    v9 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v7, v8 + 1, (unint64_t)&v43);
    v8 = *(unsigned int *)(v4 + 28);
    v10 = *(char **)(v4 + 16);
    v11 = *(WTF::JSONImpl::Value **)v9;
    *(_QWORD *)v9 = 0;
  }
  else
  {
    v10 = *v7;
    v11 = v43;
    v43 = 0;
  }
  *(_QWORD *)&v10[8 * v8] = v11;
  *(_DWORD *)(v4 + 28) = v8 + 1;
  v12 = v43;
  v43 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 1)
      v12 = (WTF::JSONImpl::Value *)WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v12;
  }
  v13 = *(double *)(a1 + 16);
  if (!*(_BYTE *)(a1 + 24))
    v13 = 0.0;
  WTF::JSONImpl::Value::create(v12, v13);
  v14 = *(unsigned int *)(v4 + 28);
  if ((_DWORD)v14 == *(_DWORD *)(v4 + 24))
  {
    v15 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v7, v14 + 1, (unint64_t)&v43);
    v14 = *(unsigned int *)(v4 + 28);
    v16 = *(char **)(v4 + 16);
    v17 = *(WTF::JSONImpl::Value **)v15;
    *(_QWORD *)v15 = 0;
  }
  else
  {
    v16 = *v7;
    v17 = v43;
    v43 = 0;
  }
  *(_QWORD *)&v16[8 * v14] = v17;
  *(_DWORD *)(v4 + 28) = v14 + 1;
  v18 = v43;
  v43 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 1)
      v18 = (WTF::JSONImpl::Value *)WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v18;
  }
  v19 = *(double *)(a1 + 32);
  if (!*(_BYTE *)(a1 + 40))
    v19 = 0.0;
  WTF::JSONImpl::Value::create(v18, v19);
  v20 = *(unsigned int *)(v4 + 28);
  if ((_DWORD)v20 == *(_DWORD *)(v4 + 24))
  {
    v21 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v7, v20 + 1, (unint64_t)&v43);
    v20 = *(unsigned int *)(v4 + 28);
    v22 = *(char **)(v4 + 16);
    v23 = *(WTF::JSONImpl::Value **)v21;
    *(_QWORD *)v21 = 0;
  }
  else
  {
    v22 = *v7;
    v23 = v43;
    v43 = 0;
  }
  *(_QWORD *)&v22[8 * v20] = v23;
  *(_DWORD *)(v4 + 28) = v20 + 1;
  v24 = v43;
  v43 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 1)
      v24 = (WTF::JSONImpl::Value *)WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v24;
  }
  v25 = *(double *)(a1 + 48);
  if (!*(_BYTE *)(a1 + 56))
    v25 = 1.0;
  WTF::JSONImpl::Value::create(v24, v25);
  v26 = *(unsigned int *)(v4 + 28);
  if ((_DWORD)v26 == *(_DWORD *)(v4 + 24))
  {
    v27 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v7, v26 + 1, (unint64_t)&v43);
    v26 = *(unsigned int *)(v4 + 28);
    v28 = *(char **)(v4 + 16);
    v29 = *(WTF::JSONImpl::Value **)v27;
    *(_QWORD *)v27 = 0;
  }
  else
  {
    v28 = *v7;
    v29 = v43;
    v43 = 0;
  }
  *(_QWORD *)&v28[8 * v26] = v29;
  *(_DWORD *)(v4 + 28) = v26 + 1;
  v30 = v43;
  v43 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 1)
      v30 = (WTF::JSONImpl::Value *)WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v30;
  }
  v31 = *(double *)(a1 + 64);
  if (!*(_BYTE *)(a1 + 72))
    v31 = 0.0;
  WTF::JSONImpl::Value::create(v30, v31);
  v32 = *(unsigned int *)(v4 + 28);
  if ((_DWORD)v32 == *(_DWORD *)(v4 + 24))
  {
    v33 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v7, v32 + 1, (unint64_t)&v43);
    v32 = *(unsigned int *)(v4 + 28);
    v34 = *(char **)(v4 + 16);
    v35 = *(WTF::JSONImpl::Value **)v33;
    *(_QWORD *)v33 = 0;
  }
  else
  {
    v34 = *v7;
    v35 = v43;
    v43 = 0;
  }
  *(_QWORD *)&v34[8 * v32] = v35;
  *(_DWORD *)(v4 + 28) = v32 + 1;
  v36 = v43;
  v43 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 1)
      v36 = (WTF::JSONImpl::Value *)WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v36;
  }
  v37 = *(double *)(a1 + 80);
  if (!*(_BYTE *)(a1 + 88))
    v37 = 0.0;
  WTF::JSONImpl::Value::create(v36, v37);
  v38 = *(unsigned int *)(v4 + 28);
  if ((_DWORD)v38 == *(_DWORD *)(v4 + 24))
  {
    v39 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v7, v38 + 1, (unint64_t)&v43);
    v38 = *(unsigned int *)(v4 + 28);
    v40 = *(char **)(v4 + 16);
    v41 = *(WTF::JSONImpl::Value **)v39;
    *(_QWORD *)v39 = 0;
  }
  else
  {
    v40 = *v7;
    v41 = v43;
    v43 = 0;
  }
  *(_QWORD *)&v40[8 * v38] = v41;
  *(_DWORD *)(v4 + 28) = v38 + 1;
  result = v43;
  v43 = 0;
  if (result)
  {
    if (*result == 1)
      result = (_DWORD *)WTF::JSONImpl::Value::operator delete();
    else
      --*result;
  }
  *(_QWORD *)a2 = v4;
  *(_DWORD *)(a2 + 8) = 8;
  *(_BYTE *)(a2 + 16) = 1;
  return result;
}

uint64_t WebCore::InspectorCanvas::processArgument@<X0>(uint64_t this@<X0>, WebCore::Element *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _DWORD *v5;
  WTF::JSONImpl::Value *v6;
  uint64_t v7;
  char v8;
  _DWORD *v9;
  int v10;
  _QWORD v11[5];
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v4 = this;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v10 = 12;
    v5 = v9;
    if (v9)
      *v9 += 2;
    v11[0] = v5;
    v12 = 12;
    v6 = (WTF::JSONImpl::Value *)WebCore::InspectorCanvas::indexForData(v4, (unint64_t)v11);
    this = WTF::JSONImpl::Value::create(v6);
    if (v12 != -1)
      this = ((uint64_t (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v12])(&v8, v11);
    *(_QWORD *)a3 = v7;
    *(_DWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 16) = 1;
    if (v10 != -1)
      return ((uint64_t (*)(_QWORD *, _DWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v10])(v11, &v9);
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
  }
  return this;
}

uint64_t WebCore::InspectorCanvas::processArgument@<X0>(uint64_t this@<X0>, WebCore::ImageBitmap *a2@<X1>, uint64_t a3@<X8>)
{
  WTF::JSONImpl::Value *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  _QWORD v18[5];
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
    return this;
  }
  *((_DWORD *)a2 + 2) += 2;
  v18[0] = a2;
  v19 = 6;
  v5 = (WTF::JSONImpl::Value *)WebCore::InspectorCanvas::indexForData(this, (unint64_t)v18);
  this = WTF::JSONImpl::Value::create(v5);
  if (v19 != -1)
    this = ((uint64_t (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v19])(&v17, v18);
  *(_QWORD *)a3 = v16;
  *(_DWORD *)(a3 + 8) = 19;
  *(_BYTE *)(a3 + 16) = 1;
  if (*((_DWORD *)a2 + 2) != 1)
  {
    --*((_DWORD *)a2 + 2);
    return this;
  }
  v7 = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = 0;
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (__ldaxr((unsigned __int8 *)v8))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v8))
    {
      goto LABEL_12;
    }
    MEMORY[0x19AEA534C](v8);
LABEL_12:
    v10 = *(_QWORD *)(v8 + 8);
    v11 = v10 - 1;
    *(_QWORD *)(v8 + 8) = v10 - 1;
    if (v10 == 1)
    {
      v15 = *(_QWORD *)(v8 + 16);
      v12 = *(_QWORD *)(v8 + 24);
      *(_QWORD *)(v8 + 24) = 0;
      v13 = v15 != 0;
    }
    else
    {
      v12 = 0;
      v13 = 1;
    }
    v14 = __ldxr((unsigned __int8 *)v8);
    if (v14 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v8))
      {
LABEL_19:
        if (!v11)
        {
          if (v12)
            (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
          if (!v13)
            WTF::fastFree((WTF *)v8, v6);
        }
        goto LABEL_24;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v8);
    goto LABEL_19;
  }
LABEL_24:
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(*(_QWORD *)a2 + 8) = 3;
    *(_QWORD *)a2 = 0;
  }
  return bmalloc::api::isoDeallocate(a2, v6);
}

uint64_t WebCore::InspectorCanvas::processArgument@<X0>(uint64_t this@<X0>, WebCore::ImageData *a2@<X1>, uint64_t a3@<X8>)
{
  WTF::JSONImpl::Value *v5;
  void *v6;
  _DWORD *v7;
  uint64_t v8;
  char v9;
  _QWORD v10[5];
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    *(_DWORD *)a2 += 2;
    v10[0] = a2;
    v11 = 5;
    v5 = (WTF::JSONImpl::Value *)WebCore::InspectorCanvas::indexForData(this, (unint64_t)v10);
    this = WTF::JSONImpl::Value::create(v5);
    if (v11 != -1)
      this = ((uint64_t (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v11])(&v9, v10);
    *(_QWORD *)a3 = v8;
    *(_DWORD *)(a3 + 8) = 7;
    *(_BYTE *)(a3 + 16) = 1;
    if (*(_DWORD *)a2 == 1)
    {
      v7 = (_DWORD *)*((_QWORD *)a2 + 2);
      *((_QWORD *)a2 + 2) = 0;
      if (v7)
      {
        if (*v7 == 1)
          JSC::ArrayBufferView::operator delete();
        else
          --*v7;
      }
      return WTF::fastFree(a2, v6);
    }
    else
    {
      --*(_DWORD *)a2;
    }
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
  }
  return this;
}

uint64_t WebCore::InspectorCanvas::processArgument@<X0>(uint64_t this@<X0>, WebCore::Path2D *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::JSONImpl::Value *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  int v10;
  char v11;
  _QWORD v12[5];
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v4 = this;
    WebCore::buildStringFromPath((WebCore::Path2D *)((char *)a2 + 8), a2, &v8);
    v5 = v8;
    if (v8)
      *(_DWORD *)v8 += 2;
    v12[0] = v5;
    v13 = 12;
    v6 = (WTF::JSONImpl::Value *)WebCore::InspectorCanvas::indexForData(v4, (unint64_t)v12);
    this = WTF::JSONImpl::Value::create(v6);
    if (v13 != -1)
      this = ((uint64_t (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v13])(&v11, v12);
    v10 = 9;
    *(_QWORD *)a3 = v9;
    *(_DWORD *)(a3 + 8) = 9;
    *(_BYTE *)(a3 + 16) = 1;
    v9 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        return WTF::StringImpl::destroy(v5, v7);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
  }
  return this;
}

uint64_t WebCore::InspectorCanvas::processArgument@<X0>(uint64_t result@<X0>, WebCore::CanvasGradient **a2@<X1>, uint64_t a3@<X8>)
{
  WebCore::CanvasGradient *v4;
  WTF::JSONImpl::Value *v5;
  void *v6;
  WTF *v7;
  void *v8;
  uint64_t v9;
  char v10;
  _QWORD v11[5];
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  if (*a2)
  {
    *(_DWORD *)v4 += 2;
    v11[0] = v4;
    v12 = 0;
    v5 = (WTF::JSONImpl::Value *)WebCore::InspectorCanvas::indexForData(result, (unint64_t)v11);
    result = WTF::JSONImpl::Value::create(v5);
    if (v12 != -1)
      result = ((uint64_t (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v12])(&v10, v11);
    *(_QWORD *)a3 = v9;
    *(_DWORD *)(a3 + 8) = 10;
    *(_BYTE *)(a3 + 16) = 1;
    if (*(_DWORD *)v4 == 1)
    {
      WebCore::CanvasGradient::~CanvasGradient(v4, v6);
      return WTF::fastFree(v7, v8);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
  }
  return result;
}

uint64_t WebCore::InspectorCanvas::processArgument@<X0>(uint64_t result@<X0>, WTF **a2@<X1>, uint64_t a3@<X8>)
{
  WTF *v4;
  WTF::JSONImpl::Value *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _QWORD v12[5];
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  if (*a2)
  {
    *(_DWORD *)v4 += 2;
    v12[0] = v4;
    v13 = 1;
    v5 = (WTF::JSONImpl::Value *)WebCore::InspectorCanvas::indexForData(result, (unint64_t)v12);
    result = WTF::JSONImpl::Value::create(v5);
    if (v13 != -1)
      result = ((uint64_t (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v13])(&v11, v12);
    *(_QWORD *)a3 = v10;
    *(_DWORD *)(a3 + 8) = 11;
    *(_BYTE *)(a3 + 16) = 1;
    if (*(_DWORD *)v4 == 1)
    {
      v7 = *((_QWORD *)v4 + 1);
      *((_QWORD *)v4 + 1) = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 1)
        {
          if (*(_BYTE *)(v7 + 40))
          {
            v8 = *(unsigned int *)(v7 + 32);
            if ((_DWORD)v8 != -1)
              ((void (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ImageBufferENSA_ISF_EENSC_ISF_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSQ_EEEDcOSR_DpOT0____fmatrix[v8])(v12, v7 + 24);
            *(_DWORD *)(v7 + 32) = -1;
          }
          v9 = *(unsigned int *)(v7 + 16);
          if ((_DWORD)v9 != -1)
            ((void (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ImageBufferENSA_ISF_EENSC_ISF_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSQ_EEEDcOSR_DpOT0____fmatrix[v9])(v12, v7 + 8);
          *(_DWORD *)(v7 + 16) = -1;
          WTF::fastFree((WTF *)v7, v6);
        }
        else
        {
          --*(_DWORD *)v7;
        }
      }
      return WTF::fastFree(v4, v6);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
  }
  return result;
}

unsigned int *WebCore::InspectorCanvas::processArgument@<X0>(unsigned int *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  WTF::JSONImpl::Value *v5;
  void *v6;
  uint64_t v7;
  char v8;
  _QWORD v9[5];
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  if (*a2)
  {
    *(_DWORD *)(v4 + 24) += 4;
    v9[0] = v4;
    v10 = 2;
    v5 = (WTF::JSONImpl::Value *)WebCore::InspectorCanvas::indexForData((uint64_t)result, (unint64_t)v9);
    result = (unsigned int *)WTF::JSONImpl::Value::create(v5);
    if (v10 != -1)
      result = (unsigned int *)((uint64_t (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v10])(&v8, v9);
    *(_QWORD *)a3 = v7;
    *(_DWORD *)(a3 + 8) = 6;
    *(_BYTE *)(a3 + 16) = 1;
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v4, v6);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
  }
  return result;
}

{
  uint64_t v4;
  WTF::JSONImpl::Value *v5;
  void *v6;
  uint64_t v7;
  char v8;
  _QWORD v9[5];
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  if (*a2)
  {
    *(_DWORD *)(v4 + 24) += 4;
    v9[0] = v4;
    v10 = 3;
    v5 = (WTF::JSONImpl::Value *)WebCore::InspectorCanvas::indexForData((uint64_t)result, (unint64_t)v9);
    result = (unsigned int *)WTF::JSONImpl::Value::create(v5);
    if (v10 != -1)
      result = (unsigned int *)((uint64_t (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v10])(&v8, v9);
    *(_QWORD *)a3 = v7;
    *(_DWORD *)(a3 + 8) = 6;
    *(_BYTE *)(a3 + 16) = 1;
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v4, v6);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
  }
  return result;
}

{
  uint64_t v4;
  WTF::JSONImpl::Value *v5;
  void *v6;
  uint64_t v7;
  char v8;
  _QWORD v9[5];
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  if (*a2)
  {
    *(_DWORD *)(v4 + 24) += 4;
    v9[0] = v4;
    v10 = 4;
    v5 = (WTF::JSONImpl::Value *)WebCore::InspectorCanvas::indexForData((uint64_t)result, (unint64_t)v9);
    result = (unsigned int *)WTF::JSONImpl::Value::create(v5);
    if (v10 != -1)
      result = (unsigned int *)((uint64_t (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v10])(&v8, v9);
    *(_QWORD *)a3 = v7;
    *(_DWORD *)(a3 + 8) = 6;
    *(_BYTE *)(a3 + 16) = 1;
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v4, v6);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
  }
  return result;
}

_DWORD *WebCore::InspectorCanvas::processArgument@<X0>(_DWORD *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  WTF *v7;
  unint64_t v8;
  _DWORD *v9;
  int v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  _QWORD v20[5];
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v4 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v4)
  {
    if (v4 >> 30)
    {
      __break(0xC471u);
      return result;
    }
    v6 = (uint64_t)result;
    v7 = (WTF *)WTF::fastMalloc((WTF *)(4 * v4));
    if (*(_DWORD *)(a2 + 12))
    {
      v8 = 0;
      do
      {
        v9 = *(_DWORD **)(*(_QWORD *)a2 + 8 * v8);
        if (v9)
          *v9 += 2;
        v20[0] = v9;
        v21 = 12;
        v10 = WebCore::InspectorCanvas::indexForData(v6, (unint64_t)v20);
        if (v21 != -1)
          ((void (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v21])(&v19, v20);
        *((_DWORD *)v7 + v8++) = v10;
      }
      while (v8 < *(unsigned int *)(a2 + 12));
    }
    else
    {
      LODWORD(v8) = 0;
    }
  }
  else
  {
    LODWORD(v8) = 0;
    v7 = 0;
  }
  v11 = WTF::fastMalloc((WTF *)0x20);
  result = (_DWORD *)WTF::JSONImpl::ArrayBase::ArrayBase((WTF::JSONImpl::ArrayBase *)v11);
  if ((_DWORD)v8)
  {
    v13 = 4 * v8;
    v14 = v7;
    do
    {
      WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)*(unsigned int *)v14);
      v15 = *(unsigned int *)(v11 + 28);
      if ((_DWORD)v15 == *(_DWORD *)(v11 + 24))
      {
        v16 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v11 + 16), v15 + 1, (unint64_t)v20);
        v15 = *(unsigned int *)(v11 + 28);
        v17 = *(_QWORD *)(v11 + 16);
        v18 = *(_QWORD *)v16;
        *(_QWORD *)v16 = 0;
      }
      else
      {
        v17 = *(_QWORD *)(v11 + 16);
        v18 = v20[0];
        v20[0] = 0;
      }
      *(_QWORD *)(v17 + 8 * v15) = v18;
      *(_DWORD *)(v11 + 28) = v15 + 1;
      result = (_DWORD *)v20[0];
      v20[0] = 0;
      if (result)
      {
        if (*result == 1)
          result = (_DWORD *)WTF::JSONImpl::Value::operator delete();
        else
          --*result;
      }
      v14 = (WTF *)((char *)v14 + 4);
      v13 -= 4;
    }
    while (v13);
  }
  *(_QWORD *)a3 = v11;
  *(_DWORD *)(a3 + 8) = 3;
  *(_BYTE *)(a3 + 16) = 1;
  if (v7)
    return (_DWORD *)WTF::fastFree(v7, v12);
  return result;
}

WTF::JSONImpl::Value *WebCore::buildArrayForVector<double>(WTF::JSONImpl::Value **a1, uint64_t a2)
{
  uint64_t v4;
  WTF::JSONImpl::Value *result;
  uint64_t v6;
  double *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  WTF::JSONImpl::Value *v12;
  WTF::JSONImpl::Value *v13;

  v4 = WTF::fastMalloc((WTF *)0x20);
  result = (WTF::JSONImpl::Value *)WTF::JSONImpl::ArrayBase::ArrayBase((WTF::JSONImpl::ArrayBase *)v4);
  *a1 = result;
  v6 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v6)
  {
    v7 = *(double **)a2;
    v8 = 8 * v6;
    do
    {
      WTF::JSONImpl::Value::create(result, *v7);
      v9 = *(unsigned int *)(v4 + 28);
      if ((_DWORD)v9 == *(_DWORD *)(v4 + 24))
      {
        v10 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v4 + 16), v9 + 1, (unint64_t)&v13);
        v9 = *(unsigned int *)(v4 + 28);
        v11 = *(_QWORD *)(v4 + 16);
        v12 = *(WTF::JSONImpl::Value **)v10;
        *(_QWORD *)v10 = 0;
      }
      else
      {
        v11 = *(_QWORD *)(v4 + 16);
        v12 = v13;
        v13 = 0;
      }
      *(_QWORD *)(v11 + 8 * v9) = v12;
      *(_DWORD *)(v4 + 28) = v9 + 1;
      result = v13;
      v13 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 1)
          result = (WTF::JSONImpl::Value *)WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)result;
      }
      ++v7;
      v8 -= 8;
    }
    while (v8);
  }
  return result;
}

WTF::JSONImpl::Value *WebCore::InspectorCanvas::processArgument@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  WTF::JSONImpl::Value *result;
  uint64_t v6;
  float *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  WTF::JSONImpl::Value *v12;
  WTF::JSONImpl::Value *v13;

  v4 = WTF::fastMalloc((WTF *)0x20);
  result = (WTF::JSONImpl::Value *)WTF::JSONImpl::ArrayBase::ArrayBase((WTF::JSONImpl::ArrayBase *)v4);
  v6 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v6)
  {
    v7 = *(float **)a1;
    v8 = 4 * v6;
    do
    {
      WTF::JSONImpl::Value::create(result, *v7);
      v9 = *(unsigned int *)(v4 + 28);
      if ((_DWORD)v9 == *(_DWORD *)(v4 + 24))
      {
        v10 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v4 + 16), v9 + 1, (unint64_t)&v13);
        v9 = *(unsigned int *)(v4 + 28);
        v11 = *(_QWORD *)(v4 + 16);
        v12 = *(WTF::JSONImpl::Value **)v10;
        *(_QWORD *)v10 = 0;
      }
      else
      {
        v11 = *(_QWORD *)(v4 + 16);
        v12 = v13;
        v13 = 0;
      }
      *(_QWORD *)(v11 + 8 * v9) = v12;
      *(_DWORD *)(v4 + 28) = v9 + 1;
      result = v13;
      v13 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 1)
          result = (WTF::JSONImpl::Value *)WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)result;
      }
      ++v7;
      v8 -= 4;
    }
    while (v8);
  }
  *(_QWORD *)a2 = v4;
  *(_DWORD *)(a2 + 8) = 4;
  *(_BYTE *)(a2 + 16) = 1;
  return result;
}

void WebCore::InspectorCanvas::processArgument(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  WTF *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  WTF *v21;
  _DWORD *v22;
  uint64_t v23;
  char v24;
  char *v25;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    if (v3 >> 29)
    {
LABEL_30:
      __break(0xC471u);
      return;
    }
    v5 = (WTF *)WTF::fastMalloc((WTF *)(8 * v3));
    if (*(_DWORD *)(a1 + 12))
    {
      v6 = 0;
      v7 = 0;
      while (1)
      {
        v8 = *(unsigned int *)(*(_QWORD *)a1 + v6 + 32);
        if ((_DWORD)v8 == -1)
          break;
        v25 = &v24;
        ((void (*)(uint64_t *__return_ptr, char **))off_1E33EE1F0[v8])(&v23, &v25);
        v9 = v7 + 1;
        *((_QWORD *)v5 + v7) = v23;
        v6 += 40;
        v7 = v9;
        if (v9 >= *(unsigned int *)(a1 + 12))
          goto LABEL_10;
      }
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_30;
    }
    LODWORD(v9) = 0;
  }
  else
  {
    LODWORD(v9) = 0;
    v5 = 0;
  }
LABEL_10:
  v10 = WTF::fastMalloc((WTF *)0x20);
  WTF::JSONImpl::ArrayBase::ArrayBase((WTF::JSONImpl::ArrayBase *)v10);
  v12 = v9;
  v13 = 8 * v9;
  if ((_DWORD)v9)
  {
    LODWORD(v14) = *(_DWORD *)(v10 + 28);
    v15 = 8 * v9;
    v16 = (unint64_t)v5;
    do
    {
      if ((_DWORD)v14 == *(_DWORD *)(v10 + 24))
      {
        v17 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 16), v14 + 1, v16);
        v14 = *(unsigned int *)(v10 + 28);
        v18 = (_QWORD *)(*(_QWORD *)(v10 + 16) + 8 * v14);
      }
      else
      {
        v18 = (_QWORD *)(*(_QWORD *)(v10 + 16) + 8 * v14);
        v17 = (char *)v16;
      }
      v19 = *(_QWORD *)v17;
      *(_QWORD *)v17 = 0;
      *v18 = v19;
      LODWORD(v14) = v14 + 1;
      *(_DWORD *)(v10 + 28) = v14;
      v16 += 8;
      v15 -= 8;
    }
    while (v15);
  }
  v20 = (*(_DWORD *)v10)++;
  *(_QWORD *)a2 = v10;
  *(_DWORD *)(a2 + 8) = 4;
  *(_BYTE *)(a2 + 16) = 1;
  if (v20)
  {
    *(_DWORD *)v10 = v20;
    if (v12)
      goto LABEL_18;
  }
  else
  {
    WTF::JSONImpl::Value::operator delete();
    if (v12)
    {
LABEL_18:
      v21 = v5;
      do
      {
        v22 = *(_DWORD **)v21;
        *(_QWORD *)v21 = 0;
        if (v22)
        {
          if (*v22 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v22;
        }
        v21 = (WTF *)((char *)v21 + 8);
        v13 -= 8;
      }
      while (v13);
    }
  }
  if (v5)
    WTF::fastFree(v5, v11);
}

uint64_t WebCore::InspectorCanvas::processArgument@<X0>(uint64_t result@<X0>, WebCore::OffscreenCanvas **a2@<X1>, uint64_t a3@<X8>)
{
  WebCore::OffscreenCanvas *v4;
  WTF::JSONImpl::Value *v5;
  bmalloc::api *v6;
  void *v7;
  uint64_t v8;
  char v9;
  _QWORD v10[5];
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  if (*a2)
  {
    *((_DWORD *)v4 + 6) += 2;
    v10[0] = v4;
    v11 = 11;
    v5 = (WTF::JSONImpl::Value *)WebCore::InspectorCanvas::indexForData(result, (unint64_t)v10);
    result = WTF::JSONImpl::Value::create(v5);
    if (v11 != -1)
      result = ((uint64_t (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v11])(&v9, v10);
    *(_QWORD *)a3 = v8;
    *(_DWORD *)(a3 + 8) = 6;
    *(_BYTE *)(a3 + 16) = 1;
    if (*((_DWORD *)v4 + 6) == 1)
    {
      WebCore::OffscreenCanvas::~OffscreenCanvas(v4);
      return bmalloc::api::isoDeallocate(v6, v7);
    }
    else
    {
      --*((_DWORD *)v4 + 6);
    }
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
  }
  return result;
}

WTF::StringImpl *WebCore::InspectorCanvas::recordAction(WebCore::InspectorCanvas *this, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  int *v7;
  int v8;
  WTF::JSONImpl::ArrayBase *v9;
  _DWORD *v10;
  WTF::JSONImpl::ArrayBase *v11;
  WTF::JSONImpl::Object *v12;
  uint64_t v13;
  _DWORD *v14;
  WTF::StringImpl *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  _DWORD *v20;
  WTF::StringImpl *result;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::JSONImpl::Value *v34;
  uint64_t *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  WTF::StringImpl **v48;
  WTF::StringImpl **v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  WTF::StringImpl *v58;
  uint64_t *v59;
  uint64_t *v60;
  Inspector **v61;
  uint64_t v62;
  WTF::JSONImpl::Value *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  _DWORD *v67;
  _DWORD *v68;
  _DWORD *v69;
  _DWORD *v70;
  uint64_t v71;
  char **v72;
  uint64_t v73;
  char *v74;
  char *v75;
  WTF *v76;
  void *v77;
  _DWORD **v78;
  uint64_t v79;
  _DWORD *v80;
  WTF::StringImpl *v81;
  _DWORD *v82;
  WTF::StringImpl *v83[5];
  int v84;
  _QWORD v85[2];
  char v86;
  int v87;
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  if (!*((_QWORD *)this + 3))
  {
    WebCore::InspectorCanvas::buildInitialState((WebCore::InspectorCanvas *)v85, (uint64_t)this);
    v6 = v85[0];
    v85[0] = 0;
    v7 = (int *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = v6;
    if (v7)
    {
      v8 = *v7 - 1;
      if (*v7 == 1)
      {
        WTF::JSONImpl::Value::operator delete();
        v7 = (int *)v85[0];
        v85[0] = 0;
        if (!v7)
          goto LABEL_5;
        v8 = *v7 - 1;
        if (*v7 == 1)
        {
          WTF::JSONImpl::Value::operator delete();
          goto LABEL_5;
        }
      }
      *v7 = v8;
    }
LABEL_5:
    *((_QWORD *)this + 13) += WTF::JSONImpl::Value::memoryCost(*((WTF::JSONImpl::Value **)this + 3));
  }
  if (!*((_QWORD *)this + 4))
  {
    v9 = (WTF::JSONImpl::ArrayBase *)WTF::fastMalloc((WTF *)0x20);
    WTF::JSONImpl::ArrayBase::ArrayBase(v9);
    v10 = (_DWORD *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = v9;
    if (v10)
    {
      if (*v10 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v10;
    }
  }
  if (!*((_QWORD *)this + 5))
  {
    v11 = (WTF::JSONImpl::ArrayBase *)WTF::fastMalloc((WTF *)0x20);
    WTF::JSONImpl::ArrayBase::ArrayBase(v11);
    v12 = (WTF::JSONImpl::Object *)*((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = v11;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        v12 = (WTF::JSONImpl::Object *)WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v12;
    }
    WTF::JSONImpl::Object::create(v12);
    v13 = v85[0];
    v14 = (_DWORD *)*((_QWORD *)this + 5);
    ++*v14;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v82 = v14;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v13 + 16), v83, (const WTF::StringImpl *)&v82, (uint64_t)v85);
    if (v86)
    {
      v16 = (uint64_t *)(v13 + 24);
      v17 = *(unsigned int *)(v13 + 36);
      if ((_DWORD)v17 == *(_DWORD *)(v13 + 32))
      {
        v78 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v16, v17 + 1, (unint64_t)v83);
        v17 = *(unsigned int *)(v13 + 36);
        v79 = *(_QWORD *)(v13 + 24);
        v80 = *v78;
        if (*v78)
          *v80 += 2;
        *(_QWORD *)(v79 + 8 * v17) = v80;
      }
      else
      {
        v18 = *v16;
        v19 = v83[0];
        if (v83[0])
          *(_DWORD *)v83[0] += 2;
        *(_QWORD *)(v18 + 8 * v17) = v19;
      }
      *(_DWORD *)(v13 + 36) = v17 + 1;
    }
    v20 = v82;
    v82 = 0;
    if (v20)
    {
      if (*v20 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v20;
    }
    result = v83[0];
    v83[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
      else
        *(_DWORD *)result -= 2;
    }
    v22 = *((_QWORD *)this + 4);
    v23 = *(unsigned int *)(v22 + 28);
    if ((_DWORD)v23 == *(_DWORD *)(v22 + 24))
    {
      v24 = v23 + (v23 >> 2);
      if (v24 >= 0x10)
        v25 = v24 + 1;
      else
        v25 = 16;
      if (v25 <= v23 + 1)
        v26 = v23 + 1;
      else
        v26 = v25;
      if (v26 >> 29)
      {
        __break(0xC471u);
LABEL_138:
        __break(1u);
        return result;
      }
      v27 = *(void **)(v22 + 16);
      v28 = (void *)WTF::fastMalloc((WTF *)(8 * v26));
      *(_DWORD *)(v22 + 24) = v26;
      *(_QWORD *)(v22 + 16) = v28;
      result = (WTF::StringImpl *)memcpy(v28, v27, 8 * v23);
      if (v27)
      {
        if (*(void **)(v22 + 16) == v27)
        {
          *(_QWORD *)(v22 + 16) = 0;
          *(_DWORD *)(v22 + 24) = 0;
        }
        result = (WTF::StringImpl *)WTF::fastFree((WTF *)v27, v29);
      }
      v23 = *(unsigned int *)(v22 + 28);
      v30 = (_QWORD *)(*(_QWORD *)(v22 + 16) + 8 * v23);
    }
    else
    {
      v30 = (_QWORD *)(*(_QWORD *)(v22 + 16) + 8 * v23);
    }
    *v30 = v13;
    *(_DWORD *)(v22 + 28) = v23 + 1;
    ++*((_QWORD *)this + 16);
    WTF::MonotonicTime::now(result);
    *((_QWORD *)this + 11) = v31;
  }
  WebCore::InspectorCanvas::appendActionSnapshotIfNeeded(this);
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 2) + 8) + 64))(*(_QWORD *)(*((_QWORD *)this + 2) + 8))
    && (MEMORY[0x19AEA53F4](*a2, "transferFromImageBitmap", 23) & 1) != 0
    || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 2) + 8) + 32))(*(_QWORD *)(*((_QWORD *)this + 2) + 8))
    && ((MEMORY[0x19AEA53F4](*a2, "clear", 5) & 1) != 0
     || (MEMORY[0x19AEA53F4](*a2, "drawArrays", 10) & 1) != 0
     || (MEMORY[0x19AEA53F4](*a2, "drawElements", 12) & 1) != 0)
    || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 2) + 8) + 40))(*(_QWORD *)(*((_QWORD *)this + 2) + 8))
    && ((MEMORY[0x19AEA53F4](*a2, "clear", 5) & 1) != 0
     || (MEMORY[0x19AEA53F4](*a2, "drawArrays", 10) & 1) != 0
     || (MEMORY[0x19AEA53F4](*a2, "drawArraysInstanced", 19) & 1) != 0
     || (MEMORY[0x19AEA53F4](*a2, "drawElements", 12) & 1) != 0
     || MEMORY[0x19AEA53F4](*a2, "drawElementsInstanced", 21)))
  {
    *((_BYTE *)this + 136) = 1;
  }
  v32 = WTF::fastMalloc((WTF *)0x20);
  WTF::JSONImpl::ArrayBase::ArrayBase((WTF::JSONImpl::ArrayBase *)v32);
  v33 = *a2;
  *a2 = 0;
  v85[0] = v33;
  v87 = 12;
  v34 = (WTF::JSONImpl::Value *)WebCore::InspectorCanvas::indexForData((uint64_t)this, (unint64_t)v85);
  v35 = (uint64_t *)(v32 + 16);
  WTF::JSONImpl::Value::create(v34);
  v36 = *(unsigned int *)(v32 + 28);
  if ((_DWORD)v36 == *(_DWORD *)(v32 + 24))
  {
    v37 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v32 + 16), v36 + 1, (unint64_t)v83);
    v36 = *(unsigned int *)(v32 + 28);
    v38 = *(_QWORD *)(v32 + 16);
    v39 = *(WTF::StringImpl **)v37;
    *(_QWORD *)v37 = 0;
  }
  else
  {
    v38 = *v35;
    v39 = v83[0];
    v83[0] = 0;
  }
  *(_QWORD *)(v38 + 8 * v36) = v39;
  *(_DWORD *)(v32 + 28) = v36 + 1;
  v40 = v83[0];
  v83[0] = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v40;
  }
  if (v87 != -1)
    ((void (*)(WTF::StringImpl **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v87])(v83, v85);
  v87 = -1;
  v41 = WTF::fastMalloc((WTF *)0x20);
  WTF::JSONImpl::ArrayBase::ArrayBase((WTF::JSONImpl::ArrayBase *)v41);
  v42 = WTF::fastMalloc((WTF *)0x20);
  WTF::JSONImpl::ArrayBase::ArrayBase((WTF::JSONImpl::ArrayBase *)v42);
  v43 = a3[1];
  if (v43)
  {
    v44 = 24 * v43;
    v45 = (_BYTE *)(*a3 + 16);
    do
    {
      if (*v45)
      {
        v46 = (WTF::StringImpl *)*((_QWORD *)v45 - 2);
        ++*(_DWORD *)v46;
        v83[0] = v46;
        v47 = *(unsigned int *)(v41 + 28);
        if ((_DWORD)v47 == *(_DWORD *)(v41 + 24))
        {
          v48 = (WTF::StringImpl **)WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v41 + 16), v47 + 1, (unint64_t)v83);
          v47 = *(unsigned int *)(v41 + 28);
          v49 = (WTF::StringImpl **)(*(_QWORD *)(v41 + 16) + 8 * v47);
          v46 = *v48;
        }
        else
        {
          v49 = (WTF::StringImpl **)(*(_QWORD *)(v41 + 16) + 8 * v47);
          v48 = v83;
        }
        *v48 = 0;
        *v49 = v46;
        *(_DWORD *)(v41 + 28) = v47 + 1;
        result = v83[0];
        v83[0] = 0;
        if (result)
        {
          if (*(_DWORD *)result == 1)
            result = (WTF::StringImpl *)WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)result;
        }
        if (!*v45)
          goto LABEL_138;
        WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)*((unsigned int *)v45 - 2));
        v50 = *(unsigned int *)(v42 + 28);
        if ((_DWORD)v50 == *(_DWORD *)(v42 + 24))
        {
          v51 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v42 + 16), v50 + 1, (unint64_t)v83);
          v50 = *(unsigned int *)(v42 + 28);
          v52 = *(_QWORD *)(v42 + 16);
          v53 = *(WTF::StringImpl **)v51;
          *(_QWORD *)v51 = 0;
        }
        else
        {
          v52 = *(_QWORD *)(v42 + 16);
          v53 = v83[0];
          v83[0] = 0;
        }
        *(_QWORD *)(v52 + 8 * v50) = v53;
        *(_DWORD *)(v42 + 28) = v50 + 1;
        v54 = v83[0];
        v83[0] = 0;
        if (v54)
        {
          if (*(_DWORD *)v54 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)v54;
        }
      }
      v45 += 24;
      v44 -= 24;
    }
    while (v44);
  }
  v83[0] = (WTF::StringImpl *)v41;
  v55 = *(unsigned int *)(v32 + 28);
  if ((_DWORD)v55 == *(_DWORD *)(v32 + 24))
  {
    v56 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v32 + 16), v55 + 1, (unint64_t)v83);
    v55 = *(unsigned int *)(v32 + 28);
    v57 = (uint64_t *)(*(_QWORD *)(v32 + 16) + 8 * v55);
    v41 = *v56;
  }
  else
  {
    v57 = (uint64_t *)(*v35 + 8 * v55);
    v56 = (uint64_t *)v83;
  }
  *v56 = 0;
  *v57 = v41;
  LODWORD(v55) = v55 + 1;
  *(_DWORD *)(v32 + 28) = v55;
  v58 = v83[0];
  v83[0] = 0;
  if (v58)
  {
    if (*(_DWORD *)v58 == 1)
    {
      WTF::JSONImpl::Value::operator delete();
      LODWORD(v55) = *(_DWORD *)(v32 + 28);
    }
    else
    {
      --*(_DWORD *)v58;
    }
  }
  v83[0] = (WTF::StringImpl *)v42;
  if ((_DWORD)v55 == *(_DWORD *)(v32 + 24))
  {
    v59 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v32 + 16), v55 + 1, (unint64_t)v83);
    v55 = *(unsigned int *)(v32 + 28);
    v60 = (uint64_t *)(*(_QWORD *)(v32 + 16) + 8 * v55);
    v42 = *v59;
  }
  else
  {
    v60 = (uint64_t *)(*v35 + 8 * v55);
    v59 = (uint64_t *)v83;
  }
  *v59 = 0;
  *v60 = v42;
  *(_DWORD *)(v32 + 28) = v55 + 1;
  v61 = (Inspector **)v83[0];
  v83[0] = 0;
  if (v61)
  {
    if (*(_DWORD *)v61 == 1)
      v61 = (Inspector **)WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v61;
  }
  v62 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v62 || (v61 = *(Inspector ***)(v62 + 96)) == 0)
    v61 = (Inspector **)WebCore::threadGlobalDataSlow((WebCore *)v61);
  Inspector::createScriptCallStack(v61[8], (JSC::JSGlobalObject *)0xC8);
  if (v81)
    ++*(_DWORD *)v81;
  v83[0] = v81;
  v84 = 7;
  v63 = (WTF::JSONImpl::Value *)WebCore::InspectorCanvas::indexForData((uint64_t)this, (unint64_t)v83);
  WTF::JSONImpl::Value::create(v63);
  v64 = *(unsigned int *)(v32 + 28);
  if ((_DWORD)v64 == *(_DWORD *)(v32 + 24))
  {
    v65 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v32 + 16), v64 + 1, (unint64_t)&v82);
    v64 = *(unsigned int *)(v32 + 28);
    v66 = *(_QWORD *)(v32 + 16);
    v67 = *(_DWORD **)v65;
    *(_QWORD *)v65 = 0;
  }
  else
  {
    v66 = *v35;
    v67 = v82;
    v82 = 0;
  }
  *(_QWORD *)(v66 + 8 * v64) = v67;
  *(_DWORD *)(v32 + 28) = v64 + 1;
  v68 = v82;
  v82 = 0;
  if (v68)
  {
    if (*v68 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v68;
  }
  if (v84 != -1)
    ((void (*)(_DWORD **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v84])(&v82, v83);
  v84 = -1;
  if (v81)
  {
    if (*(_DWORD *)v81 == 1)
    {
      v76 = (WTF *)MEMORY[0x19AEA6024]();
      WTF::fastFree(v76, v77);
    }
    else
    {
      --*(_DWORD *)v81;
    }
  }
  v69 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = v32;
  if (v69)
  {
    if (*v69 == 1)
    {
      WTF::JSONImpl::Value::operator delete();
      v32 = *((_QWORD *)this + 6);
    }
    else
    {
      --*v69;
    }
  }
  *((_QWORD *)this + 13) += WTF::JSONImpl::Value::memoryCost((WTF::JSONImpl::Value *)v32);
  v71 = *((_QWORD *)this + 5);
  v70 = (_DWORD *)*((_QWORD *)this + 6);
  ++*v70;
  v85[0] = v70;
  v72 = (char **)(v71 + 16);
  v73 = *(unsigned int *)(v71 + 28);
  if ((_DWORD)v73 == *(_DWORD *)(v71 + 24))
  {
    v74 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v72, v73 + 1, (unint64_t)v85);
    v73 = *(unsigned int *)(v71 + 28);
    v75 = (char *)(*(_QWORD *)(v71 + 16) + 8 * v73);
    v70 = *(_DWORD **)v74;
  }
  else
  {
    v75 = &(*v72)[8 * v73];
    v74 = (char *)v85;
  }
  *(_QWORD *)v74 = 0;
  *(_QWORD *)v75 = v70;
  *(_DWORD *)(v71 + 28) = v73 + 1;
  result = (WTF::StringImpl *)v85[0];
  v85[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF::StringImpl *)WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)result;
  }
  return result;
}

WTF::StringImpl *WebCore::InspectorCanvas::buildInitialState(WebCore::InspectorCanvas *this, uint64_t a2)
{
  WTF::JSONImpl::Object *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::JSONImpl::Value *v6;
  WTF::StringImpl *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::JSONImpl::Value *v16;
  WTF::StringImpl *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  WebCore::CanvasRenderingContext2DBase *v25;
  int v26;
  WTF::JSONImpl::Object *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::String *v33;
  uint64_t v34;
  WTF::JSONImpl::Value *v35;
  char **v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  WTF::JSONImpl::Value *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  WTF::JSONImpl::Value *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  WTF::JSONImpl::Value *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  WTF::JSONImpl::Value *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  WTF::JSONImpl::Value *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  _DWORD *v66;
  WTF::StringImpl *v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::String *v76;
  WTF::JSONImpl::Value *v77;
  WTF::StringImpl *v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::String *v87;
  unint64_t v88;
  char **v89;
  char *v90;
  uint64_t v91;
  WTF::JSONImpl::Value *v92;
  WTF::StringImpl *v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  WTF::String *v102;
  WTF::JSONImpl::Value *v103;
  WTF::StringImpl *v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  WTF::StringImpl *v112;
  WTF::String *v113;
  int v114;
  _BOOL8 v115;
  BOOL v116;
  uint64_t v117;
  _DWORD *v118;
  WTF::JSONImpl::Value *v119;
  WTF::StringImpl *v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  WTF::StringImpl *v124;
  WTF::StringImpl *v125;
  WTF::StringImpl *v126;
  WTF::StringImpl *v127;
  WTF::StringImpl *v128;
  WTF::String *v129;
  int v130;
  uint64_t v131;
  _DWORD *v132;
  WTF::JSONImpl::Value *v133;
  WTF::StringImpl *v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  WTF::StringImpl *v138;
  WTF::StringImpl *v139;
  WTF::StringImpl *v140;
  WTF::StringImpl *v141;
  WTF::StringImpl *v142;
  WTF::String *v143;
  WTF::JSONImpl::Value *v144;
  WTF::StringImpl *v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  WTF::StringImpl *v149;
  WTF::StringImpl *v150;
  WTF::StringImpl *v151;
  WTF::StringImpl *v152;
  WTF::StringImpl *v153;
  WTF::String *v154;
  WTF::JSONImpl::Value *v155;
  WTF::StringImpl *v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  WTF::StringImpl *v160;
  WTF::StringImpl *v161;
  WTF::StringImpl *v162;
  WTF::StringImpl *v163;
  WTF::StringImpl *v164;
  WTF::String *v165;
  WTF::JSONImpl::Value *v166;
  WTF::StringImpl *v167;
  uint64_t *v168;
  uint64_t v169;
  uint64_t v170;
  WTF::StringImpl *v171;
  WTF::StringImpl *v172;
  WTF::StringImpl *v173;
  WTF::StringImpl *v174;
  WTF::StringImpl *v175;
  WTF::String *v176;
  WTF::JSONImpl::Value *v177;
  WTF::StringImpl *v178;
  uint64_t *v179;
  uint64_t v180;
  uint64_t v181;
  WTF::StringImpl *v182;
  WTF::StringImpl *v183;
  WTF::StringImpl *v184;
  WTF::StringImpl *v185;
  WTF::StringImpl *v186;
  WTF::String *v187;
  WTF::StringImpl *v188;
  WTF::JSONImpl::Value *v189;
  WTF::StringImpl *v190;
  uint64_t *v191;
  uint64_t v192;
  uint64_t v193;
  WTF::StringImpl *v194;
  WTF::StringImpl *v195;
  WTF::StringImpl *v196;
  WTF::StringImpl *v197;
  uint64_t v198;
  WTF::StringImpl *v199;
  char **v200;
  uint64_t v201;
  char *v202;
  WTF::StringImpl **v203;
  _DWORD *v204;
  WTF::StringImpl *v205;
  WTF::StringImpl *v206;
  WTF::String *v207;
  WTF::StringImpl *v208;
  uint64_t *v209;
  uint64_t v210;
  uint64_t v211;
  WTF::StringImpl *v212;
  WTF::StringImpl *v213;
  WTF::StringImpl *v214;
  WTF::StringImpl *v215;
  WTF::StringImpl *v216;
  WTF::String *v217;
  WTF::JSONImpl::Value *v218;
  WTF::StringImpl *v219;
  uint64_t *v220;
  uint64_t v221;
  uint64_t v222;
  WTF::StringImpl *v223;
  WTF::StringImpl *v224;
  WTF::StringImpl *v225;
  WTF::StringImpl *v226;
  WTF::StringImpl *v227;
  WTF::String *v228;
  void *v229;
  WTF::StringImpl *v230;
  WTF::JSONImpl::Value *v231;
  WTF::StringImpl *v232;
  uint64_t *v233;
  uint64_t v234;
  uint64_t v235;
  WTF::StringImpl *v236;
  WTF::StringImpl *v237;
  WTF::StringImpl *v238;
  WTF::StringImpl *v239;
  WTF::StringImpl *v240;
  WTF::StringImpl *v241;
  WTF::String *v242;
  int v243;
  uint64_t v244;
  _DWORD *v245;
  WTF::JSONImpl::Value *v246;
  WTF::StringImpl *v247;
  uint64_t *v248;
  uint64_t v249;
  uint64_t v250;
  WTF::StringImpl *v251;
  WTF::StringImpl *v252;
  WTF::StringImpl *v253;
  WTF::StringImpl *v254;
  WTF::StringImpl *v255;
  WTF::String *v256;
  uint64_t v257;
  uint64_t v258;
  _DWORD *v259;
  WTF::JSONImpl::Value *v260;
  WTF::StringImpl *v261;
  uint64_t *v262;
  uint64_t v263;
  uint64_t v264;
  WTF::StringImpl *v265;
  WTF::StringImpl *v266;
  WTF::StringImpl *v267;
  WTF::StringImpl *v268;
  WTF::StringImpl *v269;
  WTF::String *v270;
  uint64_t v271;
  _DWORD *v272;
  WTF::JSONImpl::Value *v273;
  WTF::StringImpl *v274;
  uint64_t *v275;
  uint64_t v276;
  uint64_t v277;
  WTF::StringImpl *v278;
  WTF::StringImpl *v279;
  WTF::StringImpl *v280;
  WebCore *v281;
  int v282;
  uint64_t v283;
  WTF::StringImpl *v284;
  WTF::JSONImpl::Value *v285;
  WTF::StringImpl *v286;
  WTF::StringImpl *v287;
  WTF::StringImpl *v288;
  WTF::String *v289;
  WTF::StringImpl *v290;
  uint64_t *v291;
  uint64_t v292;
  uint64_t v293;
  WTF::StringImpl *v294;
  WTF::StringImpl *v295;
  WTF::StringImpl *v296;
  WebCore *v297;
  int v298;
  uint64_t v299;
  WTF::StringImpl *v300;
  WTF::JSONImpl::Value *v301;
  WTF::StringImpl *v302;
  WTF::StringImpl *v303;
  WTF::StringImpl *v304;
  WTF::String *v305;
  WTF::StringImpl *v306;
  uint64_t *v307;
  uint64_t v308;
  uint64_t v309;
  WTF::StringImpl *v310;
  WTF::StringImpl *v311;
  WTF::StringImpl *v312;
  WTF::StringImpl *v313;
  WTF::StringImpl *v314;
  WTF::String *v315;
  WTF::StringImpl *v316;
  uint64_t *v317;
  uint64_t v318;
  uint64_t v319;
  WTF::StringImpl *v320;
  WTF::StringImpl *v321;
  WTF::StringImpl *v322;
  WTF::StringImpl *v323;
  WTF::StringImpl *v324;
  WTF::String *v325;
  uint64_t v326;
  _DWORD *v327;
  WTF::JSONImpl::Value *v328;
  WTF::StringImpl *v329;
  uint64_t *v330;
  uint64_t v331;
  uint64_t v332;
  WTF::StringImpl *v333;
  WTF::StringImpl *v334;
  WTF::StringImpl *v335;
  uint64_t v336;
  uint64_t v337;
  const WebCore::Path *v338;
  unsigned int *v339;
  uint64_t v340;
  WTF::StringImpl *v341;
  WTF::JSONImpl::Value *v342;
  void *v343;
  uint64_t v344;
  char *v345;
  uint64_t v346;
  uint64_t v347;
  _DWORD *v348;
  WTF::StringImpl *v349;
  WTF::StringImpl *v350;
  WTF::String *v351;
  WTF::StringImpl *v352;
  uint64_t *v353;
  uint64_t v354;
  uint64_t v355;
  WTF::StringImpl *v356;
  WTF::StringImpl *v357;
  WTF::StringImpl *result;
  WTF::StringImpl *v359;
  unint64_t v360;
  unint64_t v361;
  unint64_t v362;
  unint64_t v363;
  void *v364;
  void *v365;
  void *v366;
  WTF::StringImpl **v367;
  uint64_t v368;
  _DWORD **v369;
  uint64_t v370;
  _DWORD *v371;
  _DWORD **v372;
  uint64_t v373;
  _DWORD *v374;
  _DWORD **v375;
  uint64_t v376;
  _DWORD *v377;
  _DWORD **v378;
  uint64_t v379;
  _DWORD *v380;
  _DWORD **v381;
  uint64_t v382;
  _DWORD *v383;
  _DWORD **v384;
  uint64_t v385;
  _DWORD *v386;
  _DWORD **v387;
  uint64_t v388;
  _DWORD *v389;
  _DWORD **v390;
  uint64_t v391;
  _DWORD *v392;
  _DWORD **v393;
  uint64_t v394;
  _DWORD *v395;
  _DWORD **v396;
  uint64_t v397;
  _DWORD *v398;
  _DWORD **v399;
  uint64_t v400;
  _DWORD *v401;
  _DWORD **v402;
  uint64_t v403;
  _DWORD *v404;
  _DWORD **v405;
  uint64_t v406;
  _DWORD *v407;
  _DWORD **v408;
  uint64_t v409;
  _DWORD *v410;
  _DWORD **v411;
  uint64_t v412;
  _DWORD *v413;
  _DWORD **v414;
  uint64_t v415;
  _DWORD *v416;
  _DWORD **v417;
  uint64_t v418;
  _DWORD *v419;
  _DWORD **v420;
  uint64_t v421;
  _DWORD *v422;
  _DWORD **v423;
  uint64_t v424;
  _DWORD *v425;
  _DWORD **v426;
  uint64_t v427;
  _DWORD *v428;
  _DWORD **v429;
  uint64_t v430;
  _DWORD *v431;
  _DWORD **v432;
  uint64_t v433;
  _DWORD *v434;
  WebCore::CanvasGradient *v435;
  void *v436;
  int v437;
  WebCore::CanvasGradient *v438;
  void *v439;
  int v440;
  WTF *v441;
  void *v442;
  WTF *v443;
  void *v444;
  uint64_t v445;
  void *v446;
  uint64_t v447;
  void *v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  _DWORD *v455;
  char **v456;
  uint64_t v457;
  uint64_t *v458;
  char *v459;
  WTF::StringImpl *v460;
  uint64_t v461;
  WTF::StringImpl *v462;
  WTF::StringImpl *v463;
  uint64_t *v464;
  uint64_t v465;
  uint64_t v466;
  WTF::StringImpl *v467;
  WTF::StringImpl *v468;
  WTF::StringImpl *v469;
  uint64_t *v470;
  uint64_t v471;
  uint64_t v472;
  WTF::StringImpl *v473;
  WTF::StringImpl *v474;
  WTF::StringImpl *v475;
  uint64_t *v476;
  uint64_t v477;
  uint64_t v478;
  WTF::StringImpl *v479;
  WTF::StringImpl *v480;
  WTF::StringImpl *v481;
  int v482;
  const WTF::String *v483;
  WTF::StringImpl *v484;
  uint64_t *v485;
  uint64_t v486;
  uint64_t v487;
  WTF::StringImpl *v488;
  WTF::StringImpl *v489;
  WTF::StringImpl *v490;
  _DWORD **v491;
  uint64_t v492;
  _DWORD *v493;
  _DWORD **v494;
  uint64_t v495;
  _DWORD *v496;
  _DWORD **v497;
  uint64_t v498;
  _DWORD *v499;
  _DWORD **v500;
  uint64_t v501;
  _DWORD *v502;
  _DWORD **v503;
  uint64_t v504;
  _DWORD *v505;
  _DWORD **v506;
  uint64_t v507;
  _DWORD *v508;
  uint64_t v510;
  uint64_t v511;
  WebCore::CanvasRenderingContext2DBase *v512;
  WTF::StringImpl *v513;
  int v514;
  WTF::StringImpl *v515;
  WTF::StringImpl *v516;
  WTF::StringImpl *v517;
  WTF::StringImpl *v518;
  _QWORD v519[5];
  int v520;
  _QWORD v521[5];
  int v522;
  _QWORD v523[5];
  int v524;
  _QWORD v525[5];
  int v526;
  _QWORD v527[5];
  int v528;
  _QWORD v529[5];
  int v530;
  _QWORD v531[5];
  int v532;
  _QWORD v533[5];
  int v534;
  _QWORD v535[5];
  int v536;
  _QWORD v537[5];
  int v538;
  _QWORD v539[5];
  int v540;
  _QWORD v541[5];
  int v542;
  _QWORD v543[5];
  int v544;
  _QWORD v545[5];
  int v546;
  _QWORD v547[5];
  int v548;
  _QWORD v549[5];
  int v550;
  _QWORD v551[2];
  char v552;
  int v553;
  uint64_t v554;

  v554 = *MEMORY[0x1E0C80C00];
  v3 = (WTF::JSONImpl::Object *)WTF::JSONImpl::Object::create(this);
  WTF::JSONImpl::Object::create(v3);
  v4 = v516;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) + 8) + 32);
  v6 = (WTF::JSONImpl::Value *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 56))(v5);
  WTF::JSONImpl::Value::create(v6);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v516 + 2, &v518, (const WTF::StringImpl *)&v513, (uint64_t)v551);
  if (v552)
  {
    v8 = (uint64_t *)((char *)v4 + 24);
    v9 = *((unsigned int *)v4 + 9);
    if ((_DWORD)v9 == *((_DWORD *)v4 + 8))
    {
      v491 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v8, v9 + 1, (unint64_t)&v518);
      v9 = *((unsigned int *)v4 + 9);
      v492 = *((_QWORD *)v4 + 3);
      v493 = *v491;
      if (*v491)
        *v493 += 2;
      *(_QWORD *)(v492 + 8 * v9) = v493;
    }
    else
    {
      v10 = *v8;
      v11 = v518;
      if (v518)
        *(_DWORD *)v518 += 2;
      *(_QWORD *)(v10 + 8 * v9) = v11;
    }
    *((_DWORD *)v4 + 9) = v9 + 1;
  }
  v12 = v513;
  v513 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v12;
  }
  v13 = v518;
  v518 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v7);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v516;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v518 = (WTF::StringImpl *)v551[0];
  v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) + 8) + 32);
  v16 = (WTF::JSONImpl::Value *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 64))(v15);
  WTF::JSONImpl::Value::create(v16);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v14 + 2, &v518, (const WTF::StringImpl *)&v513, (uint64_t)v551);
  if (v552)
  {
    v18 = (uint64_t *)((char *)v14 + 24);
    v19 = *((unsigned int *)v14 + 9);
    if ((_DWORD)v19 == *((_DWORD *)v14 + 8))
    {
      v494 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v18, v19 + 1, (unint64_t)&v518);
      v19 = *((unsigned int *)v14 + 9);
      v495 = *((_QWORD *)v14 + 3);
      v496 = *v494;
      if (*v494)
        *v496 += 2;
      *(_QWORD *)(v495 + 8 * v19) = v496;
    }
    else
    {
      v20 = *v18;
      v21 = v518;
      if (v518)
        *(_DWORD *)v518 += 2;
      *(_QWORD *)(v20 + 8 * v19) = v21;
    }
    *((_DWORD *)v14 + 9) = v19 + 1;
  }
  v22 = v513;
  v513 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v22;
  }
  v23 = v518;
  v518 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v17);
    else
      *(_DWORD *)v23 -= 2;
  }
  v24 = WTF::fastMalloc((WTF *)0x20);
  WTF::JSONImpl::ArrayBase::ArrayBase((WTF::JSONImpl::ArrayBase *)v24);
  v510 = WTF::fastMalloc((WTF *)0x20);
  WTF::JSONImpl::ArrayBase::ArrayBase((WTF::JSONImpl::ArrayBase *)v510);
  v25 = *(WebCore::CanvasRenderingContext2DBase **)(*(_QWORD *)(a2 + 16) + 8);
  v26 = (*(uint64_t (**)(WebCore::CanvasRenderingContext2DBase *))(*(_QWORD *)v25 + 16))(v25);
  v512 = v25;
  if (!v26)
    v25 = 0;
  if (v25)
    (*(void (**)(_QWORD *))(**((_QWORD **)v25 + 4) + 16))(*((_QWORD **)v25 + 4));
  if (v26)
  {
    v27 = WebCore::CanvasRenderingContext2DBase::realizeSaves(v512);
    v28 = *((_DWORD *)v512 + 33);
    if (v28)
    {
      v29 = 0;
      v511 = 560 * v28;
      v30 = *((_QWORD *)v512 + 15);
      do
      {
        WTF::JSONImpl::Object::create(v27);
        v31 = v518;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v32 = (WTF::StringImpl *)v551[0];
        if (v551[0])
          *(_DWORD *)v551[0] += 2;
        v551[0] = v32;
        v553 = 12;
        v33 = (WTF::String *)WebCore::InspectorCanvas::indexForData(a2, (unint64_t)v551);
        WTF::String::number(v33);
        if (v553 != -1)
          ((void (*)(WTF::StringImpl **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v553])(&v517, v551);
        v34 = WTF::fastMalloc((WTF *)0x20);
        v35 = (WTF::JSONImpl::Value *)WTF::JSONImpl::ArrayBase::ArrayBase((WTF::JSONImpl::ArrayBase *)v34);
        v36 = (char **)((char *)v35 + 16);
        WTF::JSONImpl::Value::create(v35, *(double *)(v30 + v29 + 112));
        v37 = *(unsigned int *)(v34 + 28);
        if ((_DWORD)v37 == *(_DWORD *)(v34 + 24))
        {
          v38 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v36, v37 + 1, (unint64_t)v551);
          v37 = *(unsigned int *)(v34 + 28);
          v39 = *(char **)(v34 + 16);
          v40 = *(_QWORD *)v38;
          *(_QWORD *)v38 = 0;
        }
        else
        {
          v39 = *v36;
          v40 = v551[0];
          v551[0] = 0;
        }
        *(_QWORD *)&v39[8 * v37] = v40;
        *(_DWORD *)(v34 + 28) = v37 + 1;
        v41 = (WTF::JSONImpl::Value *)v551[0];
        v551[0] = 0;
        if (v41)
        {
          if (*(_DWORD *)v41 == 1)
            v41 = (WTF::JSONImpl::Value *)WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)v41;
        }
        WTF::JSONImpl::Value::create(v41, *(double *)(v30 + v29 + 120));
        v42 = *(unsigned int *)(v34 + 28);
        if ((_DWORD)v42 == *(_DWORD *)(v34 + 24))
        {
          v43 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v36, v42 + 1, (unint64_t)v551);
          v42 = *(unsigned int *)(v34 + 28);
          v44 = *(char **)(v34 + 16);
          v45 = *(_QWORD *)v43;
          *(_QWORD *)v43 = 0;
        }
        else
        {
          v44 = *v36;
          v45 = v551[0];
          v551[0] = 0;
        }
        *(_QWORD *)&v44[8 * v42] = v45;
        *(_DWORD *)(v34 + 28) = v42 + 1;
        v46 = (WTF::JSONImpl::Value *)v551[0];
        v551[0] = 0;
        if (v46)
        {
          if (*(_DWORD *)v46 == 1)
            v46 = (WTF::JSONImpl::Value *)WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)v46;
        }
        WTF::JSONImpl::Value::create(v46, *(double *)(v30 + v29 + 128));
        v47 = *(unsigned int *)(v34 + 28);
        if ((_DWORD)v47 == *(_DWORD *)(v34 + 24))
        {
          v48 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v36, v47 + 1, (unint64_t)v551);
          v47 = *(unsigned int *)(v34 + 28);
          v49 = *(char **)(v34 + 16);
          v50 = *(_QWORD *)v48;
          *(_QWORD *)v48 = 0;
        }
        else
        {
          v49 = *v36;
          v50 = v551[0];
          v551[0] = 0;
        }
        *(_QWORD *)&v49[8 * v47] = v50;
        *(_DWORD *)(v34 + 28) = v47 + 1;
        v51 = (WTF::JSONImpl::Value *)v551[0];
        v551[0] = 0;
        if (v51)
        {
          if (*(_DWORD *)v51 == 1)
            v51 = (WTF::JSONImpl::Value *)WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)v51;
        }
        WTF::JSONImpl::Value::create(v51, *(double *)(v30 + v29 + 136));
        v52 = *(unsigned int *)(v34 + 28);
        if ((_DWORD)v52 == *(_DWORD *)(v34 + 24))
        {
          v53 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v36, v52 + 1, (unint64_t)v551);
          v52 = *(unsigned int *)(v34 + 28);
          v54 = *(char **)(v34 + 16);
          v55 = *(_QWORD *)v53;
          *(_QWORD *)v53 = 0;
        }
        else
        {
          v54 = *v36;
          v55 = v551[0];
          v551[0] = 0;
        }
        *(_QWORD *)&v54[8 * v52] = v55;
        *(_DWORD *)(v34 + 28) = v52 + 1;
        v56 = (WTF::JSONImpl::Value *)v551[0];
        v551[0] = 0;
        if (v56)
        {
          if (*(_DWORD *)v56 == 1)
            v56 = (WTF::JSONImpl::Value *)WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)v56;
        }
        WTF::JSONImpl::Value::create(v56, *(double *)(v30 + v29 + 144));
        v57 = *(unsigned int *)(v34 + 28);
        if ((_DWORD)v57 == *(_DWORD *)(v34 + 24))
        {
          v58 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v36, v57 + 1, (unint64_t)v551);
          v57 = *(unsigned int *)(v34 + 28);
          v59 = *(char **)(v34 + 16);
          v60 = *(_QWORD *)v58;
          *(_QWORD *)v58 = 0;
        }
        else
        {
          v59 = *v36;
          v60 = v551[0];
          v551[0] = 0;
        }
        *(_QWORD *)&v59[8 * v57] = v60;
        *(_DWORD *)(v34 + 28) = v57 + 1;
        v61 = (WTF::JSONImpl::Value *)v551[0];
        v551[0] = 0;
        if (v61)
        {
          if (*(_DWORD *)v61 == 1)
            v61 = (WTF::JSONImpl::Value *)WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)v61;
        }
        WTF::JSONImpl::Value::create(v61, *(double *)(v30 + v29 + 152));
        v62 = *(unsigned int *)(v34 + 28);
        if ((_DWORD)v62 == *(_DWORD *)(v34 + 24))
        {
          v63 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v36, v62 + 1, (unint64_t)v551);
          v62 = *(unsigned int *)(v34 + 28);
          v64 = *(char **)(v34 + 16);
          v65 = *(_QWORD *)v63;
          *(_QWORD *)v63 = 0;
        }
        else
        {
          v64 = *v36;
          v65 = v551[0];
          v551[0] = 0;
        }
        *(_QWORD *)&v64[8 * v62] = v65;
        *(_DWORD *)(v34 + 28) = v62 + 1;
        v66 = (_DWORD *)v551[0];
        v551[0] = 0;
        if (v66)
        {
          if (*v66 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v66;
        }
        v517 = (WTF::StringImpl *)v34;
        WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v31 + 2, &v513, (const WTF::StringImpl *)&v517, (uint64_t)v551);
        if (v552)
        {
          v68 = (uint64_t *)((char *)v31 + 24);
          v69 = *((unsigned int *)v31 + 9);
          if ((_DWORD)v69 == *((_DWORD *)v31 + 8))
          {
            v369 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v68, v69 + 1, (unint64_t)&v513);
            v69 = *((unsigned int *)v31 + 9);
            v370 = *((_QWORD *)v31 + 3);
            v371 = *v369;
            if (*v369)
              *v371 += 2;
            *(_QWORD *)(v370 + 8 * v69) = v371;
          }
          else
          {
            v70 = *v68;
            v71 = v513;
            if (v513)
              *(_DWORD *)v513 += 2;
            *(_QWORD *)(v70 + 8 * v69) = v71;
          }
          *((_DWORD *)v31 + 9) = v69 + 1;
        }
        v72 = v517;
        v517 = 0;
        if (v72)
        {
          if (*(_DWORD *)v72 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)v72;
        }
        v73 = v513;
        v513 = 0;
        if (v73)
        {
          if (*(_DWORD *)v73 == 2)
          {
            WTF::StringImpl::destroy(v73, v67);
            if (!v32)
              goto LABEL_87;
            goto LABEL_85;
          }
          *(_DWORD *)v73 -= 2;
        }
        if (!v32)
          goto LABEL_87;
LABEL_85:
        if (*(_DWORD *)v32 == 2)
          WTF::StringImpl::destroy(v32, v67);
        else
          *(_DWORD *)v32 -= 2;
LABEL_87:
        v74 = v518;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v75 = (WTF::StringImpl *)v551[0];
        if (v551[0])
          *(_DWORD *)v551[0] += 2;
        v551[0] = v75;
        v553 = 12;
        v76 = (WTF::String *)WebCore::InspectorCanvas::indexForData(a2, (unint64_t)v551);
        v77 = (WTF::JSONImpl::Value *)WTF::String::number(v76);
        if (v553 != -1)
          v77 = (WTF::JSONImpl::Value *)((uint64_t (*)(WTF::StringImpl **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v553])(&v513, v551);
        WTF::JSONImpl::Value::create(v77, *(double *)(v30 + v29 + 96));
        WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v74 + 2, &v517, (const WTF::StringImpl *)&v513, (uint64_t)v551);
        if (v552)
        {
          v79 = (uint64_t *)((char *)v74 + 24);
          v80 = *((unsigned int *)v74 + 9);
          if ((_DWORD)v80 == *((_DWORD *)v74 + 8))
          {
            v372 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v79, v80 + 1, (unint64_t)&v517);
            v80 = *((unsigned int *)v74 + 9);
            v373 = *((_QWORD *)v74 + 3);
            v374 = *v372;
            if (*v372)
              *v374 += 2;
            *(_QWORD *)(v373 + 8 * v80) = v374;
          }
          else
          {
            v81 = *v79;
            v82 = v517;
            if (v517)
              *(_DWORD *)v517 += 2;
            *(_QWORD *)(v81 + 8 * v80) = v82;
          }
          *((_DWORD *)v74 + 9) = v80 + 1;
        }
        v83 = v513;
        v513 = 0;
        if (v83)
        {
          if (*(_DWORD *)v83 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)v83;
        }
        v84 = v517;
        v517 = 0;
        if (v84)
        {
          if (*(_DWORD *)v84 == 2)
          {
            WTF::StringImpl::destroy(v84, v78);
            if (!v75)
              goto LABEL_106;
            goto LABEL_104;
          }
          *(_DWORD *)v84 -= 2;
        }
        if (!v75)
          goto LABEL_106;
LABEL_104:
        if (*(_DWORD *)v75 == 2)
          WTF::StringImpl::destroy(v75, v78);
        else
          *(_DWORD *)v75 -= 2;
LABEL_106:
        v85 = v518;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v86 = (WTF::StringImpl *)v551[0];
        if (v551[0])
          *(_DWORD *)v551[0] += 2;
        v551[0] = v86;
        v553 = 12;
        v87 = (WTF::String *)WebCore::InspectorCanvas::indexForData(a2, (unint64_t)v551);
        WTF::String::number(v87);
        if (v553 != -1)
          ((void (*)(WTF::StringImpl **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v553])(&v513, v551);
        v88 = *(unsigned __int8 *)(v30 + v29 + 105);
        if (v88 < 2)
          v89 = &(&WebCore::compositeOperatorNames)[2 * *(unsigned __int8 *)(v30 + v29 + 104)];
        else
          v89 = &(&WebCore::blendOperatorNames)[2 * (v88 - 1)];
        v90 = v89[1];
        if (v90)
        {
          if (v90 == (char *)1)
          {
            v445 = MEMORY[0x1E0CBEF70];
            *MEMORY[0x1E0CBEF70] += 2;
            v91 = v445;
          }
          else
          {
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v91 = v551[0];
          }
        }
        else
        {
          v91 = 0;
        }
        v549[0] = v91;
        v550 = 12;
        v92 = (WTF::JSONImpl::Value *)WebCore::InspectorCanvas::indexForData(a2, (unint64_t)v549);
        WTF::JSONImpl::Value::create(v92);
        WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v85 + 2, &v517, (const WTF::StringImpl *)&v513, (uint64_t)v551);
        if (v552)
        {
          v94 = (uint64_t *)((char *)v85 + 24);
          v95 = *((unsigned int *)v85 + 9);
          if ((_DWORD)v95 == *((_DWORD *)v85 + 8))
          {
            v375 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v94, v95 + 1, (unint64_t)&v517);
            v95 = *((unsigned int *)v85 + 9);
            v376 = *((_QWORD *)v85 + 3);
            v377 = *v375;
            if (*v375)
              *v377 += 2;
            *(_QWORD *)(v376 + 8 * v95) = v377;
          }
          else
          {
            v96 = *v94;
            v97 = v517;
            if (v517)
              *(_DWORD *)v517 += 2;
            *(_QWORD *)(v96 + 8 * v95) = v97;
          }
          *((_DWORD *)v85 + 9) = v95 + 1;
        }
        v98 = v513;
        v513 = 0;
        if (v98)
        {
          if (*(_DWORD *)v98 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)v98;
        }
        if (v550 != -1)
          ((void (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v550])(v551, v549);
        v550 = -1;
        v99 = v517;
        v517 = 0;
        if (v99)
        {
          if (*(_DWORD *)v99 == 2)
          {
            WTF::StringImpl::destroy(v99, v93);
            if (!v86)
              goto LABEL_133;
            goto LABEL_131;
          }
          *(_DWORD *)v99 -= 2;
        }
        if (!v86)
          goto LABEL_133;
LABEL_131:
        if (*(_DWORD *)v86 == 2)
          WTF::StringImpl::destroy(v86, v93);
        else
          *(_DWORD *)v86 -= 2;
LABEL_133:
        v100 = v518;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v101 = (WTF::StringImpl *)v551[0];
        if (v551[0])
          *(_DWORD *)v551[0] += 2;
        v551[0] = v101;
        v553 = 12;
        v102 = (WTF::String *)WebCore::InspectorCanvas::indexForData(a2, (unint64_t)v551);
        v103 = (WTF::JSONImpl::Value *)WTF::String::number(v102);
        if (v553 != -1)
          v103 = (WTF::JSONImpl::Value *)((uint64_t (*)(WTF::StringImpl **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v553])(&v513, v551);
        WTF::JSONImpl::Value::create(v103, *(double *)(v30 + v29 + 48));
        WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v100 + 2, &v517, (const WTF::StringImpl *)&v513, (uint64_t)v551);
        if (v552)
        {
          v105 = (uint64_t *)((char *)v100 + 24);
          v106 = *((unsigned int *)v100 + 9);
          if ((_DWORD)v106 == *((_DWORD *)v100 + 8))
          {
            v378 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v105, v106 + 1, (unint64_t)&v517);
            v106 = *((unsigned int *)v100 + 9);
            v379 = *((_QWORD *)v100 + 3);
            v380 = *v378;
            if (*v378)
              *v380 += 2;
            *(_QWORD *)(v379 + 8 * v106) = v380;
          }
          else
          {
            v107 = *v105;
            v108 = v517;
            if (v517)
              *(_DWORD *)v517 += 2;
            *(_QWORD *)(v107 + 8 * v106) = v108;
          }
          *((_DWORD *)v100 + 9) = v106 + 1;
        }
        v109 = v513;
        v513 = 0;
        if (v109)
        {
          if (*(_DWORD *)v109 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)v109;
        }
        v110 = v517;
        v517 = 0;
        if (v110)
        {
          if (*(_DWORD *)v110 == 2)
          {
            WTF::StringImpl::destroy(v110, v104);
            if (!v101)
              goto LABEL_152;
            goto LABEL_150;
          }
          *(_DWORD *)v110 -= 2;
        }
        if (!v101)
          goto LABEL_152;
LABEL_150:
        if (*(_DWORD *)v101 == 2)
          WTF::StringImpl::destroy(v101, v104);
        else
          *(_DWORD *)v101 -= 2;
LABEL_152:
        v111 = v518;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v112 = (WTF::StringImpl *)v551[0];
        if (v551[0])
          *(_DWORD *)v551[0] += 2;
        v551[0] = v112;
        v553 = 12;
        v113 = (WTF::String *)WebCore::InspectorCanvas::indexForData(a2, (unint64_t)v551);
        WTF::String::number(v113);
        if (v553 != -1)
          ((void (*)(WTF::StringImpl **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v553])(&v513, v551);
        v114 = *(unsigned __int8 *)(v30 + v29 + 56);
        v115 = v114 == 1;
        {
          WebCore::convertEnumerationToString(WebCore::CanvasLineCap)::$_0::operator() const(void)::impl += 2;
          WebCore::convertEnumerationToString(WebCore::CanvasLineCap)::$_1::operator() const(void)::impl += 2;
          WebCore::convertEnumerationToString(WebCore::CanvasLineCap)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::CanvasLineCap)::$_0::operator() const(void)::impl;
          *(_QWORD *)algn_1EE2F43D8 = &WebCore::convertEnumerationToString(WebCore::CanvasLineCap)::$_1::operator() const(void)::impl;
          WebCore::convertEnumerationToString(WebCore::CanvasLineCap)::$_2::operator() const(void)::impl += 2;
          qword_1EE2F43E0 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::CanvasLineCap)::$_2::operator() const(void)::impl;
        }
        v116 = v114 == 2;
        v117 = 2;
        if (!v116)
          v117 = v115;
        v118 = (_DWORD *)WebCore::convertEnumerationToString(WebCore::CanvasLineCap)::values[v117];
        if (v118)
          *v118 += 2;
        v547[0] = v118;
        v548 = 12;
        v119 = (WTF::JSONImpl::Value *)WebCore::InspectorCanvas::indexForData(a2, (unint64_t)v547);
        WTF::JSONImpl::Value::create(v119);
        WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v111 + 2, &v517, (const WTF::StringImpl *)&v513, (uint64_t)v551);
        if (v552)
        {
          v121 = (uint64_t *)((char *)v111 + 24);
          v122 = *((unsigned int *)v111 + 9);
          if ((_DWORD)v122 == *((_DWORD *)v111 + 8))
          {
            v381 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v121, v122 + 1, (unint64_t)&v517);
            v122 = *((unsigned int *)v111 + 9);
            v382 = *((_QWORD *)v111 + 3);
            v383 = *v381;
            if (*v381)
              *v383 += 2;
            *(_QWORD *)(v382 + 8 * v122) = v383;
          }
          else
          {
            v123 = *v121;
            v124 = v517;
            if (v517)
              *(_DWORD *)v517 += 2;
            *(_QWORD *)(v123 + 8 * v122) = v124;
          }
          *((_DWORD *)v111 + 9) = v122 + 1;
        }
        v125 = v513;
        v513 = 0;
        if (v125)
        {
          if (*(_DWORD *)v125 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)v125;
        }
        if (v548 != -1)
          ((void (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v548])(v551, v547);
        v548 = -1;
        v126 = v517;
        v517 = 0;
        if (v126)
        {
          if (*(_DWORD *)v126 == 2)
          {
            WTF::StringImpl::destroy(v126, v120);
            if (!v112)
              goto LABEL_179;
            goto LABEL_177;
          }
          *(_DWORD *)v126 -= 2;
        }
        if (!v112)
          goto LABEL_179;
LABEL_177:
        if (*(_DWORD *)v112 == 2)
          WTF::StringImpl::destroy(v112, v120);
        else
          *(_DWORD *)v112 -= 2;
LABEL_179:
        v127 = v518;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v128 = (WTF::StringImpl *)v551[0];
        if (v551[0])
          *(_DWORD *)v551[0] += 2;
        v551[0] = v128;
        v553 = 12;
        v129 = (WTF::String *)WebCore::InspectorCanvas::indexForData(a2, (unint64_t)v551);
        WTF::String::number(v129);
        if (v553 != -1)
          ((void (*)(WTF::StringImpl **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v553])(&v513, v551);
        v130 = *(unsigned __int8 *)(v30 + v29 + 57);
        v131 = v130 == 2;
        {
          WebCore::convertEnumerationToString(WebCore::CanvasLineJoin)::$_0::operator() const(void)::impl += 2;
          WebCore::convertEnumerationToString(WebCore::CanvasLineJoin)::$_1::operator() const(void)::impl += 2;
          WebCore::convertEnumerationToString(WebCore::CanvasLineJoin)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::CanvasLineJoin)::$_0::operator() const(void)::impl;
          *(_QWORD *)algn_1EE2F43F8 = &WebCore::convertEnumerationToString(WebCore::CanvasLineJoin)::$_1::operator() const(void)::impl;
          WebCore::convertEnumerationToString(WebCore::CanvasLineJoin)::$_2::operator() const(void)::impl += 2;
          qword_1EE2F4400 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::CanvasLineJoin)::$_2::operator() const(void)::impl;
        }
        if (!v130)
          v131 = 2;
        v132 = (_DWORD *)WebCore::convertEnumerationToString(WebCore::CanvasLineJoin)::values[v131];
        if (v132)
          *v132 += 2;
        v545[0] = v132;
        v546 = 12;
        v133 = (WTF::JSONImpl::Value *)WebCore::InspectorCanvas::indexForData(a2, (unint64_t)v545);
        WTF::JSONImpl::Value::create(v133);
        WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v127 + 2, &v517, (const WTF::StringImpl *)&v513, (uint64_t)v551);
        if (v552)
        {
          v135 = (uint64_t *)((char *)v127 + 24);
          v136 = *((unsigned int *)v127 + 9);
          if ((_DWORD)v136 == *((_DWORD *)v127 + 8))
          {
            v384 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v135, v136 + 1, (unint64_t)&v517);
            v136 = *((unsigned int *)v127 + 9);
            v385 = *((_QWORD *)v127 + 3);
            v386 = *v384;
            if (*v384)
              *v386 += 2;
            *(_QWORD *)(v385 + 8 * v136) = v386;
          }
          else
          {
            v137 = *v135;
            v138 = v517;
            if (v517)
              *(_DWORD *)v517 += 2;
            *(_QWORD *)(v137 + 8 * v136) = v138;
          }
          *((_DWORD *)v127 + 9) = v136 + 1;
        }
        v139 = v513;
        v513 = 0;
        if (v139)
        {
          if (*(_DWORD *)v139 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)v139;
        }
        if (v546 != -1)
          ((void (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v546])(v551, v545);
        v546 = -1;
        v140 = v517;
        v517 = 0;
        if (v140)
        {
          if (*(_DWORD *)v140 == 2)
          {
            WTF::StringImpl::destroy(v140, v134);
            if (!v128)
              goto LABEL_206;
            goto LABEL_204;
          }
          *(_DWORD *)v140 -= 2;
        }
        if (!v128)
          goto LABEL_206;
LABEL_204:
        if (*(_DWORD *)v128 == 2)
          WTF::StringImpl::destroy(v128, v134);
        else
          *(_DWORD *)v128 -= 2;
LABEL_206:
        v141 = v518;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v142 = (WTF::StringImpl *)v551[0];
        if (v551[0])
          *(_DWORD *)v551[0] += 2;
        v551[0] = v142;
        v553 = 12;
        v143 = (WTF::String *)WebCore::InspectorCanvas::indexForData(a2, (unint64_t)v551);
        v144 = (WTF::JSONImpl::Value *)WTF::String::number(v143);
        if (v553 != -1)
          v144 = (WTF::JSONImpl::Value *)((uint64_t (*)(WTF::StringImpl **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v553])(&v513, v551);
        WTF::JSONImpl::Value::create(v144, *(double *)(v30 + v29 + 64));
        WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v141 + 2, &v517, (const WTF::StringImpl *)&v513, (uint64_t)v551);
        if (v552)
        {
          v146 = (uint64_t *)((char *)v141 + 24);
          v147 = *((unsigned int *)v141 + 9);
          if ((_DWORD)v147 == *((_DWORD *)v141 + 8))
          {
            v387 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v146, v147 + 1, (unint64_t)&v517);
            v147 = *((unsigned int *)v141 + 9);
            v388 = *((_QWORD *)v141 + 3);
            v389 = *v387;
            if (*v387)
              *v389 += 2;
            *(_QWORD *)(v388 + 8 * v147) = v389;
          }
          else
          {
            v148 = *v146;
            v149 = v517;
            if (v517)
              *(_DWORD *)v517 += 2;
            *(_QWORD *)(v148 + 8 * v147) = v149;
          }
          *((_DWORD *)v141 + 9) = v147 + 1;
        }
        v150 = v513;
        v513 = 0;
        if (v150)
        {
          if (*(_DWORD *)v150 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)v150;
        }
        v151 = v517;
        v517 = 0;
        if (v151)
        {
          if (*(_DWORD *)v151 == 2)
          {
            WTF::StringImpl::destroy(v151, v145);
            if (!v142)
              goto LABEL_225;
            goto LABEL_223;
          }
          *(_DWORD *)v151 -= 2;
        }
        if (!v142)
          goto LABEL_225;
LABEL_223:
        if (*(_DWORD *)v142 == 2)
          WTF::StringImpl::destroy(v142, v145);
        else
          *(_DWORD *)v142 -= 2;
LABEL_225:
        v152 = v518;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v153 = (WTF::StringImpl *)v551[0];
        if (v551[0])
          *(_DWORD *)v551[0] += 2;
        v551[0] = v153;
        v553 = 12;
        v154 = (WTF::String *)WebCore::InspectorCanvas::indexForData(a2, (unint64_t)v551);
        v155 = (WTF::JSONImpl::Value *)WTF::String::number(v154);
        if (v553 != -1)
          v155 = (WTF::JSONImpl::Value *)((uint64_t (*)(WTF::StringImpl **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v553])(&v513, v551);
        WTF::JSONImpl::Value::create(v155, *(float *)(v30 + v29 + 72));
        WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v152 + 2, &v517, (const WTF::StringImpl *)&v513, (uint64_t)v551);
        if (v552)
        {
          v157 = (uint64_t *)((char *)v152 + 24);
          v158 = *((unsigned int *)v152 + 9);
          if ((_DWORD)v158 == *((_DWORD *)v152 + 8))
          {
            v390 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v157, v158 + 1, (unint64_t)&v517);
            v158 = *((unsigned int *)v152 + 9);
            v391 = *((_QWORD *)v152 + 3);
            v392 = *v390;
            if (*v390)
              *v392 += 2;
            *(_QWORD *)(v391 + 8 * v158) = v392;
          }
          else
          {
            v159 = *v157;
            v160 = v517;
            if (v517)
              *(_DWORD *)v517 += 2;
            *(_QWORD *)(v159 + 8 * v158) = v160;
          }
          *((_DWORD *)v152 + 9) = v158 + 1;
        }
        v161 = v513;
        v513 = 0;
        if (v161)
        {
          if (*(_DWORD *)v161 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)v161;
        }
        v162 = v517;
        v517 = 0;
        if (v162)
        {
          if (*(_DWORD *)v162 == 2)
          {
            WTF::StringImpl::destroy(v162, v156);
            if (!v153)
              goto LABEL_244;
            goto LABEL_242;
          }
          *(_DWORD *)v162 -= 2;
        }
        if (!v153)
          goto LABEL_244;
LABEL_242:
        if (*(_DWORD *)v153 == 2)
          WTF::StringImpl::destroy(v153, v156);
        else
          *(_DWORD *)v153 -= 2;
LABEL_244:
        v163 = v518;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v164 = (WTF::StringImpl *)v551[0];
        if (v551[0])
          *(_DWORD *)v551[0] += 2;
        v551[0] = v164;
        v553 = 12;
        v165 = (WTF::String *)WebCore::InspectorCanvas::indexForData(a2, (unint64_t)v551);
        v166 = (WTF::JSONImpl::Value *)WTF::String::number(v165);
        if (v553 != -1)
          v166 = (WTF::JSONImpl::Value *)((uint64_t (*)(WTF::StringImpl **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v553])(&v513, v551);
        WTF::JSONImpl::Value::create(v166, *(float *)(v30 + v29 + 76));
        WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v163 + 2, &v517, (const WTF::StringImpl *)&v513, (uint64_t)v551);
        if (v552)
        {
          v168 = (uint64_t *)((char *)v163 + 24);
          v169 = *((unsigned int *)v163 + 9);
          if ((_DWORD)v169 == *((_DWORD *)v163 + 8))
          {
            v393 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v168, v169 + 1, (unint64_t)&v517);
            v169 = *((unsigned int *)v163 + 9);
            v394 = *((_QWORD *)v163 + 3);
            v395 = *v393;
            if (*v393)
              *v395 += 2;
            *(_QWORD *)(v394 + 8 * v169) = v395;
          }
          else
          {
            v170 = *v168;
            v171 = v517;
            if (v517)
              *(_DWORD *)v517 += 2;
            *(_QWORD *)(v170 + 8 * v169) = v171;
          }
          *((_DWORD *)v163 + 9) = v169 + 1;
        }
        v172 = v513;
        v513 = 0;
        if (v172)
        {
          if (*(_DWORD *)v172 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)v172;
        }
        v173 = v517;
        v517 = 0;
        if (v173)
        {
          if (*(_DWORD *)v173 == 2)
          {
            WTF::StringImpl::destroy(v173, v167);
            if (!v164)
              goto LABEL_263;
            goto LABEL_261;
          }
          *(_DWORD *)v173 -= 2;
        }
        if (!v164)
          goto LABEL_263;
LABEL_261:
        if (*(_DWORD *)v164 == 2)
          WTF::StringImpl::destroy(v164, v167);
        else
          *(_DWORD *)v164 -= 2;
LABEL_263:
        v174 = v518;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v175 = (WTF::StringImpl *)v551[0];
        if (v551[0])
          *(_DWORD *)v551[0] += 2;
        v551[0] = v175;
        v553 = 12;
        v176 = (WTF::String *)WebCore::InspectorCanvas::indexForData(a2, (unint64_t)v551);
        v177 = (WTF::JSONImpl::Value *)WTF::String::number(v176);
        if (v553 != -1)
          v177 = (WTF::JSONImpl::Value *)((uint64_t (*)(WTF::StringImpl **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v553])(&v513, v551);
        WTF::JSONImpl::Value::create(v177, *(float *)(v30 + v29 + 80));
        WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v174 + 2, &v517, (const WTF::StringImpl *)&v513, (uint64_t)v551);
        if (v552)
        {
          v179 = (uint64_t *)((char *)v174 + 24);
          v180 = *((unsigned int *)v174 + 9);
          if ((_DWORD)v180 == *((_DWORD *)v174 + 8))
          {
            v396 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v179, v180 + 1, (unint64_t)&v517);
            v180 = *((unsigned int *)v174 + 9);
            v397 = *((_QWORD *)v174 + 3);
            v398 = *v396;
            if (*v396)
              *v398 += 2;
            *(_QWORD *)(v397 + 8 * v180) = v398;
          }
          else
          {
            v181 = *v179;
            v182 = v517;
            if (v517)
              *(_DWORD *)v517 += 2;
            *(_QWORD *)(v181 + 8 * v180) = v182;
          }
          *((_DWORD *)v174 + 9) = v180 + 1;
        }
        v183 = v513;
        v513 = 0;
        if (v183)
        {
          if (*(_DWORD *)v183 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)v183;
        }
        v184 = v517;
        v517 = 0;
        if (v184)
        {
          if (*(_DWORD *)v184 == 2)
          {
            WTF::StringImpl::destroy(v184, v178);
            if (!v175)
              goto LABEL_282;
            goto LABEL_280;
          }
          *(_DWORD *)v184 -= 2;
        }
        if (!v175)
          goto LABEL_282;
LABEL_280:
        if (*(_DWORD *)v175 == 2)
          WTF::StringImpl::destroy(v175, v178);
        else
          *(_DWORD *)v175 -= 2;
LABEL_282:
        v185 = v518;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v186 = (WTF::StringImpl *)v551[0];
        if (v551[0])
          *(_DWORD *)v551[0] += 2;
        v551[0] = v186;
        v553 = 12;
        v187 = (WTF::String *)WebCore::InspectorCanvas::indexForData(a2, (unint64_t)v551);
        WTF::String::number(v187);
        if (v553 != -1)
          ((void (*)(WTF::StringImpl **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v553])(&v513, v551);
        WebCore::serializationForHTML((WebCore *)(v30 + v29 + 88), &v515);
        v188 = v515;
        v515 = 0;
        v543[0] = v188;
        v544 = 12;
        v189 = (WTF::JSONImpl::Value *)WebCore::InspectorCanvas::indexForData(a2, (unint64_t)v543);
        WTF::JSONImpl::Value::create(v189);
        WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v185 + 2, &v517, (const WTF::StringImpl *)&v513, (uint64_t)v551);
        if (v552)
        {
          v191 = (uint64_t *)((char *)v185 + 24);
          v192 = *((unsigned int *)v185 + 9);
          if ((_DWORD)v192 == *((_DWORD *)v185 + 8))
          {
            v399 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v191, v192 + 1, (unint64_t)&v517);
            v192 = *((unsigned int *)v185 + 9);
            v400 = *((_QWORD *)v185 + 3);
            v401 = *v399;
            if (*v399)
              *v401 += 2;
            *(_QWORD *)(v400 + 8 * v192) = v401;
          }
          else
          {
            v193 = *v191;
            v194 = v517;
            if (v517)
              *(_DWORD *)v517 += 2;
            *(_QWORD *)(v193 + 8 * v192) = v194;
          }
          *((_DWORD *)v185 + 9) = v192 + 1;
        }
        v195 = v513;
        v513 = 0;
        if (v195)
        {
          if (*(_DWORD *)v195 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)v195;
        }
        if (v544 != -1)
          ((void (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v544])(v551, v543);
        v544 = -1;
        v196 = v515;
        v515 = 0;
        if (v196)
        {
          if (*(_DWORD *)v196 == 2)
            WTF::StringImpl::destroy(v196, v190);
          else
            *(_DWORD *)v196 -= 2;
        }
        v197 = v517;
        v517 = 0;
        if (!v197)
          goto LABEL_303;
        if (*(_DWORD *)v197 != 2)
        {
          *(_DWORD *)v197 -= 2;
LABEL_303:
          if (v186)
            goto LABEL_304;
          goto LABEL_306;
        }
        WTF::StringImpl::destroy(v197, v190);
        if (v186)
        {
LABEL_304:
          if (*(_DWORD *)v186 == 2)
            WTF::StringImpl::destroy(v186, v190);
          else
            *(_DWORD *)v186 -= 2;
        }
LABEL_306:
        v198 = WTF::fastMalloc((WTF *)0x20);
        WTF::JSONImpl::ArrayBase::ArrayBase((WTF::JSONImpl::ArrayBase *)v198);
        WebCore::buildArrayForVector<double>(&v513, v30 + v29 + 168);
        v199 = v513;
        v513 = 0;
        v551[0] = v199;
        v200 = (char **)(v198 + 16);
        v201 = *(unsigned int *)(v198 + 28);
        if ((_DWORD)v201 == *(_DWORD *)(v198 + 24))
        {
          v202 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v200, v201 + 1, (unint64_t)v551);
          v201 = *(unsigned int *)(v198 + 28);
          v203 = (WTF::StringImpl **)(*(_QWORD *)(v198 + 16) + 8 * v201);
          v199 = *(WTF::StringImpl **)v202;
        }
        else
        {
          v203 = (WTF::StringImpl **)&(*v200)[8 * v201];
          v202 = (char *)v551;
        }
        *(_QWORD *)v202 = 0;
        *v203 = v199;
        *(_DWORD *)(v198 + 28) = v201 + 1;
        v204 = (_DWORD *)v551[0];
        v551[0] = 0;
        if (v204)
        {
          if (*v204 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v204;
        }
        v205 = v518;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v206 = (WTF::StringImpl *)v551[0];
        if (v551[0])
          *(_DWORD *)v551[0] += 2;
        v551[0] = v206;
        v553 = 12;
        v207 = (WTF::String *)WebCore::InspectorCanvas::indexForData(a2, (unint64_t)v551);
        WTF::String::number(v207);
        if (v553 != -1)
          ((void (*)(WTF::StringImpl **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v553])(&v517, v551);
        v517 = (WTF::StringImpl *)v198;
        WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v205 + 2, &v513, (const WTF::StringImpl *)&v517, (uint64_t)v551);
        if (v552)
        {
          v209 = (uint64_t *)((char *)v205 + 24);
          v210 = *((unsigned int *)v205 + 9);
          if ((_DWORD)v210 == *((_DWORD *)v205 + 8))
          {
            v402 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v209, v210 + 1, (unint64_t)&v513);
            v210 = *((unsigned int *)v205 + 9);
            v403 = *((_QWORD *)v205 + 3);
            v404 = *v402;
            if (*v402)
              *v404 += 2;
            *(_QWORD *)(v403 + 8 * v210) = v404;
          }
          else
          {
            v211 = *v209;
            v212 = v513;
            if (v513)
              *(_DWORD *)v513 += 2;
            *(_QWORD *)(v211 + 8 * v210) = v212;
          }
          *((_DWORD *)v205 + 9) = v210 + 1;
        }
        v213 = v517;
        v517 = 0;
        if (v213)
        {
          if (*(_DWORD *)v213 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)v213;
        }
        v214 = v513;
        v513 = 0;
        if (v214)
        {
          if (*(_DWORD *)v214 == 2)
          {
            WTF::StringImpl::destroy(v214, v208);
            if (!v206)
              goto LABEL_331;
            goto LABEL_329;
          }
          *(_DWORD *)v214 -= 2;
        }
        if (!v206)
          goto LABEL_331;
LABEL_329:
        if (*(_DWORD *)v206 == 2)
          WTF::StringImpl::destroy(v206, v208);
        else
          *(_DWORD *)v206 -= 2;
LABEL_331:
        v215 = v518;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v216 = (WTF::StringImpl *)v551[0];
        if (v551[0])
          *(_DWORD *)v551[0] += 2;
        v551[0] = v216;
        v553 = 12;
        v217 = (WTF::String *)WebCore::InspectorCanvas::indexForData(a2, (unint64_t)v551);
        v218 = (WTF::JSONImpl::Value *)WTF::String::number(v217);
        if (v553 != -1)
          v218 = (WTF::JSONImpl::Value *)((uint64_t (*)(WTF::StringImpl **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v553])(&v513, v551);
        WTF::JSONImpl::Value::create(v218, *(double *)(v30 + v29 + 184));
        WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v215 + 2, &v517, (const WTF::StringImpl *)&v513, (uint64_t)v551);
        if (v552)
        {
          v220 = (uint64_t *)((char *)v215 + 24);
          v221 = *((unsigned int *)v215 + 9);
          if ((_DWORD)v221 == *((_DWORD *)v215 + 8))
          {
            v405 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v220, v221 + 1, (unint64_t)&v517);
            v221 = *((unsigned int *)v215 + 9);
            v406 = *((_QWORD *)v215 + 3);
            v407 = *v405;
            if (*v405)
              *v407 += 2;
            *(_QWORD *)(v406 + 8 * v221) = v407;
          }
          else
          {
            v222 = *v220;
            v223 = v517;
            if (v517)
              *(_DWORD *)v517 += 2;
            *(_QWORD *)(v222 + 8 * v221) = v223;
          }
          *((_DWORD *)v215 + 9) = v221 + 1;
        }
        v224 = v513;
        v513 = 0;
        if (v224)
        {
          if (*(_DWORD *)v224 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)v224;
        }
        v225 = v517;
        v517 = 0;
        if (v225)
        {
          if (*(_DWORD *)v225 == 2)
          {
            WTF::StringImpl::destroy(v225, v219);
            if (!v216)
              goto LABEL_350;
            goto LABEL_348;
          }
          *(_DWORD *)v225 -= 2;
        }
        if (!v216)
          goto LABEL_350;
LABEL_348:
        if (*(_DWORD *)v216 == 2)
          WTF::StringImpl::destroy(v216, v219);
        else
          *(_DWORD *)v216 -= 2;
LABEL_350:
        v226 = v518;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v227 = (WTF::StringImpl *)v551[0];
        if (v551[0])
          *(_DWORD *)v551[0] += 2;
        v551[0] = v227;
        v553 = 12;
        v228 = (WTF::String *)WebCore::InspectorCanvas::indexForData(a2, (unint64_t)v551);
        WTF::String::number(v228);
        if (v553 != -1)
          ((void (*)(WTF::StringImpl **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v553])(&v513, v551);
        WebCore::CanvasRenderingContext2DBase::State::fontString((WebCore::CanvasRenderingContext2DBase::FontProxy **)(v30 + v29), v229, &v515);
        v230 = v515;
        v515 = 0;
        v541[0] = v230;
        v542 = 12;
        v231 = (WTF::JSONImpl::Value *)WebCore::InspectorCanvas::indexForData(a2, (unint64_t)v541);
        WTF::JSONImpl::Value::create(v231);
        WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v226 + 2, &v517, (const WTF::StringImpl *)&v513, (uint64_t)v551);
        if (v552)
        {
          v233 = (uint64_t *)((char *)v226 + 24);
          v234 = *((unsigned int *)v226 + 9);
          if ((_DWORD)v234 == *((_DWORD *)v226 + 8))
          {
            v408 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v233, v234 + 1, (unint64_t)&v517);
            v234 = *((unsigned int *)v226 + 9);
            v409 = *((_QWORD *)v226 + 3);
            v410 = *v408;
            if (*v408)
              *v410 += 2;
            *(_QWORD *)(v409 + 8 * v234) = v410;
          }
          else
          {
            v235 = *v233;
            v236 = v517;
            if (v517)
              *(_DWORD *)v517 += 2;
            *(_QWORD *)(v235 + 8 * v234) = v236;
          }
          *((_DWORD *)v226 + 9) = v234 + 1;
        }
        v237 = v513;
        v513 = 0;
        if (v237)
        {
          if (*(_DWORD *)v237 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)v237;
        }
        if (v542 != -1)
          ((void (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v542])(v551, v541);
        v542 = -1;
        v238 = v515;
        v515 = 0;
        if (v238)
        {
          if (*(_DWORD *)v238 == 2)
            WTF::StringImpl::destroy(v238, v232);
          else
            *(_DWORD *)v238 -= 2;
        }
        v239 = v517;
        v517 = 0;
        if (v239)
        {
          if (*(_DWORD *)v239 == 2)
          {
            WTF::StringImpl::destroy(v239, v232);
            if (!v227)
              goto LABEL_374;
            goto LABEL_372;
          }
          *(_DWORD *)v239 -= 2;
        }
        if (!v227)
          goto LABEL_374;
LABEL_372:
        if (*(_DWORD *)v227 == 2)
          WTF::StringImpl::destroy(v227, v232);
        else
          *(_DWORD *)v227 -= 2;
LABEL_374:
        v240 = v518;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v241 = (WTF::StringImpl *)v551[0];
        if (v551[0])
          *(_DWORD *)v551[0] += 2;
        v551[0] = v241;
        v553 = 12;
        v242 = (WTF::String *)WebCore::InspectorCanvas::indexForData(a2, (unint64_t)v551);
        WTF::String::number(v242);
        if (v553 != -1)
          ((void (*)(WTF::StringImpl **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v553])(&v513, v551);
        v243 = *(_DWORD *)(v30 + v29 + 200) - 1;
        if (v243 > 3)
          v244 = 0;
        else
          v244 = qword_1969F2100[v243];
        {
          WebCore::convertEnumerationToString(WebCore::CanvasTextAlign)::$_0::operator() const(void)::impl += 2;
          WebCore::convertEnumerationToString(WebCore::CanvasTextAlign)::$_1::operator() const(void)::impl += 2;
          WebCore::convertEnumerationToString(WebCore::CanvasTextAlign)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::CanvasTextAlign)::$_0::operator() const(void)::impl;
          *(_QWORD *)algn_1EE2F4418 = &WebCore::convertEnumerationToString(WebCore::CanvasTextAlign)::$_1::operator() const(void)::impl;
          WebCore::convertEnumerationToString(WebCore::CanvasTextAlign)::$_2::operator() const(void)::impl += 2;
          WebCore::convertEnumerationToString(WebCore::CanvasTextAlign)::$_3::operator() const(void)::impl += 2;
          qword_1EE2F4420 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::CanvasTextAlign)::$_2::operator() const(void)::impl;
          unk_1EE2F4428 = &WebCore::convertEnumerationToString(WebCore::CanvasTextAlign)::$_3::operator() const(void)::impl;
          WebCore::convertEnumerationToString(WebCore::CanvasTextAlign)::$_4::operator() const(void)::impl += 2;
          qword_1EE2F4430 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::CanvasTextAlign)::$_4::operator() const(void)::impl;
        }
        v245 = (_DWORD *)WebCore::convertEnumerationToString(WebCore::CanvasTextAlign)::values[v244];
        if (v245)
          *v245 += 2;
        v539[0] = v245;
        v540 = 12;
        v246 = (WTF::JSONImpl::Value *)WebCore::InspectorCanvas::indexForData(a2, (unint64_t)v539);
        WTF::JSONImpl::Value::create(v246);
        WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v240 + 2, &v517, (const WTF::StringImpl *)&v513, (uint64_t)v551);
        if (v552)
        {
          v248 = (uint64_t *)((char *)v240 + 24);
          v249 = *((unsigned int *)v240 + 9);
          if ((_DWORD)v249 == *((_DWORD *)v240 + 8))
          {
            v411 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v248, v249 + 1, (unint64_t)&v517);
            v249 = *((unsigned int *)v240 + 9);
            v412 = *((_QWORD *)v240 + 3);
            v413 = *v411;
            if (*v411)
              *v413 += 2;
            *(_QWORD *)(v412 + 8 * v249) = v413;
          }
          else
          {
            v250 = *v248;
            v251 = v517;
            if (v517)
              *(_DWORD *)v517 += 2;
            *(_QWORD *)(v250 + 8 * v249) = v251;
          }
          *((_DWORD *)v240 + 9) = v249 + 1;
        }
        v252 = v513;
        v513 = 0;
        if (v252)
        {
          if (*(_DWORD *)v252 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)v252;
        }
        if (v540 != -1)
          ((void (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v540])(v551, v539);
        v540 = -1;
        v253 = v517;
        v517 = 0;
        if (v253)
        {
          if (*(_DWORD *)v253 == 2)
          {
            WTF::StringImpl::destroy(v253, v247);
            if (!v241)
              goto LABEL_402;
            goto LABEL_400;
          }
          *(_DWORD *)v253 -= 2;
        }
        if (!v241)
          goto LABEL_402;
LABEL_400:
        if (*(_DWORD *)v241 == 2)
          WTF::StringImpl::destroy(v241, v247);
        else
          *(_DWORD *)v241 -= 2;
LABEL_402:
        v254 = v518;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v255 = (WTF::StringImpl *)v551[0];
        if (v551[0])
          *(_DWORD *)v551[0] += 2;
        v551[0] = v255;
        v553 = 12;
        v256 = (WTF::String *)WebCore::InspectorCanvas::indexForData(a2, (unint64_t)v551);
        WTF::String::number(v256);
        if (v553 != -1)
          ((void (*)(WTF::StringImpl **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v553])(&v513, v551);
        v257 = *(int *)(v30 + v29 + 204);
        if (v257 > 5)
          v258 = 0;
        else
          v258 = qword_1969F2120[v257];
        {
          WebCore::convertEnumerationToString(WebCore::CanvasTextBaseline)::$_0::operator() const(void)::impl += 2;
          WebCore::convertEnumerationToString(WebCore::CanvasTextBaseline)::$_1::operator() const(void)::impl += 2;
          WebCore::convertEnumerationToString(WebCore::CanvasTextBaseline)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::CanvasTextBaseline)::$_0::operator() const(void)::impl;
          *(_QWORD *)algn_1EE2F4448 = &WebCore::convertEnumerationToString(WebCore::CanvasTextBaseline)::$_1::operator() const(void)::impl;
          WebCore::convertEnumerationToString(WebCore::CanvasTextBaseline)::$_2::operator() const(void)::impl += 2;
          WebCore::convertEnumerationToString(WebCore::CanvasTextBaseline)::$_3::operator() const(void)::impl += 2;
          qword_1EE2F4450 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::CanvasTextBaseline)::$_2::operator() const(void)::impl;
          unk_1EE2F4458 = &WebCore::convertEnumerationToString(WebCore::CanvasTextBaseline)::$_3::operator() const(void)::impl;
          WebCore::convertEnumerationToString(WebCore::CanvasTextBaseline)::$_4::operator() const(void)::impl += 2;
          WebCore::convertEnumerationToString(WebCore::CanvasTextBaseline)::$_5::operator() const(void)::impl += 2;
          qword_1EE2F4460 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::CanvasTextBaseline)::$_4::operator() const(void)::impl;
          unk_1EE2F4468 = &WebCore::convertEnumerationToString(WebCore::CanvasTextBaseline)::$_5::operator() const(void)::impl;
        }
        v259 = (_DWORD *)WebCore::convertEnumerationToString(WebCore::CanvasTextBaseline)::values[v258];
        if (v259)
          *v259 += 2;
        v537[0] = v259;
        v538 = 12;
        v260 = (WTF::JSONImpl::Value *)WebCore::InspectorCanvas::indexForData(a2, (unint64_t)v537);
        WTF::JSONImpl::Value::create(v260);
        WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v254 + 2, &v517, (const WTF::StringImpl *)&v513, (uint64_t)v551);
        if (v552)
        {
          v262 = (uint64_t *)((char *)v254 + 24);
          v263 = *((unsigned int *)v254 + 9);
          if ((_DWORD)v263 == *((_DWORD *)v254 + 8))
          {
            v414 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v262, v263 + 1, (unint64_t)&v517);
            v263 = *((unsigned int *)v254 + 9);
            v415 = *((_QWORD *)v254 + 3);
            v416 = *v414;
            if (*v414)
              *v416 += 2;
            *(_QWORD *)(v415 + 8 * v263) = v416;
          }
          else
          {
            v264 = *v262;
            v265 = v517;
            if (v517)
              *(_DWORD *)v517 += 2;
            *(_QWORD *)(v264 + 8 * v263) = v265;
          }
          *((_DWORD *)v254 + 9) = v263 + 1;
        }
        v266 = v513;
        v513 = 0;
        if (v266)
        {
          if (*(_DWORD *)v266 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)v266;
        }
        if (v538 != -1)
          ((void (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v538])(v551, v537);
        v538 = -1;
        v267 = v517;
        v517 = 0;
        if (v267)
        {
          if (*(_DWORD *)v267 == 2)
          {
            WTF::StringImpl::destroy(v267, v261);
            if (!v255)
              goto LABEL_430;
            goto LABEL_428;
          }
          *(_DWORD *)v267 -= 2;
        }
        if (!v255)
          goto LABEL_430;
LABEL_428:
        if (*(_DWORD *)v255 == 2)
          WTF::StringImpl::destroy(v255, v261);
        else
          *(_DWORD *)v255 -= 2;
LABEL_430:
        v268 = v518;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v269 = (WTF::StringImpl *)v551[0];
        if (v551[0])
          *(_DWORD *)v551[0] += 2;
        v551[0] = v269;
        v553 = 12;
        v270 = (WTF::String *)WebCore::InspectorCanvas::indexForData(a2, (unint64_t)v551);
        WTF::String::number(v270);
        if (v553 != -1)
          ((void (*)(WTF::StringImpl **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v553])(&v513, v551);
        v271 = *(int *)(v30 + v29 + 208);
        {
          WebCore::convertEnumerationToString(WebCore::CanvasDirection)::$_0::operator() const(void)::impl += 2;
          WebCore::convertEnumerationToString(WebCore::CanvasDirection)::$_1::operator() const(void)::impl += 2;
          WebCore::convertEnumerationToString(WebCore::CanvasDirection)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::CanvasDirection)::$_0::operator() const(void)::impl;
          unk_1EE2F43A0 = &WebCore::convertEnumerationToString(WebCore::CanvasDirection)::$_1::operator() const(void)::impl;
          WebCore::convertEnumerationToString(WebCore::CanvasDirection)::$_2::operator() const(void)::impl += 2;
          qword_1EE2F43A8 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::CanvasDirection)::$_2::operator() const(void)::impl;
        }
        v272 = (_DWORD *)WebCore::convertEnumerationToString(WebCore::CanvasDirection)::values[v271];
        if (v272)
          *v272 += 2;
        v535[0] = v272;
        v536 = 12;
        v273 = (WTF::JSONImpl::Value *)WebCore::InspectorCanvas::indexForData(a2, (unint64_t)v535);
        WTF::JSONImpl::Value::create(v273);
        WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v268 + 2, &v517, (const WTF::StringImpl *)&v513, (uint64_t)v551);
        if (v552)
        {
          v275 = (uint64_t *)((char *)v268 + 24);
          v276 = *((unsigned int *)v268 + 9);
          if ((_DWORD)v276 == *((_DWORD *)v268 + 8))
          {
            v417 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v275, v276 + 1, (unint64_t)&v517);
            v276 = *((unsigned int *)v268 + 9);
            v418 = *((_QWORD *)v268 + 3);
            v419 = *v417;
            if (*v417)
              *v419 += 2;
            *(_QWORD *)(v418 + 8 * v276) = v419;
          }
          else
          {
            v277 = *v275;
            v278 = v517;
            if (v517)
              *(_DWORD *)v517 += 2;
            *(_QWORD *)(v277 + 8 * v276) = v278;
          }
          *((_DWORD *)v268 + 9) = v276 + 1;
        }
        v279 = v513;
        v513 = 0;
        if (v279)
        {
          if (*(_DWORD *)v279 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)v279;
        }
        if (v536 != -1)
          ((void (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v536])(v551, v535);
        v536 = -1;
        v280 = v517;
        v517 = 0;
        if (v280)
        {
          if (*(_DWORD *)v280 == 2)
          {
            WTF::StringImpl::destroy(v280, v274);
            if (!v269)
              goto LABEL_455;
            goto LABEL_453;
          }
          *(_DWORD *)v280 -= 2;
        }
        if (!v269)
          goto LABEL_455;
LABEL_453:
        if (*(_DWORD *)v269 == 2)
          WTF::StringImpl::destroy(v269, v274);
        else
          *(_DWORD *)v269 -= 2;
LABEL_455:
        v281 = (WebCore *)(v30 + v29 + 16);
        v282 = *(_DWORD *)(v30 + v29 + 24);
        if (v282 == 1)
        {
          v435 = *(WebCore::CanvasGradient **)v281;
          *(_DWORD *)v435 = **(_DWORD **)v281 + 2;
          v533[0] = v435;
          v534 = 0;
          v285 = (WTF::JSONImpl::Value *)WebCore::InspectorCanvas::indexForData(a2, (unint64_t)v533);
          if (v534 != -1)
            ((void (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v534])(v551, v533);
          v534 = -1;
          v437 = *(_DWORD *)v435 - 1;
          if (*(_DWORD *)v435 != 1)
          {
LABEL_781:
            *(_DWORD *)v435 = v437;
            goto LABEL_465;
          }
          WebCore::CanvasGradient::~CanvasGradient(v435, v436);
          WTF::fastFree(v441, v442);
        }
        else if (v282 == 2)
        {
          v435 = *(WebCore::CanvasGradient **)v281;
          *(_DWORD *)v435 = **(_DWORD **)v281 + 2;
          v531[0] = v435;
          v532 = 1;
          v285 = (WTF::JSONImpl::Value *)WebCore::InspectorCanvas::indexForData(a2, (unint64_t)v531);
          if (v532 != -1)
            ((void (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v532])(v551, v531);
          v532 = -1;
          v437 = *(_DWORD *)v435 - 1;
          if (*(_DWORD *)v435 != 1)
            goto LABEL_781;
          v447 = *((_QWORD *)v435 + 1);
          *((_QWORD *)v435 + 1) = 0;
          if (v447)
          {
            if (*(_DWORD *)v447 == 1)
            {
              if (*(_BYTE *)(v447 + 40))
              {
                v450 = *(unsigned int *)(v447 + 32);
                if ((_DWORD)v450 != -1)
                  ((void (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ImageBufferENSA_ISF_EENSC_ISF_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSQ_EEEDcOSR_DpOT0____fmatrix[v450])(v551, v447 + 24);
                *(_DWORD *)(v447 + 32) = -1;
              }
              v451 = *(unsigned int *)(v447 + 16);
              if ((_DWORD)v451 != -1)
                ((void (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ImageBufferENSA_ISF_EENSC_ISF_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSQ_EEEDcOSR_DpOT0____fmatrix[v451])(v551, v447 + 8);
              *(_DWORD *)(v447 + 16) = -1;
              WTF::fastFree((WTF *)v447, v446);
            }
            else
            {
              --*(_DWORD *)v447;
            }
          }
          WTF::fastFree(v435, v446);
        }
        else
        {
          if (v282)
          {
            v283 = 0;
          }
          else
          {
            WebCore::serializationForHTML(v281, v551);
            v283 = v551[0];
          }
          v551[0] = 0;
          v529[0] = v283;
          v530 = 12;
          v285 = (WTF::JSONImpl::Value *)WebCore::InspectorCanvas::indexForData(a2, (unint64_t)v529);
          if (v530 != -1)
            ((void (*)(WTF::StringImpl **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v530])(&v513, v529);
          v530 = -1;
          v286 = (WTF::StringImpl *)v551[0];
          v551[0] = 0;
          if (v286)
          {
            if (*(_DWORD *)v286 == 2)
              WTF::StringImpl::destroy(v286, v284);
            else
              *(_DWORD *)v286 -= 2;
          }
        }
LABEL_465:
        v287 = v518;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v288 = (WTF::StringImpl *)v551[0];
        if (v551[0])
          *(_DWORD *)v551[0] += 2;
        v551[0] = v288;
        v553 = 12;
        v289 = (WTF::String *)WebCore::InspectorCanvas::indexForData(a2, (unint64_t)v551);
        WTF::String::number(v289);
        if (v553 != -1)
          ((void (*)(WTF::StringImpl **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v553])(&v513, v551);
        WTF::JSONImpl::Value::create(v285);
        WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v287 + 2, &v517, (const WTF::StringImpl *)&v513, (uint64_t)v551);
        if (v552)
        {
          v291 = (uint64_t *)((char *)v287 + 24);
          v292 = *((unsigned int *)v287 + 9);
          if ((_DWORD)v292 == *((_DWORD *)v287 + 8))
          {
            v420 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v291, v292 + 1, (unint64_t)&v517);
            v292 = *((unsigned int *)v287 + 9);
            v421 = *((_QWORD *)v287 + 3);
            v422 = *v420;
            if (*v420)
              *v422 += 2;
            *(_QWORD *)(v421 + 8 * v292) = v422;
          }
          else
          {
            v293 = *v291;
            v294 = v517;
            if (v517)
              *(_DWORD *)v517 += 2;
            *(_QWORD *)(v293 + 8 * v292) = v294;
          }
          *((_DWORD *)v287 + 9) = v292 + 1;
        }
        v295 = v513;
        v513 = 0;
        if (v295)
        {
          if (*(_DWORD *)v295 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)v295;
        }
        v296 = v517;
        v517 = 0;
        if (v296)
        {
          if (*(_DWORD *)v296 == 2)
          {
            WTF::StringImpl::destroy(v296, v290);
            if (!v288)
              goto LABEL_484;
            goto LABEL_482;
          }
          *(_DWORD *)v296 -= 2;
        }
        if (!v288)
          goto LABEL_484;
LABEL_482:
        if (*(_DWORD *)v288 == 2)
          WTF::StringImpl::destroy(v288, v290);
        else
          *(_DWORD *)v288 -= 2;
LABEL_484:
        v297 = (WebCore *)(v30 + v29 + 32);
        v298 = *(_DWORD *)(v30 + v29 + 40);
        if (v298 == 1)
        {
          v438 = *(WebCore::CanvasGradient **)v297;
          *(_DWORD *)v438 = **(_DWORD **)v297 + 2;
          v527[0] = v438;
          v528 = 0;
          v301 = (WTF::JSONImpl::Value *)WebCore::InspectorCanvas::indexForData(a2, (unint64_t)v527);
          if (v528 != -1)
            ((void (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v528])(v551, v527);
          v528 = -1;
          v440 = *(_DWORD *)v438 - 1;
          if (*(_DWORD *)v438 != 1)
          {
LABEL_785:
            *(_DWORD *)v438 = v440;
            goto LABEL_494;
          }
          WebCore::CanvasGradient::~CanvasGradient(v438, v439);
          WTF::fastFree(v443, v444);
        }
        else if (v298 == 2)
        {
          v438 = *(WebCore::CanvasGradient **)v297;
          *(_DWORD *)v438 = **(_DWORD **)v297 + 2;
          v525[0] = v438;
          v526 = 1;
          v301 = (WTF::JSONImpl::Value *)WebCore::InspectorCanvas::indexForData(a2, (unint64_t)v525);
          if (v526 != -1)
            ((void (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v526])(v551, v525);
          v526 = -1;
          v440 = *(_DWORD *)v438 - 1;
          if (*(_DWORD *)v438 != 1)
            goto LABEL_785;
          v449 = *((_QWORD *)v438 + 1);
          *((_QWORD *)v438 + 1) = 0;
          if (v449)
          {
            if (*(_DWORD *)v449 == 1)
            {
              if (*(_BYTE *)(v449 + 40))
              {
                v452 = *(unsigned int *)(v449 + 32);
                if ((_DWORD)v452 != -1)
                  ((void (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ImageBufferENSA_ISF_EENSC_ISF_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSQ_EEEDcOSR_DpOT0____fmatrix[v452])(v551, v449 + 24);
                *(_DWORD *)(v449 + 32) = -1;
              }
              v453 = *(unsigned int *)(v449 + 16);
              if ((_DWORD)v453 != -1)
                ((void (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ImageBufferENSA_ISF_EENSC_ISF_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSQ_EEEDcOSR_DpOT0____fmatrix[v453])(v551, v449 + 8);
              *(_DWORD *)(v449 + 16) = -1;
              WTF::fastFree((WTF *)v449, v448);
            }
            else
            {
              --*(_DWORD *)v449;
            }
          }
          WTF::fastFree(v438, v448);
        }
        else
        {
          if (v298)
          {
            v299 = 0;
          }
          else
          {
            WebCore::serializationForHTML(v297, v551);
            v299 = v551[0];
          }
          v551[0] = 0;
          v523[0] = v299;
          v524 = 12;
          v301 = (WTF::JSONImpl::Value *)WebCore::InspectorCanvas::indexForData(a2, (unint64_t)v523);
          if (v524 != -1)
            ((void (*)(WTF::StringImpl **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v524])(&v513, v523);
          v524 = -1;
          v302 = (WTF::StringImpl *)v551[0];
          v551[0] = 0;
          if (v302)
          {
            if (*(_DWORD *)v302 == 2)
              WTF::StringImpl::destroy(v302, v300);
            else
              *(_DWORD *)v302 -= 2;
          }
        }
LABEL_494:
        v303 = v518;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v304 = (WTF::StringImpl *)v551[0];
        if (v551[0])
          *(_DWORD *)v551[0] += 2;
        v551[0] = v304;
        v553 = 12;
        v305 = (WTF::String *)WebCore::InspectorCanvas::indexForData(a2, (unint64_t)v551);
        WTF::String::number(v305);
        if (v553 != -1)
          ((void (*)(WTF::StringImpl **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v553])(&v513, v551);
        WTF::JSONImpl::Value::create(v301);
        WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v303 + 2, &v517, (const WTF::StringImpl *)&v513, (uint64_t)v551);
        if (v552)
        {
          v307 = (uint64_t *)((char *)v303 + 24);
          v308 = *((unsigned int *)v303 + 9);
          if ((_DWORD)v308 == *((_DWORD *)v303 + 8))
          {
            v423 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v307, v308 + 1, (unint64_t)&v517);
            v308 = *((unsigned int *)v303 + 9);
            v424 = *((_QWORD *)v303 + 3);
            v425 = *v423;
            if (*v423)
              *v425 += 2;
            *(_QWORD *)(v424 + 8 * v308) = v425;
          }
          else
          {
            v309 = *v307;
            v310 = v517;
            if (v517)
              *(_DWORD *)v517 += 2;
            *(_QWORD *)(v309 + 8 * v308) = v310;
          }
          *((_DWORD *)v303 + 9) = v308 + 1;
        }
        v311 = v513;
        v513 = 0;
        if (v311)
        {
          if (*(_DWORD *)v311 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)v311;
        }
        v312 = v517;
        v517 = 0;
        if (v312)
        {
          if (*(_DWORD *)v312 == 2)
          {
            WTF::StringImpl::destroy(v312, v306);
            if (!v304)
              goto LABEL_513;
            goto LABEL_511;
          }
          *(_DWORD *)v312 -= 2;
        }
        if (!v304)
          goto LABEL_513;
LABEL_511:
        if (*(_DWORD *)v304 == 2)
          WTF::StringImpl::destroy(v304, v306);
        else
          *(_DWORD *)v304 -= 2;
LABEL_513:
        v313 = v518;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v314 = (WTF::StringImpl *)v551[0];
        if (v551[0])
          *(_DWORD *)v551[0] += 2;
        v551[0] = v314;
        v553 = 12;
        v315 = (WTF::String *)WebCore::InspectorCanvas::indexForData(a2, (unint64_t)v551);
        WTF::String::number(v315);
        if (v553 != -1)
          ((void (*)(WTF::StringImpl **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v553])(&v513, v551);
        WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)*(unsigned __int8 *)(v30 + v29 + 192));
        WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v313 + 2, &v517, (const WTF::StringImpl *)&v513, (uint64_t)v551);
        if (v552)
        {
          v317 = (uint64_t *)((char *)v313 + 24);
          v318 = *((unsigned int *)v313 + 9);
          if ((_DWORD)v318 == *((_DWORD *)v313 + 8))
          {
            v426 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v317, v318 + 1, (unint64_t)&v517);
            v318 = *((unsigned int *)v313 + 9);
            v427 = *((_QWORD *)v313 + 3);
            v428 = *v426;
            if (*v426)
              *v428 += 2;
            *(_QWORD *)(v427 + 8 * v318) = v428;
          }
          else
          {
            v319 = *v317;
            v320 = v517;
            if (v517)
              *(_DWORD *)v517 += 2;
            *(_QWORD *)(v319 + 8 * v318) = v320;
          }
          *((_DWORD *)v313 + 9) = v318 + 1;
        }
        v321 = v513;
        v513 = 0;
        if (v321)
        {
          if (*(_DWORD *)v321 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)v321;
        }
        v322 = v517;
        v517 = 0;
        if (v322)
        {
          if (*(_DWORD *)v322 == 2)
          {
            WTF::StringImpl::destroy(v322, v316);
            if (!v314)
              goto LABEL_532;
            goto LABEL_530;
          }
          *(_DWORD *)v322 -= 2;
        }
        if (!v314)
          goto LABEL_532;
LABEL_530:
        if (*(_DWORD *)v314 == 2)
          WTF::StringImpl::destroy(v314, v316);
        else
          *(_DWORD *)v314 -= 2;
LABEL_532:
        v323 = v518;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v324 = (WTF::StringImpl *)v551[0];
        if (v551[0])
          *(_DWORD *)v551[0] += 2;
        v551[0] = v324;
        v553 = 12;
        v325 = (WTF::String *)WebCore::InspectorCanvas::indexForData(a2, (unint64_t)v551);
        WTF::String::number(v325);
        if (v553 != -1)
          ((void (*)(WTF::StringImpl **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v553])(&v513, v551);
        v326 = *(unsigned int *)(v30 + v29 + 196);
        {
          WebCore::convertEnumerationToString(WebCore::ImageSmoothingQuality)::$_0::operator() const(void)::impl += 2;
          WebCore::convertEnumerationToString(WebCore::ImageSmoothingQuality)::$_1::operator() const(void)::impl += 2;
          WebCore::convertEnumerationToString(WebCore::ImageSmoothingQuality)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::ImageSmoothingQuality)::$_0::operator() const(void)::impl;
          unk_1EE2F4700 = &WebCore::convertEnumerationToString(WebCore::ImageSmoothingQuality)::$_1::operator() const(void)::impl;
          WebCore::convertEnumerationToString(WebCore::ImageSmoothingQuality)::$_2::operator() const(void)::impl += 2;
          qword_1EE2F4708 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::ImageSmoothingQuality)::$_2::operator() const(void)::impl;
        }
        v327 = (_DWORD *)WebCore::convertEnumerationToString(WebCore::ImageSmoothingQuality)::values[v326];
        if (v327)
          *v327 += 2;
        v521[0] = v327;
        v522 = 12;
        v328 = (WTF::JSONImpl::Value *)WebCore::InspectorCanvas::indexForData(a2, (unint64_t)v521);
        WTF::JSONImpl::Value::create(v328);
        WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v323 + 2, &v517, (const WTF::StringImpl *)&v513, (uint64_t)v551);
        if (v552)
        {
          v330 = (uint64_t *)((char *)v323 + 24);
          v331 = *((unsigned int *)v323 + 9);
          if ((_DWORD)v331 == *((_DWORD *)v323 + 8))
          {
            v429 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v330, v331 + 1, (unint64_t)&v517);
            v331 = *((unsigned int *)v323 + 9);
            v430 = *((_QWORD *)v323 + 3);
            v431 = *v429;
            if (*v429)
              *v431 += 2;
            *(_QWORD *)(v430 + 8 * v331) = v431;
          }
          else
          {
            v332 = *v330;
            v333 = v517;
            if (v517)
              *(_DWORD *)v517 += 2;
            *(_QWORD *)(v332 + 8 * v331) = v333;
          }
          *((_DWORD *)v323 + 9) = v331 + 1;
        }
        v334 = v513;
        v513 = 0;
        if (v334)
        {
          if (*(_DWORD *)v334 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)v334;
        }
        if (v522 != -1)
          ((void (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v522])(v551, v521);
        v522 = -1;
        v335 = v517;
        v517 = 0;
        if (!v335)
          goto LABEL_554;
        if (*(_DWORD *)v335 != 2)
        {
          *(_DWORD *)v335 -= 2;
LABEL_554:
          if (v324)
            goto LABEL_555;
          goto LABEL_557;
        }
        WTF::StringImpl::destroy(v335, v329);
        if (v324)
        {
LABEL_555:
          if (*(_DWORD *)v324 == 2)
            WTF::StringImpl::destroy(v324, v329);
          else
            *(_DWORD *)v324 -= 2;
        }
LABEL_557:
        v336 = WTF::fastMalloc((WTF *)0x20);
        WTF::JSONImpl::ArrayBase::ArrayBase((WTF::JSONImpl::ArrayBase *)v336);
        v337 = WTF::fastMalloc((WTF *)0x58);
        v339 = (unsigned int *)v337;
        *(_DWORD *)(v337 + 80) = 1;
        *(_QWORD *)v337 = off_1E32CDB50;
        *(_DWORD *)(v337 + 72) = 0;
        v340 = *((unsigned int *)v512 + 28);
        if ((_DWORD)v340 == -1)
        {
          *(_DWORD *)(v337 + 72) = -1;
        }
        else
        {
          v551[0] = v337 + 16;
          ((void (*)(_QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRSE_SK_EEEDcmSM_DpOT0____fdiagonal_1[v340])(v551);
        }
        *(_QWORD *)v339 = &unk_1E33DDF78;
        WebCore::buildStringFromPath((WebCore *)(v339 + 2), v338, &v513);
        v341 = v513;
        v513 = 0;
        v519[0] = v341;
        v520 = 12;
        v342 = (WTF::JSONImpl::Value *)WebCore::InspectorCanvas::indexForData(a2, (unint64_t)v519);
        WTF::JSONImpl::Value::create(v342);
        v344 = *(unsigned int *)(v336 + 28);
        if ((_DWORD)v344 == *(_DWORD *)(v336 + 24))
        {
          v345 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v336 + 16), v344 + 1, (unint64_t)v551);
          v344 = *(unsigned int *)(v336 + 28);
          v346 = *(_QWORD *)(v336 + 16);
          v347 = *(_QWORD *)v345;
          *(_QWORD *)v345 = 0;
        }
        else
        {
          v346 = *(_QWORD *)(v336 + 16);
          v347 = v551[0];
          v551[0] = 0;
        }
        *(_QWORD *)(v346 + 8 * v344) = v347;
        *(_DWORD *)(v336 + 28) = v344 + 1;
        v348 = (_DWORD *)v551[0];
        v551[0] = 0;
        if (v348)
        {
          if (*v348 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v348;
        }
        if (v520 != -1)
          ((void (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v520])(v551, v519);
        v520 = -1;
        if (v339[20] == 1)
        {
          *(_QWORD *)v339 = off_1E32CDB50;
          v368 = v339[18];
          if ((_DWORD)v368 != -1)
            ((void (*)(_QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_2[v368])(v551, v339 + 4);
          v339[18] = -1;
          WTF::fastFree((WTF *)v339, v343);
        }
        else
        {
          --v339[20];
        }
        v349 = v518;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v350 = (WTF::StringImpl *)v551[0];
        if (v551[0])
          *(_DWORD *)v551[0] += 2;
        v551[0] = v350;
        v553 = 12;
        v351 = (WTF::String *)WebCore::InspectorCanvas::indexForData(a2, (unint64_t)v551);
        WTF::String::number(v351);
        if (v553 != -1)
          ((void (*)(WTF::StringImpl **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v553])(&v517, v551);
        v517 = (WTF::StringImpl *)v336;
        WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v349 + 2, &v513, (const WTF::StringImpl *)&v517, (uint64_t)v551);
        if (v552)
        {
          v353 = (uint64_t *)((char *)v349 + 24);
          v354 = *((unsigned int *)v349 + 9);
          if ((_DWORD)v354 == *((_DWORD *)v349 + 8))
          {
            v432 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v353, v354 + 1, (unint64_t)&v513);
            v354 = *((unsigned int *)v349 + 9);
            v433 = *((_QWORD *)v349 + 3);
            v434 = *v432;
            if (*v432)
              *v434 += 2;
            *(_QWORD *)(v433 + 8 * v354) = v434;
          }
          else
          {
            v355 = *v353;
            v356 = v513;
            if (v513)
              *(_DWORD *)v513 += 2;
            *(_QWORD *)(v355 + 8 * v354) = v356;
          }
          *((_DWORD *)v349 + 9) = v354 + 1;
        }
        v357 = v517;
        v517 = 0;
        if (v357)
        {
          if (*(_DWORD *)v357 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)v357;
        }
        result = v513;
        v513 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
          {
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v352);
            if (!v350)
              goto LABEL_589;
            goto LABEL_587;
          }
          *(_DWORD *)result -= 2;
        }
        if (!v350)
          goto LABEL_589;
LABEL_587:
        if (*(_DWORD *)v350 == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(v350, v352);
        else
          *(_DWORD *)v350 -= 2;
LABEL_589:
        v359 = v518;
        v518 = 0;
        v360 = *(unsigned int *)(v24 + 28);
        if ((_DWORD)v360 == *(_DWORD *)(v24 + 24))
        {
          v361 = v360 + (v360 >> 2);
          if (v361 >= 0x10)
            v362 = v361 + 1;
          else
            v362 = 16;
          if (v362 <= v360 + 1)
            v363 = v360 + 1;
          else
            v363 = v362;
          if (v363 >> 29)
          {
            __break(0xC471u);
            return result;
          }
          v364 = *(void **)(v24 + 16);
          v365 = (void *)WTF::fastMalloc((WTF *)(8 * v363));
          *(_DWORD *)(v24 + 24) = v363;
          *(_QWORD *)(v24 + 16) = v365;
          memcpy(v365, v364, 8 * v360);
          if (v364)
          {
            if (*(void **)(v24 + 16) == v364)
            {
              *(_QWORD *)(v24 + 16) = 0;
              *(_DWORD *)(v24 + 24) = 0;
            }
            WTF::fastFree((WTF *)v364, v366);
          }
          v360 = *(unsigned int *)(v24 + 28);
          v367 = (WTF::StringImpl **)(*(_QWORD *)(v24 + 16) + 8 * v360);
        }
        else
        {
          v367 = (WTF::StringImpl **)(*(_QWORD *)(v24 + 16) + 8 * v360);
        }
        *v367 = v359;
        *(_DWORD *)(v24 + 28) = v360 + 1;
        v27 = v518;
        v518 = 0;
        if (v27)
        {
          if (*(_DWORD *)v27 == 1)
            v27 = (WTF::JSONImpl::Object *)WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)v27;
        }
        v29 += 560;
      }
      while (v511 != v29);
    }
  }
  if (v25)
    (*(void (**)(_QWORD *))(**((_QWORD **)v25 + 4) + 24))(*((_QWORD **)v25 + 4));
  WebCore::buildObjectForCanvasContextAttributes((WebCore *)v551, *(WebCore::CanvasRenderingContext **)(*(_QWORD *)(a2 + 16) + 8));
  v454 = v551[0];
  v455 = (_DWORD *)v510;
  if (v551[0])
  {
    v513 = (WTF::StringImpl *)v551[0];
    v456 = (char **)(v510 + 16);
    v457 = *(unsigned int *)(v510 + 28);
    if ((_DWORD)v457 == *(_DWORD *)(v510 + 24))
    {
      v458 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v456, v457 + 1, (unint64_t)&v513);
      v457 = *(unsigned int *)(v510 + 28);
      v459 = (char *)(*(_QWORD *)(v510 + 16) + 8 * v457);
      v454 = *v458;
    }
    else
    {
      v459 = &(*v456)[8 * v457];
      v458 = (uint64_t *)&v513;
    }
    *v458 = 0;
    *(_QWORD *)v459 = v454;
    *(_DWORD *)(v510 + 28) = v457 + 1;
    v460 = v513;
    v513 = 0;
    if (v460)
    {
      if (*(_DWORD *)v460 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v460;
    }
  }
  v461 = *(_QWORD *)this;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v462 = v516;
  v516 = 0;
  v518 = v462;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v461 + 16), &v513, (const WTF::StringImpl *)&v518, (uint64_t)v551);
  if (v552)
  {
    v464 = (uint64_t *)(v461 + 24);
    v465 = *(unsigned int *)(v461 + 36);
    if ((_DWORD)v465 == *(_DWORD *)(v461 + 32))
    {
      v497 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v464, v465 + 1, (unint64_t)&v513);
      v465 = *(unsigned int *)(v461 + 36);
      v498 = *(_QWORD *)(v461 + 24);
      v499 = *v497;
      if (*v497)
        *v499 += 2;
      *(_QWORD *)(v498 + 8 * v465) = v499;
    }
    else
    {
      v466 = *v464;
      v467 = v513;
      if (v513)
        *(_DWORD *)v513 += 2;
      *(_QWORD *)(v466 + 8 * v465) = v467;
    }
    *(_DWORD *)(v461 + 36) = v465 + 1;
  }
  v468 = v518;
  v518 = 0;
  if (v468)
  {
    if (*(_DWORD *)v468 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v468;
  }
  v469 = v513;
  v513 = 0;
  if (v469)
  {
    if (*(_DWORD *)v469 == 2)
      WTF::StringImpl::destroy(v469, v463);
    else
      *(_DWORD *)v469 -= 2;
  }
  if (*(_DWORD *)(v24 + 28))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v518 = (WTF::StringImpl *)v24;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v461 + 16), &v513, (const WTF::StringImpl *)&v518, (uint64_t)v551);
    if (v552)
    {
      v470 = (uint64_t *)(v461 + 24);
      v471 = *(unsigned int *)(v461 + 36);
      if ((_DWORD)v471 == *(_DWORD *)(v461 + 32))
      {
        v500 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v470, v471 + 1, (unint64_t)&v513);
        v471 = *(unsigned int *)(v461 + 36);
        v501 = *(_QWORD *)(v461 + 24);
        v502 = *v500;
        if (*v500)
          *v502 += 2;
        *(_QWORD *)(v501 + 8 * v471) = v502;
      }
      else
      {
        v472 = *v470;
        v473 = v513;
        if (v513)
          *(_DWORD *)v513 += 2;
        *(_QWORD *)(v472 + 8 * v471) = v473;
      }
      *(_DWORD *)(v461 + 36) = v471 + 1;
    }
    v474 = v518;
    v518 = 0;
    if (v474)
    {
      if (*(_DWORD *)v474 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v474;
    }
    v475 = v513;
    v513 = 0;
    if (v475)
    {
      if (*(_DWORD *)v475 == 2)
        WTF::StringImpl::destroy(v475, v463);
      else
        *(_DWORD *)v475 -= 2;
    }
    v24 = 0;
  }
  if (*(_DWORD *)(v510 + 28))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v518 = (WTF::StringImpl *)v510;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v461 + 16), &v513, (const WTF::StringImpl *)&v518, (uint64_t)v551);
    if (v552)
    {
      v476 = (uint64_t *)(v461 + 24);
      v477 = *(unsigned int *)(v461 + 36);
      if ((_DWORD)v477 == *(_DWORD *)(v461 + 32))
      {
        v503 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v476, v477 + 1, (unint64_t)&v513);
        v477 = *(unsigned int *)(v461 + 36);
        v504 = *(_QWORD *)(v461 + 24);
        v505 = *v503;
        if (*v503)
          *v505 += 2;
        *(_QWORD *)(v504 + 8 * v477) = v505;
      }
      else
      {
        v478 = *v476;
        v479 = v513;
        if (v513)
          *(_DWORD *)v513 += 2;
        *(_QWORD *)(v478 + 8 * v477) = v479;
      }
      *(_DWORD *)(v461 + 36) = v477 + 1;
    }
    v480 = v518;
    v518 = 0;
    if (v480)
    {
      if (*(_DWORD *)v480 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v480;
    }
    v481 = v513;
    v513 = 0;
    if (v481)
    {
      if (*(_DWORD *)v481 == 2)
        WTF::StringImpl::destroy(v481, v463);
      else
        *(_DWORD *)v481 -= 2;
    }
    v455 = 0;
  }
  WebCore::InspectorCanvas::getContentAsDataURL(*(WebCore::InspectorCanvas **)(*(_QWORD *)(a2 + 16) + 8), v463, (uint64_t)&v513);
  v482 = v514;
  if (!v514)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v513, v483);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v461 + 16), &v517, (const WTF::StringImpl *)&v518, (uint64_t)v551);
    if (v552)
    {
      v485 = (uint64_t *)(v461 + 24);
      v486 = *(unsigned int *)(v461 + 36);
      if ((_DWORD)v486 == *(_DWORD *)(v461 + 32))
      {
        v506 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v485, v486 + 1, (unint64_t)&v517);
        v486 = *(unsigned int *)(v461 + 36);
        v507 = *(_QWORD *)(v461 + 24);
        v508 = *v506;
        if (*v506)
          *v508 += 2;
        *(_QWORD *)(v507 + 8 * v486) = v508;
      }
      else
      {
        v487 = *v485;
        v488 = v517;
        if (v517)
          *(_DWORD *)v517 += 2;
        *(_QWORD *)(v487 + 8 * v486) = v488;
      }
      *(_DWORD *)(v461 + 36) = v486 + 1;
    }
    v489 = v518;
    v518 = 0;
    if (v489)
    {
      if (*(_DWORD *)v489 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v489;
    }
    v490 = v517;
    v517 = 0;
    if (v490)
    {
      if (*(_DWORD *)v490 == 2)
        WTF::StringImpl::destroy(v490, v484);
      else
        *(_DWORD *)v490 -= 2;
    }
    v482 = v514;
  }
  if (v482 != -1)
    ((void (*)(_QWORD *, WTF::StringImpl **))off_1E33EE080[v482])(v551, &v513);
  if (v455)
  {
    if (*v455 == 1)
    {
      WTF::JSONImpl::Value::operator delete();
      if (!v24)
        goto LABEL_889;
      goto LABEL_887;
    }
    --*v455;
  }
  if (!v24)
    goto LABEL_889;
LABEL_887:
  if (*(_DWORD *)v24 == 1)
    WTF::JSONImpl::Value::operator delete();
  else
    --*(_DWORD *)v24;
LABEL_889:
  result = v516;
  v516 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF::StringImpl *)WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)result;
  }
  return result;
}

WTF::JSONImpl::Value *WebCore::InspectorCanvas::appendActionSnapshotIfNeeded(WebCore::InspectorCanvas *this)
{
  WTF::JSONImpl::Value *result;
  WebCore::CanvasRenderingContext *v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  WTF::JSONImpl::Value *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  unsigned int v14;
  _DWORD *v15;
  _QWORD v16[5];
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  result = (WTF::JSONImpl::Value *)*((_QWORD *)this + 6);
  if (result)
  {
    if (*((_BYTE *)this + 136))
    {
      *((_QWORD *)this + 13) -= WTF::JSONImpl::Value::memoryCost(result);
      WebCore::InspectorCanvas::getContentAsDataURL(*(WebCore::InspectorCanvas **)(*((_QWORD *)this + 2) + 8), v3, (uint64_t)&v13);
      v4 = v14;
      if (v14 != -1)
      {
        if (!v14)
        {
          v5 = *((_QWORD *)this + 6);
          v6 = v13;
          if (v13)
            *v13 += 2;
          v16[0] = v6;
          v17 = 12;
          v7 = (WTF::JSONImpl::Value *)WebCore::InspectorCanvas::indexForData((uint64_t)this, (unint64_t)v16);
          WTF::JSONImpl::Value::create(v7);
          v8 = *(unsigned int *)(v5 + 28);
          if ((_DWORD)v8 == *(_DWORD *)(v5 + 24))
          {
            v9 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v5 + 16), v8 + 1, (unint64_t)&v15);
            v8 = *(unsigned int *)(v5 + 28);
            v10 = *(_QWORD *)(v5 + 16);
            v11 = *(_DWORD **)v9;
            *(_QWORD *)v9 = 0;
          }
          else
          {
            v10 = *(_QWORD *)(v5 + 16);
            v11 = v15;
            v15 = 0;
          }
          *(_QWORD *)(v10 + 8 * v8) = v11;
          *(_DWORD *)(v5 + 28) = v8 + 1;
          v12 = v15;
          v15 = 0;
          if (v12)
          {
            if (*v12 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v12;
          }
          if (v17 != -1)
            ((void (*)(_DWORD **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v17])(&v15, v16);
          v17 = -1;
        }
        ((void (*)(_DWORD **, _DWORD **))off_1E33EE080[v4])(&v15, &v13);
      }
      *((_QWORD *)this + 13) += WTF::JSONImpl::Value::memoryCost(*((WTF::JSONImpl::Value **)this + 6));
      result = (WTF::JSONImpl::Value *)*((_QWORD *)this + 6);
      *((_QWORD *)this + 6) = 0;
      if (!result)
        goto LABEL_21;
    }
    else
    {
      *((_QWORD *)this + 6) = 0;
    }
    if (*(_DWORD *)result == 1)
      result = (WTF::JSONImpl::Value *)WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)result;
LABEL_21:
    *((_BYTE *)this + 136) = 0;
  }
  return result;
}

WTF::JSONImpl::ArrayBase *WebCore::InspectorCanvas::finalizeFrame(WTF::JSONImpl::ArrayBase **this)
{
  WTF::JSONImpl::ArrayBase *v2;
  WTF::MonotonicTime *v3;
  double v4;
  WTF::JSONImpl::ArrayBase *result;
  Inspector::Protocol::Recording::Frame *v6;

  WebCore::InspectorCanvas::appendActionSnapshotIfNeeded((WebCore::InspectorCanvas *)this);
  v2 = this[4];
  if (v2)
  {
    if (*((_DWORD *)v2 + 7))
    {
      v3 = (WTF::MonotonicTime *)WTF::JSONImpl::ArrayBase::get(v2);
      WTF::MonotonicTime::now(v3);
      Inspector::Protocol::Recording::Frame::setDuration(v6, (v4 - *((double *)this + 11)) * 1000.0);
      this[11] = (WTF::JSONImpl::ArrayBase *)0x7FF8000000000000;
      if (v6)
      {
        if (*(_DWORD *)v6 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v6;
      }
    }
  }
  result = this[5];
  this[5] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF::JSONImpl::ArrayBase *)WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)result;
  }
  return result;
}

WTF::StringImpl *Inspector::Protocol::Recording::Frame::setDuration(Inspector::Protocol::Recording::Frame *this, double a2)
{
  WTF::JSONImpl::Value *v4;
  WTF::StringImpl *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  _DWORD *v10;
  WTF::StringImpl *result;
  _DWORD **v12;
  uint64_t v13;
  _DWORD *v14;
  WTF::StringImpl *v15;
  _DWORD *v16;
  _BYTE v17[24];

  v4 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(v4, a2);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)this + 2, &v15, (const WTF::StringImpl *)&v16, (uint64_t)v17);
  if (v17[16])
  {
    v6 = (uint64_t *)((char *)this + 24);
    v7 = *((unsigned int *)this + 9);
    if ((_DWORD)v7 == *((_DWORD *)this + 8))
    {
      v12 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v6, v7 + 1, (unint64_t)&v15);
      v7 = *((unsigned int *)this + 9);
      v13 = *((_QWORD *)this + 3);
      v14 = *v12;
      if (*v12)
        *v14 += 2;
      *(_QWORD *)(v13 + 8 * v7) = v14;
    }
    else
    {
      v8 = *v6;
      v9 = v15;
      if (v15)
        *(_DWORD *)v15 += 2;
      *(_QWORD *)(v8 + 8 * v7) = v9;
    }
    *((_DWORD *)this + 9) = v7 + 1;
  }
  v10 = v16;
  v16 = 0;
  if (v10)
  {
    if (*v10 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v10;
  }
  result = v15;
  v15 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *Inspector::Protocol::Recording::Frame::setIncomplete(Inspector::Protocol::Recording::Frame *this, WTF::JSONImpl::Value *a2)
{
  WTF::StringImpl *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  _DWORD *v9;
  WTF::StringImpl *result;
  _DWORD **v11;
  uint64_t v12;
  _DWORD *v13;
  WTF::StringImpl *v14;
  _DWORD *v15;
  _BYTE v16[24];

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(a2);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)this + 2, &v14, (const WTF::StringImpl *)&v15, (uint64_t)v16);
  if (v16[16])
  {
    v5 = (uint64_t *)((char *)this + 24);
    v6 = *((unsigned int *)this + 9);
    if ((_DWORD)v6 == *((_DWORD *)this + 8))
    {
      v11 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v5, v6 + 1, (unint64_t)&v14);
      v6 = *((unsigned int *)this + 9);
      v12 = *((_QWORD *)this + 3);
      v13 = *v11;
      if (*v11)
        *v13 += 2;
      *(_QWORD *)(v12 + 8 * v6) = v13;
    }
    else
    {
      v7 = *v5;
      v8 = v14;
      if (v14)
        *(_DWORD *)v14 += 2;
      *(_QWORD *)(v7 + 8 * v6) = v8;
    }
    *((_DWORD *)this + 9) = v6 + 1;
  }
  v9 = v15;
  v15 = 0;
  if (v9)
  {
    if (*v9 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v9;
  }
  result = v14;
  v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

Inspector **WebCore::InspectorCanvas::buildObjectForCanvas@<X0>(WebCore::InspectorCanvas *this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  const WTF::String *v15;
  WTF::StringImpl *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  const WTF::String *v23;
  WTF::StringImpl *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  double v32;
  WTF::JSONImpl::Value *v33;
  WTF::StringImpl *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  double v41;
  WTF::JSONImpl::Value *v42;
  WTF::StringImpl *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl **v52;
  uint64_t v53;
  WTF::StringImpl **v54;
  WTF::StringImpl **v55;
  uint64_t v56;
  WTF::StringImpl **v57;
  WTF::StringImpl *v58;
  const WTF::String *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  Inspector **result;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  unint64_t v74;
  double v75;
  WTF::JSONImpl::Value *v76;
  WTF::StringImpl *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF *v91;
  void *v92;
  _DWORD **v93;
  uint64_t v94;
  _DWORD *v95;
  _DWORD **v96;
  uint64_t v97;
  _DWORD *v98;
  _DWORD **v99;
  uint64_t v100;
  _DWORD *v101;
  _DWORD **v102;
  uint64_t v103;
  _DWORD *v104;
  _DWORD **v105;
  uint64_t v106;
  _DWORD *v107;
  _DWORD **v108;
  uint64_t v109;
  _DWORD *v110;
  _DWORD **v111;
  uint64_t v112;
  _DWORD *v113;
  _DWORD **v114;
  uint64_t v115;
  _DWORD *v116;
  WTF::StringImpl *v117;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119;
  WTF::StringImpl *v120;
  _QWORD v121[2];
  char v122;

  v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 32);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 2) + 8) + 24))(*(_QWORD *)(*((_QWORD *)this + 2) + 8));
  if ((v8 & 1) != 0)
  {
    v9 = 69;
    goto LABEL_18;
  }
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 2) + 8) + 80))(*(_QWORD *)(*((_QWORD *)this + 2) + 8));
  if ((v8 & 1) != 0)
  {
    v9 = 70;
    goto LABEL_18;
  }
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 2) + 8) + 64))(*(_QWORD *)(*((_QWORD *)this + 2) + 8));
  if ((_DWORD)v8)
  {
    v10 = v7 == 0;
    v11 = 71;
    goto LABEL_9;
  }
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 2) + 8) + 32))(*(_QWORD *)(*((_QWORD *)this + 2) + 8));
  if ((_DWORD)v8)
  {
    v10 = v7 == 0;
    v11 = 73;
LABEL_9:
    if (v10)
      v9 = v11;
    else
      v9 = v11 + 1;
    goto LABEL_18;
  }
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 2) + 8) + 40))(*(_QWORD *)(*((_QWORD *)this + 2) + 8));
  if (v7)
    v12 = 76;
  else
    v12 = 75;
  if ((_DWORD)v8)
    v9 = v12;
  else
    v9 = 69;
LABEL_18:
  v13 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 32);
  WTF::JSONImpl::Object::create((WTF::JSONImpl::Object *)v8);
  v14 = v121[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WebCore::InspectorCanvas *)((char *)this + 8), v15);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v121[0] + 16), &v119, (const WTF::StringImpl *)&v120, (uint64_t)v121);
  if (v122)
  {
    v17 = (uint64_t *)(v14 + 24);
    v18 = *(unsigned int *)(v14 + 36);
    if ((_DWORD)v18 == *(_DWORD *)(v14 + 32))
    {
      v93 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v17, v18 + 1, (unint64_t)&v119);
      v18 = *(unsigned int *)(v14 + 36);
      v94 = *(_QWORD *)(v14 + 24);
      v95 = *v93;
      if (*v93)
        *v95 += 2;
      *(_QWORD *)(v94 + 8 * v18) = v95;
    }
    else
    {
      v19 = *v17;
      v20 = v119;
      if (v119)
        *(_DWORD *)v119 += 2;
      *(_QWORD *)(v19 + 8 * v18) = v20;
    }
    *(_DWORD *)(v14 + 36) = v18 + 1;
  }
  v21 = v120;
  v120 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v21;
  }
  v22 = v119;
  v119 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v16);
    else
      *(_DWORD *)v22 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::Protocol::Helpers::getEnumConstantValue((Inspector::Protocol::Helpers *)v9);
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v118, v23);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v14 + 16), &v119, (const WTF::StringImpl *)&v120, (uint64_t)v121);
  if (v122)
  {
    v25 = (uint64_t *)(v14 + 24);
    v26 = *(unsigned int *)(v14 + 36);
    if ((_DWORD)v26 == *(_DWORD *)(v14 + 32))
    {
      v96 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v25, v26 + 1, (unint64_t)&v119);
      v26 = *(unsigned int *)(v14 + 36);
      v97 = *(_QWORD *)(v14 + 24);
      v98 = *v96;
      if (*v96)
        *v98 += 2;
      *(_QWORD *)(v97 + 8 * v26) = v98;
    }
    else
    {
      v27 = *v25;
      v28 = v119;
      if (v119)
        *(_DWORD *)v119 += 2;
      *(_QWORD *)(v27 + 8 * v26) = v28;
    }
    *(_DWORD *)(v14 + 36) = v26 + 1;
  }
  v29 = v120;
  v120 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v29;
  }
  v30 = v118;
  v118 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, v24);
    else
      *(_DWORD *)v30 -= 2;
  }
  v31 = v119;
  v119 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, v24);
    else
      *(_DWORD *)v31 -= 2;
  }
  v32 = (double)*(int *)(v13 + 8);
  v33 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(v33, v32);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v14 + 16), &v119, (const WTF::StringImpl *)&v120, (uint64_t)v121);
  if (v122)
  {
    v35 = (uint64_t *)(v14 + 24);
    v36 = *(unsigned int *)(v14 + 36);
    if ((_DWORD)v36 == *(_DWORD *)(v14 + 32))
    {
      v99 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v35, v36 + 1, (unint64_t)&v119);
      v36 = *(unsigned int *)(v14 + 36);
      v100 = *(_QWORD *)(v14 + 24);
      v101 = *v99;
      if (*v99)
        *v101 += 2;
      *(_QWORD *)(v100 + 8 * v36) = v101;
    }
    else
    {
      v37 = *v35;
      v38 = v119;
      if (v119)
        *(_DWORD *)v119 += 2;
      *(_QWORD *)(v37 + 8 * v36) = v38;
    }
    *(_DWORD *)(v14 + 36) = v36 + 1;
  }
  v39 = v120;
  v120 = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v39;
  }
  v40 = v119;
  v119 = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2)
      WTF::StringImpl::destroy(v40, v34);
    else
      *(_DWORD *)v40 -= 2;
  }
  v41 = (double)*(int *)(v13 + 12);
  v42 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(v42, v41);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v14 + 16), &v119, (const WTF::StringImpl *)&v120, (uint64_t)v121);
  if (v122)
  {
    v44 = (uint64_t *)(v14 + 24);
    v45 = *(unsigned int *)(v14 + 36);
    if ((_DWORD)v45 == *(_DWORD *)(v14 + 32))
    {
      v102 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v44, v45 + 1, (unint64_t)&v119);
      v45 = *(unsigned int *)(v14 + 36);
      v103 = *(_QWORD *)(v14 + 24);
      v104 = *v102;
      if (*v102)
        *v104 += 2;
      *(_QWORD *)(v103 + 8 * v45) = v104;
    }
    else
    {
      v46 = *v44;
      v47 = v119;
      if (v119)
        *(_DWORD *)v119 += 2;
      *(_QWORD *)(v46 + 8 * v45) = v47;
    }
    *(_DWORD *)(v14 + 36) = v45 + 1;
  }
  v48 = v120;
  v120 = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v48;
  }
  v49 = v119;
  v119 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
      WTF::StringImpl::destroy(v49, v43);
    else
      *(_DWORD *)v49 -= 2;
  }
  *a3 = v14;
  v50 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 32);
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v50 + 32))(v50))
    goto LABEL_115;
  v52 = *(WTF::StringImpl ***)(*(_QWORD *)(*(_QWORD *)(v50 - 72) + 8) + 1832);
  if (!v52)
  {
    v55 = 0;
    v53 = 0;
LABEL_79:
    v54 = &v52[2 * v53];
    goto LABEL_80;
  }
  v53 = *((unsigned int *)v52 - 1);
  v54 = &v52[2 * v53];
  if (!*((_DWORD *)v52 - 3))
  {
    v55 = &v52[2 * v53];
    goto LABEL_79;
  }
  v55 = *(WTF::StringImpl ***)(*(_QWORD *)(*(_QWORD *)(v50 - 72) + 8) + 1832);
  if ((_DWORD)v53)
  {
    v56 = 16 * v53;
    v55 = *(WTF::StringImpl ***)(*(_QWORD *)(*(_QWORD *)(v50 - 72) + 8) + 1832);
    while ((unint64_t)*v55 + 1 <= 1)
    {
      v55 += 2;
      v56 -= 16;
      if (!v56)
      {
        v55 = v54;
        break;
      }
    }
  }
LABEL_80:
  if (v52)
    v52 += 2 * *((unsigned int *)v52 - 1);
  if (v52 != v55)
  {
    while (v55[1] != (WTF::StringImpl *)(v50 - 112))
    {
      v57 = v55 + 2;
      v55 = v54;
      if (v57 != v54)
      {
        v55 = v57;
        while ((unint64_t)*v55 + 1 <= 1)
        {
          v55 += 2;
          if (v55 == v54)
          {
            v55 = v54;
            break;
          }
        }
      }
      if (v55 == v52)
        goto LABEL_115;
    }
    v58 = *v55;
    if (*v55)
    {
      *(_DWORD *)v58 += 2;
      v118 = v58;
      if (*((_DWORD *)v58 + 1))
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v118, v59);
        WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v14 + 16), &v119, (const WTF::StringImpl *)&v120, (uint64_t)v121);
        if (v122)
        {
          v60 = (uint64_t *)(v14 + 24);
          v61 = *(unsigned int *)(v14 + 36);
          if ((_DWORD)v61 == *(_DWORD *)(v14 + 32))
          {
            v114 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v60, v61 + 1, (unint64_t)&v119);
            v61 = *(unsigned int *)(v14 + 36);
            v115 = *(_QWORD *)(v14 + 24);
            v116 = *v114;
            if (*v114)
              *v116 += 2;
            *(_QWORD *)(v115 + 8 * v61) = v116;
          }
          else
          {
            v62 = *v60;
            v63 = v119;
            if (v119)
              *(_DWORD *)v119 += 2;
            *(_QWORD *)(v62 + 8 * v61) = v63;
          }
          *(_DWORD *)(v14 + 36) = v61 + 1;
        }
        v64 = v120;
        v120 = 0;
        if (v64)
        {
          if (*(_DWORD *)v64 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)v64;
        }
        v65 = v119;
        v119 = 0;
        if (v65)
        {
          if (*(_DWORD *)v65 == 2)
            WTF::StringImpl::destroy(v65, v51);
          else
            *(_DWORD *)v65 -= 2;
        }
        v58 = v118;
        v118 = 0;
        if (!v58)
          goto LABEL_115;
      }
      else
      {
        v118 = 0;
      }
      if (*(_DWORD *)v58 == 2)
        WTF::StringImpl::destroy(v58, v51);
      else
        *(_DWORD *)v58 -= 2;
    }
  }
LABEL_115:
  result = (Inspector **)WebCore::buildObjectForCanvasContextAttributes((WebCore *)&v118, *(WebCore::CanvasRenderingContext **)(*((_QWORD *)this + 2) + 8));
  v67 = v118;
  if (v118)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v119 = v67;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v14 + 16), &v120, (const WTF::StringImpl *)&v119, (uint64_t)v121);
    if (v122)
    {
      v69 = (uint64_t *)(v14 + 24);
      v70 = *(unsigned int *)(v14 + 36);
      if ((_DWORD)v70 == *(_DWORD *)(v14 + 32))
      {
        v105 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v69, v70 + 1, (unint64_t)&v120);
        v70 = *(unsigned int *)(v14 + 36);
        v106 = *(_QWORD *)(v14 + 24);
        v107 = *v105;
        if (*v105)
          *v107 += 2;
        *(_QWORD *)(v106 + 8 * v70) = v107;
      }
      else
      {
        v71 = *v69;
        v72 = v120;
        if (v120)
          *(_DWORD *)v120 += 2;
        *(_QWORD *)(v71 + 8 * v70) = v72;
      }
      *(_DWORD *)(v14 + 36) = v70 + 1;
    }
    v73 = v119;
    v119 = 0;
    if (v73)
    {
      if (*(_DWORD *)v73 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v73;
    }
    result = (Inspector **)v120;
    v120 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (Inspector **)WTF::StringImpl::destroy((WTF::StringImpl *)result, v68);
      else
        *(_DWORD *)result -= 2;
    }
  }
  v74 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 32) + 24);
  if (v74)
  {
    v75 = (double)v74;
    v76 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::Value::create(v76, v75);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v14 + 16), &v119, (const WTF::StringImpl *)&v120, (uint64_t)v121);
    if (v122)
    {
      v78 = (uint64_t *)(v14 + 24);
      v79 = *(unsigned int *)(v14 + 36);
      if ((_DWORD)v79 == *(_DWORD *)(v14 + 32))
      {
        v108 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v78, v79 + 1, (unint64_t)&v119);
        v79 = *(unsigned int *)(v14 + 36);
        v109 = *(_QWORD *)(v14 + 24);
        v110 = *v108;
        if (*v108)
          *v110 += 2;
        *(_QWORD *)(v109 + 8 * v79) = v110;
      }
      else
      {
        v80 = *v78;
        v81 = v119;
        if (v119)
          *(_DWORD *)v119 += 2;
        *(_QWORD *)(v80 + 8 * v79) = v81;
      }
      *(_DWORD *)(v14 + 36) = v79 + 1;
    }
    v82 = v120;
    v120 = 0;
    if (v82)
    {
      if (*(_DWORD *)v82 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v82;
    }
    result = (Inspector **)v119;
    v119 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        result = (Inspector **)WTF::StringImpl::destroy((WTF::StringImpl *)result, v77);
        if (!a2)
          return result;
        goto LABEL_142;
      }
      *(_DWORD *)result -= 2;
    }
  }
  if (!a2)
    return result;
LABEL_142:
  v83 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v83 || (result = *(Inspector ***)(v83 + 96)) == 0)
    result = (Inspector **)WebCore::threadGlobalDataSlow((WebCore *)result);
  Inspector::createScriptCallStack(result[8], (JSC::JSGlobalObject *)0xC8);
  Inspector::ScriptCallStack::buildInspectorObject(v118);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v119 = v117;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v14 + 16), &v120, (const WTF::StringImpl *)&v119, (uint64_t)v121);
  if (v122)
  {
    v85 = (uint64_t *)(v14 + 24);
    v86 = *(unsigned int *)(v14 + 36);
    if ((_DWORD)v86 == *(_DWORD *)(v14 + 32))
    {
      v111 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v85, v86 + 1, (unint64_t)&v120);
      v86 = *(unsigned int *)(v14 + 36);
      v112 = *(_QWORD *)(v14 + 24);
      v113 = *v111;
      if (*v111)
        *v113 += 2;
      *(_QWORD *)(v112 + 8 * v86) = v113;
    }
    else
    {
      v87 = *v85;
      v88 = v120;
      if (v120)
        *(_DWORD *)v120 += 2;
      *(_QWORD *)(v87 + 8 * v86) = v88;
    }
    *(_DWORD *)(v14 + 36) = v86 + 1;
  }
  v89 = v119;
  v119 = 0;
  if (v89)
  {
    if (*(_DWORD *)v89 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v89;
  }
  v90 = v120;
  v120 = 0;
  if (v90)
  {
    if (*(_DWORD *)v90 == 2)
      WTF::StringImpl::destroy(v90, v84);
    else
      *(_DWORD *)v90 -= 2;
  }
  result = (Inspector **)v118;
  v118 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      v91 = (WTF *)MEMORY[0x19AEA6024]();
      return (Inspector **)WTF::fastFree(v91, v92);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

uint64_t WebCore::buildObjectForCanvasContextAttributes(WebCore *this, WebCore::CanvasRenderingContext *a2)
{
  int v4;
  uint64_t v5;
  WTF::JSONImpl::Object *v6;
  char v7;
  char v8;
  int v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::JSONImpl::Object *v12;
  uint64_t result;
  const WTF::String *v14;
  WTF::StringImpl *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  _DWORD *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t *v23;
  WTF::StringImpl *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  _DWORD *v29;
  WTF::StringImpl *v30;
  unint64_t v31;
  WTF::StringImpl *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  _DWORD *v37;
  unint64_t v38;
  WTF::StringImpl *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  _DWORD *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  _DWORD *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  _DWORD *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  WTF::StringImpl *v64;
  _DWORD *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  _DWORD *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  _DWORD **v76;
  uint64_t v77;
  _DWORD *v78;
  _DWORD **v79;
  uint64_t v80;
  _DWORD *v81;
  _DWORD **v82;
  uint64_t v83;
  _DWORD *v84;
  _DWORD **v85;
  uint64_t v86;
  _DWORD *v87;
  _DWORD **v88;
  uint64_t v89;
  _DWORD *v90;
  _DWORD **v91;
  uint64_t v92;
  _DWORD *v93;
  _DWORD **v94;
  uint64_t v95;
  _DWORD *v96;
  _DWORD **v97;
  uint64_t v98;
  _DWORD *v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  _DWORD *v102;
  WTF::StringImpl *v103[2];
  char v104;

  v4 = (*(uint64_t (**)(WebCore::CanvasRenderingContext *))(*(_QWORD *)a2 + 16))(a2);
  v5 = *(_QWORD *)a2;
  if (v4)
  {
    v6 = (WTF::JSONImpl::Object *)(*(uint64_t (**)(WebCore::CanvasRenderingContext *))(v5 + 16))(a2);
    if ((v6 & 1) != 0)
    {
      v7 = *((_BYTE *)a2 + 800);
      v8 = *((_BYTE *)a2 + 801);
      v9 = *((unsigned __int8 *)a2 + 802);
      WTF::JSONImpl::Object::create(v6);
      v10 = v103[0];
      if (v9)
      {
        if (v9 != 1)
        {
LABEL_31:
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)(v7 & 1));
          v23 = (uint64_t *)((char *)v10 + 16);
          WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v10 + 2, &v101, (const WTF::StringImpl *)&v102, (uint64_t)v103);
          if (v104)
          {
            v25 = (uint64_t *)((char *)v10 + 24);
            v26 = *((unsigned int *)v10 + 9);
            if ((_DWORD)v26 == *((_DWORD *)v10 + 8))
            {
              v79 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v25, v26 + 1, (unint64_t)&v101);
              v26 = *((unsigned int *)v10 + 9);
              v80 = *((_QWORD *)v10 + 3);
              v81 = *v79;
              if (*v79)
                *v81 += 2;
              *(_QWORD *)(v80 + 8 * v26) = v81;
            }
            else
            {
              v27 = *v25;
              v28 = v101;
              if (v101)
                *(_DWORD *)v101 += 2;
              *(_QWORD *)(v27 + 8 * v26) = v28;
            }
            *((_DWORD *)v10 + 9) = v26 + 1;
          }
          v29 = v102;
          v102 = 0;
          if (v29)
          {
            if (*v29 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v29;
          }
          v30 = v101;
          v101 = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 == 2)
              WTF::StringImpl::destroy(v30, v24);
            else
              *(_DWORD *)v30 -= 2;
          }
          v31 = v8 & 1;
LABEL_44:
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)v31);
          WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v23, &v101, (const WTF::StringImpl *)&v102, (uint64_t)v103);
          if (v104)
          {
            v33 = (uint64_t *)((char *)v10 + 24);
            v34 = *((unsigned int *)v10 + 9);
            if ((_DWORD)v34 == *((_DWORD *)v10 + 8))
            {
              v76 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v33, v34 + 1, (unint64_t)&v101);
              v34 = *((unsigned int *)v10 + 9);
              v77 = *((_QWORD *)v10 + 3);
              v78 = *v76;
              if (*v76)
                *v78 += 2;
              *(_QWORD *)(v77 + 8 * v34) = v78;
            }
            else
            {
              v35 = *v33;
              v36 = v101;
              if (v101)
                *(_DWORD *)v101 += 2;
              *(_QWORD *)(v35 + 8 * v34) = v36;
            }
            *((_DWORD *)v10 + 9) = v34 + 1;
          }
          v37 = v102;
          v102 = 0;
          if (v37)
          {
            if (*v37 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v37;
          }
          result = (uint64_t)v101;
          v101 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v32);
            else
              *(_DWORD *)result -= 2;
          }
          goto LABEL_56;
        }
        v11 = 68;
      }
      else
      {
        v11 = 67;
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      Inspector::Protocol::Helpers::getEnumConstantValue((Inspector::Protocol::Helpers *)v11);
      WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v100, v14);
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v10 + 2, &v101, (const WTF::StringImpl *)&v102, (uint64_t)v103);
      if (v104)
      {
        v16 = (uint64_t *)((char *)v10 + 24);
        v17 = *((unsigned int *)v10 + 9);
        if ((_DWORD)v17 == *((_DWORD *)v10 + 8))
        {
          v82 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v16, v17 + 1, (unint64_t)&v101);
          v17 = *((unsigned int *)v10 + 9);
          v83 = *((_QWORD *)v10 + 3);
          v84 = *v82;
          if (*v82)
            *v84 += 2;
          *(_QWORD *)(v83 + 8 * v17) = v84;
        }
        else
        {
          v18 = *v16;
          v19 = v101;
          if (v101)
            *(_DWORD *)v101 += 2;
          *(_QWORD *)(v18 + 8 * v17) = v19;
        }
        *((_DWORD *)v10 + 9) = v17 + 1;
      }
      v20 = v102;
      v102 = 0;
      if (v20)
      {
        if (*v20 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v20;
      }
      v21 = v100;
      v100 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, v15);
        else
          *(_DWORD *)v21 -= 2;
      }
      v22 = v101;
      v101 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, v15);
        else
          *(_DWORD *)v22 -= 2;
      }
      goto LABEL_31;
    }
LABEL_167:
    __break(0xC471u);
    JUMPOUT(0x195DB37CCLL);
  }
  v12 = (WTF::JSONImpl::Object *)(*(uint64_t (**)(WebCore::CanvasRenderingContext *))(v5 + 64))(a2);
  if (!(_DWORD)v12)
  {
    if (((*(uint64_t (**)(WebCore::CanvasRenderingContext *))(*(_QWORD *)a2 + 32))(a2) & 1) != 0
      || (result = (*(uint64_t (**)(WebCore::CanvasRenderingContext *))(*(_QWORD *)a2 + 40))(a2),
          (_DWORD)result))
    {
      result = (*(uint64_t (**)(WebCore::CanvasRenderingContext *))(*(_QWORD *)a2 + 32))(a2);
      if ((result & 1) == 0)
      {
        result = (*(uint64_t (**)(WebCore::CanvasRenderingContext *))(*(_QWORD *)a2 + 40))(a2);
        if ((result & 1) == 0)
          goto LABEL_167;
      }
      if (!*((_BYTE *)a2 + 356))
      {
        v38 = *((_QWORD *)a2 + 45);
        WTF::JSONImpl::Object::create((WTF::JSONImpl::Object *)result);
        v10 = v103[0];
        Inspector::Protocol::Canvas::ContextAttributes::setAlpha(v103[0], (WTF::JSONImpl::Value *)(v38 != 0));
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)((v38 & 0xFF00) != 0));
        v23 = (uint64_t *)((char *)v103[0] + 16);
        WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v103[0] + 2, &v101, (const WTF::StringImpl *)&v102, (uint64_t)v103);
        if (v104)
        {
          v40 = (uint64_t *)((char *)v10 + 24);
          v41 = *((unsigned int *)v10 + 9);
          if ((_DWORD)v41 == *((_DWORD *)v10 + 8))
          {
            v85 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v40, v41 + 1, (unint64_t)&v101);
            v41 = *((unsigned int *)v10 + 9);
            v86 = *((_QWORD *)v10 + 3);
            v87 = *v85;
            if (*v85)
              *v87 += 2;
            *(_QWORD *)(v86 + 8 * v41) = v87;
          }
          else
          {
            v42 = *v40;
            v43 = v101;
            if (v101)
              *(_DWORD *)v101 += 2;
            *(_QWORD *)(v42 + 8 * v41) = v43;
          }
          *((_DWORD *)v10 + 9) = v41 + 1;
        }
        v44 = v102;
        v102 = 0;
        if (v44)
        {
          if (*v44 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v44;
        }
        v45 = v101;
        v101 = 0;
        if (v45)
        {
          if (*(_DWORD *)v45 == 2)
            WTF::StringImpl::destroy(v45, v39);
          else
            *(_DWORD *)v45 -= 2;
        }
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)((v38 & 0xFF0000) != 0));
        WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v10 + 2, &v101, (const WTF::StringImpl *)&v102, (uint64_t)v103);
        if (v104)
        {
          v47 = (uint64_t *)((char *)v10 + 24);
          v48 = *((unsigned int *)v10 + 9);
          if ((_DWORD)v48 == *((_DWORD *)v10 + 8))
          {
            v88 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v47, v48 + 1, (unint64_t)&v101);
            v48 = *((unsigned int *)v10 + 9);
            v89 = *((_QWORD *)v10 + 3);
            v90 = *v88;
            if (*v88)
              *v90 += 2;
            *(_QWORD *)(v89 + 8 * v48) = v90;
          }
          else
          {
            v49 = *v47;
            v50 = v101;
            if (v101)
              *(_DWORD *)v101 += 2;
            *(_QWORD *)(v49 + 8 * v48) = v50;
          }
          *((_DWORD *)v10 + 9) = v48 + 1;
        }
        v51 = v102;
        v102 = 0;
        if (v51)
        {
          if (*v51 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v51;
        }
        v52 = v101;
        v101 = 0;
        if (v52)
        {
          if (*(_DWORD *)v52 == 2)
            WTF::StringImpl::destroy(v52, v46);
          else
            *(_DWORD *)v52 -= 2;
        }
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)((v38 & 0xFF000000) != 0));
        WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v10 + 2, &v101, (const WTF::StringImpl *)&v102, (uint64_t)v103);
        if (v104)
        {
          v54 = (uint64_t *)((char *)v10 + 24);
          v55 = *((unsigned int *)v10 + 9);
          if ((_DWORD)v55 == *((_DWORD *)v10 + 8))
          {
            v91 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v54, v55 + 1, (unint64_t)&v101);
            v55 = *((unsigned int *)v10 + 9);
            v92 = *((_QWORD *)v10 + 3);
            v93 = *v91;
            if (*v91)
              *v93 += 2;
            *(_QWORD *)(v92 + 8 * v55) = v93;
          }
          else
          {
            v56 = *v54;
            v57 = v101;
            if (v101)
              *(_DWORD *)v101 += 2;
            *(_QWORD *)(v56 + 8 * v55) = v57;
          }
          *((_DWORD *)v10 + 9) = v55 + 1;
        }
        v58 = v102;
        v102 = 0;
        if (v58)
        {
          if (*v58 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v58;
        }
        v59 = v101;
        v101 = 0;
        if (v59)
        {
          if (*(_DWORD *)v59 == 2)
            WTF::StringImpl::destroy(v59, v53);
          else
            *(_DWORD *)v59 -= 2;
        }
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)((v38 & 0xFF00000000) != 0));
        WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v10 + 2, &v101, (const WTF::StringImpl *)&v102, (uint64_t)v103);
        if (v104)
        {
          v61 = (uint64_t *)((char *)v10 + 24);
          v62 = *((unsigned int *)v10 + 9);
          if ((_DWORD)v62 == *((_DWORD *)v10 + 8))
          {
            v94 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v61, v62 + 1, (unint64_t)&v101);
            v62 = *((unsigned int *)v10 + 9);
            v95 = *((_QWORD *)v10 + 3);
            v96 = *v94;
            if (*v94)
              *v96 += 2;
            *(_QWORD *)(v95 + 8 * v62) = v96;
          }
          else
          {
            v63 = *v61;
            v64 = v101;
            if (v101)
              *(_DWORD *)v101 += 2;
            *(_QWORD *)(v63 + 8 * v62) = v64;
          }
          *((_DWORD *)v10 + 9) = v62 + 1;
        }
        v65 = v102;
        v102 = 0;
        if (v65)
        {
          if (*v65 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v65;
        }
        v66 = v101;
        v101 = 0;
        if (v66)
        {
          if (*(_DWORD *)v66 == 2)
            WTF::StringImpl::destroy(v66, v60);
          else
            *(_DWORD *)v66 -= 2;
        }
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)((v38 & 0xFF0000000000) != 0));
        WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v10 + 2, &v101, (const WTF::StringImpl *)&v102, (uint64_t)v103);
        if (v104)
        {
          v68 = (uint64_t *)((char *)v10 + 24);
          v69 = *((unsigned int *)v10 + 9);
          if ((_DWORD)v69 == *((_DWORD *)v10 + 8))
          {
            v97 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v68, v69 + 1, (unint64_t)&v101);
            v69 = *((unsigned int *)v10 + 9);
            v98 = *((_QWORD *)v10 + 3);
            v99 = *v97;
            if (*v97)
              *v99 += 2;
            *(_QWORD *)(v98 + 8 * v69) = v99;
          }
          else
          {
            v70 = *v68;
            v71 = v101;
            if (v101)
              *(_DWORD *)v101 += 2;
            *(_QWORD *)(v70 + 8 * v69) = v71;
          }
          *((_DWORD *)v10 + 9) = v69 + 1;
        }
        v72 = v102;
        v102 = 0;
        if (v72)
        {
          if (*v72 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v72;
        }
        v73 = v101;
        v101 = 0;
        if (v73)
        {
          if (*(_DWORD *)v73 == 2)
            WTF::StringImpl::destroy(v73, v67);
          else
            *(_DWORD *)v73 -= 2;
        }
        if (BYTE6(v38) <= 2u)
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          Inspector::Protocol::Canvas::ContextAttributes::setPowerPreference(v10, (const WTF::String *)v103);
          v75 = v103[0];
          v103[0] = 0;
          if (v75)
          {
            if (*(_DWORD *)v75 == 2)
              WTF::StringImpl::destroy(v75, v74);
            else
              *(_DWORD *)v75 -= 2;
          }
        }
        v31 = HIBYTE(v38) != 0;
        goto LABEL_44;
      }
    }
    v10 = 0;
    goto LABEL_56;
  }
  WTF::JSONImpl::Object::create(v12);
  v10 = v103[0];
  if (((*(uint64_t (**)(WebCore::CanvasRenderingContext *))(*(_QWORD *)a2 + 64))(a2) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195DB37ECLL);
  }
  result = (uint64_t)Inspector::Protocol::Canvas::ContextAttributes::setAlpha(v103[0], (WTF::JSONImpl::Value *)*((unsigned __int8 *)a2 + 44));
LABEL_56:
  *(_QWORD *)this = v10;
  return result;
}

WTF::StringImpl *WebCore::InspectorCanvas::releaseObjectForRecording@<X0>(WebCore::InspectorCanvas *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  unsigned int v9;
  unsigned int v10;
  WTF::StringImpl *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  const WTF::String *v18;
  WTF::StringImpl *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  const WTF::String *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  _DWORD **v52;
  uint64_t v53;
  _DWORD *v54;
  _DWORD **v55;
  uint64_t v56;
  _DWORD *v57;
  _DWORD **v58;
  uint64_t v59;
  _DWORD *v60;
  _DWORD **v61;
  uint64_t v62;
  _DWORD *v63;
  _DWORD **v64;
  uint64_t v65;
  _DWORD *v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  _BYTE v71[16];
  char v72;

  v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 32);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 2) + 8) + 24))(*(_QWORD *)(*((_QWORD *)this + 2) + 8));
  if ((v6 & 1) != 0)
  {
    v7 = 69;
    goto LABEL_18;
  }
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 2) + 8) + 80))(*(_QWORD *)(*((_QWORD *)this + 2) + 8));
  if ((v6 & 1) != 0)
  {
    v7 = 70;
    goto LABEL_18;
  }
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 2) + 8) + 64))(*(_QWORD *)(*((_QWORD *)this + 2) + 8));
  if ((_DWORD)v6)
  {
    v8 = v5 == 0;
    v9 = 231;
    goto LABEL_9;
  }
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 2) + 8) + 32))(*(_QWORD *)(*((_QWORD *)this + 2) + 8));
  if ((_DWORD)v6)
  {
    v8 = v5 == 0;
    v9 = 233;
LABEL_9:
    if (v8)
      v7 = v9;
    else
      v7 = v9 + 1;
    goto LABEL_18;
  }
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 2) + 8) + 40))(*(_QWORD *)(*((_QWORD *)this + 2) + 8));
  if (v5)
    v10 = 236;
  else
    v10 = 235;
  if ((_DWORD)v6)
    v7 = v10;
  else
    v7 = 69;
LABEL_18:
  WTF::JSONImpl::Object::create((WTF::JSONImpl::Object *)v6);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)2);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v67 + 16), &v69, (const WTF::StringImpl *)&v70, (uint64_t)v71);
  if (v72)
  {
    v12 = (uint64_t *)(v67 + 24);
    v13 = *(unsigned int *)(v67 + 36);
    if ((_DWORD)v13 == *(_DWORD *)(v67 + 32))
    {
      v52 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v12, v13 + 1, (unint64_t)&v69);
      v13 = *(unsigned int *)(v67 + 36);
      v53 = *(_QWORD *)(v67 + 24);
      v54 = *v52;
      if (*v52)
        *v54 += 2;
      *(_QWORD *)(v53 + 8 * v13) = v54;
    }
    else
    {
      v14 = *v12;
      v15 = v69;
      if (v69)
        *(_DWORD *)v69 += 2;
      *(_QWORD *)(v14 + 8 * v13) = v15;
    }
    *(_DWORD *)(v67 + 36) = v13 + 1;
  }
  v16 = v70;
  v70 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v16;
  }
  v17 = v69;
  v69 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v11);
    else
      *(_DWORD *)v17 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::Protocol::Helpers::getEnumConstantValue((Inspector::Protocol::Helpers *)v7);
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v68, v18);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v67 + 16), &v69, (const WTF::StringImpl *)&v70, (uint64_t)v71);
  if (v72)
  {
    v20 = (uint64_t *)(v67 + 24);
    v21 = *(unsigned int *)(v67 + 36);
    if ((_DWORD)v21 == *(_DWORD *)(v67 + 32))
    {
      v55 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v20, v21 + 1, (unint64_t)&v69);
      v21 = *(unsigned int *)(v67 + 36);
      v56 = *(_QWORD *)(v67 + 24);
      v57 = *v55;
      if (*v55)
        *v57 += 2;
      *(_QWORD *)(v56 + 8 * v21) = v57;
    }
    else
    {
      v22 = *v20;
      v23 = v69;
      if (v69)
        *(_DWORD *)v69 += 2;
      *(_QWORD *)(v22 + 8 * v21) = v23;
    }
    *(_DWORD *)(v67 + 36) = v21 + 1;
  }
  v24 = v70;
  v70 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v24;
  }
  v25 = v68;
  v68 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v19);
    else
      *(_DWORD *)v25 -= 2;
  }
  v26 = v69;
  v69 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v19);
    else
      *(_DWORD *)v26 -= 2;
  }
  v27 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v69 = v27;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v67 + 16), &v70, (const WTF::StringImpl *)&v69, (uint64_t)v71);
  if (v72)
  {
    v29 = (uint64_t *)(v67 + 24);
    v30 = *(unsigned int *)(v67 + 36);
    if ((_DWORD)v30 == *(_DWORD *)(v67 + 32))
    {
      v58 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v29, v30 + 1, (unint64_t)&v70);
      v30 = *(unsigned int *)(v67 + 36);
      v59 = *(_QWORD *)(v67 + 24);
      v60 = *v58;
      if (*v58)
        *v60 += 2;
      *(_QWORD *)(v59 + 8 * v30) = v60;
    }
    else
    {
      v31 = *v29;
      v32 = v70;
      if (v70)
        *(_DWORD *)v70 += 2;
      *(_QWORD *)(v31 + 8 * v30) = v32;
    }
    *(_DWORD *)(v67 + 36) = v30 + 1;
  }
  v33 = v69;
  v69 = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v33;
  }
  v34 = v70;
  v70 = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v28);
    else
      *(_DWORD *)v34 -= 2;
  }
  v35 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v69 = v35;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v67 + 16), &v70, (const WTF::StringImpl *)&v69, (uint64_t)v71);
  if (v72)
  {
    v37 = (uint64_t *)(v67 + 24);
    v38 = *(unsigned int *)(v67 + 36);
    if ((_DWORD)v38 == *(_DWORD *)(v67 + 32))
    {
      v61 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v37, v38 + 1, (unint64_t)&v70);
      v38 = *(unsigned int *)(v67 + 36);
      v62 = *(_QWORD *)(v67 + 24);
      v63 = *v61;
      if (*v61)
        *v63 += 2;
      *(_QWORD *)(v62 + 8 * v38) = v63;
    }
    else
    {
      v39 = *v37;
      v40 = v70;
      if (v70)
        *(_DWORD *)v70 += 2;
      *(_QWORD *)(v39 + 8 * v38) = v40;
    }
    *(_DWORD *)(v67 + 36) = v38 + 1;
  }
  v41 = v69;
  v69 = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v41;
  }
  v42 = v70;
  v70 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
      WTF::StringImpl::destroy(v42, v36);
    else
      *(_DWORD *)v42 -= 2;
  }
  *a2 = v67;
  v43 = *((_QWORD *)this + 10);
  if (v43 && *(_DWORD *)(v43 + 4))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::Value::create((WebCore::InspectorCanvas *)((char *)this + 80), v45);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v67 + 16), &v69, (const WTF::StringImpl *)&v70, (uint64_t)v71);
    if (v72)
    {
      v46 = (uint64_t *)(v67 + 24);
      v47 = *(unsigned int *)(v67 + 36);
      if ((_DWORD)v47 == *(_DWORD *)(v67 + 32))
      {
        v64 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v46, v47 + 1, (unint64_t)&v69);
        v47 = *(unsigned int *)(v67 + 36);
        v65 = *(_QWORD *)(v67 + 24);
        v66 = *v64;
        if (*v64)
          *v66 += 2;
        *(_QWORD *)(v65 + 8 * v47) = v66;
      }
      else
      {
        v48 = *v46;
        v49 = v69;
        if (v69)
          *(_DWORD *)v69 += 2;
        *(_QWORD *)(v48 + 8 * v47) = v49;
      }
      *(_DWORD *)(v67 + 36) = v47 + 1;
    }
    v50 = v70;
    v70 = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v50;
    }
    v51 = v69;
    v69 = 0;
    if (v51)
    {
      if (*(_DWORD *)v51 == 2)
        WTF::StringImpl::destroy(v51, v36);
      else
        *(_DWORD *)v51 -= 2;
    }
  }
  return WebCore::InspectorCanvas::resetRecordingData(this, v36);
}

WTF::StringImpl *WebCore::InspectorCanvas::getContentAsDataURL@<X0>(WebCore::InspectorCanvas *this@<X0>, WebCore::CanvasRenderingContext *a2@<X1>, uint64_t a3@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;

  if ((*(unsigned int (**)(WebCore::InspectorCanvas *, WebCore::CanvasRenderingContext *))(*(_QWORD *)this + 168))(this, a2))
  {
    result = (WTF::StringImpl *)(*(_QWORD *(**)(uint64_t *__return_ptr, WebCore::InspectorCanvas *, _QWORD))(*(_QWORD *)this + 104))(&v18, this, 0);
  }
  else
  {
    result = (WTF::StringImpl *)(*(_QWORD *(**)(uint64_t *__return_ptr, WebCore::InspectorCanvas *, uint64_t))(*(_QWORD *)this + 104))(&v18, this, 1);
  }
  v6 = v18;
  if (v18)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WebCore::ImageBuffer::toDataURL(v6, (WebCore *)&v17, 0, 0, 0, &v18);
    result = v17;
    *(_QWORD *)a3 = v18;
    *(_DWORD *)(a3 + 8) = 0;
    v17 = 0;
    v18 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
      else
        *(_DWORD *)result -= 2;
    }
    v8 = *(_QWORD *)(v6 + 8);
    if (__ldaxr((unsigned __int8 *)v8))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v8))
    {
      goto LABEL_15;
    }
    result = (WTF::StringImpl *)MEMORY[0x19AEA534C](v8);
LABEL_15:
    v11 = *(_QWORD *)(v8 + 8);
    v12 = v11 - 1;
    *(_QWORD *)(v8 + 8) = v11 - 1;
    if (v11 == 1)
    {
      v16 = *(_QWORD *)(v8 + 16);
      v13 = *(_QWORD *)(v8 + 24);
      *(_QWORD *)(v8 + 24) = 0;
      v14 = v16 != 0;
    }
    else
    {
      v13 = 0;
      v14 = 1;
    }
    v15 = __ldxr((unsigned __int8 *)v8);
    if (v15 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v8))
      {
        if (v12)
          return result;
LABEL_23:
        if (v13)
          result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
        if (!v14)
          return (WTF::StringImpl *)WTF::fastFree((WTF *)v8, v7);
        return result;
      }
    }
    else
    {
      __clrex();
    }
    result = (WTF::StringImpl *)WTF::Lock::unlockSlow((WTF::Lock *)v8);
    if (v12)
      return result;
    goto LABEL_23;
  }
  v10 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v10 += 2;
  *(_QWORD *)a3 = v10;
  *(_DWORD *)(a3 + 8) = 0;
  return result;
}

uint64_t WebCore::InspectorCanvas::indexForData(uint64_t a1, unint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t i;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  _BOOL4 v11;
  char isEqual;
  uint64_t v13;
  BOOL v14;
  WTF::JSONImpl::ArrayBase *v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  WTF::JSONImpl::Value *v19;
  char **v20;
  uint64_t v21;
  WTF::JSONImpl::Value **v22;
  WTF::JSONImpl::Value **v23;
  Inspector::ScriptCallStack *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::JSONImpl::Value *v32;
  WTF::JSONImpl::Value *v34;
  uint64_t v35;
  Inspector::ScriptCallStack **v36;
  Inspector::ScriptCallStack *v37[5];
  uint64_t v38;
  WTF::JSONImpl::Value **v39;
  uint64_t v40;
  WTF::JSONImpl::Value **v41;
  uint64_t v42;
  WTF::JSONImpl::Value **v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  WTF::JSONImpl::Value **v48;
  uint64_t v49;
  WTF::JSONImpl::Value **v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  WTF::JSONImpl::Value **v54;
  uint64_t *v55;
  uint64_t v56;
  WTF::JSONImpl::Value **v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v4 = (_QWORD *)(a1 + 64);
  if (*(_DWORD *)(a1 + 76))
  {
    v5 = 0;
    for (i = 0; i < *(unsigned int *)(a1 + 76); ++i)
    {
      v7 = *v4 + v5;
      LOBYTE(v37[0]) = 0;
      LODWORD(v38) = -1;
      v8 = *(unsigned int *)(v7 + 40);
      if ((_DWORD)v8 == -1)
      {
        v10 = 0;
        v9 = *(_DWORD *)(a2 + 40);
        v11 = v9 != -1;
      }
      else
      {
        ((void (*)(Inspector::ScriptCallStack ***, Inspector::ScriptCallStack **))off_1E33EE090[v8])(&v36, v37);
        LODWORD(v38) = v8;
        v9 = *(_DWORD *)(a2 + 40);
        v10 = (_DWORD)v8 == v9;
        v11 = v9 != -1;
        if (v9 != -1 && (_DWORD)v8 == v9)
        {
          v36 = (Inspector::ScriptCallStack **)&v35;
          if ((((uint64_t (*)(Inspector::ScriptCallStack ***, unint64_t, Inspector::ScriptCallStack **))off_1E33EE288[v8])(&v36, a2, v37) & 1) != 0)goto LABEL_12;
          v9 = *(_DWORD *)(a2 + 40);
          goto LABEL_13;
        }
      }
      if (!v11)
        v10 = (_DWORD)v8 == -1;
      if (v10)
      {
LABEL_12:
        isEqual = 1;
        goto LABEL_28;
      }
LABEL_13:
      if (v9 == 8)
      {
        isEqual = 0;
        v13 = v38;
        if (*(_QWORD *)a2 && v38 == 8)
        {
          if (v37[0])
            v14 = *(Inspector::ScriptCallStack **)a2 == v37[0];
          else
            v14 = 0;
          isEqual = v14;
          goto LABEL_28;
        }
      }
      else
      {
        if (v9 != 7)
          goto LABEL_19;
        isEqual = 0;
        v13 = v38;
        if (*(_QWORD *)a2 && v38 == 7)
        {
          if (v37[0])
            isEqual = Inspector::ScriptCallStack::isEqual(*(Inspector::ScriptCallStack **)a2, v37[0]);
          else
LABEL_19:
            isEqual = 0;
LABEL_28:
          v13 = v38;
        }
      }
      if (v13 != 0xFFFFFFFFLL)
        ((void (*)(Inspector::ScriptCallStack ***, Inspector::ScriptCallStack **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v13])(&v36, v37);
      LODWORD(v38) = -1;
      if ((isEqual & 1) != 0)
        return i;
      v5 += 48;
    }
  }
  v35 = -1;
  if (!*(_QWORD *)(a1 + 56))
  {
    v15 = (WTF::JSONImpl::ArrayBase *)WTF::fastMalloc((WTF *)0x20);
    WTF::JSONImpl::ArrayBase::ArrayBase(v15);
    v16 = *(_DWORD **)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v15;
    if (v16)
    {
      if (*v16 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v16;
    }
  }
  v34 = 0;
  v37[0] = (Inspector::ScriptCallStack *)&v35;
  v37[1] = (Inspector::ScriptCallStack *)a1;
  v37[2] = (Inspector::ScriptCallStack *)&v35;
  v37[3] = (Inspector::ScriptCallStack *)a1;
  v37[4] = (Inspector::ScriptCallStack *)&v35;
  v38 = a1;
  v39 = &v34;
  v40 = a1;
  v41 = &v34;
  v42 = a1;
  v43 = &v34;
  v44 = a1;
  v45 = &v35;
  v46 = a1;
  v47 = a1;
  v48 = &v34;
  v49 = a1;
  v50 = &v34;
  v51 = &v35;
  v52 = a1;
  v53 = a1;
  v54 = &v34;
  v55 = &v35;
  v56 = a1;
  v57 = &v34;
  v17 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v17 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    JUMPOUT(0x195DB43D0);
  }
  v36 = v37;
  ((void (*)(Inspector::ScriptCallStack ***, unint64_t))off_1E33EE2F0[v17])(&v36, a2);
  if (!v34)
    return v35;
  *(_QWORD *)(a1 + 104) += WTF::JSONImpl::Value::memoryCost(v34);
  v18 = *(_QWORD *)(a1 + 56);
  v19 = v34;
  v37[0] = v34;
  v34 = 0;
  v20 = (char **)(v18 + 16);
  v21 = *(unsigned int *)(v18 + 28);
  if ((_DWORD)v21 == *(_DWORD *)(v18 + 24))
  {
    v22 = (WTF::JSONImpl::Value **)WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v20, v21 + 1, (unint64_t)v37);
    v21 = *(unsigned int *)(v18 + 28);
    v23 = (WTF::JSONImpl::Value **)(*(_QWORD *)(v18 + 16) + 8 * v21);
    v19 = *v22;
  }
  else
  {
    v23 = (WTF::JSONImpl::Value **)&(*v20)[8 * v21];
    v22 = v37;
  }
  *v22 = 0;
  *v23 = v19;
  *(_DWORD *)(v18 + 28) = v21 + 1;
  v24 = v37[0];
  v37[0] = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v24;
  }
  v25 = *(unsigned int *)(a1 + 76);
  if ((_DWORD)v25 == *(_DWORD *)(a1 + 72))
  {
    v26 = WTF::Vector<std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v4, v25 + 1, a2);
    v27 = *(_QWORD *)(a1 + 64) + 48 * *(unsigned int *)(a1 + 76);
    *(_BYTE *)v27 = 0;
    *(_DWORD *)(v27 + 40) = -1;
    v28 = *(unsigned int *)(v26 + 40);
    if ((_DWORD)v28 != -1)
    {
      ((void (*)(Inspector::ScriptCallStack **, uint64_t))off_1E33EE090[v28])(v37, v27);
      *(_DWORD *)(v27 + 40) = v28;
    }
  }
  else
  {
    v29 = *v4 + 48 * v25;
    *(_BYTE *)v29 = 0;
    *(_DWORD *)(v29 + 40) = -1;
    v30 = *(unsigned int *)(a2 + 40);
    if ((_DWORD)v30 != -1)
    {
      ((void (*)(Inspector::ScriptCallStack **, uint64_t, unint64_t))off_1E33EE090[v30])(v37, v29, a2);
      *(_DWORD *)(v29 + 40) = v30;
    }
  }
  v31 = (*(_DWORD *)(a1 + 76) + 1);
  *(_DWORD *)(a1 + 76) = v31;
  i = v31 - 1;
  v32 = v34;
  v34 = 0;
  v35 = v31 - 1;
  if (v32)
  {
    if (*(_DWORD *)v32 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v32;
  }
  return i;
}

void WebCore::CommandLineAPIModule::~CommandLineAPIModule(WebCore::CommandLineAPIModule *this)
{
  Inspector::InjectedScriptModule::~InjectedScriptModule(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::DOMEditor::InsertBeforeAction::~InsertBeforeAction(WebCore::DOMEditor::InsertBeforeAction *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::DOMEditor::InsertBeforeAction::~InsertBeforeAction(this, a2);
  WTF::fastFree(v2, v3);
}

{
  WebCore::DOMEditor::RemoveChildAction *v3;
  WTF *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;

  v3 = (WebCore::DOMEditor::RemoveChildAction *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    WebCore::DOMEditor::RemoveChildAction::~RemoveChildAction(v3, a2);
    WTF::fastFree(v4, v5);
  }
  v6 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v6)
  {
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  v7 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v7)
  {
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7, a2);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  v8 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v8)
  {
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v8, a2);
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E33EE390;
  *((_QWORD *)this + 1) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v9 -= 2;
  }
}

void WebCore::InspectorHistory::Action::mergeId(_QWORD *a1@<X8>)
{
  _DWORD *v2;

  v2 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v2 += 2;
  *a1 = v2;
}

WebCore::ContainerNode *WebCore::DOMEditor::InsertBeforeAction::perform@<X0>(WebCore::DOMEditor::InsertBeforeAction *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::DOMEditor::RemoveChildAction *v9;
  WTF *v10;
  void *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::ContainerNode *result;
  WebCore::Node *v16;
  uint64_t v17;
  WebCore::Node *v18;
  void *v19;
  WebCore::Node *v20[2];
  char v21;

  v4 = (uint64_t *)*((_QWORD *)this + 3);
  v5 = v4[4];
  if (v5)
  {
    v7 = WTF::fastMalloc((WTF *)0x28);
    v8 = *((_QWORD *)this + 3);
    *(_QWORD *)v7 = off_1E33EDB90;
    *(_QWORD *)(v7 + 8) = 0;
    *(_DWORD *)(v5 + 24) += 2;
    *(_QWORD *)(v7 + 16) = v5;
    *(_DWORD *)(v8 + 24) += 2;
    *(_QWORD *)(v7 + 24) = v8;
    *(_QWORD *)(v7 + 32) = 0;
    v9 = (WebCore::DOMEditor::RemoveChildAction *)*((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = v7;
    if (v9)
    {
      WebCore::DOMEditor::RemoveChildAction::~RemoveChildAction(v9, v6);
      WTF::fastFree(v10, v11);
      v7 = *((_QWORD *)this + 5);
    }
    v12 = *(_QWORD **)(v7 + 24);
    v13 = v12[7];
    if (v13)
      *(_DWORD *)(v13 + 24) += 2;
    v14 = *(_QWORD *)(v7 + 32);
    *(_QWORD *)(v7 + 32) = v13;
    if (v14)
    {
      if (*(_DWORD *)(v14 + 24) == 2)
      {
        if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v14, v12);
          v12 = *(_QWORD **)(v7 + 24);
        }
      }
      else
      {
        *(_DWORD *)(v14 + 24) -= 2;
      }
    }
    result = WebCore::ContainerNode::removeChild(*(WebCore::ContainerNode **)(v7 + 16), (WebCore::Node *)v12, v20);
    if (v21)
    {
      v16 = v20[1];
      *(_BYTE *)a2 = v20[0];
      *(_QWORD *)(a2 + 8) = v16;
      *(_BYTE *)(a2 + 16) = 1;
      return result;
    }
    v4 = (uint64_t *)*((_QWORD *)this + 3);
  }
  v17 = *((_QWORD *)this + 2);
  v18 = (WebCore::Node *)*((_QWORD *)this + 4);
  if (v18)
    *((_DWORD *)v18 + 6) += 2;
  v20[0] = v18;
  WebCore::ContainerNode::insertBefore(v17, v4, v20, a2);
  result = v20[0];
  v20[0] = 0;
  if (result)
  {
    if (*((_DWORD *)result + 6) == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return (WebCore::ContainerNode *)WebCore::Node::removedLastRef(result, v19);
    }
    else
    {
      *((_DWORD *)result + 6) -= 2;
    }
  }
  return result;
}

WebCore::Node *WebCore::DOMEditor::InsertBeforeAction::undo@<X0>(WebCore::ContainerNode **this@<X0>, uint64_t a2@<X8>)
{
  WebCore::Node *result;
  WTF::StringImpl *v5;
  WebCore::ContainerNode *v6;
  uint64_t v7;
  uint64_t *v8;
  WebCore::Node *v9;
  void *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  char v13;
  WebCore::Node *v14;

  result = WebCore::ContainerNode::removeChild(this[2], this[3], &v11);
  if (v13)
  {
    v5 = v12;
    *(_BYTE *)a2 = v11;
    *(_QWORD *)(a2 + 8) = v5;
    *(_BYTE *)(a2 + 16) = 1;
  }
  else
  {
    v6 = this[5];
    if (v6)
    {
      v7 = *((_QWORD *)v6 + 2);
      v8 = (uint64_t *)*((_QWORD *)v6 + 3);
      v9 = (WebCore::Node *)*((_QWORD *)v6 + 4);
      if (v9)
        *((_DWORD *)v9 + 6) += 2;
      v14 = v9;
      WebCore::ContainerNode::insertBefore(v7, v8, &v14, a2);
      result = v14;
      v14 = 0;
      if (result)
      {
        if (*((_DWORD *)result + 6) == 2)
        {
          if ((*((_WORD *)result + 15) & 0x400) == 0)
            result = (WebCore::Node *)WebCore::Node::removedLastRef(result, v10);
        }
        else
        {
          *((_DWORD *)result + 6) -= 2;
        }
      }
      if (v13)
      {
        result = v12;
        v12 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            return (WebCore::Node *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v10);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    else
    {
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
    }
  }
  return result;
}

WebCore::ContainerNode *WebCore::DOMEditor::InsertBeforeAction::redo@<X0>(WebCore::DOMEditor::InsertBeforeAction *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  WebCore::ContainerNode *result;
  WebCore::Node *v6;
  uint64_t v7;
  uint64_t *v8;
  WebCore::Node *v9;
  void *v10;
  WebCore::Node *v11[2];
  char v12;

  v4 = *((_QWORD *)this + 5);
  if (v4
    && (result = WebCore::ContainerNode::removeChild(*(WebCore::ContainerNode **)(v4 + 16), *(WebCore::Node **)(v4 + 24), v11), v12))
  {
    v6 = v11[1];
    *(_BYTE *)a2 = v11[0];
    *(_QWORD *)(a2 + 8) = v6;
    *(_BYTE *)(a2 + 16) = 1;
  }
  else
  {
    v7 = *((_QWORD *)this + 2);
    v8 = (uint64_t *)*((_QWORD *)this + 3);
    v9 = (WebCore::Node *)*((_QWORD *)this + 4);
    if (v9)
      *((_DWORD *)v9 + 6) += 2;
    v11[0] = v9;
    WebCore::ContainerNode::insertBefore(v7, v8, v11, a2);
    result = v11[0];
    v11[0] = 0;
    if (result)
    {
      if (*((_DWORD *)result + 6) == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          return (WebCore::ContainerNode *)WebCore::Node::removedLastRef(result, v10);
      }
      else
      {
        *((_DWORD *)result + 6) -= 2;
      }
    }
  }
  return result;
}

uint64_t WebCore::InspectorHistory::Action::isUndoableStateMark(WebCore::InspectorHistory::Action *this)
{
  return 0;
}

WebCore::ContainerNode *WebCore::DOMEditor::RemoveChildAction::perform@<X0>(WebCore::DOMEditor::RemoveChildAction *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (_QWORD *)*((_QWORD *)this + 3);
  v5 = v4[7];
  if (v5)
    *(_DWORD *)(v5 + 24) += 2;
  v6 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v5;
  if (v6)
  {
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v6, v4);
        v4 = (_QWORD *)*((_QWORD *)this + 3);
      }
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  return WebCore::ContainerNode::removeChild(*((WebCore::ContainerNode **)this + 2), (WebCore::Node *)v4, a2);
}

void WebCore::DOMEditor::RemoveChildAction::~RemoveChildAction(WebCore::DOMEditor::RemoveChildAction *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::DOMEditor::RemoveChildAction::~RemoveChildAction(this, a2);
  WTF::fastFree(v2, v3);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;

  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E33EE390;
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v6 -= 2;
  }
}

unsigned int *WebCore::DOMEditor::RemoveChildAction::undo@<X0>(WebCore::DOMEditor::RemoveChildAction *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t *v4;
  WebCore::Node *v5;
  void *v6;
  unsigned int *result;
  WebCore::Node *v8;

  v3 = *((_QWORD *)this + 2);
  v4 = (uint64_t *)*((_QWORD *)this + 3);
  v5 = (WebCore::Node *)*((_QWORD *)this + 4);
  if (v5)
    *((_DWORD *)v5 + 6) += 2;
  v8 = v5;
  WebCore::ContainerNode::insertBefore(v3, v4, &v8, a2);
  result = (unsigned int *)v8;
  v8 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, v6);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

WebCore::ContainerNode *WebCore::DOMEditor::RemoveChildAction::redo@<X0>(WebCore::ContainerNode **this@<X0>, _QWORD *a2@<X8>)
{
  return WebCore::ContainerNode::removeChild(this[2], this[3], a2);
}

void WebCore::DOMEditor::SetAttributeAction::~SetAttributeAction(WebCore::DOMEditor::SetAttributeAction *this, WTF::StringImpl *a2)
{
  WTF *v2;
  void *v3;

  WebCore::DOMEditor::SetAttributeAction::~SetAttributeAction(this, a2);
  WTF::fastFree(v2, v3);
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E33EE390;
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
}

WTF::StringImpl *WebCore::DOMEditor::SetAttributeAction::perform@<X0>(WebCore::Element **this@<X0>, uint64_t a2@<X2>, WTF::String *a3@<X3>, uint64_t a4@<X8>, __n128 a5@<Q0>)
{
  uint64_t AttributeInternal;
  WTF::StringImpl *v8;
  WTF::String *v9;
  int32x4_t v10;
  WebCore::Element **v11;
  WebCore::Element *v12;
  WTF::StringImpl *v13;
  WebCore::Element *v14;
  WebCore::Element *v15;
  WTF::StringImpl *result;
  WebCore::Element *v17;
  int v18;
  char v19;

  AttributeInternal = WebCore::Element::getAttributeInternal(this[2], (const WTF::AtomString *)(this + 3), a2, a3, a5);
  v11 = (WebCore::Element **)(AttributeInternal + 8);
  if (!AttributeInternal)
    v11 = (WebCore::Element **)MEMORY[0x1E0CBF2F8];
  v12 = *v11;
  if (v12)
    *(_DWORD *)v12 += 2;
  v13 = this[5];
  this[5] = v12;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v8);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = this[2];
  v15 = this[4];
  if (v15)
    *(_DWORD *)v15 += 2;
  v17 = v15;
  v18 = 3;
  result = WebCore::Element::setAttribute(v14, (WTF::AtomString *)(this + 3), (uint64_t)&v17, v9, a4, v10);
  if (v18 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(char *, WebCore::Element **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11TrustedHTMLENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13TrustedScriptENSA_ISF_EENSC_ISF_EEEENS7_INS8_16TrustedScriptURLENSA_ISJ_EENSC_ISJ_EEEENS6_10AtomStringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSQ_EEEDcOSR_DpOT0____fmatrix[v18])(&v19, &v17);
  return result;
}

WTF::StringImpl *WebCore::DOMEditor::SetAttributeAction::undo@<X0>(WebCore::DOMEditor::SetAttributeAction *this@<X0>, WTF::String *a2@<X3>, _QWORD *a3@<X8>, int32x4_t a4@<Q0>)
{
  _DWORD *v6;
  WebCore::Element *v7;
  WTF::AtomString *v8;
  WTF::StringImpl *result;
  _DWORD *v10;
  int v11;
  char v12;

  v6 = (_DWORD *)*((_QWORD *)this + 5);
  v7 = (WebCore::Element *)*((_QWORD *)this + 2);
  v8 = (WebCore::DOMEditor::SetAttributeAction *)((char *)this + 24);
  if (v6)
  {
    *v6 += 2;
    v10 = v6;
    v11 = 3;
    result = WebCore::Element::setAttribute(v7, v8, (uint64_t)&v10, a2, (uint64_t)a3, a4);
    if (v11 != -1)
      return (WTF::StringImpl *)((uint64_t (*)(char *, _DWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11TrustedHTMLENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13TrustedScriptENSA_ISF_EENSC_ISF_EEEENS7_INS8_16TrustedScriptURLENSA_ISJ_EENSC_ISJ_EEEENS6_10AtomStringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSQ_EEEDcOSR_DpOT0____fmatrix[v11])(&v12, &v10);
  }
  else
  {
    result = (WTF::StringImpl *)WebCore::Element::removeAttribute(v7, v8);
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
  }
  return result;
}

WTF::StringImpl *WebCore::DOMEditor::SetAttributeAction::redo@<X0>(WebCore::DOMEditor::SetAttributeAction *this@<X0>, WTF::String *a2@<X3>, uint64_t a3@<X8>, int32x4_t a4@<Q0>)
{
  WebCore::Element *v5;
  WTF::AtomString *v6;
  _DWORD *v7;
  WTF::StringImpl *result;
  _DWORD *v9;
  int v10;
  char v11;

  v5 = (WebCore::Element *)*((_QWORD *)this + 2);
  v6 = (WebCore::DOMEditor::SetAttributeAction *)((char *)this + 24);
  v7 = (_DWORD *)*((_QWORD *)this + 4);
  if (v7)
    *v7 += 2;
  v9 = v7;
  v10 = 3;
  result = WebCore::Element::setAttribute(v5, v6, (uint64_t)&v9, a2, a3, a4);
  if (v10 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(char *, _DWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11TrustedHTMLENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13TrustedScriptENSA_ISF_EENSC_ISF_EEEENS7_INS8_16TrustedScriptURLENSA_ISJ_EENSC_ISJ_EEEENS6_10AtomStringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSQ_EEEDcOSR_DpOT0____fmatrix[v10])(&v11, &v9);
  return result;
}

void WebCore::DOMEditor::RemoveAttributeAction::~RemoveAttributeAction(WebCore::DOMEditor::RemoveAttributeAction *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E33EE390;
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E33EE390;
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::DOMEditor::RemoveAttributeAction::perform@<X0>(WebCore::Element **this@<X0>, uint64_t a2@<X2>, WTF::String *a3@<X3>, _QWORD *a4@<X8>, __n128 a5@<Q0>)
{
  uint64_t AttributeInternal;
  WTF::StringImpl *v8;
  WebCore::Element **v9;
  WebCore::Element *v10;
  WTF::StringImpl *v11;
  uint64_t result;

  AttributeInternal = WebCore::Element::getAttributeInternal(this[2], (const WTF::AtomString *)(this + 3), a2, a3, a5);
  v9 = (WebCore::Element **)(AttributeInternal + 8);
  if (!AttributeInternal)
    v9 = (WebCore::Element **)MEMORY[0x1E0CBF2F8];
  v10 = *v9;
  if (v10)
    *(_DWORD *)v10 += 2;
  v11 = this[4];
  this[4] = v10;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v8);
    else
      *(_DWORD *)v11 -= 2;
  }
  result = WebCore::Element::removeAttribute(this[2], (const WTF::AtomString *)(this + 3));
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  return result;
}

WTF::StringImpl *WebCore::DOMEditor::RemoveAttributeAction::undo@<X0>(WebCore::DOMEditor::RemoveAttributeAction *this@<X0>, WTF::String *a2@<X3>, uint64_t a3@<X8>, int32x4_t a4@<Q0>)
{
  WebCore::Element *v5;
  WTF::AtomString *v6;
  _DWORD *v7;
  WTF::StringImpl *result;
  _DWORD *v9;
  int v10;
  char v11;

  v5 = (WebCore::Element *)*((_QWORD *)this + 2);
  v6 = (WebCore::DOMEditor::RemoveAttributeAction *)((char *)this + 24);
  v7 = (_DWORD *)*((_QWORD *)this + 4);
  if (v7)
    *v7 += 2;
  v9 = v7;
  v10 = 3;
  result = WebCore::Element::setAttribute(v5, v6, (uint64_t)&v9, a2, a3, a4);
  if (v10 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(char *, _DWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11TrustedHTMLENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13TrustedScriptENSA_ISF_EENSC_ISF_EEEENS7_INS8_16TrustedScriptURLENSA_ISJ_EENSC_ISJ_EEEENS6_10AtomStringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSQ_EEEDcOSR_DpOT0____fmatrix[v10])(&v11, &v9);
  return result;
}

uint64_t WebCore::DOMEditor::RemoveAttributeAction::redo@<X0>(WebCore::Element **this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = WebCore::Element::removeAttribute(this[2], (const WTF::AtomString *)(this + 3));
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  return result;
}

void WebCore::DOMEditor::SetOuterHTMLAction::~SetOuterHTMLAction(WebCore::DOMEditor::SetOuterHTMLAction *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::DOMEditor::SetOuterHTMLAction::~SetOuterHTMLAction(this, a2);
  WTF::fastFree(v2, v3);
}

{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;

  v3 = *((unsigned int *)this + 17);
  if ((_DWORD)v3)
  {
    v4 = (uint64_t *)*((_QWORD *)this + 7);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 7);
  if (v7)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v8)
  {
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v8, a2);
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v11)
  {
    if (*(_DWORD *)(v11 + 24) == 2)
    {
      if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v11, a2);
    }
    else
    {
      *(_DWORD *)(v11 + 24) -= 2;
    }
  }
  v12 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v12)
  {
    if (*(_DWORD *)(v12 + 24) == 2)
    {
      if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v12, a2);
    }
    else
    {
      *(_DWORD *)(v12 + 24) -= 2;
    }
  }
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E33EE390;
  *((_QWORD *)this + 1) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v13 -= 2;
  }
}

uint64_t WebCore::DOMEditor::SetOuterHTMLAction::perform@<X0>(WebCore::DOMEditor::SetOuterHTMLAction *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF *v8;
  WTF *v9;
  uint64_t v10;
  WebCore::DocumentFragment *v11;
  _QWORD *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  __n128 v15;
  WebCore *v16;
  uint64_t *v17;
  uint64_t v18;
  char **v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  uint64_t v25;
  WTF *v26;
  WTF *v27;
  WTF *v28;
  void *v29;
  WTF *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  WTF *v36;
  WTF *v37;
  WTF *v38;
  void *v39;
  uint64_t i;
  __int16 v41;
  uint64_t v42;
  void *v43;
  char *v44;
  uint64_t v45;
  WTF *v46;
  WTF *v47;
  WTF *v48;
  void *v49;
  uint64_t v50;
  const WTF::StringImpl *v51;
  void *v52;
  char *v53;
  uint64_t v54;
  WTF *v55;
  WTF *v56;
  WTF *v57;
  void *v58;
  WTF::StringImpl *v59;
  uint64_t v60;
  WTF *v61;
  WTF *v62;
  WTF **v63;
  uint64_t v64;
  WebCore::DOMPatchSupport::Digest **v65;
  WebCore::DOMPatchSupport::Digest *v66;
  WTF *v67;
  void *v68;
  WTF *v69;
  uint64_t v70;
  WebCore::DOMPatchSupport::Digest **v71;
  WebCore::DOMPatchSupport::Digest *v72;
  WTF *v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  WTF::StringImpl **v77;
  WTF::StringImpl *v78;
  uint64_t v79;
  WTF::StringImpl *v80;
  WTF *v81;
  uint64_t v82;
  WTF::StringImpl *v84;
  WTF *v85;
  uint64_t v86;
  uint64_t v87;
  WebCore::DOMEditor::SetOuterHTMLAction *v88;
  uint64_t v89;
  WebCore::Node *v90;
  const WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  WebCore::DocumentFragment *v93;
  WTF::StringImpl **v94;
  WTF *v95;
  WTF::StringImpl *v96;
  unsigned int v97;
  WTF *v98;
  WTF::StringImpl *v99;
  char v100;
  WTF *v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  WebCore::Node *v105;

  v4 = *((_QWORD *)this + 2);
  v98 = 0;
  v99 = 0;
  v95 = 0;
  v96 = 0;
  WebCore::serializeFragment(v4, 0, 0, 0, 0, 0, (uint64_t *)&v98, (uint64_t *)&v95, &v92);
  v6 = v92;
  v92 = 0;
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
    {
      WTF::StringImpl::destroy(v7, v5);
      v84 = v92;
      v92 = 0;
      if (v84)
      {
        if (*(_DWORD *)v84 == 2)
          WTF::StringImpl::destroy(v84, v5);
        else
          *(_DWORD *)v84 -= 2;
      }
    }
    else
    {
      *(_DWORD *)v7 -= 2;
      v92 = 0;
    }
  }
  if (HIDWORD(v96))
    WTF::VectorDestructor<true,WebCore::MarkupExclusionRule>::destruct(v95, (WTF *)((char *)v95 + 24 * HIDWORD(v96)));
  v8 = v95;
  if (v95)
  {
    v95 = 0;
    LODWORD(v96) = 0;
    WTF::fastFree(v8, v5);
  }
  if (HIDWORD(v99))
  {
    v85 = v98;
    v86 = 8 * HIDWORD(v99);
    do
    {
      v87 = *(_QWORD *)v85;
      *(_QWORD *)v85 = 0;
      if (v87)
      {
        if (*(_DWORD *)(v87 + 24) == 2)
        {
          if ((*(_WORD *)(v87 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v87, v5);
        }
        else
        {
          *(_DWORD *)(v87 + 24) -= 2;
        }
      }
      v85 = (WTF *)((char *)v85 + 8);
      v86 -= 8;
    }
    while (v86);
  }
  v9 = v98;
  if (v98)
  {
    v98 = 0;
    LODWORD(v99) = 0;
    WTF::fastFree(v9, v5);
  }
  v10 = *((_QWORD *)this + 2);
  v11 = *(WebCore::DocumentFragment **)(*(_QWORD *)(v10 + 40) + 8);
  v92 = (WebCore::DOMEditor::SetOuterHTMLAction *)((char *)this + 80);
  v93 = v11;
  v94 = 0;
  v12 = (_QWORD *)((char *)this + 32);
  if ((*(_WORD *)(v10 + 28) & 0xF000) == 0x9000
    || (v13 = *(_QWORD *)(v10 + 32)) != 0 && (*(_WORD *)(v13 + 28) & 0xF000) == 0x9000)
  {
    WebCore::DOMPatchSupport::patchDocument((WebCore::DOMPatchSupport *)&v92, (unsigned int **)this + 4);
    v95 = 0;
    v97 = 0;
    goto LABEL_101;
  }
  v89 = *(_QWORD *)(v10 + 48);
  v15.n128_f64[0] = WebCore::DocumentFragment::create(v11, (uint64_t *)&v105);
  v16 = *(WebCore **)(v10 + 32);
  if ((*((_WORD *)v93 + 1679) & 1) != 0)
  {
    if (!v16 || (*((_WORD *)v16 + 14) & 8) == 0)
      v16 = (WebCore *)*((_QWORD *)v93 + 159);
    WebCore::DocumentFragment::parseHTML((uint64_t)v105, (unsigned int **)this + 4, (uint64_t)v16, 1);
  }
  else
  {
    if (!v16 || (*((_WORD *)v16 + 14) & 8) == 0)
      v16 = (WebCore *)*((_QWORD *)v93 + 159);
    WebCore::XMLDocumentParser::parseDocumentFragment((WebCore::DOMEditor::SetOuterHTMLAction *)((char *)this + 32), (uint64_t)v105, v16, (WTF::String *)1, v15);
  }
  v17 = *(uint64_t **)(v10 + 32);
  v103 = 0;
  v104 = 0;
  v91 = (const WTF::StringImpl *)v17;
  v20 = v17[10];
  v19 = (char **)(v17 + 10);
  v18 = v20;
  v21 = 0;
  if (v20)
  {
    LODWORD(v22) = 0;
    do
    {
      WebCore::DOMPatchSupport::createDigest((WTF::StringImpl ***)&v98, v18, 0);
      if ((_DWORD)v22 == (_DWORD)v104)
      {
        v24 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(&v103, v22 + 1, (unint64_t)&v98);
        v22 = HIDWORD(v104);
        v21 = v103;
        v25 = *(_QWORD *)v24;
        *(_QWORD *)v24 = 0;
        *(_QWORD *)&v21[8 * v22] = v25;
      }
      else
      {
        v26 = v98;
        v98 = 0;
        *(_QWORD *)&v21[8 * v22] = v26;
      }
      LODWORD(v22) = v22 + 1;
      HIDWORD(v104) = v22;
      v27 = v98;
      v98 = 0;
      if (v27)
      {
        WebCore::DOMPatchSupport::Digest::~Digest(v27, v23);
        WTF::fastFree(v28, v29);
      }
      v18 = *(_QWORD *)(v18 + 56);
    }
    while (v18);
    v21 = *v19;
    v101 = 0;
    v102 = 0;
    if (v21 == (char *)v10)
    {
      v30 = 0;
      LODWORD(v31) = 0;
      goto LABEL_41;
    }
  }
  else
  {
    v101 = 0;
    v102 = 0;
  }
  do
  {
    WebCore::DOMPatchSupport::createDigest((WTF::StringImpl ***)&v98, (uint64_t)v21, 0);
    LODWORD(v33) = HIDWORD(v102);
    if (HIDWORD(v102) == (_DWORD)v102)
    {
      v34 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v101, HIDWORD(v102) + 1, (unint64_t)&v98);
      v33 = HIDWORD(v102);
      v30 = v101;
      v35 = *(_QWORD *)v34;
      *(_QWORD *)v34 = 0;
      *((_QWORD *)v30 + v33) = v35;
    }
    else
    {
      v30 = v101;
      v36 = v98;
      v98 = 0;
      *((_QWORD *)v101 + HIDWORD(v102)) = v36;
    }
    LODWORD(v31) = v33 + 1;
    HIDWORD(v102) = v33 + 1;
    v37 = v98;
    v98 = 0;
    if (v37)
    {
      WebCore::DOMPatchSupport::Digest::~Digest(v37, v32);
      WTF::fastFree(v38, v39);
    }
    v21 = (char *)*((_QWORD *)v21 + 7);
  }
  while (v21 != (char *)v10);
LABEL_41:
  v90 = v105;
  for (i = *((_QWORD *)v105 + 10); i; i = *(_QWORD *)(i + 56))
  {
    v41 = *(_WORD *)(i + 28);
    if ((v41 & 0x10) == 0)
    {
LABEL_49:
      WebCore::DOMPatchSupport::createDigest((WTF::StringImpl ***)&v98, i, (uint64_t *)&v94);
      if ((_DWORD)v31 == (_DWORD)v102)
      {
        v44 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v101, v31 + 1, (unint64_t)&v98);
        v31 = HIDWORD(v102);
        v30 = v101;
        v45 = *(_QWORD *)v44;
        *(_QWORD *)v44 = 0;
        *((_QWORD *)v30 + v31) = v45;
      }
      else
      {
        v46 = v98;
        v98 = 0;
        *((_QWORD *)v30 + v31) = v46;
      }
      LODWORD(v31) = v31 + 1;
      HIDWORD(v102) = v31;
      v47 = v98;
      v98 = 0;
      if (v47)
      {
        WebCore::DOMPatchSupport::Digest::~Digest(v47, v43);
        WTF::fastFree(v48, v49);
      }
      continue;
    }
    v42 = *(_QWORD *)(*(_QWORD *)(i + 96) + 24);
    if (v42 == *(_QWORD *)(WebCore::HTMLNames::headTag + 24) && ((v41 & 4) == 0 || !*(_QWORD *)(i + 80)))
    {
      if (!*v12 || WTF::StringImpl::findIgnoringASCIICase() == -1)
        continue;
      v41 = *(_WORD *)(i + 28);
      if ((v41 & 0x10) == 0)
        goto LABEL_49;
      v42 = *(_QWORD *)(*(_QWORD *)(i + 96) + 24);
    }
    if (v42 != *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24)
      || (v41 & 4) != 0 && *(_QWORD *)(i + 80)
      || *v12 && WTF::StringImpl::findIgnoringASCIICase() != -1)
    {
      goto LABEL_49;
    }
  }
  v50 = *(_QWORD *)(v10 + 56);
  if (v50)
  {
    v51 = v91;
    do
    {
      WebCore::DOMPatchSupport::createDigest((WTF::StringImpl ***)&v98, v50, 0);
      if ((_DWORD)v31 == (_DWORD)v102)
      {
        v53 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v101, v31 + 1, (unint64_t)&v98);
        v31 = HIDWORD(v102);
        v30 = v101;
        v54 = *(_QWORD *)v53;
        *(_QWORD *)v53 = 0;
        *((_QWORD *)v30 + v31) = v54;
      }
      else
      {
        v55 = v98;
        v98 = 0;
        *((_QWORD *)v30 + v31) = v55;
      }
      LODWORD(v31) = v31 + 1;
      HIDWORD(v102) = v31;
      v56 = v98;
      v98 = 0;
      if (v56)
      {
        WebCore::DOMPatchSupport::Digest::~Digest(v56, v52);
        WTF::fastFree(v57, v58);
      }
      v50 = *(_QWORD *)(v50 + 56);
    }
    while (v50);
  }
  else
  {
    v51 = v91;
  }
  WebCore::DOMPatchSupport::innerPatchChildren((uint64_t)&v98, (uint64_t **)&v92, v51, (uint64_t *)&v103, (uint64_t *)&v101);
  if (!v100)
    goto LABEL_82;
  if (v99)
  {
    if (*(_DWORD *)v99 == 2)
      WTF::StringImpl::destroy(v99, v14);
    else
      *(_DWORD *)v99 -= 2;
  }
  v59 = v92;
  *((_DWORD *)v90 + 6) += 2;
  v60 = *(_QWORD *)v59;
  v61 = (WTF *)WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v61 = off_1E33EDD80;
  *((_QWORD *)v61 + 1) = 0;
  *((_DWORD *)v51 + 6) += 2;
  *((_QWORD *)v61 + 2) = v51;
  *((_QWORD *)v61 + 3) = v90;
  *(_DWORD *)(v10 + 24) += 2;
  *((_QWORD *)v61 + 4) = v10;
  v95 = v61;
  WebCore::InspectorHistory::perform(v60, (char *)&v95, (uint64_t)&v98);
  v62 = v95;
  v95 = 0;
  if (v62)
    (*(void (**)(WTF *))(*(_QWORD *)v62 + 8))(v62);
  if (!v100)
  {
LABEL_82:
    v63 = (WTF **)((v89 & 0xFFFFFFFFFFFFLL) + 56);
    if ((v89 & 0xFFFFFFFFFFFFLL) == 0)
      v63 = (WTF **)v19;
    v95 = *v63;
    v97 = 0;
    if (!(_DWORD)v31)
      goto LABEL_89;
    goto LABEL_85;
  }
  LOBYTE(v95) = (_BYTE)v98;
  v96 = v99;
  v97 = 1;
  if ((_DWORD)v31)
  {
LABEL_85:
    v64 = 8 * v31;
    v65 = (WebCore::DOMPatchSupport::Digest **)v30;
    do
    {
      v66 = *v65;
      *v65 = 0;
      if (v66)
      {
        WebCore::DOMPatchSupport::Digest::~Digest(v66, v14);
        WTF::fastFree(v67, v68);
      }
      ++v65;
      v64 -= 8;
    }
    while (v64);
  }
LABEL_89:
  if (v30)
  {
    v101 = 0;
    LODWORD(v102) = 0;
    WTF::fastFree(v30, v14);
  }
  v69 = (WTF *)v103;
  if (HIDWORD(v104))
  {
    v70 = 8 * HIDWORD(v104);
    v71 = (WebCore::DOMPatchSupport::Digest **)v103;
    do
    {
      v72 = *v71;
      *v71 = 0;
      if (v72)
      {
        WebCore::DOMPatchSupport::Digest::~Digest(v72, v14);
        WTF::fastFree(v73, v74);
      }
      ++v71;
      v70 -= 8;
    }
    while (v70);
  }
  if (v69)
    WTF::fastFree(v69, v14);
  if (v105)
  {
    if (*((_DWORD *)v105 + 6) == 2)
    {
      if ((*((_WORD *)v105 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v105, v14);
    }
    else
    {
      *((_DWORD *)v105 + 6) -= 2;
    }
  }
LABEL_101:
  v75 = (uint64_t)v94;
  if (v94)
  {
    v76 = *((unsigned int *)v94 - 1);
    if ((_DWORD)v76)
    {
      v77 = v94;
      do
      {
        v78 = *v77;
        if (*v77 != (WTF::StringImpl *)-1)
        {
          *v77 = 0;
          if (v78)
          {
            if (*(_DWORD *)v78 == 2)
              WTF::StringImpl::destroy(v78, v14);
            else
              *(_DWORD *)v78 -= 2;
          }
        }
        v77 += 2;
        --v76;
      }
      while (v76);
    }
    WTF::fastFree((WTF *)(v75 - 16), v14);
  }
  v79 = v97;
  if (!v97)
  {
    v81 = v95;
    if (v95)
      *((_DWORD *)v95 + 6) += 2;
    v82 = *((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = v81;
    if (v82)
    {
      if (*(_DWORD *)(v82 + 24) == 2)
      {
        if ((*(_WORD *)(v82 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v82, v14);
      }
      else
      {
        *(_DWORD *)(v82 + 24) -= 2;
      }
    }
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    return off_1E33EDCC0[v79](&v98, &v95);
  }
  if (v97 == 1)
  {
    v80 = v96;
    v96 = 0;
    *(_BYTE *)a2 = (_BYTE)v95;
    a2[1] = v80;
    *((_BYTE *)a2 + 16) = 1;
    return off_1E33EDCC0[v79](&v98, &v95);
  }
  v88 = (WebCore::DOMEditor::SetOuterHTMLAction *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::DOMEditor::SetOuterHTMLAction::undo(v88);
}

uint64_t *WebCore::DOMEditor::SetOuterHTMLAction::undo@<X0>(WebCore::DOMEditor::SetOuterHTMLAction *this@<X0>, _QWORD *a2@<X8>)
{
  return WebCore::InspectorHistory::undo((uint64_t *)this + 7, a2);
}

uint64_t *WebCore::DOMEditor::SetOuterHTMLAction::redo@<X0>(WebCore::DOMEditor::SetOuterHTMLAction *this@<X0>, _QWORD *a2@<X8>)
{
  return WebCore::InspectorHistory::redo((uint64_t *)this + 7, a2);
}

void WebCore::DOMEditor::InsertAdjacentHTMLAction::~InsertAdjacentHTMLAction(WebCore::DOMEditor::InsertAdjacentHTMLAction *this, WTF::StringImpl *a2)
{
  WTF *v2;
  void *v3;

  WebCore::DOMEditor::InsertAdjacentHTMLAction::~InsertAdjacentHTMLAction(this, a2);
  WTF::fastFree(v2, v3);
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *((unsigned int *)this + 9);
  if ((_DWORD)v5)
  {
    v10 = (uint64_t *)*((_QWORD *)this + 3);
    v11 = 8 * v5;
    do
    {
      v12 = *v10;
      *v10 = 0;
      if (v12)
      {
        if (*(_DWORD *)(v12 + 24) == 2)
        {
          if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v12, a2);
        }
        else
        {
          *(_DWORD *)(v12 + 24) -= 2;
        }
      }
      ++v10;
      v11 -= 8;
    }
    while (v11);
  }
  v6 = (WTF *)*((_QWORD *)this + 3);
  if ((WebCore::DOMEditor::InsertAdjacentHTMLAction *)((char *)this + 40) != v6 && v6 != 0)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v6, a2);
  }
  v8 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v8)
  {
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v8, a2);
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E33EE390;
  *((_QWORD *)this + 1) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
}

uint64_t WebCore::DOMEditor::InsertAdjacentHTMLAction::perform@<X0>(WebCore::DOMEditor::InsertAdjacentHTMLAction *this@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t result;
  char v5;
  _BYTE v6[8];
  uint64_t v7;
  char v8;

  result = WebCore::Element::insertAdjacentHTML(*((_QWORD *)this + 2), (uint64_t *)this + 16, (unsigned int **)this + 17, (uint64_t)this + 24, (uint64_t)v6, a3);
  if (v8)
  {
    v5 = v6[0];
    *(_QWORD *)(a2 + 8) = v7;
    *(_BYTE *)a2 = v5;
    *(_BYTE *)(a2 + 16) = 1;
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  return result;
}

uint64_t WebCore::DOMEditor::InsertAdjacentHTMLAction::undo@<X0>(uint64_t this@<X0>, WebCore::Node *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  WebCore::Node **v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  __int16 v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;

  v3 = this;
  v5 = *(unsigned int *)(this + 36);
  if ((_DWORD)v5)
  {
    v6 = *(WebCore::Node ***)(this + 24);
    v7 = 8 * v5;
    do
    {
      a2 = *v6;
      v8 = *((_QWORD *)*v6 + 4);
      if (v8)
      {
        *(_DWORD *)(v8 + 24) += 2;
        this = (uint64_t)WebCore::ContainerNode::removeChild((WebCore::ContainerNode *)v8, a2, &v15);
        if (*(_DWORD *)(v8 + 24) == 2)
        {
          v9 = *(_WORD *)(v8 + 30);
          if ((v9 & 0x400) == 0)
          {
            v10 = *(_WORD *)(v8 + 28);
            if ((v10 & 0xF000) == 0x9000)
            {
              this = (uint64_t)WebCore::Document::removedLastRef((WebCore::Document *)v8, a2);
            }
            else
            {
              if ((v10 & 0x20) != 0)
              {
                (*(void (**)(_QWORD))(**(_QWORD **)(v8 + 160) + 16))(*(_QWORD *)(v8 + 160));
                v9 = *(_WORD *)(v8 + 30);
              }
              *(_WORD *)(v8 + 30) = v9 | 0x400;
              this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 72))(v8);
            }
          }
        }
        else
        {
          *(_DWORD *)(v8 + 24) -= 2;
        }
      }
      else
      {
        v15 = 0;
        v16 = 0;
        v17 = 0;
      }
      if ((_BYTE)v17)
      {
        this = (uint64_t)v16;
        v16 = 0;
        if (this)
        {
          if (*(_DWORD *)this == 2)
            this = WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
          else
            *(_DWORD *)this -= 2;
        }
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  if (*(_DWORD *)(v3 + 32))
  {
    v11 = *(unsigned int *)(v3 + 36);
    v12 = *(WTF **)(v3 + 24);
    if ((_DWORD)v11)
    {
      v13 = 8 * v11;
      do
      {
        this = *(_QWORD *)v12;
        *(_QWORD *)v12 = 0;
        if (this)
        {
          if (*(_DWORD *)(this + 24) == 2)
          {
            if ((*(_WORD *)(this + 30) & 0x400) == 0)
              this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)this, a2);
          }
          else
          {
            *(_DWORD *)(this + 24) -= 2;
          }
        }
        v12 = (WTF *)((char *)v12 + 8);
        v13 -= 8;
      }
      while (v13);
      *(_DWORD *)(v3 + 36) = 0;
      v12 = *(WTF **)(v3 + 24);
    }
    if ((WTF *)(v3 + 40) == v12 || v12 == 0)
    {
      if (!v12)
      {
LABEL_36:
        *(_QWORD *)(v3 + 24) = v3 + 40;
        *(_DWORD *)(v3 + 32) = 11;
      }
    }
    else
    {
      *(_QWORD *)(v3 + 24) = 0;
      *(_DWORD *)(v3 + 32) = 0;
      this = WTF::fastFree(v12, a2);
      if (!*(_QWORD *)(v3 + 24))
        goto LABEL_36;
    }
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  return this;
}

uint64_t WebCore::DOMEditor::InsertAdjacentHTMLAction::redo@<X0>(WebCore::DOMEditor::InsertAdjacentHTMLAction *this@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t result;
  char v5;
  _BYTE v6[8];
  uint64_t v7;
  char v8;

  result = WebCore::Element::insertAdjacentHTML(*((_QWORD *)this + 2), (uint64_t *)this + 16, (unsigned int **)this + 17, (uint64_t)this + 24, (uint64_t)v6, a3);
  if (v8)
  {
    v5 = v6[0];
    *(_QWORD *)(a2 + 8) = v7;
    *(_BYTE *)a2 = v5;
    *(_BYTE *)(a2 + 16) = 1;
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  return result;
}

void WebCore::DOMEditor::ReplaceWholeTextAction::~ReplaceWholeTextAction(WebCore::DOMEditor::ReplaceWholeTextAction *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E33EE390;
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E33EE390;
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  WTF::fastFree(this, a2);
}

unsigned int *WebCore::DOMEditor::ReplaceWholeTextAction::perform@<X0>(WebCore::Text **this@<X0>, WTF::StringImpl *a2@<X1>, _QWORD *a3@<X8>)
{
  WTF::StringImpl *v5;
  const WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  int v9;
  unsigned int *result;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  WebCore::Text::wholeText(this[2], a2, &v12);
  v7 = v12;
  v12 = 0;
  v8 = this[4];
  this[4] = v7;
  if (v8)
  {
    v9 = *(_DWORD *)v8 - 2;
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::destroy(v8, v5);
      v8 = v12;
      v12 = 0;
      if (!v8)
        goto LABEL_4;
      v9 = *(_DWORD *)v8 - 2;
      if (*(_DWORD *)v8 == 2)
      {
        WTF::StringImpl::destroy(v8, v11);
        goto LABEL_4;
      }
    }
    *(_DWORD *)v8 = v9;
  }
LABEL_4:
  result = WebCore::Text::replaceWholeText(this[2], (const WTF::String *)(this + 3), v6);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  return result;
}

unsigned int *WebCore::DOMEditor::ReplaceWholeTextAction::undo@<X0>(WebCore::Text **this@<X0>, const WTF::StringImpl *a2@<X2>, _QWORD *a3@<X8>)
{
  unsigned int *result;

  result = WebCore::Text::replaceWholeText(this[2], (const WTF::String *)(this + 4), a2);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  return result;
}

unsigned int *WebCore::DOMEditor::ReplaceWholeTextAction::redo@<X0>(WebCore::Text **this@<X0>, const WTF::StringImpl *a2@<X2>, _QWORD *a3@<X8>)
{
  unsigned int *result;

  result = WebCore::Text::replaceWholeText(this[2], (const WTF::String *)(this + 3), a2);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  return result;
}

void WebCore::DOMEditor::ReplaceChildNodeAction::~ReplaceChildNodeAction(WebCore::DOMEditor::ReplaceChildNodeAction *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::DOMEditor::RemoveChildAction::~RemoveChildAction(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::DOMEditor::ReplaceChildNodeAction::perform@<X0>(WebCore::ContainerNode **this@<X0>, uint64_t a2@<X8>)
{
  return WebCore::ContainerNode::replaceChild(this[2], this[3], this[4], a2);
}

uint64_t WebCore::DOMEditor::ReplaceChildNodeAction::undo@<X0>(WebCore::ContainerNode **this@<X0>, uint64_t a2@<X8>)
{
  return WebCore::ContainerNode::replaceChild(this[2], this[4], this[3], a2);
}

uint64_t WebCore::DOMEditor::ReplaceChildNodeAction::redo@<X0>(WebCore::ContainerNode **this@<X0>, uint64_t a2@<X8>)
{
  return WebCore::ContainerNode::replaceChild(this[2], this[3], this[4], a2);
}

void WebCore::DOMEditor::SetNodeValueAction::~SetNodeValueAction(WebCore::DOMEditor::SetNodeValueAction *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E33EE390;
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E33EE390;
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  WTF::fastFree(this, a2);
}

WTF::StringImpl *WebCore::DOMEditor::SetNodeValueAction::perform@<X0>(WebCore::DOMEditor::SetNodeValueAction *this@<X0>, _QWORD *a2@<X8>)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  int v7;
  WTF::StringImpl *result;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  char v13;

  (*(void (**)(WTF::StringImpl **__return_ptr))(**((_QWORD **)this + 2) + 112))(&v11);
  v5 = v11;
  v11 = 0;
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v5;
  if (v6)
  {
    v7 = *(_DWORD *)v6 - 2;
    if (*(_DWORD *)v6 == 2)
    {
      WTF::StringImpl::destroy(v6, v4);
      v6 = v11;
      v11 = 0;
      if (!v6)
        goto LABEL_4;
      v7 = *(_DWORD *)v6 - 2;
      if (*(_DWORD *)v6 == 2)
      {
        WTF::StringImpl::destroy(v6, v10);
        goto LABEL_4;
      }
    }
    *(_DWORD *)v6 = v7;
  }
LABEL_4:
  result = (WTF::StringImpl *)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr, _QWORD, char *))(**((_QWORD **)this + 2) + 120))(&v11, *((_QWORD *)this + 2), (char *)this + 24);
  if (v13)
  {
    result = v12;
    v12 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
      else
        *(_DWORD *)result -= 2;
    }
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

WTF::StringImpl *WebCore::DOMEditor::SetNodeValueAction::undo@<X0>(WebCore::DOMEditor::SetNodeValueAction *this@<X0>, _QWORD *a2@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  char v7;

  result = (WTF::StringImpl *)(*(_QWORD *(**)(uint64_t *__return_ptr, _QWORD, char *))(**((_QWORD **)this + 2)
                                                                                               + 120))(&v5, *((_QWORD *)this + 2), (char *)this + 32);
  if (v7)
  {
    result = v6;
    v6 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
      else
        *(_DWORD *)result -= 2;
    }
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

WTF::StringImpl *WebCore::DOMEditor::SetNodeValueAction::redo@<X0>(WebCore::DOMEditor::SetNodeValueAction *this@<X0>, _QWORD *a2@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  char v7;

  result = (WTF::StringImpl *)(*(_QWORD *(**)(uint64_t *__return_ptr, _QWORD, char *))(**((_QWORD **)this + 2)
                                                                                               + 120))(&v5, *((_QWORD *)this + 2), (char *)this + 24);
  if (v7)
  {
    result = v6;
    v6 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
      else
        *(_DWORD *)result -= 2;
    }
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

void WebCore::DOMPatchSupport::Digest::~Digest(WebCore::DOMPatchSupport::Digest *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  WebCore::DOMPatchSupport::Digest *v6;
  WTF *v7;
  void *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  v3 = *((unsigned int *)this + 9);
  v4 = (WTF *)*((_QWORD *)this + 3);
  if ((_DWORD)v3)
  {
    v5 = 8 * v3;
    do
    {
      v6 = *(WebCore::DOMPatchSupport::Digest **)v4;
      *(_QWORD *)v4 = 0;
      if (v6)
      {
        WebCore::DOMPatchSupport::Digest::~Digest(v6);
        WTF::fastFree(v7, v8);
      }
      v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
    v4 = (WTF *)*((_QWORD *)this + 3);
  }
  if (v4)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v10 -= 2;
  }
}

uint64_t WebCore::CachedSVGDocumentClient::resourceClientType(WebCore::CachedSVGDocumentClient *this)
{
  return 4;
}

WebCore::CanvasGradient *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_13CanvasPatternENSC_ISH_EENSE_ISH_EEEENS9_INSA_17HTMLCanvasElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_16HTMLImageElementENSC_ISP_EENSE_ISP_EEEENS9_INSA_16HTMLVideoElementENSC_IST_EENSE_IST_EEEENS9_INSA_9ImageDataENSC_ISX_EENSE_ISX_EEEENS9_INSA_11ImageBitmapENSC_IS11_EENSE_IS11_EEEENS9_IN9Inspector15ScriptCallStackENSC_IS16_EENSE_IS16_EEEENS9_INS15_15AsyncStackTraceENSC_IS1A_EENSE_IS1A_EEEENS9_INSA_18CSSStyleImageValueENSC_IS1E_EENSE_IS1E_EEEENS15_15ScriptCallFrameENS9_INSA_15OffscreenCanvasENSC_IS1J_EENSE_IS1J_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS1P_1EJSG_SK_SO_SS_SW_S10_S14_S19_S1D_S1H_S1I_S1M_S1N_EEEEEEDcS1R_DpT0_(uint64_t a1, WebCore::CanvasGradient **a2)
{
  WebCore::CanvasGradient *result;
  WTF *v3;
  void *v4;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::CanvasGradient::~CanvasGradient(result, a2);
      return (WebCore::CanvasGradient *)WTF::fastFree(v3, v4);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_13CanvasPatternENSC_ISH_EENSE_ISH_EEEENS9_INSA_17HTMLCanvasElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_16HTMLImageElementENSC_ISP_EENSE_ISP_EEEENS9_INSA_16HTMLVideoElementENSC_IST_EENSE_IST_EEEENS9_INSA_9ImageDataENSC_ISX_EENSE_ISX_EEEENS9_INSA_11ImageBitmapENSC_IS11_EENSE_IS11_EEEENS9_IN9Inspector15ScriptCallStackENSC_IS16_EENSE_IS16_EEEENS9_INS15_15AsyncStackTraceENSC_IS1A_EENSE_IS1A_EEEENS9_INSA_18CSSStyleImageValueENSC_IS1E_EENSE_IS1E_EEEENS15_15ScriptCallFrameENS9_INSA_15OffscreenCanvasENSC_IS1J_EENSE_IS1J_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS1P_1EJSG_SK_SO_SS_SW_S10_S14_S19_S1D_S1H_S1I_S1M_S1N_EEEEEEDcS1R_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;

  v2 = *a2;
  *a2 = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = *((_QWORD *)v2 + 1);
      *((_QWORD *)v2 + 1) = 0;
      if (v3)
      {
        if (*(_DWORD *)v3 == 1)
        {
          if (*(_BYTE *)(v3 + 40))
          {
            v5 = *(unsigned int *)(v3 + 32);
            if ((_DWORD)v5 != -1)
              ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ImageBufferENSA_ISF_EENSC_ISF_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSQ_EEEDcOSR_DpOT0____fmatrix[v5])(&v7, v3 + 24);
            *(_DWORD *)(v3 + 32) = -1;
          }
          v6 = *(unsigned int *)(v3 + 16);
          if ((_DWORD)v6 != -1)
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ImageBufferENSA_ISF_EENSC_ISF_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSQ_EEEDcOSR_DpOT0____fmatrix[v6])(&v8, v3 + 8);
          *(_DWORD *)(v3 + 16) = -1;
          WTF::fastFree((WTF *)v3, a2);
        }
        else
        {
          --*(_DWORD *)v3;
        }
      }
      return WTF::fastFree(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_13CanvasPatternENSC_ISH_EENSE_ISH_EEEENS9_INSA_17HTMLCanvasElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_16HTMLImageElementENSC_ISP_EENSE_ISP_EEEENS9_INSA_16HTMLVideoElementENSC_IST_EENSE_IST_EEEENS9_INSA_9ImageDataENSC_ISX_EENSE_ISX_EEEENS9_INSA_11ImageBitmapENSC_IS11_EENSE_IS11_EEEENS9_IN9Inspector15ScriptCallStackENSC_IS16_EENSE_IS16_EEEENS9_INS15_15AsyncStackTraceENSC_IS1A_EENSE_IS1A_EEEENS9_INSA_18CSSStyleImageValueENSC_IS1E_EENSE_IS1E_EEEENS15_15ScriptCallFrameENS9_INSA_15OffscreenCanvasENSC_IS1J_EENSE_IS1J_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS1P_1EJSG_SK_SO_SS_SW_S10_S14_S19_S1D_S1H_S1I_S1M_S1N_EEEEEEDcS1R_DpT0_(uint64_t a1, unsigned int **a2)
{
  unsigned int *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_13CanvasPatternENSC_ISH_EENSE_ISH_EEEENS9_INSA_17HTMLCanvasElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_16HTMLImageElementENSC_ISP_EENSE_ISP_EEEENS9_INSA_16HTMLVideoElementENSC_IST_EENSE_IST_EEEENS9_INSA_9ImageDataENSC_ISX_EENSE_ISX_EEEENS9_INSA_11ImageBitmapENSC_IS11_EENSE_IS11_EEEENS9_IN9Inspector15ScriptCallStackENSC_IS16_EENSE_IS16_EEEENS9_INS15_15AsyncStackTraceENSC_IS1A_EENSE_IS1A_EEEENS9_INSA_18CSSStyleImageValueENSC_IS1E_EENSE_IS1E_EEEENS15_15ScriptCallFrameENS9_INSA_15OffscreenCanvasENSC_IS1J_EENSE_IS1J_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS1P_1EJSG_SK_SO_SS_SW_S10_S14_S19_S1D_S1H_S1I_S1M_S1N_EEEEEEDcS1R_DpT0_(uint64_t a1, unsigned int **a2)
{
  unsigned int *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_13CanvasPatternENSC_ISH_EENSE_ISH_EEEENS9_INSA_17HTMLCanvasElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_16HTMLImageElementENSC_ISP_EENSE_ISP_EEEENS9_INSA_16HTMLVideoElementENSC_IST_EENSE_IST_EEEENS9_INSA_9ImageDataENSC_ISX_EENSE_ISX_EEEENS9_INSA_11ImageBitmapENSC_IS11_EENSE_IS11_EEEENS9_IN9Inspector15ScriptCallStackENSC_IS16_EENSE_IS16_EEEENS9_INS15_15AsyncStackTraceENSC_IS1A_EENSE_IS1A_EEEENS9_INSA_18CSSStyleImageValueENSC_IS1E_EENSE_IS1E_EEEENS15_15ScriptCallFrameENS9_INSA_15OffscreenCanvasENSC_IS1J_EENSE_IS1J_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS1P_1EJSG_SK_SO_SS_SW_S10_S14_S19_S1D_S1H_S1I_S1M_S1N_EEEEEEDcS1R_DpT0_(uint64_t a1, unsigned int **a2)
{
  unsigned int *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_13CanvasPatternENSC_ISH_EENSE_ISH_EEEENS9_INSA_17HTMLCanvasElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_16HTMLImageElementENSC_ISP_EENSE_ISP_EEEENS9_INSA_16HTMLVideoElementENSC_IST_EENSE_IST_EEEENS9_INSA_9ImageDataENSC_ISX_EENSE_ISX_EEEENS9_INSA_11ImageBitmapENSC_IS11_EENSE_IS11_EEEENS9_IN9Inspector15ScriptCallStackENSC_IS16_EENSE_IS16_EEEENS9_INS15_15AsyncStackTraceENSC_IS1A_EENSE_IS1A_EEEENS9_INSA_18CSSStyleImageValueENSC_IS1E_EENSE_IS1E_EEEENS15_15ScriptCallFrameENS9_INSA_15OffscreenCanvasENSC_IS1J_EENSE_IS1J_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS1P_1EJSG_SK_SO_SS_SW_S10_S14_S19_S1D_S1H_S1I_S1M_S1N_EEEEEEDcS1R_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *v2;
  _DWORD *v3;

  v2 = *a2;
  *a2 = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = (_DWORD *)*((_QWORD *)v2 + 2);
      *((_QWORD *)v2 + 2) = 0;
      if (v3)
      {
        if (*v3 == 1)
          JSC::ArrayBufferView::operator delete();
        else
          --*v3;
      }
      WTF::fastFree(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_13CanvasPatternENSC_ISH_EENSE_ISH_EEEENS9_INSA_17HTMLCanvasElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_16HTMLImageElementENSC_ISP_EENSE_ISP_EEEENS9_INSA_16HTMLVideoElementENSC_IST_EENSE_IST_EEEENS9_INSA_9ImageDataENSC_ISX_EENSE_ISX_EEEENS9_INSA_11ImageBitmapENSC_IS11_EENSE_IS11_EEEENS9_IN9Inspector15ScriptCallStackENSC_IS16_EENSE_IS16_EEEENS9_INS15_15AsyncStackTraceENSC_IS1A_EENSE_IS1A_EEEENS9_INSA_18CSSStyleImageValueENSC_IS1E_EENSE_IS1E_EEEENS15_15ScriptCallFrameENS9_INSA_15OffscreenCanvasENSC_IS1J_EENSE_IS1J_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS1P_1EJSG_SK_SO_SS_SW_S10_S14_S19_S1D_S1H_S1I_S1M_S1N_EEEEEEDcS1R_DpT0_(uint64_t a1, bmalloc::api **a2)
{
  bmalloc::api *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t result;
  uint64_t v12;

  v2 = *a2;
  *a2 = 0;
  if (!v2)
    return result;
  if (*((_DWORD *)v2 + 2) != 1)
  {
    --*((_DWORD *)v2 + 2);
    return result;
  }
  v3 = *((_QWORD *)v2 + 2);
  *((_QWORD *)v2 + 2) = 0;
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (__ldaxr((unsigned __int8 *)v4))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v4))
    {
      goto LABEL_10;
    }
    MEMORY[0x19AEA534C](v4);
LABEL_10:
    v6 = *(_QWORD *)(v4 + 8);
    v7 = v6 - 1;
    *(_QWORD *)(v4 + 8) = v6 - 1;
    if (v6 == 1)
    {
      v12 = *(_QWORD *)(v4 + 16);
      v8 = *(_QWORD *)(v4 + 24);
      *(_QWORD *)(v4 + 24) = 0;
      v9 = v12 != 0;
    }
    else
    {
      v8 = 0;
      v9 = 1;
    }
    v10 = __ldxr((unsigned __int8 *)v4);
    if (v10 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v4))
      {
LABEL_17:
        if (!v7)
        {
          if (v8)
            (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
          if (!v9)
            WTF::fastFree((WTF *)v4, a2);
        }
        goto LABEL_22;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    goto LABEL_17;
  }
LABEL_22:
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)(*(_QWORD *)v2 + 8) = 3;
    *(_QWORD *)v2 = 0;
  }
  return bmalloc::api::isoDeallocate(v2, a2);
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_13CanvasPatternENSC_ISH_EENSE_ISH_EEEENS9_INSA_17HTMLCanvasElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_16HTMLImageElementENSC_ISP_EENSE_ISP_EEEENS9_INSA_16HTMLVideoElementENSC_IST_EENSE_IST_EEEENS9_INSA_9ImageDataENSC_ISX_EENSE_ISX_EEEENS9_INSA_11ImageBitmapENSC_IS11_EENSE_IS11_EEEENS9_IN9Inspector15ScriptCallStackENSC_IS16_EENSE_IS16_EEEENS9_INS15_15AsyncStackTraceENSC_IS1A_EENSE_IS1A_EEEENS9_INSA_18CSSStyleImageValueENSC_IS1E_EENSE_IS1E_EEEENS15_15ScriptCallFrameENS9_INSA_15OffscreenCanvasENSC_IS1J_EENSE_IS1J_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS1P_1EJSG_SK_SO_SS_SW_S10_S14_S19_S1D_S1H_S1I_S1M_S1N_EEEEEEDcS1R_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;
  WTF *v3;
  void *v4;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*result == 1)
    {
      v3 = (WTF *)MEMORY[0x19AEA6024]();
      return (_DWORD *)WTF::fastFree(v3, v4);
    }
    else
    {
      --*result;
    }
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_13CanvasPatternENSC_ISH_EENSE_ISH_EEEENS9_INSA_17HTMLCanvasElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_16HTMLImageElementENSC_ISP_EENSE_ISP_EEEENS9_INSA_16HTMLVideoElementENSC_IST_EENSE_IST_EEEENS9_INSA_9ImageDataENSC_ISX_EENSE_ISX_EEEENS9_INSA_11ImageBitmapENSC_IS11_EENSE_IS11_EEEENS9_IN9Inspector15ScriptCallStackENSC_IS16_EENSE_IS16_EEEENS9_INS15_15AsyncStackTraceENSC_IS1A_EENSE_IS1A_EEEENS9_INSA_18CSSStyleImageValueENSC_IS1E_EENSE_IS1E_EEEENS15_15ScriptCallFrameENS9_INSA_15OffscreenCanvasENSC_IS1J_EENSE_IS1J_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS1P_1EJSG_SK_SO_SS_SW_S10_S14_S19_S1D_S1H_S1I_S1M_S1N_EEEEEEDcS1R_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;
  WTF *v3;
  void *v4;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*result == 1)
    {
      v3 = (WTF *)MEMORY[0x19AEA5FF4]();
      return (_DWORD *)WTF::fastFree(v3, v4);
    }
    else
    {
      --*result;
    }
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_13CanvasPatternENSC_ISH_EENSE_ISH_EEEENS9_INSA_17HTMLCanvasElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_16HTMLImageElementENSC_ISP_EENSE_ISP_EEEENS9_INSA_16HTMLVideoElementENSC_IST_EENSE_IST_EEEENS9_INSA_9ImageDataENSC_ISX_EENSE_ISX_EEEENS9_INSA_11ImageBitmapENSC_IS11_EENSE_IS11_EEEENS9_IN9Inspector15ScriptCallStackENSC_IS16_EENSE_IS16_EEEENS9_INS15_15AsyncStackTraceENSC_IS1A_EENSE_IS1A_EEEENS9_INSA_18CSSStyleImageValueENSC_IS1E_EENSE_IS1E_EEEENS15_15ScriptCallFrameENS9_INSA_15OffscreenCanvasENSC_IS1J_EENSE_IS1J_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS1P_1EJSG_SK_SO_SS_SW_S10_S14_S19_S1D_S1H_S1I_S1M_S1N_EEEEEEDcS1R_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[2];
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm10EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_13CanvasPatternENSC_ISH_EENSE_ISH_EEEENS9_INSA_17HTMLCanvasElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_16HTMLImageElementENSC_ISP_EENSE_ISP_EEEENS9_INSA_16HTMLVideoElementENSC_IST_EENSE_IST_EEEENS9_INSA_9ImageDataENSC_ISX_EENSE_ISX_EEEENS9_INSA_11ImageBitmapENSC_IS11_EENSE_IS11_EEEENS9_IN9Inspector15ScriptCallStackENSC_IS16_EENSE_IS16_EEEENS9_INS15_15AsyncStackTraceENSC_IS1A_EENSE_IS1A_EEEENS9_INSA_18CSSStyleImageValueENSC_IS1E_EENSE_IS1E_EEEENS15_15ScriptCallFrameENS9_INSA_15OffscreenCanvasENSC_IS1J_EENSE_IS1J_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS1P_1EJSG_SK_SO_SS_SW_S10_S14_S19_S1D_S1H_S1I_S1M_S1N_EEEEEEDcS1R_DpT0_()
{
  JUMPOUT(0x19AEA6018);
}

WebCore::OffscreenCanvas *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm11EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_13CanvasPatternENSC_ISH_EENSE_ISH_EEEENS9_INSA_17HTMLCanvasElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_16HTMLImageElementENSC_ISP_EENSE_ISP_EEEENS9_INSA_16HTMLVideoElementENSC_IST_EENSE_IST_EEEENS9_INSA_9ImageDataENSC_ISX_EENSE_ISX_EEEENS9_INSA_11ImageBitmapENSC_IS11_EENSE_IS11_EEEENS9_IN9Inspector15ScriptCallStackENSC_IS16_EENSE_IS16_EEEENS9_INS15_15AsyncStackTraceENSC_IS1A_EENSE_IS1A_EEEENS9_INSA_18CSSStyleImageValueENSC_IS1E_EENSE_IS1E_EEEENS15_15ScriptCallFrameENS9_INSA_15OffscreenCanvasENSC_IS1J_EENSE_IS1J_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS1P_1EJSG_SK_SO_SS_SW_S10_S14_S19_S1D_S1H_S1I_S1M_S1N_EEEEEEDcS1R_DpT0_(uint64_t a1, WebCore::OffscreenCanvas **a2)
{
  WebCore::OffscreenCanvas *result;
  bmalloc::api *v3;
  void *v4;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 6) == 1)
    {
      WebCore::OffscreenCanvas::~OffscreenCanvas(result);
      return (WebCore::OffscreenCanvas *)bmalloc::api::isoDeallocate(v3, v4);
    }
    else
    {
      --*((_DWORD *)result + 6);
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm12EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_13CanvasPatternENSC_ISH_EENSE_ISH_EEEENS9_INSA_17HTMLCanvasElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_16HTMLImageElementENSC_ISP_EENSE_ISP_EEEENS9_INSA_16HTMLVideoElementENSC_IST_EENSE_IST_EEEENS9_INSA_9ImageDataENSC_ISX_EENSE_ISX_EEEENS9_INSA_11ImageBitmapENSC_IS11_EENSE_IS11_EEEENS9_IN9Inspector15ScriptCallStackENSC_IS16_EENSE_IS16_EEEENS9_INS15_15AsyncStackTraceENSC_IS1A_EENSE_IS1A_EEEENS9_INSA_18CSSStyleImageValueENSC_IS1E_EENSE_IS1E_EEEENS15_15ScriptCallFrameENS9_INSA_15OffscreenCanvasENSC_IS1J_EENSE_IS1J_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS1P_1EJSG_SK_SO_SS_SW_S10_S14_S19_S1D_S1H_S1I_S1M_S1N_EEEEEEDcS1R_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *Inspector::Protocol::Canvas::ContextAttributes::setAlpha(Inspector::Protocol::Canvas::ContextAttributes *this, WTF::JSONImpl::Value *a2)
{
  WTF::StringImpl *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  _DWORD *v9;
  WTF::StringImpl *result;
  _DWORD **v11;
  uint64_t v12;
  _DWORD *v13;
  WTF::StringImpl *v14;
  _DWORD *v15;
  _BYTE v16[24];

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(a2);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)this + 2, &v14, (const WTF::StringImpl *)&v15, (uint64_t)v16);
  if (v16[16])
  {
    v5 = (uint64_t *)((char *)this + 24);
    v6 = *((unsigned int *)this + 9);
    if ((_DWORD)v6 == *((_DWORD *)this + 8))
    {
      v11 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v5, v6 + 1, (unint64_t)&v14);
      v6 = *((unsigned int *)this + 9);
      v12 = *((_QWORD *)this + 3);
      v13 = *v11;
      if (*v11)
        *v13 += 2;
      *(_QWORD *)(v12 + 8 * v6) = v13;
    }
    else
    {
      v7 = *v5;
      v8 = v14;
      if (v14)
        *(_DWORD *)v14 += 2;
      *(_QWORD *)(v7 + 8 * v6) = v8;
    }
    *((_DWORD *)this + 9) = v6 + 1;
  }
  v9 = v15;
  v15 = 0;
  if (v9)
  {
    if (*v9 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v9;
  }
  result = v14;
  v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *Inspector::Protocol::Canvas::ContextAttributes::setPowerPreference(Inspector::Protocol::Canvas::ContextAttributes *this, const WTF::String *a2)
{
  const WTF::String *v4;
  WTF::StringImpl *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  _DWORD *v10;
  WTF::StringImpl *result;
  _DWORD **v12;
  uint64_t v13;
  _DWORD *v14;
  WTF::StringImpl *v15;
  _DWORD *v16;
  _BYTE v17[24];

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(a2, v4);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)this + 2, &v15, (const WTF::StringImpl *)&v16, (uint64_t)v17);
  if (v17[16])
  {
    v6 = (uint64_t *)((char *)this + 24);
    v7 = *((unsigned int *)this + 9);
    if ((_DWORD)v7 == *((_DWORD *)this + 8))
    {
      v12 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v6, v7 + 1, (unint64_t)&v15);
      v7 = *((unsigned int *)this + 9);
      v13 = *((_QWORD *)this + 3);
      v14 = *v12;
      if (*v12)
        *v14 += 2;
      *(_QWORD *)(v13 + 8 * v7) = v14;
    }
    else
    {
      v8 = *v6;
      v9 = v15;
      if (v15)
        *(_DWORD *)v15 += 2;
      *(_QWORD *)(v8 + 8 * v7) = v9;
    }
    *((_DWORD *)this + 9) = v7 + 1;
  }
  v10 = v16;
  v16 = 0;
  if (v10)
  {
    if (*v10 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v10;
  }
  result = v15;
  v15 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringES9_EEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSB_1EJS9_S9_EEEEEEDcSD_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringES9_EEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSB_1EJS9_S9_EEEEEEDcSD_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_13CanvasPatternENSC_ISH_EENSE_ISH_EEEENS9_INSA_17HTMLCanvasElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_16HTMLImageElementENSC_ISP_EENSE_ISP_EEEENS9_INSA_16HTMLVideoElementENSC_IST_EENSE_IST_EEEENS9_INSA_9ImageDataENSC_ISX_EENSE_ISX_EEEENS9_INSA_11ImageBitmapENSC_IS11_EENSE_IS11_EEEENS9_IN9Inspector15ScriptCallStackENSC_IS16_EENSE_IS16_EEEENS9_INS15_15AsyncStackTraceENSC_IS1A_EENSE_IS1A_EEEENS9_INSA_18CSSStyleImageValueENSC_IS1E_EENSE_IS1E_EEEENS15_15ScriptCallFrameENS9_INSA_15OffscreenCanvasENSC_IS1J_EENSE_IS1J_EEEENS8_6StringEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS1O_LNS0_6_TraitE1EEEEEvRS1P_OT_EUlRS1X_OT0_E_JRNS0_6__baseILS1S_1EJSG_SK_SO_SS_SW_S10_S14_S19_S1D_S1H_S1I_S1M_S1N_EEERKS25_EEEDcS1X_DpT0_(uint64_t a1, _QWORD *a2, _DWORD **a3)
{
  _DWORD *v3;

  v3 = *a3;
  if (*a3)
    ++*v3;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_13CanvasPatternENSC_ISH_EENSE_ISH_EEEENS9_INSA_17HTMLCanvasElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_16HTMLImageElementENSC_ISP_EENSE_ISP_EEEENS9_INSA_16HTMLVideoElementENSC_IST_EENSE_IST_EEEENS9_INSA_9ImageDataENSC_ISX_EENSE_ISX_EEEENS9_INSA_11ImageBitmapENSC_IS11_EENSE_IS11_EEEENS9_IN9Inspector15ScriptCallStackENSC_IS16_EENSE_IS16_EEEENS9_INS15_15AsyncStackTraceENSC_IS1A_EENSE_IS1A_EEEENS9_INSA_18CSSStyleImageValueENSC_IS1E_EENSE_IS1E_EEEENS15_15ScriptCallFrameENS9_INSA_15OffscreenCanvasENSC_IS1J_EENSE_IS1J_EEEENS8_6StringEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS1O_LNS0_6_TraitE1EEEEEvRS1P_OT_EUlRS1X_OT0_E_JRNS0_6__baseILS1S_1EJSG_SK_SO_SS_SW_S10_S14_S19_S1D_S1H_S1I_S1M_S1N_EEERKS25_EEEDcS1X_DpT0_(uint64_t a1, _QWORD *a2, _DWORD **a3)
{
  _DWORD *v3;

  v3 = *a3;
  if (*a3)
    ++*v3;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_13CanvasPatternENSC_ISH_EENSE_ISH_EEEENS9_INSA_17HTMLCanvasElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_16HTMLImageElementENSC_ISP_EENSE_ISP_EEEENS9_INSA_16HTMLVideoElementENSC_IST_EENSE_IST_EEEENS9_INSA_9ImageDataENSC_ISX_EENSE_ISX_EEEENS9_INSA_11ImageBitmapENSC_IS11_EENSE_IS11_EEEENS9_IN9Inspector15ScriptCallStackENSC_IS16_EENSE_IS16_EEEENS9_INS15_15AsyncStackTraceENSC_IS1A_EENSE_IS1A_EEEENS9_INSA_18CSSStyleImageValueENSC_IS1E_EENSE_IS1E_EEEENS15_15ScriptCallFrameENS9_INSA_15OffscreenCanvasENSC_IS1J_EENSE_IS1J_EEEENS8_6StringEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS1O_LNS0_6_TraitE1EEEEEvRS1P_OT_EUlRS1X_OT0_E_JRNS0_6__baseILS1S_1EJSG_SK_SO_SS_SW_S10_S14_S19_S1D_S1H_S1I_S1M_S1N_EEERKS25_EEEDcS1X_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  if (*a3)
    *(_DWORD *)(v3 + 24) += 2;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_13CanvasPatternENSC_ISH_EENSE_ISH_EEEENS9_INSA_17HTMLCanvasElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_16HTMLImageElementENSC_ISP_EENSE_ISP_EEEENS9_INSA_16HTMLVideoElementENSC_IST_EENSE_IST_EEEENS9_INSA_9ImageDataENSC_ISX_EENSE_ISX_EEEENS9_INSA_11ImageBitmapENSC_IS11_EENSE_IS11_EEEENS9_IN9Inspector15ScriptCallStackENSC_IS16_EENSE_IS16_EEEENS9_INS15_15AsyncStackTraceENSC_IS1A_EENSE_IS1A_EEEENS9_INSA_18CSSStyleImageValueENSC_IS1E_EENSE_IS1E_EEEENS15_15ScriptCallFrameENS9_INSA_15OffscreenCanvasENSC_IS1J_EENSE_IS1J_EEEENS8_6StringEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS1O_LNS0_6_TraitE1EEEEEvRS1P_OT_EUlRS1X_OT0_E_JRNS0_6__baseILS1S_1EJSG_SK_SO_SS_SW_S10_S14_S19_S1D_S1H_S1I_S1M_S1N_EEERKS25_EEEDcS1X_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  if (*a3)
    *(_DWORD *)(v3 + 24) += 2;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_13CanvasPatternENSC_ISH_EENSE_ISH_EEEENS9_INSA_17HTMLCanvasElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_16HTMLImageElementENSC_ISP_EENSE_ISP_EEEENS9_INSA_16HTMLVideoElementENSC_IST_EENSE_IST_EEEENS9_INSA_9ImageDataENSC_ISX_EENSE_ISX_EEEENS9_INSA_11ImageBitmapENSC_IS11_EENSE_IS11_EEEENS9_IN9Inspector15ScriptCallStackENSC_IS16_EENSE_IS16_EEEENS9_INS15_15AsyncStackTraceENSC_IS1A_EENSE_IS1A_EEEENS9_INSA_18CSSStyleImageValueENSC_IS1E_EENSE_IS1E_EEEENS15_15ScriptCallFrameENS9_INSA_15OffscreenCanvasENSC_IS1J_EENSE_IS1J_EEEENS8_6StringEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS1O_LNS0_6_TraitE1EEEEEvRS1P_OT_EUlRS1X_OT0_E_JRNS0_6__baseILS1S_1EJSG_SK_SO_SS_SW_S10_S14_S19_S1D_S1H_S1I_S1M_S1N_EEERKS25_EEEDcS1X_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  if (*a3)
    *(_DWORD *)(v3 + 24) += 2;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_13CanvasPatternENSC_ISH_EENSE_ISH_EEEENS9_INSA_17HTMLCanvasElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_16HTMLImageElementENSC_ISP_EENSE_ISP_EEEENS9_INSA_16HTMLVideoElementENSC_IST_EENSE_IST_EEEENS9_INSA_9ImageDataENSC_ISX_EENSE_ISX_EEEENS9_INSA_11ImageBitmapENSC_IS11_EENSE_IS11_EEEENS9_IN9Inspector15ScriptCallStackENSC_IS16_EENSE_IS16_EEEENS9_INS15_15AsyncStackTraceENSC_IS1A_EENSE_IS1A_EEEENS9_INSA_18CSSStyleImageValueENSC_IS1E_EENSE_IS1E_EEEENS15_15ScriptCallFrameENS9_INSA_15OffscreenCanvasENSC_IS1J_EENSE_IS1J_EEEENS8_6StringEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS1O_LNS0_6_TraitE1EEEEEvRS1P_OT_EUlRS1X_OT0_E_JRNS0_6__baseILS1S_1EJSG_SK_SO_SS_SW_S10_S14_S19_S1D_S1H_S1I_S1M_S1N_EEERKS25_EEEDcS1X_DpT0_(uint64_t a1, _QWORD *a2, _DWORD **a3)
{
  _DWORD *v3;

  v3 = *a3;
  if (*a3)
    ++*v3;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_13CanvasPatternENSC_ISH_EENSE_ISH_EEEENS9_INSA_17HTMLCanvasElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_16HTMLImageElementENSC_ISP_EENSE_ISP_EEEENS9_INSA_16HTMLVideoElementENSC_IST_EENSE_IST_EEEENS9_INSA_9ImageDataENSC_ISX_EENSE_ISX_EEEENS9_INSA_11ImageBitmapENSC_IS11_EENSE_IS11_EEEENS9_IN9Inspector15ScriptCallStackENSC_IS16_EENSE_IS16_EEEENS9_INS15_15AsyncStackTraceENSC_IS1A_EENSE_IS1A_EEEENS9_INSA_18CSSStyleImageValueENSC_IS1E_EENSE_IS1E_EEEENS15_15ScriptCallFrameENS9_INSA_15OffscreenCanvasENSC_IS1J_EENSE_IS1J_EEEENS8_6StringEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS1O_LNS0_6_TraitE1EEEEEvRS1P_OT_EUlRS1X_OT0_E_JRNS0_6__baseILS1S_1EJSG_SK_SO_SS_SW_S10_S14_S19_S1D_S1H_S1I_S1M_S1N_EEERKS25_EEEDcS1X_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  if (*a3)
    ++*(_DWORD *)(v3 + 8);
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7ELm7EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_13CanvasPatternENSC_ISH_EENSE_ISH_EEEENS9_INSA_17HTMLCanvasElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_16HTMLImageElementENSC_ISP_EENSE_ISP_EEEENS9_INSA_16HTMLVideoElementENSC_IST_EENSE_IST_EEEENS9_INSA_9ImageDataENSC_ISX_EENSE_ISX_EEEENS9_INSA_11ImageBitmapENSC_IS11_EENSE_IS11_EEEENS9_IN9Inspector15ScriptCallStackENSC_IS16_EENSE_IS16_EEEENS9_INS15_15AsyncStackTraceENSC_IS1A_EENSE_IS1A_EEEENS9_INSA_18CSSStyleImageValueENSC_IS1E_EENSE_IS1E_EEEENS15_15ScriptCallFrameENS9_INSA_15OffscreenCanvasENSC_IS1J_EENSE_IS1J_EEEENS8_6StringEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS1O_LNS0_6_TraitE1EEEEEvRS1P_OT_EUlRS1X_OT0_E_JRNS0_6__baseILS1S_1EJSG_SK_SO_SS_SW_S10_S14_S19_S1D_S1H_S1I_S1M_S1N_EEERKS25_EEEDcS1X_DpT0_(uint64_t a1, _QWORD *a2, _DWORD **a3)
{
  _DWORD *v3;

  v3 = *a3;
  if (*a3)
    ++*v3;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8ELm8EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_13CanvasPatternENSC_ISH_EENSE_ISH_EEEENS9_INSA_17HTMLCanvasElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_16HTMLImageElementENSC_ISP_EENSE_ISP_EEEENS9_INSA_16HTMLVideoElementENSC_IST_EENSE_IST_EEEENS9_INSA_9ImageDataENSC_ISX_EENSE_ISX_EEEENS9_INSA_11ImageBitmapENSC_IS11_EENSE_IS11_EEEENS9_IN9Inspector15ScriptCallStackENSC_IS16_EENSE_IS16_EEEENS9_INS15_15AsyncStackTraceENSC_IS1A_EENSE_IS1A_EEEENS9_INSA_18CSSStyleImageValueENSC_IS1E_EENSE_IS1E_EEEENS15_15ScriptCallFrameENS9_INSA_15OffscreenCanvasENSC_IS1J_EENSE_IS1J_EEEENS8_6StringEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS1O_LNS0_6_TraitE1EEEEEvRS1P_OT_EUlRS1X_OT0_E_JRNS0_6__baseILS1S_1EJSG_SK_SO_SS_SW_S10_S14_S19_S1D_S1H_S1I_S1M_S1N_EEERKS25_EEEDcS1X_DpT0_(uint64_t a1, _QWORD *a2, _DWORD **a3)
{
  _DWORD *v3;

  v3 = *a3;
  if (*a3)
    ++*v3;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9ELm9EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_13CanvasPatternENSC_ISH_EENSE_ISH_EEEENS9_INSA_17HTMLCanvasElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_16HTMLImageElementENSC_ISP_EENSE_ISP_EEEENS9_INSA_16HTMLVideoElementENSC_IST_EENSE_IST_EEEENS9_INSA_9ImageDataENSC_ISX_EENSE_ISX_EEEENS9_INSA_11ImageBitmapENSC_IS11_EENSE_IS11_EEEENS9_IN9Inspector15ScriptCallStackENSC_IS16_EENSE_IS16_EEEENS9_INS15_15AsyncStackTraceENSC_IS1A_EENSE_IS1A_EEEENS9_INSA_18CSSStyleImageValueENSC_IS1E_EENSE_IS1E_EEEENS15_15ScriptCallFrameENS9_INSA_15OffscreenCanvasENSC_IS1J_EENSE_IS1J_EEEENS8_6StringEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS1O_LNS0_6_TraitE1EEEEEvRS1P_OT_EUlRS1X_OT0_E_JRNS0_6__baseILS1S_1EJSG_SK_SO_SS_SW_S10_S14_S19_S1D_S1H_S1I_S1M_S1N_EEERKS25_EEEDcS1X_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  if (*a3)
    ++*(_DWORD *)(v3 + 8);
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm10ELm10EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_13CanvasPatternENSC_ISH_EENSE_ISH_EEEENS9_INSA_17HTMLCanvasElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_16HTMLImageElementENSC_ISP_EENSE_ISP_EEEENS9_INSA_16HTMLVideoElementENSC_IST_EENSE_IST_EEEENS9_INSA_9ImageDataENSC_ISX_EENSE_ISX_EEEENS9_INSA_11ImageBitmapENSC_IS11_EENSE_IS11_EEEENS9_IN9Inspector15ScriptCallStackENSC_IS16_EENSE_IS16_EEEENS9_INS15_15AsyncStackTraceENSC_IS1A_EENSE_IS1A_EEEENS9_INSA_18CSSStyleImageValueENSC_IS1E_EENSE_IS1E_EEEENS15_15ScriptCallFrameENS9_INSA_15OffscreenCanvasENSC_IS1J_EENSE_IS1J_EEEENS8_6StringEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS1O_LNS0_6_TraitE1EEEEEvRS1P_OT_EUlRS1X_OT0_E_JRNS0_6__baseILS1S_1EJSG_SK_SO_SS_SW_S10_S14_S19_S1D_S1H_S1I_S1M_S1N_EEERKS25_EEEDcS1X_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;

  v3 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v3 += 2;
  *(_QWORD *)a2 = v3;
  v4 = *(_DWORD **)(a3 + 8);
  if (v4)
    *v4 += 2;
  *(_QWORD *)(a2 + 8) = v4;
  v5 = *(_DWORD **)(a3 + 16);
  if (v5)
    *v5 += 2;
  *(_QWORD *)(a2 + 16) = v5;
  v6 = *(_QWORD *)(a3 + 24);
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a3 + 32);
  *(_QWORD *)(a2 + 24) = v6;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm11ELm11EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_13CanvasPatternENSC_ISH_EENSE_ISH_EEEENS9_INSA_17HTMLCanvasElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_16HTMLImageElementENSC_ISP_EENSE_ISP_EEEENS9_INSA_16HTMLVideoElementENSC_IST_EENSE_IST_EEEENS9_INSA_9ImageDataENSC_ISX_EENSE_ISX_EEEENS9_INSA_11ImageBitmapENSC_IS11_EENSE_IS11_EEEENS9_IN9Inspector15ScriptCallStackENSC_IS16_EENSE_IS16_EEEENS9_INS15_15AsyncStackTraceENSC_IS1A_EENSE_IS1A_EEEENS9_INSA_18CSSStyleImageValueENSC_IS1E_EENSE_IS1E_EEEENS15_15ScriptCallFrameENS9_INSA_15OffscreenCanvasENSC_IS1J_EENSE_IS1J_EEEENS8_6StringEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS1O_LNS0_6_TraitE1EEEEEvRS1P_OT_EUlRS1X_OT0_E_JRNS0_6__baseILS1S_1EJSG_SK_SO_SS_SW_S10_S14_S19_S1D_S1H_S1I_S1M_S1N_EEERKS25_EEEDcS1X_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  if (*a3)
    ++*(_DWORD *)(v3 + 24);
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm12ELm12EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_13CanvasPatternENSC_ISH_EENSE_ISH_EEEENS9_INSA_17HTMLCanvasElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_16HTMLImageElementENSC_ISP_EENSE_ISP_EEEENS9_INSA_16HTMLVideoElementENSC_IST_EENSE_IST_EEEENS9_INSA_9ImageDataENSC_ISX_EENSE_ISX_EEEENS9_INSA_11ImageBitmapENSC_IS11_EENSE_IS11_EEEENS9_IN9Inspector15ScriptCallStackENSC_IS16_EENSE_IS16_EEEENS9_INS15_15AsyncStackTraceENSC_IS1A_EENSE_IS1A_EEEENS9_INSA_18CSSStyleImageValueENSC_IS1E_EENSE_IS1E_EEEENS15_15ScriptCallFrameENS9_INSA_15OffscreenCanvasENSC_IS1J_EENSE_IS1J_EEEENS8_6StringEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS1O_LNS0_6_TraitE1EEEEEvRS1P_OT_EUlRS1X_OT0_E_JRNS0_6__baseILS1S_1EJSG_SK_SO_SS_SW_S10_S14_S19_S1D_S1H_S1I_S1M_S1N_EEERKS25_EEEDcS1X_DpT0_(uint64_t a1, _QWORD *a2, _DWORD **a3)
{
  _DWORD *v3;

  v3 = *a3;
  if (*a3)
    *v3 += 2;
  *a2 = v3;
}

char *WTF::Vector<WebCore::CommandLineAPIHost::ListenerEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  WTF *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;

  v3 = a3;
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 > a3 || (v6 = (unint64_t)v5 + 16 * *(unsigned int *)(a1 + 12), v6 <= a3))
  {
    v14 = *(unsigned int *)(a1 + 8);
    v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 <= a2)
      v17 = a2;
    else
      v17 = v16;
    if (v17 > v14)
    {
      if (v17 >> 28)
      {
        __break(0xC471u);
        JUMPOUT(0x195DB6FF0);
      }
      v18 = (uint64_t)v5 + 16 * *(unsigned int *)(a1 + 12);
      v19 = WTF::fastMalloc((WTF *)(16 * v17));
      *(_DWORD *)(a1 + 8) = v17;
      *(_QWORD *)a1 = v19;
      WTF::VectorMover<false,WebCore::CommandLineAPIHost::ListenerEntry>::move((uint64_t)v5, v18, v19);
      if (v5)
      {
        if (*(WTF **)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v20);
      }
    }
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 8);
    v8 = v7 + (v7 >> 2);
    if (v8 >= 0x10)
      v9 = v8 + 1;
    else
      v9 = 16;
    if (v9 <= a2)
      v10 = a2;
    else
      v10 = v9;
    if (v10 <= v7)
    {
      v13 = *(WTF **)a1;
    }
    else
    {
      if (v10 >> 28)
      {
        __break(0xC471u);
        JUMPOUT(0x195DB6FF8);
      }
      v11 = WTF::fastMalloc((WTF *)(16 * v10));
      *(_DWORD *)(a1 + 8) = v10;
      *(_QWORD *)a1 = v11;
      WTF::VectorMover<false,WebCore::CommandLineAPIHost::ListenerEntry>::move((uint64_t)v5, v6, v11);
      v13 = *(WTF **)a1;
      if (v5)
      {
        if (v13 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v12);
        v13 = *(WTF **)a1;
      }
    }
    return (char *)v13 + 16 * ((uint64_t)(v3 - (_QWORD)v5) >> 4);
  }
  return (char *)v3;
}

uint64_t WTF::VectorMover<false,WebCore::CommandLineAPIHost::ListenerEntry>::move(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  __int16 v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;

  if (result != a2)
  {
    v5 = result;
    do
    {
      *(_QWORD *)a3 = 0;
      if (*(_QWORD *)v5)
      {
        v6 = *(_QWORD *)(((*(_QWORD *)v5 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
        v7 = *(_QWORD **)(v6 + 40);
        if (!v7)
        {
          result = JSC::HandleSet::grow(*(JSC::HandleSet **)(((*(_QWORD *)v5 - 16) & 0xFFFFFFFFFFFFF000) + 0x10));
          v7 = *(_QWORD **)(v6 + 40);
        }
        *(_QWORD *)(v6 + 40) = *v7;
        v7[2] = 0;
        v8 = v7 + 2;
        *v7 = 0;
        v7[1] = 0;
        *(_QWORD *)a3 = v7 + 2;
        v9 = *(_QWORD **)v5;
        if (*(_QWORD *)v5)
          v9 = (_QWORD *)*v9;
        v10 = (unint64_t)(v8 - 2);
        if ((v9 != 0) != (*v8 != 0))
        {
          if (v9)
          {
            v11 = *(unint64_t **)((v10 & 0xFFFFFFFFFFFFF000) + 0x10);
            v12 = v11[3];
            v11 += 3;
            *(_QWORD *)v10 = v12;
            *(v8 - 1) = v11;
            *v11 = v10;
            *(_QWORD *)(v12 + 8) = v10;
          }
          else
          {
            v20 = *(_QWORD *)v10;
            v19 = (_QWORD *)*(v8 - 1);
            *v19 = *(_QWORD *)v10;
            *(_QWORD *)(v20 + 8) = v19;
            *(_QWORD *)v10 = 0;
            *(_QWORD *)(v10 + 8) = 0;
            v8 = *(_QWORD **)a3;
          }
        }
        *v8 = v9;
      }
      v13 = *(_WORD *)(v5 + 8);
      *(_BYTE *)(a3 + 10) = *(_BYTE *)(v5 + 10);
      *(_WORD *)(a3 + 8) = v13;
      v14 = *(_QWORD **)v5;
      if (*(_QWORD *)v5)
      {
        v15 = v14 - 2;
        v16 = *(_QWORD *)(((unint64_t)(v14 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v17 = (uint64_t *)*(v14 - 1);
        if (v17)
        {
          v18 = *v15;
          *v17 = *v15;
          *(_QWORD *)(v18 + 8) = v17;
          *v15 = 0;
          v15[1] = 0;
        }
        *v15 = *(_QWORD *)(v16 + 40);
        *(_QWORD *)(v16 + 40) = v15;
        *(_QWORD *)v5 = 0;
      }
      a3 += 16;
      v5 += 16;
    }
    while (v5 != a2);
  }
  return result;
}

char *WTF::Vector<WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::CommandLineAPIHost::ListenerEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  WTF::StringImpl *v17;
  int v18;
  uint64_t v19;
  void *v20;

  v3 = a3;
  v5 = *(WTF::StringImpl **)a1;
  if (*(_QWORD *)a1 > a3
    || (v6 = (WTF::StringImpl *)((char *)v5 + 24 * *(unsigned int *)(a1 + 12)), (unint64_t)v6 <= a3))
  {
    v14 = *(unsigned int *)(a1 + 8);
    v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 <= a2)
      v16 = a2;
    if (v16 > v14)
    {
      if (v16 >= 0xAAAAAAB)
      {
        __break(0xC471u);
        JUMPOUT(0x195DB72ECLL);
      }
      v17 = (WTF::StringImpl *)((char *)v5 + 24 * *(unsigned int *)(a1 + 12));
      v18 = 24 * v16;
      v19 = WTF::fastMalloc((WTF *)(24 * v16));
      *(_DWORD *)(a1 + 8) = (v18 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)a1 = v19;
      WTF::VectorMover<false,WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::CommandLineAPIHost::ListenerEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::move(v5, v17, v19);
      if (v5)
      {
        if (*(WTF::StringImpl **)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v20);
      }
    }
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 8);
    v8 = v7 + (v7 >> 2);
    if (v8 >= 0x10)
      v9 = v8 + 1;
    else
      v9 = 16;
    if (v9 <= a2)
      v9 = a2;
    if (v9 <= v7)
    {
      v13 = *(WTF::StringImpl **)a1;
    }
    else
    {
      if (v9 >= 0xAAAAAAB)
      {
        __break(0xC471u);
        JUMPOUT(0x195DB72F4);
      }
      v10 = 24 * v9;
      v11 = WTF::fastMalloc((WTF *)(24 * v9));
      *(_DWORD *)(a1 + 8) = (v10 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)a1 = v11;
      WTF::VectorMover<false,WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::CommandLineAPIHost::ListenerEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::move(v5, v6, v11);
      v13 = *(WTF::StringImpl **)a1;
      if (v5)
      {
        if (v13 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v12);
        v13 = *(WTF::StringImpl **)a1;
      }
    }
    return (char *)v13 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
  }
  return (char *)v3;
}

WTF::StringImpl *WTF::VectorMover<false,WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::CommandLineAPIHost::ListenerEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;

  if (result != a2)
  {
    v5 = result;
    do
    {
      v6 = *(WTF::StringImpl **)v5;
      *(_QWORD *)v5 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = v6;
      v7 = *((_QWORD *)v5 + 1);
      *((_QWORD *)v5 + 1) = 0;
      *(_QWORD *)(a3 + 8) = v7;
      LODWORD(v7) = *((_DWORD *)v5 + 4);
      *((_DWORD *)v5 + 4) = 0;
      *(_DWORD *)(a3 + 16) = v7;
      LODWORD(v7) = *((_DWORD *)v5 + 5);
      *((_DWORD *)v5 + 5) = 0;
      *(_DWORD *)(a3 + 20) = v7;
      v8 = *((unsigned int *)v5 + 5);
      v9 = (WTF *)*((_QWORD *)v5 + 1);
      if ((_DWORD)v8)
      {
        v10 = 16 * v8;
        do
        {
          v11 = *(_QWORD *)v9;
          if (*(_QWORD *)v9)
          {
            v12 = (uint64_t *)(v11 - 16);
            v13 = *(_QWORD *)(((v11 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
            v14 = *(uint64_t **)(v11 - 8);
            if (v14)
            {
              v15 = *v12;
              *v14 = *v12;
              *(_QWORD *)(v15 + 8) = v14;
              *v12 = 0;
              v12[1] = 0;
            }
            *v12 = *(_QWORD *)(v13 + 40);
            *(_QWORD *)(v13 + 40) = v12;
            *(_QWORD *)v9 = 0;
          }
          v9 = (WTF *)((char *)v9 + 16);
          v10 -= 16;
        }
        while (v10);
        v9 = (WTF *)*((_QWORD *)v5 + 1);
      }
      if (v9)
      {
        *((_QWORD *)v5 + 1) = 0;
        *((_DWORD *)v5 + 4) = 0;
        WTF::fastFree(v9, a2);
      }
      result = *(WTF::StringImpl **)v5;
      *(_QWORD *)v5 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      a3 += 24;
      v5 = (WTF::StringImpl *)((char *)v5 + 24);
    }
    while (v5 != a2);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::CommandLineAPIHost::gatherRTCLogs(JSC::JSGlobalObject &,WTF::RefPtr<WebCore::RTCLogsCallback,WTF::RawPtrTraits<WebCore::RTCLogsCallback>,WTF::DefaultRefDerefTraits<WebCore::RTCLogsCallback>> &&)::$_0,void,WTF::String &&,WTF::String,WTF::String,WTF::RefPtr<WebCore::RTCPeerConnection,WTF::RawPtrTraits<WTF::String &>,WTF::DefaultRefDerefTraits<WTF::String &>> &&>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E33EE108;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CommandLineAPIHost::gatherRTCLogs(JSC::JSGlobalObject &,WTF::RefPtr<WebCore::RTCLogsCallback,WTF::RawPtrTraits<WebCore::RTCLogsCallback>,WTF::DefaultRefDerefTraits<WebCore::RTCLogsCallback>> &&)::$_0,void,WTF::String &&,WTF::String,WTF::String,WTF::RefPtr<WebCore::RTCPeerConnection,WTF::RawPtrTraits<WTF::String &>,WTF::DefaultRefDerefTraits<WTF::String &>> &&>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33EE108;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::CommandLineAPIHost::gatherRTCLogs(JSC::JSGlobalObject &,WTF::RefPtr<WebCore::RTCLogsCallback,WTF::RawPtrTraits<WebCore::RTCLogsCallback>,WTF::DefaultRefDerefTraits<WebCore::RTCLogsCallback>> &&)::$_0,void,WTF::String &&,WTF::String,WTF::String,WTF::RefPtr<WebCore::RTCPeerConnection,WTF::RawPtrTraits<WTF::String &>,WTF::DefaultRefDerefTraits<WTF::String &>> &&>::call(uint64_t a1, WTF::StringImpl **a2, WTF::StringImpl **a3, WTF::StringImpl **a4, WebCore::RTCPeerConnection **a5)
{
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WebCore::RTCPeerConnection *v9;
  WTF *v10;
  WebCore::RTCPeerConnection *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *result;
  bmalloc::api *v15;
  void *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WebCore::RTCPeerConnection *v20;

  v5 = *(_QWORD *)(a1 + 8);
  v6 = *a2;
  *a2 = 0;
  v7 = *a3;
  *a3 = 0;
  v17 = v6;
  v18 = v7;
  v8 = *a4;
  *a4 = 0;
  v9 = *a5;
  *a5 = 0;
  v19 = v8;
  v20 = v9;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v5 + 40))(v5, &v17);
  v11 = v20;
  v20 = 0;
  if (v11)
  {
    if (*((_DWORD *)v11 + 6) == 1)
    {
      WebCore::RTCPeerConnection::~RTCPeerConnection(v11, v10);
      bmalloc::api::isoDeallocate(v15, v16);
    }
    else
    {
      --*((_DWORD *)v11 + 6);
    }
  }
  v12 = v19;
  v19 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = v18;
  v18 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v10);
    else
      *(_DWORD *)v13 -= 2;
  }
  result = v17;
  v17 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF *v16;
  _QWORD *v17;
  WTF *v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  int v23;
  unsigned int v24;
  WTF::StringImpl **v25;
  uint64_t v26;
  WTF *v27;
  _QWORD *v28;
  WTF *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  WTF *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  uint64_t result;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  v9 = a1;
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v10 = 0;
    v11 = 0;
    v12 = v5;
    do
    {
      v13 = (WTF::StringImpl **)(v4 + 24 * v10);
      v14 = *v13;
      if (*v13 != (WTF::StringImpl *)-1)
      {
        if (v14)
        {
          v19 = *v9;
          if (*v9)
            v20 = *(_DWORD *)(v19 - 8);
          else
            v20 = 0;
          v21 = *((_DWORD *)v14 + 4);
          if (v21 < 0x100)
          {
            v22 = WTF::StringImpl::hashSlowCase(v14);
            v9 = a1;
          }
          else
          {
            v22 = v21 >> 8;
          }
          v23 = 0;
          do
          {
            v24 = v22 & v20;
            v25 = (WTF::StringImpl **)(v19 + 24 * (v22 & v20));
            v22 = ++v23 + (v22 & v20);
          }
          while (*v25);
          v26 = v19 + 24 * v24;
          v29 = *(WTF **)(v26 + 8);
          v28 = (_QWORD *)(v26 + 8);
          v27 = v29;
          if (v29)
          {
            *v28 = 0;
            *(_DWORD *)(v19 + 24 * v24 + 16) = 0;
            WTF::fastFree(v27, v8);
            v9 = a1;
            v39 = *v25;
            *v25 = 0;
            if (v39)
            {
              if (*(_DWORD *)v39 == 2)
              {
                WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v8);
                v9 = a1;
              }
              else
              {
                *(_DWORD *)v39 -= 2;
              }
            }
          }
          else
          {
            *v25 = 0;
          }
          v30 = *v13;
          *v13 = 0;
          *v25 = v30;
          v31 = v4 + 24 * v10;
          *v28 = 0;
          v28[1] = 0;
          v33 = *(_QWORD *)(v31 + 8);
          v32 = v31 + 8;
          *(_QWORD *)v32 = 0;
          *v28 = v33;
          v34 = *(_DWORD *)(v32 + 8);
          *(_DWORD *)(v32 + 8) = 0;
          v35 = v19 + 24 * v24;
          *(_DWORD *)(v35 + 16) = v34;
          v36 = *(_DWORD *)(v32 + 12);
          *(_DWORD *)(v32 + 12) = 0;
          *(_DWORD *)(v35 + 20) = v36;
          v37 = *(WTF **)v32;
          if (*(_QWORD *)v32)
          {
            *(_QWORD *)v32 = 0;
            *(_DWORD *)(v32 + 8) = 0;
            WTF::fastFree(v37, v8);
            v9 = a1;
          }
          v38 = *v13;
          *v13 = 0;
          if (v38)
          {
            if (*(_DWORD *)v38 == 2)
            {
              WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v8);
              v9 = a1;
            }
            else
            {
              *(_DWORD *)v38 -= 2;
            }
          }
          if (v13 == a3)
            v11 = v19 + 24 * v24;
        }
        else
        {
          v15 = v4 + 24 * v10;
          v18 = *(WTF **)(v15 + 8);
          v17 = (_QWORD *)(v15 + 8);
          v16 = v18;
          if (v18)
          {
            *v17 = 0;
            *(_DWORD *)(v4 + 24 * v10 + 16) = 0;
            WTF::fastFree(v16, v8);
            v9 = a1;
            v14 = *v13;
          }
          *v13 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
            {
              WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v8);
              v9 = a1;
            }
            else
            {
              *(_DWORD *)v14 -= 2;
            }
          }
        }
      }
      ++v10;
    }
    while (v10 != v12);
  }
  else
  {
    v11 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v11;
}

uint64_t *WTF::HashTable<unsigned long,unsigned long,WTF::IdentityExtractor,WTF::IntHash<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>>::add(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  char v26;
  uint64_t v27;

  v5 = result;
  v6 = *a2;
  if (*a2
    || (result = WTF::HashTable<unsigned long,unsigned long,WTF::IdentityExtractor,WTF::IntHash<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>>::rehash(a2, 8u, 0), (v6 = *a2) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = *a3;
  v10 = *a3 + ~(*a3 << 32);
  v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v8 & ((v12 >> 31) ^ v12);
  v14 = (uint64_t *)(v6 + 8 * v13);
  v15 = *v14;
  if (*v14 != -1)
  {
    v16 = 0;
    v17 = 1;
    do
    {
      if (v15 == v9)
      {
        if ((v7 & 1) != 0)
          v20 = 0;
        else
          v20 = *(unsigned int *)(v6 - 4);
        v26 = 0;
        v27 = v6 + 8 * v20;
        goto LABEL_33;
      }
      if (v15 == -2)
        v16 = v14;
      v13 = (v13 + v17) & v8;
      v14 = (uint64_t *)(v6 + 8 * v13);
      v15 = *v14;
      ++v17;
    }
    while (*v14 != -1);
    if (v16)
    {
      *v16 = -1;
      --*(_DWORD *)(*a2 - 16);
      v9 = *a3;
      v14 = v16;
    }
  }
  *v14 = v9;
  v18 = *a2;
  if (*a2)
    v19 = *(_DWORD *)(v18 - 12) + 1;
  else
    v19 = 1;
  *(_DWORD *)(v18 - 12) = v19;
  v21 = *a2;
  if (*a2)
    v22 = *(_DWORD *)(v21 - 12);
  else
    v22 = 0;
  v23 = (*(_DWORD *)(v21 - 16) + v22);
  v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 <= 2 * v23)
      goto LABEL_28;
  }
  else if (3 * v24 <= 4 * v23)
  {
    if (!(_DWORD)v24)
    {
      v25 = 8;
      goto LABEL_29;
    }
LABEL_28:
    v25 = (_DWORD)v24 << (6 * *(_DWORD *)(v21 - 12) >= (2 * v24));
LABEL_29:
    result = WTF::HashTable<unsigned long,unsigned long,WTF::IdentityExtractor,WTF::IntHash<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>>::rehash(a2, v25, v14);
    v14 = result;
    v21 = *a2;
    if (*a2)
      v24 = *(unsigned int *)(v21 - 4);
    else
      v24 = 0;
  }
  v27 = v21 + 8 * v24;
  v26 = 1;
LABEL_33:
  *v5 = (uint64_t)v14;
  v5[1] = v27;
  *((_BYTE *)v5 + 16) = v26;
  return result;
}

_QWORD *WTF::HashTable<unsigned long,unsigned long,WTF::IdentityExtractor,WTF::IntHash<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  _QWORD *v26;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(8 * a2 + 16));
  v11 = v9;
  v12 = v9 + 16;
  if (a2)
    memset((void *)(v9 + 16), 255, 8 * a2);
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (!v7)
  {
    v14 = 0;
    if (!v6)
      return v14;
    goto LABEL_18;
  }
  v13 = 0;
  v14 = 0;
  do
  {
    v15 = (uint64_t *)(v6 + 8 * v13);
    v16 = *v15;
    if ((unint64_t)*v15 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v17 = *a1;
      if (*a1)
        v18 = *(_DWORD *)(v17 - 8);
      else
        v18 = 0;
      v19 = (v16 + ~(v16 << 32)) ^ ((unint64_t)(v16 + ~(v16 << 32)) >> 22);
      v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
      v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
      v22 = v18 & ((v21 >> 31) ^ v21);
      v23 = 1;
      do
      {
        v24 = v22;
        v25 = *(_QWORD *)(v17 + 8 * v22);
        v22 = (v22 + v23++) & v18;
      }
      while (v25 != -1);
      v26 = (_QWORD *)(v17 + 8 * v24);
      *v26 = v16;
      if (v15 == a3)
        v14 = v26;
    }
    ++v13;
  }
  while (v13 != v7);
  if (v6)
LABEL_18:
    WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

_OWORD *WTF::HashMap<WebCore::DOMPatchSupport::Digest *,WebCore::DOMPatchSupport::Digest *,WTF::DefaultHash<WebCore::DOMPatchSupport::Digest *>,WTF::HashTraits<WebCore::DOMPatchSupport::Digest *>,WTF::HashTraits<WebCore::DOMPatchSupport::Digest *>,WTF::HashTableTraits>::inlineSet<WebCore::DOMPatchSupport::Digest *,WebCore::DOMPatchSupport::Digest *&>(_OWORD *result, uint64_t *a2, uint64_t *a3, _QWORD *a4)
{
  _OWORD *v7;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;

  v7 = result;
  v8 = *a2;
  if (*a2
    || (result = WTF::HashTable<void const*,WTF::KeyValuePair<void const*,JSC::Bindings::ObjcInstance *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void const*,JSC::Bindings::ObjcInstance *>>,WTF::DefaultHash<void const*>,WTF::HashMap<void const*,JSC::Bindings::ObjcInstance *,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<JSC::Bindings::ObjcInstance *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void const*>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a3;
  v12 = ~(*a3 << 32) + *a3;
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (_QWORD *)(v8 + 16 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v22 = 0;
        else
          v22 = *(unsigned int *)(v8 - 4);
        *(_QWORD *)v7 = v16;
        *((_QWORD *)v7 + 1) = v8 + 16 * v22;
        *((_BYTE *)v7 + 16) = 0;
        v16[1] = *a4;
        return result;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (_QWORD *)(v8 + 16 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v11 = *a3;
      v16 = v18;
    }
  }
  *v16 = v11;
  v16[1] = *a4;
  v20 = *a2;
  if (*a2)
    v21 = *(_DWORD *)(v20 - 12) + 1;
  else
    v21 = 1;
  *(_DWORD *)(v20 - 12) = v21;
  v23 = *a2;
  if (*a2)
    v24 = *(_DWORD *)(v23 - 12);
  else
    v24 = 0;
  v25 = (*(_DWORD *)(v23 - 16) + v24);
  v26 = *(unsigned int *)(v23 - 4);
  if (v26 > 0x400)
  {
    if (v26 <= 2 * v25)
      goto LABEL_28;
  }
  else if (3 * v26 <= 4 * v25)
  {
    if (!(_DWORD)v26)
    {
      v27 = 8;
      goto LABEL_29;
    }
LABEL_28:
    v27 = (_DWORD)v26 << (6 * *(_DWORD *)(v23 - 12) >= (2 * v26));
LABEL_29:
    result = WTF::HashTable<void const*,WTF::KeyValuePair<void const*,JSC::Bindings::ObjcInstance *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void const*,JSC::Bindings::ObjcInstance *>>,WTF::DefaultHash<void const*>,WTF::HashMap<void const*,JSC::Bindings::ObjcInstance *,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<JSC::Bindings::ObjcInstance *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void const*>>::rehash(a2, v27, v16);
    v16 = result;
    v23 = *a2;
    if (*a2)
      v26 = *(unsigned int *)(v23 - 4);
    else
      v26 = 0;
  }
  *(_QWORD *)v7 = v16;
  *((_QWORD *)v7 + 1) = v23 + 16 * v26;
  *((_BYTE *)v7 + 16) = 1;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_13CanvasPatternENSC_ISH_EENSE_ISH_EEEENS9_INSA_17HTMLCanvasElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_16HTMLImageElementENSC_ISP_EENSE_ISP_EEEENS9_INSA_16HTMLVideoElementENSC_IST_EENSE_IST_EEEENS9_INSA_9ImageDataENSC_ISX_EENSE_ISX_EEEENS9_INSA_11ImageBitmapENSC_IS11_EENSE_IS11_EEEENS9_IN9Inspector15ScriptCallStackENSC_IS16_EENSE_IS16_EEEENS9_INS15_15AsyncStackTraceENSC_IS1A_EENSE_IS1A_EEEENS9_INSA_18CSSStyleImageValueENSC_IS1E_EENSE_IS1E_EEEENS15_15ScriptCallFrameENS9_INSA_15OffscreenCanvasENSC_IS1J_EENSE_IS1J_EEEENS8_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS1O_LNS0_6_TraitE1EEEEEvRS1P_OT_EUlRS1V_OT0_E_JRNS0_6__baseILS1S_1EJSG_SK_SO_SS_SW_S10_S14_S19_S1D_S1H_S1I_S1M_S1N_EEEOS23_EEEDcS1V_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_13CanvasPatternENSC_ISH_EENSE_ISH_EEEENS9_INSA_17HTMLCanvasElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_16HTMLImageElementENSC_ISP_EENSE_ISP_EEEENS9_INSA_16HTMLVideoElementENSC_IST_EENSE_IST_EEEENS9_INSA_9ImageDataENSC_ISX_EENSE_ISX_EEEENS9_INSA_11ImageBitmapENSC_IS11_EENSE_IS11_EEEENS9_IN9Inspector15ScriptCallStackENSC_IS16_EENSE_IS16_EEEENS9_INS15_15AsyncStackTraceENSC_IS1A_EENSE_IS1A_EEEENS9_INSA_18CSSStyleImageValueENSC_IS1E_EENSE_IS1E_EEEENS15_15ScriptCallFrameENS9_INSA_15OffscreenCanvasENSC_IS1J_EENSE_IS1J_EEEENS8_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS1O_LNS0_6_TraitE1EEEEEvRS1P_OT_EUlRS1V_OT0_E_JRNS0_6__baseILS1S_1EJSG_SK_SO_SS_SW_S10_S14_S19_S1D_S1H_S1I_S1M_S1N_EEEOS23_EEEDcS1V_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_13CanvasPatternENSC_ISH_EENSE_ISH_EEEENS9_INSA_17HTMLCanvasElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_16HTMLImageElementENSC_ISP_EENSE_ISP_EEEENS9_INSA_16HTMLVideoElementENSC_IST_EENSE_IST_EEEENS9_INSA_9ImageDataENSC_ISX_EENSE_ISX_EEEENS9_INSA_11ImageBitmapENSC_IS11_EENSE_IS11_EEEENS9_IN9Inspector15ScriptCallStackENSC_IS16_EENSE_IS16_EEEENS9_INS15_15AsyncStackTraceENSC_IS1A_EENSE_IS1A_EEEENS9_INSA_18CSSStyleImageValueENSC_IS1E_EENSE_IS1E_EEEENS15_15ScriptCallFrameENS9_INSA_15OffscreenCanvasENSC_IS1J_EENSE_IS1J_EEEENS8_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS1O_LNS0_6_TraitE1EEEEEvRS1P_OT_EUlRS1V_OT0_E_JRNS0_6__baseILS1S_1EJSG_SK_SO_SS_SW_S10_S14_S19_S1D_S1H_S1I_S1M_S1N_EEEOS23_EEEDcS1V_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_13CanvasPatternENSC_ISH_EENSE_ISH_EEEENS9_INSA_17HTMLCanvasElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_16HTMLImageElementENSC_ISP_EENSE_ISP_EEEENS9_INSA_16HTMLVideoElementENSC_IST_EENSE_IST_EEEENS9_INSA_9ImageDataENSC_ISX_EENSE_ISX_EEEENS9_INSA_11ImageBitmapENSC_IS11_EENSE_IS11_EEEENS9_IN9Inspector15ScriptCallStackENSC_IS16_EENSE_IS16_EEEENS9_INS15_15AsyncStackTraceENSC_IS1A_EENSE_IS1A_EEEENS9_INSA_18CSSStyleImageValueENSC_IS1E_EENSE_IS1E_EEEENS15_15ScriptCallFrameENS9_INSA_15OffscreenCanvasENSC_IS1J_EENSE_IS1J_EEEENS8_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS1O_LNS0_6_TraitE1EEEEEvRS1P_OT_EUlRS1V_OT0_E_JRNS0_6__baseILS1S_1EJSG_SK_SO_SS_SW_S10_S14_S19_S1D_S1H_S1I_S1M_S1N_EEEOS23_EEEDcS1V_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_13CanvasPatternENSC_ISH_EENSE_ISH_EEEENS9_INSA_17HTMLCanvasElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_16HTMLImageElementENSC_ISP_EENSE_ISP_EEEENS9_INSA_16HTMLVideoElementENSC_IST_EENSE_IST_EEEENS9_INSA_9ImageDataENSC_ISX_EENSE_ISX_EEEENS9_INSA_11ImageBitmapENSC_IS11_EENSE_IS11_EEEENS9_IN9Inspector15ScriptCallStackENSC_IS16_EENSE_IS16_EEEENS9_INS15_15AsyncStackTraceENSC_IS1A_EENSE_IS1A_EEEENS9_INSA_18CSSStyleImageValueENSC_IS1E_EENSE_IS1E_EEEENS15_15ScriptCallFrameENS9_INSA_15OffscreenCanvasENSC_IS1J_EENSE_IS1J_EEEENS8_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS1O_LNS0_6_TraitE1EEEEEvRS1P_OT_EUlRS1V_OT0_E_JRNS0_6__baseILS1S_1EJSG_SK_SO_SS_SW_S10_S14_S19_S1D_S1H_S1I_S1M_S1N_EEEOS23_EEEDcS1V_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_13CanvasPatternENSC_ISH_EENSE_ISH_EEEENS9_INSA_17HTMLCanvasElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_16HTMLImageElementENSC_ISP_EENSE_ISP_EEEENS9_INSA_16HTMLVideoElementENSC_IST_EENSE_IST_EEEENS9_INSA_9ImageDataENSC_ISX_EENSE_ISX_EEEENS9_INSA_11ImageBitmapENSC_IS11_EENSE_IS11_EEEENS9_IN9Inspector15ScriptCallStackENSC_IS16_EENSE_IS16_EEEENS9_INS15_15AsyncStackTraceENSC_IS1A_EENSE_IS1A_EEEENS9_INSA_18CSSStyleImageValueENSC_IS1E_EENSE_IS1E_EEEENS15_15ScriptCallFrameENS9_INSA_15OffscreenCanvasENSC_IS1J_EENSE_IS1J_EEEENS8_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS1O_LNS0_6_TraitE1EEEEEvRS1P_OT_EUlRS1V_OT0_E_JRNS0_6__baseILS1S_1EJSG_SK_SO_SS_SW_S10_S14_S19_S1D_S1H_S1I_S1M_S1N_EEEOS23_EEEDcS1V_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_13CanvasPatternENSC_ISH_EENSE_ISH_EEEENS9_INSA_17HTMLCanvasElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_16HTMLImageElementENSC_ISP_EENSE_ISP_EEEENS9_INSA_16HTMLVideoElementENSC_IST_EENSE_IST_EEEENS9_INSA_9ImageDataENSC_ISX_EENSE_ISX_EEEENS9_INSA_11ImageBitmapENSC_IS11_EENSE_IS11_EEEENS9_IN9Inspector15ScriptCallStackENSC_IS16_EENSE_IS16_EEEENS9_INS15_15AsyncStackTraceENSC_IS1A_EENSE_IS1A_EEEENS9_INSA_18CSSStyleImageValueENSC_IS1E_EENSE_IS1E_EEEENS15_15ScriptCallFrameENS9_INSA_15OffscreenCanvasENSC_IS1J_EENSE_IS1J_EEEENS8_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS1O_LNS0_6_TraitE1EEEEEvRS1P_OT_EUlRS1V_OT0_E_JRNS0_6__baseILS1S_1EJSG_SK_SO_SS_SW_S10_S14_S19_S1D_S1H_S1I_S1M_S1N_EEEOS23_EEEDcS1V_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7ELm7EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_13CanvasPatternENSC_ISH_EENSE_ISH_EEEENS9_INSA_17HTMLCanvasElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_16HTMLImageElementENSC_ISP_EENSE_ISP_EEEENS9_INSA_16HTMLVideoElementENSC_IST_EENSE_IST_EEEENS9_INSA_9ImageDataENSC_ISX_EENSE_ISX_EEEENS9_INSA_11ImageBitmapENSC_IS11_EENSE_IS11_EEEENS9_IN9Inspector15ScriptCallStackENSC_IS16_EENSE_IS16_EEEENS9_INS15_15AsyncStackTraceENSC_IS1A_EENSE_IS1A_EEEENS9_INSA_18CSSStyleImageValueENSC_IS1E_EENSE_IS1E_EEEENS15_15ScriptCallFrameENS9_INSA_15OffscreenCanvasENSC_IS1J_EENSE_IS1J_EEEENS8_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS1O_LNS0_6_TraitE1EEEEEvRS1P_OT_EUlRS1V_OT0_E_JRNS0_6__baseILS1S_1EJSG_SK_SO_SS_SW_S10_S14_S19_S1D_S1H_S1I_S1M_S1N_EEEOS23_EEEDcS1V_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8ELm8EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_13CanvasPatternENSC_ISH_EENSE_ISH_EEEENS9_INSA_17HTMLCanvasElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_16HTMLImageElementENSC_ISP_EENSE_ISP_EEEENS9_INSA_16HTMLVideoElementENSC_IST_EENSE_IST_EEEENS9_INSA_9ImageDataENSC_ISX_EENSE_ISX_EEEENS9_INSA_11ImageBitmapENSC_IS11_EENSE_IS11_EEEENS9_IN9Inspector15ScriptCallStackENSC_IS16_EENSE_IS16_EEEENS9_INS15_15AsyncStackTraceENSC_IS1A_EENSE_IS1A_EEEENS9_INSA_18CSSStyleImageValueENSC_IS1E_EENSE_IS1E_EEEENS15_15ScriptCallFrameENS9_INSA_15OffscreenCanvasENSC_IS1J_EENSE_IS1J_EEEENS8_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS1O_LNS0_6_TraitE1EEEEEvRS1P_OT_EUlRS1V_OT0_E_JRNS0_6__baseILS1S_1EJSG_SK_SO_SS_SW_S10_S14_S19_S1D_S1H_S1I_S1M_S1N_EEEOS23_EEEDcS1V_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9ELm9EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_13CanvasPatternENSC_ISH_EENSE_ISH_EEEENS9_INSA_17HTMLCanvasElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_16HTMLImageElementENSC_ISP_EENSE_ISP_EEEENS9_INSA_16HTMLVideoElementENSC_IST_EENSE_IST_EEEENS9_INSA_9ImageDataENSC_ISX_EENSE_ISX_EEEENS9_INSA_11ImageBitmapENSC_IS11_EENSE_IS11_EEEENS9_IN9Inspector15ScriptCallStackENSC_IS16_EENSE_IS16_EEEENS9_INS15_15AsyncStackTraceENSC_IS1A_EENSE_IS1A_EEEENS9_INSA_18CSSStyleImageValueENSC_IS1E_EENSE_IS1E_EEEENS15_15ScriptCallFrameENS9_INSA_15OffscreenCanvasENSC_IS1J_EENSE_IS1J_EEEENS8_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS1O_LNS0_6_TraitE1EEEEEvRS1P_OT_EUlRS1V_OT0_E_JRNS0_6__baseILS1S_1EJSG_SK_SO_SS_SW_S10_S14_S19_S1D_S1H_S1I_S1M_S1N_EEEOS23_EEEDcS1V_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm10ELm10EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_13CanvasPatternENSC_ISH_EENSE_ISH_EEEENS9_INSA_17HTMLCanvasElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_16HTMLImageElementENSC_ISP_EENSE_ISP_EEEENS9_INSA_16HTMLVideoElementENSC_IST_EENSE_IST_EEEENS9_INSA_9ImageDataENSC_ISX_EENSE_ISX_EEEENS9_INSA_11ImageBitmapENSC_IS11_EENSE_IS11_EEEENS9_IN9Inspector15ScriptCallStackENSC_IS16_EENSE_IS16_EEEENS9_INS15_15AsyncStackTraceENSC_IS1A_EENSE_IS1A_EEEENS9_INSA_18CSSStyleImageValueENSC_IS1E_EENSE_IS1E_EEEENS15_15ScriptCallFrameENS9_INSA_15OffscreenCanvasENSC_IS1J_EENSE_IS1J_EEEENS8_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS1O_LNS0_6_TraitE1EEEEEvRS1P_OT_EUlRS1V_OT0_E_JRNS0_6__baseILS1S_1EJSG_SK_SO_SS_SW_S10_S14_S19_S1D_S1H_S1I_S1M_S1N_EEEOS23_EEEDcS1V_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;

  v3 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v3 += 2;
  *(_QWORD *)a2 = v3;
  v4 = *(_DWORD **)(a3 + 8);
  if (v4)
    *v4 += 2;
  *(_QWORD *)(a2 + 8) = v4;
  v5 = *(_DWORD **)(a3 + 16);
  if (v5)
    *v5 += 2;
  *(_QWORD *)(a2 + 16) = v5;
  v6 = *(_QWORD *)(a3 + 24);
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a3 + 32);
  *(_QWORD *)(a2 + 24) = v6;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm11ELm11EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_13CanvasPatternENSC_ISH_EENSE_ISH_EEEENS9_INSA_17HTMLCanvasElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_16HTMLImageElementENSC_ISP_EENSE_ISP_EEEENS9_INSA_16HTMLVideoElementENSC_IST_EENSE_IST_EEEENS9_INSA_9ImageDataENSC_ISX_EENSE_ISX_EEEENS9_INSA_11ImageBitmapENSC_IS11_EENSE_IS11_EEEENS9_IN9Inspector15ScriptCallStackENSC_IS16_EENSE_IS16_EEEENS9_INS15_15AsyncStackTraceENSC_IS1A_EENSE_IS1A_EEEENS9_INSA_18CSSStyleImageValueENSC_IS1E_EENSE_IS1E_EEEENS15_15ScriptCallFrameENS9_INSA_15OffscreenCanvasENSC_IS1J_EENSE_IS1J_EEEENS8_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS1O_LNS0_6_TraitE1EEEEEvRS1P_OT_EUlRS1V_OT0_E_JRNS0_6__baseILS1S_1EJSG_SK_SO_SS_SW_S10_S14_S19_S1D_S1H_S1I_S1M_S1N_EEEOS23_EEEDcS1V_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm12ELm12EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_13CanvasPatternENSC_ISH_EENSE_ISH_EEEENS9_INSA_17HTMLCanvasElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_16HTMLImageElementENSC_ISP_EENSE_ISP_EEEENS9_INSA_16HTMLVideoElementENSC_IST_EENSE_IST_EEEENS9_INSA_9ImageDataENSC_ISX_EENSE_ISX_EEEENS9_INSA_11ImageBitmapENSC_IS11_EENSE_IS11_EEEENS9_IN9Inspector15ScriptCallStackENSC_IS16_EENSE_IS16_EEEENS9_INS15_15AsyncStackTraceENSC_IS1A_EENSE_IS1A_EEEENS9_INSA_18CSSStyleImageValueENSC_IS1E_EENSE_IS1E_EEEENS15_15ScriptCallFrameENS9_INSA_15OffscreenCanvasENSC_IS1J_EENSE_IS1J_EEEENS8_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS1O_LNS0_6_TraitE1EEEEEvRS1P_OT_EUlRS1V_OT0_E_JRNS0_6__baseILS1S_1EJSG_SK_SO_SS_SW_S10_S14_S19_S1D_S1H_S1I_S1M_S1N_EEEOS23_EEEDcS1V_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

unsigned int *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InspectorCanvas::processArgument(std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &>@<X0>(unsigned int ***a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return WebCore::InspectorCanvas::processArgument(**a1, a2, a3);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InspectorCanvas::processArgument(std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &>@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t (*v3)();
  uint64_t result;
  uint64_t v5;

  if (*a1)
    v3 = WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>::unspecifiedBoolTypeInstance;
  else
    v3 = 0;
  result = WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)(v3 != 0));
  *(_QWORD *)a2 = v5;
  *(_DWORD *)(a2 + 8) = 2;
  *(_BYTE *)(a2 + 16) = 1;
  return result;
}

unsigned int *std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InspectorCanvas::processArgument(std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &>@<X0>(unsigned int ***a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return WebCore::InspectorCanvas::processArgument(**a1, a2, a3);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InspectorCanvas::processArgument(std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &>@<X0>(uint64_t **a1@<X0>, WebCore::ImageBitmap **a2@<X1>, uint64_t a3@<X8>)
{
  return WebCore::InspectorCanvas::processArgument(**a1, *a2, a3);
}

uint64_t **std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InspectorCanvas::processArgument(std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &>@<X0>(uint64_t **result@<X0>, _DWORD **a2@<X1>, uint64_t a3@<X8>)
{
  _DWORD *v4;
  uint64_t v5;
  WTF::JSONImpl::Value *v6;
  uint64_t v7;
  char v8;
  _QWORD v9[5];
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  if (*a2)
  {
    v5 = **result;
    v4[2] += 2;
    v9[0] = v4;
    v10 = 9;
    v6 = (WTF::JSONImpl::Value *)WebCore::InspectorCanvas::indexForData(v5, (unint64_t)v9);
    result = (uint64_t **)WTF::JSONImpl::Value::create(v6);
    if (v10 != -1)
      result = (uint64_t **)((uint64_t (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v10])(&v8, v9);
    *(_QWORD *)a3 = v7;
    *(_DWORD *)(a3 + 8) = 6;
    *(_BYTE *)(a3 + 16) = 1;
    if (v4[2] == 1)
      return (uint64_t **)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[2];
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InspectorCanvas::processArgument(std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &>@<X0>(uint64_t **a1@<X0>, WebCore::OffscreenCanvas **a2@<X1>, uint64_t a3@<X8>)
{
  return WebCore::InspectorCanvas::processArgument(**a1, a2, a3);
}

unsigned int *std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InspectorCanvas::processArgument(std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &>@<X0>(unsigned int ***a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return WebCore::InspectorCanvas::processArgument(**a1, a2, a3);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InspectorCanvas::processArgument(std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *a1;
  if (*a1)
  {
    result = WTF::JSONImpl::Value::create(0);
    *(_QWORD *)a2 = v5;
    *(_DWORD *)(a2 + 8) = 6;
    LOBYTE(v3) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 16) = v3;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InspectorCanvas::processArgument(std::variant<WTF::String,WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>> &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>> &>@<X0>(uint64_t **a1@<X0>, int **a2@<X1>, uint64_t a3@<X8>)
{
  int *v4;
  uint64_t v5;
  int v6;
  WTF::JSONImpl::Value *v7;
  uint64_t result;
  uint64_t v9;
  char v10;
  int *v11;
  int v12;
  _QWORD v13[5];
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  v5 = **a1;
  if (*a2)
  {
    v6 = *v4;
    v11 = *a2;
    v12 = 12;
    *v4 = v6 + 4;
  }
  else
  {
    v11 = 0;
    v12 = 12;
  }
  v13[0] = v4;
  v14 = 12;
  v7 = (WTF::JSONImpl::Value *)WebCore::InspectorCanvas::indexForData(v5, (unint64_t)v13);
  result = WTF::JSONImpl::Value::create(v7);
  if (v14 != -1)
    result = ((uint64_t (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v14])(&v10, v13);
  *(_QWORD *)a3 = v9;
  *(_DWORD *)(a3 + 8) = 3;
  *(_BYTE *)(a3 + 16) = 1;
  if (v12 != -1)
    return ((uint64_t (*)(_QWORD *, int **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v12])(v13, &v11);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InspectorCanvas::processArgument(std::variant<WTF::String,WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>> &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>> &>@<X0>(uint64_t **a1@<X0>, WebCore::CanvasGradient **a2@<X1>, uint64_t a3@<X8>)
{
  return WebCore::InspectorCanvas::processArgument(**a1, a2, a3);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InspectorCanvas::processArgument(std::variant<WTF::String,WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>> &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>> &>@<X0>(uint64_t **a1@<X0>, WTF **a2@<X1>, uint64_t a3@<X8>)
{
  return WebCore::InspectorCanvas::processArgument(**a1, a2, a3);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InspectorCanvas::processArgument(std::variant<double,WebCore::DOMPointInit> &)::$_0,WebCore::InspectorCanvas::processArgument(std::variant<double,WebCore::DOMPointInit> &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,double,WebCore::DOMPointInit> &>@<X0>(WTF::JSONImpl::Value *a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = WTF::JSONImpl::Value::create(a1, *a2);
  *(_QWORD *)a3 = v5;
  *(_DWORD *)(a3 + 8) = 1;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InspectorCanvas::processArgument(std::variant<double,WebCore::DOMPointInit> &)::$_0,WebCore::InspectorCanvas::processArgument(std::variant<double,WebCore::DOMPointInit> &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,double,WebCore::DOMPointInit> &>(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[16] = 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InspectorCanvas::processArgument(WTF::Vector<std::variant<double,WebCore::DOMPointInit>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0::operator() const(std::variant<double,WebCore::DOMPointInit> const&)::{lambda(WebCore::DOMPointInit)#1},WebCore::InspectorCanvas::processArgument(WTF::Vector<std::variant<double,WebCore::DOMPointInit>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0::operator() const(std::variant<double,WebCore::DOMPointInit> const&)::{lambda(double)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,double,WebCore::DOMPointInit> const&>(WTF::JSONImpl::Value *a1, double *a2)
{
  return WTF::JSONImpl::Value::create(a1, *a2);
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InspectorCanvas::processArgument(WTF::Vector<std::variant<double,WebCore::DOMPointInit>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0::operator() const(std::variant<double,WebCore::DOMPointInit> const&)::{lambda(WebCore::DOMPointInit)#1},WebCore::InspectorCanvas::processArgument(WTF::Vector<std::variant<double,WebCore::DOMPointInit>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0::operator() const(std::variant<double,WebCore::DOMPointInit> const&)::{lambda(double)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,double,WebCore::DOMPointInit> const&>@<X0>(WTF::JSONImpl::Object *a1@<X0>, double *a2@<X1>, _QWORD *a3@<X8>)
{
  double v4;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  WTF::JSONImpl::Value *v9;
  WTF::StringImpl *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  _DWORD *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::JSONImpl::Value *v18;
  WTF::StringImpl *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  _DWORD *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  WTF::JSONImpl::Value *v27;
  WTF::StringImpl *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  _DWORD *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  WTF::JSONImpl::Value *v36;
  WTF::StringImpl *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  _DWORD *v42;
  WTF::StringImpl *result;
  _DWORD **v44;
  uint64_t v45;
  _DWORD *v46;
  _DWORD **v47;
  uint64_t v48;
  _DWORD *v49;
  _DWORD **v50;
  uint64_t v51;
  _DWORD *v52;
  _DWORD **v53;
  uint64_t v54;
  _DWORD *v55;
  WTF::StringImpl *v56;
  uint64_t v57;
  _DWORD *v58;
  _QWORD v59[2];
  char v60;

  v5 = *a2;
  v4 = a2[1];
  v7 = a2[2];
  v6 = a2[3];
  WTF::JSONImpl::Object::create(a1);
  v8 = v57;
  v9 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(v9, v5);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v57 + 16), &v56, (const WTF::StringImpl *)&v58, (uint64_t)v59);
  if (v60)
  {
    v11 = (uint64_t *)(v8 + 24);
    v12 = *(unsigned int *)(v8 + 36);
    if ((_DWORD)v12 == *(_DWORD *)(v8 + 32))
    {
      v44 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v11, v12 + 1, (unint64_t)&v56);
      v12 = *(unsigned int *)(v8 + 36);
      v45 = *(_QWORD *)(v8 + 24);
      v46 = *v44;
      if (*v44)
        *v46 += 2;
      *(_QWORD *)(v45 + 8 * v12) = v46;
    }
    else
    {
      v13 = *v11;
      v14 = v56;
      if (v56)
        *(_DWORD *)v56 += 2;
      *(_QWORD *)(v13 + 8 * v12) = v14;
    }
    *(_DWORD *)(v8 + 36) = v12 + 1;
  }
  v15 = v58;
  v58 = 0;
  if (v15)
  {
    if (*v15 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v15;
  }
  v16 = v56;
  v56 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v10);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = v57;
  v18 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  v56 = (WTF::StringImpl *)v59[0];
  WTF::JSONImpl::Value::create(v18, v4);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v17 + 16), &v56, (const WTF::StringImpl *)&v58, (uint64_t)v59);
  if (v60)
  {
    v20 = (uint64_t *)(v17 + 24);
    v21 = *(unsigned int *)(v17 + 36);
    if ((_DWORD)v21 == *(_DWORD *)(v17 + 32))
    {
      v47 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v20, v21 + 1, (unint64_t)&v56);
      v21 = *(unsigned int *)(v17 + 36);
      v48 = *(_QWORD *)(v17 + 24);
      v49 = *v47;
      if (*v47)
        *v49 += 2;
      *(_QWORD *)(v48 + 8 * v21) = v49;
    }
    else
    {
      v22 = *v20;
      v23 = v56;
      if (v56)
        *(_DWORD *)v56 += 2;
      *(_QWORD *)(v22 + 8 * v21) = v23;
    }
    *(_DWORD *)(v17 + 36) = v21 + 1;
  }
  v24 = v58;
  v58 = 0;
  if (v24)
  {
    if (*v24 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v24;
  }
  v25 = v56;
  v56 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v19);
    else
      *(_DWORD *)v25 -= 2;
  }
  v26 = v57;
  v27 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  v56 = (WTF::StringImpl *)v59[0];
  WTF::JSONImpl::Value::create(v27, v7);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v26 + 16), &v56, (const WTF::StringImpl *)&v58, (uint64_t)v59);
  if (v60)
  {
    v29 = (uint64_t *)(v26 + 24);
    v30 = *(unsigned int *)(v26 + 36);
    if ((_DWORD)v30 == *(_DWORD *)(v26 + 32))
    {
      v50 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v29, v30 + 1, (unint64_t)&v56);
      v30 = *(unsigned int *)(v26 + 36);
      v51 = *(_QWORD *)(v26 + 24);
      v52 = *v50;
      if (*v50)
        *v52 += 2;
      *(_QWORD *)(v51 + 8 * v30) = v52;
    }
    else
    {
      v31 = *v29;
      v32 = v56;
      if (v56)
        *(_DWORD *)v56 += 2;
      *(_QWORD *)(v31 + 8 * v30) = v32;
    }
    *(_DWORD *)(v26 + 36) = v30 + 1;
  }
  v33 = v58;
  v58 = 0;
  if (v33)
  {
    if (*v33 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v33;
  }
  v34 = v56;
  v56 = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v28);
    else
      *(_DWORD *)v34 -= 2;
  }
  v35 = v57;
  v36 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(v36, v6);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v35 + 16), &v56, (const WTF::StringImpl *)&v58, (uint64_t)v59);
  if (v60)
  {
    v38 = (uint64_t *)(v35 + 24);
    v39 = *(unsigned int *)(v35 + 36);
    if ((_DWORD)v39 == *(_DWORD *)(v35 + 32))
    {
      v53 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v38, v39 + 1, (unint64_t)&v56);
      v39 = *(unsigned int *)(v35 + 36);
      v54 = *(_QWORD *)(v35 + 24);
      v55 = *v53;
      if (*v53)
        *v55 += 2;
      *(_QWORD *)(v54 + 8 * v39) = v55;
    }
    else
    {
      v40 = *v38;
      v41 = v56;
      if (v56)
        *(_DWORD *)v56 += 2;
      *(_QWORD *)(v40 + 8 * v39) = v41;
    }
    *(_DWORD *)(v35 + 36) = v39 + 1;
  }
  v42 = v58;
  v58 = 0;
  if (v42)
  {
    if (*v42 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v42;
  }
  result = v56;
  v56 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v37);
    else
      *(_DWORD *)result -= 2;
  }
  *a3 = v57;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InspectorCanvas::processArgument(std::optional<std::variant<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>> &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>> &>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *a1;
  if (*a1)
  {
    result = WTF::JSONImpl::Value::create(0);
    *(_QWORD *)a2 = v5;
    *(_DWORD *)(a2 + 8) = 5;
    LOBYTE(v3) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 16) = v3;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InspectorCanvas::processArgument(std::optional<std::variant<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>> &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>> &>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *a1;
  if (*a1)
  {
    result = WTF::JSONImpl::Value::create(0);
    *(_QWORD *)a2 = v5;
    *(_DWORD *)(a2 + 8) = 5;
    LOBYTE(v3) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 16) = v3;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InspectorCanvas::processArgument(std::variant<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>> &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>> &>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *a1;
  if (*a1)
  {
    result = WTF::JSONImpl::Value::create(0);
    *(_QWORD *)a2 = v5;
    *(_DWORD *)(a2 + 8) = 5;
    LOBYTE(v3) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 16) = v3;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InspectorCanvas::processArgument(std::variant<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>> &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>> &>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *a1;
  if (*a1)
  {
    result = WTF::JSONImpl::Value::create(0);
    *(_QWORD *)a2 = v5;
    *(_DWORD *)(a2 + 8) = 5;
    LOBYTE(v3) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 16) = v3;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InspectorCanvas::processArgument(std::variant<WTF::RefPtr<JSC::GenericTypedArrayView<JSC::Float32Adaptor>,WTF::RawPtrTraits<JSC::GenericTypedArrayView<JSC::Float32Adaptor>>,WTF::DefaultRefDerefTraits<JSC::GenericTypedArrayView<JSC::Float32Adaptor>>>,WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::GenericTypedArrayView<JSC::Float32Adaptor>,WTF::RawPtrTraits<JSC::GenericTypedArrayView<JSC::Float32Adaptor>>,WTF::DefaultRefDerefTraits<JSC::GenericTypedArrayView<JSC::Float32Adaptor>>>,WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *a1;
  if (*a1)
  {
    result = WTF::JSONImpl::Value::create(0);
    *(_QWORD *)a2 = v5;
    *(_DWORD *)(a2 + 8) = 5;
    LOBYTE(v3) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 16) = v3;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InspectorCanvas::processArgument(std::variant<WTF::RefPtr<JSC::GenericTypedArrayView<JSC::Int32Adaptor>,WTF::RawPtrTraits<JSC::GenericTypedArrayView<JSC::Int32Adaptor>>,WTF::DefaultRefDerefTraits<JSC::GenericTypedArrayView<JSC::Int32Adaptor>>>,WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::GenericTypedArrayView<JSC::Int32Adaptor>,WTF::RawPtrTraits<JSC::GenericTypedArrayView<JSC::Int32Adaptor>>,WTF::DefaultRefDerefTraits<JSC::GenericTypedArrayView<JSC::Int32Adaptor>>>,WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *a1;
  if (*a1)
  {
    result = WTF::JSONImpl::Value::create(0);
    *(_QWORD *)a2 = v5;
    *(_DWORD *)(a2 + 8) = 5;
    LOBYTE(v3) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 16) = v3;
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InspectorCanvas::processArgument(std::variant<WTF::RefPtr<JSC::GenericTypedArrayView<JSC::Int32Adaptor>,WTF::RawPtrTraits<JSC::GenericTypedArrayView<JSC::Int32Adaptor>>,WTF::DefaultRefDerefTraits<JSC::GenericTypedArrayView<JSC::Int32Adaptor>>>,WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::GenericTypedArrayView<JSC::Int32Adaptor>,WTF::RawPtrTraits<JSC::GenericTypedArrayView<JSC::Int32Adaptor>>,WTF::DefaultRefDerefTraits<JSC::GenericTypedArrayView<JSC::Int32Adaptor>>>,WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  v11 = 0;
  v12 = 0;
  v3 = *((unsigned int *)a1 + 3);
  if ((_DWORD)v3)
  {
    if (v3 >> 29)
    {
      __break(0xC471u);
      return;
    }
    v5 = WTF::fastMalloc((WTF *)(8 * v3));
    v6 = (WTF *)v5;
    LODWORD(v12) = v3;
    v11 = v5;
    v7 = *((unsigned int *)a1 + 3);
    if ((_DWORD)v7)
    {
      v8 = 0;
      v9 = *a1;
      do
      {
        *(double *)(v5 + 8 * v8) = (double)*(int *)(v9 + 4 * v8);
        ++v8;
      }
      while (v7 != v8);
      HIDWORD(v12) = v7;
    }
  }
  else
  {
    v6 = 0;
  }
  WebCore::buildArrayForVector<double>((WTF::JSONImpl::Value **)a2, (uint64_t)&v11);
  *(_DWORD *)(a2 + 8) = 4;
  *(_BYTE *)(a2 + 16) = 1;
  if (v6)
    WTF::fastFree(v6, v10);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InspectorCanvas::processArgument(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &>@<X0>(uint64_t **a1@<X0>, WebCore::ImageBitmap **a2@<X1>, uint64_t a3@<X8>)
{
  return WebCore::InspectorCanvas::processArgument(**a1, *a2, a3);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InspectorCanvas::processArgument(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &>@<X0>(uint64_t **a1@<X0>, WebCore::ImageData **a2@<X1>, uint64_t a3@<X8>)
{
  return WebCore::InspectorCanvas::processArgument(**a1, *a2, a3);
}

unsigned int *std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InspectorCanvas::processArgument(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &>@<X0>(unsigned int ***a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return WebCore::InspectorCanvas::processArgument(**a1, a2, a3);
}

unsigned int *std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InspectorCanvas::processArgument(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &>@<X0>(unsigned int ***a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return WebCore::InspectorCanvas::processArgument(**a1, a2, a3);
}

unsigned int *std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InspectorCanvas::processArgument(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &>@<X0>(unsigned int ***a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return WebCore::InspectorCanvas::processArgument(**a1, a2, a3);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InspectorCanvas::processArgument(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &>@<X0>(uint64_t **a1@<X0>, WebCore::OffscreenCanvas **a2@<X1>, uint64_t a3@<X8>)
{
  return WebCore::InspectorCanvas::processArgument(**a1, a2, a3);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InspectorCanvas::processArgument(std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *a1;
  if (*a1)
  {
    result = WTF::JSONImpl::Value::create(0);
    *(_QWORD *)a2 = v5;
    *(_DWORD *)(a2 + 8) = 6;
    LOBYTE(v3) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 16) = v3;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InspectorCanvas::processArgument(std::variant<WTF::RefPtr<JSC::GenericTypedArrayView<JSC::Uint32Adaptor>,WTF::RawPtrTraits<JSC::GenericTypedArrayView<JSC::Uint32Adaptor>>,WTF::DefaultRefDerefTraits<JSC::GenericTypedArrayView<JSC::Uint32Adaptor>>>,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::GenericTypedArrayView<JSC::Uint32Adaptor>,WTF::RawPtrTraits<JSC::GenericTypedArrayView<JSC::Uint32Adaptor>>,WTF::DefaultRefDerefTraits<JSC::GenericTypedArrayView<JSC::Uint32Adaptor>>>,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *a1;
  if (*a1)
  {
    result = WTF::JSONImpl::Value::create(0);
    *(_QWORD *)a2 = v5;
    *(_DWORD *)(a2 + 8) = 5;
    LOBYTE(v3) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 16) = v3;
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InspectorCanvas::processArgument(std::variant<WTF::RefPtr<JSC::GenericTypedArrayView<JSC::Uint32Adaptor>,WTF::RawPtrTraits<JSC::GenericTypedArrayView<JSC::Uint32Adaptor>>,WTF::DefaultRefDerefTraits<JSC::GenericTypedArrayView<JSC::Uint32Adaptor>>>,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::GenericTypedArrayView<JSC::Uint32Adaptor>,WTF::RawPtrTraits<JSC::GenericTypedArrayView<JSC::Uint32Adaptor>>,WTF::DefaultRefDerefTraits<JSC::GenericTypedArrayView<JSC::Uint32Adaptor>>>,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  double v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;

  v12 = 0;
  v13 = 0;
  v3 = *((unsigned int *)a1 + 3);
  if ((_DWORD)v3)
  {
    if (v3 >> 29)
    {
      __break(0xC471u);
      return;
    }
    v5 = WTF::fastMalloc((WTF *)(8 * v3));
    v7 = (WTF *)v5;
    LODWORD(v13) = v3;
    v12 = v5;
    v8 = *((unsigned int *)a1 + 3);
    if ((_DWORD)v8)
    {
      v9 = 0;
      v10 = *a1;
      do
      {
        LODWORD(v6) = *(_DWORD *)(v10 + 4 * v9);
        v6 = (double)*(unint64_t *)&v6;
        *(double *)(v5 + 8 * v9++) = v6;
      }
      while (v8 != v9);
      HIDWORD(v13) = v8;
    }
  }
  else
  {
    v7 = 0;
  }
  WebCore::buildArrayForVector<double>((WTF::JSONImpl::Value **)a2, (uint64_t)&v12);
  *(_DWORD *)(a2 + 8) = 4;
  *(_BYTE *)(a2 + 16) = 1;
  if (v7)
    WTF::fastFree(v7, v11);
}

BOOL _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJN3WTF6RefPtrIN7WebCore14CanvasGradientENSG_12RawPtrTraitsISJ_EENSG_21DefaultRefDerefTraitsISJ_EEEENSH_INSI_13CanvasPatternENSK_ISP_EENSM_ISP_EEEENSH_INSI_17HTMLCanvasElementENSK_IST_EENSM_IST_EEEENSH_INSI_16HTMLImageElementENSK_ISX_EENSM_ISX_EEEENSH_INSI_16HTMLVideoElementENSK_IS11_EENSM_IS11_EEEENSH_INSI_9ImageDataENSK_IS15_EENSM_IS15_EEEENSH_INSI_11ImageBitmapENSK_IS19_EENSM_IS19_EEEENSH_IN9Inspector15ScriptCallStackENSK_IS1E_EENSM_IS1E_EEEENSH_INS1D_15AsyncStackTraceENSK_IS1I_EENSM_IS1I_EEEENSH_INSI_18CSSStyleImageValueENSK_IS1M_EENSM_IS1M_EEEENS1D_15ScriptCallFrameENSH_INSI_15OffscreenCanvasENSK_IS1R_EENSM_IS1R_EEEENSG_6StringEEEES1Y_EEEDcT_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a2 == *a3;
}

BOOL _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJN3WTF6RefPtrIN7WebCore14CanvasGradientENSG_12RawPtrTraitsISJ_EENSG_21DefaultRefDerefTraitsISJ_EEEENSH_INSI_13CanvasPatternENSK_ISP_EENSM_ISP_EEEENSH_INSI_17HTMLCanvasElementENSK_IST_EENSM_IST_EEEENSH_INSI_16HTMLImageElementENSK_ISX_EENSM_ISX_EEEENSH_INSI_16HTMLVideoElementENSK_IS11_EENSM_IS11_EEEENSH_INSI_9ImageDataENSK_IS15_EENSM_IS15_EEEENSH_INSI_11ImageBitmapENSK_IS19_EENSM_IS19_EEEENSH_IN9Inspector15ScriptCallStackENSK_IS1E_EENSM_IS1E_EEEENSH_INS1D_15AsyncStackTraceENSK_IS1I_EENSM_IS1I_EEEENSH_INSI_18CSSStyleImageValueENSK_IS1M_EENSM_IS1M_EEEENS1D_15ScriptCallFrameENSH_INSI_15OffscreenCanvasENSK_IS1R_EENSM_IS1R_EEEENSG_6StringEEEES1Y_EEEDcT_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a2 == *a3;
}

BOOL _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJN3WTF6RefPtrIN7WebCore14CanvasGradientENSG_12RawPtrTraitsISJ_EENSG_21DefaultRefDerefTraitsISJ_EEEENSH_INSI_13CanvasPatternENSK_ISP_EENSM_ISP_EEEENSH_INSI_17HTMLCanvasElementENSK_IST_EENSM_IST_EEEENSH_INSI_16HTMLImageElementENSK_ISX_EENSM_ISX_EEEENSH_INSI_16HTMLVideoElementENSK_IS11_EENSM_IS11_EEEENSH_INSI_9ImageDataENSK_IS15_EENSM_IS15_EEEENSH_INSI_11ImageBitmapENSK_IS19_EENSM_IS19_EEEENSH_IN9Inspector15ScriptCallStackENSK_IS1E_EENSM_IS1E_EEEENSH_INS1D_15AsyncStackTraceENSK_IS1I_EENSM_IS1I_EEEENSH_INSI_18CSSStyleImageValueENSK_IS1M_EENSM_IS1M_EEEENS1D_15ScriptCallFrameENSH_INSI_15OffscreenCanvasENSK_IS1R_EENSM_IS1R_EEEENSG_6StringEEEES1Y_EEEDcT_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a2 == *a3;
}

BOOL _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJN3WTF6RefPtrIN7WebCore14CanvasGradientENSG_12RawPtrTraitsISJ_EENSG_21DefaultRefDerefTraitsISJ_EEEENSH_INSI_13CanvasPatternENSK_ISP_EENSM_ISP_EEEENSH_INSI_17HTMLCanvasElementENSK_IST_EENSM_IST_EEEENSH_INSI_16HTMLImageElementENSK_ISX_EENSM_ISX_EEEENSH_INSI_16HTMLVideoElementENSK_IS11_EENSM_IS11_EEEENSH_INSI_9ImageDataENSK_IS15_EENSM_IS15_EEEENSH_INSI_11ImageBitmapENSK_IS19_EENSM_IS19_EEEENSH_IN9Inspector15ScriptCallStackENSK_IS1E_EENSM_IS1E_EEEENSH_INS1D_15AsyncStackTraceENSK_IS1I_EENSM_IS1I_EEEENSH_INSI_18CSSStyleImageValueENSK_IS1M_EENSM_IS1M_EEEENS1D_15ScriptCallFrameENSH_INSI_15OffscreenCanvasENSK_IS1R_EENSM_IS1R_EEEENSG_6StringEEEES1Y_EEEDcT_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a2 == *a3;
}

BOOL _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJN3WTF6RefPtrIN7WebCore14CanvasGradientENSG_12RawPtrTraitsISJ_EENSG_21DefaultRefDerefTraitsISJ_EEEENSH_INSI_13CanvasPatternENSK_ISP_EENSM_ISP_EEEENSH_INSI_17HTMLCanvasElementENSK_IST_EENSM_IST_EEEENSH_INSI_16HTMLImageElementENSK_ISX_EENSM_ISX_EEEENSH_INSI_16HTMLVideoElementENSK_IS11_EENSM_IS11_EEEENSH_INSI_9ImageDataENSK_IS15_EENSM_IS15_EEEENSH_INSI_11ImageBitmapENSK_IS19_EENSM_IS19_EEEENSH_IN9Inspector15ScriptCallStackENSK_IS1E_EENSM_IS1E_EEEENSH_INS1D_15AsyncStackTraceENSK_IS1I_EENSM_IS1I_EEEENSH_INSI_18CSSStyleImageValueENSK_IS1M_EENSM_IS1M_EEEENS1D_15ScriptCallFrameENSH_INSI_15OffscreenCanvasENSK_IS1R_EENSM_IS1R_EEEENSG_6StringEEEES1Y_EEEDcT_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a2 == *a3;
}

BOOL _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJN3WTF6RefPtrIN7WebCore14CanvasGradientENSG_12RawPtrTraitsISJ_EENSG_21DefaultRefDerefTraitsISJ_EEEENSH_INSI_13CanvasPatternENSK_ISP_EENSM_ISP_EEEENSH_INSI_17HTMLCanvasElementENSK_IST_EENSM_IST_EEEENSH_INSI_16HTMLImageElementENSK_ISX_EENSM_ISX_EEEENSH_INSI_16HTMLVideoElementENSK_IS11_EENSM_IS11_EEEENSH_INSI_9ImageDataENSK_IS15_EENSM_IS15_EEEENSH_INSI_11ImageBitmapENSK_IS19_EENSM_IS19_EEEENSH_IN9Inspector15ScriptCallStackENSK_IS1E_EENSM_IS1E_EEEENSH_INS1D_15AsyncStackTraceENSK_IS1I_EENSM_IS1I_EEEENSH_INSI_18CSSStyleImageValueENSK_IS1M_EENSM_IS1M_EEEENS1D_15ScriptCallFrameENSH_INSI_15OffscreenCanvasENSK_IS1R_EENSM_IS1R_EEEENSG_6StringEEEES1Y_EEEDcT_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a2 == *a3;
}

BOOL _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJN3WTF6RefPtrIN7WebCore14CanvasGradientENSG_12RawPtrTraitsISJ_EENSG_21DefaultRefDerefTraitsISJ_EEEENSH_INSI_13CanvasPatternENSK_ISP_EENSM_ISP_EEEENSH_INSI_17HTMLCanvasElementENSK_IST_EENSM_IST_EEEENSH_INSI_16HTMLImageElementENSK_ISX_EENSM_ISX_EEEENSH_INSI_16HTMLVideoElementENSK_IS11_EENSM_IS11_EEEENSH_INSI_9ImageDataENSK_IS15_EENSM_IS15_EEEENSH_INSI_11ImageBitmapENSK_IS19_EENSM_IS19_EEEENSH_IN9Inspector15ScriptCallStackENSK_IS1E_EENSM_IS1E_EEEENSH_INS1D_15AsyncStackTraceENSK_IS1I_EENSM_IS1I_EEEENSH_INSI_18CSSStyleImageValueENSK_IS1M_EENSM_IS1M_EEEENS1D_15ScriptCallFrameENSH_INSI_15OffscreenCanvasENSK_IS1R_EENSM_IS1R_EEEENSG_6StringEEEES1Y_EEEDcT_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a2 == *a3;
}

BOOL _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7ELm7EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJN3WTF6RefPtrIN7WebCore14CanvasGradientENSG_12RawPtrTraitsISJ_EENSG_21DefaultRefDerefTraitsISJ_EEEENSH_INSI_13CanvasPatternENSK_ISP_EENSM_ISP_EEEENSH_INSI_17HTMLCanvasElementENSK_IST_EENSM_IST_EEEENSH_INSI_16HTMLImageElementENSK_ISX_EENSM_ISX_EEEENSH_INSI_16HTMLVideoElementENSK_IS11_EENSM_IS11_EEEENSH_INSI_9ImageDataENSK_IS15_EENSM_IS15_EEEENSH_INSI_11ImageBitmapENSK_IS19_EENSM_IS19_EEEENSH_IN9Inspector15ScriptCallStackENSK_IS1E_EENSM_IS1E_EEEENSH_INS1D_15AsyncStackTraceENSK_IS1I_EENSM_IS1I_EEEENSH_INSI_18CSSStyleImageValueENSK_IS1M_EENSM_IS1M_EEEENS1D_15ScriptCallFrameENSH_INSI_15OffscreenCanvasENSK_IS1R_EENSM_IS1R_EEEENSG_6StringEEEES1Y_EEEDcT_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a2 == *a3;
}

BOOL _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8ELm8EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJN3WTF6RefPtrIN7WebCore14CanvasGradientENSG_12RawPtrTraitsISJ_EENSG_21DefaultRefDerefTraitsISJ_EEEENSH_INSI_13CanvasPatternENSK_ISP_EENSM_ISP_EEEENSH_INSI_17HTMLCanvasElementENSK_IST_EENSM_IST_EEEENSH_INSI_16HTMLImageElementENSK_ISX_EENSM_ISX_EEEENSH_INSI_16HTMLVideoElementENSK_IS11_EENSM_IS11_EEEENSH_INSI_9ImageDataENSK_IS15_EENSM_IS15_EEEENSH_INSI_11ImageBitmapENSK_IS19_EENSM_IS19_EEEENSH_IN9Inspector15ScriptCallStackENSK_IS1E_EENSM_IS1E_EEEENSH_INS1D_15AsyncStackTraceENSK_IS1I_EENSM_IS1I_EEEENSH_INSI_18CSSStyleImageValueENSK_IS1M_EENSM_IS1M_EEEENS1D_15ScriptCallFrameENSH_INSI_15OffscreenCanvasENSK_IS1R_EENSM_IS1R_EEEENSG_6StringEEEES1Y_EEEDcT_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a2 == *a3;
}

BOOL _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9ELm9EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJN3WTF6RefPtrIN7WebCore14CanvasGradientENSG_12RawPtrTraitsISJ_EENSG_21DefaultRefDerefTraitsISJ_EEEENSH_INSI_13CanvasPatternENSK_ISP_EENSM_ISP_EEEENSH_INSI_17HTMLCanvasElementENSK_IST_EENSM_IST_EEEENSH_INSI_16HTMLImageElementENSK_ISX_EENSM_ISX_EEEENSH_INSI_16HTMLVideoElementENSK_IS11_EENSM_IS11_EEEENSH_INSI_9ImageDataENSK_IS15_EENSM_IS15_EEEENSH_INSI_11ImageBitmapENSK_IS19_EENSM_IS19_EEEENSH_IN9Inspector15ScriptCallStackENSK_IS1E_EENSM_IS1E_EEEENSH_INS1D_15AsyncStackTraceENSK_IS1I_EENSM_IS1I_EEEENSH_INSI_18CSSStyleImageValueENSK_IS1M_EENSM_IS1M_EEEENS1D_15ScriptCallFrameENSH_INSI_15OffscreenCanvasENSK_IS1R_EENSM_IS1R_EEEENSG_6StringEEEES1Y_EEEDcT_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a2 == *a3;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm10ELm10EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJN3WTF6RefPtrIN7WebCore14CanvasGradientENSG_12RawPtrTraitsISJ_EENSG_21DefaultRefDerefTraitsISJ_EEEENSH_INSI_13CanvasPatternENSK_ISP_EENSM_ISP_EEEENSH_INSI_17HTMLCanvasElementENSK_IST_EENSM_IST_EEEENSH_INSI_16HTMLImageElementENSK_ISX_EENSM_ISX_EEEENSH_INSI_16HTMLVideoElementENSK_IS11_EENSM_IS11_EEEENSH_INSI_9ImageDataENSK_IS15_EENSM_IS15_EEEENSH_INSI_11ImageBitmapENSK_IS19_EENSM_IS19_EEEENSH_IN9Inspector15ScriptCallStackENSK_IS1E_EENSM_IS1E_EEEENSH_INS1D_15AsyncStackTraceENSK_IS1I_EENSM_IS1I_EEEENSH_INSI_18CSSStyleImageValueENSK_IS1M_EENSM_IS1M_EEEENS1D_15ScriptCallFrameENSH_INSI_15OffscreenCanvasENSK_IS1R_EENSM_IS1R_EEEENSG_6StringEEEES1Y_EEEDcT_DpT0_(int a1, Inspector::ScriptCallFrame *this, Inspector::ScriptCallFrame *a3)
{
  return Inspector::ScriptCallFrame::isEqual(this, a3);
}

BOOL _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm11ELm11EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJN3WTF6RefPtrIN7WebCore14CanvasGradientENSG_12RawPtrTraitsISJ_EENSG_21DefaultRefDerefTraitsISJ_EEEENSH_INSI_13CanvasPatternENSK_ISP_EENSM_ISP_EEEENSH_INSI_17HTMLCanvasElementENSK_IST_EENSM_IST_EEEENSH_INSI_16HTMLImageElementENSK_ISX_EENSM_ISX_EEEENSH_INSI_16HTMLVideoElementENSK_IS11_EENSM_IS11_EEEENSH_INSI_9ImageDataENSK_IS15_EENSM_IS15_EEEENSH_INSI_11ImageBitmapENSK_IS19_EENSM_IS19_EEEENSH_IN9Inspector15ScriptCallStackENSK_IS1E_EENSM_IS1E_EEEENSH_INS1D_15AsyncStackTraceENSK_IS1I_EENSM_IS1I_EEEENSH_INSI_18CSSStyleImageValueENSK_IS1M_EENSM_IS1M_EEEENS1D_15ScriptCallFrameENSH_INSI_15OffscreenCanvasENSK_IS1R_EENSM_IS1R_EEEENSG_6StringEEEES1Y_EEEDcT_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a2 == *a3;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm12ELm12EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJN3WTF6RefPtrIN7WebCore14CanvasGradientENSG_12RawPtrTraitsISJ_EENSG_21DefaultRefDerefTraitsISJ_EEEENSH_INSI_13CanvasPatternENSK_ISP_EENSM_ISP_EEEENSH_INSI_17HTMLCanvasElementENSK_IST_EENSM_IST_EEEENSH_INSI_16HTMLImageElementENSK_ISX_EENSM_ISX_EEEENSH_INSI_16HTMLVideoElementENSK_IS11_EENSM_IS11_EEEENSH_INSI_9ImageDataENSK_IS15_EENSM_IS15_EEEENSH_INSI_11ImageBitmapENSK_IS19_EENSM_IS19_EEEENSH_IN9Inspector15ScriptCallStackENSK_IS1E_EENSM_IS1E_EEEENSH_INS1D_15AsyncStackTraceENSK_IS1I_EENSM_IS1I_EEEENSH_INSI_18CSSStyleImageValueENSK_IS1M_EENSM_IS1M_EEEENS1D_15ScriptCallFrameENSH_INSI_15OffscreenCanvasENSK_IS1R_EENSM_IS1R_EEEENSG_6StringEEEES1Y_EEEDcT_DpT0_(uint64_t a1, WTF **a2, const WTF::StringImpl **a3)
{
  return WTF::equal(*a2, *a3, (const WTF::StringImpl *)a3);
}

_DWORD *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_0,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_1,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_2,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_3,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_4,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_5,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_6,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_7,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_8,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_9,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_10,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_11,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_12>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String> &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF::JSONImpl::ArrayBase *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  WTF::JSONImpl::Value *v13;
  char **v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t *v20;
  unint64_t v21;
  WTF::StringImpl *v22;
  WTF::JSONImpl::Value *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  _DWORD *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  char *v32;
  uint64_t *v33;
  _DWORD *v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  WTF::JSONImpl::Value *v37;
  uint64_t *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  unint64_t v44;
  uint64_t v45;
  WTF::StringImpl **v46;
  unint64_t *v47;
  WTF::StringImpl *v48;
  uint64_t *v49;
  uint64_t *v50;
  WTF::StringImpl *v51;
  _DWORD *v52;
  uint64_t *v53;
  _DWORD *result;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  _QWORD v60[5];
  int v61;
  _QWORD v62[5];
  int v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v55 = *a1;
  v3 = *(_QWORD *)(*a1 + 56);
  v57 = "linear-gradient";
  v58 = 16;
  v4 = (WTF::JSONImpl::ArrayBase *)WTF::fastMalloc((WTF *)0x20);
  v56 = WTF::JSONImpl::ArrayBase::ArrayBase(v4);
  v5 = *(_QWORD *)(v2 + 8);
  v62[0] = &v56;
  v62[1] = &v57;
  v62[2] = &v56;
  v62[3] = &v57;
  v62[4] = &v56;
  v6 = *(unsigned int *)(v5 + 76);
  if ((_DWORD)v6 == -1)
    std::__throw_bad_variant_access[abi:sn180100]();
  v60[0] = v62;
  ((void (*)(_QWORD *, uint64_t))off_1E33EE368[v6])(v60, v5 + 48);
  v7 = WTF::fastMalloc((WTF *)0x20);
  WTF::JSONImpl::ArrayBase::ArrayBase((WTF::JSONImpl::ArrayBase *)v7);
  v8 = *(_QWORD *)(v2 + 8);
  v9 = *(unsigned int *)(v8 + 108);
  if ((_DWORD)v9)
  {
    v10 = *(uint64_t **)(v8 + 96);
    v11 = &v10[2 * v9];
    do
    {
      v12 = WTF::fastMalloc((WTF *)0x20);
      v13 = (WTF::JSONImpl::Value *)WTF::JSONImpl::ArrayBase::ArrayBase((WTF::JSONImpl::ArrayBase *)v12);
      v14 = (char **)((char *)v13 + 16);
      WTF::JSONImpl::Value::create(v13, *(float *)v10);
      v15 = *(unsigned int *)(v12 + 28);
      if ((_DWORD)v15 == *(_DWORD *)(v12 + 24))
      {
        v16 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v14, v15 + 1, (unint64_t)v60);
        v15 = *(unsigned int *)(v12 + 28);
        v17 = *(char **)(v12 + 16);
        v18 = *(_QWORD *)v16;
        *(_QWORD *)v16 = 0;
      }
      else
      {
        v17 = *v14;
        v18 = v60[0];
        v60[0] = 0;
      }
      *(_QWORD *)&v17[8 * v15] = v18;
      *(_DWORD *)(v12 + 28) = v15 + 1;
      v19 = (_DWORD *)v60[0];
      v60[0] = 0;
      if (v19)
      {
        if (*v19 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v19;
      }
      v21 = v10[1];
      v20 = v10 + 1;
      WebCore::Color::callOnUnderlyingType<WebCore::serializationForCSS(WebCore::Color const&)::$_0>(&v59, v21, v20);
      v22 = v59;
      v59 = 0;
      v62[0] = v22;
      v63 = 12;
      v23 = (WTF::JSONImpl::Value *)WebCore::InspectorCanvas::indexForData(v3, (unint64_t)v62);
      WTF::JSONImpl::Value::create(v23);
      v25 = *(unsigned int *)(v12 + 28);
      if ((_DWORD)v25 == *(_DWORD *)(v12 + 24))
      {
        v26 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v14, v25 + 1, (unint64_t)v60);
        v25 = *(unsigned int *)(v12 + 28);
        v27 = *(char **)(v12 + 16);
        v28 = *(_QWORD *)v26;
        *(_QWORD *)v26 = 0;
      }
      else
      {
        v27 = *v14;
        v28 = v60[0];
        v60[0] = 0;
      }
      *(_QWORD *)&v27[8 * v25] = v28;
      *(_DWORD *)(v12 + 28) = v25 + 1;
      v29 = (_DWORD *)v60[0];
      v60[0] = 0;
      if (v29)
      {
        if (*v29 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v29;
      }
      if (v63 != -1)
        ((void (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v63])(v60, v62);
      v63 = -1;
      v30 = v59;
      v59 = 0;
      if (v30)
      {
        if (*(_DWORD *)v30 == 2)
          WTF::StringImpl::destroy(v30, v24);
        else
          *(_DWORD *)v30 -= 2;
      }
      v60[0] = v12;
      v31 = *(unsigned int *)(v7 + 28);
      if ((_DWORD)v31 == *(_DWORD *)(v7 + 24))
      {
        v32 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v7 + 16), v31 + 1, (unint64_t)v60);
        v31 = *(unsigned int *)(v7 + 28);
        v33 = (uint64_t *)(*(_QWORD *)(v7 + 16) + 8 * v31);
        v12 = *(_QWORD *)v32;
      }
      else
      {
        v33 = (uint64_t *)(*(_QWORD *)(v7 + 16) + 8 * v31);
        v32 = (char *)v60;
      }
      *(_QWORD *)v32 = 0;
      *v33 = v12;
      *(_DWORD *)(v7 + 28) = v31 + 1;
      v34 = (_DWORD *)v60[0];
      v60[0] = 0;
      if (v34)
      {
        if (*v34 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v34;
      }
      v10 = v20 + 1;
    }
    while (v10 != v11);
  }
  v35 = WTF::fastMalloc((WTF *)0x20);
  WTF::JSONImpl::ArrayBase::ArrayBase((WTF::JSONImpl::ArrayBase *)v35);
  if (v58)
  {
    if (v58 == 1)
    {
      v36 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v36 = v59;
    }
    v60[0] = v36;
  }
  else
  {
    v60[0] = 0;
  }
  v61 = 12;
  v37 = (WTF::JSONImpl::Value *)WebCore::InspectorCanvas::indexForData(v3, (unint64_t)v60);
  v38 = (uint64_t *)(v35 + 16);
  WTF::JSONImpl::Value::create(v37);
  v39 = *(unsigned int *)(v35 + 28);
  if ((_DWORD)v39 == *(_DWORD *)(v35 + 24))
  {
    v40 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v35 + 16), v39 + 1, (unint64_t)&v59);
    v39 = *(unsigned int *)(v35 + 28);
    v41 = *(_QWORD *)(v35 + 16);
    v42 = *(WTF::StringImpl **)v40;
    *(_QWORD *)v40 = 0;
  }
  else
  {
    v41 = *v38;
    v42 = v59;
    v59 = 0;
  }
  *(_QWORD *)(v41 + 8 * v39) = v42;
  *(_DWORD *)(v35 + 28) = v39 + 1;
  v43 = v59;
  v59 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v43;
  }
  if (v61 != -1)
    ((void (*)(WTF::StringImpl **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v61])(&v59, v60);
  v61 = -1;
  v44 = v56;
  v56 = 0;
  v59 = (WTF::StringImpl *)v44;
  v45 = *(unsigned int *)(v35 + 28);
  if ((_DWORD)v45 == *(_DWORD *)(v35 + 24))
  {
    v46 = (WTF::StringImpl **)WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v35 + 16), v45 + 1, (unint64_t)&v59);
    v45 = *(unsigned int *)(v35 + 28);
    v47 = (unint64_t *)(*(_QWORD *)(v35 + 16) + 8 * v45);
    v44 = (unint64_t)*v46;
  }
  else
  {
    v47 = (unint64_t *)(*v38 + 8 * v45);
    v46 = &v59;
  }
  *v46 = 0;
  *v47 = v44;
  LODWORD(v44) = v45 + 1;
  *(_DWORD *)(v35 + 28) = v45 + 1;
  v48 = v59;
  v59 = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 1)
    {
      WTF::JSONImpl::Value::operator delete();
      LODWORD(v44) = *(_DWORD *)(v35 + 28);
    }
    else
    {
      --*(_DWORD *)v48;
    }
  }
  v59 = (WTF::StringImpl *)v7;
  if ((_DWORD)v44 == *(_DWORD *)(v35 + 24))
  {
    v49 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v35 + 16), v44 + 1, (unint64_t)&v59);
    v44 = *(unsigned int *)(v35 + 28);
    v50 = (uint64_t *)(*(_QWORD *)(v35 + 16) + 8 * v44);
    v7 = *v49;
  }
  else
  {
    v50 = (uint64_t *)(*v38 + 8 * v44);
    v49 = (uint64_t *)&v59;
  }
  *v49 = 0;
  *v50 = v7;
  *(_DWORD *)(v35 + 28) = v44 + 1;
  v51 = v59;
  v59 = 0;
  if (v51)
  {
    if (*(_DWORD *)v51 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v51;
  }
  v52 = (_DWORD *)v56;
  v56 = 0;
  if (v52)
  {
    if (*v52 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v52;
  }
  v53 = *(uint64_t **)(v55 + 48);
  result = (_DWORD *)*v53;
  *v53 = v35;
  if (result)
  {
    if (*result == 1)
      return (_DWORD *)WTF::JSONImpl::Value::operator delete();
    else
      --*result;
  }
  return result;
}

_DWORD *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_0,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_1,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_2,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_3,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_4,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_5,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_6,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_7,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_8,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_9,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_10,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_11,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_12>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String> &>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::JSONImpl::Value *v12;
  uint64_t *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::JSONImpl::Value *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  int v35;
  uint64_t *v36;
  _DWORD *result;
  uint64_t v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  _QWORD v41[5];
  int v42;
  _QWORD v43[5];
  int v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  v4 = WebCore::SourceImage::imageBuffer((WebCore::SourceImage *)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 8));
  v5 = v4;
  if (!v4)
    goto LABEL_11;
  v6 = *(_QWORD *)(v4 + 8);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v6);
LABEL_6:
  ++*(_QWORD *)(v6 + 8);
  v8 = __ldxr((unsigned __int8 *)v6);
  if (v8 != 1)
  {
    __clrex();
    goto LABEL_10;
  }
  if (__stlxr(0, (unsigned __int8 *)v6))
LABEL_10:
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
LABEL_11:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v9 = (WTF::StringImpl *)v43[0];
  v10 = WTF::fastMalloc((WTF *)0x20);
  WTF::JSONImpl::ArrayBase::ArrayBase((WTF::JSONImpl::ArrayBase *)v10);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v39 = (WTF::StringImpl *)v43[0];
  WebCore::ImageBuffer::toDataURL(v5, (WebCore *)&v39, 0, 0, 0, &v40);
  v11 = v40;
  v40 = 0;
  v43[0] = v11;
  v44 = 12;
  v12 = (WTF::JSONImpl::Value *)WebCore::InspectorCanvas::indexForData(v3, (unint64_t)v43);
  v13 = (uint64_t *)(v10 + 16);
  WTF::JSONImpl::Value::create(v12);
  v15 = *(unsigned int *)(v10 + 28);
  if ((_DWORD)v15 == *(_DWORD *)(v10 + 24))
  {
    v16 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 16), v15 + 1, (unint64_t)v41);
    v15 = *(unsigned int *)(v10 + 28);
    v17 = *(_QWORD *)(v10 + 16);
    v18 = *(_QWORD *)v16;
    *(_QWORD *)v16 = 0;
  }
  else
  {
    v17 = *v13;
    v18 = v41[0];
    v41[0] = 0;
  }
  *(_QWORD *)(v17 + 8 * v15) = v18;
  *(_DWORD *)(v10 + 28) = v15 + 1;
  v19 = (_DWORD *)v41[0];
  v41[0] = 0;
  if (v19)
  {
    if (*v19 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v19;
  }
  if (v44 != -1)
    ((void (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v44])(v41, v43);
  v44 = -1;
  v20 = v40;
  v40 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v14);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = v39;
  v39 = 0;
  if (!v21)
  {
LABEL_25:
    if (!v9)
      goto LABEL_27;
    goto LABEL_26;
  }
  if (*(_DWORD *)v21 != 2)
  {
    *(_DWORD *)v21 -= 2;
    goto LABEL_25;
  }
  WTF::StringImpl::destroy(v21, v14);
  if (v9)
LABEL_26:
    *(_DWORD *)v9 += 2;
LABEL_27:
  v41[0] = v9;
  v42 = 12;
  v22 = (WTF::JSONImpl::Value *)WebCore::InspectorCanvas::indexForData(v3, (unint64_t)v41);
  WTF::JSONImpl::Value::create(v22);
  v24 = *(unsigned int *)(v10 + 28);
  if ((_DWORD)v24 == *(_DWORD *)(v10 + 24))
  {
    v25 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 16), v24 + 1, (unint64_t)&v40);
    v24 = *(unsigned int *)(v10 + 28);
    v26 = *(_QWORD *)(v10 + 16);
    v27 = *(WTF::StringImpl **)v25;
    *(_QWORD *)v25 = 0;
  }
  else
  {
    v26 = *v13;
    v27 = v40;
    v40 = 0;
  }
  *(_QWORD *)(v26 + 8 * v24) = v27;
  *(_DWORD *)(v10 + 28) = v24 + 1;
  v28 = v40;
  v40 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v28;
  }
  if (v42 != -1)
    ((void (*)(WTF::StringImpl **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v42])(&v40, v41);
  v42 = -1;
  if (!v9)
  {
LABEL_38:
    if (!v5)
      goto LABEL_55;
    goto LABEL_39;
  }
  if (*(_DWORD *)v9 != 2)
  {
    *(_DWORD *)v9 -= 2;
    goto LABEL_38;
  }
  WTF::StringImpl::destroy(v9, v23);
  if (!v5)
    goto LABEL_55;
LABEL_39:
  v29 = *(_QWORD *)(v5 + 8);
  if (__ldaxr((unsigned __int8 *)v29))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v29))
  {
    goto LABEL_43;
  }
  MEMORY[0x19AEA534C](v29);
LABEL_43:
  v31 = *(_QWORD *)(v29 + 8);
  v32 = v31 - 1;
  *(_QWORD *)(v29 + 8) = v31 - 1;
  if (v31 == 1)
  {
    v38 = *(_QWORD *)(v29 + 16);
    v33 = *(_QWORD *)(v29 + 24);
    *(_QWORD *)(v29 + 24) = 0;
    v34 = v38 != 0;
  }
  else
  {
    v33 = 0;
    v34 = 1;
  }
  v35 = __ldxr((unsigned __int8 *)v29);
  if (v35 != 1)
  {
    __clrex();
LABEL_50:
    WTF::Lock::unlockSlow((WTF::Lock *)v29);
    if (v32)
      goto LABEL_55;
    goto LABEL_51;
  }
  if (__stlxr(0, (unsigned __int8 *)v29))
    goto LABEL_50;
  if (v32)
    goto LABEL_55;
LABEL_51:
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  if (!v34)
    WTF::fastFree((WTF *)v29, v23);
LABEL_55:
  v36 = *(uint64_t **)(v2 + 64);
  result = (_DWORD *)*v36;
  *v36 = v10;
  if (result)
  {
    if (*result == 1)
      return (_DWORD *)WTF::JSONImpl::Value::operator delete();
    else
      --*result;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_0,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_1,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_2,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_3,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_4,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_5,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_6,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_7,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_8,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_9,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_10,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_11,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_12>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String> &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t result;
  WTF::StringImpl *v11;
  _QWORD v12[2];
  int v13;
  char v14;
  WTF::StringImpl *v15[5];
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 40);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5 = v15[0];
  v6 = *a2;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::HTMLCanvasElement::toDataURL(v6, (WTF::String *)v15, 0, (uint64_t)v12);
  v8 = v15[0];
  v15[0] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  if (v13)
  {
    v9 = v5;
    if (!v5)
      goto LABEL_12;
LABEL_11:
    *(_DWORD *)v9 += 2;
    goto LABEL_12;
  }
  v9 = (WTF::StringImpl *)v12[0];
  v12[0] = 0;
  if (!v5)
  {
LABEL_10:
    if (!v9)
      goto LABEL_12;
    goto LABEL_11;
  }
  if (*(_DWORD *)v5 != 2)
  {
    *(_DWORD *)v5 -= 2;
    goto LABEL_10;
  }
  WTF::StringImpl::destroy(v5, v7);
  if (v9)
    goto LABEL_11;
LABEL_12:
  v15[0] = v9;
  v16 = 12;
  result = WebCore::InspectorCanvas::indexForData(v4, (unint64_t)v15);
  **(_QWORD **)(v3 + 32) = (int)result;
  if (v16 != -1)
    result = ((uint64_t (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v16])(&v14, v15);
  v16 = -1;
  if (v13 != -1)
    result = ((uint64_t (*)(char *, _QWORD *))off_1E33EE358[v13])(&v14, v12);
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      return WTF::StringImpl::destroy(v9, v11);
    else
      *(_DWORD *)v9 -= 2;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_0,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_1,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_2,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_3,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_4,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_5,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_6,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_7,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_8,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_9,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_10,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_11,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_12>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String> &>(uint64_t a1, uint64_t a2)
{
  _QWORD **v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  float v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  float v15;
  int v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  int v28;
  uint64_t result;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  void *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  float v37[2];
  uint64_t v38;
  WTF::StringImpl *v39;
  float v40;
  int v41;
  WTF::StringImpl *v42;
  unint64_t v43;
  int v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD ***)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5 = v42;
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 176) + 24);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
    {
      if ((*(_WORD *)(v7 + 557) >> 5) - 3 <= 1 && (*(_BYTE *)(v7 + 720) & 0x10) != 0)
      {
        WebCore::CachedImage::brokenImage(1.0, (uint64_t)&v42);
        v34 = (unsigned int *)v42;
        if (v42)
        {
          v8 = (WTF::StringImpl *)*((_QWORD *)v42 + 1);
          v42 = 0;
          do
          {
            v35 = __ldaxr(v34);
            v36 = v35 - 1;
          }
          while (__stlxr(v36, v34));
          if (!v36)
          {
            atomic_store(1u, v34);
            WTF::fastFree((WTF *)v34, v33);
          }
        }
        else
        {
          v8 = 0;
        }
      }
      else
      {
        v8 = *(WTF::StringImpl **)(v7 + 688);
        if (v8)
        {
          {
LABEL_46:
            WebCore::BitmapImage::create(0, 0, 0, (uint64_t *)&v42);
            v9 = v42;
            WebCore::Image::nullImage(void)::nullImage = (uint64_t)v42;
LABEL_7:
            if (v8 == v9)
              goto LABEL_34;
            v37[0] = (*(float (**)(WTF::StringImpl *, _QWORD))(*(_QWORD *)v8 + 168))(v8, 0);
            v37[1] = v10;
            v11 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
            if (v11 != -1)
            {
              v42 = (WTF::StringImpl *)&v38;
              v39 = (WTF::StringImpl *)&v42;
              std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v39, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
            }
            v42 = 0;
            v43 = 0;
            WebCore::ImageBuffer::create<WebCore::ImageBufferCGBitmapBackend,WebCore::ImageBuffer>(v37, (CFTypeRef *)&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace, 1, 0, &v38, 1.0);
            WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)((char *)&v43 + 4));
            v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 16))(v38);
            *(float *)&v13 = (*(float (**)(WTF::StringImpl *, _QWORD))(*(_QWORD *)v8 + 168))(v8, 0);
            v42 = 0;
            v43 = __PAIR64__(v14, v13);
            v15 = (*(float (**)(WTF::StringImpl *, _QWORD))(*(_QWORD *)v8 + 168))(v8, 0);
            v39 = 0;
            v40 = v15;
            v41 = v16;
            (*(void (**)(uint64_t, WTF::StringImpl *, WTF::StringImpl **, WTF::StringImpl **, uint64_t))(*(_QWORD *)v12 + 360))(v12, v8, &v42, &v39, 545);
            v17 = v38;
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v39 = v42;
            WebCore::ImageBuffer::toDataURL(v17, (WebCore *)&v39, 0, 0, 0, &v42);
            v19 = v42;
            v42 = 0;
            if (v5)
            {
              if (*(_DWORD *)v5 == 2)
              {
                WTF::StringImpl::destroy(v5, v18);
                v31 = v42;
                v42 = 0;
                if (v31)
                {
                  if (*(_DWORD *)v31 == 2)
                    WTF::StringImpl::destroy(v31, v18);
                  else
                    *(_DWORD *)v31 -= 2;
                }
              }
              else
              {
                *(_DWORD *)v5 -= 2;
                v42 = 0;
              }
            }
            v20 = v39;
            v39 = 0;
            if (v20)
            {
              if (*(_DWORD *)v20 == 2)
                WTF::StringImpl::destroy(v20, v18);
              else
                *(_DWORD *)v20 -= 2;
            }
            v21 = v38;
            v38 = 0;
            if (!v21)
              goto LABEL_33;
            v22 = *(_QWORD *)(v21 + 8);
            if (__ldaxr((unsigned __int8 *)v22))
            {
              __clrex();
            }
            else if (!__stxr(1u, (unsigned __int8 *)v22))
            {
              goto LABEL_21;
            }
            MEMORY[0x19AEA534C](v22);
LABEL_21:
            v24 = *(_QWORD *)(v22 + 8);
            v25 = v24 - 1;
            *(_QWORD *)(v22 + 8) = v24 - 1;
            if (v24 == 1)
            {
              v32 = *(_QWORD *)(v22 + 16);
              v26 = *(_QWORD *)(v22 + 24);
              *(_QWORD *)(v22 + 24) = 0;
              v27 = v32 != 0;
            }
            else
            {
              v26 = 0;
              v27 = 1;
            }
            v28 = __ldxr((unsigned __int8 *)v22);
            if (v28 == 1)
            {
              if (!__stlxr(0, (unsigned __int8 *)v22))
              {
                if (!v25)
                  goto LABEL_29;
                goto LABEL_33;
              }
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)v22);
            if (!v25)
            {
LABEL_29:
              if (v26)
                (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
              if (!v27)
                WTF::fastFree((WTF *)v22, v18);
            }
LABEL_33:
            v5 = v19;
            goto LABEL_34;
          }
LABEL_6:
          v9 = (WTF::StringImpl *)WebCore::Image::nullImage(void)::nullImage;
          goto LABEL_7;
        }
        {
          v8 = (WTF::StringImpl *)WebCore::Image::nullImage(void)::nullImage;
        }
        else
        {
          WebCore::BitmapImage::create(0, 0, 0, (uint64_t *)&v42);
          v8 = v42;
          WebCore::Image::nullImage(void)::nullImage = (uint64_t)v42;
        }
      }
      if (v8)
      {
          goto LABEL_46;
        goto LABEL_6;
      }
    }
  }
LABEL_34:
  if (v5)
    *(_DWORD *)v5 += 2;
  v42 = v5;
  v44 = 12;
  result = WebCore::InspectorCanvas::indexForData(v4, (unint64_t)&v42);
  **v3 = (int)result;
  if (v44 != -1)
    result = ((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v44])(&v39, &v42);
  v44 = -1;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      return WTF::StringImpl::destroy(v5, v30);
    else
      *(_DWORD *)v5 -= 2;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_0,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_1,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_2,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_3,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_4,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_5,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_6,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_7,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_8,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_9,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_10,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_11,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_12>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String> &>(uint64_t *a1, WebCore::HTMLMediaElement **a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  float v7;
  unsigned int v8;
  uint64_t v9;
  float v10;
  float v11;
  unint64_t v12;
  WebCore::HTMLMediaElement *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t result;
  void *v25;
  WTF::StringImpl **v26;
  WTF::StringImpl *v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  int v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  char v37;
  WTF::StringImpl **v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 24);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5 = v39;
  v6 = *((_QWORD *)*a2 + 142);
  if (!v6)
  {
LABEL_5:
    v8 = 0;
    goto LABEL_6;
  }
  v7 = (*(float (**)(_QWORD))(**(_QWORD **)(v6 + 72) + 288))(*(_QWORD *)(v6 + 72));
  if (v7 < 4294967300.0)
  {
    if (v7 > 0.0)
    {
      v8 = v7;
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  v8 = -1;
LABEL_6:
  v9 = *((_QWORD *)*a2 + 142);
  if (v9)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(v9 + 72) + 288))(*(_QWORD *)(v9 + 72));
    if (v10 >= 4294967300.0)
    {
      LODWORD(v9) = -1;
    }
    else if (v10 <= 0.0)
    {
      LODWORD(v9) = 0;
    }
    else
    {
      LODWORD(v9) = v10;
    }
  }
  v11 = (float)v9;
  *(float *)&v36 = (float)v8;
  *((float *)&v36 + 1) = (float)v9;
  v12 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
  if (v12 != -1)
  {
    v39 = (WTF::StringImpl *)&v37;
    v38 = &v39;
    std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v38, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
  }
  v39 = 0;
  v40 = 0;
  WebCore::ImageBuffer::create<WebCore::ImageBufferCGBitmapBackend,WebCore::ImageBuffer>((float *)&v36, (CFTypeRef *)&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace, 1, 0, (uint64_t *)&v38, 1.0);
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)((char *)&v40 + 4));
  if (v38)
  {
    v13 = *a2;
    v14 = (*((uint64_t (**)(WTF::StringImpl **))*v38 + 2))(v38);
    v39 = 0;
    *(float *)&v40 = (float)v8;
    *((float *)&v40 + 1) = v11;
    v15 = *((_QWORD *)v13 + 142);
    if (!v15)
    {
LABEL_26:
      v20 = (uint64_t)v38;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v36 = v39;
      WebCore::ImageBuffer::toDataURL(v20, (WebCore *)&v36, 0, 0, 0, &v39);
      v22 = v39;
      v39 = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2)
        {
          WTF::StringImpl::destroy(v5, v21);
          v34 = v39;
          v39 = 0;
          if (v34)
          {
            if (*(_DWORD *)v34 == 2)
              WTF::StringImpl::destroy(v34, v21);
            else
              *(_DWORD *)v34 -= 2;
          }
        }
        else
        {
          *(_DWORD *)v5 -= 2;
          v39 = 0;
        }
      }
      v23 = v36;
      v36 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
          WTF::StringImpl::destroy(v23, v21);
        else
          *(_DWORD *)v23 -= 2;
      }
      v5 = v22;
      goto LABEL_33;
    }
    v16 = v14;
    v17 = *(unsigned __int8 **)v15;
    if (__ldaxr(*(unsigned __int8 **)v15))
    {
      __clrex();
    }
    else if (!__stxr(1u, v17))
    {
      goto LABEL_18;
    }
    MEMORY[0x19AEA534C](v17);
LABEL_18:
    ++*((_QWORD *)v17 + 1);
    v19 = __ldxr(v17);
    if (v19 == 1)
    {
      if (!__stlxr(0, v17))
        goto LABEL_23;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v17);
LABEL_23:
    if (!*(_BYTE *)(v15 + 225))
    {
      *(_BYTE *)(v15 + 225) = 1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v15 + 72) + 320))(*(_QWORD *)(v15 + 72), 1);
      WebCore::HTMLMediaElement::visibilityStateChanged(v13);
    }
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v16 + 432))(v16, v15, &v39);
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v15);
    goto LABEL_26;
  }
LABEL_33:
  if (v5)
    *(_DWORD *)v5 += 2;
  v39 = v5;
  v41 = 12;
  result = WebCore::InspectorCanvas::indexForData(v4, (unint64_t)&v39);
  **(_QWORD **)(v3 + 16) = (int)result;
  if (v41 != -1)
    result = ((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v41])(&v36, &v39);
  v41 = -1;
  v26 = v38;
  v38 = 0;
  if (!v26)
    goto LABEL_53;
  v27 = v26[1];
  if (__ldaxr((unsigned __int8 *)v27))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v27))
  {
    goto LABEL_42;
  }
  result = MEMORY[0x19AEA534C](v27);
LABEL_42:
  v29 = *((_QWORD *)v27 + 1);
  v30 = v29 - 1;
  *((_QWORD *)v27 + 1) = v29 - 1;
  if (v29 == 1)
  {
    v35 = *((_QWORD *)v27 + 2);
    v31 = *((_QWORD *)v27 + 3);
    *((_QWORD *)v27 + 3) = 0;
    v32 = v35 != 0;
  }
  else
  {
    v31 = 0;
    v32 = 1;
  }
  v33 = __ldxr((unsigned __int8 *)v27);
  if (v33 != 1)
  {
    __clrex();
LABEL_49:
    result = WTF::Lock::unlockSlow(v27);
    if (v30)
      goto LABEL_53;
    goto LABEL_50;
  }
  if (__stlxr(0, (unsigned __int8 *)v27))
    goto LABEL_49;
  if (v30)
    goto LABEL_53;
LABEL_50:
  if (v31)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  if (!v32)
  {
    result = WTF::fastFree(v27, v25);
    if (!v5)
      return result;
    goto LABEL_54;
  }
LABEL_53:
  if (!v5)
    return result;
LABEL_54:
  if (*(_DWORD *)v5 == 2)
    return WTF::StringImpl::destroy(v5, (WTF::StringImpl *)v25);
  *(_DWORD *)v5 -= 2;
  return result;
}

_DWORD *std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_0,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_1,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_2,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_3,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_4,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_5,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_6,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_7,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_8,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_9,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_10,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_11,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_12>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String> &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char **v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  BOOL v21;
  unint64_t v22;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  _DWORD *v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char **v33;
  uint64_t v34;
  char *v35;
  uint64_t *v36;
  _DWORD *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  _DWORD *v41;
  _DWORD *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  _DWORD *v46;
  _DWORD *v47;
  uint64_t *v48;
  _DWORD *result;
  _DWORD *v50;

  v2 = *a1;
  v3 = *a2;
  v4 = WTF::fastMalloc((WTF *)0x20);
  v5 = WTF::JSONImpl::ArrayBase::ArrayBase((WTF::JSONImpl::ArrayBase *)v4);
  v6 = 0;
  v7 = MEMORY[0x1E0CC10F8];
  v8 = (char **)(v5 + 16);
  v9 = (_BYTE *)MEMORY[0x1E0CC10F0];
  while (1)
  {
    v10 = *(_QWORD *)(v3 + 16);
    v11 = *(_QWORD *)(v10 + 32);
    if (!v11
      || (v12 = *(_QWORD *)(v11 + 16)) == 0
      || (v13 = *(_QWORD *)(v7 + 56)) != 0 && (*(_BYTE *)(v7 + 34) || !*v9) && !((v12 & 0x3FFFFFFFFLL) + v13))
    {
LABEL_25:
      v15 = 0;
      goto LABEL_9;
    }
    v14 = *(_BYTE *)(v10 + 6);
    if ((v14 & 3) == 0)
    {
      v15 = *(_QWORD *)(v10 + 16);
      goto LABEL_9;
    }
    if (*(_BYTE *)(v11 + 64) && (v30 = *(_QWORD *)(v11 + 32)) != 0)
    {
      v19 = atomic_load((unint64_t *)(v30 + 32));
      v14 = *(_BYTE *)(v10 + 6);
    }
    else
    {
      v19 = *(_QWORD *)(v11 + 48);
    }
    v20 = *(_QWORD *)(v10 + 8);
    if ((v14 & 4) != 0)
    {
      v21 = v19 >= v20;
      v22 = v19 - v20;
      if (v21)
        goto LABEL_25;
      v23 = *(_BYTE *)(v10 + 4) - 4;
      if (v23 > 7u)
        LOBYTE(v24) = 0;
      else
        v24 = qword_1969F2150[(char)v23];
      v15 = (-1 << v24) & v22;
    }
    else
    {
      v15 = *(_QWORD *)(v10 + 16);
      v21 = v15 + v20 <= v19 && v19 >= v20;
      if (v21)
        v15 = 0;
    }
LABEL_9:
    if (v6 >= v15)
      break;
    v16 = *(_QWORD *)(v3 + 16);
    v17 = *(_QWORD *)(v7 + 56);
    if (v17 && (*(_BYTE *)(v7 + 34) || !*v9))
      v18 = (*(_QWORD *)(v16 + 24) & 0x3FFFFFFFFLL) + v17;
    else
      v18 = *(_QWORD *)(v16 + 24);
    WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)*(unsigned __int8 *)(v18 + v6));
    v25 = *(unsigned int *)(v4 + 28);
    if ((_DWORD)v25 == *(_DWORD *)(v4 + 24))
    {
      v26 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v8, v25 + 1, (unint64_t)&v50);
      v25 = *(unsigned int *)(v4 + 28);
      v27 = *(char **)(v4 + 16);
      v28 = *(_DWORD **)v26;
      *(_QWORD *)v26 = 0;
    }
    else
    {
      v27 = *v8;
      v28 = v50;
      v50 = 0;
    }
    *(_QWORD *)&v27[8 * v25] = v28;
    *(_DWORD *)(v4 + 28) = v25 + 1;
    v29 = v50;
    v50 = 0;
    if (v29)
    {
      if (*v29 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v29;
    }
    ++v6;
  }
  v31 = WTF::fastMalloc((WTF *)0x20);
  v32 = WTF::JSONImpl::ArrayBase::ArrayBase((WTF::JSONImpl::ArrayBase *)v31);
  v50 = (_DWORD *)v4;
  v33 = (char **)(v32 + 16);
  v34 = *(unsigned int *)(v32 + 28);
  if ((_DWORD)v34 == *(_DWORD *)(v32 + 24))
  {
    v35 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v32 + 16), v34 + 1, (unint64_t)&v50);
    v34 = *(unsigned int *)(v31 + 28);
    v36 = (uint64_t *)(*(_QWORD *)(v31 + 16) + 8 * v34);
    v4 = *(_QWORD *)v35;
  }
  else
  {
    v36 = (uint64_t *)&(*v33)[8 * v34];
    v35 = (char *)&v50;
  }
  *(_QWORD *)v35 = 0;
  *v36 = v4;
  *(_DWORD *)(v31 + 28) = v34 + 1;
  v37 = v50;
  v50 = 0;
  if (v37)
  {
    if (*v37 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v37;
  }
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)*(unsigned int *)(v3 + 4));
  v38 = *(unsigned int *)(v31 + 28);
  if ((_DWORD)v38 == *(_DWORD *)(v31 + 24))
  {
    v39 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v33, v38 + 1, (unint64_t)&v50);
    v38 = *(unsigned int *)(v31 + 28);
    v40 = *(char **)(v31 + 16);
    v41 = *(_DWORD **)v39;
    *(_QWORD *)v39 = 0;
  }
  else
  {
    v40 = *v33;
    v41 = v50;
    v50 = 0;
  }
  *(_QWORD *)&v40[8 * v38] = v41;
  *(_DWORD *)(v31 + 28) = v38 + 1;
  v42 = v50;
  v50 = 0;
  if (v42)
  {
    if (*v42 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v42;
  }
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)*(unsigned int *)(v3 + 8));
  v43 = *(unsigned int *)(v31 + 28);
  if ((_DWORD)v43 == *(_DWORD *)(v31 + 24))
  {
    v44 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v33, v43 + 1, (unint64_t)&v50);
    v43 = *(unsigned int *)(v31 + 28);
    v45 = *(char **)(v31 + 16);
    v46 = *(_DWORD **)v44;
    *(_QWORD *)v44 = 0;
  }
  else
  {
    v45 = *v33;
    v46 = v50;
    v50 = 0;
  }
  *(_QWORD *)&v45[8 * v43] = v46;
  *(_DWORD *)(v31 + 28) = v43 + 1;
  v47 = v50;
  v50 = 0;
  if (v47)
  {
    if (*v47 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v47;
  }
  v48 = *(uint64_t **)(v2 + 80);
  result = (_DWORD *)*v48;
  *v48 = v31;
  if (result)
  {
    if (*result == 1)
      return (_DWORD *)WTF::JSONImpl::Value::operator delete();
    else
      --*result;
  }
  return result;
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_0,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_1,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_2,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_3,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_4,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_5,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_6,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_7,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_8,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_9,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_10,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_11,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_12>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String> &>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *result;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  char v11;
  _QWORD v12[5];
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = *(_QWORD *)(*(_QWORD *)a2 + 16);
  v4 = *(_QWORD *)(*a1 + 104);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::ImageBuffer::toDataURL(v3, (WebCore *)&v9, 0, 0, 0, &v10);
  v5 = v10;
  v10 = 0;
  v12[0] = v5;
  v13 = 12;
  **(_QWORD **)(v2 + 96) = (int)WebCore::InspectorCanvas::indexForData(v4, (unint64_t)v12);
  if (v13 != -1)
    ((void (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v13])(&v11, v12);
  v13 = -1;
  v7 = v10;
  v10 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  result = v9;
  v9 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_DWORD *std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_0,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_1,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_2,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_3,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_4,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_5,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_6,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_7,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_8,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_9,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_10,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_11,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_12>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String> &>(uint64_t *a1, Inspector::ScriptCallStack **a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  int v11;
  WTF::JSONImpl::Value *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  char *v20;
  uint64_t *v21;
  _DWORD *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  _DWORD *v33;
  WTF::JSONImpl::Value *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  _DWORD *v38;
  _DWORD *v39;
  uint64_t *v40;
  _DWORD *result;
  uint64_t v42;
  _DWORD *v43;
  _QWORD v44[5];
  int v45;
  _QWORD v46[4];
  int v47;
  int v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v42 = *a1;
  v3 = *(_QWORD *)(*a1 + 112);
  v4 = WTF::fastMalloc((WTF *)0x20);
  WTF::JSONImpl::ArrayBase::ArrayBase((WTF::JSONImpl::ArrayBase *)v4);
  v5 = WTF::fastMalloc((WTF *)0x20);
  WTF::JSONImpl::ArrayBase::ArrayBase((WTF::JSONImpl::ArrayBase *)v5);
  if (Inspector::ScriptCallStack::size(*a2))
  {
    v6 = 0;
    do
    {
      v7 = Inspector::ScriptCallStack::at(*a2);
      v8 = *(_DWORD **)v7;
      if (*(_QWORD *)v7)
        *v8 += 2;
      v46[0] = v8;
      v9 = *(_DWORD **)(v7 + 8);
      if (v9)
        *v9 += 2;
      v46[1] = v9;
      v10 = *(_DWORD **)(v7 + 16);
      if (v10)
        *v10 += 2;
      v46[2] = v10;
      v11 = *(_DWORD *)(v7 + 32);
      v46[3] = *(_QWORD *)(v7 + 24);
      v47 = v11;
      v48 = 10;
      v12 = (WTF::JSONImpl::Value *)WebCore::InspectorCanvas::indexForData(v3, (unint64_t)v46);
      WTF::JSONImpl::Value::create(v12, (double)(int)v12);
      v13 = *(unsigned int *)(v5 + 28);
      if ((_DWORD)v13 == *(_DWORD *)(v5 + 24))
      {
        v14 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v5 + 16), v13 + 1, (unint64_t)v44);
        v13 = *(unsigned int *)(v5 + 28);
        v15 = *(_QWORD *)(v5 + 16);
        v16 = *(_QWORD *)v14;
        *(_QWORD *)v14 = 0;
      }
      else
      {
        v15 = *(_QWORD *)(v5 + 16);
        v16 = v44[0];
        v44[0] = 0;
      }
      *(_QWORD *)(v15 + 8 * v13) = v16;
      *(_DWORD *)(v5 + 28) = v13 + 1;
      v17 = (_DWORD *)v44[0];
      v44[0] = 0;
      if (v17)
      {
        if (*v17 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v17;
      }
      if (v48 != -1)
        ((void (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v48])(v44, v46);
      v48 = -1;
      ++v6;
    }
    while (v6 < Inspector::ScriptCallStack::size(*a2));
  }
  v44[0] = v5;
  v18 = (uint64_t *)(v4 + 16);
  v19 = *(unsigned int *)(v4 + 28);
  if ((_DWORD)v19 == *(_DWORD *)(v4 + 24))
  {
    v20 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v4 + 16), v19 + 1, (unint64_t)v44);
    v19 = *(unsigned int *)(v4 + 28);
    v21 = (uint64_t *)(*(_QWORD *)(v4 + 16) + 8 * v19);
    v5 = *(_QWORD *)v20;
  }
  else
  {
    v21 = (uint64_t *)(*v18 + 8 * v19);
    v20 = (char *)v44;
  }
  *(_QWORD *)v20 = 0;
  *v21 = v5;
  *(_DWORD *)(v4 + 28) = v19 + 1;
  v22 = (_DWORD *)v44[0];
  v44[0] = 0;
  if (v22)
  {
    if (*v22 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v22;
  }
  WTF::JSONImpl::Value::create(0);
  v23 = *(unsigned int *)(v4 + 28);
  if ((_DWORD)v23 == *(_DWORD *)(v4 + 24))
  {
    v24 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v4 + 16), v23 + 1, (unint64_t)v44);
    v23 = *(unsigned int *)(v4 + 28);
    v25 = *(_QWORD *)(v4 + 16);
    v26 = *(_QWORD *)v24;
    *(_QWORD *)v24 = 0;
  }
  else
  {
    v25 = *v18;
    v26 = v44[0];
    v44[0] = 0;
  }
  *(_QWORD *)(v25 + 8 * v23) = v26;
  *(_DWORD *)(v4 + 28) = v23 + 1;
  v27 = (_DWORD *)v44[0];
  v44[0] = 0;
  if (v27)
  {
    if (*v27 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v27;
  }
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)*((unsigned __int8 *)*a2 + 24));
  v28 = *(unsigned int *)(v4 + 28);
  if ((_DWORD)v28 == *(_DWORD *)(v4 + 24))
  {
    v29 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v4 + 16), v28 + 1, (unint64_t)v44);
    v28 = *(unsigned int *)(v4 + 28);
    v30 = *(_QWORD *)(v4 + 16);
    v31 = *(_QWORD *)v29;
    *(_QWORD *)v29 = 0;
  }
  else
  {
    v30 = *v18;
    v31 = v44[0];
    v44[0] = 0;
  }
  *(_QWORD *)(v30 + 8 * v28) = v31;
  *(_DWORD *)(v4 + 28) = v28 + 1;
  v32 = (_DWORD *)v44[0];
  v44[0] = 0;
  if (v32)
  {
    if (*v32 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v32;
  }
  v33 = (_DWORD *)*((_QWORD *)*a2 + 4);
  if (v33)
  {
    ++*v33;
    v44[0] = v33;
    v45 = 8;
    v34 = (WTF::JSONImpl::Value *)WebCore::InspectorCanvas::indexForData(v3, (unint64_t)v44);
    WTF::JSONImpl::Value::create(v34);
    v35 = *(unsigned int *)(v4 + 28);
    if ((_DWORD)v35 == *(_DWORD *)(v4 + 24))
    {
      v36 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v4 + 16), v35 + 1, (unint64_t)&v43);
      v35 = *(unsigned int *)(v4 + 28);
      v37 = *(_QWORD *)(v4 + 16);
      v38 = *(_DWORD **)v36;
      *(_QWORD *)v36 = 0;
    }
    else
    {
      v37 = *v18;
      v38 = v43;
      v43 = 0;
    }
    *(_QWORD *)(v37 + 8 * v35) = v38;
    *(_DWORD *)(v4 + 28) = v35 + 1;
    v39 = v43;
    v43 = 0;
    if (v39)
    {
      if (*v39 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v39;
    }
    if (v45 != -1)
      ((void (*)(_DWORD **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v45])(&v43, v44);
    v45 = -1;
  }
  v40 = *(uint64_t **)(v42 + 120);
  result = (_DWORD *)*v40;
  *v40 = v4;
  if (result)
  {
    if (*result == 1)
      return (_DWORD *)WTF::JSONImpl::Value::operator delete();
    else
      --*result;
  }
  return result;
}

_DWORD *std::__variant_detail::__visitation::__base::__dispatcher<8ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_0,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_1,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_2,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_3,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_4,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_5,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_6,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_7,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_8,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_9,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_10,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_11,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_12>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String> &>(uint64_t *a1, Inspector::AsyncStackTrace **a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  int v11;
  WTF::JSONImpl::Value *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  char *v20;
  uint64_t *v21;
  _DWORD *v22;
  WTF::JSONImpl::Value *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  _DWORD *v34;
  WTF::JSONImpl::Value *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _DWORD *v39;
  _DWORD *v40;
  uint64_t *v41;
  _DWORD *result;
  uint64_t v43;
  _DWORD *v44;
  _QWORD v45[5];
  int v46;
  _QWORD v47[4];
  int v48;
  int v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v43 = *a1;
  v3 = *(_QWORD *)(*a1 + 128);
  v4 = WTF::fastMalloc((WTF *)0x20);
  WTF::JSONImpl::ArrayBase::ArrayBase((WTF::JSONImpl::ArrayBase *)v4);
  v5 = WTF::fastMalloc((WTF *)0x20);
  WTF::JSONImpl::ArrayBase::ArrayBase((WTF::JSONImpl::ArrayBase *)v5);
  if (Inspector::AsyncStackTrace::size(*a2))
  {
    v6 = 0;
    do
    {
      v7 = Inspector::AsyncStackTrace::at(*a2);
      v8 = *(_DWORD **)v7;
      if (*(_QWORD *)v7)
        *v8 += 2;
      v47[0] = v8;
      v9 = *(_DWORD **)(v7 + 8);
      if (v9)
        *v9 += 2;
      v47[1] = v9;
      v10 = *(_DWORD **)(v7 + 16);
      if (v10)
        *v10 += 2;
      v47[2] = v10;
      v11 = *(_DWORD *)(v7 + 32);
      v47[3] = *(_QWORD *)(v7 + 24);
      v48 = v11;
      v49 = 10;
      v12 = (WTF::JSONImpl::Value *)WebCore::InspectorCanvas::indexForData(v3, (unint64_t)v47);
      WTF::JSONImpl::Value::create(v12, (double)(int)v12);
      v13 = *(unsigned int *)(v5 + 28);
      if ((_DWORD)v13 == *(_DWORD *)(v5 + 24))
      {
        v14 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v5 + 16), v13 + 1, (unint64_t)v45);
        v13 = *(unsigned int *)(v5 + 28);
        v15 = *(_QWORD *)(v5 + 16);
        v16 = *(_QWORD *)v14;
        *(_QWORD *)v14 = 0;
      }
      else
      {
        v15 = *(_QWORD *)(v5 + 16);
        v16 = v45[0];
        v45[0] = 0;
      }
      *(_QWORD *)(v15 + 8 * v13) = v16;
      *(_DWORD *)(v5 + 28) = v13 + 1;
      v17 = (_DWORD *)v45[0];
      v45[0] = 0;
      if (v17)
      {
        if (*v17 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v17;
      }
      if (v49 != -1)
        ((void (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v49])(v45, v47);
      v49 = -1;
      ++v6;
    }
    while (v6 < Inspector::AsyncStackTrace::size(*a2));
  }
  v45[0] = v5;
  v18 = (uint64_t *)(v4 + 16);
  v19 = *(unsigned int *)(v4 + 28);
  if ((_DWORD)v19 == *(_DWORD *)(v4 + 24))
  {
    v20 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v4 + 16), v19 + 1, (unint64_t)v45);
    v19 = *(unsigned int *)(v4 + 28);
    v21 = (uint64_t *)(*(_QWORD *)(v4 + 16) + 8 * v19);
    v5 = *(_QWORD *)v20;
  }
  else
  {
    v21 = (uint64_t *)(*v18 + 8 * v19);
    v20 = (char *)v45;
  }
  *(_QWORD *)v20 = 0;
  *v21 = v5;
  *(_DWORD *)(v4 + 28) = v19 + 1;
  v22 = (_DWORD *)v45[0];
  v45[0] = 0;
  if (v22)
  {
    if (*v22 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v22;
  }
  v23 = (WTF::JSONImpl::Value *)Inspector::AsyncStackTrace::topCallFrameIsBoundary(*a2);
  WTF::JSONImpl::Value::create(v23);
  v24 = *(unsigned int *)(v4 + 28);
  if ((_DWORD)v24 == *(_DWORD *)(v4 + 24))
  {
    v25 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v4 + 16), v24 + 1, (unint64_t)v45);
    v24 = *(unsigned int *)(v4 + 28);
    v26 = *(_QWORD *)(v4 + 16);
    v27 = *(_QWORD *)v25;
    *(_QWORD *)v25 = 0;
  }
  else
  {
    v26 = *v18;
    v27 = v45[0];
    v45[0] = 0;
  }
  *(_QWORD *)(v26 + 8 * v24) = v27;
  *(_DWORD *)(v4 + 28) = v24 + 1;
  v28 = (_DWORD *)v45[0];
  v45[0] = 0;
  if (v28)
  {
    if (*v28 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v28;
  }
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)*((unsigned __int8 *)*a2 + 29));
  v29 = *(unsigned int *)(v4 + 28);
  if ((_DWORD)v29 == *(_DWORD *)(v4 + 24))
  {
    v30 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v4 + 16), v29 + 1, (unint64_t)v45);
    v29 = *(unsigned int *)(v4 + 28);
    v31 = *(_QWORD *)(v4 + 16);
    v32 = *(_QWORD *)v30;
    *(_QWORD *)v30 = 0;
  }
  else
  {
    v31 = *v18;
    v32 = v45[0];
    v45[0] = 0;
  }
  *(_QWORD *)(v31 + 8 * v29) = v32;
  *(_DWORD *)(v4 + 28) = v29 + 1;
  v33 = (_DWORD *)v45[0];
  v45[0] = 0;
  if (v33)
  {
    if (*v33 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v33;
  }
  v34 = (_DWORD *)*((_QWORD *)*a2 + 2);
  if (v34)
  {
    ++*v34;
    v45[0] = v34;
    v46 = 8;
    v35 = (WTF::JSONImpl::Value *)WebCore::InspectorCanvas::indexForData(v3, (unint64_t)v45);
    WTF::JSONImpl::Value::create(v35);
    v36 = *(unsigned int *)(v4 + 28);
    if ((_DWORD)v36 == *(_DWORD *)(v4 + 24))
    {
      v37 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v4 + 16), v36 + 1, (unint64_t)&v44);
      v36 = *(unsigned int *)(v4 + 28);
      v38 = *(_QWORD *)(v4 + 16);
      v39 = *(_DWORD **)v37;
      *(_QWORD *)v37 = 0;
    }
    else
    {
      v38 = *v18;
      v39 = v44;
      v44 = 0;
    }
    *(_QWORD *)(v38 + 8 * v36) = v39;
    *(_DWORD *)(v4 + 28) = v36 + 1;
    v40 = v44;
    v44 = 0;
    if (v40)
    {
      if (*v40 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v40;
    }
    if (v46 != -1)
      ((void (*)(_DWORD **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v46])(&v44, v45);
    v46 = -1;
  }
  v41 = *(uint64_t **)(v43 + 136);
  result = (_DWORD *)*v41;
  *v41 = v4;
  if (result)
  {
    if (*result == 1)
      return (_DWORD *)WTF::JSONImpl::Value::operator delete();
    else
      --*result;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<9ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_0,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_1,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_2,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_3,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_4,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_5,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_6,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_7,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_8,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_9,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_10,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_11,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_12>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String> &>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  float v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  float v16;
  int v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  int v29;
  uint64_t result;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  void *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  float v38[2];
  uint64_t v39;
  WTF::StringImpl *v40;
  float v41;
  int v42;
  WTF::StringImpl *v43;
  unint64_t v44;
  int v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 152);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5 = v43;
  v6 = *(_QWORD *)(*(_QWORD *)a2 + 40);
  if (*(_BYTE *)(v6 + 64))
  {
    v7 = *(_QWORD *)(v6 + 56);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 8);
      if (v8)
      {
        if ((*(_WORD *)(v8 + 557) >> 5) - 3 <= 1 && (*(_BYTE *)(v8 + 720) & 0x10) != 0)
        {
          WebCore::CachedImage::brokenImage(1.0, (uint64_t)&v43);
          v35 = (unsigned int *)v43;
          if (v43)
          {
            v9 = (WTF::StringImpl *)*((_QWORD *)v43 + 1);
            v43 = 0;
            do
            {
              v36 = __ldaxr(v35);
              v37 = v36 - 1;
            }
            while (__stlxr(v37, v35));
            if (!v37)
            {
              atomic_store(1u, v35);
              WTF::fastFree((WTF *)v35, v34);
            }
          }
          else
          {
            v9 = 0;
          }
        }
        else
        {
          v9 = *(WTF::StringImpl **)(v8 + 688);
          if (v9)
          {
            {
LABEL_47:
              WebCore::BitmapImage::create(0, 0, 0, (uint64_t *)&v43);
              v10 = v43;
              WebCore::Image::nullImage(void)::nullImage = (uint64_t)v43;
LABEL_8:
              if (v9 == v10)
                goto LABEL_35;
              v38[0] = (*(float (**)(WTF::StringImpl *, _QWORD))(*(_QWORD *)v9 + 168))(v9, 0);
              v38[1] = v11;
              v12 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
              if (v12 != -1)
              {
                v43 = (WTF::StringImpl *)&v39;
                v40 = (WTF::StringImpl *)&v43;
                std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v40, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
              }
              v43 = 0;
              v44 = 0;
              WebCore::ImageBuffer::create<WebCore::ImageBufferCGBitmapBackend,WebCore::ImageBuffer>(v38, (CFTypeRef *)&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace, 1, 0, &v39, 1.0);
              WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)((char *)&v44 + 4));
              v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 16))(v39);
              *(float *)&v14 = (*(float (**)(WTF::StringImpl *, _QWORD))(*(_QWORD *)v9 + 168))(v9, 0);
              v43 = 0;
              v44 = __PAIR64__(v15, v14);
              v16 = (*(float (**)(WTF::StringImpl *, _QWORD))(*(_QWORD *)v9 + 168))(v9, 0);
              v40 = 0;
              v41 = v16;
              v42 = v17;
              (*(void (**)(uint64_t, WTF::StringImpl *, WTF::StringImpl **, WTF::StringImpl **, uint64_t))(*(_QWORD *)v13 + 360))(v13, v9, &v43, &v40, 545);
              v18 = v39;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v40 = v43;
              WebCore::ImageBuffer::toDataURL(v18, (WebCore *)&v40, 0, 0, 0, &v43);
              v20 = v43;
              v43 = 0;
              if (v5)
              {
                if (*(_DWORD *)v5 == 2)
                {
                  WTF::StringImpl::destroy(v5, v19);
                  v32 = v43;
                  v43 = 0;
                  if (v32)
                  {
                    if (*(_DWORD *)v32 == 2)
                      WTF::StringImpl::destroy(v32, v19);
                    else
                      *(_DWORD *)v32 -= 2;
                  }
                }
                else
                {
                  *(_DWORD *)v5 -= 2;
                  v43 = 0;
                }
              }
              v21 = v40;
              v40 = 0;
              if (v21)
              {
                if (*(_DWORD *)v21 == 2)
                  WTF::StringImpl::destroy(v21, v19);
                else
                  *(_DWORD *)v21 -= 2;
              }
              v22 = v39;
              v39 = 0;
              if (!v22)
                goto LABEL_34;
              v23 = *(_QWORD *)(v22 + 8);
              if (__ldaxr((unsigned __int8 *)v23))
              {
                __clrex();
              }
              else if (!__stxr(1u, (unsigned __int8 *)v23))
              {
                goto LABEL_22;
              }
              MEMORY[0x19AEA534C](v23);
LABEL_22:
              v25 = *(_QWORD *)(v23 + 8);
              v26 = v25 - 1;
              *(_QWORD *)(v23 + 8) = v25 - 1;
              if (v25 == 1)
              {
                v33 = *(_QWORD *)(v23 + 16);
                v27 = *(_QWORD *)(v23 + 24);
                *(_QWORD *)(v23 + 24) = 0;
                v28 = v33 != 0;
              }
              else
              {
                v27 = 0;
                v28 = 1;
              }
              v29 = __ldxr((unsigned __int8 *)v23);
              if (v29 == 1)
              {
                if (!__stlxr(0, (unsigned __int8 *)v23))
                {
                  if (!v26)
                    goto LABEL_30;
                  goto LABEL_34;
                }
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow((WTF::Lock *)v23);
              if (!v26)
              {
LABEL_30:
                if (v27)
                  (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
                if (!v28)
                  WTF::fastFree((WTF *)v23, v19);
              }
LABEL_34:
              v5 = v20;
              goto LABEL_35;
            }
LABEL_7:
            v10 = (WTF::StringImpl *)WebCore::Image::nullImage(void)::nullImage;
            goto LABEL_8;
          }
          {
            v9 = (WTF::StringImpl *)WebCore::Image::nullImage(void)::nullImage;
          }
          else
          {
            WebCore::BitmapImage::create(0, 0, 0, (uint64_t *)&v43);
            v9 = v43;
            WebCore::Image::nullImage(void)::nullImage = (uint64_t)v43;
          }
        }
        if (v9)
        {
            goto LABEL_47;
          goto LABEL_7;
        }
      }
    }
  }
LABEL_35:
  if (v5)
    *(_DWORD *)v5 += 2;
  v43 = v5;
  v45 = 12;
  result = WebCore::InspectorCanvas::indexForData(v4, (unint64_t)&v43);
  **(_QWORD **)(v3 + 144) = (int)result;
  if (v45 != -1)
    result = ((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v45])(&v40, &v43);
  v45 = -1;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      return WTF::StringImpl::destroy(v5, v31);
    else
      *(_DWORD *)v5 -= 2;
  }
  return result;
}

_DWORD *std::__variant_detail::__visitation::__base::__dispatcher<10ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_0,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_1,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_2,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_3,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_4,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_5,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_6,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_7,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_8,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_9,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_10,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_11,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_12>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String> &>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  WTF::JSONImpl::Value *v7;
  uint64_t *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  WTF::JSONImpl::Value *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  WTF::JSONImpl::Value *v19;
  WTF::JSONImpl::Value *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  WTF::JSONImpl::Value *v24;
  WTF::JSONImpl::Value *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  WTF::JSONImpl::Value *v29;
  WTF::JSONImpl::Value *v30;
  uint64_t *v31;
  _DWORD *result;
  WTF::JSONImpl::Value *v33;
  _QWORD v34[5];
  int v35;
  _QWORD v36[5];
  int v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 160);
  v5 = WTF::fastMalloc((WTF *)0x20);
  WTF::JSONImpl::ArrayBase::ArrayBase((WTF::JSONImpl::ArrayBase *)v5);
  v6 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v6 += 2;
  v36[0] = v6;
  v37 = 12;
  v7 = (WTF::JSONImpl::Value *)WebCore::InspectorCanvas::indexForData(v4, (unint64_t)v36);
  v8 = (uint64_t *)(v5 + 16);
  WTF::JSONImpl::Value::create(v7, (double)(int)v7);
  v9 = *(unsigned int *)(v5 + 28);
  if ((_DWORD)v9 == *(_DWORD *)(v5 + 24))
  {
    v10 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v5 + 16), v9 + 1, (unint64_t)v34);
    v9 = *(unsigned int *)(v5 + 28);
    v11 = *(_QWORD *)(v5 + 16);
    v12 = *(_QWORD *)v10;
    *(_QWORD *)v10 = 0;
  }
  else
  {
    v11 = *v8;
    v12 = v34[0];
    v34[0] = 0;
  }
  *(_QWORD *)(v11 + 8 * v9) = v12;
  *(_DWORD *)(v5 + 28) = v9 + 1;
  v13 = (_DWORD *)v34[0];
  v34[0] = 0;
  if (v13)
  {
    if (*v13 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v13;
  }
  if (v37 != -1)
    ((void (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v37])(v34, v36);
  v37 = -1;
  v14 = *(_DWORD **)(a2 + 8);
  if (v14)
    *v14 += 2;
  v34[0] = v14;
  v35 = 12;
  v15 = (WTF::JSONImpl::Value *)WebCore::InspectorCanvas::indexForData(v4, (unint64_t)v34);
  WTF::JSONImpl::Value::create(v15, (double)(int)v15);
  v16 = *(unsigned int *)(v5 + 28);
  if ((_DWORD)v16 == *(_DWORD *)(v5 + 24))
  {
    v17 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v5 + 16), v16 + 1, (unint64_t)&v33);
    v16 = *(unsigned int *)(v5 + 28);
    v18 = *(_QWORD *)(v5 + 16);
    v19 = *(WTF::JSONImpl::Value **)v17;
    *(_QWORD *)v17 = 0;
  }
  else
  {
    v18 = *v8;
    v19 = v33;
    v33 = 0;
  }
  *(_QWORD *)(v18 + 8 * v16) = v19;
  *(_DWORD *)(v5 + 28) = v16 + 1;
  v20 = v33;
  v33 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 1)
      v20 = (WTF::JSONImpl::Value *)WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v20;
  }
  if (v35 != -1)
    v20 = (WTF::JSONImpl::Value *)((uint64_t (*)(WTF::JSONImpl::Value **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v35])(&v33, v34);
  v35 = -1;
  WTF::JSONImpl::Value::create(v20, (double)*(int *)(a2 + 28));
  v21 = *(unsigned int *)(v5 + 28);
  if ((_DWORD)v21 == *(_DWORD *)(v5 + 24))
  {
    v22 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v5 + 16), v21 + 1, (unint64_t)&v33);
    v21 = *(unsigned int *)(v5 + 28);
    v23 = *(_QWORD *)(v5 + 16);
    v24 = *(WTF::JSONImpl::Value **)v22;
    *(_QWORD *)v22 = 0;
  }
  else
  {
    v23 = *v8;
    v24 = v33;
    v33 = 0;
  }
  *(_QWORD *)(v23 + 8 * v21) = v24;
  *(_DWORD *)(v5 + 28) = v21 + 1;
  v25 = v33;
  v33 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 1)
      v25 = (WTF::JSONImpl::Value *)WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v25;
  }
  WTF::JSONImpl::Value::create(v25, (double)*(int *)(a2 + 32));
  v26 = *(unsigned int *)(v5 + 28);
  if ((_DWORD)v26 == *(_DWORD *)(v5 + 24))
  {
    v27 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v5 + 16), v26 + 1, (unint64_t)&v33);
    v26 = *(unsigned int *)(v5 + 28);
    v28 = *(_QWORD *)(v5 + 16);
    v29 = *(WTF::JSONImpl::Value **)v27;
    *(_QWORD *)v27 = 0;
  }
  else
  {
    v28 = *v8;
    v29 = v33;
    v33 = 0;
  }
  *(_QWORD *)(v28 + 8 * v26) = v29;
  *(_DWORD *)(v5 + 28) = v26 + 1;
  v30 = v33;
  v33 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v30;
  }
  v31 = *(uint64_t **)(v3 + 168);
  result = (_DWORD *)*v31;
  *v31 = v5;
  if (result)
  {
    if (*result == 1)
      return (_DWORD *)WTF::JSONImpl::Value::operator delete();
    else
      --*result;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<11ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_0,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_1,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_2,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_3,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_4,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_5,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_6,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_7,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_8,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_9,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_10,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_11,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_12>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String> &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  uint64_t result;
  WTF::StringImpl *v19;
  bmalloc::api *v20;
  void *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  WTF::StringImpl *v26[5];
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = *a2;
  if (*a2)
    ++*(_DWORD *)(v3 + 24);
  v4 = *(_QWORD *)(v2 + 184);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5 = v26[0];
  if (*(_BYTE *)(v3 + 104))
  {
    WebCore::CanvasBase::makeRenderingResultsAvailable(v3 + 32, 1, &v25);
    v6 = v25;
    if (!v25)
    {
      v8 = v5;
      goto LABEL_29;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v24 = v26[0];
    WebCore::ImageBuffer::toDataURL(v6, (WebCore *)&v24, 0, 0, 0, v26);
    v8 = v26[0];
    v26[0] = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
      {
        WTF::StringImpl::destroy(v5, v7);
        v22 = v26[0];
        v26[0] = 0;
        if (v22)
        {
          if (*(_DWORD *)v22 == 2)
            WTF::StringImpl::destroy(v22, v7);
          else
            *(_DWORD *)v22 -= 2;
        }
      }
      else
      {
        *(_DWORD *)v5 -= 2;
        v26[0] = 0;
      }
    }
    v9 = v24;
    v24 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v7);
      else
        *(_DWORD *)v9 -= 2;
    }
    v10 = v25;
    v25 = 0;
    if (!v10)
      goto LABEL_29;
    v11 = *(_QWORD *)(v10 + 8);
    if (__ldaxr((unsigned __int8 *)v11))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v11))
    {
      goto LABEL_17;
    }
    MEMORY[0x19AEA534C](v11);
LABEL_17:
    v13 = *(_QWORD *)(v11 + 8);
    v14 = v13 - 1;
    *(_QWORD *)(v11 + 8) = v13 - 1;
    if (v13 == 1)
    {
      v23 = *(_QWORD *)(v11 + 16);
      v15 = *(_QWORD *)(v11 + 24);
      *(_QWORD *)(v11 + 24) = 0;
      v16 = v23 != 0;
    }
    else
    {
      v15 = 0;
      v16 = 1;
    }
    v17 = __ldxr((unsigned __int8 *)v11);
    if (v17 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v11))
      {
        if (!v14)
          goto LABEL_25;
        goto LABEL_29;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v11);
    if (!v14)
    {
LABEL_25:
      if (v15)
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
      if (!v16)
        WTF::fastFree((WTF *)v11, v7);
    }
LABEL_29:
    v5 = v8;
  }
  if (v5)
    *(_DWORD *)v5 += 2;
  v26[0] = v5;
  v27 = 12;
  result = WebCore::InspectorCanvas::indexForData(v4, (unint64_t)v26);
  **(_QWORD **)(v2 + 176) = (int)result;
  if (v27 != -1)
    result = ((uint64_t (*)(uint64_t *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v27])(&v25, v26);
  v27 = -1;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      result = WTF::StringImpl::destroy(v5, v19);
    else
      *(_DWORD *)v5 -= 2;
  }
  if (*(_DWORD *)(v3 + 24) == 1)
  {
    WebCore::OffscreenCanvas::~OffscreenCanvas((WebCore::OffscreenCanvas *)v3);
    return bmalloc::api::isoDeallocate(v20, v21);
  }
  else
  {
    --*(_DWORD *)(v3 + 24);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<12ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_0,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_1,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_2,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_3,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_4,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_5,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_6,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_7,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_8,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_9,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_10,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_11,WebCore::InspectorCanvas::indexForData(std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>)::$_12>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String> &>(uint64_t *a1, WTF::JSONImpl::Value *this)
{
  uint64_t v2;
  _DWORD **v3;
  _DWORD *v4;
  _DWORD *v6;

  v2 = *a1;
  WTF::JSONImpl::Value::create(this, this);
  v3 = *(_DWORD ***)(v2 + 192);
  v4 = *v3;
  *v3 = v6;
  if (v4)
  {
    if (*v4 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v4;
  }
  return 0;
}

unint64_t WTF::Vector<std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 48 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<std::variant<WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,Inspector::ScriptCallFrame,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  WTF *v3;
  uint64_t v4;
  int v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;

  if (*(unsigned int *)(result + 8) < a2)
  {
    if (a2 >= 0x5555556)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = *(unsigned int *)(result + 12);
      v5 = 48 * a2;
      result = WTF::fastMalloc((WTF *)(48 * a2));
      *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF0) / 0x30;
      *(_QWORD *)v2 = result;
      if ((_DWORD)v4)
      {
        v7 = result;
        v8 = 48 * v4;
        v9 = v3;
        do
        {
          *(_BYTE *)v7 = 0;
          *(_DWORD *)(v7 + 40) = -1;
          v10 = *((unsigned int *)v9 + 10);
          if ((_DWORD)v10 != -1)
          {
            result = ((uint64_t (*)(char *, uint64_t, WTF *))off_1E33EE120[v10])(&v12, v7, v9);
            *(_DWORD *)(v7 + 40) = v10;
            v11 = *((unsigned int *)v9 + 10);
            if ((_DWORD)v11 != -1)
              result = ((uint64_t (*)(char *, WTF *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14CanvasGradientENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_13CanvasPatternENSA_ISF_EENSC_ISF_EEEENS7_INS8_17HTMLCanvasElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_16HTMLImageElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_9ImageDataENSA_ISV_EENSC_ISV_EEEENS7_INS8_11ImageBitmapENSA_ISZ_EENSC_ISZ_EEEENS7_IN9Inspector15ScriptCallStackENSA_IS14_EENSC_IS14_EEEENS7_INS13_15AsyncStackTraceENSA_IS18_EENSC_IS18_EEEENS7_INS8_18CSSStyleImageValueENSA_IS1C_EENSC_IS1C_EEEENS13_15ScriptCallFrameENS7_INS8_15OffscreenCanvasENSA_IS1H_EENSC_IS1H_EEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1O_EEEDcOS1P_DpOT0____fmatrix[v11])(&v13, v9);
          }
          *((_DWORD *)v9 + 10) = -1;
          v7 += 48;
          v9 = (WTF *)((char *)v9 + 48);
          v8 -= 48;
        }
        while (v8);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          *(_DWORD *)(v2 + 8) = 0;
        }
        return WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

WTF::JSONImpl::Value *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InspectorCanvas::buildArrayForCanvasGradient(WebCore::CanvasGradient const&)::$_0,WebCore::InspectorCanvas::buildArrayForCanvasGradient(WebCore::CanvasGradient const&)::$_1,WebCore::InspectorCanvas::buildArrayForCanvasGradient(WebCore::CanvasGradient const&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::Gradient::LinearData,std::__variant_detail::_Trait::RadialData,std::__variant_detail::_Trait::ConicData> const&>(WTF::JSONImpl::Value *a1, float *a2)
{
  uint64_t **v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  WTF::JSONImpl::Value *v8;
  WTF::JSONImpl::Value *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  WTF::JSONImpl::Value *v14;
  WTF::JSONImpl::Value *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  WTF::JSONImpl::Value *v20;
  WTF::JSONImpl::Value *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  WTF::JSONImpl::Value *v26;
  WTF::JSONImpl::Value *result;
  WTF::JSONImpl::Value *v28;

  v3 = *(uint64_t ***)a1;
  v4 = ***(_QWORD ***)a1;
  WTF::JSONImpl::Value::create(a1, *a2);
  v5 = *(unsigned int *)(v4 + 28);
  if ((_DWORD)v5 == *(_DWORD *)(v4 + 24))
  {
    v6 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v4 + 16), v5 + 1, (unint64_t)&v28);
    v5 = *(unsigned int *)(v4 + 28);
    v7 = *(_QWORD *)(v4 + 16);
    v8 = *(WTF::JSONImpl::Value **)v6;
    *(_QWORD *)v6 = 0;
  }
  else
  {
    v7 = *(_QWORD *)(v4 + 16);
    v8 = v28;
    v28 = 0;
  }
  *(_QWORD *)(v7 + 8 * v5) = v8;
  *(_DWORD *)(v4 + 28) = v5 + 1;
  v9 = v28;
  v28 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
      v9 = (WTF::JSONImpl::Value *)WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v9;
  }
  v10 = **v3;
  WTF::JSONImpl::Value::create(v9, a2[1]);
  v11 = *(unsigned int *)(v10 + 28);
  if ((_DWORD)v11 == *(_DWORD *)(v10 + 24))
  {
    v12 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v10 + 16), v11 + 1, (unint64_t)&v28);
    v11 = *(unsigned int *)(v10 + 28);
    v13 = *(_QWORD *)(v10 + 16);
    v14 = *(WTF::JSONImpl::Value **)v12;
    *(_QWORD *)v12 = 0;
  }
  else
  {
    v13 = *(_QWORD *)(v10 + 16);
    v14 = v28;
    v28 = 0;
  }
  *(_QWORD *)(v13 + 8 * v11) = v14;
  *(_DWORD *)(v10 + 28) = v11 + 1;
  v15 = v28;
  v28 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 1)
      v15 = (WTF::JSONImpl::Value *)WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v15;
  }
  v16 = **v3;
  WTF::JSONImpl::Value::create(v15, a2[2]);
  v17 = *(unsigned int *)(v16 + 28);
  if ((_DWORD)v17 == *(_DWORD *)(v16 + 24))
  {
    v18 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v16 + 16), v17 + 1, (unint64_t)&v28);
    v17 = *(unsigned int *)(v16 + 28);
    v19 = *(_QWORD *)(v16 + 16);
    v20 = *(WTF::JSONImpl::Value **)v18;
    *(_QWORD *)v18 = 0;
  }
  else
  {
    v19 = *(_QWORD *)(v16 + 16);
    v20 = v28;
    v28 = 0;
  }
  *(_QWORD *)(v19 + 8 * v17) = v20;
  *(_DWORD *)(v16 + 28) = v17 + 1;
  v21 = v28;
  v28 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 1)
      v21 = (WTF::JSONImpl::Value *)WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v21;
  }
  v22 = **v3;
  WTF::JSONImpl::Value::create(v21, a2[3]);
  v23 = *(unsigned int *)(v22 + 28);
  if ((_DWORD)v23 == *(_DWORD *)(v22 + 24))
  {
    v24 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v22 + 16), v23 + 1, (unint64_t)&v28);
    v23 = *(unsigned int *)(v22 + 28);
    v25 = *(_QWORD *)(v22 + 16);
    v26 = *(WTF::JSONImpl::Value **)v24;
    *(_QWORD *)v24 = 0;
  }
  else
  {
    v25 = *(_QWORD *)(v22 + 16);
    v26 = v28;
    v28 = 0;
  }
  *(_QWORD *)(v25 + 8 * v23) = v26;
  *(_DWORD *)(v22 + 28) = v23 + 1;
  result = v28;
  v28 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF::JSONImpl::Value *)WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)result;
  }
  return result;
}

WTF::JSONImpl::Value *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InspectorCanvas::buildArrayForCanvasGradient(WebCore::CanvasGradient const&)::$_0,WebCore::InspectorCanvas::buildArrayForCanvasGradient(WebCore::CanvasGradient const&)::$_1,WebCore::InspectorCanvas::buildArrayForCanvasGradient(WebCore::CanvasGradient const&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::Gradient::LinearData,std::__variant_detail::_Trait::RadialData,std::__variant_detail::_Trait::ConicData> const&>(WTF::JSONImpl::Value *a1, float *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  WTF::JSONImpl::Value *v9;
  WTF::JSONImpl::Value *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  WTF::JSONImpl::Value *v15;
  WTF::JSONImpl::Value *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  WTF::JSONImpl::Value *v21;
  WTF::JSONImpl::Value *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  WTF::JSONImpl::Value *v27;
  WTF::JSONImpl::Value *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  WTF::JSONImpl::Value *v33;
  WTF::JSONImpl::Value *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  WTF::JSONImpl::Value *v39;
  WTF::JSONImpl::Value *result;
  WTF::JSONImpl::Value *v41;

  v3 = *(_QWORD *)a1;
  v4 = *(_QWORD **)(*(_QWORD *)a1 + 8);
  *v4 = "radial-gradient";
  v4[1] = 16;
  v5 = **(_QWORD **)(v3 + 16);
  WTF::JSONImpl::Value::create(a1, *a2);
  v6 = *(unsigned int *)(v5 + 28);
  if ((_DWORD)v6 == *(_DWORD *)(v5 + 24))
  {
    v7 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v5 + 16), v6 + 1, (unint64_t)&v41);
    v6 = *(unsigned int *)(v5 + 28);
    v8 = *(_QWORD *)(v5 + 16);
    v9 = *(WTF::JSONImpl::Value **)v7;
    *(_QWORD *)v7 = 0;
  }
  else
  {
    v8 = *(_QWORD *)(v5 + 16);
    v9 = v41;
    v41 = 0;
  }
  *(_QWORD *)(v8 + 8 * v6) = v9;
  *(_DWORD *)(v5 + 28) = v6 + 1;
  v10 = v41;
  v41 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 1)
      v10 = (WTF::JSONImpl::Value *)WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v10;
  }
  v11 = **(_QWORD **)(v3 + 16);
  WTF::JSONImpl::Value::create(v10, a2[1]);
  v12 = *(unsigned int *)(v11 + 28);
  if ((_DWORD)v12 == *(_DWORD *)(v11 + 24))
  {
    v13 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v11 + 16), v12 + 1, (unint64_t)&v41);
    v12 = *(unsigned int *)(v11 + 28);
    v14 = *(_QWORD *)(v11 + 16);
    v15 = *(WTF::JSONImpl::Value **)v13;
    *(_QWORD *)v13 = 0;
  }
  else
  {
    v14 = *(_QWORD *)(v11 + 16);
    v15 = v41;
    v41 = 0;
  }
  *(_QWORD *)(v14 + 8 * v12) = v15;
  *(_DWORD *)(v11 + 28) = v12 + 1;
  v16 = v41;
  v41 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 1)
      v16 = (WTF::JSONImpl::Value *)WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v16;
  }
  v17 = **(_QWORD **)(v3 + 16);
  WTF::JSONImpl::Value::create(v16, a2[4]);
  v18 = *(unsigned int *)(v17 + 28);
  if ((_DWORD)v18 == *(_DWORD *)(v17 + 24))
  {
    v19 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v17 + 16), v18 + 1, (unint64_t)&v41);
    v18 = *(unsigned int *)(v17 + 28);
    v20 = *(_QWORD *)(v17 + 16);
    v21 = *(WTF::JSONImpl::Value **)v19;
    *(_QWORD *)v19 = 0;
  }
  else
  {
    v20 = *(_QWORD *)(v17 + 16);
    v21 = v41;
    v41 = 0;
  }
  *(_QWORD *)(v20 + 8 * v18) = v21;
  *(_DWORD *)(v17 + 28) = v18 + 1;
  v22 = v41;
  v41 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 1)
      v22 = (WTF::JSONImpl::Value *)WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v22;
  }
  v23 = **(_QWORD **)(v3 + 16);
  WTF::JSONImpl::Value::create(v22, a2[2]);
  v24 = *(unsigned int *)(v23 + 28);
  if ((_DWORD)v24 == *(_DWORD *)(v23 + 24))
  {
    v25 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v23 + 16), v24 + 1, (unint64_t)&v41);
    v24 = *(unsigned int *)(v23 + 28);
    v26 = *(_QWORD *)(v23 + 16);
    v27 = *(WTF::JSONImpl::Value **)v25;
    *(_QWORD *)v25 = 0;
  }
  else
  {
    v26 = *(_QWORD *)(v23 + 16);
    v27 = v41;
    v41 = 0;
  }
  *(_QWORD *)(v26 + 8 * v24) = v27;
  *(_DWORD *)(v23 + 28) = v24 + 1;
  v28 = v41;
  v41 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 1)
      v28 = (WTF::JSONImpl::Value *)WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v28;
  }
  v29 = **(_QWORD **)(v3 + 16);
  WTF::JSONImpl::Value::create(v28, a2[3]);
  v30 = *(unsigned int *)(v29 + 28);
  if ((_DWORD)v30 == *(_DWORD *)(v29 + 24))
  {
    v31 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v29 + 16), v30 + 1, (unint64_t)&v41);
    v30 = *(unsigned int *)(v29 + 28);
    v32 = *(_QWORD *)(v29 + 16);
    v33 = *(WTF::JSONImpl::Value **)v31;
    *(_QWORD *)v31 = 0;
  }
  else
  {
    v32 = *(_QWORD *)(v29 + 16);
    v33 = v41;
    v41 = 0;
  }
  *(_QWORD *)(v32 + 8 * v30) = v33;
  *(_DWORD *)(v29 + 28) = v30 + 1;
  v34 = v41;
  v41 = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 1)
      v34 = (WTF::JSONImpl::Value *)WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v34;
  }
  v35 = **(_QWORD **)(v3 + 16);
  WTF::JSONImpl::Value::create(v34, a2[5]);
  v36 = *(unsigned int *)(v35 + 28);
  if ((_DWORD)v36 == *(_DWORD *)(v35 + 24))
  {
    v37 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v35 + 16), v36 + 1, (unint64_t)&v41);
    v36 = *(unsigned int *)(v35 + 28);
    v38 = *(_QWORD *)(v35 + 16);
    v39 = *(WTF::JSONImpl::Value **)v37;
    *(_QWORD *)v37 = 0;
  }
  else
  {
    v38 = *(_QWORD *)(v35 + 16);
    v39 = v41;
    v41 = 0;
  }
  *(_QWORD *)(v38 + 8 * v36) = v39;
  *(_DWORD *)(v35 + 28) = v36 + 1;
  result = v41;
  v41 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF::JSONImpl::Value *)WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)result;
  }
  return result;
}

WTF::JSONImpl::Value *std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InspectorCanvas::buildArrayForCanvasGradient(WebCore::CanvasGradient const&)::$_0,WebCore::InspectorCanvas::buildArrayForCanvasGradient(WebCore::CanvasGradient const&)::$_1,WebCore::InspectorCanvas::buildArrayForCanvasGradient(WebCore::CanvasGradient const&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::Gradient::LinearData,std::__variant_detail::_Trait::RadialData,std::__variant_detail::_Trait::ConicData> const&>(WTF::JSONImpl::Value *a1, float *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  WTF::JSONImpl::Value *v9;
  WTF::JSONImpl::Value *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  WTF::JSONImpl::Value *v15;
  WTF::JSONImpl::Value *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  WTF::JSONImpl::Value *v21;
  WTF::JSONImpl::Value *result;
  WTF::JSONImpl::Value *v23;

  v3 = *(_QWORD *)a1;
  v4 = *(_QWORD **)(*(_QWORD *)a1 + 24);
  *v4 = "conic-gradient";
  v4[1] = 15;
  v5 = **(_QWORD **)(v3 + 32);
  WTF::JSONImpl::Value::create(a1, *a2);
  v6 = *(unsigned int *)(v5 + 28);
  if ((_DWORD)v6 == *(_DWORD *)(v5 + 24))
  {
    v7 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v5 + 16), v6 + 1, (unint64_t)&v23);
    v6 = *(unsigned int *)(v5 + 28);
    v8 = *(_QWORD *)(v5 + 16);
    v9 = *(WTF::JSONImpl::Value **)v7;
    *(_QWORD *)v7 = 0;
  }
  else
  {
    v8 = *(_QWORD *)(v5 + 16);
    v9 = v23;
    v23 = 0;
  }
  *(_QWORD *)(v8 + 8 * v6) = v9;
  *(_DWORD *)(v5 + 28) = v6 + 1;
  v10 = v23;
  v23 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 1)
      v10 = (WTF::JSONImpl::Value *)WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v10;
  }
  v11 = **(_QWORD **)(v3 + 32);
  WTF::JSONImpl::Value::create(v10, a2[1]);
  v12 = *(unsigned int *)(v11 + 28);
  if ((_DWORD)v12 == *(_DWORD *)(v11 + 24))
  {
    v13 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v11 + 16), v12 + 1, (unint64_t)&v23);
    v12 = *(unsigned int *)(v11 + 28);
    v14 = *(_QWORD *)(v11 + 16);
    v15 = *(WTF::JSONImpl::Value **)v13;
    *(_QWORD *)v13 = 0;
  }
  else
  {
    v14 = *(_QWORD *)(v11 + 16);
    v15 = v23;
    v23 = 0;
  }
  *(_QWORD *)(v14 + 8 * v12) = v15;
  *(_DWORD *)(v11 + 28) = v12 + 1;
  v16 = v23;
  v23 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 1)
      v16 = (WTF::JSONImpl::Value *)WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v16;
  }
  v17 = **(_QWORD **)(v3 + 32);
  WTF::JSONImpl::Value::create(v16, a2[2]);
  v18 = *(unsigned int *)(v17 + 28);
  if ((_DWORD)v18 == *(_DWORD *)(v17 + 24))
  {
    v19 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v17 + 16), v18 + 1, (unint64_t)&v23);
    v18 = *(unsigned int *)(v17 + 28);
    v20 = *(_QWORD *)(v17 + 16);
    v21 = *(WTF::JSONImpl::Value **)v19;
    *(_QWORD *)v19 = 0;
  }
  else
  {
    v20 = *(_QWORD *)(v17 + 16);
    v21 = v23;
    v23 = 0;
  }
  *(_QWORD *)(v20 + 8 * v18) = v21;
  *(_DWORD *)(v17 + 28) = v18 + 1;
  result = v23;
  v23 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF::JSONImpl::Value *)WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)result;
  }
  return result;
}

WebCore::InspectorInstrumentation *WebCore::InspectorCanvasCallTracer::processArgument@<X0>(uint64_t a1@<X0>, int a2@<W1>, _BYTE *a3@<X8>)
{
  WebCore::InspectorInstrumentation *result;
  WebCore::ScriptExecutionContext *v7;

  result = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 144))(*(_QWORD *)(a1 + 32));
  if (result)
  {
    result = (WebCore::InspectorInstrumentation *)WebCore::InspectorInstrumentation::instrumentingAgents(result, v7);
    if (result)
    {
      result = (WebCore::InspectorInstrumentation *)*((_QWORD *)result + 12);
      if (result)
        return (WebCore::InspectorInstrumentation *)WebCore::InspectorCanvasAgent::processArgument((uint64_t)result, a1, a2, (uint64_t)a3);
    }
  }
  *a3 = 0;
  a3[16] = 0;
  return result;
}

{
  WebCore::InspectorInstrumentation *result;
  WebCore::ScriptExecutionContext *v7;

  result = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 144))(*(_QWORD *)(a1 + 32));
  if (result)
  {
    result = (WebCore::InspectorInstrumentation *)WebCore::InspectorInstrumentation::instrumentingAgents(result, v7);
    if (result)
    {
      result = (WebCore::InspectorInstrumentation *)*((_QWORD *)result + 12);
      if (result)
        return (WebCore::InspectorInstrumentation *)WebCore::InspectorCanvasAgent::processArgument((uint64_t)result, a1, a2, (uint64_t)a3);
    }
  }
  *a3 = 0;
  a3[16] = 0;
  return result;
}

{
  WebCore::InspectorInstrumentation *result;
  WebCore::ScriptExecutionContext *v7;

  result = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 144))(*(_QWORD *)(a1 + 32));
  if (result)
  {
    result = (WebCore::InspectorInstrumentation *)WebCore::InspectorInstrumentation::instrumentingAgents(result, v7);
    if (result)
    {
      result = (WebCore::InspectorInstrumentation *)*((_QWORD *)result + 12);
      if (result)
        return (WebCore::InspectorInstrumentation *)WebCore::InspectorCanvasAgent::processArgument((uint64_t)result, a1, a2, (uint64_t)a3);
    }
  }
  *a3 = 0;
  a3[16] = 0;
  return result;
}

{
  WebCore::InspectorInstrumentation *result;
  WebCore::ScriptExecutionContext *v7;

  result = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 144))(*(_QWORD *)(a1 + 32));
  if (result)
  {
    result = (WebCore::InspectorInstrumentation *)WebCore::InspectorInstrumentation::instrumentingAgents(result, v7);
    if (result)
    {
      result = (WebCore::InspectorInstrumentation *)*((_QWORD *)result + 12);
      if (result)
        return (WebCore::InspectorInstrumentation *)WebCore::InspectorCanvasAgent::processArgument((uint64_t)result, a1, a2, (uint64_t)a3);
    }
  }
  *a3 = 0;
  a3[16] = 0;
  return result;
}

{
  WebCore::InspectorInstrumentation *result;
  WebCore::ScriptExecutionContext *v7;

  result = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 144))(*(_QWORD *)(a1 + 32));
  if (result)
  {
    result = (WebCore::InspectorInstrumentation *)WebCore::InspectorInstrumentation::instrumentingAgents(result, v7);
    if (result)
    {
      result = (WebCore::InspectorInstrumentation *)*((_QWORD *)result + 12);
      if (result)
        return (WebCore::InspectorInstrumentation *)WebCore::InspectorCanvasAgent::processArgument((uint64_t)result, a1, a2, (uint64_t)a3);
    }
  }
  *a3 = 0;
  a3[16] = 0;
  return result;
}

WebCore::InspectorInstrumentation *WebCore::InspectorCanvasCallTracer::processArgument@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  WebCore::InspectorInstrumentation *result;
  WebCore::ScriptExecutionContext *v7;

  result = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 144))(*(_QWORD *)(a1 + 32));
  if (result)
  {
    result = (WebCore::InspectorInstrumentation *)WebCore::InspectorInstrumentation::instrumentingAgents(result, v7);
    if (result)
    {
      result = (WebCore::InspectorInstrumentation *)*((_QWORD *)result + 12);
      if (result)
        return (WebCore::InspectorInstrumentation *)WebCore::InspectorCanvasAgent::processArgument((uint64_t)result, a1, a2);
    }
  }
  *a3 = 0;
  a3[16] = 0;
  return result;
}

WebCore::InspectorInstrumentation *WebCore::InspectorCanvasCallTracer::processArgument@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  WebCore::InspectorInstrumentation *result;
  WebCore::ScriptExecutionContext *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  WTF *v14;
  void *v15;

  result = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 144))(*(_QWORD *)(a1 + 32));
  if (!result)
    goto LABEL_9;
  result = (WebCore::InspectorInstrumentation *)WebCore::InspectorInstrumentation::instrumentingAgents(result, v5);
  if (!result)
    goto LABEL_9;
  v7 = *((_QWORD *)result + 12);
  if (!v7 || !*(_DWORD *)(v7 + 76))
    goto LABEL_9;
  v8 = *(_QWORD *)(v7 + 64);
  v9 = *(unsigned int *)(v7 + 72);
  if ((_DWORD)v9)
  {
    v10 = 16 * v9;
    v11 = *(_QWORD **)(v7 + 64);
    while (!*v11)
    {
      v11 += 2;
      v10 -= 16;
      if (!v10)
        goto LABEL_9;
    }
  }
  else
  {
    v11 = *(_QWORD **)(v7 + 64);
  }
  v12 = (_QWORD *)(v8 + 16 * v9);
LABEL_12:
  if (v11 == v12)
    goto LABEL_9;
  result = (WebCore::InspectorInstrumentation *)v11[1];
  if (*(_QWORD *)(*((_QWORD *)result + 2) + 8) != a1)
  {
    while (1)
    {
      v11 += 2;
      if (v11 == v12)
        break;
      if (*v11)
        goto LABEL_12;
    }
LABEL_9:
    *a2 = 0;
    a2[16] = 0;
    return result;
  }
  v13 = (*(_DWORD *)result)++;
  *a2 = 0;
  a2[16] = 0;
  if (v13)
  {
    *(_DWORD *)result = v13;
  }
  else
  {
    WebCore::InspectorCanvas::~InspectorCanvas(result, v6);
    return (WebCore::InspectorInstrumentation *)WTF::fastFree(v14, v15);
  }
  return result;
}

WebCore::InspectorInstrumentation *WebCore::InspectorCanvasCallTracer::processArgument@<X0>(WTF::StringImpl *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  WebCore::InspectorInstrumentation *result;
  WebCore::ScriptExecutionContext *v7;

  result = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 4) + 144))(*((_QWORD **)a1 + 4));
  if (result)
  {
    result = (WebCore::InspectorInstrumentation *)WebCore::InspectorInstrumentation::instrumentingAgents(result, v7);
    if (result)
    {
      result = (WebCore::InspectorInstrumentation *)*((_QWORD *)result + 12);
      if (result)
        return (WebCore::InspectorInstrumentation *)WebCore::InspectorCanvasAgent::processArgument((uint64_t)result, a1, a2, (uint64_t)a3);
    }
  }
  *a3 = 0;
  a3[16] = 0;
  return result;
}

WebCore::InspectorInstrumentation *WebCore::InspectorCanvasCallTracer::processArgument@<X0>(WebCore::InspectorCanvasCallTracer *this@<X0>, int **a2@<X1>, WTF::String *a3@<X2>, _BYTE *a4@<X8>)
{
  WebCore::InspectorInstrumentation *result;
  WebCore::ScriptExecutionContext *v8;

  result = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD, int **, WTF::String *))(**((_QWORD **)this + 4) + 144))(*((_QWORD *)this + 4), a2, a3);
  if (result)
  {
    result = (WebCore::InspectorInstrumentation *)WebCore::InspectorInstrumentation::instrumentingAgents(result, v8);
    if (result)
    {
      result = (WebCore::InspectorInstrumentation *)*((_QWORD *)result + 12);
      if (result)
        return (WebCore::InspectorInstrumentation *)WebCore::InspectorCanvasAgent::processArgument(result, this, a2, (uint64_t)a4);
    }
  }
  *a4 = 0;
  a4[16] = 0;
  return result;
}

WTF::JSONImpl::Value *WebCore::InspectorCanvasCallTracer::processArgument@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  WTF::JSONImpl::Value *result;
  WebCore::ScriptExecutionContext *v7;

  result = (WTF::JSONImpl::Value *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 144))(*(_QWORD *)(a1 + 32));
  if (result)
  {
    result = (WTF::JSONImpl::Value *)WebCore::InspectorInstrumentation::instrumentingAgents(result, v7);
    if (result)
    {
      result = (WTF::JSONImpl::Value *)*((_QWORD *)result + 12);
      if (result)
        return WebCore::InspectorCanvasAgent::processArgument((uint64_t)result, a1, a2, (uint64_t)a3);
    }
  }
  *a3 = 0;
  a3[16] = 0;
  return result;
}

WebCore::InspectorInstrumentation *WebCore::InspectorCanvasCallTracer::processArgument@<X0>(WebCore::InspectorCanvasCallTracer *this@<X0>, WebCore::CanvasRenderingContext *a2@<X1>, double a3@<D0>, _BYTE *a4@<X8>)
{
  WebCore::InspectorInstrumentation *result;
  WebCore::ScriptExecutionContext *v8;

  result = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD, WebCore::CanvasRenderingContext *))(**((_QWORD **)this + 4) + 144))(*((_QWORD *)this + 4), a2);
  if (result)
  {
    result = (WebCore::InspectorInstrumentation *)WebCore::InspectorInstrumentation::instrumentingAgents(result, v8);
    if (result)
    {
      result = (WebCore::InspectorInstrumentation *)*((_QWORD *)result + 12);
      if (result)
        return (WebCore::InspectorInstrumentation *)WebCore::InspectorCanvasAgent::processArgument(result, this, a3, (uint64_t)a4);
    }
  }
  *a4 = 0;
  a4[16] = 0;
  return result;
}

WebCore::InspectorInstrumentation *WebCore::InspectorCanvasCallTracer::recordAction(WebCore::CanvasRenderingContext *a1, const WTF::StringImpl *a2, _QWORD *a3)
{
  WebCore::InspectorInstrumentation *result;
  WebCore::ScriptExecutionContext *v7;

  result = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 4) + 144))(*((_QWORD **)a1 + 4));
  if (result)
  {
    result = (WebCore::InspectorInstrumentation *)WebCore::InspectorInstrumentation::instrumentingAgents(result, v7);
    if (result)
    {
      result = (WebCore::InspectorInstrumentation *)*((_QWORD *)result + 12);
      if (result)
        return (WebCore::InspectorInstrumentation *)WebCore::InspectorCanvasAgent::recordAction((uint64_t)result, a1, a2, a3);
    }
  }
  return result;
}

WebCore::InspectorInstrumentation *WebCore::InspectorCanvasCallTracer::processArgument@<X0>(WebCore::InspectorCanvasCallTracer *this@<X0>, const WebCore::CanvasBase *a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned int v3;
  WebCore::CanvasRenderingContext *v5;
  WebCore::InspectorInstrumentation *result;
  WebCore::ScriptExecutionContext *v7;

  v3 = a2;
  v5 = (WebCore::CanvasRenderingContext *)(*(uint64_t (**)(WebCore::InspectorCanvasCallTracer *))(*(_QWORD *)this + 88))(this);
  result = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD *))(**((_QWORD **)v5 + 4) + 144))(*((_QWORD **)v5 + 4));
  if (result)
  {
    result = (WebCore::InspectorInstrumentation *)WebCore::InspectorInstrumentation::instrumentingAgents(result, v7);
    if (result)
    {
      result = (WebCore::InspectorInstrumentation *)*((_QWORD *)result + 12);
      if (result)
        return (WebCore::InspectorInstrumentation *)WebCore::InspectorCanvasAgent::processArgument(result, v5, v3, (uint64_t)a3);
    }
  }
  *a3 = 0;
  a3[16] = 0;
  return result;
}

WebCore::InspectorInstrumentation *WebCore::InspectorCanvasCallTracer::recordAction(uint64_t a1, const WTF::StringImpl *a2, _QWORD *a3)
{
  WebCore::CanvasRenderingContext *v5;
  WebCore::InspectorInstrumentation *result;
  WebCore::ScriptExecutionContext *v7;

  v5 = (WebCore::CanvasRenderingContext *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  result = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD *))(**((_QWORD **)v5 + 4) + 144))(*((_QWORD **)v5 + 4));
  if (result)
  {
    result = (WebCore::InspectorInstrumentation *)WebCore::InspectorInstrumentation::instrumentingAgents(result, v7);
    if (result)
    {
      result = (WebCore::InspectorInstrumentation *)*((_QWORD *)result + 12);
      if (result)
        return (WebCore::InspectorInstrumentation *)WebCore::InspectorCanvasAgent::recordAction((uint64_t)result, v5, a2, a3);
    }
  }
  return result;
}

uint64_t *WTF::Ref<Inspector::FrontendRouter,WTF::RawPtrTraits<Inspector::FrontendRouter>,WTF::DefaultRefDerefTraits<Inspector::FrontendRouter>>::~Ref(uint64_t *a1, void *a2)
{
  uint64_t v3;
  WTF *v5;
  uint64_t v7;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v5 = *(WTF **)(v3 + 8);
      if ((WTF *)(v3 + 24) != v5 && v5 != 0)
      {
        *(_QWORD *)(v3 + 8) = 0;
        *(_DWORD *)(v3 + 16) = 0;
        v7 = v3;
        WTF::fastFree(v5, a2);
        v3 = v7;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return a1;
}

Inspector::InspectorConsoleAgent **std::unique_ptr<WebCore::PageConsoleAgent>::~unique_ptr[abi:sn180100](Inspector::InspectorConsoleAgent **a1)
{
  Inspector::InspectorConsoleAgent *v2;
  WTF *v3;
  void *v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    Inspector::InspectorConsoleAgent::~InspectorConsoleAgent(v2);
    WTF::fastFree(v3, v4);
  }
  return a1;
}

void WebCore::InspectorController::~InspectorController(WebCore::InspectorController *this)
{
  _OWORD *v2;
  uint64_t v3;
  void *v4;
  JSC::Debugger *v5;
  WTF *v6;
  void *v7;
  uint64_t v8;
  WebCore::InspectorOverlay *v9;
  WTF *v10;
  void *v11;
  Inspector::BackendDispatcher *v12;
  uint64_t v13;
  Inspector::InjectedScriptManager *v14;
  WebCore::CommandLineAPIHost *v15;
  WTF *v16;
  void *v17;
  WTF *v18;
  WTF *v19;
  WTF *v20;
  void *v21;
  WTF *v22;
  WTF *v23;
  void *v24;

  v2 = (_OWORD *)*((_QWORD *)this + 1);
  v2[13] = 0u;
  v2[14] = 0u;
  v2[11] = 0u;
  v2[12] = 0u;
  v2[9] = 0u;
  v2[10] = 0u;
  v2[7] = 0u;
  v2[8] = 0u;
  v2[5] = 0u;
  v2[6] = 0u;
  v2[3] = 0u;
  v2[4] = 0u;
  v2[1] = 0u;
  v2[2] = 0u;
  v3 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  Inspector::AgentRegistry::~AgentRegistry((WebCore::InspectorController *)((char *)this + 64));
  v5 = (JSC::Debugger *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v5)
  {
    JSC::Debugger::~Debugger(v5);
    WTF::fastFree(v6, v7);
  }
  v8 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
    {
      v19 = *(WTF **)(v8 + 24);
      if (v19)
      {
        *(_QWORD *)(v8 + 24) = 0;
        *(_DWORD *)(v8 + 32) = 0;
        WTF::fastFree(v19, v4);
      }
      WTF::fastFree((WTF *)v8, v4);
    }
    else
    {
      --*(_DWORD *)v8;
    }
  }
  v9 = (WebCore::InspectorOverlay *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v9)
  {
    WebCore::InspectorOverlay::~InspectorOverlay(v9, v4);
    WTF::fastFree(v10, v11);
  }
  v12 = (Inspector::BackendDispatcher *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 1)
    {
      Inspector::BackendDispatcher::~BackendDispatcher(v12, (WTF::StringImpl *)v4);
      WTF::fastFree(v20, v21);
    }
    else
    {
      --*(_DWORD *)v12;
    }
  }
  v13 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 1)
    {
      v22 = *(WTF **)(v13 + 8);
      if ((WTF *)(v13 + 24) != v22 && v22)
      {
        *(_QWORD *)(v13 + 8) = 0;
        *(_DWORD *)(v13 + 16) = 0;
        WTF::fastFree(v22, v4);
      }
      WTF::fastFree((WTF *)v13, v4);
    }
    else
    {
      --*(_DWORD *)v13;
    }
  }
  v14 = (Inspector::InjectedScriptManager *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v14)
  {
    v15 = (WebCore::CommandLineAPIHost *)*((_QWORD *)v14 + 6);
    *((_QWORD *)v14 + 6) = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 1)
      {
        WebCore::CommandLineAPIHost::~CommandLineAPIHost(v15, v4);
        WTF::fastFree(v23, v24);
      }
      else
      {
        --*(_DWORD *)v15;
      }
    }
    Inspector::InjectedScriptManager::~InjectedScriptManager(v14);
    WTF::fastFree(v16, v17);
  }
  v18 = (WTF *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 1)
      WTF::fastFree(v18, v4);
    else
      --*(_DWORD *)v18;
  }
}

{
  WTF *v1;
  void *v2;

  WebCore::InspectorController::~InspectorController(this);
  WTF::fastFree(v1, v2);
}

uint64_t WebCore::InspectorController::createLazyAgents(uint64_t this)
{
  _QWORD *v1;
  WebCore::Page *v2;
  WebCore::PageDebugger *v3;
  JSC::Debugger *v4;
  WTF *v5;
  void *v6;
  Inspector::InjectedScriptManager *v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  WebCore::CommandLineAPIHost *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  int v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  int v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  int v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  int v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  WTF::StringImpl *v74;
  _QWORD *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  int v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  int v85;
  _QWORD *v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  int v92;
  _QWORD *v93;
  uint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  _QWORD *v97;
  uint64_t v98;
  WTF::RunLoop *v99;
  _QWORD *v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  WTF *v109;
  WTF *v110;
  void *v111;
  _QWORD *v112;
  _QWORD *v113;
  _QWORD *v114;
  _QWORD *v115;
  _QWORD *v116;
  _QWORD *v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  _QWORD *v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  _QWORD *v128;
  _QWORD *v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  WTF::StringImpl *v137;
  __int128 v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;

  if (!*(_BYTE *)(this + 131))
  {
    v1 = (_QWORD *)this;
    *(_BYTE *)(this + 131) = 1;
    v2 = *(WebCore::Page **)(this + 80);
    v3 = (WebCore::PageDebugger *)WTF::fastMalloc((WTF *)0xF0);
    WebCore::PageDebugger::PageDebugger(v3, v2);
    v4 = (JSC::Debugger *)v1[7];
    v1[7] = v3;
    if (v4)
    {
      JSC::Debugger::~Debugger(v4);
      WTF::fastFree(v5, v6);
    }
    v7 = (Inspector::InjectedScriptManager *)v1[2];
    Inspector::InjectedScriptManager::connect(v7);
    v8 = WTF::fastMalloc((WTF *)0x20);
    *(_DWORD *)v8 = 1;
    *(_QWORD *)(v8 + 8) = 0;
    v9 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *v9 = &off_1E33EDB18;
    *(_QWORD *)(v8 + 16) = v9;
    *(_QWORD *)(v8 + 24) = 0;
    v11 = (WebCore::CommandLineAPIHost *)*((_QWORD *)v7 + 6);
    *((_QWORD *)v7 + 6) = v8;
    if (v11)
    {
      if (*(_DWORD *)v11 == 1)
      {
        WebCore::CommandLineAPIHost::~CommandLineAPIHost(v11, v10);
        WTF::fastFree(v110, v111);
      }
      else
      {
        --*(_DWORD *)v11;
      }
    }
    v12 = v1[3];
    v13 = v1[4];
    v14 = v1[1];
    v15 = v1[2];
    v16 = v1[10];
    v130 = v1;
    v131 = v15;
    v132 = v12;
    v133 = v13;
    v134 = v14;
    v135 = v16;
    if (!v1[13])
    {
      v137 = (WTF::StringImpl *)v1;
      *(_QWORD *)&v138 = v15;
      *((_QWORD *)&v138 + 1) = v12;
      v139 = v13;
      v140 = v14;
      v141 = v16;
      WTF::fastMalloc((WTF *)0x58);
      v17 = Inspector::InspectorAgent::InspectorAgent();
      v1[13] = v17;
      *(_QWORD *)(v1[1] + 48) = v17;
      v136 = v17;
      Inspector::AgentRegistry::append();
      v18 = v136;
      v136 = 0;
      if (v18)
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    }
    if (!v1[15])
    {
      v19 = v1[1];
      v138 = *((_OWORD *)v1 + 1);
      v20 = v1[4];
      v21 = v1[5];
      v137 = (WTF::StringImpl *)v1;
      v139 = v20;
      v140 = v19;
      v22 = v1[11];
      v141 = v1[10];
      v23 = WTF::fastMalloc((WTF *)0xA0);
      v24 = WebCore::InspectorPageAgent::InspectorPageAgent(v23, &v137, v22, v21);
      v1[15] = v24;
      v136 = v24;
      Inspector::AgentRegistry::append();
      v25 = v136;
      v136 = 0;
      if (v25)
        (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
    }
    v26 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
    v129 = WebCore::PageRuntimeAgent::PageRuntimeAgent(v26, &v130);
    Inspector::AgentRegistry::append();
    if (v129)
      (*(void (**)(_QWORD *))(*v129 + 8))(v129);
    v27 = WTF::fastMalloc((WTF *)0x140);
    v28 = (_QWORD *)Inspector::InspectorDebuggerAgent::InspectorDebuggerAgent();
    v28[32] = v134;
    v28[33] = 0;
    v28[34] = 0;
    v28[35] = 0;
    v28[36] = 0x100000001;
    *v28 = off_1E33F1568;
    v28[2] = &unk_1E33F1768;
    v28[3] = &unk_1E33F1870;
    v28[4] = &unk_1E33F18B0;
    v29 = v135;
    v28[38] = 0;
    v28[39] = 0;
    v28[37] = v29;
    v128 = v28;
    Inspector::AgentRegistry::append();
    if (v128)
      (*(void (**)(_QWORD *))(*v128 + 8))(v128);
    v30 = WTF::fastMalloc((WTF *)0xC0);
    v31 = (_QWORD *)WebCore::InspectorNetworkAgent::InspectorNetworkAgent(v30, &v130);
    *v31 = off_1E33F1A70;
    v31[4] = &unk_1E33F1B68;
    v31[23] = v135;
    v127 = v31;
    Inspector::AgentRegistry::append();
    if (v127)
      (*(void (**)(_QWORD *))(*v127 + 8))(v127);
    v32 = WTF::fastMalloc((WTF *)0xE8);
    v126 = WebCore::InspectorCSSAgent::InspectorCSSAgent(v32, &v130);
    Inspector::AgentRegistry::append();
    if (v126)
      (*(void (**)(uint64_t))(*(_QWORD *)v126 + 8))(v126);
    if (!v1[14])
    {
      v33 = v1[1];
      v34 = v1[10];
      v138 = *((_OWORD *)v1 + 1);
      v35 = v1[4];
      v36 = v1[5];
      v137 = (WTF::StringImpl *)v1;
      v139 = v35;
      v140 = v33;
      v141 = v34;
      v37 = WTF::fastMalloc((WTF *)0x1C0);
      v38 = WebCore::InspectorDOMAgent::InspectorDOMAgent(v37, &v137, v36);
      v1[14] = v38;
      v136 = v38;
      Inspector::AgentRegistry::append();
      v39 = v136;
      v136 = 0;
      if (v39)
        (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    }
    v40 = WTF::fastMalloc((WTF *)0xC8);
    v41 = WebCore::InspectorDOMDebuggerAgent::InspectorDOMDebuggerAgent(v40, &v130, v27);
    *(_QWORD *)v41 = off_1E33F1418;
    *(_QWORD *)(v41 + 32) = &unk_1E33F14C0;
    *(_QWORD *)(v41 + 40) = &unk_1E33F1510;
    *(_OWORD *)(v41 + 168) = 0u;
    *(_OWORD *)(v41 + 184) = 0u;
    v125 = v41;
    Inspector::AgentRegistry::append();
    if (v125)
      (*(void (**)(uint64_t))(*(_QWORD *)v125 + 8))(v125);
    v42 = (_QWORD *)WTF::fastMalloc((WTF *)0x40);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v44 = v137;
    if (v137)
    {
      v45 = *(_DWORD *)v137;
      *(_DWORD *)v137 += 2;
      *v42 = off_1E33EFBF8;
      v42[1] = v44;
      v46 = v130;
      v42[2] = v134;
      v42[3] = v46;
      if (v45)
        *(_DWORD *)v44 = v45;
      else
        WTF::StringImpl::destroy(v44, v43);
    }
    else
    {
      v42[1] = 0;
      v112 = v130;
      v42[2] = v134;
      v42[3] = v112;
    }
    *v42 = off_1E33EEE40;
    v42[4] = &unk_1E33EEEA8;
    v47 = v132;
    v48 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *v48 = v47;
    v42[5] = v48;
    Inspector::ApplicationCacheBackendDispatcher::create();
    v49 = v135;
    v42[6] = v137;
    v42[7] = v49;
    Inspector::AgentRegistry::append();
    if (v42)
      (*(void (**)(_QWORD *))(*v42 + 8))(v42);
    v50 = WTF::fastMalloc((WTF *)0x68);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v52 = v137;
    if (v137)
    {
      v53 = *(_DWORD *)v137;
      *(_DWORD *)v137 += 2;
      *(_QWORD *)v50 = off_1E33EFBF8;
      *(_QWORD *)(v50 + 8) = v52;
      v54 = v130;
      *(_QWORD *)(v50 + 16) = v134;
      *(_QWORD *)(v50 + 24) = v54;
      if (v53)
        *(_DWORD *)v52 = v53;
      else
        WTF::StringImpl::destroy(v52, v51);
    }
    else
    {
      *(_QWORD *)(v50 + 8) = 0;
      v113 = v130;
      *(_QWORD *)(v50 + 16) = v134;
      *(_QWORD *)(v50 + 24) = v113;
    }
    *(_QWORD *)v50 = off_1E33EFE98;
    *(_QWORD *)(v50 + 32) = &unk_1E33EFEF8;
    v55 = v132;
    v56 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *v56 = v55;
    *(_QWORD *)(v50 + 40) = v56;
    Inspector::LayerTreeBackendDispatcher::create();
    *(_QWORD *)(v50 + 48) = v137;
    *(_OWORD *)(v50 + 81) = 0u;
    *(_OWORD *)(v50 + 72) = 0u;
    *(_OWORD *)(v50 + 56) = 0u;
    Inspector::AgentRegistry::append();
    if (v50)
      (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
    v57 = WTF::fastMalloc((WTF *)0x68);
    v58 = (_QWORD *)WebCore::InspectorWorkerAgent::InspectorWorkerAgent(v57, &v130);
    *v58 = off_1E33F1DC0;
    v58[4] = &unk_1E33F1E30;
    v58[5] = &unk_1E33F1E70;
    v58[12] = v135;
    v124 = v58;
    Inspector::AgentRegistry::append();
    if (v124)
      (*(void (**)(_QWORD *))(*v124 + 8))(v124);
    v59 = (_QWORD *)WTF::fastMalloc((WTF *)0x40);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v61 = v137;
    if (v137)
    {
      v62 = *(_DWORD *)v137;
      *(_DWORD *)v137 += 2;
      *v59 = off_1E33EFBF8;
      v59[1] = v61;
      v63 = v130;
      v59[2] = v134;
      v59[3] = v63;
      if (v62)
        *(_DWORD *)v61 = v62;
      else
        WTF::StringImpl::destroy(v61, v60);
    }
    else
    {
      v59[1] = 0;
      v114 = v130;
      v59[2] = v134;
      v59[3] = v114;
    }
    *v59 = off_1E33EFC78;
    v59[4] = &unk_1E33EFCE8;
    v64 = v132;
    v65 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *v65 = v64;
    v59[5] = v65;
    Inspector::DOMStorageBackendDispatcher::create();
    v66 = v135;
    v59[6] = v137;
    v59[7] = v66;
    Inspector::AgentRegistry::append();
    if (v59)
      (*(void (**)(_QWORD *))(*v59 + 8))(v59);
    v67 = (_QWORD *)WTF::fastMalloc((WTF *)0x50);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v69 = v137;
    if (v137)
    {
      v70 = *(_DWORD *)v137;
      *(_DWORD *)v137 += 2;
      *v67 = off_1E33EFBF8;
      v67[1] = v69;
      v71 = v130;
      v67[2] = v134;
      v67[3] = v71;
      if (v70)
        *(_DWORD *)v69 = v70;
      else
        WTF::StringImpl::destroy(v69, v68);
    }
    else
    {
      v67[1] = 0;
      v115 = v130;
      v67[2] = v134;
      v67[3] = v115;
    }
    *v67 = off_1E33EFD38;
    v67[4] = &unk_1E33EFD98;
    v72 = v132;
    v73 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *v73 = v72;
    v67[5] = v73;
    Inspector::DatabaseBackendDispatcher::create();
    v74 = v137;
    v67[7] = 0;
    v67[8] = 0;
    v67[6] = v74;
    *(_QWORD *)((char *)v67 + 69) = 0;
    Inspector::AgentRegistry::append();
    if (v67)
      (*(void (**)(_QWORD *))(*v67 + 8))(v67);
    v75 = (_QWORD *)WTF::fastMalloc((WTF *)0x40);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v77 = v137;
    if (v137)
    {
      v78 = *(_DWORD *)v137;
      *(_DWORD *)v137 += 2;
      *v75 = off_1E33EFBF8;
      v75[1] = v77;
      v79 = v130;
      v75[2] = v134;
      v75[3] = v79;
      if (v78)
        *(_DWORD *)v77 = v78;
      else
        WTF::StringImpl::destroy(v77, v76);
    }
    else
    {
      v75[1] = 0;
      v116 = v130;
      v75[2] = v134;
      v75[3] = v116;
    }
    *v75 = off_1E33EFDD8;
    v75[4] = &unk_1E33EFE48;
    v75[5] = v131;
    Inspector::IndexedDBBackendDispatcher::create();
    v80 = v135;
    v75[6] = v137;
    v75[7] = v80;
    Inspector::AgentRegistry::append();
    if (v75)
      (*(void (**)(_QWORD *))(*v75 + 8))(v75);
    WTF::fastMalloc((WTF *)0x40);
    v81 = Inspector::InspectorScriptProfilerAgent::InspectorScriptProfilerAgent();
    *(_QWORD *)(v1[1] + 64) = v81;
    v123 = v81;
    Inspector::AgentRegistry::append();
    if (v123)
      (*(void (**)(uint64_t))(*(_QWORD *)v123 + 8))(v123);
    v82 = WTF::fastMalloc((WTF *)0x40);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v84 = v137;
    if (v137)
    {
      v85 = *(_DWORD *)v137;
      *(_DWORD *)v137 += 2;
      *(_QWORD *)v82 = off_1E33EFBF8;
      *(_QWORD *)(v82 + 8) = v84;
      v86 = v130;
      *(_QWORD *)(v82 + 16) = v134;
      *(_QWORD *)(v82 + 24) = v86;
      if (v85)
        *(_DWORD *)v84 = v85;
      else
        WTF::StringImpl::destroy(v84, v83);
    }
    else
    {
      *(_QWORD *)(v82 + 8) = 0;
      v117 = v130;
      *(_QWORD *)(v82 + 16) = v134;
      *(_QWORD *)(v82 + 24) = v117;
    }
    *(_QWORD *)v82 = off_1E33EEEF0;
    *(_QWORD *)(v82 + 32) = &unk_1E33EEF40;
    v87 = v132;
    v88 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *v88 = v87;
    *(_QWORD *)(v82 + 40) = v88;
    Inspector::CPUProfilerBackendDispatcher::create();
    *(_QWORD *)(v82 + 48) = v137;
    *(_BYTE *)(v82 + 56) = 0;
    Inspector::AgentRegistry::append();
    if (v82)
      (*(void (**)(uint64_t))(*(_QWORD *)v82 + 8))(v82);
    v89 = WTF::fastMalloc((WTF *)0x40);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v91 = v137;
    if (v137)
    {
      v92 = *(_DWORD *)v137;
      *(_DWORD *)v137 += 2;
      *(_QWORD *)v89 = off_1E33EFBF8;
      *(_QWORD *)(v89 + 8) = v91;
      v93 = v130;
      *(_QWORD *)(v89 + 16) = v134;
      *(_QWORD *)(v89 + 24) = v93;
      if (v92)
        *(_DWORD *)v91 = v92;
      else
        WTF::StringImpl::destroy(v91, v90);
    }
    else
    {
      *(_QWORD *)(v89 + 8) = 0;
      v118 = v130;
      *(_QWORD *)(v89 + 16) = v134;
      *(_QWORD *)(v89 + 24) = v118;
    }
    *(_QWORD *)v89 = off_1E33EFF38;
    *(_QWORD *)(v89 + 32) = &unk_1E33EFF98;
    v94 = v132;
    v95 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *v95 = v94;
    *(_QWORD *)(v89 + 40) = v95;
    Inspector::MemoryBackendDispatcher::create();
    *(_QWORD *)(v89 + 48) = v137;
    *(_BYTE *)(v89 + 56) = 0;
    Inspector::AgentRegistry::append();
    if (v89)
      (*(void (**)(uint64_t))(*(_QWORD *)v89 + 8))(v89);
    v96 = (_QWORD *)WTF::fastMalloc((WTF *)0x68);
    v97 = (_QWORD *)Inspector::InspectorHeapAgent::InspectorHeapAgent();
    *v97 = off_1E33F0FD8;
    v97[2] = &unk_1E33F1070;
    v97[3] = &unk_1E33F10D0;
    v97[10] = v134;
    v98 = WTF::fastMalloc((WTF *)0x40);
    *(_QWORD *)v98 = v96;
    *(_BYTE *)(v98 + 8) = 0;
    *(_QWORD *)(v98 + 16) = 0;
    *(_QWORD *)(v98 + 24) = 0;
    v99 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)v98);
    v100 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v100 = off_1E33F1540;
    v100[1] = WebCore::SendGarbageCollectionEventsTask::timerFired;
    v100[2] = 0;
    v100[3] = v98;
    WTF::RunLoop::TimerBase::TimerBase((WTF::RunLoop::TimerBase *)(v98 + 32), v99);
    *(_QWORD *)(v98 + 32) = off_1E32051C0;
    *(_QWORD *)(v98 + 56) = v100;
    *v96 = off_1E33F1948;
    v96[2] = &unk_1E33F19E0;
    v96[3] = &unk_1E33F1A40;
    v101 = v134;
    v96[11] = v98;
    v96[12] = v101;
    Inspector::AgentRegistry::append();
    if (v96)
      (*(void (**)(_QWORD *))(*v96 + 8))(v96);
    WTF::fastMalloc((WTF *)0x40);
    v102 = (_QWORD *)Inspector::InspectorAuditAgent::InspectorAuditAgent();
    *v102 = off_1E33F1100;
    v102[2] = &unk_1E33F1178;
    v102[7] = v135;
    v122 = v102;
    Inspector::AgentRegistry::append();
    if (v122)
      (*(void (**)(_QWORD *))(*v122 + 8))(v122);
    v103 = WTF::fastMalloc((WTF *)0x140);
    v104 = (_QWORD *)WebCore::InspectorCanvasAgent::InspectorCanvasAgent(v103, &v130);
    *v104 = off_1E33F11B0;
    v104[4] = &unk_1E33F1290;
    v104[5] = &unk_1E33F1318;
    v104[39] = v135;
    v121 = v104;
    Inspector::AgentRegistry::append();
    if (v121)
      (*(void (**)(_QWORD *))(*v121 + 8))(v121);
    v105 = WTF::fastMalloc((WTF *)0xA0);
    v120 = WebCore::InspectorTimelineAgent::InspectorTimelineAgent(v105, &v130);
    Inspector::AgentRegistry::append();
    if (v120)
      (*(void (**)(uint64_t))(*(_QWORD *)v120 + 8))(v120);
    v106 = WTF::fastMalloc((WTF *)0xF8);
    v119 = WebCore::InspectorAnimationAgent::InspectorAnimationAgent(v106, &v130);
    Inspector::AgentRegistry::append();
    this = v119;
    if (v119)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v119 + 8))(v119);
    v108 = *(_QWORD *)(v1[2] + 48);
    if (v108)
    {
      v109 = (WTF *)v1[1];
      *(_DWORD *)v109 += 2;
      this = *(_QWORD *)(v108 + 8);
      *(_QWORD *)(v108 + 8) = v109;
      if (this)
      {
        if (*(_DWORD *)this == 1)
          this = WTF::fastFree((WTF *)this, v107);
        else
          --*(_DWORD *)this;
      }
      if (*(_DWORD *)v109 == 1)
        return WTF::fastFree(v109, v107);
      else
        --*(_DWORD *)v109;
    }
  }
  return this;
}

uint64_t WebCore::InspectorController::ensurePageAgent(WebCore::InspectorController *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::InspectorController *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  result = *((_QWORD *)this + 15);
  if (!result)
  {
    v3 = *((_QWORD *)this + 1);
    v9 = this;
    v10 = *((_OWORD *)this + 1);
    v4 = *((_QWORD *)this + 5);
    v11 = *((_QWORD *)this + 4);
    v12 = v3;
    v5 = *((_QWORD *)this + 11);
    v13 = *((_QWORD *)this + 10);
    v6 = WTF::fastMalloc((WTF *)0xA0);
    v7 = WebCore::InspectorPageAgent::InspectorPageAgent(v6, &v9, v5, v4);
    *((_QWORD *)this + 15) = v7;
    v8 = v7;
    Inspector::AgentRegistry::append();
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    return *((_QWORD *)this + 15);
  }
  return result;
}

uint64_t WebCore::InspectorController::disconnectAllFrontends(WebCore::InspectorController *this, void *a2)
{
  uint64_t result;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  result = *((_QWORD *)this + 12);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 144))(result);
  if (*(_DWORD *)(*((_QWORD *)this + 3) + 20))
  {
    v4 = 0;
    do
    {
      do
      {
        v5 = __ldaxr((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, (unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter));
      if (!v6)
      {
        v7 = WebCore::s_platformStrategies;
        v8 = *(_QWORD *)(WebCore::s_platformStrategies + 8);
        if (!v8)
        {
          v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 16))(WebCore::s_platformStrategies);
          *(_QWORD *)(v7 + 8) = v8;
        }
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 120))(v8, 0);
      }
      ++v4;
    }
    while (v4 < *(_DWORD *)(*((_QWORD *)this + 3) + 20));
    WebCore::InspectorInstrumentation::unregisterInstrumentingAgents(*((_QWORD *)this + 1), a2);
    Inspector::AgentRegistry::willDestroyFrontendAndBackend();
    WebCore::WebInjectedScriptManager::disconnect(*((WebCore::CommandLineAPIHost ****)this + 2));
    Inspector::FrontendRouter::disconnectAllFrontends(*((Inspector::FrontendRouter **)this + 3));
    *(_WORD *)((char *)this + 129) = 0;
    (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 11) + 24))(*((_QWORD *)this + 11), *(unsigned int *)(*((_QWORD *)this + 3) + 20));
    return Inspector::RemoteControllableTarget::update(*(Inspector::RemoteControllableTarget **)(*((_QWORD *)this + 10)
                                                                                               + 800));
  }
  return result;
}

uint64_t WebCore::InspectorController::setInspectorFrontendClient(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 96) = a2;
  return result;
}

uint64_t WebCore::InspectorController::connectFrontend(uint64_t a1, uint64_t a2, char a3, char a4)
{
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 112) + 672) |= 0x400000000000uLL;
  WebCore::InspectorController::createLazyAgents(a1);
  v7 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 20);
  *(_BYTE *)(a1 + 129) = a3;
  *(_BYTE *)(a1 + 130) = a4;
  Inspector::FrontendRouter::connectFrontend();
  do
    v8 = __ldaxr((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter);
  while (__stlxr(v8 + 1, (unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter));
  if (v8)
  {
    if (v7)
      goto LABEL_12;
    goto LABEL_9;
  }
  v9 = WebCore::s_platformStrategies;
  v10 = *(_QWORD *)(WebCore::s_platformStrategies + 8);
  if (!v10)
  {
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 16))(WebCore::s_platformStrategies);
    *(_QWORD *)(v9 + 8) = v10;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 120))(v10, 1);
  if (!v7)
  {
LABEL_9:
    v11 = *(_QWORD *)(a1 + 8);
    {
      v12 = (uint64_t *)WTF::fastMalloc((WTF *)8);
      *v12 = 0;
    }
    v15 = v11;
    WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add(v12, &v15, (uint64_t)&v14);
    Inspector::AgentRegistry::didCreateFrontendAndBackend();
  }
LABEL_12:
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 88) + 24))(*(_QWORD *)(a1 + 88), *(unsigned int *)(*(_QWORD *)(a1 + 24) + 20));
  result = Inspector::FrontendRouter::hasLocalFrontend(*(Inspector::FrontendRouter **)(a1 + 24));
  if ((_DWORD)result)
    return Inspector::RemoteControllableTarget::update(*(Inspector::RemoteControllableTarget **)(*(_QWORD *)(a1 + 80)
                                                                                               + 800));
  return result;
}

uint64_t WebCore::InspectorController::disconnectFrontend(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  Inspector::InjectedScriptManager *v7;
  void *v8;
  WebCore::CommandLineAPIHost *v9;

  Inspector::FrontendRouter::disconnectFrontend();
  *(_WORD *)(a1 + 129) = 0;
  do
  {
    v2 = __ldaxr((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, (unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter));
  if (!v3)
  {
    v4 = WebCore::s_platformStrategies;
    v5 = *(_QWORD *)(WebCore::s_platformStrategies + 8);
    if (!v5)
    {
      v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 16))(WebCore::s_platformStrategies);
      *(_QWORD *)(v4 + 8) = v5;
    }
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 120))(v5, 0);
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 24) + 20))
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 88) + 24))(*(_QWORD *)(a1 + 88));
  Inspector::AgentRegistry::willDestroyFrontendAndBackend();
  v7 = *(Inspector::InjectedScriptManager **)(a1 + 16);
  Inspector::InjectedScriptManager::discardInjectedScripts(v7);
  v9 = (WebCore::CommandLineAPIHost *)*((_QWORD *)v7 + 6);
  if (v9)
    WebCore::CommandLineAPIHost::clearAllWrappers(v9);
  WebCore::InspectorInstrumentation::unregisterInstrumentingAgents(*(_QWORD *)(a1 + 8), v8);
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 88) + 24))(*(_QWORD *)(a1 + 88), *(unsigned int *)(*(_QWORD *)(a1 + 24) + 20));
  return Inspector::RemoteControllableTarget::update(*(Inspector::RemoteControllableTarget **)(*(_QWORD *)(a1 + 80)
                                                                                             + 800));
}

uint64_t WebCore::InspectorInstrumentation::unregisterInstrumentingAgents(uint64_t result, void *a2)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  BOOL v14;

  {
    {
      v4 = *(_DWORD *)(v3 - 8);
      v5 = (~(result << 32) + result) ^ ((unint64_t)(~(result << 32) + result) >> 22);
      v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
      v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
      v8 = v4 & ((v7 >> 31) ^ v7);
      v9 = *(_QWORD *)(v3 + 8 * v8);
      if (v9 != result)
      {
        v10 = 1;
        while (v9)
        {
          v8 = ((_DWORD)v8 + v10) & v4;
          v9 = *(_QWORD *)(v3 + 8 * v8);
          ++v10;
          if (v9 == result)
            goto LABEL_9;
        }
        v8 = *(unsigned int *)(v3 - 4);
      }
LABEL_9:
      if (v8 == *(_DWORD *)(v3 - 4))
        goto LABEL_25;
      *(_QWORD *)(v3 + 8 * v8) = -1;
      ++*(_DWORD *)(*v2 - 16);
      v11 = *v2;
      v12 = *v2 ? *(_DWORD *)(v11 - 12) - 1 : -1;
      *(_DWORD *)(v11 - 12) = v12;
      v3 = *v2;
      if (*v2)
      {
        v13 = *(_DWORD *)(v3 - 4);
        v14 = 6 * *(_DWORD *)(v3 - 12) < v13 && v13 >= 9;
        if (!v14
        {
LABEL_25:
          if (*(_DWORD *)(v3 - 12))
            return result;
          WTF::fastFree((WTF *)(v3 - 16), a2);
        }
      }
    }
    result = WTF::fastFree((WTF *)v2, a2);
  }
  return result;
}

uint64_t WebCore::InspectorController::show(uint64_t this)
{
  uint64_t v1;
  int hasLocalFrontend;
  uint64_t v3;

  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 80) + 112) + 672) & 0x400000000000) != 0)
  {
    v1 = this;
    hasLocalFrontend = Inspector::FrontendRouter::hasLocalFrontend(*(Inspector::FrontendRouter **)(this + 24));
    v3 = **(_QWORD **)(v1 + 88);
    if (hasLocalFrontend)
    {
      return (*(uint64_t (**)(void))(v3 + 40))();
    }
    else
    {
      this = (*(uint64_t (**)(void))(v3 + 32))();
      if (this)
        return WebCore::InspectorController::connectFrontend(v1, this, 0, 0);
    }
  }
  return this;
}

uint64_t WebCore::InspectorController::enabled(WebCore::InspectorController *this)
{
  return (*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 10) + 112) + 672) >> 46) & 1;
}

uint64_t WebCore::InspectorController::evaluateForTestInFrontend(WebCore::InspectorController *this, const WTF::String *a2)
{
  Inspector::InspectorAgent *v4;
  uint64_t v5;
  uint64_t v7;

  v4 = (Inspector::InspectorAgent *)*((_QWORD *)this + 13);
  if (!v4)
  {
    WTF::fastMalloc((WTF *)0x58);
    v5 = Inspector::InspectorAgent::InspectorAgent();
    *((_QWORD *)this + 13) = v5;
    *(_QWORD *)(*((_QWORD *)this + 1) + 48) = v5;
    v7 = v5;
    Inspector::AgentRegistry::append();
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v4 = (Inspector::InspectorAgent *)*((_QWORD *)this + 13);
  }
  return Inspector::InspectorAgent::evaluateForTestInFrontend(v4, a2);
}

uint64_t WebCore::InspectorController::drawHighlight(WebCore::InspectorController *this, WebCore::GraphicsContext *a2)
{
  return WebCore::InspectorOverlay::paint(*((_QWORD *)this + 5), a2);
}

void WebCore::InspectorController::getHighlight(uint64_t a1, uint64_t a2, int a3)
{
  WebCore::InspectorOverlay::getHighlight(*(_QWORD *)(a1 + 40), a2, a3);
}

uint64_t WebCore::InspectorController::isUnderTest(WebCore::InspectorController *this)
{
  return *((unsigned __int8 *)this + 128);
}

uint64_t WebCore::InspectorController::gridOverlayCount(WebCore::InspectorController *this)
{
  return *(unsigned int *)(*((_QWORD *)this + 5) + 284);
}

uint64_t WebCore::InspectorController::flexOverlayCount(WebCore::InspectorController *this)
{
  return *(unsigned int *)(*((_QWORD *)this + 5) + 300);
}

uint64_t WebCore::InspectorController::paintRectCount(WebCore::InspectorController *this)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 11) + 88))(*((_QWORD *)this + 11)))
    return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 11) + 112))(*((_QWORD *)this + 11));
  v3 = *((_QWORD *)this + 5);
  v4 = *(_QWORD *)(v3 + 184);
  v5 = *(_QWORD *)(v3 + 192);
  if (v4 > v5)
    LODWORD(v5) = v5 + *(_DWORD *)(v3 + 208);
  return (v5 - v4);
}

BOOL WebCore::InspectorController::shouldShowOverlay(WebCore::InspectorController *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 5);
  return *(_OWORD *)(v1 + 16) != 0
      || *(_QWORD *)(v1 + 128)
      || *(_DWORD *)(v1 + 284)
      || *(_DWORD *)(v1 + 300)
      || *(_BYTE *)(v1 + 304)
      || *(_BYTE *)(v1 + 305)
      || *(_BYTE *)(v1 + 306) != 0;
}

void WebCore::InspectorController::inspect(Inspector::FrontendRouter **this, WebCore::Node *a2)
{
  int hasLocalFrontend;
  uint64_t v5;
  uint64_t v6;
  WebCore::InspectorDOMAgent *v7;
  Inspector::FrontendRouter *v8;
  Inspector::FrontendRouter *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Inspector::FrontendRouter **v14;
  __int128 v15;
  Inspector::FrontendRouter *v16;
  Inspector::FrontendRouter *v17;
  Inspector::FrontendRouter *v18;

  if ((*(_QWORD *)(*((_QWORD *)this[10] + 14) + 672) & 0x400000000000) != 0)
  {
    if ((Inspector::FrontendRouter::hasRemoteFrontend(this[3]) & 1) == 0
      && (*(_QWORD *)(*((_QWORD *)this[10] + 14) + 672) & 0x400000000000) != 0)
    {
      hasLocalFrontend = Inspector::FrontendRouter::hasLocalFrontend(this[3]);
      v5 = *(_QWORD *)this[11];
      if (hasLocalFrontend)
      {
        (*(void (**)(void))(v5 + 40))();
      }
      else
      {
        v6 = (*(uint64_t (**)(void))(v5 + 32))();
        if (v6)
          WebCore::InspectorController::connectFrontend((uint64_t)this, v6, 0, 0);
      }
    }
    v7 = this[14];
    if (!v7)
    {
      v8 = this[1];
      v9 = this[10];
      v14 = this;
      v15 = *((_OWORD *)this + 1);
      v10 = (uint64_t)this[5];
      v16 = this[4];
      v17 = v8;
      v18 = v9;
      v11 = WTF::fastMalloc((WTF *)0x1C0);
      v12 = WebCore::InspectorDOMAgent::InspectorDOMAgent(v11, &v14, v10);
      this[14] = (Inspector::FrontendRouter *)v12;
      v13 = v12;
      Inspector::AgentRegistry::append();
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      v7 = this[14];
    }
    WebCore::InspectorDOMAgent::inspect(v7, a2);
  }
}

uint64_t WebCore::InspectorController::dispatchMessageFromFrontend(Inspector::BackendDispatcher **this, const WTF::String *a2)
{
  return Inspector::BackendDispatcher::dispatch(this[4], a2);
}

uint64_t WebCore::InspectorController::setIndicating(WebCore::InspectorController *this, int a2)
{
  uint64_t v2;

  v2 = 80;
  if (a2)
    v2 = 72;
  return (*(uint64_t (**)(void))(**((_QWORD **)this + 11) + v2))();
}

uint64_t WebCore::InspectorController::canAccessInspectedScriptState(WebCore::InspectorController *this, WTF::StringImpl **a2)
{
  uint64_t v3;
  _BOOL4 v4;
  char **v5;
  BOOL v6;
  uint64_t shouldAllowAccessToDOMWindow;
  _BYTE v10[8];

  JSC::JSLockHolder::JSLockHolder();
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSDOMWindow::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSDOMWindow::s_info && v5 != 0);
  }
  if (v4)
    shouldAllowAccessToDOMWindow = WebCore::BindingSecurity::shouldAllowAccessToDOMWindow((WTF::StringImpl *)a2, a2[426], 0);
  else
    shouldAllowAccessToDOMWindow = 0;
  MEMORY[0x19AEA32A0](v10);
  return shouldAllowAccessToDOMWindow;
}

uint64_t (*WebCore::InspectorController::functionCallHandler(WebCore::InspectorController *this))(WebCore *a1)
{
  return WebCore::functionCallHandlerFromAnyThread;
}

uint64_t (*WebCore::InspectorController::evaluateHandler(WebCore::InspectorController *this))(WebCore *a1)
{
  return WebCore::evaluateHandlerFromAnyThread;
}

uint64_t WebCore::InspectorController::frontendInitialized(uint64_t this)
{
  uint64_t v1;
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  char v4;

  v1 = this;
  if (*(_BYTE *)(this + 130))
  {
    *(_BYTE *)(this + 130) = 0;
    this = *(_QWORD *)(*(_QWORD *)(this + 8) + 128);
    if (this)
    {
      this = Inspector::InspectorDebuggerAgent::pause((Inspector::InspectorDebuggerAgent *)this);
      if (v4)
      {
        this = (uint64_t)v3;
        if (v3)
        {
          if (*(_DWORD *)v3 == 2)
            this = WTF::StringImpl::destroy(v3, v2);
          else
            *(_DWORD *)v3 -= 2;
        }
      }
    }
  }
  if (*(_BYTE *)(v1 + 129))
    return Inspector::RemoteInspectionTarget::unpauseForInitializedInspector(*(Inspector::RemoteInspectionTarget **)(*(_QWORD *)(v1 + 80) + 800));
  return this;
}

uint64_t WebCore::InspectorController::executionStopwatch(WebCore::InspectorController *this)
{
  return *((_QWORD *)this + 6);
}

uint64_t WebCore::InspectorController::debugger(WebCore::InspectorController *this)
{
  return *((_QWORD *)this + 7);
}

uint64_t WebCore::InspectorController::vm(WebCore::InspectorController *this)
{
  uint64_t v1;
  uint64_t v4;

  v1 = WebCore::g_commonVMOrNull;
  if (WebCore::g_commonVMOrNull)
    return v1;
  WTF::RunLoop::webIfExists(this);
  JSC::VM::create();
  v1 = v4;
  WebCore::g_commonVMOrNull = v4;
  if (__ldaxr((unsigned int *)(v4 + 1096)))
  {
    __clrex();
LABEL_5:
    JSC::Heap::acquireAccessSlow((JSC::Heap *)(v4 + 192));
    goto LABEL_6;
  }
  if (__stlxr(4u, (unsigned int *)(v4 + 1096)))
    goto LABEL_5;
LABEL_6:
  if (webThreadStarted == 1)
    *(_BYTE *)(*(_QWORD *)(v4 + 112) + 5) = 1;
  WTF::ThreadGroup::addCurrentThread(**(WTF::ThreadGroup ***)(v4 + 584));
  WebCore::JSVMClientData::initNormalWorld((JSC::VM *)v4, 0);
  return v1;
}

void WebCore::InspectorController::willComposite(WebCore::InspectorController *this, WebCore::LocalFrame *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::InspectorTimelineAgent *v6;

  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v3 = *((_QWORD *)a2 + 3);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 8);
      if (v4)
      {
        v5 = *(_QWORD *)(*(_QWORD *)(v4 + 80) + 8);
        if (v5)
        {
          v6 = *(WebCore::InspectorTimelineAgent **)(v5 + 232);
          if (v6)
            WebCore::InspectorTimelineAgent::willComposite(v6, a2);
        }
      }
    }
  }
}

void WebCore::InspectorController::didComposite(WebCore::InspectorController *this, WebCore::LocalFrame *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::InspectorTimelineAgent *v6;

  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v3 = *((_QWORD *)a2 + 3);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 8);
      if (v4)
      {
        v5 = *(_QWORD *)(*(_QWORD *)(v4 + 80) + 8);
        if (v5)
        {
          v6 = *(WebCore::InspectorTimelineAgent **)(v5 + 232);
          if (v6)
            WebCore::InspectorTimelineAgent::didComposite(v6);
        }
      }
    }
  }
}

_DWORD *WebCore::InspectorDatabaseResource::bind(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  _DWORD *v7;
  _DWORD *result;
  _DWORD *v9;
  _DWORD *v10;

  WTF::JSONImpl::Object::create((WTF::JSONImpl::Object *)a1);
  v2 = Inspector::Protocol::Database::Database::Builder<0>::setId((uint64_t *)&v9, (WTF::JSONImpl::Value *)(a1 + 16));
  v3 = Inspector::Protocol::Database::Database::Builder<1>::setDomain(v2, (WTF::JSONImpl::Value *)(a1 + 24));
  v4 = Inspector::Protocol::Database::Database::Builder<3>::setName(v3, (WTF::JSONImpl::Value *)(a1 + 32));
  v5 = Inspector::Protocol::Database::Database::Builder<7>::setVersion(v4, (WTF::JSONImpl::Value *)(a1 + 40));
  v6 = *v5;
  *v5 = 0;
  v7 = v9;
  v9 = 0;
  v10 = (_DWORD *)v6;
  if (v7)
  {
    if (*v7 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v7;
  }
  Inspector::DatabaseFrontendDispatcher::addDatabase();
  result = v10;
  v10 = 0;
  if (result)
  {
    if (*result == 1)
      return (_DWORD *)WTF::JSONImpl::Value::operator delete();
    else
      --*result;
  }
  return result;
}

uint64_t *Inspector::Protocol::Database::Database::Builder<0>::setId(uint64_t *a1, WTF::JSONImpl::Value *a2)
{
  uint64_t v4;
  const WTF::String *v5;
  WTF::StringImpl *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  _DWORD *v11;
  WTF::StringImpl *v12;
  _DWORD **v14;
  uint64_t v15;
  _DWORD *v16;
  WTF::StringImpl *v17;
  _DWORD *v18;
  _BYTE v19[24];

  v4 = *a1;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(a2, v5);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), &v17, (const WTF::StringImpl *)&v18, (uint64_t)v19);
  if (v19[16])
  {
    v7 = (uint64_t *)(v4 + 24);
    v8 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v8 == *(_DWORD *)(v4 + 32))
    {
      v14 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v7, v8 + 1, (unint64_t)&v17);
      v8 = *(unsigned int *)(v4 + 36);
      v15 = *(_QWORD *)(v4 + 24);
      v16 = *v14;
      if (*v14)
        *v16 += 2;
      *(_QWORD *)(v15 + 8 * v8) = v16;
    }
    else
    {
      v9 = *v7;
      v10 = v17;
      if (v17)
        *(_DWORD *)v17 += 2;
      *(_QWORD *)(v9 + 8 * v8) = v10;
    }
    *(_DWORD *)(v4 + 36) = v8 + 1;
  }
  v11 = v18;
  v18 = 0;
  if (v11)
  {
    if (*v11 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v11;
  }
  v12 = v17;
  v17 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v6);
    else
      *(_DWORD *)v12 -= 2;
  }
  return a1;
}

uint64_t *Inspector::Protocol::Database::Database::Builder<1>::setDomain(uint64_t *a1, WTF::JSONImpl::Value *a2)
{
  uint64_t v4;
  const WTF::String *v5;
  WTF::StringImpl *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  _DWORD *v11;
  WTF::StringImpl *v12;
  _DWORD **v14;
  uint64_t v15;
  _DWORD *v16;
  WTF::StringImpl *v17;
  _DWORD *v18;
  _BYTE v19[24];

  v4 = *a1;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(a2, v5);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), &v17, (const WTF::StringImpl *)&v18, (uint64_t)v19);
  if (v19[16])
  {
    v7 = (uint64_t *)(v4 + 24);
    v8 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v8 == *(_DWORD *)(v4 + 32))
    {
      v14 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v7, v8 + 1, (unint64_t)&v17);
      v8 = *(unsigned int *)(v4 + 36);
      v15 = *(_QWORD *)(v4 + 24);
      v16 = *v14;
      if (*v14)
        *v16 += 2;
      *(_QWORD *)(v15 + 8 * v8) = v16;
    }
    else
    {
      v9 = *v7;
      v10 = v17;
      if (v17)
        *(_DWORD *)v17 += 2;
      *(_QWORD *)(v9 + 8 * v8) = v10;
    }
    *(_DWORD *)(v4 + 36) = v8 + 1;
  }
  v11 = v18;
  v18 = 0;
  if (v11)
  {
    if (*v11 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v11;
  }
  v12 = v17;
  v17 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v6);
    else
      *(_DWORD *)v12 -= 2;
  }
  return a1;
}

uint64_t *Inspector::Protocol::Database::Database::Builder<3>::setName(uint64_t *a1, WTF::JSONImpl::Value *a2)
{
  uint64_t v4;
  const WTF::String *v5;
  WTF::StringImpl *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  _DWORD *v11;
  WTF::StringImpl *v12;
  _DWORD **v14;
  uint64_t v15;
  _DWORD *v16;
  WTF::StringImpl *v17;
  _DWORD *v18;
  _BYTE v19[24];

  v4 = *a1;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(a2, v5);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), &v17, (const WTF::StringImpl *)&v18, (uint64_t)v19);
  if (v19[16])
  {
    v7 = (uint64_t *)(v4 + 24);
    v8 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v8 == *(_DWORD *)(v4 + 32))
    {
      v14 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v7, v8 + 1, (unint64_t)&v17);
      v8 = *(unsigned int *)(v4 + 36);
      v15 = *(_QWORD *)(v4 + 24);
      v16 = *v14;
      if (*v14)
        *v16 += 2;
      *(_QWORD *)(v15 + 8 * v8) = v16;
    }
    else
    {
      v9 = *v7;
      v10 = v17;
      if (v17)
        *(_DWORD *)v17 += 2;
      *(_QWORD *)(v9 + 8 * v8) = v10;
    }
    *(_DWORD *)(v4 + 36) = v8 + 1;
  }
  v11 = v18;
  v18 = 0;
  if (v11)
  {
    if (*v11 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v11;
  }
  v12 = v17;
  v17 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v6);
    else
      *(_DWORD *)v12 -= 2;
  }
  return a1;
}

uint64_t *Inspector::Protocol::Database::Database::Builder<7>::setVersion(uint64_t *a1, WTF::JSONImpl::Value *a2)
{
  uint64_t v4;
  const WTF::String *v5;
  WTF::StringImpl *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  _DWORD *v11;
  WTF::StringImpl *v12;
  _DWORD **v14;
  uint64_t v15;
  _DWORD *v16;
  WTF::StringImpl *v17;
  _DWORD *v18;
  _BYTE v19[24];

  v4 = *a1;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(a2, v5);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), &v17, (const WTF::StringImpl *)&v18, (uint64_t)v19);
  if (v19[16])
  {
    v7 = (uint64_t *)(v4 + 24);
    v8 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v8 == *(_DWORD *)(v4 + 32))
    {
      v14 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v7, v8 + 1, (unint64_t)&v17);
      v8 = *(unsigned int *)(v4 + 36);
      v15 = *(_QWORD *)(v4 + 24);
      v16 = *v14;
      if (*v14)
        *v16 += 2;
      *(_QWORD *)(v15 + 8 * v8) = v16;
    }
    else
    {
      v9 = *v7;
      v10 = v17;
      if (v17)
        *(_DWORD *)v17 += 2;
      *(_QWORD *)(v9 + 8 * v8) = v10;
    }
    *(_DWORD *)(v4 + 36) = v8 + 1;
  }
  v11 = v18;
  v18 = 0;
  if (v11)
  {
    if (*v11 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v11;
  }
  v12 = v17;
  v17 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v6);
    else
      *(_DWORD *)v12 -= 2;
  }
  return a1;
}

WebCore::InspectorFrontendAPIDispatcher *WebCore::InspectorFrontendAPIDispatcher::InspectorFrontendAPIDispatcher(WebCore::InspectorFrontendAPIDispatcher *this, WebCore::Page *a2)
{
  uint64_t v3;
  void *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;

  *(_DWORD *)this = 1;
  *((_QWORD *)this + 1) = 0;
  v3 = *((_QWORD *)a2 + 2);
  if (v3)
    goto LABEL_11;
  v3 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v3 = 1;
  *(_QWORD *)(v3 + 8) = a2;
  v6 = (unsigned int *)*((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v3;
  if (!v6)
    goto LABEL_11;
  do
  {
    v7 = __ldaxr(v6);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, v6));
  if (!v8)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, v5);
  }
  v3 = *((_QWORD *)a2 + 2);
  if (v3)
  {
LABEL_11:
    do
      v9 = __ldaxr((unsigned int *)v3);
    while (__stlxr(v9 + 1, (unsigned int *)v3));
  }
  *((_QWORD *)this + 2) = v3;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_WORD *)this + 24) = 0;
  return this;
}

{
  uint64_t v3;
  void *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;

  *(_DWORD *)this = 1;
  *((_QWORD *)this + 1) = 0;
  v3 = *((_QWORD *)a2 + 2);
  if (v3)
    goto LABEL_11;
  v3 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v3 = 1;
  *(_QWORD *)(v3 + 8) = a2;
  v6 = (unsigned int *)*((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v3;
  if (!v6)
    goto LABEL_11;
  do
  {
    v7 = __ldaxr(v6);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, v6));
  if (!v8)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, v5);
  }
  v3 = *((_QWORD *)a2 + 2);
  if (v3)
  {
LABEL_11:
    do
      v9 = __ldaxr((unsigned int *)v3);
    while (__stlxr(v9 + 1, (unsigned int *)v3));
  }
  *((_QWORD *)this + 2) = v3;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_WORD *)this + 24) = 0;
  return this;
}

void WebCore::InspectorFrontendAPIDispatcher::~InspectorFrontendAPIDispatcher(WebCore::InspectorFrontendAPIDispatcher *this, WTF::StringImpl *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;

  WebCore::InspectorFrontendAPIDispatcher::invalidateQueuedExpressions((uint64_t)this, a2);
  WebCore::InspectorFrontendAPIDispatcher::invalidatePendingResponses((uint64_t)this, v3);
  v5 = *((_QWORD *)this + 5);
  if (v5)
  {
    v6 = *(unsigned int *)(v5 - 4);
    if ((_DWORD)v6)
    {
      v7 = *((_QWORD *)this + 5);
      do
      {
        v8 = *(_DWORD **)v7;
        if (*(_QWORD *)v7 != -1)
        {
          v9 = *(_QWORD *)(v7 + 8);
          *(_QWORD *)(v7 + 8) = 0;
          if (v9)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
            v8 = *(_DWORD **)v7;
          }
          *(_QWORD *)v7 = 0;
          if (v8)
          {
            if (v8[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 16))(v8);
            else
              --v8[4];
          }
        }
        v7 += 16;
        --v6;
      }
      while (v6);
    }
    WTF::fastFree((WTF *)(v5 - 16), v4);
  }
  v10 = *((unsigned int *)this + 9);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    v12 = (uint64_t *)(*((_QWORD *)this + 3) + 8);
    do
    {
      v13 = *v12;
      *v12 = 0;
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      v14 = (WTF::StringImpl *)*(v12 - 1);
      *(v12 - 1) = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v4);
        else
          *(_DWORD *)v14 -= 2;
      }
      v12 += 2;
      v11 -= 16;
    }
    while (v11);
  }
  v15 = (WTF *)*((_QWORD *)this + 3);
  if (v15)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v15, v4);
  }
  v16 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v16)
  {
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      atomic_store(1u, v16);
      WTF::fastFree((WTF *)v16, v4);
    }
  }
  v19 = *((_QWORD *)this + 1);
  if (v19)
  {
    *(_QWORD *)(v19 + 8) = 0;
    v20 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v20)
    {
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        atomic_store(1u, v20);
        WTF::fastFree((WTF *)v20, v4);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

uint64_t WebCore::InspectorFrontendAPIDispatcher::invalidateQueuedExpressions(uint64_t this, WTF::StringImpl *a2)
{
  WTF *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  WTF *v10;
  char v11;
  int v12[10];
  int v13;
  int v14[10];
  int v15;
  _BYTE v16[8];
  int v17[10];
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = *(WTF **)(this + 24);
  v3 = *(unsigned int *)(this + 36);
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  if ((_DWORD)v3)
  {
    v10 = v2;
    v4 = 16 * v3;
    v5 = (uint64_t *)((char *)v2 + 8);
    v6 = 16 * v3;
    do
    {
      v7 = *v5;
      *v5 = 0;
      if (v7)
      {
        v12[0] = 1;
        v13 = 1;
        v14[0] = 1;
        v15 = 1;
        v17[0] = 1;
        v18 = 1;
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v7 + 16))(v7, v16);
        if (v18 != -1)
          ((void (*)(char *, int *))off_1E33EE630[v18])(&v11, v17);
        if (v15 != -1)
          ((void (*)(_BYTE *, int *))off_1E33EE630[v15])(v16, v14);
        v15 = -1;
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
        if (v13 != -1)
          ((void (*)(_BYTE *, int *))off_1E33EE630[v13])(v16, v12);
        v13 = -1;
      }
      v5 += 2;
      v6 -= 16;
    }
    while (v6);
    v2 = v10;
    v8 = (uint64_t *)((char *)v10 + 8);
    do
    {
      v9 = *v8;
      *v8 = 0;
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      this = *(v8 - 1);
      *(v8 - 1) = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2)
          this = WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
        else
          *(_DWORD *)this -= 2;
      }
      v8 += 2;
      v4 -= 16;
    }
    while (v4);
  }
  if (v2)
    return WTF::fastFree(v2, a2);
  return this;
}

uint64_t WebCore::InspectorFrontendAPIDispatcher::invalidatePendingResponses(uint64_t this, void *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  char v15;
  int v16[10];
  int v17;
  int v18[10];
  int v19;
  char v20[8];
  int v21[10];
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD **)(this + 40);
  *(_QWORD *)(this + 40) = 0;
  if (!v2)
  {
    v5 = 0;
    v3 = 0;
LABEL_10:
    v4 = &v2[2 * v3];
    goto LABEL_11;
  }
  v3 = *((unsigned int *)v2 - 1);
  v4 = &v2[2 * v3];
  if (!*((_DWORD *)v2 - 3))
  {
    v5 = &v2[2 * v3];
    goto LABEL_10;
  }
  v5 = v2;
  if ((_DWORD)v3)
  {
    v6 = 16 * v3;
    v5 = v2;
    while ((unint64_t)(*v5 + 1) <= 1)
    {
      v5 += 2;
      v6 -= 16;
      if (!v6)
      {
        v5 = v4;
        break;
      }
    }
  }
LABEL_11:
  v14 = v2;
  if (v2)
    v7 = &v2[2 * *((unsigned int *)v2 - 1)];
  else
    v7 = 0;
  while (v5 != v7)
  {
    v16[0] = 1;
    v17 = 1;
    v8 = v5[1];
    v5[1] = 0;
    v18[0] = 1;
    v19 = 1;
    v21[0] = 1;
    v22 = 1;
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v8 + 16))(v8, v20);
    if (v22 != -1)
      ((void (*)(char *, int *))off_1E33EE630[v22])(&v15, v21);
    if (v19 != -1)
      ((void (*)(char *, int *))off_1E33EE630[v19])(v20, v18);
    v19 = -1;
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    if (v17 != -1)
      this = ((uint64_t (*)(char *, int *))off_1E33EE630[v17])(v20, v16);
    v17 = -1;
    v9 = v5 + 2;
    v5 = v4;
    if (v9 != v4)
    {
      v5 = v9;
      while ((unint64_t)(*v5 + 1) <= 1)
      {
        v5 += 2;
        if (v5 == v4)
        {
          v5 = v4;
          break;
        }
      }
    }
  }
  if (v14)
  {
    v10 = *((unsigned int *)v14 - 1);
    if ((_DWORD)v10)
    {
      v11 = v14;
      do
      {
        v12 = (_DWORD *)*v11;
        if (*v11 != -1)
        {
          v13 = v11[1];
          v11[1] = 0;
          if (v13)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
            v12 = (_DWORD *)*v11;
          }
          *v11 = 0;
          if (v12)
          {
            if (v12[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 16))(v12);
            else
              --v12[4];
          }
        }
        v11 += 2;
        --v10;
      }
      while (v10);
    }
    return WTF::fastFree((WTF *)(v14 - 2), a2);
  }
  return this;
}

uint64_t WebCore::InspectorFrontendAPIDispatcher::reset(WebCore::InspectorFrontendAPIDispatcher *this, WTF::StringImpl *a2)
{
  void *v3;

  *((_WORD *)this + 24) = 0;
  WebCore::InspectorFrontendAPIDispatcher::invalidateQueuedExpressions((uint64_t)this, a2);
  return WebCore::InspectorFrontendAPIDispatcher::invalidatePendingResponses((uint64_t)this, v3);
}

uint64_t WebCore::InspectorFrontendAPIDispatcher::frontendLoaded(uint64_t this)
{
  *(_BYTE *)(this + 48) = 1;
  if (!*(_BYTE *)(this + 49))
    return WebCore::InspectorFrontendAPIDispatcher::evaluateQueuedExpressions(this);
  return this;
}

uint64_t WebCore::InspectorFrontendAPIDispatcher::evaluateQueuedExpressions(uint64_t this)
{
  uint64_t v1;
  const WTF::String *v2;
  uint64_t v3;
  WTF *v4;
  WTF *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  _BYTE v15[32];
  unsigned int v16;
  char v17;
  _BYTE v18[32];
  int v19;
  int v20;
  _BYTE v21[32];
  int v22;
  int v23;
  char v24[8];
  _BYTE v25[32];
  int v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(this + 16);
  if (v1)
  {
    if (*(_QWORD *)(v1 + 8))
    {
      v2 = (const WTF::String *)this;
      v3 = *(unsigned int *)(this + 36);
      if ((_DWORD)v3)
      {
        v4 = *(WTF **)(this + 24);
        v13 = v4;
        v14 = *(unsigned int *)(this + 36);
        v5 = (WTF *)((char *)v4 + 16 * v3);
        *(_QWORD *)(this + 24) = 0;
        *(_QWORD *)(this + 32) = 0;
        do
        {
          WebCore::InspectorFrontendAPIDispatcher::evaluateExpression((WebCore::InspectorFrontendAPIDispatcher *)v15, v2, (_DWORD **)v4);
          v7 = *((_QWORD *)v4 + 1);
          *((_QWORD *)v4 + 1) = 0;
          if (v7)
          {
            v18[0] = 0;
            v19 = -1;
            v8 = v16;
            if (v16 == -1)
            {
              v20 = 0;
              v21[0] = 0;
              v22 = -1;
              v23 = 0;
              v25[0] = 0;
            }
            else
            {
              ((void (*)(char *, _BYTE *, _BYTE *))off_1E33EE640[v16])(v24, v18, v15);
              v19 = v8;
              v20 = 0;
              v21[0] = 0;
              v23 = -1;
              v22 = -1;
              v9 = off_1E33EE620[v8];
              ((void (*)(char *, _BYTE *, _BYTE *))v9)(v24, v21, v18);
              v22 = v8;
              v23 = 0;
              v25[0] = 0;
              v27 = -1;
              v26 = -1;
              ((void (*)(char *, _BYTE *, _BYTE *))v9)(&v17, v25, v21);
            }
            v26 = v8;
            v27 = 0;
            (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 16))(v7, v24);
            if (v27 != -1)
              ((void (*)(char *, _BYTE *))off_1E33EE630[v27])(&v17, v25);
            if (v23 != -1)
              ((void (*)(char *, _BYTE *))off_1E33EE630[v23])(v24, v21);
            v23 = -1;
            (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
            if (v20 != -1)
              ((void (*)(char *, _BYTE *))off_1E33EE630[v20])(v24, v18);
            v20 = -1;
          }
          if (v16 != -1)
            ((void (*)(char *, _BYTE *))off_1E33EE610[v16])(v24, v15);
          v4 = (WTF *)((char *)v4 + 16);
        }
        while (v4 != v5);
        v10 = 0;
        do
        {
          v11 = (uint64_t *)((char *)v13 + v10);
          v12 = *(_QWORD *)((char *)v13 + v10 + 8);
          *(_QWORD *)((char *)v13 + v10 + 8) = 0;
          if (v12)
            (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
          this = *v11;
          *v11 = 0;
          if (this)
          {
            if (*(_DWORD *)this == 2)
              this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v6);
            else
              *(_DWORD *)this -= 2;
          }
          v10 += 16;
        }
        while (16 * v14 != v10);
        if (v13)
          return WTF::fastFree(v13, v6);
      }
    }
  }
  return this;
}

_BYTE *WebCore::InspectorFrontendAPIDispatcher::suspend(_BYTE *result, int a2)
{
  _DWORD *v2;
  _QWORD *v3;
  _BYTE *v4;

  if (!result[49])
  {
    v2 = result;
    result[49] = 1;
    if (a2)
    {
      WTF::RunLoop::main((WTF::RunLoop *)result);
      ++*v2;
      v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v3 = &off_1E33EE750;
      v3[1] = v2;
      v4 = v3;
      WTF::RunLoop::dispatch();
      result = v4;
      if (v4)
        return (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  return result;
}

uint64_t WebCore::InspectorFrontendAPIDispatcher::unsuspend(uint64_t this)
{
  if (*(_BYTE *)(this + 49))
  {
    *(_BYTE *)(this + 49) = 0;
    if (*(_BYTE *)(this + 48))
      return WebCore::InspectorFrontendAPIDispatcher::evaluateQueuedExpressions(this);
  }
  return this;
}

uint64_t WebCore::InspectorFrontendAPIDispatcher::frontendGlobalObject(WebCore::InspectorFrontendAPIDispatcher *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  WebCore::DOMWrapperWorld *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  v1 = *((_QWORD *)this + 2);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 160);
      if (v3 && *(_BYTE *)(v3 + 144) == 0)
      {
        v6 = *(_QWORD *)(v3 + 304);
        {
          v7 = (WebCore::DOMWrapperWorld *)WebCore::mainThreadNormalWorld(void)::cachedNormalWorld;
          return *((_QWORD *)WebCore::WindowProxy::jsWindowProxy(*(WebCore::WindowProxy **)(*(_QWORD *)(v6 + 16) + 112), v7)+ 2);
        }
        v10 = v6;
        v8 = WebCore::g_commonVMOrNull;
        if (WebCore::g_commonVMOrNull)
        {
LABEL_20:
          v7 = *(WebCore::DOMWrapperWorld **)(*(_QWORD *)(v8 + 41456) + 16);
          WebCore::mainThreadNormalWorld(void)::cachedNormalWorld = (uint64_t)v7;
          v6 = v10;
          return *((_QWORD *)WebCore::WindowProxy::jsWindowProxy(*(WebCore::WindowProxy **)(*(_QWORD *)(v6 + 16) + 112), v7)+ 2);
        }
        WTF::RunLoop::webIfExists(this);
        JSC::VM::create();
        v8 = v11;
        WebCore::g_commonVMOrNull = v11;
        if (__ldaxr((unsigned int *)(v11 + 1096)))
        {
          __clrex();
        }
        else if (!__stlxr(4u, (unsigned int *)(v11 + 1096)))
        {
LABEL_17:
          if (webThreadStarted == 1)
            *(_BYTE *)(*(_QWORD *)(v11 + 112) + 5) = 1;
          WTF::ThreadGroup::addCurrentThread(**(WTF::ThreadGroup ***)(v11 + 584));
          WebCore::JSVMClientData::initNormalWorld((JSC::VM *)v11, 0);
          goto LABEL_20;
        }
        JSC::Heap::acquireAccessSlow((JSC::Heap *)(v11 + 192));
        goto LABEL_17;
      }
    }
  }
  return 0;
}

WTF::StringImpl *WebCore::InspectorFrontendAPIDispatcher::dispatchCommandWithResultSync(WTF::StringImpl *result, const WTF::String *a2, uint64_t a3, uint64_t a4)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v6;
  unsigned int v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  _BYTE v10[32];
  unsigned int v11;
  char v12;

  v4 = result;
  if (*((_BYTE *)a2 + 49))
  {
    *((_DWORD *)result + 2) = 0;
    *((_DWORD *)result + 12) = 1;
  }
  else
  {
    WebCore::expressionForEvaluatingCommand(&v9, a3, a4);
    WebCore::InspectorFrontendAPIDispatcher::evaluateExpression((WebCore::InspectorFrontendAPIDispatcher *)v10, a2, (_DWORD **)&v9);
    *((_BYTE *)v4 + 8) = 0;
    v6 = (WTF::StringImpl *)((char *)v4 + 8);
    *((_DWORD *)v4 + 10) = -1;
    v7 = v11;
    if (v11 == -1)
    {
      *((_DWORD *)v4 + 12) = 0;
    }
    else
    {
      ((void (*)(char *))off_1E33EE620[v11])(&v12);
      *((_DWORD *)v4 + 10) = v7;
      v8 = v11;
      *((_DWORD *)v4 + 12) = 0;
      if ((_DWORD)v8 != -1)
        ((void (*)(char *, _BYTE *))off_1E33EE610[v8])(&v12, v10);
    }
    v11 = -1;
    result = v9;
    v9 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebCore::InspectorFrontendAPIDispatcher::evaluateExpression(WebCore::InspectorFrontendAPIDispatcher *this, const WTF::String *a2, _DWORD **a3)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  WTF::RunLoop *v14;
  WebCore::DOMWrapperWorld *v15;
  void *v16;
  WTF::StringImpl *v17;
  _DWORD *v18;
  _DWORD *v19;
  WTF::StringImpl *result;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  int32x2_t v25;
  WTF::StringImpl *v26[5];
  uint64_t v27;
  _DWORD *v28;
  unsigned int *v29;
  uint64_t v30;

  v6 = WebCore::g_commonVMOrNull;
  if (WebCore::g_commonVMOrNull)
    goto LABEL_9;
  WTF::RunLoop::webIfExists(this);
  JSC::VM::create();
  v6 = v27;
  WebCore::g_commonVMOrNull = v27;
  if (__ldaxr((unsigned int *)(v27 + 1096)))
  {
    __clrex();
LABEL_5:
    JSC::Heap::acquireAccessSlow((JSC::Heap *)(v27 + 192));
    goto LABEL_6;
  }
  if (__stlxr(4u, (unsigned int *)(v27 + 1096)))
    goto LABEL_5;
LABEL_6:
  if (webThreadStarted == 1)
    *(_BYTE *)(*(_QWORD *)(v27 + 112) + 5) = 1;
  WTF::ThreadGroup::addCurrentThread(**(WTF::ThreadGroup ***)(v6 + 584));
  WebCore::JSVMClientData::initNormalWorld((JSC::VM *)v6, 0);
LABEL_9:
  v8 = *(_QWORD *)(v6 + 16);
  *(_QWORD *)(v6 + 16) = 0;
  v9 = *(_QWORD *)(v6 + 32);
  *(_QWORD *)(v6 + 32) = 0;
  if (v8)
  {
    v10 = (unsigned int *)(v6 + 80);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 & 0xFFFFFFEF, v10));
  }
  v12 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 2) + 8) + 160);
  if (*(_BYTE *)(v12 + 144))
    v12 = 0;
  v13 = *(_QWORD *)(v12 + 304);
  v26[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v26);
  v25 = 0;
  v14 = (WTF::RunLoop *)WebCore::ScriptSourceCode::ScriptSourceCode((int32x2_t *)&v27, a3, 0, v26, &v25);
  {
    v15 = (WebCore::DOMWrapperWorld *)WebCore::mainThreadNormalWorld(void)::cachedNormalWorld;
    goto LABEL_16;
  }
  v23 = WebCore::g_commonVMOrNull;
  if (!WebCore::g_commonVMOrNull)
  {
    WTF::RunLoop::webIfExists(v14);
    JSC::VM::create();
    v23 = v30;
    WebCore::g_commonVMOrNull = v30;
    if (__ldaxr((unsigned int *)(v30 + 1096)))
    {
      __clrex();
    }
    else if (!__stlxr(4u, (unsigned int *)(v30 + 1096)))
    {
LABEL_38:
      if (webThreadStarted == 1)
        *(_BYTE *)(*(_QWORD *)(v23 + 112) + 5) = 1;
      WTF::ThreadGroup::addCurrentThread(**(WTF::ThreadGroup ***)(v23 + 584));
      WebCore::JSVMClientData::initNormalWorld((JSC::VM *)v23, 0);
      goto LABEL_41;
    }
    JSC::Heap::acquireAccessSlow((JSC::Heap *)(v23 + 192));
    goto LABEL_38;
  }
LABEL_41:
  v15 = *(WebCore::DOMWrapperWorld **)(*(_QWORD *)(v23 + 41456) + 16);
  WebCore::mainThreadNormalWorld(void)::cachedNormalWorld = (uint64_t)v15;
LABEL_16:
  WebCore::ScriptController::evaluateInWorld(v13, (uint64_t)&v27, v15, (uint64_t)this);
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v29, v16);
  v18 = v28;
  v28 = 0;
  if (v18)
  {
    if (v18[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 8))(v18);
    else
      --v18[2];
  }
  v19 = (_DWORD *)v27;
  v27 = 0;
  if (v19)
  {
    if (v19[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 8))(v19);
    else
      --v19[2];
  }
  result = v26[0];
  v26[0] = 0;
  if (!result)
  {
LABEL_23:
    if (!v8)
      goto LABEL_26;
    goto LABEL_24;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_23;
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
  if (!v8)
    goto LABEL_26;
LABEL_24:
  v21 = (unsigned int *)(v6 + 80);
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 | 0x10, v21));
LABEL_26:
  *(_QWORD *)(v6 + 32) = v9;
  *(_QWORD *)(v6 + 16) = v8;
  return result;
}

WTF::StringImpl *WebCore::expressionForEvaluatingCommand(WTF::StringImpl **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  WTF::JSONImpl::Value **v6;
  uint64_t v7;
  WTF::JSONImpl::Value *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *result;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  int v14;
  char v15;
  char v16;
  uint64_t v17;
  int8x16_t *v18;
  int v19;

  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 1;
  v17 = a2;
  v18 = (int8x16_t *)"InspectorFrontendAPI.dispatch([\"";
  v19 = 32;
  v16 = 34;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((WTF::StringBuilder *)&v12, &v18, &v17, &v16);
  v5 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v5)
  {
    v6 = *(WTF::JSONImpl::Value ***)a3;
    v7 = 8 * v5;
    do
    {
      WTF::StringBuilder::append();
      v8 = *v6++;
      WTF::JSONImpl::Value::writeJSON(v8, (WTF::StringBuilder *)&v12);
      v7 -= 8;
    }
    while (v7);
  }
  WTF::StringBuilder::append();
  result = v12;
  if (v12
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v12),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v12),
        (result = v12) != 0))
  {
    *(_DWORD *)result += 2;
  }
  *a1 = result;
  v11 = v13;
  v13 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::destroy(v11, v9);
      result = v12;
    }
    else
    {
      *(_DWORD *)v11 -= 2;
    }
  }
  v12 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::InspectorFrontendAPIDispatcher::dispatchCommandWithResultAsync(WTF::StringImpl *a1, uint64_t *a2, uint64_t a3, WTF::StringImpl **a4)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;

  WebCore::expressionForEvaluatingCommand(&v8, *a2, a3);
  WebCore::InspectorFrontendAPIDispatcher::evaluateOrQueueExpression(a1, (WTF::StringImpl *)&v8, a4);
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::InspectorFrontendAPIDispatcher::evaluateOrQueueExpression(WTF::StringImpl *result, WTF::StringImpl *a2, WTF::StringImpl **a3)
{
  uint64_t v4;
  WTF::StringImpl *v6;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF::StringImpl **v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t (*v24)();
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  unint64_t v29;
  WebCore::DOMWrapperWorld *v30;
  unint64_t v31;
  uint64_t v32;
  WebCore::DOMGuardedObject *v33;
  uint64_t v34;
  uint64_t *v35;
  unsigned int v36;
  uint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  unint64_t v56;
  unsigned int v57;
  uint64_t v58;
  void *v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  _QWORD *v64;
  uint64_t v65;
  JSC::JSGlobalObject *v66;
  uint64_t v67;
  JSC::Structure *v68;
  _QWORD *v69;
  BOOL IsSettled;
  WTF::StringImpl **v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  unsigned int *v75;
  uint64_t v77;
  _QWORD v78[4];
  unsigned int v79;
  _BYTE v80[32];
  int v81;
  int v82;
  _QWORD *v83;
  _BYTE v84[32];
  int v85;
  int v86;
  WTF::StringImpl *v87;
  _QWORD v88[2];
  WTF::StringImpl **v89;
  int v90;
  int v91;
  uint64_t v92;

  v92 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)result + 2);
  if (!v4 || !*(_QWORD *)(v4 + 8))
  {
    v19 = *a3;
    if (*a3)
    {
      *a3 = 0;
      LODWORD(v88[0]) = 1;
      v91 = 1;
      (*(void (**)(WTF::StringImpl *, WTF::StringImpl **))(*(_QWORD *)v19 + 16))(v19, &v87);
      if (v91 != -1)
        ((void (*)(_QWORD **, _QWORD *))off_1E33EE630[v91])(&v83, v88);
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v19 + 8))(v19);
    }
    return result;
  }
  v6 = result;
  if (WebCore::ScriptDisallowedScope::s_count)
  {
    if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType >= 0x100u
      && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 0
      && !webThreadDelegateMessageScopeCount
      && !*((_BYTE *)result + 49))
    {
      *((_BYTE *)result + 49) = 1;
      WTF::RunLoop::main(result);
      ++*(_DWORD *)v6;
      v8 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v8 = &off_1E33EE750;
      *((_QWORD *)v8 + 1) = v6;
      v87 = v8;
      WTF::RunLoop::dispatch();
      v9 = v87;
      v87 = 0;
      if (v9)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  if (!*((_BYTE *)v6 + 48) || *((_BYTE *)v6 + 49))
  {
    v10 = *(WTF::StringImpl **)a2;
    if (*(_QWORD *)a2)
      *(_DWORD *)v10 += 2;
    v11 = *a3;
    *a3 = 0;
    v87 = v10;
    v88[0] = v11;
    v12 = *((unsigned int *)v6 + 9);
    if ((_DWORD)v12 == *((_DWORD *)v6 + 8))
    {
      v13 = (uint64_t *)WTF::Vector<std::pair<WTF::String,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::experimental::fundamentals_v3::expected<JSC::JSValue,WebCore::ExceptionDetails>,WebCore::InspectorFrontendAPIDispatcher::EvaluationError>)>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)v6 + 6, v12 + 1, (unint64_t)&v87);
      v14 = *((unsigned int *)v6 + 9);
      v15 = (_QWORD *)(*((_QWORD *)v6 + 3) + 16 * v14);
      v16 = *v13;
      *v13 = 0;
      *v15 = v16;
      v17 = v13[1];
      v13[1] = 0;
      v15[1] = v17;
      v18 = v88[0];
      *((_DWORD *)v6 + 9) = v14 + 1;
      v88[0] = 0;
      if (v18)
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    }
    else
    {
      v20 = *((_QWORD *)v6 + 3);
      v87 = 0;
      v21 = (WTF::StringImpl **)(v20 + 16 * v12);
      *v21 = v10;
      v21[1] = v11;
      *((_DWORD *)v6 + 9) = v12 + 1;
      v88[0] = 0;
    }
    result = v87;
    v87 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
      else
        *(_DWORD *)result -= 2;
    }
    return result;
  }
  result = WebCore::InspectorFrontendAPIDispatcher::evaluateExpression((WebCore::InspectorFrontendAPIDispatcher *)v78, v6, (_DWORD **)a2);
  v22 = *a3;
  if (!*a3)
    goto LABEL_69;
  v23 = v79;
  if (v79)
  {
    v80[0] = 0;
    v81 = -1;
    if (v79 == -1)
    {
      v82 = 0;
      *a3 = 0;
      v84[0] = 0;
      v85 = -1;
      v86 = 0;
      LOBYTE(v88[0]) = 0;
      v90 = -1;
    }
    else
    {
      ((void (*)(WTF::StringImpl **, _BYTE *, _QWORD *))off_1E33EE640[v79])(&v87, v80, v78);
      v22 = *a3;
      v81 = v23;
      v82 = 0;
      *a3 = 0;
      v84[0] = 0;
      v86 = -1;
      v85 = -1;
      v24 = off_1E33EE620[v23];
      ((void (*)(WTF::StringImpl **, _BYTE *, _BYTE *))v24)(&v87, v84, v80);
      v85 = v23;
      v86 = 0;
      LOBYTE(v88[0]) = 0;
      v91 = -1;
      v90 = -1;
      ((void (*)(uint64_t *, _QWORD *, _BYTE *))v24)(&v77, v88, v84);
      v90 = v23;
    }
    v91 = 0;
    (*(void (**)(WTF::StringImpl *, WTF::StringImpl **))(*(_QWORD *)v22 + 16))(v22, &v87);
    if (v91 != -1)
      ((void (*)(uint64_t *, _QWORD *))off_1E33EE630[v91])(&v77, v88);
    if (v86 != -1)
      ((void (*)(WTF::StringImpl **, _BYTE *))off_1E33EE630[v86])(&v87, v84);
    v86 = -1;
    result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v22 + 8))(v22);
    if (v82 != -1)
      result = (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, _BYTE *))off_1E33EE630[v82])(&v87, v80);
    v82 = -1;
    goto LABEL_69;
  }
  v25 = *((_QWORD *)v6 + 2);
  if (!v25
    || (v26 = *(_QWORD *)(v25 + 8)) == 0
    || ((v27 = *(_QWORD *)(v26 + 160)) != 0 ? (v28 = *(_BYTE *)(v27 + 144) == 0) : (v28 = 0), !v28))
  {
LABEL_66:
    *a3 = 0;
    LODWORD(v88[0]) = 1;
    v91 = 1;
    (*(void (**)(WTF::StringImpl *, WTF::StringImpl **))(*(_QWORD *)v22 + 16))(v22, &v87);
    if (v91 != -1)
      ((void (*)(_QWORD **, _QWORD *))off_1E33EE630[v91])(&v83, v88);
    result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v22 + 8))(v22);
    goto LABEL_69;
  }
  v29 = *(_QWORD *)(v27 + 304);
  {
    v22 = (WTF::StringImpl *)WebCore::g_commonVMOrNull;
    if (WebCore::g_commonVMOrNull)
      goto LABEL_138;
    WTF::RunLoop::webIfExists(result);
    JSC::VM::create();
    v22 = v87;
    WebCore::g_commonVMOrNull = (uint64_t)v87;
    v75 = (unsigned int *)((char *)v87 + 1096);
    if (__ldaxr((unsigned int *)v87 + 274))
    {
      __clrex();
      goto LABEL_134;
    }
    goto LABEL_133;
  }
  v30 = (WebCore::DOMWrapperWorld *)WebCore::mainThreadNormalWorld(void)::cachedNormalWorld;
  while (1)
  {
    v29 = *((_QWORD *)WebCore::WindowProxy::jsWindowProxy(*(WebCore::WindowProxy **)(*(_QWORD *)(v29 + 16) + 112), v30)+ 2);
    if (!v29)
    {
      v22 = *a3;
      goto LABEL_66;
    }
    JSC::JSLockHolder::JSLockHolder();
    if (!v79)
      break;
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_133:
    if (__stlxr(4u, v75))
LABEL_134:
      JSC::Heap::acquireAccessSlow((WTF::StringImpl *)((char *)v22 + 192));
    if (webThreadStarted == 1)
      *(_BYTE *)(*((_QWORD *)v22 + 14) + 5) = 1;
    WTF::ThreadGroup::addCurrentThread(**((WTF::ThreadGroup ***)v22 + 73));
    WebCore::JSVMClientData::initNormalWorld(v22, 0);
LABEL_138:
    v30 = *(WebCore::DOMWrapperWorld **)(*((_QWORD *)v22 + 5182) + 16);
    WebCore::mainThreadNormalWorld(void)::cachedNormalWorld = (uint64_t)v30;
  }
  v31 = v78[0];
  if ((v78[0] & 0xFFFE000000000002) != 0 || *(_BYTE *)(v78[0] + 5) != 68)
  {
    v74 = *a3;
    *a3 = 0;
    v88[0] = v31;
    v90 = 0;
    v91 = 0;
    (*(void (**)(WTF::StringImpl *, WTF::StringImpl **))(*(_QWORD *)v74 + 16))(v74, &v87);
    if (v91 != -1)
      ((void (*)(_QWORD **, _QWORD *))off_1E33EE630[v91])(&v83, v88);
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v74 + 8))(v74);
    goto LABEL_120;
  }
  v32 = WTF::fastMalloc((WTF *)0x28);
  v33 = WebCore::DOMGuardedObject::DOMGuardedObject((WebCore::DOMGuardedObject *)v32, v29, v31);
  *(_QWORD *)v33 = &off_1E3251870;
  ++*((_DWORD *)v33 + 4);
  v35 = (uint64_t *)((char *)v6 + 40);
  v34 = *((_QWORD *)v6 + 5);
  if (v34
    || (WTF::HashTable<WTF::Ref<WebCore::DOMPromise,WTF::RawPtrTraits<WebCore::DOMPromise>,WTF::DefaultRefDerefTraits<WebCore::DOMPromise>>,WTF::KeyValuePair<WTF::Ref<WebCore::DOMPromise,WTF::RawPtrTraits<WebCore::DOMPromise>,WTF::DefaultRefDerefTraits<WebCore::DOMPromise>>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::experimental::fundamentals_v3::expected<JSC::JSValue,WebCore::ExceptionDetails>,WebCore::InspectorFrontendAPIDispatcher::EvaluationError>)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::DOMPromise,WTF::RawPtrTraits<WebCore::DOMPromise>,WTF::DefaultRefDerefTraits<WebCore::DOMPromise>>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::experimental::fundamentals_v3::expected<JSC::JSValue,WebCore::ExceptionDetails>,WebCore::InspectorFrontendAPIDispatcher::EvaluationError>)>>>,WTF::DefaultHash<WTF::Ref<WebCore::DOMPromise,WTF::RawPtrTraits<WebCore::DOMPromise>,WTF::DefaultRefDerefTraits<WebCore::DOMPromise>>>,WTF::HashMap<WTF::Ref<WebCore::DOMPromise,WTF::RawPtrTraits<WebCore::DOMPromise>,WTF::DefaultRefDerefTraits<WebCore::DOMPromise>>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::experimental::fundamentals_v3::expected<JSC::JSValue,WebCore::ExceptionDetails>,WebCore::InspectorFrontendAPIDispatcher::EvaluationError>)>,WTF::DefaultHash<WTF::Ref<WebCore::DOMPromise,WTF::RawPtrTraits<WebCore::DOMPromise>,WTF::DefaultRefDerefTraits<WebCore::DOMPromise>>>,WTF::HashTraits<WTF::Ref<WebCore::DOMPromise,WTF::RawPtrTraits<WebCore::DOMPromise>,WTF::DefaultRefDerefTraits<WebCore::DOMPromise>>>,WTF::HashTraits<WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::experimental::fundamentals_v3::expected<JSC::JSValue,WebCore::ExceptionDetails>,WebCore::InspectorFrontendAPIDispatcher::EvaluationError>)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::DOMPromise,WTF::RawPtrTraits<WebCore::DOMPromise>,WTF::DefaultRefDerefTraits<WebCore::DOMPromise>>>>::rehash((uint64_t *)v6 + 5, 8u), (v34 = *v35) != 0))
  {
    v36 = *(_DWORD *)(v34 - 8);
  }
  else
  {
    v36 = 0;
  }
  v37 = 0;
  v38 = (~(v32 << 32) + v32) ^ ((unint64_t)(~(v32 << 32) + v32) >> 22);
  v39 = 9 * ((v38 + ~(v38 << 13)) ^ ((v38 + ~(v38 << 13)) >> 8));
  v40 = (v39 ^ (v39 >> 15)) + ~((v39 ^ (v39 >> 15)) << 27);
  v41 = (v40 >> 31) ^ v40;
  v42 = 1;
  while (2)
  {
    v43 = v41 & v36;
    v44 = (uint64_t *)(v34 + 16 * v43);
    v45 = *v44;
    if (*v44 == -1)
    {
      v37 = (uint64_t *)(v34 + 16 * v43);
      goto LABEL_56;
    }
    if (!v45)
    {
      if (v37)
      {
        *v37 = 0;
        v37[1] = 0;
        --*(_DWORD *)(*v35 - 16);
        *v37 = v32;
      }
      else
      {
        *v44 = v32;
        v37 = (uint64_t *)(v34 + 16 * v43);
      }
      v49 = *a3;
      *a3 = 0;
      v50 = v37[1];
      v37[1] = (uint64_t)v49;
      if (v50)
        (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
      v51 = *v35;
      if (*v35)
        v52 = *(_DWORD *)(v51 - 12) + 1;
      else
        v52 = 1;
      *(_DWORD *)(v51 - 12) = v52;
      v53 = *v35;
      if (*v35)
        v54 = *(_DWORD *)(v53 - 12);
      else
        v54 = 0;
      v55 = (*(_DWORD *)(v53 - 16) + v54);
      v56 = *(unsigned int *)(v53 - 4);
      if (v56 > 0x400)
      {
        if (v56 > 2 * v55)
          goto LABEL_93;
      }
      else
      {
        if (3 * v56 > 4 * v55)
          goto LABEL_93;
        if (!(_DWORD)v56)
        {
          v57 = 8;
          goto LABEL_92;
        }
      }
      v57 = (_DWORD)v56 << (6 * *(_DWORD *)(v53 - 12) >= (2 * v56));
LABEL_92:
      WTF::HashTable<WTF::Ref<WebCore::DOMPromise,WTF::RawPtrTraits<WebCore::DOMPromise>,WTF::DefaultRefDerefTraits<WebCore::DOMPromise>>,WTF::KeyValuePair<WTF::Ref<WebCore::DOMPromise,WTF::RawPtrTraits<WebCore::DOMPromise>,WTF::DefaultRefDerefTraits<WebCore::DOMPromise>>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::experimental::fundamentals_v3::expected<JSC::JSValue,WebCore::ExceptionDetails>,WebCore::InspectorFrontendAPIDispatcher::EvaluationError>)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::DOMPromise,WTF::RawPtrTraits<WebCore::DOMPromise>,WTF::DefaultRefDerefTraits<WebCore::DOMPromise>>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::experimental::fundamentals_v3::expected<JSC::JSValue,WebCore::ExceptionDetails>,WebCore::InspectorFrontendAPIDispatcher::EvaluationError>)>>>,WTF::DefaultHash<WTF::Ref<WebCore::DOMPromise,WTF::RawPtrTraits<WebCore::DOMPromise>,WTF::DefaultRefDerefTraits<WebCore::DOMPromise>>>,WTF::HashMap<WTF::Ref<WebCore::DOMPromise,WTF::RawPtrTraits<WebCore::DOMPromise>,WTF::DefaultRefDerefTraits<WebCore::DOMPromise>>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::experimental::fundamentals_v3::expected<JSC::JSValue,WebCore::ExceptionDetails>,WebCore::InspectorFrontendAPIDispatcher::EvaluationError>)>,WTF::DefaultHash<WTF::Ref<WebCore::DOMPromise,WTF::RawPtrTraits<WebCore::DOMPromise>,WTF::DefaultRefDerefTraits<WebCore::DOMPromise>>>,WTF::HashTraits<WTF::Ref<WebCore::DOMPromise,WTF::RawPtrTraits<WebCore::DOMPromise>,WTF::DefaultRefDerefTraits<WebCore::DOMPromise>>>,WTF::HashTraits<WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::experimental::fundamentals_v3::expected<JSC::JSValue,WebCore::ExceptionDetails>,WebCore::InspectorFrontendAPIDispatcher::EvaluationError>)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::DOMPromise,WTF::RawPtrTraits<WebCore::DOMPromise>,WTF::DefaultRefDerefTraits<WebCore::DOMPromise>>>>::rehash((uint64_t *)v6 + 5, v57);
      goto LABEL_93;
    }
    if (v45 != v32)
    {
LABEL_56:
      v41 = v42 + v43;
      ++v42;
      continue;
    }
    break;
  }
  v46 = v34 + 16 * v43;
  v47 = *a3;
  *a3 = 0;
  v48 = *(_QWORD *)(v46 + 8);
  *(_QWORD *)(v46 + 8) = v47;
  if (v48)
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  if (*(_DWORD *)(v32 + 16) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
  else
    --*(_DWORD *)(v32 + 16);
LABEL_93:
  ++*(_DWORD *)(v32 + 16);
  v58 = *((_QWORD *)v6 + 1);
  if (v58)
    goto LABEL_142;
  v58 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v58 = 1;
  *(_QWORD *)(v58 + 8) = v6;
  v60 = (unsigned int *)*((_QWORD *)v6 + 1);
  *((_QWORD *)v6 + 1) = v58;
  if (!v60)
    goto LABEL_142;
  do
  {
    v61 = __ldaxr(v60);
    v62 = v61 - 1;
  }
  while (__stlxr(v62, v60));
  if (!v62)
  {
    atomic_store(1u, v60);
    WTF::fastFree((WTF *)v60, v59);
  }
  v58 = *((_QWORD *)v6 + 1);
  if (v58)
  {
LABEL_142:
    do
      v63 = __ldaxr((unsigned int *)v58);
    while (__stlxr(v63 + 1, (unsigned int *)v58));
  }
  v64 = operator new(0x18uLL);
  *v64 = &off_1E33EE778;
  v64[1] = v32;
  v64[2] = v58;
  v65 = *(_QWORD *)(v32 + 32);
  if (!v65 || (*(_BYTE *)(v65 + 8) & 3) != 0)
    v66 = 0;
  else
    v66 = *(JSC::JSGlobalObject **)v65;
  v67 = **(_QWORD **)(v32 + 24);
  if ((v67 & 0xFFFE000000000002) != 0)
  {
    v68 = 0;
  }
  else if (*(_BYTE *)(v67 + 5) == 68)
  {
    v68 = **(JSC::Structure ***)(v32 + 24);
  }
  else
  {
    v68 = 0;
  }
  v69 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v69 = &off_1E3392A30;
  v69[4] = v64;
  v89 = 0;
  v83 = v69;
  IsSettled = WebCore::DOMPromise::whenPromiseIsSettled(v66, v68, (uint64_t *)&v83);
  if (v83)
    (*(void (**)(_QWORD *))(*v83 + 8))(v83);
  v71 = v89;
  if (v89 == &v87)
  {
    v72 = 4;
    v71 = &v87;
LABEL_113:
    (*((void (**)(void))*v71 + v72))();
  }
  else if (v89)
  {
    v72 = 5;
    goto LABEL_113;
  }
  if (!IsSettled)
  {
    v73 = *a3;
    *a3 = 0;
    LODWORD(v88[0]) = 2;
    v91 = 1;
    (*(void (**)(WTF::StringImpl *, WTF::StringImpl **))(*(_QWORD *)v73 + 16))(v73, &v87);
    if (v91 != -1)
      ((void (*)(_QWORD **, _QWORD *))off_1E33EE630[v91])(&v83, v88);
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v73 + 8))(v73);
  }
  if (*(_DWORD *)(v32 + 16) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
  else
    --*(_DWORD *)(v32 + 16);
LABEL_120:
  result = (WTF::StringImpl *)MEMORY[0x19AEA32A0](&v77);
LABEL_69:
  if (v79 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, _QWORD *))off_1E33EE610[v79])(&v87, v78);
  return result;
}

WTF::StringImpl *WebCore::InspectorFrontendAPIDispatcher::dispatchMessageAsync(WebCore::InspectorFrontendAPIDispatcher *this, WTF::StringImpl **a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;

  v3 = *a2;
  if (*a2)
    *(_DWORD *)v3 += 2;
  v8 = v3;
  WTF::makeString<WTF::ASCIILiteral,WTF::String,char>((uint64_t)"InspectorFrontendAPI.dispatchMessageAsync(", 43, (uint64_t *)&v8, 41, &v9);
  v7 = 0;
  WebCore::InspectorFrontendAPIDispatcher::evaluateOrQueueExpression(this, (WTF::StringImpl *)&v9, &v7);
  if (v7)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v7 + 8))(v7);
  v5 = v9;
  v9 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::InspectorFrontendAPIDispatcher::evaluateExpressionForTesting(WebCore::InspectorFrontendAPIDispatcher *this, const WTF::String *a2)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v3;

  v3 = 0;
  WebCore::InspectorFrontendAPIDispatcher::evaluateOrQueueExpression(this, a2, &v3);
  result = v3;
  if (v3)
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v3 + 8))(v3);
  return result;
}

void WebCore::InspectorFrontendClientLocal::Settings::getProperty(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::InspectorFrontendClientLocal::InspectorFrontendClientLocal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;

  *(_QWORD *)a1 = off_1E33EE440;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = a2;
  if (a3)
  {
    v8 = *(_QWORD *)(a3 + 16);
    if (v8)
      goto LABEL_21;
    v8 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v8 = 1;
    *(_QWORD *)(v8 + 8) = a3;
    v10 = *(unsigned int **)(a3 + 16);
    *(_QWORD *)(a3 + 16) = v8;
    if (!v10)
      goto LABEL_21;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, v9);
    }
    v8 = *(_QWORD *)(a3 + 16);
    if (v8)
    {
LABEL_21:
      do
        v13 = __ldaxr((unsigned int *)v8);
      while (__stlxr(v13 + 1, (unsigned int *)v8));
    }
  }
  else
  {
    v8 = 0;
  }
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = 0;
  v14 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 40) = v14;
  *(_DWORD *)(a1 + 48) = 0;
  v15 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)v15 = 1;
  *(_QWORD *)(v15 + 8) = a2;
  *(_OWORD *)(v15 + 16) = 0u;
  *(_OWORD *)(v15 + 32) = 0u;
  *(_BYTE *)(v15 + 48) = 0;
  *(_QWORD *)(a1 + 56) = v15;
  v16 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)v16 = 1;
  *(_QWORD *)(v16 + 8) = 0;
  v17 = *(_QWORD *)(a3 + 16);
  if (v17)
    goto LABEL_22;
  v17 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v17 = 1;
  *(_QWORD *)(v17 + 8) = a3;
  v19 = *(unsigned int **)(a3 + 16);
  *(_QWORD *)(a3 + 16) = v17;
  if (!v19)
    goto LABEL_22;
  do
  {
    v20 = __ldaxr(v19);
    v21 = v20 - 1;
  }
  while (__stlxr(v21, v19));
  if (!v21)
  {
    atomic_store(1u, v19);
    WTF::fastFree((WTF *)v19, v18);
  }
  v17 = *(_QWORD *)(a3 + 16);
  if (v17)
  {
LABEL_22:
    do
      v22 = __ldaxr((unsigned int *)v17);
    while (__stlxr(v22 + 1, (unsigned int *)v17));
  }
  *(_QWORD *)(v16 + 16) = v17;
  *(_QWORD *)(v16 + 24) = 0;
  *(_QWORD *)(v16 + 32) = 0;
  *(_QWORD *)(v16 + 40) = 0;
  *(_WORD *)(v16 + 48) = 0;
  *(_QWORD *)(a1 + 64) = v16;
  v23 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 112);
  *(_QWORD *)(v23 + 664) |= 0x8000uLL;
  return a1;
}

void WebCore::InspectorFrontendClientLocal::~InspectorFrontendClientLocal(WebCore::InspectorFrontendClientLocal *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WebCore::InspectorFrontendAPIDispatcher *v12;
  unint64_t *v13;
  uint64_t v14;
  WTF *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  WTF *v26;
  void *v27;
  void *v28;
  WTF *v29;

  *(_QWORD *)this = off_1E33EE440;
  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    v4 = *(unsigned int **)(v3 + 16);
    *(_QWORD *)(v3 + 8) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    if (v4)
    {
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v4);
        WTF::fastFree((WTF *)v4, a2);
      }
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  *((_QWORD *)this + 2) = 0;
  v10 = *((_QWORD *)this + 7);
  WTF::Deque<WTF::String,0ul>::clear((WTF::StringImpl *)(v10 + 16), (WTF::StringImpl *)a2);
  *(_QWORD *)(v10 + 8) = 0;
  v12 = (WebCore::InspectorFrontendAPIDispatcher *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 1)
    {
      WebCore::InspectorFrontendAPIDispatcher::~InspectorFrontendAPIDispatcher(v12, v11);
      WTF::fastFree(v26, v27);
    }
    else
    {
      --*(_DWORD *)v12;
    }
  }
  v13 = (unint64_t *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 1)
    {
      WTF::Deque<WTF::String,0ul>::~Deque(v13 + 2, v11);
      WTF::fastFree((WTF *)v13, v28);
    }
    else
    {
      --*(_DWORD *)v13;
    }
  }
  v14 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = (WTF *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 1)
    {
      v23 = (unsigned int *)*((_QWORD *)v15 + 2);
      *((_QWORD *)v15 + 2) = 0;
      if (v23)
      {
        do
        {
          v24 = __ldaxr(v23);
          v25 = v24 - 1;
        }
        while (__stlxr(v25, v23));
        if (!v25)
        {
          atomic_store(1u, v23);
          v29 = v15;
          WTF::fastFree((WTF *)v23, v11);
          v15 = v29;
        }
      }
      WTF::fastFree(v15, v11);
    }
    else
    {
      --*(_DWORD *)v15;
    }
  }
  v16 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v16)
  {
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      atomic_store(1u, v16);
      WTF::fastFree((WTF *)v16, v11);
    }
  }
  v19 = *((_QWORD *)this + 1);
  if (v19)
  {
    *(_QWORD *)(v19 + 8) = 0;
    v20 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v20)
    {
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        atomic_store(1u, v20);
        WTF::fastFree((WTF *)v20, v11);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

unsigned int *WebCore::InspectorFrontendHost::disconnectClient(WebCore::InspectorFrontendHost *this, void *a2)
{
  unsigned int *result;
  unsigned int v4;
  unsigned int v5;

  result = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr(result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, result));
    if (!v5)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

WTF::StringImpl *WebCore::InspectorFrontendClientLocal::resetState(WebCore::InspectorFrontendClientLocal *this)
{
  uint64_t v1;
  WTF::StringImpl *v2;
  WTF::StringImpl *result;
  WTF::StringImpl *v4;

  v1 = *((_QWORD *)this + 5);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v1 + 32))(v1, &v4);
  result = v4;
  v4 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::InspectorFrontendClientLocal::frontendPage(WebCore::InspectorFrontendClientLocal *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 3);
  if (v1)
    return *(_QWORD *)(v1 + 8);
  else
    return 0;
}

WTF::StringImpl *WebCore::InspectorFrontendClientLocal::windowObjectCleared(WebCore::InspectorFrontendClientLocal *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  WTF *v16;
  WebCore::DOMWrapperWorld *v17;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  WTF *v22;
  uint64_t v23;
  uint64_t v25;

  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    v4 = *(unsigned int **)(v3 + 16);
    *(_QWORD *)(v3 + 8) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    if (v4)
    {
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v4);
        WTF::fastFree((WTF *)v4, a2);
      }
    }
  }
  v7 = *((_QWORD *)this + 3);
  if (v7)
    v8 = *(_QWORD *)(v7 + 8);
  else
    v8 = 0;
  v10 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v10 = 1;
  *((_QWORD *)v10 + 1) = this;
  if (v8)
  {
    v11 = *(_QWORD *)(v8 + 16);
    if (v11)
      goto LABEL_41;
    v11 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v11 = 1;
    *(_QWORD *)(v11 + 8) = v8;
    v12 = *(unsigned int **)(v8 + 16);
    *(_QWORD *)(v8 + 16) = v11;
    if (!v12)
      goto LABEL_41;
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v12);
      WTF::fastFree((WTF *)v12, v9);
    }
    v11 = *(_QWORD *)(v8 + 16);
    if (v11)
    {
LABEL_41:
      do
        v15 = __ldaxr((unsigned int *)v11);
      while (__stlxr(v15 + 1, (unsigned int *)v11));
    }
  }
  else
  {
    v11 = 0;
  }
  *((_QWORD *)v10 + 2) = v11;
  v16 = (WTF *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v10;
  if (v16)
  {
    if (*(_DWORD *)v16 == 1)
    {
      v19 = (unsigned int *)*((_QWORD *)v16 + 2);
      *((_QWORD *)v16 + 2) = 0;
      if (v19)
      {
        do
        {
          v20 = __ldaxr(v19);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, v19));
        if (!v21)
        {
          atomic_store(1u, v19);
          v22 = v16;
          WTF::fastFree((WTF *)v19, v9);
          v16 = v22;
        }
      }
      v16 = (WTF *)WTF::fastFree(v16, v9);
      v10 = (WTF::StringImpl *)*((_QWORD *)this + 4);
    }
    else
    {
      --*(_DWORD *)v16;
    }
  }
  {
    v23 = WebCore::g_commonVMOrNull;
    if (WebCore::g_commonVMOrNull)
    {
LABEL_38:
      v17 = *(WebCore::DOMWrapperWorld **)(*(_QWORD *)(v23 + 41456) + 16);
      WebCore::mainThreadNormalWorld(void)::cachedNormalWorld = (uint64_t)v17;
      return WebCore::InspectorFrontendHost::addSelfToGlobalObjectInWorld(v10, v17);
    }
    WTF::RunLoop::webIfExists(v16);
    JSC::VM::create();
    v23 = v25;
    WebCore::g_commonVMOrNull = v25;
    if (__ldaxr((unsigned int *)(v25 + 1096)))
    {
      __clrex();
    }
    else if (!__stlxr(4u, (unsigned int *)(v25 + 1096)))
    {
LABEL_35:
      if (webThreadStarted == 1)
        *(_BYTE *)(*(_QWORD *)(v25 + 112) + 5) = 1;
      WTF::ThreadGroup::addCurrentThread(**(WTF::ThreadGroup ***)(v25 + 584));
      WebCore::JSVMClientData::initNormalWorld((JSC::VM *)v25, 0);
      goto LABEL_38;
    }
    JSC::Heap::acquireAccessSlow((JSC::Heap *)(v25 + 192));
    goto LABEL_35;
  }
  v17 = (WebCore::DOMWrapperWorld *)WebCore::mainThreadNormalWorld(void)::cachedNormalWorld;
  return WebCore::InspectorFrontendHost::addSelfToGlobalObjectInWorld(v10, v17);
}

WTF::StringImpl *WebCore::InspectorFrontendHost::addSelfToGlobalObjectInWorld(WTF::StringImpl *this, WebCore::DOMWrapperWorld *a2)
{
  uint64_t v2;
  BOOL v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  JSC::VM *v6;
  WTF::StringImpl *v7;
  unint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  char v11[8];
  _QWORD v12[2];
  int v13;
  int v14;
  uint64_t v15;

  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 160);
  if (v2)
    v3 = *(_BYTE *)(v2 + 144) == 0;
  else
    v3 = 0;
  if (v3)
  {
    v4 = this;
    v5 = *((_QWORD *)WebCore::WindowProxy::jsWindowProxy(*(WebCore::WindowProxy **)(*(_QWORD *)(*(_QWORD *)(v2 + 304) + 16) + 112), a2)+ 2);
    v6 = *(JSC::VM **)(v5 + 56);
    MEMORY[0x19AEA3294](v11, v6);
    WTF::AtomStringImpl::addLiteral();
    v7 = (WTF::StringImpl *)v12[0];
    v8 = WebCore::wrap<WebCore::InspectorFrontendHost>(v5, v5, v4);
    v12[0] = 0;
    v12[1] = v5;
    v13 = -1;
    v14 = 0x1000000;
    v15 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v5, v6, (unint64_t)v7, v8, 0, (uint64_t)v12);
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v9);
      else
        *(_DWORD *)v7 -= 2;
    }
    v10 = *((_QWORD *)v6 + 2);
    if (v10)
      WebCore::reportException((JSC::JSGlobalObject *)v5, v10, 0, 0, 0);
    return (WTF::StringImpl *)MEMORY[0x19AEA32A0](v11);
  }
  return this;
}

uint64_t WebCore::InspectorFrontendClientLocal::frontendLoaded(WebCore::InspectorFrontendClientLocal *this)
{
  _BOOL4 canAttachWindow;
  uint64_t result;

  canAttachWindow = WebCore::InspectorFrontendClientLocal::canAttachWindow(this);
  WebCore::InspectorFrontendClientLocal::setDockingUnavailable(this, (WTF::JSONImpl::Value *)!canAttachWindow);
  (*(void (**)(WebCore::InspectorFrontendClientLocal *))(*(_QWORD *)this + 136))(this);
  result = *((_QWORD *)this + 8);
  *(_BYTE *)(result + 48) = 1;
  if (!*(_BYTE *)(result + 49))
    return WebCore::InspectorFrontendAPIDispatcher::evaluateQueuedExpressions(result);
  return result;
}

_DWORD *WebCore::InspectorFrontendClientLocal::setDockingUnavailable(WebCore::InspectorFrontendClientLocal *this, WTF::JSONImpl::Value *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF *v5;
  _DWORD *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  _DWORD *v9;
  WTF::StringImpl *v10;
  _DWORD *result;
  WTF::StringImpl *v12;
  _QWORD v13[2];
  WTF::StringImpl *v14;
  _DWORD *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v4 = (WTF::StringImpl *)v13[0];
  WTF::JSONImpl::Value::create(a2);
  v5 = (WTF *)WTF::fastMalloc((WTF *)8);
  v12 = 0;
  v13[0] = v5;
  v6 = v15;
  ++*v15;
  *(_QWORD *)v5 = v6;
  v13[1] = 0x100000001;
  WebCore::expressionForEvaluatingCommand(&v14, (uint64_t)v4, (uint64_t)v13);
  WebCore::InspectorFrontendAPIDispatcher::evaluateOrQueueExpression(v3, (WTF::StringImpl *)&v14, &v12);
  v8 = v14;
  v14 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  if (v12)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v12 + 8))(v12);
  v9 = *(_DWORD **)v5;
  *(_QWORD *)v5 = 0;
  if (v9)
  {
    if (*v9 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v9;
  }
  WTF::fastFree(v5, v7);
  result = v15;
  v15 = 0;
  if (!result)
  {
LABEL_12:
    if (!v4)
      return result;
    goto LABEL_13;
  }
  if (*result != 1)
  {
    --*result;
    goto LABEL_12;
  }
  result = (_DWORD *)WTF::JSONImpl::Value::operator delete();
  if (!v4)
    return result;
LABEL_13:
  if (*(_DWORD *)v4 == 2)
    return (_DWORD *)WTF::StringImpl::destroy(v4, v10);
  *(_DWORD *)v4 -= 2;
  return result;
}

BOOL WebCore::InspectorFrontendClientLocal::canAttachWindow(WebCore::InspectorFrontendClientLocal *this)
{
  uint64_t v2;
  _BOOL8 result;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v12;
  unsigned int v13;
  _BOOL8 v14;
  _QWORD *v15;
  _QWORD *v16;

  v2 = *(_QWORD *)(*((_QWORD *)this + 2) + 96);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 128))(v2))
    return 0;
  if (*((_DWORD *)this + 12))
    return 1;
  v4 = *(unsigned int **)(*(_QWORD *)(*((_QWORD *)this + 2) + 80) + 160);
  v5 = v4 + 2;
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  v7 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v4 + 56))(v4);
  v8 = (unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v7 + 64) + 488))(v7 + 64) >> 32;
  v9 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v4 + 56))(v4);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v9 + 64) + 488))(v9 + 64);
  result = (float)((float)v8 * 0.75) > 0xF9 && v10 > 0x1F3;
  do
  {
    v12 = __ldaxr(v5);
    v13 = v12 - 1;
  }
  while (__stlxr(v13, v5));
  if (!v13)
  {
    v14 = result;
    atomic_store(1u, v5);
    v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v15 = off_1E31FE290;
    v15[1] = v5;
    v16 = v15;
    WTF::ensureOnMainThread();
    if (v16)
      (*(void (**)(_QWORD *))(*v16 + 8))(v16);
    return v14;
  }
  return result;
}

uint64_t WebCore::InspectorFrontendClientLocal::userInterfaceLayoutDirection(WebCore::InspectorFrontendClientLocal *this)
{
  return *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 1132);
}

WTF::StringImpl *WebCore::InspectorFrontendClientLocal::requestSetDockSide(WebCore::InspectorFrontendClientLocal *this, uint64_t a2)
{
  WTF::StringImpl *result;

  if ((_DWORD)a2)
  {
    result = (WTF::StringImpl *)WebCore::InspectorFrontendClientLocal::canAttachWindow(this);
    if (!(_DWORD)result)
      return result;
    (*(void (**)(WebCore::InspectorFrontendClientLocal *, uint64_t))(*(_QWORD *)this + 368))(this, a2);
  }
  else
  {
    (*(void (**)(WebCore::InspectorFrontendClientLocal *))(*(_QWORD *)this + 376))(this);
  }
  return WebCore::InspectorFrontendClientLocal::setAttachedWindow((uint64_t)this, a2);
}

WTF::StringImpl *WebCore::InspectorFrontendClientLocal::setAttachedWindow(uint64_t a1, int a2)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  const WTF::String *v4;
  WTF *v5;
  _DWORD *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  _DWORD *v9;
  WTF::StringImpl *v10;
  _DWORD *v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  _QWORD v15[2];
  WTF::StringImpl *v16;
  _DWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)(a1 + 48) = a2;
  v2 = *(WTF::StringImpl **)(a1 + 64);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v3 = (WTF::StringImpl *)v15[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v14 = (WTF::StringImpl *)v15[0];
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v14, v4);
  v5 = (WTF *)WTF::fastMalloc((WTF *)8);
  v15[0] = v5;
  v6 = v17;
  ++*v17;
  *(_QWORD *)v5 = v6;
  v15[1] = 0x100000001;
  v13 = 0;
  WebCore::expressionForEvaluatingCommand(&v16, (uint64_t)v3, (uint64_t)v15);
  WebCore::InspectorFrontendAPIDispatcher::evaluateOrQueueExpression(v2, (WTF::StringImpl *)&v16, &v13);
  v8 = v16;
  v16 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  if (v13)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v13 + 8))(v13);
  v9 = *(_DWORD **)v5;
  *(_QWORD *)v5 = 0;
  if (v9)
  {
    if (*v9 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v9;
  }
  WTF::fastFree(v5, v7);
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    if (*v11 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v11;
  }
  result = v14;
  v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
      if (!v3)
        return result;
      goto LABEL_16;
    }
    *(_DWORD *)result -= 2;
  }
  if (!v3)
    return result;
LABEL_16:
  if (*(_DWORD *)v3 == 2)
    return (WTF::StringImpl *)WTF::StringImpl::destroy(v3, v10);
  *(_DWORD *)v3 -= 2;
  return result;
}

uint64_t WebCore::InspectorFrontendClientLocal::changeAttachedWindowHeight(WebCore::InspectorFrontendClientLocal *this, WTF::String *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  float v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;

  v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 160);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 56))(v4);
  v6 = (unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 + 64) + 488))(v5 + 64) >> 32;
  v7 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 80) + 160);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 56))(v7);
  v9 = ((unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v8 + 64) + 488))(v8 + 64) >> 32) + v6;
  v10 = (float)a2;
  if ((float)((float)v9 * 0.75) < (float)a2)
    v10 = (float)v9 * 0.75;
  LODWORD(a2) = vcvtas_u32_f32(fmaxf(v10, 250.0));
  v11 = *((_QWORD *)this + 5);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::String::number(a2);
  (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)v11 + 24))(v11, &v17, &v16);
  v13 = v16;
  v16 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v17;
  v17 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  return (*(uint64_t (**)(WebCore::InspectorFrontendClientLocal *, WTF::String *))(*(_QWORD *)this + 384))(this, a2);
}

unsigned int WebCore::InspectorFrontendClientLocal::constrainedAttachedWindowHeight(WebCore::InspectorFrontendClientLocal *this, unsigned int a2)
{
  float v2;

  v2 = (float)this;
  if ((float)((float)a2 * 0.75) < (float)this)
    v2 = (float)a2 * 0.75;
  return vcvtas_u32_f32(fmaxf(v2, 250.0));
}

uint64_t WebCore::InspectorFrontendClientLocal::changeAttachedWindowWidth(WebCore::InspectorFrontendClientLocal *this, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  float v11;

  v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 160);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 56))(v4);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 + 64) + 488))(v5 + 64);
  v7 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 80) + 160);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 56))(v7);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v8 + 64) + 488))(v8 + 64);
  v11 = (float)a2;
  if ((float)((float)(v9 + v6) + -320.0) < (float)a2)
    v11 = (float)(v9 + v6) + -320.0;
  LODWORD(v10) = vcvtas_u32_f32(fmaxf(v11, 500.0));
  return (*(uint64_t (**)(WebCore::InspectorFrontendClientLocal *, uint64_t))(*(_QWORD *)this + 392))(this, v10);
}

unsigned int WebCore::InspectorFrontendClientLocal::constrainedAttachedWindowWidth(WebCore::InspectorFrontendClientLocal *this, unsigned int a2)
{
  float v2;

  v2 = (float)this;
  if ((float)((float)a2 + -320.0) < (float)this)
    v2 = (float)a2 + -320.0;
  return vcvtas_u32_f32(fmaxf(v2, 500.0));
}

uint64_t WebCore::InspectorFrontendClientLocal::changeSheetRect(WebCore::InspectorFrontendClientLocal *this, const WebCore::FloatRect *a2)
{
  return (*(uint64_t (**)(WebCore::InspectorFrontendClientLocal *, const WebCore::FloatRect *))(*(_QWORD *)this + 400))(this, a2);
}

void WebCore::InspectorFrontendClientLocal::openURLExternally(WebCore::InspectorFrontendClientLocal *this, const WTF::String *a2)
{
  uint64_t v2;
  BOOL v3;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  _DWORD *v8;
  WTF::StringImpl *v9;
  unsigned int *v10;
  unsigned int *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  char v14;
  _DWORD **v15;
  _DWORD *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  void *v20;
  WTF::StringImpl *v21;
  WebCore::Frame *v22;
  int v23;
  WebCore::Node *v24;
  WTF::StringImpl *v25;
  char v26;
  _DWORD *v27;
  WTF::StringImpl *v28;
  _DWORD *v29;
  unsigned int *v30;
  unsigned int *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WebCore::FrameLoader *v34;
  WTF::StringImpl *v35;
  void *v36;
  unsigned int *v37;
  unsigned int v38;
  BOOL v39;
  WTF *v40;
  unsigned int v41;
  unsigned int v42;
  WTF *v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  unsigned int v50;
  WebCore::Node *v51[39];
  char v52;
  _DWORD *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  __int128 v56;
  __int128 v57;
  _QWORD v58[7];
  __int128 v59;
  __int128 v60;
  __int128 v61;
  int v62;
  char v63;
  uint64_t v64;
  _DWORD *v65;
  uint64_t v66;
  char v67;
  char v68;
  char v69;
  uint64_t v70;
  WebCore::Node *v71;
  __int128 v72;
  __int128 v73;
  _QWORD v74[7];
  __int128 v75;
  __int128 v76;
  __int128 v77;
  int v78;
  char v79;
  uint64_t v80;
  _DWORD *v81;
  uint64_t v82;
  char v83;
  char v84;
  char v85;
  uint64_t v86;
  WebCore::Frame *v87;
  _DWORD *v88;
  char v89;
  char v90;
  char v91;
  char v92;
  char v93;
  char v94;
  char v95;
  uint64_t v96;
  _QWORD v97[2];
  WTF *v98;
  uint64_t v99;
  char v100;
  WTF::StringImpl *v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  __int128 v105;
  char v106;
  uint64_t v107;

  v107 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 80) + 160);
  if (v2)
    v3 = *(_BYTE *)(v2 + 144) == 0;
  else
    v3 = 0;
  if (v3)
  {
    v5 = (unsigned int *)(v2 + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
    v7 = *(_QWORD *)(v2 + 296);
    LOBYTE(v105) = 0;
    v106 = 0;
    WebCore::UserGestureIndicator::UserGestureIndicator(&v104, 257, v7, 1, 0, &v105, 1);
    v8 = *(_DWORD **)(v2 + 296);
    v8[6] += 2;
    v71 = (WebCore::Node *)v8;
    WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v8 + 48), v9);
    v11 = v10;
    v101 = 0;
    WTF::URL::invalidate((WTF::URL *)&v101);
    v12 = v101;
    if (v101)
      *(_DWORD *)v101 += 2;
    v56 = v102;
    v57 = v103;
    v55 = v12;
    v58[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v58);
    v58[5] = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v58[6] = v51[0];
    v59 = 0u;
    v60 = 0u;
    v61 = 0u;
    v62 = 0x10000;
    v14 = v63 & 0x80 | 4;
    v63 = v14;
    v64 = 0;
    v15 = (_DWORD **)MEMORY[0x1E0CBF738];
    v16 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
    {
      *v16 += 2;
      v14 = v63;
    }
    v65 = v16;
    v66 = 0;
    v67 = 0;
    v68 = 0;
    v69 = v69 & 0xE0 | 5;
    v63 = v14 | 2;
    v17 = v101;
    v101 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v13);
      else
        *(_DWORD *)v17 -= 2;
    }
    v70 = 0;
    WTF::AtomStringImpl::add();
    v18 = v101;
    v51[0] = v101;
    v88 = 0;
    WebCore::FrameLoadRequest::FrameLoadRequest((uint64_t)&v101, (uint64_t *)&v71, v11, (uint64_t)&v55, (_DWORD **)v51, 1, &v88);
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v19);
      else
        *(_DWORD *)v18 -= 2;
    }
    WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v55, v19);
    if (v71)
    {
      if (*((_DWORD *)v71 + 6) == 2)
      {
        if ((*((_WORD *)v71 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v71, v20);
      }
      else
      {
        *((_DWORD *)v71 + 6) -= 2;
      }
    }
    v100 = 0;
    LOBYTE(v88) = 0;
    BYTE4(v88) = 0;
    v89 = 0;
    v90 = 0;
    v91 = 0;
    v92 = 0;
    v93 = 0;
    v94 = 0;
    v95 = 0;
    v99 = 0;
    v98 = 0;
    v97[0] = 0;
    v96 = 0;
    *(_QWORD *)((char *)v97 + 6) = 0;
    WebCore::createWindow(v2, v2, (uint64_t)&v101, (uint64_t)&v88, &v100, &v87);
    v22 = v87;
    if (v87)
    {
      v23 = *((unsigned __int8 *)v87 + 144);
      v87 = 0;
      if (v23)
      {
        v37 = (unsigned int *)((char *)v22 + 8);
        do
        {
          v50 = __ldaxr(v37);
          v39 = --v50 == 0;
        }
        while (__stlxr(v50, v37));
      }
      else
      {
        WebCore::Frame::setOpener(v22, (WebCore::Frame *)v2);
        *(_BYTE *)(*(_QWORD *)(*((_QWORD *)v22 + 3) + 8) + 336) = 1;
        WebCore::Document::completeURL(*((WebCore::Document **)v22 + 37), a2, *((_QWORD *)v22 + 37) + 848, 0, (WTF::URL *)&v55);
        v24 = v55;
        if (v55)
          *(_DWORD *)v55 += 2;
        v72 = v56;
        v73 = v57;
        v71 = v24;
        v74[0] = 0;
        WTF::URL::invalidate((WTF::URL *)v74);
        v74[5] = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v74[6] = v51[0];
        v75 = 0u;
        v76 = 0u;
        v77 = 0u;
        v78 = 0x10000;
        v26 = v79 & 0x80 | 4;
        v79 = v26;
        v80 = 0;
        v27 = *v15;
        if (*v15)
        {
          *v27 += 2;
          v26 = v79;
        }
        v81 = v27;
        v82 = 0;
        v83 = 0;
        v84 = 0;
        v85 = v85 & 0xE0 | 5;
        v79 = v26 | 2;
        v86 = 0;
        v28 = v55;
        v55 = 0;
        if (v28)
        {
          if (*(_DWORD *)v28 == 2)
            WTF::StringImpl::destroy(v28, v25);
          else
            *(_DWORD *)v28 -= 2;
        }
        v29 = *(_DWORD **)(v2 + 296);
        if (v29)
          v29[6] += 2;
        v51[0] = (WebCore::Node *)v29;
        WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v29 + 48), v25);
        v31 = v30;
        WTF::AtomStringImpl::add();
        v32 = v55;
        v53 = 0;
        v54 = v55;
        WebCore::FrameLoadRequest::FrameLoadRequest((uint64_t)&v55, (uint64_t *)v51, v31, (uint64_t)&v71, (_DWORD **)&v54, 1, &v53);
        if (v32)
        {
          if (*(_DWORD *)v32 == 2)
            WTF::StringImpl::destroy(v32, v33);
          else
            *(_DWORD *)v32 -= 2;
        }
        if (v51[0])
        {
          if (*((_DWORD *)v51[0] + 6) == 2)
          {
            if ((*((_WORD *)v51[0] + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v51[0], v33);
          }
          else
          {
            *((_DWORD *)v51[0] + 6) -= 2;
          }
        }
        v34 = (WebCore::FrameLoader *)*((_QWORD *)v22 + 35);
        LOBYTE(v51[0]) = 0;
        v52 = 0;
        WebCore::FrameLoader::changeLocation(v34, (uint64_t)&v55, 0, (const WebCore::Document *)v51);
        if (v52)
          WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)v51, v35);
        WebCore::FrameLoadRequest::~FrameLoadRequest((WebCore::FrameLoadRequest *)&v55, v35);
        WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v71, v36);
        v37 = (unsigned int *)((char *)v22 + 8);
        do
        {
          v38 = __ldaxr(v37);
          v39 = --v38 == 0;
        }
        while (__stlxr(v38, v37));
      }
      if (v39)
      {
        atomic_store(1u, v37);
        v48 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v48 = off_1E31FE290;
        *((_QWORD *)v48 + 1) = v37;
        v55 = v48;
        WTF::ensureOnMainThread();
        v49 = v55;
        v55 = 0;
        if (v49)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v49 + 8))(v49);
      }
    }
    else
    {
      v87 = 0;
    }
    if (HIDWORD(v99))
    {
      v43 = v98;
      v44 = 8 * HIDWORD(v99);
      do
      {
        v45 = *(WTF::StringImpl **)v43;
        *(_QWORD *)v43 = 0;
        if (v45)
        {
          if (*(_DWORD *)v45 == 2)
            WTF::StringImpl::destroy(v45, v21);
          else
            *(_DWORD *)v45 -= 2;
        }
        v43 = (WTF *)((char *)v43 + 8);
        v44 -= 8;
      }
      while (v44);
    }
    v40 = v98;
    if (v98)
    {
      v98 = 0;
      LODWORD(v99) = 0;
      WTF::fastFree(v40, v21);
    }
    WebCore::FrameLoadRequest::~FrameLoadRequest((WebCore::FrameLoadRequest *)&v101, v21);
    WebCore::UserGestureIndicator::~UserGestureIndicator((WebCore::UserGestureIndicator *)&v104);
    do
    {
      v41 = __ldaxr(v5);
      v42 = v41 - 1;
    }
    while (__stlxr(v42, v5));
    if (!v42)
    {
      atomic_store(1u, v5);
      v46 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v46 = off_1E31FE290;
      *((_QWORD *)v46 + 1) = v5;
      v101 = v46;
      WTF::ensureOnMainThread();
      v47 = v101;
      v101 = 0;
      if (v47)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v47 + 8))(v47);
    }
  }
}

uint64_t WebCore::InspectorFrontendClientLocal::moveWindowBy(WebCore::InspectorFrontendClientLocal *this, float a2, float a3)
{
  uint64_t v6;
  float v7;
  float v8;
  float v9;
  float v10;
  uint64_t v11;
  float v13[4];

  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 48) + 16);
  v7 = (*(float (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  v13[2] = v8;
  v13[3] = v9;
  v13[0] = v7 + a2;
  v13[1] = v10 + a3;
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 48) + 16);
  return (*(uint64_t (**)(uint64_t, float *))(*(_QWORD *)v11 + 8))(v11, v13);
}

WTF::StringImpl *WebCore::InspectorFrontendClientLocal::restoreAttachedWindowHeight(WebCore::InspectorFrontendClientLocal *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  float v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *result;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;

  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 80) + 160);
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 56))(v2);
  v4 = (unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 + 64) + 488))(v3 + 64) >> 32;
  v5 = *((_QWORD *)this + 5);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, WTF::StringImpl **))(*(_QWORD *)v5 + 16))(&v14, v5, &v13);
  v7 = v13;
  v13 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  if (v14 && (v6 = *((unsigned int *)v14 + 1), (_DWORD)v6))
  {
    v11 = *((_QWORD *)v14 + 1);
    if ((*((_BYTE *)v14 + 16) & 4) != 0)
      v12 = WTF::parseInteger<unsigned int,unsigned char>(v11, v6, 10, 1);
    else
      v12 = WTF::parseInteger<unsigned int,char16_t>(v11, v6, 10, 1);
    v8 = (float)v12;
    if ((v12 & 0xFF00000000) == 0)
      v8 = 0.0;
  }
  else
  {
    v8 = 300.0;
  }
  if ((float)((float)v4 * 0.75) < v8)
    v8 = (float)v4 * 0.75;
  LODWORD(v6) = vcvtas_u32_f32(fmaxf(v8, 250.0));
  (*(void (**)(WebCore::InspectorFrontendClientLocal *, uint64_t))(*(_QWORD *)this + 384))(this, v6);
  result = v14;
  v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::InspectorFrontendClientLocal::evaluationResultToBoolean(uint64_t a1, uint64_t a2)
{
  _BOOL4 v2;
  int v3;
  uint64_t v4;
  WTF::RunLoop *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  WebCore::DOMWrapperWorld *v11;
  double v12;
  uint64_t v14;
  BOOL v16;
  int v17;
  uint64_t v18;
  int *v19;
  int v20;
  uint64_t v21;
  _QWORD v22[4];
  unsigned int v23;
  uint64_t v24;

  if (!*(_DWORD *)(a2 + 48))
  {
    LOBYTE(v22[0]) = 0;
    v23 = -1;
    v4 = *(unsigned int *)(a2 + 40);
    if ((_DWORD)v4 == -1)
    {
      v3 = 0;
      v2 = 0;
      return v2 | (v3 << 8);
    }
    v6 = (WTF::RunLoop *)((uint64_t (*)(uint64_t *, _QWORD *, uint64_t))off_1E33EE640[v4])(&v24, v22, a2 + 8);
    v23 = v4;
    if ((_DWORD)v4)
    {
      v3 = 0;
      v2 = 0;
      goto LABEL_22;
    }
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 16);
    if (!v7 || (v7 = *(_QWORD *)(v7 + 8)) == 0)
    {
LABEL_17:
      if (v22[0] >= 0xFFFE000000000000)
      {
        v16 = LODWORD(v22[0]) == 0;
      }
      else
      {
        *(_QWORD *)&v12 = v22[0] - 0x2000000000000;
        if ((unint64_t)(v22[0] - 0x2000000000000) <= 0xFFFBFFFFFFFFFFFFLL)
        {
          v2 = v12 > 0.0 || v12 < 0.0;
LABEL_21:
          v4 = v23;
          v3 = 1;
          if (v23 == -1)
            return v2 | (v3 << 8);
LABEL_22:
          ((void (*)(uint64_t *, _QWORD *))off_1E33EE610[v4])(&v24, v22);
          return v2 | (v3 << 8);
        }
        if ((v22[0] & 0xFFFE000000000002) != 0)
        {
          v2 = v22[0] == 7;
          goto LABEL_21;
        }
        v17 = *(unsigned __int8 *)(v22[0] + 5);
        if (v17 == 3)
        {
          v20 = *(_DWORD *)(v22[0] + 8);
        }
        else
        {
          if (v17 != 2)
          {
            if ((*(_BYTE *)(16 * (*(_DWORD *)v22[0] & 0xFFFFFFFE) + 0xA) & 1) == 0)
            {
              v2 = 1;
              goto LABEL_21;
            }
            v16 = *(_QWORD *)(16 * (*(_DWORD *)v22[0] & 0xFFFFFFFE) + 0x28) == v7;
            goto LABEL_42;
          }
          v18 = *(_QWORD *)(v22[0] + 8);
          if ((v18 & 1) != 0)
            v19 = (int *)(v22[0] + 16);
          else
            v19 = (int *)(v18 + 4);
          v20 = *v19;
        }
        v16 = v20 == 0;
      }
LABEL_42:
      v2 = !v16;
      goto LABEL_21;
    }
    v8 = *(_QWORD *)(v7 + 160);
    if (v8)
      v9 = *(_BYTE *)(v8 + 144) == 0;
    else
      v9 = 0;
    if (!v9)
    {
      v7 = 0;
      goto LABEL_17;
    }
    v10 = *(_QWORD *)(v8 + 304);
    {
      v11 = (WebCore::DOMWrapperWorld *)WebCore::mainThreadNormalWorld(void)::cachedNormalWorld;
LABEL_16:
      v7 = *((_QWORD *)WebCore::WindowProxy::jsWindowProxy(*(WebCore::WindowProxy **)(*(_QWORD *)(v10 + 16) + 112), v11)+ 2);
      goto LABEL_17;
    }
    v21 = v10;
    v14 = WebCore::g_commonVMOrNull;
    if (WebCore::g_commonVMOrNull)
    {
LABEL_50:
      v11 = *(WebCore::DOMWrapperWorld **)(*(_QWORD *)(v14 + 41456) + 16);
      WebCore::mainThreadNormalWorld(void)::cachedNormalWorld = (uint64_t)v11;
      v10 = v21;
      goto LABEL_16;
    }
    WTF::RunLoop::webIfExists(v6);
    JSC::VM::create();
    v14 = v24;
    WebCore::g_commonVMOrNull = v24;
    if (__ldaxr((unsigned int *)(v24 + 1096)))
    {
      __clrex();
    }
    else if (!__stlxr(4u, (unsigned int *)(v24 + 1096)))
    {
LABEL_47:
      if (webThreadStarted == 1)
        *(_BYTE *)(*(_QWORD *)(v14 + 112) + 5) = 1;
      WTF::ThreadGroup::addCurrentThread(**(WTF::ThreadGroup ***)(v14 + 584));
      WebCore::JSVMClientData::initNormalWorld((JSC::VM *)v14, 0);
      goto LABEL_50;
    }
    JSC::Heap::acquireAccessSlow((JSC::Heap *)(v14 + 192));
    goto LABEL_47;
  }
  v2 = 0;
  v3 = 0;
  return v2 | (v3 << 8);
}

BOOL WebCore::InspectorFrontendClientLocal::isDebuggingEnabled(WebCore::InspectorFrontendClientLocal *this)
{
  const WTF::String *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  unsigned __int16 v5;
  _QWORD v7[2];
  char v8;
  _BYTE v9[8];
  uint64_t v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = (const WTF::String *)*((_QWORD *)this + 8);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v3 = (WTF::StringImpl *)v7[0];
  v7[0] = 0;
  v7[1] = 0;
  WebCore::InspectorFrontendAPIDispatcher::dispatchCommandWithResultSync((WTF::StringImpl *)v9, v2, (uint64_t)v3, (uint64_t)v7);
  v5 = WebCore::InspectorFrontendClientLocal::evaluationResultToBoolean((uint64_t)this, (uint64_t)v9);
  if (v11 != -1)
    ((void (*)(char *, uint64_t *))off_1E33EE630[v11])(&v8, &v10);
  v11 = -1;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, v4);
    else
      *(_DWORD *)v3 -= 2;
  }
  return v5 > 0x100u;
}

_DWORD *WebCore::InspectorFrontendClientLocal::setDebuggingEnabled(WebCore::InspectorFrontendClientLocal *this, WTF::JSONImpl::Value *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF *v5;
  _DWORD *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  _DWORD *v9;
  WTF::StringImpl *v10;
  _DWORD *result;
  WTF::StringImpl *v12;
  _QWORD v13[2];
  WTF::StringImpl *v14;
  _DWORD *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v4 = (WTF::StringImpl *)v13[0];
  WTF::JSONImpl::Value::create(a2);
  v5 = (WTF *)WTF::fastMalloc((WTF *)8);
  v12 = 0;
  v13[0] = v5;
  v6 = v15;
  ++*v15;
  *(_QWORD *)v5 = v6;
  v13[1] = 0x100000001;
  WebCore::expressionForEvaluatingCommand(&v14, (uint64_t)v4, (uint64_t)v13);
  WebCore::InspectorFrontendAPIDispatcher::evaluateOrQueueExpression(v3, (WTF::StringImpl *)&v14, &v12);
  v8 = v14;
  v14 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  if (v12)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v12 + 8))(v12);
  v9 = *(_DWORD **)v5;
  *(_QWORD *)v5 = 0;
  if (v9)
  {
    if (*v9 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v9;
  }
  WTF::fastFree(v5, v7);
  result = v15;
  v15 = 0;
  if (!result)
  {
LABEL_12:
    if (!v4)
      return result;
    goto LABEL_13;
  }
  if (*result != 1)
  {
    --*result;
    goto LABEL_12;
  }
  result = (_DWORD *)WTF::JSONImpl::Value::operator delete();
  if (!v4)
    return result;
LABEL_13:
  if (*(_DWORD *)v4 == 2)
    return (_DWORD *)WTF::StringImpl::destroy(v4, v10);
  *(_DWORD *)v4 -= 2;
  return result;
}

BOOL WebCore::InspectorFrontendClientLocal::isTimelineProfilingEnabled(WebCore::InspectorFrontendClientLocal *this)
{
  const WTF::String *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  unsigned __int16 v5;
  _QWORD v7[2];
  char v8;
  _BYTE v9[8];
  uint64_t v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = (const WTF::String *)*((_QWORD *)this + 8);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v3 = (WTF::StringImpl *)v7[0];
  v7[0] = 0;
  v7[1] = 0;
  WebCore::InspectorFrontendAPIDispatcher::dispatchCommandWithResultSync((WTF::StringImpl *)v9, v2, (uint64_t)v3, (uint64_t)v7);
  v5 = WebCore::InspectorFrontendClientLocal::evaluationResultToBoolean((uint64_t)this, (uint64_t)v9);
  if (v11 != -1)
    ((void (*)(char *, uint64_t *))off_1E33EE630[v11])(&v8, &v10);
  v11 = -1;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, v4);
    else
      *(_DWORD *)v3 -= 2;
  }
  return v5 > 0x100u;
}

_DWORD *WebCore::InspectorFrontendClientLocal::setTimelineProfilingEnabled(WebCore::InspectorFrontendClientLocal *this, WTF::JSONImpl::Value *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF *v5;
  _DWORD *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  _DWORD *v9;
  WTF::StringImpl *v10;
  _DWORD *result;
  WTF::StringImpl *v12;
  _QWORD v13[2];
  WTF::StringImpl *v14;
  _DWORD *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v4 = (WTF::StringImpl *)v13[0];
  WTF::JSONImpl::Value::create(a2);
  v5 = (WTF *)WTF::fastMalloc((WTF *)8);
  v12 = 0;
  v13[0] = v5;
  v6 = v15;
  ++*v15;
  *(_QWORD *)v5 = v6;
  v13[1] = 0x100000001;
  WebCore::expressionForEvaluatingCommand(&v14, (uint64_t)v4, (uint64_t)v13);
  WebCore::InspectorFrontendAPIDispatcher::evaluateOrQueueExpression(v3, (WTF::StringImpl *)&v14, &v12);
  v8 = v14;
  v14 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  if (v12)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v12 + 8))(v12);
  v9 = *(_DWORD **)v5;
  *(_QWORD *)v5 = 0;
  if (v9)
  {
    if (*v9 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v9;
  }
  WTF::fastFree(v5, v7);
  result = v15;
  v15 = 0;
  if (!result)
  {
LABEL_12:
    if (!v4)
      return result;
    goto LABEL_13;
  }
  if (*result != 1)
  {
    --*result;
    goto LABEL_12;
  }
  result = (_DWORD *)WTF::JSONImpl::Value::operator delete();
  if (!v4)
    return result;
LABEL_13:
  if (*(_DWORD *)v4 == 2)
    return (_DWORD *)WTF::StringImpl::destroy(v4, v10);
  *(_DWORD *)v4 -= 2;
  return result;
}

BOOL WebCore::InspectorFrontendClientLocal::isProfilingJavaScript(WebCore::InspectorFrontendClientLocal *this)
{
  const WTF::String *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  unsigned __int16 v5;
  _QWORD v7[2];
  char v8;
  _BYTE v9[8];
  uint64_t v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = (const WTF::String *)*((_QWORD *)this + 8);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v3 = (WTF::StringImpl *)v7[0];
  v7[0] = 0;
  v7[1] = 0;
  WebCore::InspectorFrontendAPIDispatcher::dispatchCommandWithResultSync((WTF::StringImpl *)v9, v2, (uint64_t)v3, (uint64_t)v7);
  v5 = WebCore::InspectorFrontendClientLocal::evaluationResultToBoolean((uint64_t)this, (uint64_t)v9);
  if (v11 != -1)
    ((void (*)(char *, uint64_t *))off_1E33EE630[v11])(&v8, &v10);
  v11 = -1;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, v4);
    else
      *(_DWORD *)v3 -= 2;
  }
  return v5 > 0x100u;
}

WTF::StringImpl *WebCore::InspectorFrontendClientLocal::startProfilingJavaScript(WebCore::InspectorFrontendClientLocal *this)
{
  WTF::StringImpl *v1;
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;
  _QWORD v7[2];
  WTF::StringImpl *v8;

  v1 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v2 = (WTF::StringImpl *)v7[0];
  v7[0] = 0;
  v7[1] = 0;
  v6 = 0;
  WebCore::expressionForEvaluatingCommand(&v8, (uint64_t)v2, (uint64_t)v7);
  WebCore::InspectorFrontendAPIDispatcher::evaluateOrQueueExpression(v1, (WTF::StringImpl *)&v8, &v6);
  v4 = v8;
  v8 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  result = v6;
  if (v6)
    result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v6 + 8))(v6);
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v2, v3);
    else
      *(_DWORD *)v2 -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::InspectorFrontendClientLocal::stopProfilingJavaScript(WebCore::InspectorFrontendClientLocal *this)
{
  WTF::StringImpl *v1;
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;
  _QWORD v7[2];
  WTF::StringImpl *v8;

  v1 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v2 = (WTF::StringImpl *)v7[0];
  v7[0] = 0;
  v7[1] = 0;
  v6 = 0;
  WebCore::expressionForEvaluatingCommand(&v8, (uint64_t)v2, (uint64_t)v7);
  WebCore::InspectorFrontendAPIDispatcher::evaluateOrQueueExpression(v1, (WTF::StringImpl *)&v8, &v6);
  v4 = v8;
  v8 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  result = v6;
  if (v6)
    result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v6 + 8))(v6);
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v2, v3);
    else
      *(_DWORD *)v2 -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::InspectorFrontendClientLocal::showConsole(WebCore::InspectorFrontendClientLocal *this)
{
  WTF::StringImpl *v1;
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;
  _QWORD v7[2];
  WTF::StringImpl *v8;

  v1 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v2 = (WTF::StringImpl *)v7[0];
  v7[0] = 0;
  v7[1] = 0;
  v6 = 0;
  WebCore::expressionForEvaluatingCommand(&v8, (uint64_t)v2, (uint64_t)v7);
  WebCore::InspectorFrontendAPIDispatcher::evaluateOrQueueExpression(v1, (WTF::StringImpl *)&v8, &v6);
  v4 = v8;
  v8 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  result = v6;
  if (v6)
    result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v6 + 8))(v6);
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v2, v3);
    else
      *(_DWORD *)v2 -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::InspectorFrontendClientLocal::showResources(WebCore::InspectorFrontendClientLocal *this)
{
  WTF::StringImpl *v1;
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;
  _QWORD v7[2];
  WTF::StringImpl *v8;

  v1 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v2 = (WTF::StringImpl *)v7[0];
  v7[0] = 0;
  v7[1] = 0;
  v6 = 0;
  WebCore::expressionForEvaluatingCommand(&v8, (uint64_t)v2, (uint64_t)v7);
  WebCore::InspectorFrontendAPIDispatcher::evaluateOrQueueExpression(v1, (WTF::StringImpl *)&v8, &v6);
  v4 = v8;
  v8 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  result = v6;
  if (v6)
    result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v6 + 8))(v6);
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v2, v3);
    else
      *(_DWORD *)v2 -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::InspectorFrontendClientLocal::showMainResourceForFrame(WebCore::InspectorFrontendClientLocal *this, WebCore::LocalFrame *a2)
{
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  const WTF::String *v15;
  WTF *v16;
  _DWORD *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  _DWORD *v20;
  WTF::StringImpl *v21;
  _DWORD *v22;
  WTF::StringImpl *result;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  _DWORD *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 2);
  v5 = *(unsigned int **)(v4 + 120);
  if (!v5)
  {
    v6 = *(_QWORD *)(v4 + 32);
    v7 = *(_QWORD *)(v4 + 8);
    v26 = (WTF::StringImpl *)v4;
    v27 = *(_OWORD *)(v4 + 16);
    v28 = v6;
    v29 = v7;
    v8 = *(_QWORD *)(v4 + 88);
    v30 = *(_QWORD *)(v4 + 80);
    v9 = *(_QWORD *)(v4 + 40);
    v10 = WTF::fastMalloc((WTF *)0xA0);
    v11 = (WTF::StringImpl *)WebCore::InspectorPageAgent::InspectorPageAgent(v10, &v26, v8, v9);
    *(_QWORD *)(v4 + 120) = v11;
    v31 = v11;
    Inspector::AgentRegistry::append();
    v12 = v31;
    v31 = 0;
    if (v12)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v12 + 8))(v12);
    v5 = *(unsigned int **)(v4 + 120);
  }
  WebCore::InspectorPageAgent::frameId(v5, a2, &v25);
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v14 = v26;
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v25, v15);
  v16 = (WTF *)WTF::fastMalloc((WTF *)8);
  v26 = v16;
  v17 = v32;
  ++*v32;
  *(_QWORD *)v16 = v17;
  *(_QWORD *)&v27 = 0x100000001;
  v24 = 0;
  WebCore::expressionForEvaluatingCommand(&v31, (uint64_t)v14, (uint64_t)&v26);
  WebCore::InspectorFrontendAPIDispatcher::evaluateOrQueueExpression(v13, (WTF::StringImpl *)&v31, &v24);
  v19 = v31;
  v31 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v18);
    else
      *(_DWORD *)v19 -= 2;
  }
  if (v24)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v24 + 8))(v24);
  v20 = *(_DWORD **)v16;
  *(_QWORD *)v16 = 0;
  if (v20)
  {
    if (*v20 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v20;
  }
  WTF::fastFree(v16, v18);
  v22 = v32;
  v32 = 0;
  if (v22)
  {
    if (*v22 == 1)
    {
      WTF::JSONImpl::Value::operator delete();
      if (!v14)
        goto LABEL_19;
      goto LABEL_17;
    }
    --*v22;
  }
  if (!v14)
    goto LABEL_19;
LABEL_17:
  if (*(_DWORD *)v14 == 2)
    WTF::StringImpl::destroy(v14, v21);
  else
    *(_DWORD *)v14 -= 2;
LABEL_19:
  result = v25;
  v25 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v21);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::RunLoop *WebCore::InspectorFrontendClientLocal::sendMessageToBackend(WebCore::InspectorFrontendClientLocal *this, const WTF::String *a2)
{
  uint64_t v2;
  WTF::RunLoop *result;
  WTF::RunLoop *v4;
  WTF::RunLoop *v5;

  v2 = *((_QWORD *)this + 7);
  result = (WTF::RunLoop *)WTF::Deque<WTF::String,0ul>::append<WTF::String const&>(v2 + 16, (_DWORD **)a2);
  if (!*(_BYTE *)(v2 + 48))
  {
    *(_BYTE *)(v2 + 48) = 1;
    WTF::RunLoop::current(result);
    ++*(_DWORD *)v2;
    v4 = (WTF::RunLoop *)WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v4 = &off_1E33EE660;
    *((_QWORD *)v4 + 1) = v2;
    *((_QWORD *)v4 + 2) = v2;
    v5 = v4;
    WTF::RunLoop::dispatch();
    result = v5;
    if (v5)
      return (WTF::RunLoop *)(*(uint64_t (**)(WTF::RunLoop *))(*(_QWORD *)v5 + 8))(v5);
  }
  return result;
}

uint64_t WebCore::InspectorFrontendClientLocal::isUnderTest(WebCore::InspectorFrontendClientLocal *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 2) + 128);
}

uint64_t WebCore::InspectorFrontendClientLocal::inspectionLevel(WebCore::InspectorFrontendClientLocal *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 96);
  if (v1)
    return (*(unsigned int (**)(uint64_t))(*(_QWORD *)v1 + 128))(v1) + 1;
  else
    return 1;
}

uint64_t WebCore::InspectorFrontendClientLocal::inspectedPage(WebCore::InspectorFrontendClientLocal *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 2);
  if (v1)
    return *(_QWORD *)(v1 + 80);
  else
    return 0;
}

WebCore::InspectorFrontendHost *WebCore::InspectorFrontendHost::InspectorFrontendHost(WebCore::InspectorFrontendHost *this, WebCore::InspectorFrontendClient *a2, WebCore::Page *a3)
{
  uint64_t v5;
  void *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;

  *(_DWORD *)this = 1;
  *((_QWORD *)this + 1) = a2;
  if (a3)
  {
    v5 = *((_QWORD *)a3 + 2);
    if (v5)
      goto LABEL_14;
    v5 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v5 = 1;
    *(_QWORD *)(v5 + 8) = a3;
    v7 = (unsigned int *)*((_QWORD *)a3 + 2);
    *((_QWORD *)a3 + 2) = v5;
    if (!v7)
      goto LABEL_14;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, v6);
    }
    v5 = *((_QWORD *)a3 + 2);
    if (v5)
    {
LABEL_14:
      do
        v10 = __ldaxr((unsigned int *)v5);
      while (__stlxr(v10 + 1, (unsigned int *)v5));
    }
  }
  else
  {
    v5 = 0;
  }
  *((_QWORD *)this + 2) = v5;
  return this;
}

{
  uint64_t v5;
  void *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;

  *(_DWORD *)this = 1;
  *((_QWORD *)this + 1) = a2;
  if (a3)
  {
    v5 = *((_QWORD *)a3 + 2);
    if (v5)
      goto LABEL_14;
    v5 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v5 = 1;
    *(_QWORD *)(v5 + 8) = a3;
    v7 = (unsigned int *)*((_QWORD *)a3 + 2);
    *((_QWORD *)a3 + 2) = v5;
    if (!v7)
      goto LABEL_14;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, v6);
    }
    v5 = *((_QWORD *)a3 + 2);
    if (v5)
    {
LABEL_14:
      do
        v10 = __ldaxr((unsigned int *)v5);
      while (__stlxr(v10 + 1, (unsigned int *)v5));
    }
  }
  else
  {
    v5 = 0;
  }
  *((_QWORD *)this + 2) = v5;
  return this;
}

void WebCore::InspectorFrontendHost::~InspectorFrontendHost(WebCore::InspectorFrontendHost *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
}

{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
}

uint64_t WebCore::InspectorFrontendHost::setForcedAppearance(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  _BYTE *v5;
  _WORD *v6;
  uint64_t result;
  uint64_t (*v8)(void);
  int v9;
  uint64_t v10;
  _BYTE *v11;
  _WORD *v12;
  uint64_t v13;

  if (MEMORY[0x19AEA53F4](*a2, "light", 5))
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4)
    {
      v5 = *(_BYTE **)(v4 + 8);
      if (v5)
      {
        v6 = v5 + 453;
        if (!v5[454] || *(_BYTE *)v6)
        {
          *v6 = 256;
          WebCore::Page::appearanceDidChange((WebCore::Page *)v5);
        }
      }
    }
    result = *(_QWORD *)(a1 + 8);
    if (result)
    {
      v8 = *(uint64_t (**)(void))(*(_QWORD *)result + 168);
      return v8();
    }
  }
  else
  {
    v9 = MEMORY[0x19AEA53F4](*a2, "dark", 4);
    v10 = *(_QWORD *)(a1 + 16);
    if (v9)
    {
      if (v10)
      {
        v11 = *(_BYTE **)(v10 + 8);
        if (v11)
        {
          v12 = v11 + 453;
          if (!v11[454] || !*(_BYTE *)v12)
          {
            *v12 = 257;
            WebCore::Page::appearanceDidChange((WebCore::Page *)v11);
          }
        }
      }
      result = *(_QWORD *)(a1 + 8);
      if (result)
      {
        v8 = *(uint64_t (**)(void))(*(_QWORD *)result + 168);
        return v8();
      }
    }
    else
    {
      if (v10)
      {
        v13 = *(_QWORD *)(v10 + 8);
        if (v13)
        {
          if (*(_BYTE *)(v13 + 454))
          {
            *(_WORD *)(v13 + 453) = 0;
            WebCore::Page::appearanceDidChange((WebCore::Page *)v13);
          }
        }
      }
      result = *(_QWORD *)(a1 + 8);
      if (result)
      {
        v8 = *(uint64_t (**)(void))(*(_QWORD *)result + 168);
        return v8();
      }
    }
  }
  return result;
}

uint64_t WebCore::InspectorFrontendHost::debuggableInfo@<X0>(WebCore::InspectorFrontendHost *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    switch((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 88))(v4))
    {
      case 0u:
      case 1u:
      case 2u:
      case 3u:
      case 4u:
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        break;
      default:
        *(_QWORD *)a2 = 0;
        break;
    }
    (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1));
    (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
    (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 112))(*((_QWORD *)this + 1));
    result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 120))(*((_QWORD *)this + 1));
    *(_BYTE *)(a2 + 32) = result;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_QWORD *)(a2 + 8) = v6;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_QWORD *)(a2 + 16) = v6;
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_QWORD *)(a2 + 24) = v6;
    *(_BYTE *)(a2 + 32) = 0;
  }
  return result;
}

uint64_t WebCore::InspectorFrontendHost::copyText(WebCore::InspectorFrontendHost *this, const WTF::String *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;

  v3 = *((_QWORD *)this + 2);
  if (v3 && (v4 = *(_QWORD *)(v3 + 8)) != 0)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(v4 + 160) + 24);
    if (v5 && (v5 = *(_QWORD *)(v5 + 8)) != 0)
    {
      v6 = *(_QWORD *)(v5 + 32);
      v7 = *(_QWORD *)(v5 + 40);
      v8 = v6 & 0xFFFFFFFFFFFFFF00;
      v5 = v7 & 0xFFFFFFFFFFFFFF00;
      v9 = v6;
      v10 = v7;
    }
    else
    {
      v8 = 0;
      v10 = 0;
      v9 = 0;
    }
    v11 = v10 | v5;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    v11 = 0;
  }
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v12 = off_1E327FAB0;
  v12[1] = v9 | v8;
  v12[2] = v11;
  v15 = (uint64_t)v12;
  WebCore::Pasteboard::createForCopyAndPaste((PAL *)&v15, &v16);
  v13 = v16;
  (*(void (**)(uint64_t, const WTF::String *, uint64_t))(*(_QWORD *)v16 + 208))(v16, a2, 1);
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  result = v15;
  if (v15)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  return result;
}

void WebCore::InspectorFrontendHost::killText(WebCore::InspectorFrontendHost *this, const WTF::String *a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  WebCore::Document *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  _QWORD *v15;
  WebCore::Document *v16;
  WebCore::Editor *v17;
  void *v18;
  WebCore::Editor *v19;
  uint64_t v20;
  void *v21;
  WebCore::Document *v22;
  unsigned int *v23;
  _QWORD *v24;

  v2 = *((_QWORD *)this + 2);
  if (!v2)
    return;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return;
  v4 = *(int **)(v3 + 72);
  v5 = *v4;
  v6 = *v4 + 1;
  *v4 = v6;
  v7 = *((_QWORD *)v4 + 2);
  if (!v7 || (v8 = *(_QWORD *)(v7 + 8)) == 0 || *(_BYTE *)(v8 + 144))
  {
    v8 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v4 + 1) + 8) + 160);
    if (*(_BYTE *)(v8 + 144))
    {
      if (v6)
      {
        *v4 = v5;
        return;
      }
LABEL_23:
      __break(0xC471u);
      JUMPOUT(0x195DC3200);
    }
  }
  v9 = (unsigned int *)(v8 + 8);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  if (!*v4)
    goto LABEL_23;
  --*v4;
  v11 = *(WebCore::Document **)(v8 + 296);
  v12 = *((_QWORD *)v11 + 382);
  if (!v12)
  {
    v23 = v9;
    v16 = v11;
    v17 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v17, v16);
    v19 = (WebCore::Editor *)*((_QWORD *)v16 + 382);
    v22 = v16;
    *((_QWORD *)v16 + 382) = v17;
    if (v19)
    {
      WebCore::Editor::~Editor(v19, v18);
      if (*(_DWORD *)v20)
      {
        *(_QWORD *)(v20 + 496) = 0;
        *(_OWORD *)(v20 + 464) = 0u;
        *(_OWORD *)(v20 + 480) = 0u;
        *(_OWORD *)(v20 + 432) = 0u;
        *(_OWORD *)(v20 + 448) = 0u;
        *(_OWORD *)(v20 + 400) = 0u;
        *(_OWORD *)(v20 + 416) = 0u;
        *(_OWORD *)(v20 + 368) = 0u;
        *(_OWORD *)(v20 + 384) = 0u;
        *(_OWORD *)(v20 + 336) = 0u;
        *(_OWORD *)(v20 + 352) = 0u;
        *(_OWORD *)(v20 + 304) = 0u;
        *(_OWORD *)(v20 + 320) = 0u;
        *(_OWORD *)(v20 + 272) = 0u;
        *(_OWORD *)(v20 + 288) = 0u;
        *(_OWORD *)(v20 + 240) = 0u;
        *(_OWORD *)(v20 + 256) = 0u;
        *(_OWORD *)(v20 + 208) = 0u;
        *(_OWORD *)(v20 + 224) = 0u;
        *(_OWORD *)(v20 + 176) = 0u;
        *(_OWORD *)(v20 + 192) = 0u;
        *(_OWORD *)(v20 + 144) = 0u;
        *(_OWORD *)(v20 + 160) = 0u;
        *(_OWORD *)(v20 + 112) = 0u;
        *(_OWORD *)(v20 + 128) = 0u;
        *(_OWORD *)(v20 + 80) = 0u;
        *(_OWORD *)(v20 + 96) = 0u;
        *(_OWORD *)(v20 + 48) = 0u;
        *(_OWORD *)(v20 + 64) = 0u;
        *(_OWORD *)(v20 + 16) = 0u;
        *(_OWORD *)(v20 + 32) = 0u;
        *(_OWORD *)v20 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v20, v21);
      }
    }
    v9 = v23;
    v12 = *((_QWORD *)v22 + 382);
  }
  *(_BYTE *)(v12 + 89) = 0;
  do
  {
    v13 = __ldaxr(v9);
    v14 = v13 - 1;
  }
  while (__stlxr(v14, v9));
  if (!v14)
  {
    atomic_store(1u, v9);
    v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v15 = off_1E31FE290;
    v15[1] = v9;
    v24 = v15;
    WTF::ensureOnMainThread();
    if (v24)
      (*(void (**)(_QWORD *))(*v24 + 8))(v24);
  }
}

_QWORD *WebCore::InspectorFrontendHost::inspectInspector(_QWORD *this)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int hasLocalFrontend;
  uint64_t v8;

  v1 = this[2];
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = this;
      *(_QWORD *)(*(_QWORD *)(v2 + 112) + 672) |= 0x400000000000uLL;
      this = (_QWORD *)this[1];
      v4 = v3[2];
      if (this)
      {
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*this + 304))(this, (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) + 112) + 672) >> 46) & 1);
        v4 = v3[2];
      }
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 8);
        if (v5)
        {
          v6 = *(_QWORD *)(v5 + 80);
          if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 80) + 112) + 672) & 0x400000000000) != 0)
          {
            hasLocalFrontend = Inspector::FrontendRouter::hasLocalFrontend(*(Inspector::FrontendRouter **)(v6 + 24));
            v8 = **(_QWORD **)(v6 + 88);
            if (hasLocalFrontend)
            {
              return (_QWORD *)(*(uint64_t (**)(void))(v8 + 40))();
            }
            else
            {
              this = (_QWORD *)(*(uint64_t (**)(void))(v8 + 32))();
              if (this)
                return (_QWORD *)WebCore::InspectorController::connectFrontend(v6, (uint64_t)this, 0, 0);
            }
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::InspectorFrontendHost::showCertificate(WebCore::InspectorFrontendHost *this, const WTF::String *a2)
{
  CFTypeRef v3;
  uint64_t v4;
  void *v6;
  WTF *v7;
  CFTypeRef cf;
  char v9;
  _BYTE v10[120];
  WTF *v11;
  int v12;
  char v13;
  const void *v14;
  char v15;

  if (!*((_QWORD *)this + 1))
    return 0;
  WTF::base64Decode();
  if (!v13)
    return 0;
  WTF::Persistence::Decoder::Decoder();
  WTF::Persistence::Coder<WebCore::CertificateInfo>::decodeForPersistence(&v14);
  if (v15 && (cf = v14, v9 = 1, v14))
  {
    (*(void (**)(_QWORD, CFTypeRef *))(**((_QWORD **)this + 1) + 296))(*((_QWORD *)this + 1), &cf);
    if (v9)
    {
      v3 = cf;
      cf = 0;
      if (v3)
        CFRelease(v3);
    }
    v4 = 1;
  }
  else
  {
    v4 = 0;
  }
  WTF::Persistence::Decoder::~Decoder((WTF::Persistence::Decoder *)v10);
  if (v13)
  {
    v7 = v11;
    if (v11)
    {
      v11 = 0;
      v12 = 0;
      WTF::fastFree(v7, v6);
    }
  }
  return v4;
}

_QWORD *WebCore::InspectorFrontendHost::logDiagnosticEvent(WebCore::InspectorFrontendHost *this, const WTF::String *a2, const WTF::String *a3)
{
  _QWORD *result;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl **v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF::JSONImpl::Value *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  double v18;
  char v19;
  WTF::StringImpl *v20;
  const WTF::StringImpl *v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  WTF **v26;
  int v27;
  unsigned int v28;
  WTF **v29;
  WTF *v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  unsigned int v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  unsigned int v41;
  WTF::StringImpl **v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  _DWORD *v46;
  uint64_t v47;
  int v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  WebCore::InspectorFrontendHost *v56;
  uint64_t *v57;
  _QWORD *v58;
  WTF::StringImpl **v59;
  char v60[8];
  int v61;
  WTF::StringImpl *v62;
  int v63;
  char v64;
  uint64_t v65;
  _DWORD *v66;
  WTF::StringImpl *v67;

  result = (_QWORD *)*((_QWORD *)this + 1);
  if (!result)
    return result;
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 312))(result);
  if (!(_DWORD)result)
    return result;
  WTF::JSONImpl::Value::parseJSON();
  result = v66;
  if (!v66)
    return result;
  v6 = v66[1];
  if (v6 < 5)
    goto LABEL_5;
  if (v6 != 5)
  {
    if (v6 != 6)
    {
      __break(0xC471u);
      JUMPOUT(0x195DC351CLL);
    }
LABEL_5:
    v66 = 0;
LABEL_6:
    if (*(_DWORD *)result == 1)
      return (_QWORD *)WTF::JSONImpl::Value::operator delete();
    --*(_DWORD *)result;
    return result;
  }
  ++*v66;
  v65 = 0;
  v7 = result[2];
  if (v7)
  {
    v8 = *(unsigned int *)(v7 - 4);
    v9 = (WTF::StringImpl **)(v7 + 16 * v8);
    if (*(_DWORD *)(v7 - 12))
    {
      v10 = (WTF::StringImpl **)result[2];
      if ((_DWORD)v8)
      {
        v11 = 16 * v8;
        v10 = (WTF::StringImpl **)result[2];
        while ((unint64_t)*v10 + 1 <= 1)
        {
          v10 += 2;
          v11 -= 16;
          if (!v11)
          {
            v10 = v9;
            goto LABEL_23;
          }
        }
      }
      goto LABEL_23;
    }
    v10 = (WTF::StringImpl **)(v7 + 16 * v8);
  }
  else
  {
    v10 = 0;
    v8 = 0;
  }
  v9 = (WTF::StringImpl **)(v7 + 16 * v8);
LABEL_23:
  v56 = this;
  v58 = result;
  if (v7)
    v12 = (WTF::StringImpl **)(v7 + 16 * *(unsigned int *)(v7 - 4));
  else
    v12 = 0;
  v57 = (uint64_t *)a2;
  if (v12 == v10)
    goto LABEL_98;
  v59 = v12;
  do
  {
    v13 = v10[1];
    switch(*((_DWORD *)v13 + 1))
    {
      case 1:
        v14 = (unsigned __int16)WTF::JSONImpl::Value::asBoolean(v13);
        if (v14 <= 0x100)
          LOBYTE(v14) = 0;
        LOBYTE(v62) = v14 != 0;
        v63 = 3;
        v64 = 1;
        v15 = 3;
        goto LABEL_39;
      case 2:
        v18 = COERCE_DOUBLE(WTF::JSONImpl::Value::asDouble(v13));
        if (!v19)
          v18 = 0.0;
        v62 = *(WTF::StringImpl **)&v18;
        v63 = 4;
        v64 = 1;
        v15 = 4;
        goto LABEL_39;
      case 3:
        v16 = WTF::JSONImpl::Value::asInteger(v13);
        v17 = (WTF::StringImpl *)(int)v16;
        if ((v16 & 0xFF00000000) == 0)
          v17 = 0;
        v62 = v17;
        v63 = 2;
        v64 = 1;
        v15 = 2;
        goto LABEL_39;
      case 4:
        WTF::JSONImpl::Value::asString(v13);
        v15 = 0;
        v62 = v67;
        v63 = 0;
        v64 = 1;
LABEL_39:
        v20 = *v10;
        if (*v10)
          *(_DWORD *)v20 += 2;
        v60[0] = 0;
        v61 = -1;
        ((void (*)(WTF::StringImpl **, char *, WTF::StringImpl **))off_1E33EE6C8[v15])(&v67, v60, &v62);
        v61 = v15;
        v22 = v65;
        if (v65
          || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(&v65, 8u), (v22 = v65) != 0))
        {
          v23 = *(_DWORD *)(v22 - 8);
        }
        else
        {
          v23 = 0;
        }
        v24 = *((_DWORD *)v20 + 4);
        if (v24 < 0x100)
          v25 = WTF::StringImpl::hashSlowCase(v20);
        else
          v25 = v24 >> 8;
        v26 = 0;
        v27 = 1;
        break;
      default:
        goto LABEL_87;
    }
    while (1)
    {
      v28 = v25 & v23;
      v29 = (WTF **)(v22 + 24 * (v25 & v23));
      v30 = *v29;
      if (*v29 == (WTF *)-1)
      {
        v26 = (WTF **)(v22 + 24 * v28);
        goto LABEL_53;
      }
      if (!v30)
        break;
      if (WTF::equal(v30, v20, v21))
      {
        v31 = v22 + 24 * v28;
        v34 = *(_DWORD *)(v31 + 16);
        v33 = (_DWORD *)(v31 + 16);
        v32 = v34;
        v35 = (WTF::StringImpl *)(v33 - 2);
        if (v34 == -1)
        {
          if (v61 == -1)
          {
            v12 = v59;
            goto LABEL_81;
          }
        }
        else if (v61 == -1)
        {
          ((void (*)(WTF::StringImpl **, WTF::StringImpl *))off_1E33EE678[v32])(&v67, v35);
          *v33 = -1;
LABEL_74:
          v12 = v59;
          goto LABEL_79;
        }
        v67 = (WTF::StringImpl *)(v33 - 2);
        ((void (*)(WTF::StringImpl **))off_1E33EE6A0[v61])(&v67);
        goto LABEL_74;
      }
LABEL_53:
      v25 = v27 + v28;
      ++v27;
    }
    if (v26)
    {
      *v26 = 0;
      v26[1] = 0;
      *((_DWORD *)v26 + 4) = 0;
      --*(_DWORD *)(v22 - 16);
      *v26 = v20;
      v12 = v59;
    }
    else
    {
      *v29 = v20;
      v12 = v59;
      v26 = v29;
    }
    v35 = (WTF::StringImpl *)(v26 + 1);
    v36 = *((unsigned int *)v26 + 4);
    if ((_DWORD)v36 == -1)
    {
      if (v61 != -1)
        goto LABEL_64;
    }
    else
    {
      if (v61 == -1)
      {
        ((void (*)(WTF::StringImpl **, WTF::StringImpl *))off_1E33EE678[v36])(&v67, v35);
        *((_DWORD *)v26 + 4) = -1;
        goto LABEL_65;
      }
LABEL_64:
      v67 = (WTF::StringImpl *)(v26 + 1);
      ((void (*)(WTF::StringImpl **))off_1E33EE6A0[v61])(&v67);
    }
LABEL_65:
    v37 = v65;
    if (v65)
      v38 = *(_DWORD *)(v65 - 12) + 1;
    else
      v38 = 1;
    *(_DWORD *)(v65 - 12) = v38;
    v39 = (*(_DWORD *)(v37 - 16) + v38);
    v40 = *(unsigned int *)(v37 - 4);
    if (v40 > 0x400)
    {
      if (v40 <= 2 * v39)
      {
LABEL_71:
        v41 = (_DWORD)v40 << (6 * v38 >= (2 * v40));
        goto LABEL_77;
      }
    }
    else if (3 * v40 <= 4 * v39)
    {
      if ((_DWORD)v40)
        goto LABEL_71;
      v41 = 8;
LABEL_77:
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(&v65, v41);
    }
    v20 = 0;
LABEL_79:
    if (v61 != -1)
      ((void (*)(WTF::StringImpl **, char *))off_1E33EE678[v61])(&v67, v60);
LABEL_81:
    v61 = -1;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v35);
      else
        *(_DWORD *)v20 -= 2;
    }
    if (v64 && v63 != -1)
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E33EE678[v63])(&v67, &v62);
LABEL_87:
    v42 = v10 + 2;
    v10 = v9;
    if (v42 != v9)
    {
      v10 = v42;
      while ((unint64_t)*v10 + 1 <= 1)
      {
        v10 += 2;
        if (v10 == v9)
        {
          v10 = v9;
          break;
        }
      }
    }
  }
  while (v10 != v12);
LABEL_98:
  v43 = *((_QWORD *)v56 + 1);
  v44 = *v57;
  if (*v57)
  {
    v45 = *(_DWORD *)(v44 + 4);
    *(_DWORD *)v44 += 2;
    v46 = v58;
    if ((v45 & 0x80000000) == 0)
    {
      v47 = (v45 + 13);
      if (!__OFADD__(v45, 13))
      {
        v48 = (*(unsigned __int8 *)(v44 + 16) >> 2) & 1;
        goto LABEL_102;
      }
    }
    v62 = 0;
LABEL_132:
    __break(0xC471u);
    JUMPOUT(0x195DC3B5CLL);
  }
  v48 = 1;
  v47 = 13;
  v46 = v58;
LABEL_102:
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v47, v48, (int8x16_t *)"WebInspector.", 0xDu, v44, &v62);
  if (!v62)
    goto LABEL_132;
  (*(void (**)(uint64_t, WTF::StringImpl **, uint64_t *))(*(_QWORD *)v43 + 328))(v43, &v62, &v65);
  v50 = v62;
  v62 = 0;
  if (!v50)
  {
LABEL_106:
    if (!v44)
      goto LABEL_109;
    goto LABEL_107;
  }
  if (*(_DWORD *)v50 != 2)
  {
    *(_DWORD *)v50 -= 2;
    goto LABEL_106;
  }
  WTF::StringImpl::destroy(v50, v49);
  if (v44)
  {
LABEL_107:
    if (*(_DWORD *)v44 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v44, v49);
    else
      *(_DWORD *)v44 -= 2;
  }
LABEL_109:
  v51 = v65;
  if (v65)
  {
    v52 = *(unsigned int *)(v65 - 4);
    if ((_DWORD)v52)
    {
      v53 = v65 + 8;
      do
      {
        v54 = *(WTF::StringImpl **)(v53 - 8);
        if (v54 != (WTF::StringImpl *)-1)
        {
          v55 = *(unsigned int *)(v53 + 8);
          if ((_DWORD)v55 != -1)
          {
            ((void (*)(WTF::StringImpl **, uint64_t))off_1E33EE678[v55])(&v62, v53);
            v54 = *(WTF::StringImpl **)(v53 - 8);
          }
          *(_DWORD *)(v53 + 8) = -1;
          *(_QWORD *)(v53 - 8) = 0;
          if (v54)
          {
            if (*(_DWORD *)v54 == 2)
              WTF::StringImpl::destroy(v54, v49);
            else
              *(_DWORD *)v54 -= 2;
          }
        }
        v53 += 24;
        --v52;
      }
      while (v52);
    }
    WTF::fastFree((WTF *)(v51 - 16), v49);
  }
  if (*v46 == 1)
    WTF::JSONImpl::Value::operator delete();
  else
    --*v46;
  result = v66;
  v66 = 0;
  if (result)
    goto LABEL_6;
  return result;
}

void WebCore::InspectorHistory::perform(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  char *v3;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  void *v15;
  void *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  const WTF::StringImpl *v24;
  int v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  char v39;

  v3 = a2;
  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)a2 + 32))(&v37);
  if (v39)
  {
    v6 = v38;
    *(_BYTE *)a3 = v37;
    *(_QWORD *)(a3 + 8) = v6;
    *(_BYTE *)(a3 + 16) = 1;
    return;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)v3 + 16))(&v36);
  v8 = v36;
  if (v36)
  {
    if (*((_DWORD *)v36 + 1) && *(_QWORD *)(a1 + 16))
    {
      (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)v3 + 16))(&v35);
      v23 = *(_QWORD *)(a1 + 16) - 1;
      if (v23 >= *(unsigned int *)(a1 + 12))
      {
        __break(0xC471u);
        JUMPOUT(0x195DC3EC0);
      }
      (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(*(_QWORD *)a1 + 8 * v23) + 16))(&v34);
      v25 = WTF::equal(v35, v34, v24);
      v26 = v34;
      v34 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
          WTF::StringImpl::destroy(v26, v7);
        else
          *(_DWORD *)v26 -= 2;
      }
      v27 = v35;
      v35 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
          WTF::StringImpl::destroy(v27, v7);
        else
          *(_DWORD *)v27 -= 2;
      }
      v28 = v36;
      v36 = 0;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2)
        {
          WTF::StringImpl::destroy(v28, v7);
          if ((v25 & 1) == 0)
            goto LABEL_4;
        }
        else
        {
          *(_DWORD *)v28 -= 2;
          if ((v25 & 1) == 0)
            goto LABEL_4;
        }
      }
      else if (!v25)
      {
        goto LABEL_4;
      }
      v29 = *(_QWORD *)(a1 + 16) - 1;
      if (v29 < *(unsigned int *)(a1 + 12))
      {
        v30 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v29);
        v31 = *(_QWORD *)v3;
        *(_QWORD *)v3 = 0;
        v33 = v31;
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v30 + 24))(v30, &v33);
        v32 = v33;
        v33 = 0;
        if (v32)
          (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
        goto LABEL_28;
      }
      goto LABEL_60;
    }
    v36 = 0;
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
LABEL_4:
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(unsigned int *)(a1 + 12);
  if (v9 <= v10)
  {
    if (v9 != v10)
    {
      v17 = (uint64_t *)(*(_QWORD *)a1 + 8 * v9);
      v18 = 8 * v10 - 8 * v9;
      do
      {
        v19 = *v17;
        *v17 = 0;
        if (v19)
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
        ++v17;
        v18 -= 8;
      }
      while (v18);
    }
    goto LABEL_24;
  }
  v11 = *(unsigned int *)(a1 + 8);
  if (v9 > v11)
  {
    v12 = v11 + (v11 >> 2);
    if (v12 >= 0x10)
      v13 = v12 + 1;
    else
      v13 = 16;
    if (v13 <= v9)
      v14 = *(_QWORD *)(a1 + 16);
    else
      v14 = v13;
    if (!(v14 >> 29))
    {
      v15 = *(void **)a1;
      v16 = (void *)WTF::fastMalloc((WTF *)(8 * v14));
      *(_DWORD *)(a1 + 8) = v14;
      *(_QWORD *)a1 = v16;
      memcpy(v16, v15, 8 * v10);
      if (v15)
      {
        if (*(void **)a1 == v15)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((WTF *)v15, v7);
      }
      goto LABEL_17;
    }
LABEL_60:
    __break(0xC471u);
    JUMPOUT(0x195DC3EB8);
  }
LABEL_17:
  if (*(_QWORD *)a1)
    bzero((void *)(*(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 12)), 8 * v9 - 8 * *(unsigned int *)(a1 + 12));
LABEL_24:
  *(_DWORD *)(a1 + 12) = v9;
  if (*(_DWORD *)(a1 + 8) == (_DWORD)v9)
  {
    v3 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a1, v9 + 1, (unint64_t)v3);
    v9 = *(unsigned int *)(a1 + 12);
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v9);
  }
  else
  {
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v9);
  }
  v21 = *(_QWORD *)v3;
  *(_QWORD *)v3 = 0;
  *v20 = v21;
  *(_DWORD *)(a1 + 12) = v9 + 1;
  ++*(_QWORD *)(a1 + 16);
LABEL_28:
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  if (v39)
  {
    v22 = v38;
    v38 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v7);
      else
        *(_DWORD *)v22 -= 2;
    }
  }
}

uint64_t *WebCore::InspectorHistory::undo@<X0>(uint64_t *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t **v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  WTF::StringImpl *v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  char v19;

  v2 = (uint64_t **)this;
  v4 = this[2];
  if (v4)
  {
    while (1)
    {
      v5 = v4 - 1;
      if (v5 >= *((unsigned int *)v2 + 3))
        break;
      this = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(*v2)[v5] + 56))((*v2)[v5]);
      if ((_DWORD)this)
      {
        v4 = (uint64_t)v2[2] - 1;
        v2[2] = (uint64_t *)v4;
        if (v4)
          continue;
      }
      goto LABEL_15;
    }
    __break(0xC471u);
LABEL_31:
    JUMPOUT(0x195DC4060);
  }
  while (1)
  {
LABEL_15:
    v11 = v2[2];
    if (!v11)
    {
LABEL_16:
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      return this;
    }
    v6 = (unint64_t)v11 - 1;
    if (v6 >= *((unsigned int *)v2 + 3))
    {
      __break(0xC471u);
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
    v7 = (*v2)[v6];
    this = (*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v7 + 40))(&v17, v7);
    if (v19)
      break;
    v2[2] = (uint64_t *)((char *)v2[2] - 1);
    this = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 56))(v7);
    v10 = (int)this;
    if (!v19)
      goto LABEL_12;
    this = (uint64_t *)v18;
    v18 = 0;
    if (!this)
      goto LABEL_12;
    if (*(_DWORD *)this == 2)
    {
      this = (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v9);
      if (v10)
        goto LABEL_16;
    }
    else
    {
      *(_DWORD *)this -= 2;
LABEL_12:
      if (v10)
        goto LABEL_16;
    }
  }
  v2[2] = 0;
  if (*((_DWORD *)v2 + 2))
  {
    v12 = *((unsigned int *)v2 + 3);
    if ((_DWORD)v12)
    {
      v13 = *v2;
      v14 = 8 * v12;
      do
      {
        v15 = *v13;
        *v13 = 0;
        if (v15)
          (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
        ++v13;
        v14 -= 8;
      }
      while (v14);
      *((_DWORD *)v2 + 3) = 0;
    }
    this = *v2;
    if (*v2)
    {
      *v2 = 0;
      *((_DWORD *)v2 + 2) = 0;
      this = (uint64_t *)WTF::fastFree((WTF *)this, v8);
    }
  }
  if (!v19)
    goto LABEL_30;
  v16 = v18;
  *(_BYTE *)a2 = v17;
  a2[1] = v16;
  *((_BYTE *)a2 + 16) = 1;
  return this;
}

uint64_t *WebCore::InspectorHistory::redo@<X0>(uint64_t *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t **v2;
  unint64_t v4;
  unint64_t i;
  uint64_t v6;
  void *v7;
  WTF::StringImpl *v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  char v18;

  v2 = (uint64_t **)this;
  v4 = this[2];
  for (i = *((unsigned int *)this + 3); v4 < i; i = *((unsigned int *)v2 + 3))
  {
    this = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(*v2)[v4] + 56))((*v2)[v4]);
    if (!(_DWORD)this)
      break;
    v4 = (unint64_t)v2[2] + 1;
    v2[2] = (uint64_t *)v4;
  }
  while (1)
  {
    v10 = (unint64_t)v2[2];
    if (v10 >= *((unsigned int *)v2 + 3))
    {
LABEL_14:
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      return this;
    }
    v6 = (*v2)[v10];
    this = (*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v6 + 48))(&v16, v6);
    if (v18)
      break;
    v2[2] = (uint64_t *)((char *)v2[2] + 1);
    this = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 56))(v6);
    v9 = (int)this;
    if (!v18)
      goto LABEL_10;
    this = (uint64_t *)v17;
    v17 = 0;
    if (!this)
      goto LABEL_10;
    if (*(_DWORD *)this == 2)
    {
      this = (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v8);
      if (v9)
        goto LABEL_14;
    }
    else
    {
      *(_DWORD *)this -= 2;
LABEL_10:
      if (v9)
        goto LABEL_14;
    }
  }
  v2[2] = 0;
  if (*((_DWORD *)v2 + 2))
  {
    v11 = *((unsigned int *)v2 + 3);
    if ((_DWORD)v11)
    {
      v12 = *v2;
      v13 = 8 * v11;
      do
      {
        v14 = *v12;
        *v12 = 0;
        if (v14)
          (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
        ++v12;
        v13 -= 8;
      }
      while (v13);
      *((_DWORD *)v2 + 3) = 0;
    }
    this = *v2;
    if (*v2)
    {
      *v2 = 0;
      *((_DWORD *)v2 + 2) = 0;
      this = (uint64_t *)WTF::fastFree((WTF *)this, v7);
    }
  }
  if (v18)
  {
    v15 = v17;
    *(_BYTE *)a2 = v16;
    a2[1] = v15;
    *((_BYTE *)a2 + 16) = 1;
  }
  else
  {
    __break(1u);
  }
  return this;
}

WTF::StringImpl *WebCore::InspectorInstrumentation::didClearWindowObjectInWorldImpl(_QWORD *a1, WebCore::Frame *a2, WebCore::DOMWrapperWorld *a3)
{
  Inspector::InspectorDebuggerAgent *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13;

  v6 = (Inspector::InspectorDebuggerAgent *)a1[16];
  if (v6)
    WebCore::PageDebuggerAgent::didClearWindowObjectInWorld(v6, a2, a3);
  v7 = a1[26];
  if (v7)
  {
    v8 = *(unsigned int **)(*(_QWORD *)(v7 + 72) + 200);
    if (v8)
    {
      WebCore::InspectorPageAgent::frameId(v8, a2, &v13);
      v9 = WebCore::WindowProxy::jsWindowProxy(*(WebCore::WindowProxy **)(*(_QWORD *)(*((_QWORD *)a2 + 38) + 16) + 112), a3);
      WebCore::PageRuntimeAgent::notifyContextCreated((Inspector::InjectedScriptManager **)v7, (const WTF::String *)&v13, *(JSC::JSGlobalObject **)(v9 + 16), a3, 0);
      v11 = v13;
      v13 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v10);
        else
          *(_DWORD *)v11 -= 2;
      }
    }
  }
  result = (WTF::StringImpl *)a1[25];
  if (result)
    return WebCore::InspectorPageAgent::didClearWindowObjectInWorld(result, a2, a3);
  return result;
}

uint64_t WebCore::InspectorInstrumentation::identifierForNodeImpl(uint64_t a1, WebCore::InspectorDOMAgent *a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl *v6;

  v2 = *(_QWORD *)(a1 + 40);
  if (!v2)
    return 0;
  v6 = 0;
  v4 = WebCore::InspectorDOMAgent::pushNodePathToFrontend(v2, (WebCore::Node *)&v6, a2);
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v3);
    else
      *(_DWORD *)v6 -= 2;
  }
  return v4;
}

uint64_t *WebCore::InspectorInstrumentation::didRemoveDOMNodeImpl(uint64_t a1, WebCore::Node *a2)
{
  uint64_t *v4;
  uint64_t *result;
  WebCore::Node *v6;

  v4 = *(uint64_t **)(a1 + 152);
  if (v4)
  {
    v6 = a2;
    WTF::HashMap<WebCore::Node *,WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>,WTF::HashTableTraits>::removeIf<WebCore::PageDOMDebuggerAgent::didRemoveDOMNode(WebCore::Node&)::$_0 &>(v4 + 21, (WTF::StringImpl *)&v6);
    WTF::HashMap<WebCore::Node *,WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>,WTF::HashTableTraits>::removeIf<WebCore::PageDOMDebuggerAgent::didRemoveDOMNode(WebCore::Node&)::$_0 &>(v4 + 22, (WTF::StringImpl *)&v6);
    WTF::HashMap<WebCore::Node *,WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>,WTF::HashTableTraits>::removeIf<WebCore::PageDOMDebuggerAgent::didRemoveDOMNode(WebCore::Node&)::$_0 &>(v4 + 23, (WTF::StringImpl *)&v6);
  }
  result = *(uint64_t **)(a1 + 40);
  if (result)
    return WebCore::InspectorDOMAgent::didRemoveDOMNode(result, a2);
  return result;
}

double WebCore::InspectorInstrumentation::didAddOrRemoveScrollbarsImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WTF::MonotonicTime *v5;
  double v6;
  double result;
  _BYTE v8[24];

  v2 = *(_QWORD *)(a1 + 112);
  if (v2)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a2 + 328) + 296);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 1272);
      if (v4)
      {
        v5 = (WTF::MonotonicTime *)WTF::WeakHashSet<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::Document>(v2 + 152, v4, (uint64_t)v8);
        if ((*(_QWORD *)(v2 + 200) & 0xFFFFFFFFFFFFLL) == 0
          || (result = *(double *)((*(_QWORD *)(v2 + 200) & 0xFFFFFFFFFFFFLL) + 8), result == 0.0))
        {
          *(_QWORD *)(v2 + 192) = 0;
          WTF::MonotonicTime::now(v5);
          WebCore::TimerBase::setNextFireTime(v2 + 168, v6 + 0.0);
        }
      }
    }
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  WTF::MonotonicTime *v4;
  double v5;
  double result;
  _BYTE v7[24];

  v2 = *(_QWORD *)(a1 + 112);
  if (v2)
  {
    if ((*(_BYTE *)(a2 + 45) & 1) == 0)
    {
      v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8);
      if (v3)
      {
        v4 = (WTF::MonotonicTime *)WTF::WeakHashSet<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::Document>(v2 + 152, v3, (uint64_t)v7);
        if ((*(_QWORD *)(v2 + 200) & 0xFFFFFFFFFFFFLL) == 0
          || (result = *(double *)((*(_QWORD *)(v2 + 200) & 0xFFFFFFFFFFFFLL) + 8), result == 0.0))
        {
          *(_QWORD *)(v2 + 192) = 0;
          WTF::MonotonicTime::now(v4);
          WebCore::TimerBase::setNextFireTime(v2 + 168, v5 + 0.0);
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::InspectorInstrumentation::didRemoveDOMAttrImpl(uint64_t a1, WebCore::Element *a2, const WTF::AtomString *a3)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return WebCore::InspectorDOMAgent::didRemoveDOMAttr(result, a2, a3);
  return result;
}

double WebCore::InspectorInstrumentation::didInvalidateStyleAttrImpl(uint64_t a1, WebCore::Element *a2)
{
  WebCore::InspectorDOMAgent *v2;
  double result;

  v2 = *(WebCore::InspectorDOMAgent **)(a1 + 40);
  if (v2)
    return WebCore::InspectorDOMAgent::didInvalidateStyleAttr(v2, a2);
  return result;
}

WTF *WebCore::InspectorInstrumentation::activeStyleSheetsUpdatedImpl(uint64_t a1, WebCore::Document *a2)
{
  WTF *result;

  result = *(WTF **)(a1 + 112);
  if (result)
    return WebCore::InspectorCSSAgent::activeStyleSheetsUpdated(result, a2);
  return result;
}

uint64_t WebCore::InspectorInstrumentation::didPushShadowRootImpl(uint64_t a1, WebCore::Element *a2, WebCore::ShadowRoot *a3)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return WebCore::InspectorDOMAgent::didPushShadowRoot(result, a2, a3);
  return result;
}

uint64_t WebCore::InspectorInstrumentation::didChangeCustomElementStateImpl(uint64_t a1, WebCore::Element *a2)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return WebCore::InspectorDOMAgent::didChangeCustomElementState(result, a2);
  return result;
}

WTF::StringImpl *WebCore::InspectorInstrumentation::pseudoElementCreatedImpl(uint64_t a1, WebCore::PseudoElement *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)(a1 + 40);
  if (result)
    return WebCore::InspectorDOMAgent::pseudoElementCreated(result, a2);
  return result;
}

void WebCore::InspectorInstrumentation::pseudoElementDestroyedImpl(uint64_t a1, WebCore::PseudoElement *a2, const WTF::StringImpl *a3)
{
  uint64_t v5;
  WebCore::InspectorLayerTreeAgent *v6;

  v5 = *(_QWORD *)(a1 + 40);
  if (v5)
    WebCore::InspectorDOMAgent::pseudoElementDestroyed(v5, a2);
  v6 = *(WebCore::InspectorLayerTreeAgent **)(a1 + 176);
  if (v6)
    WebCore::InspectorLayerTreeAgent::unbindPseudoElement(v6, a2, a3);
}

unsigned int *WebCore::InspectorInstrumentation::mouseDidMoveOverElementImpl(unsigned int *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *((_QWORD *)result + 5);
  if (v2)
  {
    v3 = a2[9];
    if (v3)
      *(_DWORD *)(v3 + 24) += 2;
    result = *(unsigned int **)(v2 + 152);
    *(_QWORD *)(v2 + 152) = v3;
    if (result)
    {
      if (result[6] == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          result = WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
      }
      else
      {
        result[6] -= 2;
      }
    }
    if (*(_BYTE *)(v2 + 436))
    {
      v4 = *(_QWORD *)(v2 + 152);
      if (v4)
      {
        if ((*(_WORD *)(v4 + 28) & 2) == 0 || (v4 = *(_QWORD *)(v4 + 32)) != 0)
        {
          v5 = *(_QWORD *)(v2 + 168);
          if (v5)
            return (unsigned int *)WebCore::InspectorOverlay::highlightNode(*(_QWORD ***)(v2 + 72), (_DWORD *)v4, v5, v2 + 176, v2 + 200, *(_BYTE *)(v2 + 437));
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::InspectorInstrumentation::forcePseudoStateImpl(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 112);
  if (result)
    return WebCore::InspectorCSSAgent::forcePseudoState(result, a2, a3);
  return result;
}

uint64_t *WebCore::InspectorInstrumentation::characterDataModifiedImpl(uint64_t a1, WebCore::CharacterData *a2)
{
  uint64_t *result;

  result = *(uint64_t **)(a1 + 40);
  if (result)
    return WebCore::InspectorDOMAgent::characterDataModified((WebCore::InspectorDOMAgent *)result, a2);
  return result;
}

Inspector::InspectorDebuggerAgent **WebCore::InspectorInstrumentation::willSendXMLHttpRequestImpl(uint64_t a1, const WTF::String *a2)
{
  Inspector::InspectorDebuggerAgent **result;

  result = *(Inspector::InspectorDebuggerAgent ***)(a1 + 144);
  if (result)
    return (Inspector::InspectorDebuggerAgent **)WebCore::InspectorDOMDebuggerAgent::breakOnURLIfNeeded(result, a2);
  return result;
}

uint64_t WebCore::InspectorInstrumentation::didInstallTimerImpl(uint64_t result, WTF::JSONImpl::Object *a2, WTF::JSONImpl::Value *a3, WebCore::ScriptExecutionContext *this, double a5)
{
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  WebCore::Frame *v13;
  uint64_t v14;

  v9 = result;
  if (*(_QWORD *)(result + 136))
  {
    WebCore::ScriptExecutionContext::globalObject(this);
    result = Inspector::InspectorDebuggerAgent::didScheduleAsyncCall();
  }
  v10 = *(_QWORD *)(v9 + 232);
  if (v10)
  {
    if (*((_BYTE *)this + 274))
    {
      v13 = 0;
LABEL_8:
      WebCore::TimelineRecordFactory::createTimerInstallData(a2, a3, &v14, a5);
      WebCore::InspectorTimelineAgent::appendRecord(v10, &v14, 8u, 1, v13, 0, 0);
      result = v14;
      v14 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 1)
          return WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)result;
      }
      return result;
    }
    v11 = *((_DWORD *)this - 42);
    *((_DWORD *)this - 42) = v11 + 2;
    v12 = *((_QWORD *)this + 42);
    if (v12)
    {
      v13 = *(WebCore::Frame **)(v12 + 8);
      if (v11)
      {
LABEL_7:
        *((_DWORD *)this - 42) = v11;
        goto LABEL_8;
      }
    }
    else
    {
      v13 = 0;
      if (v11)
        goto LABEL_7;
    }
    if ((*((_WORD *)this - 81) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::ScriptExecutionContext *)((char *)this - 192), a2);
    goto LABEL_8;
  }
  return result;
}

_DWORD *WebCore::InspectorInstrumentation::didRemoveTimerImpl(uint64_t a1, WebCore::TimelineRecordFactory *this, uint64_t a3)
{
  _DWORD *result;
  uint64_t v7;
  int v8;
  uint64_t v9;
  WebCore::Frame *v10;
  _DWORD *v11;

  result = *(_DWORD **)(a1 + 136);
  if (result)
    result = (_DWORD *)Inspector::InspectorDebuggerAgent::didCancelAsyncCall();
  v7 = *(_QWORD *)(a1 + 232);
  if (v7)
  {
    if (*(_BYTE *)(a3 + 274))
    {
      v10 = 0;
LABEL_8:
      WebCore::TimelineRecordFactory::createGenericTimerData(this, (uint64_t *)&v11);
      WebCore::InspectorTimelineAgent::appendRecord(v7, &v11, 9u, 1, v10, 0, 0);
      result = v11;
      v11 = 0;
      if (result)
      {
        if (*result == 1)
          return (_DWORD *)WTF::JSONImpl::Value::operator delete();
        else
          --*result;
      }
      return result;
    }
    v8 = *(_DWORD *)(a3 - 168);
    *(_DWORD *)(a3 - 168) = v8 + 2;
    v9 = *(_QWORD *)(a3 + 336);
    if (v9)
    {
      v10 = *(WebCore::Frame **)(v9 + 8);
      if (v8)
      {
LABEL_7:
        *(_DWORD *)(a3 - 168) = v8;
        goto LABEL_8;
      }
    }
    else
    {
      v10 = 0;
      if (v8)
        goto LABEL_7;
    }
    if ((*(_WORD *)(a3 - 162) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)(a3 - 192), this);
    goto LABEL_8;
  }
  return result;
}

double WebCore::InspectorInstrumentation::didAddEventListenerImpl(_QWORD *a1, WebCore::EventTarget *a2, const WTF::AtomString *a3, WebCore::EventListener *a4, int a5)
{
  WebCore::WebDebuggerAgent *v7;
  double result;
  uint64_t v9;
  uint64_t v10;
  WTF::MonotonicTime *v11;
  double v12;
  _BYTE v13[24];

  v7 = (WebCore::WebDebuggerAgent *)a1[17];
  if (v7)
    WebCore::WebDebuggerAgent::didAddEventListener(v7, a2, a3, a4, a5);
  v9 = a1[5];
  if (v9)
    WebCore::InspectorDOMAgent::didAddEventListener(v9, a2);
  v10 = a1[14];
  if (v10)
  {
    if ((*((_BYTE *)a2 + 22) & 2) != 0)
    {
      v11 = (WTF::MonotonicTime *)WTF::WeakHashSet<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::Document>(v10 + 152, (uint64_t)a2, (uint64_t)v13);
      if ((*(_QWORD *)(v10 + 200) & 0xFFFFFFFFFFFFLL) == 0
        || (result = *(double *)((*(_QWORD *)(v10 + 200) & 0xFFFFFFFFFFFFLL) + 8), result == 0.0))
      {
        *(_QWORD *)(v10 + 192) = 0;
        WTF::MonotonicTime::now(v11);
        WebCore::TimerBase::setNextFireTime(v10 + 168, v12 + 0.0);
      }
    }
  }
  return result;
}

uint64_t WebCore::InspectorInstrumentation::willRemoveEventListenerImpl(_QWORD *a1, WebCore::EventTarget *a2, WTF::StringImpl **a3, WebCore::EventListener *a4, int a5)
{
  uint64_t v10;
  uint64_t result;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  _QWORD v17[3];

  v10 = a1[17];
  if (v10)
  {
    result = (uint64_t)WebCore::EventTarget::eventListeners((uint64_t)a2, a3);
    v12 = *(unsigned int *)(result + 12);
    if ((_DWORD)v12)
    {
      v13 = 0;
      while (1)
      {
        v14 = *(_QWORD *)(*(_QWORD *)result + 8 * v13);
        if (*(WebCore::EventListener **)(v14 + 8) == a4 && ((((*(_BYTE *)(v14 + 4) & 1) == 0) ^ a5) & 1) != 0)
          break;
        if (v12 == ++v13)
          goto LABEL_10;
      }
      if (v13 >= v12)
      {
        __break(0xC471u);
        return result;
      }
      v17[0] = *(_QWORD *)(*(_QWORD *)result + 8 * v13);
      WTF::HashMap<WebCore::RegisteredEventListener const*,int,WTF::DefaultHash<WebCore::RegisteredEventListener const*>,WTF::HashTraits<WebCore::RegisteredEventListener const*>,WTF::HashTraits<int>,WTF::HashTableTraits>::take((uint64_t *)(v10 + 264), v17);
      Inspector::InspectorDebuggerAgent::didCancelAsyncCall();
    }
  }
LABEL_10:
  result = a1[5];
  if (result)
    result = (uint64_t)WebCore::InspectorDOMAgent::willRemoveEventListener((uint64_t *)result, a2, a3, a4, a5);
  v15 = a1[14];
  if (v15)
  {
    if ((*((_BYTE *)a2 + 22) & 2) != 0)
    {
      result = WTF::WeakHashSet<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::Document>(v15 + 152, (uint64_t)a2, (uint64_t)v17);
      if ((*(_QWORD *)(v15 + 200) & 0xFFFFFFFFFFFFLL) == 0
        || *(double *)((*(_QWORD *)(v15 + 200) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
      {
        *(_QWORD *)(v15 + 192) = 0;
        WTF::MonotonicTime::now((WTF::MonotonicTime *)result);
        return WebCore::TimerBase::setNextFireTime(v15 + 168, v16 + 0.0);
      }
    }
  }
  return result;
}

BOOL WebCore::InspectorInstrumentation::isEventListenerDisabledImpl(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(_QWORD *)(a1 + 40);
  if (!v5)
    return 0;
  v6 = *(_QWORD *)(v5 + 424);
  if (!v6)
  {
    v9 = 0;
    LODWORD(v7) = 0;
LABEL_11:
    v8 = v6 + 56 * v7;
    goto LABEL_12;
  }
  v7 = *(unsigned int *)(v6 - 4);
  v8 = v6 + 56 * v7;
  if (!*(_DWORD *)(v6 - 12))
  {
    v9 = v6 + 56 * v7;
    goto LABEL_11;
  }
  v9 = v6;
  if ((_DWORD)v7)
  {
    v10 = 56 * v7;
    v9 = v6;
    while ((*(_DWORD *)v9 + 1) <= 1)
    {
      v9 += 56;
      v10 -= 56;
      if (!v10)
      {
        v9 = v8;
        break;
      }
    }
  }
LABEL_12:
  if (v6)
    v6 += 56 * *(unsigned int *)(v6 - 4);
  if (v6 == v9)
    return 0;
  while (*(_QWORD *)(v9 + 16) != a2
       || *(_QWORD *)(v9 + 24) != a4
       || *(_QWORD *)(v9 + 32) != *a3
       || *(unsigned __int8 *)(v9 + 40) != a5)
  {
    v11 = v9 + 56;
    v9 = v8;
    if (v11 != v8)
    {
      v9 = v11;
      while ((*(_DWORD *)v9 + 1) <= 1)
      {
        v9 += 56;
        if (v9 == v8)
        {
          v9 = v8;
          break;
        }
      }
    }
    if (v9 == v6)
      return 0;
  }
  return *(_BYTE *)(v9 + 41) != 0;
}

WTF::JSONImpl::Object *WebCore::InspectorInstrumentation::willCallFunctionImpl(WTF::JSONImpl::Object *result, WebCore::TimelineRecordFactory *this, WTF::String *a3, WTF::JSONImpl::Value *a4, uint64_t a5)
{
  uint64_t v5;
  int v9;
  uint64_t v10;
  WebCore::Frame *v11;
  WTF::JSONImpl::Object *v12;

  v5 = *((_QWORD *)result + 29);
  if (!v5)
    return result;
  if (!*(_BYTE *)(a5 + 274))
  {
    v9 = *(_DWORD *)(a5 - 168);
    *(_DWORD *)(a5 - 168) = v9 + 2;
    v10 = *(_QWORD *)(a5 + 336);
    if (v10)
    {
      v11 = *(WebCore::Frame **)(v10 + 8);
      if (v9)
      {
LABEL_5:
        *(_DWORD *)(a5 - 168) = v9;
        goto LABEL_6;
      }
    }
    else
    {
      v11 = 0;
      if (v9)
        goto LABEL_5;
    }
    if ((*(_WORD *)(a5 - 162) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)(a5 - 192), this);
    goto LABEL_6;
  }
  v11 = 0;
LABEL_6:
  WebCore::TimelineRecordFactory::createFunctionCallData(this, a3, a4, (uint64_t *)&v12);
  WebCore::InspectorTimelineAgent::pushCurrentRecord(v5, &v12, 15, 1, v11, 0, 0);
  result = v12;
  v12 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF::JSONImpl::Object *)WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)result;
  }
  return result;
}

uint64_t WebCore::InspectorInstrumentation::didCallFunctionImpl(uint64_t result, _BYTE *a2)
{
  uint64_t v2;
  int v3;

  v2 = *(_QWORD *)(result + 232);
  if (v2)
  {
    if (!a2[274])
    {
      v3 = *((_DWORD *)a2 - 42);
      *((_DWORD *)a2 - 42) = v3 + 2;
      if (v3)
      {
        *((_DWORD *)a2 - 42) = v3;
      }
      else if ((*((_WORD *)a2 - 81) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)(a2 - 192), a2);
      }
    }
    return WebCore::InspectorTimelineAgent::didCompleteCurrentRecord(v2);
  }
  return result;
}

uint64_t WebCore::InspectorInstrumentation::willDispatchEventOnWindowImpl(uint64_t result, WebCore::TimelineRecordFactory *this, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::Frame *v7;
  WTF::JSONImpl::Object *v8;

  v3 = *(_QWORD *)(result + 232);
  if (v3)
  {
    v4 = *(_QWORD *)(a3 + 72);
    if (!v4)
      goto LABEL_7;
    v5 = *(_QWORD *)(v4 + 8);
    if (!v5)
      goto LABEL_7;
    if (*(_BYTE *)(v5 + 178))
    {
      result = 105;
      __break(0xC471u);
      return result;
    }
    v6 = *(_QWORD *)(v5 + 240);
    if (v6)
      v7 = *(WebCore::Frame **)(v6 + 8);
    else
LABEL_7:
      v7 = 0;
    WebCore::TimelineRecordFactory::createEventDispatchData(this, (uint64_t *)&v8);
    WebCore::InspectorTimelineAgent::pushCurrentRecord(v3, &v8, 0, 0, v7, 0, 0);
    result = (uint64_t)v8;
    v8 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 1)
        return WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)result;
    }
  }
  return result;
}

uint64_t *WebCore::InspectorInstrumentation::eventDidResetAfterDispatchImpl(uint64_t a1, const WebCore::Event *a2)
{
  uint64_t *result;

  result = *(uint64_t **)(a1 + 40);
  if (result)
    return WebCore::InspectorDOMAgent::eventDidResetAfterDispatch(result, a2);
  return result;
}

WTF::JSONImpl::Object *WebCore::InspectorInstrumentation::willEvaluateScriptImpl(WTF::JSONImpl::Object *result, WebCore::Frame *a2, WebCore::TimelineRecordFactory *this, WTF::String *a4, WTF::JSONImpl::Value *a5)
{
  uint64_t v5;
  WTF::JSONImpl::Object *v7;

  v5 = *((_QWORD *)result + 29);
  if (v5)
  {
    WebCore::TimelineRecordFactory::createEvaluateScriptData(this, a4, a5, (uint64_t *)&v7);
    WebCore::InspectorTimelineAgent::pushCurrentRecord(v5, &v7, 11, 1, a2, 0, 0);
    result = v7;
    v7 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 1)
        return (WTF::JSONImpl::Object *)WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)result;
    }
  }
  return result;
}

WTF::JSONImpl::Object *WebCore::InspectorInstrumentation::willFireTimerImpl(_QWORD *a1, WebCore::TimelineRecordFactory *this, int a3, uint64_t a4)
{
  WTF::JSONImpl::Object *result;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  WebCore::Frame *v16;
  WTF::JSONImpl::Object *v17;

  result = (WTF::JSONImpl::Object *)a1[17];
  if (result)
    result = (WTF::JSONImpl::Object *)Inspector::InspectorDebuggerAgent::willDispatchAsyncCall();
  v9 = a1[18];
  if (v9)
  {
    result = (WTF::JSONImpl::Object *)Inspector::InspectorDebuggerAgent::breakpointsActive(*(Inspector::InspectorDebuggerAgent **)(v9 + 48));
    if ((_DWORD)result)
    {
      v10 = 88;
      if (a3)
        v10 = 104;
      v11 = *(_DWORD **)(v9 + v10);
      if (v11)
      {
        ++*v11;
        Inspector::InspectorDebuggerAgent::schedulePauseForSpecialBreakpoint();
        v17 = 0;
        result = (WTF::JSONImpl::Object *)WTF::RefCounted<JSC::Breakpoint>::deref((uint64_t)v11, v12);
      }
    }
  }
  v13 = a1[29];
  if (v13)
  {
    if (*(_BYTE *)(a4 + 274))
    {
      v16 = 0;
LABEL_14:
      WebCore::TimelineRecordFactory::createGenericTimerData(this, (uint64_t *)&v17);
      WebCore::InspectorTimelineAgent::pushCurrentRecord(v13, &v17, 10, 0, v16, 0, 0);
      result = v17;
      v17 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 1)
          return (WTF::JSONImpl::Object *)WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)result;
      }
      return result;
    }
    v14 = *(_DWORD *)(a4 - 168);
    *(_DWORD *)(a4 - 168) = v14 + 2;
    v15 = *(_QWORD *)(a4 + 336);
    if (v15)
    {
      v16 = *(WebCore::Frame **)(v15 + 8);
      if (v14)
      {
LABEL_13:
        *(_DWORD *)(a4 - 168) = v14;
        goto LABEL_14;
      }
    }
    else
    {
      v16 = 0;
      if (v14)
        goto LABEL_13;
    }
    if ((*(_WORD *)(a4 - 162) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)(a4 - 192), this);
    goto LABEL_14;
  }
  return result;
}

uint64_t WebCore::InspectorInstrumentation::didFireTimerImpl(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  WTF::StringImpl *v8;
  uint64_t result;

  if (a1[17])
    Inspector::InspectorDebuggerAgent::didDispatchAsyncCall();
  v5 = a1[18];
  if (v5
    && Inspector::InspectorDebuggerAgent::breakpointsActive(*(Inspector::InspectorDebuggerAgent **)(v5 + 48)))
  {
    v6 = 88;
    if (a3)
      v6 = 104;
    v7 = *(_DWORD **)(v5 + v6);
    if (v7)
    {
      ++*v7;
      Inspector::InspectorDebuggerAgent::cancelPauseForSpecialBreakpoint();
      WTF::RefCounted<JSC::Breakpoint>::deref((uint64_t)v7, v8);
    }
  }
  result = a1[29];
  if (result)
    return WebCore::InspectorTimelineAgent::didCompleteCurrentRecord(result);
  return result;
}

WTF::JSONImpl::Object *WebCore::InspectorInstrumentation::didInvalidateLayoutImpl(WTF::JSONImpl::Object *result, WebCore::Frame *a2)
{
  uint64_t v2;
  WTF::JSONImpl::Object *v4;

  v2 = *((_QWORD *)result + 29);
  if (v2)
  {
    WTF::JSONImpl::Object::create(result);
    WebCore::InspectorTimelineAgent::appendRecord(v2, &v4, 3u, 1, a2, 0, 0);
    result = v4;
    v4 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 1)
        return (WTF::JSONImpl::Object *)WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)result;
    }
  }
  return result;
}

WTF *WebCore::InspectorInstrumentation::didLayoutImpl(WTF *result, uint64_t a2)
{
  WTF *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const WebCore::FloatQuad *v6;
  void *v7;
  uint64_t v8;
  _QWORD **v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;

  v2 = result;
  v3 = *((_QWORD *)result + 29);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 + 84);
    if ((_DWORD)v4)
    {
      v5 = *(_QWORD *)(v3 + 72);
      v11 = 0;
      v12 = 0;
      (*(void (**)(uint64_t, WTF **, _QWORD))(*(_QWORD *)a2 + 392))(a2, &v11, 0);
      if (HIDWORD(v12))
        WebCore::TimelineRecordFactory::appendLayoutRoot(*(WebCore::TimelineRecordFactory **)(v5 + 32 * v4 - 24), v11, v6);
      WebCore::InspectorTimelineAgent::didCompleteCurrentRecord(v3);
      result = v11;
      if (v11)
      {
        v11 = 0;
        LODWORD(v12) = 0;
        result = (WTF *)WTF::fastFree(result, v7);
      }
    }
  }
  v8 = *((_QWORD *)v2 + 25);
  if (v8)
  {
    if (*(_BYTE *)(v8 + 152))
      *(_BYTE *)(v8 + 152) = 0;
    v9 = *(_QWORD ***)(v8 + 72);
    if (!v9[2]
      && !v9[3]
      && !v9[16]
      && !*((_DWORD *)v9 + 71)
      && !*((_DWORD *)v9 + 75)
      && !*((_BYTE *)v9 + 304)
      && !*((_BYTE *)v9 + 305)
      && !*((_BYTE *)v9 + 306))
    {
      v10 = 8;
      return (WTF *)(*(uint64_t (**)(void))(*v9[1] + 8 * v10))();
    }
    result = (WTF *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)(*v9)[20] + 56))((*v9)[20]);
    if (result)
    {
      v10 = 7;
      return (WTF *)(*(uint64_t (**)(void))(*v9[1] + 8 * v10))();
    }
  }
  return result;
}

WTF::JSONImpl::Object *WebCore::InspectorInstrumentation::willPaintImpl(WTF::JSONImpl::Object *result, uint64_t a2)
{
  uint64_t v2;
  WebCore::Frame *v3;
  WTF::JSONImpl::Object *v4;

  v2 = *((_QWORD *)result + 29);
  if (v2)
  {
    if (!*(_BYTE *)(v2 + 157))
    {
      v3 = *(WebCore::Frame **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 40) + 8)
                                          + 528)
                              + 8);
      WTF::JSONImpl::Object::create(result);
      WebCore::InspectorTimelineAgent::pushCurrentRecord(v2, &v4, 5, 1, v3, 0, 0);
      result = v4;
      v4 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 1)
          return (WTF::JSONImpl::Object *)WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)result;
      }
    }
  }
  return result;
}

WTF::MonotonicTime *WebCore::InspectorInstrumentation::didPaintImpl(uint64_t a1, WebCore::RenderObject *a2, int32x2_t *a3)
{
  uint64_t v6;
  WTF::MonotonicTime *result;

  v6 = *(_QWORD *)(a1 + 232);
  if (v6)
    WebCore::InspectorTimelineAgent::didPaint(v6, a2, a3);
  result = *(WTF::MonotonicTime **)(a1 + 200);
  if (result)
    return WebCore::InspectorPageAgent::didPaint(result, a2, a3);
  return result;
}

WTF::JSONImpl::Object *WebCore::InspectorInstrumentation::willRecalculateStyleImpl(WTF::JSONImpl::Object *result, uint64_t a2)
{
  WTF::JSONImpl::Object *v2;
  uint64_t v3;
  uint64_t v4;
  WebCore::Frame *v5;
  uint64_t v6;
  WTF::JSONImpl::Object *v7;

  v2 = result;
  v3 = *((_QWORD *)result + 29);
  if (v3)
  {
    v4 = *(_QWORD *)(a2 + 528);
    v5 = v4 ? *(WebCore::Frame **)(v4 + 8) : 0;
    WTF::JSONImpl::Object::create(result);
    WebCore::InspectorTimelineAgent::pushCurrentRecord(v3, &v7, 2, 1, v5, 0, 0);
    result = v7;
    v7 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 1)
        result = (WTF::JSONImpl::Object *)WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)result;
    }
  }
  v6 = *((_QWORD *)v2 + 24);
  if (v6)
    *(_BYTE *)(v6 + 176) = 1;
  return result;
}

_DWORD *WebCore::InspectorInstrumentation::didRecalculateStyleImpl(_QWORD *a1)
{
  _DWORD *result;
  uint64_t v3;
  uint64_t v4;
  _QWORD **v5;
  uint64_t v6;

  result = (_DWORD *)a1[29];
  if (result)
    result = (_DWORD *)WebCore::InspectorTimelineAgent::didCompleteCurrentRecord((uint64_t)result);
  v3 = a1[24];
  if (v3)
  {
    *(_BYTE *)(v3 + 176) = 0;
    result = *(_DWORD **)(v3 + 168);
    *(_QWORD *)(v3 + 168) = 0;
    if (result)
    {
      if (*result == 1)
        result = (_DWORD *)WTF::JSONImpl::Value::operator delete();
      else
        --*result;
    }
  }
  v4 = a1[25];
  if (v4)
  {
    v5 = *(_QWORD ***)(v4 + 72);
    if (!v5[2]
      && !v5[3]
      && !v5[16]
      && !*((_DWORD *)v5 + 71)
      && !*((_DWORD *)v5 + 75)
      && !*((_BYTE *)v5 + 304)
      && !*((_BYTE *)v5 + 305)
      && !*((_BYTE *)v5 + 306))
    {
      v6 = 8;
      return (_DWORD *)(*(uint64_t (**)(void))(*v5[1] + 8 * v6))();
    }
    result = (_DWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)(*v5)[20] + 56))((*v5)[20]);
    if (result)
    {
      v6 = 7;
      return (_DWORD *)(*(uint64_t (**)(void))(*v5[1] + 8 * v6))();
    }
  }
  return result;
}

WTF::StringImpl *WebCore::InspectorInstrumentation::didScheduleStyleRecalculationImpl(WTF::StringImpl *result, WebCore::Document *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::Frame *v6;
  WTF::StringImpl **v7;
  WTF::StringImpl *v8;

  v3 = result;
  v4 = *((_QWORD *)result + 29);
  if (v4)
  {
    v5 = *((_QWORD *)a2 + 66);
    v6 = v5 ? *(WebCore::Frame **)(v5 + 8) : 0;
    WTF::JSONImpl::Object::create(result);
    WebCore::InspectorTimelineAgent::appendRecord(v4, &v8, 1u, 1, v6, 0, 0);
    result = v8;
    v8 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 1)
        result = (WTF::StringImpl *)WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)result;
    }
  }
  v7 = (WTF::StringImpl **)*((_QWORD *)v3 + 24);
  if (v7)
  {
    if (!v7[21])
    {
      WebCore::InspectorNetworkAgent::buildInitiatorObject(v7, a2, 0, &v8);
      result = v7[21];
      v7[21] = v8;
      if (result)
      {
        if (*(_DWORD *)result == 1)
          return (WTF::StringImpl *)WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)result;
      }
    }
  }
  return result;
}

WTF::StringImpl *WebCore::InspectorInstrumentation::applyUserAgentOverrideImpl(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  uint64_t v2;
  _DWORD *v3;

  v2 = *((_QWORD *)result + 25);
  if (v2)
  {
    v3 = *(_DWORD **)(v2 + 128);
    if (v3)
    {
      if (v3[1])
      {
        *v3 += 2;
        result = *(WTF::StringImpl **)a2;
        *(_QWORD *)a2 = v3;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
  }
  return result;
}

WTF::StringImpl *WebCore::InspectorInstrumentation::didLoadResourceFromMemoryCacheImpl(WTF::StringImpl *result, WebCore::DocumentLoader *a2, WebCore::CachedResource *a3)
{
  if (a2 && a3)
  {
    result = (WTF::StringImpl *)*((_QWORD *)result + 24);
    if (result)
      return WebCore::InspectorNetworkAgent::didLoadResourceFromMemoryCache(result, a2, a3);
  }
  return result;
}

WebCore *WebCore::InspectorInstrumentation::didReceiveThreadableLoaderResponseImpl(uint64_t a1, const WTF::StringImpl *a2, Inspector::IdentifiersFactory *a3)
{
  WebCore *result;

  result = *(WebCore **)(a1 + 192);
  if (result)
    return WebCore::InspectorNetworkAgent::didReceiveThreadableLoaderResponse(result, a3, a2);
  return result;
}

WTF::StringImpl *WebCore::InspectorInstrumentation::didReceiveDataImpl(uint64_t a1, Inspector::IdentifiersFactory *a2, uint64_t a3)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)(a1 + 192);
  if (result)
    return WebCore::InspectorNetworkAgent::didReceiveData(result, a2, a3);
  return result;
}

uint64_t *WebCore::InspectorInstrumentation::didFinishLoadingImpl(uint64_t a1, Inspector::IdentifiersFactory *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *result;

  result = *(uint64_t **)(a1 + 192);
  if (result)
    return WebCore::InspectorNetworkAgent::didFinishLoading((uint64_t)result, a2, a3, a4);
  return result;
}

uint64_t WebCore::InspectorInstrumentation::didFailLoadingImpl(uint64_t a1, Inspector::IdentifiersFactory *a2, uint64_t a3, WebCore::ResourceError *a4)
{
  uint64_t result;
  uint64_t v9;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
  if ((_DWORD)result)
  {
    v9 = *(_QWORD *)(a1 + 192);
    if (v9)
      WebCore::InspectorNetworkAgent::didFailLoading(v9, a2, a3, a4);
    result = *(_QWORD *)(a1 + 16);
    if (result)
      return WebCore::WebConsoleAgent::didFailLoading(result, (int)a2, a4);
  }
  return result;
}

uint64_t WebCore::InspectorInstrumentation::willLoadXHRSynchronouslyImpl(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 192);
  if (v1)
    *(_BYTE *)(v1 + 178) = 1;
  return result;
}

uint64_t WebCore::InspectorInstrumentation::didLoadXHRSynchronouslyImpl(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 192);
  if (v1)
    *(_BYTE *)(v1 + 178) = 0;
  return result;
}

uint64_t WebCore::InspectorInstrumentation::domContentLoadedEventFiredImpl(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  Inspector::PageFrontendDispatcher *v3;
  double *v4;
  double v5;

  if (*(_QWORD *)(*(_QWORD *)(a2 + 128) + 8) == a2)
  {
    v2 = *(_QWORD *)(result + 200);
    if (v2)
    {
      *(_BYTE *)(v2 + 152) = 1;
      v3 = *(Inspector::PageFrontendDispatcher **)(v2 + 40);
      v4 = (double *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 24) + 56))(*(_QWORD *)(v2 + 24));
      WTF::MonotonicTime::now((WTF::MonotonicTime *)v4);
      return Inspector::PageFrontendDispatcher::domContentEventFired(v3, v4[1] + v5 - v4[2]);
    }
  }
  return result;
}

uint64_t WebCore::InspectorInstrumentation::loadEventFiredImpl(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  Inspector::PageFrontendDispatcher *v3;
  double *v4;
  double v5;

  if (a2 && *(_QWORD *)(*(_QWORD *)(a2 + 128) + 8) == a2)
  {
    v2 = *(_QWORD *)(result + 200);
    if (v2)
    {
      v3 = *(Inspector::PageFrontendDispatcher **)(v2 + 40);
      v4 = (double *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 24) + 56))(*(_QWORD *)(v2 + 24));
      WTF::MonotonicTime::now((WTF::MonotonicTime *)v4);
      return Inspector::PageFrontendDispatcher::loadEventFired(v3, v4[1] + v5 - v4[2]);
    }
  }
  return result;
}

WTF::StringImpl *WebCore::InspectorInstrumentation::frameDetachedFromParentImpl(uint64_t a1, WebCore::LocalFrame *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)(a1 + 200);
  if (result)
    return WebCore::InspectorPageAgent::frameDetached(result, a2);
  return result;
}

uint64_t WebCore::InspectorInstrumentation::frameDocumentUpdatedImpl(uint64_t a1, WebCore::LocalFrame *a2)
{
  uint64_t v4;
  WebCore::Document *v5;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
  {
    v5 = (WebCore::Document *)*((_QWORD *)a2 + 37);
    if (v5)
    {
      if (*(WebCore::LocalFrame **)(*((_QWORD *)a2 + 16) + 8) == a2)
        WebCore::InspectorDOMAgent::setDocument(v4, v5);
    }
  }
  result = *(_QWORD *)(a1 + 152);
  if (result)
    return WebCore::PageDOMDebuggerAgent::frameDocumentUpdated(result, a2);
  return result;
}

uint64_t WebCore::InspectorInstrumentation::loaderDetachedFromFrameImpl(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(result + 200);
  if (v2)
  {
    v3 = a2;
    return WTF::HashMap<WebCore::DocumentLoader *,WTF::String,WTF::DefaultHash<WebCore::DocumentLoader *>,WTF::HashTraits<WebCore::DocumentLoader *>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::remove((uint64_t *)(v2 + 120), (WTF::StringImpl *)&v3);
  }
  return result;
}

WTF::StringImpl *WebCore::InspectorInstrumentation::frameStartedLoadingImpl(uint64_t a1, WebCore::Frame *a2)
{
  Inspector::InspectorDebuggerAgent *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *result;
  Inspector::PageFrontendDispatcher *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  char v12;

  if (*(WebCore::Frame **)(*((_QWORD *)a2 + 16) + 8) == a2)
  {
    v4 = *(Inspector::InspectorDebuggerAgent **)(a1 + 128);
    if (v4)
    {
      if (Inspector::InspectorDebuggerAgent::isPaused(*(Inspector::InspectorDebuggerAgent **)(a1 + 128)))
      {
        Inspector::InspectorDebuggerAgent::setSuppressAllPauses(v4);
        Inspector::InspectorDebuggerAgent::resume(v4);
        if (v12)
        {
          v6 = v11;
          v11 = 0;
          if (v6)
          {
            if (*(_DWORD *)v6 == 2)
              WTF::StringImpl::destroy(v6, v5);
            else
              *(_DWORD *)v6 -= 2;
          }
        }
      }
    }
    v7 = *(_QWORD *)(a1 + 216);
    if (v7)
      WebCore::InspectorTimelineAgent::mainFrameStartedLoading(v7);
  }
  result = *(WTF::StringImpl **)(a1 + 200);
  if (result)
  {
    v9 = (Inspector::PageFrontendDispatcher *)*((_QWORD *)result + 5);
    WebCore::InspectorPageAgent::frameId((unsigned int *)result, a2, &v11);
    Inspector::PageFrontendDispatcher::frameStartedLoading(v9, (const WTF::String *)&v11);
    result = v11;
    v11 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebCore::InspectorInstrumentation::didCompleteRenderingFrameImpl(uint64_t result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  int *v4;
  int v5;

  v1 = *(_QWORD *)(result + 216);
  if (v1)
  {
    if (*(_BYTE *)(v1 + 108))
    {
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 24) + 64))(*(_QWORD *)(v1 + 24));
      if ((*(_WORD *)(result + 48) & 0x20) == 0)
      {
        v2 = *(_DWORD *)(v1 + 152) - 1;
        *(_DWORD *)(v1 + 152) = v2;
        if (!v2)
        {
          if (*(_BYTE *)(v1 + 156))
          {
            WebCore::InspectorTimelineAgent::didCompleteCurrentRecord(v1);
            *(_BYTE *)(v1 + 156) = 0;
            v3 = *(unsigned int *)(v1 + 132);
            if ((_DWORD)v3)
            {
              v4 = *(int **)(v1 + 120);
              while (1)
              {
                v5 = *v4++;
                if (v5 == 285)
                  break;
                if (!--v3)
                  return WebCore::InspectorTimelineAgent::didCompleteCurrentRecord(v1);
              }
              WebCore::InspectorTimelineAgent::captureScreenshot((WebCore::InspectorTimelineAgent *)v1);
            }
          }
          return WebCore::InspectorTimelineAgent::didCompleteCurrentRecord(v1);
        }
      }
    }
  }
  return result;
}

WTF::StringImpl *WebCore::InspectorInstrumentation::frameStoppedLoadingImpl(uint64_t a1, WebCore::Frame *a2)
{
  Inspector::InspectorDebuggerAgent *v4;
  WTF::StringImpl *result;
  Inspector::PageFrontendDispatcher *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  if (*(WebCore::Frame **)(*((_QWORD *)a2 + 16) + 8) == a2)
  {
    v4 = *(Inspector::InspectorDebuggerAgent **)(a1 + 128);
    if (v4)
      Inspector::InspectorDebuggerAgent::setSuppressAllPauses(v4);
  }
  result = *(WTF::StringImpl **)(a1 + 200);
  if (result)
  {
    v6 = (Inspector::PageFrontendDispatcher *)*((_QWORD *)result + 5);
    WebCore::InspectorPageAgent::frameId((unsigned int *)result, a2, &v8);
    Inspector::PageFrontendDispatcher::frameStoppedLoading(v6, (const WTF::String *)&v8);
    result = v8;
    v8 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebCore::InspectorInstrumentation::frameScheduledNavigationImpl(uint64_t a1, WebCore::Frame *a2, double a3)
{
  WTF::StringImpl *result;
  Inspector::PageFrontendDispatcher *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  result = *(WTF::StringImpl **)(a1 + 200);
  if (result)
  {
    v5 = (Inspector::PageFrontendDispatcher *)*((_QWORD *)result + 5);
    WebCore::InspectorPageAgent::frameId((unsigned int *)result, a2, &v7);
    Inspector::PageFrontendDispatcher::frameScheduledNavigation(v5, (const WTF::String *)&v7, a3);
    result = v7;
    v7 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebCore::InspectorInstrumentation::frameClearedScheduledNavigationImpl(uint64_t a1, WebCore::Frame *a2)
{
  WTF::StringImpl *result;
  Inspector::PageFrontendDispatcher *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  result = *(WTF::StringImpl **)(a1 + 200);
  if (result)
  {
    v3 = (Inspector::PageFrontendDispatcher *)*((_QWORD *)result + 5);
    WebCore::InspectorPageAgent::frameId((unsigned int *)result, a2, &v5);
    Inspector::PageFrontendDispatcher::frameClearedScheduledNavigation(v3, (const WTF::String *)&v5);
    result = v5;
    v5 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebCore::InspectorInstrumentation::willDestroyCachedResourceImpl(WTF::StringImpl *this, WebCore::CachedResource *a2)
{
  WebCore::CachedResource *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

    return this;
  v2 = this;
  {
    v4 = *(unsigned int *)(v3 - 4);
    v5 = v3 + 8 * v4;
    if (*(_DWORD *)(v3 - 12))
    {
      if ((_DWORD)v4)
      {
        v7 = 8 * v4;
        while ((unint64_t)(*(_QWORD *)v6 + 1) <= 1)
        {
          v6 += 8;
          v7 -= 8;
          if (!v7)
          {
            v6 = v5;
            break;
          }
        }
      }
      if (v3)
        goto LABEL_10;
      goto LABEL_14;
    }
    v6 = v3 + 8 * v4;
  }
  else
  {
    v6 = 0;
    v4 = 0;
  }
  v5 = v3 + 8 * v4;
  if (v3)
  {
LABEL_10:
    v8 = v3 + 8 * *(unsigned int *)(v3 - 4);
    goto LABEL_15;
  }
LABEL_14:
  v8 = 0;
LABEL_15:
  while (v6 != v8)
  {
    this = *(WTF::StringImpl **)(*(_QWORD *)v6 + 192);
    if (this)
      this = WebCore::InspectorNetworkAgent::willDestroyCachedResource(this, v2);
    v9 = v6 + 8;
    v6 = v5;
    if (v9 != v5)
    {
      v6 = v9;
      while ((unint64_t)(*(_QWORD *)v6 + 1) <= 1)
      {
        v6 += 8;
        if (v6 == v5)
        {
          v6 = v5;
          break;
        }
      }
    }
  }
  return this;
}

WebCore::InspectorNetworkAgent *WebCore::InspectorInstrumentation::willInterceptImpl(uint64_t a1, const WebCore::ResourceRequest *a2)
{
  WebCore::InspectorNetworkAgent *result;

  result = *(WebCore::InspectorNetworkAgent **)(a1 + 192);
  if (result)
    return (WebCore::InspectorNetworkAgent *)WebCore::InspectorNetworkAgent::willIntercept(result, a2);
  return result;
}

uint64_t *std::unique_ptr<Inspector::ConsoleMessage>::~unique_ptr[abi:sn180100](uint64_t *a1)
{
  uint64_t v2;
  WTF *v3;
  void *v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = (WTF *)MEMORY[0x19AEA5F58]();
    WTF::fastFree(v3, v4);
  }
  return a1;
}

WTF::StringImpl *WebCore::InspectorInstrumentation::consoleTimeStampImpl(WTF::StringImpl *result, WebCore::Frame *a2, Inspector::ScriptArguments **a3)
{
  uint64_t v3;
  WTF::StringImpl *v5;
  _DWORD *v6;
  WTF::StringImpl *v7;
  _DWORD *v8;

  v3 = *((_QWORD *)result + 29);
  if (v3)
  {
    v7 = 0;
    Inspector::ScriptArguments::getFirstArgumentAsString(*a3, (WTF::String *)&v7);
    WebCore::TimelineRecordFactory::createTimeStampData((WebCore::TimelineRecordFactory *)&v7, (uint64_t *)&v8);
    WebCore::InspectorTimelineAgent::appendRecord(v3, &v8, 0xCu, 1, a2, 0, 0);
    v6 = v8;
    v8 = 0;
    if (v6)
    {
      if (*v6 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v6;
    }
    result = v7;
    v7 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebCore::InspectorInstrumentation::performanceMarkImpl(uint64_t a1, WebCore::TimelineRecordFactory *a2, uint64_t a3, char a4, WebCore::Frame *a5)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 232);
  if (result)
    return WebCore::InspectorTimelineAgent::didPerformanceMark(result, a2, a3, a4, a5);
  return result;
}

BOOL WebCore::InspectorInstrumentation::shouldWaitForDebuggerOnStartImpl(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 72);
  return v1 && *(_BYTE *)(v1 + 88) != 0;
}

uint64_t WebCore::InspectorInstrumentation::workerStartedImpl(uint64_t a1, WebCore::WorkerInspectorProxy *a2)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 72);
  if (result)
    return WebCore::InspectorWorkerAgent::workerStarted(result, a2);
  return result;
}

void WebCore::InspectorInstrumentation::workerTerminatedImpl(uint64_t a1, WebCore::WorkerInspectorProxy *a2)
{
  WebCore::InspectorWorkerAgent *v2;

  v2 = *(WebCore::InspectorWorkerAgent **)(a1 + 72);
  if (v2)
    WebCore::InspectorWorkerAgent::workerTerminated(v2, a2);
}

uint64_t WebCore::InspectorInstrumentation::didChangeCanvasSizeImpl(uint64_t a1, WebCore::CanvasRenderingContext *a2)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 96);
  if (result)
    return WebCore::InspectorCanvasAgent::didChangeCanvasSize(result, a2);
  return result;
}

uint64_t WebCore::InspectorInstrumentation::didChangeCanvasMemoryImpl(uint64_t a1, WebCore::CanvasRenderingContext *a2)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 96);
  if (result)
    return WebCore::InspectorCanvasAgent::didChangeCanvasMemory(result, a2);
  return result;
}

uint64_t WebCore::InspectorInstrumentation::didFinishRecordingCanvasFrameImpl(uint64_t a1, WebCore::CanvasRenderingContext *a2, int a3)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 96);
  if (result)
    return WebCore::InspectorCanvasAgent::didFinishRecordingCanvasFrame(result, a2, a3);
  return result;
}

Inspector::IdentifiersFactory *WebCore::InspectorInstrumentation::willApplyKeyframeEffectImpl(uint64_t a1, const WebCore::Styleable *a2, WebCore::KeyframeEffect *a3, const WebCore::ComputedEffectTiming *a4)
{
  Inspector::IdentifiersFactory *result;

  result = *(Inspector::IdentifiersFactory **)(a1 + 224);
  if (result)
    return WebCore::InspectorAnimationAgent::willApplyKeyframeEffect(result, a2, a3, a4);
  return result;
}

uint64_t WebCore::InspectorInstrumentation::didSetWebAnimationEffectImpl(uint64_t result, WebCore::StyleOriginatedAnimation *a2)
{
  WebCore::InspectorAnimationAgent *v3;

  v3 = *(WebCore::InspectorAnimationAgent **)(result + 80);
  if (v3 || (v3 = *(WebCore::InspectorAnimationAgent **)(result + 224)) != 0)
  {
    if ((*(unsigned int (**)(WebCore::StyleOriginatedAnimation *))(*(_QWORD *)a2 + 104))(a2))
      WebCore::InspectorAnimationAgent::stopTrackingStyleOriginatedAnimation(v3, a2);
    WebCore::InspectorAnimationAgent::didChangeWebAnimationEffectTiming((uint64_t)v3, (WebCore::AnimationEffect **)a2);
    return WebCore::InspectorAnimationAgent::didChangeWebAnimationEffectTarget((uint64_t)v3, a2);
  }
  return result;
}

uint64_t WebCore::InspectorInstrumentation::didChangeWebAnimationEffectTimingImpl(uint64_t a1, WebCore::AnimationEffect **a2)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 80);
  if (result)
    return WebCore::InspectorAnimationAgent::didChangeWebAnimationEffectTiming(result, a2);
  return result;
}

double WebCore::InspectorInstrumentation::didCreateWebAnimationImpl(uint64_t a1, WebCore::WebAnimation *a2)
{
  WebCore::InspectorAnimationAgent *v2;
  double result;

  v2 = *(WebCore::InspectorAnimationAgent **)(a1 + 80);
  if (v2)
    return WebCore::InspectorAnimationAgent::didCreateWebAnimation(v2, a2);
  return result;
}

WTF::StringImpl *WebCore::InspectorInstrumentation::didHandleMemoryPressureImpl(WTF::StringImpl *result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  Inspector::MemoryFrontendDispatcher *v4;
  double *v5;
  double v6;
  double v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;

  v2 = *((_QWORD *)result + 23);
  if (v2)
  {
    if (a2)
      v3 = 303;
    else
      v3 = 304;
    v4 = *(Inspector::MemoryFrontendDispatcher **)(v2 + 40);
    v5 = (double *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 24) + 56))(*(_QWORD *)(v2 + 24));
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v5);
    v7 = v5[1] + v6 - v5[2];
    Inspector::Protocol::Helpers::getEnumConstantValue((Inspector::Protocol::Helpers *)v3);
    Inspector::MemoryFrontendDispatcher::memoryPressure(v4, v7, (const WTF::String *)&v9);
    result = v9;
    v9 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebCore::InspectorInstrumentation::didRequestAnimationFrameImpl(uint64_t result, WebCore::TimelineRecordFactory *this, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::Frame *v8;
  uint64_t v9;

  v5 = result;
  if (*(_QWORD *)(result + 128))
  {
    result = Inspector::InspectorDebuggerAgent::breakpointsActive(*(Inspector::InspectorDebuggerAgent **)(result + 128));
    if ((_DWORD)result)
    {
      result = WebCore::ScriptExecutionContext::globalObject((WebCore::ScriptExecutionContext *)(a3 + 192));
      if (result)
        result = Inspector::InspectorDebuggerAgent::didScheduleAsyncCall();
    }
  }
  v6 = *(_QWORD *)(v5 + 232);
  if (v6)
  {
    v7 = *(_QWORD *)(a3 + 528);
    if (v7)
      v8 = *(WebCore::Frame **)(v7 + 8);
    else
      v8 = 0;
    WebCore::TimelineRecordFactory::createAnimationFrameData(this, &v9);
    WebCore::InspectorTimelineAgent::appendRecord(v6, &v9, 0x12u, 1, v8, 0, 0);
    result = v9;
    v9 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 1)
        return WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)result;
    }
  }
  return result;
}

_DWORD *WebCore::InspectorInstrumentation::didCancelAnimationFrameImpl(uint64_t a1, WebCore::TimelineRecordFactory *this, uint64_t a3)
{
  _DWORD *result;
  uint64_t v7;
  uint64_t v8;
  WebCore::Frame *v9;
  _DWORD *v10;

  result = *(_DWORD **)(a1 + 128);
  if (result)
    result = (_DWORD *)Inspector::InspectorDebuggerAgent::didCancelAsyncCall();
  v7 = *(_QWORD *)(a1 + 232);
  if (v7)
  {
    v8 = *(_QWORD *)(a3 + 528);
    if (v8)
      v9 = *(WebCore::Frame **)(v8 + 8);
    else
      v9 = 0;
    WebCore::TimelineRecordFactory::createAnimationFrameData(this, (uint64_t *)&v10);
    WebCore::InspectorTimelineAgent::appendRecord(v7, &v10, 0x13u, 1, v9, 0, 0);
    result = v10;
    v10 = 0;
    if (result)
    {
      if (*result == 1)
        return (_DWORD *)WTF::JSONImpl::Value::operator delete();
      else
        --*result;
    }
  }
  return result;
}

WTF::JSONImpl::Object *WebCore::InspectorInstrumentation::willFireAnimationFrameImpl(_QWORD *a1, WebCore::TimelineRecordFactory *this, uint64_t a3)
{
  WTF::JSONImpl::Object *result;
  uint64_t v7;
  _DWORD *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::Frame *v12;
  WTF::JSONImpl::Object *v13;

  result = (WTF::JSONImpl::Object *)a1[16];
  if (result)
    result = (WTF::JSONImpl::Object *)Inspector::InspectorDebuggerAgent::willDispatchAsyncCall();
  v7 = a1[19];
  if (v7)
  {
    result = (WTF::JSONImpl::Object *)Inspector::InspectorDebuggerAgent::breakpointsActive(*(Inspector::InspectorDebuggerAgent **)(v7 + 48));
    if ((_DWORD)result)
    {
      v8 = *(_DWORD **)(v7 + 192);
      if (v8)
      {
        ++*v8;
        Inspector::InspectorDebuggerAgent::schedulePauseForSpecialBreakpoint();
        v13 = 0;
        result = (WTF::JSONImpl::Object *)WTF::RefCounted<JSC::Breakpoint>::deref((uint64_t)v8, v9);
      }
    }
  }
  v10 = a1[29];
  if (v10)
  {
    v11 = *(_QWORD *)(a3 + 528);
    if (v11)
      v12 = *(WebCore::Frame **)(v11 + 8);
    else
      v12 = 0;
    WebCore::TimelineRecordFactory::createAnimationFrameData(this, (uint64_t *)&v13);
    WebCore::InspectorTimelineAgent::pushCurrentRecord(v10, &v13, 20, 0, v12, 0, 0);
    result = v13;
    v13 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 1)
        return (WTF::JSONImpl::Object *)WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)result;
    }
  }
  return result;
}

uint64_t WebCore::InspectorInstrumentation::didFireAnimationFrameImpl(_QWORD *a1)
{
  uint64_t v2;
  _DWORD *v3;
  WTF::StringImpl *v4;
  uint64_t result;

  if (a1[16])
    Inspector::InspectorDebuggerAgent::didDispatchAsyncCall();
  v2 = a1[19];
  if (v2)
  {
    if (Inspector::InspectorDebuggerAgent::breakpointsActive(*(Inspector::InspectorDebuggerAgent **)(v2 + 48)))
    {
      v3 = *(_DWORD **)(v2 + 192);
      if (v3)
      {
        ++*v3;
        Inspector::InspectorDebuggerAgent::cancelPauseForSpecialBreakpoint();
        WTF::RefCounted<JSC::Breakpoint>::deref((uint64_t)v3, v4);
      }
    }
  }
  result = a1[29];
  if (result)
    return WebCore::InspectorTimelineAgent::didCompleteCurrentRecord(result);
  return result;
}

WTF::JSONImpl::Object *WebCore::InspectorInstrumentation::willFireObserverCallbackImpl(WTF::JSONImpl::Object *result, WebCore::TimelineRecordFactory *this, uint64_t a3)
{
  uint64_t v3;
  int v5;
  uint64_t v6;
  WebCore::Frame *v7;
  WTF::JSONImpl::Object *v8;

  v3 = *((_QWORD *)result + 29);
  if (!v3)
    return result;
  if (!*(_BYTE *)(a3 + 274))
  {
    v5 = *(_DWORD *)(a3 - 168);
    *(_DWORD *)(a3 - 168) = v5 + 2;
    v6 = *(_QWORD *)(a3 + 336);
    if (v6)
    {
      v7 = *(WebCore::Frame **)(v6 + 8);
      if (v5)
      {
LABEL_5:
        *(_DWORD *)(a3 - 168) = v5;
        goto LABEL_6;
      }
    }
    else
    {
      v7 = 0;
      if (v5)
        goto LABEL_5;
    }
    if ((*(_WORD *)(a3 - 162) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)(a3 - 192), this);
    goto LABEL_6;
  }
  v7 = 0;
LABEL_6:
  WebCore::TimelineRecordFactory::createObserverCallbackData(this, (uint64_t *)&v8);
  WebCore::InspectorTimelineAgent::pushCurrentRecord(v3, &v8, 21, 0, v7, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF::JSONImpl::Object *)WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)result;
  }
  return result;
}

uint64_t WebCore::InspectorInstrumentation::didFireObserverCallbackImpl(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 232);
  if (result)
    return WebCore::InspectorTimelineAgent::didCompleteCurrentRecord(result);
  return result;
}

uint64_t WebCore::InspectorInstrumentation::instrumentingAgents(WebCore::InspectorInstrumentation *this, const WebCore::RenderObject *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8)
                                         + 528)
                             + 8)
                 + 24);
  if (v2 && (v3 = *(_QWORD *)(v2 + 8)) != 0)
    return *(_QWORD *)(*(_QWORD *)(v3 + 80) + 8);
  else
    return 0;
}

uint64_t WebCore::InspectorInstrumentation::layerTreeDidChangeImpl(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 176);
  if (v1)
  {
    if (!*(_BYTE *)(v1 + 96))
    {
      *(_BYTE *)(v1 + 96) = 1;
      return Inspector::LayerTreeFrontendDispatcher::layerTreeDidChange(*(Inspector::LayerTreeFrontendDispatcher **)(v1 + 40));
    }
  }
  return result;
}

WTF::StringImpl *WebCore::InspectorInstrumentation::renderLayerDestroyedImpl(WTF::StringImpl *result, uint64_t a2)
{
  uint64_t v2;
  const WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;

  v2 = *((_QWORD *)result + 22);
  if (v2)
  {
    v6 = a2;
    result = (WTF::StringImpl *)WTF::HashMap<WebCore::RenderLayer const*,WTF::String,WTF::DefaultHash<WebCore::RenderLayer const*>,WTF::HashTraits<WebCore::RenderLayer const*>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::take((uint64_t *)(v2 + 56), &v6, &v5);
    if (v5)
    {
      WTF::HashMap<WTF::String,WebCore::RenderLayer const*,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::RenderLayer const*>,WTF::HashTableTraits>::remove((uint64_t *)(v2 + 64), &v5, v3);
      result = v5;
      v5 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t WebCore::InspectorInstrumentation::instrumentingAgents(WebCore::InspectorInstrumentation *this, WebCore::Page *a2)
{
  return *(_QWORD *)(*((_QWORD *)this + 10) + 8);
}

uint64_t WebCore::InspectorInstrumentation::instrumentingAgents(WebCore::InspectorInstrumentation *this, WebCore::ScriptExecutionContext *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WebCore::Page *v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  WTF *v15;
  void *v16;
  WTF *v17;
  uint64_t v18;
  WTF *v19;
  unsigned __int8 *v20;
  WTF *v21;

  v3 = *((unsigned __int8 *)this + 274);
  if (*((_BYTE *)this + 274))
    goto LABEL_2;
  v20 = (unsigned __int8 *)this;
  v21 = (WTF *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)this - 192);
  if (!v21)
    goto LABEL_22;
  do
    v6 = __ldaxr((unsigned int *)v21);
  while (__stlxr(v6 + 1, (unsigned int *)v21));
  v7 = *((_QWORD *)v21 + 1);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 528);
    if (v8
      && (v9 = *(_QWORD *)(v8 + 8)) != 0
      && (v10 = *(_QWORD *)(v9 + 24)) != 0
      && (v11 = *(WebCore::Page **)(v10 + 8)) != 0)
    {
      v12 = (*(_DWORD *)v11)++;
      v2 = *(_QWORD *)(*((_QWORD *)v11 + 10) + 8);
      if (v12)
      {
        *(_DWORD *)v11 = v12;
      }
      else
      {
        WebCore::Page::~Page(v11);
        WTF::fastFree(v15, v16);
      }
    }
    else
    {
      v2 = 0;
    }
  }
  do
  {
    v13 = __ldaxr((unsigned int *)v21);
    v14 = v13 - 1;
  }
  while (__stlxr(v14, (unsigned int *)v21));
  if (v14)
  {
    if (v7)
      return v2;
    goto LABEL_22;
  }
  v17 = v21;
  atomic_store(1u, (unsigned int *)v21);
  v18 = *((unsigned int *)v17 + 7);
  if ((_DWORD)v18)
    WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v21 + 2), (WTF::StringImpl *)(*((_QWORD *)v21 + 2) + 32 * v18));
  v19 = (WTF *)*((_QWORD *)v21 + 2);
  if (v19)
  {
    *((_QWORD *)v21 + 2) = 0;
    *((_DWORD *)v21 + 6) = 0;
    WTF::fastFree(v19, a2);
  }
  WTF::fastFree(v21, a2);
  if (!v7)
  {
LABEL_22:
    this = (WebCore::InspectorInstrumentation *)v20;
    v3 = v20[274];
LABEL_2:
    if (v3 == 1)
    {
      v4 = *((_DWORD *)this + 78);
      *((_DWORD *)this + 78) = v4 + 1;
      v2 = *(_QWORD *)(*((_QWORD *)this + 48) + 8);
      if (v4)
        *((_DWORD *)this + 78) = v4;
      else
        (*(void (**)(WebCore::InspectorInstrumentation *, WebCore::ScriptExecutionContext *))(*(_QWORD *)this + 40))(this, a2);
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t WebCore::InspectorFrontendClientLocal::isRemote(WebCore::InspectorFrontendClientLocal *this)
{
  return 0;
}

void WebCore::InspectorFrontendClientLocal::backendCommandsURL(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::InspectorFrontendClientLocal::canSave()
{
  return 0;
}

uint64_t WebCore::InspectorFrontendClientLocal::canLoad(WebCore::InspectorFrontendClientLocal *this)
{
  return 0;
}

uint64_t WebCore::InspectorFrontendClientLocal::load(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 16))(v3, MEMORY[0x1E0CBF6F0]);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

uint64_t WebCore::InspectorFrontendClientLocal::canPickColorFromScreen(WebCore::InspectorFrontendClientLocal *this)
{
  return 0;
}

unsigned int *WebCore::InspectorFrontendClientLocal::pickColorFromScreen(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *result;
  void *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;

  LOBYTE(v7) = 0;
  v8 = 0;
  v2 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 16))(v2, &v7);
  result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (v8 && (v7 & 0x8000000000000) != 0)
  {
    result = (unsigned int *)(v7 & 0xFFFFFFFFFFFFLL);
    do
    {
      v5 = __ldaxr(result);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, result));
    if (!v6)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v4);
    }
  }
  return result;
}

uint64_t WebCore::InspectorFrontendClient::supportsDiagnosticLogging(WebCore::InspectorFrontendClient *this)
{
  return 0;
}

uint64_t WebCore::InspectorFrontendClient::diagnosticLoggingAvailable(WebCore::InspectorFrontendClient *this)
{
  return 0;
}

uint64_t WebCore::InspectorFrontendClientLocal::frontendAPIDispatcher(WebCore::InspectorFrontendClientLocal *this)
{
  return *((_QWORD *)this + 8);
}

uint64_t std::make_unique[abi:sn180100]<WebCore::WebInjectedScriptManager,WebCore::InspectorController &,WTF::Ref<WebCore::WebInjectedScriptHost,WTF::RawPtrTraits<WebCore::WebInjectedScriptHost>,WTF::DefaultRefDerefTraits<WebCore::WebInjectedScriptHost>>>(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  _DWORD *v5;
  _QWORD *v6;
  uint64_t result;
  _DWORD *v8;

  WTF::fastMalloc((WTF *)0x38);
  v5 = (_DWORD *)*a3;
  *a3 = 0;
  v8 = v5;
  v6 = (_QWORD *)Inspector::InjectedScriptManager::InjectedScriptManager();
  *v6 = off_1E33EEB98;
  v6[6] = 0;
  *a1 = v6;
  result = (uint64_t)v8;
  if (v8)
  {
    if (v8[2] == 1)
      return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNSt12experimental15fundamentals_v38expectedIN3JSC7JSValueEN7WebCore16ExceptionDetailsEEENSD_30InspectorFrontendAPIDispatcher15EvaluationErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSF_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E33EE610[v3])(&v5, a2);
  *(_DWORD *)(a2 + 32) = -1;
  return result;
}

WTF::StringImpl *WTF::Deque<WTF::String,0ul>::clear(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;
  uint64_t v3;
  unint64_t v4;
  WTF *v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl **v10;
  uint64_t v11;

  v2 = result;
  v3 = *(_QWORD *)result;
  v4 = *((_QWORD *)result + 1);
  v5 = (WTF *)*((_QWORD *)result + 2);
  if (*(_QWORD *)result <= v4)
  {
    if (*(_QWORD *)result == v4)
      goto LABEL_27;
    v7 = (WTF::StringImpl **)((char *)v5 + 8 * v3);
    v8 = 8 * v4 - 8 * v3;
    do
    {
      result = *v7;
      *v7 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      ++v7;
      v8 -= 8;
    }
    while (v8);
  }
  else
  {
    if (v4)
    {
      v6 = 8 * v4;
      do
      {
        result = *(WTF::StringImpl **)v5;
        *(_QWORD *)v5 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
          else
            *(_DWORD *)result -= 2;
        }
        v5 = (WTF *)((char *)v5 + 8);
        v6 -= 8;
      }
      while (v6);
      v5 = (WTF *)*((_QWORD *)v2 + 2);
      v3 = *(_QWORD *)v2;
    }
    v9 = *((unsigned int *)v2 + 6);
    if (v3 != v9)
    {
      v10 = (WTF::StringImpl **)((char *)v5 + 8 * v3);
      v11 = 8 * v9 - 8 * v3;
      do
      {
        result = *v10;
        *v10 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
          else
            *(_DWORD *)result -= 2;
        }
        ++v10;
        v11 -= 8;
      }
      while (v11);
    }
  }
  v5 = (WTF *)*((_QWORD *)v2 + 2);
LABEL_27:
  *(_QWORD *)v2 = 0;
  *((_QWORD *)v2 + 1) = 0;
  if (v5)
  {
    *((_QWORD *)v2 + 2) = 0;
    *((_DWORD *)v2 + 6) = 0;
    return (WTF::StringImpl *)WTF::fastFree(v5, a2);
  }
  return result;
}

uint64_t WTF::Deque<WTF::String,0ul>::append<WTF::String const&>(uint64_t result, _DWORD **a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  int v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;

  v3 = result;
  v4 = *(_QWORD *)(result + 8);
  if (*(_QWORD *)result)
  {
    if (v4 + 1 != *(_QWORD *)result)
      goto LABEL_15;
    LODWORD(v5) = *(_DWORD *)(result + 24);
  }
  else
  {
    v5 = *(unsigned int *)(result + 24);
    if (v4)
    {
      if (v4 != v5 - 1)
        goto LABEL_15;
    }
    else if ((_DWORD)v5)
    {
      goto LABEL_15;
    }
  }
  v6 = v5;
  v7 = ((unint64_t)v5 >> 2) + v5;
  if (v7 <= 0xF)
    v7 = 15;
  if (v7 >= 0x1FFFFFFF)
  {
    __break(0xC471u);
    return result;
  }
  v8 = *(char **)(result + 16);
  v9 = v7 + 1;
  v10 = (char *)WTF::fastMalloc((WTF *)(8 * (v7 + 1)));
  *(_DWORD *)(v3 + 24) = v9;
  *(_QWORD *)(v3 + 16) = v10;
  v11 = *(_QWORD *)(v3 + 8);
  if (*(_QWORD *)v3 <= v11)
  {
    result = (uint64_t)memcpy(&v10[8 * *(_QWORD *)v3], &v8[8 * *(_QWORD *)v3], 8 * v11 - 8 * *(_QWORD *)v3);
  }
  else
  {
    memcpy(v10, v8, 8 * v11);
    v12 = *(_QWORD *)v3 - v6 + *(unsigned int *)(v3 + 24);
    result = (uint64_t)memcpy((void *)(*(_QWORD *)(v3 + 16) + 8 * v12), &v8[8 * *(_QWORD *)v3], 8 * v6 - 8 * *(_QWORD *)v3);
    *(_QWORD *)v3 = v12;
  }
  if (v8)
  {
    if (*(char **)(v3 + 16) == v8)
    {
      *(_QWORD *)(v3 + 16) = 0;
      *(_DWORD *)(v3 + 24) = 0;
    }
    result = WTF::fastFree((WTF *)v8, v13);
  }
LABEL_15:
  v14 = *(_QWORD *)(v3 + 8);
  v15 = *(_QWORD *)(v3 + 16);
  v16 = *a2;
  if (*a2)
    *v16 += 2;
  *(_QWORD *)(v15 + 8 * v14) = v16;
  if (v14 == *(unsigned int *)(v3 + 24) - 1)
    v17 = 0;
  else
    v17 = v14 + 1;
  *(_QWORD *)(v3 + 8) = v17;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::InspectorBackendDispatchTask::scheduleOneShot(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  unint64_t *v3;
  void *v5;

  *a1 = &off_1E33EE660;
  v3 = (unint64_t *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WTF::Deque<WTF::String,0ul>::~Deque(v3 + 2, a2);
      WTF::fastFree((WTF *)v3, v5);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::InspectorBackendDispatchTask::scheduleOneShot(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  unint64_t *v3;
  void *v5;

  *(_QWORD *)this = &off_1E33EE660;
  v3 = (unint64_t *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WTF::Deque<WTF::String,0ul>::~Deque(v3 + 2, a2);
      WTF::fastFree((WTF *)v3, v5);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::InspectorBackendDispatchTask::scheduleOneShot(void)::{lambda(void)#1},void>::call(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  v2 = *((_QWORD *)result + 1);
  *(_BYTE *)(v2 + 48) = 0;
  v3 = *(_QWORD *)(v2 + 8);
  if (v3)
  {
    v4 = *(_QWORD *)(v2 + 16);
    if (v4 != *(_QWORD *)(v2 + 24))
    {
      v5 = *(_QWORD *)(v2 + 32);
      v6 = *(WTF::StringImpl **)(v5 + 8 * v4);
      *(_QWORD *)(v5 + 8 * v4) = 0;
      v12 = v6;
      v7 = *(_QWORD *)(v2 + 32);
      v8 = *(WTF::StringImpl **)(v7 + 8 * v4);
      *(_QWORD *)(v7 + 8 * v4) = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
        {
          WTF::StringImpl::destroy(v8, a2);
          v4 = *(_QWORD *)(v2 + 16);
        }
        else
        {
          *(_DWORD *)v8 -= 2;
        }
      }
      if (v4 == *(unsigned int *)(v2 + 40) - 1)
        v9 = 0;
      else
        v9 = v4 + 1;
      *(_QWORD *)(v2 + 16) = v9;
      Inspector::BackendDispatcher::dispatch(*(Inspector::BackendDispatcher **)(v3 + 32), (const WTF::String *)&v12);
      result = v12;
      v12 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
        else
          *(_DWORD *)result -= 2;
      }
      if (*(_QWORD *)(v2 + 16) != *(_QWORD *)(v2 + 24) && *(_QWORD *)(v2 + 8) && !*(_BYTE *)(v2 + 48))
      {
        *(_BYTE *)(v2 + 48) = 1;
        WTF::RunLoop::current(result);
        ++*(_DWORD *)v2;
        v11 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
        *(_QWORD *)v11 = &off_1E33EE660;
        *((_QWORD *)v11 + 1) = v2;
        *((_QWORD *)v11 + 2) = v2;
        v12 = v11;
        WTF::RunLoop::dispatch();
        result = v12;
        v12 = 0;
        if (result)
          return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
      }
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t result;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int v22;
  unsigned int v23;
  WTF::StringImpl **v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  unsigned int v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  char v40;
  char v41;
  char v42;
  char v43;

  v3 = *a1;
  if (*a1)
  {
    v4 = *(_DWORD *)(v3 - 4);
    v5 = *(_DWORD *)(v3 - 12);
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  result = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  if (a2)
  {
    v8 = a2;
    v9 = result + 16;
    do
    {
      *(_QWORD *)v9 = 0;
      *(_QWORD *)(v9 + 8) = 0;
      *(_DWORD *)(v9 + 16) = 0;
      v9 += 24;
      --v8;
    }
    while (v8);
  }
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v5;
  if (v4)
  {
    v10 = 0;
    v11 = v4;
    v38 = v4;
    while (1)
    {
      v12 = (WTF::StringImpl **)(v3 + 24 * v10);
      v13 = *v12;
      if (*v12 != (WTF::StringImpl *)-1)
      {
        if (v13)
        {
          v18 = *a1;
          if (*a1)
            v19 = *(_DWORD *)(v18 - 8);
          else
            v19 = 0;
          v20 = *((_DWORD *)v13 + 4);
          if (v20 < 0x100)
            v21 = WTF::StringImpl::hashSlowCase(v13);
          else
            v21 = v20 >> 8;
          v22 = 0;
          do
          {
            v23 = v21 & v19;
            v24 = (WTF::StringImpl **)(v18 + 24 * (v21 & v19));
            v21 = ++v22 + (v21 & v19);
          }
          while (*v24);
          v25 = v18 + 24 * v23;
          v28 = *(_DWORD *)(v25 + 16);
          v27 = (_DWORD *)(v25 + 16);
          v26 = v28;
          if (v28 == -1)
          {
            *v24 = 0;
          }
          else
          {
            ((void (*)(char *, uint64_t))off_1E33EE678[v26])(&v41, v18 + 24 * v23 + 8);
            v30 = *v24;
            *v27 = -1;
            *v24 = 0;
            if (v30)
            {
              if (*(_DWORD *)v30 == 2)
                WTF::StringImpl::destroy(v30, v29);
              else
                *(_DWORD *)v30 -= 2;
            }
          }
          v31 = *v12;
          *v12 = 0;
          v32 = v18 + 24 * v23;
          *(_BYTE *)(v32 + 8) = 0;
          v7 = (WTF::StringImpl *)(v32 + 8);
          *v24 = v31;
          *v27 = -1;
          v33 = v3 + 24 * v10;
          v36 = *(_DWORD *)(v33 + 16);
          v35 = (_DWORD *)(v33 + 16);
          v34 = v36;
          if (v36 != -1)
          {
            ((void (*)(char *, WTF::StringImpl *, uint64_t))off_1E33EE6C8[v34])(&v42, v7, v3 + 24 * v10 + 8);
            *v27 = v34;
            v37 = *v35;
            if ((_DWORD)v37 != -1)
              ((void (*)(char *, uint64_t))off_1E33EE678[v37])(&v43, v3 + 24 * v10 + 8);
          }
          *v35 = -1;
          v13 = *v12;
          *v12 = 0;
          v11 = v38;
          if (!v13)
            goto LABEL_35;
          if (*(_DWORD *)v13 == 2)
            goto LABEL_37;
          *(_DWORD *)v13 -= 2;
        }
        else
        {
          v14 = v3 + 24 * v10;
          v17 = *(_DWORD *)(v14 + 16);
          v16 = (_DWORD *)(v14 + 16);
          v15 = v17;
          if (v17 != -1)
          {
            ((void (*)(char *, uint64_t))off_1E33EE678[v15])(&v40, v3 + 24 * v10 + 8);
            v13 = *v12;
          }
          *v16 = -1;
          *v12 = 0;
          if (!v13)
            goto LABEL_35;
          if (*(_DWORD *)v13 == 2)
          {
LABEL_37:
            WTF::StringImpl::destroy(v13, v7);
            goto LABEL_35;
          }
          *(_DWORD *)v13 -= 2;
        }
      }
LABEL_35:
      if (++v10 == v11)
        return WTF::fastFree((WTF *)(v3 - 16), v7);
    }
  }
  if (v3)
    return WTF::fastFree((WTF *)(v3 - 16), v7);
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEyxbdEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSB_1EJS9_yxbdEEEEEEDcSD_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6StringEyxbdEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISA_LNS0_6_TraitE1EEEEEvOT_EUlRSG_OT0_E_JRNS0_6__baseILSE_1EJS9_yxbdEEEOSO_EEEDcSG_DpT0_(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5)
  {
    result = (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t))off_1E33EE678[v5])(&v8, v4);
LABEL_7:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 0;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = v6;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6StringEyxbdEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISA_LNS0_6_TraitE1EEEEEvOT_EUlRSG_OT0_E_JRNS0_6__baseILSE_1EJS9_yxbdEEEOSO_EEEDcSG_DpT0_(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E33EE678[v5])(&v6, v4);
  }
  *(_QWORD *)v4 = *a3;
  *(_DWORD *)(v4 + 8) = 1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6StringEyxbdEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISA_LNS0_6_TraitE1EEEEEvOT_EUlRSG_OT0_E_JRNS0_6__baseILSE_1EJS9_yxbdEEEOSO_EEEDcSG_DpT0_(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 2)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E33EE678[v5])(&v6, v4);
  }
  *(_QWORD *)v4 = *a3;
  *(_DWORD *)(v4 + 8) = 2;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6StringEyxbdEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISA_LNS0_6_TraitE1EEEEEvOT_EUlRSG_OT0_E_JRNS0_6__baseILSE_1EJS9_yxbdEEEOSO_EEEDcSG_DpT0_(uint64_t result, _BYTE *a2, _BYTE *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 3)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E33EE678[v5])(&v6, v4);
  }
  *(_BYTE *)v4 = *a3;
  *(_DWORD *)(v4 + 8) = 3;
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6StringEyxbdEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISA_LNS0_6_TraitE1EEEEEvOT_EUlRSG_OT0_E_JRNS0_6__baseILSE_1EJS9_yxbdEEEOSO_EEEDcSG_DpT0_(uint64_t *a1, _QWORD *a2, double *a3)
{
  uint64_t v4;
  uint64_t v5;
  double result;
  char v7;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 8);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 4)
    {
      result = *a3;
      *a2 = *(_QWORD *)a3;
      return result;
    }
    ((void (*)(char *, uint64_t))off_1E33EE678[v5])(&v7, v4);
  }
  result = *a3;
  *(double *)v4 = *a3;
  *(_DWORD *)(v4 + 8) = 4;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEyxbdEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JRNS0_6__baseILSE_1EJS9_yxbdEEEOSP_EEEDcSH_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEyxbdEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JRNS0_6__baseILSE_1EJS9_yxbdEEEOSP_EEEDcSH_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEyxbdEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JRNS0_6__baseILSE_1EJS9_yxbdEEEOSP_EEEDcSH_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEyxbdEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JRNS0_6__baseILSE_1EJS9_yxbdEEEOSP_EEEDcSH_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringEyxbdEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JRNS0_6__baseILSE_1EJS9_yxbdEEEOSP_EEEDcSH_DpT0_(uint64_t a1, _QWORD *a2, double *a3)
{
  double result;

  result = *a3;
  *a2 = *(_QWORD *)a3;
  return result;
}

void WebCore::UndoableStateMark::~UndoableStateMark(WebCore::UndoableStateMark *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E33EE390;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
}

{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E33EE390;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WTF::fastFree(this, a2);
}

void WebCore::UndoableStateMark::perform(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void WebCore::UndoableStateMark::undo(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void WebCore::UndoableStateMark::redo(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t WebCore::UndoableStateMark::isUndoableStateMark(WebCore::UndoableStateMark *this)
{
  return 1;
}

void Inspector::BackendDispatcher::~BackendDispatcher(Inspector::BackendDispatcher *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  uint64_t v15;

  v3 = *((unsigned int *)this + 9);
  if ((_DWORD)v3)
  {
    v12 = 16 * v3;
    v13 = (WTF::StringImpl **)(*((_QWORD *)this + 3) + 8);
    do
    {
      v14 = *v13;
      *v13 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, a2);
        else
          *(_DWORD *)v14 -= 2;
      }
      v13 += 2;
      v12 -= 16;
    }
    while (v12);
  }
  v4 = (WTF *)*((_QWORD *)this + 3);
  if (v4)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = *((_QWORD *)this + 2);
  if (v5)
  {
    v6 = *(unsigned int *)(v5 - 4);
    if ((_DWORD)v6)
    {
      v7 = (WTF::StringImpl **)*((_QWORD *)this + 2);
      do
      {
        v8 = *v7;
        if (*v7 != (WTF::StringImpl *)-1)
        {
          *v7 = 0;
          if (v8)
          {
            if (*(_DWORD *)v8 == 2)
              WTF::StringImpl::destroy(v8, a2);
            else
              *(_DWORD *)v8 -= 2;
          }
        }
        v7 += 2;
        --v6;
      }
      while (v6);
    }
    WTF::fastFree((WTF *)(v5 - 16), a2);
  }
  v9 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      v10 = *(WTF **)(v9 + 8);
      if ((WTF *)(v9 + 24) != v10 && v10 != 0)
      {
        *(_QWORD *)(v9 + 8) = 0;
        *(_DWORD *)(v9 + 16) = 0;
        v15 = v9;
        WTF::fastFree(v10, a2);
        v9 = v15;
      }
      WTF::fastFree((WTF *)v9, a2);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::InspectorFrontendAPIDispatcher::suspend(WebCore::InspectorFrontendAPIDispatcher::UnsuspendSoon)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WebCore::InspectorFrontendAPIDispatcher *v3;
  WTF *v5;
  void *v6;

  v3 = (WebCore::InspectorFrontendAPIDispatcher *)a1[1];
  *a1 = &off_1E33EE750;
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::InspectorFrontendAPIDispatcher::~InspectorFrontendAPIDispatcher(v3, a2);
      WTF::fastFree(v5, v6);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::InspectorFrontendAPIDispatcher::suspend(WebCore::InspectorFrontendAPIDispatcher::UnsuspendSoon)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WebCore::InspectorFrontendAPIDispatcher *v3;
  WTF *v5;
  void *v6;

  v3 = (WebCore::InspectorFrontendAPIDispatcher *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33EE750;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::InspectorFrontendAPIDispatcher::~InspectorFrontendAPIDispatcher(v3, a2);
      WTF::fastFree(v5, v6);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::InspectorFrontendAPIDispatcher::suspend(WebCore::InspectorFrontendAPIDispatcher::UnsuspendSoon)::$_0,void>::call(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;

  result = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(result + 16);
  if (v2 && *(_QWORD *)(v2 + 8) && *(_BYTE *)(result + 49))
  {
    *(_BYTE *)(result + 49) = 0;
    if (*(_BYTE *)(result + 48))
      return WebCore::InspectorFrontendAPIDispatcher::evaluateQueuedExpressions(result);
  }
  return result;
}

unint64_t WTF::Vector<std::pair<WTF::String,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::experimental::fundamentals_v3::expected<JSC::JSValue,WebCore::ExceptionDetails>,WebCore::InspectorFrontendAPIDispatcher::EvaluationError>)>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<std::pair<WTF::String,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::experimental::fundamentals_v3::expected<JSC::JSValue,WebCore::ExceptionDetails>,WebCore::InspectorFrontendAPIDispatcher::EvaluationError>)>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<std::pair<WTF::String,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::experimental::fundamentals_v3::expected<JSC::JSValue,WebCore::ExceptionDetails>,WebCore::InspectorFrontendAPIDispatcher::EvaluationError>)>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<std::pair<WTF::String,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::experimental::fundamentals_v3::expected<JSC::JSValue,WebCore::ExceptionDetails>,WebCore::InspectorFrontendAPIDispatcher::EvaluationError>)>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int v2;
  unsigned int *v3;
  WTF *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  unsigned int *v7;
  unsigned int **v8;
  unsigned int **v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int *v12;

  if (result[2] < a2)
  {
    v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = result;
      v4 = *(WTF **)result;
      v5 = result[3];
      result = (unsigned int *)WTF::fastMalloc((WTF *)(16 * a2));
      v3[2] = v2;
      *(_QWORD *)v3 = result;
      if ((_DWORD)v5)
      {
        v7 = result;
        v8 = (unsigned int **)((char *)v4 + 16 * v5);
        v9 = (unsigned int **)v4;
        do
        {
          v10 = *v9;
          *v9 = 0;
          *(_QWORD *)v7 = v10;
          v11 = v9[1];
          v9[1] = 0;
          *((_QWORD *)v7 + 1) = v11;
          v12 = v9[1];
          v9[1] = 0;
          if (v12)
            (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 8))(v12);
          result = *v9;
          *v9 = 0;
          if (result)
          {
            if (*result == 2)
              result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
            else
              *result -= 2;
          }
          v9 += 2;
          v7 += 4;
        }
        while (v9 != v8);
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(_QWORD *)v3 = 0;
          v3[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

void WTF::HashTable<WTF::Ref<WebCore::DOMPromise,WTF::RawPtrTraits<WebCore::DOMPromise>,WTF::DefaultRefDerefTraits<WebCore::DOMPromise>>,WTF::KeyValuePair<WTF::Ref<WebCore::DOMPromise,WTF::RawPtrTraits<WebCore::DOMPromise>,WTF::DefaultRefDerefTraits<WebCore::DOMPromise>>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::experimental::fundamentals_v3::expected<JSC::JSValue,WebCore::ExceptionDetails>,WebCore::InspectorFrontendAPIDispatcher::EvaluationError>)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::DOMPromise,WTF::RawPtrTraits<WebCore::DOMPromise>,WTF::DefaultRefDerefTraits<WebCore::DOMPromise>>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::experimental::fundamentals_v3::expected<JSC::JSValue,WebCore::ExceptionDetails>,WebCore::InspectorFrontendAPIDispatcher::EvaluationError>)>>>,WTF::DefaultHash<WTF::Ref<WebCore::DOMPromise,WTF::RawPtrTraits<WebCore::DOMPromise>,WTF::DefaultRefDerefTraits<WebCore::DOMPromise>>>,WTF::HashMap<WTF::Ref<WebCore::DOMPromise,WTF::RawPtrTraits<WebCore::DOMPromise>,WTF::DefaultRefDerefTraits<WebCore::DOMPromise>>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::experimental::fundamentals_v3::expected<JSC::JSValue,WebCore::ExceptionDetails>,WebCore::InspectorFrontendAPIDispatcher::EvaluationError>)>,WTF::DefaultHash<WTF::Ref<WebCore::DOMPromise,WTF::RawPtrTraits<WebCore::DOMPromise>,WTF::DefaultRefDerefTraits<WebCore::DOMPromise>>>,WTF::HashTraits<WTF::Ref<WebCore::DOMPromise,WTF::RawPtrTraits<WebCore::DOMPromise>,WTF::DefaultRefDerefTraits<WebCore::DOMPromise>>>,WTF::HashTraits<WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::experimental::fundamentals_v3::expected<JSC::JSValue,WebCore::ExceptionDetails>,WebCore::InspectorFrontendAPIDispatcher::EvaluationError>)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::DOMPromise,WTF::RawPtrTraits<WebCore::DOMPromise>,WTF::DefaultRefDerefTraits<WebCore::DOMPromise>>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD **v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  v9 = v7;
  v10 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 16 * a2);
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = v5;
    while (1)
    {
      v13 = (_DWORD **)(v4 + 16 * v11);
      v14 = *v13;
      if (*v13 != (_DWORD *)-1)
      {
        if (v14)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = ((unint64_t)v14 + ~((_QWORD)v14 << 32)) ^ (((unint64_t)v14 + ~((_QWORD)v14 << 32)) >> 22);
          v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          v22 = v18 & ((v21 >> 31) ^ v21);
          v23 = 1;
          do
          {
            v24 = v22;
            v25 = *(_QWORD *)(v17 + 16 * v22);
            v22 = (v22 + v23++) & v18;
          }
          while (v25);
          v26 = v17 + 16 * v24;
          v27 = *(_QWORD *)(v26 + 8);
          *(_QWORD *)(v26 + 8) = 0;
          if (v27)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
            v28 = *(_DWORD **)v26;
            *(_QWORD *)v26 = 0;
            if (v28)
            {
              if (v28[4] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v28 + 16))(v28);
              else
                --v28[4];
            }
          }
          else
          {
            *(_QWORD *)v26 = 0;
          }
          v29 = *v13;
          *v13 = 0;
          *(_QWORD *)v26 = v29;
          v30 = v4 + 16 * v11;
          v31 = *(_QWORD *)(v30 + 8);
          *(_QWORD *)(v30 + 8) = 0;
          *(_QWORD *)(v26 + 8) = v31;
          v32 = *(_QWORD *)(v30 + 8);
          *(_QWORD *)(v30 + 8) = 0;
          if (v32)
            (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
          v14 = *v13;
          *v13 = 0;
          if (!v14)
            goto LABEL_30;
          if (v14[4] == 1)
            goto LABEL_32;
          --v14[4];
        }
        else
        {
          v15 = v4 + 16 * v11;
          v16 = *(_QWORD *)(v15 + 8);
          *(_QWORD *)(v15 + 8) = 0;
          if (v16)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
            v14 = *v13;
          }
          *v13 = 0;
          if (!v14)
            goto LABEL_30;
          if (v14[4] == 1)
          {
LABEL_32:
            (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 16))(v14);
            goto LABEL_30;
          }
          --v14[4];
        }
      }
LABEL_30:
      if (++v11 == v12)
        goto LABEL_36;
    }
  }
  if (v4)
LABEL_36:
    WTF::fastFree((WTF *)(v4 - 16), v8);
}

_QWORD *std::__function::__func<WebCore::InspectorFrontendAPIDispatcher::evaluateOrQueueExpression(WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::experimental::fundamentals_v3::expected<JSC::JSValue,WebCore::ExceptionDetails>,WebCore::InspectorFrontendAPIDispatcher::EvaluationError>)> &&)::$_0,std::allocator<WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::experimental::fundamentals_v3::expected<JSC::JSValue,WebCore::ExceptionDetails>,WebCore::InspectorFrontendAPIDispatcher::EvaluationError>)> &&>,void ()(void)>::~__func(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _DWORD *v6;

  *a1 = &off_1E33EE778;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v6)
  {
    if (v6[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
    else
      --v6[4];
  }
  return a1;
}

void std::__function::__func<WebCore::InspectorFrontendAPIDispatcher::evaluateOrQueueExpression(WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::experimental::fundamentals_v3::expected<JSC::JSValue,WebCore::ExceptionDetails>,WebCore::InspectorFrontendAPIDispatcher::EvaluationError>)> &&)::$_0,std::allocator<WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::experimental::fundamentals_v3::expected<JSC::JSValue,WebCore::ExceptionDetails>,WebCore::InspectorFrontendAPIDispatcher::EvaluationError>)> &&>,void ()(void)>::~__func(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _DWORD *v6;

  *a1 = &off_1E33EE778;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v6)
  {
    if (v6[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
    else
      --v6[4];
  }
  JUMPOUT(0x19AEA7644);
}

_QWORD *std::__function::__func<WebCore::InspectorFrontendAPIDispatcher::evaluateOrQueueExpression(WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::experimental::fundamentals_v3::expected<JSC::JSValue,WebCore::ExceptionDetails>,WebCore::InspectorFrontendAPIDispatcher::EvaluationError>)> &&)::$_0,std::allocator<WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::experimental::fundamentals_v3::expected<JSC::JSValue,WebCore::ExceptionDetails>,WebCore::InspectorFrontendAPIDispatcher::EvaluationError>)> &&>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  unsigned int *v3;
  uint64_t v4;
  unsigned int v5;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(unsigned int **)(a1 + 16);
  ++*(_DWORD *)(v4 + 16);
  *result = &off_1E33EE778;
  result[1] = v4;
  if (v3)
  {
    do
      v5 = __ldaxr(v3);
    while (__stlxr(v5 + 1, v3));
  }
  result[2] = v3;
  return result;
}

uint64_t std::__function::__func<WebCore::InspectorFrontendAPIDispatcher::evaluateOrQueueExpression(WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::experimental::fundamentals_v3::expected<JSC::JSValue,WebCore::ExceptionDetails>,WebCore::InspectorFrontendAPIDispatcher::EvaluationError>)> &&)::$_0,std::allocator<WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::experimental::fundamentals_v3::expected<JSC::JSValue,WebCore::ExceptionDetails>,WebCore::InspectorFrontendAPIDispatcher::EvaluationError>)> &&>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *(_QWORD *)(result + 8);
  ++*(_DWORD *)(v2 + 16);
  *a2 = &off_1E33EE778;
  a2[1] = v2;
  v3 = *(unsigned int **)(result + 16);
  if (v3)
  {
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  a2[2] = v3;
  return result;
}

_DWORD *std::__function::__func<WebCore::InspectorFrontendAPIDispatcher::evaluateOrQueueExpression(WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::experimental::fundamentals_v3::expected<JSC::JSValue,WebCore::ExceptionDetails>,WebCore::InspectorFrontendAPIDispatcher::EvaluationError>)> &&)::$_0,std::allocator<WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::experimental::fundamentals_v3::expected<JSC::JSValue,WebCore::ExceptionDetails>,WebCore::InspectorFrontendAPIDispatcher::EvaluationError>)> &&>,void ()(void)>::destroy(uint64_t a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _DWORD *result;

  v3 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  result = *(_DWORD **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[4];
  }
  return result;
}

void std::__function::__func<WebCore::InspectorFrontendAPIDispatcher::evaluateOrQueueExpression(WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::experimental::fundamentals_v3::expected<JSC::JSValue,WebCore::ExceptionDetails>,WebCore::InspectorFrontendAPIDispatcher::EvaluationError>)> &&)::$_0,std::allocator<WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::experimental::fundamentals_v3::expected<JSC::JSValue,WebCore::ExceptionDetails>,WebCore::InspectorFrontendAPIDispatcher::EvaluationError>)> &&>,void ()(void)>::destroy_deallocate(_QWORD *__p, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _DWORD *v6;

  v3 = (unsigned int *)__p[2];
  __p[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (_DWORD *)__p[1];
  __p[1] = 0;
  if (v6)
  {
    if (v6[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
    else
      --v6[4];
  }
  operator delete(__p);
}

WTF::RunLoop *std::__function::__func<WebCore::InspectorFrontendAPIDispatcher::evaluateOrQueueExpression(WTF::String const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::experimental::fundamentals_v3::expected<JSC::JSValue,WebCore::ExceptionDetails>,WebCore::InspectorFrontendAPIDispatcher::EvaluationError>)> &&)::$_0,std::allocator<WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::experimental::fundamentals_v3::expected<JSC::JSValue,WebCore::ExceptionDetails>,WebCore::InspectorFrontendAPIDispatcher::EvaluationError>)> &&>,void ()(void)>::operator()(WTF::RunLoop *result, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t *v6;
  WTF::RunLoop *v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  int i;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  WebCore::DOMWrapperWorld *v23;
  uint64_t v24;
  uint64_t v25;
  JSC::JSPromise *v26;
  uint64_t v27;
  WTF::RunLoop **v28;
  uint64_t v29;
  _DWORD *v30;
  uint64_t v31;
  int v32;
  WTF *v33;
  void *v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v39;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44[4];
  int v45;
  int v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)result + 2);
  if (v2)
  {
    v3 = *(uint64_t **)(v2 + 8);
    if (v3)
    {
      v4 = (*(_DWORD *)v3)++;
      v6 = v3 + 5;
      v5 = v3[5];
      if (!v5 || !*(_DWORD *)(v5 - 12))
      {
LABEL_31:
        if (v4)
        {
          *(_DWORD *)v3 = v4;
        }
        else
        {
          WebCore::InspectorFrontendAPIDispatcher::~InspectorFrontendAPIDispatcher((WebCore::InspectorFrontendAPIDispatcher *)v3, a2);
          return (WTF::RunLoop *)WTF::fastFree(v33, v34);
        }
        return result;
      }
      v7 = result;
      v8 = *(_DWORD *)(v5 - 8);
      v9 = *((_QWORD *)result + 1);
      v10 = (~(v9 << 32) + v9) ^ ((unint64_t)(~(v9 << 32) + v9) >> 22);
      v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
      v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
      v13 = v8 & ((v12 >> 31) ^ v12);
      for (i = 1; ; ++i)
      {
        v15 = v13;
        v16 = *(_QWORD *)(v5 + 16 * v13);
        if (v16 != -1)
        {
          if (!v16)
            goto LABEL_11;
          if (v16 == v9)
            break;
        }
        v13 = (v15 + i) & v8;
      }
      if ((_DWORD)v15 == *(_DWORD *)(v5 - 4))
      {
LABEL_11:
        v17 = 0;
        goto LABEL_12;
      }
      v27 = v5 + 16 * v15;
      v28 = (WTF::RunLoop **)(v27 + 8);
      v17 = *(_QWORD *)(v27 + 8);
      *(_QWORD *)(v27 + 8) = 0;
      v29 = *v6;
      if (!*v6 || (v29 += 16 * *(unsigned int *)(v29 - 4), v29 != v27))
      {
        if (v29 != v27)
        {
          v30 = *(_DWORD **)v27;
          *(_QWORD *)v27 = 0;
          if (v30)
          {
            if (v30[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v30 + 16))(v30);
            else
              --v30[4];
          }
          *(_QWORD *)v27 = -1;
          result = *v28;
          *v28 = 0;
          if (result)
            result = (WTF::RunLoop *)(*(uint64_t (**)(WTF::RunLoop *))(*(_QWORD *)result + 8))(result);
          ++*(_DWORD *)(*v6 - 16);
          v31 = *v6;
          if (*v6)
            v32 = *(_DWORD *)(v31 - 12) - 1;
          else
            v32 = -1;
          *(_DWORD *)(v31 - 12) = v32;
          v35 = *v6;
          if (*v6)
          {
            v36 = 6 * *(_DWORD *)(v35 - 12);
            v37 = *(_DWORD *)(v35 - 4);
            if (v36 < v37 && v37 >= 9)
              WTF::HashTable<WTF::Ref<WebCore::DOMPromise,WTF::RawPtrTraits<WebCore::DOMPromise>,WTF::DefaultRefDerefTraits<WebCore::DOMPromise>>,WTF::KeyValuePair<WTF::Ref<WebCore::DOMPromise,WTF::RawPtrTraits<WebCore::DOMPromise>,WTF::DefaultRefDerefTraits<WebCore::DOMPromise>>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::experimental::fundamentals_v3::expected<JSC::JSValue,WebCore::ExceptionDetails>,WebCore::InspectorFrontendAPIDispatcher::EvaluationError>)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::DOMPromise,WTF::RawPtrTraits<WebCore::DOMPromise>,WTF::DefaultRefDerefTraits<WebCore::DOMPromise>>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::experimental::fundamentals_v3::expected<JSC::JSValue,WebCore::ExceptionDetails>,WebCore::InspectorFrontendAPIDispatcher::EvaluationError>)>>>,WTF::DefaultHash<WTF::Ref<WebCore::DOMPromise,WTF::RawPtrTraits<WebCore::DOMPromise>,WTF::DefaultRefDerefTraits<WebCore::DOMPromise>>>,WTF::HashMap<WTF::Ref<WebCore::DOMPromise,WTF::RawPtrTraits<WebCore::DOMPromise>,WTF::DefaultRefDerefTraits<WebCore::DOMPromise>>,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::experimental::fundamentals_v3::expected<JSC::JSValue,WebCore::ExceptionDetails>,WebCore::InspectorFrontendAPIDispatcher::EvaluationError>)>,WTF::DefaultHash<WTF::Ref<WebCore::DOMPromise,WTF::RawPtrTraits<WebCore::DOMPromise>,WTF::DefaultRefDerefTraits<WebCore::DOMPromise>>>,WTF::HashTraits<WTF::Ref<WebCore::DOMPromise,WTF::RawPtrTraits<WebCore::DOMPromise>,WTF::DefaultRefDerefTraits<WebCore::DOMPromise>>>,WTF::HashTraits<WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<std::experimental::fundamentals_v3::expected<JSC::JSValue,WebCore::ExceptionDetails>,WebCore::InspectorFrontendAPIDispatcher::EvaluationError>)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::DOMPromise,WTF::RawPtrTraits<WebCore::DOMPromise>,WTF::DefaultRefDerefTraits<WebCore::DOMPromise>>>>::rehash(v3 + 5, v37 >> 1);
          }
        }
      }
LABEL_12:
      v18 = v3[2];
      if (!v18)
        goto LABEL_27;
      v19 = *(_QWORD *)(v18 + 8);
      if (!v19)
        goto LABEL_27;
      v20 = *(_QWORD *)(v19 + 160);
      if (!v20 || *(_BYTE *)(v20 + 144) != 0)
        goto LABEL_27;
      v22 = *(_QWORD *)(v20 + 304);
      {
        v23 = (WebCore::DOMWrapperWorld *)WebCore::mainThreadNormalWorld(void)::cachedNormalWorld;
        goto LABEL_21;
      }
      v41 = v22;
      v39 = WebCore::g_commonVMOrNull;
      if (WebCore::g_commonVMOrNull)
      {
LABEL_62:
        v23 = *(WebCore::DOMWrapperWorld **)(*(_QWORD *)(v39 + 41456) + 16);
        WebCore::mainThreadNormalWorld(void)::cachedNormalWorld = (uint64_t)v23;
        v22 = v41;
LABEL_21:
        v24 = *((_QWORD *)WebCore::WindowProxy::jsWindowProxy(*(WebCore::WindowProxy **)(*(_QWORD *)(v22 + 16) + 112), v23)+ 2);
        if (v24)
        {
          v25 = **(_QWORD **)(*((_QWORD *)v7 + 1) + 24);
          if ((v25 & 0xFFFE000000000002) != 0)
          {
            v26 = 0;
          }
          else if (*(_BYTE *)(v25 + 5) == 68)
          {
            v26 = **(JSC::JSPromise ***)(*((_QWORD *)v7 + 1) + 24);
          }
          else
          {
            v26 = 0;
          }
          v44[0] = JSC::JSPromise::result(v26, *(JSC::VM **)(v24 + 56));
          v45 = 0;
          v46 = 0;
LABEL_28:
          (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v17 + 16))(v17, &v43);
          if (v46 != -1)
            ((void (*)(char *, uint64_t *))off_1E33EE630[v46])(&v42, v44);
          result = (WTF::RunLoop *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
          v4 = *(_DWORD *)v3 - 1;
          goto LABEL_31;
        }
LABEL_27:
        LODWORD(v44[0]) = 1;
        v46 = 1;
        goto LABEL_28;
      }
      WTF::RunLoop::webIfExists(result);
      JSC::VM::create();
      v39 = v43;
      WebCore::g_commonVMOrNull = v43;
      if (__ldaxr((unsigned int *)(v43 + 1096)))
      {
        __clrex();
      }
      else if (!__stlxr(4u, (unsigned int *)(v43 + 1096)))
      {
LABEL_59:
        if (webThreadStarted == 1)
          *(_BYTE *)(*(_QWORD *)(v43 + 112) + 5) = 1;
        WTF::ThreadGroup::addCurrentThread(**(WTF::ThreadGroup ***)(v39 + 584));
        WebCore::JSVMClientData::initNormalWorld((JSC::VM *)v39, 0);
        goto LABEL_62;
      }
      JSC::Heap::acquireAccessSlow((JSC::Heap *)(v43 + 192));
      goto LABEL_59;
    }
  }
  return result;
}

unint64_t *WTF::Deque<WTF::String,0ul>::~Deque(unint64_t *a1, WTF::StringImpl *a2)
{
  unint64_t v3;
  unint64_t v4;
  WTF *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF::StringImpl *v14;

  v3 = *a1;
  v4 = a1[1];
  v5 = (WTF *)a1[2];
  if (*a1 <= v4)
  {
    if (*a1 == v4)
      goto LABEL_27;
    v8 = (WTF::StringImpl **)((char *)v5 + 8 * v3);
    v9 = 8 * v4 - 8 * v3;
    do
    {
      v10 = *v8;
      *v8 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, a2);
        else
          *(_DWORD *)v10 -= 2;
      }
      ++v8;
      v9 -= 8;
    }
    while (v9);
  }
  else
  {
    if (v4)
    {
      v6 = 8 * v4;
      do
      {
        v7 = *(WTF::StringImpl **)v5;
        *(_QWORD *)v5 = 0;
        if (v7)
        {
          if (*(_DWORD *)v7 == 2)
            WTF::StringImpl::destroy(v7, a2);
          else
            *(_DWORD *)v7 -= 2;
        }
        v5 = (WTF *)((char *)v5 + 8);
        v6 -= 8;
      }
      while (v6);
      v5 = (WTF *)a1[2];
      v3 = *a1;
    }
    v11 = *((unsigned int *)a1 + 6);
    if (v3 != v11)
    {
      v12 = (WTF::StringImpl **)((char *)v5 + 8 * v3);
      v13 = 8 * v11 - 8 * v3;
      do
      {
        v14 = *v12;
        *v12 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
            WTF::StringImpl::destroy(v14, a2);
          else
            *(_DWORD *)v14 -= 2;
        }
        ++v12;
        v13 -= 8;
      }
      while (v13);
    }
  }
  v5 = (WTF *)a1[2];
LABEL_27:
  if (v5)
  {
    a1[2] = 0;
    *((_DWORD *)a1 + 6) = 0;
    WTF::fastFree(v5, a2);
  }
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::InspectorFrontendHost::load(WTF::String const&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void,WTF::String const&>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E33EE7C0;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::InspectorFrontendHost::load(WTF::String const&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void,WTF::String const&>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33EE7C0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::InspectorFrontendHost::load(WTF::String const&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void,WTF::String const&>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  WTF::StringImpl *result;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  v2 = *(_QWORD *)(a1 + 8);
  if (*a2)
    return (WTF::StringImpl *)WebCore::DeferredPromise::resolve<WebCore::IDLDOMString>(v2, a2);
  v5 = 0;
  WebCore::DeferredPromise::reject(v2, (JSC::JSGlobalObject *)5, (JSC::JSGlobalObject *)&v5, 0);
  result = v5;
  v5 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::InspectorFrontendHost::pickColorFromScreen(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void,std::optional<WebCore::Color> const&>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E33EE7E8;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::InspectorFrontendHost::pickColorFromScreen(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void,std::optional<WebCore::Color> const&>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33EE7E8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::InspectorFrontendHost::pickColorFromScreen(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void,std::optional<WebCore::Color> const&>::call(WTF::StringImpl *result, unint64_t *a2)
{
  WTF::StringImpl *v2;
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  __int32 v7;
  float v8;
  float v9;
  float v10;
  float v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  int8x8_t v18;
  int8x8_t v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float32x2_t v24;
  int8x8_t v25;
  float32x2_t v26;
  float32x2_t v27;
  int8x8_t v28;
  float v34;
  float v35;
  float v36;
  unsigned int v37;
  float v38;
  float v39;
  float v40;
  float32x2_t v41;
  int8x8_t v42;
  float32x2_t v43;
  float32x2_t v44;
  float v45;
  float v46;
  float v47;
  int v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  unsigned int v55;
  unsigned int v56;
  int v57;
  float v58;
  float v59;
  float v60;
  float v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  __int32 v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  __int32 v75;
  float v76;
  float v77;
  unsigned int v78;
  unsigned int v79;
  __int32 v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  uint64_t v98;
  void *v99;
  unsigned int *v100;
  unsigned int v101;
  unsigned int v102;
  WTF::StringImpl *v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  int8x8_t v109;
  float v110;
  int8x8_t v111;
  float v112;
  int32x2_t v113;
  uint64_t v114;
  float v115;
  unsigned int v116;
  __int128 v117;
  int8x16_t v118;

  v2 = result;
  if (*((_BYTE *)a2 + 8))
  {
    v3 = *a2;
    if ((*a2 & 0x8000000000000) != 0)
    {
      v18 = *(int8x8_t *)((v3 & 0xFFFFFFFFFFFFLL) + 4);
      v11 = *(float *)((v3 & 0xFFFFFFFFFFFFLL) + 0xC);
      v13 = *(_DWORD *)((v3 & 0xFFFFFFFFFFFFLL) + 0x10);
      v9 = *(float *)&v18.i32[1];
      switch(HIBYTE(v3))
      {
        case 0u:
          v19 = vorr_s8((int8x8_t)vcltz_f32((float32x2_t)v18), (int8x8_t)vcgez_f32((float32x2_t)v18));
          v20 = *(float *)((v3 & 0xFFFFFFFFFFFFLL) + 0xC);
          v109 = *(int8x8_t *)((v3 & 0xFFFFFFFFFFFFLL) + 4);
          v21 = powf(fabsf(v20), 2.1992);
          if (v20 < 0.0)
            v21 = -v21;
          if (v21 > 0.0)
            v22 = v21;
          else
            v22 = 0.0;
          if (v21 >= 1.0)
            v23 = 1.0;
          else
            v23 = v22;
          v24 = (float32x2_t)vand_s8(v109, v19);
          v25 = (int8x8_t)vcltz_s32((int32x2_t)v24);
          v26 = vabs_f32(v24);
          v105 = v26.f32[0];
          v110 = powf(v26.f32[1], 2.1992);
          v27.f32[0] = powf(v105, 2.1992);
          v27.f32[1] = v110;
          v28 = vbsl_s8(v25, (int8x8_t)vneg_f32(v27), (int8x8_t)v27);
          __asm { FMOV            V1.2S, #1.0 }
          *(int8x8_t *)v118.i8 = vbsl_s8((int8x8_t)vcge_f32((float32x2_t)v28, (float32x2_t)_D1), _D1, vbic_s8(v28, (int8x8_t)vclez_f32((float32x2_t)v28)));
          v118.i64[1] = __PAIR64__(v13, LODWORD(v23));
          v34 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,WebCore::BoundedLinearEncoded<float,WebCore::A98RGBDescriptor>,void>::convert(&v118);
          break;
        case 1u:
          goto LABEL_129;
        case 2u:
          v38 = *(float *)((v3 & 0xFFFFFFFFFFFFLL) + 0xC);
          v111 = *(int8x8_t *)((v3 & 0xFFFFFFFFFFFFLL) + 4);
          v39 = powf(fabsf(v38), 2.1992);
          if (v38 >= 0.0)
            v40 = v39;
          else
            v40 = -v39;
          v41 = (float32x2_t)vand_s8(v111, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)v111), (int8x8_t)vcgez_f32((float32x2_t)v111)));
          v42 = (int8x8_t)vcltz_s32((int32x2_t)v41);
          v43 = vabs_f32(v41);
          v106 = v43.f32[0];
          v112 = powf(v43.f32[1], 2.1992);
          v44.f32[0] = powf(v106, 2.1992);
          v44.f32[1] = v112;
          *(int8x8_t *)v118.i8 = vbsl_s8(v42, (int8x8_t)vneg_f32(v44), (int8x8_t)v44);
          v118.i64[1] = __PAIR64__(v13, LODWORD(v40));
          v34 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,WebCore::BoundedLinearEncoded<float,WebCore::A98RGBDescriptor>,void>::convert(&v118);
          break;
        case 3u:
          v45 = *(float *)v18.i32;
          if (*(float *)v18.i32 > 1.0)
            *(float *)v18.i32 = 1.0;
          if (v45 < 0.0)
            *(float *)v18.i32 = 0.0;
          if (*(float *)&v18.i32[1] <= 1.0)
            v46 = *(float *)&v18.i32[1];
          else
            v46 = 1.0;
          if (*(float *)&v18.i32[1] >= 0.0)
            v9 = v46;
          else
            v9 = 0.0;
          if (v11 <= 1.0)
            v47 = *(float *)((v3 & 0xFFFFFFFFFFFFLL) + 0xC);
          else
            v47 = 1.0;
          if (v11 >= 0.0)
            v11 = v47;
          else
            v11 = 0.0;
          goto LABEL_129;
        case 4u:
          v118.i64[0] = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFLL) + 4);
          v118.i64[1] = __PAIR64__(v13, LODWORD(v11));
          goto LABEL_125;
        case 5u:
          if (fabsf(*(float *)v18.i32) <= 0.03125)
          {
            v50 = *(float *)v18.i32 * 0.0625;
          }
          else
          {
            v48 = v18.i32[0];
            v49 = powf(*(float *)v18.i32, 1.8);
            if (v48 >= 0)
              v50 = v49;
            else
              v50 = -v49;
          }
          if (fabsf(v9) <= 0.03125)
          {
            v88 = v9 * 0.0625;
          }
          else
          {
            v87 = powf(v9, 1.8);
            if (v9 >= 0.0)
              v88 = v87;
            else
              v88 = -v87;
          }
          if (fabsf(v11) <= 0.03125)
          {
            v93 = v11 * 0.0625;
          }
          else
          {
            v93 = powf(v11, 1.8);
            if (v11 < 0.0)
              v93 = -v93;
          }
          goto LABEL_127;
        case 6u:
          v118.i64[0] = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFLL) + 4);
          v118.i64[1] = __PAIR64__(v13, LODWORD(v11));
          WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((uint64_t)&v118);
          break;
        case 7u:
          v113 = (int32x2_t)vand_s8(v18, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)v18), (int8x8_t)vcgez_f32((float32x2_t)v18)));
          v51 = fabsf(*(float *)v113.i32);
          if (v51 <= 0.04045)
            v107 = v51 / 12.92;
          else
            v107 = powf((float)(v51 + 0.055) / 1.055, 2.4);
          v89 = fabsf(*(float *)&v113.i32[1]);
          if (v89 <= 0.04045)
            v90 = v89 / 12.92;
          else
            v90 = powf((float)(v89 + 0.055) / 1.055, 2.4);
          v94 = fabsf(v11);
          if (v94 <= 0.04045)
          {
            v95 = v94 / 12.92;
          }
          else
          {
            v104 = v90;
            v95 = powf((float)(v94 + 0.055) / 1.055, 2.4);
            v90 = v104;
          }
          *(int8x8_t *)v118.i8 = vbsl_s8((int8x8_t)vcltz_s32(v113), (int8x8_t)vneg_f32((float32x2_t)__PAIR64__(LODWORD(v90), LODWORD(v107))), (int8x8_t)__PAIR64__(LODWORD(v90), LODWORD(v107)));
          if (v11 < 0.0)
            v95 = -v95;
          v118.i64[1] = __PAIR64__(v13, LODWORD(v95));
          goto LABEL_125;
        case 8u:
          *(_QWORD *)&v117 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFLL) + 4);
          *((_QWORD *)&v117 + 1) = __PAIR64__(v13, LODWORD(v11));
          v52 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HSLA<float>,void>::convert((float *)&v117);
          goto LABEL_52;
        case 9u:
          *(_QWORD *)&v117 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFLL) + 4);
          *((_QWORD *)&v117 + 1) = __PAIR64__(v13, LODWORD(v11));
          v52 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HWBA<float>,void>::convert((uint64_t)&v117);
LABEL_52:
          v56 = v55;
          *(float *)&v57 = v52;
          v58 = v53;
          v59 = v54;
          v60 = fabsf(v52);
          if (v60 <= 0.04045)
            v61 = v60 / 12.92;
          else
            v61 = powf((float)(v60 + 0.055) / 1.055, 2.4);
          v81 = fabsf(v58);
          if (v81 <= 0.04045)
            v82 = v81 / 12.92;
          else
            v82 = powf((float)(v81 + 0.055) / 1.055, 2.4);
          v83 = fabsf(v59);
          if (v83 <= 0.04045)
            v84 = v83 / 12.92;
          else
            v84 = powf((float)(v83 + 0.055) / 1.055, 2.4);
          v85 = -v82;
          if (v58 >= 0.0)
            v85 = v82;
          v86 = -v61;
          if (v57 >= 0)
            v86 = v61;
          v118.i64[0] = __PAIR64__(LODWORD(v85), LODWORD(v86));
          if (v59 < 0.0)
            v84 = -v84;
          v118.i64[1] = __PAIR64__(v56, LODWORD(v84));
LABEL_125:
          v34 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::convert((uint64_t)&v118);
          break;
        case 0xAu:
          v114 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFLL) + 4);
          v115 = v11;
          v116 = v13;
          WebCore::ColorConversion<WebCore::Lab<float>,WebCore::LCHA<float>,void>::convert((uint64_t)&v114);
          *(_QWORD *)&v117 = __PAIR64__(v63, v62);
          *((_QWORD *)&v117 + 1) = __PAIR64__(v65, v64);
          goto LABEL_56;
        case 0xBu:
          *(_QWORD *)&v117 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFLL) + 4);
          *((_QWORD *)&v117 + 1) = __PAIR64__(v13, LODWORD(v11));
LABEL_56:
          v118.i32[0] = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::Lab<float>,void>::convert((float *)&v117);
          *(uint64_t *)((char *)v118.i64 + 4) = __PAIR64__(v67, v66);
          v118.i32[3] = v68;
          goto LABEL_73;
        case 0xCu:
          v118.i64[0] = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFLL) + 4);
          v118.i64[1] = __PAIR64__(v13, LODWORD(v11));
          goto LABEL_71;
        case 0xDu:
          v114 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFLL) + 4);
          v115 = v11;
          v116 = v13;
          WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::OKLCHA<float>,void>::convert((uint64_t)&v114);
          *(_QWORD *)&v117 = __PAIR64__(v70, v69);
          *((_QWORD *)&v117 + 1) = __PAIR64__(v72, v71);
          goto LABEL_60;
        case 0xEu:
          *(_QWORD *)&v117 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFLL) + 4);
          *((_QWORD *)&v117 + 1) = __PAIR64__(v13, LODWORD(v11));
LABEL_60:
          v118.i32[0] = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::OKLab<float>,void>::convert((float *)&v117);
          *(uint64_t *)((char *)v118.i64 + 4) = __PAIR64__(v74, v73);
          v118.i32[3] = v75;
          goto LABEL_75;
        case 0xFu:
          if (*(float *)v18.i32 <= 0.03125)
          {
            v50 = *(float *)v18.i32 * 0.0625;
          }
          else
          {
            v76 = powf(*(float *)v18.i32, 1.8);
            if (v76 > 0.0)
              v77 = v76;
            else
              v77 = 0.0;
            if (v76 >= 1.0)
              v50 = 1.0;
            else
              v50 = v77;
          }
          if (v9 <= 0.03125)
          {
            v88 = v9 * 0.0625;
          }
          else
          {
            v91 = powf(v9, 1.8);
            v92 = 0.0;
            if (v91 > 0.0)
              v92 = v91;
            if (v91 >= 1.0)
              v88 = 1.0;
            else
              v88 = v92;
          }
          if (v11 <= 0.03125)
          {
            v93 = v11 * 0.0625;
          }
          else
          {
            v96 = powf(v11, 1.8);
            v97 = 0.0;
            if (v96 > 0.0)
              v97 = v96;
            if (v96 >= 1.0)
              v93 = 1.0;
            else
              v93 = v97;
          }
LABEL_127:
          v118.i64[0] = __PAIR64__(LODWORD(v88), LODWORD(v50));
          v118.i64[1] = __PAIR64__(v13, LODWORD(v93));
          v34 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((uint64_t)&v118);
          break;
        case 0x10u:
          v118.i64[0] = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFLL) + 4);
          v118.i64[1] = __PAIR64__(v13, LODWORD(v11));
          WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,WebCore::BoundedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((uint64_t)&v118);
          break;
        case 0x11u:
          *(_QWORD *)&v117 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFLL) + 4);
          goto LABEL_70;
        case 0x12u:
          v118.i64[0] = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFLL) + 4);
          v118.i64[1] = __PAIR64__(v13, LODWORD(v11));
LABEL_73:
          v34 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,WebCore::XYZA<float,(WebCore::WhitePoint)0>,void>::convert((uint64_t)&v118);
          break;
        case 0x13u:
          v118.i64[0] = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFLL) + 4);
          v118.i64[1] = __PAIR64__(v13, LODWORD(v11));
LABEL_75:
          v34 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,WebCore::XYZA<float,(WebCore::WhitePoint)1>,void>::convert((float *)v118.i32);
          break;
        default:
          *(_QWORD *)&v117 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFLL) + 4);
LABEL_70:
          *((_QWORD *)&v117 + 1) = __PAIR64__(v13, LODWORD(v11));
          v118.i32[0] = WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(&v117);
          *(uint64_t *)((char *)v118.i64 + 4) = __PAIR64__(v79, v78);
          v118.i32[3] = v80;
LABEL_71:
          v34 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::convert((uint64_t)&v118);
          break;
      }
      *(float *)v18.i32 = v34;
      v9 = v35;
      v11 = v36;
      v13 = v37;
LABEL_129:
      v108 = *(float *)v18.i32;
    }
    else
    {
      v4 = bswap32(v3);
      *(float *)&v117 = (float)v4 / 255.0;
      *(float32x2_t *)((char *)&v117 + 4) = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v4), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL)), (float32x2_t)vdup_n_s32(0x437F0000u));
      *((float *)&v117 + 3) = (float)HIBYTE(v4) / 255.0;
      v118.i32[0] = WebCore::ColorConversion<WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::handleRGBFamilyConversion(&v117);
      *(uint64_t *)((char *)v118.i64 + 4) = __PAIR64__(v6, v5);
      v118.i32[3] = v7;
      v108 = WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::convert((uint64_t)&v118);
      v9 = v8;
      v11 = v10;
      v13 = v12;
    }
    v98 = WTF::fastMalloc((WTF *)0x14);
    *(_DWORD *)v98 = 1;
    *(float *)(v98 + 4) = v108;
    *(float *)(v98 + 8) = v9;
    *(float *)(v98 + 12) = v11;
    *(_DWORD *)(v98 + 16) = v13;
    v114 = v98 | 0x10C000000000000;
    WebCore::Color::callOnUnderlyingType<WebCore::serializationForCSS(WebCore::Color const&)::$_0>(&v117, v98 | 0x10C000000000000, &v114);
    v118.i64[0] = v117;
    *(_QWORD *)&v117 = 0;
    v100 = (unsigned int *)(v98 & 0xFFFFFFFFFFFFLL);
    do
    {
      v101 = __ldaxr(v100);
      v102 = v101 - 1;
    }
    while (__stlxr(v102, v100));
    if (!v102)
    {
      atomic_store(1u, v100);
      WTF::fastFree((WTF *)v100, v99);
    }
    WebCore::DeferredPromise::resolve<WebCore::IDLDOMString>(*((_QWORD *)v2 + 1), v118.i64);
    result = (WTF::StringImpl *)v118.i64[0];
    v118.i64[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v103);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    v14 = *((_QWORD *)result + 1);
    v15 = *(_QWORD *)(v14 + 24);
    if (v15 && *(_QWORD *)v15 && (*(_BYTE *)(v15 + 8) & 3) == 0)
    {
      v16 = *(_QWORD *)(v14 + 32);
      if (!v16 || (*(_BYTE *)(v16 + 8) & 3) != 0)
        v17 = 0;
      else
        v17 = *(uint64_t **)v16;
      JSC::JSLockHolder::JSLockHolder();
      WebCore::DeferredPromise::callFunction(v14, v17, 0, (objc_class *)0xA);
      return (WTF::StringImpl *)MEMORY[0x19AEA32A0](&v118);
    }
  }
  return result;
}

float WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,WebCore::BoundedLinearEncoded<float,WebCore::A98RGBDescriptor>,void>::convert(int8x16_t *a1)
{
  float v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  _OWORD v15[2];
  int v16;
  _OWORD v17[2];
  int v18;
  int8x16_t v19;

  v19 = vandq_s8(*a1, vorrq_s8((int8x16_t)vcltzq_f32(*(float32x4_t *)a1), (int8x16_t)vcgezq_f32(*(float32x4_t *)a1)));
  v17[0] = WebCore::ExtendedLinearEncoded<float,WebCore::A98RGBDescriptor>::linearToXYZ;
  v17[1] = unk_1968BFBBC;
  v18 = 1065207884;
  v15[0] = WebCore::ExtendedLinearEncoded<float,WebCore::DisplayP3Descriptor>::xyzToLinear;
  v15[1] = unk_1969EF318;
  v16 = 1064629858;
  v1 = WebCore::applyMatricesToColorComponents<float,WebCore::ColorMatrix<3ul,3ul>,WebCore::ColorMatrix<3ul,3ul>>((float *)v19.i32, (float *)v17, (float *)v15);
  v4 = 0.0;
  if (v1 <= 1.0)
    v5 = v1;
  else
    v5 = 1.0;
  if (v1 >= 0.0)
    v6 = v5;
  else
    v6 = 0.0;
  if (v2 <= 1.0)
    v7 = v2;
  else
    v7 = 1.0;
  if (v2 >= 0.0)
    v8 = v7;
  else
    v8 = 0.0;
  if (v3 <= 1.0)
    v9 = v3;
  else
    v9 = 1.0;
  if (v3 >= 0.0)
    v10 = v9;
  else
    v10 = 0.0;
  if (v6 >= 0.0031308)
  {
    v12 = (float)(powf(v6, 0.41667) * 1.055) + -0.055;
    if (v12 > 0.0)
      v13 = v12;
    else
      v13 = 0.0;
    if (v12 >= 1.0)
      v4 = 1.0;
    else
      v4 = v13;
  }
  else
  {
    v11 = v6 * 12.92;
    if (v11 >= 0.0)
      v4 = v11;
  }
  if (v8 >= 0.0031308)
    powf(v8, 0.41667);
  if (v10 >= 0.0031308)
    powf(v10, 0.41667);
  return v4;
}

float WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::convert(uint64_t a1)
{
  float v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  _OWORD v18[2];
  int v19;
  _OWORD v20[2];
  int v21;
  float v22[4];

  v22[0] = WebCore::XYZA<float,(WebCore::WhitePoint)0>::resolved(a1);
  v22[1] = v1;
  v22[2] = v2;
  v22[3] = v3;
  v20[0] = WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>::linearToXYZ;
  v20[1] = unk_1969EF2D0;
  v21 = 1064523283;
  v18[0] = WebCore::ExtendedLinearEncoded<float,WebCore::DisplayP3Descriptor>::xyzToLinear;
  v18[1] = unk_1969EF318;
  v19 = 1064629858;
  v4 = WebCore::applyMatricesToColorComponents<float,WebCore::ColorMatrix<3ul,3ul>,WebCore::ColorMatrix<3ul,3ul>>(v22, (float *)v20, (float *)v18);
  v7 = 0.0;
  if (v4 <= 1.0)
    v8 = v4;
  else
    v8 = 1.0;
  if (v4 >= 0.0)
    v9 = v8;
  else
    v9 = 0.0;
  if (v5 <= 1.0)
    v10 = v5;
  else
    v10 = 1.0;
  if (v5 >= 0.0)
    v11 = v10;
  else
    v11 = 0.0;
  if (v6 <= 1.0)
    v12 = v6;
  else
    v12 = 1.0;
  if (v6 >= 0.0)
    v13 = v12;
  else
    v13 = 0.0;
  if (v9 >= 0.0031308)
  {
    v15 = (float)(powf(v9, 0.41667) * 1.055) + -0.055;
    if (v15 > 0.0)
      v16 = v15;
    else
      v16 = 0.0;
    if (v15 >= 1.0)
      v7 = 1.0;
    else
      v7 = v16;
  }
  else
  {
    v14 = v9 * 12.92;
    if (v14 >= 0.0)
      v7 = v14;
  }
  if (v11 >= 0.0031308)
    powf(v11, 0.41667);
  if (v13 >= 0.0031308)
    powf(v13, 0.41667);
  return v7;
}

float WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert(uint64_t a1)
{
  float v1;
  float v2;
  float v3;
  int v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  _OWORD v19[2];
  int v20;
  _OWORD v21[2];
  int v22;
  float32x2_t v23;
  float v24;
  int v25;

  v1 = *(float *)a1;
  v2 = *(float *)(a1 + 4);
  v3 = *(float *)(a1 + 8);
  v4 = *(_DWORD *)(a1 + 12);
  v5 = 0.0;
  v21[0] = WebCore::ChromaticAdaptation<(WebCore::WhitePoint)0,(WebCore::WhitePoint)1>::matrix;
  v21[1] = unk_1968BFC28;
  v22 = 1068124526;
  v19[0] = WebCore::ExtendedLinearEncoded<float,WebCore::DisplayP3Descriptor>::xyzToLinear;
  v19[1] = unk_1969EF318;
  v20 = 1064629858;
  v23 = vmla_n_f32(vmla_n_f32(vmla_n_f32(0, (float32x2_t)0x3E937E8B3F4C3A6FLL, v1), (float32x2_t)0x3F363AD53E0A6CF7, v2), (float32x2_t)0x38BC9C873D00667BLL, v3);
  v24 = (float)((float)((float)(v1 * 0.0) + 0.0) + (float)(v2 * 0.0)) + (float)(v3 * 0.8251);
  v25 = v4;
  v6 = WebCore::applyMatricesToColorComponents<float,WebCore::ColorMatrix<3ul,3ul>,WebCore::ColorMatrix<3ul,3ul>>((float *)&v23, (float *)v21, (float *)v19);
  if (v6 <= 1.0)
    v9 = v6;
  else
    v9 = 1.0;
  if (v6 >= 0.0)
    v10 = v9;
  else
    v10 = 0.0;
  if (v7 <= 1.0)
    v11 = v7;
  else
    v11 = 1.0;
  if (v7 >= 0.0)
    v12 = v11;
  else
    v12 = 0.0;
  if (v8 <= 1.0)
    v13 = v8;
  else
    v13 = 1.0;
  if (v8 >= 0.0)
    v14 = v13;
  else
    v14 = 0.0;
  if (v10 >= 0.0031308)
  {
    v16 = (float)(powf(v10, 0.41667) * 1.055) + -0.055;
    if (v16 > 0.0)
      v17 = v16;
    else
      v17 = 0.0;
    if (v16 >= 1.0)
      v5 = 1.0;
    else
      v5 = v17;
  }
  else
  {
    v15 = v10 * 12.92;
    if (v15 >= 0.0)
      v5 = v15;
  }
  if (v12 >= 0.0031308)
    powf(v12, 0.41667);
  if (v14 >= 0.0031308)
    powf(v14, 0.41667);
  return v5;
}

void WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert(uint64_t a1)
{
  float v1;
  unsigned int v2;
  float v3;
  float v4;
  float v5;
  float v6;
  double v7;
  float v8;
  double v9;
  float v10;
  double v11;
  int8x16_t v12;

  v1 = *(float *)a1;
  v2 = *(_DWORD *)(a1 + 12);
  v3 = *(float *)(a1 + 4);
  v4 = *(float *)(a1 + 8);
  if (fabsf(*(float *)a1) >= 0.081243)
  {
    v6 = *(float *)a1;
    v7 = pow(((float)(v1 + 1.0993) + -1.0) / 1.09929681, 2.22222228);
    if (v6 < 0.0)
      v7 = -v7;
    v5 = v7;
  }
  else
  {
    v5 = v1 / 4.5;
  }
  if (fabsf(v3) >= 0.081243)
  {
    v9 = pow(((float)(v3 + 1.0993) + -1.0) / 1.09929681, 2.22222228);
    if (v3 < 0.0)
      v9 = -v9;
    v8 = v9;
  }
  else
  {
    v8 = v3 / 4.5;
  }
  if (fabsf(v4) >= 0.081243)
  {
    v11 = pow(((float)(v4 + 1.0993) + -1.0) / 1.09929681, 2.22222228);
    if (v4 < 0.0)
      v11 = -v11;
    v10 = v11;
  }
  else
  {
    v10 = v4 / 4.5;
  }
  v12.i64[0] = __PAIR64__(LODWORD(v8), LODWORD(v5));
  v12.i64[1] = __PAIR64__(v2, LODWORD(v10));
  WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::Rec2020Descriptor>,void>::convert(&v12);
}

float WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::Rec2020Descriptor>,void>::convert(int8x16_t *a1)
{
  float v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  _OWORD v15[2];
  int v16;
  _OWORD v17[2];
  int v18;
  int8x16_t v19;

  v19 = vandq_s8(*a1, vorrq_s8((int8x16_t)vcltzq_f32(*(float32x4_t *)a1), (int8x16_t)vcgezq_f32(*(float32x4_t *)a1)));
  v17[0] = WebCore::ExtendedLinearEncoded<float,WebCore::Rec2020Descriptor>::linearToXYZ;
  v17[1] = unk_1968BFC4C;
  v18 = 1065864796;
  v15[0] = WebCore::ExtendedLinearEncoded<float,WebCore::DisplayP3Descriptor>::xyzToLinear;
  v15[1] = unk_1969EF318;
  v16 = 1064629858;
  v1 = WebCore::applyMatricesToColorComponents<float,WebCore::ColorMatrix<3ul,3ul>,WebCore::ColorMatrix<3ul,3ul>>((float *)v19.i32, (float *)v17, (float *)v15);
  v4 = 0.0;
  if (v1 <= 1.0)
    v5 = v1;
  else
    v5 = 1.0;
  if (v1 >= 0.0)
    v6 = v5;
  else
    v6 = 0.0;
  if (v2 <= 1.0)
    v7 = v2;
  else
    v7 = 1.0;
  if (v2 >= 0.0)
    v8 = v7;
  else
    v8 = 0.0;
  if (v3 <= 1.0)
    v9 = v3;
  else
    v9 = 1.0;
  if (v3 >= 0.0)
    v10 = v9;
  else
    v10 = 0.0;
  if (v6 >= 0.0031308)
  {
    v12 = (float)(powf(v6, 0.41667) * 1.055) + -0.055;
    if (v12 > 0.0)
      v13 = v12;
    else
      v13 = 0.0;
    if (v12 >= 1.0)
      v4 = 1.0;
    else
      v4 = v13;
  }
  else
  {
    v11 = v6 * 12.92;
    if (v11 >= 0.0)
      v4 = v11;
  }
  if (v8 >= 0.0031308)
    powf(v8, 0.41667);
  if (v10 >= 0.0031308)
    powf(v10, 0.41667);
  return v4;
}

float WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,WebCore::XYZA<float,(WebCore::WhitePoint)0>,void>::convert(uint64_t a1)
{
  float v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  _OWORD v18[2];
  int v19;
  _OWORD v20[2];
  int v21;
  float v22[4];

  v22[0] = WebCore::XYZA<float,(WebCore::WhitePoint)0>::resolved(a1);
  v22[1] = v1;
  v22[2] = v2;
  v22[3] = v3;
  v20[0] = WebCore::ChromaticAdaptation<(WebCore::WhitePoint)0,(WebCore::WhitePoint)1>::matrix;
  v20[1] = unk_1968BFC28;
  v21 = 1068124526;
  v18[0] = WebCore::ExtendedLinearEncoded<float,WebCore::DisplayP3Descriptor>::xyzToLinear;
  v18[1] = unk_1969EF318;
  v19 = 1064629858;
  v4 = WebCore::applyMatricesToColorComponents<float,WebCore::ColorMatrix<3ul,3ul>,WebCore::ColorMatrix<3ul,3ul>>(v22, (float *)v20, (float *)v18);
  v7 = 0.0;
  if (v4 <= 1.0)
    v8 = v4;
  else
    v8 = 1.0;
  if (v4 >= 0.0)
    v9 = v8;
  else
    v9 = 0.0;
  if (v5 <= 1.0)
    v10 = v5;
  else
    v10 = 1.0;
  if (v5 >= 0.0)
    v11 = v10;
  else
    v11 = 0.0;
  if (v6 <= 1.0)
    v12 = v6;
  else
    v12 = 1.0;
  if (v6 >= 0.0)
    v13 = v12;
  else
    v13 = 0.0;
  if (v9 >= 0.0031308)
  {
    v15 = (float)(powf(v9, 0.41667) * 1.055) + -0.055;
    if (v15 > 0.0)
      v16 = v15;
    else
      v16 = 0.0;
    if (v15 >= 1.0)
      v7 = 1.0;
    else
      v7 = v16;
  }
  else
  {
    v14 = v9 * 12.92;
    if (v14 >= 0.0)
      v7 = v14;
  }
  if (v11 >= 0.0031308)
    powf(v11, 0.41667);
  if (v13 >= 0.0031308)
    powf(v13, 0.41667);
  return v7;
}

float WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,WebCore::BoundedLinearEncoded<float,WebCore::SRGBADescriptor>,void>::convert(uint64_t a1)
{
  float v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  _OWORD v18[2];
  int v19;
  _OWORD v20[2];
  int v21;
  float v22[4];

  v1 = 0.0;
  v22[0] = WebCore::XYZA<float,(WebCore::WhitePoint)0>::resolved(a1);
  v22[1] = v2;
  v22[2] = v3;
  v22[3] = v4;
  v20[0] = WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>::linearToXYZ;
  v20[1] = unk_1969EF2D0;
  v21 = 1064523283;
  v18[0] = WebCore::ExtendedLinearEncoded<float,WebCore::DisplayP3Descriptor>::xyzToLinear;
  v18[1] = unk_1969EF318;
  v19 = 1064629858;
  v5 = WebCore::applyMatricesToColorComponents<float,WebCore::ColorMatrix<3ul,3ul>,WebCore::ColorMatrix<3ul,3ul>>(v22, (float *)v20, (float *)v18);
  if (v5 <= 1.0)
    v8 = v5;
  else
    v8 = 1.0;
  if (v5 >= 0.0)
    v9 = v8;
  else
    v9 = 0.0;
  if (v6 <= 1.0)
    v10 = v6;
  else
    v10 = 1.0;
  if (v6 >= 0.0)
    v11 = v10;
  else
    v11 = 0.0;
  if (v7 <= 1.0)
    v12 = v7;
  else
    v12 = 1.0;
  if (v7 >= 0.0)
    v13 = v12;
  else
    v13 = 0.0;
  if (v9 >= 0.0031308)
  {
    v15 = (float)(powf(v9, 0.41667) * 1.055) + -0.055;
    if (v15 > 0.0)
      v16 = v15;
    else
      v16 = 0.0;
    if (v15 >= 1.0)
      v1 = 1.0;
    else
      v1 = v16;
  }
  else
  {
    v14 = v9 * 12.92;
    if (v14 >= 0.0)
      v1 = v14;
  }
  if (v11 >= 0.0031308)
    powf(v11, 0.41667);
  if (v13 >= 0.0031308)
    powf(v13, 0.41667);
  return v1;
}

float WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,WebCore::XYZA<float,(WebCore::WhitePoint)1>,void>::convert(float *a1)
{
  float v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;

  v1 = a1[1];
  v2 = a1[2];
  v3 = 0.0;
  v4 = (float)((float)((float)(*a1 * -0.82949) + 0.0) + (float)(v1 * 1.7627)) + (float)(v2 * 0.023625);
  v5 = (float)((float)((float)(*a1 * 2.4935) + 0.0) + (float)(v1 * -0.93138)) + (float)(v2 * -0.40271);
  v6 = (float)((float)((float)(*a1 * 0.035846) + 0.0) + (float)(v1 * -0.076172)) + (float)(v2 * 0.95688);
  if (v5 <= 1.0)
    v7 = v5;
  else
    v7 = 1.0;
  if (v5 >= 0.0)
    v8 = v7;
  else
    v8 = 0.0;
  if (v4 <= 1.0)
    v9 = v4;
  else
    v9 = 1.0;
  if (v4 >= 0.0)
    v10 = v9;
  else
    v10 = 0.0;
  if (v6 <= 1.0)
    v11 = v6;
  else
    v11 = 1.0;
  if (v6 >= 0.0)
    v12 = v11;
  else
    v12 = 0.0;
  if (v8 >= 0.0031308)
  {
    v14 = (float)(powf(v8, 0.41667) * 1.055) + -0.055;
    if (v14 > 0.0)
      v15 = v14;
    else
      v15 = 0.0;
    if (v14 >= 1.0)
      v3 = 1.0;
    else
      v3 = v15;
  }
  else
  {
    v13 = v8 * 12.92;
    if (v13 >= 0.0)
      v3 = v13;
  }
  if (v10 >= 0.0031308)
    powf(v10, 0.41667);
  if (v12 >= 0.0031308)
    powf(v12, 0.41667);
  return v3;
}

void WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,WebCore::BoundedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert(uint64_t a1)
{
  float v1;
  unsigned int v2;
  float v3;
  float v4;
  float v5;
  double v6;
  float v7;
  double v8;
  float v9;
  double v10;
  int8x16_t v11;

  v1 = *(float *)a1;
  v2 = *(_DWORD *)(a1 + 12);
  v3 = *(float *)(a1 + 4);
  v4 = *(float *)(a1 + 8);
  if (*(float *)a1 >= 0.081243)
  {
    v6 = pow(((float)(v1 + 1.0993) + -1.0) / 1.09929681, 2.22222228);
    if (v6 >= 1.0)
    {
      v5 = 1.0;
    }
    else if (v6 <= 0.0)
    {
      v5 = 0.0;
    }
    else
    {
      v5 = v6;
    }
  }
  else
  {
    v5 = v1 / 4.5;
  }
  if (v3 >= 0.081243)
  {
    v8 = pow(((float)(v3 + 1.0993) + -1.0) / 1.09929681, 2.22222228);
    if (v8 >= 1.0)
    {
      v7 = 1.0;
    }
    else if (v8 <= 0.0)
    {
      v7 = 0.0;
    }
    else
    {
      v7 = v8;
    }
  }
  else
  {
    v7 = v3 / 4.5;
  }
  if (v4 >= 0.081243)
  {
    v10 = pow(((float)(v4 + 1.0993) + -1.0) / 1.09929681, 2.22222228);
    if (v10 >= 1.0)
    {
      v9 = 1.0;
    }
    else if (v10 <= 0.0)
    {
      v9 = 0.0;
    }
    else
    {
      v9 = v10;
    }
  }
  else
  {
    v9 = v4 / 4.5;
  }
  v11.i64[0] = __PAIR64__(LODWORD(v7), LODWORD(v5));
  v11.i64[1] = __PAIR64__(v2, LODWORD(v9));
  WebCore::ColorConversion<WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::Rec2020Descriptor>,void>::convert(&v11);
}

uint64_t WebCore::InspectorInstrumentationWebKit::shouldInterceptRequestInternal(WebCore::InspectorInstrumentationWebKit *this, const WebCore::ResourceLoader *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t shouldIntercept;
  WTF::StringImpl **v9;
  WTF::StringImpl *v10;
  __int128 v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WebCore::InspectorInstrumentationWebKit *v15;
  WTF::StringImpl *v16;
  __int128 v17;
  __int128 v18;

  v2 = *((_QWORD *)this + 4);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 24);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return 0;
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 80) + 8) + 192);
  if (!v5)
    return 0;
  if (!*(_BYTE *)(v5 + 179) || *((_QWORD *)this + 128) != 0)
    return 0;
  v9 = (WTF::StringImpl **)((char *)this + 336);
  if ((*((_BYTE *)this + 520) & 1) == 0)
  {
    v14 = v5;
    v15 = this;
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::InspectorInstrumentationWebKit *)((char *)this + 336));
    v5 = v14;
    this = v15;
    *((_BYTE *)v15 + 520) |= 1u;
  }
  v10 = *v9;
  if (*v9)
    *(_DWORD *)v10 += 2;
  v16 = v10;
  v11 = *(_OWORD *)((char *)this + 360);
  v17 = *(_OWORD *)((char *)this + 344);
  v18 = v11;
  shouldIntercept = WebCore::InspectorNetworkAgent::shouldIntercept(v5, (WTF::URL *)&v16, 200);
  v13 = v16;
  v16 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  return shouldIntercept;
}

uint64_t WebCore::InspectorInstrumentationWebKit::shouldInterceptResponseInternal(WebCore::InspectorInstrumentationWebKit *this, const WebCore::LocalFrame *a2, const WebCore::ResourceResponse *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v7;
  __int128 v8;
  WTF::StringImpl *v9;
  uint64_t shouldIntercept;
  WTF::StringImpl *v11;
  WTF::StringImpl *v13;
  __int128 v14;
  __int128 v15;

  v3 = *((_QWORD *)this + 3);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return 0;
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 80) + 8) + 192);
  if (!v5 || !*(_BYTE *)(v5 + 179))
    return 0;
  WebCore::ResourceResponse::platformLazyInit((uint64_t)a2, 1);
  v7 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v7 += 2;
  v13 = v7;
  v8 = *(_OWORD *)((char *)a2 + 24);
  v14 = *(_OWORD *)((char *)a2 + 8);
  v15 = v8;
  shouldIntercept = WebCore::InspectorNetworkAgent::shouldIntercept(v5, (WTF::URL *)&v13, 201);
  v11 = v13;
  v13 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
  return shouldIntercept;
}

WTF::StringImpl *WebCore::InspectorInstrumentationWebKit::interceptRequestInternal(WTF::StringImpl *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WebCore::ResourceLoader *v6;

  v2 = *((_QWORD *)result + 4);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 24);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 8);
      if (v4)
      {
        v6 = result;
        result = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(v4 + 80) + 8) + 192);
        if (result)
          return WebCore::InspectorNetworkAgent::interceptRequest((uint64_t)result, v6, a2);
      }
    }
  }
  return result;
}

WTF::StringImpl *WebCore::InspectorInstrumentationWebKit::interceptResponseInternal(WTF::StringImpl *result, uint64_t a2, Inspector::IdentifiersFactory *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *((_QWORD *)result + 3);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      result = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(v5 + 80) + 8) + 192);
      if (result)
        return WebCore::InspectorNetworkAgent::interceptResponse((uint64_t)result, a2, a3, a4);
    }
  }
  return result;
}

WebCore::InspectorNodeFinder *WebCore::InspectorNodeFinder::InspectorNodeFinder(WebCore::InspectorNodeFinder *this, const WTF::String *a2, char a3)
{
  const WTF::String *v3;
  _DWORD *v5;
  WTF::StringImpl **v6;
  char v7;
  WTF::StringImpl *v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  int v13;
  int v14;
  WTF::StringImpl *v15;
  BOOL v16;
  char v17;
  WTF::StringImpl *v19;

  v3 = a2;
  v5 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v5 += 2;
  *(_QWORD *)this = v5;
  *((_QWORD *)this + 1) = 0;
  v6 = (WTF::StringImpl **)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  *((_BYTE *)this + 24) = a3;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = 0;
  if (!*(_QWORD *)a2)
  {
    *((_BYTE *)this + 56) = 0;
    goto LABEL_33;
  }
  v7 = WTF::StringImpl::startsWith();
  v8 = *(WTF::StringImpl **)v3;
  *((_BYTE *)this + 56) = v7;
  if (!v8)
  {
LABEL_33:
    v10 = 0;
    *((_BYTE *)this + 57) = 0;
    goto LABEL_9;
  }
  v9 = WTF::StringImpl::endsWith();
  v10 = *(WTF::StringImpl **)v3;
  *((_BYTE *)this + 57) = v9;
  if (v10)
  {
    a2 = (const WTF::String *)*((unsigned __int8 *)this + 56);
    if (*((_BYTE *)this + 56) || *((_DWORD *)v10 + 1) > (*((_DWORD *)v10 + 1) - ((_DWORD)a2 + v9)))
    {
      WTF::StringImpl::substring(v10);
      v10 = v19;
    }
    else
    {
      *(_DWORD *)v10 += 2;
    }
  }
LABEL_9:
  v11 = *v6;
  *v6 = v10;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = *(WTF::StringImpl **)v3;
  if (!*(_QWORD *)v3)
  {
    v13 = 0;
    goto LABEL_35;
  }
  v13 = WTF::StringImpl::startsWith();
  v12 = *(WTF::StringImpl **)v3;
  if (!*(_QWORD *)v3)
  {
LABEL_35:
    v14 = 0;
    goto LABEL_18;
  }
  v14 = WTF::StringImpl::endsWith();
  v12 = *(WTF::StringImpl **)v3;
  if (*(_QWORD *)v3)
  {
    if ((v13 & 1) != 0 || *((_DWORD *)v12 + 1) > (*((_DWORD *)v12 + 1) - (v14 + v13)))
    {
      WTF::StringImpl::substring(v12);
      v12 = v19;
    }
    else
    {
      *(_DWORD *)v12 += 2;
    }
  }
LABEL_18:
  v15 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = v12;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, a2);
    else
      *(_DWORD *)v15 -= 2;
  }
  if (v13)
    v16 = v14 == 0;
  else
    v16 = 1;
  v17 = !v16;
  *((_BYTE *)this + 58) = v17;
  return this;
}

_DWORD *WebCore::InspectorNodeFinder::searchUsingXPath(WebCore::InspectorNodeFinder *this, WebCore::Node *a2, double a3, double a4, float a5)
{
  uint64_t v7;
  _DWORD *v8;
  void *v9;
  WTF *v10;
  _DWORD *result;
  int v12;
  uint64_t v13;
  uint64_t v14;
  __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  __int16 *v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v25;
  void *v26;
  WTF *v27;
  void *v28;
  uint64_t *v29[3];
  uint64_t v30;
  _QWORD v31[2];
  int v32;
  _QWORD v33[2];
  int v34;
  _QWORD v35[2];
  int v36;

  v7 = *(_QWORD *)(*((_QWORD *)a2 + 5) + 8);
  v33[0] = 0;
  if (!*(_QWORD *)(v7 + 1800))
  {
    v8 = (_DWORD *)WTF::fastMalloc((WTF *)4);
    *v8 = 1;
    v10 = *(WTF **)(v7 + 1800);
    *(_QWORD *)(v7 + 1800) = v8;
    if (v10)
    {
      if (*(_DWORD *)v10 == 1)
        WTF::fastFree(v10, v9);
      else
        --*(_DWORD *)v10;
    }
  }
  WebCore::XPathEvaluator::evaluate(this, (unsigned __int16 *)a2, (BOOL *)v33, (void *)7, (uint64_t)v35, a3, a4, a5);
  result = (_DWORD *)v33[0];
  v33[0] = 0;
  if (result)
  {
    if (result[2] == 1)
      result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  v12 = v36;
  if (!v36)
  {
    v13 = v35[0];
    v35[0] = 0;
    if ((*(_WORD *)(v13 + 64) & 0xFFFE) == 6)
    {
      if (*(_BYTE *)(v13 + 8))
      {
        {
          WebCore::XPath::Expression::evaluationContext(void)::context = 0u;
          *(_OWORD *)&qword_1EE2F9830 = 0u;
        }
        byte_1EE2F9838 = 1;
      }
      v14 = *(_QWORD *)(v13 + 24);
      if (v14)
      {
        v15 = (__int16 *)(v14 + 16);
      }
      else
      {
        v15 = &WebCore::XPath::Value::toNodeSet(void)const::emptyNodeSet;
        {
          WebCore::XPath::Value::toNodeSet(void)const::emptyNodeSet = 1;
          qword_1EE2F9850 = 0;
          unk_1EE2F9858 = 0;
        }
      }
      v17 = *((unsigned int *)v15 + 5);
      LODWORD(v33[0]) = v17;
      v34 = 0;
      if ((_DWORD)v17)
      {
        v18 = 0;
        v19 = (uint64_t *)((char *)this + 32);
        do
        {
          if ((*(_WORD *)(v13 + 64) & 0xFFFE) != 6)
            break;
          if (*(_BYTE *)(v13 + 8))
          {
            {
              WebCore::XPath::Expression::evaluationContext(void)::context = 0u;
              *(_OWORD *)&qword_1EE2F9830 = 0u;
            }
            byte_1EE2F9838 = 1;
          }
          v20 = *(_QWORD *)(v13 + 24);
          if (v20)
          {
            v21 = (__int16 *)(v20 + 16);
          }
          else
          {
            v21 = &WebCore::XPath::Value::toNodeSet(void)const::emptyNodeSet;
            {
              WebCore::XPath::Value::toNodeSet(void)const::emptyNodeSet = 1;
              qword_1EE2F9850 = 0;
              unk_1EE2F9858 = 0;
            }
          }
          if (v18 >= *((unsigned int *)v21 + 5))
            v22 = 0;
          else
            v22 = *(_QWORD *)(*((_QWORD *)v21 + 1) + 8 * v18);
          v30 = v22;
          v31[0] = v22;
          v32 = 0;
          if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v22 + 184))(v22)
            || (v25 = *(_QWORD *)(v22 + 80)) != 0 && (v22 = *(_QWORD *)(v25 + 8), (v30 = v22) != 0))
          {
            if ((WebCore::Node *)v22 != a2)
            {
              v23 = *((_WORD *)a2 + 14);
              if ((v23 & 0xF000) == 0x9000)
              {
                if (**(WebCore::Node ***)(v22 + 40) != a2
                  || (*(_WORD *)(v22 + 28) & 0xF000) == 0x9000
                  || (*(_BYTE *)(v22 + 22) & 8) == 0)
                {
                  goto LABEL_47;
                }
              }
              else
              {
                if ((v23 & 4) == 0
                  || !*((_QWORD *)a2 + 10)
                  || ((*(unsigned __int8 *)(v22 + 22) ^ *((unsigned __int8 *)a2 + 22)) & 8) != 0)
                {
                  goto LABEL_47;
                }
                do
                  v22 = *(_QWORD *)(v22 + 32);
                while ((WebCore::Node *)v22 != a2 && v22 != 0);
                if (!v22)
                  goto LABEL_47;
              }
            }
            WTF::ListHashSet<WebCore::Node *,WTF::DefaultHash<WebCore::Node *>>::add(v29, v19, &v30);
          }
LABEL_47:
          if (v32 != -1)
            off_1E33EE940[v32](v29, v31);
          ++v18;
        }
        while (v18 != v17);
      }
      v16 = 0;
    }
    else
    {
      LOBYTE(v33[0]) = 33;
      v33[1] = 0;
      v16 = 1;
      v34 = 1;
    }
    result = (_DWORD *)((uint64_t (*)(_QWORD *, _QWORD *))off_1E33EE950[v16])(v31, v33);
    if (v13)
    {
      if (*(_DWORD *)v13 == 1)
      {
        WebCore::XPathResult::~XPathResult((WebCore::XPathResult *)v13, v26);
        result = (_DWORD *)WTF::fastFree(v27, v28);
      }
      else
      {
        --*(_DWORD *)v13;
      }
    }
    v12 = v36;
  }
  if (v12 != -1)
    return (_DWORD *)((uint64_t (*)(_QWORD *, _QWORD *))off_1E33EE960[v12])(v33, v35);
  return result;
}

unsigned int *WebCore::InspectorNodeFinder::searchUsingCSSSelectors(unsigned int *this, WebCore::Node *a2)
{
  unsigned int *v3;
  void *v4;
  int v5;
  _DWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t *v9;
  unsigned int *v10;
  uint64_t v11;
  int v12;
  unsigned int **v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int i;
  unsigned int v19;
  unsigned int **v20;
  unsigned int **v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int **v30;
  _QWORD v31[2];
  int v32;
  char v33;

  if ((*((_WORD *)a2 + 14) & 4) != 0)
  {
    v3 = this;
    *((_DWORD *)a2 + 6) += 2;
    this = WebCore::ContainerNode::querySelectorAll(a2, (const WTF::StringImpl **)this, (uint64_t)v31);
    v5 = v32;
    if (!v32)
    {
      v6 = (_DWORD *)v31[0];
      v31[0] = 0;
      this = (unsigned int *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
      if (!(_DWORD)this)
        goto LABEL_38;
      v7 = (int)this;
      v8 = 0;
      v9 = (uint64_t *)(v3 + 8);
      while (1)
      {
        this = (unsigned int *)(*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)v6 + 24))(v6, v8);
        v10 = this;
        v11 = *v9;
        if (*v9
          || (this = (unsigned int *)WTF::HashTable<WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *,WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *>>::rehash((uint64_t *)v3 + 4, 8u, 0), (v11 = *v9) != 0))
        {
          v12 = *(_DWORD *)(v11 - 8);
        }
        else
        {
          v12 = 0;
        }
        v13 = 0;
        v14 = ((unint64_t)v10 + ~((_QWORD)v10 << 32)) ^ (((unint64_t)v10 + ~((_QWORD)v10 << 32)) >> 22);
        v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
        v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
        v17 = (v16 >> 31) ^ v16;
        for (i = 1; ; ++i)
        {
          v19 = v17 & v12;
          v20 = (unsigned int **)(v11 + 8 * v19);
          v21 = (unsigned int **)*v20;
          if (*v20 == (unsigned int *)-1)
          {
            v13 = (unsigned int **)(v11 + 8 * v19);
            goto LABEL_14;
          }
          if (!v21)
            break;
          if (*v21 == v10)
            goto LABEL_34;
LABEL_14:
          v17 = i + v19;
        }
        if (v13)
        {
          *v13 = 0;
          --*(_DWORD *)(*v9 - 16);
          v20 = v13;
        }
        this = (unsigned int *)WTF::fastMalloc((WTF *)0x18);
        *((_QWORD *)this + 1) = 0;
        *((_QWORD *)this + 2) = 0;
        *(_QWORD *)this = v10;
        *v20 = this;
        v22 = *v9;
        if (*v9)
          v23 = *(_DWORD *)(v22 - 12) + 1;
        else
          v23 = 1;
        *(_DWORD *)(v22 - 12) = v23;
        v24 = *v9;
        if (*v9)
          v25 = *(_DWORD *)(v24 - 12);
        else
          v25 = 0;
        v26 = (*(_DWORD *)(v24 - 16) + v25);
        v27 = *(unsigned int *)(v24 - 4);
        if (v27 > 0x400)
        {
          if (v27 <= 2 * v26)
          {
LABEL_26:
            v28 = (_DWORD)v27 << (6 * *(_DWORD *)(v24 - 12) >= (2 * v27));
            goto LABEL_29;
          }
        }
        else if (3 * v27 <= 4 * v26)
        {
          if ((_DWORD)v27)
            goto LABEL_26;
          v28 = 8;
LABEL_29:
          this = (unsigned int *)*WTF::HashTable<WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *,WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *>>::rehash((uint64_t *)v3 + 4, v28, (_QWORD **)v20);
        }
        v29 = *((_QWORD *)v3 + 6);
        *((_QWORD *)this + 1) = v29;
        *((_QWORD *)this + 2) = 0;
        if (v29)
          v30 = (unsigned int **)(v29 + 16);
        else
          v30 = (unsigned int **)(v3 + 10);
        *v30 = this;
        *((_QWORD *)v3 + 6) = this;
LABEL_34:
        v8 = (v8 + 1);
        if ((_DWORD)v8 == v7)
        {
LABEL_38:
          if (v6[4] == 1)
            this = (unsigned int *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
          else
            --v6[4];
          v5 = v32;
          break;
        }
      }
    }
    if (v5 != -1)
      this = (unsigned int *)((uint64_t (*)(char *, _QWORD *))off_1E33EE970[v5])(&v33, v31);
    if (*((_DWORD *)a2 + 6) == 2)
    {
      if ((*((_WORD *)a2 + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef(a2, v4);
    }
    else
    {
      *((_DWORD *)a2 + 6) -= 2;
    }
  }
  return this;
}

uint64_t WebCore::InspectorNodeFinder::searchUsingDOMTreeTraversal(uint64_t this, WebCore::Node *a2)
{
  uint64_t v3;
  uint64_t *v4;
  unsigned __int16 *i;
  unsigned int v6;
  unsigned int v7;
  uint64_t IgnoringASCIICase;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  unint64_t v12;
  WTF::String *v13;
  __n128 v14;
  int v15;
  const WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  WTF *v32;
  char v33;
  uint64_t v34;
  BOOL v35;
  int v36;
  WTF::StringImpl *v37;
  WebCore::Node *v38;
  double v39;
  double v40;
  float v41;
  WebCore::Node *v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  WTF::StringImpl *v48[3];
  WebCore::Node *v49;

  v3 = this;
  v49 = a2;
  v4 = (uint64_t *)(this + 32);
  for (i = (unsigned __int16 *)a2; ; v49 = (WebCore::Node *)i)
  {
    v6 = i[14];
    v7 = v6 >> 12;
    if ((v6 >> 12) - 3 >= 2)
      break;
LABEL_5:
    (*(void (**)(WTF::StringImpl **__return_ptr, unsigned __int16 *))(*(_QWORD *)i + 112))(v48, i);
    if (*(_BYTE *)(v3 + 24))
    {
      this = (uint64_t)v48[0];
      if (!v48[0])
        goto LABEL_126;
      IgnoringASCIICase = WTF::StringImpl::find();
    }
    else
    {
      this = (uint64_t)v48[0];
      if (!v48[0])
        goto LABEL_126;
      IgnoringASCIICase = WTF::StringImpl::findIgnoringASCIICase();
    }
    v10 = IgnoringASCIICase;
    this = (uint64_t)v48[0];
    v48[0] = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v9);
      else
        *(_DWORD *)this -= 2;
    }
    if (v10 != -1)
      this = (uint64_t)WTF::ListHashSet<WebCore::Node *,WTF::DefaultHash<WebCore::Node *>>::add((uint64_t **)v48, v4, &v49);
LABEL_126:
    v42 = v49;
    if ((*((_WORD *)v49 + 14) & 4) != 0)
    {
      i = (unsigned __int16 *)*((_QWORD *)v49 + 10);
      if (i)
        continue;
    }
    if (v49 == a2)
      return this;
    while (1)
    {
      i = (unsigned __int16 *)*((_QWORD *)v42 + 7);
      if (i)
        break;
      v42 = (WebCore::Node *)*((_QWORD *)v42 + 4);
      if (v42)
        v43 = v42 == a2;
      else
        v43 = 1;
      if (v43)
        return this;
    }
  }
  if (v7 != 1)
  {
    if (v7 != 8)
      goto LABEL_126;
    goto LABEL_5;
  }
  if ((v6 & 8) != 0)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr, unsigned __int16 *))(*(_QWORD *)i + 104))(v48, i);
    v15 = *(unsigned __int8 *)(v3 + 57);
    if (*(_BYTE *)(v3 + 56))
      goto LABEL_17;
    if (*(_BYTE *)(v3 + 57))
    {
LABEL_22:
      v15 = *(unsigned __int8 *)(v3 + 57);
      goto LABEL_44;
    }
    v18 = *(_QWORD *)(v3 + 8);
    if (*(_BYTE *)(v3 + 24))
    {
      if (v18)
      {
        v11 = *(WTF::StringImpl **)(v18 + 8);
        v12 = *(unsigned int *)(v18 + 4) | ((unint64_t)((*(_DWORD *)(v18 + 16) >> 2) & 1) << 32);
      }
      else
      {
        v11 = 0;
        v12 = 0x100000000;
      }
      if (v48[0])
      {
        v19 = WTF::StringImpl::find();
        goto LABEL_37;
      }
      goto LABEL_43;
    }
    if (v18)
    {
      v11 = *(WTF::StringImpl **)(v18 + 8);
      v12 = *(unsigned int *)(v18 + 4) | ((unint64_t)((*(_DWORD *)(v18 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v11 = 0;
      v12 = 0x100000000;
    }
    if (v48[0])
    {
      v19 = WTF::StringImpl::findIgnoringASCIICase();
LABEL_37:
      if (v19 != -1)
        goto LABEL_60;
    }
LABEL_43:
    v15 = *(unsigned __int8 *)(v3 + 57);
    if (!*(_BYTE *)(v3 + 56))
    {
LABEL_44:
      if (v15)
      {
        v20 = *(_QWORD *)(v3 + 8);
        if (*(_BYTE *)(v3 + 24))
        {
          if (v20)
          {
            v11 = *(WTF::StringImpl **)(v20 + 8);
            v12 = *(unsigned int *)(v20 + 4) | ((unint64_t)((*(_DWORD *)(v20 + 16) >> 2) & 1) << 32);
          }
          else
          {
            v11 = 0;
            v12 = 0x100000000;
          }
          if (v48[0])
          {
            if ((WTF::StringImpl::endsWith() & 1) == 0)
              goto LABEL_69;
LABEL_60:
            v21 = 1;
LABEL_121:
            v37 = v48[0];
            v48[0] = 0;
            if (v37)
            {
              if (*(_DWORD *)v37 != 2)
              {
                *(_DWORD *)v37 -= 2;
                if ((v21 & 1) != 0)
                  goto LABEL_124;
LABEL_125:
                v38 = v49;
                this = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v49 + 192))(v49);
                if ((_DWORD)this)
                {
                  v44 = *((_QWORD *)v38 + 14);
                  if (v44)
                  {
                    v45 = *(_QWORD *)(v44 + 8);
                    if (v45)
                    {
                      if (!*(_BYTE *)(v45 + 144))
                      {
                        v46 = *(_QWORD *)(v45 + 296);
                        if (v46)
                        {
                          *(_DWORD *)(v46 + 24) += 2;
                          WebCore::InspectorNodeFinder::searchUsingXPath((WebCore::InspectorNodeFinder *)v3, (WebCore::Node *)v46, v39, v40, v41);
                          WebCore::InspectorNodeFinder::searchUsingCSSSelectors((unsigned int *)v3, (WebCore::Node *)v46);
                          this = WebCore::InspectorNodeFinder::searchUsingDOMTreeTraversal((WebCore::InspectorNodeFinder *)v3, (WebCore::Node *)v46);
                          if (*(_DWORD *)(v46 + 24) == 2)
                          {
                            if ((*(_WORD *)(v46 + 30) & 0x400) == 0)
                              this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v46, v47);
                          }
                          else
                          {
                            *(_DWORD *)(v46 + 24) -= 2;
                          }
                        }
                      }
                    }
                  }
                }
                goto LABEL_126;
              }
              WTF::StringImpl::destroy(v37, v11);
              if ((v21 & 1) == 0)
                goto LABEL_125;
            }
            else if (!v21)
            {
              goto LABEL_125;
            }
LABEL_124:
            WTF::ListHashSet<WebCore::Node *,WTF::DefaultHash<WebCore::Node *>>::add((uint64_t **)v48, v4, &v49);
            goto LABEL_125;
          }
        }
        else
        {
          if (v20)
          {
            v11 = *(WTF::StringImpl **)(v20 + 8);
            v12 = *(unsigned int *)(v20 + 4) | ((unint64_t)((*(_DWORD *)(v20 + 16) >> 2) & 1) << 32);
          }
          else
          {
            v11 = 0;
            v12 = 0x100000000;
          }
          if (v48[0])
          {
            if ((WTF::StringImpl::endsWithIgnoringASCIICase() & 1) == 0)
              goto LABEL_69;
            goto LABEL_60;
          }
        }
        if (!(_DWORD)v12)
          goto LABEL_124;
      }
LABEL_69:
      v22 = *((_QWORD *)i + 13);
      if (v22)
      {
        if ((*(_BYTE *)(v22 + 4) & 8) != 0)
          WebCore::StyledElement::synchronizeStyleAttributeInternalImpl((WebCore::StyledElement *)i, (unsigned __int8 *)v11, v14, v12, v13);
        if ((i[14] & 0x20) != 0)
          WebCore::SVGElement::synchronizeAllAttributes((WebCore::SVGElement *)i);
        v23 = *((_QWORD *)i + 13);
        if (v23)
        {
          v24 = *(_DWORD *)(v23 + 4);
          if ((v24 & 1) != 0)
          {
            v26 = *(_DWORD *)(v23 + 52);
            if (v26)
            {
              v25 = *(_QWORD *)(v23 + 40);
LABEL_80:
              v27 = 0;
              while (2)
              {
                v28 = *(_QWORD *)(v25 + 16 * v27);
                v29 = *(_QWORD *)v3;
                if (*(_BYTE *)(v3 + 24))
                {
                  if (v29)
                    v30 = *(unsigned int *)(v29 + 4) | ((unint64_t)((*(_DWORD *)(v29 + 16) >> 2) & 1) << 32);
                  else
                    v30 = 0x100000000;
                  if (*(_QWORD *)(v28 + 24))
                  {
                    v31 = WTF::StringImpl::find();
LABEL_86:
                    if (v31 != -1)
                      goto LABEL_60;
                  }
                }
                else
                {
                  if (v29)
                    v30 = *(unsigned int *)(v29 + 4) | ((unint64_t)((*(_DWORD *)(v29 + 16) >> 2) & 1) << 32);
                  else
                    v30 = 0x100000000;
                  if (*(_QWORD *)(v28 + 24))
                  {
                    v31 = WTF::StringImpl::findIgnoringASCIICase();
                    goto LABEL_86;
                  }
                }
                v32 = *(WTF **)(v25 + 16 * v27 + 8);
                if (v32)
                  *(_DWORD *)v32 += 2;
                v11 = *(WTF::StringImpl **)(v3 + 16);
                if (*(_BYTE *)(v3 + 58))
                {
                  if (*(_BYTE *)(v3 + 24))
                    v33 = WTF::equal(v32, v11, (const WTF::StringImpl *)v30);
                  else
                    v33 = WTF::equalIgnoringASCIICase(v32, v11, (const WTF::StringImpl *)v30);
                  v35 = v33;
                  if (!v32)
                    goto LABEL_105;
LABEL_103:
                  if (*(_DWORD *)v32 == 2)
                  {
                    WTF::StringImpl::destroy(v32, v11);
                    if (v35)
                      goto LABEL_60;
                  }
                  else
                  {
                    *(_DWORD *)v32 -= 2;
LABEL_105:
                    if (v35)
                      goto LABEL_60;
                  }
LABEL_106:
                  v36 = v27 + 1;
                  v27 = (v27 + 1);
                  if (v26 == v36)
                    goto LABEL_120;
                  continue;
                }
                break;
              }
              if (*(_BYTE *)(v3 + 24))
              {
                if (v11)
                {
                  if (!v32)
                    goto LABEL_106;
                }
                else if (!v32)
                {
                  goto LABEL_106;
                }
                v34 = WTF::StringImpl::find();
              }
              else
              {
                if (v11)
                {
                  if (!v32)
                    goto LABEL_106;
                }
                else if (!v32)
                {
                  goto LABEL_106;
                }
                v34 = WTF::StringImpl::findIgnoringASCIICase();
              }
              v35 = v34 != -1;
              goto LABEL_103;
            }
          }
          else if (v24 >= 0x20)
          {
            v25 = v23 + 32;
            v26 = v24 >> 5;
            goto LABEL_80;
          }
        }
      }
LABEL_120:
      v21 = 0;
      goto LABEL_121;
    }
LABEL_17:
    if (v15)
    {
      v16 = *(const WTF::StringImpl **)(v3 + 8);
      if (*(_BYTE *)(v3 + 24))
      {
        if ((WTF::equal(v48[0], v16, (const WTF::StringImpl *)v12) & 1) != 0)
          goto LABEL_60;
      }
      else if ((WTF::equalIgnoringASCIICase(v48[0], v16, (const WTF::StringImpl *)v12) & 1) != 0)
      {
        goto LABEL_60;
      }
    }
    v15 = *(unsigned __int8 *)(v3 + 57);
    if (!*(_BYTE *)(v3 + 56))
      goto LABEL_44;
    if (*(_BYTE *)(v3 + 57))
      goto LABEL_69;
    v17 = *(_QWORD *)(v3 + 8);
    if (*(_BYTE *)(v3 + 24))
    {
      if (v17)
      {
        v11 = *(WTF::StringImpl **)(v17 + 8);
        v12 = *(unsigned int *)(v17 + 4) | ((unint64_t)((*(_DWORD *)(v17 + 16) >> 2) & 1) << 32);
      }
      else
      {
        v11 = 0;
        v12 = 0x100000000;
      }
      if (v48[0])
      {
        if ((WTF::StringImpl::startsWith() & 1) != 0)
          goto LABEL_60;
LABEL_68:
        if (!*(_BYTE *)(v3 + 56))
          goto LABEL_22;
        goto LABEL_69;
      }
    }
    else
    {
      if (v17)
      {
        v11 = *(WTF::StringImpl **)(v17 + 8);
        v12 = *(unsigned int *)(v17 + 4) | ((unint64_t)((*(_DWORD *)(v17 + 16) >> 2) & 1) << 32);
      }
      else
      {
        v11 = 0;
        v12 = 0x100000000;
      }
      if (v48[0])
      {
        if ((WTF::StringImpl::startsWithIgnoringASCIICase() & 1) != 0)
          goto LABEL_60;
        goto LABEL_68;
      }
    }
    if (!(_DWORD)v12)
      goto LABEL_124;
    goto LABEL_68;
  }
  this = 96;
  __break(0xC471u);
  return this;
}

uint64_t **WTF::ListHashSet<WebCore::Node *,WTF::DefaultHash<WebCore::Node *>>::add(uint64_t **result, uint64_t *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t v6;
  int v7;
  uint64_t **v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  int i;
  unsigned int v14;
  uint64_t **v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  char v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t ***v26;

  v5 = result;
  v6 = *a2;
  if (*a2
    || (result = (uint64_t **)WTF::HashTable<WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *,WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *>>::rehash(a2, 8u, 0), (v6 = *a2) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = 0;
  v9 = ~(*a3 << 32) + *a3;
  v10 = 9 * (((v9 ^ (v9 >> 22)) + ~((v9 ^ (v9 >> 22)) << 13)) ^ (((v9 ^ (v9 >> 22)) + ~((v9 ^ (v9 >> 22)) << 13)) >> 8));
  v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
  v12 = (v11 >> 31) ^ v11;
  for (i = 1; ; ++i)
  {
    v14 = v12 & v7;
    v15 = (uint64_t **)(v6 + 8 * (v12 & v7));
    v16 = *v15;
    if (*v15 == (uint64_t *)-1)
    {
      v8 = (uint64_t **)(v6 + 8 * v14);
      goto LABEL_10;
    }
    if (!v16)
      break;
    if (*v16 == *a3)
    {
      v19 = 0;
      goto LABEL_31;
    }
LABEL_10:
    v12 = i + v14;
  }
  if (v8)
  {
    *v8 = 0;
    --*(_DWORD *)(*a2 - 16);
    v15 = v8;
  }
  result = (uint64_t **)WTF::fastMalloc((WTF *)0x18);
  *result = (uint64_t *)*a3;
  result[1] = 0;
  result[2] = 0;
  *v15 = (uint64_t *)result;
  v17 = *a2;
  if (*a2)
    v18 = *(_DWORD *)(v17 - 12) + 1;
  else
    v18 = 1;
  *(_DWORD *)(v17 - 12) = v18;
  v20 = *a2;
  if (*a2)
    v21 = *(_DWORD *)(v20 - 12);
  else
    v21 = 0;
  v22 = (*(_DWORD *)(v20 - 16) + v21);
  v23 = *(unsigned int *)(v20 - 4);
  if (v23 > 0x400)
  {
    if (v23 <= 2 * v22)
      goto LABEL_25;
  }
  else if (3 * v23 <= 4 * v22)
  {
    if (!(_DWORD)v23)
    {
      v24 = 8;
      goto LABEL_26;
    }
LABEL_25:
    v24 = (_DWORD)v23 << (6 * *(_DWORD *)(v20 - 12) >= (2 * v23));
LABEL_26:
    v15 = (uint64_t **)WTF::HashTable<WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *,WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *>>::rehash(a2, v24, v15);
    result = (uint64_t **)*v15;
  }
  v25 = a2[2];
  result[1] = (uint64_t *)v25;
  result[2] = 0;
  if (v25)
    v26 = (uint64_t ***)(v25 + 16);
  else
    v26 = (uint64_t ***)(a2 + 1);
  *v26 = result;
  a2[2] = (uint64_t)result;
  v16 = *v15;
  v19 = 1;
LABEL_31:
  *v5 = a2;
  v5[1] = v16;
  *((_BYTE *)v5 + 16) = v19;
  return result;
}

uint64_t WebCore::InspectorOverlay::updatePaintRectsTimerFired(WebCore::InspectorOverlay *this)
{
  uint64_t result;
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = WTF::MonotonicTime::now(this);
  v5 = *((_QWORD *)this + 23);
  v4 = *((_QWORD *)this + 24);
  if (v5 != v4)
  {
    v6 = *((_QWORD *)this + 25);
    if (*(double *)(v6 + 24 * v5) >= v3)
      return result;
    v7 = *((unsigned int *)this + 52) - 1;
    if (v5 == v7)
      v8 = 0;
    else
      v8 = v5 + 1;
    *((_QWORD *)this + 23) = v8;
    if (v8 == v4)
    {
LABEL_14:
      if ((*((_QWORD *)this + 31) & 0xFFFFFFFFFFFFLL) != 0)
        WebCore::TimerBase::stopSlowCase((WebCore::InspectorOverlay *)((char *)this + 216));
    }
    else
    {
      while (*(double *)(v6 + 24 * v8) < v3)
      {
        if (v8 == v7)
          v8 = 0;
        else
          ++v8;
        *((_QWORD *)this + 23) = v8;
        if (v8 == v4)
          goto LABEL_14;
      }
    }
    if (*((_QWORD *)this + 2)
      || *((_QWORD *)this + 3)
      || *((_QWORD *)this + 16)
      || *((_DWORD *)this + 71)
      || *((_DWORD *)this + 75)
      || *((_BYTE *)this + 304)
      || *((_BYTE *)this + 305)
      || *((_BYTE *)this + 306))
    {
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)this + 160) + 56))(*(_QWORD *)(*(_QWORD *)this + 160));
      if (!result)
        return result;
      v9 = 7;
    }
    else
    {
      v9 = 8;
    }
    return (*(uint64_t (**)(void))(**((_QWORD **)this + 1) + 8 * v9))();
  }
  if ((*((_QWORD *)this + 31) & 0xFFFFFFFFFFFFLL) != 0)
    return WebCore::TimerBase::stopSlowCase((WebCore::InspectorOverlay *)((char *)this + 216));
  return result;
}

void WebCore::InspectorOverlay::~InspectorOverlay(WebCore::InspectorOverlay *this, void *a2)
{
  unsigned int v3;
  WTF *v4;
  unsigned int v5;
  WTF *v6;
  uint64_t v7;
  void *v8;
  WTF *v9;
  void *v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  _DWORD *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;

  v3 = *((_DWORD *)this + 75);
  if (v3)
    WTF::VectorDestructor<true,WebCore::InspectorOverlay::Grid>::destruct(*((unsigned int **)this + 36), (unsigned int *)(*((_QWORD *)this + 36) + 24 * v3));
  v4 = (WTF *)*((_QWORD *)this + 36);
  if (v4)
  {
    *((_QWORD *)this + 36) = 0;
    *((_DWORD *)this + 74) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = *((_DWORD *)this + 71);
  if (v5)
    WTF::VectorDestructor<true,WebCore::InspectorOverlay::Grid>::destruct(*((unsigned int **)this + 34), (unsigned int *)(*((_QWORD *)this + 34) + 24 * v5));
  v6 = (WTF *)*((_QWORD *)this + 34);
  if (v6)
  {
    *((_QWORD *)this + 34) = 0;
    *((_DWORD *)this + 70) = 0;
    WTF::fastFree(v6, a2);
  }
  *((_QWORD *)this + 27) = off_1E31F7378;
  v7 = *((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  WebCore::TimerBase::~TimerBase((WebCore::InspectorOverlay *)((char *)this + 216));
  v9 = (WTF *)*((_QWORD *)this + 25);
  if (v9)
  {
    *((_QWORD *)this + 25) = 0;
    *((_DWORD *)this + 52) = 0;
    WTF::fastFree(v9, v8);
  }
  WebCore::InspectorOverlayHighlight::Config::~Config((WebCore::InspectorOverlay *)((char *)this + 136), v8);
  v11 = (WTF *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v11)
    WTF::fastFree(v11, v10);
  if (*((_BYTE *)this + 120))
  {
    v12 = *((_QWORD *)this + 13);
    if ((v12 & 0x8000000000000) != 0)
    {
      v17 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFLL);
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        atomic_store(1u, v17);
        WTF::fastFree((WTF *)v17, v10);
      }
    }
  }
  if (*((_BYTE *)this + 96))
  {
    v13 = *((_QWORD *)this + 10);
    if ((v13 & 0x8000000000000) != 0)
    {
      v20 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFLL);
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        atomic_store(1u, v20);
        WTF::fastFree((WTF *)v20, v10);
      }
    }
  }
  WebCore::InspectorOverlayHighlight::Config::~Config((WebCore::InspectorOverlay *)((char *)this + 32), v10);
  v15 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v15)
  {
    if (v15[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
    else
      --v15[4];
  }
  v16 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v16)
  {
    if (*(_DWORD *)(v16 + 24) == 2)
    {
      if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v16, v14);
    }
    else
    {
      *(_DWORD *)(v16 + 24) -= 2;
    }
  }
}

uint64_t WebCore::InspectorOverlay::paint(uint64_t this, WebCore::GraphicsContext *a2)
{
  WTF::StringImpl *v2;
  _DWORD *v3;
  unint64_t v4;
  float v5;
  WTF::StringImpl *v7;
  WebCore::ScrollView *v8;
  unint64_t v9;
  float v10;
  float v11;
  void *v12;
  _OWORD *v13;
  void *v14;
  WebCore::FloatRect *v15;
  __n128 v16;
  __n128 v17;
  float32x2_t v18;
  int8x8_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  __n128 v25;
  float32x2_t v26;
  int8x8_t v27;
  unsigned int *v28;
  WTF::StringImpl *v29;
  unsigned int v30;
  WTF::StringImpl *v31;
  void *v32;
  const WebCore::InspectorOverlayHighlight::GridHighlightOverlay *v33;
  WTF::StringImpl *v34;
  unsigned int v35;
  unsigned int v36;
  void *v37;
  unsigned int *v38;
  unsigned int v39;
  WTF::StringImpl *v40;
  void *v41;
  const WebCore::InspectorOverlayHighlight::FlexHighlightOverlay *v42;
  WTF::StringImpl *v43;
  unsigned int v44;
  unsigned int v45;
  void *v46;
  uint64_t v47;
  WTF *v48;
  uint64_t v49;
  WTF *v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  __n128 v62;
  __n128 v63;
  float32x2_t v64;
  int8x8_t v65;
  unsigned int *v66;
  unsigned int v67;
  WTF::StringImpl *v68;
  unint64_t v69;
  void *v70;
  const WebCore::InspectorOverlayHighlight::GridHighlightOverlay *v71;
  unsigned int v72;
  unsigned int v73;
  void *v74;
  unsigned int *v75;
  unsigned int v76;
  WTF::StringImpl *v77;
  unint64_t v78;
  void *v79;
  const WebCore::InspectorOverlayHighlight::FlexHighlightOverlay *v80;
  WTF::StringImpl *v81;
  unsigned int v82;
  unsigned int v83;
  void *v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  const WebCore::InspectorOverlayHighlight::GridHighlightOverlay *v92;
  void *v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  const WebCore::InspectorOverlayHighlight::FlexHighlightOverlay *v101;
  void *v102;
  void *v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v109;
  int v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  float v114;
  float v115;
  uint64_t v116;
  unsigned int *v117;
  unsigned int v118;
  float v119;
  unsigned int v120;
  unsigned int v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  _BOOL4 v128;
  float v129;
  float v130;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  float v139;
  _DWORD *v140;
  WTF *v141;
  uint64_t v142;
  WTF::AtomStringImpl **v143;
  WTF::StringImpl *v144;
  WTF::AtomStringImpl *v145;
  WTF::StringImpl **v146;
  char v147;
  WTF::StringImpl *v148;
  WebCore *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  float v153;
  WTF::StringImpl *v154;
  float v155;
  void *v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;
  void *v162;
  float v163;
  void *v164;
  float v165;
  unsigned int *v166;
  unsigned int v167;
  unsigned int v168;
  unsigned int *v169;
  unsigned int v170;
  unsigned int v171;
  float v172;
  float i;
  WTF::String *v174;
  void *v175;
  WTF::StringImpl *v176;
  float v177;
  uint64_t v178;
  WTF::StringImpl *v179;
  WTF::StringImpl *v180;
  WTF::StringImpl *v181;
  float v182;
  float v183;
  float v184;
  void *v185;
  float v186;
  void *v187;
  float v188;
  unsigned int *v189;
  unsigned int v190;
  unsigned int v191;
  unsigned int *v192;
  unsigned int v193;
  unsigned int v194;
  float v195;
  float v196;
  float v197;
  WTF::String *v198;
  WTF::StringImpl *v199;
  WTF::StringImpl *v200;
  WTF::StringImpl *v201;
  WTF::StringImpl *v202;
  void *v203;
  WTF::StringImpl *v204;
  unsigned int *v205;
  _DWORD *v206;
  uint64_t v207;
  uint64_t v208;
  WTF::AtomStringImpl **v209;
  WTF::StringImpl *v210;
  WTF::AtomStringImpl *v211;
  char v212;
  WTF::StringImpl *v213;
  WebCore *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  WTF::StringImpl *v218;
  int v219;
  int v220;
  BOOL v221;
  uint64_t v222;
  char *v223;
  _BYTE *v224;
  uint64_t v225;
  int v226;
  float v227;
  void *v228;
  uint64_t v229;
  float v230;
  float v231;
  float v232;
  float v233;
  float v234;
  float v235;
  float v236;
  float v237;
  float v238;
  uint64_t v239;
  float v240;
  uint64_t v241;
  float v242;
  float v243;
  float v244;
  uint64_t v245;
  WTF::StringImpl **v246;
  uint64_t v247;
  WTF::StringImpl *v248;
  void *v251;
  void *v252;
  float v253;
  WTF::StringImpl *v254;
  WTF::StringImpl *v255;
  WTF::StringImpl *v256;
  unsigned int *v257;
  uint64_t v258;
  WTF::StringImpl **v259;
  uint64_t v260;
  WTF::StringImpl *v261;
  uint64_t v262;
  _QWORD *v263;
  uint64_t v264;
  uint64_t v265;
  WTF *v266;
  uint64_t v267;
  WTF *v268;
  unsigned int *v269;
  unsigned int v270;
  unsigned int *v271;
  unsigned int v272;
  unsigned int *v273;
  unsigned int v274;
  unsigned int v275;
  unsigned int *v276;
  unsigned int v277;
  unsigned int v278;
  unsigned int *v279;
  unsigned int v280;
  unsigned int v281;
  unsigned int *v282;
  unsigned int v283;
  unsigned int v284;
  unsigned int *v285;
  unsigned int v286;
  unsigned int v287;
  unsigned int *v288;
  unsigned int v289;
  unsigned int v290;
  unsigned int *v291;
  unsigned int v292;
  unsigned int v293;
  unsigned int *v294;
  unsigned int v295;
  unsigned int v296;
  float v297;
  float v298;
  unint64_t StatusReg;
  float v300;
  float v301;
  float v302;
  float v303;
  float v304;
  float v305;
  uint64_t v306;
  float v307;
  float v308;
  _OWORD v309[2];
  uint64_t v310;
  char v311;
  WebCore::GraphicsContext *v312[2];
  __int128 v313;
  __int128 v314;
  char v315;
  char v316;
  __n128 v317;
  uint64_t v318;
  _QWORD v319[7];
  int v320;
  __n128 v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  uint64_t v327;
  char v328;
  _DWORD *v329;
  __int16 v330;
  int v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  __int16 v335;
  int v336;
  unsigned int v337;
  __int16 v338;
  char v339;
  WTF *v340;
  int v341;
  __int16 v342;
  char v343[16];
  __int128 v344;
  __int128 v345;
  __int128 v346;
  __int128 v347;
  __int128 v348;
  __int128 v349;
  __int128 v350;
  char __s[16];
  __int128 v352;
  __int128 v353;
  __int128 v354;
  __int128 v355;
  __int128 v356;
  __int128 v357;
  __int128 v358;
  __int128 v359;
  __int128 v360;
  __int128 v361;
  __int128 v362;
  __int128 v363;
  __int128 v364;
  __int128 v365;
  __int128 v366;
  __int128 v367;
  __int128 v368;
  __int128 v369;
  __int128 v370;
  __int128 v371;
  __int128 v372;
  __int128 v373;
  __int128 v374;
  __int128 __src;
  __int128 v376;
  __int128 v377;
  __int128 v378;
  __int128 v379;
  __int128 v380;
  __int128 v381;
  size_t __n[2];
  WTF::StringImpl *v383[2];
  __int128 v384;
  __int128 v385;
  __int128 v386;
  __int128 v387;
  __int128 v388;
  __int128 v389;
  size_t v390[2];
  uint64_t v391;

  v7 = (WTF::StringImpl *)this;
  v391 = *MEMORY[0x1E0C80C00];
  if (*(_OWORD *)(this + 16) == 0
    && !*(_QWORD *)(this + 128)
    && !*(_DWORD *)(this + 284)
    && !*(_DWORD *)(this + 300)
    && !*(_BYTE *)(this + 304)
    && !*(_BYTE *)(this + 305)
    && !*(_BYTE *)(this + 306))
  {
    return this;
  }
  v8 = (WebCore::ScrollView *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)this + 160) + 56))(*(_QWORD *)(*(_QWORD *)this + 160));
  v9 = WebCore::ScrollView::sizeForVisibleContent(v8, 0);
  v10 = (float)(int)v9;
  v11 = (float)SHIDWORD(v9);
  *(_QWORD *)&v309[0] = 0;
  *((float *)v309 + 2) = (float)(int)v9;
  *((float *)v309 + 3) = (float)SHIDWORD(v9);
  (*(void (**)(WebCore::GraphicsContext *, _OWORD *))(*(_QWORD *)a2 + 280))(a2, v309);
  (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 96))(a2, 1);
  if (*((_BYTE *)v7 + 304))
  {
    (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 96))(a2, 1);
    *(_QWORD *)&v309[0] = 0x110400006FA8DCA8;
    WebCore::GraphicsContext::setFillColor(a2, (const WebCore::Color *)v309);
    if ((*(_QWORD *)&v309[0] & 0x8000000000000) != 0)
    {
      v273 = (unsigned int *)(*(_QWORD *)&v309[0] & 0xFFFFFFFFFFFFLL);
      do
      {
        v274 = __ldaxr(v273);
        v275 = v274 - 1;
      }
      while (__stlxr(v275, v273));
      if (!v275)
      {
        atomic_store(1u, v273);
        WTF::fastFree((WTF *)v273, v12);
      }
    }
    *(_QWORD *)&v309[0] = 0;
    *((_QWORD *)&v309[0] + 1) = __PAIR64__(LODWORD(v11), LODWORD(v10));
    (*(void (**)(WebCore::GraphicsContext *, _OWORD *, uint64_t))(*(_QWORD *)a2 + 216))(a2, v309, 1);
    (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 104))(a2, 1);
  }
  v317 = 0uLL;
  v320 = 0;
  v13 = (_OWORD *)*((_QWORD *)v7 + 16);
  if (v13)
  {
    v321 = 0uLL;
    LODWORD(v326) = 0;
    v310 = 0;
    memset(v309, 0, sizeof(v309));
    v311 = 1;
    *(_OWORD *)v312 = 0u;
    v313 = 0u;
    v314 = 0u;
    v315 = 1;
    WebCore::buildQuadHighlight(v13, (unint64_t *)v7 + 17, (unint64_t *)v309);
    if (HIDWORD(v312[1]))
    {
      WebCore::drawOutlinedQuad(a2, v312[0], (const WebCore::FloatQuad *)v309, (const WebCore::Color *)((char *)v309 + 8), (const WebCore::Color *)&v321, v15);
      if (*((_BYTE *)v7 + 306) || *((_BYTE *)v7 + 307))
        WebCore::InspectorOverlay::drawBounds(*(WebCore::InspectorOverlay **)(*(_QWORD *)v7 + 160), a2, (float32x2_t *)&v321);
    }
    WebCore::InspectorOverlayHighlight::~InspectorOverlayHighlight((WebCore::InspectorOverlayHighlight *)v309, v14);
    v17.n128_u64[0] = v321.n128_u64[1];
    if (v321.n128_f32[2] > 0.0)
    {
      v16.n128_u32[0] = v321.n128_u32[3];
      if (v321.n128_f32[3] > 0.0)
      {
        v16.n128_u32[0] = v317.n128_u32[2];
        if (v317.n128_f32[2] <= 0.0 || v317.n128_f32[3] <= 0.0)
        {
          v17 = v321;
          v317 = v321;
        }
        else
        {
          v18 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)v317.n128_u64[0], (float32x2_t)v321.n128_u64[0]), (int8x8_t)v321.n128_u64[0], (int8x8_t)v317.n128_u64[0]);
          v16.n128_u32[1] = v317.n128_u32[3];
          v16.n128_u64[0] = (unint64_t)vadd_f32((float32x2_t)v16.n128_u64[0], (float32x2_t)v317.n128_u64[0]);
          v19 = (int8x8_t)vadd_f32(*(float32x2_t *)&v321.n128_i8[8], (float32x2_t)v321.n128_u64[0]);
          v17.n128_u64[0] = (unint64_t)vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)v19, (float32x2_t)v16.n128_u64[0]), v19, (int8x8_t)v16.n128_u64[0]), v18);
          v317.n128_u64[0] = (unint64_t)v18;
          v317.n128_u64[1] = v17.n128_u64[0];
        }
      }
    }
    if ((_DWORD)v326 != -1)
      ((void (*)(_OWORD *, char *, __n128, __n128))off_1E33EE980[v326])(v309, (char *)&v322 + 8, v17, v16);
  }
  v20 = *((_QWORD *)v7 + 3);
  if (v20 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20))
  {
    v21 = 0;
    v3 = (_DWORD *)((char *)v7 + 88);
    v2 = (WTF::StringImpl *)((char *)&v322 + 8);
    do
    {
      v22 = (*(uint64_t (**)(_QWORD, unint64_t))(**((_QWORD **)v7 + 3) + 24))(*((_QWORD *)v7 + 3), v21);
      if (v22)
      {
        v23 = v22;
        WebCore::InspectorOverlay::drawNodeHighlight((float32x2_t *)&v321, v7, a2, v22);
        v25.n128_u64[0] = v321.n128_u64[1];
        if (v321.n128_f32[2] > 0.0)
        {
          v24.n128_u32[0] = v321.n128_u32[3];
          if (v321.n128_f32[3] > 0.0)
          {
            v24.n128_u32[0] = v317.n128_u32[2];
            if (v317.n128_f32[2] <= 0.0 || v317.n128_f32[3] <= 0.0)
            {
              v25 = v321;
              v317 = v321;
            }
            else
            {
              v26 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)v317.n128_u64[0], (float32x2_t)v321.n128_u64[0]), (int8x8_t)v321.n128_u64[0], (int8x8_t)v317.n128_u64[0]);
              v24.n128_u32[1] = v317.n128_u32[3];
              v24.n128_u64[0] = (unint64_t)vadd_f32((float32x2_t)v24.n128_u64[0], (float32x2_t)v317.n128_u64[0]);
              v27 = (int8x8_t)vadd_f32(*(float32x2_t *)&v321.n128_i8[8], (float32x2_t)v321.n128_u64[0]);
              v25.n128_u64[0] = (unint64_t)vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)v27, (float32x2_t)v24.n128_u64[0]), v27, (int8x8_t)v24.n128_u64[0]), v26);
              v317.n128_u64[0] = (unint64_t)v26;
              v317.n128_u64[1] = v25.n128_u64[0];
            }
          }
        }
        if (*((_BYTE *)v7 + 96))
        {
          v28 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v23);
          if (v28)
          {
            do
              v30 = __ldaxr(v28);
            while (__stlxr(v30 + 1, v28));
          }
          v383[0] = (WTF::StringImpl *)v28;
          if (!*((_BYTE *)v7 + 96))
            goto LABEL_471;
          v31 = (WTF::StringImpl *)*((_QWORD *)v7 + 10);
          v383[1] = v31;
          if (((unint64_t)v31 & 0x8000000000000) != 0)
          {
            v51 = (unsigned int *)((unint64_t)v31 & 0xFFFFFFFFFFFFLL);
            do
              v52 = __ldaxr(v51);
            while (__stlxr(v52 + 1, v51));
            v31 = v383[1];
            v4 = (unint64_t)v383[1] & 0x8000000000000;
          }
          else
          {
            v4 = 0;
          }
          LODWORD(v384) = *v3;
          BYTE4(v384) = *((_BYTE *)v7 + 92);
          WebCore::InspectorOverlay::buildGridOverlay((uint64_t)v309, v7, (uint64_t)v383, 0);
          if (v4)
          {
            v55 = (unsigned int *)((unint64_t)v31 & 0xFFFFFFFFFFFFLL);
            do
            {
              v56 = __ldaxr(v55);
              v57 = v56 - 1;
            }
            while (__stlxr(v57, v55));
            if (!v57)
            {
              atomic_store(1u, v55);
              WTF::fastFree((WTF *)v55, v32);
            }
          }
          v34 = v383[0];
          v383[0] = 0;
          if (v34)
          {
            do
            {
              v35 = __ldaxr((unsigned int *)v34);
              v36 = v35 - 1;
            }
            while (__stlxr(v36, (unsigned int *)v34));
            if (!v36)
            {
              atomic_store(1u, (unsigned int *)v34);
              v47 = *((unsigned int *)v34 + 7);
              if ((_DWORD)v47)
              {
                v4 = (unint64_t)v34;
                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v34 + 2), (WTF::StringImpl *)(*((_QWORD *)v34 + 2) + 32 * v47));
                v34 = (WTF::StringImpl *)v4;
              }
              v48 = (WTF *)*((_QWORD *)v34 + 2);
              if (v48)
              {
                *((_QWORD *)v34 + 2) = 0;
                *((_DWORD *)v34 + 6) = 0;
                v4 = (unint64_t)v34;
                WTF::fastFree(v48, v32);
                v34 = (WTF::StringImpl *)v4;
              }
              WTF::fastFree(v34, v32);
            }
          }
          if (BYTE8(v313))
          {
            WebCore::InspectorOverlay::drawGridOverlay(a2, (WebCore::GraphicsContext *)v309, v33);
            if (BYTE8(v313))
              WebCore::InspectorOverlayHighlight::GridHighlightOverlay::~GridHighlightOverlay((WebCore::InspectorOverlayHighlight::GridHighlightOverlay *)v309, v37);
          }
        }
        if (*((_BYTE *)v7 + 120))
        {
          v38 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v23);
          if (v38)
          {
            do
              v39 = __ldaxr(v38);
            while (__stlxr(v39 + 1, v38));
          }
          v383[0] = (WTF::StringImpl *)v38;
          if (!*((_BYTE *)v7 + 120))
            goto LABEL_471;
          v40 = (WTF::StringImpl *)*((_QWORD *)v7 + 13);
          v383[1] = v40;
          if (((unint64_t)v40 & 0x8000000000000) != 0)
          {
            v53 = (unsigned int *)((unint64_t)v40 & 0xFFFFFFFFFFFFLL);
            do
              v54 = __ldaxr(v53);
            while (__stlxr(v54 + 1, v53));
            v40 = v383[1];
            v4 = (unint64_t)v383[1] & 0x8000000000000;
          }
          else
          {
            v4 = 0;
          }
          LOBYTE(v384) = *((_BYTE *)v7 + 112);
          WebCore::InspectorOverlay::buildFlexOverlay(v309, v7, (uint64_t)v383);
          if (v4)
          {
            v58 = (unsigned int *)((unint64_t)v40 & 0xFFFFFFFFFFFFLL);
            do
            {
              v59 = __ldaxr(v58);
              v60 = v59 - 1;
            }
            while (__stlxr(v60, v58));
            if (!v60)
            {
              atomic_store(1u, v58);
              WTF::fastFree((WTF *)v58, v41);
            }
          }
          v43 = v383[0];
          v383[0] = 0;
          if (v43)
          {
            do
            {
              v44 = __ldaxr((unsigned int *)v43);
              v45 = v44 - 1;
            }
            while (__stlxr(v45, (unsigned int *)v43));
            if (!v45)
            {
              atomic_store(1u, (unsigned int *)v43);
              v49 = *((unsigned int *)v43 + 7);
              if ((_DWORD)v49)
                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v43 + 2), (WTF::StringImpl *)(*((_QWORD *)v43 + 2) + 32 * v49));
              v50 = (WTF *)*((_QWORD *)v43 + 2);
              if (v50)
              {
                *((_QWORD *)v43 + 2) = 0;
                *((_DWORD *)v43 + 6) = 0;
                WTF::fastFree(v50, v41);
              }
              WTF::fastFree(v43, v41);
            }
          }
          if (v316)
          {
            WebCore::InspectorOverlay::drawFlexOverlay(a2, (WebCore::GraphicsContext **)v309, v42);
            if (v316)
              WebCore::InspectorOverlayHighlight::FlexHighlightOverlay::~FlexHighlightOverlay((WebCore::InspectorOverlayHighlight::FlexHighlightOverlay *)v309, v46);
          }
        }
        if ((_DWORD)v326 != -1)
          ((void (*)(_OWORD *, char *, __n128, __n128))off_1E33EE980[v326])(v309, (char *)&v322 + 8, v25, v24);
      }
      v21 = (v21 + 1);
    }
    while (v21 < (*(unsigned int (**)(_QWORD))(**((_QWORD **)v7 + 3) + 16))(*((_QWORD *)v7 + 3)));
  }
  v61 = *((_QWORD *)v7 + 2);
  if (v61)
  {
    WebCore::InspectorOverlay::drawNodeHighlight((float32x2_t *)&v321, v7, a2, v61);
    v63.n128_u64[0] = v321.n128_u64[1];
    if (v321.n128_f32[2] > 0.0)
    {
      v62.n128_u32[0] = v321.n128_u32[3];
      if (v321.n128_f32[3] > 0.0)
      {
        v62.n128_u32[0] = v317.n128_u32[2];
        if (v317.n128_f32[2] <= 0.0 || v317.n128_f32[3] <= 0.0)
        {
          v63 = v321;
          v317 = v321;
        }
        else
        {
          v64 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)v317.n128_u64[0], (float32x2_t)v321.n128_u64[0]), (int8x8_t)v321.n128_u64[0], (int8x8_t)v317.n128_u64[0]);
          v62.n128_u32[1] = v317.n128_u32[3];
          v62.n128_u64[0] = (unint64_t)vadd_f32((float32x2_t)v62.n128_u64[0], (float32x2_t)v317.n128_u64[0]);
          v65 = (int8x8_t)vadd_f32(*(float32x2_t *)&v321.n128_i8[8], (float32x2_t)v321.n128_u64[0]);
          v63.n128_u64[0] = (unint64_t)vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)v65, (float32x2_t)v62.n128_u64[0]), v65, (int8x8_t)v62.n128_u64[0]), v64);
          v317.n128_u64[0] = (unint64_t)v64;
          v317.n128_u64[1] = v63.n128_u64[0];
        }
      }
    }
    v21 = (unint64_t)&v322 + 8;
    if (v320 == -1)
    {
      if ((_DWORD)v326 == -1)
        goto LABEL_98;
    }
    else if ((_DWORD)v326 == -1)
    {
      ((void (*)(_OWORD *, _QWORD *, __n128, __n128))off_1E33EE980[v320])(v309, v319, v63, v62);
      v320 = -1;
      goto LABEL_98;
    }
    *(_QWORD *)&v309[0] = v319;
    ((void (*)(_OWORD *, __n128, __n128))off_1E33EE998[v326])(v309, v63, v62);
LABEL_98:
    if (*((_BYTE *)v7 + 96))
    {
      v66 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(*((_QWORD *)v7 + 2));
      if (v66)
      {
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 + 1, v66));
      }
      v383[0] = (WTF::StringImpl *)v66;
      if (!*((_BYTE *)v7 + 96))
        goto LABEL_471;
      v68 = (WTF::StringImpl *)*((_QWORD *)v7 + 10);
      v383[1] = v68;
      if (((unint64_t)v68 & 0x8000000000000) != 0)
      {
        v269 = (unsigned int *)((unint64_t)v68 & 0xFFFFFFFFFFFFLL);
        do
          v270 = __ldaxr(v269);
        while (__stlxr(v270 + 1, v269));
        v68 = v383[1];
        v69 = (unint64_t)v383[1] & 0x8000000000000;
      }
      else
      {
        v69 = 0;
      }
      LODWORD(v384) = *((_DWORD *)v7 + 22);
      BYTE4(v384) = *((_BYTE *)v7 + 92);
      WebCore::InspectorOverlay::buildGridOverlay((uint64_t)v309, v7, (uint64_t)v383, 0);
      if (v69)
      {
        v291 = (unsigned int *)((unint64_t)v68 & 0xFFFFFFFFFFFFLL);
        do
        {
          v292 = __ldaxr(v291);
          v293 = v292 - 1;
        }
        while (__stlxr(v293, v291));
        if (!v293)
        {
          atomic_store(1u, v291);
          WTF::fastFree((WTF *)v291, v70);
        }
      }
      v2 = v383[0];
      v383[0] = 0;
      if (v2)
      {
        do
        {
          v72 = __ldaxr((unsigned int *)v2);
          v73 = v72 - 1;
        }
        while (__stlxr(v73, (unsigned int *)v2));
        if (!v73)
        {
          atomic_store(1u, (unsigned int *)v2);
          v265 = *((unsigned int *)v2 + 7);
          if ((_DWORD)v265)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v2 + 2), (WTF::StringImpl *)(*((_QWORD *)v2 + 2) + 32 * v265));
          v266 = (WTF *)*((_QWORD *)v2 + 2);
          if (v266)
          {
            *((_QWORD *)v2 + 2) = 0;
            *((_DWORD *)v2 + 6) = 0;
            WTF::fastFree(v266, v70);
          }
          WTF::fastFree(v2, v70);
        }
      }
      if (BYTE8(v313))
      {
        WebCore::InspectorOverlay::drawGridOverlay(a2, (WebCore::GraphicsContext *)v309, v71);
        if (BYTE8(v313))
          WebCore::InspectorOverlayHighlight::GridHighlightOverlay::~GridHighlightOverlay((WebCore::InspectorOverlayHighlight::GridHighlightOverlay *)v309, v74);
      }
    }
    if (!*((_BYTE *)v7 + 120))
    {
LABEL_124:
      if ((_DWORD)v326 != -1)
        ((void (*)(_OWORD *, char *))off_1E33EE980[v326])(v309, (char *)&v322 + 8);
      goto LABEL_126;
    }
    v75 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(*((_QWORD *)v7 + 2));
    if (v75)
    {
      do
        v76 = __ldaxr(v75);
      while (__stlxr(v76 + 1, v75));
    }
    v383[0] = (WTF::StringImpl *)v75;
    if (*((_BYTE *)v7 + 120))
    {
      v77 = (WTF::StringImpl *)*((_QWORD *)v7 + 13);
      v383[1] = v77;
      if (((unint64_t)v77 & 0x8000000000000) != 0)
      {
        v271 = (unsigned int *)((unint64_t)v77 & 0xFFFFFFFFFFFFLL);
        do
          v272 = __ldaxr(v271);
        while (__stlxr(v272 + 1, v271));
        v77 = v383[1];
        v78 = (unint64_t)v383[1] & 0x8000000000000;
      }
      else
      {
        v78 = 0;
      }
      LOBYTE(v384) = *((_BYTE *)v7 + 112);
      WebCore::InspectorOverlay::buildFlexOverlay(v309, v7, (uint64_t)v383);
      if (v78)
      {
        v294 = (unsigned int *)((unint64_t)v77 & 0xFFFFFFFFFFFFLL);
        do
        {
          v295 = __ldaxr(v294);
          v296 = v295 - 1;
        }
        while (__stlxr(v296, v294));
        if (!v296)
        {
          atomic_store(1u, v294);
          WTF::fastFree((WTF *)v294, v79);
        }
      }
      v81 = v383[0];
      v383[0] = 0;
      if (v81)
      {
        do
        {
          v82 = __ldaxr((unsigned int *)v81);
          v83 = v82 - 1;
        }
        while (__stlxr(v83, (unsigned int *)v81));
        if (!v83)
        {
          atomic_store(1u, (unsigned int *)v81);
          v267 = *((unsigned int *)v81 + 7);
          if ((_DWORD)v267)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v81 + 2), (WTF::StringImpl *)(*((_QWORD *)v81 + 2) + 32 * v267));
          v268 = (WTF *)*((_QWORD *)v81 + 2);
          if (v268)
          {
            *((_QWORD *)v81 + 2) = 0;
            *((_DWORD *)v81 + 6) = 0;
            WTF::fastFree(v268, v79);
          }
          WTF::fastFree(v81, v79);
        }
      }
      if (v316)
      {
        WebCore::InspectorOverlay::drawFlexOverlay(a2, (WebCore::GraphicsContext **)v309, v80);
        if (v316)
          WebCore::InspectorOverlayHighlight::FlexHighlightOverlay::~FlexHighlightOverlay((WebCore::InspectorOverlayHighlight::FlexHighlightOverlay *)v309, v84);
      }
      goto LABEL_124;
    }
LABEL_471:
    __break(1u);
LABEL_472:
    *(_BYTE *)v21 = __src;
    goto LABEL_387;
  }
LABEL_126:
  v85 = *((_DWORD *)v7 + 71);
  if (v85)
  {
    v86 = *((_QWORD *)v7 + 34);
    v87 = v86 + 24 * v85;
    do
    {
      if (!*((_BYTE *)v7 + 96))
        goto LABEL_139;
      if (!*(_QWORD *)v86)
        goto LABEL_139;
      v88 = *(_QWORD *)(*(_QWORD *)v86 + 8);
      if (!v88)
        goto LABEL_139;
      v89 = *((_QWORD *)v7 + 3);
      if (v89 && (*(unsigned int (**)(_QWORD))(*(_QWORD *)v89 + 16))(*((_QWORD *)v7 + 3)))
      {
        v90 = 0;
        while ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v89 + 24))(v89, v90) != v88)
        {
          v90 = (v90 + 1);
          if (v90 >= (*(unsigned int (**)(uint64_t))(*(_QWORD *)v89 + 16))(v89))
            goto LABEL_136;
        }
        goto LABEL_142;
      }
LABEL_136:
      v91 = *(_QWORD *)v86;
      if (*(_QWORD *)v86)
        v91 = *(_QWORD *)(v91 + 8);
      if (v91 != *((_QWORD *)v7 + 2))
      {
LABEL_139:
        WebCore::InspectorOverlay::buildGridOverlay((uint64_t)v309, v7, v86, 0);
        if (BYTE8(v313))
        {
          WebCore::InspectorOverlay::drawGridOverlay(a2, (WebCore::GraphicsContext *)v309, v92);
          if (BYTE8(v313))
            WebCore::InspectorOverlayHighlight::GridHighlightOverlay::~GridHighlightOverlay((WebCore::InspectorOverlayHighlight::GridHighlightOverlay *)v309, v93);
        }
      }
LABEL_142:
      v86 += 24;
    }
    while (v86 != v87);
  }
  v94 = *((_DWORD *)v7 + 75);
  if (v94)
  {
    v95 = *((_QWORD *)v7 + 36);
    v96 = v95 + 24 * v94;
    do
    {
      if (!*((_BYTE *)v7 + 120))
        goto LABEL_156;
      if (!*(_QWORD *)v95)
        goto LABEL_156;
      v97 = *(_QWORD *)(*(_QWORD *)v95 + 8);
      if (!v97)
        goto LABEL_156;
      v98 = *((_QWORD *)v7 + 3);
      if (v98 && (*(unsigned int (**)(_QWORD))(*(_QWORD *)v98 + 16))(*((_QWORD *)v7 + 3)))
      {
        v99 = 0;
        while ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v98 + 24))(v98, v99) != v97)
        {
          v99 = (v99 + 1);
          if (v99 >= (*(unsigned int (**)(uint64_t))(*(_QWORD *)v98 + 16))(v98))
            goto LABEL_153;
        }
        goto LABEL_159;
      }
LABEL_153:
      v100 = *(_QWORD *)v95;
      if (*(_QWORD *)v95)
        v100 = *(_QWORD *)(v100 + 8);
      if (v100 != *((_QWORD *)v7 + 2))
      {
LABEL_156:
        WebCore::InspectorOverlay::buildFlexOverlay(v309, v7, v95);
        if (v316)
        {
          WebCore::InspectorOverlay::drawFlexOverlay(a2, (WebCore::GraphicsContext **)v309, v101);
          if (v316)
            WebCore::InspectorOverlayHighlight::FlexHighlightOverlay::~FlexHighlightOverlay((WebCore::InspectorOverlayHighlight::FlexHighlightOverlay *)v309, v102);
        }
      }
LABEL_159:
      v95 += 24;
    }
    while (v95 != v96);
  }
  if (*((_QWORD *)v7 + 23) != *((_QWORD *)v7 + 24))
  {
    (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 96))(a2, 1);
    *(_QWORD *)&v309[0] = 0x11040000FF000080;
    WebCore::GraphicsContext::setFillColor(a2, (const WebCore::Color *)v309);
    if ((*(_QWORD *)&v309[0] & 0x8000000000000) != 0)
    {
      v276 = (unsigned int *)(*(_QWORD *)&v309[0] & 0xFFFFFFFFFFFFLL);
      do
      {
        v277 = __ldaxr(v276);
        v278 = v277 - 1;
      }
      while (__stlxr(v278, v276));
      if (!v278)
      {
        atomic_store(1u, v276);
        WTF::fastFree((WTF *)v276, v103);
      }
    }
    v105 = *((_QWORD *)v7 + 23);
    v104 = *((_QWORD *)v7 + 24);
    while (v104 != v105)
    {
      (*(void (**)(WebCore::GraphicsContext *, unint64_t, uint64_t))(*(_QWORD *)a2 + 216))(a2, *((_QWORD *)v7 + 25) + 24 * v105 + 8, 1);
      v106 = *((unsigned int *)v7 + 52);
      v105 += v106 + 1;
      do
        v105 -= v106;
      while (v105 >= v106);
    }
    (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 104))(a2, 1);
  }
  if (!*((_BYTE *)v7 + 306) && !*((_BYTE *)v7 + 307))
    goto LABEL_449;
  v107 = *(_QWORD *)(*(_QWORD *)v7 + 160);
  if (!v107 || *(_BYTE *)(v107 + 144) != 0)
    goto LABEL_449;
  v109 = *(_QWORD *)(v107 + 288);
  if (*(_BYTE *)(v109 + 312) == 1)
  {
    v110 = 0;
    LODWORD(v111) = 0;
  }
  else
  {
    v112 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v109 + 64) + 832))(v109 + 64, 0, 0);
    v110 = v112;
    v111 = HIDWORD(v112);
  }
  v113 = WebCore::ScrollView::sizeForVisibleContent((WebCore::ScrollView *)v109, 0);
  v114 = (float)(int)v113;
  v115 = (float)SHIDWORD(v113);
  if (*(_QWORD *)(v109 + 40))
  {
    v119 = WebCore::ScrollView::platformTopContentInset((WebCore::ScrollView *)v109);
  }
  else
  {
    v116 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v109 + 720))(v109);
    v117 = (unsigned int *)(v116 + 8);
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 + 1, v117));
    v119 = 0.0;
    if (*(_QWORD *)(*(_QWORD *)(v116 + 128) + 8) == v116)
    {
      v133 = *(_QWORD *)(v116 + 24);
      if (v133)
      {
        v134 = *(_QWORD *)(v133 + 8);
        if (v134)
          v119 = *(float *)(v134 + 372);
      }
    }
    do
    {
      v120 = __ldaxr(v117);
      v121 = v120 - 1;
    }
    while (__stlxr(v121, v117));
    if (!v121)
    {
      atomic_store(1u, v117);
      v263 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v263 = off_1E31FE290;
      v263[1] = v117;
      *(_QWORD *)&v309[0] = v263;
      WTF::ensureOnMainThread();
      v264 = *(_QWORD *)&v309[0];
      *(_QWORD *)&v309[0] = 0;
      if (v264)
        (*(void (**)(uint64_t))(*(_QWORD *)v264 + 8))(v264);
    }
  }
  v122 = *(float *)(*(_QWORD *)v7 + 356);
  v123 = *(float *)(v107 + 592);
  v124 = v114 / (float)(v122 * v123);
  v125 = (float)(v122 * v123) * v124;
  v300 = v115 / (float)(v122 * v123);
  v126 = (float)(v122 * v123) * v300;
  v127 = v126 + -15.0;
  v303 = v124;
  if (v317.n128_f32[2] <= 0.0)
  {
    v129 = v126 - v119;
    LODWORD(v3) = 1;
    goto LABEL_216;
  }
  v128 = 1;
  if (v317.n128_f32[3] > 0.0
    && v125 > 0.0
    && v317.n128_f32[0] < (float)(v125 + 0.0)
    && (float)(v317.n128_f32[2] + v317.n128_f32[0]) > 0.0
    && v317.n128_f32[1] < (float)(v119 + 15.0)
    && v119 < (float)(v317.n128_f32[3] + v317.n128_f32[1]))
  {
    v128 = v317.n128_f32[1] < (float)(v127 + 15.0) && v127 < (float)(v317.n128_f32[3] + v317.n128_f32[1]);
  }
  v129 = v126 - v119;
  v130 = 0.0;
  LODWORD(v3) = 1;
  if (v317.n128_f32[3] > 0.0
    && v129 > 0.0
    && v317.n128_f32[0] < 15.0
    && (float)(v317.n128_f32[2] + v317.n128_f32[0]) > 0.0
    && v317.n128_f32[1] < (float)(v119 + v129)
    && v119 < (float)(v317.n128_f32[3] + v317.n128_f32[1]))
  {
    v130 = v125 + -15.0;
    if (v317.n128_f32[0] >= (float)((float)(v125 + -15.0) + 15.0)
      || v130 >= (float)(v317.n128_f32[2] + v317.n128_f32[0]))
    {
      LODWORD(v3) = 0;
      goto LABEL_200;
    }
    if (!v128)
    {
      HIDWORD(v306) = 0;
      goto LABEL_209;
    }
LABEL_216:
    HIDWORD(v306) = 0;
LABEL_217:
    LODWORD(v4) = 1;
    *(float *)&v306 = v119;
    goto LABEL_218;
  }
LABEL_200:
  *((float *)&v306 + 1) = v130;
  if (v128)
    goto LABEL_217;
LABEL_209:
  LODWORD(v4) = 0;
  *(float *)&v306 = v126 + -15.0;
LABEL_218:
  v307 = v122 * v123;
  (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 96))(a2, 1);
  *(_QWORD *)&v309[0] = 0x11040000FFFFFF99;
  WebCore::GraphicsContext::setFillColor(a2, (const WebCore::Color *)v309);
  if ((*(_QWORD *)&v309[0] & 0x8000000000000) != 0)
  {
    v279 = (unsigned int *)(*(_QWORD *)&v309[0] & 0xFFFFFFFFFFFFLL);
    do
    {
      v280 = __ldaxr(v279);
      v281 = v280 - 1;
    }
    while (__stlxr(v281, v279));
    if (!v281)
    {
      atomic_store(1u, v279);
      WTF::fastFree((WTF *)v279, v135);
    }
  }
  *(_QWORD *)&v309[0] = __PAIR64__(v306, HIDWORD(v306));
  __asm { FMOV            V0.2S, #15.0 }
  *((_QWORD *)&v309[0] + 1) = _D0;
  (*(void (**)(WebCore::GraphicsContext *, _OWORD *, uint64_t))(*(_QWORD *)a2 + 216))(a2, v309, 1);
  if ((_DWORD)v3)
  {
    *(float *)v309 = *((float *)&v306 + 1) + 15.0;
    DWORD1(v309[0]) = v306;
    *((float *)v309 + 2) = (float)(v125 - *((float *)&v306 + 1)) + -15.0;
  }
  else
  {
    LODWORD(v309[0]) = 0;
    *(_QWORD *)((char *)v309 + 4) = v306;
  }
  HIDWORD(v309[0]) = 1097859072;
  (*(void (**)(WebCore::GraphicsContext *, _OWORD *, uint64_t))(*(_QWORD *)a2 + 216))(a2, v309, 1);
  v139 = v307;
  if ((_DWORD)v4)
  {
    LODWORD(v309[0]) = HIDWORD(v306);
    *((float *)v309 + 1) = v119 + 15.0;
    DWORD2(v309[0]) = 1097859072;
    *((float *)v309 + 3) = v129 + -15.0;
  }
  else
  {
    *(_QWORD *)&v309[0] = __PAIR64__(LODWORD(v119), HIDWORD(v306));
    DWORD2(v309[0]) = 1097859072;
    *((float *)v309 + 3) = v127 - v119;
  }
  (*(void (**)(WebCore::GraphicsContext *, _OWORD *, uint64_t))(*(_QWORD *)a2 + 216))(a2, v309, 1);
  (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 104))(a2, 1);
  v327 = 256;
  v325 = 0u;
  v326 = 0u;
  v323 = 0u;
  v324 = 0u;
  v321 = 0u;
  v322 = 0u;
  v328 = 0;
  v140 = (_DWORD *)*MEMORY[0x1E0CBF2F8];
  if (*MEMORY[0x1E0CBF2F8])
    *v140 += 2;
  v329 = v140;
  v330 = 0;
  v331 = 2143289344;
  v333 = 0;
  v332 = 0;
  v334 = 26216000;
  v335 = 257;
  v336 = 0;
  v337 = v337 & 0x80000000 | 0xE000;
  v338 = 0;
  v339 &= 0xFCu;
  v141 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v141 = 0x100000001;
  *((_QWORD *)v141 + 1) = 0;
  v340 = v141;
  v341 = 0;
  v342 &= 0xFC00u;
  v142 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v7 + 112) + 8))(*(_QWORD *)(*(_QWORD *)v7 + 112));
  v143 = (WTF::AtomStringImpl **)WebCore::genericFontFamilyForScript((WTF *)(v142 + 24), 0);
  v145 = *v143;
  if (!*v143)
  {
    if (*((_DWORD *)v340 + 1))
    {
      v145 = 0;
      v146 = (WTF::StringImpl **)((char *)v340 + 8);
      goto LABEL_476;
    }
LABEL_481:
    __break(0xC471u);
    JUMPOUT(0x195DCD238);
  }
  if ((*((_BYTE *)v145 + 16) & 0x10) != 0)
  {
    *(_DWORD *)v145 += 2;
  }
  else
  {
    WTF::AtomStringImpl::addSlowCase(*v143, v144);
    v145 = *(WTF::AtomStringImpl **)&v309[0];
  }
  if (!*((_DWORD *)v340 + 1))
    goto LABEL_481;
  v146 = (WTF::StringImpl **)((char *)v340 + 8);
  if (v145)
  {
    v147 = 0;
    *(_DWORD *)v145 += 2;
    goto LABEL_233;
  }
LABEL_476:
  v147 = 1;
LABEL_233:
  v148 = *v146;
  *v146 = v145;
  if (!v148)
    goto LABEL_236;
  if (*(_DWORD *)v148 != 2)
  {
    *(_DWORD *)v148 -= 2;
LABEL_236:
    if ((v147 & 1) != 0)
      goto LABEL_239;
    goto LABEL_237;
  }
  WTF::StringImpl::destroy(v148, v144);
  if ((v147 & 1) != 0)
    goto LABEL_239;
LABEL_237:
  if (*(_DWORD *)v145 == 2)
    WTF::StringImpl::destroy(v145, v144);
  else
    *(_DWORD *)v145 -= 2;
LABEL_239:
  v336 = 1092616192;
  v149 = (WebCore *)WebCore::FontCascade::FontCascade((uint64_t)v309, (uint64_t *)&v321);
  v383[0] = 0;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v150 = *(_QWORD *)(StatusReg + 736);
  if (!v150 || (v151 = *(_QWORD *)(v150 + 96)) == 0)
    v151 = WebCore::threadGlobalDataSlow(v149);
  v152 = *(_QWORD *)(v151 + 80);
  if (!v152)
  {
    WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v151);
    v152 = *(_QWORD *)(v151 + 80);
  }
  v153 = v122 * (float)v110;
  WebCore::FontCache::updateFontCascade(v152, (uint64_t)v309, v383);
  v154 = v383[0];
  v383[0] = 0;
  if (v154)
  {
    if (*((_DWORD *)v154 + 2) == 1)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v154 + 8))(v154);
    else
      --*((_DWORD *)v154 + 2);
  }
  v155 = v153 / v307;
  (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 96))(a2, 1);
  v383[0] = (WTF::StringImpl *)0x1104000000000080;
  WebCore::GraphicsContext::setFillColor(a2, (const WebCore::Color *)v383);
  if (((unint64_t)v383[0] & 0x8000000000000) != 0)
  {
    v282 = (unsigned int *)((unint64_t)v383[0] & 0xFFFFFFFFFFFFLL);
    do
    {
      v283 = __ldaxr(v282);
      v284 = v283 - 1;
    }
    while (__stlxr(v284, v282));
    v139 = v307;
    if (!v284)
    {
      atomic_store(1u, v282);
      WTF::fastFree((WTF *)v282, v156);
    }
  }
  v297 = v126;
  v298 = v125;
  v302 = v119;
  v157 = v122 * (float)(int)v111;
  v158 = v155 + v303;
  if (*((float *)a2 + 47) != 1.0)
  {
    *((_DWORD *)a2 + 46) |= 8u;
    *((_DWORD *)a2 + 47) = 1065353216;
  }
  v304 = v157 / v139;
  (*(void (**)(WebCore::GraphicsContext *, char *))(*(_QWORD *)a2 + 88))(a2, (char *)a2 + 8);
  (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 96))(a2, 1);
  (*(void (**)(WebCore::GraphicsContext *, float, float))(*(_QWORD *)a2 + 648))(a2, (float)(0.0 - v153) + 0.5, *(float *)&v306 - v157);
  v159 = v155 - fmodf(v155, 5.0);
  if (v159 < v158)
  {
    if ((_DWORD)v4)
      v160 = v157;
    else
      v160 = v157 + 15.0;
    do
    {
      if (v159 != 0.0 || v153 != 0.0)
      {
        LODWORD(v387) = 0;
        v161 = v139 * v159;
        *(float *)&__src = v139 * v159;
        *((float *)&__src + 1) = v160;
        WebCore::Path::moveTo((WebCore::Path *)v383, (const WebCore::FloatPoint *)&__src);
        if (fmodf(v159, 50.0) == 0.0)
        {
          if (fmodf(v159, 100.0) == 0.0)
            v163 = 8.0;
          else
            v163 = 5.0;
          *(_QWORD *)&__src = 0x1104000000000080;
          WebCore::GraphicsContext::setStrokeColor(a2, (const WebCore::Color *)&__src);
          if ((__src & 0x8000000000000) != 0)
          {
            v169 = (unsigned int *)(__src & 0xFFFFFFFFFFFFLL);
            do
            {
              v170 = __ldaxr(v169);
              v171 = v170 - 1;
            }
            while (__stlxr(v171, v169));
            if (!v171)
            {
              atomic_store(1u, v169);
              WTF::fastFree((WTF *)v169, v164);
            }
          }
        }
        else
        {
          *(_QWORD *)&__src = 0x1104000000000033;
          WebCore::GraphicsContext::setStrokeColor(a2, (const WebCore::Color *)&__src);
          if ((__src & 0x8000000000000) != 0)
          {
            v166 = (unsigned int *)(__src & 0xFFFFFFFFFFFFLL);
            do
            {
              v167 = __ldaxr(v166);
              v168 = v167 - 1;
            }
            while (__stlxr(v168, v166));
            if (!v168)
            {
              atomic_store(1u, v166);
              WTF::fastFree((WTF *)v166, v162);
            }
          }
          v163 = 5.0;
        }
        v165 = 15.0 - v163;
        if ((_DWORD)v4)
          v165 = v163;
        *(float *)&__src = v161;
        *((float *)&__src + 1) = v157 + v165;
        WebCore::Path::addLineTo((uint64_t)v383, (const WebCore::FloatPoint *)&__src);
        (*(void (**)(WebCore::GraphicsContext *, WTF::StringImpl **))(*(_QWORD *)a2 + 184))(a2, v383);
        if ((_DWORD)v387 != -1)
          ((void (*)(__int128 *, WTF::StringImpl **))off_1E33EE980[v387])(&__src, &v383[1]);
        v139 = v307;
      }
      v159 = v159 + 5.0;
    }
    while (v159 < v158);
  }
  v172 = v304 + v300;
  for (i = (float)(v153 / v307) - fmodf(v153 / v307, 100.0); i < v158; i = i + 100.0)
  {
    if (i != 0.0 || v153 != 0.0)
    {
      (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 96))(a2, 1);
      v174 = (WTF::String *)(*(uint64_t (**)(WebCore::GraphicsContext *, float, float))(*(_QWORD *)a2 + 648))(a2, (float)(v139 * i) + 0.5, v157);
      WTF::String::number(v174, i);
      LODWORD(v383[0]) = 0;
      v176 = (WTF::StringImpl *)__src;
      if ((_QWORD)__src)
        *(_DWORD *)__src += 2;
      v383[1] = v176;
      LODWORD(v384) = 0;
      BYTE4(v384) = 1;
      *((_QWORD *)&v384 + 1) = 0x3F80000000000000;
      LODWORD(v385) = 0;
      BYTE4(v385) = 4;
      BYTE5(v385) = BYTE5(v385) & 0xE0 | 8;
      v177 = 13.0;
      if ((v4 & 1) == 0)
      {
        v178 = WebCore::FontCascade::metricsOfPrimaryFont((WebCore::FontCascade *)v309, v175);
        v177 = (float)((float)(*(_DWORD *)(v178 + 48) + *(_DWORD *)(v178 + 44)) + -2.0) + -1.0;
      }
      LODWORD(v367) = 0x40000000;
      *((float *)&v367 + 1) = v177;
      (*(void (**)(WebCore::GraphicsContext *, _OWORD *, WTF::StringImpl **, __int128 *, _QWORD, _QWORD))(*(_QWORD *)a2 + 520))(a2, v309, v383, &v367, 0, 0);
      v180 = v383[1];
      v383[1] = 0;
      if (v180)
      {
        if (*(_DWORD *)v180 == 2)
          WTF::StringImpl::destroy(v180, v179);
        else
          *(_DWORD *)v180 -= 2;
      }
      v181 = (WTF::StringImpl *)__src;
      *(_QWORD *)&__src = 0;
      if (v181)
      {
        if (*(_DWORD *)v181 == 2)
          WTF::StringImpl::destroy(v181, v179);
        else
          *(_DWORD *)v181 -= 2;
      }
      (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 104))(a2, 1);
    }
  }
  (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 104))(a2, 1);
  (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 96))(a2, 1);
  (*(void (**)(WebCore::GraphicsContext *, float, float))(*(_QWORD *)a2 + 648))(a2, *((float *)&v306 + 1) - v153, (float)(v302 - v157) + 0.5);
  v182 = v304 - fmodf(v304, 5.0);
  if (v182 < v172)
  {
    if ((_DWORD)v3)
      v183 = v153;
    else
      v183 = v153 + 15.0;
    do
    {
      if (v182 != 0.0 || v157 != 0.0)
      {
        LODWORD(v387) = 0;
        v184 = v139 * v182;
        *(float *)&__src = v183;
        *((float *)&__src + 1) = v139 * v182;
        WebCore::Path::moveTo((WebCore::Path *)v383, (const WebCore::FloatPoint *)&__src);
        if (fmodf(v182, 50.0) == 0.0)
        {
          if (fmodf(v182, 100.0) == 0.0)
            v186 = 8.0;
          else
            v186 = 5.0;
          *(_QWORD *)&__src = 0x1104000000000080;
          WebCore::GraphicsContext::setStrokeColor(a2, (const WebCore::Color *)&__src);
          if ((__src & 0x8000000000000) != 0)
          {
            v192 = (unsigned int *)(__src & 0xFFFFFFFFFFFFLL);
            do
            {
              v193 = __ldaxr(v192);
              v194 = v193 - 1;
            }
            while (__stlxr(v194, v192));
            if (!v194)
            {
              atomic_store(1u, v192);
              WTF::fastFree((WTF *)v192, v187);
            }
          }
        }
        else
        {
          *(_QWORD *)&__src = 0x1104000000000033;
          WebCore::GraphicsContext::setStrokeColor(a2, (const WebCore::Color *)&__src);
          if ((__src & 0x8000000000000) != 0)
          {
            v189 = (unsigned int *)(__src & 0xFFFFFFFFFFFFLL);
            do
            {
              v190 = __ldaxr(v189);
              v191 = v190 - 1;
            }
            while (__stlxr(v191, v189));
            if (!v191)
            {
              atomic_store(1u, v189);
              WTF::fastFree((WTF *)v189, v185);
            }
          }
          v186 = 5.0;
        }
        v188 = 15.0 - v186;
        if ((_DWORD)v3)
          v188 = v186;
        *(float *)&__src = v153 + v188;
        *((float *)&__src + 1) = v184;
        WebCore::Path::addLineTo((uint64_t)v383, (const WebCore::FloatPoint *)&__src);
        (*(void (**)(WebCore::GraphicsContext *, WTF::StringImpl **))(*(_QWORD *)a2 + 184))(a2, v383);
        if ((_DWORD)v387 != -1)
          ((void (*)(__int128 *, WTF::StringImpl **))off_1E33EE980[v387])(&__src, &v383[1]);
        v139 = v307;
      }
      v182 = v182 + 5.0;
    }
    while (v182 < v172);
  }
  v195 = v304 - fmodf(v304, 100.0);
  if (v195 < v172)
  {
    if ((_DWORD)v3)
      v196 = -1.5708;
    else
      v196 = 1.5708;
    if ((_DWORD)v3)
      v197 = 13.0;
    else
      v197 = -2.0;
    do
    {
      if (v195 != 0.0 || v157 != 0.0)
      {
        (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 96))(a2, 1);
        (*(void (**)(WebCore::GraphicsContext *, float, float))(*(_QWORD *)a2 + 648))(a2, v153, (float)(v139 * v195) + 0.5);
        v198 = (WTF::String *)(*(uint64_t (**)(WebCore::GraphicsContext *, float))(*(_QWORD *)a2 + 640))(a2, v196);
        WTF::String::number(v198, v195);
        LODWORD(v383[0]) = 0;
        v199 = (WTF::StringImpl *)__src;
        if ((_QWORD)__src)
          *(_DWORD *)__src += 2;
        v383[1] = v199;
        LODWORD(v384) = 0;
        BYTE4(v384) = 1;
        *((_QWORD *)&v384 + 1) = 0x3F80000000000000;
        LODWORD(v385) = 0;
        BYTE4(v385) = 4;
        BYTE5(v385) = BYTE5(v385) & 0xE0 | 8;
        LODWORD(v367) = 0x40000000;
        *((float *)&v367 + 1) = v197;
        (*(void (**)(WebCore::GraphicsContext *, _OWORD *, WTF::StringImpl **, __int128 *, _QWORD, _QWORD))(*(_QWORD *)a2 + 520))(a2, v309, v383, &v367, 0, 0);
        v201 = v383[1];
        v383[1] = 0;
        if (v201)
        {
          if (*(_DWORD *)v201 == 2)
            WTF::StringImpl::destroy(v201, v200);
          else
            *(_DWORD *)v201 -= 2;
        }
        v202 = (WTF::StringImpl *)__src;
        *(_QWORD *)&__src = 0;
        if (v202)
        {
          if (*(_DWORD *)v202 == 2)
            WTF::StringImpl::destroy(v202, v200);
          else
            *(_DWORD *)v202 -= 2;
        }
        (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 104))(a2, 1);
      }
      v195 = v195 + 100.0;
    }
    while (v195 < v172);
  }
  (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 104))(a2, 1);
  (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 104))(a2, 1);
  WebCore::FontCascade::~FontCascade((WebCore::FontCascade *)v309, v203);
  v205 = (unsigned int *)v340;
  v340 = 0;
  v5 = *(float *)&v306;
  if (v205)
  {
    if (*v205 == 1)
    {
      v245 = v205[1];
      if ((_DWORD)v245)
      {
        v246 = (WTF::StringImpl **)(v205 + 2);
        v247 = 8 * v245;
        do
        {
          v248 = *v246;
          *v246 = 0;
          if (v248)
          {
            if (*(_DWORD *)v248 == 2)
              WTF::StringImpl::destroy(v248, v204);
            else
              *(_DWORD *)v248 -= 2;
          }
          ++v246;
          v247 -= 8;
        }
        while (v247);
      }
      WTF::fastFree((WTF *)v205, v204);
    }
    else
    {
      --*v205;
    }
  }
  WebCore::FontDescription::~FontDescription((WebCore::FontDescription *)&v321, v204);
  v327 = 256;
  v325 = 0u;
  v326 = 0u;
  v323 = 0u;
  v324 = 0u;
  v321 = 0u;
  v322 = 0u;
  v328 = 0;
  v206 = (_DWORD *)*MEMORY[0x1E0CBF2F8];
  if (*MEMORY[0x1E0CBF2F8])
    *v206 += 2;
  v329 = v206;
  v330 = 0;
  v331 = 2143289344;
  v333 = 0;
  v332 = 0;
  v334 = 26216000;
  v335 = 257;
  v336 = 0;
  v337 = v337 & 0x80000000 | 0xE000;
  v338 = 0;
  v339 &= 0xFCu;
  v207 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v207 = 0x100000001;
  *(_QWORD *)(v207 + 8) = 0;
  v340 = (WTF *)v207;
  v341 = 0;
  v342 &= 0xFC00u;
  v208 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v7 + 112) + 8))(*(_QWORD *)(*(_QWORD *)v7 + 112));
  v209 = (WTF::AtomStringImpl **)WebCore::genericFontFamilyForScript((WTF *)(v208 + 24), 0);
  v211 = *v209;
  if (!*v209)
  {
    if (*(_DWORD *)(v207 + 4))
    {
      v211 = 0;
      goto LABEL_479;
    }
LABEL_484:
    __break(0xC471u);
    JUMPOUT(0x195DCD2ACLL);
  }
  if ((*((_BYTE *)v211 + 16) & 0x10) != 0)
  {
    *(_DWORD *)v211 += 2;
  }
  else
  {
    WTF::AtomStringImpl::addSlowCase(*v209, v210);
    v211 = *(WTF::AtomStringImpl **)&v309[0];
  }
  if (!*(_DWORD *)(v207 + 4))
    goto LABEL_484;
  if (v211)
  {
    v212 = 0;
    *(_DWORD *)v211 += 2;
    goto LABEL_357;
  }
LABEL_479:
  v212 = 1;
LABEL_357:
  v213 = *(WTF::StringImpl **)(v207 + 8);
  *(_QWORD *)(v207 + 8) = v211;
  if (!v213)
    goto LABEL_360;
  if (*(_DWORD *)v213 != 2)
  {
    *(_DWORD *)v213 -= 2;
LABEL_360:
    if ((v212 & 1) != 0)
      goto LABEL_363;
    goto LABEL_361;
  }
  WTF::StringImpl::destroy(v213, v210);
  if ((v212 & 1) != 0)
    goto LABEL_363;
LABEL_361:
  if (*(_DWORD *)v211 == 2)
    WTF::StringImpl::destroy(v211, v210);
  else
    *(_DWORD *)v211 -= 2;
LABEL_363:
  v336 = 1094713344;
  v214 = (WebCore *)WebCore::FontCascade::FontCascade((uint64_t)v309, (uint64_t *)&v321);
  v383[0] = 0;
  v215 = *(_QWORD *)(StatusReg + 736);
  if (!v215 || (v216 = *(_QWORD *)(v215 + 96)) == 0)
    v216 = WebCore::threadGlobalDataSlow(v214);
  v217 = *(_QWORD *)(v216 + 80);
  if (!v217)
  {
    WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v216);
    v217 = *(_QWORD *)(v216 + 80);
  }
  WebCore::FontCache::updateFontCascade(v217, (uint64_t)v309, v383);
  v218 = v383[0];
  v383[0] = 0;
  if (v218)
  {
    if (*((_DWORD *)v218 + 2) == 1)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v218 + 8))(v218);
    else
      --*((_DWORD *)v218 + 2);
  }
  WebCore::LocalFrameView::visualViewportRect((WebCore::LocalFrameView *)v109);
  WTF::numberToString();
  HIDWORD(v358) = strlen(__s);
  WTF::numberToString();
  v219 = strlen(v343);
  HIDWORD(v350) = v219;
  if (v219 < 0 || __OFADD__(v219, 2) || __OFADD__(v219 + 2, 1) || __OFADD__(v219 + 3, 1) || __OFADD__(v219 + 4, 1))
    goto LABEL_506;
  v220 = v219 + 7;
  v221 = __OFADD__(v219 + 5, 2);
  if ((HIDWORD(v358) & 0x80000000) != 0)
    goto LABEL_506;
  if (v221)
    goto LABEL_506;
  v222 = (HIDWORD(v358) + v220);
  if (__OFADD__(HIDWORD(v358), v220))
    goto LABEL_506;
  v371 = v355;
  v372 = v356;
  v373 = v357;
  v374 = v358;
  v368 = v352;
  v369 = v353;
  v370 = v354;
  v361 = v345;
  v362 = v346;
  v359 = *(_OWORD *)v343;
  v360 = v344;
  v366 = v350;
  v367 = *(_OWORD *)__s;
  v364 = v348;
  v365 = v349;
  v363 = v347;
  if ((v222 & 0x80000000) != 0 || (WTF::tryFastCompactMalloc((WTF *)(v222 + 20)), (v7 = v383[0]) == 0))
  {
LABEL_506:
    __break(0xC471u);
    JUMPOUT(0x195DCD3A8);
  }
  v21 = (unint64_t)v383[0] + 20;
  *(_DWORD *)v383[0] = 2;
  *((_DWORD *)v7 + 1) = v222;
  *((_QWORD *)v7 + 1) = (char *)v7 + 20;
  *((_DWORD *)v7 + 4) = 4;
  v379 = v371;
  v380 = v372;
  v381 = v373;
  *(_OWORD *)__n = v374;
  __src = v367;
  v376 = v368;
  v377 = v369;
  v378 = v370;
  v2 = (WTF::StringImpl *)HIDWORD(v374);
  if (HIDWORD(v374))
  {
    if (HIDWORD(v374) != 1)
    {
      memcpy((char *)v7 + 20, &__src, HIDWORD(v374));
      goto LABEL_387;
    }
    goto LABEL_472;
  }
LABEL_387:
  v223 = (char *)v2 + v21;
  *(_WORD *)v223 = 30832;
  v387 = v363;
  v388 = v364;
  *(_OWORD *)v390 = v366;
  v389 = v365;
  *(_OWORD *)v383 = v359;
  v384 = v360;
  v385 = v361;
  v386 = v362;
  *((_WORD *)v223 + 1) = -10464;
  v223[4] = 32;
  v224 = (char *)v2 + v21 + 5;
  v225 = HIDWORD(v390[1]);
  if (HIDWORD(v390[1]))
  {
    if (HIDWORD(v390[1]) == 1)
      *v224 = v383[0];
    else
      memcpy(v224, v383, HIDWORD(v390[1]));
  }
  *(_WORD *)&v224[v225] = 30832;
  LODWORD(__src) = 0;
  v226 = *(_DWORD *)v7;
  *(_DWORD *)v7 += 2;
  *((_QWORD *)&__src + 1) = v7;
  LODWORD(v376) = 0;
  BYTE4(v376) = 1;
  *((_QWORD *)&v376 + 1) = 0x3F80000000000000;
  LODWORD(v377) = 0;
  BYTE4(v377) = 4;
  BYTE5(v377) = BYTE5(v377) & 0xE0 | 8;
  if (v226)
    *(_DWORD *)v7 = v226;
  else
    WTF::StringImpl::destroy(v7, v29);
  v227 = WebCore::FontCascade::width((uint64_t)v309, (uint64_t)&__src);
  v229 = WebCore::FontCascade::metricsOfPrimaryFont((WebCore::FontCascade *)v309, v228);
  v230 = *(float *)(v229 + 4) + *(float *)(v229 + 12);
  v305 = v227 + 4.0;
  v301 = v230 + 4.0;
  v231 = (float)((float)(v227 + 4.0) * 0.5) + 4.0;
  v232 = (float)((float)(v230 + 4.0) * 0.5) + 4.0;
  (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 96))(a2, 1);
  v233 = -12.0 - v227;
  if ((_DWORD)v3)
    v234 = 15.0;
  else
    v234 = -12.0 - v227;
  v235 = *((float *)&v306 + 1) + v234;
  v308 = v230;
  v236 = -12.0 - v230;
  if ((_DWORD)v4)
    v237 = 15.0;
  else
    v237 = -12.0 - v230;
  v238 = v5 + v237;
  *(float *)v383 = v231 + v235;
  *((float *)v383 + 1) = v238 + v232;
  if (v320 == 2)
  {
    if (v319[0] && (*(unsigned int (**)(_QWORD))(*(_QWORD *)v319[0] + 200))(v319[0]))
      goto LABEL_439;
  }
  else if (!v320)
  {
    goto LABEL_439;
  }
  v239 = WebCore::Path::ensurePlatformPathImpl((WebCore::Path *)&v318);
  if (!WebCore::PathCG::contains(v239, (float *)v383, 0))
  {
LABEL_439:
    v243 = v305;
    v244 = v230 + 4.0;
    goto LABEL_440;
  }
  if ((_DWORD)v3)
    v240 = v298 + v233;
  else
    v240 = 15.0;
  *(float *)v383 = v231 + v240;
  *((float *)v383 + 1) = v238 + v232;
  if (v320 == 2)
  {
    if (v319[0] && (*(unsigned int (**)(_QWORD))(*(_QWORD *)v319[0] + 200))(v319[0]))
      goto LABEL_438;
  }
  else if (!v320)
  {
    goto LABEL_438;
  }
  v241 = WebCore::Path::ensurePlatformPathImpl((WebCore::Path *)&v318);
  if (!WebCore::PathCG::contains(v241, (float *)v383, 0))
  {
LABEL_438:
    v235 = v240;
    goto LABEL_439;
  }
  v242 = v240;
  if ((_DWORD)v4)
    v238 = v297 + v236;
  else
    v238 = v302 + 15.0;
  *(float *)v383 = v231 + v235;
  *((float *)v383 + 1) = v238 + v232;
  if (v320 == 2)
  {
    v243 = v305;
    v244 = v301;
    if (v319[0] && (*(unsigned int (**)(_QWORD))(*(_QWORD *)v319[0] + 200))(v319[0]))
      goto LABEL_440;
LABEL_464:
    v262 = WebCore::Path::ensurePlatformPathImpl((WebCore::Path *)&v318);
    if (WebCore::PathCG::contains(v262, (float *)v383, 0))
      v235 = v242;
    goto LABEL_440;
  }
  v243 = v305;
  v244 = v301;
  if (v320)
    goto LABEL_464;
LABEL_440:
  (*(void (**)(WebCore::GraphicsContext *, float, float))(*(_QWORD *)a2 + 648))(a2, v235, v238);
  __asm { FMOV            V0.2S, #4.0 }
  v383[0] = _D0;
  v383[1] = (WTF::StringImpl *)__PAIR64__(LODWORD(v244), LODWORD(v243));
  __asm { FMOV            V0.4S, #4.0 }
  v384 = _Q0;
  v385 = _Q0;
  *(_QWORD *)&v367 = 0x11040000FFFFFF99;
  (*(void (**)(WebCore::GraphicsContext *, WTF::StringImpl **, __int128 *, uint64_t))(*(_QWORD *)a2 + 264))(a2, v383, &v367, 1);
  if ((v367 & 0x8000000000000) != 0)
  {
    v285 = (unsigned int *)(v367 & 0xFFFFFFFFFFFFLL);
    do
    {
      v286 = __ldaxr(v285);
      v287 = v286 - 1;
    }
    while (__stlxr(v287, v285));
    if (!v287)
    {
      atomic_store(1u, v285);
      WTF::fastFree((WTF *)v285, v251);
    }
  }
  v383[0] = (WTF::StringImpl *)0x11040000000000FFLL;
  WebCore::GraphicsContext::setFillColor(a2, (const WebCore::Color *)v383);
  if (((unint64_t)v383[0] & 0x8000000000000) != 0)
  {
    v288 = (unsigned int *)((unint64_t)v383[0] & 0xFFFFFFFFFFFFLL);
    do
    {
      v289 = __ldaxr(v288);
      v290 = v289 - 1;
    }
    while (__stlxr(v290, v288));
    if (!v290)
    {
      atomic_store(1u, v288);
      WTF::fastFree((WTF *)v288, v252);
    }
  }
  v253 = (float)(v308 + 6.0)
       - (float)*(int *)(WebCore::FontCascade::metricsOfPrimaryFont((WebCore::FontCascade *)v309, v252) + 48);
  LODWORD(v383[0]) = 1086324736;
  *((float *)v383 + 1) = v253;
  (*(void (**)(WebCore::GraphicsContext *, _OWORD *, __int128 *, WTF::StringImpl **, _QWORD, _QWORD))(*(_QWORD *)a2 + 520))(a2, v309, &__src, v383, 0, 0);
  (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 104))(a2, 1);
  v255 = (WTF::StringImpl *)*((_QWORD *)&__src + 1);
  *((_QWORD *)&__src + 1) = 0;
  if (v255)
  {
    if (*(_DWORD *)v255 == 2)
      WTF::StringImpl::destroy(v255, v254);
    else
      *(_DWORD *)v255 -= 2;
  }
  WebCore::FontCascade::~FontCascade((WebCore::FontCascade *)v309, v254);
  v257 = (unsigned int *)v340;
  v340 = 0;
  if (v257)
  {
    if (*v257 == 1)
    {
      v258 = v257[1];
      if ((_DWORD)v258)
      {
        v259 = (WTF::StringImpl **)(v257 + 2);
        v260 = 8 * v258;
        do
        {
          v261 = *v259;
          *v259 = 0;
          if (v261)
          {
            if (*(_DWORD *)v261 == 2)
              WTF::StringImpl::destroy(v261, v256);
            else
              *(_DWORD *)v261 -= 2;
          }
          ++v259;
          v260 -= 8;
        }
        while (v260);
      }
      WTF::fastFree((WTF *)v257, v256);
    }
    else
    {
      --*v257;
    }
  }
  WebCore::FontDescription::~FontDescription((WebCore::FontDescription *)&v321, v256);
LABEL_449:
  if (v320 != -1)
    ((void (*)(_OWORD *, _QWORD *))off_1E33EE980[v320])(v309, v319);
  return (*(uint64_t (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 104))(a2, 1);
}

void WebCore::InspectorOverlay::drawNodeHighlight(float32x2_t *this, WebCore::GraphicsContext *a2, WebCore::Node *a3, uint64_t a4)
{
  uint64_t v8;
  void *v9;
  WebCore::FloatRect *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  float v15;
  float v16;
  float v17;
  float v19;
  float v20;
  float v21;
  float v23;
  float v24;
  float v25;
  float v27;
  float v28;
  float v29;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  const WebCore::RenderBox *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  int v78;
  WebCore::Element *v79;
  WTF::StringImpl *v80;
  uint64_t v81;
  uint64_t v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  int v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  WTF::StringImpl *v94;
  uint64_t v95;
  WTF::StringImpl *v96;
  int v97;
  uint64_t v98;
  int v99;
  WTF::StringImpl *v100;
  WebCore::Element **v101;
  WTF::StringImpl *v102;
  uint64_t v103;
  unint64_t v104;
  WebCore::Element *v105;
  uint64_t v106;
  BOOL v107;
  WebCore::Element **v108;
  WebCore::DOMCSSNamespace *v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  WTF::StringImpl *v112;
  int v113;
  int v114;
  uint64_t v115;
  WTF::StringImpl *v116;
  unsigned int v117;
  int v118;
  WTF::StringImpl *v119;
  WTF::StringImpl *v120;
  uint64_t v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  int v124;
  WTF::StringImpl *v125;
  WebCore::ScrollView *v126;
  WTF::StringImpl *v127;
  uint64_t v128;
  int v129;
  int v130;
  int v131;
  unsigned int v132;
  int v133;
  int v134;
  unsigned int v135;
  int v136;
  BOOL v137;
  int v138;
  unsigned int v139;
  WTF::String *v140;
  WTF::StringImpl *v141;
  unint64_t v142;
  int v143;
  int v144;
  unint64_t v145;
  float v146;
  int v147;
  int v148;
  float v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  int v153;
  const __CFString *v154;
  WTF::StringImpl *v155;
  uint64_t v156;
  WTF::StringImpl *v157;
  WTF::StringImpl *v158;
  const __CFString *v159;
  WTF::StringImpl *v160;
  uint64_t v161;
  WTF::StringImpl *v162;
  WTF::StringImpl *v163;
  unsigned __int8 v164;
  unsigned __int8 v165;
  WTF::StringImpl *v166;
  WTF::StringImpl *v167;
  int v168;
  unsigned int v169;
  WTF::StringImpl *v170;
  char *v171;
  int8x16_t *v172;
  uint64_t v173;
  char *v174;
  char *v175;
  __int128 v176;
  int8x16_t v177;
  int8x16_t v178;
  int8x16_t v179;
  char *v180;
  char *v181;
  char *v182;
  __int16 v183;
  WTF::StringImpl *v184;
  WTF::StringImpl *v185;
  uint64_t v186;
  WTF::StringImpl *v187;
  int v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  WTF::StringImpl *v196;
  uint64_t v197;
  int v198;
  void *v199;
  int v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  _QWORD *v207;
  _QWORD *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  _QWORD *v212;
  WTF::StringImpl *v213;
  WTF::StringImpl *v214;
  BOOL v215;
  int v216;
  WTF::StringImpl *v217;
  int v218;
  char *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  _QWORD *v225;
  _QWORD *v226;
  uint64_t v227;
  uint64_t v228;
  WTF::StringImpl **v229;
  _QWORD *v230;
  WTF::StringImpl *v231;
  WTF::StringImpl **v232;
  WTF::StringImpl **v233;
  int v234;
  char *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  _QWORD *v241;
  _QWORD *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  _QWORD *v246;
  WTF::StringImpl *v247;
  WTF::StringImpl *v248;
  int v249;
  char *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  _QWORD *v256;
  _QWORD *v257;
  uint64_t v258;
  uint64_t v259;
  WTF::StringImpl **v260;
  _QWORD *v261;
  WTF::StringImpl *v262;
  unsigned int *v263;
  unsigned int v264;
  unsigned int v265;
  unsigned int *v266;
  unsigned int v267;
  unsigned int v268;
  unsigned int *v269;
  unsigned int v270;
  unsigned int v271;
  unsigned int *v272;
  unsigned int v273;
  unsigned int v274;
  unsigned int *v275;
  unsigned int *v276;
  unsigned int v277;
  WebCore::ScrollView *v278;
  WebCore::ScrollView *v279;
  unint64_t v280;
  int v281;
  unint64_t v282;
  uint64_t v283;
  unsigned int *v284;
  unsigned int v285;
  float v286;
  unsigned int v287;
  unsigned int v288;
  float v289;
  WTF::StringImpl *v290;
  float v291;
  float v292;
  __int16 v293;
  float v294;
  float v295;
  float v296;
  float v297;
  float v298;
  float v299;
  float v300;
  float v301;
  float v303;
  __int16 v304;
  float v305;
  BOOL v306;
  float v307;
  float v308;
  WTF::StringImpl *v309;
  float v310;
  __int16 v311;
  float v312;
  float v313;
  BOOL v314;
  float v315;
  __int16 v316;
  __int16 v317;
  void *v318;
  WTF::StringImpl *v319;
  void *v320;
  void *v321;
  WTF::StringImpl *v322;
  unsigned int v323;
  unsigned int v324;
  WTF::StringImpl *v325;
  WTF::StringImpl *v326;
  WTF *v327;
  WTF::StringImpl *v328;
  uint64_t v329;
  uint64_t v330;
  WTF::StringImpl *v331;
  uint64_t *v332;
  WTF *v333;
  uint64_t v334;
  uint64_t *v335;
  WTF *v336;
  uint64_t v337;
  WTF::StringImpl **v338;
  uint64_t v339;
  WTF::StringImpl *v340;
  WTF::StringImpl *v341;
  WTF::StringImpl *v342;
  WTF::StringImpl *v343;
  WTF::StringImpl *v344;
  int v345;
  double v346;
  int v348;
  double v349;
  WTF::StringImpl *v351;
  uint64_t v352;
  uint64_t v353;
  WebCore **v354;
  WTF::StringImpl *v355;
  uint64_t v356;
  WTF::StringImpl *v357;
  WebCore *v358;
  unint64_t v359;
  int v360;
  int v361;
  unsigned int v362;
  unsigned int v363;
  int v364;
  unsigned int v365;
  unsigned int v366;
  int v367;
  unsigned int v368;
  unsigned int v369;
  int v370;
  unsigned int v371;
  unsigned int v372;
  int v373;
  WebCore::FloatRect *v374;
  void *v375;
  unsigned int *v376;
  unsigned int v377;
  unsigned int v378;
  float v379;
  WTF *v380;
  WTF *v381;
  float v382;
  float v383;
  float v384;
  float v385;
  float v386;
  float v387;
  float v388;
  float v389;
  float v390;
  float v391;
  float v392;
  float v393;
  void *v394;
  WTF *v395;
  WTF *v396;
  float v397;
  float v398;
  float v399;
  float v400;
  float v401;
  float v402;
  float v403;
  float v404;
  float v405;
  float v406;
  float v407;
  float v408;
  void *v409;
  uint64_t v410;
  WebCore::AXObjectCache **v411;
  uint64_t v412;
  WebCore::AXObjectCache *v413;
  uint64_t v414;
  uint64_t v415;
  unsigned int *v416;
  unsigned int v417;
  unsigned int v418;
  unsigned int *v419;
  unsigned int v420;
  unsigned int v421;
  unsigned int *v422;
  unsigned int v423;
  unsigned int v424;
  unsigned int *v425;
  unsigned int v426;
  unsigned int v427;
  unsigned int *v428;
  unsigned int v429;
  unsigned int v430;
  unsigned int *v431;
  unsigned int v432;
  unsigned int v433;
  unsigned int *v434;
  unsigned int v435;
  unsigned int v436;
  unsigned int *v437;
  unsigned int v438;
  unsigned int v439;
  unsigned int *v440;
  unsigned int v441;
  unsigned int v442;
  WTF::StringImpl *v443;
  WTF::StringImpl *v444;
  WTF::StringImpl *v445;
  WTF::StringImpl *v446;
  WTF::StringImpl *v447;
  WTF::StringImpl *v448;
  WTF::StringImpl *v449;
  WTF::StringImpl *v450[2];
  __int128 v451;
  __int128 v452;
  __int128 v453;
  uint64_t v454;
  WTF *v455[2];
  __int128 v456;
  WTF::StringImpl *v457;
  WTF::StringImpl *v458[2];
  __int128 v459;
  __int16 v460;
  int v461;
  WTF::StringImpl *v462[2];
  __int128 v463;
  __int128 v464;
  __int128 v465;
  __int128 v466;
  __int128 v467;
  char v468;
  int v469;
  uint64_t v470;
  int8x16x2_t v471;
  int8x16x2_t v472;
  int8x16x2_t v473;

  v470 = *MEMORY[0x1E0C80C00];
  *this = 0;
  this[1] = 0;
  this[10].i32[0] = 0;
  v8 = *(_QWORD *)(a4 + 64);
  *(_QWORD *)&v464 = 0;
  *(_OWORD *)v462 = 0u;
  v463 = 0u;
  BYTE8(v464) = 1;
  v465 = 0u;
  v466 = 0u;
  v467 = 0u;
  v468 = 1;
  WebCore::buildNodeHighlight(v8, (unint64_t *)a2 + 4, (unint64_t *)v462, 1);
  *(_OWORD *)v458 = 0u;
  v459 = 0u;
  *(_OWORD *)v455 = 0u;
  v456 = 0u;
  v452 = 0u;
  v453 = 0u;
  *(_OWORD *)v450 = 0u;
  v451 = 0u;
  if (HIDWORD(v465))
  {
    v11 = *(_OWORD *)(v465 + 16);
    *(_OWORD *)v458 = *(_OWORD *)v465;
    v459 = v11;
    if (HIDWORD(v465) != 1)
    {
      v12 = *(_OWORD *)(v465 + 48);
      *(_OWORD *)v455 = *(_OWORD *)(v465 + 32);
      v456 = v12;
      if (HIDWORD(v465) >= 3)
      {
        v13 = *(_OWORD *)(v465 + 80);
        v452 = *(_OWORD *)(v465 + 64);
        v453 = v13;
        if (HIDWORD(v465) != 3)
        {
          v14 = *(_OWORD *)(v465 + 112);
          *(_OWORD *)v450 = *(_OWORD *)(v465 + 96);
          v451 = v14;
        }
      }
    }
  }
  if (*((float *)&v459 + 2) >= *(float *)&v459)
    v15 = *(float *)&v459;
  else
    v15 = *((float *)&v459 + 2);
  if (*(float *)&v458[1] >= *(float *)v458)
    v16 = *(float *)v458;
  else
    v16 = *(float *)&v458[1];
  if (v15 >= v16)
    v15 = v16;
  v17 = fabsf(v15);
  if (v17 == INFINITY || v17 > 2147500000.0)
    v15 = (float)((SLODWORD(v15) >> 31) ^ 0x7FFFFFFF);
  if (*((float *)&v459 + 3) >= *((float *)&v459 + 1))
    v19 = *((float *)&v459 + 1);
  else
    v19 = *((float *)&v459 + 3);
  if (*((float *)&v458[1] + 1) >= *((float *)v458 + 1))
    v20 = *((float *)v458 + 1);
  else
    v20 = *((float *)&v458[1] + 1);
  if (v19 >= v20)
    v19 = v20;
  v21 = fabsf(v19);
  if (v21 == INFINITY || v21 > 2147500000.0)
    v19 = (float)((SLODWORD(v19) >> 31) ^ 0x7FFFFFFF);
  if (*(float *)v458 >= *(float *)&v458[1])
    v23 = *(float *)v458;
  else
    v23 = *(float *)&v458[1];
  if (*(float *)&v459 >= *((float *)&v459 + 2))
    v24 = *(float *)&v459;
  else
    v24 = *((float *)&v459 + 2);
  if (v23 < v24)
    v23 = v24;
  v25 = fabsf(v23);
  if (v25 == INFINITY || v25 > 2147500000.0)
    v23 = (float)((SLODWORD(v23) >> 31) ^ 0x7FFFFFFF);
  if (*((float *)v458 + 1) >= *((float *)&v458[1] + 1))
    v27 = *((float *)v458 + 1);
  else
    v27 = *((float *)&v458[1] + 1);
  if (*((float *)&v459 + 1) >= *((float *)&v459 + 3))
    v28 = *((float *)&v459 + 1);
  else
    v28 = *((float *)&v459 + 3);
  if (v27 < v28)
    v27 = v28;
  v29 = fabsf(v27);
  if (v29 == INFINITY || v29 > 2147500000.0)
    v27 = (float)((SLODWORD(v27) >> 31) ^ 0x7FFFFFFF);
  v31 = v23 - v15;
  v32 = *(float *)v455;
  if (v31 > 0.0
    && (float)(v27 - v19) > 0.0
    && (*(float *)v458 != *(float *)v455
     || *((float *)v458 + 1) != *((float *)v455 + 1)
     || *(float *)&v458[1] != *(float *)&v455[1]
     || *((float *)&v458[1] + 1) != *((float *)&v455[1] + 1)
     || *(float *)&v459 != *(float *)&v456
     || *((float *)&v459 + 1) != *((float *)&v456 + 1)
     || *((float *)&v459 + 2) != *((float *)&v456 + 2)
     || *((float *)&v459 + 3) != *((float *)&v456 + 3)))
  {
    if ((v464 & 0x8000000000000) == 0)
    {
      if (!(_BYTE)v464)
        goto LABEL_71;
      goto LABEL_70;
    }
    if (*(float *)((v464 & 0xFFFFFFFFFFFFLL) + 0x10) > 0.0)
    {
LABEL_70:
      WebCore::drawOutlinedQuadWithClip(a3, (WebCore::GraphicsContext *)v458, (const WebCore::FloatQuad *)v455, (const WebCore::FloatQuad *)&v464, (const WebCore::Color *)this, v10);
      v32 = *(float *)v455;
    }
  }
LABEL_71:
  if (*((float *)&v456 + 2) >= *(float *)&v456)
    v33 = *(float *)&v456;
  else
    v33 = *((float *)&v456 + 2);
  if (*(float *)&v455[1] >= v32)
    v34 = v32;
  else
    v34 = *(float *)&v455[1];
  if (v33 >= v34)
    v33 = v34;
  v35 = fabsf(v33);
  if (v35 == INFINITY || v35 > 2147500000.0)
    v33 = (float)((SLODWORD(v33) >> 31) ^ 0x7FFFFFFF);
  if (*((float *)&v456 + 3) >= *((float *)&v456 + 1))
    v36 = *((float *)&v456 + 1);
  else
    v36 = *((float *)&v456 + 3);
  if (*((float *)&v455[1] + 1) >= *((float *)v455 + 1))
    v37 = *((float *)v455 + 1);
  else
    v37 = *((float *)&v455[1] + 1);
  if (v36 >= v37)
    v36 = v37;
  v38 = fabsf(v36);
  if (v38 == INFINITY || v38 > 2147500000.0)
    v36 = (float)((SLODWORD(v36) >> 31) ^ 0x7FFFFFFF);
  if (v32 >= *(float *)&v455[1])
    v39 = v32;
  else
    v39 = *(float *)&v455[1];
  if (*(float *)&v456 >= *((float *)&v456 + 2))
    v40 = *(float *)&v456;
  else
    v40 = *((float *)&v456 + 2);
  if (v39 < v40)
    v39 = v40;
  v41 = fabsf(v39);
  if (v41 == INFINITY || v41 > 2147500000.0)
    v39 = (float)((SLODWORD(v39) >> 31) ^ 0x7FFFFFFF);
  if (*((float *)v455 + 1) >= *((float *)&v455[1] + 1))
    v42 = *((float *)v455 + 1);
  else
    v42 = *((float *)&v455[1] + 1);
  if (*((float *)&v456 + 1) >= *((float *)&v456 + 3))
    v43 = *((float *)&v456 + 1);
  else
    v43 = *((float *)&v456 + 3);
  if (v42 < v43)
    v42 = v43;
  v44 = fabsf(v42);
  if (v44 == INFINITY || v44 > 2147500000.0)
    v42 = (float)((SLODWORD(v42) >> 31) ^ 0x7FFFFFFF);
  v45 = v39 - v33;
  v46 = *(float *)&v452;
  if (v45 > 0.0
    && (float)(v42 - v36) > 0.0
    && (v32 != *(float *)&v452
     || *((float *)v455 + 1) != *((float *)&v452 + 1)
     || *(float *)&v455[1] != *((float *)&v452 + 2)
     || *((float *)&v455[1] + 1) != *((float *)&v452 + 3)
     || *(float *)&v456 != *(float *)&v453
     || *((float *)&v456 + 1) != *((float *)&v453 + 1)
     || *((float *)&v456 + 2) != *((float *)&v453 + 2)
     || *((float *)&v456 + 3) != *((float *)&v453 + 3)))
  {
    if ((*((_QWORD *)&v463 + 1) & 0x8000000000000) == 0)
    {
      if (!BYTE8(v463))
        goto LABEL_124;
      goto LABEL_123;
    }
    if (*(float *)((*((_QWORD *)&v463 + 1) & 0xFFFFFFFFFFFFLL) + 0x10) > 0.0)
    {
LABEL_123:
      WebCore::drawOutlinedQuadWithClip(a3, (WebCore::GraphicsContext *)v455, (const WebCore::FloatQuad *)&v452, (const WebCore::FloatQuad *)((char *)&v463 + 8), (const WebCore::Color *)this, v10);
      v46 = *(float *)&v452;
    }
  }
LABEL_124:
  if (*((float *)&v453 + 2) >= *(float *)&v453)
    v47 = *(float *)&v453;
  else
    v47 = *((float *)&v453 + 2);
  if (*((float *)&v452 + 2) >= v46)
    v48 = v46;
  else
    v48 = *((float *)&v452 + 2);
  if (v47 >= v48)
    v47 = v48;
  v49 = fabsf(v47);
  if (v49 == INFINITY || v49 > 2147500000.0)
    v47 = (float)((SLODWORD(v47) >> 31) ^ 0x7FFFFFFF);
  if (*((float *)&v453 + 3) >= *((float *)&v453 + 1))
    v50 = *((float *)&v453 + 1);
  else
    v50 = *((float *)&v453 + 3);
  if (*((float *)&v452 + 3) >= *((float *)&v452 + 1))
    v51 = *((float *)&v452 + 1);
  else
    v51 = *((float *)&v452 + 3);
  if (v50 >= v51)
    v50 = v51;
  v52 = fabsf(v50);
  if (v52 == INFINITY || v52 > 2147500000.0)
    v50 = (float)((SLODWORD(v50) >> 31) ^ 0x7FFFFFFF);
  if (v46 >= *((float *)&v452 + 2))
    v53 = v46;
  else
    v53 = *((float *)&v452 + 2);
  if (*(float *)&v453 >= *((float *)&v453 + 2))
    v54 = *(float *)&v453;
  else
    v54 = *((float *)&v453 + 2);
  if (v53 < v54)
    v53 = v54;
  v55 = fabsf(v53);
  if (v55 == INFINITY || v55 > 2147500000.0)
    v53 = (float)((SLODWORD(v53) >> 31) ^ 0x7FFFFFFF);
  if (*((float *)&v452 + 1) >= *((float *)&v452 + 3))
    v56 = *((float *)&v452 + 1);
  else
    v56 = *((float *)&v452 + 3);
  if (*((float *)&v453 + 1) >= *((float *)&v453 + 3))
    v57 = *((float *)&v453 + 1);
  else
    v57 = *((float *)&v453 + 3);
  if (v56 < v57)
    v56 = v57;
  v58 = fabsf(v56);
  if (v58 == INFINITY || v58 > 2147500000.0)
    v56 = (float)((SLODWORD(v56) >> 31) ^ 0x7FFFFFFF);
  v59 = v53 - v47;
  v60 = *(float *)v450;
  if (v59 > 0.0
    && (float)(v56 - v50) > 0.0
    && (v46 != *(float *)v450
     || *((float *)&v452 + 1) != *((float *)v450 + 1)
     || *((float *)&v452 + 2) != *(float *)&v450[1]
     || *((float *)&v452 + 3) != *((float *)&v450[1] + 1)
     || *(float *)&v453 != *(float *)&v451
     || *((float *)&v453 + 1) != *((float *)&v451 + 1)
     || *((float *)&v453 + 2) != *((float *)&v451 + 2)
     || *((float *)&v453 + 3) != *((float *)&v451 + 3)))
  {
    if ((v463 & 0x8000000000000) == 0)
    {
      if (!(_BYTE)v463)
        goto LABEL_177;
      goto LABEL_176;
    }
    if (*(float *)((v463 & 0xFFFFFFFFFFFFLL) + 0x10) > 0.0)
    {
LABEL_176:
      WebCore::drawOutlinedQuadWithClip(a3, (WebCore::GraphicsContext *)&v452, (const WebCore::FloatQuad *)v450, (const WebCore::FloatQuad *)&v463, (const WebCore::Color *)this, v10);
      v60 = *(float *)v450;
    }
  }
LABEL_177:
  v61 = *(float *)&v451;
  if (*((float *)&v451 + 2) >= *(float *)&v451)
    v62 = *(float *)&v451;
  else
    v62 = *((float *)&v451 + 2);
  if (*(float *)&v450[1] >= v60)
    v63 = v60;
  else
    v63 = *(float *)&v450[1];
  if (v62 >= v63)
    v62 = v63;
  v64 = fabsf(v62);
  if (v64 == INFINITY || v64 > 2147500000.0)
    v62 = (float)((SLODWORD(v62) >> 31) ^ 0x7FFFFFFF);
  if (*((float *)&v451 + 3) >= *((float *)&v451 + 1))
    v65 = *((float *)&v451 + 1);
  else
    v65 = *((float *)&v451 + 3);
  if (*((float *)&v450[1] + 1) >= *((float *)v450 + 1))
    v66 = *((float *)v450 + 1);
  else
    v66 = *((float *)&v450[1] + 1);
  if (v65 >= v66)
    v65 = v66;
  v67 = fabsf(v65);
  if (v67 == INFINITY || v67 > 2147500000.0)
    v65 = (float)((SLODWORD(v65) >> 31) ^ 0x7FFFFFFF);
  if (v60 < *(float *)&v450[1])
    v60 = *(float *)&v450[1];
  if (*(float *)&v451 < *((float *)&v451 + 2))
    v61 = *((float *)&v451 + 2);
  if (v60 >= v61)
    v61 = v60;
  v68 = fabsf(v61);
  if (v68 == INFINITY || v68 > 2147500000.0)
    v61 = (float)((SLODWORD(v61) >> 31) ^ 0x7FFFFFFF);
  if (*((float *)v450 + 1) >= *((float *)&v450[1] + 1))
    v69 = *((float *)v450 + 1);
  else
    v69 = *((float *)&v450[1] + 1);
  if (*((float *)&v451 + 1) >= *((float *)&v451 + 3))
    v70 = *((float *)&v451 + 1);
  else
    v70 = *((float *)&v451 + 3);
  if (v69 < v70)
    v69 = v70;
  v71 = fabsf(v69);
  if (v71 == INFINITY || v71 > 2147500000.0)
    v69 = (float)((SLODWORD(v69) >> 31) ^ 0x7FFFFFFF);
  if ((float)(v61 - v62) > 0.0 && (float)(v69 - v65) > 0.0)
  {
    if (((unint64_t)v462[0] & 0x8000000000000) != 0)
    {
      if (*(float *)(((unint64_t)v462[0] & 0xFFFFFFFFFFFFLL) + 0x10) > 0.0)
        goto LABEL_221;
    }
    else if (LOBYTE(v462[0]))
    {
      goto LABEL_221;
    }
    if (((unint64_t)v462[1] & 0x8000000000000) != 0)
    {
      if (*(float *)(((unint64_t)v462[1] & 0xFFFFFFFFFFFFLL) + 0x10) <= 0.0)
        goto LABEL_222;
      goto LABEL_221;
    }
    if (LOBYTE(v462[1]))
LABEL_221:
      WebCore::drawOutlinedQuad(a3, (WebCore::GraphicsContext *)v450, (const WebCore::FloatQuad *)v462, (const WebCore::Color *)&v462[1], (const WebCore::Color *)this, v10);
  }
LABEL_222:
  WebCore::InspectorOverlayHighlight::~InspectorOverlayHighlight((WebCore::InspectorOverlayHighlight *)v462, v9);
  if (*((_BYTE *)a2 + 72))
  {
    v73 = *(_QWORD *)(a4 + 64) & 0xFFFFFFFFFFFFLL;
    *(_QWORD *)&v452 = v73;
    if (v73)
    {
      v74 = *(_QWORD *)(v73 + 32);
      if ((!v74 || (v75 = *(_QWORD *)(v74 + 8)) == 0 || (*(_BYTE *)(*(_QWORD *)(v75 + 104) + 239) & 0x18) == 0)
        && (*(_BYTE *)(v73 + 45) & 4) != 0
        && (*(_WORD *)(v73 + 69) & 0x800) != 0
        && WebCore::ShapeOutsideInfo::isEnabledFor((WebCore::ShapeOutsideInfo *)v73, v72))
      {
        {
          WebCore::shapeOutsideInfoMap(void)::staticInfoMap = 0;
          *(_QWORD *)&dword_1EE2F9340 = 0;
        }
        v351 = (WTF::StringImpl *)WTF::WeakHashMap<WebCore::RenderBox const,std::unique_ptr<WebCore::ShapeOutsideInfo>,WTF::SingleThreadWeakPtrImpl>::get(&WebCore::shapeOutsideInfoMap(void)::staticInfoMap, v73);
        v450[0] = v351;
        if (v351)
        {
          v352 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 40) + 8) + 528);
          if (v352)
          {
            v353 = *(_QWORD *)(v352 + 8);
            if (v353)
            {
              v354 = (WebCore **)v351;
              v355 = *(WTF::StringImpl **)(v353 + 288);
              v457 = v355;
              v356 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v353 + 24) + 8) + 160);
              (*(void (**)(uint64_t))(*(_QWORD *)v356 + 56))(v356);
              LODWORD(v466) = 0;
              v469 = 0;
              v357 = v354[1];
              if (!v357)
              {
                WebCore::makeShapeForShapeOutside(*v354, (uint64_t *)v458);
                v357 = v458[0];
                v358 = v354[1];
                v354[1] = v458[0];
                if (v358)
                {
                  if (*((_DWORD *)v358 + 2) == 1)
                  {
                    (*(void (**)(WebCore *))(*(_QWORD *)v358 + 8))(v358);
                    v357 = v354[1];
                  }
                  else
                  {
                    --*((_DWORD *)v358 + 2);
                  }
                }
              }
              (*(void (**)(WTF::StringImpl *, WTF::StringImpl **))(*(_QWORD *)v357 + 40))(v357, v462);
              if ((_DWORD)v466 == 2)
              {
                if (v462[1]
                  && (*(unsigned int (**)(WTF::StringImpl *))(*(_QWORD *)v462[1] + 200))(v462[1]))
                {
                  goto LABEL_753;
                }
              }
              else if (!(_DWORD)v466)
              {
LABEL_753:
                v359 = WebCore::ShapeOutsideInfo::computedShapePhysicalBoundingBox((WebCore::ShapeOutsideInfo *)v354);
                *(float *)v455 = (float)(int)v359 * 0.015625;
                *((float *)v455 + 1) = (float)SHIDWORD(v359) * 0.015625;
                *(float *)&v455[1] = *(float *)v455 + (float)((float)v360 * 0.015625);
                *((float *)&v455[1] + 1) = *((float *)v455 + 1);
                *(float *)&v456 = *(float *)&v455[1];
                *((float *)&v456 + 1) = *((float *)v455 + 1) + (float)((float)v361 * 0.015625);
                *((float *)&v456 + 2) = *(float *)v455;
                *((float *)&v456 + 3) = *((float *)&v456 + 1);
                WebCore::RenderObject::localToContainerQuad(v73, (float *)v455, 0, 2u, v458);
                WebCore::ScrollView::contentsToView(v355, (const WebCore::FloatPoint *)v458);
                v455[0] = (WTF *)__PAIR64__(v363, v362);
                LODWORD(v458[0]) = WebCore::Widget::convertToRootView(v355, (const WebCore::FloatPoint *)v455);
                HIDWORD(v458[0]) = v364;
                WebCore::ScrollView::contentsToView(v355, (const WebCore::FloatPoint *)&v458[1]);
                v455[0] = (WTF *)__PAIR64__(v366, v365);
                LODWORD(v458[1]) = WebCore::Widget::convertToRootView(v355, (const WebCore::FloatPoint *)v455);
                HIDWORD(v458[1]) = v367;
                WebCore::ScrollView::contentsToView(v355, (const WebCore::FloatPoint *)&v459);
                v455[0] = (WTF *)__PAIR64__(v369, v368);
                LODWORD(v459) = WebCore::Widget::convertToRootView(v355, (const WebCore::FloatPoint *)v455);
                DWORD1(v459) = v370;
                WebCore::ScrollView::contentsToView(v355, (const WebCore::FloatPoint *)((char *)&v459 + 8));
                v455[0] = (WTF *)__PAIR64__(v372, v371);
                DWORD2(v459) = WebCore::Widget::convertToRootView(v355, (const WebCore::FloatPoint *)v455);
                HIDWORD(v459) = v373;
                v454 = 0x1104000000000000;
                v455[0] = (WTF *)0x1104000060527FCCLL;
                WebCore::drawOutlinedQuad(a3, (WebCore::GraphicsContext *)v458, (const WebCore::FloatQuad *)v455, (const WebCore::Color *)&v454, (const WebCore::Color *)this, v374);
                if ((v454 & 0x8000000000000) != 0)
                {
                  v440 = (unsigned int *)(v454 & 0xFFFFFFFFFFFFLL);
                  do
                  {
                    v441 = __ldaxr(v440);
                    v442 = v441 - 1;
                  }
                  while (__stlxr(v442, v440));
                  if (!v442)
                  {
                    atomic_store(1u, v440);
                    WTF::fastFree((WTF *)v440, v375);
                  }
                }
                if (((unint64_t)v455[0] & 0x8000000000000) != 0)
                {
                  v376 = (unsigned int *)((unint64_t)v455[0] & 0xFFFFFFFFFFFFLL);
                  do
                  {
                    v377 = __ldaxr(v376);
                    v378 = v377 - 1;
                  }
                  while (__stlxr(v378, v376));
                  if (!v378)
                  {
                    atomic_store(1u, v376);
                    WTF::fastFree((WTF *)v376, v375);
                  }
                }
LABEL_810:
                if (v469 != -1)
                  ((void (*)(WTF::StringImpl **, __int128 *))off_1E33EE980[v469])(v458, &v467);
                v469 = -1;
                if ((_DWORD)v466 != -1)
                  ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E33EE980[v466])(v458, &v462[1]);
                goto LABEL_229;
              }
              WebCore::Path::length((WebCore::Path *)((char *)&v466 + 8));
              if (v379 == 0.0)
              {
LABEL_785:
                v461 = 0;
                v395 = (WTF *)WTF::fastMalloc((WTF *)0x28);
                *(_QWORD *)v395 = off_1E33EE9C0;
                *((_QWORD *)v395 + 1) = &v457;
                *((_QWORD *)v395 + 2) = &v452;
                *((_QWORD *)v395 + 3) = v450;
                *((_QWORD *)v395 + 4) = v458;
                v455[0] = v395;
                WebCore::Path::applyElements((WebCore::Path *)v462, v455);
                v396 = v455[0];
                v455[0] = 0;
                if (v396)
                  (*(void (**)(WTF *))(*(_QWORD *)v396 + 8))(v396);
                if (v461 == 2)
                {
                  if (v458[1])
                  {
                    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v458[1] + 240))(v458[1]);
                    goto LABEL_792;
                  }
                }
                else if (v461 == 1)
                {
                  v397 = WebCore::PathStream::computeBoundingRect((uint64_t)&v458[1], 1);
LABEL_792:
                  if (v399 > 0.0 && v400 > 0.0)
                  {
                    v401 = this[1].f32[0];
                    if (v401 <= 0.0 || (v402 = this[1].f32[1], v402 <= 0.0))
                    {
                      this->f32[0] = v397;
                      this->f32[1] = v398;
                      this[1].f32[0] = v399;
                      this[1].f32[1] = v400;
                    }
                    else
                    {
                      v403 = this->f32[1];
                      if (v397 >= this->f32[0])
                        v404 = this->f32[0];
                      else
                        v404 = v397;
                      if (v398 >= v403)
                        v405 = this->f32[1];
                      else
                        v405 = v398;
                      v406 = v401 + this->f32[0];
                      v407 = v399 + v397;
                      if (v406 >= v407)
                        v407 = v406;
                      v408 = v400 + v398;
                      if ((float)(v402 + v403) >= v408)
                        v408 = v402 + v403;
                      this->f32[0] = v404;
                      this->f32[1] = v405;
                      this[1].f32[0] = v407 - v404;
                      this[1].f32[1] = v408 - v405;
                    }
                  }
                }
                (*(void (**)(WebCore::Node *, uint64_t))(*(_QWORD *)a3 + 96))(a3, 1);
                v455[0] = (WTF *)0x1104000060527FCCLL;
                WebCore::GraphicsContext::setFillColor(a3, (const WebCore::Color *)v455);
                if (((unint64_t)v455[0] & 0x8000000000000) != 0)
                {
                  v434 = (unsigned int *)((unint64_t)v455[0] & 0xFFFFFFFFFFFFLL);
                  do
                  {
                    v435 = __ldaxr(v434);
                    v436 = v435 - 1;
                  }
                  while (__stlxr(v436, v434));
                  if (!v436)
                  {
                    atomic_store(1u, v434);
                    WTF::fastFree((WTF *)v434, v409);
                  }
                }
                (*(void (**)(WebCore::Node *, WTF::StringImpl **))(*(_QWORD *)a3 + 176))(a3, v458);
                (*(void (**)(WebCore::Node *, uint64_t))(*(_QWORD *)a3 + 104))(a3, 1);
                if (v461 != -1)
                  ((void (*)(WTF **, WTF::StringImpl **))off_1E33EE980[v461])(v455, &v458[1]);
                goto LABEL_810;
              }
              v461 = 0;
              v380 = (WTF *)WTF::fastMalloc((WTF *)0x28);
              *(_QWORD *)v380 = off_1E33EE9C0;
              *((_QWORD *)v380 + 1) = &v457;
              *((_QWORD *)v380 + 2) = &v452;
              *((_QWORD *)v380 + 3) = v450;
              *((_QWORD *)v380 + 4) = v458;
              v455[0] = v380;
              WebCore::Path::applyElements((WebCore::Path *)((char *)&v466 + 8), v455);
              v381 = v455[0];
              v455[0] = 0;
              if (v381)
                (*(void (**)(WTF *))(*(_QWORD *)v381 + 8))(v381);
              if (v461 == 2)
              {
                if (v458[1])
                {
                  (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v458[1] + 240))(v458[1]);
                  goto LABEL_767;
                }
              }
              else if (v461 == 1)
              {
                v382 = WebCore::PathStream::computeBoundingRect((uint64_t)&v458[1], 1);
LABEL_767:
                if (v384 > 0.0 && v385 > 0.0)
                {
                  v386 = this[1].f32[0];
                  if (v386 <= 0.0 || (v387 = this[1].f32[1], v387 <= 0.0))
                  {
                    this->f32[0] = v382;
                    this->f32[1] = v383;
                    this[1].f32[0] = v384;
                    this[1].f32[1] = v385;
                  }
                  else
                  {
                    v388 = this->f32[1];
                    if (v382 >= this->f32[0])
                      v389 = this->f32[0];
                    else
                      v389 = v382;
                    if (v383 >= v388)
                      v390 = this->f32[1];
                    else
                      v390 = v383;
                    v391 = v386 + this->f32[0];
                    v392 = v384 + v382;
                    if (v391 >= v392)
                      v392 = v391;
                    v393 = v385 + v383;
                    if ((float)(v387 + v388) >= v393)
                      v393 = v387 + v388;
                    this->f32[0] = v389;
                    this->f32[1] = v390;
                    this[1].f32[0] = v392 - v389;
                    this[1].f32[1] = v393 - v390;
                  }
                }
              }
              (*(void (**)(WebCore::Node *, uint64_t))(*(_QWORD *)a3 + 96))(a3, 1);
              v455[0] = (WTF *)0x1104000060527F99;
              WebCore::GraphicsContext::setFillColor(a3, (const WebCore::Color *)v455);
              if (((unint64_t)v455[0] & 0x8000000000000) != 0)
              {
                v437 = (unsigned int *)((unint64_t)v455[0] & 0xFFFFFFFFFFFFLL);
                do
                {
                  v438 = __ldaxr(v437);
                  v439 = v438 - 1;
                }
                while (__stlxr(v439, v437));
                if (!v439)
                {
                  atomic_store(1u, v437);
                  WTF::fastFree((WTF *)v437, v394);
                }
              }
              (*(void (**)(WebCore::Node *, WTF::StringImpl **))(*(_QWORD *)a3 + 176))(a3, v458);
              (*(void (**)(WebCore::Node *, uint64_t))(*(_QWORD *)a3 + 104))(a3, 1);
              if (v461 != -1)
                ((void (*)(WTF **, WTF::StringImpl **))off_1E33EE980[v461])(v455, &v458[1]);
              goto LABEL_785;
            }
          }
        }
      }
    }
  }
LABEL_229:
  if (*((_BYTE *)a2 + 306) || *((_BYTE *)a2 + 307))
    WebCore::InspectorOverlay::drawBounds(*(WebCore::InspectorOverlay **)(*(_QWORD *)a2 + 160), a3, this);
  if (*((_BYTE *)a2 + 72))
  {
    if (this[1].f32[0] <= 0.0)
      goto LABEL_257;
    if (this[1].f32[1] <= 0.0)
      goto LABEL_257;
    v76 = *(unsigned __int16 *)(a4 + 28);
    if ((v76 & 8) == 0)
      goto LABEL_257;
    v77 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 40) + 8) + 528);
    if (!v77 || !*(_QWORD *)(v77 + 8))
      goto LABEL_257;
    if ((~v76 & 0x408) != 0
      || (v78 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 368))(a4),
          v76 = *(unsigned __int16 *)(a4 + 28),
          !v78))
    {
      v79 = (WebCore::Element *)a4;
      if ((v76 & 8) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195DCF65CLL);
      }
    }
    else
    {
      if ((~v76 & 0x408) != 0 || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)a4 + 368))(a4))
      {
        __break(0xC471u);
        JUMPOUT(0x195DCDCF8);
      }
      v91 = *(_QWORD *)(a4 + 112);
      if (!v91)
        goto LABEL_257;
      v79 = *(WebCore::Element **)(v91 + 8);
      if (!v79)
        goto LABEL_257;
    }
    v80 = (WTF::StringImpl *)(*(_QWORD *)(a4 + 64) & 0xFFFFFFFFFFFFLL);
    if (!v80
      || (v81 = *(_QWORD *)((*(_QWORD *)(a4 + 64) & 0xFFFFFFFFFFFFLL) + 0x20)) != 0
      && (v82 = *(_QWORD *)(v81 + 8)) != 0
      && (*(_BYTE *)(*(_QWORD *)(v82 + 104) + 239) & 0x18) != 0)
    {
LABEL_257:
      v92 = 0;
      *(_QWORD *)&v466 = 0;
      v464 = 0u;
      v465 = 0u;
      *(_OWORD *)v462 = 0u;
      v463 = 0u;
      goto LABEL_258;
    }
    (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::Element *))(*(_QWORD *)v79 + 104))(v450, v79);
    if ((*(_WORD *)(*(_QWORD *)(*((_QWORD *)v79 + 5) + 8) + 3358) & 2) == 0)
    {
      WTF::String::convertToASCIILowercase((WTF::String *)v450);
      v84 = v462[0];
      v462[0] = 0;
      v85 = v450[0];
      v450[0] = v84;
      if (v85)
      {
        v86 = *(_DWORD *)v85 - 2;
        if (*(_DWORD *)v85 != 2)
        {
LABEL_250:
          *(_DWORD *)v85 = v86;
          goto LABEL_251;
        }
        WTF::StringImpl::destroy(v85, v83);
        v85 = v462[0];
        v462[0] = 0;
        if (v85)
        {
          v86 = *(_DWORD *)v85 - 2;
          if (*(_DWORD *)v85 != 2)
            goto LABEL_250;
          WTF::StringImpl::destroy(v85, v331);
        }
      }
    }
LABEL_251:
    v87 = *((_QWORD *)v79 + 13);
    if (!v87)
    {
      v94 = 0;
      goto LABEL_335;
    }
    if (!*(_QWORD *)(v87 + 24))
    {
      v94 = 0;
LABEL_289:
      if (*(_QWORD *)(v87 + 16))
      {
        v448 = v80;
        v445 = v94;
        v462[0] = 0;
        v462[1] = 0;
        LODWORD(v463) = 0;
        BYTE4(v463) = 1;
        v101 = (WebCore::Element **)WebCore::Element::classList(v79);
        if (*((_DWORD *)WebCore::DOMTokenList::tokens(v101) + 3))
        {
          v103 = 0;
          v104 = 0;
          v105 = (WebCore::Element *)MEMORY[0x1E0CBF2F8];
          while (1)
          {
            LOBYTE(v458[0]) = 46;
            if (v462[1]
              && ((v106 = v463, v463 < *((_DWORD *)v462[1] + 1))
                ? (v107 = v462[0] == 0)
                : (v107 = 0),
                  v107))
            {
              v114 = *((_DWORD *)v462[1] + 4);
              v115 = *((_QWORD *)v462[1] + 1);
              LODWORD(v463) = v463 + 1;
              if ((v114 & 4) != 0)
                *(_BYTE *)(v115 + v106) = 46;
              else
                *(_WORD *)(v115 + 2 * v106) = 46;
            }
            else
            {
              WTF::StringBuilder::append();
            }
            v108 = WebCore::DOMTokenList::tokens(v101);
            v109 = *((_DWORD *)v108 + 3) <= v104 ? v105 : (WebCore::Element *)((char *)*v108 + v103);
            WebCore::DOMCSSNamespace::escape(v109, v458);
            v111 = v458[0];
            if (!(_DWORD)v463 && !v462[1])
              break;
            if (v458[0] && (*((_BYTE *)v458[0] + 16) & 4) == 0)
            {
              WTF::StringBuilder::append();
LABEL_311:
              if (*(_DWORD *)v111 == 2)
                WTF::StringImpl::destroy(v111, v110);
              else
                *(_DWORD *)v111 -= 2;
              goto LABEL_313;
            }
            WTF::StringBuilder::append();
            if (v111)
              goto LABEL_311;
LABEL_313:
            ++v104;
            v103 += 8;
            if (v104 >= *((unsigned int *)WebCore::DOMTokenList::tokens(v101) + 3))
              goto LABEL_327;
          }
          if (v458[0])
            *(_DWORD *)v458[0] += 2;
          v112 = v462[0];
          v462[0] = v111;
          if (v112)
          {
            if (*(_DWORD *)v112 == 2)
            {
              WTF::StringImpl::destroy(v112, v110);
              if (v111)
                goto LABEL_309;
              goto LABEL_324;
            }
            *(_DWORD *)v112 -= 2;
          }
          if (v111)
          {
LABEL_309:
            v113 = *((_DWORD *)v111 + 1);
            goto LABEL_310;
          }
LABEL_324:
          v113 = 0;
LABEL_310:
          LODWORD(v463) = v113;
          if (v111)
            goto LABEL_311;
          goto LABEL_313;
        }
LABEL_327:
        v116 = v462[0];
        if (v462[0]
          || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)v462),
              WTF::StringBuilder::reifyString((WTF::StringBuilder *)v462),
              (v116 = v462[0]) != 0))
        {
          v117 = *((_DWORD *)v116 + 1);
          *(_DWORD *)v116 += 2;
          if (v117 >= 0x33)
          {
            v118 = *((_DWORD *)v116 + 4);
            v119 = (WTF::StringImpl *)*((_QWORD *)v116 + 1);
            WTF::tryFastCompactMalloc((WTF *)0x7A);
            v120 = v458[0];
            v94 = v445;
            v80 = v448;
            if (!v458[0])
            {
              __break(0xC471u);
              JUMPOUT(0x195DD0070);
            }
            v121 = 50;
            *(_QWORD *)v458[0] = 0x3300000002;
            *((_QWORD *)v120 + 1) = (char *)v120 + 20;
            if ((v118 & 4) != 0)
              v121 = 0x100000032;
            *((_DWORD *)v120 + 4) = 0;
            v458[0] = v119;
            v458[1] = (WTF::StringImpl *)v121;
            WTF::StringView::getCharacters<char16_t>(v458, (char *)v120 + 20);
            *((_WORD *)v120 + LODWORD(v458[1]) + 10) = 8230;
            if (*(_DWORD *)v116 == 2)
              WTF::StringImpl::destroy(v116, v102);
            else
              *(_DWORD *)v116 -= 2;
            goto LABEL_338;
          }
          v120 = v116;
        }
        else
        {
          v120 = 0;
        }
        v94 = v445;
        v80 = v448;
LABEL_338:
        v122 = v462[1];
        v462[1] = 0;
        if (v122)
        {
          if (*(_DWORD *)v122 == 2)
            WTF::StringImpl::destroy(v122, v102);
          else
            *(_DWORD *)v122 -= 2;
        }
        v123 = v462[0];
        v462[0] = 0;
        if (v123)
        {
          if (*(_DWORD *)v123 == 2)
            WTF::StringImpl::destroy(v123, v102);
          else
            *(_DWORD *)v123 -= 2;
        }
LABEL_344:
        v124 = *(unsigned __int16 *)(a4 + 28);
        if ((~v124 & 0x408) == 0)
        {
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a4 + 368))(a4) == 6)
            goto LABEL_349;
          v124 = *(unsigned __int16 *)(a4 + 28);
        }
        if ((~v124 & 0x408) != 0 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)a4 + 368))(a4) != 7)
        {
          v125 = 0;
LABEL_351:
          if ((*((_BYTE *)v80 + 45) & 8) != 0)
          {
            v143 = (*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v80 + 896))(v80);
            v145 = (((int)(v143 - (v144 & 0xFFFFFFC0) + 32) >> 6) + v143 / 64);
            v146 = *(float *)(*((_QWORD *)v80 + 13) + 184);
            if (v146 != 1.0)
            {
              v345 = v145 - 1;
              if ((v145 & 0x80000000) == 0)
                v345 = v145 + 1;
              if (v146 <= 1.0)
                v345 = v145;
              v346 = (double)v345 / v146 + dbl_1968DE9C0[(double)v345 / v146 < 0.0];
              if (v346 >= -2147483650.0 && v346 <= 2147483650.0)
                v145 = (int)v346;
              else
                v145 = 0;
            }
            WTF::String::number((WTF::String *)v145);
            v141 = v462[0];
            v147 = (*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v80 + 904))(v80);
            v142 = (((int)(v147 - (v148 & 0xFFFFFFC0) + 32) >> 6) + v147 / 64);
            v149 = *(float *)(*((_QWORD *)v80 + 13) + 184);
            if (v149 != 1.0)
            {
              v348 = v142 - 1;
              if ((v142 & 0x80000000) == 0)
                v348 = v142 + 1;
              if (v149 <= 1.0)
                v348 = v142;
              v349 = (double)v348 / v149 + dbl_1968DE9C0[(double)v348 / v149 < 0.0];
              if (v349 >= -2147483650.0 && v349 <= 2147483650.0)
                v142 = (int)v349;
              else
                v142 = 0;
            }
          }
          else
          {
            v126 = *(WebCore::ScrollView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 40) + 8) + 528)
                                                       + 8)
                                           + 288);
            v462[0] = (WTF::StringImpl *)WebCore::RenderObject::absoluteBoundingBoxRect(v80, 1, 0);
            v462[1] = v127;
            v128 = WebCore::ScrollView::contentsToRootView(v126, (const WebCore::IntRect *)v462);
            if (v129 >= -33554432)
              v132 = v129 << 6;
            else
              v132 = 0x80000000;
            if ((int)v128 <= 0x1FFFFFF)
              v133 = 0;
            else
              v133 = 63;
            if (SHIDWORD(v128) <= 0x1FFFFFF)
              v134 = 0;
            else
              v134 = 63;
            if (v129 > 0x1FFFFFF)
              v132 = 0x7FFFFFFF;
            if (v130 >= -33554432)
              v135 = v130 << 6;
            else
              v135 = 0x80000000;
            if (v130 > 0x1FFFFFF)
              v135 = 0x7FFFFFFF;
            v136 = v133 + v132;
            if (__OFADD__(v133, v132))
              v136 = 0x7FFFFFFF;
            v137 = __OFADD__(v134, v135);
            v138 = v134 + v135;
            if (v137)
              v138 = 0x7FFFFFFF;
            v139 = v133 + 32;
            v140 = (WTF::String *)(v138 / 64
                                 - ((v134 + 32) >> 6)
                                 + ((int)(v138 - (v139 & 0xFFFFFFC0) + 32) >> 6));
            WTF::String::number((WTF::String *)(v136 / 64 - (v139 >> 6) + ((int)(v136 - (v131 & 0xFFFFFFC0) + 32) >> 6)));
            v141 = v462[0];
            v142 = (unint64_t)v140;
          }
          WTF::String::number((WTF::String *)v142);
          v449 = v462[0];
          v455[0] = 0;
          v455[1] = 0;
          v150 = *((_QWORD *)v80 + 4);
          if (!v150 || (v151 = *(_QWORD *)(v150 + 8)) == 0)
          {
LABEL_391:
            if (*((char *)v80 + 45) < 0)
            {
              v159 = CFSTR("Flex (Inspector Element Selection)");
            }
            else
            {
              if (*((_BYTE *)v80 + 46) != 12)
                goto LABEL_400;
              v159 = CFSTR("Grid (Inspector Element Selection)");
            }
            WebCore::localizedString(v159, (uint64_t)v462);
            LODWORD(v161) = HIDWORD(v455[1]);
            if (HIDWORD(v455[1]) == LODWORD(v455[1]))
            {
              v332 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v455, HIDWORD(v455[1]) + 1, (unint64_t)v462);
              v161 = HIDWORD(v455[1]);
              v333 = v455[0];
              v334 = *v332;
              *v332 = 0;
              *((_QWORD *)v333 + v161) = v334;
            }
            else
            {
              v162 = v462[0];
              v462[0] = 0;
              *((_QWORD *)v455[0] + HIDWORD(v455[1])) = v162;
            }
            HIDWORD(v455[1]) = v161 + 1;
            v163 = v462[0];
            v462[0] = 0;
            if (v163)
            {
              if (*(_DWORD *)v163 == 2)
                WTF::StringImpl::destroy(v163, v160);
              else
                *(_DWORD *)v163 -= 2;
            }
LABEL_400:
            v164 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
            if ((v164 & 1) == 0)
              atomic_store(1u, WebCore::AXObjectCache::gAccessibilityEnabled);
            v165 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
            v444 = v125;
            v446 = v94;
            v443 = v141;
            if ((v165 & 1) == 0)
            {
              v166 = 0;
              goto LABEL_404;
            }
            v410 = WebCore::Document::topDocument(*(_QWORD *)(*(_QWORD *)(a4 + 40) + 8));
            *(_DWORD *)(v410 + 24) += 2;
            v462[0] = (WTF::StringImpl *)v410;
            if (!*(_QWORD *)(v410 + 1944) || (v411 = (WebCore::AXObjectCache **)v410, *(_BYTE *)(v410 + 3405)))
            {
              WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)v462);
            }
            else
            {
              v412 = *(_QWORD *)(v410 + 1488);
              if (v412)
              {
                WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)v462);
              }
              else
              {
                v413 = (WebCore::AXObjectCache *)WTF::fastMalloc((WTF *)0x318);
                v458[0] = WebCore::AXObjectCache::AXObjectCache(v413, (WebCore::Document *)v411);
                std::unique_ptr<WebCore::AXObjectCache>::operator=[abi:sn180100](v411 + 186, v458);
                std::unique_ptr<WebCore::AXObjectCache>::~unique_ptr[abi:sn180100](v458);
                WebCore::Document::hasEverCreatedAnAXObjectCache = 1;
                v412 = (uint64_t)v411[186];
                WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)v462);
                if (!v412)
                  goto LABEL_832;
              }
              v414 = WebCore::AXObjectCache::getOrCreate(v412, a4, 0);
              if (v414)
              {
                v415 = v414;
                if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v414 + 856))(v414) & 1) == 0)
                {
                  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(_QWORD *)v415 + 2192))(v462, v415);
                  v166 = v462[0];
                  goto LABEL_833;
                }
              }
            }
LABEL_832:
            v166 = 0;
LABEL_833:
            v141 = v443;
LABEL_404:
            v167 = v450[0];
            if (v450[0])
              *(_DWORD *)v450[0] += 2;
            if (v94)
              *(_DWORD *)v94 += 2;
            if (v120)
              *(_DWORD *)v120 += 2;
            if (v125)
              *(_DWORD *)v125 += 2;
            v447 = v166;
            if (v141)
            {
              v168 = *((_DWORD *)v141 + 1);
              *(_DWORD *)v141 += 2;
              if (v168 < 0)
                goto LABEL_855;
            }
            else
            {
              v168 = 0;
            }
            v169 = v168 + 1;
            if (!__OFADD__(v168, 1) && v169 <= 0x7FFFFFEF)
            {
              WTF::tryFastCompactMalloc((WTF *)(2 * (v168 + 1) + 20));
              v170 = v462[0];
              if (v462[0])
              {
                *(_DWORD *)v462[0] = 2;
                *((_DWORD *)v170 + 1) = v169;
                *((_WORD *)v170 + 10) = 8195;
                *((_QWORD *)v170 + 1) = (char *)v170 + 20;
                *((_DWORD *)v170 + 4) = 0;
                if (v141)
                {
                  v171 = (char *)v170 + 22;
                  v172 = (int8x16_t *)*((_QWORD *)v141 + 1);
                  v173 = *((unsigned int *)v141 + 1);
                  if ((*((_BYTE *)v141 + 16) & 4) != 0)
                  {
                    v174 = &v171[2 * v173];
                    if (v173 >= 0x40)
                    {
                      v175 = &v171[2 * (v173 & 0xFFFFFFC0)];
                      v176 = 0uLL;
                      do
                      {
                        v471.val[0] = *v172;
                        v177 = v172[1];
                        v472.val[0] = v172[2];
                        v178 = v172[3];
                        v172 += 4;
                        v179 = v178;
                        v472.val[1] = 0uLL;
                        v473.val[0] = v177;
                        v471.val[1] = 0uLL;
                        v180 = v171;
                        vst2q_s8(v180, v471);
                        v180 += 32;
                        v473.val[1] = 0uLL;
                        vst2q_s8(v180, v473);
                        v181 = v171 + 64;
                        vst2q_s8(v181, v472);
                        v182 = v171 + 96;
                        vst2q_s8(v182, *(int8x16x2_t *)(&v176 - 1));
                        v171 += 128;
                      }
                      while (v171 != v175);
                      v171 = v175;
                    }
                    while (v171 != v174)
                    {
                      v183 = v172->u8[0];
                      v172 = (int8x16_t *)((char *)v172 + 1);
                      *(_WORD *)v171 = v183;
                      v171 += 2;
                    }
                  }
                  else if ((_DWORD)v173 == 1)
                  {
                    *(_WORD *)v171 = v172->i16[0];
                  }
                  else if ((_DWORD)v173)
                  {
                    memcpy(v171, v172, 2 * v173);
                  }
                }
                WTF::tryFastCompactMalloc((WTF *)0x19);
                v184 = v462[0];
                if (!v462[0])
                {
                  __break(0xC471u);
                  JUMPOUT(0x195DCFFFCLL);
                }
                *(_QWORD *)v462[0] = 0x500000002;
                *((_WORD *)v184 + 10) = 30832;
                *((_QWORD *)v184 + 1) = (char *)v184 + 20;
                *((_DWORD *)v184 + 4) = 4;
                *((_BYTE *)v184 + 22) = 32;
                *(_WORD *)((char *)v184 + 23) = 8407;
                if (v449)
                  *(_DWORD *)v449 += 2;
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v185 = v462[0];
                v452 = 0uLL;
                v186 = WTF::fastMalloc((WTF *)0x100);
                DWORD2(v452) = 8;
                *(_QWORD *)&v452 = v186;
                v188 = HIDWORD(v452);
                v189 = v186 + 32 * HIDWORD(v452);
                if (v167)
                  *(_DWORD *)v167 += 2;
                *(_QWORD *)v189 = v167;
                *(_QWORD *)(v189 + 8) = 0x11040000881280FFLL;
                *(_BYTE *)(v189 + 16) = 0;
                *(_QWORD *)(v189 + 24) = 0x1104000000000000;
                v190 = v186 + 32 * (v188 + 1);
                if (v94)
                  *(_DWORD *)v94 += 2;
                *(_QWORD *)v190 = v94;
                *(_QWORD *)(v190 + 8) = 0x110400001A1AA6FFLL;
                *(_BYTE *)(v190 + 16) = 0;
                *(_QWORD *)(v190 + 24) = 0x1104000000000000;
                v191 = v186 + 32 * (v188 + 2);
                if (v120)
                  *(_DWORD *)v120 += 2;
                *(_QWORD *)v191 = v120;
                *(_QWORD *)(v191 + 8) = 0x11040000994500FFLL;
                *(_BYTE *)(v191 + 16) = 0;
                *(_QWORD *)(v191 + 24) = 0x1104000000000000;
                v192 = v186 + 32 * (v188 + 3);
                HIDWORD(v452) = v188 + 3;
                if (v125)
                  *(_DWORD *)v125 += 2;
                *(_QWORD *)v192 = v125;
                *(_QWORD *)(v192 + 8) = 0x11040000881280FFLL;
                *(_BYTE *)(v192 + 16) = 0;
                *(_QWORD *)(v192 + 24) = 0x1104000000000000;
                v193 = v186 + 32 * (v188 + 4);
                *(_DWORD *)v170 += 2;
                *(_QWORD *)v193 = v170;
                *(_QWORD *)(v193 + 8) = 0x11040000000000FFLL;
                *(_BYTE *)(v193 + 16) = 0;
                *(_QWORD *)(v193 + 24) = 0x1104000000000000;
                v194 = v186 + 32 * (v188 + 5);
                *(_DWORD *)v184 += 2;
                *(_QWORD *)v194 = v184;
                *(_QWORD *)(v194 + 8) = 0x11040000808080FFLL;
                *(_BYTE *)(v194 + 16) = 0;
                *(_QWORD *)(v194 + 24) = 0x1104000000000000;
                v195 = v186 + 32 * (v188 + 6);
                v196 = v449;
                if (v449)
                {
                  *(_DWORD *)v449 += 2;
                  v196 = v449;
                }
                *(_QWORD *)v195 = v196;
                *(_QWORD *)(v195 + 8) = 0x11040000000000FFLL;
                *(_BYTE *)(v195 + 16) = 0;
                *(_QWORD *)(v195 + 24) = 0x1104000000000000;
                v197 = v186 + 32 * (v188 + 7);
                if (v185)
                {
                  v198 = *(_DWORD *)v185;
                  *(_DWORD *)v185 += 2;
                  *(_QWORD *)v197 = v185;
                  *(_QWORD *)(v197 + 8) = 0x11040000808080FFLL;
                  *(_BYTE *)(v197 + 16) = 0;
                  *(_QWORD *)(v197 + 24) = 0x1104000000000000;
                  HIDWORD(v452) = v188 + 8;
                  if (v198)
                    *(_DWORD *)v185 = v198;
                  else
                    WTF::StringImpl::destroy(v185, v187);
                }
                else
                {
                  *(_QWORD *)v197 = 0;
                  *(_QWORD *)(v197 + 8) = 0x11040000808080FFLL;
                  *(_BYTE *)(v197 + 16) = 0;
                  *(_QWORD *)(v197 + 24) = 0x1104000000000000;
                  HIDWORD(v452) = v188 + 8;
                }
                if (v449)
                {
                  if (*(_DWORD *)v449 == 2)
                    WTF::StringImpl::destroy(v449, v187);
                  else
                    *(_DWORD *)v449 -= 2;
                }
                if (*(_DWORD *)v184 == 2)
                  WTF::StringImpl::destroy(v184, v187);
                else
                  *(_DWORD *)v184 -= 2;
                if (*(_DWORD *)v170 == 2)
                  WTF::StringImpl::destroy(v170, v187);
                else
                  *(_DWORD *)v170 -= 2;
                if (v125)
                {
                  if (*(_DWORD *)v125 == 2)
                  {
                    WTF::StringImpl::destroy(v125, v187);
                    if (!v120)
                      goto LABEL_456;
                    goto LABEL_454;
                  }
                  *(_DWORD *)v125 -= 2;
                }
                if (!v120)
                  goto LABEL_456;
LABEL_454:
                if (*(_DWORD *)v120 == 2)
                  WTF::StringImpl::destroy(v120, v187);
                else
                  *(_DWORD *)v120 -= 2;
LABEL_456:
                if (v94)
                {
                  if (*(_DWORD *)v94 == 2)
                  {
                    WTF::StringImpl::destroy(v94, v187);
                    if (!v167)
                      goto LABEL_462;
                    goto LABEL_460;
                  }
                  *(_DWORD *)v94 -= 2;
                }
                if (!v167)
                  goto LABEL_462;
LABEL_460:
                if (*(_DWORD *)v167 == 2)
                  WTF::StringImpl::destroy(v167, v187);
                else
                  *(_DWORD *)v167 -= 2;
LABEL_462:
                if (v443)
                {
                  if (*(_DWORD *)v443 == 2)
                    WTF::StringImpl::destroy(v443, v187);
                  else
                    *(_DWORD *)v443 -= 2;
                }
                if (v447)
                {
                  if (!(*((_DWORD *)v447 + 1) | HIDWORD(v455[1])))
                    goto LABEL_591;
                }
                else if (!HIDWORD(v455[1]))
                {
                  goto LABEL_591;
                }
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v462[0] = v458[0];
                v462[1] = (WTF::StringImpl *)0x11040000000000FFLL;
                LOBYTE(v463) = 0;
                *((_QWORD *)&v463 + 1) = 0x1104000000000000;
                v200 = HIDWORD(v452);
                if (HIDWORD(v452) == DWORD2(v452))
                {
                  v201 = WTF::Vector<WebCore::InspectorOverlayLabel::Content,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v452, HIDWORD(v452) + 1, (unint64_t)v462);
                  v200 = HIDWORD(v452);
                  v202 = v452;
                  v203 = v452 + 32 * HIDWORD(v452);
                  v204 = 32 * HIDWORD(v452);
                  v205 = *(_QWORD *)v201;
                  *(_QWORD *)v201 = 0;
                  *(_QWORD *)(v202 + v204) = v205;
                  *(_QWORD *)(v203 + 8) = 0;
                  v206 = *((_QWORD *)v201 + 1);
                  if (v206)
                  {
                    *(_QWORD *)(v203 + 8) = v206;
                    *((_QWORD *)v201 + 1) = 0;
                  }
                  *(_QWORD *)(v203 + 24) = 0;
                  v207 = (_QWORD *)(v203 + 24);
                  v210 = *((_QWORD *)v201 + 3);
                  v208 = v201 + 24;
                  v209 = v210;
                  *((_BYTE *)v207 - 8) = *((_BYTE *)v208 - 8);
                  if (v210)
                  {
                    *v207 = v209;
LABEL_478:
                    v213 = v447;
                    *v208 = 0;
LABEL_479:
                    HIDWORD(v452) = v200 + 1;
                    if ((*((_QWORD *)&v463 + 1) & 0x8000000000000) != 0)
                    {
                      v422 = (unsigned int *)(*((_QWORD *)&v463 + 1) & 0xFFFFFFFFFFFFLL);
                      do
                      {
                        v423 = __ldaxr(v422);
                        v424 = v423 - 1;
                      }
                      while (__stlxr(v424, v422));
                      v213 = v447;
                      if (!v424)
                      {
                        atomic_store(1u, v422);
                        WTF::fastFree((WTF *)v422, v199);
                      }
                    }
                    if (((unint64_t)v462[1] & 0x8000000000000) != 0)
                    {
                      v425 = (unsigned int *)((unint64_t)v462[1] & 0xFFFFFFFFFFFFLL);
                      do
                      {
                        v426 = __ldaxr(v425);
                        v427 = v426 - 1;
                      }
                      while (__stlxr(v427, v425));
                      v213 = v447;
                      if (!v427)
                      {
                        atomic_store(1u, v425);
                        WTF::fastFree((WTF *)v425, v199);
                      }
                    }
                    v214 = v462[0];
                    v462[0] = 0;
                    if (v214)
                    {
                      if (*(_DWORD *)v214 == 2)
                      {
                        WTF::StringImpl::destroy(v214, (WTF::StringImpl *)v199);
                        if (!v213)
                          goto LABEL_485;
                        goto LABEL_511;
                      }
                      *(_DWORD *)v214 -= 2;
                    }
                    if (!v213)
                    {
LABEL_485:
                      v215 = 1;
                      goto LABEL_534;
                    }
LABEL_511:
                    v216 = *((_DWORD *)v213 + 1);
                    if (!v216)
                    {
LABEL_533:
                      v215 = v216 == 0;
LABEL_534:
                      if (HIDWORD(v455[1]))
                      {
                        v232 = (WTF::StringImpl **)v455[0];
                        v233 = (WTF::StringImpl **)((char *)v455[0] + 8 * HIDWORD(v455[1]));
                        do
                        {
                          if (v215)
                            goto LABEL_552;
                          WTF::StringImpl::createWithoutCopyingNonEmpty();
                          v462[0] = v458[0];
                          v462[1] = (WTF::StringImpl *)0x11040000000000FFLL;
                          LOBYTE(v463) = 0;
                          *((_QWORD *)&v463 + 1) = 0x1104000000000000;
                          v234 = HIDWORD(v452);
                          if (HIDWORD(v452) == DWORD2(v452))
                          {
                            v235 = WTF::Vector<WebCore::InspectorOverlayLabel::Content,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v452, HIDWORD(v452) + 1, (unint64_t)v462);
                            v234 = HIDWORD(v452);
                            v236 = v452;
                            v237 = v452 + 32 * HIDWORD(v452);
                            v238 = 32 * HIDWORD(v452);
                            v239 = *(_QWORD *)v235;
                            *(_QWORD *)v235 = 0;
                            *(_QWORD *)(v236 + v238) = v239;
                            *(_QWORD *)(v237 + 8) = 0;
                            v240 = *((_QWORD *)v235 + 1);
                            if (v240)
                            {
                              *(_QWORD *)(v237 + 8) = v240;
                              *((_QWORD *)v235 + 1) = 0;
                            }
                            *(_QWORD *)(v237 + 24) = 0;
                            v241 = (_QWORD *)(v237 + 24);
                            v244 = *((_QWORD *)v235 + 3);
                            v242 = v235 + 24;
                            v243 = v244;
                            *((_BYTE *)v241 - 8) = *((_BYTE *)v242 - 8);
                            if (!v244)
                              goto LABEL_547;
                            *v241 = v243;
                          }
                          else
                          {
                            v245 = v452 + 32 * HIDWORD(v452);
                            v462[0] = 0;
                            *(WTF::StringImpl **)v245 = v458[0];
                            *(_QWORD *)(v245 + 8) = 0;
                            if (v462[1])
                            {
                              *(WTF::StringImpl **)(v245 + 8) = v462[1];
                              v462[1] = 0;
                            }
                            *(_QWORD *)(v245 + 24) = 0;
                            v246 = (_QWORD *)(v245 + 24);
                            *((_BYTE *)v246 - 8) = 0;
                            if (!*((_QWORD *)&v463 + 1))
                              goto LABEL_547;
                            *v246 = *((_QWORD *)&v463 + 1);
                            v242 = (_QWORD *)&v463 + 1;
                          }
                          *v242 = 0;
LABEL_547:
                          HIDWORD(v452) = v234 + 1;
                          if ((*((_QWORD *)&v463 + 1) & 0x8000000000000) != 0)
                          {
                            v269 = (unsigned int *)(*((_QWORD *)&v463 + 1) & 0xFFFFFFFFFFFFLL);
                            do
                            {
                              v270 = __ldaxr(v269);
                              v271 = v270 - 1;
                            }
                            while (__stlxr(v271, v269));
                            if (!v271)
                            {
                              atomic_store(1u, v269);
                              WTF::fastFree((WTF *)v269, v199);
                            }
                          }
                          if (((unint64_t)v462[1] & 0x8000000000000) != 0)
                          {
                            v272 = (unsigned int *)((unint64_t)v462[1] & 0xFFFFFFFFFFFFLL);
                            do
                            {
                              v273 = __ldaxr(v272);
                              v274 = v273 - 1;
                            }
                            while (__stlxr(v274, v272));
                            if (!v274)
                            {
                              atomic_store(1u, v272);
                              WTF::fastFree((WTF *)v272, v199);
                            }
                          }
                          v247 = v462[0];
                          v462[0] = 0;
                          if (v247)
                          {
                            if (*(_DWORD *)v247 == 2)
                              WTF::StringImpl::destroy(v247, (WTF::StringImpl *)v199);
                            else
                              *(_DWORD *)v247 -= 2;
                          }
LABEL_552:
                          v248 = *v232;
                          if (*v232)
                            *(_DWORD *)v248 += 2;
                          v462[0] = v248;
                          v462[1] = (WTF::StringImpl *)0x11040000000000FFLL;
                          LOBYTE(v463) = 1;
                          *((_QWORD *)&v463 + 1) = 0x11040000A0A0A040;
                          v249 = HIDWORD(v452);
                          if (HIDWORD(v452) == DWORD2(v452))
                          {
                            v250 = WTF::Vector<WebCore::InspectorOverlayLabel::Content,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v452, HIDWORD(v452) + 1, (unint64_t)v462);
                            v249 = HIDWORD(v452);
                            v251 = v452;
                            v252 = v452 + 32 * HIDWORD(v452);
                            v253 = 32 * HIDWORD(v452);
                            v254 = *(_QWORD *)v250;
                            *(_QWORD *)v250 = 0;
                            *(_QWORD *)(v251 + v253) = v254;
                            *(_QWORD *)(v252 + 8) = 0;
                            v255 = *((_QWORD *)v250 + 1);
                            if (v255)
                            {
                              *(_QWORD *)(v252 + 8) = v255;
                              *((_QWORD *)v250 + 1) = 0;
                            }
                            *(_QWORD *)(v252 + 24) = 0;
                            v256 = (_QWORD *)(v252 + 24);
                            v259 = *((_QWORD *)v250 + 3);
                            v257 = v250 + 24;
                            v258 = v259;
                            *((_BYTE *)v256 - 8) = *((_BYTE *)v257 - 8);
                            if (!v259)
                              goto LABEL_564;
                            *v256 = v258;
                          }
                          else
                          {
                            v260 = (WTF::StringImpl **)(v452 + 32 * HIDWORD(v452));
                            v462[0] = 0;
                            *v260 = v248;
                            v260[1] = 0;
                            if (v462[1])
                            {
                              v260[1] = v462[1];
                              v462[1] = 0;
                            }
                            v260[3] = 0;
                            v261 = v260 + 3;
                            *((_BYTE *)v261 - 8) = 1;
                            if (!*((_QWORD *)&v463 + 1))
                              goto LABEL_564;
                            *v261 = *((_QWORD *)&v463 + 1);
                            v257 = (_QWORD *)&v463 + 1;
                          }
                          *v257 = 0;
LABEL_564:
                          HIDWORD(v452) = v249 + 1;
                          if ((*((_QWORD *)&v463 + 1) & 0x8000000000000) != 0)
                          {
                            v263 = (unsigned int *)(*((_QWORD *)&v463 + 1) & 0xFFFFFFFFFFFFLL);
                            do
                            {
                              v264 = __ldaxr(v263);
                              v265 = v264 - 1;
                            }
                            while (__stlxr(v265, v263));
                            if (!v265)
                            {
                              atomic_store(1u, v263);
                              WTF::fastFree((WTF *)v263, v199);
                            }
                          }
                          if (((unint64_t)v462[1] & 0x8000000000000) != 0)
                          {
                            v266 = (unsigned int *)((unint64_t)v462[1] & 0xFFFFFFFFFFFFLL);
                            do
                            {
                              v267 = __ldaxr(v266);
                              v268 = v267 - 1;
                            }
                            while (__stlxr(v268, v266));
                            if (!v268)
                            {
                              atomic_store(1u, v266);
                              WTF::fastFree((WTF *)v266, v199);
                            }
                          }
                          v262 = v462[0];
                          v462[0] = 0;
                          if (v262)
                          {
                            if (*(_DWORD *)v262 == 2)
                              WTF::StringImpl::destroy(v262, (WTF::StringImpl *)v199);
                            else
                              *(_DWORD *)v262 -= 2;
                          }
                          v215 = 0;
                          ++v232;
                        }
                        while (v232 != v233);
                      }
LABEL_591:
                      v275 = *(unsigned int **)(*(_QWORD *)a2 + 160);
                      v276 = v275 + 2;
                      do
                        v277 = __ldaxr(v276);
                      while (__stlxr(v277 + 1, v276));
                      v278 = (WebCore::ScrollView *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v275 + 56))(v275);
                      v279 = v278;
                      if (v278)
                        ++*((_DWORD *)v278 + 2);
                      v280 = WebCore::ScrollView::sizeForVisibleContent(v278, 0);
                      v281 = v280;
                      v282 = HIDWORD(v280);
                      if (*((_QWORD *)v279 + 5))
                      {
                        v286 = WebCore::ScrollView::platformTopContentInset(v279);
                      }
                      else
                      {
                        v283 = (*(uint64_t (**)(WebCore::ScrollView *))(*(_QWORD *)v279 + 720))(v279);
                        v284 = (unsigned int *)(v283 + 8);
                        do
                          v285 = __ldaxr(v284);
                        while (__stlxr(v285 + 1, v284));
                        v286 = 0.0;
                        if (*(_QWORD *)(*(_QWORD *)(v283 + 128) + 8) == v283)
                        {
                          v329 = *(_QWORD *)(v283 + 24);
                          if (v329)
                          {
                            v330 = *(_QWORD *)(v329 + 8);
                            if (v330)
                              v286 = *(float *)(v330 + 372);
                          }
                        }
                        do
                        {
                          v287 = __ldaxr(v284);
                          v288 = v287 - 1;
                        }
                        while (__stlxr(v288, v284));
                        if (!v288)
                        {
                          atomic_store(1u, v284);
                          v343 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
                          *(_QWORD *)v343 = off_1E31FE290;
                          *((_QWORD *)v343 + 1) = v284;
                          v462[0] = v343;
                          WTF::ensureOnMainThread();
                          v344 = v462[0];
                          v462[0] = 0;
                          if (v344)
                            (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v344 + 8))(v344);
                        }
                      }
                      v289 = (float)v281;
                      v290 = v446;
                      if (*((_BYTE *)a2 + 306) || *((_BYTE *)a2 + 307))
                      {
                        v291 = 15.0;
                        v286 = v286 + 15.0;
                      }
                      else
                      {
                        v291 = 0.0;
                      }
                      v292 = (float)(int)v282;
                      v293 = 2;
                      WebCore::InspectorOverlayLabel::expectedSize((uint64_t *)&v452, 2);
                      v295 = this->f32[0];
                      v296 = this[1].f32[0];
                      v297 = this->f32[0] + (float)(v296 * 0.5);
                      v299 = v298 * 0.5;
                      v300 = v299 + v297;
                      v301 = v297 - v299;
                      if (v300 >= v289 || v301 <= v291)
                      {
                        v303 = v295 + v296;
                        if (v297 < (float)(v289 * 0.5))
                          v304 = 1;
                        else
                          v304 = 3;
                        v305 = fminf(v289, v297);
                        v306 = v303 <= v289;
                        if (v303 > v289)
                          v307 = v305;
                        else
                          v307 = v297;
                        if (!v306)
                          v304 = 3;
                        v308 = fmaxf(v291, v297);
                        if (v295 < v291)
                          v297 = v308;
                        else
                          v297 = v307;
                        if (v295 < v291)
                          v293 = 1;
                        else
                          v293 = v304;
                      }
                      v309 = v443;
                      v310 = this->f32[1];
                      if (v310 <= v292)
                      {
                        v312 = this[1].f32[1] + v310;
                        v313 = v310 - v294;
                        v314 = (float)(v294 + v312) < v292;
                        v315 = v286 + v294;
                        if (v314)
                        {
                          v315 = this[1].f32[1] + v310;
                          v316 = 2;
                        }
                        else
                        {
                          v316 = 1;
                        }
                        if (v313 > v286)
                        {
                          v317 = 1;
                        }
                        else
                        {
                          v310 = v315;
                          v317 = v316;
                        }
                        if (v312 >= v286)
                          v292 = v310;
                        else
                          v292 = v286;
                        if (v312 >= v286)
                          v311 = v317;
                        else
                          v311 = 2;
                      }
                      else
                      {
                        v311 = 1;
                      }
                      (*(void (**)(WebCore::Node *, uint64_t))(*(_QWORD *)a3 + 96))(a3, 1);
                      if (*((float *)a3 + 47) != 1.0)
                      {
                        *((_DWORD *)a3 + 46) |= 8u;
                        *((_DWORD *)a3 + 47) = 1065353216;
                      }
                      (*(void (**)(WebCore::Node *, char *))(*(_QWORD *)a3 + 88))(a3, (char *)a3 + 8);
                      v462[0] = (WTF::StringImpl *)0x11040000808080FFLL;
                      WebCore::GraphicsContext::setStrokeColor(a3, (const WebCore::Color *)v462);
                      if (((unint64_t)v462[0] & 0x8000000000000) != 0)
                      {
                        v416 = (unsigned int *)((unint64_t)v462[0] & 0xFFFFFFFFFFFFLL);
                        do
                        {
                          v417 = __ldaxr(v416);
                          v418 = v417 - 1;
                        }
                        while (__stlxr(v418, v416));
                        v290 = v446;
                        v309 = v443;
                        if (!v418)
                        {
                          atomic_store(1u, v416);
                          WTF::fastFree((WTF *)v416, v318);
                        }
                      }
                      v319 = (WTF::StringImpl *)*((_QWORD *)&v452 + 1);
                      v458[0] = (WTF::StringImpl *)v452;
                      v452 = 0uLL;
                      v458[1] = v319;
                      *(_QWORD *)&v459 = __PAIR64__(LODWORD(v292), LODWORD(v297));
                      *((_QWORD *)&v459 + 1) = 0x11040000FFFFC2FFLL;
                      v460 = v311 | (v293 << 8);
                      WebCore::InspectorOverlayLabel::draw((WebCore::InspectorOverlayLabel *)v462, (WebCore::GraphicsContext *)v458, 0.0, a3);
                      if ((*((_QWORD *)&v459 + 1) & 0x8000000000000) != 0)
                      {
                        v419 = (unsigned int *)(*((_QWORD *)&v459 + 1) & 0xFFFFFFFFFFFFLL);
                        do
                        {
                          v420 = __ldaxr(v419);
                          v421 = v420 - 1;
                        }
                        while (__stlxr(v421, v419));
                        v290 = v446;
                        v309 = v443;
                        if (!v421)
                        {
                          atomic_store(1u, v419);
                          WTF::fastFree((WTF *)v419, v320);
                        }
                      }
                      WTF::Vector<WebCore::InspectorOverlayLabel::Content,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v458, v320);
                      (*(void (**)(WebCore::Node *, uint64_t))(*(_QWORD *)a3 + 104))(a3, 1);
                      v322 = v447;
                      if (*((_DWORD *)v279 + 2) == 1)
                        (*(void (**)(WebCore::ScrollView *))(*(_QWORD *)v279 + 8))(v279);
                      else
                        --*((_DWORD *)v279 + 2);
                      do
                      {
                        v323 = __ldaxr(v276);
                        v324 = v323 - 1;
                      }
                      while (__stlxr(v324, v276));
                      if (!v324)
                      {
                        atomic_store(1u, v276);
                        v341 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
                        *(_QWORD *)v341 = off_1E31FE290;
                        *((_QWORD *)v341 + 1) = v276;
                        v458[0] = v341;
                        WTF::ensureOnMainThread();
                        v342 = v458[0];
                        v458[0] = 0;
                        if (v342)
                          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v342 + 8))(v342);
                        v290 = v446;
                        v322 = v447;
                        v309 = v443;
                      }
                      WTF::Vector<WebCore::InspectorOverlayLabel::Content,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v452, v321);
                      v326 = v449;
                      if (v322)
                      {
                        if (*(_DWORD *)v322 == 2)
                        {
                          WTF::StringImpl::destroy(v322, v325);
                          v326 = v449;
                        }
                        else
                        {
                          *(_DWORD *)v322 -= 2;
                        }
                      }
                      if (HIDWORD(v455[1]))
                      {
                        v338 = (WTF::StringImpl **)v455[0];
                        v339 = 8 * HIDWORD(v455[1]);
                        do
                        {
                          v340 = *v338;
                          *v338 = 0;
                          if (v340)
                          {
                            if (*(_DWORD *)v340 == 2)
                            {
                              WTF::StringImpl::destroy(v340, v325);
                              v326 = v449;
                            }
                            else
                            {
                              *(_DWORD *)v340 -= 2;
                            }
                          }
                          ++v338;
                          v339 -= 8;
                        }
                        while (v339);
                      }
                      v327 = v455[0];
                      if (v455[0])
                      {
                        v455[0] = 0;
                        LODWORD(v455[1]) = 0;
                        WTF::fastFree(v327, v325);
                        v326 = v449;
                        if (!v449)
                          goto LABEL_653;
                      }
                      else if (!v326)
                      {
                        goto LABEL_653;
                      }
                      if (*(_DWORD *)v326 == 2)
                        WTF::StringImpl::destroy(v326, v325);
                      else
                        *(_DWORD *)v326 -= 2;
LABEL_653:
                      if (v309)
                      {
                        if (*(_DWORD *)v309 == 2)
                        {
                          WTF::StringImpl::destroy(v309, v325);
                          if (!v444)
                            goto LABEL_659;
                          goto LABEL_657;
                        }
                        *(_DWORD *)v309 -= 2;
                      }
                      if (!v444)
                        goto LABEL_659;
LABEL_657:
                      if (*(_DWORD *)v444 == 2)
                        WTF::StringImpl::destroy(v444, v325);
                      else
                        *(_DWORD *)v444 -= 2;
LABEL_659:
                      if (v120)
                      {
                        if (*(_DWORD *)v120 == 2)
                        {
                          WTF::StringImpl::destroy(v120, v325);
                          if (v290)
                          {
LABEL_663:
                            if (*(_DWORD *)v290 == 2)
                              WTF::StringImpl::destroy(v290, v325);
                            else
                              *(_DWORD *)v290 -= 2;
                          }
LABEL_665:
                          v328 = v450[0];
                          v450[0] = 0;
                          if (v328)
                          {
                            if (*(_DWORD *)v328 == 2)
                              WTF::StringImpl::destroy(v328, v325);
                            else
                              *(_DWORD *)v328 -= 2;
                          }
                          v92 = v466;
LABEL_258:
                          v93 = this[10].u32[0];
                          if ((_DWORD)v93 == -1)
                          {
                            if (v92 == -1)
                              return;
                          }
                          else if (v92 == -1)
                          {
                            ((void (*)(WTF::StringImpl **, float32x2_t *))off_1E33EE980[v93])(v458, &this[3]);
                            this[10].i32[0] = -1;
                            goto LABEL_263;
                          }
                          v458[0] = (WTF::StringImpl *)&this[3];
                          ((void (*)(WTF::StringImpl **))off_1E33EE9D8[v92])(v458);
LABEL_263:
                          if ((_DWORD)v466 != -1)
                            ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E33EE980[v466])(v458, &v462[1]);
                          return;
                        }
                        *(_DWORD *)v120 -= 2;
                      }
                      if (v290)
                        goto LABEL_663;
                      goto LABEL_665;
                    }
                    *(_DWORD *)v213 += 2;
                    if (v216 < 0 || __OFADD__(v216, 6))
                    {
                      v462[0] = 0;
                    }
                    else
                    {
                      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>((v216 + 6), (*((_DWORD *)v213 + 4) >> 2) & 1, (int8x16_t *)"Role: ", 6u, (uint64_t)v213, v462);
                      v217 = v462[0];
                      if (v462[0])
                      {
                        v462[1] = (WTF::StringImpl *)0x11040000000000FFLL;
                        LOBYTE(v463) = 1;
                        *((_QWORD *)&v463 + 1) = 0x11040000AA0D9130;
                        v218 = HIDWORD(v452);
                        if (HIDWORD(v452) == DWORD2(v452))
                        {
                          v219 = WTF::Vector<WebCore::InspectorOverlayLabel::Content,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v452, HIDWORD(v452) + 1, (unint64_t)v462);
                          v218 = HIDWORD(v452);
                          v220 = v452;
                          v221 = v452 + 32 * HIDWORD(v452);
                          v222 = 32 * HIDWORD(v452);
                          v223 = *(_QWORD *)v219;
                          *(_QWORD *)v219 = 0;
                          *(_QWORD *)(v220 + v222) = v223;
                          *(_QWORD *)(v221 + 8) = 0;
                          v224 = *((_QWORD *)v219 + 1);
                          if (v224)
                          {
                            *(_QWORD *)(v221 + 8) = v224;
                            *((_QWORD *)v219 + 1) = 0;
                          }
                          *(_QWORD *)(v221 + 24) = 0;
                          v225 = (_QWORD *)(v221 + 24);
                          v228 = *((_QWORD *)v219 + 3);
                          v226 = v219 + 24;
                          v227 = v228;
                          *((_BYTE *)v225 - 8) = *((_BYTE *)v226 - 8);
                          if (!v228)
                            goto LABEL_525;
                          *v225 = v227;
                        }
                        else
                        {
                          v229 = (WTF::StringImpl **)(v452 + 32 * HIDWORD(v452));
                          v462[0] = 0;
                          *v229 = v217;
                          v229[1] = 0;
                          if (v462[1])
                          {
                            v229[1] = v462[1];
                            v462[1] = 0;
                          }
                          v229[3] = 0;
                          v230 = v229 + 3;
                          *((_BYTE *)v230 - 8) = 1;
                          if (!*((_QWORD *)&v463 + 1))
                            goto LABEL_525;
                          v226 = (_QWORD *)&v463 + 1;
                          *v230 = *((_QWORD *)&v463 + 1);
                        }
                        *v226 = 0;
LABEL_525:
                        HIDWORD(v452) = v218 + 1;
                        if ((*((_QWORD *)&v463 + 1) & 0x8000000000000) != 0)
                        {
                          v428 = (unsigned int *)(*((_QWORD *)&v463 + 1) & 0xFFFFFFFFFFFFLL);
                          do
                          {
                            v429 = __ldaxr(v428);
                            v430 = v429 - 1;
                          }
                          while (__stlxr(v430, v428));
                          v213 = v447;
                          if (!v430)
                          {
                            atomic_store(1u, v428);
                            WTF::fastFree((WTF *)v428, v199);
                          }
                        }
                        if (((unint64_t)v462[1] & 0x8000000000000) != 0)
                        {
                          v431 = (unsigned int *)((unint64_t)v462[1] & 0xFFFFFFFFFFFFLL);
                          do
                          {
                            v432 = __ldaxr(v431);
                            v433 = v432 - 1;
                          }
                          while (__stlxr(v433, v431));
                          v213 = v447;
                          if (!v433)
                          {
                            atomic_store(1u, v431);
                            WTF::fastFree((WTF *)v431, v199);
                          }
                        }
                        v231 = v462[0];
                        v462[0] = 0;
                        if (v231)
                        {
                          if (*(_DWORD *)v231 == 2)
                            WTF::StringImpl::destroy(v231, (WTF::StringImpl *)v199);
                          else
                            *(_DWORD *)v231 -= 2;
                        }
                        if (*(_DWORD *)v213 == 2)
                          WTF::StringImpl::destroy(v213, (WTF::StringImpl *)v199);
                        else
                          *(_DWORD *)v213 -= 2;
                        v216 = *((_DWORD *)v213 + 1);
                        goto LABEL_533;
                      }
                    }
                    __break(0xC471u);
                    JUMPOUT(0x195DD007CLL);
                  }
                }
                else
                {
                  v211 = v452 + 32 * HIDWORD(v452);
                  v462[0] = 0;
                  *(WTF::StringImpl **)v211 = v458[0];
                  *(_QWORD *)(v211 + 8) = 0;
                  if (v462[1])
                  {
                    *(WTF::StringImpl **)(v211 + 8) = v462[1];
                    v462[1] = 0;
                  }
                  *(_QWORD *)(v211 + 24) = 0;
                  v212 = (_QWORD *)(v211 + 24);
                  *((_BYTE *)v212 - 8) = 0;
                  if (*((_QWORD *)&v463 + 1))
                  {
                    v208 = (_QWORD *)&v463 + 1;
                    *v212 = *((_QWORD *)&v463 + 1);
                    goto LABEL_478;
                  }
                }
                v213 = v447;
                goto LABEL_479;
              }
            }
LABEL_855:
            __break(0xC471u);
            JUMPOUT(0x195DCFFF4);
          }
          if (*(char *)(v151 + 45) < 0)
          {
            v152 = *((_DWORD *)v80 + 5);
            v153 = v152 & 0x1800000;
            if ((v152 & 0x1800000) != 0x1000000 && (v152 & 0x400) == 0)
            {
              v154 = CFSTR("Flex Item (Inspector Element Selection)");
LABEL_386:
              WebCore::localizedString(v154, (uint64_t)v462);
              LODWORD(v156) = HIDWORD(v455[1]);
              if (HIDWORD(v455[1]) == LODWORD(v455[1]))
              {
                v335 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v455, HIDWORD(v455[1]) + 1, (unint64_t)v462);
                v156 = HIDWORD(v455[1]);
                v336 = v455[0];
                v337 = *v335;
                *v335 = 0;
                *((_QWORD *)v336 + v156) = v337;
              }
              else
              {
                v157 = v462[0];
                v462[0] = 0;
                *((_QWORD *)v455[0] + HIDWORD(v455[1])) = v157;
              }
              HIDWORD(v455[1]) = v156 + 1;
              v158 = v462[0];
              v462[0] = 0;
              if (v158)
              {
                if (*(_DWORD *)v158 == 2)
                  WTF::StringImpl::destroy(v158, v155);
                else
                  *(_DWORD *)v158 -= 2;
              }
              goto LABEL_391;
            }
          }
          else
          {
            v152 = *((_DWORD *)v80 + 5);
            v153 = v152 & 0x1800000;
          }
          if (*(_BYTE *)(v151 + 46) != 12 || v153 == 0x1000000 || (v152 & 0x400) != 0)
            goto LABEL_391;
          v154 = CFSTR("Grid Item (Inspector Element Selection)");
          goto LABEL_386;
        }
LABEL_349:
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v125 = v462[0];
        goto LABEL_351;
      }
LABEL_335:
      v120 = 0;
      goto LABEL_344;
    }
    v88 = *(_DWORD *)(v87 + 4);
    if ((v88 & 1) != 0)
    {
      v89 = *(uint64_t **)(v87 + 40);
      LODWORD(v90) = *(_DWORD *)(v87 + 52);
    }
    else
    {
      v89 = (uint64_t *)(v87 + 32);
      LODWORD(v90) = v88 >> 5;
    }
    if ((_DWORD)v90)
    {
      v90 = v90;
      while (1)
      {
        v95 = *v89;
        if (*v89 == WebCore::HTMLNames::idAttr
          || *(_QWORD *)(v95 + 24) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 24)
          && *(_QWORD *)(v95 + 32) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 32))
        {
          break;
        }
        v89 += 2;
        if (!--v90)
          goto LABEL_279;
      }
    }
    else
    {
LABEL_279:
      v89 = 0;
    }
    WebCore::DOMCSSNamespace::escape((WebCore::DOMCSSNamespace *)(v89 + 1), &v457);
    v96 = v457;
    if (v457)
    {
      v97 = *((_DWORD *)v457 + 1);
      if (v97 < 0 || (v98 = (v97 + 1), __OFADD__(v97, 1)))
      {
        v462[0] = 0;
        goto LABEL_858;
      }
      v99 = (*((unsigned __int8 *)v457 + 16) >> 2) & 1;
    }
    else
    {
      v98 = 1;
      v99 = 1;
    }
    WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(v98, v99, 35, (uint64_t)v457, v462);
    v94 = v462[0];
    if (v462[0])
    {
      v462[0] = 0;
      v457 = 0;
      if (v96)
      {
        if (*(_DWORD *)v96 == 2)
          WTF::StringImpl::destroy(v96, v100);
        else
          *(_DWORD *)v96 -= 2;
      }
      v87 = *((_QWORD *)v79 + 13);
      if (!v87)
        goto LABEL_335;
      goto LABEL_289;
    }
LABEL_858:
    __break(0xC471u);
    JUMPOUT(0x195DD0008);
  }
}

uint64_t WebCore::InspectorOverlay::buildGridOverlay(uint64_t result, WebCore::InspectorOverlay *this, uint64_t a3, int a4)
{
  _BYTE *v5;
  unint64_t v6;
  unsigned int v7;
  unint64_t v8;
  int v9;
  unsigned int *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  WTF *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  float v29;
  float v30;
  float v31;
  uint64_t v32;
  WTF *v33;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  _DWORD *v37;
  int v38;
  unsigned int v39;
  WTF *v40;
  WTF::StringImpl *v41;
  WTF *v42;
  uint64_t v43;
  int *v44;
  uint64_t v45;
  WTF *v46;
  int v47;
  float v48;
  float v49;
  WebCore::RenderObject *v50;
  int v51;
  WebCore::RenderObject *v52;
  uint64_t v53;
  WTF *v54;
  int v55;
  int v56;
  int v57;
  WTF *v58;
  void *v59;
  WebCore::RenderObject *v60;
  WebCore::RenderObject *v61;
  uint64_t v62;
  WebCore::RenderObject *v63;
  WebCore::RenderObject *v64;
  uint64_t v65;
  unsigned int v66;
  int v67;
  WTF *v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  int v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  float v82;
  float v83;
  uint64_t v84;
  float v85;
  float v86;
  float v87;
  float v88;
  WebCore::ScrollView *v89;
  WebCore::RenderObject *v90;
  void *v91;
  BOOL v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  unint64_t v101;
  int8x16_t *v102;
  char *v103;
  uint64_t v104;
  int8x16_t v105;
  float v106;
  WebCore::RenderObject *v107;
  WebCore::RenderObject *v108;
  uint64_t v109;
  WebCore::RenderObject *v110;
  WebCore::RenderObject *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _OWORD *v115;
  _OWORD *v116;
  __int128 v117;
  int v118;
  float v119;
  float v120;
  float v121;
  float v122;
  int v123;
  unsigned int v124;
  BOOL v125;
  int v126;
  int v127;
  BOOL v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  unint64_t v137;
  WTF::StringImpl **v138;
  char *v139;
  uint64_t v140;
  __int128 v141;
  int v142;
  WTF::StringImpl *v143;
  float32x2_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  void *v148;
  unsigned int v149;
  _OWORD *v150;
  unsigned int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  _WORD *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD *v163;
  WTF::StringImpl *v164;
  WTF *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t *v168;
  uint64_t v169;
  uint64_t v170;
  WTF::StringImpl *v171;
  int v172;
  WTF::StringImpl **v173;
  WTF::StringImpl *v174;
  float v175;
  WTF::StringImpl *v176;
  float v177;
  int v178;
  int v179;
  int v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  float v184;
  float v185;
  float v186;
  uint64_t v187;
  unsigned int *v188;
  unsigned int v189;
  float v190;
  unint64_t v191;
  float v192;
  unsigned int v193;
  unsigned int v194;
  char v195;
  char v196;
  float v197;
  void *v198;
  unsigned int v199;
  _OWORD *v200;
  unsigned int v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  _QWORD *v206;
  uint64_t v207;
  _WORD *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  _QWORD *v213;
  WTF::StringImpl *v214;
  WTF::StringImpl *v215;
  uint64_t v216;
  uint64_t v217;
  _QWORD *v218;
  uint64_t v219;
  _OWORD *v220;
  __int128 v221;
  unsigned int *v222;
  unsigned int v223;
  unsigned int v224;
  unsigned int *v225;
  unsigned int v226;
  unsigned int v227;
  unsigned int *v228;
  unsigned int v229;
  unsigned int v230;
  unsigned int *v231;
  unsigned int v232;
  unsigned int v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  uint64_t v237;
  float v238;
  float v239;
  WTF *v240;
  WebCore::RenderGrid *v241;
  float v242;
  void *v243;
  BOOL v244;
  float v245;
  float v246;
  float v247;
  float v248;
  float v249;
  float v250;
  float v251;
  float v252;
  unint64_t v253;
  int8x16_t *v254;
  char *v255;
  uint64_t v256;
  int8x16_t v257;
  float v258;
  WebCore::RenderGrid *v259;
  WebCore::RenderGrid *v260;
  uint64_t v261;
  float v262;
  float v263;
  __int128 *v264;
  _OWORD *v265;
  __int128 v266;
  __int128 v267;
  int v268;
  unsigned int v269;
  int v270;
  int v271;
  BOOL v272;
  float v273;
  float v274;
  float v275;
  float v276;
  float v277;
  float v278;
  float v279;
  float v280;
  unint64_t v281;
  WTF::StringImpl **v282;
  char *v283;
  uint64_t v284;
  __int128 v285;
  int v286;
  WTF::StringImpl *v287;
  float32x2_t v288;
  uint64_t v289;
  uint64_t v290;
  unint64_t v291;
  void *v292;
  unsigned int v293;
  _OWORD *v294;
  unsigned int v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  _QWORD *v300;
  uint64_t v301;
  _WORD *v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  _QWORD *v307;
  WTF::StringImpl *v308;
  WTF *v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t *v312;
  uint64_t v313;
  uint64_t v314;
  WTF::StringImpl *v315;
  int v316;
  WTF::StringImpl **v317;
  WTF::StringImpl *v318;
  WTF::StringImpl *v319;
  int v320;
  int v321;
  int v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  char v326;
  char v327;
  void *v328;
  unsigned int v329;
  _OWORD *v330;
  unsigned int v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  _QWORD *v336;
  uint64_t v337;
  _WORD *v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  _QWORD *v343;
  WTF::StringImpl *v344;
  WTF::StringImpl *v345;
  unsigned int *v346;
  unsigned int v347;
  unsigned int v348;
  unsigned int *v349;
  unsigned int v350;
  unsigned int v351;
  unsigned int *v352;
  unsigned int v353;
  unsigned int v354;
  unsigned int *v355;
  unsigned int v356;
  unsigned int v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  unsigned int v364;
  uint64_t v365;
  uint64_t v366;
  unsigned int v367;
  int v368;
  int v369;
  uint64_t v370;
  uint64_t v371;
  unsigned int v372;
  int v373;
  int v374;
  WTF::StringImpl *v375;
  float v376;
  float v377;
  float v378;
  float v379;
  float v380;
  float v381;
  float v382;
  float v383;
  unint64_t v384;
  float v385;
  float v386;
  float v387;
  unint64_t v388;
  float v389;
  float v390;
  float v391;
  float v392;
  float v393;
  float v394;
  unint64_t v395;
  float v396;
  _DWORD *v397;
  unsigned int v398;
  unint64_t v399;
  unsigned int v400;
  uint64_t v401;
  _DWORD *v402;
  uint64_t v403;
  __int128 v404;
  __int128 v405;
  uint64_t v406;
  WTF::StringImpl *v407;
  uint64_t v408;
  WTF::StringImpl *v409;
  WTF *v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t i;
  uint64_t v414;
  WTF::StringImpl ***v415;
  uint64_t v416;
  WTF *v417;
  WTF::StringImpl **v418;
  uint64_t v419;
  WTF::StringImpl *v420;
  WTF *v421;
  WTF *v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t j;
  uint64_t v426;
  WTF::StringImpl ***v427;
  uint64_t v428;
  WTF *v429;
  WTF::StringImpl **v430;
  uint64_t v431;
  WTF::StringImpl *v432;
  WTF *v433;
  WTF *v434;
  uint64_t v435;
  WTF::StringImpl *v436;
  WTF::StringImpl **v437;
  uint64_t v438;
  WTF::StringImpl *v439;
  uint64_t v440;
  unsigned int *v441;
  unsigned int v442;
  char v443;
  float v444;
  uint64_t v445;
  WebCore::ScrollView *v446;
  WTF *v447;
  uint64_t v448;
  unsigned int v449;
  float v450;
  _QWORD *v451;
  uint64_t v452;
  uint64_t v453;
  float v454;
  float v455;
  uint64_t v456;
  float v457;
  float v458;
  unint64_t v459;
  unint64_t v460;
  WTF *v461;
  unint64_t v462;
  float v463;
  uint64_t v464;
  unint64_t v465;
  __int32 v466;
  WTF::StringImpl *v467;
  float v468;
  float v469;
  WebCore::RenderObject *v470;
  float v471;
  float v472;
  float v473;
  float v474;
  WTF::StringImpl *v475;
  float v476;
  float v477;
  uint64_t v478;
  uint64_t v479;
  WTF *v480;
  int v481;
  unsigned int v482;
  uint64_t v483;
  WTF *v484;
  int v485;
  unsigned int v486;
  uint64_t v487;
  WTF::StringImpl *v488[2];
  int v489;
  char v490;
  uint64_t v491;
  _OWORD v492[3];
  int8x16_t v493;
  float v494;
  WTF::StringImpl **v495;
  int v496;
  unsigned int v497;
  uint64_t v498;
  WTF *v499;
  int v500;
  unsigned int v501;
  __int128 v502;
  __int128 v503;
  __int128 v504;
  __int128 v505;
  uint64_t v506;
  _QWORD v507[8];
  _QWORD v508[8];
  _QWORD v509[2];
  char v510;
  BOOL v511;
  char v512;
  uint64_t v513;
  float v514;
  float v515;
  float v516;
  float v517;

  v5 = (_BYTE *)result;
  if (!*(_QWORD *)a3 || (v22 = *(_QWORD **)(*(_QWORD *)a3 + 8)) == 0)
  {
    v6 = *((_QWORD *)this + 34);
    v7 = *((_DWORD *)this + 71);
    v8 = v6 + 24 * v7;
    v9 = 0;
    if (v7)
    {
      v10 = (unsigned int *)(v6 + 24 * v7);
      v11 = (unint64_t)v10;
      do
      {
        if (*(_QWORD *)v6 && *(_QWORD *)(*(_QWORD *)v6 + 8))
        {
          v12 = v11;
        }
        else
        {
          v12 = v6;
          if (v11 != *((_QWORD *)this + 34) + 24 * *((unsigned int *)this + 71))
          {
            if (v10 == (unsigned int *)v6)
            {
              v12 = v11;
            }
            else
            {
              result = (uint64_t)WTF::VectorMover<false,WebCore::InspectorOverlay::Grid>::moveOverlapping(v10, (unsigned int *)v6, v11);
              v12 = v11 + v6 - (_QWORD)v10;
            }
          }
          v13 = *(_QWORD *)(v6 + 8);
          if ((v13 & 0x8000000000000) != 0)
          {
            result = v13 & 0xFFFFFFFFFFFFLL;
            do
            {
              v19 = __ldaxr((unsigned int *)result);
              v20 = v19 - 1;
            }
            while (__stlxr(v20, (unsigned int *)result));
            if (!v20)
            {
              atomic_store(1u, (unsigned int *)result);
              result = WTF::fastFree((WTF *)result, this);
            }
          }
          v14 = *(_QWORD *)v6;
          *(_QWORD *)v6 = 0;
          if (v14)
          {
            do
            {
              v15 = __ldaxr((unsigned int *)v14);
              v16 = v15 - 1;
            }
            while (__stlxr(v16, (unsigned int *)v14));
            if (!v16)
            {
              atomic_store(1u, (unsigned int *)v14);
              v17 = *(unsigned int *)(v14 + 28);
              if ((_DWORD)v17)
                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v14 + 16), (WTF::StringImpl *)(*(_QWORD *)(v14 + 16) + 32 * v17));
              v18 = *(WTF **)(v14 + 16);
              if (v18)
              {
                *(_QWORD *)(v14 + 16) = 0;
                *(_DWORD *)(v14 + 24) = 0;
                WTF::fastFree(v18, this);
              }
              result = WTF::fastFree((WTF *)v14, this);
            }
          }
          v10 = (unsigned int *)(v6 + 24);
          ++v9;
          v11 = v12;
        }
        v6 += 24;
      }
      while (v6 < v8);
      v6 = *((_QWORD *)this + 34);
      v7 = *((_DWORD *)this + 71);
      v8 = v12;
    }
    else
    {
      v10 = (unsigned int *)*((_QWORD *)this + 34);
    }
    v21 = (unsigned int *)(v6 + 24 * v7);
    if (v10 != v21)
    {
      result = (uint64_t)WTF::VectorMover<false,WebCore::InspectorOverlay::Grid>::moveOverlapping(v10, v21, v8);
      v7 = *((_DWORD *)this + 71);
    }
    *((_DWORD *)this + 71) = v7 - v9;
    goto LABEL_31;
  }
  v23 = v22[8];
  if ((v23 & 0xFFFFFFFFFFFFLL) == 0 || *(_BYTE *)((v23 & 0xFFFFFFFFFFFFLL) + 0x2E) != 12)
  {
    result = WebCore::InspectorOverlay::removeGridOverlayForNode(this, *(WebCore::Node **)(*(_QWORD *)a3 + 8));
    goto LABEL_31;
  }
  v470 = (WebCore::RenderObject *)(v23 & 0xFFFFFFFFFFFFLL);
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)this + 160) + 56))(*(_QWORD *)(*(_QWORD *)this + 160));
  if (!result)
  {
LABEL_31:
    *v5 = 0;
    v5[72] = 0;
    return result;
  }
  v26 = result;
  ++*(_DWORD *)(result + 8);
  v27 = WebCore::ScrollView::sizeForVisibleContent((WebCore::ScrollView *)result, 0);
  result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v26 + 64) + 832))(v26 + 64, 0, 1);
  v29 = (float)(int)result;
  if (a4)
    v30 = (float)(int)result;
  else
    v30 = 0.0;
  v455 = (float)SHIDWORD(result);
  if (a4)
    v31 = (float)SHIDWORD(result);
  else
    v31 = 0.0;
  if (*((_BYTE *)v470 + 46) != 12)
  {
    __break(0xC471u);
    JUMPOUT(0x195DD2990);
  }
  v32 = *((unsigned int *)v470 + 145);
  if ((_DWORD)v32)
  {
    if (v32 >> 30)
    {
      __break(0xC471u);
      JUMPOUT(0x195DD2A80);
    }
    result = WTF::fastMalloc((WTF *)(4 * v32));
    v33 = (WTF *)result;
    v34 = *((unsigned int *)v470 + 145);
    if ((_DWORD)v34)
    {
      v35 = (int *)*((_QWORD *)v470 + 71);
      v36 = 4 * v34;
      v37 = (_DWORD *)result;
      do
      {
        v38 = *v35++;
        *v37++ = v38;
        v36 -= 4;
      }
      while (v36);
    }
  }
  else
  {
    v33 = 0;
  }
  v39 = *((_DWORD *)v470 + 149);
  if (!v39)
  {
    *v5 = 0;
    v5[72] = 0;
    if (v33)
      goto LABEL_618;
    goto LABEL_619;
  }
  if (v39 >> 30)
  {
    __break(0xC471u);
    JUMPOUT(0x195DD2A88);
  }
  v40 = (WTF *)WTF::fastMalloc((WTF *)(4 * *((unsigned int *)v470 + 149)));
  v42 = v40;
  v43 = *((unsigned int *)v470 + 149);
  if ((_DWORD)v43)
  {
    v44 = (int *)*((_QWORD *)v470 + 73);
    v45 = 4 * v43;
    v46 = v40;
    do
    {
      v47 = *v44++;
      *(_DWORD *)v46 = v47;
      v46 = (WTF *)((char *)v46 + 4);
      v45 -= 4;
    }
    while (v45);
  }
  if (!(_DWORD)v32)
    goto LABEL_616;
  v48 = (float)(int)v27;
  v49 = (float)SHIDWORD(v27);
  v50 = v470;
  v51 = *((_DWORD *)v470 + 173);
  do
  {
    v52 = v50;
    v53 = *((_QWORD *)v50 + 4);
    if (!v53)
      break;
    v50 = *(WebCore::RenderObject **)(v53 + 8);
    if (!v50)
      break;
  }
  while (*((_BYTE *)v50 + 46) == 12
       && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v52 + 11) + 40) + 80) + 258));
  v451 = v22;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v52 + 11) + 40) + 80) + 260))
  {
    v54 = v40;
    v55 = *(_DWORD *)v40;
    if (__OFADD__(*(_DWORD *)v40, v51))
      v56 = (*(_DWORD *)v40 >> 31) + 0x7FFFFFFF;
    else
      v56 = *(_DWORD *)v40 + v51;
    v57 = *((_DWORD *)v470 + 173);
    v58 = (WTF *)WTF::fastMalloc((WTF *)8);
    *(_DWORD *)v58 = v55;
    *((_DWORD *)v58 + 1) = v56;
    WTF::fastFree(v54, v59);
    v51 = v57;
    v39 = 2;
    v42 = v58;
  }
  v60 = v470;
  do
  {
    v61 = v60;
    v62 = *((_QWORD *)v60 + 4);
    if (!v62)
      break;
    v60 = *(WebCore::RenderObject **)(v62 + 8);
    if (!v60)
      break;
  }
  while (*((_BYTE *)v60 + 46) == 12
       && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v61 + 11) + 40) + 80) + 259));
  v63 = v61;
  do
  {
    v64 = v63;
    v65 = *((_QWORD *)v63 + 4);
    if (!v65)
      break;
    v63 = *(WebCore::RenderObject **)(v65 + 8);
    if (!v63)
      break;
  }
  while (*((_BYTE *)v63 + 46) == 12
       && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v64 + 11) + 40) + 80) + 258));
  v447 = v42;
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v64 + 11) + 40) + 80) + 260)
    && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v61 + 11) + 40) + 80) + 261))
  {
    v66 = *(_DWORD *)v33;
    v67 = *(_DWORD *)v33 + v51;
    if (__OFADD__(*(_DWORD *)v33, v51))
      v67 = (v66 >> 31) + 0x7FFFFFFF;
    v68 = (WTF *)WTF::fastMalloc((WTF *)8);
    *(_DWORD *)v68 = v66;
    *((_DWORD *)v68 + 1) = v67;
    WTF::fastFree(v33, v69);
    LODWORD(v32) = 2;
    v33 = v68;
    v42 = v447;
  }
  v517 = 0.0;
  v517 = (float)*(int *)v33 * 0.015625;
  v516 = 0.0;
  v462 = v32;
  v453 = v32 - 1;
  v516 = (float)*((int *)v33 + v453) * 0.015625;
  v515 = 0.0;
  v515 = (float)*(int *)v42 * 0.015625;
  v514 = 0.0;
  v459 = v39;
  v452 = v39 - 1;
  v514 = (float)*((int *)v42 + v452) * 0.015625;
  v70 = *(_QWORD *)(*(_QWORD *)(v451[5] + 8) + 528);
  if (!v70)
    goto LABEL_616;
  v71 = *(_QWORD *)(v70 + 8);
  if (!v71)
    goto LABEL_616;
  v513 = *(_QWORD *)(v71 + 288);
  LOBYTE(v502) = 0;
  LOBYTE(v503) = 0;
  v72 = (*(uint64_t (**)(_QWORD *, __int128 *))(*v451 + 264))(v451, &v502);
  if (!(_BYTE)v503 || (v73 = (WTF::StringImpl *)*((_QWORD *)&v502 + 1), *((_QWORD *)&v502 + 1) = 0, !v73))
  {
LABEL_85:
    if (v72)
      goto LABEL_86;
LABEL_616:
    *v5 = 0;
    v5[72] = 0;
    goto LABEL_617;
  }
  if (*(_DWORD *)v73 != 2)
  {
    *(_DWORD *)v73 -= 2;
    goto LABEL_85;
  }
  WTF::StringImpl::destroy(v73, v41);
  if (!v72)
    goto LABEL_616;
LABEL_86:
  v454 = v30;
  v449 = v39;
  v445 = (uint64_t)v5;
  v446 = (WebCore::ScrollView *)v26;
  v461 = v33;
  v450 = v29;
  v74 = ((unsigned __int16)*(_DWORD *)(v72 + 44) >> 13) - 1;
  switch((unsigned __int16)*(_DWORD *)(v72 + 44) >> 13)
  {
    case 1:
      v512 = 1;
      v511 = (*(_DWORD *)(v72 + 40) & 0x4000000) != 0;
      v510 = 0;
LABEL_666:
      v443 = 1;
      goto LABEL_90;
    case 2:
      v512 = 0;
      v511 = (*(_DWORD *)(v72 + 40) & 0x4000000) != 0;
      v510 = 0;
      goto LABEL_668;
    case 3:
    case 5:
      v75 = 0;
      goto LABEL_88;
    case 4:
      v512 = 0;
      v511 = (*(_DWORD *)(v72 + 40) & 0x4000000) != 0;
LABEL_668:
      v443 = 2;
      goto LABEL_90;
    default:
      v75 = 1;
LABEL_88:
      v512 = v75;
      v511 = (*(_DWORD *)(v72 + 40) & 0x4000000) != 0;
      v443 = 2;
      switch(v74)
      {
        case 0:
          goto LABEL_666;
        case 1:
          goto LABEL_668;
        case 2:
        case 4:
          v443 = 3;
          break;
        case 3:
          break;
        default:
          v443 = 0;
          break;
      }
LABEL_90:
      v510 = v443 & 1;
      v509[0] = WebCore::RenderObject::absoluteBoundingBoxRect(v470, 0, 0);
      v509[1] = v76;
      v508[0] = &v512;
      v508[1] = &v511;
      v508[2] = v509;
      v508[3] = &v510;
      v508[4] = &v515;
      v508[5] = &v514;
      v508[6] = &v513;
      v508[7] = v470;
      v507[0] = &v512;
      v507[1] = &v511;
      v507[2] = v509;
      v507[3] = &v517;
      v507[4] = &v510;
      v507[5] = &v516;
      v507[6] = &v513;
      v507[7] = v470;
      v506 = 0;
      v505 = 0u;
      v504 = 0u;
      v503 = 0u;
      v502 = 0u;
      v77 = *(_QWORD *)(a3 + 8);
      if (v77)
      {
        *(_QWORD *)&v502 = *(_QWORD *)(a3 + 8);
        if ((v77 & 0x8000000000000) != 0)
        {
          v441 = (unsigned int *)(v77 & 0xFFFFFFFFFFFFLL);
          do
            v442 = __ldaxr(v441);
          while (__stlxr(v442 + 1, v441));
        }
      }
      WebCore::RenderGrid::trackSizesForComputedStyle(v470, 0, (uint64_t)&v499);
      v78 = v451[8] & 0xFFFFFFFFFFFFLL;
      if (v78)
      {
        if ((*(_BYTE *)((v451[8] & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          v78 = *(_QWORD *)((v451[8] & 0xFFFFFFFFFFFFLL) + 0x20);
          if (v78)
            v78 = *(_QWORD *)(v78 + 8);
        }
        v79 = v78 + 80;
      }
      else
      {
        v79 = 0;
      }
      v80 = v32;
      WebCore::gridLineNames((uint64_t)&v498, v79, 0, v32);
      WebCore::authoredGridTrackSizes((uint64_t)&v495, (uint64_t)v451, 0, v501);
      v81 = 0;
      v82 = v31 + v49;
      v83 = v30 + v48;
      if (v32 <= 1)
        v84 = 1;
      else
        v84 = v32;
      v468 = (float)(v30 - v83) * (float)(v30 - v83);
      v469 = (float)(v31 - (float)(v31 + v49)) * (float)(v31 - (float)(v31 + v49));
      v85 = 0.0;
      v86 = 0.0;
      v87 = 0.0;
      v88 = 0.0;
      v89 = (WebCore::ScrollView *)v26;
      v90 = v470;
      v456 = v84;
      break;
  }
  do
  {
    WebCore::InspectorOverlay::buildGridOverlay(WebCore::InspectorOverlay::Grid const&,BOOL)::$_1::operator()((float *)v493.i32, (uint64_t)v508, (float)*((int *)v33 + v81) * 0.015625);
    if (*(_BYTE *)(a3 + 18))
    {
      v92 = vabds_f32(*(float *)v493.i32, *(float *)&v493.i32[2]) > vabds_f32(*(float *)&v493.i32[1], *(float *)&v493.i32[3]);
      v95 = *(float *)v493.i32
          + (float)((float)((float)(*(float *)&v493.i32[2] - *(float *)v493.i32) * (float)(v31 - *(float *)&v493.i32[1]))
                  / (float)(*(float *)&v493.i32[3] - *(float *)&v493.i32[1]));
      v96 = *(float *)v493.i32
          + (float)((float)((float)(*(float *)&v493.i32[2] - *(float *)v493.i32) * (float)(v82 - *(float *)&v493.i32[1]))
                  / (float)(*(float *)&v493.i32[3] - *(float *)&v493.i32[1]));
      v97 = v469 + (float)((float)(v95 - v96) * (float)(v95 - v96));
      if (v92)
      {
        v93 = *(float *)&v493.i32[1]
            + (float)((float)((float)(v30 - *(float *)v493.i32)
                            * (float)(*(float *)&v493.i32[3] - *(float *)&v493.i32[1]))
                    / (float)(*(float *)&v493.i32[2] - *(float *)v493.i32));
        v94 = *(float *)&v493.i32[1]
            + (float)((float)((float)(v83 - *(float *)v493.i32)
                            * (float)(*(float *)&v493.i32[3] - *(float *)&v493.i32[1]))
                    / (float)(*(float *)&v493.i32[2] - *(float *)v493.i32));
        v97 = v468 + (float)((float)(v93 - v94) * (float)(v93 - v94));
        v98 = v30;
      }
      else
      {
        v98 = *(float *)v493.i32
            + (float)((float)((float)(*(float *)&v493.i32[2] - *(float *)v493.i32)
                            * (float)(v31 - *(float *)&v493.i32[1]))
                    / (float)(*(float *)&v493.i32[3] - *(float *)&v493.i32[1]));
      }
      if (v92)
        v99 = *(float *)&v493.i32[1]
            + (float)((float)((float)(v30 - *(float *)v493.i32)
                            * (float)(*(float *)&v493.i32[3] - *(float *)&v493.i32[1]))
                    / (float)(*(float *)&v493.i32[2] - *(float *)v493.i32));
      else
        v99 = v31;
      if (v92)
      {
        v96 = v83;
        v100 = *(float *)&v493.i32[1]
             + (float)((float)((float)(v83 - *(float *)v493.i32)
                             * (float)(*(float *)&v493.i32[3] - *(float *)&v493.i32[1]))
                     / (float)(*(float *)&v493.i32[2] - *(float *)v493.i32));
      }
      else
      {
        v100 = v82;
      }
      *(_QWORD *)&v492[0] = __PAIR64__(LODWORD(v99), LODWORD(v98));
      *((_QWORD *)&v492[0] + 1) = __PAIR64__(LODWORD(v100), LODWORD(v96));
      LODWORD(v492[1]) = sqrtf(v97);
      if (DWORD1(v503) != (_DWORD)v503)
      {
        v104 = *((_QWORD *)&v502 + 1) + 20 * DWORD1(v503);
        v105 = (int8x16_t)v492[0];
        v106 = *(float *)&v492[1];
        goto LABEL_118;
      }
      v101 = DWORD1(v503) + 1;
      v102 = (int8x16_t *)v492;
    }
    else
    {
      if (DWORD1(v503) != (_DWORD)v503)
      {
        v104 = *((_QWORD *)&v502 + 1) + 20 * DWORD1(v503);
        v105 = v493;
        v106 = v494;
        goto LABEL_118;
      }
      v101 = DWORD1(v503) + 1;
      v102 = &v493;
    }
    v103 = WTF::Vector<WebCore::FloatLine,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v502 + 8, v101, (unint64_t)v102);
    v104 = *((_QWORD *)&v502 + 1) + 20 * DWORD1(v503);
    v105 = *(int8x16_t *)v103;
    v106 = *((float *)v103 + 4);
LABEL_118:
    *(float *)(v104 + 16) = v106;
    *(int8x16_t *)v104 = v105;
    ++DWORD1(v503);
    v107 = v90;
    do
    {
      v108 = v107;
      v109 = *((_QWORD *)v107 + 4);
      if (!v109)
        break;
      v107 = *(WebCore::RenderObject **)(v109 + 8);
      if (!v107)
        break;
    }
    while (*((_BYTE *)v107 + 46) == 12
         && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v108 + 11) + 40) + 80) + 259));
    v110 = v108;
    do
    {
      v111 = v110;
      v112 = *((_QWORD *)v110 + 4);
      if (!v112)
        break;
      v110 = *(WebCore::RenderObject **)(v112 + 8);
      if (!v110)
        break;
    }
    while (*((_BYTE *)v110 + 46) == 12
         && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v111 + 11) + 40) + 80) + 258));
    if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v111 + 11) + 40) + 80) + 260)
      && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v108 + 11) + 40) + 80) + 261))
    {
      goto LABEL_287;
    }
    if (v81)
    {
      *(_QWORD *)&v492[0] = __PAIR64__(LODWORD(v86), LODWORD(v85));
      v114 = v493.i64[1];
      v113 = v493.i64[0];
      *(int8x16_t *)((char *)v492 + 8) = v493;
      *((_QWORD *)&v492[1] + 1) = __PAIR64__(LODWORD(v88), LODWORD(v87));
      if (DWORD1(v504) == (_DWORD)v504)
      {
        v115 = (_OWORD *)WTF::Vector<WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v503 + 8, DWORD1(v504) + 1, (unint64_t)v492);
        v116 = (_OWORD *)(*((_QWORD *)&v503 + 1) + 32 * DWORD1(v504));
        v117 = v115[1];
        *v116 = *v115;
        v116[1] = v117;
        v118 = DWORD1(v504);
        v114 = v493.i64[1];
        v113 = v493.i64[0];
      }
      else
      {
        v220 = (_OWORD *)(*((_QWORD *)&v503 + 1) + 32 * DWORD1(v504));
        v221 = v492[1];
        *v220 = v492[0];
        v220[1] = v221;
        v118 = DWORD1(v504);
      }
      DWORD1(v504) = v118 + 1;
      v119 = *(float *)&v114 - v87;
      v120 = *(float *)&v113 + (float)((float)(*(float *)&v113 - v85) * -0.5);
      v121 = *((float *)&v113 + 1) + (float)((float)(*((float *)&v113 + 1) - v86) * -0.5);
      v457 = *((float *)&v114 + 1) + (float)((float)(*((float *)&v114 + 1) - v88) * -0.5);
      v458 = *(float *)&v114 + (float)(v119 * -0.5);
      v122 = sqrtf((float)((float)(v120 - v458) * (float)(v120 - v458))+ (float)((float)(v121 - v457) * (float)(v121 - v457)));
      v88 = *((float *)&v114 + 1);
      v86 = *((float *)&v113 + 1);
    }
    else
    {
      v86 = *(float *)&v493.i32[1];
      v120 = *(float *)v493.i32;
      v88 = *(float *)&v493.i32[3];
      v122 = v494;
      v121 = *(float *)&v493.i32[1];
      v457 = *(float *)&v493.i32[3];
      v458 = *(float *)&v493.i32[2];
    }
    v463 = v122;
    if (v81 < v80 && v81 < v501)
    {
      v123 = *((_DWORD *)v499 + v81);
      v124 = *((_DWORD *)v33 + v81);
      v125 = __OFADD__(v124, v123);
      v126 = v124 + v123;
      v127 = (v124 >> 31) + 0x7FFFFFFF;
      if (v125)
        v126 = v127;
      WebCore::InspectorOverlay::buildGridOverlay(WebCore::InspectorOverlay::Grid const&,BOOL)::$_1::operator()((float *)v488, (uint64_t)v508, (float)v126 * 0.015625);
      if (*(_BYTE *)(a3 + 18))
      {
        v128 = vabds_f32(*(float *)v488, *(float *)&v488[1]) > vabds_f32(*((float *)v488 + 1), *((float *)&v488[1] + 1));
        v131 = *(float *)v488
             + (float)((float)((float)(*(float *)&v488[1] - *(float *)v488) * (float)(v31 - *((float *)v488 + 1)))
                     / (float)(*((float *)&v488[1] + 1) - *((float *)v488 + 1)));
        v132 = *(float *)v488
             + (float)((float)((float)(*(float *)&v488[1] - *(float *)v488) * (float)(v82 - *((float *)v488 + 1)))
                     / (float)(*((float *)&v488[1] + 1) - *((float *)v488 + 1)));
        v133 = v469 + (float)((float)(v131 - v132) * (float)(v131 - v132));
        if (v128)
        {
          v129 = *((float *)v488 + 1)
               + (float)((float)((float)(v30 - *(float *)v488) * (float)(*((float *)&v488[1] + 1) - *((float *)v488 + 1)))
                       / (float)(*(float *)&v488[1] - *(float *)v488));
          v130 = *((float *)v488 + 1)
               + (float)((float)((float)(v83 - *(float *)v488) * (float)(*((float *)&v488[1] + 1) - *((float *)v488 + 1)))
                       / (float)(*(float *)&v488[1] - *(float *)v488));
          v133 = v468 + (float)((float)(v129 - v130) * (float)(v129 - v130));
          v134 = v30;
        }
        else
        {
          v134 = *(float *)v488
               + (float)((float)((float)(*(float *)&v488[1] - *(float *)v488) * (float)(v31 - *((float *)v488 + 1)))
                       / (float)(*((float *)&v488[1] + 1) - *((float *)v488 + 1)));
        }
        if (v128)
          v135 = *((float *)v488 + 1)
               + (float)((float)((float)(v30 - *(float *)v488) * (float)(*((float *)&v488[1] + 1) - *((float *)v488 + 1)))
                       / (float)(*(float *)&v488[1] - *(float *)v488));
        else
          v135 = v31;
        if (v128)
        {
          v132 = v83;
          v136 = *((float *)v488 + 1)
               + (float)((float)((float)(v83 - *(float *)v488) * (float)(*((float *)&v488[1] + 1) - *((float *)v488 + 1)))
                       / (float)(*(float *)&v488[1] - *(float *)v488));
        }
        else
        {
          v136 = v82;
        }
        *(_QWORD *)&v492[0] = __PAIR64__(LODWORD(v135), LODWORD(v134));
        *((_QWORD *)&v492[0] + 1) = __PAIR64__(LODWORD(v136), LODWORD(v132));
        LODWORD(v492[1]) = sqrtf(v133);
        if (DWORD1(v503) == (_DWORD)v503)
        {
          v137 = DWORD1(v503) + 1;
          v138 = (WTF::StringImpl **)v492;
LABEL_155:
          v139 = WTF::Vector<WebCore::FloatLine,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v502 + 8, v137, (unint64_t)v138);
          v140 = *((_QWORD *)&v502 + 1) + 20 * DWORD1(v503);
          v141 = *(_OWORD *)v139;
          v142 = *((_DWORD *)v139 + 4);
          goto LABEL_158;
        }
        v140 = *((_QWORD *)&v502 + 1) + 20 * DWORD1(v503);
        v141 = v492[0];
        v142 = v492[1];
      }
      else
      {
        if (DWORD1(v503) == (_DWORD)v503)
        {
          v137 = DWORD1(v503) + 1;
          v138 = v488;
          goto LABEL_155;
        }
        v140 = *((_QWORD *)&v502 + 1) + 20 * DWORD1(v503);
        v141 = *(_OWORD *)v488;
        v142 = v489;
      }
LABEL_158:
      *(_DWORD *)(v140 + 16) = v142;
      *(_OWORD *)v140 = v141;
      ++DWORD1(v503);
      v86 = *((float *)v488 + 1);
      v466 = (__int32)v488[0];
      v88 = *((float *)&v488[1] + 1);
      LODWORD(v465) = v488[1];
      if (*(_BYTE *)(a3 + 19))
      {
        if (v81 >= v497)
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v143 = v475;
        }
        else
        {
          v143 = v495[v81];
          if (v143)
            *(_DWORD *)v143 += 2;
          v475 = v143;
        }
        v144 = vmla_f32(*(float32x2_t *)v493.i8, (float32x2_t)0xBF000000BF000000, vsub_f32(*(float32x2_t *)v493.i8, (float32x2_t)v488[0]));
        v491 = 0x11040000FFFFFFE6;
        v145 = 1;
        if (!v510)
          v145 = 2;
        v146 = 3;
        if (v510)
          v146 = 4;
        if (!v512)
          v145 = v146;
        v147 = v448 & 0xFFFFFFFFFFFF0000 | v145;
        v448 = v147 | 0x200;
        WebCore::InspectorOverlayLabel::InspectorOverlayLabel((uint64_t)v492, v143, &v491, v147 | 0x200, v144.f32[0], v144.f32[1]);
        v149 = HIDWORD(v506);
        if (HIDWORD(v506) == (_DWORD)v506)
        {
          v150 = (_OWORD *)WTF::Vector<WebCore::InspectorOverlayLabel,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v505 + 8, HIDWORD(v506) + 1, (unint64_t)v492);
          v151 = HIDWORD(v506);
          v152 = *((_QWORD *)&v505 + 1);
          v153 = *((_QWORD *)&v505 + 1) + 40 * HIDWORD(v506);
          *(_QWORD *)v153 = 0;
          *(_QWORD *)(v153 + 8) = 0;
          v154 = *(_QWORD *)v150;
          *(_QWORD *)v150 = 0;
          *(_QWORD *)v153 = v154;
          LODWORD(v154) = *((_DWORD *)v150 + 2);
          *((_DWORD *)v150 + 2) = 0;
          *(_DWORD *)(v153 + 8) = v154;
          LODWORD(v154) = *((_DWORD *)v150 + 3);
          *((_DWORD *)v150 + 3) = 0;
          *(_DWORD *)(v153 + 12) = v154;
          v155 = *((_QWORD *)v150 + 2);
          *(_QWORD *)(v153 + 24) = 0;
          v156 = (_QWORD *)(v153 + 24);
          *(v156 - 1) = v155;
          v157 = *((_QWORD *)v150 + 3);
          if (v157)
          {
            *v156 = v157;
            *((_QWORD *)v150 + 3) = 0;
          }
          v158 = (_WORD *)(v152 + 40 * v151 + 32);
        }
        else
        {
          v159 = *((_QWORD *)&v505 + 1);
          v160 = *((_QWORD *)&v505 + 1) + 40 * HIDWORD(v506);
          *(_QWORD *)v160 = 0;
          *(_QWORD *)(v160 + 8) = 0;
          v161 = *(_QWORD *)&v492[0];
          *(_QWORD *)&v492[0] = 0;
          *(_QWORD *)v160 = v161;
          LODWORD(v161) = DWORD2(v492[0]);
          DWORD2(v492[0]) = 0;
          *(_DWORD *)(v160 + 8) = v161;
          LODWORD(v161) = HIDWORD(v492[0]);
          HIDWORD(v492[0]) = 0;
          *(_DWORD *)(v160 + 12) = v161;
          v162 = *(_QWORD *)&v492[1];
          *(_QWORD *)(v160 + 24) = 0;
          v163 = (_QWORD *)(v160 + 24);
          *(v163 - 1) = v162;
          if (*((_QWORD *)&v492[1] + 1))
          {
            *v163 = *((_QWORD *)&v492[1] + 1);
            *((_QWORD *)&v492[1] + 1) = 0;
          }
          v158 = (_WORD *)(v159 + 40 * v149 + 32);
          v150 = v492;
        }
        *v158 = *((_WORD *)v150 + 16);
        ++HIDWORD(v506);
        if ((*((_QWORD *)&v492[1] + 1) & 0x8000000000000) != 0)
        {
          v228 = (unsigned int *)(*((_QWORD *)&v492[1] + 1) & 0xFFFFFFFFFFFFLL);
          do
          {
            v229 = __ldaxr(v228);
            v230 = v229 - 1;
          }
          while (__stlxr(v230, v228));
          v89 = v446;
          v33 = v461;
          v80 = v462;
          v90 = v470;
          v84 = v456;
          v30 = v454;
          if (!v230)
          {
            atomic_store(1u, v228);
            WTF::fastFree((WTF *)v228, v148);
          }
        }
        WTF::Vector<WebCore::InspectorOverlayLabel::Content,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v492, v148);
        if ((v491 & 0x8000000000000) != 0)
        {
          v231 = (unsigned int *)(v491 & 0xFFFFFFFFFFFFLL);
          do
          {
            v232 = __ldaxr(v231);
            v233 = v232 - 1;
          }
          while (__stlxr(v233, v231));
          v89 = v446;
          v33 = v461;
          v80 = v462;
          v90 = v470;
          v84 = v456;
          v30 = v454;
          if (!v233)
          {
            atomic_store(1u, v231);
            WTF::fastFree((WTF *)v231, v91);
          }
        }
        v164 = v475;
        v475 = 0;
        if (v164)
        {
          if (*(_DWORD *)v164 == 2)
            WTF::StringImpl::destroy(v164, (WTF::StringImpl *)v91);
          else
            *(_DWORD *)v164 -= 2;
        }
      }
      goto LABEL_182;
    }
    v466 = v493.i32[0];
    LODWORD(v465) = v493.i32[2];
LABEL_182:
    v488[0] = 0;
    v488[1] = 0;
    v489 = 0;
    v490 = 1;
    if (*(_BYTE *)(a3 + 17))
    {
      LODWORD(v492[0]) = v81 + 1;
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<unsigned int,void>>((uint64_t *)v488, (unsigned int *)v492);
      if (v81 <= v497)
      {
        LOWORD(v475) = 8195;
        LODWORD(v492[0]) = v81 + ~v497;
        WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char16_t,void>,WTF::StringTypeAdapter<int,void>>((WTF::StringBuilder *)v488, &v475, (unsigned int *)v492);
      }
    }
    if (!*(_BYTE *)(a3 + 16))
      goto LABEL_225;
    WTF::HashMap<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t)v492, v498, v81);
    v165 = *(WTF **)&v492[0];
    if (!HIDWORD(v492[0]))
      goto LABEL_222;
    v166 = 8 * HIDWORD(v492[0]);
    v167 = v166;
    v168 = *(uint64_t **)&v492[0];
    do
    {
      v169 = *v168;
      if (*v168)
        *(_DWORD *)v169 += 2;
      if (!v489)
        goto LABEL_194;
      v170 = WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)v488);
      if (v170)
      {
        *(_DWORD *)v170 = 539107337;
        *(_WORD *)(v170 + 4) = 8201;
      }
      if (!v489)
      {
LABEL_194:
        if (!v488[1])
        {
          if (v169)
            *(_DWORD *)v169 += 2;
          v171 = v488[0];
          v488[0] = (WTF::StringImpl *)v169;
          if (v171)
          {
            if (*(_DWORD *)v171 == 2)
            {
              WTF::StringImpl::destroy(v171, (WTF::StringImpl *)v91);
              if (v169)
                goto LABEL_201;
              goto LABEL_213;
            }
            *(_DWORD *)v171 -= 2;
          }
          if (v169)
          {
LABEL_201:
            v172 = *(_DWORD *)(v169 + 4);
            goto LABEL_202;
          }
LABEL_213:
          v172 = 0;
LABEL_202:
          v489 = v172;
          if (!v169)
            goto LABEL_205;
          goto LABEL_203;
        }
      }
      if (v169 && (*(_BYTE *)(v169 + 16) & 4) == 0)
      {
        WTF::StringBuilder::append();
      }
      else
      {
        WTF::StringBuilder::append();
        if (!v169)
          goto LABEL_205;
      }
LABEL_203:
      if (*(_DWORD *)v169 == 2)
        WTF::StringImpl::destroy((WTF::StringImpl *)v169, (WTF::StringImpl *)v91);
      else
        *(_DWORD *)v169 -= 2;
LABEL_205:
      ++v168;
      v167 -= 8;
    }
    while (v167);
    v173 = (WTF::StringImpl **)v165;
    v90 = v470;
    v84 = v456;
    do
    {
      v174 = *v173;
      *v173 = 0;
      if (v174)
      {
        if (*(_DWORD *)v174 == 2)
          WTF::StringImpl::destroy(v174, (WTF::StringImpl *)v91);
        else
          *(_DWORD *)v174 -= 2;
      }
      ++v173;
      v166 -= 8;
    }
    while (v166);
LABEL_222:
    if (v165)
      WTF::fastFree(v165, v91);
    v80 = v462;
LABEL_225:
    if (v489)
    {
      v175 = v88;
      v176 = v488[0];
      v177 = v86;
      if (v488[0]
        || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)v488),
            WTF::StringBuilder::reifyString((WTF::StringBuilder *)v488),
            (v176 = v488[0]) != 0))
      {
        *(_DWORD *)v176 += 2;
      }
      if (v510)
        v178 = 2;
      else
        v178 = 1;
      if (v510)
        v179 = 3;
      else
        v179 = 4;
      if (v512)
        v180 = v178;
      else
        v180 = v179;
      v181 = 768;
      if (v511)
        v182 = 768;
      else
        v182 = 256;
      if (v511)
        v181 = 256;
      if (v453 != v81)
        v181 = 512;
      if (v81)
        v183 = v181;
      else
        v183 = v182;
      v184 = WebCore::InspectorOverlayLabel::expectedSize(v176, v180);
      v186 = v185;
      if (*((_QWORD *)v89 + 5))
      {
        v190 = WebCore::ScrollView::platformTopContentInset(v89);
        v191 = v460;
        v192 = v463;
      }
      else
      {
        v187 = (*(uint64_t (**)(WebCore::ScrollView *, float))(*(_QWORD *)v89 + 720))(v89, v184);
        v188 = (unsigned int *)(v187 + 8);
        do
          v189 = __ldaxr(v188);
        while (__stlxr(v189 + 1, v188));
        v190 = 0.0;
        v191 = v460;
        v192 = v463;
        if (*(_QWORD *)(*(_QWORD *)(v187 + 128) + 8) == v187)
        {
          v216 = *(_QWORD *)(v187 + 24);
          if (v216)
          {
            v217 = *(_QWORD *)(v216 + 8);
            if (v217)
              v190 = *(float *)(v217 + 372);
          }
        }
        do
        {
          v193 = __ldaxr(v188);
          v194 = v193 - 1;
        }
        while (__stlxr(v194, v188));
        if (!v194)
        {
          v444 = v190;
          atomic_store(1u, v188);
          v218 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v218 = off_1E31FE290;
          v218[1] = v188;
          *(_QWORD *)&v492[0] = v218;
          WTF::ensureOnMainThread();
          v219 = *(_QWORD *)&v492[0];
          *(_QWORD *)&v492[0] = 0;
          if (v219)
            (*(void (**)(uint64_t))(*(_QWORD *)v219 + 8))(v219);
          v190 = v444;
          v89 = v446;
          v191 = v460;
          v33 = v461;
          v80 = v462;
          v192 = v463;
        }
      }
      if ((float)((float)((float)((float)(v121 - v186) - v190) + v455) - v31) < 0.0)
      {
        v195 = v510 ? 1 : 2;
        v196 = v510 ? 4 : 3;
        LOBYTE(v180) = v512 ? v195 : v196;
        if (!v81 && v192 != 0.0)
        {
          v197 = (float)-v186 / v192;
          v120 = v120 + (float)(v197 * (float)(v120 - v458));
          v121 = v121 + (float)(v197 * (float)(v121 - v457));
        }
      }
      v487 = 0x11040000FFFFFFE6;
      v460 = v183 | v191 & 0xFFFFFFFFFFFF0000 | v180;
      WebCore::InspectorOverlayLabel::InspectorOverlayLabel((uint64_t)v492, v176, &v487, v183 | v180, v120, v121);
      v199 = HIDWORD(v506);
      v86 = v177;
      if (HIDWORD(v506) == (_DWORD)v506)
      {
        v200 = (_OWORD *)WTF::Vector<WebCore::InspectorOverlayLabel,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v505 + 8, HIDWORD(v506) + 1, (unint64_t)v492);
        v201 = HIDWORD(v506);
        v202 = *((_QWORD *)&v505 + 1);
        v203 = *((_QWORD *)&v505 + 1) + 40 * HIDWORD(v506);
        *(_QWORD *)v203 = 0;
        *(_QWORD *)(v203 + 8) = 0;
        v204 = *(_QWORD *)v200;
        *(_QWORD *)v200 = 0;
        *(_QWORD *)v203 = v204;
        LODWORD(v204) = *((_DWORD *)v200 + 2);
        *((_DWORD *)v200 + 2) = 0;
        *(_DWORD *)(v203 + 8) = v204;
        LODWORD(v204) = *((_DWORD *)v200 + 3);
        *((_DWORD *)v200 + 3) = 0;
        *(_DWORD *)(v203 + 12) = v204;
        v205 = *((_QWORD *)v200 + 2);
        *(_QWORD *)(v203 + 24) = 0;
        v206 = (_QWORD *)(v203 + 24);
        *(v206 - 1) = v205;
        v207 = *((_QWORD *)v200 + 3);
        v90 = v470;
        v84 = v456;
        LODWORD(v85) = v466;
        LODWORD(v87) = v465;
        if (v207)
        {
          *v206 = v207;
          *((_QWORD *)v200 + 3) = 0;
        }
        v208 = (_WORD *)(v202 + 40 * v201 + 32);
      }
      else
      {
        v209 = *((_QWORD *)&v505 + 1);
        v210 = *((_QWORD *)&v505 + 1) + 40 * HIDWORD(v506);
        *(_QWORD *)v210 = 0;
        *(_QWORD *)(v210 + 8) = 0;
        v211 = *(_QWORD *)&v492[0];
        *(_QWORD *)&v492[0] = 0;
        *(_QWORD *)v210 = v211;
        LODWORD(v211) = DWORD2(v492[0]);
        DWORD2(v492[0]) = 0;
        *(_DWORD *)(v210 + 8) = v211;
        LODWORD(v211) = HIDWORD(v492[0]);
        HIDWORD(v492[0]) = 0;
        *(_DWORD *)(v210 + 12) = v211;
        v212 = *(_QWORD *)&v492[1];
        *(_QWORD *)(v210 + 24) = 0;
        v213 = (_QWORD *)(v210 + 24);
        *(v213 - 1) = v212;
        v90 = v470;
        v84 = v456;
        LODWORD(v85) = v466;
        LODWORD(v87) = v465;
        if (*((_QWORD *)&v492[1] + 1))
        {
          *v213 = *((_QWORD *)&v492[1] + 1);
          *((_QWORD *)&v492[1] + 1) = 0;
        }
        v208 = (_WORD *)(v209 + 40 * v199 + 32);
        v200 = v492;
      }
      *v208 = *((_WORD *)v200 + 16);
      ++HIDWORD(v506);
      if ((*((_QWORD *)&v492[1] + 1) & 0x8000000000000) != 0)
      {
        v222 = (unsigned int *)(*((_QWORD *)&v492[1] + 1) & 0xFFFFFFFFFFFFLL);
        do
        {
          v223 = __ldaxr(v222);
          v224 = v223 - 1;
        }
        while (__stlxr(v224, v222));
        v89 = v446;
        v33 = v461;
        v80 = v462;
        v90 = v470;
        v84 = v456;
        v86 = v177;
        LODWORD(v85) = v466;
        LODWORD(v87) = v465;
        if (!v224)
        {
          atomic_store(1u, v222);
          WTF::fastFree((WTF *)v222, v198);
        }
      }
      WTF::Vector<WebCore::InspectorOverlayLabel::Content,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v492, v198);
      if ((v487 & 0x8000000000000) != 0)
      {
        v225 = (unsigned int *)(v487 & 0xFFFFFFFFFFFFLL);
        do
        {
          v226 = __ldaxr(v225);
          v227 = v226 - 1;
        }
        while (__stlxr(v227, v225));
        v89 = v446;
        v33 = v461;
        v80 = v462;
        v90 = v470;
        v84 = v456;
        v86 = v177;
        LODWORD(v85) = v466;
        LODWORD(v87) = v465;
        if (!v227)
        {
          atomic_store(1u, v225);
          WTF::fastFree((WTF *)v225, v91);
        }
      }
      if (v176)
      {
        v88 = v175;
        if (*(_DWORD *)v176 == 2)
          WTF::StringImpl::destroy(v176, (WTF::StringImpl *)v91);
        else
          *(_DWORD *)v176 -= 2;
      }
      else
      {
        v88 = v175;
      }
      v30 = v454;
    }
    else
    {
      LODWORD(v85) = v466;
      LODWORD(v87) = v465;
    }
    v214 = v488[1];
    v488[1] = 0;
    if (v214)
    {
      if (*(_DWORD *)v214 == 2)
        WTF::StringImpl::destroy(v214, (WTF::StringImpl *)v91);
      else
        *(_DWORD *)v214 -= 2;
    }
    v215 = v488[0];
    v488[0] = 0;
    if (v215)
    {
      if (*(_DWORD *)v215 == 2)
        WTF::StringImpl::destroy(v215, (WTF::StringImpl *)v91);
      else
        *(_DWORD *)v215 -= 2;
    }
LABEL_287:
    ++v81;
  }
  while (v81 != v84);
  WebCore::RenderGrid::trackSizesForComputedStyle(v90, 1, (uint64_t)&v484);
  v234 = v451[8] & 0xFFFFFFFFFFFFLL;
  if (v234)
  {
    if ((*(_BYTE *)((v451[8] & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      v234 = *(_QWORD *)((v451[8] & 0xFFFFFFFFFFFFLL) + 0x20);
      if (v234)
        v234 = *(_QWORD *)(v234 + 8);
    }
    v235 = v234 + 80;
  }
  else
  {
    v235 = 0;
  }
  WebCore::gridLineNames((uint64_t)&v483, v235, 1, v449);
  WebCore::authoredGridTrackSizes((uint64_t)&v480, (uint64_t)v451, 1, v486);
  v236 = 0;
  v467 = 0;
  if (v449 <= 1)
    v237 = 1;
  else
    v237 = v449;
  v238 = 0.0;
  v239 = 0.0;
  v240 = v447;
  v241 = v470;
  v242 = v454;
  v464 = v237;
  do
  {
    WebCore::InspectorOverlay::buildGridOverlay(WebCore::InspectorOverlay::Grid const&,BOOL)::$_2::operator()((float *)v493.i32, (uint64_t)v507, (float)*((int *)v240 + v236) * 0.015625);
    if (*(_BYTE *)(a3 + 18))
    {
      v244 = vabds_f32(*(float *)v493.i32, *(float *)&v493.i32[2]) > vabds_f32(*(float *)&v493.i32[1], *(float *)&v493.i32[3]);
      v247 = *(float *)v493.i32
           + (float)((float)((float)(*(float *)&v493.i32[2] - *(float *)v493.i32) * (float)(v31 - *(float *)&v493.i32[1]))
                   / (float)(*(float *)&v493.i32[3] - *(float *)&v493.i32[1]));
      v248 = *(float *)v493.i32
           + (float)((float)((float)(*(float *)&v493.i32[2] - *(float *)v493.i32) * (float)(v82 - *(float *)&v493.i32[1]))
                   / (float)(*(float *)&v493.i32[3] - *(float *)&v493.i32[1]));
      v249 = v469 + (float)((float)(v247 - v248) * (float)(v247 - v248));
      if (v244)
      {
        v245 = *(float *)&v493.i32[1]
             + (float)((float)((float)(v242 - *(float *)v493.i32)
                             * (float)(*(float *)&v493.i32[3] - *(float *)&v493.i32[1]))
                     / (float)(*(float *)&v493.i32[2] - *(float *)v493.i32));
        v246 = *(float *)&v493.i32[1]
             + (float)((float)((float)(v83 - *(float *)v493.i32)
                             * (float)(*(float *)&v493.i32[3] - *(float *)&v493.i32[1]))
                     / (float)(*(float *)&v493.i32[2] - *(float *)v493.i32));
        v249 = v468 + (float)((float)(v245 - v246) * (float)(v245 - v246));
        v250 = v242;
      }
      else
      {
        v250 = *(float *)v493.i32
             + (float)((float)((float)(*(float *)&v493.i32[2] - *(float *)v493.i32)
                             * (float)(v31 - *(float *)&v493.i32[1]))
                     / (float)(*(float *)&v493.i32[3] - *(float *)&v493.i32[1]));
      }
      if (v244)
        v251 = *(float *)&v493.i32[1]
             + (float)((float)((float)(v242 - *(float *)v493.i32)
                             * (float)(*(float *)&v493.i32[3] - *(float *)&v493.i32[1]))
                     / (float)(*(float *)&v493.i32[2] - *(float *)v493.i32));
      else
        v251 = v31;
      if (v244)
      {
        v248 = v83;
        v252 = *(float *)&v493.i32[1]
             + (float)((float)((float)(v83 - *(float *)v493.i32)
                             * (float)(*(float *)&v493.i32[3] - *(float *)&v493.i32[1]))
                     / (float)(*(float *)&v493.i32[2] - *(float *)v493.i32));
      }
      else
      {
        v252 = v82;
      }
      *(_QWORD *)&v492[0] = __PAIR64__(LODWORD(v251), LODWORD(v250));
      *((_QWORD *)&v492[0] + 1) = __PAIR64__(LODWORD(v252), LODWORD(v248));
      LODWORD(v492[1]) = sqrtf(v249);
      if (DWORD1(v503) != (_DWORD)v503)
      {
        v256 = *((_QWORD *)&v502 + 1) + 20 * DWORD1(v503);
        v257 = (int8x16_t)v492[0];
        v258 = *(float *)&v492[1];
        goto LABEL_343;
      }
      v253 = DWORD1(v503) + 1;
      v254 = (int8x16_t *)v492;
    }
    else
    {
      if (DWORD1(v503) != (_DWORD)v503)
      {
        v256 = *((_QWORD *)&v502 + 1) + 20 * DWORD1(v503);
        v257 = v493;
        v258 = v494;
        goto LABEL_343;
      }
      v253 = DWORD1(v503) + 1;
      v254 = &v493;
    }
    v255 = WTF::Vector<WebCore::FloatLine,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v502 + 8, v253, (unint64_t)v254);
    v256 = *((_QWORD *)&v502 + 1) + 20 * DWORD1(v503);
    v257 = *(int8x16_t *)v255;
    v258 = *((float *)v255 + 4);
LABEL_343:
    *(float *)(v256 + 16) = v258;
    *(int8x16_t *)v256 = v257;
    ++DWORD1(v503);
    v259 = v241;
    do
    {
      v260 = v259;
      v261 = *((_QWORD *)v259 + 4);
      if (!v261)
        break;
      v259 = *(WebCore::RenderGrid **)(v261 + 8);
      if (!v259)
        break;
    }
    while (*((_BYTE *)v259 + 46) == 12
         && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v260 + 11) + 40) + 80) + 258));
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v260 + 11) + 40) + 80) + 260))
      goto LABEL_492;
    v263 = *(float *)&v493.i32[1];
    v262 = *(float *)v493.i32;
    if (v236)
    {
      *(_QWORD *)&v492[0] = __PAIR64__(LODWORD(v239), LODWORD(v238));
      *((_QWORD *)&v492[0] + 1) = v467;
      v492[1] = vextq_s8(v493, v493, 8uLL);
      if (DWORD1(v504) == (_DWORD)v504)
      {
        v264 = (__int128 *)WTF::Vector<WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v503 + 8, DWORD1(v504) + 1, (unint64_t)v492);
        v265 = (_OWORD *)(*((_QWORD *)&v503 + 1) + 32 * DWORD1(v504));
        v266 = *v264;
        v267 = v264[1];
      }
      else
      {
        v265 = (_OWORD *)(*((_QWORD *)&v503 + 1) + 32 * DWORD1(v504));
        v266 = v492[0];
        v267 = v492[1];
      }
      *v265 = v266;
      v265[1] = v267;
      ++DWORD1(v504);
      v262 = v262 + (float)((float)(v262 - v238) * -0.5);
      v263 = v263 + (float)((float)(v263 - v239) * -0.5);
    }
    if (v236 < v459 && v236 < v486)
    {
      v268 = *((_DWORD *)v484 + v236);
      v269 = *((_DWORD *)v240 + v236);
      v125 = __OFADD__(v269, v268);
      v270 = v269 + v268;
      v271 = (v269 >> 31) + 0x7FFFFFFF;
      if (v125)
        v270 = v271;
      WebCore::InspectorOverlay::buildGridOverlay(WebCore::InspectorOverlay::Grid const&,BOOL)::$_2::operator()((float *)v488, (uint64_t)v507, (float)v270 * 0.015625);
      if (*(_BYTE *)(a3 + 18))
      {
        v272 = vabds_f32(*(float *)v488, *(float *)&v488[1]) > vabds_f32(*((float *)v488 + 1), *((float *)&v488[1] + 1));
        v275 = *(float *)v488
             + (float)((float)((float)(*(float *)&v488[1] - *(float *)v488) * (float)(v31 - *((float *)v488 + 1)))
                     / (float)(*((float *)&v488[1] + 1) - *((float *)v488 + 1)));
        v276 = *(float *)v488
             + (float)((float)((float)(*(float *)&v488[1] - *(float *)v488) * (float)(v82 - *((float *)v488 + 1)))
                     / (float)(*((float *)&v488[1] + 1) - *((float *)v488 + 1)));
        v277 = v469 + (float)((float)(v275 - v276) * (float)(v275 - v276));
        if (v272)
        {
          v273 = *((float *)v488 + 1)
               + (float)((float)((float)(v242 - *(float *)v488)
                               * (float)(*((float *)&v488[1] + 1) - *((float *)v488 + 1)))
                       / (float)(*(float *)&v488[1] - *(float *)v488));
          v274 = *((float *)v488 + 1)
               + (float)((float)((float)(v83 - *(float *)v488) * (float)(*((float *)&v488[1] + 1) - *((float *)v488 + 1)))
                       / (float)(*(float *)&v488[1] - *(float *)v488));
          v277 = v468 + (float)((float)(v273 - v274) * (float)(v273 - v274));
          v278 = v242;
        }
        else
        {
          v278 = *(float *)v488
               + (float)((float)((float)(*(float *)&v488[1] - *(float *)v488) * (float)(v31 - *((float *)v488 + 1)))
                       / (float)(*((float *)&v488[1] + 1) - *((float *)v488 + 1)));
        }
        if (v272)
          v279 = *((float *)v488 + 1)
               + (float)((float)((float)(v242 - *(float *)v488)
                               * (float)(*((float *)&v488[1] + 1) - *((float *)v488 + 1)))
                       / (float)(*(float *)&v488[1] - *(float *)v488));
        else
          v279 = v31;
        if (v272)
        {
          v276 = v83;
          v280 = *((float *)v488 + 1)
               + (float)((float)((float)(v83 - *(float *)v488) * (float)(*((float *)&v488[1] + 1) - *((float *)v488 + 1)))
                       / (float)(*(float *)&v488[1] - *(float *)v488));
        }
        else
        {
          v280 = v82;
        }
        *(_QWORD *)&v492[0] = __PAIR64__(LODWORD(v279), LODWORD(v278));
        *((_QWORD *)&v492[0] + 1) = __PAIR64__(LODWORD(v280), LODWORD(v276));
        LODWORD(v492[1]) = sqrtf(v277);
        if (DWORD1(v503) == (_DWORD)v503)
        {
          v281 = DWORD1(v503) + 1;
          v282 = (WTF::StringImpl **)v492;
LABEL_373:
          v283 = WTF::Vector<WebCore::FloatLine,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v502 + 8, v281, (unint64_t)v282);
          v284 = *((_QWORD *)&v502 + 1) + 20 * DWORD1(v503);
          v285 = *(_OWORD *)v283;
          v286 = *((_DWORD *)v283 + 4);
          goto LABEL_376;
        }
        v284 = *((_QWORD *)&v502 + 1) + 20 * DWORD1(v503);
        v285 = v492[0];
        v286 = v492[1];
      }
      else
      {
        if (DWORD1(v503) == (_DWORD)v503)
        {
          v281 = DWORD1(v503) + 1;
          v282 = v488;
          goto LABEL_373;
        }
        v284 = *((_QWORD *)&v502 + 1) + 20 * DWORD1(v503);
        v285 = *(_OWORD *)v488;
        v286 = v489;
      }
LABEL_376:
      *(_DWORD *)(v284 + 16) = v286;
      *(_OWORD *)v284 = v285;
      ++DWORD1(v503);
      v239 = *((float *)v488 + 1);
      v238 = *(float *)v488;
      v467 = v488[1];
      if (*(_BYTE *)(a3 + 19))
      {
        if (v236 >= v482)
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v287 = v475;
        }
        else
        {
          v287 = (WTF::StringImpl *)*((_QWORD *)v480 + v236);
          if (v287)
            *(_DWORD *)v287 += 2;
          v475 = v287;
        }
        v288 = vmla_f32(*(float32x2_t *)v493.i8, (float32x2_t)0xBF000000BF000000, vsub_f32(*(float32x2_t *)v493.i8, (float32x2_t)v488[0]));
        v479 = 0x11040000FFFFFFE6;
        v289 = 3;
        if (v511)
        {
          v289 = 4;
          v290 = 1;
        }
        else
        {
          v290 = 2;
        }
        if (!v512)
          v289 = v290;
        v291 = v460 & 0xFFFFFFFFFFFF0000 | v289;
        v460 = v291 | 0x200;
        WebCore::InspectorOverlayLabel::InspectorOverlayLabel((uint64_t)v492, v287, &v479, v291 | 0x200, v288.f32[0], v288.f32[1]);
        v293 = HIDWORD(v506);
        if (HIDWORD(v506) == (_DWORD)v506)
        {
          v294 = (_OWORD *)WTF::Vector<WebCore::InspectorOverlayLabel,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v505 + 8, HIDWORD(v506) + 1, (unint64_t)v492);
          v295 = HIDWORD(v506);
          v296 = *((_QWORD *)&v505 + 1);
          v297 = *((_QWORD *)&v505 + 1) + 40 * HIDWORD(v506);
          *(_QWORD *)v297 = 0;
          *(_QWORD *)(v297 + 8) = 0;
          v298 = *(_QWORD *)v294;
          *(_QWORD *)v294 = 0;
          *(_QWORD *)v297 = v298;
          LODWORD(v298) = *((_DWORD *)v294 + 2);
          *((_DWORD *)v294 + 2) = 0;
          *(_DWORD *)(v297 + 8) = v298;
          LODWORD(v298) = *((_DWORD *)v294 + 3);
          *((_DWORD *)v294 + 3) = 0;
          *(_DWORD *)(v297 + 12) = v298;
          v299 = *((_QWORD *)v294 + 2);
          *(_QWORD *)(v297 + 24) = 0;
          v300 = (_QWORD *)(v297 + 24);
          *(v300 - 1) = v299;
          v301 = *((_QWORD *)v294 + 3);
          if (v301)
          {
            *v300 = v301;
            *((_QWORD *)v294 + 3) = 0;
          }
          v302 = (_WORD *)(v296 + 40 * v295 + 32);
        }
        else
        {
          v303 = *((_QWORD *)&v505 + 1);
          v304 = *((_QWORD *)&v505 + 1) + 40 * HIDWORD(v506);
          *(_QWORD *)v304 = 0;
          *(_QWORD *)(v304 + 8) = 0;
          v305 = *(_QWORD *)&v492[0];
          *(_QWORD *)&v492[0] = 0;
          *(_QWORD *)v304 = v305;
          LODWORD(v305) = DWORD2(v492[0]);
          DWORD2(v492[0]) = 0;
          *(_DWORD *)(v304 + 8) = v305;
          LODWORD(v305) = HIDWORD(v492[0]);
          HIDWORD(v492[0]) = 0;
          *(_DWORD *)(v304 + 12) = v305;
          v306 = *(_QWORD *)&v492[1];
          *(_QWORD *)(v304 + 24) = 0;
          v307 = (_QWORD *)(v304 + 24);
          *(v307 - 1) = v306;
          if (*((_QWORD *)&v492[1] + 1))
          {
            *v307 = *((_QWORD *)&v492[1] + 1);
            *((_QWORD *)&v492[1] + 1) = 0;
          }
          v302 = (_WORD *)(v303 + 40 * v293 + 32);
          v294 = v492;
        }
        *v302 = *((_WORD *)v294 + 16);
        ++HIDWORD(v506);
        if ((*((_QWORD *)&v492[1] + 1) & 0x8000000000000) != 0)
        {
          v352 = (unsigned int *)(*((_QWORD *)&v492[1] + 1) & 0xFFFFFFFFFFFFLL);
          do
          {
            v353 = __ldaxr(v352);
            v354 = v353 - 1;
          }
          while (__stlxr(v354, v352));
          v240 = v447;
          v241 = v470;
          v242 = v454;
          v237 = v464;
          if (!v354)
          {
            atomic_store(1u, v352);
            WTF::fastFree((WTF *)v352, v292);
          }
        }
        WTF::Vector<WebCore::InspectorOverlayLabel::Content,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v492, v292);
        if ((v479 & 0x8000000000000) != 0)
        {
          v355 = (unsigned int *)(v479 & 0xFFFFFFFFFFFFLL);
          do
          {
            v356 = __ldaxr(v355);
            v357 = v356 - 1;
          }
          while (__stlxr(v357, v355));
          v240 = v447;
          v241 = v470;
          v242 = v454;
          v237 = v464;
          if (!v357)
          {
            atomic_store(1u, v355);
            WTF::fastFree((WTF *)v355, v243);
          }
        }
        v308 = v475;
        v475 = 0;
        if (v308)
        {
          if (*(_DWORD *)v308 == 2)
            WTF::StringImpl::destroy(v308, (WTF::StringImpl *)v243);
          else
            *(_DWORD *)v308 -= 2;
        }
      }
      goto LABEL_399;
    }
    v239 = *(float *)&v493.i32[1];
    v238 = *(float *)v493.i32;
    v467 = (WTF::StringImpl *)v493.i64[1];
LABEL_399:
    v488[0] = 0;
    v488[1] = 0;
    v489 = 0;
    v490 = 1;
    if (*(_BYTE *)(a3 + 17))
    {
      LODWORD(v492[0]) = v236 + 1;
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<unsigned int,void>>((uint64_t *)v488, (unsigned int *)v492);
      if (v236 <= v482)
      {
        LOWORD(v475) = 8195;
        LODWORD(v492[0]) = v236 + ~v482;
        WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char16_t,void>,WTF::StringTypeAdapter<int,void>>((WTF::StringBuilder *)v488, &v475, (unsigned int *)v492);
      }
    }
    if (!*(_BYTE *)(a3 + 16))
      goto LABEL_441;
    WTF::HashMap<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t)v492, v483, v236);
    v309 = *(WTF **)&v492[0];
    if (!HIDWORD(v492[0]))
      goto LABEL_439;
    v310 = 8 * HIDWORD(v492[0]);
    v311 = v310;
    v312 = *(uint64_t **)&v492[0];
    do
    {
      v313 = *v312;
      if (*v312)
        *(_DWORD *)v313 += 2;
      if (!v489)
        goto LABEL_411;
      v314 = WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)v488);
      if (v314)
      {
        *(_DWORD *)v314 = 539107337;
        *(_WORD *)(v314 + 4) = 8201;
      }
      if (!v489)
      {
LABEL_411:
        if (!v488[1])
        {
          if (v313)
            *(_DWORD *)v313 += 2;
          v315 = v488[0];
          v488[0] = (WTF::StringImpl *)v313;
          if (v315)
          {
            if (*(_DWORD *)v315 == 2)
            {
              WTF::StringImpl::destroy(v315, (WTF::StringImpl *)v243);
              if (v313)
                goto LABEL_418;
              goto LABEL_430;
            }
            *(_DWORD *)v315 -= 2;
          }
          if (v313)
          {
LABEL_418:
            v316 = *(_DWORD *)(v313 + 4);
            goto LABEL_419;
          }
LABEL_430:
          v316 = 0;
LABEL_419:
          v489 = v316;
          if (!v313)
            goto LABEL_422;
          goto LABEL_420;
        }
      }
      if (v313 && (*(_BYTE *)(v313 + 16) & 4) == 0)
      {
        WTF::StringBuilder::append();
      }
      else
      {
        WTF::StringBuilder::append();
        if (!v313)
          goto LABEL_422;
      }
LABEL_420:
      if (*(_DWORD *)v313 == 2)
        WTF::StringImpl::destroy((WTF::StringImpl *)v313, (WTF::StringImpl *)v243);
      else
        *(_DWORD *)v313 -= 2;
LABEL_422:
      ++v312;
      v311 -= 8;
    }
    while (v311);
    v317 = (WTF::StringImpl **)v309;
    v241 = v470;
    v237 = v464;
    do
    {
      v318 = *v317;
      *v317 = 0;
      if (v318)
      {
        if (*(_DWORD *)v318 == 2)
          WTF::StringImpl::destroy(v318, (WTF::StringImpl *)v243);
        else
          *(_DWORD *)v318 -= 2;
      }
      ++v317;
      v310 -= 8;
    }
    while (v310);
LABEL_439:
    if (v309)
      WTF::fastFree(v309, v243);
LABEL_441:
    if (v489)
    {
      v319 = v488[0];
      if (v488[0]
        || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)v488),
            WTF::StringBuilder::reifyString((WTF::StringBuilder *)v488),
            (v319 = v488[0]) != 0))
      {
        *(_DWORD *)v319 += 2;
      }
      if (v511)
        v320 = 3;
      else
        v320 = 4;
      if (v511)
        v321 = 2;
      else
        v321 = 1;
      if (v512)
        v322 = v320;
      else
        v322 = v321;
      v323 = 768;
      if (v510)
        v324 = 768;
      else
        v324 = 256;
      if (v510)
        v323 = 256;
      if (v452 != v236)
        v323 = 512;
      if (v236)
        v325 = v323;
      else
        v325 = v324;
      if ((float)((float)((float)(v262 - WebCore::InspectorOverlayLabel::expectedSize(v319, v322)) + v450) - v242) < 0.0)
      {
        if (v511)
          v326 = 4;
        else
          v326 = 3;
        if (v511)
          v327 = 1;
        else
          v327 = 2;
        if (v512)
          LOBYTE(v322) = v326;
        else
          LOBYTE(v322) = v327;
      }
      v478 = 0x11040000FFFFFFE6;
      v465 = v325 | v465 & 0xFFFFFFFFFFFF0000 | v322;
      WebCore::InspectorOverlayLabel::InspectorOverlayLabel((uint64_t)v492, v319, &v478, v325 | v322, v262, v263);
      v329 = HIDWORD(v506);
      if (HIDWORD(v506) == (_DWORD)v506)
      {
        v330 = (_OWORD *)WTF::Vector<WebCore::InspectorOverlayLabel,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v505 + 8, HIDWORD(v506) + 1, (unint64_t)v492);
        v331 = HIDWORD(v506);
        v332 = *((_QWORD *)&v505 + 1);
        v333 = *((_QWORD *)&v505 + 1) + 40 * HIDWORD(v506);
        *(_QWORD *)v333 = 0;
        *(_QWORD *)(v333 + 8) = 0;
        v334 = *(_QWORD *)v330;
        *(_QWORD *)v330 = 0;
        *(_QWORD *)v333 = v334;
        LODWORD(v334) = *((_DWORD *)v330 + 2);
        *((_DWORD *)v330 + 2) = 0;
        *(_DWORD *)(v333 + 8) = v334;
        LODWORD(v334) = *((_DWORD *)v330 + 3);
        *((_DWORD *)v330 + 3) = 0;
        *(_DWORD *)(v333 + 12) = v334;
        v335 = *((_QWORD *)v330 + 2);
        *(_QWORD *)(v333 + 24) = 0;
        v336 = (_QWORD *)(v333 + 24);
        *(v336 - 1) = v335;
        v337 = *((_QWORD *)v330 + 3);
        v237 = v464;
        if (v337)
        {
          *v336 = v337;
          *((_QWORD *)v330 + 3) = 0;
        }
        v338 = (_WORD *)(v332 + 40 * v331 + 32);
      }
      else
      {
        v339 = *((_QWORD *)&v505 + 1);
        v340 = *((_QWORD *)&v505 + 1) + 40 * HIDWORD(v506);
        *(_QWORD *)v340 = 0;
        *(_QWORD *)(v340 + 8) = 0;
        v341 = *(_QWORD *)&v492[0];
        *(_QWORD *)&v492[0] = 0;
        *(_QWORD *)v340 = v341;
        LODWORD(v341) = DWORD2(v492[0]);
        DWORD2(v492[0]) = 0;
        *(_DWORD *)(v340 + 8) = v341;
        LODWORD(v341) = HIDWORD(v492[0]);
        HIDWORD(v492[0]) = 0;
        *(_DWORD *)(v340 + 12) = v341;
        v342 = *(_QWORD *)&v492[1];
        *(_QWORD *)(v340 + 24) = 0;
        v343 = (_QWORD *)(v340 + 24);
        *(v343 - 1) = v342;
        v237 = v464;
        if (*((_QWORD *)&v492[1] + 1))
        {
          *v343 = *((_QWORD *)&v492[1] + 1);
          *((_QWORD *)&v492[1] + 1) = 0;
        }
        v338 = (_WORD *)(v339 + 40 * v329 + 32);
        v330 = v492;
      }
      *v338 = *((_WORD *)v330 + 16);
      ++HIDWORD(v506);
      if ((*((_QWORD *)&v492[1] + 1) & 0x8000000000000) != 0)
      {
        v346 = (unsigned int *)(*((_QWORD *)&v492[1] + 1) & 0xFFFFFFFFFFFFLL);
        do
        {
          v347 = __ldaxr(v346);
          v348 = v347 - 1;
        }
        while (__stlxr(v348, v346));
        v240 = v447;
        v241 = v470;
        v242 = v454;
        v237 = v464;
        if (!v348)
        {
          atomic_store(1u, v346);
          WTF::fastFree((WTF *)v346, v328);
        }
      }
      WTF::Vector<WebCore::InspectorOverlayLabel::Content,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v492, v328);
      if ((v478 & 0x8000000000000) != 0)
      {
        v349 = (unsigned int *)(v478 & 0xFFFFFFFFFFFFLL);
        do
        {
          v350 = __ldaxr(v349);
          v351 = v350 - 1;
        }
        while (__stlxr(v351, v349));
        v240 = v447;
        v241 = v470;
        v242 = v454;
        v237 = v464;
        if (!v351)
        {
          atomic_store(1u, v349);
          WTF::fastFree((WTF *)v349, v243);
        }
      }
      if (v319)
      {
        if (*(_DWORD *)v319 == 2)
          WTF::StringImpl::destroy(v319, (WTF::StringImpl *)v243);
        else
          *(_DWORD *)v319 -= 2;
      }
    }
    v344 = v488[1];
    v488[1] = 0;
    if (v344)
    {
      if (*(_DWORD *)v344 == 2)
        WTF::StringImpl::destroy(v344, (WTF::StringImpl *)v243);
      else
        *(_DWORD *)v344 -= 2;
    }
    v345 = v488[0];
    v488[0] = 0;
    if (v345)
    {
      if (*(_DWORD *)v345 == 2)
        WTF::StringImpl::destroy(v345, (WTF::StringImpl *)v243);
      else
        *(_DWORD *)v345 -= 2;
    }
LABEL_492:
    ++v236;
  }
  while (v236 != v237);
  if (*(_BYTE *)(a3 + 20) && !WebCore::RenderGrid::isMasonry(v241))
  {
    v358 = v451[8] & 0xFFFFFFFFFFFFLL;
    if ((*(_BYTE *)(v358 + 0x2D) & 2) != 0)
      v358 = *(_QWORD *)(*(_QWORD *)((v451[8] & 0xFFFFFFFFFFFFLL) + 0x20) + 8);
    v359 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v358 + 88) + 40) + 80) + 72);
    if (!v359)
    {
      v360 = 0;
      v361 = 0;
      goto LABEL_521;
    }
    v361 = *(unsigned int *)(v359 - 4);
    v362 = v359 + 32 * v361;
    if (*(_DWORD *)(v359 - 12))
    {
      v360 = v359;
      if ((_DWORD)v361)
      {
        v440 = 32 * v361;
        v360 = v359;
        while ((unint64_t)(*(_QWORD *)v360 + 1) <= 1)
        {
          v360 += 32;
          v440 -= 32;
          if (!v440)
          {
            v360 = v362;
            break;
          }
        }
      }
    }
    else
    {
      v360 = v359 + 32 * v361;
LABEL_521:
      v362 = v359 + 32 * v361;
    }
    if (v359)
      v363 = v359 + 32 * *(unsigned int *)(v359 - 4);
    else
      v363 = 0;
    v364 = v462;
    while (v360 != v363)
    {
      v365 = *(unsigned int *)(v360 + 8);
      if (v364 <= v365)
      {
        __break(0xC471u);
        JUMPOUT(0x195DD2A14);
      }
      WebCore::InspectorOverlay::buildGridOverlay(WebCore::InspectorOverlay::Grid const&,BOOL)::$_1::operator()((float *)v488, (uint64_t)v508, (float)*((int *)v461 + v365) * 0.015625);
      v366 = (*(_DWORD *)(v360 + 12) - 1);
      if (v364 <= v366)
      {
        __break(0xC471u);
        JUMPOUT(0x195DD2A1CLL);
      }
      if (v501 <= v366)
      {
        __break(0xC471u);
        JUMPOUT(0x195DD2A24);
      }
      v367 = *((_DWORD *)v461 + v366);
      v368 = *((_DWORD *)v499 + v366);
      v125 = __OFADD__(v367, v368);
      v369 = v367 + v368;
      if (v125)
        v369 = (v367 >> 31) + 0x7FFFFFFF;
      WebCore::InspectorOverlay::buildGridOverlay(WebCore::InspectorOverlay::Grid const&,BOOL)::$_1::operator()((float *)v493.i32, (uint64_t)v508, (float)v369 * 0.015625);
      v370 = *(unsigned int *)(v360 + 20);
      if (v449 <= v370)
      {
        __break(0xC471u);
        JUMPOUT(0x195DD2A2CLL);
      }
      WebCore::InspectorOverlay::buildGridOverlay(WebCore::InspectorOverlay::Grid const&,BOOL)::$_2::operator()((float *)&v475, (uint64_t)v507, (float)*((int *)v447 + v370) * 0.015625);
      v371 = (*(_DWORD *)(v360 + 24) - 1);
      if (v449 <= v371)
      {
        __break(0xC471u);
        JUMPOUT(0x195DD2A34);
      }
      v364 = v462;
      if (v486 <= v371)
      {
        __break(0xC471u);
        JUMPOUT(0x195DD2A3CLL);
      }
      v372 = *((_DWORD *)v447 + v371);
      v373 = *((_DWORD *)v484 + v371);
      v125 = __OFADD__(v372, v373);
      v374 = v372 + v373;
      if (v125)
        v374 = (v372 >> 31) + 0x7FFFFFFF;
      WebCore::InspectorOverlay::buildGridOverlay(WebCore::InspectorOverlay::Grid const&,BOOL)::$_2::operator()(&v471, (uint64_t)v507, (float)v374 * 0.015625);
      v376 = *(float *)v488;
      v377 = *((float *)&v488[1] + 1);
      v378 = *(float *)v488 - *(float *)&v488[1];
      v379 = *((float *)&v475 + 1) - v477;
      v380 = *((float *)v488 + 1) - *((float *)&v488[1] + 1);
      v381 = *(float *)&v475 - v476;
      v382 = (float)((float)(*(float *)v488 - *(float *)&v488[1]) * (float)(*((float *)&v475 + 1) - v477))
           - (float)((float)(*((float *)v488 + 1) - *((float *)&v488[1] + 1)) * (float)(*(float *)&v475 - v476));
      v383 = -(float)(*((float *)v488 + 1) * *(float *)&v488[1]);
      if (v382 == 0.0)
        v384 = 0;
      else
        v384 = COERCE_UNSIGNED_INT((float)((float)((float)((float)(*(float *)v488 * *((float *)&v488[1] + 1))- (float)(*((float *)v488 + 1) * *(float *)&v488[1]))* v381)- (float)((float)((float)(*(float *)&v475 * v477) - (float)(*((float *)&v475 + 1) * v476)) * v378))/ v382) | ((unint64_t)COERCE_UNSIGNED_INT((float)((float)((float)((float)(*(float *)v488 * *((float *)&v488[1] + 1))- (float)(*((float *)v488 + 1) * *(float *)&v488[1]))* v379)- (float)((float)((float)(*(float *)&v475 * v477)- (float)(*((float *)&v475 + 1) * v476))* v380))/ v382) << 32);
      v385 = *(float *)v493.i32 - *(float *)&v493.i32[2];
      v386 = *(float *)&v493.i32[1] - *(float *)&v493.i32[3];
      v387 = (float)((float)(*(float *)v493.i32 - *(float *)&v493.i32[2]) * v379)
           - (float)((float)(*(float *)&v493.i32[1] - *(float *)&v493.i32[3]) * v381);
      if (v387 == 0.0)
        v388 = 0;
      else
        v388 = COERCE_UNSIGNED_INT((float)((float)((float)((float)(*(float *)v493.i32 * *(float *)&v493.i32[3])- (float)(*(float *)&v493.i32[1] * *(float *)&v493.i32[2]))* v381)- (float)((float)((float)(*(float *)&v475 * v477) - (float)(*((float *)&v475 + 1) * v476)) * v385))/ v387) | ((unint64_t)COERCE_UNSIGNED_INT((float)((float)((float)((float)(*(float *)v493.i32 * *(float *)&v493.i32[3])- (float)(*(float *)&v493.i32[1]* *(float *)&v493.i32[2]))* v379)- (float)((float)((float)(*(float *)&v475 * v477)- (float)(*((float *)&v475 + 1) * v476))* v386))/ v387) << 32);
      v389 = v471;
      v390 = v474;
      v391 = v472 - v474;
      v392 = v471 - v473;
      v393 = (float)((float)(v471 - v473) * (float)-v386) + (float)(v385 * (float)(v472 - v474));
      v394 = -(float)(v472 * v473);
      if (v393 == 0.0)
        v395 = 0;
      else
        v395 = COERCE_UNSIGNED_INT((float)((float)((float)((float)(*(float *)v493.i32 * *(float *)&v493.i32[3])- (float)(*(float *)&v493.i32[1] * *(float *)&v493.i32[2]))* v392)- (float)((float)((float)(v471 * v474) - (float)(v472 * v473)) * v385))/ v393) | ((unint64_t)COERCE_UNSIGNED_INT((float)((float)((float)((float)(*(float *)v493.i32 * *(float *)&v493.i32[3])- (float)(*(float *)&v493.i32[1]* *(float *)&v493.i32[2]))* v391)- (float)((float)((float)(v471 * v474) - (float)(v472 * v473)) * v386))/ v393) << 32);
      v396 = (float)(v392 * (float)-v380) + (float)(v378 * v391);
      if (v396 != 0.0 && v382 != 0.0 && v387 != 0.0 && v393 != 0.0)
      {
        memset(v492, 0, 40);
        v397 = *(_DWORD **)v360;
        if (*(_QWORD *)v360)
          *v397 += 2;
        *(_QWORD *)&v492[0] = v397;
        *((_QWORD *)&v492[0] + 1) = v384;
        *(_QWORD *)&v492[1] = v388;
        *((_QWORD *)&v492[1] + 1) = v395;
        *(float *)&v492[2] = (float)((float)((float)(v383 + (float)(v376 * v377)) * v392)
                                   - (float)((float)(v394 + (float)(v389 * v390)) * v378))
                           / v396;
        *((float *)&v492[2] + 1) = (float)((float)((float)(v383 + (float)(v376 * v377)) * v391)
                                         - (float)((float)(v394 + (float)(v389 * v390)) * v380))
                                 / v396;
        v398 = DWORD1(v505);
        if (DWORD1(v505) == (_DWORD)v505)
        {
          v399 = WTF::Vector<WebCore::InspectorOverlayHighlight::GridHighlightOverlay::Area,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v504 + 2, DWORD1(v505) + 1, (unint64_t)v492);
          v400 = DWORD1(v505);
          v401 = *((_QWORD *)&v504 + 1);
          v402 = *(_DWORD **)v399;
          if (*(_QWORD *)v399)
            *v402 += 2;
          v403 = v401 + 40 * v400;
          *(_QWORD *)v403 = v402;
          v404 = *(_OWORD *)(v399 + 8);
          v405 = *(_OWORD *)(v399 + 24);
        }
        else
        {
          v406 = *((_QWORD *)&v504 + 1);
          if (v397)
            *v397 += 2;
          *(_QWORD *)(v406 + 40 * v398) = v397;
          v404 = *(_OWORD *)((char *)v492 + 8);
          v405 = *(_OWORD *)((char *)&v492[1] + 8);
          v403 = v406 + 40 * v398;
        }
        *(_OWORD *)(v403 + 24) = v405;
        *(_OWORD *)(v403 + 8) = v404;
        ++DWORD1(v505);
        v407 = *(WTF::StringImpl **)&v492[0];
        *(_QWORD *)&v492[0] = 0;
        if (v407)
        {
          if (*(_DWORD *)v407 == 2)
            WTF::StringImpl::destroy(v407, v375);
          else
            *(_DWORD *)v407 -= 2;
        }
      }
      v408 = v360 + 32;
      v360 = v362;
      if (v408 != v362)
      {
        v360 = v408;
        while ((unint64_t)(*(_QWORD *)v360 + 1) <= 1)
        {
          v360 += 32;
          if (v360 == v362)
          {
            v360 = v362;
            break;
          }
        }
      }
    }
  }
  *(_BYTE *)(WebCore::InspectorOverlayHighlight::GridHighlightOverlay::GridHighlightOverlay(v445, (uint64_t *)&v502) + 72) = 1;
  if (v482)
  {
    v434 = v480;
    v435 = 8 * v482;
    do
    {
      v436 = *(WTF::StringImpl **)v434;
      *(_QWORD *)v434 = 0;
      if (v436)
      {
        if (*(_DWORD *)v436 == 2)
          WTF::StringImpl::destroy(v436, v409);
        else
          *(_DWORD *)v436 -= 2;
      }
      v434 = (WTF *)((char *)v434 + 8);
      v435 -= 8;
    }
    while (v435);
  }
  v410 = v480;
  if (v480)
  {
    v480 = 0;
    v481 = 0;
    WTF::fastFree(v410, v409);
  }
  v411 = v483;
  if (v483)
  {
    v412 = *(unsigned int *)(v483 - 4);
    if ((_DWORD)v412)
    {
      for (i = 0; i != v412; ++i)
      {
        if (*(_DWORD *)(v411 + 24 * i) != -2)
        {
          v414 = v411 + 24 * i;
          v415 = (WTF::StringImpl ***)(v414 + 8);
          v416 = *(unsigned int *)(v414 + 20);
          if ((_DWORD)v416)
          {
            v418 = *v415;
            v419 = 8 * v416;
            do
            {
              v420 = *v418;
              *v418 = 0;
              if (v420)
              {
                if (*(_DWORD *)v420 == 2)
                  WTF::StringImpl::destroy(v420, v409);
                else
                  *(_DWORD *)v420 -= 2;
              }
              ++v418;
              v419 -= 8;
            }
            while (v419);
          }
          v417 = (WTF *)*v415;
          if (*v415)
          {
            *v415 = 0;
            *(_DWORD *)(v411 + 24 * i + 16) = 0;
            WTF::fastFree(v417, v409);
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v411 - 16), v409);
  }
  v421 = v484;
  if (v484)
  {
    v484 = 0;
    v485 = 0;
    WTF::fastFree(v421, v409);
  }
  if (v497)
  {
    v437 = v495;
    v438 = 8 * v497;
    do
    {
      v439 = *v437;
      *v437 = 0;
      if (v439)
      {
        if (*(_DWORD *)v439 == 2)
          WTF::StringImpl::destroy(v439, v409);
        else
          *(_DWORD *)v439 -= 2;
      }
      ++v437;
      v438 -= 8;
    }
    while (v438);
  }
  v422 = (WTF *)v495;
  if (v495)
  {
    v495 = 0;
    v496 = 0;
    WTF::fastFree(v422, v409);
  }
  v423 = v498;
  if (v498)
  {
    v424 = *(unsigned int *)(v498 - 4);
    if ((_DWORD)v424)
    {
      for (j = 0; j != v424; ++j)
      {
        if (*(_DWORD *)(v423 + 24 * j) != -2)
        {
          v426 = v423 + 24 * j;
          v427 = (WTF::StringImpl ***)(v426 + 8);
          v428 = *(unsigned int *)(v426 + 20);
          if ((_DWORD)v428)
          {
            v430 = *v427;
            v431 = 8 * v428;
            do
            {
              v432 = *v430;
              *v430 = 0;
              if (v432)
              {
                if (*(_DWORD *)v432 == 2)
                  WTF::StringImpl::destroy(v432, v409);
                else
                  *(_DWORD *)v432 -= 2;
              }
              ++v430;
              v431 -= 8;
            }
            while (v431);
          }
          v429 = (WTF *)*v427;
          if (*v427)
          {
            *v427 = 0;
            *(_DWORD *)(v423 + 24 * j + 16) = 0;
            WTF::fastFree(v429, v409);
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v423 - 16), v409);
  }
  v433 = v499;
  if (v499)
  {
    v499 = 0;
    v500 = 0;
    WTF::fastFree(v433, v409);
  }
  WebCore::InspectorOverlayHighlight::GridHighlightOverlay::~GridHighlightOverlay((WebCore::InspectorOverlayHighlight::GridHighlightOverlay *)&v502, v409);
  v26 = (uint64_t)v446;
  v42 = v447;
  v33 = v461;
LABEL_617:
  result = WTF::fastFree(v42, v41);
  if (v33)
LABEL_618:
    result = WTF::fastFree(v33, v28);
LABEL_619:
  if (*(_DWORD *)(v26 + 8) == 1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  --*(_DWORD *)(v26 + 8);
  return result;
}

