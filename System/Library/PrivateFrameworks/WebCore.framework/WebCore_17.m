void sub_194755220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, CFTypeRef cf, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, WTF::StringImpl *a20,CFTypeRef a21,WTF::StringImpl *a22)
{
  unsigned __int8 **v22;

  if (v22)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v22);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::MediaPlayerPrivateAVFoundationObjC::trackIsPlayable(WebCore::MediaPlayerPrivateAVFoundationObjC *this, AVAssetTrack *a2)
{
  uint64_t v2;
  uint64_t v5;
  int v7;
  uint64_t v8;
  PAL *v9;
  PAL *v10;
  const opaqueCMFormatDescription *v11;
  unsigned int v12;
  const opaqueCMFormatDescription *v13;
  unsigned int v14;
  const opaqueCMFormatDescription *v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  NSObject *v30;
  uint64_t v31;
  void *v32;
  char *v33;
  unsigned __int8 *v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int *v39;
  int v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  int v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  NSObject *v56;
  uint64_t v57;
  void *v58;
  char *v59;
  unsigned __int8 *v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  unsigned int v66;
  uint64_t v67;
  WTF::Logger *v68;
  uint64_t v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::Logger *v74;
  uint64_t v75;
  WTF::StringImpl **v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  WTF::Logger *v87;
  uint64_t v88;
  uint64_t v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  WTF::Logger *v93;
  uint64_t v94;
  WTF::StringImpl **v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  int v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  uint64_t v105;
  uint64_t v106;
  unsigned int v107;
  const char *v108;
  uint64_t v109;
  const char *v110;
  uint64_t v111;
  unsigned int v112;
  WTF::Logger *v113;
  uint64_t v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119;
  WTF::StringImpl *v120;
  char v121[8];
  __int128 buf;
  const char *v123;
  WTF::StringImpl *v124;
  int v125;
  WTF::StringImpl *v126;
  int v127;
  WTF::StringImpl *v128[3];

  v128[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 11);
  if (!v2)
    return 0;
  v5 = *((_QWORD *)this + 12);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v2);
LABEL_6:
  if (*(_QWORD *)(v2 + 24))
    ++*(_QWORD *)(v2 + 8);
  else
    v5 = 0;
  v7 = __ldxr((unsigned __int8 *)v2);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v2))
    {
      if (v5)
        goto LABEL_12;
      return 0;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
  if (v5)
  {
LABEL_12:
    if (*((_BYTE *)this + 24)
      && (v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v5 + 8) + 8) + 496))(*(_QWORD *)(*(_QWORD *)(v5 + 8) + 8)),
          !WebCore::assetTrackMeetsHardwareDecodeRequirements(a2, v8))
      || (v9 = -[NSArray firstObject](-[AVAssetTrack formatDescriptions](a2, "formatDescriptions"), "firstObject"),
          (v10 = v9) == 0))
    {
      v17 = 0;
LABEL_204:
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v5);
      return v17;
    }
    CFRetain(v9);
    v12 = PAL::softLinkCoreMediaCMFormatDescriptionGetMediaType[0](v10, v11);
    v14 = PAL::softLinkCoreMediaCMFormatDescriptionGetMediaSubType[0](v10, v13);
    v112 = v14;
    v16 = PAL::softLinkCoreMediaCMFormatDescriptionGetMediaType[0](v10, v15);
    if (v16 > 1936684397)
    {
      if (v16 > 1953325923)
      {
        if (v16 == 1953325924)
          goto LABEL_202;
        if (v16 == 1986618469)
        {
          v37 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v5 + 8) + 8) + 528))(*(_QWORD *)(*(_QWORD *)(v5 + 8) + 8));
          if (!*(_BYTE *)(v37 + 16))
            goto LABEL_202;
          v38 = *(unsigned int *)(v37 + 12);
          if ((_DWORD)v38)
          {
            v39 = *(int **)v37;
            do
            {
              v40 = *v39++;
              if (v40 == v14)
                goto LABEL_202;
            }
            while (--v38);
          }
          v41 = *((_QWORD *)this + 35);
          v42 = (WTF::StringImpl *)*((_QWORD *)this + 36);
          *(_QWORD *)&buf = "MediaPlayerPrivateAVFoundationObjC";
          *((_QWORD *)&buf + 1) = 35;
          v123 = "trackIsPlayable";
          v124 = v42;
          if (*(_BYTE *)(v41 + 12))
            WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [30],WebCore::FourCC,char [48]>((uint64_t)&WebCore::LogMedia, (WTF::Logger::LogSiteIdentifier *)&buf, "Video track with codec type '", &v112);
          goto LABEL_196;
        }
        goto LABEL_80;
      }
      if (v16 == 1936684398)
      {
        v43 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v5 + 8) + 8) + 536))(*(_QWORD *)(*(_QWORD *)(v5 + 8) + 8));
        if (!*(_BYTE *)(v43 + 16))
          goto LABEL_202;
        v44 = *(unsigned int *)(v43 + 12);
        if ((_DWORD)v44)
        {
          v45 = *(int **)v43;
          do
          {
            v46 = *v45++;
            if (v46 == v14)
              goto LABEL_202;
          }
          while (--v44);
        }
        v47 = *((_QWORD *)this + 35);
        v48 = (WTF::StringImpl *)*((_QWORD *)this + 36);
        *(_QWORD *)&buf = "MediaPlayerPrivateAVFoundationObjC";
        *((_QWORD *)&buf + 1) = 35;
        v123 = "trackIsPlayable";
        v124 = v48;
        if (*(_BYTE *)(v47 + 12))
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [30],WebCore::FourCC,char [48]>((uint64_t)&WebCore::LogMedia, (WTF::Logger::LogSiteIdentifier *)&buf, "Audio track with codec type '", &v112);
        goto LABEL_196;
      }
      v18 = 1952807028;
    }
    else
    {
      if (v16 <= 1836415095)
      {
        if (v16 != 1668047728)
        {
          if (v16 == 1835365473)
            goto LABEL_202;
          goto LABEL_80;
        }
        goto LABEL_30;
      }
      if (v16 == 1836415096)
        goto LABEL_202;
      v18 = 1935832172;
    }
    if (v16 == v18)
    {
LABEL_30:
      v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v5 + 8) + 8) + 544))(*(_QWORD *)(*(_QWORD *)(v5 + 8) + 8));
      if (!*(_BYTE *)(v19 + 16))
        goto LABEL_202;
      v20 = *(unsigned int *)(v19 + 12);
      if ((_DWORD)v20)
      {
        v21 = *(int **)v19;
        do
        {
          v22 = *v21++;
          if (v22 == v14)
            goto LABEL_202;
        }
        while (--v20);
      }
      v23 = *((_QWORD *)this + 35);
      v24 = *((_QWORD *)this + 36);
      v108 = "MediaPlayerPrivateAVFoundationObjC";
      v109 = 35;
      v110 = "trackIsPlayable";
      v111 = v24;
      if (*(_BYTE *)(v23 + 12))
      {
        WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v108);
        WTF::String::String((WTF::String *)&v117, "Text track with codec type '");
        BYTE4(buf) = 0;
        LODWORD(buf) = bswap32(v14);
        WTF::String::String((WTF::String *)&v116, (const char *)&buf);
        WTF::String::String((WTF::String *)&v115, "' not contained in allowed codec list; blocking");
        v113 = v117;
        *(_QWORD *)v121 = v116;
        *(_QWORD *)&buf = v118;
        v120 = v115;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v113, (uint64_t *)v121, (uint64_t *)&v120, &v119);
        if (!v119)
          goto LABEL_218;
        v26 = v115;
        v115 = 0;
        if (v26)
        {
          if (*(_DWORD *)v26 == 2)
            WTF::StringImpl::destroy(v26, v25);
          else
            *(_DWORD *)v26 -= 2;
        }
        v27 = v116;
        v116 = 0;
        if (v27)
        {
          if (*(_DWORD *)v27 == 2)
            WTF::StringImpl::destroy(v27, v25);
          else
            *(_DWORD *)v27 -= 2;
        }
        v28 = v117;
        v117 = 0;
        if (v28)
        {
          if (*(_DWORD *)v28 == 2)
            WTF::StringImpl::destroy(v28, v25);
          else
            *(_DWORD *)v28 -= 2;
        }
        v29 = v118;
        v118 = 0;
        if (v29)
        {
          if (*(_DWORD *)v29 == 2)
            WTF::StringImpl::destroy(v29, v25);
          else
            *(_DWORD *)v29 -= 2;
        }
        v30 = qword_1ECE7C4A0;
        v31 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)v31)
        {
          WTF::String::utf8();
          v33 = v113 ? (char *)v113 + 16 : 0;
          LODWORD(buf) = 136446210;
          *(_QWORD *)((char *)&buf + 4) = v33;
          _os_log_impl(&dword_1940B8000, v30, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
          v31 = (uint64_t)v113;
          v113 = 0;
          if (v31)
          {
            if (*(_DWORD *)v31 == 1)
              v31 = WTF::fastFree((WTF *)v31, v32);
            else
              --*(_DWORD *)v31;
          }
        }
        if (WebCore::LogMedia && byte_1ECE7C490)
        {
          v34 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
          while (1)
          {
            v35 = *v34;
            if ((v35 & 1) != 0)
              break;
            v36 = __ldaxr(v34);
            if (v36 == v35)
            {
              if (!__stxr(v35 | 1, v34))
              {
                v63 = WTF::Logger::observers((WTF::Logger *)v31);
                v64 = *(unsigned int *)(v63 + 12);
                if ((_DWORD)v64)
                {
                  v65 = *(uint64_t **)v63;
                  v105 = *(_QWORD *)v63 + 8 * v64;
                  v66 = bswap32(v112);
                  do
                  {
                    v67 = *v65;
                    LODWORD(buf) = 0;
                    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v108);
                    LODWORD(v123) = 0;
                    WTF::String::String((WTF::String *)&v124, "Text track with codec type '");
                    v125 = 0;
                    v121[4] = 0;
                    *(_DWORD *)v121 = v66;
                    WTF::String::String((WTF::String *)&v126, v121);
                    v127 = 0;
                    WTF::String::String((WTF::String *)v128, "' not contained in allowed codec list; blocking");
                    v113 = 0;
                    v114 = 0;
                    v68 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x40);
                    LODWORD(v114) = 4;
                    v113 = v68;
                    v69 = HIDWORD(v114);
                    *((_DWORD *)v68 + 4 * HIDWORD(v114)) = buf;
                    v70 = *((_QWORD *)&buf + 1);
                    if (*((_QWORD *)&buf + 1))
                      **((_DWORD **)&buf + 1) += 2;
                    *((_QWORD *)v68 + 2 * v69 + 1) = v70;
                    *((_DWORD *)v68 + 4 * (v69 + 1)) = (_DWORD)v123;
                    v71 = v124;
                    if (v124)
                      *(_DWORD *)v124 += 2;
                    *((_QWORD *)v68 + 2 * (v69 + 1) + 1) = v71;
                    *((_DWORD *)v68 + 4 * (v69 + 2)) = v125;
                    v72 = v126;
                    if (v126)
                      *(_DWORD *)v126 += 2;
                    *((_QWORD *)v68 + 2 * (v69 + 2) + 1) = v72;
                    *((_DWORD *)v68 + 4 * (v69 + 3)) = v127;
                    v73 = v128[0];
                    if (v128[0])
                      *(_DWORD *)v128[0] += 2;
                    *((_QWORD *)v68 + 2 * (v69 + 3) + 1) = v73;
                    HIDWORD(v114) = v69 + 4;
                    (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v67 + 16))(v67, &WebCore::LogMedia, 1, &v113);
                    v74 = v113;
                    if (HIDWORD(v114))
                    {
                      v75 = 16 * HIDWORD(v114);
                      v76 = (WTF::StringImpl **)((char *)v113 + 8);
                      do
                      {
                        v77 = *v76;
                        *v76 = 0;
                        if (v77)
                        {
                          if (*(_DWORD *)v77 == 2)
                            WTF::StringImpl::destroy(v77, (WTF::StringImpl *)v32);
                          else
                            *(_DWORD *)v77 -= 2;
                        }
                        v76 += 2;
                        v75 -= 16;
                      }
                      while (v75);
                      v74 = v113;
                    }
                    if (v74)
                    {
                      v113 = 0;
                      LODWORD(v114) = 0;
                      WTF::fastFree(v74, v32);
                    }
                    v78 = v128[0];
                    v128[0] = 0;
                    if (v78)
                    {
                      if (*(_DWORD *)v78 == 2)
                        WTF::StringImpl::destroy(v78, (WTF::StringImpl *)v32);
                      else
                        *(_DWORD *)v78 -= 2;
                    }
                    v79 = v126;
                    v126 = 0;
                    if (v79)
                    {
                      if (*(_DWORD *)v79 == 2)
                        WTF::StringImpl::destroy(v79, (WTF::StringImpl *)v32);
                      else
                        *(_DWORD *)v79 -= 2;
                    }
                    v80 = v124;
                    v124 = 0;
                    if (v80)
                    {
                      if (*(_DWORD *)v80 == 2)
                        WTF::StringImpl::destroy(v80, (WTF::StringImpl *)v32);
                      else
                        *(_DWORD *)v80 -= 2;
                    }
                    v81 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                    *((_QWORD *)&buf + 1) = 0;
                    if (v81)
                    {
                      if (*(_DWORD *)v81 == 2)
                        WTF::StringImpl::destroy(v81, (WTF::StringImpl *)v32);
                      else
                        *(_DWORD *)v81 -= 2;
                    }
                    ++v65;
                  }
                  while (v65 != (uint64_t *)v105);
                }
                v82 = __ldxr(v34);
                if (v82 == 1)
                {
                  if (!__stlxr(0, v34))
                    break;
                }
                else
                {
                  __clrex();
                }
                WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                break;
              }
            }
            else
            {
              __clrex();
            }
          }
        }
        v102 = v119;
        v119 = 0;
        if (v102)
        {
          if (*(_DWORD *)v102 == 2)
            WTF::StringImpl::destroy(v102, (WTF::StringImpl *)v32);
          else
            *(_DWORD *)v102 -= 2;
        }
      }
LABEL_196:
      v17 = 0;
LABEL_203:
      CFRelease(v10);
      goto LABEL_204;
    }
LABEL_80:
    v49 = *((_QWORD *)this + 35);
    v50 = *((_QWORD *)this + 36);
    v108 = "MediaPlayerPrivateAVFoundationObjC";
    v109 = 35;
    v110 = "trackIsPlayable";
    v111 = v50;
    if (*(_BYTE *)(v49 + 12))
    {
      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v108);
      WTF::String::String((WTF::String *)&v117, "Track with unuexpected media type '");
      BYTE4(buf) = 0;
      v107 = bswap32(v12);
      LODWORD(buf) = v107;
      WTF::String::String((WTF::String *)&v116, (const char *)&buf);
      WTF::String::String((WTF::String *)&v115, "' not contained in allowed codec list; ignoring");
      v113 = v117;
      *(_QWORD *)v121 = v116;
      *(_QWORD *)&buf = v118;
      v120 = v115;
      WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v113, (uint64_t *)v121, (uint64_t *)&v120, &v119);
      if (v119)
      {
        v52 = v115;
        v115 = 0;
        if (v52)
        {
          if (*(_DWORD *)v52 == 2)
            WTF::StringImpl::destroy(v52, v51);
          else
            *(_DWORD *)v52 -= 2;
        }
        v53 = v116;
        v116 = 0;
        if (v53)
        {
          if (*(_DWORD *)v53 == 2)
            WTF::StringImpl::destroy(v53, v51);
          else
            *(_DWORD *)v53 -= 2;
        }
        v54 = v117;
        v117 = 0;
        if (v54)
        {
          if (*(_DWORD *)v54 == 2)
            WTF::StringImpl::destroy(v54, v51);
          else
            *(_DWORD *)v54 -= 2;
        }
        v55 = v118;
        v118 = 0;
        if (v55)
        {
          if (*(_DWORD *)v55 == 2)
            WTF::StringImpl::destroy(v55, v51);
          else
            *(_DWORD *)v55 -= 2;
        }
        v56 = qword_1ECE7C4A0;
        v57 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)v57)
        {
          WTF::String::utf8();
          v59 = v113 ? (char *)v113 + 16 : 0;
          LODWORD(buf) = 136446210;
          *(_QWORD *)((char *)&buf + 4) = v59;
          _os_log_impl(&dword_1940B8000, v56, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
          v57 = (uint64_t)v113;
          v113 = 0;
          if (v57)
          {
            if (*(_DWORD *)v57 == 1)
              v57 = WTF::fastFree((WTF *)v57, v58);
            else
              --*(_DWORD *)v57;
          }
        }
        if (WebCore::LogMedia && byte_1ECE7C490)
        {
          v60 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
          while (1)
          {
            v61 = *v60;
            if ((v61 & 1) != 0)
              break;
            v62 = __ldaxr(v60);
            if (v62 == v61)
            {
              if (!__stxr(v61 | 1, v60))
              {
                v83 = WTF::Logger::observers((WTF::Logger *)v57);
                v84 = *(unsigned int *)(v83 + 12);
                if ((_DWORD)v84)
                {
                  v85 = *(uint64_t **)v83;
                  v106 = *(_QWORD *)v83 + 8 * v84;
                  do
                  {
                    v86 = *v85;
                    LODWORD(buf) = 0;
                    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v108);
                    LODWORD(v123) = 0;
                    WTF::String::String((WTF::String *)&v124, "Track with unuexpected media type '");
                    v125 = 0;
                    v121[4] = 0;
                    *(_DWORD *)v121 = v107;
                    WTF::String::String((WTF::String *)&v126, v121);
                    v127 = 0;
                    WTF::String::String((WTF::String *)v128, "' not contained in allowed codec list; ignoring");
                    v113 = 0;
                    v114 = 0;
                    v87 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x40);
                    LODWORD(v114) = 4;
                    v113 = v87;
                    v88 = HIDWORD(v114);
                    *((_DWORD *)v87 + 4 * HIDWORD(v114)) = buf;
                    v89 = *((_QWORD *)&buf + 1);
                    if (*((_QWORD *)&buf + 1))
                      **((_DWORD **)&buf + 1) += 2;
                    *((_QWORD *)v87 + 2 * v88 + 1) = v89;
                    *((_DWORD *)v87 + 4 * (v88 + 1)) = (_DWORD)v123;
                    v90 = v124;
                    if (v124)
                      *(_DWORD *)v124 += 2;
                    *((_QWORD *)v87 + 2 * (v88 + 1) + 1) = v90;
                    *((_DWORD *)v87 + 4 * (v88 + 2)) = v125;
                    v91 = v126;
                    if (v126)
                      *(_DWORD *)v126 += 2;
                    *((_QWORD *)v87 + 2 * (v88 + 2) + 1) = v91;
                    *((_DWORD *)v87 + 4 * (v88 + 3)) = v127;
                    v92 = v128[0];
                    if (v128[0])
                      *(_DWORD *)v128[0] += 2;
                    *((_QWORD *)v87 + 2 * (v88 + 3) + 1) = v92;
                    HIDWORD(v114) = v88 + 4;
                    (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v86 + 16))(v86, &WebCore::LogMedia, 1, &v113);
                    v93 = v113;
                    if (HIDWORD(v114))
                    {
                      v94 = 16 * HIDWORD(v114);
                      v95 = (WTF::StringImpl **)((char *)v113 + 8);
                      do
                      {
                        v96 = *v95;
                        *v95 = 0;
                        if (v96)
                        {
                          if (*(_DWORD *)v96 == 2)
                            WTF::StringImpl::destroy(v96, (WTF::StringImpl *)v58);
                          else
                            *(_DWORD *)v96 -= 2;
                        }
                        v95 += 2;
                        v94 -= 16;
                      }
                      while (v94);
                      v93 = v113;
                    }
                    if (v93)
                    {
                      v113 = 0;
                      LODWORD(v114) = 0;
                      WTF::fastFree(v93, v58);
                    }
                    v97 = v128[0];
                    v128[0] = 0;
                    if (v97)
                    {
                      if (*(_DWORD *)v97 == 2)
                        WTF::StringImpl::destroy(v97, (WTF::StringImpl *)v58);
                      else
                        *(_DWORD *)v97 -= 2;
                    }
                    v98 = v126;
                    v126 = 0;
                    if (v98)
                    {
                      if (*(_DWORD *)v98 == 2)
                        WTF::StringImpl::destroy(v98, (WTF::StringImpl *)v58);
                      else
                        *(_DWORD *)v98 -= 2;
                    }
                    v99 = v124;
                    v124 = 0;
                    if (v99)
                    {
                      if (*(_DWORD *)v99 == 2)
                        WTF::StringImpl::destroy(v99, (WTF::StringImpl *)v58);
                      else
                        *(_DWORD *)v99 -= 2;
                    }
                    v100 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                    *((_QWORD *)&buf + 1) = 0;
                    if (v100)
                    {
                      if (*(_DWORD *)v100 == 2)
                        WTF::StringImpl::destroy(v100, (WTF::StringImpl *)v58);
                      else
                        *(_DWORD *)v100 -= 2;
                    }
                    ++v85;
                  }
                  while (v85 != (uint64_t *)v106);
                }
                v101 = __ldxr(v60);
                if (v101 == 1)
                {
                  if (!__stlxr(0, v60))
                    break;
                }
                else
                {
                  __clrex();
                }
                WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                break;
              }
            }
            else
            {
              __clrex();
            }
          }
        }
        v103 = v119;
        v119 = 0;
        if (v103)
        {
          if (*(_DWORD *)v103 == 2)
            WTF::StringImpl::destroy(v103, (WTF::StringImpl *)v58);
          else
            *(_DWORD *)v103 -= 2;
        }
        goto LABEL_202;
      }
LABEL_218:
      __break(0xC471u);
      JUMPOUT(0x1947560D4);
    }
LABEL_202:
    v17 = 1;
    goto LABEL_203;
  }
  return 0;
}

void sub_1947560E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, WTF *a20,int a21,int a22,WTF::StringImpl *a23,WTF::StringImpl *a24,WTF::StringImpl *a25,uint64_t a26,WTF::StringImpl *a27,uint64_t a28,uint64_t a29,char a30,WTF::StringImpl *a31,uint64_t a32,WTF::StringImpl *a33,uint64_t a34,WTF::StringImpl *a35,uint64_t a36,WTF::StringImpl *a37)
{
  const void *v37;
  unsigned __int8 **v38;

  CFRelease(v37);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v38);
  _Unwind_Resume(a1);
}

void *WebCore::MediaPlayerPrivateAVFoundationObjC::assetErrorCode(WebCore::MediaPlayerPrivateAVFoundationObjC *this)
{
  void *result;
  id v2;

  result = (void *)*((_QWORD *)this + 51);
  if (result)
  {
    v2 = 0;
    objc_msgSend(result, "statusOfValueForKey:error:", CFSTR("playable"), &v2);
    return (void *)objc_msgSend(v2, "code");
  }
  return result;
}

uint64_t WebCore::MediaPlayerPrivateAVFoundationObjC::paintCurrentFrameInContext(uint64_t this, WebCore::GraphicsContext *a2, const WebCore::FloatRect *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  _QWORD *v9;
  uint64_t v10[4];
  char v11;

  if (*(_BYTE *)(this + 169))
  {
    v5 = this;
    this = (*(uint64_t (**)(WebCore::GraphicsContext *))(*(_QWORD *)a2 + 40))(a2);
    if ((this & 1) == 0)
    {
      this = *(_QWORD *)(v5 + 416);
      if (this)
        this = objc_msgSend((id)this, "isExternalPlaybackActive");
      v11 = this;
      v6 = *(_QWORD *)(v5 + 280);
      v7 = *(_QWORD *)(v5 + 288);
      v10[0] = (uint64_t)"MediaPlayerPrivateAVFoundationObjC";
      v10[1] = 35;
      v10[2] = (uint64_t)"isCurrentPlaybackTargetWireless";
      v10[3] = v7;
      if (*(_BYTE *)(v6 + 12) && (WebCore::LogMedia ? (v8 = byte_1ECE7C490 >= 3u) : (v8 = 0), v8))
      {
        this = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogMedia, 3, (WTF::Logger::LogSiteIdentifier *)v10);
        if (v11)
          return this;
        v7 = *(_QWORD *)(v5 + 288);
      }
      else if ((this & 1) != 0)
      {
        return this;
      }
      v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x40);
      *v9 = off_1E3204E50;
      v9[1] = "MediaPlayerPrivateAVFoundationObjC";
      v9[2] = 35;
      v9[3] = "paintWithVideoOutput";
      v9[4] = v7;
      v9[5] = v5;
      v9[6] = a2;
      v9[7] = a3;
      v10[0] = (uint64_t)v9;
      WebCore::MediaPlayerPrivateAVFoundationObjC::updateLastImage(v5, v10);
      this = v10[0];
      if (v10[0])
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10[0] + 8))(v10[0]);
      *(_BYTE *)(v5 + 480) = 1;
    }
  }
  return this;
}

void sub_19475664C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  NSException *v12;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if (a2 == 1)
  {
    v12 = (NSException *)objc_begin_catch(exception_object);
    ReportBlockedObjCException(v12);
    objc_end_catch();
    JUMPOUT(0x19475662CLL);
  }
  _Unwind_Resume(exception_object);
}

void *WebCore::MediaPlayerPrivateAVFoundationObjC::isCurrentPlaybackTargetWireless(WebCore::MediaPlayerPrivateAVFoundationObjC *this)
{
  void *result;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  _QWORD v6[4];
  char v7;

  result = (void *)*((_QWORD *)this + 52);
  if (result)
    result = (void *)objc_msgSend(result, "isExternalPlaybackActive");
  v7 = (char)result;
  v3 = *((_QWORD *)this + 35);
  v4 = *((_QWORD *)this + 36);
  v6[0] = "MediaPlayerPrivateAVFoundationObjC";
  v6[1] = 35;
  v6[2] = "isCurrentPlaybackTargetWireless";
  v6[3] = v4;
  if (*(_BYTE *)(v3 + 12))
  {
    if (WebCore::LogMedia)
      v5 = byte_1ECE7C490 >= 3u;
    else
      v5 = 0;
    if (v5)
    {
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogMedia, 3, (WTF::Logger::LogSiteIdentifier *)v6);
      return (void *)(v7 != 0);
    }
  }
  return result;
}

uint64_t WebCore::MediaPlayerPrivateAVFoundationObjC::paint(uint64_t this, WebCore::GraphicsContext *a2, const WebCore::FloatRect *a3)
{
  _QWORD *v5;

  if (*(_BYTE *)(this + 169))
  {
    v5 = (_QWORD *)this;
    this = (*(uint64_t (**)(WebCore::GraphicsContext *))(*(_QWORD *)a2 + 40))(a2);
    if ((this & 1) == 0)
    {
      this = (*(uint64_t (**)(_QWORD *))(*v5 + 88))(v5);
      if (!this)
      {
        this = (*(uint64_t (**)(_QWORD *))(*v5 + 1592))(v5);
        if (v5[63] || v5[62])
          return WebCore::MediaPlayerPrivateAVFoundationObjC::paintCurrentFrameInContext((uint64_t)v5, a2, a3);
      }
    }
  }
  return this;
}

BOOL WebCore::keySystemIsSupported(_BOOL8 this, const WTF::String *a2)
{
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  unsigned __int8 *v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;

  if (this)
  {
    v2 = *(_DWORD *)(this + 4);
    if (v2 == 13)
    {
      v3 = *(_QWORD *)(this + 8);
      if ((*(_BYTE *)(this + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v3 & 0xDF) != 0x43
          || (*(_BYTE *)(v3 + 1) & 0xDF) != 0x4F
          || (*(_BYTE *)(v3 + 2) & 0xDF) != 0x4D
          || (*(_BYTE *)(v3 + 3) & 0xDF) != 0xE
          || (*(_BYTE *)(v3 + 4) & 0xDF) != 0x41
          || (*(_BYTE *)(v3 + 5) & 0xDF) != 0x50
          || (*(_BYTE *)(v3 + 6) & 0xDF) != 0x50
          || (*(_BYTE *)(v3 + 7) & 0xDF) != 0x4C
          || (*(_BYTE *)(v3 + 8) & 0xDF) != 0x45
          || (*(_BYTE *)(v3 + 9) & 0xDF) != 0xE
          || (*(_BYTE *)(v3 + 10) & 0xDF) != 0x46
          || (*(_BYTE *)(v3 + 11) & 0xDF) != 0x50)
        {
          return 0;
        }
        v4 = *(unsigned __int8 *)(v3 + 12);
      }
      else
      {
        if ((*(_WORD *)v3 & 0xFFDF) != 0x43
          || (*(_WORD *)(v3 + 2) & 0xFFDF) != 0x4F
          || (*(_WORD *)(v3 + 4) & 0xFFDF) != 0x4D
          || (*(_WORD *)(v3 + 6) & 0xFFDF) != 0xE
          || (*(_WORD *)(v3 + 8) & 0xFFDF) != 0x41
          || (*(_WORD *)(v3 + 10) & 0xFFDF) != 0x50
          || (*(_WORD *)(v3 + 12) & 0xFFDF) != 0x50
          || (*(_WORD *)(v3 + 14) & 0xFFDF) != 0x4C
          || (*(_WORD *)(v3 + 16) & 0xFFDF) != 0x45
          || (*(_WORD *)(v3 + 18) & 0xFFDF) != 0xE
          || (*(_WORD *)(v3 + 20) & 0xFFDF) != 0x46
          || (*(_WORD *)(v3 + 22) & 0xFFDF) != 0x50)
        {
          return 0;
        }
        v4 = *(unsigned __int16 *)(v3 + 24);
      }
      return (v4 & 0xFFFFFFDF) == 0x53;
    }
    if (v2 != 16)
    {
      if (v2 == 17)
      {
        v7 = *(unsigned __int8 **)(this + 8);
        if ((*(_BYTE *)(this + 16) & 4) != 0)
        {
          v8 = MEMORY[0x1E0CBF868];
          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v7) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99))
            return 0;
          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v7[1]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111))
            return 0;
          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v7[2]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 109))
            return 0;
          v9 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v7[3]);
          if (v9 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 46))
            return 0;
          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v7[4]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97))
            return 0;
          v10 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v7[5]);
          if (v10 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 112)
            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v7[6]) != v10
            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v7[7]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108)
            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v7[8]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101)
            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v7[9]) != v9
            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v7[10]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 102)
            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v7[11]) != v10
            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v7[12]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115)
            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v7[13]) != v9
            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v7[14]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 49)
            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v7[15]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
          {
            return 0;
          }
          v11 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v7[16]);
        }
        else
        {
          v8 = MEMORY[0x1E0CBF868];
          if ((*(unsigned __int16 *)v7 | (32 * (*(unsigned __int16 *)v7 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99))
            return 0;
          if ((*((unsigned __int16 *)v7 + 1) | (32 * (*((unsigned __int16 *)v7 + 1) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111))
            return 0;
          if ((*((unsigned __int16 *)v7 + 2) | (32 * (*((unsigned __int16 *)v7 + 2) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 109))
            return 0;
          v12 = *((unsigned __int16 *)v7 + 3) | (32 * (*((unsigned __int16 *)v7 + 3) - 65 < 0x1A));
          if (v12 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 46))
            return 0;
          if ((*((unsigned __int16 *)v7 + 4) | (32 * (*((unsigned __int16 *)v7 + 4) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97))
            return 0;
          v13 = *((unsigned __int16 *)v7 + 5) | (32 * (*((unsigned __int16 *)v7 + 5) - 65 < 0x1A));
          if (v13 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 112)
            || (*((unsigned __int16 *)v7 + 6) | (32 * (*((unsigned __int16 *)v7 + 6) - 65 < 0x1A))) != v13
            || (*((unsigned __int16 *)v7 + 7) | (32 * (*((unsigned __int16 *)v7 + 7) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108)
            || (*((unsigned __int16 *)v7 + 8) | (32 * (*((unsigned __int16 *)v7 + 8) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101)
            || (*((unsigned __int16 *)v7 + 9) | (32 * (*((unsigned __int16 *)v7 + 9) - 65 < 0x1A))) != v12
            || (*((unsigned __int16 *)v7 + 10) | (32 * (*((unsigned __int16 *)v7 + 10) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 102)
            || (*((unsigned __int16 *)v7 + 11) | (32 * (*((unsigned __int16 *)v7 + 11) - 65 < 0x1A))) != v13
            || (*((unsigned __int16 *)v7 + 12) | (32 * (*((unsigned __int16 *)v7 + 12) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115)
            || (*((unsigned __int16 *)v7 + 13) | (32 * (*((unsigned __int16 *)v7 + 13) - 65 < 0x1A))) != v12
            || (*((unsigned __int16 *)v7 + 14) | (32 * (*((unsigned __int16 *)v7 + 14) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 49)
            || (*((unsigned __int16 *)v7 + 15) | (32 * (*((unsigned __int16 *)v7 + 15) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
          {
            return 0;
          }
          v11 = *((unsigned __int16 *)v7 + 16) | (32 * (*((unsigned __int16 *)v7 + 16) - 65 < 0x1A));
        }
        if (v11 == *(unsigned __int8 *)(v8 + 48))
          return 1;
      }
      return 0;
    }
    v5 = *(_QWORD *)(this + 8);
    if ((*(_BYTE *)(this + 16) & 4) != 0)
    {
      if ((*(_BYTE *)v5 & 0xDF) != 0x4F
        || (*(_BYTE *)(v5 + 1) & 0xDF) != 0x52
        || (*(_BYTE *)(v5 + 2) & 0xDF) != 0x47
        || (*(_BYTE *)(v5 + 3) & 0xDF) != 0xE
        || (*(_BYTE *)(v5 + 4) & 0xDF) != 0x57
        || (*(_BYTE *)(v5 + 5) & 0xDF) != 0x13
        || (*(_BYTE *)(v5 + 6) & 0xDF) != 0x43
        || (*(_BYTE *)(v5 + 7) & 0xDF) != 0xE
        || (*(_BYTE *)(v5 + 8) & 0xDF) != 0x43
        || (*(_BYTE *)(v5 + 9) & 0xDF) != 0x4C
        || (*(_BYTE *)(v5 + 10) & 0xDF) != 0x45
        || (*(_BYTE *)(v5 + 11) & 0xDF) != 0x41
        || (*(_BYTE *)(v5 + 12) & 0xDF) != 0x52
        || (*(_BYTE *)(v5 + 13) & 0xDF) != 0x4B
        || (*(_BYTE *)(v5 + 14) & 0xDF) != 0x45)
      {
        return 0;
      }
      v6 = *(unsigned __int8 *)(v5 + 15);
    }
    else
    {
      if ((*(_WORD *)v5 & 0xFFDF) != 0x4F
        || (*(_WORD *)(v5 + 2) & 0xFFDF) != 0x52
        || (*(_WORD *)(v5 + 4) & 0xFFDF) != 0x47
        || (*(_WORD *)(v5 + 6) & 0xFFDF) != 0xE
        || (*(_WORD *)(v5 + 8) & 0xFFDF) != 0x57
        || (*(_WORD *)(v5 + 10) & 0xFFDF) != 0x13
        || (*(_WORD *)(v5 + 12) & 0xFFDF) != 0x43
        || (*(_WORD *)(v5 + 14) & 0xFFDF) != 0xE
        || (*(_WORD *)(v5 + 16) & 0xFFDF) != 0x43
        || (*(_WORD *)(v5 + 18) & 0xFFDF) != 0x4C
        || (*(_WORD *)(v5 + 20) & 0xFFDF) != 0x45
        || (*(_WORD *)(v5 + 22) & 0xFFDF) != 0x41
        || (*(_WORD *)(v5 + 24) & 0xFFDF) != 0x52
        || (*(_WORD *)(v5 + 26) & 0xFFDF) != 0x4B
        || (*(_WORD *)(v5 + 28) & 0xFFDF) != 0x45)
      {
        return 0;
      }
      v6 = *(unsigned __int16 *)(v5 + 30);
    }
    return (v6 & 0xFFFFFFDF) == 89;
  }
  return this;
}

uint64_t JSC::DataView::set<unsigned int>(uint64_t result, uint64_t a2, unsigned int a3, int a4, _BYTE *a5)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v5 = a2 + 4;
  v6 = *(_QWORD *)(result + 32);
  v7 = MEMORY[0x1E0CC10F8];
  if (!a5)
  {
    if (!v6)
      goto LABEL_18;
    v11 = *(_QWORD *)(v6 + 16);
    if (v11)
    {
      if ((v12 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56)) == 0
        || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0]
        || (v11 & 0x3FFFFFFFFLL) + v12)
      {
        v13 = *(_BYTE *)(result + 6);
        if ((v13 & 3) == 0)
        {
          v6 = *(_QWORD *)(result + 16);
          goto LABEL_18;
        }
        if (*(_BYTE *)(v6 + 64) && (v28 = *(_QWORD *)(v6 + 32)) != 0)
        {
          v20 = atomic_load((unint64_t *)(v28 + 32));
          v13 = *(_BYTE *)(result + 6);
        }
        else
        {
          v20 = *(_QWORD *)(v6 + 48);
        }
        v21 = *(_QWORD *)(result + 8);
        if ((v13 & 4) == 0)
        {
          if (*(_QWORD *)(result + 16) + v21 <= v20 && v20 >= v21)
            v6 = 0;
          else
            v6 = *(_QWORD *)(result + 16);
          goto LABEL_18;
        }
        v19 = v20 >= v21;
        v25 = v20 - v21;
        if (!v19)
        {
          if ((*(_BYTE *)(result + 4) - 4) > 7u)
            LOBYTE(v26) = 0;
          else
            v26 = qword_1968A15C0[(char)(*(_BYTE *)(result + 4) - 4)];
          v6 = (-1 << v26) & v25;
LABEL_18:
          if (v5 > v6)
          {
            __break(0xC471u);
            JUMPOUT(0x194756FD8);
          }
          goto LABEL_21;
        }
      }
    }
    v6 = 0;
    goto LABEL_18;
  }
  if (v6)
  {
    v8 = *(_QWORD *)(v6 + 16);
    if (v8)
    {
      if ((v9 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56)) == 0
        || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0]
        || (v8 & 0x3FFFFFFFFLL) + v9)
      {
        v10 = *(_BYTE *)(result + 6);
        if ((v10 & 3) == 0)
        {
          v6 = *(_QWORD *)(result + 16);
          goto LABEL_9;
        }
        if (*(_BYTE *)(v6 + 64) && (v27 = *(_QWORD *)(v6 + 32)) != 0)
        {
          v17 = atomic_load((unint64_t *)(v27 + 32));
          v10 = *(_BYTE *)(result + 6);
        }
        else
        {
          v17 = *(_QWORD *)(v6 + 48);
        }
        v18 = *(_QWORD *)(result + 8);
        if ((v10 & 4) == 0)
        {
          v19 = *(_QWORD *)(result + 16) + v18 <= v17 && v17 >= v18;
          if (v19)
            v6 = 0;
          else
            v6 = *(_QWORD *)(result + 16);
          goto LABEL_9;
        }
        v19 = v17 >= v18;
        v23 = v17 - v18;
        if (!v19)
        {
          if ((*(_BYTE *)(result + 4) - 4) > 7u)
            LOBYTE(v24) = 0;
          else
            v24 = qword_1968A15C0[(char)(*(_BYTE *)(result + 4) - 4)];
          v6 = (-1 << v24) & v23;
          goto LABEL_9;
        }
      }
    }
    v6 = 0;
  }
LABEL_9:
  if (v5 > v6)
  {
    *a5 = 0;
    return result;
  }
  *a5 = 1;
LABEL_21:
  v14 = bswap32(a3);
  if (a4)
    v14 = a3;
  v15 = *(_QWORD *)(v7 + 56);
  if (v15 && (*(_BYTE *)(v7 + 34) || !*MEMORY[0x1E0CC10F0]))
    v16 = (*(_QWORD *)(result + 24) & 0x3FFFFFFFFLL) + v15;
  else
    v16 = *(_QWORD *)(result + 24);
  *(_DWORD *)(v16 + a2) = v14;
  return result;
}

uint64_t WebCore::fulfillRequestWithKeyData(WebCore *this, AVAssetResourceLoadingRequest *a2, JSC::ArrayBuffer *a3)
{
  void *v5;
  void *v6;
  Class isa;
  void *v8;
  void *v9;
  uint64_t v10;
  Class v11;
  uint64_t v12;
  uint64_t v13;
  Class v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const void *v18;
  BOOL v19;
  uint64_t v21;
  void *v22;
  WTF *v23;
  WTF *v24;
  Class v25;
  Class v26;
  Class v27;
  uint64_t v28;
  uint64_t v29;

  v5 = (void *)-[WebCore contentInformationRequest](this, "contentInformationRequest", a3);
  if (v5)
  {
    v6 = v5;
    if (LOBYTE(a2[4].super.isa) && (v25 = a2[2].super.isa) != 0)
      isa = (Class)*((_QWORD *)v25 + 4);
    else
      isa = a2[3].super.isa;
    objc_msgSend(v5, "setContentLength:", isa);
    objc_msgSend(v6, "setByteRangeAccessSupported:", 1);
  }
  v8 = (void *)-[WebCore dataRequest](this, "dataRequest");
  if (!v8)
    return -[WebCore finishLoading](this, "finishLoading");
  v9 = v8;
  v10 = objc_msgSend(v8, "currentOffset");
  if (LOBYTE(a2[4].super.isa) && (v26 = a2[2].super.isa) != 0)
    v11 = (Class)*((_QWORD *)v26 + 4);
  else
    v11 = a2[3].super.isa;
  v12 = objc_msgSend(v9, "currentOffset");
  v13 = objc_msgSend(v9, "requestedLength") + v12;
  if (v13 >= (uint64_t)v11)
    v13 = (uint64_t)v11;
  if ((v10 & 0x8000000000000000) == 0 && (v13 & 0x8000000000000000) == 0)
  {
    if (LOBYTE(a2[4].super.isa) && (v27 = a2[2].super.isa) != 0)
      v14 = (Class)*((_QWORD *)v27 + 4);
    else
      v14 = a2[3].super.isa;
    if (v10 < (uint64_t)v14)
    {
      JSC::ArrayBuffer::slice((JSC::ArrayBuffer *)a2, (double)(int)v10, (double)(int)v13);
      v15 = *(_QWORD *)(v29 + 16);
      if (v15)
      {
        v16 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
        if (v16)
        {
          if (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0])
            v15 = (v15 & 0x3FFFFFFFFLL) + v16;
        }
      }
      if (*(_BYTE *)(v29 + 64) && (v28 = *(_QWORD *)(v29 + 32)) != 0)
        v17 = *(_QWORD *)(v28 + 32);
      else
        v17 = *(_QWORD *)(v29 + 48);
      v18 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", v15, v17);
      objc_msgSend(v9, "respondWithData:", v18);
      if (v18)
        CFRelease(v18);
      if (v29)
      {
        v19 = *(_DWORD *)v29 == 2;
        *(_DWORD *)v29 -= 2;
        if (v19)
        {
          v21 = *(_QWORD *)(v29 + 80);
          if (v21)
          {
            *(_QWORD *)(v21 + 8) = 3;
            *(_QWORD *)(v29 + 80) = 0;
          }
          if ((*(_BYTE *)(v29 + 72) & 1) == 0)
            JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v29 + 72));
          JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v29 + 16));
          v23 = *(WTF **)(v29 + 8);
          if ((v23 & 1) == 0 && v23)
          {
            v24 = *(WTF **)v23;
            if (*(_QWORD *)v23)
            {
              *(_QWORD *)v23 = 0;
              *((_DWORD *)v23 + 2) = 0;
              WTF::fastFree(v24, v22);
            }
            WTF::fastFree(v23, v22);
          }
          WTF::fastFree((WTF *)v29, v22);
        }
      }
      return -[WebCore finishLoading](this, "finishLoading");
    }
  }
  return -[WebCore finishLoadingWithError:](this, "finishLoadingWithError:", 0);
}

void sub_1947573B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10)
{
  const void *v10;
  BOOL v12;
  uint64_t v13;
  void *v14;
  WTF *v15;
  WTF *v16;

  if (v10)
    CFRelease(v10);
  if (a10)
  {
    v12 = *(_DWORD *)a10 == 2;
    *(_DWORD *)a10 -= 2;
    if (v12)
    {
      v13 = a10[10];
      if (v13)
      {
        *(_QWORD *)(v13 + 8) = 3;
        a10[10] = 0;
      }
      if ((a10[9] & 1) == 0)
        JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(a10 + 9));
      JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(a10 + 2));
      v15 = (WTF *)a10[1];
      if ((v15 & 1) == 0 && v15)
      {
        v16 = *(WTF **)v15;
        if (*(_QWORD *)v15)
        {
          *(_QWORD *)v15 = 0;
          *((_DWORD *)v15 + 2) = 0;
          WTF::fastFree(v16, v14);
        }
        WTF::fastFree(v15, v14);
      }
      WTF::fastFree((WTF *)a10, v14);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::MediaPlayerPrivateAVFoundationObjC::didStopLoadingRequest(uint64_t this, AVAssetResourceLoadingRequest *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  AVAssetResourceLoadingRequest *v12;
  int v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v28;
  _QWORD *v29;
  _QWORD v30[4];

  v3 = this;
  v4 = *(_QWORD *)(this + 280);
  v5 = *(_QWORD *)(this + 288);
  v30[0] = "MediaPlayerPrivateAVFoundationObjC";
  v30[1] = 35;
  v30[2] = "didStopLoadingRequest";
  v30[3] = v5;
  if (*(_BYTE *)(v4 + 12))
    this = WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v30);
  v6 = *(_QWORD *)(v3 + 552);
  if (v6)
  {
    v7 = *(_DWORD *)(v6 - 8);
    v8 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(AVAssetResourceLoadingRequest **)(v6 + 16 * v11);
    if (v12 != a2)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(AVAssetResourceLoadingRequest **)(v6 + 16 * v11);
        ++v13;
        if (v12 == a2)
          goto LABEL_10;
      }
      v11 = *(unsigned int *)(v6 - 4);
    }
LABEL_10:
    if (v11 != *(_DWORD *)(v6 - 4))
    {
      v14 = (uint64_t *)(v3 + 552);
      v15 = (uint64_t *)(v6 + 16 * v11);
      v17 = v15 + 1;
      v16 = v15[1];
      v15[1] = 0;
      v18 = *(uint64_t **)(v3 + 552);
      if (!v18 || (v18 += 2 * *((unsigned int *)v18 - 1), v18 != v15))
      {
        if (v18 != v15)
        {
          this = *v15;
          *v15 = 0;
          if (this)
          {
            CFRelease((CFTypeRef)this);
            this = *v17;
            *v15 = -1;
            *v17 = 0;
            if (this)
            {
              v19 = (unsigned int *)(this + 8);
              do
              {
                v20 = __ldaxr(v19);
                v21 = v20 - 1;
              }
              while (__stlxr(v21, v19));
              if (!v21)
              {
                atomic_store(1u, (unsigned int *)(this + 8));
                this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
              }
            }
          }
          else
          {
            *v15 = -1;
            *v17 = 0;
          }
          ++*(_DWORD *)(*v14 - 16);
          v22 = *v14;
          if (*v14)
            v23 = *(_DWORD *)(v22 - 12) - 1;
          else
            v23 = -1;
          *(_DWORD *)(v22 - 12) = v23;
          v24 = *v14;
          if (*v14)
          {
            v25 = 6 * *(_DWORD *)(v24 - 12);
            v26 = *(_DWORD *)(v24 - 4);
            if (v25 < v26 && v26 >= 9)
              this = WTF::HashTable<WTF::RetainPtr<void const*>,WTF::KeyValuePair<WTF::RetainPtr<void const*>,WTF::RefPtr<WebCore::WebCoreAVFResourceLoader,WTF::RawPtrTraits<WebCore::WebCoreAVFResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::WebCoreAVFResourceLoader>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<void const*>,WTF::RefPtr<WebCore::WebCoreAVFResourceLoader,WTF::RawPtrTraits<WebCore::WebCoreAVFResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::WebCoreAVFResourceLoader>>>>,WTF::DefaultHash<WTF::RetainPtr<void const*>>,WTF::HashMap<WTF::RetainPtr<void const*>,WTF::RefPtr<WebCore::WebCoreAVFResourceLoader,WTF::RawPtrTraits<WebCore::WebCoreAVFResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::WebCoreAVFResourceLoader>>,WTF::DefaultHash<WTF::RetainPtr<void const*>>,WTF::HashTraits<WTF::RetainPtr<void const*>>,WTF::HashTraits<WTF::RefPtr<WebCore::WebCoreAVFResourceLoader,WTF::RawPtrTraits<WebCore::WebCoreAVFResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::WebCoreAVFResourceLoader>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<void const*>>>::rehash((uint64_t *)(v3 + 552), v26 >> 1);
          }
        }
      }
      if (v16)
      {
        v28 = *(_QWORD *)(v3 + 1176);
        v29 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v29 = &off_1E3204E00;
        v29[1] = v16;
        v30[0] = v29;
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v28 + 16))(v28, v30);
        this = v30[0];
        v30[0] = 0;
        if (this)
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
      }
    }
  }
  return this;
}

void sub_1947576A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  unsigned int *v9;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (v9)
  {
    v11 = v9 + 2;
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::MediaPlayerPrivateAVFoundationObjC::mediaTimeForTimeValue(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2;
}

float *WebCore::MediaPlayerPrivateAVFoundationObjC::syncTextTrackBounds(float **this)
{
  return WebCore::VideoLayerManagerObjC::syncTextTrackBounds(this[55]);
}

unsigned __int8 *WebCore::MediaPlayerPrivateAVFoundationObjC::metadataLoaded(WebCore::MediaPlayerPrivateAVFoundationObjC *this)
{
  *((_BYTE *)this + 391) = 0;
  (*(void (**)(WebCore::MediaPlayerPrivateAVFoundationObjC *))(*(_QWORD *)this + 1616))(this);
  (*(void (**)(WebCore::MediaPlayerPrivateAVFoundationObjC *))(*(_QWORD *)this + 1000))(this);
  return WebCore::MediaPlayerPrivateAVFoundationObjC::processChapterTracks(this);
}

void WebCore::MediaPlayerPrivateAVFoundationObjC::tracksChanged(WTF::StringImpl **this, WTF::StringImpl *a2)
{
  WebCore::MediaPlayerPrivateAVFoundationObjC *v2;
  WTF::StringImpl *v3;
  int v4;
  void *v5;
  PAL *v6;
  PAL *v7;
  uint64_t v8;
  uint64_t v9;
  PAL *v10;
  void *v11;
  void *v12;
  PAL *v13;
  PAL *v14;
  NSString *AVFoundation_AVMediaCharacteristicVisual;
  PAL *EnabledTrack;
  PAL *v17;
  int v18;
  NSString *AVFoundation_AVMediaCharacteristicAudible;
  int v20;
  double v21;
  double v22;
  double v23;
  double v24;
  float v25;
  float v26;
  float v27;
  uint64_t v28;
  WebCore::MediaPlayer *v29;
  int v31;
  uint64_t v32;
  void *v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  _DWORD *v39;
  const void *v40;
  const void *v41;
  void *v42;
  uint64_t AVFoundation_AVMediaTypeAudio;
  id v44;
  void *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char *v56;
  WTF *v57;
  uint64_t v58;
  unsigned int *v59;
  unsigned int v60;
  uint64_t v61;
  char *v62;
  WTF *v63;
  uint64_t v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int *v67;
  unsigned int v68;
  int v69;
  char *v70;
  unsigned int *v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v76;
  uint64_t v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t i;
  AVPlayerItemTrack *v82;
  WebCore::AudioTrackPrivateAVFObjC *v83;
  uint64_t v84;
  char *v85;
  WTF *v86;
  uint64_t v87;
  unsigned int *v88;
  unsigned int *v89;
  unsigned int v90;
  unsigned int v91;
  uint64_t v92;
  WTF *v93;
  WTF *v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  WTF *v98;
  _QWORD *v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  WTF *v105;
  WTF *v106;
  const void *v107;
  WTF *v108;
  int v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unsigned int v113;
  int k;
  _QWORD *v115;
  _QWORD *v116;
  int v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unsigned int v121;
  int m;
  _QWORD *v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unsigned int v133;
  int n;
  _QWORD *v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  WTF *v139;
  uint64_t v140;
  unsigned int *v141;
  unsigned int v142;
  unsigned int v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  WTF *v147;
  uint64_t v148;
  unsigned int *v149;
  unsigned int v150;
  WTF *v151;
  unsigned int *v152;
  unsigned int v153;
  char *v154;
  char *v155;
  unsigned int *v156;
  unsigned int v157;
  WTF *v158;
  unsigned int *v159;
  unsigned int v160;
  unsigned int *v161;
  unsigned int v162;
  WTF *ii;
  id *v164;
  WebCore::AudioTrackPrivateAVFObjC *v165;
  uint64_t v166;
  char *v167;
  WTF *v168;
  uint64_t v169;
  unsigned int *v170;
  unsigned int *v171;
  unsigned int v172;
  unsigned int v173;
  char v174;
  uint64_t v175;
  WTF *v176;
  WTF *v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  WTF *v182;
  _QWORD *v183;
  WTF *v184;
  uint64_t v185;
  unsigned int *v186;
  unsigned int v187;
  WTF *v188;
  uint64_t v189;
  WTF *v190;
  uint64_t v191;
  uint64_t v192;
  WebCore::AudioTrackPrivate **v193;
  WebCore::AudioTrackPrivate **v194;
  uint64_t v195;
  WTF *v196;
  unsigned int *v197;
  unsigned int *v198;
  unsigned int v199;
  unsigned int v200;
  WTF *v201;
  WTF *v202;
  unsigned int *v203;
  unsigned int *v204;
  unsigned int v205;
  unsigned int v206;
  WTF *v207;
  WTF *v208;
  unsigned int *v209;
  unsigned int *v210;
  unsigned int v211;
  unsigned int v212;
  WTF *v213;
  const void *v214;
  WTF *v215;
  WTF *v216;
  WTF *v217;
  const void *v218;
  WTF *v219;
  WTF *v220;
  WTF *v221;
  const void *v222;
  WTF *v223;
  WTF *v224;
  WTF *v225;
  const void *v226;
  WTF *v227;
  WTF *v228;
  int v229;
  int v230;
  _QWORD *v231;
  WTF *v232;
  uint64_t v233;
  unsigned int *v234;
  unsigned int v235;
  WTF *v236;
  WTF *v237;
  WTF *v238;
  uint64_t v239;
  uint64_t v240;
  WebCore::AudioTrackPrivate **v241;
  WebCore::AudioTrackPrivate **v242;
  uint64_t v243;
  WTF *v244;
  unsigned int *v245;
  unsigned int *v246;
  unsigned int v247;
  unsigned int v248;
  WTF *v249;
  WTF *v250;
  unsigned int *v251;
  unsigned int *v252;
  unsigned int v253;
  unsigned int v254;
  WTF *v255;
  WTF *v256;
  unsigned int *v257;
  unsigned int *v258;
  unsigned int v259;
  unsigned int v260;
  uint64_t v261;
  WebCore::AudioTrackPrivateAVFObjC **v262;
  uint64_t v263;
  WTF *v264;
  uint64_t v265;
  WTF::StringImpl *v266;
  WTF *v267;
  uint64_t v268;
  WebCore::MediaPlayer *v269;
  int v271;
  unsigned int v272;
  void *v273;
  uint64_t AVFoundation_AVMediaTypeVideo;
  id v275;
  void *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  void *v280;
  uint64_t v281;
  unint64_t v282;
  unint64_t v283;
  uint64_t v284;
  char *v285;
  WTF *v286;
  uint64_t v287;
  unsigned int *v288;
  unsigned int v289;
  uint64_t v290;
  char *v291;
  WTF *v292;
  uint64_t v293;
  unsigned int *v294;
  unsigned int v295;
  unsigned int *v296;
  unsigned int v297;
  int v298;
  char *v299;
  unsigned int *v300;
  unsigned int v301;
  void *v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t jj;
  void *v306;
  uint64_t v307;
  WebCore::AVTrackPrivateAVFObjCImpl *v308;
  WebCore::AVTrackPrivateAVFObjCImpl *v309;
  _QWORD *v310;
  uint64_t *v311;
  uint64_t v312;
  uint64_t v313;
  void *v314;
  unsigned int *v315;
  unsigned int v316;
  unsigned int v317;
  unsigned int v318;
  unsigned int *v319;
  unsigned int v320;
  unsigned int v321;
  uint64_t v322;
  char *v323;
  WTF *v324;
  uint64_t v325;
  unsigned int *v326;
  unsigned int *v327;
  unsigned int v328;
  unsigned int v329;
  uint64_t v330;
  uint64_t v331;
  WTF *v332;
  WTF *v333;
  unint64_t v334;
  unint64_t v335;
  unint64_t v336;
  unint64_t v337;
  WTF *v338;
  _QWORD *v339;
  WTF *v340;
  uint64_t v341;
  unsigned int *v342;
  unsigned int v343;
  WTF *v344;
  WTF *v345;
  WTF *v346;
  uint64_t v347;
  unsigned __int8 **v348;
  uint64_t v349;
  WebCore::VideoTrackPrivate **v350;
  WebCore::VideoTrackPrivate **v351;
  uint64_t v352;
  WTF *v353;
  unsigned int *v354;
  unsigned int *v355;
  unsigned int v356;
  unsigned int v357;
  const void *v358;
  WTF *v359;
  WTF *v360;
  unsigned int *v361;
  unsigned int *v362;
  unsigned int v363;
  unsigned int v364;
  WTF *v365;
  WTF *v366;
  unsigned int *v367;
  unsigned int *v368;
  unsigned int v369;
  unsigned int v370;
  const void *v371;
  uint64_t v372;
  void *v373;
  _QWORD *v374;
  uint64_t v375;
  _QWORD *v376;
  _QWORD *v377;
  uint64_t v378;
  void *v379;
  const void *v380;
  const void *v381;
  uint64_t v382;
  WTF::StringImpl *v383;
  WebCore::MediaSelectionGroupAVFObjC *v384;
  WTF *v385;
  _QWORD *v386;
  uint64_t v387;
  _QWORD *v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  WTF *v392;
  WTF *v393;
  const void *v394;
  WTF *v395;
  int v396;
  unint64_t v397;
  unint64_t v398;
  unint64_t v399;
  unsigned int v400;
  int kk;
  _QWORD *v402;
  _QWORD *v403;
  int v404;
  unint64_t v405;
  unint64_t v406;
  unint64_t v407;
  unsigned int v408;
  int mm;
  _QWORD *v410;
  uint64_t v411;
  unint64_t v412;
  unint64_t v413;
  uint64_t v414;
  uint64_t v415;
  int v416;
  unint64_t v417;
  unint64_t v418;
  unint64_t v419;
  unsigned int v420;
  int i1;
  _QWORD *v422;
  uint64_t v423;
  char *v424;
  uint64_t v425;
  WTF *v426;
  uint64_t v427;
  unsigned int *v428;
  unsigned int v429;
  unsigned int v430;
  uint64_t v431;
  char *v432;
  uint64_t v433;
  WTF *v434;
  uint64_t v435;
  unsigned int *v436;
  unsigned int v437;
  WTF *v438;
  unsigned int *v439;
  unsigned int v440;
  char *v441;
  char *v442;
  unsigned int *v443;
  unsigned int v444;
  WTF *v445;
  unsigned int *v446;
  unsigned int v447;
  unsigned int *v448;
  unsigned int v449;
  WTF *nn;
  id *v451;
  WTF::StringImpl *v452;
  WebCore::AVTrackPrivateAVFObjCImpl *v453;
  WTF *v454;
  void *v455;
  uint64_t v456;
  char *v457;
  WTF *v458;
  uint64_t v459;
  unsigned int *v460;
  unsigned int *v461;
  unsigned int v462;
  unsigned int v463;
  uint64_t v464;
  uint64_t v465;
  WTF *v466;
  WTF *v467;
  unint64_t v468;
  unint64_t v469;
  unint64_t v470;
  unint64_t v471;
  WTF *v472;
  _QWORD *v473;
  WTF *v474;
  uint64_t v475;
  unsigned int *v476;
  unsigned int v477;
  WTF *v478;
  uint64_t v479;
  WTF *v480;
  uint64_t v481;
  uint64_t v482;
  WebCore::VideoTrackPrivate **v483;
  WebCore::VideoTrackPrivate **v484;
  uint64_t v485;
  WTF *v486;
  unsigned int *v487;
  unsigned int *v488;
  unsigned int v489;
  unsigned int v490;
  WTF *v491;
  WTF *v492;
  unsigned int *v493;
  unsigned int *v494;
  unsigned int v495;
  unsigned int v496;
  WTF *v497;
  WTF *v498;
  unsigned int *v499;
  unsigned int *v500;
  unsigned int v501;
  unsigned int v502;
  WTF *v503;
  WTF *v504;
  WTF *v505;
  const void *v506;
  WTF *v507;
  WTF *v508;
  WTF *v509;
  const void *v510;
  WTF *v511;
  WTF *v512;
  WTF *v513;
  const void *v514;
  WTF *v515;
  WTF *v516;
  WTF *v517;
  const void *v518;
  WTF *v519;
  uint64_t v520;
  WebCore::VideoTrackPrivateAVFObjC **v521;
  uint64_t v522;
  uint64_t v523;
  WTF::StringImpl *v524;
  uint64_t v525;
  char v526;
  uint64_t v527;
  char v528;
  int v529;
  unsigned __int8 v530;
  void *v531;
  PAL *v532;
  uint64_t v533;
  void *v534;
  unsigned int v535;
  WTF::StringImpl *v536;
  uint64_t v537;
  void *v538;
  uint64_t v539;
  _BOOL4 v540;
  void *v541;
  uint64_t v542;
  WTF::StringImpl *v543;
  _BOOL4 v544;
  int v545;
  uint64_t v546;
  WTF *v547;
  uint64_t v548;
  WTF *v549;
  uint64_t v550;
  WTF *v551;
  WTF::StringImpl *v552;
  WTF::StringImpl *v553;
  WTF::StringImpl *v554;
  WTF::StringImpl *v555;
  WTF::StringImpl *v556;
  NSObject *v557;
  uint64_t v558;
  void *v559;
  char *v560;
  unsigned __int8 *v561;
  int v562;
  int v563;
  uint64_t v564;
  uint64_t v565;
  WebCore::MediaPlayer *v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  WTF *v571;
  WTF *v572;
  WTF *v573;
  WTF::Logger *v574;
  uint64_t v575;
  uint64_t v576;
  WTF::StringImpl *v577;
  WTF::StringImpl *v578;
  WTF::StringImpl *v579;
  WTF::StringImpl *v580;
  WTF::StringImpl *v581;
  WTF::StringImpl *v582;
  WTF::Logger *v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  WTF::StringImpl **v590;
  WTF::StringImpl *v591;
  WTF::StringImpl *v592;
  WTF::StringImpl *v593;
  WTF::StringImpl *v594;
  WTF::StringImpl *v595;
  WTF::StringImpl *v596;
  WTF::StringImpl *v597;
  WTF::StringImpl *v598;
  WTF *v599;
  WTF *v600;
  WTF *v601;
  int v602;
  WTF::StringImpl *v603;
  WTF::StringImpl *v604;
  const WTF::StringImpl *v605;
  uint64_t v606;
  char v607;
  WebCore::AudioSourceProviderAVFObjC *v608;
  NSString *v609;
  AVAssetTrack *v610;
  int v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v615;
  uint64_t v616;
  uint64_t v618;
  uint64_t v619;
  uint64_t v621;
  uint64_t v622;
  uint64_t v624;
  uint64_t v625;
  uint64_t v627;
  WTF::StringImpl *v628;
  int v629;
  int v630;
  int v631;
  int v632;
  int v633;
  void *v634;
  void *v635;
  uint64_t v636;
  PAL *v637;
  uint64_t v638;
  uint64_t *v639;
  uint64_t *v640;
  uint64_t v641;
  unsigned int *v642;
  unsigned int v643;
  void *v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t i2;
  void *v648;
  uint64_t v649;
  char v650;
  WTF::Logger *v651;
  int v652;
  uint64_t v653;
  unsigned int *v654;
  unsigned int v655;
  void *v656;
  unsigned int *v657;
  unsigned int v658;
  BOOL v659;
  unsigned int *v660;
  unsigned int v661;
  unsigned int *v662;
  unsigned int v663;
  int v664;
  char v665;
  unsigned int **v666;
  unsigned int *v667;
  unsigned int *v668;
  unsigned int v669;
  unsigned int v670;
  int v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  unint64_t v675;
  unint64_t v676;
  unint64_t v677;
  unint64_t v678;
  void *v679;
  void *v680;
  void *v681;
  uint64_t v682;
  uint64_t *v683;
  uint64_t v684;
  unint64_t v685;
  unint64_t v686;
  unint64_t v687;
  unint64_t v688;
  void *v689;
  void *v690;
  void *v691;
  uint64_t v692;
  void *v693;
  WTF::Logger *v694;
  WTF::Logger *v695;
  unsigned int *v696;
  unsigned int *v697;
  unsigned int v698;
  unsigned int v699;
  WTF::Logger *v700;
  WTF *v701;
  void *v702;
  WTF *v703;
  void *v704;
  WTF *v705;
  uint64_t v706;
  WTF::StringImpl *v707;
  WTF *v708;
  uint64_t v709;
  WTF::StringImpl *v710;
  WTF::StringImpl **v711;
  uint64_t v712;
  WTF::StringImpl *v713;
  unsigned int v714;
  WTF::StringImpl *v715;
  WTF::StringImpl *v716;
  WTF::StringImpl *v717;
  WebCore::MediaPlayer *v718;
  WebCore::MediaPlayer *v719;
  void *v720;
  char v721;
  char v722;
  CFTypeRef v723;
  CFTypeRef v724;
  void *v725;
  WebCore::MediaPlayerPrivateAVFoundationObjC *v726;
  char v727;
  void *v728;
  CFTypeRef cf;
  void *cfa;
  void *cfb;
  char v732;
  uint64_t v733;
  __int128 v734;
  __int128 v735;
  __int128 v736;
  __int128 v737;
  double v738;
  double v739;
  double v740;
  double v741;
  WTF *v742;
  uint64_t v743;
  WTF::Logger *v744;
  WTF *v745;
  uint64_t (*j)(uint64_t, void *);
  void *v747;
  uint64_t v748;
  WTF *v749;
  uint64_t v750;
  WTF *v751;
  uint64_t v752;
  WTF *v753;
  unsigned int v754[4];
  WTF *v755;
  WTF *v756;
  uint64_t v757;
  WTF *v758[2];
  __int128 v759;
  __int128 v760;
  __int128 v761;
  WTF::StringImpl *v762;
  WTF::StringImpl *v763;
  WTF::StringImpl *v764;
  WTF::StringImpl *v765;
  WTF::StringImpl *v766;
  _BYTE v767[128];
  __int128 buf;
  const char *v769;
  WTF::StringImpl *v770;
  int v771;
  WTF::StringImpl *v772;
  int v773;
  WTF::StringImpl *v774;
  int v775;
  WTF::StringImpl *v776;
  int v777;
  WTF::StringImpl *v778;
  int v779;
  WTF::StringImpl *v780;
  uint64_t v781;

  v2 = (WebCore::MediaPlayerPrivateAVFoundationObjC *)this;
  v781 = *MEMORY[0x1E0C80C00];
  v3 = this[59];
  if (v3)
  {
    v4 = *(_DWORD *)v3;
    *(_DWORD *)v3 += 2;
    this[59] = 0;
    if (v4)
      *(_DWORD *)v3 = v4;
    else
      this = (WTF::StringImpl **)WTF::StringImpl::destroy(v3, a2);
  }
  else
  {
    this[59] = 0;
  }
  if (!*((_QWORD *)v2 + 51))
    goto LABEL_990;
  ++*((_DWORD *)v2 + 96);
  v726 = v2;
  if (!*((_QWORD *)v2 + 53))
  {
    AVFoundation_AVMediaCharacteristicVisual = (NSString *)PAL::get_AVFoundation_AVMediaCharacteristicVisual((PAL *)this);
    EnabledTrack = (PAL *)WebCore::MediaPlayerPrivateAVFoundationObjC::firstEnabledTrack(v2, AVFoundation_AVMediaCharacteristicVisual);
    v17 = EnabledTrack;
    v18 = EnabledTrack != 0;
    if (*((unsigned __int8 *)v2 + 394) == v18)
      goto LABEL_23;
    *((_BYTE *)v2 + 394) = v18;
    if (*((_DWORD *)v2 + 96))
    {
      *((_BYTE *)v2 + 398) = 1;
      goto LABEL_23;
    }
    *((_BYTE *)v2 + 398) = 0;
    v73 = *((_QWORD *)v2 + 11);
    if (!v73)
    {
LABEL_23:
      AVFoundation_AVMediaCharacteristicAudible = (NSString *)PAL::get_AVFoundation_AVMediaCharacteristicAudible(EnabledTrack);
      v20 = WebCore::MediaPlayerPrivateAVFoundationObjC::firstEnabledTrack(v2, AVFoundation_AVMediaCharacteristicAudible) != 0;
      if (*((unsigned __int8 *)v2 + 393) == v20)
      {
LABEL_26:
        if (v17)
        {
          -[PAL naturalSize](v17, "naturalSize");
          v22 = v21;
          v24 = v23;
          -[PAL preferredTransform](v17, "preferredTransform");
          v25 = v24 * v740 + v738 * v22;
          v26 = v24 * v741 + v739 * v22;
          v27 = -v25;
          if (v25 >= 0.0)
            v27 = v24 * v740 + v738 * v22;
          if (v26 < 0.0)
            v26 = -v26;
        }
        else
        {
          v27 = 0.0;
          v26 = 0.0;
        }
        *((float *)v2 + 196) = v27;
        *((float *)v2 + 197) = v26;
        if (*((_QWORD *)v2 + 51))
        {
          WebCore::MediaPlayerPrivateAVFoundationObjC::updateRotationSession((uint64_t *)v2);
          WebCore::MediaPlayerPrivateAVFoundation::setNaturalSize((unsigned __int8 *)v2, *((float *)v2 + 196), *((float *)v2 + 197));
        }
        WebCore::MediaPlayerPrivateAVFoundation::updateStates((unsigned __int8 *)v2);
        goto LABEL_827;
      }
      *((_BYTE *)v2 + 393) = v20;
      if (*((_DWORD *)v2 + 96))
      {
        *((_BYTE *)v2 + 398) = 1;
        goto LABEL_26;
      }
      *((_BYTE *)v2 + 398) = 0;
      v76 = *((_QWORD *)v2 + 11);
      if (!v76)
        goto LABEL_26;
      v77 = *((_QWORD *)v2 + 12);
      if (__ldaxr((unsigned __int8 *)v76))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v76))
      {
        goto LABEL_355;
      }
      MEMORY[0x19AEA534C](v76);
LABEL_355:
      if (*(_QWORD *)(v76 + 24))
        ++*(_QWORD *)(v76 + 8);
      else
        v77 = 0;
      v230 = __ldxr((unsigned __int8 *)v76);
      if (v230 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v76))
        {
LABEL_363:
          if (v77)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v77 + 8) + 8) + 128))(*(_QWORD *)(*(_QWORD *)(v77 + 8) + 8));
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v77);
          }
          goto LABEL_26;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v76);
      goto LABEL_363;
    }
    v74 = *((_QWORD *)v2 + 12);
    if (__ldaxr((unsigned __int8 *)v73))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v73))
    {
      goto LABEL_343;
    }
    EnabledTrack = (PAL *)MEMORY[0x19AEA534C](v73);
LABEL_343:
    if (*(_QWORD *)(v73 + 24))
      ++*(_QWORD *)(v73 + 8);
    else
      v74 = 0;
    v229 = __ldxr((unsigned __int8 *)v73);
    if (v229 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v73))
      {
LABEL_351:
        if (v74)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v74 + 8) + 8) + 128))(*(_QWORD *)(*(_QWORD *)(v74 + 8) + 8));
          EnabledTrack = (PAL *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v74);
        }
        goto LABEL_23;
      }
    }
    else
    {
      __clrex();
    }
    EnabledTrack = (PAL *)WTF::Lock::unlockSlow((WTF::Lock *)v73);
    goto LABEL_351;
  }
  v736 = 0u;
  v737 = 0u;
  v734 = 0u;
  v735 = 0u;
  v5 = (void *)*((_QWORD *)v2 + 96);
  v6 = (PAL *)objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v734, v767, 16);
  v7 = v6;
  if (v6)
  {
    v732 = 0;
    v727 = 0;
    LODWORD(v8) = 0;
    v9 = *(_QWORD *)v735;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v735 != v9)
          objc_enumerationMutation(v5);
        v11 = *(void **)(*((_QWORD *)&v734 + 1) + 8 * (_QWORD)v10);
        if (objc_msgSend(v11, "isEnabled"))
        {
          v12 = (void *)objc_msgSend((id)objc_msgSend(v11, "assetTrack"), "mediaType");
          v13 = (PAL *)objc_msgSend(v12, "isEqualToString:", PAL::get_AVFoundation_AVMediaTypeVideo((PAL *)v12));
          if ((v13 & 1) != 0)
          {
            v732 = 1;
          }
          else
          {
            v14 = (PAL *)objc_msgSend(v12, "isEqualToString:", PAL::get_AVFoundation_AVMediaTypeAudio(v13));
            if ((v14 & 1) != 0)
              v727 = 1;
            else
              LODWORD(v8) = objc_msgSend(v12, "isEqualToString:", PAL::get_AVFoundation_AVMediaTypeMetadata(v14)) | v8;
          }
        }
        v10 = (PAL *)((char *)v10 + 1);
      }
      while (v7 != v10);
      v6 = (PAL *)objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v734, v767, 16);
      v7 = v6;
    }
    while (v6);
  }
  else
  {
    v732 = 0;
    v727 = 0;
    LOBYTE(v8) = 0;
  }
  v28 = *((_QWORD *)v2 + 11);
  if (!v28)
    goto LABEL_812;
  v29 = (WebCore::MediaPlayer *)*((_QWORD *)v2 + 12);
  if (__ldaxr((unsigned __int8 *)v28))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v28))
  {
    goto LABEL_37;
  }
  v6 = (PAL *)MEMORY[0x19AEA534C](v28);
LABEL_37:
  if (*(_QWORD *)(v28 + 24))
    ++*(_QWORD *)(v28 + 8);
  else
    v29 = 0;
  v31 = __ldxr((unsigned __int8 *)v28);
  if (v31 != 1)
  {
    __clrex();
LABEL_45:
    v6 = (PAL *)WTF::Lock::unlockSlow((WTF::Lock *)v28);
    if (!v29)
      goto LABEL_431;
    goto LABEL_46;
  }
  if (__stlxr(0, (unsigned __int8 *)v28))
    goto LABEL_45;
  if (!v29)
    goto LABEL_431;
LABEL_46:
  v765 = (WTF::StringImpl *)*((unsigned int *)v2 + 159);
  (*(void (**)(WTF **__return_ptr))(**(_QWORD **)(*((_QWORD *)v29 + 1) + 8) + 480))(&v742);
  v32 = *((_QWORD *)v2 + 82);
  if (v32)
    goto LABEL_47;
  v39 = (_DWORD *)*((_QWORD *)v2 + 51);
  if (!v39)
    goto LABEL_66;
  v39 = (_DWORD *)objc_msgSend(v39, "statusOfValueForKey:error:", CFSTR("availableMediaCharacteristicsWithMediaSelectionOptions"), 0);
  if (v39 == (_DWORD *)2)
  {
    v39 = (_DWORD *)objc_msgSend(*((id *)v2 + 51), "mediaSelectionGroupForMediaCharacteristic:", PAL::get_AVFoundation_AVMediaCharacteristicAudible((PAL *)2));
    v40 = v39;
    if (v39)
    {
      v41 = (const void *)*((_QWORD *)v2 + 53);
      v32 = WTF::fastMalloc((WTF *)0x68);
      WebCore::MediaSelectionGroupAVFObjC::MediaSelectionGroupAVFObjC(v32, v41, v40, (uint64_t)&v742);
      v39 = (_DWORD *)*((_QWORD *)v2 + 82);
      *((_QWORD *)v2 + 82) = v32;
      if (!v39)
        goto LABEL_47;
      if (*v39 == 1)
      {
        WebCore::MediaSelectionGroupAVFObjC::~MediaSelectionGroupAVFObjC((WebCore::MediaSelectionGroupAVFObjC *)v39);
        v39 = (_DWORD *)WTF::fastFree(v701, v702);
      }
      else
      {
        --*v39;
      }
    }
  }
  v32 = *((_QWORD *)v2 + 82);
  if (!v32)
  {
LABEL_66:
    v42 = (void *)*((_QWORD *)v2 + 96);
    AVFoundation_AVMediaTypeAudio = PAL::get_AVFoundation_AVMediaTypeAudio((PAL *)v39);
    v44 = objc_alloc(MEMORY[0x1E0C99E60]);
    v744 = (WTF::Logger *)MEMORY[0x1E0C809B0];
    v745 = (WTF *)3221225472;
    j = ___ZN7WebCore46determineChangedTracksFromNewTracksAndOldItemsIN3WTF6RefPtrINS_24AudioTrackPrivateAVFObjCENS1_12RawPtrTraitsIS3_EENS1_21DefaultRefDerefTraitsIS3_EEEERNS_17AudioTrackPrivateEEEvP7NSArrayP8NSStringRNS1_6VectorIT_Lm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEPFSG_P17AVPlayerItemTrackERNS2_INS_11MediaPlayerENS4_ISP_EENS6_ISP_EEEEMSP_FvT0_ESW__block_invoke;
    v747 = &unk_1E3204E20;
    v748 = AVFoundation_AVMediaTypeAudio;
    v45 = (void *)objc_msgSend(v44, "initWithArray:", objc_msgSend(v42, "objectsAtIndexes:", objc_msgSend(v42, "indexesOfObjectsPassingTest:", &v744)));
    v724 = v45;
    v46 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E20]), "initWithCapacity:", *((unsigned int *)v2 + 159));
    v47 = *((unsigned int *)v2 + 159);
    cf = v46;
    if ((_DWORD)v47)
    {
      v48 = *((_QWORD *)v2 + 78);
      v49 = 8 * v47;
      do
      {
        if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v48 + 128) + 8))
          objc_msgSend(v46, "addObject:");
        v48 += 8;
        v49 -= 8;
      }
      while (v49);
    }
    v50 = (void *)objc_msgSend(v46, "mutableCopy");
    objc_msgSend(v50, "minusSet:", v45);
    v51 = (void *)objc_msgSend(v45, "mutableCopy");
    objc_msgSend(v51, "minusSet:", cf);
    v755 = 0;
    v756 = 0;
    v753 = 0;
    *(_QWORD *)v754 = 0;
    v751 = 0;
    v752 = 0;
    v52 = *((unsigned int *)v2 + 159);
    if (!(_DWORD)v52)
    {
LABEL_106:
      v721 = v8;
      v760 = 0u;
      v761 = 0u;
      *(_OWORD *)v758 = 0u;
      v759 = 0u;
      v79 = objc_msgSend(v51, "countByEnumeratingWithState:objects:count:", v758, &buf, 16);
      if (v79)
      {
        v80 = *(_QWORD *)v759;
        do
        {
          for (i = 0; i != v79; ++i)
          {
            if (*(_QWORD *)v759 != v80)
              objc_enumerationMutation(v51);
            v82 = (AVPlayerItemTrack *)*((_QWORD *)v758[1] + i);
            v83 = (WebCore::AudioTrackPrivateAVFObjC *)WTF::fastMalloc((WTF *)0x98);
            WebCore::AudioTrackPrivateAVFObjC::AudioTrackPrivateAVFObjC(v83, v82);
            v749 = v83;
            LODWORD(v84) = v754[1];
            if (v754[1] == v754[0])
            {
              v85 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v753, v754[1] + 1, (unint64_t)&v749);
              v84 = v754[1];
              v86 = v753;
              v87 = *(_QWORD *)v85;
              *(_QWORD *)v85 = 0;
              *((_QWORD *)v86 + v84) = v87;
            }
            else
            {
              v749 = 0;
              *((_QWORD *)v753 + v754[1]) = v83;
            }
            v754[1] = v84 + 1;
            v88 = (unsigned int *)v749;
            v749 = 0;
            if (v88)
            {
              v89 = v88 + 2;
              do
              {
                v90 = __ldaxr(v89);
                v91 = v90 - 1;
              }
              while (__stlxr(v91, v89));
              if (!v91)
              {
                atomic_store(1u, v88 + 2);
                (*(void (**)(unsigned int *))(*(_QWORD *)v88 + 8))(v88);
              }
            }
          }
          v79 = objc_msgSend(v51, "countByEnumeratingWithState:objects:count:", v758, &buf, 16);
        }
        while (v79);
      }
      v92 = v754[1];
      v8 = HIDWORD(v756);
      v93 = v755;
      if (v754[1])
      {
        v715 = v3;
        v94 = v753;
        if (HIDWORD(v756) + (unint64_t)v754[1] > v756)
        {
          v95 = v756 + ((unint64_t)v756 >> 2);
          if (v95 >= 0x10)
            v96 = v95 + 1;
          else
            v96 = 16;
          if (v96 <= HIDWORD(v756) + (unint64_t)v754[1])
            v97 = HIDWORD(v756) + (unint64_t)v754[1];
          else
            v97 = v96;
          if (v97 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x19475B6C4);
          }
          v98 = (WTF *)WTF::fastMalloc((WTF *)(8 * v97));
          LODWORD(v756) = v97;
          v755 = v98;
          memcpy(v98, v93, 8 * v8);
          if (v93)
          {
            if (v98 == v93)
            {
              v98 = 0;
              v755 = 0;
              LODWORD(v756) = 0;
            }
            WTF::fastFree(v93, v33);
            v93 = v98;
          }
          else
          {
            v93 = v98;
          }
        }
        v231 = (_QWORD *)((char *)v93 + 8 * v8);
        v232 = (WTF *)((char *)v94 + 8 * v92);
        v3 = v715;
        do
        {
          v233 = *(_QWORD *)v94;
          if (*(_QWORD *)v94)
          {
            v234 = (unsigned int *)(v233 + 8);
            do
              v235 = __ldaxr(v234);
            while (__stlxr(v235 + 1, v234));
          }
          *v231++ = v233;
          v94 = (WTF *)((char *)v94 + 8);
        }
        while (v94 != v232);
        v93 = v755;
        LODWORD(v8) = v8 + v92;
      }
      v236 = (WTF *)*((_QWORD *)v726 + 78);
      *((_QWORD *)v726 + 78) = v93;
      v755 = v236;
      v237 = (WTF *)*((_QWORD *)v726 + 79);
      *((_DWORD *)v726 + 158) = (_DWORD)v756;
      *((_DWORD *)v726 + 159) = v8;
      v756 = v237;
      v238 = v751;
      v239 = HIDWORD(v752);
      LOBYTE(v8) = v721;
      if (HIDWORD(v752))
      {
        v240 = 8 * HIDWORD(v752);
        v241 = (WebCore::AudioTrackPrivate **)v751;
        do
        {
          WebCore::MediaPlayer::removeAudioTrack(v29, *v241++);
          v240 -= 8;
        }
        while (v240);
      }
      if (v754[1])
      {
        v242 = (WebCore::AudioTrackPrivate **)v753;
        v243 = 8 * v754[1];
        do
        {
          WebCore::MediaPlayer::addAudioTrack(v29, *v242++);
          v243 -= 8;
        }
        while (v243);
      }
      if ((_DWORD)v239)
      {
        v244 = (WTF *)((char *)v238 + 8 * v239);
        v2 = v726;
        do
        {
          v245 = *(unsigned int **)v238;
          *(_QWORD *)v238 = 0;
          if (v245)
          {
            v246 = v245 + 2;
            do
            {
              v247 = __ldaxr(v246);
              v248 = v247 - 1;
            }
            while (__stlxr(v248, v246));
            if (!v248)
            {
              atomic_store(1u, v245 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v245 + 8))(v245);
            }
          }
          v238 = (WTF *)((char *)v238 + 8);
        }
        while (v238 != v244);
        v238 = v751;
      }
      else
      {
        v2 = v726;
      }
      if (v238)
        WTF::fastFree(v238, v33);
      v249 = v753;
      if (v754[1])
      {
        v250 = (WTF *)((char *)v753 + 8 * v754[1]);
        do
        {
          v251 = *(unsigned int **)v249;
          *(_QWORD *)v249 = 0;
          if (v251)
          {
            v252 = v251 + 2;
            do
            {
              v253 = __ldaxr(v252);
              v254 = v253 - 1;
            }
            while (__stlxr(v254, v252));
            if (!v254)
            {
              atomic_store(1u, v251 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v251 + 8))(v251);
            }
          }
          v249 = (WTF *)((char *)v249 + 8);
        }
        while (v249 != v250);
        v249 = v753;
      }
      if (v249)
        WTF::fastFree(v249, v33);
      v255 = v755;
      if (HIDWORD(v756))
      {
        v256 = (WTF *)((char *)v755 + 8 * HIDWORD(v756));
        do
        {
          v257 = *(unsigned int **)v255;
          *(_QWORD *)v255 = 0;
          if (v257)
          {
            v258 = v257 + 2;
            do
            {
              v259 = __ldaxr(v258);
              v260 = v259 - 1;
            }
            while (__stlxr(v260, v258));
            if (!v260)
            {
              atomic_store(1u, v257 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v257 + 8))(v257);
            }
          }
          v255 = (WTF *)((char *)v255 + 8);
        }
        while (v255 != v256);
        v255 = v755;
      }
      if (v255)
        WTF::fastFree(v255, v33);
      if (v51)
        CFRelease(v51);
      if (v50)
        CFRelease(v50);
      if (cf)
        CFRelease(cf);
      if (v724)
        CFRelease(v724);
      goto LABEL_420;
    }
    v53 = *((_QWORD *)v2 + 78);
    v54 = v53 + 8 * v52;
    while (1)
    {
      if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v53 + 128) + 8) && objc_msgSend(v50, "containsObject:"))
      {
        v55 = HIDWORD(v752);
        if (HIDWORD(v752) == (_DWORD)v752)
        {
          v56 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v751, HIDWORD(v752) + 1, v53);
          v55 = HIDWORD(v752);
          v57 = v751;
          v58 = *(_QWORD *)v56;
          if (*(_QWORD *)v56)
          {
            v59 = (unsigned int *)(v58 + 8);
            do
              v60 = __ldaxr(v59);
            while (__stlxr(v60 + 1, v59));
            goto LABEL_93;
          }
LABEL_98:
          v69 = v55;
        }
        else
        {
          v57 = v751;
          v58 = *(_QWORD *)v53;
          if (!*(_QWORD *)v53)
            goto LABEL_98;
          v71 = (unsigned int *)(v58 + 8);
          do
            v72 = __ldaxr(v71);
          while (__stlxr(v72 + 1, v71));
LABEL_93:
          v69 = HIDWORD(v752);
        }
        *((_QWORD *)v57 + v55) = v58;
        v70 = (char *)&v752 + 4;
        goto LABEL_95;
      }
      v61 = HIDWORD(v756);
      if (HIDWORD(v756) == (_DWORD)v756)
      {
        v62 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v755, HIDWORD(v756) + 1, v53);
        v61 = HIDWORD(v756);
        v63 = v755;
        v64 = *(_QWORD *)v62;
        if (!*(_QWORD *)v62)
          goto LABEL_97;
        v65 = (unsigned int *)(v64 + 8);
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 + 1, v65));
      }
      else
      {
        v63 = v755;
        v64 = *(_QWORD *)v53;
        if (!*(_QWORD *)v53)
        {
LABEL_97:
          v69 = v61;
          goto LABEL_89;
        }
        v67 = (unsigned int *)(v64 + 8);
        do
          v68 = __ldaxr(v67);
        while (__stlxr(v68 + 1, v67));
      }
      v69 = HIDWORD(v756);
LABEL_89:
      *((_QWORD *)v63 + v61) = v64;
      v70 = (char *)&v756 + 4;
LABEL_95:
      *(_DWORD *)v70 = v69 + 1;
      v53 += 8;
      if (v53 == v54)
        goto LABEL_106;
    }
  }
LABEL_47:
  WebCore::MediaSelectionGroupAVFObjC::updateOptions(v32, (uint64_t)&v742);
  buf = 0uLL;
  v769 = 0;
  v34 = *(_QWORD **)(v32 + 24);
  if (v34)
  {
    v35 = *((unsigned int *)v34 - 1);
    v36 = &v34[2 * v35];
    if (*((_DWORD *)v34 - 3))
    {
      v37 = v34;
      if ((_DWORD)v35)
      {
        v38 = 16 * v35;
        v37 = v34;
        while ((unint64_t)(*v37 + 1) <= 1)
        {
          v37 += 2;
          v38 -= 16;
          if (!v38)
          {
            v37 = v36;
            goto LABEL_136;
          }
        }
      }
      goto LABEL_136;
    }
    v37 = &v34[2 * v35];
  }
  else
  {
    v37 = 0;
    v35 = 0;
  }
  v36 = &v34[2 * v35];
LABEL_136:
  if (v34)
    v99 = &v34[2 * *((unsigned int *)v34 - 1)];
  else
    v99 = 0;
  while (v37 != v99)
  {
    v100 = v37[1];
    if (v100 && *(_QWORD *)(v100 + 16))
      WTF::ListHashSet<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>,WTF::DefaultHash<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>>>::add((uint64_t **)v758, (uint64_t *)&buf, v37 + 1);
    v101 = v37 + 2;
    v37 = v36;
    if (v101 != v36)
    {
      v37 = v101;
      while ((unint64_t)(*v37 + 1) <= 1)
      {
        v37 += 2;
        if (v37 == v36)
        {
          v37 = v36;
          break;
        }
      }
    }
  }
  v758[0] = 0;
  v758[1] = 0;
  *(_QWORD *)&v759 = 0;
  v102 = *((unsigned int *)v2 + 159);
  if ((_DWORD)v102)
  {
    v103 = *((_QWORD *)v2 + 78);
    v104 = 8 * v102;
    do
    {
      v105 = *(WTF **)(*(_QWORD *)(*(_QWORD *)v103 + 128) + 24);
      if (v105)
      {
        ++*(_DWORD *)v105;
        v755 = v105;
        WTF::ListHashSet<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>,WTF::DefaultHash<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>>>::add((uint64_t **)&v744, (uint64_t *)v758, &v755);
        v106 = v755;
        if (v755)
        {
          if (*(_DWORD *)v755 == 1)
          {
            v107 = (const void *)*((_QWORD *)v755 + 2);
            *((_QWORD *)v755 + 2) = 0;
            if (v107)
              CFRelease(v107);
            WTF::fastFree(v106, v33);
          }
          else
          {
            --*(_DWORD *)v755;
          }
        }
      }
      v103 += 8;
      v104 -= 8;
    }
    while (v104);
    v108 = v758[1];
    v744 = 0;
    v745 = 0;
    for (j = 0; v108; v108 = (WTF *)*((_QWORD *)v108 + 2))
    {
      if ((_QWORD)buf)
      {
        v109 = *(_DWORD *)(buf - 8);
        v110 = ~(*(_QWORD *)v108 << 32) + *(_QWORD *)v108;
        v111 = (v110 ^ (v110 >> 22)) + ~((v110 ^ (v110 >> 22)) << 13);
        v112 = (9 * (v111 ^ (v111 >> 8))) ^ ((9 * (v111 ^ (v111 >> 8))) >> 15);
        v113 = v109 & (((v112 + ~(v112 << 27)) >> 31) ^ (v112 + ~((_DWORD)v112 << 27)));
        for (k = 1; ; ++k)
        {
          v115 = *(_QWORD **)(buf + 8 * v113);
          if (v115 != (_QWORD *)-1)
          {
            if (!v115)
              goto LABEL_167;
            if (*v115 == *(_QWORD *)v108)
              break;
          }
          v113 = (v113 + k) & v109;
        }
      }
      else
      {
LABEL_167:
        WTF::ListHashSet<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>,WTF::DefaultHash<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>>>::add((uint64_t **)&v755, (uint64_t *)&v744, v108);
      }
    }
  }
  else
  {
    v744 = 0;
    v745 = 0;
    j = 0;
  }
  v755 = 0;
  v756 = 0;
  v757 = 0;
  v116 = (_QWORD *)*((_QWORD *)&buf + 1);
  if (*((_QWORD *)&buf + 1))
  {
    do
    {
      if (v758[0])
      {
        v117 = *((_DWORD *)v758[0] - 2);
        v118 = ~(*v116 << 32) + *v116;
        v119 = (v118 ^ (v118 >> 22)) + ~((v118 ^ (v118 >> 22)) << 13);
        v120 = (9 * (v119 ^ (v119 >> 8))) ^ ((9 * (v119 ^ (v119 >> 8))) >> 15);
        v121 = v117 & (((v120 + ~(v120 << 27)) >> 31) ^ (v120 + ~((_DWORD)v120 << 27)));
        for (m = 1; ; ++m)
        {
          v123 = (_QWORD *)*((_QWORD *)v758[0] + v121);
          if (v123 != (_QWORD *)-1)
          {
            if (!v123)
              goto LABEL_178;
            if (*v123 == *v116)
              break;
          }
          v121 = (v121 + m) & v117;
        }
      }
      else
      {
LABEL_178:
        WTF::ListHashSet<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>,WTF::DefaultHash<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>>>::add((uint64_t **)&v753, (uint64_t *)&v755, v116);
      }
      v116 = (_QWORD *)v116[2];
    }
    while (v116);
  }
  v753 = 0;
  *(_QWORD *)v754 = 0;
  v751 = 0;
  v752 = 0;
  v749 = 0;
  v750 = 0;
  v124 = *((unsigned int *)v2 + 159);
  if ((_DWORD)v124)
  {
    v125 = *((_QWORD *)v2 + 78);
    v126 = v125 + 8 * v124;
    do
    {
      v127 = *(_QWORD *)v125;
      v128 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v125 + 128) + 24);
      if (v128)
      {
        if (!v744)
        {
LABEL_189:
          v136 = v754[1];
          if (v754[1] == v754[0])
          {
            v137 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v753, v754[1] + 1, v125);
            v138 = v754[1];
            v139 = v753;
            v140 = *(_QWORD *)v137;
            if (*(_QWORD *)v137)
            {
              v141 = (unsigned int *)(v140 + 8);
              do
                v142 = __ldaxr(v141);
              while (__stlxr(v142 + 1, v141));
              v143 = v754[1];
            }
            else
            {
              v143 = v754[1];
            }
            *((_QWORD *)v139 + v138) = v140;
          }
          else
          {
            v151 = v753;
            if (v127)
            {
              v152 = (unsigned int *)(v127 + 8);
              do
                v153 = __ldaxr(v152);
              while (__stlxr(v153 + 1, v152));
              v143 = v754[1];
            }
            else
            {
              v143 = v754[1];
            }
            *((_QWORD *)v151 + v136) = v127;
          }
          v154 = (char *)&v754[1];
          goto LABEL_221;
        }
        v129 = *((_DWORD *)v744 - 2);
        v130 = (~(v128 << 32) + v128) ^ ((unint64_t)(~(v128 << 32) + v128) >> 22);
        v131 = 9 * ((v130 + ~(v130 << 13)) ^ ((v130 + ~(v130 << 13)) >> 8));
        v132 = (v131 ^ (v131 >> 15)) + ~((v131 ^ (v131 >> 15)) << 27);
        v133 = v129 & ((v132 >> 31) ^ v132);
        for (n = 1; ; ++n)
        {
          v135 = (_QWORD *)*((_QWORD *)v744 + v133);
          if (v135 != (_QWORD *)-1)
          {
            if (!v135)
              goto LABEL_189;
            if (*v135 == v128)
              break;
          }
          v133 = (v133 + n) & v129;
        }
        v144 = HIDWORD(v750);
        if (HIDWORD(v750) != (_DWORD)v750)
        {
          v158 = v749;
          if (v127)
          {
            v161 = (unsigned int *)(v127 + 8);
            do
              v162 = __ldaxr(v161);
            while (__stlxr(v162 + 1, v161));
            goto LABEL_218;
          }
          v143 = HIDWORD(v750);
LABEL_219:
          *((_QWORD *)v158 + v144) = v127;
          goto LABEL_220;
        }
        v155 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v749, HIDWORD(v750) + 1, v125);
        v146 = HIDWORD(v750);
        v147 = v749;
        v148 = *(_QWORD *)v155;
        if (!*(_QWORD *)v155)
          goto LABEL_223;
        v156 = (unsigned int *)(v148 + 8);
        do
          v157 = __ldaxr(v156);
        while (__stlxr(v157 + 1, v156));
      }
      else
      {
        v144 = HIDWORD(v750);
        if (HIDWORD(v750) != (_DWORD)v750)
        {
          v158 = v749;
          v159 = (unsigned int *)(v127 + 8);
          do
            v160 = __ldaxr(v159);
          while (__stlxr(v160 + 1, v159));
LABEL_218:
          v143 = HIDWORD(v750);
          goto LABEL_219;
        }
        v145 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v749, HIDWORD(v750) + 1, v125);
        v146 = HIDWORD(v750);
        v147 = v749;
        v148 = *(_QWORD *)v145;
        if (!*(_QWORD *)v145)
        {
LABEL_223:
          v143 = v146;
          goto LABEL_211;
        }
        v149 = (unsigned int *)(v148 + 8);
        do
          v150 = __ldaxr(v149);
        while (__stlxr(v150 + 1, v149));
      }
      v143 = HIDWORD(v750);
LABEL_211:
      *((_QWORD *)v147 + v146) = v148;
LABEL_220:
      v154 = (char *)&v750 + 4;
LABEL_221:
      *(_DWORD *)v154 = v143 + 1;
      v125 += 8;
    }
    while (v125 != v126);
  }
  for (ii = v756; ii; ii = (WTF *)*((_QWORD *)ii + 2))
  {
    v164 = *(id **)ii;
    v165 = (WebCore::AudioTrackPrivateAVFObjC *)WTF::fastMalloc((WTF *)0x98);
    WebCore::AudioTrackPrivateAVFObjC::AudioTrackPrivateAVFObjC(v165, v164);
    v766 = v165;
    LODWORD(v166) = HIDWORD(v752);
    if (HIDWORD(v752) == (_DWORD)v752)
    {
      v167 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v751, HIDWORD(v752) + 1, (unint64_t)&v766);
      v166 = HIDWORD(v752);
      v168 = v751;
      v169 = *(_QWORD *)v167;
      *(_QWORD *)v167 = 0;
      *((_QWORD *)v168 + v166) = v169;
    }
    else
    {
      v766 = 0;
      *((_QWORD *)v751 + HIDWORD(v752)) = v165;
    }
    HIDWORD(v752) = v166 + 1;
    v170 = (unsigned int *)v766;
    v766 = 0;
    if (v170)
    {
      v171 = v170 + 2;
      do
      {
        v172 = __ldaxr(v171);
        v173 = v172 - 1;
      }
      while (__stlxr(v173, v171));
      if (!v173)
      {
        atomic_store(1u, v170 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v170 + 8))(v170);
      }
    }
  }
  v174 = v8;
  v8 = HIDWORD(v752);
  v175 = v754[1];
  v176 = v753;
  if (HIDWORD(v752))
  {
    v177 = v751;
    v178 = v754[1] + (unint64_t)HIDWORD(v752);
    if (v178 > v754[0])
    {
      v179 = v754[0] + ((unint64_t)v754[0] >> 2);
      if (v179 >= 0x10)
        v180 = v179 + 1;
      else
        v180 = 16;
      if (v180 <= v178)
        v181 = v754[1] + (unint64_t)HIDWORD(v752);
      else
        v181 = v180;
      if (v181 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x19475B6ACLL);
      }
      v182 = (WTF *)WTF::fastMalloc((WTF *)(8 * v181));
      v754[0] = v181;
      v753 = v182;
      memcpy(v182, v176, 8 * v175);
      if (v176)
      {
        if (v182 == v176)
        {
          v182 = 0;
          v753 = 0;
          v754[0] = 0;
        }
        WTF::fastFree(v176, v33);
        v176 = v182;
      }
      else
      {
        v176 = v182;
      }
    }
    v183 = (_QWORD *)((char *)v176 + 8 * v175);
    v184 = (WTF *)((char *)v177 + 8 * v8);
    LOBYTE(v8) = v174;
    do
    {
      v185 = *(_QWORD *)v177;
      if (*(_QWORD *)v177)
      {
        v186 = (unsigned int *)(v185 + 8);
        do
          v187 = __ldaxr(v186);
        while (__stlxr(v187 + 1, v186));
      }
      *v183++ = v185;
      v177 = (WTF *)((char *)v177 + 8);
    }
    while (v177 != v184);
    v176 = v753;
    LODWORD(v175) = v178;
  }
  else
  {
    LOBYTE(v8) = v174;
  }
  v188 = (WTF *)*((_QWORD *)v726 + 78);
  *((_QWORD *)v726 + 78) = v176;
  v753 = v188;
  v189 = *((_QWORD *)v726 + 79);
  *((_DWORD *)v726 + 158) = v754[0];
  *((_DWORD *)v726 + 159) = v175;
  v2 = v726;
  *(_QWORD *)v754 = v189;
  v190 = v749;
  v191 = HIDWORD(v750);
  if (HIDWORD(v750))
  {
    v192 = 8 * HIDWORD(v750);
    v193 = (WebCore::AudioTrackPrivate **)v749;
    do
    {
      WebCore::MediaPlayer::removeAudioTrack(v29, *v193++);
      v192 -= 8;
    }
    while (v192);
  }
  if (HIDWORD(v752))
  {
    v194 = (WebCore::AudioTrackPrivate **)v751;
    v195 = 8 * HIDWORD(v752);
    do
    {
      WebCore::MediaPlayer::addAudioTrack(v29, *v194++);
      v195 -= 8;
    }
    while (v195);
  }
  if ((_DWORD)v191)
  {
    v196 = (WTF *)((char *)v190 + 8 * v191);
    do
    {
      v197 = *(unsigned int **)v190;
      *(_QWORD *)v190 = 0;
      if (v197)
      {
        v198 = v197 + 2;
        do
        {
          v199 = __ldaxr(v198);
          v200 = v199 - 1;
        }
        while (__stlxr(v200, v198));
        if (!v200)
        {
          atomic_store(1u, v197 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v197 + 8))(v197);
        }
      }
      v190 = (WTF *)((char *)v190 + 8);
    }
    while (v190 != v196);
    v190 = v749;
  }
  if (v190)
    WTF::fastFree(v190, v33);
  v201 = v751;
  if (HIDWORD(v752))
  {
    v202 = (WTF *)((char *)v751 + 8 * HIDWORD(v752));
    do
    {
      v203 = *(unsigned int **)v201;
      *(_QWORD *)v201 = 0;
      if (v203)
      {
        v204 = v203 + 2;
        do
        {
          v205 = __ldaxr(v204);
          v206 = v205 - 1;
        }
        while (__stlxr(v206, v204));
        if (!v206)
        {
          atomic_store(1u, v203 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v203 + 8))(v203);
        }
      }
      v201 = (WTF *)((char *)v201 + 8);
    }
    while (v201 != v202);
    v201 = v751;
  }
  if (v201)
    WTF::fastFree(v201, v33);
  v207 = v753;
  if (v754[1])
  {
    v208 = (WTF *)((char *)v753 + 8 * v754[1]);
    do
    {
      v209 = *(unsigned int **)v207;
      *(_QWORD *)v207 = 0;
      if (v209)
      {
        v210 = v209 + 2;
        do
        {
          v211 = __ldaxr(v210);
          v212 = v211 - 1;
        }
        while (__stlxr(v212, v210));
        if (!v212)
        {
          atomic_store(1u, v209 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v209 + 8))(v209);
        }
      }
      v207 = (WTF *)((char *)v207 + 8);
    }
    while (v207 != v208);
    v207 = v753;
  }
  if (v207)
    WTF::fastFree(v207, v33);
  v213 = v756;
  while (v213)
  {
    v215 = v213;
    v213 = (WTF *)*((_QWORD *)v213 + 2);
    v216 = *(WTF **)v215;
    *(_QWORD *)v215 = 0;
    if (v216)
    {
      if (*(_DWORD *)v216 == 1)
      {
        v214 = (const void *)*((_QWORD *)v216 + 2);
        *((_QWORD *)v216 + 2) = 0;
        if (v214)
          CFRelease(v214);
        WTF::fastFree(v216, v33);
      }
      else
      {
        --*(_DWORD *)v216;
      }
    }
    WTF::fastFree(v215, v33);
  }
  if (v755)
    WTF::fastFree((WTF *)((char *)v755 - 16), v33);
  v217 = v745;
  while (v217)
  {
    v219 = v217;
    v217 = (WTF *)*((_QWORD *)v217 + 2);
    v220 = *(WTF **)v219;
    *(_QWORD *)v219 = 0;
    if (v220)
    {
      if (*(_DWORD *)v220 == 1)
      {
        v218 = (const void *)*((_QWORD *)v220 + 2);
        *((_QWORD *)v220 + 2) = 0;
        if (v218)
          CFRelease(v218);
        WTF::fastFree(v220, v33);
      }
      else
      {
        --*(_DWORD *)v220;
      }
    }
    WTF::fastFree(v219, v33);
  }
  if (v744)
    WTF::fastFree((WTF::Logger *)((char *)v744 - 16), v33);
  v221 = v758[1];
  while (v221)
  {
    v223 = v221;
    v221 = (WTF *)*((_QWORD *)v221 + 2);
    v224 = *(WTF **)v223;
    *(_QWORD *)v223 = 0;
    if (v224)
    {
      if (*(_DWORD *)v224 == 1)
      {
        v222 = (const void *)*((_QWORD *)v224 + 2);
        *((_QWORD *)v224 + 2) = 0;
        if (v222)
          CFRelease(v222);
        WTF::fastFree(v224, v33);
      }
      else
      {
        --*(_DWORD *)v224;
      }
    }
    WTF::fastFree(v223, v33);
  }
  if (v758[0])
    WTF::fastFree((WTF *)((char *)v758[0] - 16), v33);
  v225 = (WTF *)*((_QWORD *)&buf + 1);
  if (*((_QWORD *)&buf + 1))
  {
    do
    {
      v227 = v225;
      v225 = (WTF *)*((_QWORD *)v225 + 2);
      v228 = *(WTF **)v227;
      *(_QWORD *)v227 = 0;
      if (v228)
      {
        if (*(_DWORD *)v228 == 1)
        {
          v226 = (const void *)*((_QWORD *)v228 + 2);
          *((_QWORD *)v228 + 2) = 0;
          if (v226)
            CFRelease(v226);
          WTF::fastFree(v228, v33);
        }
        else
        {
          --*(_DWORD *)v228;
        }
      }
      WTF::fastFree(v227, v33);
    }
    while (v225);
  }
  if ((_QWORD)buf)
    WTF::fastFree((WTF *)(buf - 16), v33);
LABEL_420:
  v261 = *((unsigned int *)v2 + 159);
  if ((_DWORD)v261)
  {
    v262 = (WebCore::AudioTrackPrivateAVFObjC **)*((_QWORD *)v2 + 78);
    v263 = 8 * v261;
    do
    {
      WebCore::AudioTrackPrivateAVFObjC::resetPropertiesFromTrack(*v262++);
      v263 -= 8;
    }
    while (v263);
    v264 = (WTF *)*((unsigned int *)v2 + 159);
  }
  else
  {
    v264 = 0;
  }
  v265 = *((_QWORD *)v2 + 35);
  v266 = (WTF::StringImpl *)*((_QWORD *)v2 + 36);
  *(_QWORD *)&buf = "MediaPlayerPrivateAVFoundationObjC";
  *((_QWORD *)&buf + 1) = 35;
  v769 = "updateAudioTracks";
  v770 = v266;
  v758[0] = v264;
  if (*(_BYTE *)(v265 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [17],unsigned long,char [6],unsigned long>((uint64_t)&WebCore::LogMedia, (WTF::Logger::LogSiteIdentifier *)&buf, &v765, v758);
  if (HIDWORD(v743))
  {
    v705 = v742;
    v706 = 8 * HIDWORD(v743);
    do
    {
      v707 = *(WTF::StringImpl **)v705;
      *(_QWORD *)v705 = 0;
      if (v707)
      {
        if (*(_DWORD *)v707 == 2)
          WTF::StringImpl::destroy(v707, (WTF::StringImpl *)v33);
        else
          *(_DWORD *)v707 -= 2;
      }
      v705 = (WTF *)((char *)v705 + 8);
      v706 -= 8;
    }
    while (v706);
  }
  v267 = v742;
  if (v742)
  {
    v742 = 0;
    LODWORD(v743) = 0;
    WTF::fastFree(v267, v33);
  }
  v6 = (PAL *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v29);
LABEL_431:
  v268 = *((_QWORD *)v2 + 11);
  if (!v268)
    goto LABEL_812;
  v269 = (WebCore::MediaPlayer *)*((_QWORD *)v2 + 12);
  if (__ldaxr((unsigned __int8 *)v268))
  {
    __clrex();
LABEL_435:
    v6 = (PAL *)MEMORY[0x19AEA534C](v268);
    goto LABEL_436;
  }
  if (__stxr(1u, (unsigned __int8 *)v268))
    goto LABEL_435;
LABEL_436:
  if (*(_QWORD *)(v268 + 24))
    ++*(_QWORD *)(v268 + 8);
  else
    v269 = 0;
  v271 = __ldxr((unsigned __int8 *)v268);
  if (v271 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v268))
    {
      if (!v269)
        goto LABEL_812;
LABEL_445:
      v718 = v269;
      v272 = *((_DWORD *)v2 + 163);
      v764 = (WTF::StringImpl *)v272;
      v273 = (void *)*((_QWORD *)v2 + 96);
      AVFoundation_AVMediaTypeVideo = PAL::get_AVFoundation_AVMediaTypeVideo(v6);
      v275 = objc_alloc(MEMORY[0x1E0C99E60]);
      v744 = (WTF::Logger *)MEMORY[0x1E0C809B0];
      v745 = (WTF *)3221225472;
      j = ___ZN7WebCore46determineChangedTracksFromNewTracksAndOldItemsIN3WTF6RefPtrINS_24VideoTrackPrivateAVFObjCENS1_12RawPtrTraitsIS3_EENS1_21DefaultRefDerefTraitsIS3_EEEERNS_17VideoTrackPrivateEEEvP7NSArrayP8NSStringRNS1_6VectorIT_Lm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEPFSG_P17AVPlayerItemTrackERNS2_INS_11MediaPlayerENS4_ISP_EENS6_ISP_EEEEMSP_FvT0_ESW__block_invoke;
      v747 = &unk_1E3204E20;
      v748 = AVFoundation_AVMediaTypeVideo;
      v720 = (void *)objc_msgSend(v275, "initWithArray:", objc_msgSend(v273, "objectsAtIndexes:", objc_msgSend(v273, "indexesOfObjectsPassingTest:", &v744)));
      v714 = v272;
      v276 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E20]), "initWithCapacity:", *((unsigned int *)v2 + 163));
      v277 = *((unsigned int *)v2 + 163);
      if ((_DWORD)v277)
      {
        v278 = *((_QWORD *)v2 + 80);
        v279 = 8 * v277;
        do
        {
          if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v278 + 144) + 8))
            objc_msgSend(v276, "addObject:");
          v278 += 8;
          v279 -= 8;
        }
        while (v279);
      }
      v280 = (void *)objc_msgSend(v276, "mutableCopy");
      objc_msgSend(v280, "minusSet:", v720);
      v723 = v276;
      v725 = v280;
      cfa = (void *)objc_msgSend(v720, "mutableCopy");
      objc_msgSend(cfa, "minusSet:", v276);
      v755 = 0;
      v756 = 0;
      v753 = 0;
      *(_QWORD *)v754 = 0;
      v751 = 0;
      v752 = 0;
      v281 = *((unsigned int *)v2 + 163);
      if ((_DWORD)v281)
      {
        v282 = *((_QWORD *)v2 + 80);
        v283 = v282 + 8 * v281;
        do
        {
          if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v282 + 144) + 8)
            && objc_msgSend(v725, "containsObject:"))
          {
            v284 = HIDWORD(v752);
            if (HIDWORD(v752) == (_DWORD)v752)
            {
              v285 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v751, HIDWORD(v752) + 1, v282);
              v284 = HIDWORD(v752);
              v286 = v751;
              v287 = *(_QWORD *)v285;
              if (*(_QWORD *)v285)
              {
                v288 = (unsigned int *)(v287 + 8);
                do
                  v289 = __ldaxr(v288);
                while (__stlxr(v289 + 1, v288));
                goto LABEL_472;
              }
LABEL_477:
              v298 = v284;
            }
            else
            {
              v286 = v751;
              v287 = *(_QWORD *)v282;
              if (!*(_QWORD *)v282)
                goto LABEL_477;
              v300 = (unsigned int *)(v287 + 8);
              do
                v301 = __ldaxr(v300);
              while (__stlxr(v301 + 1, v300));
LABEL_472:
              v298 = HIDWORD(v752);
            }
            *((_QWORD *)v286 + v284) = v287;
            v299 = (char *)&v752 + 4;
            goto LABEL_474;
          }
          v290 = HIDWORD(v756);
          if (HIDWORD(v756) == (_DWORD)v756)
          {
            v291 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v755, HIDWORD(v756) + 1, v282);
            v290 = HIDWORD(v756);
            v292 = v755;
            v293 = *(_QWORD *)v291;
            if (!*(_QWORD *)v291)
              goto LABEL_476;
            v294 = (unsigned int *)(v293 + 8);
            do
              v295 = __ldaxr(v294);
            while (__stlxr(v295 + 1, v294));
          }
          else
          {
            v292 = v755;
            v293 = *(_QWORD *)v282;
            if (!*(_QWORD *)v282)
            {
LABEL_476:
              v298 = v290;
              goto LABEL_468;
            }
            v296 = (unsigned int *)(v293 + 8);
            do
              v297 = __ldaxr(v296);
            while (__stlxr(v297 + 1, v296));
          }
          v298 = HIDWORD(v756);
LABEL_468:
          *((_QWORD *)v292 + v290) = v293;
          v299 = (char *)&v756 + 4;
LABEL_474:
          *(_DWORD *)v299 = v298 + 1;
          v282 += 8;
        }
        while (v282 != v283);
      }
      v722 = v8;
      v760 = 0u;
      v761 = 0u;
      *(_OWORD *)v758 = 0u;
      v759 = 0u;
      v303 = objc_msgSend(cfa, "countByEnumeratingWithState:objects:count:", v758, &buf, 16);
      if (v303)
      {
        v304 = *(_QWORD *)v759;
        do
        {
          for (jj = 0; jj != v303; ++jj)
          {
            if (*(_QWORD *)v759 != v304)
              objc_enumerationMutation(cfa);
            v306 = (void *)*((_QWORD *)v758[1] + jj);
            v307 = WTF::fastMalloc((WTF *)0xA8);
            v308 = (WebCore::AVTrackPrivateAVFObjCImpl *)WTF::fastMalloc((WTF *)0x38);
            v309 = WebCore::AVTrackPrivateAVFObjCImpl::AVTrackPrivateAVFObjCImpl(v308, v306);
            *(_DWORD *)(v307 + 8) = 1;
            *(_BYTE *)(v307 + 12) = 0;
            *(_QWORD *)(v307 + 24) = 0;
            *(_QWORD *)(v307 + 32) = 0;
            *(_QWORD *)(v307 + 16) = 0;
            *(_BYTE *)(v307 + 48) = 0;
            *(_OWORD *)(v307 + 56) = 0u;
            *(_OWORD *)(v307 + 72) = 0u;
            *(_OWORD *)(v307 + 88) = 0u;
            *(_BYTE *)(v307 + 104) = 6;
            *(_QWORD *)(v307 + 120) = 0;
            *(_QWORD *)(v307 + 128) = 0;
            *(_DWORD *)(v307 + 136) = 0;
            *(_QWORD *)v307 = off_1E3410C68;
            *(_QWORD *)(v307 + 144) = v309;
            v310 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            v310[1] = v307;
            *(_QWORD *)(v307 + 152) = 0;
            v311 = (uint64_t *)(v307 + 152);
            *v310 = off_1E34114D0;
            *(_QWORD *)(v307 + 160) = v310;
            v312 = *(_QWORD *)(v307 + 144);
            v313 = WTF::fastCompactMalloc((WTF *)0x10);
            *(_DWORD *)v313 = 1;
            *(_QWORD *)(v313 + 8) = v307 + 152;
            v315 = *(unsigned int **)(v307 + 152);
            *(_QWORD *)(v307 + 152) = v313;
            if (!v315)
              goto LABEL_1229;
            do
            {
              v316 = __ldaxr(v315);
              v317 = v316 - 1;
            }
            while (__stlxr(v317, v315));
            if (!v317)
            {
              atomic_store(1u, v315);
              WTF::fastFree((WTF *)v315, v314);
            }
            v313 = *v311;
            if (*v311)
            {
LABEL_1229:
              do
                v318 = __ldaxr((unsigned int *)v313);
              while (__stlxr(v318 + 1, (unsigned int *)v313));
            }
            v319 = *(unsigned int **)(v312 + 40);
            *(_QWORD *)(v312 + 40) = v313;
            if (v319)
            {
              do
              {
                v320 = __ldaxr(v319);
                v321 = v320 - 1;
              }
              while (__stlxr(v321, v319));
              if (!v321)
              {
                atomic_store(1u, v319);
                WTF::fastFree((WTF *)v319, v314);
              }
            }
            WebCore::VideoTrackPrivateAVFObjC::resetPropertiesFromTrack((WebCore::VideoTrackPrivateAVFObjC *)v307);
            v749 = (WTF *)v307;
            LODWORD(v322) = v754[1];
            if (v754[1] == v754[0])
            {
              v323 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v753, v754[1] + 1, (unint64_t)&v749);
              v322 = v754[1];
              v324 = v753;
              v325 = *(_QWORD *)v323;
              *(_QWORD *)v323 = 0;
              *((_QWORD *)v324 + v322) = v325;
            }
            else
            {
              v749 = 0;
              *((_QWORD *)v753 + v754[1]) = v307;
            }
            v754[1] = v322 + 1;
            v326 = (unsigned int *)v749;
            v749 = 0;
            if (v326)
            {
              v327 = v326 + 2;
              do
              {
                v328 = __ldaxr(v327);
                v329 = v328 - 1;
              }
              while (__stlxr(v329, v327));
              if (!v329)
              {
                atomic_store(1u, v326 + 2);
                (*(void (**)(unsigned int *))(*(_QWORD *)v326 + 8))(v326);
              }
            }
          }
          v303 = objc_msgSend(cfa, "countByEnumeratingWithState:objects:count:", v758, &buf, 16);
        }
        while (v303);
      }
      v330 = v754[1];
      v331 = HIDWORD(v756);
      v332 = v755;
      if (v754[1])
      {
        v333 = v753;
        v334 = HIDWORD(v756) + (unint64_t)v754[1];
        if (v334 > v756)
        {
          v335 = v756 + ((unint64_t)v756 >> 2);
          if (v335 >= 0x10)
            v336 = v335 + 1;
          else
            v336 = 16;
          if (v336 <= v334)
            v337 = HIDWORD(v756) + (unint64_t)v754[1];
          else
            v337 = v336;
          if (v337 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x19475B6B4);
          }
          v338 = (WTF *)WTF::fastMalloc((WTF *)(8 * v337));
          LODWORD(v756) = v337;
          v755 = v338;
          memcpy(v338, v332, 8 * v331);
          if (v332)
          {
            if (v338 == v332)
            {
              v338 = 0;
              v755 = 0;
              LODWORD(v756) = 0;
            }
            WTF::fastFree(v332, v302);
            v332 = v338;
          }
          else
          {
            v332 = v338;
          }
        }
        v339 = (_QWORD *)((char *)v332 + 8 * v331);
        v340 = (WTF *)((char *)v333 + 8 * v330);
        v2 = v726;
        LOBYTE(v8) = v722;
        do
        {
          v341 = *(_QWORD *)v333;
          if (*(_QWORD *)v333)
          {
            v342 = (unsigned int *)(v341 + 8);
            do
              v343 = __ldaxr(v342);
            while (__stlxr(v343 + 1, v342));
          }
          *v339++ = v341;
          v333 = (WTF *)((char *)v333 + 8);
        }
        while (v333 != v340);
        v332 = v755;
        LODWORD(v331) = v334;
      }
      else
      {
        v2 = v726;
      }
      v344 = (WTF *)*((_QWORD *)v2 + 80);
      *((_QWORD *)v2 + 80) = v332;
      v755 = v344;
      v345 = (WTF *)*((_QWORD *)v2 + 81);
      *((_DWORD *)v2 + 162) = (_DWORD)v756;
      *((_DWORD *)v2 + 163) = v331;
      v756 = v345;
      v346 = v751;
      v347 = HIDWORD(v752);
      v348 = (unsigned __int8 **)v718;
      if (HIDWORD(v752))
      {
        v349 = 8 * HIDWORD(v752);
        v350 = (WebCore::VideoTrackPrivate **)v751;
        do
        {
          WebCore::MediaPlayer::removeVideoTrack(v718, *v350++);
          v349 -= 8;
        }
        while (v349);
      }
      if (v754[1])
      {
        v351 = (WebCore::VideoTrackPrivate **)v753;
        v352 = 8 * v754[1];
        do
        {
          WebCore::MediaPlayer::addVideoTrack(v718, *v351++);
          v352 -= 8;
        }
        while (v352);
      }
      if ((_DWORD)v347)
      {
        v353 = (WTF *)((char *)v346 + 8 * v347);
        do
        {
          v354 = *(unsigned int **)v346;
          *(_QWORD *)v346 = 0;
          if (v354)
          {
            v355 = v354 + 2;
            do
            {
              v356 = __ldaxr(v355);
              v357 = v356 - 1;
            }
            while (__stlxr(v357, v355));
            if (!v357)
            {
              atomic_store(1u, v354 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v354 + 8))(v354);
            }
          }
          v346 = (WTF *)((char *)v346 + 8);
        }
        while (v346 != v353);
        v346 = v751;
      }
      v358 = v723;
      if (v346)
        WTF::fastFree(v346, v302);
      v359 = v753;
      if (v754[1])
      {
        v360 = (WTF *)((char *)v753 + 8 * v754[1]);
        do
        {
          v361 = *(unsigned int **)v359;
          *(_QWORD *)v359 = 0;
          if (v361)
          {
            v362 = v361 + 2;
            do
            {
              v363 = __ldaxr(v362);
              v364 = v363 - 1;
            }
            while (__stlxr(v364, v362));
            if (!v364)
            {
              atomic_store(1u, v361 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v361 + 8))(v361);
            }
          }
          v359 = (WTF *)((char *)v359 + 8);
        }
        while (v359 != v360);
        v359 = v753;
        v358 = v723;
      }
      if (v359)
        WTF::fastFree(v359, v302);
      v365 = v755;
      if (HIDWORD(v756))
      {
        v366 = (WTF *)((char *)v755 + 8 * HIDWORD(v756));
        do
        {
          v367 = *(unsigned int **)v365;
          *(_QWORD *)v365 = 0;
          if (v367)
          {
            v368 = v367 + 2;
            do
            {
              v369 = __ldaxr(v368);
              v370 = v369 - 1;
            }
            while (__stlxr(v370, v368));
            if (!v370)
            {
              atomic_store(1u, v367 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v367 + 8))(v367);
            }
          }
          v365 = (WTF *)((char *)v365 + 8);
        }
        while (v365 != v366);
        v365 = v755;
        v358 = v723;
      }
      v371 = cfa;
      if (v365)
      {
        WTF::fastFree(v365, v302);
        v371 = cfa;
      }
      if (v371)
        CFRelease(v371);
      if (v725)
        CFRelease(v725);
      if (v358)
        CFRelease(v358);
      if (v720)
        CFRelease(v720);
      v372 = *((_QWORD *)v2 + 83);
      if (!v372)
      {
        v379 = (void *)*((_QWORD *)v2 + 51);
        if (!v379)
          goto LABEL_804;
        if (objc_msgSend(v379, "statusOfValueForKey:error:", CFSTR("availableMediaCharacteristicsWithMediaSelectionOptions"), 0) == 2)
        {
          v380 = (const void *)objc_msgSend(*((id *)v2 + 51), "mediaSelectionGroupForMediaCharacteristic:", PAL::get_AVFoundation_AVMediaCharacteristicVisual((PAL *)2));
          if (v380)
          {
            v381 = (const void *)*((_QWORD *)v2 + 53);
            buf = 0uLL;
            v382 = WTF::fastMalloc((WTF *)0x68);
            WebCore::MediaSelectionGroupAVFObjC::MediaSelectionGroupAVFObjC(v382, v381, v380, (uint64_t)&buf);
            v384 = (WebCore::MediaSelectionGroupAVFObjC *)*((_QWORD *)v2 + 83);
            *((_QWORD *)v2 + 83) = v382;
            v348 = (unsigned __int8 **)v718;
            if (v384)
            {
              if (*(_DWORD *)v384 == 1)
              {
                WebCore::MediaSelectionGroupAVFObjC::~MediaSelectionGroupAVFObjC(v384);
                WTF::fastFree(v703, v704);
              }
              else
              {
                --*(_DWORD *)v384;
              }
            }
            if (HIDWORD(buf))
            {
              v711 = (WTF::StringImpl **)buf;
              v712 = 8 * HIDWORD(buf);
              do
              {
                v713 = *v711;
                *v711 = 0;
                if (v713)
                {
                  if (*(_DWORD *)v713 == 2)
                    WTF::StringImpl::destroy(v713, v383);
                  else
                    *(_DWORD *)v713 -= 2;
                }
                ++v711;
                v712 -= 8;
              }
              while (v712);
            }
            v385 = (WTF *)buf;
            if ((_QWORD)buf)
            {
              *(_QWORD *)&buf = 0;
              DWORD2(buf) = 0;
              WTF::fastFree(v385, v383);
            }
          }
        }
        v372 = *((_QWORD *)v2 + 83);
        if (!v372)
        {
LABEL_804:
          v520 = *((unsigned int *)v2 + 163);
          if ((_DWORD)v520)
          {
            v521 = (WebCore::VideoTrackPrivateAVFObjC **)*((_QWORD *)v2 + 80);
            v522 = 8 * v520;
            do
            {
              WebCore::VideoTrackPrivateAVFObjC::resetPropertiesFromTrack(*v521++);
              v522 -= 8;
            }
            while (v522);
          }
          if (v714)
            *((_BYTE *)v2 + 966) = 0;
          v523 = *((_QWORD *)v2 + 35);
          v524 = (WTF::StringImpl *)*((_QWORD *)v2 + 36);
          *(_QWORD *)&buf = "MediaPlayerPrivateAVFoundationObjC";
          *((_QWORD *)&buf + 1) = 35;
          v769 = "updateVideoTracks";
          v770 = v524;
          v758[0] = (WTF *)*((unsigned int *)v2 + 163);
          if (*(_BYTE *)(v523 + 12))
            WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [17],unsigned long,char [6],unsigned long>((uint64_t)&WebCore::LogMedia, (WTF::Logger::LogSiteIdentifier *)&buf, &v764, v758);
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v348);
          goto LABEL_812;
        }
      }
      v742 = 0;
      v743 = 0;
      WebCore::MediaSelectionGroupAVFObjC::updateOptions(v372, (uint64_t)&v742);
      buf = 0uLL;
      v769 = 0;
      v374 = *(_QWORD **)(v372 + 24);
      if (v374)
      {
        v375 = *((unsigned int *)v374 - 1);
        v376 = &v374[2 * v375];
        if (*((_DWORD *)v374 - 3))
        {
          v377 = v374;
          if ((_DWORD)v375)
          {
            v378 = 16 * v375;
            v377 = v374;
            while ((unint64_t)(*v377 + 1) <= 1)
            {
              v377 += 2;
              v378 -= 16;
              if (!v378)
              {
                v377 = v376;
                goto LABEL_594;
              }
            }
          }
          goto LABEL_594;
        }
        v377 = &v374[2 * v375];
      }
      else
      {
        v377 = 0;
        v375 = 0;
      }
      v376 = &v374[2 * v375];
LABEL_594:
      if (v374)
        v386 = &v374[2 * *((unsigned int *)v374 - 1)];
      else
        v386 = 0;
      while (v377 != v386)
      {
        v387 = v377[1];
        if (v387 && *(_QWORD *)(v387 + 16))
          WTF::ListHashSet<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>,WTF::DefaultHash<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>>>::add((uint64_t **)v758, (uint64_t *)&buf, v377 + 1);
        v388 = v377 + 2;
        v377 = v376;
        if (v388 != v376)
        {
          v377 = v388;
          while ((unint64_t)(*v377 + 1) <= 1)
          {
            v377 += 2;
            if (v377 == v376)
            {
              v377 = v376;
              break;
            }
          }
        }
      }
      v758[0] = 0;
      v758[1] = 0;
      *(_QWORD *)&v759 = 0;
      v389 = *((unsigned int *)v2 + 163);
      if ((_DWORD)v389)
      {
        v390 = *((_QWORD *)v2 + 80);
        v391 = 8 * v389;
        do
        {
          v392 = *(WTF **)(*(_QWORD *)(*(_QWORD *)v390 + 144) + 24);
          if (v392)
          {
            ++*(_DWORD *)v392;
            v755 = v392;
            WTF::ListHashSet<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>,WTF::DefaultHash<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>>>::add((uint64_t **)&v744, (uint64_t *)v758, &v755);
            v393 = v755;
            if (v755)
            {
              if (*(_DWORD *)v755 == 1)
              {
                v394 = (const void *)*((_QWORD *)v755 + 2);
                *((_QWORD *)v755 + 2) = 0;
                if (v394)
                  CFRelease(v394);
                WTF::fastFree(v393, v373);
              }
              else
              {
                --*(_DWORD *)v755;
              }
            }
          }
          v390 += 8;
          v391 -= 8;
        }
        while (v391);
        v395 = v758[1];
        v744 = 0;
        v745 = 0;
        for (j = 0; v395; v395 = (WTF *)*((_QWORD *)v395 + 2))
        {
          if ((_QWORD)buf)
          {
            v396 = *(_DWORD *)(buf - 8);
            v397 = ~(*(_QWORD *)v395 << 32) + *(_QWORD *)v395;
            v398 = (v397 ^ (v397 >> 22)) + ~((v397 ^ (v397 >> 22)) << 13);
            v399 = (9 * (v398 ^ (v398 >> 8))) ^ ((9 * (v398 ^ (v398 >> 8))) >> 15);
            v400 = v396 & (((v399 + ~(v399 << 27)) >> 31) ^ (v399 + ~((_DWORD)v399 << 27)));
            for (kk = 1; ; ++kk)
            {
              v402 = *(_QWORD **)(buf + 8 * v400);
              if (v402 != (_QWORD *)-1)
              {
                if (!v402)
                  goto LABEL_625;
                if (*v402 == *(_QWORD *)v395)
                  break;
              }
              v400 = (v400 + kk) & v396;
            }
          }
          else
          {
LABEL_625:
            WTF::ListHashSet<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>,WTF::DefaultHash<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>>>::add((uint64_t **)&v755, (uint64_t *)&v744, v395);
          }
        }
      }
      else
      {
        v744 = 0;
        v745 = 0;
        j = 0;
      }
      v755 = 0;
      v756 = 0;
      v757 = 0;
      v403 = (_QWORD *)*((_QWORD *)&buf + 1);
      if (*((_QWORD *)&buf + 1))
      {
        do
        {
          if (v758[0])
          {
            v404 = *((_DWORD *)v758[0] - 2);
            v405 = ~(*v403 << 32) + *v403;
            v406 = (v405 ^ (v405 >> 22)) + ~((v405 ^ (v405 >> 22)) << 13);
            v407 = (9 * (v406 ^ (v406 >> 8))) ^ ((9 * (v406 ^ (v406 >> 8))) >> 15);
            v408 = v404 & (((v407 + ~(v407 << 27)) >> 31) ^ (v407 + ~((_DWORD)v407 << 27)));
            for (mm = 1; ; ++mm)
            {
              v410 = (_QWORD *)*((_QWORD *)v758[0] + v408);
              if (v410 != (_QWORD *)-1)
              {
                if (!v410)
                  goto LABEL_636;
                if (*v410 == *v403)
                  break;
              }
              v408 = (v408 + mm) & v404;
            }
          }
          else
          {
LABEL_636:
            WTF::ListHashSet<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>,WTF::DefaultHash<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>>>::add((uint64_t **)&v753, (uint64_t *)&v755, v403);
          }
          v403 = (_QWORD *)v403[2];
        }
        while (v403);
      }
      v753 = 0;
      *(_QWORD *)v754 = 0;
      v751 = 0;
      v752 = 0;
      v749 = 0;
      v750 = 0;
      v411 = *((unsigned int *)v2 + 163);
      if (!(_DWORD)v411)
      {
LABEL_685:
        for (nn = v756; nn; nn = (WTF *)*((_QWORD *)nn + 2))
        {
          v451 = *(id **)nn;
          v452 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0xA8);
          v453 = (WebCore::AVTrackPrivateAVFObjCImpl *)WTF::fastMalloc((WTF *)0x38);
          v766 = WebCore::AVTrackPrivateAVFObjCImpl::AVTrackPrivateAVFObjCImpl(v453, v451);
          WebCore::VideoTrackPrivateAVFObjC::VideoTrackPrivateAVFObjC((uint64_t)v452, (uint64_t *)&v766);
          if (v766)
          {
            WebCore::AVTrackPrivateAVFObjCImpl::~AVTrackPrivateAVFObjCImpl(v766, v373);
            WTF::fastFree(v454, v455);
          }
          v765 = v452;
          LODWORD(v456) = HIDWORD(v752);
          if (HIDWORD(v752) == (_DWORD)v752)
          {
            v457 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v751, HIDWORD(v752) + 1, (unint64_t)&v765);
            v456 = HIDWORD(v752);
            v458 = v751;
            v459 = *(_QWORD *)v457;
            *(_QWORD *)v457 = 0;
            *((_QWORD *)v458 + v456) = v459;
          }
          else
          {
            v765 = 0;
            *((_QWORD *)v751 + HIDWORD(v752)) = v452;
          }
          HIDWORD(v752) = v456 + 1;
          v460 = (unsigned int *)v765;
          v765 = 0;
          if (v460)
          {
            v461 = v460 + 2;
            do
            {
              v462 = __ldaxr(v461);
              v463 = v462 - 1;
            }
            while (__stlxr(v463, v461));
            if (!v463)
            {
              atomic_store(1u, v460 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v460 + 8))(v460);
            }
          }
        }
        v464 = HIDWORD(v752);
        v465 = v754[1];
        v466 = v753;
        if (HIDWORD(v752))
        {
          v467 = v751;
          v468 = v754[1] + (unint64_t)HIDWORD(v752);
          if (v468 > v754[0])
          {
            v469 = v754[0] + ((unint64_t)v754[0] >> 2);
            if (v469 >= 0x10)
              v470 = v469 + 1;
            else
              v470 = 16;
            if (v470 <= v468)
              v471 = v754[1] + (unint64_t)HIDWORD(v752);
            else
              v471 = v470;
            if (v471 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x19475B6BCLL);
            }
            v472 = (WTF *)WTF::fastMalloc((WTF *)(8 * v471));
            v754[0] = v471;
            v753 = v472;
            memcpy(v472, v466, 8 * v465);
            if (v466)
            {
              if (v472 == v466)
              {
                v472 = 0;
                v753 = 0;
                v754[0] = 0;
              }
              WTF::fastFree(v466, v373);
              v466 = v472;
            }
            else
            {
              v466 = v472;
            }
          }
          v473 = (_QWORD *)((char *)v466 + 8 * v465);
          v474 = (WTF *)((char *)v467 + 8 * v464);
          v2 = v726;
          LOBYTE(v8) = v722;
          do
          {
            v475 = *(_QWORD *)v467;
            if (*(_QWORD *)v467)
            {
              v476 = (unsigned int *)(v475 + 8);
              do
                v477 = __ldaxr(v476);
              while (__stlxr(v477 + 1, v476));
            }
            *v473++ = v475;
            v467 = (WTF *)((char *)v467 + 8);
          }
          while (v467 != v474);
          v466 = v753;
          LODWORD(v465) = v468;
        }
        else
        {
          v2 = v726;
        }
        v478 = (WTF *)*((_QWORD *)v2 + 80);
        *((_QWORD *)v2 + 80) = v466;
        v753 = v478;
        v479 = *((_QWORD *)v2 + 81);
        *((_DWORD *)v2 + 162) = v754[0];
        *((_DWORD *)v2 + 163) = v465;
        *(_QWORD *)v754 = v479;
        v480 = v749;
        v481 = HIDWORD(v750);
        v348 = (unsigned __int8 **)v718;
        if (HIDWORD(v750))
        {
          v482 = 8 * HIDWORD(v750);
          v483 = (WebCore::VideoTrackPrivate **)v749;
          do
          {
            WebCore::MediaPlayer::removeVideoTrack(v718, *v483++);
            v482 -= 8;
          }
          while (v482);
        }
        if (HIDWORD(v752))
        {
          v484 = (WebCore::VideoTrackPrivate **)v751;
          v485 = 8 * HIDWORD(v752);
          do
          {
            WebCore::MediaPlayer::addVideoTrack(v718, *v484++);
            v485 -= 8;
          }
          while (v485);
        }
        if ((_DWORD)v481)
        {
          v486 = (WTF *)((char *)v480 + 8 * v481);
          do
          {
            v487 = *(unsigned int **)v480;
            *(_QWORD *)v480 = 0;
            if (v487)
            {
              v488 = v487 + 2;
              do
              {
                v489 = __ldaxr(v488);
                v490 = v489 - 1;
              }
              while (__stlxr(v490, v488));
              if (!v490)
              {
                atomic_store(1u, v487 + 2);
                (*(void (**)(unsigned int *))(*(_QWORD *)v487 + 8))(v487);
              }
            }
            v480 = (WTF *)((char *)v480 + 8);
          }
          while (v480 != v486);
          v480 = v749;
        }
        if (v480)
          WTF::fastFree(v480, v373);
        v491 = v751;
        if (HIDWORD(v752))
        {
          v492 = (WTF *)((char *)v751 + 8 * HIDWORD(v752));
          do
          {
            v493 = *(unsigned int **)v491;
            *(_QWORD *)v491 = 0;
            if (v493)
            {
              v494 = v493 + 2;
              do
              {
                v495 = __ldaxr(v494);
                v496 = v495 - 1;
              }
              while (__stlxr(v496, v494));
              if (!v496)
              {
                atomic_store(1u, v493 + 2);
                (*(void (**)(unsigned int *))(*(_QWORD *)v493 + 8))(v493);
              }
            }
            v491 = (WTF *)((char *)v491 + 8);
          }
          while (v491 != v492);
          v491 = v751;
        }
        if (v491)
          WTF::fastFree(v491, v373);
        v497 = v753;
        if (v754[1])
        {
          v498 = (WTF *)((char *)v753 + 8 * v754[1]);
          do
          {
            v499 = *(unsigned int **)v497;
            *(_QWORD *)v497 = 0;
            if (v499)
            {
              v500 = v499 + 2;
              do
              {
                v501 = __ldaxr(v500);
                v502 = v501 - 1;
              }
              while (__stlxr(v502, v500));
              if (!v502)
              {
                atomic_store(1u, v499 + 2);
                (*(void (**)(unsigned int *))(*(_QWORD *)v499 + 8))(v499);
              }
            }
            v497 = (WTF *)((char *)v497 + 8);
          }
          while (v497 != v498);
          v497 = v753;
        }
        if (v497)
          WTF::fastFree(v497, v373);
        v503 = v756;
        while (v503)
        {
          v504 = v503;
          v503 = (WTF *)*((_QWORD *)v503 + 2);
          v505 = *(WTF **)v504;
          *(_QWORD *)v504 = 0;
          if (v505)
          {
            if (*(_DWORD *)v505 == 1)
            {
              v506 = (const void *)*((_QWORD *)v505 + 2);
              *((_QWORD *)v505 + 2) = 0;
              if (v506)
                CFRelease(v506);
              WTF::fastFree(v505, v373);
            }
            else
            {
              --*(_DWORD *)v505;
            }
          }
          WTF::fastFree(v504, v373);
        }
        if (v755)
          WTF::fastFree((WTF *)((char *)v755 - 16), v373);
        v507 = v745;
        while (v507)
        {
          v508 = v507;
          v507 = (WTF *)*((_QWORD *)v507 + 2);
          v509 = *(WTF **)v508;
          *(_QWORD *)v508 = 0;
          if (v509)
          {
            if (*(_DWORD *)v509 == 1)
            {
              v510 = (const void *)*((_QWORD *)v509 + 2);
              *((_QWORD *)v509 + 2) = 0;
              if (v510)
                CFRelease(v510);
              WTF::fastFree(v509, v373);
            }
            else
            {
              --*(_DWORD *)v509;
            }
          }
          WTF::fastFree(v508, v373);
        }
        if (v744)
          WTF::fastFree((WTF::Logger *)((char *)v744 - 16), v373);
        v511 = v758[1];
        while (v511)
        {
          v512 = v511;
          v511 = (WTF *)*((_QWORD *)v511 + 2);
          v513 = *(WTF **)v512;
          *(_QWORD *)v512 = 0;
          if (v513)
          {
            if (*(_DWORD *)v513 == 1)
            {
              v514 = (const void *)*((_QWORD *)v513 + 2);
              *((_QWORD *)v513 + 2) = 0;
              if (v514)
                CFRelease(v514);
              WTF::fastFree(v513, v373);
            }
            else
            {
              --*(_DWORD *)v513;
            }
          }
          WTF::fastFree(v512, v373);
        }
        if (v758[0])
          WTF::fastFree((WTF *)((char *)v758[0] - 16), v373);
        v515 = (WTF *)*((_QWORD *)&buf + 1);
        if (*((_QWORD *)&buf + 1))
        {
          do
          {
            v516 = v515;
            v515 = (WTF *)*((_QWORD *)v515 + 2);
            v517 = *(WTF **)v516;
            *(_QWORD *)v516 = 0;
            if (v517)
            {
              if (*(_DWORD *)v517 == 1)
              {
                v518 = (const void *)*((_QWORD *)v517 + 2);
                *((_QWORD *)v517 + 2) = 0;
                if (v518)
                  CFRelease(v518);
                WTF::fastFree(v517, v373);
              }
              else
              {
                --*(_DWORD *)v517;
              }
            }
            WTF::fastFree(v516, v373);
          }
          while (v515);
        }
        if ((_QWORD)buf)
          WTF::fastFree((WTF *)(buf - 16), v373);
        if (HIDWORD(v743))
        {
          v708 = v742;
          v709 = 8 * HIDWORD(v743);
          do
          {
            v710 = *(WTF::StringImpl **)v708;
            *(_QWORD *)v708 = 0;
            if (v710)
            {
              if (*(_DWORD *)v710 == 2)
                WTF::StringImpl::destroy(v710, (WTF::StringImpl *)v373);
              else
                *(_DWORD *)v710 -= 2;
            }
            v708 = (WTF *)((char *)v708 + 8);
            v709 -= 8;
          }
          while (v709);
        }
        v519 = v742;
        if (v742)
        {
          v742 = 0;
          LODWORD(v743) = 0;
          WTF::fastFree(v519, v373);
        }
        goto LABEL_804;
      }
      v412 = *((_QWORD *)v2 + 80);
      v413 = v412 + 8 * v411;
      while (1)
      {
        v414 = *(_QWORD *)v412;
        v415 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v412 + 144) + 24);
        if (v415)
        {
          if (!v744)
          {
LABEL_647:
            v423 = v754[1];
            if (v754[1] == v754[0])
            {
              v424 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v753, v754[1] + 1, v412);
              v425 = v754[1];
              v426 = v753;
              v427 = *(_QWORD *)v424;
              if (*(_QWORD *)v424)
              {
                v428 = (unsigned int *)(v427 + 8);
                do
                  v429 = __ldaxr(v428);
                while (__stlxr(v429 + 1, v428));
                v430 = v754[1];
              }
              else
              {
                v430 = v754[1];
              }
              *((_QWORD *)v426 + v425) = v427;
            }
            else
            {
              v438 = v753;
              if (v414)
              {
                v439 = (unsigned int *)(v414 + 8);
                do
                  v440 = __ldaxr(v439);
                while (__stlxr(v440 + 1, v439));
                v430 = v754[1];
              }
              else
              {
                v430 = v754[1];
              }
              *((_QWORD *)v438 + v423) = v414;
            }
            v441 = (char *)&v754[1];
            goto LABEL_679;
          }
          v416 = *((_DWORD *)v744 - 2);
          v417 = (~(v415 << 32) + v415) ^ ((unint64_t)(~(v415 << 32) + v415) >> 22);
          v418 = 9 * ((v417 + ~(v417 << 13)) ^ ((v417 + ~(v417 << 13)) >> 8));
          v419 = (v418 ^ (v418 >> 15)) + ~((v418 ^ (v418 >> 15)) << 27);
          v420 = v416 & ((v419 >> 31) ^ v419);
          for (i1 = 1; ; ++i1)
          {
            v422 = (_QWORD *)*((_QWORD *)v744 + v420);
            if (v422 != (_QWORD *)-1)
            {
              if (!v422)
                goto LABEL_647;
              if (*v422 == v415)
                break;
            }
            v420 = (v420 + i1) & v416;
          }
          v431 = HIDWORD(v750);
          if (HIDWORD(v750) != (_DWORD)v750)
          {
            v445 = v749;
            if (v414)
            {
              v448 = (unsigned int *)(v414 + 8);
              do
                v449 = __ldaxr(v448);
              while (__stlxr(v449 + 1, v448));
              goto LABEL_676;
            }
            v430 = HIDWORD(v750);
LABEL_677:
            *((_QWORD *)v445 + v431) = v414;
            goto LABEL_678;
          }
          v442 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v749, HIDWORD(v750) + 1, v412);
          v433 = HIDWORD(v750);
          v434 = v749;
          v435 = *(_QWORD *)v442;
          if (!*(_QWORD *)v442)
            goto LABEL_681;
          v443 = (unsigned int *)(v435 + 8);
          do
            v444 = __ldaxr(v443);
          while (__stlxr(v444 + 1, v443));
        }
        else
        {
          v431 = HIDWORD(v750);
          if (HIDWORD(v750) != (_DWORD)v750)
          {
            v445 = v749;
            v446 = (unsigned int *)(v414 + 8);
            do
              v447 = __ldaxr(v446);
            while (__stlxr(v447 + 1, v446));
LABEL_676:
            v430 = HIDWORD(v750);
            goto LABEL_677;
          }
          v432 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v749, HIDWORD(v750) + 1, v412);
          v433 = HIDWORD(v750);
          v434 = v749;
          v435 = *(_QWORD *)v432;
          if (!*(_QWORD *)v432)
          {
LABEL_681:
            v430 = v433;
            goto LABEL_669;
          }
          v436 = (unsigned int *)(v435 + 8);
          do
            v437 = __ldaxr(v436);
          while (__stlxr(v437 + 1, v436));
        }
        v430 = HIDWORD(v750);
LABEL_669:
        *((_QWORD *)v434 + v433) = v435;
LABEL_678:
        v441 = (char *)&v750 + 4;
LABEL_679:
        *(_DWORD *)v441 = v430 + 1;
        v412 += 8;
        if (v412 == v413)
          goto LABEL_685;
      }
    }
  }
  else
  {
    __clrex();
  }
  v6 = (PAL *)WTF::Lock::unlockSlow((WTF::Lock *)v268);
  if (v269)
    goto LABEL_445;
LABEL_812:
  v525 = *((_QWORD *)v2 + 82);
  if (v525)
    LOBYTE(v525) = *(_QWORD *)(v525 + 32) != 0;
  v526 = v727 | v525;
  v527 = *((_QWORD *)v2 + 83);
  if (v527)
    LOBYTE(v527) = *(_QWORD *)(v527 + 32) != 0;
  v528 = v526 & 1;
  v529 = ((v732 | v527) & 1) != 0 || *((_BYTE *)v2 + 946) || *((_BYTE *)v2 + 945) != 0;
  v530 = *((_BYTE *)v2 + 944) | v528;
  if (*((unsigned __int8 *)v2 + 394) != v529)
  {
    *((_BYTE *)v2 + 394) = v529;
    if (*((_DWORD *)v2 + 96))
    {
      *((_BYTE *)v2 + 398) = 1;
      goto LABEL_822;
    }
    *((_BYTE *)v2 + 398) = 0;
    v621 = *((_QWORD *)v2 + 11);
    if (v621)
    {
      v622 = *((_QWORD *)v2 + 12);
      if (__ldaxr((unsigned __int8 *)v621))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v621))
      {
        goto LABEL_1065;
      }
      MEMORY[0x19AEA534C](v621);
LABEL_1065:
      if (*(_QWORD *)(v621 + 24))
        ++*(_QWORD *)(v621 + 8);
      else
        v622 = 0;
      v632 = __ldxr((unsigned __int8 *)v621);
      if (v632 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v621))
        {
LABEL_1077:
          if (v622)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v622 + 8) + 8) + 128))(*(_QWORD *)(*(_QWORD *)(v622 + 8) + 8));
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v622);
          }
          goto LABEL_822;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v621);
      goto LABEL_1077;
    }
  }
LABEL_822:
  if (*((unsigned __int8 *)v2 + 393) == v530)
    goto LABEL_825;
  *((_BYTE *)v2 + 393) = v530;
  if (*((_DWORD *)v2 + 96))
  {
    *((_BYTE *)v2 + 398) = 1;
    goto LABEL_825;
  }
  *((_BYTE *)v2 + 398) = 0;
  v624 = *((_QWORD *)v2 + 11);
  if (v624)
  {
    v625 = *((_QWORD *)v2 + 12);
    if (__ldaxr((unsigned __int8 *)v624))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v624))
    {
      goto LABEL_1069;
    }
    MEMORY[0x19AEA534C](v624);
LABEL_1069:
    if (*(_QWORD *)(v624 + 24))
      ++*(_QWORD *)(v624 + 8);
    else
      v625 = 0;
    v633 = __ldxr((unsigned __int8 *)v624);
    if (v633 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v624))
      {
LABEL_1085:
        if (v625)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v625 + 8) + 8) + 128))(*(_QWORD *)(*(_QWORD *)(v625 + 8) + 8));
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v625);
        }
        goto LABEL_825;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v624);
    goto LABEL_1085;
  }
LABEL_825:
  if ((v8 & 1) != 0)
    WebCore::MediaPlayerPrivateAVFoundationObjC::processMetadataTrack((unsigned __int8 *)v2);
LABEL_827:
  v531 = (void *)*((_QWORD *)v2 + 51);
  if (!v531)
    goto LABEL_837;
  if (objc_msgSend(v531, "statusOfValueForKey:error:", CFSTR("availableMediaCharacteristicsWithMediaSelectionOptions"), 0) != 2)goto LABEL_837;
  v532 = (PAL *)objc_msgSend(*((id *)v2 + 51), "mediaSelectionGroupForMediaCharacteristic:", PAL::get_AVFoundation_AVMediaCharacteristicLegible((PAL *)2));
  if (!v532)
    goto LABEL_837;
  v533 = *((_QWORD *)v2 + 96);
  if (!v533)
    goto LABEL_838;
  if (!objc_msgSend((id)objc_msgSend((id)PAL::getAVMediaSelectionGroupClass[0](v532), "playableMediaSelectionOptionsFromArray:", -[PAL options](v532, "options")), "count"))
  {
LABEL_837:
    LODWORD(v533) = 0;
    goto LABEL_838;
  }
  v534 = (void *)*((_QWORD *)v2 + 51);
  if (v534)
  {
    if (objc_msgSend(v534, "statusOfValueForKey:error:", CFSTR("availableMediaCharacteristicsWithMediaSelectionOptions"), 0) == 2)
    {
      v728 = (void *)objc_msgSend(*((id *)v2 + 51), "mediaSelectionGroupForMediaCharacteristic:", PAL::get_AVFoundation_AVMediaCharacteristicLegible((PAL *)2));
      if (v728)
      {
        v535 = *((_DWORD *)v2 + 21);
        if (v535)
        {
          HIDWORD(v745) = *((_DWORD *)v2 + 21);
        }
        else
        {
          v634 = (void *)*((_QWORD *)v2 + 53);
          v635 = (void *)*((_QWORD *)v2 + 51);
          if (v635
            && objc_msgSend(v635, "statusOfValueForKey:error:", CFSTR("availableMediaCharacteristicsWithMediaSelectionOptions"), 0) == 2)
          {
            v636 = objc_msgSend(*((id *)v2 + 51), "mediaSelectionGroupForMediaCharacteristic:", PAL::get_AVFoundation_AVMediaCharacteristicLegible((PAL *)2));
          }
          else
          {
            v636 = 0;
          }
          v637 = (PAL *)objc_msgSend(v634, "selectMediaOption:inMediaSelectionGroup:", 0, v636);
          v535 = *((_DWORD *)v2 + 21);
          v744 = 0;
          LODWORD(v745) = 0;
          HIDWORD(v745) = v535;
          if (!v535)
          {
LABEL_1100:
            v717 = v3;
            v644 = (void *)objc_msgSend((id)PAL::getAVMediaSelectionGroupClass[0](v637), "playableMediaSelectionOptionsFromArray:", objc_msgSend(v728, "options"));
            v760 = 0u;
            v761 = 0u;
            *(_OWORD *)v758 = 0u;
            v759 = 0u;
            v645 = objc_msgSend(v644, "countByEnumeratingWithState:objects:count:", v758, &buf, 16);
            if (v645)
            {
              v646 = *(_QWORD *)v759;
              cfb = v644;
              v733 = (uint64_t)v2 + 56;
              do
              {
                for (i2 = 0; i2 != v645; ++i2)
                {
                  if (*(_QWORD *)v759 != v646)
                    objc_enumerationMutation(cfb);
                  v648 = (void *)*((_QWORD *)v758[1] + i2);
                  LODWORD(v649) = HIDWORD(v745);
                  if (!HIDWORD(v745))
                    goto LABEL_1139;
                  v650 = 1;
                  do
                  {
                    v649 = (v649 - 1);
                    if (HIDWORD(v745) <= v649)
                      goto LABEL_1217;
                    v651 = v744;
                    if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)v744 + v649) + 224))(*((_QWORD *)v744 + v649)))
                    {
                      v652 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v651 + v649) + 224))(*((_QWORD *)v651 + v649));
                      v653 = *((_QWORD *)v651 + v649);
                      if (v652 == 1)
                      {
                        if (v653)
                        {
                          v654 = (unsigned int *)(v653 + 8);
                          do
                            v655 = __ldaxr(v654);
                          while (__stlxr(v655 + 1, v654));
                        }
                        v656 = *(void **)(v653 + 152);
                        if (v656)
                          CFRetain(*(CFTypeRef *)(v653 + 152));
                        v657 = (unsigned int *)(v653 + 8);
                        do
                        {
                          v658 = __ldaxr(v657);
                          v659 = --v658 == 0;
                        }
                        while (__stlxr(v658, v657));
                      }
                      else
                      {
                        if (v653)
                        {
                          v660 = (unsigned int *)(v653 + 8);
                          do
                            v661 = __ldaxr(v660);
                          while (__stlxr(v661 + 1, v660));
                        }
                        v656 = *(void **)(v653 + 160);
                        if (v656)
                          CFRetain(*(CFTypeRef *)(v653 + 160));
                        v662 = (unsigned int *)(v653 + 8);
                        do
                        {
                          v663 = __ldaxr(v662);
                          v659 = --v663 == 0;
                        }
                        while (__stlxr(v663, v662));
                      }
                      if (v659)
                      {
                        atomic_store(1u, (unsigned int *)(v653 + 8));
                        (*(void (**)(uint64_t))(*(_QWORD *)v653 + 8))(v653);
                      }
                      v664 = objc_msgSend(v656, "isEqual:", v648);
                      v665 = v664;
                      if (v664)
                      {
                        v666 = (unsigned int **)((char *)v744 + 8 * v649);
                        v667 = *v666;
                        *v666 = 0;
                        if (v667)
                        {
                          v668 = v667 + 2;
                          do
                          {
                            v669 = __ldaxr(v668);
                            v670 = v669 - 1;
                          }
                          while (__stlxr(v670, v668));
                          if (!v670)
                          {
                            atomic_store(1u, v667 + 2);
                            (*(void (**)(unsigned int *))(*(_QWORD *)v667 + 8))(v667);
                          }
                        }
                        v671 = HIDWORD(v745);
                        memmove(v666, v666 + 1, (WTF::Logger *)((char *)v744 + 8 * HIDWORD(v745)) - (WTF::Logger *)(v666 + 1));
                        v650 = 0;
                        HIDWORD(v745) = v671 - 1;
                        v2 = v726;
                      }
                      if (v656)
                        CFRelease(v656);
                      if ((v665 & 1) != 0)
                        break;
                    }
                  }
                  while ((_DWORD)v649);
                  if ((v650 & 1) != 0)
                  {
LABEL_1139:
                    v672 = objc_msgSend(v648, "outOfBandSource");
                    v673 = *((_QWORD *)v2 + 146);
                    *((_QWORD *)v2 + 146) = v673 + 1;
                    if (v672)
                    {
                      v674 = WTF::fastMalloc((WTF *)0xA0);
                      *(_DWORD *)(v674 + 8) = 1;
                      *(_BYTE *)(v674 + 12) = 0;
                      *(_QWORD *)(v674 + 24) = 0;
                      *(_QWORD *)(v674 + 32) = 0;
                      *(_QWORD *)(v674 + 16) = 0;
                      *(_WORD *)(v674 + 48) = 1;
                      *(_QWORD *)(v674 + 64) = 0;
                      *(_QWORD *)(v674 + 72) = 0;
                      *(_QWORD *)(v674 + 56) = 0;
                      *(_DWORD *)(v674 + 80) = 10000000;
                      *(_BYTE *)(v674 + 84) = 1;
                      *(_QWORD *)(v674 + 88) = 0;
                      *(_DWORD *)(v674 + 96) = 10000000;
                      *(_BYTE *)(v674 + 100) = 1;
                      *(_QWORD *)(v674 + 104) = 0;
                      *(_QWORD *)(v674 + 112) = 0;
                      *(_DWORD *)(v674 + 135) = 0;
                      *(_QWORD *)(v674 + 120) = v733;
                      *(_QWORD *)(v674 + 128) = 0;
                      *(_QWORD *)v674 = off_1E32049C8;
                      *(_QWORD *)(v674 + 144) = v673;
                      *(_QWORD *)(v674 + 152) = v648;
                      if (v648)
                        CFRetain(v648);
                      v675 = *((unsigned int *)v2 + 21);
                      if ((_DWORD)v675 == *((_DWORD *)v2 + 20))
                      {
                        v676 = v675 + (v675 >> 2);
                        if (v676 >= 0x10)
                          v677 = v676 + 1;
                        else
                          v677 = 16;
                        if (v677 <= v675 + 1)
                          v678 = v675 + 1;
                        else
                          v678 = v677;
                        if (v678 >> 29)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x19475B694);
                        }
                        v679 = (void *)*((_QWORD *)v2 + 9);
                        v680 = (void *)WTF::fastMalloc((WTF *)(8 * v678));
                        *((_DWORD *)v2 + 20) = v678;
                        *((_QWORD *)v2 + 9) = v680;
                        memcpy(v680, v679, 8 * v675);
                        if (v679)
                        {
                          if (*((void **)v2 + 9) == v679)
                          {
                            *((_QWORD *)v2 + 9) = 0;
                            *((_DWORD *)v2 + 20) = 0;
                          }
                          WTF::fastFree((WTF *)v679, v681);
                        }
                        v675 = *((unsigned int *)v2 + 21);
                        v682 = *((_QWORD *)v2 + 9);
                        v683 = (uint64_t *)(v682 + 8 * v675);
                      }
                      else
                      {
                        v682 = *((_QWORD *)v2 + 9);
                        v683 = (uint64_t *)(v682 + 8 * v675);
                      }
                      *v683 = v674;
                      *((_DWORD *)v2 + 21) = v675 + 1;
                      if ((_DWORD)v675 == -1)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19475B68CLL);
                      }
                      *(_BYTE *)(*(_QWORD *)(v682 + 8 * (v675 + 1) - 8) + 136) = 1;
                    }
                    else
                    {
                      v684 = WTF::fastMalloc((WTF *)0xA8);
                      WebCore::InbandTextTrackPrivateAVFObjC::InbandTextTrackPrivateAVFObjC(v684, v733, v728, v648, v673, 1);
                      v685 = *((unsigned int *)v2 + 21);
                      if ((_DWORD)v685 == *((_DWORD *)v2 + 20))
                      {
                        v686 = v685 + (v685 >> 2);
                        if (v686 >= 0x10)
                          v687 = v686 + 1;
                        else
                          v687 = 16;
                        if (v687 <= v685 + 1)
                          v688 = v685 + 1;
                        else
                          v688 = v687;
                        if (v688 >> 29)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x19475B69CLL);
                        }
                        v689 = (void *)*((_QWORD *)v2 + 9);
                        v690 = (void *)WTF::fastMalloc((WTF *)(8 * v688));
                        *((_DWORD *)v2 + 20) = v688;
                        *((_QWORD *)v2 + 9) = v690;
                        memcpy(v690, v689, 8 * v685);
                        if (v689)
                        {
                          if (*((void **)v2 + 9) == v689)
                          {
                            *((_QWORD *)v2 + 9) = 0;
                            *((_DWORD *)v2 + 20) = 0;
                          }
                          WTF::fastFree((WTF *)v689, v691);
                        }
                        v692 = *((unsigned int *)v2 + 21);
                        *(_QWORD *)(*((_QWORD *)v2 + 9) + 8 * v692) = v684;
                        *((_DWORD *)v2 + 21) = v692 + 1;
                      }
                      else
                      {
                        *(_QWORD *)(*((_QWORD *)v2 + 9) + 8 * v685) = v684;
                        *((_DWORD *)v2 + 21) = v685 + 1;
                      }
                    }
                  }
                }
                v645 = objc_msgSend(cfb, "countByEnumeratingWithState:objects:count:", v758, &buf, 16);
              }
              while (v645);
            }
            v3 = v717;
            WebCore::MediaPlayerPrivateAVFoundation::processNewAndRemovedTextTracks((unsigned __int8 *)v2, (uint64_t)&v744);
            if (HIDWORD(v745))
            {
              v694 = v744;
              v695 = (WTF::Logger *)((char *)v744 + 8 * HIDWORD(v745));
              do
              {
                v696 = *(unsigned int **)v694;
                *(_QWORD *)v694 = 0;
                if (v696)
                {
                  v697 = v696 + 2;
                  do
                  {
                    v698 = __ldaxr(v697);
                    v699 = v698 - 1;
                  }
                  while (__stlxr(v699, v697));
                  if (!v699)
                  {
                    atomic_store(1u, v696 + 2);
                    (*(void (**)(unsigned int *))(*(_QWORD *)v696 + 8))(v696);
                  }
                }
                v694 = (WTF::Logger *)((char *)v694 + 8);
              }
              while (v694 != v695);
            }
            v700 = v744;
            if (v744)
            {
              v744 = 0;
              LODWORD(v745) = 0;
              WTF::fastFree(v700, v693);
            }
            goto LABEL_1016;
          }
        }
        if (v535 >> 29)
        {
LABEL_1217:
          __break(0xC471u);
          JUMPOUT(0x19475B684);
        }
        v637 = (PAL *)WTF::fastMalloc((WTF *)(8 * v535));
        LODWORD(v745) = v535;
        v744 = v637;
        v638 = *((unsigned int *)v2 + 21);
        if ((_DWORD)v638)
        {
          v639 = (uint64_t *)*((_QWORD *)v2 + 9);
          v640 = &v639[v638];
          do
          {
            v641 = *v639;
            if (*v639)
            {
              v642 = (unsigned int *)(v641 + 8);
              do
                v643 = __ldaxr(v642);
              while (__stlxr(v643 + 1, v642));
            }
            *(_QWORD *)v637 = v641;
            v637 = (PAL *)((char *)v637 + 8);
            ++v639;
          }
          while (v639 != v640);
        }
        goto LABEL_1100;
      }
    }
  }
  v627 = *((_QWORD *)v2 + 35);
  v628 = (WTF::StringImpl *)*((_QWORD *)v2 + 36);
  *(_QWORD *)&buf = "MediaPlayerPrivateAVFoundationObjC";
  *((_QWORD *)&buf + 1) = 35;
  v769 = "processMediaSelectionOptions";
  v770 = v628;
  if (*(_BYTE *)(v627 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [23]>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&buf, "no mediaSelectionGroup");
LABEL_1016:
  LODWORD(v533) = 1;
LABEL_838:
  if (*((unsigned __int8 *)v2 + 395) == (_DWORD)v533)
    goto LABEL_841;
  *((_BYTE *)v2 + 395) = v533;
  if (*((_DWORD *)v2 + 96))
  {
    *((_BYTE *)v2 + 398) = 1;
    goto LABEL_841;
  }
  *((_BYTE *)v2 + 398) = 0;
  v615 = *((_QWORD *)v2 + 11);
  if (v615)
  {
    v616 = *((_QWORD *)v2 + 12);
    if (__ldaxr((unsigned __int8 *)v615))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v615))
    {
      goto LABEL_1041;
    }
    MEMORY[0x19AEA534C](v615);
LABEL_1041:
    if (*(_QWORD *)(v615 + 24))
      ++*(_QWORD *)(v615 + 8);
    else
      v616 = 0;
    v630 = __ldxr((unsigned __int8 *)v615);
    if (v630 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v615))
      {
LABEL_1049:
        if (v616)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v616 + 8) + 8) + 128))(*(_QWORD *)(*(_QWORD *)(v616 + 8) + 8));
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v616);
        }
        goto LABEL_841;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v615);
    goto LABEL_1049;
  }
LABEL_841:
  v537 = *((_QWORD *)v2 + 35);
  v536 = (WTF::StringImpl *)*((_QWORD *)v2 + 36);
  v758[0] = (WTF *)"MediaPlayerPrivateAVFoundationObjC";
  v758[1] = (WTF *)35;
  *(_QWORD *)&v759 = "tracksChanged";
  *((_QWORD *)&v759 + 1) = v536;
  v538 = (void *)*((_QWORD *)v2 + 52);
  if (v538)
  {
    LOBYTE(v538) = objc_msgSend(v538, "isExternalPlaybackActive");
    v539 = *((_QWORD *)v2 + 35);
    v536 = (WTF::StringImpl *)*((_QWORD *)v2 + 36);
  }
  else
  {
    v539 = v537;
  }
  LOBYTE(v744) = (_BYTE)v538;
  *(_QWORD *)&buf = "MediaPlayerPrivateAVFoundationObjC";
  *((_QWORD *)&buf + 1) = 35;
  v769 = "isCurrentPlaybackTargetWireless";
  v770 = v536;
  if (*(_BYTE *)(v539 + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 3u)
  {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogMedia, 3, (WTF::Logger::LogSiteIdentifier *)&buf);
    if ((_BYTE)v744)
    {
LABEL_848:
      v540 = 1;
      goto LABEL_851;
    }
  }
  else if ((v538 & 1) != 0)
  {
    goto LABEL_848;
  }
  v540 = *((_BYTE *)v2 + 394) != 0;
LABEL_851:
  v541 = (void *)*((_QWORD *)v2 + 52);
  if (v541)
    LOBYTE(v541) = objc_msgSend(v541, "isExternalPlaybackActive");
  LOBYTE(v744) = (_BYTE)v541;
  v542 = *((_QWORD *)v2 + 35);
  v543 = (WTF::StringImpl *)*((_QWORD *)v2 + 36);
  *(_QWORD *)&buf = "MediaPlayerPrivateAVFoundationObjC";
  *((_QWORD *)&buf + 1) = 35;
  v769 = "isCurrentPlaybackTargetWireless";
  v770 = v543;
  if (*(_BYTE *)(v542 + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 3u)
  {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogMedia, 3, (WTF::Logger::LogSiteIdentifier *)&buf);
    if ((_BYTE)v744)
    {
LABEL_857:
      v544 = 1;
      goto LABEL_860;
    }
  }
  else if ((v541 & 1) != 0)
  {
    goto LABEL_857;
  }
  v544 = *((_BYTE *)v2 + 393) != 0;
LABEL_860:
  if (!*(_BYTE *)(v537 + 12))
    goto LABEL_979;
  v545 = *((unsigned __int8 *)v726 + 395);
  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v758);
  WTF::String::String((WTF::String *)&v764, "has video = ");
  if (v540)
    v546 = 5;
  else
    v546 = 6;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v547 = (WTF *)buf;
  WTF::String::String((WTF::String *)&v763, ", has audio = ");
  if (v544)
    v548 = 5;
  else
    v548 = 6;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v549 = (WTF *)buf;
  WTF::String::String((WTF::String *)&v762, ", has captions = ");
  if (v545)
    v550 = 5;
  else
    v550 = 6;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v551 = (WTF *)buf;
  *(_QWORD *)&buf = v765;
  v744 = v764;
  v755 = v547;
  v753 = v763;
  v751 = v549;
  v749 = v762;
  v742 = v551;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v744, (uint64_t *)&v755, (uint64_t *)&v753, (uint64_t *)&v751, (uint64_t *)&v749, (uint64_t *)&v742, &v766);
  if (!v766)
  {
    __break(0xC471u);
    JUMPOUT(0x19475B6A4);
  }
  if (v551)
  {
    if (*(_DWORD *)v551 == 2)
      WTF::StringImpl::destroy(v551, v552);
    else
      *(_DWORD *)v551 -= 2;
  }
  v553 = v762;
  v762 = 0;
  if (v553)
  {
    if (*(_DWORD *)v553 == 2)
    {
      WTF::StringImpl::destroy(v553, v552);
      if (!v549)
        goto LABEL_880;
      goto LABEL_878;
    }
    *(_DWORD *)v553 -= 2;
  }
  if (!v549)
    goto LABEL_880;
LABEL_878:
  if (*(_DWORD *)v549 == 2)
    WTF::StringImpl::destroy(v549, v552);
  else
    *(_DWORD *)v549 -= 2;
LABEL_880:
  v554 = v763;
  v763 = 0;
  if (!v554)
    goto LABEL_883;
  if (*(_DWORD *)v554 != 2)
  {
    *(_DWORD *)v554 -= 2;
LABEL_883:
    if (v547)
      goto LABEL_884;
    goto LABEL_886;
  }
  WTF::StringImpl::destroy(v554, v552);
  if (v547)
  {
LABEL_884:
    if (*(_DWORD *)v547 == 2)
      WTF::StringImpl::destroy(v547, v552);
    else
      *(_DWORD *)v547 -= 2;
  }
LABEL_886:
  v555 = v764;
  v764 = 0;
  if (v555)
  {
    if (*(_DWORD *)v555 == 2)
      WTF::StringImpl::destroy(v555, v552);
    else
      *(_DWORD *)v555 -= 2;
  }
  v556 = v765;
  v765 = 0;
  if (v556)
  {
    if (*(_DWORD *)v556 == 2)
      WTF::StringImpl::destroy(v556, v552);
    else
      *(_DWORD *)v556 -= 2;
  }
  v557 = qword_1ECE7C4A0;
  v558 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v558)
  {
    WTF::String::utf8();
    v560 = v744 ? (char *)v744 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v560;
    _os_log_impl(&dword_1940B8000, v557, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v558 = (uint64_t)v744;
    v744 = 0;
    if (v558)
    {
      if (*(_DWORD *)v558 == 1)
        v558 = WTF::fastFree((WTF *)v558, v559);
      else
        --*(_DWORD *)v558;
    }
  }
  if (WebCore::LogMedia)
  {
    v561 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v562 = *v561;
      if ((v562 & 1) != 0)
        break;
      v563 = __ldaxr(v561);
      if (v563 == v562)
      {
        if (!__stxr(v562 | 1, v561))
        {
          v716 = v3;
          v564 = WTF::Logger::observers((WTF::Logger *)v558);
          v565 = *(unsigned int *)(v564 + 12);
          if ((_DWORD)v565)
          {
            v566 = *(WebCore::MediaPlayer **)v564;
            v719 = (WebCore::MediaPlayer *)(*(_QWORD *)v564 + 8 * v565);
            v567 = v546 - 1;
            v568 = v548 - 1;
            v569 = v550 - 1;
            do
            {
              v570 = *(_QWORD *)v566;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v758);
              LODWORD(v769) = 0;
              WTF::String::String((WTF::String *)&v770, "has video = ");
              v771 = 0;
              if (v567)
              {
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v571 = v755;
              }
              else
              {
                v599 = (WTF *)MEMORY[0x1E0CBEF70];
                *MEMORY[0x1E0CBEF70] += 2;
                v571 = v599;
              }
              v772 = v571;
              v773 = 0;
              WTF::String::String((WTF::String *)&v774, ", has audio = ");
              v775 = 0;
              if (v568)
              {
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v572 = v755;
              }
              else
              {
                v600 = (WTF *)MEMORY[0x1E0CBEF70];
                *MEMORY[0x1E0CBEF70] += 2;
                v572 = v600;
              }
              v776 = v572;
              v777 = 0;
              WTF::String::String((WTF::String *)&v778, ", has captions = ");
              v779 = 0;
              if (v569)
              {
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v573 = v755;
              }
              else
              {
                v601 = (WTF *)MEMORY[0x1E0CBEF70];
                *MEMORY[0x1E0CBEF70] += 2;
                v573 = v601;
              }
              v780 = v573;
              v744 = 0;
              v745 = 0;
              v574 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x70);
              LODWORD(v745) = 7;
              v744 = v574;
              v575 = HIDWORD(v745);
              *((_DWORD *)v574 + 4 * HIDWORD(v745)) = buf;
              v576 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v574 + 2 * v575 + 1) = v576;
              *((_DWORD *)v574 + 4 * (v575 + 1)) = (_DWORD)v769;
              v577 = v770;
              if (v770)
                *(_DWORD *)v770 += 2;
              *((_QWORD *)v574 + 2 * (v575 + 1) + 1) = v577;
              *((_DWORD *)v574 + 4 * (v575 + 2)) = v771;
              v578 = v772;
              if (v772)
                *(_DWORD *)v772 += 2;
              *((_QWORD *)v574 + 2 * (v575 + 2) + 1) = v578;
              *((_DWORD *)v574 + 4 * (v575 + 3)) = v773;
              v579 = v774;
              if (v774)
                *(_DWORD *)v774 += 2;
              *((_QWORD *)v574 + 2 * (v575 + 3) + 1) = v579;
              *((_DWORD *)v574 + 4 * (v575 + 4)) = v775;
              v580 = v776;
              if (v776)
                *(_DWORD *)v776 += 2;
              *((_QWORD *)v574 + 2 * (v575 + 4) + 1) = v580;
              *((_DWORD *)v574 + 4 * (v575 + 5)) = v777;
              v581 = v778;
              if (v778)
                *(_DWORD *)v778 += 2;
              *((_QWORD *)v574 + 2 * (v575 + 5) + 1) = v581;
              *((_DWORD *)v574 + 4 * (v575 + 6)) = v779;
              v582 = v780;
              if (v780)
                *(_DWORD *)v780 += 2;
              *((_QWORD *)v574 + 2 * (v575 + 6) + 1) = v582;
              HIDWORD(v745) = v575 + 7;
              (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v570 + 16))(v570, &WebCore::LogMedia, 0, &v744);
              v583 = v744;
              if (HIDWORD(v745))
              {
                v584 = v568;
                v585 = v567;
                v586 = v550;
                v587 = v548;
                v588 = v546;
                v589 = 16 * HIDWORD(v745);
                v590 = (WTF::StringImpl **)((char *)v744 + 8);
                do
                {
                  v591 = *v590;
                  *v590 = 0;
                  if (v591)
                  {
                    if (*(_DWORD *)v591 == 2)
                      WTF::StringImpl::destroy(v591, (WTF::StringImpl *)v559);
                    else
                      *(_DWORD *)v591 -= 2;
                  }
                  v590 += 2;
                  v589 -= 16;
                }
                while (v589);
                v583 = v744;
                v546 = v588;
                v548 = v587;
                v550 = v586;
                v567 = v585;
                v568 = v584;
              }
              if (v583)
              {
                v744 = 0;
                LODWORD(v745) = 0;
                WTF::fastFree(v583, v559);
              }
              v592 = v780;
              v780 = 0;
              if (v592)
              {
                if (*(_DWORD *)v592 == 2)
                  WTF::StringImpl::destroy(v592, (WTF::StringImpl *)v559);
                else
                  *(_DWORD *)v592 -= 2;
              }
              v593 = v778;
              v778 = 0;
              if (v593)
              {
                if (*(_DWORD *)v593 == 2)
                  WTF::StringImpl::destroy(v593, (WTF::StringImpl *)v559);
                else
                  *(_DWORD *)v593 -= 2;
              }
              v594 = v776;
              v776 = 0;
              if (v594)
              {
                if (*(_DWORD *)v594 == 2)
                  WTF::StringImpl::destroy(v594, (WTF::StringImpl *)v559);
                else
                  *(_DWORD *)v594 -= 2;
              }
              v595 = v774;
              v774 = 0;
              if (v595)
              {
                if (*(_DWORD *)v595 == 2)
                  WTF::StringImpl::destroy(v595, (WTF::StringImpl *)v559);
                else
                  *(_DWORD *)v595 -= 2;
              }
              v596 = v772;
              v772 = 0;
              if (v596)
              {
                if (*(_DWORD *)v596 == 2)
                  WTF::StringImpl::destroy(v596, (WTF::StringImpl *)v559);
                else
                  *(_DWORD *)v596 -= 2;
              }
              v597 = v770;
              v770 = 0;
              if (v597)
              {
                if (*(_DWORD *)v597 == 2)
                  WTF::StringImpl::destroy(v597, (WTF::StringImpl *)v559);
                else
                  *(_DWORD *)v597 -= 2;
              }
              v598 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v598)
              {
                if (*(_DWORD *)v598 == 2)
                  WTF::StringImpl::destroy(v598, (WTF::StringImpl *)v559);
                else
                  *(_DWORD *)v598 -= 2;
              }
              v566 = (WebCore::MediaPlayer *)((char *)v566 + 8);
            }
            while (v566 != v719);
          }
          v602 = __ldxr(MEMORY[0x1E0CBF890]);
          if (v602 == 1)
          {
            v3 = v716;
            if (!__stlxr(0, MEMORY[0x1E0CBF890]))
              break;
          }
          else
          {
            __clrex();
            v3 = v716;
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  v603 = v766;
  v766 = 0;
  if (v603)
  {
    if (*(_DWORD *)v603 == 2)
      WTF::StringImpl::destroy(v603, (WTF::StringImpl *)v559);
    else
      *(_DWORD *)v603 -= 2;
  }
LABEL_979:
  if (*((_QWORD *)v726 + 51))
  {
    WebCore::MediaPlayerPrivateAVFoundationObjC::updateRotationSession((uint64_t *)v726);
    WebCore::MediaPlayerPrivateAVFoundation::setNaturalSize((unsigned __int8 *)v726, *((float *)v726 + 196), *((float *)v726 + 197));
  }
  WebCore::MediaPlayerPrivateAVFoundationObjC::languageOfPrimaryAudioTrack((uint64_t)v726, &buf);
  v604 = (WTF::StringImpl *)buf;
  v606 = WTF::equal(v3, (const WTF::StringImpl *)buf, v605);
  v607 = v606;
  if (!v604)
  {
LABEL_984:
    if ((v606 & 1) != 0)
      goto LABEL_987;
    goto LABEL_985;
  }
  if (*(_DWORD *)v604 != 2)
  {
    *(_DWORD *)v604 -= 2;
    goto LABEL_984;
  }
  v606 = WTF::StringImpl::destroy(v604, a2);
  if ((v607 & 1) != 0)
    goto LABEL_987;
LABEL_985:
  if (*((_DWORD *)v726 + 96))
  {
    *((_BYTE *)v726 + 398) = 1;
    goto LABEL_987;
  }
  *((_BYTE *)v726 + 398) = 0;
  v618 = *((_QWORD *)v726 + 11);
  if (v618)
  {
    v619 = *((_QWORD *)v726 + 12);
    if (__ldaxr((unsigned __int8 *)v618))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v618))
    {
      goto LABEL_1053;
    }
    v606 = MEMORY[0x19AEA534C](v618);
LABEL_1053:
    if (*(_QWORD *)(v618 + 24))
      ++*(_QWORD *)(v618 + 8);
    else
      v619 = 0;
    v631 = __ldxr((unsigned __int8 *)v618);
    if (v631 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v618))
      {
LABEL_1061:
        if (v619)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v619 + 8) + 8) + 128))(*(_QWORD *)(*(_QWORD *)(v619 + 8) + 8));
          v606 = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v619);
        }
        goto LABEL_987;
      }
    }
    else
    {
      __clrex();
    }
    v606 = WTF::Lock::unlockSlow((WTF::Lock *)v618);
    goto LABEL_1061;
  }
LABEL_987:
  v608 = (WebCore::AudioSourceProviderAVFObjC *)*((_QWORD *)v726 + 61);
  if (v608)
  {
    v609 = (NSString *)PAL::get_AVFoundation_AVMediaCharacteristicAudible((PAL *)v606);
    v610 = (AVAssetTrack *)WebCore::MediaPlayerPrivateAVFoundationObjC::firstEnabledTrack(v726, v609);
    WebCore::AudioSourceProviderAVFObjC::setAudioTrack(v608, v610);
  }
  v611 = *((_DWORD *)v726 + 96) - 1;
  *((_DWORD *)v726 + 96) = v611;
  if (!v611)
  {
    if (*((_BYTE *)v726 + 398))
    {
      *((_BYTE *)v726 + 398) = 0;
      v612 = *((_QWORD *)v726 + 11);
      if (v612)
      {
        v613 = *((_QWORD *)v726 + 12);
        if (__ldaxr((unsigned __int8 *)v612))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v612))
        {
          goto LABEL_1019;
        }
        MEMORY[0x19AEA534C](v612);
LABEL_1019:
        if (*(_QWORD *)(v612 + 24))
          ++*(_QWORD *)(v612 + 8);
        else
          v613 = 0;
        v629 = __ldxr((unsigned __int8 *)v612);
        if (v629 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v612))
          {
LABEL_1027:
            if (v613)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v613 + 8) + 8) + 128))(*(_QWORD *)(*(_QWORD *)(v613 + 8) + 8));
              WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v613);
            }
            goto LABEL_990;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v612);
        goto LABEL_1027;
      }
    }
  }
LABEL_990:
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
}

void sub_19475B6D0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, unsigned __int8 **a16)
{
  WTF *v16;
  uint64_t v17;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF *v21;
  WTF::StringImpl **v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;

  WTF::fastFree(v16, a2);
  v20 = *(unsigned int *)(v17 - 228);
  if ((_DWORD)v20)
  {
    v22 = *(WTF::StringImpl ***)(v17 - 240);
    v23 = 8 * v20;
    do
    {
      v24 = *v22;
      *v22 = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2)
          WTF::StringImpl::destroy(v24, v19);
        else
          *(_DWORD *)v24 -= 2;
      }
      ++v22;
      v23 -= 8;
    }
    while (v23);
  }
  v21 = *(WTF **)(v17 - 240);
  if (v21)
  {
    *(_QWORD *)(v17 - 240) = 0;
    *(_DWORD *)(v17 - 232) = 0;
    WTF::fastFree(v21, v19);
  }
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*a16);
  if (a15)
  {
    if (*(_DWORD *)a15 == 2)
      WTF::StringImpl::destroy(a15, v25);
    else
      *(_DWORD *)a15 -= 2;
  }
  _Unwind_Resume(a1);
}

unsigned __int8 *WebCore::MediaPlayerPrivateAVFoundationObjC::processMetadataTrack(unsigned __int8 *this)
{
  unsigned __int8 *v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  WTF::StringImpl *v14;

  if (!*((_QWORD *)this + 85))
  {
    v1 = this;
    v2 = *((_QWORD *)this + 146);
    *((_QWORD *)this + 146) = v2 + 1;
    v3 = WTF::fastMalloc((WTF *)0x68);
    *(_DWORD *)(v3 + 8) = 1;
    *(_BYTE *)(v3 + 12) = 0;
    *(_QWORD *)(v3 + 24) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_WORD *)(v3 + 48) = 0;
    *(_QWORD *)v3 = off_1E34102E8;
    *(_BYTE *)(v3 + 50) = 4;
    *(_QWORD *)(v3 + 64) = 0;
    *(_QWORD *)(v3 + 72) = 0;
    *(_QWORD *)(v3 + 56) = v2;
    *(_DWORD *)(v3 + 80) = 10000000;
    *(_BYTE *)(v3 + 84) = 1;
    *(_QWORD *)(v3 + 88) = 0;
    *(_QWORD *)(v3 + 96) = 0;
    v4 = (unsigned int *)*((_QWORD *)v1 + 85);
    *((_QWORD *)v1 + 85) = v3;
    if (v4)
    {
      v5 = v4 + 2;
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v4 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
      }
    }
    v8 = *((_QWORD *)v1 + 85);
    WTF::AtomStringImpl::add();
    if (v14)
      *(_DWORD *)v14 += 2;
    this = *(unsigned __int8 **)(v8 + 64);
    *(_QWORD *)(v8 + 64) = v14;
    if (this)
    {
      if (*(_DWORD *)this == 2)
      {
        this = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v9);
        if (!v14)
          goto LABEL_16;
        goto LABEL_14;
      }
      *(_DWORD *)this -= 2;
    }
    if (!v14)
      goto LABEL_16;
LABEL_14:
    if (*(_DWORD *)v14 == 2)
      this = (unsigned __int8 *)WTF::StringImpl::destroy(v14, v9);
    else
      *(_DWORD *)v14 -= 2;
LABEL_16:
    v10 = *((_QWORD *)v1 + 11);
    if (!v10)
      return this;
    v11 = *((_QWORD *)v1 + 12);
    if (__ldaxr((unsigned __int8 *)v10))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v10))
    {
      goto LABEL_21;
    }
    this = (unsigned __int8 *)MEMORY[0x19AEA534C](v10);
LABEL_21:
    if (*(_QWORD *)(v10 + 24))
      ++*(_QWORD *)(v10 + 8);
    else
      v11 = 0;
    v13 = __ldxr((unsigned __int8 *)v10);
    if (v13 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v10))
      {
LABEL_29:
        if (v11)
        {
          (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(v11 + 8) + 8) + 352))(*(_QWORD *)(*(_QWORD *)(v11 + 8) + 8), *((_QWORD *)v1 + 85));
          return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v11);
        }
        return this;
      }
    }
    else
    {
      __clrex();
    }
    this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v10);
    goto LABEL_29;
  }
  return this;
}

BOOL WebCore::MediaPlayerPrivateAVFoundationObjC::hasVideo(WebCore::MediaPlayerPrivateAVFoundationObjC *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  _QWORD v7[4];
  char v8;

  v2 = (void *)*((_QWORD *)this + 52);
  if (v2)
    LOBYTE(v2) = objc_msgSend(v2, "isExternalPlaybackActive");
  v8 = (char)v2;
  v3 = *((_QWORD *)this + 35);
  v4 = *((_QWORD *)this + 36);
  v7[0] = "MediaPlayerPrivateAVFoundationObjC";
  v7[1] = 35;
  v7[2] = "isCurrentPlaybackTargetWireless";
  v7[3] = v4;
  if (*(_BYTE *)(v3 + 12) && (WebCore::LogMedia ? (v5 = byte_1ECE7C490 >= 3u) : (v5 = 0), v5))
  {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogMedia, 3, (WTF::Logger::LogSiteIdentifier *)v7);
    if (!v8)
      return *((_BYTE *)this + 394) != 0;
  }
  else if ((v2 & 1) == 0)
  {
    return *((_BYTE *)this + 394) != 0;
  }
  return 1;
}

BOOL WebCore::MediaPlayerPrivateAVFoundationObjC::hasAudio(WebCore::MediaPlayerPrivateAVFoundationObjC *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  _QWORD v7[4];
  char v8;

  v2 = (void *)*((_QWORD *)this + 52);
  if (v2)
    LOBYTE(v2) = objc_msgSend(v2, "isExternalPlaybackActive");
  v8 = (char)v2;
  v3 = *((_QWORD *)this + 35);
  v4 = *((_QWORD *)this + 36);
  v7[0] = "MediaPlayerPrivateAVFoundationObjC";
  v7[1] = 35;
  v7[2] = "isCurrentPlaybackTargetWireless";
  v7[3] = v4;
  if (*(_BYTE *)(v3 + 12) && (WebCore::LogMedia ? (v5 = byte_1ECE7C490 >= 3u) : (v5 = 0), v5))
  {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogMedia, 3, (WTF::Logger::LogSiteIdentifier *)v7);
    if (!v8)
      return *((_BYTE *)this + 393) != 0;
  }
  else if ((v2 & 1) == 0)
  {
    return *((_BYTE *)this + 393) != 0;
  }
  return 1;
}

uint64_t WebCore::MediaPlayerPrivateAVFoundation::hasClosedCaptions(WebCore::MediaPlayerPrivateAVFoundation *this)
{
  return *((unsigned __int8 *)this + 395);
}

uint64_t *WebCore::MediaPlayerPrivateAVFoundationObjC::sizeChanged(uint64_t *this)
{
  uint64_t v1;

  if (this[51])
  {
    v1 = (uint64_t)this;
    WebCore::MediaPlayerPrivateAVFoundationObjC::updateRotationSession(this);
    return (uint64_t *)WebCore::MediaPlayerPrivateAVFoundation::setNaturalSize((unsigned __int8 *)v1, *(float *)(v1 + 784), *(float *)(v1 + 788));
  }
  return this;
}

uint64_t WebCore::MediaPlayerPrivateAVFoundationObjC::languageOfPrimaryAudioTrack@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v3;
  uint64_t v4;
  void *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  BOOL v15;
  int v16;
  BOOL v17;
  uint64_t v18;
  int v19;
  void *v20;
  WTF::StringImpl *v21;
  void *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  NSObject *v33;
  uint64_t v34;
  void *v35;
  char *v36;
  unsigned __int8 *v37;
  int v38;
  int v39;
  _DWORD *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  int v46;
  BOOL v47;
  uint64_t v48;
  int v49;
  unsigned int v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  NSObject *v54;
  uint64_t v55;
  char *v56;
  unsigned __int8 *v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  WTF::Logger *v66;
  uint64_t v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::Logger *v71;
  uint64_t v72;
  WTF::StringImpl **v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  int v78;
  WTF::StringImpl *v79;
  unsigned int v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  NSObject *v85;
  uint64_t v86;
  char *v87;
  unsigned __int8 *v88;
  int v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  WTF::Logger *v95;
  uint64_t v96;
  uint64_t v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  WTF::Logger *v100;
  void *v101;
  uint64_t v102;
  WTF::StringImpl **v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  WTF::StringImpl *v113;
  WTF::Logger *v114;
  uint64_t v115;
  uint64_t v116;
  WTF::StringImpl *v117;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119;
  WTF::Logger *v120;
  uint64_t v121;
  WTF::StringImpl **v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  WTF::StringImpl *v125;
  WTF::StringImpl *v126;
  WTF::StringImpl *v127;
  int v128;
  WTF::StringImpl *v129;
  uint64_t v130;
  uint64_t v131;
  const char *v132;
  uint64_t v133;
  const char *v134;
  uint64_t v135;
  WTF::Logger *v136;
  uint64_t v137;
  WTF::StringImpl *v138;
  WTF::StringImpl *v139;
  WTF::StringImpl *v140;
  WTF::StringImpl *v141;
  WTF::StringImpl *v142;
  WTF::StringImpl *v143;
  __int128 buf;
  int v145;
  WTF::StringImpl *v146;
  int v147;
  WTF::StringImpl *v148;
  int v149;
  WTF::StringImpl *v150[3];

  v150[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v3 = *(_DWORD **)(this + 472);
  if (v3)
    goto LABEL_229;
  v4 = this;
  if (!*(_QWORD *)(this + 424))
  {
    v3 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (!*MEMORY[0x1E0CBF738])
      goto LABEL_230;
    goto LABEL_229;
  }
  v5 = (void *)objc_msgSend(*(id *)(this + 424), "selectedMediaOptionInMediaSelectionGroup:", objc_msgSend(*(id *)(this + 408), "mediaSelectionGroupForMediaCharacteristic:", PAL::get_AVFoundation_AVMediaCharacteristicAudible((PAL *)this)));
  if (!v5)
  {
    v20 = (void *)objc_msgSend(*(id *)(v4 + 408), "tracksWithMediaType:", PAL::get_AVFoundation_AVMediaTypeAudio(0));
    v22 = v20;
    if (v20 && objc_msgSend(v20, "count") == 1)
    {
      WebCore::AVTrackPrivateAVFObjCImpl::languageForAVAssetTrack((WebCore::AVTrackPrivateAVFObjCImpl *)objc_msgSend(v22, "objectAtIndex:", 0), &buf);
      v24 = buf;
      *(_QWORD *)&buf = 0;
      this = *(_QWORD *)(v4 + 472);
      *(_QWORD *)(v4 + 472) = v24;
      if (this)
      {
        v25 = *(_DWORD *)this - 2;
        if (*(_DWORD *)this == 2)
        {
          WTF::StringImpl::destroy((WTF::StringImpl *)this, v23);
          this = buf;
          *(_QWORD *)&buf = 0;
          if (!this)
            goto LABEL_33;
          v25 = *(_DWORD *)this - 2;
          if (*(_DWORD *)this == 2)
          {
            this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v129);
            goto LABEL_33;
          }
        }
        *(_DWORD *)this = v25;
      }
LABEL_33:
      v26 = *(_QWORD *)(v4 + 280);
      v27 = *(_QWORD *)(v4 + 288);
      v132 = "MediaPlayerPrivateAVFoundationObjC";
      v133 = 35;
      v134 = "languageOfPrimaryAudioTrack";
      v135 = v27;
      if (!*(_BYTE *)(v26 + 12) || !WebCore::LogMedia || byte_1ECE7C490 < 3u)
        goto LABEL_228;
      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v132);
      WTF::String::String((WTF::String *)&v139, "single audio track has language \"");
      v28 = *(WTF::StringImpl **)(v4 + 472);
      if (v28)
        *(_DWORD *)v28 += 2;
      WTF::String::String((WTF::String *)&v138, "\"");
      v143 = v28;
      *(_QWORD *)&buf = v140;
      v136 = v139;
      v142 = v138;
      WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v136, (uint64_t *)&v143, (uint64_t *)&v142, &v141);
      if (!v141)
        goto LABEL_309;
      v30 = v138;
      v138 = 0;
      if (v30)
      {
        if (*(_DWORD *)v30 == 2)
        {
          WTF::StringImpl::destroy(v30, v29);
          if (!v28)
            goto LABEL_45;
          goto LABEL_43;
        }
        *(_DWORD *)v30 -= 2;
      }
      if (!v28)
        goto LABEL_45;
LABEL_43:
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, v29);
      else
        *(_DWORD *)v28 -= 2;
LABEL_45:
      v31 = v139;
      v139 = 0;
      if (v31)
      {
        if (*(_DWORD *)v31 == 2)
          WTF::StringImpl::destroy(v31, v29);
        else
          *(_DWORD *)v31 -= 2;
      }
      v32 = v140;
      v140 = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 2)
          WTF::StringImpl::destroy(v32, v29);
        else
          *(_DWORD *)v32 -= 2;
      }
      v33 = qword_1ECE7C4A0;
      v34 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v34)
      {
        WTF::String::utf8();
        v36 = v136 ? (char *)v136 + 16 : 0;
        LODWORD(buf) = 136446210;
        *(_QWORD *)((char *)&buf + 4) = v36;
        _os_log_impl(&dword_1940B8000, v33, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
        v34 = (uint64_t)v136;
        v136 = 0;
        if (v34)
        {
          if (*(_DWORD *)v34 == 1)
            v34 = WTF::fastFree((WTF *)v34, v35);
          else
            --*(_DWORD *)v34;
        }
      }
      if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
      {
        v37 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
        while (1)
        {
          v38 = *v37;
          if ((v38 & 1) != 0)
            break;
          v39 = __ldaxr(v37);
          if (v39 == v38)
          {
            if (!__stxr(v38 | 1, v37))
            {
              v109 = WTF::Logger::observers((WTF::Logger *)v34);
              v110 = *(unsigned int *)(v109 + 12);
              if ((_DWORD)v110)
              {
                v111 = *(uint64_t **)v109;
                v131 = *(_QWORD *)v109 + 8 * v110;
                do
                {
                  v112 = *v111;
                  LODWORD(buf) = 0;
                  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v132);
                  v145 = 0;
                  WTF::String::String((WTF::String *)&v146, "single audio track has language \"");
                  v147 = 0;
                  v113 = *(WTF::StringImpl **)(v4 + 472);
                  if (v113)
                    *(_DWORD *)v113 += 2;
                  v148 = v113;
                  v149 = 0;
                  WTF::String::String((WTF::String *)v150, "\"");
                  v136 = 0;
                  v137 = 0;
                  v114 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x40);
                  LODWORD(v137) = 4;
                  v136 = v114;
                  v115 = HIDWORD(v137);
                  *((_DWORD *)v114 + 4 * HIDWORD(v137)) = buf;
                  v116 = *((_QWORD *)&buf + 1);
                  if (*((_QWORD *)&buf + 1))
                    **((_DWORD **)&buf + 1) += 2;
                  *((_QWORD *)v114 + 2 * v115 + 1) = v116;
                  *((_DWORD *)v114 + 4 * (v115 + 1)) = v145;
                  v117 = v146;
                  if (v146)
                    *(_DWORD *)v146 += 2;
                  *((_QWORD *)v114 + 2 * (v115 + 1) + 1) = v117;
                  *((_DWORD *)v114 + 4 * (v115 + 2)) = v147;
                  v118 = v148;
                  if (v148)
                    *(_DWORD *)v148 += 2;
                  *((_QWORD *)v114 + 2 * (v115 + 2) + 1) = v118;
                  *((_DWORD *)v114 + 4 * (v115 + 3)) = v149;
                  v119 = v150[0];
                  if (v150[0])
                    *(_DWORD *)v150[0] += 2;
                  *((_QWORD *)v114 + 2 * (v115 + 3) + 1) = v119;
                  HIDWORD(v137) = v115 + 4;
                  (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v112 + 16))(v112, &WebCore::LogMedia, 3, &v136);
                  v120 = v136;
                  if (HIDWORD(v137))
                  {
                    v121 = 16 * HIDWORD(v137);
                    v122 = (WTF::StringImpl **)((char *)v136 + 8);
                    do
                    {
                      v123 = *v122;
                      *v122 = 0;
                      if (v123)
                      {
                        if (*(_DWORD *)v123 == 2)
                          WTF::StringImpl::destroy(v123, (WTF::StringImpl *)v35);
                        else
                          *(_DWORD *)v123 -= 2;
                      }
                      v122 += 2;
                      v121 -= 16;
                    }
                    while (v121);
                    v120 = v136;
                  }
                  if (v120)
                  {
                    v136 = 0;
                    LODWORD(v137) = 0;
                    WTF::fastFree(v120, v35);
                  }
                  v124 = v150[0];
                  v150[0] = 0;
                  if (v124)
                  {
                    if (*(_DWORD *)v124 == 2)
                      WTF::StringImpl::destroy(v124, (WTF::StringImpl *)v35);
                    else
                      *(_DWORD *)v124 -= 2;
                  }
                  v125 = v148;
                  v148 = 0;
                  if (v125)
                  {
                    if (*(_DWORD *)v125 == 2)
                      WTF::StringImpl::destroy(v125, (WTF::StringImpl *)v35);
                    else
                      *(_DWORD *)v125 -= 2;
                  }
                  v126 = v146;
                  v146 = 0;
                  if (v126)
                  {
                    if (*(_DWORD *)v126 == 2)
                      WTF::StringImpl::destroy(v126, (WTF::StringImpl *)v35);
                    else
                      *(_DWORD *)v126 -= 2;
                  }
                  v127 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                  *((_QWORD *)&buf + 1) = 0;
                  if (v127)
                  {
                    if (*(_DWORD *)v127 == 2)
                      WTF::StringImpl::destroy(v127, (WTF::StringImpl *)v35);
                    else
                      *(_DWORD *)v127 -= 2;
                  }
                  ++v111;
                }
                while (v111 != (uint64_t *)v131);
              }
              v128 = __ldxr(v37);
              if (v128 == 1)
              {
                if (!__stlxr(0, v37))
                  break;
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
              break;
            }
          }
          else
          {
            __clrex();
          }
        }
      }
      this = (uint64_t)v141;
      v141 = 0;
      if (this)
      {
LABEL_226:
        if (*(_DWORD *)this == 2)
          this = WTF::StringImpl::destroy((WTF::StringImpl *)this, (WTF::StringImpl *)v35);
        else
          *(_DWORD *)this -= 2;
        goto LABEL_228;
      }
      goto LABEL_228;
    }
    v40 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v40 += 2;
    this = *(_QWORD *)(v4 + 472);
    *(_QWORD *)(v4 + 472) = v40;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v21);
      else
        *(_DWORD *)this -= 2;
    }
    v42 = *(_QWORD *)(v4 + 280);
    v41 = *(_QWORD *)(v4 + 288);
    v132 = "MediaPlayerPrivateAVFoundationObjC";
    v133 = 35;
    v134 = "languageOfPrimaryAudioTrack";
    v135 = v41;
    if (v22)
    {
      this = objc_msgSend(v22, "count");
      v22 = (void *)this;
    }
    if (!*(_BYTE *)(v42 + 12) || !WebCore::LogMedia || byte_1ECE7C490 < 3u)
      goto LABEL_228;
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v132);
    WTF::String::number((WTF::String *)v22);
    WTF::String::String((WTF::String *)&v140, " audio tracks, returning empty");
    if (v142)
    {
      v43 = *((_DWORD *)v142 + 1);
      if (v141)
        goto LABEL_78;
    }
    else
    {
      v43 = 0;
      if (v141)
      {
LABEL_78:
        v44 = *((_DWORD *)v141 + 1);
        if (v140)
        {
LABEL_79:
          v45 = *((_DWORD *)v140 + 1);
LABEL_80:
          if ((v45 | v44) < 0)
            goto LABEL_308;
          v15 = __OFADD__(v44, v45);
          v46 = v44 + v45;
          v47 = v15;
          if (v43 < 0)
            goto LABEL_308;
          if (v47)
            goto LABEL_308;
          v48 = (v43 + v46);
          if (__OFADD__(v43, v46))
            goto LABEL_308;
          if (v142 && (*((_BYTE *)v142 + 16) & 4) == 0)
          {
            v49 = 0;
            goto LABEL_163;
          }
          if (v141)
          {
            v80 = *((_DWORD *)v141 + 4);
            v49 = (v80 >> 2) & 1;
            if (v140 && (v80 & 4) != 0)
              goto LABEL_162;
          }
          else
          {
            if (v140)
            {
LABEL_162:
              v49 = (*((unsigned __int8 *)v140 + 16) >> 2) & 1;
              goto LABEL_163;
            }
            v49 = 1;
          }
LABEL_163:
          WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v48, v49, v142, (uint64_t)v141, (uint64_t)v140, &buf);
          v143 = (WTF::StringImpl *)buf;
          if ((_QWORD)buf)
          {
            v82 = v140;
            v140 = 0;
            if (v82)
            {
              if (*(_DWORD *)v82 == 2)
                WTF::StringImpl::destroy(v82, v81);
              else
                *(_DWORD *)v82 -= 2;
            }
            v83 = v141;
            v141 = 0;
            if (v83)
            {
              if (*(_DWORD *)v83 == 2)
                WTF::StringImpl::destroy(v83, v81);
              else
                *(_DWORD *)v83 -= 2;
            }
            v84 = v142;
            v142 = 0;
            if (v84)
            {
              if (*(_DWORD *)v84 == 2)
                WTF::StringImpl::destroy(v84, v81);
              else
                *(_DWORD *)v84 -= 2;
            }
            v85 = qword_1ECE7C4A0;
            v86 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
            if ((_DWORD)v86)
            {
              WTF::String::utf8();
              v87 = v136 ? (char *)v136 + 16 : 0;
              LODWORD(buf) = 136446210;
              *(_QWORD *)((char *)&buf + 4) = v87;
              _os_log_impl(&dword_1940B8000, v85, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
              v86 = (uint64_t)v136;
              v136 = 0;
              if (v86)
              {
                if (*(_DWORD *)v86 == 1)
                  v86 = WTF::fastFree((WTF *)v86, v35);
                else
                  --*(_DWORD *)v86;
              }
            }
            if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
            {
              v88 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
              while (1)
              {
                v89 = *v88;
                if ((v89 & 1) != 0)
                  break;
                v90 = __ldaxr(v88);
                if (v90 == v89)
                {
                  if (!__stxr(v89 | 1, v88))
                  {
                    v91 = WTF::Logger::observers((WTF::Logger *)v86);
                    v92 = *(unsigned int *)(v91 + 12);
                    if ((_DWORD)v92)
                    {
                      v93 = *(uint64_t **)v91;
                      v130 = *(_QWORD *)v91 + 8 * v92;
                      do
                      {
                        v94 = *v93;
                        LODWORD(buf) = 0;
                        WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v132);
                        v145 = 0;
                        WTF::String::number((WTF::String *)v22);
                        v147 = 0;
                        WTF::String::String((WTF::String *)&v148, " audio tracks, returning empty");
                        v136 = 0;
                        v137 = 0;
                        v95 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
                        LODWORD(v137) = 3;
                        v136 = v95;
                        v96 = HIDWORD(v137);
                        *((_DWORD *)v95 + 4 * HIDWORD(v137)) = buf;
                        v97 = *((_QWORD *)&buf + 1);
                        if (*((_QWORD *)&buf + 1))
                          **((_DWORD **)&buf + 1) += 2;
                        *((_QWORD *)v95 + 2 * v96 + 1) = v97;
                        *((_DWORD *)v95 + 4 * (v96 + 1)) = v145;
                        v98 = v146;
                        if (v146)
                          *(_DWORD *)v146 += 2;
                        *((_QWORD *)v95 + 2 * (v96 + 1) + 1) = v98;
                        *((_DWORD *)v95 + 4 * (v96 + 2)) = v147;
                        v99 = v148;
                        if (v148)
                          *(_DWORD *)v148 += 2;
                        *((_QWORD *)v95 + 2 * (v96 + 2) + 1) = v99;
                        HIDWORD(v137) = v96 + 3;
                        (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v94 + 16))(v94, &WebCore::LogMedia, 3, &v136);
                        v100 = v136;
                        if (HIDWORD(v137))
                        {
                          v101 = v22;
                          v102 = 16 * HIDWORD(v137);
                          v103 = (WTF::StringImpl **)((char *)v136 + 8);
                          do
                          {
                            v104 = *v103;
                            *v103 = 0;
                            if (v104)
                            {
                              if (*(_DWORD *)v104 == 2)
                                WTF::StringImpl::destroy(v104, (WTF::StringImpl *)v35);
                              else
                                *(_DWORD *)v104 -= 2;
                            }
                            v103 += 2;
                            v102 -= 16;
                          }
                          while (v102);
                          v100 = v136;
                          v22 = v101;
                        }
                        if (v100)
                        {
                          v136 = 0;
                          LODWORD(v137) = 0;
                          WTF::fastFree(v100, v35);
                        }
                        v105 = v148;
                        v148 = 0;
                        if (v105)
                        {
                          if (*(_DWORD *)v105 == 2)
                            WTF::StringImpl::destroy(v105, (WTF::StringImpl *)v35);
                          else
                            *(_DWORD *)v105 -= 2;
                        }
                        v106 = v146;
                        v146 = 0;
                        if (v106)
                        {
                          if (*(_DWORD *)v106 == 2)
                            WTF::StringImpl::destroy(v106, (WTF::StringImpl *)v35);
                          else
                            *(_DWORD *)v106 -= 2;
                        }
                        v107 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                        *((_QWORD *)&buf + 1) = 0;
                        if (v107)
                        {
                          if (*(_DWORD *)v107 == 2)
                            WTF::StringImpl::destroy(v107, (WTF::StringImpl *)v35);
                          else
                            *(_DWORD *)v107 -= 2;
                        }
                        ++v93;
                      }
                      while (v93 != (uint64_t *)v130);
                    }
                    v108 = __ldxr(v88);
                    if (v108 == 1)
                    {
                      if (!__stlxr(0, v88))
                        break;
                    }
                    else
                    {
LABEL_223:
                      __clrex();
                    }
LABEL_224:
                    WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                    break;
                  }
                }
                else
                {
                  __clrex();
                }
              }
            }
LABEL_225:
            this = (uint64_t)v143;
            v143 = 0;
            if (!this)
              goto LABEL_228;
            goto LABEL_226;
          }
LABEL_308:
          __break(0xC471u);
          JUMPOUT(0x19475DE1CLL);
        }
LABEL_298:
        v45 = 0;
        goto LABEL_80;
      }
    }
    v44 = 0;
    if (v140)
      goto LABEL_79;
    goto LABEL_298;
  }
  MEMORY[0x19AEA5508](&buf, objc_msgSend((id)objc_msgSend(v5, "locale"), "localeIdentifier"));
  v7 = buf;
  *(_QWORD *)&buf = 0;
  this = *(_QWORD *)(v4 + 472);
  *(_QWORD *)(v4 + 472) = v7;
  if (this)
  {
    v8 = *(_DWORD *)this - 2;
    if (*(_DWORD *)this == 2)
    {
      WTF::StringImpl::destroy((WTF::StringImpl *)this, v6);
      this = buf;
      *(_QWORD *)&buf = 0;
      if (!this)
        goto LABEL_7;
      v8 = *(_DWORD *)this - 2;
      if (*(_DWORD *)this == 2)
      {
        this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v79);
        goto LABEL_7;
      }
    }
    *(_DWORD *)this = v8;
  }
LABEL_7:
  v9 = *(_QWORD *)(v4 + 280);
  v10 = *(_QWORD *)(v4 + 288);
  v132 = "MediaPlayerPrivateAVFoundationObjC";
  v133 = 35;
  v134 = "languageOfPrimaryAudioTrack";
  v135 = v10;
  if (*(_BYTE *)(v9 + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 3u)
  {
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v132);
    WTF::String::String((WTF::String *)&v141, "language of selected audible option ");
    v11 = *(_QWORD *)(v4 + 472);
    if (v11)
      *(_DWORD *)v11 += 2;
    if (v142)
    {
      v12 = *((_DWORD *)v142 + 1);
      if (v141)
        goto LABEL_14;
    }
    else
    {
      v12 = 0;
      if (v141)
      {
LABEL_14:
        v13 = *((_DWORD *)v141 + 1);
        if (v11)
        {
LABEL_15:
          v14 = *(_DWORD *)(v11 + 4);
LABEL_16:
          if ((v14 | v13) < 0)
            goto LABEL_309;
          v15 = __OFADD__(v13, v14);
          v16 = v13 + v14;
          v17 = v15;
          if (v12 < 0)
            goto LABEL_309;
          if (v17)
            goto LABEL_309;
          v18 = (v12 + v16);
          if (__OFADD__(v12, v16))
            goto LABEL_309;
          if (v142 && (*((_BYTE *)v142 + 16) & 4) == 0)
          {
            v19 = 0;
            goto LABEL_94;
          }
          if (v141)
          {
            v50 = *((_DWORD *)v141 + 4);
            v19 = (v50 >> 2) & 1;
            if (v11 && (v50 & 4) != 0)
              goto LABEL_93;
          }
          else
          {
            if (v11)
            {
LABEL_93:
              v19 = (*(unsigned __int8 *)(v11 + 16) >> 2) & 1;
              goto LABEL_94;
            }
            v19 = 1;
          }
LABEL_94:
          WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v18, v19, v142, (uint64_t)v141, v11, &buf);
          v143 = (WTF::StringImpl *)buf;
          if ((_QWORD)buf)
          {
            if (v11)
            {
              if (*(_DWORD *)v11 == 2)
                WTF::StringImpl::destroy((WTF::StringImpl *)v11, v51);
              else
                *(_DWORD *)v11 -= 2;
            }
            v52 = v141;
            v141 = 0;
            if (v52)
            {
              if (*(_DWORD *)v52 == 2)
                WTF::StringImpl::destroy(v52, v51);
              else
                *(_DWORD *)v52 -= 2;
            }
            v53 = v142;
            v142 = 0;
            if (v53)
            {
              if (*(_DWORD *)v53 == 2)
                WTF::StringImpl::destroy(v53, v51);
              else
                *(_DWORD *)v53 -= 2;
            }
            v54 = qword_1ECE7C4A0;
            v55 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
            if ((_DWORD)v55)
            {
              WTF::String::utf8();
              v56 = v136 ? (char *)v136 + 16 : 0;
              LODWORD(buf) = 136446210;
              *(_QWORD *)((char *)&buf + 4) = v56;
              _os_log_impl(&dword_1940B8000, v54, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
              v55 = (uint64_t)v136;
              v136 = 0;
              if (v55)
              {
                if (*(_DWORD *)v55 == 1)
                  v55 = WTF::fastFree((WTF *)v55, v35);
                else
                  --*(_DWORD *)v55;
              }
            }
            if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
            {
              v57 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
              while (1)
              {
                v58 = *v57;
                if ((v58 & 1) != 0)
                  break;
                v59 = __ldaxr(v57);
                if (v59 == v58)
                {
                  if (!__stxr(v58 | 1, v57))
                  {
                    v60 = WTF::Logger::observers((WTF::Logger *)v55);
                    v61 = *(unsigned int *)(v60 + 12);
                    if ((_DWORD)v61)
                    {
                      v62 = *(uint64_t **)v60;
                      v63 = *(_QWORD *)v60 + 8 * v61;
                      do
                      {
                        v64 = *v62;
                        LODWORD(buf) = 0;
                        WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v132);
                        v145 = 0;
                        WTF::String::String((WTF::String *)&v146, "language of selected audible option ");
                        v147 = 0;
                        v65 = *(WTF::StringImpl **)(v4 + 472);
                        if (v65)
                          *(_DWORD *)v65 += 2;
                        v148 = v65;
                        v136 = 0;
                        v137 = 0;
                        v66 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
                        LODWORD(v137) = 3;
                        v136 = v66;
                        v67 = HIDWORD(v137);
                        *((_DWORD *)v66 + 4 * HIDWORD(v137)) = buf;
                        v68 = *((_QWORD *)&buf + 1);
                        if (*((_QWORD *)&buf + 1))
                          **((_DWORD **)&buf + 1) += 2;
                        *((_QWORD *)v66 + 2 * v67 + 1) = v68;
                        *((_DWORD *)v66 + 4 * (v67 + 1)) = v145;
                        v69 = v146;
                        if (v146)
                          *(_DWORD *)v146 += 2;
                        *((_QWORD *)v66 + 2 * (v67 + 1) + 1) = v69;
                        *((_DWORD *)v66 + 4 * (v67 + 2)) = v147;
                        v70 = v148;
                        if (v148)
                          *(_DWORD *)v148 += 2;
                        *((_QWORD *)v66 + 2 * (v67 + 2) + 1) = v70;
                        HIDWORD(v137) = v67 + 3;
                        (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v64 + 16))(v64, &WebCore::LogMedia, 3, &v136);
                        v71 = v136;
                        if (HIDWORD(v137))
                        {
                          v72 = 16 * HIDWORD(v137);
                          v73 = (WTF::StringImpl **)((char *)v136 + 8);
                          do
                          {
                            v74 = *v73;
                            *v73 = 0;
                            if (v74)
                            {
                              if (*(_DWORD *)v74 == 2)
                                WTF::StringImpl::destroy(v74, (WTF::StringImpl *)v35);
                              else
                                *(_DWORD *)v74 -= 2;
                            }
                            v73 += 2;
                            v72 -= 16;
                          }
                          while (v72);
                          v71 = v136;
                        }
                        if (v71)
                        {
                          v136 = 0;
                          LODWORD(v137) = 0;
                          WTF::fastFree(v71, v35);
                        }
                        v75 = v148;
                        v148 = 0;
                        if (v75)
                        {
                          if (*(_DWORD *)v75 == 2)
                            WTF::StringImpl::destroy(v75, (WTF::StringImpl *)v35);
                          else
                            *(_DWORD *)v75 -= 2;
                        }
                        v76 = v146;
                        v146 = 0;
                        if (v76)
                        {
                          if (*(_DWORD *)v76 == 2)
                            WTF::StringImpl::destroy(v76, (WTF::StringImpl *)v35);
                          else
                            *(_DWORD *)v76 -= 2;
                        }
                        v77 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                        *((_QWORD *)&buf + 1) = 0;
                        if (v77)
                        {
                          if (*(_DWORD *)v77 == 2)
                            WTF::StringImpl::destroy(v77, (WTF::StringImpl *)v35);
                          else
                            *(_DWORD *)v77 -= 2;
                        }
                        ++v62;
                      }
                      while (v62 != (uint64_t *)v63);
                    }
                    v78 = __ldxr(v57);
                    if (v78 != 1)
                      goto LABEL_223;
                    if (__stlxr(0, v57))
                      goto LABEL_224;
                    goto LABEL_225;
                  }
                }
                else
                {
                  __clrex();
                }
              }
            }
            goto LABEL_225;
          }
LABEL_309:
          __break(0xC471u);
          JUMPOUT(0x19475DE14);
        }
LABEL_289:
        v14 = 0;
        goto LABEL_16;
      }
    }
    v13 = 0;
    if (v11)
      goto LABEL_15;
    goto LABEL_289;
  }
LABEL_228:
  v3 = *(_DWORD **)(v4 + 472);
  if (v3)
LABEL_229:
    *v3 += 2;
LABEL_230:
  *a2 = v3;
  return this;
}

void sub_19475DE28(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF *a17, int a18, int a19, WTF::StringImpl *a20,WTF::StringImpl *a21,uint64_t a22,WTF::StringImpl *a23,uint64_t a24,WTF::StringImpl *a25,char a26,WTF::StringImpl *a27,uint64_t a28,WTF::StringImpl *a29,uint64_t a30,WTF::StringImpl *a31,uint64_t a32,WTF::StringImpl *a33)
{
  unsigned __int8 *v33;
  int v35;

  v35 = __ldxr(v33);
  if (v35 == 1)
  {
    if (!__stlxr(0, v33))
    {
LABEL_6:
      if (a23)
      {
        if (*(_DWORD *)a23 == 2)
          WTF::StringImpl::destroy(a23, a2);
        else
          *(_DWORD *)a23 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t *WebCore::MediaPlayerPrivateAVFoundationObjC::updateRotationSession(uint64_t *this)
{
  uint64_t *v1;
  void *v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  NSString *AVFoundation_AVMediaCharacteristicVisual;
  void *v10;
  uint64_t *v11;
  double v12;
  float v13;
  double v14;
  float v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  double v26;
  BOOL v27;
  uint64_t v28;
  const void *v29;
  const void *v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  float64x2_t v37;
  double v38;
  double v39;
  double v40;
  double v41;

  if (!this[51])
    return this;
  v1 = this;
  this = (uint64_t *)WebCore::MediaPlayerPrivateAVFoundationObjC::assetStatus((uint64_t)this);
  if (this < 6)
    return this;
  v2 = (void *)v1[51];
  if (v2)
  {
    v2 = (void *)objc_msgSend(v2, "preferredTransform");
    v4 = v31;
    v3 = v32;
    v6 = v33;
    v5 = v34;
    v8 = v35;
    v7 = v36;
  }
  else
  {
    v7 = 0.0;
    v8 = 0.0;
    v5 = 0.0;
    v6 = 0.0;
    v3 = 0.0;
    v4 = 0.0;
  }
  v37.f64[0] = v4;
  v37.f64[1] = v3;
  v38 = v6;
  v39 = v5;
  v40 = v8;
  v41 = v7;
  AVFoundation_AVMediaCharacteristicVisual = (NSString *)PAL::get_AVFoundation_AVMediaCharacteristicVisual((PAL *)v2);
  this = (uint64_t *)WebCore::MediaPlayerPrivateAVFoundationObjC::firstEnabledTrack((WebCore::MediaPlayerPrivateAVFoundationObjC *)v1, AVFoundation_AVMediaCharacteristicVisual);
  if (this)
  {
    v11 = this;
    objc_msgSend(this, "naturalSize");
    v13 = v12;
    v15 = v14;
    this = (uint64_t *)objc_msgSend(v11, "preferredTransform");
    v16 = v32 * v6;
    v17 = v36 * v6;
    v6 = v34 * v6 + v33 * v4;
    v18 = v17 + v35 * v4;
    v4 = v16 + v31 * v4;
    v19 = v32 * v5;
    v20 = v36 * v5;
    v5 = v34 * v5 + v33 * v3;
    v21 = v20 + v35 * v3;
    v3 = v19 + v31 * v3;
    v8 = v18 + v8;
    v37.f64[0] = v4;
    v37.f64[1] = v3;
    v7 = v21 + v7;
    v38 = v6;
    v39 = v5;
    v40 = v8;
    v41 = v7;
  }
  else
  {
    v13 = 0.0;
    v15 = 0.0;
  }
  if (v4 != 1.0 || v3 != 0.0 || v6 != 0.0 || v5 != 1.0 || v8 != 0.0)
  {
    v22 = v1 + 67;
    v23 = v1[67];
LABEL_15:
    if (v23 && *(_BYTE *)(v23 + 64))
    {
      v24 = 0;
      do
      {
        v25 = *(double *)(v23 + 16 + v24 * 8);
        v26 = v37.f64[v24];
        if (v25 != v26)
          break;
        v27 = v24++ == 5;
      }
      while (!v27);
      if (v25 == v26)
      {
        v27 = *(float *)(v23 + 8) == v13 && *(float *)(v23 + 12) == v15;
        if (v27)
          return this;
      }
    }
    v28 = WTF::fastMalloc((WTF *)0x70);
    this = (uint64_t *)WebCore::ImageRotationSessionVT::ImageRotationSessionVT(v28, &v37, 1, 1, v13, v15);
    v23 = *v22;
    *v22 = v28;
    if (!v23)
      return this;
    goto LABEL_27;
  }
  v22 = v1 + 67;
  v23 = v1[67];
  if (v7 != 0.0)
    goto LABEL_15;
  *v22 = 0;
  if (!v23)
    return this;
LABEL_27:
  v29 = *(const void **)(v23 + 96);
  *(_QWORD *)(v23 + 96) = 0;
  if (v29)
    CFRelease(v29);
  v30 = *(const void **)(v23 + 88);
  *(_QWORD *)(v23 + 88) = 0;
  if (v30)
    CFRelease(v30);
  return (uint64_t *)WTF::fastFree((WTF *)v23, v10);
}

void sub_19475E57C(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebCore::MediaPlayerPrivateAVFoundationObjC::setTextTrackRepresentation(WebCore::MediaPlayerPrivateAVFoundationObjC *this, CALayer *a2)
{
  if (a2)
    a2 = (CALayer *)(*((uint64_t (**)(CALayer *))a2->super.isa + 3))(a2);
  return WebCore::VideoLayerManagerObjC::setTextTrackRepresentationLayer(*((_QWORD *)this + 55), a2);
}

uint64_t WebCore::MediaPlayerPrivateAVFoundationObjC::audioSourceProvider(WebCore::MediaPlayerPrivateAVFoundationObjC *this)
{
  uint64_t result;
  PAL *v3;
  PAL *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  WebCore::AudioSourceProviderAVFObjC *v11;
  NSString *AVFoundation_AVMediaCharacteristicAudible;
  AVAssetTrack *EnabledTrack;
  PAL *v14;

  result = *((_QWORD *)this + 61);
  if (!result)
  {
    WebCore::AudioSourceProviderAVFObjC::create(*((void **)this + 53), &v14);
    v3 = v14;
    v14 = 0;
    v4 = (PAL *)*((_QWORD *)this + 61);
    *((_QWORD *)this + 61) = v3;
    if (v4)
    {
      v5 = (unsigned int *)((char *)v4 + 8);
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, (unsigned int *)v4 + 2);
        (*(void (**)(PAL *))(*(_QWORD *)v4 + 32))(v4);
      }
      v4 = v14;
      v14 = 0;
      if (v4)
      {
        v8 = (unsigned int *)((char *)v4 + 8);
        do
        {
          v9 = __ldaxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
        {
          atomic_store(1u, (unsigned int *)v4 + 2);
          v4 = (PAL *)(*(uint64_t (**)(PAL *))(*(_QWORD *)v4 + 32))(v4);
        }
      }
    }
    v11 = (WebCore::AudioSourceProviderAVFObjC *)*((_QWORD *)this + 61);
    AVFoundation_AVMediaCharacteristicAudible = (NSString *)PAL::get_AVFoundation_AVMediaCharacteristicAudible(v4);
    EnabledTrack = (AVAssetTrack *)WebCore::MediaPlayerPrivateAVFoundationObjC::firstEnabledTrack(this, AVFoundation_AVMediaCharacteristicAudible);
    WebCore::AudioSourceProviderAVFObjC::setAudioTrack(v11, EnabledTrack);
    return *((_QWORD *)this + 61);
  }
  return result;
}

WTF::StringImpl *WebCore::MediaPlayerPrivateAVFoundationObjC::resolvedURLChanged(WebCore::MediaPlayerPrivateAVFoundationObjC *this)
{
  void *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5[5];

  v2 = (void *)*((_QWORD *)this + 51);
  if (v2)
  {
    MEMORY[0x19AEA52E0](v5, objc_msgSend(v2, "resolvedURL"));
  }
  else
  {
    v5[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v5);
  }
  WebCore::MediaPlayerPrivateAVFoundation::setResolvedURL(this, (uint64_t *)v5);
  result = v5[0];
  v5[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_19475E728(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::MediaPlayerPrivateAVFoundationObjC::didPassCORSAccessCheck(id *this)
{
  void *v1;

  v1 = (void *)objc_msgSend((id)objc_msgSend(this[51], "resourceLoader"), "URLSession");
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return objc_msgSend(v1, "didPassCORSAccessChecks");
  else
    return 0;
}

uint64_t WebCore::MediaPlayerPrivateAVFoundationObjC::isCrossOrigin(id *this, const WebCore::SecurityOrigin *a2)
{
  void *v3;
  int v4;
  int v5;

  v3 = (void *)objc_msgSend((id)objc_msgSend(this[51], "resourceLoader"), "URLSession");
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v4 = objc_msgSend(v3, "isCrossOrigin:", a2);
    v5 = 1;
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  return v4 | (v5 << 8);
}

uint64_t WebCore::MediaPlayerPrivateAVFoundation::readyState(WebCore::MediaPlayerPrivateAVFoundation *this)
{
  return *((unsigned __int8 *)this + 169);
}

uint64_t WebCore::MediaPlayerPrivateAVFoundationObjC::waitForVideoOutputMediaDataWillChange(WebCore::MediaPlayerPrivateAVFoundationObjC *this)
{
  uint64_t v1;
  WTF::RunLoop *v3;
  double v4;
  double v5;
  uint64_t v6;
  uint64_t v8;
  int v9;
  uint64_t *v10;
  _QWORD *v11;
  void *v12;
  unsigned __int8 **v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  WTF::RunLoop *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  int v26;
  void *v27;
  WebCore::MediaPlayerPrivateAVFoundationObjC *v29;
  int v30;
  int v31;
  WTF::RunLoop *v32;
  uint64_t isActive;
  uint64_t v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  uint64_t v39;
  unsigned __int8 *v40;
  int v41;
  _QWORD *v42;
  int v44;
  double v45;
  const char *v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  _QWORD v50[3];
  _QWORD *v51;
  char v52;

  if (*((_BYTE *)this + 966))
    return 1;
  v3 = (WTF::RunLoop *)WTF::MonotonicTime::now(this);
  v5 = v4;
  LOBYTE(v50[0]) = 0;
  v52 = 0;
  if (*((_DWORD *)this + 234))
    goto LABEL_29;
  v6 = *((_QWORD *)this + 6);
  if (!v6)
  {
    v8 = 0;
    goto LABEL_16;
  }
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_9;
  }
  MEMORY[0x19AEA534C](v6);
LABEL_9:
  if (*(_QWORD *)(v6 + 24))
  {
    ++*(_QWORD *)(v6 + 16);
    v8 = v6;
  }
  else
  {
    v8 = 0;
  }
  v9 = __ldxr((unsigned __int8 *)v6);
  if (v9 != 1)
  {
    __clrex();
    goto LABEL_15;
  }
  if (__stlxr(0, (unsigned __int8 *)v6))
LABEL_15:
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
LABEL_16:
  v10 = (uint64_t *)WTF::fastMalloc((WTF *)0x10);
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v11 = &off_1E3204938;
  v11[1] = v8;
  v11[2] = this;
  *v10 = 0;
  v10[1] = (uint64_t)v11;
  v13 = (unsigned __int8 **)*((_QWORD *)this + 142);
  *((_QWORD *)this + 142) = v10;
  if (!v13)
    goto LABEL_24;
  v14 = v13[1];
  v13[1] = 0;
  if (v14)
    (*(void (**)(unsigned __int8 *))(*(_QWORD *)v14 + 8))(v14);
  if (*v13)
  {
    *((_QWORD *)*v13 + 1) = 0;
    v15 = *v13;
    *v13 = 0;
    if (v15)
    {
      do
      {
        v16 = __ldaxr((unsigned int *)v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, (unsigned int *)v15));
      if (!v17)
        goto LABEL_94;
    }
  }
  else
  {
    *v13 = 0;
  }
  while (1)
  {
    WTF::fastFree((WTF *)v13, v12);
    v10 = (uint64_t *)*((_QWORD *)this + 142);
LABEL_24:
    v18 = *((_QWORD *)this + 63);
    WTF::WeakHashSet<WTF::Observer<void ()(void)>,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WTF::Observer<void ()(void)>>(v18 + 88, v10, (uint64_t)&v46);
    WebCore::QueuedVideoOutput::configureNextImageTimeObserver((_QWORD *)v18, v19, v20);
    v21 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)objc_msgSend(*(id *)(v18 + 40), "requestNotificationOfMediaDataChangeAsSoonAsPossible"));
    if (v52)
    {
      v22 = v51;
      v50[0] = off_1E32051C0;
      v51 = 0;
      if (v22)
        (*(void (**)(_QWORD *))(*v22 + 8))(v22);
      WTF::RunLoop::TimerBase::~TimerBase((WTF::RunLoop::TimerBase *)v50);
      v52 = 0;
    }
    v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v23 = off_1E3204960;
    WTF::RunLoop::TimerBase::TimerBase((WTF::RunLoop::TimerBase *)v50, v21);
    v50[0] = off_1E32051C0;
    v51 = v23;
    v52 = 1;
    v3 = (WTF::RunLoop *)WTF::RunLoop::TimerBase::start();
LABEL_29:
    v24 = *((_QWORD *)this + 6);
    if (!v24)
    {
      v13 = 0;
      goto LABEL_41;
    }
    if (__ldaxr((unsigned __int8 *)v24))
    {
      __clrex();
LABEL_33:
      v3 = (WTF::RunLoop *)MEMORY[0x19AEA534C](v24);
      goto LABEL_34;
    }
    if (__stxr(1u, (unsigned __int8 *)v24))
      goto LABEL_33;
LABEL_34:
    if (*(_QWORD *)(v24 + 24))
    {
      ++*(_QWORD *)(v24 + 16);
      v13 = (unsigned __int8 **)v24;
    }
    else
    {
      v13 = 0;
    }
    v26 = __ldxr((unsigned __int8 *)v24);
    if (v26 != 1)
    {
      __clrex();
LABEL_40:
      v3 = (WTF::RunLoop *)WTF::Lock::unlockSlow((WTF::Lock *)v24);
      goto LABEL_41;
    }
    if (__stlxr(0, (unsigned __int8 *)v24))
      goto LABEL_40;
LABEL_41:
    ++*((_DWORD *)this + 234);
    WTF::RunLoop::run(v3);
    if (!v13)
    {
      v1 = 3;
      goto LABEL_80;
    }
    if (__ldaxr((unsigned __int8 *)v13))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v13))
    {
      goto LABEL_47;
    }
    MEMORY[0x19AEA534C](v13);
LABEL_47:
    if (v13[3])
    {
      ++v13[1];
      v29 = this;
    }
    else
    {
      v29 = 0;
    }
    v30 = __ldxr((unsigned __int8 *)v13);
    if (v30 != 1)
    {
      __clrex();
LABEL_54:
      WTF::Lock::unlockSlow((WTF::Lock *)v13);
      goto LABEL_55;
    }
    if (__stlxr(0, (unsigned __int8 *)v13))
      goto LABEL_54;
LABEL_55:
    if (!v29)
    {
      v1 = 3;
      goto LABEL_68;
    }
    v15 = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayerPrivateAVFoundation,(WTF::DestructionThread)1>(*((unsigned __int8 **)v29 + 6));
    v31 = *((_DWORD *)this + 234) - 1;
    *((_DWORD *)this + 234) = v31;
    if (v31)
    {
      v32 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)v15);
      WTF::RunLoop::stop(v32);
      v1 = 1;
      goto LABEL_68;
    }
    if (v52)
      break;
    __break(1u);
LABEL_94:
    atomic_store(1u, (unsigned int *)v15);
    WTF::fastFree((WTF *)v15, v12);
  }
  isActive = WTF::RunLoop::TimerBase::isActive((WTF::RunLoop::TimerBase *)v50);
  v34 = *((_QWORD *)this + 35);
  if ((isActive & 1) != 0)
  {
    v35 = *((_QWORD *)this + 36);
    v46 = "MediaPlayerPrivateAVFoundationObjC";
    v47 = 35;
    v48 = "waitForVideoOutputMediaDataWillChange";
    v49 = v35;
    WTF::MonotonicTime::now((WTF::MonotonicTime *)isActive);
    v45 = v36 - v5;
    if (*(_BYTE *)(v34 + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 3u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [30],double>((uint64_t)&WebCore::LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)&v46, "waiting for videoOutput took ", &v45);
    v1 = 0;
  }
  else
  {
    v37 = *((_QWORD *)this + 36);
    v46 = "MediaPlayerPrivateAVFoundationObjC";
    v47 = 35;
    v48 = "waitForVideoOutputMediaDataWillChange";
    v49 = v37;
    if (*(_BYTE *)(v34 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [10]>((uint64_t)&WebCore::LogMedia, 1u, (WTF::Logger::LogSiteIdentifier *)&v46, "timed out");
    *((_BYTE *)this + 966) = 1;
    v1 = 2;
  }
LABEL_68:
  if (__ldaxr((unsigned __int8 *)v13))
  {
    __clrex();
    goto LABEL_71;
  }
  if (__stxr(1u, (unsigned __int8 *)v13))
LABEL_71:
    MEMORY[0x19AEA534C](v13);
  v39 = (uint64_t)(v13[2] - 1);
  v13[2] = (unsigned __int8 *)v39;
  if (!v39)
  {
    v40 = v13[1];
    v41 = __ldxr((unsigned __int8 *)v13);
    if (v41 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v13))
      {
        if (!v40)
LABEL_79:
          WTF::fastFree((WTF *)v13, v27);
        goto LABEL_80;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v13);
    if (!v40)
      goto LABEL_79;
    goto LABEL_80;
  }
  v44 = __ldxr((unsigned __int8 *)v13);
  if (v44 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v13))
      goto LABEL_80;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v13);
LABEL_80:
  if (v52)
  {
    v42 = v51;
    v50[0] = off_1E32051C0;
    v51 = 0;
    if (v42)
      (*(void (**)(_QWORD *))(*v42 + 8))(v42);
    WTF::RunLoop::TimerBase::~TimerBase((WTF::RunLoop::TimerBase *)v50);
  }
  return v1;
}

void sub_19475ED14(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void (**a14)(WTF::RunLoop::Timer *__hidden this), uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  uint64_t v18;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;

  if (__ldaxr((unsigned __int8 *)v18))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v18))
  {
LABEL_6:
    v21 = *(_QWORD *)(v18 + 16) - 1;
    *(_QWORD *)(v18 + 16) = v21;
    if (v21)
    {
      v24 = __ldxr((unsigned __int8 *)v18);
      if (v24 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v18))
          goto LABEL_19;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v18);
      goto LABEL_19;
    }
    v22 = *(_QWORD *)(v18 + 8);
    v23 = __ldxr((unsigned __int8 *)v18);
    if (v23 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v18))
      {
LABEL_12:
        if (!v22)
          WTF::fastFree((WTF *)v18, a2);
LABEL_19:
        if (a18)
        {
          v25 = a17;
          a14 = off_1E32051C0;
          a17 = 0;
          if (v25)
            (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
          WTF::RunLoop::TimerBase::~TimerBase((WTF::RunLoop::TimerBase *)&a14);
        }
        _Unwind_Resume(exception_object);
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v18);
    goto LABEL_12;
  }
  MEMORY[0x19AEA534C](v18);
  goto LABEL_6;
}

void WebCore::MediaPlayerPrivateAVFoundationObjC::videoFrameForCurrentTime(WebCore::MediaPlayerPrivateAVFoundationObjC *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  BOOL v11;
  int v12;
  char v13;
  _QWORD *v14;
  _QWORD *v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const void *v23;
  CFTypeRef cf;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28[2];

  if (!*((_QWORD *)this + 53) || *((unsigned __int8 *)this + 169) <= 1u)
    goto LABEL_51;
  if (!*((_QWORD *)this + 65) && !*((_QWORD *)this + 66))
  {
    WebCore::MediaPlayerPrivateAVFoundationObjC::createVideoOutput(this);
    v4 = (_QWORD *)*((_QWORD *)this + 63);
    if (!v4)
      goto LABEL_45;
    v5 = (void *)*((_QWORD *)this + 53);
    if (v5)
    {
      objc_msgSend(v5, "currentTime");
      v6 = v25;
      LODWORD(v7) = v26;
      v8 = HIDWORD(v26);
    }
    else
    {
      LODWORD(v7) = 0;
      v6 = 0;
      v8 = 0;
      v25 = 0;
      v26 = 0;
      v27 = 0;
    }
    v9 = v8 & 1;
    if ((~v8 & 3) == 0)
      v9 = v8 & 1 | 2;
    if ((~v8 & 5) == 0)
      v9 |= 4u;
    if ((~v8 & 9) == 0)
      v9 |= 8u;
    if ((~v8 & 0x11) != 0)
      v10 = v9;
    else
      v10 = v9 | 0x10;
    v11 = (v10 & 1) != 0 && (_DWORD)v7 == 0;
    v12 = !v11;
    if (v6 >= 0)
      v13 = 5;
    else
      v13 = 9;
    if (!v12)
      v10 = v13;
    v7 = v7;
    if (!v12)
    {
      v6 >>= 63;
      v7 = 1;
    }
    v28[0] = v6;
    v28[1] = v7 | ((unint64_t)v10 << 32);
    if (!v4[10])
      goto LABEL_45;
    v14 = (_QWORD *)v4[9];
    if (v14)
    {
      v15 = v4 + 9;
      do
      {
        v16 = WTF::MediaTime::compare((WTF::MediaTime *)v28, (const WTF::MediaTime *)(v14 + 4));
        v17 = v14 + 1;
        if (v16 == -1)
        {
          v17 = v14;
          v15 = v14;
        }
        v14 = (_QWORD *)*v17;
      }
      while (*v17);
    }
    else
    {
      v15 = v4 + 9;
    }
    if (v15 == (_QWORD *)v4[8])
      goto LABEL_45;
    v18 = (_QWORD *)*v15;
    if (*v15)
    {
      do
      {
        v19 = v18;
        v18 = (_QWORD *)v18[1];
      }
      while (v18);
    }
    else
    {
      do
      {
        v19 = (_QWORD *)v15[2];
        v11 = *v19 == (_QWORD)v15;
        v15 = v19;
      }
      while (v11);
    }
    if (v19 == v4 + 9)
LABEL_45:
      WebCore::MediaPlayerPrivateAVFoundationObjC::waitForVideoOutputMediaDataWillChange(this);
  }
  WebCore::MediaPlayerPrivateAVFoundationObjC::updateLastPixelBuffer(this);
  if (*((_QWORD *)this + 65))
  {
    v20 = WebCore::MediaPlayerPrivateAVFoundationObjC::currentTime(this);
    v22 = v21;
    v23 = (const void *)*((_QWORD *)this + 65);
    cf = v23;
    if (v23)
      CFRetain(v23);
    LOBYTE(v25) = 0;
    LOBYTE(v26) = 0;
    WebCore::VideoFrameCV::create(v20, v22, 0, 0, (WebCore **)&cf, (uint64_t)&v25, v28);
    *a2 = v28[0];
    if (cf)
      CFRelease(cf);
  }
  else
  {
LABEL_51:
    *a2 = 0;
  }
}

void sub_19475F05C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

_QWORD *WebCore::MediaPlayerPrivateAVFoundationObjC::nativeImageForCurrentTime@<X0>(WebCore::MediaPlayerPrivateAVFoundationObjC *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;
  _QWORD *v6;

  *a2 = 0;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v4 = off_1E3204E78;
  v4[1] = a2;
  v4[2] = this;
  v6 = v4;
  WebCore::MediaPlayerPrivateAVFoundationObjC::updateLastImage((uint64_t)this, (uint64_t *)&v6);
  result = v6;
  if (v6)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v6 + 8))(v6);
  return result;
}

void sub_19475F100(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  int v19;
  uint64_t v20;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  v12 = *v10;
  *v10 = 0;
  if (!v12)
LABEL_21:
    _Unwind_Resume(exception_object);
  v13 = *(_QWORD *)(v12 + 8);
  if (__ldaxr((unsigned __int8 *)v13))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v13))
  {
LABEL_9:
    v15 = *(_QWORD *)(v13 + 8);
    v16 = v15 - 1;
    *(_QWORD *)(v13 + 8) = v15 - 1;
    if (v15 == 1)
    {
      v20 = *(_QWORD *)(v13 + 16);
      v17 = *(_QWORD *)(v13 + 24);
      *(_QWORD *)(v13 + 24) = 0;
      v18 = v20 != 0;
    }
    else
    {
      v17 = 0;
      v18 = 1;
    }
    v19 = __ldxr((unsigned __int8 *)v13);
    if (v19 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v13))
      {
LABEL_16:
        if (!v16)
        {
          if (v17)
            (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
          if (!v18)
            WTF::fastFree((WTF *)v13, a2);
        }
        goto LABEL_21;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v13);
    goto LABEL_16;
  }
  MEMORY[0x19AEA534C](v13);
  goto LABEL_9;
}

char *WebCore::MediaPlayerPrivateAVFoundationObjC::colorSpace@<X0>(WebCore::MediaPlayerPrivateAVFoundationObjC *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v4;
  const void *v5;
  char *v6;
  char *result;
  char v8;
  uint64_t *v9;
  char *v10;

  v4 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
  if (v4 != -1)
  {
    v10 = &v8;
    v9 = (uint64_t *)&v10;
    std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
  }
  v5 = (const void *)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
  *a2 = WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
  if (v5)
    CFRetain(v5);
  v6 = (char *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v6 = off_1E3204EA0;
  *((_QWORD *)v6 + 1) = this;
  *((_QWORD *)v6 + 2) = a2;
  v10 = v6;
  WebCore::MediaPlayerPrivateAVFoundationObjC::updateLastImage((uint64_t)this, (uint64_t *)&v10);
  result = v10;
  if (v10)
    return (char *)(*(uint64_t (**)(char *))(*(_QWORD *)v10 + 8))(v10);
  return result;
}

void sub_19475F290(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  const void **v12;
  const void *v14;

  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  v14 = *v12;
  *v12 = 0;
  if (v14)
    CFRelease(v14);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::MediaPlayerPrivateAVFoundationObjC::setShouldContinueAfterKeyNeeded(uint64_t this, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[4];
  char v6;

  v2 = this;
  v6 = a2;
  v3 = *(_QWORD *)(this + 280);
  v4 = *(_QWORD *)(this + 288);
  v5[0] = "MediaPlayerPrivateAVFoundationObjC";
  v5[1] = 35;
  v5[2] = "setShouldContinueAfterKeyNeeded";
  v5[3] = v4;
  if (*(_BYTE *)(v3 + 12))
  {
    this = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v5);
    a2 = v6;
  }
  *(_BYTE *)(v2 + 720) = a2;
  return this;
}

uint64_t WebCore::MediaPlayerPrivateAVFoundationObjC::takeRequestForKeyURI@<X0>(WebCore::MediaPlayerPrivateAVFoundationObjC *this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v6 = (_QWORD *)((char *)this + 568);
  result = WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RetainPtr<AVAssetResourceLoadingRequest>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RetainPtr<AVAssetResourceLoadingRequest>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RetainPtr<AVAssetResourceLoadingRequest>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<AVAssetResourceLoadingRequest>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::RetainPtr<AVAssetResourceLoadingRequest>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<AVAssetResourceLoadingRequest>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)this + 71, a2, a3);
  v8 = *((unsigned int *)this + 144);
  if (*((_QWORD *)this + 71) + 16 * v8 == result)
  {
    *a4 = 0;
  }
  else
  {
    v9 = *(_QWORD *)(result + 8);
    *(_QWORD *)(result + 8) = 0;
    *a4 = v9;
    if (*v6 + 16 * v8 != result)
      return WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RetainPtr<AVAssetResourceLoadingRequest>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RetainPtr<AVAssetResourceLoadingRequest>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RetainPtr<AVAssetResourceLoadingRequest>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<AVAssetResourceLoadingRequest>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::remove((uint64_t)v6, (WTF::StringImpl **)result);
  }
  return result;
}

void sub_19475F3B0(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  const void *v2;

  *v1 = 0;
  if (v2)
    CFRelease(v2);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *WebCore::MediaPlayerPrivateAVFoundationObjC::keyAdded(unsigned __int8 *this, AVAssetResourceLoadingRequest *a2, JSC::ArrayBuffer *a3)
{
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  int v7;
  uint64_t v8;
  AVAssetResourceLoadingRequest *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  WTF::StringImpl **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  _DWORD *v18;
  AVAssetResourceLoadingRequest *v19;
  BOOL v20;
  _DWORD **v21;
  WTF *v22;
  _DWORD *v23;
  Class isa;
  void *v25;
  WTF *v26;
  WTF *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  WTF *v31;
  AVAssetResourceLoadingRequest *v32[4];
  WTF *v33;
  uint64_t v34;

  v3 = *((_QWORD *)this + 11);
  if (v3)
  {
    v4 = this;
    v5 = *((_QWORD *)this + 12);
    if (__ldaxr((unsigned __int8 *)v3))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v3))
    {
      goto LABEL_6;
    }
    this = (unsigned __int8 *)MEMORY[0x19AEA534C](v3);
LABEL_6:
    if (*(_QWORD *)(v3 + 24))
      ++*(_QWORD *)(v3 + 8);
    else
      v5 = 0;
    v7 = __ldxr((unsigned __int8 *)v3);
    if (v7 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
      {
        if (!v5)
          return this;
        goto LABEL_15;
      }
    }
    else
    {
      __clrex();
    }
    this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v3);
    if (!v5)
      return this;
LABEL_15:
    v33 = 0;
    v34 = 0;
    v8 = *((_QWORD *)v4 + 35);
    v9 = (AVAssetResourceLoadingRequest *)*((_QWORD *)v4 + 36);
    v32[0] = (AVAssetResourceLoadingRequest *)"MediaPlayerPrivateAVFoundationObjC";
    v32[1] = (AVAssetResourceLoadingRequest *)35;
    v32[2] = (AVAssetResourceLoadingRequest *)"keyAdded";
    v32[3] = v9;
    if (*(_BYTE *)(v8 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v32);
    if (*((_DWORD *)v4 + 145))
    {
      v10 = *((unsigned int *)v4 + 144);
      if ((_DWORD)v10)
      {
        v11 = 16 * v10;
        v12 = *((_QWORD *)v4 + 71);
        while (!*(_QWORD *)v12)
        {
          v12 += 16;
          v11 -= 16;
          if (!v11)
            goto LABEL_22;
        }
      }
      else
      {
        v12 = *((_QWORD *)v4 + 71);
      }
      v15 = *((_QWORD *)v4 + 71) + 16 * v10;
LABEL_33:
      if (v12 != v15)
      {
        (*(void (**)(AVAssetResourceLoadingRequest **__return_ptr, _QWORD, unint64_t))(**(_QWORD **)(*(_QWORD *)(v5 + 8) + 8) + 168))(v32, *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8), v12);
        a2 = v32[0];
        if (v32[0])
        {
          WebCore::fulfillRequestWithKeyData(*(WebCore **)(v12 + 8), v32[0], a3);
          v16 = HIDWORD(v34);
          if (HIDWORD(v34) == (_DWORD)v34)
          {
            v21 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v33, HIDWORD(v34) + 1, v12);
            v16 = HIDWORD(v34);
            v22 = v33;
            v23 = *v21;
            if (*v21)
              *v23 += 2;
            *((_QWORD *)v22 + v16) = v23;
          }
          else
          {
            v17 = v33;
            v18 = *(_DWORD **)v12;
            if (*(_QWORD *)v12)
              *v18 += 2;
            *((_QWORD *)v17 + v16) = v18;
          }
          HIDWORD(v34) = v16 + 1;
          v19 = v32[0];
          v32[0] = 0;
          if (v19)
          {
            v20 = LODWORD(v19->super.isa) == 2;
            LODWORD(v19->super.isa) -= 2;
            if (v20)
            {
              v30 = v15;
              v31 = (WTF *)v19;
              isa = v19[5].super.isa;
              if (isa)
              {
                *((_QWORD *)isa + 1) = 3;
                *((_QWORD *)v31 + 10) = 0;
              }
              if ((*((_BYTE *)v31 + 72) & 1) == 0)
                JSC::InlineWatchpointSet::freeFat((WTF *)((char *)v31 + 72));
              JSC::ArrayBufferContents::~ArrayBufferContents((WTF *)((char *)v31 + 16));
              v26 = (WTF *)*((_QWORD *)v31 + 1);
              if ((v26 & 1) == 0 && v26)
              {
                v27 = *(WTF **)v26;
                if (*(_QWORD *)v26)
                {
                  *(_QWORD *)v26 = 0;
                  *((_DWORD *)v26 + 2) = 0;
                  WTF::fastFree(v27, v25);
                }
                WTF::fastFree(v26, v25);
              }
              WTF::fastFree(v31, v25);
              v15 = v30;
            }
          }
        }
        while (1)
        {
          v12 += 16;
          if (v12 == v15)
            break;
          if (*(_QWORD *)v12)
            goto LABEL_33;
        }
      }
    }
LABEL_22:
    v13 = (WTF::StringImpl **)v33;
    if (!HIDWORD(v34))
      goto LABEL_28;
    v14 = 8 * HIDWORD(v34);
    do
    {
      a2 = (AVAssetResourceLoadingRequest *)WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RetainPtr<AVAssetResourceLoadingRequest>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RetainPtr<AVAssetResourceLoadingRequest>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RetainPtr<AVAssetResourceLoadingRequest>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<AVAssetResourceLoadingRequest>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::RetainPtr<AVAssetResourceLoadingRequest>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<AVAssetResourceLoadingRequest>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)v4 + 71, v13, a3);
      if ((AVAssetResourceLoadingRequest *)(*((_QWORD *)v4 + 71) + 16 * *((unsigned int *)v4 + 144)) != a2)
        WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RetainPtr<AVAssetResourceLoadingRequest>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RetainPtr<AVAssetResourceLoadingRequest>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RetainPtr<AVAssetResourceLoadingRequest>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<AVAssetResourceLoadingRequest>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::remove((uint64_t)(v4 + 568), &a2->super.isa);
      ++v13;
      v14 -= 8;
    }
    while (v14);
    v13 = (WTF::StringImpl **)v33;
    if (HIDWORD(v34))
    {
      v28 = 8 * HIDWORD(v34);
      do
      {
        v29 = *v13;
        *v13 = 0;
        if (v29)
        {
          if (*(_DWORD *)v29 == 2)
            WTF::StringImpl::destroy(v29, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v29 -= 2;
        }
        ++v13;
        v28 -= 8;
      }
      while (v28);
      v13 = (WTF::StringImpl **)v33;
      if (!v33)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v5);
    }
    else
    {
LABEL_28:
      if (!v13)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v5);
    }
    v33 = 0;
    LODWORD(v34) = 0;
    WTF::fastFree((WTF *)v13, a2);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v5);
  }
  return this;
}

void sub_19475F6E8(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _QWORD *a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl **a15, int a16, unsigned int a17)
{
  unsigned __int8 **v17;
  BOOL v19;
  uint64_t v20;
  void *v21;
  WTF *v22;
  WTF *v23;
  WTF::StringImpl **v24;
  uint64_t v25;
  WTF::StringImpl *v26;

  if (a11)
  {
    v19 = *(_DWORD *)a11 == 2;
    *(_DWORD *)a11 -= 2;
    if (v19)
    {
      v20 = a11[10];
      if (v20)
      {
        *(_QWORD *)(v20 + 8) = 3;
        a11[10] = 0;
      }
      if ((a11[9] & 1) == 0)
        JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(a11 + 9));
      JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(a11 + 2));
      v22 = (WTF *)a11[1];
      if ((v22 & 1) == 0 && v22)
      {
        v23 = *(WTF **)v22;
        if (*(_QWORD *)v22)
        {
          *(_QWORD *)v22 = 0;
          *((_DWORD *)v22 + 2) = 0;
          WTF::fastFree(v23, v21);
        }
        WTF::fastFree(v22, v21);
      }
      WTF::fastFree((WTF *)a11, v21);
    }
  }
  if (a17)
  {
    v24 = a15;
    v25 = 8 * a17;
    do
    {
      v26 = *v24;
      *v24 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
          WTF::StringImpl::destroy(v26, a2);
        else
          *(_DWORD *)v26 -= 2;
      }
      ++v24;
      v25 -= 8;
    }
    while (v25);
  }
  if (a15)
    WTF::fastFree((WTF *)a15, a2);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v17);
  _Unwind_Resume(a1);
}

uint64_t WebCore::MediaPlayerPrivateAVFoundationObjC::createSession@<X0>(uint64_t a1@<X0>, _BOOL8 *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t result;
  _QWORD *v8;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  result = WebCore::keySystemIsSupported(*a2, (const WTF::String *)a2);
  if ((_DWORD)result)
  {
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x48);
    WebCore::CDMSessionAVFoundationObjC::CDMSessionAVFoundationObjC(v8, a1, a3);
    result = v8[1];
    if (result)
      goto LABEL_17;
    result = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)result = 1;
    *(_QWORD *)(result + 8) = v8;
    v10 = (unsigned int *)v8[1];
    v8[1] = result;
    if (!v10)
      goto LABEL_17;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, v9);
    }
    result = v8[1];
    if (result)
    {
LABEL_17:
      do
        v13 = __ldaxr((unsigned int *)result);
      while (__stlxr(v13 + 1, (unsigned int *)result));
    }
    v14 = *(unsigned int **)(a1 + 712);
    *(_QWORD *)(a1 + 712) = result;
    if (v14)
    {
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (!v16)
      {
        atomic_store(1u, v14);
        result = WTF::fastFree((WTF *)v14, v9);
      }
    }
  }
  else
  {
    v8 = 0;
  }
  *a4 = v8;
  return result;
}

void sub_19475F8D4(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  WebCore::CDMSessionAVFoundationObjC *v2;
  void *v4;

  WebCore::CDMSessionAVFoundationObjC::~CDMSessionAVFoundationObjC(v2, a2);
  WTF::fastFree(v2, v4);
  _Unwind_Resume(a1);
}

_DWORD *WebCore::MediaPlayerPrivateAVFoundationObjC::cdmInstanceAttached(uint64_t a1, _DWORD *a2)
{
  _DWORD *result;

  result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 40))(a2);
  if ((_DWORD)result == 2)
  {
    result = *(_DWORD **)(a1 + 728);
    if (result != a2)
    {
      if (!result)
      {
LABEL_6:
        ++a2[2];
        *(_QWORD *)(a1 + 728) = a2;
        return result;
      }
      *(_QWORD *)(a1 + 728) = 0;
      if (result[2] != 1)
      {
        --result[2];
        goto LABEL_6;
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
      result = *(_DWORD **)(a1 + 728);
      ++a2[2];
      *(_QWORD *)(a1 + 728) = a2;
      if (result)
      {
        if (result[2] == 1)
          return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
        else
          --result[2];
      }
    }
  }
  return result;
}

_DWORD *WebCore::MediaPlayerPrivateAVFoundationObjC::cdmInstanceDetached(uint64_t a1)
{
  _DWORD *result;

  result = *(_DWORD **)(a1 + 728);
  *(_QWORD *)(a1 + 728) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

_QWORD *WebCore::MediaPlayerPrivateAVFoundationObjC::attemptToDecryptWithInstance(_QWORD *this, WebCore::CDMInstance *a2)
{
  unsigned int *v2;
  _QWORD *v3;
  uint64_t v4;
  WTF *v5;
  unsigned int v6;
  void *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  PAL *v11;
  WTF::StringImpl *v12;
  WTF *v13;
  uint64_t v14;
  int v15;
  WTF *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v21;
  void *v22;
  int v23;
  const void **v24;
  const void *v25;
  WTF::StringImpl *v26;
  WTF *v27;
  uint64_t v28;

  v2 = (unsigned int *)this[110];
  if (v2)
  {
    v3 = this;
    v4 = this[91];
    if (v4)
    {
      v5 = (WTF *)WTF::fastMalloc((WTF *)8);
      v27 = v5;
      v28 = 0x100000001;
      do
        v6 = __ldaxr(v2);
      while (__stlxr(v6 + 1, v2));
      *(_QWORD *)v5 = v2;
      v8 = WebCore::CDMInstanceFairPlayStreamingAVFObjC::sessionForKeyIDs(v4, (uint64_t)&v27);
      if (HIDWORD(v28))
      {
        v9 = (uint64_t *)v27;
        v10 = 8 * HIDWORD(v28);
        do
        {
          v9 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v9, v7)+ 1;
          v10 -= 8;
        }
        while (v10);
      }
      this = v27;
      if (v27)
      {
        v27 = 0;
        LODWORD(v28) = 0;
        this = (_QWORD *)WTF::fastFree((WTF *)this, v7);
      }
      if (v8)
      {
        v11 = *(PAL **)(v8 + 64);
        if (!v11)
          v11 = WebCore::CDMInstanceFairPlayStreamingAVFObjC::contentKeySession(*(WebCore::CDMInstanceFairPlayStreamingAVFObjC **)(v8 + 48));
        this = (_QWORD *)-[PAL addContentKeyRecipient:](v11, "addContentKeyRecipient:", v3[51], v27, v28);
        v13 = (WTF *)v3[71];
        v3[71] = 0;
        v14 = *((unsigned int *)v3 + 144);
        *((_DWORD *)v3 + 144) = 0;
        v15 = *((_DWORD *)v3 + 145);
        *((_BYTE *)v3 + 588) = 0;
        *(_QWORD *)((char *)v3 + 580) = 0;
        if (v15)
        {
          v16 = v13;
          if ((_DWORD)v14)
          {
            v17 = 16 * v14;
            v16 = v13;
            while (!*(_QWORD *)v16)
            {
              v16 = (WTF *)((char *)v16 + 16);
              v17 -= 16;
              if (!v17)
                goto LABEL_18;
            }
          }
          v21 = (WTF *)((char *)v13 + 16 * v14);
LABEL_23:
          if (v16 != v21)
          {
            v22 = (void *)objc_msgSend(*((id *)v16 + 1), "contentInformationRequest");
            if (v22)
              objc_msgSend(v22, "setContentType:", PAL::get_AVFoundation_AVStreamingKeyDeliveryContentKeyType((PAL *)v22));
            this = (_QWORD *)objc_msgSend(*((id *)v16 + 1), "finishLoading");
            while (1)
            {
              v16 = (WTF *)((char *)v16 + 16);
              if (v16 == v21)
                break;
              if (*(_QWORD *)v16)
                goto LABEL_23;
            }
          }
        }
LABEL_18:
        if (!*((_BYTE *)v3 + 721))
          goto LABEL_42;
        *((_BYTE *)v3 + 721) = 0;
        v18 = v3[11];
        if (!v18)
          goto LABEL_42;
        v19 = v3[12];
        if (__ldaxr((unsigned __int8 *)v18))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v18))
        {
          goto LABEL_32;
        }
        this = (_QWORD *)MEMORY[0x19AEA534C](v18);
LABEL_32:
        if (*(_QWORD *)(v18 + 24))
          ++*(_QWORD *)(v18 + 8);
        else
          v19 = 0;
        v23 = __ldxr((unsigned __int8 *)v18);
        if (v23 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v18))
          {
LABEL_40:
            if (v19)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v19 + 8) + 8) + 200))(*(_QWORD *)(*(_QWORD *)(v19 + 8) + 8));
              this = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v19);
            }
LABEL_42:
            if (v13)
            {
              if ((_DWORD)v14)
              {
                v24 = (const void **)((char *)v13 + 8);
                do
                {
                  v25 = *v24;
                  *v24 = 0;
                  if (v25)
                    CFRelease(v25);
                  v26 = (WTF::StringImpl *)*(v24 - 1);
                  *(v24 - 1) = 0;
                  if (v26)
                  {
                    if (*(_DWORD *)v26 == 2)
                      WTF::StringImpl::destroy(v26, v12);
                    else
                      *(_DWORD *)v26 -= 2;
                  }
                  v24 += 2;
                  --v14;
                }
                while (v14);
              }
              return (_QWORD *)WTF::fastFree(v13, v12);
            }
            return this;
          }
        }
        else
        {
          __clrex();
        }
        this = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v18);
        goto LABEL_40;
      }
    }
  }
  return this;
}

void sub_19475FC34(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10, int a11)
{
  WTF *v11;
  uint64_t v12;
  const void **v14;
  const void *v15;
  WTF::StringImpl *v16;

  if (v11)
  {
    if ((_DWORD)v12)
    {
      v14 = (const void **)((char *)v11 + 8);
      do
      {
        v15 = *v14;
        *v14 = 0;
        if (v15)
          CFRelease(v15);
        v16 = (WTF::StringImpl *)*(v14 - 1);
        *(v14 - 1) = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2)
            WTF::StringImpl::destroy(v16, a2);
          else
            *(_DWORD *)v16 -= 2;
        }
        v14 += 2;
        --v12;
      }
      while (v12);
    }
    WTF::fastFree(v11, a2);
  }
  _Unwind_Resume(exception_object);
}

void *WebCore::MediaPlayerPrivateAVFoundationObjC::firstEnabledTrack(WebCore::MediaPlayerPrivateAVFoundationObjC *this, NSString *a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  void *result;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = (void *)*((_QWORD *)this + 53);
  if (v4)
  {
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v5 = (void *)objc_msgSend(v4, "tracks", 0);
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)v16;
      while (2)
      {
        for (i = 0; i != v7; ++i)
        {
          if (*(_QWORD *)v16 != v8)
            objc_enumerationMutation(v5);
          v10 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * i);
          if (objc_msgSend(v10, "isEnabled")
            && objc_msgSend(v10, "assetTrack")
            && (objc_msgSend((id)objc_msgSend(v10, "assetTrack"), "hasMediaCharacteristic:", a2) & 1) != 0)
          {
            return (void *)objc_msgSend(v10, "assetTrack");
          }
        }
        v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
        if (v7)
          continue;
        break;
      }
    }
  }
  result = (void *)*((_QWORD *)this + 51);
  if (result)
  {
    v12 = objc_msgSend(result, "statusOfValueForKey:error:", CFSTR("tracks"), 0);
    result = 0;
    if (v12 == 2)
    {
      v13 = (void *)objc_msgSend(*((id *)this + 51), "tracksWithMediaCharacteristic:", a2);
      v14 = objc_msgSend(v13, "indexOfObjectPassingTest:", &__block_literal_global_226);
      if (v14 == 0x7FFFFFFFFFFFFFFFLL)
        return 0;
      else
        return (void *)objc_msgSend(v13, "objectAtIndex:", v14);
    }
  }
  return result;
}

uint64_t WebCore::MediaPlayerPrivateAVFoundationObjC::setCurrentTextTrack(uint64_t this, WebCore::InbandTextTrackPrivateAVF *a2)
{
  WebCore::InbandTextTrackPrivateAVF *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  int v8;
  int v9;
  int v10;
  BOOL v11;
  int v12;
  BOOL v13;
  int v14;
  unsigned int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  NSObject *v19;
  uint64_t v20;
  char *v21;
  unsigned __int8 *v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::Logger *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::Logger *v36;
  uint64_t v37;
  WTF::StringImpl **v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  int v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  int v46;
  void *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WebCore::InbandTextTrackPrivateAVF *v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  const char *v59;
  uint64_t v60;
  const char *v61;
  uint64_t v62;
  WTF::Logger *v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  __int128 buf;
  int v69;
  WTF::StringImpl *v70;
  int v71;
  WTF::StringImpl *v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  if (*(WebCore::InbandTextTrackPrivateAVF **)(this + 672) == a2)
    return this;
  v2 = a2;
  v3 = this;
  v5 = *(_QWORD *)(this + 280);
  v4 = *(_QWORD *)(this + 288);
  v59 = "MediaPlayerPrivateAVFoundationObjC";
  v60 = 35;
  v61 = "setCurrentTextTrack";
  v62 = v4;
  if (a2)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::InbandTextTrackPrivateAVF *))(*(_QWORD *)a2 + 64))(&v58, a2);
  }
  else
  {
    v6 = (WTF::StringImpl *)*MEMORY[0x1E0CBF3B8];
    if (*MEMORY[0x1E0CBF3B8])
      *(_DWORD *)v6 += 2;
    v58 = v6;
  }
  if (*(_BYTE *)(v5 + 12))
  {
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v59);
    this = WTF::String::String((WTF::String *)&v65, "selecting track with language ");
    v7 = v58;
    if (v58)
      *(_DWORD *)v58 += 2;
    if (v66)
    {
      v8 = *((_DWORD *)v66 + 1);
      if (v65)
        goto LABEL_12;
    }
    else
    {
      v8 = 0;
      if (v65)
      {
LABEL_12:
        v9 = *((_DWORD *)v65 + 1);
        if (v7)
        {
LABEL_13:
          v10 = *((_DWORD *)v7 + 1);
LABEL_14:
          if ((v10 | v9) < 0)
            goto LABEL_128;
          v11 = __OFADD__(v9, v10);
          v12 = v9 + v10;
          v13 = v11;
          if (v8 < 0)
            goto LABEL_128;
          if (v13)
            goto LABEL_128;
          this = (v8 + v12);
          if (__OFADD__(v8, v12))
            goto LABEL_128;
          if (v66 && (*((_BYTE *)v66 + 16) & 4) == 0)
          {
            v14 = 0;
            goto LABEL_28;
          }
          if (v65)
          {
            v15 = *((_DWORD *)v65 + 4);
            v14 = (v15 >> 2) & 1;
            if (v7 && (v15 & 4) != 0)
              goto LABEL_27;
          }
          else
          {
            if (v7)
            {
LABEL_27:
              v14 = (*((unsigned __int8 *)v7 + 16) >> 2) & 1;
              goto LABEL_28;
            }
            v14 = 1;
          }
LABEL_28:
          this = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(this, v14, v66, (uint64_t)v65, (uint64_t)v7, &buf);
          v67 = (WTF::StringImpl *)buf;
          if ((_QWORD)buf)
          {
            if (v7)
            {
              if (*(_DWORD *)v7 == 2)
                WTF::StringImpl::destroy(v7, v16);
              else
                *(_DWORD *)v7 -= 2;
            }
            v17 = v65;
            v65 = 0;
            if (v17)
            {
              if (*(_DWORD *)v17 == 2)
                WTF::StringImpl::destroy(v17, v16);
              else
                *(_DWORD *)v17 -= 2;
            }
            v18 = v66;
            v66 = 0;
            if (v18)
            {
              if (*(_DWORD *)v18 == 2)
                WTF::StringImpl::destroy(v18, v16);
              else
                *(_DWORD *)v18 -= 2;
            }
            v19 = qword_1ECE7C4A0;
            v20 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
            if ((_DWORD)v20)
            {
              WTF::String::utf8();
              v21 = v63 ? (char *)v63 + 16 : 0;
              LODWORD(buf) = 136446210;
              *(_QWORD *)((char *)&buf + 4) = v21;
              _os_log_impl(&dword_1940B8000, v19, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
              v20 = (uint64_t)v63;
              v63 = 0;
              if (v20)
              {
                if (*(_DWORD *)v20 == 1)
                  v20 = WTF::fastFree((WTF *)v20, a2);
                else
                  --*(_DWORD *)v20;
              }
            }
            if (WebCore::LogMedia)
            {
              v22 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
              while (1)
              {
                v23 = *v22;
                if ((v23 & 1) != 0)
                  break;
                v24 = __ldaxr(v22);
                if (v24 == v23)
                {
                  if (!__stxr(v23 | 1, v22))
                  {
                    v56 = v2;
                    v57 = v3;
                    v25 = WTF::Logger::observers((WTF::Logger *)v20);
                    v26 = *(unsigned int *)(v25 + 12);
                    if ((_DWORD)v26)
                    {
                      v27 = *(uint64_t **)v25;
                      v28 = *(_QWORD *)v25 + 8 * v26;
                      do
                      {
                        v29 = *v27;
                        LODWORD(buf) = 0;
                        WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v59);
                        v69 = 0;
                        WTF::String::String((WTF::String *)&v70, "selecting track with language ");
                        v71 = 0;
                        v30 = v58;
                        if (v58)
                          *(_DWORD *)v58 += 2;
                        v72 = v30;
                        v63 = 0;
                        v64 = 0;
                        v31 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
                        LODWORD(v64) = 3;
                        v63 = v31;
                        v32 = HIDWORD(v64);
                        *((_DWORD *)v31 + 4 * HIDWORD(v64)) = buf;
                        v33 = *((_QWORD *)&buf + 1);
                        if (*((_QWORD *)&buf + 1))
                          **((_DWORD **)&buf + 1) += 2;
                        *((_QWORD *)v31 + 2 * v32 + 1) = v33;
                        *((_DWORD *)v31 + 4 * (v32 + 1)) = v69;
                        v34 = v70;
                        if (v70)
                          *(_DWORD *)v70 += 2;
                        *((_QWORD *)v31 + 2 * (v32 + 1) + 1) = v34;
                        *((_DWORD *)v31 + 4 * (v32 + 2)) = v71;
                        v35 = v72;
                        if (v72)
                          *(_DWORD *)v72 += 2;
                        *((_QWORD *)v31 + 2 * (v32 + 2) + 1) = v35;
                        HIDWORD(v64) = v32 + 3;
                        (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v29 + 16))(v29, &WebCore::LogMedia, 0, &v63);
                        v36 = v63;
                        if (HIDWORD(v64))
                        {
                          v37 = 16 * HIDWORD(v64);
                          v38 = (WTF::StringImpl **)((char *)v63 + 8);
                          do
                          {
                            v39 = *v38;
                            *v38 = 0;
                            if (v39)
                            {
                              if (*(_DWORD *)v39 == 2)
                                WTF::StringImpl::destroy(v39, a2);
                              else
                                *(_DWORD *)v39 -= 2;
                            }
                            v38 += 2;
                            v37 -= 16;
                          }
                          while (v37);
                          v36 = v63;
                        }
                        if (v36)
                        {
                          v63 = 0;
                          LODWORD(v64) = 0;
                          WTF::fastFree(v36, a2);
                        }
                        v40 = v72;
                        v72 = 0;
                        if (v40)
                        {
                          if (*(_DWORD *)v40 == 2)
                            WTF::StringImpl::destroy(v40, a2);
                          else
                            *(_DWORD *)v40 -= 2;
                        }
                        v41 = v70;
                        v70 = 0;
                        if (v41)
                        {
                          if (*(_DWORD *)v41 == 2)
                            WTF::StringImpl::destroy(v41, a2);
                          else
                            *(_DWORD *)v41 -= 2;
                        }
                        v42 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                        *((_QWORD *)&buf + 1) = 0;
                        if (v42)
                        {
                          if (*(_DWORD *)v42 == 2)
                            WTF::StringImpl::destroy(v42, a2);
                          else
                            *(_DWORD *)v42 -= 2;
                        }
                        ++v27;
                      }
                      while (v27 != (uint64_t *)v28);
                    }
                    v43 = __ldxr(v22);
                    if (v43 == 1)
                    {
                      v2 = v56;
                      if (!__stlxr(0, v22))
                        break;
                    }
                    else
                    {
                      __clrex();
                      v2 = v56;
                    }
                    WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                    break;
                  }
                }
                else
                {
                  __clrex();
                }
              }
            }
            v44 = v67;
            v67 = 0;
            if (v44)
            {
              if (*(_DWORD *)v44 == 2)
                WTF::StringImpl::destroy(v44, a2);
              else
                *(_DWORD *)v44 -= 2;
            }
            goto LABEL_94;
          }
LABEL_128:
          __break(0xC471u);
          return this;
        }
LABEL_125:
        v10 = 0;
        goto LABEL_14;
      }
    }
    v9 = 0;
    if (v7)
      goto LABEL_13;
    goto LABEL_125;
  }
LABEL_94:
  v45 = v58;
  v58 = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 2)
      WTF::StringImpl::destroy(v45, a2);
    else
      *(_DWORD *)v45 -= 2;
  }
  *(_QWORD *)(v3 + 672) = v2;
  if (v2)
  {
    if ((*(unsigned int (**)(WebCore::InbandTextTrackPrivateAVF *))(*(_QWORD *)v2 + 224))(v2))
    {
      v46 = (*(uint64_t (**)(WebCore::InbandTextTrackPrivateAVF *))(*(_QWORD *)v2 + 224))(v2);
      v47 = *(void **)(v3 + 424);
      v48 = *(void **)(v3 + 408);
      if (v46 == 1)
      {
        v49 = *((_QWORD *)v2 + 19);
        if (v48
          && objc_msgSend(v48, "statusOfValueForKey:error:", CFSTR("availableMediaCharacteristicsWithMediaSelectionOptions"), 0) == 2)
        {
          v50 = objc_msgSend(*(id *)(v3 + 408), "mediaSelectionGroupForMediaCharacteristic:", PAL::get_AVFoundation_AVMediaCharacteristicLegible((PAL *)2));
        }
        else
        {
          v50 = 0;
        }
        return objc_msgSend(v47, "selectMediaOption:inMediaSelectionGroup:", v49, v50, v56, v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67);
      }
      else
      {
        v54 = *((_QWORD *)v2 + 20);
        if (v48
          && objc_msgSend(v48, "statusOfValueForKey:error:", CFSTR("availableMediaCharacteristicsWithMediaSelectionOptions"), 0) == 2)
        {
          v55 = objc_msgSend(*(id *)(v3 + 408), "mediaSelectionGroupForMediaCharacteristic:", PAL::get_AVFoundation_AVMediaCharacteristicLegible((PAL *)2));
        }
        else
        {
          v55 = 0;
        }
        return objc_msgSend(v47, "selectMediaOption:inMediaSelectionGroup:", v54, v55, v56, v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67);
      }
    }
    else
    {
      return objc_msgSend(*(id *)(v3 + 416), "setClosedCaptionDisplayEnabled:", 1);
    }
  }
  else
  {
    v51 = *(void **)(v3 + 424);
    v52 = *(void **)(v3 + 408);
    if (v52
      && objc_msgSend(v52, "statusOfValueForKey:error:", CFSTR("availableMediaCharacteristicsWithMediaSelectionOptions"), 0) == 2)
    {
      v53 = objc_msgSend(*(id *)(v3 + 408), "mediaSelectionGroupForMediaCharacteristic:", PAL::get_AVFoundation_AVMediaCharacteristicLegible((PAL *)2));
    }
    else
    {
      v53 = 0;
    }
    objc_msgSend(v51, "selectMediaOption:inMediaSelectionGroup:", 0, v53, v56, v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67);
    return objc_msgSend(*(id *)(v3 + 416), "setClosedCaptionDisplayEnabled:", 0);
  }
}

void sub_194760554(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF *a16, int a17, int a18, WTF::StringImpl *a19, uint64_t a20,WTF::StringImpl *a21,uint64_t a22,WTF::StringImpl *a23,uint64_t a24,WTF::StringImpl *a25,uint64_t a26,WTF::StringImpl *a27)
{
  if (a21)
  {
    if (*(_DWORD *)a21 == 2)
      WTF::StringImpl::destroy(a21, a2);
    else
      *(_DWORD *)a21 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::MediaPlayerPrivateAVFoundationObjC::wirelessPlaybackTargetType(WebCore::MediaPlayerPrivateAVFoundationObjC *this)
{
  uint64_t result;
  uint64_t v3;

  if (!*((_QWORD *)this + 52))
    return 0;
  result = PAL::AVFoundationLibrary((PAL *)1);
  if (result)
  {
    v3 = objc_msgSend(*((id *)this + 52), "externalPlaybackType");
    if (v3 == 2)
      return 2;
    else
      return v3 == 1;
  }
  return result;
}

WTF::StringImpl *WebCore::MediaPlayerPrivateAVFoundationObjC::wirelessPlaybackTargetName@<X0>(WTF::StringImpl *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  void *v3;
  PAL::OutputContext *v4;
  uint64_t *v5;
  const __CFArray *v6;
  WTF::StringImpl *v7;
  const __CFString *v8;
  WTF::StringImpl *v9;
  const __CFArray *v10;
  WTF::StringImpl *v11;
  const __CFArray *v12;
  const __CFArray *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  void *v17;
  void *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  const __CFString *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t j;
  void *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  int v29;
  WTF::StringImpl *v30;
  const __CFString *v31;
  WTF::StringImpl *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  WTF::StringImpl *v41[16];
  const __CFArray *v42;
  char v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v3 = (void *)*((_QWORD *)this + 52);
  if (!v3)
  {
    v11 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *(_DWORD *)v11 += 2;
    *a2 = v11;
    return this;
  }
  *a2 = 0;
  v4 = (PAL::OutputContext *)PAL::AVFoundationLibrary((PAL *)1);
  if (v4)
  {
    v5 = PAL::OutputContext::sharedAudioPresentationOutputContext(v4);
    if (*((_BYTE *)v5 + 8))
    {
      v6 = (const __CFArray *)*v5;
      v42 = v6;
      if (v6)
        CFRetain(v6);
      v43 = 1;
      PAL::OutputContext::deviceName((id *)&v42, v41);
      if (v41[0])
      {
        v8 = (const __CFString *)WTF::StringImpl::operator NSString *();
        v9 = v41[0];
        v41[0] = 0;
        if (v9)
        {
          if (*(_DWORD *)v9 == 2)
            WTF::StringImpl::destroy(v9, v7);
          else
            *(_DWORD *)v9 -= 2;
        }
      }
      else
      {
        v8 = &stru_1E3487BC0;
      }
      if (!v43)
        goto LABEL_50;
      v10 = v42;
      v42 = 0;
      if (!v10)
        goto LABEL_50;
      goto LABEL_49;
    }
    if (objc_msgSend(v3, "externalPlaybackType") == 1)
    {
      v12 = (const __CFArray *)WebCore::softLinkMediaRemoteMRMediaRemoteCopyPickableRoutes((WebCore *)1);
      v13 = v12;
      if (v12)
      {
        if (CFArrayGetCount(v12)
          && (v39 = 0u,
              v40 = 0u,
              v37 = 0u,
              v38 = 0u,
              (v14 = -[__CFArray countByEnumeratingWithState:objects:count:](v13, "countByEnumeratingWithState:objects:count:", &v37, &v42, 16)) != 0))
        {
          v15 = *(_QWORD *)v38;
          while (2)
          {
            for (i = 0; i != v14; ++i)
            {
              if (*(_QWORD *)v38 != v15)
                objc_enumerationMutation(v13);
              v17 = *(void **)(*((_QWORD *)&v37 + 1) + 8 * i);
              if ((objc_msgSend((id)objc_msgSend(v17, "objectForKeyedSubscript:", _MergedGlobals_7()), "BOOLValue") & 1) != 0)
              {
                v8 = (const __CFString *)objc_msgSend(v17, "objectForKeyedSubscript:", off_1ECE76A18());
                v18 = (void *)objc_msgSend(v17, "objectForKeyedSubscript:", off_1ECE76A20());
                v19 = objc_msgSend(v18, "isEqualToString:", CFSTR("Speaker"));
                if ((v19 & 1) != 0
                  || (v19 = objc_msgSend(v18, "isEqualToString:", CFSTR("HDMIOutput")), (v19 & 1) != 0))
                {
                  WebCore::localizedDeviceModel((PAL *)v19, v41);
                  v20 = v41[0];
                  if (v41[0])
                  {
                    v22 = (const __CFString *)WTF::StringImpl::operator NSString *();
                    if (*(_DWORD *)v20 == 2)
                      WTF::StringImpl::destroy(v20, v21);
                    else
                      *(_DWORD *)v20 -= 2;
                  }
                  else
                  {
                    v22 = &stru_1E3487BC0;
                  }
                  v33 = 0u;
                  v34 = 0u;
                  v35 = 0u;
                  v36 = 0u;
                  v23 = -[__CFArray countByEnumeratingWithState:objects:count:](v13, "countByEnumeratingWithState:objects:count:", &v33, v41, 16);
                  if (v23)
                  {
                    v31 = v22;
                    v24 = *(_QWORD *)v34;
                    while (2)
                    {
                      for (j = 0; j != v23; ++j)
                      {
                        if (*(_QWORD *)v34 != v24)
                          objc_enumerationMutation(v13);
                        v26 = *(void **)(*((_QWORD *)&v33 + 1) + 8 * j);
                        if (v26 != v17
                          && objc_msgSend((id)objc_msgSend(v26, "objectForKeyedSubscript:", off_1ECE76A18()), "rangeOfString:", v8) != 0x7FFFFFFFFFFFFFFFLL)
                        {
                          v8 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@ %@"), v31, v8);
                          goto LABEL_48;
                        }
                      }
                      v23 = -[__CFArray countByEnumeratingWithState:objects:count:](v13, "countByEnumeratingWithState:objects:count:", &v33, v41, 16);
                      if (v23)
                        continue;
                      break;
                    }
                    v8 = v31;
                  }
                  else
                  {
                    v8 = v22;
                  }
                }
                goto LABEL_48;
              }
            }
            v14 = -[__CFArray countByEnumeratingWithState:objects:count:](v13, "countByEnumeratingWithState:objects:count:", &v37, &v42, 16);
            v8 = 0;
            if (v14)
              continue;
            break;
          }
        }
        else
        {
          v8 = 0;
        }
LABEL_48:
        v10 = v13;
LABEL_49:
        CFRelease(v10);
        goto LABEL_50;
      }
    }
  }
  v8 = 0;
LABEL_50:
  MEMORY[0x19AEA5508](&v32, v8);
  v28 = v32;
  v32 = 0;
  this = *a2;
  *a2 = v28;
  if (!this)
    return this;
  v29 = *(_DWORD *)this - 2;
  if (*(_DWORD *)this != 2)
    goto LABEL_52;
  WTF::StringImpl::destroy(this, v27);
  this = v32;
  v32 = 0;
  if (this)
  {
    v29 = *(_DWORD *)this - 2;
    if (*(_DWORD *)this == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v30);
LABEL_52:
    *(_DWORD *)this = v29;
  }
  return this;
}

void sub_194760CC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,WTF::StringImpl *a29)
{
  _QWORD *v29;
  const void *v30;

  CFRelease(v30);
  *v29 = 0;
  _Unwind_Resume(a1);
}

BOOL WebCore::MediaPlayerPrivateAVFoundationObjC::wirelessVideoPlaybackDisabled(WebCore::MediaPlayerPrivateAVFoundationObjC *this)
{
  void *v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  _QWORD v8[4];

  v2 = (void *)*((_QWORD *)this + 52);
  if (v2)
  {
    v3 = (char *)this + 963;
    *((_BYTE *)this + 963) = objc_msgSend(v2, "allowsExternalPlayback");
    v8[0] = "MediaPlayerPrivateAVFoundationObjC";
    v8[1] = 35;
    v4 = *((_QWORD *)this + 35);
    v5 = *((_QWORD *)this + 36);
    v8[2] = "wirelessVideoPlaybackDisabled";
    v8[3] = v5;
    if (*(_BYTE *)(v4 + 12))
    {
      if (WebCore::LogMedia)
        v6 = byte_1ECE7C490 >= 3u;
      else
        v6 = 0;
      if (v6)
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogMedia, 3, (WTF::Logger::LogSiteIdentifier *)v8);
    }
  }
  else
  {
    v3 = (char *)this + 963;
  }
  return *v3 == 0;
}

void *WebCore::MediaPlayerPrivateAVFoundationObjC::setWirelessVideoPlaybackDisabled(WebCore::MediaPlayerPrivateAVFoundationObjC *this, int a2)
{
  uint64_t v3;
  uint64_t v4;
  void *result;
  _QWORD v7[4];
  unsigned __int8 v8;

  v8 = a2;
  v3 = *((_QWORD *)this + 35);
  v4 = *((_QWORD *)this + 36);
  v7[0] = "MediaPlayerPrivateAVFoundationObjC";
  v7[1] = 35;
  v7[2] = "setWirelessVideoPlaybackDisabled";
  v7[3] = v4;
  if (*(_BYTE *)(v3 + 12))
  {
    if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
    {
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogMedia, 3, (WTF::Logger::LogSiteIdentifier *)v7);
      a2 = v8;
    }
  }
  *((_BYTE *)this + 963) = a2 ^ 1;
  result = (void *)*((_QWORD *)this + 52);
  if (result)
    return (void *)objc_msgSend(result, "setAllowsExternalPlayback:", a2 == 0);
  return result;
}

unsigned __int8 *WebCore::MediaPlayerPrivateAVFoundationObjC::setBufferingPolicy(unsigned __int8 *result, unsigned int a2)
{
  unsigned __int8 *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  WebCore::AudioSourceProviderAVFObjC *v6;
  _QWORD v7[4];
  unsigned __int8 v8;

  v2 = result;
  v8 = a2;
  v3 = *((_QWORD *)result + 35);
  v4 = *((_QWORD *)result + 36);
  v7[0] = "MediaPlayerPrivateAVFoundationObjC";
  v7[1] = 35;
  v7[2] = "setBufferingPolicy";
  v7[3] = v4;
  if (*(_BYTE *)(v3 + 12))
  {
    result = (unsigned __int8 *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::MediaPlayerBufferingPolicy>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v7, &v8);
    a2 = v8;
  }
  v5 = v2[940];
  if (v5 != a2)
  {
    v2[940] = a2;
    result = (unsigned __int8 *)*((_QWORD *)v2 + 52);
    if (result)
    {
      objc_msgSend(result, "setResourceConservationLevelWhilePaused:", a2);
      if (v5 == 2)
      {
        v6 = (WebCore::AudioSourceProviderAVFObjC *)*((_QWORD *)v2 + 61);
        if (v6)
        {
          if (*((_QWORD *)v6 + 4))
          {
            WebCore::AudioSourceProviderAVFObjC::destroyMixIfNeeded(*((_QWORD *)v2 + 61));
            WebCore::AudioSourceProviderAVFObjC::createMixIfNeeded(v6);
          }
        }
      }
      return WebCore::MediaPlayerPrivateAVFoundation::updateStates(v2);
    }
  }
  return result;
}

CMTime *WebCore::MediaPlayerPrivateAVFoundationObjC::metadataDidArrive(uint64_t a1, CFTypeRef *a2, WTF::MediaTime *a3)
{
  CFTypeRef v5;
  char v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  CMTime *result;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  NSObject *v18;
  WTF *v19;
  void *v20;
  char *v21;
  unsigned __int8 *v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  WTF::Logger *v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF *v36;
  uint64_t v37;
  WTF::StringImpl **v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  int v45;
  uint64_t isKindOfClass;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t i;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  unsigned __int8 v55;
  unsigned __int8 v56;
  _BOOL4 v58;
  char v59;
  const WTF::MediaTime *v60;
  WTF::Logger **v61;
  void *v62;
  CMTime *v63;
  uint64_t v64;
  WTF::StringImpl **v65;
  CMTime *v66;
  AVMetadataItem *v67;
  WTF::MediaTime *v68;
  uint64_t v69;
  unsigned __int8 v70;
  unsigned __int8 v71;
  _BOOL4 v73;
  char v74;
  BOOL v75;
  uint64_t v76;
  const WTF::MediaTime *v77;
  const WTF::MediaTime *v78;
  uint64_t v79;
  CMTime *v80;
  uint64_t v81;
  unsigned __int8 v82;
  unsigned __int8 v83;
  _BOOL4 v85;
  char v86;
  BOOL v87;
  uint64_t v88;
  int v89;
  char v90;
  WTF::StringImpl *v91;
  PAL *v92;
  PAL *v93;
  PAL *v94;
  WTF::StringImpl *v95;
  uint64_t *v96;
  PAL *v97;
  PAL *v98;
  PAL *v99;
  PAL *v100;
  int v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  uint64_t v104;
  WebCore::SerializedPlatformDataCueValue *v105;
  WTF::StringImpl *v106;
  unsigned __int8 *v107;
  int v109;
  int v110;
  WTF::StringImpl *v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _DWORD *v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  WTF::StringImpl *v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  uint64_t v123;
  WTF::StringImpl *v124;
  uint64_t v125;
  WTF::StringImpl **v126;
  WTF::StringImpl *v127;
  WTF::StringImpl *v128;
  uint64_t v129;
  WTF::String *v130;
  id obja;
  uint64_t v133;
  WTF::Logger *v134[2];
  WTF::StringImpl *v135;
  __int128 v136;
  _BYTE v137[13];
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  _BYTE v147[24];
  uint64_t v148;
  WTF::StringImpl *v149;
  WTF::StringImpl *v150;
  WTF::StringImpl *v151;
  WTF::StringImpl *v152;
  WTF::StringImpl *v153;
  WTF::StringImpl *v154;
  _BYTE v155[128];
  _BYTE v156[128];
  __int128 buf;
  WTF::StringImpl *v158;
  WTF::StringImpl *v159;
  int v160;
  WTF::StringImpl *v161;
  int v162;
  WTF::StringImpl *v163;
  int v164;
  WTF::StringImpl *v165;
  uint64_t v166;

  v166 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  if (*a2)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v5 = 0;
    }
    else
    {
      v5 = *a2;
      if (*a2)
      {
        CFRetain(*a2);
        CFRetain(v5);
        v6 = 0;
        goto LABEL_7;
      }
    }
  }
  v6 = 1;
LABEL_7:
  v7 = *(const void **)(a1 + 776);
  *(_QWORD *)(a1 + 776) = v5;
  if (v7)
    CFRelease(v7);
  if ((v6 & 1) == 0)
    CFRelease(v5);
  v9 = *(_QWORD *)(a1 + 280);
  v8 = *(_QWORD *)(a1 + 288);
  *(_QWORD *)v147 = "MediaPlayerPrivateAVFoundationObjC";
  *(_QWORD *)&v147[8] = 35;
  *(_QWORD *)&v147[16] = "metadataDidArrive";
  v148 = v8;
  result = *(CMTime **)(a1 + 776);
  if (result)
  {
    result = (CMTime *)-[CMTime count](result, "count");
    v130 = (WTF::String *)result;
  }
  else
  {
    v130 = 0;
  }
  v133 = a1;
  if (*(_BYTE *)(v9 + 12))
  {
    if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
    {
      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v147);
      WTF::String::String((WTF::String *)&v152, "adding ");
      WTF::String::number(v130);
      WTF::String::String((WTF::String *)&v150, " at time ");
      WTF::MediaTime::toJSONString(a3);
      *(_QWORD *)&buf = v153;
      v134[0] = v152;
      *(_QWORD *)&v146 = v151;
      *(_QWORD *)v137 = v150;
      *(_QWORD *)&v136 = v149;
      result = (CMTime *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)v134, (uint64_t *)&v146, (uint64_t *)v137, (uint64_t *)&v136, &v154);
      if (!v154)
      {
        __break(0xC471u);
        return result;
      }
      v13 = v149;
      v149 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v12);
        else
          *(_DWORD *)v13 -= 2;
      }
      v14 = v150;
      v150 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v12);
        else
          *(_DWORD *)v14 -= 2;
      }
      v15 = v151;
      v151 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v12);
        else
          *(_DWORD *)v15 -= 2;
      }
      v16 = v152;
      v152 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v12);
        else
          *(_DWORD *)v16 -= 2;
      }
      v17 = v153;
      v153 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v12);
        else
          *(_DWORD *)v17 -= 2;
      }
      v18 = qword_1ECE7C4A0;
      v19 = (WTF *)os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v19)
      {
        WTF::String::utf8();
        v21 = v134[0] ? (char *)v134[0] + 16 : 0;
        LODWORD(buf) = 136446210;
        *(_QWORD *)((char *)&buf + 4) = v21;
        _os_log_impl(&dword_1940B8000, v18, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
        v19 = v134[0];
        v134[0] = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 1)
            v19 = (WTF *)WTF::fastFree(v19, v20);
          else
            --*(_DWORD *)v19;
        }
      }
      if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
      {
        v22 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
        while (1)
        {
          v23 = *v22;
          if ((v23 & 1) != 0)
            break;
          v24 = __ldaxr(v22);
          if (v24 == v23)
          {
            if (!__stxr(v23 | 1, v22))
            {
              v25 = WTF::Logger::observers(v19);
              v26 = *(unsigned int *)(v25 + 12);
              if ((_DWORD)v26)
              {
                v27 = *(uint64_t **)v25;
                v129 = *(_QWORD *)v25 + 8 * v26;
                do
                {
                  v28 = *v27;
                  LODWORD(buf) = 0;
                  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v147);
                  LODWORD(v158) = 0;
                  WTF::String::String((WTF::String *)&v159, "adding ");
                  v160 = 0;
                  WTF::String::number(v130);
                  v162 = 0;
                  WTF::String::String((WTF::String *)&v163, " at time ");
                  v164 = 1;
                  WTF::MediaTime::toJSONString(a3);
                  v134[0] = 0;
                  v134[1] = 0;
                  v29 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x50);
                  LODWORD(v134[1]) = 5;
                  v134[0] = v29;
                  v30 = HIDWORD(v134[1]);
                  *((_DWORD *)v29 + 4 * HIDWORD(v134[1])) = buf;
                  v31 = *((_QWORD *)&buf + 1);
                  if (*((_QWORD *)&buf + 1))
                    **((_DWORD **)&buf + 1) += 2;
                  *((_QWORD *)v29 + 2 * v30 + 1) = v31;
                  *((_DWORD *)v29 + 4 * (v30 + 1)) = (_DWORD)v158;
                  v32 = v159;
                  if (v159)
                    *(_DWORD *)v159 += 2;
                  *((_QWORD *)v29 + 2 * (v30 + 1) + 1) = v32;
                  *((_DWORD *)v29 + 4 * (v30 + 2)) = v160;
                  v33 = v161;
                  if (v161)
                    *(_DWORD *)v161 += 2;
                  *((_QWORD *)v29 + 2 * (v30 + 2) + 1) = v33;
                  *((_DWORD *)v29 + 4 * (v30 + 3)) = v162;
                  v34 = v163;
                  if (v163)
                    *(_DWORD *)v163 += 2;
                  *((_QWORD *)v29 + 2 * (v30 + 3) + 1) = v34;
                  *((_DWORD *)v29 + 4 * (v30 + 4)) = v164;
                  v35 = v165;
                  if (v165)
                    *(_DWORD *)v165 += 2;
                  *((_QWORD *)v29 + 2 * (v30 + 4) + 1) = v35;
                  HIDWORD(v134[1]) = v30 + 5;
                  (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v28 + 16))(v28, &WebCore::LogMedia, 3, v134);
                  v36 = v134[0];
                  if (HIDWORD(v134[1]))
                  {
                    v37 = 16 * HIDWORD(v134[1]);
                    v38 = (WTF::StringImpl **)((char *)v134[0] + 8);
                    do
                    {
                      v39 = *v38;
                      *v38 = 0;
                      if (v39)
                      {
                        if (*(_DWORD *)v39 == 2)
                          WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v20);
                        else
                          *(_DWORD *)v39 -= 2;
                      }
                      v38 += 2;
                      v37 -= 16;
                    }
                    while (v37);
                    v36 = v134[0];
                  }
                  if (v36)
                  {
                    v134[0] = 0;
                    LODWORD(v134[1]) = 0;
                    WTF::fastFree(v36, v20);
                  }
                  v40 = v165;
                  v165 = 0;
                  if (v40)
                  {
                    if (*(_DWORD *)v40 == 2)
                      WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v20);
                    else
                      *(_DWORD *)v40 -= 2;
                  }
                  v41 = v163;
                  v163 = 0;
                  if (v41)
                  {
                    if (*(_DWORD *)v41 == 2)
                      WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v20);
                    else
                      *(_DWORD *)v41 -= 2;
                  }
                  v42 = v161;
                  v161 = 0;
                  if (v42)
                  {
                    if (*(_DWORD *)v42 == 2)
                      WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v20);
                    else
                      *(_DWORD *)v42 -= 2;
                  }
                  v43 = v159;
                  v159 = 0;
                  if (v43)
                  {
                    if (*(_DWORD *)v43 == 2)
                      WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v20);
                    else
                      *(_DWORD *)v43 -= 2;
                  }
                  v44 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                  *((_QWORD *)&buf + 1) = 0;
                  if (v44)
                  {
                    if (*(_DWORD *)v44 == 2)
                      WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v20);
                    else
                      *(_DWORD *)v44 -= 2;
                  }
                  ++v27;
                }
                while (v27 != (uint64_t *)v129);
              }
              v45 = __ldxr(v22);
              if (v45 == 1)
              {
                a1 = v133;
                if (!__stlxr(0, v22))
                  break;
              }
              else
              {
                __clrex();
                a1 = v133;
              }
              WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
              break;
            }
          }
          else
          {
            __clrex();
          }
        }
      }
      result = (CMTime *)v154;
      v154 = 0;
      if (result)
      {
        if (LODWORD(result->value) == 2)
          result = (CMTime *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v20);
        else
          LODWORD(result->value) -= 2;
      }
    }
  }
  if (!*(_BYTE *)(a1 + 169) || !*(_BYTE *)(a1 + 400))
  {
    if (!*(_QWORD *)(a1 + 680))
    {
      WebCore::MediaPlayerPrivateAVFoundationObjC::processMetadataTrack((unsigned __int8 *)a1);
      a1 = v133;
    }
    if (!*a2)
      return (CMTime *)WebCore::InbandMetadataTextTrackPrivateAVF::updatePendingCueEndTimes(*(WebCore::InbandMetadataTextTrackPrivateAVF **)(a1 + 680), a3);
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();
    a1 = v133;
    if ((isKindOfClass & 1) != 0)
      return (CMTime *)WebCore::InbandMetadataTextTrackPrivateAVF::updatePendingCueEndTimes(*(WebCore::InbandMetadataTextTrackPrivateAVF **)(a1 + 680), a3);
    v47 = *(_OWORD *)WTF::MediaTime::positiveInfiniteTime((WTF::MediaTime *)isKindOfClass);
    v142 = 0u;
    v143 = 0u;
    v144 = 0u;
    v145 = 0u;
    v146 = v47;
    obja = *(id *)(v133 + 776);
    v48 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v142, v156, 16);
    if (v48)
    {
      v49 = *(_QWORD *)v143;
      do
      {
        for (i = 0; i != v48; ++i)
        {
          if (*(_QWORD *)v143 != v49)
            objc_enumerationMutation(obja);
          v51 = *(void **)(*((_QWORD *)&v142 + 1) + 8 * i);
          if (v51)
          {
            v51 = (void *)objc_msgSend(v51, "time");
            v52 = buf;
            v53 = DWORD2(buf);
            v54 = HIDWORD(buf);
          }
          else
          {
            v53 = 0;
            v52 = 0;
            v54 = 0;
            buf = 0uLL;
            v158 = 0;
          }
          v55 = v54 & 1;
          if ((~v54 & 3) == 0)
            v55 = v54 & 1 | 2;
          if ((~v54 & 5) == 0)
            v55 |= 4u;
          if ((~v54 & 9) == 0)
            v55 |= 8u;
          if ((~v54 & 0x11) != 0)
            v56 = v55;
          else
            v56 = v55 | 0x10;
          v58 = (v56 & 1) == 0 || v53 != 0;
          if (v52 >= 0)
            v59 = 5;
          else
            v59 = 9;
          if (!v58)
          {
            v56 = v59;
            v52 >>= 63;
            v53 = 1;
          }
          v134[0] = (WTF::Logger *)v52;
          v134[1] = (WTF::Logger *)(v53 | ((unint64_t)v56 << 32));
          v60 = (const WTF::MediaTime *)WTF::MediaTime::zeroTime((WTF::MediaTime *)v51);
          if (WTF::MediaTime::compare((WTF::MediaTime *)v134, v60) == -1)
            v61 = (WTF::Logger **)v60;
          else
            v61 = v134;
          *(_OWORD *)v147 = *(_OWORD *)v61;
          if (WTF::MediaTime::compare((WTF::MediaTime *)v147, (const WTF::MediaTime *)&v146) == -1)
          {
            *(_QWORD *)&v146 = *(_QWORD *)v147;
            *(_QWORD *)((char *)&v146 + 5) = *(_QWORD *)&v147[5];
          }
        }
        v48 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v142, v156, 16);
      }
      while (v48);
    }
    WebCore::InbandMetadataTextTrackPrivateAVF::updatePendingCueEndTimes(*(WebCore::InbandMetadataTextTrackPrivateAVF **)(v133 + 680), (const WTF::MediaTime *)&v146);
    v140 = 0u;
    v141 = 0u;
    v138 = 0u;
    v139 = 0u;
    v62 = *(void **)(v133 + 776);
    result = (CMTime *)objc_msgSend(v62, "countByEnumeratingWithState:objects:count:", &v138, v155, 16);
    v63 = result;
    if (result)
    {
      v64 = *(_QWORD *)v139;
      v65 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
      do
      {
        v66 = 0;
        do
        {
          if (*(_QWORD *)v139 != v64)
            objc_enumerationMutation(v62);
          v67 = *(AVMetadataItem **)(*((_QWORD *)&v138 + 1) + 8 * (_QWORD)v66);
          *(_QWORD *)v137 = 0;
          *(_DWORD *)&v137[8] = 10000000;
          v137[12] = 1;
          if (v67)
          {
            result = -[AVMetadataItem time](v67, "time");
            if ((BYTE12(buf) & 1) != 0)
            {
              v68 = -[AVMetadataItem time](v67, "time");
              v69 = DWORD2(buf);
              v70 = BYTE12(buf) & 1;
              if ((~HIDWORD(buf) & 3) == 0)
                v70 = BYTE12(buf) & 1 | 2;
              if ((~HIDWORD(buf) & 5) == 0)
                v70 |= 4u;
              if ((~HIDWORD(buf) & 9) == 0)
                v70 |= 8u;
              if ((~HIDWORD(buf) & 0x11) != 0)
                v71 = v70;
              else
                v71 = v70 | 0x10;
              v73 = (v71 & 1) == 0 || DWORD2(buf) != 0;
              if ((uint64_t)buf >= 0)
                v74 = 5;
              else
                v74 = 9;
              v75 = !v73;
              if (v73)
              {
                v76 = buf;
              }
              else
              {
                v71 = v74;
                v76 = (uint64_t)buf >> 63;
              }
              if (v75)
                v69 = 1;
              *(_QWORD *)v147 = v76;
              *(_QWORD *)&v147[8] = v69 | ((unint64_t)v71 << 32);
              v77 = (const WTF::MediaTime *)WTF::MediaTime::zeroTime(v68);
              result = (CMTime *)WTF::MediaTime::compare((WTF::MediaTime *)v147, v77);
              v78 = (const WTF::MediaTime *)v147;
              if ((_DWORD)result == -1)
                v78 = v77;
              v79 = *(_QWORD *)v78;
              *(_QWORD *)&v137[5] = *(_QWORD *)((char *)v78 + 5);
              *(_QWORD *)v137 = v79;
            }
          }
          v136 = *(_OWORD *)WTF::MediaTime::positiveInfiniteTime((WTF::MediaTime *)result);
          v134[0] = 0;
          v134[1] = 0;
          v135 = 0;
          if (v67)
          {
            -[AVMetadataItem duration](v67, "duration");
            if ((BYTE4(v134[1]) & 1) != 0)
            {
              buf = *(_OWORD *)v134;
              v158 = v135;
              if (PAL::softLinkCoreMediaCMTimeGetSeconds((PAL *)&buf, v80) > 0.001)
              {
                v81 = LODWORD(v134[1]);
                v82 = BYTE4(v134[1]) & 1;
                if ((~HIDWORD(v134[1]) & 3) == 0)
                  v82 = BYTE4(v134[1]) & 1 | 2;
                if ((~HIDWORD(v134[1]) & 5) == 0)
                  v82 |= 4u;
                if ((~HIDWORD(v134[1]) & 9) == 0)
                  v82 |= 8u;
                if ((~HIDWORD(v134[1]) & 0x11) != 0)
                  v83 = v82;
                else
                  v83 = v82 | 0x10;
                v85 = (v83 & 1) == 0 || LODWORD(v134[1]) != 0;
                if ((uint64_t)v134[0] >= 0)
                  v86 = 5;
                else
                  v86 = 9;
                v87 = !v85;
                if (v85)
                {
                  v88 = (uint64_t)v134[0];
                }
                else
                {
                  v83 = v86;
                  v88 = (uint64_t)v134[0] >> 63;
                }
                if (v87)
                  v81 = 1;
                *(_QWORD *)&buf = v88;
                *((_QWORD *)&buf + 1) = v81 | ((unint64_t)v83 << 32);
                *(_QWORD *)&v136 = WTF::MediaTime::operator+();
                DWORD2(v136) = v89;
                BYTE12(v136) = v90;
              }
            }
          }
          v91 = *v65;
          if (*v65)
            *(_DWORD *)v91 += 2;
          v154 = v91;
          if (-[AVMetadataItem keySpace](v67, "keySpace"))
          {
            v92 = -[AVMetadataItem keySpace](v67, "keySpace");
            v93 = v92;
            if ((byte_1EE334A51 & 1) == 0)
            {
              v92 = (PAL *)WTF::AtomStringImpl::add();
              qword_1EE334AA0 = buf;
              byte_1EE334A51 = 1;
            }
            if ((byte_1EE334A52 & 1) == 0)
            {
              v92 = (PAL *)WTF::AtomStringImpl::add();
              qword_1EE334AA8 = buf;
              byte_1EE334A52 = 1;
            }
            if ((byte_1EE334A53 & 1) == 0)
            {
              v92 = (PAL *)WTF::AtomStringImpl::add();
              qword_1EE334AB0 = buf;
              byte_1EE334A53 = 1;
            }
            if ((byte_1EE334A54 & 1) == 0)
            {
              v92 = (PAL *)WTF::AtomStringImpl::add();
              qword_1EE334AB8 = buf;
              byte_1EE334A54 = 1;
            }
            if ((byte_1EE334A55 & 1) == 0)
            {
              v92 = (PAL *)WTF::AtomStringImpl::add();
              qword_1EE334AC0 = buf;
              byte_1EE334A55 = 1;
            }
            if ((byte_1EE334A56 & 1) == 0)
            {
              v92 = (PAL *)WTF::AtomStringImpl::add();
              qword_1EE334AC8 = buf;
              byte_1EE334A56 = 1;
            }
            v94 = (PAL *)-[PAL isEqualToString:](v93, "isEqualToString:", PAL::get_AVFoundation_AVMetadataKeySpaceQuickTimeUserData(v92));
            v96 = &qword_1EE334AA0;
            if ((v94 & 1) == 0)
            {
              v97 = (PAL *)-[PAL isEqualToString:](v93, "isEqualToString:", PAL::get_AVFoundation_AVMetadataKeySpaceISOUserData(&qword_1EE334AA0, v94));
              v96 = &qword_1EE334AA8;
              if ((v97 & 1) == 0)
              {
                v98 = (PAL *)-[PAL isEqualToString:](v93, "isEqualToString:", PAL::get_AVFoundation_AVMetadataKeySpaceQuickTimeMetadata(&qword_1EE334AA8, v97));
                v96 = &qword_1EE334AB0;
                if ((v98 & 1) == 0)
                {
                  v99 = (PAL *)-[PAL isEqualToString:](v93, "isEqualToString:", PAL::get_AVFoundation_AVMetadataKeySpaceiTunes(&qword_1EE334AB0, v98));
                  v96 = &qword_1EE334AB8;
                  if ((v99 & 1) == 0)
                  {
                    v100 = (PAL *)-[PAL isEqualToString:](v93, "isEqualToString:", PAL::get_AVFoundation_AVMetadataKeySpaceID3(&qword_1EE334AB8, v99));
                    v96 = &qword_1EE334AC0;
                    if ((v100 & 1) == 0)
                    {
                      v101 = -[PAL isEqualToString:](v93, "isEqualToString:", PAL::get_AVFoundation_AVMetadataKeySpaceHLSDateRange(&qword_1EE334AC0, v100));
                      v96 = (uint64_t *)MEMORY[0x1E0CBF3B8];
                      if (v101)
                        v96 = &qword_1EE334AC8;
                    }
                  }
                }
              }
            }
            v102 = (WTF::StringImpl *)*v96;
            if (v102)
              *(_DWORD *)v102 += 2;
            v103 = v154;
            v154 = v102;
            if (v103)
            {
              if (*(_DWORD *)v103 == 2)
                WTF::StringImpl::destroy(v103, v95);
              else
                *(_DWORD *)v103 -= 2;
            }
          }
          v104 = *(_QWORD *)(v133 + 680);
          v105 = WebCore::SerializedPlatformDataCueValue::SerializedPlatformDataCueValue((WebCore::SerializedPlatformDataCueValue *)&buf, v67);
          WebCore::SerializedPlatformDataCue::create((uint64_t)v105, (uint64_t *)&v153);
          v107 = (unsigned __int8 *)(v104 + 12);
          if (__ldaxr((unsigned __int8 *)(v104 + 12)))
          {
            __clrex();
          }
          else if (!__stxr(1u, v107))
          {
            goto LABEL_238;
          }
          MEMORY[0x19AEA534C](v104 + 12);
LABEL_238:
          v109 = *(_DWORD *)(v104 + 28);
          v110 = __ldxr(v107);
          if (v110 == 1)
          {
            if (!__stlxr(0, v107))
            {
              if (!v109)
                goto LABEL_252;
              goto LABEL_244;
            }
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)(v104 + 12));
          if (!v109)
            goto LABEL_252;
LABEL_244:
          *(_QWORD *)(v104 + 72) = *(_QWORD *)v137;
          *(_QWORD *)(v104 + 77) = *(_QWORD *)&v137[5];
          if ((BYTE12(v136) & 4) != 0)
          {
            v111 = v153;
            ++*((_DWORD *)v153 + 2);
            *(_QWORD *)v147 = v111;
            *(_QWORD *)&v147[8] = *(_QWORD *)v137;
            *(_QWORD *)&v147[13] = *(_QWORD *)&v137[5];
            v112 = *(unsigned int *)(v104 + 100);
            if ((_DWORD)v112 == *(_DWORD *)(v104 + 96))
            {
              v113 = WTF::Vector<WebCore::IncompleteMetaDataCue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)(v104 + 88), v112 + 1, (unint64_t)v147);
              v114 = *(_QWORD *)(v104 + 88) + 24 * *(unsigned int *)(v104 + 100);
              v115 = *(_QWORD *)v113;
              *(_QWORD *)v113 = 0;
              *(_QWORD *)v114 = v115;
              *(_OWORD *)(v114 + 8) = *(_OWORD *)(v113 + 8);
              v116 = *(_DWORD **)v147;
              ++*(_DWORD *)(v104 + 100);
              *(_QWORD *)v147 = 0;
              if (v116)
              {
                if (v116[2] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v116 + 8))(v116);
                else
                  --v116[2];
              }
            }
            else
            {
              v117 = *(_QWORD *)(v104 + 88) + 24 * v112;
              *(_QWORD *)v147 = 0;
              *(_QWORD *)v117 = v111;
              *(_OWORD *)(v117 + 8) = *(_OWORD *)&v147[8];
              ++*(_DWORD *)(v104 + 100);
            }
          }
          v118 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
          *v118 = off_1E3411330;
          v118[1] = v137;
          v118[2] = &v136;
          v118[3] = &v153;
          v118[4] = &v154;
          *(_QWORD *)v147 = v118;
          WebCore::TrackPrivateBase::notifyMainThreadClient(v104, (uint64_t *)v147);
          v119 = *(_QWORD *)v147;
          *(_QWORD *)v147 = 0;
          if (v119)
            (*(void (**)(uint64_t))(*(_QWORD *)v119 + 8))(v119);
LABEL_252:
          v120 = v153;
          v153 = 0;
          if (v120)
          {
            if (*((_DWORD *)v120 + 2) == 1)
              (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v120 + 8))(v120);
            else
              --*((_DWORD *)v120 + 2);
          }
          if ((_BYTE)v162)
          {
            if ((_DWORD)v161 != -1)
              ((void (*)(_BYTE *, int *))off_1E3204AB8[v161])(v147, &v160);
            LODWORD(v161) = -1;
            v121 = v159;
            v159 = 0;
            if (v121)
              CFRelease(v121);
            v122 = v158;
            v158 = 0;
            if (v122)
            {
              if (*(_DWORD *)v122 == 2)
                WTF::StringImpl::destroy(v122, v106);
              else
                *(_DWORD *)v122 -= 2;
            }
            v123 = *((_QWORD *)&buf + 1);
            if (*((_QWORD *)&buf + 1))
            {
              v125 = *(unsigned int *)(*((_QWORD *)&buf + 1) - 4);
              if ((_DWORD)v125)
              {
                v126 = (WTF::StringImpl **)*((_QWORD *)&buf + 1);
                do
                {
                  v127 = *v126;
                  if (*v126 != (WTF::StringImpl *)-1)
                  {
                    v128 = v126[1];
                    v126[1] = 0;
                    if (v128)
                    {
                      if (*(_DWORD *)v128 == 2)
                      {
                        WTF::StringImpl::destroy(v128, v106);
                        v127 = *v126;
                      }
                      else
                      {
                        *(_DWORD *)v128 -= 2;
                      }
                    }
                    *v126 = 0;
                    if (v127)
                    {
                      if (*(_DWORD *)v127 == 2)
                        WTF::StringImpl::destroy(v127, v106);
                      else
                        *(_DWORD *)v127 -= 2;
                    }
                  }
                  v126 += 2;
                  --v125;
                }
                while (v125);
              }
              WTF::fastFree((WTF *)(v123 - 16), v106);
            }
            v124 = (WTF::StringImpl *)buf;
            *(_QWORD *)&buf = 0;
            if (v124)
            {
              if (*(_DWORD *)v124 == 2)
                WTF::StringImpl::destroy(v124, v106);
              else
                *(_DWORD *)v124 -= 2;
            }
          }
          result = (CMTime *)v154;
          v154 = 0;
          if (result)
          {
            if (LODWORD(result->value) == 2)
              result = (CMTime *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v106);
            else
              LODWORD(result->value) -= 2;
          }
          v66 = (CMTime *)((char *)v66 + 1);
        }
        while (v66 != v63);
        result = (CMTime *)objc_msgSend(v62, "countByEnumeratingWithState:objects:count:", &v138, v155, 16);
        v63 = result;
      }
      while (result);
    }
  }
  return result;
}

void sub_194762078(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, WTF *a18, int a19, int a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,WTF::StringImpl *a48,WTF::StringImpl *a49,WTF::StringImpl *a50,WTF::StringImpl *a51,uint64_t a52,WTF::StringImpl *a53)
{
  unsigned __int8 *v53;
  int v55;

  v55 = __ldxr(v53);
  if (v55 == 1)
  {
    if (!__stlxr(0, v53))
    {
LABEL_6:
      if (a53)
      {
        if (*(_DWORD *)a53 == 2)
          WTF::StringImpl::destroy(a53, a2);
        else
          *(_DWORD *)a53 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t ___ZN7WebCore34MediaPlayerPrivateAVFoundationObjC15tracksDidChangeERKN3WTF9RetainPtrI7NSArrayEE_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  uint64_t result;
  PAL *v6;
  PAL *v7;
  void *v8;

  v3 = *(_QWORD *)(a1 + 40);
  v4 = (void *)objc_msgSend(a2, "assetTrack");
  if ((objc_msgSend(*(id *)(a1 + 32), "containsObject:", v4) & 1) != 0)
    return 1;
  result = *(_QWORD *)(v3 + 408);
  if (result)
  {
    if (objc_msgSend((id)result, "statusOfValueForKey:error:", CFSTR("availableMediaCharacteristicsWithMediaSelectionOptions"), 0) == 2)
    {
      v6 = (PAL *)objc_msgSend(v4, "hasMediaCharacteristic:", PAL::get_AVFoundation_AVMediaCharacteristicAudible((PAL *)2));
      if (!(_DWORD)v6
        || (v6 = *(PAL **)(v3 + 408)) == 0
        || (v6 = (PAL *)-[PAL statusOfValueForKey:error:](v6, "statusOfValueForKey:error:", CFSTR("availableMediaCharacteristicsWithMediaSelectionOptions"), 0), v6 != (PAL *)2)|| (v6 = (PAL *)objc_msgSend(*(id *)(v3 + 408), "mediaSelectionGroupForMediaCharacteristic:", PAL::get_AVFoundation_AVMediaCharacteristicAudible((PAL *)2))) == 0)
      {
        v7 = (PAL *)objc_msgSend(v4, "hasMediaCharacteristic:", PAL::get_AVFoundation_AVMediaCharacteristicVisual(v6));
        if (!(_DWORD)v7
          || (v7 = *(PAL **)(v3 + 408)) == 0
          || (v7 = (PAL *)-[PAL statusOfValueForKey:error:](v7, "statusOfValueForKey:error:", CFSTR("availableMediaCharacteristicsWithMediaSelectionOptions"), 0), v7 != (PAL *)2)|| (v7 = (PAL *)objc_msgSend(*(id *)(v3 + 408), "mediaSelectionGroupForMediaCharacteristic:", PAL::get_AVFoundation_AVMediaCharacteristicVisual((PAL *)2))) == 0)
        {
          if (!objc_msgSend(v4, "hasMediaCharacteristic:", PAL::get_AVFoundation_AVMediaCharacteristicLegible(v7)))return 1;
          v8 = *(void **)(v3 + 408);
          if (!v8
            || objc_msgSend(v8, "statusOfValueForKey:error:", CFSTR("availableMediaCharacteristicsWithMediaSelectionOptions"), 0) != 2|| !objc_msgSend(*(id *)(v3 + 408), "mediaSelectionGroupForMediaCharacteristic:", PAL::get_AVFoundation_AVMediaCharacteristicLegible((PAL *)2)))
          {
            return 1;
          }
        }
      }
    }
    return 0;
  }
  return result;
}

unsigned __int8 *WebCore::MediaPlayerPrivateAVFoundationObjC::timeControlStatusDidChange(unsigned __int8 *this, int a2)
{
  int v2;
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::Logger *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  NSObject *v12;
  uint64_t v13;
  void *v14;
  char *v15;
  unsigned __int8 *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::Logger *v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::Logger *v32;
  uint64_t v33;
  WTF::StringImpl **v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int v51;
  int v52;
  _QWORD v53[4];
  WTF::Logger *v54;
  uint64_t v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  __int128 buf;
  const char *v62;
  WTF::StringImpl *v63;
  int v64;
  WTF::StringImpl *v65;
  int v66;
  WTF::StringImpl *v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 228) == a2)
    return this;
  v2 = a2;
  v3 = this;
  v4 = *((_QWORD *)this + 35);
  v5 = *((_QWORD *)this + 36);
  v53[0] = "MediaPlayerPrivateAVFoundationObjC";
  v53[1] = 35;
  v53[2] = "timeControlStatusDidChange";
  v53[3] = v5;
  if (*(_BYTE *)(v4 + 12))
  {
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v53);
    v6 = v2;
    if ((byte_1EE334A5F & 1) == 0)
    {
      dword_1ECE76A30 += 2;
      unk_1EE334B00 = &dword_1ECE76A30;
      dword_1ECE76A50 += 2;
      unk_1EE334B08 = &dword_1ECE76A50;
      dword_1ECE76A70 += 2;
      unk_1EE334B10 = &dword_1ECE76A70;
      byte_1EE334A5F = 1;
    }
    v7 = *(WTF::Logger **)&_MergedGlobals_354[8 * v2 + 176];
    if (v7)
      *(_DWORD *)v7 += 2;
    WTF::String::String((WTF::String *)&v56, ", observing = ");
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v8 = (WTF::StringImpl *)buf;
    v54 = v7;
    v60 = v56;
    *(_QWORD *)&buf = v57;
    v59 = v8;
    this = (unsigned __int8 *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v54, (uint64_t *)&v60, (uint64_t *)&v59, &v58);
    if (!v58)
    {
      __break(0xC471u);
      return this;
    }
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v9);
      else
        *(_DWORD *)v8 -= 2;
    }
    v10 = v56;
    v56 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v7)
        {
LABEL_15:
          if (*(_DWORD *)v7 == 2)
            WTF::StringImpl::destroy(v7, v9);
          else
            *(_DWORD *)v7 -= 2;
        }
LABEL_17:
        v11 = v57;
        v57 = 0;
        if (v11)
        {
          if (*(_DWORD *)v11 == 2)
            WTF::StringImpl::destroy(v11, v9);
          else
            *(_DWORD *)v11 -= 2;
        }
        v12 = qword_1ECE7C4A0;
        v13 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)v13)
        {
          WTF::String::utf8();
          v15 = v54 ? (char *)v54 + 16 : 0;
          LODWORD(buf) = 136446210;
          *(_QWORD *)((char *)&buf + 4) = v15;
          _os_log_impl(&dword_1940B8000, v12, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
          v13 = (uint64_t)v54;
          v54 = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 1)
              v13 = WTF::fastFree((WTF *)v13, v14);
            else
              --*(_DWORD *)v13;
          }
        }
        if (WebCore::LogMedia)
        {
          v16 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
          while (1)
          {
            v17 = *v16;
            if ((v17 & 1) != 0)
              break;
            v18 = __ldaxr(v16);
            if (v18 == v17)
            {
              if (!__stxr(v17 | 1, v16))
              {
                v52 = v2;
                v19 = WTF::Logger::observers((WTF::Logger *)v13);
                v20 = *(unsigned int *)(v19 + 12);
                if ((_DWORD)v20)
                {
                  v21 = *(uint64_t **)v19;
                  v22 = *(_QWORD *)v19 + 8 * v20;
                  v23 = &_MergedGlobals_354[8 * v6];
                  do
                  {
                    v24 = *v21;
                    LODWORD(buf) = 0;
                    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v53);
                    LODWORD(v62) = 0;
                    if ((byte_1EE334A5F & 1) == 0)
                    {
                      dword_1ECE76A30 += 2;
                      unk_1EE334B00 = &dword_1ECE76A30;
                      dword_1ECE76A50 += 2;
                      unk_1EE334B08 = &dword_1ECE76A50;
                      dword_1ECE76A70 += 2;
                      unk_1EE334B10 = &dword_1ECE76A70;
                      byte_1EE334A5F = 1;
                    }
                    v25 = (WTF::StringImpl *)*((_QWORD *)v23 + 22);
                    if (v25)
                      *(_DWORD *)v25 += 2;
                    v63 = v25;
                    v64 = 0;
                    WTF::String::String((WTF::String *)&v65, ", observing = ");
                    v66 = 0;
                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                    v67 = v60;
                    v54 = 0;
                    v55 = 0;
                    v26 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x40);
                    LODWORD(v55) = 4;
                    v54 = v26;
                    v27 = HIDWORD(v55);
                    *((_DWORD *)v26 + 4 * HIDWORD(v55)) = buf;
                    v28 = *((_QWORD *)&buf + 1);
                    if (*((_QWORD *)&buf + 1))
                      **((_DWORD **)&buf + 1) += 2;
                    *((_QWORD *)v26 + 2 * v27 + 1) = v28;
                    *((_DWORD *)v26 + 4 * (v27 + 1)) = (_DWORD)v62;
                    v29 = v63;
                    if (v63)
                      *(_DWORD *)v63 += 2;
                    *((_QWORD *)v26 + 2 * (v27 + 1) + 1) = v29;
                    *((_DWORD *)v26 + 4 * (v27 + 2)) = v64;
                    v30 = v65;
                    if (v65)
                      *(_DWORD *)v65 += 2;
                    *((_QWORD *)v26 + 2 * (v27 + 2) + 1) = v30;
                    *((_DWORD *)v26 + 4 * (v27 + 3)) = v66;
                    v31 = v67;
                    if (v67)
                      *(_DWORD *)v67 += 2;
                    *((_QWORD *)v26 + 2 * (v27 + 3) + 1) = v31;
                    HIDWORD(v55) = v27 + 4;
                    (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v24 + 16))(v24, &WebCore::LogMedia, 0, &v54);
                    v32 = v54;
                    if (HIDWORD(v55))
                    {
                      v33 = 16 * HIDWORD(v55);
                      v34 = (WTF::StringImpl **)((char *)v54 + 8);
                      do
                      {
                        v35 = *v34;
                        *v34 = 0;
                        if (v35)
                        {
                          if (*(_DWORD *)v35 == 2)
                            WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v14);
                          else
                            *(_DWORD *)v35 -= 2;
                        }
                        v34 += 2;
                        v33 -= 16;
                      }
                      while (v33);
                      v32 = v54;
                    }
                    if (v32)
                    {
                      v54 = 0;
                      LODWORD(v55) = 0;
                      WTF::fastFree(v32, v14);
                    }
                    v36 = v67;
                    v67 = 0;
                    if (v36)
                    {
                      if (*(_DWORD *)v36 == 2)
                        WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v14);
                      else
                        *(_DWORD *)v36 -= 2;
                    }
                    v37 = v65;
                    v65 = 0;
                    if (v37)
                    {
                      if (*(_DWORD *)v37 == 2)
                        WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v14);
                      else
                        *(_DWORD *)v37 -= 2;
                    }
                    v38 = v63;
                    v63 = 0;
                    if (v38)
                    {
                      if (*(_DWORD *)v38 == 2)
                        WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v14);
                      else
                        *(_DWORD *)v38 -= 2;
                    }
                    v39 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                    *((_QWORD *)&buf + 1) = 0;
                    if (v39)
                    {
                      if (*(_DWORD *)v39 == 2)
                        WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v14);
                      else
                        *(_DWORD *)v39 -= 2;
                    }
                    ++v21;
                  }
                  while (v21 != (uint64_t *)v22);
                }
                v40 = __ldxr(v16);
                if (v40 == 1)
                {
                  v2 = v52;
                  if (!__stlxr(0, v16))
                    break;
                }
                else
                {
                  __clrex();
                  v2 = v52;
                }
                WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                break;
              }
            }
            else
            {
              __clrex();
            }
          }
        }
        this = (unsigned __int8 *)v58;
        v58 = 0;
        if (this)
        {
          if (*(_DWORD *)this == 2)
            this = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)this, (WTF::StringImpl *)v14);
          else
            *(_DWORD *)this -= 2;
        }
        goto LABEL_84;
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v7)
      goto LABEL_15;
    goto LABEL_17;
  }
LABEL_84:
  if (!v3[959])
    return this;
  *((_DWORD *)v3 + 228) = v2;
  v41 = *((_QWORD *)v3 + 11);
  if (v41)
  {
    v42 = *((_QWORD *)v3 + 12);
    if (__ldaxr((unsigned __int8 *)v41))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v41))
    {
      goto LABEL_90;
    }
    MEMORY[0x19AEA534C](v41);
LABEL_90:
    if (*(_QWORD *)(v41 + 24))
      ++*(_QWORD *)(v41 + 8);
    else
      v42 = 0;
    v44 = __ldxr((unsigned __int8 *)v41);
    if (v44 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v41))
      {
LABEL_98:
        if (v42)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v42 + 8) + 8) + 72))(*(_QWORD *)(*(_QWORD *)(v42 + 8) + 8));
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v42);
        }
        goto LABEL_100;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v41);
    goto LABEL_98;
  }
LABEL_100:
  *((_QWORD *)v3 + 107) = 0x7FF8000000000000;
  this = (unsigned __int8 *)*((_QWORD *)v3 + 52);
  if (this)
    this = (unsigned __int8 *)objc_msgSend(this, "isExternalPlaybackActive");
  LOBYTE(v53[0]) = (_BYTE)this;
  v45 = *((_QWORD *)v3 + 35);
  v46 = (WTF::StringImpl *)*((_QWORD *)v3 + 36);
  *(_QWORD *)&buf = "MediaPlayerPrivateAVFoundationObjC";
  *((_QWORD *)&buf + 1) = 35;
  v62 = "isCurrentPlaybackTargetWireless";
  v63 = v46;
  if (*(_BYTE *)(v45 + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 3u)
  {
    this = (unsigned __int8 *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogMedia, 3, (WTF::Logger::LogSiteIdentifier *)&buf);
    if (!LOBYTE(v53[0]))
      return this;
  }
  else if (!(_DWORD)this)
  {
    return this;
  }
  v47 = *((_DWORD *)v3 + 228) != 0;
  if (v3[896] != v47)
  {
    v3[896] = v47;
    v48 = *((_QWORD *)v3 + 11);
    if (v48)
    {
      v49 = *((_QWORD *)v3 + 12);
      if (__ldaxr((unsigned __int8 *)v48))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v48))
      {
        goto LABEL_120;
      }
      this = (unsigned __int8 *)MEMORY[0x19AEA534C](v48);
LABEL_120:
      if (*(_QWORD *)(v48 + 24))
        ++*(_QWORD *)(v48 + 8);
      else
        v49 = 0;
      v51 = __ldxr((unsigned __int8 *)v48);
      if (v51 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v48))
        {
LABEL_128:
          if (v49)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v49 + 8) + 8) + 80))(*(_QWORD *)(*(_QWORD *)(v49 + 8) + 8));
            return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v49);
          }
          return this;
        }
      }
      else
      {
        __clrex();
      }
      this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v48);
      goto LABEL_128;
    }
  }
  return this;
}

void sub_194762D40(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF *a16, int a17, int a18, WTF::StringImpl *a19, uint64_t a20,WTF::StringImpl *a21,uint64_t a22,uint64_t a23,char a24,WTF::StringImpl *a25,uint64_t a26,WTF::StringImpl *a27,uint64_t a28,WTF::StringImpl *a29,uint64_t a30,WTF::StringImpl *a31)
{
  if (a21)
  {
    if (*(_DWORD *)a21 == 2)
      WTF::StringImpl::destroy(a21, a2);
    else
      *(_DWORD *)a21 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void *WebCore::MediaPlayerPrivateAVFoundationObjC::videoPlaybackQualityMetrics@<X0>(WebCore::MediaPlayerPrivateAVFoundationObjC *this@<X0>, uint64_t a2@<X8>)
{
  void *result;
  void *v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  result = (void *)*((_QWORD *)this + 54);
  if (result && (result = (void *)objc_msgSend(result, "videoPerformanceMetrics")) != 0)
  {
    v4 = result;
    v5 = objc_msgSend(result, "totalNumberOfVideoFrames");
    v6 = objc_msgSend(v4, "numberOfDroppedVideoFrames");
    v7 = objc_msgSend(v4, "numberOfCorruptedVideoFrames");
    objc_msgSend(v4, "totalFrameDelay");
    v9 = v8;
    result = (void *)objc_msgSend(v4, "numberOfDisplayCompositedVideoFrames");
    *(_DWORD *)a2 = v5;
    *(_DWORD *)(a2 + 4) = v6;
    *(_DWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v9;
    v10 = 1;
    *(_DWORD *)(a2 + 24) = (_DWORD)result;
  }
  else
  {
    v10 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 32) = v10;
  return result;
}

WTF *WebCore::MediaPlayerPrivateAVFoundationObjC::asyncVideoPlaybackQualityMetrics@<X0>(WebCore::MediaPlayerPrivateAVFoundationObjC *this@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  WTF *result;
  int v10;
  uint64_t v11;
  uint64_t v12;
  WTF::NativePromiseBase *v13;
  unsigned __int8 *v14;
  _BYTE *v16;
  int v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  WTF *v25;
  __int128 v26;
  __int128 v27;

  v4 = atomic_load(&qword_1EE334A60);
  if (v4 != -1)
  {
    *(_QWORD *)&v26 = &v25;
    *(_QWORD *)&v23 = &v26;
    std::__call_once(&qword_1EE334A60, &v23, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::MediaPlayerPrivateAVFoundationObjC::asyncVideoPlaybackQualityMetrics(void)::$_1 &&>>);
  }
  if (!*((_QWORD *)this + 54))
  {
    LOBYTE(v23) = 10;
    v26 = 0uLL;
    *(_QWORD *)&v27 = "asyncVideoPlaybackQualityMetrics";
    *((_QWORD *)&v27 + 1) = 0;
    v8 = WTF::fastMalloc((WTF *)0x98);
    WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::NativePromise(v8, &v26);
    *a2 = v8;
    return WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::reject<WebCore::PlatformMediaError,std::enable_if<true,void>>(v8, (char *)&v23, (WTF::Logger::LogSiteIdentifier *)&v26);
  }
  v5 = qword_1EE334A68;
  v6 = *((_QWORD *)this + 6);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_9;
  }
  MEMORY[0x19AEA534C](v6);
LABEL_9:
  ++*(_QWORD *)(v6 + 8);
  v10 = __ldxr((unsigned __int8 *)v6);
  if (v10 != 1)
  {
    __clrex();
    goto LABEL_13;
  }
  if (__stlxr(0, (unsigned __int8 *)v6))
LABEL_13:
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
  v11 = *((_QWORD *)this + 54);
  if (v11)
    CFRetain(*((CFTypeRef *)this + 54));
  v23 = 0uLL;
  *(_QWORD *)&v24 = "asyncVideoPlaybackQualityMetrics";
  *((_QWORD *)&v24 + 1) = 0;
  v12 = WTF::fastMalloc((WTF *)0x98);
  v13 = (WTF::NativePromiseBase *)WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::NativePromise(v12, &v23);
  v26 = v23;
  v27 = v24;
  v14 = (unsigned __int8 *)(v12 + 48);
  if (__ldaxr((unsigned __int8 *)(v12 + 48)))
  {
    __clrex();
LABEL_19:
    v13 = (WTF::NativePromiseBase *)MEMORY[0x19AEA534C](v12 + 48);
    goto LABEL_20;
  }
  if (__stxr(1u, v14))
    goto LABEL_19;
LABEL_20:
  v16 = (_BYTE *)WTF::NativePromiseBase::logChannel(v13);
  if (*v16 && v16[16] >= 4u)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>((uint64_t)v16, 4u, (WTF::Logger::LogSiteIdentifier *)&v23, " runSynchronouslyOnTarget ", v12);
  atomic_store(0, (unsigned __int8 *)(v12 + 145));
  v17 = __ldxr(v14);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_27;
  }
  if (__stlxr(0, v14))
LABEL_27:
    WTF::Lock::unlockSlow((WTF::Lock *)(v12 + 48));
  v18 = v5 + 32;
  v19 = (unsigned int *)(v12 + 8);
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 + 1, v19));
  v21 = WTF::fastMalloc((WTF *)0x48);
  *(_QWORD *)v21 = off_1E3204B08;
  *(_QWORD *)(v21 + 8) = v12;
  v22 = v27;
  *(_OWORD *)(v21 + 16) = v26;
  *(_OWORD *)(v21 + 32) = v22;
  *(_QWORD *)(v21 + 48) = this;
  *(_QWORD *)(v21 + 56) = v11;
  *(_QWORD *)(v21 + 64) = this;
  v25 = (WTF *)v21;
  (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v18 + 16))(v18, &v25);
  result = v25;
  v25 = 0;
  if (result)
    result = (WTF *)(*(uint64_t (**)(WTF *))(*(_QWORD *)result + 8))(result);
  *a2 = v12;
  return result;
}

void sub_194763268(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  unsigned int *v14;
  _QWORD *v15;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;

  *v15 = 0;
  v17 = v14 + 2;
  do
  {
    v18 = __ldaxr(v17);
    v19 = v18 - 1;
  }
  while (__stlxr(v19, v17));
  if (!v19)
  {
    atomic_store(1u, v14 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 16))(v14);
  }
  _Unwind_Resume(exception_object);
}

BOOL WebCore::MediaPlayerPrivateAVFoundationObjC::performTaskAtTime(uint64_t a1, uint64_t *a2, WTF::MediaTime *this)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  int v10;
  double v11;
  uint64_t v12;
  const void *v13;
  const void *v14;
  const void *v15;
  uint64_t v16;
  _QWORD v18[5];
  _BYTE v19[12];
  unsigned int v20;
  _QWORD v21[6];
  uint64_t v22;
  _QWORD v23[2];

  v23[1] = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 416);
  if (v3)
  {
    v21[0] = 0;
    v21[1] = v21;
    v21[2] = 0x3812000000;
    v21[3] = __Block_byref_object_copy__108;
    v21[4] = __Block_byref_object_dispose__109;
    v6 = *a2;
    *a2 = 0;
    v21[5] = 0;
    v22 = v6;
    v7 = *(_QWORD *)(a1 + 464);
    if (v7)
      objc_msgSend(*(id *)(a1 + 416), "removeTimeObserver:");
    v8 = *(void **)(a1 + 416);
    v9 = (void *)MEMORY[0x1E0CB3B18];
    if ((*((_BYTE *)this + 12) & 0x20) != 0)
    {
      WTF::MediaTime::toDouble(this);
      PAL::softLinkCoreMediaCMTimeMakeWithSeconds((PAL *)*((unsigned int *)this + 2), v11, v10);
    }
    else
    {
      PAL::softLinkCoreMediaCMTimeMake(*(PAL **)this, *((unsigned int *)this + 2), v7);
    }
    v20 = v20 & 0xFFFFFFFE | *((_BYTE *)this + 12) & 1 | *((_BYTE *)this + 12) & 0xE;
    v23[0] = objc_msgSend(v9, "valueWithCMTime:", v19);
    v12 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v23, 1);
    v18[0] = MEMORY[0x1E0C809B0];
    v18[1] = 3221225472;
    v18[2] = ___ZN7WebCore34MediaPlayerPrivateAVFoundationObjC17performTaskAtTimeEON3WTF8FunctionIFvvEEERKNS1_9MediaTimeE_block_invoke;
    v18[3] = &unk_1E3204818;
    v18[4] = v21;
    v13 = (const void *)objc_msgSend(v8, "addBoundaryTimeObserverForTimes:queue:usingBlock:", v12, MEMORY[0x1E0C80D38], v18);
    v14 = v13;
    if (v13)
      CFRetain(v13);
    v15 = *(const void **)(a1 + 464);
    *(_QWORD *)(a1 + 464) = v14;
    if (v15)
      CFRelease(v15);
    _Block_object_dispose(v21, 8);
    v16 = v22;
    v22 = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  }
  return v3 != 0;
}

void sub_1947635DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v25;

  _Block_object_dispose(&a18, 8);
  v25 = a24;
  a24 = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__108(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 48) = v2;
  return result;
}

uint64_t __Block_byref_object_dispose__109(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t ___ZN7WebCore34MediaPlayerPrivateAVFoundationObjC17performTaskAtTimeEON3WTF8FunctionIFvvEEERKNS1_9MediaTimeE_block_invoke(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
}

uint64_t WebCore::MediaPlayerPrivateAVFoundationObjC::setShouldDisableHDR(WebCore::MediaPlayerPrivateAVFoundationObjC *this, _BOOL8 a2)
{
  _BOOL8 v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[4];
  BOOL v8;

  v2 = a2;
  v8 = a2;
  result = objc_opt_respondsToSelector();
  if ((result & 1) != 0)
  {
    v5 = *((_QWORD *)this + 35);
    v6 = *((_QWORD *)this + 36);
    v7[0] = "MediaPlayerPrivateAVFoundationObjC";
    v7[1] = 35;
    v7[2] = "setShouldDisableHDR";
    v7[3] = v6;
    if (*(_BYTE *)(v5 + 12))
    {
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v7);
      v2 = v8;
    }
    return objc_msgSend(*((id *)this + 54), "setToneMapToStandardDynamicRange:", v2);
  }
  return result;
}

void sub_194763988(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_194763A30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_194763AD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_194763C8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  const void *v10;
  const void *v11;

  if (v11)
    CFRelease(v11);
  CFRelease(v10);
  _Unwind_Resume(a1);
}

void sub_194763E4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  const void *v12;
  const void *v13;

  if (v13)
    CFRelease(v13);
  if (v12)
    CFRelease(v12);
  _Unwind_Resume(exception_object);
}

void sub_194763F1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_19476414C(_Unwind_Exception *a1)
{
  uint64_t v1;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayerPrivateAVFoundation,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v1 + 48));
  _Unwind_Resume(a1);
}

void sub_194764378(_Unwind_Exception *a1)
{
  uint64_t v1;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayerPrivateAVFoundation,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v1 + 48));
  _Unwind_Resume(a1);
}

void sub_1947646AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  const void *v10;
  uint64_t v11;

  CFRelease(v10);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayerPrivateAVFoundation,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v11 + 48));
  _Unwind_Resume(a1);
}

void sub_194764788(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  const void *v10;

  if (v10)
    CFRelease(v10);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::MediaPlayerPrivateAVFoundation::ref(uint64_t this)
{
  uint64_t v1;
  int v3;

  v1 = *(_QWORD *)(this + 48);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v1))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEA534C](v1);
LABEL_5:
  ++*(_QWORD *)(v1 + 8);
  v3 = __ldxr((unsigned __int8 *)v1);
  if (v3 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  if (__stlxr(0, (unsigned __int8 *)v1))
    return WTF::Lock::unlockSlow((WTF::Lock *)v1);
  return this;
}

unsigned __int8 *WebCore::MediaPlayerPrivateAVFoundation::deref(unsigned __int8 **this)
{
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayerPrivateAVFoundation,(WTF::DestructionThread)1>(this[6]);
}

uint64_t WebCore::MediaPlayerPrivateInterface::load(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
}

unsigned __int8 *WebCore::MediaPlayerPrivateAVFoundation::load(unsigned __int8 *this, WebCore::MediaStreamPrivate *a2)
{
  uint64_t v2;
  WebCore::MediaPlayer *v3;
  int v5;

  if (this[168] == 4)
    return this;
  this[168] = 4;
  v2 = *((_QWORD *)this + 11);
  if (!v2)
    return this;
  v3 = (WebCore::MediaPlayer *)*((_QWORD *)this + 12);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
LABEL_6:
    this = (unsigned __int8 *)MEMORY[0x19AEA534C](v2, a2);
    goto LABEL_7;
  }
  if (__stxr(1u, (unsigned __int8 *)v2))
    goto LABEL_6;
LABEL_7:
  if (*(_QWORD *)(v2 + 24))
    ++*(_QWORD *)(v2 + 8);
  else
    v3 = 0;
  v5 = __ldxr((unsigned __int8 *)v2);
  if (v5 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v2))
    {
      if (!v3)
        return this;
      goto LABEL_13;
    }
  }
  else
  {
    __clrex();
  }
  this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
  if (v3)
  {
LABEL_13:
    WebCore::MediaPlayer::networkStateChanged(v3);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v3);
  }
  return this;
}

uint64_t WebCore::MediaPlayerPrivateInterface::prepareForPlayback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t result;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 888))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 704))(a1, a3);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 464))(a1, a4);
  if (a5)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
  if (a6)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 832))(a1);
  return result;
}

uint64_t WebCore::MediaPlayerPrivateInterface::requestHostingContextID(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 16))(v2, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

void sub_194764ACC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebCore::MediaPlayerPrivateInterface::hostingContextID(WebCore::MediaPlayerPrivateInterface *this)
{
  return 0;
}

float WebCore::MediaPlayerPrivateInterface::videoLayerSize(WebCore::MediaPlayerPrivateInterface *this)
{
  return 0.0;
}

uint64_t WebCore::MediaPlayerPrivateAVFoundation::platformErrorCode(WebCore::MediaPlayerPrivateAVFoundation *this)
{
  return (*(uint64_t (**)(WebCore::MediaPlayerPrivateAVFoundation *))(*(_QWORD *)this + 1456))(this);
}

uint64_t WebCore::MediaPlayerPrivateAVFoundation::supportsPictureInPicture(WebCore::MediaPlayerPrivateAVFoundation *this)
{
  return 1;
}

uint64_t WebCore::MediaPlayerPrivateAVFoundation::supportsScanning(WebCore::MediaPlayerPrivateAVFoundation *this)
{
  return 1;
}

uint64_t WebCore::MediaPlayerPrivateInterface::supportsProgressMonitoring(WebCore::MediaPlayerPrivateInterface *this)
{
  return 1;
}

uint64_t WebCore::MediaPlayerPrivateInterface::requiresImmediateCompositing(WebCore::MediaPlayerPrivateInterface *this)
{
  return 0;
}

uint64_t WebCore::MediaPlayerPrivateInterface::setVisibleForCanvas(WebCore::MediaPlayerPrivateInterface *this)
{
  return (*(uint64_t (**)(WebCore::MediaPlayerPrivateInterface *))(*(_QWORD *)this + 312))(this);
}

BOOL WebCore::MediaPlayerPrivateAVFoundationObjC::timeIsProgressing(WebCore::MediaPlayerPrivateAVFoundationObjC *this)
{
  return *((_BYTE *)this + 169) && *((_DWORD *)this + 228) != 1 && *((double *)this + 111) != 0.0;
}

uint64_t WebCore::MediaPlayerPrivateInterface::willSeekToTarget(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_QWORD *)(result + 37) = *(uint64_t *)((char *)a2 + 5);
  *(_QWORD *)(result + 32) = v2;
  return result;
}

uint64_t WebCore::MediaPlayerPrivateInterface::pendingSeekTime(WebCore::MediaPlayerPrivateInterface *this)
{
  return *((_QWORD *)this + 4);
}

uint64_t WebCore::MediaPlayerPrivateInterface::startTime(WebCore::MediaPlayerPrivateInterface *this)
{
  return *(_QWORD *)WTF::MediaTime::zeroTime(this);
}

uint64_t WebCore::MediaPlayerPrivateInterface::initialTime(WebCore::MediaPlayerPrivateInterface *this)
{
  return *(_QWORD *)WTF::MediaTime::zeroTime(this);
}

uint64_t WebCore::MediaPlayerPrivateInterface::setVolumeDouble(WebCore::MediaPlayerPrivateInterface *this, double a2)
{
  float v2;

  v2 = a2;
  return (*(uint64_t (**)(WebCore::MediaPlayerPrivateInterface *, float))(*(_QWORD *)this + 488))(this, v2);
}

float WebCore::MediaPlayerPrivateInterface::volume(WebCore::MediaPlayerPrivateInterface *this)
{
  return 1.0;
}

double WebCore::MediaPlayerPrivateAVFoundationObjC::maxFastForwardRate(WebCore::MediaPlayerPrivateAVFoundationObjC *this)
{
  double result;

  result = INFINITY;
  if (!*((_BYTE *)this + 948))
    return 2.0;
  return result;
}

double WebCore::MediaPlayerPrivateAVFoundationObjC::minFastReverseRate(WebCore::MediaPlayerPrivateAVFoundationObjC *this)
{
  double result;

  result = -INFINITY;
  if (!*((_BYTE *)this + 949))
    return 0.0;
  return result;
}

uint64_t WebCore::MediaPlayerPrivateAVFoundation::networkState(WebCore::MediaPlayerPrivateAVFoundation *this)
{
  return *((unsigned __int8 *)this + 168);
}

uint64_t WebCore::MediaPlayerPrivateInterface::didLoadingProgressAsync(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 624))(a1);
  v4 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, v3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

void sub_194764C70(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebCore::MediaPlayerPrivateInterface::shouldGetNativeImageForCanvasDrawing(WebCore::MediaPlayerPrivateInterface *this)
{
  return 1;
}

uint64_t WebCore::MediaPlayerPrivateAVFoundationObjC::canPlayToWirelessPlaybackTarget(WebCore::MediaPlayerPrivateAVFoundationObjC *this)
{
  return 1;
}

uint64_t WebCore::MediaPlayerPrivateAVFoundationObjC::supportsAcceleratedRendering(WebCore::MediaPlayerPrivateAVFoundationObjC *this)
{
  return 1;
}

double WebCore::MediaPlayerPrivateInterface::maximumDurationToCacheMediaTime(WebCore::MediaPlayerPrivateInterface *this)
{
  return 0.0;
}

uint64_t WebCore::MediaPlayerPrivateInterface::decodedFrameCount(WebCore::MediaPlayerPrivateInterface *this)
{
  return 0;
}

uint64_t WebCore::MediaPlayerPrivateInterface::droppedFrameCount(WebCore::MediaPlayerPrivateInterface *this)
{
  return 0;
}

uint64_t WebCore::MediaPlayerPrivateInterface::audioDecodedByteCount(WebCore::MediaPlayerPrivateInterface *this)
{
  return 0;
}

uint64_t WebCore::MediaPlayerPrivateInterface::videoDecodedByteCount(WebCore::MediaPlayerPrivateInterface *this)
{
  return 0;
}

uint64_t WebCore::MediaPlayerPrivateAVFoundation::engineDescription@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  *a1 = v4;
  return result;
}

uint64_t WebCore::MediaPlayerPrivateAVFoundationObjC::waitingForKey(WebCore::MediaPlayerPrivateAVFoundationObjC *this)
{
  return *((unsigned __int8 *)this + 721);
}

WTF *WebCore::MediaPlayerPrivateAVFoundationObjC::beginSimulatedHDCPError(WTF *this)
{
  WTF *v1;
  uint64_t v2;
  _QWORD *v3;
  NSError *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[4];
  WTF *v15;

  v1 = this;
  v2 = *((_QWORD *)this + 89);
  if (v2)
  {
    v3 = *(_QWORD **)(v2 + 8);
    if (v3)
    {
      this = (WTF *)objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("com.apple.WebKit"), 1212433232, 0);
      v15 = this;
      v5 = v3[4];
      if (v5)
      {
        if (*(_QWORD *)(v5 + 8))
        {
          v6 = v3[7];
          v7 = v3[8];
          v14[0] = "CDMSessionAVFoundationObjC";
          v14[1] = 27;
          v14[2] = "playerDidReceiveError";
          v14[3] = v7;
          if (*(_BYTE *)(v6 + 12))
          {
            WTF::Logger::log<WTF::Logger::LogSiteIdentifier,NSError *>((uint64_t)&WebCore::LogEME, 1u, (WTF::Logger::LogSiteIdentifier *)v14, (id *)&v15);
            this = v15;
          }
          v8 = WebCore::mediaKeyErrorSystemCode(this, v4);
          this = (WTF *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3[4] + 8) + 24))(*(_QWORD *)(v3[4] + 8), 6, v8);
        }
      }
    }
  }
  v9 = *((_QWORD *)v1 + 91);
  if (v9)
  {
    v10 = *(unsigned int *)(v9 + 100);
    if ((_DWORD)v10)
    {
      v11 = *(_QWORD *)(v9 + 88);
      v12 = 8 * v10;
      do
      {
        if (*(_QWORD *)v11)
        {
          v13 = *(_QWORD *)(*(_QWORD *)v11 + 8);
          if (v13)
            this = WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::outputObscuredDueToInsufficientExternalProtectionChanged((WTF *)(v13 - 16), 1);
        }
        v11 += 8;
        v12 -= 8;
      }
      while (v12);
    }
  }
  return this;
}

WTF *WebCore::MediaPlayerPrivateAVFoundationObjC::endSimulatedHDCPError(WTF *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *((_QWORD *)this + 91);
  if (v1)
  {
    v2 = *(unsigned int *)(v1 + 100);
    if ((_DWORD)v2)
    {
      v3 = *(_QWORD *)(v1 + 88);
      v4 = 8 * v2;
      do
      {
        if (*(_QWORD *)v3)
        {
          v5 = *(_QWORD *)(*(_QWORD *)v3 + 8);
          if (v5)
            this = WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::outputObscuredDueToInsufficientExternalProtectionChanged((WTF *)(v5 - 16), 0);
        }
        v3 += 8;
        v4 -= 8;
      }
      while (v4);
    }
  }
  return this;
}

uint64_t WebCore::MediaPlayerPrivateInterface::extraMemoryCost(WebCore::MediaPlayerPrivateInterface *this)
{
  uint64_t v2;
  double v4;
  WebCore::PlatformTimeRanges *v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  _QWORD v10[2];
  _QWORD v11[2];

  v11[0] = (*(uint64_t (**)(WebCore::MediaPlayerPrivateInterface *))(*(_QWORD *)this + 336))(this);
  v11[1] = v2;
  if ((WTF::MediaTime::operator!() & 1) != 0)
    return 0;
  v4 = (double)(unint64_t)(*(uint64_t (**)(WebCore::MediaPlayerPrivateInterface *))(*(_QWORD *)this + 616))(this);
  v5 = (WebCore::PlatformTimeRanges *)(*(uint64_t (**)(WebCore::MediaPlayerPrivateInterface *))(*(_QWORD *)this + 592))(this);
  v10[0] = WebCore::PlatformTimeRanges::totalDuration(v5);
  v10[1] = v6;
  WTF::MediaTime::toDouble((WTF::MediaTime *)v10);
  v8 = v7 * v4;
  WTF::MediaTime::toDouble((WTF::MediaTime *)v11);
  return (unint64_t)(v8 / v9);
}

uint64_t WebCore::MediaPlayerPrivateAVFoundation::fileSize(WebCore::MediaPlayerPrivateAVFoundation *this)
{
  return (*(uint64_t (**)(WebCore::MediaPlayerPrivateAVFoundation *))(*(_QWORD *)this + 616))(this);
}

uint64_t WebCore::MediaPlayerPrivateInterface::ended(WebCore::MediaPlayerPrivateInterface *this)
{
  return 0;
}

uint64_t WebCore::MediaPlayerPrivateAVFoundationObjC::objCAVFoundationAVPlayer(WebCore::MediaPlayerPrivateAVFoundationObjC *this)
{
  return *((_QWORD *)this + 52);
}

uint64_t WebCore::MediaPlayerPrivateInterface::shouldIgnoreIntrinsicSize(WebCore::MediaPlayerPrivateInterface *this)
{
  return 0;
}

uint64_t WebCore::MediaPlayerPrivateInterface::identifier(WebCore::MediaPlayerPrivateInterface *this)
{
  return 0;
}

uint64_t WebCore::MediaPlayerPrivateAVFoundationObjC::supportsPlayAtHostTime(WebCore::MediaPlayerPrivateAVFoundationObjC *this)
{
  return 1;
}

uint64_t WebCore::MediaPlayerPrivateAVFoundationObjC::supportsPauseAtHostTime(WebCore::MediaPlayerPrivateAVFoundationObjC *this)
{
  return 1;
}

__n128 WebCore::MediaPlayerPrivateAVFoundationObjC::videoFrameMetadata@<Q0>(__n128 *this@<X0>, __n128 *a2@<X8>)
{
  __n128 result;
  __n128 v3;
  __n128 v4;

  result = this[65];
  v3 = this[67];
  a2[4] = this[66];
  a2[5] = v3;
  a2[6].n128_u64[0] = this[68].n128_u64[0];
  v4 = this[63];
  *a2 = this[62];
  a2[1] = v4;
  a2[2] = this[64];
  a2[3] = result;
  this[62].n128_u8[0] = 0;
  this[68].n128_u8[0] = 0;
  return result;
}

void WebCore::MediaPlayerPrivateAVFoundationObjC::setResourceOwner(uint64_t a1, const WTF::MachSendRight *a2)
{
  _BYTE v2[4];

  WTF::MachSendRight::MachSendRight((WTF::MachSendRight *)v2, a2);
  WTF::MachSendRight::operator=();
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v2);
}

void WebCore::MediaPlayerPrivateInterface::errorMessage(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::MediaPlayerPrivateInterface::setShouldCheckHardwareSupport(uint64_t this, char a2)
{
  *(_BYTE *)(this + 24) = a2;
  return this;
}

uint64_t WebCore::MediaPlayerPrivateAVFoundationObjC::currentTextTrack(WebCore::MediaPlayerPrivateAVFoundationObjC *this)
{
  return *((_QWORD *)this + 84);
}

BOOL WebCore::MediaPlayerPrivateAVFoundationObjC::isHLS(WebCore::MediaPlayerPrivateAVFoundationObjC *this)
{
  return *((_BYTE *)this + 957) && *((_BYTE *)this + 956) != 0;
}

uint64_t WebCore::MediaPlayerPrivateAVFoundationObjC::haveBeenAskedToPaint(WebCore::MediaPlayerPrivateAVFoundationObjC *this)
{
  return *((unsigned __int8 *)this + 967);
}

uint64_t `non-virtual thunk to'WebCore::MediaPlayerPrivateAVFoundation::logger(WebCore::MediaPlayerPrivateAVFoundation *this)
{
  return *((_QWORD *)this + 27);
}

const char *`non-virtual thunk to'WebCore::MediaPlayerPrivateAVFoundationObjC::logClassName(WebCore::MediaPlayerPrivateAVFoundationObjC *this)
{
  return "MediaPlayerPrivateAVFoundationObjC";
}

uint64_t `non-virtual thunk to'WebCore::MediaPlayerPrivateAVFoundation::logIdentifier(WebCore::MediaPlayerPrivateAVFoundation *this)
{
  return *((_QWORD *)this + 28);
}

void WebCore::MediaPlayerPrivateAVFoundationObjC::Factory::~Factory(WebCore::MediaPlayerPrivateAVFoundationObjC::Factory *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 0;
    v4 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v4)
    {
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v4);
        WTF::fastFree((WTF *)v4, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 0;
    v4 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v4)
    {
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v4);
        WTF::fastFree((WTF *)v4, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::MediaPlayerPrivateAVFoundationObjC::Factory::identifier(WebCore::MediaPlayerPrivateAVFoundationObjC::Factory *this)
{
  return 0;
}

uint64_t WebCore::MediaPlayerPrivateAVFoundationObjC::Factory::createMediaEnginePlayer@<X0>(WebCore::MediaPlayer *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v5;
  const WTF::Logger *v6;
  const void *v7;
  WebCore::VideoLayerManagerObjC *v8;
  uint64_t v9;
  WebCoreAVFMovieObserver *v10;
  uint64_t v11;
  WTF::Lock *v13;
  int v14;
  void *v15;
  WTF::Lock *v16;
  uint64_t v18;
  uint64_t v19;
  int v20;
  WebCoreAVFLoaderDelegate *v21;
  uint64_t v22;
  WTF::Lock *v24;
  int v25;
  WTF::MainThreadDispatcher *v26;
  void *v27;
  WTF::Lock *v28;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  WTF::Lock *v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;

  v5 = WTF::fastMalloc((WTF *)0x4A0);
  WebCore::MediaPlayerPrivateAVFoundation::MediaPlayerPrivateAVFoundation((WebCore::MediaPlayerPrivateAVFoundation *)v5, a1);
  *(_QWORD *)v5 = off_1E3204008;
  *(_QWORD *)(v5 + 56) = &unk_1E32046A8;
  *(_QWORD *)(v5 + 64) = &unk_1E32046D0;
  *(_OWORD *)(v5 + 408) = 0u;
  *(_OWORD *)(v5 + 424) = 0u;
  v6 = *(const WTF::Logger **)(v5 + 280);
  v7 = *(const void **)(v5 + 288);
  v8 = (WebCore::VideoLayerManagerObjC *)WTF::fastMalloc((WTF *)0x50);
  WebCore::VideoLayerManagerObjC::VideoLayerManagerObjC(v8, v6, v7);
  *(_QWORD *)(v5 + 440) = v9;
  *(_BYTE *)(v5 + 448) = 1;
  v10 = [WebCoreAVFMovieObserver alloc];
  v11 = *(_QWORD *)(v5 + 48);
  if (!v11)
  {
    v13 = 0;
    goto LABEL_13;
  }
  if (__ldaxr((unsigned __int8 *)v11))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v11))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v11);
LABEL_6:
  if (*(_QWORD *)(v11 + 24))
  {
    ++*(_QWORD *)(v11 + 16);
    v13 = (WTF::Lock *)v11;
  }
  else
  {
    v13 = 0;
  }
  v14 = __ldxr((unsigned __int8 *)v11);
  if (v14 != 1)
  {
    __clrex();
    goto LABEL_12;
  }
  if (__stlxr(0, (unsigned __int8 *)v11))
LABEL_12:
    WTF::Lock::unlockSlow((WTF::Lock *)v11);
LABEL_13:
  v39 = v13;
  v40 = v5;
  *(_QWORD *)(v5 + 456) = -[WebCoreAVFMovieObserver initWithPlayer:](v10, "initWithPlayer:", &v39);
  v16 = v39;
  v39 = 0;
  if (!v16)
    goto LABEL_26;
  if (__ldaxr((unsigned __int8 *)v16))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v16))
  {
    goto LABEL_18;
  }
  MEMORY[0x19AEA534C](v16);
LABEL_18:
  v18 = *((_QWORD *)v16 + 2) - 1;
  *((_QWORD *)v16 + 2) = v18;
  if (!v18)
  {
    v19 = *((_QWORD *)v16 + 1);
    v20 = __ldxr((unsigned __int8 *)v16);
    if (v20 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v16))
      {
        if (v19)
          goto LABEL_26;
LABEL_25:
        WTF::fastFree(v16, v15);
        goto LABEL_26;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow(v16);
    if (v19)
      goto LABEL_26;
    goto LABEL_25;
  }
  v37 = __ldxr((unsigned __int8 *)v16);
  if (v37 != 1)
  {
    __clrex();
    goto LABEL_61;
  }
  if (__stlxr(0, (unsigned __int8 *)v16))
LABEL_61:
    WTF::Lock::unlockSlow(v16);
LABEL_26:
  *(_QWORD *)(v5 + 464) = 0;
  *(_QWORD *)(v5 + 472) = 0;
  *(_DWORD *)(v5 + 479) = 0;
  *(_QWORD *)(v5 + 552) = 0;
  *(_OWORD *)(v5 + 488) = 0u;
  *(_OWORD *)(v5 + 504) = 0u;
  *(_OWORD *)(v5 + 520) = 0u;
  *(_OWORD *)(v5 + 536) = 0u;
  v21 = [WebCoreAVFLoaderDelegate alloc];
  v22 = *(_QWORD *)(v5 + 48);
  if (!v22)
  {
    v24 = 0;
    goto LABEL_38;
  }
  if (__ldaxr((unsigned __int8 *)v22))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v22))
  {
    goto LABEL_31;
  }
  MEMORY[0x19AEA534C](v22);
LABEL_31:
  if (*(_QWORD *)(v22 + 24))
  {
    ++*(_QWORD *)(v22 + 16);
    v24 = (WTF::Lock *)v22;
  }
  else
  {
    v24 = 0;
  }
  v25 = __ldxr((unsigned __int8 *)v22);
  if (v25 != 1)
  {
    __clrex();
    goto LABEL_37;
  }
  if (__stlxr(0, (unsigned __int8 *)v22))
LABEL_37:
    WTF::Lock::unlockSlow((WTF::Lock *)v22);
LABEL_38:
  v39 = v24;
  v40 = v5;
  v26 = -[WebCoreAVFLoaderDelegate initWithPlayer:](v21, "initWithPlayer:", &v39);
  *(_QWORD *)(v5 + 560) = v26;
  v28 = v39;
  v39 = 0;
  if (!v28)
    goto LABEL_51;
  if (__ldaxr((unsigned __int8 *)v28))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v28))
  {
    goto LABEL_43;
  }
  v26 = (WTF::MainThreadDispatcher *)MEMORY[0x19AEA534C](v28);
LABEL_43:
  v30 = *((_QWORD *)v28 + 2) - 1;
  *((_QWORD *)v28 + 2) = v30;
  if (!v30)
  {
    v31 = *((_QWORD *)v28 + 1);
    v32 = __ldxr((unsigned __int8 *)v28);
    if (v32 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v28))
      {
        if (v31)
          goto LABEL_51;
LABEL_50:
        v26 = (WTF::MainThreadDispatcher *)WTF::fastFree(v28, v27);
        goto LABEL_51;
      }
    }
    else
    {
      __clrex();
    }
    v26 = (WTF::MainThreadDispatcher *)WTF::Lock::unlockSlow(v28);
    if (v31)
      goto LABEL_51;
    goto LABEL_50;
  }
  v38 = __ldxr((unsigned __int8 *)v28);
  if (v38 != 1)
  {
    __clrex();
    goto LABEL_63;
  }
  if (__stlxr(0, (unsigned __int8 *)v28))
LABEL_63:
    v26 = (WTF::MainThreadDispatcher *)WTF::Lock::unlockSlow(v28);
LABEL_51:
  *(_QWORD *)(v5 + 581) = 0;
  *(_OWORD *)(v5 + 568) = 0u;
  *(_OWORD *)(v5 + 592) = 0u;
  *(_QWORD *)(v5 + 605) = 0;
  *(_QWORD *)(v5 + 712) = 0;
  *(_WORD *)(v5 + 720) = 0;
  *(_QWORD *)(v5 + 816) = 0;
  *(_OWORD *)(v5 + 616) = 0u;
  *(_OWORD *)(v5 + 632) = 0u;
  *(_OWORD *)(v5 + 648) = 0u;
  *(_OWORD *)(v5 + 664) = 0u;
  *(_OWORD *)(v5 + 680) = 0u;
  *(_OWORD *)(v5 + 693) = 0u;
  *(_OWORD *)(v5 + 728) = 0u;
  *(_OWORD *)(v5 + 744) = 0u;
  *(_OWORD *)(v5 + 760) = 0u;
  *(_OWORD *)(v5 + 776) = 0u;
  *(_QWORD *)(v5 + 824) = -1;
  *(_DWORD *)(v5 + 832) = 1;
  *(_BYTE *)(v5 + 836) = 0;
  *(_QWORD *)(v5 + 840) = 0;
  *(_DWORD *)(v5 + 848) = 10000000;
  *(_BYTE *)(v5 + 852) = 1;
  *(_QWORD *)(v5 + 856) = 0x7FF8000000000000;
  *(_DWORD *)(v5 + 864) = 0;
  *(_QWORD *)(v5 + 888) = 0;
  *(_OWORD *)(v5 + 872) = 0u;
  *(_BYTE *)(v5 + 896) = 0;
  *(_QWORD *)(v5 + 904) = 0x3FF0000000000000;
  *(_DWORD *)(v5 + 912) = 0;
  *(_OWORD *)(v5 + 920) = 0u;
  *(_OWORD *)(v5 + 936) = 0u;
  *(_OWORD *)(v5 + 947) = 0u;
  *(_BYTE *)(v5 + 963) = 1;
  *(_BYTE *)(v5 + 992) = 0;
  *(_BYTE *)(v5 + 1088) = 0;
  *(_BYTE *)(v5 + 1096) = 0;
  *(_BYTE *)(v5 + 1104) = 0;
  *(_BYTE *)(v5 + 1112) = 0;
  *(_BYTE *)(v5 + 1120) = 0;
  *(_QWORD *)(v5 + 977) = 0;
  *(_OWORD *)(v5 + 964) = 0u;
  *(_DWORD *)(v5 + 1144) = 0;
  *(_OWORD *)(v5 + 1128) = 0u;
  *(_QWORD *)(v5 + 1168) = 0;
  *(_OWORD *)(v5 + 1152) = 0u;
  v33 = WTF::MainThreadDispatcher::singleton(v26);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 32))(v33);
  *(_QWORD *)(v5 + 1176) = v33;
  v35 = *(_QWORD *)(v5 + 280);
  v36 = *(_QWORD *)(v5 + 288);
  v39 = (WTF::Lock *)"MediaPlayerPrivateAVFoundationObjC";
  v40 = 35;
  v41 = "MediaPlayerPrivateAVFoundationObjC";
  v42 = v36;
  if (*(_BYTE *)(v35 + 12))
    result = WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v39);
  *(_BYTE *)(v5 + 958) = *((_BYTE *)a1 + 227);
  *a2 = v5;
  return result;
}

void sub_1947655A0(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, const void **a11, const void **a12, WTF::Lock *a13)
{
  uint64_t v13;
  WTF **v14;
  WTF **v15;
  _DWORD **v16;
  unsigned int **v17;
  WTF **v18;
  const void **v19;
  uint64_t v20;
  WTF *v21;
  void *v22;
  WTF *v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  WTF *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  const void *v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  _QWORD *v37;
  uint64_t v38;
  const void *v39;
  const void *v40;
  const void *v41;
  const void *v42;
  const void *v43;
  const void *v44;
  _DWORD *v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  WTF *v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  WebCore::MediaSelectionGroupAVFObjC *v55;
  WebCore::MediaSelectionGroupAVFObjC *v56;
  uint64_t v57;
  WTF *v58;
  uint64_t v59;
  WTF *v60;
  const void *v61;
  WTF *v62;
  uint64_t v63;
  WTF *v64;
  uint64_t v65;
  const void *v66;
  uint64_t v67;
  uint64_t v68;
  WTF *v69;
  const void *v70;
  WTF *v71;
  const void *v72;
  const void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  BOOL v80;
  int v81;
  const void *v82;
  const void *v83;
  WebCore::QueuedVideoOutput *v84;
  const void *v85;
  unsigned int *v86;
  unsigned int *v87;
  unsigned int v88;
  unsigned int v89;
  WTF::StringImpl *v90;
  const void *v91;
  const void *v92;
  WTF *v93;
  const void *v94;
  const void *v95;
  const void *v96;
  const void *v97;
  unsigned int *v98;
  unsigned int *v99;
  unsigned int v100;
  unsigned int v101;
  const void *v102;
  const void *v103;
  const void *v104;
  const void *v105;
  void *v106;
  uint64_t j;
  uint64_t v108;
  unsigned int *v109;
  unsigned int *v110;
  unsigned int v111;
  unsigned int v112;
  const void *v113;
  unsigned int **v114;
  unsigned int **v115;
  unsigned int *v116;
  unsigned int *v117;
  unsigned int v118;
  unsigned int v119;
  unsigned int **v120;
  unsigned int **v121;
  unsigned int *v122;
  unsigned int *v123;
  unsigned int v124;
  unsigned int v125;
  uint64_t i;
  char *v127;
  unsigned int *v128;
  unsigned int *v129;
  unsigned int v130;
  unsigned int v131;
  WTF::StringImpl *v132;
  const void **v133;
  const void *v134;
  WTF::StringImpl *v135;
  const void **v136;
  const void *v137;
  WTF::StringImpl *v138;
  WTF *v139;
  void *v140;
  WTF *v141;
  void *v142;
  WTF *v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unsigned int *v148;
  unsigned int v149;
  unsigned int v150;
  uint64_t v151;
  WTF *v152;
  uint64_t v154;

  v20 = *(_QWORD *)(v13 + 1176);
  *(_QWORD *)(v13 + 1176) = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
  v21 = *(WTF **)(v13 + 1152);
  if (v21)
  {
    *(_QWORD *)(v13 + 1152) = 0;
    *(_DWORD *)(v13 + 1160) = 0;
    WTF::fastFree(v21, a2);
  }
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(v13 + 1144));
  v23 = *(WTF **)(v13 + 1136);
  *(_QWORD *)(v13 + 1136) = 0;
  if (v23)
  {
    v24 = *((_QWORD *)v23 + 1);
    *((_QWORD *)v23 + 1) = 0;
    if (v24)
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
    if (*(_QWORD *)v23)
    {
      *(_QWORD *)(*(_QWORD *)v23 + 8) = 0;
      v25 = *(unsigned int **)v23;
      *(_QWORD *)v23 = 0;
      if (v25)
      {
        do
        {
          v26 = __ldaxr(v25);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v25));
        if (!v27)
        {
          atomic_store(1u, v25);
          WTF::fastFree((WTF *)v25, v22);
        }
      }
    }
    else
    {
      *(_QWORD *)v23 = 0;
    }
    WTF::fastFree(v23, v22);
  }
  v28 = *v15;
  *v15 = 0;
  if (v28)
  {
    v29 = *((_QWORD *)v28 + 1);
    *((_QWORD *)v28 + 1) = 0;
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    if (*(_QWORD *)v28)
    {
      *(_QWORD *)(*(_QWORD *)v28 + 8) = 0;
      v30 = *(unsigned int **)v28;
      *(_QWORD *)v28 = 0;
      if (v30)
      {
        do
        {
          v31 = __ldaxr(v30);
          v32 = v31 - 1;
        }
        while (__stlxr(v32, v30));
        if (!v32)
        {
          atomic_store(1u, v30);
          WTF::fastFree((WTF *)v30, v22);
        }
      }
    }
    else
    {
      *(_QWORD *)v28 = 0;
    }
    WTF::fastFree(v28, v22);
  }
  v33 = *(const void **)(v13 + 976);
  *(_QWORD *)(v13 + 976) = 0;
  if (v33)
    CFRelease(v33);
  v34 = *(_QWORD *)(v13 + 880);
  *(_QWORD *)(v13 + 880) = 0;
  if (v34)
  {
    do
    {
      v35 = __ldaxr((unsigned int *)v34);
      v36 = v35 - 1;
    }
    while (__stlxr(v36, (unsigned int *)v34));
    if (!v36)
    {
      atomic_store(1u, (unsigned int *)v34);
      v146 = *(unsigned int *)(v34 + 20);
      if ((_DWORD)v146)
      {
        v147 = *(_QWORD *)(v34 + 8);
        v154 = v147 + 16 * v146;
        do
        {
          v148 = *(unsigned int **)(v147 + 8);
          *(_QWORD *)(v147 + 8) = 0;
          if (v148)
          {
            do
            {
              v149 = __ldaxr(v148);
              v150 = v149 - 1;
            }
            while (__stlxr(v150, v148));
            if (!v150)
            {
              atomic_store(1u, v148);
              v151 = v148[6];
              if ((_DWORD)v151 != -1)
                ((void (*)(WTF::Lock **, unsigned int *))off_1E3204BC8[v151])(&a13, v148 + 2);
              v148[6] = -1;
              WTF::fastFree((WTF *)v148, v22);
            }
          }
          v147 += 16;
        }
        while (v147 != v154);
      }
      v152 = *(WTF **)(v34 + 8);
      if ((WTF *)(v34 + 24) != v152 && v152 != 0)
      {
        *(_QWORD *)(v34 + 8) = 0;
        *(_DWORD *)(v34 + 16) = 0;
        WTF::fastFree(v152, v22);
      }
      WTF::fastFree((WTF *)v34, v22);
    }
  }
  v37 = *(_QWORD **)(v13 + 816);
  if (v37 == (_QWORD *)(v13 + 792))
  {
    v38 = 4;
    v37 = (_QWORD *)(v13 + 792);
  }
  else
  {
    if (!v37)
      goto LABEL_33;
    v38 = 5;
  }
  (*(void (**)(void))(*v37 + 8 * v38))();
LABEL_33:
  v39 = *(const void **)(v13 + 776);
  *(_QWORD *)(v13 + 776) = 0;
  if (v39)
    CFRelease(v39);
  v40 = *(const void **)(v13 + 768);
  *(_QWORD *)(v13 + 768) = 0;
  if (v40)
    CFRelease(v40);
  v41 = *(const void **)(v13 + 760);
  *(_QWORD *)(v13 + 760) = 0;
  if (v41)
    CFRelease(v41);
  v42 = *(const void **)(v13 + 752);
  *(_QWORD *)(v13 + 752) = 0;
  if (v42)
    CFRelease(v42);
  v43 = *(const void **)(v13 + 744);
  *(_QWORD *)(v13 + 744) = 0;
  if (v43)
    CFRelease(v43);
  v44 = *(const void **)(v13 + 736);
  *(_QWORD *)(v13 + 736) = 0;
  if (v44)
    CFRelease(v44);
  v45 = *v16;
  *v16 = 0;
  if (v45)
  {
    if (v45[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v45 + 8))(v45);
    else
      --v45[2];
  }
  v46 = *(unsigned int **)(v13 + 712);
  *(_QWORD *)(v13 + 712) = 0;
  if (v46)
  {
    do
    {
      v47 = __ldaxr(v46);
      v48 = v47 - 1;
    }
    while (__stlxr(v48, v46));
    if (!v48)
    {
      atomic_store(1u, v46);
      WTF::fastFree((WTF *)v46, v22);
    }
  }
  v49 = *(WTF **)(v13 + 688);
  if (v49)
  {
    v50 = *(unsigned int *)(v13 + 696);
    if ((_DWORD)v50)
    {
      for (i = 0; i != v50; ++i)
      {
        v127 = (char *)v49 + 16 * i;
        v128 = (unsigned int *)*((_QWORD *)v127 + 1);
        *((_QWORD *)v127 + 1) = 0;
        if (v128)
        {
          v129 = v128 + 2;
          do
          {
            v130 = __ldaxr(v129);
            v131 = v130 - 1;
          }
          while (__stlxr(v131, v129));
          if (!v131)
          {
            atomic_store(1u, v128 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v128 + 8))(v128);
          }
        }
        v132 = *(WTF::StringImpl **)v127;
        *(_QWORD *)v127 = 0;
        if (v132)
        {
          if (*(_DWORD *)v132 == 2)
            WTF::StringImpl::destroy(v132, (WTF::StringImpl *)v22);
          else
            *(_DWORD *)v132 -= 2;
        }
      }
    }
    WTF::fastFree(v49, v22);
  }
  v51 = *(unsigned int **)(v13 + 680);
  *(_QWORD *)(v13 + 680) = 0;
  if (v51)
  {
    v52 = v51 + 2;
    do
    {
      v53 = __ldaxr(v52);
      v54 = v53 - 1;
    }
    while (__stlxr(v54, v52));
    if (!v54)
    {
      atomic_store(1u, v51 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v51 + 8))(v51);
    }
  }
  v55 = *(WebCore::MediaSelectionGroupAVFObjC **)(v13 + 664);
  *(_QWORD *)(v13 + 664) = 0;
  if (v55)
  {
    if (*(_DWORD *)v55 == 1)
    {
      WebCore::MediaSelectionGroupAVFObjC::~MediaSelectionGroupAVFObjC(v55);
      WTF::fastFree(v141, v142);
    }
    else
    {
      --*(_DWORD *)v55;
    }
  }
  v56 = *(WebCore::MediaSelectionGroupAVFObjC **)(v13 + 656);
  *(_QWORD *)(v13 + 656) = 0;
  if (v56)
  {
    if (*(_DWORD *)v56 == 1)
    {
      WebCore::MediaSelectionGroupAVFObjC::~MediaSelectionGroupAVFObjC(v56);
      WTF::fastFree(v143, v144);
    }
    else
    {
      --*(_DWORD *)v56;
    }
  }
  v57 = *(unsigned int *)(v13 + 652);
  if ((_DWORD)v57)
  {
    v114 = *(unsigned int ***)(v13 + 640);
    v115 = &v114[v57];
    do
    {
      v116 = *v114;
      *v114 = 0;
      if (v116)
      {
        v117 = v116 + 2;
        do
        {
          v118 = __ldaxr(v117);
          v119 = v118 - 1;
        }
        while (__stlxr(v119, v117));
        if (!v119)
        {
          atomic_store(1u, v116 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v116 + 8))(v116);
        }
      }
      ++v114;
    }
    while (v114 != v115);
  }
  v58 = *(WTF **)(v13 + 640);
  if (v58)
  {
    *(_QWORD *)(v13 + 640) = 0;
    *(_DWORD *)(v13 + 648) = 0;
    WTF::fastFree(v58, v22);
  }
  v59 = *(unsigned int *)(v13 + 636);
  if ((_DWORD)v59)
  {
    v120 = *(unsigned int ***)(v13 + 624);
    v121 = &v120[v59];
    do
    {
      v122 = *v120;
      *v120 = 0;
      if (v122)
      {
        v123 = v122 + 2;
        do
        {
          v124 = __ldaxr(v123);
          v125 = v124 - 1;
        }
        while (__stlxr(v125, v123));
        if (!v125)
        {
          atomic_store(1u, v122 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v122 + 8))(v122);
        }
      }
      ++v120;
    }
    while (v120 != v121);
  }
  v60 = *(WTF **)(v13 + 624);
  if (v60)
  {
    *(_QWORD *)(v13 + 624) = 0;
    *(_DWORD *)(v13 + 632) = 0;
    WTF::fastFree(v60, v22);
  }
  v61 = *v19;
  *v19 = 0;
  if (v61)
    CFRelease(v61);
  v62 = *v18;
  if (*v18)
  {
    v63 = *(unsigned int *)(v13 + 600);
    if ((_DWORD)v63)
    {
      v133 = (const void **)((char *)v62 + 8);
      do
      {
        v134 = *v133;
        *v133 = 0;
        if (v134)
          CFRelease(v134);
        v135 = (WTF::StringImpl *)*(v133 - 1);
        *(v133 - 1) = 0;
        if (v135)
        {
          if (*(_DWORD *)v135 == 2)
            WTF::StringImpl::destroy(v135, (WTF::StringImpl *)v22);
          else
            *(_DWORD *)v135 -= 2;
        }
        v133 += 2;
        --v63;
      }
      while (v63);
    }
    WTF::fastFree(v62, v22);
  }
  v64 = *v14;
  if (*v14)
  {
    v65 = *(unsigned int *)(v13 + 576);
    if ((_DWORD)v65)
    {
      v136 = (const void **)((char *)v64 + 8);
      do
      {
        v137 = *v136;
        *v136 = 0;
        if (v137)
          CFRelease(v137);
        v138 = (WTF::StringImpl *)*(v136 - 1);
        *(v136 - 1) = 0;
        if (v138)
        {
          if (*(_DWORD *)v138 == 2)
            WTF::StringImpl::destroy(v138, (WTF::StringImpl *)v22);
          else
            *(_DWORD *)v138 -= 2;
        }
        v136 += 2;
        --v65;
      }
      while (v65);
    }
    WTF::fastFree(v64, v22);
  }
  v66 = *(const void **)(v13 + 560);
  *(_QWORD *)(v13 + 560) = 0;
  if (v66)
    CFRelease(v66);
  v67 = *(_QWORD *)(v13 + 552);
  if (v67)
  {
    v68 = *(unsigned int *)(v67 - 4);
    if ((_DWORD)v68)
    {
      for (j = 0; j != v68; ++j)
      {
        v108 = v67 + 16 * j;
        if (*(_QWORD *)v108 != -1)
        {
          v109 = *(unsigned int **)(v108 + 8);
          *(_QWORD *)(v108 + 8) = 0;
          if (v109)
          {
            v110 = v109 + 2;
            do
            {
              v111 = __ldaxr(v110);
              v112 = v111 - 1;
            }
            while (__stlxr(v112, v110));
            if (!v112)
            {
              atomic_store(1u, v109 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v109 + 8))(v109);
            }
          }
          v113 = *(const void **)v108;
          *(_QWORD *)v108 = 0;
          if (v113)
            CFRelease(v113);
        }
      }
    }
    WTF::fastFree((WTF *)(v67 - 16), v22);
  }
  v69 = *(WTF **)(v13 + 544);
  *(_QWORD *)(v13 + 544) = 0;
  if (v69)
  {
    v70 = *(const void **)v69;
    *(_QWORD *)v69 = 0;
    if (v70)
      CFRelease(v70);
    WTF::fastFree(v69, v22);
  }
  v71 = *(WTF **)(v13 + 536);
  *(_QWORD *)(v13 + 536) = 0;
  if (v71)
  {
    v72 = (const void *)*((_QWORD *)v71 + 12);
    *((_QWORD *)v71 + 12) = 0;
    if (v72)
      CFRelease(v72);
    v73 = (const void *)*((_QWORD *)v71 + 11);
    *((_QWORD *)v71 + 11) = 0;
    if (v73)
      CFRelease(v73);
    WTF::fastFree(v71, v22);
  }
  v74 = *(_QWORD *)(v13 + 528);
  *(_QWORD *)(v13 + 528) = 0;
  if (!v74)
  {
LABEL_113:
    v82 = *(const void **)(v13 + 520);
    *(_QWORD *)(v13 + 520) = 0;
    if (v82)
      CFRelease(v82);
    v83 = *(const void **)(v13 + 512);
    *(_QWORD *)(v13 + 512) = 0;
    if (v83)
      CFRelease(v83);
    v84 = *(WebCore::QueuedVideoOutput **)(v13 + 504);
    *(_QWORD *)(v13 + 504) = 0;
    if (v84)
    {
      if (*(_DWORD *)v84 == 1)
      {
        WebCore::QueuedVideoOutput::~QueuedVideoOutput(v84);
        WTF::fastFree(v139, v140);
      }
      else
      {
        --*(_DWORD *)v84;
      }
    }
    v85 = *(const void **)(v13 + 496);
    *(_QWORD *)(v13 + 496) = 0;
    if (v85)
      CFRelease(v85);
    v86 = *v17;
    *v17 = 0;
    if (v86)
    {
      v87 = v86 + 2;
      do
      {
        v88 = __ldaxr(v87);
        v89 = v88 - 1;
      }
      while (__stlxr(v89, v87));
      if (!v89)
      {
        atomic_store(1u, v86 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v86 + 32))(v86);
      }
    }
    v90 = *(WTF::StringImpl **)(v13 + 472);
    *(_QWORD *)(v13 + 472) = 0;
    if (v90)
    {
      if (*(_DWORD *)v90 == 2)
        WTF::StringImpl::destroy(v90, (WTF::StringImpl *)v22);
      else
        *(_DWORD *)v90 -= 2;
    }
    v91 = *a11;
    *a11 = 0;
    if (v91)
      CFRelease(v91);
    v92 = *(const void **)(v13 + 456);
    *(_QWORD *)(v13 + 456) = 0;
    if (v92)
      CFRelease(v92);
    v93 = *(WTF **)(v13 + 440);
    *(_QWORD *)(v13 + 440) = 0;
    if (v93)
    {
      v94 = (const void *)*((_QWORD *)v93 + 9);
      *((_QWORD *)v93 + 9) = 0;
      if (v94)
        CFRelease(v94);
      v95 = (const void *)*((_QWORD *)v93 + 8);
      *((_QWORD *)v93 + 8) = 0;
      if (v95)
        CFRelease(v95);
      v96 = (const void *)*((_QWORD *)v93 + 5);
      *((_QWORD *)v93 + 5) = 0;
      if (v96)
        CFRelease(v96);
      v97 = (const void *)*((_QWORD *)v93 + 4);
      *((_QWORD *)v93 + 4) = 0;
      if (v97)
        CFRelease(v97);
      v98 = (unsigned int *)*((_QWORD *)v93 + 2);
      *((_QWORD *)v93 + 2) = 0;
      if (v98)
      {
        v99 = v98 + 2;
        do
        {
          v100 = __ldaxr(v99);
          v101 = v100 - 1;
        }
        while (__stlxr(v101, v99));
        if (!v101)
        {
          atomic_store(1u, v98 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v98 + 8))(v98);
        }
      }
      WTF::fastFree(v93, v22);
    }
    v102 = *(const void **)(v13 + 432);
    *(_QWORD *)(v13 + 432) = 0;
    if (v102)
      CFRelease(v102);
    v103 = *(const void **)(v13 + 424);
    *(_QWORD *)(v13 + 424) = 0;
    if (v103)
      CFRelease(v103);
    v104 = *(const void **)(v13 + 416);
    *(_QWORD *)(v13 + 416) = 0;
    if (v104)
      CFRelease(v104);
    v105 = *a12;
    *a12 = 0;
    if (v105)
      CFRelease(v105);
    WebCore::MediaPlayerPrivateAVFoundation::~MediaPlayerPrivateAVFoundation((WebCore::MediaPlayerPrivateAVFoundation *)v13, (WTF::StringImpl *)v22);
    WTF::fastFree((WTF *)v13, v106);
    _Unwind_Resume(a1);
  }
  v75 = *(_QWORD *)(v74 + 8);
  if (__ldaxr((unsigned __int8 *)v75))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v75))
  {
LABEL_101:
    v77 = *(_QWORD *)(v75 + 8);
    v78 = v77 - 1;
    *(_QWORD *)(v75 + 8) = v77 - 1;
    if (v77 == 1)
    {
      v145 = *(_QWORD *)(v75 + 16);
      v79 = *(_QWORD *)(v75 + 24);
      *(_QWORD *)(v75 + 24) = 0;
      v80 = v145 != 0;
    }
    else
    {
      v79 = 0;
      v80 = 1;
    }
    v81 = __ldxr((unsigned __int8 *)v75);
    if (v81 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v75))
      {
LABEL_108:
        if (!v78)
        {
          if (v79)
            (*(void (**)(uint64_t))(*(_QWORD *)v79 + 8))(v79);
          if (!v80)
            WTF::fastFree((WTF *)v75, v22);
        }
        goto LABEL_113;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v75);
    goto LABEL_108;
  }
  MEMORY[0x19AEA534C](v75);
  goto LABEL_101;
}

WTF::StringImpl **WebCore::MediaPlayerPrivateAVFoundationObjC::Factory::getSupportedTypes(uint64_t a1, WTF::StringImpl ***a2)
{
  WTF::StringImpl **result;
  WTF::StringImpl *v4;
  WTF::StringImpl **v5;

  {
    if ((_BYTE)xmmword_1ECE88A00)
      goto LABEL_4;
  }
  else
  {
    unk_1ECE88A20 = 0u;
    xmmword_1ECE88A00 = 0u;
    unk_1ECE88A10 = 0u;
    WebCore::AVAssetMIMETypeCache::singleton(void)::cache = (uint64_t)off_1E334D010;
    qword_1ECE88A30 = 0;
  }
  qword_1ECE889F8 = 0;
  LOBYTE(xmmword_1ECE88A00) = 1;
  result = (WTF::StringImpl **)(*(uint64_t (**)(uint64_t *, uint64_t *))(WebCore::AVAssetMIMETypeCache::singleton(void)::cache
                                                                               + 56))(&WebCore::AVAssetMIMETypeCache::singleton(void)::cache, &qword_1ECE889F8);
  if (!(_BYTE)xmmword_1ECE88A00)
  {
    __break(1u);
    return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(result, v4);
  }
LABEL_4:
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)&v5, (_QWORD **)&qword_1ECE889F8);
  result = *a2;
  *a2 = v5;
  v5 = result;
  if (result)
    return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(result, v4);
  return result;
}

uint64_t WebCore::MediaPlayerPrivateAVFoundationObjC::Factory::supportsTypeAndCodecs(WebCore::MediaPlayerPrivateAVFoundationObjC::Factory *this, const WebCore::MediaEngineSupportParameters *a2, double a3, double a4, float a5)
{
  uint64_t result;
  const WTF::StringImpl *v7;

  if (*((unsigned __int8 *)a2 + 56) | *((unsigned __int8 *)a2 + 57))
    return 0;
  result = WebCore::contentTypeMeetsContainerAndCodecTypeRequirements(a2, (uint64_t)a2 + 80, (uint64_t)a2 + 104, a3, a4, a5);
  if ((_DWORD)result)
  {
    {
      qword_1ECE88A28 = 0;
      qword_1ECE88A30 = 0;
      unk_1ECE88A18 = 0u;
      *(__int128 *)((char *)&xmmword_1ECE88A00 + 8) = 0u;
      *(_OWORD *)&qword_1ECE889F8 = 0u;
      WebCore::AVAssetMIMETypeCache::singleton(void)::cache = (uint64_t)off_1E334D010;
    }
    result = WebCore::MIMETypeCache::canDecodeType((WebCore::MIMETypeCache *)&WebCore::AVAssetMIMETypeCache::singleton(void)::cache, (WTF::StringImpl **)a2, v7);
    if ((_DWORD)result == 1)
      return WebCore::contentTypeMeetsHardwareDecodeRequirements((uint64_t)a2, (uint64_t)a2 + 64);
  }
  return result;
}

PAL *WebCore::MediaPlayerPrivateAVFoundationObjC::Factory::originsInMediaCache@<X0>(PAL *this@<X0>, const WTF::String *a2@<X1>, uint64_t *a3@<X8>)
{
  void *v5;
  void *v6;
  __CFString *v7;
  void *v8;
  PAL *v9;
  uint64_t v10;
  PAL *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  _BYTE v15[24];
  WTF::StringImpl *v16;
  char v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  WTF::StringImpl *v22[3];
  int v23;
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  *a3 = 0;
  if (*(_QWORD *)a2 && *(_DWORD *)(*(_QWORD *)a2 + 4))
  {
    v5 = (void *)PAL::getAVAssetCacheClass[0](this);
    v6 = (void *)MEMORY[0x1E0C99E98];
    v7 = *(_QWORD *)a2 ? (__CFString *)WTF::StringImpl::operator NSString *() : &stru_1E3487BC0;
    this = (PAL *)objc_msgSend(v5, "assetCacheWithURL:", objc_msgSend(v6, "fileURLWithPath:isDirectory:", v7, 1));
    if (this)
    {
      v20 = 0u;
      v21 = 0u;
      v18 = 0u;
      v19 = 0u;
      v8 = (void *)-[PAL allKeys](this, "allKeys");
      this = (PAL *)objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v18, v24, 16);
      v9 = this;
      if (this)
      {
        v10 = *(_QWORD *)v19;
        do
        {
          v11 = 0;
          do
          {
            if (*(_QWORD *)v19 != v10)
              objc_enumerationMutation(v8);
            MEMORY[0x19AEA5508](v22, *(_QWORD *)(*((_QWORD *)&v18 + 1) + 8 * (_QWORD)v11));
            MEMORY[0x19AEA52D4](&v16, v22, 0);
            v13 = v22[0];
            v22[0] = 0;
            if (v13)
            {
              if (*(_DWORD *)v13 == 2)
                WTF::StringImpl::destroy(v13, v12);
              else
                *(_DWORD *)v13 -= 2;
            }
            if ((v17 & 1) != 0)
            {
              if (WebCore::SecurityOriginData::shouldTreatAsOpaqueOrigin((WebCore::SecurityOriginData *)&v16, v12))
                WebCore::SecurityOriginData::createOpaque((uint64_t)v22);
              else
                WebCore::SecurityOriginData::fromURLWithoutStrictOpaqueness((WebCore::SecurityOriginData *)&v16, (uint64_t)v22);
              WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::add(a3, (uint64_t)v22, (uint64_t)v15);
              if (v23 != -1)
                ((void (*)(_BYTE *, WTF::StringImpl **))off_1E3204898[v23])(v15, v22);
            }
            v14 = v16;
            v16 = 0;
            if (v14)
            {
              if (*(_DWORD *)v14 == 2)
                WTF::StringImpl::destroy(v14, v12);
              else
                *(_DWORD *)v14 -= 2;
            }
            v11 = (PAL *)((char *)v11 + 1);
          }
          while (v9 != v11);
          this = (PAL *)objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v18, v24, 16);
          v9 = this;
        }
        while (this);
      }
    }
  }
  return this;
}

uint64_t sub_194766418(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,WTF::StringImpl *a26,uint64_t a27,uint64_t a28,int a29)
{
  uint64_t *v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v31 = *v29;
  if (!*v29)
LABEL_2:
    _Unwind_Resume(exception_object);
  v32 = *(unsigned int *)(v31 - 4);
  if (!(_DWORD)v32)
  {
LABEL_11:
    WTF::fastFree((WTF *)(v31 - 16), a2);
    goto LABEL_2;
  }
  v33 = *v29;
  while (1)
  {
    v34 = *(unsigned int *)(v33 + 24);
    if ((_DWORD)v34 == -1)
      break;
    a12 = &a26;
    if ((((uint64_t (*)(WTF::StringImpl ***, uint64_t))off_1E32048A8[v34])(&a12, v33) & 1) == 0)
    {
      v35 = *(unsigned int *)(v33 + 24);
      if ((_DWORD)v35 != -1)
        ((void (*)(WTF::StringImpl ***, uint64_t))off_1E3204898[v35])(&a12, v33);
      *(_DWORD *)(v33 + 24) = -1;
    }
    v33 += 32;
    if (!--v32)
      goto LABEL_11;
  }
  v36 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::MediaPlayerPrivateAVFoundationObjC::Factory::clearMediaCache(v36);
}

void WebCore::MediaPlayerPrivateAVFoundationObjC::Factory::clearMediaCache(PAL *a1, uint64_t a2, double a3)
{
  void *v5;
  void *v6;
  __CFString *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  double v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t j;
  void *v25;
  void *v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t k;
  id v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _BYTE v46[128];
  _BYTE v47[128];
  _QWORD v48[3];
  _BYTE v49[128];
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)a2 && *(_DWORD *)(*(_QWORD *)a2 + 4))
  {
    v5 = (void *)PAL::getAVAssetCacheClass[0](a1);
    v6 = (void *)MEMORY[0x1E0C99E98];
    v7 = *(_QWORD *)a2 ? (__CFString *)WTF::StringImpl::operator NSString *() : &stru_1E3487BC0;
    v8 = (void *)objc_msgSend(v5, "assetCacheWithURL:", objc_msgSend(v6, "fileURLWithPath:isDirectory:", v7, 1));
    if (v8)
    {
      v9 = v8;
      v44 = 0u;
      v45 = 0u;
      v42 = 0u;
      v43 = 0u;
      v10 = (void *)objc_msgSend(v8, "allKeys");
      v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v42, v49, 16);
      if (v11)
      {
        v12 = *(_QWORD *)v43;
        do
        {
          for (i = 0; i != v11; ++i)
          {
            if (*(_QWORD *)v43 != v12)
              objc_enumerationMutation(v10);
            v14 = *(_QWORD *)(*((_QWORD *)&v42 + 1) + 8 * i);
            objc_msgSend((id)objc_msgSend(v9, "lastModifiedDateOfEntryForKey:", v14), "timeIntervalSince1970");
            if (v15 > a3)
              objc_msgSend(v9, "removeEntryForKey:", v14);
          }
          v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v42, v49, 16);
        }
        while (v11);
      }
      v16 = (void *)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
      v17 = objc_msgSend(v9, "URL");
      if (a3 <= 0.0)
      {
        objc_msgSend(v16, "removeItemAtURL:error:", v17, 0);
      }
      else
      {
        v18 = *MEMORY[0x1E0C99A90];
        v19 = *MEMORY[0x1E0C998D8];
        v48[0] = *MEMORY[0x1E0C99A90];
        v48[1] = v19;
        v32 = v19;
        v33 = *MEMORY[0x1E0C99A18];
        v48[2] = *MEMORY[0x1E0C99A18];
        v20 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v48, 3);
        v21 = (void *)objc_msgSend(v16, "enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:", v17, v20, 1, 0);
        v31 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
        v40 = 0u;
        v41 = 0u;
        v38 = 0u;
        v39 = 0u;
        v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v38, v47, 16);
        if (v22)
        {
          v23 = *(_QWORD *)v39;
          do
          {
            for (j = 0; j != v22; ++j)
            {
              if (*(_QWORD *)v39 != v23)
                objc_enumerationMutation(v21);
              v25 = *(void **)(*((_QWORD *)&v38 + 1) + 8 * j);
              v26 = (void *)objc_msgSend(v25, "resourceValuesForKeys:error:", v20, 0);
              if ((objc_msgSend((id)objc_msgSend(v26, "objectForKeyedSubscript:", v18), "hasPrefix:", CFSTR("CachedMedia-")) & 1) != 0)
              {
                if (objc_msgSend((id)objc_msgSend(v26, "objectForKeyedSubscript:", v33), "BOOLValue"))
                {
                  objc_msgSend((id)objc_msgSend(v26, "objectForKeyedSubscript:", v32), "timeIntervalSince1970");
                  if (v27 > a3)
                    objc_msgSend(v31, "addObject:", v25);
                }
              }
            }
            v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v38, v47, 16);
          }
          while (v22);
        }
        v36 = 0u;
        v37 = 0u;
        v34 = 0u;
        v35 = 0u;
        v28 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &v34, v46, 16);
        if (v28)
        {
          v29 = *(_QWORD *)v35;
          do
          {
            for (k = 0; k != v28; ++k)
            {
              if (*(_QWORD *)v35 != v29)
                objc_enumerationMutation(v31);
              objc_msgSend(v16, "removeItemAtURL:error:", *(_QWORD *)(*((_QWORD *)&v34 + 1) + 8 * k), 0);
            }
            v28 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &v34, v46, 16);
          }
          while (v28);
        }
        if (v31)
          CFRelease(v31);
      }
    }
  }
}

void sub_1947668D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  const void *v10;

  if (v10)
    CFRelease(v10);
  _Unwind_Resume(exception_object);
}

PAL *WebCore::MediaPlayerPrivateAVFoundationObjC::Factory::clearMediaCacheForOrigins(PAL *result, uint64_t a2, uint64_t *a3)
{
  void *v5;
  void *v6;
  __CFString *v7;
  PAL *v8;
  void *v9;
  PAL *v10;
  uint64_t v11;
  PAL *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  int v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL4 v23;
  BOOL v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  int i;
  int isNull;
  WTF::StringImpl *v31;
  char v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  char v37;
  char *v38;
  WTF::StringImpl *v39[3];
  int v40;
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)a2 && *(_DWORD *)(*(_QWORD *)a2 + 4))
  {
    v5 = (void *)PAL::getAVAssetCacheClass[0](result);
    v6 = (void *)MEMORY[0x1E0C99E98];
    v7 = *(_QWORD *)a2 ? (__CFString *)WTF::StringImpl::operator NSString *() : &stru_1E3487BC0;
    result = (PAL *)objc_msgSend(v5, "assetCacheWithURL:", objc_msgSend(v6, "fileURLWithPath:isDirectory:", v7, 1));
    if (result)
    {
      v8 = result;
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      v9 = (void *)-[PAL allKeys](result, "allKeys");
      result = (PAL *)objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v33, v41, 16);
      v10 = result;
      if (result)
      {
        v11 = *(_QWORD *)v34;
        while (2)
        {
          v12 = 0;
          do
          {
            if (*(_QWORD *)v34 != v11)
              objc_enumerationMutation(v9);
            v13 = *(_QWORD *)(*((_QWORD *)&v33 + 1) + 8 * (_QWORD)v12);
            MEMORY[0x19AEA5508](v39, v13);
            MEMORY[0x19AEA52D4](&v31, v39, 0);
            v15 = v39[0];
            v39[0] = 0;
            if (v15)
            {
              if (*(_DWORD *)v15 == 2)
                WTF::StringImpl::destroy(v15, v14);
              else
                *(_DWORD *)v15 -= 2;
            }
            if ((v32 & 1) != 0)
            {
              if (WebCore::SecurityOriginData::shouldTreatAsOpaqueOrigin((WebCore::SecurityOriginData *)&v31, v14))
                WebCore::SecurityOriginData::createOpaque((uint64_t)v39);
              else
                WebCore::SecurityOriginData::fromURLWithoutStrictOpaqueness((WebCore::SecurityOriginData *)&v31, (uint64_t)v39);
              v16 = *a3;
              if (*a3)
              {
                v27 = *(_DWORD *)(v16 - 8);
                v18 = WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::SecurityOriginData>,WTF::DefaultHash<WebCore::SecurityOriginData>>::hash<WebCore::SecurityOriginData>((uint64_t)v39);
                for (i = 0; ; v18 = i + v28)
                {
                  v28 = v18 & v27;
                  v19 = (unsigned int *)(v16 + 32 * v28);
                  isNull = WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v19);
                  if ((isNull & 1) != 0)
                  {
LABEL_53:
                    LODWORD(v16) = isNull ^ 1;
                    goto LABEL_19;
                  }
                  v20 = v19[6];
                  if ((_DWORD)v20 == -1)
                    break;
                  v38 = &v37;
                  if ((((uint64_t (*)(char **, unsigned int *))off_1E32048A8[v20])(&v38, v19) & 1) == 0)
                  {
                    if (v19 == (unsigned int *)v39)
                      goto LABEL_53;
                    v21 = v19[6];
                    v23 = v40 == (_DWORD)v21 && v40 != -1;
                    if ((_DWORD)v21 == -1 || !v23)
                    {
                      if ((_DWORD)v21 == -1)
                        v25 = v40 == -1;
                      else
                        v25 = v23;
                      if (v25)
                        goto LABEL_53;
                    }
                    else
                    {
                      v38 = &v37;
                      v26 = ((uint64_t (*)(char **, unsigned int *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18SecurityOriginData5TupleENSC_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINSC_26OpaqueOriginIdentifierTypeENSG_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEESP_EEEDcmOT_DpOT0____fdiagonal[v21])(&v38, v19, v39);
                      if ((v26 & 1) != 0)
                        goto LABEL_53;
                    }
                  }
                  ++i;
                }
                result = (PAL *)std::__throw_bad_variant_access[abi:sn180100]();
                __break(1u);
                return result;
              }
LABEL_19:
              if (v40 != -1)
                ((void (*)(char **, WTF::StringImpl **))off_1E3204898[v40])(&v38, v39);
              if ((_DWORD)v16)
                -[PAL removeEntryForKey:](v8, "removeEntryForKey:", v13);
            }
            v17 = v31;
            v31 = 0;
            if (v17)
            {
              if (*(_DWORD *)v17 == 2)
                WTF::StringImpl::destroy(v17, v14);
              else
                *(_DWORD *)v17 -= 2;
            }
            v12 = (PAL *)((char *)v12 + 1);
          }
          while (v12 != v10);
          result = (PAL *)objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v33, v41, 16);
          v10 = result;
          if (result)
            continue;
          break;
        }
      }
    }
  }
  return result;
}

void sub_194766C44(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,uint64_t a28,WTF::StringImpl *a29,uint64_t a30,uint64_t a31,unsigned int a32)
{
  uint64_t v32;

  if (a32 != -1)
    (*(void (**)(char *, WTF::StringImpl **))(v32 + 8 * a32))(&a27, &a29);
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, a2);
    else
      *(_DWORD *)a12 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::MediaPlayerPrivateAVFoundationObjC::Factory::supportsKeySystem(WebCore::MediaPlayerPrivateAVFoundationObjC::Factory *this, const WTF::String *a2, WTF::StringImpl **a3)
{
  uint64_t result;
  int v4;
  const WTF::StringImpl *v6;
  uint64_t v7;
  int v8;
  WTF::StringImpl *v9;
  int v10;
  uint64_t v11;
  int v12;

  result = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
    return result;
  v4 = *(_DWORD *)(result + 4);
  if (!v4)
    return 0;
  if (v4 == 16)
  {
    v7 = *(_QWORD *)(result + 8);
    if ((*(_BYTE *)(result + 16) & 4) != 0)
    {
      if ((*(_BYTE *)v7 & 0xDF) != 0x4F
        || (*(_BYTE *)(v7 + 1) & 0xDF) != 0x52
        || (*(_BYTE *)(v7 + 2) & 0xDF) != 0x47
        || (*(_BYTE *)(v7 + 3) & 0xDF) != 0xE
        || (*(_BYTE *)(v7 + 4) & 0xDF) != 0x57
        || (*(_BYTE *)(v7 + 5) & 0xDF) != 0x13
        || (*(_BYTE *)(v7 + 6) & 0xDF) != 0x43
        || (*(_BYTE *)(v7 + 7) & 0xDF) != 0xE
        || (*(_BYTE *)(v7 + 8) & 0xDF) != 0x43
        || (*(_BYTE *)(v7 + 9) & 0xDF) != 0x4C
        || (*(_BYTE *)(v7 + 10) & 0xDF) != 0x45
        || (*(_BYTE *)(v7 + 11) & 0xDF) != 0x41
        || (*(_BYTE *)(v7 + 12) & 0xDF) != 0x52
        || (*(_BYTE *)(v7 + 13) & 0xDF) != 0x4B
        || (*(_BYTE *)(v7 + 14) & 0xDF) != 0x45)
      {
        goto LABEL_6;
      }
      v8 = *(unsigned __int8 *)(v7 + 15);
    }
    else
    {
      if ((*(_WORD *)v7 & 0xFFDF) != 0x4F
        || (*(_WORD *)(v7 + 2) & 0xFFDF) != 0x52
        || (*(_WORD *)(v7 + 4) & 0xFFDF) != 0x47
        || (*(_WORD *)(v7 + 6) & 0xFFDF) != 0xE
        || (*(_WORD *)(v7 + 8) & 0xFFDF) != 0x57
        || (*(_WORD *)(v7 + 10) & 0xFFDF) != 0x13
        || (*(_WORD *)(v7 + 12) & 0xFFDF) != 0x43
        || (*(_WORD *)(v7 + 14) & 0xFFDF) != 0xE
        || (*(_WORD *)(v7 + 16) & 0xFFDF) != 0x43
        || (*(_WORD *)(v7 + 18) & 0xFFDF) != 0x4C
        || (*(_WORD *)(v7 + 20) & 0xFFDF) != 0x45
        || (*(_WORD *)(v7 + 22) & 0xFFDF) != 0x41
        || (*(_WORD *)(v7 + 24) & 0xFFDF) != 0x52
        || (*(_WORD *)(v7 + 26) & 0xFFDF) != 0x4B
        || (*(_WORD *)(v7 + 28) & 0xFFDF) != 0x45)
      {
        goto LABEL_6;
      }
      v8 = *(unsigned __int16 *)(v7 + 30);
    }
    if ((v8 & 0xFFFFFFDF) == 0x59)
    {
      v9 = *a3;
      if (*a3)
      {
        v10 = *((_DWORD *)v9 + 1);
        if (v10)
        {
          if (v10 != 21)
            return 0;
          v11 = *((_QWORD *)v9 + 1);
          if ((*((_BYTE *)v9 + 16) & 4) != 0)
          {
            if ((*(_BYTE *)v11 & 0xDF) != 0x41
              || (*(_BYTE *)(v11 + 1) & 0xDF) != 0x50
              || (*(_BYTE *)(v11 + 2) & 0xDF) != 0x50
              || (*(_BYTE *)(v11 + 3) & 0xDF) != 0x4C
              || (*(_BYTE *)(v11 + 4) & 0xDF) != 0x49
              || (*(_BYTE *)(v11 + 5) & 0xDF) != 0x43
              || (*(_BYTE *)(v11 + 6) & 0xDF) != 0x41
              || (*(_BYTE *)(v11 + 7) & 0xDF) != 0x54
              || (*(_BYTE *)(v11 + 8) & 0xDF) != 0x49
              || (*(_BYTE *)(v11 + 9) & 0xDF) != 0x4F
              || (*(_BYTE *)(v11 + 10) & 0xDF) != 0x4E
              || (*(_BYTE *)(v11 + 11) & 0xDF) != 0xF
              || (*(_BYTE *)(v11 + 12) & 0xDF) != 0x58
              || (*(_BYTE *)(v11 + 13) & 0xDF) != 0xD
              || (*(_BYTE *)(v11 + 14) & 0xDF) != 0x4D
              || (*(_BYTE *)(v11 + 15) & 0xDF) != 0x50
              || (*(_BYTE *)(v11 + 16) & 0xDF) != 0x45
              || (*(_BYTE *)(v11 + 17) & 0xDF) != 0x47
              || (*(_BYTE *)(v11 + 18) & 0xDF) != 0x55
              || (*(_BYTE *)(v11 + 19) & 0xDF) != 0x52)
            {
              return 0;
            }
            v12 = *(unsigned __int8 *)(v11 + 20);
          }
          else
          {
            if ((*(_WORD *)v11 & 0xFFDF) != 0x41
              || (*(_WORD *)(v11 + 2) & 0xFFDF) != 0x50
              || (*(_WORD *)(v11 + 4) & 0xFFDF) != 0x50
              || (*(_WORD *)(v11 + 6) & 0xFFDF) != 0x4C
              || (*(_WORD *)(v11 + 8) & 0xFFDF) != 0x49
              || (*(_WORD *)(v11 + 10) & 0xFFDF) != 0x43
              || (*(_WORD *)(v11 + 12) & 0xFFDF) != 0x41
              || (*(_WORD *)(v11 + 14) & 0xFFDF) != 0x54
              || (*(_WORD *)(v11 + 16) & 0xFFDF) != 0x49
              || (*(_WORD *)(v11 + 18) & 0xFFDF) != 0x4F
              || (*(_WORD *)(v11 + 20) & 0xFFDF) != 0x4E
              || (*(_WORD *)(v11 + 22) & 0xFFDF) != 0xF
              || (*(_WORD *)(v11 + 24) & 0xFFDF) != 0x58
              || (*(_WORD *)(v11 + 26) & 0xFFDF) != 0xD
              || (*(_WORD *)(v11 + 28) & 0xFFDF) != 0x4D
              || (*(_WORD *)(v11 + 30) & 0xFFDF) != 0x50
              || (*(_WORD *)(v11 + 32) & 0xFFDF) != 0x45
              || (*(_WORD *)(v11 + 34) & 0xFFDF) != 0x47
              || (*(_WORD *)(v11 + 36) & 0xFFDF) != 0x55
              || (*(_WORD *)(v11 + 38) & 0xFFDF) != 0x52)
            {
              return 0;
            }
            v12 = *(unsigned __int16 *)(v11 + 40);
          }
          if ((v12 & 0xFFFFFFDF) != 0x4C)
            return 0;
        }
      }
    }
  }
LABEL_6:
  result = WebCore::keySystemIsSupported(result, a2);
  if ((_DWORD)result)
  {
    if (!*a3 || !*((_DWORD *)*a3 + 1))
      return 1;
    {
      qword_1ECE88A28 = 0;
      qword_1ECE88A30 = 0;
      unk_1ECE88A18 = 0u;
      *(__int128 *)((char *)&xmmword_1ECE88A00 + 8) = 0u;
      *(_OWORD *)&qword_1ECE889F8 = 0u;
      WebCore::AVAssetMIMETypeCache::singleton(void)::cache = (uint64_t)off_1E334D010;
    }
    result = WebCore::MIMETypeCache::canDecodeType((WebCore::MIMETypeCache *)&WebCore::AVAssetMIMETypeCache::singleton(void)::cache, a3, v6);
    if ((_DWORD)result)
      return 1;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS8_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENSC_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSK_1EJSA_SI_EEEEEEDcSM_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::SecurityOriginData::isHashTableDeletedValue(void)::{lambda(WebCore::SecurityOriginData::Tuple const&)#1},WebCore::SecurityOriginData::isHashTableDeletedValue(void)::{lambda(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>> const&>(uint64_t a1, _QWORD *a2)
{
  return *a2 == -1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::SecurityOriginData::isHashTableDeletedValue(void)::{lambda(WebCore::SecurityOriginData::Tuple const&)#1},WebCore::SecurityOriginData::isHashTableDeletedValue(void)::{lambda(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>> const&>()
{
  return 0;
}

dispatch_queue_t ___ZN7WebCoreL25globalLoaderDelegateQueueEv_block_invoke()
{
  dispatch_queue_t result;

  result = dispatch_queue_create("WebCoreAVFLoaderDelegate queue", 0);
  qword_1EE334A70 = (uint64_t)result;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateAVFoundationObjC::createAVPlayer(void)::$_0::operator() const(CMTime)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = a1[1];
  *a1 = &off_1E32048E8;
  a1[1] = 0;
  if (!v3)
    return a1;
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return a1;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateAVFoundationObjC::createAVPlayer(void)::$_0::operator() const(CMTime)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E32048E8;
  *((_QWORD *)this + 1) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return WTF::fastFree(this, a2);
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateAVFoundationObjC::createAVPlayer(void)::$_0::operator() const(CMTime)::{lambda(void)#1},void>::call(unsigned __int8 *result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v3;
  uint64_t v4;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  unsigned __int8 v11;
  _BOOL4 v13;
  char v14;
  BOOL v15;
  uint64_t v16;
  const WTF::MediaTime *v17;
  WTF::MediaTime *v18;
  const WTF::MediaTime *v19;
  const WTF::MediaTime *v20;
  int v21;
  int v22;
  int v23;
  BOOL v24;
  int v25;
  BOOL v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  NSObject *v34;
  uint64_t v35;
  void *v36;
  char *v37;
  unsigned __int8 *v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  WTF::Logger *v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::Logger *v51;
  uint64_t v52;
  WTF::StringImpl **v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  int v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  NSObject *v67;
  uint64_t v68;
  void *v69;
  char *v70;
  unsigned __int8 *v71;
  int v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  WTF::Logger *v78;
  uint64_t v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::Logger *v85;
  uint64_t v86;
  WTF::StringImpl **v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  WTF::MediaTime *v99;
  unsigned __int8 *v100;
  unsigned __int8 *v101;
  uint64_t v102;
  WTF::Logger::LogSiteIdentifier *v103;
  WTF::Logger::LogSiteIdentifier *v104;
  __int128 v105;
  WTF::Logger *v106;
  uint64_t v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  WTF::StringImpl *v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  __int128 buf;
  int v118;
  WTF::StringImpl *v119;
  int v120;
  WTF::StringImpl *v121;
  int v122;
  WTF::StringImpl *v123;
  int v124;
  WTF::StringImpl *v125;
  uint64_t v126;

  v126 = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)result + 1);
  if (v1)
  {
    v2 = result;
    v3 = *((_QWORD *)result + 6);
    v4 = *((_QWORD *)result + 2);
    if (__ldaxr((unsigned __int8 *)v1))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v1))
    {
      goto LABEL_6;
    }
    result = (unsigned __int8 *)MEMORY[0x19AEA534C](v1);
LABEL_6:
    if (*(_QWORD *)(v1 + 24))
      ++*(_QWORD *)(v1 + 8);
    else
      v4 = 0;
    v6 = __ldxr((unsigned __int8 *)v1);
    if (v6 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v1))
      {
        if (!v4)
          return result;
        goto LABEL_15;
      }
    }
    else
    {
      __clrex();
    }
    result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
    if (!v4)
      return result;
LABEL_15:
    v8 = *((unsigned int *)v2 + 8);
    v7 = *((_DWORD *)v2 + 9);
    v9 = v7 & 1;
    if ((~v7 & 3) == 0)
      v9 = v7 & 1 | 2;
    if ((~v7 & 5) == 0)
      v9 |= 4u;
    if ((~v7 & 9) == 0)
      v9 |= 8u;
    v10 = *((_QWORD *)v2 + 3);
    if ((~v7 & 0x11) != 0)
      v11 = v9;
    else
      v11 = v9 | 0x10;
    v13 = (v11 & 1) == 0 || v8 != 0;
    if (v10 >= 0)
      v14 = 5;
    else
      v14 = 9;
    v15 = !v13;
    if (v13)
    {
      v16 = *((_QWORD *)v2 + 3);
    }
    else
    {
      v11 = v14;
      v16 = v10 >> 63;
    }
    if (v15)
      v8 = 1;
    *(_QWORD *)&v105 = v16;
    *((_QWORD *)&v105 + 1) = v8 | ((unint64_t)v11 << 32);
    v17 = (const WTF::MediaTime *)WTF::MediaTime::zeroTime((WTF::MediaTime *)result);
    v18 = (WTF::MediaTime *)WTF::MediaTime::compare((WTF::MediaTime *)&v105, v17);
    if (!(_DWORD)v18)
    {
      v19 = (const WTF::MediaTime *)WTF::MediaTime::zeroTime(v18);
      v18 = (WTF::MediaTime *)WTF::MediaTime::compare((WTF::MediaTime *)(v3 + 840), v19);
      if ((_DWORD)v18 == 1 && (!*(_BYTE *)(v3 + 169) || !*(_BYTE *)(v3 + 400)))
      {
        if (*(_BYTE *)(*(_QWORD *)(v3 + 280) + 12))
          v18 = (WTF::MediaTime *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [38]>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)(v2 + 56), "PeriodicTimeObserver called with zero");
      }
    }
    v20 = (const WTF::MediaTime *)WTF::MediaTime::zeroTime(v18);
    if (WTF::MediaTime::compare((WTF::MediaTime *)&v105, v20) != -1
      || !*(_BYTE *)(*(_QWORD *)(v3 + 280) + 12))
    {
LABEL_129:
      v60 = (WTF::StringImpl *)WTF::MediaTime::compare((WTF::MediaTime *)&v105, (const WTF::MediaTime *)(v3 + 840));
      if ((_DWORD)v60 == -1 && *(_BYTE *)(*(_QWORD *)(v3 + 280) + 12))
      {
        v104 = (WTF::Logger::LogSiteIdentifier *)(v2 + 56);
        WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(v2 + 56));
        WTF::String::String((WTF::String *)&v111, "PeriodicTimeObserver went backwards, was ");
        WTF::MediaTime::toJSONString((WTF::MediaTime *)(v3 + 840));
        WTF::String::String((WTF::String *)&v109, ", is now ");
        WTF::MediaTime::toJSONString((WTF::MediaTime *)&v105);
        *(_QWORD *)&buf = v112;
        v106 = v111;
        v115 = v109;
        v116 = v110;
        v114 = v108;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v106, (uint64_t *)&v116, (uint64_t *)&v115, (uint64_t *)&v114, &v113);
        if (!v113)
          goto LABEL_240;
        v62 = v108;
        v108 = 0;
        if (v62)
        {
          if (*(_DWORD *)v62 == 2)
            WTF::StringImpl::destroy(v62, v61);
          else
            *(_DWORD *)v62 -= 2;
        }
        v63 = v109;
        v109 = 0;
        if (v63)
        {
          if (*(_DWORD *)v63 == 2)
            WTF::StringImpl::destroy(v63, v61);
          else
            *(_DWORD *)v63 -= 2;
        }
        v64 = v110;
        v110 = 0;
        if (v64)
        {
          if (*(_DWORD *)v64 == 2)
            WTF::StringImpl::destroy(v64, v61);
          else
            *(_DWORD *)v64 -= 2;
        }
        v65 = v111;
        v111 = 0;
        if (v65)
        {
          if (*(_DWORD *)v65 == 2)
            WTF::StringImpl::destroy(v65, v61);
          else
            *(_DWORD *)v65 -= 2;
        }
        v66 = v112;
        v112 = 0;
        if (v66)
        {
          if (*(_DWORD *)v66 == 2)
            WTF::StringImpl::destroy(v66, v61);
          else
            *(_DWORD *)v66 -= 2;
        }
        v67 = qword_1ECE7C4A0;
        v68 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)v68)
        {
          WTF::String::utf8();
          v70 = v106 ? (char *)v106 + 16 : 0;
          LODWORD(buf) = 136446210;
          *(_QWORD *)((char *)&buf + 4) = v70;
          _os_log_impl(&dword_1940B8000, v67, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
          v68 = (uint64_t)v106;
          v106 = 0;
          if (v68)
          {
            if (*(_DWORD *)v68 == 1)
              v68 = WTF::fastFree((WTF *)v68, v69);
            else
              --*(_DWORD *)v68;
          }
        }
        if (WebCore::LogMedia)
        {
          v71 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
          while (1)
          {
            v72 = *v71;
            if ((v72 & 1) != 0)
              break;
            v73 = __ldaxr(v71);
            if (v73 == v72)
            {
              if (!__stxr(v72 | 1, v71))
              {
                v101 = v2;
                v74 = WTF::Logger::observers((WTF::Logger *)v68);
                v75 = *(unsigned int *)(v74 + 12);
                if ((_DWORD)v75)
                {
                  v76 = *(uint64_t **)v74;
                  v102 = *(_QWORD *)v74 + 8 * v75;
                  do
                  {
                    v77 = *v76;
                    LODWORD(buf) = 0;
                    WTF::Logger::LogSiteIdentifier::toString(v104);
                    v118 = 0;
                    WTF::String::String((WTF::String *)&v119, "PeriodicTimeObserver went backwards, was ");
                    v120 = 1;
                    WTF::MediaTime::toJSONString((WTF::MediaTime *)(v3 + 840));
                    v122 = 0;
                    WTF::String::String((WTF::String *)&v123, ", is now ");
                    v124 = 1;
                    WTF::MediaTime::toJSONString((WTF::MediaTime *)&v105);
                    v106 = 0;
                    v107 = 0;
                    v78 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x50);
                    LODWORD(v107) = 5;
                    v106 = v78;
                    v79 = HIDWORD(v107);
                    *((_DWORD *)v78 + 4 * HIDWORD(v107)) = buf;
                    v80 = *((_QWORD *)&buf + 1);
                    if (*((_QWORD *)&buf + 1))
                      **((_DWORD **)&buf + 1) += 2;
                    *((_QWORD *)v78 + 2 * v79 + 1) = v80;
                    *((_DWORD *)v78 + 4 * (v79 + 1)) = v118;
                    v81 = v119;
                    if (v119)
                      *(_DWORD *)v119 += 2;
                    *((_QWORD *)v78 + 2 * (v79 + 1) + 1) = v81;
                    *((_DWORD *)v78 + 4 * (v79 + 2)) = v120;
                    v82 = v121;
                    if (v121)
                      *(_DWORD *)v121 += 2;
                    *((_QWORD *)v78 + 2 * (v79 + 2) + 1) = v82;
                    *((_DWORD *)v78 + 4 * (v79 + 3)) = v122;
                    v83 = v123;
                    if (v123)
                      *(_DWORD *)v123 += 2;
                    *((_QWORD *)v78 + 2 * (v79 + 3) + 1) = v83;
                    *((_DWORD *)v78 + 4 * (v79 + 4)) = v124;
                    v84 = v125;
                    if (v125)
                      *(_DWORD *)v125 += 2;
                    *((_QWORD *)v78 + 2 * (v79 + 4) + 1) = v84;
                    HIDWORD(v107) = v79 + 5;
                    (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v77 + 16))(v77, &WebCore::LogMedia, 0, &v106);
                    v85 = v106;
                    if (HIDWORD(v107))
                    {
                      v86 = 16 * HIDWORD(v107);
                      v87 = (WTF::StringImpl **)((char *)v106 + 8);
                      do
                      {
                        v88 = *v87;
                        *v87 = 0;
                        if (v88)
                        {
                          if (*(_DWORD *)v88 == 2)
                            WTF::StringImpl::destroy(v88, (WTF::StringImpl *)v69);
                          else
                            *(_DWORD *)v88 -= 2;
                        }
                        v87 += 2;
                        v86 -= 16;
                      }
                      while (v86);
                      v85 = v106;
                    }
                    if (v85)
                    {
                      v106 = 0;
                      LODWORD(v107) = 0;
                      WTF::fastFree(v85, v69);
                    }
                    v89 = v125;
                    v125 = 0;
                    if (v89)
                    {
                      if (*(_DWORD *)v89 == 2)
                        WTF::StringImpl::destroy(v89, (WTF::StringImpl *)v69);
                      else
                        *(_DWORD *)v89 -= 2;
                    }
                    v90 = v123;
                    v123 = 0;
                    if (v90)
                    {
                      if (*(_DWORD *)v90 == 2)
                        WTF::StringImpl::destroy(v90, (WTF::StringImpl *)v69);
                      else
                        *(_DWORD *)v90 -= 2;
                    }
                    v91 = v121;
                    v121 = 0;
                    if (v91)
                    {
                      if (*(_DWORD *)v91 == 2)
                        WTF::StringImpl::destroy(v91, (WTF::StringImpl *)v69);
                      else
                        *(_DWORD *)v91 -= 2;
                    }
                    v92 = v119;
                    v119 = 0;
                    if (v92)
                    {
                      if (*(_DWORD *)v92 == 2)
                        WTF::StringImpl::destroy(v92, (WTF::StringImpl *)v69);
                      else
                        *(_DWORD *)v92 -= 2;
                    }
                    v93 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                    *((_QWORD *)&buf + 1) = 0;
                    if (v93)
                    {
                      if (*(_DWORD *)v93 == 2)
                        WTF::StringImpl::destroy(v93, (WTF::StringImpl *)v69);
                      else
                        *(_DWORD *)v93 -= 2;
                    }
                    ++v76;
                  }
                  while (v76 != (uint64_t *)v102);
                }
                v94 = __ldxr(v71);
                if (v94 == 1)
                {
                  v2 = v101;
                  if (!__stlxr(0, v71))
                    break;
                }
                else
                {
                  __clrex();
                  v2 = v101;
                }
                WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                break;
              }
            }
            else
            {
              __clrex();
            }
          }
        }
        v60 = v113;
        v113 = 0;
        if (v60)
        {
          if (*(_DWORD *)v60 == 2)
            v60 = (WTF::StringImpl *)WTF::StringImpl::destroy(v60, (WTF::StringImpl *)v69);
          else
            *(_DWORD *)v60 -= 2;
        }
      }
      if ((BYTE12(v105) & 0x1D) != 1 && *(_BYTE *)(*(_QWORD *)(v3 + 280) + 12))
        v60 = (WTF::StringImpl *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [59]>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)(v2 + 56), "PeriodicTimeObserver called with called with infinite time");
      v95 = v105;
      *(_QWORD *)(v3 + 840) = v105;
      v96 = *(_QWORD *)((char *)&v105 + 5);
      *(_QWORD *)(v3 + 845) = *(_QWORD *)((char *)&v105 + 5);
      v97 = v3 + 824;
      *(_QWORD *)(v3 + 824) = v95;
      *(_QWORD *)(v3 + 829) = v96;
      WTF::WallTime::now(v60);
      *(_QWORD *)(v3 + 856) = v98;
      *(_DWORD *)(v3 + 864) = *(_DWORD *)(v3 + 912);
      *(_QWORD *)(v3 + 872) = *(_QWORD *)(v3 + 904);
      v99 = *(WTF::MediaTime **)(v3 + 816);
      if (!v99)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayerPrivateAVFoundation,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v4 + 48));
      if ((*(_BYTE *)(v3 + 836) & 0x1D) == 1
        || (v97 = WTF::MediaTime::zeroTime(v99), (v99 = *(WTF::MediaTime **)(v3 + 816)) != 0))
      {
        (*(void (**)(WTF::MediaTime *, uint64_t))(*(_QWORD *)v99 + 48))(v99, v97);
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayerPrivateAVFoundation,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v4 + 48));
      }
      std::__throw_bad_function_call[abi:sn180100]();
      __break(1u);
LABEL_240:
      __break(0xC471u);
      JUMPOUT(0x194768120);
    }
    v103 = (WTF::Logger::LogSiteIdentifier *)(v2 + 56);
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(v2 + 56));
    WTF::String::String((WTF::String *)&v114, "PeriodicTimeObserver called with negative time ");
    WTF::MediaTime::toJSONString((WTF::MediaTime *)&v105);
    if (v115)
    {
      v21 = *((_DWORD *)v115 + 1);
      if (v114)
        goto LABEL_49;
    }
    else
    {
      v21 = 0;
      if (v114)
      {
LABEL_49:
        v22 = *((_DWORD *)v114 + 1);
        if (v113)
        {
LABEL_50:
          v23 = *((_DWORD *)v113 + 1);
LABEL_51:
          if ((v23 | v22) < 0)
            goto LABEL_240;
          v24 = __OFADD__(v22, v23);
          v25 = v22 + v23;
          v26 = v24;
          if (v21 < 0)
            goto LABEL_240;
          if (v26)
            goto LABEL_240;
          v27 = (v21 + v25);
          if (__OFADD__(v21, v25))
            goto LABEL_240;
          if (!v115 || (*((_BYTE *)v115 + 16) & 4) != 0)
          {
            if (v114)
            {
              v29 = *((_DWORD *)v114 + 4);
              v28 = (v29 >> 2) & 1;
              if (!v113 || (v29 & 4) == 0)
                goto LABEL_65;
            }
            else if (!v113)
            {
              v28 = 1;
              goto LABEL_65;
            }
            v28 = (*((unsigned __int8 *)v113 + 16) >> 2) & 1;
          }
          else
          {
            v28 = 0;
          }
LABEL_65:
          WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v27, v28, v115, (uint64_t)v114, (uint64_t)v113, &buf);
          v116 = (WTF::StringImpl *)buf;
          if (!(_QWORD)buf)
            goto LABEL_240;
          v31 = v113;
          v113 = 0;
          if (v31)
          {
            if (*(_DWORD *)v31 == 2)
              WTF::StringImpl::destroy(v31, v30);
            else
              *(_DWORD *)v31 -= 2;
          }
          v32 = v114;
          v114 = 0;
          if (v32)
          {
            if (*(_DWORD *)v32 == 2)
              WTF::StringImpl::destroy(v32, v30);
            else
              *(_DWORD *)v32 -= 2;
          }
          v33 = v115;
          v115 = 0;
          if (v33)
          {
            if (*(_DWORD *)v33 == 2)
              WTF::StringImpl::destroy(v33, v30);
            else
              *(_DWORD *)v33 -= 2;
          }
          v34 = qword_1ECE7C4A0;
          v35 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)v35)
          {
            WTF::String::utf8();
            v37 = v106 ? (char *)v106 + 16 : 0;
            LODWORD(buf) = 136446210;
            *(_QWORD *)((char *)&buf + 4) = v37;
            _os_log_impl(&dword_1940B8000, v34, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
            v35 = (uint64_t)v106;
            v106 = 0;
            if (v35)
            {
              if (*(_DWORD *)v35 == 1)
                v35 = WTF::fastFree((WTF *)v35, v36);
              else
                --*(_DWORD *)v35;
            }
          }
          if (WebCore::LogMedia)
          {
            v38 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
            while (1)
            {
              v39 = *v38;
              if ((v39 & 1) != 0)
                break;
              v40 = __ldaxr(v38);
              if (v40 == v39)
              {
                if (!__stxr(v39 | 1, v38))
                {
                  v100 = v2;
                  v41 = WTF::Logger::observers((WTF::Logger *)v35);
                  v42 = *(unsigned int *)(v41 + 12);
                  if ((_DWORD)v42)
                  {
                    v43 = *(uint64_t **)v41;
                    v44 = *(_QWORD *)v41 + 8 * v42;
                    do
                    {
                      v45 = *v43;
                      LODWORD(buf) = 0;
                      WTF::Logger::LogSiteIdentifier::toString(v103);
                      v118 = 0;
                      WTF::String::String((WTF::String *)&v119, "PeriodicTimeObserver called with negative time ");
                      v120 = 1;
                      WTF::MediaTime::toJSONString((WTF::MediaTime *)&v105);
                      v106 = 0;
                      v107 = 0;
                      v46 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
                      LODWORD(v107) = 3;
                      v106 = v46;
                      v47 = HIDWORD(v107);
                      *((_DWORD *)v46 + 4 * HIDWORD(v107)) = buf;
                      v48 = *((_QWORD *)&buf + 1);
                      if (*((_QWORD *)&buf + 1))
                        **((_DWORD **)&buf + 1) += 2;
                      *((_QWORD *)v46 + 2 * v47 + 1) = v48;
                      *((_DWORD *)v46 + 4 * (v47 + 1)) = v118;
                      v49 = v119;
                      if (v119)
                        *(_DWORD *)v119 += 2;
                      *((_QWORD *)v46 + 2 * (v47 + 1) + 1) = v49;
                      *((_DWORD *)v46 + 4 * (v47 + 2)) = v120;
                      v50 = v121;
                      if (v121)
                        *(_DWORD *)v121 += 2;
                      *((_QWORD *)v46 + 2 * (v47 + 2) + 1) = v50;
                      HIDWORD(v107) = v47 + 3;
                      (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v45 + 16))(v45, &WebCore::LogMedia, 0, &v106);
                      v51 = v106;
                      if (HIDWORD(v107))
                      {
                        v52 = 16 * HIDWORD(v107);
                        v53 = (WTF::StringImpl **)((char *)v106 + 8);
                        do
                        {
                          v54 = *v53;
                          *v53 = 0;
                          if (v54)
                          {
                            if (*(_DWORD *)v54 == 2)
                              WTF::StringImpl::destroy(v54, (WTF::StringImpl *)v36);
                            else
                              *(_DWORD *)v54 -= 2;
                          }
                          v53 += 2;
                          v52 -= 16;
                        }
                        while (v52);
                        v51 = v106;
                      }
                      if (v51)
                      {
                        v106 = 0;
                        LODWORD(v107) = 0;
                        WTF::fastFree(v51, v36);
                      }
                      v55 = v121;
                      v121 = 0;
                      if (v55)
                      {
                        if (*(_DWORD *)v55 == 2)
                          WTF::StringImpl::destroy(v55, (WTF::StringImpl *)v36);
                        else
                          *(_DWORD *)v55 -= 2;
                      }
                      v56 = v119;
                      v119 = 0;
                      if (v56)
                      {
                        if (*(_DWORD *)v56 == 2)
                          WTF::StringImpl::destroy(v56, (WTF::StringImpl *)v36);
                        else
                          *(_DWORD *)v56 -= 2;
                      }
                      v57 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                      *((_QWORD *)&buf + 1) = 0;
                      if (v57)
                      {
                        if (*(_DWORD *)v57 == 2)
                          WTF::StringImpl::destroy(v57, (WTF::StringImpl *)v36);
                        else
                          *(_DWORD *)v57 -= 2;
                      }
                      ++v43;
                    }
                    while (v43 != (uint64_t *)v44);
                  }
                  v58 = __ldxr(v38);
                  if (v58 == 1)
                  {
                    v2 = v100;
                    if (!__stlxr(0, v38))
                      break;
                  }
                  else
                  {
                    __clrex();
                    v2 = v100;
                  }
                  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                  break;
                }
              }
              else
              {
                __clrex();
              }
            }
          }
          v59 = v116;
          v116 = 0;
          if (v59)
          {
            if (*(_DWORD *)v59 == 2)
              WTF::StringImpl::destroy(v59, (WTF::StringImpl *)v36);
            else
              *(_DWORD *)v59 -= 2;
          }
          goto LABEL_129;
        }
LABEL_236:
        v23 = 0;
        goto LABEL_51;
      }
    }
    v22 = 0;
    if (v113)
      goto LABEL_50;
    goto LABEL_236;
  }
  return result;
}

void sub_19476812C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,WTF *a22,int a23,int a24,WTF::StringImpl *a25,WTF::StringImpl *a26,WTF::StringImpl *a27,WTF::StringImpl *a28,uint64_t a29,WTF::StringImpl *a30,WTF::StringImpl *a31,uint64_t a32,WTF::StringImpl *a33)
{
  uint64_t v33;

  if (a30)
  {
    if (*(_DWORD *)a30 == 2)
      WTF::StringImpl::destroy(a30, a2);
    else
      *(_DWORD *)a30 -= 2;
  }
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayerPrivateAVFoundation,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v33 + 48));
  _Unwind_Resume(a1);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateAVFoundationObjC::startVideoFrameMetadataGathering(void)::$_0,void>::call(uint64_t result, void *a2)
{
  uint64_t v2;
  WTF *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  const void *v12;
  CFTypeRef v13;
  CFTypeRef cf;

  v2 = *(_QWORD *)(result + 8);
  v3 = *(WTF **)(v2 + 1128);
  *(_QWORD *)(v2 + 1128) = 0;
  if (v3)
  {
    v4 = *((_QWORD *)v3 + 1);
    *((_QWORD *)v3 + 1) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    if (*(_QWORD *)v3)
    {
      *(_QWORD *)(*(_QWORD *)v3 + 8) = 0;
      v5 = *(unsigned int **)v3;
      *(_QWORD *)v3 = 0;
      if (v5)
      {
        do
        {
          v6 = __ldaxr(v5);
          v7 = v6 - 1;
        }
        while (__stlxr(v7, v5));
        if (!v7)
        {
          atomic_store(1u, v5);
          WTF::fastFree((WTF *)v5, a2);
        }
      }
    }
    else
    {
      *(_QWORD *)v3 = 0;
    }
    result = WTF::fastFree(v3, a2);
  }
  if (*(_BYTE *)(v2 + 984))
  {
    result = WebCore::MediaPlayerPrivateAVFoundationObjC::updateLastPixelBuffer((WebCore::MediaPlayerPrivateAVFoundationObjC *)v2);
    if ((result & 1) != 0 || *(_BYTE *)(v2 + 1088))
    {
      v8 = *(_QWORD *)(v2 + 88);
      if (v8)
      {
        v9 = *(_QWORD *)(v2 + 96);
        if (__ldaxr((unsigned __int8 *)v8))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v8))
        {
          goto LABEL_18;
        }
        result = MEMORY[0x19AEA534C](v8);
LABEL_18:
        if (*(_QWORD *)(v8 + 24))
          ++*(_QWORD *)(v8 + 8);
        else
          v9 = 0;
        v11 = __ldxr((unsigned __int8 *)v8);
        if (v11 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v8))
          {
            if (!v9)
              return result;
LABEL_27:
            if (*(_BYTE *)(v2 + 1088))
            {
              v12 = *(const void **)(v2 + 520);
              cf = v12;
              if (v12)
                CFRetain(v12);
              (*(void (**)(_QWORD, uint64_t, CFTypeRef *))(**(_QWORD **)(*(_QWORD *)(v9 + 8) + 8) + 600))(*(_QWORD *)(*(_QWORD *)(v9 + 8) + 8), v2 + 992, &cf);
              v13 = cf;
              cf = 0;
              if (v13)
                CFRelease(v13);
              return (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v9);
            }
            else
            {
              __break(1u);
            }
            return result;
          }
        }
        else
        {
          __clrex();
        }
        result = WTF::Lock::unlockSlow((WTF::Lock *)v8);
        if (!v9)
          return result;
        goto LABEL_27;
      }
    }
  }
  return result;
}

void sub_194768770(_Unwind_Exception *a1)
{
  unsigned __int8 **v1;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v1);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateAVFoundationObjC::waitForVideoOutputMediaDataWillChange(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = a1[1];
  *a1 = &off_1E3204938;
  a1[1] = 0;
  if (!v3)
    return a1;
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return a1;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateAVFoundationObjC::waitForVideoOutputMediaDataWillChange(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3204938;
  *((_QWORD *)this + 1) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return WTF::fastFree(this, a2);
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateAVFoundationObjC::waitForVideoOutputMediaDataWillChange(void)::$_0,void>::call(unsigned __int8 *result)
{
  uint64_t v1;
  uint64_t v2;
  int v4;
  WTF::RunLoop *v5;

  v1 = *((_QWORD *)result + 1);
  if (!v1)
    return result;
  v2 = *((_QWORD *)result + 2);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v1))
  {
    goto LABEL_6;
  }
  result = (unsigned __int8 *)MEMORY[0x19AEA534C](v1);
LABEL_6:
  if (*(_QWORD *)(v1 + 24))
    ++*(_QWORD *)(v1 + 8);
  else
    v2 = 0;
  v4 = __ldxr((unsigned __int8 *)v1);
  if (v4 != 1)
  {
    __clrex();
LABEL_16:
    result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
    if (!v2)
      return result;
    goto LABEL_12;
  }
  if (__stlxr(0, (unsigned __int8 *)v1))
    goto LABEL_16;
  if (!v2)
    return result;
LABEL_12:
  if (*(_DWORD *)(v2 + 936))
  {
    v5 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)result);
    WTF::RunLoop::stop(v5);
  }
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayerPrivateAVFoundation,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v2 + 48));
}

void sub_1947689D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayerPrivateAVFoundation,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v1 + 48));
  _Unwind_Resume(a1);
}

void WTF::RunLoop::Timer::~Timer(WTF::RunLoop::Timer *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E32051C0;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  WTF::RunLoop::TimerBase::~TimerBase(this);
}

{
  uint64_t v2;
  WTF *v3;
  void *v4;

  *(_QWORD *)this = off_1E32051C0;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  WTF::RunLoop::TimerBase::~TimerBase(this);
  WTF::fastFree(v3, v4);
}

uint64_t WTF::RunLoop::Timer::fired(WTF::RunLoop::Timer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 16))(*((_QWORD *)this + 3));
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateAVFoundationObjC::waitForVideoOutputMediaDataWillChange(void)::$_1,void>::call(WTF::RunLoop *a1)
{
  WTF::RunLoop *v1;

  v1 = (WTF::RunLoop *)WTF::RunLoop::main(a1);
  return WTF::RunLoop::stop(v1);
}

uint64_t ___ZZNK7WebCore34MediaPlayerPrivateAVFoundationObjC17firstEnabledTrackEP8NSStringENK3__0clEP7NSArray_block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "isEnabled");
}

void WebCore::OutOfBandTextTrackPrivateAVF::~OutOfBandTextTrackPrivateAVF(WebCore::OutOfBandTextTrackPrivateAVF *this, void *a2)
{
  const void *v3;

  *(_QWORD *)this = off_1E32049C8;
  v3 = (const void *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v3)
    CFRelease(v3);
  WebCore::InbandTextTrackPrivateAVF::~InbandTextTrackPrivateAVF(this, a2);
}

{
  const void *v3;
  WTF *v4;
  void *v5;

  *(_QWORD *)this = off_1E32049C8;
  v3 = (const void *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v3)
    CFRelease(v3);
  WebCore::InbandTextTrackPrivateAVF::~InbandTextTrackPrivateAVF(this, a2);
  WTF::fastFree(v4, v5);
}

void WebCore::InbandTextTrackPrivate::language(_QWORD *a1@<X8>)
{
  _DWORD *v2;

  v2 = (_DWORD *)*MEMORY[0x1E0CBF3B8];
  if (*MEMORY[0x1E0CBF3B8])
    *v2 += 2;
  *a1 = v2;
}

uint64_t WebCore::InbandTextTrackPrivate::kind(WebCore::InbandTextTrackPrivate *this)
{
  return 0;
}

uint64_t WebCore::OutOfBandTextTrackPrivateAVF::textTrackCategory(WebCore::OutOfBandTextTrackPrivateAVF *this)
{
  return 1;
}

uint64_t initAVController_RouteDescriptionKey_RouteCurrentlyPicked(void)
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  if (_MergedGlobals_354[0] == 1)
  {
    v0 = (void *)qword_1EE334A88;
  }
  else
  {
    v0 = dlopen("/System/Library/PrivateFrameworks/Celestial.framework/Celestial", 2);
    if (!v0)
    {
LABEL_8:
      __break(0xC471u);
      JUMPOUT(0x194768BCCLL);
    }
    qword_1EE334A88 = (uint64_t)v0;
    _MergedGlobals_354[0] = 1;
  }
  v1 = (uint64_t *)dlsym(v0, "AVController_RouteDescriptionKey_RouteCurrentlyPicked");
  if (!v1)
    goto LABEL_8;
  result = *v1;
  qword_1EE334A80 = result;
  _MergedGlobals_7 = AVController_RouteDescriptionKey_RouteCurrentlyPickedFunction;
  return result;
}

uint64_t AVController_RouteDescriptionKey_RouteCurrentlyPickedFunction(void)
{
  return qword_1EE334A80;
}

uint64_t initAVController_RouteDescriptionKey_RouteName(void)
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  if (_MergedGlobals_354[0] == 1)
  {
    v0 = (void *)qword_1EE334A88;
  }
  else
  {
    v0 = dlopen("/System/Library/PrivateFrameworks/Celestial.framework/Celestial", 2);
    if (!v0)
    {
LABEL_8:
      __break(0xC471u);
      JUMPOUT(0x194768C98);
    }
    qword_1EE334A88 = (uint64_t)v0;
    _MergedGlobals_354[0] = 1;
  }
  v1 = (uint64_t *)dlsym(v0, "AVController_RouteDescriptionKey_RouteName");
  if (!v1)
    goto LABEL_8;
  result = *v1;
  qword_1EE334A90 = result;
  off_1ECE76A18 = AVController_RouteDescriptionKey_RouteNameFunction;
  return result;
}

uint64_t AVController_RouteDescriptionKey_RouteNameFunction(void)
{
  return qword_1EE334A90;
}

uint64_t initAVController_RouteDescriptionKey_AVAudioRouteName(void)
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  if (_MergedGlobals_354[0] == 1)
  {
    v0 = (void *)qword_1EE334A88;
  }
  else
  {
    v0 = dlopen("/System/Library/PrivateFrameworks/Celestial.framework/Celestial", 2);
    if (!v0)
    {
LABEL_8:
      __break(0xC471u);
      JUMPOUT(0x194768D64);
    }
    qword_1EE334A88 = (uint64_t)v0;
    _MergedGlobals_354[0] = 1;
  }
  v1 = (uint64_t *)dlsym(v0, "AVController_RouteDescriptionKey_AVAudioRouteName");
  if (!v1)
    goto LABEL_8;
  result = *v1;
  qword_1EE334A98 = result;
  off_1ECE76A20 = AVController_RouteDescriptionKey_AVAudioRouteNameFunction;
  return result;
}

uint64_t AVController_RouteDescriptionKey_AVAudioRouteNameFunction(void)
{
  return qword_1EE334A98;
}

void WebCore::SerializedPlatformDataCueValue::Data::~Data(WebCore::SerializedPlatformDataCueValue::Data *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  const void *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl **v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  char v12;

  v3 = *((unsigned int *)this + 10);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E3204AB8[v3])(&v12, (char *)this + 32);
  *((_DWORD *)this + 10) = -1;
  v4 = (const void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    CFRelease(v4);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *((_QWORD *)this + 1);
  if (v6)
  {
    v8 = *(unsigned int *)(v6 - 4);
    if ((_DWORD)v8)
    {
      v9 = (WTF::StringImpl **)*((_QWORD *)this + 1);
      do
      {
        v10 = *v9;
        if (*v9 != (WTF::StringImpl *)-1)
        {
          v11 = v9[1];
          v9[1] = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2)
            {
              WTF::StringImpl::destroy(v11, a2);
              v10 = *v9;
            }
            else
            {
              *(_DWORD *)v11 -= 2;
            }
          }
          *v9 = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 == 2)
              WTF::StringImpl::destroy(v10, a2);
            else
              *(_DWORD *)v10 -= 2;
          }
        }
        v9 += 2;
        --v8;
      }
      while (v8);
    }
    WTF::fastFree((WTF *)(v6 - 16), a2);
  }
  v7 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN3WTF9RetainPtrI8NSStringEENS9_I6NSDateEENS9_I8NSNumberEENS9_I6NSDataEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJDnSB_SD_SF_SH_EEEEEEDcSL_DpT0_(uint64_t a1, const void **a2)
{
  const void *v2;

  v2 = *a2;
  *a2 = 0;
  if (v2)
    CFRelease(v2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN3WTF9RetainPtrI8NSStringEENS9_I6NSDateEENS9_I8NSNumberEENS9_I6NSDataEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJDnSB_SD_SF_SH_EEEEEEDcSL_DpT0_(uint64_t a1, const void **a2)
{
  const void *v2;

  v2 = *a2;
  *a2 = 0;
  if (v2)
    CFRelease(v2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN3WTF9RetainPtrI8NSStringEENS9_I6NSDateEENS9_I8NSNumberEENS9_I6NSDataEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJDnSB_SD_SF_SH_EEEEEEDcSL_DpT0_(uint64_t a1, const void **a2)
{
  const void *v2;

  v2 = *a2;
  *a2 = 0;
  if (v2)
    CFRelease(v2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN3WTF9RetainPtrI8NSStringEENS9_I6NSDateEENS9_I8NSNumberEENS9_I6NSDataEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJDnSB_SD_SF_SH_EEEEEEDcSL_DpT0_(uint64_t a1, const void **a2)
{
  const void *v2;

  v2 = *a2;
  *a2 = 0;
  if (v2)
    CFRelease(v2);
}

uint64_t WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::NativePromise(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  _BYTE *v5;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E3205210;
  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(_BYTE *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = a1 + 120;
  *(_QWORD *)(a1 + 112) = 1;
  *(_QWORD *)(a1 + 136) = 0;
  *(_WORD *)(a1 + 144) = 0;
  v5 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v5 && v5[16] >= 4u)
    WTF::Logger::log<char [10],WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>((uint64_t)v5, 4u, "creating ", a1);
  return a1;
}

void sub_194769008(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  void *v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v23;
  unsigned int **v24;
  unsigned int **v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;

  v17 = v15;
  WTF::Vector<WTF::NativePromiseProducer<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v17, a2);
  v20 = *(unsigned int *)(v13 + 116);
  if ((_DWORD)v20)
  {
    v24 = *(unsigned int ***)(v13 + 104);
    v25 = &v24[v20];
    do
    {
      v26 = *v24;
      *v24 = 0;
      if (v26)
      {
        v27 = v26 + 2;
        do
        {
          v28 = __ldaxr(v27);
          v29 = v28 - 1;
        }
        while (__stlxr(v29, v27));
        if (!v29)
        {
          atomic_store(1u, v26 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v26 + 8))(v26);
        }
      }
      ++v24;
    }
    while (v24 != v25);
  }
  v21 = *(WTF **)(v13 + 104);
  if (v16 != v21 && v21 != 0)
  {
    *(_QWORD *)(v13 + 104) = 0;
    *(_DWORD *)(v13 + 112) = 0;
    WTF::fastFree(v21, v19);
  }
  v23 = *(unsigned int *)(v13 + 96);
  if ((_DWORD)v23 != -1)
    ((void (*)(char *, uint64_t))off_1E3204AE0[v23])(&a13, v14);
  *(_DWORD *)(v13 + 96) = -1;
  _Unwind_Resume(a1);
}

uint64_t WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::assertIsDead(uint64_t result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;

  v1 = result;
  v2 = (unsigned __int8 *)(result + 48);
  if (__ldaxr((unsigned __int8 *)(result + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEA534C](result + 48);
LABEL_5:
  v4 = *(unsigned int *)(v1 + 140);
  if ((_DWORD)v4)
  {
    v5 = *(uint64_t **)(v1 + 128);
    v6 = 40 * v4;
    do
    {
      result = *v5;
      if (*v5)
        result = WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::assertIsDead();
      v5 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  v7 = __ldxr(v2);
  if (v7 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  if (__stlxr(0, v2))
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return result;
}

void sub_19476916C(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

uint64_t WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::~NativePromise(uint64_t a1)
{
  WTF *v1;
  void *v2;

  v1 = (WTF *)WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::~NativePromise(a1);
  return WTF::fastFree(v1, v2);
}

{
  _BYTE *v2;
  BOOL v3;
  void *v4;
  void *v5;
  uint64_t v6;
  unsigned int **v7;
  unsigned int **v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  WTF *v13;
  uint64_t v15;
  _BYTE v17[2];

  v2 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v2)
    v3 = v2[16] >= 4u;
  else
    v3 = 0;
  if (v3)
    WTF::Logger::log<char [12],WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>((uint64_t)v2, 4u, "destroying ", a1);
  WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::assertIsDead(a1);
  WTF::Vector<WTF::NativePromiseProducer<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 128, v4);
  v6 = *(unsigned int *)(a1 + 116);
  if ((_DWORD)v6)
  {
    v7 = *(unsigned int ***)(a1 + 104);
    v8 = &v7[v6];
    do
    {
      v9 = *v7;
      *v7 = 0;
      if (v9)
      {
        v10 = v9 + 2;
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
        {
          atomic_store(1u, v9 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
        }
      }
      ++v7;
    }
    while (v7 != v8);
  }
  v13 = *(WTF **)(a1 + 104);
  if ((WTF *)(a1 + 120) != v13 && v13 != 0)
  {
    *(_QWORD *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    WTF::fastFree(v13, v5);
  }
  v15 = *(unsigned int *)(a1 + 96);
  if ((_DWORD)v15 != -1)
    ((void (*)(_BYTE *, uint64_t))off_1E3204AE0[v15])(v17, a1 + 56);
  *(_DWORD *)(a1 + 96) = -1;
  return a1;
}

uint64_t WTF::Logger::log<char [10],WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>(uint64_t a1, unsigned int a2, char *a3, uint64_t a4)
{
  uint64_t result;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::Logger *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::Logger *v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  WTF::Logger *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  __int128 buf;
  int v45;
  WTF::StringImpl *v46[3];

  v46[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::String::String((WTF::String *)&v42, a3);
  result = WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(a4, &v41);
  if (!v42)
  {
    v8 = 0;
    if (v41)
      goto LABEL_3;
LABEL_72:
    v9 = 0;
    goto LABEL_4;
  }
  v8 = *((_DWORD *)v42 + 1);
  if (!v41)
    goto LABEL_72;
LABEL_3:
  v9 = *((_DWORD *)v41 + 1);
LABEL_4:
  if ((v9 | v8) < 0)
    goto LABEL_75;
  result = (v8 + v9);
  if (__OFADD__(v8, v9))
    goto LABEL_75;
  if (v42)
  {
    v10 = *((_DWORD *)v42 + 4);
    v11 = (v10 >> 2) & 1;
    if (v41 && (v10 & 4) != 0)
      goto LABEL_9;
  }
  else
  {
    if (v41)
    {
LABEL_9:
      v11 = (*((unsigned __int8 *)v41 + 16) >> 2) & 1;
      goto LABEL_10;
    }
    v11 = 1;
  }
LABEL_10:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v11, (uint64_t)v42, (uint64_t)v41, &buf);
  v43 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_75:
    __break(0xC471u);
    return result;
  }
  v13 = v41;
  v41 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v42;
  v42 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *(NSObject **)(a1 + 32);
  v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v16)
  {
    WTF::String::utf8();
    v18 = v39 ? (char *)v39 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v18;
    _os_log_impl(&dword_1940B8000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v16 = (uint64_t)v39;
    v39 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
        v16 = WTF::fastFree((WTF *)v16, v17);
      else
        --*(_DWORD *)v16;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v19 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v20 = *v19;
      if ((v20 & 1) != 0)
        break;
      v21 = __ldaxr(v19);
      if (v21 == v20)
      {
        if (!__stxr(v20 | 1, v19))
        {
          v22 = WTF::Logger::observers((WTF::Logger *)v16);
          v23 = *(unsigned int *)(v22 + 12);
          if ((_DWORD)v23)
          {
            v24 = *(uint64_t **)v22;
            v25 = *(_QWORD *)v22 + 8 * v23;
            do
            {
              v26 = *v24;
              LODWORD(buf) = 0;
              WTF::String::String((WTF::String *)((char *)&buf + 8), a3);
              v45 = 0;
              WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(a4, v46);
              v39 = 0;
              v40 = 0;
              v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v40) = 2;
              v39 = v27;
              v28 = HIDWORD(v40);
              *((_DWORD *)v27 + 4 * HIDWORD(v40)) = buf;
              v29 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v27 + 2 * v28 + 1) = v29;
              *((_DWORD *)v27 + 4 * (v28 + 1)) = v45;
              v30 = v46[0];
              if (v46[0])
                *(_DWORD *)v46[0] += 2;
              *((_QWORD *)v27 + 2 * (v28 + 1) + 1) = v30;
              HIDWORD(v40) = v28 + 2;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, a1, a2, &v39);
              v31 = v39;
              if (HIDWORD(v40))
              {
                v32 = 16 * HIDWORD(v40);
                v33 = (WTF::StringImpl **)((char *)v39 + 8);
                do
                {
                  v34 = *v33;
                  *v33 = 0;
                  if (v34)
                  {
                    if (*(_DWORD *)v34 == 2)
                      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v17);
                    else
                      *(_DWORD *)v34 -= 2;
                  }
                  v33 += 2;
                  v32 -= 16;
                }
                while (v32);
                v31 = v39;
              }
              if (v31)
              {
                v39 = 0;
                LODWORD(v40) = 0;
                WTF::fastFree(v31, v17);
              }
              v35 = v46[0];
              v46[0] = 0;
              if (v35)
              {
                if (*(_DWORD *)v35 == 2)
                  WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v35 -= 2;
              }
              v36 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                  WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v36 -= 2;
              }
              ++v24;
            }
            while (v24 != (uint64_t *)v25);
          }
          v37 = __ldxr(v19);
          if (v37 == 1)
          {
            if (!__stlxr(0, v19))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v43;
  v43 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1947695B8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, WTF::StringImpl *a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19)
{
  unsigned __int8 *v19;
  int v21;

  v21 = __ldxr(v19);
  if (v21 == 1)
  {
    if (!__stlxr(0, v19))
    {
LABEL_6:
      if (a15)
      {
        if (*(_DWORD *)a15 == 2)
          WTF::StringImpl::destroy(a15, a2);
        else
          *(_DWORD *)a15 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  int v5;
  int v6;
  BOOL v7;
  int v8;
  int v9;
  BOOL v10;
  int v11;
  _BOOL4 v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;

  WTF::LogArgument<void const*>::toString();
  result = WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a1 + 16));
  if (v16)
  {
    v5 = *((_DWORD *)v16 + 1);
    if (v15)
      goto LABEL_3;
LABEL_29:
    v6 = 0;
    goto LABEL_4;
  }
  v5 = 0;
  if (!v15)
    goto LABEL_29;
LABEL_3:
  v6 = *((_DWORD *)v15 + 1);
  if (v6 < 0)
  {
LABEL_30:
    *a2 = 0;
LABEL_31:
    __break(0xC471u);
    return result;
  }
LABEL_4:
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    goto LABEL_30;
  v7 = __OFADD__(v8, 1);
  v9 = v8 + 1;
  v10 = v7;
  if (v5 < 0)
    goto LABEL_30;
  if (v10)
    goto LABEL_30;
  v7 = __OFADD__(v5, v9);
  v11 = v5 + v9;
  if (v7)
    goto LABEL_30;
  result = (v11 + 13);
  if (__OFADD__(v11, 13))
    goto LABEL_30;
  v12 = (!v16 || (*((_BYTE *)v16 + 16) & 4) != 0) && (!v15 || (*((_BYTE *)v15 + 16) & 4) != 0);
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(result, v12, "NativePromise", 0xDu, (uint64_t)v16, 60, v15, 62, &v17);
  v14 = v17;
  *a2 = v17;
  if (!v14)
    goto LABEL_31;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v13);
    else
      *(_DWORD *)v15 -= 2;
  }
  result = (uint64_t)v16;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      return WTF::StringImpl::destroy(v16, v13);
    else
      *(_DWORD *)v16 -= 2;
  }
  return result;
}

void sub_194769848(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WTF::NativePromiseProducer<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF *v10;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
  {
    v4 = *(uint64_t **)a1;
    v5 = *(_QWORD *)a1 + 40 * v3;
    do
    {
      if (*v4)
      {
        WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::assertIsDead(*v4);
        v6 = (unsigned int *)*v4;
        *v4 = 0;
        if (v6)
        {
          v7 = v6 + 2;
          do
          {
            v8 = __ldaxr(v7);
            v9 = v8 - 1;
          }
          while (__stlxr(v9, v7));
          if (!v9)
          {
            atomic_store(1u, v6 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
          }
        }
      }
      else
      {
        *v4 = 0;
      }
      v4 += 5;
    }
    while (v4 != (uint64_t *)v5);
  }
  v10 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v10, a2);
  }
  return a1;
}

void sub_194769950(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  unsigned int **v3;
  unsigned int **v4;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF *v10;

  v4 = v3;
  v6 = *v4;
  *v4 = 0;
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v6 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
    }
  }
  v10 = *(WTF **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v10, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore27VideoPlaybackQualityMetricsENSA_18PlatformMediaErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISB_SC_EENS8_8FunctionIFSJ_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSF_SJ_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_194769AF8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  void *v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v19;
  unsigned int **v20;
  unsigned int **v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;

  WTF::Vector<WTF::NativePromiseProducer<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v13 + 128, a2);
  v16 = *(unsigned int *)(v13 + 116);
  if ((_DWORD)v16)
  {
    v20 = *(unsigned int ***)(v13 + 104);
    v21 = &v20[v16];
    do
    {
      v22 = *v20;
      *v20 = 0;
      if (v22)
      {
        v23 = v22 + 2;
        do
        {
          v24 = __ldaxr(v23);
          v25 = v24 - 1;
        }
        while (__stlxr(v25, v23));
        if (!v25)
        {
          atomic_store(1u, v22 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v22 + 8))(v22);
        }
      }
      ++v20;
    }
    while (v20 != v21);
  }
  v17 = *(WTF **)(v13 + 104);
  if ((WTF *)(v13 + 120) != v17 && v17 != 0)
  {
    *(_QWORD *)(v13 + 104) = 0;
    *(_DWORD *)(v13 + 112) = 0;
    WTF::fastFree(v17, v15);
  }
  v19 = *(unsigned int *)(v13 + 96);
  if ((_DWORD)v19 != -1)
    ((void (*)(char *, uint64_t))off_1E3204AE0[v19])(&a13, v13 + 56);
  *(_DWORD *)(v13 + 96) = -1;
  _Unwind_Resume(a1);
}

uint64_t WTF::Logger::log<char [12],WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>(uint64_t a1, unsigned int a2, char *a3, uint64_t a4)
{
  uint64_t result;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::Logger *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::Logger *v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  WTF::Logger *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  __int128 buf;
  int v45;
  WTF::StringImpl *v46[3];

  v46[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::String::String((WTF::String *)&v42, a3);
  result = WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(a4, &v41);
  if (!v42)
  {
    v8 = 0;
    if (v41)
      goto LABEL_3;
LABEL_72:
    v9 = 0;
    goto LABEL_4;
  }
  v8 = *((_DWORD *)v42 + 1);
  if (!v41)
    goto LABEL_72;
LABEL_3:
  v9 = *((_DWORD *)v41 + 1);
LABEL_4:
  if ((v9 | v8) < 0)
    goto LABEL_75;
  result = (v8 + v9);
  if (__OFADD__(v8, v9))
    goto LABEL_75;
  if (v42)
  {
    v10 = *((_DWORD *)v42 + 4);
    v11 = (v10 >> 2) & 1;
    if (v41 && (v10 & 4) != 0)
      goto LABEL_9;
  }
  else
  {
    if (v41)
    {
LABEL_9:
      v11 = (*((unsigned __int8 *)v41 + 16) >> 2) & 1;
      goto LABEL_10;
    }
    v11 = 1;
  }
LABEL_10:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v11, (uint64_t)v42, (uint64_t)v41, &buf);
  v43 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_75:
    __break(0xC471u);
    return result;
  }
  v13 = v41;
  v41 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v42;
  v42 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *(NSObject **)(a1 + 32);
  v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v16)
  {
    WTF::String::utf8();
    v18 = v39 ? (char *)v39 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v18;
    _os_log_impl(&dword_1940B8000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v16 = (uint64_t)v39;
    v39 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
        v16 = WTF::fastFree((WTF *)v16, v17);
      else
        --*(_DWORD *)v16;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v19 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v20 = *v19;
      if ((v20 & 1) != 0)
        break;
      v21 = __ldaxr(v19);
      if (v21 == v20)
      {
        if (!__stxr(v20 | 1, v19))
        {
          v22 = WTF::Logger::observers((WTF::Logger *)v16);
          v23 = *(unsigned int *)(v22 + 12);
          if ((_DWORD)v23)
          {
            v24 = *(uint64_t **)v22;
            v25 = *(_QWORD *)v22 + 8 * v23;
            do
            {
              v26 = *v24;
              LODWORD(buf) = 0;
              WTF::String::String((WTF::String *)((char *)&buf + 8), a3);
              v45 = 0;
              WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(a4, v46);
              v39 = 0;
              v40 = 0;
              v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v40) = 2;
              v39 = v27;
              v28 = HIDWORD(v40);
              *((_DWORD *)v27 + 4 * HIDWORD(v40)) = buf;
              v29 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v27 + 2 * v28 + 1) = v29;
              *((_DWORD *)v27 + 4 * (v28 + 1)) = v45;
              v30 = v46[0];
              if (v46[0])
                *(_DWORD *)v46[0] += 2;
              *((_QWORD *)v27 + 2 * (v28 + 1) + 1) = v30;
              HIDWORD(v40) = v28 + 2;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, a1, a2, &v39);
              v31 = v39;
              if (HIDWORD(v40))
              {
                v32 = 16 * HIDWORD(v40);
                v33 = (WTF::StringImpl **)((char *)v39 + 8);
                do
                {
                  v34 = *v33;
                  *v33 = 0;
                  if (v34)
                  {
                    if (*(_DWORD *)v34 == 2)
                      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v17);
                    else
                      *(_DWORD *)v34 -= 2;
                  }
                  v33 += 2;
                  v32 -= 16;
                }
                while (v32);
                v31 = v39;
              }
              if (v31)
              {
                v39 = 0;
                LODWORD(v40) = 0;
                WTF::fastFree(v31, v17);
              }
              v35 = v46[0];
              v46[0] = 0;
              if (v35)
              {
                if (*(_DWORD *)v35 == 2)
                  WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v35 -= 2;
              }
              v36 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                  WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v36 -= 2;
              }
              ++v24;
            }
            while (v24 != (uint64_t *)v25);
          }
          v37 = __ldxr(v19);
          if (v37 == 1)
          {
            if (!__stlxr(0, v19))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v43;
  v43 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_194769FBC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, WTF::StringImpl *a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19)
{
  unsigned __int8 *v19;
  int v21;

  v21 = __ldxr(v19);
  if (v21 == 1)
  {
    if (!__stlxr(0, v19))
    {
LABEL_6:
      if (a15)
      {
        if (*(_DWORD *)a15 == 2)
          WTF::StringImpl::destroy(a15, a2);
        else
          *(_DWORD *)a15 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4, uint64_t a5)
{
  uint64_t result;
  int v8;
  int v9;
  int v10;
  BOOL v11;
  int v12;
  BOOL v13;
  int v14;
  unsigned int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  NSObject *v20;
  uint64_t v21;
  void *v22;
  char *v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  WTF::Logger *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::Logger *v36;
  const char *v37;
  uint64_t v38;
  WTF::StringImpl **v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  int v44;
  uint64_t v45;
  WTF::Logger *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  __int128 buf;
  int v56;
  WTF::StringImpl *v57;
  int v58;
  WTF::StringImpl *v59[3];

  v59[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  WTF::String::String((WTF::String *)&v52, a4);
  result = WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(a5, &v51);
  if (v53)
  {
    v8 = *((_DWORD *)v53 + 1);
    if (v52)
      goto LABEL_3;
LABEL_91:
    v9 = 0;
    if (v51)
      goto LABEL_4;
LABEL_92:
    v10 = 0;
    goto LABEL_5;
  }
  v8 = 0;
  if (!v52)
    goto LABEL_91;
LABEL_3:
  v9 = *((_DWORD *)v52 + 1);
  if (!v51)
    goto LABEL_92;
LABEL_4:
  v10 = *((_DWORD *)v51 + 1);
LABEL_5:
  if ((v10 | v9) < 0)
    goto LABEL_95;
  v11 = __OFADD__(v9, v10);
  v12 = v9 + v10;
  v13 = v11;
  if (v8 < 0)
    goto LABEL_95;
  if (v13)
    goto LABEL_95;
  result = (v8 + v12);
  if (__OFADD__(v8, v12))
    goto LABEL_95;
  if (v53 && (*((_BYTE *)v53 + 16) & 4) == 0)
  {
    v14 = 0;
    goto LABEL_19;
  }
  if (v52)
  {
    v15 = *((_DWORD *)v52 + 4);
    v14 = (v15 >> 2) & 1;
    if (v51 && (v15 & 4) != 0)
      goto LABEL_18;
  }
  else
  {
    if (v51)
    {
LABEL_18:
      v14 = (*((unsigned __int8 *)v51 + 16) >> 2) & 1;
      goto LABEL_19;
    }
    v14 = 1;
  }
LABEL_19:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v14, v53, (uint64_t)v52, (uint64_t)v51, &buf);
  v54 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_95:
    __break(0xC471u);
    return result;
  }
  v17 = v51;
  v51 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v16);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = v52;
  v52 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v16);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v53;
  v53 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v16);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = *(NSObject **)(a1 + 32);
  v21 = os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v21)
  {
    WTF::String::utf8();
    v23 = v49 ? (char *)v49 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v23;
    _os_log_impl(&dword_1940B8000, v20, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v21 = (uint64_t)v49;
    v49 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 1)
        v21 = WTF::fastFree((WTF *)v21, v22);
      else
        --*(_DWORD *)v21;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v24 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v25 = *v24;
      if ((v25 & 1) != 0)
        break;
      v26 = __ldaxr(v24);
      if (v26 == v25)
      {
        if (!__stxr(v25 | 1, v24))
        {
          v27 = WTF::Logger::observers((WTF::Logger *)v21);
          v28 = *(unsigned int *)(v27 + 12);
          if ((_DWORD)v28)
          {
            v29 = *(uint64_t **)v27;
            v45 = *(_QWORD *)v27 + 8 * v28;
            do
            {
              v30 = *v29;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v56 = 0;
              WTF::String::String((WTF::String *)&v57, a4);
              v58 = 0;
              WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(a5, v59);
              v49 = 0;
              v50 = 0;
              v31 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
              LODWORD(v50) = 3;
              v49 = v31;
              v32 = HIDWORD(v50);
              *((_DWORD *)v31 + 4 * HIDWORD(v50)) = buf;
              v33 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v31 + 2 * v32 + 1) = v33;
              *((_DWORD *)v31 + 4 * (v32 + 1)) = v56;
              v34 = v57;
              if (v57)
                *(_DWORD *)v57 += 2;
              *((_QWORD *)v31 + 2 * (v32 + 1) + 1) = v34;
              *((_DWORD *)v31 + 4 * (v32 + 2)) = v58;
              v35 = v59[0];
              if (v59[0])
                *(_DWORD *)v59[0] += 2;
              *((_QWORD *)v31 + 2 * (v32 + 2) + 1) = v35;
              HIDWORD(v50) = v32 + 3;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v30 + 16))(v30, a1, a2, &v49);
              v36 = v49;
              if (HIDWORD(v50))
              {
                v37 = a4;
                v38 = 16 * HIDWORD(v50);
                v39 = (WTF::StringImpl **)((char *)v49 + 8);
                do
                {
                  v40 = *v39;
                  *v39 = 0;
                  if (v40)
                  {
                    if (*(_DWORD *)v40 == 2)
                      WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v22);
                    else
                      *(_DWORD *)v40 -= 2;
                  }
                  v39 += 2;
                  v38 -= 16;
                }
                while (v38);
                v36 = v49;
                a4 = v37;
              }
              if (v36)
              {
                v49 = 0;
                LODWORD(v50) = 0;
                WTF::fastFree(v36, v22);
              }
              v41 = v59[0];
              v59[0] = 0;
              if (v41)
              {
                if (*(_DWORD *)v41 == 2)
                  WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v41 -= 2;
              }
              v42 = v57;
              v57 = 0;
              if (v42)
              {
                if (*(_DWORD *)v42 == 2)
                  WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v42 -= 2;
              }
              v43 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v43)
              {
                if (*(_DWORD *)v43 == 2)
                  WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v43 -= 2;
              }
              ++v29;
            }
            while (v29 != (uint64_t *)v45);
          }
          v44 = __ldxr(v24);
          if (v44 == 1)
          {
            if (!__stlxr(0, v24))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v54;
  v54 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v22);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_19476A60C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF *a15, int a16, int a17, WTF::StringImpl *a18, WTF::StringImpl *a19, uint64_t a20,WTF::StringImpl *a21,char a22,WTF::StringImpl *a23,uint64_t a24,WTF::StringImpl *a25,uint64_t a26,WTF::StringImpl *a27)
{
  unsigned __int8 *v27;
  int v29;

  v29 = __ldxr(v27);
  if (v29 == 1)
  {
    if (!__stlxr(0, v27))
    {
LABEL_6:
      if (a21)
      {
        if (*(_DWORD *)a21 == 2)
          WTF::StringImpl::destroy(a21, a2);
        else
          *(_DWORD *)a21 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZNS_L11invokeAsyncIZN7WebCore34MediaPlayerPrivateAVFoundationObjC32asyncVideoPlaybackQualityMetricsEvE3__0EEDaRNS_24SerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlvE_vJEED1Ev(_QWORD *a1)
{
  const void *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *a1 = off_1E3204B08;
  v2 = (const void *)a1[7];
  a1[7] = 0;
  if (v2)
    CFRelease(v2);
  v3 = a1[6];
  a1[6] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayerPrivateAVFoundation,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v3 + 48));
  v4 = a1[1];
  if (v4)
  {
    WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::assertIsDead(v4);
    v5 = (unsigned int *)a1[1];
    a1[1] = 0;
    if (v5)
    {
      v6 = v5 + 2;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v5 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
      }
    }
  }
  else
  {
    a1[1] = 0;
  }
  return a1;
}

void sub_19476A8A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *(unsigned int **)(v1 + 8);
  *(_QWORD *)(v1 + 8) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_L11invokeAsyncIZN7WebCore34MediaPlayerPrivateAVFoundationObjC32asyncVideoPlaybackQualityMetricsEvE3__0EEDaRNS_24SerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlvE_vJEED0Ev(WTF *a1, void *a2)
{
  const void *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *(_QWORD *)a1 = off_1E3204B08;
  v3 = (const void *)*((_QWORD *)a1 + 7);
  *((_QWORD *)a1 + 7) = 0;
  if (v3)
    CFRelease(v3);
  v4 = *((_QWORD *)a1 + 6);
  *((_QWORD *)a1 + 6) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayerPrivateAVFoundation,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v4 + 48));
  v5 = *((_QWORD *)a1 + 1);
  if (v5)
  {
    WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::assertIsDead(v5);
    v6 = (unsigned int *)*((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = 0;
    if (v6)
    {
      v7 = v6 + 2;
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, v6 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
      }
    }
  }
  else
  {
    *((_QWORD *)a1 + 1) = 0;
  }
  return WTF::fastFree(a1, a2);
}

void sub_19476A98C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *(unsigned int **)(v1 + 8);
  *(_QWORD *)(v1 + 8) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned int *_ZN3WTF6Detail15CallableWrapperIZNS_L11invokeAsyncIZN7WebCore34MediaPlayerPrivateAVFoundationObjC32asyncVideoPlaybackQualityMetricsEvE3__0EEDaRNS_24SerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlvE_vJEE4callEv(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  const char *v8;
  uint64_t v9;
  WTF *v10;
  unsigned __int8 *v11;
  int v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  BOOL v19;
  WTF::StringImpl *v20;
  unsigned int *result;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  NSObject *v30;
  uint64_t v31;
  void *v32;
  char *v33;
  unsigned __int8 *v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  WTF::Logger *v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  WTF::Logger *v51;
  uint64_t v52;
  WTF::StringImpl **v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  int v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  unsigned __int8 v67;
  unsigned int *v68;
  unsigned __int8 *v69;
  _BYTE *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int *v76;
  __int128 v77;
  int v78;
  unsigned int *v79;
  unsigned int v80;
  unsigned int v81;
  unsigned __int8 *v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  const char *v86;
  uint64_t v87;
  WTF::Logger *v88;
  uint64_t v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  __int128 buf;
  const char *v105;
  WTF::StringImpl *v106;
  int v107;
  WTF::StringImpl *v108;
  int v109;
  WTF::StringImpl *v110;
  int v111;
  WTF::StringImpl *v112;
  int v113;
  WTF::StringImpl *v114;
  int v115;
  WTF::StringImpl *v116;
  int v117;
  _QWORD v118[3];

  v118[1] = *MEMORY[0x1E0C80C00];
  v2 = *(void **)(a1 + 56);
  if (v2 && (v3 = (void *)objc_msgSend(v2, "videoPerformanceMetrics")) != 0)
  {
    v4 = v3;
    v5 = objc_msgSend(v3, "totalNumberOfVideoFrames");
    v6 = objc_msgSend(v4, "numberOfDroppedVideoFrames");
    v7 = objc_msgSend(v4, "numberOfCorruptedVideoFrames");
    objc_msgSend(v4, "totalFrameDelay");
    *(_QWORD *)&buf = __PAIR64__(v6, v5);
    DWORD2(buf) = v7;
    v105 = v8;
    LODWORD(v106) = objc_msgSend(v4, "numberOfDisplayCompositedVideoFrames");
    LOBYTE(v107) = 1;
    v85 = 0uLL;
    v86 = "operator()";
    v87 = 0;
    v9 = WTF::fastMalloc((WTF *)0x98);
    WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::NativePromise(v9, &v85);
    v10 = WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::resolve<WebCore::VideoPlaybackQualityMetrics,std::enable_if<true,void>>(v9, &buf, (WTF::Logger::LogSiteIdentifier *)&v85);
  }
  else
  {
    LOBYTE(v85) = 10;
    buf = 0uLL;
    v105 = "operator()";
    v106 = 0;
    v9 = WTF::fastMalloc((WTF *)0x98);
    WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::NativePromise(v9, &buf);
    v10 = WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::reject<WebCore::PlatformMediaError,std::enable_if<true,void>>(v9, (char *)&v85, (WTF::Logger::LogSiteIdentifier *)&buf);
  }
  v85 = 0uLL;
  v86 = "invokeAsync proxy";
  v87 = 0;
  v11 = (unsigned __int8 *)(v9 + 48);
  v12 = __ldaxr((unsigned __int8 *)(v9 + 48));
  v83 = v9;
  if (v12)
  {
    __clrex();
  }
  else if (!__stxr(1u, v11))
  {
    goto LABEL_9;
  }
  v10 = (WTF *)MEMORY[0x19AEA534C](v9 + 48);
LABEL_9:
  v13 = a1 + 8;
  *(_BYTE *)(v9 + 144) = 1;
  v14 = *(unsigned int **)(a1 + 8);
  if (v14)
  {
    v15 = v14 + 2;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
  }
  v17 = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(v10);
  v18 = v17;
  if (*v17)
    v19 = v17[16] >= 4u;
  else
    v19 = 0;
  if (!v19)
    goto LABEL_127;
  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v85);
  WTF::String::String((WTF::String *)&v95, " invoking chainTo() [");
  WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(v9, &v94);
  WTF::String::String((WTF::String *)&v93, " chainedPromise:");
  WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString((uint64_t)v14, &v92);
  WTF::String::String((WTF::String *)&v91, " isNothing:");
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v20 = (WTF::StringImpl *)buf;
  WTF::String::String((WTF::String *)&v90, "]");
  v88 = v95;
  v103 = v94;
  *(_QWORD *)&buf = v96;
  v102 = v93;
  v100 = v91;
  v101 = v92;
  v98 = v90;
  v99 = v20;
  result = (unsigned int *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t *)&buf, (uint64_t *)&v88, (uint64_t *)&v103, (uint64_t *)&v102, (uint64_t *)&v101, (uint64_t *)&v100, (uint64_t *)&v99, (uint64_t *)&v98, &v97);
  if (!v97)
  {
    __break(0xC471u);
    return result;
  }
  v23 = v90;
  v90 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
    {
      WTF::StringImpl::destroy(v23, v22);
      if (!v20)
        goto LABEL_24;
      goto LABEL_22;
    }
    *(_DWORD *)v23 -= 2;
  }
  if (!v20)
    goto LABEL_24;
LABEL_22:
  if (*(_DWORD *)v20 == 2)
    WTF::StringImpl::destroy(v20, v22);
  else
    *(_DWORD *)v20 -= 2;
LABEL_24:
  v24 = v91;
  v91 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v22);
    else
      *(_DWORD *)v24 -= 2;
  }
  v25 = v92;
  v92 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v22);
    else
      *(_DWORD *)v25 -= 2;
  }
  v26 = v93;
  v93 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v22);
    else
      *(_DWORD *)v26 -= 2;
  }
  v27 = v94;
  v94 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v22);
    else
      *(_DWORD *)v27 -= 2;
  }
  v28 = v95;
  v95 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v22);
    else
      *(_DWORD *)v28 -= 2;
  }
  v29 = v96;
  v96 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, v22);
    else
      *(_DWORD *)v29 -= 2;
  }
  v30 = *((_QWORD *)v18 + 4);
  v31 = os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v31)
  {
    WTF::String::utf8();
    v33 = v88 ? (char *)v88 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v33;
    _os_log_impl(&dword_1940B8000, v30, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v31 = (uint64_t)v88;
    v88 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 1)
        v31 = WTF::fastFree((WTF *)v31, v32);
      else
        --*(_DWORD *)v31;
    }
  }
  if (*v18 && v18[16] >= 4u)
  {
    v34 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v35 = *v34;
      if ((v35 & 1) != 0)
        break;
      v36 = __ldaxr(v34);
      if (v36 == v35)
      {
        if (!__stxr(v35 | 1, v34))
        {
          v82 = (unsigned __int8 *)(v9 + 48);
          v37 = WTF::Logger::observers((WTF::Logger *)v31);
          v38 = *(unsigned int *)(v37 + 12);
          if ((_DWORD)v38)
          {
            v39 = *(uint64_t **)v37;
            v84 = *(_QWORD *)v37 + 8 * v38;
            do
            {
              v40 = *v39;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v85);
              LODWORD(v105) = 0;
              WTF::String::String((WTF::String *)&v106, " invoking chainTo() [");
              v107 = 0;
              WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(v9, &v108);
              v109 = 0;
              WTF::String::String((WTF::String *)&v110, " chainedPromise:");
              v111 = 0;
              WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString((uint64_t)v14, &v112);
              v113 = 0;
              WTF::String::String((WTF::String *)&v114, " isNothing:");
              v115 = 0;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v116 = v103;
              v117 = 0;
              WTF::String::String((WTF::String *)v118, "]");
              v88 = 0;
              v89 = 0;
              v41 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x80);
              LODWORD(v89) = 8;
              v88 = v41;
              v42 = HIDWORD(v89);
              *((_DWORD *)v41 + 4 * HIDWORD(v89)) = buf;
              v43 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v41 + 2 * v42 + 1) = v43;
              *((_DWORD *)v41 + 4 * (v42 + 1)) = (_DWORD)v105;
              v44 = v106;
              if (v106)
                *(_DWORD *)v106 += 2;
              *((_QWORD *)v41 + 2 * (v42 + 1) + 1) = v44;
              *((_DWORD *)v41 + 4 * (v42 + 2)) = v107;
              v45 = v108;
              if (v108)
                *(_DWORD *)v108 += 2;
              *((_QWORD *)v41 + 2 * (v42 + 2) + 1) = v45;
              *((_DWORD *)v41 + 4 * (v42 + 3)) = v109;
              v46 = v110;
              if (v110)
                *(_DWORD *)v110 += 2;
              *((_QWORD *)v41 + 2 * (v42 + 3) + 1) = v46;
              *((_DWORD *)v41 + 4 * (v42 + 4)) = v111;
              v47 = v112;
              if (v112)
                *(_DWORD *)v112 += 2;
              *((_QWORD *)v41 + 2 * (v42 + 4) + 1) = v47;
              *((_DWORD *)v41 + 4 * (v42 + 5)) = v113;
              v48 = v114;
              if (v114)
                *(_DWORD *)v114 += 2;
              *((_QWORD *)v41 + 2 * (v42 + 5) + 1) = v48;
              *((_DWORD *)v41 + 4 * (v42 + 6)) = v115;
              v49 = v116;
              if (v116)
                *(_DWORD *)v116 += 2;
              *((_QWORD *)v41 + 2 * (v42 + 6) + 1) = v49;
              *((_DWORD *)v41 + 4 * (v42 + 7)) = v117;
              v50 = v118[0];
              if (v118[0])
                *(_DWORD *)v118[0] += 2;
              *((_QWORD *)v41 + 2 * (v42 + 7) + 1) = v50;
              HIDWORD(v89) = v42 + 8;
              (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, WTF::Logger **))(*(_QWORD *)v40 + 16))(v40, v18, 4, &v88);
              v51 = v88;
              if (HIDWORD(v89))
              {
                v52 = 16 * HIDWORD(v89);
                v53 = (WTF::StringImpl **)((char *)v88 + 8);
                do
                {
                  v54 = *v53;
                  *v53 = 0;
                  if (v54)
                  {
                    if (*(_DWORD *)v54 == 2)
                      WTF::StringImpl::destroy(v54, (WTF::StringImpl *)v32);
                    else
                      *(_DWORD *)v54 -= 2;
                  }
                  v53 += 2;
                  v52 -= 16;
                }
                while (v52);
                v51 = v88;
                v9 = v83;
              }
              if (v51)
              {
                v88 = 0;
                LODWORD(v89) = 0;
                WTF::fastFree(v51, v32);
              }
              v55 = (WTF::StringImpl *)v118[0];
              v118[0] = 0;
              if (v55)
              {
                if (*(_DWORD *)v55 == 2)
                  WTF::StringImpl::destroy(v55, (WTF::StringImpl *)v32);
                else
                  *(_DWORD *)v55 -= 2;
              }
              v56 = v116;
              v116 = 0;
              if (v56)
              {
                if (*(_DWORD *)v56 == 2)
                  WTF::StringImpl::destroy(v56, (WTF::StringImpl *)v32);
                else
                  *(_DWORD *)v56 -= 2;
              }
              v57 = v114;
              v114 = 0;
              if (v57)
              {
                if (*(_DWORD *)v57 == 2)
                  WTF::StringImpl::destroy(v57, (WTF::StringImpl *)v32);
                else
                  *(_DWORD *)v57 -= 2;
              }
              v58 = v112;
              v112 = 0;
              if (v58)
              {
                if (*(_DWORD *)v58 == 2)
                  WTF::StringImpl::destroy(v58, (WTF::StringImpl *)v32);
                else
                  *(_DWORD *)v58 -= 2;
              }
              v59 = v110;
              v110 = 0;
              if (v59)
              {
                if (*(_DWORD *)v59 == 2)
                  WTF::StringImpl::destroy(v59, (WTF::StringImpl *)v32);
                else
                  *(_DWORD *)v59 -= 2;
              }
              v60 = v108;
              v108 = 0;
              if (v60)
              {
                if (*(_DWORD *)v60 == 2)
                  WTF::StringImpl::destroy(v60, (WTF::StringImpl *)v32);
                else
                  *(_DWORD *)v60 -= 2;
              }
              v61 = v106;
              v106 = 0;
              if (v61)
              {
                if (*(_DWORD *)v61 == 2)
                  WTF::StringImpl::destroy(v61, (WTF::StringImpl *)v32);
                else
                  *(_DWORD *)v61 -= 2;
              }
              v62 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v62)
              {
                if (*(_DWORD *)v62 == 2)
                  WTF::StringImpl::destroy(v62, (WTF::StringImpl *)v32);
                else
                  *(_DWORD *)v62 -= 2;
              }
              ++v39;
            }
            while (v39 != (uint64_t *)v84);
          }
          v63 = __ldxr(v34);
          if (v63 == 1)
          {
            v11 = v82;
            if (!__stlxr(0, v34))
              break;
          }
          else
          {
            __clrex();
            v11 = v82;
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  v17 = (unsigned __int8 *)v97;
  v97 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
    {
      v17 = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)v17, (WTF::StringImpl *)v32);
      if (!v14)
        goto LABEL_132;
      goto LABEL_128;
    }
    *(_DWORD *)v17 -= 2;
  }
LABEL_127:
  if (!v14)
    goto LABEL_132;
LABEL_128:
  v64 = v14 + 2;
  do
  {
    v65 = __ldaxr(v64);
    v66 = v65 - 1;
  }
  while (__stlxr(v66, v64));
  if (!v66)
  {
    atomic_store(1u, v14 + 2);
    v17 = (unsigned __int8 *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v14 + 16))(v14);
  }
LABEL_132:
  v67 = atomic_load((unsigned __int8 *)(v9 + 145));
  v68 = *(unsigned int **)v13;
  v69 = (unsigned __int8 *)(*(_QWORD *)v13 + 48);
  if (__ldaxr(v69))
  {
    __clrex();
LABEL_135:
    v17 = (unsigned __int8 *)MEMORY[0x19AEA534C](v69);
    goto LABEL_136;
  }
  if (__stxr(1u, v69))
    goto LABEL_135;
LABEL_136:
  v71 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v17);
  if (*v71 && v71[16] >= 4u)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>((uint64_t)v71, 4u, (WTF::Logger::LogSiteIdentifier *)&v85, " runSynchronouslyOnTarget ", (uint64_t)v68);
  atomic_store(v67, (unsigned __int8 *)v68 + 145);
  v72 = __ldxr(v69);
  if (v72 != 1)
  {
    __clrex();
    goto LABEL_143;
  }
  if (__stlxr(0, v69))
LABEL_143:
    WTF::Lock::unlockSlow((WTF::Lock *)v69);
  if (*(_DWORD *)(v9 + 96))
  {
    result = (unsigned int *)WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::settleChainedPromise(v9, (unsigned int **)v13);
  }
  else
  {
    result = (unsigned int *)(v9 + 128);
    v73 = *(unsigned int *)(v9 + 140);
    if ((_DWORD)v73 == *(_DWORD *)(v9 + 136))
    {
      result = (unsigned int *)WTF::Vector<WTF::NativePromiseProducer<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v73 + 1, v13);
      v13 = (unint64_t)result;
      LODWORD(v73) = *(_DWORD *)(v9 + 140);
      v74 = *(_QWORD *)(v9 + 128);
    }
    else
    {
      v74 = *(_QWORD *)result;
    }
    v75 = v74 + 40 * v73;
    v76 = *(unsigned int **)v13;
    *(_QWORD *)v13 = 0;
    *(_QWORD *)v75 = v76;
    v75 += 8;
    v77 = *(_OWORD *)(v13 + 24);
    *(_OWORD *)v75 = *(_OWORD *)(v13 + 8);
    *(_OWORD *)(v75 + 16) = v77;
    ++*(_DWORD *)(v9 + 140);
  }
  v78 = __ldxr(v11);
  if (v78 != 1)
  {
    __clrex();
    goto LABEL_154;
  }
  if (__stlxr(0, v11))
LABEL_154:
    result = (unsigned int *)WTF::Lock::unlockSlow((WTF::Lock *)v11);
  v79 = (unsigned int *)(v9 + 8);
  do
  {
    v80 = __ldaxr(v79);
    v81 = v80 - 1;
  }
  while (__stlxr(v81, v79));
  if (!v81)
  {
    atomic_store(1u, (unsigned int *)(v9 + 8));
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  }
  return result;
}

void sub_19476B538(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF::Lock *a17, unsigned int *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,unsigned int *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,WTF *a31,int a32,int a33,WTF::StringImpl *a34,WTF::StringImpl *a35,WTF::StringImpl *a36,WTF::StringImpl *a37,WTF::StringImpl *a38,WTF::StringImpl *a39,uint64_t a40,WTF::StringImpl *a41)
{
  unsigned __int8 *v41;
  int v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  int v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;

  v43 = __ldxr(v41);
  if (v43 == 1)
  {
    if (!__stlxr(0, v41))
    {
LABEL_6:
      if (a41)
      {
        if (*(_DWORD *)a41 == 2)
          WTF::StringImpl::destroy(a41, a2);
        else
          *(_DWORD *)a41 -= 2;
      }
      if (a25)
      {
        v44 = a25 + 2;
        do
        {
          v45 = __ldaxr(v44);
          v46 = v45 - 1;
        }
        while (__stlxr(v46, v44));
        if (!v46)
        {
          atomic_store(1u, a25 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)a25 + 16))(a25);
        }
      }
      v47 = __ldxr((unsigned __int8 *)a17);
      if (v47 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)a17))
          goto LABEL_19;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow(a17);
LABEL_19:
      v48 = a18 + 2;
      do
      {
        v49 = __ldaxr(v48);
        v50 = v49 - 1;
      }
      while (__stlxr(v50, v48));
      if (!v50)
      {
        atomic_store(1u, a18 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)a18 + 16))(a18);
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

WTF *WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::resolve<WebCore::VideoPlaybackQualityMetrics,std::enable_if<true,void>>(uint64_t a1, _OWORD *a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::Lock *v6;
  _BYTE *v8;
  BOOL v9;
  uint64_t v10;
  __int128 v11;
  WTF *result;
  int v13;
  WTF::Lock *v14;
  char v15;
  char v16;

  v6 = (WTF::Lock *)(a1 + 48);
  v14 = v6;
  v15 = 1;
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_5;
  }
  v6 = (WTF::Lock *)MEMORY[0x19AEA534C]();
LABEL_5:
  v8 = (_BYTE *)WTF::NativePromiseBase::logChannel(v6);
  if (*v8)
    v9 = v8[16] >= 4u;
  else
    v9 = 0;
  if (v9)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>((uint64_t)v8, 4u, a3, " resolving ", a1);
  v10 = *(unsigned int *)(a1 + 96);
  if ((_DWORD)v10 != -1)
    ((void (*)(char *, uint64_t))off_1E3204AE0[v10])(&v16, a1 + 56);
  *(_DWORD *)(a1 + 96) = -1;
  v11 = a2[1];
  *(_OWORD *)(a1 + 56) = *a2;
  *(_OWORD *)(a1 + 72) = v11;
  *(_DWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 1;
  result = WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::dispatchAll(a1, (unsigned __int8 **)&v14);
  if (v15)
  {
    result = v14;
    v13 = __ldxr((unsigned __int8 *)v14);
    if (v13 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v14))
        return result;
    }
    else
    {
      __clrex();
    }
    return (WTF *)WTF::Lock::unlockSlow(result);
  }
  return result;
}

void sub_19476BB9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::Lock *a10, char a11)
{
  int v12;

  if (a11)
  {
    v12 = __ldxr((unsigned __int8 *)a10);
    if (v12 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)a10))
        goto LABEL_7;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow(a10);
  }
LABEL_7:
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4, uint64_t a5)
{
  uint64_t result;
  int v8;
  int v9;
  int v10;
  BOOL v11;
  int v12;
  BOOL v13;
  int v14;
  unsigned int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  NSObject *v20;
  uint64_t v21;
  void *v22;
  char *v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  WTF::Logger *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::Logger *v36;
  const char *v37;
  uint64_t v38;
  WTF::StringImpl **v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  int v44;
  uint64_t v45;
  WTF::Logger *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  __int128 buf;
  int v56;
  WTF::StringImpl *v57;
  int v58;
  WTF::StringImpl *v59[3];

  v59[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  WTF::String::String((WTF::String *)&v52, a4);
  result = WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(a5, &v51);
  if (v53)
  {
    v8 = *((_DWORD *)v53 + 1);
    if (v52)
      goto LABEL_3;
LABEL_91:
    v9 = 0;
    if (v51)
      goto LABEL_4;
LABEL_92:
    v10 = 0;
    goto LABEL_5;
  }
  v8 = 0;
  if (!v52)
    goto LABEL_91;
LABEL_3:
  v9 = *((_DWORD *)v52 + 1);
  if (!v51)
    goto LABEL_92;
LABEL_4:
  v10 = *((_DWORD *)v51 + 1);
LABEL_5:
  if ((v10 | v9) < 0)
    goto LABEL_95;
  v11 = __OFADD__(v9, v10);
  v12 = v9 + v10;
  v13 = v11;
  if (v8 < 0)
    goto LABEL_95;
  if (v13)
    goto LABEL_95;
  result = (v8 + v12);
  if (__OFADD__(v8, v12))
    goto LABEL_95;
  if (v53 && (*((_BYTE *)v53 + 16) & 4) == 0)
  {
    v14 = 0;
    goto LABEL_19;
  }
  if (v52)
  {
    v15 = *((_DWORD *)v52 + 4);
    v14 = (v15 >> 2) & 1;
    if (v51 && (v15 & 4) != 0)
      goto LABEL_18;
  }
  else
  {
    if (v51)
    {
LABEL_18:
      v14 = (*((unsigned __int8 *)v51 + 16) >> 2) & 1;
      goto LABEL_19;
    }
    v14 = 1;
  }
LABEL_19:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v14, v53, (uint64_t)v52, (uint64_t)v51, &buf);
  v54 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_95:
    __break(0xC471u);
    return result;
  }
  v17 = v51;
  v51 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v16);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = v52;
  v52 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v16);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v53;
  v53 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v16);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = *(NSObject **)(a1 + 32);
  v21 = os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v21)
  {
    WTF::String::utf8();
    v23 = v49 ? (char *)v49 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v23;
    _os_log_impl(&dword_1940B8000, v20, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v21 = (uint64_t)v49;
    v49 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 1)
        v21 = WTF::fastFree((WTF *)v21, v22);
      else
        --*(_DWORD *)v21;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v24 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v25 = *v24;
      if ((v25 & 1) != 0)
        break;
      v26 = __ldaxr(v24);
      if (v26 == v25)
      {
        if (!__stxr(v25 | 1, v24))
        {
          v27 = WTF::Logger::observers((WTF::Logger *)v21);
          v28 = *(unsigned int *)(v27 + 12);
          if ((_DWORD)v28)
          {
            v29 = *(uint64_t **)v27;
            v45 = *(_QWORD *)v27 + 8 * v28;
            do
            {
              v30 = *v29;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v56 = 0;
              WTF::String::String((WTF::String *)&v57, a4);
              v58 = 0;
              WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(a5, v59);
              v49 = 0;
              v50 = 0;
              v31 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
              LODWORD(v50) = 3;
              v49 = v31;
              v32 = HIDWORD(v50);
              *((_DWORD *)v31 + 4 * HIDWORD(v50)) = buf;
              v33 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v31 + 2 * v32 + 1) = v33;
              *((_DWORD *)v31 + 4 * (v32 + 1)) = v56;
              v34 = v57;
              if (v57)
                *(_DWORD *)v57 += 2;
              *((_QWORD *)v31 + 2 * (v32 + 1) + 1) = v34;
              *((_DWORD *)v31 + 4 * (v32 + 2)) = v58;
              v35 = v59[0];
              if (v59[0])
                *(_DWORD *)v59[0] += 2;
              *((_QWORD *)v31 + 2 * (v32 + 2) + 1) = v35;
              HIDWORD(v50) = v32 + 3;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v30 + 16))(v30, a1, a2, &v49);
              v36 = v49;
              if (HIDWORD(v50))
              {
                v37 = a4;
                v38 = 16 * HIDWORD(v50);
                v39 = (WTF::StringImpl **)((char *)v49 + 8);
                do
                {
                  v40 = *v39;
                  *v39 = 0;
                  if (v40)
                  {
                    if (*(_DWORD *)v40 == 2)
                      WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v22);
                    else
                      *(_DWORD *)v40 -= 2;
                  }
                  v39 += 2;
                  v38 -= 16;
                }
                while (v38);
                v36 = v49;
                a4 = v37;
              }
              if (v36)
              {
                v49 = 0;
                LODWORD(v50) = 0;
                WTF::fastFree(v36, v22);
              }
              v41 = v59[0];
              v59[0] = 0;
              if (v41)
              {
                if (*(_DWORD *)v41 == 2)
                  WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v41 -= 2;
              }
              v42 = v57;
              v57 = 0;
              if (v42)
              {
                if (*(_DWORD *)v42 == 2)
                  WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v42 -= 2;
              }
              v43 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v43)
              {
                if (*(_DWORD *)v43 == 2)
                  WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v43 -= 2;
              }
              ++v29;
            }
            while (v29 != (uint64_t *)v45);
          }
          v44 = __ldxr(v24);
          if (v44 == 1)
          {
            if (!__stlxr(0, v24))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v54;
  v54 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v22);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_19476C0C0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF *a15, int a16, int a17, WTF::StringImpl *a18, WTF::StringImpl *a19, uint64_t a20,WTF::StringImpl *a21,char a22,WTF::StringImpl *a23,uint64_t a24,WTF::StringImpl *a25,uint64_t a26,WTF::StringImpl *a27)
{
  unsigned __int8 *v27;
  int v29;

  v29 = __ldxr(v27);
  if (v29 == 1)
  {
    if (!__stlxr(0, v27))
    {
LABEL_6:
      if (a21)
      {
        if (*(_DWORD *)a21 == 2)
          WTF::StringImpl::destroy(a21, a2);
        else
          *(_DWORD *)a21 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

WTF *WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::dispatchAll(uint64_t a1, unsigned __int8 **a2)
{
  void *v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int **v9;
  void *v10;
  WTF::NativePromiseBase **v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  WTF *v15;
  WTF *v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  WTF *result;
  _QWORD v23[2];
  unsigned int **v24;
  unint64_t v25;
  uint64_t v26;
  WTF *v27;
  uint64_t v28;
  uint64_t v29;

  v24 = (unsigned int **)&v26;
  v25 = 1;
  v27 = (WTF *)&v29;
  v28 = 1;
  v4 = *(void **)(a1 + 104);
  if (v4 == (void *)(a1 + 120))
  {
    v6 = *(unsigned int *)(a1 + 116);
    memcpy(&v29, v4, 8 * v6);
  }
  else
  {
    *(_QWORD *)(a1 + 104) = a1 + 120;
    v27 = (WTF *)v4;
    v5 = *(_DWORD *)(a1 + 112);
    LODWORD(v6) = *(_DWORD *)(a1 + 116);
    *(_DWORD *)(a1 + 112) = 1;
    LODWORD(v28) = v5;
  }
  HIDWORD(v28) = v6;
  *(_QWORD *)(a1 + 112) = 1;
  v7 = *(_DWORD *)(a1 + 136);
  v8 = *(_DWORD *)(a1 + 140);
  v9 = *(unsigned int ***)(a1 + 128);
  v24 = v9;
  v25 = __PAIR64__(v8, v7);
  v23[0] = 0;
  *(_QWORD *)(a1 + 128) = 0;
  v23[1] = 0;
  *(_QWORD *)(a1 + 136) = 0;
  WTF::Vector<WTF::NativePromiseProducer<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v23, v4);
  if (HIDWORD(v28))
  {
    v11 = (WTF::NativePromiseBase **)v27;
    v12 = 8 * HIDWORD(v28);
    do
    {
      WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(*v11++, a1, a2);
      v12 -= 8;
    }
    while (v12);
    v9 = v24;
    v8 = HIDWORD(v25);
  }
  if (v8)
  {
    v13 = 40 * v8;
    do
    {
      WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::settleChainedPromise(a1, v9);
      v9 += 5;
      v13 -= 40;
    }
    while (v13);
  }
  WTF::Vector<WTF::NativePromiseProducer<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v24, v10);
  if (HIDWORD(v28))
  {
    v15 = v27;
    v16 = (WTF *)((char *)v27 + 8 * HIDWORD(v28));
    do
    {
      v17 = *(unsigned int **)v15;
      *(_QWORD *)v15 = 0;
      if (v17)
      {
        v18 = v17 + 2;
        do
        {
          v19 = __ldaxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
        {
          atomic_store(1u, v17 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 8))(v17);
        }
      }
      v15 = (WTF *)((char *)v15 + 8);
    }
    while (v15 != v16);
  }
  result = v27;
  if (&v29 != (uint64_t *)v27 && v27 != 0)
  {
    v27 = 0;
    LODWORD(v28) = 0;
    return (WTF *)WTF::fastFree(result, v14);
  }
  return result;
}

void sub_19476C46C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, WTF *a14, int a15, unsigned int a16)
{
  WTF *v16;
  void *v18;
  WTF *v19;
  unsigned int **v21;
  unsigned int **v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;

  WTF::Vector<WTF::NativePromiseProducer<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a11, a2);
  if (a16)
  {
    v21 = (unsigned int **)a14;
    v22 = (unsigned int **)((char *)a14 + 8 * a16);
    do
    {
      v23 = *v21;
      *v21 = 0;
      if (v23)
      {
        v24 = v23 + 2;
        do
        {
          v25 = __ldaxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
        {
          atomic_store(1u, v23 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v23 + 8))(v23);
        }
      }
      ++v21;
    }
    while (v21 != v22);
  }
  v19 = a14;
  if (v16 != a14 && a14 != 0)
  {
    a14 = 0;
    a15 = 0;
    WTF::fastFree(v19, v18);
  }
  _Unwind_Resume(a1);
}

unsigned __int8 *WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(WTF::NativePromiseBase *a1, uint64_t a2, unsigned __int8 **a3)
{
  WTF::NativePromiseBase *v5;
  int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  _QWORD *v12;
  unsigned __int8 *result;
  BOOL v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;
  int v19;
  int v20;
  uint64_t v23;
  int v24;
  __int128 v25;
  int v26;
  _OWORD v28[2];
  uint64_t v29;

  v5 = a1;
  if (*((_QWORD *)a1 + 2))
  {
    v6 = atomic_load((unsigned __int8 *)(a2 + 145));
    if (v6 != 1
      || (a1 = (WTF::NativePromiseBase *)(*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 24))(*((_QWORD **)a1 + 2)),
          !(_DWORD)a1))
    {
      v7 = *((_QWORD *)v5 + 2);
      v8 = (unsigned int *)((char *)v5 + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
      v10 = (unsigned int *)(a2 + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
      v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *v12 = &off_1E3205238;
      v12[1] = v5;
      v12[2] = v5;
      v12[3] = a2;
      *(_QWORD *)&v28[0] = v12;
      (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v7 + 16))(v7, v28);
      result = *(unsigned __int8 **)&v28[0];
      *(_QWORD *)&v28[0] = 0;
      if (result)
        return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 8))(result);
      return result;
    }
  }
  if (*((_BYTE *)v5 + 56))
  {
    *(_QWORD *)&v28[0] = v5;
    result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(a1);
    if (*result)
      v14 = result[16] >= 4u;
    else
      v14 = 0;
    if (v14)
      return (unsigned __int8 *)WTF::Logger::log<char [32],WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, 4u, "ThenCallback disconnected from ", a2, " aborting [callback:", (int)v28, " callSite:", (WTF::NativePromiseBase *)((char *)v5 + 24), "]");
    return result;
  }
  v15 = *a3;
  v16 = __ldxr(*a3);
  if (v16 != 1)
  {
    __clrex();
    goto LABEL_22;
  }
  if (__stlxr(0, v15))
LABEL_22:
    WTF::Lock::unlockSlow((WTF::Lock *)v15);
  v17 = (unsigned __int8 *)(a2 + 48);
  if (__ldaxr((unsigned __int8 *)(a2 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v17))
  {
    goto LABEL_27;
  }
  MEMORY[0x19AEA534C](a2 + 48);
LABEL_27:
  v19 = *(_DWORD *)(a2 + 96);
  v20 = __ldxr(v17);
  if (v20 != 1)
  {
    __clrex();
    goto LABEL_31;
  }
  if (__stlxr(0, v17))
LABEL_31:
    WTF::Lock::unlockSlow((WTF::Lock *)(a2 + 48));
  if (v19 != 2)
  {
    if (__ldaxr(v17))
    {
      __clrex();
    }
    else if (!__stxr(1u, v17))
    {
      goto LABEL_48;
    }
    MEMORY[0x19AEA534C](a2 + 48);
LABEL_48:
    if (*(_DWORD *)(a2 + 96) != 1)
      goto LABEL_60;
    v25 = *(_OWORD *)(a2 + 72);
    v28[0] = *(_OWORD *)(a2 + 56);
    v28[1] = v25;
    v29 = *(_QWORD *)(a2 + 88);
    v26 = __ldxr(v17);
    if (v26 == 1)
    {
      if (!__stlxr(0, v17))
        goto LABEL_54;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(a2 + 48));
LABEL_54:
    (*(void (**)(WTF::NativePromiseBase *, uint64_t, _OWORD *))(*(_QWORD *)v5 + 24))(v5, a2, v28);
    goto LABEL_55;
  }
  if (__ldaxr(v17))
  {
    __clrex();
  }
  else if (!__stxr(1u, v17))
  {
    goto LABEL_39;
  }
  MEMORY[0x19AEA534C](a2 + 48);
LABEL_39:
  if (*(_DWORD *)(a2 + 96) != 2)
  {
LABEL_60:
    result = (unsigned __int8 *)std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
    return result;
  }
  v23 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  v24 = __ldxr(v17);
  if (v24 == 1)
  {
    if (!__stlxr(0, v17))
      goto LABEL_45;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(a2 + 48));
LABEL_45:
  (*(void (**)(_OWORD *__return_ptr, uint64_t))(*(_QWORD *)v23 + 16))(v28, v23);
  (*(void (**)(WTF::NativePromiseBase *, uint64_t, _OWORD *))(*(_QWORD *)v5 + 24))(v5, a2, v28);
  (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
LABEL_55:
  result = *a3;
  if (__ldaxr(*a3))
  {
    __clrex();
  }
  else if (!__stxr(1u, result))
  {
    return result;
  }
  return (unsigned __int8 *)MEMORY[0x19AEA534C]();
}

void sub_19476C80C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unsigned __int8 **v11;

  if (__ldaxr(*v11))
  {
    __clrex();
  }
  else if (!__stxr(1u, *v11))
  {
LABEL_6:
    _Unwind_Resume(exception_object);
  }
  MEMORY[0x19AEA534C]();
  goto LABEL_6;
}

uint64_t WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::settleChainedPromise(uint64_t a1, unsigned int **a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned __int8 *v6;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::Lock *v11;
  int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t result;
  unsigned int v17;
  unsigned int v18;
  _QWORD v19[4];
  WTF::Lock *v20;
  char v21;
  unsigned int *v22;

  v3 = *a2;
  *a2 = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  v19[0] = 0;
  v19[1] = 0;
  v19[2] = "<chained promise>";
  v19[3] = 0;
  v6 = (unsigned __int8 *)(v3 + 12);
  v20 = (WTF::Lock *)(v3 + 12);
  v21 = 1;
  if (__ldaxr((unsigned __int8 *)v3 + 48))
  {
    __clrex();
LABEL_7:
    v6 = (unsigned __int8 *)MEMORY[0x19AEA534C]();
    goto LABEL_8;
  }
  if (__stxr(1u, v6))
    goto LABEL_7;
LABEL_8:
  v8 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v6);
  if (*v8 && v8[16] >= 4u)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>((uint64_t)v8, 4u, (WTF::Logger::LogSiteIdentifier *)v19, " settling chained promise ", (uint64_t)v3);
  v9 = v3[24];
  v10 = *(unsigned int *)(a1 + 96);
  if ((_DWORD)v9 == -1)
  {
    if ((_DWORD)v10 == -1)
      goto LABEL_16;
  }
  else if ((_DWORD)v10 == -1)
  {
    ((void (*)(unsigned int **, unsigned int *))off_1E3204AE0[v9])(&v22, v3 + 14);
    v3[24] = -1;
    goto LABEL_16;
  }
  v22 = v3 + 14;
  ((void (*)(unsigned int **))off_1E3204B20[v10])(&v22);
LABEL_16:
  WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::dispatchAll(v3, &v20);
  if (v21)
  {
    v11 = v20;
    v12 = __ldxr((unsigned __int8 *)v20);
    if (v12 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v20))
        goto LABEL_22;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow(v11);
  }
LABEL_22:
  v13 = v3 + 2;
  do
  {
    v14 = __ldaxr(v13);
    v15 = v14 - 1;
  }
  while (__stlxr(v15, v13));
  if (!v15)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
  }
  result = WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::assertIsDead((uint64_t)v3);
  do
  {
    v17 = __ldaxr(v13);
    v18 = v17 - 1;
  }
  while (__stlxr(v18, v13));
  if (!v18)
  {
    atomic_store(1u, v3 + 2);
    return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
  }
  return result;
}

void sub_19476CAE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::Lock *a14, char a15)
{
  unsigned int *v15;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;

  if (v15)
  {
    v17 = v15 + 2;
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      atomic_store(1u, v15 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 16))(v15);
    }
    WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::assertIsDead((uint64_t)v15);
    do
    {
      v20 = __ldaxr(v17);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v17));
    if (!v21)
    {
      atomic_store(1u, v15 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 16))(v15);
    }
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WTF::Logger::log<char [32],WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>(uint64_t a1, unsigned int a2, char *a3, uint64_t a4, const char *a5, int a6, const char *a7, WTF::Logger::LogSiteIdentifier *a8, char *a9)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  NSObject *v19;
  uint64_t v20;
  void *v21;
  char *v22;
  unsigned __int8 *v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  WTF::Logger *v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  WTF::Logger *v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl **v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  int v51;
  uint64_t v52;
  WTF::Logger *v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  __int128 buf;
  int v75;
  WTF::StringImpl *v76;
  int v77;
  WTF::StringImpl *v78;
  int v79;
  WTF::StringImpl *v80;
  int v81;
  WTF::StringImpl *v82;
  int v83;
  WTF::StringImpl *v84;
  int v85;
  _QWORD v86[3];

  v86[1] = *MEMORY[0x1E0C80C00];
  WTF::String::String((WTF::String *)&v67, a3);
  WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(a4, &v66);
  WTF::String::String((WTF::String *)&v65, a5);
  WTF::LogArgument<void const*>::toString();
  WTF::String::String((WTF::String *)&v63, a7);
  WTF::Logger::LogSiteIdentifier::toString(a8);
  WTF::String::String((WTF::String *)&v61, a9);
  v59 = v66;
  v73 = v65;
  *(_QWORD *)&buf = v67;
  v72 = v64;
  v70 = v62;
  v71 = v63;
  v69 = v61;
  result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v59, (uint64_t *)&v73, (uint64_t *)&v72, (uint64_t *)&v71, (uint64_t *)&v70, (uint64_t *)&v69, &v68);
  if (v68)
  {
    v12 = v61;
    v61 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = v62;
    v62 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v11);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = v63;
    v63 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v11);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = v64;
    v64 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v11);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = v65;
    v65 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v11);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = v66;
    v66 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v11);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = v67;
    v67 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v11);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = *(NSObject **)(a1 + 32);
    v20 = os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v20)
    {
      WTF::String::utf8();
      v22 = v59 ? (char *)v59 + 16 : 0;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v22;
      _os_log_impl(&dword_1940B8000, v19, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      v20 = (uint64_t)v59;
      v59 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 1)
          v20 = WTF::fastFree((WTF *)v20, v21);
        else
          --*(_DWORD *)v20;
      }
    }
    if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
    {
      v23 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v24 = *v23;
        if ((v24 & 1) != 0)
          break;
        v25 = __ldaxr(v23);
        if (v25 == v24)
        {
          if (!__stxr(v24 | 1, v23))
          {
            v26 = WTF::Logger::observers((WTF::Logger *)v20);
            v27 = *(unsigned int *)(v26 + 12);
            if ((_DWORD)v27)
            {
              v28 = *(uint64_t **)v26;
              v52 = *(_QWORD *)v26 + 8 * v27;
              do
              {
                v29 = *v28;
                LODWORD(buf) = 0;
                WTF::String::String((WTF::String *)((char *)&buf + 8), a3);
                v75 = 0;
                WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(a4, &v76);
                v77 = 0;
                WTF::String::String((WTF::String *)&v78, a5);
                v79 = 0;
                WTF::LogArgument<void const*>::toString();
                v81 = 0;
                WTF::String::String((WTF::String *)&v82, a7);
                v83 = 0;
                WTF::Logger::LogSiteIdentifier::toString(a8);
                v85 = 0;
                WTF::String::String((WTF::String *)v86, a9);
                v59 = 0;
                v60 = 0;
                v30 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x70);
                LODWORD(v60) = 7;
                v59 = v30;
                v31 = HIDWORD(v60);
                *((_DWORD *)v30 + 4 * HIDWORD(v60)) = buf;
                v32 = *((_QWORD *)&buf + 1);
                if (*((_QWORD *)&buf + 1))
                  **((_DWORD **)&buf + 1) += 2;
                *((_QWORD *)v30 + 2 * v31 + 1) = v32;
                *((_DWORD *)v30 + 4 * (v31 + 1)) = v75;
                v33 = v76;
                if (v76)
                  *(_DWORD *)v76 += 2;
                *((_QWORD *)v30 + 2 * (v31 + 1) + 1) = v33;
                *((_DWORD *)v30 + 4 * (v31 + 2)) = v77;
                v34 = v78;
                if (v78)
                  *(_DWORD *)v78 += 2;
                *((_QWORD *)v30 + 2 * (v31 + 2) + 1) = v34;
                *((_DWORD *)v30 + 4 * (v31 + 3)) = v79;
                v35 = v80;
                if (v80)
                  *(_DWORD *)v80 += 2;
                *((_QWORD *)v30 + 2 * (v31 + 3) + 1) = v35;
                *((_DWORD *)v30 + 4 * (v31 + 4)) = v81;
                v36 = v82;
                if (v82)
                  *(_DWORD *)v82 += 2;
                *((_QWORD *)v30 + 2 * (v31 + 4) + 1) = v36;
                *((_DWORD *)v30 + 4 * (v31 + 5)) = v83;
                v37 = v84;
                if (v84)
                  *(_DWORD *)v84 += 2;
                *((_QWORD *)v30 + 2 * (v31 + 5) + 1) = v37;
                *((_DWORD *)v30 + 4 * (v31 + 6)) = v85;
                v38 = v86[0];
                if (v86[0])
                  *(_DWORD *)v86[0] += 2;
                *((_QWORD *)v30 + 2 * (v31 + 6) + 1) = v38;
                HIDWORD(v60) = v31 + 7;
                (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v29 + 16))(v29, a1, a2, &v59);
                v39 = v59;
                if (HIDWORD(v60))
                {
                  v40 = a4;
                  v41 = 16 * HIDWORD(v60);
                  v42 = (WTF::StringImpl **)((char *)v59 + 8);
                  do
                  {
                    v43 = *v42;
                    *v42 = 0;
                    if (v43)
                    {
                      if (*(_DWORD *)v43 == 2)
                        WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v21);
                      else
                        *(_DWORD *)v43 -= 2;
                    }
                    v42 += 2;
                    v41 -= 16;
                  }
                  while (v41);
                  v39 = v59;
                  a4 = v40;
                }
                if (v39)
                {
                  v59 = 0;
                  LODWORD(v60) = 0;
                  WTF::fastFree(v39, v21);
                }
                v44 = (WTF::StringImpl *)v86[0];
                v86[0] = 0;
                if (v44)
                {
                  if (*(_DWORD *)v44 == 2)
                    WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v21);
                  else
                    *(_DWORD *)v44 -= 2;
                }
                v45 = v84;
                v84 = 0;
                if (v45)
                {
                  if (*(_DWORD *)v45 == 2)
                    WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v21);
                  else
                    *(_DWORD *)v45 -= 2;
                }
                v46 = v82;
                v82 = 0;
                if (v46)
                {
                  if (*(_DWORD *)v46 == 2)
                    WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v21);
                  else
                    *(_DWORD *)v46 -= 2;
                }
                v47 = v80;
                v80 = 0;
                if (v47)
                {
                  if (*(_DWORD *)v47 == 2)
                    WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v21);
                  else
                    *(_DWORD *)v47 -= 2;
                }
                v48 = v78;
                v78 = 0;
                if (v48)
                {
                  if (*(_DWORD *)v48 == 2)
                    WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v21);
                  else
                    *(_DWORD *)v48 -= 2;
                }
                v49 = v76;
                v76 = 0;
                if (v49)
                {
                  if (*(_DWORD *)v49 == 2)
                    WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v21);
                  else
                    *(_DWORD *)v49 -= 2;
                }
                v50 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                *((_QWORD *)&buf + 1) = 0;
                if (v50)
                {
                  if (*(_DWORD *)v50 == 2)
                    WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v21);
                  else
                    *(_DWORD *)v50 -= 2;
                }
                ++v28;
              }
              while (v28 != (uint64_t *)v52);
            }
            v51 = __ldxr(v23);
            if (v51 == 1)
            {
              if (!__stlxr(0, v23))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    result = v68;
    v68 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v21);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

void sub_19476D2F0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,WTF *a26,int a27,int a28,WTF::StringImpl *a29,WTF::StringImpl *a30,WTF::StringImpl *a31,WTF::StringImpl *a32,WTF::StringImpl *a33,WTF::StringImpl *a34,uint64_t a35,WTF::StringImpl *a36)
{
  unsigned __int8 *v36;
  int v38;

  v38 = __ldxr(v36);
  if (v38 == 1)
  {
    if (!__stlxr(0, v36))
    {
LABEL_6:
      if (a36)
      {
        if (*(_DWORD *)a36 == 2)
          WTF::StringImpl::destroy(a36, a2);
        else
          *(_DWORD *)a36 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *a1 = &off_1E3205238;
  v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
    }
  }
  v6 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v6 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *(_QWORD *)this = &off_1E3205238;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1}::operator()((WTF::NativePromiseBase *)(a1 + 8));
}

WTF::StringImpl *WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1}::operator()(WTF::NativePromiseBase *a1)
{
  uint64_t v1;
  uint64_t v2;
  WTF::StringImpl *result;
  BOOL v4;
  unsigned __int8 *v6;
  int v8;
  int v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v14;
  int v15;
  __int128 v16;
  int v17;
  _OWORD v18[2];
  uint64_t v19;

  v1 = *(_QWORD *)a1;
  v2 = *((_QWORD *)a1 + 2);
  if (!*(_BYTE *)(*(_QWORD *)a1 + 56))
  {
    v6 = (unsigned __int8 *)(v2 + 48);
    if (__ldaxr((unsigned __int8 *)(v2 + 48)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v6))
    {
      goto LABEL_12;
    }
    MEMORY[0x19AEA534C](v2 + 48);
LABEL_12:
    v8 = *(_DWORD *)(v2 + 96);
    v9 = __ldxr(v6);
    if (v9 == 1)
    {
      if (!__stlxr(0, v6))
      {
LABEL_17:
        v10 = *((_QWORD *)a1 + 2);
        v11 = (unsigned __int8 *)(v10 + 48);
        if (v8 == 2)
        {
          if (__ldaxr(v11))
          {
            __clrex();
          }
          else if (!__stxr(1u, v11))
          {
            goto LABEL_24;
          }
          MEMORY[0x19AEA534C](v10 + 48);
LABEL_24:
          if (*(_DWORD *)(v10 + 96) == 2)
          {
            v14 = *(_QWORD *)(v10 + 56);
            *(_QWORD *)(v10 + 56) = 0;
            v15 = __ldxr(v11);
            if (v15 == 1)
            {
              if (!__stlxr(0, v11))
                goto LABEL_30;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)(v10 + 48));
LABEL_30:
            (*(void (**)(_OWORD *__return_ptr, uint64_t))(*(_QWORD *)v14 + 16))(v18, v14);
            (*(void (**)(uint64_t, uint64_t, _OWORD *))(*(_QWORD *)v1 + 24))(v1, v10, v18);
            return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
          }
LABEL_40:
          result = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
          __break(1u);
          return result;
        }
        if (__ldaxr(v11))
        {
          __clrex();
        }
        else if (!__stxr(1u, v11))
        {
          goto LABEL_33;
        }
        MEMORY[0x19AEA534C](v10 + 48);
LABEL_33:
        if (*(_DWORD *)(v10 + 96) != 1)
          goto LABEL_40;
        v16 = *(_OWORD *)(v10 + 72);
        v18[0] = *(_OWORD *)(v10 + 56);
        v18[1] = v16;
        v19 = *(_QWORD *)(v10 + 88);
        v17 = __ldxr(v11);
        if (v17 == 1)
        {
          if (!__stlxr(0, v11))
            return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, uint64_t, _OWORD *))(*(_QWORD *)v1 + 24))(v1, v10, v18);
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)(v10 + 48));
        return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, uint64_t, _OWORD *))(*(_QWORD *)v1 + 24))(v1, v10, v18);
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 48));
    goto LABEL_17;
  }
  *(_QWORD *)&v18[0] = *(_QWORD *)a1;
  result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel(a1);
  if (*(_BYTE *)result)
    v4 = *((unsigned __int8 *)result + 16) >= 4u;
  else
    v4 = 0;
  if (v4)
    return WTF::Logger::log<char [32],WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, 4u, "ThenCallback disconnected from ", v2, " aborting [callback:", (int)v18, " callSite:", (WTF::Logger::LogSiteIdentifier *)(v1 + 24), "]");
  return result;
}

void sub_19476D9DC(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore27VideoPlaybackQualityMetricsENSA_18PlatformMediaErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISB_SC_EENS8_8FunctionIFSJ_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISN_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSR_1EJSF_SJ_SM_EEEOS11_EEEDcST_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 40);
  if ((_DWORD)v2 != -1)
  {
    if (!(_DWORD)v2)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_1E3204AE0[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 40) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore27VideoPlaybackQualityMetricsENSA_18PlatformMediaErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISB_SC_EENS8_8FunctionIFSJ_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISN_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSR_1EJSF_SJ_SM_EEEOS11_EEEDcST_DpT0_(uint64_t *a1, _OWORD *a2, __int128 *a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError>,WTF::Function<std::experimental::fundamentals_v3::expected<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError> ()(void)>>>::__assign_alt[abi:sn180100]<1ul,std::experimental::fundamentals_v3::expected<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError>,std::experimental::fundamentals_v3::expected<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError>>(*a1, a2, a3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore27VideoPlaybackQualityMetricsENSA_18PlatformMediaErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISB_SC_EENS8_8FunctionIFSJ_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISN_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSR_1EJSF_SJ_SM_EEEOS11_EEEDcST_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 40);
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 2)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E3204AE0[v5])(&v8, v4);
LABEL_6:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 40) = 2;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError>,WTF::Function<std::experimental::fundamentals_v3::expected<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError> ()(void)>>>::__assign_alt[abi:sn180100]<1ul,std::experimental::fundamentals_v3::expected<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError>,std::experimental::fundamentals_v3::expected<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError>>(uint64_t result, _OWORD *a2, __int128 *a3)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  _BOOL4 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  unsigned int v15;
  _BOOL4 v17;
  _OWORD *v18;
  __int128 v19;
  _DWORD *v20;
  _DWORD *v21;
  uint64_t v22;
  int v23;
  _OWORD v24[2];
  _QWORD v25[2];
  _OWORD v26[2];
  uint64_t v27;
  char v28;

  v4 = result;
  v5 = *(unsigned int *)(result + 40);
  if ((_DWORD)v5 == -1)
    goto LABEL_15;
  if ((_DWORD)v5 != 1)
  {
    result = ((uint64_t (*)(_OWORD *, uint64_t))off_1E3204AE0[v5])(v26, result);
LABEL_15:
    *(_DWORD *)(v4 + 40) = -1;
    v13 = *a3;
    v14 = a3[1];
    *(_QWORD *)(v4 + 32) = *((_QWORD *)a3 + 4);
    *(_OWORD *)v4 = v13;
    *(_OWORD *)(v4 + 16) = v14;
    *(_DWORD *)(v4 + 40) = 1;
    return result;
  }
  v6 = a3[1];
  v24[0] = *a3;
  v24[1] = v6;
  v7 = *((_QWORD *)a3 + 4);
  v25[0] = v7;
  v8 = a2 + 2;
  v9 = *((unsigned int *)a2 + 8);
  if ((_DWORD)v7 != -1 || (_DWORD)v9 != -1)
  {
    v11 = v7 == -1;
    if ((_DWORD)v7 == -1)
      v12 = -1;
    else
      v12 = v7;
    if ((_DWORD)v9 != -1)
      v11 = v12 == v9;
    if (v11)
    {
      return ((uint64_t (*)(_OWORD *, _OWORD *, _OWORD *))off_1E3204B38[v12])(v26, v24, a2);
    }
    else
    {
      v15 = v9 + 1;
      v17 = (v7 - 2) < 0xFFFFFFFD || v15 < 3;
      if (v17)
        v18 = v24;
      else
        v18 = a2;
      if (!v17)
        a2 = v24;
      v19 = a2[1];
      v26[0] = *a2;
      v26[1] = v19;
      v27 = *((_QWORD *)a2 + 4);
      if (v17)
        v20 = v8;
      else
        v20 = v25;
      *((_DWORD *)a2 + 8) = -1;
      if (v17)
        v21 = v25;
      else
        v21 = v8;
      v22 = *((unsigned int *)v18 + 8);
      if ((_DWORD)v22 != -1)
      {
        result = ((uint64_t (*)(char *))off_1E3204B48[v22])(&v28);
        *v20 = v22;
      }
      *v21 = -1;
      v23 = v27;
      if ((_DWORD)v27 != -1)
      {
        result = ((uint64_t (*)(char *, _OWORD *, _OWORD *))off_1E3204B48[v27])(&v28, v18, v26);
        *v21 = v23;
      }
    }
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__implIJN7WebCore27VideoPlaybackQualityMetricsENS7_18PlatformMediaErrorEEE6__swapB8sn180100ERSA_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE0EJS8_S9_EEESL_EEEDcSC_DpT0_(uint64_t a1, __int128 *a2, __int128 *a3)
{
  __int128 v3;
  __int128 v4;
  __n128 result;
  __n128 v6;

  v3 = *a2;
  v4 = *(__int128 *)((char *)a3 + 12);
  *a2 = *a3;
  *(__int128 *)((char *)a2 + 12) = v4;
  *a3 = v3;
  result = v6;
  *(__int128 *)((char *)a3 + 12) = (__int128)v6;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__implIJN7WebCore27VideoPlaybackQualityMetricsENS7_18PlatformMediaErrorEEE6__swapB8sn180100ERSA_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE0EJS8_S9_EEESL_EEEDcSC_DpT0_(uint64_t a1, char *a2, char *a3)
{
  char v3;

  v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore27VideoPlaybackQualityMetricsENS8_18PlatformMediaErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJS9_SA_EEEEEvRSC_OT_EUlRSH_OT0_E_JRNS0_6__baseILNS0_6_TraitE0EJS9_SA_EEEOSQ_EEEDcSH_DpT0_(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  *a2 = *(_OWORD *)a3;
  a2[1] = v4;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore27VideoPlaybackQualityMetricsENS8_18PlatformMediaErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJS9_SA_EEEEEvRSC_OT_EUlRSH_OT0_E_JRNS0_6__baseILNS0_6_TraitE0EJS9_SA_EEEOSQ_EEEDcSH_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, uint64_t *a7@<X6>, uint64_t *a8@<X7>, _QWORD *a9@<X8>)
{
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  uint64_t result;
  BOOL v33;
  int v34;
  BOOL v35;
  int v36;
  BOOL v37;
  int v38;
  BOOL v39;
  int v40;
  BOOL v41;
  int v42;
  char v43;
  int v44;
  char v45;
  int v46;
  unsigned int v47;
  uint64_t v48;

  v16 = *a1;
  if (*a1)
    v17 = *(_DWORD *)(v16 + 4);
  else
    v17 = 0;
  v18 = *a2;
  if (*a2)
    v19 = *(_DWORD *)(v18 + 4);
  else
    v19 = 0;
  v20 = *a3;
  if (*a3)
    v21 = *(_DWORD *)(v20 + 4);
  else
    v21 = 0;
  v22 = *a4;
  if (*a4)
    v23 = *(_DWORD *)(v22 + 4);
  else
    v23 = 0;
  v24 = *a5;
  if (*a5)
    v25 = *(_DWORD *)(v24 + 4);
  else
    v25 = 0;
  v26 = *a6;
  if (*a6)
    v27 = *(_DWORD *)(v26 + 4);
  else
    v27 = 0;
  v28 = *a7;
  if (*a7)
    v29 = *(_DWORD *)(v28 + 4);
  else
    v29 = 0;
  v30 = *a8;
  if (v30)
    v31 = *(_DWORD *)(v30 + 4);
  else
    v31 = 0;
  result = v31 | v29;
  if ((result & 0x80000000) != 0)
    goto LABEL_76;
  v33 = __OFADD__(v29, v31);
  v34 = v29 + v31;
  v35 = v33;
  if (v27 < 0 || v35)
    goto LABEL_76;
  v33 = __OFADD__(v27, v34);
  v36 = v27 + v34;
  v37 = v33;
  if (v25 < 0 || v37)
    goto LABEL_76;
  v33 = __OFADD__(v25, v36);
  v38 = v25 + v36;
  v39 = v33;
  if (v23 < 0 || v39)
    goto LABEL_76;
  v33 = __OFADD__(v23, v38);
  v40 = v23 + v38;
  v41 = v33;
  if (v21 < 0
    || v41
    || ((v33 = __OFADD__(v21, v40), v42 = v21 + v40, !v33) ? (v43 = 0) : (v43 = 1),
        v19 < 0
     || (v43 & 1) != 0
     || ((v33 = __OFADD__(v19, v42), v44 = v19 + v42, !v33) ? (v45 = 0) : (v45 = 1),
         v17 < 0 || (v45 & 1) != 0 || (result = (v17 + v44), __OFADD__(v17, v44)))))
  {
LABEL_76:
    *a9 = 0;
    return result;
  }
  if ((!v16 || (*(_BYTE *)(v16 + 16) & 4) != 0)
    && (!v18 || (*(_BYTE *)(v18 + 16) & 4) != 0)
    && (!v20 || (*(_BYTE *)(v20 + 16) & 4) != 0)
    && (!v22 || (*(_BYTE *)(v22 + 16) & 4) != 0)
    && (!v24 || (*(_BYTE *)(v24 + 16) & 4) != 0)
    && (!v26 || (*(_BYTE *)(v26 + 16) & 4) != 0))
  {
    if (v28)
    {
      v47 = *(_DWORD *)(v28 + 16);
      v46 = (v47 >> 2) & 1;
      if (!v30 || (v47 & 4) == 0)
        goto LABEL_62;
    }
    else if (!v30)
    {
      v46 = 1;
      goto LABEL_62;
    }
    v46 = (*(unsigned __int8 *)(v30 + 16) >> 2) & 1;
  }
  else
  {
    v46 = 0;
  }
LABEL_62:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v46, v16, v18, v20, v22, v24, v26, &v48, v28, v30);
  *a9 = v48;
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10, uint64_t a11)
{
  int v14;
  _DWORD *v19;
  char *v20;
  unint64_t v23;
  _DWORD *v25;

  v14 = result;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v19 = v25;
        if (v25)
        {
          v20 = (char *)(v25 + 5);
          *v25 = 2;
          v19[1] = v14;
          *((_QWORD *)v19 + 1) = v19 + 5;
          v19[4] = 4;
          result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v20, a3, a4, a5, a6, a7, a8, a10, a11);
        }
        goto LABEL_12;
      }
LABEL_14:
      v19 = 0;
      goto LABEL_12;
    }
LABEL_13:
    v19 = (_DWORD *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_12;
  }
  if (!(_DWORD)result)
    goto LABEL_13;
  if (result > 0x7FFFFFEF)
    goto LABEL_14;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v19 = v25;
  if (v25)
  {
    *v25 = 2;
    v19[1] = v14;
    *((_QWORD *)v19 + 1) = v19 + 5;
    v19[4] = 0;
    v25 = (_DWORD *)a3;
    WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v25, (char *)v19 + 20);
    v23 = (unint64_t)v25;
    if (v25)
      v23 = v25[1];
    result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((char *)v19 + 2 * v23 + 20, a4, a5, a6, a7, a8, a10, a11);
  }
LABEL_12:
  *a9 = v19;
  return result;
}

void sub_19476E060(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (*(_DWORD *)v2 == 2)
    WTF::StringImpl::destroy(v2, a2);
  else
    *(_DWORD *)v2 -= 2;
  _Unwind_Resume(exception_object);
}

_BYTE *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(char *__dst, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  char *v17;
  size_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  size_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  size_t v26;
  uint64_t v27;
  char *v29;
  unsigned __int128 *v30;
  unsigned __int128 v31;
  char *v32;
  unsigned __int128 *v33;
  unsigned __int128 v34;
  unsigned __int128 *v35;
  unsigned __int128 *v36;
  unsigned __int128 v37;
  char v38;
  char v39;
  char v40;

  if (a2)
  {
    v17 = *(char **)(a2 + 8);
    v18 = *(unsigned int *)(a2 + 4);
    if ((*(_BYTE *)(a2 + 16) & 4) != 0)
    {
      if ((_DWORD)v18)
      {
        if ((_DWORD)v18 == 1)
          *__dst = *v17;
        else
          memcpy(__dst, v17, v18);
      }
    }
    else
    {
      if (v18 < 0x10)
      {
        v29 = __dst;
      }
      else
      {
        v29 = &__dst[v18 & 0xFFFFFFF0];
        v30 = (unsigned __int128 *)__dst;
        do
        {
          v31 = (unsigned __int128)vld2q_s8(v17);
          v17 += 32;
          *v30++ = v31;
        }
        while (v30 != (unsigned __int128 *)v29);
      }
      while (v29 != &__dst[v18])
      {
        v38 = *v17;
        v17 += 2;
        *v29++ = v38;
      }
    }
    v19 = *(unsigned int *)(a2 + 4);
  }
  else
  {
    v19 = 0;
  }
  v20 = &__dst[v19];
  if (a3)
  {
    v21 = *(char **)(a3 + 8);
    v22 = *(unsigned int *)(a3 + 4);
    if ((*(_BYTE *)(a3 + 16) & 4) != 0)
    {
      if ((_DWORD)v22)
      {
        if ((_DWORD)v22 == 1)
          *v20 = *v21;
        else
          memcpy(v20, v21, v22);
      }
    }
    else
    {
      if (v22 < 0x10)
      {
        v32 = v20;
      }
      else
      {
        v32 = &v20[v22 & 0xFFFFFFF0];
        v33 = (unsigned __int128 *)v20;
        do
        {
          v34 = (unsigned __int128)vld2q_s8(v21);
          v21 += 32;
          *v33++ = v34;
        }
        while (v33 != (unsigned __int128 *)v32);
      }
      while (v32 != &v20[v22])
      {
        v39 = *v21;
        v21 += 2;
        *v32++ = v39;
      }
    }
    v23 = *(unsigned int *)(a3 + 4);
  }
  else
  {
    v23 = 0;
  }
  v24 = &v20[v23];
  if (a4)
  {
    v25 = *(char **)(a4 + 8);
    v26 = *(unsigned int *)(a4 + 4);
    if ((*(_BYTE *)(a4 + 16) & 4) != 0)
    {
      if ((_DWORD)v26)
      {
        if ((_DWORD)v26 == 1)
          *v24 = *v25;
        else
          memcpy(v24, v25, v26);
      }
    }
    else
    {
      if (v26 < 0x10)
      {
        v35 = (unsigned __int128 *)&v20[v23];
      }
      else
      {
        v35 = (unsigned __int128 *)&v24[v26 & 0xFFFFFFF0];
        v36 = (unsigned __int128 *)&v20[v23];
        do
        {
          v37 = (unsigned __int128)vld2q_s8(v25);
          v25 += 32;
          *v36++ = v37;
        }
        while (v36 != v35);
      }
      while (v35 != (unsigned __int128 *)&v24[v26])
      {
        v40 = *v25;
        v25 += 2;
        *(_BYTE *)v35 = v40;
        v35 = (unsigned __int128 *)((char *)v35 + 1);
      }
    }
    v27 = *(unsigned int *)(a4 + 4);
  }
  else
  {
    v27 = 0;
  }
  return WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v24[v27], a5, a6, a7, a8, a9);
}

unint64_t WTF::Vector<WTF::NativePromiseProducer<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 40 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WTF::NativePromiseProducer<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WTF::NativePromiseProducer<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WTF::NativePromiseProducer<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int *v2;
  WTF *v3;
  unsigned int v4;
  int v5;
  void *v6;
  unsigned int *v7;
  WTF *v8;
  WTF *v9;
  unsigned int *v10;
  __int128 v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;

  if (result[2] < a2)
  {
    if (a2 >= 0x6666667)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = result[3];
      v5 = 40 * a2;
      result = (unsigned int *)WTF::fastMalloc((WTF *)(40 * a2));
      v2[2] = (v5 & 0xFFFFFFF8) / 0x28;
      *(_QWORD *)v2 = result;
      if (v4)
      {
        v7 = result;
        v8 = (WTF *)((char *)v3 + 40 * v4);
        v9 = v3;
        do
        {
          v10 = *(unsigned int **)v9;
          *(_QWORD *)v9 = 0;
          *(_QWORD *)v7 = v10;
          v11 = *(_OWORD *)((char *)v9 + 8);
          *(_OWORD *)(v7 + 6) = *(_OWORD *)((char *)v9 + 24);
          *(_OWORD *)(v7 + 2) = v11;
          result = *(unsigned int **)v9;
          if (*(_QWORD *)v9)
          {
            WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::assertIsDead((uint64_t)result);
            result = *(unsigned int **)v9;
            *(_QWORD *)v9 = 0;
            if (result)
            {
              v12 = result + 2;
              do
              {
                v13 = __ldaxr(v12);
                v14 = v13 - 1;
              }
              while (__stlxr(v14, v12));
              if (!v14)
              {
                atomic_store(1u, result + 2);
                result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 16))(result);
              }
            }
          }
          else
          {
            *(_QWORD *)v9 = 0;
          }
          v7 += 10;
          v9 = (WTF *)((char *)v9 + 40);
        }
        while (v9 != v8);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          v2[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

void sub_19476E480(_Unwind_Exception *exception_object)
{
  unsigned int **v1;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *v1;
  *v1 = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_19476E6F4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayerPrivateAVFoundation,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v2 + 48));
  _Unwind_Resume(a1);
}

void sub_19476E814(_Unwind_Exception *a1)
{
  _DWORD *v1;

  --*v1;
  _Unwind_Resume(a1);
}

unsigned __int8 *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayerPrivateAVFoundation,(WTF::DestructionThread)1>(unsigned __int8 *this)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;

  v1 = this;
  if (__ldaxr(this))
  {
    __clrex();
  }
  else if (!__stxr(1u, this))
  {
    goto LABEL_5;
  }
  this = (unsigned __int8 *)MEMORY[0x19AEA534C](this);
LABEL_5:
  v3 = *((_QWORD *)v1 + 1);
  v4 = v3 - 1;
  *((_QWORD *)v1 + 1) = v3 - 1;
  if (v3 == 1)
  {
    v9 = *((_QWORD *)v1 + 2);
    v5 = *((_QWORD *)v1 + 3);
    *((_QWORD *)v1 + 3) = 0;
    v6 = v9 == 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = __ldxr(v1);
  if (v7 != 1)
  {
    __clrex();
LABEL_12:
    this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
    if (v4)
      return this;
    goto LABEL_13;
  }
  if (__stlxr(0, v1))
    goto LABEL_12;
  if (v4)
    return this;
LABEL_13:
  v8 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v8 = off_1E3205260;
  *(_QWORD *)(v8 + 8) = v1;
  *(_QWORD *)(v8 + 16) = v5;
  *(_BYTE *)(v8 + 24) = v6;
  v10 = (unsigned __int8 *)v8;
  WTF::ensureOnMainThread();
  this = v10;
  if (v10)
    return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v10 + 8))(v10);
  return this;
}

void sub_19476E90C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<void WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayerPrivateAVFoundation,(WTF::DestructionThread)1>(void)::{lambda(void)#1},void>::call(uint64_t a1, void *a2)
{
  uint64_t result;
  WTF *v4;
  BOOL v5;

  v4 = *(WTF **)(a1 + 8);
  result = *(_QWORD *)(a1 + 16);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (*(_BYTE *)(a1 + 24))
    v5 = v4 == 0;
  else
    v5 = 1;
  if (!v5)
    return WTF::fastFree(v4, a2);
  return result;
}

uint64_t WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::SecurityOriginData>,WTF::DefaultHash<WebCore::SecurityOriginData>>::hash<WebCore::SecurityOriginData>(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned __int16 v13;
  char v14;
  unsigned int *v15;
  unsigned int **v16;

  v13 = 0;
  v14 = 0;
  v1 = *(unsigned int *)(a1 + 24);
  v15 = &v12;
  if ((_DWORD)v1 == -1)
    v2 = -1;
  else
    v2 = v1;
  v3 = (v2 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v2 - 1640531527) << 16) ^ ((unsigned __int16)v2
                                                                                          - 1640531527);
  v4 = (v2 >> 37) & 0x7FFF800 ^ ((v3 + WORD2(v2) + (v3 >> 11)) << 16) ^ (v3 + WORD2(v2) + (v3 >> 11));
  v12 = v4 + (v4 >> 11);
  if ((_DWORD)v1 == -1)
  {
    v11 = std::__throw_bad_variant_access[abi:sn180100]();
    return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF3addIJN7WebCore18SecurityOriginData5TupleENSA_16ProcessQualifiedINS8_23ObjectIdentifierGenericINSA_26OpaqueOriginIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEvRNS8_6HasherERKNS_7variantIJDpT_EEEEUlRT_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SJ_EEEEEEDcSS_DpT0_(v11);
  }
  else
  {
    v16 = &v15;
    ((void (*)(unsigned int ***, uint64_t))off_1E3204BA8[v1])(&v16, a1);
    v5 = v12;
    if (v14)
    {
      v10 = (v12 + v13) ^ ((v12 + v13) << 11);
      v5 = v10 + (v10 >> 17);
    }
    v6 = (v5 ^ (8 * v5)) + ((v5 ^ (8 * v5)) >> 5);
    v7 = (v6 ^ (4 * v6)) + ((v6 ^ (4 * v6)) >> 15);
    v8 = v7 ^ (v7 << 10);
    if (v8)
      return v8;
    else
      return 0x800000;
  }
}

unsigned int **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF3addIJN7WebCore18SecurityOriginData5TupleENSA_16ProcessQualifiedINS8_23ObjectIdentifierGenericINSA_26OpaqueOriginIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEvRNS8_6HasherERKNS_7variantIJDpT_EEEEUlRT_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SJ_EEEEEEDcSS_DpT0_(unsigned int ***a1, uint64_t *a2)
{
  return WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(WTF::Hasher &,std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>> const&)::{lambda(WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> &)#1}::operator()<WebCore::SecurityOriginData::Tuple const>(*a1, a2);
}

unsigned int ***_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF3addIJN7WebCore18SecurityOriginData5TupleENSA_16ProcessQualifiedINS8_23ObjectIdentifierGenericINSA_26OpaqueOriginIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEvRNS8_6HasherERKNS_7variantIJDpT_EEEEUlRT_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SJ_EEEEEEDcSS_DpT0_(unsigned int ***result, _QWORD *a2)
{
  unsigned int *v2;
  int v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  unsigned int v9;
  int v10;

  v2 = **result;
  v3 = *v2 + (unsigned __int16)*a2;
  v4 = (*a2 >> 5) & 0x7FFF800 ^ (v3 << 16) ^ v3;
  v5 = v4 + (unsigned __int16)WORD2(*a2) + (v4 >> 11);
  v6 = (*a2 >> 37) & 0x7FFF800 ^ (v5 << 16) ^ v5;
  v7 = v6 + (v6 >> 11);
  *v2 = v7;
  v8 = a2[1];
  v9 = (v8 >> 5) & 0x7FFF800 ^ ((v7 + (unsigned __int16)v8) << 16) ^ (v7 + (unsigned __int16)v8);
  v10 = v9 + WORD2(v8) + (v9 >> 11);
  LODWORD(v8) = (v8 >> 37) & 0x7FFF800 ^ (v10 << 16);
  *v2 = (v8 ^ v10) + ((v8 ^ v10) >> 11);
  return result;
}

unsigned int **WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(WTF::Hasher &,std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>> const&)::{lambda(WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> &)#1}::operator()<WebCore::SecurityOriginData::Tuple const>(unsigned int **result, uint64_t *a2)
{
  unsigned int *v2;
  uint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;

  v2 = *result;
  v3 = *a2;
  if (*a2)
  {
    v4 = *(_DWORD *)(v3 + 4);
    v5 = v4 & 0xFFFFFFFE;
    if ((v4 & 0xFFFFFFFE) != 0)
    {
      v6 = 0;
      v7 = *v2;
      while (1)
      {
        v8 = *(unsigned int *)(v3 + 4);
        v9 = v6 + 1;
        if (v6 < v8 && v6 + 1 < v8)
          break;
        if (v6 >= v8)
        {
          v11 = 0;
        }
        else
        {
          v34 = *(_QWORD *)(v3 + 8);
          if ((*(_BYTE *)(v3 + 16) & 4) != 0)
            v11 = *(unsigned __int8 *)(v34 + v6);
          else
            v11 = *(unsigned __int16 *)(v34 + 2 * v6);
        }
        if (v6 + 1 < v8)
          goto LABEL_8;
        v13 = 0;
LABEL_10:
        v14 = (v11 << 11) ^ ((v7 + v13) << 16) ^ (v7 + v13);
        v7 = v14 + (v14 >> 11);
        *v2 = v7;
        v6 = v9 + 1;
        if (v9 + 1 >= v5)
          goto LABEL_14;
      }
      v10 = *(_QWORD *)(v3 + 8);
      if ((*(_BYTE *)(v3 + 16) & 4) != 0)
        v11 = *(unsigned __int8 *)(v10 + v6);
      else
        v11 = *(unsigned __int16 *)(v10 + 2 * v6);
LABEL_8:
      v12 = *(_QWORD *)(v3 + 8);
      if ((*(_BYTE *)(v3 + 16) & 4) != 0)
        v13 = *(unsigned __int8 *)(v12 + v6 + 1);
      else
        v13 = *(unsigned __int16 *)(v12 + 2 * v6 + 2);
      goto LABEL_10;
    }
LABEL_14:
    if ((v4 & 1) != 0)
    {
      if (*(_DWORD *)(v3 + 4) <= v5)
      {
        v16 = 0;
      }
      else
      {
        v15 = *(_QWORD *)(v3 + 8);
        if ((*(_BYTE *)(v3 + 16) & 4) != 0)
          v16 = *(unsigned __int8 *)(v15 + v5);
        else
          v16 = *(unsigned __int16 *)(v15 + 2 * v5);
      }
      *v2 = ((*v2 + v16) ^ ((*v2 + v16) << 16)) + (((*v2 + v16) ^ ((*v2 + v16) << 16)) >> 11);
    }
  }
  v17 = a2[1];
  if (v17)
  {
    v18 = *(_DWORD *)(v17 + 4);
    v19 = v18 & 0xFFFFFFFE;
    if ((v18 & 0xFFFFFFFE) != 0)
    {
      v20 = 0;
      v21 = *v2;
      while (1)
      {
        v22 = *(unsigned int *)(v17 + 4);
        v23 = v20 + 1;
        if (v20 < v22 && v20 + 1 < v22)
          break;
        if (v20 >= v22)
        {
          v25 = 0;
        }
        else
        {
          v35 = *(_QWORD *)(v17 + 8);
          if ((*(_BYTE *)(v17 + 16) & 4) != 0)
            v25 = *(unsigned __int8 *)(v35 + v20);
          else
            v25 = *(unsigned __int16 *)(v35 + 2 * v20);
        }
        if (v20 + 1 < v22)
          goto LABEL_26;
        v27 = 0;
LABEL_28:
        v28 = (v25 << 11) ^ ((v21 + v27) << 16) ^ (v21 + v27);
        v21 = v28 + (v28 >> 11);
        *v2 = v21;
        v20 = v23 + 1;
        if (v23 + 1 >= v19)
          goto LABEL_32;
      }
      v24 = *(_QWORD *)(v17 + 8);
      if ((*(_BYTE *)(v17 + 16) & 4) != 0)
        v25 = *(unsigned __int8 *)(v24 + v20);
      else
        v25 = *(unsigned __int16 *)(v24 + 2 * v20);
LABEL_26:
      v26 = *(_QWORD *)(v17 + 8);
      if ((*(_BYTE *)(v17 + 16) & 4) != 0)
        v27 = *(unsigned __int8 *)(v26 + v20 + 1);
      else
        v27 = *(unsigned __int16 *)(v26 + 2 * v20 + 2);
      goto LABEL_28;
    }
LABEL_32:
    if ((v18 & 1) != 0)
    {
      if (*(_DWORD *)(v17 + 4) <= v19)
      {
        v30 = 0;
      }
      else
      {
        v29 = *(_QWORD *)(v17 + 8);
        if ((*(_BYTE *)(v17 + 16) & 4) != 0)
          v30 = *(unsigned __int8 *)(v29 + v19);
        else
          v30 = *(unsigned __int16 *)(v29 + 2 * v19);
      }
      *v2 = ((*v2 + v30) ^ ((*v2 + v30) << 16)) + (((*v2 + v30) ^ ((*v2 + v30) << 16)) >> 11);
    }
  }
  v31 = *((unsigned __int8 *)a2 + 18);
  v32 = (*v2 + v31) ^ ((*v2 + v31) << 16);
  v33 = v32 + (v32 >> 11);
  *v2 = v33;
  if (v31)
    *v2 = ((v33 + *((unsigned __int16 *)a2 + 8)) ^ ((v33 + *((unsigned __int16 *)a2 + 8)) << 16))
        + (((v33 + *((unsigned __int16 *)a2 + 8)) ^ ((v33 + *((unsigned __int16 *)a2 + 8)) << 16)) >> 11);
  return result;
}

uint64_t WebCore::SecurityOriginData::isNull(WebCore::SecurityOriginData *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char *v6;

  v1 = *((unsigned int *)this + 6);
  if ((_DWORD)v1 == -1)
  {
    v3 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::SecurityOriginData::isNull(void)::{lambda(WebCore::SecurityOriginData::Tuple const&)#1},WebCore::SecurityOriginData::isNull(void)::{lambda(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>> const&>(v3, v4);
  }
  else
  {
    v6 = &v5;
    return ((uint64_t (*)(char **, WebCore::SecurityOriginData *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData6isNullEvEUlRKNS9_5TupleEE_JZNKS9_6isNullEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v1])(&v6, this);
  }
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::SecurityOriginData::isNull(void)::{lambda(WebCore::SecurityOriginData::Tuple const&)#1},WebCore::SecurityOriginData::isNull(void)::{lambda(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>> const&>(uint64_t a1, uint64_t a2)
{
  return *(_OWORD *)a2 == 0 && *(_BYTE *)(a2 + 18) == 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::SecurityOriginData::isNull(void)::{lambda(WebCore::SecurityOriginData::Tuple const&)#1},WebCore::SecurityOriginData::isNull(void)::{lambda(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>> const&>()
{
  return 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS8_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENSC_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JRNS0_6__baseILSN_1EJSA_SI_EEEOSY_EEEDcSQ_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  v4 = a3[1];
  a3[1] = 0;
  *(_QWORD *)(a2 + 8) = v4;
  *(_DWORD *)(a2 + 16) = *((_DWORD *)a3 + 4);
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS8_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENSC_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JRNS0_6__baseILSN_1EJSA_SI_EEEOSY_EEEDcSQ_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS8_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENSC_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISJ_LNS0_6_TraitE1EEEEEvOT_EUlRSP_OT0_E_JRNS0_6__baseILSN_1EJSA_SI_EEEOSX_EEEDcSP_DpT0_(unsigned int **a1, uint64_t a2, uint64_t *a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__assign_alt[abi:sn180100]<0ul,WebCore::SecurityOriginData::Tuple,WebCore::SecurityOriginData::Tuple>(*a1, a2, a3);
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS8_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENSC_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISJ_LNS0_6_TraitE1EEEEEvOT_EUlRSP_OT0_E_JRNS0_6__baseILSN_1EJSA_SI_EEEOSX_EEEDcSP_DpT0_(__n128 **a1, __n128 *a2, __n128 *a3)
{
  __n128 *v4;
  uint64_t v5;
  __n128 result;
  char v7;

  v4 = *a1;
  v5 = (*a1)[1].n128_u32[2];
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      result = *a3;
      *a2 = *a3;
      return result;
    }
    ((void (*)(char *, __n128 *))off_1E3204898[v5])(&v7, v4);
  }
  v4[1].n128_u32[2] = -1;
  result = *a3;
  *v4 = *a3;
  v4[1].n128_u32[2] = 1;
  return result;
}

unsigned int *std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__assign_alt[abi:sn180100]<0ul,WebCore::SecurityOriginData::Tuple,WebCore::SecurityOriginData::Tuple>(unsigned int *result, uint64_t a2, uint64_t *a3)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  v4 = result;
  v5 = result[6];
  if ((_DWORD)v5 == -1)
    goto LABEL_11;
  if ((_DWORD)v5)
  {
    result = (unsigned int *)((uint64_t (*)(char *, unsigned int *))off_1E3204898[v5])(&v13, result);
LABEL_11:
    v4[6] = -1;
    v11 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v11;
    v12 = a3[1];
    a3[1] = 0;
    *((_QWORD *)v4 + 1) = v12;
    v4[4] = *((_DWORD *)a3 + 4);
    v4[6] = 0;
    return result;
  }
  v7 = *a3;
  *a3 = 0;
  v8 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = v7;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = a3[1];
  a3[1] = 0;
  result = *(unsigned int **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v9;
  if (result)
  {
    if (*result == 2)
      result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
    else
      *result -= 2;
  }
  v10 = *((_WORD *)a3 + 8);
  *(_BYTE *)(a2 + 18) = *((_BYTE *)a3 + 18);
  *(_WORD *)(a2 + 16) = v10;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateAVFoundationObjC::~MediaPlayerPrivateAVFoundationObjC()::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)a1[1];
  *a1 = &off_1E3204C18;
  a1[1] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateAVFoundationObjC::~MediaPlayerPrivateAVFoundationObjC()::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3204C18;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateAVFoundationObjC::~MediaPlayerPrivateAVFoundationObjC()::$_0,void>::call(uint64_t a1, void *a2)
{
  return WebCore::WebCoreAVFResourceLoader::stopLoading(*(WebCore::WebCoreAVFResourceLoader **)(a1 + 8), a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateAVFoundationObjC::createVideoLayer(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  *a1 = &off_1E3204C40;
  v3 = a1[2];
  a1[2] = 0;
  if (!v3)
    return a1;
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return a1;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateAVFoundationObjC::createVideoLayer(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  *(_QWORD *)this = &off_1E3204C40;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return WTF::fastFree(this, a2);
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateAVFoundationObjC::createVideoLayer(void)::$_0,void>::call(unsigned __int8 *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v5;

  v1 = *((_QWORD *)result + 2);
  if (!v1)
    return result;
  v2 = *((_QWORD *)result + 1);
  v3 = *((_QWORD *)result + 3);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v1))
  {
    goto LABEL_6;
  }
  result = (unsigned __int8 *)MEMORY[0x19AEA534C](v1);
LABEL_6:
  if (*(_QWORD *)(v1 + 24))
    ++*(_QWORD *)(v1 + 8);
  else
    v3 = 0;
  v5 = __ldxr((unsigned __int8 *)v1);
  if (v5 != 1)
  {
    __clrex();
LABEL_20:
    result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
    if (!v3)
      return result;
    goto LABEL_12;
  }
  if (__stlxr(0, (unsigned __int8 *)v1))
    goto LABEL_20;
  if (!v3)
    return result;
LABEL_12:
  if (*(_QWORD *)(v2 + 416) && !*(_BYTE *)(v2 + 947))
  {
    *(_BYTE *)(v2 + 947) = 1;
    if (!*(_QWORD *)(v2 + 432))
      WebCore::MediaPlayerPrivateAVFoundationObjC::createAVPlayerLayer((unsigned __int8 *)v2);
    if (!*(_QWORD *)(v2 + 504))
      WebCore::MediaPlayerPrivateAVFoundationObjC::createVideoOutput((WebCore::MediaPlayerPrivateAVFoundationObjC *)v2);
  }
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayerPrivateAVFoundation,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v3 + 48));
}

void sub_19476F2D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayerPrivateAVFoundation,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v1 + 48));
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateAVFoundationObjC::createAVAssetForURL(WTF::URL const&)::$_0,void,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  *a1 = off_1E3204C68;
  WebCore::MediaPlayerPrivateAVFoundationObjC::createAVAssetForURL(WTF::URL const&)::$_0::~$_0(a1 + 1, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateAVFoundationObjC::createAVAssetForURL(WTF::URL const&)::$_0,void,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E3204C68;
  WebCore::MediaPlayerPrivateAVFoundationObjC::createAVAssetForURL(WTF::URL const&)::$_0::~$_0((_QWORD *)a1 + 1, a2);
  return WTF::fastFree(a1, v3);
}

WebCore::Cookie *WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateAVFoundationObjC::createAVAssetForURL(WTF::URL const&)::$_0,void,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call(WebCore::Cookie *result, WTF **a2)
{
  WTF *v2;
  uint64_t v3;
  uint64_t v4;
  WebCore::Cookie *v5;
  WebCore::MediaPlayerPrivateAVFoundation *v6;
  uint64_t v7;
  int v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;

  v2 = *a2;
  v3 = *((unsigned int *)a2 + 3);
  *a2 = 0;
  a2[1] = 0;
  v4 = *((_QWORD *)result + 2);
  if (!v4)
    goto LABEL_12;
  v5 = result;
  v6 = (WebCore::MediaPlayerPrivateAVFoundation *)*((_QWORD *)result + 1);
  v7 = *((_QWORD *)result + 3);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  result = (WebCore::Cookie *)MEMORY[0x19AEA534C](v4);
LABEL_6:
  if (*(_QWORD *)(v4 + 24))
    ++*(_QWORD *)(v4 + 8);
  else
    v7 = 0;
  v9 = __ldxr((unsigned __int8 *)v4);
  if (v9 != 1)
  {
    __clrex();
LABEL_15:
    result = (WebCore::Cookie *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
    if (v7)
      goto LABEL_16;
LABEL_12:
    if (!(_DWORD)v3)
      goto LABEL_28;
LABEL_26:
    v15 = 136 * v3;
    result = v2;
    do
    {
      WebCore::Cookie::~Cookie(result, a2);
      result = (WebCore::Cookie *)(v16 + 136);
      v15 -= 136;
    }
    while (v15);
    goto LABEL_28;
  }
  if (__stlxr(0, (unsigned __int8 *)v4))
    goto LABEL_15;
  if (!v7)
    goto LABEL_12;
LABEL_16:
  if ((_DWORD)v3)
  {
    v10 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", v3);
    v11 = 136 * v3;
    v12 = (uint64_t)v2;
    do
    {
      v13 = WebCore::Cookie::operator NSHTTPCookie *(v12);
      if (v13)
        objc_msgSend(v10, "addObject:", v13);
      v12 += 136;
      v11 -= 136;
    }
    while (v11);
    objc_msgSend(*((id *)v5 + 4), "setObject:forKey:", v10, PAL::constantAVFoundationAVURLAssetHTTPCookiesKey);
    if (v10)
      CFRelease(v10);
  }
  v14 = (void *)*((_QWORD *)v5 + 4);
  *((_QWORD *)v5 + 4) = 0;
  v17 = v14;
  WebCore::MediaPlayerPrivateAVFoundationObjC::createAVAssetForURL(v6, (uint64_t)v5 + 40, &v17);
  if (v14)
    CFRelease(v14);
  result = (WebCore::Cookie *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayerPrivateAVFoundation,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v7 + 48));
  if ((_DWORD)v3)
    goto LABEL_26;
LABEL_28:
  if (v2)
    return (WebCore::Cookie *)WTF::fastFree(v2, a2);
  return result;
}

void sub_19476F4F4(_Unwind_Exception *a1)
{
  WTF *v1;
  uint64_t v2;
  const void *v3;
  uint64_t v4;
  void *v6;
  uint64_t v7;
  WebCore::Cookie *v8;
  uint64_t v9;

  if (v3)
    CFRelease(v3);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayerPrivateAVFoundation,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v4 + 48));
  if ((_DWORD)v2)
  {
    v7 = 136 * v2;
    v8 = v1;
    do
    {
      WebCore::Cookie::~Cookie(v8, v6);
      v8 = (WebCore::Cookie *)(v9 + 136);
      v7 -= 136;
    }
    while (v7);
  }
  if (v1)
    WTF::fastFree(v1, v6);
  _Unwind_Resume(a1);
}

void WebCore::Cookie::~Cookie(WebCore::Cookie *this, void *a2)
{
  WTF *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;

  v3 = (WTF *)*((_QWORD *)this + 14);
  if (v3)
  {
    *((_QWORD *)this + 14) = 0;
    *((_DWORD *)this + 30) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v9 -= 2;
  }
}

uint64_t WTF::Detail::CallableWrapper<WTF::ThreadSafeRefCounted<WebCore::PlatformMediaResourceLoader,(WTF::DestructionThread)1>::deref(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) + 8))(*(_QWORD *)(a1 + 8) - 8);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateAVFoundationObjC::setAVPlayerItem(AVPlayerItem *)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  const void *v2;
  const void *v3;

  *a1 = &off_1E3204C90;
  v2 = (const void *)a1[2];
  a1[2] = 0;
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[1];
  a1[1] = 0;
  if (v3)
    CFRelease(v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateAVFoundationObjC::setAVPlayerItem(AVPlayerItem *)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  const void *v3;
  const void *v4;

  *(_QWORD *)this = &off_1E3204C90;
  v3 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (const void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    CFRelease(v4);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateAVFoundationObjC::setAVPlayerItem(AVPlayerItem *)::$_0,void>::call(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 8), "replaceCurrentItemWithPlayerItem:", *(_QWORD *)(a1 + 16));
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore34MediaPlayerPrivateAVFoundationObjC16checkPlayabilityEvEUb_E4__10vJEED1Ev(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  *a1 = &off_1E3204CB8;
  v3 = a1[2];
  a1[2] = 0;
  if (!v3)
    return a1;
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return a1;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore34MediaPlayerPrivateAVFoundationObjC16checkPlayabilityEvEUb_E4__10vJEED0Ev(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  *(_QWORD *)this = &off_1E3204CB8;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return WTF::fastFree(this, a2);
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore34MediaPlayerPrivateAVFoundationObjC16checkPlayabilityEvEUb_E4__10vJEE4callEv(unsigned __int8 *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[4];

  v1 = *((_QWORD *)result + 2);
  if (!v1)
    return result;
  v2 = *((_QWORD *)result + 1);
  v3 = *((_QWORD *)result + 3);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v1))
  {
    goto LABEL_6;
  }
  result = (unsigned __int8 *)MEMORY[0x19AEA534C](v1);
LABEL_6:
  if (*(_QWORD *)(v1 + 24))
    ++*(_QWORD *)(v1 + 8);
  else
    v3 = 0;
  v5 = __ldxr((unsigned __int8 *)v1);
  if (v5 != 1)
  {
    __clrex();
LABEL_21:
    result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
    if (!v3)
      return result;
    goto LABEL_12;
  }
  if (__stlxr(0, (unsigned __int8 *)v1))
    goto LABEL_21;
  if (!v3)
    return result;
LABEL_12:
  WebCore::MediaPlayerPrivateAVFoundation::updateStates((unsigned __int8 *)v2);
  v6 = *(_QWORD *)(v2 + 280);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 1392))(v2);
  v8 = *(_QWORD *)(v2 + 288);
  v10[0] = v7;
  v10[1] = v9;
  v10[2] = "playabilityKnown";
  v10[3] = v8;
  (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 1448))(v2);
  if (*(_BYTE *)(v6 + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 3u)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [20],BOOL>((uint64_t)&WebCore::LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)v10, "metadata loaded = ");
  if (!*(_BYTE *)(v2 + 389) && (*(int (**)(uint64_t))(*(_QWORD *)v2 + 1448))(v2) <= 2)
  {
    *(_BYTE *)(v2 + 391) = 1;
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 1544))(v2);
  }
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayerPrivateAVFoundation,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v3 + 48));
}

void sub_19476FA48(_Unwind_Exception *a1)
{
  uint64_t v1;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayerPrivateAVFoundation,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v1 + 48));
  _Unwind_Resume(a1);
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore34MediaPlayerPrivateAVFoundationObjC20beginLoadingMetadataEvEUb0_E4__11vJEED1Ev(_QWORD *a1, void *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v10;

  *a1 = &off_1E3204CE0;
  v3 = (void *)a1[4];
  if (v3)

  v4 = a1[2];
  a1[2] = 0;
  if (!v4)
    return a1;
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_8;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_8:
  v6 = *(_QWORD *)(v4 + 16) - 1;
  *(_QWORD *)(v4 + 16) = v6;
  if (v6)
  {
    v10 = __ldxr((unsigned __int8 *)v4);
    if (v10 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v4))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    return a1;
  }
  v7 = *(_QWORD *)(v4 + 8);
  v8 = __ldxr((unsigned __int8 *)v4);
  if (v8 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (!v7)
        goto LABEL_15;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (!v7)
LABEL_15:
    WTF::fastFree((WTF *)v4, a2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore34MediaPlayerPrivateAVFoundationObjC20beginLoadingMetadataEvEUb0_E4__11vJEED0Ev(WTF *this, void *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v10;

  *(_QWORD *)this = &off_1E3204CE0;
  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)

  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v4)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_8;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_8:
  v6 = *(_QWORD *)(v4 + 16) - 1;
  *(_QWORD *)(v4 + 16) = v6;
  if (v6)
  {
    v10 = __ldxr((unsigned __int8 *)v4);
    if (v10 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v4))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    return WTF::fastFree(this, a2);
  }
  v7 = *(_QWORD *)(v4 + 8);
  v8 = __ldxr((unsigned __int8 *)v4);
  if (v8 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (!v7)
        goto LABEL_15;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (!v7)
LABEL_15:
    WTF::fastFree((WTF *)v4, a2);
  return WTF::fastFree(this, a2);
}

void _ZN3WTF6Detail15CallableWrapperIZZN7WebCore34MediaPlayerPrivateAVFoundationObjC20beginLoadingMetadataEvEUb0_E4__11vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[4];
  id v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    goto LABEL_32;
  v3 = *(_QWORD *)(a1 + 8);
  v16 = *(_QWORD *)(a1 + 24);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v2);
LABEL_6:
  if (*(_QWORD *)(v2 + 24))
    ++*(_QWORD *)(v2 + 8);
  else
    v16 = 0;
  v5 = __ldxr((unsigned __int8 *)v2);
  if (v5 != 1)
  {
    __clrex();
    goto LABEL_13;
  }
  if (__stlxr(0, (unsigned __int8 *)v2))
LABEL_13:
    WTF::Lock::unlockSlow((WTF::Lock *)v2);
  if (v16)
  {
    if (objc_msgSend(*(id *)(v3 + 408), "statusOfValueForKey:error:", CFSTR("tracks"), 0) == 2)
    {
      v21 = 0u;
      v22 = 0u;
      v19 = 0u;
      v20 = 0u;
      v6 = (void *)objc_msgSend(*(id *)(v3 + 408), "tracks");
      v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
      if (v7)
      {
        v8 = MEMORY[0x1E0C809B0];
        v9 = *(_QWORD *)v20;
        do
        {
          v10 = 0;
          do
          {
            if (*(_QWORD *)v20 != v9)
              objc_enumerationMutation(v6);
            v11 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * v10);
            dispatch_group_enter(*(dispatch_group_t *)(a1 + 32));
            if (byte_1EE334A5E == 1)
            {
              v12 = qword_1EE334AF8;
            }
            else
            {
              v12 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:", CFSTR("totalSampleDataLength"), CFSTR("mediaType"), CFSTR("enabled"), CFSTR("preferredTransform"), CFSTR("naturalSize"), CFSTR("formatDescriptions"), 0);
              qword_1EE334AF8 = v12;
              byte_1EE334A5E = 1;
            }
            v17[0] = v8;
            v17[1] = 3321888768;
            v17[2] = ___ZZZN7WebCore34MediaPlayerPrivateAVFoundationObjC20beginLoadingMetadataEvEUb0_ENK4__11clEv_block_invoke;
            v17[3] = &__block_descriptor_40_e8_32c66_ZTSN3WTF11OSObjectPtrIPU28objcproto17OS_dispatch_group8NSObjectEE_e5_v8__0l;
            v13 = *(void **)(a1 + 32);
            v18 = v13;
            if (v13)
              v14 = v13;
            objc_msgSend(v11, "loadValuesAsynchronouslyForKeys:completionHandler:", v12, v17);
            if (v18)

            ++v10;
          }
          while (v7 != v10);
          v15 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
          v7 = v15;
        }
        while (v15);
      }
    }
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayerPrivateAVFoundation,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v16 + 48));
  }
LABEL_32:
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_19476FEAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayerPrivateAVFoundation,(WTF::DestructionThread)1>(*(unsigned __int8 **)(a15 + 48));
  _Unwind_Resume(a1);
}

void ___ZZZN7WebCore34MediaPlayerPrivateAVFoundationObjC20beginLoadingMetadataEvEUb0_ENK4__11clEv_block_invoke(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

_QWORD *__copy_helper_block_e8_32c66_ZTSN3WTF11OSObjectPtrIPU28objcproto17OS_dispatch_group8NSObjectEE(_QWORD *result, uint64_t a2)
{
  void *v2;

  v2 = *(void **)(a2 + 32);
  result[4] = v2;
  if (v2)
    return v2;
  return result;
}

void __destroy_helper_block_e8_32c66_ZTSN3WTF11OSObjectPtrIPU28objcproto17OS_dispatch_group8NSObjectEE(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 32);
  if (v1)

}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore34MediaPlayerPrivateAVFoundationObjC20beginLoadingMetadataEvEUb1_E4__12vJEED1Ev(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = a1[1];
  *a1 = &off_1E3204D38;
  a1[1] = 0;
  if (!v3)
    return a1;
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return a1;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore34MediaPlayerPrivateAVFoundationObjC20beginLoadingMetadataEvEUb1_E4__12vJEED0Ev(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3204D38;
  *((_QWORD *)this + 1) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return WTF::fastFree(this, a2);
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore34MediaPlayerPrivateAVFoundationObjC20beginLoadingMetadataEvEUb1_E4__12vJEE4callEv(unsigned __int8 *result)
{
  uint64_t v1;
  uint64_t v2;
  int v4;

  v1 = *((_QWORD *)result + 1);
  if (!v1)
    return result;
  v2 = *((_QWORD *)result + 2);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
LABEL_5:
    result = (unsigned __int8 *)MEMORY[0x19AEA534C](v1);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v1))
    goto LABEL_5;
LABEL_6:
  if (*(_QWORD *)(v1 + 24))
    ++*(_QWORD *)(v1 + 8);
  else
    v2 = 0;
  v4 = __ldxr((unsigned __int8 *)v1);
  if (v4 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v1))
    {
      if (!v2)
        return result;
      goto LABEL_12;
    }
  }
  else
  {
    __clrex();
  }
  result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
  if (v2)
  {
LABEL_12:
    objc_msgSend(*(id *)(v2 + 456), "metadataLoaded");
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayerPrivateAVFoundation,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v2 + 48));
  }
  return result;
}

void sub_194770154(_Unwind_Exception *a1)
{
  uint64_t v1;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayerPrivateAVFoundation,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v1 + 48));
  _Unwind_Resume(a1);
}

void WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateAVFoundationObjC::updateVideoFullscreenInlineImage(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  CFTypeRef *v4;
  CFTypeRef v5;
  void *v6;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(v1 + 440);
  v3 = *(_QWORD *)(v1 + 528);
  if (v3)
  {
    v4 = (CFTypeRef *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 48) + 16))(*(_QWORD *)(v3 + 48));
    v5 = *v4;
    if (*v4)
      CFRetain(*v4);
  }
  else
  {
    v5 = 0;
  }
  v6 = *(void **)(v2 + 32);
  if (v6)
    objc_msgSend(v6, "setContents:", v5);
  if (v5)
    CFRelease(v5);
}

void sub_1947701E4(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateAVFoundationObjC::setVideoFullscreenLayer(CALayer *,WTF::Function<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  return WebCore::MediaPlayerPrivateAVFoundationObjC::setVideoFullscreenLayer(CALayer *,WTF::Function<void ()(void)> &&)::$_0::operator()(a1 + 8);
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore34MediaPlayerPrivateAVFoundationObjC20seekToTargetInternalERKNS2_10SeekTargetEEUb2_E4__15vJEED1Ev(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  *a1 = &off_1E3204DB0;
  v3 = a1[2];
  a1[2] = 0;
  if (!v3)
    return a1;
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return a1;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore34MediaPlayerPrivateAVFoundationObjC20seekToTargetInternalERKNS2_10SeekTargetEEUb2_E4__15vJEED0Ev(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  *(_QWORD *)this = &off_1E3204DB0;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return WTF::fastFree(this, a2);
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore34MediaPlayerPrivateAVFoundationObjC20seekToTargetInternalERKNS2_10SeekTargetEEUb2_E4__15vJEE4callEv(unsigned __int8 *result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v3;
  uint64_t v4;
  int v6;

  v1 = *((_QWORD *)result + 2);
  if (!v1)
    return result;
  v2 = result;
  v3 = *((_QWORD *)result + 1);
  v4 = *((_QWORD *)result + 3);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v1))
  {
    goto LABEL_6;
  }
  result = (unsigned __int8 *)MEMORY[0x19AEA534C](v1);
LABEL_6:
  if (*(_QWORD *)(v1 + 24))
    ++*(_QWORD *)(v1 + 8);
  else
    v4 = 0;
  v6 = __ldxr((unsigned __int8 *)v1);
  if (v6 != 1)
  {
    __clrex();
LABEL_16:
    result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
    if (!v4)
      return result;
    goto LABEL_12;
  }
  if (__stlxr(0, (unsigned __int8 *)v1))
    goto LABEL_16;
  if (!v4)
    return result;
LABEL_12:
  if (!*(_BYTE *)(v3 + 959))
  {
    *(_BYTE *)(v3 + 959) = 1;
    objc_msgSend(*(id *)(v3 + 416), "addObserver:forKeyPath:options:context:", *(_QWORD *)(v3 + 456), CFSTR("timeControlStatus"), 1, 2);
    WebCore::MediaPlayerPrivateAVFoundationObjC::timeControlStatusDidChange((unsigned __int8 *)v3, objc_msgSend(*(id *)(v3 + 416), "timeControlStatus"));
  }
  WebCore::MediaPlayerPrivateAVFoundation::seekCompleted((WebCore::MediaPlayerPrivateAVFoundation *)v3, v2[32]);
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayerPrivateAVFoundation,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v4 + 48));
}

void sub_1947704B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayerPrivateAVFoundation,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v1 + 48));
  _Unwind_Resume(a1);
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [17],double,char [15],double>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4, double *a5, const char *a6, double *a7)
{
  WTF::String *v9;
  WTF::String *v10;
  WTF::StringImpl *result;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  NSObject *v18;
  uint64_t v19;
  void *v20;
  char *v21;
  unsigned __int8 *v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  WTF::String *v29;
  double v30;
  WTF::String *v31;
  double v32;
  WTF::Logger *v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::Logger *v40;
  const char *v41;
  uint64_t v42;
  WTF::StringImpl **v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  int v50;
  uint64_t v51;
  WTF::Logger *v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  __int128 buf;
  int v69;
  WTF::StringImpl *v70;
  int v71;
  WTF::StringImpl *v72;
  int v73;
  WTF::StringImpl *v74;
  int v75;
  WTF::StringImpl *v76;
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  v9 = (WTF::String *)WTF::String::String((WTF::String *)&v62, a4);
  WTF::String::number(v9, *a5);
  v10 = (WTF::String *)WTF::String::String((WTF::String *)&v60, a6);
  WTF::String::number(v10, *a7);
  v57 = v62;
  v67 = v61;
  *(_QWORD *)&buf = v63;
  v65 = v59;
  v66 = v60;
  result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v57, (uint64_t *)&v67, (uint64_t *)&v66, (uint64_t *)&v65, &v64);
  if (v64)
  {
    v13 = v59;
    v59 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = v60;
    v60 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v12);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = v61;
    v61 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v12);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = v62;
    v62 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v12);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = v63;
    v63 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v12);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = *(NSObject **)(a1 + 32);
    v19 = os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v19)
    {
      WTF::String::utf8();
      v21 = v57 ? (char *)v57 + 16 : 0;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v21;
      _os_log_impl(&dword_1940B8000, v18, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      v19 = (uint64_t)v57;
      v57 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 1)
          v19 = WTF::fastFree((WTF *)v19, v20);
        else
          --*(_DWORD *)v19;
      }
    }
    if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
    {
      v22 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v23 = *v22;
        if ((v23 & 1) != 0)
          break;
        v24 = __ldaxr(v22);
        if (v24 == v23)
        {
          if (!__stxr(v23 | 1, v22))
          {
            v25 = WTF::Logger::observers((WTF::Logger *)v19);
            v26 = *(unsigned int *)(v25 + 12);
            if ((_DWORD)v26)
            {
              v27 = *(uint64_t **)v25;
              v51 = *(_QWORD *)v25 + 8 * v26;
              do
              {
                v28 = *v27;
                LODWORD(buf) = 0;
                WTF::Logger::LogSiteIdentifier::toString(this);
                v69 = 0;
                v29 = (WTF::String *)WTF::String::String((WTF::String *)&v70, a4);
                v30 = *a5;
                v71 = 0;
                WTF::String::number(v29, v30);
                v73 = 0;
                v31 = (WTF::String *)WTF::String::String((WTF::String *)&v74, a6);
                v32 = *a7;
                v75 = 0;
                WTF::String::number(v31, v32);
                v57 = 0;
                v58 = 0;
                v33 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x50);
                LODWORD(v58) = 5;
                v57 = v33;
                v34 = HIDWORD(v58);
                *((_DWORD *)v33 + 4 * HIDWORD(v58)) = buf;
                v35 = *((_QWORD *)&buf + 1);
                if (*((_QWORD *)&buf + 1))
                  **((_DWORD **)&buf + 1) += 2;
                *((_QWORD *)v33 + 2 * v34 + 1) = v35;
                *((_DWORD *)v33 + 4 * (v34 + 1)) = v69;
                v36 = v70;
                if (v70)
                  *(_DWORD *)v70 += 2;
                *((_QWORD *)v33 + 2 * (v34 + 1) + 1) = v36;
                *((_DWORD *)v33 + 4 * (v34 + 2)) = v71;
                v37 = v72;
                if (v72)
                  *(_DWORD *)v72 += 2;
                *((_QWORD *)v33 + 2 * (v34 + 2) + 1) = v37;
                *((_DWORD *)v33 + 4 * (v34 + 3)) = v73;
                v38 = v74;
                if (v74)
                  *(_DWORD *)v74 += 2;
                *((_QWORD *)v33 + 2 * (v34 + 3) + 1) = v38;
                *((_DWORD *)v33 + 4 * (v34 + 4)) = v75;
                v39 = v76;
                if (v76)
                  *(_DWORD *)v76 += 2;
                *((_QWORD *)v33 + 2 * (v34 + 4) + 1) = v39;
                HIDWORD(v58) = v34 + 5;
                (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v28 + 16))(v28, a1, a2, &v57);
                v40 = v57;
                if (HIDWORD(v58))
                {
                  v41 = a4;
                  v42 = 16 * HIDWORD(v58);
                  v43 = (WTF::StringImpl **)((char *)v57 + 8);
                  do
                  {
                    v44 = *v43;
                    *v43 = 0;
                    if (v44)
                    {
                      if (*(_DWORD *)v44 == 2)
                        WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v20);
                      else
                        *(_DWORD *)v44 -= 2;
                    }
                    v43 += 2;
                    v42 -= 16;
                  }
                  while (v42);
                  v40 = v57;
                  a4 = v41;
                }
                if (v40)
                {
                  v57 = 0;
                  LODWORD(v58) = 0;
                  WTF::fastFree(v40, v20);
                }
                v45 = v76;
                v76 = 0;
                if (v45)
                {
                  if (*(_DWORD *)v45 == 2)
                    WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v20);
                  else
                    *(_DWORD *)v45 -= 2;
                }
                v46 = v74;
                v74 = 0;
                if (v46)
                {
                  if (*(_DWORD *)v46 == 2)
                    WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v20);
                  else
                    *(_DWORD *)v46 -= 2;
                }
                v47 = v72;
                v72 = 0;
                if (v47)
                {
                  if (*(_DWORD *)v47 == 2)
                    WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v20);
                  else
                    *(_DWORD *)v47 -= 2;
                }
                v48 = v70;
                v70 = 0;
                if (v48)
                {
                  if (*(_DWORD *)v48 == 2)
                    WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v20);
                  else
                    *(_DWORD *)v48 -= 2;
                }
                v49 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                *((_QWORD *)&buf + 1) = 0;
                if (v49)
                {
                  if (*(_DWORD *)v49 == 2)
                    WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v20);
                  else
                    *(_DWORD *)v49 -= 2;
                }
                ++v27;
              }
              while (v27 != (uint64_t *)v51);
            }
            v50 = __ldxr(v22);
            if (v50 == 1)
            {
              if (!__stlxr(0, v22))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    result = v64;
    v64 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v20);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

void sub_194770A8C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, WTF *a20,int a21,int a22,WTF::StringImpl *a23,WTF::StringImpl *a24,WTF::StringImpl *a25,WTF::StringImpl *a26,uint64_t a27,WTF::StringImpl *a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,WTF::StringImpl *a33,uint64_t a34,WTF::StringImpl *a35,uint64_t a36,WTF::StringImpl *a37,uint64_t a38,WTF::StringImpl *a39,uint64_t a40,WTF::StringImpl *a41)
{
  unsigned __int8 *v41;
  int v43;

  v43 = __ldxr(v41);
  if (v43 == 1)
  {
    if (!__stlxr(0, v41))
    {
LABEL_6:
      if (a28)
      {
        if (*(_DWORD *)a28 == 2)
          WTF::StringImpl::destroy(a28, a2);
        else
          *(_DWORD *)a28 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [30],WebCore::FourCC,char [48]>(uint64_t a1, WTF::Logger::LogSiteIdentifier *this, const char *a3, unsigned int *a4)
{
  unsigned int v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  NSObject *v13;
  uint64_t v14;
  void *v15;
  char *v16;
  unsigned __int8 *v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unsigned int v24;
  WTF::Logger *v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::Logger *v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  WTF::StringImpl **v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  int v41;
  uint64_t v42;
  WTF::Logger *v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  char v53[8];
  __int128 buf;
  int v55;
  WTF::StringImpl *v56;
  int v57;
  WTF::StringImpl *v58;
  int v59;
  WTF::StringImpl *v60[3];

  v60[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  WTF::String::String((WTF::String *)&v49, a3);
  v6 = bswap32(*a4);
  BYTE4(buf) = 0;
  LODWORD(buf) = v6;
  WTF::String::String((WTF::String *)&v48, (const char *)&buf);
  WTF::String::String((WTF::String *)&v47, "' not contained in allowed codec list; blocking");
  v45 = v49;
  *(_QWORD *)v53 = v48;
  *(_QWORD *)&buf = v50;
  v52 = v47;
  result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v45, (uint64_t *)v53, (uint64_t *)&v52, &v51);
  if (v51)
  {
    v9 = v47;
    v47 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
    v10 = v48;
    v48 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v8);
      else
        *(_DWORD *)v10 -= 2;
    }
    v11 = v49;
    v49 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v8);
      else
        *(_DWORD *)v11 -= 2;
    }
    v12 = v50;
    v50 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v8);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = *(NSObject **)(a1 + 32);
    v14 = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v14)
    {
      WTF::String::utf8();
      v16 = v45 ? (char *)v45 + 16 : 0;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v16;
      _os_log_impl(&dword_1940B8000, v13, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      v14 = (uint64_t)v45;
      v45 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 1)
          v14 = WTF::fastFree((WTF *)v14, v15);
        else
          --*(_DWORD *)v14;
      }
    }
    if (*(_BYTE *)a1 && *(_BYTE *)(a1 + 16))
    {
      v17 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v18 = *v17;
        if ((v18 & 1) != 0)
          break;
        v19 = __ldaxr(v17);
        if (v19 == v18)
        {
          if (!__stxr(v18 | 1, v17))
          {
            v20 = WTF::Logger::observers((WTF::Logger *)v14);
            v21 = *(unsigned int *)(v20 + 12);
            if ((_DWORD)v21)
            {
              v22 = *(uint64_t **)v20;
              v42 = *(_QWORD *)v20 + 8 * v21;
              do
              {
                v23 = *v22;
                LODWORD(buf) = 0;
                WTF::Logger::LogSiteIdentifier::toString(this);
                v55 = 0;
                WTF::String::String((WTF::String *)&v56, a3);
                v57 = 0;
                v24 = bswap32(*a4);
                v53[4] = 0;
                *(_DWORD *)v53 = v24;
                WTF::String::String((WTF::String *)&v58, v53);
                v59 = 0;
                WTF::String::String((WTF::String *)v60, "' not contained in allowed codec list; blocking");
                v45 = 0;
                v46 = 0;
                v25 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x40);
                LODWORD(v46) = 4;
                v45 = v25;
                v26 = HIDWORD(v46);
                *((_DWORD *)v25 + 4 * HIDWORD(v46)) = buf;
                v27 = *((_QWORD *)&buf + 1);
                if (*((_QWORD *)&buf + 1))
                  **((_DWORD **)&buf + 1) += 2;
                *((_QWORD *)v25 + 2 * v26 + 1) = v27;
                *((_DWORD *)v25 + 4 * (v26 + 1)) = v55;
                v28 = v56;
                if (v56)
                  *(_DWORD *)v56 += 2;
                *((_QWORD *)v25 + 2 * (v26 + 1) + 1) = v28;
                *((_DWORD *)v25 + 4 * (v26 + 2)) = v57;
                v29 = v58;
                if (v58)
                  *(_DWORD *)v58 += 2;
                *((_QWORD *)v25 + 2 * (v26 + 2) + 1) = v29;
                *((_DWORD *)v25 + 4 * (v26 + 3)) = v59;
                v30 = v60[0];
                if (v60[0])
                  *(_DWORD *)v60[0] += 2;
                *((_QWORD *)v25 + 2 * (v26 + 3) + 1) = v30;
                HIDWORD(v46) = v26 + 4;
                (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::Logger **))(*(_QWORD *)v23 + 16))(v23, a1, 1, &v45);
                v31 = v45;
                if (HIDWORD(v46))
                {
                  v32 = a1;
                  v33 = a3;
                  v34 = 16 * HIDWORD(v46);
                  v35 = (WTF::StringImpl **)((char *)v45 + 8);
                  do
                  {
                    v36 = *v35;
                    *v35 = 0;
                    if (v36)
                    {
                      if (*(_DWORD *)v36 == 2)
                        WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v15);
                      else
                        *(_DWORD *)v36 -= 2;
                    }
                    v35 += 2;
                    v34 -= 16;
                  }
                  while (v34);
                  v31 = v45;
                  a3 = v33;
                  a1 = v32;
                }
                if (v31)
                {
                  v45 = 0;
                  LODWORD(v46) = 0;
                  WTF::fastFree(v31, v15);
                }
                v37 = v60[0];
                v60[0] = 0;
                if (v37)
                {
                  if (*(_DWORD *)v37 == 2)
                    WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v15);
                  else
                    *(_DWORD *)v37 -= 2;
                }
                v38 = v58;
                v58 = 0;
                if (v38)
                {
                  if (*(_DWORD *)v38 == 2)
                    WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v15);
                  else
                    *(_DWORD *)v38 -= 2;
                }
                v39 = v56;
                v56 = 0;
                if (v39)
                {
                  if (*(_DWORD *)v39 == 2)
                    WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v15);
                  else
                    *(_DWORD *)v39 -= 2;
                }
                v40 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                *((_QWORD *)&buf + 1) = 0;
                if (v40)
                {
                  if (*(_DWORD *)v40 == 2)
                    WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v15);
                  else
                    *(_DWORD *)v40 -= 2;
                }
                ++v22;
              }
              while (v22 != (uint64_t *)v42);
            }
            v41 = __ldxr(v17);
            if (v41 == 1)
            {
              if (!__stlxr(0, v17))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    result = v51;
    v51 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v15);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

void sub_194771278(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF *a16, int a17, int a18, WTF::StringImpl *a19, WTF::StringImpl *a20,WTF::StringImpl *a21,uint64_t a22,WTF::StringImpl *a23,uint64_t a24,uint64_t a25,char a26,WTF::StringImpl *a27,uint64_t a28,WTF::StringImpl *a29,uint64_t a30,WTF::StringImpl *a31,uint64_t a32,WTF::StringImpl *a33)
{
  unsigned __int8 *v33;
  int v35;

  v35 = __ldxr(v33);
  if (v35 == 1)
  {
    if (!__stlxr(0, v33))
    {
LABEL_6:
      if (a23)
      {
        if (*(_DWORD *)a23 == 2)
          WTF::StringImpl::destroy(a23, a2);
        else
          *(_DWORD *)a23 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

BOOL JSC::ArrayBufferView::setRangeImpl(JSC::ArrayBufferView *this, const void *a2, size_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  _BOOL4 v8;
  _BOOL8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v4 = *((_QWORD *)this + 4);
  if (!v4)
    goto LABEL_8;
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    goto LABEL_35;
  v6 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
  if (v6 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]) && !((v5 & 0x3FFFFFFFFLL) + v6))
    goto LABEL_35;
  v7 = *((_BYTE *)this + 6);
  if ((v7 & 3) == 0)
  {
    v4 = *((_QWORD *)this + 2);
    goto LABEL_8;
  }
  if (*(_BYTE *)(v4 + 64) && (v20 = *(_QWORD *)(v4 + 32)) != 0)
  {
    v14 = atomic_load((unint64_t *)(v20 + 32));
    v7 = *((_BYTE *)this + 6);
  }
  else
  {
    v14 = *(_QWORD *)(v4 + 48);
  }
  v15 = *((_QWORD *)this + 1);
  if ((v7 & 4) == 0)
  {
    v16 = *((_QWORD *)this + 2) + v15 <= v14 && v14 >= v15;
    if (v16)
      v4 = 0;
    else
      v4 = *((_QWORD *)this + 2);
    goto LABEL_8;
  }
  v16 = v14 >= v15;
  v17 = v14 - v15;
  if (v16)
  {
LABEL_35:
    v4 = 0;
    goto LABEL_8;
  }
  if ((*((_BYTE *)this + 4) - 4) > 7u)
    LOBYTE(v18) = 0;
  else
    v18 = qword_1968A15C0[(char)(*((_BYTE *)this + 4) - 4)];
  v4 = (-1 << v18) & v17;
LABEL_8:
  v8 = !__CFADD__(a4, a3);
  v9 = a4 + a3 <= v4 && v8;
  if (v9)
  {
    v10 = *((_QWORD *)this + 4);
    if (v10)
    {
      v11 = *(_QWORD *)(v10 + 16);
      if (v11)
      {
        v12 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
        if (!v12 || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0])
        {
          v13 = *((_QWORD *)this + 3);
          goto LABEL_43;
        }
        if ((v11 & 0x3FFFFFFFFLL) + v12)
        {
          v13 = *((_QWORD *)this + 3);
          if (v13 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]))
            v13 = (v13 & 0x3FFFFFFFFLL) + v12;
          goto LABEL_43;
        }
      }
    }
    v13 = 0;
LABEL_43:
    memmove((void *)(v13 + a4), a2, a3);
  }
  return v9;
}

uint64_t WTF::Vector<char16_t,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  void *v3;
  uint64_t v4;
  void *v5;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v3 = *(void **)a1;
    v4 = *(unsigned int *)(a1 + 12);
    WTF::VectorBuffer<char16_t,32ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(a1, a2);
    memcpy(*(void **)a1, v3, 2 * v4);
    if ((void *)(a1 + 16) != v3 && v3 != 0)
    {
      if (*(void **)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((WTF *)v3, v5);
    }
  }
  return 1;
}

uint64_t WTF::VectorBuffer<char16_t,32ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  v2 = result;
  if (a2 < 0x21)
  {
    *(_QWORD *)result = result + 16;
    *(_DWORD *)(result + 8) = 32;
    return 1;
  }
  v3 = a2;
  if (!(a2 >> 31))
  {
    v4 = WTF::fastMalloc((WTF *)(2 * a2));
    *(_DWORD *)(v2 + 8) = v3;
    *(_QWORD *)v2 = v4;
    return 1;
  }
  __break(0xC471u);
  return result;
}

void WTF::HashMap<WTF::String,WTF::RetainPtr<AVAssetResourceLoadingRequest>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<AVAssetResourceLoadingRequest>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,AVAssetResourceLoadingRequest*&>(uint64_t a1, uint64_t a2, WTF::StringImpl **a3, CFTypeRef *a4)
{
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  char v22;
  WTF::StringImpl *v23;
  const void **v24;
  CFTypeRef v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const void **v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  CFTypeRef v34;
  const void *v35;
  unsigned int v36;
  int v37;
  WTF *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF **v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  uint64_t v45;
  CFTypeRef v46;
  const void *v47;
  uint64_t v48;
  WTF *v50;

  v7 = *(unsigned int *)(a2 + 8);
  v6 = *(unsigned int *)(a2 + 12);
  if (10 * v6 >= (unint64_t)(9 * v7)
    || (v7 <= 2 * (int)v6 ? (v8 = *(_BYTE *)(a2 + 20) == 0) : (v8 = 1), !v8))
  {
    if ((_DWORD)v7)
      v9 = 2 * v7;
    else
      v9 = 8;
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RetainPtr<AVAssetResourceLoadingRequest>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RetainPtr<AVAssetResourceLoadingRequest>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RetainPtr<AVAssetResourceLoadingRequest>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<AVAssetResourceLoadingRequest>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash((uint64_t *)a2, v9);
    LODWORD(v7) = *(_DWORD *)(a2 + 8);
  }
  v10 = v7 - 1;
  v11 = *(_DWORD *)(a2 + 16);
  v12 = *((_DWORD *)*a3 + 4);
  if (v12 < 0x100)
    v13 = WTF::StringImpl::hashSlowCase(*a3);
  else
    v13 = v12 >> 8;
  v14 = (v13 ^ v11) & v10;
  v15 = *(_QWORD *)a2;
  v16 = *(_QWORD *)a2 + 16 * v14;
  v17 = *(WTF **)v16;
  if (!*(_QWORD *)v16)
  {
LABEL_27:
    v23 = *a3;
    if (*a3)
      *(_DWORD *)v23 += 2;
    *(_QWORD *)v16 = v23;
    v24 = (const void **)(v15 + 16 * v14 + 8);
    v25 = *a4;
    if (*a4)
      CFRetain(*a4);
    v26 = *v24;
    *v24 = v25;
    if (!v26)
      goto LABEL_33;
    goto LABEL_32;
  }
  v48 = a1;
  v18 = 0;
  while (1)
  {
    v19 = *((_DWORD *)v17 + 4);
    v20 = v19 < 0x100 ? WTF::StringImpl::hashSlowCase(v17) : v19 >> 8;
    v21 = (v14 + v7 - ((v20 ^ v11) & v10)) & v10;
    if (v18 > v21)
      break;
    if (v20 == v13)
    {
      v22 = WTF::equal(*(WTF **)v16, *a3, (const WTF::StringImpl *)a3);
      v15 = *(_QWORD *)a2;
      if ((v22 & 1) != 0)
      {
        v45 = v15 + 16 * *(unsigned int *)(a2 + 8);
        *(_QWORD *)v48 = v16;
        *(_QWORD *)(v48 + 8) = v45;
        *(_BYTE *)(v48 + 16) = 0;
        v46 = *a4;
        if (*a4)
          CFRetain(*a4);
        v47 = *(const void **)(v16 + 8);
        *(_QWORD *)(v16 + 8) = v46;
        if (v47)
          CFRelease(v47);
        return;
      }
    }
    else
    {
      v15 = *(_QWORD *)a2;
    }
    v14 = ((_DWORD)v14 + 1) & v10;
    ++v18;
    v16 = v15 + 16 * v14;
    v17 = *(WTF **)v16;
    if (!*(_QWORD *)v16)
    {
      if (v18 >= 0x80)
        *(_BYTE *)(a2 + 20) = 1;
      a1 = v48;
      goto LABEL_27;
    }
  }
  if (v18 >= 0x80)
    *(_BYTE *)(a2 + 20) = 1;
  v50 = *(WTF **)v16;
  *(_QWORD *)v16 = 0;
  v29 = v15 + 16 * v14;
  v32 = *(_QWORD *)(v29 + 8);
  v30 = (const void **)(v29 + 8);
  v31 = v32;
  *v30 = 0;
  *(_QWORD *)v16 = 0;
  *(_QWORD *)(v16 + 8) = 0;
  v33 = *a3;
  if (*a3)
    *(_DWORD *)v33 += 2;
  *(_QWORD *)v16 = v33;
  v34 = *a4;
  if (*a4)
    CFRetain(*a4);
  v35 = *v30;
  *v30 = v34;
  if (v35)
    CFRelease(v35);
  while (1)
  {
    v14 = ((_DWORD)v14 + 1) & v10;
    v41 = *(_QWORD *)a2;
    v42 = (WTF **)(*(_QWORD *)a2 + 16 * v14);
    v43 = *v42;
    if (!*v42)
      break;
    v36 = *((_DWORD *)v43 + 4);
    if (v36 < 0x100)
      v37 = WTF::StringImpl::hashSlowCase(v43);
    else
      v37 = v36 >> 8;
    if (++v21 > (((_DWORD)v14 + (_DWORD)v7 - ((v37 ^ v11) & v10)) & v10))
    {
      v38 = *v42;
      *v42 = 0;
      v39 = v41 + 16 * v14;
      v40 = *(_QWORD *)(v39 + 8);
      *v42 = v50;
      *(_QWORD *)(v39 + 8) = v31;
      v31 = v40;
      v50 = v38;
      v21 = (v14 + v7 - ((v37 ^ v11) & v10)) & v10;
    }
  }
  *v42 = v50;
  v44 = v41 + 16 * v14;
  v26 = *(const void **)(v44 + 8);
  *(_QWORD *)(v44 + 8) = v31;
  a1 = v48;
  if (v26)
LABEL_32:
    CFRelease(v26);
LABEL_33:
  v27 = *(unsigned int *)(a2 + 8);
  ++*(_DWORD *)(a2 + 12);
  v28 = *(_QWORD *)a2 + 16 * v27;
  *(_QWORD *)a1 = v16;
  *(_QWORD *)(a1 + 8) = v28;
  *(_BYTE *)(a1 + 16) = 1;
}

void sub_194771A70(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11)
{
  const void *v11;

  if (v11)
    CFRelease(v11);
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RetainPtr<AVAssetResourceLoadingRequest>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RetainPtr<AVAssetResourceLoadingRequest>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RetainPtr<AVAssetResourceLoadingRequest>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<AVAssetResourceLoadingRequest>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t *v3;
  uint64_t v4;
  WTF *v5;
  uint64_t result;
  WTF::StringImpl *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  WTF::StringImpl *v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl **v19;
  WTF::StringImpl *v20;
  unsigned int v21;
  const void **v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  uint64_t *v26;
  WTF::StringImpl *v27;
  const void *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  const void **v32;
  const void *v33;
  const void *v34;
  WTF::StringImpl *v35;
  const void *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  const void *v42;
  const void *v43;
  WTF::StringImpl *v44;
  WTF *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;

  v3 = a1;
  v4 = *((unsigned int *)a1 + 2);
  v5 = (WTF *)*a1;
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2));
  *v3 = result;
  *((_DWORD *)v3 + 2) = a2;
  v8 = (~(result << 32) + result) ^ ((unint64_t)(~(result << 32) + result) >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  *((_DWORD *)v3 + 4) = (v10 >> 31) ^ v10;
  *((_BYTE *)v3 + 20) = 0;
  v46 = v4;
  if ((_DWORD)v4)
  {
    v11 = 0;
    v45 = v5;
    do
    {
      v12 = (char *)v5 + 16 * v11;
      v13 = *(WTF::StringImpl **)v12;
      if (*(_QWORD *)v12)
      {
        v48 = *((_DWORD *)v3 + 4);
        v49 = *((_DWORD *)v3 + 2);
        v14 = *((_DWORD *)v13 + 4);
        if (v14 < 0x100)
          v15 = WTF::StringImpl::hashSlowCase(v13);
        else
          v15 = v14 >> 8;
        v16 = v49 - 1;
        v17 = (v15 ^ v48) & (v49 - 1);
        v18 = *v3;
        v19 = (WTF::StringImpl **)(*v3 + 16 * v17);
        v20 = *v19;
        v47 = v11;
        if (*v19)
        {
          v21 = 0;
          v22 = (const void **)((char *)v5 + 16 * v11 + 8);
          do
          {
            v23 = *((_DWORD *)v20 + 4);
            if (v23 < 0x100)
              v24 = WTF::StringImpl::hashSlowCase(v20);
            else
              v24 = v23 >> 8;
            v25 = (v17 + v49 - ((v24 ^ v48) & v16)) & v16;
            if (v21 > v25)
            {
              v26 = v3;
              v27 = *(WTF::StringImpl **)v12;
              v28 = *v22;
              *(_QWORD *)v12 = 0;
              *((_QWORD *)v12 + 1) = 0;
              v29 = *v19;
              *v19 = 0;
              v30 = *(WTF::StringImpl **)v12;
              *(_QWORD *)v12 = v29;
              if (v30)
              {
                if (*(_DWORD *)v30 == 2)
                  WTF::StringImpl::destroy(v30, v7);
                else
                  *(_DWORD *)v30 -= 2;
              }
              v31 = v18 + 16 * v17;
              v33 = *(const void **)(v31 + 8);
              v32 = (const void **)(v31 + 8);
              *v32 = 0;
              v34 = *v22;
              *v22 = v33;
              if (v34)
                CFRelease(v34);
              v35 = *v19;
              *v19 = v27;
              v3 = v26;
              if (v35)
              {
                if (*(_DWORD *)v35 == 2)
                  WTF::StringImpl::destroy(v35, v7);
                else
                  *(_DWORD *)v35 -= 2;
              }
              v36 = *v32;
              *v32 = v28;
              if (v36)
                CFRelease(v36);
              v21 = v25;
            }
            v17 = ((_DWORD)v17 + 1) & v16;
            ++v21;
            v18 = *v3;
            v19 = (WTF::StringImpl **)(*v3 + 16 * v17);
            v20 = *v19;
          }
          while (*v19);
        }
        v37 = *(WTF::StringImpl **)v12;
        *(_QWORD *)v12 = 0;
        v38 = *v19;
        *v19 = v37;
        v5 = v45;
        v11 = v47;
        if (v38)
        {
          if (*(_DWORD *)v38 == 2)
            WTF::StringImpl::destroy(v38, v7);
          else
            *(_DWORD *)v38 -= 2;
        }
        v39 = v18 + 16 * v17;
        v40 = (char *)v45 + 16 * v47;
        v41 = *((_QWORD *)v40 + 1);
        *((_QWORD *)v40 + 1) = 0;
        v42 = *(const void **)(v39 + 8);
        *(_QWORD *)(v39 + 8) = v41;
        if (v42)
          CFRelease(v42);
      }
      v43 = (const void *)*((_QWORD *)v12 + 1);
      *((_QWORD *)v12 + 1) = 0;
      if (v43)
        CFRelease(v43);
      v44 = *(WTF::StringImpl **)v12;
      *(_QWORD *)v12 = 0;
      if (v44)
      {
        if (*(_DWORD *)v44 == 2)
          WTF::StringImpl::destroy(v44, v7);
        else
          *(_DWORD *)v44 -= 2;
      }
      ++v11;
    }
    while (v11 != v46);
  }
  else if (!v5)
  {
    return result;
  }
  return WTF::fastFree(v5, v7);
}

uint64_t WTF::HashTable<WTF::RetainPtr<void const*>,WTF::KeyValuePair<WTF::RetainPtr<void const*>,WTF::RefPtr<WebCore::WebCoreAVFResourceLoader,WTF::RawPtrTraits<WebCore::WebCoreAVFResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::WebCoreAVFResourceLoader>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<void const*>,WTF::RefPtr<WebCore::WebCoreAVFResourceLoader,WTF::RawPtrTraits<WebCore::WebCoreAVFResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::WebCoreAVFResourceLoader>>>>,WTF::DefaultHash<WTF::RetainPtr<void const*>>,WTF::HashMap<WTF::RetainPtr<void const*>,WTF::RefPtr<WebCore::WebCoreAVFResourceLoader,WTF::RawPtrTraits<WebCore::WebCoreAVFResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::WebCoreAVFResourceLoader>>,WTF::DefaultHash<WTF::RetainPtr<void const*>>,WTF::HashTraits<WTF::RetainPtr<void const*>>,WTF::HashTraits<WTF::RefPtr<WebCore::WebCoreAVFResourceLoader,WTF::RawPtrTraits<WebCore::WebCoreAVFResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::WebCoreAVFResourceLoader>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<void const*>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  const void **v11;
  const void *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  const void *v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  const void *v33;
  const void *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    v10 = v5;
    while (1)
    {
      v11 = (const void **)(v4 + 16 * v9);
      v12 = *v11;
      if (*v11 != (const void *)-1)
      {
        if (v12)
        {
          v19 = *a1;
          if (*a1)
            v20 = *(_DWORD *)(v19 - 8);
          else
            v20 = 0;
          v21 = ((unint64_t)v12 + ~((_QWORD)v12 << 32)) ^ (((unint64_t)v12 + ~((_QWORD)v12 << 32)) >> 22);
          v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
          v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
          v24 = v20 & ((v23 >> 31) ^ v23);
          v25 = 1;
          do
          {
            v26 = v24;
            v27 = *(_QWORD *)(v19 + 16 * v24);
            v24 = (v24 + v25++) & v20;
          }
          while (v27);
          v28 = v19 + 16 * v26;
          v29 = *(unsigned int **)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          if (v29)
          {
            v30 = v29 + 2;
            do
            {
              v31 = __ldaxr(v30);
              v32 = v31 - 1;
            }
            while (__stlxr(v32, v30));
            if (!v32)
            {
              atomic_store(1u, v29 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v29 + 8))(v29);
            }
          }
          v33 = *(const void **)v28;
          *(_QWORD *)v28 = 0;
          if (v33)
            CFRelease(v33);
          v34 = *v11;
          *v11 = 0;
          *(_QWORD *)v28 = v34;
          v35 = v4 + 16 * v9;
          v36 = *(_QWORD *)(v35 + 8);
          *(_QWORD *)(v35 + 8) = 0;
          *(_QWORD *)(v28 + 8) = v36;
          v37 = *(unsigned int **)(v35 + 8);
          *(_QWORD *)(v35 + 8) = 0;
          if (v37)
          {
            v38 = v37 + 2;
            do
            {
              v39 = __ldaxr(v38);
              v40 = v39 - 1;
            }
            while (__stlxr(v40, v38));
            if (!v40)
            {
              atomic_store(1u, v37 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v37 + 8))(v37);
            }
          }
          v18 = *v11;
          *v11 = 0;
          if (!v18)
            goto LABEL_34;
        }
        else
        {
          v13 = v4 + 16 * v9;
          v14 = *(unsigned int **)(v13 + 8);
          *(_QWORD *)(v13 + 8) = 0;
          if (v14)
          {
            v15 = v14 + 2;
            do
            {
              v16 = __ldaxr(v15);
              v17 = v16 - 1;
            }
            while (__stlxr(v17, v15));
            if (!v17)
            {
              atomic_store(1u, v14 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 8))(v14);
            }
          }
          v18 = *v11;
          *v11 = 0;
          if (!v18)
            goto LABEL_34;
        }
        CFRelease(v18);
      }
LABEL_34:
      if (++v9 == v10)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateAVFoundationObjC::didCancelLoadingRequest(AVAssetResourceLoadingRequest *)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)a1[1];
  *a1 = &off_1E3204DD8;
  a1[1] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateAVFoundationObjC::didCancelLoadingRequest(AVAssetResourceLoadingRequest *)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3204DD8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateAVFoundationObjC::didCancelLoadingRequest(AVAssetResourceLoadingRequest *)::$_0,void>::call(uint64_t a1, void *a2)
{
  return WebCore::WebCoreAVFResourceLoader::stopLoading(*(WebCore::WebCoreAVFResourceLoader **)(a1 + 8), a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateAVFoundationObjC::didStopLoadingRequest(AVAssetResourceLoadingRequest *)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)a1[1];
  *a1 = &off_1E3204E00;
  a1[1] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateAVFoundationObjC::didStopLoadingRequest(AVAssetResourceLoadingRequest *)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3204E00;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t **WTF::ListHashSet<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>,WTF::DefaultHash<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>>>::add(uint64_t **result, uint64_t *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t v6;
  int v7;
  uint64_t **v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  int i;
  unsigned int v14;
  uint64_t **v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  char v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t ***v27;

  v5 = result;
  v6 = *a2;
  if (*a2
    || (result = (uint64_t **)WTF::HashTable<WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *,WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *>>::rehash(a2, 8u, 0), (v6 = *a2) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = 0;
  v9 = ~(*a3 << 32) + *a3;
  v10 = 9 * (((v9 ^ (v9 >> 22)) + ~((v9 ^ (v9 >> 22)) << 13)) ^ (((v9 ^ (v9 >> 22)) + ~((v9 ^ (v9 >> 22)) << 13)) >> 8));
  v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
  v12 = (v11 >> 31) ^ v11;
  for (i = 1; ; ++i)
  {
    v14 = v12 & v7;
    v15 = (uint64_t **)(v6 + 8 * (v12 & v7));
    v16 = *v15;
    if (*v15 == (uint64_t *)-1)
    {
      v8 = (uint64_t **)(v6 + 8 * v14);
      goto LABEL_10;
    }
    if (!v16)
      break;
    if (*v16 == *a3)
    {
      v20 = 0;
      goto LABEL_33;
    }
LABEL_10:
    v12 = i + v14;
  }
  if (v8)
  {
    *v8 = 0;
    --*(_DWORD *)(*a2 - 16);
    v15 = v8;
  }
  result = (uint64_t **)WTF::fastMalloc((WTF *)0x18);
  v17 = (uint64_t *)*a3;
  if (*a3)
    ++*(_DWORD *)v17;
  result[1] = 0;
  result[2] = 0;
  *result = v17;
  *v15 = (uint64_t *)result;
  v18 = *a2;
  if (*a2)
    v19 = *(_DWORD *)(v18 - 12) + 1;
  else
    v19 = 1;
  *(_DWORD *)(v18 - 12) = v19;
  v21 = *a2;
  if (*a2)
    v22 = *(_DWORD *)(v21 - 12);
  else
    v22 = 0;
  v23 = (*(_DWORD *)(v21 - 16) + v22);
  v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 <= 2 * v23)
      goto LABEL_27;
  }
  else if (3 * v24 <= 4 * v23)
  {
    if (!(_DWORD)v24)
    {
      v25 = 8;
      goto LABEL_28;
    }
LABEL_27:
    v25 = (_DWORD)v24 << (6 * *(_DWORD *)(v21 - 12) >= (2 * v24));
LABEL_28:
    v15 = (uint64_t **)WTF::HashTable<WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *,WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *>>::rehash(a2, v25, v15);
    result = (uint64_t **)*v15;
  }
  v26 = a2[2];
  result[1] = (uint64_t *)v26;
  result[2] = 0;
  if (v26)
    v27 = (uint64_t ***)(v26 + 16);
  else
    v27 = (uint64_t ***)(a2 + 1);
  *v27 = result;
  a2[2] = (uint64_t)result;
  v16 = *v15;
  v20 = 1;
LABEL_33:
  *v5 = a2;
  v5[1] = v16;
  *((_BYTE *)v5 + 16) = v20;
  return result;
}

{
  uint64_t **v5;
  uint64_t v6;
  int v7;
  uint64_t **v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  int i;
  unsigned int v14;
  uint64_t **v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  char v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t ***v27;

  v5 = result;
  v6 = *a2;
  if (*a2
    || (result = (uint64_t **)WTF::HashTable<WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *,WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *>>::rehash(a2, 8u, 0), (v6 = *a2) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = 0;
  v9 = ~(*a3 << 32) + *a3;
  v10 = 9 * (((v9 ^ (v9 >> 22)) + ~((v9 ^ (v9 >> 22)) << 13)) ^ (((v9 ^ (v9 >> 22)) + ~((v9 ^ (v9 >> 22)) << 13)) >> 8));
  v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
  v12 = (v11 >> 31) ^ v11;
  for (i = 1; ; ++i)
  {
    v14 = v12 & v7;
    v15 = (uint64_t **)(v6 + 8 * (v12 & v7));
    v16 = *v15;
    if (*v15 == (uint64_t *)-1)
    {
      v8 = (uint64_t **)(v6 + 8 * v14);
      goto LABEL_10;
    }
    if (!v16)
      break;
    if (*v16 == *a3)
    {
      v20 = 0;
      goto LABEL_31;
    }
LABEL_10:
    v12 = i + v14;
  }
  if (v8)
  {
    *v8 = 0;
    --*(_DWORD *)(*a2 - 16);
    v15 = v8;
  }
  result = (uint64_t **)WTF::fastMalloc((WTF *)0x18);
  v17 = (uint64_t *)*a3;
  *a3 = 0;
  result[1] = 0;
  result[2] = 0;
  *result = v17;
  *v15 = (uint64_t *)result;
  v18 = *a2;
  if (*a2)
    v19 = *(_DWORD *)(v18 - 12) + 1;
  else
    v19 = 1;
  *(_DWORD *)(v18 - 12) = v19;
  v21 = *a2;
  if (*a2)
    v22 = *(_DWORD *)(v21 - 12);
  else
    v22 = 0;
  v23 = (*(_DWORD *)(v21 - 16) + v22);
  v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 <= 2 * v23)
      goto LABEL_25;
  }
  else if (3 * v24 <= 4 * v23)
  {
    if (!(_DWORD)v24)
    {
      v25 = 8;
      goto LABEL_26;
    }
LABEL_25:
    v25 = (_DWORD)v24 << (6 * *(_DWORD *)(v21 - 12) >= (2 * v24));
LABEL_26:
    v15 = (uint64_t **)WTF::HashTable<WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *,WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *>>::rehash(a2, v25, v15);
    result = (uint64_t **)*v15;
  }
  v26 = a2[2];
  result[1] = (uint64_t *)v26;
  result[2] = 0;
  if (v26)
    v27 = (uint64_t ***)(v26 + 16);
  else
    v27 = (uint64_t ***)(a2 + 1);
  *v27 = result;
  a2[2] = (uint64_t)result;
  v16 = *v15;
  v20 = 1;
LABEL_31:
  *v5 = a2;
  v5[1] = v16;
  *((_BYTE *)v5 + 16) = v20;
  return result;
}

_QWORD *WTF::HashTable<WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *,WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::MediaSelectionOptionAVFObjC,WTF::RawPtrTraits<WebCore::MediaSelectionOptionAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSelectionOptionAVFObjC>>> *>>::rehash(uint64_t *a1, unsigned int a2, _QWORD **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD **v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD *v24;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (!v7)
  {
    v12 = 0;
    if (!v6)
      return v12;
    goto LABEL_16;
  }
  v11 = 0;
  v12 = 0;
  do
  {
    v13 = (_QWORD **)(v6 + 8 * v11);
    v14 = *v13;
    if ((unint64_t)*v13 + 1 >= 2)
    {
      v15 = *a1;
      if (*a1)
        v16 = *(_DWORD *)(v15 - 8);
      else
        v16 = 0;
      v17 = ~(*v14 << 32) + *v14;
      v18 = (v17 ^ (v17 >> 22)) + ~((v17 ^ (v17 >> 22)) << 13);
      v19 = (9 * (v18 ^ (v18 >> 8))) ^ ((9 * (v18 ^ (v18 >> 8))) >> 15);
      v20 = v16 & (((v19 + ~(v19 << 27)) >> 31) ^ (v19 + ~((_DWORD)v19 << 27)));
      v21 = 1;
      do
      {
        v22 = v20;
        v23 = *(_QWORD *)(v15 + 8 * v20);
        v20 = (v20 + v21++) & v16;
      }
      while (v23);
      v24 = (_QWORD *)(v15 + 8 * v22);
      *v24 = v14;
      if (v13 == a3)
        v12 = v24;
    }
    ++v11;
  }
  while (v11 != v7);
  if (v6)
LABEL_16:
    WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t ___ZN7WebCore46determineChangedTracksFromNewTracksAndOldItemsIN3WTF6RefPtrINS_24AudioTrackPrivateAVFObjCENS1_12RawPtrTraitsIS3_EENS1_21DefaultRefDerefTraitsIS3_EEEERNS_17AudioTrackPrivateEEEvP7NSArrayP8NSStringRNS1_6VectorIT_Lm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEPFSG_P17AVPlayerItemTrackERNS2_INS_11MediaPlayerENS4_ISP_EENS6_ISP_EEEEMSP_FvT0_ESW__block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "assetTrack"), "mediaType"), "isEqualToString:", *(_QWORD *)(a1 + 32));
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [17],unsigned long,char [6],unsigned long>(uint64_t a1, WTF::Logger::LogSiteIdentifier *this, WTF::String **a3, WTF::String **a4)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  NSObject *v11;
  uint64_t v12;
  void *v13;
  char *v14;
  unsigned __int8 *v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  WTF::String *v22;
  WTF::String *v23;
  WTF::Logger *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::Logger *v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  int v40;
  uint64_t v41;
  WTF::Logger *v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  __int128 buf;
  int v58;
  WTF::StringImpl *v59;
  int v60;
  WTF::StringImpl *v61;
  int v62;
  WTF::StringImpl *v63;
  int v64;
  WTF::StringImpl *v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  WTF::String::String((WTF::String *)&v51, "track count was ");
  WTF::String::number(*a3);
  WTF::String::String((WTF::String *)&v49, ", is ");
  WTF::String::number(*a4);
  v46 = v51;
  v56 = v50;
  *(_QWORD *)&buf = v52;
  v54 = v48;
  v55 = v49;
  result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v46, (uint64_t *)&v56, (uint64_t *)&v55, (uint64_t *)&v54, &v53);
  if (v53)
  {
    v6 = v48;
    v48 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v5);
      else
        *(_DWORD *)v6 -= 2;
    }
    v7 = v49;
    v49 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v5);
      else
        *(_DWORD *)v7 -= 2;
    }
    v8 = v50;
    v50 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v5);
      else
        *(_DWORD *)v8 -= 2;
    }
    v9 = v51;
    v51 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v5);
      else
        *(_DWORD *)v9 -= 2;
    }
    v10 = v52;
    v52 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v5);
      else
        *(_DWORD *)v10 -= 2;
    }
    v11 = *(NSObject **)(a1 + 32);
    v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v12)
    {
      WTF::String::utf8();
      v14 = v46 ? (char *)v46 + 16 : 0;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v14;
      _os_log_impl(&dword_1940B8000, v11, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      v12 = (uint64_t)v46;
      v46 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 1)
          v12 = WTF::fastFree((WTF *)v12, v13);
        else
          --*(_DWORD *)v12;
      }
    }
    if (*(_BYTE *)a1)
    {
      v15 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v16 = *v15;
        if ((v16 & 1) != 0)
          break;
        v17 = __ldaxr(v15);
        if (v17 == v16)
        {
          if (!__stxr(v16 | 1, v15))
          {
            v18 = WTF::Logger::observers((WTF::Logger *)v12);
            v19 = *(unsigned int *)(v18 + 12);
            if ((_DWORD)v19)
            {
              v20 = *(uint64_t **)v18;
              v41 = *(_QWORD *)v18 + 8 * v19;
              do
              {
                v21 = *v20;
                LODWORD(buf) = 0;
                WTF::Logger::LogSiteIdentifier::toString(this);
                v58 = 0;
                WTF::String::String((WTF::String *)&v59, "track count was ");
                v22 = *a3;
                v60 = 0;
                WTF::String::number(v22);
                v62 = 0;
                WTF::String::String((WTF::String *)&v63, ", is ");
                v23 = *a4;
                v64 = 0;
                WTF::String::number(v23);
                v46 = 0;
                v47 = 0;
                v24 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x50);
                LODWORD(v47) = 5;
                v46 = v24;
                v25 = HIDWORD(v47);
                *((_DWORD *)v24 + 4 * HIDWORD(v47)) = buf;
                v26 = *((_QWORD *)&buf + 1);
                if (*((_QWORD *)&buf + 1))
                  **((_DWORD **)&buf + 1) += 2;
                *((_QWORD *)v24 + 2 * v25 + 1) = v26;
                *((_DWORD *)v24 + 4 * (v25 + 1)) = v58;
                v27 = v59;
                if (v59)
                  *(_DWORD *)v59 += 2;
                *((_QWORD *)v24 + 2 * (v25 + 1) + 1) = v27;
                *((_DWORD *)v24 + 4 * (v25 + 2)) = v60;
                v28 = v61;
                if (v61)
                  *(_DWORD *)v61 += 2;
                *((_QWORD *)v24 + 2 * (v25 + 2) + 1) = v28;
                *((_DWORD *)v24 + 4 * (v25 + 3)) = v62;
                v29 = v63;
                if (v63)
                  *(_DWORD *)v63 += 2;
                *((_QWORD *)v24 + 2 * (v25 + 3) + 1) = v29;
                *((_DWORD *)v24 + 4 * (v25 + 4)) = v64;
                v30 = v65;
                if (v65)
                  *(_DWORD *)v65 += 2;
                *((_QWORD *)v24 + 2 * (v25 + 4) + 1) = v30;
                HIDWORD(v47) = v25 + 5;
                (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v21 + 16))(v21, a1, 0, &v46);
                v31 = v46;
                if (HIDWORD(v47))
                {
                  v32 = 16 * HIDWORD(v47);
                  v33 = (WTF::StringImpl **)((char *)v46 + 8);
                  do
                  {
                    v34 = *v33;
                    *v33 = 0;
                    if (v34)
                    {
                      if (*(_DWORD *)v34 == 2)
                        WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v13);
                      else
                        *(_DWORD *)v34 -= 2;
                    }
                    v33 += 2;
                    v32 -= 16;
                  }
                  while (v32);
                  v31 = v46;
                }
                if (v31)
                {
                  v46 = 0;
                  LODWORD(v47) = 0;
                  WTF::fastFree(v31, v13);
                }
                v35 = v65;
                v65 = 0;
                if (v35)
                {
                  if (*(_DWORD *)v35 == 2)
                    WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v13);
                  else
                    *(_DWORD *)v35 -= 2;
                }
                v36 = v63;
                v63 = 0;
                if (v36)
                {
                  if (*(_DWORD *)v36 == 2)
                    WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v13);
                  else
                    *(_DWORD *)v36 -= 2;
                }
                v37 = v61;
                v61 = 0;
                if (v37)
                {
                  if (*(_DWORD *)v37 == 2)
                    WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v13);
                  else
                    *(_DWORD *)v37 -= 2;
                }
                v38 = v59;
                v59 = 0;
                if (v38)
                {
                  if (*(_DWORD *)v38 == 2)
                    WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v13);
                  else
                    *(_DWORD *)v38 -= 2;
                }
                v39 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                *((_QWORD *)&buf + 1) = 0;
                if (v39)
                {
                  if (*(_DWORD *)v39 == 2)
                    WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v13);
                  else
                    *(_DWORD *)v39 -= 2;
                }
                ++v20;
              }
              while (v20 != (uint64_t *)v41);
            }
            v40 = __ldxr(v15);
            if (v40 == 1)
            {
              if (!__stlxr(0, v15))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    result = v53;
    v53 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v13);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

void sub_194772C88(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, WTF *a18, int a19, int a20,WTF::StringImpl *a21,WTF::StringImpl *a22,WTF::StringImpl *a23,WTF::StringImpl *a24,uint64_t a25,WTF::StringImpl *a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,WTF::StringImpl *a31,uint64_t a32,WTF::StringImpl *a33,uint64_t a34,WTF::StringImpl *a35,uint64_t a36,WTF::StringImpl *a37,uint64_t a38,WTF::StringImpl *a39)
{
  if (a26)
  {
    if (*(_DWORD *)a26 == 2)
      WTF::StringImpl::destroy(a26, a2);
    else
      *(_DWORD *)a26 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN7WebCore46determineChangedTracksFromNewTracksAndOldItemsIN3WTF6RefPtrINS_24VideoTrackPrivateAVFObjCENS1_12RawPtrTraitsIS3_EENS1_21DefaultRefDerefTraitsIS3_EEEERNS_17VideoTrackPrivateEEEvP7NSArrayP8NSStringRNS1_6VectorIT_Lm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEPFSG_P17AVPlayerItemTrackERNS2_INS_11MediaPlayerENS4_ISP_EENS6_ISP_EEEEMSP_FvT0_ESW__block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "assetTrack"), "mediaType"), "isEqualToString:", *(_QWORD *)(a1 + 32));
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [66]>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4)
{
  uint64_t result;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::Logger *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::Logger *v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  WTF::Logger *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  __int128 buf;
  int v45;
  WTF::StringImpl *v46[3];

  v46[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  result = WTF::String::String((WTF::String *)&v41, a4);
  if (!v42)
  {
    v8 = 0;
    if (v41)
      goto LABEL_3;
LABEL_72:
    v9 = 0;
    goto LABEL_4;
  }
  v8 = *((_DWORD *)v42 + 1);
  if (!v41)
    goto LABEL_72;
LABEL_3:
  v9 = *((_DWORD *)v41 + 1);
LABEL_4:
  if ((v9 | v8) < 0)
    goto LABEL_75;
  result = (v8 + v9);
  if (__OFADD__(v8, v9))
    goto LABEL_75;
  if (v42)
  {
    v10 = *((_DWORD *)v42 + 4);
    v11 = (v10 >> 2) & 1;
    if (v41 && (v10 & 4) != 0)
      goto LABEL_9;
  }
  else
  {
    if (v41)
    {
LABEL_9:
      v11 = (*((unsigned __int8 *)v41 + 16) >> 2) & 1;
      goto LABEL_10;
    }
    v11 = 1;
  }
LABEL_10:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v11, (uint64_t)v42, (uint64_t)v41, &buf);
  v43 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_75:
    __break(0xC471u);
    return result;
  }
  v13 = v41;
  v41 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v42;
  v42 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *(NSObject **)(a1 + 32);
  v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v16)
  {
    WTF::String::utf8();
    v18 = v39 ? (char *)v39 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v18;
    _os_log_impl(&dword_1940B8000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v16 = (uint64_t)v39;
    v39 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
        v16 = WTF::fastFree((WTF *)v16, v17);
      else
        --*(_DWORD *)v16;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v19 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v20 = *v19;
      if ((v20 & 1) != 0)
        break;
      v21 = __ldaxr(v19);
      if (v21 == v20)
      {
        if (!__stxr(v20 | 1, v19))
        {
          v22 = WTF::Logger::observers((WTF::Logger *)v16);
          v23 = *(unsigned int *)(v22 + 12);
          if ((_DWORD)v23)
          {
            v24 = *(uint64_t **)v22;
            v25 = *(_QWORD *)v22 + 8 * v23;
            do
            {
              v26 = *v24;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v45 = 0;
              WTF::String::String((WTF::String *)v46, a4);
              v39 = 0;
              v40 = 0;
              v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v40) = 2;
              v39 = v27;
              v28 = HIDWORD(v40);
              *((_DWORD *)v27 + 4 * HIDWORD(v40)) = buf;
              v29 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v27 + 2 * v28 + 1) = v29;
              *((_DWORD *)v27 + 4 * (v28 + 1)) = v45;
              v30 = v46[0];
              if (v46[0])
                *(_DWORD *)v46[0] += 2;
              *((_QWORD *)v27 + 2 * (v28 + 1) + 1) = v30;
              HIDWORD(v40) = v28 + 2;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, a1, a2, &v39);
              v31 = v39;
              if (HIDWORD(v40))
              {
                v32 = 16 * HIDWORD(v40);
                v33 = (WTF::StringImpl **)((char *)v39 + 8);
                do
                {
                  v34 = *v33;
                  *v33 = 0;
                  if (v34)
                  {
                    if (*(_DWORD *)v34 == 2)
                      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v17);
                    else
                      *(_DWORD *)v34 -= 2;
                  }
                  v33 += 2;
                  v32 -= 16;
                }
                while (v32);
                v31 = v39;
              }
              if (v31)
              {
                v39 = 0;
                LODWORD(v40) = 0;
                WTF::fastFree(v31, v17);
              }
              v35 = v46[0];
              v46[0] = 0;
              if (v35)
              {
                if (*(_DWORD *)v35 == 2)
                  WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v35 -= 2;
              }
              v36 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                  WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v36 -= 2;
              }
              ++v24;
            }
            while (v24 != (uint64_t *)v25);
          }
          v37 = __ldxr(v19);
          if (v37 == 1)
          {
            if (!__stlxr(0, v19))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v43;
  v43 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_194773364(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, WTF::StringImpl *a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19)
{
  unsigned __int8 *v19;
  int v21;

  v21 = __ldxr(v19);
  if (v21 == 1)
  {
    if (!__stlxr(0, v19))
    {
LABEL_6:
      if (a15)
      {
        if (*(_DWORD *)a15 == 2)
          WTF::StringImpl::destroy(a15, a2);
        else
          *(_DWORD *)a15 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

void WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateAVFoundationObjC::paintWithVideoOutput(WebCore::GraphicsContext &,WebCore::FloatRect const&)::$_0,void>::call(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  BOOL v4;
  uint64_t v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;
  float32x2_t v9;
  float v10;
  float v11;
  _QWORD v12[4];

  v1 = *(_QWORD **)(a1 + 40);
  v2 = v1[66];
  if (v2)
  {
    if (*(_BYTE *)(v1[35] + 12))
    {
      if (WebCore::LogMedia)
        v4 = byte_1ECE7C490 >= 3u;
      else
        v4 = 0;
      if (v4)
      {
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 3, (WTF::Logger::LogSiteIdentifier *)(a1 + 8));
        v2 = v1[66];
      }
    }
    v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 48) + 24))(*(_QWORD *)(v2 + 48));
    v9 = 0;
    v10 = (float)(int)v5;
    v11 = (float)SHIDWORD(v5);
    WebCore::GraphicsContext::drawNativeImage(*(WebCore::GraphicsContext **)(a1 + 48), v1[66], *(_QWORD *)(a1 + 56), &v9, 4641);
    v6 = (const void *)v1[62];
    if (v6)
    {
      v7 = v1[35];
      v8 = v1[36];
      v12[0] = "MediaPlayerPrivateAVFoundationObjC";
      v12[1] = 35;
      v12[2] = "destroyImageGenerator";
      v12[3] = v8;
      if (*(_BYTE *)(v7 + 12) && WebCore::LogMedia && byte_1ECE7C490 > 2u)
      {
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 3, (WTF::Logger::LogSiteIdentifier *)v12);
        v6 = (const void *)v1[62];
        v1[62] = 0;
        if (!v6)
          return;
      }
      else
      {
        v1[62] = 0;
      }
      CFRelease(v6);
    }
  }
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateAVFoundationObjC::nativeImageForCurrentTime(void)::$_0,void>::call(uint64_t result, void *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  uint64_t v15;

  v2 = *(uint64_t **)(result + 8);
  v3 = *(_QWORD *)(*(_QWORD *)(result + 16) + 528);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (__ldaxr((unsigned __int8 *)v4))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v4))
    {
      goto LABEL_6;
    }
    result = MEMORY[0x19AEA534C](v4);
LABEL_6:
    ++*(_QWORD *)(v4 + 8);
    v6 = __ldxr((unsigned __int8 *)v4);
    if (v6 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v4))
        goto LABEL_11;
    }
    else
    {
      __clrex();
    }
    result = WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
LABEL_11:
  v7 = *v2;
  *v2 = v3;
  if (!v7)
    return result;
  v8 = *(_QWORD *)(v7 + 8);
  if (__ldaxr((unsigned __int8 *)v8))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v8))
  {
    goto LABEL_16;
  }
  result = MEMORY[0x19AEA534C](v8);
LABEL_16:
  v10 = *(_QWORD *)(v8 + 8);
  v11 = v10 - 1;
  *(_QWORD *)(v8 + 8) = v10 - 1;
  if (v10 == 1)
  {
    v15 = *(_QWORD *)(v8 + 16);
    v12 = *(_QWORD *)(v8 + 24);
    *(_QWORD *)(v8 + 24) = 0;
    v13 = v15 != 0;
  }
  else
  {
    v12 = 0;
    v13 = 1;
  }
  v14 = __ldxr((unsigned __int8 *)v8);
  if (v14 != 1)
  {
    __clrex();
LABEL_23:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v8);
    if (v11)
      return result;
    goto LABEL_24;
  }
  if (__stlxr(0, (unsigned __int8 *)v8))
    goto LABEL_23;
  if (v11)
    return result;
LABEL_24:
  if (v12)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  if (!v13)
    return WTF::fastFree((WTF *)v8, a2);
  return result;
}

void WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateAVFoundationObjC::colorSpace(void)::$_0,void>::call(uint64_t a1, uint64_t a2, uint64_t a3, CVAttachmentMode *a4)
{
  WebCore *v5;
  const void **v6;
  const void *v7;
  const void *v8;

  v5 = *(WebCore **)(*(_QWORD *)(a1 + 8) + 520);
  if (v5)
  {
    WebCore::createCGColorSpaceForCVPixelBuffer(v5, a4, (uint64_t *)&v8);
    v6 = *(const void ***)(a1 + 16);
    v7 = *v6;
    *v6 = v8;
    if (v7)
      CFRelease(v7);
  }
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [10]>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4)
{
  uint64_t result;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::Logger *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::Logger *v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  WTF::Logger *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  __int128 buf;
  int v45;
  WTF::StringImpl *v46[3];

  v46[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  result = WTF::String::String((WTF::String *)&v41, a4);
  if (!v42)
  {
    v8 = 0;
    if (v41)
      goto LABEL_3;
LABEL_72:
    v9 = 0;
    goto LABEL_4;
  }
  v8 = *((_DWORD *)v42 + 1);
  if (!v41)
    goto LABEL_72;
LABEL_3:
  v9 = *((_DWORD *)v41 + 1);
LABEL_4:
  if ((v9 | v8) < 0)
    goto LABEL_75;
  result = (v8 + v9);
  if (__OFADD__(v8, v9))
    goto LABEL_75;
  if (v42)
  {
    v10 = *((_DWORD *)v42 + 4);
    v11 = (v10 >> 2) & 1;
    if (v41 && (v10 & 4) != 0)
      goto LABEL_9;
  }
  else
  {
    if (v41)
    {
LABEL_9:
      v11 = (*((unsigned __int8 *)v41 + 16) >> 2) & 1;
      goto LABEL_10;
    }
    v11 = 1;
  }
LABEL_10:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v11, (uint64_t)v42, (uint64_t)v41, &buf);
  v43 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_75:
    __break(0xC471u);
    return result;
  }
  v13 = v41;
  v41 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v42;
  v42 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *(NSObject **)(a1 + 32);
  v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v16)
  {
    WTF::String::utf8();
    v18 = v39 ? (char *)v39 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v18;
    _os_log_impl(&dword_1940B8000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v16 = (uint64_t)v39;
    v39 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
        v16 = WTF::fastFree((WTF *)v16, v17);
      else
        --*(_DWORD *)v16;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v19 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v20 = *v19;
      if ((v20 & 1) != 0)
        break;
      v21 = __ldaxr(v19);
      if (v21 == v20)
      {
        if (!__stxr(v20 | 1, v19))
        {
          v22 = WTF::Logger::observers((WTF::Logger *)v16);
          v23 = *(unsigned int *)(v22 + 12);
          if ((_DWORD)v23)
          {
            v24 = *(uint64_t **)v22;
            v25 = *(_QWORD *)v22 + 8 * v23;
            do
            {
              v26 = *v24;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v45 = 0;
              WTF::String::String((WTF::String *)v46, a4);
              v39 = 0;
              v40 = 0;
              v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v40) = 2;
              v39 = v27;
              v28 = HIDWORD(v40);
              *((_DWORD *)v27 + 4 * HIDWORD(v40)) = buf;
              v29 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v27 + 2 * v28 + 1) = v29;
              *((_DWORD *)v27 + 4 * (v28 + 1)) = v45;
              v30 = v46[0];
              if (v46[0])
                *(_DWORD *)v46[0] += 2;
              *((_QWORD *)v27 + 2 * (v28 + 1) + 1) = v30;
              HIDWORD(v40) = v28 + 2;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, a1, a2, &v39);
              v31 = v39;
              if (HIDWORD(v40))
              {
                v32 = 16 * HIDWORD(v40);
                v33 = (WTF::StringImpl **)((char *)v39 + 8);
                do
                {
                  v34 = *v33;
                  *v33 = 0;
                  if (v34)
                  {
                    if (*(_DWORD *)v34 == 2)
                      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v17);
                    else
                      *(_DWORD *)v34 -= 2;
                  }
                  v33 += 2;
                  v32 -= 16;
                }
                while (v32);
                v31 = v39;
              }
              if (v31)
              {
                v39 = 0;
                LODWORD(v40) = 0;
                WTF::fastFree(v31, v17);
              }
              v35 = v46[0];
              v46[0] = 0;
              if (v35)
              {
                if (*(_DWORD *)v35 == 2)
                  WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v35 -= 2;
              }
              v36 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                  WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v36 -= 2;
              }
              ++v24;
            }
            while (v24 != (uint64_t *)v25);
          }
          v37 = __ldxr(v19);
          if (v37 == 1)
          {
            if (!__stlxr(0, v19))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v43;
  v43 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_194773B9C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, WTF::StringImpl *a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19)
{
  unsigned __int8 *v19;
  int v21;

  v21 = __ldxr(v19);
  if (v21 == 1)
  {
    if (!__stlxr(0, v19))
    {
LABEL_6:
      if (a15)
      {
        if (*(_DWORD *)a15 == 2)
          WTF::StringImpl::destroy(a15, a2);
        else
          *(_DWORD *)a15 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RetainPtr<AVAssetResourceLoadingRequest>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RetainPtr<AVAssetResourceLoadingRequest>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RetainPtr<AVAssetResourceLoadingRequest>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<AVAssetResourceLoadingRequest>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::remove(uint64_t a1, WTF::StringImpl **a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t result;
  int v15;
  uint64_t v16;
  unsigned int v17;
  WTF::StringImpl **v18;
  unsigned int v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  const void **v24;
  uint64_t v25;
  const void *v26;
  const void *v27;
  WTF::StringImpl *v28;

  v4 = *a2;
  *a2 = (WTF::StringImpl *)-1;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = a2[1];
  a2[1] = 0;
  if (v5)
    CFRelease(v5);
  *a2 = 0;
  a2[1] = 0;
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 12) - 1;
  *(_DWORD *)(a1 + 12) = v7;
  v8 = v6 - 1;
  v9 = *(_QWORD *)a1;
  v10 = (unint64_t)a2 - *(_QWORD *)a1;
  v11 = (v10 >> 4) + 1;
  v12 = v11 & (v6 - 1);
  v13 = (uint64_t *)(*(_QWORD *)a1 + 16 * v12);
  result = *v13;
  if (*v13)
  {
    v15 = *(_DWORD *)(a1 + 16);
    v16 = (v10 >> 4);
    v17 = v11 & v8;
    v18 = (WTF::StringImpl **)(v9 + 16 * v16);
    do
    {
      v19 = *(_DWORD *)(result + 16);
      if (v19 < 0x100)
        result = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)result);
      else
        result = v19 >> 8;
      if (((v17 + v6 - ((result ^ v15) & v8)) & v8) == 0)
        break;
      v20 = (WTF::StringImpl *)*v13;
      *v13 = 0;
      v21 = *v18;
      *v18 = v20;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v21 -= 2;
      }
      v22 = v9 + 16 * v16;
      v23 = v9 + 16 * v12;
      v25 = *(_QWORD *)(v23 + 8);
      v24 = (const void **)(v23 + 8);
      *v24 = 0;
      v26 = *(const void **)(v22 + 8);
      *(_QWORD *)(v22 + 8) = v25;
      if (v26)
        CFRelease(v26);
      v27 = *v24;
      *v24 = 0;
      if (v27)
        CFRelease(v27);
      v28 = (WTF::StringImpl *)*v13;
      *v13 = 0;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2)
          WTF::StringImpl::destroy(v28, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v28 -= 2;
      }
      *v13 = 0;
      v13[1] = 0;
      v12 = (v17 + 1) & v8;
      v9 = *(_QWORD *)a1;
      v16 = v17;
      v18 = (WTF::StringImpl **)(*(_QWORD *)a1 + 16 * v17);
      v13 = (uint64_t *)(*(_QWORD *)a1 + 16 * v12);
      result = *v13;
      v17 = (v17 + 1) & v8;
    }
    while (*v13);
    v6 = *(_DWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 12);
  }
  if (v6 >= 9 && 6 * v7 < v6)
    return WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RetainPtr<AVAssetResourceLoadingRequest>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RetainPtr<AVAssetResourceLoadingRequest>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RetainPtr<AVAssetResourceLoadingRequest>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<AVAssetResourceLoadingRequest>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash((uint64_t *)a1, v6 >> 1);
  return result;
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RetainPtr<AVAssetResourceLoadingRequest>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RetainPtr<AVAssetResourceLoadingRequest>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RetainPtr<AVAssetResourceLoadingRequest>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<AVAssetResourceLoadingRequest>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::RetainPtr<AVAssetResourceLoadingRequest>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<AVAssetResourceLoadingRequest>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  WTF **v11;
  unsigned int v12;
  WTF *v13;
  int v14;
  unsigned int v15;
  int v16;
  char v17;

  v3 = *a1;
  v4 = *((unsigned int *)a1 + 2);
  if (!*a1)
    return 16 * v4;
  v7 = v4 - 1;
  v8 = *((_DWORD *)a1 + 4);
  v9 = *((_DWORD *)*a2 + 4);
  if (v9 < 0x100)
  {
    v10 = WTF::StringImpl::hashSlowCase(*a2);
    v3 = *a1;
  }
  else
  {
    v10 = v9 >> 8;
  }
  v12 = (v10 ^ v8) & v7;
  v11 = (WTF **)(v3 + 16 * v12);
  v13 = *v11;
  if (*v11)
  {
    v14 = -1;
    while (1)
    {
      v15 = *((_DWORD *)v13 + 4);
      v16 = v15 < 0x100 ? WTF::StringImpl::hashSlowCase(v13) : v15 >> 8;
      if (++v14 > ((v12 + v4 - ((v16 ^ v8) & v7)) & v7))
        break;
      if (v16 == v10)
      {
        v17 = WTF::equal(*v11, *a2, a3);
        v3 = *a1;
        if ((v17 & 1) != 0)
          return (uint64_t)v11;
      }
      else
      {
        v3 = *a1;
      }
      v12 = (v12 + 1) & v7;
      v11 = (WTF **)(v3 + 16 * v12);
      v13 = *v11;
      if (!*v11)
        return v3 + 16 * *((unsigned int *)a1 + 2);
    }
    v3 = *a1;
  }
  return v3 + 16 * *((unsigned int *)a1 + 2);
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [65],NSString *,char [12],NSString *>(uint64_t a1, WTF::Logger::LogSiteIdentifier *this, id *a3, id *a4)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  NSObject *v12;
  uint64_t v13;
  void *v14;
  char *v15;
  unsigned __int8 *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  id v23;
  id v24;
  WTF::Logger *v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::Logger *v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl **v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  int v42;
  uint64_t v43;
  WTF::Logger *v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  __int128 buf;
  int v59;
  WTF::StringImpl *v60;
  int v61;
  WTF::StringImpl *v62;
  int v63;
  WTF::StringImpl *v64;
  int v65;
  WTF::StringImpl *v66[3];

  v66[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  WTF::String::String((WTF::String *)&v52, "exception thrown from -selectMediaOption:inMediaSelectionGroup: ");
  MEMORY[0x19AEA5508](&v51, objc_msgSend(*a3, "description"));
  WTF::String::String((WTF::String *)&v50, ", reason : ");
  MEMORY[0x19AEA5508](&v49, objc_msgSend(*a4, "description"));
  v47 = v52;
  v57 = v51;
  *(_QWORD *)&buf = v53;
  v55 = v49;
  v56 = v50;
  result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v47, (uint64_t *)&v57, (uint64_t *)&v56, (uint64_t *)&v55, &v54);
  if (v54)
  {
    v7 = v49;
    v49 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v6);
      else
        *(_DWORD *)v7 -= 2;
    }
    v8 = v50;
    v50 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v6);
      else
        *(_DWORD *)v8 -= 2;
    }
    v9 = v51;
    v51 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v6);
      else
        *(_DWORD *)v9 -= 2;
    }
    v10 = v52;
    v52 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v6);
      else
        *(_DWORD *)v10 -= 2;
    }
    v11 = v53;
    v53 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v6);
      else
        *(_DWORD *)v11 -= 2;
    }
    v12 = *(NSObject **)(a1 + 32);
    v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v13)
    {
      WTF::String::utf8();
      v15 = v47 ? (char *)v47 + 16 : 0;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v15;
      _os_log_impl(&dword_1940B8000, v12, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      v13 = (uint64_t)v47;
      v47 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 1)
          v13 = WTF::fastFree((WTF *)v13, v14);
        else
          --*(_DWORD *)v13;
      }
    }
    if (*(_BYTE *)a1 && *(_BYTE *)(a1 + 16))
    {
      v16 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v17 = *v16;
        if ((v17 & 1) != 0)
          break;
        v18 = __ldaxr(v16);
        if (v18 == v17)
        {
          if (!__stxr(v17 | 1, v16))
          {
            v19 = WTF::Logger::observers((WTF::Logger *)v13);
            v20 = *(unsigned int *)(v19 + 12);
            if ((_DWORD)v20)
            {
              v21 = *(uint64_t **)v19;
              v43 = *(_QWORD *)v19 + 8 * v20;
              do
              {
                v22 = *v21;
                LODWORD(buf) = 0;
                WTF::Logger::LogSiteIdentifier::toString(this);
                v59 = 0;
                WTF::String::String((WTF::String *)&v60, "exception thrown from -selectMediaOption:inMediaSelectionGroup: ");
                v23 = *a3;
                v61 = 0;
                MEMORY[0x19AEA5508](&v62, objc_msgSend(v23, "description"));
                v63 = 0;
                WTF::String::String((WTF::String *)&v64, ", reason : ");
                v24 = *a4;
                v65 = 0;
                MEMORY[0x19AEA5508](v66, objc_msgSend(v24, "description"));
                v47 = 0;
                v48 = 0;
                v25 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x50);
                LODWORD(v48) = 5;
                v47 = v25;
                v26 = HIDWORD(v48);
                *((_DWORD *)v25 + 4 * HIDWORD(v48)) = buf;
                v27 = *((_QWORD *)&buf + 1);
                if (*((_QWORD *)&buf + 1))
                  **((_DWORD **)&buf + 1) += 2;
                *((_QWORD *)v25 + 2 * v26 + 1) = v27;
                *((_DWORD *)v25 + 4 * (v26 + 1)) = v59;
                v28 = v60;
                if (v60)
                  *(_DWORD *)v60 += 2;
                *((_QWORD *)v25 + 2 * (v26 + 1) + 1) = v28;
                *((_DWORD *)v25 + 4 * (v26 + 2)) = v61;
                v29 = v62;
                if (v62)
                  *(_DWORD *)v62 += 2;
                *((_QWORD *)v25 + 2 * (v26 + 2) + 1) = v29;
                *((_DWORD *)v25 + 4 * (v26 + 3)) = v63;
                v30 = v64;
                if (v64)
                  *(_DWORD *)v64 += 2;
                *((_QWORD *)v25 + 2 * (v26 + 3) + 1) = v30;
                *((_DWORD *)v25 + 4 * (v26 + 4)) = v65;
                v31 = v66[0];
                if (v66[0])
                  *(_DWORD *)v66[0] += 2;
                *((_QWORD *)v25 + 2 * (v26 + 4) + 1) = v31;
                HIDWORD(v48) = v26 + 5;
                (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::Logger **))(*(_QWORD *)v22 + 16))(v22, a1, 1, &v47);
                v32 = v47;
                if (HIDWORD(v48))
                {
                  v33 = a1;
                  v34 = 16 * HIDWORD(v48);
                  v35 = (WTF::StringImpl **)((char *)v47 + 8);
                  do
                  {
                    v36 = *v35;
                    *v35 = 0;
                    if (v36)
                    {
                      if (*(_DWORD *)v36 == 2)
                        WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v14);
                      else
                        *(_DWORD *)v36 -= 2;
                    }
                    v35 += 2;
                    v34 -= 16;
                  }
                  while (v34);
                  v32 = v47;
                  a1 = v33;
                }
                if (v32)
                {
                  v47 = 0;
                  LODWORD(v48) = 0;
                  WTF::fastFree(v32, v14);
                }
                v37 = v66[0];
                v66[0] = 0;
                if (v37)
                {
                  if (*(_DWORD *)v37 == 2)
                    WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v14);
                  else
                    *(_DWORD *)v37 -= 2;
                }
                v38 = v64;
                v64 = 0;
                if (v38)
                {
                  if (*(_DWORD *)v38 == 2)
                    WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v14);
                  else
                    *(_DWORD *)v38 -= 2;
                }
                v39 = v62;
                v62 = 0;
                if (v39)
                {
                  if (*(_DWORD *)v39 == 2)
                    WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v14);
                  else
                    *(_DWORD *)v39 -= 2;
                }
                v40 = v60;
                v60 = 0;
                if (v40)
                {
                  if (*(_DWORD *)v40 == 2)
                    WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v14);
                  else
                    *(_DWORD *)v40 -= 2;
                }
                v41 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                *((_QWORD *)&buf + 1) = 0;
                if (v41)
                {
                  if (*(_DWORD *)v41 == 2)
                    WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v14);
                  else
                    *(_DWORD *)v41 -= 2;
                }
                ++v21;
              }
              while (v21 != (uint64_t *)v43);
            }
            v42 = __ldxr(v16);
            if (v42 == 1)
            {
              if (!__stlxr(0, v16))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    result = v54;
    v54 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v14);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

void sub_1947745E8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, WTF *a18, int a19, int a20,WTF::StringImpl *a21,WTF::StringImpl *a22,WTF::StringImpl *a23,WTF::StringImpl *a24,uint64_t a25,WTF::StringImpl *a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,WTF::StringImpl *a31,uint64_t a32,WTF::StringImpl *a33,uint64_t a34,WTF::StringImpl *a35,uint64_t a36,WTF::StringImpl *a37,uint64_t a38,WTF::StringImpl *a39)
{
  unsigned __int8 *v39;
  int v41;

  v41 = __ldxr(v39);
  if (v41 == 1)
  {
    if (!__stlxr(0, v39))
    {
LABEL_6:
      if (a26)
      {
        if (*(_DWORD *)a26 == 2)
          WTF::StringImpl::destroy(a26, a2);
        else
          *(_DWORD *)a26 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [22]>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4)
{
  uint64_t result;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::Logger *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::Logger *v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  WTF::Logger *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  __int128 buf;
  int v45;
  WTF::StringImpl *v46[3];

  v46[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  result = WTF::String::String((WTF::String *)&v41, a4);
  if (!v42)
  {
    v8 = 0;
    if (v41)
      goto LABEL_3;
LABEL_72:
    v9 = 0;
    goto LABEL_4;
  }
  v8 = *((_DWORD *)v42 + 1);
  if (!v41)
    goto LABEL_72;
LABEL_3:
  v9 = *((_DWORD *)v41 + 1);
LABEL_4:
  if ((v9 | v8) < 0)
    goto LABEL_75;
  result = (v8 + v9);
  if (__OFADD__(v8, v9))
    goto LABEL_75;
  if (v42)
  {
    v10 = *((_DWORD *)v42 + 4);
    v11 = (v10 >> 2) & 1;
    if (v41 && (v10 & 4) != 0)
      goto LABEL_9;
  }
  else
  {
    if (v41)
    {
LABEL_9:
      v11 = (*((unsigned __int8 *)v41 + 16) >> 2) & 1;
      goto LABEL_10;
    }
    v11 = 1;
  }
LABEL_10:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v11, (uint64_t)v42, (uint64_t)v41, &buf);
  v43 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_75:
    __break(0xC471u);
    return result;
  }
  v13 = v41;
  v41 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v42;
  v42 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *(NSObject **)(a1 + 32);
  v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v16)
  {
    WTF::String::utf8();
    v18 = v39 ? (char *)v39 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v18;
    _os_log_impl(&dword_1940B8000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v16 = (uint64_t)v39;
    v39 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
        v16 = WTF::fastFree((WTF *)v16, v17);
      else
        --*(_DWORD *)v16;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v19 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v20 = *v19;
      if ((v20 & 1) != 0)
        break;
      v21 = __ldaxr(v19);
      if (v21 == v20)
      {
        if (!__stxr(v20 | 1, v19))
        {
          v22 = WTF::Logger::observers((WTF::Logger *)v16);
          v23 = *(unsigned int *)(v22 + 12);
          if ((_DWORD)v23)
          {
            v24 = *(uint64_t **)v22;
            v25 = *(_QWORD *)v22 + 8 * v23;
            do
            {
              v26 = *v24;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v45 = 0;
              WTF::String::String((WTF::String *)v46, a4);
              v39 = 0;
              v40 = 0;
              v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v40) = 2;
              v39 = v27;
              v28 = HIDWORD(v40);
              *((_DWORD *)v27 + 4 * HIDWORD(v40)) = buf;
              v29 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v27 + 2 * v28 + 1) = v29;
              *((_DWORD *)v27 + 4 * (v28 + 1)) = v45;
              v30 = v46[0];
              if (v46[0])
                *(_DWORD *)v46[0] += 2;
              *((_QWORD *)v27 + 2 * (v28 + 1) + 1) = v30;
              HIDWORD(v40) = v28 + 2;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, a1, a2, &v39);
              v31 = v39;
              if (HIDWORD(v40))
              {
                v32 = 16 * HIDWORD(v40);
                v33 = (WTF::StringImpl **)((char *)v39 + 8);
                do
                {
                  v34 = *v33;
                  *v33 = 0;
                  if (v34)
                  {
                    if (*(_DWORD *)v34 == 2)
                      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v17);
                    else
                      *(_DWORD *)v34 -= 2;
                  }
                  v33 += 2;
                  v32 -= 16;
                }
                while (v32);
                v31 = v39;
              }
              if (v31)
              {
                v39 = 0;
                LODWORD(v40) = 0;
                WTF::fastFree(v31, v17);
              }
              v35 = v46[0];
              v46[0] = 0;
              if (v35)
              {
                if (*(_DWORD *)v35 == 2)
                  WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v35 -= 2;
              }
              v36 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                  WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v36 -= 2;
              }
              ++v24;
            }
            while (v24 != (uint64_t *)v25);
          }
          v37 = __ldxr(v19);
          if (v37 == 1)
          {
            if (!__stlxr(0, v19))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v43;
  v43 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_194774CA0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, WTF::StringImpl *a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19)
{
  unsigned __int8 *v19;
  int v21;

  v21 = __ldxr(v19);
  if (v21 == 1)
  {
    if (!__stlxr(0, v19))
    {
LABEL_6:
      if (a15)
      {
        if (*(_DWORD *)a15 == 2)
          WTF::StringImpl::destroy(a15, a2);
        else
          *(_DWORD *)a15 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::MediaPlayerBufferingPolicy>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, unsigned __int8 *a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  NSObject *v16;
  uint64_t v17;
  void *v18;
  char *v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::Logger *v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::Logger *v34;
  uint64_t v35;
  WTF::StringImpl **v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  int v40;
  WTF::Logger *v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  __int128 buf;
  int v47;
  WTF::StringImpl *v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  result = WTF::Logger::LogSiteIdentifier::toString(this);
  v8 = *a4;
  {
    WebCore::convertEnumerationToString(WebCore::MediaPlayerBufferingPolicy)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::MediaPlayerBufferingPolicy)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::MediaPlayerBufferingPolicy)::$_2::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::MediaPlayerBufferingPolicy)::$_3::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::MediaPlayerBufferingPolicy)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlayerBufferingPolicy)::$_0::operator() const(void)::impl;
    *(_QWORD *)algn_1EE2F8C28 = &WebCore::convertEnumerationToString(WebCore::MediaPlayerBufferingPolicy)::$_1::operator() const(void)::impl;
    qword_1EE2F8C30 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlayerBufferingPolicy)::$_2::operator() const(void)::impl;
    unk_1EE2F8C38 = &WebCore::convertEnumerationToString(WebCore::MediaPlayerBufferingPolicy)::$_3::operator() const(void)::impl;
  }
  v9 = WebCore::convertEnumerationToString(WebCore::MediaPlayerBufferingPolicy)::values[v8];
  if (v9)
    *(_DWORD *)v9 += 2;
  if (!v44)
  {
    v10 = 0;
    if (v9)
      goto LABEL_7;
LABEL_80:
    v11 = 0;
    goto LABEL_8;
  }
  v10 = *((_DWORD *)v44 + 1);
  if (!v9)
    goto LABEL_80;
LABEL_7:
  v11 = *(_DWORD *)(v9 + 4);
LABEL_8:
  if ((v11 | v10) < 0)
    goto LABEL_83;
  result = (v10 + v11);
  if (__OFADD__(v10, v11))
    goto LABEL_83;
  if (v44)
  {
    v12 = *((_DWORD *)v44 + 4);
    v13 = (v12 >> 2) & 1;
    if (v9 && (v12 & 4) != 0)
      goto LABEL_13;
  }
  else
  {
    if (v9)
    {
LABEL_13:
      v13 = (*(unsigned __int8 *)(v9 + 16) >> 2) & 1;
      goto LABEL_14;
    }
    v13 = 1;
  }
LABEL_14:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v13, (uint64_t)v44, v9, &buf);
  v45 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_83:
    __break(0xC471u);
    return result;
  }
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v9, v14);
    else
      *(_DWORD *)v9 -= 2;
  }
  v15 = v44;
  v44 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v14);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = *(NSObject **)(a1 + 32);
  v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v17)
  {
    WTF::String::utf8();
    v19 = v42 ? (char *)v42 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v19;
    _os_log_impl(&dword_1940B8000, v16, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v17 = (uint64_t)v42;
    v42 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 1)
        v17 = WTF::fastFree((WTF *)v17, v18);
      else
        --*(_DWORD *)v17;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v20 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v21 = *v20;
      if ((v21 & 1) != 0)
        break;
      v22 = __ldaxr(v20);
      if (v22 == v21)
      {
        if (!__stxr(v21 | 1, v20))
        {
          v23 = WTF::Logger::observers((WTF::Logger *)v17);
          v24 = *(unsigned int *)(v23 + 12);
          if ((_DWORD)v24)
          {
            v25 = *(uint64_t **)v23;
            v26 = *(_QWORD *)v23 + 8 * v24;
            do
            {
              v27 = *v25;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v28 = *a4;
              v47 = 0;
              {
                WebCore::convertEnumerationToString(WebCore::MediaPlayerBufferingPolicy)::$_0::operator() const(void)::impl += 2;
                WebCore::convertEnumerationToString(WebCore::MediaPlayerBufferingPolicy)::$_1::operator() const(void)::impl += 2;
                WebCore::convertEnumerationToString(WebCore::MediaPlayerBufferingPolicy)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlayerBufferingPolicy)::$_0::operator() const(void)::impl;
                *(_QWORD *)algn_1EE2F8C28 = &WebCore::convertEnumerationToString(WebCore::MediaPlayerBufferingPolicy)::$_1::operator() const(void)::impl;
                WebCore::convertEnumerationToString(WebCore::MediaPlayerBufferingPolicy)::$_2::operator() const(void)::impl += 2;
                WebCore::convertEnumerationToString(WebCore::MediaPlayerBufferingPolicy)::$_3::operator() const(void)::impl += 2;
                qword_1EE2F8C30 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlayerBufferingPolicy)::$_2::operator() const(void)::impl;
                unk_1EE2F8C38 = &WebCore::convertEnumerationToString(WebCore::MediaPlayerBufferingPolicy)::$_3::operator() const(void)::impl;
              }
              v29 = (WTF::StringImpl *)WebCore::convertEnumerationToString(WebCore::MediaPlayerBufferingPolicy)::values[v28];
              if (v29)
                *(_DWORD *)v29 += 2;
              v48 = v29;
              v42 = 0;
              v43 = 0;
              v30 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v43) = 2;
              v42 = v30;
              v31 = HIDWORD(v43);
              *((_DWORD *)v30 + 4 * HIDWORD(v43)) = buf;
              v32 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v30 + 2 * v31 + 1) = v32;
              *((_DWORD *)v30 + 4 * (v31 + 1)) = v47;
              v33 = v48;
              if (v48)
                *(_DWORD *)v48 += 2;
              *((_QWORD *)v30 + 2 * (v31 + 1) + 1) = v33;
              HIDWORD(v43) = v31 + 2;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v27 + 16))(v27, a1, a2, &v42);
              v34 = v42;
              if (HIDWORD(v43))
              {
                v35 = 16 * HIDWORD(v43);
                v36 = (WTF::StringImpl **)((char *)v42 + 8);
                do
                {
                  v37 = *v36;
                  *v36 = 0;
                  if (v37)
                  {
                    if (*(_DWORD *)v37 == 2)
                      WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v18);
                    else
                      *(_DWORD *)v37 -= 2;
                  }
                  v36 += 2;
                  v35 -= 16;
                }
                while (v35);
                v34 = v42;
              }
              if (v34)
              {
                v42 = 0;
                LODWORD(v43) = 0;
                WTF::fastFree(v34, v18);
              }
              v38 = v48;
              v48 = 0;
              if (v38)
              {
                if (*(_DWORD *)v38 == 2)
                  WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v18);
                else
                  *(_DWORD *)v38 -= 2;
              }
              v39 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v39)
              {
                if (*(_DWORD *)v39 == 2)
                  WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v18);
                else
                  *(_DWORD *)v39 -= 2;
              }
              ++v25;
            }
            while (v25 != (uint64_t *)v26);
          }
          v40 = __ldxr(v20);
          if (v40 == 1)
          {
            if (!__stlxr(0, v20))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v45;
  v45 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v18);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_194775330(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11, int a12, int a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19)
{
  unsigned __int8 *v19;
  int v21;

  v21 = __ldxr(v19);
  if (v21 == 1)
  {
    if (!__stlxr(0, v19))
    {
LABEL_6:
      if (a15)
      {
        if (*(_DWORD *)a15 == 2)
          WTF::StringImpl::destroy(a15, a2);
        else
          *(_DWORD *)a15 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WTF::MediaTime>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, WTF::MediaTime *a4)
{
  uint64_t result;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::Logger *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::Logger *v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  WTF::Logger *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  __int128 buf;
  int v45;
  WTF::StringImpl *v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  result = WTF::MediaTime::toJSONString(a4);
  if (!v42)
  {
    v8 = 0;
    if (v41)
      goto LABEL_3;
LABEL_72:
    v9 = 0;
    goto LABEL_4;
  }
  v8 = *((_DWORD *)v42 + 1);
  if (!v41)
    goto LABEL_72;
LABEL_3:
  v9 = *((_DWORD *)v41 + 1);
LABEL_4:
  if ((v9 | v8) < 0)
    goto LABEL_75;
  result = (v8 + v9);
  if (__OFADD__(v8, v9))
    goto LABEL_75;
  if (v42)
  {
    v10 = *((_DWORD *)v42 + 4);
    v11 = (v10 >> 2) & 1;
    if (v41 && (v10 & 4) != 0)
      goto LABEL_9;
  }
  else
  {
    if (v41)
    {
LABEL_9:
      v11 = (*((unsigned __int8 *)v41 + 16) >> 2) & 1;
      goto LABEL_10;
    }
    v11 = 1;
  }
LABEL_10:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v11, (uint64_t)v42, (uint64_t)v41, &buf);
  v43 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_75:
    __break(0xC471u);
    return result;
  }
  v13 = v41;
  v41 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v42;
  v42 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *(NSObject **)(a1 + 32);
  v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v16)
  {
    WTF::String::utf8();
    v18 = v39 ? (char *)v39 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v18;
    _os_log_impl(&dword_1940B8000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v16 = (uint64_t)v39;
    v39 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
        v16 = WTF::fastFree((WTF *)v16, v17);
      else
        --*(_DWORD *)v16;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v19 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v20 = *v19;
      if ((v20 & 1) != 0)
        break;
      v21 = __ldaxr(v19);
      if (v21 == v20)
      {
        if (!__stxr(v20 | 1, v19))
        {
          v22 = WTF::Logger::observers((WTF::Logger *)v16);
          v23 = *(unsigned int *)(v22 + 12);
          if ((_DWORD)v23)
          {
            v24 = *(uint64_t **)v22;
            v25 = *(_QWORD *)v22 + 8 * v23;
            do
            {
              v26 = *v24;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v45 = 1;
              WTF::MediaTime::toJSONString(a4);
              v39 = 0;
              v40 = 0;
              v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v40) = 2;
              v39 = v27;
              v28 = HIDWORD(v40);
              *((_DWORD *)v27 + 4 * HIDWORD(v40)) = buf;
              v29 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v27 + 2 * v28 + 1) = v29;
              *((_DWORD *)v27 + 4 * (v28 + 1)) = v45;
              v30 = v46;
              if (v46)
                *(_DWORD *)v46 += 2;
              *((_QWORD *)v27 + 2 * (v28 + 1) + 1) = v30;
              HIDWORD(v40) = v28 + 2;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, a1, a2, &v39);
              v31 = v39;
              if (HIDWORD(v40))
              {
                v32 = 16 * HIDWORD(v40);
                v33 = (WTF::StringImpl **)((char *)v39 + 8);
                do
                {
                  v34 = *v33;
                  *v33 = 0;
                  if (v34)
                  {
                    if (*(_DWORD *)v34 == 2)
                      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v17);
                    else
                      *(_DWORD *)v34 -= 2;
                  }
                  v33 += 2;
                  v32 -= 16;
                }
                while (v32);
                v31 = v39;
              }
              if (v31)
              {
                v39 = 0;
                LODWORD(v40) = 0;
                WTF::fastFree(v31, v17);
              }
              v35 = v46;
              v46 = 0;
              if (v35)
              {
                if (*(_DWORD *)v35 == 2)
                  WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v35 -= 2;
              }
              v36 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                  WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v36 -= 2;
              }
              ++v24;
            }
            while (v24 != (uint64_t *)v25);
          }
          v37 = __ldxr(v19);
          if (v37 == 1)
          {
            if (!__stlxr(0, v19))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v43;
  v43 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_194775888(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, WTF::StringImpl *a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19)
{
  unsigned __int8 *v19;
  int v21;

  v21 = __ldxr(v19);
  if (v21 == 1)
  {
    if (!__stlxr(0, v19))
    {
LABEL_6:
      if (a15)
      {
        if (*(_DWORD *)a15 == 2)
          WTF::StringImpl::destroy(a15, a2);
        else
          *(_DWORD *)a15 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::MediaPlayerPrivateAVFoundationObjC::asyncVideoPlaybackQualityMetrics(void)::$_1 &&>>()
{
  uint64_t result;
  uint64_t v1;

  result = WTF::WorkQueue::create();
  qword_1EE334A68 = v1;
  return result;
}

WTF *WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::reject<WebCore::PlatformMediaError,std::enable_if<true,void>>(uint64_t a1, char *a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::Lock *v6;
  _BYTE *v8;
  BOOL v9;
  char v10;
  uint64_t v11;
  WTF *result;
  int v13;
  WTF::Lock *v14;
  char v15;
  char v16;

  v6 = (WTF::Lock *)(a1 + 48);
  v14 = v6;
  v15 = 1;
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_5;
  }
  v6 = (WTF::Lock *)MEMORY[0x19AEA534C]();
LABEL_5:
  v8 = (_BYTE *)WTF::NativePromiseBase::logChannel(v6);
  if (*v8)
    v9 = v8[16] >= 4u;
  else
    v9 = 0;
  if (v9)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>((uint64_t)v8, 4u, a3, " rejecting ", a1);
  v10 = *a2;
  v11 = *(unsigned int *)(a1 + 96);
  if ((_DWORD)v11 != -1)
    ((void (*)(char *, uint64_t))off_1E3204AE0[v11])(&v16, a1 + 56);
  *(_BYTE *)(a1 + 56) = v10;
  *(_DWORD *)(a1 + 88) = 1;
  *(_DWORD *)(a1 + 96) = 1;
  result = WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::dispatchAll(a1, (unsigned __int8 **)&v14);
  if (v15)
  {
    result = v14;
    v13 = __ldxr((unsigned __int8 *)v14);
    if (v13 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v14))
        return result;
    }
    else
    {
      __clrex();
    }
    return (WTF *)WTF::Lock::unlockSlow(result);
  }
  return result;
}

void sub_194775B2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::Lock *a10, char a11)
{
  int v12;

  if (a11)
  {
    v12 = __ldxr((unsigned __int8 *)a10);
    if (v12 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)a10))
        goto LABEL_7;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow(a10);
  }
LABEL_7:
  _Unwind_Resume(exception_object);
}

void sub_194775D48(_Unwind_Exception *a1)
{
  uint64_t v1;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayerPrivateAVFoundation,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v1 + 48));
  _Unwind_Resume(a1);
}

void sub_194775FF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayerPrivateAVFoundation,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v1 + 48));
  _Unwind_Resume(a1);
}

void sub_19477627C(_Unwind_Exception *a1)
{
  uint64_t v1;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayerPrivateAVFoundation,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v1 + 48));
  _Unwind_Resume(a1);
}

void sub_19477647C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZ74__WebCoreAVFMovieObserver_observeValueForKeyPath_ofObject_change_context__EN4__29clEvEUlRT_E_vJRN7WebCore34MediaPlayerPrivateAVFoundationObjCEEED1Ev(_QWORD *a1)
{
  const void *v2;

  v2 = (const void *)a1[1];
  *a1 = &off_1E3204FE0;
  a1[1] = 0;
  if (v2)
    CFRelease(v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZ74__WebCoreAVFMovieObserver_observeValueForKeyPath_ofObject_change_context__EN4__29clEvEUlRT_E_vJRN7WebCore34MediaPlayerPrivateAVFoundationObjCEEED0Ev(WTF *this, void *a2)
{
  const void *v3;

  v3 = (const void *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3204FE0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    CFRelease(v3);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *_ZN3WTF6Detail15CallableWrapperIZZ74__WebCoreAVFMovieObserver_observeValueForKeyPath_ofObject_change_context__EN4__29clEvEUlRT_E_vJRN7WebCore34MediaPlayerPrivateAVFoundationObjCEEE4callES8_(_QWORD *a1, WebCore::MediaPlayerPrivateAVFoundation *this)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const void *v6;

  v4 = a1[2];
  v3 = a1[3];
  v5 = a1[1];
  a1[1] = 0;
  v6 = (const void *)*((_QWORD *)this + 95);
  *((_QWORD *)this + 95) = v5;
  if (v6)
    CFRelease(v6);
  *((_QWORD *)this + 137) = v4;
  *((_BYTE *)this + 1104) = 1;
  *((_QWORD *)this + 139) = v3;
  *((_BYTE *)this + 1120) = 1;
  WebCore::MediaPlayerPrivateAVFoundation::seekableTimeRangesChanged(this);
  return WebCore::MediaPlayerPrivateAVFoundation::updateStates((unsigned __int8 *)this);
}

void sub_194778700(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, CFTypeRef cf, uint64_t a14, uint64_t a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,WTF *a23,int a24,int a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,WTF *a38,int a39,int a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,WTF::StringImpl *a48,WTF::StringImpl *a49,WTF::StringImpl *a50,WTF::StringImpl *a51,WTF::StringImpl *a52,WTF::StringImpl *a53,uint64_t a54)
{
  unsigned __int8 *v54;
  int v56;

  v56 = __ldxr(v54);
  if (v56 == 1)
  {
    if (!__stlxr(0, v54))
    {
LABEL_6:
      if (a17)
      {
        if (*(_DWORD *)a17 == 2)
          WTF::StringImpl::destroy(a17, a2);
        else
          *(_DWORD *)a17 -= 2;
      }
      if (cf)
        CFRelease(cf);
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

void sub_1947791A4(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;
  uint64_t v3;

  if (v2)
    CFRelease(v2);
  if (v1)
    CFRelease(v1);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayerPrivateAVFoundation,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v3 + 48));
  _Unwind_Resume(a1);
}

void sub_1947793F0(_Unwind_Exception *a1)
{
  _DWORD *v1;

  --*v1;
  _Unwind_Resume(a1);
}

void sub_1947795E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayerPrivateAVFoundation,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v1 + 48));
  _Unwind_Resume(a1);
}

void sub_1947798EC(_Unwind_Exception *exception_object)
{
  _DWORD *v1;

  --*v1;
  _Unwind_Resume(exception_object);
}

void sub_194779D40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void sub_194779FCC(_Unwind_Exception *a1)
{
  const void *v1;
  uint64_t v2;

  if (v1)
    CFRelease(v1);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayerPrivateAVFoundation,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v2 + 48));
  _Unwind_Resume(a1);
}

void sub_19477AEB4(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, int a11, uint64_t a12, WTF *a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,_DWORD *a25)
{
  _DWORD *v25;
  WTF *v26;
  unsigned __int8 **v27;
  uint64_t v28;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;

  if (v26 != a13 && a13)
    WTF::fastFree(a13, a2);
  if (*v25 == 1)
    JSC::ArrayBufferView::operator delete();
  else
    --*v25;
  if (a25)
  {
    if (*a25 == 1)
      JSC::ArrayBufferView::operator delete();
    else
      --*a25;
  }
  WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref((uint64_t *)(v28 - 120));
  v31 = *(WTF::StringImpl **)(v28 - 112);
  *(_QWORD *)(v28 - 112) = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, v30);
    else
      *(_DWORD *)v31 -= 2;
  }
  v32 = *(WTF::StringImpl **)(v28 - 104);
  *(_QWORD *)(v28 - 104) = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, v30);
    else
      *(_DWORD *)v32 -= 2;
  }
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v27);
  _Unwind_Resume(a1);
}

void sub_19477B518(_Unwind_Exception *a1)
{
  const void *v1;
  uint64_t v2;

  if (v1)
    CFRelease(v1);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayerPrivateAVFoundation,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v2 + 48));
  _Unwind_Resume(a1);
}

void sub_19477B740(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  _DWORD *v9;

  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  --*v9;
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::timebaseEffectiveRateChangedCallback(WebCore *this, __CFNotificationCenter *a2, void *a3, const __CFString *a4, const void *a5, const __CFDictionary *a6)
{
  unsigned int v7;
  _QWORD *v8;
  uint64_t result;
  uint64_t v10;

  do
    v7 = __ldaxr((unsigned int *)a2);
  while (__stlxr(v7 + 1, (unsigned int *)a2));
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v8 = &off_1E32058D8;
  v8[1] = a2;
  v8[2] = a2;
  v10 = (uint64_t)v8;
  WTF::callOnMainThread();
  result = v10;
  if (v10)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  return result;
}

void sub_19477B810(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::MediaPlayerPrivateMediaSourceAVFObjC::seekInternal(uint64_t this)
{
  uint64_t v1;
  __int128 v2;
  WTF::Lock *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int *v33;
  __int128 v34;
  const char *v35;
  uint64_t v36;
  _OWORD v37[3];
  WTF::NativePromiseBase *v38;

  if (*(_BYTE *)(this + 120))
  {
    v1 = this;
    this = *(_QWORD *)(this + 152);
    if (this)
    {
      v2 = *(_OWORD *)(v1 + 88);
      v37[0] = *(_OWORD *)(v1 + 72);
      v37[1] = v2;
      v37[2] = *(_OWORD *)(v1 + 104);
      *(_BYTE *)(v1 + 72) = 0;
      *(_BYTE *)(v1 + 120) = 0;
      *(_QWORD *)(v1 + 416) = *(_QWORD *)&v37[0];
      *(_QWORD *)(v1 + 421) = *(_QWORD *)((char *)v37 + 5);
      *(_DWORD *)(v1 + 452) = 0;
      v3 = WebCore::MediaSourcePrivate::waitForTarget((WebCore::MediaSourcePrivate *)this, (const WebCore::SeekTarget *)v37, &v31);
      v4 = v31;
      v5 = WTF::RunLoop::current(v3);
      v6 = *(_QWORD *)(v1 + 48);
      if (v6)
        goto LABEL_34;
      v6 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v6 = 1;
      *(_QWORD *)(v6 + 8) = v1;
      v8 = *(unsigned int **)(v1 + 48);
      *(_QWORD *)(v1 + 48) = v6;
      if (!v8)
        goto LABEL_34;
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, v8);
        WTF::fastFree((WTF *)v8, v7);
      }
      v6 = *(_QWORD *)(v1 + 48);
      if (v6)
      {
LABEL_34:
        do
          v11 = __ldaxr((unsigned int *)v6);
        while (__stlxr(v11 + 1, (unsigned int *)v6));
      }
      v12 = WTF::fastMalloc((WTF *)0x50);
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v13 = &off_1E3205960;
      v13[1] = v1;
      v13[2] = v6;
      *(_DWORD *)(v12 + 8) = 1;
      *(_QWORD *)(v12 + 16) = v5;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0;
      *(_QWORD *)(v12 + 40) = "seekInternal";
      *(_QWORD *)(v12 + 48) = 0;
      *(_WORD *)(v12 + 56) = 0;
      *(_QWORD *)v12 = &off_1E3205A10;
      v14 = (unsigned int *)(v4 + 8);
      *(_QWORD *)(v12 + 64) = 0;
      *(_QWORD *)(v12 + 72) = v13;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 + 1, v14));
      v34 = 0uLL;
      v35 = "seekInternal";
      v36 = 0;
      v32 = (unsigned int *)v4;
      v33 = 0;
      v38 = (WTF::NativePromiseBase *)v12;
      WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::maybeSettle(v4, &v38, (WTF::Logger::LogSiteIdentifier *)&v34);
      v16 = (unsigned int *)v38;
      v38 = 0;
      if (v16)
      {
        v17 = v16 + 2;
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          atomic_store(1u, v16 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 8))(v16);
        }
      }
      v20 = v33;
      v33 = 0;
      if (v20)
      {
        v21 = v20 + 2;
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v20 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v20 + 8))(v20);
        }
      }
      v24 = v32;
      v32 = 0;
      if (v24)
      {
        v25 = v24 + 2;
        do
        {
          v26 = __ldaxr(v25);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v25));
        if (!v27)
        {
          atomic_store(1u, v24 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v24 + 16))(v24);
        }
      }
      this = v31;
      v31 = 0;
      if (this)
      {
        v28 = (unsigned int *)(this + 8);
        do
        {
          v29 = __ldaxr(v28);
          v30 = v29 - 1;
        }
        while (__stlxr(v30, v28));
        if (!v30)
        {
          atomic_store(1u, (unsigned int *)(this + 8));
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 16))(this);
        }
      }
    }
  }
  return this;
}

void sub_19477BB34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned int *a12, uint64_t a13, uint64_t a14)
{
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;

  if (a12)
  {
    v15 = a12 + 2;
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
    {
      atomic_store(1u, a12 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)a12 + 16))(a12);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::MediaPlayerPrivateMediaSourceAVFObjC::logIdentifier(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this)
{
  return *((_QWORD *)this + 62);
}

uint64_t WebCore::MediaPlayerPrivateMediaSourceAVFObjC::logger(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this)
{
  return *((_QWORD *)this + 61);
}

char *WebCore::MediaPlayerPrivateMediaSourceAVFObjC::logChannel(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this)
{
  return &WebCore::LogMediaSource;
}

uint64_t __Block_byref_object_copy__1(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 48) = v2;
  return result;
}

{
  uint64_t v2;

  *(_QWORD *)(result + 48) = 0;
  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 48) = v2;
  return result;
}

unsigned int *__Block_byref_object_dispose__1(uint64_t a1, void *a2)
{
  unsigned int *result;
  unsigned int v4;
  unsigned int v5;

  result = *(unsigned int **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr(result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, result));
    if (!v5)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

uint64_t WebCore::MediaPlayerPrivateMediaSourceAVFObjC::clampTimeToSensicalValue(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this, const WTF::MediaTime *a2)
{
  WebCore::MediaPlayerPrivateMediaSourceAVFObjC *v3;
  const WTF::MediaTime *v4;
  WTF::MediaTime *v5;
  uint64_t v6;
  _QWORD v8[2];

  v3 = this;
  if ((*((_BYTE *)this + 428) & 0x1D) == 1)
  {
    this = (WebCore::MediaPlayerPrivateMediaSourceAVFObjC *)WTF::MediaTime::compare(a2, (WebCore::MediaPlayerPrivateMediaSourceAVFObjC *)((char *)this + 416));
    if ((_DWORD)this == -1)
      return *((_QWORD *)v3 + 52);
  }
  v4 = (const WTF::MediaTime *)WTF::MediaTime::zeroTime(this);
  v5 = (WTF::MediaTime *)WTF::MediaTime::compare(a2, v4);
  if ((_DWORD)v5 == -1)
    return *(_QWORD *)WTF::MediaTime::zeroTime(v5);
  v8[0] = (*(uint64_t (**)(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *))(*(_QWORD *)v3 + 336))(v3);
  v8[1] = v6;
  if (WTF::MediaTime::compare(a2, (const WTF::MediaTime *)v8) == 1)
    return (*(uint64_t (**)(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *))(*(_QWORD *)v3 + 336))(v3);
  else
    return *(_QWORD *)a2;
}

void WebCore::MediaPlayerPrivateMediaSourceAVFObjC::maybeCompleteSeek(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;

  if (*((_DWORD *)this + 113) == 2)
    return;
  if ((*(unsigned int (**)(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *))(*(_QWORD *)this + 296))(this)
    && !*((_BYTE *)this + 457))
  {
    v14 = *((_QWORD *)this + 61);
    v15 = (*(uint64_t (**)(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *))(*(_QWORD *)this + 1296))(this);
    v16 = *((_QWORD *)this + 62);
    v19 = v15;
    v20 = v17;
    v21 = "maybeCompleteSeek";
    v22 = v16;
    if (*(_BYTE *)(v14 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [24]>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)&v19, "waiting for video frame");
    *((_DWORD *)this + 113) = 1;
  }
  else
  {
    *((_DWORD *)this + 113) = 0;
    v2 = *((_QWORD *)this + 61);
    v3 = (*(uint64_t (**)(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *))(*(_QWORD *)this + 1296))(this);
    v4 = *((_QWORD *)this + 62);
    v19 = v3;
    v20 = v5;
    v21 = "maybeCompleteSeek";
    v22 = v4;
    if (*(_BYTE *)(v2 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)&v19);
    if (*((_BYTE *)this + 449))
    {
      v6 = *((_QWORD *)this + 61);
      v7 = (*(uint64_t (**)(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *))(*(_QWORD *)this + 1296))(this);
      v8 = *((_QWORD *)this + 62);
      v19 = v7;
      v20 = v9;
      v21 = "maybeCompleteSeek";
      v22 = v8;
      if (*(_BYTE *)(v6 + 12))
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [40]>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)&v19, "Synchronizer still seeking, bailing out");
      return;
    }
    *((_DWORD *)this + 113) = 2;
    if (*((_BYTE *)this + 448)
      && !*((_BYTE *)this + 120)
      && (*((_BYTE *)this + 460) || *((_BYTE *)this + 458))
      && *((unsigned __int8 *)this + 393) >= 3u)
    {
      v10 = *((double *)this + 55);
      LOBYTE(v19) = 0;
      LOBYTE(v20) = 0;
      WebCore::MediaPlayerPrivateMediaSourceAVFObjC::setSynchronizerRate((uint64_t)this, (WTF::MonotonicTime *)&v19, v10);
    }
    v11 = *((_QWORD *)this + 16);
    if (v11)
    {
      v12 = *((_QWORD *)this + 17);
      if (__ldaxr((unsigned __int8 *)v11))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v11))
      {
        goto LABEL_23;
      }
      MEMORY[0x19AEA534C](v11);
LABEL_23:
      if (*(_QWORD *)(v11 + 24))
        ++*(_QWORD *)(v11 + 8);
      else
        v12 = 0;
      v18 = __ldxr((unsigned __int8 *)v11);
      if (v18 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v11))
        {
LABEL_31:
          if (v12)
          {
            (*(void (**)(_QWORD, char *))(**(_QWORD **)(*(_QWORD *)(v12 + 8) + 8) + 48))(*(_QWORD *)(*(_QWORD *)(v12 + 8) + 8), (char *)this + 416);
            (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v12 + 8) + 8) + 56))(*(_QWORD *)(*(_QWORD *)(v12 + 8) + 8));
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v12);
          }
          return;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v11);
      goto LABEL_31;
    }
  }
}

void WebCore::MediaPlayerPrivateMediaSourceAVFObjC::~MediaPlayerPrivateMediaSourceAVFObjC(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this)
{
  uint64_t v2;
  uint64_t v3;
  const void *v4;
  const void *v5;
  __CFNotificationCenter *LocalCenter;
  void *v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  WTF *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  _DWORD *v26;
  const void *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  void *v32;
  unint64_t v33;
  unint64_t v34;
  WTF *v35;
  uint64_t v36;
  const void *v37;
  uint64_t v38;
  const void **v39;
  uint64_t v40;
  const void *v41;
  const void **v42;
  uint64_t v43;
  const void *v44;
  unsigned __int8 **v45;
  unsigned __int8 *v46;
  uint64_t v48;
  uint64_t v49;
  WebCore::WebCoreDecompressionSession *v50;
  BOOL v51;
  int v52;
  WTF *v53;
  void *v54;
  WTF *v55;
  const void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  int v64;
  const void *v65;
  const void *v66;
  const void *v67;
  const void *v68;
  const void *v69;
  WebCore::MediaPlayerPrivateMediaSourceAVFObjC *v70;
  uint64_t v71;
  const void *v72;
  uint64_t v73;
  uint64_t v74;
  const void **v75;
  const void *v76;
  const void *v77;
  const void *v78;
  const void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  BOOL v86;
  int v87;
  uint64_t v88;
  unsigned int *v89;
  unsigned int v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v94;
  uint64_t v95;
  int v96;
  WTF *v97;
  uint64_t v98;
  unsigned int *v99;
  unsigned int v100;
  unsigned int v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int *v106;
  unsigned int v107;
  unsigned int v108;
  const char *v109;
  uint64_t v110;
  const char *v111;
  uint64_t v112;

  *(_QWORD *)this = off_1E3205288;
  *((_QWORD *)this + 8) = &unk_1E32057C0;
  v2 = *((_QWORD *)this + 61);
  v3 = *((_QWORD *)this + 62);
  v109 = "MediaPlayerPrivateMediaSourceAVFObjC";
  v110 = 37;
  v111 = "~MediaPlayerPrivateMediaSourceAVFObjC";
  v112 = v3;
  if (*(_BYTE *)(v2 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)&v109);
  v4 = (const void *)*((_QWORD *)this + 64);
  v5 = (const void *)objc_msgSend(*((id *)this + 24), "timebase", v109, v110, v111, v112);
  LocalCenter = CFNotificationCenterGetLocalCenter();
  if (PAL::get_CoreMedia_kCMTimebaseNotification_EffectiveRateChanged(void)::once != -1)
    dispatch_once(&PAL::get_CoreMedia_kCMTimebaseNotification_EffectiveRateChanged(void)::once, &__block_literal_global_183_0);
  CFNotificationCenterRemoveObserver(LocalCenter, v4, (CFNotificationName)PAL::get_CoreMedia_kCMTimebaseNotification_EffectiveRateChanged(void)::constantCoreMediakCMTimebaseNotification_EffectiveRateChanged, v5);
  if (*((_QWORD *)this + 30))
    objc_msgSend(*((id *)this + 24), "removeTimeObserver:");
  if (*((_QWORD *)this + 29))
    objc_msgSend(*((id *)this + 24), "removeTimeObserver:");
  if (*((_QWORD *)this + 66))
    objc_msgSend(*((id *)this + 24), "removeTimeObserver:");
  if (*((_QWORD *)this + 31))
    objc_msgSend(*((id *)this + 24), "removeTimeObserver:");
  WebCore::MediaPlayerPrivateMediaSourceAVFObjC::flushPendingSizeChanges(this, v7);
  WebCore::MediaPlayerPrivateMediaSourceAVFObjC::destroyLayer(this);
  WebCore::MediaPlayerPrivateMediaSourceAVFObjC::destroyDecompressionSession(this);
  if ((*((_QWORD *)this + 45) & 0xFFFFFFFFFFFFLL) != 0)
    WebCore::TimerBase::stopSlowCase((WebCore::MediaPlayerPrivateMediaSourceAVFObjC *)((char *)this + 328));
  WTF::MachSendRight::~MachSendRight((WebCore::MediaPlayerPrivateMediaSourceAVFObjC *)((char *)this + 656));
  v9 = (const void *)*((_QWORD *)this + 66);
  *((_QWORD *)this + 66) = 0;
  if (v9)
    CFRelease(v9);
  v10 = *((_QWORD *)this + 64);
  *((_QWORD *)this + 64) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v106 = *(unsigned int **)(v10 + 8);
      *(_QWORD *)(v10 + 8) = 0;
      if (v106)
      {
        do
        {
          v107 = __ldaxr(v106);
          v108 = v107 - 1;
        }
        while (__stlxr(v108, v106));
        if (!v108)
        {
          atomic_store(1u, v106);
          WTF::fastFree((WTF *)v106, v8);
        }
      }
      WTF::fastFree((WTF *)v10, v8);
    }
  }
  v13 = (WTF *)*((_QWORD *)this + 63);
  *((_QWORD *)this + 63) = 0;
  if (v13)
  {
    v14 = (const void *)*((_QWORD *)v13 + 9);
    *((_QWORD *)v13 + 9) = 0;
    if (v14)
      CFRelease(v14);
    v15 = (const void *)*((_QWORD *)v13 + 8);
    *((_QWORD *)v13 + 8) = 0;
    if (v15)
      CFRelease(v15);
    v16 = (const void *)*((_QWORD *)v13 + 5);
    *((_QWORD *)v13 + 5) = 0;
    if (v16)
      CFRelease(v16);
    v17 = (const void *)*((_QWORD *)v13 + 4);
    *((_QWORD *)v13 + 4) = 0;
    if (v17)
      CFRelease(v17);
    v18 = (unsigned int *)*((_QWORD *)v13 + 2);
    *((_QWORD *)v13 + 2) = 0;
    if (v18)
    {
      v19 = v18 + 2;
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        atomic_store(1u, v18 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v18 + 8))(v18);
      }
    }
    WTF::fastFree(v13, v8);
  }
  v22 = (unsigned int *)*((_QWORD *)this + 61);
  *((_QWORD *)this + 61) = 0;
  if (v22)
  {
    v23 = v22 + 2;
    do
    {
      v24 = __ldaxr(v23);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v23));
    if (!v25)
    {
      atomic_store(1u, v22 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v22 + 8))(v22);
    }
  }
  v26 = (_DWORD *)*((_QWORD *)this + 59);
  *((_QWORD *)this + 59) = 0;
  if (v26)
  {
    if (v26[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v26 + 8))(v26);
    else
      --v26[2];
  }
  v27 = (const void *)*((_QWORD *)this + 58);
  *((_QWORD *)this + 58) = 0;
  if (v27)
    CFRelease(v27);
  v28 = (unsigned int *)*((_QWORD *)this + 48);
  *((_QWORD *)this + 48) = 0;
  if (v28)
  {
    do
    {
      v29 = __ldaxr(v28);
      v30 = v29 - 1;
    }
    while (__stlxr(v30, v28));
    if (!v30)
    {
      atomic_store(1u, v28);
      WTF::fastFree((WTF *)v28, v8);
    }
  }
  *((_QWORD *)this + 41) = off_1E31F7378;
  v31 = *((_QWORD *)this + 47);
  *((_QWORD *)this + 47) = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  WebCore::TimerBase::~TimerBase((WebCore::MediaPlayerPrivateMediaSourceAVFObjC *)((char *)this + 328));
  v33 = *((_QWORD *)this + 37);
  v34 = *((_QWORD *)this + 38);
  v35 = (WTF *)*((_QWORD *)this + 39);
  if (v33 <= v34)
  {
    if (v33 == v34)
      goto LABEL_70;
    v42 = (const void **)((char *)v35 + 8 * v33);
    v43 = 8 * v34 - 8 * v33;
    do
    {
      v44 = *v42;
      *v42 = 0;
      if (v44)
        CFRelease(v44);
      ++v42;
      v43 -= 8;
    }
    while (v43);
  }
  else
  {
    if (v34)
    {
      v36 = 8 * v34;
      do
      {
        v37 = *(const void **)v35;
        *(_QWORD *)v35 = 0;
        if (v37)
          CFRelease(v37);
        v35 = (WTF *)((char *)v35 + 8);
        v36 -= 8;
      }
      while (v36);
      v35 = (WTF *)*((_QWORD *)this + 39);
      v33 = *((_QWORD *)this + 37);
    }
    v38 = *((unsigned int *)this + 80);
    if (v33 != v38)
    {
      v39 = (const void **)((char *)v35 + 8 * v33);
      v40 = 8 * v38 - 8 * v33;
      do
      {
        v41 = *v39;
        *v39 = 0;
        if (v41)
          CFRelease(v41);
        ++v39;
        v40 -= 8;
      }
      while (v40);
    }
  }
  v35 = (WTF *)*((_QWORD *)this + 39);
LABEL_70:
  if (v35)
  {
    *((_QWORD *)this + 39) = 0;
    *((_DWORD *)this + 80) = 0;
    WTF::fastFree(v35, v32);
  }
  v45 = (unsigned __int8 **)*((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v45)
  {
    v46 = *v45;
    if (__ldaxr(*v45))
    {
      __clrex();
    }
    else if (!__stxr(1u, v46))
    {
      goto LABEL_77;
    }
    MEMORY[0x19AEA534C](v46);
LABEL_77:
    v48 = *((_QWORD *)v46 + 1);
    v49 = v48 - 1;
    *((_QWORD *)v46 + 1) = v48 - 1;
    if (v48 == 1)
    {
      v103 = *((_QWORD *)v46 + 2);
      v50 = (WebCore::WebCoreDecompressionSession *)*((_QWORD *)v46 + 3);
      *((_QWORD *)v46 + 3) = 0;
      v51 = v103 != 0;
    }
    else
    {
      v50 = 0;
      v51 = 1;
    }
    v52 = __ldxr(v46);
    if (v52 == 1)
    {
      if (!__stlxr(0, v46))
      {
        if (v49)
          goto LABEL_89;
LABEL_85:
        if (v50)
        {
          WebCore::WebCoreDecompressionSession::~WebCoreDecompressionSession(v50);
          WTF::fastFree(v53, v54);
        }
        if (!v51)
          WTF::fastFree((WTF *)v46, v32);
        goto LABEL_89;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v46);
    if (v49)
      goto LABEL_89;
    goto LABEL_85;
  }
LABEL_89:
  v55 = (WTF *)*((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v55)
  {
    v56 = *(const void **)v55;
    *(_QWORD *)v55 = 0;
    if (v56)
      CFRelease(v56);
    WTF::fastFree(v55, v32);
  }
  v57 = *((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v57)
  {
    v58 = *(_QWORD *)(v57 + 8);
    if (__ldaxr((unsigned __int8 *)v58))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v58))
    {
      goto LABEL_98;
    }
    MEMORY[0x19AEA534C](v58);
LABEL_98:
    v60 = *(_QWORD *)(v58 + 8);
    v61 = v60 - 1;
    *(_QWORD *)(v58 + 8) = v60 - 1;
    if (v60 == 1)
    {
      v104 = *(_QWORD *)(v58 + 16);
      v62 = *(_QWORD *)(v58 + 24);
      *(_QWORD *)(v58 + 24) = 0;
      v63 = v104 != 0;
    }
    else
    {
      v62 = 0;
      v63 = 1;
    }
    v64 = __ldxr((unsigned __int8 *)v58);
    if (v64 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v58))
      {
        if (v61)
          goto LABEL_110;
LABEL_106:
        if (v62)
          (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
        if (!v63)
          WTF::fastFree((WTF *)v58, v32);
        goto LABEL_110;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v58);
    if (v61)
      goto LABEL_110;
    goto LABEL_106;
  }
LABEL_110:
  v65 = (const void *)*((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v65)
    CFRelease(v65);
  v66 = (const void *)*((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v66)
    CFRelease(v66);
  v67 = (const void *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v67)
    CFRelease(v67);
  v68 = (const void *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v68)
    CFRelease(v68);
  v69 = (const void *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v69)
    CFRelease(v69);
  v70 = (WebCore::MediaPlayerPrivateMediaSourceAVFObjC *)*((_QWORD *)this + 28);
  if (v70 == (WebCore::MediaPlayerPrivateMediaSourceAVFObjC *)((char *)this + 200))
  {
    v71 = 4;
    v70 = (WebCore::MediaPlayerPrivateMediaSourceAVFObjC *)((char *)this + 200);
  }
  else
  {
    if (!v70)
      goto LABEL_125;
    v71 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v70 + 8 * v71))();
LABEL_125:
  v72 = (const void *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v72)
    CFRelease(v72);
  v73 = *((_QWORD *)this + 23);
  if (v73)
  {
    v74 = *(unsigned int *)(v73 - 4);
    if ((_DWORD)v74)
    {
      v75 = (const void **)*((_QWORD *)this + 23);
      do
      {
        v76 = *v75;
        if (*v75 != (const void *)-1)
        {
          *v75 = 0;
          if (v76)
            CFRelease(v76);
        }
        v75 += 2;
        --v74;
      }
      while (v74);
    }
    WTF::fastFree((WTF *)(v73 - 16), v32);
  }
  v77 = (const void *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v77)
    CFRelease(v77);
  v78 = (const void *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v78)
    CFRelease(v78);
  v79 = (const void *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v79)
    CFRelease(v79);
  v80 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v80)
  {
    v81 = *(_QWORD *)(v80 + 8);
    if (__ldaxr((unsigned __int8 *)v81))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v81))
    {
      goto LABEL_146;
    }
    MEMORY[0x19AEA534C](v81);
LABEL_146:
    v83 = *(_QWORD *)(v81 + 8);
    v84 = v83 - 1;
    *(_QWORD *)(v81 + 8) = v83 - 1;
    if (v83 == 1)
    {
      v105 = *(_QWORD *)(v81 + 16);
      v85 = *(_QWORD *)(v81 + 24);
      *(_QWORD *)(v81 + 24) = 0;
      v86 = v105 != 0;
    }
    else
    {
      v85 = 0;
      v86 = 1;
    }
    v87 = __ldxr((unsigned __int8 *)v81);
    if (v87 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v81))
      {
        if (v84)
          goto LABEL_158;
LABEL_154:
        if (v85)
          (*(void (**)(uint64_t))(*(_QWORD *)v85 + 8))(v85);
        if (!v86)
          WTF::fastFree((WTF *)v81, v32);
        goto LABEL_158;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v81);
    if (v84)
      goto LABEL_158;
    goto LABEL_154;
  }
LABEL_158:
  v88 = *((_QWORD *)this + 18);
  if (v88)
  {
    *(_QWORD *)(v88 + 8) = 0;
    v89 = (unsigned int *)*((_QWORD *)this + 18);
    *((_QWORD *)this + 18) = 0;
    if (v89)
    {
      do
      {
        v90 = __ldaxr(v89);
        v91 = v90 - 1;
      }
      while (__stlxr(v91, v89));
      if (!v91)
      {
        atomic_store(1u, v89);
        WTF::fastFree((WTF *)v89, v32);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 18) = 0;
  }
  v92 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v92)
  {
    if (__ldaxr((unsigned __int8 *)v92))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v92))
    {
      goto LABEL_169;
    }
    MEMORY[0x19AEA534C](v92);
LABEL_169:
    v94 = *(_QWORD *)(v92 + 16) - 1;
    *(_QWORD *)(v92 + 16) = v94;
    if (!v94)
    {
      v95 = *(_QWORD *)(v92 + 8);
      v96 = __ldxr((unsigned __int8 *)v92);
      if (v96 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v92))
        {
          if (v95)
            goto LABEL_177;
LABEL_176:
          WTF::fastFree((WTF *)v92, v32);
          goto LABEL_177;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v92);
      if (v95)
        goto LABEL_177;
      goto LABEL_176;
    }
    v102 = __ldxr((unsigned __int8 *)v92);
    if (v102 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v92))
        goto LABEL_177;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v92);
  }
LABEL_177:
  *(_QWORD *)this = off_1E340D798;
  v97 = (WTF *)*((_QWORD *)this + 1);
  if (v97)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v97, v32);
  }
  v98 = *((_QWORD *)this + 6);
  if (v98)
  {
    *(_QWORD *)(v98 + 8) = 0;
    v99 = (unsigned int *)*((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = 0;
    if (v99)
    {
      do
      {
        v100 = __ldaxr(v99);
        v101 = v100 - 1;
      }
      while (__stlxr(v101, v99));
      if (!v101)
      {
        atomic_store(1u, v99);
        WTF::fastFree((WTF *)v99, v32);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 6) = 0;
  }
}

{
  WTF *v1;
  void *v2;

  WebCore::MediaPlayerPrivateMediaSourceAVFObjC::~MediaPlayerPrivateMediaSourceAVFObjC(this);
  WTF::fastFree(v1, v2);
}

void sub_19477C9D4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;
  const void *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  WTF *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  _DWORD *v21;
  const void *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  void *v27;
  unint64_t v28;
  unint64_t v29;
  WTF *v30;
  uint64_t v31;
  const void *v32;
  uint64_t v33;
  const void **v34;
  uint64_t v35;
  const void *v36;
  const void **v37;
  uint64_t v38;
  const void *v39;
  unsigned __int8 **v40;
  unsigned __int8 *v41;
  uint64_t v43;
  uint64_t v44;
  WebCore::WebCoreDecompressionSession *v45;
  BOOL v46;
  int v47;
  WTF *v48;
  void *v49;
  WTF *v50;
  const void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  int v59;
  const void *v60;
  const void *v61;
  const void *v62;
  const void *v63;
  const void *v64;
  _QWORD *v65;
  uint64_t v66;
  const void *v67;
  uint64_t v68;
  uint64_t v69;
  const void **v70;
  const void *v71;
  const void *v72;
  const void *v73;
  const void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  BOOL v81;
  int v82;
  uint64_t v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v89;
  uint64_t v90;
  int v91;
  WTF *v92;
  uint64_t v93;
  unsigned int *v94;
  unsigned int v95;
  unsigned int v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int *v101;
  unsigned int v102;
  unsigned int v103;

  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(v1 + 656));
  v4 = *(const void **)(v1 + 528);
  *(_QWORD *)(v1 + 528) = 0;
  if (v4)
    CFRelease(v4);
  v5 = *(_QWORD *)(v1 + 512);
  *(_QWORD *)(v1 + 512) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr((unsigned int *)v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, (unsigned int *)v5));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)v5);
      v101 = *(unsigned int **)(v5 + 8);
      *(_QWORD *)(v5 + 8) = 0;
      if (v101)
      {
        do
        {
          v102 = __ldaxr(v101);
          v103 = v102 - 1;
        }
        while (__stlxr(v103, v101));
        if (!v103)
        {
          atomic_store(1u, v101);
          WTF::fastFree((WTF *)v101, v3);
        }
      }
      WTF::fastFree((WTF *)v5, v3);
    }
  }
  v8 = *(WTF **)(v1 + 504);
  *(_QWORD *)(v1 + 504) = 0;
  if (v8)
  {
    v9 = (const void *)*((_QWORD *)v8 + 9);
    *((_QWORD *)v8 + 9) = 0;
    if (v9)
      CFRelease(v9);
    v10 = (const void *)*((_QWORD *)v8 + 8);
    *((_QWORD *)v8 + 8) = 0;
    if (v10)
      CFRelease(v10);
    v11 = (const void *)*((_QWORD *)v8 + 5);
    *((_QWORD *)v8 + 5) = 0;
    if (v11)
      CFRelease(v11);
    v12 = (const void *)*((_QWORD *)v8 + 4);
    *((_QWORD *)v8 + 4) = 0;
    if (v12)
      CFRelease(v12);
    v13 = (unsigned int *)*((_QWORD *)v8 + 2);
    *((_QWORD *)v8 + 2) = 0;
    if (v13)
    {
      v14 = v13 + 2;
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (!v16)
      {
        atomic_store(1u, v13 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 8))(v13);
      }
    }
    WTF::fastFree(v8, v3);
  }
  v17 = *(unsigned int **)(v1 + 488);
  *(_QWORD *)(v1 + 488) = 0;
  if (v17)
  {
    v18 = v17 + 2;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v17 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 8))(v17);
    }
  }
  v21 = *(_DWORD **)(v1 + 472);
  *(_QWORD *)(v1 + 472) = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    else
      --v21[2];
  }
  v22 = *(const void **)(v1 + 464);
  *(_QWORD *)(v1 + 464) = 0;
  if (v22)
    CFRelease(v22);
  v23 = *(unsigned int **)(v1 + 384);
  *(_QWORD *)(v1 + 384) = 0;
  if (v23)
  {
    do
    {
      v24 = __ldaxr(v23);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v23));
    if (!v25)
    {
      atomic_store(1u, v23);
      WTF::fastFree((WTF *)v23, v3);
    }
  }
  *(_QWORD *)(v1 + 328) = off_1E31F7378;
  v26 = *(_QWORD *)(v1 + 376);
  *(_QWORD *)(v1 + 376) = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  WebCore::TimerBase::~TimerBase((WebCore::TimerBase *)(v1 + 328));
  v28 = *(_QWORD *)(v1 + 296);
  v29 = *(_QWORD *)(v1 + 304);
  v30 = *(WTF **)(v1 + 312);
  if (v28 <= v29)
  {
    if (v28 == v29)
      goto LABEL_56;
    v37 = (const void **)((char *)v30 + 8 * v28);
    v38 = 8 * v29 - 8 * v28;
    do
    {
      v39 = *v37;
      *v37 = 0;
      if (v39)
        CFRelease(v39);
      ++v37;
      v38 -= 8;
    }
    while (v38);
  }
  else
  {
    if (v29)
    {
      v31 = 8 * v29;
      do
      {
        v32 = *(const void **)v30;
        *(_QWORD *)v30 = 0;
        if (v32)
          CFRelease(v32);
        v30 = (WTF *)((char *)v30 + 8);
        v31 -= 8;
      }
      while (v31);
      v30 = *(WTF **)(v1 + 312);
      v28 = *(_QWORD *)(v1 + 296);
    }
    v33 = *(unsigned int *)(v1 + 320);
    if (v28 != v33)
    {
      v34 = (const void **)((char *)v30 + 8 * v28);
      v35 = 8 * v33 - 8 * v28;
      do
      {
        v36 = *v34;
        *v34 = 0;
        if (v36)
          CFRelease(v36);
        ++v34;
        v35 -= 8;
      }
      while (v35);
    }
  }
  v30 = *(WTF **)(v1 + 312);
LABEL_56:
  if (v30)
  {
    *(_QWORD *)(v1 + 312) = 0;
    *(_DWORD *)(v1 + 320) = 0;
    WTF::fastFree(v30, v27);
  }
  v40 = *(unsigned __int8 ***)(v1 + 288);
  *(_QWORD *)(v1 + 288) = 0;
  if (!v40)
  {
LABEL_76:
    v50 = *(WTF **)(v1 + 280);
    *(_QWORD *)(v1 + 280) = 0;
    if (v50)
    {
      v51 = *(const void **)v50;
      *(_QWORD *)v50 = 0;
      if (v51)
        CFRelease(v51);
      WTF::fastFree(v50, v27);
    }
    v52 = *(_QWORD *)(v1 + 272);
    *(_QWORD *)(v1 + 272) = 0;
    if (!v52)
    {
LABEL_98:
      v60 = *(const void **)(v1 + 264);
      *(_QWORD *)(v1 + 264) = 0;
      if (v60)
        CFRelease(v60);
      v61 = *(const void **)(v1 + 256);
      *(_QWORD *)(v1 + 256) = 0;
      if (v61)
        CFRelease(v61);
      v62 = *(const void **)(v1 + 248);
      *(_QWORD *)(v1 + 248) = 0;
      if (v62)
        CFRelease(v62);
      v63 = *(const void **)(v1 + 240);
      *(_QWORD *)(v1 + 240) = 0;
      if (v63)
        CFRelease(v63);
      v64 = *(const void **)(v1 + 232);
      *(_QWORD *)(v1 + 232) = 0;
      if (v64)
        CFRelease(v64);
      v65 = *(_QWORD **)(v1 + 224);
      if (v65 == (_QWORD *)(v1 + 200))
      {
        v66 = 4;
        v65 = (_QWORD *)(v1 + 200);
      }
      else
      {
        if (!v65)
          goto LABEL_113;
        v66 = 5;
      }
      (*(void (**)(void))(*v65 + 8 * v66))();
LABEL_113:
      v67 = *(const void **)(v1 + 192);
      *(_QWORD *)(v1 + 192) = 0;
      if (v67)
        CFRelease(v67);
      v68 = *(_QWORD *)(v1 + 184);
      if (v68)
      {
        v69 = *(unsigned int *)(v68 - 4);
        if ((_DWORD)v69)
        {
          v70 = *(const void ***)(v1 + 184);
          do
          {
            v71 = *v70;
            if (*v70 != (const void *)-1)
            {
              *v70 = 0;
              if (v71)
                CFRelease(v71);
            }
            v70 += 2;
            --v69;
          }
          while (v69);
        }
        WTF::fastFree((WTF *)(v68 - 16), v27);
      }
      v72 = *(const void **)(v1 + 176);
      *(_QWORD *)(v1 + 176) = 0;
      if (v72)
        CFRelease(v72);
      v73 = *(const void **)(v1 + 168);
      *(_QWORD *)(v1 + 168) = 0;
      if (v73)
        CFRelease(v73);
      v74 = *(const void **)(v1 + 160);
      *(_QWORD *)(v1 + 160) = 0;
      if (v74)
        CFRelease(v74);
      v75 = *(_QWORD *)(v1 + 152);
      *(_QWORD *)(v1 + 152) = 0;
      if (!v75)
      {
LABEL_147:
        v83 = *(_QWORD *)(v1 + 144);
        if (v83)
        {
          *(_QWORD *)(v83 + 8) = 0;
          v84 = *(unsigned int **)(v1 + 144);
          *(_QWORD *)(v1 + 144) = 0;
          if (v84)
          {
            do
            {
              v85 = __ldaxr(v84);
              v86 = v85 - 1;
            }
            while (__stlxr(v86, v84));
            if (!v86)
            {
              atomic_store(1u, v84);
              WTF::fastFree((WTF *)v84, v27);
            }
          }
        }
        else
        {
          *(_QWORD *)(v1 + 144) = 0;
        }
        v87 = *(_QWORD *)(v1 + 128);
        *(_QWORD *)(v1 + 128) = 0;
        if (!v87)
          goto LABEL_167;
        if (__ldaxr((unsigned __int8 *)v87))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v87))
        {
          goto LABEL_159;
        }
        MEMORY[0x19AEA534C](v87);
LABEL_159:
        v89 = *(_QWORD *)(v87 + 16) - 1;
        *(_QWORD *)(v87 + 16) = v89;
        if (!v89)
        {
          v90 = *(_QWORD *)(v87 + 8);
          v91 = __ldxr((unsigned __int8 *)v87);
          if (v91 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v87))
            {
LABEL_165:
              if (!v90)
                WTF::fastFree((WTF *)v87, v27);
              goto LABEL_167;
            }
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v87);
          goto LABEL_165;
        }
        v97 = __ldxr((unsigned __int8 *)v87);
        if (v97 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v87))
            goto LABEL_167;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v87);
LABEL_167:
        *(_QWORD *)v1 = off_1E340D798;
        v92 = *(WTF **)(v1 + 8);
        if (v92)
        {
          *(_QWORD *)(v1 + 8) = 0;
          *(_DWORD *)(v1 + 16) = 0;
          WTF::fastFree(v92, v27);
        }
        v93 = *(_QWORD *)(v1 + 48);
        if (v93)
        {
          *(_QWORD *)(v93 + 8) = 0;
          v94 = *(unsigned int **)(v1 + 48);
          *(_QWORD *)(v1 + 48) = 0;
          if (v94)
          {
            do
            {
              v95 = __ldaxr(v94);
              v96 = v95 - 1;
            }
            while (__stlxr(v96, v94));
            if (!v96)
            {
              atomic_store(1u, v94);
              WTF::fastFree((WTF *)v94, v27);
            }
          }
        }
        else
        {
          *(_QWORD *)(v1 + 48) = 0;
        }
        _Unwind_Resume(a1);
      }
      v76 = *(_QWORD *)(v75 + 8);
      if (__ldaxr((unsigned __int8 *)v76))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v76))
      {
LABEL_135:
        v78 = *(_QWORD *)(v76 + 8);
        v79 = v78 - 1;
        *(_QWORD *)(v76 + 8) = v78 - 1;
        if (v78 == 1)
        {
          v100 = *(_QWORD *)(v76 + 16);
          v80 = *(_QWORD *)(v76 + 24);
          *(_QWORD *)(v76 + 24) = 0;
          v81 = v100 != 0;
        }
        else
        {
          v80 = 0;
          v81 = 1;
        }
        v82 = __ldxr((unsigned __int8 *)v76);
        if (v82 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v76))
          {
LABEL_142:
            if (!v79)
            {
              if (v80)
                (*(void (**)(uint64_t))(*(_QWORD *)v80 + 8))(v80);
              if (!v81)
                WTF::fastFree((WTF *)v76, v27);
            }
            goto LABEL_147;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v76);
        goto LABEL_142;
      }
      MEMORY[0x19AEA534C](v76);
      goto LABEL_135;
    }
    v53 = *(_QWORD *)(v52 + 8);
    if (__ldaxr((unsigned __int8 *)v53))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v53))
    {
LABEL_86:
      v55 = *(_QWORD *)(v53 + 8);
      v56 = v55 - 1;
      *(_QWORD *)(v53 + 8) = v55 - 1;
      if (v55 == 1)
      {
        v99 = *(_QWORD *)(v53 + 16);
        v57 = *(_QWORD *)(v53 + 24);
        *(_QWORD *)(v53 + 24) = 0;
        v58 = v99 != 0;
      }
      else
      {
        v57 = 0;
        v58 = 1;
      }
      v59 = __ldxr((unsigned __int8 *)v53);
      if (v59 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v53))
        {
LABEL_93:
          if (!v56)
          {
            if (v57)
              (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
            if (!v58)
              WTF::fastFree((WTF *)v53, v27);
          }
          goto LABEL_98;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v53);
      goto LABEL_93;
    }
    MEMORY[0x19AEA534C](v53);
    goto LABEL_86;
  }
  v41 = *v40;
  if (__ldaxr(*v40))
  {
    __clrex();
  }
  else if (!__stxr(1u, v41))
  {
LABEL_64:
    v43 = *((_QWORD *)v41 + 1);
    v44 = v43 - 1;
    *((_QWORD *)v41 + 1) = v43 - 1;
    if (v43 == 1)
    {
      v98 = *((_QWORD *)v41 + 2);
      v45 = (WebCore::WebCoreDecompressionSession *)*((_QWORD *)v41 + 3);
      *((_QWORD *)v41 + 3) = 0;
      v46 = v98 != 0;
    }
    else
    {
      v45 = 0;
      v46 = 1;
    }
    v47 = __ldxr(v41);
    if (v47 == 1)
    {
      if (!__stlxr(0, v41))
      {
LABEL_71:
        if (!v44)
        {
          if (v45)
          {
            WebCore::WebCoreDecompressionSession::~WebCoreDecompressionSession(v45);
            WTF::fastFree(v48, v49);
          }
          if (!v46)
            WTF::fastFree((WTF *)v41, v27);
        }
        goto LABEL_76;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v41);
    goto LABEL_71;
  }
  MEMORY[0x19AEA534C](v41);
  goto LABEL_64;
}

uint64_t WebCore::MediaPlayerPrivateMediaSourceAVFObjC::flushPendingSizeChanges(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this, void *a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  const void *v6;
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  uint64_t result;
  unsigned int v11;
  unsigned int v12;

  v3 = *((_QWORD *)this + 37);
  for (i = *((_QWORD *)this + 38); v3 != i; i = *((_QWORD *)this + 38))
  {
    v5 = *((_QWORD *)this + 39);
    v6 = *(const void **)(v5 + 8 * v3);
    *(_QWORD *)(v5 + 8 * v3) = 0;
    v7 = *((_QWORD *)this + 39);
    v8 = *(const void **)(v7 + 8 * v3);
    *(_QWORD *)(v7 + 8 * v3) = 0;
    if (v8)
    {
      CFRelease(v8);
      v3 = *((_QWORD *)this + 37);
    }
    if (v3 == *((unsigned int *)this + 80) - 1)
      v9 = 0;
    else
      v9 = v3 + 1;
    *((_QWORD *)this + 37) = v9;
    objc_msgSend(*((id *)this + 24), "removeTimeObserver:", v6);
    if (v6)
      CFRelease(v6);
    v3 = *((_QWORD *)this + 37);
  }
  result = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (result)
  {
    *(_QWORD *)(result + 8) = 0;
    do
    {
      v11 = __ldaxr((unsigned int *)result);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)result));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)result);
      return WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

void sub_19477D1A8(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebCore::MediaPlayerPrivateMediaSourceAVFObjC::destroyLayer(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  PAL *v6;
  OpaqueCMTimebase *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  const void *v14;
  const void *v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;

  if (*((_QWORD *)this + 21))
  {
    v2 = *((_QWORD *)this + 61);
    v3 = (*(uint64_t (**)(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *))(*(_QWORD *)this + 1296))(this);
    v4 = *((_QWORD *)this + 62);
    v20 = (const char *)v3;
    v21 = v5;
    v22 = "destroyLayer";
    v23 = v4;
    if (*(_BYTE *)(v2 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)&v20);
    v18 = 0uLL;
    v19 = 0;
    v6 = (PAL *)objc_msgSend(*((id *)this + 24), "timebase");
    PAL::softLinkCoreMediaCMTimebaseGetTime[0](v6, v7);
    v8 = (void *)*((_QWORD *)this + 24);
    v9 = *((_QWORD *)this + 21);
    v16 = v18;
    v17 = v19;
    objc_msgSend(v8, "removeRenderer:atTime:completionHandler:", v9, &v16, 0);
    v10 = *((_QWORD *)this + 63);
    v11 = *(_QWORD *)(v10 + 16);
    v12 = *(_QWORD *)(v10 + 24);
    v20 = "VideoLayerManagerObjC";
    v21 = 22;
    v22 = "didDestroyVideoLayer";
    v23 = v12;
    if (*(_BYTE *)(v11 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v20);
    WebCore::VideoLayerManagerObjC::setTextTrackRepresentationLayer(v10, 0);
    objc_msgSend(*(id *)(v10 + 72), "removeFromSuperlayer");
    v13 = *(const void **)(v10 + 32);
    *(_QWORD *)(v10 + 32) = 0;
    if (v13)
      CFRelease(v13);
    v14 = *(const void **)(v10 + 72);
    *(_QWORD *)(v10 + 72) = 0;
    if (v14)
      CFRelease(v14);
    v15 = (const void *)*((_QWORD *)this + 21);
    *((_QWORD *)this + 21) = 0;
    if (v15)
      CFRelease(v15);
  }
}

BOOL WebCore::MediaPlayerPrivateMediaSourceAVFObjC::destroyDecompressionSession(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  dispatch_source_s *v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::SourceBufferPrivate *v9;
  void *v10;
  unsigned __int8 **v11;
  unsigned __int8 *v12;
  uint64_t v14;
  uint64_t v15;
  WebCore::WebCoreDecompressionSession *v16;
  BOOL v17;
  int v18;
  WTF *v19;
  void *v20;
  uint64_t v22;
  _QWORD v23[4];

  v1 = *((_QWORD *)this + 36);
  if (v1)
  {
    v3 = *((_QWORD *)this + 61);
    v4 = (*(uint64_t (**)(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *))(*(_QWORD *)this + 1296))(this);
    v7 = *((_QWORD *)this + 62);
    v23[0] = v4;
    v23[1] = v5;
    v23[2] = "destroyDecompressionSession";
    v23[3] = v7;
    if (*(_BYTE *)(v3 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)v23);
    v8 = *((_QWORD *)this + 19);
    if (v8)
    {
      v9 = *(WebCore::SourceBufferPrivate **)(v8 + 208);
      if (v9)
        WebCore::SourceBufferPrivateAVFObjC::setDecompressionSession(v9, 0, v6);
    }
    WebCore::WebCoreDecompressionSession::invalidate(*((WebCore::WebCoreDecompressionSession **)this + 36), v5, v6);
    v11 = (unsigned __int8 **)*((_QWORD *)this + 36);
    *((_QWORD *)this + 36) = 0;
    if (!v11)
      goto LABEL_24;
    v12 = *v11;
    if (__ldaxr(*v11))
    {
      __clrex();
    }
    else if (!__stxr(1u, v12))
    {
      goto LABEL_12;
    }
    MEMORY[0x19AEA534C](v12);
LABEL_12:
    v14 = *((_QWORD *)v12 + 1);
    v15 = v14 - 1;
    *((_QWORD *)v12 + 1) = v14 - 1;
    if (v14 == 1)
    {
      v22 = *((_QWORD *)v12 + 2);
      v16 = (WebCore::WebCoreDecompressionSession *)*((_QWORD *)v12 + 3);
      *((_QWORD *)v12 + 3) = 0;
      v17 = v22 != 0;
    }
    else
    {
      v16 = 0;
      v17 = 1;
    }
    v18 = __ldxr(v12);
    if (v18 == 1)
    {
      if (!__stlxr(0, v12))
      {
        if (!v15)
          goto LABEL_20;
        goto LABEL_24;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v12);
    if (!v15)
    {
LABEL_20:
      if (v16)
      {
        WebCore::WebCoreDecompressionSession::~WebCoreDecompressionSession(v16);
        WTF::fastFree(v19, v20);
      }
      if (!v17)
        WTF::fastFree((WTF *)v12, v10);
    }
LABEL_24:
    WebCore::MediaPlayerPrivateMediaSourceAVFObjC::setHasAvailableVideoFrame(this, 0);
  }
  return v1 != 0;
}

void `non-virtual thunk to'WebCore::MediaPlayerPrivateMediaSourceAVFObjC::~MediaPlayerPrivateMediaSourceAVFObjC(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this)
{
  WebCore::MediaPlayerPrivateMediaSourceAVFObjC::~MediaPlayerPrivateMediaSourceAVFObjC((WebCore::MediaPlayerPrivateMediaSourceAVFObjC *)((char *)this - 64));
}

{
  WTF *v1;
  void *v2;

  WebCore::MediaPlayerPrivateMediaSourceAVFObjC::~MediaPlayerPrivateMediaSourceAVFObjC((WebCore::MediaPlayerPrivateMediaSourceAVFObjC *)((char *)this - 64));
  WTF::fastFree(v1, v2);
}

void WebCore::MediaPlayerPrivateMediaSourceAVFObjC::registerMediaEngine(void (*a1)(_QWORD *))
{
  PAL *v2;
  PAL *AVStreamDataParserClass;
  PAL *AVSampleBufferAudioRendererClass;
  PAL *AVSampleBufferRenderSynchronizerClass;
  objc_class *v6;
  WebCore::MediaSessionManagerCocoa *v7;
  uint64_t v8;
  _QWORD block[4];
  char v10;

  v2 = (PAL *)PAL::AVFoundationLibrary((PAL *)1);
  if (v2)
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
    block[3] = &__block_descriptor_tmp_1;
    v10 = 1;
    if (PAL::CoreMediaLibrary(BOOL)::once != -1)
      dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
    if (PAL::CoreMediaLibrary(BOOL)::frameworkLibrary)
    {
      AVStreamDataParserClass = (PAL *)PAL::getAVStreamDataParserClass(v2);
      if (AVStreamDataParserClass)
      {
        AVSampleBufferAudioRendererClass = (PAL *)PAL::getAVSampleBufferAudioRendererClass(AVStreamDataParserClass);
        if (AVSampleBufferAudioRendererClass)
        {
          AVSampleBufferRenderSynchronizerClass = (PAL *)PAL::getAVSampleBufferRenderSynchronizerClass(AVSampleBufferAudioRendererClass);
          if (AVSampleBufferRenderSynchronizerClass)
          {
            v6 = (objc_class *)PAL::getAVSampleBufferAudioRendererClass(AVSampleBufferRenderSynchronizerClass);
            if (class_getInstanceMethod(v6, sel_setMuted_))
            {
              v7 = (WebCore::MediaSessionManagerCocoa *)WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v7 = off_1E3205900;
              *((_QWORD *)v7 + 1) = 0;
              WebCore::MediaSessionManagerCocoa::ensureCodecsRegistered(v7);
              block[0] = v7;
              a1(block);
              v8 = block[0];
              block[0] = 0;
              if (v8)
                (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
            }
          }
        }
      }
    }
  }
}

void sub_19477D5B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *WebCore::MediaPlayerPrivateMediaSourceAVFObjC::load(unsigned __int8 *this, const WTF::String *a2)
{
  uint64_t v2;
  WebCore::MediaPlayer *v3;
  int v5;

  this[392] = 4;
  v2 = *((_QWORD *)this + 16);
  if (!v2)
    return this;
  v3 = (WebCore::MediaPlayer *)*((_QWORD *)this + 17);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
LABEL_5:
    this = (unsigned __int8 *)MEMORY[0x19AEA534C](v2, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v2))
    goto LABEL_5;
LABEL_6:
  if (*(_QWORD *)(v2 + 24))
    ++*(_QWORD *)(v2 + 8);
  else
    v3 = 0;
  v5 = __ldxr((unsigned __int8 *)v2);
  if (v5 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v2))
    {
      if (!v3)
        return this;
      goto LABEL_12;
    }
  }
  else
  {
    __clrex();
  }
  this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
  if (v3)
  {
LABEL_12:
    WebCore::MediaPlayer::networkStateChanged(v3);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v3);
  }
  return this;
}

uint64_t WebCore::MediaPlayerPrivateMediaSourceAVFObjC::load(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this, const WTF::URL *a2, const WebCore::ContentType *a3, WebCore::MediaSourcePrivateClient *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  int v27;
  WebCore::SourceBufferPrivateAVFObjC *v28;
  dispatch_source_s *v29;
  WebCore::SourceBufferPrivate *v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34[4];

  v6 = *((_QWORD *)this + 61);
  v7 = (*(uint64_t (**)(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *, const WTF::URL *, const WebCore::ContentType *))(*(_QWORD *)this + 1296))(this, a2, a3);
  v8 = *((_QWORD *)this + 62);
  v34[0] = v7;
  v34[1] = v9;
  v34[2] = (uint64_t)"load";
  v34[3] = v8;
  if (*(_BYTE *)(v6 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)v34);
  WebCore::MediaSourcePrivateAVFObjC::create(this, a4, v34);
  v11 = v34[0];
  v34[0] = 0;
  v12 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = v11;
  if (v12)
  {
    v13 = *(_QWORD *)(v12 + 8);
    if (__ldaxr((unsigned __int8 *)v13))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v13))
    {
      goto LABEL_8;
    }
    MEMORY[0x19AEA534C](v13);
LABEL_8:
    v15 = *(_QWORD *)(v13 + 8);
    v16 = v15 - 1;
    *(_QWORD *)(v13 + 8) = v15 - 1;
    if (v15 == 1)
    {
      v32 = *(_QWORD *)(v13 + 16);
      v17 = *(_QWORD *)(v13 + 24);
      *(_QWORD *)(v13 + 24) = 0;
      v18 = v32 != 0;
    }
    else
    {
      v17 = 0;
      v18 = 1;
    }
    v19 = __ldxr((unsigned __int8 *)v13);
    if (v19 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v13))
      {
        if (v16)
          goto LABEL_20;
LABEL_16:
        if (v17)
          (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
        if (!v18)
          WTF::fastFree((WTF *)v13, v10);
LABEL_20:
        v20 = v34[0];
        v34[0] = 0;
        if (!v20)
          goto LABEL_37;
        v21 = *(_QWORD *)(v20 + 8);
        if (__ldaxr((unsigned __int8 *)v21))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v21))
        {
          goto LABEL_25;
        }
        MEMORY[0x19AEA534C](v21);
LABEL_25:
        v23 = *(_QWORD *)(v21 + 8);
        v24 = v23 - 1;
        *(_QWORD *)(v21 + 8) = v23 - 1;
        if (v23 == 1)
        {
          v33 = *(_QWORD *)(v21 + 16);
          v25 = *(_QWORD *)(v21 + 24);
          *(_QWORD *)(v21 + 24) = 0;
          v26 = v33 != 0;
        }
        else
        {
          v25 = 0;
          v26 = 1;
        }
        v27 = __ldxr((unsigned __int8 *)v21);
        if (v27 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v21))
          {
            if (v24)
              goto LABEL_37;
            goto LABEL_33;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v21);
        if (v24)
          goto LABEL_37;
LABEL_33:
        if (v25)
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
        if (!v26)
          WTF::fastFree((WTF *)v21, v10);
        goto LABEL_37;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v13);
    if (v16)
      goto LABEL_20;
    goto LABEL_16;
  }
LABEL_37:
  WTF::MachSendRight::MachSendRight((WTF::MachSendRight *)v34, (WebCore::MediaPlayerPrivateMediaSourceAVFObjC *)((char *)this + 656));
  WTF::MachSendRight::operator=();
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v34);
  v28 = *(WebCore::SourceBufferPrivateAVFObjC **)(*((_QWORD *)this + 19) + 208);
  if (v28)
  {
    WebCore::SourceBufferPrivateAVFObjC::setVideoRenderer(v28, *((const void **)this + 21));
    v30 = *(WebCore::SourceBufferPrivate **)(*((_QWORD *)this + 19) + 208);
    if (v30)
      WebCore::SourceBufferPrivateAVFObjC::setDecompressionSession(v30, *((unsigned __int8 ***)this + 36), v29);
  }
  return (*(uint64_t (**)(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *))(*(_QWORD *)this + 792))(this);
}

unsigned __int8 *WebCore::MediaPlayerPrivateMediaSourceAVFObjC::load(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this, WebCore::MediaStreamPrivate *a2)
{
  return WebCore::MediaPlayerPrivateMediaSourceAVFObjC::setNetworkState((unsigned __int8 *)this, 4);
}

unsigned __int8 *WebCore::MediaPlayerPrivateMediaSourceAVFObjC::setNetworkState(unsigned __int8 *result, int a2)
{
  unsigned __int8 v2;
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::MediaPlayer *v8;
  int v10;
  _QWORD v11[4];
  unsigned __int8 v12;

  v12 = a2;
  if (result[392] != a2)
  {
    v2 = a2;
    v3 = result;
    v4 = *((_QWORD *)result + 61);
    result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 1296))(result);
    v5 = *((_QWORD *)v3 + 62);
    v11[0] = result;
    v11[1] = v6;
    v11[2] = "setNetworkState";
    v11[3] = v5;
    if (*(_BYTE *)(v4 + 12))
    {
      result = (unsigned __int8 *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::MediaPlayerNetworkState>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)v11, &v12);
      v2 = v12;
    }
    v3[392] = v2;
    v7 = *((_QWORD *)v3 + 16);
    if (v7)
    {
      v8 = (WebCore::MediaPlayer *)*((_QWORD *)v3 + 17);
      if (__ldaxr((unsigned __int8 *)v7))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v7))
      {
        goto LABEL_9;
      }
      result = (unsigned __int8 *)MEMORY[0x19AEA534C](v7);
LABEL_9:
      if (*(_QWORD *)(v7 + 24))
        ++*(_QWORD *)(v7 + 8);
      else
        v8 = 0;
      v10 = __ldxr((unsigned __int8 *)v7);
      if (v10 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v7))
        {
LABEL_17:
          if (v8)
          {
            WebCore::MediaPlayer::networkStateChanged(v8);
            return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v8);
          }
          return result;
        }
      }
      else
      {
        __clrex();
      }
      result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v7);
      goto LABEL_17;
    }
  }
  return result;
}

uint64_t WebCore::MediaPlayerPrivateMediaSourceAVFObjC::platformLayer(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 63) + 32);
}

void WebCore::MediaPlayerPrivateMediaSourceAVFObjC::play(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;

  v2 = *((_QWORD *)this + 61);
  v3 = (*(uint64_t (**)(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *))(*(_QWORD *)this + 1296))(this);
  v4 = *((_QWORD *)this + 62);
  v6 = v3;
  v7 = v5;
  v8 = "play";
  v9 = v4;
  if (*(_BYTE *)(v2 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)&v6);
  LOBYTE(v6) = 0;
  LOBYTE(v7) = 0;
  WebCore::MediaPlayerPrivateMediaSourceAVFObjC::playInternal((uint64_t)this, (WTF::MonotonicTime *)&v6);
}

void WebCore::MediaPlayerPrivateMediaSourceAVFObjC::playInternal(uint64_t a1, WTF::MonotonicTime *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  __int128 v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  __int128 v22;
  int v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  NSObject *v30;
  uint64_t v31;
  void *v32;
  char *v33;
  unsigned __int8 *v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  WTF::Logger *v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::Logger *v48;
  uint64_t v49;
  WTF::StringImpl **v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  int v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  _QWORD v63[2];
  __int128 v64;
  const char *v65;
  uint64_t v66;
  WTF::Logger *v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  __int128 buf;
  const char *v79;
  WTF::StringImpl *v80;
  int v81;
  WTF::StringImpl *v82;
  int v83;
  WTF::StringImpl *v84;
  int v85;
  WTF::StringImpl *v86;
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 152))
    return;
  *(_QWORD *)&buf = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 352))(a1);
  *((_QWORD *)&buf + 1) = v4;
  v5 = *(_QWORD *)(a1 + 152);
  v6 = (unsigned __int8 *)(v5 + 64);
  if (__ldaxr((unsigned __int8 *)(v5 + 64)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v5 + 64);
LABEL_6:
  v8 = *(_OWORD *)(v5 + 72);
  v9 = __ldxr(v6);
  if (v9 != 1)
  {
    __clrex();
    goto LABEL_10;
  }
  if (__stlxr(0, v6))
  {
LABEL_10:
    v60 = v8;
    WTF::Lock::unlockSlow((WTF::Lock *)(v5 + 64));
    v8 = v60;
  }
  v64 = v8;
  v10 = WTF::MediaTime::compare((WTF::MediaTime *)&buf, (const WTF::MediaTime *)&v64);
  v11 = *(_QWORD *)(a1 + 488);
  if (v10 < 0)
  {
    v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1296))(a1);
    v20 = *(WTF::StringImpl **)(a1 + 496);
    *(_QWORD *)&buf = v19;
    *((_QWORD *)&buf + 1) = v21;
    v79 = "playInternal";
    v80 = v20;
    if (*(_BYTE *)(v11 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)&buf);
    WebCore::MediaSourcePrivateAVFObjC::flushActiveSourceBuffersIfNeeded(*(_QWORD *)(a1 + 152));
    *(_BYTE *)(a1 + 448) = 1;
    if (!*(_BYTE *)(a1 + 120)
      && *(_DWORD *)(a1 + 452) == 2
      && (*(_BYTE *)(a1 + 460) || *(_BYTE *)(a1 + 458))
      && *(unsigned __int8 *)(a1 + 393) >= 3u)
    {
      WebCore::MediaPlayerPrivateMediaSourceAVFObjC::setSynchronizerRate(a1, a2, *(double *)(a1 + 440));
    }
    return;
  }
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1296))(a1);
  v13 = *(_QWORD *)(a1 + 496);
  *(_QWORD *)&v64 = v12;
  *((_QWORD *)&v64 + 1) = v14;
  v65 = "playInternal";
  v66 = v13;
  v63[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 352))(a1);
  v63[1] = v15;
  v16 = *(_QWORD *)(a1 + 152);
  v17 = (unsigned __int8 *)(v16 + 64);
  if (__ldaxr((unsigned __int8 *)(v16 + 64)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v17))
  {
    goto LABEL_24;
  }
  MEMORY[0x19AEA534C](v16 + 64);
LABEL_24:
  v22 = *(_OWORD *)(v16 + 72);
  v23 = __ldxr(v17);
  if (v23 != 1)
  {
    __clrex();
    goto LABEL_28;
  }
  if (__stlxr(0, v17))
  {
LABEL_28:
    v61 = v22;
    WTF::Lock::unlockSlow((WTF::Lock *)(v16 + 64));
    v22 = v61;
  }
  v62 = v22;
  if (*(_BYTE *)(v11 + 12))
  {
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v64);
    WTF::String::String((WTF::String *)&v72, "bailing, current time: ");
    WTF::MediaTime::toJSONString((WTF::MediaTime *)v63);
    WTF::String::String((WTF::String *)&v70, " greater than duration ");
    WTF::MediaTime::toJSONString((WTF::MediaTime *)&v62);
    v67 = v72;
    v77 = v71;
    *(_QWORD *)&buf = v73;
    v75 = v69;
    v76 = v70;
    WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v67, (uint64_t *)&v77, (uint64_t *)&v76, (uint64_t *)&v75, &v74);
    if (v74)
    {
      v25 = v69;
      v69 = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
          WTF::StringImpl::destroy(v25, v24);
        else
          *(_DWORD *)v25 -= 2;
      }
      v26 = v70;
      v70 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
          WTF::StringImpl::destroy(v26, v24);
        else
          *(_DWORD *)v26 -= 2;
      }
      v27 = v71;
      v71 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
          WTF::StringImpl::destroy(v27, v24);
        else
          *(_DWORD *)v27 -= 2;
      }
      v28 = v72;
      v72 = 0;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2)
          WTF::StringImpl::destroy(v28, v24);
        else
          *(_DWORD *)v28 -= 2;
      }
      v29 = v73;
      v73 = 0;
      if (v29)
      {
        if (*(_DWORD *)v29 == 2)
          WTF::StringImpl::destroy(v29, v24);
        else
          *(_DWORD *)v29 -= 2;
      }
      v30 = qword_1ECE7CE80;
      v31 = os_log_type_enabled((os_log_t)qword_1ECE7CE80, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v31)
      {
        WTF::String::utf8();
        v33 = v67 ? (char *)v67 + 16 : 0;
        LODWORD(buf) = 136446210;
        *(_QWORD *)((char *)&buf + 4) = v33;
        _os_log_impl(&dword_1940B8000, v30, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
        v31 = (uint64_t)v67;
        v67 = 0;
        if (v31)
        {
          if (*(_DWORD *)v31 == 1)
            v31 = WTF::fastFree((WTF *)v31, v32);
          else
            --*(_DWORD *)v31;
        }
      }
      if (WebCore::LogMediaSource)
      {
        v34 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
        while (1)
        {
          v35 = *v34;
          if ((v35 & 1) != 0)
            break;
          v36 = __ldaxr(v34);
          if (v36 == v35)
          {
            if (!__stxr(v35 | 1, v34))
            {
              v37 = WTF::Logger::observers((WTF::Logger *)v31);
              v38 = *(unsigned int *)(v37 + 12);
              if ((_DWORD)v38)
              {
                v39 = *(uint64_t **)v37;
                v59 = *(_QWORD *)v37 + 8 * v38;
                do
                {
                  v40 = *v39;
                  LODWORD(buf) = 0;
                  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v64);
                  LODWORD(v79) = 0;
                  WTF::String::String((WTF::String *)&v80, "bailing, current time: ");
                  v81 = 1;
                  WTF::MediaTime::toJSONString((WTF::MediaTime *)v63);
                  v83 = 0;
                  WTF::String::String((WTF::String *)&v84, " greater than duration ");
                  v85 = 1;
                  WTF::MediaTime::toJSONString((WTF::MediaTime *)&v62);
                  v67 = 0;
                  v68 = 0;
                  v41 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x50);
                  LODWORD(v68) = 5;
                  v67 = v41;
                  v42 = HIDWORD(v68);
                  *((_DWORD *)v41 + 4 * HIDWORD(v68)) = buf;
                  v43 = *((_QWORD *)&buf + 1);
                  if (*((_QWORD *)&buf + 1))
                    **((_DWORD **)&buf + 1) += 2;
                  *((_QWORD *)v41 + 2 * v42 + 1) = v43;
                  *((_DWORD *)v41 + 4 * (v42 + 1)) = (_DWORD)v79;
                  v44 = v80;
                  if (v80)
                    *(_DWORD *)v80 += 2;
                  *((_QWORD *)v41 + 2 * (v42 + 1) + 1) = v44;
                  *((_DWORD *)v41 + 4 * (v42 + 2)) = v81;
                  v45 = v82;
                  if (v82)
                    *(_DWORD *)v82 += 2;
                  *((_QWORD *)v41 + 2 * (v42 + 2) + 1) = v45;
                  *((_DWORD *)v41 + 4 * (v42 + 3)) = v83;
                  v46 = v84;
                  if (v84)
                    *(_DWORD *)v84 += 2;
                  *((_QWORD *)v41 + 2 * (v42 + 3) + 1) = v46;
                  *((_DWORD *)v41 + 4 * (v42 + 4)) = v85;
                  v47 = v86;
                  if (v86)
                    *(_DWORD *)v86 += 2;
                  *((_QWORD *)v41 + 2 * (v42 + 4) + 1) = v47;
                  HIDWORD(v68) = v42 + 5;
                  (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v40 + 16))(v40, &WebCore::LogMediaSource, 0, &v67);
                  v48 = v67;
                  if (HIDWORD(v68))
                  {
                    v49 = 16 * HIDWORD(v68);
                    v50 = (WTF::StringImpl **)((char *)v67 + 8);
                    do
                    {
                      v51 = *v50;
                      *v50 = 0;
                      if (v51)
                      {
                        if (*(_DWORD *)v51 == 2)
                          WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v32);
                        else
                          *(_DWORD *)v51 -= 2;
                      }
                      v50 += 2;
                      v49 -= 16;
                    }
                    while (v49);
                    v48 = v67;
                  }
                  if (v48)
                  {
                    v67 = 0;
                    LODWORD(v68) = 0;
                    WTF::fastFree(v48, v32);
                  }
                  v52 = v86;
                  v86 = 0;
                  if (v52)
                  {
                    if (*(_DWORD *)v52 == 2)
                      WTF::StringImpl::destroy(v52, (WTF::StringImpl *)v32);
                    else
                      *(_DWORD *)v52 -= 2;
                  }
                  v53 = v84;
                  v84 = 0;
                  if (v53)
                  {
                    if (*(_DWORD *)v53 == 2)
                      WTF::StringImpl::destroy(v53, (WTF::StringImpl *)v32);
                    else
                      *(_DWORD *)v53 -= 2;
                  }
                  v54 = v82;
                  v82 = 0;
                  if (v54)
                  {
                    if (*(_DWORD *)v54 == 2)
                      WTF::StringImpl::destroy(v54, (WTF::StringImpl *)v32);
                    else
                      *(_DWORD *)v54 -= 2;
                  }
                  v55 = v80;
                  v80 = 0;
                  if (v55)
                  {
                    if (*(_DWORD *)v55 == 2)
                      WTF::StringImpl::destroy(v55, (WTF::StringImpl *)v32);
                    else
                      *(_DWORD *)v55 -= 2;
                  }
                  v56 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                  *((_QWORD *)&buf + 1) = 0;
                  if (v56)
                  {
                    if (*(_DWORD *)v56 == 2)
                      WTF::StringImpl::destroy(v56, (WTF::StringImpl *)v32);
                    else
                      *(_DWORD *)v56 -= 2;
                  }
                  ++v39;
                }
                while (v39 != (uint64_t *)v59);
              }
              v57 = __ldxr(v34);
              if (v57 == 1)
              {
                if (!__stlxr(0, v34))
                  break;
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
              break;
            }
          }
          else
          {
            __clrex();
          }
        }
      }
      v58 = v74;
      v74 = 0;
      if (v58)
      {
        if (*(_DWORD *)v58 == 2)
          WTF::StringImpl::destroy(v58, (WTF::StringImpl *)v32);
        else
          *(_DWORD *)v58 -= 2;
      }
    }
    else
    {
      __break(0xC471u);
    }
  }
}

void sub_19477E238(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,WTF *a24,int a25,int a26,WTF::StringImpl *a27,WTF::StringImpl *a28,WTF::StringImpl *a29,WTF::StringImpl *a30,uint64_t a31,WTF::StringImpl *a32)
{
  if (a32)
  {
    if (*(_DWORD *)a32 == 2)
      WTF::StringImpl::destroy(a32, a2);
    else
      *(_DWORD *)a32 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebCore::MediaPlayerPrivateMediaSourceAVFObjC::setSynchronizerRate(uint64_t a1, WTF::MonotonicTime *this, double a3)
{
  double v3;
  PAL *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CMTime *v10;
  void *v11;
  unsigned int v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  const void *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  _QWORD v28[4];
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;

  v3 = a3;
  if (*((_BYTE *)this + 8))
  {
    v29 = 0uLL;
    v30 = 0;
    v5 = (PAL *)WTF::MonotonicTime::toMachAbsoluteTime(this);
    PAL::softLinkCoreMediaCMClockMakeHostTimeFromSystemUnits(v5, v6);
    v7 = *(_QWORD *)(a1 + 488);
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1296))(a1);
    v9 = *(_QWORD *)(a1 + 496);
    v28[0] = v8;
    v28[1] = v10;
    v28[2] = "setSynchronizerRate";
    v28[3] = v9;
    v31 = 0uLL;
    v32 = 0;
    *(_QWORD *)&v31 = PAL::softLinkCoreMediaCMTimeGetSeconds((PAL *)&v31, v10);
    if (*(_BYTE *)(v7 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [17],double,char [15],double>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)v28, "setting rate to ", (double *)(a1 + 440), " at host time ", (double *)&v31);
    v11 = *(void **)(a1 + 192);
    if (PAL::get_CoreMedia_kCMTimeInvalid(void)::once != -1)
      dispatch_once(&PAL::get_CoreMedia_kCMTimeInvalid(void)::once, &__block_literal_global_5);
    v26 = PAL::get_CoreMedia_kCMTimeInvalid(void)::constantCoreMediakCMTimeInvalid;
    v27 = qword_1EE2E68A0;
    v24 = v29;
    v25 = v30;
    *(float *)&v12 = v3;
    objc_msgSend(v11, "setRate:time:atHostTime:", &v26, &v24, COERCE_DOUBLE(__PAIR64__(DWORD1(v29), v12)));
  }
  else
  {
    *(float *)&a3 = a3;
    objc_msgSend(*(id *)(a1 + 192), "setRate:", a3);
  }
  if (v3 == 0.0)
  {
    WebCore::MediaPlayerPrivateMediaSourceAVFObjC::updateLastPixelBuffer((WebCore::MediaPlayerPrivateMediaSourceAVFObjC *)a1);
    return;
  }
  if (!*(_BYTE *)(a1 + 536))
  {
    v14 = *(_QWORD *)(a1 + 272);
    *(_QWORD *)(a1 + 272) = 0;
    if (!v14)
      goto LABEL_28;
    v15 = *(_QWORD *)(v14 + 8);
    if (__ldaxr((unsigned __int8 *)v15))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v15))
    {
      goto LABEL_16;
    }
    MEMORY[0x19AEA534C](v15);
LABEL_16:
    v17 = *(_QWORD *)(v15 + 8);
    v18 = v17 - 1;
    *(_QWORD *)(v15 + 8) = v17 - 1;
    if (v17 == 1)
    {
      v23 = *(_QWORD *)(v15 + 16);
      v19 = *(_QWORD *)(v15 + 24);
      *(_QWORD *)(v15 + 24) = 0;
      v20 = v23 != 0;
    }
    else
    {
      v19 = 0;
      v20 = 1;
    }
    v21 = __ldxr((unsigned __int8 *)v15);
    if (v21 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v15))
      {
        if (!v18)
          goto LABEL_24;
        goto LABEL_28;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v15);
    if (!v18)
    {
LABEL_24:
      if (v19)
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
      if (!v20)
        WTF::fastFree((WTF *)v15, v13);
    }
LABEL_28:
    v22 = *(const void **)(a1 + 264);
    *(_QWORD *)(a1 + 264) = 0;
    if (v22)
      CFRelease(v22);
  }
}

void WebCore::MediaPlayerPrivateMediaSourceAVFObjC::pause(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[16];
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;

  v2 = *((_QWORD *)this + 61);
  v3 = (*(uint64_t (**)(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *))(*(_QWORD *)this + 1296))(this);
  v4 = *((_QWORD *)this + 62);
  v11 = v3;
  v12 = v5;
  v13 = "pause";
  v14 = v4;
  if (*(_BYTE *)(v2 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)&v11);
  v10[0] = 0;
  v10[8] = 0;
  v6 = *((_QWORD *)this + 61);
  v7 = (*(uint64_t (**)(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *))(*(_QWORD *)this + 1296))(this);
  v8 = *((_QWORD *)this + 62);
  v11 = v7;
  v12 = v9;
  v13 = "pauseInternal";
  v14 = v8;
  if (*(_BYTE *)(v6 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)&v11);
  *((_BYTE *)this + 448) = 0;
  WebCore::MediaPlayerPrivateMediaSourceAVFObjC::setSynchronizerRate((uint64_t)this, (WTF::MonotonicTime *)v10, 0.0);
}

BOOL WebCore::MediaPlayerPrivateMediaSourceAVFObjC::paused(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this)
{
  return *((_BYTE *)this + 448) == 0;
}

uint64_t WebCore::MediaPlayerPrivateMediaSourceAVFObjC::setVolume(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this, float a2)
{
  uint64_t v3;
  uint64_t result;
  double v5;
  uint64_t v6;
  uint64_t v7;
  id *v8;
  uint64_t v9;
  id *v10;
  id *v11;
  uint64_t v12;
  id *v13;
  id *v14;
  _QWORD v15[4];
  float v16;

  v16 = a2;
  v3 = *((_QWORD *)this + 61);
  result = (*(uint64_t (**)(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *))(*(_QWORD *)this + 1296))(this);
  v6 = *((_QWORD *)this + 62);
  v15[0] = result;
  v15[1] = v7;
  v15[2] = "setVolume";
  v15[3] = v6;
  if (*(_BYTE *)(v3 + 12))
    result = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,float>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)v15, &v16);
  v8 = (id *)*((_QWORD *)this + 23);
  if (v8)
  {
    v9 = *((unsigned int *)v8 - 1);
    v10 = &v8[2 * v9];
    if (*((_DWORD *)v8 - 3))
    {
      v11 = v8;
      if ((_DWORD)v9)
      {
        v12 = 16 * v9;
        v11 = v8;
        while ((unint64_t)*v11 + 1 <= 1)
        {
          v11 += 2;
          v12 -= 16;
          if (!v12)
          {
            v11 = v10;
            goto LABEL_10;
          }
        }
      }
      goto LABEL_10;
    }
    v11 = &v8[2 * v9];
  }
  else
  {
    v11 = 0;
    v9 = 0;
  }
  v10 = &v8[2 * v9];
  if (v8)
  {
LABEL_10:
    v13 = &v8[2 * *((unsigned int *)v8 - 1)];
    goto LABEL_15;
  }
  v13 = 0;
LABEL_15:
  while (v11 != v13)
  {
    v14 = v11 + 2;
    *(float *)&v5 = v16;
    result = objc_msgSend(*v11, "setVolume:", v5);
    v11 = v10;
    if (v14 != v10)
    {
      v11 = v14;
      while ((unint64_t)*v11 + 1 <= 1)
      {
        v11 += 2;
        if (v11 == v10)
        {
          v11 = v10;
          break;
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::MediaPlayerPrivateMediaSourceAVFObjC::supportsScanning(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this)
{
  return 1;
}

uint64_t WebCore::MediaPlayerPrivateMediaSourceAVFObjC::setMuted(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this, unsigned __int8 a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  id *v7;
  uint64_t v8;
  id *v9;
  id *v10;
  uint64_t v11;
  id *v12;
  id *v13;
  _QWORD v14[4];
  unsigned __int8 v15;

  v15 = a2;
  v3 = *((_QWORD *)this + 61);
  result = (*(uint64_t (**)(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *))(*(_QWORD *)this + 1296))(this);
  v5 = *((_QWORD *)this + 62);
  v14[0] = result;
  v14[1] = v6;
  v14[2] = "setMuted";
  v14[3] = v5;
  if (*(_BYTE *)(v3 + 12))
    result = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)v14);
  v7 = (id *)*((_QWORD *)this + 23);
  if (v7)
  {
    v8 = *((unsigned int *)v7 - 1);
    v9 = &v7[2 * v8];
    if (*((_DWORD *)v7 - 3))
    {
      v10 = v7;
      if ((_DWORD)v8)
      {
        v11 = 16 * v8;
        v10 = v7;
        while ((unint64_t)*v10 + 1 <= 1)
        {
          v10 += 2;
          v11 -= 16;
          if (!v11)
          {
            v10 = v9;
            goto LABEL_10;
          }
        }
      }
      goto LABEL_10;
    }
    v10 = &v7[2 * v8];
  }
  else
  {
    v10 = 0;
    v8 = 0;
  }
  v9 = &v7[2 * v8];
  if (v7)
  {
LABEL_10:
    v12 = &v7[2 * *((unsigned int *)v7 - 1)];
    goto LABEL_15;
  }
  v12 = 0;
LABEL_15:
  while (v10 != v12)
  {
    v13 = v10 + 2;
    result = objc_msgSend(*v10, "setMuted:", v15);
    v10 = v9;
    if (v13 != v9)
    {
      v10 = v13;
      while ((unint64_t)*v10 + 1 <= 1)
      {
        v10 += 2;
        if (v10 == v9)
        {
          v10 = v9;
          break;
        }
      }
    }
  }
  return result;
}

float WebCore::MediaPlayerPrivateMediaSourceAVFObjC::naturalSize(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this)
{
  return *((float *)this + 108);
}

BOOL WebCore::MediaPlayerPrivateMediaSourceAVFObjC::hasVideo(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;
  BOOL v7;

  v1 = *((_QWORD *)this + 19);
  if (!v1)
    return 0;
  v2 = *(unsigned int *)(v1 + 44);
  if (!(_DWORD)v2)
    return 0;
  v3 = *(uint64_t **)(v1 + 32);
  v4 = 8 * v2 - 8;
  do
  {
    v5 = *v3++;
    result = *(_BYTE *)(v5 + 73) != 0;
    if (*(_BYTE *)(v5 + 73))
      v7 = 1;
    else
      v7 = v4 == 0;
    v4 -= 8;
  }
  while (!v7);
  return result;
}

BOOL WebCore::MediaPlayerPrivateMediaSourceAVFObjC::hasAudio(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;
  BOOL v7;

  v1 = *((_QWORD *)this + 19);
  if (!v1)
    return 0;
  v2 = *(unsigned int *)(v1 + 44);
  if (!(_DWORD)v2)
    return 0;
  v3 = *(uint64_t **)(v1 + 32);
  v4 = 8 * v2 - 8;
  do
  {
    v5 = *v3++;
    result = *(_BYTE *)(v5 + 72) != 0;
    if (*(_BYTE *)(v5 + 72))
      v7 = 1;
    else
      v7 = v4 == 0;
    v4 -= 8;
  }
  while (!v7);
  return result;
}

uint64_t WebCore::MediaPlayerPrivateMediaSourceAVFObjC::setPageIsVisible(uint64_t this, int a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[4];
  unsigned __int8 v8;

  v8 = a2;
  if (*(unsigned __int8 *)(this + 459) != a2)
  {
    v2 = a2;
    v3 = this;
    v4 = *(_QWORD *)(this + 488);
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 1296))(this);
    v5 = *(_QWORD *)(v3 + 496);
    v7[0] = this;
    v7[1] = v6;
    v7[2] = "setPageIsVisible";
    v7[3] = v5;
    if (*(_BYTE *)(v4 + 12))
    {
      this = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)v7);
      v2 = v8;
    }
    *(_BYTE *)(v3 + 459) = v2;
    if (v2)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 792))(v3);
      this = *(_QWORD *)(v3 + 152);
      if (this)
      {
        *(_BYTE *)(v3 + 460) = 0;
        return WebCore::MediaSourcePrivateAVFObjC::flushActiveSourceBuffersIfNeeded(this);
      }
    }
  }
  return this;
}

uint64_t WebCore::MediaPlayerPrivateMediaSourceAVFObjC::duration(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v4;
  int v5;

  v1 = *((_QWORD *)this + 19);
  if (!v1)
    return *(_QWORD *)WTF::MediaTime::zeroTime(this);
  v2 = (unsigned __int8 *)(v1 + 64);
  if (__ldaxr((unsigned __int8 *)(v1 + 64)))
  {
    __clrex();
LABEL_6:
    MEMORY[0x19AEA534C](v1 + 64);
    goto LABEL_7;
  }
  if (__stxr(1u, v2))
    goto LABEL_6;
LABEL_7:
  v4 = *(_QWORD *)(v1 + 72);
  v5 = __ldxr(v2);
  if (v5 == 1)
  {
    if (!__stlxr(0, v2))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return v4;
}

uint64_t WebCore::MediaPlayerPrivateMediaSourceAVFObjC::currentTime(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this)
{
  PAL *v2;
  OpaqueCMTimebase *v3;
  uint64_t v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  _BOOL4 v8;
  char v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  _QWORD v17[2];

  if (*((_BYTE *)this + 120) || *((_DWORD *)this + 113) != 2)
  {
    v13 = 72;
    if (!*((_BYTE *)this + 120))
      v13 = 416;
    return *(_QWORD *)((char *)this + v13);
  }
  else
  {
    v2 = (PAL *)objc_msgSend(*((id *)this + 24), "timebase");
    PAL::softLinkCoreMediaCMTimebaseGetTime[0](v2, v3);
    v4 = v15;
    v5 = v16 & 1;
    if ((~v16 & 3) == 0)
      v5 = v16 & 1 | 2;
    if ((~v16 & 5) == 0)
      v5 |= 4u;
    if ((~v16 & 9) == 0)
      v5 |= 8u;
    if ((~v16 & 0x11) != 0)
      v6 = v5;
    else
      v6 = v5 | 0x10;
    v8 = (v6 & 1) == 0 || v15 != 0;
    if (v14 >= 0)
      v9 = 5;
    else
      v9 = 9;
    v10 = !v8;
    if (v8)
    {
      v11 = v14;
    }
    else
    {
      v6 = v9;
      v11 = v14 >> 63;
    }
    if (v10)
      v4 = 1;
    v17[0] = v11;
    v17[1] = v4 | ((unint64_t)v6 << 32);
    return WebCore::MediaPlayerPrivateMediaSourceAVFObjC::clampTimeToSensicalValue(this, (const WTF::MediaTime *)v17);
  }
}

BOOL WebCore::MediaPlayerPrivateMediaSourceAVFObjC::seeking(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this)
{
  return *((_BYTE *)this + 120) || *((_DWORD *)this + 113) != 2;
}

BOOL WebCore::MediaPlayerPrivateMediaSourceAVFObjC::timeIsProgressing(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this)
{
  float v1;

  if (!*((_BYTE *)this + 448))
    return 0;
  objc_msgSend(*((id *)this + 24), "rate");
  return v1 != 0.0;
}

uint64_t WebCore::MediaPlayerPrivateMediaSourceAVFObjC::setCurrentTimeDidChangeCallback(_QWORD *a1, uint64_t a2, int a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  _QWORD v14[5];
  _BYTE v15[24];

  v5 = a1 + 25;
  v6 = (_QWORD *)a1[28];
  a1[28] = 0;
  if (v6 == v5)
  {
    v7 = 4;
    v6 = v5;
  }
  else
  {
    if (!v6)
      goto LABEL_6;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_6:
  v8 = *(_QWORD *)(a2 + 24);
  if (!v8)
  {
    a1[28] = 0;
    goto LABEL_16;
  }
  if (v8 == a2)
  {
    a1[28] = v5;
    (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), v5);
  }
  else
  {
    a1[28] = v8;
    *(_QWORD *)(a2 + 24) = 0;
  }
  if (!a1[28])
  {
LABEL_16:
    v12 = (const void *)a1[29];
    a1[29] = 0;
    if (!v12)
      return 1;
    goto LABEL_15;
  }
  v9 = (void *)a1[24];
  PAL::softLinkCoreMediaCMTimeMake((PAL *)1, 10, a3);
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = ___ZN7WebCore36MediaPlayerPrivateMediaSourceAVFObjC31setCurrentTimeDidChangeCallbackEONSt3__18functionIFvRKN3WTF9MediaTimeEEEE_block_invoke;
  v14[3] = &__block_descriptor_40_e15_v32__0___qiIq_8l;
  v14[4] = a1;
  v10 = (const void *)objc_msgSend(v9, "addPeriodicTimeObserverForInterval:queue:usingBlock:", v15, MEMORY[0x1E0C80D38], v14);
  v11 = v10;
  if (v10)
    CFRetain(v10);
  v12 = (const void *)a1[29];
  a1[29] = v11;
  if (v12)
LABEL_15:
    CFRelease(v12);
  return 1;
}

uint64_t WebCore::MediaPlayerPrivateMediaSourceAVFObjC::playAtHostTime(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this, const WTF::MonotonicTime *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;

  v4 = *((_QWORD *)this + 61);
  v5 = (*(uint64_t (**)(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *))(*(_QWORD *)this + 1296))(this);
  v6 = *((_QWORD *)this + 62);
  v9 = v5;
  v10 = v7;
  v11 = "playAtHostTime";
  v12 = v6;
  if (*(_BYTE *)(v4 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)&v9);
  v9 = *(_QWORD *)a2;
  LOBYTE(v10) = 1;
  WebCore::MediaPlayerPrivateMediaSourceAVFObjC::playInternal((uint64_t)this, (WTF::MonotonicTime *)&v9);
  return 1;
}

uint64_t WebCore::MediaPlayerPrivateMediaSourceAVFObjC::pauseAtHostTime(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this, const WTF::MonotonicTime *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;

  v4 = *((_QWORD *)this + 61);
  v5 = (*(uint64_t (**)(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *))(*(_QWORD *)this + 1296))(this);
  v6 = *((_QWORD *)this + 62);
  v15 = v5;
  v16 = v7;
  v17 = "pauseAtHostTime";
  v18 = v6;
  if (*(_BYTE *)(v4 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)&v15);
  v13 = *(_QWORD *)a2;
  v14 = 1;
  v8 = *((_QWORD *)this + 61);
  v9 = (*(uint64_t (**)(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *))(*(_QWORD *)this + 1296))(this);
  v10 = *((_QWORD *)this + 62);
  v15 = v9;
  v16 = v11;
  v17 = "pauseInternal";
  v18 = v10;
  if (*(_BYTE *)(v8 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)&v15);
  *((_BYTE *)this + 448) = 0;
  WebCore::MediaPlayerPrivateMediaSourceAVFObjC::setSynchronizerRate((uint64_t)this, (WTF::MonotonicTime *)&v13, 0.0);
  return 1;
}

uint64_t WebCore::MediaPlayerPrivateMediaSourceAVFObjC::startTime(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this)
{
  return *(_QWORD *)WTF::MediaTime::zeroTime(this);
}

uint64_t WebCore::MediaPlayerPrivateMediaSourceAVFObjC::initialTime(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this)
{
  return *(_QWORD *)WTF::MediaTime::zeroTime(this);
}

uint64_t WebCore::MediaPlayerPrivateMediaSourceAVFObjC::seekToTarget(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this, const WebCore::SeekTarget *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  __int128 v9;
  __int128 v10;
  double v11;
  _QWORD v13[4];

  v4 = *((_QWORD *)this + 61);
  v5 = (WTF::StringImpl *)(*(uint64_t (**)(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *))(*(_QWORD *)this + 1296))(this);
  v6 = *((_QWORD *)this + 62);
  v13[0] = v5;
  v13[1] = v7;
  v13[2] = "seekToTarget";
  v13[3] = v6;
  if (*(_BYTE *)(v4 + 12))
    v5 = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [8],WTF::MediaTime,char [23],WTF::MediaTime,char [23],WTF::MediaTime>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)v13, "time = ", a2, ", negativeThreshold = ", (const WebCore::SeekTarget *)((char *)a2 + 16), ", positiveThreshold = ", (const WebCore::SeekTarget *)((char *)a2 + 32));
  v8 = *((unsigned __int8 *)this + 120);
  v10 = *((_OWORD *)a2 + 1);
  v9 = *((_OWORD *)a2 + 2);
  *(_OWORD *)((char *)this + 72) = *(_OWORD *)a2;
  *(_OWORD *)((char *)this + 88) = v10;
  *(_OWORD *)((char *)this + 104) = v9;
  if (!v8)
    *((_BYTE *)this + 120) = 1;
  if ((*((_QWORD *)this + 45) & 0xFFFFFFFFFFFFLL) != 0
    && *(double *)((*((_QWORD *)this + 45) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
  {
    v5 = (WTF::StringImpl *)WebCore::TimerBase::stopSlowCase((WebCore::MediaPlayerPrivateMediaSourceAVFObjC *)((char *)this + 328));
  }
  *((_QWORD *)this + 44) = 0;
  WTF::MonotonicTime::now(v5);
  return WebCore::TimerBase::setNextFireTime((uint64_t)this + 328, v11 + 0.0);
}

void WebCore::MediaPlayerPrivateMediaSourceAVFObjC::setRateDouble(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this, double a2)
{
  WebCore::MediaPlayerPrivateMediaSourceAVFObjC *v2;
  uint64_t v3;
  uint64_t v4;
  int v6;
  double v7;
  uint64_t AVFoundation_AVAudioTimePitchAlgorithmVarispeed;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  void **v13;
  uint64_t v14;
  void **v15;
  void *v16;
  const __CFString *v17;
  void **v18;
  WTF::StringImpl *v19;
  double v20;
  WTF::StringImpl *v21;
  char v22;

  v2 = this;
  if (a2 < 0.0)
    a2 = 0.0;
  *((double *)this + 55) = a2;
  v3 = *((_QWORD *)this + 16);
  if (!v3)
    goto LABEL_51;
  v4 = *((_QWORD *)this + 17);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_8;
  }
  this = (WebCore::MediaPlayerPrivateMediaSourceAVFObjC *)MEMORY[0x19AEA534C](v3);
LABEL_8:
  if (*(_QWORD *)(v3 + 24))
    ++*(_QWORD *)(v3 + 8);
  else
    v4 = 0;
  v6 = __ldxr((unsigned __int8 *)v3);
  if (v6 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v4)
        goto LABEL_51;
      goto LABEL_17;
    }
  }
  else
  {
    __clrex();
  }
  this = (WebCore::MediaPlayerPrivateMediaSourceAVFObjC *)WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v4)
    goto LABEL_51;
LABEL_17:
  v7 = *((double *)v2 + 55);
  if (v7 == 1.0 || !*(_BYTE *)(v4 + 228) || v7 == 0.0)
  {
    AVFoundation_AVAudioTimePitchAlgorithmVarispeed = PAL::get_AVFoundation_AVAudioTimePitchAlgorithmVarispeed(this);
  }
  else if (*(unsigned __int8 *)(v4 + 234) > 1u)
  {
    AVFoundation_AVAudioTimePitchAlgorithmVarispeed = PAL::get_AVFoundation_AVAudioTimePitchAlgorithmTimeDomain(this);
  }
  else
  {
    AVFoundation_AVAudioTimePitchAlgorithmVarispeed = PAL::get_AVFoundation_AVAudioTimePitchAlgorithmSpectral(this);
  }
  MEMORY[0x19AEA5508](&v21, AVFoundation_AVAudioTimePitchAlgorithmVarispeed);
  v10 = *((_QWORD *)v2 + 23);
  if (v10)
  {
    v11 = *(unsigned int *)(v10 - 4);
    v12 = (void **)(v10 + 16 * v11);
    if (*(_DWORD *)(v10 - 12))
    {
      v13 = (void **)*((_QWORD *)v2 + 23);
      if ((_DWORD)v11)
      {
        v14 = 16 * v11;
        v13 = (void **)*((_QWORD *)v2 + 23);
        while ((unint64_t)*v13 + 1 <= 1)
        {
          v13 += 2;
          v14 -= 16;
          if (!v14)
          {
            v13 = v12;
            goto LABEL_31;
          }
        }
      }
      goto LABEL_31;
    }
    v13 = (void **)(v10 + 16 * v11);
  }
  else
  {
    v13 = 0;
    v11 = 0;
  }
  v12 = (void **)(v10 + 16 * v11);
  if (!v10)
  {
    v15 = 0;
    goto LABEL_36;
  }
LABEL_31:
  v15 = (void **)(v10 + 16 * *(unsigned int *)(v10 - 4));
LABEL_36:
  while (v13 != v15)
  {
    v16 = *v13;
    if (v21)
      v17 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v17 = &stru_1E3487BC0;
    objc_msgSend(v16, "setAudioTimePitchAlgorithm:", v17);
    v18 = v13 + 2;
    v13 = v12;
    if (v18 != v12)
    {
      v13 = v18;
      while ((unint64_t)*v13 + 1 <= 1)
      {
        v13 += 2;
        if (v13 == v12)
        {
          v13 = v12;
          break;
        }
      }
    }
  }
  v19 = v21;
  v21 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v9);
    else
      *(_DWORD *)v19 -= 2;
  }
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v4);
LABEL_51:
  if (*((_BYTE *)v2 + 448)
    && !*((_BYTE *)v2 + 120)
    && *((_DWORD *)v2 + 113) == 2
    && (*((_BYTE *)v2 + 460) || *((_BYTE *)v2 + 458))
    && *((unsigned __int8 *)v2 + 393) >= 3u)
  {
    v20 = *((double *)v2 + 55);
    LOBYTE(v21) = 0;
    v22 = 0;
    WebCore::MediaPlayerPrivateMediaSourceAVFObjC::setSynchronizerRate((uint64_t)v2, (WTF::MonotonicTime *)&v21, v20);
  }
}

void sub_19477F508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  unsigned __int8 **v9;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v9);
  _Unwind_Resume(a1);
}

double WebCore::MediaPlayerPrivateMediaSourceAVFObjC::rate(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this)
{
  return *((double *)this + 55);
}

uint64_t WebCore::MediaPlayerPrivateMediaSourceAVFObjC::effectiveRate(id *this)
{
  PAL *v1;

  v1 = (PAL *)objc_msgSend(this[24], "timebase");
  return PAL::softLinkCoreMediaCMTimebaseGetRate(v1, (OpaqueCMTimebase *)PAL::softLinkCoreMediaCMTimebaseGetRate);
}

unsigned __int8 *WebCore::MediaPlayerPrivateMediaSourceAVFObjC::setPreservesPitch(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this, char a2)
{
  uint64_t v3;
  unsigned __int8 *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  int v10;
  double v11;
  uint64_t AVFoundation_AVAudioTimePitchAlgorithmVarispeed;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  void **v17;
  uint64_t v18;
  void **v19;
  void *v20;
  const __CFString *v21;
  void **v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24[4];
  char v25;

  v25 = a2;
  v3 = *((_QWORD *)this + 61);
  result = (unsigned __int8 *)(*(uint64_t (**)(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *))(*(_QWORD *)this + 1296))(this);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 62);
  v24[0] = (WTF::StringImpl *)result;
  v24[1] = v6;
  v24[2] = (WTF::StringImpl *)"setPreservesPitch";
  v24[3] = v5;
  if (*(_BYTE *)(v3 + 12))
    result = (unsigned __int8 *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)v24);
  v7 = *((_QWORD *)this + 16);
  if (!v7)
    return result;
  v8 = *((_QWORD *)this + 17);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_8;
  }
  result = (unsigned __int8 *)MEMORY[0x19AEA534C](v7);
LABEL_8:
  if (*(_QWORD *)(v7 + 24))
    ++*(_QWORD *)(v7 + 8);
  else
    v8 = 0;
  v10 = __ldxr((unsigned __int8 *)v7);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
    {
      if (!v8)
        return result;
      goto LABEL_17;
    }
  }
  else
  {
    __clrex();
  }
  result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v7);
  if (!v8)
    return result;
LABEL_17:
  v11 = *((double *)this + 55);
  if (v11 == 1.0 || !v25 || v11 == 0.0)
  {
    AVFoundation_AVAudioTimePitchAlgorithmVarispeed = PAL::get_AVFoundation_AVAudioTimePitchAlgorithmVarispeed((PAL *)result);
  }
  else if (*(unsigned __int8 *)(v8 + 234) > 1u)
  {
    AVFoundation_AVAudioTimePitchAlgorithmVarispeed = PAL::get_AVFoundation_AVAudioTimePitchAlgorithmTimeDomain((PAL *)result);
  }
  else
  {
    AVFoundation_AVAudioTimePitchAlgorithmVarispeed = PAL::get_AVFoundation_AVAudioTimePitchAlgorithmSpectral((PAL *)result);
  }
  MEMORY[0x19AEA5508](v24, AVFoundation_AVAudioTimePitchAlgorithmVarispeed);
  v14 = *((_QWORD *)this + 23);
  if (v14)
  {
    v15 = *(unsigned int *)(v14 - 4);
    v16 = (void **)(v14 + 16 * v15);
    if (*(_DWORD *)(v14 - 12))
    {
      v17 = (void **)*((_QWORD *)this + 23);
      if ((_DWORD)v15)
      {
        v18 = 16 * v15;
        v17 = (void **)*((_QWORD *)this + 23);
        while ((unint64_t)*v17 + 1 <= 1)
        {
          v17 += 2;
          v18 -= 16;
          if (!v18)
          {
            v17 = v16;
            goto LABEL_31;
          }
        }
      }
      goto LABEL_31;
    }
    v17 = (void **)(v14 + 16 * v15);
  }
  else
  {
    v17 = 0;
    v15 = 0;
  }
  v16 = (void **)(v14 + 16 * v15);
  if (!v14)
  {
    v19 = 0;
    goto LABEL_36;
  }
LABEL_31:
  v19 = (void **)(v14 + 16 * *(unsigned int *)(v14 - 4));
LABEL_36:
  while (v17 != v19)
  {
    v20 = *v17;
    if (v24[0])
      v21 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v21 = &stru_1E3487BC0;
    objc_msgSend(v20, "setAudioTimePitchAlgorithm:", v21);
    v22 = v17 + 2;
    v17 = v16;
    if (v22 != v16)
    {
      v17 = v22;
      while ((unint64_t)*v17 + 1 <= 1)
      {
        v17 += 2;
        if (v17 == v16)
        {
          v17 = v16;
          break;
        }
      }
    }
  }
  v23 = v24[0];
  v24[0] = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v13);
    else
      *(_DWORD *)v23 -= 2;
  }
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v8);
}

void sub_19477F7D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  unsigned __int8 **v10;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v10);
  _Unwind_Resume(a1);
}

uint64_t WebCore::MediaPlayerPrivateMediaSourceAVFObjC::networkState(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this)
{
  return *((unsigned __int8 *)this + 392);
}

uint64_t WebCore::MediaPlayerPrivateMediaSourceAVFObjC::readyState(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this)
{
  return *((unsigned __int8 *)this + 393);
}

uint64_t WebCore::MediaPlayerPrivateMediaSourceAVFObjC::maxTimeSeekable(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this)
{
  return (*(uint64_t (**)(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *))(*(_QWORD *)this + 336))(this);
}

uint64_t WebCore::MediaPlayerPrivateMediaSourceAVFObjC::minTimeSeekable(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this)
{
  return (*(uint64_t (**)(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *))(*(_QWORD *)this + 416))(this);
}

uint64_t *WebCore::MediaPlayerPrivateMediaSourceAVFObjC::buffered(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&WebCore::PlatformTimeRanges::emptyRanges(void)::onceKey);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&WebCore::PlatformTimeRanges::emptyRanges(void)::onceKey, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::PlatformTimeRanges::emptyRanges(void)::$_0 &&>>);
  }
  return &WebCore::PlatformTimeRanges::emptyRanges(void)::emptyRanges;
}

void WebCore::MediaPlayerPrivateMediaSourceAVFObjC::bufferedChanged(id *this)
{
  id v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  unint64_t v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  __int128 v14;
  int v15;
  void *v16;
  unint64_t v17;
  __int128 *v18;
  WTF::MediaTime *v19;
  unint64_t v20;
  WTF::MediaTime *v21;
  char *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  char *v28;
  PAL **v29;
  uint64_t *v30;
  uint64_t v31;
  PAL *v32;
  void *v33;
  int v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  id v41;
  uint64_t v42;
  void *v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  char v49;
  void *v50;
  void *v51;
  id v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  _QWORD v58[4];
  WTF *v59;
  id *v60;
  uint64_t v61;
  uint64_t v62;
  const char *v63;
  id v64;
  _QWORD v65[2];
  char v66[12];
  unsigned int v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD v72[2];
  __int128 v73;
  __int128 v74;
  _QWORD v75[4];

  v75[1] = *MEMORY[0x1E0C80C00];
  if (this[31])
  {
    objc_msgSend(this[24], "removeTimeObserver:");
    v2 = this[31];
    this[31] = 0;
    if (v2)
      CFRelease(v2);
  }
  v3 = (unsigned __int8 *)this[19];
  v4 = v3 + 64;
  if (__ldaxr(v3 + 64))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_8;
  }
  MEMORY[0x19AEA534C](v3 + 64);
LABEL_8:
  v6 = *((unsigned int *)v3 + 25);
  if ((_DWORD)v6)
  {
    if (v6 >> 27)
    {
      __break(0xC471u);
      return;
    }
    v7 = WTF::fastMalloc((WTF *)(32 * v6));
    v8 = (WTF *)v7;
    v9 = *((unsigned int *)v3 + 25);
    if ((_DWORD)v9)
    {
      v10 = 0;
      v11 = *((_QWORD *)v3 + 11);
      v12 = 32 * v9;
      do
      {
        v13 = (_OWORD *)(v7 + v10);
        v14 = *(_OWORD *)(v11 + v10 + 16);
        *v13 = *(_OWORD *)(v11 + v10);
        v13[1] = v14;
        v10 += 32;
      }
      while (v12 != v10);
    }
  }
  else
  {
    v8 = 0;
  }
  v15 = __ldxr(v4);
  if (v15 == 1)
  {
    if (!__stlxr(0, v4))
      goto LABEL_20;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(v3 + 64));
LABEL_20:
  v72[0] = (*((uint64_t (**)(id *))*this + 44))(this);
  v72[1] = v16;
  if (!(_DWORD)v6)
    goto LABEL_68;
  v17 = 0;
  v18 = (__int128 *)((char *)v8 + 16);
  while (1)
  {
    v74 = *(v18 - 1);
    if ((WTF::MediaTime::compare((WTF::MediaTime *)v72, (const WTF::MediaTime *)&v74) & 0x80000000) == 0)
    {
      v73 = *v18;
      v19 = (WTF::MediaTime *)WTF::MediaTime::compare((WTF::MediaTime *)v72, (const WTF::MediaTime *)&v73);
      if ((int)v19 < 1)
        break;
    }
    ++v17;
    v18 += 2;
    if (v6 == v17)
      goto LABEL_69;
  }
  if (v17 >= v6)
    goto LABEL_69;
  v20 = (v6 - 1);
  while (1)
  {
    if (v17 < v20)
    {
      v21 = v6 <= (int)v17 + 1
          ? (WTF::MediaTime *)WTF::MediaTime::zeroTime(v19)
          : (WTF *)((char *)v8 + 32 * (v17 + 1));
      v73 = *(_OWORD *)v21;
      if (v6 <= v17)
      {
        v23 = (uint64_t *)WTF::MediaTime::zeroTime(v21);
        v24 = v23 + 1;
      }
      else
      {
        v22 = (char *)v8 + 32 * v17;
        v23 = (uint64_t *)(v22 + 16);
        v24 = (uint64_t *)(v22 + 24);
      }
      v25 = *v24;
      v70 = *v23;
      v71 = v25;
      *(_QWORD *)&v74 = WTF::MediaTime::operator-();
      *((_QWORD *)&v74 + 1) = v26;
      v69 = *((_OWORD *)this[19] + 8);
      v19 = (WTF::MediaTime *)WTF::MediaTime::compare((WTF::MediaTime *)&v74, (const WTF::MediaTime *)&v69);
      if ((_DWORD)v19 == 1)
        break;
    }
    if (v20 == v17)
    {
      v68 = *((_OWORD *)v8 + 2 * v20 + 1);
      v19 = (WTF::MediaTime *)WTF::MediaTime::compare((WTF::MediaTime *)&v68, (const WTF::MediaTime *)v72);
      if ((_DWORD)v19 == 1)
        goto LABEL_41;
    }
    if (v6 == ++v17)
      goto LABEL_68;
  }
  LODWORD(v20) = v17;
LABEL_41:
  if (v6 <= v20)
  {
    v29 = (PAL **)WTF::MediaTime::zeroTime(v19);
    v30 = (uint64_t *)(v29 + 1);
  }
  else
  {
    v28 = (char *)v8 + 32 * v20;
    v29 = (PAL **)(v28 + 16);
    v30 = (uint64_t *)(v28 + 24);
  }
  v31 = *v30;
  v32 = *v29;
  *(_QWORD *)&v74 = v32;
  *((_QWORD *)&v74 + 1) = v31;
  v33 = (void *)MEMORY[0x1E0CB3B18];
  if ((v31 & 0x2000000000) != 0)
  {
    WTF::MediaTime::toDouble((WTF::MediaTime *)&v74);
    PAL::softLinkCoreMediaCMTimeMakeWithSeconds((PAL *)DWORD2(v74), v35, v34);
  }
  else
  {
    PAL::softLinkCoreMediaCMTimeMake(v32, v31, v27);
  }
  v67 = v67 & 0xFFFFFFFE | BYTE12(v74) & 1 | BYTE12(v74) & 0xE;
  v75[0] = objc_msgSend(v33, "valueWithCMTime:", v66);
  v36 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v75, 1);
  v37 = (*((uint64_t (**)(id *))*this + 162))(this);
  v39 = v38;
  v40 = this[62];
  v41 = this[24];
  v58[0] = MEMORY[0x1E0C809B0];
  v58[1] = 3321888768;
  v58[2] = ___ZN7WebCore36MediaPlayerPrivateMediaSourceAVFObjC15bufferedChangedEv_block_invoke;
  v58[3] = &__block_descriptor_96_e8_32c77_ZTSKZN7WebCore36MediaPlayerPrivateMediaSourceAVFObjC15bufferedChangedEvE3__0_e5_v8__0l;
  v42 = (uint64_t)this[6];
  if (v42)
    goto LABEL_77;
  v42 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v42 = 1;
  *(_QWORD *)(v42 + 8) = this;
  v44 = (unsigned int *)this[6];
  this[6] = (id)v42;
  if (!v44)
    goto LABEL_77;
  do
  {
    v45 = __ldaxr(v44);
    v46 = v45 - 1;
  }
  while (__stlxr(v46, v44));
  if (!v46)
  {
    atomic_store(1u, v44);
    WTF::fastFree((WTF *)v44, v43);
  }
  v42 = (uint64_t)this[6];
  if (v42)
  {
LABEL_77:
    do
      v47 = __ldaxr((unsigned int *)v42);
    while (__stlxr(v47 + 1, (unsigned int *)v42));
    *(_QWORD *)&v73 = v74;
    *(_QWORD *)((char *)&v73 + 5) = *(_QWORD *)((char *)&v74 + 5);
    do
      v48 = __ldaxr((unsigned int *)v42);
    while (__stlxr(v48 + 1, (unsigned int *)v42));
    v49 = 0;
  }
  else
  {
    *(_QWORD *)&v73 = v74;
    *(_QWORD *)((char *)&v73 + 5) = *(_QWORD *)((char *)&v74 + 5);
    v49 = 1;
  }
  v59 = (WTF *)v42;
  v60 = this;
  v61 = v37;
  v62 = v39;
  v63 = "bufferedChanged";
  v64 = v40;
  v65[0] = v73;
  *(_QWORD *)((char *)v65 + 5) = *(_QWORD *)((char *)&v73 + 5);
  v50 = (void *)objc_msgSend(v41, "addBoundaryTimeObserverForTimes:queue:usingBlock:", v36, MEMORY[0x1E0C80D38], v58);
  v51 = v50;
  if (v50)
    CFRetain(v50);
  v52 = this[31];
  this[31] = v51;
  if (v52)
    CFRelease(v52);
  if ((v49 & 1) == 0)
  {
    do
    {
      v53 = __ldaxr((unsigned int *)v42);
      v54 = v53 - 1;
    }
    while (__stlxr(v54, (unsigned int *)v42));
    if (!v54)
    {
      atomic_store(1u, (unsigned int *)v42);
      WTF::fastFree((WTF *)v42, v16);
    }
  }
  v55 = (unsigned int *)v59;
  v59 = 0;
  if (!v55)
    goto LABEL_68;
  do
  {
    v56 = __ldaxr(v55);
    v57 = v56 - 1;
  }
  while (__stlxr(v57, v55));
  if (v57)
  {
LABEL_68:
    if (!v8)
      return;
    goto LABEL_69;
  }
  atomic_store(1u, v55);
  WTF::fastFree((WTF *)v55, v16);
  if (v8)
LABEL_69:
    WTF::fastFree(v8, v16);
}

void sub_19477FD80(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF *a14)
{
  WTF *v14;

  if (v14)
    WTF::fastFree(v14, a2);
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN7WebCore36MediaPlayerPrivateMediaSourceAVFObjC15bufferedChangedEv_block_invoke(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  WebCore::MediaSourcePrivate *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  double v15;
  int v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  int v21;
  _BYTE v22[16];
  _QWORD v23[2];
  __int128 v24;
  const char *v25;
  uint64_t v26;

  v1 = *(_QWORD *)(result + 32);
  if (v1)
  {
    if (*(_QWORD *)(v1 + 8))
    {
      v2 = result;
      v3 = *(_QWORD **)(result + 40);
      v4 = (WebCore::MediaSourcePrivate *)v3[19];
      v24 = xmmword_1968A1610;
      result = WebCore::MediaSourcePrivate::hasFutureTime(v4, (const WTF::MediaTime *)(v2 + 80), (const WTF::MediaTime *)&v24);
      if ((result & 1) == 0)
      {
        v23[0] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v2 + 32) + 8) + 352))(*(_QWORD *)(*(_QWORD *)(v2 + 32) + 8));
        v23[1] = v5;
        if (*(_BYTE *)(v3[61] + 12))
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [38],WTF::MediaTime>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)(v2 + 48), "boundary time observer called, now = ", (WTF::MediaTime *)v23);
        *(_QWORD *)&v24 = (*(uint64_t (**)(_QWORD *))(*v3 + 336))(v3);
        *((_QWORD *)&v24 + 1) = v6;
        if (!WTF::MediaTime::compare((WTF::MediaTime *)(v2 + 80), (const WTF::MediaTime *)&v24))
        {
          v8 = *(_QWORD *)(v2 + 32);
          if (v8)
            v9 = *(_QWORD *)(v8 + 8);
          else
            v9 = 0;
          v22[0] = 0;
          v22[8] = 0;
          v10 = *(_QWORD *)(v9 + 488);
          v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 1296))(v9);
          v12 = *(_QWORD *)(v9 + 496);
          *(_QWORD *)&v24 = v11;
          *((_QWORD *)&v24 + 1) = v13;
          v25 = "pauseInternal";
          v26 = v12;
          if (*(_BYTE *)(v10 + 12))
            WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)&v24);
          *(_BYTE *)(v9 + 448) = 0;
          WebCore::MediaPlayerPrivateMediaSourceAVFObjC::setSynchronizerRate(v9, (WTF::MonotonicTime *)v22, 0.0);
        }
        v14 = (void *)v3[24];
        if ((*(_BYTE *)(v2 + 92) & 0x20) != 0)
        {
          WTF::MediaTime::toDouble((WTF::MediaTime *)(v2 + 80));
          PAL::softLinkCoreMediaCMTimeMakeWithSeconds((PAL *)*(unsigned int *)(v2 + 88), v17, v16);
        }
        else
        {
          PAL::softLinkCoreMediaCMTimeMake(*(PAL **)(v2 + 80), *(unsigned int *)(v2 + 88), v7);
        }
        HIDWORD(v24) = HIDWORD(v24) & 0xFFFFFFFE | *(_BYTE *)(v2 + 92) & 1 | *(_BYTE *)(v2 + 92) & 0xE;
        LODWORD(v15) = 0;
        result = objc_msgSend(v14, "setRate:time:", &v24, v15);
        v18 = v3[16];
        if (v18)
        {
          v19 = v3[17];
          if (__ldaxr((unsigned __int8 *)v18))
          {
            __clrex();
          }
          else if (!__stxr(1u, (unsigned __int8 *)v18))
          {
            goto LABEL_21;
          }
          result = MEMORY[0x19AEA534C](v18);
LABEL_21:
          if (*(_QWORD *)(v18 + 24))
            ++*(_QWORD *)(v18 + 8);
          else
            v19 = 0;
          v21 = __ldxr((unsigned __int8 *)v18);
          if (v21 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v18))
            {
LABEL_29:
              if (v19)
              {
                (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v19 + 8) + 8) + 56))(*(_QWORD *)(*(_QWORD *)(v19 + 8) + 8));
                return (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v19);
              }
              return result;
            }
          }
          else
          {
            __clrex();
          }
          result = WTF::Lock::unlockSlow((WTF::Lock *)v18);
          goto LABEL_29;
        }
      }
    }
  }
  return result;
}

__n128 __copy_helper_block_e8_32c77_ZTSKZN7WebCore36MediaPlayerPrivateMediaSourceAVFObjC15bufferedChangedEvE3__0(uint64_t a1, uint64_t a2)
{
  unsigned int *v2;
  unsigned int v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *(unsigned int **)(a2 + 32);
  if (v2)
  {
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
  }
  *(_QWORD *)(a1 + 32) = v2;
  result = *(__n128 *)(a2 + 40);
  v5 = *(_OWORD *)(a2 + 56);
  v6 = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 85) = *(_QWORD *)(a2 + 85);
  *(_OWORD *)(a1 + 72) = v6;
  *(_OWORD *)(a1 + 56) = v5;
  *(__n128 *)(a1 + 40) = result;
  return result;
}

unsigned int *__destroy_helper_block_e8_32c77_ZTSKZN7WebCore36MediaPlayerPrivateMediaSourceAVFObjC15bufferedChangedEvE3__0(uint64_t a1, void *a2)
{
  unsigned int *result;
  unsigned int v4;
  unsigned int v5;

  result = *(unsigned int **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr(result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, result));
    if (!v5)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

uint64_t WebCore::MediaPlayerPrivateMediaSourceAVFObjC::didLoadingProgress(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this)
{
  uint64_t v1;

  v1 = *((unsigned __int8 *)this + 456);
  *((_BYTE *)this + 456) = 0;
  return v1;
}

void WebCore::MediaPlayerPrivateMediaSourceAVFObjC::nativeImageForCurrentTime(WebCore **this@<X0>, WebCore **a2@<X8>)
{
  WebCore *v4;
  uint64_t v5;
  int v7;

  WebCore::MediaPlayerPrivateMediaSourceAVFObjC::updateLastImage(this);
  v4 = this[34];
  if (!v4)
    goto LABEL_11;
  v5 = *((_QWORD *)v4 + 1);
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v5);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v5))
    goto LABEL_5;
LABEL_6:
  ++*(_QWORD *)(v5 + 8);
  v7 = __ldxr((unsigned __int8 *)v5);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v5))
      goto LABEL_11;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v5);
LABEL_11:
  *a2 = v4;
}

void WebCore::MediaPlayerPrivateMediaSourceAVFObjC::updateLastImage(WebCore **this)
{
  WebCore *v2;
  WebCore::PixelBufferConformerCV *v3;
  uint64_t v4;
  void *v5;
  const void *v6;
  WTF *v7;
  const void *v8;
  uint64_t IdentifierInternal;
  void *v10;
  CGImage *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  WebCore *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  int v22;
  uint64_t v23;
  CGImageRef image;
  uint64_t v25;
  _QWORD v26[2];

  v26[1] = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 536))
  {
    if (!WebCore::MediaPlayerPrivateMediaSourceAVFObjC::updateLastPixelBuffer((WebCore::MediaPlayerPrivateMediaSourceAVFObjC *)this))
      return;
LABEL_6:
    v3 = this[35];
    if (!v3)
    {
      if (WebCore::get_CoreVideo_kCVPixelBufferPixelFormatTypeKey(void)::once != -1)
        dispatch_once(&WebCore::get_CoreVideo_kCVPixelBufferPixelFormatTypeKey(void)::once, &__block_literal_global_13_3);
      v25 = WebCore::get_CoreVideo_kCVPixelBufferPixelFormatTypeKey(void)::constantCoreVideokCVPixelBufferPixelFormatTypeKey;
      v26[0] = &unk_1E349D6D8;
      v4 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v26, &v25, 1);
      v3 = (WebCore::PixelBufferConformerCV *)WTF::fastMalloc((WTF *)8);
      *(_QWORD *)v3 = 0;
      image = 0;
      WebCore::softLinkVideoToolboxVTPixelBufferConformerCreateWithAttributes(*MEMORY[0x1E0C9AE00], v4, &image);
      v6 = *(const void **)v3;
      *(_QWORD *)v3 = image;
      if (v6)
        CFRelease(v6);
      v7 = this[35];
      this[35] = v3;
      if (v7)
      {
        v8 = *(const void **)v7;
        *(_QWORD *)v7 = 0;
        if (v8)
          CFRelease(v8);
        WTF::fastFree(v7, v5);
        v3 = this[35];
      }
    }
    WebCore::PixelBufferConformerCV::createImageFromPixelBuffer(v3, this[33], &image);
    if (WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::m_generationProtected)
    {
      __break(0xC471u);
      JUMPOUT(0x194780430);
    }
    IdentifierInternal = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
    v11 = image;
    if (image)
    {
      v12 = IdentifierInternal;
      if (CGImageGetWidth(image) >> 31 || CGImageGetHeight(v11) >> 31)
      {
        v11 = 0;
      }
      else
      {
        v13 = (_QWORD *)operator new();
        image = 0;
        *v13 = &off_1E340E810;
        v13[1] = v11;
        v11 = (CGImage *)WTF::fastMalloc((WTF *)0x38);
        v14 = WTF::fastMalloc((WTF *)0x20);
        *(_BYTE *)v14 = 0;
        *(_OWORD *)(v14 + 8) = xmmword_19689B170;
        *(_QWORD *)(v14 + 24) = v11;
        *((_QWORD *)v11 + 2) = 0;
        *((_QWORD *)v11 + 3) = 0;
        *((_QWORD *)v11 + 4) = v12;
        *((_QWORD *)v11 + 5) = 1;
        *(_QWORD *)v11 = off_1E340E858;
        *((_QWORD *)v11 + 1) = v14;
        *((_QWORD *)v11 + 6) = v13;
      }
    }
    v15 = this[34];
    this[34] = v11;
    if (!v15)
      goto LABEL_37;
    v16 = *((_QWORD *)v15 + 1);
    if (__ldaxr((unsigned __int8 *)v16))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v16))
    {
      goto LABEL_25;
    }
    MEMORY[0x19AEA534C](v16);
LABEL_25:
    v18 = *(_QWORD *)(v16 + 8);
    v19 = v18 - 1;
    *(_QWORD *)(v16 + 8) = v18 - 1;
    if (v18 == 1)
    {
      v23 = *(_QWORD *)(v16 + 16);
      v20 = *(_QWORD *)(v16 + 24);
      *(_QWORD *)(v16 + 24) = 0;
      v21 = v23 != 0;
    }
    else
    {
      v20 = 0;
      v21 = 1;
    }
    v22 = __ldxr((unsigned __int8 *)v16);
    if (v22 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v16))
      {
        if (!v19)
          goto LABEL_33;
        goto LABEL_37;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v16);
    if (!v19)
    {
LABEL_33:
      if (v20)
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
      if (!v21)
        WTF::fastFree((WTF *)v16, v10);
    }
LABEL_37:
    if (image)
      CFRelease(image);
    return;
  }
  if (this[33])
  {
    v2 = this[65];
    if (v2 != this[81])
    {
      this[81] = v2;
      goto LABEL_6;
    }
  }
}

void sub_19478046C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf)
{
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::MediaPlayerPrivateMediaSourceAVFObjC::updateLastPixelBuffer(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this)
{
  int v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  const void *v11;
  uint64_t v12;
  int v14;
  uint64_t v15;
  __CVBuffer *v16;
  CFTypeRef v17;
  const void *v18;
  uint64_t IOSurface;
  CFTypeRef v20;
  CFTypeRef cf[2];
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;

  if (byte_1ECE812CA == 1)
  {
    v2 = byte_1ECE812C9 != 0;
  }
  else
  {
    v2 = objc_msgSend((id)PAL::getAVSampleBufferDisplayLayerClass(this), "instancesRespondToSelector:", sel_copyDisplayedPixelBuffer);
    byte_1ECE812C9 = v2;
    byte_1ECE812CA = 1;
  }
  if (WebCore::s_mediaSourceInlinePaintingEnabled)
    v3 = v2 == 0;
  else
    v3 = 1;
  if (v3 || (v4 = objc_msgSend(*((id *)this + 21), "copyDisplayedPixelBuffer")) == 0)
  {
    if (*((_QWORD *)this + 21))
    {
      return 0;
    }
    else
    {
      v12 = *((_QWORD *)this + 36);
      if (v12)
      {
        v14 = 2 * (*((_QWORD *)this + 33) == 0);
        v22 = (*(uint64_t (**)(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *))(*(_QWORD *)this + 352))(this);
        v23 = v15;
        WebCore::WebCoreDecompressionSession::imageForTime(v12, (opaqueCMBufferQueue *)&v22, v14, cf);
        v17 = cf[0];
        v12 = cf[0] != 0;
        if (cf[0])
        {
          cf[0] = 0;
          v18 = (const void *)*((_QWORD *)this + 33);
          *((_QWORD *)this + 33) = v17;
          if (v18)
            CFRelease(v18);
          if (*((_DWORD *)this + 164))
          {
            IOSurface = WebCore::softLinkCoreVideoCVPixelBufferGetIOSurface(*((WebCore **)this + 33), v16);
            if (IOSurface)
              WebCore::IOSurface::setOwnershipIdentity(IOSurface, (int *)this + 164);
          }
          v20 = cf[0];
          cf[0] = 0;
          if (v20)
            CFRelease(v20);
        }
      }
    }
  }
  else
  {
    v5 = v4;
    v6 = *((_QWORD *)this + 61);
    v7 = (*(uint64_t (**)(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *))(*(_QWORD *)this + 1296))(this);
    v8 = *((_QWORD *)this + 62);
    v22 = v7;
    v23 = v9;
    v24 = "updateLastPixelBuffer";
    v25 = v8;
    cf[0] = (CFTypeRef)(*(uint64_t (**)(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *))(*(_QWORD *)this
                                                                                                  + 352))(this);
    cf[1] = v10;
    if (*(_BYTE *)(v6 + 12) && WebCore::LogMediaSource && byte_1ECE7CE70 >= 3u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [39],WTF::MediaTime>((uint64_t)&WebCore::LogMediaSource, 3u, (WTF::Logger::LogSiteIdentifier *)&v22, "displayed pixelbuffer copied for time ", (WTF::MediaTime *)cf);
    v11 = (const void *)*((_QWORD *)this + 33);
    *((_QWORD *)this + 33) = v5;
    if (v11)
      CFRelease(v11);
    return 1;
  }
  return v12;
}

void sub_194780678(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::MediaPlayerPrivateMediaSourceAVFObjC::paint(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 656))(a1);
}

uint64_t WebCore::MediaPlayerPrivateMediaSourceAVFObjC::paintCurrentFrameInContext(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this, WebCore::GraphicsContext *a2, const WebCore::FloatRect *a3)
{
  uint64_t result;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  int v16;
  uint64_t v17;
  float32x2_t v18;
  float v19;
  float v20;
  uint64_t v21;

  result = (*(uint64_t (**)(WebCore::GraphicsContext *))(*(_QWORD *)a2 + 40))(a2);
  if ((result & 1) != 0)
    return result;
  result = (uint64_t)(*(_QWORD *(**)(uint64_t *__return_ptr, WebCore::MediaPlayerPrivateMediaSourceAVFObjC *))(*(_QWORD *)this + 672))(&v21, this);
  if (!v21)
    return result;
  (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 96))(a2, 1);
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v21 + 48) + 24))(*(_QWORD *)(v21 + 48));
  v18 = 0;
  v19 = (float)(int)v7;
  v20 = (float)SHIDWORD(v7);
  WebCore::GraphicsContext::drawNativeImage(a2, v21, (uint64_t)a3, &v18, 4641);
  result = (*(uint64_t (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 104))(a2, 1);
  v9 = v21;
  v21 = 0;
  if (!v9)
    return result;
  v10 = *(_QWORD *)(v9 + 8);
  if (__ldaxr((unsigned __int8 *)v10))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v10))
  {
    goto LABEL_8;
  }
  result = MEMORY[0x19AEA534C](v10);
LABEL_8:
  v12 = *(_QWORD *)(v10 + 8);
  v13 = v12 - 1;
  *(_QWORD *)(v10 + 8) = v12 - 1;
  if (v12 == 1)
  {
    v17 = *(_QWORD *)(v10 + 16);
    v14 = *(_QWORD *)(v10 + 24);
    *(_QWORD *)(v10 + 24) = 0;
    v15 = v17 != 0;
  }
  else
  {
    v14 = 0;
    v15 = 1;
  }
  v16 = __ldxr((unsigned __int8 *)v10);
  if (v16 != 1)
  {
    __clrex();
LABEL_15:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v10);
    if (v13)
      return result;
    goto LABEL_16;
  }
  if (__stlxr(0, (unsigned __int8 *)v10))
    goto LABEL_15;
  if (v13)
    return result;
LABEL_16:
  if (v14)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  if (!v15)
    return WTF::fastFree((WTF *)v10, v8);
  return result;
}

void sub_194780830(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  int v19;
  uint64_t v20;

  if (!a12)
    goto LABEL_19;
  v13 = *(_QWORD *)(a12 + 8);
  if (__ldaxr((unsigned __int8 *)v13))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v13))
  {
LABEL_7:
    v15 = *(_QWORD *)(v13 + 8);
    v16 = v15 - 1;
    *(_QWORD *)(v13 + 8) = v15 - 1;
    if (v15 == 1)
    {
      v20 = *(_QWORD *)(v13 + 16);
      v17 = *(_QWORD *)(v13 + 24);
      *(_QWORD *)(v13 + 24) = 0;
      v18 = v20 != 0;
    }
    else
    {
      v17 = 0;
      v18 = 1;
    }
    v19 = __ldxr((unsigned __int8 *)v13);
    if (v19 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v13))
      {
LABEL_14:
        if (!v16)
        {
          if (v17)
            (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
          if (!v18)
            WTF::fastFree((WTF *)v13, a2);
        }
LABEL_19:
        _Unwind_Resume(exception_object);
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v13);
    goto LABEL_14;
  }
  MEMORY[0x19AEA534C](v13);
  goto LABEL_7;
}

void WebCore::MediaPlayerPrivateMediaSourceAVFObjC::videoFrameForCurrentTime(WebCore **this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WebCore *v7;
  WebCore *v8;
  _BYTE v9[10];
  WebCore *v10;
  uint64_t v11;

  if (!*((_BYTE *)this + 536))
    WebCore::MediaPlayerPrivateMediaSourceAVFObjC::updateLastPixelBuffer((WebCore::MediaPlayerPrivateMediaSourceAVFObjC *)this);
  if (this[33])
  {
    v4 = (*((uint64_t (**)(WebCore **))*this + 44))(this);
    v6 = v5;
    v7 = this[33];
    v10 = v7;
    if (v7)
      CFRetain(v7);
    v9[0] = 0;
    v9[8] = 0;
    WebCore::VideoFrameCV::create(v4, v6, 0, 0, &v10, (uint64_t)v9, &v11);
    v8 = v10;
    *a2 = v11;
    if (v8)
      CFRelease(v8);
  }
  else
  {
    *a2 = 0;
  }
}

void sub_194780994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

CFTypeRef WebCore::MediaPlayerPrivateMediaSourceAVFObjC::colorSpace@<X0>(WebCore **this@<X0>, _QWORD *a2@<X8>)
{
  WebCore *v4;
  CFTypeRef result;
  unint64_t v6;
  char v7;
  char **v8;
  char *v9;

  WebCore::MediaPlayerPrivateMediaSourceAVFObjC::updateLastImage(this);
  v4 = this[34];
  if (v4)
    return (CFTypeRef)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v4 + 6) + 40))(*((_QWORD *)v4 + 6));
  v6 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
  if (v6 != -1)
  {
    v9 = &v7;
    v8 = &v9;
    std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v8, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
  }
  result = (CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
  *a2 = WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
  if (result)
    return CFRetain(result);
  return result;
}

uint64_t WebCore::MediaPlayerPrivateMediaSourceAVFObjC::hasAvailableVideoFrame(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this)
{
  return *((unsigned __int8 *)this + 457);
}

uint64_t WebCore::MediaPlayerPrivateMediaSourceAVFObjC::supportsAcceleratedRendering(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this)
{
  return 1;
}

uint64_t WebCore::MediaPlayerPrivateMediaSourceAVFObjC::shouldEnsureLayerOrVideoRenderer(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  WebCore::MediaSourcePrivateAVFObjC *v6;
  uint64_t v7;
  uint64_t v8;
  int v10;

  v2 = *((_QWORD *)this + 19);
  if (v2 && *(_QWORD *)(v2 + 216))
    return 1;
  if (byte_1ECE812CA == 1)
  {
    v4 = byte_1ECE812C9 != 0;
  }
  else
  {
    v4 = objc_msgSend((id)PAL::getAVSampleBufferDisplayLayerClass(this), "instancesRespondToSelector:", sel_copyDisplayedPixelBuffer);
    byte_1ECE812C9 = v4;
    byte_1ECE812CA = 1;
  }
  if (WebCore::s_mediaSourceInlinePaintingEnabled)
    v5 = v4 == 0;
  else
    v5 = 1;
  if (v5)
    return 0;
  v6 = (WebCore::MediaSourcePrivateAVFObjC *)*((_QWORD *)this + 19);
  if (!v6 || (WebCore::MediaSourcePrivateAVFObjC::needsVideoLayer(v6) & 1) == 0)
  {
    v7 = *((_QWORD *)this + 16);
    if (!v7)
      return 0;
    v8 = *((_QWORD *)this + 17);
    if (__ldaxr((unsigned __int8 *)v7))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v7))
    {
      goto LABEL_17;
    }
    MEMORY[0x19AEA534C](v7);
LABEL_17:
    if (*(_QWORD *)(v7 + 24))
      ++*(_QWORD *)(v7 + 8);
    else
      v8 = 0;
    v10 = __ldxr((unsigned __int8 *)v7);
    if (v10 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v7))
      {
LABEL_25:
        if (v8)
        {
          v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v8 + 8) + 8) + 136))(*(_QWORD *)(*(_QWORD *)(v8 + 8) + 8));
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v8);
          return v3;
        }
        return 0;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v7);
    goto LABEL_25;
  }
  return 1;
}

void sub_194780BC0(_Unwind_Exception *a1)
{
  unsigned __int8 **v1;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v1);
  _Unwind_Resume(a1);
}

void WebCore::MediaPlayerPrivateMediaSourceAVFObjC::setPresentationSize(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this, const WebCore::IntSize *a2)
{
  BOOL v2;

  if (*((_QWORD *)this + 21))
    v2 = 1;
  else
    v2 = *(_DWORD *)a2 < 1;
  if (!v2 && *((_DWORD *)a2 + 1) >= 1)
  {
    if (WebCore::MediaPlayerPrivateMediaSourceAVFObjC::shouldEnsureLayerOrVideoRenderer(this))
    {
      WebCore::MediaPlayerPrivateMediaSourceAVFObjC::destroyDecompressionSession(this);
      WebCore::MediaPlayerPrivateMediaSourceAVFObjC::ensureLayerOrVideoRenderer((unsigned __int8 *)this);
    }
    else
    {
      WebCore::MediaPlayerPrivateMediaSourceAVFObjC::destroyLayerOrVideoRenderer(this);
      WebCore::MediaPlayerPrivateMediaSourceAVFObjC::ensureDecompressionSession(this);
    }
  }
}

void WebCore::MediaPlayerPrivateMediaSourceAVFObjC::setVideoLayerSizeFenced(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *a1, float *a2)
{
  if (!*((_QWORD *)a1 + 21) && *a2 > 0.0 && a2[1] > 0.0)
  {
    if (WebCore::MediaPlayerPrivateMediaSourceAVFObjC::shouldEnsureLayerOrVideoRenderer(a1))
    {
      WebCore::MediaPlayerPrivateMediaSourceAVFObjC::destroyDecompressionSession(a1);
      WebCore::MediaPlayerPrivateMediaSourceAVFObjC::ensureLayerOrVideoRenderer((unsigned __int8 *)a1);
    }
    else
    {
      WebCore::MediaPlayerPrivateMediaSourceAVFObjC::destroyLayerOrVideoRenderer(a1);
      WebCore::MediaPlayerPrivateMediaSourceAVFObjC::ensureDecompressionSession(a1);
    }
  }
}

void WebCore::MediaPlayerPrivateMediaSourceAVFObjC::acceleratedRenderingStateChanged(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this)
{
  if (WebCore::MediaPlayerPrivateMediaSourceAVFObjC::shouldEnsureLayerOrVideoRenderer(this))
  {
    WebCore::MediaPlayerPrivateMediaSourceAVFObjC::destroyDecompressionSession(this);
    WebCore::MediaPlayerPrivateMediaSourceAVFObjC::ensureLayerOrVideoRenderer((unsigned __int8 *)this);
  }
  else
  {
    WebCore::MediaPlayerPrivateMediaSourceAVFObjC::destroyLayerOrVideoRenderer(this);
    WebCore::MediaPlayerPrivateMediaSourceAVFObjC::ensureDecompressionSession(this);
  }
}

void WebCore::MediaPlayerPrivateMediaSourceAVFObjC::ensureLayerOrVideoRenderer(unsigned __int8 *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  PAL *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t AVFoundation_AVLayerVideoGravityResizeAspect;
  int v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  NSObject *v23;
  uint64_t v24;
  void *v25;
  char *v26;
  unsigned __int8 *v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  WTF::Logger *v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::Logger *v46;
  uint64_t v47;
  WTF::StringImpl **v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  int v54;
  WTF::StringImpl *v55;
  WebCore::SourceBufferPrivateAVFObjC *v56;
  uint64_t v57;
  uint64_t v58;
  int v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  int v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  int v72;
  uint64_t v73;
  const void *v74;
  _QWORD v75[4];
  WTF::Logger *v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  __int128 buf;
  const char *v85;
  WTF::StringImpl *v86;
  int v87;
  WTF::StringImpl *v88;
  int v89;
  WTF::StringImpl *v90;
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  if (!*((_QWORD *)a1 + 21))
  {
    v5 = *((_QWORD *)a1 + 61);
    v6 = (PAL *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)a1 + 1296))(a1);
    v7 = (WTF::StringImpl *)*((_QWORD *)a1 + 62);
    *(_QWORD *)&buf = v6;
    *((_QWORD *)&buf + 1) = v8;
    v85 = "ensureLayer";
    v86 = v7;
    if (*(_BYTE *)(v5 + 12))
      v6 = (PAL *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)&buf);
    v9 = (void *)objc_msgSend(objc_alloc((Class)PAL::getAVSampleBufferDisplayLayerClass(v6)), "init");
    v10 = (void *)*((_QWORD *)a1 + 21);
    *((_QWORD *)a1 + 21) = v9;
    if (v10)
    {
      CFRelease(v10);
      v9 = (void *)*((_QWORD *)a1 + 21);
    }
    if (v9)
    {
      if (a1[660])
        AVFoundation_AVLayerVideoGravityResizeAspect = PAL::get_AVFoundation_AVLayerVideoGravityResizeAspect((PAL *)v10);
      else
        AVFoundation_AVLayerVideoGravityResizeAspect = PAL::get_AVFoundation_AVLayerVideoGravityResize((PAL *)v10);
      objc_msgSend(v9, "setVideoGravity:", AVFoundation_AVLayerVideoGravityResizeAspect);
      v68 = (void *)*((_QWORD *)a1 + 21);
      objc_msgSend(v68, "setPreventsDisplaySleepDuringVideoPlayback:", 0);
      if ((objc_opt_respondsToSelector() & 1) != 0)
        objc_msgSend(v68, "setPreventsAutomaticBackgroundingDuringVideoPlayback:", 0);
      objc_msgSend(*((id *)a1 + 24), "addRenderer:", v68);
      v69 = *((_QWORD *)a1 + 16);
      if (v69)
      {
        v70 = *((_QWORD *)a1 + 17);
        if (__ldaxr((unsigned __int8 *)v69))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v69))
        {
          goto LABEL_144;
        }
        MEMORY[0x19AEA534C](v69);
LABEL_144:
        if (*(_QWORD *)(v69 + 24))
          ++*(_QWORD *)(v69 + 8);
        else
          v70 = 0;
        v72 = __ldxr((unsigned __int8 *)v69);
        if (v72 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v69))
          {
LABEL_152:
            if (v70)
            {
              if ((objc_opt_respondsToSelector() & 1) != 0)
                objc_msgSend(*((id *)a1 + 21), "setToneMapToStandardDynamicRange:", (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v70 + 8) + 8) + 616))(*(_QWORD *)(*(_QWORD *)(v70 + 8) + 8)));
              WebCore::VideoLayerManagerObjC::setVideoLayer(*((_QWORD *)a1 + 63), *((const void **)a1 + 21), (float)*(int *)(v70 + 200), (float)*(int *)(v70 + 204));
              WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v70);
            }
            goto LABEL_2;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v69);
        goto LABEL_152;
      }
    }
  }
LABEL_2:
  v2 = *((_QWORD *)a1 + 19);
  if (!v2)
    goto LABEL_19;
  v3 = *(_QWORD *)(v2 + 8);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_14;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_14:
  ++*(_QWORD *)(v3 + 8);
  v12 = __ldxr((unsigned __int8 *)v3);
  if (v12 != 1)
  {
    __clrex();
    goto LABEL_18;
  }
  if (__stlxr(0, (unsigned __int8 *)v3))
LABEL_18:
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
LABEL_19:
  v13 = (const void *)*((_QWORD *)a1 + 21);
  if (v13)
  {
    CFRetain(*((CFTypeRef *)a1 + 21));
    v14 = *((_QWORD *)a1 + 61);
    v15 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)a1 + 1296))(a1);
    v16 = *((_QWORD *)a1 + 62);
    v75[0] = v15;
    v75[1] = v17;
    v75[2] = "ensureLayerOrVideoRenderer";
    v75[3] = v16;
    if (*(_BYTE *)(v14 + 12))
    {
      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v75);
      WTF::String::number(0);
      WTF::String::String((WTF::String *)&v78, ", renderer=");
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v18 = (WTF::StringImpl *)buf;
      v76 = v79;
      v83 = v78;
      *(_QWORD *)&buf = v80;
      v82 = v18;
      WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v76, (uint64_t *)&v83, (uint64_t *)&v82, &v81);
      if (!v81)
      {
        __break(0xC471u);
        return;
      }
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, v19);
        else
          *(_DWORD *)v18 -= 2;
      }
      v20 = v78;
      v78 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, v19);
        else
          *(_DWORD *)v20 -= 2;
      }
      v21 = v79;
      v79 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, v19);
        else
          *(_DWORD *)v21 -= 2;
      }
      v22 = v80;
      v80 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, v19);
        else
          *(_DWORD *)v22 -= 2;
      }
      v23 = qword_1ECE7CE80;
      v24 = os_log_type_enabled((os_log_t)qword_1ECE7CE80, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v24)
      {
        WTF::String::utf8();
        v26 = v76 ? (char *)v76 + 16 : 0;
        LODWORD(buf) = 136446210;
        *(_QWORD *)((char *)&buf + 4) = v26;
        _os_log_impl(&dword_1940B8000, v23, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
        v24 = (uint64_t)v76;
        v76 = 0;
        if (v24)
        {
          if (*(_DWORD *)v24 == 1)
            v24 = WTF::fastFree((WTF *)v24, v25);
          else
            --*(_DWORD *)v24;
        }
      }
      if (WebCore::LogMediaSource)
      {
        v27 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
        while (1)
        {
          v28 = *v27;
          if ((v28 & 1) != 0)
            break;
          v29 = __ldaxr(v27);
          if (v29 == v28)
          {
            if (!__stxr(v28 | 1, v27))
            {
              v74 = v13;
              v35 = WTF::Logger::observers((WTF::Logger *)v24);
              v36 = *(unsigned int *)(v35 + 12);
              if ((_DWORD)v36)
              {
                v37 = *(uint64_t **)v35;
                v38 = *(_QWORD *)v35 + 8 * v36;
                do
                {
                  v39 = *v37;
                  LODWORD(buf) = 0;
                  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v75);
                  LODWORD(v85) = 0;
                  WTF::String::number(0);
                  v87 = 0;
                  WTF::String::String((WTF::String *)&v88, ", renderer=");
                  v89 = 0;
                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                  v90 = v83;
                  v76 = 0;
                  v77 = 0;
                  v40 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x40);
                  LODWORD(v77) = 4;
                  v76 = v40;
                  v41 = HIDWORD(v77);
                  *((_DWORD *)v40 + 4 * HIDWORD(v77)) = buf;
                  v42 = *((_QWORD *)&buf + 1);
                  if (*((_QWORD *)&buf + 1))
                    **((_DWORD **)&buf + 1) += 2;
                  *((_QWORD *)v40 + 2 * v41 + 1) = v42;
                  *((_DWORD *)v40 + 4 * (v41 + 1)) = (_DWORD)v85;
                  v43 = v86;
                  if (v86)
                    *(_DWORD *)v86 += 2;
                  *((_QWORD *)v40 + 2 * (v41 + 1) + 1) = v43;
                  *((_DWORD *)v40 + 4 * (v41 + 2)) = v87;
                  v44 = v88;
                  if (v88)
                    *(_DWORD *)v88 += 2;
                  *((_QWORD *)v40 + 2 * (v41 + 2) + 1) = v44;
                  *((_DWORD *)v40 + 4 * (v41 + 3)) = v89;
                  v45 = v90;
                  if (v90)
                    *(_DWORD *)v90 += 2;
                  *((_QWORD *)v40 + 2 * (v41 + 3) + 1) = v45;
                  HIDWORD(v77) = v41 + 4;
                  (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v39 + 16))(v39, &WebCore::LogMediaSource, 0, &v76);
                  v46 = v76;
                  if (HIDWORD(v77))
                  {
                    v47 = 16 * HIDWORD(v77);
                    v48 = (WTF::StringImpl **)((char *)v76 + 8);
                    do
                    {
                      v49 = *v48;
                      *v48 = 0;
                      if (v49)
                      {
                        if (*(_DWORD *)v49 == 2)
                          WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v25);
                        else
                          *(_DWORD *)v49 -= 2;
                      }
                      v48 += 2;
                      v47 -= 16;
                    }
                    while (v47);
                    v46 = v76;
                  }
                  if (v46)
                  {
                    v76 = 0;
                    LODWORD(v77) = 0;
                    WTF::fastFree(v46, v25);
                  }
                  v50 = v90;
                  v90 = 0;
                  if (v50)
                  {
                    if (*(_DWORD *)v50 == 2)
                      WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v25);
                    else
                      *(_DWORD *)v50 -= 2;
                  }
                  v51 = v88;
                  v88 = 0;
                  if (v51)
                  {
                    if (*(_DWORD *)v51 == 2)
                      WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v25);
                    else
                      *(_DWORD *)v51 -= 2;
                  }
                  v52 = v86;
                  v86 = 0;
                  if (v52)
                  {
                    if (*(_DWORD *)v52 == 2)
                      WTF::StringImpl::destroy(v52, (WTF::StringImpl *)v25);
                    else
                      *(_DWORD *)v52 -= 2;
                  }
                  v53 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                  *((_QWORD *)&buf + 1) = 0;
                  if (v53)
                  {
                    if (*(_DWORD *)v53 == 2)
                      WTF::StringImpl::destroy(v53, (WTF::StringImpl *)v25);
                    else
                      *(_DWORD *)v53 -= 2;
                  }
                  ++v37;
                }
                while (v37 != (uint64_t *)v38);
              }
              v54 = __ldxr(v27);
              if (v54 == 1)
              {
                v13 = v74;
                if (!__stlxr(0, v27))
                  break;
              }
              else
              {
                __clrex();
                v13 = v74;
              }
              WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
              break;
            }
          }
          else
          {
            __clrex();
          }
        }
      }
      v55 = v81;
      v81 = 0;
      if (v55)
      {
        if (*(_DWORD *)v55 == 2)
        {
          WTF::StringImpl::destroy(v55, (WTF::StringImpl *)v25);
          if (!v2)
            goto LABEL_102;
          goto LABEL_100;
        }
        *(_DWORD *)v55 -= 2;
      }
    }
    if (!v2)
      goto LABEL_102;
LABEL_100:
    v56 = *(WebCore::SourceBufferPrivateAVFObjC **)(v2 + 208);
    if (v56)
      WebCore::SourceBufferPrivateAVFObjC::setVideoRenderer(v56, v13);
LABEL_102:
    v57 = *((_QWORD *)a1 + 16);
    if (!v57)
      goto LABEL_117;
    v58 = *((_QWORD *)a1 + 17);
    if (__ldaxr((unsigned __int8 *)v57))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v57))
    {
LABEL_107:
      if (*(_QWORD *)(v57 + 24))
        ++*(_QWORD *)(v57 + 8);
      else
        v58 = 0;
      v60 = __ldxr((unsigned __int8 *)v57);
      if (v60 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v57))
        {
          if (!v58)
            goto LABEL_117;
          goto LABEL_116;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v57);
      if (v58)
      {
LABEL_116:
        (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v58 + 8) + 8) + 144))(*(_QWORD *)(*(_QWORD *)(v58 + 8) + 8));
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v58);
      }
LABEL_117:
      CFRelease(v13);
      goto LABEL_118;
    }
    MEMORY[0x19AEA534C](v57);
    goto LABEL_107;
  }
  v30 = *((_QWORD *)a1 + 61);
  v31 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)a1 + 1296))(a1);
  v32 = (WTF::StringImpl *)*((_QWORD *)a1 + 62);
  *(_QWORD *)&buf = v31;
  *((_QWORD *)&buf + 1) = v33;
  v85 = "ensureLayerOrVideoRenderer";
  v86 = v32;
  if (*(_BYTE *)(v30 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [75]>((uint64_t)&WebCore::LogMediaSource, 1u, (WTF::Logger::LogSiteIdentifier *)&buf, "Failed to create AVSampleBufferDisplayLayer or AVSampleBufferVideoRenderer");
  if (v2)
    WebCore::MediaSourcePrivateAVFObjC::failedToCreateRenderer(v2, 1);
  WebCore::MediaPlayerPrivateMediaSourceAVFObjC::setNetworkState(a1, 6);
LABEL_118:
  if (!v2)
    return;
  v61 = *(_QWORD *)(v2 + 8);
  if (__ldaxr((unsigned __int8 *)v61))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v61))
  {
    goto LABEL_123;
  }
  MEMORY[0x19AEA534C](v61);
LABEL_123:
  v63 = *(_QWORD *)(v61 + 8);
  v64 = v63 - 1;
  *(_QWORD *)(v61 + 8) = v63 - 1;
  if (v63 == 1)
  {
    v73 = *(_QWORD *)(v61 + 16);
    v65 = *(_QWORD *)(v61 + 24);
    *(_QWORD *)(v61 + 24) = 0;
    v66 = v73 != 0;
  }
  else
  {
    v65 = 0;
    v66 = 1;
  }
  v67 = __ldxr((unsigned __int8 *)v61);
  if (v67 != 1)
  {
    __clrex();
LABEL_130:
    WTF::Lock::unlockSlow((WTF::Lock *)v61);
    if (v64)
      return;
    goto LABEL_131;
  }
  if (__stlxr(0, (unsigned __int8 *)v61))
    goto LABEL_130;
  if (v64)
    return;
LABEL_131:
  if (v65)
    (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
  if (!v66)
    WTF::fastFree((WTF *)v61, v34);
}

void sub_194781630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef cf, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF *a17, int a18, int a19, WTF::StringImpl *a20,WTF::StringImpl *a21,uint64_t a22,WTF::StringImpl *a23,uint64_t a24,uint64_t a25,uint64_t a26,WTF::StringImpl *a27,uint64_t a28,WTF::StringImpl *a29,uint64_t a30,WTF::StringImpl *a31,uint64_t a32,WTF::StringImpl *a33)
{
  unsigned __int8 **v33;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v33);
  _Unwind_Resume(a1);
}

void WebCore::MediaPlayerPrivateMediaSourceAVFObjC::destroyLayerOrVideoRenderer(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  int v6;
  WebCore::SourceBufferPrivateAVFObjC *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v18;
  uint64_t v19;

  WebCore::MediaPlayerPrivateMediaSourceAVFObjC::destroyLayer(this);
  v3 = *((_QWORD *)this + 19);
  if (!v3)
    goto LABEL_29;
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  ++*(_QWORD *)(v4 + 8);
  v6 = __ldxr((unsigned __int8 *)v4);
  if (v6 != 1)
  {
    __clrex();
    goto LABEL_10;
  }
  if (__stlxr(0, (unsigned __int8 *)v4))
LABEL_10:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
  v7 = *(WebCore::SourceBufferPrivateAVFObjC **)(v3 + 208);
  if (v7)
    WebCore::SourceBufferPrivateAVFObjC::setVideoRenderer(v7, 0);
  v8 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v8))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v8))
  {
    goto LABEL_17;
  }
  MEMORY[0x19AEA534C](v8);
LABEL_17:
  v10 = *(_QWORD *)(v8 + 8);
  v11 = v10 - 1;
  *(_QWORD *)(v8 + 8) = v10 - 1;
  if (v10 == 1)
  {
    v19 = *(_QWORD *)(v8 + 16);
    v12 = *(_QWORD *)(v8 + 24);
    *(_QWORD *)(v8 + 24) = 0;
    v13 = v19 != 0;
  }
  else
  {
    v12 = 0;
    v13 = 1;
  }
  v14 = __ldxr((unsigned __int8 *)v8);
  if (v14 != 1)
  {
    __clrex();
LABEL_24:
    WTF::Lock::unlockSlow((WTF::Lock *)v8);
    if (v11)
      goto LABEL_29;
    goto LABEL_25;
  }
  if (__stlxr(0, (unsigned __int8 *)v8))
    goto LABEL_24;
  if (v11)
    goto LABEL_29;
LABEL_25:
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  if (!v13)
    WTF::fastFree((WTF *)v8, v2);
LABEL_29:
  WebCore::MediaPlayerPrivateMediaSourceAVFObjC::setHasAvailableVideoFrame(this, 0);
  v15 = *((_QWORD *)this + 16);
  if (!v15)
    return;
  v16 = *((_QWORD *)this + 17);
  if (__ldaxr((unsigned __int8 *)v15))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v15))
  {
    goto LABEL_34;
  }
  MEMORY[0x19AEA534C](v15);
LABEL_34:
  if (*(_QWORD *)(v15 + 24))
    ++*(_QWORD *)(v15 + 8);
  else
    v16 = 0;
  v18 = __ldxr((unsigned __int8 *)v15);
  if (v18 != 1)
  {
    __clrex();
LABEL_42:
    WTF::Lock::unlockSlow((WTF::Lock *)v15);
    if (v16)
      goto LABEL_40;
    return;
  }
  if (__stlxr(0, (unsigned __int8 *)v15))
    goto LABEL_42;
  if (v16)
  {
LABEL_40:
    (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v16 + 8) + 8) + 144))(*(_QWORD *)(*(_QWORD *)(v16 + 8) + 8));
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v16);
  }
}

void sub_194781C40(_Unwind_Exception *a1)
{
  unsigned __int8 **v1;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v1);
  _Unwind_Resume(a1);
}

void WebCore::MediaPlayerPrivateMediaSourceAVFObjC::ensureDecompressionSession(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  unsigned __int8 **v8;
  unsigned __int8 *v9;
  uint64_t v11;
  uint64_t v12;
  WebCore::WebCoreDecompressionSession *v13;
  BOOL v14;
  int v15;
  WTF *v16;
  void *v17;
  WebCore::WebCoreDecompressionSession *v18;
  PAL *v19;
  dispatch_source_s *v20;
  dispatch_source_s *v21;
  uint64_t v22;
  WebCore::SourceBufferPrivate *v23;
  uint64_t v24;
  uint64_t v25;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;

  if (*((_QWORD *)this + 36))
    return;
  v2 = *((_QWORD *)this + 61);
  v3 = (*(uint64_t (**)(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *))(*(_QWORD *)this + 1296))(this);
  v4 = *((_QWORD *)this + 62);
  v29 = v3;
  v30 = v5;
  v31 = "ensureDecompressionSession";
  v32 = v4;
  if (*(_BYTE *)(v2 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)&v29);
  v6 = WTF::fastMalloc((WTF *)0x110);
  WebCore::WebCoreDecompressionSession::WebCoreDecompressionSession(v6, 0);
  v8 = (unsigned __int8 **)*((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = v6;
  if (v8)
  {
    v9 = *v8;
    if (__ldaxr(*v8))
    {
      __clrex();
    }
    else if (!__stxr(1u, v9))
    {
      goto LABEL_10;
    }
    MEMORY[0x19AEA534C](v9);
LABEL_10:
    v11 = *((_QWORD *)v9 + 1);
    v12 = v11 - 1;
    *((_QWORD *)v9 + 1) = v11 - 1;
    if (v11 == 1)
    {
      v28 = *((_QWORD *)v9 + 2);
      v13 = (WebCore::WebCoreDecompressionSession *)*((_QWORD *)v9 + 3);
      *((_QWORD *)v9 + 3) = 0;
      v14 = v28 != 0;
    }
    else
    {
      v13 = 0;
      v14 = 1;
    }
    v15 = __ldxr(v9);
    if (v15 == 1)
    {
      if (!__stlxr(0, v9))
      {
        if (v12)
          goto LABEL_22;
        goto LABEL_18;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v9);
    if (v12)
      goto LABEL_22;
LABEL_18:
    if (v13)
    {
      WebCore::WebCoreDecompressionSession::~WebCoreDecompressionSession(v13);
      WTF::fastFree(v16, v17);
    }
    if (!v14)
      WTF::fastFree((WTF *)v9, v7);
  }
LABEL_22:
  v18 = (WebCore::WebCoreDecompressionSession *)*((_QWORD *)this + 36);
  v19 = (PAL *)objc_msgSend(*((id *)this + 24), "timebase", v29, v30, v31, v32);
  WebCore::WebCoreDecompressionSession::setTimebase(v18, v19, v20);
  WTF::MachSendRight::MachSendRight((WTF::MachSendRight *)&v29, (WebCore::MediaPlayerPrivateMediaSourceAVFObjC *)((char *)this + 656));
  WTF::MachSendRight::operator=();
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v29);
  v22 = *((_QWORD *)this + 19);
  if (v22)
  {
    v23 = *(WebCore::SourceBufferPrivate **)(v22 + 208);
    if (v23)
      WebCore::SourceBufferPrivateAVFObjC::setDecompressionSession(v23, *((unsigned __int8 ***)this + 36), v21);
  }
  v24 = *((_QWORD *)this + 16);
  if (v24)
  {
    v25 = *((_QWORD *)this + 17);
    if (__ldaxr((unsigned __int8 *)v24))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v24))
    {
      goto LABEL_30;
    }
    MEMORY[0x19AEA534C](v24);
LABEL_30:
    if (*(_QWORD *)(v24 + 24))
      ++*(_QWORD *)(v24 + 8);
    else
      v25 = 0;
    v27 = __ldxr((unsigned __int8 *)v24);
    if (v27 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v24))
      {
LABEL_38:
        if (v25)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v25 + 8) + 8) + 144))(*(_QWORD *)(*(_QWORD *)(v25 + 8) + 8));
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v25);
        }
        return;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v24);
    goto LABEL_38;
  }
}

void sub_194781F1C(_Unwind_Exception *a1)
{
  unsigned __int8 **v1;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *WebCore::MediaPlayerPrivateMediaSourceAVFObjC::notifyActiveSourceBuffersChanged(unsigned __int8 *this)
{
  uint64_t v1;
  uint64_t v2;
  int v4;

  v1 = *((_QWORD *)this + 16);
  if (!v1)
    return this;
  v2 = *((_QWORD *)this + 17);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
LABEL_5:
    this = (unsigned __int8 *)MEMORY[0x19AEA534C](v1);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v1))
    goto LABEL_5;
LABEL_6:
  if (*(_QWORD *)(v1 + 24))
    ++*(_QWORD *)(v1 + 8);
  else
    v2 = 0;
  v4 = __ldxr((unsigned __int8 *)v1);
  if (v4 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v1))
    {
      if (!v2)
        return this;
      goto LABEL_12;
    }
  }
  else
  {
    __clrex();
  }
  this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
  if (v2)
  {
LABEL_12:
    (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v2 + 8) + 8) + 160))(*(_QWORD *)(*(_QWORD *)(v2 + 8)
                                                                                                  + 8));
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v2);
  }
  return this;
}

void sub_194781FF0(_Unwind_Exception *a1)
{
  unsigned __int8 **v1;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v1);
  _Unwind_Resume(a1);
}

uint64_t WebCore::MediaPlayerPrivateMediaSourceAVFObjC::movieLoadType(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this)
{
  return 2;
}

void WebCore::MediaPlayerPrivateMediaSourceAVFObjC::engineDescription(int **a1@<X8>)
{
  int *v2;
  int v3;

  if ((_MergedGlobals_100 & 1) == 0)
  {
    v2 = &WebCore::MediaPlayerPrivateMediaSourceAVFObjC::engineDescription(void)::$_0::operator() const(void)::impl;
    v3 = WebCore::MediaPlayerPrivateMediaSourceAVFObjC::engineDescription(void)::$_0::operator() const(void)::impl + 2;
    WebCore::MediaPlayerPrivateMediaSourceAVFObjC::engineDescription(void)::$_0::operator() const(void)::impl += 2;
    qword_1ECE812D0 = (uint64_t)&WebCore::MediaPlayerPrivateMediaSourceAVFObjC::engineDescription(void)::$_0::operator() const(void)::impl;
    _MergedGlobals_100 = 1;
    goto LABEL_4;
  }
  v2 = (int *)qword_1ECE812D0;
  if (qword_1ECE812D0)
  {
    v3 = WebCore::MediaPlayerPrivateMediaSourceAVFObjC::engineDescription(void)::$_0::operator() const(void)::impl;
LABEL_4:
    *v2 = v3 + 2;
  }
  *a1 = v2;
}

void WebCore::MediaPlayerPrivateMediaSourceAVFObjC::languageOfPrimaryAudioTrack(_QWORD *a1@<X8>)
{
  _DWORD *v2;

  v2 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v2 += 2;
  *a1 = v2;
}

uint64_t WebCore::MediaPlayerPrivateMediaSourceAVFObjC::extraMemoryCost(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this)
{
  return 0;
}

void *WebCore::MediaPlayerPrivateMediaSourceAVFObjC::videoPlaybackQualityMetrics@<X0>(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  void *result;
  uint64_t v8;
  void *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  __int128 v15;

  v3 = *((_QWORD *)this + 36);
  if (v3)
  {
    v4 = atomic_load((unsigned int *)(v3 + 232));
    v5 = atomic_load((unsigned int *)(*((_QWORD *)this + 36) + 236));
    v6 = atomic_load((unsigned int *)(*((_QWORD *)this + 36) + 240));
    v15 = *(_OWORD *)(*((_QWORD *)this + 36) + 248);
    result = (void *)WTF::MediaTime::toDouble((WTF::MediaTime *)&v15);
    *(_DWORD *)a2 = v4;
    *(_DWORD *)(a2 + 4) = v5;
    *(_DWORD *)(a2 + 8) = v6;
    *(_QWORD *)(a2 + 16) = v8;
    *(_DWORD *)(a2 + 24) = 0;
  }
  else
  {
    result = (void *)objc_msgSend(*((id *)this + 21), "videoPerformanceMetrics");
    if (!result)
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 32) = 0;
      return result;
    }
    v9 = result;
    if ((objc_opt_respondsToSelector() & 1) != 0)
      v10 = objc_msgSend(v9, "numberOfDisplayCompositedVideoFrames");
    else
      v10 = 0;
    v11 = objc_msgSend(v9, "totalNumberOfVideoFrames");
    v12 = objc_msgSend(v9, "numberOfDroppedVideoFrames");
    v13 = objc_msgSend(v9, "numberOfCorruptedVideoFrames");
    result = (void *)objc_msgSend(v9, "totalFrameDelay");
    *(_DWORD *)a2 = v11;
    *(_DWORD *)(a2 + 4) = v12;
    *(_DWORD *)(a2 + 8) = v13;
    *(_QWORD *)(a2 + 16) = v14;
    *(_DWORD *)(a2 + 24) = v10;
  }
  *(_BYTE *)(a2 + 32) = 1;
  return result;
}

void WebCore::MediaPlayerPrivateMediaSourceAVFObjC::setHasAvailableVideoFrame(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this, int a2)
{
  char v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  WTF::MediaTime *v12;
  WTF::MediaTime *v13;
  WTF::MediaTime *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v17 = a2;
  if (*((unsigned __int8 *)this + 457) != a2)
  {
    v2 = a2;
    v4 = *((_QWORD *)this + 61);
    v5 = (*(uint64_t (**)(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *))(*(_QWORD *)this + 1296))(this);
    v6 = *((_QWORD *)this + 62);
    *(_QWORD *)&v18 = v5;
    *((_QWORD *)&v18 + 1) = v7;
    *(_QWORD *)&v19 = "setHasAvailableVideoFrame";
    *((_QWORD *)&v19 + 1) = v6;
    if (*(_BYTE *)(v4 + 12))
    {
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)&v18);
      v2 = v17;
    }
    *((_BYTE *)this + 457) = v2;
    WebCore::MediaPlayerPrivateMediaSourceAVFObjC::updateAllRenderersHaveAvailableSamples(this);
    if (*((_BYTE *)this + 457))
    {
      if (*((_BYTE *)this + 661))
      {
        *((_BYTE *)this + 661) = 0;
        objc_msgSend(*((id *)this + 21), "setContents:", 0);
      }
      v8 = *((_QWORD *)this + 16);
      if (!v8)
      {
        v9 = 0;
        goto LABEL_23;
      }
      v9 = *((_QWORD *)this + 17);
      if (__ldaxr((unsigned __int8 *)v8))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v8))
      {
        goto LABEL_13;
      }
      MEMORY[0x19AEA534C](v8);
LABEL_13:
      if (*(_QWORD *)(v8 + 24))
        ++*(_QWORD *)(v8 + 8);
      else
        v9 = 0;
      v11 = __ldxr((unsigned __int8 *)v8);
      if (v11 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v8))
        {
          if (v9)
          {
LABEL_19:
            (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v9 + 8) + 8) + 120))(*(_QWORD *)(*(_QWORD *)(v9 + 8) + 8));
            LODWORD(v8) = 1;
            goto LABEL_23;
          }
LABEL_22:
          LODWORD(v8) = 0;
LABEL_23:
          if (*((_DWORD *)this + 113) == 1)
            WebCore::MediaPlayerPrivateMediaSourceAVFObjC::maybeCompleteSeek(this);
          if (*((_BYTE *)this + 394))
          {
            *((_BYTE *)this + 394) = 0;
            if ((_DWORD)v8)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v9 + 8) + 8) + 24))(*(_QWORD *)(*(_QWORD *)(v9 + 8) + 8));
              if (*(_BYTE *)(v9 + 192))
              {
                v12 = (WTF::MediaTime *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 72) + 560))(*(_QWORD *)(v9 + 72));
                if ((_DWORD)v12 == 1)
                {
                  if (!*(_BYTE *)(v9 + 192))
                  {
                    __break(1u);
                    goto LABEL_31;
                  }
                  *(_BYTE *)(v9 + 192) = 0;
                  v18 = *(_OWORD *)(v9 + 176);
                  v13 = (WTF::MediaTime *)WTF::MediaTime::zeroTime(v12);
                  v19 = *(_OWORD *)v13;
                  v14 = (WTF::MediaTime *)WTF::MediaTime::zeroTime(v13);
                  v20 = *(_OWORD *)v14;
                  v15 = *(_QWORD *)(v9 + 72);
                  v16 = WTF::MediaTime::invalidTime(v14);
                  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 384))(v15, v16);
                  (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v9 + 72) + 400))(*(_QWORD *)(v9 + 72), &v18);
                }
              }
LABEL_32:
              WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v9);
              return;
            }
          }
LABEL_31:
          if (!v9)
            return;
          goto LABEL_32;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v8);
      if (v9)
        goto LABEL_19;
      goto LABEL_22;
    }
  }
}

void sub_1947823BC(_Unwind_Exception *exception_object)
{
  unsigned __int8 **v1;

  if (v1)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v1);
  _Unwind_Resume(exception_object);
}

void WebCore::MediaPlayerPrivateMediaSourceAVFObjC::updateAllRenderersHaveAvailableSamples(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v14;
  double v15;
  double v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  unsigned __int8 v22;

  v22 = 1;
  if ((*(unsigned int (**)(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *))(*(_QWORD *)this + 296))(this)
    && !*((_BYTE *)this + 457))
  {
    goto LABEL_24;
  }
  v2 = *((_QWORD *)this + 23);
  if (v2)
  {
    v3 = *(unsigned int *)(v2 - 4);
    v4 = v2 + 16 * v3;
    if (*(_DWORD *)(v2 - 12))
    {
      v5 = *((_QWORD *)this + 23);
      if ((_DWORD)v3)
      {
        v6 = 16 * v3;
        v5 = *((_QWORD *)this + 23);
        while ((unint64_t)(*(_QWORD *)v5 + 1) <= 1)
        {
          v5 += 16;
          v6 -= 16;
          if (!v6)
          {
            v5 = v4;
            goto LABEL_13;
          }
        }
      }
      goto LABEL_13;
    }
    v5 = v2 + 16 * v3;
  }
  else
  {
    v5 = 0;
    v3 = 0;
  }
  v4 = v2 + 16 * v3;
LABEL_13:
  if (v2)
    v2 += 16 * *(unsigned int *)(v2 - 4);
  if (v2 == v5)
  {
LABEL_23:
    v8 = 1;
    goto LABEL_25;
  }
  while (*(_BYTE *)(v5 + 8))
  {
    v7 = v5 + 16;
    v5 = v4;
    if (v7 != v4)
    {
      v5 = v7;
      while ((unint64_t)(*(_QWORD *)v5 + 1) <= 1)
      {
        v5 += 16;
        if (v5 == v4)
        {
          v5 = v4;
          break;
        }
      }
    }
    if (v5 == v2)
      goto LABEL_23;
  }
LABEL_24:
  v8 = 0;
  v22 = 0;
LABEL_25:
  if (*((unsigned __int8 *)this + 458) == v8)
    return;
  v9 = *((_QWORD *)this + 61);
  v10 = (*(uint64_t (**)(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *))(*(_QWORD *)this + 1296))(this);
  v11 = *((_QWORD *)this + 62);
  v18 = v10;
  v19 = v12;
  v20 = "updateAllRenderersHaveAvailableSamples";
  v21 = v11;
  if (*(_BYTE *)(v9 + 12))
  {
    if (WebCore::LogMediaSource && byte_1ECE7CE70 >= 4u)
    {
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogMediaSource, 4, (WTF::Logger::LogSiteIdentifier *)&v18);
      v8 = v22;
    }
  }
  *((_BYTE *)this + 458) = v8;
  if (!*((_BYTE *)this + 448) || *((_BYTE *)this + 120) || *((_DWORD *)this + 113) != 2)
    goto LABEL_46;
  if (*((unsigned __int8 *)this + 460) | v8 && *((unsigned __int8 *)this + 393) >= 3u)
  {
    objc_msgSend(*((id *)this + 24), "rate");
    v15 = v14;
    v16 = *((double *)this + 55);
    if (v16 != v15)
    {
      LOBYTE(v18) = 0;
      LOBYTE(v19) = 0;
LABEL_48:
      WebCore::MediaPlayerPrivateMediaSourceAVFObjC::setSynchronizerRate((uint64_t)this, (WTF::MonotonicTime *)&v18, v16);
      return;
    }
    if (!*((_BYTE *)this + 448) || *((_BYTE *)this + 120))
      goto LABEL_46;
  }
  if (*((_DWORD *)this + 113) != 2
    || !*((_BYTE *)this + 460) && !*((_BYTE *)this + 458)
    || *((unsigned __int8 *)this + 393) <= 2u)
  {
LABEL_46:
    objc_msgSend(*((id *)this + 24), "rate");
    if (v17 == 0.0)
      return;
    LOBYTE(v18) = 0;
    LOBYTE(v19) = 0;
    v16 = 0.0;
    goto LABEL_48;
  }
}

void WebCore::MediaPlayerPrivateMediaSourceAVFObjC::setHasAvailableAudioSample(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this, AVSampleBufferAudioRenderer *a2, int a3)
{
  uint64_t v3;
  char v4;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  AVSampleBufferAudioRenderer *v11;
  int v12;
  uint64_t v13;
  _BYTE *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[4];
  char v21;

  v21 = a3;
  v3 = *((_QWORD *)this + 23);
  if (v3)
  {
    v4 = a3;
    v6 = *(_DWORD *)(v3 - 8);
    v7 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(AVSampleBufferAudioRenderer **)(v3 + 16 * v10);
    if (v11 != a2)
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(AVSampleBufferAudioRenderer **)(v3 + 16 * v10);
        ++v12;
        if (v11 == a2)
          goto LABEL_8;
      }
      v10 = *(unsigned int *)(v3 - 4);
    }
LABEL_8:
    if (v10 != *(_DWORD *)(v3 - 4))
    {
      v13 = v3 + 16 * v10;
      v15 = *(unsigned __int8 *)(v13 + 8);
      v14 = (_BYTE *)(v13 + 8);
      if (v15 != a3)
      {
        v16 = *((_QWORD *)this + 61);
        v17 = (*(uint64_t (**)(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *))(*(_QWORD *)this + 1296))(this);
        v18 = *((_QWORD *)this + 62);
        v20[0] = v17;
        v20[1] = v19;
        v20[2] = "setHasAvailableAudioSample";
        v20[3] = v18;
        if (*(_BYTE *)(v16 + 12))
        {
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)v20);
          v4 = v21;
        }
        *v14 = v4;
        WebCore::MediaPlayerPrivateMediaSourceAVFObjC::updateAllRenderersHaveAvailableSamples(this);
      }
    }
  }
}

uint64_t WebCore::MediaPlayerPrivateMediaSourceAVFObjC::durationChanged(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 *v3;
  __int128 v5;
  int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  __int128 v12;
  __int128 v13;

  v1 = *(_QWORD *)(this + 152);
  if (v1)
  {
    v2 = this;
    v3 = (unsigned __int8 *)(v1 + 64);
    if (__ldaxr((unsigned __int8 *)(v1 + 64)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v3))
    {
      goto LABEL_6;
    }
    MEMORY[0x19AEA534C](v1 + 64);
LABEL_6:
    v5 = *(_OWORD *)(v1 + 72);
    v6 = __ldxr(v3);
    if (v6 == 1)
    {
      if (!__stlxr(0, v3))
        goto LABEL_11;
    }
    else
    {
      __clrex();
    }
    v12 = v5;
    WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 64));
    v5 = v12;
LABEL_11:
    v13 = v5;
    v7 = (_QWORD *)(v2 + 400);
    this = WTF::MediaTime::compare((WTF::MediaTime *)(v2 + 400), (const WTF::MediaTime *)&v13);
    if (!(_DWORD)this)
      goto LABEL_28;
    if ((*(_BYTE *)(v2 + 412) & 1) == 0)
      goto LABEL_28;
    v8 = *(_QWORD *)(v2 + 128);
    if (!v8)
      goto LABEL_28;
    v9 = *(_QWORD *)(v2 + 136);
    if (__ldaxr((unsigned __int8 *)v8))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v8))
    {
      goto LABEL_18;
    }
    this = MEMORY[0x19AEA534C](v8);
LABEL_18:
    if (*(_QWORD *)(v8 + 24))
      ++*(_QWORD *)(v8 + 8);
    else
      v9 = 0;
    v11 = __ldxr((unsigned __int8 *)v8);
    if (v11 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v8))
      {
LABEL_26:
        if (v9)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v9 + 8) + 8) + 64))(*(_QWORD *)(*(_QWORD *)(v9 + 8) + 8));
          this = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v9);
        }
LABEL_28:
        *v7 = v13;
        *(_QWORD *)((char *)v7 + 5) = *(_QWORD *)((char *)&v13 + 5);
        return this;
      }
    }
    else
    {
      __clrex();
    }
    this = WTF::Lock::unlockSlow((WTF::Lock *)v8);
    goto LABEL_26;
  }
  return this;
}

void *WebCore::MediaPlayerPrivateMediaSourceAVFObjC::sizeWillChangeAtTime(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this, const WTF::MediaTime *a2, const WebCore::FloatSize *a3)
{
  uint64_t v6;
  void *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  void *v12;
  int v13;
  double v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  unsigned int v18;
  void *result;
  void *v20;
  void *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  WTF *v29;
  unsigned int v30;
  uint64_t v31;
  void *v32;
  _QWORD *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  WTF *v37;
  const void *v38;
  const void *v39;
  uint64_t v40;
  uint64_t v41;
  const void **v42;
  _QWORD *v43;
  uint64_t v44;
  const void *v45;
  const void *v46;
  _QWORD *v47;
  const void **v48;
  uint64_t v49;
  const void *v50;
  const void *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  unsigned int v55;
  unsigned int v56;
  _QWORD v57[2];
  _QWORD v58[5];
  WTF *v59;
  uint64_t v60;
  char v61[12];
  unsigned int v62;
  _QWORD v63[2];

  v63[1] = *MEMORY[0x1E0C80C00];
  v6 = *((_QWORD *)this + 18);
  if (!v6)
  {
    v6 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v6 = 1;
    *(_QWORD *)(v6 + 8) = this;
    v8 = (unsigned int *)*((_QWORD *)this + 18);
    *((_QWORD *)this + 18) = v6;
    if (v8)
    {
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, v8);
        WTF::fastFree((WTF *)v8, v7);
      }
      v6 = *((_QWORD *)this + 18);
    }
  }
  do
    v11 = __ldaxr((unsigned int *)v6);
  while (__stlxr(v11 + 1, (unsigned int *)v6));
  v12 = (void *)MEMORY[0x1E0CB3B18];
  if ((*((_BYTE *)a2 + 12) & 0x20) != 0)
  {
    WTF::MediaTime::toDouble(a2);
    PAL::softLinkCoreMediaCMTimeMakeWithSeconds((PAL *)*((unsigned int *)a2 + 2), v14, v13);
  }
  else
  {
    PAL::softLinkCoreMediaCMTimeMake(*(PAL **)a2, *((unsigned int *)a2 + 2), (int)a3);
  }
  v62 = v62 & 0xFFFFFFFE | *((_BYTE *)a2 + 12) & 1 | *((_BYTE *)a2 + 12) & 0xE;
  v63[0] = objc_msgSend(v12, "valueWithCMTime:", v61);
  v15 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v63, 1);
  v16 = (void *)*((_QWORD *)this + 24);
  v58[0] = MEMORY[0x1E0C809B0];
  v58[1] = 3321888768;
  v58[2] = ___ZN7WebCore36MediaPlayerPrivateMediaSourceAVFObjC20sizeWillChangeAtTimeERKN3WTF9MediaTimeERKNS_9FloatSizeE_block_invoke;
  v58[3] = &__block_descriptor_56_e8_32c115_ZTSKZN7WebCore36MediaPlayerPrivateMediaSourceAVFObjC20sizeWillChangeAtTimeERKN3WTF9MediaTimeERKNS_9FloatSizeEE3__0_e5_v8__0l;
  v17 = *(_QWORD *)a3;
  v58[4] = this;
  if (v6)
  {
    do
      v18 = __ldaxr((unsigned int *)v6);
    while (__stlxr(v18 + 1, (unsigned int *)v6));
  }
  v59 = (WTF *)v6;
  v60 = v17;
  result = (void *)objc_msgSend(v16, "addBoundaryTimeObserverForTimes:queue:usingBlock:", v15, MEMORY[0x1E0C80D38], v58);
  v21 = result;
  if (result)
    result = (void *)CFRetain(result);
  if (v6)
  {
    do
    {
      v22 = __ldaxr((unsigned int *)v6);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, (unsigned int *)v6));
    if (!v23)
    {
      atomic_store(1u, (unsigned int *)v6);
      result = (void *)WTF::fastFree((WTF *)v6, v20);
    }
  }
  v25 = *((_QWORD *)this + 37);
  v24 = *((_QWORD *)this + 38);
  if (v25)
  {
    if (v24 + 1 != v25)
      goto LABEL_53;
    LODWORD(v26) = *((_DWORD *)this + 80);
  }
  else
  {
    v26 = *((unsigned int *)this + 80);
    if (v24)
    {
      if (v24 != v26 - 1)
        goto LABEL_53;
    }
    else if ((_DWORD)v26)
    {
      v24 = 0;
      goto LABEL_53;
    }
  }
  v27 = v26;
  v28 = ((unint64_t)v26 >> 2) + v26;
  if (v28 <= 0xF)
    v28 = 15;
  if (v28 >= 0x1FFFFFFF)
  {
    __break(0xC471u);
    return result;
  }
  v29 = (WTF *)*((_QWORD *)this + 39);
  v30 = v28 + 1;
  v31 = WTF::fastMalloc((WTF *)(8 * (v28 + 1)));
  v33 = (_QWORD *)v31;
  *((_DWORD *)this + 80) = v30;
  *((_QWORD *)this + 39) = v31;
  v34 = *((_QWORD *)this + 37);
  v35 = *((_QWORD *)this + 38);
  if (v34 <= v35)
  {
    if (v34 != v35)
    {
      v47 = (_QWORD *)(v31 + 8 * v34);
      v48 = (const void **)((char *)v29 + 8 * v34);
      v49 = 8 * v35 - 8 * v34;
      do
      {
        v50 = *v48;
        *v48 = 0;
        *v47 = v50;
        v51 = *v48;
        *v48 = 0;
        if (v51)
          CFRelease(v51);
        ++v47;
        ++v48;
        v49 -= 8;
      }
      while (v49);
    }
  }
  else
  {
    if (v35)
    {
      v36 = 8 * v35;
      v37 = v29;
      do
      {
        v38 = *(const void **)v37;
        *(_QWORD *)v37 = 0;
        *v33 = v38;
        v39 = *(const void **)v37;
        *(_QWORD *)v37 = 0;
        if (v39)
          CFRelease(v39);
        ++v33;
        v37 = (WTF *)((char *)v37 + 8);
        v36 -= 8;
      }
      while (v36);
      v30 = *((_DWORD *)this + 80);
      v34 = *((_QWORD *)this + 37);
      v33 = (_QWORD *)*((_QWORD *)this + 39);
    }
    v40 = v34 - v27 + v30;
    if (v34 != v27)
    {
      v41 = v30;
      v42 = (const void **)((char *)v29 + 8 * v34);
      v43 = &v33[v41];
      v44 = 8 * v34 - 8 * v27;
      do
      {
        v45 = *v42;
        *v42 = 0;
        *(_QWORD *)((char *)v43 + v44) = v45;
        v46 = *v42;
        *v42 = 0;
        if (v46)
          CFRelease(v46);
        ++v42;
        v44 += 8;
      }
      while (v44);
    }
    *((_QWORD *)this + 37) = v40;
  }
  if (v29)
  {
    if (*((WTF **)this + 39) == v29)
    {
      *((_QWORD *)this + 39) = 0;
      *((_DWORD *)this + 80) = 0;
    }
    WTF::fastFree(v29, v32);
  }
  v24 = *((_QWORD *)this + 38);
LABEL_53:
  *(_QWORD *)(*((_QWORD *)this + 39) + 8 * v24) = v21;
  if (v24 == *((unsigned int *)this + 80) - 1)
    v52 = 0;
  else
    v52 = v24 + 1;
  *((_QWORD *)this + 38) = v52;
  v57[0] = (*(uint64_t (**)(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *))(*(_QWORD *)this + 352))(this);
  v57[1] = v53;
  if ((WTF::MediaTime::compare((WTF::MediaTime *)v57, a2) & 0x80000000) == 0)
    WebCore::MediaPlayerPrivateMediaSourceAVFObjC::setNaturalSize((unsigned __int8 *)this, a3);
  result = v59;
  v59 = 0;
  if (result)
  {
    do
    {
      v55 = __ldaxr((unsigned int *)result);
      v56 = v55 - 1;
    }
    while (__stlxr(v56, (unsigned int *)result));
    if (!v56)
    {
      atomic_store(1u, (unsigned int *)result);
      return (void *)WTF::fastFree((WTF *)result, v54);
    }
  }
  return result;
}

void sub_194782C9C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF *a16)
{
  unsigned int v17;
  unsigned int v18;

  if (a16)
  {
    do
    {
      v17 = __ldaxr((unsigned int *)a16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, (unsigned int *)a16));
    if (!v18)
    {
      atomic_store(1u, (unsigned int *)a16);
      WTF::fastFree(a16, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_194782E0C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

_QWORD *__copy_helper_block_e8_32c115_ZTSKZN7WebCore36MediaPlayerPrivateMediaSourceAVFObjC20sizeWillChangeAtTimeERKN3WTF9MediaTimeERKNS_9FloatSizeEE3__0(_QWORD *result, _QWORD *a2)
{
  unsigned int *v2;
  unsigned int v3;

  result[4] = a2[4];
  v2 = (unsigned int *)a2[5];
  if (v2)
  {
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
  }
  result[5] = v2;
  result[6] = a2[6];
  return result;
}

unsigned int *__destroy_helper_block_e8_32c115_ZTSKZN7WebCore36MediaPlayerPrivateMediaSourceAVFObjC20sizeWillChangeAtTimeERKN3WTF9MediaTimeERKNS_9FloatSizeEE3__0(uint64_t a1, void *a2)
{
  unsigned int *result;
  unsigned int v4;
  unsigned int v5;

  result = *(unsigned int **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr(result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, result));
    if (!v5)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

unsigned __int8 *WebCore::MediaPlayerPrivateMediaSourceAVFObjC::setNaturalSize(unsigned __int8 *this, const WebCore::FloatSize *a2)
{
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  _QWORD v12[4];

  if (*(float *)a2 != *((float *)this + 108) || *((float *)a2 + 1) != *((float *)this + 109))
  {
    v4 = this;
    v5 = *((_QWORD *)this + 61);
    this = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)this + 1296))(this);
    v6 = *((_QWORD *)v4 + 62);
    v12[0] = this;
    v12[1] = v7;
    v12[2] = "setNaturalSize";
    v12[3] = v6;
    if (*(_BYTE *)(v5 + 12))
      this = (unsigned __int8 *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::FloatSize>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)v12, a2);
    *((_QWORD *)v4 + 54) = *(_QWORD *)a2;
    v8 = *((_QWORD *)v4 + 16);
    if (v8)
    {
      v9 = *((_QWORD *)v4 + 17);
      if (__ldaxr((unsigned __int8 *)v8))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v8))
      {
        goto LABEL_12;
      }
      this = (unsigned __int8 *)MEMORY[0x19AEA534C](v8);
LABEL_12:
      if (*(_QWORD *)(v8 + 24))
        ++*(_QWORD *)(v8 + 8);
      else
        v9 = 0;
      v11 = __ldxr((unsigned __int8 *)v8);
      if (v11 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v8))
        {
LABEL_20:
          if (v9)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v9 + 8) + 8) + 104))(*(_QWORD *)(*(_QWORD *)(v9 + 8) + 8));
            return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v9);
          }
          return this;
        }
      }
      else
      {
        __clrex();
      }
      this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v8);
      goto LABEL_20;
    }
  }
  return this;
}

unsigned int *WebCore::MediaPlayerPrivateMediaSourceAVFObjC::setCDMSession(unsigned int *this, WebCore::LegacyCDMSession *a2)
{
  unsigned int *v3;
  WebCore::LegacyCDMSession *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[4];

  v3 = this;
  v4 = (WebCore::LegacyCDMSession *)*((_QWORD *)this + 48);
  if (v4)
    v4 = (WebCore::LegacyCDMSession *)*((_QWORD *)v4 + 1);
  if (v4 != a2)
  {
    v5 = *((_QWORD *)this + 61);
    v6 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 1296))(this);
    v8 = *((_QWORD *)v3 + 62);
    v21[0] = v6;
    v21[1] = v7;
    v21[2] = "setCDMSession";
    v21[3] = v8;
    if (*(_BYTE *)(v5 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)v21);
    if (a2 && (*(unsigned int (**)(WebCore::LegacyCDMSession *))(*(_QWORD *)a2 + 16))(a2) == 3)
    {
      this = (unsigned int *)*((_QWORD *)a2 + 2);
      if (this)
        goto LABEL_27;
      this = (unsigned int *)WTF::fastCompactMalloc((WTF *)0x10);
      *this = 1;
      *((_QWORD *)this + 1) = a2;
      v9 = (unsigned int *)*((_QWORD *)a2 + 2);
      *((_QWORD *)a2 + 2) = this;
      if (!v9)
        goto LABEL_27;
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        atomic_store(1u, v9);
        WTF::fastFree((WTF *)v9, v7);
      }
      this = (unsigned int *)*((_QWORD *)a2 + 2);
      if (this)
      {
LABEL_27:
        do
          v12 = __ldaxr(this);
        while (__stlxr(v12 + 1, this));
      }
    }
    else
    {
      this = 0;
    }
    v13 = (unsigned int *)*((_QWORD *)v3 + 48);
    *((_QWORD *)v3 + 48) = this;
    if (v13)
    {
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        atomic_store(1u, v13);
        this = (unsigned int *)WTF::fastFree((WTF *)v13, v7);
      }
    }
    v16 = *((_QWORD *)v3 + 19);
    if (v16)
    {
      v17 = *(unsigned int *)(v16 + 28);
      if ((_DWORD)v17)
      {
        v18 = *(uint64_t **)(v16 + 16);
        v19 = 8 * v17;
        do
        {
          v20 = *v18++;
          this = (unsigned int *)(*(uint64_t (**)(uint64_t, WebCore::LegacyCDMSession *))(*(_QWORD *)v20 + 384))(v20, a2);
          v19 -= 8;
        }
        while (v19);
      }
    }
  }
  return this;
}

void WebCore::MediaPlayerPrivateMediaSourceAVFObjC::cdmInstanceAttached(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this, WebCore::CDMInstance *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::CDMInstance *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[4];

  v4 = *((_QWORD *)this + 61);
  v5 = (*(uint64_t (**)(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *))(*(_QWORD *)this + 1296))(this);
  v6 = *((_QWORD *)this + 62);
  v14[0] = v5;
  v14[1] = v7;
  v14[2] = "cdmInstanceAttached";
  v14[3] = v6;
  if (*(_BYTE *)(v4 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)v14);
  v8 = *((_QWORD *)this + 19);
  if (v8)
  {
    v9 = *(WebCore::CDMInstance **)(v8 + 216);
    if (v9 != a2)
    {
      ++*((_DWORD *)a2 + 2);
      *(_QWORD *)(v8 + 216) = a2;
      if (v9)
      {
        if (*((_DWORD *)v9 + 2) == 1)
          (*(void (**)(WebCore::CDMInstance *))(*(_QWORD *)v9 + 8))(v9);
        else
          --*((_DWORD *)v9 + 2);
      }
      v10 = *(unsigned int *)(v8 + 28);
      if ((_DWORD)v10)
      {
        v11 = *(uint64_t **)(v8 + 16);
        v12 = 8 * v10;
        do
        {
          v13 = *v11++;
          (*(void (**)(uint64_t, WebCore::CDMInstance *))(*(_QWORD *)v13 + 392))(v13, a2);
          v12 -= 8;
        }
        while (v12);
      }
    }
  }
  if (WebCore::MediaPlayerPrivateMediaSourceAVFObjC::shouldEnsureLayerOrVideoRenderer(this))
  {
    WebCore::MediaPlayerPrivateMediaSourceAVFObjC::destroyDecompressionSession(this);
    WebCore::MediaPlayerPrivateMediaSourceAVFObjC::ensureLayerOrVideoRenderer((unsigned __int8 *)this);
  }
  else
  {
    WebCore::MediaPlayerPrivateMediaSourceAVFObjC::destroyLayerOrVideoRenderer(this);
    WebCore::MediaPlayerPrivateMediaSourceAVFObjC::ensureDecompressionSession(this);
  }
}

void WebCore::MediaPlayerPrivateMediaSourceAVFObjC::cdmInstanceDetached(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this, WebCore::CDMInstance *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  _QWORD v13[4];

  v3 = *((_QWORD *)this + 61);
  v4 = (*(uint64_t (**)(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *, WebCore::CDMInstance *))(*(_QWORD *)this + 1296))(this, a2);
  v5 = *((_QWORD *)this + 62);
  v13[0] = v4;
  v13[1] = v6;
  v13[2] = "cdmInstanceDetached";
  v13[3] = v5;
  if (*(_BYTE *)(v3 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)v13);
  v7 = *((_QWORD *)this + 19);
  if (v7)
  {
    v8 = *(unsigned int *)(v7 + 28);
    if ((_DWORD)v8)
    {
      v9 = *(uint64_t **)(v7 + 16);
      v10 = 8 * v8;
      do
      {
        v11 = *v9++;
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 392))(v11, 0);
        v10 -= 8;
      }
      while (v10);
    }
    v12 = *(_DWORD **)(v7 + 216);
    *(_QWORD *)(v7 + 216) = 0;
    if (v12)
    {
      if (v12[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
      else
        --v12[2];
    }
  }
  if (WebCore::MediaPlayerPrivateMediaSourceAVFObjC::shouldEnsureLayerOrVideoRenderer(this))
  {
    WebCore::MediaPlayerPrivateMediaSourceAVFObjC::destroyDecompressionSession(this);
    WebCore::MediaPlayerPrivateMediaSourceAVFObjC::ensureLayerOrVideoRenderer((unsigned __int8 *)this);
  }
  else
  {
    WebCore::MediaPlayerPrivateMediaSourceAVFObjC::destroyLayerOrVideoRenderer(this);
    WebCore::MediaPlayerPrivateMediaSourceAVFObjC::ensureDecompressionSession(this);
  }
}

uint64_t WebCore::MediaPlayerPrivateMediaSourceAVFObjC::attemptToDecryptWithInstance(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this, WebCore::CDMInstance *a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[4];

  v3 = *((_QWORD *)this + 61);
  result = (*(uint64_t (**)(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *, WebCore::CDMInstance *))(*(_QWORD *)this + 1296))(this, a2);
  v5 = *((_QWORD *)this + 62);
  v12[0] = result;
  v12[1] = v6;
  v12[2] = "attemptToDecryptWithInstance";
  v12[3] = v5;
  if (*(_BYTE *)(v3 + 12))
    result = WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)v12);
  v7 = *((_QWORD *)this + 19);
  if (v7)
  {
    v8 = *(unsigned int *)(v7 + 28);
    if ((_DWORD)v8)
    {
      v9 = *(uint64_t **)(v7 + 16);
      v10 = 8 * v8;
      do
      {
        v11 = *v9++;
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 408))(v11);
        v10 -= 8;
      }
      while (v10);
    }
  }
  return result;
}

uint64_t WebCore::MediaPlayerPrivateMediaSourceAVFObjC::waitingForKey(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v1 = *((_QWORD *)this + 19);
  if (!v1)
    return 0;
  v2 = *(unsigned int *)(v1 + 28);
  if (!(_DWORD)v2)
    return 0;
  v3 = *(uint64_t **)(v1 + 16);
  v4 = 8 * v2 - 8;
  do
  {
    v5 = *v3++;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 400))(v5);
    if ((result & 1) != 0)
      break;
    v7 = v4;
    v4 -= 8;
  }
  while (v7);
  return result;
}

unsigned __int8 *WebCore::MediaPlayerPrivateMediaSourceAVFObjC::waitingForKeyChanged(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this)
{
  uint64_t v2;
  unsigned __int8 *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  _QWORD v10[4];

  v2 = *((_QWORD *)this + 61);
  result = (unsigned __int8 *)(*(uint64_t (**)(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *))(*(_QWORD *)this + 1296))(this);
  v4 = *((_QWORD *)this + 62);
  v10[0] = result;
  v10[1] = v5;
  v10[2] = "waitingForKeyChanged";
  v10[3] = v4;
  if (*(_BYTE *)(v2 + 12))
    result = (unsigned __int8 *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)v10);
  v6 = *((_QWORD *)this + 16);
  if (v6)
  {
    v7 = *((_QWORD *)this + 17);
    if (__ldaxr((unsigned __int8 *)v6))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v6))
    {
      goto LABEL_8;
    }
    result = (unsigned __int8 *)MEMORY[0x19AEA534C](v6);
LABEL_8:
    if (*(_QWORD *)(v6 + 24))
      ++*(_QWORD *)(v6 + 8);
    else
      v7 = 0;
    v9 = __ldxr((unsigned __int8 *)v6);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v6))
      {
LABEL_16:
        if (v7)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v7 + 8) + 8) + 200))(*(_QWORD *)(*(_QWORD *)(v7 + 8) + 8));
          return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v7);
        }
        return result;
      }
    }
    else
    {
      __clrex();
    }
    result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v6);
    goto LABEL_16;
  }
  return result;
}

unsigned __int8 *WebCore::MediaPlayerPrivateMediaSourceAVFObjC::initializationDataEncountered(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unsigned __int8 *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  _QWORD v14[4];

  v6 = a1[61];
  result = (unsigned __int8 *)(*(uint64_t (**)(_QWORD *))(*a1 + 1296))(a1);
  v8 = a1[62];
  v14[0] = result;
  v14[1] = v9;
  v14[2] = "initializationDataEncountered";
  v14[3] = v8;
  if (*(_BYTE *)(v6 + 12))
    result = (unsigned __int8 *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WTF::String>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)v14, a2);
  v10 = a1[16];
  if (v10)
  {
    v11 = a1[17];
    if (__ldaxr((unsigned __int8 *)v10))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v10))
    {
      goto LABEL_8;
    }
    result = (unsigned __int8 *)MEMORY[0x19AEA534C](v10);
LABEL_8:
    if (*(_QWORD *)(v10 + 24))
      ++*(_QWORD *)(v10 + 8);
    else
      v11 = 0;
    v13 = __ldxr((unsigned __int8 *)v10);
    if (v13 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v10))
      {
LABEL_16:
        if (v11)
        {
          (*(void (**)(_QWORD, uint64_t *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v11 + 8) + 8) + 192))(*(_QWORD *)(*(_QWORD *)(v11 + 8) + 8), a2, a3);
          return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v11);
        }
        return result;
      }
    }
    else
    {
      __clrex();
    }
    result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v10);
    goto LABEL_16;
  }
  return result;
}

uint64_t WebCore::MediaPlayerPrivateMediaSourceAVFObjC::mediaContentTypesRequiringHardwareSupport(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this)
{
  uint64_t v1;
  uint64_t v2;
  int v4;
  uint64_t v5;

  v1 = *((_QWORD *)this + 16);
  v2 = *((_QWORD *)this + 17);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v1))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](v1);
LABEL_5:
  if (*(_QWORD *)(v1 + 24))
    ++*(_QWORD *)(v1 + 8);
  else
    v2 = 0;
  v4 = __ldxr((unsigned __int8 *)v1);
  if (v4 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v1))
      goto LABEL_13;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
LABEL_13:
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v2 + 8) + 8) + 496))(*(_QWORD *)(*(_QWORD *)(v2 + 8) + 8));
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v2);
  return v5;
}

void WebCore::MediaPlayerPrivateMediaSourceAVFObjC::setReadyState(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  NSObject *v23;
  uint64_t v24;
  void *v25;
  char *v26;
  unsigned __int8 *v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  WTF::Logger *v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::Logger *v40;
  uint64_t v41;
  WTF::StringImpl **v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  int v47;
  WTF::StringImpl *v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  int v53;
  WTF::MediaTime *v54;
  WTF::MediaTime *v55;
  WTF::MediaTime *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[2];
  _QWORD v60[4];
  WTF::Logger *v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  uint8_t buf[16];
  WTF::StringImpl *v68[2];
  WTF::StringImpl *v69[2];
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v2 = *(unsigned __int8 *)(a1 + 393);
  if (v2 == a2)
    return;
  if (a2 == 2 && v2 >= 3)
  {
    v5 = *(_QWORD *)(a1 + 488);
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1296))(a1);
    v7 = *(_QWORD *)(a1 + 496);
    v60[0] = v6;
    v60[1] = v8;
    v60[2] = "setReadyState";
    v60[3] = v7;
    v59[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 352))(a1);
    v59[1] = v9;
    if (*(_BYTE *)(v5 + 12))
    {
      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v60);
      WTF::String::String((WTF::String *)&v64, "stall detected currentTime:");
      WTF::MediaTime::toJSONString((WTF::MediaTime *)v59);
      if (v65)
      {
        v10 = *((_DWORD *)v65 + 1);
        if (v64)
          goto LABEL_7;
      }
      else
      {
        v10 = 0;
        if (v64)
        {
LABEL_7:
          v11 = *((_DWORD *)v64 + 1);
          if (v63)
          {
LABEL_8:
            v12 = *((_DWORD *)v63 + 1);
LABEL_9:
            if ((v12 | v11) < 0)
              goto LABEL_132;
            v13 = __OFADD__(v11, v12);
            v14 = v11 + v12;
            v15 = v13;
            if (v10 < 0)
              goto LABEL_132;
            if (v15)
              goto LABEL_132;
            v16 = (v10 + v14);
            if (__OFADD__(v10, v14))
              goto LABEL_132;
            if (v65 && (*((_BYTE *)v65 + 16) & 4) == 0)
            {
              v17 = 0;
              goto LABEL_23;
            }
            if (v64)
            {
              v18 = *((_DWORD *)v64 + 4);
              v17 = (v18 >> 2) & 1;
              if (v63 && (v18 & 4) != 0)
                goto LABEL_22;
            }
            else
            {
              if (v63)
              {
LABEL_22:
                v17 = (*((unsigned __int8 *)v63 + 16) >> 2) & 1;
                goto LABEL_23;
              }
              v17 = 1;
            }
LABEL_23:
            WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v16, v17, v65, (uint64_t)v64, (uint64_t)v63, buf);
            v66 = *(WTF::StringImpl **)buf;
            if (*(_QWORD *)buf)
            {
              v20 = v63;
              v63 = 0;
              if (v20)
              {
                if (*(_DWORD *)v20 == 2)
                  WTF::StringImpl::destroy(v20, v19);
                else
                  *(_DWORD *)v20 -= 2;
              }
              v21 = v64;
              v64 = 0;
              if (v21)
              {
                if (*(_DWORD *)v21 == 2)
                  WTF::StringImpl::destroy(v21, v19);
                else
                  *(_DWORD *)v21 -= 2;
              }
              v22 = v65;
              v65 = 0;
              if (v22)
              {
                if (*(_DWORD *)v22 == 2)
                  WTF::StringImpl::destroy(v22, v19);
                else
                  *(_DWORD *)v22 -= 2;
              }
              v23 = qword_1ECE7CE80;
              v24 = os_log_type_enabled((os_log_t)qword_1ECE7CE80, OS_LOG_TYPE_DEFAULT);
              if ((_DWORD)v24)
              {
                WTF::String::utf8();
                v26 = v61 ? (char *)v61 + 16 : 0;
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = v26;
                _os_log_impl(&dword_1940B8000, v23, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
                v24 = (uint64_t)v61;
                v61 = 0;
                if (v24)
                {
                  if (*(_DWORD *)v24 == 1)
                    v24 = WTF::fastFree((WTF *)v24, v25);
                  else
                    --*(_DWORD *)v24;
                }
              }
              if (WebCore::LogMediaSource)
              {
                v27 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
                while (1)
                {
                  v28 = *v27;
                  if ((v28 & 1) != 0)
                    break;
                  v29 = __ldaxr(v27);
                  if (v29 == v28)
                  {
                    if (!__stxr(v28 | 1, v27))
                    {
                      v30 = WTF::Logger::observers((WTF::Logger *)v24);
                      v31 = *(unsigned int *)(v30 + 12);
                      if ((_DWORD)v31)
                      {
                        v32 = *(uint64_t **)v30;
                        v33 = *(_QWORD *)v30 + 8 * v31;
                        do
                        {
                          v34 = *v32;
                          *(_DWORD *)buf = 0;
                          WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v60);
                          LODWORD(v68[0]) = 0;
                          WTF::String::String((WTF::String *)&v68[1], "stall detected currentTime:");
                          LODWORD(v69[0]) = 1;
                          WTF::MediaTime::toJSONString((WTF::MediaTime *)v59);
                          v61 = 0;
                          v62 = 0;
                          v35 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
                          LODWORD(v62) = 3;
                          v61 = v35;
                          v36 = HIDWORD(v62);
                          *((_DWORD *)v35 + 4 * HIDWORD(v62)) = *(_DWORD *)buf;
                          v37 = *(_QWORD *)&buf[8];
                          if (*(_QWORD *)&buf[8])
                            **(_DWORD **)&buf[8] += 2;
                          *((_QWORD *)v35 + 2 * v36 + 1) = v37;
                          *((_DWORD *)v35 + 4 * (v36 + 1)) = v68[0];
                          v38 = v68[1];
                          if (v68[1])
                            *(_DWORD *)v68[1] += 2;
                          *((_QWORD *)v35 + 2 * (v36 + 1) + 1) = v38;
                          *((_DWORD *)v35 + 4 * (v36 + 2)) = v69[0];
                          v39 = v69[1];
                          if (v69[1])
                            *(_DWORD *)v69[1] += 2;
                          *((_QWORD *)v35 + 2 * (v36 + 2) + 1) = v39;
                          HIDWORD(v62) = v36 + 3;
                          (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v34 + 16))(v34, &WebCore::LogMediaSource, 0, &v61);
                          v40 = v61;
                          if (HIDWORD(v62))
                          {
                            v41 = 16 * HIDWORD(v62);
                            v42 = (WTF::StringImpl **)((char *)v61 + 8);
                            do
                            {
                              v43 = *v42;
                              *v42 = 0;
                              if (v43)
                              {
                                if (*(_DWORD *)v43 == 2)
                                  WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v25);
                                else
                                  *(_DWORD *)v43 -= 2;
                              }
                              v42 += 2;
                              v41 -= 16;
                            }
                            while (v41);
                            v40 = v61;
                          }
                          if (v40)
                          {
                            v61 = 0;
                            LODWORD(v62) = 0;
                            WTF::fastFree(v40, v25);
                          }
                          v44 = v69[1];
                          v69[1] = 0;
                          if (v44)
                          {
                            if (*(_DWORD *)v44 == 2)
                              WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v25);
                            else
                              *(_DWORD *)v44 -= 2;
                          }
                          v45 = v68[1];
                          v68[1] = 0;
                          if (v45)
                          {
                            if (*(_DWORD *)v45 == 2)
                              WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v25);
                            else
                              *(_DWORD *)v45 -= 2;
                          }
                          v46 = *(WTF::StringImpl **)&buf[8];
                          *(_QWORD *)&buf[8] = 0;
                          if (v46)
                          {
                            if (*(_DWORD *)v46 == 2)
                              WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v25);
                            else
                              *(_DWORD *)v46 -= 2;
                          }
                          ++v32;
                        }
                        while (v32 != (uint64_t *)v33);
                      }
                      v47 = __ldxr(v27);
                      if (v47 == 1)
                      {
                        if (!__stlxr(0, v27))
                          break;
                      }
                      else
                      {
                        __clrex();
                      }
                      WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                      break;
                    }
                  }
                  else
                  {
                    __clrex();
                  }
                }
              }
              v48 = v66;
              v66 = 0;
              if (v48)
              {
                if (*(_DWORD *)v48 == 2)
                  WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v25);
                else
                  *(_DWORD *)v48 -= 2;
              }
              goto LABEL_87;
            }
LABEL_132:
            __break(0xC471u);
            return;
          }
LABEL_129:
          v12 = 0;
          goto LABEL_9;
        }
      }
      v11 = 0;
      if (v63)
        goto LABEL_8;
      goto LABEL_129;
    }
  }
LABEL_87:
  *(_BYTE *)(a1 + 393) = a2;
  if (!*(_BYTE *)(a1 + 448) || *(_BYTE *)(a1 + 120) || *(_DWORD *)(a1 + 452) != 2)
    goto LABEL_96;
  if (*(_BYTE *)(a1 + 460))
  {
    if (a2 < 3)
    {
LABEL_96:
      buf[0] = 0;
      buf[8] = 0;
      WebCore::MediaPlayerPrivateMediaSourceAVFObjC::setSynchronizerRate(a1, (WTF::MonotonicTime *)buf, 0.0);
      goto LABEL_97;
    }
  }
  else if (a2 < 3 || !*(_BYTE *)(a1 + 458))
  {
    goto LABEL_96;
  }
  v49 = *(double *)(a1 + 440);
  buf[0] = 0;
  buf[8] = 0;
  WebCore::MediaPlayerPrivateMediaSourceAVFObjC::setSynchronizerRate(a1, (WTF::MonotonicTime *)buf, v49);
LABEL_97:
  if (*(unsigned __int8 *)(a1 + 393) >= 2u
    && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 296))(a1)
    && !*(_BYTE *)(a1 + 457))
  {
    goto LABEL_118;
  }
  v50 = *(_QWORD *)(a1 + 128);
  if (!v50)
    return;
  v51 = *(_QWORD *)(a1 + 136);
  if (__ldaxr((unsigned __int8 *)v50))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v50))
  {
    goto LABEL_105;
  }
  MEMORY[0x19AEA534C](v50);
LABEL_105:
  if (*(_QWORD *)(v50 + 24))
    ++*(_QWORD *)(v50 + 8);
  else
    v51 = 0;
  v53 = __ldxr((unsigned __int8 *)v50);
  if (v53 != 1)
  {
    __clrex();
LABEL_113:
    WTF::Lock::unlockSlow((WTF::Lock *)v50);
    if (!v51)
      return;
    goto LABEL_114;
  }
  if (__stlxr(0, (unsigned __int8 *)v50))
    goto LABEL_113;
  if (!v51)
    return;
LABEL_114:
  (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v51 + 8) + 8) + 24))(*(_QWORD *)(*(_QWORD *)(v51 + 8)
                                                                                                + 8));
  if (*(_BYTE *)(v51 + 192))
  {
    v54 = (WTF::MediaTime *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v51 + 72) + 560))(*(_QWORD *)(v51 + 72));
    if ((_DWORD)v54 == 1)
    {
      if (!*(_BYTE *)(v51 + 192))
      {
        __break(1u);
LABEL_118:
        *(_BYTE *)(a1 + 394) = 1;
        return;
      }
      *(_BYTE *)(v51 + 192) = 0;
      *(_OWORD *)buf = *(_OWORD *)(v51 + 176);
      v55 = (WTF::MediaTime *)WTF::MediaTime::zeroTime(v54);
      *(_OWORD *)v68 = *(_OWORD *)v55;
      v56 = (WTF::MediaTime *)WTF::MediaTime::zeroTime(v55);
      *(_OWORD *)v69 = *(_OWORD *)v56;
      v57 = *(_QWORD *)(v51 + 72);
      v58 = WTF::MediaTime::invalidTime(v56);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v57 + 384))(v57, v58);
      (*(void (**)(_QWORD, uint8_t *))(**(_QWORD **)(v51 + 72) + 400))(*(_QWORD *)(v51 + 72), buf);
    }
  }
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v51);
}

void sub_194783DE4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF *a17, int a18, int a19, WTF::StringImpl *a20,WTF::StringImpl *a21,uint64_t a22,WTF::StringImpl *a23,char a24,WTF::StringImpl *a25,uint64_t a26,WTF::StringImpl *a27,uint64_t a28,WTF::StringImpl *a29)
{
  if (a23)
  {
    if (*(_DWORD *)a23 == 2)
      WTF::StringImpl::destroy(a23, a2);
    else
      *(_DWORD *)a23 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebCore::MediaPlayerPrivateMediaSourceAVFObjC::addAudioRenderer(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this, void *cf)
{
  uint64_t v4;
  uint64_t *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  const void *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  int v25;
  double v26;
  PAL *v27;
  double v28;
  uint64_t AVFoundation_AVAudioTimePitchAlgorithmVarispeed;
  const __CFString *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;

  if (!cf)
    return;
  CFRetain(cf);
  v5 = (uint64_t *)((char *)this + 184);
  v4 = *((_QWORD *)this + 23);
  if (v4
    || (WTF::HashTable<WTF::RetainPtr<void const*>,WTF::KeyValuePair<WTF::RetainPtr<void const*>,WebCore::MediaPlayerPrivateMediaSourceAVFObjC::AudioRendererProperties>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<void const*>,WebCore::MediaPlayerPrivateMediaSourceAVFObjC::AudioRendererProperties>>,WTF::DefaultHash<WTF::RetainPtr<void const*>>,WTF::HashMap<WTF::RetainPtr<void const*>,WebCore::MediaPlayerPrivateMediaSourceAVFObjC::AudioRendererProperties,WTF::DefaultHash<WTF::RetainPtr<void const*>>,WTF::HashTraits<WTF::RetainPtr<void const*>>,WTF::HashTraits<WebCore::MediaPlayerPrivateMediaSourceAVFObjC::AudioRendererProperties>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<void const*>>>::rehash((uint64_t *)this + 23, 8u), (v4 = *v5) != 0))
  {
    v6 = *(_DWORD *)(v4 - 8);
  }
  else
  {
    v6 = 0;
  }
  v7 = ((unint64_t)cf + ~((_QWORD)cf << 32)) ^ (((unint64_t)cf + ~((_QWORD)cf << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = v4 + 16 * v10;
  v12 = *(const void **)v11;
  if (*(_QWORD *)v11)
  {
    v13 = 0;
    v14 = 1;
    do
    {
      if (v12 == cf)
      {
        CFRelease(cf);
        return;
      }
      if (v12 == (const void *)-1)
        v13 = v11;
      v10 = (v10 + v14) & v6;
      v11 = v4 + 16 * v10;
      v12 = *(const void **)v11;
      ++v14;
    }
    while (*(_QWORD *)v11);
    if (v13)
    {
      *(_QWORD *)v13 = 0;
      *(_BYTE *)(v13 + 8) = 0;
      --*(_DWORD *)(*v5 - 16);
      v11 = v13;
    }
  }
  *(_QWORD *)v11 = cf;
  *(_BYTE *)(v11 + 8) = 0;
  v15 = *v5;
  if (*v5)
    v16 = *(_DWORD *)(v15 - 12) + 1;
  else
    v16 = 1;
  *(_DWORD *)(v15 - 12) = v16;
  v17 = *v5;
  if (*v5)
    v18 = *(_DWORD *)(v17 - 12);
  else
    v18 = 0;
  v19 = (*(_DWORD *)(v17 - 16) + v18);
  v20 = *(unsigned int *)(v17 - 4);
  if (v20 <= 0x400)
  {
    if (3 * v20 > 4 * v19)
      goto LABEL_27;
    if (!(_DWORD)v20)
    {
      v21 = 8;
      goto LABEL_26;
    }
LABEL_23:
    v21 = (_DWORD)v20 << (6 * *(_DWORD *)(v17 - 12) >= (2 * v20));
LABEL_26:
    WTF::HashTable<WTF::RetainPtr<void const*>,WTF::KeyValuePair<WTF::RetainPtr<void const*>,WebCore::MediaPlayerPrivateMediaSourceAVFObjC::AudioRendererProperties>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<void const*>,WebCore::MediaPlayerPrivateMediaSourceAVFObjC::AudioRendererProperties>>,WTF::DefaultHash<WTF::RetainPtr<void const*>>,WTF::HashMap<WTF::RetainPtr<void const*>,WebCore::MediaPlayerPrivateMediaSourceAVFObjC::AudioRendererProperties,WTF::DefaultHash<WTF::RetainPtr<void const*>>,WTF::HashTraits<WTF::RetainPtr<void const*>>,WTF::HashTraits<WebCore::MediaPlayerPrivateMediaSourceAVFObjC::AudioRendererProperties>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<void const*>>>::rehash((uint64_t *)this + 23, v21);
    goto LABEL_27;
  }
  if (v20 <= 2 * v19)
    goto LABEL_23;
LABEL_27:
  v22 = *((_QWORD *)this + 16);
  if (!v22)
    return;
  v23 = *((_QWORD *)this + 17);
  if (__ldaxr((unsigned __int8 *)v22))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v22))
  {
    goto LABEL_32;
  }
  MEMORY[0x19AEA534C](v22);
LABEL_32:
  if (*(_QWORD *)(v22 + 24))
    ++*(_QWORD *)(v22 + 8);
  else
    v23 = 0;
  v25 = __ldxr((unsigned __int8 *)v22);
  if (v25 != 1)
  {
    __clrex();
LABEL_40:
    WTF::Lock::unlockSlow((WTF::Lock *)v22);
    if (!v23)
      return;
    goto LABEL_41;
  }
  if (__stlxr(0, (unsigned __int8 *)v22))
    goto LABEL_40;
  if (!v23)
    return;
LABEL_41:
  objc_msgSend(cf, "setMuted:", *(unsigned __int8 *)(v23 + 227));
  v26 = *(double *)(v23 + 216);
  *(float *)&v26 = v26;
  v27 = (PAL *)objc_msgSend(cf, "setVolume:", v26);
  v28 = *((double *)this + 55);
  if (v28 == 1.0 || !*(_BYTE *)(v23 + 228) || v28 == 0.0)
  {
    AVFoundation_AVAudioTimePitchAlgorithmVarispeed = PAL::get_AVFoundation_AVAudioTimePitchAlgorithmVarispeed(v27);
  }
  else if (*(unsigned __int8 *)(v23 + 234) > 1u)
  {
    AVFoundation_AVAudioTimePitchAlgorithmVarispeed = PAL::get_AVFoundation_AVAudioTimePitchAlgorithmTimeDomain(v27);
  }
  else
  {
    AVFoundation_AVAudioTimePitchAlgorithmVarispeed = PAL::get_AVFoundation_AVAudioTimePitchAlgorithmSpectral(v27);
  }
  MEMORY[0x19AEA5508](&v33, AVFoundation_AVAudioTimePitchAlgorithmVarispeed);
  if (v33)
    v30 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v30 = &stru_1E3487BC0;
  objc_msgSend(cf, "setAudioTimePitchAlgorithm:", v30);
  objc_msgSend(*((id *)this + 24), "addRenderer:", cf);
  (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v23 + 8) + 8) + 128))(*(_QWORD *)(*(_QWORD *)(v23 + 8)
                                                                                                 + 8));
  v32 = v33;
  v33 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, v31);
    else
      *(_DWORD *)v32 -= 2;
  }
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v23);
}

void sub_1947842D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  _Unwind_Resume(exception_object);
}

void WebCore::MediaPlayerPrivateMediaSourceAVFObjC::removeAudioRenderer(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this, AVSampleBufferAudioRenderer *a2)
{
  uint64_t v2;
  uint64_t *v3;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  AVSampleBufferAudioRenderer *v11;
  int v12;
  const void **v13;
  PAL *v14;
  OpaqueCMTimebase *v15;
  void *v16;
  const void **v17;
  const void *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;

  v3 = (uint64_t *)((char *)this + 184);
  v2 = *((_QWORD *)this + 23);
  if (v2)
  {
    v6 = *(_DWORD *)(v2 - 8);
    v7 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(AVSampleBufferAudioRenderer **)(v2 + 16 * v10);
    if (v11 != a2)
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(AVSampleBufferAudioRenderer **)(v2 + 16 * v10);
        ++v12;
        if (v11 == a2)
          goto LABEL_8;
      }
      v10 = *(unsigned int *)(v2 - 4);
    }
LABEL_8:
    if (v10 != *(_DWORD *)(v2 - 4))
    {
      v13 = (const void **)(v2 + 16 * v10);
      v26 = 0uLL;
      v27 = 0;
      v14 = (PAL *)objc_msgSend(*((id *)this + 24), "timebase");
      PAL::softLinkCoreMediaCMTimebaseGetTime[0](v14, v15);
      v16 = (void *)*((_QWORD *)this + 24);
      v24 = v26;
      v25 = v27;
      objc_msgSend(v16, "removeRenderer:atTime:completionHandler:", a2, &v24, 0);
      v17 = (const void **)*((_QWORD *)this + 23);
      if (!v17 || (v17 += 2 * *((unsigned int *)v17 - 1), v17 != v13))
      {
        if (v17 != v13)
        {
          v18 = *v13;
          *v13 = 0;
          if (v18)
            CFRelease(v18);
          *v13 = (const void *)-1;
          ++*(_DWORD *)(*v3 - 16);
          v19 = *v3;
          if (*v3)
            v20 = *(_DWORD *)(v19 - 12) - 1;
          else
            v20 = -1;
          *(_DWORD *)(v19 - 12) = v20;
          v21 = *v3;
          if (*v3)
          {
            v22 = 6 * *(_DWORD *)(v21 - 12);
            v23 = *(_DWORD *)(v21 - 4);
            if (v22 < v23 && v23 >= 9)
              WTF::HashTable<WTF::RetainPtr<void const*>,WTF::KeyValuePair<WTF::RetainPtr<void const*>,WebCore::MediaPlayerPrivateMediaSourceAVFObjC::AudioRendererProperties>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<void const*>,WebCore::MediaPlayerPrivateMediaSourceAVFObjC::AudioRendererProperties>>,WTF::DefaultHash<WTF::RetainPtr<void const*>>,WTF::HashMap<WTF::RetainPtr<void const*>,WebCore::MediaPlayerPrivateMediaSourceAVFObjC::AudioRendererProperties,WTF::DefaultHash<WTF::RetainPtr<void const*>>,WTF::HashTraits<WTF::RetainPtr<void const*>>,WTF::HashTraits<WebCore::MediaPlayerPrivateMediaSourceAVFObjC::AudioRendererProperties>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<void const*>>>::rehash(v3, v23 >> 1);
          }
        }
      }
    }
  }
}

unsigned __int8 *WebCore::MediaPlayerPrivateMediaSourceAVFObjC::removeAudioTrack(unsigned __int8 *this, WebCore::AudioTrackPrivate *a2)
{
  uint64_t v2;
  uint64_t v4;
  int v6;

  v2 = *((_QWORD *)this + 16);
  if (!v2)
    return this;
  v4 = *((_QWORD *)this + 17);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
LABEL_5:
    this = (unsigned __int8 *)MEMORY[0x19AEA534C](v2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v2))
    goto LABEL_5;
LABEL_6:
  if (*(_QWORD *)(v2 + 24))
    ++*(_QWORD *)(v2 + 8);
  else
    v4 = 0;
  v6 = __ldxr((unsigned __int8 *)v2);
  if (v6 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v2))
    {
      if (!v4)
        return this;
      goto LABEL_12;
    }
  }
  else
  {
    __clrex();
  }
  this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
  if (v4)
  {
LABEL_12:
    (*(void (**)(_QWORD, WebCore::AudioTrackPrivate *))(**(_QWORD **)(*(_QWORD *)(v4 + 8) + 8) + 368))(*(_QWORD *)(*(_QWORD *)(v4 + 8) + 8), a2);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v4);
  }
  return this;
}

unsigned __int8 *WebCore::MediaPlayerPrivateMediaSourceAVFObjC::removeVideoTrack(unsigned __int8 *this, WebCore::VideoTrackPrivate *a2)
{
  uint64_t v2;
  uint64_t v4;
  int v6;

  v2 = *((_QWORD *)this + 16);
  if (!v2)
    return this;
  v4 = *((_QWORD *)this + 17);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
LABEL_5:
    this = (unsigned __int8 *)MEMORY[0x19AEA534C](v2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v2))
    goto LABEL_5;
LABEL_6:
  if (*(_QWORD *)(v2 + 24))
    ++*(_QWORD *)(v2 + 8);
  else
    v4 = 0;
  v6 = __ldxr((unsigned __int8 *)v2);
  if (v6 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v2))
    {
      if (!v4)
        return this;
      goto LABEL_12;
    }
  }
  else
  {
    __clrex();
  }
  this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
  if (v4)
  {
LABEL_12:
    (*(void (**)(_QWORD, WebCore::VideoTrackPrivate *))(**(_QWORD **)(*(_QWORD *)(v4 + 8) + 8) + 384))(*(_QWORD *)(*(_QWORD *)(v4 + 8) + 8), a2);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v4);
  }
  return this;
}

void WebCore::MediaPlayerPrivateMediaSourceAVFObjC::characteristicsChanged(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this)
{
  uint64_t v2;
  uint64_t v3;
  int v5;

  WebCore::MediaPlayerPrivateMediaSourceAVFObjC::updateAllRenderersHaveAvailableSamples(this);
  v2 = *((_QWORD *)this + 16);
  if (!v2)
    return;
  v3 = *((_QWORD *)this + 17);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v2))
    goto LABEL_5;
LABEL_6:
  if (*(_QWORD *)(v2 + 24))
    ++*(_QWORD *)(v2 + 8);
  else
    v3 = 0;
  v5 = __ldxr((unsigned __int8 *)v2);
  if (v5 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v2))
    {
      if (!v3)
        return;
      goto LABEL_12;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
  if (v3)
  {
LABEL_12:
    (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v3 + 8) + 8) + 128))(*(_QWORD *)(*(_QWORD *)(v3 + 8)
                                                                                                  + 8));
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v3);
  }
}

id WebCore::MediaPlayerPrivateMediaSourceAVFObjC::createVideoFullscreenLayer@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = objc_alloc_init(MEMORY[0x1E0CD27A8]);
  *a1 = result;
  return result;
}

void WebCore::MediaPlayerPrivateMediaSourceAVFObjC::setVideoFullscreenLayer(uint64_t a1, const void *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  CFTypeRef v9;
  CFTypeRef cf;

  WebCore::MediaPlayerPrivateMediaSourceAVFObjC::updateLastImage((WebCore **)a1);
  v6 = *(_QWORD *)(a1 + 504);
  v7 = *(_QWORD *)(a1 + 272);
  if (v7)
  {
    v8 = *(const void **)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 48) + 16))(*(_QWORD *)(v7 + 48));
    cf = v8;
    if (v8)
      CFRetain(v8);
  }
  else
  {
    cf = 0;
  }
  WebCore::VideoLayerManagerObjC::setVideoFullscreenLayer(v6, a2, a3, &cf);
  v9 = cf;
  cf = 0;
  if (v9)
    CFRelease(v9);
}

void sub_194784890(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebCore::MediaPlayerPrivateMediaSourceAVFObjC::setVideoFullscreenFrame(uint64_t a1, float a2, float a3, float a4, float a5)
{
  return WebCore::VideoLayerManagerObjC::setVideoFullscreenFrame(*(WTF::StringImpl **)(a1 + 504), a2, a3, a4, a5);
}

float *WebCore::MediaPlayerPrivateMediaSourceAVFObjC::syncTextTrackBounds(float **this)
{
  return WebCore::VideoLayerManagerObjC::syncTextTrackBounds(this[63]);
}

uint64_t WebCore::MediaPlayerPrivateMediaSourceAVFObjC::setTextTrackRepresentation(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this, CALayer *a2)
{
  if (a2)
    a2 = (CALayer *)(*((uint64_t (**)(CALayer *))a2->super.isa + 3))(a2);
  return WebCore::VideoLayerManagerObjC::setTextTrackRepresentationLayer(*((_QWORD *)this + 63), a2);
}

_DWORD *WebCore::MediaPlayerPrivateMediaSourceAVFObjC::setWirelessPlaybackTarget(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *result;
  _QWORD v10[4];

  v4 = a1[61];
  v5 = (*(uint64_t (**)(_QWORD *))(*a1 + 1296))(a1);
  v6 = a1[62];
  v10[0] = v5;
  v10[1] = v7;
  v10[2] = "setWirelessPlaybackTarget";
  v10[3] = v6;
  if (*(_BYTE *)(v4 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)v10);
  v8 = *a2;
  *a2 = 0;
  result = (_DWORD *)a1[59];
  a1[59] = v8;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

unsigned __int8 *WebCore::MediaPlayerPrivateMediaSourceAVFObjC::setShouldPlayToPlaybackTarget(unsigned __int8 *this, int a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v10;
  uint64_t v11;
  _QWORD v12[4];
  char v13;

  v13 = a2;
  if (this[480] != a2)
  {
    v2 = a2;
    v3 = (uint64_t)this;
    v4 = *((_QWORD *)this + 61);
    this = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)this + 1296))(this);
    v5 = *(_QWORD *)(v3 + 496);
    v12[0] = this;
    v12[1] = v6;
    v12[2] = "setShouldPlayToPlaybackTarget";
    v12[3] = v5;
    if (*(_BYTE *)(v4 + 12))
    {
      this = (unsigned __int8 *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)v12);
      v2 = v13;
    }
    *(_BYTE *)(v3 + 480) = v2;
    v7 = *(_QWORD *)(v3 + 128);
    if (v7)
    {
      v8 = *(_QWORD *)(v3 + 136);
      if (__ldaxr((unsigned __int8 *)v7))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v7))
      {
        goto LABEL_9;
      }
      this = (unsigned __int8 *)MEMORY[0x19AEA534C](v7);
LABEL_9:
      if (*(_QWORD *)(v7 + 24))
        ++*(_QWORD *)(v7 + 8);
      else
        v8 = 0;
      v10 = __ldxr((unsigned __int8 *)v7);
      if (v10 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v7))
        {
          if (!v8)
            return this;
LABEL_18:
          v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 760))(v3);
          (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v8 + 8) + 8) + 208))(*(_QWORD *)(*(_QWORD *)(v8 + 8) + 8), v11);
          return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v8);
        }
      }
      else
      {
        __clrex();
      }
      this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v7);
      if (!v8)
        return this;
      goto LABEL_18;
    }
  }
  return this;
}

void sub_194784ACC(_Unwind_Exception *a1)
{
  unsigned __int8 **v1;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v1);
  _Unwind_Resume(a1);
}

BOOL WebCore::MediaPlayerPrivateMediaSourceAVFObjC::isCurrentPlaybackTargetWireless(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  _QWORD v11[4];
  char v12;

  v2 = *((_QWORD *)this + 59);
  if (!v2)
    return 0;
  if (*((_BYTE *)this + 480))
  {
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  }
  else
  {
    v4 = 0;
  }
  v12 = v4;
  v5 = *((_QWORD *)this + 61);
  v6 = (*(uint64_t (**)(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *))(*(_QWORD *)this + 1296))(this);
  v7 = *((_QWORD *)this + 62);
  v11[0] = v6;
  v11[1] = v8;
  v11[2] = "isCurrentPlaybackTargetWireless";
  v11[3] = v7;
  if (*(_BYTE *)(v5 + 12))
  {
    if (WebCore::LogMediaSource)
      v9 = byte_1ECE7CE70 >= 3u;
    else
      v9 = 0;
    if (v9)
    {
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogMediaSource, 3, (WTF::Logger::LogSiteIdentifier *)v11);
      return v12 != 0;
    }
  }
  return v4;
}

uint64_t WebCore::MediaPlayerPrivateMediaSourceAVFObjC::performTaskAtTime(uint64_t a1, uint64_t *a2, WTF::MediaTime *this)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  int v9;
  double v10;
  uint64_t v11;
  const void *v12;
  const void *v13;
  const void *v14;
  uint64_t v15;
  _QWORD v17[5];
  _BYTE v18[12];
  unsigned int v19;
  _QWORD v20[6];
  uint64_t v21;
  _QWORD v22[2];

  v22[1] = *MEMORY[0x1E0C80C00];
  v20[0] = 0;
  v20[1] = v20;
  v20[2] = 0x3812000000;
  v20[3] = __Block_byref_object_copy__33;
  v20[4] = __Block_byref_object_dispose__34;
  v5 = *a2;
  *a2 = 0;
  v20[5] = 0;
  v21 = v5;
  v6 = *(_QWORD *)(a1 + 256);
  if (v6)
    objc_msgSend(*(id *)(a1 + 192), "removeTimeObserver:");
  v7 = *(void **)(a1 + 192);
  v8 = (void *)MEMORY[0x1E0CB3B18];
  if ((*((_BYTE *)this + 12) & 0x20) != 0)
  {
    WTF::MediaTime::toDouble(this);
    PAL::softLinkCoreMediaCMTimeMakeWithSeconds((PAL *)*((unsigned int *)this + 2), v10, v9);
  }
  else
  {
    PAL::softLinkCoreMediaCMTimeMake(*(PAL **)this, *((unsigned int *)this + 2), v6);
  }
  v19 = v19 & 0xFFFFFFFE | *((_BYTE *)this + 12) & 1 | *((_BYTE *)this + 12) & 0xE;
  v22[0] = objc_msgSend(v8, "valueWithCMTime:", v18);
  v11 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v22, 1);
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 3221225472;
  v17[2] = ___ZN7WebCore36MediaPlayerPrivateMediaSourceAVFObjC17performTaskAtTimeEON3WTF8FunctionIFvvEEERKNS1_9MediaTimeE_block_invoke;
  v17[3] = &unk_1E3204818;
  v17[4] = v20;
  v12 = (const void *)objc_msgSend(v7, "addBoundaryTimeObserverForTimes:queue:usingBlock:", v11, MEMORY[0x1E0C80D38], v17);
  v13 = v12;
  if (v12)
    CFRetain(v12);
  v14 = *(const void **)(a1 + 256);
  *(_QWORD *)(a1 + 256) = v13;
  if (v14)
    CFRelease(v14);
  _Block_object_dispose(v20, 8);
  v15 = v21;
  v21 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  return 1;
}

void sub_194784D84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v25;

  _Block_object_dispose(&a18, 8);
  v25 = a24;
  a24 = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__33(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 48) = v2;
  return result;
}

uint64_t __Block_byref_object_dispose__34(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t ___ZN7WebCore36MediaPlayerPrivateMediaSourceAVFObjC17performTaskAtTimeEON3WTF8FunctionIFvvEEERKNS1_9MediaTimeE_block_invoke(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
}

unsigned int *WebCore::MediaPlayerPrivateMediaSourceAVFObjC::startVideoFrameMetadataGathering(unsigned int *this)
{
  unsigned int *v1;
  void *v2;
  int v3;
  uint64_t v4;
  void *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  char v11;
  const void *v12;
  void *v13;
  const void *v14;
  const void *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  _QWORD v20[4];
  WTF *v21;
  _BYTE v22[24];

  if (*((_QWORD *)this + 66))
    return this;
  v1 = this;
  *((_BYTE *)this + 536) = 1;
  (*(void (**)(unsigned int *))(*(_QWORD *)this + 792))(this);
  v2 = (void *)*((_QWORD *)v1 + 24);
  PAL::softLinkCoreMediaCMTimeMake((PAL *)1, 60, v3);
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 3321888768;
  v20[2] = ___ZN7WebCore36MediaPlayerPrivateMediaSourceAVFObjC32startVideoFrameMetadataGatheringEv_block_invoke;
  v20[3] = &__block_descriptor_40_e8_32c94_ZTSKZN7WebCore36MediaPlayerPrivateMediaSourceAVFObjC32startVideoFrameMetadataGatheringEvE3__0_e15_v32__0___qiIq_8l;
  v4 = *((_QWORD *)v1 + 6);
  if (v4)
    goto LABEL_28;
  v4 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = v1;
  v6 = (unsigned int *)*((_QWORD *)v1 + 6);
  *((_QWORD *)v1 + 6) = v4;
  if (!v6)
    goto LABEL_28;
  do
  {
    v7 = __ldaxr(v6);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, v6));
  if (!v8)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, v5);
  }
  v4 = *((_QWORD *)v1 + 6);
  if (v4)
  {
LABEL_28:
    do
      v9 = __ldaxr((unsigned int *)v4);
    while (__stlxr(v9 + 1, (unsigned int *)v4));
    do
      v10 = __ldaxr((unsigned int *)v4);
    while (__stlxr(v10 + 1, (unsigned int *)v4));
    v11 = 0;
  }
  else
  {
    v11 = 1;
  }
  v21 = (WTF *)v4;
  v12 = (const void *)objc_msgSend(v2, "addPeriodicTimeObserverForInterval:queue:usingBlock:", v22, MEMORY[0x1E0C80D38], v20);
  v14 = v12;
  if (v12)
    CFRetain(v12);
  v15 = (const void *)*((_QWORD *)v1 + 66);
  *((_QWORD *)v1 + 66) = v14;
  if (v15)
  {
    CFRelease(v15);
    if ((v11 & 1) != 0)
      goto LABEL_20;
    do
    {
LABEL_17:
      v16 = __ldaxr((unsigned int *)v4);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, (unsigned int *)v4));
    if (!v17)
    {
      atomic_store(1u, (unsigned int *)v4);
      WTF::fastFree((WTF *)v4, v13);
    }
    goto LABEL_20;
  }
  if ((v11 & 1) == 0)
    goto LABEL_17;
LABEL_20:
  this = (unsigned int *)v21;
  v21 = 0;
  if (this)
  {
    do
    {
      v18 = __ldaxr(this);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, this));
    if (!v19)
    {
      atomic_store(1u, this);
      return (unsigned int *)WTF::fastFree((WTF *)this, v13);
    }
  }
  return this;
}

void sub_194784FB4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF *a13)
{
  unsigned int *v13;
  char v14;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;

  if (!a13)
    goto LABEL_4;
  do
  {
    v16 = __ldaxr((unsigned int *)a13);
    v17 = v16 - 1;
  }
  while (__stlxr(v17, (unsigned int *)a13));
  if (!v17)
  {
    atomic_store(1u, (unsigned int *)a13);
    WTF::fastFree(a13, a2);
    if ((v14 & 1) != 0)
      goto LABEL_8;
  }
  else
  {
LABEL_4:
    if ((v14 & 1) != 0)
      goto LABEL_8;
  }
  do
  {
    v18 = __ldaxr(v13);
    v19 = v18 - 1;
  }
  while (__stlxr(v19, v13));
  if (!v19)
  {
    atomic_store(1u, v13);
    WTF::fastFree((WTF *)v13, a2);
  }
LABEL_8:
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN7WebCore36MediaPlayerPrivateMediaSourceAVFObjC32startVideoFrameMetadataGatheringEv_block_invoke(uint64_t a1, __int128 *a2)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(unsigned int **)(a1 + 32);
  if (v2)
  {
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
  }
  v6 = *a2;
  v7 = *((_QWORD *)a2 + 2);
  v4 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v4 = &off_1E3205A70;
  *(_QWORD *)(v4 + 8) = v2;
  *(_OWORD *)(v4 + 16) = v6;
  *(_QWORD *)(v4 + 32) = v7;
  v8 = v4;
  WTF::ensureOnMainThread();
  result = v8;
  if (v8)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return result;
}

void sub_1947850B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c94_ZTSKZN7WebCore36MediaPlayerPrivateMediaSourceAVFObjC32startVideoFrameMetadataGatheringEvE3__0(uint64_t result, uint64_t a2)
{
  unsigned int *v2;
  unsigned int v3;

  v2 = *(unsigned int **)(a2 + 32);
  if (v2)
  {
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
  }
  *(_QWORD *)(result + 32) = v2;
  return result;
}

unsigned int *__destroy_helper_block_e8_32c94_ZTSKZN7WebCore36MediaPlayerPrivateMediaSourceAVFObjC32startVideoFrameMetadataGatheringEvE3__0(uint64_t a1, void *a2)
{
  unsigned int *result;
  unsigned int v4;
  unsigned int v5;

  result = *(unsigned int **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr(result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, result));
    if (!v5)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

void WebCore::MediaPlayerPrivateMediaSourceAVFObjC::stopVideoFrameMetadataGathering(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this)
{
  const void *v2;

  *((_BYTE *)this + 536) = 0;
  (*(void (**)(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *))(*(_QWORD *)this + 792))(this);
  *((_BYTE *)this + 544) = 0;
  *((_BYTE *)this + 640) = 0;
  if (*((_QWORD *)this + 66))
  {
    objc_msgSend(*((id *)this + 24), "removeTimeObserver:");
    v2 = (const void *)*((_QWORD *)this + 66);
    *((_QWORD *)this + 66) = 0;
    if (v2)
      CFRelease(v2);
  }
  else
  {
    *((_QWORD *)this + 66) = 0;
  }
}

uint64_t WebCore::MediaPlayerPrivateMediaSourceAVFObjC::setShouldDisableHDR(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this, _BOOL8 a2)
{
  _BOOL8 v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[4];
  BOOL v10;

  v2 = a2;
  v10 = a2;
  result = objc_opt_respondsToSelector();
  if ((result & 1) != 0)
  {
    v5 = *((_QWORD *)this + 61);
    v6 = (*(uint64_t (**)(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *))(*(_QWORD *)this + 1296))(this);
    v7 = *((_QWORD *)this + 62);
    v9[0] = v6;
    v9[1] = v8;
    v9[2] = "setShouldDisableHDR";
    v9[3] = v7;
    if (*(_BYTE *)(v5 + 12))
    {
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)v9);
      v2 = v10;
    }
    return objc_msgSend(*((id *)this + 21), "setToneMapToStandardDynamicRange:", v2);
  }
  return result;
}

void WebCore::MediaPlayerPrivateMediaSourceAVFObjC::playerContentBoxRectChanged(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this, const WebCore::LayoutRect *a2)
{
  BOOL v2;

  if (*((_QWORD *)this + 21))
    v2 = 1;
  else
    v2 = *((_DWORD *)a2 + 2) < 1;
  if (!v2 && *((_DWORD *)a2 + 3) >= 1)
  {
    if (WebCore::MediaPlayerPrivateMediaSourceAVFObjC::shouldEnsureLayerOrVideoRenderer(this))
    {
      WebCore::MediaPlayerPrivateMediaSourceAVFObjC::destroyDecompressionSession(this);
      WebCore::MediaPlayerPrivateMediaSourceAVFObjC::ensureLayerOrVideoRenderer((unsigned __int8 *)this);
    }
    else
    {
      WebCore::MediaPlayerPrivateMediaSourceAVFObjC::destroyLayerOrVideoRenderer(this);
      WebCore::MediaPlayerPrivateMediaSourceAVFObjC::ensureDecompressionSession(this);
    }
  }
}

char *`non-virtual thunk to'WebCore::MediaPlayerPrivateMediaSourceAVFObjC::logChannel(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this)
{
  return &WebCore::LogMediaSource;
}

uint64_t WebCore::MediaPlayerPrivateMediaSourceAVFObjC::setShouldMaintainAspectRatio(uint64_t this, int a2)
{
  uint64_t v2;
  PAL *v3;
  void *v4;
  uint64_t AVFoundation_AVLayerVideoGravityResizeAspect;

  if (*(unsigned __int8 *)(this + 660) != a2)
  {
    v2 = this;
    *(_BYTE *)(this + 660) = a2;
    if (*(_QWORD *)(this + 168))
    {
      objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
      objc_msgSend(MEMORY[0x1E0CD28B0], "setAnimationDuration:", 0.0);
      v3 = (PAL *)objc_msgSend(MEMORY[0x1E0CD28B0], "setDisableActions:", 1);
      v4 = *(void **)(v2 + 168);
      if (*(_BYTE *)(v2 + 660))
        AVFoundation_AVLayerVideoGravityResizeAspect = PAL::get_AVFoundation_AVLayerVideoGravityResizeAspect(v3);
      else
        AVFoundation_AVLayerVideoGravityResizeAspect = PAL::get_AVFoundation_AVLayerVideoGravityResize(v3);
      objc_msgSend(v4, "setVideoGravity:", AVFoundation_AVLayerVideoGravityResizeAspect);
      return objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
    }
  }
  return this;
}

uint64_t WebCore::MediaPlayerPrivateMediaSourceAVFObjC::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 56);
  return this;
}

_DWORD *WebCore::MediaPlayerPrivateMediaSourceAVFObjC::deref(_DWORD *this)
{
  if (this[14] == 1)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 8))(this);
  --this[14];
  return this;
}

uint64_t WebCore::MediaPlayerPrivateInterface::timedMetadata(WebCore::MediaPlayerPrivateInterface *this)
{
  return 0;
}

void WebCore::MediaPlayerPrivateInterface::accessLog(_QWORD *a1@<X8>)
{
  _DWORD *v2;

  v2 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v2 += 2;
  *a1 = v2;
}

void WebCore::MediaPlayerPrivateInterface::errorLog(_QWORD *a1@<X8>)
{
  _DWORD *v2;

  v2 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v2 += 2;
  *a1 = v2;
}

uint64_t WebCore::MediaPlayerPrivateInterface::platformErrorCode(WebCore::MediaPlayerPrivateInterface *this)
{
  return 0;
}

uint64_t WebCore::MediaPlayerPrivateMediaSourceAVFObjC::supportsPictureInPicture(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this)
{
  return 1;
}

uint64_t WebCore::MediaPlayerPrivateMediaSourceAVFObjC::supportsFullscreen(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this)
{
  return 1;
}

uint64_t WebCore::MediaPlayerPrivateInterface::canSaveMediaData(WebCore::MediaPlayerPrivateInterface *this)
{
  return 0;
}

uint64_t WebCore::MediaPlayerPrivateInterface::getStartDate(WebCore::MediaPlayerPrivateInterface *this)
{
  return WTF::MediaTime::createWithDouble(this, NAN);
}

uint64_t WebCore::MediaPlayerPrivateInterface::hasClosedCaptions(WebCore::MediaPlayerPrivateInterface *this)
{
  return 0;
}

double WebCore::MediaPlayerPrivateInterface::maxFastForwardRate(WebCore::MediaPlayerPrivateInterface *this)
{
  return INFINITY;
}

double WebCore::MediaPlayerPrivateInterface::minFastReverseRate(WebCore::MediaPlayerPrivateInterface *this)
{
  return -INFINITY;
}

double WebCore::MediaPlayerPrivateInterface::seekableTimeRangesLastModifiedTime(WebCore::MediaPlayerPrivateInterface *this)
{
  return 0.0;
}

double WebCore::MediaPlayerPrivateInterface::liveUpdateInterval(WebCore::MediaPlayerPrivateInterface *this)
{
  return 0.0;
}

uint64_t WebCore::MediaPlayerPrivateInterface::totalBytes(WebCore::MediaPlayerPrivateInterface *this)
{
  return 0;
}

void WebCore::MediaPlayerPrivateInterface::wirelessPlaybackTargetName(_QWORD *a1@<X8>)
{
  _DWORD *v2;

  v2 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v2 += 2;
  *a1 = v2;
}

uint64_t WebCore::MediaPlayerPrivateInterface::wirelessPlaybackTargetType(WebCore::MediaPlayerPrivateInterface *this)
{
  return 0;
}

uint64_t WebCore::MediaPlayerPrivateMediaSourceAVFObjC::wirelessVideoPlaybackDisabled(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this)
{
  return 0;
}

uint64_t WebCore::MediaPlayerPrivateInterface::canPlayToWirelessPlaybackTarget(WebCore::MediaPlayerPrivateInterface *this)
{
  return 0;
}

uint64_t WebCore::MediaPlayerPrivateMediaSourceAVFObjC::didPassCORSAccessCheck(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this)
{
  return 1;
}

uint64_t WebCore::MediaPlayerPrivateInterface::isCrossOrigin()
{
  return 0;
}

uint64_t WebCore::MediaPlayerPrivateInterface::mediaTimeForTimeValue(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2;
}

uint64_t WebCore::MediaPlayerPrivateInterface::audioSourceProvider(WebCore::MediaPlayerPrivateInterface *this)
{
  return 0;
}

void WebCore::MediaPlayerPrivateInterface::createSession(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::MediaPlayerPrivateMediaSourceAVFObjC::beginSimulatedHDCPError(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[4];
  char v9;

  v9 = 1;
  v2 = *((_QWORD *)this + 61);
  result = (*(uint64_t (**)(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *))(*(_QWORD *)this + 1296))(this);
  v4 = *((_QWORD *)this + 62);
  v8[0] = result;
  v8[1] = v5;
  v8[2] = "outputObscuredDueToInsufficientExternalProtectionChanged";
  v8[3] = v4;
  if (*(_BYTE *)(v2 + 12))
    result = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)v8);
  v6 = *((_QWORD *)this + 19);
  if (v6)
  {
    result = *(_QWORD *)(v6 + 216);
    if (result)
    {
      if (v9)
        v7 = 2;
      else
        v7 = 1;
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 88))(result, v7);
    }
  }
  return result;
}

uint64_t WebCore::MediaPlayerPrivateMediaSourceAVFObjC::endSimulatedHDCPError(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[4];
  char v9;

  v9 = 0;
  v2 = *((_QWORD *)this + 61);
  result = (*(uint64_t (**)(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *))(*(_QWORD *)this + 1296))(this);
  v4 = *((_QWORD *)this + 62);
  v8[0] = result;
  v8[1] = v5;
  v8[2] = "outputObscuredDueToInsufficientExternalProtectionChanged";
  v8[3] = v4;
  if (*(_BYTE *)(v2 + 12))
    result = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)v8);
  v6 = *((_QWORD *)this + 19);
  if (v6)
  {
    result = *(_QWORD *)(v6 + 216);
    if (result)
    {
      if (v9)
        v7 = 2;
      else
        v7 = 1;
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 88))(result, v7);
    }
  }
  return result;
}

uint64_t WebCore::MediaPlayerPrivateInterface::fileSize(WebCore::MediaPlayerPrivateInterface *this)
{
  return 0;
}

uint64_t WebCore::MediaPlayerPrivateInterface::objCAVFoundationAVPlayer(WebCore::MediaPlayerPrivateInterface *this)
{
  return 0;
}

uint64_t WebCore::MediaPlayerPrivateMediaSourceAVFObjC::supportsPlayAtHostTime(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this)
{
  return 1;
}

uint64_t WebCore::MediaPlayerPrivateMediaSourceAVFObjC::supportsPauseAtHostTime(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this)
{
  return 1;
}

__n128 WebCore::MediaPlayerPrivateMediaSourceAVFObjC::videoFrameMetadata@<Q0>(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  __n128 result;

  v2 = *((_OWORD *)this + 39);
  *(_OWORD *)(a2 + 64) = *((_OWORD *)this + 38);
  *(_OWORD *)(a2 + 80) = v2;
  *(_QWORD *)(a2 + 96) = *((_QWORD *)this + 80);
  v3 = *((_OWORD *)this + 35);
  *(_OWORD *)a2 = *((_OWORD *)this + 34);
  *(_OWORD *)(a2 + 16) = v3;
  result = *((__n128 *)this + 37);
  *(_OWORD *)(a2 + 32) = *((_OWORD *)this + 36);
  *(__n128 *)(a2 + 48) = result;
  *((_BYTE *)this + 544) = 0;
  *((_BYTE *)this + 640) = 0;
  return result;
}

void WebCore::MediaPlayerPrivateMediaSourceAVFObjC::setResourceOwner(uint64_t a1, const WTF::MachSendRight *a2)
{
  _BYTE v2[4];

  WTF::MachSendRight::MachSendRight((WTF::MachSendRight *)v2, a2);
  WTF::MachSendRight::operator=();
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v2);
}

const char *WebCore::MediaPlayerPrivateMediaSourceAVFObjC::logClassName(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this)
{
  return "MediaPlayerPrivateMediaSourceAVFObjC";
}

uint64_t `non-virtual thunk to'WebCore::MediaPlayerPrivateMediaSourceAVFObjC::logger(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this)
{
  return *((_QWORD *)this + 53);
}

const char *`non-virtual thunk to'WebCore::MediaPlayerPrivateMediaSourceAVFObjC::logClassName(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this)
{
  return "MediaPlayerPrivateMediaSourceAVFObjC";
}

uint64_t `non-virtual thunk to'WebCore::MediaPlayerPrivateMediaSourceAVFObjC::logIdentifier(WebCore::MediaPlayerPrivateMediaSourceAVFObjC *this)
{
  return *((_QWORD *)this + 54);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::EffectiveRateChangedListener::effectiveRateChanged(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;

  *a1 = &off_1E32058D8;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(unsigned int **)(v3 + 8);
      *(_QWORD *)(v3 + 8) = 0;
      if (v7)
      {
        do
        {
          v8 = __ldaxr(v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v7));
        if (!v9)
        {
          atomic_store(1u, v7);
          v10 = v3;
          WTF::fastFree((WTF *)v7, a2);
          v3 = v10;
        }
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::EffectiveRateChangedListener::effectiveRateChanged(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;

  *(_QWORD *)this = &off_1E32058D8;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(unsigned int **)(v3 + 8);
      *(_QWORD *)(v3 + 8) = 0;
      if (v7)
      {
        do
        {
          v8 = __ldaxr(v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v7));
        if (!v9)
        {
          atomic_store(1u, v7);
          v10 = v3;
          WTF::fastFree((WTF *)v7, a2);
          v3 = v10;
        }
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::EffectiveRateChangedListener::effectiveRateChanged(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v10;
  double v11;
  _QWORD v12[4];

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  if (v1)
  {
    v2 = *(_QWORD **)(v1 + 8);
    if (v2)
    {
      v3 = v2[61];
      v4 = (*(uint64_t (**)(_QWORD *))(*v2 + 1296))(v2);
      v5 = v2[62];
      v12[0] = v4;
      v12[1] = v6;
      v12[2] = "effectiveRateChanged";
      v12[3] = v5;
      v11 = (*(double (**)(_QWORD *))(*v2 + 456))(v2);
      if (*(_BYTE *)(v3 + 12))
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,double>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)v12, &v11);
      v7 = v2[16];
      if (v7)
      {
        v8 = v2[17];
        if (__ldaxr((unsigned __int8 *)v7))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v7))
        {
          goto LABEL_10;
        }
        MEMORY[0x19AEA534C](v7);
LABEL_10:
        if (*(_QWORD *)(v7 + 24))
          ++*(_QWORD *)(v7 + 8);
        else
          v8 = 0;
        v10 = __ldxr((unsigned __int8 *)v7);
        if (v10 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v7))
          {
LABEL_18:
            if (v8)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v8 + 8) + 8) + 72))(*(_QWORD *)(*(_QWORD *)(v8 + 8) + 8));
              WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v8);
            }
            return;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v7);
        goto LABEL_18;
      }
    }
  }
}

void WebCore::MediaPlayerFactoryMediaSourceAVFObjC::~MediaPlayerFactoryMediaSourceAVFObjC(WebCore::MediaPlayerFactoryMediaSourceAVFObjC *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 0;
    v4 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v4)
    {
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v4);
        WTF::fastFree((WTF *)v4, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 0;
    v4 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v4)
    {
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v4);
        WTF::fastFree((WTF *)v4, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::MediaPlayerFactoryMediaSourceAVFObjC::identifier(WebCore::MediaPlayerFactoryMediaSourceAVFObjC *this)
{
  return 1;
}

unsigned int *WebCore::MediaPlayerFactoryMediaSourceAVFObjC::createMediaEnginePlayer@<X0>(WebCore::MediaPlayer *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v5;
  PAL *v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t StatusReg;
  unsigned int *v13;
  unsigned int v14;
  WTF::MediaTime *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  WebCore::VideoLayerManagerObjC *v19;
  double v20;
  uint64_t v21;
  const void *v22;
  _QWORD *v23;
  uint64_t v24;
  void *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  __CFNotificationCenter *LocalCenter;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  void *v40;
  PAL *v41;
  uint64_t v42;
  int v43;
  int v44;
  double v45;
  const void *v46;
  const void *v47;
  const void *v48;
  void *v49;
  unsigned int *result;
  unsigned int v51;
  unsigned int v52;
  _QWORD v53[6];
  __int128 v54;
  __int128 v55;
  PAL *v56;
  uint64_t v57;
  _BYTE v58[12];
  unsigned int v59;
  _QWORD v60[6];
  WTF *v61;
  __int128 v62;
  __int128 v63;

  v5 = WTF::fastMalloc((WTF *)0x298);
  *(_QWORD *)(v5 + 48) = 0;
  *(_DWORD *)(v5 + 56) = 1;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)v5 = off_1E340D798;
  *(_BYTE *)(v5 + 24) = 0;
  v6 = (PAL *)WTF::MediaTime::invalidTime((WTF::MediaTime *)v5);
  *(_OWORD *)(v5 + 32) = *(_OWORD *)v6;
  *(_QWORD *)v5 = off_1E3205288;
  *(_QWORD *)(v5 + 64) = &unk_1E32057C0;
  *(_BYTE *)(v5 + 72) = 0;
  *(_BYTE *)(v5 + 120) = 0;
  if (!a1 || (v7 = *(_QWORD *)a1) == 0)
  {
    v9 = 0;
    goto LABEL_15;
  }
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_8;
  }
  v6 = (PAL *)MEMORY[0x19AEA534C](v7);
LABEL_8:
  if (*(_QWORD *)(v7 + 24))
  {
    ++*(_QWORD *)(v7 + 16);
    v9 = v7;
  }
  else
  {
    v9 = 0;
  }
  v10 = __ldxr((unsigned __int8 *)v7);
  if (v10 != 1)
  {
    __clrex();
    goto LABEL_14;
  }
  if (__stlxr(0, (unsigned __int8 *)v7))
LABEL_14:
    v6 = (PAL *)WTF::Lock::unlockSlow((WTF::Lock *)v7);
LABEL_15:
  *(_OWORD *)(v5 + 144) = 0u;
  *(_QWORD *)(v5 + 128) = v9;
  *(_QWORD *)(v5 + 136) = a1;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  v11 = objc_msgSend(objc_alloc((Class)PAL::getAVSampleBufferRenderSynchronizerClass(v6)), "init");
  *(_OWORD *)(v5 + 224) = 0u;
  *(_QWORD *)(v5 + 192) = v11;
  *(_OWORD *)(v5 + 288) = 0u;
  *(_OWORD *)(v5 + 304) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_OWORD *)(v5 + 272) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_QWORD *)(v5 + 320) = 0;
  *(_QWORD *)(v5 + 328) = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)(v5 + 336) = 0u;
  *(_OWORD *)(v5 + 352) = 0u;
  v13 = *(unsigned int **)(StatusReg + 736);
  if (!v13)
    v13 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 + 1, v13));
  *(_QWORD *)(v5 + 368) = v13;
  *(_QWORD *)(v5 + 328) = off_1E31F7378;
  v15 = (WTF::MediaTime *)WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v15 = off_1E3205A98;
  *((_QWORD *)v15 + 1) = WebCore::MediaPlayerPrivateMediaSourceAVFObjC::seekInternal;
  *((_QWORD *)v15 + 2) = 0;
  *((_QWORD *)v15 + 3) = v5;
  *(_QWORD *)(v5 + 376) = v15;
  *(_QWORD *)(v5 + 384) = 0;
  *(_DWORD *)(v5 + 391) = 0;
  *(_OWORD *)(v5 + 400) = *(_OWORD *)WTF::MediaTime::invalidTime(v15);
  *(_QWORD *)(v5 + 416) = 0;
  *(_DWORD *)(v5 + 424) = 10000000;
  *(_BYTE *)(v5 + 428) = 1;
  *(_QWORD *)(v5 + 432) = 0;
  *(_QWORD *)(v5 + 440) = 0x3FF0000000000000;
  *(_WORD *)(v5 + 448) = 0;
  *(_QWORD *)(v5 + 452) = 2;
  *(_BYTE *)(v5 + 460) = 0;
  *(_QWORD *)(v5 + 464) = 0;
  *(_QWORD *)(v5 + 472) = 0;
  *(_BYTE *)(v5 + 480) = 0;
  v16 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)a1 + 1) + 8) + 672))(*(_QWORD *)(*((_QWORD *)a1 + 1) + 8));
  v17 = (unsigned int *)(v16 + 8);
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 + 1, v17));
  *(_QWORD *)(v5 + 488) = v16;
  *(_QWORD *)(v5 + 496) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)a1 + 1) + 8) + 664))(*(_QWORD *)(*((_QWORD *)a1 + 1) + 8));
  v19 = (WebCore::VideoLayerManagerObjC *)WTF::fastMalloc((WTF *)0x50);
  v20 = WebCore::VideoLayerManagerObjC::VideoLayerManagerObjC(v19, *(const WTF::Logger **)(v5 + 488), *(const void **)(v5 + 496));
  *(_QWORD *)(v5 + 504) = v21;
  v22 = (const void *)objc_msgSend(*(id *)(v5 + 192), "timebase", v20);
  v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v23 = 1;
  v24 = *(_QWORD *)(v5 + 48);
  if (v24)
    goto LABEL_53;
  v24 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v24 = 1;
  *(_QWORD *)(v24 + 8) = v5;
  v26 = *(unsigned int **)(v5 + 48);
  *(_QWORD *)(v5 + 48) = v24;
  if (!v26)
    goto LABEL_53;
  do
  {
    v27 = __ldaxr(v26);
    v28 = v27 - 1;
  }
  while (__stlxr(v28, v26));
  if (!v28)
  {
    atomic_store(1u, v26);
    WTF::fastFree((WTF *)v26, v25);
  }
  v24 = *(_QWORD *)(v5 + 48);
  if (v24)
  {
LABEL_53:
    do
      v29 = __ldaxr((unsigned int *)v24);
    while (__stlxr(v29 + 1, (unsigned int *)v24));
  }
  v23[1] = v24;
  LocalCenter = CFNotificationCenterGetLocalCenter();
  if (PAL::get_CoreMedia_kCMTimebaseNotification_EffectiveRateChanged(void)::once != -1)
    dispatch_once(&PAL::get_CoreMedia_kCMTimebaseNotification_EffectiveRateChanged(void)::once, &__block_literal_global_183_0);
  CFNotificationCenterAddObserver(LocalCenter, v23, (CFNotificationCallback)WebCore::timebaseEffectiveRateChangedCallback, (CFStringRef)PAL::get_CoreMedia_kCMTimebaseNotification_EffectiveRateChanged(void)::constantCoreMediakCMTimebaseNotification_EffectiveRateChanged, v22, (CFNotificationSuspensionBehavior)0);
  *(_QWORD *)(v5 + 512) = v23;
  *(_BYTE *)(v5 + 544) = 0;
  *(_BYTE *)(v5 + 640) = 0;
  *(_QWORD *)(v5 + 648) = 0;
  *(_DWORD *)(v5 + 656) = 0;
  *(_BYTE *)(v5 + 536) = 0;
  *(_OWORD *)(v5 + 520) = 0u;
  *(_WORD *)(v5 + 660) = 1;
  *(_QWORD *)&v62 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 1296))(v5);
  *((_QWORD *)&v62 + 1) = v31;
  v33 = *(_QWORD *)(v5 + 488);
  v32 = *(_QWORD *)(v5 + 496);
  *(_QWORD *)&v63 = "MediaPlayerPrivateMediaSourceAVFObjC";
  *((_QWORD *)&v63 + 1) = v32;
  if (*(_BYTE *)(v33 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)&v62);
  v60[0] = 0;
  v60[1] = v60;
  v60[2] = 0x3812000000;
  v60[3] = __Block_byref_object_copy__1;
  v60[4] = __Block_byref_object_dispose__1;
  v60[5] = "";
  v34 = *(_QWORD *)(v5 + 48);
  if (v34)
    goto LABEL_54;
  v34 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v34 = 1;
  *(_QWORD *)(v34 + 8) = v5;
  v36 = *(unsigned int **)(v5 + 48);
  *(_QWORD *)(v5 + 48) = v34;
  if (!v36)
    goto LABEL_54;
  do
  {
    v37 = __ldaxr(v36);
    v38 = v37 - 1;
  }
  while (__stlxr(v38, v36));
  if (!v38)
  {
    atomic_store(1u, v36);
    WTF::fastFree((WTF *)v36, v35);
  }
  v34 = *(_QWORD *)(v5 + 48);
  if (v34)
  {
LABEL_54:
    do
      v39 = __ldaxr((unsigned int *)v34);
    while (__stlxr(v39 + 1, (unsigned int *)v34));
  }
  v61 = (WTF *)v34;
  v40 = *(void **)(v5 + 192);
  v41 = (PAL *)WTF::MediaTime::createWithDouble((WTF::MediaTime *)v34, 3600.0);
  v56 = v41;
  v57 = v42;
  if ((v42 & 0x2000000000) != 0)
  {
    WTF::MediaTime::toDouble((WTF::MediaTime *)&v56);
    PAL::softLinkCoreMediaCMTimeMakeWithSeconds((PAL *)v57, v45, v44);
  }
  else
  {
    PAL::softLinkCoreMediaCMTimeMake(v41, v42, v43);
  }
  v59 = v59 & 0xFFFFFFFE | BYTE4(v57) & 1 | BYTE4(v57) & 0xE;
  v53[0] = MEMORY[0x1E0C809B0];
  v53[1] = 3221225472;
  v53[2] = ___ZN7WebCore36MediaPlayerPrivateMediaSourceAVFObjCC2EPNS_11MediaPlayerE_block_invoke;
  v53[3] = &unk_1E32057F8;
  v53[4] = v60;
  v53[5] = v5;
  v54 = v62;
  v55 = v63;
  v46 = (const void *)objc_msgSend(v40, "addPeriodicTimeObserverForInterval:queue:usingBlock:", v58, MEMORY[0x1E0C80D38], v53);
  v47 = v46;
  if (v46)
    CFRetain(v46);
  v48 = *(const void **)(v5 + 240);
  *(_QWORD *)(v5 + 240) = v47;
  if (v48)
    CFRelease(v48);
  _Block_object_dispose(v60, 8);
  result = (unsigned int *)v61;
  v61 = 0;
  if (result)
  {
    do
    {
      v51 = __ldaxr(result);
      v52 = v51 - 1;
    }
    while (__stlxr(v52, result));
    if (!v52)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, v49);
    }
  }
  *a2 = v5;
  return result;
}

void sub_194785FA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void **a10, _QWORD *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,WTF *a33)
{
  uint64_t v33;
  unsigned int **v34;
  uint64_t v35;
  WebCore::TimerBase *v36;
  unsigned int **v37;
  _QWORD *v38;
  void *v40;
  const void *v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  WTF *v45;
  const void *v46;
  const void *v47;
  const void *v48;
  const void *v49;
  unsigned int *v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int *v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  _DWORD *v58;
  const void *v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  void *v64;
  unint64_t v65;
  unint64_t v66;
  WTF *v67;
  uint64_t v68;
  const void *v69;
  uint64_t v70;
  const void **v71;
  uint64_t v72;
  const void *v73;
  const void **v74;
  uint64_t v75;
  const void *v76;
  unsigned __int8 **v77;
  unsigned __int8 *v78;
  uint64_t v80;
  uint64_t v81;
  WebCore::WebCoreDecompressionSession *v82;
  BOOL v83;
  int v84;
  WTF *v85;
  void *v86;
  WTF *v87;
  const void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  BOOL v95;
  int v96;
  const void *v97;
  const void *v98;
  const void *v99;
  const void *v100;
  const void *v101;
  uint64_t v102;
  const void *v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int *v106;
  unsigned int v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;
  const void **v111;
  const void *v112;
  const void *v113;
  const void *v114;
  const void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  BOOL v122;
  int v123;
  unsigned int *v124;
  unsigned int v125;
  unsigned int v126;
  uint64_t v127;
  uint64_t v129;
  uint64_t v130;
  int v131;
  WTF *v132;
  uint64_t v133;
  unsigned int *v134;
  unsigned int v135;
  unsigned int v136;
  int v137;
  uint64_t v138;

  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(v33 + 656));
  v41 = *(const void **)(v33 + 528);
  *(_QWORD *)(v33 + 528) = 0;
  if (v41)
    CFRelease(v41);
  v42 = *(_QWORD *)(v33 + 512);
  *(_QWORD *)(v33 + 512) = 0;
  if (v42)
  {
    do
    {
      v43 = __ldaxr((unsigned int *)v42);
      v44 = v43 - 1;
    }
    while (__stlxr(v44, (unsigned int *)v42));
    if (!v44)
    {
      atomic_store(1u, (unsigned int *)v42);
      v106 = *(unsigned int **)(v42 + 8);
      *(_QWORD *)(v42 + 8) = 0;
      if (v106)
      {
        do
        {
          v107 = __ldaxr(v106);
          v108 = v107 - 1;
        }
        while (__stlxr(v108, v106));
        if (!v108)
        {
          atomic_store(1u, v106);
          WTF::fastFree((WTF *)v106, v40);
        }
      }
      WTF::fastFree((WTF *)v42, v40);
    }
  }
  v45 = *(WTF **)(v33 + 504);
  *(_QWORD *)(v33 + 504) = 0;
  if (v45)
  {
    v46 = (const void *)*((_QWORD *)v45 + 9);
    *((_QWORD *)v45 + 9) = 0;
    if (v46)
      CFRelease(v46);
    v47 = (const void *)*((_QWORD *)v45 + 8);
    *((_QWORD *)v45 + 8) = 0;
    if (v47)
      CFRelease(v47);
    v48 = (const void *)*((_QWORD *)v45 + 5);
    *((_QWORD *)v45 + 5) = 0;
    if (v48)
      CFRelease(v48);
    v49 = (const void *)*((_QWORD *)v45 + 4);
    *((_QWORD *)v45 + 4) = 0;
    if (v49)
      CFRelease(v49);
    v50 = (unsigned int *)*((_QWORD *)v45 + 2);
    *((_QWORD *)v45 + 2) = 0;
    if (v50)
    {
      v51 = v50 + 2;
      do
      {
        v52 = __ldaxr(v51);
        v53 = v52 - 1;
      }
      while (__stlxr(v53, v51));
      if (!v53)
      {
        atomic_store(1u, v50 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v50 + 8))(v50);
      }
    }
    WTF::fastFree(v45, v40);
  }
  v54 = *(unsigned int **)(v33 + 488);
  *(_QWORD *)(v33 + 488) = 0;
  if (v54)
  {
    v55 = v54 + 2;
    do
    {
      v56 = __ldaxr(v55);
      v57 = v56 - 1;
    }
    while (__stlxr(v57, v55));
    if (!v57)
    {
      atomic_store(1u, v54 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v54 + 8))(v54);
    }
  }
  v58 = *(_DWORD **)(v33 + 472);
  *(_QWORD *)(v33 + 472) = 0;
  if (v58)
  {
    if (v58[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v58 + 8))(v58);
    else
      --v58[2];
  }
  v59 = *a10;
  *a10 = 0;
  if (v59)
    CFRelease(v59);
  v60 = *v34;
  *v34 = 0;
  if (v60)
  {
    do
    {
      v61 = __ldaxr(v60);
      v62 = v61 - 1;
    }
    while (__stlxr(v62, v60));
    if (!v62)
    {
      atomic_store(1u, v60);
      WTF::fastFree((WTF *)v60, v40);
    }
  }
  *(_QWORD *)(v33 + 328) = v35;
  v63 = *(_QWORD *)(v33 + 376);
  *(_QWORD *)(v33 + 376) = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  WebCore::TimerBase::~TimerBase(v36);
  v65 = *(_QWORD *)(v33 + 296);
  v66 = *(_QWORD *)(v33 + 304);
  v67 = *(WTF **)(v33 + 312);
  if (v65 <= v66)
  {
    if (v65 == v66)
      goto LABEL_60;
    v74 = (const void **)((char *)v67 + 8 * v65);
    v75 = 8 * v66 - 8 * v65;
    do
    {
      v76 = *v74;
      *v74 = 0;
      if (v76)
        CFRelease(v76);
      ++v74;
      v75 -= 8;
    }
    while (v75);
  }
  else
  {
    if (v66)
    {
      v68 = 8 * v66;
      do
      {
        v69 = *(const void **)v67;
        *(_QWORD *)v67 = 0;
        if (v69)
          CFRelease(v69);
        v67 = (WTF *)((char *)v67 + 8);
        v68 -= 8;
      }
      while (v68);
      v67 = *(WTF **)(v33 + 312);
      v65 = *(_QWORD *)(v33 + 296);
    }
    v70 = *(unsigned int *)(v33 + 320);
    if (v65 != v70)
    {
      v71 = (const void **)((char *)v67 + 8 * v65);
      v72 = 8 * v70 - 8 * v65;
      do
      {
        v73 = *v71;
        *v71 = 0;
        if (v73)
          CFRelease(v73);
        ++v71;
        v72 -= 8;
      }
      while (v72);
    }
  }
  v67 = *(WTF **)(v33 + 312);
LABEL_60:
  if (v67)
  {
    *(_QWORD *)(v33 + 312) = 0;
    *(_DWORD *)(v33 + 320) = 0;
    WTF::fastFree(v67, v64);
  }
  v77 = *(unsigned __int8 ***)(v33 + 288);
  *(_QWORD *)(v33 + 288) = 0;
  if (!v77)
  {
LABEL_80:
    v87 = *(WTF **)(v33 + 280);
    *(_QWORD *)(v33 + 280) = 0;
    if (v87)
    {
      v88 = *(const void **)v87;
      *(_QWORD *)v87 = 0;
      if (v88)
        CFRelease(v88);
      WTF::fastFree(v87, v64);
    }
    v89 = *(_QWORD *)(v33 + 272);
    *(_QWORD *)(v33 + 272) = 0;
    if (!v89)
    {
LABEL_102:
      v97 = *(const void **)(v33 + 264);
      *(_QWORD *)(v33 + 264) = 0;
      if (v97)
        CFRelease(v97);
      v98 = *(const void **)(v33 + 256);
      *(_QWORD *)(v33 + 256) = 0;
      if (v98)
        CFRelease(v98);
      v99 = *(const void **)(v33 + 248);
      *(_QWORD *)(v33 + 248) = 0;
      if (v99)
        CFRelease(v99);
      v100 = *(const void **)(v33 + 240);
      *(_QWORD *)(v33 + 240) = 0;
      if (v100)
        CFRelease(v100);
      v101 = *(const void **)(v33 + 232);
      *(_QWORD *)(v33 + 232) = 0;
      if (v101)
        CFRelease(v101);
      if ((_QWORD *)*v38 == a11)
      {
        v102 = 4;
      }
      else
      {
        if (!*v38)
          goto LABEL_117;
        v102 = 5;
        a11 = (_QWORD *)*v38;
      }
      (*(void (**)(void))(*a11 + 8 * v102))();
LABEL_117:
      v103 = *(const void **)(v33 + 192);
      *(_QWORD *)(v33 + 192) = 0;
      if (v103)
        CFRelease(v103);
      v109 = *(_QWORD *)(v33 + 184);
      if (v109)
      {
        v110 = *(unsigned int *)(v109 - 4);
        if ((_DWORD)v110)
        {
          v111 = *(const void ***)(v33 + 184);
          do
          {
            v112 = *v111;
            if (*v111 != (const void *)-1)
            {
              *v111 = 0;
              if (v112)
                CFRelease(v112);
            }
            v111 += 2;
            --v110;
          }
          while (v110);
        }
        WTF::fastFree((WTF *)(v109 - 16), v64);
      }
      v113 = *(const void **)(v33 + 176);
      *(_QWORD *)(v33 + 176) = 0;
      if (v113)
        CFRelease(v113);
      v114 = *(const void **)(v33 + 168);
      *(_QWORD *)(v33 + 168) = 0;
      if (v114)
        CFRelease(v114);
      v115 = *(const void **)(v33 + 160);
      *(_QWORD *)(v33 + 160) = 0;
      if (v115)
        CFRelease(v115);
      v116 = *(_QWORD *)(v33 + 152);
      *(_QWORD *)(v33 + 152) = 0;
      if (!v116)
      {
LABEL_157:
        if (*v37)
        {
          *((_QWORD *)*v37 + 1) = 0;
          v124 = *v37;
          *v37 = 0;
          if (v124)
          {
            do
            {
              v125 = __ldaxr(v124);
              v126 = v125 - 1;
            }
            while (__stlxr(v126, v124));
            if (!v126)
            {
              atomic_store(1u, v124);
              WTF::fastFree((WTF *)v124, v64);
            }
          }
        }
        else
        {
          *v37 = 0;
        }
        v127 = *(_QWORD *)(v33 + 128);
        *(_QWORD *)(v33 + 128) = 0;
        if (!v127)
          goto LABEL_177;
        if (__ldaxr((unsigned __int8 *)v127))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v127))
        {
          goto LABEL_169;
        }
        MEMORY[0x19AEA534C](v127);
LABEL_169:
        v129 = *(_QWORD *)(v127 + 16) - 1;
        *(_QWORD *)(v127 + 16) = v129;
        if (!v129)
        {
          v130 = *(_QWORD *)(v127 + 8);
          v131 = __ldxr((unsigned __int8 *)v127);
          if (v131 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v127))
            {
LABEL_175:
              if (!v130)
                WTF::fastFree((WTF *)v127, v64);
              goto LABEL_177;
            }
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v127);
          goto LABEL_175;
        }
        v137 = __ldxr((unsigned __int8 *)v127);
        if (v137 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v127))
            goto LABEL_177;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v127);
LABEL_177:
        *(_QWORD *)v33 = off_1E340D798;
        v132 = *(WTF **)(v33 + 8);
        if (v132)
        {
          *(_QWORD *)(v33 + 8) = 0;
          *(_DWORD *)(v33 + 16) = 0;
          WTF::fastFree(v132, v64);
        }
        v133 = *(_QWORD *)(v33 + 48);
        if (v133)
        {
          *(_QWORD *)(v133 + 8) = 0;
          v134 = *(unsigned int **)(v33 + 48);
          *(_QWORD *)(v33 + 48) = 0;
          if (v134)
          {
            do
            {
              v135 = __ldaxr(v134);
              v136 = v135 - 1;
            }
            while (__stlxr(v136, v134));
            if (!v136)
            {
              atomic_store(1u, v134);
              WTF::fastFree((WTF *)v134, v64);
            }
          }
        }
        else
        {
          *(_QWORD *)(v33 + 48) = 0;
        }
        WTF::fastFree((WTF *)v33, v64);
        _Unwind_Resume(a1);
      }
      v117 = *(_QWORD *)(v116 + 8);
      if (__ldaxr((unsigned __int8 *)v117))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v117))
      {
LABEL_145:
        v119 = *(_QWORD *)(v117 + 8);
        v120 = v119 - 1;
        *(_QWORD *)(v117 + 8) = v119 - 1;
        if (v119 == 1)
        {
          v138 = *(_QWORD *)(v117 + 16);
          v121 = *(_QWORD *)(v117 + 24);
          *(_QWORD *)(v117 + 24) = 0;
          v122 = v138 != 0;
        }
        else
        {
          v121 = 0;
          v122 = 1;
        }
        v123 = __ldxr((unsigned __int8 *)v117);
        if (v123 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v117))
          {
LABEL_152:
            if (!v120)
            {
              if (v121)
                (*(void (**)(uint64_t))(*(_QWORD *)v121 + 8))(v121);
              if (!v122)
                WTF::fastFree((WTF *)v117, v64);
            }
            goto LABEL_157;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v117);
        goto LABEL_152;
      }
      MEMORY[0x19AEA534C](v117);
      goto LABEL_145;
    }
    v90 = *(_QWORD *)(v89 + 8);
    if (__ldaxr((unsigned __int8 *)v90))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v90))
    {
LABEL_90:
      v92 = *(_QWORD *)(v90 + 8);
      v93 = v92 - 1;
      *(_QWORD *)(v90 + 8) = v92 - 1;
      if (v92 == 1)
      {
        v105 = *(_QWORD *)(v90 + 16);
        v94 = *(_QWORD *)(v90 + 24);
        *(_QWORD *)(v90 + 24) = 0;
        v95 = v105 != 0;
      }
      else
      {
        v94 = 0;
        v95 = 1;
      }
      v96 = __ldxr((unsigned __int8 *)v90);
      if (v96 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v90))
        {
LABEL_97:
          if (!v93)
          {
            if (v94)
              (*(void (**)(uint64_t))(*(_QWORD *)v94 + 8))(v94);
            if (!v95)
              WTF::fastFree((WTF *)v90, v64);
          }
          goto LABEL_102;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v90);
      goto LABEL_97;
    }
    MEMORY[0x19AEA534C](v90);
    goto LABEL_90;
  }
  v78 = *v77;
  if (__ldaxr(*v77))
  {
    __clrex();
  }
  else if (!__stxr(1u, v78))
  {
LABEL_68:
    v80 = *((_QWORD *)v78 + 1);
    v81 = v80 - 1;
    *((_QWORD *)v78 + 1) = v80 - 1;
    if (v80 == 1)
    {
      v104 = *((_QWORD *)v78 + 2);
      v82 = (WebCore::WebCoreDecompressionSession *)*((_QWORD *)v78 + 3);
      *((_QWORD *)v78 + 3) = 0;
      v83 = v104 != 0;
    }
    else
    {
      v82 = 0;
      v83 = 1;
    }
    v84 = __ldxr(v78);
    if (v84 == 1)
    {
      if (!__stlxr(0, v78))
      {
LABEL_75:
        if (!v81)
        {
          if (v82)
          {
            WebCore::WebCoreDecompressionSession::~WebCoreDecompressionSession(v82);
            WTF::fastFree(v85, v86);
          }
          if (!v83)
            WTF::fastFree((WTF *)v78, v64);
        }
        goto LABEL_80;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v78);
    goto LABEL_75;
  }
  MEMORY[0x19AEA534C](v78);
  goto LABEL_68;
}

WTF::StringImpl **WebCore::MediaPlayerFactoryMediaSourceAVFObjC::getSupportedTypes(uint64_t a1, WTF::StringImpl ***a2)
{
  uint64_t *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl **result;
  WTF::StringImpl **v6;

  {
    unk_1EE2F4EB8 = 0u;
    unk_1EE2F4EA8 = 0u;
    WebCore::AVStreamDataParserMIMETypeCache::singleton(void)::cache = (uint64_t)off_1E334D068;
  }
  v3 = WebCore::AVStreamDataParserMIMETypeCache::supportedTypes((WebCore::AVStreamDataParserMIMETypeCache *)&WebCore::AVStreamDataParserMIMETypeCache::singleton(void)::cache);
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)&v6, (_QWORD **)v3);
  result = *a2;
  *a2 = v6;
  v6 = result;
  if (result)
    return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(result, v4);
  return result;
}

uint64_t WebCore::MediaPlayerFactoryMediaSourceAVFObjC::supportsTypeAndCodecs(WebCore::MediaPlayerFactoryMediaSourceAVFObjC *this, const WebCore::MediaEngineSupportParameters *a2, double a3, double a4, float a5)
{
  uint64_t result;
  const WebCore::ContentType *v7;
  double v8;
  double v9;
  float v10;
  unsigned int isContentTypeSupported;
  const WebCore::ContentType *v12;

  if (!*((_BYTE *)a2 + 56))
    return 0;
  result = WebCore::contentTypeMeetsContainerAndCodecTypeRequirements(a2, (uint64_t)a2 + 80, (uint64_t)a2 + 104, a3, a4, a5);
  if ((_DWORD)result)
  {
    isContentTypeSupported = WebCore::SourceBufferParserWebM::isContentTypeSupported(a2, v7, v8, v9, v10);
    LODWORD(result) = WebCore::SourceBufferParserAVFObjC::isContentTypeSupported(a2, v12);
    if (isContentTypeSupported <= result)
      result = result;
    else
      result = isContentTypeSupported;
    if ((_DWORD)result == 1)
      return WebCore::contentTypeMeetsHardwareDecodeRequirements((uint64_t)a2, (uint64_t)a2 + 64);
  }
  return result;
}

void WebCore::MediaPlayerFactory::originsInMediaCache(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::MediaPlayerFactory::supportsKeySystem(WebCore::MediaPlayerFactory *this, const WTF::String *a2, const WTF::String *a3)
{
  return 0;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseINS_9MediaTimeEN7WebCore18PlatformMediaErrorELj0EE11whenSettledIZNS4_36MediaPlayerPrivateMediaSourceAVFObjC12seekInternalEvE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIS3_S5_EEE_vJSN_EED1Ev(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E3205960;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseINS_9MediaTimeEN7WebCore18PlatformMediaErrorELj0EE11whenSettledIZNS4_36MediaPlayerPrivateMediaSourceAVFObjC12seekInternalEvE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIS3_S5_EEE_vJSN_EED0Ev(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E3205960;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseINS_9MediaTimeEN7WebCore18PlatformMediaErrorELj0EE11whenSettledIZNS4_36MediaPlayerPrivateMediaSourceAVFObjC12seekInternalEvE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIS3_S5_EEE_vJSN_EE4callESN_(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  _BOOL4 v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  void *v29;
  double v30;
  int v31;
  double v32;
  WTF *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int *v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  const char *v49;
  uint64_t v50;
  char v51[12];
  unsigned int v52;
  _QWORD v53[2];
  __int128 v54;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 && *(_QWORD *)(v2 + 8))
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (*(_DWORD *)(v4 + 452) | *((_DWORD *)a2 + 4))
    {
      v15 = *(_QWORD *)(v4 + 488);
      v16 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v4 + 1296))(*(_QWORD *)(a1 + 8));
      v17 = *(_QWORD *)(v4 + 496);
      v46 = v16;
      v47 = v18;
      *(_QWORD *)&v48 = "operator()";
      *((_QWORD *)&v48 + 1) = v17;
      if (*(_BYTE *)(v15 + 12))
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27]>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)&v46, "seek Interrupted, aborting");
    }
    else
    {
      v54 = *a2;
      v5 = *((_BYTE *)a2 + 12);
      v6 = *((_DWORD *)a2 + 2);
      *(_QWORD *)(v4 + 416) = *(_QWORD *)a2;
      *(_DWORD *)(v4 + 424) = v6;
      *(_BYTE *)(v4 + 428) = v5;
      v7 = *(_QWORD *)(v4 + 488);
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 1296))(v4);
      v9 = *(_QWORD *)(v4 + 496);
      v46 = v8;
      v47 = v10;
      *(_QWORD *)&v48 = "operator()";
      *((_QWORD *)&v48 + 1) = v9;
      if (*(_BYTE *)(v7 + 12))
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)&v46);
      v11 = *(void **)(v4 + 192);
      if (v11)
      {
        objc_msgSend(v11, "currentTime");
        v12 = v46;
        LODWORD(v13) = v47;
        v14 = HIDWORD(v47);
      }
      else
      {
        LODWORD(v13) = 0;
        v12 = 0;
        v14 = 0;
      }
      v19 = v14 & 1;
      if ((~v14 & 3) == 0)
        v19 = v14 & 1 | 2;
      if ((~v14 & 5) == 0)
        v19 |= 4u;
      if ((~v14 & 9) == 0)
        v19 |= 8u;
      if ((~v14 & 0x11) != 0)
        v20 = v19;
      else
        v20 = v19 | 0x10;
      v22 = (v20 & 1) == 0 || (_DWORD)v13 != 0;
      if (v12 >= 0)
        v23 = 5;
      else
        v23 = 9;
      if (!v22)
        v20 = v23;
      v13 = v13;
      if (!v22)
      {
        v12 >>= 63;
        v13 = 1;
      }
      v53[0] = v12;
      v53[1] = v13 | ((unint64_t)v20 << 32);
      *(_BYTE *)(v4 + 449) = WTF::MediaTime::compare((WTF::MediaTime *)v53, (const WTF::MediaTime *)&v54) != 0;
      v24 = *(_QWORD *)(v4 + 488);
      v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 1296))(v4);
      v26 = *(_QWORD *)(v4 + 496);
      v46 = v25;
      v47 = v27;
      *(_QWORD *)&v48 = "operator()";
      *((_QWORD *)&v48 + 1) = v26;
      if (*(_BYTE *)(v24 + 12))
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [14],WTF::MediaTime,char [22],WTF::MediaTime,char [24],BOOL>((uint64_t)&WebCore::LogMediaSource, 0, (WTF::Logger::LogSiteIdentifier *)&v46, "seekedTime = ", (WTF::MediaTime *)&v54, ", synchronizerTime = ", (WTF::MediaTime *)v53, "synchronizer seeking = ", v4 + 449);
      if (*(_BYTE *)(v4 + 449))
      {
        WebCore::MediaSourcePrivateAVFObjC::willSeek(*(WebCore::MediaSourcePrivateAVFObjC **)(v4 + 152));
        v29 = *(void **)(v4 + 192);
        if ((BYTE12(v54) & 0x20) != 0)
        {
          WTF::MediaTime::toDouble((WTF::MediaTime *)&v54);
          PAL::softLinkCoreMediaCMTimeMakeWithSeconds((PAL *)DWORD2(v54), v32, v31);
        }
        else
        {
          PAL::softLinkCoreMediaCMTimeMake((PAL *)v54, DWORD2(v54), v28);
        }
        v52 = v52 & 0xFFFFFFFE | BYTE12(v54) & 1 | BYTE12(v54) & 0xE;
        LODWORD(v30) = 0;
        objc_msgSend(v29, "setRate:time:", v51, v30);
        v33 = WebCore::MediaSourcePrivate::seekToTime(*(WebCore::MediaSourcePrivate **)(v4 + 152), (const WTF::MediaTime *)&v54, (uint64_t *)&v45);
        v34 = (uint64_t)v45;
        v35 = WTF::RunLoop::current(v33);
        v36 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 16) = 0;
        v37 = WTF::fastMalloc((WTF *)0x50);
        (*(void (**)(uint64_t))(*(_QWORD *)v35 + 32))(v35);
        v38 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v38 = &off_1E3205988;
        v38[1] = v4;
        v38[2] = v36;
        *(_DWORD *)(v37 + 8) = 1;
        *(_QWORD *)(v37 + 16) = v35;
        *(_QWORD *)(v37 + 24) = 0;
        *(_QWORD *)(v37 + 32) = 0;
        *(_QWORD *)(v37 + 40) = "operator()";
        *(_QWORD *)(v37 + 48) = 0;
        *(_WORD *)(v37 + 56) = 0;
        *(_QWORD *)v37 = &off_1E32059B0;
        v39 = (unsigned int *)(v34 + 8);
        *(_QWORD *)(v37 + 64) = 0;
        *(_QWORD *)(v37 + 72) = v38;
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 + 1, v39));
        v46 = v34;
        v47 = v37;
        v48 = 0uLL;
        v49 = "operator()";
        v50 = 0;
        WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCommand<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallback<false,void>>::~ThenCommand(&v46);
        v41 = v45;
        v45 = 0;
        if (v41)
        {
          v42 = v41 + 2;
          do
          {
            v43 = __ldaxr(v42);
            v44 = v43 - 1;
          }
          while (__stlxr(v44, v42));
          if (!v44)
          {
            atomic_store(1u, v41 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v41 + 16))(v41);
          }
        }
      }
      else
      {
        WebCore::MediaPlayerPrivateMediaSourceAVFObjC::maybeCompleteSeek((WebCore::MediaPlayerPrivateMediaSourceAVFObjC *)v4);
      }
    }
  }
}

void sub_194786CE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned int *a13)
{
  WTF *v13;
  unsigned int *v14;
  uint64_t v15;
  void *v17;
  void *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;

  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
  WTF::fastFree(v13, v17);
  if (v14)
  {
    do
    {
      v19 = __ldaxr(v14);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v14));
    if (!v20)
    {
      atomic_store(1u, v14);
      WTF::fastFree((WTF *)v14, v18);
    }
  }
  if (a13)
  {
    v21 = a13 + 2;
    do
    {
      v22 = __ldaxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
    {
      atomic_store(1u, a13 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)a13 + 16))(a13);
    }
  }
  _Unwind_Resume(a1);
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [14],WTF::MediaTime,char [22],WTF::MediaTime,char [24],BOOL>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4, WTF::MediaTime *a5, const char *a6, WTF::MediaTime *a7, const char *a8, uint64_t a9)
{
  WTF::StringImpl *v10;
  WTF::StringImpl *result;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  NSObject *v19;
  uint64_t v20;
  void *v21;
  char *v22;
  unsigned __int8 *v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  WTF::Logger *v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::Logger *v39;
  uint64_t v40;
  WTF::StringImpl **v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  int v50;
  uint64_t v51;
  WTF::Logger *v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  __int128 buf;
  int v74;
  WTF::StringImpl *v75;
  int v76;
  WTF::StringImpl *v77;
  int v78;
  WTF::StringImpl *v79;
  int v80;
  WTF::StringImpl *v81;
  int v82;
  WTF::StringImpl *v83;
  int v84;
  WTF::StringImpl *v85;
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  WTF::String::String((WTF::String *)&v65, a4);
  WTF::MediaTime::toJSONString(a5);
  WTF::String::String((WTF::String *)&v63, a6);
  WTF::MediaTime::toJSONString(a7);
  WTF::String::String((WTF::String *)&v61, a8);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v10 = (WTF::StringImpl *)buf;
  v59 = v65;
  v72 = v64;
  *(_QWORD *)&buf = v66;
  v71 = v63;
  v69 = v61;
  v70 = v62;
  v68 = v10;
  result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v59, (uint64_t *)&v72, (uint64_t *)&v71, (uint64_t *)&v70, (uint64_t *)&v69, (uint64_t *)&v68, &v67);
  if (v67)
  {
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v12);
      else
        *(_DWORD *)v10 -= 2;
    }
    v13 = v61;
    v61 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = v62;
    v62 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v12);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = v63;
    v63 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v12);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = v64;
    v64 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v12);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = v65;
    v65 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v12);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = v66;
    v66 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v12);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = *(NSObject **)(a1 + 32);
    v20 = os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v20)
    {
      WTF::String::utf8();
      v22 = v59 ? (char *)v59 + 16 : 0;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v22;
      _os_log_impl(&dword_1940B8000, v19, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      v20 = (uint64_t)v59;
      v59 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 1)
          v20 = WTF::fastFree((WTF *)v20, v21);
        else
          --*(_DWORD *)v20;
      }
    }
    if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
    {
      v23 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v24 = *v23;
        if ((v24 & 1) != 0)
          break;
        v25 = __ldaxr(v23);
        if (v25 == v24)
        {
          if (!__stxr(v24 | 1, v23))
          {
            v26 = WTF::Logger::observers((WTF::Logger *)v20);
            v27 = *(unsigned int *)(v26 + 12);
            if ((_DWORD)v27)
            {
              v28 = *(uint64_t **)v26;
              v51 = *(_QWORD *)v26 + 8 * v27;
              do
              {
                v29 = *v28;
                LODWORD(buf) = 0;
                WTF::Logger::LogSiteIdentifier::toString(this);
                v74 = 0;
                WTF::String::String((WTF::String *)&v75, a4);
                v76 = 1;
                WTF::MediaTime::toJSONString(a5);
                v78 = 0;
                WTF::String::String((WTF::String *)&v79, a6);
                v80 = 1;
                WTF::MediaTime::toJSONString(a7);
                v82 = 0;
                WTF::String::String((WTF::String *)&v83, a8);
                v84 = 0;
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v85 = v72;
                v59 = 0;
                v60 = 0;
                v30 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x70);
                LODWORD(v60) = 7;
                v59 = v30;
                v31 = HIDWORD(v60);
                *((_DWORD *)v30 + 4 * HIDWORD(v60)) = buf;
                v32 = *((_QWORD *)&buf + 1);
                if (*((_QWORD *)&buf + 1))
                  **((_DWORD **)&buf + 1) += 2;
                *((_QWORD *)v30 + 2 * v31 + 1) = v32;
                *((_DWORD *)v30 + 4 * (v31 + 1)) = v74;
                v33 = v75;
                if (v75)
                  *(_DWORD *)v75 += 2;
                *((_QWORD *)v30 + 2 * (v31 + 1) + 1) = v33;
                *((_DWORD *)v30 + 4 * (v31 + 2)) = v76;
                v34 = v77;
                if (v77)
                  *(_DWORD *)v77 += 2;
                *((_QWORD *)v30 + 2 * (v31 + 2) + 1) = v34;
                *((_DWORD *)v30 + 4 * (v31 + 3)) = v78;
                v35 = v79;
                if (v79)
                  *(_DWORD *)v79 += 2;
                *((_QWORD *)v30 + 2 * (v31 + 3) + 1) = v35;
                *((_DWORD *)v30 + 4 * (v31 + 4)) = v80;
                v36 = v81;
                if (v81)
                  *(_DWORD *)v81 += 2;
                *((_QWORD *)v30 + 2 * (v31 + 4) + 1) = v36;
                *((_DWORD *)v30 + 4 * (v31 + 5)) = v82;
                v37 = v83;
                if (v83)
                  *(_DWORD *)v83 += 2;
                *((_QWORD *)v30 + 2 * (v31 + 5) + 1) = v37;
                *((_DWORD *)v30 + 4 * (v31 + 6)) = v84;
                v38 = v85;
                if (v85)
                  *(_DWORD *)v85 += 2;
                *((_QWORD *)v30 + 2 * (v31 + 6) + 1) = v38;
                HIDWORD(v60) = v31 + 7;
                (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v29 + 16))(v29, a1, a2, &v59);
                v39 = v59;
                if (HIDWORD(v60))
                {
                  v40 = 16 * HIDWORD(v60);
                  v41 = (WTF::StringImpl **)((char *)v59 + 8);
                  do
                  {
                    v42 = *v41;
                    *v41 = 0;
                    if (v42)
                    {
                      if (*(_DWORD *)v42 == 2)
                        WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v21);
                      else
                        *(_DWORD *)v42 -= 2;
                    }
                    v41 += 2;
                    v40 -= 16;
                  }
                  while (v40);
                  v39 = v59;
                }
                if (v39)
                {
                  v59 = 0;
                  LODWORD(v60) = 0;
                  WTF::fastFree(v39, v21);
                }
                v43 = v85;
                v85 = 0;
                if (v43)
                {
                  if (*(_DWORD *)v43 == 2)
                    WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v21);
                  else
                    *(_DWORD *)v43 -= 2;
                }
                v44 = v83;
                v83 = 0;
                if (v44)
                {
                  if (*(_DWORD *)v44 == 2)
                    WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v21);
                  else
                    *(_DWORD *)v44 -= 2;
                }
                v45 = v81;
                v81 = 0;
                if (v45)
                {
                  if (*(_DWORD *)v45 == 2)
                    WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v21);
                  else
                    *(_DWORD *)v45 -= 2;
                }
                v46 = v79;
                v79 = 0;
                if (v46)
                {
                  if (*(_DWORD *)v46 == 2)
                    WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v21);
                  else
                    *(_DWORD *)v46 -= 2;
                }
                v47 = v77;
                v77 = 0;
                if (v47)
                {
                  if (*(_DWORD *)v47 == 2)
                    WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v21);
                  else
                    *(_DWORD *)v47 -= 2;
                }
                v48 = v75;
                v75 = 0;
                if (v48)
                {
                  if (*(_DWORD *)v48 == 2)
                    WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v21);
                  else
                    *(_DWORD *)v48 -= 2;
                }
                v49 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                *((_QWORD *)&buf + 1) = 0;
                if (v49)
                {
                  if (*(_DWORD *)v49 == 2)
                    WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v21);
                  else
                    *(_DWORD *)v49 -= 2;
                }
                ++v28;
              }
              while (v28 != (uint64_t *)v51);
            }
            v50 = __ldxr(v23);
            if (v50 == 1)
            {
              if (!__stlxr(0, v23))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    result = v67;
    v67 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v21);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

void sub_194787544(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,WTF *a27,int a28,int a29,WTF::StringImpl *a30,WTF::StringImpl *a31,WTF::StringImpl *a32,WTF::StringImpl *a33,WTF::StringImpl *a34,uint64_t a35,WTF::StringImpl *a36)
{
  unsigned __int8 *v36;
  int v38;

  v38 = __ldxr(v36);
  if (v38 == 1)
  {
    if (!__stlxr(0, v36))
    {
LABEL_6:
      if (a36)
      {
        if (*(_DWORD *)a36 == 2)
          WTF::StringImpl::destroy(a36, a2);
        else
          *(_DWORD *)a36 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN7WebCore18PlatformMediaErrorELj0EE11whenSettledIZZNS3_36MediaPlayerPrivateMediaSourceAVFObjC12seekInternalEvEN3__0clINSt12experimental15fundamentals_v38expectedINS_9MediaTimeES4_EEEEDaOT_EUlvE_EEDaRNS_34RefCountedSerialFunctionDispatcherESH_RKNS_6Logger17LogSiteIdentifierEEUlONSC_IvS4_EEE_vJSR_EED1Ev(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E3205988;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN7WebCore18PlatformMediaErrorELj0EE11whenSettledIZZNS3_36MediaPlayerPrivateMediaSourceAVFObjC12seekInternalEvEN3__0clINSt12experimental15fundamentals_v38expectedINS_9MediaTimeES4_EEEEDaOT_EUlvE_EEDaRNS_34RefCountedSerialFunctionDispatcherESH_RKNS_6Logger17LogSiteIdentifierEEUlONSC_IvS4_EEE_vJSR_EED0Ev(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E3205988;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN7WebCore18PlatformMediaErrorELj0EE11whenSettledIZZNS3_36MediaPlayerPrivateMediaSourceAVFObjC12seekInternalEvEN3__0clINSt12experimental15fundamentals_v38expectedINS_9MediaTimeES4_EEEEDaOT_EUlvE_EEDaRNS_34RefCountedSerialFunctionDispatcherESH_RKNS_6Logger17LogSiteIdentifierEEUlONSC_IvS4_EEE_vJSR_EE4callESR_(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    if (*(_QWORD *)(v1 + 8))
      WebCore::MediaPlayerPrivateMediaSourceAVFObjC::maybeCompleteSeek(*(WebCore::MediaPlayerPrivateMediaSourceAVFObjC **)(a1 + 8));
  }
}

_QWORD *WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallback<false,void>::~ThenCallback(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  *a1 = &off_1E32059B0;
  v3 = a1[9];
  a1[9] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (uint64_t *)a1[8];
  a1[8] = 0;
  if (v4)
  {
    if (*v4)
    {
      WTF::NativePromise<void,void,0u>::assertIsDead(*v4);
      v5 = (unsigned int *)*v4;
      *v4 = 0;
      if (v5)
      {
        v6 = v5 + 2;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          atomic_store(1u, v5 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
        }
      }
    }
    else
    {
      *v4 = 0;
    }
    WTF::fastFree((WTF *)v4, a2);
  }
  *a1 = off_1E3205AE8;
  v9 = a1[2];
  a1[2] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
  return a1;
}

void sub_194787A44(_Unwind_Exception *exception_object)
{
  unsigned int **v1;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *v1;
  *v1 = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallback<false,void>::~ThenCallback(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  *(_QWORD *)this = &off_1E32059B0;
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (uint64_t *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
  {
    if (*v4)
    {
      WTF::NativePromise<void,void,0u>::assertIsDead(*v4);
      v5 = (unsigned int *)*v4;
      *v4 = 0;
      if (v5)
      {
        v6 = v5 + 2;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          atomic_store(1u, v5 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
        }
      }
    }
    else
    {
      *v4 = 0;
    }
    WTF::fastFree((WTF *)v4, a2);
  }
  *(_QWORD *)this = off_1E3205AE8;
  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
  return WTF::fastFree(this, a2);
}

void sub_194787B5C(_Unwind_Exception *exception_object)
{
  unsigned int **v1;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *v1;
  *v1 = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallback<false,void>::disconnect(uint64_t a1)
{
  uint64_t result;

  *(_BYTE *)(a1 + 56) = 1;
  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallback<false,void>::processResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  _BYTE *v7;
  BOOL v8;
  char *v9;
  unsigned __int8 *v10;
  uint64_t *v12;
  int v13;
  WTF::NativePromiseBase *v14;
  void *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v19;
  int v20;
  int v21;
  _BYTE *v22;
  uint64_t result;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  _QWORD v28[4];

  v6 = *(unsigned __int8 *)(a3 + 1);
  v28[0] = a1;
  v7 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v7)
    v8 = v7[16] >= 4u;
  else
    v8 = 0;
  if (v8)
  {
    if (v6)
      v9 = "Rejecting";
    else
      v9 = "Resolving";
    WTF::Logger::log<char [10],char [24],WTF::Logger::LogSiteIdentifier,char [2],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,char [11],void const*,char [2]>((uint64_t)v7, 4u, v9, " then() call made from ", (WTF::Logger::LogSiteIdentifier *)(a1 + 24), "[", a2, " callback:", (uint64_t)v28, "]");
  }
  v10 = (unsigned __int8 *)(a1 + 57);
  if (__ldaxr((unsigned __int8 *)(a1 + 57)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_14;
  }
  MEMORY[0x19AEA534C](a1 + 57);
LABEL_14:
  v12 = *(uint64_t **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  v13 = __ldxr(v10);
  if (v13 != 1)
  {
    __clrex();
    goto LABEL_18;
  }
  if (__stlxr(0, v10))
LABEL_18:
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 57));
  v14 = (WTF::NativePromiseBase *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 16))(*(_QWORD *)(a1 + 72), a3);
  if (!v12)
    goto LABEL_36;
  v28[0] = 0;
  v28[1] = 0;
  v28[2] = "<chained completion promise>";
  v28[3] = 0;
  v16 = *v12;
  if (!*v12)
  {
    v19 = 0;
    goto LABEL_32;
  }
  v17 = (unsigned __int8 *)(v16 + 48);
  if (__ldaxr((unsigned __int8 *)(v16 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v17))
  {
    goto LABEL_26;
  }
  v14 = (WTF::NativePromiseBase *)MEMORY[0x19AEA534C](v16 + 48);
LABEL_26:
  v20 = *(_DWORD *)(v16 + 64);
  v21 = __ldxr(v17);
  if (v21 != 1)
  {
    __clrex();
    goto LABEL_30;
  }
  if (__stlxr(0, v17))
LABEL_30:
    v14 = (WTF::NativePromiseBase *)WTF::Lock::unlockSlow((WTF::Lock *)v17);
  v19 = *v12;
  if (!v20)
  {
    WTF::NativePromise<void,void,0u>::resolve<std::enable_if<true,void>>(*v12, (WTF::Logger::LogSiteIdentifier *)v28);
    goto LABEL_36;
  }
LABEL_32:
  v22 = (_BYTE *)WTF::NativePromiseBase::logChannel(v14);
  if (*v22 && v22[16] >= 4u)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [39],WTF::NativePromise<void,void,0u>>((uint64_t)v22, 4u, (WTF::Logger::LogSiteIdentifier *)v28, " ignored already resolved or rejected ", v19);
LABEL_36:
  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (v12)
  {
    if (*v12)
    {
      WTF::NativePromise<void,void,0u>::assertIsDead(*v12);
      v24 = (unsigned int *)*v12;
      *v12 = 0;
      if (v24)
      {
        v25 = v24 + 2;
        do
        {
          v26 = __ldaxr(v25);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v25));
        if (!v27)
        {
          atomic_store(1u, v24 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v24 + 16))(v24);
        }
      }
    }
    else
    {
      *v12 = 0;
    }
    return WTF::fastFree((WTF *)v12, v15);
  }
  return result;
}

void sub_194787E0C(_Unwind_Exception *exception_object)
{
  unsigned int **v1;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *v1;
  *v1 = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase::disconnect(uint64_t result)
{
  *(_BYTE *)(result + 56) = 1;
  return result;
}

uint64_t WTF::NativePromise<void,void,0u>::assertIsDead(uint64_t result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;

  v1 = result;
  v2 = (unsigned __int8 *)(result + 48);
  if (__ldaxr((unsigned __int8 *)(result + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEA534C](result + 48);
LABEL_5:
  v4 = *(unsigned int *)(v1 + 108);
  if ((_DWORD)v4)
  {
    v5 = *(uint64_t **)(v1 + 96);
    v6 = 40 * v4;
    do
    {
      result = *v5;
      if (*v5)
        result = WTF::NativePromise<void,void,0u>::assertIsDead();
      v5 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  v7 = __ldxr(v2);
  if (v7 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  if (__stlxr(0, v2))
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return result;
}

void sub_194787FA8(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

WTF::StringImpl *WTF::Logger::log<char [10],char [24],WTF::Logger::LogSiteIdentifier,char [2],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,char [11],void const*,char [2]>(uint64_t a1, unsigned int a2, char *a3, const char *a4, WTF::Logger::LogSiteIdentifier *a5, const char *a6, uint64_t a7, const char *a8, uint64_t a9, char *a10)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  NSObject *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  unsigned __int8 *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  WTF::Logger *v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  WTF::Logger *v42;
  uint64_t v43;
  WTF::StringImpl **v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  int v54;
  uint64_t v55;
  WTF::Logger *v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  __int128 buf;
  int v81;
  WTF::StringImpl *v82;
  int v83;
  WTF::StringImpl *v84;
  int v85;
  WTF::StringImpl *v86;
  int v87;
  WTF::StringImpl *v88;
  int v89;
  WTF::StringImpl *v90;
  int v91;
  WTF::StringImpl *v92;
  int v93;
  _QWORD v94[3];

  v94[1] = *MEMORY[0x1E0C80C00];
  WTF::String::String((WTF::String *)&v72, a3);
  WTF::String::String((WTF::String *)&v71, a4);
  WTF::Logger::LogSiteIdentifier::toString(a5);
  WTF::String::String((WTF::String *)&v69, a6);
  WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(a7, &v68);
  WTF::String::String((WTF::String *)&v67, a8);
  WTF::LogArgument<void const*>::toString();
  WTF::String::String((WTF::String *)&v65, a10);
  v63 = v71;
  v79 = v70;
  *(_QWORD *)&buf = v72;
  v77 = v68;
  v78 = v69;
  v76 = v67;
  v74 = v65;
  v75 = v66;
  result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t *)&buf, (uint64_t *)&v63, (uint64_t *)&v79, (uint64_t *)&v78, (uint64_t *)&v77, (uint64_t *)&v76, (uint64_t *)&v75, (uint64_t *)&v74, &v73);
  if (v73)
  {
    v13 = v65;
    v65 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = v66;
    v66 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v12);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = v67;
    v67 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v12);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = v68;
    v68 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v12);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = v69;
    v69 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v12);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = v70;
    v70 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v12);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = v71;
    v71 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v12);
      else
        *(_DWORD *)v19 -= 2;
    }
    v20 = v72;
    v72 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v12);
      else
        *(_DWORD *)v20 -= 2;
    }
    v21 = *(NSObject **)(a1 + 32);
    v22 = os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v22)
    {
      WTF::String::utf8();
      v24 = v63 ? (char *)v63 + 16 : 0;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v24;
      _os_log_impl(&dword_1940B8000, v21, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      v22 = (uint64_t)v63;
      v63 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 1)
          v22 = WTF::fastFree((WTF *)v22, v23);
        else
          --*(_DWORD *)v22;
      }
    }
    if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
    {
      v25 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v26 = *v25;
        if ((v26 & 1) != 0)
          break;
        v27 = __ldaxr(v25);
        if (v27 == v26)
        {
          if (!__stxr(v26 | 1, v25))
          {
            v28 = WTF::Logger::observers((WTF::Logger *)v22);
            v29 = *(unsigned int *)(v28 + 12);
            if ((_DWORD)v29)
            {
              v30 = *(uint64_t **)v28;
              v55 = *(_QWORD *)v28 + 8 * v29;
              do
              {
                v31 = *v30;
                LODWORD(buf) = 0;
                WTF::String::String((WTF::String *)((char *)&buf + 8), a3);
                v81 = 0;
                WTF::String::String((WTF::String *)&v82, a4);
                v83 = 0;
                WTF::Logger::LogSiteIdentifier::toString(a5);
                v85 = 0;
                WTF::String::String((WTF::String *)&v86, a6);
                v87 = 0;
                WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(a7, &v88);
                v89 = 0;
                WTF::String::String((WTF::String *)&v90, a8);
                v91 = 0;
                WTF::LogArgument<void const*>::toString();
                v93 = 0;
                WTF::String::String((WTF::String *)v94, a10);
                v63 = 0;
                v64 = 0;
                v32 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x80);
                LODWORD(v64) = 8;
                v63 = v32;
                v33 = HIDWORD(v64);
                *((_DWORD *)v32 + 4 * HIDWORD(v64)) = buf;
                v34 = *((_QWORD *)&buf + 1);
                if (*((_QWORD *)&buf + 1))
                  **((_DWORD **)&buf + 1) += 2;
                *((_QWORD *)v32 + 2 * v33 + 1) = v34;
                *((_DWORD *)v32 + 4 * (v33 + 1)) = v81;
                v35 = v82;
                if (v82)
                  *(_DWORD *)v82 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 1) + 1) = v35;
                *((_DWORD *)v32 + 4 * (v33 + 2)) = v83;
                v36 = v84;
                if (v84)
                  *(_DWORD *)v84 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 2) + 1) = v36;
                *((_DWORD *)v32 + 4 * (v33 + 3)) = v85;
                v37 = v86;
                if (v86)
                  *(_DWORD *)v86 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 3) + 1) = v37;
                *((_DWORD *)v32 + 4 * (v33 + 4)) = v87;
                v38 = v88;
                if (v88)
                  *(_DWORD *)v88 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 4) + 1) = v38;
                *((_DWORD *)v32 + 4 * (v33 + 5)) = v89;
                v39 = v90;
                if (v90)
                  *(_DWORD *)v90 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 5) + 1) = v39;
                *((_DWORD *)v32 + 4 * (v33 + 6)) = v91;
                v40 = v92;
                if (v92)
                  *(_DWORD *)v92 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 6) + 1) = v40;
                *((_DWORD *)v32 + 4 * (v33 + 7)) = v93;
                v41 = v94[0];
                if (v94[0])
                  *(_DWORD *)v94[0] += 2;
                *((_QWORD *)v32 + 2 * (v33 + 7) + 1) = v41;
                HIDWORD(v64) = v33 + 8;
                (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v31 + 16))(v31, a1, a2, &v63);
                v42 = v63;
                if (HIDWORD(v64))
                {
                  v43 = 16 * HIDWORD(v64);
                  v44 = (WTF::StringImpl **)((char *)v63 + 8);
                  do
                  {
                    v45 = *v44;
                    *v44 = 0;
                    if (v45)
                    {
                      if (*(_DWORD *)v45 == 2)
                        WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v23);
                      else
                        *(_DWORD *)v45 -= 2;
                    }
                    v44 += 2;
                    v43 -= 16;
                  }
                  while (v43);
                  v42 = v63;
                }
                if (v42)
                {
                  v63 = 0;
                  LODWORD(v64) = 0;
                  WTF::fastFree(v42, v23);
                }
                v46 = (WTF::StringImpl *)v94[0];
                v94[0] = 0;
                if (v46)
                {
                  if (*(_DWORD *)v46 == 2)
                    WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v46 -= 2;
                }
                v47 = v92;
                v92 = 0;
                if (v47)
                {
                  if (*(_DWORD *)v47 == 2)
                    WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v47 -= 2;
                }
                v48 = v90;
                v90 = 0;
                if (v48)
                {
                  if (*(_DWORD *)v48 == 2)
                    WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v48 -= 2;
                }
                v49 = v88;
                v88 = 0;
                if (v49)
                {
                  if (*(_DWORD *)v49 == 2)
                    WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v49 -= 2;
                }
                v50 = v86;
                v86 = 0;
                if (v50)
                {
                  if (*(_DWORD *)v50 == 2)
                    WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v50 -= 2;
                }
                v51 = v84;
                v84 = 0;
                if (v51)
                {
                  if (*(_DWORD *)v51 == 2)
                    WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v51 -= 2;
                }
                v52 = v82;
                v82 = 0;
                if (v52)
                {
                  if (*(_DWORD *)v52 == 2)
                    WTF::StringImpl::destroy(v52, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v52 -= 2;
                }
                v53 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                *((_QWORD *)&buf + 1) = 0;
                if (v53)
                {
                  if (*(_DWORD *)v53 == 2)
                    WTF::StringImpl::destroy(v53, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v53 -= 2;
                }
                ++v30;
              }
              while (v30 != (uint64_t *)v55);
            }
            v54 = __ldxr(v25);
            if (v54 == 1)
            {
              if (!__stlxr(0, v25))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    result = v73;
    v73 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v23);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

void sub_19478879C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,WTF *a30,int a31,int a32,WTF::StringImpl *a33,WTF::StringImpl *a34,WTF::StringImpl *a35,WTF::StringImpl *a36,WTF::StringImpl *a37,WTF::StringImpl *a38,WTF::StringImpl *a39,uint64_t a40,WTF::StringImpl *a41)
{
  unsigned __int8 *v41;
  int v43;

  v43 = __ldxr(v41);
  if (v43 == 1)
  {
    if (!__stlxr(0, v41))
    {
LABEL_6:
      if (a41)
      {
        if (*(_DWORD *)a41 == 2)
          WTF::StringImpl::destroy(a41, a2);
        else
          *(_DWORD *)a41 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  int v5;
  int v6;
  BOOL v7;
  int v8;
  int v9;
  BOOL v10;
  int v11;
  _BOOL4 v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;

  WTF::LogArgument<void const*>::toString();
  result = WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a1 + 16));
  if (v16)
  {
    v5 = *((_DWORD *)v16 + 1);
    if (v15)
      goto LABEL_3;
LABEL_29:
    v6 = 0;
    goto LABEL_4;
  }
  v5 = 0;
  if (!v15)
    goto LABEL_29;
LABEL_3:
  v6 = *((_DWORD *)v15 + 1);
  if (v6 < 0)
  {
LABEL_30:
    *a2 = 0;
LABEL_31:
    __break(0xC471u);
    return result;
  }
LABEL_4:
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    goto LABEL_30;
  v7 = __OFADD__(v8, 1);
  v9 = v8 + 1;
  v10 = v7;
  if (v5 < 0)
    goto LABEL_30;
  if (v10)
    goto LABEL_30;
  v7 = __OFADD__(v5, v9);
  v11 = v5 + v9;
  if (v7)
    goto LABEL_30;
  result = (v11 + 13);
  if (__OFADD__(v11, 13))
    goto LABEL_30;
  v12 = (!v16 || (*((_BYTE *)v16 + 16) & 4) != 0) && (!v15 || (*((_BYTE *)v15 + 16) & 4) != 0);
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(result, v12, "NativePromise", 0xDu, (uint64_t)v16, 60, v15, 62, &v17);
  v14 = v17;
  *a2 = v17;
  if (!v14)
    goto LABEL_31;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v13);
    else
      *(_DWORD *)v15 -= 2;
  }
  result = (uint64_t)v16;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      return WTF::StringImpl::destroy(v16, v13);
    else
      *(_DWORD *)v16 -= 2;
  }
  return result;
}

void sub_194788C88(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WTF *WTF::NativePromise<void,void,0u>::resolve<std::enable_if<true,void>>(uint64_t a1, WTF::Logger::LogSiteIdentifier *a2)
{
  WTF::Lock *v4;
  _BYTE *v6;
  BOOL v7;
  uint64_t v8;
  WTF *result;
  int v10;
  WTF::Lock *v11;
  char v12;
  char v13;

  v4 = (WTF::Lock *)(a1 + 48);
  v11 = v4;
  v12 = 1;
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_5;
  }
  v4 = (WTF::Lock *)MEMORY[0x19AEA534C]();
LABEL_5:
  v6 = (_BYTE *)WTF::NativePromiseBase::logChannel(v4);
  if (*v6)
    v7 = v6[16] >= 4u;
  else
    v7 = 0;
  if (v7)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<void,void,0u>>((uint64_t)v6, 4u, a2, " resolving ", a1);
  v8 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v8 != -1)
    ((void (*)(char *, uint64_t))off_1E32059D0[v8])(&v13, a1 + 56);
  *(_WORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 1;
  result = WTF::NativePromise<void,void,0u>::dispatchAll(a1, (unsigned __int8 **)&v11);
  if (v12)
  {
    result = v11;
    v10 = __ldxr((unsigned __int8 *)v11);
    if (v10 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v11))
        return result;
    }
    else
    {
      __clrex();
    }
    return (WTF *)WTF::Lock::unlockSlow(result);
  }
  return result;
}

void sub_194788DD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::Lock *a10, char a11)
{
  int v12;

  if (a11)
  {
    v12 = __ldxr((unsigned __int8 *)a10);
    if (v12 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)a10))
        goto LABEL_7;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow(a10);
  }
LABEL_7:
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [39],WTF::NativePromise<void,void,0u>>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4, uint64_t a5)
{
  uint64_t result;
  int v8;
  int v9;
  int v10;
  BOOL v11;
  int v12;
  BOOL v13;
  int v14;
  unsigned int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  NSObject *v20;
  uint64_t v21;
  void *v22;
  char *v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  WTF::Logger *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::Logger *v36;
  const char *v37;
  uint64_t v38;
  WTF::StringImpl **v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  int v44;
  uint64_t v45;
  WTF::Logger *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  __int128 buf;
  int v56;
  WTF::StringImpl *v57;
  int v58;
  WTF::StringImpl *v59[3];

  v59[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  WTF::String::String((WTF::String *)&v52, a4);
  result = WTF::LogArgument<WTF::NativePromise<void,void,0u>>::toString(a5, &v51);
  if (v53)
  {
    v8 = *((_DWORD *)v53 + 1);
    if (v52)
      goto LABEL_3;
LABEL_91:
    v9 = 0;
    if (v51)
      goto LABEL_4;
LABEL_92:
    v10 = 0;
    goto LABEL_5;
  }
  v8 = 0;
  if (!v52)
    goto LABEL_91;
LABEL_3:
  v9 = *((_DWORD *)v52 + 1);
  if (!v51)
    goto LABEL_92;
LABEL_4:
  v10 = *((_DWORD *)v51 + 1);
LABEL_5:
  if ((v10 | v9) < 0)
    goto LABEL_95;
  v11 = __OFADD__(v9, v10);
  v12 = v9 + v10;
  v13 = v11;
  if (v8 < 0)
    goto LABEL_95;
  if (v13)
    goto LABEL_95;
  result = (v8 + v12);
  if (__OFADD__(v8, v12))
    goto LABEL_95;
  if (v53 && (*((_BYTE *)v53 + 16) & 4) == 0)
  {
    v14 = 0;
    goto LABEL_19;
  }
  if (v52)
  {
    v15 = *((_DWORD *)v52 + 4);
    v14 = (v15 >> 2) & 1;
    if (v51 && (v15 & 4) != 0)
      goto LABEL_18;
  }
  else
  {
    if (v51)
    {
LABEL_18:
      v14 = (*((unsigned __int8 *)v51 + 16) >> 2) & 1;
      goto LABEL_19;
    }
    v14 = 1;
  }
LABEL_19:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v14, v53, (uint64_t)v52, (uint64_t)v51, &buf);
  v54 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_95:
    __break(0xC471u);
    return result;
  }
  v17 = v51;
  v51 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v16);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = v52;
  v52 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v16);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v53;
  v53 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v16);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = *(NSObject **)(a1 + 32);
  v21 = os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v21)
  {
    WTF::String::utf8();
    v23 = v49 ? (char *)v49 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v23;
    _os_log_impl(&dword_1940B8000, v20, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v21 = (uint64_t)v49;
    v49 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 1)
        v21 = WTF::fastFree((WTF *)v21, v22);
      else
        --*(_DWORD *)v21;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v24 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v25 = *v24;
      if ((v25 & 1) != 0)
        break;
      v26 = __ldaxr(v24);
      if (v26 == v25)
      {
        if (!__stxr(v25 | 1, v24))
        {
          v27 = WTF::Logger::observers((WTF::Logger *)v21);
          v28 = *(unsigned int *)(v27 + 12);
          if ((_DWORD)v28)
          {
            v29 = *(uint64_t **)v27;
            v45 = *(_QWORD *)v27 + 8 * v28;
            do
            {
              v30 = *v29;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v56 = 0;
              WTF::String::String((WTF::String *)&v57, a4);
              v58 = 0;
              WTF::LogArgument<WTF::NativePromise<void,void,0u>>::toString(a5, v59);
              v49 = 0;
              v50 = 0;
              v31 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
              LODWORD(v50) = 3;
              v49 = v31;
              v32 = HIDWORD(v50);
              *((_DWORD *)v31 + 4 * HIDWORD(v50)) = buf;
              v33 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v31 + 2 * v32 + 1) = v33;
              *((_DWORD *)v31 + 4 * (v32 + 1)) = v56;
              v34 = v57;
              if (v57)
                *(_DWORD *)v57 += 2;
              *((_QWORD *)v31 + 2 * (v32 + 1) + 1) = v34;
              *((_DWORD *)v31 + 4 * (v32 + 2)) = v58;
              v35 = v59[0];
              if (v59[0])
                *(_DWORD *)v59[0] += 2;
              *((_QWORD *)v31 + 2 * (v32 + 2) + 1) = v35;
              HIDWORD(v50) = v32 + 3;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v30 + 16))(v30, a1, a2, &v49);
              v36 = v49;
              if (HIDWORD(v50))
              {
                v37 = a4;
                v38 = 16 * HIDWORD(v50);
                v39 = (WTF::StringImpl **)((char *)v49 + 8);
                do
                {
                  v40 = *v39;
                  *v39 = 0;
                  if (v40)
                  {
                    if (*(_DWORD *)v40 == 2)
                      WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v22);
                    else
                      *(_DWORD *)v40 -= 2;
                  }
                  v39 += 2;
                  v38 -= 16;
                }
                while (v38);
                v36 = v49;
                a4 = v37;
              }
              if (v36)
              {
                v49 = 0;
                LODWORD(v50) = 0;
                WTF::fastFree(v36, v22);
              }
              v41 = v59[0];
              v59[0] = 0;
              if (v41)
              {
                if (*(_DWORD *)v41 == 2)
                  WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v41 -= 2;
              }
              v42 = v57;
              v57 = 0;
              if (v42)
              {
                if (*(_DWORD *)v42 == 2)
                  WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v42 -= 2;
              }
              v43 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v43)
              {
                if (*(_DWORD *)v43 == 2)
                  WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v43 -= 2;
              }
              ++v29;
            }
            while (v29 != (uint64_t *)v45);
          }
          v44 = __ldxr(v24);
          if (v44 == 1)
          {
            if (!__stlxr(0, v24))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v54;
  v54 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v22);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1947892FC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF *a15, int a16, int a17, WTF::StringImpl *a18, WTF::StringImpl *a19, uint64_t a20,WTF::StringImpl *a21,char a22,WTF::StringImpl *a23,uint64_t a24,WTF::StringImpl *a25,uint64_t a26,WTF::StringImpl *a27)
{
  unsigned __int8 *v27;
  int v29;

  v29 = __ldxr(v27);
  if (v29 == 1)
  {
    if (!__stlxr(0, v27))
    {
LABEL_6:
      if (a21)
      {
        if (*(_DWORD *)a21 == 2)
          WTF::StringImpl::destroy(a21, a2);
        else
          *(_DWORD *)a21 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t WTF::LogArgument<WTF::NativePromise<void,void,0u>>::toString@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  int v5;
  int v6;
  BOOL v7;
  int v8;
  int v9;
  BOOL v10;
  int v11;
  _BOOL4 v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;

  WTF::LogArgument<void const*>::toString();
  result = WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a1 + 16));
  if (v16)
  {
    v5 = *((_DWORD *)v16 + 1);
    if (v15)
      goto LABEL_3;
LABEL_29:
    v6 = 0;
    goto LABEL_4;
  }
  v5 = 0;
  if (!v15)
    goto LABEL_29;
LABEL_3:
  v6 = *((_DWORD *)v15 + 1);
  if (v6 < 0)
  {
LABEL_30:
    *a2 = 0;
LABEL_31:
    __break(0xC471u);
    return result;
  }
LABEL_4:
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    goto LABEL_30;
  v7 = __OFADD__(v8, 1);
  v9 = v8 + 1;
  v10 = v7;
  if (v5 < 0)
    goto LABEL_30;
  if (v10)
    goto LABEL_30;
  v7 = __OFADD__(v5, v9);
  v11 = v5 + v9;
  if (v7)
    goto LABEL_30;
  result = (v11 + 14);
  if (__OFADD__(v11, 14))
    goto LABEL_30;
  v12 = (!v16 || (*((_BYTE *)v16 + 16) & 4) != 0) && (!v15 || (*((_BYTE *)v15 + 16) & 4) != 0);
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(result, v12, "GenericPromise", 0xEu, (uint64_t)v16, 60, v15, 62, &v17);
  v14 = v17;
  *a2 = v17;
  if (!v14)
    goto LABEL_31;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v13);
    else
      *(_DWORD *)v15 -= 2;
  }
  result = (uint64_t)v16;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      return WTF::StringImpl::destroy(v16, v13);
    else
      *(_DWORD *)v16 -= 2;
  }
  return result;
}

void sub_19478961C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<void,void,0u>>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4, uint64_t a5)
{
  uint64_t result;
  int v8;
  int v9;
  int v10;
  BOOL v11;
  int v12;
  BOOL v13;
  int v14;
  unsigned int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  NSObject *v20;
  uint64_t v21;
  void *v22;
  char *v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  WTF::Logger *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::Logger *v36;
  const char *v37;
  uint64_t v38;
  WTF::StringImpl **v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  int v44;
  uint64_t v45;
  WTF::Logger *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  __int128 buf;
  int v56;
  WTF::StringImpl *v57;
  int v58;
  WTF::StringImpl *v59[3];

  v59[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  WTF::String::String((WTF::String *)&v52, a4);
  result = WTF::LogArgument<WTF::NativePromise<void,void,0u>>::toString(a5, &v51);
  if (v53)
  {
    v8 = *((_DWORD *)v53 + 1);
    if (v52)
      goto LABEL_3;
LABEL_91:
    v9 = 0;
    if (v51)
      goto LABEL_4;
LABEL_92:
    v10 = 0;
    goto LABEL_5;
  }
  v8 = 0;
  if (!v52)
    goto LABEL_91;
LABEL_3:
  v9 = *((_DWORD *)v52 + 1);
  if (!v51)
    goto LABEL_92;
LABEL_4:
  v10 = *((_DWORD *)v51 + 1);
LABEL_5:
  if ((v10 | v9) < 0)
    goto LABEL_95;
  v11 = __OFADD__(v9, v10);
  v12 = v9 + v10;
  v13 = v11;
  if (v8 < 0)
    goto LABEL_95;
  if (v13)
    goto LABEL_95;
  result = (v8 + v12);
  if (__OFADD__(v8, v12))
    goto LABEL_95;
  if (v53 && (*((_BYTE *)v53 + 16) & 4) == 0)
  {
    v14 = 0;
    goto LABEL_19;
  }
  if (v52)
  {
    v15 = *((_DWORD *)v52 + 4);
    v14 = (v15 >> 2) & 1;
    if (v51 && (v15 & 4) != 0)
      goto LABEL_18;
  }
  else
  {
    if (v51)
    {
LABEL_18:
      v14 = (*((unsigned __int8 *)v51 + 16) >> 2) & 1;
      goto LABEL_19;
    }
    v14 = 1;
  }
LABEL_19:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v14, v53, (uint64_t)v52, (uint64_t)v51, &buf);
  v54 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_95:
    __break(0xC471u);
    return result;
  }
  v17 = v51;
  v51 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v16);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = v52;
  v52 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v16);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v53;
  v53 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v16);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = *(NSObject **)(a1 + 32);
  v21 = os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v21)
  {
    WTF::String::utf8();
    v23 = v49 ? (char *)v49 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v23;
    _os_log_impl(&dword_1940B8000, v20, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v21 = (uint64_t)v49;
    v49 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 1)
        v21 = WTF::fastFree((WTF *)v21, v22);
      else
        --*(_DWORD *)v21;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v24 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v25 = *v24;
      if ((v25 & 1) != 0)
        break;
      v26 = __ldaxr(v24);
      if (v26 == v25)
      {
        if (!__stxr(v25 | 1, v24))
        {
          v27 = WTF::Logger::observers((WTF::Logger *)v21);
          v28 = *(unsigned int *)(v27 + 12);
          if ((_DWORD)v28)
          {
            v29 = *(uint64_t **)v27;
            v45 = *(_QWORD *)v27 + 8 * v28;
            do
            {
              v30 = *v29;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v56 = 0;
              WTF::String::String((WTF::String *)&v57, a4);
              v58 = 0;
              WTF::LogArgument<WTF::NativePromise<void,void,0u>>::toString(a5, v59);
              v49 = 0;
              v50 = 0;
              v31 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
              LODWORD(v50) = 3;
              v49 = v31;
              v32 = HIDWORD(v50);
              *((_DWORD *)v31 + 4 * HIDWORD(v50)) = buf;
              v33 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v31 + 2 * v32 + 1) = v33;
              *((_DWORD *)v31 + 4 * (v32 + 1)) = v56;
              v34 = v57;
              if (v57)
                *(_DWORD *)v57 += 2;
              *((_QWORD *)v31 + 2 * (v32 + 1) + 1) = v34;
              *((_DWORD *)v31 + 4 * (v32 + 2)) = v58;
              v35 = v59[0];
              if (v59[0])
                *(_DWORD *)v59[0] += 2;
              *((_QWORD *)v31 + 2 * (v32 + 2) + 1) = v35;
              HIDWORD(v50) = v32 + 3;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v30 + 16))(v30, a1, a2, &v49);
              v36 = v49;
              if (HIDWORD(v50))
              {
                v37 = a4;
                v38 = 16 * HIDWORD(v50);
                v39 = (WTF::StringImpl **)((char *)v49 + 8);
                do
                {
                  v40 = *v39;
                  *v39 = 0;
                  if (v40)
                  {
                    if (*(_DWORD *)v40 == 2)
                      WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v22);
                    else
                      *(_DWORD *)v40 -= 2;
                  }
                  v39 += 2;
                  v38 -= 16;
                }
                while (v38);
                v36 = v49;
                a4 = v37;
              }
              if (v36)
              {
                v49 = 0;
                LODWORD(v50) = 0;
                WTF::fastFree(v36, v22);
              }
              v41 = v59[0];
              v59[0] = 0;
              if (v41)
              {
                if (*(_DWORD *)v41 == 2)
                  WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v41 -= 2;
              }
              v42 = v57;
              v57 = 0;
              if (v42)
              {
                if (*(_DWORD *)v42 == 2)
                  WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v42 -= 2;
              }
              v43 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v43)
              {
                if (*(_DWORD *)v43 == 2)
                  WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v43 -= 2;
              }
              ++v29;
            }
            while (v29 != (uint64_t *)v45);
          }
          v44 = __ldxr(v24);
          if (v44 == 1)
          {
            if (!__stlxr(0, v24))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v54;
  v54 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v22);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_194789B64(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF *a15, int a16, int a17, WTF::StringImpl *a18, WTF::StringImpl *a19, uint64_t a20,WTF::StringImpl *a21,char a22,WTF::StringImpl *a23,uint64_t a24,WTF::StringImpl *a25,uint64_t a26,WTF::StringImpl *a27)
{
  unsigned __int8 *v27;
  int v29;

  v29 = __ldxr(v27);
  if (v29 == 1)
  {
    if (!__stlxr(0, v27))
    {
LABEL_6:
      if (a21)
      {
        if (*(_DWORD *)a21 == 2)
          WTF::StringImpl::destroy(a21, a2);
        else
          *(_DWORD *)a21 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

WTF *WTF::NativePromise<void,void,0u>::dispatchAll(uint64_t a1, unsigned __int8 **a2)
{
  void *v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int **v9;
  void *v10;
  WTF::NativePromiseBase **v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  WTF *v15;
  WTF *v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  WTF *result;
  _QWORD v23[2];
  unsigned int **v24;
  unint64_t v25;
  uint64_t v26;
  WTF *v27;
  uint64_t v28;
  uint64_t v29;

  v24 = (unsigned int **)&v26;
  v25 = 1;
  v27 = (WTF *)&v29;
  v28 = 1;
  v4 = *(void **)(a1 + 72);
  if (v4 == (void *)(a1 + 88))
  {
    v6 = *(unsigned int *)(a1 + 84);
    memcpy(&v29, v4, 8 * v6);
  }
  else
  {
    *(_QWORD *)(a1 + 72) = a1 + 88;
    v27 = (WTF *)v4;
    v5 = *(_DWORD *)(a1 + 80);
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    *(_DWORD *)(a1 + 80) = 1;
    LODWORD(v28) = v5;
  }
  HIDWORD(v28) = v6;
  *(_QWORD *)(a1 + 80) = 1;
  v7 = *(_DWORD *)(a1 + 104);
  v8 = *(_DWORD *)(a1 + 108);
  v9 = *(unsigned int ***)(a1 + 96);
  v24 = v9;
  v25 = __PAIR64__(v8, v7);
  v23[0] = 0;
  *(_QWORD *)(a1 + 96) = 0;
  v23[1] = 0;
  *(_QWORD *)(a1 + 104) = 0;
  WTF::Vector<WTF::NativePromiseProducer<void,void,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v23, v4);
  if (HIDWORD(v28))
  {
    v11 = (WTF::NativePromiseBase **)v27;
    v12 = 8 * HIDWORD(v28);
    do
    {
      WTF::NativePromise<void,void,0u>::ThenCallbackBase::dispatch(*v11++, a1, a2);
      v12 -= 8;
    }
    while (v12);
    v9 = v24;
    v8 = HIDWORD(v25);
  }
  if (v8)
  {
    v13 = 40 * v8;
    do
    {
      WTF::NativePromise<void,void,0u>::settleChainedPromise(a1, v9);
      v9 += 5;
      v13 -= 40;
    }
    while (v13);
  }
  WTF::Vector<WTF::NativePromiseProducer<void,void,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v24, v10);
  if (HIDWORD(v28))
  {
    v15 = v27;
    v16 = (WTF *)((char *)v27 + 8 * HIDWORD(v28));
    do
    {
      v17 = *(unsigned int **)v15;
      *(_QWORD *)v15 = 0;
      if (v17)
      {
        v18 = v17 + 2;
        do
        {
          v19 = __ldaxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
        {
          atomic_store(1u, v17 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 8))(v17);
        }
      }
      v15 = (WTF *)((char *)v15 + 8);
    }
    while (v15 != v16);
  }
  result = v27;
  if (&v29 != (uint64_t *)v27 && v27 != 0)
  {
    v27 = 0;
    LODWORD(v28) = 0;
    return (WTF *)WTF::fastFree(result, v14);
  }
  return result;
}

void sub_194789F10(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, WTF *a14, int a15, unsigned int a16)
{
  WTF *v16;
  void *v18;
  WTF *v19;
  unsigned int **v21;
  unsigned int **v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;

  WTF::Vector<WTF::NativePromiseProducer<void,void,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a11, a2);
  if (a16)
  {
    v21 = (unsigned int **)a14;
    v22 = (unsigned int **)((char *)a14 + 8 * a16);
    do
    {
      v23 = *v21;
      *v21 = 0;
      if (v23)
      {
        v24 = v23 + 2;
        do
        {
          v25 = __ldaxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
        {
          atomic_store(1u, v23 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v23 + 8))(v23);
        }
      }
      ++v21;
    }
    while (v21 != v22);
  }
  v19 = a14;
  if (v16 != a14 && a14 != 0)
  {
    a14 = 0;
    a15 = 0;
    WTF::fastFree(v19, v18);
  }
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseIvvLj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIvNS8_6detail15VoidPlaceholderEEENS8_8FunctionIFSI_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJSC_SI_SL_EEEEEEDcSP_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

unsigned __int8 *WTF::NativePromise<void,void,0u>::ThenCallbackBase::dispatch(WTF::NativePromiseBase *a1, uint64_t a2, unsigned __int8 **a3)
{
  WTF::NativePromiseBase *v5;
  int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned __int8 *v12;
  unsigned __int8 *result;
  BOOL v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;
  int v19;
  int v20;
  uint64_t v23;
  int v24;
  int v25;
  unsigned __int8 *v27;

  v5 = a1;
  if (*((_QWORD *)a1 + 2))
  {
    v6 = atomic_load((unsigned __int8 *)(a2 + 113));
    if (v6 != 1
      || (a1 = (WTF::NativePromiseBase *)(*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 24))(*((_QWORD **)a1 + 2)),
          !(_DWORD)a1))
    {
      v7 = *((_QWORD *)v5 + 2);
      v8 = (unsigned int *)((char *)v5 + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
      v10 = (unsigned int *)(a2 + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
      v12 = (unsigned __int8 *)WTF::fastMalloc((WTF *)0x20);
      *(_QWORD *)v12 = &off_1E3205AC0;
      *((_QWORD *)v12 + 1) = v5;
      *((_QWORD *)v12 + 2) = v5;
      *((_QWORD *)v12 + 3) = a2;
      v27 = v12;
      (*(void (**)(uint64_t, unsigned __int8 **))(*(_QWORD *)v7 + 16))(v7, &v27);
      result = v27;
      v27 = 0;
      if (result)
        return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 8))(result);
      return result;
    }
  }
  if (*((_BYTE *)v5 + 56))
  {
    v27 = (unsigned __int8 *)v5;
    result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(a1);
    if (*result)
      v14 = result[16] >= 4u;
    else
      v14 = 0;
    if (v14)
      return (unsigned __int8 *)WTF::Logger::log<char [32],WTF::NativePromise<void,void,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, 4u, "ThenCallback disconnected from ", a2, " aborting [callback:", (int)&v27, " callSite:", (WTF::NativePromiseBase *)((char *)v5 + 24), "]");
    return result;
  }
  v15 = *a3;
  v16 = __ldxr(*a3);
  if (v16 != 1)
  {
    __clrex();
    goto LABEL_22;
  }
  if (__stlxr(0, v15))
LABEL_22:
    WTF::Lock::unlockSlow((WTF::Lock *)v15);
  v17 = (unsigned __int8 *)(a2 + 48);
  if (__ldaxr((unsigned __int8 *)(a2 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v17))
  {
    goto LABEL_27;
  }
  MEMORY[0x19AEA534C](a2 + 48);
LABEL_27:
  v19 = *(_DWORD *)(a2 + 64);
  v20 = __ldxr(v17);
  if (v20 != 1)
  {
    __clrex();
    goto LABEL_31;
  }
  if (__stlxr(0, v17))
LABEL_31:
    WTF::Lock::unlockSlow((WTF::Lock *)(a2 + 48));
  if (v19 != 2)
  {
    if (__ldaxr(v17))
    {
      __clrex();
    }
    else if (!__stxr(1u, v17))
    {
      goto LABEL_48;
    }
    MEMORY[0x19AEA534C](a2 + 48);
LABEL_48:
    if (*(_DWORD *)(a2 + 64) != 1)
      goto LABEL_60;
    LOWORD(v27) = *(_WORD *)(a2 + 56);
    v25 = __ldxr(v17);
    if (v25 == 1)
    {
      if (!__stlxr(0, v17))
        goto LABEL_54;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(a2 + 48));
LABEL_54:
    (*(void (**)(WTF::NativePromiseBase *, uint64_t, unsigned __int8 **))(*(_QWORD *)v5 + 24))(v5, a2, &v27);
    goto LABEL_55;
  }
  if (__ldaxr(v17))
  {
    __clrex();
  }
  else if (!__stxr(1u, v17))
  {
    goto LABEL_39;
  }
  MEMORY[0x19AEA534C](a2 + 48);
LABEL_39:
  if (*(_DWORD *)(a2 + 64) != 2)
  {
LABEL_60:
    result = (unsigned __int8 *)std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
    return result;
  }
  v23 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  v24 = __ldxr(v17);
  if (v24 == 1)
  {
    if (!__stlxr(0, v17))
      goto LABEL_45;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(a2 + 48));
LABEL_45:
  (*(void (**)(unsigned __int8 **__return_ptr, uint64_t))(*(_QWORD *)v23 + 16))(&v27, v23);
  (*(void (**)(WTF::NativePromiseBase *, uint64_t, unsigned __int8 **))(*(_QWORD *)v5 + 24))(v5, a2, &v27);
  (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
LABEL_55:
  result = *a3;
  if (__ldaxr(*a3))
  {
    __clrex();
  }
  else if (!__stxr(1u, result))
  {
    return result;
  }
  return (unsigned __int8 *)MEMORY[0x19AEA534C]();
}

void sub_19478A2C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  unsigned __int8 **v10;

  if (__ldaxr(*v10))
  {
    __clrex();
  }
  else if (!__stxr(1u, *v10))
  {
LABEL_6:
    _Unwind_Resume(exception_object);
  }
  MEMORY[0x19AEA534C]();
  goto LABEL_6;
}

uint64_t WTF::NativePromise<void,void,0u>::settleChainedPromise(uint64_t a1, unsigned int **a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned __int8 *v6;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::Lock *v11;
  int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t result;
  unsigned int v17;
  unsigned int v18;
  _QWORD v19[4];
  WTF::Lock *v20;
  char v21;
  unsigned int *v22;

  v3 = *a2;
  *a2 = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  v19[0] = 0;
  v19[1] = 0;
  v19[2] = "<chained promise>";
  v19[3] = 0;
  v6 = (unsigned __int8 *)(v3 + 12);
  v20 = (WTF::Lock *)(v3 + 12);
  v21 = 1;
  if (__ldaxr((unsigned __int8 *)v3 + 48))
  {
    __clrex();
LABEL_7:
    v6 = (unsigned __int8 *)MEMORY[0x19AEA534C]();
    goto LABEL_8;
  }
  if (__stxr(1u, v6))
    goto LABEL_7;
LABEL_8:
  v8 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v6);
  if (*v8 && v8[16] >= 4u)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<void,void,0u>>((uint64_t)v8, 4u, (WTF::Logger::LogSiteIdentifier *)v19, " settling chained promise ", (uint64_t)v3);
  v9 = v3[16];
  v10 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v9 == -1)
  {
    if ((_DWORD)v10 == -1)
      goto LABEL_16;
  }
  else if ((_DWORD)v10 == -1)
  {
    ((void (*)(unsigned int **, unsigned int *))off_1E32059D0[v9])(&v22, v3 + 14);
    v3[16] = -1;
    goto LABEL_16;
  }
  v22 = v3 + 14;
  ((void (*)(unsigned int **))off_1E32059E8[v10])(&v22);
LABEL_16:
  WTF::NativePromise<void,void,0u>::dispatchAll(v3, &v20);
  if (v21)
  {
    v11 = v20;
    v12 = __ldxr((unsigned __int8 *)v20);
    if (v12 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v20))
        goto LABEL_22;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow(v11);
  }
LABEL_22:
  v13 = v3 + 2;
  do
  {
    v14 = __ldaxr(v13);
    v15 = v14 - 1;
  }
  while (__stlxr(v15, v13));
  if (!v15)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
  }
  result = WTF::NativePromise<void,void,0u>::assertIsDead((uint64_t)v3);
  do
  {
    v17 = __ldaxr(v13);
    v18 = v17 - 1;
  }
  while (__stlxr(v18, v13));
  if (!v18)
  {
    atomic_store(1u, v3 + 2);
    return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
  }
  return result;
}

void sub_19478A5A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::Lock *a14, char a15)
{
  unsigned int *v15;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;

  if (v15)
  {
    v17 = v15 + 2;
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      atomic_store(1u, v15 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 16))(v15);
    }
    WTF::NativePromise<void,void,0u>::assertIsDead((uint64_t)v15);
    do
    {
      v20 = __ldaxr(v17);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v17));
    if (!v21)
    {
      atomic_store(1u, v15 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 16))(v15);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WTF::NativePromiseProducer<void,void,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF *v10;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
  {
    v4 = *(uint64_t **)a1;
    v5 = *(_QWORD *)a1 + 40 * v3;
    do
    {
      if (*v4)
      {
        WTF::NativePromise<void,void,0u>::assertIsDead(*v4);
        v6 = (unsigned int *)*v4;
        *v4 = 0;
        if (v6)
        {
          v7 = v6 + 2;
          do
          {
            v8 = __ldaxr(v7);
            v9 = v8 - 1;
          }
          while (__stlxr(v9, v7));
          if (!v9)
          {
            atomic_store(1u, v6 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
          }
        }
      }
      else
      {
        *v4 = 0;
      }
      v4 += 5;
    }
    while (v4 != (uint64_t *)v5);
  }
  v10 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v10, a2);
  }
  return a1;
}

void sub_19478A734(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  unsigned int **v3;
  unsigned int **v4;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF *v10;

  v4 = v3;
  v6 = *v4;
  *v4 = 0;
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v6 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
    }
  }
  v10 = *(WTF **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v10, a2);
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WTF::Logger::log<char [32],WTF::NativePromise<void,void,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>(uint64_t a1, unsigned int a2, char *a3, uint64_t a4, const char *a5, int a6, const char *a7, WTF::Logger::LogSiteIdentifier *a8, char *a9)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  NSObject *v19;
  uint64_t v20;
  void *v21;
  char *v22;
  unsigned __int8 *v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  WTF::Logger *v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  WTF::Logger *v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl **v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  int v51;
  uint64_t v52;
  WTF::Logger *v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  __int128 buf;
  int v75;
  WTF::StringImpl *v76;
  int v77;
  WTF::StringImpl *v78;
  int v79;
  WTF::StringImpl *v80;
  int v81;
  WTF::StringImpl *v82;
  int v83;
  WTF::StringImpl *v84;
  int v85;
  _QWORD v86[3];

  v86[1] = *MEMORY[0x1E0C80C00];
  WTF::String::String((WTF::String *)&v67, a3);
  WTF::LogArgument<WTF::NativePromise<void,void,0u>>::toString(a4, &v66);
  WTF::String::String((WTF::String *)&v65, a5);
  WTF::LogArgument<void const*>::toString();
  WTF::String::String((WTF::String *)&v63, a7);
  WTF::Logger::LogSiteIdentifier::toString(a8);
  WTF::String::String((WTF::String *)&v61, a9);
  v59 = v66;
  v73 = v65;
  *(_QWORD *)&buf = v67;
  v72 = v64;
  v70 = v62;
  v71 = v63;
  v69 = v61;
  result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v59, (uint64_t *)&v73, (uint64_t *)&v72, (uint64_t *)&v71, (uint64_t *)&v70, (uint64_t *)&v69, &v68);
  if (v68)
  {
    v12 = v61;
    v61 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = v62;
    v62 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v11);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = v63;
    v63 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v11);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = v64;
    v64 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v11);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = v65;
    v65 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v11);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = v66;
    v66 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v11);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = v67;
    v67 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v11);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = *(NSObject **)(a1 + 32);
    v20 = os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v20)
    {
      WTF::String::utf8();
      v22 = v59 ? (char *)v59 + 16 : 0;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v22;
      _os_log_impl(&dword_1940B8000, v19, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      v20 = (uint64_t)v59;
      v59 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 1)
          v20 = WTF::fastFree((WTF *)v20, v21);
        else
          --*(_DWORD *)v20;
      }
    }
    if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
    {
      v23 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v24 = *v23;
        if ((v24 & 1) != 0)
          break;
        v25 = __ldaxr(v23);
        if (v25 == v24)
        {
          if (!__stxr(v24 | 1, v23))
          {
            v26 = WTF::Logger::observers((WTF::Logger *)v20);
            v27 = *(unsigned int *)(v26 + 12);
            if ((_DWORD)v27)
            {
              v28 = *(uint64_t **)v26;
              v52 = *(_QWORD *)v26 + 8 * v27;
              do
              {
                v29 = *v28;
                LODWORD(buf) = 0;
                WTF::String::String((WTF::String *)((char *)&buf + 8), a3);
                v75 = 0;
                WTF::LogArgument<WTF::NativePromise<void,void,0u>>::toString(a4, &v76);
                v77 = 0;
                WTF::String::String((WTF::String *)&v78, a5);
                v79 = 0;
                WTF::LogArgument<void const*>::toString();
                v81 = 0;
                WTF::String::String((WTF::String *)&v82, a7);
                v83 = 0;
                WTF::Logger::LogSiteIdentifier::toString(a8);
                v85 = 0;
                WTF::String::String((WTF::String *)v86, a9);
                v59 = 0;
                v60 = 0;
                v30 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x70);
                LODWORD(v60) = 7;
                v59 = v30;
                v31 = HIDWORD(v60);
                *((_DWORD *)v30 + 4 * HIDWORD(v60)) = buf;
                v32 = *((_QWORD *)&buf + 1);
                if (*((_QWORD *)&buf + 1))
                  **((_DWORD **)&buf + 1) += 2;
                *((_QWORD *)v30 + 2 * v31 + 1) = v32;
                *((_DWORD *)v30 + 4 * (v31 + 1)) = v75;
                v33 = v76;
                if (v76)
                  *(_DWORD *)v76 += 2;
                *((_QWORD *)v30 + 2 * (v31 + 1) + 1) = v33;
                *((_DWORD *)v30 + 4 * (v31 + 2)) = v77;
                v34 = v78;
                if (v78)
                  *(_DWORD *)v78 += 2;
                *((_QWORD *)v30 + 2 * (v31 + 2) + 1) = v34;
                *((_DWORD *)v30 + 4 * (v31 + 3)) = v79;
                v35 = v80;
                if (v80)
                  *(_DWORD *)v80 += 2;
                *((_QWORD *)v30 + 2 * (v31 + 3) + 1) = v35;
                *((_DWORD *)v30 + 4 * (v31 + 4)) = v81;
                v36 = v82;
                if (v82)
                  *(_DWORD *)v82 += 2;
                *((_QWORD *)v30 + 2 * (v31 + 4) + 1) = v36;
                *((_DWORD *)v30 + 4 * (v31 + 5)) = v83;
                v37 = v84;
                if (v84)
                  *(_DWORD *)v84 += 2;
                *((_QWORD *)v30 + 2 * (v31 + 5) + 1) = v37;
                *((_DWORD *)v30 + 4 * (v31 + 6)) = v85;
                v38 = v86[0];
                if (v86[0])
                  *(_DWORD *)v86[0] += 2;
                *((_QWORD *)v30 + 2 * (v31 + 6) + 1) = v38;
                HIDWORD(v60) = v31 + 7;
                (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v29 + 16))(v29, a1, a2, &v59);
                v39 = v59;
                if (HIDWORD(v60))
                {
                  v40 = a4;
                  v41 = 16 * HIDWORD(v60);
                  v42 = (WTF::StringImpl **)((char *)v59 + 8);
                  do
                  {
                    v43 = *v42;
                    *v42 = 0;
                    if (v43)
                    {
                      if (*(_DWORD *)v43 == 2)
                        WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v21);
                      else
                        *(_DWORD *)v43 -= 2;
                    }
                    v42 += 2;
                    v41 -= 16;
                  }
                  while (v41);
                  v39 = v59;
                  a4 = v40;
                }
                if (v39)
                {
                  v59 = 0;
                  LODWORD(v60) = 0;
                  WTF::fastFree(v39, v21);
                }
                v44 = (WTF::StringImpl *)v86[0];
                v86[0] = 0;
                if (v44)
                {
                  if (*(_DWORD *)v44 == 2)
                    WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v21);
                  else
                    *(_DWORD *)v44 -= 2;
                }
                v45 = v84;
                v84 = 0;
                if (v45)
                {
                  if (*(_DWORD *)v45 == 2)
                    WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v21);
                  else
                    *(_DWORD *)v45 -= 2;
                }
                v46 = v82;
                v82 = 0;
                if (v46)
                {
                  if (*(_DWORD *)v46 == 2)
                    WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v21);
                  else
                    *(_DWORD *)v46 -= 2;
                }
                v47 = v80;
                v80 = 0;
                if (v47)
                {
                  if (*(_DWORD *)v47 == 2)
                    WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v21);
                  else
                    *(_DWORD *)v47 -= 2;
                }
                v48 = v78;
                v78 = 0;
                if (v48)
                {
                  if (*(_DWORD *)v48 == 2)
                    WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v21);
                  else
                    *(_DWORD *)v48 -= 2;
                }
                v49 = v76;
                v76 = 0;
                if (v49)
                {
                  if (*(_DWORD *)v49 == 2)
                    WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v21);
                  else
                    *(_DWORD *)v49 -= 2;
                }
                v50 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                *((_QWORD *)&buf + 1) = 0;
                if (v50)
                {
                  if (*(_DWORD *)v50 == 2)
                    WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v21);
                  else
                    *(_DWORD *)v50 -= 2;
                }
                ++v28;
              }
              while (v28 != (uint64_t *)v52);
            }
            v51 = __ldxr(v23);
            if (v51 == 1)
            {
              if (!__stlxr(0, v23))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    result = v68;
    v68 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v21);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

void sub_19478AEBC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,WTF *a26,int a27,int a28,WTF::StringImpl *a29,WTF::StringImpl *a30,WTF::StringImpl *a31,WTF::StringImpl *a32,WTF::StringImpl *a33,WTF::StringImpl *a34,uint64_t a35,WTF::StringImpl *a36)
{
  unsigned __int8 *v36;
  int v38;

  v38 = __ldxr(v36);
  if (v38 == 1)
  {
    if (!__stlxr(0, v36))
    {
LABEL_6:
      if (a36)
      {
        if (*(_DWORD *)a36 == 2)
          WTF::StringImpl::destroy(a36, a2);
        else
          *(_DWORD *)a36 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::NativePromise<void,void,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<void,void,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *a1 = &off_1E3205AC0;
  v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
    }
  }
  v6 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v6 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::NativePromise<void,void,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<void,void,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *(_QWORD *)this = &off_1E3205AC0;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::NativePromise<void,void,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<void,void,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return WTF::NativePromise<void,void,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<void,void,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1}::operator()((WTF::NativePromiseBase *)(a1 + 8));
}

WTF::StringImpl *WTF::NativePromise<void,void,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<void,void,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1}::operator()(WTF::NativePromiseBase *a1)
{
  uint64_t v1;
  uint64_t v2;
  WTF::StringImpl *result;
  BOOL v4;
  unsigned __int8 *v6;
  int v8;
  int v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v14;
  int v15;
  int v16;
  __int16 v17;
  _BYTE v18[2];
  uint64_t v19;

  v1 = *(_QWORD *)a1;
  v2 = *((_QWORD *)a1 + 2);
  if (!*(_BYTE *)(*(_QWORD *)a1 + 56))
  {
    v6 = (unsigned __int8 *)(v2 + 48);
    if (__ldaxr((unsigned __int8 *)(v2 + 48)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v6))
    {
      goto LABEL_12;
    }
    MEMORY[0x19AEA534C](v2 + 48);
LABEL_12:
    v8 = *(_DWORD *)(v2 + 64);
    v9 = __ldxr(v6);
    if (v9 == 1)
    {
      if (!__stlxr(0, v6))
      {
LABEL_17:
        v10 = *((_QWORD *)a1 + 2);
        v11 = (unsigned __int8 *)(v10 + 48);
        if (v8 == 2)
        {
          if (__ldaxr(v11))
          {
            __clrex();
          }
          else if (!__stxr(1u, v11))
          {
            goto LABEL_24;
          }
          MEMORY[0x19AEA534C](v10 + 48);
LABEL_24:
          if (*(_DWORD *)(v10 + 64) == 2)
          {
            v14 = *(_QWORD *)(v10 + 56);
            *(_QWORD *)(v10 + 56) = 0;
            v15 = __ldxr(v11);
            if (v15 == 1)
            {
              if (!__stlxr(0, v11))
                goto LABEL_30;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)(v10 + 48));
LABEL_30:
            (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v14 + 16))(v18, v14);
            (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v1 + 24))(v1, v10, v18);
            return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
          }
LABEL_40:
          result = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
          __break(1u);
          return result;
        }
        if (__ldaxr(v11))
        {
          __clrex();
        }
        else if (!__stxr(1u, v11))
        {
          goto LABEL_33;
        }
        MEMORY[0x19AEA534C](v10 + 48);
LABEL_33:
        if (*(_DWORD *)(v10 + 64) != 1)
          goto LABEL_40;
        v17 = *(_WORD *)(v10 + 56);
        v16 = __ldxr(v11);
        if (v16 == 1)
        {
          if (!__stlxr(0, v11))
            return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, uint64_t, __int16 *))(*(_QWORD *)v1 + 24))(v1, v10, &v17);
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)(v10 + 48));
        return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, uint64_t, __int16 *))(*(_QWORD *)v1 + 24))(v1, v10, &v17);
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 48));
    goto LABEL_17;
  }
  v19 = *(_QWORD *)a1;
  result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel(a1);
  if (*(_BYTE *)result)
    v4 = *((unsigned __int8 *)result + 16) >= 4u;
  else
    v4 = 0;
  if (v4)
    return WTF::Logger::log<char [32],WTF::NativePromise<void,void,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, 4u, "ThenCallback disconnected from ", v2, " aborting [callback:", (int)&v19, " callSite:", (WTF::Logger::LogSiteIdentifier *)(v1 + 24), "]");
  return result;
}

void sub_19478B59C(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<void,void,0u>>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4, uint64_t a5)
{
  uint64_t result;
  int v8;
  int v9;
  int v10;
  BOOL v11;
  int v12;
  BOOL v13;
  int v14;
  unsigned int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  NSObject *v20;
  uint64_t v21;
  void *v22;
  char *v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  WTF::Logger *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::Logger *v36;
  const char *v37;
  uint64_t v38;
  WTF::StringImpl **v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  int v44;
  uint64_t v45;
  WTF::Logger *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  __int128 buf;
  int v56;
  WTF::StringImpl *v57;
  int v58;
  WTF::StringImpl *v59[3];

  v59[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  WTF::String::String((WTF::String *)&v52, a4);
  result = WTF::LogArgument<WTF::NativePromise<void,void,0u>>::toString(a5, &v51);
  if (v53)
  {
    v8 = *((_DWORD *)v53 + 1);
    if (v52)
      goto LABEL_3;
LABEL_91:
    v9 = 0;
    if (v51)
      goto LABEL_4;
LABEL_92:
    v10 = 0;
    goto LABEL_5;
  }
  v8 = 0;
  if (!v52)
    goto LABEL_91;
LABEL_3:
  v9 = *((_DWORD *)v52 + 1);
  if (!v51)
    goto LABEL_92;
LABEL_4:
  v10 = *((_DWORD *)v51 + 1);
LABEL_5:
  if ((v10 | v9) < 0)
    goto LABEL_95;
  v11 = __OFADD__(v9, v10);
  v12 = v9 + v10;
  v13 = v11;
  if (v8 < 0)
    goto LABEL_95;
  if (v13)
    goto LABEL_95;
  result = (v8 + v12);
  if (__OFADD__(v8, v12))
    goto LABEL_95;
  if (v53 && (*((_BYTE *)v53 + 16) & 4) == 0)
  {
    v14 = 0;
    goto LABEL_19;
  }
  if (v52)
  {
    v15 = *((_DWORD *)v52 + 4);
    v14 = (v15 >> 2) & 1;
    if (v51 && (v15 & 4) != 0)
      goto LABEL_18;
  }
  else
  {
    if (v51)
    {
LABEL_18:
      v14 = (*((unsigned __int8 *)v51 + 16) >> 2) & 1;
      goto LABEL_19;
    }
    v14 = 1;
  }
LABEL_19:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v14, v53, (uint64_t)v52, (uint64_t)v51, &buf);
  v54 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_95:
    __break(0xC471u);
    return result;
  }
  v17 = v51;
  v51 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v16);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = v52;
  v52 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v16);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v53;
  v53 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v16);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = *(NSObject **)(a1 + 32);
  v21 = os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v21)
  {
    WTF::String::utf8();
    v23 = v49 ? (char *)v49 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v23;
    _os_log_impl(&dword_1940B8000, v20, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v21 = (uint64_t)v49;
    v49 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 1)
        v21 = WTF::fastFree((WTF *)v21, v22);
      else
        --*(_DWORD *)v21;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v24 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v25 = *v24;
      if ((v25 & 1) != 0)
        break;
      v26 = __ldaxr(v24);
      if (v26 == v25)
      {
        if (!__stxr(v25 | 1, v24))
        {
          v27 = WTF::Logger::observers((WTF::Logger *)v21);
          v28 = *(unsigned int *)(v27 + 12);
          if ((_DWORD)v28)
          {
            v29 = *(uint64_t **)v27;
            v45 = *(_QWORD *)v27 + 8 * v28;
            do
            {
              v30 = *v29;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v56 = 0;
              WTF::String::String((WTF::String *)&v57, a4);
              v58 = 0;
              WTF::LogArgument<WTF::NativePromise<void,void,0u>>::toString(a5, v59);
              v49 = 0;
              v50 = 0;
              v31 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
              LODWORD(v50) = 3;
              v49 = v31;
              v32 = HIDWORD(v50);
              *((_DWORD *)v31 + 4 * HIDWORD(v50)) = buf;
              v33 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v31 + 2 * v32 + 1) = v33;
              *((_DWORD *)v31 + 4 * (v32 + 1)) = v56;
              v34 = v57;
              if (v57)
                *(_DWORD *)v57 += 2;
              *((_QWORD *)v31 + 2 * (v32 + 1) + 1) = v34;
              *((_DWORD *)v31 + 4 * (v32 + 2)) = v58;
              v35 = v59[0];
              if (v59[0])
                *(_DWORD *)v59[0] += 2;
              *((_QWORD *)v31 + 2 * (v32 + 2) + 1) = v35;
              HIDWORD(v50) = v32 + 3;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v30 + 16))(v30, a1, a2, &v49);
              v36 = v49;
              if (HIDWORD(v50))
              {
                v37 = a4;
                v38 = 16 * HIDWORD(v50);
                v39 = (WTF::StringImpl **)((char *)v49 + 8);
                do
                {
                  v40 = *v39;
                  *v39 = 0;
                  if (v40)
                  {
                    if (*(_DWORD *)v40 == 2)
                      WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v22);
                    else
                      *(_DWORD *)v40 -= 2;
                  }
                  v39 += 2;
                  v38 -= 16;
                }
                while (v38);
                v36 = v49;
                a4 = v37;
              }
              if (v36)
              {
                v49 = 0;
                LODWORD(v50) = 0;
                WTF::fastFree(v36, v22);
              }
              v41 = v59[0];
              v59[0] = 0;
              if (v41)
              {
                if (*(_DWORD *)v41 == 2)
                  WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v41 -= 2;
              }
              v42 = v57;
              v57 = 0;
              if (v42)
              {
                if (*(_DWORD *)v42 == 2)
                  WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v42 -= 2;
              }
              v43 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v43)
              {
                if (*(_DWORD *)v43 == 2)
                  WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v43 -= 2;
              }
              ++v29;
            }
            while (v29 != (uint64_t *)v45);
          }
          v44 = __ldxr(v24);
          if (v44 == 1)
          {
            if (!__stlxr(0, v24))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v54;
  v54 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v22);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_19478BAD4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF *a15, int a16, int a17, WTF::StringImpl *a18, WTF::StringImpl *a19, uint64_t a20,WTF::StringImpl *a21,char a22,WTF::StringImpl *a23,uint64_t a24,WTF::StringImpl *a25,uint64_t a26,WTF::StringImpl *a27)
{
  unsigned __int8 *v27;
  int v29;

  v29 = __ldxr(v27);
  if (v29 == 1)
  {
    if (!__stlxr(0, v27))
    {
LABEL_6:
      if (a21)
      {
        if (*(_DWORD *)a21 == 2)
          WTF::StringImpl::destroy(a21, a2);
        else
          *(_DWORD *)a21 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIvvLj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIvNS8_6detail15VoidPlaceholderEEENS8_8FunctionIFSI_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISM_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSQ_1EJSC_SI_SL_EEEOS10_EEEDcSS_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v2 != -1)
  {
    if (!(_DWORD)v2)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_1E32059D0[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 8) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIvvLj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIvNS8_6detail15VoidPlaceholderEEENS8_8FunctionIFSI_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISM_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSQ_1EJSC_SI_SL_EEEOS10_EEEDcSS_DpT0_(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int v7;
  int v8;
  char v9;
  char v10;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 1)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E32059D0[v5])(&v10, v4);
LABEL_7:
    *(_DWORD *)(v4 + 8) = -1;
    *(_WORD *)v4 = *(_WORD *)a3;
    *(_DWORD *)(v4 + 8) = 1;
    return result;
  }
  v8 = *(unsigned __int8 *)(a2 + 1);
  v6 = (char *)(a2 + 1);
  v7 = v8;
  if ((*(_BYTE *)(a3 + 1) != 0) != (v8 != 0))
  {
    if (*(_BYTE *)(a3 + 1))
    {
      *v6 = 1;
      v6 = &v9;
LABEL_10:
      *v6 = 0;
      return result;
    }
    if (v7)
      goto LABEL_10;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIvvLj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIvNS8_6detail15VoidPlaceholderEEENS8_8FunctionIFSI_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISM_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSQ_1EJSC_SI_SL_EEEOS10_EEEDcSS_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 2)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E32059D0[v5])(&v8, v4);
LABEL_6:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 2;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t *WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCommand<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallback<false,void>>::~ThenCommand(uint64_t *a1)
{
  WTF::NativePromiseBase *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  WTF::NativePromiseBase *v17;

  v2 = (WTF::NativePromiseBase *)a1[1];
  if (v2)
  {
    v3 = *a1;
    a1[1] = 0;
    v17 = v2;
    WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::maybeSettle(v3, &v17, (WTF::Logger::LogSiteIdentifier *)(a1 + 2));
    v4 = (unsigned int *)v17;
    v17 = 0;
    if (v4)
    {
      v5 = v4 + 2;
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v4 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
      }
    }
    v8 = (unsigned int *)a1[1];
    a1[1] = 0;
    if (v8)
    {
      v9 = v8 + 2;
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        atomic_store(1u, v8 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 8))(v8);
      }
    }
  }
  else
  {
    a1[1] = 0;
  }
  v12 = (unsigned int *)*a1;
  *a1 = 0;
  if (v12)
  {
    v13 = v12 + 2;
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v12 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 16))(v12);
    }
  }
  return a1;
}

void sub_19478BF64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  unsigned int **v10;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;

  if (a10)
  {
    v12 = a10 + 2;
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, a10 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 8))(a10);
    }
  }
  v15 = v10[1];
  v10[1] = 0;
  if (v15)
  {
    v16 = v15 + 2;
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      atomic_store(1u, v15 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 8))(v15);
    }
  }
  v19 = *v10;
  *v10 = 0;
  if (v19)
  {
    v20 = v19 + 2;
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
    {
      atomic_store(1u, v19 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v19 + 16))(v19);
    }
  }
  _Unwind_Resume(exception_object);
}

char **WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::maybeSettle(uint64_t a1, WTF::NativePromiseBase **a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::Lock *v6;
  _BYTE *v8;
  char **result;
  uint64_t v10;
  WTF::NativePromiseBase **v11;
  WTF::NativePromiseBase *v12;
  int v13;
  BOOL v14;
  WTF::NativePromiseBase *v15;
  WTF::Lock *v16;
  char v17;

  v6 = (WTF::Lock *)(a1 + 48);
  v16 = v6;
  v17 = 1;
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_4:
    v6 = (WTF::Lock *)MEMORY[0x19AEA534C]();
    goto LABEL_5;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_4;
LABEL_5:
  *(_BYTE *)(a1 + 112) = 1;
  v15 = *a2;
  v14 = *(_DWORD *)(a1 + 64) == 0;
  v8 = (_BYTE *)WTF::NativePromiseBase::logChannel(v6);
  if (*v8 && v8[16] >= 4u)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [26],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,char [11],void const*,char [12],BOOL,char [2]>((uint64_t)v8, 4u, a3, " invoking maybeSettle() [", a1, " callback:", (int)&v15, " isNothing:", (uint64_t)&v14, "]");
  if (*(_DWORD *)(a1 + 64))
  {
    result = (char **)WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(*a2, a1, (unsigned __int8 **)&v16);
  }
  else
  {
    result = (char **)(a1 + 72);
    v10 = *(unsigned int *)(a1 + 84);
    if ((_DWORD)v10 == *(_DWORD *)(a1 + 80))
    {
      result = (char **)WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v10 + 1, (unint64_t)a2);
      a2 = (WTF::NativePromiseBase **)result;
      v10 = *(unsigned int *)(a1 + 84);
      v11 = (WTF::NativePromiseBase **)(*(_QWORD *)(a1 + 72) + 8 * v10);
    }
    else
    {
      v11 = (WTF::NativePromiseBase **)&(*result)[8 * v10];
    }
    v12 = *a2;
    *a2 = 0;
    *v11 = v12;
    *(_DWORD *)(a1 + 84) = v10 + 1;
  }
  if (v17)
  {
    result = (char **)v16;
    v13 = __ldxr((unsigned __int8 *)v16);
    if (v13 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v16))
        return result;
    }
    else
    {
      __clrex();
    }
    return (char **)WTF::Lock::unlockSlow((WTF::Lock *)result);
  }
  return result;
}

void sub_19478C19C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::Lock *a13, char a14)
{
  int v15;

  if (a14)
  {
    v15 = __ldxr((unsigned __int8 *)a13);
    if (v15 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)a13))
        goto LABEL_7;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow(a13);
  }
LABEL_7:
  _Unwind_Resume(exception_object);
}

unsigned __int8 *WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(WTF::NativePromiseBase *a1, uint64_t a2, unsigned __int8 **a3)
{
  WTF::NativePromiseBase *v5;
  int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned __int8 *v12;
  unsigned __int8 *result;
  BOOL v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;
  int v19;
  int v20;
  uint64_t v23;
  int v24;
  int v25;
  unsigned __int8 *v27;

  v5 = a1;
  if (*((_QWORD *)a1 + 2))
  {
    v6 = atomic_load((unsigned __int8 *)(a2 + 113));
    if (v6 != 1
      || (a1 = (WTF::NativePromiseBase *)(*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 24))(*((_QWORD **)a1 + 2)),
          !(_DWORD)a1))
    {
      v7 = *((_QWORD *)v5 + 2);
      v8 = (unsigned int *)((char *)v5 + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
      v10 = (unsigned int *)(a2 + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
      v12 = (unsigned __int8 *)WTF::fastMalloc((WTF *)0x20);
      *(_QWORD *)v12 = &off_1E3205B40;
      *((_QWORD *)v12 + 1) = v5;
      *((_QWORD *)v12 + 2) = v5;
      *((_QWORD *)v12 + 3) = a2;
      v27 = v12;
      (*(void (**)(uint64_t, unsigned __int8 **))(*(_QWORD *)v7 + 16))(v7, &v27);
      result = v27;
      v27 = 0;
      if (result)
        return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 8))(result);
      return result;
    }
  }
  if (*((_BYTE *)v5 + 56))
  {
    v27 = (unsigned __int8 *)v5;
    result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(a1);
    if (*result)
      v14 = result[16] >= 4u;
    else
      v14 = 0;
    if (v14)
      return (unsigned __int8 *)WTF::Logger::log<char [32],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, 4u, "ThenCallback disconnected from ", a2, " aborting [callback:", (int)&v27, " callSite:", (WTF::NativePromiseBase *)((char *)v5 + 24), "]");
    return result;
  }
  v15 = *a3;
  v16 = __ldxr(*a3);
  if (v16 != 1)
  {
    __clrex();
    goto LABEL_22;
  }
  if (__stlxr(0, v15))
LABEL_22:
    WTF::Lock::unlockSlow((WTF::Lock *)v15);
  v17 = (unsigned __int8 *)(a2 + 48);
  if (__ldaxr((unsigned __int8 *)(a2 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v17))
  {
    goto LABEL_27;
  }
  MEMORY[0x19AEA534C](a2 + 48);
LABEL_27:
  v19 = *(_DWORD *)(a2 + 64);
  v20 = __ldxr(v17);
  if (v20 != 1)
  {
    __clrex();
    goto LABEL_31;
  }
  if (__stlxr(0, v17))
LABEL_31:
    WTF::Lock::unlockSlow((WTF::Lock *)(a2 + 48));
  if (v19 != 2)
  {
    if (__ldaxr(v17))
    {
      __clrex();
    }
    else if (!__stxr(1u, v17))
    {
      goto LABEL_48;
    }
    MEMORY[0x19AEA534C](a2 + 48);
LABEL_48:
    if (*(_DWORD *)(a2 + 64) != 1)
      goto LABEL_60;
    LOWORD(v27) = *(_WORD *)(a2 + 56);
    v25 = __ldxr(v17);
    if (v25 == 1)
    {
      if (!__stlxr(0, v17))
        goto LABEL_54;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(a2 + 48));
LABEL_54:
    (*(void (**)(WTF::NativePromiseBase *, uint64_t, unsigned __int8 **))(*(_QWORD *)v5 + 24))(v5, a2, &v27);
    goto LABEL_55;
  }
  if (__ldaxr(v17))
  {
    __clrex();
  }
  else if (!__stxr(1u, v17))
  {
    goto LABEL_39;
  }
  MEMORY[0x19AEA534C](a2 + 48);
LABEL_39:
  if (*(_DWORD *)(a2 + 64) != 2)
  {
LABEL_60:
    result = (unsigned __int8 *)std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
    return result;
  }
  v23 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  v24 = __ldxr(v17);
  if (v24 == 1)
  {
    if (!__stlxr(0, v17))
      goto LABEL_45;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(a2 + 48));
LABEL_45:
  (*(void (**)(unsigned __int8 **__return_ptr, uint64_t))(*(_QWORD *)v23 + 16))(&v27, v23);
  (*(void (**)(WTF::NativePromiseBase *, uint64_t, unsigned __int8 **))(*(_QWORD *)v5 + 24))(v5, a2, &v27);
  (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
LABEL_55:
  result = *a3;
  if (__ldaxr(*a3))
  {
    __clrex();
  }
  else if (!__stxr(1u, result))
  {
    return result;
  }
  return (unsigned __int8 *)MEMORY[0x19AEA534C]();
}

void sub_19478C4D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  unsigned __int8 **v10;

  if (__ldaxr(*v10))
  {
    __clrex();
  }
  else if (!__stxr(1u, *v10))
  {
LABEL_6:
    _Unwind_Resume(exception_object);
  }
  MEMORY[0x19AEA534C]();
  goto LABEL_6;
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [26],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,char [11],void const*,char [12],BOOL,char [2]>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4, uint64_t a5, const char *a6, int a7, const char *a8, uint64_t a9, char *a10)
{
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  NSObject *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  unsigned __int8 *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  WTF::Logger *v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  const char *v42;
  WTF::Logger *v43;
  uint64_t v44;
  WTF::StringImpl **v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  int v55;
  uint64_t v56;
  WTF::Logger *v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  __int128 buf;
  int v80;
  WTF::StringImpl *v81;
  int v82;
  WTF::StringImpl *v83;
  int v84;
  WTF::StringImpl *v85;
  int v86;
  WTF::StringImpl *v87;
  int v88;
  WTF::StringImpl *v89;
  int v90;
  WTF::StringImpl *v91;
  int v92;
  _QWORD v93[3];

  v93[1] = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  WTF::String::String((WTF::String *)&v70, a4);
  WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(a5, &v69);
  WTF::String::String((WTF::String *)&v68, a6);
  WTF::LogArgument<void const*>::toString();
  WTF::String::String((WTF::String *)&v66, a8);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = (WTF::StringImpl *)buf;
  WTF::String::String((WTF::String *)&v65, a10);
  v63 = v70;
  v78 = v69;
  *(_QWORD *)&buf = v71;
  v76 = v67;
  v77 = v68;
  v74 = v11;
  v75 = v66;
  v73 = v65;
  result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t *)&buf, (uint64_t *)&v63, (uint64_t *)&v78, (uint64_t *)&v77, (uint64_t *)&v76, (uint64_t *)&v75, (uint64_t *)&v74, (uint64_t *)&v73, &v72);
  if (!v72)
  {
    __break(0xC471u);
    return result;
  }
  v14 = v65;
  v65 = 0;
  if (!v14)
  {
LABEL_5:
    if (v11)
      goto LABEL_6;
    goto LABEL_8;
  }
  if (*(_DWORD *)v14 != 2)
  {
    *(_DWORD *)v14 -= 2;
    goto LABEL_5;
  }
  WTF::StringImpl::destroy(v14, v13);
  if (v11)
  {
LABEL_6:
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v13);
    else
      *(_DWORD *)v11 -= 2;
  }
LABEL_8:
  v15 = v66;
  v66 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v13);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = v67;
  v67 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v13);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = v68;
  v68 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v13);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = v69;
  v69 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v13);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v70;
  v70 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v13);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = v71;
  v71 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v13);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = *(NSObject **)(a1 + 32);
  v22 = os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v22)
  {
    WTF::String::utf8();
    v24 = v63 ? (char *)v63 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v24;
    _os_log_impl(&dword_1940B8000, v21, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v22 = (uint64_t)v63;
    v63 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 1)
        v22 = WTF::fastFree((WTF *)v22, v23);
      else
        --*(_DWORD *)v22;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v25 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v26 = *v25;
      if ((v26 & 1) != 0)
        break;
      v27 = __ldaxr(v25);
      if (v27 == v26)
      {
        if (!__stxr(v26 | 1, v25))
        {
          v28 = WTF::Logger::observers((WTF::Logger *)v22);
          v29 = *(unsigned int *)(v28 + 12);
          if ((_DWORD)v29)
          {
            v30 = *(uint64_t **)v28;
            v56 = *(_QWORD *)v28 + 8 * v29;
            do
            {
              v31 = *v30;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v80 = 0;
              WTF::String::String((WTF::String *)&v81, a4);
              v82 = 0;
              WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(a5, &v83);
              v84 = 0;
              WTF::String::String((WTF::String *)&v85, a6);
              v86 = 0;
              WTF::LogArgument<void const*>::toString();
              v88 = 0;
              WTF::String::String((WTF::String *)&v89, a8);
              v90 = 0;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v91 = v78;
              v92 = 0;
              WTF::String::String((WTF::String *)v93, a10);
              v63 = 0;
              v64 = 0;
              v32 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x80);
              LODWORD(v64) = 8;
              v63 = v32;
              v33 = HIDWORD(v64);
              *((_DWORD *)v32 + 4 * HIDWORD(v64)) = buf;
              v34 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v32 + 2 * v33 + 1) = v34;
              *((_DWORD *)v32 + 4 * (v33 + 1)) = v80;
              v35 = v81;
              if (v81)
                *(_DWORD *)v81 += 2;
              *((_QWORD *)v32 + 2 * (v33 + 1) + 1) = v35;
              *((_DWORD *)v32 + 4 * (v33 + 2)) = v82;
              v36 = v83;
              if (v83)
                *(_DWORD *)v83 += 2;
              *((_QWORD *)v32 + 2 * (v33 + 2) + 1) = v36;
              *((_DWORD *)v32 + 4 * (v33 + 3)) = v84;
              v37 = v85;
              if (v85)
                *(_DWORD *)v85 += 2;
              *((_QWORD *)v32 + 2 * (v33 + 3) + 1) = v37;
              *((_DWORD *)v32 + 4 * (v33 + 4)) = v86;
              v38 = v87;
              if (v87)
                *(_DWORD *)v87 += 2;
              *((_QWORD *)v32 + 2 * (v33 + 4) + 1) = v38;
              *((_DWORD *)v32 + 4 * (v33 + 5)) = v88;
              v39 = v89;
              if (v89)
                *(_DWORD *)v89 += 2;
              *((_QWORD *)v32 + 2 * (v33 + 5) + 1) = v39;
              *((_DWORD *)v32 + 4 * (v33 + 6)) = v90;
              v40 = v91;
              if (v91)
                *(_DWORD *)v91 += 2;
              *((_QWORD *)v32 + 2 * (v33 + 6) + 1) = v40;
              *((_DWORD *)v32 + 4 * (v33 + 7)) = v92;
              v41 = v93[0];
              if (v93[0])
                *(_DWORD *)v93[0] += 2;
              v42 = a4;
              *((_QWORD *)v32 + 2 * (v33 + 7) + 1) = v41;
              HIDWORD(v64) = v33 + 8;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v31 + 16))(v31, a1, a2, &v63);
              v43 = v63;
              if (HIDWORD(v64))
              {
                v44 = 16 * HIDWORD(v64);
                v45 = (WTF::StringImpl **)((char *)v63 + 8);
                do
                {
                  v46 = *v45;
                  *v45 = 0;
                  if (v46)
                  {
                    if (*(_DWORD *)v46 == 2)
                      WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v23);
                    else
                      *(_DWORD *)v46 -= 2;
                  }
                  v45 += 2;
                  v44 -= 16;
                }
                while (v44);
                v43 = v63;
              }
              a4 = v42;
              if (v43)
              {
                v63 = 0;
                LODWORD(v64) = 0;
                WTF::fastFree(v43, v23);
              }
              v47 = (WTF::StringImpl *)v93[0];
              v93[0] = 0;
              if (v47)
              {
                if (*(_DWORD *)v47 == 2)
                  WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v23);
                else
                  *(_DWORD *)v47 -= 2;
              }
              v48 = v91;
              v91 = 0;
              if (v48)
              {
                if (*(_DWORD *)v48 == 2)
                  WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v23);
                else
                  *(_DWORD *)v48 -= 2;
              }
              v49 = v89;
              v89 = 0;
              if (v49)
              {
                if (*(_DWORD *)v49 == 2)
                  WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v23);
                else
                  *(_DWORD *)v49 -= 2;
              }
              v50 = v87;
              v87 = 0;
              if (v50)
              {
                if (*(_DWORD *)v50 == 2)
                  WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v23);
                else
                  *(_DWORD *)v50 -= 2;
              }
              v51 = v85;
              v85 = 0;
              if (v51)
              {
                if (*(_DWORD *)v51 == 2)
                  WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v23);
                else
                  *(_DWORD *)v51 -= 2;
              }
              v52 = v83;
              v83 = 0;
              if (v52)
              {
                if (*(_DWORD *)v52 == 2)
                  WTF::StringImpl::destroy(v52, (WTF::StringImpl *)v23);
                else
                  *(_DWORD *)v52 -= 2;
              }
              v53 = v81;
              v81 = 0;
              if (v53)
              {
                if (*(_DWORD *)v53 == 2)
                  WTF::StringImpl::destroy(v53, (WTF::StringImpl *)v23);
                else
                  *(_DWORD *)v53 -= 2;
              }
              v54 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v54)
              {
                if (*(_DWORD *)v54 == 2)
                  WTF::StringImpl::destroy(v54, (WTF::StringImpl *)v23);
                else
                  *(_DWORD *)v54 -= 2;
              }
              ++v30;
            }
            while (v30 != (uint64_t *)v56);
          }
          v55 = __ldxr(v25);
          if (v55 == 1)
          {
            if (!__stlxr(0, v25))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = v72;
  v72 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v23);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_19478CE5C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,WTF *a29,int a30,int a31,WTF::StringImpl *a32,WTF::StringImpl *a33,WTF::StringImpl *a34,WTF::StringImpl *a35,WTF::StringImpl *a36,WTF::StringImpl *a37,uint64_t a38,WTF::StringImpl *a39)
{
  unsigned __int8 *v39;
  int v41;

  v41 = __ldxr(v39);
  if (v41 == 1)
  {
    if (!__stlxr(0, v39))
    {
LABEL_6:
      if (a39)
      {
        if (*(_DWORD *)a39 == 2)
          WTF::StringImpl::destroy(a39, a2);
        else
          *(_DWORD *)a39 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

WTF::StringImpl *WTF::Logger::log<char [32],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>(uint64_t a1, unsigned int a2, char *a3, uint64_t a4, const char *a5, int a6, const char *a7, WTF::Logger::LogSiteIdentifier *a8, char *a9)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  NSObject *v19;
  uint64_t v20;
  void *v21;
  char *v22;
  unsigned __int8 *v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  WTF::Logger *v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  WTF::Logger *v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl **v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  int v51;
  uint64_t v52;
  WTF::Logger *v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  __int128 buf;
  int v75;
  WTF::StringImpl *v76;
  int v77;
  WTF::StringImpl *v78;
  int v79;
  WTF::StringImpl *v80;
  int v81;
  WTF::StringImpl *v82;
  int v83;
  WTF::StringImpl *v84;
  int v85;
  _QWORD v86[3];

  v86[1] = *MEMORY[0x1E0C80C00];
  WTF::String::String((WTF::String *)&v67, a3);
  WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(a4, &v66);
  WTF::String::String((WTF::String *)&v65, a5);
  WTF::LogArgument<void const*>::toString();
  WTF::String::String((WTF::String *)&v63, a7);
  WTF::Logger::LogSiteIdentifier::toString(a8);
  WTF::String::String((WTF::String *)&v61, a9);
  v59 = v66;
  v73 = v65;
  *(_QWORD *)&buf = v67;
  v72 = v64;
  v70 = v62;
  v71 = v63;
  v69 = v61;
  result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v59, (uint64_t *)&v73, (uint64_t *)&v72, (uint64_t *)&v71, (uint64_t *)&v70, (uint64_t *)&v69, &v68);
  if (v68)
  {
    v12 = v61;
    v61 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = v62;
    v62 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v11);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = v63;
    v63 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v11);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = v64;
    v64 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v11);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = v65;
    v65 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v11);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = v66;
    v66 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v11);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = v67;
    v67 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v11);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = *(NSObject **)(a1 + 32);
    v20 = os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v20)
    {
      WTF::String::utf8();
      v22 = v59 ? (char *)v59 + 16 : 0;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v22;
      _os_log_impl(&dword_1940B8000, v19, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      v20 = (uint64_t)v59;
      v59 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 1)
          v20 = WTF::fastFree((WTF *)v20, v21);
        else
          --*(_DWORD *)v20;
      }
    }
    if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
    {
      v23 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v24 = *v23;
        if ((v24 & 1) != 0)
          break;
        v25 = __ldaxr(v23);
        if (v25 == v24)
        {
          if (!__stxr(v24 | 1, v23))
          {
            v26 = WTF::Logger::observers((WTF::Logger *)v20);
            v27 = *(unsigned int *)(v26 + 12);
            if ((_DWORD)v27)
            {
              v28 = *(uint64_t **)v26;
              v52 = *(_QWORD *)v26 + 8 * v27;
              do
              {
                v29 = *v28;
                LODWORD(buf) = 0;
                WTF::String::String((WTF::String *)((char *)&buf + 8), a3);
                v75 = 0;
                WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(a4, &v76);
                v77 = 0;
                WTF::String::String((WTF::String *)&v78, a5);
                v79 = 0;
                WTF::LogArgument<void const*>::toString();
                v81 = 0;
                WTF::String::String((WTF::String *)&v82, a7);
                v83 = 0;
                WTF::Logger::LogSiteIdentifier::toString(a8);
                v85 = 0;
                WTF::String::String((WTF::String *)v86, a9);
                v59 = 0;
                v60 = 0;
                v30 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x70);
                LODWORD(v60) = 7;
                v59 = v30;
                v31 = HIDWORD(v60);
                *((_DWORD *)v30 + 4 * HIDWORD(v60)) = buf;
                v32 = *((_QWORD *)&buf + 1);
                if (*((_QWORD *)&buf + 1))
                  **((_DWORD **)&buf + 1) += 2;
                *((_QWORD *)v30 + 2 * v31 + 1) = v32;
                *((_DWORD *)v30 + 4 * (v31 + 1)) = v75;
                v33 = v76;
                if (v76)
                  *(_DWORD *)v76 += 2;
                *((_QWORD *)v30 + 2 * (v31 + 1) + 1) = v33;
                *((_DWORD *)v30 + 4 * (v31 + 2)) = v77;
                v34 = v78;
                if (v78)
                  *(_DWORD *)v78 += 2;
                *((_QWORD *)v30 + 2 * (v31 + 2) + 1) = v34;
                *((_DWORD *)v30 + 4 * (v31 + 3)) = v79;
                v35 = v80;
                if (v80)
                  *(_DWORD *)v80 += 2;
                *((_QWORD *)v30 + 2 * (v31 + 3) + 1) = v35;
                *((_DWORD *)v30 + 4 * (v31 + 4)) = v81;
                v36 = v82;
                if (v82)
                  *(_DWORD *)v82 += 2;
                *((_QWORD *)v30 + 2 * (v31 + 4) + 1) = v36;
                *((_DWORD *)v30 + 4 * (v31 + 5)) = v83;
                v37 = v84;
                if (v84)
                  *(_DWORD *)v84 += 2;
                *((_QWORD *)v30 + 2 * (v31 + 5) + 1) = v37;
                *((_DWORD *)v30 + 4 * (v31 + 6)) = v85;
                v38 = v86[0];
                if (v86[0])
                  *(_DWORD *)v86[0] += 2;
                *((_QWORD *)v30 + 2 * (v31 + 6) + 1) = v38;
                HIDWORD(v60) = v31 + 7;
                (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v29 + 16))(v29, a1, a2, &v59);
                v39 = v59;
                if (HIDWORD(v60))
                {
                  v40 = a4;
                  v41 = 16 * HIDWORD(v60);
                  v42 = (WTF::StringImpl **)((char *)v59 + 8);
                  do
                  {
                    v43 = *v42;
                    *v42 = 0;
                    if (v43)
                    {
                      if (*(_DWORD *)v43 == 2)
                        WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v21);
                      else
                        *(_DWORD *)v43 -= 2;
                    }
                    v42 += 2;
                    v41 -= 16;
                  }
                  while (v41);
                  v39 = v59;
                  a4 = v40;
                }
                if (v39)
                {
                  v59 = 0;
                  LODWORD(v60) = 0;
                  WTF::fastFree(v39, v21);
                }
                v44 = (WTF::StringImpl *)v86[0];
                v86[0] = 0;
                if (v44)
                {
                  if (*(_DWORD *)v44 == 2)
                    WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v21);
                  else
                    *(_DWORD *)v44 -= 2;
                }
                v45 = v84;
                v84 = 0;
                if (v45)
                {
                  if (*(_DWORD *)v45 == 2)
                    WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v21);
                  else
                    *(_DWORD *)v45 -= 2;
                }
                v46 = v82;
                v82 = 0;
                if (v46)
                {
                  if (*(_DWORD *)v46 == 2)
                    WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v21);
                  else
                    *(_DWORD *)v46 -= 2;
                }
                v47 = v80;
                v80 = 0;
                if (v47)
                {
                  if (*(_DWORD *)v47 == 2)
                    WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v21);
                  else
                    *(_DWORD *)v47 -= 2;
                }
                v48 = v78;
                v78 = 0;
                if (v48)
                {
                  if (*(_DWORD *)v48 == 2)
                    WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v21);
                  else
                    *(_DWORD *)v48 -= 2;
                }
                v49 = v76;
                v76 = 0;
                if (v49)
                {
                  if (*(_DWORD *)v49 == 2)
                    WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v21);
                  else
                    *(_DWORD *)v49 -= 2;
                }
                v50 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                *((_QWORD *)&buf + 1) = 0;
                if (v50)
                {
                  if (*(_DWORD *)v50 == 2)
                    WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v21);
                  else
                    *(_DWORD *)v50 -= 2;
                }
                ++v28;
              }
              while (v28 != (uint64_t *)v52);
            }
            v51 = __ldxr(v23);
            if (v51 == 1)
            {
              if (!__stlxr(0, v23))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    result = v68;
    v68 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v21);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

void sub_19478D93C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,WTF *a26,int a27,int a28,WTF::StringImpl *a29,WTF::StringImpl *a30,WTF::StringImpl *a31,WTF::StringImpl *a32,WTF::StringImpl *a33,WTF::StringImpl *a34,uint64_t a35,WTF::StringImpl *a36)
{
  unsigned __int8 *v36;
  int v38;

  v38 = __ldxr(v36);
  if (v38 == 1)
  {
    if (!__stlxr(0, v36))
    {
LABEL_6:
      if (a36)
      {
        if (*(_DWORD *)a36 == 2)
          WTF::StringImpl::destroy(a36, a2);
        else
          *(_DWORD *)a36 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *a1 = &off_1E3205B40;
  v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
    }
  }
  v6 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v6 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *(_QWORD *)this = &off_1E3205B40;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1}::operator()((WTF::NativePromiseBase *)(a1 + 8));
}

WTF::StringImpl *WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1}::operator()(WTF::NativePromiseBase *a1)
{
  uint64_t v1;
  uint64_t v2;
  WTF::StringImpl *result;
  BOOL v4;
  unsigned __int8 *v6;
  int v8;
  int v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v14;
  int v15;
  int v16;
  __int16 v17;
  _BYTE v18[2];
  uint64_t v19;

  v1 = *(_QWORD *)a1;
  v2 = *((_QWORD *)a1 + 2);
  if (!*(_BYTE *)(*(_QWORD *)a1 + 56))
  {
    v6 = (unsigned __int8 *)(v2 + 48);
    if (__ldaxr((unsigned __int8 *)(v2 + 48)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v6))
    {
      goto LABEL_12;
    }
    MEMORY[0x19AEA534C](v2 + 48);
LABEL_12:
    v8 = *(_DWORD *)(v2 + 64);
    v9 = __ldxr(v6);
    if (v9 == 1)
    {
      if (!__stlxr(0, v6))
      {
LABEL_17:
        v10 = *((_QWORD *)a1 + 2);
        v11 = (unsigned __int8 *)(v10 + 48);
        if (v8 == 2)
        {
          if (__ldaxr(v11))
          {
            __clrex();
          }
          else if (!__stxr(1u, v11))
          {
            goto LABEL_24;
          }
          MEMORY[0x19AEA534C](v10 + 48);
LABEL_24:
          if (*(_DWORD *)(v10 + 64) == 2)
          {
            v14 = *(_QWORD *)(v10 + 56);
            *(_QWORD *)(v10 + 56) = 0;
            v15 = __ldxr(v11);
            if (v15 == 1)
            {
              if (!__stlxr(0, v11))
                goto LABEL_30;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)(v10 + 48));
LABEL_30:
            (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v14 + 16))(v18, v14);
            (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v1 + 24))(v1, v10, v18);
            return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
          }
LABEL_40:
          result = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
          __break(1u);
          return result;
        }
        if (__ldaxr(v11))
        {
          __clrex();
        }
        else if (!__stxr(1u, v11))
        {
          goto LABEL_33;
        }
        MEMORY[0x19AEA534C](v10 + 48);
LABEL_33:
        if (*(_DWORD *)(v10 + 64) != 1)
          goto LABEL_40;
        v17 = *(_WORD *)(v10 + 56);
        v16 = __ldxr(v11);
        if (v16 == 1)
        {
          if (!__stlxr(0, v11))
            return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, uint64_t, __int16 *))(*(_QWORD *)v1 + 24))(v1, v10, &v17);
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)(v10 + 48));
        return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, uint64_t, __int16 *))(*(_QWORD *)v1 + 24))(v1, v10, &v17);
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 48));
    goto LABEL_17;
  }
  v19 = *(_QWORD *)a1;
  result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel(a1);
  if (*(_BYTE *)result)
    v4 = *((unsigned __int8 *)result + 16) >= 4u;
  else
    v4 = 0;
  if (v4)
    return WTF::Logger::log<char [32],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, 4u, "ThenCallback disconnected from ", v2, " aborting [callback:", (int)&v19, " callSite:", (WTF::Logger::LogSiteIdentifier *)(v1 + 24), "]");
  return result;
}

void sub_19478E01C(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

char *WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(char **a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;

  v3 = a3;
  v5 = *a1;
  if ((unint64_t)*a1 <= a3)
  {
    v6 = *((unsigned int *)a1 + 3);
    if ((unint64_t)&v5[8 * v6] > a3)
    {
      v7 = *((unsigned int *)a1 + 2);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v19 = *a1;
        return &v19[8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3)];
      }
      if (v10 < 2)
      {
        v11 = (char *)(a1 + 2);
        *a1 = (char *)(a1 + 2);
        *((_DWORD *)a1 + 2) = 1;
        goto LABEL_31;
      }
      if (!(v10 >> 29))
      {
        v11 = (char *)WTF::fastMalloc((WTF *)(8 * v10));
        *((_DWORD *)a1 + 2) = v10;
        *a1 = v11;
LABEL_31:
        memcpy(v11, v5, 8 * v6);
        v19 = *a1;
        if (a1 + 2 != (char **)v5 && v5)
        {
          if (v19 == v5)
          {
            *a1 = 0;
            *((_DWORD *)a1 + 2) = 0;
          }
          WTF::fastFree((WTF *)v5, v20);
          v19 = *a1;
        }
        return &v19[8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3)];
      }
LABEL_38:
      __break(0xC471u);
      JUMPOUT(0x19478E1FCLL);
    }
  }
  v12 = *((unsigned int *)a1 + 2);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= a2)
    v15 = a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *((unsigned int *)a1 + 3);
    if (v15 < 2)
    {
      v17 = (char *)(a1 + 2);
      *a1 = (char *)(a1 + 2);
      *((_DWORD *)a1 + 2) = 1;
    }
    else
    {
      if (v15 >> 29)
        goto LABEL_38;
      v17 = (char *)WTF::fastMalloc((WTF *)(8 * v15));
      *((_DWORD *)a1 + 2) = v15;
      *a1 = v17;
    }
    memcpy(v17, v5, 8 * v16);
    if (a1 + 2 != (char **)v5 && v5)
    {
      if (*a1 == v5)
      {
        *a1 = 0;
        *((_DWORD *)a1 + 2) = 0;
      }
      WTF::fastFree((WTF *)v5, v18);
    }
  }
  return (char *)v3;
}

_QWORD *WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::ThenCallback<false,void>::~ThenCallback(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  *a1 = &off_1E3205A10;
  v3 = a1[9];
  a1[9] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (uint64_t *)a1[8];
  a1[8] = 0;
  if (v4)
  {
    if (*v4)
    {
      WTF::NativePromise<void,void,0u>::assertIsDead(*v4);
      v5 = (unsigned int *)*v4;
      *v4 = 0;
      if (v5)
      {
        v6 = v5 + 2;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          atomic_store(1u, v5 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
        }
      }
    }
    else
    {
      *v4 = 0;
    }
    WTF::fastFree((WTF *)v4, a2);
  }
  *a1 = off_1E3205A40;
  v9 = a1[2];
  a1[2] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
  return a1;
}

void sub_19478E2D4(_Unwind_Exception *exception_object)
{
  unsigned int **v1;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *v1;
  *v1 = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::ThenCallback<false,void>::~ThenCallback(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  *(_QWORD *)this = &off_1E3205A10;
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (uint64_t *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
  {
    if (*v4)
    {
      WTF::NativePromise<void,void,0u>::assertIsDead(*v4);
      v5 = (unsigned int *)*v4;
      *v4 = 0;
      if (v5)
      {
        v6 = v5 + 2;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          atomic_store(1u, v5 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
        }
      }
    }
    else
    {
      *v4 = 0;
    }
    WTF::fastFree((WTF *)v4, a2);
  }
  *(_QWORD *)this = off_1E3205A40;
  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
  return WTF::fastFree(this, a2);
}

void sub_19478E3EC(_Unwind_Exception *exception_object)
{
  unsigned int **v1;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *v1;
  *v1 = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::ThenCallback<false,void>::disconnect(uint64_t a1)
{
  uint64_t result;

  *(_BYTE *)(a1 + 56) = 1;
  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::ThenCallback<false,void>::processResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  _BYTE *v7;
  BOOL v8;
  char *v9;
  unsigned __int8 *v10;
  uint64_t *v12;
  int v13;
  WTF::NativePromiseBase *v14;
  void *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v19;
  int v20;
  int v21;
  _BYTE *v22;
  uint64_t result;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  _QWORD v28[4];

  v6 = *(_DWORD *)(a3 + 16);
  v28[0] = a1;
  v7 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v7)
    v8 = v7[16] >= 4u;
  else
    v8 = 0;
  if (v8)
  {
    if (v6)
      v9 = "Rejecting";
    else
      v9 = "Resolving";
    WTF::Logger::log<char [10],char [24],WTF::Logger::LogSiteIdentifier,char [2],WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>,char [11],void const*,char [2]>((uint64_t)v7, 4u, v9, " then() call made from ", (WTF::Logger::LogSiteIdentifier *)(a1 + 24), "[", a2, " callback:", (uint64_t)v28, "]");
  }
  v10 = (unsigned __int8 *)(a1 + 57);
  if (__ldaxr((unsigned __int8 *)(a1 + 57)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_14;
  }
  MEMORY[0x19AEA534C](a1 + 57);
LABEL_14:
  v12 = *(uint64_t **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  v13 = __ldxr(v10);
  if (v13 != 1)
  {
    __clrex();
    goto LABEL_18;
  }
  if (__stlxr(0, v10))
LABEL_18:
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 57));
  v14 = (WTF::NativePromiseBase *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 16))(*(_QWORD *)(a1 + 72), a3);
  if (!v12)
    goto LABEL_36;
  v28[0] = 0;
  v28[1] = 0;
  v28[2] = "<chained completion promise>";
  v28[3] = 0;
  v16 = *v12;
  if (!*v12)
  {
    v19 = 0;
    goto LABEL_32;
  }
  v17 = (unsigned __int8 *)(v16 + 48);
  if (__ldaxr((unsigned __int8 *)(v16 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v17))
  {
    goto LABEL_26;
  }
  v14 = (WTF::NativePromiseBase *)MEMORY[0x19AEA534C](v16 + 48);
LABEL_26:
  v20 = *(_DWORD *)(v16 + 64);
  v21 = __ldxr(v17);
  if (v21 != 1)
  {
    __clrex();
    goto LABEL_30;
  }
  if (__stlxr(0, v17))
LABEL_30:
    v14 = (WTF::NativePromiseBase *)WTF::Lock::unlockSlow((WTF::Lock *)v17);
  v19 = *v12;
  if (!v20)
  {
    WTF::NativePromise<void,void,0u>::resolve<std::enable_if<true,void>>(*v12, (WTF::Logger::LogSiteIdentifier *)v28);
    goto LABEL_36;
  }
LABEL_32:
  v22 = (_BYTE *)WTF::NativePromiseBase::logChannel(v14);
  if (*v22 && v22[16] >= 4u)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [39],WTF::NativePromise<void,void,0u>>((uint64_t)v22, 4u, (WTF::Logger::LogSiteIdentifier *)v28, " ignored already resolved or rejected ", v19);
LABEL_36:
  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (v12)
  {
    if (*v12)
    {
      WTF::NativePromise<void,void,0u>::assertIsDead(*v12);
      v24 = (unsigned int *)*v12;
      *v12 = 0;
      if (v24)
      {
        v25 = v24 + 2;
        do
        {
          v26 = __ldaxr(v25);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v25));
        if (!v27)
        {
          atomic_store(1u, v24 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v24 + 16))(v24);
        }
      }
    }
    else
    {
      *v12 = 0;
    }
    return WTF::fastFree((WTF *)v12, v15);
  }
  return result;
}

void sub_19478E69C(_Unwind_Exception *exception_object)
{
  unsigned int **v1;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *v1;
  *v1 = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::ThenCallbackBase::disconnect(uint64_t result)
{
  *(_BYTE *)(result + 56) = 1;
  return result;
}

WTF::StringImpl *WTF::Logger::log<char [10],char [24],WTF::Logger::LogSiteIdentifier,char [2],WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>,char [11],void const*,char [2]>(uint64_t a1, unsigned int a2, char *a3, const char *a4, WTF::Logger::LogSiteIdentifier *a5, const char *a6, uint64_t a7, const char *a8, uint64_t a9, char *a10)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  NSObject *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  unsigned __int8 *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  WTF::Logger *v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  WTF::Logger *v42;
  uint64_t v43;
  WTF::StringImpl **v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  int v54;
  uint64_t v55;
  WTF::Logger *v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  __int128 buf;
  int v81;
  WTF::StringImpl *v82;
  int v83;
  WTF::StringImpl *v84;
  int v85;
  WTF::StringImpl *v86;
  int v87;
  WTF::StringImpl *v88;
  int v89;
  WTF::StringImpl *v90;
  int v91;
  WTF::StringImpl *v92;
  int v93;
  _QWORD v94[3];

  v94[1] = *MEMORY[0x1E0C80C00];
  WTF::String::String((WTF::String *)&v72, a3);
  WTF::String::String((WTF::String *)&v71, a4);
  WTF::Logger::LogSiteIdentifier::toString(a5);
  WTF::String::String((WTF::String *)&v69, a6);
  WTF::LogArgument<WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>>::toString(a7, &v68);
  WTF::String::String((WTF::String *)&v67, a8);
  WTF::LogArgument<void const*>::toString();
  WTF::String::String((WTF::String *)&v65, a10);
  v63 = v71;
  v79 = v70;
  *(_QWORD *)&buf = v72;
  v77 = v68;
  v78 = v69;
  v76 = v67;
  v74 = v65;
  v75 = v66;
  result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t *)&buf, (uint64_t *)&v63, (uint64_t *)&v79, (uint64_t *)&v78, (uint64_t *)&v77, (uint64_t *)&v76, (uint64_t *)&v75, (uint64_t *)&v74, &v73);
  if (v73)
  {
    v13 = v65;
    v65 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = v66;
    v66 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v12);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = v67;
    v67 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v12);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = v68;
    v68 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v12);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = v69;
    v69 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v12);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = v70;
    v70 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v12);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = v71;
    v71 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v12);
      else
        *(_DWORD *)v19 -= 2;
    }
    v20 = v72;
    v72 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v12);
      else
        *(_DWORD *)v20 -= 2;
    }
    v21 = *(NSObject **)(a1 + 32);
    v22 = os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v22)
    {
      WTF::String::utf8();
      v24 = v63 ? (char *)v63 + 16 : 0;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v24;
      _os_log_impl(&dword_1940B8000, v21, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      v22 = (uint64_t)v63;
      v63 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 1)
          v22 = WTF::fastFree((WTF *)v22, v23);
        else
          --*(_DWORD *)v22;
      }
    }
    if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
    {
      v25 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v26 = *v25;
        if ((v26 & 1) != 0)
          break;
        v27 = __ldaxr(v25);
        if (v27 == v26)
        {
          if (!__stxr(v26 | 1, v25))
          {
            v28 = WTF::Logger::observers((WTF::Logger *)v22);
            v29 = *(unsigned int *)(v28 + 12);
            if ((_DWORD)v29)
            {
              v30 = *(uint64_t **)v28;
              v55 = *(_QWORD *)v28 + 8 * v29;
              do
              {
                v31 = *v30;
                LODWORD(buf) = 0;
                WTF::String::String((WTF::String *)((char *)&buf + 8), a3);
                v81 = 0;
                WTF::String::String((WTF::String *)&v82, a4);
                v83 = 0;
                WTF::Logger::LogSiteIdentifier::toString(a5);
                v85 = 0;
                WTF::String::String((WTF::String *)&v86, a6);
                v87 = 0;
                WTF::LogArgument<WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>>::toString(a7, &v88);
                v89 = 0;
                WTF::String::String((WTF::String *)&v90, a8);
                v91 = 0;
                WTF::LogArgument<void const*>::toString();
                v93 = 0;
                WTF::String::String((WTF::String *)v94, a10);
                v63 = 0;
                v64 = 0;
                v32 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x80);
                LODWORD(v64) = 8;
                v63 = v32;
                v33 = HIDWORD(v64);
                *((_DWORD *)v32 + 4 * HIDWORD(v64)) = buf;
                v34 = *((_QWORD *)&buf + 1);
                if (*((_QWORD *)&buf + 1))
                  **((_DWORD **)&buf + 1) += 2;
                *((_QWORD *)v32 + 2 * v33 + 1) = v34;
                *((_DWORD *)v32 + 4 * (v33 + 1)) = v81;
                v35 = v82;
                if (v82)
                  *(_DWORD *)v82 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 1) + 1) = v35;
                *((_DWORD *)v32 + 4 * (v33 + 2)) = v83;
                v36 = v84;
                if (v84)
                  *(_DWORD *)v84 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 2) + 1) = v36;
                *((_DWORD *)v32 + 4 * (v33 + 3)) = v85;
                v37 = v86;
                if (v86)
                  *(_DWORD *)v86 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 3) + 1) = v37;
                *((_DWORD *)v32 + 4 * (v33 + 4)) = v87;
                v38 = v88;
                if (v88)
                  *(_DWORD *)v88 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 4) + 1) = v38;
                *((_DWORD *)v32 + 4 * (v33 + 5)) = v89;
                v39 = v90;
                if (v90)
                  *(_DWORD *)v90 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 5) + 1) = v39;
                *((_DWORD *)v32 + 4 * (v33 + 6)) = v91;
                v40 = v92;
                if (v92)
                  *(_DWORD *)v92 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 6) + 1) = v40;
                *((_DWORD *)v32 + 4 * (v33 + 7)) = v93;
                v41 = v94[0];
                if (v94[0])
                  *(_DWORD *)v94[0] += 2;
                *((_QWORD *)v32 + 2 * (v33 + 7) + 1) = v41;
                HIDWORD(v64) = v33 + 8;
                (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v31 + 16))(v31, a1, a2, &v63);
                v42 = v63;
                if (HIDWORD(v64))
                {
                  v43 = 16 * HIDWORD(v64);
                  v44 = (WTF::StringImpl **)((char *)v63 + 8);
                  do
                  {
                    v45 = *v44;
                    *v44 = 0;
                    if (v45)
                    {
                      if (*(_DWORD *)v45 == 2)
                        WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v23);
                      else
                        *(_DWORD *)v45 -= 2;
                    }
                    v44 += 2;
                    v43 -= 16;
                  }
                  while (v43);
                  v42 = v63;
                }
                if (v42)
                {
                  v63 = 0;
                  LODWORD(v64) = 0;
                  WTF::fastFree(v42, v23);
                }
                v46 = (WTF::StringImpl *)v94[0];
                v94[0] = 0;
                if (v46)
                {
                  if (*(_DWORD *)v46 == 2)
                    WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v46 -= 2;
                }
                v47 = v92;
                v92 = 0;
                if (v47)
                {
                  if (*(_DWORD *)v47 == 2)
                    WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v47 -= 2;
                }
                v48 = v90;
                v90 = 0;
                if (v48)
                {
                  if (*(_DWORD *)v48 == 2)
                    WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v48 -= 2;
                }
                v49 = v88;
                v88 = 0;
                if (v49)
                {
                  if (*(_DWORD *)v49 == 2)
                    WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v49 -= 2;
                }
                v50 = v86;
                v86 = 0;
                if (v50)
                {
                  if (*(_DWORD *)v50 == 2)
                    WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v50 -= 2;
                }
                v51 = v84;
                v84 = 0;
                if (v51)
                {
                  if (*(_DWORD *)v51 == 2)
                    WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v51 -= 2;
                }
                v52 = v82;
                v82 = 0;
                if (v52)
                {
                  if (*(_DWORD *)v52 == 2)
                    WTF::StringImpl::destroy(v52, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v52 -= 2;
                }
                v53 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                *((_QWORD *)&buf + 1) = 0;
                if (v53)
                {
                  if (*(_DWORD *)v53 == 2)
                    WTF::StringImpl::destroy(v53, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v53 -= 2;
                }
                ++v30;
              }
              while (v30 != (uint64_t *)v55);
            }
            v54 = __ldxr(v25);
            if (v54 == 1)
            {
              if (!__stlxr(0, v25))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    result = v73;
    v73 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v23);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

void sub_19478EF58(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,WTF *a30,int a31,int a32,WTF::StringImpl *a33,WTF::StringImpl *a34,WTF::StringImpl *a35,WTF::StringImpl *a36,WTF::StringImpl *a37,WTF::StringImpl *a38,WTF::StringImpl *a39,uint64_t a40,WTF::StringImpl *a41)
{
  unsigned __int8 *v41;
  int v43;

  v43 = __ldxr(v41);
  if (v43 == 1)
  {
    if (!__stlxr(0, v41))
    {
LABEL_6:
      if (a41)
      {
        if (*(_DWORD *)a41 == 2)
          WTF::StringImpl::destroy(a41, a2);
        else
          *(_DWORD *)a41 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t WTF::LogArgument<WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>>::toString@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  int v5;
  int v6;
  BOOL v7;
  int v8;
  int v9;
  BOOL v10;
  int v11;
  _BOOL4 v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;

  WTF::LogArgument<void const*>::toString();
  result = WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a1 + 16));
  if (v16)
  {
    v5 = *((_DWORD *)v16 + 1);
    if (v15)
      goto LABEL_3;
LABEL_29:
    v6 = 0;
    goto LABEL_4;
  }
  v5 = 0;
  if (!v15)
    goto LABEL_29;
LABEL_3:
  v6 = *((_DWORD *)v15 + 1);
  if (v6 < 0)
  {
LABEL_30:
    *a2 = 0;
LABEL_31:
    __break(0xC471u);
    return result;
  }
LABEL_4:
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    goto LABEL_30;
  v7 = __OFADD__(v8, 1);
  v9 = v8 + 1;
  v10 = v7;
  if (v5 < 0)
    goto LABEL_30;
  if (v10)
    goto LABEL_30;
  v7 = __OFADD__(v5, v9);
  v11 = v5 + v9;
  if (v7)
    goto LABEL_30;
  result = (v11 + 13);
  if (__OFADD__(v11, 13))
    goto LABEL_30;
  v12 = (!v16 || (*((_BYTE *)v16 + 16) & 4) != 0) && (!v15 || (*((_BYTE *)v15 + 16) & 4) != 0);
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(result, v12, "NativePromise", 0xDu, (uint64_t)v16, 60, v15, 62, &v17);
  v14 = v17;
  *a2 = v17;
  if (!v14)
    goto LABEL_31;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v13);
    else
      *(_DWORD *)v15 -= 2;
  }
  result = (uint64_t)v16;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      return WTF::StringImpl::destroy(v16, v13);
    else
      *(_DWORD *)v16 -= 2;
  }
  return result;
}

void sub_19478F444(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [38],WTF::MediaTime>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4, WTF::MediaTime *a5)
{
  uint64_t result;
  int v8;
  int v9;
  int v10;
  BOOL v11;
  int v12;
  BOOL v13;
  int v14;
  unsigned int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  NSObject *v20;
  uint64_t v21;
  void *v22;
  char *v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  WTF::Logger *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::Logger *v36;
  const char *v37;
  uint64_t v38;
  WTF::StringImpl **v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  int v44;
  uint64_t v45;
  WTF::Logger *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  __int128 buf;
  int v56;
  WTF::StringImpl *v57;
  int v58;
  WTF::StringImpl *v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  WTF::String::String((WTF::String *)&v52, a4);
  result = WTF::MediaTime::toJSONString(a5);
  if (v53)
  {
    v8 = *((_DWORD *)v53 + 1);
    if (v52)
      goto LABEL_3;
LABEL_91:
    v9 = 0;
    if (v51)
      goto LABEL_4;
LABEL_92:
    v10 = 0;
    goto LABEL_5;
  }
  v8 = 0;
  if (!v52)
    goto LABEL_91;
LABEL_3:
  v9 = *((_DWORD *)v52 + 1);
  if (!v51)
    goto LABEL_92;
LABEL_4:
  v10 = *((_DWORD *)v51 + 1);
LABEL_5:
  if ((v10 | v9) < 0)
    goto LABEL_95;
  v11 = __OFADD__(v9, v10);
  v12 = v9 + v10;
  v13 = v11;
  if (v8 < 0)
    goto LABEL_95;
  if (v13)
    goto LABEL_95;
  result = (v8 + v12);
  if (__OFADD__(v8, v12))
    goto LABEL_95;
  if (v53 && (*((_BYTE *)v53 + 16) & 4) == 0)
  {
    v14 = 0;
    goto LABEL_19;
  }
  if (v52)
  {
    v15 = *((_DWORD *)v52 + 4);
    v14 = (v15 >> 2) & 1;
    if (v51 && (v15 & 4) != 0)
      goto LABEL_18;
  }
  else
  {
    if (v51)
    {
LABEL_18:
      v14 = (*((unsigned __int8 *)v51 + 16) >> 2) & 1;
      goto LABEL_19;
    }
    v14 = 1;
  }
LABEL_19:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v14, v53, (uint64_t)v52, (uint64_t)v51, &buf);
  v54 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_95:
    __break(0xC471u);
    return result;
  }
  v17 = v51;
  v51 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v16);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = v52;
  v52 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v16);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v53;
  v53 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v16);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = *(NSObject **)(a1 + 32);
  v21 = os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v21)
  {
    WTF::String::utf8();
    v23 = v49 ? (char *)v49 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v23;
    _os_log_impl(&dword_1940B8000, v20, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v21 = (uint64_t)v49;
    v49 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 1)
        v21 = WTF::fastFree((WTF *)v21, v22);
      else
        --*(_DWORD *)v21;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v24 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v25 = *v24;
      if ((v25 & 1) != 0)
        break;
      v26 = __ldaxr(v24);
      if (v26 == v25)
      {
        if (!__stxr(v25 | 1, v24))
        {
          v27 = WTF::Logger::observers((WTF::Logger *)v21);
          v28 = *(unsigned int *)(v27 + 12);
          if ((_DWORD)v28)
          {
            v29 = *(uint64_t **)v27;
            v45 = *(_QWORD *)v27 + 8 * v28;
            do
            {
              v30 = *v29;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v56 = 0;
              WTF::String::String((WTF::String *)&v57, a4);
              v58 = 1;
              WTF::MediaTime::toJSONString(a5);
              v49 = 0;
              v50 = 0;
              v31 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
              LODWORD(v50) = 3;
              v49 = v31;
              v32 = HIDWORD(v50);
              *((_DWORD *)v31 + 4 * HIDWORD(v50)) = buf;
              v33 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v31 + 2 * v32 + 1) = v33;
              *((_DWORD *)v31 + 4 * (v32 + 1)) = v56;
              v34 = v57;
              if (v57)
                *(_DWORD *)v57 += 2;
              *((_QWORD *)v31 + 2 * (v32 + 1) + 1) = v34;
              *((_DWORD *)v31 + 4 * (v32 + 2)) = v58;
              v35 = v59;
              if (v59)
                *(_DWORD *)v59 += 2;
              *((_QWORD *)v31 + 2 * (v32 + 2) + 1) = v35;
              HIDWORD(v50) = v32 + 3;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v30 + 16))(v30, a1, a2, &v49);
              v36 = v49;
              if (HIDWORD(v50))
              {
                v37 = a4;
                v38 = 16 * HIDWORD(v50);
                v39 = (WTF::StringImpl **)((char *)v49 + 8);
                do
                {
                  v40 = *v39;
                  *v39 = 0;
                  if (v40)
                  {
                    if (*(_DWORD *)v40 == 2)
                      WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v22);
                    else
                      *(_DWORD *)v40 -= 2;
                  }
                  v39 += 2;
                  v38 -= 16;
                }
                while (v38);
                v36 = v49;
                a4 = v37;
              }
              if (v36)
              {
                v49 = 0;
                LODWORD(v50) = 0;
                WTF::fastFree(v36, v22);
              }
              v41 = v59;
              v59 = 0;
              if (v41)
              {
                if (*(_DWORD *)v41 == 2)
                  WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v41 -= 2;
              }
              v42 = v57;
              v57 = 0;
              if (v42)
              {
                if (*(_DWORD *)v42 == 2)
                  WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v42 -= 2;
              }
              v43 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v43)
              {
                if (*(_DWORD *)v43 == 2)
                  WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v43 -= 2;
              }
              ++v29;
            }
            while (v29 != (uint64_t *)v45);
          }
          v44 = __ldxr(v24);
          if (v44 == 1)
          {
            if (!__stlxr(0, v24))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v54;
  v54 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v22);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_19478F990(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF *a15, int a16, int a17, WTF::StringImpl *a18, WTF::StringImpl *a19, uint64_t a20,WTF::StringImpl *a21,char a22,WTF::StringImpl *a23,uint64_t a24,WTF::StringImpl *a25,uint64_t a26,WTF::StringImpl *a27)
{
  unsigned __int8 *v27;
  int v29;

  v29 = __ldxr(v27);
  if (v29 == 1)
  {
    if (!__stlxr(0, v27))
    {
LABEL_6:
      if (a21)
      {
        if (*(_DWORD *)a21 == 2)
          WTF::StringImpl::destroy(a21, a2);
        else
          *(_DWORD *)a21 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateMediaSourceAVFObjC::startVideoFrameMetadataGathering(void)::$_0::operator() const(CMTime)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E3205A70;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateMediaSourceAVFObjC::startVideoFrameMetadataGathering(void)::$_0::operator() const(CMTime)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3205A70;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateMediaSourceAVFObjC::startVideoFrameMetadataGathering(void)::$_0::operator() const(CMTime)::{lambda(void)#1},void>::call(unsigned __int8 *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v6;
  CMTime *v7;
  uint64_t v8;
  int v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  const void *v13;
  const void *v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  v1 = *((_QWORD *)result + 1);
  if (!v1)
    return result;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return result;
  v15 = *((_OWORD *)result + 1);
  v16 = *((_QWORD *)result + 4);
  v3 = *(_QWORD *)(v2 + 128);
  if (!v3)
    return result;
  v4 = *(_QWORD *)(v2 + 136);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_8;
  }
  result = (unsigned __int8 *)MEMORY[0x19AEA534C](v3);
LABEL_8:
  if (*(_QWORD *)(v3 + 24))
    ++*(_QWORD *)(v3 + 8);
  else
    v4 = 0;
  v6 = __ldxr((unsigned __int8 *)v3);
  if (v6 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v4)
        return result;
      goto LABEL_17;
    }
  }
  else
  {
    __clrex();
  }
  result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v4)
    return result;
LABEL_17:
  if (WebCore::MediaPlayerPrivateMediaSourceAVFObjC::updateLastPixelBuffer((WebCore::MediaPlayerPrivateMediaSourceAVFObjC *)v2))
  {
    BYTE8(v19) = 0;
    LOBYTE(v20) = 0;
    BYTE8(v20) = 0;
    LOBYTE(v21) = 0;
    BYTE8(v21) = 0;
    LOBYTE(v22) = 0;
    BYTE8(v22) = 0;
    BYTE12(v22) = 0;
    *((_QWORD *)&v17 + 1) = 0;
    v18 = (unint64_t)vcvt_u32_f32(*(float32x2_t *)(v2 + 432));
    v8 = *(_QWORD *)(v2 + 520) + 1;
    *(_QWORD *)(v2 + 520) = v8;
    LODWORD(v19) = v8;
    v23 = v15;
    v24 = v16;
    *(_QWORD *)&v17 = PAL::softLinkCoreMediaCMTimeGetSeconds((PAL *)&v23, v7);
    v9 = *(unsigned __int8 *)(v2 + 640);
    v10 = v20;
    *(_OWORD *)(v2 + 576) = v19;
    *(_OWORD *)(v2 + 592) = v10;
    v11 = v22;
    *(_OWORD *)(v2 + 608) = v21;
    *(_OWORD *)(v2 + 624) = v11;
    v12 = v18;
    *(_OWORD *)(v2 + 544) = v17;
    *(_OWORD *)(v2 + 560) = v12;
    if (!v9)
      *(_BYTE *)(v2 + 640) = 1;
    v13 = *(const void **)(v2 + 264);
    *(_QWORD *)&v23 = v13;
    if (v13)
      CFRetain(v13);
    (*(void (**)(_QWORD, __int128 *, __int128 *))(**(_QWORD **)(*(_QWORD *)(v4 + 8) + 8) + 600))(*(_QWORD *)(*(_QWORD *)(v4 + 8) + 8), &v17, &v23);
    v14 = (const void *)v23;
    *(_QWORD *)&v23 = 0;
    if (v14)
      CFRelease(v14);
  }
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v4);
}

void sub_19478FDD8(_Unwind_Exception *a1)
{
  unsigned __int8 **v1;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::MediaPlayerPrivateMediaSourceAVFObjC::*&)(void),WebCore::MediaPlayerPrivateMediaSourceAVFObjC*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [36],WTF::MediaTime,char [13],BOOL,char [13],BOOL>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4, WTF::MediaTime *a5, const char *a6, int a7, const char *a8, uint64_t a9)
{
  const char *v11;
  const char *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *result;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  NSObject *v22;
  uint64_t v23;
  void *v24;
  char *v25;
  unsigned __int8 *v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  WTF::Logger *v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::Logger *v42;
  const char *v43;
  const char *v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  WTF::StringImpl **v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  int v57;
  uint64_t v58;
  WTF::Logger *v64;
  uint64_t v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  __int128 buf;
  int v78;
  WTF::StringImpl *v79;
  int v80;
  WTF::StringImpl *v81;
  int v82;
  WTF::StringImpl *v83;
  int v84;
  WTF::StringImpl *v85;
  int v86;
  WTF::StringImpl *v87;
  int v88;
  WTF::StringImpl *v89;
  uint64_t v90;

  v90 = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  WTF::String::String((WTF::String *)&v69, a4);
  WTF::MediaTime::toJSONString(a5);
  WTF::String::String((WTF::String *)&v67, a6);
  v11 = "true";
  v12 = "false";
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = (WTF::StringImpl *)buf;
  WTF::String::String((WTF::String *)&v66, a8);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v14 = (WTF::StringImpl *)buf;
  v64 = v69;
  v76 = v68;
  *(_QWORD *)&buf = v70;
  v74 = v13;
  v75 = v67;
  v72 = v14;
  v73 = v66;
  result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v64, (uint64_t *)&v76, (uint64_t *)&v75, (uint64_t *)&v74, (uint64_t *)&v73, (uint64_t *)&v72, &v71);
  if (!v71)
  {
    __break(0xC471u);
    return result;
  }
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v16);
    else
      *(_DWORD *)v14 -= 2;
  }
  v17 = v66;
  v66 = 0;
  if (!v17)
  {
LABEL_8:
    if (v13)
      goto LABEL_9;
    goto LABEL_11;
  }
  if (*(_DWORD *)v17 != 2)
  {
    *(_DWORD *)v17 -= 2;
    goto LABEL_8;
  }
  WTF::StringImpl::destroy(v17, v16);
  if (v13)
  {
LABEL_9:
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v16);
    else
      *(_DWORD *)v13 -= 2;
  }
LABEL_11:
  v18 = v67;
  v67 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v16);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v68;
  v68 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v16);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = v69;
  v69 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v16);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = v70;
  v70 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v16);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = *(NSObject **)(a1 + 32);
  v23 = os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v23)
  {
    WTF::String::utf8();
    v25 = v64 ? (char *)v64 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v25;
    _os_log_impl(&dword_1940B8000, v22, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v23 = (uint64_t)v64;
    v64 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 1)
        v23 = WTF::fastFree((WTF *)v23, v24);
      else
        --*(_DWORD *)v23;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v26 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v27 = *v26;
      if ((v27 & 1) != 0)
        break;
      v28 = __ldaxr(v26);
      if (v28 == v27)
      {
        if (!__stxr(v27 | 1, v26))
        {
          v29 = WTF::Logger::observers((WTF::Logger *)v23);
          v30 = *(unsigned int *)(v29 + 12);
          if ((_DWORD)v30)
          {
            v31 = *(uint64_t **)v29;
            v58 = *(_QWORD *)v29 + 8 * v30;
            do
            {
              v32 = *v31;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v78 = 0;
              WTF::String::String((WTF::String *)&v79, a4);
              v80 = 1;
              WTF::MediaTime::toJSONString(a5);
              v82 = 0;
              WTF::String::String((WTF::String *)&v83, a6);
              v84 = 0;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v85 = v76;
              v86 = 0;
              WTF::String::String((WTF::String *)&v87, a8);
              v88 = 0;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v89 = v76;
              v64 = 0;
              v65 = 0;
              v33 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x70);
              LODWORD(v65) = 7;
              v64 = v33;
              v34 = HIDWORD(v65);
              *((_DWORD *)v33 + 4 * HIDWORD(v65)) = buf;
              v35 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v33 + 2 * v34 + 1) = v35;
              *((_DWORD *)v33 + 4 * (v34 + 1)) = v78;
              v36 = v79;
              if (v79)
                *(_DWORD *)v79 += 2;
              *((_QWORD *)v33 + 2 * (v34 + 1) + 1) = v36;
              *((_DWORD *)v33 + 4 * (v34 + 2)) = v80;
              v37 = v81;
              if (v81)
                *(_DWORD *)v81 += 2;
              *((_QWORD *)v33 + 2 * (v34 + 2) + 1) = v37;
              *((_DWORD *)v33 + 4 * (v34 + 3)) = v82;
              v38 = v83;
              if (v83)
                *(_DWORD *)v83 += 2;
              *((_QWORD *)v33 + 2 * (v34 + 3) + 1) = v38;
              *((_DWORD *)v33 + 4 * (v34 + 4)) = v84;
              v39 = v85;
              if (v85)
                *(_DWORD *)v85 += 2;
              *((_QWORD *)v33 + 2 * (v34 + 4) + 1) = v39;
              *((_DWORD *)v33 + 4 * (v34 + 5)) = v86;
              v40 = v87;
              if (v87)
                *(_DWORD *)v87 += 2;
              *((_QWORD *)v33 + 2 * (v34 + 5) + 1) = v40;
              *((_DWORD *)v33 + 4 * (v34 + 6)) = v88;
              v41 = v89;
              if (v89)
                *(_DWORD *)v89 += 2;
              *((_QWORD *)v33 + 2 * (v34 + 6) + 1) = v41;
              HIDWORD(v65) = v34 + 7;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v32 + 16))(v32, a1, a2, &v64);
              v42 = v64;
              if (HIDWORD(v65))
              {
                v43 = v12;
                v44 = v11;
                v45 = a1;
                v46 = a4;
                v47 = 16 * HIDWORD(v65);
                v48 = (WTF::StringImpl **)((char *)v64 + 8);
                do
                {
                  v49 = *v48;
                  *v48 = 0;
                  if (v49)
                  {
                    if (*(_DWORD *)v49 == 2)
                      WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v24);
                    else
                      *(_DWORD *)v49 -= 2;
                  }
                  v48 += 2;
                  v47 -= 16;
                }
                while (v47);
                v42 = v64;
                a4 = v46;
                a1 = v45;
                v11 = v44;
                v12 = v43;
              }
              if (v42)
              {
                v64 = 0;
                LODWORD(v65) = 0;
                WTF::fastFree(v42, v24);
              }
              v50 = v89;
              v89 = 0;
              if (v50)
              {
                if (*(_DWORD *)v50 == 2)
                  WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v24);
                else
                  *(_DWORD *)v50 -= 2;
              }
              v51 = v87;
              v87 = 0;
              if (v51)
              {
                if (*(_DWORD *)v51 == 2)
                  WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v24);
                else
                  *(_DWORD *)v51 -= 2;
              }
              v52 = v85;
              v85 = 0;
              if (v52)
              {
                if (*(_DWORD *)v52 == 2)
                  WTF::StringImpl::destroy(v52, (WTF::StringImpl *)v24);
                else
                  *(_DWORD *)v52 -= 2;
              }
              v53 = v83;
              v83 = 0;
              if (v53)
              {
                if (*(_DWORD *)v53 == 2)
                  WTF::StringImpl::destroy(v53, (WTF::StringImpl *)v24);
                else
                  *(_DWORD *)v53 -= 2;
              }
              v54 = v81;
              v81 = 0;
              if (v54)
              {
                if (*(_DWORD *)v54 == 2)
                  WTF::StringImpl::destroy(v54, (WTF::StringImpl *)v24);
                else
                  *(_DWORD *)v54 -= 2;
              }
              v55 = v79;
              v79 = 0;
              if (v55)
              {
                if (*(_DWORD *)v55 == 2)
                  WTF::StringImpl::destroy(v55, (WTF::StringImpl *)v24);
                else
                  *(_DWORD *)v55 -= 2;
              }
              v56 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v56)
              {
                if (*(_DWORD *)v56 == 2)
                  WTF::StringImpl::destroy(v56, (WTF::StringImpl *)v24);
                else
                  *(_DWORD *)v56 -= 2;
              }
              ++v31;
            }
            while (v31 != (uint64_t *)v58);
          }
          v57 = __ldxr(v26);
          if (v57 == 1)
          {
            if (!__stlxr(0, v26))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = v71;
  v71 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v24);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_194790660(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,WTF *a26,int a27,int a28,WTF::StringImpl *a29,WTF::StringImpl *a30,WTF::StringImpl *a31,WTF::StringImpl *a32,uint64_t a33,WTF::StringImpl *a34)
{
  unsigned __int8 *v34;
  int v36;

  v36 = __ldxr(v34);
  if (v36 == 1)
  {
    if (!__stlxr(0, v34))
    {
LABEL_6:
      if (a34)
      {
        if (*(_DWORD *)a34 == 2)
          WTF::StringImpl::destroy(a34, a2);
        else
          *(_DWORD *)a34 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,float>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, float *a4)
{
  WTF::String *v7;
  uint64_t result;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  NSObject *v16;
  uint64_t v17;
  void *v18;
  char *v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  WTF::String *v28;
  float v29;
  WTF::Logger *v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::Logger *v34;
  uint64_t v35;
  WTF::StringImpl **v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  int v40;
  WTF::Logger *v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  __int128 buf;
  int v48;
  WTF::StringImpl *v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v7 = (WTF::String *)WTF::Logger::LogSiteIdentifier::toString(this);
  result = WTF::String::number(v7, *a4);
  if (!v45)
  {
    v9 = 0;
    if (v44)
      goto LABEL_3;
LABEL_72:
    v10 = 0;
    goto LABEL_4;
  }
  v9 = *((_DWORD *)v45 + 1);
  if (!v44)
    goto LABEL_72;
LABEL_3:
  v10 = *((_DWORD *)v44 + 1);
LABEL_4:
  if ((v10 | v9) < 0)
    goto LABEL_75;
  result = (v9 + v10);
  if (__OFADD__(v9, v10))
    goto LABEL_75;
  if (v45)
  {
    v11 = *((_DWORD *)v45 + 4);
    v12 = (v11 >> 2) & 1;
    if (v44 && (v11 & 4) != 0)
      goto LABEL_9;
  }
  else
  {
    if (v44)
    {
LABEL_9:
      v12 = (*((unsigned __int8 *)v44 + 16) >> 2) & 1;
      goto LABEL_10;
    }
    v12 = 1;
  }
LABEL_10:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v12, (uint64_t)v45, (uint64_t)v44, &buf);
  v46 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_75:
    __break(0xC471u);
    return result;
  }
  v14 = v44;
  v44 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = v45;
  v45 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v13);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = *(NSObject **)(a1 + 32);
  v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v17)
  {
    WTF::String::utf8();
    v19 = v42 ? (char *)v42 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v19;
    _os_log_impl(&dword_1940B8000, v16, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v17 = (uint64_t)v42;
    v42 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 1)
        v17 = WTF::fastFree((WTF *)v17, v18);
      else
        --*(_DWORD *)v17;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v20 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v21 = *v20;
      if ((v21 & 1) != 0)
        break;
      v22 = __ldaxr(v20);
      if (v22 == v21)
      {
        if (!__stxr(v21 | 1, v20))
        {
          v23 = WTF::Logger::observers((WTF::Logger *)v17);
          v24 = *(unsigned int *)(v23 + 12);
          if ((_DWORD)v24)
          {
            v25 = *(uint64_t **)v23;
            v26 = *(_QWORD *)v23 + 8 * v24;
            do
            {
              v27 = *v25;
              LODWORD(buf) = 0;
              v28 = (WTF::String *)WTF::Logger::LogSiteIdentifier::toString(this);
              v29 = *a4;
              v48 = 0;
              WTF::String::number(v28, v29);
              v42 = 0;
              v43 = 0;
              v30 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v43) = 2;
              v42 = v30;
              v31 = HIDWORD(v43);
              *((_DWORD *)v30 + 4 * HIDWORD(v43)) = buf;
              v32 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v30 + 2 * v31 + 1) = v32;
              *((_DWORD *)v30 + 4 * (v31 + 1)) = v48;
              v33 = v49;
              if (v49)
                *(_DWORD *)v49 += 2;
              *((_QWORD *)v30 + 2 * (v31 + 1) + 1) = v33;
              HIDWORD(v43) = v31 + 2;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v27 + 16))(v27, a1, a2, &v42);
              v34 = v42;
              if (HIDWORD(v43))
              {
                v35 = 16 * HIDWORD(v43);
                v36 = (WTF::StringImpl **)((char *)v42 + 8);
                do
                {
                  v37 = *v36;
                  *v36 = 0;
                  if (v37)
                  {
                    if (*(_DWORD *)v37 == 2)
                      WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v18);
                    else
                      *(_DWORD *)v37 -= 2;
                  }
                  v36 += 2;
                  v35 -= 16;
                }
                while (v35);
                v34 = v42;
              }
              if (v34)
              {
                v42 = 0;
                LODWORD(v43) = 0;
                WTF::fastFree(v34, v18);
              }
              v38 = v49;
              v49 = 0;
              if (v38)
              {
                if (*(_DWORD *)v38 == 2)
                  WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v18);
                else
                  *(_DWORD *)v38 -= 2;
              }
              v39 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v39)
              {
                if (*(_DWORD *)v39 == 2)
                  WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v18);
                else
                  *(_DWORD *)v39 -= 2;
              }
              ++v25;
            }
            while (v25 != (uint64_t *)v26);
          }
          v40 = __ldxr(v20);
          if (v40 == 1)
          {
            if (!__stlxr(0, v20))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v46;
  v46 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v18);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_194790DC0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, WTF::StringImpl *a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19)
{
  unsigned __int8 *v19;
  int v21;

  v21 = __ldxr(v19);
  if (v21 == 1)
  {
    if (!__stlxr(0, v19))
    {
LABEL_6:
      if (a15)
      {
        if (*(_DWORD *)a15 == 2)
          WTF::StringImpl::destroy(a15, a2);
        else
          *(_DWORD *)a15 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [8],WTF::MediaTime,char [23],WTF::MediaTime,char [23],WTF::MediaTime>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4, WTF::MediaTime *a5, const char *a6, WTF::MediaTime *a7, const char *a8, WTF::MediaTime *a9)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  NSObject *v19;
  uint64_t v20;
  void *v21;
  char *v22;
  unsigned __int8 *v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  WTF::Logger *v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::Logger *v39;
  uint64_t v40;
  WTF::StringImpl **v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  int v50;
  uint64_t v51;
  WTF::Logger *v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  __int128 buf;
  int v75;
  WTF::StringImpl *v76;
  int v77;
  WTF::StringImpl *v78;
  int v79;
  WTF::StringImpl *v80;
  int v81;
  WTF::StringImpl *v82;
  int v83;
  WTF::StringImpl *v84;
  int v85;
  WTF::StringImpl *v86;
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  WTF::String::String((WTF::String *)&v66, a4);
  WTF::MediaTime::toJSONString(a5);
  WTF::String::String((WTF::String *)&v64, a6);
  WTF::MediaTime::toJSONString(a7);
  WTF::String::String((WTF::String *)&v62, a8);
  WTF::MediaTime::toJSONString(a9);
  v59 = v66;
  v73 = v65;
  *(_QWORD *)&buf = v67;
  v71 = v63;
  v72 = v64;
  v69 = v61;
  v70 = v62;
  result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v59, (uint64_t *)&v73, (uint64_t *)&v72, (uint64_t *)&v71, (uint64_t *)&v70, (uint64_t *)&v69, &v68);
  if (v68)
  {
    v12 = v61;
    v61 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = v62;
    v62 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v11);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = v63;
    v63 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v11);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = v64;
    v64 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v11);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = v65;
    v65 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v11);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = v66;
    v66 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v11);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = v67;
    v67 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v11);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = *(NSObject **)(a1 + 32);
    v20 = os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v20)
    {
      WTF::String::utf8();
      v22 = v59 ? (char *)v59 + 16 : 0;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v22;
      _os_log_impl(&dword_1940B8000, v19, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      v20 = (uint64_t)v59;
      v59 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 1)
          v20 = WTF::fastFree((WTF *)v20, v21);
        else
          --*(_DWORD *)v20;
      }
    }
    if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
    {
      v23 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v24 = *v23;
        if ((v24 & 1) != 0)
          break;
        v25 = __ldaxr(v23);
        if (v25 == v24)
        {
          if (!__stxr(v24 | 1, v23))
          {
            v26 = WTF::Logger::observers((WTF::Logger *)v20);
            v27 = *(unsigned int *)(v26 + 12);
            if ((_DWORD)v27)
            {
              v28 = *(uint64_t **)v26;
              v51 = *(_QWORD *)v26 + 8 * v27;
              do
              {
                v29 = *v28;
                LODWORD(buf) = 0;
                WTF::Logger::LogSiteIdentifier::toString(this);
                v75 = 0;
                WTF::String::String((WTF::String *)&v76, a4);
                v77 = 1;
                WTF::MediaTime::toJSONString(a5);
                v79 = 0;
                WTF::String::String((WTF::String *)&v80, a6);
                v81 = 1;
                WTF::MediaTime::toJSONString(a7);
                v83 = 0;
                WTF::String::String((WTF::String *)&v84, a8);
                v85 = 1;
                WTF::MediaTime::toJSONString(a9);
                v59 = 0;
                v60 = 0;
                v30 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x70);
                LODWORD(v60) = 7;
                v59 = v30;
                v31 = HIDWORD(v60);
                *((_DWORD *)v30 + 4 * HIDWORD(v60)) = buf;
                v32 = *((_QWORD *)&buf + 1);
                if (*((_QWORD *)&buf + 1))
                  **((_DWORD **)&buf + 1) += 2;
                *((_QWORD *)v30 + 2 * v31 + 1) = v32;
                *((_DWORD *)v30 + 4 * (v31 + 1)) = v75;
                v33 = v76;
                if (v76)
                  *(_DWORD *)v76 += 2;
                *((_QWORD *)v30 + 2 * (v31 + 1) + 1) = v33;
                *((_DWORD *)v30 + 4 * (v31 + 2)) = v77;
                v34 = v78;
                if (v78)
                  *(_DWORD *)v78 += 2;
                *((_QWORD *)v30 + 2 * (v31 + 2) + 1) = v34;
                *((_DWORD *)v30 + 4 * (v31 + 3)) = v79;
                v35 = v80;
                if (v80)
                  *(_DWORD *)v80 += 2;
                *((_QWORD *)v30 + 2 * (v31 + 3) + 1) = v35;
                *((_DWORD *)v30 + 4 * (v31 + 4)) = v81;
                v36 = v82;
                if (v82)
                  *(_DWORD *)v82 += 2;
                *((_QWORD *)v30 + 2 * (v31 + 4) + 1) = v36;
                *((_DWORD *)v30 + 4 * (v31 + 5)) = v83;
                v37 = v84;
                if (v84)
                  *(_DWORD *)v84 += 2;
                *((_QWORD *)v30 + 2 * (v31 + 5) + 1) = v37;
                *((_DWORD *)v30 + 4 * (v31 + 6)) = v85;
                v38 = v86;
                if (v86)
                  *(_DWORD *)v86 += 2;
                *((_QWORD *)v30 + 2 * (v31 + 6) + 1) = v38;
                HIDWORD(v60) = v31 + 7;
                (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v29 + 16))(v29, a1, a2, &v59);
                v39 = v59;
                if (HIDWORD(v60))
                {
                  v40 = 16 * HIDWORD(v60);
                  v41 = (WTF::StringImpl **)((char *)v59 + 8);
                  do
                  {
                    v42 = *v41;
                    *v41 = 0;
                    if (v42)
                    {
                      if (*(_DWORD *)v42 == 2)
                        WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v21);
                      else
                        *(_DWORD *)v42 -= 2;
                    }
                    v41 += 2;
                    v40 -= 16;
                  }
                  while (v40);
                  v39 = v59;
                }
                if (v39)
                {
                  v59 = 0;
                  LODWORD(v60) = 0;
                  WTF::fastFree(v39, v21);
                }
                v43 = v86;
                v86 = 0;
                if (v43)
                {
                  if (*(_DWORD *)v43 == 2)
                    WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v21);
                  else
                    *(_DWORD *)v43 -= 2;
                }
                v44 = v84;
                v84 = 0;
                if (v44)
                {
                  if (*(_DWORD *)v44 == 2)
                    WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v21);
                  else
                    *(_DWORD *)v44 -= 2;
                }
                v45 = v82;
                v82 = 0;
                if (v45)
                {
                  if (*(_DWORD *)v45 == 2)
                    WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v21);
                  else
                    *(_DWORD *)v45 -= 2;
                }
                v46 = v80;
                v80 = 0;
                if (v46)
                {
                  if (*(_DWORD *)v46 == 2)
                    WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v21);
                  else
                    *(_DWORD *)v46 -= 2;
                }
                v47 = v78;
                v78 = 0;
                if (v47)
                {
                  if (*(_DWORD *)v47 == 2)
                    WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v21);
                  else
                    *(_DWORD *)v47 -= 2;
                }
                v48 = v76;
                v76 = 0;
                if (v48)
                {
                  if (*(_DWORD *)v48 == 2)
                    WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v21);
                  else
                    *(_DWORD *)v48 -= 2;
                }
                v49 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                *((_QWORD *)&buf + 1) = 0;
                if (v49)
                {
                  if (*(_DWORD *)v49 == 2)
                    WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v21);
                  else
                    *(_DWORD *)v49 -= 2;
                }
                ++v28;
              }
              while (v28 != (uint64_t *)v51);
            }
            v50 = __ldxr(v23);
            if (v50 == 1)
            {
              if (!__stlxr(0, v23))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    result = v68;
    v68 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v21);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

void sub_194791638(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,WTF *a28,int a29,int a30,WTF::StringImpl *a31,WTF::StringImpl *a32,WTF::StringImpl *a33,WTF::StringImpl *a34,WTF::StringImpl *a35,WTF::StringImpl *a36,uint64_t a37,WTF::StringImpl *a38)
{
  unsigned __int8 *v38;
  int v40;

  v40 = __ldxr(v38);
  if (v40 == 1)
  {
    if (!__stlxr(0, v38))
    {
LABEL_6:
      if (a38)
      {
        if (*(_DWORD *)a38 == 2)
          WTF::StringImpl::destroy(a38, a2);
        else
          *(_DWORD *)a38 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

char **WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::maybeSettle(uint64_t a1, WTF::NativePromiseBase **a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::Lock *v6;
  _BYTE *v8;
  char **result;
  uint64_t v10;
  WTF::NativePromiseBase **v11;
  WTF::NativePromiseBase *v12;
  int v13;
  BOOL v14;
  WTF::NativePromiseBase *v15;
  WTF::Lock *v16;
  char v17;

  v6 = (WTF::Lock *)(a1 + 48);
  v16 = v6;
  v17 = 1;
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_4:
    v6 = (WTF::Lock *)MEMORY[0x19AEA534C]();
    goto LABEL_5;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_4;
LABEL_5:
  *(_BYTE *)(a1 + 128) = 1;
  v15 = *a2;
  v14 = *(_DWORD *)(a1 + 80) == 0;
  v8 = (_BYTE *)WTF::NativePromiseBase::logChannel(v6);
  if (*v8 && v8[16] >= 4u)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [26],WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>,char [11],void const*,char [12],BOOL,char [2]>((uint64_t)v8, 4u, a3, " invoking maybeSettle() [", a1, " callback:", (int)&v15, " isNothing:", (uint64_t)&v14, "]");
  if (*(_DWORD *)(a1 + 80))
  {
    result = (char **)WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(*a2, a1, (unsigned __int8 **)&v16);
  }
  else
  {
    result = (char **)(a1 + 88);
    v10 = *(unsigned int *)(a1 + 100);
    if ((_DWORD)v10 == *(_DWORD *)(a1 + 96))
    {
      result = (char **)WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v10 + 1, (unint64_t)a2);
      a2 = (WTF::NativePromiseBase **)result;
      v10 = *(unsigned int *)(a1 + 100);
      v11 = (WTF::NativePromiseBase **)(*(_QWORD *)(a1 + 88) + 8 * v10);
    }
    else
    {
      v11 = (WTF::NativePromiseBase **)&(*result)[8 * v10];
    }
    v12 = *a2;
    *a2 = 0;
    *v11 = v12;
    *(_DWORD *)(a1 + 100) = v10 + 1;
  }
  if (v17)
  {
    result = (char **)v16;
    v13 = __ldxr((unsigned __int8 *)v16);
    if (v13 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v16))
        return result;
    }
    else
    {
      __clrex();
    }
    return (char **)WTF::Lock::unlockSlow((WTF::Lock *)result);
  }
  return result;
}

void sub_194791B08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::Lock *a13, char a14)
{
  int v15;

  if (a14)
  {
    v15 = __ldxr((unsigned __int8 *)a13);
    if (v15 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)a13))
        goto LABEL_7;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow(a13);
  }
LABEL_7:
  _Unwind_Resume(exception_object);
}

unsigned __int8 *WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(WTF::NativePromiseBase *a1, uint64_t a2, unsigned __int8 **a3)
{
  WTF::NativePromiseBase *v5;
  int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  _QWORD *v12;
  unsigned __int8 *result;
  BOOL v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;
  int v19;
  int v20;
  uint64_t v23;
  int v24;
  int v25;
  __int128 v27;
  uint64_t v28;

  v5 = a1;
  if (*((_QWORD *)a1 + 2))
  {
    v6 = atomic_load((unsigned __int8 *)(a2 + 129));
    if (v6 != 1
      || (a1 = (WTF::NativePromiseBase *)(*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 24))(*((_QWORD **)a1 + 2)),
          !(_DWORD)a1))
    {
      v7 = *((_QWORD *)v5 + 2);
      v8 = (unsigned int *)((char *)v5 + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
      v10 = (unsigned int *)(a2 + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
      v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *v12 = &off_1E3205B18;
      v12[1] = v5;
      v12[2] = v5;
      v12[3] = a2;
      *(_QWORD *)&v27 = v12;
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v7 + 16))(v7, &v27);
      result = (unsigned __int8 *)v27;
      *(_QWORD *)&v27 = 0;
      if (result)
        return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 8))(result);
      return result;
    }
  }
  if (*((_BYTE *)v5 + 56))
  {
    *(_QWORD *)&v27 = v5;
    result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(a1);
    if (*result)
      v14 = result[16] >= 4u;
    else
      v14 = 0;
    if (v14)
      return (unsigned __int8 *)WTF::Logger::log<char [32],WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, 4u, "ThenCallback disconnected from ", a2, " aborting [callback:", (int)&v27, " callSite:", (WTF::NativePromiseBase *)((char *)v5 + 24), "]");
    return result;
  }
  v15 = *a3;
  v16 = __ldxr(*a3);
  if (v16 != 1)
  {
    __clrex();
    goto LABEL_22;
  }
  if (__stlxr(0, v15))
LABEL_22:
    WTF::Lock::unlockSlow((WTF::Lock *)v15);
  v17 = (unsigned __int8 *)(a2 + 48);
  if (__ldaxr((unsigned __int8 *)(a2 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v17))
  {
    goto LABEL_27;
  }
  MEMORY[0x19AEA534C](a2 + 48);
LABEL_27:
  v19 = *(_DWORD *)(a2 + 80);
  v20 = __ldxr(v17);
  if (v20 != 1)
  {
    __clrex();
    goto LABEL_31;
  }
  if (__stlxr(0, v17))
LABEL_31:
    WTF::Lock::unlockSlow((WTF::Lock *)(a2 + 48));
  if (v19 != 2)
  {
    if (__ldaxr(v17))
    {
      __clrex();
    }
    else if (!__stxr(1u, v17))
    {
      goto LABEL_48;
    }
    MEMORY[0x19AEA534C](a2 + 48);
LABEL_48:
    if (*(_DWORD *)(a2 + 80) != 1)
      goto LABEL_60;
    v27 = *(_OWORD *)(a2 + 56);
    v28 = *(_QWORD *)(a2 + 72);
    v25 = __ldxr(v17);
    if (v25 == 1)
    {
      if (!__stlxr(0, v17))
        goto LABEL_54;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(a2 + 48));
LABEL_54:
    (*(void (**)(WTF::NativePromiseBase *, uint64_t, __int128 *))(*(_QWORD *)v5 + 24))(v5, a2, &v27);
    goto LABEL_55;
  }
  if (__ldaxr(v17))
  {
    __clrex();
  }
  else if (!__stxr(1u, v17))
  {
    goto LABEL_39;
  }
  MEMORY[0x19AEA534C](a2 + 48);
LABEL_39:
  if (*(_DWORD *)(a2 + 80) != 2)
  {
LABEL_60:
    result = (unsigned __int8 *)std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
    return result;
  }
  v23 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  v24 = __ldxr(v17);
  if (v24 == 1)
  {
    if (!__stlxr(0, v17))
      goto LABEL_45;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(a2 + 48));
LABEL_45:
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v23 + 16))(&v27, v23);
  (*(void (**)(WTF::NativePromiseBase *, uint64_t, __int128 *))(*(_QWORD *)v5 + 24))(v5, a2, &v27);
  (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
LABEL_55:
  result = *a3;
  if (__ldaxr(*a3))
  {
    __clrex();
  }
  else if (!__stxr(1u, result))
  {
    return result;
  }
  return (unsigned __int8 *)MEMORY[0x19AEA534C]();
}

void sub_194791E4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unsigned __int8 **v11;

  if (__ldaxr(*v11))
  {
    __clrex();
  }
  else if (!__stxr(1u, *v11))
  {
LABEL_6:
    _Unwind_Resume(exception_object);
  }
  MEMORY[0x19AEA534C]();
  goto LABEL_6;
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [26],WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>,char [11],void const*,char [12],BOOL,char [2]>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4, uint64_t a5, const char *a6, int a7, const char *a8, uint64_t a9, char *a10)
{
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  NSObject *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  unsigned __int8 *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  WTF::Logger *v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  const char *v42;
  WTF::Logger *v43;
  uint64_t v44;
  WTF::StringImpl **v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  int v55;
  uint64_t v56;
  WTF::Logger *v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  __int128 buf;
  int v80;
  WTF::StringImpl *v81;
  int v82;
  WTF::StringImpl *v83;
  int v84;
  WTF::StringImpl *v85;
  int v86;
  WTF::StringImpl *v87;
  int v88;
  WTF::StringImpl *v89;
  int v90;
  WTF::StringImpl *v91;
  int v92;
  _QWORD v93[3];

  v93[1] = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  WTF::String::String((WTF::String *)&v70, a4);
  WTF::LogArgument<WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>>::toString(a5, &v69);
  WTF::String::String((WTF::String *)&v68, a6);
  WTF::LogArgument<void const*>::toString();
  WTF::String::String((WTF::String *)&v66, a8);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = (WTF::StringImpl *)buf;
  WTF::String::String((WTF::String *)&v65, a10);
  v63 = v70;
  v78 = v69;
  *(_QWORD *)&buf = v71;
  v76 = v67;
  v77 = v68;
  v74 = v11;
  v75 = v66;
  v73 = v65;
  result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t *)&buf, (uint64_t *)&v63, (uint64_t *)&v78, (uint64_t *)&v77, (uint64_t *)&v76, (uint64_t *)&v75, (uint64_t *)&v74, (uint64_t *)&v73, &v72);
  if (!v72)
  {
    __break(0xC471u);
    return result;
  }
  v14 = v65;
  v65 = 0;
  if (!v14)
  {
LABEL_5:
    if (v11)
      goto LABEL_6;
    goto LABEL_8;
  }
  if (*(_DWORD *)v14 != 2)
  {
    *(_DWORD *)v14 -= 2;
    goto LABEL_5;
  }
  WTF::StringImpl::destroy(v14, v13);
  if (v11)
  {
LABEL_6:
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v13);
    else
      *(_DWORD *)v11 -= 2;
  }
LABEL_8:
  v15 = v66;
  v66 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v13);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = v67;
  v67 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v13);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = v68;
  v68 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v13);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = v69;
  v69 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v13);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v70;
  v70 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v13);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = v71;
  v71 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v13);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = *(NSObject **)(a1 + 32);
  v22 = os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v22)
  {
    WTF::String::utf8();
    v24 = v63 ? (char *)v63 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v24;
    _os_log_impl(&dword_1940B8000, v21, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v22 = (uint64_t)v63;
    v63 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 1)
        v22 = WTF::fastFree((WTF *)v22, v23);
      else
        --*(_DWORD *)v22;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v25 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v26 = *v25;
      if ((v26 & 1) != 0)
        break;
      v27 = __ldaxr(v25);
      if (v27 == v26)
      {
        if (!__stxr(v26 | 1, v25))
        {
          v28 = WTF::Logger::observers((WTF::Logger *)v22);
          v29 = *(unsigned int *)(v28 + 12);
          if ((_DWORD)v29)
          {
            v30 = *(uint64_t **)v28;
            v56 = *(_QWORD *)v28 + 8 * v29;
            do
            {
              v31 = *v30;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v80 = 0;
              WTF::String::String((WTF::String *)&v81, a4);
              v82 = 0;
              WTF::LogArgument<WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>>::toString(a5, &v83);
              v84 = 0;
              WTF::String::String((WTF::String *)&v85, a6);
              v86 = 0;
              WTF::LogArgument<void const*>::toString();
              v88 = 0;
              WTF::String::String((WTF::String *)&v89, a8);
              v90 = 0;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v91 = v78;
              v92 = 0;
              WTF::String::String((WTF::String *)v93, a10);
              v63 = 0;
              v64 = 0;
              v32 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x80);
              LODWORD(v64) = 8;
              v63 = v32;
              v33 = HIDWORD(v64);
              *((_DWORD *)v32 + 4 * HIDWORD(v64)) = buf;
              v34 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v32 + 2 * v33 + 1) = v34;
              *((_DWORD *)v32 + 4 * (v33 + 1)) = v80;
              v35 = v81;
              if (v81)
                *(_DWORD *)v81 += 2;
              *((_QWORD *)v32 + 2 * (v33 + 1) + 1) = v35;
              *((_DWORD *)v32 + 4 * (v33 + 2)) = v82;
              v36 = v83;
              if (v83)
                *(_DWORD *)v83 += 2;
              *((_QWORD *)v32 + 2 * (v33 + 2) + 1) = v36;
              *((_DWORD *)v32 + 4 * (v33 + 3)) = v84;
              v37 = v85;
              if (v85)
                *(_DWORD *)v85 += 2;
              *((_QWORD *)v32 + 2 * (v33 + 3) + 1) = v37;
              *((_DWORD *)v32 + 4 * (v33 + 4)) = v86;
              v38 = v87;
              if (v87)
                *(_DWORD *)v87 += 2;
              *((_QWORD *)v32 + 2 * (v33 + 4) + 1) = v38;
              *((_DWORD *)v32 + 4 * (v33 + 5)) = v88;
              v39 = v89;
              if (v89)
                *(_DWORD *)v89 += 2;
              *((_QWORD *)v32 + 2 * (v33 + 5) + 1) = v39;
              *((_DWORD *)v32 + 4 * (v33 + 6)) = v90;
              v40 = v91;
              if (v91)
                *(_DWORD *)v91 += 2;
              *((_QWORD *)v32 + 2 * (v33 + 6) + 1) = v40;
              *((_DWORD *)v32 + 4 * (v33 + 7)) = v92;
              v41 = v93[0];
              if (v93[0])
                *(_DWORD *)v93[0] += 2;
              v42 = a4;
              *((_QWORD *)v32 + 2 * (v33 + 7) + 1) = v41;
              HIDWORD(v64) = v33 + 8;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v31 + 16))(v31, a1, a2, &v63);
              v43 = v63;
              if (HIDWORD(v64))
              {
                v44 = 16 * HIDWORD(v64);
                v45 = (WTF::StringImpl **)((char *)v63 + 8);
                do
                {
                  v46 = *v45;
                  *v45 = 0;
                  if (v46)
                  {
                    if (*(_DWORD *)v46 == 2)
                      WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v23);
                    else
                      *(_DWORD *)v46 -= 2;
                  }
                  v45 += 2;
                  v44 -= 16;
                }
                while (v44);
                v43 = v63;
              }
              a4 = v42;
              if (v43)
              {
                v63 = 0;
                LODWORD(v64) = 0;
                WTF::fastFree(v43, v23);
              }
              v47 = (WTF::StringImpl *)v93[0];
              v93[0] = 0;
              if (v47)
              {
                if (*(_DWORD *)v47 == 2)
                  WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v23);
                else
                  *(_DWORD *)v47 -= 2;
              }
              v48 = v91;
              v91 = 0;
              if (v48)
              {
                if (*(_DWORD *)v48 == 2)
                  WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v23);
                else
                  *(_DWORD *)v48 -= 2;
              }
              v49 = v89;
              v89 = 0;
              if (v49)
              {
                if (*(_DWORD *)v49 == 2)
                  WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v23);
                else
                  *(_DWORD *)v49 -= 2;
              }
              v50 = v87;
              v87 = 0;
              if (v50)
              {
                if (*(_DWORD *)v50 == 2)
                  WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v23);
                else
                  *(_DWORD *)v50 -= 2;
              }
              v51 = v85;
              v85 = 0;
              if (v51)
              {
                if (*(_DWORD *)v51 == 2)
                  WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v23);
                else
                  *(_DWORD *)v51 -= 2;
              }
              v52 = v83;
              v83 = 0;
              if (v52)
              {
                if (*(_DWORD *)v52 == 2)
                  WTF::StringImpl::destroy(v52, (WTF::StringImpl *)v23);
                else
                  *(_DWORD *)v52 -= 2;
              }
              v53 = v81;
              v81 = 0;
              if (v53)
              {
                if (*(_DWORD *)v53 == 2)
                  WTF::StringImpl::destroy(v53, (WTF::StringImpl *)v23);
                else
                  *(_DWORD *)v53 -= 2;
              }
              v54 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v54)
              {
                if (*(_DWORD *)v54 == 2)
                  WTF::StringImpl::destroy(v54, (WTF::StringImpl *)v23);
                else
                  *(_DWORD *)v54 -= 2;
              }
              ++v30;
            }
            while (v30 != (uint64_t *)v56);
          }
          v55 = __ldxr(v25);
          if (v55 == 1)
          {
            if (!__stlxr(0, v25))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = v72;
  v72 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v23);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1947927D0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,WTF *a29,int a30,int a31,WTF::StringImpl *a32,WTF::StringImpl *a33,WTF::StringImpl *a34,WTF::StringImpl *a35,WTF::StringImpl *a36,WTF::StringImpl *a37,uint64_t a38,WTF::StringImpl *a39)
{
  unsigned __int8 *v39;
  int v41;

  v41 = __ldxr(v39);
  if (v41 == 1)
  {
    if (!__stlxr(0, v39))
    {
LABEL_6:
      if (a39)
      {
        if (*(_DWORD *)a39 == 2)
          WTF::StringImpl::destroy(a39, a2);
        else
          *(_DWORD *)a39 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

WTF::StringImpl *WTF::Logger::log<char [32],WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>(uint64_t a1, unsigned int a2, char *a3, uint64_t a4, const char *a5, int a6, const char *a7, WTF::Logger::LogSiteIdentifier *a8, char *a9)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  NSObject *v19;
  uint64_t v20;
  void *v21;
  char *v22;
  unsigned __int8 *v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  WTF::Logger *v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  WTF::Logger *v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl **v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  int v51;
  uint64_t v52;
  WTF::Logger *v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  __int128 buf;
  int v75;
  WTF::StringImpl *v76;
  int v77;
  WTF::StringImpl *v78;
  int v79;
  WTF::StringImpl *v80;
  int v81;
  WTF::StringImpl *v82;
  int v83;
  WTF::StringImpl *v84;
  int v85;
  _QWORD v86[3];

  v86[1] = *MEMORY[0x1E0C80C00];
  WTF::String::String((WTF::String *)&v67, a3);
  WTF::LogArgument<WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>>::toString(a4, &v66);
  WTF::String::String((WTF::String *)&v65, a5);
  WTF::LogArgument<void const*>::toString();
  WTF::String::String((WTF::String *)&v63, a7);
  WTF::Logger::LogSiteIdentifier::toString(a8);
  WTF::String::String((WTF::String *)&v61, a9);
  v59 = v66;
  v73 = v65;
  *(_QWORD *)&buf = v67;
  v72 = v64;
  v70 = v62;
  v71 = v63;
  v69 = v61;
  result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v59, (uint64_t *)&v73, (uint64_t *)&v72, (uint64_t *)&v71, (uint64_t *)&v70, (uint64_t *)&v69, &v68);
  if (v68)
  {
    v12 = v61;
    v61 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = v62;
    v62 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v11);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = v63;
    v63 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v11);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = v64;
    v64 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v11);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = v65;
    v65 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v11);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = v66;
    v66 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v11);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = v67;
    v67 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v11);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = *(NSObject **)(a1 + 32);
    v20 = os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v20)
    {
      WTF::String::utf8();
      v22 = v59 ? (char *)v59 + 16 : 0;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v22;
      _os_log_impl(&dword_1940B8000, v19, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      v20 = (uint64_t)v59;
      v59 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 1)
          v20 = WTF::fastFree((WTF *)v20, v21);
        else
          --*(_DWORD *)v20;
      }
    }
    if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
    {
      v23 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v24 = *v23;
        if ((v24 & 1) != 0)
          break;
        v25 = __ldaxr(v23);
        if (v25 == v24)
        {
          if (!__stxr(v24 | 1, v23))
          {
            v26 = WTF::Logger::observers((WTF::Logger *)v20);
            v27 = *(unsigned int *)(v26 + 12);
            if ((_DWORD)v27)
            {
              v28 = *(uint64_t **)v26;
              v52 = *(_QWORD *)v26 + 8 * v27;
              do
              {
                v29 = *v28;
                LODWORD(buf) = 0;
                WTF::String::String((WTF::String *)((char *)&buf + 8), a3);
                v75 = 0;
                WTF::LogArgument<WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>>::toString(a4, &v76);
                v77 = 0;
                WTF::String::String((WTF::String *)&v78, a5);
                v79 = 0;
                WTF::LogArgument<void const*>::toString();
                v81 = 0;
                WTF::String::String((WTF::String *)&v82, a7);
                v83 = 0;
                WTF::Logger::LogSiteIdentifier::toString(a8);
                v85 = 0;
                WTF::String::String((WTF::String *)v86, a9);
                v59 = 0;
                v60 = 0;
                v30 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x70);
                LODWORD(v60) = 7;
                v59 = v30;
                v31 = HIDWORD(v60);
                *((_DWORD *)v30 + 4 * HIDWORD(v60)) = buf;
                v32 = *((_QWORD *)&buf + 1);
                if (*((_QWORD *)&buf + 1))
                  **((_DWORD **)&buf + 1) += 2;
                *((_QWORD *)v30 + 2 * v31 + 1) = v32;
                *((_DWORD *)v30 + 4 * (v31 + 1)) = v75;
                v33 = v76;
                if (v76)
                  *(_DWORD *)v76 += 2;
                *((_QWORD *)v30 + 2 * (v31 + 1) + 1) = v33;
                *((_DWORD *)v30 + 4 * (v31 + 2)) = v77;
                v34 = v78;
                if (v78)
                  *(_DWORD *)v78 += 2;
                *((_QWORD *)v30 + 2 * (v31 + 2) + 1) = v34;
                *((_DWORD *)v30 + 4 * (v31 + 3)) = v79;
                v35 = v80;
                if (v80)
                  *(_DWORD *)v80 += 2;
                *((_QWORD *)v30 + 2 * (v31 + 3) + 1) = v35;
                *((_DWORD *)v30 + 4 * (v31 + 4)) = v81;
                v36 = v82;
                if (v82)
                  *(_DWORD *)v82 += 2;
                *((_QWORD *)v30 + 2 * (v31 + 4) + 1) = v36;
                *((_DWORD *)v30 + 4 * (v31 + 5)) = v83;
                v37 = v84;
                if (v84)
                  *(_DWORD *)v84 += 2;
                *((_QWORD *)v30 + 2 * (v31 + 5) + 1) = v37;
                *((_DWORD *)v30 + 4 * (v31 + 6)) = v85;
                v38 = v86[0];
                if (v86[0])
                  *(_DWORD *)v86[0] += 2;
                *((_QWORD *)v30 + 2 * (v31 + 6) + 1) = v38;
                HIDWORD(v60) = v31 + 7;
                (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v29 + 16))(v29, a1, a2, &v59);
                v39 = v59;
                if (HIDWORD(v60))
                {
                  v40 = a4;
                  v41 = 16 * HIDWORD(v60);
                  v42 = (WTF::StringImpl **)((char *)v59 + 8);
                  do
                  {
                    v43 = *v42;
                    *v42 = 0;
                    if (v43)
                    {
                      if (*(_DWORD *)v43 == 2)
                        WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v21);
                      else
                        *(_DWORD *)v43 -= 2;
                    }
                    v42 += 2;
                    v41 -= 16;
                  }
                  while (v41);
                  v39 = v59;
                  a4 = v40;
                }
                if (v39)
                {
                  v59 = 0;
                  LODWORD(v60) = 0;
                  WTF::fastFree(v39, v21);
                }
                v44 = (WTF::StringImpl *)v86[0];
                v86[0] = 0;
                if (v44)
                {
                  if (*(_DWORD *)v44 == 2)
                    WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v21);
                  else
                    *(_DWORD *)v44 -= 2;
                }
                v45 = v84;
                v84 = 0;
                if (v45)
                {
                  if (*(_DWORD *)v45 == 2)
                    WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v21);
                  else
                    *(_DWORD *)v45 -= 2;
                }
                v46 = v82;
                v82 = 0;
                if (v46)
                {
                  if (*(_DWORD *)v46 == 2)
                    WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v21);
                  else
                    *(_DWORD *)v46 -= 2;
                }
                v47 = v80;
                v80 = 0;
                if (v47)
                {
                  if (*(_DWORD *)v47 == 2)
                    WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v21);
                  else
                    *(_DWORD *)v47 -= 2;
                }
                v48 = v78;
                v78 = 0;
                if (v48)
                {
                  if (*(_DWORD *)v48 == 2)
                    WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v21);
                  else
                    *(_DWORD *)v48 -= 2;
                }
                v49 = v76;
                v76 = 0;
                if (v49)
                {
                  if (*(_DWORD *)v49 == 2)
                    WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v21);
                  else
                    *(_DWORD *)v49 -= 2;
                }
                v50 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                *((_QWORD *)&buf + 1) = 0;
                if (v50)
                {
                  if (*(_DWORD *)v50 == 2)
                    WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v21);
                  else
                    *(_DWORD *)v50 -= 2;
                }
                ++v28;
              }
              while (v28 != (uint64_t *)v52);
            }
            v51 = __ldxr(v23);
            if (v51 == 1)
            {
              if (!__stlxr(0, v23))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    result = v68;
    v68 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v21);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

void sub_1947932B0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,WTF *a26,int a27,int a28,WTF::StringImpl *a29,WTF::StringImpl *a30,WTF::StringImpl *a31,WTF::StringImpl *a32,WTF::StringImpl *a33,WTF::StringImpl *a34,uint64_t a35,WTF::StringImpl *a36)
{
  unsigned __int8 *v36;
  int v38;

  v38 = __ldxr(v36);
  if (v38 == 1)
  {
    if (!__stlxr(0, v36))
    {
LABEL_6:
      if (a36)
      {
        if (*(_DWORD *)a36 == 2)
          WTF::StringImpl::destroy(a36, a2);
        else
          *(_DWORD *)a36 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *a1 = &off_1E3205B18;
  v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
    }
  }
  v6 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v6 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *(_QWORD *)this = &off_1E3205B18;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1}::operator()((WTF::NativePromiseBase *)(a1 + 8));
}

WTF::StringImpl *WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1}::operator()(WTF::NativePromiseBase *a1)
{
  uint64_t v1;
  uint64_t v2;
  WTF::StringImpl *result;
  BOOL v4;
  unsigned __int8 *v6;
  int v8;
  int v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v14;
  int v15;
  int v16;
  __int128 v17;
  uint64_t v18;

  v1 = *(_QWORD *)a1;
  v2 = *((_QWORD *)a1 + 2);
  if (!*(_BYTE *)(*(_QWORD *)a1 + 56))
  {
    v6 = (unsigned __int8 *)(v2 + 48);
    if (__ldaxr((unsigned __int8 *)(v2 + 48)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v6))
    {
      goto LABEL_12;
    }
    MEMORY[0x19AEA534C](v2 + 48);
LABEL_12:
    v8 = *(_DWORD *)(v2 + 80);
    v9 = __ldxr(v6);
    if (v9 == 1)
    {
      if (!__stlxr(0, v6))
      {
LABEL_17:
        v10 = *((_QWORD *)a1 + 2);
        v11 = (unsigned __int8 *)(v10 + 48);
        if (v8 == 2)
        {
          if (__ldaxr(v11))
          {
            __clrex();
          }
          else if (!__stxr(1u, v11))
          {
            goto LABEL_24;
          }
          MEMORY[0x19AEA534C](v10 + 48);
LABEL_24:
          if (*(_DWORD *)(v10 + 80) == 2)
          {
            v14 = *(_QWORD *)(v10 + 56);
            *(_QWORD *)(v10 + 56) = 0;
            v15 = __ldxr(v11);
            if (v15 == 1)
            {
              if (!__stlxr(0, v11))
                goto LABEL_30;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)(v10 + 48));
LABEL_30:
            (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v14 + 16))(&v17, v14);
            (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v1 + 24))(v1, v10, &v17);
            return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
          }
LABEL_40:
          result = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
          __break(1u);
          return result;
        }
        if (__ldaxr(v11))
        {
          __clrex();
        }
        else if (!__stxr(1u, v11))
        {
          goto LABEL_33;
        }
        MEMORY[0x19AEA534C](v10 + 48);
LABEL_33:
        if (*(_DWORD *)(v10 + 80) != 1)
          goto LABEL_40;
        v17 = *(_OWORD *)(v10 + 56);
        v18 = *(_QWORD *)(v10 + 72);
        v16 = __ldxr(v11);
        if (v16 == 1)
        {
          if (!__stlxr(0, v11))
            return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v1 + 24))(v1, v10, &v17);
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)(v10 + 48));
        return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v1 + 24))(v1, v10, &v17);
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 48));
    goto LABEL_17;
  }
  *(_QWORD *)&v17 = *(_QWORD *)a1;
  result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel(a1);
  if (*(_BYTE *)result)
    v4 = *((unsigned __int8 *)result + 16) >= 4u;
  else
    v4 = 0;
  if (v4)
    return WTF::Logger::log<char [32],WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, 4u, "ThenCallback disconnected from ", v2, " aborting [callback:", (int)&v17, " callSite:", (WTF::Logger::LogSiteIdentifier *)(v1 + 24), "]");
  return result;
}

void sub_194793998(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [39],WTF::MediaTime>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4, WTF::MediaTime *a5)
{
  uint64_t result;
  int v8;
  int v9;
  int v10;
  BOOL v11;
  int v12;
  BOOL v13;
  int v14;
  unsigned int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  NSObject *v20;
  uint64_t v21;
  void *v22;
  char *v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  WTF::Logger *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::Logger *v36;
  const char *v37;
  uint64_t v38;
  WTF::StringImpl **v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  int v44;
  uint64_t v45;
  WTF::Logger *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  __int128 buf;
  int v56;
  WTF::StringImpl *v57;
  int v58;
  WTF::StringImpl *v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  WTF::String::String((WTF::String *)&v52, a4);
  result = WTF::MediaTime::toJSONString(a5);
  if (v53)
  {
    v8 = *((_DWORD *)v53 + 1);
    if (v52)
      goto LABEL_3;
LABEL_91:
    v9 = 0;
    if (v51)
      goto LABEL_4;
LABEL_92:
    v10 = 0;
    goto LABEL_5;
  }
  v8 = 0;
  if (!v52)
    goto LABEL_91;
LABEL_3:
  v9 = *((_DWORD *)v52 + 1);
  if (!v51)
    goto LABEL_92;
LABEL_4:
  v10 = *((_DWORD *)v51 + 1);
LABEL_5:
  if ((v10 | v9) < 0)
    goto LABEL_95;
  v11 = __OFADD__(v9, v10);
  v12 = v9 + v10;
  v13 = v11;
  if (v8 < 0)
    goto LABEL_95;
  if (v13)
    goto LABEL_95;
  result = (v8 + v12);
  if (__OFADD__(v8, v12))
    goto LABEL_95;
  if (v53 && (*((_BYTE *)v53 + 16) & 4) == 0)
  {
    v14 = 0;
    goto LABEL_19;
  }
  if (v52)
  {
    v15 = *((_DWORD *)v52 + 4);
    v14 = (v15 >> 2) & 1;
    if (v51 && (v15 & 4) != 0)
      goto LABEL_18;
  }
  else
  {
    if (v51)
    {
LABEL_18:
      v14 = (*((unsigned __int8 *)v51 + 16) >> 2) & 1;
      goto LABEL_19;
    }
    v14 = 1;
  }
LABEL_19:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v14, v53, (uint64_t)v52, (uint64_t)v51, &buf);
  v54 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_95:
    __break(0xC471u);
    return result;
  }
  v17 = v51;
  v51 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v16);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = v52;
  v52 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v16);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v53;
  v53 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v16);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = *(NSObject **)(a1 + 32);
  v21 = os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v21)
  {
    WTF::String::utf8();
    v23 = v49 ? (char *)v49 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v23;
    _os_log_impl(&dword_1940B8000, v20, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v21 = (uint64_t)v49;
    v49 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 1)
        v21 = WTF::fastFree((WTF *)v21, v22);
      else
        --*(_DWORD *)v21;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v24 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v25 = *v24;
      if ((v25 & 1) != 0)
        break;
      v26 = __ldaxr(v24);
      if (v26 == v25)
      {
        if (!__stxr(v25 | 1, v24))
        {
          v27 = WTF::Logger::observers((WTF::Logger *)v21);
          v28 = *(unsigned int *)(v27 + 12);
          if ((_DWORD)v28)
          {
            v29 = *(uint64_t **)v27;
            v45 = *(_QWORD *)v27 + 8 * v28;
            do
            {
              v30 = *v29;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v56 = 0;
              WTF::String::String((WTF::String *)&v57, a4);
              v58 = 1;
              WTF::MediaTime::toJSONString(a5);
              v49 = 0;
              v50 = 0;
              v31 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
              LODWORD(v50) = 3;
              v49 = v31;
              v32 = HIDWORD(v50);
              *((_DWORD *)v31 + 4 * HIDWORD(v50)) = buf;
              v33 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v31 + 2 * v32 + 1) = v33;
              *((_DWORD *)v31 + 4 * (v32 + 1)) = v56;
              v34 = v57;
              if (v57)
                *(_DWORD *)v57 += 2;
              *((_QWORD *)v31 + 2 * (v32 + 1) + 1) = v34;
              *((_DWORD *)v31 + 4 * (v32 + 2)) = v58;
              v35 = v59;
              if (v59)
                *(_DWORD *)v59 += 2;
              *((_QWORD *)v31 + 2 * (v32 + 2) + 1) = v35;
              HIDWORD(v50) = v32 + 3;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v30 + 16))(v30, a1, a2, &v49);
              v36 = v49;
              if (HIDWORD(v50))
              {
                v37 = a4;
                v38 = 16 * HIDWORD(v50);
                v39 = (WTF::StringImpl **)((char *)v49 + 8);
                do
                {
                  v40 = *v39;
                  *v39 = 0;
                  if (v40)
                  {
                    if (*(_DWORD *)v40 == 2)
                      WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v22);
                    else
                      *(_DWORD *)v40 -= 2;
                  }
                  v39 += 2;
                  v38 -= 16;
                }
                while (v38);
                v36 = v49;
                a4 = v37;
              }
              if (v36)
              {
                v49 = 0;
                LODWORD(v50) = 0;
                WTF::fastFree(v36, v22);
              }
              v41 = v59;
              v59 = 0;
              if (v41)
              {
                if (*(_DWORD *)v41 == 2)
                  WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v41 -= 2;
              }
              v42 = v57;
              v57 = 0;
              if (v42)
              {
                if (*(_DWORD *)v42 == 2)
                  WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v42 -= 2;
              }
              v43 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v43)
              {
                if (*(_DWORD *)v43 == 2)
                  WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v43 -= 2;
              }
              ++v29;
            }
            while (v29 != (uint64_t *)v45);
          }
          v44 = __ldxr(v24);
          if (v44 == 1)
          {
            if (!__stlxr(0, v24))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v54;
  v54 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v22);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_194793ED4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF *a15, int a16, int a17, WTF::StringImpl *a18, WTF::StringImpl *a19, uint64_t a20,WTF::StringImpl *a21,char a22,WTF::StringImpl *a23,uint64_t a24,WTF::StringImpl *a25,uint64_t a26,WTF::StringImpl *a27)
{
  unsigned __int8 *v27;
  int v29;

  v29 = __ldxr(v27);
  if (v29 == 1)
  {
    if (!__stlxr(0, v27))
    {
LABEL_6:
      if (a21)
      {
        if (*(_DWORD *)a21 == 2)
          WTF::StringImpl::destroy(a21, a2);
        else
          *(_DWORD *)a21 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [75]>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4)
{
  uint64_t result;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::Logger *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::Logger *v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  WTF::Logger *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  __int128 buf;
  int v45;
  WTF::StringImpl *v46[3];

  v46[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  result = WTF::String::String((WTF::String *)&v41, a4);
  if (!v42)
  {
    v8 = 0;
    if (v41)
      goto LABEL_3;
LABEL_72:
    v9 = 0;
    goto LABEL_4;
  }
  v8 = *((_DWORD *)v42 + 1);
  if (!v41)
    goto LABEL_72;
LABEL_3:
  v9 = *((_DWORD *)v41 + 1);
LABEL_4:
  if ((v9 | v8) < 0)
    goto LABEL_75;
  result = (v8 + v9);
  if (__OFADD__(v8, v9))
    goto LABEL_75;
  if (v42)
  {
    v10 = *((_DWORD *)v42 + 4);
    v11 = (v10 >> 2) & 1;
    if (v41 && (v10 & 4) != 0)
      goto LABEL_9;
  }
  else
  {
    if (v41)
    {
LABEL_9:
      v11 = (*((unsigned __int8 *)v41 + 16) >> 2) & 1;
      goto LABEL_10;
    }
    v11 = 1;
  }
LABEL_10:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v11, (uint64_t)v42, (uint64_t)v41, &buf);
  v43 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_75:
    __break(0xC471u);
    return result;
  }
  v13 = v41;
  v41 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v42;
  v42 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *(NSObject **)(a1 + 32);
  v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v16)
  {
    WTF::String::utf8();
    v18 = v39 ? (char *)v39 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v18;
    _os_log_impl(&dword_1940B8000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v16 = (uint64_t)v39;
    v39 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
        v16 = WTF::fastFree((WTF *)v16, v17);
      else
        --*(_DWORD *)v16;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v19 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v20 = *v19;
      if ((v20 & 1) != 0)
        break;
      v21 = __ldaxr(v19);
      if (v21 == v20)
      {
        if (!__stxr(v20 | 1, v19))
        {
          v22 = WTF::Logger::observers((WTF::Logger *)v16);
          v23 = *(unsigned int *)(v22 + 12);
          if ((_DWORD)v23)
          {
            v24 = *(uint64_t **)v22;
            v25 = *(_QWORD *)v22 + 8 * v23;
            do
            {
              v26 = *v24;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v45 = 0;
              WTF::String::String((WTF::String *)v46, a4);
              v39 = 0;
              v40 = 0;
              v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v40) = 2;
              v39 = v27;
              v28 = HIDWORD(v40);
              *((_DWORD *)v27 + 4 * HIDWORD(v40)) = buf;
              v29 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v27 + 2 * v28 + 1) = v29;
              *((_DWORD *)v27 + 4 * (v28 + 1)) = v45;
              v30 = v46[0];
              if (v46[0])
                *(_DWORD *)v46[0] += 2;
              *((_QWORD *)v27 + 2 * (v28 + 1) + 1) = v30;
              HIDWORD(v40) = v28 + 2;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, a1, a2, &v39);
              v31 = v39;
              if (HIDWORD(v40))
              {
                v32 = 16 * HIDWORD(v40);
                v33 = (WTF::StringImpl **)((char *)v39 + 8);
                do
                {
                  v34 = *v33;
                  *v33 = 0;
                  if (v34)
                  {
                    if (*(_DWORD *)v34 == 2)
                      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v17);
                    else
                      *(_DWORD *)v34 -= 2;
                  }
                  v33 += 2;
                  v32 -= 16;
                }
                while (v32);
                v31 = v39;
              }
              if (v31)
              {
                v39 = 0;
                LODWORD(v40) = 0;
                WTF::fastFree(v31, v17);
              }
              v35 = v46[0];
              v46[0] = 0;
              if (v35)
              {
                if (*(_DWORD *)v35 == 2)
                  WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v35 -= 2;
              }
              v36 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                  WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v36 -= 2;
              }
              ++v24;
            }
            while (v24 != (uint64_t *)v25);
          }
          v37 = __ldxr(v19);
          if (v37 == 1)
          {
            if (!__stlxr(0, v19))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v43;
  v43 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1947944CC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, WTF::StringImpl *a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19)
{
  unsigned __int8 *v19;
  int v21;

  v21 = __ldxr(v19);
  if (v21 == 1)
  {
    if (!__stlxr(0, v19))
    {
LABEL_6:
      if (a15)
      {
        if (*(_DWORD *)a15 == 2)
          WTF::StringImpl::destroy(a15, a2);
        else
          *(_DWORD *)a15 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [70],NSString *,char [12],NSString *>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4, id *a5, const char *a6, id *a7)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  NSObject *v16;
  uint64_t v17;
  void *v18;
  char *v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  id v27;
  id v28;
  WTF::Logger *v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::Logger *v36;
  const char *v37;
  uint64_t v38;
  WTF::StringImpl **v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  int v46;
  int *v47;
  int *v48;
  int *v49;
  uint64_t v50;
  WTF::Logger *v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  __int128 buf;
  int v68;
  WTF::StringImpl *v69;
  int v70;
  WTF::StringImpl *v71;
  int v72;
  WTF::StringImpl *v73;
  int v74;
  WTF::StringImpl *v75[3];

  v75[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  WTF::String::String((WTF::String *)&v61, a4);
  MEMORY[0x19AEA5508](&v60, objc_msgSend(*a5, "description"));
  WTF::String::String((WTF::String *)&v59, a6);
  MEMORY[0x19AEA5508](&v58, objc_msgSend(*a7, "description"));
  v56 = v61;
  v66 = v60;
  *(_QWORD *)&buf = v62;
  v64 = v58;
  v65 = v59;
  result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v56, (uint64_t *)&v66, (uint64_t *)&v65, (uint64_t *)&v64, &v63);
  if (v63)
  {
    v11 = v58;
    v58 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v10);
      else
        *(_DWORD *)v11 -= 2;
    }
    v12 = v59;
    v59 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v10);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = v60;
    v60 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v10);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = v61;
    v61 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v10);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = v62;
    v62 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v10);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = *(NSObject **)(a1 + 32);
    v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v17)
    {
      WTF::String::utf8();
      v19 = v56 ? (char *)v56 + 16 : 0;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v19;
      _os_log_impl(&dword_1940B8000, v16, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      v17 = (uint64_t)v56;
      v56 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 1)
          v17 = WTF::fastFree((WTF *)v17, v18);
        else
          --*(_DWORD *)v17;
      }
    }
    if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
    {
      v20 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v21 = *v20;
        if ((v21 & 1) != 0)
          break;
        v22 = __ldaxr(v20);
        if (v22 == v21)
        {
          if (!__stxr(v21 | 1, v20))
          {
            v23 = WTF::Logger::observers((WTF::Logger *)v17);
            v24 = *(unsigned int *)(v23 + 12);
            if ((_DWORD)v24)
            {
              v25 = *(uint64_t **)v23;
              v50 = *(_QWORD *)v23 + 8 * v24;
              v48 = &v68;
              v49 = &v70;
              v47 = &v72;
              do
              {
                v26 = *v25;
                LODWORD(buf) = 0;
                WTF::Logger::LogSiteIdentifier::toString(this);
                v68 = 0;
                WTF::String::String((WTF::String *)&v69, a4);
                v27 = *a5;
                v70 = 0;
                MEMORY[0x19AEA5508](&v71, objc_msgSend(v27, "description", v47, v48, v49));
                v72 = 0;
                WTF::String::String((WTF::String *)&v73, a6);
                v28 = *a7;
                v74 = 0;
                MEMORY[0x19AEA5508](v75, objc_msgSend(v28, "description"));
                v56 = 0;
                v57 = 0;
                v29 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x50);
                LODWORD(v57) = 5;
                v56 = v29;
                v30 = HIDWORD(v57);
                *((_DWORD *)v29 + 4 * HIDWORD(v57)) = buf;
                v31 = *((_QWORD *)&buf + 1);
                if (*((_QWORD *)&buf + 1))
                  **((_DWORD **)&buf + 1) += 2;
                *((_QWORD *)v29 + 2 * v30 + 1) = v31;
                *((_DWORD *)v29 + 4 * (v30 + 1)) = v68;
                v32 = v69;
                if (v69)
                  *(_DWORD *)v69 += 2;
                *((_QWORD *)v29 + 2 * (v30 + 1) + 1) = v32;
                *((_DWORD *)v29 + 4 * (v30 + 2)) = v70;
                v33 = v71;
                if (v71)
                  *(_DWORD *)v71 += 2;
                *((_QWORD *)v29 + 2 * (v30 + 2) + 1) = v33;
                *((_DWORD *)v29 + 4 * (v30 + 3)) = v72;
                v34 = v73;
                if (v73)
                  *(_DWORD *)v73 += 2;
                *((_QWORD *)v29 + 2 * (v30 + 3) + 1) = v34;
                *((_DWORD *)v29 + 4 * (v30 + 4)) = v74;
                v35 = v75[0];
                if (v75[0])
                  *(_DWORD *)v75[0] += 2;
                *((_QWORD *)v29 + 2 * (v30 + 4) + 1) = v35;
                HIDWORD(v57) = v30 + 5;
                (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, a1, a2, &v56);
                v36 = v56;
                if (HIDWORD(v57))
                {
                  v37 = a4;
                  v38 = 16 * HIDWORD(v57);
                  v39 = (WTF::StringImpl **)((char *)v56 + 8);
                  do
                  {
                    v40 = *v39;
                    *v39 = 0;
                    if (v40)
                    {
                      if (*(_DWORD *)v40 == 2)
                        WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v18);
                      else
                        *(_DWORD *)v40 -= 2;
                    }
                    v39 += 2;
                    v38 -= 16;
                  }
                  while (v38);
                  v36 = v56;
                  a4 = v37;
                }
                if (v36)
                {
                  v56 = 0;
                  LODWORD(v57) = 0;
                  WTF::fastFree(v36, v18);
                }
                v41 = v75[0];
                v75[0] = 0;
                if (v41)
                {
                  if (*(_DWORD *)v41 == 2)
                    WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v18);
                  else
                    *(_DWORD *)v41 -= 2;
                }
                v42 = v73;
                v73 = 0;
                if (v42)
                {
                  if (*(_DWORD *)v42 == 2)
                    WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v18);
                  else
                    *(_DWORD *)v42 -= 2;
                }
                v43 = v71;
                v71 = 0;
                if (v43)
                {
                  if (*(_DWORD *)v43 == 2)
                    WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v18);
                  else
                    *(_DWORD *)v43 -= 2;
                }
                v44 = v69;
                v69 = 0;
                if (v44)
                {
                  if (*(_DWORD *)v44 == 2)
                    WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v18);
                  else
                    *(_DWORD *)v44 -= 2;
                }
                v45 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                *((_QWORD *)&buf + 1) = 0;
                if (v45)
                {
                  if (*(_DWORD *)v45 == 2)
                    WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v18);
                  else
                    *(_DWORD *)v45 -= 2;
                }
                ++v25;
              }
              while (v25 != (uint64_t *)v50);
            }
            v46 = __ldxr(v20);
            if (v46 == 1)
            {
              if (!__stlxr(0, v20))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    result = v63;
    v63 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v18);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

void sub_194794C1C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, WTF *a20,int a21,int a22,WTF::StringImpl *a23,WTF::StringImpl *a24,WTF::StringImpl *a25,WTF::StringImpl *a26,uint64_t a27,WTF::StringImpl *a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,WTF::StringImpl *a33,uint64_t a34,WTF::StringImpl *a35,uint64_t a36,WTF::StringImpl *a37,uint64_t a38,WTF::StringImpl *a39,uint64_t a40,WTF::StringImpl *a41)
{
  unsigned __int8 *v41;
  int v43;

  v43 = __ldxr(v41);
  if (v43 == 1)
  {
    if (!__stlxr(0, v41))
    {
LABEL_6:
      if (a28)
      {
        if (*(_DWORD *)a28 == 2)
          WTF::StringImpl::destroy(a28, a2);
        else
          *(_DWORD *)a28 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,double>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, double *a4)
{
  WTF::String *v7;
  uint64_t result;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  NSObject *v16;
  uint64_t v17;
  void *v18;
  char *v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  WTF::String *v28;
  double v29;
  WTF::Logger *v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::Logger *v34;
  uint64_t v35;
  WTF::StringImpl **v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  int v40;
  WTF::Logger *v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  __int128 buf;
  int v48;
  WTF::StringImpl *v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v7 = (WTF::String *)WTF::Logger::LogSiteIdentifier::toString(this);
  result = WTF::String::number(v7, *a4);
  if (!v45)
  {
    v9 = 0;
    if (v44)
      goto LABEL_3;
LABEL_72:
    v10 = 0;
    goto LABEL_4;
  }
  v9 = *((_DWORD *)v45 + 1);
  if (!v44)
    goto LABEL_72;
LABEL_3:
  v10 = *((_DWORD *)v44 + 1);
LABEL_4:
  if ((v10 | v9) < 0)
    goto LABEL_75;
  result = (v9 + v10);
  if (__OFADD__(v9, v10))
    goto LABEL_75;
  if (v45)
  {
    v11 = *((_DWORD *)v45 + 4);
    v12 = (v11 >> 2) & 1;
    if (v44 && (v11 & 4) != 0)
      goto LABEL_9;
  }
  else
  {
    if (v44)
    {
LABEL_9:
      v12 = (*((unsigned __int8 *)v44 + 16) >> 2) & 1;
      goto LABEL_10;
    }
    v12 = 1;
  }
LABEL_10:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v12, (uint64_t)v45, (uint64_t)v44, &buf);
  v46 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_75:
    __break(0xC471u);
    return result;
  }
  v14 = v44;
  v44 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = v45;
  v45 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v13);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = *(NSObject **)(a1 + 32);
  v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v17)
  {
    WTF::String::utf8();
    v19 = v42 ? (char *)v42 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v19;
    _os_log_impl(&dword_1940B8000, v16, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v17 = (uint64_t)v42;
    v42 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 1)
        v17 = WTF::fastFree((WTF *)v17, v18);
      else
        --*(_DWORD *)v17;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v20 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v21 = *v20;
      if ((v21 & 1) != 0)
        break;
      v22 = __ldaxr(v20);
      if (v22 == v21)
      {
        if (!__stxr(v21 | 1, v20))
        {
          v23 = WTF::Logger::observers((WTF::Logger *)v17);
          v24 = *(unsigned int *)(v23 + 12);
          if ((_DWORD)v24)
          {
            v25 = *(uint64_t **)v23;
            v26 = *(_QWORD *)v23 + 8 * v24;
            do
            {
              v27 = *v25;
              LODWORD(buf) = 0;
              v28 = (WTF::String *)WTF::Logger::LogSiteIdentifier::toString(this);
              v29 = *a4;
              v48 = 0;
              WTF::String::number(v28, v29);
              v42 = 0;
              v43 = 0;
              v30 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v43) = 2;
              v42 = v30;
              v31 = HIDWORD(v43);
              *((_DWORD *)v30 + 4 * HIDWORD(v43)) = buf;
              v32 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v30 + 2 * v31 + 1) = v32;
              *((_DWORD *)v30 + 4 * (v31 + 1)) = v48;
              v33 = v49;
              if (v49)
                *(_DWORD *)v49 += 2;
              *((_QWORD *)v30 + 2 * (v31 + 1) + 1) = v33;
              HIDWORD(v43) = v31 + 2;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v27 + 16))(v27, a1, a2, &v42);
              v34 = v42;
              if (HIDWORD(v43))
              {
                v35 = 16 * HIDWORD(v43);
                v36 = (WTF::StringImpl **)((char *)v42 + 8);
                do
                {
                  v37 = *v36;
                  *v36 = 0;
                  if (v37)
                  {
                    if (*(_DWORD *)v37 == 2)
                      WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v18);
                    else
                      *(_DWORD *)v37 -= 2;
                  }
                  v36 += 2;
                  v35 -= 16;
                }
                while (v35);
                v34 = v42;
              }
              if (v34)
              {
                v42 = 0;
                LODWORD(v43) = 0;
                WTF::fastFree(v34, v18);
              }
              v38 = v49;
              v49 = 0;
              if (v38)
              {
                if (*(_DWORD *)v38 == 2)
                  WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v18);
                else
                  *(_DWORD *)v38 -= 2;
              }
              v39 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v39)
              {
                if (*(_DWORD *)v39 == 2)
                  WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v18);
                else
                  *(_DWORD *)v39 -= 2;
              }
              ++v25;
            }
            while (v25 != (uint64_t *)v26);
          }
          v40 = __ldxr(v20);
          if (v40 == 1)
          {
            if (!__stlxr(0, v20))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v46;
  v46 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v18);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1947952D4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, WTF::StringImpl *a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19)
{
  unsigned __int8 *v19;
  int v21;

  v21 = __ldxr(v19);
  if (v21 == 1)
  {
    if (!__stlxr(0, v19))
    {
LABEL_6:
      if (a15)
      {
        if (*(_DWORD *)a15 == 2)
          WTF::StringImpl::destroy(a15, a2);
        else
          *(_DWORD *)a15 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::FloatSize>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, WebCore::FloatSize *a4)
{
  uint64_t result;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::JSONImpl::Value *v27;
  WTF::Logger *v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::Logger *v32;
  uint64_t v33;
  WTF::StringImpl **v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  int v38;
  WTF::Logger *v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::JSONImpl::Value *v45;
  __int128 buf;
  int v47;
  WTF::StringImpl *v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  WebCore::FloatSize::toJSONObject(a4, (uint64_t *)&buf);
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)buf);
  result = buf;
  *(_QWORD *)&buf = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      result = WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)result;
  }
  if (!v43)
  {
    v8 = 0;
    if (v42)
      goto LABEL_6;
LABEL_80:
    v9 = 0;
    goto LABEL_7;
  }
  v8 = *((_DWORD *)v43 + 1);
  if (!v42)
    goto LABEL_80;
LABEL_6:
  v9 = *((_DWORD *)v42 + 1);
LABEL_7:
  if ((v9 | v8) < 0)
    goto LABEL_83;
  result = (v8 + v9);
  if (__OFADD__(v8, v9))
    goto LABEL_83;
  if (v43)
  {
    v10 = *((_DWORD *)v43 + 4);
    v11 = (v10 >> 2) & 1;
    if (v42 && (v10 & 4) != 0)
      goto LABEL_12;
  }
  else
  {
    if (v42)
    {
LABEL_12:
      v11 = (*((unsigned __int8 *)v42 + 16) >> 2) & 1;
      goto LABEL_13;
    }
    v11 = 1;
  }
LABEL_13:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v11, (uint64_t)v43, (uint64_t)v42, &buf);
  v44 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_83:
    __break(0xC471u);
    return result;
  }
  v13 = v42;
  v42 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v43;
  v43 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *(NSObject **)(a1 + 32);
  v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v16)
  {
    WTF::String::utf8();
    v18 = v40 ? (char *)v40 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v18;
    _os_log_impl(&dword_1940B8000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v16 = (uint64_t)v40;
    v40 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
        v16 = WTF::fastFree((WTF *)v16, v17);
      else
        --*(_DWORD *)v16;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v19 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v20 = *v19;
      if ((v20 & 1) != 0)
        break;
      v21 = __ldaxr(v19);
      if (v21 == v20)
      {
        if (!__stxr(v20 | 1, v19))
        {
          v22 = WTF::Logger::observers((WTF::Logger *)v16);
          v23 = *(unsigned int *)(v22 + 12);
          if ((_DWORD)v23)
          {
            v24 = *(uint64_t **)v22;
            v25 = *(_QWORD *)v22 + 8 * v23;
            do
            {
              v26 = *v24;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v47 = 1;
              WebCore::FloatSize::toJSONObject(a4, (uint64_t *)&v45);
              WTF::JSONImpl::Value::toJSONString(v45);
              v27 = v45;
              v45 = 0;
              if (v27)
              {
                if (*(_DWORD *)v27 == 1)
                  WTF::JSONImpl::Value::operator delete();
                else
                  --*(_DWORD *)v27;
              }
              v40 = 0;
              v41 = 0;
              v28 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v41) = 2;
              v40 = v28;
              v29 = HIDWORD(v41);
              *((_DWORD *)v28 + 4 * HIDWORD(v41)) = buf;
              v30 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v28 + 2 * v29 + 1) = v30;
              *((_DWORD *)v28 + 4 * (v29 + 1)) = v47;
              v31 = v48;
              if (v48)
                *(_DWORD *)v48 += 2;
              *((_QWORD *)v28 + 2 * (v29 + 1) + 1) = v31;
              HIDWORD(v41) = v29 + 2;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, a1, a2, &v40);
              v32 = v40;
              if (HIDWORD(v41))
              {
                v33 = 16 * HIDWORD(v41);
                v34 = (WTF::StringImpl **)((char *)v40 + 8);
                do
                {
                  v35 = *v34;
                  *v34 = 0;
                  if (v35)
                  {
                    if (*(_DWORD *)v35 == 2)
                      WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v17);
                    else
                      *(_DWORD *)v35 -= 2;
                  }
                  v34 += 2;
                  v33 -= 16;
                }
                while (v33);
                v32 = v40;
              }
              if (v32)
              {
                v40 = 0;
                LODWORD(v41) = 0;
                WTF::fastFree(v32, v17);
              }
              v36 = v48;
              v48 = 0;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                  WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v36 -= 2;
              }
              v37 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v37)
              {
                if (*(_DWORD *)v37 == 2)
                  WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v37 -= 2;
              }
              ++v24;
            }
            while (v24 != (uint64_t *)v25);
          }
          v38 = __ldxr(v19);
          if (v38 == 1)
          {
            if (!__stlxr(0, v19))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v44;
  v44 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1947958A0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11, int a12, int a13, WTF::StringImpl *a14, uint64_t a15, WTF::StringImpl *a16, uint64_t a17, uint64_t a18, WTF::StringImpl *a19, uint64_t a20,WTF::StringImpl *a21)
{
  unsigned __int8 *v21;
  int v23;

  v23 = __ldxr(v21);
  if (v23 == 1)
  {
    if (!__stlxr(0, v21))
    {
LABEL_6:
      if (a16)
      {
        if (*(_DWORD *)a16 == 2)
          WTF::StringImpl::destroy(a16, a2);
        else
          *(_DWORD *)a16 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::MediaPlayerNetworkState>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, unsigned __int8 *a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  NSObject *v16;
  uint64_t v17;
  void *v18;
  char *v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::Logger *v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::Logger *v34;
  uint64_t v35;
  WTF::StringImpl **v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  int v40;
  WTF::Logger *v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  __int128 buf;
  int v47;
  WTF::StringImpl *v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  result = WTF::Logger::LogSiteIdentifier::toString(this);
  v8 = *a4;
  {
    WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_2::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_3::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_4::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_5::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_0::operator() const(void)::impl;
    *(_QWORD *)algn_1EE2F8BE8 = &WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_1::operator() const(void)::impl;
    qword_1EE2F8BF0 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_2::operator() const(void)::impl;
    unk_1EE2F8BF8 = &WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_3::operator() const(void)::impl;
    qword_1EE2F8C00 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_4::operator() const(void)::impl;
    unk_1EE2F8C08 = &WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_5::operator() const(void)::impl;
    WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_6::operator() const(void)::impl += 2;
    qword_1EE2F8C10 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_6::operator() const(void)::impl;
  }
  v9 = WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::values[v8];
  if (v9)
    *(_DWORD *)v9 += 2;
  if (!v44)
  {
    v10 = 0;
    if (v9)
      goto LABEL_7;
LABEL_80:
    v11 = 0;
    goto LABEL_8;
  }
  v10 = *((_DWORD *)v44 + 1);
  if (!v9)
    goto LABEL_80;
LABEL_7:
  v11 = *(_DWORD *)(v9 + 4);
LABEL_8:
  if ((v11 | v10) < 0)
    goto LABEL_83;
  result = (v10 + v11);
  if (__OFADD__(v10, v11))
    goto LABEL_83;
  if (v44)
  {
    v12 = *((_DWORD *)v44 + 4);
    v13 = (v12 >> 2) & 1;
    if (v9 && (v12 & 4) != 0)
      goto LABEL_13;
  }
  else
  {
    if (v9)
    {
LABEL_13:
      v13 = (*(unsigned __int8 *)(v9 + 16) >> 2) & 1;
      goto LABEL_14;
    }
    v13 = 1;
  }
LABEL_14:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v13, (uint64_t)v44, v9, &buf);
  v45 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_83:
    __break(0xC471u);
    return result;
  }
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v9, v14);
    else
      *(_DWORD *)v9 -= 2;
  }
  v15 = v44;
  v44 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v14);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = *(NSObject **)(a1 + 32);
  v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v17)
  {
    WTF::String::utf8();
    v19 = v42 ? (char *)v42 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v19;
    _os_log_impl(&dword_1940B8000, v16, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v17 = (uint64_t)v42;
    v42 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 1)
        v17 = WTF::fastFree((WTF *)v17, v18);
      else
        --*(_DWORD *)v17;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v20 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v21 = *v20;
      if ((v21 & 1) != 0)
        break;
      v22 = __ldaxr(v20);
      if (v22 == v21)
      {
        if (!__stxr(v21 | 1, v20))
        {
          v23 = WTF::Logger::observers((WTF::Logger *)v17);
          v24 = *(unsigned int *)(v23 + 12);
          if ((_DWORD)v24)
          {
            v25 = *(uint64_t **)v23;
            v26 = *(_QWORD *)v23 + 8 * v24;
            do
            {
              v27 = *v25;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v28 = *a4;
              v47 = 0;
              {
                WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_0::operator() const(void)::impl += 2;
                WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_1::operator() const(void)::impl += 2;
                WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_0::operator() const(void)::impl;
                *(_QWORD *)algn_1EE2F8BE8 = &WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_1::operator() const(void)::impl;
                WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_2::operator() const(void)::impl += 2;
                WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_3::operator() const(void)::impl += 2;
                qword_1EE2F8BF0 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_2::operator() const(void)::impl;
                unk_1EE2F8BF8 = &WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_3::operator() const(void)::impl;
                WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_4::operator() const(void)::impl += 2;
                WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_5::operator() const(void)::impl += 2;
                qword_1EE2F8C00 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_4::operator() const(void)::impl;
                unk_1EE2F8C08 = &WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_5::operator() const(void)::impl;
                WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_6::operator() const(void)::impl += 2;
                qword_1EE2F8C10 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::$_6::operator() const(void)::impl;
              }
              v29 = (WTF::StringImpl *)WebCore::convertEnumerationToString(WebCore::MediaPlayerNetworkState)::values[v28];
              if (v29)
                *(_DWORD *)v29 += 2;
              v48 = v29;
              v42 = 0;
              v43 = 0;
              v30 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v43) = 2;
              v42 = v30;
              v31 = HIDWORD(v43);
              *((_DWORD *)v30 + 4 * HIDWORD(v43)) = buf;
              v32 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v30 + 2 * v31 + 1) = v32;
              *((_DWORD *)v30 + 4 * (v31 + 1)) = v47;
              v33 = v48;
              if (v48)
                *(_DWORD *)v48 += 2;
              *((_QWORD *)v30 + 2 * (v31 + 1) + 1) = v33;
              HIDWORD(v43) = v31 + 2;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v27 + 16))(v27, a1, a2, &v42);
              v34 = v42;
              if (HIDWORD(v43))
              {
                v35 = 16 * HIDWORD(v43);
                v36 = (WTF::StringImpl **)((char *)v42 + 8);
                do
                {
                  v37 = *v36;
                  *v36 = 0;
                  if (v37)
                  {
                    if (*(_DWORD *)v37 == 2)
                      WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v18);
                    else
                      *(_DWORD *)v37 -= 2;
                  }
                  v36 += 2;
                  v35 -= 16;
                }
                while (v35);
                v34 = v42;
              }
              if (v34)
              {
                v42 = 0;
                LODWORD(v43) = 0;
                WTF::fastFree(v34, v18);
              }
              v38 = v48;
              v48 = 0;
              if (v38)
              {
                if (*(_DWORD *)v38 == 2)
                  WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v18);
                else
                  *(_DWORD *)v38 -= 2;
              }
              v39 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v39)
              {
                if (*(_DWORD *)v39 == 2)
                  WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v18);
                else
                  *(_DWORD *)v39 -= 2;
              }
              ++v25;
            }
            while (v25 != (uint64_t *)v26);
          }
          v40 = __ldxr(v20);
          if (v40 == 1)
          {
            if (!__stlxr(0, v20))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v45;
  v45 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v18);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_194795FB8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11, int a12, int a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19)
{
  unsigned __int8 *v19;
  int v21;

  v21 = __ldxr(v19);
  if (v21 == 1)
  {
    if (!__stlxr(0, v19))
    {
LABEL_6:
      if (a15)
      {
        if (*(_DWORD *)a15 == 2)
          WTF::StringImpl::destroy(a15, a2);
        else
          *(_DWORD *)a15 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t WTF::HashTable<WTF::RetainPtr<void const*>,WTF::KeyValuePair<WTF::RetainPtr<void const*>,WebCore::MediaPlayerPrivateMediaSourceAVFObjC::AudioRendererProperties>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<void const*>,WebCore::MediaPlayerPrivateMediaSourceAVFObjC::AudioRendererProperties>>,WTF::DefaultHash<WTF::RetainPtr<void const*>>,WTF::HashMap<WTF::RetainPtr<void const*>,WebCore::MediaPlayerPrivateMediaSourceAVFObjC::AudioRendererProperties,WTF::DefaultHash<WTF::RetainPtr<void const*>>,WTF::HashTraits<WTF::RetainPtr<void const*>>,WTF::HashTraits<WebCore::MediaPlayerPrivateMediaSourceAVFObjC::AudioRendererProperties>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<void const*>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t i;
  const void **v12;
  const void *v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  const void *v24;
  const void *v25;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  if (a2)
  {
    v9 = a2;
    v10 = (_BYTE *)(result + 24);
    do
    {
      *((_QWORD *)v10 - 1) = 0;
      *v10 = 0;
      v10 += 16;
      --v9;
    }
    while (v9);
  }
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v12 = (const void **)(v4 + 16 * i);
      v13 = *v12;
      if (*v12 != (const void *)-1)
      {
        if (v13)
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v16 = ((unint64_t)v13 + ~((_QWORD)v13 << 32)) ^ (((unint64_t)v13 + ~((_QWORD)v13 << 32)) >> 22);
          v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
          v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
          v19 = v15 & ((v18 >> 31) ^ v18);
          v20 = 1;
          do
          {
            v21 = v19;
            v22 = *(_QWORD *)(v14 + 16 * v19);
            v19 = (v19 + v20++) & v15;
          }
          while (v22);
          v23 = v14 + 16 * v21;
          *(_QWORD *)v23 = 0;
          v24 = *v12;
          *v12 = 0;
          *(_QWORD *)v23 = v24;
          *(_BYTE *)(v23 + 8) = *(_BYTE *)(v4 + 16 * i + 8);
          v25 = *v12;
          *v12 = 0;
          if (v25)
            CFRelease(v25);
        }
        else
        {
          *v12 = 0;
        }
      }
    }
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

void sub_194796508(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::MediaPlayerPrivateMediaStreamAVFObjC::logger(WebCore::MediaPlayerPrivateMediaStreamAVFObjC *this)
{
  return *((_QWORD *)this + 37);
}

char *WebCore::MediaPlayerPrivateMediaStreamAVFObjC::logChannel(WebCore::MediaPlayerPrivateMediaStreamAVFObjC *this)
{
  return &WebCore::LogMedia;
}

const char *WebCore::MediaPlayerPrivateMediaStreamAVFObjC::logClassName(WebCore::MediaPlayerPrivateMediaStreamAVFObjC *this)
{
  return "MediaPlayerPrivateMediaStreamAVFObjC";
}

uint64_t WebCore::MediaPlayerPrivateMediaStreamAVFObjC::logIdentifier(WebCore::MediaPlayerPrivateMediaStreamAVFObjC *this)
{
  return *((_QWORD *)this + 38);
}

void WebCore::MediaPlayerPrivateMediaStreamAVFObjC::~MediaPlayerPrivateMediaStreamAVFObjC(WebCore::MediaPlayerPrivateMediaStreamAVFObjC *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  WTF **v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF *v22;
  int v23;
  uint64_t v24;
  WTF *v25;
  uint64_t v26;
  WTF *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  int v32;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;
  uint64_t i;
  char *v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  WTF::StringImpl *v42;
  uint64_t j;
  char *v44;
  unsigned int *v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  const void *v55;
  WTF *v56;
  const void *v57;
  const void *v58;
  const void *v59;
  const void *v60;
  unsigned int *v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int *v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  WTF *v70;
  uint64_t v71;
  uint64_t k;
  char *v73;
  unsigned int *v74;
  unsigned int *v75;
  unsigned int v76;
  unsigned int v77;
  WTF::StringImpl *v78;
  WTF *v79;
  uint64_t v80;
  uint64_t m;
  char *v82;
  unsigned int *v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int v86;
  WTF::StringImpl *v87;
  void *v88;
  unsigned int *v89;
  unsigned int *v90;
  unsigned int v91;
  unsigned int v92;
  WebCore::MediaStreamPrivate *v93;
  uint64_t v94;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  unsigned int *v100;
  unsigned int v101;
  unsigned int v102;
  uint64_t v103;
  unsigned int *v104;
  unsigned int v105;
  unsigned int v106;
  uint64_t v107;
  unsigned int *v108;
  unsigned int v109;
  unsigned int v110;
  WTF *v111;
  WTF *v112;
  void *v113;
  int v114;
  const char *v115;
  uint64_t v116;
  const char *v117;
  uint64_t v118;

  v2 = *((_QWORD *)this + 37);
  v3 = *((_QWORD *)this + 38);
  v115 = "MediaPlayerPrivateMediaStreamAVFObjC";
  v116 = 37;
  v117 = "~MediaPlayerPrivateMediaStreamAVFObjC";
  v118 = v3;
  if (*(_BYTE *)(v2 + 12))
  {
    if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 3, (WTF::Logger::LogSiteIdentifier *)&v115);
  }
  if (*((_DWORD *)this + 55))
  {
    v5 = *((unsigned int *)this + 54);
    if ((_DWORD)v5)
    {
      v6 = 16 * v5;
      v7 = (_QWORD *)*((_QWORD *)this + 26);
      while (!*v7)
      {
        v7 += 2;
        v6 -= 16;
        if (!v6)
          goto LABEL_13;
      }
    }
    else
    {
      v7 = (_QWORD *)*((_QWORD *)this + 26);
    }
    v12 = *((_QWORD *)this + 26) + 16 * v5;
LABEL_23:
    if (v7 != (_QWORD *)v12)
    {
      v13 = (_BYTE *)v7[1];
      v13[117] = 0;
      WebCore::AudioTrackPrivateMediaStream::updateRenderer(v13);
      while (1)
      {
        v7 += 2;
        if (v7 == (_QWORD *)v12)
          break;
        if (*v7)
          goto LABEL_23;
      }
    }
  }
LABEL_13:
  v8 = *((_QWORD *)this + 17);
  if (v8)
    WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>(v8 + 32, (_QWORD *)this + 7);
  if (*((_DWORD *)this + 55))
  {
    v9 = *((unsigned int *)this + 54);
    if ((_DWORD)v9)
    {
      v10 = 16 * v9;
      v11 = (_QWORD *)*((_QWORD *)this + 26);
      while (!*v11)
      {
        v11 += 2;
        v10 -= 16;
        if (!v10)
          goto LABEL_34;
      }
    }
    else
    {
      v11 = (_QWORD *)*((_QWORD *)this + 26);
    }
    v14 = *((_QWORD *)this + 26) + 16 * v9;
    if (v11 != (_QWORD *)v14)
    {
LABEL_30:
      WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>(*(_QWORD *)(v11[1] + 120) + 24, (_QWORD *)this + 9);
      while (1)
      {
        v11 += 2;
        if (v11 == (_QWORD *)v14)
          break;
        if (*v11)
        {
          if (v11 != (_QWORD *)v14)
            goto LABEL_30;
          break;
        }
      }
    }
  }
LABEL_34:
  v15 = (WTF **)((char *)this + 232);
  if (*((_DWORD *)this + 61))
  {
    v16 = *((unsigned int *)this + 60);
    if ((_DWORD)v16)
    {
      v17 = 16 * v16;
      v18 = (_QWORD *)*((_QWORD *)this + 29);
      while (!*v18)
      {
        v18 += 2;
        v17 -= 16;
        if (!v17)
          goto LABEL_46;
      }
    }
    else
    {
      v18 = (_QWORD *)*((_QWORD *)this + 29);
    }
    v19 = *((_QWORD *)this + 29) + 16 * v16;
    if (v18 != (_QWORD *)v19)
    {
LABEL_42:
      WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>(*(_QWORD *)(v18[1] + 104) + 24, (_QWORD *)this + 9);
      while (1)
      {
        v18 += 2;
        if (v18 == (_QWORD *)v19)
          break;
        if (*v18)
        {
          if (v18 != (_QWORD *)v19)
            goto LABEL_42;
          break;
        }
      }
    }
  }
LABEL_46:
  v20 = *((_QWORD *)this + 18);
  if (v20)
    WebCore::RealtimeMediaSource::removeVideoFrameObserver(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v20 + 104) + 40) + 8), (uint64_t)this + 88);
  objc_msgSend(*((id *)this + 40), "invalidate", v115, v116, v117, v118);
  WebCore::MediaPlayerPrivateMediaStreamAVFObjC::destroyLayers(this);
  v22 = (WTF *)*((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  v24 = *((unsigned int *)this + 54);
  v23 = *((_DWORD *)this + 55);
  *((_DWORD *)this + 54) = 0;
  *(_QWORD *)((char *)this + 220) = 0;
  *((_BYTE *)this + 228) = 0;
  if (v23)
  {
    v25 = v22;
    if ((_DWORD)v24)
    {
      v26 = 16 * v24;
      v25 = v22;
      while (!*(_QWORD *)v25)
      {
        v25 = (WTF *)((char *)v25 + 16);
        v26 -= 16;
        if (!v26)
          goto LABEL_71;
      }
    }
    v27 = (WTF *)((char *)v22 + 16 * v24);
    if (v25 != v27)
    {
LABEL_55:
      v28 = *((_QWORD *)v25 + 1);
      if (*(_BYTE *)(v28 + 119))
        goto LABEL_68;
      *(_BYTE *)(v28 + 119) = 1;
      if (!*(_BYTE *)(v28 + 116))
        goto LABEL_66;
      v29 = *(_QWORD *)(v28 + 128);
      v30 = (unsigned __int8 *)(v29 + 144);
      if (__ldaxr((unsigned __int8 *)(v29 + 144)))
      {
        __clrex();
      }
      else if (!__stxr(1u, v30))
      {
LABEL_61:
        WTF::HashSet<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>,WTF::DefaultHash<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>,WTF::HashTableTraits>::remove<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>((uint64_t *)(v29 + 152), v28 + 104);
        v32 = __ldxr(v30);
        if (v32 == 1)
        {
          if (!__stlxr(0, v30))
            goto LABEL_66;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)(v29 + 144));
LABEL_66:
        WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>(*(_QWORD *)(v28 + 120) + 24, (_QWORD *)(v28 + 88));
        v33 = *(_QWORD *)(v28 + 144);
        if (v33)
          (*(void (**)(uint64_t))(*(_QWORD *)v33 + 64))(v33);
LABEL_68:
        while (1)
        {
          v25 = (WTF *)((char *)v25 + 16);
          if (v25 == v27)
            goto LABEL_71;
          if (*(_QWORD *)v25)
          {
            if (v25 != v27)
              goto LABEL_55;
            goto LABEL_71;
          }
        }
      }
      MEMORY[0x19AEA534C](v29 + 144);
      goto LABEL_61;
    }
  }
LABEL_71:
  v34 = *v15;
  if (*v15)
  {
    v35 = *((unsigned int *)this + 60);
    *v15 = 0;
    *((_QWORD *)this + 30) = 0;
    *(_QWORD *)((char *)this + 245) = 0;
    if ((_DWORD)v35)
    {
      for (i = 0; i != v35; ++i)
      {
        v37 = (char *)v34 + 16 * i;
        v38 = (unsigned int *)*((_QWORD *)v37 + 1);
        *((_QWORD *)v37 + 1) = 0;
        if (v38)
        {
          v39 = v38 + 2;
          do
          {
            v40 = __ldaxr(v39);
            v41 = v40 - 1;
          }
          while (__stlxr(v41, v39));
          if (!v41)
          {
            atomic_store(1u, v38 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v38 + 8))(v38);
          }
        }
        v42 = *(WTF::StringImpl **)v37;
        *(_QWORD *)v37 = 0;
        if (v42)
        {
          if (*(_DWORD *)v42 == 2)
            WTF::StringImpl::destroy(v42, v21);
          else
            *(_DWORD *)v42 -= 2;
        }
      }
    }
    WTF::fastFree(v34, v21);
  }
  if (v22)
  {
    if ((_DWORD)v24)
    {
      for (j = 0; j != v24; ++j)
      {
        v44 = (char *)v22 + 16 * j;
        v45 = (unsigned int *)*((_QWORD *)v44 + 1);
        *((_QWORD *)v44 + 1) = 0;
        if (v45)
        {
          v46 = v45 + 2;
          do
          {
            v47 = __ldaxr(v46);
            v48 = v47 - 1;
          }
          while (__stlxr(v48, v46));
          if (!v48)
          {
            atomic_store(1u, v45 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v45 + 8))(v45);
          }
        }
        v49 = *(WTF::StringImpl **)v44;
        *(_QWORD *)v44 = 0;
        if (v49)
        {
          if (*(_DWORD *)v49 == 2)
            WTF::StringImpl::destroy(v49, v21);
          else
            *(_DWORD *)v49 -= 2;
        }
      }
    }
    WTF::fastFree(v22, v21);
  }
  v50 = *((_QWORD *)this + 60);
  *((_QWORD *)this + 60) = 0;
  if (v50)
    (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
  v51 = (unsigned int *)*((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = 0;
  if (v51)
  {
    v52 = v51 + 2;
    do
    {
      v53 = __ldaxr(v52);
      v54 = v53 - 1;
    }
    while (__stlxr(v54, v52));
    if (!v54)
    {
      atomic_store(1u, v51 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v51 + 8))(v51);
    }
  }
  v55 = (const void *)*((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = 0;
  if (v55)
    CFRelease(v55);
  v56 = (WTF *)*((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = 0;
  if (v56)
  {
    v57 = (const void *)*((_QWORD *)v56 + 9);
    *((_QWORD *)v56 + 9) = 0;
    if (v57)
      CFRelease(v57);
    v58 = (const void *)*((_QWORD *)v56 + 8);
    *((_QWORD *)v56 + 8) = 0;
    if (v58)
      CFRelease(v58);
    v59 = (const void *)*((_QWORD *)v56 + 5);
    *((_QWORD *)v56 + 5) = 0;
    if (v59)
      CFRelease(v59);
    v60 = (const void *)*((_QWORD *)v56 + 4);
    *((_QWORD *)v56 + 4) = 0;
    if (v60)
      CFRelease(v60);
    v61 = (unsigned int *)*((_QWORD *)v56 + 2);
    *((_QWORD *)v56 + 2) = 0;
    if (v61)
    {
      v62 = v61 + 2;
      do
      {
        v63 = __ldaxr(v62);
        v64 = v63 - 1;
      }
      while (__stlxr(v64, v62));
      if (!v64)
      {
        atomic_store(1u, v61 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v61 + 8))(v61);
      }
    }
    WTF::fastFree(v56, v21);
  }
  v65 = (unsigned int *)*((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v65)
  {
    v66 = v65 + 2;
    do
    {
      v67 = __ldaxr(v66);
      v68 = v67 - 1;
    }
    while (__stlxr(v68, v66));
    if (!v68)
    {
      atomic_store(1u, v65 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v65 + 8))(v65);
    }
  }
  v69 = *((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v69)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SampleBufferDisplayLayer,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v69 + 8));
  v70 = *v15;
  if (*v15)
  {
    v71 = *((unsigned int *)this + 60);
    if ((_DWORD)v71)
    {
      for (k = 0; k != v71; ++k)
      {
        v73 = (char *)v70 + 16 * k;
        v74 = (unsigned int *)*((_QWORD *)v73 + 1);
        *((_QWORD *)v73 + 1) = 0;
        if (v74)
        {
          v75 = v74 + 2;
          do
          {
            v76 = __ldaxr(v75);
            v77 = v76 - 1;
          }
          while (__stlxr(v77, v75));
          if (!v77)
          {
            atomic_store(1u, v74 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v74 + 8))(v74);
          }
        }
        v78 = *(WTF::StringImpl **)v73;
        *(_QWORD *)v73 = 0;
        if (v78)
        {
          if (*(_DWORD *)v78 == 2)
            WTF::StringImpl::destroy(v78, v21);
          else
            *(_DWORD *)v78 -= 2;
        }
      }
    }
    WTF::fastFree(v70, v21);
  }
  v79 = (WTF *)*((_QWORD *)this + 26);
  if (v79)
  {
    v80 = *((unsigned int *)this + 54);
    if ((_DWORD)v80)
    {
      for (m = 0; m != v80; ++m)
      {
        v82 = (char *)v79 + 16 * m;
        v83 = (unsigned int *)*((_QWORD *)v82 + 1);
        *((_QWORD *)v82 + 1) = 0;
        if (v83)
        {
          v84 = v83 + 2;
          do
          {
            v85 = __ldaxr(v84);
            v86 = v85 - 1;
          }
          while (__stlxr(v86, v84));
          if (!v86)
          {
            atomic_store(1u, v83 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v83 + 8))(v83);
          }
        }
        v87 = *(WTF::StringImpl **)v82;
        *(_QWORD *)v82 = 0;
        if (v87)
        {
          if (*(_DWORD *)v87 == 2)
            WTF::StringImpl::destroy(v87, v21);
          else
            *(_DWORD *)v87 -= 2;
        }
      }
    }
    WTF::fastFree(v79, v21);
  }
  WebCore::MediaPlayerPrivateMediaStreamAVFObjC::CurrentFramePainter::~CurrentFramePainter((WebCore::MediaPlayerPrivateMediaStreamAVFObjC *)((char *)this + 184), v21);
  v89 = (unsigned int *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v89)
  {
    v90 = v89 + 2;
    do
    {
      v91 = __ldaxr(v90);
      v92 = v91 - 1;
    }
    while (__stlxr(v92, v90));
    if (!v92)
    {
      atomic_store(1u, v89 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v89 + 8))(v89);
    }
  }
  v93 = (WebCore::MediaStreamPrivate *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v93)
  {
    if (*((_DWORD *)v93 + 4) == 1)
    {
      WebCore::MediaStreamPrivate::~MediaStreamPrivate(v93, v88);
      WTF::fastFree(v112, v113);
    }
    else
    {
      --*((_DWORD *)v93 + 4);
    }
  }
  v94 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v94)
  {
    if (__ldaxr((unsigned __int8 *)v94))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v94))
    {
      goto LABEL_175;
    }
    MEMORY[0x19AEA534C](v94);
LABEL_175:
    v96 = *(_QWORD *)(v94 + 16) - 1;
    *(_QWORD *)(v94 + 16) = v96;
    if (!v96)
    {
      v97 = *(_QWORD *)(v94 + 8);
      v98 = __ldxr((unsigned __int8 *)v94);
      if (v98 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v94))
        {
          if (v97)
            goto LABEL_183;
LABEL_182:
          WTF::fastFree((WTF *)v94, v88);
          goto LABEL_183;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v94);
      if (v97)
        goto LABEL_183;
      goto LABEL_182;
    }
    v114 = __ldxr((unsigned __int8 *)v94);
    if (v114 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v94))
        goto LABEL_183;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v94);
  }
LABEL_183:
  v99 = *((_QWORD *)this + 13);
  if (v99)
  {
    *(_QWORD *)(v99 + 8) = 0;
    v100 = (unsigned int *)*((_QWORD *)this + 13);
    *((_QWORD *)this + 13) = 0;
    if (v100)
    {
      do
      {
        v101 = __ldaxr(v100);
        v102 = v101 - 1;
      }
      while (__stlxr(v102, v100));
      if (!v102)
      {
        atomic_store(1u, v100);
        WTF::fastFree((WTF *)v100, v88);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 13) = 0;
  }
  v103 = *((_QWORD *)this + 10);
  if (v103)
  {
    *(_QWORD *)(v103 + 8) = 0;
    v104 = (unsigned int *)*((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = 0;
    if (v104)
    {
      do
      {
        v105 = __ldaxr(v104);
        v106 = v105 - 1;
      }
      while (__stlxr(v106, v104));
      if (!v106)
      {
        atomic_store(1u, v104);
        WTF::fastFree((WTF *)v104, v88);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 10) = 0;
  }
  v107 = *((_QWORD *)this + 8);
  if (v107)
  {
    *(_QWORD *)(v107 + 8) = 0;
    v108 = (unsigned int *)*((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = 0;
    if (v108)
    {
      do
      {
        v109 = __ldaxr(v108);
        v110 = v109 - 1;
      }
      while (__stlxr(v110, v108));
      if (!v110)
      {
        atomic_store(1u, v108);
        WTF::fastFree((WTF *)v108, v88);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 8) = 0;
  }
  *(_QWORD *)this = off_1E340D798;
  v111 = (WTF *)*((_QWORD *)this + 1);
  if (v111)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v111, v88);
  }
}

{
  WTF *v1;
  void *v2;

  WebCore::MediaPlayerPrivateMediaStreamAVFObjC::~MediaPlayerPrivateMediaStreamAVFObjC(this);
  WTF::fastFree(v1, v2);
}

void sub_194796EA8(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  const void *v9;
  WTF *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  WTF *v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;
  void *v28;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  WebCore::MediaStreamPrivate *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  WTF *v51;
  uint64_t i;
  char *v53;
  unsigned int *v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  WTF::StringImpl *v58;
  uint64_t j;
  char *v60;
  unsigned int *v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int v64;
  WTF::StringImpl *v65;
  WTF *v66;
  void *v67;
  int v68;

  v4 = *(_QWORD *)(v2 + 480);
  *(_QWORD *)(v2 + 480) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *(unsigned int **)(v2 + 336);
  *(_QWORD *)(v2 + 336) = 0;
  if (v5)
  {
    v6 = v5 + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v5 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
    }
  }
  v9 = *(const void **)(v2 + 320);
  *(_QWORD *)(v2 + 320) = 0;
  if (v9)
    CFRelease(v9);
  v10 = *(WTF **)(v2 + 312);
  *(_QWORD *)(v2 + 312) = 0;
  if (v10)
  {
    v11 = (const void *)*((_QWORD *)v10 + 9);
    *((_QWORD *)v10 + 9) = 0;
    if (v11)
      CFRelease(v11);
    v12 = (const void *)*((_QWORD *)v10 + 8);
    *((_QWORD *)v10 + 8) = 0;
    if (v12)
      CFRelease(v12);
    v13 = (const void *)*((_QWORD *)v10 + 5);
    *((_QWORD *)v10 + 5) = 0;
    if (v13)
      CFRelease(v13);
    v14 = (const void *)*((_QWORD *)v10 + 4);
    *((_QWORD *)v10 + 4) = 0;
    if (v14)
      CFRelease(v14);
    v15 = (unsigned int *)*((_QWORD *)v10 + 2);
    *((_QWORD *)v10 + 2) = 0;
    if (v15)
    {
      v16 = v15 + 2;
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
      {
        atomic_store(1u, v15 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 8))(v15);
      }
    }
    WTF::fastFree(v10, a2);
  }
  v19 = *(unsigned int **)(v2 + 296);
  *(_QWORD *)(v2 + 296) = 0;
  if (v19)
  {
    v20 = v19 + 2;
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
    {
      atomic_store(1u, v19 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v19 + 8))(v19);
    }
  }
  v23 = *(_QWORD *)(v2 + 280);
  *(_QWORD *)(v2 + 280) = 0;
  if (v23)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SampleBufferDisplayLayer,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v23 + 8));
  v24 = *(WTF **)(v2 + 232);
  if (v24)
  {
    v25 = *(unsigned int *)(v2 + 240);
    if ((_DWORD)v25)
    {
      for (i = 0; i != v25; ++i)
      {
        v53 = (char *)v24 + 16 * i;
        v54 = (unsigned int *)*((_QWORD *)v53 + 1);
        *((_QWORD *)v53 + 1) = 0;
        if (v54)
        {
          v55 = v54 + 2;
          do
          {
            v56 = __ldaxr(v55);
            v57 = v56 - 1;
          }
          while (__stlxr(v57, v55));
          if (!v57)
          {
            atomic_store(1u, v54 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v54 + 8))(v54);
          }
        }
        v58 = *(WTF::StringImpl **)v53;
        *(_QWORD *)v53 = 0;
        if (v58)
        {
          if (*(_DWORD *)v58 == 2)
            WTF::StringImpl::destroy(v58, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v58 -= 2;
        }
      }
    }
    WTF::fastFree(v24, a2);
  }
  v26 = *(WTF **)(v2 + 208);
  if (v26)
  {
    v27 = *(unsigned int *)(v2 + 216);
    if ((_DWORD)v27)
    {
      for (j = 0; j != v27; ++j)
      {
        v60 = (char *)v26 + 16 * j;
        v61 = (unsigned int *)*((_QWORD *)v60 + 1);
        *((_QWORD *)v60 + 1) = 0;
        if (v61)
        {
          v62 = v61 + 2;
          do
          {
            v63 = __ldaxr(v62);
            v64 = v63 - 1;
          }
          while (__stlxr(v64, v62));
          if (!v64)
          {
            atomic_store(1u, v61 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v61 + 8))(v61);
          }
        }
        v65 = *(WTF::StringImpl **)v60;
        *(_QWORD *)v60 = 0;
        if (v65)
        {
          if (*(_DWORD *)v65 == 2)
            WTF::StringImpl::destroy(v65, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v65 -= 2;
        }
      }
    }
    WTF::fastFree(v26, a2);
  }
  WebCore::MediaPlayerPrivateMediaStreamAVFObjC::CurrentFramePainter::~CurrentFramePainter((WebCore::MediaPlayerPrivateMediaStreamAVFObjC::CurrentFramePainter *)(v2 + 184), a2);
  v29 = *(unsigned int **)(v2 + 144);
  *(_QWORD *)(v2 + 144) = 0;
  if (v29)
  {
    v30 = v29 + 2;
    do
    {
      v31 = __ldaxr(v30);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, v30));
    if (!v32)
    {
      atomic_store(1u, v29 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v29 + 8))(v29);
    }
  }
  v33 = *(WebCore::MediaStreamPrivate **)(v2 + 136);
  *(_QWORD *)(v2 + 136) = 0;
  if (v33)
  {
    if (*((_DWORD *)v33 + 4) == 1)
    {
      WebCore::MediaStreamPrivate::~MediaStreamPrivate(v33, v28);
      WTF::fastFree(v66, v67);
    }
    else
    {
      --*((_DWORD *)v33 + 4);
    }
  }
  v34 = *(_QWORD *)(v2 + 120);
  *(_QWORD *)(v2 + 120) = 0;
  if (!v34)
    goto LABEL_60;
  if (__ldaxr((unsigned __int8 *)v34))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v34))
  {
    goto LABEL_52;
  }
  MEMORY[0x19AEA534C](v34);
LABEL_52:
  v36 = *(_QWORD *)(v34 + 16) - 1;
  *(_QWORD *)(v34 + 16) = v36;
  if (!v36)
  {
    v37 = *(_QWORD *)(v34 + 8);
    v38 = __ldxr((unsigned __int8 *)v34);
    if (v38 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v34))
      {
LABEL_58:
        if (!v37)
          WTF::fastFree((WTF *)v34, v28);
        goto LABEL_60;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
    goto LABEL_58;
  }
  v68 = __ldxr((unsigned __int8 *)v34);
  if (v68 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v34))
      goto LABEL_60;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v34);
LABEL_60:
  v39 = *(_QWORD *)(v2 + 104);
  if (v39)
  {
    *(_QWORD *)(v39 + 8) = 0;
    v40 = *(unsigned int **)(v2 + 104);
    *(_QWORD *)(v2 + 104) = 0;
    if (v40)
    {
      do
      {
        v41 = __ldaxr(v40);
        v42 = v41 - 1;
      }
      while (__stlxr(v42, v40));
      if (!v42)
      {
        atomic_store(1u, v40);
        WTF::fastFree((WTF *)v40, v28);
      }
    }
  }
  else
  {
    *(_QWORD *)(v2 + 104) = 0;
  }
  v43 = *(_QWORD *)(v2 + 80);
  if (v43)
  {
    *(_QWORD *)(v43 + 8) = 0;
    v44 = *(unsigned int **)(v2 + 80);
    *(_QWORD *)(v2 + 80) = 0;
    if (v44)
    {
      do
      {
        v45 = __ldaxr(v44);
        v46 = v45 - 1;
      }
      while (__stlxr(v46, v44));
      if (!v46)
      {
        atomic_store(1u, v44);
        WTF::fastFree((WTF *)v44, v28);
      }
    }
  }
  else
  {
    *(_QWORD *)(v2 + 80) = 0;
  }
  v47 = *(_QWORD *)(v2 + 64);
  if (v47)
  {
    *(_QWORD *)(v47 + 8) = 0;
    v48 = *(unsigned int **)(v2 + 64);
    *(_QWORD *)(v2 + 64) = 0;
    if (v48)
    {
      do
      {
        v49 = __ldaxr(v48);
        v50 = v49 - 1;
      }
      while (__stlxr(v50, v48));
      if (!v50)
      {
        atomic_store(1u, v48);
        WTF::fastFree((WTF *)v48, v28);
      }
    }
  }
  else
  {
    *(_QWORD *)(v2 + 64) = 0;
  }
  *(_QWORD *)v2 = off_1E340D798;
  v51 = *(WTF **)(v2 + 8);
  if (v51)
  {
    *(_QWORD *)(v2 + 8) = 0;
    *(_DWORD *)(v2 + 16) = 0;
    WTF::fastFree(v51, v28);
  }
  _Unwind_Resume(a1);
}

void WebCore::MediaPlayerPrivateMediaStreamAVFObjC::destroyLayers(WebCore::MediaPlayerPrivateMediaStreamAVFObjC *this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  const void *v10;
  int v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;

  v2 = (unsigned __int8 *)this + 288;
  if (__ldaxr((unsigned __int8 *)this + 288))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 288);
LABEL_5:
  *((_BYTE *)this + 289) = 0;
  v4 = *((_QWORD *)this + 35);
  if (v4)
  {
    *((_QWORD *)this + 35) = 0;
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SampleBufferDisplayLayer,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v4 + 8));
  }
  v5 = (char *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v5 = off_1E3206508;
  *((_QWORD *)v5 + 1) = this;
  v12 = v5;
  WebCore::MediaPlayerPrivateMediaStreamAVFObjC::scheduleDeferredTask((uint64_t)this, (uint64_t *)&v12);
  if (v12)
    (*(void (**)(const char *))(*(_QWORD *)v12 + 8))(v12);
  v6 = *((_QWORD *)this + 39);
  v7 = *(_QWORD *)(v6 + 16);
  v8 = *(_QWORD *)(v6 + 24);
  v12 = "VideoLayerManagerObjC";
  v13 = 22;
  v14 = "didDestroyVideoLayer";
  v15 = v8;
  if (*(_BYTE *)(v7 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v12);
  WebCore::VideoLayerManagerObjC::setTextTrackRepresentationLayer(v6, 0);
  objc_msgSend(*(id *)(v6 + 72), "removeFromSuperlayer", v12, v13, v14, v15);
  v9 = *(const void **)(v6 + 32);
  *(_QWORD *)(v6 + 32) = 0;
  if (v9)
    CFRelease(v9);
  v10 = *(const void **)(v6 + 72);
  *(_QWORD *)(v6 + 72) = 0;
  if (v10)
    CFRelease(v10);
  v11 = __ldxr(v2);
  if (v11 != 1)
  {
    __clrex();
    goto LABEL_19;
  }
  if (__stlxr(0, v2))
LABEL_19:
    WTF::Lock::unlockSlow((WTF::Lock *)v2);
}

void sub_194797508(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  unsigned __int8 *v9;
  int v11;

  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  v11 = __ldxr(v9);
  if (v11 == 1)
  {
    if (!__stlxr(0, v9))
LABEL_8:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v9);
  goto LABEL_8;
}

void `non-virtual thunk to'WebCore::MediaPlayerPrivateMediaStreamAVFObjC::~MediaPlayerPrivateMediaStreamAVFObjC(WebCore::MediaPlayerPrivateMediaStreamAVFObjC *this)
{
  WebCore::MediaPlayerPrivateMediaStreamAVFObjC::~MediaPlayerPrivateMediaStreamAVFObjC((WebCore::MediaPlayerPrivateMediaStreamAVFObjC *)((char *)this - 56));
}

{
  WebCore::MediaPlayerPrivateMediaStreamAVFObjC::~MediaPlayerPrivateMediaStreamAVFObjC((WebCore::MediaPlayerPrivateMediaStreamAVFObjC *)((char *)this - 72));
}

{
  WebCore::MediaPlayerPrivateMediaStreamAVFObjC::~MediaPlayerPrivateMediaStreamAVFObjC((WebCore::MediaPlayerPrivateMediaStreamAVFObjC *)((char *)this - 88));
}

{
  WebCore::MediaPlayerPrivateMediaStreamAVFObjC::~MediaPlayerPrivateMediaStreamAVFObjC((WebCore::MediaPlayerPrivateMediaStreamAVFObjC *)((char *)this - 96));
}

{
  WebCore::MediaPlayerPrivateMediaStreamAVFObjC::~MediaPlayerPrivateMediaStreamAVFObjC((WebCore::MediaPlayerPrivateMediaStreamAVFObjC *)((char *)this - 112));
}

{
  WTF *v1;
  void *v2;

  WebCore::MediaPlayerPrivateMediaStreamAVFObjC::~MediaPlayerPrivateMediaStreamAVFObjC((WebCore::MediaPlayerPrivateMediaStreamAVFObjC *)((char *)this - 56));
  WTF::fastFree(v1, v2);
}

{
  WTF *v1;
  void *v2;

  WebCore::MediaPlayerPrivateMediaStreamAVFObjC::~MediaPlayerPrivateMediaStreamAVFObjC((WebCore::MediaPlayerPrivateMediaStreamAVFObjC *)((char *)this - 72));
  WTF::fastFree(v1, v2);
}

{
  WTF *v1;
  void *v2;

  WebCore::MediaPlayerPrivateMediaStreamAVFObjC::~MediaPlayerPrivateMediaStreamAVFObjC((WebCore::MediaPlayerPrivateMediaStreamAVFObjC *)((char *)this - 88));
  WTF::fastFree(v1, v2);
}

{
  WTF *v1;
  void *v2;

  WebCore::MediaPlayerPrivateMediaStreamAVFObjC::~MediaPlayerPrivateMediaStreamAVFObjC((WebCore::MediaPlayerPrivateMediaStreamAVFObjC *)((char *)this - 96));
  WTF::fastFree(v1, v2);
}

{
  WTF *v1;
  void *v2;

  WebCore::MediaPlayerPrivateMediaStreamAVFObjC::~MediaPlayerPrivateMediaStreamAVFObjC((WebCore::MediaPlayerPrivateMediaStreamAVFObjC *)((char *)this - 112));
  WTF::fastFree(v1, v2);
}

void WebCore::MediaPlayerPrivateMediaStreamAVFObjC::registerMediaEngine(void (*a1)(_QWORD *))
{
  PAL *v2;
  WebCore::MediaSessionManagerCocoa *v3;
  uint64_t v4;
  _QWORD block[4];
  char v6;

  v2 = (PAL *)PAL::AVFoundationLibrary((PAL *)1);
  if (v2)
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
    block[3] = &__block_descriptor_tmp_1;
    v6 = 1;
    if (PAL::CoreMediaLibrary(BOOL)::once != -1)
      dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
    if (PAL::CoreMediaLibrary(BOOL)::frameworkLibrary && PAL::getAVSampleBufferDisplayLayerClass(v2))
    {
      v3 = (WebCore::MediaSessionManagerCocoa *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v3 = off_1E3206248;
      *((_QWORD *)v3 + 1) = 0;
      WebCore::MediaSessionManagerCocoa::ensureCodecsRegistered(v3);
      block[0] = v3;
      a1(block);
      v4 = block[0];
      block[0] = 0;
      if (v4)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    }
  }
}

void sub_1947976F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::MediaPlayerPrivateMediaStreamAVFObjC::videoFrameAvailable(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  __int128 v6;
  double v7;
  uint64_t result;
  unsigned __int8 *v9;
  int v10;
  int v11;
  char v12;
  uint64_t v13;
  int v14;
  __int128 v15[3];
  uint64_t v16;

  WTF::MonotonicTime::now((WTF::MonotonicTime *)a1);
  v6 = *(_OWORD *)(a3 + 16);
  v15[0] = *(_OWORD *)a3;
  v15[1] = v6;
  v15[2] = *(_OWORD *)(a3 + 32);
  v16 = *(_QWORD *)(a3 + 48);
  result = WebCore::MediaPlayerPrivateMediaStreamAVFObjC::processNewVideoFrame(a1, a2, v15, v7);
  if (*(_BYTE *)(a1 + 348) && *(_BYTE *)(a1 + 349))
  {
    v9 = (unsigned __int8 *)(a1 + 288);
    do
    {
      while (1)
      {
        v10 = *v9;
        if ((v10 & 1) != 0)
          return result;
        v11 = __ldaxr(v9);
        if (v11 == v10)
          break;
        __clrex();
      }
    }
    while (__stxr(v10 | 1, v9));
    if (*(_BYTE *)(a1 + 289))
    {
      result = *(_QWORD *)(a1 + 280);
      if (result)
      {
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
        if ((result & 1) == 0)
        {
          if (*(_BYTE *)(a1 + 352))
          {
            v12 = 0;
            v13 = 12;
          }
          else
          {
            if (*(_BYTE *)(a1 + 353))
              goto LABEL_16;
            v12 = 1;
            v13 = 11;
          }
          *(_BYTE *)(a1 + 353) = v12;
          result = (*(uint64_t (**)(void))(**(_QWORD **)(a1 + 280) + 8 * v13))();
        }
      }
    }
LABEL_16:
    v14 = __ldxr(v9);
    if (v14 == 1)
    {
      if (!__stlxr(0, v9))
        return result;
    }
    else
    {
      __clrex();
    }
    return WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 288));
  }
  return result;
}

void sub_19479789C(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

uint64_t WebCore::MediaPlayerPrivateMediaStreamAVFObjC::processNewVideoFrame(uint64_t a1, unsigned __int16 *a2, __int128 *a3, double a4)
{
  uint64_t result;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v19;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  int v34;
  uint64_t ready;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  float v39;
  float v40;
  int v41;
  float v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  float v46;
  float v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;

  result = WTF::isMainThread((WTF *)a1);
  if ((result & 1) == 0)
  {
    v19 = (unsigned __int8 *)(a1 + 328);
    if (__ldaxr((unsigned __int8 *)(a1 + 328)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v19))
    {
LABEL_19:
      v21 = (unsigned int *)(a2 + 4);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 + 1, v21));
      v23 = *(unsigned int **)(a1 + 336);
      *(_QWORD *)(a1 + 336) = a2;
      if (v23)
      {
        v24 = v23 + 2;
        do
        {
          v25 = __ldaxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
        {
          atomic_store(1u, v23 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v23 + 8))(v23);
        }
      }
      v27 = __ldxr(v19);
      if (v27 == 1)
      {
        if (!__stlxr(0, v19))
        {
LABEL_31:
          v28 = a3[1];
          v55 = *a3;
          v56 = v28;
          v57 = a3[2];
          v58 = *((_QWORD *)a3 + 6);
          v29 = WTF::fastMalloc((WTF *)0x50);
          *(_QWORD *)v29 = off_1E32063A0;
          *(_QWORD *)(v29 + 8) = a1;
          *(_OWORD *)(v29 + 16) = v55;
          *(_OWORD *)(v29 + 32) = v56;
          *(_OWORD *)(v29 + 48) = v57;
          *(_QWORD *)(v29 + 64) = v58;
          *(double *)(v29 + 72) = a4;
          v59 = v29;
          WebCore::MediaPlayerPrivateMediaStreamAVFObjC::scheduleDeferredTask(a1, &v59);
          result = v59;
          if (v59)
            return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
          return result;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 328));
      goto LABEL_31;
    }
    MEMORY[0x19AEA534C](a1 + 328);
    goto LABEL_19;
  }
  if (!*(_QWORD *)(a1 + 144))
    return result;
  if (!*(_QWORD *)(a1 + 192) || *(_DWORD *)(a1 + 272) != 3)
  {
    v10 = (unsigned int *)(a2 + 4);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
    v12 = *(unsigned int **)(a1 + 192);
    *(_QWORD *)(a1 + 192) = a2;
    if (v12)
    {
      v13 = v12 + 2;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        atomic_store(1u, v12 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 8))(v12);
      }
    }
    v16 = *(_QWORD *)(a1 + 184);
    *(_QWORD *)(a1 + 184) = 0;
    if (!v16)
      goto LABEL_47;
    v17 = *(_QWORD *)(v16 + 8);
    if (__ldaxr((unsigned __int8 *)v17))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v17))
    {
      goto LABEL_35;
    }
    MEMORY[0x19AEA534C](v17);
LABEL_35:
    v30 = *(_QWORD *)(v17 + 8);
    v31 = v30 - 1;
    *(_QWORD *)(v17 + 8) = v30 - 1;
    if (v30 == 1)
    {
      v54 = *(_QWORD *)(v17 + 16);
      v32 = *(_QWORD *)(v17 + 24);
      *(_QWORD *)(v17 + 24) = 0;
      v33 = v54 != 0;
    }
    else
    {
      v32 = 0;
      v33 = 1;
    }
    v34 = __ldxr((unsigned __int8 *)v17);
    if (v34 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v17))
      {
        if (!v31)
          goto LABEL_43;
        goto LABEL_47;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v17);
    if (!v31)
    {
LABEL_43:
      if (v32)
        (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
      if (!v33)
        WTF::fastFree((WTF *)v17, v9);
    }
LABEL_47:
    if (*(unsigned __int8 *)(a1 + 257) <= 3u)
    {
      ready = WebCore::MediaPlayerPrivateMediaStreamAVFObjC::currentReadyState((WebCore::MediaPlayerPrivateMediaStreamAVFObjC *)a1);
      if ((_DWORD)ready != *(unsigned __int8 *)(a1 + 257))
      {
        v36 = (void *)ready;
        v37 = *(_QWORD *)(a1 + 296);
        v38 = *(_QWORD *)(a1 + 304);
        *(_QWORD *)&v55 = "MediaPlayerPrivateMediaStreamAVFObjC";
        *((_QWORD *)&v55 + 1) = 37;
        *(_QWORD *)&v56 = "updateReadyState";
        *((_QWORD *)&v56 + 1) = v38;
        LODWORD(v59) = ready;
        if (*(_BYTE *)(v37 + 12))
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],int>(0, (WTF::Logger::LogSiteIdentifier *)&v55, (unsigned int *)&v59);
        WebCore::MediaPlayerPrivateMediaStreamAVFObjC::setReadyState((unsigned __int8 *)a1, v36);
      }
    }
  }
  *(double *)(a1 + 376) = a4;
  result = (*(uint64_t (**)(unsigned __int16 *))(*(_QWORD *)a2 + 16))(a2);
  v41 = a2[17];
  if (v41 == 270 || v41 == 90)
  {
    v42 = v40;
  }
  else
  {
    v42 = v39;
    v39 = v40;
  }
  v43 = *a3;
  v44 = a3[1];
  v45 = a3[2];
  *(_QWORD *)(a1 + 432) = *((_QWORD *)a3 + 6);
  *(_OWORD *)(a1 + 400) = v44;
  *(_OWORD *)(a1 + 416) = v45;
  *(_OWORD *)(a1 + 384) = v43;
  ++*(_QWORD *)(a1 + 360);
  v46 = *(float *)(a1 + 260);
  if (v46 > 0.0)
  {
    v47 = *(float *)(a1 + 264);
    if (v47 > 0.0 && (v42 != v46 || v39 != v47))
    {
      *(float *)(a1 + 260) = v42;
      *(float *)(a1 + 264) = v39;
      v49 = WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v49 = off_1E3206530;
      *(_QWORD *)(v49 + 8) = a1;
      *(_BYTE *)(v49 + 16) = 1;
      *(_QWORD *)&v55 = v49;
      WebCore::MediaPlayerPrivateMediaStreamAVFObjC::scheduleDeferredTask(a1, (uint64_t *)&v55);
      result = v55;
      if ((_QWORD)v55)
        result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v55 + 8))(v55);
    }
  }
  if (*(_DWORD *)(a1 + 272) == 4 || *(_BYTE *)(a1 + 351))
  {
    if (*(_BYTE *)(a1 + 347) || (*(_BYTE *)(a1 + 347) = 1, (v50 = *(_QWORD *)(a1 + 120)) == 0))
    {
LABEL_67:
      if (*(_BYTE *)(a1 + 351))
      {
        *(_BYTE *)(a1 + 351) = 0;
        return WebCore::MediaPlayerPrivateMediaStreamAVFObjC::updateDisplayMode(a1);
      }
      return result;
    }
    v51 = *(_QWORD *)(a1 + 128);
    if (__ldaxr((unsigned __int8 *)v50))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v50))
    {
      goto LABEL_75;
    }
    result = MEMORY[0x19AEA534C](v50);
LABEL_75:
    if (*(_QWORD *)(v50 + 24))
      ++*(_QWORD *)(v50 + 8);
    else
      v51 = 0;
    v53 = __ldxr((unsigned __int8 *)v50);
    if (v53 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v50))
      {
LABEL_83:
        if (v51)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v51 + 8) + 8) + 120))(*(_QWORD *)(*(_QWORD *)(v51 + 8) + 8));
          result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v51);
        }
        goto LABEL_67;
      }
    }
    else
    {
      __clrex();
    }
    result = WTF::Lock::unlockSlow((WTF::Lock *)v50);
    goto LABEL_83;
  }
  return result;
}

void sub_194797D58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  _Unwind_Resume(exception_object);
}

uint64_t `non-virtual thunk to'WebCore::MediaPlayerPrivateMediaStreamAVFObjC::videoFrameAvailable(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  return WebCore::MediaPlayerPrivateMediaStreamAVFObjC::videoFrameAvailable(a1 - 88, a2, a3);
}

uint64_t WebCore::MediaPlayerPrivateMediaStreamAVFObjC::reenqueueCurrentVideoFrameIfNeeded(uint64_t this)
{
  uint64_t v1;
  unsigned __int8 *v2;
  int v3;
  int v4;
  unsigned __int8 *v5;
  int v6;
  int v7;
  char v8;
  uint64_t v9;
  int v10;
  int v11;

  v1 = this;
  v2 = (unsigned __int8 *)(this + 328);
  do
  {
    while (1)
    {
      v3 = *v2;
      if ((v3 & 1) != 0)
        return this;
      v4 = __ldaxr(v2);
      if (v4 == v3)
        break;
      __clrex();
    }
  }
  while (__stxr(v3 | 1, v2));
  if ((*(_QWORD *)(this + 336) || *(_QWORD *)(this + 192)) && *(_BYTE *)(this + 348) && *(_BYTE *)(this + 349))
  {
    v5 = (unsigned __int8 *)(this + 288);
    do
    {
      while (1)
      {
        v6 = *v5;
        if ((v6 & 1) != 0)
          goto LABEL_29;
        v7 = __ldaxr(v5);
        if (v7 == v6)
          break;
        __clrex();
      }
    }
    while (__stxr(v6 | 1, v5));
    if (*(_BYTE *)(this + 289))
    {
      this = *(_QWORD *)(this + 280);
      if (this)
      {
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 32))(this);
        if ((this & 1) == 0)
        {
          if (*(_BYTE *)(v1 + 352))
          {
            v8 = 0;
            v9 = 12;
          }
          else
          {
            if (*(_BYTE *)(v1 + 353))
              goto LABEL_24;
            v8 = 1;
            v9 = 11;
          }
          *(_BYTE *)(v1 + 353) = v8;
          this = (*(uint64_t (**)(void))(**(_QWORD **)(v1 + 280) + 8 * v9))();
        }
      }
    }
LABEL_24:
    v10 = __ldxr(v5);
    if (v10 == 1)
    {
      if (!__stlxr(0, v5))
        goto LABEL_29;
    }
    else
    {
      __clrex();
    }
    this = WTF::Lock::unlockSlow((WTF::Lock *)(v1 + 288));
  }
LABEL_29:
  v11 = __ldxr(v2);
  if (v11 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  if (__stlxr(0, v2))
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return this;
}

void sub_194797EE4(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  int v4;
  int v5;

  v4 = __ldxr(v2);
  if (v4 == 1)
  {
    if (!__stlxr(0, v2))
    {
LABEL_6:
      v5 = __ldxr(v1);
      if (v5 == 1)
      {
        if (!__stlxr(0, v1))
LABEL_11:
          _Unwind_Resume(exception_object);
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v1);
      goto LABEL_11;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
  goto LABEL_6;
}

uint64_t WebCore::MediaPlayerPrivateMediaStreamAVFObjC::scheduleDeferredTask(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v5;
  void *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t result;
  _QWORD *v14;

  v3 = *(_QWORD *)(a1 + 80);
  if (v3)
    goto LABEL_12;
  v5 = a1 + 72;
  v3 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v3 = 1;
  *(_QWORD *)(v3 + 8) = v5;
  v7 = *(unsigned int **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v3;
  if (!v7)
    goto LABEL_12;
  do
  {
    v8 = __ldaxr(v7);
    v9 = v8 - 1;
  }
  while (__stlxr(v9, v7));
  if (!v9)
  {
    atomic_store(1u, v7);
    WTF::fastFree((WTF *)v7, v6);
  }
  v3 = *(_QWORD *)(a1 + 80);
  if (v3)
  {
LABEL_12:
    do
      v10 = __ldaxr((unsigned int *)v3);
    while (__stlxr(v10 + 1, (unsigned int *)v3));
  }
  v11 = *a2;
  *a2 = 0;
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v12 = &off_1E32065D0;
  v12[1] = v3;
  v12[2] = v11;
  v14 = v12;
  WTF::callOnMainThread();
  result = (uint64_t)v14;
  if (v14)
    return (*(uint64_t (**)(_QWORD *))(*v14 + 8))(v14);
  return result;
}

void sub_194798018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::MediaPlayerPrivateMediaStreamAVFObjC::updateDisplayMode(uint64_t this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  _BOOL8 v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unsigned int v15;
  _QWORD v16[4];

  v1 = this;
  if (*(float *)(this + 260) <= 0.0
    || *(float *)(this + 264) <= 0.0
    || !*(_QWORD *)(this + 136)
    || !*(_BYTE *)(this + 257))
  {
    v2 = 0;
    goto LABEL_12;
  }
  this = WebCore::MediaPlayerPrivateMediaStreamAVFObjC::activeVideoTrack((WebCore::MediaPlayerPrivateMediaStreamAVFObjC *)this);
  if (this && (!*(_BYTE *)(this + 73) || *(_BYTE *)(this + 97) || *(_BYTE *)(this + 74)))
    goto LABEL_30;
  if (*(_BYTE *)(v1 + 351))
  {
    v2 = 2;
    goto LABEL_12;
  }
  v8 = *(_DWORD *)(v1 + 276);
  if (!v8)
    goto LABEL_30;
  if (v8 == 1)
  {
    if (*(_BYTE *)(v1 + 346))
    {
LABEL_30:
      v2 = 1;
      goto LABEL_12;
    }
    v9 = *(_QWORD *)(v1 + 136);
    if (!*(_DWORD *)(v9 + 76))
      goto LABEL_49;
    v10 = *(_QWORD *)(v9 + 64);
    v11 = *(unsigned int *)(v9 + 72);
    if ((_DWORD)v11)
    {
      v12 = 16 * v11;
      v13 = *(_QWORD **)(v9 + 64);
      v2 = 3;
      while (!*v13)
      {
        v13 += 2;
        v12 -= 16;
        if (!v12)
          goto LABEL_12;
      }
    }
    else
    {
      v13 = *(_QWORD **)(v9 + 64);
    }
    v14 = (_QWORD *)(v10 + 16 * v11);
    if (v13 == v14)
    {
LABEL_49:
      v2 = 3;
    }
    else
    {
      while (!*(_BYTE *)(v13[1] + 96))
      {
        v13 += 2;
        if (v13 == v14)
          goto LABEL_49;
        while (!*v13)
        {
          v13 += 2;
          v2 = 3;
          if (v13 == v14)
            goto LABEL_12;
        }
        v2 = 3;
        if (v13 == v14)
          goto LABEL_12;
      }
      v2 = 4;
    }
  }
  else if (*(_BYTE *)(v1 + 346))
  {
    v2 = 1;
  }
  else
  {
    v2 = 3;
  }
LABEL_12:
  if (v2 != *(_DWORD *)(v1 + 272))
  {
    v3 = *(_QWORD *)(v1 + 296);
    v4 = *(_QWORD *)(v1 + 304);
    v16[0] = "MediaPlayerPrivateMediaStreamAVFObjC";
    v16[1] = 37;
    v16[2] = "updateDisplayMode";
    v16[3] = v4;
    v15 = v2;
    if (*(_BYTE *)(v3 + 12))
    {
      if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
        this = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],int>(3u, (WTF::Logger::LogSiteIdentifier *)v16, &v15);
    }
    *(_DWORD *)(v1 + 272) = v2;
    v6 = *(_QWORD *)(v1 + 280);
    if (v6)
    {
      v7 = (!WebCore::MediaPlayerPrivateMediaStreamAVFObjC::activeVideoTrack((WebCore::MediaPlayerPrivateMediaStreamAVFObjC *)v1)
         || *(_BYTE *)(v1 + 351))
        && *(_DWORD *)(v1 + 272) != 1;
      return (*(uint64_t (**)(uint64_t, BOOL, _BOOL8))(*(_QWORD *)v6 + 40))(v6, v2 < 3, v7);
    }
  }
  return this;
}

uint64_t WebCore::MediaPlayerPrivateMediaStreamAVFObjC::audioSourceProvider(WebCore::MediaPlayerPrivateMediaStreamAVFObjC *this)
{
  return 0;
}

void WebCore::MediaPlayerPrivateMediaStreamAVFObjC::sampleBufferDisplayLayerStatusDidFail(WebCore::MediaPlayerPrivateMediaStreamAVFObjC *this)
{
  WebCore::MediaPlayerPrivateMediaStreamAVFObjC::destroyLayers(this);
  WebCore::MediaPlayerPrivateMediaStreamAVFObjC::updateLayersAsNeeded(this);
}

void WebCore::MediaPlayerPrivateMediaStreamAVFObjC::updateLayersAsNeeded(WebCore::MediaPlayerPrivateMediaStreamAVFObjC *this)
{
  uint64_t v2;
  uint64_t v3;
  int v5;
  uint64_t active;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  float v12;
  float v13;
  int v14;
  int v15;
  uint64_t v16;
  PAL *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL8 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  int v35;
  _QWORD *v36;
  uint64_t v37;
  __int16 v38;
  const void *v39;
  uint64_t v40[4];

  v2 = *((_QWORD *)this + 15);
  if (!v2)
  {
    v3 = 0;
    goto LABEL_23;
  }
  v3 = *((_QWORD *)this + 16);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEA534C](v2);
LABEL_7:
  if (*(_QWORD *)(v2 + 24))
    ++*(_QWORD *)(v2 + 8);
  else
    v3 = 0;
  v5 = __ldxr((unsigned __int8 *)v2);
  if (v5 != 1)
  {
    __clrex();
LABEL_15:
    WTF::Lock::unlockSlow((WTF::Lock *)v2);
    if (!v3)
      goto LABEL_23;
LABEL_16:
    if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v3 + 8) + 8) + 136))(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 8)))
      goto LABEL_23;
    if (*((_QWORD *)this + 35))
      goto LABEL_24;
    active = WebCore::MediaPlayerPrivateMediaStreamAVFObjC::activeVideoTrack(this);
    v7 = active;
    if (!active)
      goto LABEL_24;
    if (!*(_BYTE *)(active + 73))
      goto LABEL_24;
    v8 = *((_QWORD *)this + 15);
    if (!v8)
      goto LABEL_24;
    v9 = *((_QWORD *)this + 16);
    if (__ldaxr((unsigned __int8 *)v8))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v8))
    {
      goto LABEL_27;
    }
    MEMORY[0x19AEA534C](v8);
LABEL_27:
    if (*(_QWORD *)(v8 + 24))
      ++*(_QWORD *)(v8 + 8);
    else
      v9 = 0;
    v11 = __ldxr((unsigned __int8 *)v8);
    if (v11 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v8))
      {
LABEL_35:
        if (!v9)
          goto LABEL_24;
        v12 = (*(float (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v9 + 8) + 8) + 624))(*(_QWORD *)(*(_QWORD *)(v9 + 8) + 8));
        if (v12 > -2147500000.0)
          v14 = (int)v12;
        else
          v14 = 0x80000000;
        if (v12 < 2147500000.0)
          v15 = v14;
        else
          v15 = 0x7FFFFFFF;
        if (v13 >= 2147500000.0)
        {
          v16 = 0x7FFFFFFFLL;
        }
        else
        {
          if (v13 <= -2147500000.0)
          {
LABEL_47:
            v15 = *(_DWORD *)(v9 + 200);
            v16 = *(unsigned int *)(v9 + 204);
LABEL_48:
            if (v15 < 1 || (int)v16 < 1 || *((float *)this + 65) <= 0.0 || *((float *)this + 66) <= 0.0)
              goto LABEL_92;
            *((_BYTE *)this + 289) = 0;
            v17 = (WebCore::MediaPlayerPrivateMediaStreamAVFObjC *)((char *)this + 96);
            if (WebCore::SampleBufferDisplayLayer::m_layerCreator)
              WebCore::SampleBufferDisplayLayer::m_layerCreator(v40, v17);
            else
              WebCore::LocalSampleBufferDisplayLayer::create(v17, v40, v38, v39);
            v18 = v40[0];
            v40[0] = 0;
            v19 = *((_QWORD *)this + 35);
            *((_QWORD *)this + 35) = v18;
            if (v19)
            {
              WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SampleBufferDisplayLayer,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v19 + 8));
              v20 = v40[0];
              v40[0] = 0;
              if (v20)
                WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SampleBufferDisplayLayer,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v20 + 8));
              v18 = *((_QWORD *)this + 35);
            }
            if (!v18)
            {
              v23 = *((_QWORD *)this + 37);
              v24 = *((_QWORD *)this + 38);
              v40[0] = (uint64_t)"MediaPlayerPrivateMediaStreamAVFObjC";
              v40[1] = 37;
              v40[2] = (uint64_t)"ensureLayers";
              v40[3] = v24;
              if (!*(_BYTE *)(v23 + 12))
                goto LABEL_92;
              WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogMedia, 1u, (WTF::Logger::LogSiteIdentifier *)v40, "Creating the SampleBufferDisplayLayer failed.");
              v18 = *((_QWORD *)this + 35);
              if (!v18)
                goto LABEL_92;
            }
            if (*((_DWORD *)this + 69) != 1)
              (*(void (**)(uint64_t))(*(_QWORD *)v18 + 80))(v18);
            if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v7 + 40) + 8) + 200))(*(_QWORD *)(*(_QWORD *)(v7 + 40) + 8)))
              (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 35) + 128))(*((_QWORD *)this + 35), 1);
            v21 = *((_QWORD *)this + 35);
            v22 = (!WebCore::MediaPlayerPrivateMediaStreamAVFObjC::activeVideoTrack(this) || *((_BYTE *)this + 351))
               && *((_DWORD *)this + 68) != 1;
            v25 = *((_QWORD *)this + 10);
            if (v25)
              goto LABEL_99;
            v25 = WTF::fastCompactMalloc((WTF *)0x10);
            *(_DWORD *)v25 = 1;
            *(_QWORD *)(v25 + 8) = (char *)this + 72;
            v27 = (unsigned int *)*((_QWORD *)this + 10);
            *((_QWORD *)this + 10) = v25;
            if (!v27)
              goto LABEL_99;
            do
            {
              v28 = __ldaxr(v27);
              v29 = v28 - 1;
            }
            while (__stlxr(v29, v27));
            if (!v29)
            {
              atomic_store(1u, v27);
              WTF::fastFree((WTF *)v27, v26);
            }
            v25 = *((_QWORD *)this + 10);
            if (v25)
            {
LABEL_99:
              do
                v30 = __ldaxr((unsigned int *)v25);
              while (__stlxr(v30 + 1, (unsigned int *)v25));
            }
            v31 = *((_QWORD *)this + 35);
            v32 = *(_QWORD *)(v31 + 8);
            if (!v32)
            {
              v34 = 0;
              goto LABEL_90;
            }
            if (__ldaxr((unsigned __int8 *)v32))
            {
              __clrex();
            }
            else if (!__stxr(1u, (unsigned __int8 *)v32))
            {
              goto LABEL_83;
            }
            MEMORY[0x19AEA534C](v32);
LABEL_83:
            if (*(_QWORD *)(v32 + 24))
            {
              ++*(_QWORD *)(v32 + 16);
              v34 = v32;
            }
            else
            {
              v34 = 0;
            }
            v35 = __ldxr((unsigned __int8 *)v32);
            if (v35 == 1)
            {
              if (!__stlxr(0, (unsigned __int8 *)v32))
              {
LABEL_90:
                v36 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
                *v36 = &off_1E32063C8;
                v36[1] = v25;
                v36[2] = v34;
                v36[3] = v31;
                v36[4] = v15 | (unint64_t)(v16 << 32);
                v40[0] = (uint64_t)v36;
                (*(void (**)(uint64_t, _BOOL8))(*(_QWORD *)v21 + 16))(v21, v22);
                v37 = v40[0];
                v40[0] = 0;
                if (v37)
                  (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
LABEL_92:
                WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v9);
                goto LABEL_24;
              }
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)v32);
            goto LABEL_90;
          }
          v16 = (int)v13;
        }
        if (v15 >= 1 && (int)v16 > 0)
          goto LABEL_48;
        goto LABEL_47;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v8);
    goto LABEL_35;
  }
  if (__stlxr(0, (unsigned __int8 *)v2))
    goto LABEL_15;
  if (v3)
    goto LABEL_16;
LABEL_23:
  WebCore::MediaPlayerPrivateMediaStreamAVFObjC::destroyLayers(this);
  if (v3)
LABEL_24:
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v3);
}

void sub_19479877C(_Unwind_Exception *a1)
{
  unsigned __int8 **v1;
  unsigned __int8 **v2;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v2);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v1);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'WebCore::MediaPlayerPrivateMediaStreamAVFObjC::sampleBufferDisplayLayerStatusDidFail(WebCore::MediaPlayerPrivateMediaStreamAVFObjC *this)
{
  WebCore::MediaPlayerPrivateMediaStreamAVFObjC *v1;

  v1 = (WebCore::MediaPlayerPrivateMediaStreamAVFObjC *)((char *)this - 96);
  WebCore::MediaPlayerPrivateMediaStreamAVFObjC::destroyLayers((WebCore::MediaPlayerPrivateMediaStreamAVFObjC *)((char *)this - 96));
  WebCore::MediaPlayerPrivateMediaStreamAVFObjC::updateLayersAsNeeded(v1);
}

uint64_t WebCore::MediaPlayerPrivateMediaStreamAVFObjC::canShowWhileLocked(WebCore::MediaPlayerPrivateMediaStreamAVFObjC *this)
{
  uint64_t v1;
  uint64_t v2;
  int v4;
  uint64_t v5;

  v1 = *((_QWORD *)this + 15);
  if (!v1)
    return 0;
  v2 = *((_QWORD *)this + 16);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v1))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v1);
LABEL_6:
  if (*(_QWORD *)(v1 + 24))
    ++*(_QWORD *)(v1 + 8);
  else
    v2 = 0;
  v4 = __ldxr((unsigned __int8 *)v1);
  if (v4 != 1)
  {
    __clrex();
LABEL_14:
    WTF::Lock::unlockSlow((WTF::Lock *)v1);
    if (v2)
      goto LABEL_12;
    return 0;
  }
  if (__stlxr(0, (unsigned __int8 *)v1))
    goto LABEL_14;
  if (v2)
  {
LABEL_12:
    v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v2 + 8) + 8) + 680))(*(_QWORD *)(*(_QWORD *)(v2 + 8) + 8));
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v2);
    return v5;
  }
  return 0;
}

uint64_t `non-virtual thunk to'WebCore::MediaPlayerPrivateMediaStreamAVFObjC::canShowWhileLocked(WebCore::MediaPlayerPrivateMediaStreamAVFObjC *this)
{
  uint64_t v1;
  uint64_t v2;
  int v4;
  uint64_t v5;

  v1 = *((_QWORD *)this + 3);
  if (!v1)
    return 0;
  v2 = *((_QWORD *)this + 4);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v1))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v1);
LABEL_6:
  if (*(_QWORD *)(v1 + 24))
    ++*(_QWORD *)(v1 + 8);
  else
    v2 = 0;
  v4 = __ldxr((unsigned __int8 *)v1);
  if (v4 != 1)
  {
    __clrex();
LABEL_14:
    WTF::Lock::unlockSlow((WTF::Lock *)v1);
    if (v2)
      goto LABEL_12;
    return 0;
  }
  if (__stlxr(0, (unsigned __int8 *)v1))
    goto LABEL_14;
  if (v2)
  {
LABEL_12:
    v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v2 + 8) + 8) + 680))(*(_QWORD *)(*(_QWORD *)(v2 + 8) + 8));
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v2);
    return v5;
  }
  return 0;
}

uint64_t WebCore::MediaPlayerPrivateMediaStreamAVFObjC::applicationDidBecomeActive(WebCore::MediaPlayerPrivateMediaStreamAVFObjC *this)
{
  uint64_t result;
  uint64_t v3;
  unsigned __int8 *v4;
  int v5;
  int v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  int v10;

  result = *((_QWORD *)this + 35);
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
    if ((_DWORD)result)
    {
      v3 = *((_QWORD *)this + 35);
      if (v3)
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 56))(v3);
      if (*((_QWORD *)this + 24) && *((_BYTE *)this + 348) && *((_BYTE *)this + 349))
      {
        v4 = (unsigned __int8 *)this + 288;
        do
        {
          while (1)
          {
            v5 = *v4;
            if ((v5 & 1) != 0)
              return WebCore::MediaPlayerPrivateMediaStreamAVFObjC::updateDisplayMode((uint64_t)this);
            v6 = __ldaxr(v4);
            if (v6 == v5)
              break;
            __clrex();
          }
        }
        while (__stxr(v5 | 1, v4));
        if (*((_BYTE *)this + 289))
        {
          v7 = *((_QWORD *)this + 35);
          if (v7)
          {
            if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7) & 1) == 0)
            {
              if (*((_BYTE *)this + 352))
              {
                v8 = 0;
                v9 = 12;
              }
              else
              {
                if (*((_BYTE *)this + 353))
                  goto LABEL_22;
                v8 = 1;
                v9 = 11;
              }
              *((_BYTE *)this + 353) = v8;
              (*(void (**)(void))(**((_QWORD **)this + 35) + 8 * v9))();
            }
          }
        }
LABEL_22:
        v10 = __ldxr(v4);
        if (v10 == 1)
        {
          if (!__stlxr(0, v4))
            return WebCore::MediaPlayerPrivateMediaStreamAVFObjC::updateDisplayMode((uint64_t)this);
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WebCore::MediaPlayerPrivateMediaStreamAVFObjC *)((char *)this + 288));
      }
      return WebCore::MediaPlayerPrivateMediaStreamAVFObjC::updateDisplayMode((uint64_t)this);
    }
  }
  return result;
}

void sub_194798B88(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

uint64_t WebCore::MediaPlayerPrivateMediaStreamAVFObjC::activeVideoTrack(WebCore::MediaPlayerPrivateMediaStreamAVFObjC *this)
{
  uint64_t v1;
  uint64_t v3;
  int v5;
  uint64_t v6;

  v1 = *((_QWORD *)this + 15);
  if (!v1)
    return 0;
  v3 = *((_QWORD *)this + 16);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v1))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v1);
LABEL_6:
  if (*(_QWORD *)(v1 + 24))
    ++*(_QWORD *)(v1 + 8);
  else
    v3 = 0;
  v5 = __ldxr((unsigned __int8 *)v1);
  if (v5 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v1))
      goto LABEL_14;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
LABEL_14:
  if (!*((_QWORD *)this + 17))
  {
    v6 = 0;
    if (!v3)
      return v6;
    goto LABEL_22;
  }
  if (v3)
  {
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v3 + 8) + 8) + 264))(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 8)))
      v6 = *(_QWORD *)(*((_QWORD *)this + 17) + 56);
    else
      v6 = 0;
LABEL_22:
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v3);
    return v6;
  }
  return 0;
}

void sub_194798CA0(_Unwind_Exception *a1)
{
  unsigned __int8 **v1;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v1);
  _Unwind_Resume(a1);
}

void WebCore::MediaPlayerPrivateMediaStreamAVFObjC::setPresentationSize(WebCore::MediaPlayerPrivateMediaStreamAVFObjC *this, const WebCore::IntSize *a2)
{
  int v2;
  int v3;
  BOOL v4;
  BOOL v5;
  BOOL v6;
  BOOL v7;

  v2 = *(_DWORD *)a2;
  v3 = *((_DWORD *)a2 + 1);
  if (*((_QWORD *)this + 35))
  {
    v5 = 0;
    v4 = 1;
  }
  else
  {
    v5 = __OFSUB__(v2, 1);
    v4 = v2 - 1 < 0;
  }
  if (v4 != v5)
  {
    v7 = 0;
    v6 = 1;
  }
  else
  {
    v7 = __OFSUB__(v3, 1);
    v6 = v3 - 1 < 0;
  }
  if (v6 == v7)
    WebCore::MediaPlayerPrivateMediaStreamAVFObjC::updateLayersAsNeeded(this);
}

_QWORD *WebCore::MediaPlayerPrivateMediaStreamAVFObjC::load(WebCore::MediaPlayerPrivateMediaStreamAVFObjC *this, const WTF::String *a2)
{
  _QWORD *v3;
  _QWORD *result;
  _QWORD *v5;

  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = off_1E32063F0;
  v3[1] = this;
  v5 = v3;
  WebCore::MediaPlayerPrivateMediaStreamAVFObjC::scheduleDeferredTask((uint64_t)this, (uint64_t *)&v5);
  result = v5;
  if (v5)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v5 + 8))(v5);
  return result;
}

void sub_194798D3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *WebCore::MediaPlayerPrivateMediaStreamAVFObjC::load(WebCore::MediaPlayerPrivateMediaStreamAVFObjC *this, const WTF::URL *a2, const WebCore::ContentType *a3, WebCore::MediaSourcePrivateClient *a4)
{
  _QWORD *v5;
  _QWORD *result;
  _QWORD *v7;

  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v5 = off_1E3206418;
  v5[1] = this;
  v7 = v5;
  WebCore::MediaPlayerPrivateMediaStreamAVFObjC::scheduleDeferredTask((uint64_t)this, (uint64_t *)&v7);
  result = v7;
  if (v7)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v7 + 8))(v7);
  return result;
}

void sub_194798DC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::MediaPlayerPrivateMediaStreamAVFObjC::load(WebCore::MediaPlayerPrivateMediaStreamAVFObjC *this, WebCore::MediaStreamPrivate *a2)
{
  WebCore::MediaStreamPrivate *v2;
  uint64_t v4;
  uint64_t v5;
  WebCore::MediaStreamPrivate *v7;
  void *v8;
  _QWORD *v9;
  uint64_t result;
  WTF *v11;
  void *v12;
  uint64_t v13[4];

  v2 = a2;
  v4 = *((_QWORD *)this + 37);
  v5 = *((_QWORD *)this + 38);
  v13[0] = (uint64_t)"MediaPlayerPrivateMediaStreamAVFObjC";
  v13[1] = 37;
  v13[2] = (uint64_t)"load";
  v13[3] = v5;
  if (*(_BYTE *)(v4 + 12))
  {
    if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 3, (WTF::Logger::LogSiteIdentifier *)v13);
  }
  *(_QWORD *)((char *)this + 260) = 0;
  ++*((_DWORD *)v2 + 4);
  v7 = (WebCore::MediaStreamPrivate *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = v2;
  if (v7)
  {
    if (*((_DWORD *)v7 + 4) == 1)
    {
      WebCore::MediaStreamPrivate::~MediaStreamPrivate(v7, a2);
      WTF::fastFree(v11, v12);
      v2 = (WebCore::MediaStreamPrivate *)*((_QWORD *)this + 17);
    }
    else
    {
      --*((_DWORD *)v7 + 4);
    }
  }
  WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>((uint64_t)v2 + 32, (_QWORD *)this + 7, (uint64_t)v13);
  *((_BYTE *)this + 346) = *(_BYTE *)(*((_QWORD *)this + 17) + 88) ^ 1;
  WebCore::MediaPlayerPrivateMediaStreamAVFObjC::updateTracks(this, v8);
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v9 = off_1E3206440;
  v9[1] = this;
  v13[0] = (uint64_t)v9;
  WebCore::MediaPlayerPrivateMediaStreamAVFObjC::scheduleDeferredTask((uint64_t)this, v13);
  result = v13[0];
  if (v13[0])
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13[0] + 8))(v13[0]);
  return result;
}

void sub_194798F04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  _Unwind_Resume(exception_object);
}

WTF *WebCore::MediaPlayerPrivateMediaStreamAVFObjC::updateTracks(WTF *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int v19;
  _QWORD *v20;
  WTF::StringImpl *v21;
  const WTF::StringImpl *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  WTF::StringImpl *v28;
  unsigned int v29;
  int v30;
  int v31;
  unsigned int v32;
  WTF **v33;
  WTF *v34;
  int v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  char *v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  unsigned int v48;
  const WTF::StringImpl *v49;
  uint64_t v50;
  WTF *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  unsigned int *v58;
  unsigned int v59;
  char *v60;
  unsigned int *v61;
  unsigned int v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  WTF::StringImpl *v68;
  unsigned int v69;
  int v70;
  uint64_t v71;
  int v72;
  unsigned int v73;
  WTF *v74;
  int v75;
  unsigned int v76;
  int v77;
  char v78;
  WTF::StringImpl *v79;
  unsigned int *v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  int v85;
  unsigned int v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  WTF::StringImpl *v92;
  int v93;
  uint64_t v94;
  unsigned int v95;
  WTF::StringImpl **v96;
  unsigned int v97;
  int v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int **v103;
  uint64_t v104;
  unsigned int *v105;
  unsigned int *v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int *v109;
  unsigned int *v110;
  unsigned int v111;
  unsigned int v112;
  WTF::StringImpl *v113;
  WTF *v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int *v117;
  uint64_t v118;
  const WTF::StringImpl *v119;
  unsigned int v120;
  uint64_t v121;
  uint64_t v122;
  BOOL v123;
  unsigned int v124;
  WTF::StringImpl *v125;
  unsigned int v126;
  int v127;
  unsigned int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  WTF *v132;
  unsigned int v133;
  unsigned int v134;
  int v135;
  unsigned int v136;
  unsigned int v137;
  unsigned int v138;
  _DWORD *v139;
  uint64_t v140;
  unsigned int *v141;
  unsigned int *v142;
  unsigned int v143;
  BOOL v144;
  WTF *v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  _DWORD *v150;
  unsigned int *v151;
  unsigned int *v152;
  unsigned int v153;
  unsigned int v154;
  int i;
  uint64_t v156;
  uint64_t v157;
  WTF **v158;
  WTF::StringImpl *v159;
  unsigned int v160;
  int v161;
  WTF *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unsigned int *v166;
  unsigned int v167;
  uint64_t v168;
  char *v169;
  char *v170;
  uint64_t v171;
  unsigned int *v172;
  unsigned int *v173;
  unsigned int *v174;
  unsigned int v175;
  unsigned int v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  WTF *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  _QWORD *v186;
  uint64_t v187;
  uint64_t v188;
  WTF *v189;
  uint64_t v190;
  WebCore::MediaStreamTrackPrivate *v191;
  WTF *v192;
  void *v193;
  WTF *v194;
  unsigned int *v195;
  unsigned int *v196;
  unsigned int v197;
  unsigned int v198;
  uint64_t v199;
  WTF *v200;
  char *v201;
  unsigned int *v202;
  unsigned int *v203;
  unsigned int v204;
  unsigned int v205;
  WTF::StringImpl *v206;
  unsigned __int8 *v207;
  int v209;
  _QWORD *v210;
  WTF::StringImpl *v211;
  const WTF::StringImpl *v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  int v216;
  int v217;
  WTF::StringImpl *v218;
  unsigned int v219;
  int v220;
  int v221;
  unsigned int v222;
  WTF **v223;
  WTF *v224;
  int v225;
  unsigned int v226;
  int v227;
  uint64_t v228;
  char *v229;
  char *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  _QWORD *v235;
  uint64_t v236;
  unsigned int v237;
  const WTF::StringImpl *v238;
  uint64_t v239;
  WTF *v240;
  unint64_t v241;
  uint64_t v242;
  char *v243;
  uint64_t v244;
  WTF *v245;
  uint64_t v246;
  unsigned int *v247;
  unsigned int v248;
  WTF *v249;
  unsigned int *v250;
  unsigned int v251;
  WTF *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  int v256;
  WTF::StringImpl *v257;
  unsigned int v258;
  int v259;
  uint64_t v260;
  int v261;
  unsigned int v262;
  WTF *v263;
  int v264;
  unsigned int v265;
  int v266;
  char v267;
  WTF::StringImpl *v268;
  unsigned int *v269;
  unsigned int *v270;
  unsigned int v271;
  unsigned int v272;
  unsigned int v273;
  int v274;
  unsigned int v275;
  uint64_t v276;
  unint64_t v277;
  unint64_t v278;
  uint64_t v279;
  uint64_t v280;
  WTF::StringImpl *v281;
  int v282;
  uint64_t v283;
  unsigned int v284;
  WTF::StringImpl **v285;
  unsigned int v286;
  int v287;
  WTF::StringImpl *v288;
  WTF::StringImpl *v289;
  uint64_t v290;
  uint64_t v291;
  unsigned int **v292;
  uint64_t v293;
  unsigned int *v294;
  unsigned int *v295;
  unsigned int v296;
  unsigned int v297;
  unsigned int *v298;
  unsigned int *v299;
  unsigned int v300;
  unsigned int v301;
  WTF::StringImpl *v302;
  char *v303;
  uint64_t v304;
  const WTF::StringImpl *v305;
  uint64_t v306;
  unsigned int *v307;
  unsigned int v308;
  uint64_t v309;
  uint64_t v310;
  BOOL v311;
  uint64_t v312;
  unsigned int v313;
  WTF::StringImpl *v314;
  unsigned int v315;
  int v316;
  unsigned int v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  WTF *v321;
  unsigned int v322;
  unsigned int v323;
  int v324;
  unsigned int v325;
  unsigned int v326;
  unsigned int v327;
  WTF *v328;
  uint64_t v329;
  uint64_t *v330;
  uint64_t v331;
  uint64_t v332;
  _DWORD *v333;
  unsigned int *v334;
  unsigned int *v335;
  unsigned int v336;
  unsigned int v337;
  int j;
  uint64_t v339;
  uint64_t v340;
  WTF **v341;
  WTF::StringImpl *v342;
  unsigned int v343;
  int v344;
  WTF *v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  unsigned int *v349;
  unsigned int *v350;
  unsigned int v351;
  BOOL v352;
  _DWORD *v353;
  uint64_t v354;
  unsigned int *v355;
  unsigned int v356;
  uint64_t v357;
  char *v358;
  char *v359;
  uint64_t v360;
  WTF *v361;
  unsigned int *v362;
  unsigned int *v363;
  unsigned int v364;
  unsigned int v365;
  uint64_t v366;
  WTF *v367;
  uint64_t v368;
  WTF *v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  _QWORD *v375;
  uint64_t v376;
  uint64_t v377;
  WTF *v378;
  uint64_t v379;
  WebCore::MediaStreamTrackPrivate *v380;
  WTF *v381;
  void *v382;
  WTF *v383;
  unsigned int *v384;
  unsigned int *v385;
  unsigned int v386;
  unsigned int v387;
  WTF *v388;
  WTF *v389;
  unsigned int *v390;
  unsigned int *v391;
  unsigned int v392;
  unsigned int v393;
  WTF::StringImpl *v394;
  uint64_t v395;
  WTF *v396;
  WebCore::MediaStreamTrackPrivate *v397;
  WTF *v398;
  void *v399;
  unint64_t v400;
  unint64_t v401;
  uint64_t v402;
  WTF *v403;
  WTF *v404;
  _QWORD *v405;
  char *v406;
  WTF *v407;
  _QWORD *v408;
  char *v409;
  char *v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  char *v414;
  int v415;
  WTF *v416;
  int v417;
  uint64_t *v418;
  uint64_t *v419;
  WTF::StringImpl *v420;
  unsigned int *v421;
  WTF *v422;
  uint64_t v423;
  WTF *v424;
  uint64_t v425;
  char *v426;
  uint64_t v427;
  char *v428;
  uint64_t v429;

  v2 = (uint64_t)this;
  v3 = *((_QWORD *)this + 17);
  v4 = *(unsigned int *)(v3 + 76);
  if ((_DWORD)v4)
  {
    v5 = *(_QWORD **)(v3 + 64);
    v6 = *(unsigned int *)(v3 + 72);
    v7 = &v5[2 * v6];
    if ((_DWORD)v6)
    {
      v8 = 16 * v6;
      while (!*v5)
      {
        v5 += 2;
        v8 -= 16;
        if (!v8)
        {
          v5 = v7;
          break;
        }
      }
    }
    if (v4 >> 29)
    {
      __break(0xC471u);
      return this;
    }
    v403 = (WTF *)WTF::fastMalloc((WTF *)(8 * v4));
    if (v5 != v7)
    {
      LODWORD(v9) = 0;
LABEL_10:
      v10 = v5[1];
      ++*(_DWORD *)(v10 + 8);
      *((_QWORD *)v403 + v9) = v10;
      v9 = (v9 + 1);
      while (1)
      {
        v5 += 2;
        if (v5 == v7)
          break;
        if (*v5)
        {
          if (v5 != v7)
            goto LABEL_10;
          break;
        }
      }
      v4 |= v9 << 32;
    }
  }
  else
  {
    v403 = 0;
    v4 = 0;
  }
  v11 = *(_QWORD *)(v2 + 120);
  if (!v11)
    goto LABEL_523;
  v12 = *(_QWORD *)(v2 + 128);
  if (__ldaxr((unsigned __int8 *)v11))
  {
    __clrex();
LABEL_20:
    MEMORY[0x19AEA534C](v11);
    goto LABEL_21;
  }
  if (__stxr(1u, (unsigned __int8 *)v11))
    goto LABEL_20;
LABEL_21:
  if (*(_QWORD *)(v11 + 24))
    ++*(_QWORD *)(v11 + 8);
  else
    v12 = 0;
  v14 = __ldxr((unsigned __int8 *)v11);
  if (v14 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v11))
    {
      if (!v12)
        goto LABEL_523;
LABEL_30:
      v15 = *(_QWORD *)(v12 + 8);
      if (v15 && (v16 = *(_QWORD *)(v15 + 8)) != 0)
        (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v16 + 584))(&v420);
      else
        v420 = 0;
      v17 = *(unsigned __int8 **)v12;
      if (__ldaxr(*(unsigned __int8 **)v12))
      {
        __clrex();
      }
      else if (!__stxr(1u, v17))
      {
        goto LABEL_38;
      }
      MEMORY[0x19AEA534C](v17);
LABEL_38:
      ++*((_QWORD *)v17 + 1);
      v19 = __ldxr(v17);
      if (v19 == 1)
      {
        if (!__stlxr(0, v17))
        {
LABEL_43:
          v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
          *v20 = &off_1E3206580;
          v20[1] = v2;
          v20[2] = v12;
          v20[3] = &v420;
          v405 = v20;
          v418 = (uint64_t *)(v2 + 208);
          v428 = 0;
          v429 = 0;
          v426 = 0;
          v427 = 0;
          v400 = v4;
          v409 = (char *)v403 + 8 * HIDWORD(v4);
          v411 = v2;
          v422 = 0;
          v423 = 0;
          v401 = HIDWORD(v4);
          v402 = v12;
          if (HIDWORD(v4))
          {
            v23 = (unint64_t)v403;
            do
            {
              v24 = *(_QWORD *)v23;
              if (!*(_BYTE *)(*(_QWORD *)v23 + 64))
              {
                v25 = *v418;
                if (*v418)
                {
                  v26 = *(_DWORD *)(v411 + 216);
                  v27 = *(_DWORD *)(v411 + 224);
                  v28 = *(WTF::StringImpl **)(v24 + 48);
                  v29 = *((_DWORD *)v28 + 4);
                  if (v29 < 0x100)
                  {
                    v30 = WTF::StringImpl::hashSlowCase(v28);
                    v25 = *v418;
                  }
                  else
                  {
                    v30 = v29 >> 8;
                  }
                  v31 = v26 - 1;
                  v32 = (v30 ^ v27) & (v26 - 1);
                  v33 = (WTF **)(v25 + 16 * v32);
                  v34 = *v33;
                  if (*v33)
                  {
                    v35 = -1;
                    do
                    {
                      v36 = *((_DWORD *)v34 + 4);
                      v37 = v36 < 0x100 ? WTF::StringImpl::hashSlowCase(v34) : v36 >> 8;
                      if (++v35 > ((v32 + v26 - ((v37 ^ v27) & v31)) & v31))
                        break;
                      if (v37 == v30 && (WTF::equal(*v33, *(const WTF::StringImpl **)(v24 + 48), v22) & 1) != 0)
                        goto LABEL_63;
                      v32 = (v32 + 1) & v31;
                      v33 = (WTF **)(*v418 + 16 * v32);
                      v34 = *v33;
                    }
                    while (*v33);
                  }
                }
                v38 = HIDWORD(v423);
                if (HIDWORD(v423) == (_DWORD)v423)
                {
                  v39 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v422, HIDWORD(v423) + 1, v23);
                  v38 = HIDWORD(v423);
                  v40 = v422;
                  v41 = *(_QWORD *)v39;
                  ++*(_DWORD *)(*(_QWORD *)v39 + 8);
                }
                else
                {
                  v40 = v422;
                  v41 = *(_QWORD *)v23;
                  ++*(_DWORD *)(*(_QWORD *)v23 + 8);
                }
                *((_QWORD *)v40 + v38) = v41;
                HIDWORD(v423) = v38 + 1;
              }
LABEL_63:
              v23 += 8;
            }
            while ((char *)v23 != v409);
          }
          v42 = v411;
          v43 = v405;
          if (*(_DWORD *)(v411 + 220))
          {
            v44 = *(unsigned int *)(v411 + 216);
            if ((_DWORD)v44)
            {
              v45 = 16 * v44;
              v46 = *(_QWORD **)(v411 + 208);
              while (!*v46)
              {
                v46 += 2;
                v45 -= 16;
                if (!v45)
                  goto LABEL_151;
              }
            }
            else
            {
              v46 = *(_QWORD **)(v411 + 208);
            }
            v47 = *(_QWORD *)(v411 + 208) + 16 * v44;
            if (v46 != (_QWORD *)v47)
            {
              v48 = 0;
LABEL_73:
              v49 = (const WTF::StringImpl *)(v46 + 1);
              v50 = v46[1];
              if (v401)
              {
                v51 = v403;
                v52 = v401;
                do
                {
                  if (*(_QWORD *)v51 == *(_QWORD *)(v50 + 120))
                    goto LABEL_85;
                  v51 = (WTF *)((char *)v51 + 8);
                  --v52;
                }
                while (v52);
              }
              v53 = v48;
              if (v48 == (_DWORD)v429)
              {
                v54 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(&v428, v48 + 1, (unint64_t)v49);
                v55 = HIDWORD(v429);
                v56 = v428;
                v57 = *(_QWORD *)v54;
                v58 = (unsigned int *)(*(_QWORD *)v54 + 8);
                do
                  v59 = __ldaxr(v58);
                while (__stlxr(v59 + 1, v58));
                *(_QWORD *)&v56[8 * v55] = v57;
              }
              else
              {
                v60 = v428;
                v61 = (unsigned int *)(v50 + 8);
                do
                  v62 = __ldaxr(v61);
                while (__stlxr(v62 + 1, v61));
                *(_QWORD *)&v60[8 * v53] = v50;
              }
              v48 = ++HIDWORD(v429);
LABEL_85:
              while (1)
              {
                v46 += 2;
                if (v46 == (_QWORD *)v47)
                  break;
                if (*v46)
                {
                  if (v46 != (_QWORD *)v47)
                    goto LABEL_73;
                  break;
                }
              }
              if (v48)
              {
                v63 = v428;
                v414 = &v428[8 * v48];
                do
                {
                  v64 = *(_QWORD *)(v42 + 208);
                  v65 = *(unsigned int *)(v42 + 216);
                  if (v64)
                  {
                    v66 = *(_QWORD *)(*(_QWORD *)v63 + 120);
                    v67 = *(_DWORD *)(v42 + 224);
                    v68 = *(WTF::StringImpl **)(v66 + 48);
                    v69 = *((_DWORD *)v68 + 4);
                    if (v69 < 0x100)
                    {
                      v70 = WTF::StringImpl::hashSlowCase(v68);
                      v64 = *v418;
                    }
                    else
                    {
                      v70 = v69 >> 8;
                    }
                    v72 = v65 - 1;
                    v73 = (v70 ^ v67) & (v65 - 1);
                    v71 = v64 + 16 * v73;
                    v74 = *(WTF **)v71;
                    if (*(_QWORD *)v71)
                    {
                      v75 = -1;
                      while (1)
                      {
                        v76 = *((_DWORD *)v74 + 4);
                        v77 = v76 < 0x100 ? WTF::StringImpl::hashSlowCase(v74) : v76 >> 8;
                        if (++v75 > ((v73 + v65 - ((v77 ^ v67) & v72)) & v72))
                          break;
                        if (v77 == v70)
                        {
                          v78 = WTF::equal(*(WTF **)v71, *(const WTF::StringImpl **)(v66 + 48), v49);
                          v64 = *v418;
                          if ((v78 & 1) != 0)
                          {
                            v42 = v411;
                            v65 = *(unsigned int *)(v411 + 216);
                            goto LABEL_109;
                          }
                        }
                        else
                        {
                          v64 = *v418;
                        }
                        v73 = (v73 + 1) & v72;
                        v71 = v64 + 16 * v73;
                        v74 = *(WTF **)v71;
                        if (!*(_QWORD *)v71)
                          goto LABEL_108;
                      }
                      v64 = *v418;
                    }
LABEL_108:
                    v42 = v411;
                    v65 = *(unsigned int *)(v411 + 216);
                    v71 = v64 + 16 * v65;
                  }
                  else
                  {
                    v71 = 16 * v65;
                  }
LABEL_109:
                  if (v64 + 16 * v65 != v71)
                  {
                    v79 = *(WTF::StringImpl **)v71;
                    *(_QWORD *)v71 = -1;
                    if (v79)
                    {
                      if (*(_DWORD *)v79 == 2)
                        WTF::StringImpl::destroy(v79, v21);
                      else
                        *(_DWORD *)v79 -= 2;
                    }
                    v80 = *(unsigned int **)(v71 + 8);
                    *(_QWORD *)(v71 + 8) = 0;
                    if (v80)
                    {
                      v81 = v80 + 2;
                      do
                      {
                        v82 = __ldaxr(v81);
                        v83 = v82 - 1;
                      }
                      while (__stlxr(v83, v81));
                      if (!v83)
                      {
                        atomic_store(1u, v80 + 2);
                        (*(void (**)(unsigned int *))(*(_QWORD *)v80 + 8))(v80);
                      }
                    }
                    *(_QWORD *)v71 = 0;
                    *(_QWORD *)(v71 + 8) = 0;
                    v84 = *(_DWORD *)(v42 + 216);
                    v85 = *(_DWORD *)(v42 + 220) - 1;
                    *(_DWORD *)(v42 + 220) = v85;
                    v86 = v84 - 1;
                    v87 = *(_QWORD *)(v42 + 208);
                    v88 = v71 - v87;
                    v89 = (unint64_t)(v71 - v87) >> 4;
                    v90 = ((_DWORD)v89 + 1) & (v84 - 1);
                    v91 = v87 + 16 * v90;
                    v92 = *(WTF::StringImpl **)v91;
                    if (*(_QWORD *)v91)
                    {
                      v93 = *(_DWORD *)(v42 + 224);
                      v94 = (v88 >> 4);
                      v95 = (v89 + 1) & v86;
                      v96 = (WTF::StringImpl **)(v87 + 16 * v89);
                      do
                      {
                        v97 = *((_DWORD *)v92 + 4);
                        if (v97 < 0x100)
                          v98 = WTF::StringImpl::hashSlowCase(v92);
                        else
                          v98 = v97 >> 8;
                        if (((v95 + v84 - ((v98 ^ v93) & v86)) & v86) == 0)
                          break;
                        v99 = *(WTF::StringImpl **)v91;
                        *(_QWORD *)v91 = 0;
                        v100 = *v96;
                        *v96 = v99;
                        if (v100)
                        {
                          if (*(_DWORD *)v100 == 2)
                            WTF::StringImpl::destroy(v100, v21);
                          else
                            *(_DWORD *)v100 -= 2;
                        }
                        v101 = v87 + 16 * v94;
                        v102 = v87 + 16 * v90;
                        v104 = *(_QWORD *)(v102 + 8);
                        v103 = (unsigned int **)(v102 + 8);
                        *v103 = 0;
                        v105 = *(unsigned int **)(v101 + 8);
                        *(_QWORD *)(v101 + 8) = v104;
                        if (v105)
                        {
                          v106 = v105 + 2;
                          do
                          {
                            v107 = __ldaxr(v106);
                            v108 = v107 - 1;
                          }
                          while (__stlxr(v108, v106));
                          if (!v108)
                          {
                            atomic_store(1u, v105 + 2);
                            (*(void (**)(unsigned int *))(*(_QWORD *)v105 + 8))(v105);
                          }
                        }
                        v109 = *v103;
                        *v103 = 0;
                        if (v109)
                        {
                          v110 = v109 + 2;
                          do
                          {
                            v111 = __ldaxr(v110);
                            v112 = v111 - 1;
                          }
                          while (__stlxr(v112, v110));
                          if (!v112)
                          {
                            atomic_store(1u, v109 + 2);
                            (*(void (**)(unsigned int *))(*(_QWORD *)v109 + 8))(v109);
                          }
                        }
                        v113 = *(WTF::StringImpl **)v91;
                        *(_QWORD *)v91 = 0;
                        if (v113)
                        {
                          if (*(_DWORD *)v113 == 2)
                            WTF::StringImpl::destroy(v113, v21);
                          else
                            *(_DWORD *)v113 -= 2;
                        }
                        *(_QWORD *)v91 = 0;
                        *(_QWORD *)(v91 + 8) = 0;
                        v90 = (v95 + 1) & v86;
                        v87 = *v418;
                        v94 = v95;
                        v96 = (WTF::StringImpl **)(*v418 + 16 * v95);
                        v91 = *v418 + 16 * v90;
                        v92 = *(WTF::StringImpl **)v91;
                        v95 = (v95 + 1) & v86;
                      }
                      while (*(_QWORD *)v91);
                      v42 = v411;
                      v84 = *(_DWORD *)(v411 + 216);
                      v85 = *(_DWORD *)(v411 + 220);
                      v43 = v405;
                    }
                    if (v84 >= 9 && 6 * v85 < v84)
                      WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::AudioTrackPrivateMediaStream,WTF::RawPtrTraits<WebCore::AudioTrackPrivateMediaStream>,WTF::DefaultRefDerefTraits<WebCore::AudioTrackPrivateMediaStream>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::AudioTrackPrivateMediaStream,WTF::RawPtrTraits<WebCore::AudioTrackPrivateMediaStream>,WTF::DefaultRefDerefTraits<WebCore::AudioTrackPrivateMediaStream>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebCore::AudioTrackPrivateMediaStream,WTF::RawPtrTraits<WebCore::AudioTrackPrivateMediaStream>,WTF::DefaultRefDerefTraits<WebCore::AudioTrackPrivateMediaStream>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::AudioTrackPrivateMediaStream,WTF::RawPtrTraits<WebCore::AudioTrackPrivateMediaStream>,WTF::DefaultRefDerefTraits<WebCore::AudioTrackPrivateMediaStream>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash(v418, v84 >> 1);
                  }
                  v63 += 8;
                }
                while (v63 != v414);
              }
            }
          }
LABEL_151:
          if (HIDWORD(v423))
          {
            v114 = v422;
            v404 = (WTF *)((char *)v422 + 8 * HIDWORD(v423));
            do
            {
              v115 = *(_QWORD *)v114;
              v116 = WTF::fastMalloc((WTF *)0x98);
              *(_DWORD *)(v116 + 8) = 1;
              v117 = (unsigned int *)(v116 + 8);
              *(_BYTE *)(v116 + 12) = 0;
              *(_QWORD *)(v116 + 24) = 0;
              *(_QWORD *)(v116 + 32) = 0;
              *(_QWORD *)(v116 + 16) = 0;
              *(_BYTE *)(v116 + 48) = 0;
              *(_OWORD *)(v116 + 72) = 0u;
              *(_OWORD *)(v116 + 56) = 0u;
              *(_QWORD *)v116 = off_1E3417860;
              *(_QWORD *)(v116 + 88) = &unk_1E3417950;
              *(_QWORD *)(v116 + 96) = 0;
              *(_QWORD *)(v116 + 104) = &unk_1E34179A8;
              *(_QWORD *)(v116 + 112) = 0;
              ++*(_DWORD *)(v115 + 8);
              *(_QWORD *)(v116 + 120) = v115;
              v118 = *(_QWORD *)(*(_QWORD *)(v115 + 40) + 8);
              (*(void (**)(uint64_t))(*(_QWORD *)v118 + 136))(v118);
              *(_QWORD *)(v116 + 128) = v118;
              *(_DWORD *)(v116 + 136) = 0;
              WebCore::AudioTrackPrivateMediaStream::createRenderer((WebCore::AudioTrackPrivateMediaStream *)v116, (uint64_t *)(v116 + 144));
              WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>(v115 + 24, (_QWORD *)(v116 + 88), (uint64_t)&v424);
              v421 = (unsigned int *)v116;
              v412 = *(_QWORD *)v114;
              do
                v120 = __ldaxr(v117);
              while (__stlxr(v120 + 1, v117));
              v122 = *(unsigned int *)(v411 + 216);
              v121 = *(unsigned int *)(v411 + 220);
              if (10 * v121 >= (unint64_t)(9 * v122)
                || (v122 <= 2 * (int)v121 ? (v123 = *(_BYTE *)(v411 + 228) == 0) : (v123 = 1), !v123))
              {
                if ((_DWORD)v122)
                  v124 = 2 * v122;
                else
                  v124 = 8;
                WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::AudioTrackPrivateMediaStream,WTF::RawPtrTraits<WebCore::AudioTrackPrivateMediaStream>,WTF::DefaultRefDerefTraits<WebCore::AudioTrackPrivateMediaStream>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::AudioTrackPrivateMediaStream,WTF::RawPtrTraits<WebCore::AudioTrackPrivateMediaStream>,WTF::DefaultRefDerefTraits<WebCore::AudioTrackPrivateMediaStream>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebCore::AudioTrackPrivateMediaStream,WTF::RawPtrTraits<WebCore::AudioTrackPrivateMediaStream>,WTF::DefaultRefDerefTraits<WebCore::AudioTrackPrivateMediaStream>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::AudioTrackPrivateMediaStream,WTF::RawPtrTraits<WebCore::AudioTrackPrivateMediaStream>,WTF::DefaultRefDerefTraits<WebCore::AudioTrackPrivateMediaStream>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash(v418, v124);
                LODWORD(v122) = *(_DWORD *)(v411 + 216);
              }
              v415 = *(_DWORD *)(v411 + 224);
              v125 = *(WTF::StringImpl **)(v412 + 48);
              v126 = *((_DWORD *)v125 + 4);
              if (v126 < 0x100)
                v127 = WTF::StringImpl::hashSlowCase(v125);
              else
                v127 = v126 >> 8;
              v128 = v122 - 1;
              v129 = (v127 ^ v415) & (v122 - 1);
              v130 = *v418;
              v131 = *v418 + 16 * v129;
              v132 = *(WTF **)v131;
              if (*(_QWORD *)v131)
              {
                v407 = v114;
                v133 = 0;
                while (1)
                {
                  v134 = *((_DWORD *)v132 + 4);
                  v135 = v134 < 0x100 ? WTF::StringImpl::hashSlowCase(v132) : v134 >> 8;
                  v136 = (v129 + v122 - ((v135 ^ v415) & v128)) & v128;
                  if (v133 > v136)
                    break;
                  if (v135 == v127
                    && WTF::equal(*(WTF **)v131, *(const WTF::StringImpl **)(v412 + 48), v119))
                  {
                    do
                    {
                      v137 = __ldaxr(v117);
                      v138 = v137 - 1;
                    }
                    while (__stlxr(v138, v117));
                    v42 = v411;
                    v43 = v405;
                    v114 = v407;
                    if (!v138)
                    {
                      atomic_store(1u, (unsigned int *)(v116 + 8));
                      (*(void (**)(uint64_t))(*(_QWORD *)v116 + 8))(v116);
                    }
                    goto LABEL_212;
                  }
                  v130 = *v418;
                  v129 = ((_DWORD)v129 + 1) & v128;
                  ++v133;
                  v131 = *v418 + 16 * v129;
                  v132 = *(WTF **)v131;
                  if (!*(_QWORD *)v131)
                  {
                    if (v133 >= 0x80)
                      *(_BYTE *)(v411 + 228) = 1;
                    v43 = v405;
                    v114 = v407;
                    goto LABEL_183;
                  }
                }
                if (v133 >= 0x80)
                  *(_BYTE *)(v411 + 228) = 1;
                v145 = *(WTF **)v131;
                *(_QWORD *)v131 = 0;
                v146 = v130 + 16 * v129;
                v149 = *(_QWORD *)(v146 + 8);
                v147 = (uint64_t *)(v146 + 8);
                v148 = v149;
                *v147 = 0;
                *(_QWORD *)v131 = 0;
                *(_QWORD *)(v131 + 8) = 0;
                v150 = *(_DWORD **)(v412 + 48);
                v114 = v407;
                if (v150)
                  *v150 += 2;
                *(_QWORD *)v131 = v150;
                v151 = (unsigned int *)*v147;
                *v147 = v116;
                v42 = v411;
                if (v151)
                {
                  v152 = v151 + 2;
                  do
                  {
                    v153 = __ldaxr(v152);
                    v154 = v153 - 1;
                  }
                  while (__stlxr(v154, v152));
                  if (!v154)
                  {
                    atomic_store(1u, v151 + 2);
                    (*(void (**)(unsigned int *))(*(_QWORD *)v151 + 8))(v151);
                  }
                }
                for (i = v129 + 1; ; i = v156 + 1)
                {
                  v156 = i & v128;
                  v157 = *v418;
                  v158 = (WTF **)(*v418 + 16 * v156);
                  v159 = *v158;
                  if (!*v158)
                    break;
                  v160 = *((_DWORD *)v159 + 4);
                  if (v160 < 0x100)
                    v161 = WTF::StringImpl::hashSlowCase(v159);
                  else
                    v161 = v160 >> 8;
                  if (++v136 > (((_DWORD)v156 + (_DWORD)v122 - ((v161 ^ v415) & v128)) & v128))
                  {
                    v162 = *v158;
                    *v158 = 0;
                    v163 = v157 + 16 * v156;
                    v164 = *(_QWORD *)(v163 + 8);
                    *v158 = v145;
                    *(_QWORD *)(v163 + 8) = v148;
                    v148 = v164;
                    v145 = v162;
                    v136 = (v156 + v122 - ((v161 ^ v415) & v128)) & v128;
                  }
                }
                *v158 = v145;
                v165 = v157 + 16 * v156;
                v141 = *(unsigned int **)(v165 + 8);
                *(_QWORD *)(v165 + 8) = v148;
                v43 = v405;
                if (v141)
                {
                  v166 = v141 + 2;
                  do
                  {
                    v167 = __ldaxr(v166);
                    v144 = --v167 == 0;
                  }
                  while (__stlxr(v167, v166));
                  goto LABEL_209;
                }
              }
              else
              {
                v43 = v405;
LABEL_183:
                v139 = *(_DWORD **)(v412 + 48);
                if (v139)
                  *v139 += 2;
                *(_QWORD *)v131 = v139;
                v140 = v130 + 16 * v129;
                v141 = *(unsigned int **)(v140 + 8);
                *(_QWORD *)(v140 + 8) = v116;
                v42 = v411;
                if (v141)
                {
                  v142 = v141 + 2;
                  do
                  {
                    v143 = __ldaxr(v142);
                    v144 = --v143 == 0;
                  }
                  while (__stlxr(v143, v142));
LABEL_209:
                  if (v144)
                  {
                    atomic_store(1u, v141 + 2);
                    (*(void (**)(unsigned int *))(*(_QWORD *)v141 + 8))(v141);
                  }
                }
              }
              ++*(_DWORD *)(v42 + 220);
LABEL_212:
              LODWORD(v168) = HIDWORD(v427);
              if (HIDWORD(v427) == (_DWORD)v427)
              {
                v169 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(&v426, HIDWORD(v427) + 1, (unint64_t)&v421);
                v168 = HIDWORD(v427);
                v170 = v426;
                v171 = *(_QWORD *)v169;
                *(_QWORD *)v169 = 0;
                *(_QWORD *)&v170[8 * v168] = v171;
              }
              else
              {
                v172 = v421;
                v421 = 0;
                *(_QWORD *)&v426[8 * HIDWORD(v427)] = v172;
              }
              HIDWORD(v427) = v168 + 1;
              v173 = v421;
              v421 = 0;
              if (v173)
              {
                v174 = v173 + 2;
                do
                {
                  v175 = __ldaxr(v174);
                  v176 = v175 - 1;
                }
                while (__stlxr(v176, v174));
                if (!v176)
                {
                  atomic_store(1u, v173 + 2);
                  (*(void (**)(unsigned int *))(*(_QWORD *)v173 + 8))(v173);
                }
              }
              v114 = (WTF *)((char *)v114 + 8);
            }
            while (v114 != v404);
          }
          if (HIDWORD(v429))
          {
            v177 = 0;
            v178 = v428;
            v179 = 8 * HIDWORD(v429);
            do
            {
              (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*v43 + 16))(v43, *(_QWORD *)&v178[8 * v177], v177, 1);
              ++v177;
              v179 -= 8;
            }
            while (v179);
          }
          v180 = (WTF *)v426;
          v181 = HIDWORD(v427);
          if (HIDWORD(v427))
          {
            v182 = 0;
            v183 = 8 * HIDWORD(v427);
            do
            {
              (*(void (**)(_QWORD *, _QWORD, uint64_t, _QWORD))(*v43 + 16))(v43, *((_QWORD *)v180 + v182), v182, 0);
              ++v182;
              v183 -= 8;
            }
            while (v183);
          }
          if (*(_DWORD *)(v42 + 220))
          {
            v184 = *(unsigned int *)(v42 + 216);
            if ((_DWORD)v184)
            {
              v185 = 16 * v184;
              v186 = *(_QWORD **)(v42 + 208);
              while (!*v186)
              {
                v186 += 2;
                v185 -= 16;
                if (!v185)
                  goto LABEL_242;
              }
            }
            else
            {
              v186 = *(_QWORD **)(v42 + 208);
            }
            v187 = *(_QWORD *)(v42 + 208) + 16 * v184;
            if (v186 != (_QWORD *)v187)
            {
              v188 = 0;
              do
              {
                (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*v43 + 16))(v43, v186[1], v188, 2);
                v186 += 2;
                if (v186 == (_QWORD *)v187)
                  break;
                v188 = (v188 + 1);
                while (!*v186)
                {
                  v186 += 2;
                  if (v186 == (_QWORD *)v187)
                    goto LABEL_242;
                }
              }
              while (v186 != (_QWORD *)v187);
            }
          }
LABEL_242:
          v189 = v422;
          if (HIDWORD(v423))
          {
            v190 = 8 * HIDWORD(v423);
            do
            {
              v191 = *(WebCore::MediaStreamTrackPrivate **)v189;
              *(_QWORD *)v189 = 0;
              if (v191)
              {
                if (*((_DWORD *)v191 + 2) == 1)
                {
                  WebCore::MediaStreamTrackPrivate::~MediaStreamTrackPrivate(v191, v21);
                  WTF::fastFree(v192, v193);
                }
                else
                {
                  --*((_DWORD *)v191 + 2);
                }
              }
              v189 = (WTF *)((char *)v189 + 8);
              v190 -= 8;
            }
            while (v190);
            v189 = v422;
          }
          if (v189)
          {
            v422 = 0;
            LODWORD(v423) = 0;
            WTF::fastFree(v189, v21);
          }
          if ((_DWORD)v181)
          {
            v194 = (WTF *)((char *)v180 + 8 * v181);
            v4 = v400;
            do
            {
              v195 = *(unsigned int **)v180;
              *(_QWORD *)v180 = 0;
              if (v195)
              {
                v196 = v195 + 2;
                do
                {
                  v197 = __ldaxr(v196);
                  v198 = v197 - 1;
                }
                while (__stlxr(v198, v196));
                if (!v198)
                {
                  atomic_store(1u, v195 + 2);
                  (*(void (**)(unsigned int *))(*(_QWORD *)v195 + 8))(v195);
                }
              }
              v180 = (WTF *)((char *)v180 + 8);
            }
            while (v180 != v194);
            v180 = (WTF *)v426;
          }
          else
          {
            v4 = v400;
          }
          v199 = v402;
          if (v180)
            WTF::fastFree(v180, v21);
          v200 = (WTF *)v428;
          if (HIDWORD(v429))
          {
            v201 = &v428[8 * HIDWORD(v429)];
            do
            {
              v202 = *(unsigned int **)v200;
              *(_QWORD *)v200 = 0;
              if (v202)
              {
                v203 = v202 + 2;
                do
                {
                  v204 = __ldaxr(v203);
                  v205 = v204 - 1;
                }
                while (__stlxr(v205, v203));
                if (!v205)
                {
                  atomic_store(1u, v202 + 2);
                  (*(void (**)(unsigned int *))(*(_QWORD *)v202 + 8))(v202);
                }
              }
              v200 = (WTF *)((char *)v200 + 8);
            }
            while (v200 != (WTF *)v201);
            v200 = (WTF *)v428;
            v199 = v402;
          }
          if (v200)
            WTF::fastFree(v200, v21);
          (*(void (**)(_QWORD *))(*v43 + 8))(v43);
          if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v199 + 8) + 8) + 264))(*(_QWORD *)(*(_QWORD *)(v199 + 8) + 8)) & 1) == 0)
            goto LABEL_519;
          v207 = *(unsigned __int8 **)v199;
          if (__ldaxr(*(unsigned __int8 **)v199))
          {
            __clrex();
          }
          else if (!__stxr(1u, v207))
          {
            goto LABEL_280;
          }
          MEMORY[0x19AEA534C](v207);
LABEL_280:
          ++*((_QWORD *)v207 + 1);
          v209 = __ldxr(v207);
          if (v209 == 1)
          {
            if (!__stlxr(0, v207))
            {
LABEL_285:
              v210 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
              *v210 = &off_1E32065A8;
              v210[1] = v42;
              v408 = v210;
              v210[2] = v199;
              v419 = (uint64_t *)(v42 + 232);
              v424 = 0;
              v425 = 0;
              v428 = 0;
              v429 = 0;
              v426 = 0;
              v427 = 0;
              if (v401)
              {
                v213 = (unint64_t)v403;
                do
                {
                  v214 = *(_QWORD *)v213;
                  if (*(_BYTE *)(*(_QWORD *)v213 + 64))
                  {
                    v215 = *v419;
                    if (*v419)
                    {
                      v216 = *(_DWORD *)(v411 + 240);
                      v217 = *(_DWORD *)(v411 + 248);
                      v218 = *(WTF::StringImpl **)(v214 + 48);
                      v219 = *((_DWORD *)v218 + 4);
                      if (v219 < 0x100)
                      {
                        v220 = WTF::StringImpl::hashSlowCase(v218);
                        v215 = *v419;
                      }
                      else
                      {
                        v220 = v219 >> 8;
                      }
                      v221 = v216 - 1;
                      v222 = (v220 ^ v217) & (v216 - 1);
                      v223 = (WTF **)(v215 + 16 * v222);
                      v224 = *v223;
                      if (*v223)
                      {
                        v225 = -1;
                        do
                        {
                          v226 = *((_DWORD *)v224 + 4);
                          v227 = v226 < 0x100 ? WTF::StringImpl::hashSlowCase(v224) : v226 >> 8;
                          if (++v225 > ((v222 + v216 - ((v227 ^ v217) & v221)) & v221))
                            break;
                          if (v227 == v220
                            && (WTF::equal(*v223, *(const WTF::StringImpl **)(v214 + 48), v212) & 1) != 0)
                          {
                            goto LABEL_305;
                          }
                          v222 = (v222 + 1) & v221;
                          v223 = (WTF **)(*v419 + 16 * v222);
                          v224 = *v223;
                        }
                        while (*v223);
                      }
                    }
                    v228 = HIDWORD(v427);
                    if (HIDWORD(v427) == (_DWORD)v427)
                    {
                      v229 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(&v426, HIDWORD(v427) + 1, v213);
                      v228 = HIDWORD(v427);
                      v230 = v426;
                      v231 = *(_QWORD *)v229;
                      ++*(_DWORD *)(*(_QWORD *)v229 + 8);
                    }
                    else
                    {
                      v230 = v426;
                      v231 = *(_QWORD *)v213;
                      ++*(_DWORD *)(*(_QWORD *)v213 + 8);
                    }
                    *(_QWORD *)&v230[8 * v228] = v231;
                    HIDWORD(v427) = v228 + 1;
                  }
LABEL_305:
                  v213 += 8;
                }
                while ((char *)v213 != v409);
              }
              v232 = v411;
              if (*(_DWORD *)(v411 + 244))
              {
                v233 = *(unsigned int *)(v411 + 240);
                if ((_DWORD)v233)
                {
                  v234 = 16 * v233;
                  v235 = *(_QWORD **)(v411 + 232);
                  while (!*v235)
                  {
                    v235 += 2;
                    v234 -= 16;
                    if (!v234)
                      goto LABEL_393;
                  }
                }
                else
                {
                  v235 = *(_QWORD **)(v411 + 232);
                }
                v236 = *(_QWORD *)(v411 + 232) + 16 * v233;
                if (v235 != (_QWORD *)v236)
                {
                  v237 = 0;
LABEL_315:
                  v238 = (const WTF::StringImpl *)(v235 + 1);
                  v239 = v235[1];
                  if (v401)
                  {
                    v240 = v403;
                    v241 = v401;
                    do
                    {
                      if (*(_QWORD *)v240 == *(_QWORD *)(v239 + 104))
                        goto LABEL_327;
                      v240 = (WTF *)((char *)v240 + 8);
                      --v241;
                    }
                    while (v241);
                  }
                  v242 = v237;
                  if (v237 == (_DWORD)v425)
                  {
                    v243 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v424, v237 + 1, (unint64_t)v238);
                    v244 = HIDWORD(v425);
                    v245 = v424;
                    v246 = *(_QWORD *)v243;
                    v247 = (unsigned int *)(*(_QWORD *)v243 + 8);
                    do
                      v248 = __ldaxr(v247);
                    while (__stlxr(v248 + 1, v247));
                    *((_QWORD *)v245 + v244) = v246;
                  }
                  else
                  {
                    v249 = v424;
                    v250 = (unsigned int *)(v239 + 8);
                    do
                      v251 = __ldaxr(v250);
                    while (__stlxr(v251 + 1, v250));
                    *((_QWORD *)v249 + v242) = v239;
                  }
                  v237 = ++HIDWORD(v425);
LABEL_327:
                  while (1)
                  {
                    v235 += 2;
                    if (v235 == (_QWORD *)v236)
                      break;
                    if (*v235)
                    {
                      if (v235 != (_QWORD *)v236)
                        goto LABEL_315;
                      break;
                    }
                  }
                  if (v237)
                  {
                    v252 = v424;
                    v416 = (WTF *)((char *)v424 + 8 * v237);
                    do
                    {
                      v253 = *(_QWORD *)(v232 + 232);
                      v254 = *(unsigned int *)(v232 + 240);
                      if (v253)
                      {
                        v255 = *(_QWORD *)(*(_QWORD *)v252 + 104);
                        v256 = *(_DWORD *)(v232 + 248);
                        v257 = *(WTF::StringImpl **)(v255 + 48);
                        v258 = *((_DWORD *)v257 + 4);
                        if (v258 < 0x100)
                        {
                          v259 = WTF::StringImpl::hashSlowCase(v257);
                          v253 = *v419;
                        }
                        else
                        {
                          v259 = v258 >> 8;
                        }
                        v261 = v254 - 1;
                        v262 = (v259 ^ v256) & (v254 - 1);
                        v260 = v253 + 16 * v262;
                        v263 = *(WTF **)v260;
                        if (*(_QWORD *)v260)
                        {
                          v264 = -1;
                          while (1)
                          {
                            v265 = *((_DWORD *)v263 + 4);
                            v266 = v265 < 0x100 ? WTF::StringImpl::hashSlowCase(v263) : v265 >> 8;
                            if (++v264 > ((v262 + v254 - ((v266 ^ v256) & v261)) & v261))
                              break;
                            if (v266 == v259)
                            {
                              v267 = WTF::equal(*(WTF **)v260, *(const WTF::StringImpl **)(v255 + 48), v238);
                              v253 = *v419;
                              if ((v267 & 1) != 0)
                              {
                                v232 = v411;
                                v254 = *(unsigned int *)(v411 + 240);
                                goto LABEL_351;
                              }
                            }
                            else
                            {
                              v253 = *v419;
                            }
                            v262 = (v262 + 1) & v261;
                            v260 = v253 + 16 * v262;
                            v263 = *(WTF **)v260;
                            if (!*(_QWORD *)v260)
                              goto LABEL_350;
                          }
                          v253 = *v419;
                        }
LABEL_350:
                        v232 = v411;
                        v254 = *(unsigned int *)(v411 + 240);
                        v260 = v253 + 16 * v254;
                      }
                      else
                      {
                        v260 = 16 * v254;
                      }
LABEL_351:
                      if (v253 + 16 * v254 != v260)
                      {
                        v268 = *(WTF::StringImpl **)v260;
                        *(_QWORD *)v260 = -1;
                        if (v268)
                        {
                          if (*(_DWORD *)v268 == 2)
                            WTF::StringImpl::destroy(v268, v211);
                          else
                            *(_DWORD *)v268 -= 2;
                        }
                        v269 = *(unsigned int **)(v260 + 8);
                        *(_QWORD *)(v260 + 8) = 0;
                        if (v269)
                        {
                          v270 = v269 + 2;
                          do
                          {
                            v271 = __ldaxr(v270);
                            v272 = v271 - 1;
                          }
                          while (__stlxr(v272, v270));
                          if (!v272)
                          {
                            atomic_store(1u, v269 + 2);
                            (*(void (**)(unsigned int *))(*(_QWORD *)v269 + 8))(v269);
                          }
                        }
                        *(_QWORD *)v260 = 0;
                        *(_QWORD *)(v260 + 8) = 0;
                        v273 = *(_DWORD *)(v232 + 240);
                        v274 = *(_DWORD *)(v232 + 244) - 1;
                        *(_DWORD *)(v232 + 244) = v274;
                        v275 = v273 - 1;
                        v276 = *(_QWORD *)(v232 + 232);
                        v277 = v260 - v276;
                        v278 = (unint64_t)(v260 - v276) >> 4;
                        v279 = ((_DWORD)v278 + 1) & (v273 - 1);
                        v280 = v276 + 16 * v279;
                        v281 = *(WTF::StringImpl **)v280;
                        if (*(_QWORD *)v280)
                        {
                          v282 = *(_DWORD *)(v232 + 248);
                          v283 = (v277 >> 4);
                          v284 = (v278 + 1) & v275;
                          v285 = (WTF::StringImpl **)(v276 + 16 * v278);
                          do
                          {
                            v286 = *((_DWORD *)v281 + 4);
                            if (v286 < 0x100)
                              v287 = WTF::StringImpl::hashSlowCase(v281);
                            else
                              v287 = v286 >> 8;
                            if (((v284 + v273 - ((v287 ^ v282) & v275)) & v275) == 0)
                              break;
                            v288 = *(WTF::StringImpl **)v280;
                            *(_QWORD *)v280 = 0;
                            v289 = *v285;
                            *v285 = v288;
                            if (v289)
                            {
                              if (*(_DWORD *)v289 == 2)
                                WTF::StringImpl::destroy(v289, v211);
                              else
                                *(_DWORD *)v289 -= 2;
                            }
                            v290 = v276 + 16 * v283;
                            v291 = v276 + 16 * v279;
                            v293 = *(_QWORD *)(v291 + 8);
                            v292 = (unsigned int **)(v291 + 8);
                            *v292 = 0;
                            v294 = *(unsigned int **)(v290 + 8);
                            *(_QWORD *)(v290 + 8) = v293;
                            if (v294)
                            {
                              v295 = v294 + 2;
                              do
                              {
                                v296 = __ldaxr(v295);
                                v297 = v296 - 1;
                              }
                              while (__stlxr(v297, v295));
                              if (!v297)
                              {
                                atomic_store(1u, v294 + 2);
                                (*(void (**)(unsigned int *))(*(_QWORD *)v294 + 8))(v294);
                              }
                            }
                            v298 = *v292;
                            *v292 = 0;
                            if (v298)
                            {
                              v299 = v298 + 2;
                              do
                              {
                                v300 = __ldaxr(v299);
                                v301 = v300 - 1;
                              }
                              while (__stlxr(v301, v299));
                              if (!v301)
                              {
                                atomic_store(1u, v298 + 2);
                                (*(void (**)(unsigned int *))(*(_QWORD *)v298 + 8))(v298);
                              }
                            }
                            v302 = *(WTF::StringImpl **)v280;
                            *(_QWORD *)v280 = 0;
                            if (v302)
                            {
                              if (*(_DWORD *)v302 == 2)
                                WTF::StringImpl::destroy(v302, v211);
                              else
                                *(_DWORD *)v302 -= 2;
                            }
                            *(_QWORD *)v280 = 0;
                            *(_QWORD *)(v280 + 8) = 0;
                            v279 = (v284 + 1) & v275;
                            v276 = *v419;
                            v283 = v284;
                            v285 = (WTF::StringImpl **)(*v419 + 16 * v284);
                            v280 = *v419 + 16 * v279;
                            v281 = *(WTF::StringImpl **)v280;
                            v284 = (v284 + 1) & v275;
                          }
                          while (*(_QWORD *)v280);
                          v232 = v411;
                          v273 = *(_DWORD *)(v411 + 240);
                          v274 = *(_DWORD *)(v411 + 244);
                        }
                        if (v273 >= 9 && 6 * v274 < v273)
                          WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::AudioTrackPrivateMediaStream,WTF::RawPtrTraits<WebCore::AudioTrackPrivateMediaStream>,WTF::DefaultRefDerefTraits<WebCore::AudioTrackPrivateMediaStream>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::AudioTrackPrivateMediaStream,WTF::RawPtrTraits<WebCore::AudioTrackPrivateMediaStream>,WTF::DefaultRefDerefTraits<WebCore::AudioTrackPrivateMediaStream>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebCore::AudioTrackPrivateMediaStream,WTF::RawPtrTraits<WebCore::AudioTrackPrivateMediaStream>,WTF::DefaultRefDerefTraits<WebCore::AudioTrackPrivateMediaStream>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::AudioTrackPrivateMediaStream,WTF::RawPtrTraits<WebCore::AudioTrackPrivateMediaStream>,WTF::DefaultRefDerefTraits<WebCore::AudioTrackPrivateMediaStream>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash(v419, v273 >> 1);
                      }
                      v252 = (WTF *)((char *)v252 + 8);
                    }
                    while (v252 != v416);
                  }
                }
              }
LABEL_393:
              if (HIDWORD(v427))
              {
                v303 = v426;
                v406 = &v426[8 * HIDWORD(v427)];
                do
                {
                  v304 = *(_QWORD *)v303;
                  v306 = WTF::fastMalloc((WTF *)0x78);
                  *(_DWORD *)(v306 + 8) = 1;
                  v307 = (unsigned int *)(v306 + 8);
                  *(_BYTE *)(v306 + 12) = 0;
                  *(_QWORD *)(v306 + 24) = 0;
                  *(_QWORD *)(v306 + 32) = 0;
                  *(_QWORD *)(v306 + 16) = 0;
                  *(_BYTE *)(v306 + 48) = 0;
                  *(_OWORD *)(v306 + 88) = 0u;
                  *(_OWORD *)(v306 + 72) = 0u;
                  *(_OWORD *)(v306 + 56) = 0u;
                  *(_QWORD *)v306 = off_1E32062A8;
                  ++*(_DWORD *)(v304 + 8);
                  *(_QWORD *)(v306 + 104) = v304;
                  *(_DWORD *)(v306 + 112) = 0;
                  v422 = (WTF *)v306;
                  v413 = *(_QWORD *)v303;
                  do
                    v308 = __ldaxr(v307);
                  while (__stlxr(v308 + 1, v307));
                  v310 = *(unsigned int *)(v411 + 240);
                  v309 = *(unsigned int *)(v411 + 244);
                  if (10 * v309 < (unint64_t)(9 * v310)
                    && (v310 <= 2 * (int)v309 ? (v311 = *(_BYTE *)(v411 + 252) == 0) : (v311 = 1), v311))
                  {
                    v312 = v411;
                  }
                  else
                  {
                    if ((_DWORD)v310)
                      v313 = 2 * v310;
                    else
                      v313 = 8;
                    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::AudioTrackPrivateMediaStream,WTF::RawPtrTraits<WebCore::AudioTrackPrivateMediaStream>,WTF::DefaultRefDerefTraits<WebCore::AudioTrackPrivateMediaStream>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::AudioTrackPrivateMediaStream,WTF::RawPtrTraits<WebCore::AudioTrackPrivateMediaStream>,WTF::DefaultRefDerefTraits<WebCore::AudioTrackPrivateMediaStream>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebCore::AudioTrackPrivateMediaStream,WTF::RawPtrTraits<WebCore::AudioTrackPrivateMediaStream>,WTF::DefaultRefDerefTraits<WebCore::AudioTrackPrivateMediaStream>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::AudioTrackPrivateMediaStream,WTF::RawPtrTraits<WebCore::AudioTrackPrivateMediaStream>,WTF::DefaultRefDerefTraits<WebCore::AudioTrackPrivateMediaStream>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash(v419, v313);
                    v312 = v411;
                    LODWORD(v310) = *(_DWORD *)(v411 + 240);
                  }
                  v417 = *(_DWORD *)(v312 + 248);
                  v314 = *(WTF::StringImpl **)(v413 + 48);
                  v315 = *((_DWORD *)v314 + 4);
                  if (v315 < 0x100)
                    v316 = WTF::StringImpl::hashSlowCase(v314);
                  else
                    v316 = v315 >> 8;
                  v317 = v310 - 1;
                  v318 = (v316 ^ v417) & (v310 - 1);
                  v319 = *v419;
                  v320 = *v419 + 16 * v318;
                  v321 = *(WTF **)v320;
                  if (*(_QWORD *)v320)
                  {
                    v410 = v303;
                    v322 = 0;
                    while (1)
                    {
                      v323 = *((_DWORD *)v321 + 4);
                      v324 = v323 < 0x100 ? WTF::StringImpl::hashSlowCase(v321) : v323 >> 8;
                      v325 = (v318 + v310 - ((v324 ^ v417) & v317)) & v317;
                      if (v322 > v325)
                        break;
                      if (v324 == v316
                        && WTF::equal(*(WTF **)v320, *(const WTF::StringImpl **)(v413 + 48), v305))
                      {
                        do
                        {
                          v326 = __ldaxr(v307);
                          v327 = v326 - 1;
                        }
                        while (__stlxr(v327, v307));
                        v303 = v410;
                        v232 = v411;
                        if (!v327)
                        {
                          atomic_store(1u, (unsigned int *)(v306 + 8));
                          (*(void (**)(uint64_t))(*(_QWORD *)v306 + 8))(v306);
                        }
                        goto LABEL_456;
                      }
                      v319 = *v419;
                      v318 = ((_DWORD)v318 + 1) & v317;
                      ++v322;
                      v320 = *v419 + 16 * v318;
                      v321 = *(WTF **)v320;
                      if (!*(_QWORD *)v320)
                      {
                        v232 = v411;
                        if (v322 >= 0x80)
                          *(_BYTE *)(v411 + 252) = 1;
                        v303 = v410;
                        goto LABEL_448;
                      }
                    }
                    if (v322 >= 0x80)
                      *(_BYTE *)(v411 + 252) = 1;
                    v328 = *(WTF **)v320;
                    *(_QWORD *)v320 = 0;
                    v329 = v319 + 16 * v318;
                    v332 = *(_QWORD *)(v329 + 8);
                    v330 = (uint64_t *)(v329 + 8);
                    v331 = v332;
                    *v330 = 0;
                    *(_QWORD *)v320 = 0;
                    *(_QWORD *)(v320 + 8) = 0;
                    v333 = *(_DWORD **)(v413 + 48);
                    v303 = v410;
                    if (v333)
                      *v333 += 2;
                    *(_QWORD *)v320 = v333;
                    v334 = (unsigned int *)*v330;
                    *v330 = v306;
                    if (v334)
                    {
                      v335 = v334 + 2;
                      do
                      {
                        v336 = __ldaxr(v335);
                        v337 = v336 - 1;
                      }
                      while (__stlxr(v337, v335));
                      if (!v337)
                      {
                        atomic_store(1u, v334 + 2);
                        (*(void (**)(unsigned int *))(*(_QWORD *)v334 + 8))(v334);
                      }
                    }
                    for (j = v318 + 1; ; j = v339 + 1)
                    {
                      v339 = j & v317;
                      v340 = *v419;
                      v341 = (WTF **)(*v419 + 16 * v339);
                      v342 = *v341;
                      if (!*v341)
                        break;
                      v343 = *((_DWORD *)v342 + 4);
                      if (v343 < 0x100)
                        v344 = WTF::StringImpl::hashSlowCase(v342);
                      else
                        v344 = v343 >> 8;
                      if (++v325 > (((_DWORD)v339 + (_DWORD)v310 - ((v344 ^ v417) & v317)) & v317))
                      {
                        v345 = *v341;
                        *v341 = 0;
                        v346 = v340 + 16 * v339;
                        v347 = *(_QWORD *)(v346 + 8);
                        *v341 = v328;
                        *(_QWORD *)(v346 + 8) = v331;
                        v331 = v347;
                        v328 = v345;
                        v325 = (v339 + v310 - ((v344 ^ v417) & v317)) & v317;
                      }
                    }
                    *v341 = v328;
                    v348 = v340 + 16 * v339;
                    v349 = *(unsigned int **)(v348 + 8);
                    *(_QWORD *)(v348 + 8) = v331;
                    v232 = v411;
                    if (v349)
                    {
                      v350 = v349 + 2;
                      do
                      {
                        v351 = __ldaxr(v350);
                        v352 = --v351 == 0;
                      }
                      while (__stlxr(v351, v350));
                      goto LABEL_453;
                    }
                  }
                  else
                  {
                    v232 = v411;
LABEL_448:
                    v353 = *(_DWORD **)(v413 + 48);
                    if (v353)
                      *v353 += 2;
                    *(_QWORD *)v320 = v353;
                    v354 = v319 + 16 * v318;
                    v349 = *(unsigned int **)(v354 + 8);
                    *(_QWORD *)(v354 + 8) = v306;
                    if (v349)
                    {
                      v355 = v349 + 2;
                      do
                      {
                        v356 = __ldaxr(v355);
                        v352 = --v356 == 0;
                      }
                      while (__stlxr(v356, v355));
LABEL_453:
                      if (v352)
                      {
                        atomic_store(1u, v349 + 2);
                        (*(void (**)(unsigned int *))(*(_QWORD *)v349 + 8))(v349);
                      }
                    }
                  }
                  ++*(_DWORD *)(v232 + 244);
LABEL_456:
                  LODWORD(v357) = HIDWORD(v429);
                  if (HIDWORD(v429) == (_DWORD)v429)
                  {
                    v358 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(&v428, HIDWORD(v429) + 1, (unint64_t)&v422);
                    v357 = HIDWORD(v429);
                    v359 = v428;
                    v360 = *(_QWORD *)v358;
                    *(_QWORD *)v358 = 0;
                    *(_QWORD *)&v359[8 * v357] = v360;
                  }
                  else
                  {
                    v361 = v422;
                    v422 = 0;
                    *(_QWORD *)&v428[8 * HIDWORD(v429)] = v361;
                  }
                  HIDWORD(v429) = v357 + 1;
                  v362 = (unsigned int *)v422;
                  v422 = 0;
                  if (v362)
                  {
                    v363 = v362 + 2;
                    do
                    {
                      v364 = __ldaxr(v363);
                      v365 = v364 - 1;
                    }
                    while (__stlxr(v365, v363));
                    if (!v365)
                    {
                      atomic_store(1u, v362 + 2);
                      (*(void (**)(unsigned int *))(*(_QWORD *)v362 + 8))(v362);
                    }
                  }
                  v303 += 8;
                }
                while (v303 != v406);
              }
              if (HIDWORD(v425))
              {
                v366 = 0;
                v367 = v424;
                v368 = 8 * HIDWORD(v425);
                do
                {
                  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*v408 + 16))(v408, *((_QWORD *)v367 + v366), v366, 1);
                  ++v366;
                  v368 -= 8;
                }
                while (v368);
              }
              v369 = (WTF *)v428;
              v370 = HIDWORD(v429);
              if (HIDWORD(v429))
              {
                v371 = 0;
                v372 = 8 * HIDWORD(v429);
                do
                {
                  (*(void (**)(_QWORD *, _QWORD, uint64_t, _QWORD))(*v408 + 16))(v408, *((_QWORD *)v369 + v371), v371, 0);
                  ++v371;
                  v372 -= 8;
                }
                while (v372);
              }
              if (*(_DWORD *)(v232 + 244))
              {
                v373 = *(unsigned int *)(v232 + 240);
                if ((_DWORD)v373)
                {
                  v374 = 16 * v373;
                  v375 = *(_QWORD **)(v232 + 232);
                  while (!*v375)
                  {
                    v375 += 2;
                    v374 -= 16;
                    if (!v374)
                      goto LABEL_486;
                  }
                }
                else
                {
                  v375 = *(_QWORD **)(v232 + 232);
                }
                v376 = *(_QWORD *)(v232 + 232) + 16 * v373;
                if (v375 != (_QWORD *)v376)
                {
                  v377 = 0;
                  do
                  {
                    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*v408 + 16))(v408, v375[1], v377, 2);
                    v375 += 2;
                    if (v375 == (_QWORD *)v376)
                      break;
                    v377 = (v377 + 1);
                    while (!*v375)
                    {
                      v375 += 2;
                      if (v375 == (_QWORD *)v376)
                        goto LABEL_486;
                    }
                  }
                  while (v375 != (_QWORD *)v376);
                }
              }
LABEL_486:
              v378 = (WTF *)v426;
              if (HIDWORD(v427))
              {
                v379 = 8 * HIDWORD(v427);
                v4 = v400;
                do
                {
                  v380 = *(WebCore::MediaStreamTrackPrivate **)v378;
                  *(_QWORD *)v378 = 0;
                  if (v380)
                  {
                    if (*((_DWORD *)v380 + 2) == 1)
                    {
                      WebCore::MediaStreamTrackPrivate::~MediaStreamTrackPrivate(v380, v211);
                      WTF::fastFree(v381, v382);
                    }
                    else
                    {
                      --*((_DWORD *)v380 + 2);
                    }
                  }
                  v378 = (WTF *)((char *)v378 + 8);
                  v379 -= 8;
                }
                while (v379);
                v378 = (WTF *)v426;
                if (!v426)
                  goto LABEL_496;
              }
              else
              {
                v4 = v400;
                if (!v426)
                  goto LABEL_496;
              }
              v426 = 0;
              LODWORD(v427) = 0;
              WTF::fastFree(v378, v211);
LABEL_496:
              if ((_DWORD)v370)
              {
                v383 = (WTF *)((char *)v369 + 8 * v370);
                do
                {
                  v384 = *(unsigned int **)v369;
                  *(_QWORD *)v369 = 0;
                  if (v384)
                  {
                    v385 = v384 + 2;
                    do
                    {
                      v386 = __ldaxr(v385);
                      v387 = v386 - 1;
                    }
                    while (__stlxr(v387, v385));
                    if (!v387)
                    {
                      atomic_store(1u, v384 + 2);
                      (*(void (**)(unsigned int *))(*(_QWORD *)v384 + 8))(v384);
                    }
                  }
                  v369 = (WTF *)((char *)v369 + 8);
                }
                while (v369 != v383);
                v369 = (WTF *)v428;
              }
              v199 = v402;
              if (v369)
                WTF::fastFree(v369, v211);
              v388 = v424;
              if (HIDWORD(v425))
              {
                v389 = (WTF *)((char *)v424 + 8 * HIDWORD(v425));
                do
                {
                  v390 = *(unsigned int **)v388;
                  *(_QWORD *)v388 = 0;
                  if (v390)
                  {
                    v391 = v390 + 2;
                    do
                    {
                      v392 = __ldaxr(v391);
                      v393 = v392 - 1;
                    }
                    while (__stlxr(v393, v391));
                    if (!v393)
                    {
                      atomic_store(1u, v390 + 2);
                      (*(void (**)(unsigned int *))(*(_QWORD *)v390 + 8))(v390);
                    }
                  }
                  v388 = (WTF *)((char *)v388 + 8);
                }
                while (v388 != v389);
                v388 = v424;
                v199 = v402;
              }
              if (v388)
                WTF::fastFree(v388, v211);
              (*(void (**)(_QWORD *))(*v408 + 8))(v408);
LABEL_519:
              v394 = v420;
              v420 = 0;
              if (v394)
              {
                if (*(_DWORD *)v394 == 2)
                  WTF::StringImpl::destroy(v394, v206);
                else
                  *(_DWORD *)v394 -= 2;
              }
              WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v199);
              goto LABEL_523;
            }
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v207);
          goto LABEL_285;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v17);
      goto LABEL_43;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v11);
  if (v12)
    goto LABEL_30;
LABEL_523:
  if (HIDWORD(v4))
  {
    v395 = (v4 >> 29) & 0x7FFFFFFF8;
    v396 = v403;
    do
    {
      v397 = *(WebCore::MediaStreamTrackPrivate **)v396;
      *(_QWORD *)v396 = 0;
      if (v397)
      {
        if (*((_DWORD *)v397 + 2) == 1)
        {
          WebCore::MediaStreamTrackPrivate::~MediaStreamTrackPrivate(v397, a2);
          WTF::fastFree(v398, v399);
        }
        else
        {
          --*((_DWORD *)v397 + 2);
        }
      }
      v396 = (WTF *)((char *)v396 + 8);
      v395 -= 8;
    }
    while (v395);
  }
  this = v403;
  if (v403)
    return (WTF *)WTF::fastFree(v403, a2);
  return this;
}

void sub_19479AB84(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, unint64_t a9, uint64_t a10, unsigned __int8 **a11, WTF *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,WTF::StringImpl *a21,uint64_t a22,WTF *a23,int a24,int a25,WTF *a26,int a27,unsigned int a28)
{
  uint64_t v28;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  WTF *v33;
  WTF *v34;
  unsigned int *v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  WebCore::MediaStreamTrackPrivate **v39;
  uint64_t v40;
  WebCore::MediaStreamTrackPrivate *v41;
  WTF *v42;
  void *v43;
  WTF *v44;
  unsigned int *v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  WTF::StringImpl *v49;
  void *v50;
  unint64_t v51;
  WTF *v52;
  WebCore::MediaStreamTrackPrivate *v53;
  WTF *v54;
  void *v55;

  v30 = *(unsigned int *)(v28 - 108);
  if ((_DWORD)v30)
  {
    v39 = *(WebCore::MediaStreamTrackPrivate ***)(v28 - 120);
    v40 = 8 * v30;
    do
    {
      v41 = *v39;
      *v39 = 0;
      if (v41)
      {
        if (*((_DWORD *)v41 + 2) == 1)
        {
          WebCore::MediaStreamTrackPrivate::~MediaStreamTrackPrivate(v41, a2);
          WTF::fastFree(v42, v43);
        }
        else
        {
          --*((_DWORD *)v41 + 2);
        }
      }
      ++v39;
      v40 -= 8;
    }
    while (v40);
  }
  v31 = *(WTF **)(v28 - 120);
  if (v31)
  {
    *(_QWORD *)(v28 - 120) = 0;
    *(_DWORD *)(v28 - 112) = 0;
    WTF::fastFree(v31, a2);
  }
  v32 = *(unsigned int *)(v28 - 92);
  v33 = *(WTF **)(v28 - 104);
  if ((_DWORD)v32)
  {
    v34 = (WTF *)((char *)v33 + 8 * v32);
    do
    {
      v35 = *(unsigned int **)v33;
      *(_QWORD *)v33 = 0;
      if (v35)
      {
        v36 = v35 + 2;
        do
        {
          v37 = __ldaxr(v36);
          v38 = v37 - 1;
        }
        while (__stlxr(v38, v36));
        if (!v38)
        {
          atomic_store(1u, v35 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v35 + 8))(v35);
        }
      }
      v33 = (WTF *)((char *)v33 + 8);
    }
    while (v33 != v34);
    v33 = *(WTF **)(v28 - 104);
  }
  if (v33)
    WTF::fastFree(v33, a2);
  v44 = a26;
  if (a28)
  {
    do
    {
      v45 = *(unsigned int **)v44;
      *(_QWORD *)v44 = 0;
      if (v45)
      {
        v46 = v45 + 2;
        do
        {
          v47 = __ldaxr(v46);
          v48 = v47 - 1;
        }
        while (__stlxr(v48, v46));
        if (!v48)
        {
          atomic_store(1u, v45 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v45 + 8))(v45);
        }
      }
      v44 = (WTF *)((char *)v44 + 8);
    }
    while (v44 != (WTF *)((char *)a26 + 8 * a28));
    v44 = a26;
  }
  if (v44)
    WTF::fastFree(v44, a2);
  (*(void (**)(uint64_t))(*(_QWORD *)a15 + 8))(a15);
  if (a21)
  {
    if (*(_DWORD *)a21 == 2)
      WTF::StringImpl::destroy(a21, v49);
    else
      *(_DWORD *)a21 -= 2;
  }
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*a11);
  if (HIDWORD(a9))
  {
    v51 = (a9 >> 29) & 0x7FFFFFFF8;
    v52 = a12;
    do
    {
      v53 = *(WebCore::MediaStreamTrackPrivate **)v52;
      *(_QWORD *)v52 = 0;
      if (v53)
      {
        if (*((_DWORD *)v53 + 2) == 1)
        {
          WebCore::MediaStreamTrackPrivate::~MediaStreamTrackPrivate(v53, v50);
          WTF::fastFree(v54, v55);
        }
        else
        {
          --*((_DWORD *)v53 + 2);
        }
      }
      v52 = (WTF *)((char *)v52 + 8);
      v51 -= 8;
    }
    while (v51);
  }
  if (a12)
    WTF::fastFree(a12, v50);
  _Unwind_Resume(a1);
}

uint64_t WebCore::MediaPlayerPrivateMediaStreamAVFObjC::didPassCORSAccessCheck(WebCore::MediaPlayerPrivateMediaStreamAVFObjC *this)
{
  return 1;
}

WTF::MonotonicTime *WebCore::MediaPlayerPrivateMediaStreamAVFObjC::cancelLoad(WTF::MonotonicTime *this)
{
  WTF::MonotonicTime *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[4];

  v1 = this;
  v2 = *((_QWORD *)this + 37);
  v3 = *((_QWORD *)this + 38);
  v5[0] = "MediaPlayerPrivateMediaStreamAVFObjC";
  v5[1] = 37;
  v5[2] = "cancelLoad";
  v5[3] = v3;
  if (*(_BYTE *)(v2 + 12))
  {
    if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
      this = (WTF::MonotonicTime *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 3, (WTF::Logger::LogSiteIdentifier *)v5);
  }
  if (*((_DWORD *)v1 + 69) == 1)
    return WebCore::MediaPlayerPrivateMediaStreamAVFObjC::pause(v1);
  return this;
}

WTF::MonotonicTime *WebCore::MediaPlayerPrivateMediaStreamAVFObjC::pause(WTF::MonotonicTime *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  WTF::MediaTime *v4;
  double v5;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _BYTE *v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;

  v1 = (uint64_t)this;
  v2 = *((_QWORD *)this + 37);
  v3 = *((_QWORD *)this + 38);
  v17 = "MediaPlayerPrivateMediaStreamAVFObjC";
  v18 = 37;
  v19 = "pause";
  v20 = v3;
  if (*(_BYTE *)(v2 + 12))
    this = (WTF::MonotonicTime *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v17);
  if (*(_QWORD *)(v1 + 136) && *(_BYTE *)(v1 + 257) && *(_DWORD *)(v1 + 276) == 1 && !*(_BYTE *)(v1 + 346))
  {
    v4 = (WTF::MediaTime *)WTF::MonotonicTime::now(this);
    v17 = (const char *)WTF::MediaTime::createWithDouble(v4, v5);
    v18 = v6;
    *(_QWORD *)(v1 + 168) = WTF::MediaTime::operator-();
    *(_DWORD *)(v1 + 176) = v7;
    *(_BYTE *)(v1 + 180) = v8;
    *(_DWORD *)(v1 + 276) = 2;
    if (*(_DWORD *)(v1 + 220))
    {
      v9 = *(unsigned int *)(v1 + 216);
      if ((_DWORD)v9)
      {
        v10 = 16 * v9;
        v11 = *(_QWORD **)(v1 + 208);
        while (!*v11)
        {
          v11 += 2;
          v10 -= 16;
          if (!v10)
            goto LABEL_12;
        }
      }
      else
      {
        v11 = *(_QWORD **)(v1 + 208);
      }
      v15 = *(_QWORD *)(v1 + 208) + 16 * v9;
LABEL_21:
      if (v11 != (_QWORD *)v15)
      {
        v16 = (_BYTE *)v11[1];
        v16[117] = 0;
        WebCore::AudioTrackPrivateMediaStream::updateRenderer(v16);
        while (1)
        {
          v11 += 2;
          if (v11 == (_QWORD *)v15)
            break;
          if (*v11)
            goto LABEL_21;
        }
      }
    }
LABEL_12:
    v12 = *(_QWORD *)(v1 + 280);
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 80))(v12);
    WebCore::MediaPlayerPrivateMediaStreamAVFObjC::updateDisplayMode(v1);
    v13 = *(_QWORD *)(v1 + 280);
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 56))(v13);
    v14 = (char *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v14 = off_1E3206490;
    *((_QWORD *)v14 + 1) = v1;
    v17 = v14;
    WebCore::MediaPlayerPrivateMediaStreamAVFObjC::scheduleDeferredTask(v1, (uint64_t *)&v17);
    this = (WTF::MonotonicTime *)v17;
    if (v17)
      return (WTF::MonotonicTime *)(*(uint64_t (**)(const char *))(*(_QWORD *)v17 + 8))(v17);
  }
  return this;
}

void sub_19479B354(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::MediaPlayerPrivateMediaStreamAVFObjC::prepareToPlay(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  _QWORD v4[4];

  v1 = *(_QWORD *)(this + 296);
  v2 = *(_QWORD *)(this + 304);
  v4[0] = "MediaPlayerPrivateMediaStreamAVFObjC";
  v4[1] = 37;
  v4[2] = "prepareToPlay";
  v4[3] = v2;
  if (*(_BYTE *)(v1 + 12))
  {
    if (WebCore::LogMedia)
      v3 = byte_1ECE7C490 >= 3u;
    else
      v3 = 0;
    if (v3)
      return WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 3, (WTF::Logger::LogSiteIdentifier *)v4);
  }
  return this;
}

uint64_t WebCore::MediaPlayerPrivateMediaStreamAVFObjC::platformLayer(WebCore::MediaPlayerPrivateMediaStreamAVFObjC *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 35);
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 112))(result);
    if (result)
    {
      if (*((_DWORD *)this + 68))
        return *(_QWORD *)(*((_QWORD *)this + 39) + 32);
      else
        return 0;
    }
  }
  return result;
}

WTF::MonotonicTime *WebCore::MediaPlayerPrivateMediaStreamAVFObjC::play(WTF::MonotonicTime *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  WTF::MediaTime *v4;
  double v5;
  int v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15[4];

  v1 = (uint64_t)this;
  v2 = *((_QWORD *)this + 37);
  v3 = *((_QWORD *)this + 38);
  v15[0] = (uint64_t)"MediaPlayerPrivateMediaStreamAVFObjC";
  v15[1] = 37;
  v15[2] = (uint64_t)"play";
  v15[3] = v3;
  if (*(_BYTE *)(v2 + 12))
    this = (WTF::MonotonicTime *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v15);
  if (*(_QWORD *)(v1 + 136) && *(_BYTE *)(v1 + 257) && *(_DWORD *)(v1 + 276) != 1 && !*(_BYTE *)(v1 + 346))
  {
    *(_DWORD *)(v1 + 276) = 1;
    if ((*(_BYTE *)(v1 + 164) & 1) == 0)
    {
      v4 = (WTF::MediaTime *)WTF::MonotonicTime::now(this);
      *(_QWORD *)(v1 + 152) = WTF::MediaTime::createWithDouble(v4, v5);
      *(_DWORD *)(v1 + 160) = v6;
      *(_BYTE *)(v1 + 164) = v7;
    }
    if (*(_DWORD *)(v1 + 220))
    {
      v8 = *(unsigned int *)(v1 + 216);
      if ((_DWORD)v8)
      {
        v9 = 16 * v8;
        v10 = *(_QWORD **)(v1 + 208);
        while (!*v10)
        {
          v10 += 2;
          v9 -= 16;
          if (!v9)
            goto LABEL_22;
        }
      }
      else
      {
        v10 = *(_QWORD **)(v1 + 208);
      }
      v11 = *(_QWORD *)(v1 + 208) + 16 * v8;
      if (v10 != (_QWORD *)v11)
      {
LABEL_17:
        v12 = (_BYTE *)v10[1];
        if (!v12[117])
        {
          v12[117] = 1;
          WebCore::AudioTrackPrivateMediaStream::updateRenderer(v12);
        }
        while (1)
        {
          v10 += 2;
          if (v10 == (_QWORD *)v11)
            break;
          if (*v10)
          {
            if (v10 != (_QWORD *)v11)
              goto LABEL_17;
            break;
          }
        }
      }
    }
LABEL_22:
    v13 = *(_QWORD *)(v1 + 280);
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 72))(v13);
    WebCore::MediaPlayerPrivateMediaStreamAVFObjC::updateDisplayMode(v1);
    WebCore::MediaPlayerPrivateMediaStreamAVFObjC::reenqueueCurrentVideoFrameIfNeeded(v1);
    v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v14 = off_1E3206468;
    v14[1] = v1;
    v15[0] = (uint64_t)v14;
    WebCore::MediaPlayerPrivateMediaStreamAVFObjC::scheduleDeferredTask(v1, v15);
    this = (WTF::MonotonicTime *)v15[0];
    if (v15[0])
      return (WTF::MonotonicTime *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15[0] + 8))(v15[0]);
  }
  return this;
}

void sub_19479B5B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::MediaPlayerPrivateMediaStreamAVFObjC::currentTime(WebCore::MediaPlayerPrivateMediaStreamAVFObjC *this)
{
  WTF::MediaTime *v1;
  double v2;

  if (*((_DWORD *)this + 69) != 1)
    return *((_QWORD *)this + 21);
  v1 = (WTF::MediaTime *)WTF::MonotonicTime::now(this);
  WTF::MediaTime::createWithDouble(v1, v2);
  return WTF::MediaTime::operator-();
}

uint64_t WebCore::MediaPlayerPrivateMediaStreamAVFObjC::setVolume(uint64_t this, float a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[4];
  float v12;

  v12 = a2;
  if (*(float *)(this + 268) != a2)
  {
    v2 = this;
    v3 = *(_QWORD *)(this + 296);
    v4 = *(_QWORD *)(this + 304);
    v11[0] = "MediaPlayerPrivateMediaStreamAVFObjC";
    v11[1] = 37;
    v11[2] = "setVolume";
    v11[3] = v4;
    if (*(_BYTE *)(v3 + 12))
    {
      this = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,float>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v11, &v12);
      a2 = v12;
    }
    *(float *)(v2 + 268) = a2;
    if (*(_DWORD *)(v2 + 220))
    {
      v5 = *(unsigned int *)(v2 + 216);
      if ((_DWORD)v5)
      {
        v6 = 16 * v5;
        for (i = *(_QWORD **)(v2 + 208); !*i; i += 2)
        {
          v6 -= 16;
          if (!v6)
            return this;
        }
      }
      else
      {
        i = *(_QWORD **)(v2 + 208);
      }
      v8 = *(_QWORD *)(v2 + 208) + 16 * v5;
LABEL_13:
      if (i != (_QWORD *)v8)
      {
        v9 = i[1];
        v10 = *(_QWORD *)(v9 + 144);
        if (v10)
          (*(void (**)(uint64_t, float))(*(_QWORD *)v10 + 80))(v10, *(float *)(v2 + 268));
        this = (uint64_t)WebCore::AudioTrackPrivateMediaStream::updateRenderer((_BYTE *)v9);
        while (1)
        {
          i += 2;
          if (i == (_QWORD *)v8)
            break;
          if (*i)
            goto LABEL_13;
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::MediaPlayerPrivateMediaStreamAVFObjC::setMuted(uint64_t this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *i;
  uint64_t v8;
  _BYTE *v9;
  _QWORD v10[4];
  char v11;

  v11 = a2;
  if (*(unsigned __int8 *)(this + 345) != a2)
  {
    v2 = this;
    v3 = *(_QWORD *)(this + 296);
    v4 = *(_QWORD *)(this + 304);
    v10[0] = "MediaPlayerPrivateMediaStreamAVFObjC";
    v10[1] = 37;
    v10[2] = "setMuted";
    v10[3] = v4;
    if (*(_BYTE *)(v3 + 12))
    {
      this = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v10);
      LOBYTE(a2) = v11;
    }
    *(_BYTE *)(v2 + 345) = a2;
    if (*(_DWORD *)(v2 + 220))
    {
      v5 = *(unsigned int *)(v2 + 216);
      if ((_DWORD)v5)
      {
        v6 = 16 * v5;
        for (i = *(_QWORD **)(v2 + 208); !*i; i += 2)
        {
          v6 -= 16;
          if (!v6)
            return this;
        }
      }
      else
      {
        i = *(_QWORD **)(v2 + 208);
      }
      v8 = *(_QWORD *)(v2 + 208) + 16 * v5;
LABEL_12:
      if (i != (_QWORD *)v8)
      {
        v9 = (_BYTE *)i[1];
        v9[118] = *(_BYTE *)(v2 + 345);
        this = (uint64_t)WebCore::AudioTrackPrivateMediaStream::updateRenderer(v9);
        while (1)
        {
          i += 2;
          if (i == (_QWORD *)v8)
            break;
          if (*i)
            goto LABEL_12;
        }
      }
    }
  }
  return this;
}

BOOL WebCore::MediaPlayerPrivateMediaStreamAVFObjC::hasVideo(WebCore::MediaPlayerPrivateMediaStreamAVFObjC *this)
{
  return *((_DWORD *)this + 61) != 0;
}

BOOL WebCore::MediaPlayerPrivateMediaStreamAVFObjC::hasAudio(WebCore::MediaPlayerPrivateMediaStreamAVFObjC *this)
{
  return *((_DWORD *)this + 55) != 0;
}

uint64_t WebCore::MediaPlayerPrivateMediaStreamAVFObjC::setPageIsVisible(uint64_t this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[4];
  char v7;

  v7 = a2;
  if (*(unsigned __int8 *)(this + 348) != a2)
  {
    v2 = this;
    v3 = *(_QWORD *)(this + 296);
    v4 = *(_QWORD *)(this + 304);
    v6[0] = "MediaPlayerPrivateMediaStreamAVFObjC";
    v6[1] = 37;
    v6[2] = "setPageIsVisible";
    v6[3] = v4;
    if (*(_BYTE *)(v3 + 12))
    {
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v6);
      LOBYTE(a2) = v7;
    }
    *(_BYTE *)(v2 + 348) = a2;
    v5 = *(_QWORD *)(v2 + 280);
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 56))(v5);
    return WebCore::MediaPlayerPrivateMediaStreamAVFObjC::reenqueueCurrentVideoFrameIfNeeded(v2);
  }
  return this;
}

uint64_t WebCore::MediaPlayerPrivateMediaStreamAVFObjC::setVisibleInViewport(uint64_t this, char a2)
{
  *(_BYTE *)(this + 349) = a2;
  return this;
}

uint64_t WebCore::MediaPlayerPrivateMediaStreamAVFObjC::duration(WebCore::MediaPlayerPrivateMediaStreamAVFObjC *this)
{
  return *(_QWORD *)WTF::MediaTime::positiveInfiniteTime(this);
}

BOOL WebCore::MediaPlayerPrivateMediaStreamAVFObjC::paused(WebCore::MediaPlayerPrivateMediaStreamAVFObjC *this)
{
  return *((_DWORD *)this + 69) != 1;
}

uint64_t WebCore::MediaPlayerPrivateMediaStreamAVFObjC::networkState(WebCore::MediaPlayerPrivateMediaStreamAVFObjC *this)
{
  return *((unsigned __int8 *)this + 256);
}

uint64_t WebCore::MediaPlayerPrivateMediaStreamAVFObjC::readyState(WebCore::MediaPlayerPrivateMediaStreamAVFObjC *this)
{
  return *((unsigned __int8 *)this + 257);
}

uint64_t WebCore::MediaPlayerPrivateMediaStreamAVFObjC::currentReadyState(WebCore::MediaPlayerPrivateMediaStreamAVFObjC *this)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v10;
  char v11;

  v1 = *((_QWORD *)this + 17);
  if (!v1 || !*(_BYTE *)(v1 + 88) || !*(_DWORD *)(v1 + 76))
    return 0;
  if (!WebCore::MediaPlayerPrivateMediaStreamAVFObjC::activeVideoTrack(this) || *((_QWORD *)this + 24))
  {
    v11 = 1;
    v3 = *((_QWORD *)this + 17);
    v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v4 = off_1E32064B8;
    v4[1] = &v11;
    if (*(_DWORD *)(v3 + 76))
    {
      v5 = *(_QWORD *)(v3 + 64);
      v6 = *(unsigned int *)(v3 + 72);
      if ((_DWORD)v6)
      {
        v7 = 16 * v6;
        v8 = *(_QWORD **)(v3 + 64);
        while (!*v8)
        {
          v8 += 2;
          v7 -= 16;
          if (!v7)
            goto LABEL_11;
        }
      }
      else
      {
        v8 = *(_QWORD **)(v3 + 64);
      }
      v10 = (_QWORD *)(v5 + 16 * v6);
LABEL_22:
      if (v8 != v10)
      {
        (*(void (**)(_QWORD *, _QWORD))(*v4 + 16))(v4, v8[1]);
        while (1)
        {
          v8 += 2;
          if (v8 == v10)
            break;
          if (*v8)
            goto LABEL_22;
        }
      }
    }
LABEL_11:
    (*(void (**)(_QWORD *))(*v4 + 8))(v4);
    if (*((_BYTE *)this + 351) || !v11 && !*((_BYTE *)this + 350))
      return 1;
    return 4;
  }
  if (!*((_BYTE *)this + 350) || *((_BYTE *)this + 351))
    return 0;
  return 4;
}

unsigned __int8 *WebCore::MediaPlayerPrivateMediaStreamAVFObjC::setReadyState(unsigned __int8 *this, void *a2)
{
  unsigned __int8 *v2;
  uint64_t v3;
  uint64_t v4;
  int v6;
  WTF::MediaTime *v7;
  WTF::MediaTime *v8;
  WTF::MediaTime *v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD v12[3];

  if (this[257] == (_DWORD)a2)
    return this;
  v2 = this;
  if ((_DWORD)a2)
    this[350] = 1;
  this[257] = a2;
  this = (unsigned __int8 *)WebCore::MediaPlayerPrivateMediaStreamAVFObjC::characteristicsChanged((WebCore::MediaPlayerPrivateMediaStreamAVFObjC *)this, a2);
  v3 = *((_QWORD *)v2 + 15);
  if (!v3)
    return this;
  v4 = *((_QWORD *)v2 + 16);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_9;
  }
  this = (unsigned __int8 *)MEMORY[0x19AEA534C](v3);
LABEL_9:
  if (*(_QWORD *)(v3 + 24))
    ++*(_QWORD *)(v3 + 8);
  else
    v4 = 0;
  v6 = __ldxr((unsigned __int8 *)v3);
  if (v6 != 1)
    goto LABEL_19;
  if (__stlxr(0, (unsigned __int8 *)v3))
    goto LABEL_20;
  if (v4)
  {
    while (1)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v4 + 8) + 8) + 24))(*(_QWORD *)(*(_QWORD *)(v4 + 8) + 8));
      if (!*(_BYTE *)(v4 + 192))
        break;
      v7 = (WTF::MediaTime *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 72) + 560))(*(_QWORD *)(v4 + 72));
      if ((_DWORD)v7 != 1)
        break;
      if (*(_BYTE *)(v4 + 192))
      {
        *(_BYTE *)(v4 + 192) = 0;
        v12[0] = *(_OWORD *)(v4 + 176);
        v8 = (WTF::MediaTime *)WTF::MediaTime::zeroTime(v7);
        v12[1] = *(_OWORD *)v8;
        v9 = (WTF::MediaTime *)WTF::MediaTime::zeroTime(v8);
        v12[2] = *(_OWORD *)v9;
        v10 = *(_QWORD *)(v4 + 72);
        v11 = WTF::MediaTime::invalidTime(v9);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 384))(v10, v11);
        (*(void (**)(_QWORD, _OWORD *))(**(_QWORD **)(v4 + 72) + 400))(*(_QWORD *)(v4 + 72), v12);
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v4);
      }
      __break(1u);
LABEL_19:
      __clrex();
LABEL_20:
      this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v3);
      if (!v4)
        return this;
    }
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v4);
  }
  return this;
}

_QWORD *WebCore::MediaPlayerPrivateMediaStreamAVFObjC::activeStatusChanged(WebCore::MediaPlayerPrivateMediaStreamAVFObjC *this)
{
  _QWORD *v2;
  _QWORD *result;
  _QWORD *v4;

  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E32064E0;
  v2[1] = this;
  v4 = v2;
  WebCore::MediaPlayerPrivateMediaStreamAVFObjC::scheduleDeferredTask((uint64_t)this, (uint64_t *)&v4);
  result = v4;
  if (v4)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  return result;
}

void sub_19479BC20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *`non-virtual thunk to'WebCore::MediaPlayerPrivateMediaStreamAVFObjC::activeStatusChanged(WebCore::MediaPlayerPrivateMediaStreamAVFObjC *this)
{
  char *v1;
  _QWORD *v2;
  _QWORD *result;
  _QWORD *v4;

  v1 = (char *)this - 56;
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E32064E0;
  v2[1] = v1;
  v4 = v2;
  WebCore::MediaPlayerPrivateMediaStreamAVFObjC::scheduleDeferredTask((uint64_t)v1, (uint64_t *)&v4);
  result = v4;
  if (v4)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  return result;
}

void sub_19479BCA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::MediaPlayerPrivateMediaStreamAVFObjC::characteristicsChanged(WebCore::MediaPlayerPrivateMediaStreamAVFObjC *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  float v6;
  float v7;
  BOOL v8;
  char v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  v3 = *(_QWORD *)(*((_QWORD *)this + 17) + 56);
  if (v3)
  {
    v5 = *(_DWORD *)(v3 + 104);
    v4 = *(_DWORD *)(v3 + 108);
    v6 = (float)v5;
    v7 = (float)v4;
    if (v5)
      v8 = v4 == 0;
    else
      v8 = 1;
    if (!v8 && *((float *)this + 65) > 0.0 && *((float *)this + 66) > 0.0)
      goto LABEL_15;
  }
  else
  {
    v6 = 0.0;
    v7 = 0.0;
  }
  if (v7 == *((float *)this + 66) && v6 == *((float *)this + 65))
  {
LABEL_15:
    v9 = 0;
    goto LABEL_16;
  }
  *((float *)this + 65) = v6;
  *((float *)this + 66) = v7;
  if (!*((_DWORD *)this + 69))
    *((_DWORD *)this + 69) = 2;
  v9 = 1;
LABEL_16:
  WebCore::MediaPlayerPrivateMediaStreamAVFObjC::updateTracks(this, a2);
  WebCore::MediaPlayerPrivateMediaStreamAVFObjC::updateDisplayMode((uint64_t)this);
  v10 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v10 = off_1E3206530;
  *(_QWORD *)(v10 + 8) = this;
  *(_BYTE *)(v10 + 16) = v9;
  v12 = v10;
  WebCore::MediaPlayerPrivateMediaStreamAVFObjC::scheduleDeferredTask((uint64_t)this, &v12);
  result = v12;
  if (v12)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  return result;
}

void sub_19479BDC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t `non-virtual thunk to'WebCore::MediaPlayerPrivateMediaStreamAVFObjC::characteristicsChanged(WebCore::MediaPlayerPrivateMediaStreamAVFObjC *this, void *a2)
{
  return WebCore::MediaPlayerPrivateMediaStreamAVFObjC::characteristicsChanged((WebCore::MediaPlayerPrivateMediaStreamAVFObjC *)((char *)this - 56), a2);
}

WTF *`non-virtual thunk to'WebCore::MediaPlayerPrivateMediaStreamAVFObjC::didAddTrack(WebCore::MediaPlayerPrivateMediaStreamAVFObjC *this, WebCore::MediaStreamTrackPrivate *a2)
{
  return WebCore::MediaPlayerPrivateMediaStreamAVFObjC::updateTracks((WebCore::MediaPlayerPrivateMediaStreamAVFObjC *)((char *)this - 56), a2);
}

WTF *`non-virtual thunk to'WebCore::MediaPlayerPrivateMediaStreamAVFObjC::didRemoveTrack(WebCore::MediaPlayerPrivateMediaStreamAVFObjC *this, WebCore::MediaStreamTrackPrivate *a2)
{
  return WebCore::MediaPlayerPrivateMediaStreamAVFObjC::updateTracks((WebCore::MediaPlayerPrivateMediaStreamAVFObjC *)((char *)this - 56), a2);
}

_QWORD *WebCore::MediaPlayerPrivateMediaStreamAVFObjC::readyStateChanged(WebCore::MediaPlayerPrivateMediaStreamAVFObjC *this, WebCore::MediaStreamTrackPrivate *a2)
{
  _QWORD *v3;
  _QWORD *result;
  _QWORD *v5;

  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = off_1E3206558;
  v3[1] = this;
  v5 = v3;
  WebCore::MediaPlayerPrivateMediaStreamAVFObjC::scheduleDeferredTask((uint64_t)this, (uint64_t *)&v5);
  result = v5;
  if (v5)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v5 + 8))(v5);
  return result;
}

void sub_19479BE70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *`non-virtual thunk to'WebCore::MediaPlayerPrivateMediaStreamAVFObjC::readyStateChanged(WebCore::MediaPlayerPrivateMediaStreamAVFObjC *this, WebCore::MediaStreamTrackPrivate *a2)
{
  char *v2;
  _QWORD *v3;
  _QWORD *result;
  _QWORD *v5;

  v2 = (char *)this - 72;
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = off_1E3206558;
  v3[1] = v2;
  v5 = v3;
  WebCore::MediaPlayerPrivateMediaStreamAVFObjC::scheduleDeferredTask((uint64_t)v2, (uint64_t *)&v5);
  result = v5;
  if (v5)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v5 + 8))(v5);
  return result;
}

void sub_19479BEF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

id WebCore::MediaPlayerPrivateMediaStreamAVFObjC::createVideoFullscreenLayer@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = objc_alloc_init(MEMORY[0x1E0CD27A8]);
  *a1 = result;
  return result;
}

void WebCore::MediaPlayerPrivateMediaStreamAVFObjC::setVideoFullscreenLayer(WebCore::MediaPlayerPrivateMediaStreamAVFObjC *a1, const void *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  CFTypeRef v9;
  CFTypeRef cf;

  WebCore::MediaPlayerPrivateMediaStreamAVFObjC::updateCurrentFrameImage(a1);
  v6 = *((_QWORD *)a1 + 39);
  v7 = *((_QWORD *)a1 + 23);
  if (v7)
  {
    v8 = *(const void **)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 48) + 16))(*(_QWORD *)(v7 + 48));
    cf = v8;
    if (v8)
      CFRetain(v8);
  }
  else
  {
    cf = 0;
  }
  WebCore::VideoLayerManagerObjC::setVideoFullscreenLayer(v6, a2, a3, &cf);
  v9 = cf;
  cf = 0;
  if (v9)
    CFRelease(v9);
}

void sub_19479BFD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void WebCore::MediaPlayerPrivateMediaStreamAVFObjC::updateCurrentFrameImage(WebCore::MediaPlayerPrivateMediaStreamAVFObjC *this)
{
  void *v2;
  CGImageRef v3;
  uint64_t v4;
  uint64_t v5;
  WebCore *v7;
  uint64_t IdentifierInternal;
  void *v9;
  CGImage *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  CGImageRef v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  int v29;
  uint64_t v30;
  const void **v31;
  void *v32;
  const void *v33;
  WTF *v34;
  const void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  CGImageRef image;
  uint64_t v45;
  _QWORD v46[2];

  v46[1] = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)this + 23) || !*((_QWORD *)this + 24))
    return;
  if (!WebCore::MediaPlayerPrivateMediaStreamAVFObjC::m_nativeImageCreator)
  {
    if (!*((_QWORD *)this + 25))
    {
      if (WebCore::get_CoreVideo_kCVPixelBufferPixelFormatTypeKey(void)::once != -1)
        dispatch_once(&WebCore::get_CoreVideo_kCVPixelBufferPixelFormatTypeKey(void)::once, &__block_literal_global_13_3);
      v45 = WebCore::get_CoreVideo_kCVPixelBufferPixelFormatTypeKey(void)::constantCoreVideokCVPixelBufferPixelFormatTypeKey;
      v46[0] = &unk_1E349D6F0;
      v30 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v46, &v45, 1);
      v31 = (const void **)WTF::fastMalloc((WTF *)8);
      *v31 = 0;
      image = 0;
      WebCore::softLinkVideoToolboxVTPixelBufferConformerCreateWithAttributes(*MEMORY[0x1E0C9AE00], v30, &image);
      v33 = *v31;
      *v31 = image;
      if (v33)
        CFRelease(v33);
      v34 = (WTF *)*((_QWORD *)this + 25);
      *((_QWORD *)this + 25) = v31;
      if (v34)
      {
        v35 = *(const void **)v34;
        *(_QWORD *)v34 = 0;
        if (v35)
          CFRelease(v35);
        WTF::fastFree(v34, v32);
        if (!*((_QWORD *)this + 25))
          return;
      }
    }
    v7 = (WebCore *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 24) + 56))(*((_QWORD *)this + 24));
    if (!v7)
      return;
    WebCore::PixelBufferConformerCV::createImageFromPixelBuffer(*((WebCore::PixelBufferConformerCV **)this + 25), v7, &image);
    if (WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::m_generationProtected)
    {
      __break(0xC471u);
      JUMPOUT(0x19479C414);
    }
    IdentifierInternal = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
    v10 = image;
    if (image)
    {
      v11 = IdentifierInternal;
      if (CGImageGetWidth(image) >> 31 || CGImageGetHeight(v10) >> 31)
      {
        v10 = 0;
      }
      else
      {
        v12 = (_QWORD *)operator new();
        image = 0;
        *v12 = &off_1E340E810;
        v12[1] = v10;
        v10 = (CGImage *)WTF::fastMalloc((WTF *)0x38);
        v13 = WTF::fastMalloc((WTF *)0x20);
        *(_BYTE *)v13 = 0;
        *(_OWORD *)(v13 + 8) = xmmword_19689B170;
        *(_QWORD *)(v13 + 24) = v10;
        *((_QWORD *)v10 + 2) = 0;
        *((_QWORD *)v10 + 3) = 0;
        *((_QWORD *)v10 + 4) = v11;
        *((_QWORD *)v10 + 5) = 1;
        *(_QWORD *)v10 = off_1E340E858;
        *((_QWORD *)v10 + 1) = v13;
        *((_QWORD *)v10 + 6) = v12;
      }
    }
    v14 = *((_QWORD *)this + 23);
    *((_QWORD *)this + 23) = v10;
    if (!v14)
    {
LABEL_72:
      if (image)
        CFRelease(image);
      return;
    }
    v15 = *(_QWORD *)(v14 + 8);
    if (__ldaxr((unsigned __int8 *)v15))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v15))
    {
      goto LABEL_60;
    }
    MEMORY[0x19AEA534C](v15);
LABEL_60:
    v36 = *(_QWORD *)(v15 + 8);
    v37 = v36 - 1;
    *(_QWORD *)(v15 + 8) = v36 - 1;
    if (v36 == 1)
    {
      v43 = *(_QWORD *)(v15 + 16);
      v38 = *(_QWORD *)(v15 + 24);
      *(_QWORD *)(v15 + 24) = 0;
      v39 = v43 != 0;
    }
    else
    {
      v38 = 0;
      v39 = 1;
    }
    v40 = __ldxr((unsigned __int8 *)v15);
    if (v40 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v15))
      {
LABEL_67:
        if (!v37)
        {
          if (v38)
            (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
          if (!v39)
            WTF::fastFree((WTF *)v15, v9);
        }
        goto LABEL_72;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v15);
    goto LABEL_67;
  }
  WebCore::MediaPlayerPrivateMediaStreamAVFObjC::m_nativeImageCreator(&image);
  v3 = image;
  image = 0;
  v4 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = v3;
  if (!v4)
    return;
  v5 = *(_QWORD *)(v4 + 8);
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v5))
  {
    goto LABEL_20;
  }
  MEMORY[0x19AEA534C](v5);
LABEL_20:
  v17 = *(_QWORD *)(v5 + 8);
  v18 = v17 - 1;
  *(_QWORD *)(v5 + 8) = v17 - 1;
  if (v17 == 1)
  {
    v41 = *(_QWORD *)(v5 + 16);
    v19 = *(_QWORD *)(v5 + 24);
    *(_QWORD *)(v5 + 24) = 0;
    v20 = v41 != 0;
  }
  else
  {
    v19 = 0;
    v20 = 1;
  }
  v21 = __ldxr((unsigned __int8 *)v5);
  if (v21 != 1)
  {
    __clrex();
    goto LABEL_26;
  }
  if (__stlxr(0, (unsigned __int8 *)v5))
LABEL_26:
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
  if (!v18)
  {
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    if (!v20)
      WTF::fastFree((WTF *)v5, v2);
  }
  v22 = image;
  image = 0;
  if (v22)
  {
    v23 = *((_QWORD *)v22 + 1);
    if (__ldaxr((unsigned __int8 *)v23))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v23))
    {
      goto LABEL_37;
    }
    MEMORY[0x19AEA534C](v23);
LABEL_37:
    v25 = *(_QWORD *)(v23 + 8);
    v26 = v25 - 1;
    *(_QWORD *)(v23 + 8) = v25 - 1;
    if (v25 == 1)
    {
      v42 = *(_QWORD *)(v23 + 16);
      v27 = *(_QWORD *)(v23 + 24);
      *(_QWORD *)(v23 + 24) = 0;
      v28 = v42 != 0;
    }
    else
    {
      v27 = 0;
      v28 = 1;
    }
    v29 = __ldxr((unsigned __int8 *)v23);
    if (v29 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v23))
      {
LABEL_44:
        if (!v26)
        {
          if (v27)
            (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
          if (!v28)
            WTF::fastFree((WTF *)v23, v2);
        }
        return;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v23);
    goto LABEL_44;
  }
}

void sub_19479C450(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebCore::MediaPlayerPrivateMediaStreamAVFObjC::setVideoFullscreenFrame(uint64_t a1, float a2, float a3, float a4, float a5)
{
  return WebCore::VideoLayerManagerObjC::setVideoFullscreenFrame(*(WTF::StringImpl **)(a1 + 312), a2, a3, a4, a5);
}

uint64_t WebCore::MediaPlayerPrivateMediaStreamAVFObjC::checkSelectedVideoTrack(WebCore::MediaPlayerPrivateMediaStreamAVFObjC *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t active;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  int v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  WTF *v30;
  const void *v31;
  uint64_t v32;
  _BOOL8 v33;
  _BOOL8 v34;
  uint64_t result;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 *v39;
  BOOL v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  BOOL v48;
  int v49;
  BOOL v50;
  int v51;
  unsigned int v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  NSObject *v57;
  uint64_t v58;
  void *v59;
  char *v60;
  unsigned __int8 *v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  WTF::Logger *v69;
  uint64_t v70;
  uint64_t v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::Logger *v74;
  uint64_t v75;
  WTF::StringImpl **v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  int v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int *v85;
  unsigned int v86;
  unsigned int *v87;
  unsigned int *v88;
  unsigned int v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93[4];
  WTF::Logger *v94;
  uint64_t v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  __int128 buf;
  int v101;
  WTF::StringImpl *v102;
  int v103;
  WTF::StringImpl *v104;
  uint64_t v105;

  v105 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 18);
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
    v5 = (unsigned int *)*((_QWORD *)this + 18);
    *((_QWORD *)this + 18) = 0;
    if (v5)
    {
      v6 = v5 + 2;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v5 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 18) = 0;
  }
  active = WebCore::MediaPlayerPrivateMediaStreamAVFObjC::activeVideoTrack(this);
  if (!active)
  {
    v14 = 1;
    goto LABEL_26;
  }
  if (*((_DWORD *)this + 61))
  {
    v11 = *((unsigned int *)this + 60);
    if ((_DWORD)v11)
    {
      v12 = 16 * v11;
      v13 = (_QWORD *)*((_QWORD *)this + 29);
      while (!*v13)
      {
        v13 += 2;
        v12 -= 16;
        if (!v12)
          goto LABEL_24;
      }
    }
    else
    {
      v13 = (_QWORD *)*((_QWORD *)this + 29);
    }
    v15 = *((_QWORD *)this + 29) + 16 * v11;
    if (v13 != (_QWORD *)v15)
    {
LABEL_19:
      v16 = v13[1];
      if (*(_QWORD *)(v16 + 104) == active)
      {
        v85 = (unsigned int *)(v16 + 8);
        do
          v86 = __ldaxr(v85);
        while (__stlxr(v86 + 1, v85));
        v87 = (unsigned int *)*((_QWORD *)this + 18);
        *((_QWORD *)this + 18) = v16;
        if (v87)
        {
          v88 = v87 + 2;
          do
          {
            v89 = __ldaxr(v88);
            v90 = v89 - 1;
          }
          while (__stlxr(v90, v88));
          if (!v90)
          {
            atomic_store(1u, v87 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v87 + 8))(v87);
          }
        }
        v17 = *(unsigned __int8 *)(v13[1] + 48) ^ 1;
        goto LABEL_25;
      }
      while (1)
      {
        v13 += 2;
        if (v13 == (_QWORD *)v15)
          break;
        if (*v13)
        {
          v17 = 1;
          if (v13 != (_QWORD *)v15)
            goto LABEL_19;
          goto LABEL_25;
        }
      }
    }
  }
LABEL_24:
  v17 = 1;
LABEL_25:
  v14 = v17 != 0;
LABEL_26:
  if (v2 == *((_QWORD *)this + 18))
    goto LABEL_55;
  v18 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (!v18)
    goto LABEL_44;
  v19 = *(_QWORD *)(v18 + 8);
  if (__ldaxr((unsigned __int8 *)v19))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v19))
  {
    goto LABEL_32;
  }
  MEMORY[0x19AEA534C](v19);
LABEL_32:
  v21 = *(_QWORD *)(v19 + 8);
  v22 = v21 - 1;
  *(_QWORD *)(v19 + 8) = v21 - 1;
  if (v21 == 1)
  {
    v91 = *(_QWORD *)(v19 + 16);
    v23 = *(_QWORD *)(v19 + 24);
    *(_QWORD *)(v19 + 24) = 0;
    v24 = v91 != 0;
  }
  else
  {
    v23 = 0;
    v24 = 1;
  }
  v25 = __ldxr((unsigned __int8 *)v19);
  if (v25 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v19))
    {
      if (!v22)
        goto LABEL_40;
      goto LABEL_44;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v19);
  if (!v22)
  {
LABEL_40:
    if (v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
    if (!v24)
      WTF::fastFree((WTF *)v19, v10);
  }
LABEL_44:
  v26 = (unsigned int *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v26)
  {
    v27 = v26 + 2;
    do
    {
      v28 = __ldaxr(v27);
      v29 = v28 - 1;
    }
    while (__stlxr(v29, v27));
    if (!v29)
    {
      atomic_store(1u, v26 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v26 + 8))(v26);
    }
  }
  v30 = (WTF *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v30)
  {
    v31 = *(const void **)v30;
    *(_QWORD *)v30 = 0;
    if (v31)
      CFRelease(v31);
    WTF::fastFree(v30, v10);
  }
  if (!*((_DWORD *)this + 68))
    *((_BYTE *)this + 351) = 1;
LABEL_55:
  WebCore::MediaPlayerPrivateMediaStreamAVFObjC::updateLayersAsNeeded(this);
  v32 = *((_QWORD *)this + 35);
  if (!v32)
    goto LABEL_66;
  if (*((_QWORD *)this + 18))
  {
    if (v14)
    {
LABEL_58:
      v33 = 1;
      goto LABEL_61;
    }
  }
  else
  {
    (*(void (**)(_QWORD))(*(_QWORD *)v32 + 104))(*((_QWORD *)this + 35));
    v32 = *((_QWORD *)this + 35);
    if (v14)
      goto LABEL_58;
  }
  v33 = *((_DWORD *)this + 68) < 3;
LABEL_61:
  v34 = (!WebCore::MediaPlayerPrivateMediaStreamAVFObjC::activeVideoTrack(this) || *((_BYTE *)this + 351))
     && *((_DWORD *)this + 68) != 1;
  (*(void (**)(uint64_t, _BOOL8, _BOOL8))(*(_QWORD *)v32 + 40))(v32, v33, v34);
LABEL_66:
  result = WebCore::MediaPlayerPrivateMediaStreamAVFObjC::updateDisplayMode((uint64_t)this);
  v36 = *((_QWORD *)this + 18);
  if (v2 == v36)
  {
    if (v2)
    {
      v41 = *(_BYTE *)(*(_QWORD *)(v2 + 104) + 73) != 0;
      goto LABEL_78;
    }
  }
  else
  {
    if (v2)
    {
      result = WebCore::RealtimeMediaSource::removeVideoFrameObserver(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 104) + 40) + 8), (uint64_t)this + 88);
      v36 = *((_QWORD *)this + 18);
    }
    if (v36)
    {
      v37 = *(_QWORD *)(v36 + 104);
      *((_BYTE *)this + 352) = *(_BYTE *)(v37 + 73);
      if (*((_QWORD *)this + 35)
        && (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v37 + 40) + 8) + 200))(*(_QWORD *)(*(_QWORD *)(v37 + 40) + 8)))
      {
        (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 35) + 128))(*((_QWORD *)this + 35), 1);
      }
      v38 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 18) + 104) + 40) + 8);
      v39 = (unsigned __int8 *)(v38 + 160);
      if (__ldaxr((unsigned __int8 *)(v38 + 160)))
      {
        __clrex();
      }
      else if (!__stxr(1u, v39))
      {
        goto LABEL_82;
      }
      MEMORY[0x19AEA534C](v38 + 160);
LABEL_82:
      v93[0] = (uint64_t)this + 88;
      v94 = 0;
      result = (uint64_t)WTF::HashMap<WebCore::RealtimeMediaSource::VideoFrameObserver *,std::unique_ptr<WebCore::VideoFrameAdaptor>,WTF::DefaultHash<WebCore::RealtimeMediaSource::VideoFrameObserver *>,WTF::HashTraits<WebCore::RealtimeMediaSource::VideoFrameObserver *>,WTF::HashTraits<std::unique_ptr<WebCore::VideoFrameAdaptor>>,WTF::HashTableTraits>::add<decltype(nullptr)>((uint64_t *)(v38 + 168), v93, (uint64_t)&buf);
      v42 = __ldxr(v39);
      if (v42 == 1)
      {
        if (!__stlxr(0, v39))
        {
LABEL_87:
          v43 = *((_QWORD *)this + 37);
          v44 = *((_QWORD *)this + 38);
          v93[0] = (uint64_t)"MediaPlayerPrivateMediaStreamAVFObjC";
          v93[1] = 37;
          v93[2] = (uint64_t)"checkSelectedVideoTrack";
          v93[3] = v44;
          if (!*(_BYTE *)(v43 + 12))
          {
LABEL_170:
            if (!v2)
              return result;
            goto LABEL_171;
          }
          WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v93);
          WTF::String::String((WTF::String *)&v97, "observing video source ");
          result = WTF::LogArgument<void const*>::toString();
          if (v98)
          {
            v45 = *((_DWORD *)v98 + 1);
            if (v97)
              goto LABEL_90;
          }
          else
          {
            v45 = 0;
            if (v97)
            {
LABEL_90:
              v46 = *((_DWORD *)v97 + 1);
              if (v96)
              {
LABEL_91:
                v47 = *((_DWORD *)v96 + 1);
LABEL_92:
                if ((v47 | v46) < 0)
                  goto LABEL_197;
                v48 = __OFADD__(v46, v47);
                v49 = v46 + v47;
                v50 = v48;
                if (v45 < 0)
                  goto LABEL_197;
                if (v50)
                  goto LABEL_197;
                result = (v45 + v49);
                if (__OFADD__(v45, v49))
                  goto LABEL_197;
                if (v98 && (*((_BYTE *)v98 + 16) & 4) == 0)
                {
                  v51 = 0;
                  goto LABEL_106;
                }
                if (v97)
                {
                  v52 = *((_DWORD *)v97 + 4);
                  v51 = (v52 >> 2) & 1;
                  if (v96 && (v52 & 4) != 0)
                    goto LABEL_105;
                }
                else
                {
                  if (v96)
                  {
LABEL_105:
                    v51 = (*((unsigned __int8 *)v96 + 16) >> 2) & 1;
                    goto LABEL_106;
                  }
                  v51 = 1;
                }
LABEL_106:
                result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v51, v98, (uint64_t)v97, (uint64_t)v96, &buf);
                v99 = (WTF::StringImpl *)buf;
                if ((_QWORD)buf)
                {
                  v54 = v96;
                  v96 = 0;
                  if (v54)
                  {
                    if (*(_DWORD *)v54 == 2)
                      WTF::StringImpl::destroy(v54, v53);
                    else
                      *(_DWORD *)v54 -= 2;
                  }
                  v55 = v97;
                  v97 = 0;
                  if (v55)
                  {
                    if (*(_DWORD *)v55 == 2)
                      WTF::StringImpl::destroy(v55, v53);
                    else
                      *(_DWORD *)v55 -= 2;
                  }
                  v56 = v98;
                  v98 = 0;
                  if (v56)
                  {
                    if (*(_DWORD *)v56 == 2)
                      WTF::StringImpl::destroy(v56, v53);
                    else
                      *(_DWORD *)v56 -= 2;
                  }
                  v57 = qword_1ECE7C4A0;
                  v58 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
                  if ((_DWORD)v58)
                  {
                    WTF::String::utf8();
                    v60 = v94 ? (char *)v94 + 16 : 0;
                    LODWORD(buf) = 136446210;
                    *(_QWORD *)((char *)&buf + 4) = v60;
                    _os_log_impl(&dword_1940B8000, v57, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
                    v58 = (uint64_t)v94;
                    v94 = 0;
                    if (v58)
                    {
                      if (*(_DWORD *)v58 == 1)
                        v58 = WTF::fastFree((WTF *)v58, v59);
                      else
                        --*(_DWORD *)v58;
                    }
                  }
                  if (WebCore::LogMedia)
                  {
                    v61 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
                    while (1)
                    {
                      v62 = *v61;
                      if ((v62 & 1) != 0)
                        break;
                      v63 = __ldaxr(v61);
                      if (v63 == v62)
                      {
                        if (!__stxr(v62 | 1, v61))
                        {
                          v92 = v2;
                          v64 = WTF::Logger::observers((WTF::Logger *)v58);
                          v65 = *(unsigned int *)(v64 + 12);
                          if ((_DWORD)v65)
                          {
                            v66 = *(uint64_t **)v64;
                            v67 = *(_QWORD *)v64 + 8 * v65;
                            do
                            {
                              v68 = *v66;
                              LODWORD(buf) = 0;
                              WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v93);
                              v101 = 0;
                              WTF::String::String((WTF::String *)&v102, "observing video source ");
                              v103 = 0;
                              WTF::LogArgument<void const*>::toString();
                              v94 = 0;
                              v95 = 0;
                              v69 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
                              LODWORD(v95) = 3;
                              v94 = v69;
                              v70 = HIDWORD(v95);
                              *((_DWORD *)v69 + 4 * HIDWORD(v95)) = buf;
                              v71 = *((_QWORD *)&buf + 1);
                              if (*((_QWORD *)&buf + 1))
                                **((_DWORD **)&buf + 1) += 2;
                              *((_QWORD *)v69 + 2 * v70 + 1) = v71;
                              *((_DWORD *)v69 + 4 * (v70 + 1)) = v101;
                              v72 = v102;
                              if (v102)
                                *(_DWORD *)v102 += 2;
                              *((_QWORD *)v69 + 2 * (v70 + 1) + 1) = v72;
                              *((_DWORD *)v69 + 4 * (v70 + 2)) = v103;
                              v73 = v104;
                              if (v104)
                                *(_DWORD *)v104 += 2;
                              *((_QWORD *)v69 + 2 * (v70 + 2) + 1) = v73;
                              HIDWORD(v95) = v70 + 3;
                              (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v68 + 16))(v68, &WebCore::LogMedia, 0, &v94);
                              v74 = v94;
                              if (HIDWORD(v95))
                              {
                                v75 = 16 * HIDWORD(v95);
                                v76 = (WTF::StringImpl **)((char *)v94 + 8);
                                do
                                {
                                  v77 = *v76;
                                  *v76 = 0;
                                  if (v77)
                                  {
                                    if (*(_DWORD *)v77 == 2)
                                      WTF::StringImpl::destroy(v77, (WTF::StringImpl *)v59);
                                    else
                                      *(_DWORD *)v77 -= 2;
                                  }
                                  v76 += 2;
                                  v75 -= 16;
                                }
                                while (v75);
                                v74 = v94;
                              }
                              if (v74)
                              {
                                v94 = 0;
                                LODWORD(v95) = 0;
                                WTF::fastFree(v74, v59);
                              }
                              v78 = v104;
                              v104 = 0;
                              if (v78)
                              {
                                if (*(_DWORD *)v78 == 2)
                                  WTF::StringImpl::destroy(v78, (WTF::StringImpl *)v59);
                                else
                                  *(_DWORD *)v78 -= 2;
                              }
                              v79 = v102;
                              v102 = 0;
                              if (v79)
                              {
                                if (*(_DWORD *)v79 == 2)
                                  WTF::StringImpl::destroy(v79, (WTF::StringImpl *)v59);
                                else
                                  *(_DWORD *)v79 -= 2;
                              }
                              v80 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                              *((_QWORD *)&buf + 1) = 0;
                              if (v80)
                              {
                                if (*(_DWORD *)v80 == 2)
                                  WTF::StringImpl::destroy(v80, (WTF::StringImpl *)v59);
                                else
                                  *(_DWORD *)v80 -= 2;
                              }
                              ++v66;
                            }
                            while (v66 != (uint64_t *)v67);
                          }
                          v81 = __ldxr(v61);
                          if (v81 == 1)
                          {
                            v2 = v92;
                            if (!__stlxr(0, v61))
                              break;
                          }
                          else
                          {
                            __clrex();
                            v2 = v92;
                          }
                          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                          break;
                        }
                      }
                      else
                      {
                        __clrex();
                      }
                    }
                  }
                  result = (uint64_t)v99;
                  v99 = 0;
                  if (result)
                  {
                    if (*(_DWORD *)result == 2)
                    {
                      result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v59);
                      if (!v2)
                        return result;
                      goto LABEL_171;
                    }
                    *(_DWORD *)result -= 2;
                  }
                  goto LABEL_170;
                }
LABEL_197:
                __break(0xC471u);
                return result;
              }
LABEL_192:
              v47 = 0;
              goto LABEL_92;
            }
          }
          v46 = 0;
          if (v96)
            goto LABEL_91;
          goto LABEL_192;
        }
      }
      else
      {
        __clrex();
      }
      result = WTF::Lock::unlockSlow((WTF::Lock *)(v38 + 160));
      goto LABEL_87;
    }
  }
  v41 = 1;
LABEL_78:
  *((_BYTE *)this + 352) = v41;
  if (!v2)
    return result;
LABEL_171:
  v82 = (unsigned int *)(v2 + 8);
  do
  {
    v83 = __ldaxr(v82);
    v84 = v83 - 1;
  }
  while (__stlxr(v84, v82));
  if (!v84)
  {
    atomic_store(1u, (unsigned int *)(v2 + 8));
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  return result;
}

void sub_19479CDF4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF *a15, int a16, int a17, WTF::StringImpl *a18, WTF::StringImpl *a19, uint64_t a20,WTF::StringImpl *a21,char a22,WTF::StringImpl *a23,uint64_t a24,WTF::StringImpl *a25,uint64_t a26,WTF::StringImpl *a27)
{
  unsigned int *v27;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;

  if (a21)
  {
    if (*(_DWORD *)a21 == 2)
      WTF::StringImpl::destroy(a21, a2);
    else
      *(_DWORD *)a21 -= 2;
  }
  if (v27)
  {
    v29 = v27 + 2;
    do
    {
      v30 = __ldaxr(v29);
      v31 = v30 - 1;
    }
    while (__stlxr(v31, v29));
    if (!v31)
    {
      atomic_store(1u, v27 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v27 + 8))(v27);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::VideoTrackPrivate::selected(WebCore::VideoTrackPrivate *this)
{
  return *((unsigned __int8 *)this + 48);
}

uint64_t *WebCore::MediaPlayerPrivateMediaStreamAVFObjC::seekable(WebCore::MediaPlayerPrivateMediaStreamAVFObjC *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&WebCore::PlatformTimeRanges::emptyRanges(void)::onceKey);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&WebCore::PlatformTimeRanges::emptyRanges(void)::onceKey, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::PlatformTimeRanges::emptyRanges(void)::$_0 &&>>);
  }
  return &WebCore::PlatformTimeRanges::emptyRanges(void)::emptyRanges;
}

uint64_t *WebCore::MediaPlayerPrivateMediaStreamAVFObjC::buffered(WebCore::MediaPlayerPrivateMediaStreamAVFObjC *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&WebCore::PlatformTimeRanges::emptyRanges(void)::onceKey);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&WebCore::PlatformTimeRanges::emptyRanges(void)::onceKey, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::PlatformTimeRanges::emptyRanges(void)::$_0 &&>>);
  }
  return &WebCore::PlatformTimeRanges::emptyRanges(void)::emptyRanges;
}

uint64_t WebCore::MediaPlayerPrivateMediaStreamAVFObjC::paintCurrentFrameInContext(uint64_t this, WebCore::GraphicsContext *a2, float32x2_t *a3)
{
  uint64_t v3;
  void *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  BOOL v14;
  __int128 v15;
  __int128 v16;
  double v17;
  double v18;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  CGAffineTransform v29;
  CGAffineTransform v30;
  float32x2_t v31;
  float v32;
  float v33;
  CGAffineTransform v34;
  CGAffineTransform v35;

  if (*(_DWORD *)(this + 272))
  {
    v3 = this;
    if (*(_QWORD *)(this + 136))
    {
      if (*(_BYTE *)(this + 257))
      {
        this = (*(uint64_t (**)(WebCore::GraphicsContext *))(*(_QWORD *)a2 + 40))(a2);
        if ((this & 1) == 0)
        {
          if (*(_DWORD *)(v3 + 272) != 1 && *(_QWORD *)(v3 + 192))
            WebCore::MediaPlayerPrivateMediaStreamAVFObjC::updateCurrentFrameImage((WebCore::MediaPlayerPrivateMediaStreamAVFObjC *)v3);
          (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 96))(a2, 1);
          if (*(_DWORD *)(v3 + 272) == 1)
          {
            v35.a = 0.0;
            *(float32x2_t *)&v35.b = vcvt_f32_s32(vcvt_s32_f32(a3[1]));
            v34.a = 1.05531781e-226;
            (*(void (**)(WebCore::GraphicsContext *, CGAffineTransform *, CGAffineTransform *))(*(_QWORD *)a2 + 224))(a2, &v35, &v34);
            if ((*(_QWORD *)&v34.a & 0x8000000000000) != 0)
            {
              v7 = (unsigned int *)(*(_QWORD *)&v34.a & 0xFFFFFFFFFFFFLL);
              do
              {
                v8 = __ldaxr(v7);
                v9 = v8 - 1;
              }
              while (__stlxr(v9, v7));
              if (!v9)
              {
                atomic_store(1u, v7);
                WTF::fastFree((WTF *)v7, v6);
              }
            }
            return (*(uint64_t (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 104))(a2, 1);
          }
          v10 = *(_QWORD *)(v3 + 184);
          if (!v10 || !*(_QWORD *)(v3 + 192))
            return (*(uint64_t (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 104))(a2, 1);
          v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v10 + 48) + 24))(*(_QWORD *)(v10 + 48));
          v31 = 0;
          v32 = (float)(int)v11;
          v33 = (float)SHIDWORD(v11);
          v12 = *(_QWORD *)(v3 + 192);
          if ((unint64_t)(*(float (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12))
            v14 = (unint64_t)v13 == 0;
          else
            v14 = 1;
          if (v14)
          {
            v15 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
            *(_OWORD *)&v29.a = *MEMORY[0x1E0C9BAA8];
            *(_OWORD *)&v29.c = v15;
            v16 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 32);
          }
          else
          {
            memset(&v29, 0, sizeof(v29));
            CGAffineTransformMakeRotation(&v29, (double)*(unsigned __int16 *)(v12 + 34) * 3.14159265 / 180.0);
            if (!*(_BYTE *)(v12 + 32))
            {
LABEL_25:
              v30 = v29;
              v17 = v29.a * v29.d - v29.b * v29.c;
              v18 = fabs(v17);
              if ((unint64_t)(*(_QWORD *)&v18 - 0x10000000000000) >> 53 > 0x3FE
                && (unint64_t)(*(_QWORD *)&v18 - 1) > 0xFFFFFFFFFFFFELL)
              {
                v35 = *(CGAffineTransform *)byte_1968A1628;
              }
              else
              {
                v20 = 1.0;
                if (v29.a == 1.0 && v29.b == 0.0 && v29.c == 0.0 && v29.d == 1.0)
                {
                  v24 = -v29.tx;
                  v25 = -v29.ty;
                  v22 = 0.0;
                  v21 = 0.0;
                  v23 = 1.0;
                }
                else
                {
                  v20 = v29.d / v17;
                  v21 = -v29.b / v17;
                  v22 = -v29.c / v17;
                  v23 = v29.a / v17;
                  v24 = (v29.c * v29.ty - v29.d * v29.tx) / v17;
                  v25 = (v29.b * v29.tx - v29.a * v29.ty) / v17;
                }
                v35.a = v20;
                v35.b = v21;
                v35.c = v22;
                v35.d = v23;
                v35.tx = v24;
                v35.ty = v25;
              }
              LODWORD(v34.a) = WebCore::AffineTransform::mapRect((WebCore::AffineTransform *)&v35, (const WebCore::FloatRect *)a3);
              HIDWORD(v34.a) = v26;
              *(_QWORD *)&v34.b = __PAIR64__(v28, v27);
              (*(void (**)(WebCore::GraphicsContext *, CGAffineTransform *))(*(_QWORD *)a2 + 656))(a2, &v30);
              WebCore::GraphicsContext::drawNativeImage(a2, *(_QWORD *)(v3 + 184), (uint64_t)&v34, &v31, 4641);
              return (*(uint64_t (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 104))(a2, 1);
            }
            v34 = v29;
            CGAffineTransformScale(&v35, &v34, -1.0, 1.0);
            *(_OWORD *)&v29.a = *(_OWORD *)&v35.a;
            *(_OWORD *)&v29.c = *(_OWORD *)&v35.c;
            v16 = *(_OWORD *)&v35.tx;
          }
          *(_OWORD *)&v29.tx = v16;
          goto LABEL_25;
        }
      }
    }
  }
  return this;
}

void sub_19479D42C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 104))(v1, 1);
  _Unwind_Resume(a1);
}

uint64_t WebCore::MediaPlayerPrivateMediaStreamAVFObjC::videoFrameForCurrentTime@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  int v2;
  BOOL v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  v2 = *(_DWORD *)(this + 272);
  if (v2 && *(_QWORD *)(this + 136) && (v2 != 1 ? (v3 = *(_BYTE *)(this + 257) == 0) : (v3 = 1), !v3))
  {
    v4 = *(_QWORD *)(this + 192);
    if (v4)
    {
      v5 = (unsigned int *)(v4 + 8);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 + 1, v5));
    }
  }
  else
  {
    v4 = 0;
  }
  *a2 = v4;
  return this;
}

CFTypeRef WebCore::MediaPlayerPrivateMediaStreamAVFObjC::colorSpace@<X0>(WebCore::MediaPlayerPrivateMediaStreamAVFObjC *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  CFTypeRef result;
  unint64_t v6;
  char v7;
  char **v8;
  char *v9;

  WebCore::MediaPlayerPrivateMediaStreamAVFObjC::updateCurrentFrameImage(this);
  v4 = *((_QWORD *)this + 23);
  if (v4)
    return (CFTypeRef)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 48) + 40))(*(_QWORD *)(v4 + 48));
  v6 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
  if (v6 != -1)
  {
    v9 = &v7;
    v8 = &v9;
    std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v8, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
  }
  result = (CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
  *a2 = WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
  if (result)
    return CFRetain(result);
  return result;
}

void WebCore::MediaPlayerPrivateMediaStreamAVFObjC::engineDescription(int **a1@<X8>)
{
  int *v2;
  int v3;

  if ((_MergedGlobals_101 & 1) == 0)
  {
    v2 = &WebCore::MediaPlayerPrivateMediaStreamAVFObjC::engineDescription(void)::$_0::operator() const(void)::impl;
    v3 = WebCore::MediaPlayerPrivateMediaStreamAVFObjC::engineDescription(void)::$_0::operator() const(void)::impl + 2;
    WebCore::MediaPlayerPrivateMediaStreamAVFObjC::engineDescription(void)::$_0::operator() const(void)::impl += 2;
    qword_1ECE812E0 = (uint64_t)&WebCore::MediaPlayerPrivateMediaStreamAVFObjC::engineDescription(void)::$_0::operator() const(void)::impl;
    _MergedGlobals_101 = 1;
    goto LABEL_4;
  }
  v2 = (int *)qword_1ECE812E0;
  if (qword_1ECE812E0)
  {
    v3 = WebCore::MediaPlayerPrivateMediaStreamAVFObjC::engineDescription(void)::$_0::operator() const(void)::impl;
LABEL_4:
    *v2 = v3 + 2;
  }
  *a1 = v2;
}

_QWORD *WebCore::MediaPlayerPrivateMediaStreamAVFObjC::setBufferingPolicy(_QWORD *result, int a2)
{
  if (a2)
  {
    result = (_QWORD *)result[35];
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 64))(result);
  }
  return result;
}

unsigned __int8 *WebCore::MediaPlayerPrivateMediaStreamAVFObjC::audioOutputDeviceChanged(unsigned __int8 *this, WTF::StringImpl *a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  WTF::StringImpl *v13;
  _QWORD *v14;
  uint64_t v15;
  WTF::StringImpl *v16;

  v2 = *((_QWORD *)this + 15);
  if (!v2)
    return this;
  v3 = this;
  v4 = *((_QWORD *)this + 16);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_6;
  }
  this = (unsigned __int8 *)MEMORY[0x19AEA534C](v2);
LABEL_6:
  if (*(_QWORD *)(v2 + 24))
    ++*(_QWORD *)(v2 + 8);
  else
    v4 = 0;
  v6 = __ldxr((unsigned __int8 *)v2);
  if (v6 != 1)
  {
    __clrex();
LABEL_14:
    this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
    if (!v4)
      return this;
    goto LABEL_15;
  }
  if (__stlxr(0, (unsigned __int8 *)v2))
    goto LABEL_14;
  if (!v4)
    return this;
LABEL_15:
  v7 = *(_QWORD *)(v4 + 8);
  if (v7 && (v8 = *(_QWORD *)(v7 + 8)) != 0)
    (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v8 + 576))(&v16);
  else
    v16 = 0;
  if (*((_DWORD *)v3 + 55))
  {
    v9 = *((_QWORD *)v3 + 26);
    v10 = *((unsigned int *)v3 + 54);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      v12 = (_QWORD *)*((_QWORD *)v3 + 26);
      while (!*v12)
      {
        v12 += 2;
        v11 -= 16;
        if (!v11)
          goto LABEL_24;
      }
    }
    else
    {
      v12 = (_QWORD *)*((_QWORD *)v3 + 26);
    }
    v14 = (_QWORD *)(v9 + 16 * v10);
LABEL_31:
    if (v12 != v14)
    {
      v15 = *(_QWORD *)(v12[1] + 144);
      if (v15)
        (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v15 + 88))(v15, &v16);
      while (1)
      {
        v12 += 2;
        if (v12 == v14)
          break;
        if (*v12)
          goto LABEL_31;
      }
    }
  }
LABEL_24:
  v13 = v16;
  v16 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v4);
}

void sub_19479D76C(_Unwind_Exception *a1)
{
  unsigned __int8 **v1;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v1);
  _Unwind_Resume(a1);
}

char *`non-virtual thunk to'WebCore::MediaPlayerPrivateMediaStreamAVFObjC::logChannel(WebCore::MediaPlayerPrivateMediaStreamAVFObjC *this)
{
  return &WebCore::LogMedia;
}

uint64_t WebCore::MediaPlayerPrivateMediaStreamAVFObjC::videoFrameMetadata@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint32x2_t v7;
  uint64_t v8;
  char v9;
  char v10;
  char v11;
  char v12;

  v2 = *(_QWORD *)(this + 360);
  if (v2 == *(_QWORD *)(this + 368))
  {
    v3 = 0;
    *(_BYTE *)a2 = 0;
  }
  else
  {
    *(_QWORD *)(this + 368) = v2;
    v4 = *(_BYTE *)(this + 408);
    v5 = 0;
    if (v4)
    {
      v6 = *(_QWORD *)(this + 400);
      v4 = 1;
    }
    else
    {
      v6 = 0;
    }
    v7 = vcvt_u32_f32(*(float32x2_t *)(this + 260));
    v8 = *(_QWORD *)(this + 376);
    v9 = *(_BYTE *)(this + 384);
    v10 = *(_BYTE *)(this + 392);
    v11 = *(_BYTE *)(this + 424);
    if (v11)
    {
      v5 = *(_QWORD *)(this + 416);
      v11 = 1;
    }
    v12 = *(_BYTE *)(this + 432);
    *(_DWORD *)(a2 + 89) = *(_DWORD *)(this + 433);
    *(_QWORD *)a2 = v8;
    *(_QWORD *)(a2 + 8) = v8;
    *(uint32x2_t *)(a2 + 16) = v7;
    *(_QWORD *)(a2 + 24) = 0;
    *(_DWORD *)(a2 + 32) = v2;
    *(_BYTE *)(a2 + 40) = v9;
    *(_DWORD *)(a2 + 41) = *(_DWORD *)(this + 385);
    *(_DWORD *)(a2 + 44) = *(_DWORD *)(this + 388);
    *(_BYTE *)(a2 + 48) = v10;
    *(_QWORD *)(a2 + 56) = v6;
    *(_BYTE *)(a2 + 64) = v4;
    *(_QWORD *)(a2 + 72) = v5;
    *(_BYTE *)(a2 + 80) = v11;
    v3 = 1;
    *(_BYTE *)(a2 + 88) = v12;
  }
  *(_BYTE *)(a2 + 96) = v3;
  return this;
}

uint64_t WebCore::MediaPlayerPrivateMediaStreamAVFObjC::hostingContextID(WebCore::MediaPlayerPrivateMediaStreamAVFObjC *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 35);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 136))(result);
  return result;
}

void WebCore::MediaPlayerPrivateMediaStreamAVFObjC::setVideoLayerSizeFenced(uint64_t a1, float *a2)
{
  uint64_t v3;
  double v5;
  double v6;
  double v7;
  double v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  uint64_t v14;
  _BYTE v15[4];
  char v16;

  *(_BYTE *)(a1 + 354) = 0;
  v3 = *(_QWORD *)(a1 + 280);
  if (v3 && *a2 > 0.0 && a2[1] > 0.0)
  {
    objc_msgSend((id)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 112))(v3), "bounds");
    v6 = v5;
    v8 = v7;
    v9 = *(unsigned __int8 *)(a1 + 472);
    *(double *)(a1 + 440) = v5;
    *(double *)(a1 + 448) = v7;
    *(_QWORD *)(a1 + 456) = v10;
    *(_QWORD *)(a1 + 464) = v11;
    if (!v9)
      *(_BYTE *)(a1 + 472) = 1;
    v12 = *a2;
    v13 = a2[1];
    *(double *)(a1 + 456) = v12;
    *(double *)(a1 + 464) = v13;
    v14 = *(_QWORD *)(a1 + 280);
    WTF::MachSendRight::MachSendRight();
    v16 = 1;
    (*(void (**)(uint64_t, _BYTE *, double, double, double, double))(*(_QWORD *)v14 + 48))(v14, v15, v6, v8, v12, v13);
    if (v16)
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v15);
  }
}

void sub_19479D954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, __int16 a11, char a12, char a13)
{
  if (a12)
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&a10);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::MediaPlayerPrivateMediaStreamAVFObjC::requestHostingContextID(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = *(_QWORD *)(a1 + 280);
  if (result && (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 136))(result), (_DWORD)result))
  {
    v5 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, result);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  else
  {
    v6 = *a2;
    *a2 = 0;
    v7 = *(_QWORD *)(a1 + 480);
    *(_QWORD *)(a1 + 480) = v6;
    if (v7)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  return result;
}

void sub_19479DA00(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebCore::MediaPlayerPrivateMediaStreamAVFObjC::setShouldMaintainAspectRatio(WebCore::MediaPlayerPrivateMediaStreamAVFObjC *this, char a2)
{
  uint64_t result;

  *((_BYTE *)this + 488) = a2;
  result = *((_QWORD *)this + 35);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 120))(result);
  return result;
}

uint64_t WebCore::MediaPlayerPrivateMediaStreamAVFObjC::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 48);
  return this;
}

WebCore::MediaPlayerPrivateMediaStreamAVFObjC *WebCore::MediaPlayerPrivateMediaStreamAVFObjC::deref(WebCore::MediaPlayerPrivateMediaStreamAVFObjC *this)
{
  WTF *v1;
  void *v2;

  if (*((_DWORD *)this + 12) == 1)
  {
    WebCore::MediaPlayerPrivateMediaStreamAVFObjC::~MediaPlayerPrivateMediaStreamAVFObjC(this);
    return (WebCore::MediaPlayerPrivateMediaStreamAVFObjC *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*((_DWORD *)this + 12);
  }
  return this;
}

uint64_t WebCore::MediaPlayerPrivateMediaStreamAVFObjC::supportsPictureInPicture(WebCore::MediaPlayerPrivateMediaStreamAVFObjC *this)
{
  return 1;
}

uint64_t WebCore::MediaPlayerPrivateMediaStreamAVFObjC::supportsFullscreen(WebCore::MediaPlayerPrivateMediaStreamAVFObjC *this)
{
  return 1;
}

uint64_t WebCore::MediaPlayerPrivateMediaStreamAVFObjC::supportsScanning(WebCore::MediaPlayerPrivateMediaStreamAVFObjC *this)
{
  return 0;
}

float WebCore::MediaPlayerPrivateMediaStreamAVFObjC::naturalSize(WebCore::MediaPlayerPrivateMediaStreamAVFObjC *this)
{
  return *((float *)this + 65);
}

uint64_t WebCore::MediaPlayerPrivateInterface::timeIsProgressing(WebCore::MediaPlayerPrivateInterface *this)
{
  return (*(unsigned int (**)(WebCore::MediaPlayerPrivateInterface *))(*(_QWORD *)this + 480))(this) ^ 1;
}

uint64_t WebCore::MediaPlayerPrivateInterface::setCurrentTimeDidChangeCallback()
{
  return 0;
}

uint64_t WebCore::MediaPlayerPrivateMediaStreamAVFObjC::seeking(WebCore::MediaPlayerPrivateMediaStreamAVFObjC *this)
{
  return 0;
}

uint64_t WebCore::MediaPlayerPrivateInterface::setRateDouble(WebCore::MediaPlayerPrivateInterface *this, double a2)
{
  float v2;

  v2 = a2;
  return (*(uint64_t (**)(WebCore::MediaPlayerPrivateInterface *, float))(*(_QWORD *)this + 432))(this, v2);
}

double WebCore::MediaPlayerPrivateInterface::rate(WebCore::MediaPlayerPrivateInterface *this)
{
  return 0.0;
}

uint64_t WebCore::MediaPlayerPrivateInterface::effectiveRate(WebCore::MediaPlayerPrivateInterface *this)
{
  return (*(uint64_t (**)(WebCore::MediaPlayerPrivateInterface *))(*(_QWORD *)this + 448))(this);
}

uint64_t WebCore::MediaPlayerPrivateInterface::maxTimeSeekable(WebCore::MediaPlayerPrivateInterface *this)
{
  return *(_QWORD *)WTF::MediaTime::zeroTime(this);
}

uint64_t WebCore::MediaPlayerPrivateInterface::minTimeSeekable(WebCore::MediaPlayerPrivateInterface *this)
{
  return *(_QWORD *)WTF::MediaTime::zeroTime(this);
}

uint64_t WebCore::MediaPlayerPrivateMediaStreamAVFObjC::didLoadingProgress(WebCore::MediaPlayerPrivateMediaStreamAVFObjC *this)
{
  return *((unsigned __int8 *)this + 344);
}

void WebCore::MediaPlayerPrivateInterface::nativeImageForCurrentTime(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

BOOL WebCore::MediaPlayerPrivateInterface::hasAvailableVideoFrame(WebCore::MediaPlayerPrivateInterface *this)
{
  return (*(unsigned int (**)(WebCore::MediaPlayerPrivateInterface *))(*(_QWORD *)this + 560))(this) > 1;
}

uint64_t WebCore::MediaPlayerPrivateInterface::wirelessVideoPlaybackDisabled(WebCore::MediaPlayerPrivateInterface *this)
{
  return 1;
}

uint64_t WebCore::MediaPlayerPrivateInterface::isCurrentPlaybackTargetWireless(WebCore::MediaPlayerPrivateInterface *this)
{
  return 0;
}

uint64_t WebCore::MediaPlayerPrivateMediaStreamAVFObjC::supportsAcceleratedRendering(WebCore::MediaPlayerPrivateMediaStreamAVFObjC *this)
{
  return 1;
}

uint64_t WebCore::MediaPlayerPrivateMediaStreamAVFObjC::movieLoadType(WebCore::MediaPlayerPrivateMediaStreamAVFObjC *this)
{
  return 3;
}

uint64_t WebCore::MediaPlayerPrivateInterface::waitingForKey(WebCore::MediaPlayerPrivateInterface *this)
{
  return 0;
}

void WebCore::MediaPlayerPrivateInterface::languageOfPrimaryAudioTrack(_QWORD *a1@<X8>)
{
  _DWORD *v2;

  v2 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v2 += 2;
  *a1 = v2;
}

uint64_t WebCore::MediaPlayerPrivateMediaStreamAVFObjC::extraMemoryCost(WebCore::MediaPlayerPrivateMediaStreamAVFObjC *this)
{
  return 0;
}

uint64_t WebCore::MediaPlayerPrivateMediaStreamAVFObjC::ended(WebCore::MediaPlayerPrivateMediaStreamAVFObjC *this)
{
  return *((unsigned __int8 *)this + 346);
}

void WebCore::MediaPlayerPrivateInterface::videoPlaybackQualityMetrics(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[32] = 0;
}

uint64_t WebCore::MediaPlayerPrivateInterface::performTaskAtTime()
{
  return 0;
}

uint64_t WebCore::MediaPlayerPrivateInterface::supportsPlayAtHostTime(WebCore::MediaPlayerPrivateInterface *this)
{
  return 0;
}

uint64_t WebCore::MediaPlayerPrivateInterface::supportsPauseAtHostTime(WebCore::MediaPlayerPrivateInterface *this)
{
  return 0;
}

uint64_t WebCore::MediaPlayerPrivateInterface::playAtHostTime(WebCore::MediaPlayerPrivateInterface *this, const MonotonicTime *a2)
{
  return 0;
}

uint64_t WebCore::MediaPlayerPrivateInterface::pauseAtHostTime(WebCore::MediaPlayerPrivateInterface *this, const MonotonicTime *a2)
{
  return 0;
}

uint64_t `non-virtual thunk to'WebCore::MediaPlayerPrivateMediaStreamAVFObjC::ref(uint64_t this)
{
  ++*(_DWORD *)(this - 48);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::MediaPlayerPrivateMediaStreamAVFObjC::deref(uint64_t this)
{
  WTF *v1;
  void *v2;

  if (*(_DWORD *)(this - 48) == 1)
  {
    WebCore::MediaPlayerPrivateMediaStreamAVFObjC::~MediaPlayerPrivateMediaStreamAVFObjC((WebCore::MediaPlayerPrivateMediaStreamAVFObjC *)(this - 96));
    return WTF::fastFree(v1, v2);
  }
  else
  {
    --*(_DWORD *)(this - 48);
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::MediaPlayerPrivateMediaStreamAVFObjC::logger(WebCore::MediaPlayerPrivateMediaStreamAVFObjC *this)
{
  return *((_QWORD *)this + 23);
}

const char *`non-virtual thunk to'WebCore::MediaPlayerPrivateMediaStreamAVFObjC::logClassName(WebCore::MediaPlayerPrivateMediaStreamAVFObjC *this)
{
  return "MediaPlayerPrivateMediaStreamAVFObjC";
}

uint64_t `non-virtual thunk to'WebCore::MediaPlayerPrivateMediaStreamAVFObjC::logIdentifier(WebCore::MediaPlayerPrivateMediaStreamAVFObjC *this)
{
  return *((_QWORD *)this + 24);
}

void WebCore::MediaPlayerPrivateMediaStreamAVFObjC::CurrentFramePainter::~CurrentFramePainter(WebCore::MediaPlayerPrivateMediaStreamAVFObjC::CurrentFramePainter *this, void *a2)
{
  WTF *v3;
  const void *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  int v16;
  uint64_t v17;

  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    v4 = *(const void **)v3;
    *(_QWORD *)v3 = 0;
    if (v4)
      CFRelease(v4);
    WTF::fastFree(v3, a2);
  }
  v5 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    v6 = v5 + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v5 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
    }
  }
  v9 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if (__ldaxr((unsigned __int8 *)v10))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v10))
    {
      goto LABEL_15;
    }
    MEMORY[0x19AEA534C](v10);
LABEL_15:
    v12 = *(_QWORD *)(v10 + 8);
    v13 = v12 - 1;
    *(_QWORD *)(v10 + 8) = v12 - 1;
    if (v12 == 1)
    {
      v17 = *(_QWORD *)(v10 + 16);
      v14 = *(_QWORD *)(v10 + 24);
      *(_QWORD *)(v10 + 24) = 0;
      v15 = v17 != 0;
    }
    else
    {
      v14 = 0;
      v15 = 1;
    }
    v16 = __ldxr((unsigned __int8 *)v10);
    if (v16 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v10))
      {
        if (v13)
          return;
LABEL_23:
        if (v14)
          (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
        if (!v15)
          WTF::fastFree((WTF *)v10, a2);
        return;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v10);
    if (v13)
      return;
    goto LABEL_23;
  }
}

void WebCore::MediaPlayerFactoryMediaStreamAVFObjC::~MediaPlayerFactoryMediaStreamAVFObjC(WebCore::MediaPlayerFactoryMediaStreamAVFObjC *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 0;
    v4 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v4)
    {
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v4);
        WTF::fastFree((WTF *)v4, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 0;
    v4 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v4)
    {
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v4);
        WTF::fastFree((WTF *)v4, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::MediaPlayerFactoryMediaStreamAVFObjC::identifier(WebCore::MediaPlayerFactoryMediaStreamAVFObjC *this)
{
  return 2;
}

uint64_t WebCore::MediaPlayerFactoryMediaStreamAVFObjC::createMediaEnginePlayer@<X0>(WebCore::MediaPlayer *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  __int128 v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  WebRootSampleBufferBoundsChangeListener *v20;
  uint64_t v21;
  void *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  _QWORD *v27;
  uint64_t v28;
  const void *v29;
  uint64_t result;
  _QWORD v31[4];

  v5 = WTF::fastMalloc((WTF *)0x1F0);
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)v5 = off_1E340D798;
  *(_BYTE *)(v5 + 24) = 0;
  *(_OWORD *)(v5 + 32) = *(_OWORD *)WTF::MediaTime::invalidTime((WTF::MediaTime *)v5);
  *(_DWORD *)(v5 + 48) = 1;
  *(_QWORD *)(v5 + 72) = &unk_1E3206148;
  *(_QWORD *)v5 = off_1E3205B68;
  *(_QWORD *)(v5 + 56) = &unk_1E3206108;
  *(_QWORD *)(v5 + 64) = 0;
  *(_QWORD *)(v5 + 80) = 0;
  *(_QWORD *)(v5 + 88) = &unk_1E32061A0;
  *(_QWORD *)(v5 + 96) = &unk_1E32061C8;
  *(_QWORD *)(v5 + 104) = 0;
  *(_QWORD *)(v5 + 112) = &unk_1E3206208;
  if (!a1 || (v6 = *(_QWORD *)a1) == 0)
  {
    v8 = 0;
    goto LABEL_15;
  }
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_7:
    MEMORY[0x19AEA534C](v6);
    goto LABEL_8;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_7;
LABEL_8:
  if (*(_QWORD *)(v6 + 24))
  {
    ++*(_QWORD *)(v6 + 16);
    v8 = v6;
  }
  else
  {
    v8 = 0;
  }
  v9 = __ldxr((unsigned __int8 *)v6);
  if (v9 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      goto LABEL_15;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
LABEL_15:
  *(_QWORD *)(v5 + 136) = 0;
  *(_QWORD *)(v5 + 120) = v8;
  *(_QWORD *)(v5 + 128) = a1;
  *(_QWORD *)(v5 + 144) = 0;
  *(_QWORD *)(v5 + 152) = 0;
  *(_DWORD *)(v5 + 160) = 10000000;
  *(_BYTE *)(v5 + 164) = 1;
  *(_QWORD *)(v5 + 168) = 0;
  *(_DWORD *)(v5 + 176) = 10000000;
  *(_OWORD *)(v5 + 184) = 0u;
  *(_QWORD *)(v5 + 232) = 0;
  *(_BYTE *)(v5 + 180) = 1;
  *(_QWORD *)(v5 + 240) = 0;
  *(_QWORD *)(v5 + 245) = 0;
  *(_WORD *)(v5 + 256) = 0;
  *(_DWORD *)(v5 + 260) = 0;
  *(_OWORD *)(v5 + 200) = 0u;
  *(_OWORD *)(v5 + 213) = 0u;
  *(_QWORD *)(v5 + 264) = 0x3F80000000000000;
  v10 = (uint64_t *)(v5 + 296);
  *(_QWORD *)(v5 + 285) = 0;
  *(_QWORD *)(v5 + 272) = 0;
  *(_QWORD *)(v5 + 280) = 0;
  v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)a1 + 1) + 8) + 672))(*(_QWORD *)(*((_QWORD *)a1 + 1) + 8));
  v12 = (unsigned int *)(v11 + 8);
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 + 1, v12));
  *v10 = v11;
  *(_QWORD *)(v5 + 304) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)a1 + 1) + 8) + 664))(*(_QWORD *)(*((_QWORD *)a1 + 1) + 8));
  v14 = WTF::fastMalloc((WTF *)0x50);
  *(_QWORD *)v14 = off_1E3484EA0;
  *(_QWORD *)(v14 + 8) = &unk_1E3484F30;
  v15 = *(_OWORD *)v10;
  v16 = (unsigned int *)(*v10 + 8);
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 + 1, v16));
  *(_OWORD *)(v14 + 16) = v15;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_OWORD *)(v14 + 48) = 0u;
  *(_OWORD *)(v14 + 64) = 0u;
  *(_QWORD *)(v5 + 312) = v14;
  *(_QWORD *)(v5 + 320) = 0;
  *(_BYTE *)(v5 + 328) = 0;
  *(_QWORD *)(v5 + 336) = 0;
  *(_QWORD *)(v5 + 344) = 0;
  *(_WORD *)(v5 + 352) = 1;
  *(_BYTE *)(v5 + 354) = 1;
  *(_BYTE *)(v5 + 392) = 0;
  *(_BYTE *)(v5 + 400) = 0;
  *(_BYTE *)(v5 + 408) = 0;
  *(_BYTE *)(v5 + 416) = 0;
  *(_BYTE *)(v5 + 424) = 0;
  *(_BYTE *)(v5 + 432) = 0;
  *(_BYTE *)(v5 + 436) = 0;
  *(_BYTE *)(v5 + 440) = 0;
  *(_BYTE *)(v5 + 472) = 0;
  *(_QWORD *)(v5 + 480) = 0;
  *(_QWORD *)(v5 + 368) = 0;
  *(_QWORD *)(v5 + 376) = 0;
  *(_BYTE *)(v5 + 384) = 0;
  *(_QWORD *)(v5 + 360) = 0;
  *(_BYTE *)(v5 + 488) = 1;
  v18 = *(_QWORD *)(v5 + 296);
  v19 = *(_QWORD *)(v5 + 304);
  v31[0] = "MediaPlayerPrivateMediaStreamAVFObjC";
  v31[1] = 37;
  v31[2] = "MediaPlayerPrivateMediaStreamAVFObjC";
  v31[3] = v19;
  if (*(_BYTE *)(v18 + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 3u)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 3, (WTF::Logger::LogSiteIdentifier *)v31);
  v20 = [WebRootSampleBufferBoundsChangeListener alloc];
  v21 = *(_QWORD *)(v5 + 80);
  if (v21)
    goto LABEL_38;
  v21 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v21 = 1;
  *(_QWORD *)(v21 + 8) = v5 + 72;
  v23 = *(unsigned int **)(v5 + 80);
  *(_QWORD *)(v5 + 80) = v21;
  if (!v23)
    goto LABEL_38;
  do
  {
    v24 = __ldaxr(v23);
    v25 = v24 - 1;
  }
  while (__stlxr(v25, v23));
  if (!v25)
  {
    atomic_store(1u, v23);
    WTF::fastFree((WTF *)v23, v22);
  }
  v21 = *(_QWORD *)(v5 + 80);
  if (v21)
  {
LABEL_38:
    do
      v26 = __ldaxr((unsigned int *)v21);
    while (__stlxr(v26 + 1, (unsigned int *)v21));
  }
  v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v27 = &off_1E3206378;
  v27[1] = v5;
  v27[2] = v21;
  v31[0] = v27;
  v28 = -[WebRootSampleBufferBoundsChangeListener initWithCallback:](v20, "initWithCallback:", v31);
  v29 = *(const void **)(v5 + 320);
  *(_QWORD *)(v5 + 320) = v28;
  if (v29)
    CFRelease(v29);
  result = v31[0];
  v31[0] = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *a2 = v5;
  return result;
}

void sub_19479E254(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;
  WebCore::MediaPlayerPrivateMediaStreamAVFObjC::CurrentFramePainter *v3;
  uint64_t v4;
  WebCore::MediaStreamPrivate **v5;
  WTF **v6;
  unsigned int **v7;
  unsigned int **v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  const void *v15;
  WTF *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;
  WTF *v32;
  uint64_t v33;
  void *v34;
  unsigned int *v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  WebCore::MediaStreamPrivate *v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  WTF *v57;
  uint64_t i;
  char *v59;
  unsigned int *v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int v63;
  WTF::StringImpl *v64;
  uint64_t j;
  char *v66;
  unsigned int *v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int v70;
  WTF::StringImpl *v71;
  WTF *v72;
  void *v73;
  int v74;

  v9 = (unsigned int **)(v2 + 336);
  v10 = *(_QWORD *)(v2 + 480);
  *(_QWORD *)(v2 + 480) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = *v9;
  *v9 = 0;
  if (v11)
  {
    v12 = v11 + 2;
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v11 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 8))(v11);
    }
  }
  v15 = *(const void **)(v2 + 320);
  *(_QWORD *)(v2 + 320) = 0;
  if (v15)
    CFRelease(v15);
  v16 = *(WTF **)(v2 + 312);
  *(_QWORD *)(v2 + 312) = 0;
  if (v16)
  {
    v17 = (const void *)*((_QWORD *)v16 + 9);
    *((_QWORD *)v16 + 9) = 0;
    if (v17)
      CFRelease(v17);
    v18 = (const void *)*((_QWORD *)v16 + 8);
    *((_QWORD *)v16 + 8) = 0;
    if (v18)
      CFRelease(v18);
    v19 = (const void *)*((_QWORD *)v16 + 5);
    *((_QWORD *)v16 + 5) = 0;
    if (v19)
      CFRelease(v19);
    v20 = (const void *)*((_QWORD *)v16 + 4);
    *((_QWORD *)v16 + 4) = 0;
    if (v20)
      CFRelease(v20);
    v21 = (unsigned int *)*((_QWORD *)v16 + 2);
    *((_QWORD *)v16 + 2) = 0;
    if (v21)
    {
      v22 = v21 + 2;
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
      {
        atomic_store(1u, v21 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v21 + 8))(v21);
      }
    }
    WTF::fastFree(v16, a2);
  }
  v25 = *v7;
  *v7 = 0;
  if (v25)
  {
    v26 = v25 + 2;
    do
    {
      v27 = __ldaxr(v26);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, v26));
    if (!v28)
    {
      atomic_store(1u, v25 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v25 + 8))(v25);
    }
  }
  v29 = *(_QWORD *)(v2 + 280);
  *(_QWORD *)(v2 + 280) = 0;
  if (v29)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SampleBufferDisplayLayer,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v29 + 8));
  v30 = *v6;
  if (*v6)
  {
    v31 = *(unsigned int *)(v2 + 240);
    if ((_DWORD)v31)
    {
      for (i = 0; i != v31; ++i)
      {
        v59 = (char *)v30 + 16 * i;
        v60 = (unsigned int *)*((_QWORD *)v59 + 1);
        *((_QWORD *)v59 + 1) = 0;
        if (v60)
        {
          v61 = v60 + 2;
          do
          {
            v62 = __ldaxr(v61);
            v63 = v62 - 1;
          }
          while (__stlxr(v63, v61));
          if (!v63)
          {
            atomic_store(1u, v60 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v60 + 8))(v60);
          }
        }
        v64 = *(WTF::StringImpl **)v59;
        *(_QWORD *)v59 = 0;
        if (v64)
        {
          if (*(_DWORD *)v64 == 2)
            WTF::StringImpl::destroy(v64, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v64 -= 2;
        }
      }
    }
    WTF::fastFree(v30, a2);
  }
  v32 = *(WTF **)(v2 + 208);
  if (v32)
  {
    v33 = *(unsigned int *)(v2 + 216);
    if ((_DWORD)v33)
    {
      for (j = 0; j != v33; ++j)
      {
        v66 = (char *)v32 + 16 * j;
        v67 = (unsigned int *)*((_QWORD *)v66 + 1);
        *((_QWORD *)v66 + 1) = 0;
        if (v67)
        {
          v68 = v67 + 2;
          do
          {
            v69 = __ldaxr(v68);
            v70 = v69 - 1;
          }
          while (__stlxr(v70, v68));
          if (!v70)
          {
            atomic_store(1u, v67 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v67 + 8))(v67);
          }
        }
        v71 = *(WTF::StringImpl **)v66;
        *(_QWORD *)v66 = 0;
        if (v71)
        {
          if (*(_DWORD *)v71 == 2)
            WTF::StringImpl::destroy(v71, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v71 -= 2;
        }
      }
    }
    WTF::fastFree(v32, a2);
  }
  WebCore::MediaPlayerPrivateMediaStreamAVFObjC::CurrentFramePainter::~CurrentFramePainter(v3, a2);
  v35 = *(unsigned int **)(v2 + 144);
  *(_QWORD *)(v2 + 144) = 0;
  if (v35)
  {
    v36 = v35 + 2;
    do
    {
      v37 = __ldaxr(v36);
      v38 = v37 - 1;
    }
    while (__stlxr(v38, v36));
    if (!v38)
    {
      atomic_store(1u, v35 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v35 + 8))(v35);
    }
  }
  v39 = *v5;
  *v5 = 0;
  if (v39)
  {
    if (*((_DWORD *)v39 + 4) == 1)
    {
      WebCore::MediaStreamPrivate::~MediaStreamPrivate(v39, v34);
      WTF::fastFree(v72, v73);
    }
    else
    {
      --*((_DWORD *)v39 + 4);
    }
  }
  v40 = *(_QWORD *)(v2 + 120);
  *(_QWORD *)(v2 + 120) = 0;
  if (!v40)
    goto LABEL_60;
  if (__ldaxr((unsigned __int8 *)v40))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v40))
  {
    goto LABEL_52;
  }
  MEMORY[0x19AEA534C](v40);
LABEL_52:
  v42 = *(_QWORD *)(v40 + 16) - 1;
  *(_QWORD *)(v40 + 16) = v42;
  if (!v42)
  {
    v43 = *(_QWORD *)(v40 + 8);
    v44 = __ldxr((unsigned __int8 *)v40);
    if (v44 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v40))
      {
LABEL_58:
        if (!v43)
          WTF::fastFree((WTF *)v40, v34);
        goto LABEL_60;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v40);
    goto LABEL_58;
  }
  v74 = __ldxr((unsigned __int8 *)v40);
  if (v74 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v40))
      goto LABEL_60;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v40);
LABEL_60:
  v45 = *(_QWORD *)(v2 + 104);
  if (v45)
  {
    *(_QWORD *)(v45 + 8) = 0;
    v46 = *(unsigned int **)(v2 + 104);
    *(_QWORD *)(v2 + 104) = 0;
    if (v46)
    {
      do
      {
        v47 = __ldaxr(v46);
        v48 = v47 - 1;
      }
      while (__stlxr(v48, v46));
      if (!v48)
      {
        atomic_store(1u, v46);
        WTF::fastFree((WTF *)v46, v34);
      }
    }
  }
  else
  {
    *(_QWORD *)(v2 + 104) = 0;
  }
  v49 = *(_QWORD *)(v2 + 80);
  if (v49)
  {
    *(_QWORD *)(v49 + 8) = 0;
    v50 = *(unsigned int **)(v2 + 80);
    *(_QWORD *)(v2 + 80) = 0;
    if (v50)
    {
      do
      {
        v51 = __ldaxr(v50);
        v52 = v51 - 1;
      }
      while (__stlxr(v52, v50));
      if (!v52)
      {
        atomic_store(1u, v50);
        WTF::fastFree((WTF *)v50, v34);
      }
    }
  }
  else
  {
    *(_QWORD *)(v2 + 80) = 0;
  }
  v53 = *(_QWORD *)(v2 + 64);
  if (v53)
  {
    *(_QWORD *)(v53 + 8) = 0;
    v54 = *(unsigned int **)(v2 + 64);
    *(_QWORD *)(v2 + 64) = 0;
    if (v54)
    {
      do
      {
        v55 = __ldaxr(v54);
        v56 = v55 - 1;
      }
      while (__stlxr(v56, v54));
      if (!v56)
      {
        atomic_store(1u, v54);
        WTF::fastFree((WTF *)v54, v34);
      }
    }
  }
  else
  {
    *(_QWORD *)(v2 + 64) = 0;
  }
  *(_QWORD *)v2 = v4;
  v57 = *(WTF **)(v2 + 8);
  if (v57)
  {
    *(_QWORD *)(v2 + 8) = 0;
    *(_DWORD *)(v2 + 16) = 0;
    WTF::fastFree(v57, v34);
  }
  WTF::fastFree((WTF *)v2, v34);
  _Unwind_Resume(a1);
}

WTF::StringImpl **WebCore::MediaPlayerFactoryMediaStreamAVFObjC::getSupportedTypes(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl **result;

  result = *(WTF::StringImpl ***)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(result, a2);
  }
  return result;
}

BOOL WebCore::MediaPlayerFactoryMediaStreamAVFObjC::supportsTypeAndCodecs(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 57) && *(_BYTE *)(a2 + 58) == 0;
}

void WebCore::VideoTrackPrivateMediaStream::~VideoTrackPrivateMediaStream(WebCore::VideoTrackPrivateMediaStream *this, void *a2)
{
  WebCore::MediaStreamTrackPrivate *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF *v10;
  void *v11;

  v3 = (WebCore::MediaStreamTrackPrivate *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 2) == 1)
    {
      WebCore::MediaStreamTrackPrivate::~MediaStreamTrackPrivate(v3, a2);
      WTF::fastFree(v10, v11);
    }
    else
    {
      --*((_DWORD *)v3 + 2);
    }
  }
  *(_QWORD *)this = off_1E32065F8;
  v4 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  *(_QWORD *)this = &unk_1E340FFE8;
  v6 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v6 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
    }
  }
  WTF::Vector<std::tuple<WTF::RefPtr<WebCore::TrackPrivateBase::Shared<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>,WTF::RawPtrTraits<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>,WTF::DefaultRefDerefTraits<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>>,WTF::WeakPtr<WebCore::TrackPrivateBaseClient,WTF::DefaultWeakPtrImpl,WebCore::TrackPrivateBase::Shared<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>><WebCore::TrackPrivateBaseClient>>,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 16, a2);
}

{
  WebCore::MediaStreamTrackPrivate *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  void *v10;
  WTF *v11;
  void *v12;

  v3 = (WebCore::MediaStreamTrackPrivate *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 2) == 1)
    {
      WebCore::MediaStreamTrackPrivate::~MediaStreamTrackPrivate(v3, a2);
      WTF::fastFree(v11, v12);
    }
    else
    {
      --*((_DWORD *)v3 + 2);
    }
  }
  *(_QWORD *)this = off_1E32065F8;
  v4 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  *(_QWORD *)this = &unk_1E340FFE8;
  v6 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v6 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
    }
  }
  WTF::Vector<std::tuple<WTF::RefPtr<WebCore::TrackPrivateBase::Shared<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>,WTF::RawPtrTraits<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>,WTF::DefaultRefDerefTraits<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>>,WTF::WeakPtr<WebCore::TrackPrivateBaseClient,WTF::DefaultWeakPtrImpl,WebCore::TrackPrivateBase::Shared<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>><WebCore::TrackPrivateBaseClient>>,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 16, a2);
  WTF::fastFree(this, v10);
}

const char *WebCore::VideoTrackPrivate::logClassName(WebCore::VideoTrackPrivate *this)
{
  return "VideoTrackPrivate";
}

uint64_t WebCore::TrackPrivateBase::id(WebCore::TrackPrivateBase *this)
{
  return 0;
}

WTF::AtomStringImpl *WebCore::VideoTrackPrivateMediaStream::label@<X0>(WebCore::VideoTrackPrivateMediaStream *this@<X0>, WTF::StringImpl *a2@<X1>, WTF::AtomStringImpl **a3@<X8>)
{
  WTF::AtomStringImpl *result;
  WTF::AtomStringImpl *v5;

  result = *(WTF::AtomStringImpl **)(*((_QWORD *)this + 13) + 56);
  if (result)
  {
    if ((*((_BYTE *)result + 16) & 0x10) != 0)
    {
      *(_DWORD *)result += 2;
    }
    else
    {
      WTF::AtomStringImpl::addSlowCase(result, a2);
      result = v5;
    }
  }
  *a3 = result;
  return result;
}

void WebCore::VideoTrackPrivateMediaStream::language(_QWORD *a1@<X8>)
{
  _DWORD *v2;

  v2 = (_DWORD *)*MEMORY[0x1E0CBF3B8];
  if (*MEMORY[0x1E0CBF3B8])
    *v2 += 2;
  *a1 = v2;
}

uint64_t WebCore::VideoTrackPrivateMediaStream::trackIndex(WebCore::VideoTrackPrivateMediaStream *this)
{
  return *((unsigned int *)this + 28);
}

WTF::AtomStringImpl *WebCore::VideoTrackPrivateMediaStream::trackUID@<X0>(WebCore::VideoTrackPrivateMediaStream *this@<X0>, WTF::StringImpl *a2@<X1>, uint64_t a3@<X8>)
{
  WTF::AtomStringImpl *result;
  WTF::AtomStringImpl *v5;

  result = *(WTF::AtomStringImpl **)(*((_QWORD *)this + 13) + 48);
  if (result)
  {
    if ((*((_BYTE *)result + 16) & 0x10) != 0)
    {
      *(_DWORD *)result += 2;
    }
    else
    {
      WTF::AtomStringImpl::addSlowCase(result, a2);
      result = v5;
    }
  }
  *(_QWORD *)a3 = result;
  *(_BYTE *)(a3 + 8) = 1;
  return result;
}

uint64_t WebCore::VideoTrackPrivate::type(WebCore::VideoTrackPrivate *this)
{
  return 0;
}

_BYTE *WebCore::VideoTrackPrivate::setSelected(_BYTE *this, int a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (this[48] != a2)
  {
    v2 = a2;
    v3 = (uint64_t)this;
    this[48] = a2;
    v4 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v4 = off_1E32066A0;
    *(_BYTE *)(v4 + 8) = v2;
    v6 = v4;
    WebCore::TrackPrivateBase::notifyClients(v3, &v6);
    v5 = v6;
    v6 = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    this = *(_BYTE **)(v3 + 96);
    if (this)
      return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, _QWORD))(*(_QWORD *)this + 16))(this, v3, *(unsigned __int8 *)(v3 + 48));
  }
  return this;
}

void sub_19479EADC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::VideoTrackPrivateMediaStream::kind(WebCore::VideoTrackPrivateMediaStream *this)
{
  return 2;
}

void WebCore::VideoTrackPrivate::~VideoTrackPrivate(WebCore::VideoTrackPrivate *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *(_QWORD *)this = off_1E32065F8;
  v3 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  *(_QWORD *)this = &unk_1E340FFE8;
  v5 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v5)
  {
    v6 = v5 + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v5 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
    }
  }
  WTF::Vector<std::tuple<WTF::RefPtr<WebCore::TrackPrivateBase::Shared<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>,WTF::RawPtrTraits<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>,WTF::DefaultRefDerefTraits<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>>,WTF::WeakPtr<WebCore::TrackPrivateBaseClient,WTF::DefaultWeakPtrImpl,WebCore::TrackPrivateBase::Shared<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>><WebCore::TrackPrivateBaseClient>>,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 16, a2);
}

{
  uint64_t v3;
  WTF::StringImpl *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  void *v9;

  *(_QWORD *)this = off_1E32065F8;
  v3 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  *(_QWORD *)this = &unk_1E340FFE8;
  v5 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v5)
  {
    v6 = v5 + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v5 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
    }
  }
  WTF::Vector<std::tuple<WTF::RefPtr<WebCore::TrackPrivateBase::Shared<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>,WTF::RawPtrTraits<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>,WTF::DefaultRefDerefTraits<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>>,WTF::WeakPtr<WebCore::TrackPrivateBaseClient,WTF::DefaultWeakPtrImpl,WebCore::TrackPrivateBase::Shared<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>><WebCore::TrackPrivateBaseClient>>,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 16, a2);
  WTF::fastFree(this, v9);
}

void WebCore::TrackPrivateBase::label(_QWORD *a1@<X8>)
{
  _DWORD *v2;

  v2 = (_DWORD *)*MEMORY[0x1E0CBF3B8];
  if (*MEMORY[0x1E0CBF3B8])
    *v2 += 2;
  *a1 = v2;
}

void WebCore::TrackPrivateBase::language(_QWORD *a1@<X8>)
{
  _DWORD *v2;

  v2 = (_DWORD *)*MEMORY[0x1E0CBF3B8];
  if (*MEMORY[0x1E0CBF3B8])
    *v2 += 2;
  *a1 = v2;
}

uint64_t WebCore::TrackPrivateBase::trackIndex(WebCore::TrackPrivateBase *this)
{
  return 0;
}

uint64_t WebCore::VideoTrackPrivate::kind(WebCore::VideoTrackPrivate *this)
{
  return 6;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN7WebCore17VideoTrackPrivate11setSelectedEbEUlRT_E_vJRNS2_22TrackPrivateBaseClientEEE4callES8_(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) == 2)
    return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 56))(a2, *(unsigned __int8 *)(a1 + 8));
  result = 96;
  __break(0xC471u);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateMediaStreamAVFObjC::MediaPlayerPrivateMediaStreamAVFObjC(WebCore::MediaPlayer *)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E3206378;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateMediaStreamAVFObjC::MediaPlayerPrivateMediaStreamAVFObjC(WebCore::MediaPlayer *)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E3206378;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateMediaStreamAVFObjC::MediaPlayerPrivateMediaStreamAVFObjC(WebCore::MediaPlayer *)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v5;
  int v6;
  _BYTE v7[4];
  char v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    if (*(_QWORD *)(v1 + 8))
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (*(_BYTE *)(v2 + 354))
      {
        v3 = (unsigned __int8 *)(v2 + 288);
        if (__ldaxr((unsigned __int8 *)(v2 + 288)))
        {
          __clrex();
        }
        else if (!__stxr(1u, v3))
        {
          goto LABEL_8;
        }
        MEMORY[0x19AEA534C](v2 + 288);
LABEL_8:
        v5 = *(_QWORD *)(v2 + 280);
        if (v5)
        {
          objc_msgSend((id)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 112))(v5), "bounds");
          v7[0] = 0;
          v8 = 0;
          (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v5 + 48))(v5, v7);
          if (v8)
            WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v7);
        }
        v6 = __ldxr(v3);
        if (v6 == 1)
        {
          if (!__stlxr(0, v3))
            return;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v3);
      }
    }
  }
}

void sub_19479EF68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, __int16 a11, char a12, char a13)
{
  unsigned __int8 *v13;
  int v15;

  if (a12)
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&a10);
  v15 = __ldxr(v13);
  if (v15 == 1)
  {
    if (!__stlxr(0, v13))
LABEL_8:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v13);
  goto LABEL_8;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateMediaStreamAVFObjC::processNewVideoFrame(WebCore::VideoFrame &,WebCore::VideoFrameTimeMetadata,WTF::Seconds)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v5;
  int v6;
  __int128 v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  __int128 v11[3];
  uint64_t v12;

  v1 = result;
  v2 = *(_QWORD *)(result + 8);
  v3 = (unsigned __int8 *)(v2 + 328);
  if (__ldaxr((unsigned __int8 *)(v2 + 328)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v3))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEA534C](v2 + 328);
LABEL_5:
  v5 = *(_QWORD *)(v2 + 336);
  *(_QWORD *)(v2 + 336) = 0;
  v6 = __ldxr(v3);
  if (v6 != 1)
  {
    __clrex();
LABEL_10:
    result = WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 328));
    if (!v5)
      return result;
    goto LABEL_11;
  }
  if (__stlxr(0, v3))
    goto LABEL_10;
  if (!v5)
    return result;
LABEL_11:
  v7 = *(_OWORD *)(v1 + 32);
  v11[0] = *(_OWORD *)(v1 + 16);
  v11[1] = v7;
  v11[2] = *(_OWORD *)(v1 + 48);
  v12 = *(_QWORD *)(v1 + 64);
  result = WebCore::MediaPlayerPrivateMediaStreamAVFObjC::processNewVideoFrame(v2, (unsigned __int16 *)v5, v11, *(double *)(v1 + 72));
  v8 = (unsigned int *)(v5 + 8);
  do
  {
    v9 = __ldaxr(v8);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, v8));
  if (!v10)
  {
    atomic_store(1u, (unsigned int *)(v5 + 8));
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  return result;
}

void sub_19479F0B4(_Unwind_Exception *exception_object)
{
  unsigned int *v1;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = v1 + 2;
  do
  {
    v4 = __ldaxr(v3);
    v5 = v4 - 1;
  }
  while (__stlxr(v5, v3));
  if (!v5)
  {
    atomic_store(1u, v1 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateMediaStreamAVFObjC::ensureLayers(void)::$_0,void,BOOL>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  int v12;

  *a1 = &off_1E32063C8;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (__ldaxr((unsigned __int8 *)v3))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v3))
    {
      goto LABEL_6;
    }
    MEMORY[0x19AEA534C](v3);
LABEL_6:
    v5 = *(_QWORD *)(v3 + 16) - 1;
    *(_QWORD *)(v3 + 16) = v5;
    if (!v5)
    {
      v6 = *(_QWORD *)(v3 + 8);
      v7 = __ldxr((unsigned __int8 *)v3);
      if (v7 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v3))
        {
          if (v6)
            goto LABEL_14;
LABEL_13:
          WTF::fastFree((WTF *)v3, a2);
          goto LABEL_14;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v3);
      if (v6)
        goto LABEL_14;
      goto LABEL_13;
    }
    v12 = __ldxr((unsigned __int8 *)v3);
    if (v12 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        goto LABEL_14;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
LABEL_14:
  v8 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v8)
  {
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateMediaStreamAVFObjC::ensureLayers(void)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  int v12;

  *(_QWORD *)this = &off_1E32063C8;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (__ldaxr((unsigned __int8 *)v3))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v3))
    {
      goto LABEL_6;
    }
    MEMORY[0x19AEA534C](v3);
LABEL_6:
    v5 = *(_QWORD *)(v3 + 16) - 1;
    *(_QWORD *)(v3 + 16) = v5;
    if (!v5)
    {
      v6 = *(_QWORD *)(v3 + 8);
      v7 = __ldxr((unsigned __int8 *)v3);
      if (v7 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v3))
        {
          if (v6)
            goto LABEL_14;
LABEL_13:
          WTF::fastFree((WTF *)v3, a2);
          goto LABEL_14;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v3);
      if (v6)
        goto LABEL_14;
      goto LABEL_13;
    }
    v12 = __ldxr((unsigned __int8 *)v3);
    if (v12 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        goto LABEL_14;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
LABEL_14:
  v8 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v8)
  {
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateMediaStreamAVFObjC::ensureLayers(void)::$_0,void,BOOL>::call(unsigned __int8 *result, char a2)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  WTF::StringImpl *v16;
  _BYTE *v17;
  _BYTE *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  int v27;
  _BOOL8 v28;
  uint64_t v29;
  size_t v30;
  uint64_t v31;
  uint64_t v32;
  const void *v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  _DWORD *v37;
  uint64_t v38[2];
  size_t __n[3];

  v3 = result;
  __n[2] = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)result + 2);
  if (!v4)
  {
    v5 = 0;
    goto LABEL_15;
  }
  v5 = *((_QWORD *)result + 3);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
LABEL_6:
    result = (unsigned __int8 *)MEMORY[0x19AEA534C](v4);
    goto LABEL_7;
  }
  if (__stxr(1u, (unsigned __int8 *)v4))
    goto LABEL_6;
LABEL_7:
  if (*(_QWORD *)(v4 + 24))
    ++*(_QWORD *)(v4 + 8);
  else
    v5 = 0;
  v7 = __ldxr((unsigned __int8 *)v4);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
      goto LABEL_15;
  }
  else
  {
    __clrex();
  }
  result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_15:
  v8 = *((_QWORD *)v3 + 1);
  if (!v8 || (v9 = *(_QWORD *)(v8 + 8)) == 0)
  {
    if (!v5)
      return result;
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SampleBufferDisplayLayer,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v5 + 8));
  }
  if (!v5)
    return result;
  if (v5 != *(_QWORD *)(v9 + 208))
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SampleBufferDisplayLayer,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v5 + 8));
  if ((a2 & 1) == 0)
  {
    v29 = *(_QWORD *)(v9 + 224);
    v30 = *(_QWORD *)(v9 + 232);
    v38[0] = (uint64_t)"MediaPlayerPrivateMediaStreamAVFObjC";
    v38[1] = 37;
    __n[0] = (size_t)"layersAreInitialized";
    __n[1] = v30;
    if (*(_BYTE *)(v29 + 12))
    {
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [50]>((uint64_t)&WebCore::LogMedia, 1u, (WTF::Logger::LogSiteIdentifier *)v38, "Initializing the SampleBufferDisplayLayer failed.");
      v31 = *(_QWORD *)(v9 + 208);
      *(_QWORD *)(v9 + 208) = 0;
      if (!v31)
        goto LABEL_45;
    }
    else
    {
      *(_QWORD *)(v9 + 208) = 0;
      v31 = v5;
    }
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SampleBufferDisplayLayer,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v31 + 8));
LABEL_45:
    WebCore::MediaPlayerPrivateMediaStreamAVFObjC::updateLayersAsNeeded((WebCore::MediaPlayerPrivateMediaStreamAVFObjC *)(v9 - 72));
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SampleBufferDisplayLayer,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v5 + 8));
  }
  v11 = *((_DWORD *)v3 + 8);
  v10 = *((_DWORD *)v3 + 9);
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v12 = off_1E3206508;
  v12[1] = v9 - 72;
  v38[0] = (uint64_t)v12;
  WebCore::MediaPlayerPrivateMediaStreamAVFObjC::scheduleDeferredTask(v9 - 72, v38);
  if (v38[0])
    (*(void (**)(uint64_t))(*(_QWORD *)v38[0] + 8))(v38[0]);
  v13 = *(_QWORD *)(v9 + 208);
  result = (unsigned __int8 *)WTF::Internal::appendHex();
  v15 = v14;
  LODWORD(__n[0]) = v14;
  if ((v14 & 0x80000000) == 0)
  {
    if (!v14)
    {
      v16 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
LABEL_28:
      v36 = v16;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v13 + 24))(v13, &v36);
      v20 = v36;
      v36 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, v19);
        else
          *(_DWORD *)v20 -= 2;
      }
      if (*(_BYTE *)(v9 + 400))
      {
        v21 = *(_QWORD *)(v9 + 208);
        v22 = *(double *)(v9 + 368);
        v23 = *(double *)(v9 + 376);
        v24 = *(double *)(v9 + 384);
        v25 = *(double *)(v9 + 392);
        LOBYTE(v37) = 0;
        BYTE4(v37) = 0;
        (*(void (**)(uint64_t, _DWORD **, double, double, double, double))(*(_QWORD *)v21 + 48))(v21, &v37, v22, v23, v24, v25);
        if (BYTE4(v37))
          WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v37);
      }
      v26 = *(_QWORD *)(v9 + 208);
      v27 = *(_DWORD *)(v9 + 200);
      v28 = (!WebCore::MediaPlayerPrivateMediaStreamAVFObjC::activeVideoTrack((WebCore::MediaPlayerPrivateMediaStreamAVFObjC *)(v9 - 72))
          || *(_BYTE *)(v9 + 279))
         && *(_DWORD *)(v9 + 200) != 1;
      (*(void (**)(uint64_t, BOOL, _BOOL8))(*(_QWORD *)v26 + 40))(v26, v27 < 3, v28);
      v32 = *(_QWORD *)(v9 + 240);
      v33 = (const void *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 208) + 112))(*(_QWORD *)(v9 + 208));
      WebCore::VideoLayerManagerObjC::setVideoLayer(v32, v33, (float)v11, (float)v10);
      objc_msgSend(*(id *)(v9 + 248), "begin:", (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 208) + 112))(*(_QWORD *)(v9 + 208)));
      *(_BYTE *)(v9 + 217) = 1;
      if (*(_QWORD *)(v9 + 408))
      {
        v34 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 208) + 136))(*(_QWORD *)(v9 + 208));
        v35 = *(_QWORD *)(v9 + 408);
        *(_QWORD *)(v9 + 408) = 0;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v35 + 16))(v35, v34);
        (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
      }
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SampleBufferDisplayLayer,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v5 + 8));
    }
    result = (unsigned __int8 *)WTF::tryFastCompactMalloc((WTF *)(v14 + 20));
    v16 = (WTF::StringImpl *)v37;
    if (v37)
    {
      v17 = v37 + 5;
      *v37 = 2;
      *((_DWORD *)v16 + 1) = v15;
      *((_QWORD *)v16 + 1) = (char *)v16 + 20;
      *((_DWORD *)v16 + 4) = 4;
      if (LODWORD(__n[0]))
      {
        v18 = (char *)__n - LODWORD(__n[0]);
        if (LODWORD(__n[0]) == 1)
          *v17 = *v18;
        else
          memcpy(v17, v18, LODWORD(__n[0]));
      }
      goto LABEL_28;
    }
  }
  __break(0xC471u);
  return result;
}

void sub_19479F700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v16;

  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SampleBufferDisplayLayer,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v16 + 8));
  _Unwind_Resume(a1);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateMediaStreamAVFObjC::load(WTF::String const&)::$_0,void>::call(unsigned __int8 *result)
{
  uint64_t v1;
  uint64_t v2;
  WebCore::MediaPlayer *v3;
  int v5;

  v1 = *((_QWORD *)result + 1);
  if (*(_BYTE *)(v1 + 256) == 4)
    return result;
  *(_BYTE *)(v1 + 256) = 4;
  v2 = *(_QWORD *)(v1 + 120);
  if (!v2)
    return result;
  v3 = *(WebCore::MediaPlayer **)(v1 + 128);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
LABEL_6:
    result = (unsigned __int8 *)MEMORY[0x19AEA534C](v2);
    goto LABEL_7;
  }
  if (__stxr(1u, (unsigned __int8 *)v2))
    goto LABEL_6;
LABEL_7:
  if (*(_QWORD *)(v2 + 24))
    ++*(_QWORD *)(v2 + 8);
  else
    v3 = 0;
  v5 = __ldxr((unsigned __int8 *)v2);
  if (v5 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v2))
    {
      if (!v3)
        return result;
      goto LABEL_13;
    }
  }
  else
  {
    __clrex();
  }
  result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
  if (v3)
  {
LABEL_13:
    WebCore::MediaPlayer::networkStateChanged(v3);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v3);
  }
  return result;
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateMediaStreamAVFObjC::load(WTF::URL const&,WebCore::ContentType const&,WebCore::MediaSourcePrivateClient &)::$_0,void>::call(unsigned __int8 *result)
{
  uint64_t v1;
  uint64_t v2;
  WebCore::MediaPlayer *v3;
  int v5;

  v1 = *((_QWORD *)result + 1);
  if (*(_BYTE *)(v1 + 256) == 4)
    return result;
  *(_BYTE *)(v1 + 256) = 4;
  v2 = *(_QWORD *)(v1 + 120);
  if (!v2)
    return result;
  v3 = *(WebCore::MediaPlayer **)(v1 + 128);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
LABEL_6:
    result = (unsigned __int8 *)MEMORY[0x19AEA534C](v2);
    goto LABEL_7;
  }
  if (__stxr(1u, (unsigned __int8 *)v2))
    goto LABEL_6;
LABEL_7:
  if (*(_QWORD *)(v2 + 24))
    ++*(_QWORD *)(v2 + 8);
  else
    v3 = 0;
  v5 = __ldxr((unsigned __int8 *)v2);
  if (v5 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v2))
    {
      if (!v3)
        return result;
      goto LABEL_13;
    }
  }
  else
  {
    __clrex();
  }
  result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
  if (v3)
  {
LABEL_13:
    WebCore::MediaPlayer::networkStateChanged(v3);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v3);
  }
  return result;
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateMediaStreamAVFObjC::load(WebCore::MediaStreamPrivate &)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  WebCore::MediaPlayer *v3;
  int v5;
  unsigned __int8 *result;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  _QWORD v11[4];

  v1 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v1 + 256) == 1)
    goto LABEL_17;
  *(_BYTE *)(v1 + 256) = 1;
  v2 = *(_QWORD *)(v1 + 120);
  if (!v2)
    goto LABEL_17;
  v3 = *(WebCore::MediaPlayer **)(v1 + 128);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEA534C](v2);
LABEL_7:
  if (*(_QWORD *)(v2 + 24))
    ++*(_QWORD *)(v2 + 8);
  else
    v3 = 0;
  v5 = __ldxr((unsigned __int8 *)v2);
  if (v5 != 1)
  {
    __clrex();
    goto LABEL_14;
  }
  if (__stlxr(0, (unsigned __int8 *)v2))
LABEL_14:
    WTF::Lock::unlockSlow((WTF::Lock *)v2);
  if (v3)
  {
    WebCore::MediaPlayer::networkStateChanged(v3);
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v3);
  }
LABEL_17:
  result = (unsigned __int8 *)WebCore::MediaPlayerPrivateMediaStreamAVFObjC::currentReadyState((WebCore::MediaPlayerPrivateMediaStreamAVFObjC *)v1);
  if ((_DWORD)result != *(unsigned __int8 *)(v1 + 257))
  {
    v7 = result;
    v8 = *(_QWORD *)(v1 + 296);
    v9 = *(_QWORD *)(v1 + 304);
    v11[0] = "MediaPlayerPrivateMediaStreamAVFObjC";
    v11[1] = 37;
    v11[2] = "updateReadyState";
    v11[3] = v9;
    v10 = result;
    if (*(_BYTE *)(v8 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],int>(0, (WTF::Logger::LogSiteIdentifier *)v11, &v10);
    return WebCore::MediaPlayerPrivateMediaStreamAVFObjC::setReadyState((unsigned __int8 *)v1, v7);
  }
  return result;
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],int>(unsigned int a1, WTF::Logger::LogSiteIdentifier *this, unsigned int *a3)
{
  uint64_t result;
  int v5;
  int v6;
  int v7;
  BOOL v8;
  int v9;
  BOOL v10;
  int v11;
  unsigned int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  NSObject *v17;
  uint64_t v18;
  void *v19;
  char *v20;
  unsigned __int8 *v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  WTF::String *v29;
  WTF::Logger *v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::Logger *v35;
  uint64_t v36;
  WTF::StringImpl **v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  int v42;
  WTF::Logger *v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  __int128 buf;
  int v52;
  WTF::StringImpl *v53;
  int v54;
  WTF::StringImpl *v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  WTF::String::String((WTF::String *)&v48, "updated to ");
  result = WTF::String::number((WTF::String *)*a3);
  if (v49)
  {
    v5 = *((_DWORD *)v49 + 1);
    if (v48)
      goto LABEL_3;
LABEL_91:
    v6 = 0;
    if (v47)
      goto LABEL_4;
LABEL_92:
    v7 = 0;
    goto LABEL_5;
  }
  v5 = 0;
  if (!v48)
    goto LABEL_91;
LABEL_3:
  v6 = *((_DWORD *)v48 + 1);
  if (!v47)
    goto LABEL_92;
LABEL_4:
  v7 = *((_DWORD *)v47 + 1);
LABEL_5:
  if ((v7 | v6) < 0)
    goto LABEL_95;
  v8 = __OFADD__(v6, v7);
  v9 = v6 + v7;
  v10 = v8;
  if (v5 < 0)
    goto LABEL_95;
  if (v10)
    goto LABEL_95;
  result = (v5 + v9);
  if (__OFADD__(v5, v9))
    goto LABEL_95;
  if (v49 && (*((_BYTE *)v49 + 16) & 4) == 0)
  {
    v11 = 0;
    goto LABEL_19;
  }
  if (v48)
  {
    v12 = *((_DWORD *)v48 + 4);
    v11 = (v12 >> 2) & 1;
    if (v47 && (v12 & 4) != 0)
      goto LABEL_18;
  }
  else
  {
    if (v47)
    {
LABEL_18:
      v11 = (*((unsigned __int8 *)v47 + 16) >> 2) & 1;
      goto LABEL_19;
    }
    v11 = 1;
  }
LABEL_19:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v11, v49, (uint64_t)v48, (uint64_t)v47, &buf);
  v50 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_95:
    __break(0xC471u);
    return result;
  }
  v14 = v47;
  v47 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = v48;
  v48 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v13);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = v49;
  v49 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v13);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = qword_1ECE7C4A0;
  v18 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v18)
  {
    WTF::String::utf8();
    v20 = v45 ? (char *)v45 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v20;
    _os_log_impl(&dword_1940B8000, v17, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v18 = (uint64_t)v45;
    v45 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 1)
        v18 = WTF::fastFree((WTF *)v18, v19);
      else
        --*(_DWORD *)v18;
    }
  }
  if (WebCore::LogMedia && byte_1ECE7C490 >= a1)
  {
    v21 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v22 = *v21;
      if ((v22 & 1) != 0)
        break;
      v23 = __ldaxr(v21);
      if (v23 == v22)
      {
        if (!__stxr(v22 | 1, v21))
        {
          v24 = WTF::Logger::observers((WTF::Logger *)v18);
          v25 = *(unsigned int *)(v24 + 12);
          if ((_DWORD)v25)
          {
            v26 = *(uint64_t **)v24;
            v27 = *(_QWORD *)v24 + 8 * v25;
            do
            {
              v28 = *v26;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v52 = 0;
              WTF::String::String((WTF::String *)&v53, "updated to ");
              v29 = (WTF::String *)*a3;
              v54 = 0;
              WTF::String::number(v29);
              v45 = 0;
              v46 = 0;
              v30 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
              LODWORD(v46) = 3;
              v45 = v30;
              v31 = HIDWORD(v46);
              *((_DWORD *)v30 + 4 * HIDWORD(v46)) = buf;
              v32 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v30 + 2 * v31 + 1) = v32;
              *((_DWORD *)v30 + 4 * (v31 + 1)) = v52;
              v33 = v53;
              if (v53)
                *(_DWORD *)v53 += 2;
              *((_QWORD *)v30 + 2 * (v31 + 1) + 1) = v33;
              *((_DWORD *)v30 + 4 * (v31 + 2)) = v54;
              v34 = v55;
              if (v55)
                *(_DWORD *)v55 += 2;
              *((_QWORD *)v30 + 2 * (v31 + 2) + 1) = v34;
              HIDWORD(v46) = v31 + 3;
              (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v28 + 16))(v28, &WebCore::LogMedia, a1, &v45);
              v35 = v45;
              if (HIDWORD(v46))
              {
                v36 = 16 * HIDWORD(v46);
                v37 = (WTF::StringImpl **)((char *)v45 + 8);
                do
                {
                  v38 = *v37;
                  *v37 = 0;
                  if (v38)
                  {
                    if (*(_DWORD *)v38 == 2)
                      WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v19);
                    else
                      *(_DWORD *)v38 -= 2;
                  }
                  v37 += 2;
                  v36 -= 16;
                }
                while (v36);
                v35 = v45;
              }
              if (v35)
              {
                v45 = 0;
                LODWORD(v46) = 0;
                WTF::fastFree(v35, v19);
              }
              v39 = v55;
              v55 = 0;
              if (v39)
              {
                if (*(_DWORD *)v39 == 2)
                  WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v19);
                else
                  *(_DWORD *)v39 -= 2;
              }
              v40 = v53;
              v53 = 0;
              if (v40)
              {
                if (*(_DWORD *)v40 == 2)
                  WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v19);
                else
                  *(_DWORD *)v40 -= 2;
              }
              v41 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v41)
              {
                if (*(_DWORD *)v41 == 2)
                  WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v19);
                else
                  *(_DWORD *)v41 -= 2;
              }
              ++v26;
            }
            while (v26 != (uint64_t *)v27);
          }
          v42 = __ldxr(v21);
          if (v42 == 1)
          {
            if (!__stlxr(0, v21))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v50;
  v50 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v19);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_19479FF30(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF *a13, int a14, int a15, WTF::StringImpl *a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19, char a20,WTF::StringImpl *a21,uint64_t a22,WTF::StringImpl *a23,uint64_t a24,WTF::StringImpl *a25)
{
  unsigned __int8 *v25;
  int v27;

  v27 = __ldxr(v25);
  if (v27 == 1)
  {
    if (!__stlxr(0, v25))
    {
LABEL_6:
      if (a19)
      {
        if (*(_DWORD *)a19 == 2)
          WTF::StringImpl::destroy(a19, a2);
        else
          *(_DWORD *)a19 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateMediaStreamAVFObjC::play(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 *result;
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  unsigned int v10;
  _QWORD v11[4];

  v1 = *(_QWORD *)(a1 + 8);
  result = (unsigned __int8 *)WebCore::MediaPlayerPrivateMediaStreamAVFObjC::currentReadyState((WebCore::MediaPlayerPrivateMediaStreamAVFObjC *)v1);
  if ((_DWORD)result != *(unsigned __int8 *)(v1 + 257))
  {
    v3 = result;
    v4 = *(_QWORD *)(v1 + 296);
    v5 = *(_QWORD *)(v1 + 304);
    v11[0] = "MediaPlayerPrivateMediaStreamAVFObjC";
    v11[1] = 37;
    v11[2] = "updateReadyState";
    v11[3] = v5;
    v10 = result;
    if (*(_BYTE *)(v4 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],int>(0, (WTF::Logger::LogSiteIdentifier *)v11, &v10);
    result = WebCore::MediaPlayerPrivateMediaStreamAVFObjC::setReadyState((unsigned __int8 *)v1, v3);
  }
  v6 = *(_QWORD *)(v1 + 120);
  if (v6)
  {
    v7 = *(_QWORD *)(v1 + 128);
    if (__ldaxr((unsigned __int8 *)v6))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v6))
    {
      goto LABEL_10;
    }
    result = (unsigned __int8 *)MEMORY[0x19AEA534C](v6);
LABEL_10:
    if (*(_QWORD *)(v6 + 24))
      ++*(_QWORD *)(v6 + 8);
    else
      v7 = 0;
    v9 = __ldxr((unsigned __int8 *)v6);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v6))
      {
LABEL_18:
        if (v7)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v7 + 8) + 8) + 72))(*(_QWORD *)(*(_QWORD *)(v7 + 8) + 8));
          return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v7);
        }
        return result;
      }
    }
    else
    {
      __clrex();
    }
    result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v6);
    goto LABEL_18;
  }
  return result;
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateMediaStreamAVFObjC::pause(void)::$_0,void>::call(unsigned __int8 *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v5;

  v1 = *((_QWORD *)result + 1);
  v2 = *(_QWORD *)(v1 + 120);
  if (!v2)
    return result;
  v3 = *(_QWORD *)(v1 + 128);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
LABEL_5:
    result = (unsigned __int8 *)MEMORY[0x19AEA534C](v2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v2))
    goto LABEL_5;
LABEL_6:
  if (*(_QWORD *)(v2 + 24))
    ++*(_QWORD *)(v2 + 8);
  else
    v3 = 0;
  v5 = __ldxr((unsigned __int8 *)v2);
  if (v5 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v2))
    {
      if (!v3)
        return result;
      goto LABEL_12;
    }
  }
  else
  {
    __clrex();
  }
  result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
  if (v3)
  {
LABEL_12:
    (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v3 + 8) + 8) + 72))(*(_QWORD *)(*(_QWORD *)(v3 + 8)
                                                                                                 + 8));
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v3);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateMediaStreamAVFObjC::currentReadyState(void)::$_0,void,WebCore::MediaStreamTrackPrivate &>::call(uint64_t result, uint64_t a2)
{
  BOOL v2;

  if (*(_BYTE *)(a2 + 73))
    v2 = *(_DWORD *)(a2 + 68) == 1;
  else
    v2 = 0;
  if (!v2)
    **(_BYTE **)(result + 8) = 0;
  return result;
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateMediaStreamAVFObjC::activeStatusChanged(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  uint64_t ready;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *result;
  uint64_t v10;
  uint64_t v11;
  int v13;
  unsigned int v14;
  _QWORD v15[4];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(v1 + 136);
  v3 = *(unsigned __int8 *)(v2 + 88);
  if (!*(_BYTE *)(v2 + 88) && *(_DWORD *)(v1 + 276) == 1)
    WebCore::MediaPlayerPrivateMediaStreamAVFObjC::pause(*(WTF::MonotonicTime **)(a1 + 8));
  v4 = v3 ^ 1;
  ready = WebCore::MediaPlayerPrivateMediaStreamAVFObjC::currentReadyState((WebCore::MediaPlayerPrivateMediaStreamAVFObjC *)v1);
  if ((_DWORD)ready != *(unsigned __int8 *)(v1 + 257))
  {
    v6 = (void *)ready;
    v7 = *(_QWORD *)(v1 + 296);
    v8 = *(_QWORD *)(v1 + 304);
    v15[0] = "MediaPlayerPrivateMediaStreamAVFObjC";
    v15[1] = 37;
    v15[2] = "updateReadyState";
    v15[3] = v8;
    v14 = ready;
    if (*(_BYTE *)(v7 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],int>(0, (WTF::Logger::LogSiteIdentifier *)v15, &v14);
    WebCore::MediaPlayerPrivateMediaStreamAVFObjC::setReadyState((unsigned __int8 *)v1, v6);
  }
  result = (unsigned __int8 *)WebCore::MediaPlayerPrivateMediaStreamAVFObjC::updateDisplayMode(v1);
  if (*(unsigned __int8 *)(v1 + 346) != v4)
  {
    *(_BYTE *)(v1 + 346) = v4;
    v10 = *(_QWORD *)(v1 + 120);
    if (v10)
    {
      v11 = *(_QWORD *)(v1 + 128);
      if (__ldaxr((unsigned __int8 *)v10))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v10))
      {
        goto LABEL_14;
      }
      result = (unsigned __int8 *)MEMORY[0x19AEA534C](v10);
LABEL_14:
      if (*(_QWORD *)(v10 + 24))
        ++*(_QWORD *)(v10 + 8);
      else
        v11 = 0;
      v13 = __ldxr((unsigned __int8 *)v10);
      if (v13 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v10))
        {
LABEL_22:
          if (v11)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v11 + 8) + 8) + 56))(*(_QWORD *)(*(_QWORD *)(v11 + 8) + 8));
            (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v11 + 8) + 8) + 128))(*(_QWORD *)(*(_QWORD *)(v11 + 8) + 8));
            return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v11);
          }
          return result;
        }
      }
      else
      {
        __clrex();
      }
      result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v10);
      goto LABEL_22;
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateMediaStreamAVFObjC::scheduleRenderingModeChanged(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(v1 + 120);
  if (!v2)
    return WebCore::MediaPlayerPrivateMediaStreamAVFObjC::reenqueueCurrentVideoFrameIfNeeded(v1);
  v3 = *(_QWORD *)(v1 + 128);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v2))
    goto LABEL_5;
LABEL_6:
  if (*(_QWORD *)(v2 + 24))
    ++*(_QWORD *)(v2 + 8);
  else
    v3 = 0;
  v5 = __ldxr((unsigned __int8 *)v2);
  if (v5 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v2))
    {
      if (!v3)
        return WebCore::MediaPlayerPrivateMediaStreamAVFObjC::reenqueueCurrentVideoFrameIfNeeded(v1);
      goto LABEL_15;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
  if (v3)
  {
LABEL_15:
    (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v3 + 8) + 8) + 144))(*(_QWORD *)(*(_QWORD *)(v3 + 8)
                                                                                                  + 8));
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v3);
  }
  return WebCore::MediaPlayerPrivateMediaStreamAVFObjC::reenqueueCurrentVideoFrameIfNeeded(v1);
}

void sub_1947A055C(_Unwind_Exception *a1)
{
  unsigned __int8 **v1;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateMediaStreamAVFObjC::scheduleTaskForCharacteristicsChanged(WebCore::MediaPlayerPrivateMediaStreamAVFObjC::SizeChanged)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 *result;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v10;
  unsigned int v11;
  _QWORD v12[4];

  v2 = *(_QWORD *)(a1 + 8);
  result = (unsigned __int8 *)WebCore::MediaPlayerPrivateMediaStreamAVFObjC::currentReadyState((WebCore::MediaPlayerPrivateMediaStreamAVFObjC *)v2);
  if ((_DWORD)result != *(unsigned __int8 *)(v2 + 257))
  {
    v4 = result;
    v5 = *(_QWORD *)(v2 + 296);
    v6 = *(_QWORD *)(v2 + 304);
    v12[0] = "MediaPlayerPrivateMediaStreamAVFObjC";
    v12[1] = 37;
    v12[2] = "updateReadyState";
    v12[3] = v6;
    v11 = result;
    if (*(_BYTE *)(v5 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],int>(0, (WTF::Logger::LogSiteIdentifier *)v12, &v11);
    result = WebCore::MediaPlayerPrivateMediaStreamAVFObjC::setReadyState((unsigned __int8 *)v2, v4);
  }
  v7 = *(_QWORD *)(v2 + 120);
  if (v7)
  {
    v8 = *(_QWORD *)(v2 + 128);
    if (__ldaxr((unsigned __int8 *)v7))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v7))
    {
      goto LABEL_10;
    }
    result = (unsigned __int8 *)MEMORY[0x19AEA534C](v7);
LABEL_10:
    if (*(_QWORD *)(v7 + 24))
      ++*(_QWORD *)(v7 + 8);
    else
      v8 = 0;
    v10 = __ldxr((unsigned __int8 *)v7);
    if (v10 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v7))
      {
        if (!v8)
          return result;
        goto LABEL_19;
      }
    }
    else
    {
      __clrex();
    }
    result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v7);
    if (!v8)
      return result;
LABEL_19:
    (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v8 + 8) + 8) + 128))(*(_QWORD *)(*(_QWORD *)(v8 + 8)
                                                                                                  + 8));
    if (*(_BYTE *)(a1 + 16))
      (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v8 + 8) + 8) + 104))(*(_QWORD *)(*(_QWORD *)(v8 + 8) + 8));
    if (!*(_QWORD *)(v2 + 280) && *(float *)(v2 + 260) > 0.0 && *(float *)(v2 + 264) > 0.0)
      WebCore::MediaPlayerPrivateMediaStreamAVFObjC::updateLayersAsNeeded((WebCore::MediaPlayerPrivateMediaStreamAVFObjC *)v2);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v8);
  }
  return result;
}

void sub_1947A06E0(_Unwind_Exception *a1)
{
  unsigned __int8 **v1;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateMediaStreamAVFObjC::readyStateChanged(WebCore::MediaStreamTrackPrivate &)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 *result;
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  _QWORD v7[4];

  v1 = *(_QWORD *)(a1 + 8);
  result = (unsigned __int8 *)WebCore::MediaPlayerPrivateMediaStreamAVFObjC::currentReadyState((WebCore::MediaPlayerPrivateMediaStreamAVFObjC *)v1);
  if ((_DWORD)result != *(unsigned __int8 *)(v1 + 257))
  {
    v3 = result;
    v4 = *(_QWORD *)(v1 + 296);
    v5 = *(_QWORD *)(v1 + 304);
    v7[0] = "MediaPlayerPrivateMediaStreamAVFObjC";
    v7[1] = 37;
    v7[2] = "updateReadyState";
    v7[3] = v5;
    v6 = result;
    if (*(_BYTE *)(v4 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],int>(0, (WTF::Logger::LogSiteIdentifier *)v7, &v6);
    return WebCore::MediaPlayerPrivateMediaStreamAVFObjC::setReadyState((unsigned __int8 *)v1, v3);
  }
  return result;
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::AudioTrackPrivateMediaStream,WTF::RawPtrTraits<WebCore::AudioTrackPrivateMediaStream>,WTF::DefaultRefDerefTraits<WebCore::AudioTrackPrivateMediaStream>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::AudioTrackPrivateMediaStream,WTF::RawPtrTraits<WebCore::AudioTrackPrivateMediaStream>,WTF::DefaultRefDerefTraits<WebCore::AudioTrackPrivateMediaStream>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebCore::AudioTrackPrivateMediaStream,WTF::RawPtrTraits<WebCore::AudioTrackPrivateMediaStream>,WTF::DefaultRefDerefTraits<WebCore::AudioTrackPrivateMediaStream>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::AudioTrackPrivateMediaStream,WTF::RawPtrTraits<WebCore::AudioTrackPrivateMediaStream>,WTF::DefaultRefDerefTraits<WebCore::AudioTrackPrivateMediaStream>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  WTF *v5;
  uint64_t result;
  WTF::StringImpl *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char *v13;
  WTF::StringImpl *v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl **v22;
  WTF::StringImpl *v23;
  unsigned int v24;
  unsigned int **v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  WTF::StringImpl *v29;
  unsigned int *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  unsigned int **v34;
  unsigned int *v35;
  unsigned int *v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  WTF::StringImpl *v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  unsigned int *v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int *v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  WTF::StringImpl *v58;
  WTF *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  int v63;

  v4 = *((unsigned int *)a1 + 2);
  v5 = (WTF *)*a1;
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2));
  *a1 = result;
  *((_DWORD *)a1 + 2) = a2;
  v8 = (~(result << 32) + result) ^ ((unint64_t)(~(result << 32) + result) >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  *((_DWORD *)a1 + 4) = (v10 >> 31) ^ v10;
  *((_BYTE *)a1 + 20) = 0;
  v60 = v4;
  if ((_DWORD)v4)
  {
    v11 = a1;
    v12 = 0;
    v59 = v5;
    v62 = v11;
    do
    {
      v13 = (char *)v5 + 16 * v12;
      v14 = *(WTF::StringImpl **)v13;
      if (*(_QWORD *)v13)
      {
        v15 = *((_DWORD *)v11 + 2);
        v16 = *((_DWORD *)v11 + 4);
        v17 = *((_DWORD *)v14 + 4);
        v63 = v15;
        v61 = v12;
        if (v17 < 0x100)
        {
          v18 = WTF::StringImpl::hashSlowCase(v14);
          v15 = v63;
          v11 = v62;
        }
        else
        {
          v18 = v17 >> 8;
        }
        v19 = v15 - 1;
        v20 = (v18 ^ v16) & (v15 - 1);
        v21 = *v11;
        v22 = (WTF::StringImpl **)(*v11 + 16 * v20);
        v23 = *v22;
        if (*v22)
        {
          v24 = 0;
          v25 = (unsigned int **)((char *)v5 + 16 * v61 + 8);
          do
          {
            v26 = *((_DWORD *)v23 + 4);
            if (v26 < 0x100)
            {
              v27 = WTF::StringImpl::hashSlowCase(v23);
              v15 = v63;
              v11 = v62;
            }
            else
            {
              v27 = v26 >> 8;
            }
            v28 = (v20 + v15 - ((v27 ^ v16) & v19)) & v19;
            if (v24 > v28)
            {
              v29 = *(WTF::StringImpl **)v13;
              v30 = *v25;
              *(_QWORD *)v13 = 0;
              *((_QWORD *)v13 + 1) = 0;
              v31 = *v22;
              *v22 = 0;
              v32 = *(WTF::StringImpl **)v13;
              *(_QWORD *)v13 = v31;
              if (v32)
              {
                if (*(_DWORD *)v32 == 2)
                {
                  WTF::StringImpl::destroy(v32, v7);
                  v15 = v63;
                  v11 = v62;
                }
                else
                {
                  *(_DWORD *)v32 -= 2;
                }
              }
              v33 = v21 + 16 * v20;
              v35 = *(unsigned int **)(v33 + 8);
              v34 = (unsigned int **)(v33 + 8);
              *v34 = 0;
              v36 = *v25;
              *v25 = v35;
              if (v36)
              {
                v37 = v36 + 2;
                do
                {
                  v38 = __ldaxr(v37);
                  v39 = v38 - 1;
                }
                while (__stlxr(v39, v37));
                if (!v39)
                {
                  atomic_store(1u, v36 + 2);
                  (*(void (**)(unsigned int *))(*(_QWORD *)v36 + 8))(v36);
                  v15 = v63;
                  v11 = v62;
                }
              }
              v40 = *v22;
              *v22 = v29;
              if (v40)
              {
                if (*(_DWORD *)v40 == 2)
                {
                  WTF::StringImpl::destroy(v40, v7);
                  v15 = v63;
                  v11 = v62;
                }
                else
                {
                  *(_DWORD *)v40 -= 2;
                }
              }
              v41 = *v34;
              *v34 = v30;
              if (v41)
              {
                v42 = v41 + 2;
                do
                {
                  v43 = __ldaxr(v42);
                  v44 = v43 - 1;
                }
                while (__stlxr(v44, v42));
                if (!v44)
                {
                  atomic_store(1u, v41 + 2);
                  (*(void (**)(unsigned int *))(*(_QWORD *)v41 + 8))(v41);
                  v15 = v63;
                  v11 = v62;
                }
              }
              v24 = v28;
            }
            v20 = ((_DWORD)v20 + 1) & v19;
            ++v24;
            v21 = *v11;
            v22 = (WTF::StringImpl **)(*v11 + 16 * v20);
            v23 = *v22;
          }
          while (*v22);
        }
        v45 = *(WTF::StringImpl **)v13;
        *(_QWORD *)v13 = 0;
        v46 = *v22;
        *v22 = v45;
        v5 = v59;
        if (v46)
        {
          if (*(_DWORD *)v46 == 2)
          {
            WTF::StringImpl::destroy(v46, v7);
            v11 = v62;
          }
          else
          {
            *(_DWORD *)v46 -= 2;
          }
        }
        v47 = v21 + 16 * v20;
        v12 = v61;
        v48 = (char *)v59 + 16 * v61;
        v49 = *((_QWORD *)v48 + 1);
        *((_QWORD *)v48 + 1) = 0;
        v50 = *(unsigned int **)(v47 + 8);
        *(_QWORD *)(v47 + 8) = v49;
        if (v50)
        {
          v51 = v50 + 2;
          do
          {
            v52 = __ldaxr(v51);
            v53 = v52 - 1;
          }
          while (__stlxr(v53, v51));
          if (!v53)
          {
            atomic_store(1u, v50 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v50 + 8))(v50);
            v11 = v62;
          }
        }
      }
      v54 = (unsigned int *)*((_QWORD *)v13 + 1);
      *((_QWORD *)v13 + 1) = 0;
      if (v54)
      {
        v55 = v54 + 2;
        do
        {
          v56 = __ldaxr(v55);
          v57 = v56 - 1;
        }
        while (__stlxr(v57, v55));
        if (!v57)
        {
          atomic_store(1u, v54 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v54 + 8))(v54);
          v11 = v62;
        }
      }
      v58 = *(WTF::StringImpl **)v13;
      *(_QWORD *)v13 = 0;
      if (v58)
      {
        if (*(_DWORD *)v58 == 2)
        {
          WTF::StringImpl::destroy(v58, v7);
          v11 = v62;
        }
        else
        {
          *(_DWORD *)v58 -= 2;
        }
      }
      ++v12;
    }
    while (v12 != v60);
  }
  else if (!v5)
  {
    return result;
  }
  return WTF::fastFree(v5, v7);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateMediaStreamAVFObjC::updateTracks(void)::$_0,void,std::reference_wrapper<WebCore::AudioTrackPrivateMediaStream>,int,WebCore::TrackState>::~CallableWrapper(_QWORD *a1)
{
  unsigned __int8 **v2;

  *a1 = &off_1E3206580;
  v2 = (unsigned __int8 **)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateMediaStreamAVFObjC::updateTracks(void)::$_0,void,std::reference_wrapper<WebCore::AudioTrackPrivateMediaStream>,int,WebCore::TrackState>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned __int8 **v3;

  *(_QWORD *)this = &off_1E3206580;
  v3 = (unsigned __int8 **)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v3);
  return WTF::fastFree(this, a2);
}

_BYTE *WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateMediaStreamAVFObjC::updateTracks(void)::$_0,void,std::reference_wrapper<WebCore::AudioTrackPrivateMediaStream>,int,WebCore::TrackState>::call(_BYTE *result, WebCore::AudioTrackPrivateMediaStream *this, int a3, int a4)
{
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t (*v10)(void);
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18[3];

  v5 = result;
  v6 = *((_QWORD *)result + 1);
  switch(a4)
  {
    case 0:
      WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>(*((_QWORD *)this + 15) + 24, (_QWORD *)(v6 + 72), (uint64_t)v18);
      v10 = *(uint64_t (**)(void))(**(_QWORD **)(*(_QWORD *)(*((_QWORD *)v5 + 2) + 8) + 8) + 344);
      return (_BYTE *)v10();
    case 2:
      *((_DWORD *)this + 34) = a3;
      v11 = *((_QWORD *)this + 18);
      if (v11)
        (*(void (**)(uint64_t, float))(*(_QWORD *)v11 + 80))(v11, *(float *)(v6 + 268));
      WebCore::AudioTrackPrivateMediaStream::updateRenderer(this);
      *((_BYTE *)this + 118) = *(_BYTE *)(v6 + 345);
      result = WebCore::AudioTrackPrivateMediaStream::updateRenderer(this);
      v12 = *((_QWORD *)this + 15);
      if (*(_BYTE *)(v12 + 73))
        v13 = *(unsigned __int8 *)(v12 + 97) == 0;
      else
        v13 = 0;
      if (*((unsigned __int8 *)this + 48) != v13)
      {
        *((_BYTE *)this + 48) = v13;
        v14 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v14 = off_1E32066C8;
        *(_BYTE *)(v14 + 8) = v13;
        v18[0] = v14;
        WebCore::TrackPrivateBase::notifyClients((uint64_t)this, v18);
        v15 = v18[0];
        v18[0] = 0;
        if (v15)
          (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
        result = (_BYTE *)*((_QWORD *)this + 10);
        if (result)
          result = (_BYTE *)(*(uint64_t (**)(_BYTE *, WebCore::AudioTrackPrivateMediaStream *, _QWORD))(*(_QWORD *)result + 16))(result, this, *((unsigned __int8 *)this + 48));
      }
      if (**((_QWORD **)v5 + 3))
      {
        result = (_BYTE *)*((_QWORD *)this + 18);
        if (result)
          result = (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)result + 88))(result);
      }
      if (*(_DWORD *)(v6 + 276) == 1 && !*((_BYTE *)this + 117))
      {
        *((_BYTE *)this + 117) = 1;
        return WebCore::AudioTrackPrivateMediaStream::updateRenderer(this);
      }
      break;
    case 1:
      WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>(*((_QWORD *)this + 15) + 24, (_QWORD *)(v6 + 72));
      if (*((_BYTE *)this + 119))
      {
LABEL_35:
        v10 = *(uint64_t (**)(void))(**(_QWORD **)(*(_QWORD *)(*((_QWORD *)v5 + 2) + 8) + 8) + 368);
        return (_BYTE *)v10();
      }
      *((_BYTE *)this + 119) = 1;
      if (!*((_BYTE *)this + 116))
      {
LABEL_33:
        WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>(*((_QWORD *)this + 15) + 24, (_QWORD *)this + 11);
        v17 = *((_QWORD *)this + 18);
        if (v17)
          (*(void (**)(uint64_t))(*(_QWORD *)v17 + 64))(v17);
        goto LABEL_35;
      }
      v7 = *((_QWORD *)this + 16);
      v8 = (unsigned __int8 *)(v7 + 144);
      if (__ldaxr((unsigned __int8 *)(v7 + 144)))
      {
        __clrex();
      }
      else if (!__stxr(1u, v8))
      {
        goto LABEL_28;
      }
      MEMORY[0x19AEA534C](v7 + 144);
LABEL_28:
      WTF::HashSet<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>,WTF::DefaultHash<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>,WTF::HashTableTraits>::remove<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>((uint64_t *)(v7 + 152), (uint64_t)this + 104);
      v16 = __ldxr(v8);
      if (v16 == 1)
      {
        if (!__stlxr(0, v8))
          goto LABEL_33;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)(v7 + 144));
      goto LABEL_33;
  }
  return result;
}

void sub_1947A0E14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN7WebCore17AudioTrackPrivate10setEnabledEbEUlRT_E_vJRNS2_22TrackPrivateBaseClientEEE4callES8_(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) == 1)
    return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 56))(a2, *(unsigned __int8 *)(a1 + 8));
  result = 96;
  __break(0xC471u);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateMediaStreamAVFObjC::updateTracks(void)::$_1,void,std::reference_wrapper<WebCore::VideoTrackPrivateMediaStream>,int,WebCore::TrackState>::~CallableWrapper(_QWORD *a1)
{
  unsigned __int8 **v2;

  *a1 = &off_1E32065A8;
  v2 = (unsigned __int8 **)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateMediaStreamAVFObjC::updateTracks(void)::$_1,void,std::reference_wrapper<WebCore::VideoTrackPrivateMediaStream>,int,WebCore::TrackState>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned __int8 **v3;

  *(_QWORD *)this = &off_1E32065A8;
  v3 = (unsigned __int8 **)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateMediaStreamAVFObjC::updateTracks(void)::$_1,void,std::reference_wrapper<WebCore::VideoTrackPrivateMediaStream>,int,WebCore::TrackState>::call(uint64_t result, uint64_t a2, int a3, int a4)
{
  uint64_t v5;
  WebCore::MediaPlayerPrivateMediaStreamAVFObjC *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14[3];

  v5 = result;
  v6 = *(WebCore::MediaPlayerPrivateMediaStreamAVFObjC **)(result + 8);
  if (a4)
  {
    if (a4 == 2)
    {
      *(_DWORD *)(a2 + 112) = a3;
      v9 = *(_QWORD *)(a2 + 104);
      v10 = v9 == WebCore::MediaPlayerPrivateMediaStreamAVFObjC::activeVideoTrack(v6);
      if (*(unsigned __int8 *)(a2 + 48) != v10)
      {
        *(_BYTE *)(a2 + 48) = v10;
        v11 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v11 = off_1E32066A0;
        *(_BYTE *)(v11 + 8) = v10;
        v14[0] = v11;
        WebCore::TrackPrivateBase::notifyClients(a2, v14);
        v12 = v14[0];
        v14[0] = 0;
        if (v12)
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
        v13 = *(_QWORD *)(a2 + 96);
        if (v13)
          (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v13 + 16))(v13, a2, *(unsigned __int8 *)(a2 + 48));
      }
      return WebCore::MediaPlayerPrivateMediaStreamAVFObjC::checkSelectedVideoTrack(v6);
    }
    else if (a4 == 1)
    {
      WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>(*(_QWORD *)(a2 + 104) + 24, (_QWORD *)v6 + 9);
      v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 16) + 8) + 8);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 384))(v7, a2);
      return WebCore::MediaPlayerPrivateMediaStreamAVFObjC::checkSelectedVideoTrack(v6);
    }
  }
  else
  {
    WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>(*(_QWORD *)(a2 + 104) + 24, (_QWORD *)v6 + 9, (uint64_t)v14);
    v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 16) + 8) + 8);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 360))(v8, a2);
  }
  return result;
}

void sub_1947A1080(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateMediaStreamAVFObjC::scheduleDeferredTask(WTF::Function<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E32065D0;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateMediaStreamAVFObjC::scheduleDeferredTask(WTF::Function<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E32065D0;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateMediaStreamAVFObjC::scheduleDeferredTask(WTF::Function<void ()(void)> &&)::$_0,void>::call(unsigned __int8 *result)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned __int8 **v5;
  int v7;

  v1 = *((_QWORD *)result + 1);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = result;
      v4 = *(_QWORD *)(v2 + 48);
      if (!v4)
      {
        v5 = 0;
        goto LABEL_17;
      }
      v5 = *(unsigned __int8 ***)(v2 + 56);
      if (__ldaxr((unsigned __int8 *)v4))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v4))
      {
        goto LABEL_9;
      }
      MEMORY[0x19AEA534C](v4);
LABEL_9:
      if (*(_QWORD *)(v4 + 24))
        ++*(_QWORD *)(v4 + 8);
      else
        v5 = 0;
      v7 = __ldxr((unsigned __int8 *)v4);
      if (v7 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v4))
        {
LABEL_17:
          result = (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v3 + 2) + 16))(*((_QWORD *)v3 + 2));
          if (v5)
            return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v5);
          return result;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v4);
      goto LABEL_17;
    }
  }
  return result;
}

void sub_1947A1260(_Unwind_Exception *exception_object)
{
  unsigned __int8 **v1;

  if (v1)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v1);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *WebCore::MediaPlayerPrivateWebM::seekInternal(unsigned __int8 *this)
{
  uint64_t v1;
  __int128 v2;
  const WTF::MediaTime *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  _BOOL4 v11;
  char v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *i;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v22;
  double v23;
  int v24;
  double v25;
  _QWORD *j;
  WebCore::TrackBuffer *v27;
  WTF::String *v28;
  _BYTE v29[12];
  unsigned int v30;
  _QWORD v31[2];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  const char *v36;
  uint64_t v37;

  if (this[776])
  {
    v1 = (uint64_t)this;
    v2 = *(_OWORD *)(this + 744);
    v32 = *(_OWORD *)(this + 728);
    v33 = v2;
    v34 = *(_OWORD *)(this + 760);
    this[728] = 0;
    this[776] = 0;
    v3 = (const WTF::MediaTime *)(this + 712);
    *((_QWORD *)this + 89) = v32;
    *(_QWORD *)(this + 717) = *(_QWORD *)((char *)&v32 + 5);
    *((_DWORD *)this + 196) = 0;
    v4 = (void *)*((_QWORD *)this + 14);
    if (v4)
    {
      objc_msgSend(v4, "currentTime");
      v5 = v35;
      LODWORD(v6) = DWORD2(v35);
      v7 = HIDWORD(v35);
    }
    else
    {
      LODWORD(v6) = 0;
      v5 = 0;
      v7 = 0;
    }
    v8 = v7 & 1;
    if ((~v7 & 3) == 0)
      v8 = v7 & 1 | 2;
    if ((~v7 & 5) == 0)
      v8 |= 4u;
    if ((~v7 & 9) == 0)
      v8 |= 8u;
    if ((~v7 & 0x11) != 0)
      v9 = v8;
    else
      v9 = v8 | 0x10;
    v11 = (v9 & 1) == 0 || (_DWORD)v6 != 0;
    if (v5 >= 0)
      v12 = 5;
    else
      v12 = 9;
    if (!v11)
      v9 = v12;
    v6 = v6;
    if (!v11)
    {
      v5 >>= 63;
      v6 = 1;
    }
    v31[0] = v5;
    v31[1] = v6 | ((unint64_t)v9 << 32);
    v14 = WTF::MediaTime::compare((WTF::MediaTime *)v31, v3) != 0;
    *(_BYTE *)(v1 + 788) = v14;
    v15 = *(_QWORD *)(v1 + 368);
    v16 = *(_QWORD *)(v1 + 376);
    *(_QWORD *)&v35 = "MediaPlayerPrivateWebM";
    *((_QWORD *)&v35 + 1) = 23;
    v36 = "seekInternal";
    v37 = v16;
    if (*(_BYTE *)(v15 + 12))
    {
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [14],WTF::MediaTime,char [22],WTF::MediaTime,char [24],BOOL>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v35, "seekedTime = ", v3, ", synchronizerTime = ", (WTF::MediaTime *)v31, "synchronizer seeking = ", v1 + 788);
      v14 = *(unsigned __int8 *)(v1 + 788);
    }
    if (v14)
    {
      if (*(_DWORD *)(v1 + 180))
        WebCore::MediaPlayerPrivateWebM::flushVideo((WebCore::MediaPlayerPrivateWebM *)v1);
      if (*(_DWORD *)(v1 + 196))
      {
        for (i = *(_QWORD **)(v1 + 304); i; i = (_QWORD *)*i)
        {
          v18 = (void *)i[3];
          v19 = *(_QWORD *)(v1 + 368);
          v20 = *(_QWORD *)(v1 + 376);
          *(_QWORD *)&v35 = "MediaPlayerPrivateWebM";
          *((_QWORD *)&v35 + 1) = 23;
          v36 = "flushAudio";
          v37 = v20;
          if (*(_BYTE *)(v19 + 12))
          {
            if (WebCore::LogMedia && byte_1ECE7C490 >= 4u)
              WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 4, (WTF::Logger::LogSiteIdentifier *)&v35);
          }
          objc_msgSend(v18, "flush");
        }
      }
      v22 = *(void **)(v1 + 112);
      if ((*(_BYTE *)(v1 + 724) & 0x20) != 0)
      {
        WTF::MediaTime::toDouble(v3);
        PAL::softLinkCoreMediaCMTimeMakeWithSeconds((PAL *)*(unsigned int *)(v1 + 720), v25, v24);
      }
      else
      {
        PAL::softLinkCoreMediaCMTimeMake(*(PAL **)(v1 + 712), *(unsigned int *)(v1 + 720), v13);
      }
      v30 = v30 & 0xFFFFFFFE | *(_BYTE *)(v1 + 724) & 1 | *(_BYTE *)(v1 + 724) & 0xE;
      LODWORD(v23) = 0;
      objc_msgSend(v22, "setRate:time:", v29, v23);
      for (j = *(_QWORD **)(v1 + 216); j; j = (_QWORD *)*j)
      {
        v28 = (WTF::String *)j[2];
        v27 = (WebCore::TrackBuffer *)j[3];
        *((_BYTE *)v27 + 310) = 1;
        WebCore::MediaPlayerPrivateWebM::flushTrack(v1, v28);
        v35 = xmmword_1968A1660;
        if (WebCore::TrackBuffer::reenqueueMediaForTime((WTF **)v27, v3, (const WTF::MediaTime *)&v35))
          WebCore::MediaPlayerPrivateWebM::provideMediaData((WebCore::MediaPlayerPrivateWebM *)v1, v27, (unint64_t)v28);
      }
    }
    return WebCore::MediaPlayerPrivateWebM::maybeCompleteSeek((unsigned __int8 *)v1);
  }
  return this;
}

uint64_t WebCore::MediaPlayerPrivateWebM::logger(WebCore::MediaPlayerPrivateWebM *this)
{
  return *((_QWORD *)this + 46);
}

char *WebCore::MediaPlayerPrivateWebM::logChannel(WebCore::MediaPlayerPrivateWebM *this)
{
  return &WebCore::LogMedia;
}

const char *WebCore::MediaPlayerPrivateWebM::logClassName(WebCore::MediaPlayerPrivateWebM *this)
{
  return "MediaPlayerPrivateWebM";
}

uint64_t WebCore::MediaPlayerPrivateWebM::logIdentifier(WebCore::MediaPlayerPrivateWebM *this)
{
  return *((_QWORD *)this + 47);
}

uint64_t __Block_byref_object_copy__2(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 48) = v2;
  return result;
}

unsigned int *__Block_byref_object_dispose__2(uint64_t a1, void *a2)
{
  unsigned int *result;
  unsigned int v4;
  unsigned int v5;

  result = *(unsigned int **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr(result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, result));
    if (!v5)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

unsigned __int8 *WebCore::MediaPlayerPrivateWebM::maybeCompleteSeek(unsigned __int8 *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  int v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;

  if (*((_DWORD *)this + 196) == 2)
    return this;
  v1 = (uint64_t)this;
  if (this[618] && !this[619])
  {
    v10 = *((_QWORD *)this + 46);
    v11 = *((_QWORD *)this + 47);
    v13 = "MediaPlayerPrivateWebM";
    v14 = 23;
    v15 = "maybeCompleteSeek";
    v16 = v11;
    if (*(_BYTE *)(v10 + 12))
      this = (unsigned __int8 *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [24]>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v13, "waiting for video frame");
    *(_DWORD *)(v1 + 784) = 1;
  }
  else
  {
    *((_DWORD *)this + 196) = 0;
    v2 = *((_QWORD *)this + 46);
    v3 = *((_QWORD *)this + 47);
    v13 = "MediaPlayerPrivateWebM";
    v14 = 23;
    v15 = "maybeCompleteSeek";
    v16 = v3;
    if (*(_BYTE *)(v2 + 12))
      this = (unsigned __int8 *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v13);
    if (*(_BYTE *)(v1 + 788))
    {
      v4 = *(_QWORD *)(v1 + 368);
      v5 = *(_QWORD *)(v1 + 376);
      v13 = "MediaPlayerPrivateWebM";
      v14 = 23;
      v15 = "maybeCompleteSeek";
      v16 = v5;
      if (*(_BYTE *)(v4 + 12))
        return (unsigned __int8 *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [40]>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v13, "Synchronizer still seeking, bailing out");
      return this;
    }
    *(_DWORD *)(v1 + 784) = 2;
    if (*(_BYTE *)(v1 + 640) && !*(_BYTE *)(v1 + 776))
    {
      v6 = *(double *)(v1 + 584);
      *(float *)&v6 = v6;
      this = (unsigned __int8 *)objc_msgSend(*(id *)(v1 + 112), "setRate:", v6, v13, v14, v15, v16);
    }
    v7 = *(_QWORD *)(v1 + 96);
    if (v7)
    {
      v8 = *(_QWORD *)(v1 + 104);
      if (__ldaxr((unsigned __int8 *)v7))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v7))
      {
        goto LABEL_20;
      }
      this = (unsigned __int8 *)MEMORY[0x19AEA534C](v7);
LABEL_20:
      if (*(_QWORD *)(v7 + 24))
        ++*(_QWORD *)(v7 + 8);
      else
        v8 = 0;
      v12 = __ldxr((unsigned __int8 *)v7);
      if (v12 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v7))
        {
LABEL_28:
          if (v8)
          {
            (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v8 + 8) + 8) + 48))(*(_QWORD *)(*(_QWORD *)(v8 + 8) + 8), v1 + 712);
            (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v8 + 8) + 8) + 56))(*(_QWORD *)(*(_QWORD *)(v8 + 8) + 8));
            return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v8);
          }
          return this;
        }
      }
      else
      {
        __clrex();
      }
      this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v7);
      goto LABEL_28;
    }
  }
  return this;
}

void WebCore::MediaPlayerPrivateWebM::~MediaPlayerPrivateWebM(WebCore::MediaPlayerPrivateWebM *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  dispatch_source_s *v5;
  void *v6;
  uint64_t **i;
  uint64_t *v8;
  PAL *v9;
  OpaqueCMTimebase *v10;
  void *v11;
  WTF *v12;
  WTF *v13;
  const void *v14;
  uint64_t v15;
  uint64_t j;
  void *v17;
  uint64_t v18;
  _QWORD *v19;
  void *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  int v27;
  unsigned int *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  void *v33;
  const void *v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  WTF *v38;
  void *v39;
  const void *v40;
  WTF *v41;
  const void *v42;
  const void *v43;
  const void *v44;
  const void *v45;
  unsigned int *v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  _DWORD *v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int v59;
  WTF *v60;
  WTF *v61;
  const void *v62;
  WTF *v63;
  const void *v64;
  const void *v65;
  unsigned __int8 **v66;
  unsigned __int8 *v67;
  uint64_t v69;
  uint64_t v70;
  id *v71;
  BOOL v72;
  int v73;
  WTF *v74;
  void *v75;
  unsigned __int8 **v76;
  unsigned __int8 *v77;
  uint64_t v79;
  uint64_t v80;
  id *v81;
  BOOL v82;
  int v83;
  WTF *v84;
  void *v85;
  WTF *v86;
  WTF *v87;
  WTF *v88;
  void *v89;
  WTF *v90;
  uint64_t v91;
  unsigned int **v92;
  unsigned int **v93;
  unsigned int *v94;
  unsigned int *v95;
  unsigned int v96;
  unsigned int v97;
  WTF *v98;
  uint64_t v99;
  unsigned int **v100;
  unsigned int **v101;
  unsigned int *v102;
  unsigned int *v103;
  unsigned int v104;
  unsigned int v105;
  WTF *v106;
  unsigned int *v107;
  unsigned int *v108;
  unsigned int v109;
  unsigned int v110;
  unsigned __int8 **v111;
  unsigned __int8 *v112;
  uint64_t v114;
  uint64_t v115;
  WebCore::WebCoreDecompressionSession *v116;
  BOOL v117;
  int v118;
  WTF *v119;
  void *v120;
  WTF *v121;
  const void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  BOOL v129;
  int v130;
  const void *v131;
  const void *v132;
  const void *v133;
  uint64_t v134;
  uint64_t v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  unsigned int *v140;
  unsigned int v141;
  unsigned int v142;
  WTF *v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  const void *v149;
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152;
  __int128 v153;
  const char *v154;
  uint64_t v155;
  __int128 v156;
  const char *v157;

  *(_QWORD *)this = off_1E32066F0;
  *((_QWORD *)this + 6) = &unk_1E3206C58;
  *((_QWORD *)this + 8) = &unk_1E3206C90;
  *((_QWORD *)this + 10) = &unk_1E3206CE0;
  v2 = *((_QWORD *)this + 46);
  v3 = *((_QWORD *)this + 47);
  *(_QWORD *)&v153 = "MediaPlayerPrivateWebM";
  *((_QWORD *)&v153 + 1) = 23;
  v154 = "~MediaPlayerPrivateWebM";
  v155 = v3;
  if (*(_BYTE *)(v2 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v153);
  if (*((_QWORD *)this + 15))
    objc_msgSend(*((id *)this + 14), "removeTimeObserver:");
  if (*((_QWORD *)this + 49))
    objc_msgSend(*((id *)this + 14), "removeTimeObserver:");
  if (*((_QWORD *)this + 81))
    objc_msgSend(*((id *)this + 14), "removeTimeObserver:");
  WebCore::MediaPlayerPrivateWebM::destroyLayer(this);
  WebCore::MediaPlayerPrivateWebM::destroyDecompressionSession(this, v4, v5);
  for (i = (uint64_t **)*((_QWORD *)this + 38); i; i = (uint64_t **)*i)
  {
    v8 = i[3];
    if (v8)
      CFRetain(i[3]);
    v153 = 0uLL;
    v154 = 0;
    v9 = (PAL *)objc_msgSend(*((id *)this + 14), "timebase");
    PAL::softLinkCoreMediaCMTimebaseGetTime[0](v9, v10);
    v11 = (void *)*((_QWORD *)this + 14);
    v156 = v153;
    v157 = v154;
    objc_msgSend(v11, "removeRenderer:atTime:completionHandler:", v8, &v156, 0);
    objc_msgSend(*(id *)(*((_QWORD *)this + 79) + 8), "stopObservingAudioRenderer:", v8);
    objc_msgSend(v8, "flush");
    objc_msgSend(v8, "stopRequestingMediaData");
    if (v8)
      CFRelease(v8);
  }
  if (*((_QWORD *)this + 39))
  {
    v12 = (WTF *)*((_QWORD *)this + 38);
    if (v12)
    {
      do
      {
        v13 = *(WTF **)v12;
        v14 = (const void *)*((_QWORD *)v12 + 3);
        *((_QWORD *)v12 + 3) = 0;
        if (v14)
          CFRelease(v14);
        WTF::fastFree(v12, v6);
        v12 = v13;
      }
      while (v13);
    }
    *((_QWORD *)this + 38) = 0;
    v15 = *((_QWORD *)this + 37);
    if (v15)
    {
      for (j = 0; j != v15; ++j)
        *(_QWORD *)(*((_QWORD *)this + 36) + 8 * j) = 0;
    }
    *((_QWORD *)this + 39) = 0;
  }
  objc_msgSend(*(id *)(*((_QWORD *)this + 79) + 8), "invalidate");
  WebCore::MediaPlayerPrivateWebM::clearTracks((unsigned __int8 *)this, v17);
  v18 = *((_QWORD *)this + 20);
  if (v18)
  {
    v19 = *(_QWORD **)(v18 + 32);
    if (!v19)
      goto LABEL_42;
    *(_QWORD *)(v18 + 32) = 0;
    (*(void (**)(_QWORD *))(*v19 + 24))(v19);
    v21 = v19[1];
    if (__ldaxr((unsigned __int8 *)v21))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v21))
    {
      goto LABEL_30;
    }
    MEMORY[0x19AEA534C](v21);
LABEL_30:
    v23 = *(_QWORD *)(v21 + 8);
    v24 = v23 - 1;
    *(_QWORD *)(v21 + 8) = v23 - 1;
    if (v23 == 1)
    {
      v152 = *(_QWORD *)(v21 + 16);
      v25 = *(_QWORD *)(v21 + 24);
      *(_QWORD *)(v21 + 24) = 0;
      v26 = v152 != 0;
    }
    else
    {
      v25 = 0;
      v26 = 1;
    }
    v27 = __ldxr((unsigned __int8 *)v21);
    if (v27 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v21))
      {
        if (!v24)
          goto LABEL_38;
        goto LABEL_42;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v21);
    if (!v24)
    {
LABEL_38:
      if (v25)
        (*(void (**)(uint64_t))(*(_QWORD *)v25 + 16))(v25);
      if (!v26)
        WTF::fastFree((WTF *)v21, v20);
    }
LABEL_42:
    v28 = (unsigned int *)*((_QWORD *)this + 20);
    *((_QWORD *)this + 20) = 0;
    if (v28)
    {
      v29 = v28 + 2;
      do
      {
        v30 = __ldaxr(v29);
        v31 = v30 - 1;
      }
      while (__stlxr(v31, v29));
      if (!v31)
      {
        atomic_store(1u, v28 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v28 + 8))(v28);
      }
    }
  }
  *((_QWORD *)this + 82) = off_1E31F7378;
  v32 = *((_QWORD *)this + 88);
  *((_QWORD *)this + 88) = 0;
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  WebCore::TimerBase::~TimerBase((WebCore::MediaPlayerPrivateWebM *)((char *)this + 656));
  v34 = (const void *)*((_QWORD *)this + 81);
  *((_QWORD *)this + 81) = 0;
  if (v34)
    CFRelease(v34);
  v35 = *((_QWORD *)this + 79);
  *((_QWORD *)this + 79) = 0;
  if (v35)
  {
    do
    {
      v36 = __ldaxr((unsigned int *)v35);
      v37 = v36 - 1;
    }
    while (__stlxr(v37, (unsigned int *)v35));
    if (!v37)
    {
      atomic_store(1u, (unsigned int *)v35);
      v149 = *(const void **)(v35 + 8);
      *(_QWORD *)(v35 + 8) = 0;
      if (v149)
        CFRelease(v149);
      WTF::fastFree((WTF *)v35, v33);
    }
  }
  v38 = (WTF *)*((_QWORD *)this + 67);
  *((_QWORD *)this + 67) = 0;
  if (v38)
    WTF::fastFree(v38, v33);
  WTF::MachSendRight::~MachSendRight((WebCore::MediaPlayerPrivateWebM *)((char *)this + 528));
  v40 = (const void *)*((_QWORD *)this + 49);
  *((_QWORD *)this + 49) = 0;
  if (v40)
    CFRelease(v40);
  v41 = (WTF *)*((_QWORD *)this + 48);
  *((_QWORD *)this + 48) = 0;
  if (v41)
  {
    v42 = (const void *)*((_QWORD *)v41 + 9);
    *((_QWORD *)v41 + 9) = 0;
    if (v42)
      CFRelease(v42);
    v43 = (const void *)*((_QWORD *)v41 + 8);
    *((_QWORD *)v41 + 8) = 0;
    if (v43)
      CFRelease(v43);
    v44 = (const void *)*((_QWORD *)v41 + 5);
    *((_QWORD *)v41 + 5) = 0;
    if (v44)
      CFRelease(v44);
    v45 = (const void *)*((_QWORD *)v41 + 4);
    *((_QWORD *)v41 + 4) = 0;
    if (v45)
      CFRelease(v45);
    v46 = (unsigned int *)*((_QWORD *)v41 + 2);
    *((_QWORD *)v41 + 2) = 0;
    if (v46)
    {
      v47 = v46 + 2;
      do
      {
        v48 = __ldaxr(v47);
        v49 = v48 - 1;
      }
      while (__stlxr(v49, v47));
      if (!v49)
      {
        atomic_store(1u, v46 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v46 + 8))(v46);
      }
    }
    WTF::fastFree(v41, v39);
  }
  v50 = (unsigned int *)*((_QWORD *)this + 46);
  *((_QWORD *)this + 46) = 0;
  if (v50)
  {
    v51 = v50 + 2;
    do
    {
      v52 = __ldaxr(v51);
      v53 = v52 - 1;
    }
    while (__stlxr(v53, v51));
    if (!v53)
    {
      atomic_store(1u, v50 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v50 + 8))(v50);
    }
  }
  v54 = (_DWORD *)*((_QWORD *)this + 44);
  *((_QWORD *)this + 44) = 0;
  if (v54)
  {
    if (v54[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v54 + 8))(v54);
    else
      --v54[2];
  }
  v55 = *((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = 0;
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 56))(v55);
  v56 = *((_QWORD *)this + 41);
  *((_QWORD *)this + 41) = 0;
  if (v56)
  {
    v57 = (unsigned int *)(v56 + 8);
    do
    {
      v58 = __ldaxr(v57);
      v59 = v58 - 1;
    }
    while (__stlxr(v59, v57));
    if (!v59)
    {
      atomic_store(1u, v57);
      v150 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v150 = off_1E32071E8;
      v150[1] = v57;
      *(_QWORD *)&v153 = v150;
      WTF::ensureOnMainThread();
      v151 = v153;
      *(_QWORD *)&v153 = 0;
      if (v151)
        (*(void (**)(uint64_t))(*(_QWORD *)v151 + 8))(v151);
    }
  }
  v60 = (WTF *)*((_QWORD *)this + 38);
  if (v60)
  {
    do
    {
      v61 = *(WTF **)v60;
      v62 = (const void *)*((_QWORD *)v60 + 3);
      *((_QWORD *)v60 + 3) = 0;
      if (v62)
        CFRelease(v62);
      WTF::fastFree(v60, v39);
      v60 = v61;
    }
    while (v61);
  }
  v63 = (WTF *)*((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v63)
    WTF::fastFree(v63, v39);
  v64 = (const void *)*((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v64)
    CFRelease(v64);
  v65 = (const void *)*((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v65)
    CFRelease(v65);
  v66 = (unsigned __int8 **)*((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v66)
  {
    v67 = *v66;
    if (__ldaxr(*v66))
    {
      __clrex();
    }
    else if (!__stxr(1u, v67))
    {
      goto LABEL_102;
    }
    MEMORY[0x19AEA534C](v67);
LABEL_102:
    v69 = *((_QWORD *)v67 + 1);
    v70 = v69 - 1;
    *((_QWORD *)v67 + 1) = v69 - 1;
    if (v69 == 1)
    {
      v145 = *((_QWORD *)v67 + 2);
      v71 = (id *)*((_QWORD *)v67 + 3);
      *((_QWORD *)v67 + 3) = 0;
      v72 = v145 != 0;
    }
    else
    {
      v71 = 0;
      v72 = 1;
    }
    v73 = __ldxr(v67);
    if (v73 == 1)
    {
      if (!__stlxr(0, v67))
      {
        if (v70)
          goto LABEL_114;
LABEL_110:
        if (v71)
        {
          WebCore::VideoMediaSampleRenderer::~VideoMediaSampleRenderer(v71);
          WTF::fastFree(v74, v75);
        }
        if (!v72)
          WTF::fastFree((WTF *)v67, v39);
        goto LABEL_114;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v67);
    if (v70)
      goto LABEL_114;
    goto LABEL_110;
  }
LABEL_114:
  v76 = (unsigned __int8 **)*((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (!v76)
    goto LABEL_131;
  v77 = *v76;
  if (__ldaxr(*v76))
  {
    __clrex();
  }
  else if (!__stxr(1u, v77))
  {
    goto LABEL_119;
  }
  MEMORY[0x19AEA534C](v77);
LABEL_119:
  v79 = *((_QWORD *)v77 + 1);
  v80 = v79 - 1;
  *((_QWORD *)v77 + 1) = v79 - 1;
  if (v79 == 1)
  {
    v146 = *((_QWORD *)v77 + 2);
    v81 = (id *)*((_QWORD *)v77 + 3);
    *((_QWORD *)v77 + 3) = 0;
    v82 = v146 != 0;
  }
  else
  {
    v81 = 0;
    v82 = 1;
  }
  v83 = __ldxr(v77);
  if (v83 != 1)
  {
    __clrex();
LABEL_126:
    WTF::Lock::unlockSlow((WTF::Lock *)v77);
    if (v80)
      goto LABEL_131;
    goto LABEL_127;
  }
  if (__stlxr(0, v77))
    goto LABEL_126;
  if (v80)
    goto LABEL_131;
LABEL_127:
  if (v81)
  {
    WebCore::VideoMediaSampleRenderer::~VideoMediaSampleRenderer(v81);
    WTF::fastFree(v84, v85);
  }
  if (!v82)
    WTF::fastFree((WTF *)v77, v39);
LABEL_131:
  v86 = (WTF *)*((_QWORD *)this + 30);
  if (v86)
  {
    *((_QWORD *)this + 30) = 0;
    *((_DWORD *)this + 62) = 0;
    WTF::fastFree(v86, v39);
  }
  v87 = (WTF *)*((_QWORD *)this + 27);
  if (v87)
  {
    do
    {
      v88 = *(WTF **)v87;
      v89 = (void *)*((_QWORD *)v87 + 3);
      *((_QWORD *)v87 + 3) = 0;
      if (v89)
        std::default_delete<WebCore::TrackBuffer>::operator()[abi:sn180100]((uint64_t)v87 + 24, (uint64_t)v89);
      WTF::fastFree(v87, v89);
      v87 = v88;
    }
    while (v88);
  }
  v90 = (WTF *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v90)
    WTF::fastFree(v90, v39);
  v91 = *((unsigned int *)this + 49);
  if ((_DWORD)v91)
  {
    v92 = (unsigned int **)*((_QWORD *)this + 23);
    v93 = &v92[v91];
    do
    {
      v94 = *v92;
      *v92 = 0;
      if (v94)
      {
        v95 = v94 + 2;
        do
        {
          v96 = __ldaxr(v95);
          v97 = v96 - 1;
        }
        while (__stlxr(v97, v95));
        if (!v97)
        {
          atomic_store(1u, v94 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v94 + 8))(v94);
        }
      }
      ++v92;
    }
    while (v92 != v93);
  }
  v98 = (WTF *)*((_QWORD *)this + 23);
  if (v98)
  {
    *((_QWORD *)this + 23) = 0;
    *((_DWORD *)this + 48) = 0;
    WTF::fastFree(v98, v39);
  }
  v99 = *((unsigned int *)this + 45);
  if ((_DWORD)v99)
  {
    v100 = (unsigned int **)*((_QWORD *)this + 21);
    v101 = &v100[v99];
    do
    {
      v102 = *v100;
      *v100 = 0;
      if (v102)
      {
        v103 = v102 + 2;
        do
        {
          v104 = __ldaxr(v103);
          v105 = v104 - 1;
        }
        while (__stlxr(v105, v103));
        if (!v105)
        {
          atomic_store(1u, v102 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v102 + 8))(v102);
        }
      }
      ++v100;
    }
    while (v100 != v101);
  }
  v106 = (WTF *)*((_QWORD *)this + 21);
  if (v106)
  {
    *((_QWORD *)this + 21) = 0;
    *((_DWORD *)this + 44) = 0;
    WTF::fastFree(v106, v39);
  }
  v107 = (unsigned int *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v107)
  {
    v108 = v107 + 2;
    do
    {
      v109 = __ldaxr(v108);
      v110 = v109 - 1;
    }
    while (__stlxr(v110, v108));
    if (!v110)
    {
      atomic_store(1u, v107 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v107 + 8))(v107);
    }
  }
  v111 = (unsigned __int8 **)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v111)
  {
    v112 = *v111;
    if (__ldaxr(*v111))
    {
      __clrex();
    }
    else if (!__stxr(1u, v112))
    {
      goto LABEL_169;
    }
    MEMORY[0x19AEA534C](v112);
LABEL_169:
    v114 = *((_QWORD *)v112 + 1);
    v115 = v114 - 1;
    *((_QWORD *)v112 + 1) = v114 - 1;
    if (v114 == 1)
    {
      v147 = *((_QWORD *)v112 + 2);
      v116 = (WebCore::WebCoreDecompressionSession *)*((_QWORD *)v112 + 3);
      *((_QWORD *)v112 + 3) = 0;
      v117 = v147 != 0;
    }
    else
    {
      v116 = 0;
      v117 = 1;
    }
    v118 = __ldxr(v112);
    if (v118 == 1)
    {
      if (!__stlxr(0, v112))
      {
        if (v115)
          goto LABEL_181;
LABEL_177:
        if (v116)
        {
          WebCore::WebCoreDecompressionSession::~WebCoreDecompressionSession(v116);
          WTF::fastFree(v119, v120);
        }
        if (!v117)
          WTF::fastFree((WTF *)v112, v39);
        goto LABEL_181;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v112);
    if (v115)
      goto LABEL_181;
    goto LABEL_177;
  }
LABEL_181:
  v121 = (WTF *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v121)
  {
    v122 = *(const void **)v121;
    *(_QWORD *)v121 = 0;
    if (v122)
      CFRelease(v122);
    WTF::fastFree(v121, v39);
  }
  v123 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v123)
  {
    v124 = *(_QWORD *)(v123 + 8);
    if (__ldaxr((unsigned __int8 *)v124))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v124))
    {
      goto LABEL_190;
    }
    MEMORY[0x19AEA534C](v124);
LABEL_190:
    v126 = *(_QWORD *)(v124 + 8);
    v127 = v126 - 1;
    *(_QWORD *)(v124 + 8) = v126 - 1;
    if (v126 == 1)
    {
      v148 = *(_QWORD *)(v124 + 16);
      v128 = *(_QWORD *)(v124 + 24);
      *(_QWORD *)(v124 + 24) = 0;
      v129 = v148 != 0;
    }
    else
    {
      v128 = 0;
      v129 = 1;
    }
    v130 = __ldxr((unsigned __int8 *)v124);
    if (v130 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v124))
      {
        if (v127)
          goto LABEL_202;
LABEL_198:
        if (v128)
          (*(void (**)(uint64_t))(*(_QWORD *)v128 + 8))(v128);
        if (!v129)
          WTF::fastFree((WTF *)v124, v39);
        goto LABEL_202;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v124);
    if (v127)
      goto LABEL_202;
    goto LABEL_198;
  }
LABEL_202:
  v131 = (const void *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v131)
    CFRelease(v131);
  v132 = (const void *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v132)
    CFRelease(v132);
  v133 = (const void *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v133)
    CFRelease(v133);
  v134 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v134)
  {
    if (__ldaxr((unsigned __int8 *)v134))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v134))
    {
      goto LABEL_213;
    }
    MEMORY[0x19AEA534C](v134);
LABEL_213:
    v136 = *(_QWORD *)(v134 + 16) - 1;
    *(_QWORD *)(v134 + 16) = v136;
    if (!v136)
    {
      v137 = *(_QWORD *)(v134 + 8);
      v138 = __ldxr((unsigned __int8 *)v134);
      if (v138 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v134))
        {
          if (v137)
            goto LABEL_221;
LABEL_220:
          WTF::fastFree((WTF *)v134, v39);
          goto LABEL_221;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v134);
      if (v137)
        goto LABEL_221;
      goto LABEL_220;
    }
    v144 = __ldxr((unsigned __int8 *)v134);
    if (v144 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v134))
        goto LABEL_221;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v134);
  }
LABEL_221:
  v139 = *((_QWORD *)this + 9);
  if (v139)
  {
    *(_QWORD *)(v139 + 8) = 0;
    v140 = (unsigned int *)*((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = 0;
    if (v140)
    {
      do
      {
        v141 = __ldaxr(v140);
        v142 = v141 - 1;
      }
      while (__stlxr(v142, v140));
      if (!v142)
      {
        atomic_store(1u, v140);
        WTF::fastFree((WTF *)v140, v39);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 9) = 0;
  }
  *(_QWORD *)this = off_1E340D798;
  v143 = (WTF *)*((_QWORD *)this + 1);
  if (v143)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v143, v39);
  }
}

{
  WTF *v1;
  void *v2;

  WebCore::MediaPlayerPrivateWebM::~MediaPlayerPrivateWebM(this);
  WTF::fastFree(v1, v2);
}

void sub_1947A2458(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void WebCore::MediaPlayerPrivateWebM::destroyLayer(WebCore::MediaPlayerPrivateWebM *this)
{
  uint64_t v2;
  uint64_t v3;
  PAL *v4;
  OpaqueCMTimebase *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  const void *v12;
  const void *v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;

  if (*((_QWORD *)this + 34))
  {
    v2 = *((_QWORD *)this + 46);
    v3 = *((_QWORD *)this + 47);
    v18 = "MediaPlayerPrivateWebM";
    v19 = 23;
    v20 = "destroyLayer";
    v21 = v3;
    if (*(_BYTE *)(v2 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v18);
    v16 = 0uLL;
    v17 = 0;
    v4 = (PAL *)objc_msgSend(*((id *)this + 14), "timebase");
    PAL::softLinkCoreMediaCMTimebaseGetTime[0](v4, v5);
    v6 = (void *)*((_QWORD *)this + 14);
    v7 = *((_QWORD *)this + 34);
    v14 = v16;
    v15 = v17;
    objc_msgSend(v6, "removeRenderer:atTime:completionHandler:", v7, &v14, 0);
    v8 = *((_QWORD *)this + 48);
    v9 = *(_QWORD *)(v8 + 16);
    v10 = *(_QWORD *)(v8 + 24);
    v18 = "VideoLayerManagerObjC";
    v19 = 22;
    v20 = "didDestroyVideoLayer";
    v21 = v10;
    if (*(_BYTE *)(v9 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v18);
    WebCore::VideoLayerManagerObjC::setTextTrackRepresentationLayer(v8, 0);
    objc_msgSend(*(id *)(v8 + 72), "removeFromSuperlayer");
    v11 = *(const void **)(v8 + 32);
    *(_QWORD *)(v8 + 32) = 0;
    if (v11)
      CFRelease(v11);
    v12 = *(const void **)(v8 + 72);
    *(_QWORD *)(v8 + 72) = 0;
    if (v12)
      CFRelease(v12);
    v13 = (const void *)*((_QWORD *)this + 34);
    *((_QWORD *)this + 34) = 0;
    if (v13)
      CFRelease(v13);
  }
}

WebCore::WebCoreDecompressionSession *WebCore::MediaPlayerPrivateWebM::destroyDecompressionSession(WebCore::MediaPlayerPrivateWebM *this, uint64_t a2, dispatch_source_s *a3)
{
  WebCore::WebCoreDecompressionSession *result;
  void *v5;
  unsigned __int8 **v6;
  unsigned __int8 *v7;
  uint64_t v9;
  uint64_t v10;
  WebCore::WebCoreDecompressionSession *v11;
  BOOL v12;
  int v13;
  WTF *v14;
  void *v15;
  WTF *v16;
  uint64_t v17;

  result = (WebCore::WebCoreDecompressionSession *)*((_QWORD *)this + 19);
  if (!result)
    return result;
  WebCore::WebCoreDecompressionSession::invalidate(result, a2, a3);
  v6 = (unsigned __int8 **)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (!v6)
    goto LABEL_20;
  v7 = *v6;
  if (__ldaxr(*v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, v7))
  {
    goto LABEL_8;
  }
  MEMORY[0x19AEA534C](v7);
LABEL_8:
  v9 = *((_QWORD *)v7 + 1);
  v10 = v9 - 1;
  *((_QWORD *)v7 + 1) = v9 - 1;
  if (v9 == 1)
  {
    v17 = *((_QWORD *)v7 + 2);
    v11 = (WebCore::WebCoreDecompressionSession *)*((_QWORD *)v7 + 3);
    *((_QWORD *)v7 + 3) = 0;
    v12 = v17 != 0;
  }
  else
  {
    v11 = 0;
    v12 = 1;
  }
  v13 = __ldxr(v7);
  if (v13 == 1)
  {
    if (!__stlxr(0, v7))
    {
      if (!v10)
        goto LABEL_16;
      goto LABEL_20;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
  if (!v10)
  {
LABEL_16:
    if (v11)
    {
      WebCore::WebCoreDecompressionSession::~WebCoreDecompressionSession(v11);
      WTF::fastFree(v14, v15);
    }
    if (!v12)
      WTF::fastFree((WTF *)v7, v5);
  }
LABEL_20:
  v16 = (WTF *)*((_QWORD *)this + 67);
  *((_QWORD *)this + 67) = 0;
  if (v16)
    WTF::fastFree(v16, v5);
  return (WebCore::WebCoreDecompressionSession *)WebCore::MediaPlayerPrivateWebM::setHasAvailableVideoFrame((uint64_t)this, 0);
}

unsigned __int8 *WebCore::MediaPlayerPrivateWebM::clearTracks(unsigned __int8 *this, void *a2)
{
  unsigned __int8 *v2;
  uint64_t v3;
  uint64_t v4;
  int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  WTF *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  WTF *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;

  v2 = this;
  v3 = *((_QWORD *)this + 12);
  if (!v3)
  {
    v4 = 0;
    goto LABEL_15;
  }
  v4 = *((_QWORD *)this + 13);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_7;
  }
  this = (unsigned __int8 *)MEMORY[0x19AEA534C](v3);
LABEL_7:
  if (*(_QWORD *)(v3 + 24))
    ++*(_QWORD *)(v3 + 8);
  else
    v4 = 0;
  v6 = __ldxr((unsigned __int8 *)v3);
  if (v6 != 1)
  {
    __clrex();
    goto LABEL_14;
  }
  if (__stlxr(0, (unsigned __int8 *)v3))
LABEL_14:
    this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v3);
LABEL_15:
  v7 = *((unsigned int *)v2 + 45);
  if ((_DWORD)v7)
  {
    v8 = (uint64_t *)*((_QWORD *)v2 + 21);
    v9 = 8 * v7;
    if (v4)
    {
      do
      {
        v10 = *(_QWORD *)(*v8 + 96);
        *(_QWORD *)(*v8 + 96) = 0;
        if (v10)
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
        v11 = *v8++;
        this = (unsigned __int8 *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v4 + 8) + 8)
                                                                             + 384))(*(_QWORD *)(*(_QWORD *)(v4 + 8) + 8), v11);
        v9 -= 8;
      }
      while (v9);
    }
    else
    {
      do
      {
        this = *(unsigned __int8 **)(*v8 + 96);
        *(_QWORD *)(*v8 + 96) = 0;
        if (this)
          this = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)this + 8))(this);
        ++v8;
        v9 -= 8;
      }
      while (v9);
    }
  }
  if (*((_DWORD *)v2 + 44))
  {
    v12 = *((unsigned int *)v2 + 45);
    v13 = (WTF *)*((_QWORD *)v2 + 21);
    if ((_DWORD)v12)
    {
      v14 = (WTF *)((char *)v13 + 8 * v12);
      do
      {
        this = *(unsigned __int8 **)v13;
        *(_QWORD *)v13 = 0;
        if (this)
        {
          v15 = (unsigned int *)(this + 8);
          do
          {
            v16 = __ldaxr(v15);
            v17 = v16 - 1;
          }
          while (__stlxr(v17, v15));
          if (!v17)
          {
            atomic_store(1u, (unsigned int *)this + 2);
            this = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)this + 8))(this);
          }
        }
        v13 = (WTF *)((char *)v13 + 8);
      }
      while (v13 != v14);
      *((_DWORD *)v2 + 45) = 0;
      v13 = (WTF *)*((_QWORD *)v2 + 21);
    }
    if (v13)
    {
      *((_QWORD *)v2 + 21) = 0;
      *((_DWORD *)v2 + 44) = 0;
      this = (unsigned __int8 *)WTF::fastFree(v13, a2);
    }
  }
  v18 = *((unsigned int *)v2 + 49);
  if ((_DWORD)v18)
  {
    v19 = (uint64_t *)*((_QWORD *)v2 + 23);
    v20 = 8 * v18;
    if (v4)
    {
      do
      {
        v21 = *(_QWORD *)(*v19 + 80);
        *(_QWORD *)(*v19 + 80) = 0;
        if (v21)
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
        v22 = *v19++;
        this = (unsigned __int8 *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v4 + 8) + 8)
                                                                             + 368))(*(_QWORD *)(*(_QWORD *)(v4 + 8) + 8), v22);
        v20 -= 8;
      }
      while (v20);
    }
    else
    {
      do
      {
        this = *(unsigned __int8 **)(*v19 + 80);
        *(_QWORD *)(*v19 + 80) = 0;
        if (this)
          this = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)this + 8))(this);
        ++v19;
        v20 -= 8;
      }
      while (v20);
    }
  }
  if (*((_DWORD *)v2 + 48))
  {
    v23 = *((unsigned int *)v2 + 49);
    v24 = (WTF *)*((_QWORD *)v2 + 23);
    if ((_DWORD)v23)
    {
      v25 = (WTF *)((char *)v24 + 8 * v23);
      do
      {
        this = *(unsigned __int8 **)v24;
        *(_QWORD *)v24 = 0;
        if (this)
        {
          v26 = (unsigned int *)(this + 8);
          do
          {
            v27 = __ldaxr(v26);
            v28 = v27 - 1;
          }
          while (__stlxr(v28, v26));
          if (!v28)
          {
            atomic_store(1u, (unsigned int *)this + 2);
            this = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)this + 8))(this);
          }
        }
        v24 = (WTF *)((char *)v24 + 8);
      }
      while (v24 != v25);
      *((_DWORD *)v2 + 49) = 0;
      v24 = (WTF *)*((_QWORD *)v2 + 23);
    }
    if (v24)
    {
      *((_QWORD *)v2 + 23) = 0;
      *((_DWORD *)v2 + 48) = 0;
      this = (unsigned __int8 *)WTF::fastFree(v24, a2);
    }
  }
  if (v4)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v4);
  return this;
}

void sub_1947A31B8(_Unwind_Exception *exception_object)
{
  unsigned __int8 **v1;

  if (v1)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::MediaPlayerPrivateWebM::cancelLoad(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;

  v1 = *(_QWORD *)(this + 160);
  if (!v1)
    return this;
  v2 = this;
  v3 = *(_QWORD **)(v1 + 32);
  if (!v3)
    goto LABEL_19;
  *(_QWORD *)(v1 + 32) = 0;
  (*(void (**)(_QWORD *))(*v3 + 24))(v3);
  v5 = v3[1];
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v5))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEA534C](v5);
LABEL_7:
  v7 = *(_QWORD *)(v5 + 8);
  v8 = v7 - 1;
  *(_QWORD *)(v5 + 8) = v7 - 1;
  if (v7 == 1)
  {
    v15 = *(_QWORD *)(v5 + 16);
    v9 = *(_QWORD *)(v5 + 24);
    *(_QWORD *)(v5 + 24) = 0;
    v10 = v15 != 0;
  }
  else
  {
    v9 = 0;
    v10 = 1;
  }
  v11 = __ldxr((unsigned __int8 *)v5);
  if (v11 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v5))
    {
      if (!v8)
        goto LABEL_15;
      goto LABEL_19;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v5);
  if (!v8)
  {
LABEL_15:
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    if (!v10)
      WTF::fastFree((WTF *)v5, v4);
  }
LABEL_19:
  this = *(_QWORD *)(v2 + 160);
  *(_QWORD *)(v2 + 160) = 0;
  if (this)
  {
    v12 = (unsigned int *)(this + 8);
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, (unsigned int *)(this + 8));
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    }
  }
  return this;
}

void `non-virtual thunk to'WebCore::MediaPlayerPrivateWebM::~MediaPlayerPrivateWebM(WebCore::MediaPlayerPrivateWebM *this)
{
  WebCore::MediaPlayerPrivateWebM::~MediaPlayerPrivateWebM((WebCore::MediaPlayerPrivateWebM *)((char *)this - 48));
}

{
  WebCore::MediaPlayerPrivateWebM::~MediaPlayerPrivateWebM((WebCore::MediaPlayerPrivateWebM *)((char *)this - 64));
}

{
  WebCore::MediaPlayerPrivateWebM::~MediaPlayerPrivateWebM((WebCore::MediaPlayerPrivateWebM *)((char *)this - 80));
}

{
  WTF *v1;
  void *v2;

  WebCore::MediaPlayerPrivateWebM::~MediaPlayerPrivateWebM((WebCore::MediaPlayerPrivateWebM *)((char *)this - 48));
  WTF::fastFree(v1, v2);
}

{
  WTF *v1;
  void *v2;

  WebCore::MediaPlayerPrivateWebM::~MediaPlayerPrivateWebM((WebCore::MediaPlayerPrivateWebM *)((char *)this - 64));
  WTF::fastFree(v1, v2);
}

{
  WTF *v1;
  void *v2;

  WebCore::MediaPlayerPrivateWebM::~MediaPlayerPrivateWebM((WebCore::MediaPlayerPrivateWebM *)((char *)this - 80));
  WTF::fastFree(v1, v2);
}

unsigned __int8 *WebCore::MediaPlayerPrivateWebM::load(unsigned __int8 *this, const WTF::String *a2, double a3, double a4, float a5)
{
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  int v12;
  const WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  NSObject *v22;
  uint64_t v23;
  void *v24;
  char *v25;
  unsigned __int8 *v26;
  int v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::Logger *v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::Logger *v45;
  uint64_t v46;
  WTF::StringImpl **v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  int v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  int i;
  int v58;
  WTF *v59;
  char v60;
  void *v61;
  const char *v62;
  unsigned int *v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int *v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  WTF::Logger *v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int v76;
  char *v77;
  const char *v78;
  const char *v79;
  uint64_t v80;
  const char *v81;
  uint64_t v82;
  WTF::StringImpl *v83;
  WTF::Logger *v84;
  uint64_t v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  __int128 buf;
  const char *v93;
  WTF::StringImpl *v94;
  int v95;
  WTF::StringImpl *v96;
  int v97;
  WTF::StringImpl *v98;
  char v99;
  char v100;
  uint64_t v101;

  v6 = (uint64_t)this;
  v101 = *MEMORY[0x1E0C80C00];
  v7 = *((_QWORD *)this + 46);
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 47);
  *(_QWORD *)&buf = "MediaPlayerPrivateWebM";
  *((_QWORD *)&buf + 1) = 23;
  v93 = "load";
  v94 = v8;
  if (*(_BYTE *)(v7 + 12))
    this = (unsigned __int8 *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&buf);
  v9 = *(_QWORD *)(v6 + 96);
  if (!v9)
    return this;
  v10 = *(_QWORD *)(v6 + 104);
  if (__ldaxr((unsigned __int8 *)v9))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v9))
  {
    goto LABEL_8;
  }
  this = (unsigned __int8 *)MEMORY[0x19AEA534C](v9);
LABEL_8:
  if (*(_QWORD *)(v9 + 24))
    ++*(_QWORD *)(v9 + 8);
  else
    v10 = 0;
  v12 = __ldxr((unsigned __int8 *)v9);
  if (v12 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v9))
    {
      if (!v10)
        return this;
      goto LABEL_17;
    }
  }
  else
  {
    __clrex();
  }
  this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v9);
  if (!v10)
    return this;
LABEL_17:
  WebCore::ContentType::containerType((WebCore::ContentType *)(v10 + 144), a3, a4, a5);
  v14 = v83;
  if (!v83 || !*((_DWORD *)v83 + 1))
    goto LABEL_18;
  if ((byte_1ECE812E9 & 1) == 0)
  {
    qword_1ECE812F8 = 0;
    byte_1ECE812E9 = 1;
LABEL_52:
    v29 = qword_1ECE812F8;
    if (!qword_1ECE812F8)
      goto LABEL_18;
    v14 = v83;
    goto LABEL_54;
  }
  v29 = qword_1ECE812F8;
  if (!qword_1ECE812F8 || !*(_DWORD *)(qword_1ECE812F8 - 12))
    goto LABEL_52;
LABEL_54:
  v30 = *(_DWORD *)(v29 - 8);
  v31 = *((_DWORD *)v14 + 4);
  if (v31 < 0x100)
    v32 = WTF::StringImpl::hashSlowCase(v14);
  else
    v32 = v31 >> 8;
  for (i = 0; ; v32 = i + v58)
  {
    v58 = v32 & v30;
    v59 = *(WTF **)(v29 + 8 * (v32 & v30));
    if (!v59)
      break;
    if (v59 != (WTF *)-1 && (WTF::equal(v59, v83, v13) & 1) != 0)
    {
      WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)&buf, a2);
      v60 = v100;
      if ((v100 & 1) == 0)
      {
        WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)&buf);
        v60 = v100 | 1;
        v100 |= 1u;
      }
      if ((v99 & 2) == 0)
      {
        v99 |= 2u;
        v100 = v60 & 0xFD;
      }
      (*(void (**)(WTF::Logger **__return_ptr))(**(_QWORD **)(*(_QWORD *)(v10 + 8) + 8) + 312))(&v84);
      WebCore::WebMResourceClient::create(v6 + 48, (uint64_t)v84, (uint64_t)&buf, (uint64_t *)&v79);
      v62 = v79;
      v79 = 0;
      v63 = *(unsigned int **)(v6 + 160);
      *(_QWORD *)(v6 + 160) = v62;
      if (v63)
      {
        v64 = v63 + 2;
        do
        {
          v65 = __ldaxr(v64);
          v66 = v65 - 1;
        }
        while (__stlxr(v66, v64));
        if (!v66)
        {
          atomic_store(1u, v63 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v63 + 8))(v63);
        }
        v67 = (unsigned int *)v79;
        v79 = 0;
        if (v67)
        {
          v68 = v67 + 2;
          do
          {
            v69 = __ldaxr(v68);
            v70 = v69 - 1;
          }
          while (__stlxr(v70, v68));
          if (!v70)
          {
            atomic_store(1u, v67 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v67 + 8))(v67);
          }
        }
        v62 = *(const char **)(v6 + 160);
      }
      if (!v62)
      {
        v71 = *(_QWORD *)(v6 + 368);
        v72 = *(_QWORD *)(v6 + 376);
        v79 = "MediaPlayerPrivateWebM";
        v80 = 23;
        v81 = "load";
        v82 = v72;
        if (*(_BYTE *)(v71 + 12))
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [33]>((uint64_t)&WebCore::LogMedia, 1u, (WTF::Logger::LogSiteIdentifier *)&v79, "could not create resource client");
        WebCore::MediaPlayerPrivateWebM::setNetworkState((unsigned __int8 *)v6, 5);
        WebCore::MediaPlayerPrivateWebM::setReadyState(v6, 0);
      }
      v73 = v84;
      v84 = 0;
      if (v73)
      {
        v74 = (unsigned int *)((char *)v73 + 8);
        do
        {
          v75 = __ldaxr(v74);
          v76 = v75 - 1;
        }
        while (__stlxr(v76, v74));
        if (!v76)
        {
          atomic_store(1u, v74);
          v77 = (char *)WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v77 = off_1E32051E8;
          *((_QWORD *)v77 + 1) = v74;
          v79 = v77;
          WTF::ensureOnMainThread();
          v78 = v79;
          v79 = 0;
          if (v78)
            (*(void (**)(const char *))(*(_QWORD *)v78 + 8))(v78);
        }
      }
      WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&buf, v61);
      goto LABEL_105;
    }
    ++i;
  }
LABEL_18:
  v15 = *(_QWORD *)(v6 + 368);
  v16 = *(_QWORD *)(v6 + 376);
  v79 = "MediaPlayerPrivateWebM";
  v80 = 23;
  v81 = "load";
  v82 = v16;
  if (!*(_BYTE *)(v15 + 12))
    goto LABEL_104;
  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v79);
  WTF::String::String((WTF::String *)&v87, "mime type = ");
  v17 = v83;
  if (v83)
    *(_DWORD *)v83 += 2;
  WTF::String::String((WTF::String *)&v86, " not supported");
  v91 = v17;
  *(_QWORD *)&buf = v88;
  v84 = v87;
  v90 = v86;
  this = (unsigned __int8 *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v84, (uint64_t *)&v91, (uint64_t *)&v90, &v89);
  if (!v89)
  {
    __break(0xC471u);
    return this;
  }
  v19 = v86;
  v86 = 0;
  if (!v19)
  {
LABEL_25:
    if (v17)
      goto LABEL_26;
    goto LABEL_28;
  }
  if (*(_DWORD *)v19 != 2)
  {
    *(_DWORD *)v19 -= 2;
    goto LABEL_25;
  }
  WTF::StringImpl::destroy(v19, v18);
  if (v17)
  {
LABEL_26:
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v18);
    else
      *(_DWORD *)v17 -= 2;
  }
LABEL_28:
  v20 = v87;
  v87 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v18);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = v88;
  v88 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v18);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = qword_1ECE7C4A0;
  v23 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v23)
  {
    WTF::String::utf8();
    v25 = v84 ? (char *)v84 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v25;
    _os_log_impl(&dword_1940B8000, v22, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v23 = (uint64_t)v84;
    v84 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 1)
        v23 = WTF::fastFree((WTF *)v23, v24);
      else
        --*(_DWORD *)v23;
    }
  }
  if (WebCore::LogMedia && byte_1ECE7C490)
  {
    v26 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v27 = *v26;
      if ((v27 & 1) != 0)
        break;
      v28 = __ldaxr(v26);
      if (v28 == v27)
      {
        if (!__stxr(v27 | 1, v26))
        {
          v33 = WTF::Logger::observers((WTF::Logger *)v23);
          v34 = *(unsigned int *)(v33 + 12);
          if ((_DWORD)v34)
          {
            v35 = *(uint64_t **)v33;
            v36 = *(_QWORD *)v33 + 8 * v34;
            do
            {
              v37 = *v35;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v79);
              LODWORD(v93) = 0;
              WTF::String::String((WTF::String *)&v94, "mime type = ");
              v95 = 0;
              v38 = v83;
              if (v83)
                *(_DWORD *)v83 += 2;
              v96 = v38;
              v97 = 0;
              WTF::String::String((WTF::String *)&v98, " not supported");
              v84 = 0;
              v85 = 0;
              v39 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x40);
              LODWORD(v85) = 4;
              v84 = v39;
              v40 = HIDWORD(v85);
              *((_DWORD *)v39 + 4 * HIDWORD(v85)) = buf;
              v41 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v39 + 2 * v40 + 1) = v41;
              *((_DWORD *)v39 + 4 * (v40 + 1)) = (_DWORD)v93;
              v42 = v94;
              if (v94)
                *(_DWORD *)v94 += 2;
              *((_QWORD *)v39 + 2 * (v40 + 1) + 1) = v42;
              *((_DWORD *)v39 + 4 * (v40 + 2)) = v95;
              v43 = v96;
              if (v96)
                *(_DWORD *)v96 += 2;
              *((_QWORD *)v39 + 2 * (v40 + 2) + 1) = v43;
              *((_DWORD *)v39 + 4 * (v40 + 3)) = v97;
              v44 = v98;
              if (v98)
                *(_DWORD *)v98 += 2;
              *((_QWORD *)v39 + 2 * (v40 + 3) + 1) = v44;
              HIDWORD(v85) = v40 + 4;
              (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v37 + 16))(v37, &WebCore::LogMedia, 1, &v84);
              v45 = v84;
              if (HIDWORD(v85))
              {
                v46 = 16 * HIDWORD(v85);
                v47 = (WTF::StringImpl **)((char *)v84 + 8);
                do
                {
                  v48 = *v47;
                  *v47 = 0;
                  if (v48)
                  {
                    if (*(_DWORD *)v48 == 2)
                      WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v24);
                    else
                      *(_DWORD *)v48 -= 2;
                  }
                  v47 += 2;
                  v46 -= 16;
                }
                while (v46);
                v45 = v84;
              }
              if (v45)
              {
                v84 = 0;
                LODWORD(v85) = 0;
                WTF::fastFree(v45, v24);
              }
              v49 = v98;
              v98 = 0;
              if (v49)
              {
                if (*(_DWORD *)v49 == 2)
                  WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v24);
                else
                  *(_DWORD *)v49 -= 2;
              }
              v50 = v96;
              v96 = 0;
              if (v50)
              {
                if (*(_DWORD *)v50 == 2)
                  WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v24);
                else
                  *(_DWORD *)v50 -= 2;
              }
              v51 = v94;
              v94 = 0;
              if (v51)
              {
                if (*(_DWORD *)v51 == 2)
                  WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v24);
                else
                  *(_DWORD *)v51 -= 2;
              }
              v52 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v52)
              {
                if (*(_DWORD *)v52 == 2)
                  WTF::StringImpl::destroy(v52, (WTF::StringImpl *)v24);
                else
                  *(_DWORD *)v52 -= 2;
              }
              ++v35;
            }
            while (v35 != (uint64_t *)v36);
          }
          v53 = __ldxr(v26);
          if (v53 == 1)
          {
            if (!__stlxr(0, v26))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  v54 = v89;
  v89 = 0;
  if (v54)
  {
    if (*(_DWORD *)v54 == 2)
      WTF::StringImpl::destroy(v54, (WTF::StringImpl *)v24);
    else
      *(_DWORD *)v54 -= 2;
  }
LABEL_104:
  WebCore::MediaPlayerPrivateWebM::setNetworkState((unsigned __int8 *)v6, 4);
LABEL_105:
  v56 = v83;
  v83 = 0;
  if (v56)
  {
    if (*(_DWORD *)v56 == 2)
      WTF::StringImpl::destroy(v56, v55);
    else
      *(_DWORD *)v56 -= 2;
  }
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v10);
}

void sub_1947A3C34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF::StringImpl *a16, WTF *a17, int a18, int a19, WTF::StringImpl *a20,WTF::StringImpl *a21,uint64_t a22,WTF::StringImpl *a23,uint64_t a24,uint64_t a25,char a26,WTF::StringImpl *a27,uint64_t a28,WTF::StringImpl *a29,uint64_t a30,WTF::StringImpl *a31,uint64_t a32,WTF::StringImpl *a33)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *WebCore::MediaPlayerPrivateWebM::setNetworkState(unsigned __int8 *result, int a2)
{
  unsigned __int8 *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::MediaPlayer *v6;
  int v8;
  _QWORD v9[4];
  unsigned __int8 v10;

  v2 = result;
  v10 = a2;
  if (a2 == 1)
    result[623] = 0;
  if (result[344] != a2)
  {
    v3 = *((_QWORD *)result + 46);
    v4 = *((_QWORD *)result + 47);
    v9[0] = "MediaPlayerPrivateWebM";
    v9[1] = 23;
    v9[2] = "setNetworkState";
    v9[3] = v4;
    if (*(_BYTE *)(v3 + 12))
    {
      result = (unsigned __int8 *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::MediaPlayerNetworkState>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v9, &v10);
      LOBYTE(a2) = v10;
    }
    v2[344] = a2;
    v5 = *((_QWORD *)v2 + 12);
    if (v5)
    {
      v6 = (WebCore::MediaPlayer *)*((_QWORD *)v2 + 13);
      if (__ldaxr((unsigned __int8 *)v5))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v5))
      {
        goto LABEL_11;
      }
      result = (unsigned __int8 *)MEMORY[0x19AEA534C](v5);
LABEL_11:
      if (*(_QWORD *)(v5 + 24))
        ++*(_QWORD *)(v5 + 8);
      else
        v6 = 0;
      v8 = __ldxr((unsigned __int8 *)v5);
      if (v8 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v5))
        {
LABEL_19:
          if (v6)
          {
            WebCore::MediaPlayer::networkStateChanged(v6);
            return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v6);
          }
          return result;
        }
      }
      else
      {
        __clrex();
      }
      result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v5);
      goto LABEL_19;
    }
  }
  return result;
}

uint64_t WebCore::MediaPlayerPrivateWebM::setReadyState(uint64_t result, unsigned int a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  NSObject *v13;
  uint64_t v14;
  void *v15;
  char *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::Logger *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::Logger *v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v41;
  WTF::MediaTime *v42;
  WTF::MediaTime *v43;
  WTF::MediaTime *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  _QWORD v49[4];
  WTF::Logger *v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  uint8_t buf[16];
  WTF::StringImpl *v55[2];
  __int128 v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  if (*(unsigned __int8 *)(result + 345) == a2)
    return result;
  v2 = a2;
  v3 = result;
  v4 = *(_QWORD *)(result + 368);
  v5 = *(_QWORD *)(result + 376);
  v49[0] = "MediaPlayerPrivateWebM";
  v49[1] = 23;
  v49[2] = "setReadyState";
  v49[3] = v5;
  if (*(_BYTE *)(v4 + 12))
  {
    result = WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v49);
    {
      WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_0::operator() const(void)::impl += 2;
      WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_1::operator() const(void)::impl += 2;
      WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_2::operator() const(void)::impl += 2;
      WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_3::operator() const(void)::impl += 2;
      WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_0::operator() const(void)::impl;
      *(_QWORD *)algn_1EE2F8BB8 = &WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_1::operator() const(void)::impl;
      qword_1EE2F8BC0 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_2::operator() const(void)::impl;
      unk_1EE2F8BC8 = &WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_3::operator() const(void)::impl;
      WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_4::operator() const(void)::impl += 2;
      qword_1EE2F8BD0 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_4::operator() const(void)::impl;
    }
    v6 = WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::values[v2];
    if (v6)
      *(_DWORD *)v6 += 2;
    if (v52)
    {
      v7 = *((_DWORD *)v52 + 1);
      if (v6)
      {
LABEL_9:
        v8 = *(_DWORD *)(v6 + 4);
LABEL_10:
        if ((v8 | v7) < 0)
          goto LABEL_104;
        result = (v7 + v8);
        if (__OFADD__(v7, v8))
          goto LABEL_104;
        if (v52)
        {
          v9 = *((_DWORD *)v52 + 4);
          v10 = (v9 >> 2) & 1;
          if (v6 && (v9 & 4) != 0)
            goto LABEL_15;
        }
        else
        {
          if (v6)
          {
LABEL_15:
            v10 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
            goto LABEL_16;
          }
          v10 = 1;
        }
LABEL_16:
        result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v10, (uint64_t)v52, v6, buf);
        v53 = *(WTF::StringImpl **)buf;
        if (*(_QWORD *)buf)
        {
          if (v6)
          {
            if (*(_DWORD *)v6 == 2)
              WTF::StringImpl::destroy((WTF::StringImpl *)v6, v11);
            else
              *(_DWORD *)v6 -= 2;
          }
          v12 = v52;
          v52 = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 2)
              WTF::StringImpl::destroy(v12, v11);
            else
              *(_DWORD *)v12 -= 2;
          }
          v13 = qword_1ECE7C4A0;
          v14 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)v14)
          {
            WTF::String::utf8();
            v16 = v50 ? (char *)v50 + 16 : 0;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = v16;
            _os_log_impl(&dword_1940B8000, v13, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
            v14 = (uint64_t)v50;
            v50 = 0;
            if (v14)
            {
              if (*(_DWORD *)v14 == 1)
                v14 = WTF::fastFree((WTF *)v14, v15);
              else
                --*(_DWORD *)v14;
            }
          }
          if (WebCore::LogMedia)
          {
            v17 = v2;
            v18 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
            while (1)
            {
              v19 = *v18;
              if ((v19 & 1) != 0)
                break;
              v20 = __ldaxr(v18);
              if (v20 == v19)
              {
                if (!__stxr(v19 | 1, v18))
                {
                  v47 = v3;
                  v48 = v2;
                  v21 = WTF::Logger::observers((WTF::Logger *)v14);
                  v22 = *(unsigned int *)(v21 + 12);
                  if ((_DWORD)v22)
                  {
                    v23 = *(uint64_t **)v21;
                    v24 = *(_QWORD *)v21 + 8 * v22;
                    do
                    {
                      v25 = *v23;
                      *(_DWORD *)buf = 0;
                      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v49);
                      LODWORD(v55[0]) = 0;
                      {
                        WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_0::operator() const(void)::impl += 2;
                        WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_1::operator() const(void)::impl += 2;
                        WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_0::operator() const(void)::impl;
                        *(_QWORD *)algn_1EE2F8BB8 = &WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_1::operator() const(void)::impl;
                        WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_2::operator() const(void)::impl += 2;
                        WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_3::operator() const(void)::impl += 2;
                        qword_1EE2F8BC0 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_2::operator() const(void)::impl;
                        unk_1EE2F8BC8 = &WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_3::operator() const(void)::impl;
                        WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_4::operator() const(void)::impl += 2;
                        qword_1EE2F8BD0 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::$_4::operator() const(void)::impl;
                      }
                      v26 = (WTF::StringImpl *)WebCore::convertEnumerationToString(WebCore::MediaPlayerReadyState)::values[v17];
                      if (v26)
                        *(_DWORD *)v26 += 2;
                      v55[1] = v26;
                      v50 = 0;
                      v51 = 0;
                      v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
                      LODWORD(v51) = 2;
                      v50 = v27;
                      v28 = HIDWORD(v51);
                      *((_DWORD *)v27 + 4 * HIDWORD(v51)) = *(_DWORD *)buf;
                      v29 = *(_QWORD *)&buf[8];
                      if (*(_QWORD *)&buf[8])
                        **(_DWORD **)&buf[8] += 2;
                      *((_QWORD *)v27 + 2 * v28 + 1) = v29;
                      *((_DWORD *)v27 + 4 * (v28 + 1)) = v55[0];
                      v30 = v55[1];
                      if (v55[1])
                        *(_DWORD *)v55[1] += 2;
                      *((_QWORD *)v27 + 2 * (v28 + 1) + 1) = v30;
                      HIDWORD(v51) = v28 + 2;
                      (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v25 + 16))(v25, &WebCore::LogMedia, 0, &v50);
                      v31 = v50;
                      if (HIDWORD(v51))
                      {
                        v32 = 16 * HIDWORD(v51);
                        v33 = (WTF::StringImpl **)((char *)v50 + 8);
                        do
                        {
                          v34 = *v33;
                          *v33 = 0;
                          if (v34)
                          {
                            if (*(_DWORD *)v34 == 2)
                              WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v15);
                            else
                              *(_DWORD *)v34 -= 2;
                          }
                          v33 += 2;
                          v32 -= 16;
                        }
                        while (v32);
                        v31 = v50;
                      }
                      if (v31)
                      {
                        v50 = 0;
                        LODWORD(v51) = 0;
                        WTF::fastFree(v31, v15);
                      }
                      v35 = v55[1];
                      v55[1] = 0;
                      if (v35)
                      {
                        if (*(_DWORD *)v35 == 2)
                          WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v15);
                        else
                          *(_DWORD *)v35 -= 2;
                      }
                      v36 = *(WTF::StringImpl **)&buf[8];
                      *(_QWORD *)&buf[8] = 0;
                      if (v36)
                      {
                        if (*(_DWORD *)v36 == 2)
                          WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v15);
                        else
                          *(_DWORD *)v36 -= 2;
                      }
                      ++v23;
                    }
                    while (v23 != (uint64_t *)v24);
                  }
                  v37 = __ldxr(v18);
                  if (v37 == 1)
                  {
                    LOBYTE(v2) = v48;
                    v3 = v47;
                    if (!__stlxr(0, v18))
                      break;
                  }
                  else
                  {
                    __clrex();
                    LOBYTE(v2) = v48;
                    v3 = v47;
                  }
                  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                  break;
                }
              }
              else
              {
                __clrex();
              }
            }
          }
          result = (uint64_t)v53;
          v53 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v15);
            else
              *(_DWORD *)result -= 2;
          }
          goto LABEL_75;
        }
LABEL_104:
        __break(0xC471u);
        return result;
      }
    }
    else
    {
      v7 = 0;
      if (v6)
        goto LABEL_9;
    }
    v8 = 0;
    goto LABEL_10;
  }
LABEL_75:
  *(_BYTE *)(v3 + 345) = v2;
  v38 = *(_QWORD *)(v3 + 96);
  if (!v38)
    return result;
  v39 = *(_QWORD *)(v3 + 104);
  if (__ldaxr((unsigned __int8 *)v38))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v38))
  {
    goto LABEL_80;
  }
  result = MEMORY[0x19AEA534C](v38);
LABEL_80:
  if (*(_QWORD *)(v38 + 24))
    ++*(_QWORD *)(v38 + 8);
  else
    v39 = 0;
  v41 = __ldxr((unsigned __int8 *)v38);
  if (v41 != 1)
  {
    __clrex();
LABEL_88:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v38);
    if (!v39)
      return result;
    goto LABEL_89;
  }
  if (__stlxr(0, (unsigned __int8 *)v38))
    goto LABEL_88;
  if (!v39)
    return result;
LABEL_89:
  (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v39 + 8) + 8) + 24))(*(_QWORD *)(*(_QWORD *)(v39 + 8)
                                                                                                + 8));
  if (*(_BYTE *)(v39 + 192))
  {
    v42 = (WTF::MediaTime *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v39 + 72) + 560))(*(_QWORD *)(v39 + 72));
    if ((_DWORD)v42 == 1)
    {
      if (!*(_BYTE *)(v39 + 192))
        __break(1u);
      *(_BYTE *)(v39 + 192) = 0;
      *(_OWORD *)buf = *(_OWORD *)(v39 + 176);
      v43 = (WTF::MediaTime *)WTF::MediaTime::zeroTime(v42);
      *(_OWORD *)v55 = *(_OWORD *)v43;
      v44 = (WTF::MediaTime *)WTF::MediaTime::zeroTime(v43);
      v56 = *(_OWORD *)v44;
      v45 = *(_QWORD *)(v39 + 72);
      v46 = WTF::MediaTime::invalidTime(v44);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v45 + 384))(v45, v46);
      (*(void (**)(_QWORD, uint8_t *))(**(_QWORD **)(v39 + 72) + 400))(*(_QWORD *)(v39 + 72), buf);
    }
  }
  return (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v39);
}

void sub_1947A473C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF *a15, int a16, int a17, uint64_t a18, WTF::StringImpl *a19, uint64_t a20,WTF::StringImpl *a21,uint64_t a22,WTF::StringImpl *a23)
{
  if (a19)
  {
    if (*(_DWORD *)a19 == 2)
      WTF::StringImpl::destroy(a19, a2);
    else
      *(_DWORD *)a19 -= 2;
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *WebCore::MediaPlayerPrivateWebM::load(WebCore::MediaPlayerPrivateWebM *this, const WTF::URL *a2, const WebCore::ContentType *a3, WebCore::MediaSourcePrivateClient *a4)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[4];

  v5 = *((_QWORD *)this + 46);
  v6 = *((_QWORD *)this + 47);
  v8[0] = "MediaPlayerPrivateWebM";
  v8[1] = 23;
  v8[2] = "load";
  v8[3] = v6;
  if (*(_BYTE *)(v5 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [29]>((uint64_t)&WebCore::LogMedia, 1u, (WTF::Logger::LogSiteIdentifier *)v8, "tried to load as mediasource");
  return WebCore::MediaPlayerPrivateWebM::setNetworkState((unsigned __int8 *)this, 4);
}

unsigned __int8 *WebCore::MediaPlayerPrivateWebM::load(WebCore::MediaPlayerPrivateWebM *this, WebCore::MediaStreamPrivate *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[4];

  v3 = *((_QWORD *)this + 46);
  v4 = *((_QWORD *)this + 47);
  v6[0] = "MediaPlayerPrivateWebM";
  v6[1] = 23;
  v6[2] = "load";
  v6[3] = v4;
  if (*(_BYTE *)(v3 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [29]>((uint64_t)&WebCore::LogMedia, 1u, (WTF::Logger::LogSiteIdentifier *)v6, "tried to load as mediastream");
  return WebCore::MediaPlayerPrivateWebM::setNetworkState((unsigned __int8 *)this, 4);
}

uint64_t *WebCore::MediaPlayerPrivateWebM::dataReceived(WebCore::MediaPlayerPrivateWebM *this, const WebCore::SharedBuffer *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  WTF::String *v21;
  const WebCore::SharedBuffer *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  int v27;
  const WebCore::SharedBuffer *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  WTF::RunLoop *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  int v40;
  uint64_t v41;
  _QWORD *v42;
  unsigned int *v43;
  unsigned int v44;
  uint64_t *result;
  void *v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  _QWORD *v53;
  __int128 v54;
  const char *v55;
  uint64_t v56;
  const WebCore::SharedBuffer *v57;
  int v58;
  uint64_t v59;
  uint64_t v60[2];
  __int128 v61;
  const char *v62;
  uint64_t v63;
  const WebCore::SharedBuffer *v64;
  int v65;
  _BYTE v66[24];
  __int128 v67;
  const WebCore::SharedBuffer *v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  WTF::String *v72;
  __int128 v73;
  __int128 v74;

  v4 = *((_QWORD *)this + 46);
  v5 = *((_QWORD *)this + 47);
  *(_QWORD *)v66 = "MediaPlayerPrivateWebM";
  *(_QWORD *)&v66[8] = 23;
  *(_QWORD *)&v66[16] = "dataReceived";
  *(_QWORD *)&v67 = v5;
  v72 = (WTF::String *)*((_QWORD *)a2 + 6);
  if (*(_BYTE *)(v4 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [15],unsigned long>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v66, "data length = ", &v72);
  v6 = *((_QWORD *)this + 7);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEA534C](v6);
LABEL_7:
  ++*(_QWORD *)(v6 + 8);
  v8 = __ldxr((unsigned __int8 *)v6);
  if (v8 != 1)
  {
    __clrex();
    goto LABEL_11;
  }
  if (__stlxr(0, (unsigned __int8 *)v6))
LABEL_11:
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v9 = &off_1E3206FE0;
  v9[1] = this;
  v9[2] = this;
  *(_QWORD *)v66 = v9;
  WTF::callOnMainThread();
  v11 = *(_QWORD *)v66;
  *(_QWORD *)v66 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  do
    v12 = __ldaxr((unsigned int *)a2);
  while (__stlxr(v12 + 1, (unsigned int *)a2));
  *(_QWORD *)v66 = 0;
  v64 = a2;
  v65 = 0;
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)v66, v10);
  v13 = *((_QWORD *)this + 42);
  v64 = 0;
  v57 = a2;
  v58 = 0;
  v14 = v13 + 32;
  v15 = *((_QWORD *)this + 41);
  v16 = (unsigned int *)(v15 + 8);
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 + 1, v16));
  v59 = v15;
  v54 = 0uLL;
  v55 = "dataReceived";
  v56 = 0;
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::NativePromiseProducer<std::enable_if<true,void>>((uint64_t)&v72, 0, &v54);
  v18 = (unsigned int *)v72;
  if (v72)
  {
    v19 = (unsigned int *)((char *)v72 + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 + 1, v19));
    v21 = v72;
  }
  else
  {
    v21 = 0;
  }
  v72 = 0;
  *(_QWORD *)v66 = v21;
  *(_OWORD *)&v66[8] = v73;
  v67 = v74;
  LOBYTE(v68) = 0;
  v69 = -1;
  if (v58 != -1)
  {
    v22 = v57;
    v57 = 0;
    v68 = v22;
    v69 = v58;
  }
  v23 = v59;
  v59 = 0;
  v70 = v23;
  v24 = WTF::fastMalloc((WTF *)0x48);
  *(_QWORD *)v24 = off_1E3206E50;
  v25 = *(_QWORD *)v66;
  *(_QWORD *)v66 = 0;
  *(_QWORD *)(v24 + 8) = v25;
  v26 = v67;
  *(_OWORD *)(v24 + 16) = *(_OWORD *)&v66[8];
  *(_OWORD *)(v24 + 32) = v26;
  *(_BYTE *)(v24 + 48) = 0;
  *(_DWORD *)(v24 + 56) = -1;
  v27 = v69;
  if (v69 != -1)
  {
    v28 = v68;
    v68 = 0;
    *(_QWORD *)(v24 + 48) = v28;
    *(_DWORD *)(v24 + 56) = v27;
  }
  v29 = v70;
  v70 = 0;
  *(_QWORD *)(v24 + 64) = v29;
  v71 = v24;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v14 + 16))(v14, &v71);
  v31 = v71;
  v71 = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  _ZZN3WTFL11invokeAsyncIZN7WebCore22MediaPlayerPrivateWebM12dataReceivedERKNS1_12SharedBufferEE3__0EEDaRNS_24SerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEENUlvE_D1Ev((uint64_t)v66, v30);
  v32 = v72;
  if (v72)
  {
    WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::assertIsDead((uint64_t)v72);
    v32 = v72;
    v72 = 0;
    if (v32)
    {
      v33 = (unsigned int *)((char *)v32 + 8);
      do
      {
        v34 = __ldaxr(v33);
        v35 = v34 - 1;
      }
      while (__stlxr(v35, v33));
      if (!v35)
      {
        atomic_store(1u, (unsigned int *)v32 + 2);
        v32 = (WTF::RunLoop *)(*(uint64_t (**)(WTF::RunLoop *))(*(_QWORD *)v32 + 16))(v32);
      }
    }
  }
  v36 = WTF::RunLoop::main(v32);
  v37 = *((_QWORD *)this + 7);
  if (!v37)
  {
    v39 = 0;
    goto LABEL_45;
  }
  if (__ldaxr((unsigned __int8 *)v37))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v37))
  {
    goto LABEL_38;
  }
  MEMORY[0x19AEA534C](v37);
LABEL_38:
  if (*(_QWORD *)(v37 + 24))
  {
    ++*(_QWORD *)(v37 + 16);
    v39 = v37;
  }
  else
  {
    v39 = 0;
  }
  v40 = __ldxr((unsigned __int8 *)v37);
  if (v40 != 1)
  {
    __clrex();
    goto LABEL_44;
  }
  if (__stlxr(0, (unsigned __int8 *)v37))
LABEL_44:
    WTF::Lock::unlockSlow((WTF::Lock *)v37);
LABEL_45:
  *(_OWORD *)v66 = 0uLL;
  v41 = WTF::fastMalloc((WTF *)0x50);
  (*(void (**)(uint64_t))(*(_QWORD *)v36 + 32))(v36);
  v42 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v42 = &off_1E3206E90;
  v42[1] = v39;
  v42[2] = this;
  *(_DWORD *)(v41 + 8) = 1;
  *(_QWORD *)(v41 + 16) = v36;
  *(_QWORD *)(v41 + 24) = 0;
  *(_QWORD *)(v41 + 32) = 0;
  *(_QWORD *)(v41 + 40) = "dataReceived";
  *(_QWORD *)(v41 + 48) = 0;
  *(_WORD *)(v41 + 56) = 0;
  *(_QWORD *)v41 = &off_1E32059B0;
  v43 = v18 + 2;
  *(_QWORD *)(v41 + 64) = 0;
  *(_QWORD *)(v41 + 72) = v42;
  do
    v44 = __ldaxr(v43);
  while (__stlxr(v44 + 1, v43));
  v60[0] = (uint64_t)v18;
  v60[1] = v41;
  v61 = *(_OWORD *)v66;
  v62 = "dataReceived";
  v63 = 0;
  result = WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCommand<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallback<false,void>>::~ThenCommand(v60);
  if (v18)
  {
    do
    {
      v47 = __ldaxr(v43);
      v48 = v47 - 1;
    }
    while (__stlxr(v48, v43));
    if (!v48)
    {
      atomic_store(1u, v18 + 2);
      result = (uint64_t *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v18 + 16))(v18);
    }
  }
  v49 = v59;
  v59 = 0;
  if (v49)
  {
    v50 = (unsigned int *)(v49 + 8);
    do
    {
      v51 = __ldaxr(v50);
      v52 = v51 - 1;
    }
    while (__stlxr(v52, v50));
    if (!v52)
    {
      atomic_store(1u, v50);
      v53 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v53 = off_1E32071E8;
      v53[1] = v50;
      *(_QWORD *)v66 = v53;
      WTF::ensureOnMainThread();
      result = *(uint64_t **)v66;
      *(_QWORD *)v66 = 0;
      if (result)
        result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
    }
  }
  if (v58 != -1)
    result = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v57, v46);
  if (v65 != -1)
    return WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v64, v46);
  return result;
}

void sub_1947A4E50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, int a15, int a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,int a25,int a26,uint64_t a27)
{
  if (a27)
    (*(void (**)(uint64_t))(*(_QWORD *)a27 + 8))(a27);
  _Unwind_Resume(exception_object);
}

void sub_1947A511C()
{
  uint64_t v0;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WebMResourceClientParent,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v0 + 56));
  JUMPOUT(0x1947A50ACLL);
}

uint64_t *`non-virtual thunk to'WebCore::MediaPlayerPrivateWebM::dataReceived(WebCore::MediaPlayerPrivateWebM *this, const WebCore::SharedBuffer *a2)
{
  return WebCore::MediaPlayerPrivateWebM::dataReceived((WebCore::MediaPlayerPrivateWebM *)((char *)this - 48), a2);
}

uint64_t WebCore::MediaPlayerPrivateWebM::loadFailed(WebCore::MediaPlayerPrivateWebM *this, const WebCore::ResourceError *a2)
{
  uint64_t v4;
  uint64_t v5;
  WTF::String *v6;
  uint64_t result;
  int v8;
  int v9;
  int v10;
  BOOL v11;
  int v12;
  BOOL v13;
  int v14;
  unsigned int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  NSObject *v20;
  uint64_t v21;
  void *v22;
  char *v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  WTF::Logger *v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::Logger *v37;
  uint64_t v38;
  WTF::StringImpl **v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  int v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  int v48;
  _QWORD *v49;
  _QWORD v50[4];
  WTF::Logger *v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  __int128 buf;
  int v58;
  WTF::StringImpl *v59;
  int v60;
  WTF::StringImpl *v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v5 = *((_QWORD *)this + 46);
  v4 = *((_QWORD *)this + 47);
  v50[0] = "MediaPlayerPrivateWebM";
  v50[1] = 23;
  v50[2] = "loadFailed";
  v50[3] = v4;
  WebCore::ResourceError::platformLazyInit(a2);
  if (!*(_BYTE *)(v5 + 12))
    goto LABEL_85;
  v6 = (WTF::String *)*((unsigned int *)a2 + 14);
  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v50);
  WTF::String::String((WTF::String *)&v54, "resource failed to load with code ");
  result = WTF::String::number(v6);
  if (v55)
  {
    v8 = *((_DWORD *)v55 + 1);
    if (v54)
      goto LABEL_4;
LABEL_103:
    v9 = 0;
    if (v53)
      goto LABEL_5;
LABEL_104:
    v10 = 0;
    goto LABEL_6;
  }
  v8 = 0;
  if (!v54)
    goto LABEL_103;
LABEL_4:
  v9 = *((_DWORD *)v54 + 1);
  if (!v53)
    goto LABEL_104;
LABEL_5:
  v10 = *((_DWORD *)v53 + 1);
LABEL_6:
  if ((v10 | v9) < 0)
    goto LABEL_107;
  v11 = __OFADD__(v9, v10);
  v12 = v9 + v10;
  v13 = v11;
  if (v8 < 0)
    goto LABEL_107;
  if (v13)
    goto LABEL_107;
  result = (v8 + v12);
  if (__OFADD__(v8, v12))
    goto LABEL_107;
  if (v55 && (*((_BYTE *)v55 + 16) & 4) == 0)
  {
    v14 = 0;
    goto LABEL_20;
  }
  if (v54)
  {
    v15 = *((_DWORD *)v54 + 4);
    v14 = (v15 >> 2) & 1;
    if (v53 && (v15 & 4) != 0)
      goto LABEL_19;
  }
  else
  {
    if (v53)
    {
LABEL_19:
      v14 = (*((unsigned __int8 *)v53 + 16) >> 2) & 1;
      goto LABEL_20;
    }
    v14 = 1;
  }
LABEL_20:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v14, v55, (uint64_t)v54, (uint64_t)v53, &buf);
  v56 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_107:
    __break(0xC471u);
    return result;
  }
  v17 = v53;
  v53 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v16);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = v54;
  v54 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v16);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v55;
  v55 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v16);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = qword_1ECE7C4A0;
  v21 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v21)
  {
    WTF::String::utf8();
    v23 = v51 ? (char *)v51 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v23;
    _os_log_impl(&dword_1940B8000, v20, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v21 = (uint64_t)v51;
    v51 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 1)
        v21 = WTF::fastFree((WTF *)v21, v22);
      else
        --*(_DWORD *)v21;
    }
  }
  if (WebCore::LogMedia && byte_1ECE7C490)
  {
    v24 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v25 = *v24;
      if ((v25 & 1) != 0)
        break;
      v26 = __ldaxr(v24);
      if (v26 == v25)
      {
        if (!__stxr(v25 | 1, v24))
        {
          v27 = WTF::Logger::observers((WTF::Logger *)v21);
          v28 = *(unsigned int *)(v27 + 12);
          if ((_DWORD)v28)
          {
            v29 = *(uint64_t **)v27;
            v30 = *(_QWORD *)v27 + 8 * v28;
            do
            {
              v31 = *v29;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v50);
              v58 = 0;
              WTF::String::String((WTF::String *)&v59, "resource failed to load with code ");
              v60 = 0;
              WTF::String::number(v6);
              v51 = 0;
              v52 = 0;
              v32 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
              LODWORD(v52) = 3;
              v51 = v32;
              v33 = HIDWORD(v52);
              *((_DWORD *)v32 + 4 * HIDWORD(v52)) = buf;
              v34 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v32 + 2 * v33 + 1) = v34;
              *((_DWORD *)v32 + 4 * (v33 + 1)) = v58;
              v35 = v59;
              if (v59)
                *(_DWORD *)v59 += 2;
              *((_QWORD *)v32 + 2 * (v33 + 1) + 1) = v35;
              *((_DWORD *)v32 + 4 * (v33 + 2)) = v60;
              v36 = v61;
              if (v61)
                *(_DWORD *)v61 += 2;
              *((_QWORD *)v32 + 2 * (v33 + 2) + 1) = v36;
              HIDWORD(v52) = v33 + 3;
              (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v31 + 16))(v31, &WebCore::LogMedia, 1, &v51);
              v37 = v51;
              if (HIDWORD(v52))
              {
                v38 = 16 * HIDWORD(v52);
                v39 = (WTF::StringImpl **)((char *)v51 + 8);
                do
                {
                  v40 = *v39;
                  *v39 = 0;
                  if (v40)
                  {
                    if (*(_DWORD *)v40 == 2)
                      WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v22);
                    else
                      *(_DWORD *)v40 -= 2;
                  }
                  v39 += 2;
                  v38 -= 16;
                }
                while (v38);
                v37 = v51;
              }
              if (v37)
              {
                v51 = 0;
                LODWORD(v52) = 0;
                WTF::fastFree(v37, v22);
              }
              v41 = v61;
              v61 = 0;
              if (v41)
              {
                if (*(_DWORD *)v41 == 2)
                  WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v41 -= 2;
              }
              v42 = v59;
              v59 = 0;
              if (v42)
              {
                if (*(_DWORD *)v42 == 2)
                  WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v42 -= 2;
              }
              v43 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v43)
              {
                if (*(_DWORD *)v43 == 2)
                  WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v43 -= 2;
              }
              ++v29;
            }
            while (v29 != (uint64_t *)v30);
          }
          v44 = __ldxr(v24);
          if (v44 == 1)
          {
            if (!__stlxr(0, v24))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  v45 = v56;
  v56 = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 2)
      WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v22);
    else
      *(_DWORD *)v45 -= 2;
  }
LABEL_85:
  v46 = *((_QWORD *)this + 7);
  if (__ldaxr((unsigned __int8 *)v46))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v46))
  {
    goto LABEL_89;
  }
  MEMORY[0x19AEA534C](v46);
LABEL_89:
  ++*(_QWORD *)(v46 + 8);
  v48 = __ldxr((unsigned __int8 *)v46);
  if (v48 != 1)
  {
    __clrex();
    goto LABEL_93;
  }
  if (__stlxr(0, (unsigned __int8 *)v46))
LABEL_93:
    WTF::Lock::unlockSlow((WTF::Lock *)v46);
  v49 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v49 = &off_1E3207008;
  v49[1] = this;
  *(_QWORD *)&buf = v49;
  WTF::callOnMainThread();
  result = buf;
  *(_QWORD *)&buf = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1947A56E8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF *a15, int a16, int a17, WTF::StringImpl *a18, WTF::StringImpl *a19, uint64_t a20,WTF::StringImpl *a21,uint64_t a22,WTF::StringImpl *a23,uint64_t a24,WTF::StringImpl *a25,uint64_t a26,WTF::StringImpl *a27)
{
  unsigned __int8 *v27;
  int v29;

  v29 = __ldxr(v27);
  if (v29 == 1)
  {
    if (!__stlxr(0, v27))
    {
LABEL_6:
      if (a21)
      {
        if (*(_DWORD *)a21 == 2)
          WTF::StringImpl::destroy(a21, a2);
        else
          *(_DWORD *)a21 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t `non-virtual thunk to'WebCore::MediaPlayerPrivateWebM::loadFailed(WebCore::MediaPlayerPrivateWebM *this, const WebCore::ResourceError *a2)
{
  return WebCore::MediaPlayerPrivateWebM::loadFailed((WebCore::MediaPlayerPrivateWebM *)((char *)this - 48), a2);
}

uint64_t WebCore::MediaPlayerPrivateWebM::loadFinished(WebCore::MediaPlayerPrivateWebM *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v6;
  _QWORD *v7;
  uint64_t result;
  _QWORD v9[4];

  v2 = *((_QWORD *)this + 46);
  v3 = *((_QWORD *)this + 47);
  v9[0] = "MediaPlayerPrivateWebM";
  v9[1] = 23;
  v9[2] = "loadFinished";
  v9[3] = v3;
  if (*(_BYTE *)(v2 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v9);
  v4 = *((_QWORD *)this + 7);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_7:
  ++*(_QWORD *)(v4 + 8);
  v6 = __ldxr((unsigned __int8 *)v4);
  if (v6 != 1)
  {
    __clrex();
    goto LABEL_11;
  }
  if (__stlxr(0, (unsigned __int8 *)v4))
LABEL_11:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v7 = &off_1E3207030;
  v7[1] = this;
  v9[0] = v7;
  WTF::callOnMainThread();
  result = v9[0];
  v9[0] = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1947A5A04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  _Unwind_Resume(exception_object);
}

uint64_t `non-virtual thunk to'WebCore::MediaPlayerPrivateWebM::loadFinished(WebCore::MediaPlayerPrivateWebM *this)
{
  return WebCore::MediaPlayerPrivateWebM::loadFinished((WebCore::MediaPlayerPrivateWebM *)((char *)this - 48));
}

uint64_t WebCore::MediaPlayerPrivateWebM::platformLayer(WebCore::MediaPlayerPrivateWebM *this)
{
  if (*((_QWORD *)this + 32))
    return *(_QWORD *)(*((_QWORD *)this + 48) + 32);
  else
    return 0;
}

void WebCore::MediaPlayerPrivateWebM::play(WebCore::MediaPlayerPrivateWebM *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  WTF::MediaTime *v8;
  WTF::MediaTime *v9;
  WTF::MonotonicTime *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  __int128 v14;
  double v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  const char *v20;
  uint64_t v21;

  if (*((_BYTE *)this + 616))
  {
    *((_BYTE *)this + 616) = 0;
    if (*((_DWORD *)this + 45))
      WebCore::MediaPlayerPrivateWebM::flushVideo(this);
    v2 = *((_QWORD *)this + 19);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 64);
      *(_QWORD *)(v2 + 64) = 0;
      if (v3)
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    }
    v4 = *((_QWORD *)this + 32);
    if (v4)
      objc_msgSend(*(id *)(v4 + 8), "stopRequestingMediaData");
    if (*((_BYTE *)this + 600))
      WebCore::MediaPlayerPrivateWebM::reenqueSamples((int8x8_t *)this, *((_QWORD *)this + 74));
  }
  *((_BYTE *)this + 640) = 1;
  if (!*((_BYTE *)this + 776) && *((_DWORD *)this + 196) == 2)
  {
    v5 = *((double *)this + 73);
    *(float *)&v5 = v5;
    objc_msgSend(*((id *)this + 14), "setRate:", v5);
    *(_QWORD *)&v16 = WebCore::MediaPlayerPrivateWebM::currentTime((id *)this);
    *((_QWORD *)&v16 + 1) = v6;
    v19 = *(_OWORD *)((char *)this + 568);
    v7 = WTF::MediaTime::compare((WTF::MediaTime *)&v16, (const WTF::MediaTime *)&v19);
    if ((v7 & 0x80000000) == 0)
    {
      v8 = (WTF::MediaTime *)WTF::MediaTime::zeroTime((WTF::MediaTime *)v7);
      v9 = (WTF::MediaTime *)WTF::MediaTime::zeroTime(v8);
      v10 = (WTF::MonotonicTime *)WTF::MediaTime::zeroTime(v9);
      v16 = *(_OWORD *)v8;
      v17 = *(_OWORD *)v9;
      v18 = *(_OWORD *)v10;
      v11 = *((_QWORD *)this + 46);
      v12 = *((_QWORD *)this + 47);
      *(_QWORD *)&v19 = "MediaPlayerPrivateWebM";
      *((_QWORD *)&v19 + 1) = 23;
      v20 = "seekToTarget";
      v21 = v12;
      if (*(_BYTE *)(v11 + 12))
        v10 = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [8],WTF::MediaTime,char [23],WTF::MediaTime,char [23],WTF::MediaTime>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v19, "time = ", (WTF::MediaTime *)&v16, ", negativeThreshold = ", (WTF::MediaTime *)&v17, ", positiveThreshold = ", (WTF::MediaTime *)&v18);
      v13 = *((unsigned __int8 *)this + 776);
      v14 = v17;
      *(_OWORD *)((char *)this + 728) = v16;
      *(_OWORD *)((char *)this + 744) = v14;
      *(_OWORD *)((char *)this + 760) = v18;
      if (!v13)
        *((_BYTE *)this + 776) = 1;
      if ((*((_QWORD *)this + 86) & 0xFFFFFFFFFFFFLL) != 0
        && *(double *)((*((_QWORD *)this + 86) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
      {
        v10 = (WTF::MonotonicTime *)WebCore::TimerBase::stopSlowCase((WebCore::MediaPlayerPrivateWebM *)((char *)this + 656));
      }
      *((_QWORD *)this + 85) = 0;
      WTF::MonotonicTime::now(v10);
      WebCore::TimerBase::setNextFireTime((uint64_t)this + 656, v15 + 0.0);
    }
  }
}

uint64_t WebCore::MediaPlayerPrivateWebM::currentTime(id *this)
{
  PAL *v2;
  OpaqueCMTimebase *v3;
  WTF::MediaTime *v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  _BOOL4 v9;
  char v10;
  BOOL v11;
  uint64_t v12;
  const WTF::MediaTime *v13;
  const WTF::MediaTime *v14;
  __int128 *v15;
  WTF::MediaTime *v16;
  uint64_t v18;
  unsigned int v19;
  int v20;
  _QWORD v21[2];
  __int128 v22;

  v2 = (PAL *)objc_msgSend(this[14], "timebase");
  v4 = (WTF::MediaTime *)PAL::softLinkCoreMediaCMTimebaseGetTime[0](v2, v3);
  v5 = v19;
  v6 = v20 & 1;
  if ((~v20 & 3) == 0)
    v6 = v20 & 1 | 2;
  if ((~v20 & 5) == 0)
    v6 |= 4u;
  if ((~v20 & 9) == 0)
    v6 |= 8u;
  if ((~v20 & 0x11) != 0)
    v7 = v6;
  else
    v7 = v6 | 0x10;
  v9 = (v7 & 1) == 0 || v19 != 0;
  if (v18 >= 0)
    v10 = 5;
  else
    v10 = 9;
  v11 = !v9;
  if (v9)
  {
    v12 = v18;
  }
  else
  {
    v7 = v10;
    v12 = v18 >> 63;
  }
  if (v11)
    v5 = 1;
  v21[0] = v12;
  v21[1] = v5 | ((unint64_t)v7 << 32);
  if ((*((_BYTE *)this + 724) & 0x1D) != 1
    || (v13 = (const WTF::MediaTime *)(this + 89),
        v4 = (WTF::MediaTime *)WTF::MediaTime::compare((WTF::MediaTime *)v21, v13),
        (_DWORD)v4 != -1))
  {
    v13 = (const WTF::MediaTime *)v21;
  }
  v22 = *(_OWORD *)v13;
  v14 = (const WTF::MediaTime *)WTF::MediaTime::zeroTime(v4);
  v15 = &v22;
  v16 = (WTF::MediaTime *)WTF::MediaTime::compare((WTF::MediaTime *)&v22, v14);
  if ((_DWORD)v16 == -1)
    v15 = (__int128 *)WTF::MediaTime::zeroTime(v16);
  return *(_QWORD *)v15;
}

uint64_t WebCore::MediaPlayerPrivateWebM::duration(WebCore::MediaPlayerPrivateWebM *this)
{
  return *((_QWORD *)this + 71);
}

uint64_t WebCore::MediaPlayerPrivateWebM::seekToTarget(WebCore::MediaPlayerPrivateWebM *this, const WebCore::SeekTarget *a2)
{
  WebCore::MediaPlayerPrivateWebM *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  __int128 v7;
  __int128 v8;
  double v9;
  _QWORD v11[4];

  v3 = this;
  v4 = *((_QWORD *)this + 46);
  v5 = *((_QWORD *)this + 47);
  v11[0] = "MediaPlayerPrivateWebM";
  v11[1] = 23;
  v11[2] = "seekToTarget";
  v11[3] = v5;
  if (*(_BYTE *)(v4 + 12))
    this = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [8],WTF::MediaTime,char [23],WTF::MediaTime,char [23],WTF::MediaTime>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v11, "time = ", a2, ", negativeThreshold = ", (const WebCore::SeekTarget *)((char *)a2 + 16), ", positiveThreshold = ", (const WebCore::SeekTarget *)((char *)a2 + 32));
  v6 = *((unsigned __int8 *)v3 + 776);
  v8 = *((_OWORD *)a2 + 1);
  v7 = *((_OWORD *)a2 + 2);
  *(_OWORD *)((char *)v3 + 728) = *(_OWORD *)a2;
  *(_OWORD *)((char *)v3 + 744) = v8;
  *(_OWORD *)((char *)v3 + 760) = v7;
  if (!v6)
    *((_BYTE *)v3 + 776) = 1;
  if ((*((_QWORD *)v3 + 86) & 0xFFFFFFFFFFFFLL) != 0
    && *(double *)((*((_QWORD *)v3 + 86) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
  {
    this = (WebCore::MediaPlayerPrivateWebM *)WebCore::TimerBase::stopSlowCase((WebCore::MediaPlayerPrivateWebM *)((char *)v3 + 656));
  }
  *((_QWORD *)v3 + 85) = 0;
  WTF::MonotonicTime::now(this);
  return WebCore::TimerBase::setNextFireTime((uint64_t)v3 + 656, v9 + 0.0);
}

uint64_t WebCore::MediaPlayerPrivateWebM::pause(WebCore::MediaPlayerPrivateWebM *this, double a2)
{
  *((_BYTE *)this + 640) = 0;
  LODWORD(a2) = 0;
  return objc_msgSend(*((id *)this + 14), "setRate:", a2);
}

BOOL WebCore::MediaPlayerPrivateWebM::paused(WebCore::MediaPlayerPrivateWebM *this)
{
  return *((_BYTE *)this + 640) == 0;
}

BOOL WebCore::MediaPlayerPrivateWebM::timeIsProgressing(WebCore::MediaPlayerPrivateWebM *this)
{
  float v1;

  if (!*((_BYTE *)this + 640))
    return 0;
  objc_msgSend(*((id *)this + 14), "rate");
  return v1 != 0.0;
}

uint64_t WebCore::MediaPlayerPrivateWebM::setPageIsVisible(uint64_t this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[4];
  char v6;

  v6 = a2;
  if (*(unsigned __int8 *)(this + 620) != a2)
  {
    v2 = this;
    v3 = *(_QWORD *)(this + 368);
    v4 = *(_QWORD *)(this + 376);
    v5[0] = "MediaPlayerPrivateWebM";
    v5[1] = 23;
    v5[2] = "setPageIsVisible";
    v5[3] = v4;
    if (*(_BYTE *)(v3 + 12))
    {
      this = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v5);
      LOBYTE(a2) = v6;
    }
    *(_BYTE *)(v2 + 620) = a2;
  }
  return this;
}

uint64_t WebCore::MediaPlayerPrivateWebM::hasVideo(WebCore::MediaPlayerPrivateWebM *this)
{
  return *((unsigned __int8 *)this + 618);
}

BOOL WebCore::MediaPlayerPrivateWebM::seeking(WebCore::MediaPlayerPrivateWebM *this)
{
  return *((_BYTE *)this + 776) || *((_DWORD *)this + 196) != 2;
}

unsigned __int8 *WebCore::MediaPlayerPrivateWebM::setRateDouble(unsigned __int8 *this, double a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v6;

  if (*((double *)this + 73) != a2)
  {
    v2 = (uint64_t)this;
    if (a2 < 0.0)
      a2 = 0.0;
    *((double *)this + 73) = a2;
    if (this[640] && !this[776] && *((_DWORD *)this + 196) == 2)
    {
      *(float *)&a2 = a2;
      this = (unsigned __int8 *)objc_msgSend(*((id *)this + 14), "setRate:", a2);
    }
    v3 = *(_QWORD *)(v2 + 96);
    if (v3)
    {
      v4 = *(_QWORD *)(v2 + 104);
      if (__ldaxr((unsigned __int8 *)v3))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v3))
      {
        goto LABEL_14;
      }
      this = (unsigned __int8 *)MEMORY[0x19AEA534C](v3);
LABEL_14:
      if (*(_QWORD *)(v3 + 24))
        ++*(_QWORD *)(v3 + 8);
      else
        v4 = 0;
      v6 = __ldxr((unsigned __int8 *)v3);
      if (v6 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v3))
        {
LABEL_22:
          if (v4)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v4 + 8) + 8) + 72))(*(_QWORD *)(*(_QWORD *)(v4 + 8) + 8));
            return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v4);
          }
          return this;
        }
      }
      else
      {
        __clrex();
      }
      this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v3);
      goto LABEL_22;
    }
  }
  return this;
}

uint64_t WebCore::MediaPlayerPrivateWebM::effectiveRate(id *this)
{
  PAL *v1;

  v1 = (PAL *)objc_msgSend(this[14], "timebase");
  return PAL::softLinkCoreMediaCMTimebaseGetRate(v1, (OpaqueCMTimebase *)PAL::softLinkCoreMediaCMTimebaseGetRate);
}

uint64_t WebCore::MediaPlayerPrivateWebM::setVolume(uint64_t this, double a2)
{
  uint64_t **v2;
  int v3;

  v2 = *(uint64_t ***)(this + 304);
  if (v2)
  {
    v3 = LODWORD(a2);
    do
    {
      LODWORD(a2) = v3;
      this = objc_msgSend(v2[3], "setVolume:", a2);
      v2 = (uint64_t **)*v2;
    }
    while (v2);
  }
  return this;
}

uint64_t WebCore::MediaPlayerPrivateWebM::setMuted(uint64_t this, uint64_t a2)
{
  uint64_t **i;

  for (i = *(uint64_t ***)(this + 304); i; i = (uint64_t **)*i)
    this = objc_msgSend(i[3], "setMuted:", a2);
  return this;
}

uint64_t WebCore::MediaPlayerPrivateWebM::buffered(WebCore::MediaPlayerPrivateWebM *this)
{
  return (uint64_t)this + 240;
}

unsigned __int8 *WebCore::MediaPlayerPrivateWebM::setBufferedRanges(unsigned __int8 *result, uint64_t a2)
{
  unsigned __int8 *v3;
  unint64_t v4;
  uint64_t v5;
  const WTF::MediaTime *v6;
  const WTF::MediaTime *v7;
  WTF::MediaTime *v8;
  uint64_t v9;
  unint64_t v10;
  const WTF::MediaTime *v11;
  uint64_t v12;
  uint64_t v13;
  int v15;

  v3 = result;
  v4 = *((unsigned int *)result + 63);
  if ((_DWORD)v4 == *(_DWORD *)(a2 + 12))
  {
    if (!(_DWORD)v4)
      return result;
    v5 = *((_QWORD *)result + 30);
    v6 = *(const WTF::MediaTime **)a2;
    if (!WTF::MediaTime::compare((WTF::MediaTime *)v5, *(const WTF::MediaTime **)a2))
    {
      result = (unsigned __int8 *)WTF::MediaTime::compare((WTF::MediaTime *)(v5 + 16), (const WTF::MediaTime *)((char *)v6 + 16));
      if (!(_DWORD)result)
      {
        v7 = (const WTF::MediaTime *)((char *)v6 + 48);
        v8 = (WTF::MediaTime *)(v5 + 48);
        v9 = 1;
        do
        {
          v10 = v9;
          if (v4 == v9)
            break;
          result = (unsigned __int8 *)WTF::MediaTime::compare((WTF::MediaTime *)((char *)v8 - 16), (const WTF::MediaTime *)((char *)v7 - 16));
          if ((_DWORD)result)
            break;
          result = (unsigned __int8 *)WTF::MediaTime::compare(v8, v7);
          v9 = v10 + 1;
          v7 = (const WTF::MediaTime *)((char *)v7 + 32);
          v8 = (WTF::MediaTime *)((char *)v8 + 32);
        }
        while (!(_DWORD)result);
        if (v10 >= v4)
          return result;
      }
    }
  }
  result = (unsigned __int8 *)*((_QWORD *)v3 + 30);
  if (result)
  {
    *((_QWORD *)v3 + 30) = 0;
    *((_DWORD *)v3 + 62) = 0;
    result = (unsigned __int8 *)WTF::fastFree((WTF *)result, (void *)a2);
  }
  v11 = *(const WTF::MediaTime **)a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)v3 + 30) = v11;
  LODWORD(v11) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  *((_DWORD *)v3 + 62) = (_DWORD)v11;
  LODWORD(v11) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *((_DWORD *)v3 + 63) = (_DWORD)v11;
  v12 = *((_QWORD *)v3 + 12);
  if (!v12)
    return result;
  v13 = *((_QWORD *)v3 + 13);
  if (__ldaxr((unsigned __int8 *)v12))
  {
    __clrex();
LABEL_16:
    result = (unsigned __int8 *)MEMORY[0x19AEA534C](v12);
    goto LABEL_17;
  }
  if (__stxr(1u, (unsigned __int8 *)v12))
    goto LABEL_16;
LABEL_17:
  if (*(_QWORD *)(v12 + 24))
    ++*(_QWORD *)(v12 + 8);
  else
    v13 = 0;
  v15 = __ldxr((unsigned __int8 *)v12);
  if (v15 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v12))
    {
      if (!v13)
        return result;
      goto LABEL_23;
    }
  }
  else
  {
    __clrex();
  }
  result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v12);
  if (v13)
  {
LABEL_23:
    (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v13 + 8) + 8) + 552))(*(_QWORD *)(*(_QWORD *)(v13 + 8) + 8));
    (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v13 + 8) + 8) + 560))(*(_QWORD *)(*(_QWORD *)(v13 + 8) + 8));
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v13);
  }
  return result;
}

void WebCore::MediaPlayerPrivateWebM::setDuration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  int v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v15;
  int v16;
  WTF::Lock *v18;
  int v19;
  char v20;
  const void *v21;
  void *v22;
  const void *v23;
  const void *v24;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v32;
  WTF::Lock *v33;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _QWORD v43[4];
  WTF::Lock *v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  _BYTE v52[12];
  unsigned int v53;
  __int128 v54;
  _QWORD v55[2];

  v55[1] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v54 = a2;
  *((_QWORD *)&v54 + 1) = a3;
  v4 = (_QWORD *)(a1 + 568);
  if (WTF::MediaTime::compare((WTF::MediaTime *)&v54, (const WTF::MediaTime *)(a1 + 568)))
  {
    v5 = *(_QWORD *)(a1 + 120);
    if (v5)
      objc_msgSend(*(id *)(a1 + 112), "removeTimeObserver:");
    v6 = (void *)MEMORY[0x1E0CB3B18];
    if ((BYTE12(v54) & 0x20) != 0)
    {
      WTF::MediaTime::toDouble((WTF::MediaTime *)&v54);
      PAL::softLinkCoreMediaCMTimeMakeWithSeconds((PAL *)DWORD2(v54), v8, v7);
    }
    else
    {
      PAL::softLinkCoreMediaCMTimeMake((PAL *)v54, DWORD2(v54), v5);
    }
    v53 = v53 & 0xFFFFFFFE | BYTE12(v54) & 1 | BYTE12(v54) & 0xE;
    v55[0] = objc_msgSend(v6, "valueWithCMTime:", v52);
    v9 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v55, 1);
    *(_QWORD *)&v50 = "MediaPlayerPrivateWebM";
    *((_QWORD *)&v50 + 1) = 23;
    v11 = *(_QWORD *)(a1 + 368);
    v10 = *(_QWORD *)(a1 + 376);
    *(_QWORD *)&v51 = "setDuration";
    *((_QWORD *)&v51 + 1) = v10;
    if (*(_BYTE *)(v11 + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 4u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WTF::MediaTime>((uint64_t)&WebCore::LogMedia, 4u, (WTF::Logger::LogSiteIdentifier *)&v50, (WTF::MediaTime *)&v54);
    v12 = *(void **)(a1 + 112);
    v43[0] = MEMORY[0x1E0C809B0];
    v43[1] = 3321888768;
    v43[2] = ___ZN7WebCore22MediaPlayerPrivateWebM11setDurationEN3WTF9MediaTimeE_block_invoke;
    v43[3] = &__block_descriptor_104_e8_32c74_ZTSKZN7WebCore22MediaPlayerPrivateWebM11setDurationEN3WTF9MediaTimeEE3__0_e5_v8__0l;
    v13 = *(_QWORD *)(a1 + 56);
    if (!v13)
    {
      v15 = 0;
      v18 = 0;
      *(_QWORD *)&v40 = v54;
      *(_QWORD *)((char *)&v40 + 5) = *(_QWORD *)((char *)&v54 + 5);
      v41 = v50;
      v42 = v51;
      goto LABEL_94;
    }
    if (__ldaxr((unsigned __int8 *)v13))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v13))
    {
      goto LABEL_16;
    }
    MEMORY[0x19AEA534C](v13);
LABEL_16:
    if (*(_QWORD *)(v13 + 24))
    {
      ++*(_QWORD *)(v13 + 16);
      v15 = v13;
    }
    else
    {
      v15 = 0;
    }
    v16 = __ldxr((unsigned __int8 *)v13);
    if (v16 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v13))
        goto LABEL_23;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v13);
LABEL_23:
    *(_QWORD *)&v40 = v54;
    *(_QWORD *)((char *)&v40 + 5) = *(_QWORD *)((char *)&v54 + 5);
    v41 = v50;
    v42 = v51;
    if (v15)
    {
      if (__ldaxr((unsigned __int8 *)v15))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v15))
      {
        goto LABEL_28;
      }
      MEMORY[0x19AEA534C](v15);
LABEL_28:
      if (*(_QWORD *)(v15 + 24))
      {
        ++*(_QWORD *)(v15 + 16);
        v18 = (WTF::Lock *)v15;
      }
      else
      {
        v18 = 0;
      }
      v19 = __ldxr((unsigned __int8 *)v15);
      if (v19 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v15))
          goto LABEL_35;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v15);
LABEL_35:
      v20 = 0;
      goto LABEL_36;
    }
    v18 = 0;
LABEL_94:
    v20 = 1;
LABEL_36:
    v44 = v18;
    v45 = a1;
    v46 = v40;
    v47 = v41;
    v48 = v42;
    v49 = a1;
    v21 = (const void *)objc_msgSend(v12, "addBoundaryTimeObserverForTimes:queue:usingBlock:", v9, MEMORY[0x1E0C80D38], v43, v40);
    v23 = v21;
    if (v21)
      CFRetain(v21);
    v24 = *(const void **)(a1 + 120);
    *(_QWORD *)(a1 + 120) = v23;
    if (v24)
    {
      CFRelease(v24);
      if ((v20 & 1) != 0)
        goto LABEL_54;
    }
    else if ((v20 & 1) != 0)
    {
      goto LABEL_54;
    }
    if (__ldaxr((unsigned __int8 *)v15))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v15))
    {
      goto LABEL_46;
    }
    MEMORY[0x19AEA534C](v15);
LABEL_46:
    v26 = *(_QWORD *)(v15 + 16) - 1;
    *(_QWORD *)(v15 + 16) = v26;
    if (v26)
    {
      v38 = __ldxr((unsigned __int8 *)v15);
      if (v38 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v15))
        {
LABEL_54:
          *v4 = v54;
          *(_QWORD *)((char *)v4 + 5) = *(_QWORD *)((char *)&v54 + 5);
          v29 = *(_QWORD *)(a1 + 96);
          if (!v29)
            goto LABEL_66;
          v30 = *(_QWORD *)(a1 + 104);
          if (__ldaxr((unsigned __int8 *)v29))
          {
            __clrex();
          }
          else if (!__stxr(1u, (unsigned __int8 *)v29))
          {
            goto LABEL_59;
          }
          MEMORY[0x19AEA534C](v29);
LABEL_59:
          if (*(_QWORD *)(v29 + 24))
            ++*(_QWORD *)(v29 + 8);
          else
            v30 = 0;
          v32 = __ldxr((unsigned __int8 *)v29);
          if (v32 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v29))
            {
              if (!v30)
                goto LABEL_66;
              goto LABEL_65;
            }
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v29);
          if (!v30)
          {
LABEL_66:
            v33 = v44;
            v44 = 0;
            if (!v33)
              return;
            if (__ldaxr((unsigned __int8 *)v33))
            {
              __clrex();
            }
            else if (!__stxr(1u, (unsigned __int8 *)v33))
            {
              goto LABEL_71;
            }
            MEMORY[0x19AEA534C](v33);
LABEL_71:
            v35 = *((_QWORD *)v33 + 2) - 1;
            *((_QWORD *)v33 + 2) = v35;
            if (!v35)
            {
              v36 = *((_QWORD *)v33 + 1);
              v37 = __ldxr((unsigned __int8 *)v33);
              if (v37 == 1)
              {
                if (!__stlxr(0, (unsigned __int8 *)v33))
                {
                  if (v36)
                    return;
LABEL_78:
                  WTF::fastFree(v33, v22);
                  return;
                }
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow(v33);
              if (v36)
                return;
              goto LABEL_78;
            }
            v39 = __ldxr((unsigned __int8 *)v33);
            if (v39 == 1)
            {
              if (!__stlxr(0, (unsigned __int8 *)v33))
                return;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(v33);
            return;
          }
LABEL_65:
          (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v30 + 8) + 8) + 64))(*(_QWORD *)(*(_QWORD *)(v30 + 8) + 8));
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v30);
          goto LABEL_66;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v15);
      goto LABEL_54;
    }
    v27 = *(_QWORD *)(v15 + 8);
    v28 = __ldxr((unsigned __int8 *)v15);
    if (v28 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v15))
      {
        if (v27)
          goto LABEL_54;
LABEL_53:
        WTF::fastFree((WTF *)v15, v22);
        goto LABEL_54;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v15);
    if (v27)
      goto LABEL_54;
    goto LABEL_53;
  }
}

void sub_1947A67A0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF::Lock *a19)
{
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;

  if (!a19)
LABEL_20:
    _Unwind_Resume(exception_object);
  if (__ldaxr((unsigned __int8 *)a19))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)a19))
  {
LABEL_7:
    v21 = *((_QWORD *)a19 + 2) - 1;
    *((_QWORD *)a19 + 2) = v21;
    if (v21)
    {
      v24 = __ldxr((unsigned __int8 *)a19);
      if (v24 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)a19))
          goto LABEL_20;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow(a19);
      goto LABEL_20;
    }
    v22 = *((_QWORD *)a19 + 1);
    v23 = __ldxr((unsigned __int8 *)a19);
    if (v23 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)a19))
      {
LABEL_13:
        if (!v22)
          WTF::fastFree(a19, a2);
        goto LABEL_20;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow(a19);
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](a19);
  goto LABEL_7;
}

uint64_t WebCore::MediaPlayerPrivateWebM::didLoadingProgress(WebCore::MediaPlayerPrivateWebM *this)
{
  uint64_t v1;

  v1 = *((unsigned __int8 *)this + 621);
  *((_BYTE *)this + 621) = 0;
  return v1;
}

void WebCore::MediaPlayerPrivateWebM::nativeImageForCurrentTime(WebCore **this@<X0>, WebCore **a2@<X8>)
{
  WebCore *v4;
  uint64_t v5;
  int v7;

  WebCore::MediaPlayerPrivateWebM::updateLastImage(this);
  v4 = this[17];
  if (!v4)
    goto LABEL_11;
  v5 = *((_QWORD *)v4 + 1);
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v5);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v5))
    goto LABEL_5;
LABEL_6:
  ++*(_QWORD *)(v5 + 8);
  v7 = __ldxr((unsigned __int8 *)v5);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v5))
      goto LABEL_11;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v5);
LABEL_11:
  *a2 = v4;
}

void WebCore::MediaPlayerPrivateWebM::updateLastImage(WebCore **this)
{
  WebCore *v2;
  WebCore::PixelBufferConformerCV *v3;
  uint64_t v4;
  void *v5;
  const void *v6;
  WTF *v7;
  const void *v8;
  uint64_t IdentifierInternal;
  void *v10;
  CGImage *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  WebCore *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  int v22;
  uint64_t v23;
  CGImageRef image;
  uint64_t v25;
  _QWORD v26[2];

  v26[1] = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 400))
  {
    if (!WebCore::MediaPlayerPrivateWebM::updateLastPixelBuffer((WebCore::MediaPlayerPrivateWebM *)this))
      return;
LABEL_6:
    v3 = this[18];
    if (!v3)
    {
      if (WebCore::get_CoreVideo_kCVPixelBufferPixelFormatTypeKey(void)::once != -1)
        dispatch_once(&WebCore::get_CoreVideo_kCVPixelBufferPixelFormatTypeKey(void)::once, &__block_literal_global_13_3);
      v25 = WebCore::get_CoreVideo_kCVPixelBufferPixelFormatTypeKey(void)::constantCoreVideokCVPixelBufferPixelFormatTypeKey;
      v26[0] = &unk_1E349D708;
      v4 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v26, &v25, 1);
      v3 = (WebCore::PixelBufferConformerCV *)WTF::fastMalloc((WTF *)8);
      *(_QWORD *)v3 = 0;
      image = 0;
      WebCore::softLinkVideoToolboxVTPixelBufferConformerCreateWithAttributes(*MEMORY[0x1E0C9AE00], v4, &image);
      v6 = *(const void **)v3;
      *(_QWORD *)v3 = image;
      if (v6)
        CFRelease(v6);
      v7 = this[18];
      this[18] = v3;
      if (v7)
      {
        v8 = *(const void **)v7;
        *(_QWORD *)v7 = 0;
        if (v8)
          CFRelease(v8);
        WTF::fastFree(v7, v5);
        v3 = this[18];
      }
    }
    WebCore::PixelBufferConformerCV::createImageFromPixelBuffer(v3, this[16], &image);
    if (WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::m_generationProtected)
    {
      __break(0xC471u);
      JUMPOUT(0x1947A6CE4);
    }
    IdentifierInternal = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
    v11 = image;
    if (image)
    {
      v12 = IdentifierInternal;
      if (CGImageGetWidth(image) >> 31 || CGImageGetHeight(v11) >> 31)
      {
        v11 = 0;
      }
      else
      {
        v13 = (_QWORD *)operator new();
        image = 0;
        *v13 = &off_1E340E810;
        v13[1] = v11;
        v11 = (CGImage *)WTF::fastMalloc((WTF *)0x38);
        v14 = WTF::fastMalloc((WTF *)0x20);
        *(_BYTE *)v14 = 0;
        *(_OWORD *)(v14 + 8) = xmmword_19689B170;
        *(_QWORD *)(v14 + 24) = v11;
        *((_QWORD *)v11 + 2) = 0;
        *((_QWORD *)v11 + 3) = 0;
        *((_QWORD *)v11 + 4) = v12;
        *((_QWORD *)v11 + 5) = 1;
        *(_QWORD *)v11 = off_1E340E858;
        *((_QWORD *)v11 + 1) = v14;
        *((_QWORD *)v11 + 6) = v13;
      }
    }
    v15 = this[17];
    this[17] = v11;
    if (!v15)
      goto LABEL_37;
    v16 = *((_QWORD *)v15 + 1);
    if (__ldaxr((unsigned __int8 *)v16))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v16))
    {
      goto LABEL_25;
    }
    MEMORY[0x19AEA534C](v16);
LABEL_25:
    v18 = *(_QWORD *)(v16 + 8);
    v19 = v18 - 1;
    *(_QWORD *)(v16 + 8) = v18 - 1;
    if (v18 == 1)
    {
      v23 = *(_QWORD *)(v16 + 16);
      v20 = *(_QWORD *)(v16 + 24);
      *(_QWORD *)(v16 + 24) = 0;
      v21 = v23 != 0;
    }
    else
    {
      v20 = 0;
      v21 = 1;
    }
    v22 = __ldxr((unsigned __int8 *)v16);
    if (v22 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v16))
      {
        if (!v19)
          goto LABEL_33;
        goto LABEL_37;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v16);
    if (!v19)
    {
LABEL_33:
      if (v20)
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
      if (!v21)
        WTF::fastFree((WTF *)v16, v10);
    }
LABEL_37:
    if (image)
      CFRelease(image);
    return;
  }
  if (this[16])
  {
    v2 = this[65];
    if (v2 != this[64])
    {
      this[64] = v2;
      goto LABEL_6;
    }
  }
}

void sub_1947A6D20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf)
{
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::MediaPlayerPrivateWebM::updateLastPixelBuffer(WebCore::MediaPlayerPrivateWebM *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const void *v7;
  const void *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __CVBuffer *v12;
  CFTypeRef v13;
  const void *v14;
  uint64_t IOSurface;
  CFTypeRef v16;
  CFTypeRef cf[2];
  const char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;

  v2 = *((_QWORD *)this + 32);
  if (!v2)
    goto LABEL_17;
  if ((byte_1ECE812EA & 1) == 0)
  {
    unk_1ECE812EC = 0;
    byte_1ECE812EA = 1;
    goto LABEL_4;
  }
  if (!byte_1ECE812ED)
  {
LABEL_4:
    unk_1ECE812EC = objc_msgSend((id)PAL::getAVSampleBufferDisplayLayerClass(this), "instancesRespondToSelector:", sel_copyDisplayedPixelBuffer) | 0x100;
    v2 = *((_QWORD *)this + 32);
  }
  if (WebCore::s_mediaSourceInlinePaintingEnabled)
  {
    v3 = objc_msgSend(*(id *)(v2 + 8), "copyDisplayedPixelBuffer");
    if (v3)
    {
      v4 = v3;
      v6 = *((_QWORD *)this + 46);
      v5 = *((_QWORD *)this + 47);
      v19 = "MediaPlayerPrivateWebM";
      v20 = 23;
      v21 = "updateLastPixelBuffer";
      v22 = v5;
      cf[0] = (CFTypeRef)WebCore::MediaPlayerPrivateWebM::currentTime((id *)this);
      cf[1] = v7;
      if (*(_BYTE *)(v6 + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 3u)
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [39],WTF::MediaTime>((uint64_t)&WebCore::LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)&v19, "displayed pixelbuffer copied for time ", (WTF::MediaTime *)cf);
      v8 = (const void *)*((_QWORD *)this + 16);
      *((_QWORD *)this + 16) = v4;
      if (v8)
        CFRelease(v8);
      return 1;
    }
    v2 = *((_QWORD *)this + 32);
  }
  if (v2)
    return 0;
LABEL_17:
  v9 = *((_QWORD *)this + 19);
  if (v9)
  {
    v10 = 2 * (*((_QWORD *)this + 16) == 0);
    v19 = (const char *)WebCore::MediaPlayerPrivateWebM::currentTime((id *)this);
    v20 = v11;
    WebCore::WebCoreDecompressionSession::imageForTime(v9, (opaqueCMBufferQueue *)&v19, v10, cf);
    v13 = cf[0];
    v9 = cf[0] != 0;
    if (cf[0])
    {
      cf[0] = 0;
      v14 = (const void *)*((_QWORD *)this + 16);
      *((_QWORD *)this + 16) = v13;
      if (v14)
        CFRelease(v14);
      if (*((_DWORD *)this + 132))
      {
        IOSurface = WebCore::softLinkCoreVideoCVPixelBufferGetIOSurface(*((WebCore **)this + 16), v12);
        if (IOSurface)
          WebCore::IOSurface::setOwnershipIdentity(IOSurface, (int *)this + 132);
      }
      v16 = cf[0];
      cf[0] = 0;
      if (v16)
        CFRelease(v16);
    }
  }
  return v9;
}

void sub_1947A6F1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void WebCore::MediaPlayerPrivateWebM::paintCurrentFrameInContext(WebCore **this, WebCore::GraphicsContext *a2, const WebCore::FloatRect *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  uint64_t v19;
  float32x2_t v20;
  float v21;
  float v22;

  if (((*(uint64_t (**)(WebCore::GraphicsContext *))(*(_QWORD *)a2 + 40))(a2) & 1) != 0)
    return;
  WebCore::MediaPlayerPrivateWebM::updateLastImage(this);
  v6 = (uint64_t)this[17];
  if (!v6)
    return;
  v7 = *(_QWORD *)(v6 + 8);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEA534C](v7);
LABEL_7:
  ++*(_QWORD *)(v7 + 8);
  v9 = __ldxr((unsigned __int8 *)v7);
  if (v9 != 1)
  {
    __clrex();
    goto LABEL_11;
  }
  if (__stlxr(0, (unsigned __int8 *)v7))
LABEL_11:
    WTF::Lock::unlockSlow((WTF::Lock *)v7);
  (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 96))(a2, 1);
  v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 48) + 24))(*(_QWORD *)(v6 + 48));
  v20 = 0;
  v21 = (float)(int)v10;
  v22 = (float)SHIDWORD(v10);
  WebCore::GraphicsContext::drawNativeImage(a2, v6, (uint64_t)a3, &v20, 4641);
  (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 104))(a2, 1);
  v12 = *(_QWORD *)(v6 + 8);
  if (__ldaxr((unsigned __int8 *)v12))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v12))
  {
    goto LABEL_16;
  }
  MEMORY[0x19AEA534C](v12);
LABEL_16:
  v14 = *(_QWORD *)(v12 + 8);
  v15 = v14 - 1;
  *(_QWORD *)(v12 + 8) = v14 - 1;
  if (v14 == 1)
  {
    v19 = *(_QWORD *)(v12 + 16);
    v16 = *(_QWORD *)(v12 + 24);
    *(_QWORD *)(v12 + 24) = 0;
    v17 = v19 != 0;
  }
  else
  {
    v16 = 0;
    v17 = 1;
  }
  v18 = __ldxr((unsigned __int8 *)v12);
  if (v18 != 1)
  {
    __clrex();
LABEL_23:
    WTF::Lock::unlockSlow((WTF::Lock *)v12);
    if (v15)
      return;
    goto LABEL_24;
  }
  if (__stlxr(0, (unsigned __int8 *)v12))
    goto LABEL_23;
  if (v15)
    return;
LABEL_24:
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (!v17)
    WTF::fastFree((WTF *)v12, v11);
}

void sub_1947A7104(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v11;

  v4 = *(_QWORD *)(v2 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
LABEL_6:
    v6 = *(_QWORD *)(v4 + 8);
    v7 = v6 - 1;
    *(_QWORD *)(v4 + 8) = v6 - 1;
    if (v6 == 1)
    {
      v11 = *(_QWORD *)(v4 + 16);
      v8 = *(_QWORD *)(v4 + 24);
      *(_QWORD *)(v4 + 24) = 0;
      v9 = v11 != 0;
    }
    else
    {
      v8 = 0;
      v9 = 1;
    }
    v10 = __ldxr((unsigned __int8 *)v4);
    if (v10 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v4))
      {
LABEL_13:
        if (!v7)
        {
          if (v8)
            (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
          if (!v9)
            WTF::fastFree((WTF *)v4, a2);
        }
        _Unwind_Resume(exception_object);
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v4);
  goto LABEL_6;
}

void WebCore::MediaPlayerPrivateWebM::videoFrameForCurrentTime(WebCore **this@<X0>, _QWORD *a2@<X8>)
{
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore *v8;
  WebCore *v9;
  WebCore *v10;
  uint64_t v11;
  double v12;
  int v13;

  if (!*((_BYTE *)this + 400))
  {
    if (this[67] && this[19])
    {
      WTF::MonotonicTime::now((WTF::MonotonicTime *)this);
      v12 = v4 + 0.1;
      v13 = 1;
      WTF::BinarySemaphore::waitUntil();
    }
    WebCore::MediaPlayerPrivateWebM::updateLastPixelBuffer((WebCore::MediaPlayerPrivateWebM *)this);
  }
  if (this[16])
  {
    v5 = WebCore::MediaPlayerPrivateWebM::currentTime((id *)this);
    v7 = v6;
    v8 = this[16];
    v10 = v8;
    if (v8)
      CFRetain(v8);
    LOBYTE(v12) = 0;
    LOBYTE(v13) = 0;
    WebCore::VideoFrameCV::create(v5, v7, 0, 0, &v10, (uint64_t)&v12, &v11);
    v9 = v10;
    *a2 = v11;
    if (v9)
      CFRelease(v9);
  }
  else
  {
    *a2 = 0;
  }
}

void sub_1947A728C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

CFTypeRef WebCore::MediaPlayerPrivateWebM::colorSpace@<X0>(WebCore **this@<X0>, _QWORD *a2@<X8>)
{
  WebCore *v4;
  CFTypeRef result;
  unint64_t v6;
  char v7;
  char **v8;
  char *v9;

  WebCore::MediaPlayerPrivateWebM::updateLastImage(this);
  v4 = this[17];
  if (v4)
    return (CFTypeRef)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v4 + 6) + 40))(*((_QWORD *)v4 + 6));
  v6 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
  if (v6 != -1)
  {
    v9 = &v7;
    v8 = &v9;
    std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v8, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
  }
  result = (CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
  *a2 = WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
  if (result)
    return CFRetain(result);
  return result;
}

uint64_t WebCore::MediaPlayerPrivateWebM::setHasAvailableVideoFrame(uint64_t this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v8;
  _QWORD v9[4];
  unsigned __int8 v10;

  v10 = a2;
  if (*(unsigned __int8 *)(this + 619) != a2)
  {
    v2 = this;
    v3 = *(_QWORD *)(this + 368);
    v4 = *(_QWORD *)(this + 376);
    v9[0] = "MediaPlayerPrivateWebM";
    v9[1] = 23;
    v9[2] = "setHasAvailableVideoFrame";
    v9[3] = v4;
    if (*(_BYTE *)(v3 + 12))
    {
      this = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v9);
      a2 = v10;
    }
    *(_BYTE *)(v2 + 619) = a2;
    if (a2)
    {
      v5 = *(_QWORD *)(v2 + 96);
      if (!v5)
      {
LABEL_20:
        if (*(_DWORD *)(v2 + 784) == 1)
          WebCore::MediaPlayerPrivateWebM::maybeCompleteSeek((unsigned __int8 *)v2);
        return WebCore::MediaPlayerPrivateWebM::setReadyState(v2, 4u);
      }
      v6 = *(_QWORD *)(v2 + 104);
      if (__ldaxr((unsigned __int8 *)v5))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v5))
      {
        goto LABEL_10;
      }
      MEMORY[0x19AEA534C](v5);
LABEL_10:
      if (*(_QWORD *)(v5 + 24))
        ++*(_QWORD *)(v5 + 8);
      else
        v6 = 0;
      v8 = __ldxr((unsigned __int8 *)v5);
      if (v8 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v5))
        {
LABEL_18:
          if (v6)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v6 + 8) + 8) + 120))(*(_QWORD *)(*(_QWORD *)(v6 + 8) + 8));
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v6);
          }
          goto LABEL_20;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v5);
      goto LABEL_18;
    }
  }
  return this;
}

void sub_1947A76D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WebMResourceClientParent,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v1 + 56));
  _Unwind_Resume(a1);
}

__n128 __copy_helper_block_e8_32c74_ZTSKZN7WebCore22MediaPlayerPrivateWebM11setDurationEN3WTF9MediaTimeEE3__0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  __n128 result;
  __int128 v10;
  __int128 v11;

  v4 = *(_QWORD *)(a2 + 32);
  if (!v4)
  {
    v6 = 0;
    goto LABEL_13;
  }
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v4);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v4))
    goto LABEL_5;
LABEL_6:
  if (*(_QWORD *)(v4 + 24))
  {
    ++*(_QWORD *)(v4 + 16);
    v6 = v4;
  }
  else
  {
    v6 = 0;
  }
  v7 = __ldxr((unsigned __int8 *)v4);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
      goto LABEL_13;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_13:
  v8 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v8;
  result = *(__n128 *)(a2 + 48);
  v10 = *(_OWORD *)(a2 + 64);
  v11 = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 64) = v10;
  *(_OWORD *)(a1 + 80) = v11;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t __destroy_helper_block_e8_32c74_ZTSKZN7WebCore22MediaPlayerPrivateWebM11setDurationEN3WTF9MediaTimeEE3__0(uint64_t result, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  if (!v2)
    return result;
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_6;
  }
  result = MEMORY[0x19AEA534C](v2);
LABEL_6:
  v4 = *(_QWORD *)(v2 + 16) - 1;
  *(_QWORD *)(v2 + 16) = v4;
  if (v4)
  {
    v7 = __ldxr((unsigned __int8 *)v2);
    if (v7 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v2))
        return result;
    }
    else
    {
      __clrex();
    }
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  v5 = *(_QWORD *)(v2 + 8);
  v6 = __ldxr((unsigned __int8 *)v2);
  if (v6 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v2))
    {
      if (!v5)
        return WTF::fastFree((WTF *)v2, a2);
      return result;
    }
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)v2);
  if (!v5)
    return WTF::fastFree((WTF *)v2, a2);
  return result;
}

BOOL WebCore::MediaPlayerPrivateWebM::shouldEnsureLayerOrVideoRenderer(WebCore::MediaPlayerPrivateWebM *this)
{
  WebCore::MediaPlayerPrivateWebM *v1;
  uint64_t v2;
  uint64_t v3;
  int v5;
  _BOOL8 v6;
  uint64_t v7;
  void *v8;
  void *v9;
  CGRect v12;

  v1 = this;
  v2 = *((_QWORD *)this + 12);
  if (!v2)
  {
    v3 = 0;
    goto LABEL_15;
  }
  v3 = *((_QWORD *)this + 13);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_7;
  }
  this = (WebCore::MediaPlayerPrivateWebM *)MEMORY[0x19AEA534C](v2);
LABEL_7:
  if (*(_QWORD *)(v2 + 24))
    ++*(_QWORD *)(v2 + 8);
  else
    v3 = 0;
  v5 = __ldxr((unsigned __int8 *)v2);
  if (v5 != 1)
  {
    __clrex();
    goto LABEL_14;
  }
  if (__stlxr(0, (unsigned __int8 *)v2))
LABEL_14:
    this = (WebCore::MediaPlayerPrivateWebM *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
LABEL_15:
  if ((byte_1ECE812EA & 1) == 0)
  {
    unk_1ECE812EC = 0;
    byte_1ECE812EA = 1;
    goto LABEL_17;
  }
  if (!byte_1ECE812ED)
  {
LABEL_17:
    this = (WebCore::MediaPlayerPrivateWebM *)objc_msgSend((id)PAL::getAVSampleBufferDisplayLayerClass(this), "instancesRespondToSelector:", sel_copyDisplayedPixelBuffer);
    unk_1ECE812EC = (unsigned __int16)this | 0x100;
  }
  v6 = WebCore::s_mediaSourceInlinePaintingEnabled != 0;
  if (WebCore::s_mediaSourceInlinePaintingEnabled)
  {
    v7 = *((_QWORD *)v1 + 32);
    if (!v7
      || ((v8 = *(void **)(v7 + 8), PAL::getAVSampleBufferDisplayLayerClass(this), (objc_opt_isKindOfClass() & 1) == 0)
        ? (v9 = 0)
        : (v9 = v8),
          objc_msgSend(v9, "bounds"),
          CGRectIsEmpty(v12)))
    {
      if (!v3)
        return 0;
      v6 = *(int *)(v3 + 200) > 0 && *(_DWORD *)(v3 + 204) > 0;
      goto LABEL_32;
    }
  }
  if (v3)
LABEL_32:
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v3);
  return v6;
}

void sub_1947A79E8(_Unwind_Exception *exception_object)
{
  unsigned __int8 **v1;

  if (v1)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v1);
  _Unwind_Resume(exception_object);
}

void WebCore::MediaPlayerPrivateWebM::setPresentationSize(WebCore::MediaPlayerPrivateWebM *this, const WebCore::IntSize *a2)
{
  BOOL v3;
  uint64_t v6;
  dispatch_source_s *v7;

  if (*((_BYTE *)this + 618))
  {
    if (*((_QWORD *)this + 32))
      v3 = 1;
    else
      v3 = *(_DWORD *)a2 < 1;
    if (!v3 && *((_DWORD *)a2 + 1) >= 1)
    {
      if (WebCore::MediaPlayerPrivateWebM::shouldEnsureLayerOrVideoRenderer(this))
      {
        WebCore::MediaPlayerPrivateWebM::destroyDecompressionSession(this, v6, v7);
        WebCore::MediaPlayerPrivateWebM::ensureLayerOrVideoRenderer(this);
      }
      else
      {
        WebCore::MediaPlayerPrivateWebM::destroyLayerOrVideoRenderer(this);
        WebCore::MediaPlayerPrivateWebM::ensureDecompressionSession(this);
      }
    }
  }
}

void WebCore::MediaPlayerPrivateWebM::acceleratedRenderingStateChanged(WebCore::MediaPlayerPrivateWebM *this)
{
  uint64_t v2;
  dispatch_source_s *v3;

  if (*((_BYTE *)this + 618))
  {
    if (WebCore::MediaPlayerPrivateWebM::shouldEnsureLayerOrVideoRenderer(this))
    {
      WebCore::MediaPlayerPrivateWebM::destroyDecompressionSession(this, v2, v3);
      WebCore::MediaPlayerPrivateWebM::ensureLayerOrVideoRenderer(this);
    }
    else
    {
      WebCore::MediaPlayerPrivateWebM::destroyLayerOrVideoRenderer(this);
      WebCore::MediaPlayerPrivateWebM::ensureDecompressionSession(this);
    }
  }
}

void WebCore::MediaPlayerPrivateWebM::ensureLayerOrVideoRenderer(PAL *a1)
{
  uint64_t v1;
  const void *v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  void *v5;
  const void *v6;
  PAL *v7;
  void *v8;
  uint64_t AVFoundation_AVLayerVideoGravityResizeAspect;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  NSObject *v22;
  uint64_t v23;
  void *v24;
  char *v25;
  unsigned __int8 *v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::Logger *v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::Logger *v40;
  uint64_t v41;
  WTF::StringImpl **v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  int v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  uint64_t v51;
  int v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  const void *v56;
  _QWORD v57[4];
  WTF::Logger *v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  __int128 buf;
  const char *v67;
  WTF::StringImpl *v68;
  int v69;
  WTF::StringImpl *v70;
  int v71;
  WTF::StringImpl *v72;
  uint64_t v73;

  v1 = (uint64_t)a1;
  v73 = *MEMORY[0x1E0C80C00];
  v2 = (const void *)*((_QWORD *)a1 + 34);
  if (v2)
    goto LABEL_28;
  v3 = *((_QWORD *)a1 + 46);
  v4 = (WTF::StringImpl *)*((_QWORD *)a1 + 47);
  *(_QWORD *)&buf = "MediaPlayerPrivateWebM";
  *((_QWORD *)&buf + 1) = 23;
  v67 = "ensureLayer";
  v68 = v4;
  if (*(_BYTE *)(v3 + 12))
    a1 = (PAL *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&buf);
  v5 = (void *)objc_msgSend(objc_alloc((Class)PAL::getAVSampleBufferDisplayLayerClass(a1)), "init");
  v6 = *(const void **)(v1 + 272);
  *(_QWORD *)(v1 + 272) = v5;
  if (v6)
  {
    CFRelease(v6);
    v5 = *(void **)(v1 + 272);
  }
  if (v5)
  {
    v7 = (PAL *)objc_msgSend(v5, "setName:", CFSTR("MediaPlayerPrivateWebM AVSampleBufferDisplayLayer"));
    v8 = *(void **)(v1 + 272);
    if (*(_BYTE *)(v1 + 88))
      AVFoundation_AVLayerVideoGravityResizeAspect = PAL::get_AVFoundation_AVLayerVideoGravityResizeAspect(v7);
    else
      AVFoundation_AVLayerVideoGravityResizeAspect = PAL::get_AVFoundation_AVLayerVideoGravityResize(v7);
    objc_msgSend(v8, "setVideoGravity:", AVFoundation_AVLayerVideoGravityResizeAspect);
    v10 = *(void **)(v1 + 272);
    objc_msgSend(v10, "setPreventsDisplaySleepDuringVideoPlayback:", 0);
    if ((objc_opt_respondsToSelector() & 1) != 0)
      objc_msgSend(v10, "setPreventsAutomaticBackgroundingDuringVideoPlayback:", 0);
    objc_msgSend(*(id *)(v1 + 112), "addRenderer:", v10);
    v11 = *(_QWORD *)(v1 + 96);
    if (v11)
    {
      v12 = *(_QWORD *)(v1 + 104);
      if (__ldaxr((unsigned __int8 *)v11))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v11))
      {
        goto LABEL_17;
      }
      MEMORY[0x19AEA534C](v11);
LABEL_17:
      if (*(_QWORD *)(v11 + 24))
        ++*(_QWORD *)(v11 + 8);
      else
        v12 = 0;
      v14 = __ldxr((unsigned __int8 *)v11);
      if (v14 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v11))
        {
          if (!v12)
            goto LABEL_27;
LABEL_26:
          WebCore::VideoLayerManagerObjC::setVideoLayer(*(_QWORD *)(v1 + 384), *(const void **)(v1 + 272), (float)*(int *)(v12 + 200), (float)*(int *)(v12 + 204));
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v12);
          goto LABEL_27;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v11);
      if (!v12)
        goto LABEL_27;
      goto LABEL_26;
    }
  }
LABEL_27:
  v2 = *(const void **)(v1 + 272);
  if (!v2)
  {
    v54 = *(_QWORD *)(v1 + 368);
    v55 = *(WTF::StringImpl **)(v1 + 376);
    *(_QWORD *)&buf = "MediaPlayerPrivateWebM";
    *((_QWORD *)&buf + 1) = 23;
    v67 = "ensureLayerOrVideoRenderer";
    v68 = v55;
    if (*(_BYTE *)(v54 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [75]>((uint64_t)&WebCore::LogMedia, 1u, (WTF::Logger::LogSiteIdentifier *)&buf, "Failed to create AVSampleBufferDisplayLayer or AVSampleBufferVideoRenderer");
    WebCore::MediaPlayerPrivateWebM::setNetworkState((unsigned __int8 *)v1, 6);
    return;
  }
LABEL_28:
  CFRetain(v2);
  v15 = *(_QWORD *)(v1 + 368);
  v16 = *(_QWORD *)(v1 + 376);
  v57[0] = "MediaPlayerPrivateWebM";
  v57[1] = 23;
  v57[2] = "ensureLayerOrVideoRenderer";
  v57[3] = v16;
  if (!*(_BYTE *)(v15 + 12))
    goto LABEL_102;
  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v57);
  WTF::String::number(0);
  WTF::String::String((WTF::String *)&v60, ", renderer=");
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v17 = (WTF::StringImpl *)buf;
  v58 = v61;
  v65 = v60;
  *(_QWORD *)&buf = v62;
  v64 = v17;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v58, (uint64_t *)&v65, (uint64_t *)&v64, &v63);
  if (v63)
  {
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v18);
      else
        *(_DWORD *)v17 -= 2;
    }
    v19 = v60;
    v60 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v18);
      else
        *(_DWORD *)v19 -= 2;
    }
    v20 = v61;
    v61 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v18);
      else
        *(_DWORD *)v20 -= 2;
    }
    v21 = v62;
    v62 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v18);
      else
        *(_DWORD *)v21 -= 2;
    }
    v22 = qword_1ECE7C4A0;
    v23 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v23)
    {
      WTF::String::utf8();
      v25 = v58 ? (char *)v58 + 16 : 0;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v25;
      _os_log_impl(&dword_1940B8000, v22, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      v23 = (uint64_t)v58;
      v58 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 1)
          v23 = WTF::fastFree((WTF *)v23, v24);
        else
          --*(_DWORD *)v23;
      }
    }
    if (WebCore::LogMedia)
    {
      v26 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v27 = *v26;
        if ((v27 & 1) != 0)
          break;
        v28 = __ldaxr(v26);
        if (v28 == v27)
        {
          if (!__stxr(v27 | 1, v26))
          {
            v56 = v2;
            v29 = WTF::Logger::observers((WTF::Logger *)v23);
            v30 = *(unsigned int *)(v29 + 12);
            if ((_DWORD)v30)
            {
              v31 = *(uint64_t **)v29;
              v32 = *(_QWORD *)v29 + 8 * v30;
              do
              {
                v33 = *v31;
                LODWORD(buf) = 0;
                WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v57);
                LODWORD(v67) = 0;
                WTF::String::number(0);
                v69 = 0;
                WTF::String::String((WTF::String *)&v70, ", renderer=");
                v71 = 0;
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v72 = v65;
                v58 = 0;
                v59 = 0;
                v34 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x40);
                LODWORD(v59) = 4;
                v58 = v34;
                v35 = HIDWORD(v59);
                *((_DWORD *)v34 + 4 * HIDWORD(v59)) = buf;
                v36 = *((_QWORD *)&buf + 1);
                if (*((_QWORD *)&buf + 1))
                  **((_DWORD **)&buf + 1) += 2;
                *((_QWORD *)v34 + 2 * v35 + 1) = v36;
                *((_DWORD *)v34 + 4 * (v35 + 1)) = (_DWORD)v67;
                v37 = v68;
                if (v68)
                  *(_DWORD *)v68 += 2;
                *((_QWORD *)v34 + 2 * (v35 + 1) + 1) = v37;
                *((_DWORD *)v34 + 4 * (v35 + 2)) = v69;
                v38 = v70;
                if (v70)
                  *(_DWORD *)v70 += 2;
                *((_QWORD *)v34 + 2 * (v35 + 2) + 1) = v38;
                *((_DWORD *)v34 + 4 * (v35 + 3)) = v71;
                v39 = v72;
                if (v72)
                  *(_DWORD *)v72 += 2;
                *((_QWORD *)v34 + 2 * (v35 + 3) + 1) = v39;
                HIDWORD(v59) = v35 + 4;
                (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v33 + 16))(v33, &WebCore::LogMedia, 0, &v58);
                v40 = v58;
                if (HIDWORD(v59))
                {
                  v41 = 16 * HIDWORD(v59);
                  v42 = (WTF::StringImpl **)((char *)v58 + 8);
                  do
                  {
                    v43 = *v42;
                    *v42 = 0;
                    if (v43)
                    {
                      if (*(_DWORD *)v43 == 2)
                        WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v24);
                      else
                        *(_DWORD *)v43 -= 2;
                    }
                    v42 += 2;
                    v41 -= 16;
                  }
                  while (v41);
                  v40 = v58;
                }
                if (v40)
                {
                  v58 = 0;
                  LODWORD(v59) = 0;
                  WTF::fastFree(v40, v24);
                }
                v44 = v72;
                v72 = 0;
                if (v44)
                {
                  if (*(_DWORD *)v44 == 2)
                    WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v24);
                  else
                    *(_DWORD *)v44 -= 2;
                }
                v45 = v70;
                v70 = 0;
                if (v45)
                {
                  if (*(_DWORD *)v45 == 2)
                    WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v24);
                  else
                    *(_DWORD *)v45 -= 2;
                }
                v46 = v68;
                v68 = 0;
                if (v46)
                {
                  if (*(_DWORD *)v46 == 2)
                    WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v24);
                  else
                    *(_DWORD *)v46 -= 2;
                }
                v47 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                *((_QWORD *)&buf + 1) = 0;
                if (v47)
                {
                  if (*(_DWORD *)v47 == 2)
                    WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v24);
                  else
                    *(_DWORD *)v47 -= 2;
                }
                ++v31;
              }
              while (v31 != (uint64_t *)v32);
            }
            v48 = __ldxr(v26);
            if (v48 == 1)
            {
              v2 = v56;
              if (!__stlxr(0, v26))
                break;
            }
            else
            {
              __clrex();
              v2 = v56;
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v49 = v63;
    v63 = 0;
    if (v49)
    {
      if (*(_DWORD *)v49 == 2)
        WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v24);
      else
        *(_DWORD *)v49 -= 2;
    }
LABEL_102:
    WebCore::MediaPlayerPrivateWebM::setVideoRenderer(v1, v2);
    v50 = *(_QWORD *)(v1 + 96);
    if (!v50)
      goto LABEL_117;
    v51 = *(_QWORD *)(v1 + 104);
    if (__ldaxr((unsigned __int8 *)v50))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v50))
    {
LABEL_107:
      if (*(_QWORD *)(v50 + 24))
        ++*(_QWORD *)(v50 + 8);
      else
        v51 = 0;
      v53 = __ldxr((unsigned __int8 *)v50);
      if (v53 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v50))
        {
          if (!v51)
            goto LABEL_117;
          goto LABEL_116;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v50);
      if (v51)
      {
LABEL_116:
        (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v51 + 8) + 8) + 144))(*(_QWORD *)(*(_QWORD *)(v51 + 8) + 8));
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v51);
      }
LABEL_117:
      CFRelease(v2);
      return;
    }
    MEMORY[0x19AEA534C](v50);
    goto LABEL_107;
  }
  __break(0xC471u);
}

void sub_1947A8290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef cf, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF *a17, int a18, int a19, WTF::StringImpl *a20,WTF::StringImpl *a21,uint64_t a22,WTF::StringImpl *a23,uint64_t a24,uint64_t a25,uint64_t a26,WTF::StringImpl *a27,uint64_t a28,WTF::StringImpl *a29,uint64_t a30,WTF::StringImpl *a31,uint64_t a32,WTF::StringImpl *a33)
{
  unsigned __int8 **v33;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v33);
  _Unwind_Resume(a1);
}

unsigned __int8 *WebCore::MediaPlayerPrivateWebM::destroyLayerOrVideoRenderer(WebCore::MediaPlayerPrivateWebM *this)
{
  unsigned __int8 *result;
  uint64_t v3;
  uint64_t v4;
  int v6;

  WebCore::MediaPlayerPrivateWebM::destroyLayer(this);
  WebCore::MediaPlayerPrivateWebM::setVideoRenderer((uint64_t)this, 0);
  result = (unsigned __int8 *)WebCore::MediaPlayerPrivateWebM::setHasAvailableVideoFrame((uint64_t)this, 0);
  v3 = *((_QWORD *)this + 12);
  if (!v3)
    return result;
  v4 = *((_QWORD *)this + 13);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
LABEL_5:
    result = (unsigned __int8 *)MEMORY[0x19AEA534C](v3);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v3))
    goto LABEL_5;
LABEL_6:
  if (*(_QWORD *)(v3 + 24))
    ++*(_QWORD *)(v3 + 8);
  else
    v4 = 0;
  v6 = __ldxr((unsigned __int8 *)v3);
  if (v6 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v4)
        return result;
      goto LABEL_12;
    }
  }
  else
  {
    __clrex();
  }
  result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (v4)
  {
LABEL_12:
    (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v4 + 8) + 8) + 144))(*(_QWORD *)(*(_QWORD *)(v4 + 8)
                                                                                                  + 8));
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v4);
  }
  return result;
}

void sub_1947A86A8(_Unwind_Exception *a1)
{
  unsigned __int8 **v1;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v1);
  _Unwind_Resume(a1);
}

void WebCore::MediaPlayerPrivateWebM::ensureDecompressionSession(WebCore::MediaPlayerPrivateWebM *this)
{
  void *v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  void *v6;
  unsigned __int8 **v7;
  unsigned __int8 *v8;
  uint64_t v10;
  uint64_t v11;
  WebCore::WebCoreDecompressionSession *v12;
  BOOL v13;
  int v14;
  WTF *v15;
  void *v16;
  WebCore::WebCoreDecompressionSession *v17;
  PAL *v18;
  dispatch_source_s *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  int v32;
  uint64_t v33;
  _QWORD *v34;
  _BYTE v35[4];

  if (*((_QWORD *)this + 19))
    return;
  v3 = WTF::fastMalloc((WTF *)3);
  *(_WORD *)v3 = 0;
  *(_BYTE *)(v3 + 2) = 0;
  v4 = (WTF *)*((_QWORD *)this + 67);
  *((_QWORD *)this + 67) = v3;
  if (v4)
    WTF::fastFree(v4, v2);
  v5 = WTF::fastMalloc((WTF *)0x110);
  WebCore::WebCoreDecompressionSession::WebCoreDecompressionSession(v5, 0);
  v7 = (unsigned __int8 **)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = v5;
  if (v7)
  {
    v8 = *v7;
    if (__ldaxr(*v7))
    {
      __clrex();
    }
    else if (!__stxr(1u, v8))
    {
      goto LABEL_10;
    }
    MEMORY[0x19AEA534C](v8);
LABEL_10:
    v10 = *((_QWORD *)v8 + 1);
    v11 = v10 - 1;
    *((_QWORD *)v8 + 1) = v10 - 1;
    if (v10 == 1)
    {
      v33 = *((_QWORD *)v8 + 2);
      v12 = (WebCore::WebCoreDecompressionSession *)*((_QWORD *)v8 + 3);
      *((_QWORD *)v8 + 3) = 0;
      v13 = v33 != 0;
    }
    else
    {
      v12 = 0;
      v13 = 1;
    }
    v14 = __ldxr(v8);
    if (v14 == 1)
    {
      if (!__stlxr(0, v8))
      {
        if (v11)
          goto LABEL_22;
LABEL_18:
        if (v12)
        {
          WebCore::WebCoreDecompressionSession::~WebCoreDecompressionSession(v12);
          WTF::fastFree(v15, v16);
        }
        if (!v13)
          WTF::fastFree((WTF *)v8, v6);
        goto LABEL_22;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v8);
    if (v11)
      goto LABEL_22;
    goto LABEL_18;
  }
LABEL_22:
  v17 = (WebCore::WebCoreDecompressionSession *)*((_QWORD *)this + 19);
  v18 = (PAL *)objc_msgSend(*((id *)this + 14), "timebase");
  WebCore::WebCoreDecompressionSession::setTimebase(v17, v18, v19);
  WTF::MachSendRight::MachSendRight((WTF::MachSendRight *)v35, (WebCore::MediaPlayerPrivateWebM *)((char *)this + 528));
  WTF::MachSendRight::operator=();
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v35);
  v20 = *((_QWORD *)this + 19);
  v21 = *((_QWORD *)this + 9);
  if (v21)
    goto LABEL_51;
  v21 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v21 = 1;
  *(_QWORD *)(v21 + 8) = (char *)this + 64;
  v23 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = v21;
  if (!v23)
    goto LABEL_51;
  do
  {
    v24 = __ldaxr(v23);
    v25 = v24 - 1;
  }
  while (__stlxr(v25, v23));
  if (!v25)
  {
    atomic_store(1u, v23);
    WTF::fastFree((WTF *)v23, v22);
  }
  v21 = *((_QWORD *)this + 9);
  if (v21)
  {
LABEL_51:
    do
      v26 = __ldaxr((unsigned int *)v21);
    while (__stlxr(v26 + 1, (unsigned int *)v21));
  }
  v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v27 = &off_1E3207120;
  v27[1] = v21;
  v27[2] = this;
  v34 = v27;
  WebCore::WebCoreDecompressionSession::requestMediaDataWhenReady(v20, (opaqueCMBufferQueue *)&v34);
  v28 = v34;
  v34 = 0;
  if (v28)
    (*(void (**)(_QWORD *))(*v28 + 8))(v28);
  WebCore::MediaPlayerPrivateWebM::registerNotifyWhenHasAvailableVideoFrame(this);
  if (*((_BYTE *)this + 600))
    WebCore::MediaPlayerPrivateWebM::reenqueSamples((int8x8_t *)this, *((_QWORD *)this + 74));
  v29 = *((_QWORD *)this + 12);
  if (v29)
  {
    v30 = *((_QWORD *)this + 13);
    if (__ldaxr((unsigned __int8 *)v29))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v29))
    {
      goto LABEL_38;
    }
    MEMORY[0x19AEA534C](v29);
LABEL_38:
    if (*(_QWORD *)(v29 + 24))
      ++*(_QWORD *)(v29 + 8);
    else
      v30 = 0;
    v32 = __ldxr((unsigned __int8 *)v29);
    if (v32 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v29))
      {
LABEL_46:
        if (v30)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v30 + 8) + 8) + 144))(*(_QWORD *)(*(_QWORD *)(v30 + 8) + 8));
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v30);
        }
        return;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v29);
    goto LABEL_46;
  }
}

void sub_1947A8978(_Unwind_Exception *a1)
{
  unsigned __int8 **v1;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v1);
  _Unwind_Resume(a1);
}

id WebCore::MediaPlayerPrivateWebM::createVideoFullscreenLayer@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = objc_alloc_init(MEMORY[0x1E0CD27A8]);
  *a1 = result;
  return result;
}

void WebCore::MediaPlayerPrivateWebM::setVideoFullscreenLayer(uint64_t a1, const void *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  CFTypeRef v9;
  CFTypeRef cf;

  WebCore::MediaPlayerPrivateWebM::updateLastImage((WebCore **)a1);
  v6 = *(_QWORD *)(a1 + 384);
  v7 = *(_QWORD *)(a1 + 136);
  if (v7)
  {
    v8 = *(const void **)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 48) + 16))(*(_QWORD *)(v7 + 48));
    cf = v8;
    if (v8)
      CFRetain(v8);
  }
  else
  {
    cf = 0;
  }
  WebCore::VideoLayerManagerObjC::setVideoFullscreenLayer(v6, a2, a3, &cf);
  v9 = cf;
  cf = 0;
  if (v9)
    CFRelease(v9);
}

void sub_1947A8AA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebCore::MediaPlayerPrivateWebM::setVideoFullscreenFrame(uint64_t a1, float a2, float a3, float a4, float a5)
{
  return WebCore::VideoLayerManagerObjC::setVideoFullscreenFrame(*(WTF::StringImpl **)(a1 + 384), a2, a3, a4, a5);
}

float *WebCore::MediaPlayerPrivateWebM::syncTextTrackBounds(float **this)
{
  return WebCore::VideoLayerManagerObjC::syncTextTrackBounds(this[48]);
}

uint64_t WebCore::MediaPlayerPrivateWebM::setTextTrackRepresentation(WebCore::MediaPlayerPrivateWebM *this, CALayer *a2)
{
  if (a2)
    a2 = (CALayer *)(*((uint64_t (**)(CALayer *))a2->super.isa + 3))(a2);
  return WebCore::VideoLayerManagerObjC::setTextTrackRepresentationLayer(*((_QWORD *)this + 48), a2);
}

void WebCore::MediaPlayerPrivateWebM::engineDescription(int **a1@<X8>)
{
  int *v2;
  int v3;

  if ((_MergedGlobals_102 & 1) == 0)
  {
    v2 = &WebCore::MediaPlayerPrivateWebM::engineDescription(void)::$_0::operator() const(void)::impl;
    v3 = WebCore::MediaPlayerPrivateWebM::engineDescription(void)::$_0::operator() const(void)::impl + 2;
    WebCore::MediaPlayerPrivateWebM::engineDescription(void)::$_0::operator() const(void)::impl += 2;
    qword_1ECE812F0 = (uint64_t)&WebCore::MediaPlayerPrivateWebM::engineDescription(void)::$_0::operator() const(void)::impl;
    _MergedGlobals_102 = 1;
    goto LABEL_4;
  }
  v2 = (int *)qword_1ECE812F0;
  if (qword_1ECE812F0)
  {
    v3 = WebCore::MediaPlayerPrivateWebM::engineDescription(void)::$_0::operator() const(void)::impl;
LABEL_4:
    *v2 = v3 + 2;
  }
  *a1 = v2;
}

_DWORD *WebCore::MediaPlayerPrivateWebM::setWirelessPlaybackTarget(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *result;
  _QWORD v8[4];

  v4 = a1[46];
  v5 = a1[47];
  v8[0] = "MediaPlayerPrivateWebM";
  v8[1] = 23;
  v8[2] = "setWirelessPlaybackTarget";
  v8[3] = v5;
  if (*(_BYTE *)(v4 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v8);
  v6 = *a2;
  *a2 = 0;
  result = (_DWORD *)a1[44];
  a1[44] = v6;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

unsigned __int8 *WebCore::MediaPlayerPrivateWebM::setShouldPlayToPlaybackTarget(unsigned __int8 *this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  char v19;

  v14 = a2;
  if (this[360] != a2)
  {
    v2 = (uint64_t)this;
    v3 = *((_QWORD *)this + 46);
    v4 = *((_QWORD *)this + 47);
    v15 = "MediaPlayerPrivateWebM";
    v16 = 23;
    v17 = "setShouldPlayToPlaybackTarget";
    v18 = v4;
    if (*(_BYTE *)(v3 + 12))
    {
      this = (unsigned __int8 *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v15);
      LOBYTE(a2) = v14;
    }
    *(_BYTE *)(v2 + 360) = a2;
    v5 = *(_QWORD *)(v2 + 96);
    if (v5)
    {
      v6 = *(_QWORD *)(v2 + 104);
      if (__ldaxr((unsigned __int8 *)v5))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v5))
      {
        goto LABEL_9;
      }
      this = (unsigned __int8 *)MEMORY[0x19AEA534C](v5);
LABEL_9:
      if (*(_QWORD *)(v5 + 24))
        ++*(_QWORD *)(v5 + 8);
      else
        v6 = 0;
      v8 = __ldxr((unsigned __int8 *)v5);
      if (v8 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v5))
        {
          if (!v6)
            return this;
          goto LABEL_18;
        }
      }
      else
      {
        __clrex();
      }
      this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v5);
      if (!v6)
        return this;
LABEL_18:
      v9 = *(_QWORD *)(v2 + 352);
      if (v9)
      {
        if (*(_BYTE *)(v2 + 360))
        {
          v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
          v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
        }
        else
        {
          v11 = 0;
        }
        v19 = v11;
        v12 = *(_QWORD *)(v2 + 368);
        v13 = *(_QWORD *)(v2 + 376);
        v15 = "MediaPlayerPrivateWebM";
        v16 = 23;
        v17 = "isCurrentPlaybackTargetWireless";
        v18 = v13;
        if (*(_BYTE *)(v12 + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 3u)
        {
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogMedia, 3, (WTF::Logger::LogSiteIdentifier *)&v15);
          v11 = v19 != 0;
        }
      }
      else
      {
        v11 = 0;
      }
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v6 + 8) + 8) + 208))(*(_QWORD *)(*(_QWORD *)(v6 + 8) + 8), v11);
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v6);
    }
  }
  return this;
}

void sub_1947A8DB4(_Unwind_Exception *a1)
{
  unsigned __int8 **v1;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v1);
  _Unwind_Resume(a1);
}

uint64_t WebCore::MediaPlayerPrivateWebM::isCurrentPlaybackTargetWireless(WebCore::MediaPlayerPrivateWebM *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  _QWORD v7[4];
  char v8;

  result = *((_QWORD *)this + 44);
  if (result)
  {
    if (*((_BYTE *)this + 360))
    {
      v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
    }
    else
    {
      result = 0;
    }
    v8 = result;
    v4 = *((_QWORD *)this + 46);
    v5 = *((_QWORD *)this + 47);
    v7[0] = "MediaPlayerPrivateWebM";
    v7[1] = 23;
    v7[2] = "isCurrentPlaybackTargetWireless";
    v7[3] = v5;
    if (*(_BYTE *)(v4 + 12))
    {
      if (WebCore::LogMedia)
        v6 = byte_1ECE7C490 >= 3u;
      else
        v6 = 0;
      if (v6)
      {
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogMedia, 3, (WTF::Logger::LogSiteIdentifier *)v7);
        return v8 != 0;
      }
    }
  }
  return result;
}

uint64_t ___ZN7WebCore22MediaPlayerPrivateWebM13enqueueSampleEON3WTF3RefINS_11MediaSampleENS1_12RawPtrTraitsIS3_EENS1_21DefaultRefDerefTraitsIS3_EEEEy_block_invoke(uint64_t a1, char a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v7 = v4;
  v8 = *(_OWORD *)(a1 + 56);
  v9 = *(_OWORD *)(a1 + 72);
  v5 = WTF::fastMalloc((WTF *)0x48);
  *(_QWORD *)v5 = &off_1E3206EB8;
  *(_QWORD *)(v5 + 8) = v3;
  *(_OWORD *)(v5 + 16) = v7;
  *(_OWORD *)(v5 + 32) = v8;
  *(_OWORD *)(v5 + 48) = v9;
  *(_BYTE *)(v5 + 64) = a2;
  v10 = v5;
  WTF::ensureOnMainThread();
  result = v10;
  if (v10)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  return result;
}

void sub_1947A8F1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9)
{
  uint64_t v9;
  uint64_t v11;

  v11 = *(_QWORD *)(v9 - 40);
  *(_QWORD *)(v9 - 40) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  _Unwind_Resume(exception_object);
}

__n128 __copy_helper_block_e8_32c148_ZTSKZN7WebCore22MediaPlayerPrivateWebM13enqueueSampleEON3WTF3RefINS_11MediaSampleENS1_12RawPtrTraitsIS3_EENS1_21DefaultRefDerefTraitsIS3_EEEEyE3__0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  __n128 result;

  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 40);
  if (!v4)
  {
    v6 = 0;
    goto LABEL_13;
  }
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v4);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v4))
    goto LABEL_5;
LABEL_6:
  if (*(_QWORD *)(v4 + 24))
  {
    ++*(_QWORD *)(v4 + 16);
    v6 = v4;
  }
  else
  {
    v6 = 0;
  }
  v7 = __ldxr((unsigned __int8 *)v4);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
      goto LABEL_13;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_13:
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 48) = v8;
  result = *(__n128 *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(__n128 *)(a1 + 56) = result;
  return result;
}

uint64_t __destroy_helper_block_e8_32c148_ZTSKZN7WebCore22MediaPlayerPrivateWebM13enqueueSampleEON3WTF3RefINS_11MediaSampleENS1_12RawPtrTraitsIS3_EENS1_21DefaultRefDerefTraitsIS3_EEEEyE3__0(uint64_t result, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;

  v2 = *(_QWORD *)(result + 40);
  *(_QWORD *)(result + 40) = 0;
  if (!v2)
    return result;
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_6;
  }
  result = MEMORY[0x19AEA534C](v2);
LABEL_6:
  v4 = *(_QWORD *)(v2 + 16) - 1;
  *(_QWORD *)(v2 + 16) = v4;
  if (v4)
  {
    v7 = __ldxr((unsigned __int8 *)v2);
    if (v7 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v2))
        return result;
    }
    else
    {
      __clrex();
    }
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  v5 = *(_QWORD *)(v2 + 8);
  v6 = __ldxr((unsigned __int8 *)v2);
  if (v6 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v2))
    {
      if (!v5)
        return WTF::fastFree((WTF *)v2, a2);
      return result;
    }
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)v2);
  if (!v5)
    return WTF::fastFree((WTF *)v2, a2);
  return result;
}

void WebCore::MediaPlayerPrivateWebM::reenqueSamples(int8x8_t *this, unint64_t a2)
{
  int8x8_t v2;
  uint8x8_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  WebCore::TrackBuffer *v12;
  uint64_t v13;
  _QWORD v14[2];
  __int128 v15;

  v2 = this[26];
  if (v2)
  {
    v5 = (uint8x8_t)vcnt_s8(v2);
    v5.i16[0] = vaddlv_u8(v5);
    if (v5.u32[0] > 1uLL)
    {
      v6 = a2;
      if (*(_QWORD *)&v2 <= a2)
        v6 = a2 % *(_QWORD *)&v2;
    }
    else
    {
      v6 = (*(_QWORD *)&v2 - 1) & a2;
    }
    v7 = *(_QWORD **)(*(_QWORD *)&this[25] + 8 * v6);
    if (v7)
    {
      v8 = (_QWORD *)*v7;
      if (v8)
      {
        if (v5.u32[0] >= 2uLL)
        {
          while (1)
          {
            v11 = v8[1];
            if (v11 == a2)
            {
              if (v8[2] == a2)
              {
LABEL_24:
                v12 = (WebCore::TrackBuffer *)v8[3];
                *((_BYTE *)v12 + 310) = 1;
                v14[0] = WebCore::MediaPlayerPrivateWebM::currentTime((id *)this);
                v14[1] = v13;
                WebCore::MediaPlayerPrivateWebM::flushTrack((uint64_t)this, (WTF::String *)a2);
                v15 = xmmword_1968A1660;
                if (WebCore::TrackBuffer::reenqueueMediaForTime((WTF **)v12, (const WTF::MediaTime *)v14, (const WTF::MediaTime *)&v15))WebCore::MediaPlayerPrivateWebM::provideMediaData((WebCore::MediaPlayerPrivateWebM *)this, v12, a2);
                return;
              }
            }
            else
            {
              if (v11 >= *(_QWORD *)&v2)
                v11 %= *(_QWORD *)&v2;
              if (v11 != v6)
                return;
            }
            v8 = (_QWORD *)*v8;
            if (!v8)
              return;
          }
        }
        v9 = *(_QWORD *)&v2 - 1;
        do
        {
          v10 = v8[1];
          if (v10 == a2)
          {
            if (v8[2] == a2)
              goto LABEL_24;
          }
          else if ((v10 & v9) != v6)
          {
            return;
          }
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
    }
  }
}

uint64_t WebCore::MediaPlayerPrivateWebM::flushTrack(uint64_t this, WTF::String *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int8x8_t v6;
  uint8x8_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  WTF::String *v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;

  v2 = this;
  v3 = *(_QWORD *)(this + 368);
  v4 = *(_QWORD *)(this + 376);
  v18 = a2;
  v19 = "MediaPlayerPrivateWebM";
  v20 = 23;
  v21 = "flushTrack";
  v22 = v4;
  if (*(_BYTE *)(v3 + 12))
  {
    if (WebCore::LogMedia && byte_1ECE7C490 >= 4u)
    {
      this = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,unsigned long long>((uint64_t)&WebCore::LogMedia, 4u, (WTF::Logger::LogSiteIdentifier *)&v19, &v18);
      a2 = v18;
    }
  }
  if (*(_BYTE *)(v2 + 600) && *(WTF::String **)(v2 + 592) == a2)
    return WebCore::MediaPlayerPrivateWebM::flushVideo((WebCore::MediaPlayerPrivateWebM *)v2);
  v6 = *(int8x8_t *)(v2 + 296);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8(v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v8 = (unint64_t)a2;
      if ((unint64_t)a2 >= *(_QWORD *)&v6)
        v8 = (unint64_t)a2 % *(_QWORD *)&v6;
    }
    else
    {
      v8 = (*(_QWORD *)&v6 - 1) & (unint64_t)a2;
    }
    v9 = *(_QWORD **)(*(_QWORD *)(v2 + 288) + 8 * v8);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (v10)
      {
        if (v7.u32[0] >= 2uLL)
        {
          while (1)
          {
            v13 = v10[1];
            if ((WTF::String *)v13 == a2)
            {
              if ((WTF::String *)v10[2] == a2)
              {
LABEL_34:
                v14 = (void *)v10[3];
                v15 = *(_QWORD *)(v2 + 368);
                v16 = *(_QWORD *)(v2 + 376);
                v19 = "MediaPlayerPrivateWebM";
                v20 = 23;
                v21 = "flushAudio";
                v22 = v16;
                if (*(_BYTE *)(v15 + 12))
                {
                  if (WebCore::LogMedia)
                    v17 = byte_1ECE7C490 >= 4u;
                  else
                    v17 = 0;
                  if (v17)
                    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 4, (WTF::Logger::LogSiteIdentifier *)&v19);
                }
                return objc_msgSend(v14, "flush");
              }
            }
            else
            {
              if (v13 >= *(_QWORD *)&v6)
                v13 %= *(_QWORD *)&v6;
              if (v13 != v8)
                return this;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              return this;
          }
        }
        v11 = *(_QWORD *)&v6 - 1;
        do
        {
          v12 = v10[1];
          if ((WTF::String *)v12 == a2)
          {
            if ((WTF::String *)v10[2] == a2)
              goto LABEL_34;
          }
          else if ((v12 & v11) != v8)
          {
            return this;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  return this;
}

void WebCore::MediaPlayerPrivateWebM::provideMediaData(WebCore::MediaPlayerPrivateWebM *this, WebCore::TrackBuffer *a2, unint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  id *v8;
  unint64_t v9;
  uint64_t v10;
  PAL *BufferCount;
  unsigned __int8 v12;
  signed int v14;
  unint64_t v15;
  uint8x8_t v16;
  unint64_t v17;
  uint64_t ***v18;
  uint64_t **v19;
  unint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  PAL *v26;
  unsigned __int8 v27;
  signed int v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v39;
  unsigned __int8 *v40;
  uint64_t *v41;
  uint64_t *v42;
  void *v43;
  unsigned int *v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  NSObject *v71;
  uint64_t v72;
  void *v73;
  char *v74;
  int v75;
  int v76;
  unint64_t v77;
  uint8x8_t v78;
  unint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  WTF::Lock *v87;
  uint64_t v88;
  WTF::Logger *v89;
  uint64_t v90;
  uint64_t v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  const char *v94;
  const char *v95;
  WTF::Logger *v96;
  uint64_t v97;
  WTF::StringImpl **v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  int v105;
  WTF::StringImpl *v106;
  opaqueCMSampleBuffer *v107;
  PAL *FormatDescription;
  PAL *v109;
  int v110;
  unsigned __int8 v111;
  __n128 v112;
  double v113;
  float v114;
  BOOL v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _DWORD *v120;
  _DWORD *v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  WTF::StringImpl *v125;
  WTF::StringImpl *v126;
  WTF::StringImpl *v127;
  NSObject *v128;
  uint64_t v129;
  char *v130;
  int v131;
  int v132;
  unint64_t v133;
  uint64_t **v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  WTF::Lock *v140;
  uint64_t v141;
  WTF::JSONImpl::Value *v142;
  WTF::JSONImpl::Value *v143;
  WTF::Logger *v144;
  uint64_t v145;
  uint64_t v146;
  WTF::StringImpl *v147;
  WTF::StringImpl *v148;
  const char *v149;
  const char *v150;
  WTF::Logger *v151;
  uint64_t v152;
  WTF::StringImpl **v153;
  WTF::StringImpl *v154;
  WTF::StringImpl *v155;
  WTF::StringImpl *v156;
  WTF::StringImpl *v157;
  WTF::StringImpl *v158;
  WTF::StringImpl *v159;
  WTF::Lock *v160;
  int v161;
  WTF::StringImpl *v162;
  uint64_t v163;
  uint64_t v164;
  int v166;
  WebCore::WebCoreDecompressionSession *v167;
  opaqueCMSampleBuffer *v168;
  unsigned int v169;
  uint64_t v170;
  uint64_t *v171;
  WebCore::VideoMediaSampleRenderer *v172;
  opaqueCMSampleBuffer *v173;
  unsigned int v174;
  uint64_t v175;
  uint64_t *v176;
  PAL *v177;
  void *v178;
  uint64_t v179;
  WTF::StringImpl *v180;
  uint64_t v181;
  uint64_t v183;
  int v184;
  uint64_t v185;
  int v186;
  int v187;
  char v188;
  uint64_t v190;
  uint64_t v191;
  int v192;
  unsigned __int8 *v193;
  uint64_t v195;
  uint64_t v196;
  int v197;
  unsigned int v198;
  unsigned int v199;
  int v200;
  int v201;
  uint64_t v202;
  WTF::StringImpl *v203;
  WebCore::VideoMediaSampleRenderer *v205;
  uint64_t v206;
  WTF::StringImpl *v207;
  BOOL v208;
  WTF::Lock *v209;
  WTF::Lock *v210;
  WTF::Lock *v211;
  WTF::MediaTime *v212;
  uint64_t v213;
  uint64_t v214;
  unsigned int v215;
  unint64_t v216;
  uint64_t v217;
  PAL *v218;
  const char *v219;
  uint64_t v220;
  const char *v221;
  uint64_t v222;
  WTF::Logger *v223;
  uint64_t v224;
  const char *v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t v228;
  WTF::Logger *v229;
  uint64_t v230;
  WTF::StringImpl *v231;
  WTF::StringImpl *v232;
  WTF::StringImpl *v233;
  WTF::Logger *v234;
  uint64_t v235;
  WTF::Logger *v236;
  WTF::StringImpl *v237;
  WTF::StringImpl *v238;
  WTF::JSONImpl::Value *v239;
  __int128 buf;
  const char *v241;
  WTF::StringImpl *v242;
  WebCore::MediaPlayerPrivateWebM *v243;
  WTF::StringImpl *v244;
  WebCore::MediaPlayerPrivateWebM *v245;
  const char *v246;
  uint64_t v247;
  const char *v248;
  uint64_t v249;
  uint64_t v250;

  v250 = *MEMORY[0x1E0C80C00];
  v216 = a3;
  if (*((_BYTE *)this + 624))
    return;
  v215 = 0;
  if (*((_BYTE *)a2 + 311))
  {
    if (*((_BYTE *)this + 600))
    {
      if (*((_QWORD *)this + 74) == a3)
      {
        v6 = (_QWORD *)WTF::MediaTime::invalidTime(this);
        v7 = v6[1];
        *((_QWORD *)a2 + 24) = *v6;
        *((_DWORD *)a2 + 50) = v7;
        *((_BYTE *)a2 + 204) = BYTE4(v7);
        if (*((_BYTE *)this + 600))
        {
          if (*((_QWORD *)this + 74) == a3)
          {
            v8 = (id *)*((_QWORD *)this + 32);
            if (v8)
              WebCore::VideoMediaSampleRenderer::resetUpcomingSampleBufferPresentationTimeExpectations(v8);
          }
        }
      }
    }
  }
  if (!*((_QWORD *)a2 + 10))
    goto LABEL_445;
  v212 = (WebCore::TrackBuffer *)((char *)a2 + 240);
  while (1)
  {
    v9 = v216;
    if (!*((_BYTE *)this + 600) || *((_QWORD *)this + 74) != v216)
      break;
    if (*((_BYTE *)this + 616))
      goto LABEL_437;
    v10 = *((_QWORD *)this + 19);
    if (v10)
    {
      BufferCount = *(PAL **)(v10 + 24);
      if (BufferCount)
        BufferCount = (PAL *)PAL::softLinkCoreMediaCMBufferQueueGetBufferCount(BufferCount, a2);
      v12 = atomic_load((unsigned __int8 *)(v10 + 244));
      if ((v12 & 1) != 0)
      {
        if (atomic_load((unsigned int *)(v10 + 228)))
          goto LABEL_437;
      }
      v14 = atomic_load((unsigned int *)(v10 + 228));
      if ((uint64_t)BufferCount + v14 >= 61)
        goto LABEL_437;
    }
    else
    {
      v24 = *((_QWORD *)this + 32);
      v25 = *(_QWORD *)(v24 + 16);
      if (v25)
      {
        v26 = *(PAL **)(v25 + 24);
        if (v26)
          v26 = (PAL *)PAL::softLinkCoreMediaCMBufferQueueGetBufferCount(v26, a2);
        v27 = atomic_load((unsigned __int8 *)(v25 + 244));
        if ((v27 & 1) != 0)
        {
          if (atomic_load((unsigned int *)(v25 + 228)))
            goto LABEL_437;
        }
        v29 = atomic_load((unsigned int *)(v25 + 228));
        if ((uint64_t)v26 + v29 >= 61)
          goto LABEL_437;
      }
      v23 = objc_msgSend(*(id *)(v24 + 8), "isReadyForMoreMediaData");
LABEL_53:
      if ((v23 & 1) == 0)
        goto LABEL_437;
    }
    v30 = *(unsigned int **)(*((_QWORD *)a2 + 8) + 64);
    v31 = v30 + 2;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 + 1, v31));
    *(_QWORD *)&buf = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v30 + 24))(v30);
    *((_QWORD *)&buf + 1) = v33;
    v34 = WTF::MediaTime::compare((WTF::MediaTime *)&buf, v212);
    if (v34 == 1)
    {
      v36 = *((_QWORD *)this + 46);
      v35 = (WTF::StringImpl *)*((_QWORD *)this + 47);
      *(_QWORD *)&buf = "MediaPlayerPrivateWebM";
      *((_QWORD *)&buf + 1) = 23;
      v241 = "provideMediaData";
      v242 = v35;
      v223 = (WTF::Logger *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v30 + 24))(v30);
      v224 = (uint64_t)a2;
      if (*(_BYTE *)(v36 + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 4u)
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [54],WTF::MediaTime,char [41],WTF::MediaTime>((uint64_t)&WebCore::LogMedia, 4u, (WTF::Logger::LogSiteIdentifier *)&buf, "bailing early because of unbuffered gap, new sample: ", (WTF::MediaTime *)&v223, " >= the current discontinuity boundary: ", v212);
      goto LABEL_407;
    }
    v37 = (uint64_t *)*((_QWORD *)a2 + 8);
    v38 = (uint64_t *)v37[1];
    v39 = v37;
    v40 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    if (v38)
    {
      do
      {
        v41 = v38;
        v38 = (uint64_t *)*v38;
      }
      while (v38);
    }
    else
    {
      do
      {
        v41 = (uint64_t *)v39[2];
        v115 = *v41 == (_QWORD)v39;
        v39 = v41;
      }
      while (!v115);
    }
    *((_QWORD *)a2 + 8) = v41;
    v42 = (uint64_t *)*((_QWORD *)a2 + 9);
    --*((_QWORD *)a2 + 10);
    std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v42, v37);
    v44 = (unsigned int *)v37[8];
    v37[8] = 0;
    if (v44)
    {
      v45 = v44 + 2;
      do
      {
        v46 = __ldaxr(v45);
        v47 = v46 - 1;
      }
      while (__stlxr(v47, v45));
      if (!v47)
      {
        atomic_store(1u, v44 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v44 + 8))(v44);
      }
    }
    WTF::fastFree((WTF *)v37, v43);
    *(_QWORD *)&buf = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v30 + 16))(v30);
    *((_QWORD *)&buf + 1) = v48;
    v223 = (WTF::Logger *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v30 + 32))(v30);
    v224 = v49;
    v50 = WTF::MediaTime::operator+();
    v213 = v50;
    v214 = v51;
    if ((*((_BYTE *)a2 + 188) & 1) == 0)
      goto LABEL_74;
    if (WTF::MediaTime::compare((WTF::MediaTime *)&v213, (WebCore::TrackBuffer *)((char *)a2 + 176)) == 1)
    {
      v50 = v213;
      v51 = v214;
LABEL_74:
      *((_QWORD *)a2 + 22) = v50;
      *((_DWORD *)a2 + 46) = v51;
      *((_BYTE *)a2 + 188) = BYTE4(v51);
    }
    v52 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v30 + 24))(v30);
    v54 = v53;
    v55 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v30 + 16))(v30);
    *((_QWORD *)a2 + 26) = v52;
    *((_DWORD *)a2 + 54) = v54;
    *((_BYTE *)a2 + 220) = BYTE4(v54);
    *((_QWORD *)a2 + 28) = v55;
    *((_DWORD *)a2 + 58) = v56;
    *((_BYTE *)a2 + 236) = v57;
    v223 = (WTF::Logger *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v30 + 24))(v30);
    v224 = v58;
    v219 = (const char *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v30 + 32))(v30);
    v220 = v59;
    *(_QWORD *)&buf = WTF::MediaTime::operator+();
    *((_QWORD *)&buf + 1) = v60;
    *((_QWORD *)a2 + 30) = WTF::MediaTime::operator+();
    *((_DWORD *)a2 + 62) = (_DWORD)a2;
    *((_BYTE *)a2 + 252) = BYTE4(a2);
    v61 = v216;
    if (!*((_BYTE *)this + 600) || *((_QWORD *)this + 74) != v216)
    {
      v77 = *((_QWORD *)this + 37);
      if (v77)
      {
        v78 = (uint8x8_t)vcnt_s8((int8x8_t)v77);
        v78.i16[0] = vaddlv_u8(v78);
        if (v78.u32[0] > 1uLL)
        {
          v79 = v216;
          if (v77 <= v216)
            v79 = v216 % v77;
        }
        else
        {
          v79 = (v77 - 1) & v216;
        }
        v80 = *(_QWORD **)(*((_QWORD *)this + 36) + 8 * v79);
        if (v80)
        {
          v81 = (_QWORD *)*v80;
          if (v81)
          {
            if (v78.u32[0] >= 2uLL)
            {
              while (1)
              {
                v84 = v81[1];
                if (v84 == v216)
                {
                  if (v81[2] == v216)
                    goto LABEL_77;
                }
                else
                {
                  if (v84 >= v77)
                    v84 %= v77;
                  if (v84 != v79)
                    goto LABEL_406;
                }
                v81 = (_QWORD *)*v81;
                if (!v81)
                  goto LABEL_406;
              }
            }
            v82 = v77 - 1;
            do
            {
              v83 = v81[1];
              if (v83 == v216)
              {
                if (v81[2] == v216)
                  goto LABEL_77;
              }
              else if ((v83 & v82) != v79)
              {
                goto LABEL_406;
              }
              v81 = (_QWORD *)*v81;
            }
            while (v81);
          }
        }
      }
      goto LABEL_406;
    }
LABEL_77:
    v219 = "MediaPlayerPrivateWebM";
    v220 = 23;
    v63 = *((_QWORD *)this + 46);
    v62 = *((_QWORD *)this + 47);
    v221 = "enqueueSample";
    v222 = v62;
    if (*(_BYTE *)(v63 + 12))
    {
      if (WebCore::LogMedia && byte_1ECE7C490 >= 4u)
      {
        WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v219);
        WTF::String::String((WTF::String *)&v236, "track ID = ");
        WTF::String::number((WTF::String *)v61);
        WTF::String::String((WTF::String *)&v234, ", sample = ");
        WebCore::MediaSample::toJSONString((WebCore::MediaSample *)v30);
        v223 = v236;
        v217 = v235;
        v229 = v234;
        v239 = v233;
        *(_QWORD *)&buf = v237;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v223, &v217, (uint64_t *)&v229, (uint64_t *)&v239, &v238);
        if (!v238)
          goto LABEL_459;
        v66 = v233;
        v233 = 0;
        if (v66)
        {
          if (*(_DWORD *)v66 == 2)
            WTF::StringImpl::destroy(v66, v65);
          else
            *(_DWORD *)v66 -= 2;
        }
        v67 = v234;
        v234 = 0;
        if (v67)
        {
          if (*(_DWORD *)v67 == 2)
            WTF::StringImpl::destroy(v67, v65);
          else
            *(_DWORD *)v67 -= 2;
        }
        v68 = (WTF::StringImpl *)v235;
        v235 = 0;
        if (v68)
        {
          if (*(_DWORD *)v68 == 2)
            WTF::StringImpl::destroy(v68, v65);
          else
            *(_DWORD *)v68 -= 2;
        }
        v69 = v236;
        v236 = 0;
        if (v69)
        {
          if (*(_DWORD *)v69 == 2)
            WTF::StringImpl::destroy(v69, v65);
          else
            *(_DWORD *)v69 -= 2;
        }
        v70 = v237;
        v237 = 0;
        if (v70)
        {
          if (*(_DWORD *)v70 == 2)
            WTF::StringImpl::destroy(v70, v65);
          else
            *(_DWORD *)v70 -= 2;
        }
        v71 = qword_1ECE7C4A0;
        v72 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)v72)
        {
          WTF::String::utf8();
          v74 = v223 ? (char *)v223 + 16 : 0;
          LODWORD(buf) = 136446210;
          *(_QWORD *)((char *)&buf + 4) = v74;
          _os_log_impl(&dword_1940B8000, v71, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
          v72 = (uint64_t)v223;
          v223 = 0;
          if (v72)
          {
            if (*(_DWORD *)v72 == 1)
              v72 = WTF::fastFree((WTF *)v72, v73);
            else
              --*(_DWORD *)v72;
          }
        }
        if (WebCore::LogMedia && byte_1ECE7C490 >= 4u)
        {
          while (1)
          {
            v75 = *v40;
            if ((v75 & 1) != 0)
              break;
            v76 = __ldaxr(v40);
            if (v76 == v75)
            {
              if (!__stxr(v75 | 1, v40))
              {
                v85 = WTF::Logger::observers((WTF::Logger *)v72);
                v86 = *(unsigned int *)(v85 + 12);
                if ((_DWORD)v86)
                {
                  v87 = *(WTF::Lock **)v85;
                  v209 = (WTF::Lock *)(*(_QWORD *)v85 + 8 * v86);
                  do
                  {
                    v88 = *(_QWORD *)v87;
                    LODWORD(buf) = 0;
                    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v219);
                    LODWORD(v241) = 0;
                    WTF::String::String((WTF::String *)&v242, "track ID = ");
                    LODWORD(v243) = 0;
                    WTF::String::number((WTF::String *)v61);
                    LODWORD(v245) = 0;
                    WTF::String::String((WTF::String *)&v246, ", sample = ");
                    LODWORD(v247) = 1;
                    WebCore::MediaSample::toJSONString((WebCore::MediaSample *)v30);
                    v223 = 0;
                    v224 = 0;
                    v89 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x50);
                    LODWORD(v224) = 5;
                    v223 = v89;
                    v90 = HIDWORD(v224);
                    *((_DWORD *)v89 + 4 * HIDWORD(v224)) = buf;
                    v91 = *((_QWORD *)&buf + 1);
                    if (*((_QWORD *)&buf + 1))
                      **((_DWORD **)&buf + 1) += 2;
                    *((_QWORD *)v89 + 2 * v90 + 1) = v91;
                    *((_DWORD *)v89 + 4 * (v90 + 1)) = (_DWORD)v241;
                    v92 = v242;
                    if (v242)
                      *(_DWORD *)v242 += 2;
                    *((_QWORD *)v89 + 2 * (v90 + 1) + 1) = v92;
                    *((_DWORD *)v89 + 4 * (v90 + 2)) = (_DWORD)v243;
                    v93 = v244;
                    if (v244)
                      *(_DWORD *)v244 += 2;
                    *((_QWORD *)v89 + 2 * (v90 + 2) + 1) = v93;
                    *((_DWORD *)v89 + 4 * (v90 + 3)) = (_DWORD)v245;
                    v94 = v246;
                    if (v246)
                      *(_DWORD *)v246 += 2;
                    *((_QWORD *)v89 + 2 * (v90 + 3) + 1) = v94;
                    *((_DWORD *)v89 + 4 * (v90 + 4)) = v247;
                    v95 = v248;
                    if (v248)
                      *(_DWORD *)v248 += 2;
                    *((_QWORD *)v89 + 2 * (v90 + 4) + 1) = v95;
                    HIDWORD(v224) = v90 + 5;
                    (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v88 + 16))(v88, &WebCore::LogMedia, 4, &v223);
                    v96 = v223;
                    if (HIDWORD(v224))
                    {
                      v97 = 16 * HIDWORD(v224);
                      v98 = (WTF::StringImpl **)((char *)v223 + 8);
                      do
                      {
                        v99 = *v98;
                        *v98 = 0;
                        if (v99)
                        {
                          if (*(_DWORD *)v99 == 2)
                            WTF::StringImpl::destroy(v99, (WTF::StringImpl *)v73);
                          else
                            *(_DWORD *)v99 -= 2;
                        }
                        v98 += 2;
                        v97 -= 16;
                      }
                      while (v97);
                      v96 = v223;
                    }
                    if (v96)
                    {
                      v223 = 0;
                      LODWORD(v224) = 0;
                      WTF::fastFree(v96, v73);
                    }
                    v100 = (WTF::StringImpl *)v248;
                    v248 = 0;
                    if (v100)
                    {
                      if (*(_DWORD *)v100 == 2)
                        WTF::StringImpl::destroy(v100, (WTF::StringImpl *)v73);
                      else
                        *(_DWORD *)v100 -= 2;
                    }
                    v101 = (WTF::StringImpl *)v246;
                    v246 = 0;
                    if (v101)
                    {
                      if (*(_DWORD *)v101 == 2)
                        WTF::StringImpl::destroy(v101, (WTF::StringImpl *)v73);
                      else
                        *(_DWORD *)v101 -= 2;
                    }
                    v102 = v244;
                    v244 = 0;
                    if (v102)
                    {
                      if (*(_DWORD *)v102 == 2)
                        WTF::StringImpl::destroy(v102, (WTF::StringImpl *)v73);
                      else
                        *(_DWORD *)v102 -= 2;
                    }
                    v103 = v242;
                    v242 = 0;
                    if (v103)
                    {
                      if (*(_DWORD *)v103 == 2)
                        WTF::StringImpl::destroy(v103, (WTF::StringImpl *)v73);
                      else
                        *(_DWORD *)v103 -= 2;
                    }
                    v104 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                    *((_QWORD *)&buf + 1) = 0;
                    if (v104)
                    {
                      if (*(_DWORD *)v104 == 2)
                        WTF::StringImpl::destroy(v104, (WTF::StringImpl *)v73);
                      else
                        *(_DWORD *)v104 -= 2;
                    }
                    v87 = (WTF::Lock *)((char *)v87 + 8);
                  }
                  while (v87 != v209);
                }
                v40 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
                v105 = __ldxr(MEMORY[0x1E0CBF890]);
                if (v105 == 1)
                {
                  if (!__stlxr(0, MEMORY[0x1E0CBF890]))
                    break;
                }
                else
                {
                  __clrex();
                }
                WTF::Lock::unlockSlow((WTF::Lock *)v40);
                break;
              }
            }
            else
            {
              __clrex();
            }
          }
        }
        v106 = v238;
        v238 = 0;
        if (v106)
        {
          if (*(_DWORD *)v106 == 2)
            WTF::StringImpl::destroy(v106, (WTF::StringImpl *)v73);
          else
            *(_DWORD *)v106 -= 2;
        }
      }
    }
    (*(void (**)(uint64_t *__return_ptr, unsigned int *))(*(_QWORD *)v30 + 112))(&v217, v30);
    FormatDescription = (PAL *)PAL::softLinkCoreMediaCMSampleBufferGetFormatDescription(v218, v107);
    v109 = FormatDescription;
    if (!FormatDescription)
    {
      if (*(_BYTE *)(*((_QWORD *)this + 46) + 12))
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [56]>((uint64_t)&WebCore::LogMedia, 1u, (WTF::Logger::LogSiteIdentifier *)&v219, "Received sample with a null formatDescription. Bailing.");
      goto LABEL_406;
    }
    v110 = PAL::softLinkCoreMediaCMFormatDescriptionGetMediaType[0](FormatDescription, a2);
    if (*((_BYTE *)this + 600) && *((_QWORD *)this + 74) == v61)
    {
      if (v110 != 1986618469)
      {
        v137 = *((_QWORD *)this + 46);
        LODWORD(buf) = 1986618469;
        LODWORD(v223) = v110;
        if (!*(_BYTE *)(v137 + 12))
          goto LABEL_406;
LABEL_249:
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [26],WebCore::FourCC,char [9],WebCore::FourCC,char [12]>((uint64_t)&WebCore::LogMedia, 1u, (WTF::Logger::LogSiteIdentifier *)&v219, "Expected sample of type '", (unsigned int *)&buf, "', got '", (unsigned int *)&v223, "'. Bailing.");
        goto LABEL_406;
      }
      v112.n128_f64[0] = PAL::softLinkCoreMediaCMVideoFormatDescriptionGetPresentationDimensions(v109, (const opaqueCMFormatDescription *)1, 1u, v111);
      v112.n128_f32[0] = v112.n128_f64[0];
      v114 = v113;
      v115 = *((float *)this + 136) == v112.n128_f32[0] && *((float *)this + 137) == v114;
      if (!v115)
      {
        v228 = __PAIR64__(LODWORD(v114), v112.n128_u32[0]);
        v227 = *((_QWORD *)this + 68);
        v116 = v227;
        v117 = __PAIR64__(LODWORD(v114), v112.n128_u32[0]);
        *((_QWORD *)this + 68) = __PAIR64__(LODWORD(v114), v112.n128_u32[0]);
        v112.n128_u32[0] = v116;
        if (*(float *)&v116 != *(float *)&v117
          || (v112.n128_u32[0] = HIDWORD(v116), *((float *)&v116 + 1) != *((float *)&v117 + 1)))
        {
          v118 = *((_QWORD *)this + 46);
          v119 = *((_QWORD *)this + 47);
          v223 = (WTF::Logger *)"MediaPlayerPrivateWebM";
          v224 = 23;
          v225 = "setNaturalSize";
          v226 = v119;
          if (*(_BYTE *)(v118 + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 3u)
          {
            WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v223);
            WTF::String::String((WTF::String *)&v234, "was ");
            WebCore::FloatSize::toJSONObject((WebCore::FloatSize *)&v227, (uint64_t *)&buf);
            WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)buf);
            v120 = (_DWORD *)buf;
            *(_QWORD *)&buf = 0;
            if (v120)
            {
              if (*v120 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*v120;
            }
            WTF::String::String((WTF::String *)&v232, ", is ");
            WebCore::FloatSize::toJSONObject((WebCore::FloatSize *)&v228, (uint64_t *)&buf);
            WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)buf);
            v121 = (_DWORD *)buf;
            *(_QWORD *)&buf = 0;
            if (v121)
            {
              if (*v121 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*v121;
            }
            v229 = v234;
            v239 = v233;
            *(_QWORD *)&buf = v235;
            v237 = v231;
            v238 = v232;
            WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v229, (uint64_t *)&v239, (uint64_t *)&v238, (uint64_t *)&v237, &v236);
            if (!v236)
            {
LABEL_459:
              __break(0xC471u);
              JUMPOUT(0x1947AAEE4);
            }
            v123 = v231;
            v231 = 0;
            if (v123)
            {
              if (*(_DWORD *)v123 == 2)
                WTF::StringImpl::destroy(v123, v122);
              else
                *(_DWORD *)v123 -= 2;
            }
            v124 = v232;
            v232 = 0;
            if (v124)
            {
              if (*(_DWORD *)v124 == 2)
                WTF::StringImpl::destroy(v124, v122);
              else
                *(_DWORD *)v124 -= 2;
            }
            v125 = v233;
            v233 = 0;
            if (v125)
            {
              if (*(_DWORD *)v125 == 2)
                WTF::StringImpl::destroy(v125, v122);
              else
                *(_DWORD *)v125 -= 2;
            }
            v126 = v234;
            v234 = 0;
            if (v126)
            {
              if (*(_DWORD *)v126 == 2)
                WTF::StringImpl::destroy(v126, v122);
              else
                *(_DWORD *)v126 -= 2;
            }
            v127 = (WTF::StringImpl *)v235;
            v235 = 0;
            if (v127)
            {
              if (*(_DWORD *)v127 == 2)
                WTF::StringImpl::destroy(v127, v122);
              else
                *(_DWORD *)v127 -= 2;
            }
            v128 = qword_1ECE7C4A0;
            v129 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
            if ((_DWORD)v129)
            {
              WTF::String::utf8();
              v130 = v229 ? (char *)v229 + 16 : 0;
              LODWORD(buf) = 136446210;
              *(_QWORD *)((char *)&buf + 4) = v130;
              _os_log_impl(&dword_1940B8000, v128, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
              v129 = (uint64_t)v229;
              v229 = 0;
              if (v129)
              {
                if (*(_DWORD *)v129 == 1)
                  v129 = WTF::fastFree((WTF *)v129, a2);
                else
                  --*(_DWORD *)v129;
              }
            }
            if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
            {
              while (1)
              {
                v131 = *v40;
                if ((v131 & 1) != 0)
                  break;
                v132 = __ldaxr(v40);
                if (v132 == v131)
                {
                  if (!__stxr(v131 | 1, v40))
                  {
                    v138 = WTF::Logger::observers((WTF::Logger *)v129);
                    v139 = *(unsigned int *)(v138 + 12);
                    if ((_DWORD)v139)
                    {
                      v140 = *(WTF::Lock **)v138;
                      v210 = (WTF::Lock *)(*(_QWORD *)v138 + 8 * v139);
                      do
                      {
                        v141 = *(_QWORD *)v140;
                        LODWORD(buf) = 0;
                        WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v223);
                        LODWORD(v241) = 0;
                        WTF::String::String((WTF::String *)&v242, "was ");
                        LODWORD(v243) = 1;
                        WebCore::FloatSize::toJSONObject((WebCore::FloatSize *)&v227, (uint64_t *)&v239);
                        WTF::JSONImpl::Value::toJSONString(v239);
                        v142 = v239;
                        v239 = 0;
                        if (v142)
                        {
                          if (*(_DWORD *)v142 == 1)
                            WTF::JSONImpl::Value::operator delete();
                          else
                            --*(_DWORD *)v142;
                        }
                        LODWORD(v245) = 0;
                        WTF::String::String((WTF::String *)&v246, ", is ");
                        LODWORD(v247) = 1;
                        WebCore::FloatSize::toJSONObject((WebCore::FloatSize *)&v228, (uint64_t *)&v239);
                        WTF::JSONImpl::Value::toJSONString(v239);
                        v143 = v239;
                        v239 = 0;
                        if (v143)
                        {
                          if (*(_DWORD *)v143 == 1)
                            WTF::JSONImpl::Value::operator delete();
                          else
                            --*(_DWORD *)v143;
                        }
                        v229 = 0;
                        v230 = 0;
                        v144 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x50);
                        LODWORD(v230) = 5;
                        v229 = v144;
                        v145 = HIDWORD(v230);
                        *((_DWORD *)v144 + 4 * HIDWORD(v230)) = buf;
                        v146 = *((_QWORD *)&buf + 1);
                        if (*((_QWORD *)&buf + 1))
                          **((_DWORD **)&buf + 1) += 2;
                        *((_QWORD *)v144 + 2 * v145 + 1) = v146;
                        *((_DWORD *)v144 + 4 * (v145 + 1)) = (_DWORD)v241;
                        v147 = v242;
                        if (v242)
                          *(_DWORD *)v242 += 2;
                        *((_QWORD *)v144 + 2 * (v145 + 1) + 1) = v147;
                        *((_DWORD *)v144 + 4 * (v145 + 2)) = (_DWORD)v243;
                        v148 = v244;
                        if (v244)
                          *(_DWORD *)v244 += 2;
                        *((_QWORD *)v144 + 2 * (v145 + 2) + 1) = v148;
                        *((_DWORD *)v144 + 4 * (v145 + 3)) = (_DWORD)v245;
                        v149 = v246;
                        if (v246)
                          *(_DWORD *)v246 += 2;
                        *((_QWORD *)v144 + 2 * (v145 + 3) + 1) = v149;
                        *((_DWORD *)v144 + 4 * (v145 + 4)) = v247;
                        v150 = v248;
                        if (v248)
                          *(_DWORD *)v248 += 2;
                        *((_QWORD *)v144 + 2 * (v145 + 4) + 1) = v150;
                        HIDWORD(v230) = v145 + 5;
                        (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v141 + 16))(v141, &WebCore::LogMedia, 3, &v229);
                        v151 = v229;
                        if (HIDWORD(v230))
                        {
                          v152 = 16 * HIDWORD(v230);
                          v153 = (WTF::StringImpl **)((char *)v229 + 8);
                          do
                          {
                            v154 = *v153;
                            *v153 = 0;
                            if (v154)
                            {
                              if (*(_DWORD *)v154 == 2)
                                WTF::StringImpl::destroy(v154, a2);
                              else
                                *(_DWORD *)v154 -= 2;
                            }
                            v153 += 2;
                            v152 -= 16;
                          }
                          while (v152);
                          v151 = v229;
                        }
                        if (v151)
                        {
                          v229 = 0;
                          LODWORD(v230) = 0;
                          WTF::fastFree(v151, a2);
                        }
                        v155 = (WTF::StringImpl *)v248;
                        v248 = 0;
                        if (v155)
                        {
                          if (*(_DWORD *)v155 == 2)
                            WTF::StringImpl::destroy(v155, a2);
                          else
                            *(_DWORD *)v155 -= 2;
                        }
                        v156 = (WTF::StringImpl *)v246;
                        v246 = 0;
                        if (v156)
                        {
                          if (*(_DWORD *)v156 == 2)
                            WTF::StringImpl::destroy(v156, a2);
                          else
                            *(_DWORD *)v156 -= 2;
                        }
                        v157 = v244;
                        v244 = 0;
                        if (v157)
                        {
                          if (*(_DWORD *)v157 == 2)
                            WTF::StringImpl::destroy(v157, a2);
                          else
                            *(_DWORD *)v157 -= 2;
                        }
                        v158 = v242;
                        v242 = 0;
                        if (v158)
                        {
                          if (*(_DWORD *)v158 == 2)
                            WTF::StringImpl::destroy(v158, a2);
                          else
                            *(_DWORD *)v158 -= 2;
                        }
                        v159 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                        *((_QWORD *)&buf + 1) = 0;
                        if (v159)
                        {
                          if (*(_DWORD *)v159 == 2)
                            WTF::StringImpl::destroy(v159, a2);
                          else
                            *(_DWORD *)v159 -= 2;
                        }
                        v140 = (WTF::Lock *)((char *)v140 + 8);
                      }
                      while (v140 != v210);
                    }
                    v160 = (WTF::Lock *)MEMORY[0x1E0CBF890];
                    v161 = __ldxr(MEMORY[0x1E0CBF890]);
                    if (v161 == 1)
                    {
                      if (!__stlxr(0, MEMORY[0x1E0CBF890]))
                        break;
                    }
                    else
                    {
                      __clrex();
                    }
                    WTF::Lock::unlockSlow(v160);
                    break;
                  }
                }
                else
                {
                  __clrex();
                }
              }
            }
            v162 = v236;
            v236 = 0;
            if (v162)
            {
              if (*(_DWORD *)v162 == 2)
                WTF::StringImpl::destroy(v162, a2);
              else
                *(_DWORD *)v162 -= 2;
            }
          }
          v163 = *((_QWORD *)this + 12);
          if (v163)
          {
            v164 = *((_QWORD *)this + 13);
            if (__ldaxr((unsigned __int8 *)v163))
            {
              __clrex();
              goto LABEL_329;
            }
            if (__stxr(1u, (unsigned __int8 *)v163))
LABEL_329:
              MEMORY[0x19AEA534C](v163, v112);
            if (*(_QWORD *)(v163 + 24))
              ++*(_QWORD *)(v163 + 8);
            else
              v164 = 0;
            v166 = __ldxr((unsigned __int8 *)v163);
            if (v166 == 1)
            {
              if (!__stlxr(0, (unsigned __int8 *)v163))
                goto LABEL_338;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)v163);
LABEL_338:
            if (v164)
            {
              (*(void (**)(_QWORD, __n128))(**(_QWORD **)(*(_QWORD *)(v164 + 8) + 8) + 104))(*(_QWORD *)(*(_QWORD *)(v164 + 8) + 8), v112);
              WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v164);
            }
          }
        }
        if (!*((_BYTE *)this + 345))
          WebCore::MediaPlayerPrivateWebM::setReadyState((uint64_t)this, 1u);
        if (*((_BYTE *)this + 623))
          WebCore::MediaPlayerPrivateWebM::setNetworkState((unsigned __int8 *)this, 1);
      }
      v167 = (WebCore::WebCoreDecompressionSession *)*((_QWORD *)this + 19);
      if (v167)
      {
        v168 = v218;
        v169 = ((*(uint64_t (**)(unsigned int *, __n128))(*(_QWORD *)v30 + 104))(v30, v112) & 2) == 0;
        WebCore::WebCoreDecompressionSession::enqueueSample(v167, v168, v169, v170, v171);
      }
      v172 = (WebCore::VideoMediaSampleRenderer *)*((_QWORD *)this + 32);
      if (!v172)
        goto LABEL_406;
      v173 = v218;
      v174 = ((*(uint64_t (**)(unsigned int *, __n128))(*(_QWORD *)v30 + 104))(v30, v112) & 2) == 0;
      v177 = (PAL *)WebCore::VideoMediaSampleRenderer::enqueueSample(v172, v173, v174, v175, v176);
      v178 = *(void **)(*((_QWORD *)this + 32) + 8);
      PAL::getAVSampleBufferDisplayLayerClass(v177);
      if ((objc_opt_isKindOfClass() & (v178 != 0)) == 1 && (objc_opt_respondsToSelector() & 1) != 0)
        goto LABEL_406;
      if (*((_BYTE *)this + 619)
        || ((*(uint64_t (**)(unsigned int *))(*(_QWORD *)v30 + 104))(v30) & 2) != 0)
      {
        goto LABEL_406;
      }
      v179 = *((_QWORD *)this + 46);
      v180 = (WTF::StringImpl *)*((_QWORD *)this + 47);
      *(_QWORD *)&buf = "MediaPlayerPrivateWebM";
      *((_QWORD *)&buf + 1) = 23;
      v241 = "enqueueSample";
      v242 = v180;
      if (*(_BYTE *)(v179 + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 4u)
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogMedia, 4u, (WTF::Logger::LogSiteIdentifier *)&buf, "adding buffer attachment");
      *(_QWORD *)&buf = MEMORY[0x1E0C809B0];
      *((_QWORD *)&buf + 1) = 3321888768;
      v241 = (const char *)___ZN7WebCore22MediaPlayerPrivateWebM13enqueueSampleEON3WTF3RefINS_11MediaSampleENS1_12RawPtrTraitsIS3_EENS1_21DefaultRefDerefTraitsIS3_EEEEy_block_invoke;
      v242 = (WTF::StringImpl *)&__block_descriptor_88_e8_32c148_ZTSKZN7WebCore22MediaPlayerPrivateWebM13enqueueSampleEON3WTF3RefINS_11MediaSampleENS1_12RawPtrTraitsIS3_EENS1_21DefaultRefDerefTraitsIS3_EEEEyE3__0_e8_v12__0B8l;
      v181 = *((_QWORD *)this + 7);
      if (!v181)
      {
        v211 = 0;
        v185 = *((_QWORD *)this + 47);
        v243 = this;
        goto LABEL_433;
      }
      if (__ldaxr((unsigned __int8 *)v181))
      {
        __clrex();
        goto LABEL_359;
      }
      if (__stxr(1u, (unsigned __int8 *)v181))
LABEL_359:
        MEMORY[0x19AEA534C](v181);
      if (*(_QWORD *)(v181 + 24))
      {
        ++*(_QWORD *)(v181 + 16);
        v183 = v181;
      }
      else
      {
        v183 = 0;
      }
      v184 = __ldxr((unsigned __int8 *)v181);
      if (v184 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v181))
        {
LABEL_367:
          v185 = *((_QWORD *)this + 47);
          v243 = this;
          if (v183)
          {
            v186 = __ldaxr((unsigned __int8 *)v183);
            v211 = (WTF::Lock *)v183;
            if (v186)
            {
              __clrex();
              goto LABEL_371;
            }
            if (__stxr(1u, (unsigned __int8 *)v183))
LABEL_371:
              MEMORY[0x19AEA534C](v183);
            if (*(_QWORD *)(v183 + 24))
            {
              ++*(_QWORD *)(v183 + 16);
              v181 = v183;
            }
            else
            {
              v181 = 0;
            }
            v187 = __ldxr((unsigned __int8 *)v183);
            if (v187 == 1)
            {
              if (!__stlxr(0, (unsigned __int8 *)v183))
              {
LABEL_379:
                v188 = 0;
                goto LABEL_380;
              }
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)v183);
            goto LABEL_379;
          }
          v211 = 0;
          v181 = 0;
LABEL_433:
          v188 = 1;
LABEL_380:
          v244 = (WTF::StringImpl *)v181;
          v245 = this;
          v246 = "MediaPlayerPrivateWebM";
          v247 = 23;
          v248 = "enqueueSample";
          v249 = v185;
          objc_msgSend(v178, "prerollDecodeWithCompletionHandler:", &buf);
          if ((v188 & 1) == 0)
          {
            if (__ldaxr((unsigned __int8 *)v211))
            {
              __clrex();
              goto LABEL_384;
            }
            if (__stxr(1u, (unsigned __int8 *)v211))
LABEL_384:
              MEMORY[0x19AEA534C](v211);
            v190 = *((_QWORD *)v211 + 2) - 1;
            *((_QWORD *)v211 + 2) = v190;
            if (v190)
            {
              v200 = __ldxr((unsigned __int8 *)v211);
              if (v200 == 1)
              {
                if (!__stlxr(0, (unsigned __int8 *)v211))
                  goto LABEL_393;
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow(v211);
              goto LABEL_393;
            }
            v191 = *((_QWORD *)v211 + 1);
            v192 = __ldxr((unsigned __int8 *)v211);
            if (v192 == 1)
            {
              if (!__stlxr(0, (unsigned __int8 *)v211))
                goto LABEL_391;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(v211);
LABEL_391:
            if (!v191)
              WTF::fastFree(v211, a2);
          }
LABEL_393:
          v193 = (unsigned __int8 *)v244;
          v244 = 0;
          if (!v193)
            goto LABEL_406;
          if (__ldaxr(v193))
          {
            __clrex();
            goto LABEL_397;
          }
          if (__stxr(1u, v193))
LABEL_397:
            MEMORY[0x19AEA534C](v193);
          v195 = *((_QWORD *)v193 + 2) - 1;
          *((_QWORD *)v193 + 2) = v195;
          if (!v195)
          {
            v196 = *((_QWORD *)v193 + 1);
            v197 = __ldxr(v193);
            if (v197 == 1)
            {
              if (!__stlxr(0, v193))
              {
LABEL_404:
                if (!v196)
                  WTF::fastFree((WTF *)v193, a2);
                goto LABEL_406;
              }
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)v193);
            goto LABEL_404;
          }
          v201 = __ldxr(v193);
          if (v201 == 1)
          {
            if (!__stlxr(0, v193))
              goto LABEL_406;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v193);
          goto LABEL_406;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v181);
      goto LABEL_367;
    }
    if (v110 == 1936684398)
    {
      if (!*((_BYTE *)this + 600) && *((unsigned __int8 *)this + 345) <= 3u)
        WebCore::MediaPlayerPrivateWebM::setReadyState((uint64_t)this, 4u);
      v133 = *((_QWORD *)this + 37);
      if ((v133 & (v133 - 1)) != 0)
      {
        v136 = v61;
        if (v133 <= v61)
          v136 = v61 % v133;
        v134 = *(uint64_t ***)(*((_QWORD *)this + 36) + 8 * v136);
        do
        {
          do
            v134 = (uint64_t **)*v134;
          while (v134[1] != (uint64_t *)v61);
        }
        while (v134[2] != (uint64_t *)v61);
      }
      else
      {
        v134 = *(uint64_t ***)(*((_QWORD *)this + 36) + 8 * ((v133 - 1) & v61));
        do
        {
          do
            v134 = (uint64_t **)*v134;
          while (v134[1] != (uint64_t *)v61);
        }
        while (v134[2] != (uint64_t *)v61);
      }
      objc_msgSend(v134[3], "enqueueSampleBuffer:", v218);
      goto LABEL_406;
    }
    v135 = *((_QWORD *)this + 46);
    LODWORD(buf) = 1936684398;
    LODWORD(v223) = v110;
    if (*(_BYTE *)(v135 + 12))
      goto LABEL_249;
LABEL_406:
    ++v215;
    do
    {
LABEL_407:
      v198 = __ldaxr(v31);
      v199 = v198 - 1;
    }
    while (__stlxr(v199, v31));
    if (!v199)
    {
      atomic_store(1u, v30 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v30 + 8))(v30);
    }
    if (v34 == 1 || !*((_QWORD *)a2 + 10))
      goto LABEL_445;
  }
  v15 = *((_QWORD *)this + 37);
  if (v15)
  {
    v16 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
    v16.i16[0] = vaddlv_u8(v16);
    if (v16.u32[0] > 1uLL)
    {
      v17 = v216;
      if (v15 <= v216)
        v17 = v216 % v15;
    }
    else
    {
      v17 = (v15 - 1) & v216;
    }
    v18 = *(uint64_t ****)(*((_QWORD *)this + 36) + 8 * v17);
    if (v18)
    {
      v19 = *v18;
      if (v19)
      {
        if (v16.u32[0] >= 2uLL)
        {
          while (1)
          {
            v22 = (unint64_t)v19[1];
            if (v22 == v216)
            {
              if (v19[2] == (uint64_t *)v216)
              {
LABEL_45:
                v23 = objc_msgSend(v19[3], "isReadyForMoreMediaData");
                goto LABEL_53;
              }
            }
            else
            {
              if (v22 >= v15)
                v22 %= v15;
              if (v22 != v17)
                goto LABEL_437;
            }
            v19 = (uint64_t **)*v19;
            if (!v19)
              goto LABEL_437;
          }
        }
        v20 = v15 - 1;
        do
        {
          v21 = v19[1];
          if (v21 == (uint64_t *)v216)
          {
            if (v19[2] == (uint64_t *)v216)
              goto LABEL_45;
          }
          else if (((unint64_t)v21 & v20) != v17)
          {
            break;
          }
          v19 = (uint64_t **)*v19;
        }
        while (v19);
      }
    }
  }
LABEL_437:
  v202 = *((_QWORD *)this + 46);
  v203 = (WTF::StringImpl *)*((_QWORD *)this + 47);
  *(_QWORD *)&buf = "MediaPlayerPrivateWebM";
  *((_QWORD *)&buf + 1) = 23;
  v241 = "provideMediaData";
  v242 = v203;
  if (*(_BYTE *)(v202 + 12))
  {
    if (WebCore::LogMedia && byte_1ECE7C490 >= 4u)
    {
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [25],unsigned long long,char [28]>((uint64_t)&WebCore::LogMedia, 4u, (WTF::Logger::LogSiteIdentifier *)&buf, "bailing early, track id ", (WTF::String **)&v216, " is not ready for more data");
      v9 = v216;
    }
  }
  WebCore::MediaPlayerPrivateWebM::notifyClientWhenReadyForMoreSamples((uint64_t)this, v9);
LABEL_445:
  if (*((_BYTE *)this + 600))
  {
    if (*((_QWORD *)this + 74) == v216)
    {
      if (WebCore::TrackBuffer::updateMinimumUpcomingPresentationTime(a2))
      {
        if (*((_BYTE *)this + 600))
        {
          if (*((_QWORD *)this + 74) == v216)
          {
            v205 = (WebCore::VideoMediaSampleRenderer *)*((_QWORD *)this + 32);
            if (v205)
              WebCore::VideoMediaSampleRenderer::expectMinimumUpcomingSampleBufferPresentationTime(v205, (WebCore::TrackBuffer *)((char *)a2 + 192));
          }
        }
      }
    }
  }
  v206 = *((_QWORD *)this + 46);
  v207 = (WTF::StringImpl *)*((_QWORD *)this + 47);
  *(_QWORD *)&buf = "MediaPlayerPrivateWebM";
  *((_QWORD *)&buf + 1) = 23;
  v241 = "provideMediaData";
  v242 = v207;
  v223 = (WTF::Logger *)*((_QWORD *)a2 + 10);
  if (*(_BYTE *)(v206 + 12))
  {
    if (WebCore::LogMedia)
      v208 = byte_1ECE7C490 >= 4u;
    else
      v208 = 0;
    if (v208)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [10],unsigned int,char [11],unsigned long long,char [11]>((uint64_t)&WebCore::LogMedia, 4u, (WTF::Logger::LogSiteIdentifier *)&buf, "enqueued ", &v215, " samples, ", &v223, " remaining");
  }
}

void sub_1947AAEF0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::Lock *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,WTF *a36,int a37,int a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,WTF *a43,int a44,int a45,WTF::StringImpl *a46,WTF::StringImpl *a47,WTF::StringImpl *a48)
{
  unsigned int *v48;
  char v49;
  unsigned int *v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  unsigned int v64;
  unsigned int v65;

  v53 = *(_QWORD *)(v51 - 168);
  *(_QWORD *)(v51 - 168) = 0;
  if (!v53)
    goto LABEL_15;
  if (__ldaxr((unsigned __int8 *)v53))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v53))
  {
LABEL_7:
    v55 = *(_QWORD *)(v53 + 16) - 1;
    *(_QWORD *)(v53 + 16) = v55;
    if (v55)
    {
      v58 = __ldxr((unsigned __int8 *)v53);
      if (v58 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v53))
          goto LABEL_15;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v53);
LABEL_15:
      if ((v49 & 1) != 0)
        goto LABEL_40;
      if (__ldaxr((unsigned __int8 *)a10))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)a10))
      {
LABEL_27:
        v60 = *((_QWORD *)a10 + 2) - 1;
        *((_QWORD *)a10 + 2) = v60;
        if (v60)
        {
          v63 = __ldxr((unsigned __int8 *)a10);
          if (v63 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)a10))
              goto LABEL_40;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(a10);
          do
          {
LABEL_40:
            v64 = __ldaxr(v50);
            v65 = v64 - 1;
          }
          while (__stlxr(v65, v50));
          if (!v65)
          {
            atomic_store(1u, v48 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v48 + 8))(v48);
          }
          _Unwind_Resume(exception_object);
        }
        v61 = *((_QWORD *)a10 + 1);
        v62 = __ldxr((unsigned __int8 *)a10);
        if (v62 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)a10))
          {
LABEL_33:
            if (!v61)
              WTF::fastFree(a10, a2);
            goto LABEL_40;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow(a10);
        goto LABEL_33;
      }
      MEMORY[0x19AEA534C](a10);
      goto LABEL_27;
    }
    v56 = *(_QWORD *)(v53 + 8);
    v57 = __ldxr((unsigned __int8 *)v53);
    if (v57 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v53))
      {
LABEL_13:
        if (!v56)
          WTF::fastFree((WTF *)v53, a2);
        goto LABEL_15;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v53);
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v53);
  goto LABEL_7;
}

uint64_t WebCore::MediaPlayerPrivateWebM::notifyClientWhenReadyForMoreSamples(uint64_t this, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int8x8_t v7;
  uint8x8_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  WebCore::VideoMediaSampleRenderer *v18;
  uint64_t v19;
  uint64_t v21;
  int v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  int v28;
  void *v29;
  WTF::Lock *v31;
  int v32;
  void *v33;
  WTF::Lock *v34;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  _QWORD v45[5];
  WTF::Lock *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;

  v3 = this;
  if (*(_BYTE *)(this + 600) && *(_QWORD *)(this + 592) == a2)
  {
    v4 = *(_QWORD *)(this + 152);
    if (!v4)
      goto LABEL_41;
    v5 = *(_QWORD *)(this + 56);
    if (!v5)
    {
      v15 = 0;
      goto LABEL_39;
    }
    if (__ldaxr((unsigned __int8 *)v5))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v5))
    {
      goto LABEL_32;
    }
    MEMORY[0x19AEA534C](v5);
LABEL_32:
    if (*(_QWORD *)(v5 + 24))
    {
      ++*(_QWORD *)(v5 + 16);
      v15 = v5;
    }
    else
    {
      v15 = 0;
    }
    v16 = __ldxr((unsigned __int8 *)v5);
    if (v16 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v5))
      {
LABEL_39:
        v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
        *v17 = &off_1E3207058;
        v17[1] = v15;
        v17[2] = v3;
        v17[3] = v3;
        v17[4] = a2;
        v49 = (uint64_t)v17;
        WebCore::WebCoreDecompressionSession::requestMediaDataWhenReady(v4, (opaqueCMBufferQueue *)&v49);
        this = v49;
        v49 = 0;
        if (this)
          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
LABEL_41:
        v18 = *(WebCore::VideoMediaSampleRenderer **)(v3 + 256);
        if (!v18)
          return this;
        v19 = *(_QWORD *)(v3 + 56);
        if (!v19)
        {
          v21 = 0;
          goto LABEL_54;
        }
        if (__ldaxr((unsigned __int8 *)v19))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v19))
        {
LABEL_47:
          if (*(_QWORD *)(v19 + 24))
          {
            ++*(_QWORD *)(v19 + 16);
            v21 = v19;
          }
          else
          {
            v21 = 0;
          }
          v22 = __ldxr((unsigned __int8 *)v19);
          if (v22 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v19))
              goto LABEL_54;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v19);
LABEL_54:
          v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
          *v23 = &off_1E3207080;
          v23[1] = v21;
          v23[2] = v3;
          v23[3] = v3;
          v23[4] = a2;
          v24 = *((_QWORD *)v18 + 4);
          *((_QWORD *)v18 + 4) = v23;
          if (v24)
            (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
          return WebCore::VideoMediaSampleRenderer::resetReadyForMoreSample(v18);
        }
        MEMORY[0x19AEA534C](v19);
        goto LABEL_47;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
    goto LABEL_39;
  }
  v7 = *(int8x8_t *)(this + 296);
  if (!*(_QWORD *)&v7)
    return this;
  v8 = (uint8x8_t)vcnt_s8(v7);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] > 1uLL)
  {
    v9 = a2;
    if (*(_QWORD *)&v7 <= a2)
      v9 = a2 % *(_QWORD *)&v7;
  }
  else
  {
    v9 = (*(_QWORD *)&v7 - 1) & a2;
  }
  v10 = *(_QWORD **)(*(_QWORD *)(this + 288) + 8 * v9);
  if (!v10)
    return this;
  v11 = (_QWORD *)*v10;
  if (!*v10)
    return this;
  if (v8.u32[0] < 2uLL)
  {
    v12 = *(_QWORD *)&v7 - 1;
    do
    {
      v13 = v11[1];
      if (v13 == a2)
      {
        if (v11[2] == a2)
          goto LABEL_58;
      }
      else if ((v13 & v12) != v9)
      {
        return this;
      }
      v11 = (_QWORD *)*v11;
    }
    while (v11);
    return this;
  }
  while (1)
  {
    v14 = v11[1];
    if (v14 == a2)
      break;
    if (v14 >= *(_QWORD *)&v7)
      v14 %= *(_QWORD *)&v7;
    if (v14 != v9)
      return this;
LABEL_28:
    v11 = (_QWORD *)*v11;
    if (!v11)
      return this;
  }
  if (v11[2] != a2)
    goto LABEL_28;
LABEL_58:
  v25 = *(_QWORD *)(this + 56);
  if (!v25)
  {
    v27 = 0;
    goto LABEL_70;
  }
  if (__ldaxr((unsigned __int8 *)v25))
  {
    __clrex();
    goto LABEL_62;
  }
  if (__stxr(1u, (unsigned __int8 *)v25))
LABEL_62:
    MEMORY[0x19AEA534C](v25);
  if (*(_QWORD *)(v25 + 24))
  {
    ++*(_QWORD *)(v25 + 16);
    v27 = v25;
  }
  else
  {
    v27 = 0;
  }
  v28 = __ldxr((unsigned __int8 *)v25);
  if (v28 != 1)
  {
    __clrex();
    goto LABEL_69;
  }
  if (__stlxr(0, (unsigned __int8 *)v25))
LABEL_69:
    WTF::Lock::unlockSlow((WTF::Lock *)v25);
LABEL_70:
  v29 = (void *)v11[3];
  v45[0] = MEMORY[0x1E0C809B0];
  v45[1] = 3321888768;
  v45[2] = ___ZN7WebCore22MediaPlayerPrivateWebM35notifyClientWhenReadyForMoreSamplesEy_block_invoke;
  v45[3] = &__block_descriptor_64_e8_40c65_ZTSN3WTF17ThreadSafeWeakPtrIN7WebCore22MediaPlayerPrivateWebMEEE_e5_v8__0l;
  v45[4] = v3;
  if (!v27)
  {
    v31 = 0;
    goto LABEL_82;
  }
  if (__ldaxr((unsigned __int8 *)v27))
  {
    __clrex();
    goto LABEL_74;
  }
  if (__stxr(1u, (unsigned __int8 *)v27))
LABEL_74:
    MEMORY[0x19AEA534C](v27);
  if (*(_QWORD *)(v27 + 24))
  {
    ++*(_QWORD *)(v27 + 16);
    v31 = (WTF::Lock *)v27;
  }
  else
  {
    v31 = 0;
  }
  v32 = __ldxr((unsigned __int8 *)v27);
  if (v32 != 1)
  {
    __clrex();
    goto LABEL_81;
  }
  if (__stlxr(0, (unsigned __int8 *)v27))
LABEL_81:
    WTF::Lock::unlockSlow((WTF::Lock *)v27);
LABEL_82:
  v46 = v31;
  v47 = v3;
  v48 = a2;
  this = objc_msgSend(v29, "requestMediaDataWhenReadyOnQueue:usingBlock:", MEMORY[0x1E0C80D38], v45);
  v34 = v46;
  v46 = 0;
  if (!v34)
    goto LABEL_95;
  if (__ldaxr((unsigned __int8 *)v34))
  {
    __clrex();
    goto LABEL_86;
  }
  if (__stxr(1u, (unsigned __int8 *)v34))
LABEL_86:
    this = MEMORY[0x19AEA534C](v34);
  v36 = *((_QWORD *)v34 + 2) - 1;
  *((_QWORD *)v34 + 2) = v36;
  if (v36)
  {
    v43 = __ldxr((unsigned __int8 *)v34);
    if (v43 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v34))
        goto LABEL_95;
    }
    else
    {
      __clrex();
    }
    this = WTF::Lock::unlockSlow(v34);
    goto LABEL_95;
  }
  v37 = *((_QWORD *)v34 + 1);
  v38 = __ldxr((unsigned __int8 *)v34);
  if (v38 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v34))
      goto LABEL_93;
  }
  else
  {
    __clrex();
  }
  this = WTF::Lock::unlockSlow(v34);
LABEL_93:
  if (!v37)
    this = WTF::fastFree(v34, v33);
LABEL_95:
  if (v27)
  {
    if (__ldaxr((unsigned __int8 *)v27))
    {
      __clrex();
      goto LABEL_99;
    }
    if (__stxr(1u, (unsigned __int8 *)v27))
LABEL_99:
      this = MEMORY[0x19AEA534C](v27);
    v40 = *(_QWORD *)(v27 + 16) - 1;
    *(_QWORD *)(v27 + 16) = v40;
    if (v40)
    {
      v44 = __ldxr((unsigned __int8 *)v27);
      if (v44 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v27))
          return this;
      }
      else
      {
        __clrex();
      }
      return WTF::Lock::unlockSlow((WTF::Lock *)v27);
    }
    v41 = *(_QWORD *)(v27 + 8);
    v42 = __ldxr((unsigned __int8 *)v27);
    if (v42 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v27))
        goto LABEL_106;
    }
    else
    {
      __clrex();
    }
    this = WTF::Lock::unlockSlow((WTF::Lock *)v27);
LABEL_106:
    if (!v41)
      return WTF::fastFree((WTF *)v27, v33);
  }
  return this;
}

void sub_1947ABAEC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::Lock *a15)
{
  uint64_t v15;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;

  if (__ldaxr((unsigned __int8 *)v15))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v15))
  {
LABEL_6:
    v18 = *(_QWORD *)(v15 + 16) - 1;
    *(_QWORD *)(v15 + 16) = v18;
    if (v18)
    {
      v21 = __ldxr((unsigned __int8 *)v15);
      if (v21 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v15))
          goto LABEL_14;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v15);
LABEL_14:
      _Unwind_Resume(exception_object);
    }
    v19 = *(_QWORD *)(v15 + 8);
    v20 = __ldxr((unsigned __int8 *)v15);
    if (v20 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v15))
      {
LABEL_12:
        if (!v19)
          WTF::fastFree((WTF *)v15, a2);
        goto LABEL_14;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v15);
    goto LABEL_12;
  }
  MEMORY[0x19AEA534C](v15);
  goto LABEL_6;
}

void sub_1947ABD18(_Unwind_Exception *a1)
{
  uint64_t v1;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WebMResourceClientParent,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v1 + 56));
  _Unwind_Resume(a1);
}

_QWORD *WebCore::MediaPlayerPrivateWebM::didBecomeReadyForMoreSamples(_QWORD *this, WTF::String *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  id *v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  int8x8_t v12;
  uint8x8_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t ***v20;
  uint64_t **v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD v25[4];
  WTF::String *v26;

  v2 = (uint64_t)this;
  v26 = a2;
  v3 = this[46];
  v4 = this[47];
  v25[0] = "MediaPlayerPrivateWebM";
  v25[1] = 23;
  v25[2] = "didBecomeReadyForMoreSamples";
  v25[3] = v4;
  if (*(_BYTE *)(v3 + 12))
  {
    if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
    {
      this = (_QWORD *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,unsigned long long>((uint64_t)&WebCore::LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)v25, &v26);
      a2 = v26;
    }
  }
  if (*(_BYTE *)(v2 + 600) && *(WTF::String **)(v2 + 592) == a2)
  {
    v6 = *(_QWORD *)(v2 + 152);
    if (v6)
    {
      this = *(_QWORD **)(v6 + 64);
      *(_QWORD *)(v6 + 64) = 0;
      if (this)
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
    }
    v7 = *(_QWORD *)(v2 + 256);
    if (v7)
    {
      v8 = (id *)(v7 + 8);
      goto LABEL_15;
    }
    goto LABEL_16;
  }
  v12 = *(int8x8_t *)(v2 + 296);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8(v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v14 = (unint64_t)a2;
      if ((unint64_t)a2 >= *(_QWORD *)&v12)
        v14 = (unint64_t)a2 % *(_QWORD *)&v12;
    }
    else
    {
      v14 = (*(_QWORD *)&v12 - 1) & (unint64_t)a2;
    }
    v15 = *(_QWORD **)(*(_QWORD *)(v2 + 288) + 8 * v14);
    if (v15)
    {
      v16 = (_QWORD *)*v15;
      if (v16)
      {
        if (v13.u32[0] < 2uLL)
        {
          v17 = *(_QWORD *)&v12 - 1;
          do
          {
            v18 = v16[1];
            if ((WTF::String *)v18 == a2)
            {
              if ((WTF::String *)v16[2] == a2)
                goto LABEL_62;
            }
            else if ((v18 & v17) != v14)
            {
              return this;
            }
            v16 = (_QWORD *)*v16;
          }
          while (v16);
          return this;
        }
        do
        {
          v19 = v16[1];
          if ((WTF::String *)v19 == a2)
          {
            if ((WTF::String *)v16[2] == a2)
            {
LABEL_62:
              v8 = (id *)(v16 + 3);
LABEL_15:
              this = (_QWORD *)objc_msgSend(*v8, "stopRequestingMediaData");
LABEL_16:
              v9 = *(_QWORD *)(v2 + 208);
              if (v9)
              {
                v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
                v10.i16[0] = vaddlv_u8(v10);
                if (v10.u32[0] > 1uLL)
                {
                  v11 = (unint64_t)v26;
                  if (v9 <= (unint64_t)v26)
                    v11 = (unint64_t)v26 % v9;
                }
                else
                {
                  v11 = (v9 - 1) & (unint64_t)v26;
                }
                v20 = *(uint64_t ****)(*(_QWORD *)(v2 + 200) + 8 * v11);
                if (v20)
                {
                  v21 = *v20;
                  if (v21)
                  {
                    if (v10.u32[0] >= 2uLL)
                    {
                      while (1)
                      {
                        v24 = (unint64_t)v21[1];
                        if ((WTF::String *)v24 == v26)
                        {
                          if (v21[2] == (uint64_t *)v26)
                            return (_QWORD *)WebCore::MediaPlayerPrivateWebM::provideMediaData((WebCore::MediaPlayerPrivateWebM *)v2, (WebCore::TrackBuffer *)v21[3], (unint64_t)v26);
                        }
                        else
                        {
                          if (v24 >= v9)
                            v24 %= v9;
                          if (v24 != v11)
                            return this;
                        }
                        v21 = (uint64_t **)*v21;
                        if (!v21)
                          return this;
                      }
                    }
                    v22 = v9 - 1;
                    do
                    {
                      v23 = (unint64_t)v21[1];
                      if ((WTF::String *)v23 == v26)
                      {
                        if (v21[2] == (uint64_t *)v26)
                          return (_QWORD *)WebCore::MediaPlayerPrivateWebM::provideMediaData((WebCore::MediaPlayerPrivateWebM *)v2, (WebCore::TrackBuffer *)v21[3], (unint64_t)v26);
                      }
                      else if ((v23 & v22) != v11)
                      {
                        return this;
                      }
                      v21 = (uint64_t **)*v21;
                    }
                    while (v21);
                  }
                }
              }
              return this;
            }
          }
          else
          {
            if (v19 >= *(_QWORD *)&v12)
              v19 %= *(_QWORD *)&v12;
            if (v19 != v14)
              return this;
          }
          v16 = (_QWORD *)*v16;
        }
        while (v16);
      }
    }
  }
  return this;
}

uint64_t __copy_helper_block_e8_40c65_ZTSN3WTF17ThreadSafeWeakPtrIN7WebCore22MediaPlayerPrivateWebMEEE(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t v8;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 40);
  if (!v4)
  {
    v6 = 0;
    goto LABEL_13;
  }
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
LABEL_5:
    result = MEMORY[0x19AEA534C](v4);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v4))
    goto LABEL_5;
LABEL_6:
  if (*(_QWORD *)(v4 + 24))
  {
    ++*(_QWORD *)(v4 + 16);
    v6 = v4;
  }
  else
  {
    v6 = 0;
  }
  v7 = __ldxr((unsigned __int8 *)v4);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
      goto LABEL_13;
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_13:
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(v3 + 40) = v6;
  *(_QWORD *)(v3 + 48) = v8;
  return result;
}

uint64_t __destroy_helper_block_e8_40c65_ZTSN3WTF17ThreadSafeWeakPtrIN7WebCore22MediaPlayerPrivateWebMEEE(uint64_t result, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;

  v2 = *(_QWORD *)(result + 40);
  *(_QWORD *)(result + 40) = 0;
  if (!v2)
    return result;
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_6;
  }
  result = MEMORY[0x19AEA534C](v2);
LABEL_6:
  v4 = *(_QWORD *)(v2 + 16) - 1;
  *(_QWORD *)(v2 + 16) = v4;
  if (v4)
  {
    v7 = __ldxr((unsigned __int8 *)v2);
    if (v7 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v2))
        return result;
    }
    else
    {
      __clrex();
    }
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  v5 = *(_QWORD *)(v2 + 8);
  v6 = __ldxr((unsigned __int8 *)v2);
  if (v6 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v2))
    {
      if (!v5)
        return WTF::fastFree((WTF *)v2, a2);
      return result;
    }
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)v2);
  if (!v5)
    return WTF::fastFree((WTF *)v2, a2);
  return result;
}

void WebCore::MediaPlayerPrivateWebM::maybeFinishLoading(WebCore::MediaPlayerPrivateWebM *this)
{
  WebCore::MediaPlayerPrivateWebM *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *i;
  const WTF::MediaTime *v8;
  const WTF::MediaTime *v9;
  uint64_t v10;
  __int128 v11;
  const char *v12;
  uint64_t v13;

  if (*((_BYTE *)this + 622))
  {
    v1 = this;
    if (!*((_DWORD *)this + 153))
    {
      if (*((_BYTE *)this + 618) || *((_BYTE *)this + 617))
      {
        if (*((_BYTE *)this + 624))
        {
          v2 = *((_QWORD *)this + 46);
          v3 = *((_QWORD *)this + 47);
          *(_QWORD *)&v11 = "MediaPlayerPrivateWebM";
          *((_QWORD *)&v11 + 1) = 23;
          v12 = "maybeFinishLoading";
          v13 = v3;
          if (*(_BYTE *)(v2 + 12))
            WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [14]>((uint64_t)&WebCore::LogMedia, 1u, (WTF::Logger::LogSiteIdentifier *)&v11, "parsing error");
          if (*((_BYTE *)v1 + 345))
            v4 = 6;
          else
            v4 = 4;
          WebCore::MediaPlayerPrivateWebM::setNetworkState((unsigned __int8 *)v1, v4);
        }
        else
        {
          if (*((_BYTE *)this + 345))
            this = (WebCore::MediaPlayerPrivateWebM *)WebCore::MediaPlayerPrivateWebM::setNetworkState((unsigned __int8 *)this, 1);
          else
            *((_BYTE *)this + 623) = 1;
          v11 = *(_OWORD *)WTF::MediaTime::zeroTime(this);
          for (i = (_QWORD *)*((_QWORD *)v1 + 27); i; i = (_QWORD *)*i)
          {
            if ((WTF::MediaTime::operator!() & 1) == 0)
            {
              v8 = (const WTF::MediaTime *)(i[3] + 160);
              if (WTF::MediaTime::compare((WTF::MediaTime *)&v11, v8) == -1)
                v9 = v8;
              else
                v9 = (const WTF::MediaTime *)&v11;
              v10 = *(_QWORD *)((char *)v9 + 5);
              *(_QWORD *)&v11 = *(_QWORD *)v9;
              *(_QWORD *)((char *)&v11 + 5) = v10;
            }
          }
          WebCore::MediaPlayerPrivateWebM::setDuration((uint64_t)v1, v11, *((uint64_t *)&v11 + 1));
        }
      }
      else
      {
        v5 = *((_QWORD *)this + 46);
        v6 = *((_QWORD *)this + 47);
        *(_QWORD *)&v11 = "MediaPlayerPrivateWebM";
        *((_QWORD *)&v11 + 1) = 23;
        v12 = "maybeFinishLoading";
        v13 = v6;
        if (*(_BYTE *)(v5 + 12))
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [37]>((uint64_t)&WebCore::LogMedia, 1u, (WTF::Logger::LogSiteIdentifier *)&v11, "could not load audio or video tracks");
        WebCore::MediaPlayerPrivateWebM::setNetworkState((unsigned __int8 *)v1, 4);
        WebCore::MediaPlayerPrivateWebM::setReadyState((uint64_t)v1, 0);
      }
    }
  }
}

void WebCore::MediaPlayerPrivateWebM::addTrackBuffer(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned __int16 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  _QWORD *v33[4];

  v31 = a2;
  if (*(_BYTE *)(a1 + 617))
  {
    v5 = 1;
    v6 = 1;
  }
  else
  {
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a3 + 24))(*a3);
    v5 = *(unsigned __int8 *)(a1 + 617);
  }
  if (v5 == v6)
    goto LABEL_17;
  *(_BYTE *)(a1 + 617) = v6;
  v7 = *(_QWORD *)(a1 + 96);
  if (!v7)
    goto LABEL_17;
  v8 = *(_QWORD *)(a1 + 104);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_10;
  }
  MEMORY[0x19AEA534C](v7);
LABEL_10:
  if (*(_QWORD *)(v7 + 24))
    ++*(_QWORD *)(v7 + 8);
  else
    v8 = 0;
  v10 = __ldxr((unsigned __int8 *)v7);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
    {
      if (!v8)
        goto LABEL_17;
      goto LABEL_16;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
  if (v8)
  {
LABEL_16:
    (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v8 + 8) + 8) + 128))(*(_QWORD *)(*(_QWORD *)(v8 + 8)
                                                                                                  + 8));
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v8);
  }
LABEL_17:
  if (*(_BYTE *)(a1 + 618))
  {
    v11 = 1;
    v12 = 1;
  }
  else
  {
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a3 + 16))(*a3);
    v11 = *(unsigned __int8 *)(a1 + 618);
  }
  if (v11 == v12)
    goto LABEL_36;
  *(_BYTE *)(a1 + 618) = v12;
  v13 = *(_QWORD *)(a1 + 96);
  if (!v13)
    goto LABEL_36;
  v14 = *(_QWORD *)(a1 + 104);
  if (__ldaxr((unsigned __int8 *)v13))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v13))
  {
    goto LABEL_29;
  }
  MEMORY[0x19AEA534C](v13);
LABEL_29:
  if (*(_QWORD *)(v13 + 24))
    ++*(_QWORD *)(v13 + 8);
  else
    v14 = 0;
  v16 = __ldxr((unsigned __int8 *)v13);
  if (v16 != 1)
  {
    __clrex();
LABEL_49:
    WTF::Lock::unlockSlow((WTF::Lock *)v13);
    if (!v14)
      goto LABEL_36;
    goto LABEL_35;
  }
  if (__stlxr(0, (unsigned __int8 *)v13))
    goto LABEL_49;
  if (v14)
  {
LABEL_35:
    (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v14 + 8) + 8) + 128))(*(_QWORD *)(*(_QWORD *)(v14 + 8) + 8));
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v14);
  }
LABEL_36:
  v17.n128_f64[0] = WebCore::TrackBuffer::create(a3, &WebCore::discontinuityTolerance, &v30);
  v18 = v30;
  v19 = *(_QWORD *)(a1 + 368);
  v20 = *(_QWORD *)(a1 + 376);
  v21 = (unsigned int *)(v19 + 8);
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 + 1, v21));
  v23 = *(unsigned int **)(v18 + 288);
  *(_QWORD *)(v18 + 288) = v19;
  if (v23)
  {
    v24 = v23 + 2;
    do
    {
      v25 = __ldaxr(v24);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, v24));
    if (!v26)
    {
      atomic_store(1u, v23 + 2);
      (*(void (**)(unsigned int *, __n128))(*(_QWORD *)v23 + 8))(v23, v17);
    }
  }
  v27 = WTF::cryptographicallyRandomNumber<unsigned int>();
  *(_QWORD *)(v18 + 296) = v20 & 0xFFFFFFFFFFFF0000 | v27;
  v28 = *(_QWORD *)(v18 + 288);
  v33[0] = "TrackBuffer";
  v33[1] = (_QWORD *)12;
  v33[2] = "setLogger";
  v33[3] = (_QWORD *)(v20 & 0xFFFFFFFFFFFF0000 | v27);
  if (*(_BYTE *)(v28 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v33);
  v33[0] = &v31;
  v32 = &v30;
  std::__hash_table<std::__hash_value_type<unsigned long long,WTF::UniqueRef<WebCore::TrackBuffer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::UniqueRef<WebCore::TrackBuffer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::UniqueRef<WebCore::TrackBuffer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::UniqueRef<WebCore::TrackBuffer>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<WTF::UniqueRef<WebCore::TrackBuffer>&&>>(a1 + 200, &v31, (uint64_t)&std::piecewise_construct, v33, &v32);
  v29 = v30;
  v30 = 0;
  if (v29)
    std::default_delete<WebCore::TrackBuffer>::operator()[abi:sn180100]((uint64_t)&v30, v29);
}

void sub_1947AC58C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11;

  v11 = a10;
  a10 = 0;
  if (v11)
    std::default_delete<WebCore::TrackBuffer>::operator()[abi:sn180100]((uint64_t)&a10, v11);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::MediaPlayerPrivateWebM::flushVideo(WebCore::MediaPlayerPrivateWebM *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  WebCore::WebCoreDecompressionSession *v6;
  WebCore::WebCoreDecompressionSession *v7;
  void *v8;
  uint64_t v9;
  WTF *v10;
  const char *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;

  v2 = *((_QWORD *)this + 46);
  v3 = *((_QWORD *)this + 47);
  v12 = "MediaPlayerPrivateWebM";
  v13 = 23;
  v14 = "flushVideo";
  v15 = v3;
  if (*(_BYTE *)(v2 + 12))
  {
    if (WebCore::LogMedia && byte_1ECE7C490 >= 4u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 4, (WTF::Logger::LogSiteIdentifier *)&v12);
  }
  v5 = *((_QWORD *)this + 32);
  if (v5)
  {
    objc_msgSend(*(id *)(v5 + 8), "flush", v12, v13, v14, v15);
    v6 = *(WebCore::WebCoreDecompressionSession **)(v5 + 16);
    if (v6)
      WebCore::WebCoreDecompressionSession::flush(v6);
  }
  v7 = (WebCore::WebCoreDecompressionSession *)*((_QWORD *)this + 19);
  if (v7)
  {
    WebCore::WebCoreDecompressionSession::flush(v7);
    if (!*((_QWORD *)this + 67))
    {
      v9 = WTF::fastMalloc((WTF *)3);
      *(_WORD *)v9 = 0;
      *(_BYTE *)(v9 + 2) = 0;
      v10 = (WTF *)*((_QWORD *)this + 67);
      *((_QWORD *)this + 67) = v9;
      if (v10)
        WTF::fastFree(v10, v8);
    }
    WebCore::MediaPlayerPrivateWebM::registerNotifyWhenHasAvailableVideoFrame(this);
  }
  return WebCore::MediaPlayerPrivateWebM::setHasAvailableVideoFrame((uint64_t)this, 0);
}

_QWORD *WebCore::MediaPlayerPrivateWebM::registerNotifyWhenHasAvailableVideoFrame(_QWORD *this)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  opaqueCMBufferQueue *v9;
  _QWORD *v10;
  PAL *v11;
  WTF::RunLoop *v12;

  v1 = this[19];
  if (v1)
  {
    v2 = this;
    v3 = this[9];
    if (v3)
      goto LABEL_17;
    v3 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v3 = 1;
    *(_QWORD *)(v3 + 8) = v2 + 8;
    v5 = (unsigned int *)v2[9];
    v2[9] = v3;
    if (!v5)
      goto LABEL_17;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, v4);
    }
    v3 = v2[9];
    if (v3)
    {
LABEL_17:
      do
        v8 = __ldaxr((unsigned int *)v3);
      while (__stlxr(v8 + 1, (unsigned int *)v3));
    }
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v10 = &off_1E3207148;
    v10[1] = v3;
    v10[2] = v2;
    v11 = *(PAL **)(v1 + 24);
    if (v11 && (v12 = (WTF::RunLoop *)PAL::softLinkCoreMediaCMBufferQueueIsEmpty[0](v11, v9), !(_DWORD)v12))
    {
      WTF::RunLoop::main(v12);
      WTF::RunLoop::dispatch();
      this = v10;
      if (!v10)
        return this;
    }
    else
    {
      this = *(_QWORD **)(v1 + 72);
      *(_QWORD *)(v1 + 72) = v10;
      if (!this)
        return this;
    }
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void sub_1947AC7A0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  unsigned int *v10;
  unsigned int v12;
  unsigned int v13;

  if (v10)
  {
    do
    {
      v12 = __ldaxr(v10);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v10));
    if (!v13)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_40c101_ZTSN3WTF7WeakPtrIN7WebCore22MediaPlayerPrivateWebMENS_18DefaultWeakPtrImplENS_12RawPtrTraitsIS3_EEEE(uint64_t result, uint64_t a2)
{
  unsigned int *v2;
  unsigned int v3;

  v2 = *(unsigned int **)(a2 + 40);
  if (v2)
  {
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
  }
  *(_QWORD *)(result + 40) = v2;
  return result;
}

unsigned int *__destroy_helper_block_e8_40c101_ZTSN3WTF7WeakPtrIN7WebCore22MediaPlayerPrivateWebMENS_18DefaultWeakPtrImplENS_12RawPtrTraitsIS3_EEEE(uint64_t a1, void *a2)
{
  unsigned int *result;
  unsigned int v4;
  unsigned int v5;

  result = *(unsigned int **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr(result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, result));
    if (!v5)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

WTF *WebCore::MediaPlayerPrivateWebM::startVideoFrameMetadataGathering(WTF *this, uint64_t a2, int a3)
{
  WebCore::MediaPlayerPrivateWebM *v3;
  uint64_t v4;
  dispatch_source_s *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  char v14;
  const void *v15;
  void *v16;
  const void *v17;
  const void *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD v23[4];
  WTF *v24;
  WebCore::MediaPlayerPrivateWebM *v25;
  _BYTE v26[24];

  if (*((_QWORD *)this + 49))
    return this;
  v3 = this;
  *((_BYTE *)this + 400) = 1;
  if (*((_BYTE *)this + 618))
  {
    if (WebCore::MediaPlayerPrivateWebM::shouldEnsureLayerOrVideoRenderer(this))
    {
      WebCore::MediaPlayerPrivateWebM::destroyDecompressionSession(v3, v4, v5);
      WebCore::MediaPlayerPrivateWebM::ensureLayerOrVideoRenderer(v3);
    }
    else
    {
      WebCore::MediaPlayerPrivateWebM::destroyLayerOrVideoRenderer(v3);
      WebCore::MediaPlayerPrivateWebM::ensureDecompressionSession(v3);
    }
  }
  v6 = (void *)*((_QWORD *)v3 + 14);
  PAL::softLinkCoreMediaCMTimeMake((PAL *)1, 60, a3);
  v23[0] = MEMORY[0x1E0C809B0];
  v23[1] = 3321888768;
  v23[2] = ___ZN7WebCore22MediaPlayerPrivateWebM32startVideoFrameMetadataGatheringEv_block_invoke;
  v23[3] = &__block_descriptor_48_e8_32c80_ZTSKZN7WebCore22MediaPlayerPrivateWebM32startVideoFrameMetadataGatheringEvE3__0_e15_v32__0___qiIq_8l;
  v7 = *((_QWORD *)v3 + 9);
  if (v7)
    goto LABEL_32;
  v7 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v7 = 1;
  *(_QWORD *)(v7 + 8) = (char *)v3 + 64;
  v9 = (unsigned int *)*((_QWORD *)v3 + 9);
  *((_QWORD *)v3 + 9) = v7;
  if (!v9)
    goto LABEL_32;
  do
  {
    v10 = __ldaxr(v9);
    v11 = v10 - 1;
  }
  while (__stlxr(v11, v9));
  if (!v11)
  {
    atomic_store(1u, v9);
    WTF::fastFree((WTF *)v9, v8);
  }
  v7 = *((_QWORD *)v3 + 9);
  if (v7)
  {
LABEL_32:
    do
      v12 = __ldaxr((unsigned int *)v7);
    while (__stlxr(v12 + 1, (unsigned int *)v7));
    do
      v13 = __ldaxr((unsigned int *)v7);
    while (__stlxr(v13 + 1, (unsigned int *)v7));
    v14 = 0;
  }
  else
  {
    v14 = 1;
  }
  v24 = (WTF *)v7;
  v25 = v3;
  v15 = (const void *)objc_msgSend(v6, "addPeriodicTimeObserverForInterval:queue:usingBlock:", v26, MEMORY[0x1E0C80D38], v23);
  v17 = v15;
  if (v15)
    CFRetain(v15);
  v18 = (const void *)*((_QWORD *)v3 + 49);
  *((_QWORD *)v3 + 49) = v17;
  if (v18)
  {
    CFRelease(v18);
    if ((v14 & 1) != 0)
      goto LABEL_24;
    do
    {
LABEL_21:
      v19 = __ldaxr((unsigned int *)v7);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, (unsigned int *)v7));
    if (!v20)
    {
      atomic_store(1u, (unsigned int *)v7);
      WTF::fastFree((WTF *)v7, v16);
    }
    goto LABEL_24;
  }
  if ((v14 & 1) == 0)
    goto LABEL_21;
LABEL_24:
  this = v24;
  v24 = 0;
  if (this)
  {
    do
    {
      v21 = __ldaxr((unsigned int *)this);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, (unsigned int *)this));
    if (!v22)
    {
      atomic_store(1u, (unsigned int *)this);
      return (WTF *)WTF::fastFree(this, v16);
    }
  }
  return this;
}

void sub_1947ACA5C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF *a14)
{
  unsigned int *v14;
  char v15;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;

  if (!a14)
    goto LABEL_4;
  do
  {
    v17 = __ldaxr((unsigned int *)a14);
    v18 = v17 - 1;
  }
  while (__stlxr(v18, (unsigned int *)a14));
  if (!v18)
  {
    atomic_store(1u, (unsigned int *)a14);
    WTF::fastFree(a14, a2);
    if ((v15 & 1) != 0)
      goto LABEL_8;
  }
  else
  {
LABEL_4:
    if ((v15 & 1) != 0)
      goto LABEL_8;
  }
  do
  {
    v19 = __ldaxr(v14);
    v20 = v19 - 1;
  }
  while (__stlxr(v20, v14));
  if (!v20)
  {
    atomic_store(1u, v14);
    WTF::fastFree((WTF *)v14, a2);
  }
LABEL_8:
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN7WebCore22MediaPlayerPrivateWebM32startVideoFrameMetadataGatheringEv_block_invoke(uint64_t a1, __int128 *a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t result;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_OWORD *)(a1 + 32);
  if ((_QWORD)v5)
  {
    do
      v2 = __ldaxr((unsigned int *)v5);
    while (__stlxr(v2 + 1, (unsigned int *)v5));
  }
  v6 = *a2;
  v7 = *((_QWORD *)a2 + 2);
  v3 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v3 = &off_1E3206EE0;
  *(_OWORD *)(v3 + 8) = v5;
  *(_OWORD *)(v3 + 24) = v6;
  *(_QWORD *)(v3 + 40) = v7;
  v8 = v3;
  WTF::ensureOnMainThread();
  result = v8;
  if (v8)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return result;
}

void sub_1947ACB68(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 - 24);
  *(_QWORD *)(v1 - 24) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c80_ZTSKZN7WebCore22MediaPlayerPrivateWebM32startVideoFrameMetadataGatheringEvE3__0(uint64_t result, uint64_t a2)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;

  v2 = *(unsigned int **)(a2 + 32);
  if (v2)
  {
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
  }
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = v2;
  *(_QWORD *)(result + 40) = v4;
  return result;
}

unsigned int *__destroy_helper_block_e8_32c80_ZTSKZN7WebCore22MediaPlayerPrivateWebM32startVideoFrameMetadataGatheringEvE3__0(uint64_t a1, void *a2)
{
  unsigned int *result;
  unsigned int v4;
  unsigned int v5;

  result = *(unsigned int **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr(result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, result));
    if (!v5)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

void WebCore::MediaPlayerPrivateWebM::stopVideoFrameMetadataGathering(WebCore::MediaPlayerPrivateWebM *this)
{
  uint64_t v2;
  dispatch_source_s *v3;
  const void *v4;

  *((_BYTE *)this + 400) = 0;
  if (*((_BYTE *)this + 618))
  {
    if (WebCore::MediaPlayerPrivateWebM::shouldEnsureLayerOrVideoRenderer(this))
    {
      WebCore::MediaPlayerPrivateWebM::destroyDecompressionSession(this, v2, v3);
      WebCore::MediaPlayerPrivateWebM::ensureLayerOrVideoRenderer(this);
    }
    else
    {
      WebCore::MediaPlayerPrivateWebM::destroyLayerOrVideoRenderer(this);
      WebCore::MediaPlayerPrivateWebM::ensureDecompressionSession(this);
    }
  }
  *((_BYTE *)this + 408) = 0;
  *((_BYTE *)this + 504) = 0;
  if (*((_QWORD *)this + 49))
  {
    objc_msgSend(*((id *)this + 14), "removeTimeObserver:");
    v4 = (const void *)*((_QWORD *)this + 49);
    *((_QWORD *)this + 49) = 0;
    if (v4)
      CFRelease(v4);
  }
  else
  {
    *((_QWORD *)this + 49) = 0;
  }
}

char *`non-virtual thunk to'WebCore::MediaPlayerPrivateWebM::logChannel(WebCore::MediaPlayerPrivateWebM *this)
{
  return &WebCore::LogMedia;
}

void WebCore::MediaPlayerPrivateWebM::registerMediaEngine(void (*a1)(_QWORD *))
{
  PAL *v2;
  PAL *AVSampleBufferAudioRendererClass;
  PAL *AVSampleBufferRenderSynchronizerClass;
  objc_class *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD block[4];
  char v9;

  if (MEMORY[0x1E0DCD7A0])
  {
    v2 = (PAL *)PAL::AVFoundationLibrary((PAL *)1);
    if (v2)
    {
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 0x40000000;
      block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
      block[3] = &__block_descriptor_tmp_1;
      v9 = 1;
      if (PAL::CoreMediaLibrary(BOOL)::once != -1)
        dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
      if (PAL::CoreMediaLibrary(BOOL)::frameworkLibrary)
      {
        AVSampleBufferAudioRendererClass = (PAL *)PAL::getAVSampleBufferAudioRendererClass(v2);
        if (AVSampleBufferAudioRendererClass)
        {
          AVSampleBufferRenderSynchronizerClass = (PAL *)PAL::getAVSampleBufferRenderSynchronizerClass(AVSampleBufferAudioRendererClass);
          if (AVSampleBufferRenderSynchronizerClass)
          {
            v5 = (objc_class *)PAL::getAVSampleBufferAudioRendererClass(AVSampleBufferRenderSynchronizerClass);
            if (class_getInstanceMethod(v5, sel_setMuted_))
            {
              v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
              *v6 = off_1E3206F08;
              v6[1] = 0;
              block[0] = v6;
              a1(block);
              v7 = block[0];
              block[0] = 0;
              if (v7)
                (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
            }
          }
        }
      }
    }
  }
}

void sub_1947ACDC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::MediaPlayerPrivateWebM::videoRendererDidReceiveError(unsigned __int8 *a1, void *a2, void *a3)
{
  uint64_t result;
  _BYTE *v6;

  if (objc_msgSend(a2, "status") == 2
    && objc_msgSend((id)objc_msgSend(a3, "domain"), "isEqualToString:", CFSTR("AVFoundationErrorDomain"))
    && (result = objc_msgSend(a3, "code"), result == -11847))
  {
    v6 = a1 + 616;
  }
  else
  {
    WebCore::MediaPlayerPrivateWebM::setNetworkState(a1, 6);
    result = WebCore::MediaPlayerPrivateWebM::setReadyState((uint64_t)a1, 0);
    v6 = a1 + 624;
  }
  *v6 = 1;
  return result;
}

uint64_t `non-virtual thunk to'WebCore::MediaPlayerPrivateWebM::videoRendererDidReceiveError(uint64_t a1, void *a2, void *a3)
{
  uint64_t result;
  uint64_t v6;

  if (objc_msgSend(a2, "status") == 2
    && objc_msgSend((id)objc_msgSend(a3, "domain"), "isEqualToString:", CFSTR("AVFoundationErrorDomain"))
    && (result = objc_msgSend(a3, "code"), result == -11847))
  {
    v6 = 552;
  }
  else
  {
    WebCore::MediaPlayerPrivateWebM::setNetworkState((unsigned __int8 *)(a1 - 64), 6);
    result = WebCore::MediaPlayerPrivateWebM::setReadyState(a1 - 64, 0);
    v6 = 560;
  }
  *(_BYTE *)(a1 + v6) = 1;
  return result;
}

uint64_t WebCore::MediaPlayerPrivateWebM::audioRendererDidReceiveError(WebCore::MediaPlayerPrivateWebM *this, AVSampleBufferAudioRenderer *a2, NSError *a3)
{
  uint64_t result;

  WebCore::MediaPlayerPrivateWebM::setNetworkState((unsigned __int8 *)this, 6);
  result = WebCore::MediaPlayerPrivateWebM::setReadyState((uint64_t)this, 0);
  *((_BYTE *)this + 624) = 1;
  return result;
}

uint64_t `non-virtual thunk to'WebCore::MediaPlayerPrivateWebM::audioRendererDidReceiveError(WebCore::MediaPlayerPrivateWebM *this, AVSampleBufferAudioRenderer *a2, NSError *a3)
{
  char *v4;
  uint64_t result;

  v4 = (char *)this - 64;
  WebCore::MediaPlayerPrivateWebM::setNetworkState((unsigned __int8 *)this - 64, 6);
  result = WebCore::MediaPlayerPrivateWebM::setReadyState((uint64_t)v4, 0);
  *((_BYTE *)this + 560) = 1;
  return result;
}

uint64_t WebCore::MediaPlayerPrivateWebM::videoRendererReadyForDisplayChanged(uint64_t result, void *a2, int a3)
{
  uint64_t v3;
  uint64_t v5;
  PAL *v6;
  OpaqueCMTimebase *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];
  _QWORD v11[7];

  v3 = *(_QWORD *)(result + 256);
  if (v3)
  {
    if (*(void **)(v3 + 8) == a2 && a3 != 0)
    {
      v5 = result;
      memset(&v11[4], 0, 24);
      v6 = (PAL *)objc_msgSend(a2, "timebase");
      PAL::softLinkCoreMediaCMTimebaseGetTime[0](v6, v7);
      v8 = *(_QWORD *)(v5 + 368);
      v9 = *(_QWORD *)(v5 + 376);
      v11[0] = "MediaPlayerPrivateWebM";
      v11[1] = 23;
      v11[2] = "videoRendererReadyForDisplayChanged";
      v11[3] = v9;
      v10[0] = 0;
      v10[1] = 0;
      if (*(_BYTE *)(v8 + 12))
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [25],BOOL,char [17],WTF::MediaTime>((WTF::Logger::LogSiteIdentifier *)v11, v5 + 788, (WTF::MediaTime *)v10);
      return WebCore::MediaPlayerPrivateWebM::setHasAvailableVideoFrame(v5, 1);
    }
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::MediaPlayerPrivateWebM::videoRendererReadyForDisplayChanged(uint64_t result, void *a2, int a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  PAL *v7;
  OpaqueCMTimebase *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];
  _QWORD v12[7];

  v3 = *(_QWORD *)(result + 192);
  if (v3)
  {
    if (*(void **)(v3 + 8) == a2 && a3 != 0)
    {
      v5 = result;
      v6 = result - 64;
      memset(&v12[4], 0, 24);
      v7 = (PAL *)objc_msgSend(a2, "timebase");
      PAL::softLinkCoreMediaCMTimebaseGetTime[0](v7, v8);
      v9 = *(_QWORD *)(v5 + 304);
      v10 = *(_QWORD *)(v5 + 312);
      v12[0] = "MediaPlayerPrivateWebM";
      v12[1] = 23;
      v12[2] = "videoRendererReadyForDisplayChanged";
      v12[3] = v10;
      v11[0] = 0;
      v11[1] = 0;
      if (*(_BYTE *)(v9 + 12))
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [25],BOOL,char [17],WTF::MediaTime>((WTF::Logger::LogSiteIdentifier *)v12, v5 + 724, (WTF::MediaTime *)v11);
      return WebCore::MediaPlayerPrivateWebM::setHasAvailableVideoFrame(v6, 1);
    }
  }
  return result;
}

void WebCore::MediaPlayerPrivateWebM::setVideoRenderer(uint64_t a1, const void *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::WebCoreDecompressionSession *v7;
  void *v8;
  uint64_t v9;
  uint64_t v11;
  WebCore::WebCoreDecompressionSession *v12;
  void *v13;
  unsigned __int8 *v14;
  uint64_t v16;
  uint64_t v17;
  id *v18;
  BOOL v19;
  int v20;
  WTF *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  unsigned __int8 **v25;
  unsigned __int8 *v26;
  uint64_t v28;
  uint64_t v29;
  id *v30;
  BOOL v31;
  int v32;
  WTF *v33;
  void *v34;
  WebCore::VideoMediaSampleRenderer *v35;
  uint64_t v36;
  uint64_t v38;
  int v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id *v44;
  BOOL v45;
  int v46;
  WTF *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[4];

  v4 = *(uint64_t **)(a1 + 256);
  if (!v4 || (const void *)v4[1] != a2)
  {
    v5 = *(_QWORD *)(a1 + 368);
    v6 = *(_QWORD *)(a1 + 376);
    v52[0] = "MediaPlayerPrivateWebM";
    v52[1] = 23;
    v52[2] = "setVideoRenderer";
    v52[3] = v6;
    if (*(_BYTE *)(v5 + 12))
    {
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [14],BOOL>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v52, "!!renderer = ");
      v4 = *(uint64_t **)(a1 + 256);
    }
    if (!v4)
    {
LABEL_29:
      if (!a2)
        return;
      v23 = WTF::fastMalloc((WTF *)0x58);
      WebCore::VideoMediaSampleRenderer::VideoMediaSampleRenderer(v23, a2);
      v25 = *(unsigned __int8 ***)(a1 + 256);
      *(_QWORD *)(a1 + 256) = v23;
      if (!v25)
      {
LABEL_47:
        v35 = *(WebCore::VideoMediaSampleRenderer **)(a1 + 256);
        WTF::MachSendRight::MachSendRight((WTF::MachSendRight *)v52, (const WTF::MachSendRight *)(a1 + 528));
        WTF::MachSendRight::operator=();
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v52);
        v36 = *(_QWORD *)(a1 + 56);
        if (!v36)
        {
          v38 = 0;
          goto LABEL_59;
        }
        if (__ldaxr((unsigned __int8 *)v36))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v36))
        {
LABEL_52:
          if (*(_QWORD *)(v36 + 24))
          {
            ++*(_QWORD *)(v36 + 16);
            v38 = v36;
          }
          else
          {
            v38 = 0;
          }
          v39 = __ldxr((unsigned __int8 *)v36);
          if (v39 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v36))
              goto LABEL_59;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v36);
LABEL_59:
          v40 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v40 = &off_1E3207170;
          v40[1] = v38;
          v40[2] = a1;
          v41 = *((_QWORD *)v35 + 4);
          *((_QWORD *)v35 + 4) = v40;
          if (v41)
            (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
          WebCore::VideoMediaSampleRenderer::resetReadyForMoreSample(v35);
          objc_msgSend(*(id *)(*(_QWORD *)(a1 + 632) + 8), "beginObservingVideoRenderer:", *((_QWORD *)v35 + 1));
          if (*(_BYTE *)(a1 + 600))
            WebCore::MediaPlayerPrivateWebM::reenqueSamples((int8x8_t *)a1, *(_QWORD *)(a1 + 592));
          return;
        }
        MEMORY[0x19AEA534C](v36);
        goto LABEL_52;
      }
      v26 = *v25;
      if (__ldaxr(*v25))
      {
        __clrex();
      }
      else if (!__stxr(1u, v26))
      {
        goto LABEL_35;
      }
      MEMORY[0x19AEA534C](v26);
LABEL_35:
      v28 = *((_QWORD *)v26 + 1);
      v29 = v28 - 1;
      *((_QWORD *)v26 + 1) = v28 - 1;
      if (v28 == 1)
      {
        v50 = *((_QWORD *)v26 + 2);
        v30 = (id *)*((_QWORD *)v26 + 3);
        *((_QWORD *)v26 + 3) = 0;
        v31 = v50 != 0;
      }
      else
      {
        v30 = 0;
        v31 = 1;
      }
      v32 = __ldxr(v26);
      if (v32 == 1)
      {
        if (!__stlxr(0, v26))
        {
          if (v29)
            goto LABEL_47;
LABEL_43:
          if (v30)
          {
            WebCore::VideoMediaSampleRenderer::~VideoMediaSampleRenderer(v30);
            WTF::fastFree(v33, v34);
          }
          if (!v31)
            WTF::fastFree((WTF *)v26, v24);
          goto LABEL_47;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v26);
      if (v29)
        goto LABEL_47;
      goto LABEL_43;
    }
    *(_QWORD *)(a1 + 256) = 0;
    objc_msgSend((id)v4[1], "flush");
    v7 = (WebCore::WebCoreDecompressionSession *)v4[2];
    if (v7)
      WebCore::WebCoreDecompressionSession::flush(v7);
    objc_msgSend((id)v4[1], "stopRequestingMediaData");
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 632) + 8), "stopObservingVideoRenderer:", v4[1]);
    v9 = *v4;
    if (__ldaxr((unsigned __int8 *)v9))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v9))
    {
      goto LABEL_17;
    }
    MEMORY[0x19AEA534C](v9);
LABEL_17:
    v16 = *(_QWORD *)(v9 + 8);
    v17 = v16 - 1;
    *(_QWORD *)(v9 + 8) = v16 - 1;
    if (v16 == 1)
    {
      v49 = *(_QWORD *)(v9 + 16);
      v18 = *(id **)(v9 + 24);
      *(_QWORD *)(v9 + 24) = 0;
      v19 = v49 != 0;
    }
    else
    {
      v18 = 0;
      v19 = 1;
    }
    v20 = __ldxr((unsigned __int8 *)v9);
    if (v20 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v9))
      {
        if (v17)
          goto LABEL_29;
LABEL_25:
        if (v18)
        {
          WebCore::VideoMediaSampleRenderer::~VideoMediaSampleRenderer(v18);
          WTF::fastFree(v21, v22);
        }
        if (!v19)
          WTF::fastFree((WTF *)v9, v8);
        goto LABEL_29;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v9);
    if (v17)
      goto LABEL_29;
    goto LABEL_25;
  }
  v11 = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a1 + 264) = 0;
  if (!v11)
    return;
  objc_msgSend(*(id *)(v11 + 8), "flush");
  v12 = *(WebCore::WebCoreDecompressionSession **)(v11 + 16);
  if (v12)
    WebCore::WebCoreDecompressionSession::flush(v12);
  objc_msgSend(*(id *)(v11 + 8), "stopRequestingMediaData");
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 632) + 8), "stopObservingVideoRenderer:", *(_QWORD *)(v11 + 8));
  v14 = *(unsigned __int8 **)v11;
  if (__ldaxr(*(unsigned __int8 **)v11))
  {
    __clrex();
  }
  else if (!__stxr(1u, v14))
  {
    goto LABEL_65;
  }
  MEMORY[0x19AEA534C](v14);
LABEL_65:
  v42 = *((_QWORD *)v14 + 1);
  v43 = v42 - 1;
  *((_QWORD *)v14 + 1) = v42 - 1;
  if (v42 == 1)
  {
    v51 = *((_QWORD *)v14 + 2);
    v44 = (id *)*((_QWORD *)v14 + 3);
    *((_QWORD *)v14 + 3) = 0;
    v45 = v51 != 0;
  }
  else
  {
    v44 = 0;
    v45 = 1;
  }
  v46 = __ldxr(v14);
  if (v46 != 1)
  {
    __clrex();
LABEL_72:
    WTF::Lock::unlockSlow((WTF::Lock *)v14);
    if (v43)
      return;
    goto LABEL_73;
  }
  if (__stlxr(0, v14))
    goto LABEL_72;
  if (v43)
    return;
LABEL_73:
  if (v44)
  {
    WebCore::VideoMediaSampleRenderer::~VideoMediaSampleRenderer(v44);
    WTF::fastFree(v47, v48);
  }
  if (!v45)
    WTF::fastFree((WTF *)v14, v13);
}

void sub_1947AD5EC(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;

  if (!v2)
LABEL_20:
    _Unwind_Resume(exception_object);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
LABEL_7:
    v5 = *(_QWORD *)(v2 + 16) - 1;
    *(_QWORD *)(v2 + 16) = v5;
    if (v5)
    {
      v8 = __ldxr((unsigned __int8 *)v2);
      if (v8 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v2))
          goto LABEL_20;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v2);
      goto LABEL_20;
    }
    v6 = *(_QWORD *)(v2 + 8);
    v7 = __ldxr((unsigned __int8 *)v2);
    if (v7 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v2))
      {
LABEL_13:
        if (!v6)
          WTF::fastFree((WTF *)v2, a2);
        goto LABEL_20;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v2);
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v2);
  goto LABEL_7;
}

uint64_t WebCore::MediaPlayerPrivateWebM::setShouldDisableHDR(WebCore::MediaPlayerPrivateWebM *this, _BOOL8 a2)
{
  _BOOL8 v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[4];
  BOOL v8;

  v2 = a2;
  v8 = a2;
  result = objc_opt_respondsToSelector();
  if ((result & 1) != 0)
  {
    v5 = *((_QWORD *)this + 46);
    v6 = *((_QWORD *)this + 47);
    v7[0] = "MediaPlayerPrivateWebM";
    v7[1] = 23;
    v7[2] = "setShouldDisableHDR";
    v7[3] = v6;
    if (*(_BYTE *)(v5 + 12))
    {
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v7);
      v2 = v8;
    }
    return objc_msgSend(*((id *)this + 34), "setToneMapToStandardDynamicRange:", v2);
  }
  return result;
}

void WebCore::MediaPlayerPrivateWebM::playerContentBoxRectChanged(WebCore::MediaPlayerPrivateWebM *this, const WebCore::LayoutRect *a2)
{
  BOOL v2;
  uint64_t v6;
  dispatch_source_s *v7;

  if (*((_QWORD *)this + 34))
    v2 = 1;
  else
    v2 = *((_DWORD *)a2 + 2) < 1;
  if (!v2 && *((_DWORD *)a2 + 3) >= 1)
  {
    if (WebCore::MediaPlayerPrivateWebM::shouldEnsureLayerOrVideoRenderer(this))
    {
      WebCore::MediaPlayerPrivateWebM::destroyDecompressionSession(this, v6, v7);
      WebCore::MediaPlayerPrivateWebM::ensureLayerOrVideoRenderer(this);
    }
    else
    {
      WebCore::MediaPlayerPrivateWebM::destroyLayerOrVideoRenderer(this);
      WebCore::MediaPlayerPrivateWebM::ensureDecompressionSession(this);
    }
  }
}

uint64_t WebCore::MediaPlayerPrivateWebM::setShouldMaintainAspectRatio(uint64_t this, int a2)
{
  uint64_t v2;
  PAL *v3;
  void *v4;
  uint64_t AVFoundation_AVLayerVideoGravityResizeAspect;

  if (*(unsigned __int8 *)(this + 88) != a2)
  {
    v2 = this;
    *(_BYTE *)(this + 88) = a2;
    if (*(_QWORD *)(this + 272))
    {
      objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
      objc_msgSend(MEMORY[0x1E0CD28B0], "setAnimationDuration:", 0.0);
      v3 = (PAL *)objc_msgSend(MEMORY[0x1E0CD28B0], "setDisableActions:", 1);
      v4 = *(void **)(v2 + 272);
      if (*(_BYTE *)(v2 + 88))
        AVFoundation_AVLayerVideoGravityResizeAspect = PAL::get_AVFoundation_AVLayerVideoGravityResizeAspect(v3);
      else
        AVFoundation_AVLayerVideoGravityResizeAspect = PAL::get_AVFoundation_AVLayerVideoGravityResize(v3);
      objc_msgSend(v4, "setVideoGravity:", AVFoundation_AVLayerVideoGravityResizeAspect);
      return objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
    }
  }
  return this;
}

uint64_t WebCore::MediaPlayerPrivateWebM::ref(uint64_t this)
{
  uint64_t v1;
  int v3;

  v1 = *(_QWORD *)(this + 56);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v1))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEA534C](v1);
LABEL_5:
  ++*(_QWORD *)(v1 + 8);
  v3 = __ldxr((unsigned __int8 *)v1);
  if (v3 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  if (__stlxr(0, (unsigned __int8 *)v1))
    return WTF::Lock::unlockSlow((WTF::Lock *)v1);
  return this;
}

unsigned __int8 *WebCore::MediaPlayerPrivateWebM::deref(unsigned __int8 **this)
{
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WebMResourceClientParent,(WTF::DestructionThread)1>(this[7]);
}

uint64_t WebCore::MediaPlayerPrivateWebM::supportsPictureInPicture(WebCore::MediaPlayerPrivateWebM *this)
{
  return 1;
}

uint64_t WebCore::MediaPlayerPrivateWebM::supportsFullscreen(WebCore::MediaPlayerPrivateWebM *this)
{
  return 1;
}

uint64_t WebCore::MediaPlayerPrivateInterface::supportsScanning(WebCore::MediaPlayerPrivateInterface *this)
{
  return 0;
}

float WebCore::MediaPlayerPrivateWebM::naturalSize(WebCore::MediaPlayerPrivateWebM *this)
{
  return *((float *)this + 136);
}

uint64_t WebCore::MediaPlayerPrivateWebM::hasAudio(WebCore::MediaPlayerPrivateWebM *this)
{
  return *((unsigned __int8 *)this + 617);
}

uint64_t WebCore::MediaPlayerPrivateWebM::startTime(WebCore::MediaPlayerPrivateWebM *this)
{
  return *(_QWORD *)WTF::MediaTime::zeroTime(this);
}

uint64_t WebCore::MediaPlayerPrivateWebM::initialTime(WebCore::MediaPlayerPrivateWebM *this)
{
  return *(_QWORD *)WTF::MediaTime::zeroTime(this);
}

double WebCore::MediaPlayerPrivateWebM::rate(WebCore::MediaPlayerPrivateWebM *this)
{
  return *((double *)this + 73);
}

uint64_t WebCore::MediaPlayerPrivateWebM::networkState(WebCore::MediaPlayerPrivateWebM *this)
{
  return *((unsigned __int8 *)this + 344);
}

uint64_t WebCore::MediaPlayerPrivateWebM::readyState(WebCore::MediaPlayerPrivateWebM *this)
{
  return *((unsigned __int8 *)this + 345);
}

uint64_t WebCore::MediaPlayerPrivateWebM::maxTimeSeekable(WebCore::MediaPlayerPrivateWebM *this)
{
  return *((_QWORD *)this + 71);
}

uint64_t WebCore::MediaPlayerPrivateWebM::minTimeSeekable(WebCore::MediaPlayerPrivateWebM *this)
{
  return *(_QWORD *)WTF::MediaTime::zeroTime(this);
}

uint64_t WebCore::MediaPlayerPrivateWebM::hasAvailableVideoFrame(WebCore::MediaPlayerPrivateWebM *this)
{
  return *((unsigned __int8 *)this + 619);
}

uint64_t WebCore::MediaPlayerPrivateWebM::wirelessVideoPlaybackDisabled(WebCore::MediaPlayerPrivateWebM *this)
{
  return 0;
}

uint64_t WebCore::MediaPlayerPrivateWebM::supportsAcceleratedRendering(WebCore::MediaPlayerPrivateWebM *this)
{
  return 1;
}

uint64_t WebCore::MediaPlayerPrivateInterface::didPassCORSAccessCheck(WebCore::MediaPlayerPrivateInterface *this)
{
  return 0;
}

uint64_t WebCore::MediaPlayerPrivateWebM::movieLoadType(WebCore::MediaPlayerPrivateWebM *this)
{
  return 1;
}

__n128 WebCore::MediaPlayerPrivateWebM::videoFrameMetadata@<Q0>(WebCore::MediaPlayerPrivateWebM *this@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  __n128 result;

  *(_QWORD *)(a2 + 96) = *((_QWORD *)this + 63);
  v2 = *(_OWORD *)((char *)this + 488);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)((char *)this + 472);
  *(_OWORD *)(a2 + 80) = v2;
  v3 = *(_OWORD *)((char *)this + 424);
  *(_OWORD *)a2 = *(_OWORD *)((char *)this + 408);
  *(_OWORD *)(a2 + 16) = v3;
  result = *(__n128 *)((char *)this + 456);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)((char *)this + 440);
  *(__n128 *)(a2 + 48) = result;
  *((_BYTE *)this + 408) = 0;
  *((_BYTE *)this + 504) = 0;
  return result;
}

void WebCore::MediaPlayerPrivateWebM::setResourceOwner(uint64_t a1, const WTF::MachSendRight *a2)
{
  _BYTE v2[4];

  WTF::MachSendRight::MachSendRight((WTF::MachSendRight *)v2, a2);
  WTF::MachSendRight::operator=();
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v2);
}

uint64_t `non-virtual thunk to'WebCore::MediaPlayerPrivateWebM::logger(WebCore::MediaPlayerPrivateWebM *this)
{
  return *((_QWORD *)this + 36);
}

const char *`non-virtual thunk to'WebCore::MediaPlayerPrivateWebM::logClassName(WebCore::MediaPlayerPrivateWebM *this)
{
  return "MediaPlayerPrivateWebM";
}

uint64_t `non-virtual thunk to'WebCore::MediaPlayerPrivateWebM::logIdentifier(WebCore::MediaPlayerPrivateWebM *this)
{
  return *((_QWORD *)this + 37);
}

WTF::StringImpl *WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<std::__wrap_iter<WTF::ASCIILiteral const*>>(WTF::StringImpl *result, WTF::StringImpl *a2, const WTF::StringImpl *a3)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  _BYTE v10[24];
  WTF::StringImpl *v11;

  if (result != a2)
  {
    v4 = result;
    v5 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
    do
    {
      v6 = *((_QWORD *)v4 + 1);
      if (v6)
      {
        if (v6 == 1)
        {
          *(_DWORD *)v5 += 2;
          v7 = v5;
        }
        else
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v7 = v11;
        }
        v9 = v7;
      }
      else
      {
        v9 = 0;
      }
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(&qword_1ECE812F8, &v9, a3, (uint64_t)v10);
      result = v9;
      v9 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
        else
          *(_DWORD *)result -= 2;
      }
      v4 = (WTF::StringImpl *)((char *)v4 + 16);
    }
    while (v4 != a2);
  }
  return result;
}

void sub_1947ADB98(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WebCore::ResourceRequest *WebCore::ResourceRequest::ResourceRequest(WebCore::ResourceRequest *this, const WTF::String *a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  char v6;
  _DWORD *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v11[5];
  WTF::StringImpl *v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v11[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v11);
  MEMORY[0x19AEA52F8](&v12, v11, a2, 0);
  v4 = v12;
  if (v12)
    *(_DWORD *)v12 += 2;
  *(_QWORD *)this = v4;
  *(_OWORD *)((char *)this + 8) = v13;
  *(_OWORD *)((char *)this + 24) = v14;
  *((_QWORD *)this + 5) = 0;
  WTF::URL::invalidate((WebCore::ResourceRequest *)((char *)this + 40));
  *((_QWORD *)this + 10) = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *((_QWORD *)this + 11) = v15;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_DWORD *)this + 36) = 0x10000;
  v6 = *((_BYTE *)this + 148) & 0x80 | 4;
  *((_BYTE *)this + 148) = v6;
  *((_QWORD *)this + 19) = 0;
  v7 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
  {
    *v7 += 2;
    v6 = *((_BYTE *)this + 148);
  }
  *((_QWORD *)this + 20) = v7;
  *((_QWORD *)this + 21) = 0;
  *((_BYTE *)this + 176) = 0;
  *((_BYTE *)this + 180) = 0;
  *((_BYTE *)this + 184) = *((_BYTE *)this + 184) & 0xE0 | 5;
  *((_BYTE *)this + 148) = v6 | 2;
  v8 = v12;
  v12 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v5);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = v11[0];
  v11[0] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v5);
    else
      *(_DWORD *)v9 -= 2;
  }
  *((_QWORD *)this + 24) = 0;
  return this;
}

void sub_1947ADD34(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15)
{
  WTF::StringImpl **v15;
  WTF::StringImpl **v16;
  WTF::StringImpl **v17;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;

  v17 = v16;
  v19 = *v17;
  *v17 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, a2);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = *v15;
  *v15 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, a2);
    else
      *(_DWORD *)v20 -= 2;
  }
  if (a15)
  {
    if (*(_DWORD *)a15 == 2)
      WTF::StringImpl::destroy(a15, a2);
    else
      *(_DWORD *)a15 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZZN3WTFL11invokeAsyncIZN7WebCore22MediaPlayerPrivateWebM12dataReceivedERKNS1_12SharedBufferEE3__0EEDaRNS_24SerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEENUlvE_D1Ev(uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  _QWORD *v12;
  _QWORD *v13;

  v3 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v12 = off_1E32071E8;
      v12[1] = v4;
      v13 = v12;
      WTF::ensureOnMainThread();
      if (v13)
        (*(void (**)(_QWORD *))(*v13 + 8))(v13);
    }
  }
  if (*(_DWORD *)(a1 + 48) != -1)
    WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)(a1 + 40), a2);
  *(_DWORD *)(a1 + 48) = -1;
  if (*(_QWORD *)a1)
  {
    WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::assertIsDead(*(_QWORD *)a1);
    v7 = *(unsigned int **)a1;
    *(_QWORD *)a1 = 0;
    if (v7)
    {
      v8 = v7 + 2;
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, v7 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
      }
    }
  }
  else
  {
    *(_QWORD *)a1 = 0;
  }
  return a1;
}

void sub_1947ADEE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(void))(*(_QWORD *)a10 + 8))();
  _Unwind_Resume(exception_object);
}

uint64_t WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::NativePromiseProducer<std::enable_if<true,void>>(uint64_t a1, unsigned __int8 a2, __int128 *a3)
{
  uint64_t v6;
  WTF::NativePromiseBase *v7;
  __int128 v8;
  unsigned __int8 *v9;
  _BYTE *v11;
  int v12;

  v6 = WTF::fastMalloc((WTF *)0x78);
  v7 = (WTF::NativePromiseBase *)WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::NativePromise(v6, a3);
  *(_QWORD *)a1 = v6;
  v8 = *a3;
  *(_OWORD *)(a1 + 24) = a3[1];
  *(_OWORD *)(a1 + 8) = v8;
  v9 = (unsigned __int8 *)(v6 + 48);
  if (__ldaxr((unsigned __int8 *)(v6 + 48)))
  {
    __clrex();
LABEL_4:
    v7 = (WTF::NativePromiseBase *)MEMORY[0x19AEA534C](v6 + 48);
    goto LABEL_5;
  }
  if (__stxr(1u, v9))
    goto LABEL_4;
LABEL_5:
  v11 = (_BYTE *)WTF::NativePromiseBase::logChannel(v7);
  if (*v11 && v11[16] >= 4u)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v11, 4u, (WTF::Logger::LogSiteIdentifier *)a3, " runSynchronouslyOnTarget ", v6);
  atomic_store(a2, (unsigned __int8 *)(v6 + 113));
  v12 = __ldxr(v9);
  if (v12 == 1)
  {
    if (!__stlxr(0, v9))
      return a1;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(v6 + 48));
  return a1;
}

void sub_1947AE028(_Unwind_Exception *exception_object)
{
  unsigned int **v1;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *v1;
  *v1 = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::NativePromise(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  _BYTE *v5;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E3207198;
  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(_BYTE *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = a1 + 88;
  *(_QWORD *)(a1 + 80) = 1;
  *(_QWORD *)(a1 + 104) = 0;
  *(_WORD *)(a1 + 112) = 0;
  v5 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v5 && v5[16] >= 4u)
    WTF::Logger::log<char [10],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v5, 4u, "creating ", a1);
  return a1;
}

void sub_1947AE168(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  void *v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v23;
  unsigned int **v24;
  unsigned int **v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;

  v17 = v15;
  WTF::Vector<WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v17, a2);
  v20 = *(unsigned int *)(v13 + 84);
  if ((_DWORD)v20)
  {
    v24 = *(unsigned int ***)(v13 + 72);
    v25 = &v24[v20];
    do
    {
      v26 = *v24;
      *v24 = 0;
      if (v26)
      {
        v27 = v26 + 2;
        do
        {
          v28 = __ldaxr(v27);
          v29 = v28 - 1;
        }
        while (__stlxr(v29, v27));
        if (!v29)
        {
          atomic_store(1u, v26 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v26 + 8))(v26);
        }
      }
      ++v24;
    }
    while (v24 != v25);
  }
  v21 = *(WTF **)(v13 + 72);
  if (v16 != v21 && v21 != 0)
  {
    *(_QWORD *)(v13 + 72) = 0;
    *(_DWORD *)(v13 + 80) = 0;
    WTF::fastFree(v21, v19);
  }
  v23 = *(unsigned int *)(v13 + 64);
  if ((_DWORD)v23 != -1)
    ((void (*)(char *, uint64_t))off_1E3206E28[v23])(&a13, v14);
  *(_DWORD *)(v13 + 64) = -1;
  _Unwind_Resume(a1);
}

uint64_t WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::assertIsDead(uint64_t result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;

  v1 = result;
  v2 = (unsigned __int8 *)(result + 48);
  if (__ldaxr((unsigned __int8 *)(result + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEA534C](result + 48);
LABEL_5:
  v4 = *(unsigned int *)(v1 + 108);
  if ((_DWORD)v4)
  {
    v5 = *(uint64_t **)(v1 + 96);
    v6 = 40 * v4;
    do
    {
      result = *v5;
      if (*v5)
        result = WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::assertIsDead();
      v5 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  v7 = __ldxr(v2);
  if (v7 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  if (__stlxr(0, v2))
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return result;
}

void sub_1947AE2CC(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

uint64_t WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::~NativePromise(uint64_t a1)
{
  WTF *v1;
  void *v2;

  v1 = (WTF *)WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::~NativePromise(a1);
  return WTF::fastFree(v1, v2);
}

{
  _BYTE *v2;
  BOOL v3;
  void *v4;
  void *v5;
  uint64_t v6;
  unsigned int **v7;
  unsigned int **v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  WTF *v13;
  uint64_t v15;
  _BYTE v17[2];

  v2 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v2)
    v3 = v2[16] >= 4u;
  else
    v3 = 0;
  if (v3)
    WTF::Logger::log<char [12],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v2, 4u, "destroying ", a1);
  WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::assertIsDead(a1);
  WTF::Vector<WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 96, v4);
  v6 = *(unsigned int *)(a1 + 84);
  if ((_DWORD)v6)
  {
    v7 = *(unsigned int ***)(a1 + 72);
    v8 = &v7[v6];
    do
    {
      v9 = *v7;
      *v7 = 0;
      if (v9)
      {
        v10 = v9 + 2;
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
        {
          atomic_store(1u, v9 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
        }
      }
      ++v7;
    }
    while (v7 != v8);
  }
  v13 = *(WTF **)(a1 + 72);
  if ((WTF *)(a1 + 88) != v13 && v13 != 0)
  {
    *(_QWORD *)(a1 + 72) = 0;
    *(_DWORD *)(a1 + 80) = 0;
    WTF::fastFree(v13, v5);
  }
  v15 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v15 != -1)
    ((void (*)(_BYTE *, uint64_t))off_1E3206E28[v15])(v17, a1 + 56);
  *(_DWORD *)(a1 + 64) = -1;
  return a1;
}

uint64_t WTF::Logger::log<char [10],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(uint64_t a1, unsigned int a2, char *a3, uint64_t a4)
{
  uint64_t result;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::Logger *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::Logger *v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  WTF::Logger *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  __int128 buf;
  int v45;
  WTF::StringImpl *v46[3];

  v46[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::String::String((WTF::String *)&v42, a3);
  result = WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(a4, &v41);
  if (!v42)
  {
    v8 = 0;
    if (v41)
      goto LABEL_3;
LABEL_72:
    v9 = 0;
    goto LABEL_4;
  }
  v8 = *((_DWORD *)v42 + 1);
  if (!v41)
    goto LABEL_72;
LABEL_3:
  v9 = *((_DWORD *)v41 + 1);
LABEL_4:
  if ((v9 | v8) < 0)
    goto LABEL_75;
  result = (v8 + v9);
  if (__OFADD__(v8, v9))
    goto LABEL_75;
  if (v42)
  {
    v10 = *((_DWORD *)v42 + 4);
    v11 = (v10 >> 2) & 1;
    if (v41 && (v10 & 4) != 0)
      goto LABEL_9;
  }
  else
  {
    if (v41)
    {
LABEL_9:
      v11 = (*((unsigned __int8 *)v41 + 16) >> 2) & 1;
      goto LABEL_10;
    }
    v11 = 1;
  }
LABEL_10:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v11, (uint64_t)v42, (uint64_t)v41, &buf);
  v43 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_75:
    __break(0xC471u);
    return result;
  }
  v13 = v41;
  v41 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v42;
  v42 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *(NSObject **)(a1 + 32);
  v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v16)
  {
    WTF::String::utf8();
    v18 = v39 ? (char *)v39 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v18;
    _os_log_impl(&dword_1940B8000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v16 = (uint64_t)v39;
    v39 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
        v16 = WTF::fastFree((WTF *)v16, v17);
      else
        --*(_DWORD *)v16;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v19 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v20 = *v19;
      if ((v20 & 1) != 0)
        break;
      v21 = __ldaxr(v19);
      if (v21 == v20)
      {
        if (!__stxr(v20 | 1, v19))
        {
          v22 = WTF::Logger::observers((WTF::Logger *)v16);
          v23 = *(unsigned int *)(v22 + 12);
          if ((_DWORD)v23)
          {
            v24 = *(uint64_t **)v22;
            v25 = *(_QWORD *)v22 + 8 * v23;
            do
            {
              v26 = *v24;
              LODWORD(buf) = 0;
              WTF::String::String((WTF::String *)((char *)&buf + 8), a3);
              v45 = 0;
              WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(a4, v46);
              v39 = 0;
              v40 = 0;
              v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v40) = 2;
              v39 = v27;
              v28 = HIDWORD(v40);
              *((_DWORD *)v27 + 4 * HIDWORD(v40)) = buf;
              v29 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v27 + 2 * v28 + 1) = v29;
              *((_DWORD *)v27 + 4 * (v28 + 1)) = v45;
              v30 = v46[0];
              if (v46[0])
                *(_DWORD *)v46[0] += 2;
              *((_QWORD *)v27 + 2 * (v28 + 1) + 1) = v30;
              HIDWORD(v40) = v28 + 2;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, a1, a2, &v39);
              v31 = v39;
              if (HIDWORD(v40))
              {
                v32 = 16 * HIDWORD(v40);
                v33 = (WTF::StringImpl **)((char *)v39 + 8);
                do
                {
                  v34 = *v33;
                  *v33 = 0;
                  if (v34)
                  {
                    if (*(_DWORD *)v34 == 2)
                      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v17);
                    else
                      *(_DWORD *)v34 -= 2;
                  }
                  v33 += 2;
                  v32 -= 16;
                }
                while (v32);
                v31 = v39;
              }
              if (v31)
              {
                v39 = 0;
                LODWORD(v40) = 0;
                WTF::fastFree(v31, v17);
              }
              v35 = v46[0];
              v46[0] = 0;
              if (v35)
              {
                if (*(_DWORD *)v35 == 2)
                  WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v35 -= 2;
              }
              v36 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                  WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v36 -= 2;
              }
              ++v24;
            }
            while (v24 != (uint64_t *)v25);
          }
          v37 = __ldxr(v19);
          if (v37 == 1)
          {
            if (!__stlxr(0, v19))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v43;
  v43 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1947AE718(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, WTF::StringImpl *a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19)
{
  unsigned __int8 *v19;
  int v21;

  v21 = __ldxr(v19);
  if (v21 == 1)
  {
    if (!__stlxr(0, v19))
    {
LABEL_6:
      if (a15)
      {
        if (*(_DWORD *)a15 == 2)
          WTF::StringImpl::destroy(a15, a2);
        else
          *(_DWORD *)a15 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t WTF::Vector<WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF *v10;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
  {
    v4 = *(uint64_t **)a1;
    v5 = *(_QWORD *)a1 + 40 * v3;
    do
    {
      if (*v4)
      {
        WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::assertIsDead(*v4);
        v6 = (unsigned int *)*v4;
        *v4 = 0;
        if (v6)
        {
          v7 = v6 + 2;
          do
          {
            v8 = __ldaxr(v7);
            v9 = v8 - 1;
          }
          while (__stlxr(v9, v7));
          if (!v9)
          {
            atomic_store(1u, v6 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
          }
        }
      }
      else
      {
        *v4 = 0;
      }
      v4 += 5;
    }
    while (v4 != (uint64_t *)v5);
  }
  v10 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v10, a2);
  }
  return a1;
}

void sub_1947AE928(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  unsigned int **v3;
  unsigned int **v4;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF *v10;

  v4 = v3;
  v6 = *v4;
  *v4 = 0;
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v6 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
    }
  }
  v10 = *(WTF **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v10, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseIvN7WebCore18PlatformMediaErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIvSB_EENS8_8FunctionIFSI_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJSE_SI_SL_EEEEEEDcSP_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1947AEAD0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  void *v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v19;
  unsigned int **v20;
  unsigned int **v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;

  WTF::Vector<WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v13 + 96, a2);
  v16 = *(unsigned int *)(v13 + 84);
  if ((_DWORD)v16)
  {
    v20 = *(unsigned int ***)(v13 + 72);
    v21 = &v20[v16];
    do
    {
      v22 = *v20;
      *v20 = 0;
      if (v22)
      {
        v23 = v22 + 2;
        do
        {
          v24 = __ldaxr(v23);
          v25 = v24 - 1;
        }
        while (__stlxr(v25, v23));
        if (!v25)
        {
          atomic_store(1u, v22 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v22 + 8))(v22);
        }
      }
      ++v20;
    }
    while (v20 != v21);
  }
  v17 = *(WTF **)(v13 + 72);
  if ((WTF *)(v13 + 88) != v17 && v17 != 0)
  {
    *(_QWORD *)(v13 + 72) = 0;
    *(_DWORD *)(v13 + 80) = 0;
    WTF::fastFree(v17, v15);
  }
  v19 = *(unsigned int *)(v13 + 64);
  if ((_DWORD)v19 != -1)
    ((void (*)(char *, uint64_t))off_1E3206E28[v19])(&a13, v13 + 56);
  *(_DWORD *)(v13 + 64) = -1;
  _Unwind_Resume(a1);
}

uint64_t WTF::Logger::log<char [12],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(uint64_t a1, unsigned int a2, char *a3, uint64_t a4)
{
  uint64_t result;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::Logger *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::Logger *v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  WTF::Logger *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  __int128 buf;
  int v45;
  WTF::StringImpl *v46[3];

  v46[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::String::String((WTF::String *)&v42, a3);
  result = WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(a4, &v41);
  if (!v42)
  {
    v8 = 0;
    if (v41)
      goto LABEL_3;
LABEL_72:
    v9 = 0;
    goto LABEL_4;
  }
  v8 = *((_DWORD *)v42 + 1);
  if (!v41)
    goto LABEL_72;
LABEL_3:
  v9 = *((_DWORD *)v41 + 1);
LABEL_4:
  if ((v9 | v8) < 0)
    goto LABEL_75;
  result = (v8 + v9);
  if (__OFADD__(v8, v9))
    goto LABEL_75;
  if (v42)
  {
    v10 = *((_DWORD *)v42 + 4);
    v11 = (v10 >> 2) & 1;
    if (v41 && (v10 & 4) != 0)
      goto LABEL_9;
  }
  else
  {
    if (v41)
    {
LABEL_9:
      v11 = (*((unsigned __int8 *)v41 + 16) >> 2) & 1;
      goto LABEL_10;
    }
    v11 = 1;
  }
LABEL_10:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v11, (uint64_t)v42, (uint64_t)v41, &buf);
  v43 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_75:
    __break(0xC471u);
    return result;
  }
  v13 = v41;
  v41 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v42;
  v42 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *(NSObject **)(a1 + 32);
  v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v16)
  {
    WTF::String::utf8();
    v18 = v39 ? (char *)v39 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v18;
    _os_log_impl(&dword_1940B8000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v16 = (uint64_t)v39;
    v39 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
        v16 = WTF::fastFree((WTF *)v16, v17);
      else
        --*(_DWORD *)v16;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v19 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v20 = *v19;
      if ((v20 & 1) != 0)
        break;
      v21 = __ldaxr(v19);
      if (v21 == v20)
      {
        if (!__stxr(v20 | 1, v19))
        {
          v22 = WTF::Logger::observers((WTF::Logger *)v16);
          v23 = *(unsigned int *)(v22 + 12);
          if ((_DWORD)v23)
          {
            v24 = *(uint64_t **)v22;
            v25 = *(_QWORD *)v22 + 8 * v23;
            do
            {
              v26 = *v24;
              LODWORD(buf) = 0;
              WTF::String::String((WTF::String *)((char *)&buf + 8), a3);
              v45 = 0;
              WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(a4, v46);
              v39 = 0;
              v40 = 0;
              v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v40) = 2;
              v39 = v27;
              v28 = HIDWORD(v40);
              *((_DWORD *)v27 + 4 * HIDWORD(v40)) = buf;
              v29 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v27 + 2 * v28 + 1) = v29;
              *((_DWORD *)v27 + 4 * (v28 + 1)) = v45;
              v30 = v46[0];
              if (v46[0])
                *(_DWORD *)v46[0] += 2;
              *((_QWORD *)v27 + 2 * (v28 + 1) + 1) = v30;
              HIDWORD(v40) = v28 + 2;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, a1, a2, &v39);
              v31 = v39;
              if (HIDWORD(v40))
              {
                v32 = 16 * HIDWORD(v40);
                v33 = (WTF::StringImpl **)((char *)v39 + 8);
                do
                {
                  v34 = *v33;
                  *v33 = 0;
                  if (v34)
                  {
                    if (*(_DWORD *)v34 == 2)
                      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v17);
                    else
                      *(_DWORD *)v34 -= 2;
                  }
                  v33 += 2;
                  v32 -= 16;
                }
                while (v32);
                v31 = v39;
              }
              if (v31)
              {
                v39 = 0;
                LODWORD(v40) = 0;
                WTF::fastFree(v31, v17);
              }
              v35 = v46[0];
              v46[0] = 0;
              if (v35)
              {
                if (*(_DWORD *)v35 == 2)
                  WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v35 -= 2;
              }
              v36 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                  WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v36 -= 2;
              }
              ++v24;
            }
            while (v24 != (uint64_t *)v25);
          }
          v37 = __ldxr(v19);
          if (v37 == 1)
          {
            if (!__stlxr(0, v19))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v43;
  v43 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1947AEF94(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, WTF::StringImpl *a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19)
{
  unsigned __int8 *v19;
  int v21;

  v21 = __ldxr(v19);
  if (v21 == 1)
  {
    if (!__stlxr(0, v19))
    {
LABEL_6:
      if (a15)
      {
        if (*(_DWORD *)a15 == 2)
          WTF::StringImpl::destroy(a15, a2);
        else
          *(_DWORD *)a15 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4, uint64_t a5)
{
  uint64_t result;
  int v8;
  int v9;
  int v10;
  BOOL v11;
  int v12;
  BOOL v13;
  int v14;
  unsigned int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  NSObject *v20;
  uint64_t v21;
  void *v22;
  char *v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  WTF::Logger *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::Logger *v36;
  const char *v37;
  uint64_t v38;
  WTF::StringImpl **v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  int v44;
  uint64_t v45;
  WTF::Logger *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  __int128 buf;
  int v56;
  WTF::StringImpl *v57;
  int v58;
  WTF::StringImpl *v59[3];

  v59[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  WTF::String::String((WTF::String *)&v52, a4);
  result = WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(a5, &v51);
  if (v53)
  {
    v8 = *((_DWORD *)v53 + 1);
    if (v52)
      goto LABEL_3;
LABEL_91:
    v9 = 0;
    if (v51)
      goto LABEL_4;
LABEL_92:
    v10 = 0;
    goto LABEL_5;
  }
  v8 = 0;
  if (!v52)
    goto LABEL_91;
LABEL_3:
  v9 = *((_DWORD *)v52 + 1);
  if (!v51)
    goto LABEL_92;
LABEL_4:
  v10 = *((_DWORD *)v51 + 1);
LABEL_5:
  if ((v10 | v9) < 0)
    goto LABEL_95;
  v11 = __OFADD__(v9, v10);
  v12 = v9 + v10;
  v13 = v11;
  if (v8 < 0)
    goto LABEL_95;
  if (v13)
    goto LABEL_95;
  result = (v8 + v12);
  if (__OFADD__(v8, v12))
    goto LABEL_95;
  if (v53 && (*((_BYTE *)v53 + 16) & 4) == 0)
  {
    v14 = 0;
    goto LABEL_19;
  }
  if (v52)
  {
    v15 = *((_DWORD *)v52 + 4);
    v14 = (v15 >> 2) & 1;
    if (v51 && (v15 & 4) != 0)
      goto LABEL_18;
  }
  else
  {
    if (v51)
    {
LABEL_18:
      v14 = (*((unsigned __int8 *)v51 + 16) >> 2) & 1;
      goto LABEL_19;
    }
    v14 = 1;
  }
LABEL_19:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v14, v53, (uint64_t)v52, (uint64_t)v51, &buf);
  v54 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_95:
    __break(0xC471u);
    return result;
  }
  v17 = v51;
  v51 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v16);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = v52;
  v52 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v16);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v53;
  v53 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v16);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = *(NSObject **)(a1 + 32);
  v21 = os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v21)
  {
    WTF::String::utf8();
    v23 = v49 ? (char *)v49 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v23;
    _os_log_impl(&dword_1940B8000, v20, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v21 = (uint64_t)v49;
    v49 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 1)
        v21 = WTF::fastFree((WTF *)v21, v22);
      else
        --*(_DWORD *)v21;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v24 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v25 = *v24;
      if ((v25 & 1) != 0)
        break;
      v26 = __ldaxr(v24);
      if (v26 == v25)
      {
        if (!__stxr(v25 | 1, v24))
        {
          v27 = WTF::Logger::observers((WTF::Logger *)v21);
          v28 = *(unsigned int *)(v27 + 12);
          if ((_DWORD)v28)
          {
            v29 = *(uint64_t **)v27;
            v45 = *(_QWORD *)v27 + 8 * v28;
            do
            {
              v30 = *v29;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v56 = 0;
              WTF::String::String((WTF::String *)&v57, a4);
              v58 = 0;
              WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(a5, v59);
              v49 = 0;
              v50 = 0;
              v31 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
              LODWORD(v50) = 3;
              v49 = v31;
              v32 = HIDWORD(v50);
              *((_DWORD *)v31 + 4 * HIDWORD(v50)) = buf;
              v33 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v31 + 2 * v32 + 1) = v33;
              *((_DWORD *)v31 + 4 * (v32 + 1)) = v56;
              v34 = v57;
              if (v57)
                *(_DWORD *)v57 += 2;
              *((_QWORD *)v31 + 2 * (v32 + 1) + 1) = v34;
              *((_DWORD *)v31 + 4 * (v32 + 2)) = v58;
              v35 = v59[0];
              if (v59[0])
                *(_DWORD *)v59[0] += 2;
              *((_QWORD *)v31 + 2 * (v32 + 2) + 1) = v35;
              HIDWORD(v50) = v32 + 3;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v30 + 16))(v30, a1, a2, &v49);
              v36 = v49;
              if (HIDWORD(v50))
              {
                v37 = a4;
                v38 = 16 * HIDWORD(v50);
                v39 = (WTF::StringImpl **)((char *)v49 + 8);
                do
                {
                  v40 = *v39;
                  *v39 = 0;
                  if (v40)
                  {
                    if (*(_DWORD *)v40 == 2)
                      WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v22);
                    else
                      *(_DWORD *)v40 -= 2;
                  }
                  v39 += 2;
                  v38 -= 16;
                }
                while (v38);
                v36 = v49;
                a4 = v37;
              }
              if (v36)
              {
                v49 = 0;
                LODWORD(v50) = 0;
                WTF::fastFree(v36, v22);
              }
              v41 = v59[0];
              v59[0] = 0;
              if (v41)
              {
                if (*(_DWORD *)v41 == 2)
                  WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v41 -= 2;
              }
              v42 = v57;
              v57 = 0;
              if (v42)
              {
                if (*(_DWORD *)v42 == 2)
                  WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v42 -= 2;
              }
              v43 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v43)
              {
                if (*(_DWORD *)v43 == 2)
                  WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v43 -= 2;
              }
              ++v29;
            }
            while (v29 != (uint64_t *)v45);
          }
          v44 = __ldxr(v24);
          if (v44 == 1)
          {
            if (!__stlxr(0, v24))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v54;
  v54 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v22);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1947AF5E4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF *a15, int a16, int a17, WTF::StringImpl *a18, WTF::StringImpl *a19, uint64_t a20,WTF::StringImpl *a21,char a22,WTF::StringImpl *a23,uint64_t a24,WTF::StringImpl *a25,uint64_t a26,WTF::StringImpl *a27)
{
  unsigned __int8 *v27;
  int v29;

  v29 = __ldxr(v27);
  if (v29 == 1)
  {
    if (!__stlxr(0, v27))
    {
LABEL_6:
      if (a21)
      {
        if (*(_DWORD *)a21 == 2)
          WTF::StringImpl::destroy(a21, a2);
        else
          *(_DWORD *)a21 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZNS_L11invokeAsyncIZN7WebCore22MediaPlayerPrivateWebM12dataReceivedERKNS3_12SharedBufferEE3__0EEDaRNS_24SerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlvE_vJEED1Ev(_QWORD *a1, void *a2)
{
  *a1 = off_1E3206E50;
  _ZZN3WTFL11invokeAsyncIZN7WebCore22MediaPlayerPrivateWebM12dataReceivedERKNS1_12SharedBufferEE3__0EEDaRNS_24SerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEENUlvE_D1Ev((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_L11invokeAsyncIZN7WebCore22MediaPlayerPrivateWebM12dataReceivedERKNS3_12SharedBufferEE3__0EEDaRNS_24SerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlvE_vJEED0Ev(WTF *a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E3206E50;
  _ZZN3WTFL11invokeAsyncIZN7WebCore22MediaPlayerPrivateWebM12dataReceivedERKNS1_12SharedBufferEE3__0EEDaRNS_24SerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEENUlvE_D1Ev((uint64_t)a1 + 8, a2);
  return WTF::fastFree(a1, v3);
}

uint64_t *_ZN3WTF6Detail15CallableWrapperIZNS_L11invokeAsyncIZN7WebCore22MediaPlayerPrivateWebM12dataReceivedERKNS3_12SharedBufferEE3__0EEDaRNS_24SerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlvE_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t *result;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  __int128 v7;
  const char *v8;
  uint64_t v9;
  __int16 v10;

  WebCore::SourceBufferParserWebM::appendData(*(_QWORD *)(a1 + 64), (_DWORD *)(a1 + 48), 0, &v10);
  v7 = 0uLL;
  v8 = "operator()";
  v9 = 0;
  v2 = WTF::fastMalloc((WTF *)0x78);
  WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::NativePromise(v2, &v7);
  WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::settle<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>>(v2, &v10, (WTF::Logger::LogSiteIdentifier *)&v7);
  v7 = 0uLL;
  v8 = "invokeAsync proxy";
  v9 = 0;
  result = WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::chainTo((unsigned __int8 *)v2, a1 + 8, (WTF::Logger::LogSiteIdentifier *)&v7);
  v4 = (unsigned int *)(v2 + 8);
  do
  {
    v5 = __ldaxr(v4);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, v4));
  if (!v6)
  {
    atomic_store(1u, (unsigned int *)(v2 + 8));
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  }
  return result;
}

void sub_1947AF8FC(_Unwind_Exception *exception_object)
{
  unsigned int *v1;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = v1 + 2;
  do
  {
    v4 = __ldaxr(v3);
    v5 = v4 - 1;
  }
  while (__stlxr(v5, v3));
  if (!v5)
  {
    atomic_store(1u, v1 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v1 + 16))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::chainTo(unsigned __int8 *a1, unint64_t a2, WTF::Logger::LogSiteIdentifier *a3)
{
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned __int8 *v11;
  BOOL v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned __int8 v16;
  uint64_t v17;
  unsigned __int8 *v18;
  _BYTE *v20;
  int v21;
  uint64_t *result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  __int128 v27;
  int v28;
  BOOL v29;

  v5 = (uint64_t)a1;
  v6 = a1 + 48;
  if (__ldaxr(a1 + 48))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_5;
  }
  a1 = (unsigned __int8 *)MEMORY[0x19AEA534C](a1 + 48);
LABEL_5:
  *(_BYTE *)(v5 + 112) = 1;
  v8 = *(unsigned int **)a2;
  if (*(_QWORD *)a2)
  {
    v9 = v8 + 2;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
  }
  v29 = *(_DWORD *)(v5 + 64) == 0;
  v11 = (unsigned __int8 *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v11)
    v12 = v11[16] >= 4u;
  else
    v12 = 0;
  if (v12)
    v11 = (unsigned __int8 *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [22],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,char [17],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,char [12],BOOL,char [2]>((uint64_t)v11, 4u, a3, " invoking chainTo() [", v5, " chainedPromise:", (uint64_t)v8, " isNothing:", (uint64_t)&v29, "]");
  if (v8)
  {
    v13 = v8 + 2;
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v8 + 2);
      v11 = (unsigned __int8 *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v8 + 16))(v8);
    }
  }
  v16 = atomic_load((unsigned __int8 *)(v5 + 113));
  v17 = *(_QWORD *)a2;
  v18 = (unsigned __int8 *)(*(_QWORD *)a2 + 48);
  if (__ldaxr(v18))
  {
    __clrex();
LABEL_22:
    v11 = (unsigned __int8 *)MEMORY[0x19AEA534C](v18);
    goto LABEL_23;
  }
  if (__stxr(1u, v18))
    goto LABEL_22;
LABEL_23:
  v20 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v11);
  if (*v20 && v20[16] >= 4u)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v20, 4u, a3, " runSynchronouslyOnTarget ", v17);
  atomic_store(v16, (unsigned __int8 *)(v17 + 113));
  v21 = __ldxr(v18);
  if (v21 != 1)
  {
    __clrex();
    goto LABEL_30;
  }
  if (__stlxr(0, v18))
LABEL_30:
    WTF::Lock::unlockSlow((WTF::Lock *)v18);
  if (*(_DWORD *)(v5 + 64))
  {
    result = (uint64_t *)WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::settleChainedPromise(v5, (unsigned int **)a2);
  }
  else
  {
    result = (uint64_t *)(v5 + 96);
    v23 = *(unsigned int *)(v5 + 108);
    if ((_DWORD)v23 == *(_DWORD *)(v5 + 104))
    {
      result = (uint64_t *)WTF::Vector<WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v23 + 1, a2);
      a2 = (unint64_t)result;
      LODWORD(v23) = *(_DWORD *)(v5 + 108);
      v24 = *(_QWORD *)(v5 + 96);
    }
    else
    {
      v24 = *result;
    }
    v25 = v24 + 40 * v23;
    v26 = *(unsigned int **)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)v25 = v26;
    v25 += 8;
    v27 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)v25 = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(v25 + 16) = v27;
    ++*(_DWORD *)(v5 + 108);
  }
  v28 = __ldxr(v6);
  if (v28 != 1)
  {
    __clrex();
    return (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)v6);
  }
  if (__stlxr(0, v6))
    return (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return result;
}

void sub_1947AFBC0(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  int v4;
  int v5;

  v4 = __ldxr(v2);
  if (v4 == 1)
  {
    if (!__stlxr(0, v2))
    {
LABEL_6:
      v5 = __ldxr(v1);
      if (v5 == 1)
      {
        if (!__stlxr(0, v1))
LABEL_11:
          _Unwind_Resume(exception_object);
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v1);
      goto LABEL_11;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
  goto LABEL_6;
}

WTF *WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::settle<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>>(uint64_t a1, _WORD *a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::Lock *v6;
  _BYTE *v8;
  BOOL v9;
  uint64_t v10;
  WTF *result;
  int v12;
  WTF::Lock *v13;
  char v14;
  char v15;

  v6 = (WTF::Lock *)(a1 + 48);
  v13 = v6;
  v14 = 1;
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_5;
  }
  v6 = (WTF::Lock *)MEMORY[0x19AEA534C]();
LABEL_5:
  v8 = (_BYTE *)WTF::NativePromiseBase::logChannel(v6);
  if (*v8)
    v9 = v8[16] >= 4u;
  else
    v9 = 0;
  if (v9)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [11],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v8, 4u, a3, " settling ", a1);
  v10 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v10 != -1)
    ((void (*)(char *, uint64_t))off_1E3206E28[v10])(&v15, a1 + 56);
  *(_DWORD *)(a1 + 64) = -1;
  *(_WORD *)(a1 + 56) = *a2;
  *(_DWORD *)(a1 + 64) = 1;
  result = WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::dispatchAll(a1, (unsigned __int8 **)&v13);
  if (v14)
  {
    result = v13;
    v12 = __ldxr((unsigned __int8 *)v13);
    if (v12 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v13))
        return result;
    }
    else
    {
      __clrex();
    }
    return (WTF *)WTF::Lock::unlockSlow(result);
  }
  return result;
}

void sub_1947AFD64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::Lock *a10, char a11)
{
  int v12;

  if (a11)
  {
    v12 = __ldxr((unsigned __int8 *)a10);
    if (v12 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)a10))
        goto LABEL_7;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow(a10);
  }
LABEL_7:
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [11],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4, uint64_t a5)
{
  uint64_t result;
  int v8;
  int v9;
  int v10;
  BOOL v11;
  int v12;
  BOOL v13;
  int v14;
  unsigned int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  NSObject *v20;
  uint64_t v21;
  void *v22;
  char *v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  WTF::Logger *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::Logger *v36;
  const char *v37;
  uint64_t v38;
  WTF::StringImpl **v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  int v44;
  uint64_t v45;
  WTF::Logger *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  __int128 buf;
  int v56;
  WTF::StringImpl *v57;
  int v58;
  WTF::StringImpl *v59[3];

  v59[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  WTF::String::String((WTF::String *)&v52, a4);
  result = WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(a5, &v51);
  if (v53)
  {
    v8 = *((_DWORD *)v53 + 1);
    if (v52)
      goto LABEL_3;
LABEL_91:
    v9 = 0;
    if (v51)
      goto LABEL_4;
LABEL_92:
    v10 = 0;
    goto LABEL_5;
  }
  v8 = 0;
  if (!v52)
    goto LABEL_91;
LABEL_3:
  v9 = *((_DWORD *)v52 + 1);
  if (!v51)
    goto LABEL_92;
LABEL_4:
  v10 = *((_DWORD *)v51 + 1);
LABEL_5:
  if ((v10 | v9) < 0)
    goto LABEL_95;
  v11 = __OFADD__(v9, v10);
  v12 = v9 + v10;
  v13 = v11;
  if (v8 < 0)
    goto LABEL_95;
  if (v13)
    goto LABEL_95;
  result = (v8 + v12);
  if (__OFADD__(v8, v12))
    goto LABEL_95;
  if (v53 && (*((_BYTE *)v53 + 16) & 4) == 0)
  {
    v14 = 0;
    goto LABEL_19;
  }
  if (v52)
  {
    v15 = *((_DWORD *)v52 + 4);
    v14 = (v15 >> 2) & 1;
    if (v51 && (v15 & 4) != 0)
      goto LABEL_18;
  }
  else
  {
    if (v51)
    {
LABEL_18:
      v14 = (*((unsigned __int8 *)v51 + 16) >> 2) & 1;
      goto LABEL_19;
    }
    v14 = 1;
  }
LABEL_19:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v14, v53, (uint64_t)v52, (uint64_t)v51, &buf);
  v54 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_95:
    __break(0xC471u);
    return result;
  }
  v17 = v51;
  v51 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v16);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = v52;
  v52 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v16);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v53;
  v53 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v16);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = *(NSObject **)(a1 + 32);
  v21 = os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v21)
  {
    WTF::String::utf8();
    v23 = v49 ? (char *)v49 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v23;
    _os_log_impl(&dword_1940B8000, v20, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v21 = (uint64_t)v49;
    v49 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 1)
        v21 = WTF::fastFree((WTF *)v21, v22);
      else
        --*(_DWORD *)v21;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v24 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v25 = *v24;
      if ((v25 & 1) != 0)
        break;
      v26 = __ldaxr(v24);
      if (v26 == v25)
      {
        if (!__stxr(v25 | 1, v24))
        {
          v27 = WTF::Logger::observers((WTF::Logger *)v21);
          v28 = *(unsigned int *)(v27 + 12);
          if ((_DWORD)v28)
          {
            v29 = *(uint64_t **)v27;
            v45 = *(_QWORD *)v27 + 8 * v28;
            do
            {
              v30 = *v29;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v56 = 0;
              WTF::String::String((WTF::String *)&v57, a4);
              v58 = 0;
              WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(a5, v59);
              v49 = 0;
              v50 = 0;
              v31 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
              LODWORD(v50) = 3;
              v49 = v31;
              v32 = HIDWORD(v50);
              *((_DWORD *)v31 + 4 * HIDWORD(v50)) = buf;
              v33 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v31 + 2 * v32 + 1) = v33;
              *((_DWORD *)v31 + 4 * (v32 + 1)) = v56;
              v34 = v57;
              if (v57)
                *(_DWORD *)v57 += 2;
              *((_QWORD *)v31 + 2 * (v32 + 1) + 1) = v34;
              *((_DWORD *)v31 + 4 * (v32 + 2)) = v58;
              v35 = v59[0];
              if (v59[0])
                *(_DWORD *)v59[0] += 2;
              *((_QWORD *)v31 + 2 * (v32 + 2) + 1) = v35;
              HIDWORD(v50) = v32 + 3;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v30 + 16))(v30, a1, a2, &v49);
              v36 = v49;
              if (HIDWORD(v50))
              {
                v37 = a4;
                v38 = 16 * HIDWORD(v50);
                v39 = (WTF::StringImpl **)((char *)v49 + 8);
                do
                {
                  v40 = *v39;
                  *v39 = 0;
                  if (v40)
                  {
                    if (*(_DWORD *)v40 == 2)
                      WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v22);
                    else
                      *(_DWORD *)v40 -= 2;
                  }
                  v39 += 2;
                  v38 -= 16;
                }
                while (v38);
                v36 = v49;
                a4 = v37;
              }
              if (v36)
              {
                v49 = 0;
                LODWORD(v50) = 0;
                WTF::fastFree(v36, v22);
              }
              v41 = v59[0];
              v59[0] = 0;
              if (v41)
              {
                if (*(_DWORD *)v41 == 2)
                  WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v41 -= 2;
              }
              v42 = v57;
              v57 = 0;
              if (v42)
              {
                if (*(_DWORD *)v42 == 2)
                  WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v42 -= 2;
              }
              v43 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v43)
              {
                if (*(_DWORD *)v43 == 2)
                  WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v43 -= 2;
              }
              ++v29;
            }
            while (v29 != (uint64_t *)v45);
          }
          v44 = __ldxr(v24);
          if (v44 == 1)
          {
            if (!__stlxr(0, v24))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v54;
  v54 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v22);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1947B0288(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF *a15, int a16, int a17, WTF::StringImpl *a18, WTF::StringImpl *a19, uint64_t a20,WTF::StringImpl *a21,char a22,WTF::StringImpl *a23,uint64_t a24,WTF::StringImpl *a25,uint64_t a26,WTF::StringImpl *a27)
{
  unsigned __int8 *v27;
  int v29;

  v29 = __ldxr(v27);
  if (v29 == 1)
  {
    if (!__stlxr(0, v27))
    {
LABEL_6:
      if (a21)
      {
        if (*(_DWORD *)a21 == 2)
          WTF::StringImpl::destroy(a21, a2);
        else
          *(_DWORD *)a21 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

WTF *WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::dispatchAll(uint64_t a1, unsigned __int8 **a2)
{
  void *v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int **v9;
  void *v10;
  WTF::NativePromiseBase **v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  WTF *v15;
  WTF *v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  WTF *result;
  _QWORD v23[2];
  unsigned int **v24;
  unint64_t v25;
  uint64_t v26;
  WTF *v27;
  uint64_t v28;
  uint64_t v29;

  v24 = (unsigned int **)&v26;
  v25 = 1;
  v27 = (WTF *)&v29;
  v28 = 1;
  v4 = *(void **)(a1 + 72);
  if (v4 == (void *)(a1 + 88))
  {
    v6 = *(unsigned int *)(a1 + 84);
    memcpy(&v29, v4, 8 * v6);
  }
  else
  {
    *(_QWORD *)(a1 + 72) = a1 + 88;
    v27 = (WTF *)v4;
    v5 = *(_DWORD *)(a1 + 80);
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    *(_DWORD *)(a1 + 80) = 1;
    LODWORD(v28) = v5;
  }
  HIDWORD(v28) = v6;
  *(_QWORD *)(a1 + 80) = 1;
  v7 = *(_DWORD *)(a1 + 104);
  v8 = *(_DWORD *)(a1 + 108);
  v9 = *(unsigned int ***)(a1 + 96);
  v24 = v9;
  v25 = __PAIR64__(v8, v7);
  v23[0] = 0;
  *(_QWORD *)(a1 + 96) = 0;
  v23[1] = 0;
  *(_QWORD *)(a1 + 104) = 0;
  WTF::Vector<WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v23, v4);
  if (HIDWORD(v28))
  {
    v11 = (WTF::NativePromiseBase **)v27;
    v12 = 8 * HIDWORD(v28);
    do
    {
      WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(*v11++, a1, a2);
      v12 -= 8;
    }
    while (v12);
    v9 = v24;
    v8 = HIDWORD(v25);
  }
  if (v8)
  {
    v13 = 40 * v8;
    do
    {
      WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::settleChainedPromise(a1, v9);
      v9 += 5;
      v13 -= 40;
    }
    while (v13);
  }
  WTF::Vector<WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v24, v10);
  if (HIDWORD(v28))
  {
    v15 = v27;
    v16 = (WTF *)((char *)v27 + 8 * HIDWORD(v28));
    do
    {
      v17 = *(unsigned int **)v15;
      *(_QWORD *)v15 = 0;
      if (v17)
      {
        v18 = v17 + 2;
        do
        {
          v19 = __ldaxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
        {
          atomic_store(1u, v17 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 8))(v17);
        }
      }
      v15 = (WTF *)((char *)v15 + 8);
    }
    while (v15 != v16);
  }
  result = v27;
  if (&v29 != (uint64_t *)v27 && v27 != 0)
  {
    v27 = 0;
    LODWORD(v28) = 0;
    return (WTF *)WTF::fastFree(result, v14);
  }
  return result;
}

void sub_1947B0634(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, WTF *a14, int a15, unsigned int a16)
{
  WTF *v16;
  void *v18;
  WTF *v19;
  unsigned int **v21;
  unsigned int **v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;

  WTF::Vector<WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a11, a2);
  if (a16)
  {
    v21 = (unsigned int **)a14;
    v22 = (unsigned int **)((char *)a14 + 8 * a16);
    do
    {
      v23 = *v21;
      *v21 = 0;
      if (v23)
      {
        v24 = v23 + 2;
        do
        {
          v25 = __ldaxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
        {
          atomic_store(1u, v23 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v23 + 8))(v23);
        }
      }
      ++v21;
    }
    while (v21 != v22);
  }
  v19 = a14;
  if (v16 != a14 && a14 != 0)
  {
    a14 = 0;
    a15 = 0;
    WTF::fastFree(v19, v18);
  }
  _Unwind_Resume(a1);
}

uint64_t WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::settleChainedPromise(uint64_t a1, unsigned int **a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned __int8 *v6;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::Lock *v11;
  int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t result;
  unsigned int v17;
  unsigned int v18;
  _QWORD v19[4];
  WTF::Lock *v20;
  char v21;
  unsigned int *v22;

  v3 = *a2;
  *a2 = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  v19[0] = 0;
  v19[1] = 0;
  v19[2] = "<chained promise>";
  v19[3] = 0;
  v6 = (unsigned __int8 *)(v3 + 12);
  v20 = (WTF::Lock *)(v3 + 12);
  v21 = 1;
  if (__ldaxr((unsigned __int8 *)v3 + 48))
  {
    __clrex();
LABEL_7:
    v6 = (unsigned __int8 *)MEMORY[0x19AEA534C]();
    goto LABEL_8;
  }
  if (__stxr(1u, v6))
    goto LABEL_7;
LABEL_8:
  v8 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v6);
  if (*v8 && v8[16] >= 4u)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v8, 4u, (WTF::Logger::LogSiteIdentifier *)v19, " settling chained promise ", (uint64_t)v3);
  v9 = v3[16];
  v10 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v9 == -1)
  {
    if ((_DWORD)v10 == -1)
      goto LABEL_16;
  }
  else if ((_DWORD)v10 == -1)
  {
    ((void (*)(unsigned int **, unsigned int *))off_1E3206E28[v9])(&v22, v3 + 14);
    v3[16] = -1;
    goto LABEL_16;
  }
  v22 = v3 + 14;
  ((void (*)(unsigned int **))off_1E3206E68[v10])(&v22);
LABEL_16:
  WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::dispatchAll(v3, &v20);
  if (v21)
  {
    v11 = v20;
    v12 = __ldxr((unsigned __int8 *)v20);
    if (v12 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v20))
        goto LABEL_22;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow(v11);
  }
LABEL_22:
  v13 = v3 + 2;
  do
  {
    v14 = __ldaxr(v13);
    v15 = v14 - 1;
  }
  while (__stlxr(v15, v13));
  if (!v15)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
  }
  result = WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::assertIsDead((uint64_t)v3);
  do
  {
    v17 = __ldaxr(v13);
    v18 = v17 - 1;
  }
  while (__stlxr(v18, v13));
  if (!v18)
  {
    atomic_store(1u, v3 + 2);
    return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
  }
  return result;
}

void sub_1947B0890(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::Lock *a14, char a15)
{
  unsigned int *v15;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;

  if (v15)
  {
    v17 = v15 + 2;
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      atomic_store(1u, v15 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 16))(v15);
    }
    WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::assertIsDead((uint64_t)v15);
    do
    {
      v20 = __ldaxr(v17);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v17));
    if (!v21)
    {
      atomic_store(1u, v15 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 16))(v15);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIvN7WebCore18PlatformMediaErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIvSB_EENS8_8FunctionIFSI_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISM_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSQ_1EJSE_SI_SL_EEEOS10_EEEDcSS_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v2 != -1)
  {
    if (!(_DWORD)v2)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_1E3206E28[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 8) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIvN7WebCore18PlatformMediaErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIvSB_EENS8_8FunctionIFSI_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISM_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSQ_1EJSE_SI_SL_EEEOS10_EEEDcSS_DpT0_(uint64_t result, _BYTE *a2, _WORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  char v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 1)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E3206E28[v5])(&v8, v4);
LABEL_7:
    *(_DWORD *)(v4 + 8) = -1;
    *(_WORD *)v4 = *a3;
    *(_DWORD *)(v4 + 8) = 1;
    return result;
  }
  v6 = (unsigned __int16)*a3;
  v7 = *a3;
  if (v6 > 0xFF != (a2[1] != 0))
  {
    if (v6 < 0x100)
    {
      if (a2[1])
        a2[1] = 0;
    }
    else
    {
      *a2 = v7;
      a2[1] = 1;
    }
  }
  else if (v6 >= 0x100)
  {
    *a2 = v7;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIvN7WebCore18PlatformMediaErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIvSB_EENS8_8FunctionIFSI_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISM_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSQ_1EJSE_SI_SL_EEEOS10_EEEDcSS_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 2)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E3206E28[v5])(&v8, v4);
LABEL_6:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 2;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [22],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,char [17],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,char [12],BOOL,char [2]>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4, uint64_t a5, const char *a6, uint64_t a7, const char *a8, uint64_t a9, char *a10)
{
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  NSObject *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  unsigned __int8 *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  WTF::Logger *v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  const char *v42;
  WTF::Logger *v43;
  uint64_t v44;
  WTF::StringImpl **v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  int v55;
  uint64_t v56;
  WTF::Logger *v64;
  uint64_t v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  __int128 buf;
  int v81;
  WTF::StringImpl *v82;
  int v83;
  WTF::StringImpl *v84;
  int v85;
  WTF::StringImpl *v86;
  int v87;
  WTF::StringImpl *v88;
  int v89;
  WTF::StringImpl *v90;
  int v91;
  WTF::StringImpl *v92;
  int v93;
  _QWORD v94[3];

  v94[1] = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  WTF::String::String((WTF::String *)&v71, a4);
  WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(a5, &v70);
  WTF::String::String((WTF::String *)&v69, a6);
  WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(a7, &v68);
  WTF::String::String((WTF::String *)&v67, a8);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = (WTF::StringImpl *)buf;
  WTF::String::String((WTF::String *)&v66, a10);
  v64 = v71;
  v79 = v70;
  *(_QWORD *)&buf = v72;
  v77 = v68;
  v78 = v69;
  v75 = v11;
  v76 = v67;
  v74 = v66;
  result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t *)&buf, (uint64_t *)&v64, (uint64_t *)&v79, (uint64_t *)&v78, (uint64_t *)&v77, (uint64_t *)&v76, (uint64_t *)&v75, (uint64_t *)&v74, &v73);
  if (!v73)
  {
    __break(0xC471u);
    return result;
  }
  v14 = v66;
  v66 = 0;
  if (!v14)
  {
LABEL_5:
    if (v11)
      goto LABEL_6;
    goto LABEL_8;
  }
  if (*(_DWORD *)v14 != 2)
  {
    *(_DWORD *)v14 -= 2;
    goto LABEL_5;
  }
  WTF::StringImpl::destroy(v14, v13);
  if (v11)
  {
LABEL_6:
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v13);
    else
      *(_DWORD *)v11 -= 2;
  }
LABEL_8:
  v15 = v67;
  v67 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v13);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = v68;
  v68 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v13);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = v69;
  v69 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v13);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = v70;
  v70 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v13);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v71;
  v71 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v13);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = v72;
  v72 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v13);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = *(NSObject **)(a1 + 32);
  v22 = os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v22)
  {
    WTF::String::utf8();
    v24 = v64 ? (char *)v64 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v24;
    _os_log_impl(&dword_1940B8000, v21, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v22 = (uint64_t)v64;
    v64 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 1)
        v22 = WTF::fastFree((WTF *)v22, v23);
      else
        --*(_DWORD *)v22;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v25 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v26 = *v25;
      if ((v26 & 1) != 0)
        break;
      v27 = __ldaxr(v25);
      if (v27 == v26)
      {
        if (!__stxr(v26 | 1, v25))
        {
          v28 = WTF::Logger::observers((WTF::Logger *)v22);
          v29 = *(unsigned int *)(v28 + 12);
          if ((_DWORD)v29)
          {
            v30 = *(uint64_t **)v28;
            v56 = *(_QWORD *)v28 + 8 * v29;
            do
            {
              v31 = *v30;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v81 = 0;
              WTF::String::String((WTF::String *)&v82, a4);
              v83 = 0;
              WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(a5, &v84);
              v85 = 0;
              WTF::String::String((WTF::String *)&v86, a6);
              v87 = 0;
              WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(a7, &v88);
              v89 = 0;
              WTF::String::String((WTF::String *)&v90, a8);
              v91 = 0;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v92 = v79;
              v93 = 0;
              WTF::String::String((WTF::String *)v94, a10);
              v64 = 0;
              v65 = 0;
              v32 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x80);
              LODWORD(v65) = 8;
              v64 = v32;
              v33 = HIDWORD(v65);
              *((_DWORD *)v32 + 4 * HIDWORD(v65)) = buf;
              v34 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v32 + 2 * v33 + 1) = v34;
              *((_DWORD *)v32 + 4 * (v33 + 1)) = v81;
              v35 = v82;
              if (v82)
                *(_DWORD *)v82 += 2;
              *((_QWORD *)v32 + 2 * (v33 + 1) + 1) = v35;
              *((_DWORD *)v32 + 4 * (v33 + 2)) = v83;
              v36 = v84;
              if (v84)
                *(_DWORD *)v84 += 2;
              *((_QWORD *)v32 + 2 * (v33 + 2) + 1) = v36;
              *((_DWORD *)v32 + 4 * (v33 + 3)) = v85;
              v37 = v86;
              if (v86)
                *(_DWORD *)v86 += 2;
              *((_QWORD *)v32 + 2 * (v33 + 3) + 1) = v37;
              *((_DWORD *)v32 + 4 * (v33 + 4)) = v87;
              v38 = v88;
              if (v88)
                *(_DWORD *)v88 += 2;
              *((_QWORD *)v32 + 2 * (v33 + 4) + 1) = v38;
              *((_DWORD *)v32 + 4 * (v33 + 5)) = v89;
              v39 = v90;
              if (v90)
                *(_DWORD *)v90 += 2;
              *((_QWORD *)v32 + 2 * (v33 + 5) + 1) = v39;
              *((_DWORD *)v32 + 4 * (v33 + 6)) = v91;
              v40 = v92;
              if (v92)
                *(_DWORD *)v92 += 2;
              *((_QWORD *)v32 + 2 * (v33 + 6) + 1) = v40;
              *((_DWORD *)v32 + 4 * (v33 + 7)) = v93;
              v41 = v94[0];
              if (v94[0])
                *(_DWORD *)v94[0] += 2;
              v42 = a4;
              *((_QWORD *)v32 + 2 * (v33 + 7) + 1) = v41;
              HIDWORD(v65) = v33 + 8;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v31 + 16))(v31, a1, a2, &v64);
              v43 = v64;
              if (HIDWORD(v65))
              {
                v44 = 16 * HIDWORD(v65);
                v45 = (WTF::StringImpl **)((char *)v64 + 8);
                do
                {
                  v46 = *v45;
                  *v45 = 0;
                  if (v46)
                  {
                    if (*(_DWORD *)v46 == 2)
                      WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v23);
                    else
                      *(_DWORD *)v46 -= 2;
                  }
                  v45 += 2;
                  v44 -= 16;
                }
                while (v44);
                v43 = v64;
              }
              a4 = v42;
              if (v43)
              {
                v64 = 0;
                LODWORD(v65) = 0;
                WTF::fastFree(v43, v23);
              }
              v47 = (WTF::StringImpl *)v94[0];
              v94[0] = 0;
              if (v47)
              {
                if (*(_DWORD *)v47 == 2)
                  WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v23);
                else
                  *(_DWORD *)v47 -= 2;
              }
              v48 = v92;
              v92 = 0;
              if (v48)
              {
                if (*(_DWORD *)v48 == 2)
                  WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v23);
                else
                  *(_DWORD *)v48 -= 2;
              }
              v49 = v90;
              v90 = 0;
              if (v49)
              {
                if (*(_DWORD *)v49 == 2)
                  WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v23);
                else
                  *(_DWORD *)v49 -= 2;
              }
              v50 = v88;
              v88 = 0;
              if (v50)
              {
                if (*(_DWORD *)v50 == 2)
                  WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v23);
                else
                  *(_DWORD *)v50 -= 2;
              }
              v51 = v86;
              v86 = 0;
              if (v51)
              {
                if (*(_DWORD *)v51 == 2)
                  WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v23);
                else
                  *(_DWORD *)v51 -= 2;
              }
              v52 = v84;
              v84 = 0;
              if (v52)
              {
                if (*(_DWORD *)v52 == 2)
                  WTF::StringImpl::destroy(v52, (WTF::StringImpl *)v23);
                else
                  *(_DWORD *)v52 -= 2;
              }
              v53 = v82;
              v82 = 0;
              if (v53)
              {
                if (*(_DWORD *)v53 == 2)
                  WTF::StringImpl::destroy(v53, (WTF::StringImpl *)v23);
                else
                  *(_DWORD *)v53 -= 2;
              }
              v54 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v54)
              {
                if (*(_DWORD *)v54 == 2)
                  WTF::StringImpl::destroy(v54, (WTF::StringImpl *)v23);
                else
                  *(_DWORD *)v54 -= 2;
              }
              ++v30;
            }
            while (v30 != (uint64_t *)v56);
          }
          v55 = __ldxr(v25);
          if (v55 == 1)
          {
            if (!__stlxr(0, v25))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = v73;
  v73 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v23);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1947B1388(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,WTF *a29,int a30,int a31,WTF::StringImpl *a32,WTF::StringImpl *a33,WTF::StringImpl *a34,WTF::StringImpl *a35,WTF::StringImpl *a36,WTF::StringImpl *a37,uint64_t a38,WTF::StringImpl *a39)
{
  unsigned __int8 *v39;
  int v41;

  v41 = __ldxr(v39);
  if (v41 == 1)
  {
    if (!__stlxr(0, v39))
    {
LABEL_6:
      if (a39)
      {
        if (*(_DWORD *)a39 == 2)
          WTF::StringImpl::destroy(a39, a2);
        else
          *(_DWORD *)a39 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

unint64_t WTF::Vector<WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 40 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  WTF *v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  WTF *v9;
  WTF *v10;
  uint64_t v11;
  __int128 v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  if (a2 < 0x6666667)
  {
    v2 = result;
    v3 = *(WTF **)result;
    v4 = *(_DWORD *)(result + 12);
    v5 = 40 * a2;
    v6 = WTF::fastMalloc((WTF *)(40 * a2));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x28;
    *(_QWORD *)v2 = v6;
    if (v4)
    {
      v8 = v6;
      v9 = (WTF *)((char *)v3 + 40 * v4);
      v10 = v3;
      do
      {
        v11 = *(_QWORD *)v10;
        *(_QWORD *)v10 = 0;
        *(_QWORD *)v8 = v11;
        v12 = *(_OWORD *)((char *)v10 + 8);
        *(_OWORD *)(v8 + 24) = *(_OWORD *)((char *)v10 + 24);
        *(_OWORD *)(v8 + 8) = v12;
        if (*(_QWORD *)v10)
        {
          WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::assertIsDead(*(_QWORD *)v10);
          v13 = *(unsigned int **)v10;
          *(_QWORD *)v10 = 0;
          if (v13)
          {
            v14 = v13 + 2;
            do
            {
              v15 = __ldaxr(v14);
              v16 = v15 - 1;
            }
            while (__stlxr(v16, v14));
            if (!v16)
            {
              atomic_store(1u, v13 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 16))(v13);
            }
          }
        }
        else
        {
          *(_QWORD *)v10 = 0;
        }
        v8 += 40;
        v10 = (WTF *)((char *)v10 + 40);
      }
      while (v10 != v9);
    }
    if (v3)
    {
      if (*(WTF **)v2 == v3)
      {
        *(_QWORD *)v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

void sub_1947B1918(_Unwind_Exception *exception_object)
{
  unsigned int **v1;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *v1;
  *v1 = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN7WebCore18PlatformMediaErrorELj0EE11whenSettledIZNS3_22MediaPlayerPrivateWebM12dataReceivedERKNS3_12SharedBufferEE3__1EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIvS4_EEE_vJSP_EED1Ev(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = a1[1];
  *a1 = &off_1E3206E90;
  a1[1] = 0;
  if (!v3)
    return a1;
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return a1;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN7WebCore18PlatformMediaErrorELj0EE11whenSettledIZNS3_22MediaPlayerPrivateWebM12dataReceivedERKNS3_12SharedBufferEE3__1EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIvS4_EEE_vJSP_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3206E90;
  *((_QWORD *)this + 1) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return WTF::fastFree(this, a2);
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN7WebCore18PlatformMediaErrorELj0EE11whenSettledIZNS3_22MediaPlayerPrivateWebM12dataReceivedERKNS3_12SharedBufferEE3__1EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIvS4_EEE_vJSP_EE4callESP_(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  int v6;
  int v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  NSObject *v17;
  uint64_t v18;
  void *v19;
  char *v20;
  unsigned __int8 *v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  WTF::String *v29;
  WTF::StringImpl *v30;
  WTF::Logger *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::Logger *v38;
  uint64_t v39;
  WTF::StringImpl **v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  int v48;
  char v49;
  int v51;
  BOOL v52;
  WTF::MediaTime *v53;
  _QWORD *i;
  uint64_t v55;
  int v56;
  uint64_t *v57;
  uint64_t v58;
  __int128 *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  WTF::Logger *v63;
  uint64_t v64;
  __int128 *v65;
  uint64_t v66;
  WTF::Logger *v67;
  __int128 v68;
  __int128 v69;
  __int128 *v70;
  void *v71;
  WTF::Logger *v72;
  uint64_t v73;
  uint64_t v74;
  WTF::Logger *v75;
  uint64_t v76;
  __int128 *v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  void *v81;
  WTF *v82;
  void *v83;
  WTF *v84;
  uint64_t v85;
  WTF *v86[2];
  const char *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  __int128 v96;
  WTF::Logger *v97;
  WTF *v98;
  uint8_t buf[16];
  const char *v100;
  WTF::StringImpl *v101;
  int v102;
  WTF::StringImpl *v103;
  int v104;
  WTF::StringImpl *v105;
  int v106;
  WTF::StringImpl *v107;
  uint64_t v108;

  v108 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)result + 1);
  if (!v2)
    return result;
  v4 = *((_QWORD *)result + 2);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_6;
  }
  result = (unsigned __int8 *)MEMORY[0x19AEA534C](v2);
LABEL_6:
  if (*(_QWORD *)(v2 + 24))
    ++*(_QWORD *)(v2 + 8);
  else
    v4 = 0;
  v6 = __ldxr((unsigned __int8 *)v2);
  if (v6 != 1)
  {
    __clrex();
LABEL_50:
    result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
    if (v4)
      goto LABEL_12;
    return result;
  }
  if (__stlxr(0, (unsigned __int8 *)v2))
    goto LABEL_50;
  if (v4)
  {
LABEL_12:
    v7 = *(unsigned __int8 *)(a2 + 1);
    --*(_DWORD *)(v4 + 612);
    v8 = *(_QWORD *)(v4 + 368);
    v9 = *(WTF::StringImpl **)(v4 + 376);
    v86[0] = (WTF *)"MediaPlayerPrivateWebM";
    v86[1] = (WTF *)23;
    v87 = "appendCompleted";
    v88 = v9;
    if (*(_BYTE *)(v8 + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 3u)
    {
      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v86);
      WTF::String::String((WTF::String *)&v91, "pending appends = ");
      WTF::String::number((WTF::String *)*(unsigned int *)(v4 + 612));
      WTF::String::String((WTF::String *)&v89, " success = ");
      if (v7)
        v10 = 6;
      else
        v10 = 5;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v11 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = v92;
      v97 = v91;
      v95 = v89;
      *(_QWORD *)&v96 = v90;
      v94 = v11;
      WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)&v97, (uint64_t *)&v96, (uint64_t *)&v95, (uint64_t *)&v94, &v93);
      if (!v93)
      {
LABEL_163:
        __break(0xC471u);
        JUMPOUT(0x1947B2524);
      }
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v12);
        else
          *(_DWORD *)v11 -= 2;
      }
      v13 = v89;
      v89 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v12);
        else
          *(_DWORD *)v13 -= 2;
      }
      v14 = v90;
      v90 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v12);
        else
          *(_DWORD *)v14 -= 2;
      }
      v15 = v91;
      v91 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v12);
        else
          *(_DWORD *)v15 -= 2;
      }
      v16 = v92;
      v92 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v12);
        else
          *(_DWORD *)v16 -= 2;
      }
      v17 = qword_1ECE7C4A0;
      v18 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v18)
      {
        WTF::String::utf8();
        v20 = v97 ? (char *)v97 + 16 : 0;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = v20;
        _os_log_impl(&dword_1940B8000, v17, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
        v18 = (uint64_t)v97;
        v97 = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 1)
            v18 = WTF::fastFree((WTF *)v18, v19);
          else
            --*(_DWORD *)v18;
        }
      }
      if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
      {
        v21 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
        while (1)
        {
          v22 = *v21;
          if ((v22 & 1) != 0)
            break;
          v23 = __ldaxr(v21);
          if (v23 == v22)
          {
            if (!__stxr(v22 | 1, v21))
            {
              v24 = WTF::Logger::observers((WTF::Logger *)v18);
              v25 = *(unsigned int *)(v24 + 12);
              if ((_DWORD)v25)
              {
                v26 = *(uint64_t **)v24;
                v85 = *(_QWORD *)v24 + 8 * v25;
                v27 = v10 - 1;
                do
                {
                  v28 = *v26;
                  *(_DWORD *)buf = 0;
                  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v86);
                  LODWORD(v100) = 0;
                  WTF::String::String((WTF::String *)&v101, "pending appends = ");
                  v29 = (WTF::String *)*(unsigned int *)(v4 + 612);
                  v102 = 0;
                  WTF::String::number(v29);
                  v104 = 0;
                  WTF::String::String((WTF::String *)&v105, " success = ");
                  v106 = 0;
                  if (v27)
                  {
                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                    v30 = (WTF::StringImpl *)v96;
                  }
                  else
                  {
                    v47 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
                    *MEMORY[0x1E0CBEF70] += 2;
                    v30 = v47;
                  }
                  v107 = v30;
                  v97 = 0;
                  v98 = 0;
                  v31 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x50);
                  LODWORD(v98) = 5;
                  v97 = v31;
                  v32 = HIDWORD(v98);
                  *((_DWORD *)v31 + 4 * HIDWORD(v98)) = *(_DWORD *)buf;
                  v33 = *(_QWORD *)&buf[8];
                  if (*(_QWORD *)&buf[8])
                    **(_DWORD **)&buf[8] += 2;
                  *((_QWORD *)v31 + 2 * v32 + 1) = v33;
                  *((_DWORD *)v31 + 4 * (v32 + 1)) = (_DWORD)v100;
                  v34 = v101;
                  if (v101)
                    *(_DWORD *)v101 += 2;
                  *((_QWORD *)v31 + 2 * (v32 + 1) + 1) = v34;
                  *((_DWORD *)v31 + 4 * (v32 + 2)) = v102;
                  v35 = v103;
                  if (v103)
                    *(_DWORD *)v103 += 2;
                  *((_QWORD *)v31 + 2 * (v32 + 2) + 1) = v35;
                  *((_DWORD *)v31 + 4 * (v32 + 3)) = v104;
                  v36 = v105;
                  if (v105)
                    *(_DWORD *)v105 += 2;
                  *((_QWORD *)v31 + 2 * (v32 + 3) + 1) = v36;
                  *((_DWORD *)v31 + 4 * (v32 + 4)) = v106;
                  v37 = v107;
                  if (v107)
                    *(_DWORD *)v107 += 2;
                  *((_QWORD *)v31 + 2 * (v32 + 4) + 1) = v37;
                  HIDWORD(v98) = v32 + 5;
                  (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v28 + 16))(v28, &WebCore::LogMedia, 3, &v97);
                  v38 = v97;
                  if (HIDWORD(v98))
                  {
                    v39 = 16 * HIDWORD(v98);
                    v40 = (WTF::StringImpl **)((char *)v97 + 8);
                    do
                    {
                      v41 = *v40;
                      *v40 = 0;
                      if (v41)
                      {
                        if (*(_DWORD *)v41 == 2)
                          WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v19);
                        else
                          *(_DWORD *)v41 -= 2;
                      }
                      v40 += 2;
                      v39 -= 16;
                    }
                    while (v39);
                    v38 = v97;
                  }
                  if (v38)
                  {
                    v97 = 0;
                    LODWORD(v98) = 0;
                    WTF::fastFree(v38, v19);
                  }
                  v42 = v107;
                  v107 = 0;
                  if (v42)
                  {
                    if (*(_DWORD *)v42 == 2)
                      WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v19);
                    else
                      *(_DWORD *)v42 -= 2;
                  }
                  v43 = v105;
                  v105 = 0;
                  if (v43)
                  {
                    if (*(_DWORD *)v43 == 2)
                      WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v19);
                    else
                      *(_DWORD *)v43 -= 2;
                  }
                  v44 = v103;
                  v103 = 0;
                  if (v44)
                  {
                    if (*(_DWORD *)v44 == 2)
                      WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v19);
                    else
                      *(_DWORD *)v44 -= 2;
                  }
                  v45 = v101;
                  v101 = 0;
                  if (v45)
                  {
                    if (*(_DWORD *)v45 == 2)
                      WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v19);
                    else
                      *(_DWORD *)v45 -= 2;
                  }
                  v46 = *(WTF::StringImpl **)&buf[8];
                  *(_QWORD *)&buf[8] = 0;
                  if (v46)
                  {
                    if (*(_DWORD *)v46 == 2)
                      WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v19);
                    else
                      *(_DWORD *)v46 -= 2;
                  }
                  ++v26;
                }
                while (v26 != (uint64_t *)v85);
              }
              v48 = __ldxr(v21);
              if (v48 == 1)
              {
                if (!__stlxr(0, v21))
                  break;
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
              break;
            }
          }
          else
          {
            __clrex();
          }
        }
      }
      result = (unsigned __int8 *)v93;
      v93 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v19);
        else
          *(_DWORD *)result -= 2;
      }
      v8 = *(_QWORD *)(v4 + 368);
      v9 = *(WTF::StringImpl **)(v4 + 376);
    }
    v49 = 1;
    LOBYTE(v86[0]) = 1;
    *(_QWORD *)buf = "MediaPlayerPrivateWebM";
    *(_QWORD *)&buf[8] = 23;
    v100 = "setLoadingProgresssed";
    v101 = v9;
    if (*(_BYTE *)(v8 + 12))
    {
      if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
      {
        result = (unsigned __int8 *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogMedia, 3, (WTF::Logger::LogSiteIdentifier *)buf);
        v49 = (char)v86[0];
      }
    }
    *(_BYTE *)(v4 + 621) = v49;
    v51 = *(unsigned __int8 *)(v4 + 624) | v7;
    *(_BYTE *)(v4 + 624) |= v7;
    if (v51)
      goto LABEL_155;
    if (*(_BYTE *)(v4 + 622))
      v52 = *(_DWORD *)(v4 + 612) == 0;
    else
      v52 = 0;
    v53 = (WTF::MediaTime *)WTF::MediaTime::negativeInfiniteTime((WTF::MediaTime *)result);
    *(_OWORD *)buf = *(_OWORD *)v53;
    for (i = *(_QWORD **)(v4 + 216); i; i = (_QWORD *)*i)
    {
      v55 = i[3];
      v56 = *(_DWORD *)(v55 + 108);
      if (v56)
      {
        *(_OWORD *)v86 = *(_OWORD *)(*(_QWORD *)(v55 + 96) + 32 * (v56 - 1) + 16);
        v53 = (WTF::MediaTime *)WTF::MediaTime::compare((WTF::MediaTime *)buf, (const WTF::MediaTime *)v86);
        if ((_DWORD)v53 == -1)
          v57 = (uint64_t *)v86;
        else
          v57 = (uint64_t *)buf;
        v58 = *v57;
        *(_QWORD *)&buf[5] = *(uint64_t *)((char *)v57 + 5);
        *(_QWORD *)buf = v58;
      }
    }
    if ((buf[12] & 8) != 0)
    {
      v86[0] = 0;
      v86[1] = 0;
      WebCore::MediaPlayerPrivateWebM::setBufferedRanges((unsigned __int8 *)v4, (uint64_t)v86);
      v84 = v86[0];
      if (!v86[0])
      {
LABEL_155:
        WebCore::MediaPlayerPrivateWebM::maybeFinishLoading((WebCore::MediaPlayerPrivateWebM *)v4);
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WebMResourceClientParent,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v4 + 56));
      }
    }
    else
    {
      v59 = (__int128 *)WTF::MediaTime::zeroTime(v53);
      v86[0] = 0;
      v86[1] = 0;
      WebCore::PlatformTimeRanges::add((WebCore::PlatformTimeRanges *)v86, v59, (__int128 *)buf, 0);
      v60 = *(_QWORD **)(v4 + 216);
      if (v60)
      {
        if (v52)
        {
          do
          {
            v61 = v60[3];
            v62 = *(unsigned int *)(v61 + 108);
            if ((_DWORD)v62)
            {
              v97 = 0;
              LODWORD(v98) = 0;
              HIDWORD(v98) = v62;
              if (v62 >> 27)
                goto LABEL_163;
              v63 = (WTF::Logger *)WTF::fastMalloc((WTF *)(32 * v62));
              LODWORD(v98) = v62;
              v97 = v63;
              v64 = *(unsigned int *)(v61 + 108);
              if ((_DWORD)v64)
              {
                v65 = *(__int128 **)(v61 + 96);
                v66 = 32 * v64;
                v67 = v63;
                do
                {
                  v68 = *v65;
                  v69 = v65[1];
                  v65 += 2;
                  *(_OWORD *)v67 = v68;
                  *((_OWORD *)v67 + 1) = v69;
                  v67 = (WTF::Logger *)((char *)v67 + 32);
                  v66 -= 32;
                }
                while (v66);
              }
              if (HIDWORD(v98))
                v70 = (__int128 *)((char *)v63 + 32 * (HIDWORD(v98) - 1) + 16);
              else
                v70 = (__int128 *)WTF::MediaTime::invalidTime(v63);
              v96 = *v70;
              WebCore::PlatformTimeRanges::add((WebCore::PlatformTimeRanges *)&v97, &v96, (__int128 *)buf, 0);
              WebCore::PlatformTimeRanges::intersectWith((WTF *)v86, (__int128 **)&v97);
              v72 = v97;
              if (v97)
              {
                v97 = 0;
                LODWORD(v98) = 0;
                WTF::fastFree(v72, v71);
              }
            }
            v60 = (_QWORD *)*v60;
          }
          while (v60);
        }
        else
        {
          do
          {
            v73 = v60[3];
            v74 = *(unsigned int *)(v73 + 108);
            if ((_DWORD)v74)
            {
              v97 = 0;
              LODWORD(v98) = 0;
              HIDWORD(v98) = v74;
              if (v74 >> 27)
                goto LABEL_163;
              v75 = (WTF::Logger *)WTF::fastMalloc((WTF *)(32 * v74));
              LODWORD(v98) = v74;
              v97 = v75;
              v76 = *(unsigned int *)(v73 + 108);
              if ((_DWORD)v76)
              {
                v77 = *(__int128 **)(v73 + 96);
                v78 = 32 * v76;
                do
                {
                  v79 = *v77;
                  v80 = v77[1];
                  v77 += 2;
                  *(_OWORD *)v75 = v79;
                  *((_OWORD *)v75 + 1) = v80;
                  v75 = (WTF::Logger *)((char *)v75 + 32);
                  v78 -= 32;
                }
                while (v78);
              }
              WebCore::PlatformTimeRanges::intersectWith((WTF *)v86, (__int128 **)&v97);
              if (v97)
                WTF::fastFree(v97, v81);
            }
            v60 = (_QWORD *)*v60;
          }
          while (v60);
        }
      }
      v97 = v86[0];
      v82 = v86[1];
      v86[0] = 0;
      v86[1] = 0;
      v98 = v82;
      WebCore::MediaPlayerPrivateWebM::setBufferedRanges((unsigned __int8 *)v4, (uint64_t)&v97);
      if (v97)
        WTF::fastFree(v97, v83);
      v84 = v86[0];
      if (!v86[0])
        goto LABEL_155;
      v86[0] = 0;
      LODWORD(v86[1]) = 0;
    }
    WTF::fastFree(v84, v83);
    goto LABEL_155;
  }
  return result;
}

void sub_1947B2530(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF *a17, int a18, uint64_t a19, uint64_t a20,uint64_t a21,WTF::StringImpl *a22,WTF::StringImpl *a23,WTF::StringImpl *a24,uint64_t a25,WTF::StringImpl *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,WTF *a31,int a32,int a33,char a34,WTF::StringImpl *a35,uint64_t a36,WTF::StringImpl *a37,uint64_t a38,WTF::StringImpl *a39,uint64_t a40,WTF::StringImpl *a41,uint64_t a42,WTF::StringImpl *a43)
{
  uint64_t v43;
  unsigned __int8 *v44;
  int v46;

  v46 = __ldxr(v44);
  if (v46 == 1)
  {
    if (!__stlxr(0, v44))
    {
LABEL_6:
      if (a26)
      {
        if (*(_DWORD *)a26 == 2)
          WTF::StringImpl::destroy(a26, a2);
        else
          *(_DWORD *)a26 -= 2;
      }
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WebMResourceClientParent,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v43 + 56));
      _Unwind_Resume(a1);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateWebM::enqueueSample(WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>> &&,unsigned long long)::$_0::operator()(BOOL)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  *a1 = &off_1E3206EB8;
  v3 = a1[2];
  a1[2] = 0;
  if (!v3)
    return a1;
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return a1;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateWebM::enqueueSample(WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>> &&,unsigned long long)::$_0::operator()(BOOL)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  *(_QWORD *)this = &off_1E3206EB8;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return WTF::fastFree(this, a2);
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateWebM::enqueueSample(WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>> &&,unsigned long long)::$_0::operator()(BOOL)::{lambda(void)#1},void>::call(unsigned __int8 *result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  _QWORD *v3;
  uint64_t v4;
  int v6;
  uint64_t v7;
  void *v8;
  PAL *v9;
  OpaqueCMTimebase *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[2];
  _QWORD v14[7];

  v1 = *((_QWORD *)result + 2);
  if (!v1)
    return result;
  v2 = result;
  v3 = (_QWORD *)*((_QWORD *)result + 1);
  v4 = *((_QWORD *)result + 3);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v1))
  {
    goto LABEL_6;
  }
  result = (unsigned __int8 *)MEMORY[0x19AEA534C](v1);
LABEL_6:
  if (*(_QWORD *)(v1 + 24))
    ++*(_QWORD *)(v1 + 8);
  else
    v4 = 0;
  v6 = __ldxr((unsigned __int8 *)v1);
  if (v6 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v1))
    {
      if (!v4)
        return result;
      goto LABEL_15;
    }
  }
  else
  {
    __clrex();
  }
  result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
  if (!v4)
    return result;
LABEL_15:
  if (v2[64] && (v7 = v3[32]) != 0)
  {
    v8 = *(void **)(v7 + 8);
    memset(&v14[4], 0, 24);
    v9 = (PAL *)objc_msgSend(v8, "timebase");
    PAL::softLinkCoreMediaCMTimebaseGetTime[0](v9, v10);
    v11 = v3[46];
    v12 = v3[47];
    v14[0] = "MediaPlayerPrivateWebM";
    v14[1] = 23;
    v14[2] = "videoRendererReadyForDisplayChanged";
    v14[3] = v12;
    v13[0] = 0;
    v13[1] = 0;
    if (*(_BYTE *)(v11 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [25],BOOL,char [17],WTF::MediaTime>((WTF::Logger::LogSiteIdentifier *)v14, (uint64_t)v3 + 788, (WTF::MediaTime *)v13);
    WebCore::MediaPlayerPrivateWebM::setHasAvailableVideoFrame((uint64_t)v3, 1);
  }
  else if (*(_BYTE *)(v3[46] + 12))
  {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [42]>((uint64_t)&WebCore::LogMedia, 1u, (WTF::Logger::LogSiteIdentifier *)(v2 + 32), "prerollDecodeWithCompletionHandler failed");
  }
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WebMResourceClientParent,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v4 + 56));
}

void sub_1947B2BC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WebMResourceClientParent,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v1 + 56));
  _Unwind_Resume(a1);
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [42]>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4)
{
  uint64_t result;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::Logger *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::Logger *v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  WTF::Logger *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  __int128 buf;
  int v45;
  WTF::StringImpl *v46[3];

  v46[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  result = WTF::String::String((WTF::String *)&v41, a4);
  if (!v42)
  {
    v8 = 0;
    if (v41)
      goto LABEL_3;
LABEL_72:
    v9 = 0;
    goto LABEL_4;
  }
  v8 = *((_DWORD *)v42 + 1);
  if (!v41)
    goto LABEL_72;
LABEL_3:
  v9 = *((_DWORD *)v41 + 1);
LABEL_4:
  if ((v9 | v8) < 0)
    goto LABEL_75;
  result = (v8 + v9);
  if (__OFADD__(v8, v9))
    goto LABEL_75;
  if (v42)
  {
    v10 = *((_DWORD *)v42 + 4);
    v11 = (v10 >> 2) & 1;
    if (v41 && (v10 & 4) != 0)
      goto LABEL_9;
  }
  else
  {
    if (v41)
    {
LABEL_9:
      v11 = (*((unsigned __int8 *)v41 + 16) >> 2) & 1;
      goto LABEL_10;
    }
    v11 = 1;
  }
LABEL_10:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v11, (uint64_t)v42, (uint64_t)v41, &buf);
  v43 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_75:
    __break(0xC471u);
    return result;
  }
  v13 = v41;
  v41 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v42;
  v42 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *(NSObject **)(a1 + 32);
  v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v16)
  {
    WTF::String::utf8();
    v18 = v39 ? (char *)v39 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v18;
    _os_log_impl(&dword_1940B8000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v16 = (uint64_t)v39;
    v39 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
        v16 = WTF::fastFree((WTF *)v16, v17);
      else
        --*(_DWORD *)v16;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v19 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v20 = *v19;
      if ((v20 & 1) != 0)
        break;
      v21 = __ldaxr(v19);
      if (v21 == v20)
      {
        if (!__stxr(v20 | 1, v19))
        {
          v22 = WTF::Logger::observers((WTF::Logger *)v16);
          v23 = *(unsigned int *)(v22 + 12);
          if ((_DWORD)v23)
          {
            v24 = *(uint64_t **)v22;
            v25 = *(_QWORD *)v22 + 8 * v23;
            do
            {
              v26 = *v24;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v45 = 0;
              WTF::String::String((WTF::String *)v46, a4);
              v39 = 0;
              v40 = 0;
              v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v40) = 2;
              v39 = v27;
              v28 = HIDWORD(v40);
              *((_DWORD *)v27 + 4 * HIDWORD(v40)) = buf;
              v29 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v27 + 2 * v28 + 1) = v29;
              *((_DWORD *)v27 + 4 * (v28 + 1)) = v45;
              v30 = v46[0];
              if (v46[0])
                *(_DWORD *)v46[0] += 2;
              *((_QWORD *)v27 + 2 * (v28 + 1) + 1) = v30;
              HIDWORD(v40) = v28 + 2;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, a1, a2, &v39);
              v31 = v39;
              if (HIDWORD(v40))
              {
                v32 = 16 * HIDWORD(v40);
                v33 = (WTF::StringImpl **)((char *)v39 + 8);
                do
                {
                  v34 = *v33;
                  *v33 = 0;
                  if (v34)
                  {
                    if (*(_DWORD *)v34 == 2)
                      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v17);
                    else
                      *(_DWORD *)v34 -= 2;
                  }
                  v33 += 2;
                  v32 -= 16;
                }
                while (v32);
                v31 = v39;
              }
              if (v31)
              {
                v39 = 0;
                LODWORD(v40) = 0;
                WTF::fastFree(v31, v17);
              }
              v35 = v46[0];
              v46[0] = 0;
              if (v35)
              {
                if (*(_DWORD *)v35 == 2)
                  WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v35 -= 2;
              }
              v36 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                  WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v36 -= 2;
              }
              ++v24;
            }
            while (v24 != (uint64_t *)v25);
          }
          v37 = __ldxr(v19);
          if (v37 == 1)
          {
            if (!__stlxr(0, v19))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v43;
  v43 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1947B2FD8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, WTF::StringImpl *a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19)
{
  unsigned __int8 *v19;
  int v21;

  v21 = __ldxr(v19);
  if (v21 == 1)
  {
    if (!__stlxr(0, v19))
    {
LABEL_6:
      if (a15)
      {
        if (*(_DWORD *)a15 == 2)
          WTF::StringImpl::destroy(a15, a2);
        else
          *(_DWORD *)a15 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

void std::default_delete<WebCore::TrackBuffer>::operator()[abi:sn180100](uint64_t a1, uint64_t a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  void *v12;

  if (a2)
  {
    v3 = *(unsigned int **)(a2 + 288);
    *(_QWORD *)(a2 + 288) = 0;
    if (v3)
    {
      v4 = v3 + 2;
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v3 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
      }
    }
    v7 = *(WTF **)(a2 + 96);
    if (v7)
    {
      *(_QWORD *)(a2 + 96) = 0;
      *(_DWORD *)(a2 + 104) = 0;
      WTF::fastFree(v7, (void *)a2);
    }
    v8 = *(unsigned int **)(a2 + 88);
    *(_QWORD *)(a2 + 88) = 0;
    if (v8)
    {
      v9 = v8 + 2;
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        atomic_store(1u, v8 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 8))(v8);
      }
    }
    std::__tree<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::__map_value_compare<std::pair<WTF::MediaTime,WTF::MediaTime>,std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::less<std::pair<WTF::MediaTime,WTF::MediaTime>>,true>,WTF::FastAllocator<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>>>::destroy(a2 + 64, *(WTF **)(a2 + 72));
    std::__tree<std::__value_type<WTF::MediaTime,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::__map_value_compare<WTF::MediaTime,std::__value_type<WTF::MediaTime,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::less<WTF::MediaTime>,true>,WTF::FastAllocator<std::__value_type<WTF::MediaTime,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>>>::destroy(a2 + 32, *(WTF **)(a2 + 40));
    std::__tree<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::__map_value_compare<std::pair<WTF::MediaTime,WTF::MediaTime>,std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::less<std::pair<WTF::MediaTime,WTF::MediaTime>>,true>,WTF::FastAllocator<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>>>::destroy(a2 + 8, *(WTF **)(a2 + 16));
    WTF::fastFree((WTF *)a2, v12);
  }
}

uint64_t std::__tree<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::__map_value_compare<std::pair<WTF::MediaTime,WTF::MediaTime>,std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::less<std::pair<WTF::MediaTime,WTF::MediaTime>>,true>,WTF::FastAllocator<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>>>::destroy(uint64_t result, WTF *a2)
{
  uint64_t v3;
  void *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  if (a2)
  {
    v3 = result;
    std::__tree<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::__map_value_compare<std::pair<WTF::MediaTime,WTF::MediaTime>,std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::less<std::pair<WTF::MediaTime,WTF::MediaTime>>,true>,WTF::FastAllocator<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>>>::destroy(result, *(_QWORD *)a2);
    std::__tree<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::__map_value_compare<std::pair<WTF::MediaTime,WTF::MediaTime>,std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::less<std::pair<WTF::MediaTime,WTF::MediaTime>>,true>,WTF::FastAllocator<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>>>::destroy(v3, *((_QWORD *)a2 + 1));
    v5 = (unsigned int *)*((_QWORD *)a2 + 8);
    *((_QWORD *)a2 + 8) = 0;
    if (v5)
    {
      v6 = v5 + 2;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v5 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
      }
    }
    return WTF::fastFree(a2, v4);
  }
  return result;
}

uint64_t std::__tree<std::__value_type<WTF::MediaTime,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::__map_value_compare<WTF::MediaTime,std::__value_type<WTF::MediaTime,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::less<WTF::MediaTime>,true>,WTF::FastAllocator<std::__value_type<WTF::MediaTime,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>>>::destroy(uint64_t result, WTF *a2)
{
  uint64_t v3;
  void *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  if (a2)
  {
    v3 = result;
    std::__tree<std::__value_type<WTF::MediaTime,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::__map_value_compare<WTF::MediaTime,std::__value_type<WTF::MediaTime,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::less<WTF::MediaTime>,true>,WTF::FastAllocator<std::__value_type<WTF::MediaTime,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>>>::destroy(result, *(_QWORD *)a2);
    std::__tree<std::__value_type<WTF::MediaTime,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::__map_value_compare<WTF::MediaTime,std::__value_type<WTF::MediaTime,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::less<WTF::MediaTime>,true>,WTF::FastAllocator<std::__value_type<WTF::MediaTime,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>>>::destroy(v3, *((_QWORD *)a2 + 1));
    v5 = (unsigned int *)*((_QWORD *)a2 + 6);
    *((_QWORD *)a2 + 6) = 0;
    if (v5)
    {
      v6 = v5 + 2;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v5 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
      }
    }
    return WTF::fastFree(a2, v4);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateWebM::startVideoFrameMetadataGathering(void)::$_0::operator() const(CMTime)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E3206EE0;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateWebM::startVideoFrameMetadataGathering(void)::$_0::operator() const(CMTime)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3206EE0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateWebM::startVideoFrameMetadataGathering(void)::$_0::operator() const(CMTime)::{lambda(void)#1},void>::call(unsigned __int8 *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v6;
  CMTime *v7;
  uint64_t v8;
  int v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  const void *v13;
  const void *v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  v1 = *((_QWORD *)result + 1);
  if (!v1)
    return result;
  if (!*(_QWORD *)(v1 + 8))
    return result;
  v2 = *((_QWORD *)result + 2);
  v15 = *(_OWORD *)(result + 24);
  v16 = *((_QWORD *)result + 5);
  v3 = *(_QWORD *)(v2 + 96);
  if (!v3)
    return result;
  v4 = *(_QWORD *)(v2 + 104);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_8;
  }
  result = (unsigned __int8 *)MEMORY[0x19AEA534C](v3);
LABEL_8:
  if (*(_QWORD *)(v3 + 24))
    ++*(_QWORD *)(v3 + 8);
  else
    v4 = 0;
  v6 = __ldxr((unsigned __int8 *)v3);
  if (v6 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v4)
        return result;
      goto LABEL_17;
    }
  }
  else
  {
    __clrex();
  }
  result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v4)
    return result;
LABEL_17:
  if (WebCore::MediaPlayerPrivateWebM::updateLastPixelBuffer((WebCore::MediaPlayerPrivateWebM *)v2))
  {
    BYTE8(v19) = 0;
    LOBYTE(v20) = 0;
    BYTE8(v20) = 0;
    LOBYTE(v21) = 0;
    BYTE8(v21) = 0;
    LOBYTE(v22) = 0;
    BYTE8(v22) = 0;
    BYTE12(v22) = 0;
    *((_QWORD *)&v17 + 1) = 0;
    v18 = (unint64_t)vcvt_u32_f32(*(float32x2_t *)(v2 + 544));
    v8 = *(_QWORD *)(v2 + 520) + 1;
    *(_QWORD *)(v2 + 520) = v8;
    LODWORD(v19) = v8;
    v23 = v15;
    v24 = v16;
    *(_QWORD *)&v17 = PAL::softLinkCoreMediaCMTimeGetSeconds((PAL *)&v23, v7);
    v9 = *(unsigned __int8 *)(v2 + 504);
    v10 = v20;
    *(_OWORD *)(v2 + 440) = v19;
    *(_OWORD *)(v2 + 456) = v10;
    v11 = v22;
    *(_OWORD *)(v2 + 472) = v21;
    *(_OWORD *)(v2 + 488) = v11;
    v12 = v18;
    *(_OWORD *)(v2 + 408) = v17;
    *(_OWORD *)(v2 + 424) = v12;
    if (!v9)
      *(_BYTE *)(v2 + 504) = 1;
    v13 = *(const void **)(v2 + 128);
    *(_QWORD *)&v23 = v13;
    if (v13)
      CFRetain(v13);
    (*(void (**)(_QWORD, __int128 *, __int128 *))(**(_QWORD **)(*(_QWORD *)(v4 + 8) + 8) + 600))(*(_QWORD *)(*(_QWORD *)(v4 + 8) + 8), &v17, &v23);
    v14 = (const void *)v23;
    *(_QWORD *)&v23 = 0;
    if (v14)
      CFRelease(v14);
  }
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v4);
}

void sub_1947B357C(_Unwind_Exception *a1)
{
  unsigned __int8 **v1;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v1);
  _Unwind_Resume(a1);
}

void WebCore::MediaPlayerFactoryWebM::~MediaPlayerFactoryWebM(WebCore::MediaPlayerFactoryWebM *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 0;
    v4 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v4)
    {
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v4);
        WTF::fastFree((WTF *)v4, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 0;
    v4 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v4)
    {
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v4);
        WTF::fastFree((WTF *)v4, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::MediaPlayerFactoryWebM::identifier(WebCore::MediaPlayerFactoryWebM *this)
{
  return 9;
}

uint64_t WebCore::MediaPlayerFactoryWebM::createMediaEnginePlayer@<X0>(WebCore::MediaPlayer *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  WebCore::VideoLayerManagerObjC *v15;
  uint64_t v16;
  WebCore::WebAVSampleBufferListener *v17;
  unint64_t StatusReg;
  unsigned int *v19;
  unsigned int v20;
  _QWORD *v21;
  const WTF::Logger *v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  int v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  void *v44;
  PAL *v45;
  uint64_t v46;
  int v47;
  int v48;
  double v49;
  const void *v50;
  const void *v51;
  const void *v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  float v56;
  WTF::String *v57;
  uint64_t result;
  int v59;
  int v60;
  int v61;
  BOOL v62;
  int v63;
  BOOL v64;
  int v65;
  unsigned int v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  NSObject *v71;
  uint64_t v72;
  void *v73;
  char *v74;
  unsigned __int8 *v75;
  int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  WTF::String *v83;
  WTF::Logger *v84;
  uint64_t v85;
  uint64_t v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF::Logger *v89;
  uint64_t v90;
  WTF::StringImpl **v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  int v96;
  WTF::StringImpl *v97;
  void *v98;
  unsigned int v99;
  unsigned int v100;
  int *v101;
  uint64_t *v102;
  _QWORD v103[4];
  _QWORD v104[6];
  char v105[12];
  unsigned int v106;
  const char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t (*v110)(uint64_t, uint64_t);
  unsigned int *(*v111)(uint64_t, void *);
  const char *v112;
  WTF *v113;
  WTF::Logger *v114;
  uint64_t v115;
  uint64_t v116;
  WTF::StringImpl *v117;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119;
  __int128 buf;
  int v121;
  WTF::StringImpl *v122;
  int v123;
  WTF::StringImpl *v124;
  uint64_t v125;

  v125 = *MEMORY[0x1E0C80C00];
  v5 = WTF::fastMalloc((WTF *)0x318);
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)v5 = off_1E340D798;
  *(_BYTE *)(v5 + 24) = 0;
  *(_OWORD *)(v5 + 32) = *(_OWORD *)WTF::MediaTime::invalidTime((WTF::MediaTime *)v5);
  v6 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v6 = 0;
  *(_OWORD *)(v6 + 8) = xmmword_19689B170;
  *(_QWORD *)(v5 + 48) = &unk_1E3206C58;
  *(_QWORD *)(v6 + 24) = v5 + 48;
  *(_QWORD *)(v5 + 56) = v6;
  *(_QWORD *)(v5 + 64) = &unk_1E3206C90;
  *(_QWORD *)v5 = off_1E32066F0;
  *(_QWORD *)(v5 + 72) = 0;
  *(_QWORD *)(v5 + 80) = &unk_1E3206CE0;
  *(_BYTE *)(v5 + 88) = 1;
  if (!a1 || (v7 = *(_QWORD *)a1) == 0)
  {
    v9 = 0;
    goto LABEL_15;
  }
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
LABEL_7:
    v6 = MEMORY[0x19AEA534C](v7);
    goto LABEL_8;
  }
  if (__stxr(1u, (unsigned __int8 *)v7))
    goto LABEL_7;
LABEL_8:
  if (*(_QWORD *)(v7 + 24))
  {
    ++*(_QWORD *)(v7 + 16);
    v9 = v7;
  }
  else
  {
    v9 = 0;
  }
  v10 = __ldxr((unsigned __int8 *)v7);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
      goto LABEL_15;
  }
  else
  {
    __clrex();
  }
  v6 = WTF::Lock::unlockSlow((WTF::Lock *)v7);
LABEL_15:
  v102 = a2;
  *(_QWORD *)(v5 + 96) = v9;
  *(_QWORD *)(v5 + 104) = a1;
  v11 = objc_msgSend(objc_alloc((Class)PAL::getAVSampleBufferRenderSynchronizerClass((PAL *)v6)), "init");
  *(_OWORD *)(v5 + 120) = 0u;
  *(_QWORD *)(v5 + 112) = v11;
  *(_OWORD *)(v5 + 136) = 0u;
  *(_OWORD *)(v5 + 152) = 0u;
  *(_OWORD *)(v5 + 168) = 0u;
  *(_OWORD *)(v5 + 184) = 0u;
  *(_OWORD *)(v5 + 200) = 0u;
  *(_OWORD *)(v5 + 216) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_DWORD *)(v5 + 232) = 1065353216;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_OWORD *)(v5 + 272) = 0u;
  *(_OWORD *)(v5 + 288) = 0u;
  *(_OWORD *)(v5 + 304) = 0u;
  *(_DWORD *)(v5 + 320) = 1065353216;
  WebCore::SourceBufferParserWebM::create((uint64_t *)&v107);
  *(_QWORD *)(v5 + 328) = v107;
  WTF::WorkQueue::create();
  *(_WORD *)(v5 + 344) = 0;
  *(_QWORD *)(v5 + 352) = 0;
  *(_BYTE *)(v5 + 360) = 0;
  v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)a1 + 1) + 8) + 672))(*(_QWORD *)(*((_QWORD *)a1 + 1) + 8));
  v13 = (unsigned int *)(v12 + 8);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 + 1, v13));
  *(_QWORD *)(v5 + 368) = v12;
  *(_QWORD *)(v5 + 376) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)a1 + 1) + 8) + 664))(*(_QWORD *)(*((_QWORD *)a1 + 1) + 8));
  v15 = (WebCore::VideoLayerManagerObjC *)WTF::fastMalloc((WTF *)0x50);
  WebCore::VideoLayerManagerObjC::VideoLayerManagerObjC(v15, *(const WTF::Logger **)(v5 + 368), *(const void **)(v5 + 376));
  *(_QWORD *)(v5 + 384) = v16;
  *(_QWORD *)(v5 + 392) = 0;
  *(_BYTE *)(v5 + 400) = 0;
  *(_BYTE *)(v5 + 408) = 0;
  *(_BYTE *)(v5 + 504) = 0;
  *(_OWORD *)(v5 + 512) = 0u;
  *(_DWORD *)(v5 + 528) = 0;
  *(_QWORD *)(v5 + 536) = 0;
  *(_OWORD *)(v5 + 544) = 0u;
  *(_DWORD *)(v5 + 560) = 10000000;
  *(_BYTE *)(v5 + 564) = 1;
  *(_QWORD *)(v5 + 568) = 0;
  *(_DWORD *)(v5 + 576) = 10000000;
  *(_BYTE *)(v5 + 580) = 1;
  *(_QWORD *)(v5 + 584) = 0x3FF0000000000000;
  *(_BYTE *)(v5 + 592) = 0;
  *(_BYTE *)(v5 + 600) = 0;
  *(_OWORD *)(v5 + 608) = 0u;
  *(_WORD *)(v5 + 624) = 0;
  v17 = (WebCore::WebAVSampleBufferListener *)WTF::fastMalloc((WTF *)0x10);
  WebCore::WebAVSampleBufferListener::WebAVSampleBufferListener(v17, (WebCore::WebAVSampleBufferListenerClient *)(v5 + 64));
  *(_QWORD *)(v5 + 632) = v17;
  *(_BYTE *)(v5 + 640) = 0;
  *(_QWORD *)(v5 + 648) = 0;
  *(_QWORD *)(v5 + 656) = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)(v5 + 664) = 0u;
  *(_OWORD *)(v5 + 680) = 0u;
  v19 = *(unsigned int **)(StatusReg + 736);
  if (!v19)
    v19 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 + 1, v19));
  *(_QWORD *)(v5 + 696) = v19;
  *(_QWORD *)(v5 + 656) = off_1E31F7378;
  v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v21 = off_1E3206F68;
  v21[1] = WebCore::MediaPlayerPrivateWebM::seekInternal;
  v21[2] = 0;
  v21[3] = v5;
  *(_QWORD *)(v5 + 704) = v21;
  *(_QWORD *)(v5 + 712) = 0;
  *(_DWORD *)(v5 + 720) = 10000000;
  *(_BYTE *)(v5 + 724) = 1;
  *(_BYTE *)(v5 + 728) = 0;
  *(_BYTE *)(v5 + 776) = 0;
  *(_DWORD *)(v5 + 784) = 2;
  *(_BYTE *)(v5 + 788) = 0;
  v22 = *(const WTF::Logger **)(v5 + 368);
  v23 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 376);
  v107 = "MediaPlayerPrivateWebM";
  v108 = 23;
  v109 = (uint64_t)"MediaPlayerPrivateWebM";
  v110 = v23;
  if (*((_BYTE *)v22 + 12))
  {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v107);
    v22 = *(const WTF::Logger **)(v5 + 368);
    v23 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 376);
  }
  WebCore::SourceBufferParserWebM::setLogger(*(WebCore::SourceBufferParserWebM **)(v5 + 328), v22, v23);
  v24 = *(_QWORD *)(v5 + 328);
  v25 = *(_QWORD *)(v5 + 56);
  if (!v25)
  {
    v27 = 0;
    goto LABEL_34;
  }
  if (__ldaxr((unsigned __int8 *)v25))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v25))
  {
    goto LABEL_27;
  }
  MEMORY[0x19AEA534C](v25);
LABEL_27:
  if (*(_QWORD *)(v25 + 24))
  {
    ++*(_QWORD *)(v25 + 16);
    v27 = v25;
  }
  else
  {
    v27 = 0;
  }
  v28 = __ldxr((unsigned __int8 *)v25);
  if (v28 != 1)
  {
    __clrex();
    goto LABEL_33;
  }
  if (__stlxr(0, (unsigned __int8 *)v25))
LABEL_33:
    WTF::Lock::unlockSlow((WTF::Lock *)v25);
LABEL_34:
  v29 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v29 = &off_1E3206F90;
  v29[1] = v27;
  v29[2] = v5;
  v29[3] = v5;
  v30 = *(_QWORD *)(v24 + 24);
  *(_QWORD *)(v24 + 24) = v29;
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  v31 = *(_QWORD *)(v5 + 328);
  v32 = *(_QWORD *)(v5 + 56);
  if (!v32)
  {
    v34 = 0;
    goto LABEL_48;
  }
  if (__ldaxr((unsigned __int8 *)v32))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v32))
  {
    goto LABEL_41;
  }
  MEMORY[0x19AEA534C](v32);
LABEL_41:
  if (*(_QWORD *)(v32 + 24))
  {
    ++*(_QWORD *)(v32 + 16);
    v34 = v32;
  }
  else
  {
    v34 = 0;
  }
  v35 = __ldxr((unsigned __int8 *)v32);
  if (v35 != 1)
  {
    __clrex();
    goto LABEL_47;
  }
  if (__stlxr(0, (unsigned __int8 *)v32))
LABEL_47:
    WTF::Lock::unlockSlow((WTF::Lock *)v32);
LABEL_48:
  v36 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v36 = &off_1E3206FB8;
  v36[1] = v34;
  v36[2] = v5;
  v36[3] = v5;
  v37 = *(_QWORD *)(v31 + 32);
  *(_QWORD *)(v31 + 32) = v36;
  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  v107 = 0;
  v108 = (uint64_t)&v107;
  v109 = 0x3812000000;
  v110 = __Block_byref_object_copy__2;
  v111 = __Block_byref_object_dispose__2;
  v112 = "";
  v38 = *(_QWORD *)(v5 + 72);
  if (v38)
    goto LABEL_170;
  v38 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v38 = 1;
  *(_QWORD *)(v38 + 8) = v5 + 64;
  v40 = *(unsigned int **)(v5 + 72);
  *(_QWORD *)(v5 + 72) = v38;
  if (!v40)
    goto LABEL_170;
  do
  {
    v41 = __ldaxr(v40);
    v42 = v41 - 1;
  }
  while (__stlxr(v42, v40));
  if (!v42)
  {
    atomic_store(1u, v40);
    WTF::fastFree((WTF *)v40, v39);
  }
  v38 = *(_QWORD *)(v5 + 72);
  if (v38)
  {
LABEL_170:
    do
      v43 = __ldaxr((unsigned int *)v38);
    while (__stlxr(v43 + 1, (unsigned int *)v38));
  }
  v113 = (WTF *)v38;
  v44 = *(void **)(v5 + 112);
  v45 = (PAL *)WTF::MediaTime::createWithDouble((WTF::MediaTime *)v38, 3600.0);
  *(_QWORD *)&buf = v45;
  *((_QWORD *)&buf + 1) = v46;
  if ((v46 & 0x2000000000) != 0)
  {
    WTF::MediaTime::toDouble((WTF::MediaTime *)&buf);
    PAL::softLinkCoreMediaCMTimeMakeWithSeconds((PAL *)DWORD2(buf), v49, v48);
  }
  else
  {
    PAL::softLinkCoreMediaCMTimeMake(v45, v46, v47);
  }
  v106 = v106 & 0xFFFFFFFE | BYTE12(buf) & 1 | BYTE12(buf) & 0xE;
  v104[0] = MEMORY[0x1E0C809B0];
  v104[1] = 3221225472;
  v104[2] = ___ZN7WebCore22MediaPlayerPrivateWebMC2EPNS_11MediaPlayerE_block_invoke;
  v104[3] = &unk_1E3206D18;
  v104[4] = &v107;
  v104[5] = v5;
  v50 = (const void *)objc_msgSend(v44, "addPeriodicTimeObserverForInterval:queue:usingBlock:", v105, MEMORY[0x1E0C80D38], v104);
  v51 = v50;
  if (v50)
    CFRetain(v50);
  v52 = *(const void **)(v5 + 648);
  *(_QWORD *)(v5 + 648) = v51;
  if (v52)
    CFRelease(v52);
  v54 = *(_QWORD *)(v5 + 368);
  v53 = *(_QWORD *)(v5 + 376);
  v103[0] = "MediaPlayerPrivateWebM";
  v103[1] = 23;
  v103[2] = "MediaPlayerPrivateWebM";
  v103[3] = v53;
  objc_msgSend(*(id *)(v5 + 112), "rate");
  if (*(_BYTE *)(v54 + 12))
  {
    v56 = *(float *)&v55;
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v103);
    v57 = (WTF::String *)WTF::String::String((WTF::String *)&v117, "synchronizer initial rate:");
    result = WTF::String::number(v57, v56);
    if (v118)
    {
      v59 = *((_DWORD *)v118 + 1);
      if (v117)
        goto LABEL_67;
    }
    else
    {
      v59 = 0;
      if (v117)
      {
LABEL_67:
        v60 = *((_DWORD *)v117 + 1);
        if (v116)
        {
LABEL_68:
          v61 = *(_DWORD *)(v116 + 4);
LABEL_69:
          if ((v61 | v60) < 0)
            goto LABEL_167;
          v62 = __OFADD__(v60, v61);
          v63 = v60 + v61;
          v64 = v62;
          if (v59 < 0)
            goto LABEL_167;
          if (v64)
            goto LABEL_167;
          result = (v59 + v63);
          if (__OFADD__(v59, v63))
            goto LABEL_167;
          if (v118 && (*((_BYTE *)v118 + 16) & 4) == 0)
          {
            v65 = 0;
            goto LABEL_83;
          }
          if (v117)
          {
            v66 = *((_DWORD *)v117 + 4);
            v65 = (v66 >> 2) & 1;
            if (v116 && (v66 & 4) != 0)
              goto LABEL_82;
          }
          else
          {
            if (v116)
            {
LABEL_82:
              v65 = (*(unsigned __int8 *)(v116 + 16) >> 2) & 1;
              goto LABEL_83;
            }
            v65 = 1;
          }
LABEL_83:
          result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v65, v118, (uint64_t)v117, v116, &buf);
          v119 = (WTF::StringImpl *)buf;
          if ((_QWORD)buf)
          {
            v68 = (WTF::StringImpl *)v116;
            v116 = 0;
            if (v68)
            {
              if (*(_DWORD *)v68 == 2)
                WTF::StringImpl::destroy(v68, v67);
              else
                *(_DWORD *)v68 -= 2;
            }
            v69 = v117;
            v117 = 0;
            if (v69)
            {
              if (*(_DWORD *)v69 == 2)
                WTF::StringImpl::destroy(v69, v67);
              else
                *(_DWORD *)v69 -= 2;
            }
            v70 = v118;
            v118 = 0;
            if (v70)
            {
              if (*(_DWORD *)v70 == 2)
                WTF::StringImpl::destroy(v70, v67);
              else
                *(_DWORD *)v70 -= 2;
            }
            v71 = qword_1ECE7C4A0;
            v72 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
            if ((_DWORD)v72)
            {
              WTF::String::utf8();
              v74 = v114 ? (char *)v114 + 16 : 0;
              LODWORD(buf) = 136446210;
              *(_QWORD *)((char *)&buf + 4) = v74;
              _os_log_impl(&dword_1940B8000, v71, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
              v72 = (uint64_t)v114;
              v114 = 0;
              if (v72)
              {
                if (*(_DWORD *)v72 == 1)
                  v72 = WTF::fastFree((WTF *)v72, v73);
                else
                  --*(_DWORD *)v72;
              }
            }
            if (WebCore::LogMedia)
            {
              v75 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
              while (1)
              {
                v76 = *v75;
                if ((v76 & 1) != 0)
                  break;
                v77 = __ldaxr(v75);
                if (v77 == v76)
                {
                  if (!__stxr(v76 | 1, v75))
                  {
                    v78 = WTF::Logger::observers((WTF::Logger *)v72);
                    v79 = *(unsigned int *)(v78 + 12);
                    if ((_DWORD)v79)
                    {
                      v80 = *(uint64_t **)v78;
                      v81 = *(_QWORD *)v78 + 8 * v79;
                      v101 = &v121;
                      do
                      {
                        v82 = *v80;
                        LODWORD(buf) = 0;
                        WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v103);
                        v121 = 0;
                        v83 = (WTF::String *)WTF::String::String((WTF::String *)&v122, "synchronizer initial rate:");
                        v123 = 0;
                        WTF::String::number(v83, v56);
                        v114 = 0;
                        v115 = 0;
                        v84 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
                        LODWORD(v115) = 3;
                        v114 = v84;
                        v85 = HIDWORD(v115);
                        *((_DWORD *)v84 + 4 * HIDWORD(v115)) = buf;
                        v86 = *((_QWORD *)&buf + 1);
                        if (*((_QWORD *)&buf + 1))
                          **((_DWORD **)&buf + 1) += 2;
                        *((_QWORD *)v84 + 2 * v85 + 1) = v86;
                        *((_DWORD *)v84 + 4 * (v85 + 1)) = v121;
                        v87 = v122;
                        if (v122)
                          *(_DWORD *)v122 += 2;
                        *((_QWORD *)v84 + 2 * (v85 + 1) + 1) = v87;
                        *((_DWORD *)v84 + 4 * (v85 + 2)) = v123;
                        v88 = v124;
                        if (v124)
                          *(_DWORD *)v124 += 2;
                        *((_QWORD *)v84 + 2 * (v85 + 2) + 1) = v88;
                        HIDWORD(v115) = v85 + 3;
                        (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v82 + 16))(v82, &WebCore::LogMedia, 0, &v114);
                        v89 = v114;
                        if (HIDWORD(v115))
                        {
                          v90 = 16 * HIDWORD(v115);
                          v91 = (WTF::StringImpl **)((char *)v114 + 8);
                          do
                          {
                            v92 = *v91;
                            *v91 = 0;
                            if (v92)
                            {
                              if (*(_DWORD *)v92 == 2)
                                WTF::StringImpl::destroy(v92, (WTF::StringImpl *)v73);
                              else
                                *(_DWORD *)v92 -= 2;
                            }
                            v91 += 2;
                            v90 -= 16;
                          }
                          while (v90);
                          v89 = v114;
                        }
                        if (v89)
                        {
                          v114 = 0;
                          LODWORD(v115) = 0;
                          WTF::fastFree(v89, v73);
                        }
                        v93 = v124;
                        v124 = 0;
                        if (v93)
                        {
                          if (*(_DWORD *)v93 == 2)
                            WTF::StringImpl::destroy(v93, (WTF::StringImpl *)v73);
                          else
                            *(_DWORD *)v93 -= 2;
                        }
                        v94 = v122;
                        v122 = 0;
                        if (v94)
                        {
                          if (*(_DWORD *)v94 == 2)
                            WTF::StringImpl::destroy(v94, (WTF::StringImpl *)v73);
                          else
                            *(_DWORD *)v94 -= 2;
                        }
                        v95 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                        *((_QWORD *)&buf + 1) = 0;
                        if (v95)
                        {
                          if (*(_DWORD *)v95 == 2)
                            WTF::StringImpl::destroy(v95, (WTF::StringImpl *)v73);
                          else
                            *(_DWORD *)v95 -= 2;
                        }
                        ++v80;
                      }
                      while (v80 != (uint64_t *)v81);
                    }
                    v96 = __ldxr(v75);
                    if (v96 == 1)
                    {
                      if (!__stlxr(0, v75))
                        break;
                    }
                    else
                    {
                      __clrex();
                    }
                    WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                    break;
                  }
                }
                else
                {
                  __clrex();
                }
              }
            }
            v97 = v119;
            v119 = 0;
            if (v97)
            {
              if (*(_DWORD *)v97 == 2)
                WTF::StringImpl::destroy(v97, (WTF::StringImpl *)v73);
              else
                *(_DWORD *)v97 -= 2;
            }
            goto LABEL_147;
          }
LABEL_167:
          __break(0xC471u);
          return result;
        }
LABEL_159:
        v61 = 0;
        goto LABEL_69;
      }
    }
    v60 = 0;
    if (v116)
      goto LABEL_68;
    goto LABEL_159;
  }
LABEL_147:
  LODWORD(v55) = 0;
  objc_msgSend(*(id *)(v5 + 112), "setRate:", v55, v101);
  _Block_object_dispose(&v107, 8);
  result = (uint64_t)v113;
  v113 = 0;
  if (result)
  {
    do
    {
      v99 = __ldaxr((unsigned int *)result);
      v100 = v99 - 1;
    }
    while (__stlxr(v100, (unsigned int *)result));
    if (!v100)
    {
      atomic_store(1u, (unsigned int *)result);
      result = WTF::fastFree((WTF *)result, v98);
    }
  }
  *v102 = v5;
  return result;
}

void sub_1947B41D4(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::TimerBase *a10, uint64_t a11, uint64_t *a12, WTF **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,_QWORD *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,unsigned int *a34,WTF *a35,int a36,int a37)
{
  uint64_t v37;
  WebCore::TimerBase *v38;
  const void **v39;
  uint64_t v40;
  void *v42;
  WTF::StringImpl *v43;
  void *v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  const void *v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  WTF *v53;
  void *v54;
  const void *v55;
  WTF *v56;
  const void *v57;
  const void *v58;
  const void *v59;
  const void *v60;
  unsigned int *v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int *v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int v68;
  _DWORD *v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int v73;
  unsigned int v74;
  WTF *v75;
  WTF *v76;
  const void *v77;
  WTF *v78;
  const void *v79;
  const void *v80;
  unsigned __int8 **v81;
  unsigned __int8 *v82;
  uint64_t v84;
  uint64_t v85;
  id *v86;
  BOOL v87;
  int v88;
  WTF *v89;
  void *v90;
  unsigned __int8 **v91;
  unsigned __int8 *v92;
  uint64_t v94;
  uint64_t v95;
  id *v96;
  BOOL v97;
  int v98;
  WTF *v99;
  void *v100;
  WTF *v101;
  WTF *v102;
  WTF *v103;
  void *v104;
  WTF *v105;
  uint64_t v106;
  WTF *v107;
  uint64_t v108;
  WTF *v109;
  unsigned int *v110;
  unsigned int *v111;
  unsigned int v112;
  unsigned int v113;
  unsigned __int8 **v114;
  unsigned __int8 *v115;
  unsigned int **v117;
  unsigned int **v118;
  unsigned int *v119;
  unsigned int *v120;
  unsigned int v121;
  unsigned int v122;
  unsigned int **v123;
  unsigned int **v124;
  unsigned int *v125;
  unsigned int *v126;
  unsigned int v127;
  unsigned int v128;
  uint64_t v129;
  uint64_t v130;
  WebCore::WebCoreDecompressionSession *v131;
  BOOL v132;
  int v133;
  WTF *v134;
  void *v135;
  WTF *v136;
  const void *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  BOOL v144;
  int v145;
  const void *v146;
  const void *v147;
  const void *v148;
  uint64_t v149;
  uint64_t v151;
  uint64_t v152;
  int v153;
  uint64_t v154;
  unsigned int *v155;
  unsigned int v156;
  unsigned int v157;
  WTF *v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  _QWORD *v164;
  uint64_t v165;
  const void *v166;

  v43 = *(WTF::StringImpl **)(v40 - 168);
  *(_QWORD *)(v40 - 168) = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
      WTF::StringImpl::destroy(v43, a2);
    else
      *(_DWORD *)v43 -= 2;
  }
  _Block_object_dispose(&a28, 8);
  v45 = a34;
  a34 = 0;
  if (v45)
  {
    do
    {
      v46 = __ldaxr(v45);
      v47 = v46 - 1;
    }
    while (__stlxr(v47, v45));
    if (!v47)
    {
      atomic_store(1u, v45);
      WTF::fastFree((WTF *)v45, v44);
    }
  }
  *(_QWORD *)(v37 + 656) = off_1E31F7378;
  v48 = *(_QWORD *)(v37 + 704);
  *(_QWORD *)(v37 + 704) = 0;
  if (v48)
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  WebCore::TimerBase::~TimerBase(v38);
  v49 = *(const void **)(v37 + 648);
  *(_QWORD *)(v37 + 648) = 0;
  if (v49)
    CFRelease(v49);
  v50 = *(_QWORD *)(v37 + 632);
  *(_QWORD *)(v37 + 632) = 0;
  if (v50)
  {
    do
    {
      v51 = __ldaxr((unsigned int *)v50);
      v52 = v51 - 1;
    }
    while (__stlxr(v52, (unsigned int *)v50));
    if (!v52)
    {
      atomic_store(1u, (unsigned int *)v50);
      v166 = *(const void **)(v50 + 8);
      *(_QWORD *)(v50 + 8) = 0;
      if (v166)
        CFRelease(v166);
      WTF::fastFree((WTF *)v50, v42);
    }
  }
  v53 = *(WTF **)(v37 + 536);
  *(_QWORD *)(v37 + 536) = 0;
  if (v53)
    WTF::fastFree(v53, v42);
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(v37 + 528));
  v55 = *(const void **)(v37 + 392);
  *(_QWORD *)(v37 + 392) = 0;
  if (v55)
    CFRelease(v55);
  v56 = *(WTF **)(v37 + 384);
  *(_QWORD *)(v37 + 384) = 0;
  if (v56)
  {
    v57 = (const void *)*((_QWORD *)v56 + 9);
    *((_QWORD *)v56 + 9) = 0;
    if (v57)
      CFRelease(v57);
    v58 = (const void *)*((_QWORD *)v56 + 8);
    *((_QWORD *)v56 + 8) = 0;
    if (v58)
      CFRelease(v58);
    v59 = (const void *)*((_QWORD *)v56 + 5);
    *((_QWORD *)v56 + 5) = 0;
    if (v59)
      CFRelease(v59);
    v60 = (const void *)*((_QWORD *)v56 + 4);
    *((_QWORD *)v56 + 4) = 0;
    if (v60)
      CFRelease(v60);
    v61 = (unsigned int *)*((_QWORD *)v56 + 2);
    *((_QWORD *)v56 + 2) = 0;
    if (v61)
    {
      v62 = v61 + 2;
      do
      {
        v63 = __ldaxr(v62);
        v64 = v63 - 1;
      }
      while (__stlxr(v64, v62));
      if (!v64)
      {
        atomic_store(1u, v61 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v61 + 8))(v61);
      }
    }
    WTF::fastFree(v56, v54);
  }
  v65 = *(unsigned int **)(v37 + 368);
  *(_QWORD *)(v37 + 368) = 0;
  if (v65)
  {
    v66 = v65 + 2;
    do
    {
      v67 = __ldaxr(v66);
      v68 = v67 - 1;
    }
    while (__stlxr(v68, v66));
    if (!v68)
    {
      atomic_store(1u, v65 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v65 + 8))(v65);
    }
  }
  v69 = *(_DWORD **)(v37 + 352);
  *(_QWORD *)(v37 + 352) = 0;
  if (v69)
  {
    if (v69[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v69 + 8))(v69);
    else
      --v69[2];
  }
  v70 = *a12;
  *a12 = 0;
  if (v70)
    (*(void (**)(uint64_t))(*(_QWORD *)v70 + 56))(v70);
  v71 = *(_QWORD *)(v37 + 328);
  *(_QWORD *)(v37 + 328) = 0;
  if (v71)
  {
    v72 = (unsigned int *)(v71 + 8);
    do
    {
      v73 = __ldaxr(v72);
      v74 = v73 - 1;
    }
    while (__stlxr(v74, v72));
    if (!v74)
    {
      atomic_store(1u, v72);
      v164 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v164 = off_1E32071E8;
      v164[1] = v72;
      a28 = v164;
      WTF::ensureOnMainThread();
      v165 = (uint64_t)a28;
      a28 = 0;
      if (v165)
        (*(void (**)(uint64_t))(*(_QWORD *)v165 + 8))(v165);
    }
  }
  v75 = *(WTF **)(v37 + 304);
  if (v75)
  {
    do
    {
      v76 = *(WTF **)v75;
      v77 = (const void *)*((_QWORD *)v75 + 3);
      *((_QWORD *)v75 + 3) = 0;
      if (v77)
        CFRelease(v77);
      WTF::fastFree(v75, v54);
      v75 = v76;
    }
    while (v76);
  }
  v78 = *(WTF **)(v37 + 288);
  *(_QWORD *)(v37 + 288) = 0;
  if (v78)
    WTF::fastFree(v78, v54);
  v79 = *(const void **)(v37 + 280);
  *(_QWORD *)(v37 + 280) = 0;
  if (v79)
    CFRelease(v79);
  v80 = *(const void **)(v37 + 272);
  *(_QWORD *)(v37 + 272) = 0;
  if (v80)
    CFRelease(v80);
  v81 = *(unsigned __int8 ***)(v37 + 264);
  *(_QWORD *)(v37 + 264) = 0;
  if (!v81)
  {
LABEL_78:
    v91 = *(unsigned __int8 ***)(v37 + 256);
    *(_QWORD *)(v37 + 256) = 0;
    if (!v91)
      goto LABEL_96;
    v92 = *v91;
    if (__ldaxr(*v91))
    {
      __clrex();
    }
    else if (!__stxr(1u, v92))
    {
LABEL_84:
      v94 = *((_QWORD *)v92 + 1);
      v95 = v94 - 1;
      *((_QWORD *)v92 + 1) = v94 - 1;
      if (v94 == 1)
      {
        v161 = *((_QWORD *)v92 + 2);
        v96 = (id *)*((_QWORD *)v92 + 3);
        *((_QWORD *)v92 + 3) = 0;
        v97 = v161 != 0;
      }
      else
      {
        v96 = 0;
        v97 = 1;
      }
      v98 = __ldxr(v92);
      if (v98 == 1)
      {
        if (!__stlxr(0, v92))
        {
LABEL_91:
          if (!v95)
          {
            if (v96)
            {
              WebCore::VideoMediaSampleRenderer::~VideoMediaSampleRenderer(v96);
              WTF::fastFree(v99, v100);
            }
            if (!v97)
              WTF::fastFree((WTF *)v92, v54);
          }
LABEL_96:
          v101 = *a13;
          if (*a13)
          {
            *(_QWORD *)(v37 + 240) = 0;
            *(_DWORD *)(v37 + 248) = 0;
            WTF::fastFree(v101, v54);
          }
          v102 = *(WTF **)(v37 + 216);
          if (v102)
          {
            do
            {
              v103 = *(WTF **)v102;
              v104 = (void *)*((_QWORD *)v102 + 3);
              *((_QWORD *)v102 + 3) = 0;
              if (v104)
                std::default_delete<WebCore::TrackBuffer>::operator()[abi:sn180100]((uint64_t)v102 + 24, (uint64_t)v104);
              WTF::fastFree(v102, v104);
              v102 = v103;
            }
            while (v103);
          }
          v105 = *(WTF **)(v37 + 200);
          *(_QWORD *)(v37 + 200) = 0;
          if (v105)
            WTF::fastFree(v105, v54);
          v106 = *(unsigned int *)(v37 + 196);
          if ((_DWORD)v106)
          {
            v117 = *(unsigned int ***)(v37 + 184);
            v118 = &v117[v106];
            do
            {
              v119 = *v117;
              *v117 = 0;
              if (v119)
              {
                v120 = v119 + 2;
                do
                {
                  v121 = __ldaxr(v120);
                  v122 = v121 - 1;
                }
                while (__stlxr(v122, v120));
                if (!v122)
                {
                  atomic_store(1u, v119 + 2);
                  (*(void (**)(unsigned int *))(*(_QWORD *)v119 + 8))(v119);
                }
              }
              ++v117;
            }
            while (v117 != v118);
          }
          v107 = *(WTF **)(v37 + 184);
          if (v107)
          {
            *(_QWORD *)(v37 + 184) = 0;
            *(_DWORD *)(v37 + 192) = 0;
            WTF::fastFree(v107, v54);
          }
          v108 = *(unsigned int *)(v37 + 180);
          if ((_DWORD)v108)
          {
            v123 = *(unsigned int ***)(v37 + 168);
            v124 = &v123[v108];
            do
            {
              v125 = *v123;
              *v123 = 0;
              if (v125)
              {
                v126 = v125 + 2;
                do
                {
                  v127 = __ldaxr(v126);
                  v128 = v127 - 1;
                }
                while (__stlxr(v128, v126));
                if (!v128)
                {
                  atomic_store(1u, v125 + 2);
                  (*(void (**)(unsigned int *))(*(_QWORD *)v125 + 8))(v125);
                }
              }
              ++v123;
            }
            while (v123 != v124);
          }
          v109 = *(WTF **)(v37 + 168);
          if (v109)
          {
            *(_QWORD *)(v37 + 168) = 0;
            *(_DWORD *)(v37 + 176) = 0;
            WTF::fastFree(v109, v54);
          }
          v110 = *(unsigned int **)(v37 + 160);
          *(_QWORD *)(v37 + 160) = 0;
          if (v110)
          {
            v111 = v110 + 2;
            do
            {
              v112 = __ldaxr(v111);
              v113 = v112 - 1;
            }
            while (__stlxr(v113, v111));
            if (!v113)
            {
              atomic_store(1u, v110 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v110 + 8))(v110);
            }
          }
          v114 = *(unsigned __int8 ***)(v37 + 152);
          *(_QWORD *)(v37 + 152) = 0;
          if (!v114)
          {
LABEL_149:
            v136 = *(WTF **)(v37 + 144);
            *(_QWORD *)(v37 + 144) = 0;
            if (v136)
            {
              v137 = *(const void **)v136;
              *(_QWORD *)v136 = 0;
              if (v137)
                CFRelease(v137);
              WTF::fastFree(v136, v54);
            }
            v138 = *(_QWORD *)(v37 + 136);
            *(_QWORD *)(v37 + 136) = 0;
            if (!v138)
            {
LABEL_171:
              v146 = *(const void **)(v37 + 128);
              *(_QWORD *)(v37 + 128) = 0;
              if (v146)
                CFRelease(v146);
              v147 = *v39;
              *v39 = 0;
              if (v147)
                CFRelease(v147);
              v148 = *(const void **)(v37 + 112);
              *(_QWORD *)(v37 + 112) = 0;
              if (v148)
                CFRelease(v148);
              v149 = *(_QWORD *)(v37 + 96);
              *(_QWORD *)(v37 + 96) = 0;
              if (!v149)
                goto LABEL_191;
              if (__ldaxr((unsigned __int8 *)v149))
              {
                __clrex();
              }
              else if (!__stxr(1u, (unsigned __int8 *)v149))
              {
                goto LABEL_183;
              }
              MEMORY[0x19AEA534C](v149);
LABEL_183:
              v151 = *(_QWORD *)(v149 + 16) - 1;
              *(_QWORD *)(v149 + 16) = v151;
              if (!v151)
              {
                v152 = *(_QWORD *)(v149 + 8);
                v153 = __ldxr((unsigned __int8 *)v149);
                if (v153 == 1)
                {
                  if (!__stlxr(0, (unsigned __int8 *)v149))
                  {
LABEL_189:
                    if (!v152)
                      WTF::fastFree((WTF *)v149, v54);
                    goto LABEL_191;
                  }
                }
                else
                {
                  __clrex();
                }
                WTF::Lock::unlockSlow((WTF::Lock *)v149);
                goto LABEL_189;
              }
              v159 = __ldxr((unsigned __int8 *)v149);
              if (v159 == 1)
              {
                if (!__stlxr(0, (unsigned __int8 *)v149))
                  goto LABEL_191;
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow((WTF::Lock *)v149);
LABEL_191:
              v154 = *(_QWORD *)(v37 + 72);
              if (v154)
              {
                *(_QWORD *)(v154 + 8) = 0;
                v155 = *(unsigned int **)(v37 + 72);
                *(_QWORD *)(v37 + 72) = 0;
                if (v155)
                {
                  do
                  {
                    v156 = __ldaxr(v155);
                    v157 = v156 - 1;
                  }
                  while (__stlxr(v157, v155));
                  if (!v157)
                  {
                    atomic_store(1u, v155);
                    WTF::fastFree((WTF *)v155, v54);
                  }
                }
              }
              else
              {
                *(_QWORD *)(v37 + 72) = 0;
              }
              *(_QWORD *)v37 = off_1E340D798;
              v158 = *(WTF **)(v37 + 8);
              if (v158)
              {
                *(_QWORD *)(v37 + 8) = 0;
                *(_DWORD *)(v37 + 16) = 0;
                WTF::fastFree(v158, v54);
              }
              WTF::fastFree((WTF *)v37, v54);
              _Unwind_Resume(a1);
            }
            v139 = *(_QWORD *)(v138 + 8);
            if (__ldaxr((unsigned __int8 *)v139))
            {
              __clrex();
            }
            else if (!__stxr(1u, (unsigned __int8 *)v139))
            {
LABEL_159:
              v141 = *(_QWORD *)(v139 + 8);
              v142 = v141 - 1;
              *(_QWORD *)(v139 + 8) = v141 - 1;
              if (v141 == 1)
              {
                v163 = *(_QWORD *)(v139 + 16);
                v143 = *(_QWORD *)(v139 + 24);
                *(_QWORD *)(v139 + 24) = 0;
                v144 = v163 != 0;
              }
              else
              {
                v143 = 0;
                v144 = 1;
              }
              v145 = __ldxr((unsigned __int8 *)v139);
              if (v145 == 1)
              {
                if (!__stlxr(0, (unsigned __int8 *)v139))
                {
LABEL_166:
                  if (!v142)
                  {
                    if (v143)
                      (*(void (**)(uint64_t))(*(_QWORD *)v143 + 8))(v143);
                    if (!v144)
                      WTF::fastFree((WTF *)v139, v54);
                  }
                  goto LABEL_171;
                }
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow((WTF::Lock *)v139);
              goto LABEL_166;
            }
            MEMORY[0x19AEA534C](v139);
            goto LABEL_159;
          }
          v115 = *v114;
          if (__ldaxr(*v114))
          {
            __clrex();
          }
          else if (!__stxr(1u, v115))
          {
LABEL_137:
            v129 = *((_QWORD *)v115 + 1);
            v130 = v129 - 1;
            *((_QWORD *)v115 + 1) = v129 - 1;
            if (v129 == 1)
            {
              v162 = *((_QWORD *)v115 + 2);
              v131 = (WebCore::WebCoreDecompressionSession *)*((_QWORD *)v115 + 3);
              *((_QWORD *)v115 + 3) = 0;
              v132 = v162 != 0;
            }
            else
            {
              v131 = 0;
              v132 = 1;
            }
            v133 = __ldxr(v115);
            if (v133 == 1)
            {
              if (!__stlxr(0, v115))
              {
LABEL_144:
                if (!v130)
                {
                  if (v131)
                  {
                    WebCore::WebCoreDecompressionSession::~WebCoreDecompressionSession(v131);
                    WTF::fastFree(v134, v135);
                  }
                  if (!v132)
                    WTF::fastFree((WTF *)v115, v54);
                }
                goto LABEL_149;
              }
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)v115);
            goto LABEL_144;
          }
          MEMORY[0x19AEA534C](v115);
          goto LABEL_137;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v92);
      goto LABEL_91;
    }
    MEMORY[0x19AEA534C](v92);
    goto LABEL_84;
  }
  v82 = *v81;
  if (__ldaxr(*v81))
  {
    __clrex();
  }
  else if (!__stxr(1u, v82))
  {
LABEL_66:
    v84 = *((_QWORD *)v82 + 1);
    v85 = v84 - 1;
    *((_QWORD *)v82 + 1) = v84 - 1;
    if (v84 == 1)
    {
      v160 = *((_QWORD *)v82 + 2);
      v86 = (id *)*((_QWORD *)v82 + 3);
      *((_QWORD *)v82 + 3) = 0;
      v87 = v160 != 0;
    }
    else
    {
      v86 = 0;
      v87 = 1;
    }
    v88 = __ldxr(v82);
    if (v88 == 1)
    {
      if (!__stlxr(0, v82))
      {
LABEL_73:
        if (!v85)
        {
          if (v86)
          {
            WebCore::VideoMediaSampleRenderer::~VideoMediaSampleRenderer(v86);
            WTF::fastFree(v89, v90);
          }
          if (!v87)
            WTF::fastFree((WTF *)v82, v54);
        }
        goto LABEL_78;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v82);
    goto LABEL_73;
  }
  MEMORY[0x19AEA534C](v82);
  goto LABEL_66;
}

void sub_1947B4D40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (a28)
    (*(void (**)(uint64_t))(*(_QWORD *)a28 + 8))(a28);
  JUMPOUT(0x1947B4BB8);
}

WTF::StringImpl **WebCore::MediaPlayerFactoryWebM::getSupportedTypes(uint64_t a1, WTF::StringImpl ***a2, const WTF::StringImpl *a3)
{
  WTF::StringImpl *v4;
  WTF::StringImpl **result;
  WTF::StringImpl **v6;

  if ((byte_1ECE812E9 & 1) != 0)
  {
    if (qword_1ECE812F8 && *(_DWORD *)(qword_1ECE812F8 - 12))
      goto LABEL_4;
  }
  else
  {
    qword_1ECE812F8 = 0;
    byte_1ECE812E9 = 1;
  }
LABEL_4:
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)&v6, (_QWORD **)&qword_1ECE812F8);
  result = *a2;
  *a2 = v6;
  v6 = result;
  if (result)
    return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(result, v4);
  return result;
}

uint64_t WebCore::MediaPlayerFactoryWebM::supportsTypeAndCodecs(WebCore::MediaPlayerFactoryWebM *this, const WebCore::MediaEngineSupportParameters *a2, double a3, double a4, float a5)
{
  BOOL v5;

  if (*((_BYTE *)a2 + 56))
    v5 = 0;
  else
    v5 = *((_BYTE *)a2 + 57) == 0;
  if (v5 && *((_BYTE *)a2 + 58) == 0)
    return WebCore::SourceBufferParserWebM::isContentTypeSupported(a2, a2, a3, a4, a5);
  else
    return 0;
}

unsigned __int8 *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WebMResourceClientParent,(WTF::DestructionThread)1>(unsigned __int8 *this)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;

  v1 = this;
  if (__ldaxr(this))
  {
    __clrex();
  }
  else if (!__stxr(1u, this))
  {
    goto LABEL_5;
  }
  this = (unsigned __int8 *)MEMORY[0x19AEA534C](this);
LABEL_5:
  v3 = *((_QWORD *)v1 + 1);
  v4 = v3 - 1;
  *((_QWORD *)v1 + 1) = v3 - 1;
  if (v3 == 1)
  {
    v9 = *((_QWORD *)v1 + 2);
    v5 = *((_QWORD *)v1 + 3);
    *((_QWORD *)v1 + 3) = 0;
    v6 = v9 == 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = __ldxr(v1);
  if (v7 != 1)
  {
    __clrex();
LABEL_12:
    this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
    if (v4)
      return this;
    goto LABEL_13;
  }
  if (__stlxr(0, v1))
    goto LABEL_12;
  if (v4)
    return this;
LABEL_13:
  v8 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v8 = off_1E32071C0;
  *(_QWORD *)(v8 + 8) = v1;
  *(_QWORD *)(v8 + 16) = v5;
  *(_BYTE *)(v8 + 24) = v6;
  v10 = (unsigned __int8 *)v8;
  WTF::ensureOnMainThread();
  this = v10;
  if (v10)
    return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v10 + 8))(v10);
  return this;
}

void sub_1947B4F10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<void WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WebMResourceClientParent,(WTF::DestructionThread)1>(void)::{lambda(void)#1},void>::call(uint64_t a1, void *a2)
{
  uint64_t result;
  WTF *v4;
  BOOL v5;

  v4 = *(WTF **)(a1 + 8);
  result = *(_QWORD *)(a1 + 16);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (*(_BYTE *)(a1 + 24))
    v5 = v4 == 0;
  else
    v5 = 1;
  if (!v5)
    return WTF::fastFree(v4, a2);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ThreadSafeRefCounted<WebCore::SourceBufferParser,(WTF::DestructionThread)1>::deref(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) + 8))(*(_QWORD *)(a1 + 8) - 8);
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::MediaPlayerPrivateWebM::*&)(void),WebCore::MediaPlayerPrivateWebM*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateWebM::MediaPlayerPrivateWebM(WebCore::MediaPlayer *)::$_0,void,WebCore::SourceBufferPrivateClient::InitializationSegment &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = a1[1];
  *a1 = &off_1E3206F90;
  a1[1] = 0;
  if (!v3)
    return a1;
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return a1;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateWebM::MediaPlayerPrivateWebM(WebCore::MediaPlayer *)::$_0,void,WebCore::SourceBufferPrivateClient::InitializationSegment &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3206F90;
  *((_QWORD *)this + 1) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return WTF::fastFree(this, a2);
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateWebM::MediaPlayerPrivateWebM(WebCore::MediaPlayer *)::$_0,void,WebCore::SourceBufferPrivateClient::InitializationSegment &&>::call(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  uint64_t v15;
  const char **v16;
  const char **v17;
  const char *v18;
  unsigned int *v19;
  unsigned int v20;
  WebCore *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  int v29;
  int v30;
  int v32;
  int v33;
  int v35;
  unint64_t *v36;
  unint64_t v37;
  WebCore *v38;
  uint64_t v39;
  uint64_t v41;
  int v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  WebCore *v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int *v55;
  unsigned int v56;
  int v57;
  unsigned int *v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int *v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int *v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  const char **v72;
  const char **v73;
  const char *v74;
  unsigned int *v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int v80;
  unint64_t *v81;
  unint64_t v82;
  WebCore *v83;
  uint64_t v84;
  uint64_t v86;
  int v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  WebCore *v97;
  unsigned int *v98;
  unsigned int v99;
  unsigned int *v100;
  unsigned int v101;
  int v102;
  unsigned int *v103;
  unsigned int *v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int *v107;
  unsigned int *v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int *v111;
  unsigned int *v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int *v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int *v118;
  unsigned int *v119;
  unsigned int v120;
  unsigned int v121;
  unsigned int *v122;
  unsigned int *v123;
  unsigned int v124;
  unsigned int v125;
  uint64_t v126;
  WebCore *v127;
  const char *v128;
  uint64_t v129;
  const char *v130;
  uint64_t v131;
  uint64_t v132;

  v2 = *((_QWORD *)result + 1);
  if (!v2)
    return result;
  v5 = *((_QWORD *)result + 2);
  v4 = *((_QWORD *)result + 3);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_6;
  }
  result = (unsigned __int8 *)MEMORY[0x19AEA534C](v2);
LABEL_6:
  if (*(_QWORD *)(v2 + 24))
    ++*(_QWORD *)(v2 + 8);
  else
    v5 = 0;
  v7 = __ldxr((unsigned __int8 *)v2);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v2))
    {
      if (!v5)
        return result;
      goto LABEL_12;
    }
  }
  else
  {
    __clrex();
  }
  result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
  if (!v5)
    return result;
LABEL_12:
  v8 = *(_QWORD *)(v4 + 368);
  v9 = *(_QWORD *)(v4 + 376);
  v128 = "MediaPlayerPrivateWebM";
  v129 = 23;
  v130 = "didParseInitializationData";
  v131 = v9;
  v126 = v5;
  if (*(_BYTE *)(v8 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v128);
  WebCore::MediaPlayerPrivateWebM::clearTracks((unsigned __int8 *)v4, (void *)a2);
  v10 = (uint64_t *)a2;
  if ((*(_BYTE *)(a2 + 12) & 1) == 0)
    v10 = (uint64_t *)WTF::MediaTime::positiveInfiniteTime((WTF::MediaTime *)a2);
  WebCore::MediaPlayerPrivateWebM::setDuration(v4, *v10, v10[1]);
  v11 = *(_QWORD *)(v4 + 96);
  if (!v11)
  {
    v12 = 0;
    goto LABEL_33;
  }
  v12 = *(_QWORD *)(v4 + 104);
  if (__ldaxr((unsigned __int8 *)v11))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v11))
  {
    goto LABEL_25;
  }
  MEMORY[0x19AEA534C](v11);
LABEL_25:
  if (*(_QWORD *)(v11 + 24))
    ++*(_QWORD *)(v11 + 8);
  else
    v12 = 0;
  v14 = __ldxr((unsigned __int8 *)v11);
  if (v14 != 1)
  {
    __clrex();
    goto LABEL_32;
  }
  if (__stlxr(0, (unsigned __int8 *)v11))
LABEL_32:
    WTF::Lock::unlockSlow((WTF::Lock *)v11);
LABEL_33:
  v15 = *(unsigned int *)(a2 + 44);
  if (!(_DWORD)v15)
  {
LABEL_138:
    v71 = *(unsigned int *)(a2 + 28);
    if (!(_DWORD)v71)
    {
LABEL_206:
      v70 = v126;
      if (*(_BYTE *)(v4 + 617) && !*(_BYTE *)(v4 + 618))
        WebCore::MediaPlayerPrivateWebM::setReadyState(v4, 1u);
      goto LABEL_223;
    }
    v72 = *(const char ***)(a2 + 16);
    v73 = &v72[2 * v71];
    while (1)
    {
      v74 = *v72;
      if (*v72)
      {
        v75 = (unsigned int *)(v74 + 8);
        do
          v76 = __ldaxr(v75);
        while (__stlxr(v76 + 1, v75));
      }
      v128 = v74;
      v77 = (uint64_t)v72[1];
      if (v77)
        break;
      v129 = 0;
LABEL_194:
      v111 = (unsigned int *)v128;
      v128 = 0;
      if (v111)
      {
        v112 = v111 + 2;
        do
        {
          v113 = __ldaxr(v112);
          v114 = v113 - 1;
        }
        while (__stlxr(v114, v112));
        if (!v114)
        {
          atomic_store(1u, v111 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v111 + 8))(v111);
        }
      }
      v72 += 2;
      if (v72 == v73)
        goto LABEL_206;
    }
    v78 = (unsigned int *)(v77 + 8);
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 + 1, v78));
    v129 = v77;
    do
      v80 = __ldaxr(v78);
    while (__stlxr(v80 + 1, v78));
    v127 = (WebCore *)v77;
    if (*(_BYTE *)(v77 + 112))
    {
      v81 = (unint64_t *)(v77 + 104);
    }
    else
    {
      if (!*(_BYTE *)(v77 + 96))
      {
        v82 = 0;
LABEL_153:
        WebCore::MediaPlayerPrivateWebM::addTrackBuffer(v4, v82, (uint64_t *)&v128);
        v83 = v127;
        v84 = *(_QWORD *)(v4 + 56);
        if (!v84)
        {
          v86 = 0;
          goto LABEL_165;
        }
        if (__ldaxr((unsigned __int8 *)v84))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v84))
        {
          goto LABEL_158;
        }
        MEMORY[0x19AEA534C](v84);
LABEL_158:
        if (*(_QWORD *)(v84 + 24))
        {
          ++*(_QWORD *)(v84 + 16);
          v86 = v84;
        }
        else
        {
          v86 = 0;
        }
        v87 = __ldxr((unsigned __int8 *)v84);
        if (v87 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v84))
          {
LABEL_165:
            v88 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
            *v88 = &off_1E32070F8;
            v88[1] = v86;
            v88[2] = v4;
            v88[3] = v4;
            v89 = *((_QWORD *)v83 + 10);
            *((_QWORD *)v83 + 10) = v88;
            if (v89)
              (*(void (**)(uint64_t))(*(_QWORD *)v89 + 8))(v89);
            if (!*(_DWORD *)(v4 + 196))
            {
              v90 = (uint64_t)v127;
              if (!*((_BYTE *)v127 + 48))
              {
                *((_BYTE *)v127 + 48) = 1;
                v91 = WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v91 = off_1E32066C8;
                *(_BYTE *)(v91 + 8) = 1;
                v132 = v91;
                WebCore::TrackPrivateBase::notifyClients(v90, &v132);
                v92 = v132;
                v132 = 0;
                if (v92)
                  (*(void (**)(uint64_t))(*(_QWORD *)v92 + 8))(v92);
                v93 = *(_QWORD *)(v90 + 80);
                if (v93)
                  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v93 + 16))(v93, v90, *(unsigned __int8 *)(v90 + 48));
              }
            }
            v94 = *(unsigned int *)(v4 + 196);
            if ((_DWORD)v94 == *(_DWORD *)(v4 + 192))
            {
              v95 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v4 + 184), v94 + 1, (unint64_t)&v127);
              v94 = *(unsigned int *)(v4 + 196);
              v96 = *(_QWORD *)(v4 + 184);
              v97 = *(WebCore **)v95;
              if (*(_QWORD *)v95)
              {
                v98 = (unsigned int *)((char *)v97 + 8);
                do
                  v99 = __ldaxr(v98);
                while (__stlxr(v99 + 1, v98));
LABEL_181:
                v102 = *(_DWORD *)(v4 + 196);
LABEL_182:
                *(_QWORD *)(v96 + 8 * v94) = v97;
                *(_DWORD *)(v4 + 196) = v102 + 1;
                if (v12)
                  (*(void (**)(_QWORD, WebCore *))(**(_QWORD **)(*(_QWORD *)(v12 + 8) + 8) + 344))(*(_QWORD *)(*(_QWORD *)(v12 + 8) + 8), v127);
                v103 = (unsigned int *)v127;
                v127 = 0;
                if (v103)
                {
                  v104 = v103 + 2;
                  do
                  {
                    v105 = __ldaxr(v104);
                    v106 = v105 - 1;
                  }
                  while (__stlxr(v106, v104));
                  if (!v106)
                  {
                    atomic_store(1u, v103 + 2);
                    (*(void (**)(unsigned int *))(*(_QWORD *)v103 + 8))(v103);
                  }
                }
                v107 = (unsigned int *)v129;
                v129 = 0;
                if (v107)
                {
                  v108 = v107 + 2;
                  do
                  {
                    v109 = __ldaxr(v108);
                    v110 = v109 - 1;
                  }
                  while (__stlxr(v110, v108));
                  if (!v110)
                  {
                    atomic_store(1u, v107 + 2);
                    (*(void (**)(unsigned int *))(*(_QWORD *)v107 + 8))(v107);
                  }
                }
                goto LABEL_194;
              }
            }
            else
            {
              v96 = *(_QWORD *)(v4 + 184);
              v97 = v127;
              if (v127)
              {
                v100 = (unsigned int *)((char *)v127 + 8);
                do
                  v101 = __ldaxr(v100);
                while (__stlxr(v101 + 1, v100));
                goto LABEL_181;
              }
            }
            v102 = v94;
            goto LABEL_182;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v84);
        goto LABEL_165;
      }
      v81 = (unint64_t *)(v77 + 88);
    }
    v82 = *v81;
    goto LABEL_153;
  }
  v16 = *(const char ***)(a2 + 32);
  v17 = &v16[2 * v15];
  while (1)
  {
    v18 = *v16;
    if (*v16)
    {
      v19 = (unsigned int *)(v18 + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 + 1, v19));
    }
    v128 = v18;
    v21 = (WebCore *)v16[1];
    if (v21)
      break;
    v129 = 0;
LABEL_118:
    v66 = (unsigned int *)v128;
    v128 = 0;
    if (v66)
    {
      v67 = v66 + 2;
      do
      {
        v68 = __ldaxr(v67);
        v69 = v68 - 1;
      }
      while (__stlxr(v69, v67));
      if (!v69)
      {
        atomic_store(1u, v66 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v66 + 8))(v66);
      }
    }
    v16 += 2;
    if (v16 == v17)
      goto LABEL_138;
  }
  v22 = (unsigned int *)((char *)v21 + 8);
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 + 1, v22));
  v129 = (uint64_t)v21;
  do
    v24 = __ldaxr(v22);
  while (__stlxr(v24 + 1, v22));
  v127 = v21;
  if (!*(_BYTE *)(v4 + 24))
    goto LABEL_72;
  v25 = *((_QWORD *)v128 + 2);
  if (!v25)
    goto LABEL_72;
  v26 = *(_QWORD *)(v25 + 8);
  v27 = *(_DWORD *)(v25 + 4);
  v28 = v27 != 3;
  if ((char *)v26 == "vp8" || v27 != 3)
  {
    if ((char *)v26 == "vp8" && v27 == 3)
    {
LABEL_209:
      *(_BYTE *)(v4 + 624) = 1;
      v127 = 0;
      v70 = v126;
LABEL_210:
      v115 = (unsigned int *)((char *)v21 + 8);
      do
      {
        v116 = __ldaxr(v115);
        v117 = v116 - 1;
      }
      while (__stlxr(v117, v115));
      if (!v117)
      {
        atomic_store(1u, (unsigned int *)v21 + 2);
        (*(void (**)(WebCore *))(*(_QWORD *)v21 + 8))(v21);
      }
      goto LABEL_214;
    }
  }
  else
  {
    if ((*(_BYTE *)(v25 + 16) & 4) != 0)
    {
      if (*(_BYTE *)v26 != 118)
        goto LABEL_56;
      v29 = *(unsigned __int16 *)(v26 + 1);
      v30 = 14448;
    }
    else
    {
      if (*(_WORD *)v26 != 118)
        goto LABEL_56;
      v29 = *(_DWORD *)(v26 + 2);
      v30 = 3670128;
    }
    if (v29 == v30)
      goto LABEL_209;
  }
LABEL_56:
  if ((char *)v26 == "vp9")
    v28 = 1;
  if (v28)
  {
    if ((char *)v26 != "vp9" || v27 != 3)
      goto LABEL_72;
  }
  else
  {
    if ((*(_BYTE *)(v25 + 16) & 4) != 0)
    {
      if (*(_BYTE *)v26 != 118)
        goto LABEL_72;
      v32 = *(unsigned __int16 *)(v26 + 1);
      v33 = 14704;
    }
    else
    {
      if (*(_WORD *)v26 != 118)
        goto LABEL_72;
      v32 = *(_DWORD *)(v26 + 2);
      v33 = 3735664;
    }
    if (v32 != v33)
    {
LABEL_72:
      if (*((_BYTE *)v21 + 128))
      {
        v36 = (unint64_t *)((char *)v21 + 120);
      }
      else
      {
        if (!*((_BYTE *)v21 + 112))
        {
          v37 = 0;
LABEL_77:
          WebCore::MediaPlayerPrivateWebM::addTrackBuffer(v4, v37, (uint64_t *)&v128);
          v38 = v127;
          v39 = *(_QWORD *)(v4 + 56);
          if (!v39)
          {
            v41 = 0;
            goto LABEL_89;
          }
          if (__ldaxr((unsigned __int8 *)v39))
          {
            __clrex();
          }
          else if (!__stxr(1u, (unsigned __int8 *)v39))
          {
            goto LABEL_82;
          }
          MEMORY[0x19AEA534C](v39);
LABEL_82:
          if (*(_QWORD *)(v39 + 24))
          {
            ++*(_QWORD *)(v39 + 16);
            v41 = v39;
          }
          else
          {
            v41 = 0;
          }
          v42 = __ldxr((unsigned __int8 *)v39);
          if (v42 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v39))
            {
LABEL_89:
              v43 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
              *v43 = &off_1E32070D0;
              v43[1] = v41;
              v43[2] = v4;
              v43[3] = v4;
              v44 = *((_QWORD *)v38 + 12);
              *((_QWORD *)v38 + 12) = v43;
              if (v44)
                (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
              if (!*(_DWORD *)(v4 + 180))
              {
                v45 = (uint64_t)v127;
                if (!*((_BYTE *)v127 + 48))
                {
                  *((_BYTE *)v127 + 48) = 1;
                  v46 = WTF::fastMalloc((WTF *)0x10);
                  *(_QWORD *)v46 = off_1E32066A0;
                  *(_BYTE *)(v46 + 8) = 1;
                  v132 = v46;
                  WebCore::TrackPrivateBase::notifyClients(v45, &v132);
                  v47 = v132;
                  v132 = 0;
                  if (v47)
                    (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
                  v48 = *(_QWORD *)(v45 + 96);
                  if (v48)
                    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v48 + 16))(v48, v45, *(unsigned __int8 *)(v45 + 48));
                }
              }
              v49 = *(unsigned int *)(v4 + 180);
              if ((_DWORD)v49 == *(_DWORD *)(v4 + 176))
              {
                v50 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v4 + 168), v49 + 1, (unint64_t)&v127);
                v49 = *(unsigned int *)(v4 + 180);
                v51 = *(_QWORD *)(v4 + 168);
                v52 = *(WebCore **)v50;
                if (*(_QWORD *)v50)
                {
                  v53 = (unsigned int *)((char *)v52 + 8);
                  do
                    v54 = __ldaxr(v53);
                  while (__stlxr(v54 + 1, v53));
LABEL_105:
                  v57 = *(_DWORD *)(v4 + 180);
LABEL_106:
                  *(_QWORD *)(v51 + 8 * v49) = v52;
                  *(_DWORD *)(v4 + 180) = v57 + 1;
                  if (v12)
                    (*(void (**)(_QWORD, WebCore *))(**(_QWORD **)(*(_QWORD *)(v12 + 8) + 8) + 360))(*(_QWORD *)(*(_QWORD *)(v12 + 8) + 8), v127);
                  v58 = (unsigned int *)v127;
                  v127 = 0;
                  if (v58)
                  {
                    v59 = v58 + 2;
                    do
                    {
                      v60 = __ldaxr(v59);
                      v61 = v60 - 1;
                    }
                    while (__stlxr(v61, v59));
                    if (!v61)
                    {
                      atomic_store(1u, v58 + 2);
                      (*(void (**)(unsigned int *))(*(_QWORD *)v58 + 8))(v58);
                    }
                  }
                  v62 = (unsigned int *)v129;
                  v129 = 0;
                  if (v62)
                  {
                    v63 = v62 + 2;
                    do
                    {
                      v64 = __ldaxr(v63);
                      v65 = v64 - 1;
                    }
                    while (__stlxr(v65, v63));
                    if (!v65)
                    {
                      atomic_store(1u, v62 + 2);
                      (*(void (**)(unsigned int *))(*(_QWORD *)v62 + 8))(v62);
                    }
                  }
                  goto LABEL_118;
                }
              }
              else
              {
                v51 = *(_QWORD *)(v4 + 168);
                v52 = v127;
                if (v127)
                {
                  v55 = (unsigned int *)((char *)v127 + 8);
                  do
                    v56 = __ldaxr(v55);
                  while (__stlxr(v56 + 1, v55));
                  goto LABEL_105;
                }
              }
              v57 = v49;
              goto LABEL_106;
            }
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v39);
          goto LABEL_89;
        }
        v36 = (unint64_t *)((char *)v21 + 104);
      }
      v37 = *v36;
      goto LABEL_77;
    }
  }
  {
    if (!WebCore::canLoad_VideoToolbox_VTIsHardwareDecodeSupported(void)::loaded)
      goto LABEL_209;
LABEL_71:
    v35 = WebCore::softLinkVideoToolboxVTIsHardwareDecodeSupported(1987063865);
    v21 = v127;
    if (!v35)
      goto LABEL_136;
    goto LABEL_72;
  }
  WebCore::canLoad_VideoToolbox_VTIsHardwareDecodeSupported(void)::loaded = WebCore::init_VideoToolbox_VTIsHardwareDecodeSupported(v21);
  if ((WebCore::canLoad_VideoToolbox_VTIsHardwareDecodeSupported(void)::loaded & 1) != 0)
    goto LABEL_71;
  v21 = v127;
LABEL_136:
  *(_BYTE *)(v4 + 624) = 1;
  v127 = 0;
  v70 = v126;
  if (v21)
    goto LABEL_210;
LABEL_214:
  v118 = (unsigned int *)v129;
  v129 = 0;
  if (v118)
  {
    v119 = v118 + 2;
    do
    {
      v120 = __ldaxr(v119);
      v121 = v120 - 1;
    }
    while (__stlxr(v121, v119));
    if (!v121)
    {
      atomic_store(1u, v118 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v118 + 8))(v118);
    }
  }
  v122 = (unsigned int *)v128;
  v128 = 0;
  if (!v122)
    goto LABEL_223;
  v123 = v122 + 2;
  do
  {
    v124 = __ldaxr(v123);
    v125 = v124 - 1;
  }
  while (__stlxr(v125, v123));
  if (!v125)
  {
    atomic_store(1u, v122 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v122 + 8))(v122);
    if (v12)
LABEL_224:
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v12);
  }
  else
  {
LABEL_223:
    if (v12)
      goto LABEL_224;
  }
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WebMResourceClientParent,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v70 + 56));
}

void sub_1947B5BDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unsigned __int8 **v10;

  if (v10)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v10);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WebMResourceClientParent,(WTF::DestructionThread)1>(*(unsigned __int8 **)(a10 + 56));
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateWebM::MediaPlayerPrivateWebM(WebCore::MediaPlayer *)::$_1,void,WTF::Ref<WebCore::MediaSampleAVFObjC,WTF::RawPtrTraits<WebCore::MediaSampleAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSampleAVFObjC>> &&,unsigned long long,WTF::String const&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = a1[1];
  *a1 = &off_1E3206FB8;
  a1[1] = 0;
  if (!v3)
    return a1;
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return a1;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateWebM::MediaPlayerPrivateWebM(WebCore::MediaPlayer *)::$_1,void,WTF::Ref<WebCore::MediaSampleAVFObjC,WTF::RawPtrTraits<WebCore::MediaSampleAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSampleAVFObjC>> &&,unsigned long long,WTF::String const&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3206FB8;
  *((_QWORD *)this + 1) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return WTF::fastFree(this, a2);
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateWebM::MediaPlayerPrivateWebM(WebCore::MediaPlayer *)::$_1,void,WTF::Ref<WebCore::MediaSampleAVFObjC,WTF::RawPtrTraits<WebCore::MediaSampleAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSampleAVFObjC>> &&,unsigned long long,WTF::String const&>::call(unsigned __int8 *result, unsigned int **a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  int v9;
  int8x8_t v10;
  uint8x8_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD **v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t *v43;
  uint64_t v44;
  __int128 v45;
  unsigned int *v46;
  uint64_t v47;
  _QWORD *v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  char v54;
  int v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  const WTF::MediaTime *v63;
  uint64_t v64;
  uint64_t v65;
  const WTF::MediaTime *v66;
  unsigned int v67;
  unsigned int v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  unsigned int *v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  int v76;
  char v77;
  __int128 v78;
  __int128 v79;

  v3 = *((_QWORD *)result + 1);
  if (!v3)
    return result;
  v7 = *((_QWORD *)result + 2);
  v6 = *((_QWORD *)result + 3);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  result = (unsigned __int8 *)MEMORY[0x19AEA534C](v3);
LABEL_6:
  if (*(_QWORD *)(v3 + 24))
    ++*(_QWORD *)(v3 + 8);
  else
    v7 = 0;
  v9 = __ldxr((unsigned __int8 *)v3);
  if (v9 != 1)
  {
    __clrex();
LABEL_16:
    result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v3);
    if (!v7)
      return result;
    goto LABEL_12;
  }
  if (__stlxr(0, (unsigned __int8 *)v3))
    goto LABEL_16;
  if (!v7)
    return result;
LABEL_12:
  v10 = *(int8x8_t *)(v6 + 208);
  if (!*(_QWORD *)&v10)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WebMResourceClientParent,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v7 + 56));
  v11 = (uint8x8_t)vcnt_s8(v10);
  v11.i16[0] = vaddlv_u8(v11);
  if (v11.u32[0] > 1uLL)
  {
    v12 = a3;
    if (*(_QWORD *)&v10 <= a3)
      v12 = a3 % *(_QWORD *)&v10;
  }
  else
  {
    v12 = (*(_QWORD *)&v10 - 1) & a3;
  }
  v13 = *(_QWORD **)(*(_QWORD *)(v6 + 200) + 8 * v12);
  if (!v13)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WebMResourceClientParent,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v7 + 56));
  v14 = (_QWORD *)*v13;
  if (!v14)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WebMResourceClientParent,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v7 + 56));
  if (v11.u32[0] < 2uLL)
  {
    v15 = *(_QWORD *)&v10 - 1;
    do
    {
      v16 = v14[1];
      if (v16 == a3)
      {
        if (v14[2] == a3)
          goto LABEL_38;
      }
      else if ((v16 & v15) != v12)
      {
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WebMResourceClientParent,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v7 + 56));
      }
      v14 = (_QWORD *)*v14;
    }
    while (v14);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WebMResourceClientParent,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v7 + 56));
  }
  while (1)
  {
    v17 = v14[1];
    if (v17 == a3)
      break;
    if (v17 >= *(_QWORD *)&v10)
      v17 %= *(_QWORD *)&v10;
    if (v17 != v12)
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WebMResourceClientParent,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v7 + 56));
LABEL_36:
    v14 = (_QWORD *)*v14;
    if (!v14)
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WebMResourceClientParent,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v7 + 56));
  }
  if (v14[2] != a3)
    goto LABEL_36;
LABEL_38:
  v18 = v14[3];
  v19 = *a2;
  *a2 = 0;
  v75 = 1;
  v76 = 1000000;
  v77 = 1;
  if ((*(_BYTE *)(v18 + 284) & 1) == 0)
  {
    *(_QWORD *)&v73 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v19 + 16))(v19);
    *((_QWORD *)&v73 + 1) = v20;
    *(_QWORD *)&v74 = WTF::MediaTime::operator-();
    *((_QWORD *)&v74 + 1) = v21;
    (*(void (**)(unsigned int *))(*(_QWORD *)v19 + 16))(v19);
    v23 = v22;
    v24 = *MEMORY[0x1E0CC0058];
    while (1)
    {
      *(_QWORD *)&v70 = WTF::MediaTime::toTimeScale();
      *((_QWORD *)&v70 + 1) = v25;
      *(_QWORD *)&v78 = WTF::MediaTime::operator-();
      *((_QWORD *)&v78 + 1) = v26;
      *(_QWORD *)&v79 = WTF::abs();
      *((_QWORD *)&v79 + 1) = v27;
      if (WTF::MediaTime::compare((WTF::MediaTime *)&v79, (const WTF::MediaTime *)&v75) == -1
        || v23 >= v24)
      {
        break;
      }
      if (2 * v23 > v24 || v23 < 0)
        v23 = v24;
      else
        v23 *= 2;
    }
    v29 = *((_QWORD *)&v70 + 1);
    *(_QWORD *)(v18 + 272) = v70;
    *(_DWORD *)(v18 + 280) = v29;
    *(_BYTE *)(v18 + 284) = BYTE4(v29);
  }
  (*(void (**)(unsigned int *, uint64_t))(*(_QWORD *)v19 + 64))(v19, v18 + 272);
  v30 = v19 + 2;
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 + 1, v30));
  *(_QWORD *)&v70 = v19;
  WebCore::SampleMap::addSample(v18 + 8, (unsigned int **)&v70);
  v32 = (unsigned int *)v70;
  *(_QWORD *)&v70 = 0;
  if (v32)
  {
    v33 = v32 + 2;
    do
    {
      v34 = __ldaxr(v33);
      v35 = v34 - 1;
    }
    while (__stlxr(v35, v33));
    if (!v35)
    {
      atomic_store(1u, v32 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v32 + 8))(v32);
    }
  }
  v36 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v19 + 24))(v19);
  v38 = v37;
  v39 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v19 + 16))(v19);
  v40 = (_QWORD **)(v18 + 64);
  *(_QWORD *)&v70 = v36;
  *((_QWORD *)&v70 + 1) = v38;
  *(_QWORD *)&v71 = v39;
  *((_QWORD *)&v71 + 1) = v41;
  do
    v42 = __ldaxr(v30);
  while (__stlxr(v42 + 1, v30));
  v72 = v19;
  v43 = std::__tree<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::__map_value_compare<std::pair<WTF::MediaTime,WTF::MediaTime>,std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>,std::less<std::pair<WTF::MediaTime,WTF::MediaTime>>,true>,WTF::FastAllocator<std::__value_type<std::pair<WTF::MediaTime,WTF::MediaTime>,WTF::Ref<WebCore::MediaSample,WTF::RawPtrTraits<WebCore::MediaSample>,WTF::DefaultRefDerefTraits<WebCore::MediaSample>>>>>::__find_equal<std::pair<WTF::MediaTime,WTF::MediaTime>>(v18 + 64, &v79, (WTF::MediaTime *)&v70);
  if (!*v43)
  {
    v44 = WTF::fastMalloc((WTF *)0x48);
    v45 = v71;
    *(_OWORD *)(v44 + 32) = v70;
    *(_OWORD *)(v44 + 48) = v45;
    v46 = v72;
    v72 = 0;
    *(_QWORD *)(v44 + 64) = v46;
    v47 = v79;
    *(_QWORD *)v44 = 0;
    *(_QWORD *)(v44 + 8) = 0;
    *(_QWORD *)(v44 + 16) = v47;
    *v43 = v44;
    v48 = (_QWORD *)**v40;
    if (v48)
    {
      *v40 = v48;
      v44 = *v43;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(_QWORD *)(v18 + 72), v44);
    ++*(_QWORD *)(v18 + 80);
  }
  v49 = v72;
  v72 = 0;
  if (v49)
  {
    v50 = v49 + 2;
    do
    {
      v51 = __ldaxr(v50);
      v52 = v51 - 1;
    }
    while (__stlxr(v52, v50));
    if (!v52)
    {
      atomic_store(1u, v49 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v49 + 8))(v49);
    }
  }
  *(_QWORD *)(v18 + 112) = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v19 + 24))(v19);
  *(_DWORD *)(v18 + 120) = v53;
  *(_BYTE *)(v18 + 124) = v54;
  *(_QWORD *)(v18 + 144) = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v19 + 32))(v19);
  *(_DWORD *)(v18 + 152) = v55;
  *(_BYTE *)(v18 + 156) = v56;
  *(_QWORD *)&v70 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v19 + 16))(v19);
  *((_QWORD *)&v70 + 1) = v57;
  *(_QWORD *)&v78 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v19 + 32))(v19);
  *((_QWORD *)&v78 + 1) = v58;
  v59 = WTF::MediaTime::operator+();
  *(_QWORD *)&v79 = v59;
  *((_QWORD *)&v79 + 1) = v60;
  if ((*(_BYTE *)(v18 + 172) & 1) != 0)
  {
    if (WTF::MediaTime::compare((WTF::MediaTime *)&v79, (const WTF::MediaTime *)(v18 + 160)) == 1)
    {
      v60 = *((_QWORD *)&v79 + 1);
      v59 = v79;
      goto LABEL_70;
    }
  }
  else
  {
LABEL_70:
    *(_QWORD *)(v18 + 160) = v59;
    *(_DWORD *)(v18 + 168) = v60;
    *(_BYTE *)(v18 + 172) = BYTE4(v60);
  }
  *(_QWORD *)&v78 = WebCore::PlatformTimeRanges::nearest((WebCore::PlatformTimeRanges *)(v18 + 96), (const WTF::MediaTime *)&v70);
  *((_QWORD *)&v78 + 1) = v61;
  if ((v61 & 0x100000000) != 0)
  {
    *(_QWORD *)&v74 = WTF::MediaTime::operator-();
    *((_QWORD *)&v74 + 1) = v62;
    v63 = (const WTF::MediaTime *)WTF::MediaTime::zeroTime((WTF::MediaTime *)v74);
    v73 = xmmword_1968A1660;
    if (WTF::MediaTime::isBetween((WTF::MediaTime *)&v74, v63, (const WTF::MediaTime *)&v73))
    {
      *(_QWORD *)&v70 = v78;
      *(_QWORD *)((char *)&v70 + 5) = *(_QWORD *)((char *)&v78 + 5);
    }
  }
  *(_QWORD *)&v74 = WebCore::PlatformTimeRanges::nearest((WebCore::PlatformTimeRanges *)(v18 + 96), (const WTF::MediaTime *)&v79);
  *((_QWORD *)&v74 + 1) = v64;
  if ((v64 & 0x100000000) != 0)
  {
    *(_QWORD *)&v73 = WTF::MediaTime::operator-();
    *((_QWORD *)&v73 + 1) = v65;
    v66 = (const WTF::MediaTime *)WTF::MediaTime::zeroTime((WTF::MediaTime *)v73);
    v69 = xmmword_1968A1660;
    if (WTF::MediaTime::isBetween((WTF::MediaTime *)&v73, v66, (const WTF::MediaTime *)&v69))
    {
      *(_QWORD *)&v79 = v74;
      *(_QWORD *)((char *)&v79 + 5) = *(_QWORD *)((char *)&v74 + 5);
    }
  }
  WebCore::PlatformTimeRanges::add((WebCore::PlatformTimeRanges *)(v18 + 96), &v70, &v79, 0);
  WebCore::MediaPlayerPrivateWebM::notifyClientWhenReadyForMoreSamples(v6, a3);
  do
  {
    v67 = __ldaxr(v30);
    v68 = v67 - 1;
  }
  while (__stlxr(v68, v30));
  if (!v68)
  {
    atomic_store(1u, v19 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v19 + 8))(v19);
  }
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WebMResourceClientParent,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v7 + 56));
}

void sub_1947B6664(_Unwind_Exception *a1)
{
  unsigned int *v1;
  uint64_t v2;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v4 = v1 + 2;
  do
  {
    v5 = __ldaxr(v4);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, v4));
  if (!v6)
  {
    atomic_store(1u, v1 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v1 + 8))(v1);
  }
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WebMResourceClientParent,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v2 + 56));
  _Unwind_Resume(a1);
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [15],unsigned long>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4, WTF::String **a5)
{
  uint64_t result;
  int v8;
  int v9;
  int v10;
  BOOL v11;
  int v12;
  BOOL v13;
  int v14;
  unsigned int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  NSObject *v20;
  uint64_t v21;
  void *v22;
  char *v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  WTF::String *v31;
  WTF::Logger *v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::Logger *v37;
  const char *v38;
  uint64_t v39;
  WTF::StringImpl **v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  int v45;
  uint64_t v46;
  WTF::Logger *v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  __int128 buf;
  int v57;
  WTF::StringImpl *v58;
  int v59;
  WTF::StringImpl *v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  WTF::String::String((WTF::String *)&v53, a4);
  result = WTF::String::number(*a5);
  if (v54)
  {
    v8 = *((_DWORD *)v54 + 1);
    if (v53)
      goto LABEL_3;
LABEL_91:
    v9 = 0;
    if (v52)
      goto LABEL_4;
LABEL_92:
    v10 = 0;
    goto LABEL_5;
  }
  v8 = 0;
  if (!v53)
    goto LABEL_91;
LABEL_3:
  v9 = *((_DWORD *)v53 + 1);
  if (!v52)
    goto LABEL_92;
LABEL_4:
  v10 = *((_DWORD *)v52 + 1);
LABEL_5:
  if ((v10 | v9) < 0)
    goto LABEL_95;
  v11 = __OFADD__(v9, v10);
  v12 = v9 + v10;
  v13 = v11;
  if (v8 < 0)
    goto LABEL_95;
  if (v13)
    goto LABEL_95;
  result = (v8 + v12);
  if (__OFADD__(v8, v12))
    goto LABEL_95;
  if (v54 && (*((_BYTE *)v54 + 16) & 4) == 0)
  {
    v14 = 0;
    goto LABEL_19;
  }
  if (v53)
  {
    v15 = *((_DWORD *)v53 + 4);
    v14 = (v15 >> 2) & 1;
    if (v52 && (v15 & 4) != 0)
      goto LABEL_18;
  }
  else
  {
    if (v52)
    {
LABEL_18:
      v14 = (*((unsigned __int8 *)v52 + 16) >> 2) & 1;
      goto LABEL_19;
    }
    v14 = 1;
  }
LABEL_19:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v14, v54, (uint64_t)v53, (uint64_t)v52, &buf);
  v55 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_95:
    __break(0xC471u);
    return result;
  }
  v17 = v52;
  v52 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v16);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = v53;
  v53 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v16);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v54;
  v54 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v16);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = *(NSObject **)(a1 + 32);
  v21 = os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v21)
  {
    WTF::String::utf8();
    v23 = v50 ? (char *)v50 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v23;
    _os_log_impl(&dword_1940B8000, v20, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v21 = (uint64_t)v50;
    v50 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 1)
        v21 = WTF::fastFree((WTF *)v21, v22);
      else
        --*(_DWORD *)v21;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v24 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v25 = *v24;
      if ((v25 & 1) != 0)
        break;
      v26 = __ldaxr(v24);
      if (v26 == v25)
      {
        if (!__stxr(v25 | 1, v24))
        {
          v27 = WTF::Logger::observers((WTF::Logger *)v21);
          v28 = *(unsigned int *)(v27 + 12);
          if ((_DWORD)v28)
          {
            v29 = *(uint64_t **)v27;
            v46 = *(_QWORD *)v27 + 8 * v28;
            do
            {
              v30 = *v29;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v57 = 0;
              WTF::String::String((WTF::String *)&v58, a4);
              v31 = *a5;
              v59 = 0;
              WTF::String::number(v31);
              v50 = 0;
              v51 = 0;
              v32 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
              LODWORD(v51) = 3;
              v50 = v32;
              v33 = HIDWORD(v51);
              *((_DWORD *)v32 + 4 * HIDWORD(v51)) = buf;
              v34 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v32 + 2 * v33 + 1) = v34;
              *((_DWORD *)v32 + 4 * (v33 + 1)) = v57;
              v35 = v58;
              if (v58)
                *(_DWORD *)v58 += 2;
              *((_QWORD *)v32 + 2 * (v33 + 1) + 1) = v35;
              *((_DWORD *)v32 + 4 * (v33 + 2)) = v59;
              v36 = v60;
              if (v60)
                *(_DWORD *)v60 += 2;
              *((_QWORD *)v32 + 2 * (v33 + 2) + 1) = v36;
              HIDWORD(v51) = v33 + 3;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v30 + 16))(v30, a1, a2, &v50);
              v37 = v50;
              if (HIDWORD(v51))
              {
                v38 = a4;
                v39 = 16 * HIDWORD(v51);
                v40 = (WTF::StringImpl **)((char *)v50 + 8);
                do
                {
                  v41 = *v40;
                  *v40 = 0;
                  if (v41)
                  {
                    if (*(_DWORD *)v41 == 2)
                      WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v22);
                    else
                      *(_DWORD *)v41 -= 2;
                  }
                  v40 += 2;
                  v39 -= 16;
                }
                while (v39);
                v37 = v50;
                a4 = v38;
              }
              if (v37)
              {
                v50 = 0;
                LODWORD(v51) = 0;
                WTF::fastFree(v37, v22);
              }
              v42 = v60;
              v60 = 0;
              if (v42)
              {
                if (*(_DWORD *)v42 == 2)
                  WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v42 -= 2;
              }
              v43 = v58;
              v58 = 0;
              if (v43)
              {
                if (*(_DWORD *)v43 == 2)
                  WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v43 -= 2;
              }
              v44 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v44)
              {
                if (*(_DWORD *)v44 == 2)
                  WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v44 -= 2;
              }
              ++v29;
            }
            while (v29 != (uint64_t *)v46);
          }
          v45 = __ldxr(v24);
          if (v45 == 1)
          {
            if (!__stlxr(0, v24))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v55;
  v55 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v22);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1947B6C48(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF *a15, int a16, int a17, WTF::StringImpl *a18, WTF::StringImpl *a19, uint64_t a20,WTF::StringImpl *a21,char a22,WTF::StringImpl *a23,uint64_t a24,WTF::StringImpl *a25,uint64_t a26,WTF::StringImpl *a27)
{
  unsigned __int8 *v27;
  int v29;

  v29 = __ldxr(v27);
  if (v29 == 1)
  {
    if (!__stlxr(0, v27))
    {
LABEL_6:
      if (a21)
      {
        if (*(_DWORD *)a21 == 2)
          WTF::StringImpl::destroy(a21, a2);
        else
          *(_DWORD *)a21 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateWebM::dataReceived(WebCore::SharedBuffer const&)::$_2,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E3206FE0;
  a1[1] = 0;
  if (v2)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WebMResourceClientParent,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v2 + 56));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateWebM::dataReceived(WebCore::SharedBuffer const&)::$_2,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3206FE0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WebMResourceClientParent,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v3 + 56));
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateWebM::dataReceived(WebCore::SharedBuffer const&)::$_2,void>::call(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 *result;

  v1 = *(_QWORD *)(a1 + 16);
  result = WebCore::MediaPlayerPrivateWebM::setNetworkState((unsigned __int8 *)v1, 2);
  ++*(_DWORD *)(v1 + 612);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateWebM::loadFailed(WebCore::ResourceError const&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E3207008;
  a1[1] = 0;
  if (v2)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WebMResourceClientParent,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v2 + 56));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateWebM::loadFailed(WebCore::ResourceError const&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3207008;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WebMResourceClientParent,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v3 + 56));
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateWebM::loadFailed(WebCore::ResourceError const&)::$_0,void>::call(uint64_t a1)
{
  return WebCore::MediaPlayerPrivateWebM::setNetworkState(*(unsigned __int8 **)(a1 + 8), 5);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateWebM::loadFinished(void)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E3207030;
  a1[1] = 0;
  if (v2)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WebMResourceClientParent,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v2 + 56));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateWebM::loadFinished(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3207030;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WebMResourceClientParent,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v3 + 56));
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateWebM::loadFinished(void)::$_0,void>::call(uint64_t a1)
{
  WebCore::MediaPlayerPrivateWebM *v1;

  v1 = *(WebCore::MediaPlayerPrivateWebM **)(a1 + 8);
  *((_BYTE *)v1 + 622) = 1;
  WebCore::MediaPlayerPrivateWebM::maybeFinishLoading(v1);
}

WTF::JSONImpl::Value *WebCore::MediaSample::toJSONString(WebCore::MediaSample *this)
{
  WTF::JSONImpl::Value *v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  _DWORD *v10;
  _DWORD *v11;
  WTF::StringImpl *v12;
  WTF::JSONImpl::Value *v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  _DWORD *v21;
  _DWORD *v22;
  WTF::StringImpl *v23;
  WTF::JSONImpl::Value *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  _DWORD *v32;
  _DWORD *v33;
  WTF::StringImpl *v34;
  WTF::JSONImpl::Value *v35;
  WTF::JSONImpl::Value *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::JSONImpl::Value *v39;
  int v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  _DWORD *v48;
  WTF::StringImpl *v49;
  WTF::JSONImpl::Value *result;
  _DWORD **v51;
  uint64_t v52;
  _DWORD *v53;
  _DWORD **v54;
  uint64_t v55;
  _DWORD *v56;
  _DWORD **v57;
  uint64_t v58;
  _DWORD *v59;
  _DWORD **v60;
  uint64_t v61;
  _DWORD *v62;
  WTF::StringImpl *v63;
  uint64_t v64;
  _DWORD *v65;
  _DWORD *v66;
  WTF::StringImpl *v67;
  WTF::JSONImpl::Value *v68;
  _QWORD v69[2];
  char v70;

  WTF::JSONImpl::Object::create(this);
  v2 = v68;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v67 = (WTF::StringImpl *)v69[0];
  v63 = (WTF::StringImpl *)(*(uint64_t (**)(WebCore::MediaSample *))(*(_QWORD *)this + 16))(this);
  v64 = v3;
  WTF::MediaTime::toJSONObject((WTF::MediaTime *)&v63);
  v4 = (uint64_t)v65;
  v65 = 0;
  v66 = (_DWORD *)v4;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v2 + 2, &v67, (const WTF::StringImpl *)&v66, (uint64_t)v69);
  if (v70)
  {
    v6 = (uint64_t *)((char *)v2 + 24);
    v7 = *((unsigned int *)v2 + 9);
    if ((_DWORD)v7 == *((_DWORD *)v2 + 8))
    {
      v51 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v6, v7 + 1, (unint64_t)&v67);
      v7 = *((unsigned int *)v2 + 9);
      v52 = *((_QWORD *)v2 + 3);
      v53 = *v51;
      if (*v51)
        *v53 += 2;
      *(_QWORD *)(v52 + 8 * v7) = v53;
    }
    else
    {
      v8 = *v6;
      v9 = v67;
      if (v67)
        *(_DWORD *)v67 += 2;
      *(_QWORD *)(v8 + 8 * v7) = v9;
    }
    *((_DWORD *)v2 + 9) = v7 + 1;
  }
  v10 = v66;
  v66 = 0;
  if (v10)
  {
    if (*v10 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v10;
  }
  v11 = v65;
  v65 = 0;
  if (v11)
  {
    if (*v11 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v11;
  }
  v12 = v67;
  v67 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v5);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = v68;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v67 = (WTF::StringImpl *)v69[0];
  v63 = (WTF::StringImpl *)(*(uint64_t (**)(WebCore::MediaSample *))(*(_QWORD *)this + 24))(this);
  v64 = v14;
  WTF::MediaTime::toJSONObject((WTF::MediaTime *)&v63);
  v15 = (uint64_t)v65;
  v65 = 0;
  v66 = (_DWORD *)v15;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v13 + 2, &v67, (const WTF::StringImpl *)&v66, (uint64_t)v69);
  if (v70)
  {
    v17 = (uint64_t *)((char *)v13 + 24);
    v18 = *((unsigned int *)v13 + 9);
    if ((_DWORD)v18 == *((_DWORD *)v13 + 8))
    {
      v54 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v17, v18 + 1, (unint64_t)&v67);
      v18 = *((unsigned int *)v13 + 9);
      v55 = *((_QWORD *)v13 + 3);
      v56 = *v54;
      if (*v54)
        *v56 += 2;
      *(_QWORD *)(v55 + 8 * v18) = v56;
    }
    else
    {
      v19 = *v17;
      v20 = v67;
      if (v67)
        *(_DWORD *)v67 += 2;
      *(_QWORD *)(v19 + 8 * v18) = v20;
    }
    *((_DWORD *)v13 + 9) = v18 + 1;
  }
  v21 = v66;
  v66 = 0;
  if (v21)
  {
    if (*v21 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v21;
  }
  v22 = v65;
  v65 = 0;
  if (v22)
  {
    if (*v22 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v22;
  }
  v23 = v67;
  v67 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v16);
    else
      *(_DWORD *)v23 -= 2;
  }
  v24 = v68;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v67 = (WTF::StringImpl *)v69[0];
  v63 = (WTF::StringImpl *)(*(uint64_t (**)(WebCore::MediaSample *))(*(_QWORD *)this + 32))(this);
  v64 = v25;
  WTF::MediaTime::toJSONObject((WTF::MediaTime *)&v63);
  v26 = (uint64_t)v65;
  v65 = 0;
  v66 = (_DWORD *)v26;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v24 + 2, &v67, (const WTF::StringImpl *)&v66, (uint64_t)v69);
  if (v70)
  {
    v28 = (uint64_t *)((char *)v24 + 24);
    v29 = *((unsigned int *)v24 + 9);
    if ((_DWORD)v29 == *((_DWORD *)v24 + 8))
    {
      v57 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v28, v29 + 1, (unint64_t)&v67);
      v29 = *((unsigned int *)v24 + 9);
      v58 = *((_QWORD *)v24 + 3);
      v59 = *v57;
      if (*v57)
        *v59 += 2;
      *(_QWORD *)(v58 + 8 * v29) = v59;
    }
    else
    {
      v30 = *v28;
      v31 = v67;
      if (v67)
        *(_DWORD *)v67 += 2;
      *(_QWORD *)(v30 + 8 * v29) = v31;
    }
    *((_DWORD *)v24 + 9) = v29 + 1;
  }
  v32 = v66;
  v66 = 0;
  if (v32)
  {
    if (*v32 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v32;
  }
  v33 = v65;
  v65 = 0;
  if (v33)
  {
    if (*v33 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v33;
  }
  v34 = v67;
  v67 = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v27);
    else
      *(_DWORD *)v34 -= 2;
  }
  v35 = v68;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v63 = (WTF::StringImpl *)v69[0];
  v36 = (WTF::JSONImpl::Value *)(*(uint64_t (**)(WebCore::MediaSample *))(*(_QWORD *)this + 104))(this);
  WTF::JSONImpl::ObjectBase::setInteger(v35, &v63, v36);
  v38 = v63;
  v63 = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
      WTF::StringImpl::destroy(v38, v37);
    else
      *(_DWORD *)v38 -= 2;
  }
  v39 = v68;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v63 = (WTF::StringImpl *)v69[0];
  LODWORD(v65) = (*(float (**)(WebCore::MediaSample *))(*(_QWORD *)this + 56))(this);
  HIDWORD(v65) = v40;
  WebCore::FloatSize::toJSONObject((WebCore::FloatSize *)&v65, (uint64_t *)&v66);
  v41 = (WTF::StringImpl *)v66;
  v66 = 0;
  v67 = v41;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v39 + 2, &v63, (const WTF::StringImpl *)&v67, (uint64_t)v69);
  if (v70)
  {
    v43 = (uint64_t *)((char *)v39 + 24);
    v44 = *((unsigned int *)v39 + 9);
    if ((_DWORD)v44 == *((_DWORD *)v39 + 8))
    {
      v60 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v43, v44 + 1, (unint64_t)&v63);
      v44 = *((unsigned int *)v39 + 9);
      v61 = *((_QWORD *)v39 + 3);
      v62 = *v60;
      if (*v60)
        *v62 += 2;
      *(_QWORD *)(v61 + 8 * v44) = v62;
    }
    else
    {
      v45 = *v43;
      v46 = v63;
      if (v63)
        *(_DWORD *)v63 += 2;
      *(_QWORD *)(v45 + 8 * v44) = v46;
    }
    *((_DWORD *)v39 + 9) = v44 + 1;
  }
  v47 = v67;
  v67 = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v47;
  }
  v48 = v66;
  v66 = 0;
  if (v48)
  {
    if (*v48 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v48;
  }
  v49 = v63;
  v63 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
      WTF::StringImpl::destroy(v49, v42);
    else
      *(_DWORD *)v49 -= 2;
  }
  WTF::JSONImpl::Value::toJSONString(v68);
  result = v68;
  v68 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF::JSONImpl::Value *)WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)result;
  }
  return result;
}

void sub_1947B7590(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, _DWORD *a15)
{
  if (a15)
  {
    if (*a15 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*a15;
  }
  _Unwind_Resume(exception_object);
}

_DWORD *WTF::JSONImpl::ObjectBase::setInteger(WTF::JSONImpl::ObjectBase *this, WTF::StringImpl **a2, WTF::JSONImpl::Value *a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  _DWORD *result;
  _DWORD **v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  _BYTE v14[24];

  WTF::JSONImpl::Value::create(a3);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)this + 2, a2, (const WTF::StringImpl *)&v13, (uint64_t)v14);
  if (v14[16])
  {
    v5 = (uint64_t *)((char *)this + 24);
    v6 = *((unsigned int *)this + 9);
    if ((_DWORD)v6 == *((_DWORD *)this + 8))
    {
      v10 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v5, v6 + 1, (unint64_t)a2);
      v6 = *((unsigned int *)this + 9);
      v11 = *((_QWORD *)this + 3);
      v12 = *v10;
      if (*v10)
        *v12 += 2;
      *(_QWORD *)(v11 + 8 * v6) = v12;
    }
    else
    {
      v7 = *v5;
      v8 = *a2;
      if (*a2)
        *(_DWORD *)v8 += 2;
      *(_QWORD *)(v7 + 8 * v6) = v8;
    }
    *((_DWORD *)this + 9) = v6 + 1;
  }
  result = v13;
  v13 = 0;
  if (result)
  {
    if (*result == 1)
      return (_DWORD *)WTF::JSONImpl::Value::operator delete();
    else
      --*result;
  }
  return result;
}

void sub_1947B77A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _DWORD *a9)
{
  if (a9)
  {
    if (*a9 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*a9;
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [26],WebCore::FourCC,char [9],WebCore::FourCC,char [12]>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4, unsigned int *a5, const char *a6, unsigned int *a7, const char *a8)
{
  unsigned int v10;
  unsigned int v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  NSObject *v20;
  uint64_t v21;
  void *v22;
  char *v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  WTF::Logger *v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  WTF::Logger *v41;
  const char *v42;
  uint64_t v43;
  WTF::StringImpl **v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  int v52;
  uint64_t v53;
  WTF::Logger *v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  char v72[8];
  __int128 buf;
  int v74;
  WTF::StringImpl *v75;
  int v76;
  WTF::StringImpl *v77;
  int v78;
  WTF::StringImpl *v79;
  int v80;
  WTF::StringImpl *v81;
  int v82;
  _QWORD v83[3];

  v83[1] = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  WTF::String::String((WTF::String *)&v66, a4);
  v10 = bswap32(*a5);
  BYTE4(buf) = 0;
  LODWORD(buf) = v10;
  WTF::String::String((WTF::String *)&v65, (const char *)&buf);
  WTF::String::String((WTF::String *)&v64, a6);
  v11 = bswap32(*a7);
  BYTE4(buf) = 0;
  LODWORD(buf) = v11;
  WTF::String::String((WTF::String *)&v63, (const char *)&buf);
  WTF::String::String((WTF::String *)&v62, a8);
  v60 = v66;
  *(_QWORD *)v72 = v65;
  *(_QWORD *)&buf = v67;
  v70 = v63;
  v71 = v64;
  v69 = v62;
  result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v60, (uint64_t *)v72, (uint64_t *)&v71, (uint64_t *)&v70, (uint64_t *)&v69, &v68);
  if (v68)
  {
    v14 = v62;
    v62 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v13);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = v63;
    v63 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v13);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = v64;
    v64 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v13);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = v65;
    v65 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v13);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = v66;
    v66 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v13);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = v67;
    v67 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v13);
      else
        *(_DWORD *)v19 -= 2;
    }
    v20 = *(NSObject **)(a1 + 32);
    v21 = os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v21)
    {
      WTF::String::utf8();
      v23 = v60 ? (char *)v60 + 16 : 0;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v23;
      _os_log_impl(&dword_1940B8000, v20, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      v21 = (uint64_t)v60;
      v60 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 1)
          v21 = WTF::fastFree((WTF *)v21, v22);
        else
          --*(_DWORD *)v21;
      }
    }
    if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
    {
      v24 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v25 = *v24;
        if ((v25 & 1) != 0)
          break;
        v26 = __ldaxr(v24);
        if (v26 == v25)
        {
          if (!__stxr(v25 | 1, v24))
          {
            v27 = WTF::Logger::observers((WTF::Logger *)v21);
            v28 = *(unsigned int *)(v27 + 12);
            if ((_DWORD)v28)
            {
              v29 = *(uint64_t **)v27;
              v53 = *(_QWORD *)v27 + 8 * v28;
              do
              {
                v30 = *v29;
                LODWORD(buf) = 0;
                WTF::Logger::LogSiteIdentifier::toString(this);
                v74 = 0;
                WTF::String::String((WTF::String *)&v75, a4);
                v76 = 0;
                v31 = bswap32(*a5);
                v72[4] = 0;
                *(_DWORD *)v72 = v31;
                WTF::String::String((WTF::String *)&v77, v72);
                v78 = 0;
                WTF::String::String((WTF::String *)&v79, a6);
                v80 = 0;
                v32 = bswap32(*a7);
                v72[4] = 0;
                *(_DWORD *)v72 = v32;
                WTF::String::String((WTF::String *)&v81, v72);
                v82 = 0;
                WTF::String::String((WTF::String *)v83, a8);
                v60 = 0;
                v61 = 0;
                v33 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x60);
                LODWORD(v61) = 6;
                v60 = v33;
                v34 = HIDWORD(v61);
                *((_DWORD *)v33 + 4 * HIDWORD(v61)) = buf;
                v35 = *((_QWORD *)&buf + 1);
                if (*((_QWORD *)&buf + 1))
                  **((_DWORD **)&buf + 1) += 2;
                *((_QWORD *)v33 + 2 * v34 + 1) = v35;
                *((_DWORD *)v33 + 4 * (v34 + 1)) = v74;
                v36 = v75;
                if (v75)
                  *(_DWORD *)v75 += 2;
                *((_QWORD *)v33 + 2 * (v34 + 1) + 1) = v36;
                *((_DWORD *)v33 + 4 * (v34 + 2)) = v76;
                v37 = v77;
                if (v77)
                  *(_DWORD *)v77 += 2;
                *((_QWORD *)v33 + 2 * (v34 + 2) + 1) = v37;
                *((_DWORD *)v33 + 4 * (v34 + 3)) = v78;
                v38 = v79;
                if (v79)
                  *(_DWORD *)v79 += 2;
                *((_QWORD *)v33 + 2 * (v34 + 3) + 1) = v38;
                *((_DWORD *)v33 + 4 * (v34 + 4)) = v80;
                v39 = v81;
                if (v81)
                  *(_DWORD *)v81 += 2;
                *((_QWORD *)v33 + 2 * (v34 + 4) + 1) = v39;
                *((_DWORD *)v33 + 4 * (v34 + 5)) = v82;
                v40 = v83[0];
                if (v83[0])
                  *(_DWORD *)v83[0] += 2;
                *((_QWORD *)v33 + 2 * (v34 + 5) + 1) = v40;
                HIDWORD(v61) = v34 + 6;
                (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v30 + 16))(v30, a1, a2, &v60);
                v41 = v60;
                if (HIDWORD(v61))
                {
                  v42 = a4;
                  v43 = 16 * HIDWORD(v61);
                  v44 = (WTF::StringImpl **)((char *)v60 + 8);
                  do
                  {
                    v45 = *v44;
                    *v44 = 0;
                    if (v45)
                    {
                      if (*(_DWORD *)v45 == 2)
                        WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v22);
                      else
                        *(_DWORD *)v45 -= 2;
                    }
                    v44 += 2;
                    v43 -= 16;
                  }
                  while (v43);
                  v41 = v60;
                  a4 = v42;
                }
                if (v41)
                {
                  v60 = 0;
                  LODWORD(v61) = 0;
                  WTF::fastFree(v41, v22);
                }
                v46 = (WTF::StringImpl *)v83[0];
                v83[0] = 0;
                if (v46)
                {
                  if (*(_DWORD *)v46 == 2)
                    WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v22);
                  else
                    *(_DWORD *)v46 -= 2;
                }
                v47 = v81;
                v81 = 0;
                if (v47)
                {
                  if (*(_DWORD *)v47 == 2)
                    WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v22);
                  else
                    *(_DWORD *)v47 -= 2;
                }
                v48 = v79;
                v79 = 0;
                if (v48)
                {
                  if (*(_DWORD *)v48 == 2)
                    WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v22);
                  else
                    *(_DWORD *)v48 -= 2;
                }
                v49 = v77;
                v77 = 0;
                if (v49)
                {
                  if (*(_DWORD *)v49 == 2)
                    WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v22);
                  else
                    *(_DWORD *)v49 -= 2;
                }
                v50 = v75;
                v75 = 0;
                if (v50)
                {
                  if (*(_DWORD *)v50 == 2)
                    WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v22);
                  else
                    *(_DWORD *)v50 -= 2;
                }
                v51 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                *((_QWORD *)&buf + 1) = 0;
                if (v51)
                {
                  if (*(_DWORD *)v51 == 2)
                    WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v22);
                  else
                    *(_DWORD *)v51 -= 2;
                }
                ++v29;
              }
              while (v29 != (uint64_t *)v53);
            }
            v52 = __ldxr(v24);
            if (v52 == 1)
            {
              if (!__stlxr(0, v24))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    result = v68;
    v68 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v22);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

void sub_1947B7E84(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,WTF *a24,int a25,int a26,WTF::StringImpl *a27,WTF::StringImpl *a28,WTF::StringImpl *a29,WTF::StringImpl *a30,WTF::StringImpl *a31,uint64_t a32,WTF::StringImpl *a33)
{
  unsigned __int8 *v33;
  int v35;

  v35 = __ldxr(v33);
  if (v35 == 1)
  {
    if (!__stlxr(0, v33))
    {
LABEL_6:
      if (a33)
      {
        if (*(_DWORD *)a33 == 2)
          WTF::StringImpl::destroy(a33, a2);
        else
          *(_DWORD *)a33 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateWebM::notifyClientWhenReadyForMoreSamples(unsigned long long)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = a1[1];
  *a1 = &off_1E3207058;
  a1[1] = 0;
  if (!v3)
    return a1;
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return a1;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateWebM::notifyClientWhenReadyForMoreSamples(unsigned long long)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3207058;
  *((_QWORD *)this + 1) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return WTF::fastFree(this, a2);
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateWebM::notifyClientWhenReadyForMoreSamples(unsigned long long)::$_0,void>::call(unsigned __int8 *result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  _QWORD *v3;
  uint64_t v4;
  int v6;

  v1 = *((_QWORD *)result + 1);
  if (!v1)
    return result;
  v2 = result;
  v4 = *((_QWORD *)result + 2);
  v3 = (_QWORD *)*((_QWORD *)result + 3);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
LABEL_5:
    result = (unsigned __int8 *)MEMORY[0x19AEA534C](v1);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v1))
    goto LABEL_5;
LABEL_6:
  if (*(_QWORD *)(v1 + 24))
    ++*(_QWORD *)(v1 + 8);
  else
    v4 = 0;
  v6 = __ldxr((unsigned __int8 *)v1);
  if (v6 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v1))
    {
      if (!v4)
        return result;
      goto LABEL_12;
    }
  }
  else
  {
    __clrex();
  }
  result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
  if (v4)
  {
LABEL_12:
    WebCore::MediaPlayerPrivateWebM::didBecomeReadyForMoreSamples(v3, *((WTF::String **)v2 + 4));
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WebMResourceClientParent,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v4 + 56));
  }
  return result;
}

void sub_1947B83E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WebMResourceClientParent,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v1 + 56));
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateWebM::notifyClientWhenReadyForMoreSamples(unsigned long long)::$_1,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = a1[1];
  *a1 = &off_1E3207080;
  a1[1] = 0;
  if (!v3)
    return a1;
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return a1;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateWebM::notifyClientWhenReadyForMoreSamples(unsigned long long)::$_1,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3207080;
  *((_QWORD *)this + 1) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return WTF::fastFree(this, a2);
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateWebM::notifyClientWhenReadyForMoreSamples(unsigned long long)::$_1,void>::call(unsigned __int8 *result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  _QWORD *v3;
  uint64_t v4;
  int v6;

  v1 = *((_QWORD *)result + 1);
  if (!v1)
    return result;
  v2 = result;
  v4 = *((_QWORD *)result + 2);
  v3 = (_QWORD *)*((_QWORD *)result + 3);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
LABEL_5:
    result = (unsigned __int8 *)MEMORY[0x19AEA534C](v1);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v1))
    goto LABEL_5;
LABEL_6:
  if (*(_QWORD *)(v1 + 24))
    ++*(_QWORD *)(v1 + 8);
  else
    v4 = 0;
  v6 = __ldxr((unsigned __int8 *)v1);
  if (v6 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v1))
    {
      if (!v4)
        return result;
      goto LABEL_12;
    }
  }
  else
  {
    __clrex();
  }
  result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
  if (v4)
  {
LABEL_12:
    WebCore::MediaPlayerPrivateWebM::didBecomeReadyForMoreSamples(v3, *((WTF::String **)v2 + 4));
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WebMResourceClientParent,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v4 + 56));
  }
  return result;
}

void sub_1947B8650(_Unwind_Exception *a1)
{
  uint64_t v1;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WebMResourceClientParent,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v1 + 56));
  _Unwind_Resume(a1);
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,unsigned long long>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, WTF::String **a4)
{
  uint64_t result;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::String *v27;
  WTF::Logger *v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::Logger *v32;
  uint64_t v33;
  WTF::StringImpl **v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  int v38;
  WTF::Logger *v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  __int128 buf;
  int v46;
  WTF::StringImpl *v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  result = WTF::String::number(*a4);
  if (!v43)
  {
    v8 = 0;
    if (v42)
      goto LABEL_3;
LABEL_72:
    v9 = 0;
    goto LABEL_4;
  }
  v8 = *((_DWORD *)v43 + 1);
  if (!v42)
    goto LABEL_72;
LABEL_3:
  v9 = *((_DWORD *)v42 + 1);
LABEL_4:
  if ((v9 | v8) < 0)
    goto LABEL_75;
  result = (v8 + v9);
  if (__OFADD__(v8, v9))
    goto LABEL_75;
  if (v43)
  {
    v10 = *((_DWORD *)v43 + 4);
    v11 = (v10 >> 2) & 1;
    if (v42 && (v10 & 4) != 0)
      goto LABEL_9;
  }
  else
  {
    if (v42)
    {
LABEL_9:
      v11 = (*((unsigned __int8 *)v42 + 16) >> 2) & 1;
      goto LABEL_10;
    }
    v11 = 1;
  }
LABEL_10:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v11, (uint64_t)v43, (uint64_t)v42, &buf);
  v44 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_75:
    __break(0xC471u);
    return result;
  }
  v13 = v42;
  v42 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v43;
  v43 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *(NSObject **)(a1 + 32);
  v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v16)
  {
    WTF::String::utf8();
    v18 = v40 ? (char *)v40 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v18;
    _os_log_impl(&dword_1940B8000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v16 = (uint64_t)v40;
    v40 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
        v16 = WTF::fastFree((WTF *)v16, v17);
      else
        --*(_DWORD *)v16;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v19 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v20 = *v19;
      if ((v20 & 1) != 0)
        break;
      v21 = __ldaxr(v19);
      if (v21 == v20)
      {
        if (!__stxr(v20 | 1, v19))
        {
          v22 = WTF::Logger::observers((WTF::Logger *)v16);
          v23 = *(unsigned int *)(v22 + 12);
          if ((_DWORD)v23)
          {
            v24 = *(uint64_t **)v22;
            v25 = *(_QWORD *)v22 + 8 * v23;
            do
            {
              v26 = *v24;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v27 = *a4;
              v46 = 0;
              WTF::String::number(v27);
              v40 = 0;
              v41 = 0;
              v28 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v41) = 2;
              v40 = v28;
              v29 = HIDWORD(v41);
              *((_DWORD *)v28 + 4 * HIDWORD(v41)) = buf;
              v30 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v28 + 2 * v29 + 1) = v30;
              *((_DWORD *)v28 + 4 * (v29 + 1)) = v46;
              v31 = v47;
              if (v47)
                *(_DWORD *)v47 += 2;
              *((_QWORD *)v28 + 2 * (v29 + 1) + 1) = v31;
              HIDWORD(v41) = v29 + 2;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, a1, a2, &v40);
              v32 = v40;
              if (HIDWORD(v41))
              {
                v33 = 16 * HIDWORD(v41);
                v34 = (WTF::StringImpl **)((char *)v40 + 8);
                do
                {
                  v35 = *v34;
                  *v34 = 0;
                  if (v35)
                  {
                    if (*(_DWORD *)v35 == 2)
                      WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v17);
                    else
                      *(_DWORD *)v35 -= 2;
                  }
                  v34 += 2;
                  v33 -= 16;
                }
                while (v33);
                v32 = v40;
              }
              if (v32)
              {
                v40 = 0;
                LODWORD(v41) = 0;
                WTF::fastFree(v32, v17);
              }
              v36 = v47;
              v47 = 0;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                  WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v36 -= 2;
              }
              v37 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v37)
              {
                if (*(_DWORD *)v37 == 2)
                  WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v37 -= 2;
              }
              ++v24;
            }
            while (v24 != (uint64_t *)v25);
          }
          v38 = __ldxr(v19);
          if (v38 == 1)
          {
            if (!__stlxr(0, v19))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v44;
  v44 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1947B8A68(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, WTF::StringImpl *a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19)
{
  unsigned __int8 *v19;
  int v21;

  v21 = __ldxr(v19);
  if (v21 == 1)
  {
    if (!__stlxr(0, v19))
    {
LABEL_6:
      if (a15)
      {
        if (*(_DWORD *)a15 == 2)
          WTF::StringImpl::destroy(a15, a2);
        else
          *(_DWORD *)a15 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [14]>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4)
{
  uint64_t result;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::Logger *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::Logger *v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  WTF::Logger *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  __int128 buf;
  int v45;
  WTF::StringImpl *v46[3];

  v46[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  result = WTF::String::String((WTF::String *)&v41, a4);
  if (!v42)
  {
    v8 = 0;
    if (v41)
      goto LABEL_3;
LABEL_72:
    v9 = 0;
    goto LABEL_4;
  }
  v8 = *((_DWORD *)v42 + 1);
  if (!v41)
    goto LABEL_72;
LABEL_3:
  v9 = *((_DWORD *)v41 + 1);
LABEL_4:
  if ((v9 | v8) < 0)
    goto LABEL_75;
  result = (v8 + v9);
  if (__OFADD__(v8, v9))
    goto LABEL_75;
  if (v42)
  {
    v10 = *((_DWORD *)v42 + 4);
    v11 = (v10 >> 2) & 1;
    if (v41 && (v10 & 4) != 0)
      goto LABEL_9;
  }
  else
  {
    if (v41)
    {
LABEL_9:
      v11 = (*((unsigned __int8 *)v41 + 16) >> 2) & 1;
      goto LABEL_10;
    }
    v11 = 1;
  }
LABEL_10:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v11, (uint64_t)v42, (uint64_t)v41, &buf);
  v43 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_75:
    __break(0xC471u);
    return result;
  }
  v13 = v41;
  v41 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v42;
  v42 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *(NSObject **)(a1 + 32);
  v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v16)
  {
    WTF::String::utf8();
    v18 = v39 ? (char *)v39 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v18;
    _os_log_impl(&dword_1940B8000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v16 = (uint64_t)v39;
    v39 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
        v16 = WTF::fastFree((WTF *)v16, v17);
      else
        --*(_DWORD *)v16;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v19 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v20 = *v19;
      if ((v20 & 1) != 0)
        break;
      v21 = __ldaxr(v19);
      if (v21 == v20)
      {
        if (!__stxr(v20 | 1, v19))
        {
          v22 = WTF::Logger::observers((WTF::Logger *)v16);
          v23 = *(unsigned int *)(v22 + 12);
          if ((_DWORD)v23)
          {
            v24 = *(uint64_t **)v22;
            v25 = *(_QWORD *)v22 + 8 * v23;
            do
            {
              v26 = *v24;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v45 = 0;
              WTF::String::String((WTF::String *)v46, a4);
              v39 = 0;
              v40 = 0;
              v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v40) = 2;
              v39 = v27;
              v28 = HIDWORD(v40);
              *((_DWORD *)v27 + 4 * HIDWORD(v40)) = buf;
              v29 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v27 + 2 * v28 + 1) = v29;
              *((_DWORD *)v27 + 4 * (v28 + 1)) = v45;
              v30 = v46[0];
              if (v46[0])
                *(_DWORD *)v46[0] += 2;
              *((_QWORD *)v27 + 2 * (v28 + 1) + 1) = v30;
              HIDWORD(v40) = v28 + 2;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, a1, a2, &v39);
              v31 = v39;
              if (HIDWORD(v40))
              {
                v32 = 16 * HIDWORD(v40);
                v33 = (WTF::StringImpl **)((char *)v39 + 8);
                do
                {
                  v34 = *v33;
                  *v33 = 0;
                  if (v34)
                  {
                    if (*(_DWORD *)v34 == 2)
                      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v17);
                    else
                      *(_DWORD *)v34 -= 2;
                  }
                  v33 += 2;
                  v32 -= 16;
                }
                while (v32);
                v31 = v39;
              }
              if (v31)
              {
                v39 = 0;
                LODWORD(v40) = 0;
                WTF::fastFree(v31, v17);
              }
              v35 = v46[0];
              v46[0] = 0;
              if (v35)
              {
                if (*(_DWORD *)v35 == 2)
                  WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v35 -= 2;
              }
              v36 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                  WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v36 -= 2;
              }
              ++v24;
            }
            while (v24 != (uint64_t *)v25);
          }
          v37 = __ldxr(v19);
          if (v37 == 1)
          {
            if (!__stlxr(0, v19))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v43;
  v43 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1947B8FD0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, WTF::StringImpl *a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19)
{
  unsigned __int8 *v19;
  int v21;

  v21 = __ldxr(v19);
  if (v21 == 1)
  {
    if (!__stlxr(0, v19))
    {
LABEL_6:
      if (a15)
      {
        if (*(_DWORD *)a15 == 2)
          WTF::StringImpl::destroy(a15, a2);
        else
          *(_DWORD *)a15 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [25],unsigned long long,char [28]>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4, WTF::String **a5, const char *a6)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  NSObject *v14;
  uint64_t v15;
  void *v16;
  char *v17;
  unsigned __int8 *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  WTF::String *v25;
  WTF::Logger *v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::Logger *v32;
  const char *v33;
  uint64_t v34;
  WTF::StringImpl **v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  int v41;
  uint64_t v42;
  WTF::Logger *v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  __int128 buf;
  int v57;
  WTF::StringImpl *v58;
  int v59;
  WTF::StringImpl *v60;
  int v61;
  WTF::StringImpl *v62[3];

  v62[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  WTF::String::String((WTF::String *)&v51, a4);
  WTF::String::number(*a5);
  WTF::String::String((WTF::String *)&v49, a6);
  v47 = v51;
  v55 = v50;
  *(_QWORD *)&buf = v52;
  v54 = v49;
  result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v47, (uint64_t *)&v55, (uint64_t *)&v54, &v53);
  if (v53)
  {
    v10 = v49;
    v49 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v9);
      else
        *(_DWORD *)v10 -= 2;
    }
    v11 = v50;
    v50 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v9);
      else
        *(_DWORD *)v11 -= 2;
    }
    v12 = v51;
    v51 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v9);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = v52;
    v52 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v9);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = *(NSObject **)(a1 + 32);
    v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v15)
    {
      WTF::String::utf8();
      v17 = v47 ? (char *)v47 + 16 : 0;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v17;
      _os_log_impl(&dword_1940B8000, v14, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      v15 = (uint64_t)v47;
      v47 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 1)
          v15 = WTF::fastFree((WTF *)v15, v16);
        else
          --*(_DWORD *)v15;
      }
    }
    if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
    {
      v18 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v19 = *v18;
        if ((v19 & 1) != 0)
          break;
        v20 = __ldaxr(v18);
        if (v20 == v19)
        {
          if (!__stxr(v19 | 1, v18))
          {
            v21 = WTF::Logger::observers((WTF::Logger *)v15);
            v22 = *(unsigned int *)(v21 + 12);
            if ((_DWORD)v22)
            {
              v23 = *(uint64_t **)v21;
              v42 = *(_QWORD *)v21 + 8 * v22;
              do
              {
                v24 = *v23;
                LODWORD(buf) = 0;
                WTF::Logger::LogSiteIdentifier::toString(this);
                v57 = 0;
                WTF::String::String((WTF::String *)&v58, a4);
                v25 = *a5;
                v59 = 0;
                WTF::String::number(v25);
                v61 = 0;
                WTF::String::String((WTF::String *)v62, a6);
                v47 = 0;
                v48 = 0;
                v26 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x40);
                LODWORD(v48) = 4;
                v47 = v26;
                v27 = HIDWORD(v48);
                *((_DWORD *)v26 + 4 * HIDWORD(v48)) = buf;
                v28 = *((_QWORD *)&buf + 1);
                if (*((_QWORD *)&buf + 1))
                  **((_DWORD **)&buf + 1) += 2;
                *((_QWORD *)v26 + 2 * v27 + 1) = v28;
                *((_DWORD *)v26 + 4 * (v27 + 1)) = v57;
                v29 = v58;
                if (v58)
                  *(_DWORD *)v58 += 2;
                *((_QWORD *)v26 + 2 * (v27 + 1) + 1) = v29;
                *((_DWORD *)v26 + 4 * (v27 + 2)) = v59;
                v30 = v60;
                if (v60)
                  *(_DWORD *)v60 += 2;
                *((_QWORD *)v26 + 2 * (v27 + 2) + 1) = v30;
                *((_DWORD *)v26 + 4 * (v27 + 3)) = v61;
                v31 = v62[0];
                if (v62[0])
                  *(_DWORD *)v62[0] += 2;
                *((_QWORD *)v26 + 2 * (v27 + 3) + 1) = v31;
                HIDWORD(v48) = v27 + 4;
                (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v24 + 16))(v24, a1, a2, &v47);
                v32 = v47;
                if (HIDWORD(v48))
                {
                  v33 = a4;
                  v34 = 16 * HIDWORD(v48);
                  v35 = (WTF::StringImpl **)((char *)v47 + 8);
                  do
                  {
                    v36 = *v35;
                    *v35 = 0;
                    if (v36)
                    {
                      if (*(_DWORD *)v36 == 2)
                        WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v16);
                      else
                        *(_DWORD *)v36 -= 2;
                    }
                    v35 += 2;
                    v34 -= 16;
                  }
                  while (v34);
                  v32 = v47;
                  a4 = v33;
                }
                if (v32)
                {
                  v47 = 0;
                  LODWORD(v48) = 0;
                  WTF::fastFree(v32, v16);
                }
                v37 = v62[0];
                v62[0] = 0;
                if (v37)
                {
                  if (*(_DWORD *)v37 == 2)
                    WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v16);
                  else
                    *(_DWORD *)v37 -= 2;
                }
                v38 = v60;
                v60 = 0;
                if (v38)
                {
                  if (*(_DWORD *)v38 == 2)
                    WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v16);
                  else
                    *(_DWORD *)v38 -= 2;
                }
                v39 = v58;
                v58 = 0;
                if (v39)
                {
                  if (*(_DWORD *)v39 == 2)
                    WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v16);
                  else
                    *(_DWORD *)v39 -= 2;
                }
                v40 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                *((_QWORD *)&buf + 1) = 0;
                if (v40)
                {
                  if (*(_DWORD *)v40 == 2)
                    WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v16);
                  else
                    *(_DWORD *)v40 -= 2;
                }
                ++v23;
              }
              while (v23 != (uint64_t *)v42);
            }
            v41 = __ldxr(v18);
            if (v41 == 1)
            {
              if (!__stlxr(0, v18))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    result = v53;
    v53 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v16);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

void sub_1947B9650(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, WTF *a18, int a19, int a20,WTF::StringImpl *a21,WTF::StringImpl *a22,WTF::StringImpl *a23,uint64_t a24,WTF::StringImpl *a25,uint64_t a26,uint64_t a27,char a28,WTF::StringImpl *a29,uint64_t a30,WTF::StringImpl *a31,uint64_t a32,WTF::StringImpl *a33,uint64_t a34,WTF::StringImpl *a35)
{
  unsigned __int8 *v35;
  int v37;

  v37 = __ldxr(v35);
  if (v37 == 1)
  {
    if (!__stlxr(0, v35))
    {
LABEL_6:
      if (a25)
      {
        if (*(_DWORD *)a25 == 2)
          WTF::StringImpl::destroy(a25, a2);
        else
          *(_DWORD *)a25 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [54],WTF::MediaTime,char [41],WTF::MediaTime>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4, WTF::MediaTime *a5, const char *a6, WTF::MediaTime *a7)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  NSObject *v16;
  uint64_t v17;
  void *v18;
  char *v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  WTF::Logger *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::Logger *v34;
  const char *v35;
  uint64_t v36;
  WTF::StringImpl **v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  int v44;
  uint64_t v45;
  WTF::Logger *v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  __int128 buf;
  int v63;
  WTF::StringImpl *v64;
  int v65;
  WTF::StringImpl *v66;
  int v67;
  WTF::StringImpl *v68;
  int v69;
  WTF::StringImpl *v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  WTF::String::String((WTF::String *)&v56, a4);
  WTF::MediaTime::toJSONString(a5);
  WTF::String::String((WTF::String *)&v54, a6);
  WTF::MediaTime::toJSONString(a7);
  *(_QWORD *)&buf = v57;
  v51 = v56;
  v60 = v54;
  v61 = v55;
  v59 = v53;
  result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v51, (uint64_t *)&v61, (uint64_t *)&v60, (uint64_t *)&v59, &v58);
  if (v58)
  {
    v11 = v53;
    v53 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v10);
      else
        *(_DWORD *)v11 -= 2;
    }
    v12 = v54;
    v54 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v10);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = v55;
    v55 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v10);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = v56;
    v56 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v10);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = v57;
    v57 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v10);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = *(NSObject **)(a1 + 32);
    v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v17)
    {
      WTF::String::utf8();
      v19 = v51 ? (char *)v51 + 16 : 0;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v19;
      _os_log_impl(&dword_1940B8000, v16, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      v17 = (uint64_t)v51;
      v51 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 1)
          v17 = WTF::fastFree((WTF *)v17, v18);
        else
          --*(_DWORD *)v17;
      }
    }
    if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
    {
      v20 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v21 = *v20;
        if ((v21 & 1) != 0)
          break;
        v22 = __ldaxr(v20);
        if (v22 == v21)
        {
          if (!__stxr(v21 | 1, v20))
          {
            v23 = WTF::Logger::observers((WTF::Logger *)v17);
            v24 = *(unsigned int *)(v23 + 12);
            if ((_DWORD)v24)
            {
              v25 = *(uint64_t **)v23;
              v45 = *(_QWORD *)v23 + 8 * v24;
              do
              {
                v26 = *v25;
                LODWORD(buf) = 0;
                WTF::Logger::LogSiteIdentifier::toString(this);
                v63 = 0;
                WTF::String::String((WTF::String *)&v64, a4);
                v65 = 1;
                WTF::MediaTime::toJSONString(a5);
                v67 = 0;
                WTF::String::String((WTF::String *)&v68, a6);
                v69 = 1;
                WTF::MediaTime::toJSONString(a7);
                v51 = 0;
                v52 = 0;
                v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x50);
                LODWORD(v52) = 5;
                v51 = v27;
                v28 = HIDWORD(v52);
                *((_DWORD *)v27 + 4 * HIDWORD(v52)) = buf;
                v29 = *((_QWORD *)&buf + 1);
                if (*((_QWORD *)&buf + 1))
                  **((_DWORD **)&buf + 1) += 2;
                *((_QWORD *)v27 + 2 * v28 + 1) = v29;
                *((_DWORD *)v27 + 4 * (v28 + 1)) = v63;
                v30 = v64;
                if (v64)
                  *(_DWORD *)v64 += 2;
                *((_QWORD *)v27 + 2 * (v28 + 1) + 1) = v30;
                *((_DWORD *)v27 + 4 * (v28 + 2)) = v65;
                v31 = v66;
                if (v66)
                  *(_DWORD *)v66 += 2;
                *((_QWORD *)v27 + 2 * (v28 + 2) + 1) = v31;
                *((_DWORD *)v27 + 4 * (v28 + 3)) = v67;
                v32 = v68;
                if (v68)
                  *(_DWORD *)v68 += 2;
                *((_QWORD *)v27 + 2 * (v28 + 3) + 1) = v32;
                *((_DWORD *)v27 + 4 * (v28 + 4)) = v69;
                v33 = v70;
                if (v70)
                  *(_DWORD *)v70 += 2;
                *((_QWORD *)v27 + 2 * (v28 + 4) + 1) = v33;
                HIDWORD(v52) = v28 + 5;
                (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, a1, a2, &v51);
                v34 = v51;
                if (HIDWORD(v52))
                {
                  v35 = a4;
                  v36 = 16 * HIDWORD(v52);
                  v37 = (WTF::StringImpl **)((char *)v51 + 8);
                  do
                  {
                    v38 = *v37;
                    *v37 = 0;
                    if (v38)
                    {
                      if (*(_DWORD *)v38 == 2)
                        WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v18);
                      else
                        *(_DWORD *)v38 -= 2;
                    }
                    v37 += 2;
                    v36 -= 16;
                  }
                  while (v36);
                  v34 = v51;
                  a4 = v35;
                }
                if (v34)
                {
                  v51 = 0;
                  LODWORD(v52) = 0;
                  WTF::fastFree(v34, v18);
                }
                v39 = v70;
                v70 = 0;
                if (v39)
                {
                  if (*(_DWORD *)v39 == 2)
                    WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v18);
                  else
                    *(_DWORD *)v39 -= 2;
                }
                v40 = v68;
                v68 = 0;
                if (v40)
                {
                  if (*(_DWORD *)v40 == 2)
                    WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v18);
                  else
                    *(_DWORD *)v40 -= 2;
                }
                v41 = v66;
                v66 = 0;
                if (v41)
                {
                  if (*(_DWORD *)v41 == 2)
                    WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v18);
                  else
                    *(_DWORD *)v41 -= 2;
                }
                v42 = v64;
                v64 = 0;
                if (v42)
                {
                  if (*(_DWORD *)v42 == 2)
                    WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v18);
                  else
                    *(_DWORD *)v42 -= 2;
                }
                v43 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                *((_QWORD *)&buf + 1) = 0;
                if (v43)
                {
                  if (*(_DWORD *)v43 == 2)
                    WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v18);
                  else
                    *(_DWORD *)v43 -= 2;
                }
                ++v25;
              }
              while (v25 != (uint64_t *)v45);
            }
            v44 = __ldxr(v20);
            if (v44 == 1)
            {
              if (!__stlxr(0, v20))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    result = v58;
    v58 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v18);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

void sub_1947B9E68(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,WTF *a22,int a23,int a24,WTF::StringImpl *a25,WTF::StringImpl *a26,WTF::StringImpl *a27,WTF::StringImpl *a28,uint64_t a29,WTF::StringImpl *a30)
{
  unsigned __int8 *v30;
  int v32;

  v32 = __ldxr(v30);
  if (v32 == 1)
  {
    if (!__stlxr(0, v30))
    {
LABEL_6:
      if (a30)
      {
        if (*(_DWORD *)a30 == 2)
          WTF::StringImpl::destroy(a30, a2);
        else
          *(_DWORD *)a30 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t *std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_7;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (v2)
  {
LABEL_7:
    v5 = 0;
    *(_QWORD *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  v5 = 1;
LABEL_8:
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 == v3)
  {
    *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      v7 = 0;
      result = (uint64_t *)v2;
    }
    else
    {
      v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
  }
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v12 = v7[2];
    if (*(uint64_t **)v12 != v7)
      break;
    if (!*((_BYTE *)v7 + 24))
    {
      *((_BYTE *)v7 + 24) = 1;
      *(_BYTE *)(v12 + 24) = 0;
      v18 = v7[1];
      *(_QWORD *)v12 = v18;
      if (v18)
        *(_QWORD *)(v18 + 16) = v12;
      v7[2] = *(_QWORD *)(v12 + 16);
      *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v7;
      v7[1] = v12;
      *(_QWORD *)(v12 + 16) = v7;
      if (result == (uint64_t *)v12)
        result = v7;
      v7 = *(uint64_t **)v12;
    }
    v19 = (_QWORD *)*v7;
    if (*v7 && !*((_BYTE *)v19 + 24))
      goto LABEL_68;
    v20 = (uint64_t *)v7[1];
    if (v20 && !*((_BYTE *)v20 + 24))
    {
      if (v19 && !*((_BYTE *)v19 + 24))
      {
LABEL_68:
        v20 = v7;
      }
      else
      {
        *((_BYTE *)v20 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v26 = *v20;
        v7[1] = *v20;
        if (v26)
          *(_QWORD *)(v26 + 16) = v7;
        v20[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v20;
        *v20 = (uint64_t)v7;
        v7[2] = (uint64_t)v20;
        v19 = v7;
      }
      v23 = v20[2];
      *((_BYTE *)v20 + 24) = *(_BYTE *)(v23 + 24);
      *(_BYTE *)(v23 + 24) = 1;
      *((_BYTE *)v19 + 24) = 1;
      v24 = *(uint64_t **)v23;
      v27 = *(_QWORD *)(*(_QWORD *)v23 + 8);
      *(_QWORD *)v23 = v27;
      if (v27)
        *(_QWORD *)(v27 + 16) = v23;
      v24[2] = *(_QWORD *)(v23 + 16);
      *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
      v24[1] = v23;
      goto LABEL_72;
    }
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (*((_BYTE *)v17 + 24))
      v21 = v17 == result;
    else
      v21 = 1;
    if (v21)
      goto LABEL_53;
LABEL_49:
    v7 = *(uint64_t **)(v17[2] + 8 * (*(_QWORD *)v17[2] == (_QWORD)v17));
  }
  if (!*((_BYTE *)v7 + 24))
  {
    *((_BYTE *)v7 + 24) = 1;
    *(_BYTE *)(v12 + 24) = 0;
    v13 = *(uint64_t **)(v12 + 8);
    v14 = *v13;
    *(_QWORD *)(v12 + 8) = *v13;
    if (v14)
      *(_QWORD *)(v14 + 16) = v12;
    v13[2] = *(_QWORD *)(v12 + 16);
    *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v13;
    *v13 = v12;
    *(_QWORD *)(v12 + 16) = v13;
    if (result == (uint64_t *)*v7)
      result = v7;
    v7 = *(uint64_t **)(*v7 + 8);
  }
  v15 = (_QWORD *)*v7;
  if (!*v7 || *((_BYTE *)v15 + 24))
  {
    v16 = (uint64_t *)v7[1];
    if (v16 && !*((_BYTE *)v16 + 24))
      goto LABEL_59;
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      v17 = result;
LABEL_53:
      *((_BYTE *)v17 + 24) = 1;
      return result;
    }
    if (!*((_BYTE *)v17 + 24))
      goto LABEL_53;
    goto LABEL_49;
  }
  v16 = (uint64_t *)v7[1];
  if (v16 && !*((_BYTE *)v16 + 24))
  {
LABEL_59:
    v15 = v7;
  }
  else
  {
    *((_BYTE *)v15 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v22 = v15[1];
    *v7 = v22;
    if (v22)
      *(_QWORD *)(v22 + 16) = v7;
    v15[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
    v15[1] = v7;
    v7[2] = (uint64_t)v15;
    v16 = v7;
  }
  v23 = v15[2];
  *((_BYTE *)v15 + 24) = *(_BYTE *)(v23 + 24);
  *(_BYTE *)(v23 + 24) = 1;
  *((_BYTE *)v16 + 24) = 1;
  v24 = *(uint64_t **)(v23 + 8);
  v25 = *v24;
  *(_QWORD *)(v23 + 8) = *v24;
  if (v25)
    *(_QWORD *)(v25 + 16) = v23;
  v24[2] = *(_QWORD *)(v23 + 16);
  *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
  *v24 = v23;
LABEL_72:
  *(_QWORD *)(v23 + 16) = v24;
  return result;
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [10],unsigned int,char [11],unsigned long long,char [11]>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4, unsigned int *a5, const char *a6, WTF::String **a7, const char *a8)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  NSObject *v18;
  uint64_t v19;
  void *v20;
  char *v21;
  unsigned __int8 *v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  WTF::String *v29;
  WTF::String *v30;
  WTF::Logger *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  WTF::Logger *v39;
  const char *v40;
  uint64_t v41;
  WTF::StringImpl **v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  int v50;
  uint64_t v51;
  WTF::Logger *v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  __int128 buf;
  int v72;
  WTF::StringImpl *v73;
  int v74;
  WTF::StringImpl *v75;
  int v76;
  WTF::StringImpl *v77;
  int v78;
  WTF::StringImpl *v79;
  int v80;
  _QWORD v81[3];

  v81[1] = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  WTF::String::String((WTF::String *)&v64, a4);
  WTF::String::number((WTF::String *)*a5);
  WTF::String::String((WTF::String *)&v62, a6);
  WTF::String::number(*a7);
  WTF::String::String((WTF::String *)&v60, a8);
  v58 = v64;
  v70 = v63;
  *(_QWORD *)&buf = v65;
  v68 = v61;
  v69 = v62;
  v67 = v60;
  result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v58, (uint64_t *)&v70, (uint64_t *)&v69, (uint64_t *)&v68, (uint64_t *)&v67, &v66);
  if (v66)
  {
    v12 = v60;
    v60 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = v61;
    v61 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v11);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = v62;
    v62 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v11);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = v63;
    v63 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v11);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = v64;
    v64 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v11);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = v65;
    v65 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v11);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = *(NSObject **)(a1 + 32);
    v19 = os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v19)
    {
      WTF::String::utf8();
      v21 = v58 ? (char *)v58 + 16 : 0;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v21;
      _os_log_impl(&dword_1940B8000, v18, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      v19 = (uint64_t)v58;
      v58 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 1)
          v19 = WTF::fastFree((WTF *)v19, v20);
        else
          --*(_DWORD *)v19;
      }
    }
    if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
    {
      v22 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v23 = *v22;
        if ((v23 & 1) != 0)
          break;
        v24 = __ldaxr(v22);
        if (v24 == v23)
        {
          if (!__stxr(v23 | 1, v22))
          {
            v25 = WTF::Logger::observers((WTF::Logger *)v19);
            v26 = *(unsigned int *)(v25 + 12);
            if ((_DWORD)v26)
            {
              v27 = *(uint64_t **)v25;
              v51 = *(_QWORD *)v25 + 8 * v26;
              do
              {
                v28 = *v27;
                LODWORD(buf) = 0;
                WTF::Logger::LogSiteIdentifier::toString(this);
                v72 = 0;
                WTF::String::String((WTF::String *)&v73, a4);
                v29 = (WTF::String *)*a5;
                v74 = 0;
                WTF::String::number(v29);
                v76 = 0;
                WTF::String::String((WTF::String *)&v77, a6);
                v30 = *a7;
                v78 = 0;
                WTF::String::number(v30);
                v80 = 0;
                WTF::String::String((WTF::String *)v81, a8);
                v58 = 0;
                v59 = 0;
                v31 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x60);
                LODWORD(v59) = 6;
                v58 = v31;
                v32 = HIDWORD(v59);
                *((_DWORD *)v31 + 4 * HIDWORD(v59)) = buf;
                v33 = *((_QWORD *)&buf + 1);
                if (*((_QWORD *)&buf + 1))
                  **((_DWORD **)&buf + 1) += 2;
                *((_QWORD *)v31 + 2 * v32 + 1) = v33;
                *((_DWORD *)v31 + 4 * (v32 + 1)) = v72;
                v34 = v73;
                if (v73)
                  *(_DWORD *)v73 += 2;
                *((_QWORD *)v31 + 2 * (v32 + 1) + 1) = v34;
                *((_DWORD *)v31 + 4 * (v32 + 2)) = v74;
                v35 = v75;
                if (v75)
                  *(_DWORD *)v75 += 2;
                *((_QWORD *)v31 + 2 * (v32 + 2) + 1) = v35;
                *((_DWORD *)v31 + 4 * (v32 + 3)) = v76;
                v36 = v77;
                if (v77)
                  *(_DWORD *)v77 += 2;
                *((_QWORD *)v31 + 2 * (v32 + 3) + 1) = v36;
                *((_DWORD *)v31 + 4 * (v32 + 4)) = v78;
                v37 = v79;
                if (v79)
                  *(_DWORD *)v79 += 2;
                *((_QWORD *)v31 + 2 * (v32 + 4) + 1) = v37;
                *((_DWORD *)v31 + 4 * (v32 + 5)) = v80;
                v38 = v81[0];
                if (v81[0])
                  *(_DWORD *)v81[0] += 2;
                *((_QWORD *)v31 + 2 * (v32 + 5) + 1) = v38;
                HIDWORD(v59) = v32 + 6;
                (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v28 + 16))(v28, a1, a2, &v58);
                v39 = v58;
                if (HIDWORD(v59))
                {
                  v40 = a4;
                  v41 = 16 * HIDWORD(v59);
                  v42 = (WTF::StringImpl **)((char *)v58 + 8);
                  do
                  {
                    v43 = *v42;
                    *v42 = 0;
                    if (v43)
                    {
                      if (*(_DWORD *)v43 == 2)
                        WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v20);
                      else
                        *(_DWORD *)v43 -= 2;
                    }
                    v42 += 2;
                    v41 -= 16;
                  }
                  while (v41);
                  v39 = v58;
                  a4 = v40;
                }
                if (v39)
                {
                  v58 = 0;
                  LODWORD(v59) = 0;
                  WTF::fastFree(v39, v20);
                }
                v44 = (WTF::StringImpl *)v81[0];
                v81[0] = 0;
                if (v44)
                {
                  if (*(_DWORD *)v44 == 2)
                    WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v20);
                  else
                    *(_DWORD *)v44 -= 2;
                }
                v45 = v79;
                v79 = 0;
                if (v45)
                {
                  if (*(_DWORD *)v45 == 2)
                    WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v20);
                  else
                    *(_DWORD *)v45 -= 2;
                }
                v46 = v77;
                v77 = 0;
                if (v46)
                {
                  if (*(_DWORD *)v46 == 2)
                    WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v20);
                  else
                    *(_DWORD *)v46 -= 2;
                }
                v47 = v75;
                v75 = 0;
                if (v47)
                {
                  if (*(_DWORD *)v47 == 2)
                    WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v20);
                  else
                    *(_DWORD *)v47 -= 2;
                }
                v48 = v73;
                v73 = 0;
                if (v48)
                {
                  if (*(_DWORD *)v48 == 2)
                    WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v20);
                  else
                    *(_DWORD *)v48 -= 2;
                }
                v49 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                *((_QWORD *)&buf + 1) = 0;
                if (v49)
                {
                  if (*(_DWORD *)v49 == 2)
                    WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v20);
                  else
                    *(_DWORD *)v49 -= 2;
                }
                ++v27;
              }
              while (v27 != (uint64_t *)v51);
            }
            v50 = __ldxr(v22);
            if (v50 == 1)
            {
              if (!__stlxr(0, v22))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    result = v66;
    v66 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v20);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

void sub_1947BAB0C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,WTF *a24,int a25,int a26,WTF::StringImpl *a27,WTF::StringImpl *a28,WTF::StringImpl *a29,WTF::StringImpl *a30,WTF::StringImpl *a31,uint64_t a32,WTF::StringImpl *a33)
{
  unsigned __int8 *v33;
  int v35;

  v35 = __ldxr(v33);
  if (v35 == 1)
  {
    if (!__stlxr(0, v33))
    {
LABEL_6:
      if (a33)
      {
        if (*(_DWORD *)a33 == 2)
          WTF::StringImpl::destroy(a33, a2);
        else
          *(_DWORD *)a33 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [17],unsigned long long,char [14],BOOL>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4, WTF::String **a5, const char *a6)
{
  WTF::StringImpl *v7;
  WTF::StringImpl *result;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  NSObject *v14;
  uint64_t v15;
  void *v16;
  char *v17;
  unsigned __int8 *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  WTF::String *v25;
  WTF::Logger *v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::Logger *v33;
  uint64_t v34;
  WTF::StringImpl **v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  int v42;
  uint64_t v43;
  WTF::Logger *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  __int128 buf;
  int v60;
  WTF::StringImpl *v61;
  int v62;
  WTF::StringImpl *v63;
  int v64;
  WTF::StringImpl *v65;
  int v66;
  WTF::StringImpl *v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  WTF::String::String((WTF::String *)&v53, a4);
  WTF::String::number(*a5);
  WTF::String::String((WTF::String *)&v51, a6);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v7 = (WTF::StringImpl *)buf;
  v49 = v53;
  v58 = v52;
  *(_QWORD *)&buf = v54;
  v56 = v7;
  v57 = v51;
  result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v49, (uint64_t *)&v58, (uint64_t *)&v57, (uint64_t *)&v56, &v55);
  if (v55)
  {
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v9);
      else
        *(_DWORD *)v7 -= 2;
    }
    v10 = v51;
    v51 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v9);
      else
        *(_DWORD *)v10 -= 2;
    }
    v11 = v52;
    v52 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v9);
      else
        *(_DWORD *)v11 -= 2;
    }
    v12 = v53;
    v53 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v9);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = v54;
    v54 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v9);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = *(NSObject **)(a1 + 32);
    v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v15)
    {
      WTF::String::utf8();
      v17 = v49 ? (char *)v49 + 16 : 0;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v17;
      _os_log_impl(&dword_1940B8000, v14, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      v15 = (uint64_t)v49;
      v49 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 1)
          v15 = WTF::fastFree((WTF *)v15, v16);
        else
          --*(_DWORD *)v15;
      }
    }
    if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
    {
      v18 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v19 = *v18;
        if ((v19 & 1) != 0)
          break;
        v20 = __ldaxr(v18);
        if (v20 == v19)
        {
          if (!__stxr(v19 | 1, v18))
          {
            v21 = WTF::Logger::observers((WTF::Logger *)v15);
            v22 = *(unsigned int *)(v21 + 12);
            if ((_DWORD)v22)
            {
              v23 = *(uint64_t **)v21;
              v43 = *(_QWORD *)v21 + 8 * v22;
              do
              {
                v24 = *v23;
                LODWORD(buf) = 0;
                WTF::Logger::LogSiteIdentifier::toString(this);
                v60 = 0;
                WTF::String::String((WTF::String *)&v61, a4);
                v25 = *a5;
                v62 = 0;
                WTF::String::number(v25);
                v64 = 0;
                WTF::String::String((WTF::String *)&v65, a6);
                v66 = 0;
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v67 = v58;
                v49 = 0;
                v50 = 0;
                v26 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x50);
                LODWORD(v50) = 5;
                v49 = v26;
                v27 = HIDWORD(v50);
                *((_DWORD *)v26 + 4 * HIDWORD(v50)) = buf;
                v28 = *((_QWORD *)&buf + 1);
                if (*((_QWORD *)&buf + 1))
                  **((_DWORD **)&buf + 1) += 2;
                *((_QWORD *)v26 + 2 * v27 + 1) = v28;
                *((_DWORD *)v26 + 4 * (v27 + 1)) = v60;
                v29 = v61;
                if (v61)
                  *(_DWORD *)v61 += 2;
                *((_QWORD *)v26 + 2 * (v27 + 1) + 1) = v29;
                *((_DWORD *)v26 + 4 * (v27 + 2)) = v62;
                v30 = v63;
                if (v63)
                  *(_DWORD *)v63 += 2;
                *((_QWORD *)v26 + 2 * (v27 + 2) + 1) = v30;
                *((_DWORD *)v26 + 4 * (v27 + 3)) = v64;
                v31 = v65;
                if (v65)
                  *(_DWORD *)v65 += 2;
                *((_QWORD *)v26 + 2 * (v27 + 3) + 1) = v31;
                *((_DWORD *)v26 + 4 * (v27 + 4)) = v66;
                v32 = v67;
                if (v67)
                  *(_DWORD *)v67 += 2;
                *((_QWORD *)v26 + 2 * (v27 + 4) + 1) = v32;
                HIDWORD(v50) = v27 + 5;
                (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v24 + 16))(v24, a1, a2, &v49);
                v33 = v49;
                if (HIDWORD(v50))
                {
                  v34 = 16 * HIDWORD(v50);
                  v35 = (WTF::StringImpl **)((char *)v49 + 8);
                  do
                  {
                    v36 = *v35;
                    *v35 = 0;
                    if (v36)
                    {
                      if (*(_DWORD *)v36 == 2)
                        WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v16);
                      else
                        *(_DWORD *)v36 -= 2;
                    }
                    v35 += 2;
                    v34 -= 16;
                  }
                  while (v34);
                  v33 = v49;
                }
                if (v33)
                {
                  v49 = 0;
                  LODWORD(v50) = 0;
                  WTF::fastFree(v33, v16);
                }
                v37 = v67;
                v67 = 0;
                if (v37)
                {
                  if (*(_DWORD *)v37 == 2)
                    WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v16);
                  else
                    *(_DWORD *)v37 -= 2;
                }
                v38 = v65;
                v65 = 0;
                if (v38)
                {
                  if (*(_DWORD *)v38 == 2)
                    WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v16);
                  else
                    *(_DWORD *)v38 -= 2;
                }
                v39 = v63;
                v63 = 0;
                if (v39)
                {
                  if (*(_DWORD *)v39 == 2)
                    WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v16);
                  else
                    *(_DWORD *)v39 -= 2;
                }
                v40 = v61;
                v61 = 0;
                if (v40)
                {
                  if (*(_DWORD *)v40 == 2)
                    WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v16);
                  else
                    *(_DWORD *)v40 -= 2;
                }
                v41 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                *((_QWORD *)&buf + 1) = 0;
                if (v41)
                {
                  if (*(_DWORD *)v41 == 2)
                    WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v16);
                  else
                    *(_DWORD *)v41 -= 2;
                }
                ++v23;
              }
              while (v23 != (uint64_t *)v43);
            }
            v42 = __ldxr(v18);
            if (v42 == 1)
            {
              if (!__stlxr(0, v18))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    result = v55;
    v55 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v16);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

void sub_1947BB478(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,WTF *a21,int a22,int a23,WTF::StringImpl *a24,WTF::StringImpl *a25,WTF::StringImpl *a26,uint64_t a27,WTF::StringImpl *a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,WTF::StringImpl *a33,uint64_t a34,WTF::StringImpl *a35,uint64_t a36,WTF::StringImpl *a37,uint64_t a38,WTF::StringImpl *a39,uint64_t a40,WTF::StringImpl *a41)
{
  unsigned __int8 *v41;
  int v43;

  v43 = __ldxr(v41);
  if (v43 == 1)
  {
    if (!__stlxr(0, v41))
    {
LABEL_6:
      if (a28)
      {
        if (*(_DWORD *)a28 == 2)
          WTF::StringImpl::destroy(a28, a2);
        else
          *(_DWORD *)a28 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateWebM::trackDidChangeSelected(WebCore::VideoTrackPrivate &,BOOL)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = a1[1];
  *a1 = &off_1E32070A8;
  a1[1] = 0;
  if (!v3)
    return a1;
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return a1;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateWebM::trackDidChangeSelected(WebCore::VideoTrackPrivate &,BOOL)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E32070A8;
  *((_QWORD *)this + 1) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return WTF::fastFree(this, a2);
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateWebM::trackDidChangeSelected(WebCore::VideoTrackPrivate &,BOOL)::$_0,void>::call(unsigned __int8 *result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  _QWORD *v3;
  uint64_t v4;
  int v6;

  v1 = *((_QWORD *)result + 1);
  if (!v1)
    return result;
  v2 = result;
  v4 = *((_QWORD *)result + 2);
  v3 = (_QWORD *)*((_QWORD *)result + 3);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
LABEL_5:
    result = (unsigned __int8 *)MEMORY[0x19AEA534C](v1);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v1))
    goto LABEL_5;
LABEL_6:
  if (*(_QWORD *)(v1 + 24))
    ++*(_QWORD *)(v1 + 8);
  else
    v4 = 0;
  v6 = __ldxr((unsigned __int8 *)v1);
  if (v6 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v1))
    {
      if (!v4)
        return result;
      goto LABEL_12;
    }
  }
  else
  {
    __clrex();
  }
  result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
  if (v4)
  {
LABEL_12:
    WebCore::MediaPlayerPrivateWebM::didBecomeReadyForMoreSamples(v3, *((WTF::String **)v2 + 4));
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WebMResourceClientParent,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v4 + 56));
  }
  return result;
}

void sub_1947BB978(_Unwind_Exception *a1)
{
  uint64_t v1;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WebMResourceClientParent,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v1 + 56));
  _Unwind_Resume(a1);
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [17],unsigned long long,char [13],BOOL>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4, WTF::String **a5, const char *a6)
{
  WTF::StringImpl *v7;
  WTF::StringImpl *result;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  NSObject *v14;
  uint64_t v15;
  void *v16;
  char *v17;
  unsigned __int8 *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  WTF::String *v25;
  WTF::Logger *v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::Logger *v33;
  uint64_t v34;
  WTF::StringImpl **v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  int v42;
  uint64_t v43;
  WTF::Logger *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  __int128 buf;
  int v60;
  WTF::StringImpl *v61;
  int v62;
  WTF::StringImpl *v63;
  int v64;
  WTF::StringImpl *v65;
  int v66;
  WTF::StringImpl *v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  WTF::String::String((WTF::String *)&v53, a4);
  WTF::String::number(*a5);
  WTF::String::String((WTF::String *)&v51, a6);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v7 = (WTF::StringImpl *)buf;
  v49 = v53;
  v58 = v52;
  *(_QWORD *)&buf = v54;
  v56 = v7;
  v57 = v51;
  result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v49, (uint64_t *)&v58, (uint64_t *)&v57, (uint64_t *)&v56, &v55);
  if (v55)
  {
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v9);
      else
        *(_DWORD *)v7 -= 2;
    }
    v10 = v51;
    v51 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v9);
      else
        *(_DWORD *)v10 -= 2;
    }
    v11 = v52;
    v52 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v9);
      else
        *(_DWORD *)v11 -= 2;
    }
    v12 = v53;
    v53 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v9);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = v54;
    v54 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v9);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = *(NSObject **)(a1 + 32);
    v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v15)
    {
      WTF::String::utf8();
      v17 = v49 ? (char *)v49 + 16 : 0;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v17;
      _os_log_impl(&dword_1940B8000, v14, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      v15 = (uint64_t)v49;
      v49 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 1)
          v15 = WTF::fastFree((WTF *)v15, v16);
        else
          --*(_DWORD *)v15;
      }
    }
    if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
    {
      v18 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v19 = *v18;
        if ((v19 & 1) != 0)
          break;
        v20 = __ldaxr(v18);
        if (v20 == v19)
        {
          if (!__stxr(v19 | 1, v18))
          {
            v21 = WTF::Logger::observers((WTF::Logger *)v15);
            v22 = *(unsigned int *)(v21 + 12);
            if ((_DWORD)v22)
            {
              v23 = *(uint64_t **)v21;
              v43 = *(_QWORD *)v21 + 8 * v22;
              do
              {
                v24 = *v23;
                LODWORD(buf) = 0;
                WTF::Logger::LogSiteIdentifier::toString(this);
                v60 = 0;
                WTF::String::String((WTF::String *)&v61, a4);
                v25 = *a5;
                v62 = 0;
                WTF::String::number(v25);
                v64 = 0;
                WTF::String::String((WTF::String *)&v65, a6);
                v66 = 0;
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v67 = v58;
                v49 = 0;
                v50 = 0;
                v26 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x50);
                LODWORD(v50) = 5;
                v49 = v26;
                v27 = HIDWORD(v50);
                *((_DWORD *)v26 + 4 * HIDWORD(v50)) = buf;
                v28 = *((_QWORD *)&buf + 1);
                if (*((_QWORD *)&buf + 1))
                  **((_DWORD **)&buf + 1) += 2;
                *((_QWORD *)v26 + 2 * v27 + 1) = v28;
                *((_DWORD *)v26 + 4 * (v27 + 1)) = v60;
                v29 = v61;
                if (v61)
                  *(_DWORD *)v61 += 2;
                *((_QWORD *)v26 + 2 * (v27 + 1) + 1) = v29;
                *((_DWORD *)v26 + 4 * (v27 + 2)) = v62;
                v30 = v63;
                if (v63)
                  *(_DWORD *)v63 += 2;
                *((_QWORD *)v26 + 2 * (v27 + 2) + 1) = v30;
                *((_DWORD *)v26 + 4 * (v27 + 3)) = v64;
                v31 = v65;
                if (v65)
                  *(_DWORD *)v65 += 2;
                *((_QWORD *)v26 + 2 * (v27 + 3) + 1) = v31;
                *((_DWORD *)v26 + 4 * (v27 + 4)) = v66;
                v32 = v67;
                if (v67)
                  *(_DWORD *)v67 += 2;
                *((_QWORD *)v26 + 2 * (v27 + 4) + 1) = v32;
                HIDWORD(v50) = v27 + 5;
                (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v24 + 16))(v24, a1, a2, &v49);
                v33 = v49;
                if (HIDWORD(v50))
                {
                  v34 = 16 * HIDWORD(v50);
                  v35 = (WTF::StringImpl **)((char *)v49 + 8);
                  do
                  {
                    v36 = *v35;
                    *v35 = 0;
                    if (v36)
                    {
                      if (*(_DWORD *)v36 == 2)
                        WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v16);
                      else
                        *(_DWORD *)v36 -= 2;
                    }
                    v35 += 2;
                    v34 -= 16;
                  }
                  while (v34);
                  v33 = v49;
                }
                if (v33)
                {
                  v49 = 0;
                  LODWORD(v50) = 0;
                  WTF::fastFree(v33, v16);
                }
                v37 = v67;
                v67 = 0;
                if (v37)
                {
                  if (*(_DWORD *)v37 == 2)
                    WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v16);
                  else
                    *(_DWORD *)v37 -= 2;
                }
                v38 = v65;
                v65 = 0;
                if (v38)
                {
                  if (*(_DWORD *)v38 == 2)
                    WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v16);
                  else
                    *(_DWORD *)v38 -= 2;
                }
                v39 = v63;
                v63 = 0;
                if (v39)
                {
                  if (*(_DWORD *)v39 == 2)
                    WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v16);
                  else
                    *(_DWORD *)v39 -= 2;
                }
                v40 = v61;
                v61 = 0;
                if (v40)
                {
                  if (*(_DWORD *)v40 == 2)
                    WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v16);
                  else
                    *(_DWORD *)v40 -= 2;
                }
                v41 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                *((_QWORD *)&buf + 1) = 0;
                if (v41)
                {
                  if (*(_DWORD *)v41 == 2)
                    WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v16);
                  else
                    *(_DWORD *)v41 -= 2;
                }
                ++v23;
              }
              while (v23 != (uint64_t *)v43);
            }
            v42 = __ldxr(v18);
            if (v42 == 1)
            {
              if (!__stlxr(0, v18))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    result = v55;
    v55 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v16);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

void sub_1947BBFF0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,WTF *a21,int a22,int a23,WTF::StringImpl *a24,WTF::StringImpl *a25,WTF::StringImpl *a26,uint64_t a27,WTF::StringImpl *a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,WTF::StringImpl *a33,uint64_t a34,WTF::StringImpl *a35,uint64_t a36,WTF::StringImpl *a37,uint64_t a38,WTF::StringImpl *a39,uint64_t a40,WTF::StringImpl *a41)
{
  unsigned __int8 *v41;
  int v43;

  v43 = __ldxr(v41);
  if (v43 == 1)
  {
    if (!__stlxr(0, v41))
    {
LABEL_6:
      if (a28)
      {
        if (*(_DWORD *)a28 == 2)
          WTF::StringImpl::destroy(a28, a2);
        else
          *(_DWORD *)a28 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateWebM::didParseInitializationData(WebCore::SourceBufferPrivateClient::InitializationSegment &&)::$_0,void,WebCore::VideoTrackPrivate &,BOOL>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = a1[1];
  *a1 = &off_1E32070D0;
  a1[1] = 0;
  if (!v3)
    return a1;
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return a1;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateWebM::didParseInitializationData(WebCore::SourceBufferPrivateClient::InitializationSegment &&)::$_0,void,WebCore::VideoTrackPrivate &,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E32070D0;
  *((_QWORD *)this + 1) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return WTF::fastFree(this, a2);
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateWebM::didParseInitializationData(WebCore::SourceBufferPrivateClient::InitializationSegment &&)::$_0,void,WebCore::VideoTrackPrivate &,BOOL>::call(unsigned __int8 *result, unsigned int *a2, int a3)
{
  uint64_t v3;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  int v10;
  uint64_t v11;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  WTF::String *v26;
  int8x8_t v27;
  uint8x8_t v28;
  unint64_t v29;
  int v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  dispatch_source_s *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  int v46;
  WTF::String *v47;
  _QWORD *v48;
  uint64_t v49;
  unsigned int v50;
  _QWORD v51[4];
  WTF::String *v52;
  unsigned __int8 v53;

  v3 = *((_QWORD *)result + 1);
  if (!v3)
    return result;
  v6 = result;
  v8 = *((_QWORD *)result + 2);
  v7 = *((_QWORD *)result + 3);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  result = (unsigned __int8 *)MEMORY[0x19AEA534C](v3);
LABEL_6:
  if (*(_QWORD *)(v3 + 24))
    ++*(_QWORD *)(v3 + 8);
  else
    v8 = 0;
  v10 = __ldxr((unsigned __int8 *)v3);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v8)
        return result;
      goto LABEL_12;
    }
  }
  else
  {
    __clrex();
  }
  result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v8)
    return result;
LABEL_12:
  v11 = *((_QWORD *)v6 + 1);
  if (!v11)
  {
    v16 = a2 + 2;
    do
      v50 = __ldaxr(v16);
    while (__stlxr(v50 + 1, v16));
    v13 = 0;
    goto LABEL_30;
  }
  if (__ldaxr((unsigned __int8 *)v11))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v11))
  {
    goto LABEL_20;
  }
  MEMORY[0x19AEA534C](v11);
LABEL_20:
  if (*(_QWORD *)(v11 + 24))
  {
    ++*(_QWORD *)(v11 + 16);
    v13 = v11;
  }
  else
  {
    v13 = 0;
  }
  v14 = __ldxr((unsigned __int8 *)v11);
  if (v14 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v11))
      goto LABEL_27;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v11);
LABEL_27:
  v15 = *((_QWORD *)v6 + 2);
  v16 = a2 + 2;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 + 1, v16));
  if (*(_BYTE *)(v7 + 625) || !v13)
    goto LABEL_30;
  if (__ldaxr((unsigned __int8 *)v13))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v13))
  {
    goto LABEL_51;
  }
  MEMORY[0x19AEA534C](v13);
LABEL_51:
  if (*(_QWORD *)(v13 + 24))
    ++*(_QWORD *)(v13 + 8);
  else
    v15 = 0;
  v25 = __ldxr((unsigned __int8 *)v13);
  if (v25 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v13))
      goto LABEL_59;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v13);
LABEL_59:
  if (!v15)
    goto LABEL_30;
  v53 = a3;
  v26 = (WTF::String *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)a2 + 48))(a2);
  v52 = v26;
  v27 = *(int8x8_t *)(v7 + 208);
  if (!*(_QWORD *)&v27)
    goto LABEL_115;
  v28 = (uint8x8_t)vcnt_s8(v27);
  v28.i16[0] = vaddlv_u8(v28);
  if (v28.u32[0] > 1uLL)
  {
    v29 = (unint64_t)v26;
    if ((unint64_t)v26 >= *(_QWORD *)&v27)
      v29 = (unint64_t)v26 % *(_QWORD *)&v27;
  }
  else
  {
    v29 = (*(_QWORD *)&v27 - 1) & (unint64_t)v26;
  }
  v31 = *(_QWORD **)(*(_QWORD *)(v7 + 200) + 8 * v29);
  if (!v31)
    goto LABEL_115;
  v32 = (_QWORD *)*v31;
  if (!v32)
    goto LABEL_115;
  if (v28.u32[0] < 2uLL)
  {
    v33 = *(_QWORD *)&v27 - 1;
    do
    {
      v34 = v32[1];
      if (v26 == (WTF::String *)v34)
      {
        if ((WTF::String *)v32[2] == v26)
          goto LABEL_88;
      }
      else if ((v34 & v33) != v29)
      {
        goto LABEL_115;
      }
      v32 = (_QWORD *)*v32;
    }
    while (v32);
    goto LABEL_115;
  }
  while (1)
  {
    v35 = v32[1];
    if (v26 == (WTF::String *)v35)
      break;
    if (v35 >= *(_QWORD *)&v27)
      v35 %= *(_QWORD *)&v27;
    if (v35 != v29)
      goto LABEL_115;
LABEL_84:
    v32 = (_QWORD *)*v32;
    if (!v32)
      goto LABEL_115;
  }
  if ((WTF::String *)v32[2] != v26)
    goto LABEL_84;
LABEL_88:
  v36 = *(_QWORD *)(v7 + 368);
  v37 = *(_QWORD *)(v7 + 376);
  v51[0] = "MediaPlayerPrivateWebM";
  v51[1] = 23;
  v51[2] = "trackDidChangeSelected";
  v51[3] = v37;
  if (*(_BYTE *)(v36 + 12))
  {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [17],unsigned long long,char [14],BOOL>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v51, "video trackID = ", &v52, ", selected = ");
    a3 = v53;
  }
  if (a3)
  {
    *(_QWORD *)(v7 + 592) = v52;
    *(_BYTE *)(v7 + 600) = 1;
    if (WebCore::MediaPlayerPrivateWebM::shouldEnsureLayerOrVideoRenderer((WebCore::MediaPlayerPrivateWebM *)v7))
    {
      WebCore::MediaPlayerPrivateWebM::destroyDecompressionSession((WebCore::MediaPlayerPrivateWebM *)v7, v38, v39);
      WebCore::MediaPlayerPrivateWebM::ensureLayerOrVideoRenderer((PAL *)v7);
    }
    else
    {
      WebCore::MediaPlayerPrivateWebM::destroyLayerOrVideoRenderer((WebCore::MediaPlayerPrivateWebM *)v7);
      WebCore::MediaPlayerPrivateWebM::ensureDecompressionSession((WebCore::MediaPlayerPrivateWebM *)v7);
    }
    v42 = *(_QWORD *)(v7 + 152);
    if (v42)
    {
      v43 = *(_QWORD *)(v7 + 56);
      if (v43)
      {
        if (__ldaxr((unsigned __int8 *)v43))
        {
          __clrex();
          goto LABEL_104;
        }
        if (__stxr(1u, (unsigned __int8 *)v43))
LABEL_104:
          MEMORY[0x19AEA534C](v43);
        if (*(_QWORD *)(v43 + 24))
        {
          ++*(_QWORD *)(v43 + 16);
          v45 = v43;
        }
        else
        {
          v45 = 0;
        }
        v46 = __ldxr((unsigned __int8 *)v43);
        if (v46 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v43))
            goto LABEL_112;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v43);
      }
      else
      {
        v45 = 0;
      }
LABEL_112:
      v47 = v52;
      v48 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
      *v48 = &off_1E32070A8;
      v48[1] = v45;
      v48[2] = v7;
      v48[3] = v7;
      v48[4] = v47;
      v51[0] = v48;
      WebCore::WebCoreDecompressionSession::requestMediaDataWhenReady(v42, (opaqueCMBufferQueue *)v51);
      v49 = v51[0];
      v51[0] = 0;
      if (v49)
        (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
    }
    WebCore::MediaPlayerPrivateWebM::reenqueSamples((int8x8_t *)v7, (unint64_t)v52);
  }
  else if (*(_BYTE *)(v7 + 600))
  {
    if (*(WTF::String **)(v7 + 592) == v52)
    {
      *(_BYTE *)(v7 + 600) = 0;
      v40 = *(_QWORD *)(v7 + 152);
      if (v40)
      {
        v41 = *(_QWORD *)(v40 + 64);
        *(_QWORD *)(v40 + 64) = 0;
        if (v41)
          (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
      }
    }
  }
LABEL_115:
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WebMResourceClientParent,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v15 + 56));
  do
  {
LABEL_30:
    v18 = __ldaxr(v16);
    v19 = v18 - 1;
  }
  while (__stlxr(v19, v16));
  if (!v19)
  {
    atomic_store(1u, a2 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)a2 + 8))(a2);
    if (!v13)
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WebMResourceClientParent,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v8 + 56));
LABEL_33:
    if (__ldaxr((unsigned __int8 *)v13))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v13))
    {
      goto LABEL_40;
    }
    MEMORY[0x19AEA534C](v13);
LABEL_40:
    v22 = *(_QWORD *)(v13 + 16) - 1;
    *(_QWORD *)(v13 + 16) = v22;
    if (v22)
    {
      v30 = __ldxr((unsigned __int8 *)v13);
      if (v30 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v13))
          return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WebMResourceClientParent,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v8 + 56));
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v13);
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WebMResourceClientParent,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v8 + 56));
    }
    v23 = *(_QWORD *)(v13 + 8);
    v24 = __ldxr((unsigned __int8 *)v13);
    if (v24 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v13))
      {
        if (v23)
          return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WebMResourceClientParent,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v8 + 56));
LABEL_47:
        WTF::fastFree((WTF *)v13, a2);
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WebMResourceClientParent,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v8 + 56));
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v13);
    if (v23)
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WebMResourceClientParent,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v8 + 56));
    goto LABEL_47;
  }
  if (v13)
    goto LABEL_33;
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WebMResourceClientParent,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v8 + 56));
}

void sub_1947BC9AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  void *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;

  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WebMResourceClientParent,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v13 + 56));
  do
  {
    v16 = __ldaxr(v12);
    v17 = v16 - 1;
  }
  while (__stlxr(v17, v12));
  if (!v17)
  {
    atomic_store(1u, v10 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 8))(v10);
  }
  if (__ldaxr((unsigned __int8 *)v9))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v9))
  {
LABEL_12:
    v19 = *(_QWORD *)(v9 + 16) - 1;
    *(_QWORD *)(v9 + 16) = v19;
    if (v19)
    {
      v22 = __ldxr((unsigned __int8 *)v9);
      if (v22 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v9))
          goto LABEL_25;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v9);
      goto LABEL_25;
    }
    v20 = *(_QWORD *)(v9 + 8);
    v21 = __ldxr((unsigned __int8 *)v9);
    if (v21 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v9))
      {
LABEL_18:
        if (!v20)
          WTF::fastFree((WTF *)v9, v15);
LABEL_25:
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WebMResourceClientParent,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v11 + 56));
        _Unwind_Resume(a1);
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v9);
    goto LABEL_18;
  }
  MEMORY[0x19AEA534C](v9);
  goto LABEL_12;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateWebM::didParseInitializationData(WebCore::SourceBufferPrivateClient::InitializationSegment &&)::$_1,void,WebCore::AudioTrackPrivate &,BOOL>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = a1[1];
  *a1 = &off_1E32070F8;
  a1[1] = 0;
  if (!v3)
    return a1;
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return a1;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateWebM::didParseInitializationData(WebCore::SourceBufferPrivateClient::InitializationSegment &&)::$_1,void,WebCore::AudioTrackPrivate &,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E32070F8;
  *((_QWORD *)this + 1) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return WTF::fastFree(this, a2);
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebCore::MediaPlayerPrivateWebM::didParseInitializationData(WebCore::SourceBufferPrivateClient::InitializationSegment &&)::$_1,void,WebCore::AudioTrackPrivate &,BOOL>::call(unsigned __int8 *result, unsigned int *a2, int a3)
{
  uint64_t v3;
  unsigned __int8 *v6;
  int8x8_t *v7;
  uint64_t v8;
  int v10;
  uint64_t v11;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  WTF::String *v26;
  unint64_t v27;
  int8x8_t v28;
  uint8x8_t v29;
  unint64_t v30;
  int v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  int8x8_t v37;
  void *v38;
  int8x8_t v39;
  uint8x8_t v40;
  unint64_t v41;
  int8x8_t v42;
  uint8x8_t v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  void *v50;
  int8x8_t v51;
  int8x8_t v52;
  int8x8_t v54;
  void *v55;
  int v56;
  double v57;
  PAL *v58;
  uint64_t AVFoundation_AVAudioTimePitchAlgorithmSpectral;
  uint64_t ***v60;
  uint64_t **v61;
  uint64_t v62;
  uint64_t *v63;
  unint64_t v64;
  int8x8_t v65;
  int8x8_t v66;
  unsigned int v68;
  int v69;
  uint64_t v70;
  void *v71;
  unsigned int *v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  void *v76;
  unsigned int v77;
  void *v78;
  unsigned int *v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t *v84;
  PAL *v85;
  OpaqueCMTimebase *v86;
  void *v87;
  void *v88;
  int8x8_t v89;
  uint8x8_t v90;
  unint64_t v91;
  int8x8_t v92;
  WTF **v93;
  WTF *v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  WTF *v98;
  int8x8_t *v99;
  int8x8_t v100;
  unint64_t v101;
  int8x8_t v102;
  unint64_t v103;
  const void *v104;
  WTF::String *v105;
  unsigned __int8 v106;
  __int128 v107;
  const char *v108;
  void *v109;
  int8x8_t *v110;
  WTF *v111;
  unint64_t v112;
  CFTypeRef cf;
  unint64_t v114;
  const void **p_cf;
  __int128 v116;
  const char *v117;

  v3 = *((_QWORD *)result + 1);
  if (!v3)
    return result;
  v6 = result;
  v8 = *((_QWORD *)result + 2);
  v7 = (int8x8_t *)*((_QWORD *)result + 3);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  result = (unsigned __int8 *)MEMORY[0x19AEA534C](v3);
LABEL_6:
  if (*(_QWORD *)(v3 + 24))
    ++*(_QWORD *)(v3 + 8);
  else
    v8 = 0;
  v10 = __ldxr((unsigned __int8 *)v3);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v8)
        return result;
      goto LABEL_12;
    }
  }
  else
  {
    __clrex();
  }
  result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v8)
    return result;
LABEL_12:
  v11 = *((_QWORD *)v6 + 1);
  if (!v11)
  {
    v16 = a2 + 2;
    do
      v68 = __ldaxr(v16);
    while (__stlxr(v68 + 1, v16));
    v13 = 0;
    goto LABEL_30;
  }
  if (__ldaxr((unsigned __int8 *)v11))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v11))
  {
    goto LABEL_20;
  }
  MEMORY[0x19AEA534C](v11);
LABEL_20:
  if (*(_QWORD *)(v11 + 24))
  {
    ++*(_QWORD *)(v11 + 16);
    v13 = v11;
  }
  else
  {
    v13 = 0;
  }
  v14 = __ldxr((unsigned __int8 *)v11);
  if (v14 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v11))
      goto LABEL_27;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v11);
LABEL_27:
  v15 = *((_QWORD *)v6 + 2);
  v16 = a2 + 2;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 + 1, v16));
  if (v7[78].i8[1] || !v13)
    goto LABEL_30;
  if (__ldaxr((unsigned __int8 *)v13))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v13))
  {
    goto LABEL_51;
  }
  MEMORY[0x19AEA534C](v13);
LABEL_51:
  if (*(_QWORD *)(v13 + 24))
    ++*(_QWORD *)(v13 + 8);
  else
    v15 = 0;
  v25 = __ldxr((unsigned __int8 *)v13);
  if (v25 != 1)
  {
    __clrex();
    goto LABEL_58;
  }
  if (__stlxr(0, (unsigned __int8 *)v13))
LABEL_58:
    WTF::Lock::unlockSlow((WTF::Lock *)v13);
  if (!v15)
    goto LABEL_30;
  v106 = a3;
  v26 = (WTF::String *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)a2 + 48))(a2);
  v27 = (unint64_t)v26;
  v105 = v26;
  v28 = v7[26];
  if (!*(_QWORD *)&v28)
    goto LABEL_198;
  v29 = (uint8x8_t)vcnt_s8(v28);
  v29.i16[0] = vaddlv_u8(v29);
  if (v29.u32[0] > 1uLL)
  {
    v30 = (unint64_t)v26;
    if ((unint64_t)v26 >= *(_QWORD *)&v28)
      v30 = (unint64_t)v26 % *(_QWORD *)&v28;
  }
  else
  {
    v30 = (*(_QWORD *)&v28 - 1) & (unint64_t)v26;
  }
  v32 = *(_QWORD **)(*(_QWORD *)&v7[25] + 8 * v30);
  if (!v32)
    goto LABEL_198;
  v33 = (_QWORD *)*v32;
  if (!v33)
    goto LABEL_198;
  if (v29.u32[0] < 2uLL)
  {
    v34 = *(_QWORD *)&v28 - 1;
    while (1)
    {
      v35 = v33[1];
      if (v26 == (WTF::String *)v35)
      {
        if ((WTF::String *)v33[2] == v26)
          goto LABEL_88;
      }
      else if ((v35 & v34) != v30)
      {
        goto LABEL_198;
      }
      v33 = (_QWORD *)*v33;
      if (!v33)
        goto LABEL_198;
    }
  }
  while (1)
  {
    v36 = v33[1];
    if (v26 == (WTF::String *)v36)
      break;
    if (v36 >= *(_QWORD *)&v28)
      v36 %= *(_QWORD *)&v28;
    if (v36 != v30)
      goto LABEL_198;
LABEL_84:
    v33 = (_QWORD *)*v33;
    if (!v33)
      goto LABEL_198;
  }
  if ((WTF::String *)v33[2] != v26)
    goto LABEL_84;
LABEL_88:
  v37 = v7[46];
  v38 = (void *)v7[47];
  *(_QWORD *)&v107 = "MediaPlayerPrivateWebM";
  *((_QWORD *)&v107 + 1) = 23;
  v108 = "trackDidChangeEnabled";
  v109 = v38;
  if (*(_BYTE *)(*(_QWORD *)&v37 + 12))
  {
    v26 = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [17],unsigned long long,char [13],BOOL>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v107, "audio trackID = ", &v105, ", enabled = ");
    a3 = v106;
    v27 = (unint64_t)v105;
  }
  if (a3)
  {
    v114 = v27;
    v39 = v7[37];
    if (v39)
    {
      v40 = (uint8x8_t)vcnt_s8(v39);
      v40.i16[0] = vaddlv_u8(v40);
      if (v40.u32[0] > 1uLL)
      {
        v41 = v27;
        if (*(_QWORD *)&v39 <= v27)
          v41 = v27 % *(_QWORD *)&v39;
      }
      else
      {
        v41 = (*(_QWORD *)&v39 - 1) & v27;
      }
      v45 = *(_QWORD **)(*(_QWORD *)&v7[36] + 8 * v41);
      if (v45)
      {
        v46 = (_QWORD *)*v45;
        if (v46)
        {
          if (v40.u32[0] >= 2uLL)
          {
            while (1)
            {
              v49 = v46[1];
              if (v49 == v27)
              {
                if (v46[2] == v27)
                  goto LABEL_197;
              }
              else
              {
                if (v49 >= *(_QWORD *)&v39)
                  v49 %= *(_QWORD *)&v39;
                if (v49 != v41)
                  goto LABEL_116;
              }
              v46 = (_QWORD *)*v46;
              if (!v46)
                goto LABEL_116;
            }
          }
          v47 = *(_QWORD *)&v39 - 1;
          do
          {
            v48 = v46[1];
            if (v48 == v27)
            {
              if (v46[2] == v27)
                goto LABEL_197;
            }
            else if ((v48 & v47) != v41)
            {
              break;
            }
            v46 = (_QWORD *)*v46;
          }
          while (v46);
        }
      }
    }
LABEL_116:
    v50 = (void *)objc_msgSend(objc_alloc((Class)PAL::getAVSampleBufferAudioRendererClass(v26)), "init");
    cf = v50;
    if (v50)
    {
      v51 = v7[12];
      if (!*(_QWORD *)&v51)
      {
        cf = 0;
        goto LABEL_195;
      }
      v52 = v7[13];
      if (__ldaxr(*(unsigned __int8 **)&v51))
      {
        __clrex();
        goto LABEL_124;
      }
      if (__stxr(1u, *(unsigned __int8 **)&v51))
LABEL_124:
        MEMORY[0x19AEA534C](*(_QWORD *)&v51);
      if (*(_QWORD *)(*(_QWORD *)&v51 + 24))
        ++*(_QWORD *)(*(_QWORD *)&v51 + 8);
      else
        v52 = 0;
      v56 = __ldxr(*(unsigned __int8 **)&v51);
      if (v56 == 1)
      {
        if (!__stlxr(0, *(unsigned __int8 **)&v51))
        {
LABEL_133:
          v50 = (void *)cf;
          if (v52)
          {
            objc_msgSend((id)cf, "setMuted:", *(unsigned __int8 *)(*(_QWORD *)&v52 + 227));
            v57 = *(double *)(*(_QWORD *)&v52 + 216);
            *(float *)&v57 = v57;
            v58 = (PAL *)objc_msgSend(v50, "setVolume:", v57);
            if (*(_BYTE *)(*(_QWORD *)&v52 + 228))
              AVFoundation_AVAudioTimePitchAlgorithmSpectral = PAL::get_AVFoundation_AVAudioTimePitchAlgorithmSpectral(v58);
            else
              AVFoundation_AVAudioTimePitchAlgorithmSpectral = PAL::get_AVFoundation_AVAudioTimePitchAlgorithmVarispeed(v58);
            objc_msgSend(v50, "setAudioTimePitchAlgorithm:", AVFoundation_AVAudioTimePitchAlgorithmSpectral);
            objc_msgSend(*(id *)&v7[14], "addRenderer:", v50);
            v65 = v7[12];
            if (v65)
            {
              v66 = v7[13];
              if (__ldaxr(*(unsigned __int8 **)&v65))
              {
                __clrex();
                goto LABEL_166;
              }
              if (__stxr(1u, *(unsigned __int8 **)&v65))
LABEL_166:
                MEMORY[0x19AEA534C](*(_QWORD *)&v65);
              if (*(_QWORD *)(*(_QWORD *)&v65 + 24))
                ++*(_QWORD *)(*(_QWORD *)&v65 + 8);
              else
                v66 = 0;
              v69 = __ldxr(*(unsigned __int8 **)&v65);
              if (v69 == 1)
              {
                if (!__stlxr(0, *(unsigned __int8 **)&v65))
                  goto LABEL_175;
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow(*(WTF::Lock **)&v65);
LABEL_175:
              if (v66)
              {
                (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)&v66 + 8) + 8) + 128))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)&v66 + 8) + 8));
                WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(**(unsigned __int8 ***)&v66);
              }
            }
            v70 = (uint64_t)v7[9];
            if (v70)
              goto LABEL_260;
            v70 = WTF::fastCompactMalloc((WTF *)0x10);
            *(_DWORD *)v70 = 1;
            *(_QWORD *)(v70 + 8) = v7 + 8;
            v72 = (unsigned int *)v7[9];
            v7[9] = (int8x8_t)v70;
            if (!v72)
              goto LABEL_260;
            do
            {
              v73 = __ldaxr(v72);
              v74 = v73 - 1;
            }
            while (__stlxr(v74, v72));
            if (!v74)
            {
              atomic_store(1u, v72);
              WTF::fastFree((WTF *)v72, v71);
            }
            v70 = (uint64_t)v7[9];
            if (v70)
            {
LABEL_260:
              do
                v75 = __ldaxr((unsigned int *)v70);
              while (__stlxr(v75 + 1, (unsigned int *)v70));
            }
            v76 = (void *)cf;
            *(_QWORD *)&v107 = MEMORY[0x1E0C809B0];
            *((_QWORD *)&v107 + 1) = 3321888768;
            v108 = (const char *)___ZN7WebCore22MediaPlayerPrivateWebM16addAudioRendererEy_block_invoke;
            v109 = &__block_descriptor_56_e8_40c101_ZTSN3WTF7WeakPtrIN7WebCore22MediaPlayerPrivateWebMENS_18DefaultWeakPtrImplENS_12RawPtrTraitsIS3_EEEE_e5_v8__0l;
            v110 = v7;
            if (v70)
            {
              do
                v77 = __ldaxr((unsigned int *)v70);
              while (__stlxr(v77 + 1, (unsigned int *)v70));
            }
            v111 = (WTF *)v70;
            v112 = v114;
            objc_msgSend(v76, "requestMediaDataWhenReadyOnQueue:usingBlock:", MEMORY[0x1E0C80D38], &v107);
            *(_QWORD *)&v116 = &v114;
            p_cf = &cf;
            std::__hash_table<std::__hash_value_type<unsigned long long,WTF::RetainPtr<AVSampleBufferAudioRenderer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,WTF::RetainPtr<AVSampleBufferAudioRenderer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,WTF::RetainPtr<AVSampleBufferAudioRenderer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned long long,WTF::RetainPtr<AVSampleBufferAudioRenderer>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<WTF::RetainPtr<AVSampleBufferAudioRenderer>&>>((uint64_t)&v7[36], &v114, (uint64_t)&std::piecewise_construct, (_QWORD **)&v116, &p_cf);
            objc_msgSend(*(id *)(*(_QWORD *)&v7[79] + 8), "beginObservingAudioRenderer:", cf);
            v79 = (unsigned int *)v111;
            v111 = 0;
            if (!v79)
              goto LABEL_189;
            do
            {
              v80 = __ldaxr(v79);
              v81 = v80 - 1;
            }
            while (__stlxr(v81, v79));
            if (!v81)
            {
              atomic_store(1u, v79);
              WTF::fastFree((WTF *)v79, v78);
              if (v70)
                goto LABEL_190;
            }
            else
            {
LABEL_189:
              if (v70)
              {
                do
                {
LABEL_190:
                  v82 = __ldaxr((unsigned int *)v70);
                  v83 = v82 - 1;
                }
                while (__stlxr(v83, (unsigned int *)v70));
                if (!v83)
                {
                  atomic_store(1u, (unsigned int *)v70);
                  WTF::fastFree((WTF *)v70, v78);
                }
              }
            }
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(**(unsigned __int8 ***)&v52);
            v50 = (void *)cf;
          }
          cf = 0;
          if (v50)
LABEL_195:
            CFRelease(v50);
LABEL_196:
          v27 = (unint64_t)v105;
LABEL_197:
          WebCore::MediaPlayerPrivateWebM::reenqueSamples(v7, v27);
          goto LABEL_198;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow(*(WTF::Lock **)&v51);
      goto LABEL_133;
    }
    v54 = v7[46];
    v55 = (void *)v7[47];
    *(_QWORD *)&v107 = "MediaPlayerPrivateWebM";
    *((_QWORD *)&v107 + 1) = 23;
    v108 = "addAudioRenderer";
    v109 = v55;
    if (*(_BYTE *)(*(_QWORD *)&v54 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [59]>((uint64_t)&WebCore::LogMedia, 1u, (WTF::Logger::LogSiteIdentifier *)&v107, "-[AVSampleBufferAudioRenderer init] returned nil! bailing!");
    WebCore::MediaPlayerPrivateWebM::setNetworkState((unsigned __int8 *)v7, 6);
    goto LABEL_196;
  }
  v42 = v7[37];
  if (!*(_QWORD *)&v42)
    goto LABEL_198;
  v43 = (uint8x8_t)vcnt_s8(v42);
  v43.i16[0] = vaddlv_u8(v43);
  if (v43.u32[0] > 1uLL)
  {
    v44 = v27;
    if (*(_QWORD *)&v42 <= v27)
      v44 = v27 % *(_QWORD *)&v42;
  }
  else
  {
    v44 = (*(_QWORD *)&v42 - 1) & v27;
  }
  v60 = *(uint64_t ****)(*(_QWORD *)&v7[36] + 8 * v44);
  if (!v60)
    goto LABEL_198;
  v61 = *v60;
  if (!v61)
    goto LABEL_198;
  if (v43.u32[0] < 2uLL)
  {
    v62 = *(_QWORD *)&v42 - 1;
    while (1)
    {
      v63 = v61[1];
      if (v63 == (uint64_t *)v27)
      {
        if (v61[2] == (uint64_t *)v27)
          goto LABEL_199;
      }
      else if (((unint64_t)v63 & v62) != v44)
      {
        goto LABEL_198;
      }
      v61 = (uint64_t **)*v61;
      if (!v61)
        goto LABEL_198;
    }
  }
  while (2)
  {
    v64 = (unint64_t)v61[1];
    if (v64 != v27)
    {
      if (v64 >= *(_QWORD *)&v42)
        v64 %= *(_QWORD *)&v42;
      if (v64 != v44)
        goto LABEL_198;
      goto LABEL_154;
    }
    if (v61[2] != (uint64_t *)v27)
    {
LABEL_154:
      v61 = (uint64_t **)*v61;
      if (!v61)
        goto LABEL_198;
      continue;
    }
    break;
  }
LABEL_199:
  v84 = v61[3];
  if (v84)
    CFRetain(v61[3]);
  v107 = 0uLL;
  v108 = 0;
  v85 = (PAL *)objc_msgSend(*(id *)&v7[14], "timebase");
  PAL::softLinkCoreMediaCMTimebaseGetTime[0](v85, v86);
  v87 = (void *)v7[14];
  v116 = v107;
  v117 = v108;
  objc_msgSend(v87, "removeRenderer:atTime:completionHandler:", v84, &v116, 0);
  objc_msgSend(*(id *)(*(_QWORD *)&v7[79] + 8), "stopObservingAudioRenderer:", v84);
  objc_msgSend(v84, "flush");
  objc_msgSend(v84, "stopRequestingMediaData");
  if (v84)
    CFRelease(v84);
  v89 = v7[37];
  if (v89)
  {
    v90 = (uint8x8_t)vcnt_s8(v89);
    v90.i16[0] = vaddlv_u8(v90);
    if (v90.u32[0] > 1uLL)
    {
      v91 = v27;
      if (*(_QWORD *)&v89 <= v27)
        v91 = v27 % *(_QWORD *)&v89;
    }
    else
    {
      v91 = (*(_QWORD *)&v89 - 1) & v27;
    }
    v92 = v7[36];
    v93 = *(WTF ***)(*(_QWORD *)&v92 + 8 * v91);
    if (v93)
    {
      v94 = *v93;
      if (*v93)
      {
        v95 = *(_QWORD *)&v89 - 1;
        if (v90.u32[0] >= 2uLL)
        {
          while (1)
          {
            v97 = *((_QWORD *)v94 + 1);
            if (v97 == v27)
            {
              if (*((_QWORD *)v94 + 2) == v27)
              {
LABEL_226:
                if (v90.u32[0] > 1uLL)
                {
                  if (*(_QWORD *)&v89 <= v27)
                    v27 %= *(_QWORD *)&v89;
                }
                else
                {
                  v27 &= v95;
                }
                v98 = *(WTF **)(*(_QWORD *)&v92 + 8 * v27);
                do
                {
                  v99 = (int8x8_t *)v98;
                  v98 = *(WTF **)v98;
                }
                while (v98 != v94);
                if (v99 == &v7[38])
                  goto LABEL_243;
                v100 = v99[1];
                if (v90.u32[0] > 1uLL)
                {
                  if (*(_QWORD *)&v100 >= *(_QWORD *)&v89)
                    *(_QWORD *)&v100 %= *(_QWORD *)&v89;
                }
                else
                {
                  *(_QWORD *)&v100 &= v95;
                }
                if (*(_QWORD *)&v100 != v27)
                {
LABEL_243:
                  if (!*(_QWORD *)v94)
                    goto LABEL_244;
                  v101 = *(_QWORD *)(*(_QWORD *)v94 + 8);
                  if (v90.u32[0] > 1uLL)
                  {
                    if (v101 >= *(_QWORD *)&v89)
                      v101 %= *(_QWORD *)&v89;
                  }
                  else
                  {
                    v101 &= v95;
                  }
                  if (v101 != v27)
LABEL_244:
                    *(_QWORD *)(*(_QWORD *)&v92 + 8 * v27) = 0;
                }
                v102 = *(int8x8_t *)v94;
                if (*(_QWORD *)v94)
                {
                  v103 = *(_QWORD *)(*(_QWORD *)&v102 + 8);
                  if (v90.u32[0] > 1uLL)
                  {
                    if (v103 >= *(_QWORD *)&v89)
                      v103 %= *(_QWORD *)&v89;
                  }
                  else
                  {
                    v103 &= v95;
                  }
                  if (v103 != v27)
                  {
                    *(_QWORD *)(*(_QWORD *)&v7[36] + 8 * v103) = v99;
                    v102 = *(int8x8_t *)v94;
                  }
                }
                *v99 = v102;
                *(_QWORD *)v94 = 0;
                --*(_QWORD *)&v7[39];
                v104 = (const void *)*((_QWORD *)v94 + 3);
                *((_QWORD *)v94 + 3) = 0;
                if (v104)
                  CFRelease(v104);
                WTF::fastFree(v94, v88);
                goto LABEL_198;
              }
            }
            else
            {
              if (v97 >= *(_QWORD *)&v89)
                v97 %= *(_QWORD *)&v89;
              if (v97 != v91)
                goto LABEL_198;
            }
            v94 = *(WTF **)v94;
            if (!v94)
              goto LABEL_198;
          }
        }
        do
        {
          v96 = *((_QWORD *)v94 + 1);
          if (v96 == v27)
          {
            if (*((_QWORD *)v94 + 2) == v27)
              goto LABEL_226;
          }
          else if ((v96 & v95) != v91)
          {
            break;
          }
          v94 = *(WTF **)v94;
        }
        while (v94);
      }
    }
  }
LABEL_198:
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WebMResourceClientParent,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v15 + 56));
  do
  {
LABEL_30:
    v18 = __ldaxr(v16);
    v19 = v18 - 1;
  }
  while (__stlxr(v19, v16));
  if (!v19)
  {
    atomic_store(1u, a2 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)a2 + 8))(a2);
    if (!v13)
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WebMResourceClientParent,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v8 + 56));
LABEL_33:
    if (__ldaxr((unsigned __int8 *)v13))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v13))
    {
      goto LABEL_40;
    }
    MEMORY[0x19AEA534C](v13);
LABEL_40:
    v22 = *(_QWORD *)(v13 + 16) - 1;
    *(_QWORD *)(v13 + 16) = v22;
    if (v22)
    {
      v31 = __ldxr((unsigned __int8 *)v13);
      if (v31 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v13))
          return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WebMResourceClientParent,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v8 + 56));
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v13);
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WebMResourceClientParent,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v8 + 56));
    }
    v23 = *(_QWORD *)(v13 + 8);
    v24 = __ldxr((unsigned __int8 *)v13);
    if (v24 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v13))
      {
        if (v23)
          return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WebMResourceClientParent,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v8 + 56));
LABEL_47:
        WTF::fastFree((WTF *)v13, a2);
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WebMResourceClientParent,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v8 + 56));
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v13);
    if (v23)
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WebMResourceClientParent,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v8 + 56));
    goto LABEL_47;
  }
  if (v13)
    goto LABEL_33;
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WebMResourceClientParent,(WTF::DestructionThread)1>(*(unsigned __int8 **)(v8 + 56));
}

