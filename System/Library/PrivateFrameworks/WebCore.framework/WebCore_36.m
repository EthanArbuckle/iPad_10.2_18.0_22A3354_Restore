char *WebCore::SVGTransformValue::appendFixedPrecisionNumbers<double>(uint64_t *a1)
{
  uint64_t v1;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  char *result;
  uint64_t v16;
  uint64_t v17;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;
  int8x16_t v28;
  __int128 v29;
  __int128 v30;
  char *v31;
  char *v32;
  char *v33;
  __int16 v34;
  char __s[124];
  _DWORD __n[3];
  int8x16x2_t v37;
  int8x16x2_t v38;
  int8x16x2_t v39;

  *(_QWORD *)&__n[1] = *MEMORY[0x1E0C80C00];
  v1 = *((unsigned int *)a1 + 4);
  if ((v1 & 0x80000000) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x194F01C58);
  }
  if ((_DWORD)v1)
  {
    v3 = v1 - 1;
    v5 = *a1;
    v4 = a1[1];
    v6 = v4;
    if (!v4)
    {
      v6 = *a1;
      if (!v5)
        goto LABEL_36;
    }
    if ((*(_BYTE *)(v6 + 16) & 4) == 0)
    {
      if (v5)
        v23 = *a1;
      else
        v23 = a1[1];
      v8 = *(unsigned __int16 *)(*(_QWORD *)(v23 + 8) + 2 * v3);
LABEL_8:
      if (v8 != 40)
      {
        __s[0] = 32;
        if (v4 && (v1 < *(_DWORD *)(v4 + 4) ? (v9 = v5 == 0) : (v9 = 0), v9))
        {
          v21 = *(_DWORD *)(v4 + 16);
          v22 = *(_QWORD *)(v4 + 8);
          *((_DWORD *)a1 + 4) = v1 + 1;
          if ((v21 & 4) != 0)
            *(_BYTE *)(v22 + v1) = 32;
          else
            *(_WORD *)(v22 + 2 * v1) = 32;
        }
        else
        {
          WTF::StringBuilder::append();
        }
      }
      goto LABEL_15;
    }
    v7 = *a1;
    if (!v5)
    {
LABEL_36:
      v5 = 0;
      v7 = a1[1];
    }
    v8 = *(unsigned __int8 *)(*(_QWORD *)(v7 + 8) + v3);
    goto LABEL_8;
  }
LABEL_15:
  WTF::numberToFixedPrecisionString();
  __n[0] = strlen(__s);
  v10 = *((_DWORD *)a1 + 4);
  v11 = __CFADD__(v10, __n[0]);
  v12 = v10 + __n[0];
  if (v11)
    v13 = 0xFFFFFFFFLL;
  else
    v13 = v12;
  v14 = a1[1];
  if ((v14 || (v14 = *a1) != 0) && (*(_BYTE *)(v14 + 16) & 4) == 0)
  {
    result = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)a1);
    if (result)
    {
      v24 = &result[2 * __n[0]];
      if (__n[0] >= 0x40u)
      {
        v26 = &result[2 * (__n[0] & 0xFFFFFFC0)];
        v25 = __s;
        v27 = 0uLL;
        do
        {
          v37.val[0] = *(int8x16_t *)v25;
          v28 = *((int8x16_t *)v25 + 1);
          v38.val[0] = (int8x16_t)*((_OWORD *)v25 + 2);
          v29 = *((_OWORD *)v25 + 3);
          v25 += 64;
          v30 = v29;
          v38.val[1] = 0uLL;
          v39.val[0] = v28;
          v37.val[1] = 0uLL;
          v31 = result;
          vst2q_s8(v31, v37);
          v31 += 32;
          v39.val[1] = 0uLL;
          vst2q_s8(v31, v39);
          v32 = result + 64;
          vst2q_s8(v32, v38);
          v33 = result + 96;
          vst2q_s8(v33, *(int8x16x2_t *)(&v27 - 1));
          result += 128;
        }
        while (result != v26);
        result = v26;
      }
      else
      {
        v25 = __s;
      }
      while (result != v24)
      {
        v34 = *v25++;
        *(_WORD *)result = v34;
        result += 2;
      }
    }
  }
  else
  {
    result = (char *)MEMORY[0x19AEA4824](a1, v13);
    if (result && __n[0])
    {
      if (__n[0] == 1)
        *result = __s[0];
      else
        result = (char *)memcpy(result, __s, __n[0]);
    }
  }
  __s[0] = 41;
  v16 = a1[1];
  if (!v16)
    return (char *)WTF::StringBuilder::append();
  v17 = *((unsigned int *)a1 + 4);
  if (v17 >= *(_DWORD *)(v16 + 4) || *a1 != 0)
    return (char *)WTF::StringBuilder::append();
  v19 = *(_DWORD *)(v16 + 16);
  v20 = *(_QWORD *)(v16 + 8);
  *((_DWORD *)a1 + 4) = v17 + 1;
  if ((v19 & 4) != 0)
    *(_BYTE *)(v20 + v17) = 41;
  else
    *(_WORD *)(v20 + 2 * v17) = 41;
  return result;
}

char *WebCore::SVGTransformValue::appendFixedPrecisionNumbers<float,float,float>(uint64_t *a1)
{
  uint64_t v1;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int8x16_t __s[7];
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = *((unsigned int *)a1 + 4);
  if ((v1 & 0x80000000) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x194F01E6CLL);
  }
  if ((_DWORD)v1)
  {
    v3 = v1 - 1;
    v5 = *a1;
    v4 = a1[1];
    v6 = v4;
    if (!v4)
    {
      v6 = *a1;
      if (!v5)
        goto LABEL_18;
    }
    if ((*(_BYTE *)(v6 + 16) & 4) == 0)
    {
      if (v5)
        v13 = *a1;
      else
        v13 = a1[1];
      v8 = *(unsigned __int16 *)(*(_QWORD *)(v13 + 8) + 2 * v3);
LABEL_8:
      if (v8 != 40)
      {
        __s[0].i8[0] = 32;
        if (v4 && (v1 < *(_DWORD *)(v4 + 4) ? (v9 = v5 == 0) : (v9 = 0), v9))
        {
          v11 = *(_DWORD *)(v4 + 16);
          v12 = *(_QWORD *)(v4 + 8);
          *((_DWORD *)a1 + 4) = v1 + 1;
          if ((v11 & 4) != 0)
            *(_BYTE *)(v12 + v1) = 32;
          else
            *(_WORD *)(v12 + 2 * v1) = 32;
        }
        else
        {
          WTF::StringBuilder::append();
        }
      }
      goto LABEL_15;
    }
    v7 = *a1;
    if (!v5)
    {
LABEL_18:
      v5 = 0;
      v7 = a1[1];
    }
    v8 = *(unsigned __int8 *)(*(_QWORD *)(v7 + 8) + v3);
    goto LABEL_8;
  }
LABEL_15:
  WTF::numberToFixedPrecisionString();
  v15 = strlen(__s[0].i8);
  WTF::StringBuilder::append<WTF::FormattedNumber>((WTF::StringBuilder *)a1, __s);
  return WebCore::SVGTransformValue::appendFixedPrecisionNumbers<float,float>(a1);
}

char *WebCore::SVGTransformValue::appendFixedPrecisionNumbers<float>(WTF::StringBuilder *this)
{
  int v1;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  BOOL v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  char *result;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int8x16_t __s[7];
  _DWORD __n[3];

  *(_QWORD *)&__n[1] = *MEMORY[0x1E0C80C00];
  v1 = *((_DWORD *)this + 4);
  if (v1 < 0)
  {
    __break(0xC471u);
    JUMPOUT(0x194F02014);
  }
  if (v1)
  {
    v3 = v1 - 1;
    v5 = *(_QWORD *)this;
    v4 = *((_QWORD *)this + 1);
    v6 = v4;
    if (!v4)
    {
      v6 = *(_QWORD *)this;
      if (!v5)
        goto LABEL_27;
    }
    if ((*(_BYTE *)(v6 + 16) & 4) == 0)
    {
      if (v5)
        v4 = *(_QWORD *)this;
      v7 = *(unsigned __int16 *)(*(_QWORD *)(v4 + 8) + 2 * v3);
      goto LABEL_8;
    }
    if (!v5)
LABEL_27:
      v5 = *((_QWORD *)this + 1);
    v7 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 8) + v3);
LABEL_8:
    if (v7 != 40)
      WTF::StringBuilder::append((uint64_t)this, 0x20u);
  }
  WTF::numberToFixedPrecisionString();
  __n[0] = strlen(__s[0].i8);
  v8 = *((_DWORD *)this + 4);
  v9 = __CFADD__(v8, __n[0]);
  v10 = v8 + __n[0];
  if (v9)
    v11 = 0xFFFFFFFFLL;
  else
    v11 = v10;
  v12 = *((_QWORD *)this + 1);
  if ((v12 || (v12 = *(_QWORD *)this) != 0) && (*(_BYTE *)(v12 + 16) & 4) == 0)
  {
    result = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(this);
    if (result)
      result = WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::FormattedNumber,void>>(result, __s);
  }
  else
  {
    result = (char *)MEMORY[0x19AEA4824](this, v11);
    if (result && __n[0])
    {
      if (__n[0] == 1)
        *result = __s[0].i8[0];
      else
        result = (char *)memcpy(result, __s, __n[0]);
    }
  }
  __s[0].i8[0] = 41;
  v14 = *((_QWORD *)this + 1);
  if (!v14)
    return (char *)WTF::StringBuilder::append();
  v15 = *((unsigned int *)this + 4);
  if (v15 >= *(_DWORD *)(v14 + 4) || *(_QWORD *)this)
    return (char *)WTF::StringBuilder::append();
  v16 = *(_DWORD *)(v14 + 16);
  v17 = *(_QWORD *)(v14 + 8);
  *((_DWORD *)this + 4) = v15 + 1;
  if ((v16 & 4) != 0)
    *(_BYTE *)(v17 + v15) = 41;
  else
    *(_WORD *)(v17 + 2 * v15) = 41;
  return result;
}

char *WebCore::SVGTransformValue::appendFixedPrecisionNumbers<float,float>(uint64_t *a1)
{
  uint64_t v1;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int8x16_t __s[7];
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = *((unsigned int *)a1 + 4);
  if ((v1 & 0x80000000) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x194F021B8);
  }
  if ((_DWORD)v1)
  {
    v3 = v1 - 1;
    v5 = *a1;
    v4 = a1[1];
    v6 = v4;
    if (!v4)
    {
      v6 = *a1;
      if (!v5)
        goto LABEL_18;
    }
    if ((*(_BYTE *)(v6 + 16) & 4) == 0)
    {
      if (v5)
        v13 = *a1;
      else
        v13 = a1[1];
      v8 = *(unsigned __int16 *)(*(_QWORD *)(v13 + 8) + 2 * v3);
LABEL_8:
      if (v8 != 40)
      {
        __s[0].i8[0] = 32;
        if (v4 && (v1 < *(_DWORD *)(v4 + 4) ? (v9 = v5 == 0) : (v9 = 0), v9))
        {
          v11 = *(_DWORD *)(v4 + 16);
          v12 = *(_QWORD *)(v4 + 8);
          *((_DWORD *)a1 + 4) = v1 + 1;
          if ((v11 & 4) != 0)
            *(_BYTE *)(v12 + v1) = 32;
          else
            *(_WORD *)(v12 + 2 * v1) = 32;
        }
        else
        {
          WTF::StringBuilder::append();
        }
      }
      goto LABEL_15;
    }
    v7 = *a1;
    if (!v5)
    {
LABEL_18:
      v5 = 0;
      v7 = a1[1];
    }
    v8 = *(unsigned __int8 *)(*(_QWORD *)(v7 + 8) + v3);
    goto LABEL_8;
  }
LABEL_15:
  WTF::numberToFixedPrecisionString();
  v15 = strlen(__s[0].i8);
  WTF::StringBuilder::append<WTF::FormattedNumber>((WTF::StringBuilder *)a1, __s);
  return WebCore::SVGTransformValue::appendFixedPrecisionNumbers<float>((WTF::StringBuilder *)a1);
}

uint64_t WebCore::SVGTransform::clone@<X0>(WebCore::SVGTransform *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  int v5;
  _OWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t result;
  __int128 v10;
  __int128 v11;
  int v12;

  v4 = WTF::fastMalloc((WTF *)0x48);
  v5 = *((_DWORD *)this + 8);
  v6 = (_OWORD *)*((_QWORD *)this + 5);
  v7 = *((_DWORD *)this + 12);
  *(_QWORD *)v4 = off_1E32EE228;
  *(_QWORD *)(v4 + 64) = &unk_1E32EE270;
  v8 = *(_QWORD *)((char *)this + 52);
  result = WTF::fastMalloc((WTF *)0x50);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = v4 + 64;
  *(_WORD *)(result + 24) = 0;
  *(_QWORD *)result = off_1E32EE1F0;
  v10 = v6[2];
  v11 = v6[4];
  *(_OWORD *)(result + 48) = v6[3];
  *(_OWORD *)(result + 64) = v11;
  *(_OWORD *)(result + 32) = v10;
  *(_QWORD *)result = off_1E32EE1B8;
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)(v4 + 16) = 0;
  *(_WORD *)(v4 + 24) = 0;
  *(_QWORD *)v4 = &off_1E32EE2A8;
  *(_DWORD *)(v4 + 32) = v5;
  v12 = *(_DWORD *)(result + 8);
  *(_DWORD *)(result + 8) = v12 + 1;
  *(_QWORD *)(v4 + 40) = result;
  *(_DWORD *)(v4 + 48) = v7;
  *(_QWORD *)(v4 + 52) = v8;
  if (v12)
    *(_DWORD *)(result + 8) = v12;
  else
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *(_QWORD *)v4 = off_1E32EE228;
  *(_QWORD *)(v4 + 64) = &unk_1E32EE270;
  *a2 = v4;
  return result;
}

uint64_t WebCore::JSSVGAnimationElement::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::getDOMStructure<WebCore::JSSVGElement>(WebCore::JSElement *a1, JSC::VM *a2)
{
  uint64_t result;
  WebCore::JSDOMGlobalObject *v5;
  JSC::JSCell *v6;
  unint64_t Structure;
  JSC::Structure *v8;
  JSC::JSCell *v9;
  uint64_t v10;

  result = WebCore::getCachedDOMStructure((uint64_t)a2, (uint64_t)&WebCore::JSSVGElement::s_info);
  if (!result)
  {
    v6 = (JSC::JSCell *)WebCore::JSElement::prototype(a1, a2, v5);
    Structure = WebCore::JSSVGElementPrototype::createStructure((uint64_t *)a1, (uint64_t)a2, v6);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v9 = (JSC::JSCell *)WebCore::JSSVGElementPrototype::create(a1, a2, Structure, v8);
    v10 = WebCore::JSSVGElement::createStructure((uint64_t *)a1, (uint64_t)a2, v9);
    return WebCore::cacheDOMStructure((JSCell *)a2, v10, (uint64_t)&WebCore::JSSVGElement::s_info);
  }
  return result;
}

uint64_t *WebCore::setJSSVGElement_onclickSetter(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  WebCore::EventTarget *v6;
  uint64_t v7;
  uint64_t *result;
  WebCore::EventTarget *v9;

  v6 = *(WebCore::EventTarget **)(a2 + 24);
  *((_DWORD *)v6 + 6) += 2;
  v9 = v6;
  v7 = WebCore::eventNames((WebCore *)a1);
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v6, (WTF::StringImpl **)(v7 + 400), a3, (_DWORD *)a2);
  result = WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v9);
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && a1[190] >= *(unsigned __int8 *)(a2 + 7))
    return (uint64_t *)JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 48), (const JSCell *)a2);
  return result;
}

uint64_t WebCore::Page::addSchedulePair(uint64_t a1, WTF::SchedulePair **a2)
{
  uint64_t *v4;
  uint64_t **v5;
  uint64_t *v6;
  void *v7;
  WTF::SchedulePair *v8;
  unsigned int v9;
  uint64_t result;
  void *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  WebCore::DocumentLoader *v17;
  WebCore::DocumentLoader *v18;
  uint64_t *v19[3];
  unsigned int *v20;

  v5 = (uint64_t **)(a1 + 24);
  v4 = *(uint64_t **)(a1 + 24);
  if (!v4)
  {
    v6 = (uint64_t *)WTF::fastMalloc((WTF *)8);
    *v6 = 0;
    v19[0] = v6;
    std::unique_ptr<WTF::HashSet<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>,WTF::SchedulePairHash,WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>>,WTF::HashTableTraits>>::operator=[abi:sn180100](v5, v19);
    std::unique_ptr<WTF::HashSet<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>,WTF::SchedulePairHash,WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>>,WTF::HashTableTraits>>::~unique_ptr[abi:sn180100](v19, v7);
    v4 = *v5;
  }
  v8 = *a2;
  do
    v9 = __ldaxr((unsigned int *)v8);
  while (__stlxr(v9 + 1, (unsigned int *)v8));
  v20 = (unsigned int *)v8;
  result = WTF::HashTable<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>,WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>,WTF::IdentityExtractor,WTF::SchedulePairHash,WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>>,WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>>>::add(v4, (uint64_t *)&v20, (uint64_t)v19);
  v12 = v20;
  v20 = 0;
  if (v12)
  {
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v12);
      v19[0] = (uint64_t *)v12;
      result = (uint64_t)WTF::ThreadSafeRefCounted<WTF::SchedulePair,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((WTF **)v19, v11);
    }
  }
  v15 = *(_QWORD *)(a1 + 160);
  if (v15)
  {
    do
    {
      if (!*(_BYTE *)(v15 + 144))
      {
        v16 = *(_QWORD *)(v15 + 280);
        v17 = *(WebCore::DocumentLoader **)(v16 + 88);
        if (v17)
        {
          WebCore::DocumentLoader::schedule(v17, *a2);
          v16 = *(_QWORD *)(v15 + 280);
        }
        v18 = *(WebCore::DocumentLoader **)(v16 + 96);
        if (v18)
          WebCore::DocumentLoader::schedule(v18, *a2);
      }
      result = WebCore::FrameTree::traverseNext((_QWORD *)(v15 + 48), 0);
      v15 = result;
    }
    while (result);
  }
  return result;
}

void sub_194F0262C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned int *a9, uint64_t a10, uint64_t a11, unsigned int *a12)
{
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  v13 = a12;
  a12 = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      a9 = v13;
      WTF::ThreadSafeRefCounted<WTF::SchedulePair,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((WTF **)&a9, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void std::call_once[abi:sn180100]<WebCore::Page::platformInitialize(void)::$_0>(uint64_t a1)
{
  unint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = atomic_load(&WebCore::Page::platformInitialize(void)::onceFlag);
  if (v1 != -1)
  {
    v2 = &v3;
    v3 = a1;
    std::__call_once(&WebCore::Page::platformInitialize(void)::onceFlag, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::Page::platformInitialize(void)::$_0 &&>>);
  }
}

uint64_t **std::unique_ptr<WTF::HashSet<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>,WTF::SchedulePairHash,WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>>,WTF::HashTableTraits>>::operator=[abi:sn180100](uint64_t **a1, uint64_t **a2)
{
  uint64_t *v3;
  uint64_t *v4;

  v3 = *a2;
  *a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    if (*v4)
      WTF::HashTable<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>,WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>,WTF::IdentityExtractor,WTF::SchedulePairHash,WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>>,WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>>>::deallocateTable(*v4, a2);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t **std::unique_ptr<WTF::HashSet<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>,WTF::SchedulePairHash,WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>>,WTF::HashTableTraits>>::~unique_ptr[abi:sn180100](uint64_t **a1, void *a2)
{
  uint64_t *v3;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    if (*v3)
      WTF::HashTable<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>,WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>,WTF::IdentityExtractor,WTF::SchedulePairHash,WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>>,WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>>>::deallocateTable(*v3, a2);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

WebCore::DocumentLoader *WebCore::Page::removeSchedulePair(WebCore::DocumentLoader *result, uint64_t *a2)
{
  uint64_t *v2;
  WebCore::DocumentLoader *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  WebCore::DocumentLoader *v17;
  uint64_t v18;
  uint64_t v19;

  v2 = (uint64_t *)*((_QWORD *)result + 3);
  if (!v2)
    return result;
  v4 = result;
  v5 = *v2;
  if (*v2)
  {
    v6 = *a2;
    v7 = *(_DWORD *)(v5 - 8);
    result = (WebCore::DocumentLoader *)WTF::computeHash<WTF::SchedulePair>(*a2);
    v8 = result & v7;
    v9 = *(_QWORD *)(v5 + 8 * v8);
    if (v9 == v6)
    {
LABEL_7:
      v11 = (uint64_t *)(v5 + 8 * v8);
      v12 = *v2;
      if (!*v2)
      {
LABEL_12:
        if ((uint64_t *)v12 != v11)
          result = (WebCore::DocumentLoader *)WTF::HashTable<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>,WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>,WTF::IdentityExtractor,WTF::SchedulePairHash,WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>>,WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>>>::remove(v2, v11);
        goto LABEL_14;
      }
      v13 = *(unsigned int *)(v12 - 4);
    }
    else
    {
      v10 = 1;
      while (v9)
      {
        v8 = ((_DWORD)v8 + v10) & v7;
        v9 = *(_QWORD *)(v5 + 8 * v8);
        ++v10;
        if (v9 == v6)
          goto LABEL_7;
      }
      v12 = *v2;
      if (!*v2)
        goto LABEL_14;
      v13 = *(unsigned int *)(v12 - 4);
      v11 = (uint64_t *)(v12 + 8 * v13);
    }
    v12 += 8 * v13;
    if ((uint64_t *)v12 == v11)
      goto LABEL_14;
    goto LABEL_12;
  }
LABEL_14:
  v14 = *((_QWORD *)v4 + 20);
  if (v14)
  {
    while (1)
    {
      do
      {
LABEL_15:
        v15 = (_QWORD *)v14;
        if (!*(_BYTE *)(v14 + 144))
        {
          v16 = *(_QWORD *)(v14 + 280);
          v17 = *(WebCore::DocumentLoader **)(v16 + 88);
          if (v17)
          {
            WebCore::DocumentLoader::unschedule(v17, (WTF::SchedulePair *)*a2);
            v16 = v15[35];
          }
          result = *(WebCore::DocumentLoader **)(v16 + 96);
          if (result)
            result = WebCore::DocumentLoader::unschedule(result, (WTF::SchedulePair *)*a2);
        }
        v14 = v15[11];
      }
      while (v14);
      v18 = *(_QWORD *)(v15[6] + 8);
      if (!v18)
        break;
      v14 = v15[9];
      if (!v14)
      {
        while (1)
        {
          v19 = *(_QWORD *)(v18 + 56);
          if (!v19)
            return result;
          v18 = *(_QWORD *)(v19 + 8);
          if (!v18)
            return result;
          v14 = *(_QWORD *)(v18 + 72);
          if (v14)
            goto LABEL_15;
        }
      }
    }
  }
  return result;
}

double WebCore::ScrollingTreeFixedNodeCocoa::create@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  double result;

  v8 = WTF::fastMalloc((WTF *)0x98);
  v9 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v9 = 0;
  *(_OWORD *)(v9 + 8) = xmmword_19689B170;
  *(_QWORD *)(v9 + 24) = v8;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 32) = a1;
  *(_BYTE *)(v8 + 40) = 7;
  *(_QWORD *)(v8 + 48) = a2;
  *(_QWORD *)(v8 + 56) = a3;
  result = 0.0;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_DWORD *)(v8 + 112) = 0;
  *(_QWORD *)(v8 + 96) = off_1E3403CE8;
  *(_QWORD *)(v8 + 104) = 0;
  *(_QWORD *)(v8 + 124) = 0;
  *(_QWORD *)(v8 + 132) = 0;
  *(_QWORD *)(v8 + 116) = 0;
  ++*(_DWORD *)(a1 + 332);
  *(_QWORD *)v8 = off_1E32EE7C0;
  *(_QWORD *)(v8 + 8) = v9;
  *(_QWORD *)(v8 + 144) = 0;
  *a4 = v8;
  return result;
}

void WebCore::ScrollingTreeFixedNodeCocoa::~ScrollingTreeFixedNodeCocoa(WebCore::ScrollingTreeFixedNodeCocoa *this, void *a2)
{
  const void *v2;
  WebCore::ScrollingTreeFixedNodeCocoa *v3;

  *(_QWORD *)this = off_1E32EE7C0;
  v2 = (const void *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v2)
  {
    v3 = this;
    CFRelease(v2);
    this = v3;
  }
  WebCore::ScrollingTreeFixedNode::~ScrollingTreeFixedNode(this, a2);
}

{
  const void *v3;
  WTF *v4;
  void *v5;

  *(_QWORD *)this = off_1E32EE7C0;
  v3 = (const void *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v3)
    CFRelease(v3);
  WebCore::ScrollingTreeFixedNode::~ScrollingTreeFixedNode(this, a2);
  WTF::fastFree(v4, v5);
}

uint64_t WebCore::ScrollingTreeFixedNodeCocoa::commitStateBeforeChildren(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  uint64_t v6;
  __int128 v7;

  if (*(_BYTE *)(a2 + 16) != 7)
    return 0;
  if ((*(_BYTE *)(a2 + 40) & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 96);
    if (v4)
      CFRetain(*(CFTypeRef *)(a2 + 96));
    v5 = *(const void **)(a1 + 144);
    *(_QWORD *)(a1 + 144) = v4;
    if (v5)
      CFRelease(v5);
  }
  if (*(_BYTE *)(a2 + 16) != 7)
    return 0;
  if ((*(_BYTE *)(a2 + 40) & 2) != 0)
  {
    v6 = *(_QWORD *)(a2 + 136);
    *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 104) = v6;
    v7 = *(_OWORD *)(a2 + 148);
    *(_QWORD *)(a1 + 132) = *(_QWORD *)(a2 + 164);
    *(_OWORD *)(a1 + 116) = v7;
  }
  return 1;
}

uint64_t WebCore::ScrollingTreeFixedNodeCocoa::applyLayerPositions(id *this, void *a2, __n128 a3)
{
  float v4;
  float v5;

  WebCore::ScrollingTreeFixedNode::computeLayerPosition((WebCore::ScrollingTreeFixedNode *)this, a2, a3);
  return objc_msgSend(this[18], "_web_setLayerTopLeftPosition:", (float)(v4 - *((float *)this + 26)), (float)(v5 - *((float *)this + 27)));
}

uint64_t WebCore::ScrollingTreeFixedNodeCocoa::dumpProperties(uint64_t a1, WTF::TextStream *a2, char a3)
{
  WTF::TextStream *v7;
  uint64_t result;

  WTF::TextStream::operator<<();
  WebCore::ScrollingTreeNode::dumpProperties(a1, a2, a3);
  WTF::TextStream::startGroup(a2);
  WTF::TextStream::operator<<();
  v7 = (WTF::TextStream *)WTF::TextStream::operator<<();
  WebCore::operator<<(v7);
  result = WTF::TextStream::endGroup(a2);
  if ((a3 & 4) != 0)
  {
    objc_msgSend(*(id *)(a1 + 144), "bounds");
    objc_msgSend(*(id *)(a1 + 144), "anchorPoint");
    objc_msgSend(*(id *)(a1 + 144), "position");
    WTF::TextStream::startGroup(a2);
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    return WTF::TextStream::endGroup(a2);
  }
  return result;
}

double WebCore::ScrollingTreeOverflowScrollProxyNodeCocoa::create@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  double result;

  v8 = WTF::fastMalloc((WTF *)0x78);
  v9 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v9 = 0;
  *(_OWORD *)(v9 + 8) = xmmword_19689B170;
  *(_QWORD *)(v9 + 24) = v8;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 32) = a1;
  *(_BYTE *)(v8 + 40) = 6;
  *(_QWORD *)(v8 + 48) = a2;
  *(_QWORD *)(v8 + 56) = a3;
  result = 0.0;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_OWORD *)(v8 + 96) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_QWORD *)v8 = off_1E32EE820;
  *(_QWORD *)(v8 + 8) = v9;
  *(_QWORD *)(v8 + 112) = 0;
  *a4 = v8;
  return result;
}

uint64_t WebCore::ScrollingTreeOverflowScrollProxyNodeCocoa::ScrollingTreeOverflowScrollProxyNodeCocoa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  v8 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v8 = 0;
  *(_OWORD *)(v8 + 8) = xmmword_19689B170;
  *(_QWORD *)(v8 + 24) = a1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = a2;
  *(_BYTE *)(a1 + 40) = 6;
  *(_QWORD *)(a1 + 48) = a3;
  *(_QWORD *)(a1 + 56) = a4;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)a1 = off_1E32EE820;
  *(_QWORD *)(a1 + 8) = v8;
  *(_QWORD *)(a1 + 112) = 0;
  return a1;
}

{
  uint64_t v8;

  v8 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v8 = 0;
  *(_OWORD *)(v8 + 8) = xmmword_19689B170;
  *(_QWORD *)(v8 + 24) = a1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = a2;
  *(_BYTE *)(a1 + 40) = 6;
  *(_QWORD *)(a1 + 48) = a3;
  *(_QWORD *)(a1 + 56) = a4;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)a1 = off_1E32EE820;
  *(_QWORD *)(a1 + 8) = v8;
  *(_QWORD *)(a1 + 112) = 0;
  return a1;
}

void WebCore::ScrollingTreeOverflowScrollProxyNodeCocoa::~ScrollingTreeOverflowScrollProxyNodeCocoa(WebCore::ScrollingTreeOverflowScrollProxyNodeCocoa *this, void *a2)
{
  const void *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;

  *(_QWORD *)this = off_1E32EE820;
  v3 = (const void *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v3)
    CFRelease(v3);
  *(_QWORD *)this = off_1E34043F8;
  v4 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (!v4)
    goto LABEL_16;
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_8;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_8:
  v6 = *(_QWORD *)(v4 + 16) - 1;
  *(_QWORD *)(v4 + 16) = v6;
  if (v6)
  {
    v9 = __ldxr((unsigned __int8 *)v4);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v4))
        goto LABEL_16;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    goto LABEL_16;
  }
  v7 = *(_QWORD *)(v4 + 8);
  v8 = __ldxr((unsigned __int8 *)v4);
  if (v8 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (!v7)
        goto LABEL_15;
      goto LABEL_16;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (!v7)
LABEL_15:
    WTF::fastFree((WTF *)v4, a2);
LABEL_16:
  WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 16, a2);
}

{
  const void *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;

  *(_QWORD *)this = off_1E32EE820;
  v3 = (const void *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v3)
    CFRelease(v3);
  *(_QWORD *)this = off_1E34043F8;
  v4 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (!v4)
    goto LABEL_16;
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_8;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_8:
  v6 = *(_QWORD *)(v4 + 16) - 1;
  *(_QWORD *)(v4 + 16) = v6;
  if (v6)
  {
    v9 = __ldxr((unsigned __int8 *)v4);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v4))
        goto LABEL_16;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    goto LABEL_16;
  }
  v7 = *(_QWORD *)(v4 + 8);
  v8 = __ldxr((unsigned __int8 *)v4);
  if (v8 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (!v7)
        goto LABEL_15;
      goto LABEL_16;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (!v7)
LABEL_15:
    WTF::fastFree((WTF *)v4, a2);
LABEL_16:
  WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 16, a2);
}

{
  const void *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  void *v9;
  int v10;

  *(_QWORD *)this = off_1E32EE820;
  v3 = (const void *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v3)
    CFRelease(v3);
  *(_QWORD *)this = off_1E34043F8;
  v4 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (!v4)
    goto LABEL_16;
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_8;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_8:
  v6 = *(_QWORD *)(v4 + 16) - 1;
  *(_QWORD *)(v4 + 16) = v6;
  if (v6)
  {
    v10 = __ldxr((unsigned __int8 *)v4);
    if (v10 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v4))
        goto LABEL_16;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    goto LABEL_16;
  }
  v7 = *(_QWORD *)(v4 + 8);
  v8 = __ldxr((unsigned __int8 *)v4);
  if (v8 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (!v7)
        goto LABEL_15;
      goto LABEL_16;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (!v7)
LABEL_15:
    WTF::fastFree((WTF *)v4, a2);
LABEL_16:
  WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 16, a2);
  WTF::fastFree(this, v9);
}

BOOL WebCore::ScrollingTreeOverflowScrollProxyNodeCocoa::commitStateBeforeChildren(WebCore::ScrollingTreeOverflowScrollProxyNodeCocoa *this, const WebCore::ScrollingStateNode *a2)
{
  uint64_t v4;
  const void *v5;

  if ((*((_BYTE *)a2 + 40) & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 12);
    if (v4)
      CFRetain(*((CFTypeRef *)a2 + 12));
    v5 = (const void *)*((_QWORD *)this + 14);
    *((_QWORD *)this + 14) = v4;
    if (v5)
      CFRelease(v5);
  }
  return WebCore::ScrollingTreeOverflowScrollProxyNode::commitStateBeforeChildren((uint64_t)this, a2);
}

uint64_t WebCore::ScrollingTreeOverflowScrollProxyNodeCocoa::applyLayerPositions(WebCore::ScrollingTreeOverflowScrollProxyNodeCocoa *this)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  float64x2_t v5;
  __int128 v7;

  v2 = *((_QWORD *)this + 4);
  v7 = *((_OWORD *)this + 6);
  if ((_QWORD)v7
    && (v3 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)(v2 + 24), (uint64_t *)&v7)) != 0)
  {
    v4 = v3[2];
    v5 = 0uLL;
    if (v4 && *(_BYTE *)(v4 + 40) == 5)
      v5 = vcvtq_f64_f32(vadd_f32(*(float32x2_t *)(v4 + 144), vcvt_f32_s32(*(int32x2_t *)(v4 + 152))));
  }
  else
  {
    v5 = 0uLL;
  }
  return objc_msgSend(*((id *)this + 14), "_web_setLayerBoundsOrigin:", *(_OWORD *)&v5, v7);
}

double WebCore::ScrollingTreePositionedNodeCocoa::create@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  double result;

  v8 = WTF::fastMalloc((WTF *)0x88);
  v9 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v9 = 0;
  *(_OWORD *)(v9 + 8) = xmmword_19689B170;
  *(_QWORD *)(v9 + 24) = v8;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 32) = a1;
  *(_BYTE *)(v8 + 40) = 9;
  *(_QWORD *)(v8 + 48) = a2;
  *(_QWORD *)(v8 + 56) = a3;
  result = 0.0;
  *(_OWORD *)(v8 + 96) = 0u;
  *(_OWORD *)(v8 + 112) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_QWORD *)v8 = off_1E32EE880;
  *(_QWORD *)(v8 + 8) = v9;
  *(_QWORD *)(v8 + 128) = 0;
  *a4 = v8;
  return result;
}

void WebCore::ScrollingTreePositionedNodeCocoa::~ScrollingTreePositionedNodeCocoa(WebCore::ScrollingTreePositionedNodeCocoa *this, void *a2)
{
  const void *v2;
  WebCore::ScrollingTreePositionedNodeCocoa *v3;

  *(_QWORD *)this = off_1E32EE880;
  v2 = (const void *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v2)
  {
    v3 = this;
    CFRelease(v2);
    this = v3;
  }
  WebCore::ScrollingTreePositionedNode::~ScrollingTreePositionedNode(this, a2);
}

{
  const void *v3;
  WTF *v4;
  void *v5;

  *(_QWORD *)this = off_1E32EE880;
  v3 = (const void *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v3)
    CFRelease(v3);
  WebCore::ScrollingTreePositionedNode::~ScrollingTreePositionedNode(this, a2);
  WTF::fastFree(v4, v5);
}

BOOL WebCore::ScrollingTreePositionedNodeCocoa::commitStateBeforeChildren(WebCore::ScrollingTreePositionedNodeCocoa *this, const WebCore::ScrollingStateNode *a2)
{
  uint64_t v4;
  const void *v5;

  if ((*((_BYTE *)a2 + 40) & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 12);
    if (v4)
      CFRetain(*((CFTypeRef *)a2 + 12));
    v5 = (const void *)*((_QWORD *)this + 16);
    *((_QWORD *)this + 16) = v4;
    if (v5)
      CFRelease(v5);
  }
  return WebCore::ScrollingTreePositionedNode::commitStateBeforeChildren(this, a2);
}

uint64_t WebCore::ScrollingTreePositionedNodeCocoa::applyLayerPositions(float32x2_t *this)
{
  uint64_t v2;
  __int128 *v3;
  uint64_t v4;
  float32x2_t v5;
  float32x2_t v6;
  uint64_t *v7;
  float32x2_t *v8;
  __int128 v10;

  v2 = this[13].u32[1];
  if ((_DWORD)v2)
  {
    v3 = (__int128 *)this[12];
    v4 = 16 * v2;
    v5 = 0;
    do
    {
      v6 = this[4];
      v10 = *v3;
      if ((_QWORD)v10)
      {
        v7 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)(*(_QWORD *)&v6 + 24), (uint64_t *)&v10);
        if (v7)
        {
          v8 = (float32x2_t *)v7[2];
          if (v8)
          {
            if (v8[5].i8[0] == 5)
              v5 = vadd_f32(v5, vsub_f32(v8[18], v8[17]));
          }
        }
      }
      ++v3;
      v4 -= 16;
    }
    while (v4);
  }
  else
  {
    v5 = 0;
  }
  return objc_msgSend(*(id *)&this[16], "_web_setLayerTopLeftPosition:", vcvtq_f64_f32(vsub_f32(vadd_f32(v5, this[15]), this[14])), v10);
}

uint64_t WebCore::ScrollingTreeNode::isRootOfHostedSubtree(WebCore::ScrollingTreeNode *this)
{
  return 0;
}

uint64_t WebCore::ScrollingTreeFixedNodeCocoa::layer(WebCore::ScrollingTreeFixedNodeCocoa *this)
{
  return *((_QWORD *)this + 18);
}

uint64_t WebCore::ScrollingTreeOverflowScrollProxyNodeCocoa::layer(WebCore::ScrollingTreeOverflowScrollProxyNodeCocoa *this)
{
  return *((_QWORD *)this + 14);
}

uint64_t WebCore::ScrollingTreePositionedNodeCocoa::layer(WebCore::ScrollingTreePositionedNodeCocoa *this)
{
  return *((_QWORD *)this + 16);
}

WTF **WTF::ThreadSafeRefCounted<WTF::SchedulePair,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(WTF **result, void *a2)
{
  WTF *v2;
  const void *v3;
  const void *v4;
  const void *v5;

  v2 = *result;
  if (*result)
  {
    v3 = (const void *)*((_QWORD *)v2 + 3);
    *((_QWORD *)v2 + 3) = 0;
    if (v3)
      CFRelease(v3);
    v4 = (const void *)*((_QWORD *)v2 + 2);
    *((_QWORD *)v2 + 2) = 0;
    if (v4)
      CFRelease(v4);
    v5 = (const void *)*((_QWORD *)v2 + 1);
    *((_QWORD *)v2 + 1) = 0;
    if (v5)
      CFRelease(v5);
    return (WTF **)WTF::fastFree(v2, a2);
  }
  return result;
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::Page::platformInitialize(void)::$_0::operator() const(void)::{lambda(void)#1},void>::call()
{
  uint64_t *v0;
  uint64_t *v1;
  WTF::StringImpl *result;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  __int128 v7;
  void *v8;
  WTF *v9;
  WTF *v10;
  uint64_t v11;
  BOOL v12;
  WTF *v13;
  WTF::StringImpl *v14;
  WTF *v15;
  uint64_t *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  int v20;
  _OWORD v21[2];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v20 = 0;
  v0 = (uint64_t *)WTF::fastMalloc((WTF *)0x10);
  *v0 = (uint64_t)off_1E32EE908;
  v0[1] = (uint64_t)&v20;
  v16 = v0;
  WebCore::Page::forEachPage((uint64_t)&v16);
  (*(void (**)(uint64_t *))(*v0 + 8))(v0);
  WTFLogAlways();
  v1 = (uint64_t *)WTF::fastMalloc((WTF *)0x10);
  *v1 = (uint64_t)off_1E32EE930;
  v16 = v1;
  WebCore::Page::forEachPage((uint64_t)&v16);
  (*(void (**)(uint64_t *))(*v1 + 8))(v1);
  {
    WebCore::Document::allDocumentsMap(void)::documents = 0;
  }
  WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::values(&WebCore::Document::allDocumentsMap(void)::documents, &v16);
  WTFLogAlways();
  {
    WebCore::Document::allDocumentsMap(void)::documents = 0;
  }
  result = (WTF::StringImpl *)WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::values(&WebCore::Document::allDocumentsMap(void)::documents, &v16);
  v3 = v17;
  v4 = v19;
  if (v17 != v19)
  {
    v5 = v18;
    do
    {
      v6 = *(_QWORD *)(v3[4] + 8);
      v7 = *(_OWORD *)(v6 + 432);
      v21[0] = *(_OWORD *)(v6 + 416);
      v21[1] = v7;
      WTF::UUID::toString((WTF::UUID *)v21);
      WTF::String::utf8();
      WTF::String::utf8();
      WTFLogAlways();
      v9 = v13;
      v13 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 1)
          WTF::fastFree(v9, v8);
        else
          --*(_DWORD *)v9;
      }
      v10 = v15;
      v15 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 1)
          WTF::fastFree(v10, v8);
        else
          --*(_DWORD *)v10;
      }
      result = v14;
      v14 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v8);
        else
          *(_DWORD *)result -= 2;
      }
      while (1)
      {
        v3 += 6;
        if (v3 == v5)
          break;
        v11 = v3[2];
        if (*v3 | v3[1] | v11)
          v12 = v11 == -1;
        else
          v12 = 1;
        if (!v12)
          goto LABEL_21;
      }
      v3 = v5;
LABEL_21:
      ;
    }
    while (v3 != v4);
  }
  return result;
}

void sub_194F036F4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF *a16, WTF::StringImpl *a17, WTF *a18)
{
  if (a16)
  {
    if (*(_DWORD *)a16 == 1)
      WTF::fastFree(a16, a2);
    else
      --*(_DWORD *)a16;
  }
  if (a18)
  {
    if (*(_DWORD *)a18 == 1)
      WTF::fastFree(a18, a2);
    else
      --*(_DWORD *)a18;
  }
  if (a17)
  {
    if (*(_DWORD *)a17 == 2)
      WTF::StringImpl::destroy(a17, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a17 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Page::platformInitialize(void)::$_0::operator() const(void)::{lambda(void)#1}::operator() const(void)::{lambda(WebCore::Page&)#1},void,WebCore::Page&>::call(uint64_t result)
{
  ++**(_DWORD **)(result + 8);
  return result;
}

void WTF::Detail::CallableWrapper<WebCore::Page::platformInitialize(void)::$_0::operator() const(void)::{lambda(void)#1}::operator() const(void)::{lambda(WebCore::Page&)#2},void,WebCore::Page&>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  void *v5;
  WTF *v6;

  v2 = *(_QWORD *)(a2 + 160);
  if (v2)
    v3 = *(_BYTE *)(v2 + 144) == 0;
  else
    v3 = 0;
  if (v3)
  {
    v4 = *(_QWORD *)(v2 + 296);
    if (v4)
      WTF::String::utf8();
    WTFLogAlways();
    if (v4 && v6)
    {
      if (*(_DWORD *)v6 == 1)
        WTF::fastFree(v6, v5);
      else
        --*(_DWORD *)v6;
    }
  }
}

void sub_194F03850(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF *a12)
{
  uint64_t v12;

  if (v12 && a12)
  {
    if (*(_DWORD *)a12 == 1)
      WTF::fastFree(a12, a2);
    else
      --*(_DWORD *)a12;
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WTF::HashTable<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>,WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>,WTF::IdentityExtractor,WTF::SchedulePairHash,WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>>,WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>>>::reinsert(uint64_t *a1, uint64_t *a2)
{
  void *v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  const void *v10;
  const void *v11;
  const void *v12;

  v4 = (uint64_t *)WTF::HashTable<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>,WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>,WTF::IdentityExtractor,WTF::SchedulePairHash,WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>>,WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>>,WTF::SchedulePairHash>,WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>>(a1, a2);
  v5 = *v4;
  *v4 = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr((unsigned int *)v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, (unsigned int *)v5));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)v5);
      v10 = *(const void **)(v5 + 24);
      *(_QWORD *)(v5 + 24) = 0;
      if (v10)
        CFRelease(v10);
      v11 = *(const void **)(v5 + 16);
      *(_QWORD *)(v5 + 16) = 0;
      if (v11)
        CFRelease(v11);
      v12 = *(const void **)(v5 + 8);
      *(_QWORD *)(v5 + 8) = 0;
      if (v12)
        CFRelease(v12);
      WTF::fastFree((WTF *)v5, v3);
    }
  }
  v8 = *a2;
  *a2 = 0;
  *v4 = v8;
  return v4;
}

uint64_t *WTF::HashTable<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>,WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>,WTF::IdentityExtractor,WTF::SchedulePairHash,WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>>,WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>>>::remove(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  const void *v12;
  const void *v13;
  const void *v14;

  v2 = result;
  v3 = *a2;
  *a2 = -1;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v12 = *(const void **)(v3 + 24);
      *(_QWORD *)(v3 + 24) = 0;
      if (v12)
        CFRelease(v12);
      v13 = *(const void **)(v3 + 16);
      *(_QWORD *)(v3 + 16) = 0;
      if (v13)
        CFRelease(v13);
      v14 = *(const void **)(v3 + 8);
      *(_QWORD *)(v3 + 8) = 0;
      if (v14)
        CFRelease(v14);
      result = (uint64_t *)WTF::fastFree((WTF *)v3, a2);
    }
  }
  ++*(_DWORD *)(*v2 - 16);
  v6 = *v2;
  if (*v2)
    v7 = *(_DWORD *)(v6 - 12) - 1;
  else
    v7 = -1;
  *(_DWORD *)(v6 - 12) = v7;
  v8 = *v2;
  if (*v2)
  {
    v9 = 6 * *(_DWORD *)(v8 - 12);
    v10 = *(_DWORD *)(v8 - 4);
    if (v9 < v10 && v10 >= 9)
      return WTF::HashTable<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>,WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>,WTF::IdentityExtractor,WTF::SchedulePairHash,WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>>,WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>>>::rehash(v2, v10 >> 1, 0);
  }
  return result;
}

uint64_t WebCore::JSSVGGeometryElement::prototype(WebCore::JSSVGGeometryElement *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t v12;
  JSC::JSCell *v13;
  unint64_t Structure;
  JSC::Structure *v15;
  JSC::JSCell *v16;
  uint64_t v17;
  int v19;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_4;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSSVGGeometryElement::s_info
      + ~((_QWORD)&WebCore::JSSVGGeometryElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGGeometryElement::s_info
                                                                   + ~((_QWORD)&WebCore::JSSVGGeometryElement::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSSVGGeometryElement::s_info)
  {
    v19 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v19) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v19;
      if (v11 == &WebCore::JSSVGGeometryElement::s_info)
        goto LABEL_3;
    }
    goto LABEL_4;
  }
LABEL_3:
  v12 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v12)
  {
LABEL_4:
    v13 = (JSC::JSCell *)WebCore::JSSVGGraphicsElement::prototype(this, a2, a3);
    Structure = WebCore::JSSVGGeometryElementPrototype::createStructure((uint64_t *)this, (uint64_t)a2, v13);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v16 = (JSC::JSCell *)WebCore::JSSVGGeometryElementPrototype::create(this, a2, Structure, v15);
    v17 = WebCore::JSSVGGeometryElement::createStructure((uint64_t *)this, (uint64_t)a2, v16);
    v12 = WebCore::cacheDOMStructure((JSCell *)a2, v17, (uint64_t)&WebCore::JSSVGGeometryElement::s_info);
  }
  return *(_QWORD *)(v12 + 48);
}

uint64_t WebCore::JSSVGGeometryElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGGraphicsElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGGraphicsElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGGraphicsElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSVGGraphicsElement::JSSVGGraphicsElement(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t result;

  v4 = *a4;
  *a4 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(a1, a2);
  *(_QWORD *)(result + 24) = v4;
  *(_QWORD *)(result + 32) = 0;
  return result;
}

uint64_t WebCore::JSSVGGeometryElementPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGGeometryElementPrototype::create(WebCore::JSSVGGeometryElementPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<6u>(this, (uint64_t)&WebCore::JSSVGGeometryElement::s_info, &WebCore::JSSVGGeometryElementPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGGeometryElement>,(WebCore::DOMConstructorID)813>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  unint64_t v16;
  WebCore::JSDOMGlobalObject *v17;
  uint64_t v18;
  unint64_t v20;
  unint64_t v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  int v24;
  int v25;
  uint64_t v26;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6504);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGGraphicsElement>,(WebCore::DOMConstructorID)815>(a1, a2);
  v7 = v6;
  LODWORD(v22) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v20 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v20);
    v5[2] = SlowCase + (int)v20;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v22, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGGeometryElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 >= v10[2847])
  {
    v2 = v10[2848];
    if ((v2 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v2 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_11;
    }
    v21 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v21);
    v10[2848] = v2 + (int)v21;
  }
  v10[2846] = v2 + 48;
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v22);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v22);
  v14 = v22;
  v22 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v22);
  v16 = *(_QWORD *)(v5[227] + 2160);
  v18 = WebCore::JSSVGGeometryElement::prototype((WebCore::JSSVGGeometryElement *)a1, (JSC::VM *)a2, v17);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v16, v18, 14, (uint64_t)&v22);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6504) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGGeometryElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGGeometryElementPrototype::s_info != (char **)(16
                                                                  * *(unsigned int *)(16
                                                                                    * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                    + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGGeometryElement>,(WebCore::DOMConstructorID)813>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGGeometryElement_pathLength(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedPrimitiveProperty<float>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 216));
}

uint64_t WebCore::JSSVGGraphicsElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

WTF::StringImpl *WebCore::JSSVGGradientElementPrototype::finishCreation(WebCore::JSSVGGradientElementPrototype *this, JSC::VM *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<9u>(a2, (uint64_t)&WebCore::JSSVGGradientElement::s_info, (uint64_t)&WebCore::JSSVGGradientElementPrototypeTableValues, this);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5 = JSC::jsNontrivialString((uint64_t)a2, &v8);
  JSC::JSObject::putDirectWithoutTransition((int *)this, a2, v4, v5, 6);
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::JSSVGGradientElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::JSSVGGradientElement::createPrototype(WebCore::JSSVGGradientElement *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  int v3;
  JSC::JSCell *v5;
  unint64_t v6;
  WebCore::JSDOMGlobalObject *v7;
  JSC::Structure *v8;

  v3 = (int)a2;
  v5 = (JSC::JSCell *)WebCore::JSSVGElement::prototype(this, a2, a3);
  v6 = JSC::Structure::create((uint64_t *)this, v3, v5);
  *(_DWORD *)(v6 + 16) |= 0x80000u;
  return WebCore::JSSVGGradientElementPrototype::create(this, v6, v7, v8);
}

unint64_t WebCore::JSSVGGradientElementPrototype::create(WebCore::JSSVGGradientElementPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  unint64_t v6;
  int v7;

  v6 = JSC::allocateCell<WebCore::JSAbstractRangePrototype>((uint64_t)this);
  v7 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)v6 = a2 >> 4;
  *(_DWORD *)(v6 + 4) = v7;
  *(_QWORD *)(v6 + 8) = 0;
  WebCore::JSSVGGradientElementPrototype::finishCreation((WebCore::JSSVGGradientElementPrototype *)v6, this);
  return v6;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGGradientElement>,(WebCore::DOMConstructorID)814>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v19;
  unint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  int v23;
  int v24;
  uint64_t v25;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6512);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGElement>,(WebCore::DOMConstructorID)783>(a1, a2);
  v7 = v6;
  LODWORD(v21) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v19 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v19);
    v5[2] = SlowCase + (int)v19;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v21, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGGradientElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 >= v10[2847])
  {
    v2 = v10[2848];
    if ((v2 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v2 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_11;
    }
    v20 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v20);
    v10[2848] = v2 + (int)v20;
  }
  v10[2846] = v2 + 48;
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v21 = 0;
  v22 = v2;
  v23 = -1;
  v24 = 0x1000000;
  v25 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v21);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v21);
  v14 = v21;
  v21 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v21 = 0;
  v22 = v2;
  v23 = -1;
  v24 = 0x1000000;
  v25 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v21);
  v16 = *(_QWORD *)(v5[227] + 2160);
  v17 = *(_QWORD *)(WebCore::getDOMStructure<WebCore::JSSVGGradientElement>((WebCore::JSSVGGradientElement *)a1, (JSC::VM *)a2)+ 48);
  v21 = 0;
  v22 = v2;
  v23 = -1;
  v24 = 0x1000000;
  v25 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v16, v17, 14, (uint64_t)&v21);
  JSC::reifyStaticProperties<4u>((JSC::VM *)a1, (uint64_t)&WebCore::JSSVGGradientElement::s_info, &WebCore::JSSVGGradientElementConstructorTableValues, (JSC::JSObject *)v2);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6512) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGGradientElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGGradientElementPrototype::s_info != (char **)(16
                                                                  * *(unsigned int *)(16
                                                                                    * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                    + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGGradientElement>,(WebCore::DOMConstructorID)814>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGGradientElement_gradientUnits(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 200));
}

unint64_t WebCore::jsSVGGradientElement_gradientTransform(int a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedPropertyList<WebCore::SVGTransformList>>(a1, *(JSC::VM **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WebCore::JSDOMGlobalObject **)(*(_QWORD *)(a2 + 24) + 208));
}

unint64_t WebCore::jsSVGGradientElement_spreadMethod(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 192));
}

unint64_t WebCore::jsSVGGradientElement_href(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedString>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 184));
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGGraphicsElement>,(WebCore::DOMConstructorID)815>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  unint64_t v16;
  WebCore::JSDOMGlobalObject *v17;
  uint64_t v18;
  unint64_t v20;
  unint64_t v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  int v24;
  int v25;
  uint64_t v26;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6520);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGElement>,(WebCore::DOMConstructorID)783>(a1, a2);
  v7 = v6;
  LODWORD(v22) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v20 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v20);
    v5[2] = SlowCase + (int)v20;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v22, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGGraphicsElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 >= v10[2847])
  {
    v2 = v10[2848];
    if ((v2 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v2 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_11;
    }
    v21 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v21);
    v10[2848] = v2 + (int)v21;
  }
  v10[2846] = v2 + 48;
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v22);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v22);
  v14 = v22;
  v22 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v22);
  v16 = *(_QWORD *)(v5[227] + 2160);
  v18 = WebCore::JSSVGGraphicsElement::prototype((WebCore::JSSVGGraphicsElement *)a1, (JSC::VM *)a2, v17);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v16, v18, 14, (uint64_t)&v22);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6520) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGGraphicsElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGGraphicsElementPrototype::s_info != (char **)(16
                                                                  * *(unsigned int *)(16
                                                                                    * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                    + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGGraphicsElement>,(WebCore::DOMConstructorID)815>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGGraphicsElement_transform(int a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedPropertyList<WebCore::SVGTransformList>>(a1, *(JSC::VM **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WebCore::JSDOMGlobalObject **)(*(_QWORD *)(a2 + 24) + 208));
}

unint64_t WebCore::jsSVGGraphicsElement_nearestViewportElement(WebCore *a1, uint64_t a2)
{
  JSC::JSGlobalObject *v3;
  WebCore::JSDOMGlobalObject *v4;
  WebCore::Element *v5;

  v3 = *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = (WebCore::JSDOMGlobalObject *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 1328))(*(_QWORD *)(a2 + 24));
  if (v4)
    return WebCore::toJS(a1, v3, v4, v5);
  else
    return 2;
}

unint64_t WebCore::jsSVGGraphicsElement_farthestViewportElement(WebCore *a1, uint64_t a2)
{
  JSC::JSGlobalObject *v3;
  WebCore::JSDOMGlobalObject *v4;
  WebCore::Element *v5;

  v3 = *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = (WebCore::JSDOMGlobalObject *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 1336))(*(_QWORD *)(a2 + 24));
  if (v4)
    return WebCore::toJS(a1, v3, v4, v5);
  else
    return 2;
}

unint64_t WebCore::jsSVGGraphicsElement_requiredExtensions(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  WebCore::SVGElementRareData *v5;
  void *v6;
  WebCore::SVGConditionalProcessingAttributes *v7;

  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 184) + 8);
  *(_DWORD *)(v4 + 24) += 2;
  v5 = (WebCore::SVGElementRareData *)WebCore::SVGElement::ensureSVGRareData((WebCore::SVGElement *)v4);
  v7 = WebCore::SVGElementRareData::conditionalProcessingAttributes(v5, (WebCore::SVGElement *)v4);
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v4, v6);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  return WebCore::wrap<WebCore::SVGStringList>(a1, v3, *((WTF **)v7 + 1));
}

unint64_t WebCore::jsSVGGraphicsElement_systemLanguage(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  WebCore::SVGElementRareData *v5;
  void *v6;
  WebCore::SVGConditionalProcessingAttributes *v7;

  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 184) + 8);
  *(_DWORD *)(v4 + 24) += 2;
  v5 = (WebCore::SVGElementRareData *)WebCore::SVGElement::ensureSVGRareData((WebCore::SVGElement *)v4);
  v7 = WebCore::SVGElementRareData::conditionalProcessingAttributes(v5, (WebCore::SVGElement *)v4);
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v4, v6);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  return WebCore::wrap<WebCore::SVGStringList>(a1, v3, *((WTF **)v7 + 2));
}

unint64_t WebCore::jsSVGGraphicsElement_requiredFeatures(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  WebCore::SVGElementRareData *v5;
  void *v6;
  WTF **v7;

  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 184) + 8);
  *(_DWORD *)(v4 + 24) += 2;
  v5 = (WebCore::SVGElementRareData *)WebCore::SVGElement::ensureSVGRareData((WebCore::SVGElement *)v4);
  v7 = (WTF **)WebCore::SVGElementRareData::conditionalProcessingAttributes(v5, (WebCore::SVGElement *)v4);
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v4, v6);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  return WebCore::wrap<WebCore::SVGStringList>(a1, v3, *v7);
}

uint64_t WebCore::JSSVGImageElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGGraphicsElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGGraphicsElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGGraphicsElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSVGImageElementPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGImageElementPrototype::create(WebCore::JSSVGImageElementPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<8u>(this, (uint64_t)&WebCore::JSSVGImageElement::s_info, (uint64_t)&WebCore::JSSVGImageElementPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGImageElement>,(WebCore::DOMConstructorID)816>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6528);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGGraphicsElement>,(WebCore::DOMConstructorID)815>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v34);
    v5[2] = SlowCase + (int)v34;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGImageElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v35 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v35);
    v10[2848] = v2 + (int)v35;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSSVGImageElement::s_info + ~((_QWORD)&WebCore::JSSVGImageElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGImageElement::s_info + ~((_QWORD)&WebCore::JSSVGImageElement::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSSVGImageElement::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSSVGImageElement::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSSVGGraphicsElement::prototype((WebCore::JSSVGGraphicsElement *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSSVGImageElementPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v30 = (JSC::JSCell *)WebCore::JSSVGImageElementPrototype::create((WebCore::JSSVGImageElementPrototype *)a1, (JSC::VM *)a2, Structure, v29);
  v31 = WebCore::JSSVGImageElement::createStructure((uint64_t *)a1, a2, v30);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v31, (uint64_t)&WebCore::JSSVGImageElement::s_info);
LABEL_22:
  v32 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v32, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6528) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGImageElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGImageElementPrototype::s_info != (char **)(16
                                                               * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                 + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGImageElement>,(WebCore::DOMConstructorID)816>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGImageElement_x(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 232));
}

unint64_t WebCore::jsSVGImageElement_y(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 240));
}

unint64_t WebCore::jsSVGImageElement_width(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 248));
}

unint64_t WebCore::jsSVGImageElement_height(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 256));
}

unint64_t WebCore::jsSVGImageElement_preserveAspectRatio(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGPreserveAspectRatio>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 264));
}

uint64_t WebCore::jsSVGImageElement_crossOrigin(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t *v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;
  WTF::StringImpl *v12;

  WebCore::SVGImageElement::crossOrigin(*(WebCore::SVGImageElement **)(a2 + 24), &v12);
  v3 = v12;
  if (!v12)
    return 2;
  v4 = *(_QWORD *)(a1 + 56);
  v5 = (uint64_t *)(v4 + 41968);
  v6 = *((_DWORD *)v12 + 1);
  if (!v6)
    goto LABEL_14;
  if (v6 == 1)
  {
    v8 = (unsigned __int8 *)*((_QWORD *)v12 + 1);
    if ((*((_BYTE *)v12 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_4;
      v9 = v10;
    }
    v5 = (uint64_t *)(v4 + 8 * v9 + 42216);
LABEL_14:
    v7 = *v5;
    goto LABEL_15;
  }
LABEL_4:
  v7 = *(_QWORD *)(v4 + 64760);
  if (!v7 || v12 != *(WTF::StringImpl **)(v7 + 8))
  {
    v7 = JSC::jsStringWithCacheSlowCase();
    v3 = v12;
    v12 = 0;
    if (!v3)
      return v7;
    goto LABEL_16;
  }
LABEL_15:
  v12 = 0;
LABEL_16:
  if (*(_DWORD *)v3 == 2)
    WTF::StringImpl::destroy(v3, v3);
  else
    *(_DWORD *)v3 -= 2;
  return v7;
}

BOOL WebCore::setJSSVGImageElement_crossOrigin(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WTF::StringImpl *v8;
  int v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v21;
  int v22;
  WTF::StringImpl *v23;
  int v24;
  char v25;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSSVGImageElement::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSSVGImageElement::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(WTF::StringImpl **)(a2 + 24);
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v10 = 0;
    v22 = 0;
LABEL_18:
    v21 = 0;
    v23 = v10;
    v11 = *((_QWORD *)v8 + 13);
    if (v11)
    {
      v12 = *(_DWORD *)(v11 + 4);
      if ((v12 & 1) == 0)
      {
        v13 = (uint64_t *)(v11 + 32);
        v14 = v12 >> 5;
        if (!v14)
          goto LABEL_31;
LABEL_24:
        v16 = 0;
        while (1)
        {
          v17 = *v13;
          if (*v13 == WebCore::HTMLNames::crossoriginAttr
            || *(_QWORD *)(v17 + 24) == *(_QWORD *)(WebCore::HTMLNames::crossoriginAttr + 24)
            && *(_QWORD *)(v17 + 32) == *(_QWORD *)(WebCore::HTMLNames::crossoriginAttr + 32))
          {
            goto LABEL_32;
          }
          ++v16;
          v13 += 2;
          if (v14 == v16)
            goto LABEL_31;
        }
      }
      v13 = *(uint64_t **)(v11 + 40);
      v14 = *(_DWORD *)(v11 + 52);
      if (v14)
        goto LABEL_24;
    }
LABEL_31:
    v16 = 0xFFFFFFFFLL;
LABEL_32:
    WebCore::Element::setAttributeInternal(v8, v16, (WebCore::TreeScope *)&WebCore::HTMLNames::crossoriginAttr, &v23, 0);
    v19 = v23;
    v23 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v18);
      else
        *(_DWORD *)v19 -= 2;
    }
    v15 = 1;
    v9 = v22;
    goto LABEL_36;
  }
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, this, (uint64_t)&v23);
  LOBYTE(v21) = 0;
  v22 = -1;
  v9 = v24;
  if (v24 == -1)
    return 0;
  ((void (*)(char *, WTF::StringImpl **, WTF::StringImpl **))off_1E32FCD30[v24])(&v25, &v21, &v23);
  v22 = v9;
  if (v24 != -1)
  {
    ((void (*)(char *, WTF::StringImpl **))off_1E32FBC30[v24])(&v25, &v23);
    v9 = v22;
  }
  if (!v9)
  {
    v10 = v21;
    goto LABEL_18;
  }
  v15 = 0;
LABEL_36:
  if (v9 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32FBC30[v9])(&v23, &v21);
  return v15;
}

unint64_t WebCore::jsSVGImageElement_href(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedString>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 224));
}

uint64_t WebCore::JSSVGImageElement::subspaceForImpl(WebCore::JSSVGImageElement *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  WTF *v17;
  void *v18;
  int v19;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 6608);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  v21 = *(_QWORD *)(v8 + 6608);
  if (!v21)
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v23, "IsoSpace T");
    v22 = 0;
    MEMORY[0x19AEA3204](v9, &v23, (char *)this + 192, (char *)this + 1872, 40, 8, &v22);
    v11 = v22;
    v22 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v23;
    v23 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v21 = v9;
    v13 = *(_QWORD *)(v8 + 6608);
    *(_QWORD *)(v8 + 6608) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = *(unsigned int *)(v6 + 2844);
    if ((_DWORD)v14 == *(_DWORD *)(v6 + 2840))
    {
      v15 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v6 + 2832, v14 + 1, (unint64_t)&v21);
      v14 = *(unsigned int *)(v6 + 2844);
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = *v15;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = v9;
    }
    *(_DWORD *)(v6 + 2844) = v14 + 1;
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v16 = *(_QWORD *)(v3 + 6608);
  *(_QWORD *)(v3 + 6608) = v4;
  if (v16)
  {
    v17 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v17, v18);
  }
  v19 = __ldxr((unsigned __int8 *)v6);
  if (v19 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSSVGImageElement::toWrapped(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL4 v3;
  char **v4;
  BOOL v5;

  if ((a2 & 0xFFFE000000000002) != 0)
    return 0;
  v2 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v3 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v4 = (char **)(16 * v2);
  if ((_DWORD)v2)
    v5 = v4 == &WebCore::JSSVGImageElement::s_info;
  else
    v5 = 1;
  if (!v5)
  {
    do
    {
      v4 = (char **)v4[2];
      v3 = v4 != 0;
    }
    while (v4 != &WebCore::JSSVGImageElement::s_info && v4 != 0);
  }
  if (v3)
    return *(_QWORD *)(a2 + 24);
  else
    return 0;
}

_DWORD *WebCore::JSSVGLength::destroy(WebCore::JSSVGLength *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSSVGLength::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSVGLengthPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGLengthPrototype::create(WebCore::JSSVGLengthPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<18u>(this, (uint64_t)&WebCore::JSSVGLength::s_info, (uint64_t)&WebCore::JSSVGLengthPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGLength>,(WebCore::DOMConstructorID)817>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6536);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGLength>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSSVGLength::s_info + ~((_QWORD)&WebCore::JSSVGLength::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGLength::s_info + ~((_QWORD)&WebCore::JSSVGLength::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSSVGLength::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSSVGLength::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSSVGLengthPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSSVGLengthPrototype::create((WebCore::JSSVGLengthPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSSVGLength::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSSVGLength::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  JSC::reifyStaticProperties<11u>((JSC::VM *)a1, (uint64_t)&WebCore::JSSVGLength::s_info, (uint64_t)&WebCore::JSSVGLengthConstructorTableValues, (JSC::JSObject *)v2);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6536) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGLengthConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGLengthPrototype::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGLength>,(WebCore::DOMConstructorID)817>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGLength_unitType(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a2 + 24) + 32) | 0xFFFE000000000000;
}

uint64_t WebCore::jsSVGLength_value(JSC *a1, uint64_t a2)
{
  JSC::VM *v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  JSValue v11;
  JSC::JSGlobalObject *v12;
  int v13;
  WTF::StringImpl *v14;
  int v15;
  _BYTE v16[8];
  WTF::StringImpl *v17;

  v3 = (JSC::VM *)*((_QWORD *)a1 + 7);
  WebCore::SVGLength::valueForBindings(*(WebCore::SVGLength **)(a2 + 24), (uint64_t)&v13);
  if (!v15)
  {
    v4 = *(float *)&v13;
    if (COERCE__INT64(fabs(*(float *)&v13)) <= 0x7FEFFFFFFFFFFFFFLL
      && (v5 = (int)*(float *)&v13, (double)(int)v5 == v4)
      && ((_DWORD)v5 || (v13 & 0x80000000) == 0))
    {
      v6 = 0;
      v7 = v5 | 0xFFFE000000000000;
    }
    else
    {
      v6 = 0;
      v7 = *(_QWORD *)&v4 + 0x2000000000000;
    }
LABEL_8:
    ((void (*)(_BYTE *, int *))off_1E32FC368[v6])(v16, &v13);
    return v7;
  }
  if (v15 == 1)
  {
    v9 = (WTF::StringImpl *)v13;
    v16[0] = v13;
    v10 = v14;
    v14 = 0;
    v17 = v10;
    if (!*((_QWORD *)v3 + 2))
    {
      v11.super.isa = (Class)WebCore::createDOMException(a1, (JSC::JSGlobalObject *)v13, (JSC::JSGlobalObject *)&v17);
      JSC::VM::throwException(v3, a1, v11);
      v10 = v17;
    }
    v17 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v9);
      else
        *(_DWORD *)v10 -= 2;
    }
    v7 = 0;
    v6 = 1;
    goto LABEL_8;
  }
  v12 = (JSC::JSGlobalObject *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::setJSSVGLength_value(v12);
}

BOOL WebCore::setJSSVGLength_value(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  WTF *v10;
  double v11;
  float v12;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  JSValue v16;
  WTF::StringImpl *v17;
  double v18;
  WTF::StringImpl *v19;
  int v20[2];
  WTF::StringImpl *v21;
  char v22;

  v4 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGLength::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGLength::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(WTF **)(a2 + 24);
  *(_QWORD *)v20 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v20, a1);
    v11 = v18;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
    return 0;
  if ((*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v11 < -3.40282347e38 || v11 > 3.40282347e38)
  {
    JSC::throwTypeError();
    return 0;
  }
  v12 = v11;
  WebCore::SVGLength::setValueForBindings(v10, v12, (uint64_t)v20);
  if (v22)
  {
    v14 = (WTF::StringImpl *)LOBYTE(v20[0]);
    v15 = v21;
    v21 = 0;
    v19 = v15;
    if (!*(_QWORD *)(v4 + 16))
    {
      v16.super.isa = (Class)WebCore::createDOMException(a1, (JSC::JSGlobalObject *)LOBYTE(v20[0]), (JSC::JSGlobalObject *)&v19);
      JSC::VM::throwException((JSC::VM *)v4, a1, v16);
      v15 = v19;
    }
    v19 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v14);
      else
        *(_DWORD *)v15 -= 2;
    }
    if (v22)
    {
      v17 = v21;
      v21 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v14);
        else
          *(_DWORD *)v17 -= 2;
      }
    }
  }
  return 1;
}

unint64_t WebCore::jsSVGLength_valueInSpecifiedUnits(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(a2 + 24) + 28);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, (double)(int)v4 == v3)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

BOOL WebCore::setJSSVGLength_valueInSpecifiedUnits(JSC *this, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  JSValue v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  float v15;
  uint64_t v16;
  double v18;
  unint64_t v19;
  WTF::StringImpl *v20;

  v4 = *((_QWORD *)this + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGLength::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGLength::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v19 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v19, this);
    v11 = v18;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
    return 0;
  if ((*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v11 < -3.40282347e38 || v11 > 3.40282347e38)
  {
    JSC::throwTypeError();
    return 0;
  }
  if (*(_BYTE *)(v10 + 24) == 1)
  {
    LOBYTE(v19) = 4;
    v20 = 0;
    if (!*(_QWORD *)(v4 + 16))
    {
      v12.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)4, (JSC::JSGlobalObject *)&v20);
      JSC::VM::throwException((JSC::VM *)v4, this, v12);
      v14 = v20;
      v20 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v13);
        else
          *(_DWORD *)v14 -= 2;
      }
    }
  }
  else
  {
    v15 = v11;
    *(float *)(v10 + 28) = v15;
    v16 = *(_QWORD *)(v10 + 16);
    if (v16)
      (*(void (**)(uint64_t, uint64_t, const char *, uint64_t))(*(_QWORD *)v16 + 32))(v16, v10, "The provided value is outside the range of a float", 51);
  }
  return 1;
}

uint64_t WebCore::jsSVGLength_valueAsString(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;
  WTF::StringImpl *v11;

  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a2 + 24) + 32))(&v11);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = v11;
  if (!v11 || (v5 = *((_DWORD *)v11 + 1)) == 0)
  {
    v6 = *(_QWORD *)(v3 + 41968);
LABEL_7:
    v11 = 0;
    if (!v4)
      return v6;
    goto LABEL_16;
  }
  if (v5 != 1)
    goto LABEL_4;
  v7 = (unsigned __int8 *)*((_QWORD *)v11 + 1);
  if ((*((_BYTE *)v11 + 16) & 4) != 0)
  {
    v8 = *v7;
LABEL_14:
    v6 = *(_QWORD *)(v3 + 8 * v8 + 42216);
    goto LABEL_15;
  }
  v9 = *(unsigned __int16 *)v7;
  if (v9 <= 0xFF)
  {
    v8 = v9;
    goto LABEL_14;
  }
LABEL_4:
  v6 = *(_QWORD *)(v3 + 64760);
  if (!v6 || v11 != *(WTF::StringImpl **)(v6 + 8))
  {
    v6 = JSC::jsStringWithCacheSlowCase();
    v4 = v11;
    goto LABEL_7;
  }
LABEL_15:
  v11 = 0;
LABEL_16:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy(v4, v4);
  else
    *(_DWORD *)v4 -= 2;
  return v6;
}

BOOL WebCore::setJSSVGLength_valueAsString(JSC *this, unint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  unsigned __int16 *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  JSValue v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  int v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  int v27[2];
  WTF::StringImpl *v28;
  char v29;

  v4 = *((_QWORD *)this + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGLength::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGLength::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)v27 = a3;
  if ((a3 & 0xFFFE000000000002) == 0 && *(_BYTE *)(a3 + 5) == 2)
  {
    v11 = *(WTF::StringImpl **)(a3 + 8);
    if ((v11 & 1) != 0)
    {
      v11 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)a3, this);
      if (!v11)
        goto LABEL_17;
    }
    else if (!v11)
    {
LABEL_17:
      v25 = v11;
      goto LABEL_18;
    }
    *(_DWORD *)v11 += 2;
    goto LABEL_17;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v27, this);
LABEL_18:
  if (*(_DWORD *)(v4 + 80))
  {
    v12 = v25;
    if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4))
    {
      v24 = 1;
      v25 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v12 -= 2;
      }
      v17 = 0;
      v16 = 1;
      goto LABEL_32;
    }
  }
  else
  {
    v12 = v25;
  }
  v24 = 0;
  v23 = 0;
  if (*(_BYTE *)(v10 + 24) == 1)
  {
    LOBYTE(v27[0]) = 4;
    v28 = 0;
    v29 = 1;
  }
  else
  {
    if (v12)
    {
      v13 = (unsigned __int16 *)*((_QWORD *)v12 + 1);
      v14 = *((unsigned int *)v12 + 1) | ((unint64_t)((*((_DWORD *)v12 + 4) >> 2) & 1) << 32);
    }
    else
    {
      v13 = 0;
      v14 = 0x100000000;
    }
    WebCore::SVGLengthValue::setValueAsString(v10 + 28, v13, v14, v27);
    if (!v29)
    {
      v15 = *(_QWORD *)(v10 + 16);
      if (v15)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 32))(v15, v10);
    }
  }
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  if (v29)
  {
    v19 = (WTF::StringImpl *)LOBYTE(v27[0]);
    LOBYTE(v25) = v27[0];
    v20 = v28;
    v28 = 0;
    v26 = v20;
    if (!*(_QWORD *)(v4 + 16))
    {
      v21.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v27[0]), (JSC::JSGlobalObject *)&v26);
      JSC::VM::throwException((JSC::VM *)v4, this, v21);
      v20 = v26;
    }
    v26 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v19);
      else
        *(_DWORD *)v20 -= 2;
    }
    if (v29)
    {
      v22 = v28;
      v28 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, v19);
        else
          *(_DWORD *)v22 -= 2;
      }
    }
  }
  v16 = 0;
  v17 = 1;
LABEL_32:
  ((void (*)(int *, uint64_t *))off_1E32FBED0[v16])(v27, &v23);
  return v17;
}

uint64_t WebCore::JSSVGLengthOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

_QWORD *WebCore::JSSVGLengthOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::createWrapper<WebCore::SVGLength,WebCore::SVGLength>(uint64_t a1, WTF **a2)
{
  WTF *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v16;
  JSC::Structure *v17;
  JSC::JSCell *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  void *v34;
  int v35;
  unint64_t SlowCase;
  WTF *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *Allocator;
  unint64_t v43;
  _QWORD *v44;
  WTF *v45;

  v4 = *a2;
  v5 = *(_QWORD *)(a1 + 3296);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSSVGLength::s_info + ~((_QWORD)&WebCore::JSSVGLength::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGLength::s_info + ~((_QWORD)&WebCore::JSSVGLength::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSSVGLength::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSSVGLength::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = *(uint64_t **)(a1 + 56);
  Structure = WebCore::JSSVGLengthPrototype::createStructure(v14, a1, *(JSC::JSCell **)(a1 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v18 = (JSC::JSCell *)WebCore::JSSVGLengthPrototype::create((WebCore::JSSVGLengthPrototype *)v14, Structure, v16, v17);
  v19 = WebCore::JSSVGLength::createStructure(v14, a1, v18);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v19, (uint64_t)&WebCore::JSSVGLength::s_info);
LABEL_8:
  v20 = *(_QWORD *)(a1 + 56);
  v21 = *(_QWORD *)(v20 + 41456);
  v22 = *(_QWORD *)(v21 + 23536);
  v23 = *(_QWORD **)(v22 + 6616);
  if (v23)
    goto LABEL_28;
  v24 = *(_QWORD *)(v21 + 22648);
  if (__ldaxr((unsigned __int8 *)v24))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v24))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v24);
LABEL_13:
  v26 = *(_QWORD *)(v24 + 2824);
  if (!*(_QWORD *)(v26 + 6616))
  {
    v27 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v45, "IsoSpace T");
    v44 = 0;
    MEMORY[0x19AEA3204](v27, &v45, v20 + 192, v20 + 1872, 32, 8, &v44);
    v29 = (uint64_t)v44;
    v44 = 0;
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    v30 = v45;
    v45 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 1)
        WTF::fastFree(v30, v28);
      else
        --*(_DWORD *)v30;
    }
    v31 = *(_QWORD *)(v26 + 6616);
    *(_QWORD *)(v26 + 6616) = v27;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  }
  v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v32 = *(_QWORD *)(v22 + 6616);
  *(_QWORD *)(v22 + 6616) = v23;
  if (v32)
  {
    v33 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v33, v34);
  }
  v35 = __ldxr((unsigned __int8 *)v24);
  if (v35 != 1)
  {
    __clrex();
    goto LABEL_27;
  }
  if (__stlxr(0, (unsigned __int8 *)v24))
LABEL_27:
    WTF::Lock::unlockSlow((WTF::Lock *)v24);
LABEL_28:
  SlowCase = v23[3];
  if (SlowCase < v23[4])
  {
LABEL_29:
    v23[3] = SlowCase + 32;
    goto LABEL_30;
  }
  SlowCase = v23[5];
  if ((SlowCase & 1) == 0)
  {
    v43 = *(_QWORD *)(SlowCase + 8) ^ v23[6];
    v23[4] = SlowCase + HIDWORD(v43);
    v23[5] = SlowCase + (int)v43;
    goto LABEL_29;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_30:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  v37 = *a2;
  *a2 = 0;
  *(_QWORD *)(SlowCase + 24) = v37;
  if (*(_BYTE *)(v20 + 755))
    __dmb(0xAu);
  v38 = *(_QWORD *)(a1 + 3320);
  if ((byte_1ECE81618 & 1) == 0)
  {
    _MergedGlobals_117 = (uint64_t)&off_1E32F7560;
    byte_1ECE81618 = 1;
  }
  v45 = v4;
  if ((SlowCase & 8) != 0)
    v39 = (SlowCase - 112) | 1;
  else
    v39 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v39 & 1) != 0)
    v40 = v39 + 47;
  else
    v40 = *(_QWORD *)v39 + 32;
  Allocator = *(_QWORD **)(v40 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v40 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &_MergedGlobals_117;
  Allocator[2] = v38;
  v44 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v38 + 32), (uint64_t *)&v45, (uint64_t *)&v44);
  if (v44)
    v44[1] = 3;
  return SlowCase;
}

uint64_t WebCore::wrap<WebCore::SVGLength>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  WTF *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  WTF *v14;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v3)
  {
    v4 = *(_DWORD *)(v3 - 8);
    v5 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    v8 = v4 & ((v7 >> 31) ^ v7);
    v9 = *(WTF **)(v3 + 16 * v8);
    if (v9 == a3)
    {
LABEL_6:
      v11 = *(_QWORD *)(v3 + 16 * v8 + 8);
      if (v11)
      {
        if ((*(_BYTE *)(v11 + 8) & 3) == 0)
        {
          v12 = *(_QWORD *)v11;
          if (*(_QWORD *)v11)
            return v12;
        }
      }
    }
    else
    {
      v10 = 1;
      while (v9)
      {
        v8 = ((_DWORD)v8 + v10) & v4;
        v9 = *(WTF **)(v3 + 16 * v8);
        ++v10;
        if (v9 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 2);
  v14 = a3;
  if (*(void (***)(WebCore::SVGLength *__hidden))a3 == off_1E32EE148)
  {
    v12 = WebCore::createWrapper<WebCore::SVGLength,WebCore::SVGLength>(a2, &v14);
    if (v14)
    {
      if (*((_DWORD *)v14 + 2) == 1)
        (*(void (**)(void))(*(_QWORD *)v14 + 8))();
      else
        --*((_DWORD *)v14 + 2);
    }
    return v12;
  }
  result = 439;
  __break(0xC471u);
  return result;
}

BOOL WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGLengthList>::initializeProperties(uint64_t a1, uint64_t a2, JSC::JSCell **a3)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  unint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v13;

  v6 = a2 + 41952;
  JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, *(_QWORD *)(*(_QWORD *)(a2 + 41952) + 1768), 0xFFFE000000000000, 6);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8 = JSC::jsNontrivialString(a2, &v13);
  v9 = v13;
  v13 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  *(_QWORD *)(a1 + 32) = v8;
  if (a1 && v8 && *(_DWORD *)(a2 + 760) >= *(unsigned __int8 *)(a1 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a2 + 192), (const JSCell *)a1);
  JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, *(_QWORD *)(*(_QWORD *)v6 + 1968), v8, 6);
  v10 = *(_QWORD *)(*(_QWORD *)v6 + 2160);
  v11 = WebCore::getDOMStructure<WebCore::JSSVGLengthList>((WebCore::JSSVGLengthList *)a2, a3);
  return JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, v10, *(_QWORD *)(v11 + 48), 14);
}

WTF::StringImpl *WebCore::JSSVGLengthListPrototype::finishCreation(WebCore::JSSVGLengthListPrototype *this, JSC::VM *a2)
{
  unint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t Direct;
  WTF::StringImpl *v8;
  unint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<10u>(a2, (uint64_t)&WebCore::JSSVGLengthList::s_info, (uint64_t)&WebCore::JSSVGLengthListPrototypeTableValues, this);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2712);
  v5 = *(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28) + 672);
  v6 = (_DWORD *)MEMORY[0x1E0CBEBF0];
  *MEMORY[0x1E0CBEBF0] += 2;
  Direct = JSC::JSObject::getDirect(v5, a2, (unint64_t)v6);
  JSC::JSObject::putDirect((unsigned __int8 *)this, a2, v4, Direct, 4);
  if (*v6 == 2)
    WTF::StringImpl::destroy(MEMORY[0x1E0CBEBF0], v8);
  else
    *v6 -= 2;
  v9 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v10 = JSC::jsNontrivialString((uint64_t)a2, &v13);
  JSC::JSObject::putDirectWithoutTransition((int *)this, a2, v9, v10, 6);
  result = v13;
  v13 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_DWORD *WebCore::JSSVGLengthList::destroy(WebCore::JSSVGLengthList *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSSVGLengthList::put(uint64_t a1, JSC *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v6;
  JSC::VM *v7;
  _BYTE *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  _BOOL4 v16;
  char **v17;
  BOOL v18;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int16 *v24;
  uint64_t v25;
  unsigned int v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  JSValue v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 *v39;
  unsigned int v40;
  _DWORD *v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  int v45;

  if (*(_QWORD *)(a5 + 8) != a1)
    return JSC::JSObject::put();
  if (!a3)
    return JSC::JSObject::put();
  v6 = *(_DWORD *)(a3 + 16);
  if ((v6 & 0x20) != 0)
    return JSC::JSObject::put();
  v7 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v8 = *(_BYTE **)(a3 + 8);
  v9 = *(unsigned int *)(a3 + 4);
  if ((v6 & 4) != 0)
  {
    if ((_DWORD)v9)
    {
      v35 = *v8 - 48;
      if (v35 <= 9 && (v9 < 2 || *v8 != 48))
      {
        v38 = v9 - 1;
        v39 = v8 + 1;
        while (v38)
        {
          if (v35 > 0x19999999)
            goto LABEL_55;
          v40 = *v39 - 48;
          if (v40 > 9)
            goto LABEL_55;
          v36 = 0;
          LODWORD(v9) = 0;
          v37 = 0;
          v27 = __CFADD__(v40, 10 * v35);
          v35 = v40 + 10 * v35;
          --v38;
          ++v39;
          if (v27)
            goto LABEL_57;
        }
        if (v35 == -1)
          v36 = 0;
        else
          v36 = v35 & 0xFFFFFF00;
        if (v35 == -1)
          LODWORD(v9) = 0;
        else
          LODWORD(v9) = v35;
        if (v35 == -1)
          v37 = 0;
        else
          v37 = 0x100000000;
LABEL_57:
        v14 = v9 | v36;
        if ((v37 & 0x100000000) != 0)
          goto LABEL_11;
        return JSC::JSObject::put();
      }
LABEL_55:
      v36 = 0;
      LODWORD(v9) = 0;
    }
    else
    {
      v36 = 0;
    }
    v37 = 0;
    goto LABEL_57;
  }
  if ((_DWORD)v9 && (v10 = *(unsigned __int16 *)v8 - 48, v10 <= 9) && (v9 < 2 || *(_WORD *)v8 != 48))
  {
    v24 = (unsigned __int16 *)(v8 + 2);
    v25 = v9 - 1;
    while (v25)
    {
      if (v10 <= 0x19999999)
      {
        v26 = *v24 - 48;
        if (v26 <= 9)
        {
          v27 = __CFADD__(v26, 10 * v10);
          v10 = v26 + 10 * v10;
          ++v24;
          --v25;
          if (!v27)
            continue;
        }
      }
      goto LABEL_9;
    }
    v18 = v10 == -1;
    v13 = v10 & 0xFFFFFF00;
    v12 = v10;
    v11 = 0x100000000;
    if (v18)
    {
      v11 = 0;
      v12 = 0;
      v13 = 0;
    }
  }
  else
  {
LABEL_9:
    v11 = 0;
    v12 = 0;
    v13 = 0;
  }
  v14 = v13 | v12;
  if ((v11 & 0x100000000) != 0)
  {
LABEL_11:
    v43 = *((_QWORD *)a2 + 7);
    if ((a4 & 0xFFFE000000000002) != 0)
      goto LABEL_22;
    v15 = *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C);
    v16 = *(_DWORD *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C) != 0;
    v17 = (char **)(16 * v15);
    if ((_DWORD)v15)
      v18 = v17 == &WebCore::JSSVGLength::s_info;
    else
      v18 = 1;
    if (!v18)
    {
      do
      {
        v17 = (char **)v17[2];
        v16 = v17 != 0;
      }
      while (v17 != &WebCore::JSSVGLength::s_info && v17 != 0);
    }
    if (!v16 || (v20 = *(_DWORD **)(a4 + 24)) == 0)
    {
LABEL_22:
      JSC::throwTypeError();
      return 1;
    }
    v21 = *(_QWORD *)(a1 + 24);
    ++v20[2];
    v41 = v20;
    if (*(_BYTE *)(v21 + 24) == 1)
    {
      v22 = 4;
      LOBYTE(v43) = 4;
      v23 = 1;
      v45 = 1;
      v44 = 0;
    }
    else
    {
      LOBYTE(v43) = 1;
      v45 = 0;
      if (*(_DWORD *)(v21 + 44) > v14)
      {
        (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v21 + 64))(&v42, v21);
        v28 = *(_QWORD *)(v21 + 16);
        if (v28)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v28 + 32))(v28, v21);
        v22 = 0;
        v29 = 0;
        v43 = v42;
        v45 = 0;
        v30 = 1;
        goto LABEL_39;
      }
      v22 = 0;
      v23 = 0;
    }
    off_1E32F83C8[v23](&v42, (char *)&v43);
    v30 = 0;
    LOBYTE(v43) = v22;
    v29 = 1;
    v45 = 1;
    v44 = 0;
LABEL_39:
    ((void (*)(uint64_t *, uint64_t *))off_1E32F83D8[v29])(&v42, &v43);
    if (v41[2] != 1)
    {
      --v41[2];
      if ((v30 & 1) != 0)
        return 1;
LABEL_48:
      LOBYTE(v43) = v22;
      v44 = 0;
      if (!*((_QWORD *)v7 + 2))
      {
        v32.super.isa = (Class)WebCore::createDOMException(a2, (JSC::JSGlobalObject *)v22, (JSC::JSGlobalObject *)&v44);
        JSC::VM::throwException(v7, a2, v32);
        v34 = v44;
        v44 = 0;
        if (v34)
        {
          if (*(_DWORD *)v34 == 2)
            WTF::StringImpl::destroy(v34, v33);
          else
            *(_DWORD *)v34 -= 2;
        }
      }
      return 1;
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)v41 + 8))(v41);
    if ((v30 & 1) == 0)
      goto LABEL_48;
    return 1;
  }
  return JSC::JSObject::put();
}

uint64_t WebCore::JSSVGLengthList::putByIndex(uint64_t a1, WTF::StringImpl **a2, uint64_t a3, uint64_t a4)
{
  JSC::VM *v5;
  uint64_t v6;
  _BOOL4 v7;
  char **v8;
  BOOL v9;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  _DWORD *v18;
  uint64_t v19;
  JSValue v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  _DWORD *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  int v30;

  v5 = a2[7];
  if ((_DWORD)a3 != -1)
  {
    v28 = a2[7];
    if ((a4 & 0xFFFE000000000002) != 0)
      goto LABEL_13;
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSSVGLength::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSSVGLength::s_info && v8 != 0);
    }
    if (!v7 || (v11 = *(_DWORD **)(a4 + 24)) == 0)
    {
LABEL_13:
      JSC::throwTypeError();
      return 1;
    }
    v12 = *(_QWORD *)(a1 + 24);
    ++v11[2];
    v26 = v11;
    if (*(_BYTE *)(v12 + 24) == 1)
    {
      v13 = 4;
      LOBYTE(v28) = 4;
      v14 = 1;
      v30 = 1;
      v29 = 0;
    }
    else
    {
      LOBYTE(v28) = 1;
      v30 = 0;
      if (*(_DWORD *)(v12 + 44) > a3)
      {
        (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, uint64_t, _DWORD **))(*(_QWORD *)v12 + 64))(&v27, v12, a3, &v26);
        v15 = *(_QWORD *)(v12 + 16);
        if (v15)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 32))(v15, v12);
        v13 = 0;
        v16 = 0;
        v28 = v27;
        v30 = 0;
        v17 = 1;
LABEL_23:
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32F83D8[v16])(&v27, &v28);
        v18 = v26;
        v26 = 0;
        if (v18)
        {
          if (v18[2] == 1)
          {
            (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 8))(v18);
            if ((v17 & 1) != 0)
              return 1;
            goto LABEL_30;
          }
          --v18[2];
        }
        if ((v17 & 1) != 0)
          return 1;
LABEL_30:
        LOBYTE(v28) = v13;
        v29 = 0;
        if (!*((_QWORD *)v5 + 2))
        {
          v21.super.isa = (Class)WebCore::createDOMException((JSC *)a2, (JSC::JSGlobalObject *)v13, (JSC::JSGlobalObject *)&v29);
          JSC::VM::throwException(v5, (JSC::JSGlobalObject *)a2, v21);
          v23 = v29;
          v29 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
              WTF::StringImpl::destroy(v23, v22);
            else
              *(_DWORD *)v23 -= 2;
          }
        }
        return 1;
      }
      v13 = 0;
      v14 = 0;
    }
    ((uint64_t (**)(WTF::StringImpl **, char *))off_1E32F83C8)[v14](&v27, (char *)&v28);
    v17 = 0;
    LOBYTE(v28) = v13;
    v16 = 1;
    v30 = 1;
    v29 = 0;
    goto LABEL_23;
  }
  JSC::Identifier::from();
  v19 = JSC::ordinarySetSlow();
  v25 = v28;
  v28 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v24);
    else
      *(_DWORD *)v25 -= 2;
  }
  return v19;
}

uint64_t WebCore::JSSVGLengthList::deleteProperty(uint64_t a1, WebCore::JSDOMGlobalObject *a2, uint64_t a3)
{
  uint64_t v4;
  _BOOL4 v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  WebCore::JSDOMGlobalObject *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _WORD *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned __int16 *v25;
  uint64_t v26;
  unsigned int v27;
  BOOL v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  unsigned int v34;

  v4 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSDOMGlobalObject::s_info && v6 != 0);
  }
  v9 = *(_QWORD *)(a1 + 24);
  if (v5)
    v10 = a2;
  else
    v10 = 0;
  v11 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v10);
  if (v11)
  {
    v12 = v11;
    if (!*(_BYTE *)(v11 + 274))
    {
      v13 = *(_BYTE **)(v11 + 496);
      if (!v13)
        v13 = (_BYTE *)WebCore::Document::ensureQuirks((WebCore::Document *)(v12 - 192));
      if (*(_QWORD *)v13)
      {
        v14 = *(_QWORD *)(*(_QWORD *)v13 + 8);
        if (v14)
        {
          v15 = *(_QWORD *)(v14 + 680);
          if (*(_BYTE *)(v15 + 243))
          {
            if (!*(_BYTE *)(v15 + 242))
              goto LABEL_22;
          }
          else if ((*(_QWORD *)(v15 + 688) & 0x80000) == 0)
          {
            goto LABEL_22;
          }
          if (v13[65])
            return JSC::JSObject::deleteProperty();
        }
      }
    }
  }
LABEL_22:
  if (!a3)
    return JSC::JSObject::deleteProperty();
  v16 = *(_DWORD *)(a3 + 16);
  if ((v16 & 0x20) != 0)
    return JSC::JSObject::deleteProperty();
  v17 = *(_WORD **)(a3 + 8);
  v18 = *(unsigned int *)(a3 + 4);
  if ((v16 & 4) == 0)
  {
    if ((_DWORD)v18 && (v19 = (unsigned __int16)*v17 - 48, v19 <= 9) && (v18 < 2 || *v17 != 48))
    {
      v25 = v17 + 1;
      v26 = v18 - 1;
      while (v26)
      {
        if (v19 <= 0x19999999)
        {
          v27 = *v25 - 48;
          if (v27 <= 9)
          {
            v28 = __CFADD__(v27, 10 * v19);
            v19 = v27 + 10 * v19;
            ++v25;
            --v26;
            if (!v28)
              continue;
          }
        }
        goto LABEL_29;
      }
      v7 = v19 == -1;
      v22 = v19 & 0xFFFFFF00;
      v21 = v19;
      v20 = 0x100000000;
      if (v7)
      {
        v20 = 0;
        v21 = 0;
        v22 = 0;
      }
    }
    else
    {
LABEL_29:
      v20 = 0;
      v21 = 0;
      v22 = 0;
    }
    v23 = v22 | v21;
    if ((v20 & 0x100000000) != 0)
      return *(_DWORD *)(v9 + 44) <= v23;
    return JSC::JSObject::deleteProperty();
  }
  if (!(_DWORD)v18)
  {
    v30 = 0;
    goto LABEL_47;
  }
  v29 = *(unsigned __int8 *)v17 - 48;
  if (v29 > 9 || v18 >= 2 && *(_BYTE *)v17 == 48)
  {
LABEL_46:
    v30 = 0;
    LODWORD(v18) = 0;
LABEL_47:
    v31 = 0;
    goto LABEL_48;
  }
  v32 = v18 - 1;
  v33 = (unsigned __int8 *)v17 + 1;
  while (v32)
  {
    if (v29 > 0x19999999)
      goto LABEL_46;
    v34 = *v33 - 48;
    if (v34 > 9)
      goto LABEL_46;
    v30 = 0;
    LODWORD(v18) = 0;
    v31 = 0;
    v28 = __CFADD__(v34, 10 * v29);
    v29 = v34 + 10 * v29;
    --v32;
    ++v33;
    if (v28)
      goto LABEL_48;
  }
  if (v29 == -1)
    v30 = 0;
  else
    v30 = v29 & 0xFFFFFF00;
  if (v29 == -1)
    LODWORD(v18) = 0;
  else
    LODWORD(v18) = v29;
  if (v29 == -1)
    v31 = 0;
  else
    v31 = 0x100000000;
LABEL_48:
  v23 = v18 | v30;
  if ((v31 & 0x100000000) != 0)
    return *(_DWORD *)(v9 + 44) <= v23;
  return JSC::JSObject::deleteProperty();
}

uint64_t WebCore::JSSVGLengthList::deletePropertyByIndex(WebCore::JSSVGLengthList *this, JSC::JSCell *a2, JSC::JSGlobalObject *a3)
{
  uint64_t v6;
  _BOOL4 v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  WebCore::JSDOMGlobalObject *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;

  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSDOMGlobalObject::s_info && v8 != 0);
  }
  v11 = *((_QWORD *)this + 3);
  if (v7)
    v12 = a2;
  else
    v12 = 0;
  v13 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v12);
  if (!v13)
    return *(_DWORD *)(v11 + 44) <= a3;
  v14 = v13;
  if (*(_BYTE *)(v13 + 274))
    return *(_DWORD *)(v11 + 44) <= a3;
  v15 = *(_BYTE **)(v13 + 496);
  if (!v15)
    v15 = (_BYTE *)WebCore::Document::ensureQuirks((WebCore::Document *)(v14 - 192));
  if (!*(_QWORD *)v15)
    return *(_DWORD *)(v11 + 44) <= a3;
  v16 = *(_QWORD *)(*(_QWORD *)v15 + 8);
  if (!v16)
    return *(_DWORD *)(v11 + 44) <= a3;
  v17 = *(_QWORD *)(v16 + 680);
  if (*(_BYTE *)(v17 + 243))
  {
    if (!*(_BYTE *)(v17 + 242))
      return *(_DWORD *)(v11 + 44) <= a3;
  }
  else if ((*(_QWORD *)(v17 + 688) & 0x80000) == 0)
  {
    return *(_DWORD *)(v11 + 44) <= a3;
  }
  if (!v15[65])
    return *(_DWORD *)(v11 + 44) <= a3;
  return JSC::JSObject::deletePropertyByIndex(this, a2, a3);
}

uint64_t WebCore::JSSVGLengthList::getOwnPropertySlot(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  JSC::VM *v6;
  int v9;
  _WORD *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  _DWORD *v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  uint64_t result;
  unsigned __int16 *v20;
  uint64_t v21;
  unsigned int v22;
  BOOL v23;
  BOOL v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  _BYTE *v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  unsigned __int16 *v45;
  uint64_t v46;
  unsigned int v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  unsigned int v54;
  int v55;
  unint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  unsigned __int8 *v67;
  unsigned int v68;
  uint64_t v69;
  unsigned __int8 *v70;
  unsigned int v71;
  WTF *v72;

  v6 = *(JSC::VM **)(a2 + 56);
  if (!a3)
  {
    if ((*(_BYTE *)(a1 + 6) & 0x20) != 0)
      return JSC::JSObject::getOwnStaticPropertySlot();
    return 0;
  }
  v9 = *(_DWORD *)(a3 + 16);
  if ((v9 & 0x20) != 0)
    goto LABEL_37;
  v10 = *(_WORD **)(a3 + 8);
  v11 = *(unsigned int *)(a3 + 4);
  if ((v9 & 4) == 0)
  {
    if ((_DWORD)v11 && (v12 = (unsigned __int16)*v10 - 48, v12 <= 9))
    {
      if (v11 < 2 || *v10 != 48)
      {
        v20 = v10 + 1;
        v21 = v11 - 1;
        while (v21)
        {
          if (v12 <= 0x19999999)
          {
            v22 = *v20 - 48;
            if (v22 <= 9)
            {
              v23 = __CFADD__(v22, 10 * v12);
              v12 = v22 + 10 * v12;
              ++v20;
              --v21;
              if (!v23)
                continue;
            }
          }
          goto LABEL_6;
        }
        v24 = v12 == -1;
        v14 = v12 & 0xFFFFFF00;
        v13 = 0x100000000;
        if (v12 == -1)
        {
          v13 = 0;
          LOBYTE(v12) = 0;
        }
        if (v24)
          v14 = 0;
LABEL_8:
        v12 = v12;
        if ((v13 & 0x100000000) == 0)
          goto LABEL_37;
        goto LABEL_9;
      }
      v13 = 0;
    }
    else
    {
LABEL_6:
      v13 = 0;
      LOBYTE(v12) = 0;
    }
    v14 = 0;
    goto LABEL_8;
  }
  if (!(_DWORD)v11)
  {
    v12 = 0;
    goto LABEL_35;
  }
  v25 = *(unsigned __int8 *)v10 - 48;
  if (v25 > 9 || v11 >= 2 && *(_BYTE *)v10 == 48)
  {
LABEL_34:
    v12 = 0;
    LOBYTE(v11) = 0;
LABEL_35:
    v26 = 0;
    goto LABEL_36;
  }
  v66 = v11 - 1;
  v67 = (unsigned __int8 *)v10 + 1;
  while (v66)
  {
    if (v25 > 0x19999999)
      goto LABEL_34;
    v68 = *v67 - 48;
    if (v68 > 9)
      goto LABEL_34;
    v12 = 0;
    LOBYTE(v11) = 0;
    v26 = 0;
    v23 = __CFADD__(v68, 10 * v25);
    v25 = v68 + 10 * v25;
    --v66;
    ++v67;
    if (v23)
      goto LABEL_36;
  }
  if (v25 == -1)
    v12 = 0;
  else
    v12 = v25 & 0xFFFFFF00;
  if (v25 == -1)
    LOBYTE(v11) = 0;
  else
    LOBYTE(v11) = v25;
  if (v25 == -1)
    v26 = 0;
  else
    v26 = 0x100000000;
LABEL_36:
  v14 = v11;
  if ((v26 & 0x100000000) == 0)
    goto LABEL_37;
LABEL_9:
  v15 = *(_DWORD **)(a1 + 24);
  if (v15[11] > (v14 | v12))
  {
    v16 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x28);
    (*(void (**)(WTF **__return_ptr))(*(_QWORD *)v15 + 48))(&v72);
    v17 = v72;
    v18 = WebCore::wrap<WebCore::SVGLength>(a2, v16, v72);
    if (*((_DWORD *)v17 + 2) == 1)
      (*(void (**)(WTF *))(*(_QWORD *)v17 + 8))(v17);
    else
      --*((_DWORD *)v17 + 2);
    if (!*((_DWORD *)v6 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v6) & 1) == 0)
    {
      *(_QWORD *)a4 = v18;
      *(_DWORD *)(a4 + 16) = 0;
      *(_QWORD *)(a4 + 32) = a1;
      result = 1;
      *(_BYTE *)(a4 + 49) = 1;
      return result;
    }
    return 0;
  }
LABEL_37:
  if (!(a3 >> 4))
    goto LABEL_50;
  v27 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE);
  if (((a3 >> 4) & ~*(_DWORD *)(v27 + 0x20)) != 0)
    goto LABEL_50;
  v28 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x58);
  if (!v28)
  {
    v39 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x40);
    if (!v39 || *(_BYTE *)(v39 + 5) != 1 && *(_DWORD *)(v39 + 80) < 2u)
      goto LABEL_50;
    v28 = JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)), v6);
    if (!v28)
      goto LABEL_50;
  }
  if (!*(_DWORD *)(v28 + 24))
    goto LABEL_50;
  v29 = *(_QWORD *)(v28 + 16);
  v30 = v29 & 0xFFFFFFFFFFFFFFFELL;
  v31 = *(unsigned int *)(v28 + 8);
  v32 = *(_DWORD *)(a3 + 16);
  if ((v29 & 1) != 0)
  {
    if ((v32 & 0x20) != 0)
      v32 = *(_DWORD *)(a3 + 32);
    v33 = *(_DWORD *)(v28 + 12);
    v34 = (v32 >> 8) & *(_QWORD *)&v33;
    v35 = *(unsigned __int8 *)(v30 + v34);
    if (*(_BYTE *)(v30 + v34))
    {
      v36 = v30 + v31;
      v37 = 1;
      while (1)
      {
        v38 = *(_QWORD *)(v36 + 8 * (v35 - 1));
        if (a3 == (v38 & 0xFFFFFFFFFFFFLL))
          break;
        v34 = ((_DWORD)v34 + v37) & v33;
        v35 = *(unsigned __int8 *)(v30 + v34);
        ++v37;
        if (!*(_BYTE *)(v30 + v34))
          goto LABEL_50;
      }
      v48 = (v38 >> 16) & 0xFF00000000 | HIBYTE(v38);
      goto LABEL_69;
    }
LABEL_50:
    if ((*(_BYTE *)(a1 + 6) & 0x20) != 0 && (JSC::JSObject::getOwnStaticPropertySlot() & 1) != 0)
      return 1;
    v40 = *(_DWORD *)(a3 + 16);
    if ((v40 & 0x20) == 0)
    {
      v41 = *(_BYTE **)(a3 + 8);
      v42 = *(unsigned int *)(a3 + 4);
      if ((v40 & 4) != 0)
      {
        if (!(_DWORD)v42 || (v64 = *v41 - 48, v64 > 9) || v42 >= 2 && *v41 == 48)
        {
LABEL_106:
          v65 = 0;
        }
        else
        {
          v69 = v42 - 1;
          v70 = v41 + 1;
          while (v69)
          {
            if (v64 > 0x19999999)
              goto LABEL_106;
            v71 = *v70 - 48;
            if (v71 > 9)
              goto LABEL_106;
            v65 = 0;
            v23 = __CFADD__(v71, 10 * v64);
            v64 = v71 + 10 * v64;
            --v69;
            ++v70;
            if (v23)
              goto LABEL_107;
          }
          v65 = 0x100000000;
          if (v64 == -1)
            v65 = 0;
        }
LABEL_107:
        if ((v65 & 0x100000000) == 0)
          return 0;
      }
      else
      {
        if ((_DWORD)v42
          && (v43 = *(unsigned __int16 *)v41 - 48, v43 <= 9)
          && (v42 < 2 || *(_WORD *)v41 != 48))
        {
          v45 = (unsigned __int16 *)(v41 + 2);
          v46 = v42 - 1;
          while (v46)
          {
            if (v43 <= 0x19999999)
            {
              v47 = *v45 - 48;
              if (v47 <= 9)
              {
                v23 = __CFADD__(v47, 10 * v43);
                v43 = v47 + 10 * v43;
                ++v45;
                --v46;
                if (!v23)
                  continue;
              }
            }
            goto LABEL_57;
          }
          v24 = v43 == -1;
          v44 = 0x100000000;
          if (v24)
            v44 = 0;
        }
        else
        {
LABEL_57:
          v44 = 0;
        }
        if ((v44 & 0x100000000) == 0)
          return 0;
      }
      return JSC::JSObject::getOwnPropertySlotByIndex();
    }
    return 0;
  }
  if ((v32 & 0x20) != 0)
    v32 = *(_DWORD *)(a3 + 32);
  v53 = *(_DWORD *)(v28 + 12);
  v54 = v53 & (v32 >> 8);
  v55 = *(_DWORD *)(v30 + 4 * v54);
  if (!v55)
    goto LABEL_50;
  v56 = v30 + 4 * v31;
  v57 = 1;
  while (1)
  {
    v58 = (v55 - 1);
    if (*(_QWORD *)(v56 + 16 * v58) == a3)
      break;
    v54 = (v54 + v57) & v53;
    v55 = *(_DWORD *)(v30 + 4 * v54);
    ++v57;
    if (!v55)
      goto LABEL_50;
  }
  v48 = *(unsigned int *)(v56 + 16 * v58 + 8) | ((unint64_t)*(unsigned __int8 *)(v56 + 16 * v58 + 12) << 32);
LABEL_69:
  if ((_DWORD)v48 == -1)
    goto LABEL_50;
  if ((int)v48 > 63)
  {
    v49 = *(_QWORD *)(a1 + 8) - 8;
    v50 = 0x3F00000000 - (v48 << 32);
  }
  else
  {
    v49 = a1 + 16;
    v50 = v48 << 32;
  }
  v51 = *(_QWORD *)(v49 + (v50 >> 29));
  if ((v51 & 0xFFFE000000000002) != 0)
    goto LABEL_75;
  v52 = *(unsigned __int8 *)(v51 + 5);
  if (v52 != 6)
  {
    if (v52 != 5)
    {
LABEL_75:
      *(_QWORD *)a4 = v51;
      *(_QWORD *)(a4 + 32) = a1;
      *(_DWORD *)(a4 + 16) = HIDWORD(v48);
      *(_DWORD *)(a4 + 20) = v48;
      result = 1;
      *(_WORD *)(a4 + 48) = 257;
      return result;
    }
    JSC::JSObject::fillGetterPropertySlot();
    return 1;
  }
  v59 = *(_DWORD *)(v27 + 16) & 3;
  v61 = *(_QWORD *)(v51 + 8);
  v60 = *(_QWORD *)(v51 + 16);
  if (MEMORY[0x1E0CBE830] == 16 * *(unsigned int *)(16 * (*(_DWORD *)v51 & 0xFFFFFFFE) + 0x4C))
  {
    v63 = *(_QWORD *)(v51 + 24);
    v62 = *(_QWORD *)(v51 + 32);
    *(_QWORD *)a4 = v61;
    *(_QWORD *)(a4 + 8) = v60;
    *(_DWORD *)(a4 + 16) = HIDWORD(v48);
    *(_QWORD *)(a4 + 32) = a1;
    *(_BYTE *)(a4 + 49) = 3;
    result = 1;
    if (v59 != 2)
      *(_BYTE *)(a4 + 48) = 1;
    *(_BYTE *)(a4 + 51) = 1;
    *(_QWORD *)(a4 + 72) = v63;
    *(_QWORD *)(a4 + 80) = v62;
  }
  else
  {
    *(_QWORD *)a4 = v61;
    *(_QWORD *)(a4 + 8) = v60;
    *(_DWORD *)(a4 + 16) = HIDWORD(v48);
    *(_QWORD *)(a4 + 32) = a1;
    result = 1;
    *(_BYTE *)(a4 + 49) = 3;
    if (v59 != 2)
      *(_BYTE *)(a4 + 48) = 1;
  }
  return result;
}

uint64_t WebCore::JSSVGLengthList::getOwnPropertySlotByIndex(WebCore::JSSVGLengthList *this, JSC::JSObject *a2, JSC::JSGlobalObject *a3, uint64_t a4, JSC::PropertySlot *a5)
{
  _DWORD *v8;
  JSC::VM *v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t result;
  WTF *v14;

  if ((_DWORD)a3 == -1)
    return JSC::JSObject::getOwnPropertySlotByIndex();
  v8 = (_DWORD *)*((_QWORD *)this + 3);
  if (v8[11] <= a3)
    return JSC::JSObject::getOwnPropertySlotByIndex();
  v9 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v10 = *(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28);
  (*(void (**)(WTF **__return_ptr, _DWORD *, JSC::JSGlobalObject *))(*(_QWORD *)v8 + 48))(&v14, v8, a3);
  v11 = v14;
  v12 = WebCore::wrap<WebCore::SVGLength>((uint64_t)a2, v10, v14);
  if (*((_DWORD *)v11 + 2) == 1)
    (*(void (**)(WTF *))(*(_QWORD *)v11 + 8))(v11);
  else
    --*((_DWORD *)v11 + 2);
  if (*((_DWORD *)v9 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
    return 0;
  *(_QWORD *)a4 = v12;
  *(_DWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 32) = this;
  result = 1;
  *(_BYTE *)(a4 + 49) = 1;
  return result;
}

uint64_t WebCore::JSSVGLengthList::getOwnPropertyNames(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v4;
  int v5;
  uint64_t *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  int v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44[2];
  char v45;
  WTF::StringImpl *v46;

  v4 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 44);
  if (v4)
  {
    v5 = 0;
    v6 = a3 + 1;
    while (1)
    {
      JSC::Identifier::from();
      v8 = v43;
      v46 = v43;
      v9 = *((_DWORD *)v43 + 4);
      if ((v9 & 0x20) != 0)
      {
        if ((a3[3] & 1) == 0 || *((_BYTE *)a3 + 25) && (*((_BYTE *)v43 + 36) & 4) != 0)
          goto LABEL_60;
      }
      else if ((a3[3] & 2) == 0)
      {
        goto LABEL_60;
      }
      v10 = *a3;
      v11 = *(unsigned int *)(*a3 + 20);
      if (v11 <= 0x13)
      {
        if ((_DWORD)v11)
        {
          v12 = *(WTF::StringImpl ***)(v10 + 8);
          while (*v12 != v43)
          {
            ++v12;
            if (!--v11)
              goto LABEL_19;
          }
          goto LABEL_60;
        }
LABEL_19:
        if ((v9 & 0x20) != 0)
        {
          v33 = *(_DWORD *)v8 + 2;
        }
        else
        {
          if ((v9 & 0x10) != 0)
          {
            *(_DWORD *)v8 += 2;
          }
          else
          {
            WTF::AtomStringImpl::addSlowCase();
            v8 = v44[0];
          }
          v33 = *(_DWORD *)v8;
          *(_DWORD *)v8 += 2;
          if (!v33)
          {
            WTF::StringImpl::destroy(v8, v7);
LABEL_54:
            v34 = (uint64_t *)(v10 + 8);
            v44[0] = v8;
            v35 = *(unsigned int *)(v10 + 20);
            if ((_DWORD)v35 == *(_DWORD *)(v10 + 16))
            {
              v36 = (uint64_t *)WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v34, v35 + 1, (unint64_t)v44);
              v35 = *(unsigned int *)(v10 + 20);
              v37 = *(_QWORD *)(v10 + 8);
              v38 = *v36;
              *v36 = 0;
              *(_QWORD *)(v37 + 8 * v35) = v38;
            }
            else
            {
              v39 = *v34;
              v44[0] = 0;
              *(_QWORD *)(v39 + 8 * v35) = v8;
            }
            *(_DWORD *)(v10 + 20) = v35 + 1;
            v40 = v44[0];
            v44[0] = 0;
            if (v40)
            {
              if (*(_DWORD *)v40 == 2)
                WTF::StringImpl::destroy(v40, v7);
              else
                *(_DWORD *)v40 -= 2;
            }
            goto LABEL_60;
          }
        }
        *(_DWORD *)v8 = v33;
        goto LABEL_54;
      }
      if (!*v6 || !*(_DWORD *)(*v6 - 12))
        break;
LABEL_17:
      WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add(a3 + 1, (uint64_t *)&v46, (uint64_t)v44);
      if (v45)
      {
        v8 = v46;
        v10 = *a3;
        v9 = *((_DWORD *)v46 + 4);
        goto LABEL_19;
      }
LABEL_60:
      v41 = v43;
      v43 = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2)
          WTF::StringImpl::destroy(v41, v7);
        else
          *(_DWORD *)v41 -= 2;
      }
      if (++v5 == v4)
        return JSC::JSObject::getOwnPropertyNames();
    }
    v13 = *(uint64_t **)(v10 + 8);
    v14 = &v13[v11];
    while (1)
    {
      v15 = *v13;
      v16 = *v6;
      if (*v6
        || (WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(a3 + 1, 8u, 0), (v16 = *v6) != 0))
      {
        v17 = *(_DWORD *)(v16 - 8);
      }
      else
      {
        v17 = 0;
      }
      v18 = (~(v15 << 32) + v15) ^ ((unint64_t)(~(v15 << 32) + v15) >> 22);
      v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
      v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
      v21 = v17 & ((v20 >> 31) ^ v20);
      v22 = (uint64_t *)(v16 + 8 * v21);
      v23 = *v22;
      if (*v22)
      {
        v24 = 0;
        v25 = 1;
        while (v23 != v15)
        {
          if (v23 == -1)
            v24 = v22;
          v21 = (v21 + v25) & v17;
          v22 = (uint64_t *)(v16 + 8 * v21);
          v23 = *v22;
          ++v25;
          if (!*v22)
          {
            if (v24)
            {
              *v24 = 0;
              --*(_DWORD *)(*v6 - 16);
              v22 = v24;
            }
            goto LABEL_34;
          }
        }
        goto LABEL_47;
      }
LABEL_34:
      *v22 = v15;
      v26 = *v6;
      v27 = *v6 ? *(_DWORD *)(v26 - 12) + 1 : 1;
      *(_DWORD *)(v26 - 12) = v27;
      v28 = *v6;
      v29 = *v6 ? *(_DWORD *)(v28 - 12) : 0;
      v30 = (*(_DWORD *)(v28 - 16) + v29);
      v31 = *(unsigned int *)(v28 - 4);
      if (v31 > 0x400)
        break;
      if (3 * v31 <= 4 * v30)
      {
        if ((_DWORD)v31)
          goto LABEL_43;
        v32 = 8;
        goto LABEL_46;
      }
LABEL_47:
      if (++v13 == v14)
        goto LABEL_17;
    }
    if (v31 > 2 * v30)
      goto LABEL_47;
LABEL_43:
    v32 = (_DWORD)v31 << (6 * *(_DWORD *)(v28 - 12) >= (2 * v31));
LABEL_46:
    WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(a3 + 1, v32, v22);
    goto LABEL_47;
  }
  return JSC::JSObject::getOwnPropertyNames();
}

uint64_t WebCore::JSSVGLengthList::defineOwnProperty(uint64_t a1, WTF::StringImpl **a2, uint64_t a3, JSC::PropertyDescriptor *this, int a5)
{
  JSC::VM *v9;
  int v10;
  _BYTE *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  char **v20;
  BOOL v21;
  unsigned __int16 *v24;
  uint64_t v25;
  unsigned int v26;
  BOOL v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  BOOL v35;
  unsigned int v36;
  _DWORD *v37;
  JSValue v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  unsigned int v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  unsigned __int8 *v45;
  unsigned int v46;
  WTF::StringImpl *v47[2];
  __int128 v48;
  JSC::VM *v49;
  _DWORD *v50;
  WTF::StringImpl *v51;

  v9 = a2[7];
  v49 = v9;
  if (!a3)
    goto LABEL_65;
  v10 = *(_DWORD *)(a3 + 16);
  if ((v10 & 0x20) != 0)
    goto LABEL_65;
  v11 = *(_BYTE **)(a3 + 8);
  v12 = *(unsigned int *)(a3 + 4);
  if ((v10 & 4) != 0)
  {
    if ((_DWORD)v12)
    {
      v41 = *v11 - 48;
      if (v41 <= 9 && (v12 < 2 || *v11 != 48))
      {
        v44 = v12 - 1;
        v45 = v11 + 1;
        while (v44)
        {
          if (v41 > 0x19999999)
            goto LABEL_62;
          v46 = *v45 - 48;
          if (v46 > 9)
            goto LABEL_62;
          v16 = 0;
          LOBYTE(v12) = 0;
          v42 = 0;
          v27 = __CFADD__(v46, 10 * v41);
          v41 = v46 + 10 * v41;
          --v44;
          ++v45;
          if (v27)
            goto LABEL_64;
        }
        if (v41 == -1)
          v16 = 0;
        else
          v16 = v41 & 0xFFFFFF00;
        if (v41 == -1)
          LOBYTE(v12) = 0;
        else
          LOBYTE(v12) = v41;
        if (v41 == -1)
          v42 = 0;
        else
          v42 = 0x100000000;
LABEL_64:
        v15 = v12;
        if ((v42 & 0x100000000) != 0)
          goto LABEL_9;
LABEL_65:
        v43 = *((_OWORD *)this + 1);
        *(_OWORD *)v47 = *(_OWORD *)this;
        v48 = v43;
        return JSC::JSObject::defineOwnProperty();
      }
LABEL_62:
      v16 = 0;
      LOBYTE(v12) = 0;
    }
    else
    {
      v16 = 0;
    }
    v42 = 0;
    goto LABEL_64;
  }
  if (!(_DWORD)v12 || (v13 = *(unsigned __int16 *)v11 - 48, v13 > 9))
  {
LABEL_6:
    v14 = 0;
    LOBYTE(v13) = 0;
LABEL_7:
    v15 = 0;
    goto LABEL_8;
  }
  if (v12 >= 2 && *(_WORD *)v11 == 48)
  {
    v14 = 0;
    goto LABEL_7;
  }
  v24 = (unsigned __int16 *)(v11 + 2);
  v25 = v12 - 1;
  while (v25)
  {
    if (v13 <= 0x19999999)
    {
      v26 = *v24 - 48;
      if (v26 <= 9)
      {
        v27 = __CFADD__(v26, 10 * v13);
        v13 = v26 + 10 * v13;
        ++v24;
        --v25;
        if (!v27)
          continue;
      }
    }
    goto LABEL_6;
  }
  v35 = v13 == -1;
  v36 = v13 & 0xFFFFFF00;
  v14 = 0x100000000;
  if (v13 == -1)
  {
    v14 = 0;
    LOBYTE(v13) = 0;
  }
  if (v35)
    v15 = 0;
  else
    v15 = v36;
LABEL_8:
  v16 = v13;
  if ((v14 & 0x100000000) == 0)
    goto LABEL_65;
LABEL_9:
  if ((JSC::PropertyDescriptor::isDataDescriptor(this) & 1) != 0)
  {
    v17 = *(_QWORD *)this;
    v47[0] = a2[7];
    if ((v17 & 0xFFFE000000000002) != 0)
      goto LABEL_21;
    v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
    v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
    v20 = (char **)(16 * v18);
    if ((_DWORD)v18)
      v21 = v20 == &WebCore::JSSVGLength::s_info;
    else
      v21 = 1;
    if (!v21)
    {
      do
      {
        v20 = (char **)v20[2];
        v19 = v20 != 0;
      }
      while (v20 != &WebCore::JSSVGLength::s_info && v20 != 0);
    }
    if (!v19 || (v28 = *(_DWORD **)(v17 + 24)) == 0)
    {
LABEL_21:
      JSC::throwTypeError();
      return 1;
    }
    v29 = *(_QWORD *)(a1 + 24);
    ++v28[2];
    v50 = v28;
    if (*(_BYTE *)(v29 + 24) == 1)
    {
      v30 = 4;
      LOBYTE(v47[0]) = 4;
      v31 = 1;
      LODWORD(v48) = 1;
      v47[1] = 0;
    }
    else
    {
      LOBYTE(v47[0]) = 1;
      LODWORD(v48) = 0;
      if (*(_DWORD *)(v29 + 44) > (v15 | v16))
      {
        (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(_QWORD *)v29 + 64))(&v51, v29);
        v32 = *(_QWORD *)(v29 + 16);
        if (v32)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v32 + 32))(v32, v29);
        v30 = 0;
        v33 = 0;
        v47[0] = v51;
        LODWORD(v48) = 0;
        v34 = 1;
LABEL_49:
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32F83D8[v33])(&v51, v47);
        v37 = v50;
        v50 = 0;
        if (v37)
        {
          if (v37[2] == 1)
          {
            (*(void (**)(_DWORD *))(*(_QWORD *)v37 + 8))(v37);
            if ((v34 & 1) != 0)
              return 1;
            goto LABEL_55;
          }
          --v37[2];
        }
        if ((v34 & 1) != 0)
          return 1;
LABEL_55:
        LOBYTE(v47[0]) = v30;
        v47[1] = 0;
        if (!*((_QWORD *)v9 + 2))
        {
          v38.super.isa = (Class)WebCore::createDOMException((JSC *)a2, (JSC::JSGlobalObject *)v30, (JSC::JSGlobalObject *)&v47[1]);
          JSC::VM::throwException(v9, (JSC::JSGlobalObject *)a2, v38);
          v40 = v47[1];
          v47[1] = 0;
          if (v40)
          {
            if (*(_DWORD *)v40 == 2)
              WTF::StringImpl::destroy(v40, v39);
            else
              *(_DWORD *)v40 -= 2;
          }
        }
        return 1;
      }
      v30 = 0;
      v31 = 0;
    }
    ((uint64_t (**)(WTF::StringImpl **, char *))off_1E32F83C8)[v31](&v51, (char *)v47);
    v34 = 0;
    LOBYTE(v47[0]) = v30;
    v33 = 1;
    LODWORD(v48) = 1;
    v47[1] = 0;
    goto LABEL_49;
  }
  if (a5)
    JSC::throwTypeError();
  return 0;
}

uint64_t WebCore::JSSVGLengthList::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::JSSVGLengthList::createPrototype(WebCore::JSSVGLengthList *this, JSC::JSCell **a2, WebCore::JSDOMGlobalObject *a3)
{
  unint64_t v4;
  WebCore::JSDOMGlobalObject *v5;
  JSC::Structure *v6;

  v4 = JSC::Structure::create((uint64_t *)this, (int)a2, a2[82]);
  *(_DWORD *)(v4 + 16) |= 0x80000u;
  return WebCore::JSSVGLengthListPrototype::create(this, v4, v5, v6);
}

unint64_t WebCore::JSSVGLengthListPrototype::create(WebCore::JSSVGLengthListPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  unint64_t v6;
  int v7;

  v6 = JSC::allocateCell<WebCore::JSAbstractRangePrototype>((uint64_t)this);
  v7 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)v6 = a2 >> 4;
  *(_DWORD *)(v6 + 4) = v7;
  *(_QWORD *)(v6 + 8) = 0;
  WebCore::JSSVGLengthListPrototype::finishCreation((WebCore::JSSVGLengthListPrototype *)v6, this);
  return v6;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGLengthList>,(WebCore::DOMConstructorID)818>(uint64_t a1, uint64_t a2)
{
  unint64_t result;
  uint64_t Structure;
  JSC::Heap *v6;
  unint64_t v7;

  result = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6544);
  if (!result)
  {
    Structure = WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGLengthList>::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 664));
    result = WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGLengthList>::create(a1, Structure, (JSC::JSCell **)a2);
    *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6544) = result;
    if (result)
    {
      if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
      {
        v6 = (JSC::Heap *)(a1 + 192);
        v7 = result;
        JSC::Heap::writeBarrierSlowPath(v6, (const JSCell *)a2);
        return v7;
      }
    }
  }
  return result;
}

unint64_t WebCore::jsSVGLengthListConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGLengthListPrototype::s_info != (char **)(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                               + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGLengthList>,(WebCore::DOMConstructorID)818>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGLengthList_length(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 24) + 44);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

unint64_t WebCore::jsSVGLengthList_numberOfItems(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 24) + 44);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

uint64_t WebCore::JSSVGLengthListOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

_QWORD *WebCore::JSSVGLengthListOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::wrap<WebCore::SVGLengthList>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF *v30;
  void *v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *Allocator;
  unint64_t v38;
  _QWORD *v39;
  WTF *v40;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 2);
  v15 = WebCore::getDOMStructure<WebCore::JSSVGLengthList>(*(WebCore::JSSVGLengthList **)(a2 + 56), (JSC::JSCell **)a2);
  v16 = *(_QWORD *)(a2 + 56);
  v17 = *(_QWORD *)(v16 + 41456);
  v18 = *(_QWORD *)(v17 + 23536);
  v19 = *(_QWORD **)(v18 + 6624);
  if (!v19)
  {
    v20 = *(_QWORD *)(v17 + 22648);
    if (__ldaxr((unsigned __int8 *)v20))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v20))
    {
      goto LABEL_14;
    }
    MEMORY[0x19AEA534C](v20);
LABEL_14:
    v22 = *(_QWORD *)(v20 + 2824);
    if (!*(_QWORD *)(v22 + 6624))
    {
      v23 = WTF::fastMalloc((WTF *)0xF8);
      WTF::CString::CString((WTF::CString *)&v40, "IsoSpace T");
      v39 = 0;
      MEMORY[0x19AEA3204](v23, &v40, v16 + 192, v16 + 1872, 32, 8, &v39);
      v25 = (uint64_t)v39;
      v39 = 0;
      if (v25)
        (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
      v26 = v40;
      v40 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 1)
          WTF::fastFree(v26, v24);
        else
          --*(_DWORD *)v26;
      }
      v27 = *(_QWORD *)(v22 + 6624);
      *(_QWORD *)(v22 + 6624) = v23;
      if (v27)
        (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    }
    v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
    JSC::GCClient::IsoSubspace::IsoSubspace();
    v29 = *(_QWORD *)(v18 + 6624);
    *(_QWORD *)(v18 + 6624) = v19;
    if (v29)
    {
      v30 = (WTF *)MEMORY[0x19AEA3528](v29, v28);
      WTF::fastFree(v30, v31);
    }
    v32 = __ldxr((unsigned __int8 *)v20);
    if (v32 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v20))
        goto LABEL_29;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v20);
  }
LABEL_29:
  SlowCase = v19[3];
  if (SlowCase >= v19[4])
  {
    SlowCase = v19[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_31;
    }
    v38 = *(_QWORD *)(SlowCase + 8) ^ v19[6];
    v19[4] = SlowCase + HIDWORD(v38);
    v19[5] = SlowCase + (int)v38;
  }
  v19[3] = SlowCase + 32;
LABEL_31:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v15);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v16 + 755))
    __dmb(0xAu);
  v33 = *(_QWORD *)(a2 + 3320);
  if ((byte_1ECE81628 & 1) == 0)
  {
    qword_1ECE81620 = (uint64_t)&off_1E32F7590;
    byte_1ECE81628 = 1;
  }
  v40 = a3;
  if ((SlowCase & 8) != 0)
    v34 = (SlowCase - 112) | 1;
  else
    v34 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v34 & 1) != 0)
    v35 = v34 + 47;
  else
    v35 = *(_QWORD *)v34 + 32;
  Allocator = *(_QWORD **)(v35 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v35 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1ECE81620;
  Allocator[2] = v33;
  v39 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v33 + 32), (uint64_t *)&v40, (uint64_t *)&v39);
  if (v39)
    v39[1] = 3;
  return SlowCase;
}

uint64_t WebCore::JSSVGLineElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGGeometryElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGGeometryElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGGeometryElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::JSSVGLineElement::createPrototype(WebCore::JSSVGLineElement *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  JSC::JSCell *v5;
  unint64_t Structure;
  JSC::Structure *v7;

  v5 = (JSC::JSCell *)WebCore::JSSVGGeometryElement::prototype(this, a2, a3);
  Structure = WebCore::JSSVGLineElementPrototype::createStructure((uint64_t *)this, (uint64_t)a2, v5);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  return WebCore::JSSVGLineElementPrototype::create(this, a2, Structure, v7);
}

uint64_t WebCore::JSSVGLineElementPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGLineElementPrototype::create(WebCore::JSSVGLineElementPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<5u>(this, (uint64_t)&WebCore::JSSVGLineElement::s_info, &WebCore::JSSVGLineElementPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGLineElement>,(WebCore::DOMConstructorID)819>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6552);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGGeometryElement>,(WebCore::DOMConstructorID)813>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v34);
    v5[2] = SlowCase + (int)v34;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGLineElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v35 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v35);
    v10[2848] = v2 + (int)v35;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSSVGLineElement::s_info + ~((_QWORD)&WebCore::JSSVGLineElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGLineElement::s_info + ~((_QWORD)&WebCore::JSSVGLineElement::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSSVGLineElement::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSSVGLineElement::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSSVGGeometryElement::prototype((WebCore::JSSVGGeometryElement *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSSVGLineElementPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v30 = (JSC::JSCell *)WebCore::JSSVGLineElementPrototype::create((WebCore::JSSVGLineElementPrototype *)a1, (JSC::VM *)a2, Structure, v29);
  v31 = WebCore::JSSVGLineElement::createStructure((uint64_t *)a1, a2, v30);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v31, (uint64_t)&WebCore::JSSVGLineElement::s_info);
LABEL_22:
  v32 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v32, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6552) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGLineElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGLineElementPrototype::s_info != (char **)(16
                                                              * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGLineElement>,(WebCore::DOMConstructorID)819>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGLineElement_x1(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 224));
}

unint64_t WebCore::jsSVGLineElement_y1(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 232));
}

unint64_t WebCore::jsSVGLineElement_x2(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 240));
}

unint64_t WebCore::jsSVGLineElement_y2(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 248));
}

uint64_t WebCore::JSSVGLineElement::subspaceForImpl(WebCore::JSSVGLineElement *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  void *v12;
  int v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 6632);
  if (v4)
    return v4;
  v7 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v7, a2);
LABEL_6:
  v9 = *(_QWORD *)(v7 + 2824);
  v21 = *(_QWORD *)(v9 + 6632);
  if (!v21)
  {
    v14 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v23, "IsoSpace T");
    v22 = 0;
    MEMORY[0x19AEA3204](v14, &v23, (char *)this + 192, (char *)this + 1872, 40, 8, &v22);
    v16 = v22;
    v22 = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    v17 = v23;
    v23 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 1)
        WTF::fastFree(v17, v15);
      else
        --*(_DWORD *)v17;
    }
    v21 = v14;
    v18 = *(_QWORD *)(v9 + 6632);
    *(_QWORD *)(v9 + 6632) = v14;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    v19 = *(unsigned int *)(v7 + 2844);
    if ((_DWORD)v19 == *(_DWORD *)(v7 + 2840))
    {
      v20 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v7 + 2832, v19 + 1, (unint64_t)&v21);
      v19 = *(unsigned int *)(v7 + 2844);
      *(_QWORD *)(*(_QWORD *)(v7 + 2832) + 8 * v19) = *v20;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v7 + 2832) + 8 * v19) = v14;
    }
    *(_DWORD *)(v7 + 2844) = v19 + 1;
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v10 = *(_QWORD *)(v3 + 6632);
  *(_QWORD *)(v3 + 6632) = v4;
  if (v10)
  {
    v11 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v11, v12);
  }
  v13 = __ldxr((unsigned __int8 *)v7);
  if (v13 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
  return v4;
}

WTF::StringImpl *WebCore::JSSVGLinearGradientElementPrototype::finishCreation(WebCore::JSSVGLinearGradientElementPrototype *this, JSC::VM *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<5u>(a2, (uint64_t)&WebCore::JSSVGLinearGradientElement::s_info, &WebCore::JSSVGLinearGradientElementPrototypeTableValues, this);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5 = JSC::jsNontrivialString((uint64_t)a2, &v8);
  JSC::JSObject::putDirectWithoutTransition((int *)this, a2, v4, v5, 6);
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::JSSVGLinearGradientElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGGradientElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGGradientElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGGradientElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::JSSVGLinearGradientElement::createPrototype(WebCore::JSSVGLinearGradientElement *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unint64_t v6;
  JSC::Structure *v7;

  v5 = WebCore::getDOMStructure<WebCore::JSSVGGradientElement>(this, a2);
  v6 = JSC::Structure::create((uint64_t *)this, (int)a2, *(JSC::JSCell **)(v5 + 48));
  *(_DWORD *)(v6 + 16) |= 0x80000u;
  return WebCore::JSSVGLinearGradientElementPrototype::create(this, a2, v6, v7);
}

unint64_t WebCore::JSSVGLinearGradientElementPrototype::create(WebCore::JSSVGLinearGradientElementPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  unint64_t v6;
  int v7;

  v6 = JSC::allocateCell<WebCore::JSAbstractRangePrototype>((uint64_t)this);
  v7 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)v6 = a3 >> 4;
  *(_DWORD *)(v6 + 4) = v7;
  *(_QWORD *)(v6 + 8) = 0;
  WebCore::JSSVGLinearGradientElementPrototype::finishCreation((WebCore::JSSVGLinearGradientElementPrototype *)v6, this);
  return v6;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGLinearGradientElement>,(WebCore::DOMConstructorID)820>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  unint64_t v16;
  WebCore::JSDOMGlobalObject *v17;
  uint64_t v18;
  unint64_t v20;
  unint64_t v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  int v24;
  int v25;
  uint64_t v26;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6560);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGGradientElement>,(WebCore::DOMConstructorID)814>(a1, a2);
  v7 = v6;
  LODWORD(v22) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v20 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v20);
    v5[2] = SlowCase + (int)v20;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v22, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGLinearGradientElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 >= v10[2847])
  {
    v2 = v10[2848];
    if ((v2 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v2 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_11;
    }
    v21 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v21);
    v10[2848] = v2 + (int)v21;
  }
  v10[2846] = v2 + 48;
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v22);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v22);
  v14 = v22;
  v22 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v22);
  v16 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(WebCore::getDOMStructure<WebCore::JSSVGLinearGradientElement>(a1, (JSC::VM *)a2, v17) + 48);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v16, v18, 14, (uint64_t)&v22);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6560) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGLinearGradientElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGLinearGradientElementPrototype::s_info != (char **)(16
                                                                        * *(unsigned int *)(16
                                                                                          * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                          + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGLinearGradientElement>,(WebCore::DOMConstructorID)820>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGLinearGradientElement_x1(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 216));
}

unint64_t WebCore::jsSVGLinearGradientElement_y1(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 224));
}

unint64_t WebCore::jsSVGLinearGradientElement_x2(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 232));
}

unint64_t WebCore::jsSVGLinearGradientElement_y2(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 240));
}

uint64_t WebCore::JSSVGLinearGradientElement::subspaceForImpl(WebCore::JSSVGLinearGradientElement *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  void *v12;
  int v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 6640);
  if (v4)
    return v4;
  v7 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v7, a2);
LABEL_6:
  v9 = *(_QWORD *)(v7 + 2824);
  v21 = *(_QWORD *)(v9 + 6640);
  if (!v21)
  {
    v14 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v23, "IsoSpace T");
    v22 = 0;
    MEMORY[0x19AEA3204](v14, &v23, (char *)this + 192, (char *)this + 1872, 40, 8, &v22);
    v16 = v22;
    v22 = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    v17 = v23;
    v23 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 1)
        WTF::fastFree(v17, v15);
      else
        --*(_DWORD *)v17;
    }
    v21 = v14;
    v18 = *(_QWORD *)(v9 + 6640);
    *(_QWORD *)(v9 + 6640) = v14;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    v19 = *(unsigned int *)(v7 + 2844);
    if ((_DWORD)v19 == *(_DWORD *)(v7 + 2840))
    {
      v20 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v7 + 2832, v19 + 1, (unint64_t)&v21);
      v19 = *(unsigned int *)(v7 + 2844);
      *(_QWORD *)(*(_QWORD *)(v7 + 2832) + 8 * v19) = *v20;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v7 + 2832) + 8 * v19) = v14;
    }
    *(_DWORD *)(v7 + 2844) = v19 + 1;
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v10 = *(_QWORD *)(v3 + 6640);
  *(_QWORD *)(v3 + 6640) = v4;
  if (v10)
  {
    v11 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v11, v12);
  }
  v13 = __ldxr((unsigned __int8 *)v7);
  if (v13 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
  return v4;
}

uint64_t WebCore::JSSVGMPathElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSVGMPathElementPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGMPathElementPrototype::create(WebCore::JSSVGMPathElementPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>(this, (uint64_t)&WebCore::JSSVGMPathElement::s_info, (uint64_t)&WebCore::JSSVGMPathElementPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGMPathElement>,(WebCore::DOMConstructorID)821>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6568);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGElement>,(WebCore::DOMConstructorID)783>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v34);
    v5[2] = SlowCase + (int)v34;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGMPathElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v35 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v35);
    v10[2848] = v2 + (int)v35;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSSVGMPathElement::s_info + ~((_QWORD)&WebCore::JSSVGMPathElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGMPathElement::s_info + ~((_QWORD)&WebCore::JSSVGMPathElement::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSSVGMPathElement::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSSVGMPathElement::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSSVGElement::prototype((WebCore::JSSVGElement *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSSVGMPathElementPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v30 = (JSC::JSCell *)WebCore::JSSVGMPathElementPrototype::create((WebCore::JSSVGMPathElementPrototype *)a1, (JSC::VM *)a2, Structure, v29);
  v31 = WebCore::JSSVGMPathElement::createStructure((uint64_t *)a1, a2, v30);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v31, (uint64_t)&WebCore::JSSVGMPathElement::s_info);
LABEL_22:
  v32 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v32, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6568) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGMPathElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGMPathElementPrototype::s_info != (char **)(16
                                                               * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                 + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGMPathElement>,(WebCore::DOMConstructorID)821>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGMPathElement_href(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedString>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 184));
}

uint64_t WebCore::JSSVGMPathElement::subspaceForImpl(WebCore::JSSVGMPathElement *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 6648);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  v20 = *(_QWORD *)(v8 + 6648);
  if (!v20)
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v22, "IsoSpace T");
    v21 = 0;
    MEMORY[0x19AEA3204](v9, &v22, (char *)this + 192, (char *)this + 1872, 40, 8, &v21);
    v11 = v21;
    v21 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v22;
    v22 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v20 = v9;
    v13 = *(_QWORD *)(v8 + 6648);
    *(_QWORD *)(v8 + 6648) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = *(unsigned int *)(v6 + 2844);
    if ((_DWORD)v14 == *(_DWORD *)(v6 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v6 + 2832, (unint64_t)&v20);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = v9;
      *(_DWORD *)(v6 + 2844) = v14 + 1;
    }
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 6648);
  *(_QWORD *)(v3 + 6648) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSSVGMarkerElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSVGMarkerElementPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGMarkerElementPrototype::create(WebCore::JSSVGMarkerElementPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<19u>(this, (uint64_t)&WebCore::JSSVGMarkerElement::s_info, (uint64_t)&WebCore::JSSVGMarkerElementPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGMarkerElement>,(WebCore::DOMConstructorID)822>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6576);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGElement>,(WebCore::DOMConstructorID)783>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v34);
    v5[2] = SlowCase + (int)v34;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGMarkerElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v35 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v35);
    v10[2848] = v2 + (int)v35;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSSVGMarkerElement::s_info + ~((_QWORD)&WebCore::JSSVGMarkerElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGMarkerElement::s_info + ~((_QWORD)&WebCore::JSSVGMarkerElement::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSSVGMarkerElement::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSSVGMarkerElement::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSSVGElement::prototype((WebCore::JSSVGElement *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSSVGMarkerElementPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v30 = (JSC::JSCell *)WebCore::JSSVGMarkerElementPrototype::create((WebCore::JSSVGMarkerElementPrototype *)a1, (JSC::VM *)a2, Structure, v29);
  v31 = WebCore::JSSVGMarkerElement::createStructure((uint64_t *)a1, a2, v30);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v31, (uint64_t)&WebCore::JSSVGMarkerElement::s_info);
LABEL_22:
  v32 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v32, 14, (uint64_t)&v36);
  JSC::reifyStaticProperties<6u>((JSC::VM *)a1, (uint64_t)&WebCore::JSSVGMarkerElement::s_info, &WebCore::JSSVGMarkerElementConstructorTableValues, (JSC::JSObject *)v2);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6576) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGMarkerElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGMarkerElementPrototype::s_info != (char **)(16
                                                                * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                  + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGMarkerElement>,(WebCore::DOMConstructorID)822>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGMarkerElement_refX(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 200));
}

unint64_t WebCore::jsSVGMarkerElement_refY(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 208));
}

unint64_t WebCore::jsSVGMarkerElement_markerUnits(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 232));
}

unint64_t WebCore::jsSVGMarkerElement_markerWidth(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 216));
}

unint64_t WebCore::jsSVGMarkerElement_markerHeight(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 224));
}

unint64_t WebCore::jsSVGMarkerElement_orientType(uint64_t a1, uint64_t a2)
{
  WTF *v2;
  uint64_t v3;
  unint64_t v4;

  v2 = *(WTF **)(*(_QWORD *)(a2 + 24) + 248);
  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  ++*((_DWORD *)v2 + 2);
  v4 = WebCore::wrap<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>>(a1, v3, v2);
  if (*((_DWORD *)v2 + 2) == 1)
    (*(void (**)(WTF *))(*(_QWORD *)v2 + 8))(v2);
  else
    --*((_DWORD *)v2 + 2);
  return v4;
}

unint64_t WebCore::jsSVGMarkerElement_orientAngle(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGAngle>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 240));
}

uint64_t WebCore::jsSVGMarkerElement_orient(uint64_t a1, uint64_t a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  WTF::StringImpl *v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;

  v7 = *(_QWORD *)WebCore::Element::getAttribute(*(WebCore::Element **)(a2 + 24), (const WebCore::QualifiedName *)&WebCore::SVGNames::orientAttr, a3, a4, a5);
  if (!v7)
    return *(_QWORD *)(*(_QWORD *)(a1 + 56) + 41968);
  v8 = *(_DWORD *)v7;
  v9 = *(_DWORD *)(v7 + 4);
  *(_DWORD *)v7 += 2;
  v10 = *(_QWORD *)(a1 + 56);
  if (v9)
  {
    if (v9 != 1)
    {
LABEL_4:
      v11 = *(_QWORD *)(v10 + 64760);
      if (!v11 || v7 != *(_QWORD *)(v11 + 8))
      {
        v11 = JSC::jsStringWithCacheSlowCase();
        v8 = *(_DWORD *)v7 - 2;
      }
      goto LABEL_7;
    }
    v13 = *(unsigned __int8 **)(v7 + 8);
    if ((*(_BYTE *)(v7 + 16) & 4) != 0)
    {
      v14 = *v13;
    }
    else
    {
      v15 = *(unsigned __int16 *)v13;
      if (v15 > 0xFF)
        goto LABEL_4;
      v14 = v15;
    }
    v11 = *(_QWORD *)(v10 + 8 * v14 + 42216);
  }
  else
  {
    v11 = *(_QWORD *)(v10 + 41968);
  }
LABEL_7:
  if (v8)
    *(_DWORD *)v7 = v8;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v7, v6);
  return v11;
}

BOOL WebCore::setJSSVGMarkerElement_orient(JSC::JSGlobalObject *a1, uint64_t a2, JSC::JSRopeString *this)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WebCore::Element *v8;
  __n128 v9;
  int v10;
  _BOOL8 v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v17;
  int v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  char v22;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSSVGMarkerElement::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSSVGMarkerElement::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(WebCore::Element **)(a2 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, (unint64_t)this, (uint64_t)&v17);
  v10 = v18;
  v11 = v18 == 0;
  if (!v18)
  {
    v12 = v17;
    v17 = 0;
    v19 = v12;
    WebCore::Element::setAttribute(v8, (const WebCore::QualifiedName *)&WebCore::SVGNames::orientAttr, &v19, 0, &v20, v9);
    if (v22)
    {
      v14 = v21;
      v21 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v13);
        else
          *(_DWORD *)v14 -= 2;
      }
    }
    v15 = v19;
    v19 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v13);
      else
        *(_DWORD *)v15 -= 2;
    }
    v10 = v18;
  }
  if (v10 != -1)
    ((void (*)(uint64_t *, WTF::StringImpl **))off_1E32FBC30[v10])(&v20, &v17);
  return v11;
}

unint64_t WebCore::jsSVGMarkerElement_viewBox(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGRect>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 176));
}

unint64_t WebCore::jsSVGMarkerElement_preserveAspectRatio(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGPreserveAspectRatio>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 184));
}

uint64_t WebCore::JSSVGMarkerElement::subspaceForImpl(WebCore::JSSVGMarkerElement *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 6656);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  v20 = *(_QWORD *)(v8 + 6656);
  if (!v20)
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v22, "IsoSpace T");
    v21 = 0;
    MEMORY[0x19AEA3204](v9, &v22, (char *)this + 192, (char *)this + 1872, 40, 8, &v21);
    v11 = v21;
    v21 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v22;
    v22 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v20 = v9;
    v13 = *(_QWORD *)(v8 + 6656);
    *(_QWORD *)(v8 + 6656) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = *(unsigned int *)(v6 + 2844);
    if ((_DWORD)v14 == *(_DWORD *)(v6 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v6 + 2832, (unint64_t)&v20);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = v9;
      *(_DWORD *)(v6 + 2844) = v14 + 1;
    }
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 6656);
  *(_QWORD *)(v3 + 6656) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSSVGMaskElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSVGMaskElementPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGMaskElementPrototype::create(WebCore::JSSVGMaskElementPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<11u>(this, (uint64_t)&WebCore::JSSVGMaskElement::s_info, (uint64_t)&WebCore::JSSVGMaskElementPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGMaskElement>,(WebCore::DOMConstructorID)823>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6584);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGElement>,(WebCore::DOMConstructorID)783>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v34);
    v5[2] = SlowCase + (int)v34;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGMaskElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v35 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v35);
    v10[2848] = v2 + (int)v35;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSSVGMaskElement::s_info + ~((_QWORD)&WebCore::JSSVGMaskElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGMaskElement::s_info + ~((_QWORD)&WebCore::JSSVGMaskElement::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSSVGMaskElement::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSSVGMaskElement::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSSVGElement::prototype((WebCore::JSSVGElement *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSSVGMaskElementPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v30 = (JSC::JSCell *)WebCore::JSSVGMaskElementPrototype::create((WebCore::JSSVGMaskElementPrototype *)a1, (JSC::VM *)a2, Structure, v29);
  v31 = WebCore::JSSVGMaskElement::createStructure((uint64_t *)a1, a2, v30);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v31, (uint64_t)&WebCore::JSSVGMaskElement::s_info);
LABEL_22:
  v32 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v32, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6584) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGMaskElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGMaskElementPrototype::s_info != (char **)(16
                                                              * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGMaskElement>,(WebCore::DOMConstructorID)823>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGMaskElement_maskUnits(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 216));
}

unint64_t WebCore::jsSVGMaskElement_maskContentUnits(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 224));
}

unint64_t WebCore::jsSVGMaskElement_x(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 184));
}

unint64_t WebCore::jsSVGMaskElement_y(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 192));
}

unint64_t WebCore::jsSVGMaskElement_width(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 200));
}

unint64_t WebCore::jsSVGMaskElement_height(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 208));
}

unint64_t WebCore::jsSVGMaskElement_requiredExtensions(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  WebCore::SVGElementRareData *v5;
  void *v6;
  WebCore::SVGConditionalProcessingAttributes *v7;

  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 176) + 8);
  *(_DWORD *)(v4 + 24) += 2;
  v5 = (WebCore::SVGElementRareData *)WebCore::SVGElement::ensureSVGRareData((WebCore::SVGElement *)v4);
  v7 = WebCore::SVGElementRareData::conditionalProcessingAttributes(v5, (WebCore::SVGElement *)v4);
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v4, v6);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  return WebCore::wrap<WebCore::SVGStringList>(a1, v3, *((WTF **)v7 + 1));
}

unint64_t WebCore::jsSVGMaskElement_systemLanguage(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  WebCore::SVGElementRareData *v5;
  void *v6;
  WebCore::SVGConditionalProcessingAttributes *v7;

  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 176) + 8);
  *(_DWORD *)(v4 + 24) += 2;
  v5 = (WebCore::SVGElementRareData *)WebCore::SVGElement::ensureSVGRareData((WebCore::SVGElement *)v4);
  v7 = WebCore::SVGElementRareData::conditionalProcessingAttributes(v5, (WebCore::SVGElement *)v4);
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v4, v6);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  return WebCore::wrap<WebCore::SVGStringList>(a1, v3, *((WTF **)v7 + 2));
}

unint64_t WebCore::jsSVGMaskElement_requiredFeatures(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  WebCore::SVGElementRareData *v5;
  void *v6;
  WTF **v7;

  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 176) + 8);
  *(_DWORD *)(v4 + 24) += 2;
  v5 = (WebCore::SVGElementRareData *)WebCore::SVGElement::ensureSVGRareData((WebCore::SVGElement *)v4);
  v7 = (WTF **)WebCore::SVGElementRareData::conditionalProcessingAttributes(v5, (WebCore::SVGElement *)v4);
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v4, v6);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  return WebCore::wrap<WebCore::SVGStringList>(a1, v3, *v7);
}

uint64_t WebCore::JSSVGMaskElement::subspaceForImpl(WebCore::JSSVGMaskElement *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 6664);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  v20 = *(_QWORD *)(v8 + 6664);
  if (!v20)
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v22, "IsoSpace T");
    v21 = 0;
    MEMORY[0x19AEA3204](v9, &v22, (char *)this + 192, (char *)this + 1872, 40, 8, &v21);
    v11 = v21;
    v21 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v22;
    v22 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v20 = v9;
    v13 = *(_QWORD *)(v8 + 6664);
    *(_QWORD *)(v8 + 6664) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = *(unsigned int *)(v6 + 2844);
    if ((_DWORD)v14 == *(_DWORD *)(v6 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v6 + 2832, (unint64_t)&v20);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = v9;
      *(_DWORD *)(v6 + 2844) = v14 + 1;
    }
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 6664);
  *(_QWORD *)(v3 + 6664) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

WTF::StringImpl *WebCore::JSSVGMatrixPrototype::finishCreation(WebCore::JSSVGMatrixPrototype *this, JSC::VM *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<18u>(a2, (uint64_t)&WebCore::JSSVGMatrix::s_info, (uint64_t)&WebCore::JSSVGMatrixPrototypeTableValues, this);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5 = JSC::jsNontrivialString((uint64_t)a2, &v8);
  JSC::JSObject::putDirectWithoutTransition((int *)this, a2, v4, v5, 6);
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_DWORD *WebCore::JSSVGMatrix::destroy(WebCore::JSSVGMatrix *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSSVGMatrix::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::JSSVGMatrix::createPrototype(WebCore::JSSVGMatrix *this, JSC::JSCell **a2, WebCore::JSDOMGlobalObject *a3)
{
  unint64_t v4;
  WebCore::JSDOMGlobalObject *v5;
  JSC::Structure *v6;

  v4 = JSC::Structure::create((uint64_t *)this, (int)a2, a2[82]);
  *(_DWORD *)(v4 + 16) |= 0x80000u;
  return WebCore::JSSVGMatrixPrototype::create(this, v4, v5, v6);
}

unint64_t WebCore::JSSVGMatrixPrototype::create(WebCore::JSSVGMatrixPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  unint64_t v6;
  int v7;

  v6 = JSC::allocateCell<WebCore::JSAbstractRangePrototype>((uint64_t)this);
  v7 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)v6 = a2 >> 4;
  *(_DWORD *)(v6 + 4) = v7;
  *(_QWORD *)(v6 + 8) = 0;
  WebCore::JSSVGMatrixPrototype::finishCreation((WebCore::JSSVGMatrixPrototype *)v6, this);
  return v6;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGMatrix>,(WebCore::DOMConstructorID)824>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  uint64_t v17;
  unint64_t v19;
  unint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  int v23;
  int v24;
  uint64_t v25;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6592);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v21) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v19 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v19);
    v5[2] = SlowCase + (int)v19;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v21, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGMatrix>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 >= v9[2847])
  {
    v2 = v9[2848];
    if ((v2 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v2 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_11;
    }
    v20 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v20);
    v9[2848] = v2 + (int)v20;
  }
  v9[2846] = v2 + 48;
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v21 = 0;
  v22 = v2;
  v23 = -1;
  v24 = 0x1000000;
  v25 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v21);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v21);
  v13 = v21;
  v21 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v21 = 0;
  v22 = v2;
  v23 = -1;
  v24 = 0x1000000;
  v25 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v21);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v17 = *(_QWORD *)(WebCore::getDOMStructure<WebCore::JSSVGMatrix>((WebCore::JSSVGMatrix *)a1, (JSC::VM *)a2, v16) + 48);
  v21 = 0;
  v22 = v2;
  v23 = -1;
  v24 = 0x1000000;
  v25 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v17, 14, (uint64_t)&v21);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6592) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGMatrixConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGMatrixPrototype::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGMatrix>,(WebCore::DOMConstructorID)824>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGMatrix_a(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;

  v2 = *(double *)(*(_QWORD *)(a2 + 24) + 32);
  if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v3 = (int)v2, v2 == (double)(int)v3)
    && ((_DWORD)v3 || (*(_QWORD *)&v2 & 0x8000000000000000) == 0))
  {
    return v3 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v2 + 0x2000000000000;
  }
}

BOOL WebCore::setJSSVGMatrix_a(JSC::JSGlobalObject *a1, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  double v8;
  JSValue v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  double v14;
  unint64_t v15;
  WTF::StringImpl *v16;

  v5 = *((_QWORD *)a1 + 7);
  v6 = WebCore::IDLOperation<WebCore::JSSVGMatrix>::cast(a2);
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v7 = *(_QWORD *)(v6 + 24);
  v15 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v8 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v15, a1);
    v8 = v14;
  }
  else
  {
    *(_QWORD *)&v8 = a3 - 0x2000000000000;
  }
  if (*(_DWORD *)(v5 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5))
    return 0;
  if (*(_BYTE *)(v7 + 24) == 1)
  {
    LOBYTE(v15) = 4;
    v16 = 0;
    if (!*(_QWORD *)(v5 + 16))
    {
      v9.super.isa = (Class)WebCore::createDOMException(a1, (JSC::JSGlobalObject *)4, (JSC::JSGlobalObject *)&v16);
      JSC::VM::throwException((JSC::VM *)v5, a1, v9);
      v11 = v16;
      v16 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v10);
        else
          *(_DWORD *)v11 -= 2;
      }
    }
  }
  else
  {
    *(double *)(v7 + 32) = v8;
    v12 = *(_QWORD *)(v7 + 16);
    if (v12)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 32))(v12, v7);
  }
  return 1;
}

unint64_t WebCore::jsSVGMatrix_b(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;

  v2 = *(double *)(*(_QWORD *)(a2 + 24) + 40);
  if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v3 = (int)v2, v2 == (double)(int)v3)
    && ((_DWORD)v3 || (*(_QWORD *)&v2 & 0x8000000000000000) == 0))
  {
    return v3 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v2 + 0x2000000000000;
  }
}

BOOL WebCore::setJSSVGMatrix_b(JSC::JSGlobalObject *a1, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  double v8;
  JSValue v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  double v14;
  unint64_t v15;
  WTF::StringImpl *v16;

  v5 = *((_QWORD *)a1 + 7);
  v6 = WebCore::IDLOperation<WebCore::JSSVGMatrix>::cast(a2);
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v7 = *(_QWORD *)(v6 + 24);
  v15 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v8 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v15, a1);
    v8 = v14;
  }
  else
  {
    *(_QWORD *)&v8 = a3 - 0x2000000000000;
  }
  if (*(_DWORD *)(v5 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5))
    return 0;
  if (*(_BYTE *)(v7 + 24) == 1)
  {
    LOBYTE(v15) = 4;
    v16 = 0;
    if (!*(_QWORD *)(v5 + 16))
    {
      v9.super.isa = (Class)WebCore::createDOMException(a1, (JSC::JSGlobalObject *)4, (JSC::JSGlobalObject *)&v16);
      JSC::VM::throwException((JSC::VM *)v5, a1, v9);
      v11 = v16;
      v16 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v10);
        else
          *(_DWORD *)v11 -= 2;
      }
    }
  }
  else
  {
    *(double *)(v7 + 40) = v8;
    v12 = *(_QWORD *)(v7 + 16);
    if (v12)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 32))(v12, v7);
  }
  return 1;
}

unint64_t WebCore::jsSVGMatrix_c(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;

  v2 = *(double *)(*(_QWORD *)(a2 + 24) + 48);
  if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v3 = (int)v2, v2 == (double)(int)v3)
    && ((_DWORD)v3 || (*(_QWORD *)&v2 & 0x8000000000000000) == 0))
  {
    return v3 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v2 + 0x2000000000000;
  }
}

BOOL WebCore::setJSSVGMatrix_c(JSC::JSGlobalObject *a1, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  double v8;
  JSValue v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  double v14;
  unint64_t v15;
  WTF::StringImpl *v16;

  v5 = *((_QWORD *)a1 + 7);
  v6 = WebCore::IDLOperation<WebCore::JSSVGMatrix>::cast(a2);
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v7 = *(_QWORD *)(v6 + 24);
  v15 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v8 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v15, a1);
    v8 = v14;
  }
  else
  {
    *(_QWORD *)&v8 = a3 - 0x2000000000000;
  }
  if (*(_DWORD *)(v5 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5))
    return 0;
  if (*(_BYTE *)(v7 + 24) == 1)
  {
    LOBYTE(v15) = 4;
    v16 = 0;
    if (!*(_QWORD *)(v5 + 16))
    {
      v9.super.isa = (Class)WebCore::createDOMException(a1, (JSC::JSGlobalObject *)4, (JSC::JSGlobalObject *)&v16);
      JSC::VM::throwException((JSC::VM *)v5, a1, v9);
      v11 = v16;
      v16 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v10);
        else
          *(_DWORD *)v11 -= 2;
      }
    }
  }
  else
  {
    *(double *)(v7 + 48) = v8;
    v12 = *(_QWORD *)(v7 + 16);
    if (v12)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 32))(v12, v7);
  }
  return 1;
}

unint64_t WebCore::jsSVGMatrix_d(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;

  v2 = *(double *)(*(_QWORD *)(a2 + 24) + 56);
  if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v3 = (int)v2, v2 == (double)(int)v3)
    && ((_DWORD)v3 || (*(_QWORD *)&v2 & 0x8000000000000000) == 0))
  {
    return v3 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v2 + 0x2000000000000;
  }
}

BOOL WebCore::setJSSVGMatrix_d(JSC::JSGlobalObject *a1, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  double v8;
  JSValue v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  double v14;
  unint64_t v15;
  WTF::StringImpl *v16;

  v5 = *((_QWORD *)a1 + 7);
  v6 = WebCore::IDLOperation<WebCore::JSSVGMatrix>::cast(a2);
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v7 = *(_QWORD *)(v6 + 24);
  v15 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v8 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v15, a1);
    v8 = v14;
  }
  else
  {
    *(_QWORD *)&v8 = a3 - 0x2000000000000;
  }
  if (*(_DWORD *)(v5 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5))
    return 0;
  if (*(_BYTE *)(v7 + 24) == 1)
  {
    LOBYTE(v15) = 4;
    v16 = 0;
    if (!*(_QWORD *)(v5 + 16))
    {
      v9.super.isa = (Class)WebCore::createDOMException(a1, (JSC::JSGlobalObject *)4, (JSC::JSGlobalObject *)&v16);
      JSC::VM::throwException((JSC::VM *)v5, a1, v9);
      v11 = v16;
      v16 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v10);
        else
          *(_DWORD *)v11 -= 2;
      }
    }
  }
  else
  {
    *(double *)(v7 + 56) = v8;
    v12 = *(_QWORD *)(v7 + 16);
    if (v12)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 32))(v12, v7);
  }
  return 1;
}

unint64_t WebCore::jsSVGMatrix_e(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;

  v2 = *(double *)(*(_QWORD *)(a2 + 24) + 64);
  if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v3 = (int)v2, v2 == (double)(int)v3)
    && ((_DWORD)v3 || (*(_QWORD *)&v2 & 0x8000000000000000) == 0))
  {
    return v3 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v2 + 0x2000000000000;
  }
}

BOOL WebCore::setJSSVGMatrix_e(JSC::JSGlobalObject *a1, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  double v8;
  JSValue v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  double v14;
  unint64_t v15;
  WTF::StringImpl *v16;

  v5 = *((_QWORD *)a1 + 7);
  v6 = WebCore::IDLOperation<WebCore::JSSVGMatrix>::cast(a2);
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v7 = *(_QWORD *)(v6 + 24);
  v15 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v8 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v15, a1);
    v8 = v14;
  }
  else
  {
    *(_QWORD *)&v8 = a3 - 0x2000000000000;
  }
  if (*(_DWORD *)(v5 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5))
    return 0;
  if (*(_BYTE *)(v7 + 24) == 1)
  {
    LOBYTE(v15) = 4;
    v16 = 0;
    if (!*(_QWORD *)(v5 + 16))
    {
      v9.super.isa = (Class)WebCore::createDOMException(a1, (JSC::JSGlobalObject *)4, (JSC::JSGlobalObject *)&v16);
      JSC::VM::throwException((JSC::VM *)v5, a1, v9);
      v11 = v16;
      v16 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v10);
        else
          *(_DWORD *)v11 -= 2;
      }
    }
  }
  else
  {
    *(double *)(v7 + 64) = v8;
    v12 = *(_QWORD *)(v7 + 16);
    if (v12)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 32))(v12, v7);
  }
  return 1;
}

unint64_t WebCore::jsSVGMatrix_f(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;

  v2 = *(double *)(*(_QWORD *)(a2 + 24) + 72);
  if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v3 = (int)v2, v2 == (double)(int)v3)
    && ((_DWORD)v3 || (*(_QWORD *)&v2 & 0x8000000000000000) == 0))
  {
    return v3 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v2 + 0x2000000000000;
  }
}

BOOL WebCore::setJSSVGMatrix_f(JSC::JSGlobalObject *a1, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  double v8;
  JSValue v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  double v14;
  unint64_t v15;
  WTF::StringImpl *v16;

  v5 = *((_QWORD *)a1 + 7);
  v6 = WebCore::IDLOperation<WebCore::JSSVGMatrix>::cast(a2);
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v7 = *(_QWORD *)(v6 + 24);
  v15 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v8 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v15, a1);
    v8 = v14;
  }
  else
  {
    *(_QWORD *)&v8 = a3 - 0x2000000000000;
  }
  if (*(_DWORD *)(v5 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5))
    return 0;
  if (*(_BYTE *)(v7 + 24) == 1)
  {
    LOBYTE(v15) = 4;
    v16 = 0;
    if (!*(_QWORD *)(v5 + 16))
    {
      v9.super.isa = (Class)WebCore::createDOMException(a1, (JSC::JSGlobalObject *)4, (JSC::JSGlobalObject *)&v16);
      JSC::VM::throwException((JSC::VM *)v5, a1, v9);
      v11 = v16;
      v16 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v10);
        else
          *(_DWORD *)v11 -= 2;
      }
    }
  }
  else
  {
    *(double *)(v7 + 72) = v8;
    v12 = *(_QWORD *)(v7 + 16);
    if (v12)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 32))(v12, v7);
  }
  return 1;
}

uint64_t WebCore::JSSVGMatrixOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

_QWORD *WebCore::JSSVGMatrixOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  int v23;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v23 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v23) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v23;
        if (v12 == v3)
          goto LABEL_3;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_3:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v13 = (_QWORD *)(v5 + 16 * v11);
      *v13 = -1;
      v16 = v13[1];
      v15 = v13 + 1;
      v14 = v16;
      if (v16)
      {
        *(_QWORD *)(v14 + 8) = 3;
        *v15 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v17 = *v4;
      if (*v4)
        v18 = *(_DWORD *)(v17 - 12) - 1;
      else
        v18 = -1;
      *(_DWORD *)(v17 - 12) = v18;
      v19 = *v4;
      if (*v4)
      {
        v20 = 6 * *(_DWORD *)(v19 - 12);
        v21 = *(_DWORD *)(v19 - 4);
        if (v20 < v21 && v21 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v21 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::toJSNewlyCreated(WebCore::JSSVGMatrix **a1, WTF **a2, WebCore::JSDOMGlobalObject *a3)
{
  WTF *v5;
  unint64_t v6;
  WebCore::JSSVGMatrix *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t SlowCase;
  WTF *v12;
  WebCore::JSSVGMatrix *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *Allocator;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;
  void *v23;
  int v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  WTF *v32;

  v5 = *a2;
  v6 = WebCore::getDOMStructure<WebCore::JSSVGMatrix>(a1[7], (JSC::VM *)a1, a3);
  v7 = a1[7];
  v8 = *((_QWORD *)v7 + 5182);
  v9 = *(_QWORD *)(v8 + 23536);
  v10 = *(_QWORD **)(v9 + 6672);
  if (!v10)
  {
    v18 = *(_QWORD *)(v8 + 22648);
    if (__ldaxr((unsigned __int8 *)v18))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v18))
    {
LABEL_21:
      v20 = *(_QWORD *)(v18 + 2824);
      if (!*(_QWORD *)(v20 + 6672))
      {
        v25 = WTF::fastMalloc((WTF *)0xF8);
        WTF::CString::CString((WTF::CString *)&v32, "IsoSpace T");
        v31 = 0;
        MEMORY[0x19AEA3204](v25, &v32, (char *)v7 + 192, (char *)v7 + 1872, 32, 8, &v31);
        v27 = (uint64_t)v31;
        v31 = 0;
        if (v27)
          (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
        v28 = v32;
        v32 = 0;
        if (v28)
        {
          if (*(_DWORD *)v28 == 1)
            WTF::fastFree(v28, v26);
          else
            --*(_DWORD *)v28;
        }
        v29 = *(_QWORD *)(v20 + 6672);
        *(_QWORD *)(v20 + 6672) = v25;
        if (v29)
          (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
      }
      v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
      JSC::GCClient::IsoSubspace::IsoSubspace();
      v21 = *(_QWORD *)(v9 + 6672);
      *(_QWORD *)(v9 + 6672) = v10;
      if (v21)
      {
        v22 = (WTF *)MEMORY[0x19AEA3528]();
        WTF::fastFree(v22, v23);
      }
      v24 = __ldxr((unsigned __int8 *)v18);
      if (v24 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v18))
          goto LABEL_2;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v18);
      goto LABEL_2;
    }
    MEMORY[0x19AEA534C](v18);
    goto LABEL_21;
  }
LABEL_2:
  SlowCase = v10[3];
  if (SlowCase < v10[4])
  {
LABEL_3:
    v10[3] = SlowCase + 32;
    goto LABEL_4;
  }
  SlowCase = v10[5];
  if ((SlowCase & 1) == 0)
  {
    v30 = *(_QWORD *)(SlowCase + 8) ^ v10[6];
    v10[4] = SlowCase + HIDWORD(v30);
    v10[5] = SlowCase + (int)v30;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_4:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v6);
  v12 = *a2;
  *a2 = 0;
  *(_QWORD *)(SlowCase + 24) = v12;
  if (*((_BYTE *)v7 + 755))
    __dmb(0xAu);
  v13 = a1[415];
  if ((byte_1ECE81638 & 1) == 0)
  {
    qword_1ECE81630 = (uint64_t)&off_1E32F75C0;
    byte_1ECE81638 = 1;
  }
  v32 = v5;
  if ((SlowCase & 8) != 0)
    v14 = (SlowCase - 112) | 1;
  else
    v14 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v14 & 1) != 0)
    v15 = v14 + 47;
  else
    v15 = *(_QWORD *)v14 + 32;
  Allocator = *(_QWORD **)(v15 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v15 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1ECE81630;
  Allocator[2] = v13;
  v31 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)v13 + 4, (uint64_t *)&v32, (uint64_t *)&v31);
  if (v31)
    v31[1] = 3;
  return SlowCase;
}

uint64_t WebCore::JSSVGMetadataElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSVGMetadataElementPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGMetadataElementPrototype::create(WebCore::JSSVGMetadataElementPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  JSC::Structure *v15;
  int v16;
  unint64_t v18;
  WTF::StringImpl *v19[6];
  int v20;
  int v21;
  JSC::Structure *v22;
  int v23;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v18 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v18);
    *((_QWORD *)this + 4865) = SlowCase + (int)v18;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)SlowCase, this);
  WTF::AtomStringImpl::addLiteral();
  v9 = v19[0];
  JSC::reifyStaticProperty(this, (uint64_t)&WebCore::JSSVGMetadataElement::s_info, (unint64_t *)v19, (uint64_t)&WebCore::JSSVGMetadataElementPrototypeTableValues, (unsigned __int8 *)SlowCase);
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v10);
    else
      *(_DWORD *)v9 -= 2;
  }
  v11 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create((uint64_t)this, v19);
  v14 = v19[0];
  v19[0] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v23 = *(_DWORD *)SlowCase;
  v22 = v15;
  v16 = JSC::Structure::outOfLineCapacity(v15);
  v20 = 0;
  v21 = v16;
  v19[0] = (WTF::StringImpl *)&v21;
  v19[1] = (WTF::StringImpl *)SlowCase;
  v19[2] = this;
  v19[3] = (WTF::StringImpl *)&v23;
  v19[4] = (WTF::StringImpl *)&v22;
  v19[5] = (WTF::StringImpl *)&v20;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v15, this, v11, 6, (uint64_t)v19);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v20, v13);
  *((_DWORD *)v15 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGMetadataElement>,(WebCore::DOMConstructorID)825>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6600);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGElement>,(WebCore::DOMConstructorID)783>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v34);
    v5[2] = SlowCase + (int)v34;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGMetadataElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v35 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v35);
    v10[2848] = v2 + (int)v35;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSSVGMetadataElement::s_info
         + ~((_QWORD)&WebCore::JSSVGMetadataElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGMetadataElement::s_info
                                                                      + ~((_QWORD)&WebCore::JSSVGMetadataElement::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSSVGMetadataElement::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSSVGMetadataElement::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSSVGElement::prototype((WebCore::JSSVGElement *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSSVGMetadataElementPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v30 = (JSC::JSCell *)WebCore::JSSVGMetadataElementPrototype::create((WebCore::JSSVGMetadataElementPrototype *)a1, (JSC::VM *)a2, Structure, v29);
  v31 = WebCore::JSSVGMetadataElement::createStructure((uint64_t *)a1, a2, v30);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v31, (uint64_t)&WebCore::JSSVGMetadataElement::s_info);
LABEL_22:
  v32 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v32, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6600) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGMetadataElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGMetadataElementPrototype::s_info != (char **)(16
                                                                  * *(unsigned int *)(16
                                                                                    * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                    + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGMetadataElement>,(WebCore::DOMConstructorID)825>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::JSSVGMetadataElement::subspaceForImpl(WebCore::JSSVGMetadataElement *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 6680);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  v20 = *(_QWORD *)(v8 + 6680);
  if (!v20)
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v22, "IsoSpace T");
    v21 = 0;
    MEMORY[0x19AEA3204](v9, &v22, (char *)this + 192, (char *)this + 1872, 40, 8, &v21);
    v11 = v21;
    v21 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v22;
    v22 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v20 = v9;
    v13 = *(_QWORD *)(v8 + 6680);
    *(_QWORD *)(v8 + 6680) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = *(unsigned int *)(v6 + 2844);
    if ((_DWORD)v14 == *(_DWORD *)(v6 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v6 + 2832, (unint64_t)&v20);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = v9;
      *(_DWORD *)(v6 + 2844) = v14 + 1;
    }
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 6680);
  *(_QWORD *)(v3 + 6680) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

_DWORD *WebCore::JSSVGNumber::destroy(WebCore::JSSVGNumber *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSSVGNumber::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSVGNumberPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGNumberPrototype::create(WebCore::JSSVGNumberPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>(this, (uint64_t)&WebCore::JSSVGNumber::s_info, (uint64_t)&WebCore::JSSVGNumberPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGNumber>,(WebCore::DOMConstructorID)826>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6608);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGNumber>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSSVGNumber::s_info + ~((_QWORD)&WebCore::JSSVGNumber::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGNumber::s_info + ~((_QWORD)&WebCore::JSSVGNumber::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSSVGNumber::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSSVGNumber::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSSVGNumberPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSSVGNumberPrototype::create((WebCore::JSSVGNumberPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSSVGNumber::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSSVGNumber::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6608) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGNumberConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGNumberPrototype::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGNumber>,(WebCore::DOMConstructorID)826>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGNumber_value(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(a2 + 24) + 28);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, (double)(int)v4 == v3)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

BOOL WebCore::setJSSVGNumber_value(JSC *this, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  JSValue v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  float v15;
  uint64_t v16;
  double v18;
  unint64_t v19;
  WTF::StringImpl *v20;

  v4 = *((_QWORD *)this + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGNumber::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGNumber::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v19 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v19, this);
    v11 = v18;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
    return 0;
  if ((*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v11 < -3.40282347e38 || v11 > 3.40282347e38)
  {
    JSC::throwTypeError();
    return 0;
  }
  if (*(_BYTE *)(v10 + 24) == 1)
  {
    LOBYTE(v19) = 4;
    v20 = 0;
    if (!*(_QWORD *)(v4 + 16))
    {
      v12.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)4, (JSC::JSGlobalObject *)&v20);
      JSC::VM::throwException((JSC::VM *)v4, this, v12);
      v14 = v20;
      v20 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v13);
        else
          *(_DWORD *)v14 -= 2;
      }
    }
  }
  else
  {
    v15 = v11;
    *(float *)(v10 + 28) = v15;
    v16 = *(_QWORD *)(v10 + 16);
    if (v16)
      (*(void (**)(uint64_t, uint64_t, const char *, uint64_t))(*(_QWORD *)v16 + 32))(v16, v10, "The provided value is outside the range of a float", 51);
  }
  return 1;
}

uint64_t WebCore::JSSVGNumberOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

_QWORD *WebCore::JSSVGNumberOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::createWrapper<WebCore::SVGNumber,WebCore::SVGNumber>(uint64_t a1, WTF **a2)
{
  WTF *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v16;
  JSC::Structure *v17;
  JSC::JSCell *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  void *v34;
  int v35;
  unint64_t SlowCase;
  WTF *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *Allocator;
  unint64_t v43;
  _QWORD *v44;
  WTF *v45;

  v4 = *a2;
  v5 = *(_QWORD *)(a1 + 3296);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSSVGNumber::s_info + ~((_QWORD)&WebCore::JSSVGNumber::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGNumber::s_info + ~((_QWORD)&WebCore::JSSVGNumber::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSSVGNumber::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSSVGNumber::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = *(uint64_t **)(a1 + 56);
  Structure = WebCore::JSSVGNumberPrototype::createStructure(v14, a1, *(JSC::JSCell **)(a1 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v18 = (JSC::JSCell *)WebCore::JSSVGNumberPrototype::create((WebCore::JSSVGNumberPrototype *)v14, Structure, v16, v17);
  v19 = WebCore::JSSVGNumber::createStructure(v14, a1, v18);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v19, (uint64_t)&WebCore::JSSVGNumber::s_info);
LABEL_8:
  v20 = *(_QWORD *)(a1 + 56);
  v21 = *(_QWORD *)(v20 + 41456);
  v22 = *(_QWORD *)(v21 + 23536);
  v23 = *(_QWORD **)(v22 + 6688);
  if (v23)
    goto LABEL_28;
  v24 = *(_QWORD *)(v21 + 22648);
  if (__ldaxr((unsigned __int8 *)v24))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v24))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v24);
LABEL_13:
  v26 = *(_QWORD *)(v24 + 2824);
  if (!*(_QWORD *)(v26 + 6688))
  {
    v27 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v45, "IsoSpace T");
    v44 = 0;
    MEMORY[0x19AEA3204](v27, &v45, v20 + 192, v20 + 1872, 32, 8, &v44);
    v29 = (uint64_t)v44;
    v44 = 0;
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    v30 = v45;
    v45 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 1)
        WTF::fastFree(v30, v28);
      else
        --*(_DWORD *)v30;
    }
    v31 = *(_QWORD *)(v26 + 6688);
    *(_QWORD *)(v26 + 6688) = v27;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  }
  v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v32 = *(_QWORD *)(v22 + 6688);
  *(_QWORD *)(v22 + 6688) = v23;
  if (v32)
  {
    v33 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v33, v34);
  }
  v35 = __ldxr((unsigned __int8 *)v24);
  if (v35 != 1)
  {
    __clrex();
    goto LABEL_27;
  }
  if (__stlxr(0, (unsigned __int8 *)v24))
LABEL_27:
    WTF::Lock::unlockSlow((WTF::Lock *)v24);
LABEL_28:
  SlowCase = v23[3];
  if (SlowCase < v23[4])
  {
LABEL_29:
    v23[3] = SlowCase + 32;
    goto LABEL_30;
  }
  SlowCase = v23[5];
  if ((SlowCase & 1) == 0)
  {
    v43 = *(_QWORD *)(SlowCase + 8) ^ v23[6];
    v23[4] = SlowCase + HIDWORD(v43);
    v23[5] = SlowCase + (int)v43;
    goto LABEL_29;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_30:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  v37 = *a2;
  *a2 = 0;
  *(_QWORD *)(SlowCase + 24) = v37;
  if (*(_BYTE *)(v20 + 755))
    __dmb(0xAu);
  v38 = *(_QWORD *)(a1 + 3320);
  if ((byte_1ECE81648 & 1) == 0)
  {
    qword_1ECE81640 = (uint64_t)&off_1E32F75F0;
    byte_1ECE81648 = 1;
  }
  v45 = v4;
  if ((SlowCase & 8) != 0)
    v39 = (SlowCase - 112) | 1;
  else
    v39 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v39 & 1) != 0)
    v40 = v39 + 47;
  else
    v40 = *(_QWORD *)v39 + 32;
  Allocator = *(_QWORD **)(v40 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v40 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1ECE81640;
  Allocator[2] = v38;
  v44 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v38 + 32), (uint64_t *)&v45, (uint64_t *)&v44);
  if (v44)
    v44[1] = 3;
  return SlowCase;
}

uint64_t WebCore::wrap<WebCore::SVGNumber>(uint64_t a1, WTF *a2)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  WTF *v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  WTF *v13;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 3320) + 32);
  if (v2)
  {
    v3 = *(_DWORD *)(v2 - 8);
    v4 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
    v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
    v7 = v3 & ((v6 >> 31) ^ v6);
    v8 = *(WTF **)(v2 + 16 * v7);
    if (v8 == a2)
    {
LABEL_6:
      v10 = *(_QWORD *)(v2 + 16 * v7 + 8);
      if (v10)
      {
        if ((*(_BYTE *)(v10 + 8) & 3) == 0)
        {
          v11 = *(_QWORD *)v10;
          if (*(_QWORD *)v10)
            return v11;
        }
      }
    }
    else
    {
      v9 = 1;
      while (v8)
      {
        v7 = ((_DWORD)v7 + v9) & v3;
        v8 = *(WTF **)(v2 + 16 * v7);
        ++v9;
        if (v8 == a2)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a2 + 2);
  v13 = a2;
  if (*(void (***)(WebCore::SVGNumber *__hidden))a2 == off_1E32EE788)
  {
    v11 = WebCore::createWrapper<WebCore::SVGNumber,WebCore::SVGNumber>(a1, &v13);
    if (v13)
    {
      if (*((_DWORD *)v13 + 2) == 1)
        (*(void (**)(void))(*(_QWORD *)v13 + 8))();
      else
        --*((_DWORD *)v13 + 2);
    }
    return v11;
  }
  result = 254;
  __break(0xC471u);
  return result;
}

BOOL WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGNumberList>::initializeProperties(uint64_t a1, uint64_t a2, JSC::JSCell **a3)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  unint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v13;

  v6 = a2 + 41952;
  JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, *(_QWORD *)(*(_QWORD *)(a2 + 41952) + 1768), 0xFFFE000000000000, 6);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8 = JSC::jsNontrivialString(a2, &v13);
  v9 = v13;
  v13 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  *(_QWORD *)(a1 + 32) = v8;
  if (a1 && v8 && *(_DWORD *)(a2 + 760) >= *(unsigned __int8 *)(a1 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a2 + 192), (const JSCell *)a1);
  JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, *(_QWORD *)(*(_QWORD *)v6 + 1968), v8, 6);
  v10 = *(_QWORD *)(*(_QWORD *)v6 + 2160);
  v11 = WebCore::getDOMStructure<WebCore::JSSVGNumberList>((WebCore::JSSVGNumberList *)a2, a3);
  return JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, v10, *(_QWORD *)(v11 + 48), 14);
}

WTF::StringImpl *WebCore::JSSVGNumberListPrototype::finishCreation(WebCore::JSSVGNumberListPrototype *this, JSC::VM *a2)
{
  unint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t Direct;
  WTF::StringImpl *v8;
  unint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<10u>(a2, (uint64_t)&WebCore::JSSVGNumberList::s_info, (uint64_t)&WebCore::JSSVGNumberListPrototypeTableValues, this);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2712);
  v5 = *(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28) + 672);
  v6 = (_DWORD *)MEMORY[0x1E0CBEBF0];
  *MEMORY[0x1E0CBEBF0] += 2;
  Direct = JSC::JSObject::getDirect(v5, a2, (unint64_t)v6);
  JSC::JSObject::putDirect((unsigned __int8 *)this, a2, v4, Direct, 4);
  if (*v6 == 2)
    WTF::StringImpl::destroy(MEMORY[0x1E0CBEBF0], v8);
  else
    *v6 -= 2;
  v9 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v10 = JSC::jsNontrivialString((uint64_t)a2, &v13);
  JSC::JSObject::putDirectWithoutTransition((int *)this, a2, v9, v10, 6);
  result = v13;
  v13 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_DWORD *WebCore::JSSVGNumberList::destroy(WebCore::JSSVGNumberList *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSSVGNumberList::put(uint64_t a1, JSC *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v6;
  JSC::VM *v7;
  _BYTE *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  _BOOL4 v16;
  char **v17;
  BOOL v18;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int16 *v24;
  uint64_t v25;
  unsigned int v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  JSValue v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 *v39;
  unsigned int v40;
  _DWORD *v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  int v45;

  if (*(_QWORD *)(a5 + 8) != a1)
    return JSC::JSObject::put();
  if (!a3)
    return JSC::JSObject::put();
  v6 = *(_DWORD *)(a3 + 16);
  if ((v6 & 0x20) != 0)
    return JSC::JSObject::put();
  v7 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v8 = *(_BYTE **)(a3 + 8);
  v9 = *(unsigned int *)(a3 + 4);
  if ((v6 & 4) != 0)
  {
    if ((_DWORD)v9)
    {
      v35 = *v8 - 48;
      if (v35 <= 9 && (v9 < 2 || *v8 != 48))
      {
        v38 = v9 - 1;
        v39 = v8 + 1;
        while (v38)
        {
          if (v35 > 0x19999999)
            goto LABEL_55;
          v40 = *v39 - 48;
          if (v40 > 9)
            goto LABEL_55;
          v36 = 0;
          LODWORD(v9) = 0;
          v37 = 0;
          v27 = __CFADD__(v40, 10 * v35);
          v35 = v40 + 10 * v35;
          --v38;
          ++v39;
          if (v27)
            goto LABEL_57;
        }
        if (v35 == -1)
          v36 = 0;
        else
          v36 = v35 & 0xFFFFFF00;
        if (v35 == -1)
          LODWORD(v9) = 0;
        else
          LODWORD(v9) = v35;
        if (v35 == -1)
          v37 = 0;
        else
          v37 = 0x100000000;
LABEL_57:
        v14 = v9 | v36;
        if ((v37 & 0x100000000) != 0)
          goto LABEL_11;
        return JSC::JSObject::put();
      }
LABEL_55:
      v36 = 0;
      LODWORD(v9) = 0;
    }
    else
    {
      v36 = 0;
    }
    v37 = 0;
    goto LABEL_57;
  }
  if ((_DWORD)v9 && (v10 = *(unsigned __int16 *)v8 - 48, v10 <= 9) && (v9 < 2 || *(_WORD *)v8 != 48))
  {
    v24 = (unsigned __int16 *)(v8 + 2);
    v25 = v9 - 1;
    while (v25)
    {
      if (v10 <= 0x19999999)
      {
        v26 = *v24 - 48;
        if (v26 <= 9)
        {
          v27 = __CFADD__(v26, 10 * v10);
          v10 = v26 + 10 * v10;
          ++v24;
          --v25;
          if (!v27)
            continue;
        }
      }
      goto LABEL_9;
    }
    v18 = v10 == -1;
    v13 = v10 & 0xFFFFFF00;
    v12 = v10;
    v11 = 0x100000000;
    if (v18)
    {
      v11 = 0;
      v12 = 0;
      v13 = 0;
    }
  }
  else
  {
LABEL_9:
    v11 = 0;
    v12 = 0;
    v13 = 0;
  }
  v14 = v13 | v12;
  if ((v11 & 0x100000000) != 0)
  {
LABEL_11:
    v43 = *((_QWORD *)a2 + 7);
    if ((a4 & 0xFFFE000000000002) != 0)
      goto LABEL_22;
    v15 = *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C);
    v16 = *(_DWORD *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C) != 0;
    v17 = (char **)(16 * v15);
    if ((_DWORD)v15)
      v18 = v17 == &WebCore::JSSVGNumber::s_info;
    else
      v18 = 1;
    if (!v18)
    {
      do
      {
        v17 = (char **)v17[2];
        v16 = v17 != 0;
      }
      while (v17 != &WebCore::JSSVGNumber::s_info && v17 != 0);
    }
    if (!v16 || (v20 = *(_DWORD **)(a4 + 24)) == 0)
    {
LABEL_22:
      JSC::throwTypeError();
      return 1;
    }
    v21 = *(_QWORD *)(a1 + 24);
    ++v20[2];
    v41 = v20;
    if (*(_BYTE *)(v21 + 24) == 1)
    {
      v22 = 4;
      LOBYTE(v43) = 4;
      v23 = 1;
      v45 = 1;
      v44 = 0;
    }
    else
    {
      LOBYTE(v43) = 1;
      v45 = 0;
      if (*(_DWORD *)(v21 + 44) > v14)
      {
        (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v21 + 64))(&v42, v21);
        v28 = *(_QWORD *)(v21 + 16);
        if (v28)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v28 + 32))(v28, v21);
        v22 = 0;
        v29 = 0;
        v43 = v42;
        v45 = 0;
        v30 = 1;
        goto LABEL_39;
      }
      v22 = 0;
      v23 = 0;
    }
    off_1E32F83C8[v23](&v42, (char *)&v43);
    v30 = 0;
    LOBYTE(v43) = v22;
    v29 = 1;
    v45 = 1;
    v44 = 0;
LABEL_39:
    ((void (*)(uint64_t *, uint64_t *))off_1E32F9050[v29])(&v42, &v43);
    if (v41[2] != 1)
    {
      --v41[2];
      if ((v30 & 1) != 0)
        return 1;
LABEL_48:
      LOBYTE(v43) = v22;
      v44 = 0;
      if (!*((_QWORD *)v7 + 2))
      {
        v32.super.isa = (Class)WebCore::createDOMException(a2, (JSC::JSGlobalObject *)v22, (JSC::JSGlobalObject *)&v44);
        JSC::VM::throwException(v7, a2, v32);
        v34 = v44;
        v44 = 0;
        if (v34)
        {
          if (*(_DWORD *)v34 == 2)
            WTF::StringImpl::destroy(v34, v33);
          else
            *(_DWORD *)v34 -= 2;
        }
      }
      return 1;
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)v41 + 8))(v41);
    if ((v30 & 1) == 0)
      goto LABEL_48;
    return 1;
  }
  return JSC::JSObject::put();
}

uint64_t WebCore::JSSVGNumberList::putByIndex(uint64_t a1, WTF::StringImpl **a2, uint64_t a3, uint64_t a4)
{
  JSC::VM *v5;
  uint64_t v6;
  _BOOL4 v7;
  char **v8;
  BOOL v9;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  _DWORD *v18;
  uint64_t v19;
  JSValue v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  _DWORD *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  int v30;

  v5 = a2[7];
  if ((_DWORD)a3 != -1)
  {
    v28 = a2[7];
    if ((a4 & 0xFFFE000000000002) != 0)
      goto LABEL_13;
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSSVGNumber::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSSVGNumber::s_info && v8 != 0);
    }
    if (!v7 || (v11 = *(_DWORD **)(a4 + 24)) == 0)
    {
LABEL_13:
      JSC::throwTypeError();
      return 1;
    }
    v12 = *(_QWORD *)(a1 + 24);
    ++v11[2];
    v26 = v11;
    if (*(_BYTE *)(v12 + 24) == 1)
    {
      v13 = 4;
      LOBYTE(v28) = 4;
      v14 = 1;
      v30 = 1;
      v29 = 0;
    }
    else
    {
      LOBYTE(v28) = 1;
      v30 = 0;
      if (*(_DWORD *)(v12 + 44) > a3)
      {
        (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, uint64_t, _DWORD **))(*(_QWORD *)v12 + 64))(&v27, v12, a3, &v26);
        v15 = *(_QWORD *)(v12 + 16);
        if (v15)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 32))(v15, v12);
        v13 = 0;
        v16 = 0;
        v28 = v27;
        v30 = 0;
        v17 = 1;
LABEL_23:
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32F9050[v16])(&v27, &v28);
        v18 = v26;
        v26 = 0;
        if (v18)
        {
          if (v18[2] == 1)
          {
            (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 8))(v18);
            if ((v17 & 1) != 0)
              return 1;
            goto LABEL_30;
          }
          --v18[2];
        }
        if ((v17 & 1) != 0)
          return 1;
LABEL_30:
        LOBYTE(v28) = v13;
        v29 = 0;
        if (!*((_QWORD *)v5 + 2))
        {
          v21.super.isa = (Class)WebCore::createDOMException((JSC *)a2, (JSC::JSGlobalObject *)v13, (JSC::JSGlobalObject *)&v29);
          JSC::VM::throwException(v5, (JSC::JSGlobalObject *)a2, v21);
          v23 = v29;
          v29 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
              WTF::StringImpl::destroy(v23, v22);
            else
              *(_DWORD *)v23 -= 2;
          }
        }
        return 1;
      }
      v13 = 0;
      v14 = 0;
    }
    ((uint64_t (**)(WTF::StringImpl **, char *))off_1E32F83C8)[v14](&v27, (char *)&v28);
    v17 = 0;
    LOBYTE(v28) = v13;
    v16 = 1;
    v30 = 1;
    v29 = 0;
    goto LABEL_23;
  }
  JSC::Identifier::from();
  v19 = JSC::ordinarySetSlow();
  v25 = v28;
  v28 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v24);
    else
      *(_DWORD *)v25 -= 2;
  }
  return v19;
}

uint64_t WebCore::JSSVGNumberList::deleteProperty(uint64_t a1, WebCore::JSDOMGlobalObject *a2, uint64_t a3)
{
  uint64_t v4;
  _BOOL4 v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  WebCore::JSDOMGlobalObject *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _WORD *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned __int16 *v25;
  uint64_t v26;
  unsigned int v27;
  BOOL v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  unsigned int v34;

  v4 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSDOMGlobalObject::s_info && v6 != 0);
  }
  v9 = *(_QWORD *)(a1 + 24);
  if (v5)
    v10 = a2;
  else
    v10 = 0;
  v11 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v10);
  if (v11)
  {
    v12 = v11;
    if (!*(_BYTE *)(v11 + 274))
    {
      v13 = *(_BYTE **)(v11 + 496);
      if (!v13)
        v13 = (_BYTE *)WebCore::Document::ensureQuirks((WebCore::Document *)(v12 - 192));
      if (*(_QWORD *)v13)
      {
        v14 = *(_QWORD *)(*(_QWORD *)v13 + 8);
        if (v14)
        {
          v15 = *(_QWORD *)(v14 + 680);
          if (*(_BYTE *)(v15 + 243))
          {
            if (!*(_BYTE *)(v15 + 242))
              goto LABEL_22;
          }
          else if ((*(_QWORD *)(v15 + 688) & 0x80000) == 0)
          {
            goto LABEL_22;
          }
          if (v13[65])
            return JSC::JSObject::deleteProperty();
        }
      }
    }
  }
LABEL_22:
  if (!a3)
    return JSC::JSObject::deleteProperty();
  v16 = *(_DWORD *)(a3 + 16);
  if ((v16 & 0x20) != 0)
    return JSC::JSObject::deleteProperty();
  v17 = *(_WORD **)(a3 + 8);
  v18 = *(unsigned int *)(a3 + 4);
  if ((v16 & 4) == 0)
  {
    if ((_DWORD)v18 && (v19 = (unsigned __int16)*v17 - 48, v19 <= 9) && (v18 < 2 || *v17 != 48))
    {
      v25 = v17 + 1;
      v26 = v18 - 1;
      while (v26)
      {
        if (v19 <= 0x19999999)
        {
          v27 = *v25 - 48;
          if (v27 <= 9)
          {
            v28 = __CFADD__(v27, 10 * v19);
            v19 = v27 + 10 * v19;
            ++v25;
            --v26;
            if (!v28)
              continue;
          }
        }
        goto LABEL_29;
      }
      v7 = v19 == -1;
      v22 = v19 & 0xFFFFFF00;
      v21 = v19;
      v20 = 0x100000000;
      if (v7)
      {
        v20 = 0;
        v21 = 0;
        v22 = 0;
      }
    }
    else
    {
LABEL_29:
      v20 = 0;
      v21 = 0;
      v22 = 0;
    }
    v23 = v22 | v21;
    if ((v20 & 0x100000000) != 0)
      return *(_DWORD *)(v9 + 44) <= v23;
    return JSC::JSObject::deleteProperty();
  }
  if (!(_DWORD)v18)
  {
    v30 = 0;
    goto LABEL_47;
  }
  v29 = *(unsigned __int8 *)v17 - 48;
  if (v29 > 9 || v18 >= 2 && *(_BYTE *)v17 == 48)
  {
LABEL_46:
    v30 = 0;
    LODWORD(v18) = 0;
LABEL_47:
    v31 = 0;
    goto LABEL_48;
  }
  v32 = v18 - 1;
  v33 = (unsigned __int8 *)v17 + 1;
  while (v32)
  {
    if (v29 > 0x19999999)
      goto LABEL_46;
    v34 = *v33 - 48;
    if (v34 > 9)
      goto LABEL_46;
    v30 = 0;
    LODWORD(v18) = 0;
    v31 = 0;
    v28 = __CFADD__(v34, 10 * v29);
    v29 = v34 + 10 * v29;
    --v32;
    ++v33;
    if (v28)
      goto LABEL_48;
  }
  if (v29 == -1)
    v30 = 0;
  else
    v30 = v29 & 0xFFFFFF00;
  if (v29 == -1)
    LODWORD(v18) = 0;
  else
    LODWORD(v18) = v29;
  if (v29 == -1)
    v31 = 0;
  else
    v31 = 0x100000000;
LABEL_48:
  v23 = v18 | v30;
  if ((v31 & 0x100000000) != 0)
    return *(_DWORD *)(v9 + 44) <= v23;
  return JSC::JSObject::deleteProperty();
}

uint64_t WebCore::JSSVGNumberList::deletePropertyByIndex(WebCore::JSSVGNumberList *this, JSC::JSCell *a2, JSC::JSGlobalObject *a3)
{
  uint64_t v6;
  _BOOL4 v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  WebCore::JSDOMGlobalObject *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;

  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSDOMGlobalObject::s_info && v8 != 0);
  }
  v11 = *((_QWORD *)this + 3);
  if (v7)
    v12 = a2;
  else
    v12 = 0;
  v13 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v12);
  if (!v13)
    return *(_DWORD *)(v11 + 44) <= a3;
  v14 = v13;
  if (*(_BYTE *)(v13 + 274))
    return *(_DWORD *)(v11 + 44) <= a3;
  v15 = *(_BYTE **)(v13 + 496);
  if (!v15)
    v15 = (_BYTE *)WebCore::Document::ensureQuirks((WebCore::Document *)(v14 - 192));
  if (!*(_QWORD *)v15)
    return *(_DWORD *)(v11 + 44) <= a3;
  v16 = *(_QWORD *)(*(_QWORD *)v15 + 8);
  if (!v16)
    return *(_DWORD *)(v11 + 44) <= a3;
  v17 = *(_QWORD *)(v16 + 680);
  if (*(_BYTE *)(v17 + 243))
  {
    if (!*(_BYTE *)(v17 + 242))
      return *(_DWORD *)(v11 + 44) <= a3;
  }
  else if ((*(_QWORD *)(v17 + 688) & 0x80000) == 0)
  {
    return *(_DWORD *)(v11 + 44) <= a3;
  }
  if (!v15[65])
    return *(_DWORD *)(v11 + 44) <= a3;
  return JSC::JSObject::deletePropertyByIndex(this, a2, a3);
}

uint64_t WebCore::JSSVGNumberList::getOwnPropertySlot(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  JSC::VM *v6;
  int v8;
  _WORD *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  _DWORD *v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  uint64_t result;
  unsigned __int16 *v19;
  uint64_t v20;
  unsigned int v21;
  BOOL v22;
  BOOL v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  _BYTE *v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  unsigned __int16 *v44;
  uint64_t v45;
  unsigned int v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  unsigned int v53;
  int v54;
  unint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  unsigned __int8 *v66;
  unsigned int v67;
  uint64_t v68;
  unsigned __int8 *v69;
  unsigned int v70;
  WTF *v71;

  v6 = *(JSC::VM **)(a2 + 56);
  if (!a3)
  {
    if ((*(_BYTE *)(a1 + 6) & 0x20) != 0)
      return JSC::JSObject::getOwnStaticPropertySlot();
    return 0;
  }
  v8 = *(_DWORD *)(a3 + 16);
  if ((v8 & 0x20) != 0)
    goto LABEL_37;
  v9 = *(_WORD **)(a3 + 8);
  v10 = *(unsigned int *)(a3 + 4);
  if ((v8 & 4) == 0)
  {
    if ((_DWORD)v10 && (v11 = (unsigned __int16)*v9 - 48, v11 <= 9))
    {
      if (v10 < 2 || *v9 != 48)
      {
        v19 = v9 + 1;
        v20 = v10 - 1;
        while (v20)
        {
          if (v11 <= 0x19999999)
          {
            v21 = *v19 - 48;
            if (v21 <= 9)
            {
              v22 = __CFADD__(v21, 10 * v11);
              v11 = v21 + 10 * v11;
              ++v19;
              --v20;
              if (!v22)
                continue;
            }
          }
          goto LABEL_6;
        }
        v23 = v11 == -1;
        v13 = v11 & 0xFFFFFF00;
        v12 = 0x100000000;
        if (v11 == -1)
        {
          v12 = 0;
          LOBYTE(v11) = 0;
        }
        if (v23)
          v13 = 0;
LABEL_8:
        v11 = v11;
        if ((v12 & 0x100000000) == 0)
          goto LABEL_37;
        goto LABEL_9;
      }
      v12 = 0;
    }
    else
    {
LABEL_6:
      v12 = 0;
      LOBYTE(v11) = 0;
    }
    v13 = 0;
    goto LABEL_8;
  }
  if (!(_DWORD)v10)
  {
    v11 = 0;
    goto LABEL_35;
  }
  v24 = *(unsigned __int8 *)v9 - 48;
  if (v24 > 9 || v10 >= 2 && *(_BYTE *)v9 == 48)
  {
LABEL_34:
    v11 = 0;
    LOBYTE(v10) = 0;
LABEL_35:
    v25 = 0;
    goto LABEL_36;
  }
  v65 = v10 - 1;
  v66 = (unsigned __int8 *)v9 + 1;
  while (v65)
  {
    if (v24 > 0x19999999)
      goto LABEL_34;
    v67 = *v66 - 48;
    if (v67 > 9)
      goto LABEL_34;
    v11 = 0;
    LOBYTE(v10) = 0;
    v25 = 0;
    v22 = __CFADD__(v67, 10 * v24);
    v24 = v67 + 10 * v24;
    --v65;
    ++v66;
    if (v22)
      goto LABEL_36;
  }
  if (v24 == -1)
    v11 = 0;
  else
    v11 = v24 & 0xFFFFFF00;
  if (v24 == -1)
    LOBYTE(v10) = 0;
  else
    LOBYTE(v10) = v24;
  if (v24 == -1)
    v25 = 0;
  else
    v25 = 0x100000000;
LABEL_36:
  v13 = v10;
  if ((v25 & 0x100000000) == 0)
    goto LABEL_37;
LABEL_9:
  v14 = *(_DWORD **)(a1 + 24);
  if (v14[11] > (v13 | v11))
  {
    v15 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x28);
    (*(void (**)(WTF **__return_ptr))(*(_QWORD *)v14 + 48))(&v71);
    v16 = v71;
    v17 = WebCore::wrap<WebCore::SVGNumber>(v15, v71);
    if (*((_DWORD *)v16 + 2) == 1)
      (*(void (**)(WTF *))(*(_QWORD *)v16 + 8))(v16);
    else
      --*((_DWORD *)v16 + 2);
    if (!*((_DWORD *)v6 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v6) & 1) == 0)
    {
      *(_QWORD *)a4 = v17;
      *(_DWORD *)(a4 + 16) = 0;
      *(_QWORD *)(a4 + 32) = a1;
      result = 1;
      *(_BYTE *)(a4 + 49) = 1;
      return result;
    }
    return 0;
  }
LABEL_37:
  if (!(a3 >> 4))
    goto LABEL_50;
  v26 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE);
  if (((a3 >> 4) & ~*(_DWORD *)(v26 + 0x20)) != 0)
    goto LABEL_50;
  v27 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x58);
  if (!v27)
  {
    v38 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x40);
    if (!v38 || *(_BYTE *)(v38 + 5) != 1 && *(_DWORD *)(v38 + 80) < 2u)
      goto LABEL_50;
    v27 = JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)), v6);
    if (!v27)
      goto LABEL_50;
  }
  if (!*(_DWORD *)(v27 + 24))
    goto LABEL_50;
  v28 = *(_QWORD *)(v27 + 16);
  v29 = v28 & 0xFFFFFFFFFFFFFFFELL;
  v30 = *(unsigned int *)(v27 + 8);
  v31 = *(_DWORD *)(a3 + 16);
  if ((v28 & 1) != 0)
  {
    if ((v31 & 0x20) != 0)
      v31 = *(_DWORD *)(a3 + 32);
    v32 = *(_DWORD *)(v27 + 12);
    v33 = (v31 >> 8) & *(_QWORD *)&v32;
    v34 = *(unsigned __int8 *)(v29 + v33);
    if (*(_BYTE *)(v29 + v33))
    {
      v35 = v29 + v30;
      v36 = 1;
      while (1)
      {
        v37 = *(_QWORD *)(v35 + 8 * (v34 - 1));
        if (a3 == (v37 & 0xFFFFFFFFFFFFLL))
          break;
        v33 = ((_DWORD)v33 + v36) & v32;
        v34 = *(unsigned __int8 *)(v29 + v33);
        ++v36;
        if (!*(_BYTE *)(v29 + v33))
          goto LABEL_50;
      }
      v47 = (v37 >> 16) & 0xFF00000000 | HIBYTE(v37);
      goto LABEL_69;
    }
LABEL_50:
    if ((*(_BYTE *)(a1 + 6) & 0x20) != 0 && (JSC::JSObject::getOwnStaticPropertySlot() & 1) != 0)
      return 1;
    v39 = *(_DWORD *)(a3 + 16);
    if ((v39 & 0x20) == 0)
    {
      v40 = *(_BYTE **)(a3 + 8);
      v41 = *(unsigned int *)(a3 + 4);
      if ((v39 & 4) != 0)
      {
        if (!(_DWORD)v41 || (v63 = *v40 - 48, v63 > 9) || v41 >= 2 && *v40 == 48)
        {
LABEL_106:
          v64 = 0;
        }
        else
        {
          v68 = v41 - 1;
          v69 = v40 + 1;
          while (v68)
          {
            if (v63 > 0x19999999)
              goto LABEL_106;
            v70 = *v69 - 48;
            if (v70 > 9)
              goto LABEL_106;
            v64 = 0;
            v22 = __CFADD__(v70, 10 * v63);
            v63 = v70 + 10 * v63;
            --v68;
            ++v69;
            if (v22)
              goto LABEL_107;
          }
          v64 = 0x100000000;
          if (v63 == -1)
            v64 = 0;
        }
LABEL_107:
        if ((v64 & 0x100000000) == 0)
          return 0;
      }
      else
      {
        if ((_DWORD)v41
          && (v42 = *(unsigned __int16 *)v40 - 48, v42 <= 9)
          && (v41 < 2 || *(_WORD *)v40 != 48))
        {
          v44 = (unsigned __int16 *)(v40 + 2);
          v45 = v41 - 1;
          while (v45)
          {
            if (v42 <= 0x19999999)
            {
              v46 = *v44 - 48;
              if (v46 <= 9)
              {
                v22 = __CFADD__(v46, 10 * v42);
                v42 = v46 + 10 * v42;
                ++v44;
                --v45;
                if (!v22)
                  continue;
              }
            }
            goto LABEL_57;
          }
          v23 = v42 == -1;
          v43 = 0x100000000;
          if (v23)
            v43 = 0;
        }
        else
        {
LABEL_57:
          v43 = 0;
        }
        if ((v43 & 0x100000000) == 0)
          return 0;
      }
      return JSC::JSObject::getOwnPropertySlotByIndex();
    }
    return 0;
  }
  if ((v31 & 0x20) != 0)
    v31 = *(_DWORD *)(a3 + 32);
  v52 = *(_DWORD *)(v27 + 12);
  v53 = v52 & (v31 >> 8);
  v54 = *(_DWORD *)(v29 + 4 * v53);
  if (!v54)
    goto LABEL_50;
  v55 = v29 + 4 * v30;
  v56 = 1;
  while (1)
  {
    v57 = (v54 - 1);
    if (*(_QWORD *)(v55 + 16 * v57) == a3)
      break;
    v53 = (v53 + v56) & v52;
    v54 = *(_DWORD *)(v29 + 4 * v53);
    ++v56;
    if (!v54)
      goto LABEL_50;
  }
  v47 = *(unsigned int *)(v55 + 16 * v57 + 8) | ((unint64_t)*(unsigned __int8 *)(v55 + 16 * v57 + 12) << 32);
LABEL_69:
  if ((_DWORD)v47 == -1)
    goto LABEL_50;
  if ((int)v47 > 63)
  {
    v48 = *(_QWORD *)(a1 + 8) - 8;
    v49 = 0x3F00000000 - (v47 << 32);
  }
  else
  {
    v48 = a1 + 16;
    v49 = v47 << 32;
  }
  v50 = *(_QWORD *)(v48 + (v49 >> 29));
  if ((v50 & 0xFFFE000000000002) != 0)
    goto LABEL_75;
  v51 = *(unsigned __int8 *)(v50 + 5);
  if (v51 != 6)
  {
    if (v51 != 5)
    {
LABEL_75:
      *(_QWORD *)a4 = v50;
      *(_QWORD *)(a4 + 32) = a1;
      *(_DWORD *)(a4 + 16) = HIDWORD(v47);
      *(_DWORD *)(a4 + 20) = v47;
      result = 1;
      *(_WORD *)(a4 + 48) = 257;
      return result;
    }
    JSC::JSObject::fillGetterPropertySlot();
    return 1;
  }
  v58 = *(_DWORD *)(v26 + 16) & 3;
  v60 = *(_QWORD *)(v50 + 8);
  v59 = *(_QWORD *)(v50 + 16);
  if (MEMORY[0x1E0CBE830] == 16 * *(unsigned int *)(16 * (*(_DWORD *)v50 & 0xFFFFFFFE) + 0x4C))
  {
    v62 = *(_QWORD *)(v50 + 24);
    v61 = *(_QWORD *)(v50 + 32);
    *(_QWORD *)a4 = v60;
    *(_QWORD *)(a4 + 8) = v59;
    *(_DWORD *)(a4 + 16) = HIDWORD(v47);
    *(_QWORD *)(a4 + 32) = a1;
    *(_BYTE *)(a4 + 49) = 3;
    result = 1;
    if (v58 != 2)
      *(_BYTE *)(a4 + 48) = 1;
    *(_BYTE *)(a4 + 51) = 1;
    *(_QWORD *)(a4 + 72) = v62;
    *(_QWORD *)(a4 + 80) = v61;
  }
  else
  {
    *(_QWORD *)a4 = v60;
    *(_QWORD *)(a4 + 8) = v59;
    *(_DWORD *)(a4 + 16) = HIDWORD(v47);
    *(_QWORD *)(a4 + 32) = a1;
    result = 1;
    *(_BYTE *)(a4 + 49) = 3;
    if (v58 != 2)
      *(_BYTE *)(a4 + 48) = 1;
  }
  return result;
}

uint64_t WebCore::JSSVGNumberList::getOwnPropertySlotByIndex(WebCore::JSSVGNumberList *this, JSC::JSObject *a2, JSC::JSGlobalObject *a3, uint64_t a4, JSC::PropertySlot *a5)
{
  _DWORD *v7;
  JSC::VM *v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  uint64_t result;
  WTF *v13;

  if ((_DWORD)a3 == -1)
    return JSC::JSObject::getOwnPropertySlotByIndex();
  v7 = (_DWORD *)*((_QWORD *)this + 3);
  if (v7[11] <= a3)
    return JSC::JSObject::getOwnPropertySlotByIndex();
  v8 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v9 = *(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28);
  (*(void (**)(WTF **__return_ptr, _DWORD *, JSC::JSGlobalObject *))(*(_QWORD *)v7 + 48))(&v13, v7, a3);
  v10 = v13;
  v11 = WebCore::wrap<WebCore::SVGNumber>(v9, v13);
  if (*((_DWORD *)v10 + 2) == 1)
    (*(void (**)(WTF *))(*(_QWORD *)v10 + 8))(v10);
  else
    --*((_DWORD *)v10 + 2);
  if (*((_DWORD *)v8 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v8) & 1) != 0)
    return 0;
  *(_QWORD *)a4 = v11;
  *(_DWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 32) = this;
  result = 1;
  *(_BYTE *)(a4 + 49) = 1;
  return result;
}

uint64_t WebCore::JSSVGNumberList::getOwnPropertyNames(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v4;
  int v5;
  uint64_t *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  int v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44[2];
  char v45;
  WTF::StringImpl *v46;

  v4 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 44);
  if (v4)
  {
    v5 = 0;
    v6 = a3 + 1;
    while (1)
    {
      JSC::Identifier::from();
      v8 = v43;
      v46 = v43;
      v9 = *((_DWORD *)v43 + 4);
      if ((v9 & 0x20) != 0)
      {
        if ((a3[3] & 1) == 0 || *((_BYTE *)a3 + 25) && (*((_BYTE *)v43 + 36) & 4) != 0)
          goto LABEL_60;
      }
      else if ((a3[3] & 2) == 0)
      {
        goto LABEL_60;
      }
      v10 = *a3;
      v11 = *(unsigned int *)(*a3 + 20);
      if (v11 <= 0x13)
      {
        if ((_DWORD)v11)
        {
          v12 = *(WTF::StringImpl ***)(v10 + 8);
          while (*v12 != v43)
          {
            ++v12;
            if (!--v11)
              goto LABEL_19;
          }
          goto LABEL_60;
        }
LABEL_19:
        if ((v9 & 0x20) != 0)
        {
          v33 = *(_DWORD *)v8 + 2;
        }
        else
        {
          if ((v9 & 0x10) != 0)
          {
            *(_DWORD *)v8 += 2;
          }
          else
          {
            WTF::AtomStringImpl::addSlowCase();
            v8 = v44[0];
          }
          v33 = *(_DWORD *)v8;
          *(_DWORD *)v8 += 2;
          if (!v33)
          {
            WTF::StringImpl::destroy(v8, v7);
LABEL_54:
            v34 = (uint64_t *)(v10 + 8);
            v44[0] = v8;
            v35 = *(unsigned int *)(v10 + 20);
            if ((_DWORD)v35 == *(_DWORD *)(v10 + 16))
            {
              v36 = (uint64_t *)WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v34, v35 + 1, (unint64_t)v44);
              v35 = *(unsigned int *)(v10 + 20);
              v37 = *(_QWORD *)(v10 + 8);
              v38 = *v36;
              *v36 = 0;
              *(_QWORD *)(v37 + 8 * v35) = v38;
            }
            else
            {
              v39 = *v34;
              v44[0] = 0;
              *(_QWORD *)(v39 + 8 * v35) = v8;
            }
            *(_DWORD *)(v10 + 20) = v35 + 1;
            v40 = v44[0];
            v44[0] = 0;
            if (v40)
            {
              if (*(_DWORD *)v40 == 2)
                WTF::StringImpl::destroy(v40, v7);
              else
                *(_DWORD *)v40 -= 2;
            }
            goto LABEL_60;
          }
        }
        *(_DWORD *)v8 = v33;
        goto LABEL_54;
      }
      if (!*v6 || !*(_DWORD *)(*v6 - 12))
        break;
LABEL_17:
      WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add(a3 + 1, (uint64_t *)&v46, (uint64_t)v44);
      if (v45)
      {
        v8 = v46;
        v10 = *a3;
        v9 = *((_DWORD *)v46 + 4);
        goto LABEL_19;
      }
LABEL_60:
      v41 = v43;
      v43 = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2)
          WTF::StringImpl::destroy(v41, v7);
        else
          *(_DWORD *)v41 -= 2;
      }
      if (++v5 == v4)
        return JSC::JSObject::getOwnPropertyNames();
    }
    v13 = *(uint64_t **)(v10 + 8);
    v14 = &v13[v11];
    while (1)
    {
      v15 = *v13;
      v16 = *v6;
      if (*v6
        || (WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(a3 + 1, 8u, 0), (v16 = *v6) != 0))
      {
        v17 = *(_DWORD *)(v16 - 8);
      }
      else
      {
        v17 = 0;
      }
      v18 = (~(v15 << 32) + v15) ^ ((unint64_t)(~(v15 << 32) + v15) >> 22);
      v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
      v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
      v21 = v17 & ((v20 >> 31) ^ v20);
      v22 = (uint64_t *)(v16 + 8 * v21);
      v23 = *v22;
      if (*v22)
      {
        v24 = 0;
        v25 = 1;
        while (v23 != v15)
        {
          if (v23 == -1)
            v24 = v22;
          v21 = (v21 + v25) & v17;
          v22 = (uint64_t *)(v16 + 8 * v21);
          v23 = *v22;
          ++v25;
          if (!*v22)
          {
            if (v24)
            {
              *v24 = 0;
              --*(_DWORD *)(*v6 - 16);
              v22 = v24;
            }
            goto LABEL_34;
          }
        }
        goto LABEL_47;
      }
LABEL_34:
      *v22 = v15;
      v26 = *v6;
      v27 = *v6 ? *(_DWORD *)(v26 - 12) + 1 : 1;
      *(_DWORD *)(v26 - 12) = v27;
      v28 = *v6;
      v29 = *v6 ? *(_DWORD *)(v28 - 12) : 0;
      v30 = (*(_DWORD *)(v28 - 16) + v29);
      v31 = *(unsigned int *)(v28 - 4);
      if (v31 > 0x400)
        break;
      if (3 * v31 <= 4 * v30)
      {
        if ((_DWORD)v31)
          goto LABEL_43;
        v32 = 8;
        goto LABEL_46;
      }
LABEL_47:
      if (++v13 == v14)
        goto LABEL_17;
    }
    if (v31 > 2 * v30)
      goto LABEL_47;
LABEL_43:
    v32 = (_DWORD)v31 << (6 * *(_DWORD *)(v28 - 12) >= (2 * v31));
LABEL_46:
    WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(a3 + 1, v32, v22);
    goto LABEL_47;
  }
  return JSC::JSObject::getOwnPropertyNames();
}

uint64_t WebCore::JSSVGNumberList::defineOwnProperty(uint64_t a1, WTF::StringImpl **a2, uint64_t a3, JSC::PropertyDescriptor *this, int a5)
{
  JSC::VM *v9;
  int v10;
  _BYTE *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  char **v20;
  BOOL v21;
  unsigned __int16 *v24;
  uint64_t v25;
  unsigned int v26;
  BOOL v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  BOOL v35;
  unsigned int v36;
  _DWORD *v37;
  JSValue v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  unsigned int v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  unsigned __int8 *v45;
  unsigned int v46;
  WTF::StringImpl *v47[2];
  __int128 v48;
  JSC::VM *v49;
  _DWORD *v50;
  WTF::StringImpl *v51;

  v9 = a2[7];
  v49 = v9;
  if (!a3)
    goto LABEL_65;
  v10 = *(_DWORD *)(a3 + 16);
  if ((v10 & 0x20) != 0)
    goto LABEL_65;
  v11 = *(_BYTE **)(a3 + 8);
  v12 = *(unsigned int *)(a3 + 4);
  if ((v10 & 4) != 0)
  {
    if ((_DWORD)v12)
    {
      v41 = *v11 - 48;
      if (v41 <= 9 && (v12 < 2 || *v11 != 48))
      {
        v44 = v12 - 1;
        v45 = v11 + 1;
        while (v44)
        {
          if (v41 > 0x19999999)
            goto LABEL_62;
          v46 = *v45 - 48;
          if (v46 > 9)
            goto LABEL_62;
          v16 = 0;
          LOBYTE(v12) = 0;
          v42 = 0;
          v27 = __CFADD__(v46, 10 * v41);
          v41 = v46 + 10 * v41;
          --v44;
          ++v45;
          if (v27)
            goto LABEL_64;
        }
        if (v41 == -1)
          v16 = 0;
        else
          v16 = v41 & 0xFFFFFF00;
        if (v41 == -1)
          LOBYTE(v12) = 0;
        else
          LOBYTE(v12) = v41;
        if (v41 == -1)
          v42 = 0;
        else
          v42 = 0x100000000;
LABEL_64:
        v15 = v12;
        if ((v42 & 0x100000000) != 0)
          goto LABEL_9;
LABEL_65:
        v43 = *((_OWORD *)this + 1);
        *(_OWORD *)v47 = *(_OWORD *)this;
        v48 = v43;
        return JSC::JSObject::defineOwnProperty();
      }
LABEL_62:
      v16 = 0;
      LOBYTE(v12) = 0;
    }
    else
    {
      v16 = 0;
    }
    v42 = 0;
    goto LABEL_64;
  }
  if (!(_DWORD)v12 || (v13 = *(unsigned __int16 *)v11 - 48, v13 > 9))
  {
LABEL_6:
    v14 = 0;
    LOBYTE(v13) = 0;
LABEL_7:
    v15 = 0;
    goto LABEL_8;
  }
  if (v12 >= 2 && *(_WORD *)v11 == 48)
  {
    v14 = 0;
    goto LABEL_7;
  }
  v24 = (unsigned __int16 *)(v11 + 2);
  v25 = v12 - 1;
  while (v25)
  {
    if (v13 <= 0x19999999)
    {
      v26 = *v24 - 48;
      if (v26 <= 9)
      {
        v27 = __CFADD__(v26, 10 * v13);
        v13 = v26 + 10 * v13;
        ++v24;
        --v25;
        if (!v27)
          continue;
      }
    }
    goto LABEL_6;
  }
  v35 = v13 == -1;
  v36 = v13 & 0xFFFFFF00;
  v14 = 0x100000000;
  if (v13 == -1)
  {
    v14 = 0;
    LOBYTE(v13) = 0;
  }
  if (v35)
    v15 = 0;
  else
    v15 = v36;
LABEL_8:
  v16 = v13;
  if ((v14 & 0x100000000) == 0)
    goto LABEL_65;
LABEL_9:
  if ((JSC::PropertyDescriptor::isDataDescriptor(this) & 1) != 0)
  {
    v17 = *(_QWORD *)this;
    v47[0] = a2[7];
    if ((v17 & 0xFFFE000000000002) != 0)
      goto LABEL_21;
    v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
    v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
    v20 = (char **)(16 * v18);
    if ((_DWORD)v18)
      v21 = v20 == &WebCore::JSSVGNumber::s_info;
    else
      v21 = 1;
    if (!v21)
    {
      do
      {
        v20 = (char **)v20[2];
        v19 = v20 != 0;
      }
      while (v20 != &WebCore::JSSVGNumber::s_info && v20 != 0);
    }
    if (!v19 || (v28 = *(_DWORD **)(v17 + 24)) == 0)
    {
LABEL_21:
      JSC::throwTypeError();
      return 1;
    }
    v29 = *(_QWORD *)(a1 + 24);
    ++v28[2];
    v50 = v28;
    if (*(_BYTE *)(v29 + 24) == 1)
    {
      v30 = 4;
      LOBYTE(v47[0]) = 4;
      v31 = 1;
      LODWORD(v48) = 1;
      v47[1] = 0;
    }
    else
    {
      LOBYTE(v47[0]) = 1;
      LODWORD(v48) = 0;
      if (*(_DWORD *)(v29 + 44) > (v15 | v16))
      {
        (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(_QWORD *)v29 + 64))(&v51, v29);
        v32 = *(_QWORD *)(v29 + 16);
        if (v32)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v32 + 32))(v32, v29);
        v30 = 0;
        v33 = 0;
        v47[0] = v51;
        LODWORD(v48) = 0;
        v34 = 1;
LABEL_49:
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32F9050[v33])(&v51, v47);
        v37 = v50;
        v50 = 0;
        if (v37)
        {
          if (v37[2] == 1)
          {
            (*(void (**)(_DWORD *))(*(_QWORD *)v37 + 8))(v37);
            if ((v34 & 1) != 0)
              return 1;
            goto LABEL_55;
          }
          --v37[2];
        }
        if ((v34 & 1) != 0)
          return 1;
LABEL_55:
        LOBYTE(v47[0]) = v30;
        v47[1] = 0;
        if (!*((_QWORD *)v9 + 2))
        {
          v38.super.isa = (Class)WebCore::createDOMException((JSC *)a2, (JSC::JSGlobalObject *)v30, (JSC::JSGlobalObject *)&v47[1]);
          JSC::VM::throwException(v9, (JSC::JSGlobalObject *)a2, v38);
          v40 = v47[1];
          v47[1] = 0;
          if (v40)
          {
            if (*(_DWORD *)v40 == 2)
              WTF::StringImpl::destroy(v40, v39);
            else
              *(_DWORD *)v40 -= 2;
          }
        }
        return 1;
      }
      v30 = 0;
      v31 = 0;
    }
    ((uint64_t (**)(WTF::StringImpl **, char *))off_1E32F83C8)[v31](&v51, (char *)v47);
    v34 = 0;
    LOBYTE(v47[0]) = v30;
    v33 = 1;
    LODWORD(v48) = 1;
    v47[1] = 0;
    goto LABEL_49;
  }
  if (a5)
    JSC::throwTypeError();
  return 0;
}

uint64_t WebCore::JSSVGNumberList::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::JSSVGNumberList::createPrototype(WebCore::JSSVGNumberList *this, JSC::JSCell **a2, WebCore::JSDOMGlobalObject *a3)
{
  unint64_t v4;
  WebCore::JSDOMGlobalObject *v5;
  JSC::Structure *v6;

  v4 = JSC::Structure::create((uint64_t *)this, (int)a2, a2[82]);
  *(_DWORD *)(v4 + 16) |= 0x80000u;
  return WebCore::JSSVGNumberListPrototype::create(this, v4, v5, v6);
}

unint64_t WebCore::JSSVGNumberListPrototype::create(WebCore::JSSVGNumberListPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  unint64_t v6;
  int v7;

  v6 = JSC::allocateCell<WebCore::JSAbstractRangePrototype>((uint64_t)this);
  v7 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)v6 = a2 >> 4;
  *(_DWORD *)(v6 + 4) = v7;
  *(_QWORD *)(v6 + 8) = 0;
  WebCore::JSSVGNumberListPrototype::finishCreation((WebCore::JSSVGNumberListPrototype *)v6, this);
  return v6;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGNumberList>,(WebCore::DOMConstructorID)827>(uint64_t a1, uint64_t a2)
{
  unint64_t result;
  uint64_t Structure;
  JSC::Heap *v6;
  unint64_t v7;

  result = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6616);
  if (!result)
  {
    Structure = WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGNumberList>::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 664));
    result = WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGNumberList>::create(a1, Structure, (JSC::JSCell **)a2);
    *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6616) = result;
    if (result)
    {
      if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
      {
        v6 = (JSC::Heap *)(a1 + 192);
        v7 = result;
        JSC::Heap::writeBarrierSlowPath(v6, (const JSCell *)a2);
        return v7;
      }
    }
  }
  return result;
}

unint64_t WebCore::jsSVGNumberListConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGNumberListPrototype::s_info != (char **)(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                               + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGNumberList>,(WebCore::DOMConstructorID)827>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGNumberList_length(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 24) + 44);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

unint64_t WebCore::jsSVGNumberList_numberOfItems(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 24) + 44);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

uint64_t WebCore::JSSVGNumberListOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

_QWORD *WebCore::JSSVGNumberListOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::wrap<WebCore::SVGNumberList>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF *v30;
  void *v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *Allocator;
  unint64_t v38;
  _QWORD *v39;
  WTF *v40;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 2);
  if (*(void (***)(WebCore::SVGNumberList *__hidden))a3 != off_1E346F430)
  {
    __break(0xC471u);
    JUMPOUT(0x194F12C00);
  }
  v15 = WebCore::getDOMStructure<WebCore::JSSVGNumberList>(*(WebCore::JSSVGNumberList **)(a2 + 56), (JSC::JSCell **)a2);
  v16 = *(_QWORD *)(a2 + 56);
  v17 = *(_QWORD *)(v16 + 41456);
  v18 = *(_QWORD *)(v17 + 23536);
  v19 = *(_QWORD **)(v18 + 6696);
  if (!v19)
  {
    v20 = *(_QWORD *)(v17 + 22648);
    if (__ldaxr((unsigned __int8 *)v20))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v20))
    {
      goto LABEL_15;
    }
    MEMORY[0x19AEA534C](v20);
LABEL_15:
    v22 = *(_QWORD *)(v20 + 2824);
    if (!*(_QWORD *)(v22 + 6696))
    {
      v23 = WTF::fastMalloc((WTF *)0xF8);
      WTF::CString::CString((WTF::CString *)&v40, "IsoSpace T");
      v39 = 0;
      MEMORY[0x19AEA3204](v23, &v40, v16 + 192, v16 + 1872, 32, 8, &v39);
      v25 = (uint64_t)v39;
      v39 = 0;
      if (v25)
        (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
      v26 = v40;
      v40 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 1)
          WTF::fastFree(v26, v24);
        else
          --*(_DWORD *)v26;
      }
      v27 = *(_QWORD *)(v22 + 6696);
      *(_QWORD *)(v22 + 6696) = v23;
      if (v27)
        (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    }
    v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
    JSC::GCClient::IsoSubspace::IsoSubspace();
    v29 = *(_QWORD *)(v18 + 6696);
    *(_QWORD *)(v18 + 6696) = v19;
    if (v29)
    {
      v30 = (WTF *)MEMORY[0x19AEA3528](v29, v28);
      WTF::fastFree(v30, v31);
    }
    v32 = __ldxr((unsigned __int8 *)v20);
    if (v32 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v20))
        goto LABEL_30;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v20);
  }
LABEL_30:
  SlowCase = v19[3];
  if (SlowCase >= v19[4])
  {
    SlowCase = v19[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_32;
    }
    v38 = *(_QWORD *)(SlowCase + 8) ^ v19[6];
    v19[4] = SlowCase + HIDWORD(v38);
    v19[5] = SlowCase + (int)v38;
  }
  v19[3] = SlowCase + 32;
LABEL_32:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v15);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v16 + 755))
    __dmb(0xAu);
  v33 = *(_QWORD *)(a2 + 3320);
  if ((byte_1ECE81658 & 1) == 0)
  {
    qword_1ECE81650 = (uint64_t)&off_1E32F7620;
    byte_1ECE81658 = 1;
  }
  v40 = a3;
  if ((SlowCase & 8) != 0)
    v34 = (SlowCase - 112) | 1;
  else
    v34 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v34 & 1) != 0)
    v35 = v34 + 47;
  else
    v35 = *(_QWORD *)v34 + 32;
  Allocator = *(_QWORD **)(v35 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v35 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1ECE81650;
  Allocator[2] = v33;
  v39 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v33 + 32), (uint64_t *)&v40, (uint64_t *)&v39);
  if (v39)
    v39[1] = 3;
  return SlowCase;
}

uint64_t WebCore::JSSVGPathElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGGeometryElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGGeometryElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGGeometryElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::JSSVGPathElement::createPrototype(WebCore::JSSVGPathElement *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  JSC::JSCell *v5;
  unint64_t Structure;
  JSC::Structure *v7;

  v5 = (JSC::JSCell *)WebCore::JSSVGGeometryElement::prototype(this, a2, a3);
  Structure = WebCore::JSSVGPathElementPrototype::createStructure((uint64_t *)this, (uint64_t)a2, v5);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  return WebCore::JSSVGPathElementPrototype::create(this, a2, Structure, v7);
}

uint64_t WebCore::JSSVGPathElementPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGPathElementPrototype::create(WebCore::JSSVGPathElementPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<23u>(this, (uint64_t)&WebCore::JSSVGPathElement::s_info, (uint64_t)&WebCore::JSSVGPathElementPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathElement>,(WebCore::DOMConstructorID)828>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6624);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGGeometryElement>,(WebCore::DOMConstructorID)813>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v34);
    v5[2] = SlowCase + (int)v34;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v35 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v35);
    v10[2848] = v2 + (int)v35;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSSVGPathElement::s_info + ~((_QWORD)&WebCore::JSSVGPathElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGPathElement::s_info + ~((_QWORD)&WebCore::JSSVGPathElement::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSSVGPathElement::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSSVGPathElement::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSSVGGeometryElement::prototype((WebCore::JSSVGGeometryElement *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSSVGPathElementPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v30 = (JSC::JSCell *)WebCore::JSSVGPathElementPrototype::create((WebCore::JSSVGPathElementPrototype *)a1, (JSC::VM *)a2, Structure, v29);
  v31 = WebCore::JSSVGPathElement::createStructure((uint64_t *)a1, a2, v30);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v31, (uint64_t)&WebCore::JSSVGPathElement::s_info);
LABEL_22:
  v32 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v32, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6624) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGPathElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGPathElementPrototype::s_info != (char **)(16
                                                              * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathElement>,(WebCore::DOMConstructorID)828>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGPathElement_pathSegList(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGPathSegList>(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 224) + 40));
}

unint64_t WebCore::jsSVGPathElement_animatedPathSegList(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  WTF *v3;

  v2 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v3 = (WTF *)*WebCore::SVGAnimatedPropertyList<WebCore::SVGPathSegList>::ensureAnimVal(*(_QWORD *)(*(_QWORD *)(a2 + 24)
                                                                                                  + 224));
  if (v3)
    return WebCore::wrap<WebCore::SVGPathSegList>(v2, v3);
  else
    return 2;
}

uint64_t WebCore::JSSVGPathElement::subspaceForImpl(WebCore::JSSVGPathElement *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  void *v12;
  int v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 6704);
  if (v4)
    return v4;
  v7 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v7, a2);
LABEL_6:
  v9 = *(_QWORD *)(v7 + 2824);
  v20 = *(_QWORD *)(v9 + 6704);
  if (!v20)
  {
    v14 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v22, "IsoSpace T");
    v21 = 0;
    MEMORY[0x19AEA3204](v14, &v22, (char *)this + 192, (char *)this + 1872, 40, 8, &v21);
    v16 = v21;
    v21 = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    v17 = v22;
    v22 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 1)
        WTF::fastFree(v17, v15);
      else
        --*(_DWORD *)v17;
    }
    v20 = v14;
    v18 = *(_QWORD *)(v9 + 6704);
    *(_QWORD *)(v9 + 6704) = v14;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    v19 = *(unsigned int *)(v7 + 2844);
    if ((_DWORD)v19 == *(_DWORD *)(v7 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v7 + 2832, (unint64_t)&v20);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v7 + 2832) + 8 * v19) = v14;
      *(_DWORD *)(v7 + 2844) = v19 + 1;
    }
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v10 = *(_QWORD *)(v3 + 6704);
  *(_QWORD *)(v3 + 6704) = v4;
  if (v10)
  {
    v11 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v11, v12);
  }
  v13 = __ldxr((unsigned __int8 *)v7);
  if (v13 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
  return v4;
}

_DWORD *WebCore::JSSVGPathSeg::destroy(WebCore::JSSVGPathSeg *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSSVGPathSeg::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSVGPathSegPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGPathSegPrototype::create(WebCore::JSSVGPathSegPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<23u>(this, (uint64_t)&WebCore::JSSVGPathSeg::s_info, (uint64_t)&WebCore::JSSVGPathSegPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSeg>,(WebCore::DOMConstructorID)829>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  JSC::Structure *v26;
  JSC::JSCell *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  unint64_t v34;
  int v35;
  int v36;
  uint64_t v37;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6632);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v33) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v31 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v31);
    v5[2] = SlowCase + (int)v31;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v33, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSeg>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v32 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v32);
    v9[2848] = v2 + (int)v32;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v33 = 0;
  v34 = v2;
  v35 = -1;
  v36 = 0x1000000;
  v37 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v33);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v33);
  v13 = v33;
  v33 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v33 = 0;
  v34 = v2;
  v35 = -1;
  v36 = 0x1000000;
  v37 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v33);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSSVGPathSeg::s_info + ~((_QWORD)&WebCore::JSSVGPathSeg::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGPathSeg::s_info + ~((_QWORD)&WebCore::JSSVGPathSeg::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSSVGPathSeg::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSSVGPathSeg::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSSVGPathSegPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v27 = (JSC::JSCell *)WebCore::JSSVGPathSegPrototype::create((WebCore::JSSVGPathSegPrototype *)a1, (JSC::VM *)a2, Structure, v26);
  v28 = WebCore::JSSVGPathSeg::createStructure((uint64_t *)a1, a2, v27);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v28, (uint64_t)&WebCore::JSSVGPathSeg::s_info);
LABEL_22:
  v29 = *(_QWORD *)(v24 + 48);
  v33 = 0;
  v34 = v2;
  v35 = -1;
  v36 = 0x1000000;
  v37 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v29, 14, (uint64_t)&v33);
  JSC::reifyStaticProperties<20u>((JSC::VM *)a1, (uint64_t)&WebCore::JSSVGPathSeg::s_info, (uint64_t)&WebCore::JSSVGPathSegConstructorTableValues, (JSC::JSObject *)v2);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6632) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGPathSegConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGPathSegPrototype::s_info != (char **)(16
                                                          * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSeg>,(WebCore::DOMConstructorID)829>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGPathSeg_pathSegType(uint64_t a1, uint64_t a2)
{
  return (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 40))(*(_QWORD *)(a2 + 24)) | 0xFFFE000000000000;
}

uint64_t WebCore::jsSVGPathSeg_pathSegTypeAsLetter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;
  WTF::StringImpl *v11;

  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a2 + 24) + 48))(&v11);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = v11;
  if (!v11 || (v5 = *((_DWORD *)v11 + 1)) == 0)
  {
    v6 = *(_QWORD *)(v3 + 41968);
LABEL_7:
    v11 = 0;
    if (!v4)
      return v6;
    goto LABEL_16;
  }
  if (v5 != 1)
    goto LABEL_4;
  v7 = (unsigned __int8 *)*((_QWORD *)v11 + 1);
  if ((*((_BYTE *)v11 + 16) & 4) != 0)
  {
    v8 = *v7;
LABEL_14:
    v6 = *(_QWORD *)(v3 + 8 * v8 + 42216);
    goto LABEL_15;
  }
  v9 = *(unsigned __int16 *)v7;
  if (v9 <= 0xFF)
  {
    v8 = v9;
    goto LABEL_14;
  }
LABEL_4:
  v6 = *(_QWORD *)(v3 + 64760);
  if (!v6 || v11 != *(WTF::StringImpl **)(v6 + 8))
  {
    v6 = JSC::jsStringWithCacheSlowCase();
    v4 = v11;
    goto LABEL_7;
  }
LABEL_15:
  v11 = 0;
LABEL_16:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy(v4, v4);
  else
    *(_DWORD *)v4 -= 2;
  return v6;
}

uint64_t WebCore::JSSVGPathSeg::subspaceForImpl(WebCore::JSSVGPathSeg *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 6712);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 6712))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 6712);
    *(_QWORD *)(v8 + 6712) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 6712);
  *(_QWORD *)(v3 + 6712) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSSVGPathSegOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

_QWORD *WebCore::JSSVGPathSegOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

uint64_t WebCore::JSSVGPathSegArcAbs::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGPathSeg::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGPathSeg::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGPathSeg::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::JSSVGPathSegArcAbs::createPrototype(WebCore::JSSVGPathSegArcAbs *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  uint64_t v13;
  unint64_t Structure;
  JSC::Structure *v15;
  JSC::JSCell *v16;
  uint64_t v17;
  unint64_t v18;
  JSC::Structure *v19;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSSVGPathSeg::s_info + ~((_QWORD)&WebCore::JSSVGPathSeg::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGPathSeg::s_info + ~((_QWORD)&WebCore::JSSVGPathSeg::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSSVGPathSeg::s_info)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v12;
      if (v11 == &WebCore::JSSVGPathSeg::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v13)
  {
LABEL_7:
    Structure = WebCore::JSSVGPathSegPrototype::createStructure((uint64_t *)this, (uint64_t)a2, *((JSC::JSCell **)a2 + 82));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v16 = (JSC::JSCell *)WebCore::JSSVGPathSegPrototype::create(this, a2, Structure, v15);
    v17 = WebCore::JSSVGPathSeg::createStructure((uint64_t *)this, (uint64_t)a2, v16);
    v13 = WebCore::cacheDOMStructure((JSCell *)a2, v17, (uint64_t)&WebCore::JSSVGPathSeg::s_info);
  }
  v18 = WebCore::JSSVGPathSegArcAbsPrototype::createStructure((uint64_t *)this, (uint64_t)a2, *(JSC::JSCell **)(v13 + 48));
  *(_DWORD *)(v18 + 16) |= 0x80000u;
  return WebCore::JSSVGPathSegArcAbsPrototype::create(this, a2, v18, v19);
}

uint64_t WebCore::JSSVGPathSegArcAbsPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGPathSegArcAbsPrototype::create(WebCore::JSSVGPathSegArcAbsPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<8u>(this, (uint64_t)&WebCore::JSSVGPathSegArcAbs::s_info, (uint64_t)&WebCore::JSSVGPathSegArcAbsPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSegArcAbs>,(WebCore::DOMConstructorID)830>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  unint64_t Prototype;
  unint64_t v28;
  JSC::JSObject *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6640);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSeg>,(WebCore::DOMConstructorID)829>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v33 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v33);
    v5[2] = SlowCase + (int)v33;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSegArcAbs>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v34 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v34);
    v10[2848] = v2 + (int)v34;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (!v18)
    goto LABEL_21;
  v19 = *(_DWORD *)(v18 - 8);
  v20 = ((unint64_t)&WebCore::JSSVGPathSegArcAbs::s_info + ~((_QWORD)&WebCore::JSSVGPathSegArcAbs::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGPathSegArcAbs::s_info + ~((_QWORD)&WebCore::JSSVGPathSegArcAbs::s_info << 32)) >> 22);
  v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
  v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
  v23 = v19 & ((v22 >> 31) ^ v22);
  v24 = *(char ***)(v18 + 16 * v23);
  if (v24 != &WebCore::JSSVGPathSegArcAbs::s_info)
  {
    v25 = 1;
    while (v24)
    {
      v23 = ((_DWORD)v23 + v25) & v19;
      v24 = *(char ***)(v18 + 16 * v23);
      ++v25;
      if (v24 == &WebCore::JSSVGPathSegArcAbs::s_info)
        goto LABEL_20;
    }
LABEL_21:
    Prototype = WebCore::JSSVGPathSegArcAbs::createPrototype((WebCore::JSSVGPathSegArcAbs *)a1, (JSC::VM *)a2, v16);
    v28 = Prototype;
    LODWORD(v36) = 23;
    if ((Prototype & 0xFFFE000000000002) == 0)
    {
      v29 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)Prototype);
      if (v29)
        JSC::JSObject::didBecomePrototype(v29, (JSC::VM *)a1);
    }
    v30 = *v5;
    if (*v5 >= (unint64_t)v5[1])
    {
      v30 = v5[2];
      if ((v30 & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        v30 = JSC::LocalAllocator::allocateSlowCase();
        goto LABEL_26;
      }
      v35 = *(_QWORD *)(v30 + 8) ^ v5[3];
      v5[1] = v30 + HIDWORD(v35);
      v5[2] = v30 + (int)v35;
    }
    *v5 = v30 + 128;
LABEL_26:
    *(_DWORD *)v30 = 0;
    MEMORY[0x19AEA4278](v30, a1, a2, v28, &v36, &WebCore::JSSVGPathSegArcAbs::s_info, 0, 0);
    if (*(_BYTE *)(a1 + 755))
      __dmb(0xAu);
    v26 = WebCore::cacheDOMStructure((JSCell *)a2, v30, (uint64_t)&WebCore::JSSVGPathSegArcAbs::s_info);
    goto LABEL_29;
  }
LABEL_20:
  v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
  if (!v26)
    goto LABEL_21;
LABEL_29:
  v31 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v31, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6640) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGPathSegArcAbsConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGPathSegArcAbsPrototype::s_info != (char **)(16
                                                                * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                  + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSegArcAbs>,(WebCore::DOMConstructorID)830>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGPathSegArcAbs_x(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(a2 + 24) + 28);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, (double)(int)v4 == v3)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

BOOL WebCore::setJSSVGPathSegArcAbs_x(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  float v12;
  uint64_t v13;
  int v15;
  double v16;
  JSC::VM *v17;
  unint64_t v18;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGPathSegArcAbs::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGPathSegArcAbs::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v18 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v17 = v4;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v18, a1);
    v4 = v17;
    v11 = v16;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v11 < -3.40282347e38)
  {
    *(float *)&v15 = -INFINITY;
LABEL_28:
    v12 = *(float *)&v15;
    goto LABEL_19;
  }
  if (v11 > 3.40282347e38)
  {
    *(float *)&v15 = INFINITY;
    goto LABEL_28;
  }
  v12 = v11;
LABEL_19:
  *(float *)(v10 + 28) = v12;
  v13 = *(_QWORD *)(v10 + 16);
  if (v13)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, v10);
  return 1;
}

unint64_t WebCore::jsSVGPathSegArcAbs_y(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(a2 + 24) + 32);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, (double)(int)v4 == v3)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

BOOL WebCore::setJSSVGPathSegArcAbs_y(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  float v12;
  uint64_t v13;
  int v15;
  double v16;
  JSC::VM *v17;
  unint64_t v18;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGPathSegArcAbs::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGPathSegArcAbs::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v18 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v17 = v4;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v18, a1);
    v4 = v17;
    v11 = v16;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v11 < -3.40282347e38)
  {
    *(float *)&v15 = -INFINITY;
LABEL_28:
    v12 = *(float *)&v15;
    goto LABEL_19;
  }
  if (v11 > 3.40282347e38)
  {
    *(float *)&v15 = INFINITY;
    goto LABEL_28;
  }
  v12 = v11;
LABEL_19:
  *(float *)(v10 + 32) = v12;
  v13 = *(_QWORD *)(v10 + 16);
  if (v13)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, v10);
  return 1;
}

unint64_t WebCore::jsSVGPathSegArcAbs_r1(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(a2 + 24) + 36);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, (double)(int)v4 == v3)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

BOOL WebCore::setJSSVGPathSegArcAbs_r1(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  float v12;
  uint64_t v13;
  int v15;
  double v16;
  JSC::VM *v17;
  unint64_t v18;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGPathSegArcAbs::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGPathSegArcAbs::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v18 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v17 = v4;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v18, a1);
    v4 = v17;
    v11 = v16;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v11 < -3.40282347e38)
  {
    *(float *)&v15 = -INFINITY;
LABEL_28:
    v12 = *(float *)&v15;
    goto LABEL_19;
  }
  if (v11 > 3.40282347e38)
  {
    *(float *)&v15 = INFINITY;
    goto LABEL_28;
  }
  v12 = v11;
LABEL_19:
  *(float *)(v10 + 36) = v12;
  v13 = *(_QWORD *)(v10 + 16);
  if (v13)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, v10);
  return 1;
}

unint64_t WebCore::jsSVGPathSegArcAbs_r2(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(a2 + 24) + 40);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, (double)(int)v4 == v3)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

BOOL WebCore::setJSSVGPathSegArcAbs_r2(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  float v12;
  uint64_t v13;
  int v15;
  double v16;
  JSC::VM *v17;
  unint64_t v18;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGPathSegArcAbs::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGPathSegArcAbs::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v18 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v17 = v4;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v18, a1);
    v4 = v17;
    v11 = v16;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v11 < -3.40282347e38)
  {
    *(float *)&v15 = -INFINITY;
LABEL_28:
    v12 = *(float *)&v15;
    goto LABEL_19;
  }
  if (v11 > 3.40282347e38)
  {
    *(float *)&v15 = INFINITY;
    goto LABEL_28;
  }
  v12 = v11;
LABEL_19:
  *(float *)(v10 + 40) = v12;
  v13 = *(_QWORD *)(v10 + 16);
  if (v13)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, v10);
  return 1;
}

unint64_t WebCore::jsSVGPathSegArcAbs_angle(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(a2 + 24) + 44);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, (double)(int)v4 == v3)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

BOOL WebCore::setJSSVGPathSegArcAbs_angle(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  float v12;
  uint64_t v13;
  int v15;
  double v16;
  JSC::VM *v17;
  unint64_t v18;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGPathSegArcAbs::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGPathSegArcAbs::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v18 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v17 = v4;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v18, a1);
    v4 = v17;
    v11 = v16;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v11 < -3.40282347e38)
  {
    *(float *)&v15 = -INFINITY;
LABEL_28:
    v12 = *(float *)&v15;
    goto LABEL_19;
  }
  if (v11 > 3.40282347e38)
  {
    *(float *)&v15 = INFINITY;
    goto LABEL_28;
  }
  v12 = v11;
LABEL_19:
  *(float *)(v10 + 44) = v12;
  v13 = *(_QWORD *)(v10 + 16);
  if (v13)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, v10);
  return 1;
}

uint64_t WebCore::jsSVGPathSegArcAbs_largeArcFlag(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(*(_QWORD *)(a2 + 24) + 48))
    return 7;
  else
    return 6;
}

uint64_t WebCore::setJSSVGPathSegArcAbs_largeArcFlag(uint64_t a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  double v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v15;
  int v16;
  uint64_t v17;
  int *v18;
  int v19;

  v4 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGPathSegArcAbs::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGPathSegArcAbs::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  if (a3 >= 0xFFFE000000000000)
  {
    v15 = (_DWORD)a3 == 0;
    goto LABEL_39;
  }
  *(_QWORD *)&v10 = a3 - 0x2000000000000;
  if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((a3 & 0xFFFE000000000002) != 0)
    {
      v11 = a3 == 7;
      goto LABEL_16;
    }
    v16 = *(unsigned __int8 *)(a3 + 5);
    if (v16 == 3)
    {
      v19 = *(_DWORD *)(a3 + 8);
    }
    else
    {
      if (v16 != 2)
      {
        if ((*(_BYTE *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0xA) & 1) == 0)
        {
          v11 = 1;
          goto LABEL_16;
        }
        v15 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28) == a1;
        goto LABEL_39;
      }
      v17 = *(_QWORD *)(a3 + 8);
      if ((v17 & 1) != 0)
        v18 = (int *)(a3 + 16);
      else
        v18 = (int *)(v17 + 4);
      v19 = *v18;
    }
    v15 = v19 == 0;
LABEL_39:
    v11 = !v15;
    goto LABEL_16;
  }
  v11 = v10 > 0.0 || v10 < 0.0;
LABEL_16:
  v12 = *(_QWORD *)(a2 + 24);
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  *(_BYTE *)(v12 + 48) = v11;
  v13 = *(_QWORD *)(v12 + 16);
  if (v13)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, v12);
  return 1;
}

uint64_t WebCore::jsSVGPathSegArcAbs_sweepFlag(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(*(_QWORD *)(a2 + 24) + 49))
    return 7;
  else
    return 6;
}

uint64_t WebCore::setJSSVGPathSegArcAbs_sweepFlag(uint64_t a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  double v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v15;
  int v16;
  uint64_t v17;
  int *v18;
  int v19;

  v4 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGPathSegArcAbs::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGPathSegArcAbs::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  if (a3 >= 0xFFFE000000000000)
  {
    v15 = (_DWORD)a3 == 0;
    goto LABEL_39;
  }
  *(_QWORD *)&v10 = a3 - 0x2000000000000;
  if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((a3 & 0xFFFE000000000002) != 0)
    {
      v11 = a3 == 7;
      goto LABEL_16;
    }
    v16 = *(unsigned __int8 *)(a3 + 5);
    if (v16 == 3)
    {
      v19 = *(_DWORD *)(a3 + 8);
    }
    else
    {
      if (v16 != 2)
      {
        if ((*(_BYTE *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0xA) & 1) == 0)
        {
          v11 = 1;
          goto LABEL_16;
        }
        v15 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28) == a1;
        goto LABEL_39;
      }
      v17 = *(_QWORD *)(a3 + 8);
      if ((v17 & 1) != 0)
        v18 = (int *)(a3 + 16);
      else
        v18 = (int *)(v17 + 4);
      v19 = *v18;
    }
    v15 = v19 == 0;
LABEL_39:
    v11 = !v15;
    goto LABEL_16;
  }
  v11 = v10 > 0.0 || v10 < 0.0;
LABEL_16:
  v12 = *(_QWORD *)(a2 + 24);
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  *(_BYTE *)(v12 + 49) = v11;
  v13 = *(_QWORD *)(v12 + 16);
  if (v13)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, v12);
  return 1;
}

uint64_t WebCore::JSSVGPathSegArcAbs::subspaceForImpl(WebCore::JSSVGPathSegArcAbs *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 6720);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 6720))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 6720);
    *(_QWORD *)(v8 + 6720) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 6720);
  *(_QWORD *)(v3 + 6720) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSSVGPathSegArcRel::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGPathSeg::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGPathSeg::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGPathSeg::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::JSSVGPathSegArcRel::createPrototype(WebCore::JSSVGPathSegArcRel *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  uint64_t v13;
  unint64_t Structure;
  JSC::Structure *v15;
  JSC::JSCell *v16;
  uint64_t v17;
  unint64_t v18;
  JSC::Structure *v19;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSSVGPathSeg::s_info + ~((_QWORD)&WebCore::JSSVGPathSeg::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGPathSeg::s_info + ~((_QWORD)&WebCore::JSSVGPathSeg::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSSVGPathSeg::s_info)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v12;
      if (v11 == &WebCore::JSSVGPathSeg::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v13)
  {
LABEL_7:
    Structure = WebCore::JSSVGPathSegPrototype::createStructure((uint64_t *)this, (uint64_t)a2, *((JSC::JSCell **)a2 + 82));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v16 = (JSC::JSCell *)WebCore::JSSVGPathSegPrototype::create(this, a2, Structure, v15);
    v17 = WebCore::JSSVGPathSeg::createStructure((uint64_t *)this, (uint64_t)a2, v16);
    v13 = WebCore::cacheDOMStructure((JSCell *)a2, v17, (uint64_t)&WebCore::JSSVGPathSeg::s_info);
  }
  v18 = WebCore::JSSVGPathSegArcRelPrototype::createStructure((uint64_t *)this, (uint64_t)a2, *(JSC::JSCell **)(v13 + 48));
  *(_DWORD *)(v18 + 16) |= 0x80000u;
  return WebCore::JSSVGPathSegArcRelPrototype::create(this, a2, v18, v19);
}

uint64_t WebCore::JSSVGPathSegArcRelPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGPathSegArcRelPrototype::create(WebCore::JSSVGPathSegArcRelPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<8u>(this, (uint64_t)&WebCore::JSSVGPathSegArcRel::s_info, (uint64_t)&WebCore::JSSVGPathSegArcRelPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSegArcRel>,(WebCore::DOMConstructorID)831>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  unint64_t Prototype;
  unint64_t v28;
  JSC::JSObject *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6648);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSeg>,(WebCore::DOMConstructorID)829>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v33 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v33);
    v5[2] = SlowCase + (int)v33;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSegArcRel>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v34 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v34);
    v10[2848] = v2 + (int)v34;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (!v18)
    goto LABEL_21;
  v19 = *(_DWORD *)(v18 - 8);
  v20 = ((unint64_t)&WebCore::JSSVGPathSegArcRel::s_info + ~((_QWORD)&WebCore::JSSVGPathSegArcRel::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGPathSegArcRel::s_info + ~((_QWORD)&WebCore::JSSVGPathSegArcRel::s_info << 32)) >> 22);
  v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
  v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
  v23 = v19 & ((v22 >> 31) ^ v22);
  v24 = *(char ***)(v18 + 16 * v23);
  if (v24 != &WebCore::JSSVGPathSegArcRel::s_info)
  {
    v25 = 1;
    while (v24)
    {
      v23 = ((_DWORD)v23 + v25) & v19;
      v24 = *(char ***)(v18 + 16 * v23);
      ++v25;
      if (v24 == &WebCore::JSSVGPathSegArcRel::s_info)
        goto LABEL_20;
    }
LABEL_21:
    Prototype = WebCore::JSSVGPathSegArcRel::createPrototype((WebCore::JSSVGPathSegArcRel *)a1, (JSC::VM *)a2, v16);
    v28 = Prototype;
    LODWORD(v36) = 23;
    if ((Prototype & 0xFFFE000000000002) == 0)
    {
      v29 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)Prototype);
      if (v29)
        JSC::JSObject::didBecomePrototype(v29, (JSC::VM *)a1);
    }
    v30 = *v5;
    if (*v5 >= (unint64_t)v5[1])
    {
      v30 = v5[2];
      if ((v30 & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        v30 = JSC::LocalAllocator::allocateSlowCase();
        goto LABEL_26;
      }
      v35 = *(_QWORD *)(v30 + 8) ^ v5[3];
      v5[1] = v30 + HIDWORD(v35);
      v5[2] = v30 + (int)v35;
    }
    *v5 = v30 + 128;
LABEL_26:
    *(_DWORD *)v30 = 0;
    MEMORY[0x19AEA4278](v30, a1, a2, v28, &v36, &WebCore::JSSVGPathSegArcRel::s_info, 0, 0);
    if (*(_BYTE *)(a1 + 755))
      __dmb(0xAu);
    v26 = WebCore::cacheDOMStructure((JSCell *)a2, v30, (uint64_t)&WebCore::JSSVGPathSegArcRel::s_info);
    goto LABEL_29;
  }
LABEL_20:
  v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
  if (!v26)
    goto LABEL_21;
LABEL_29:
  v31 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v31, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6648) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGPathSegArcRelConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGPathSegArcRelPrototype::s_info != (char **)(16
                                                                * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                  + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSegArcRel>,(WebCore::DOMConstructorID)831>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGPathSegArcRel_x(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(a2 + 24) + 28);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, (double)(int)v4 == v3)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

BOOL WebCore::setJSSVGPathSegArcRel_x(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  float v12;
  uint64_t v13;
  int v15;
  double v16;
  JSC::VM *v17;
  unint64_t v18;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGPathSegArcRel::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGPathSegArcRel::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v18 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v17 = v4;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v18, a1);
    v4 = v17;
    v11 = v16;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v11 < -3.40282347e38)
  {
    *(float *)&v15 = -INFINITY;
LABEL_28:
    v12 = *(float *)&v15;
    goto LABEL_19;
  }
  if (v11 > 3.40282347e38)
  {
    *(float *)&v15 = INFINITY;
    goto LABEL_28;
  }
  v12 = v11;
LABEL_19:
  *(float *)(v10 + 28) = v12;
  v13 = *(_QWORD *)(v10 + 16);
  if (v13)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, v10);
  return 1;
}

unint64_t WebCore::jsSVGPathSegArcRel_y(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(a2 + 24) + 32);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, (double)(int)v4 == v3)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

BOOL WebCore::setJSSVGPathSegArcRel_y(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  float v12;
  uint64_t v13;
  int v15;
  double v16;
  JSC::VM *v17;
  unint64_t v18;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGPathSegArcRel::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGPathSegArcRel::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v18 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v17 = v4;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v18, a1);
    v4 = v17;
    v11 = v16;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v11 < -3.40282347e38)
  {
    *(float *)&v15 = -INFINITY;
LABEL_28:
    v12 = *(float *)&v15;
    goto LABEL_19;
  }
  if (v11 > 3.40282347e38)
  {
    *(float *)&v15 = INFINITY;
    goto LABEL_28;
  }
  v12 = v11;
LABEL_19:
  *(float *)(v10 + 32) = v12;
  v13 = *(_QWORD *)(v10 + 16);
  if (v13)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, v10);
  return 1;
}

unint64_t WebCore::jsSVGPathSegArcRel_r1(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(a2 + 24) + 36);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, (double)(int)v4 == v3)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

BOOL WebCore::setJSSVGPathSegArcRel_r1(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  float v12;
  uint64_t v13;
  int v15;
  double v16;
  JSC::VM *v17;
  unint64_t v18;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGPathSegArcRel::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGPathSegArcRel::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v18 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v17 = v4;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v18, a1);
    v4 = v17;
    v11 = v16;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v11 < -3.40282347e38)
  {
    *(float *)&v15 = -INFINITY;
LABEL_28:
    v12 = *(float *)&v15;
    goto LABEL_19;
  }
  if (v11 > 3.40282347e38)
  {
    *(float *)&v15 = INFINITY;
    goto LABEL_28;
  }
  v12 = v11;
LABEL_19:
  *(float *)(v10 + 36) = v12;
  v13 = *(_QWORD *)(v10 + 16);
  if (v13)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, v10);
  return 1;
}

unint64_t WebCore::jsSVGPathSegArcRel_r2(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(a2 + 24) + 40);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, (double)(int)v4 == v3)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

BOOL WebCore::setJSSVGPathSegArcRel_r2(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  float v12;
  uint64_t v13;
  int v15;
  double v16;
  JSC::VM *v17;
  unint64_t v18;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGPathSegArcRel::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGPathSegArcRel::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v18 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v17 = v4;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v18, a1);
    v4 = v17;
    v11 = v16;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v11 < -3.40282347e38)
  {
    *(float *)&v15 = -INFINITY;
LABEL_28:
    v12 = *(float *)&v15;
    goto LABEL_19;
  }
  if (v11 > 3.40282347e38)
  {
    *(float *)&v15 = INFINITY;
    goto LABEL_28;
  }
  v12 = v11;
LABEL_19:
  *(float *)(v10 + 40) = v12;
  v13 = *(_QWORD *)(v10 + 16);
  if (v13)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, v10);
  return 1;
}

unint64_t WebCore::jsSVGPathSegArcRel_angle(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(a2 + 24) + 44);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, (double)(int)v4 == v3)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

BOOL WebCore::setJSSVGPathSegArcRel_angle(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  float v12;
  uint64_t v13;
  int v15;
  double v16;
  JSC::VM *v17;
  unint64_t v18;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGPathSegArcRel::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGPathSegArcRel::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v18 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v17 = v4;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v18, a1);
    v4 = v17;
    v11 = v16;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v11 < -3.40282347e38)
  {
    *(float *)&v15 = -INFINITY;
LABEL_28:
    v12 = *(float *)&v15;
    goto LABEL_19;
  }
  if (v11 > 3.40282347e38)
  {
    *(float *)&v15 = INFINITY;
    goto LABEL_28;
  }
  v12 = v11;
LABEL_19:
  *(float *)(v10 + 44) = v12;
  v13 = *(_QWORD *)(v10 + 16);
  if (v13)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, v10);
  return 1;
}

uint64_t WebCore::jsSVGPathSegArcRel_largeArcFlag(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(*(_QWORD *)(a2 + 24) + 48))
    return 7;
  else
    return 6;
}

uint64_t WebCore::setJSSVGPathSegArcRel_largeArcFlag(uint64_t a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  double v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v15;
  int v16;
  uint64_t v17;
  int *v18;
  int v19;

  v4 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGPathSegArcRel::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGPathSegArcRel::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  if (a3 >= 0xFFFE000000000000)
  {
    v15 = (_DWORD)a3 == 0;
    goto LABEL_39;
  }
  *(_QWORD *)&v10 = a3 - 0x2000000000000;
  if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((a3 & 0xFFFE000000000002) != 0)
    {
      v11 = a3 == 7;
      goto LABEL_16;
    }
    v16 = *(unsigned __int8 *)(a3 + 5);
    if (v16 == 3)
    {
      v19 = *(_DWORD *)(a3 + 8);
    }
    else
    {
      if (v16 != 2)
      {
        if ((*(_BYTE *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0xA) & 1) == 0)
        {
          v11 = 1;
          goto LABEL_16;
        }
        v15 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28) == a1;
        goto LABEL_39;
      }
      v17 = *(_QWORD *)(a3 + 8);
      if ((v17 & 1) != 0)
        v18 = (int *)(a3 + 16);
      else
        v18 = (int *)(v17 + 4);
      v19 = *v18;
    }
    v15 = v19 == 0;
LABEL_39:
    v11 = !v15;
    goto LABEL_16;
  }
  v11 = v10 > 0.0 || v10 < 0.0;
LABEL_16:
  v12 = *(_QWORD *)(a2 + 24);
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  *(_BYTE *)(v12 + 48) = v11;
  v13 = *(_QWORD *)(v12 + 16);
  if (v13)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, v12);
  return 1;
}

uint64_t WebCore::jsSVGPathSegArcRel_sweepFlag(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(*(_QWORD *)(a2 + 24) + 49))
    return 7;
  else
    return 6;
}

uint64_t WebCore::setJSSVGPathSegArcRel_sweepFlag(uint64_t a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  double v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v15;
  int v16;
  uint64_t v17;
  int *v18;
  int v19;

  v4 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGPathSegArcRel::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGPathSegArcRel::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  if (a3 >= 0xFFFE000000000000)
  {
    v15 = (_DWORD)a3 == 0;
    goto LABEL_39;
  }
  *(_QWORD *)&v10 = a3 - 0x2000000000000;
  if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((a3 & 0xFFFE000000000002) != 0)
    {
      v11 = a3 == 7;
      goto LABEL_16;
    }
    v16 = *(unsigned __int8 *)(a3 + 5);
    if (v16 == 3)
    {
      v19 = *(_DWORD *)(a3 + 8);
    }
    else
    {
      if (v16 != 2)
      {
        if ((*(_BYTE *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0xA) & 1) == 0)
        {
          v11 = 1;
          goto LABEL_16;
        }
        v15 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28) == a1;
        goto LABEL_39;
      }
      v17 = *(_QWORD *)(a3 + 8);
      if ((v17 & 1) != 0)
        v18 = (int *)(a3 + 16);
      else
        v18 = (int *)(v17 + 4);
      v19 = *v18;
    }
    v15 = v19 == 0;
LABEL_39:
    v11 = !v15;
    goto LABEL_16;
  }
  v11 = v10 > 0.0 || v10 < 0.0;
LABEL_16:
  v12 = *(_QWORD *)(a2 + 24);
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  *(_BYTE *)(v12 + 49) = v11;
  v13 = *(_QWORD *)(v12 + 16);
  if (v13)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, v12);
  return 1;
}

uint64_t WebCore::JSSVGPathSegArcRel::subspaceForImpl(WebCore::JSSVGPathSegArcRel *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 6728);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 6728))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 6728);
    *(_QWORD *)(v8 + 6728) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 6728);
  *(_QWORD *)(v3 + 6728) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSSVGPathSegClosePath::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGPathSeg::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGPathSeg::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGPathSeg::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::JSSVGPathSegClosePath::createPrototype(WebCore::JSSVGPathSegClosePath *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  uint64_t v13;
  unint64_t Structure;
  JSC::Structure *v15;
  JSC::JSCell *v16;
  uint64_t v17;
  unint64_t v18;
  JSC::Structure *v19;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSSVGPathSeg::s_info + ~((_QWORD)&WebCore::JSSVGPathSeg::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGPathSeg::s_info + ~((_QWORD)&WebCore::JSSVGPathSeg::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSSVGPathSeg::s_info)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v12;
      if (v11 == &WebCore::JSSVGPathSeg::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v13)
  {
LABEL_7:
    Structure = WebCore::JSSVGPathSegPrototype::createStructure((uint64_t *)this, (uint64_t)a2, *((JSC::JSCell **)a2 + 82));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v16 = (JSC::JSCell *)WebCore::JSSVGPathSegPrototype::create(this, a2, Structure, v15);
    v17 = WebCore::JSSVGPathSeg::createStructure((uint64_t *)this, (uint64_t)a2, v16);
    v13 = WebCore::cacheDOMStructure((JSCell *)a2, v17, (uint64_t)&WebCore::JSSVGPathSeg::s_info);
  }
  v18 = WebCore::JSSVGPathSegClosePathPrototype::createStructure((uint64_t *)this, (uint64_t)a2, *(JSC::JSCell **)(v13 + 48));
  *(_DWORD *)(v18 + 16) |= 0x80000u;
  return WebCore::JSSVGPathSegClosePathPrototype::create(this, a2, v18, v19);
}

uint64_t WebCore::JSSVGPathSegClosePathPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGPathSegClosePathPrototype::create(WebCore::JSSVGPathSegClosePathPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  JSC::Structure *v15;
  int v16;
  unint64_t v18;
  WTF::StringImpl *v19[6];
  int v20;
  int v21;
  JSC::Structure *v22;
  int v23;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v18 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v18);
    *((_QWORD *)this + 4865) = SlowCase + (int)v18;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)SlowCase, this);
  WTF::AtomStringImpl::addLiteral();
  v9 = v19[0];
  JSC::reifyStaticProperty(this, (uint64_t)&WebCore::JSSVGPathSegClosePath::s_info, (unint64_t *)v19, (uint64_t)&WebCore::JSSVGPathSegClosePathPrototypeTableValues, (unsigned __int8 *)SlowCase);
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v10);
    else
      *(_DWORD *)v9 -= 2;
  }
  v11 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create((uint64_t)this, v19);
  v14 = v19[0];
  v19[0] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v23 = *(_DWORD *)SlowCase;
  v22 = v15;
  v16 = JSC::Structure::outOfLineCapacity(v15);
  v20 = 0;
  v21 = v16;
  v19[0] = (WTF::StringImpl *)&v21;
  v19[1] = (WTF::StringImpl *)SlowCase;
  v19[2] = this;
  v19[3] = (WTF::StringImpl *)&v23;
  v19[4] = (WTF::StringImpl *)&v22;
  v19[5] = (WTF::StringImpl *)&v20;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v15, this, v11, 6, (uint64_t)v19);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v20, v13);
  *((_DWORD *)v15 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSegClosePath>,(WebCore::DOMConstructorID)832>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  unint64_t Prototype;
  unint64_t v28;
  JSC::JSObject *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6656);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSeg>,(WebCore::DOMConstructorID)829>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v33 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v33);
    v5[2] = SlowCase + (int)v33;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSegClosePath>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v34 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v34);
    v10[2848] = v2 + (int)v34;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (!v18)
    goto LABEL_21;
  v19 = *(_DWORD *)(v18 - 8);
  v20 = ((unint64_t)&WebCore::JSSVGPathSegClosePath::s_info
       + ~((_QWORD)&WebCore::JSSVGPathSegClosePath::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGPathSegClosePath::s_info
                                                                     + ~((_QWORD)&WebCore::JSSVGPathSegClosePath::s_info << 32)) >> 22);
  v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
  v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
  v23 = v19 & ((v22 >> 31) ^ v22);
  v24 = *(char ***)(v18 + 16 * v23);
  if (v24 != &WebCore::JSSVGPathSegClosePath::s_info)
  {
    v25 = 1;
    while (v24)
    {
      v23 = ((_DWORD)v23 + v25) & v19;
      v24 = *(char ***)(v18 + 16 * v23);
      ++v25;
      if (v24 == &WebCore::JSSVGPathSegClosePath::s_info)
        goto LABEL_20;
    }
LABEL_21:
    Prototype = WebCore::JSSVGPathSegClosePath::createPrototype((WebCore::JSSVGPathSegClosePath *)a1, (JSC::VM *)a2, v16);
    v28 = Prototype;
    LODWORD(v36) = 23;
    if ((Prototype & 0xFFFE000000000002) == 0)
    {
      v29 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)Prototype);
      if (v29)
        JSC::JSObject::didBecomePrototype(v29, (JSC::VM *)a1);
    }
    v30 = *v5;
    if (*v5 >= (unint64_t)v5[1])
    {
      v30 = v5[2];
      if ((v30 & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        v30 = JSC::LocalAllocator::allocateSlowCase();
        goto LABEL_26;
      }
      v35 = *(_QWORD *)(v30 + 8) ^ v5[3];
      v5[1] = v30 + HIDWORD(v35);
      v5[2] = v30 + (int)v35;
    }
    *v5 = v30 + 128;
LABEL_26:
    *(_DWORD *)v30 = 0;
    MEMORY[0x19AEA4278](v30, a1, a2, v28, &v36, &WebCore::JSSVGPathSegClosePath::s_info, 0, 0);
    if (*(_BYTE *)(a1 + 755))
      __dmb(0xAu);
    v26 = WebCore::cacheDOMStructure((JSCell *)a2, v30, (uint64_t)&WebCore::JSSVGPathSegClosePath::s_info);
    goto LABEL_29;
  }
LABEL_20:
  v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
  if (!v26)
    goto LABEL_21;
LABEL_29:
  v31 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v31, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6656) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGPathSegClosePathConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGPathSegClosePathPrototype::s_info != (char **)(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                     + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSegClosePath>,(WebCore::DOMConstructorID)832>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::JSSVGPathSegClosePath::subspaceForImpl(WebCore::JSSVGPathSegClosePath *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 6736);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 6736))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 6736);
    *(_QWORD *)(v8 + 6736) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 6736);
  *(_QWORD *)(v3 + 6736) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSSVGPathSegCurvetoCubicAbs::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGPathSeg::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGPathSeg::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGPathSeg::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::JSSVGPathSegCurvetoCubicAbs::createPrototype(WebCore::JSSVGPathSegCurvetoCubicAbs *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  uint64_t v13;
  unint64_t Structure;
  JSC::Structure *v15;
  JSC::JSCell *v16;
  uint64_t v17;
  unint64_t v18;
  JSC::Structure *v19;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSSVGPathSeg::s_info + ~((_QWORD)&WebCore::JSSVGPathSeg::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGPathSeg::s_info + ~((_QWORD)&WebCore::JSSVGPathSeg::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSSVGPathSeg::s_info)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v12;
      if (v11 == &WebCore::JSSVGPathSeg::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v13)
  {
LABEL_7:
    Structure = WebCore::JSSVGPathSegPrototype::createStructure((uint64_t *)this, (uint64_t)a2, *((JSC::JSCell **)a2 + 82));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v16 = (JSC::JSCell *)WebCore::JSSVGPathSegPrototype::create(this, a2, Structure, v15);
    v17 = WebCore::JSSVGPathSeg::createStructure((uint64_t *)this, (uint64_t)a2, v16);
    v13 = WebCore::cacheDOMStructure((JSCell *)a2, v17, (uint64_t)&WebCore::JSSVGPathSeg::s_info);
  }
  v18 = WebCore::JSSVGPathSegCurvetoCubicAbsPrototype::createStructure((uint64_t *)this, (uint64_t)a2, *(JSC::JSCell **)(v13 + 48));
  *(_DWORD *)(v18 + 16) |= 0x80000u;
  return WebCore::JSSVGPathSegCurvetoCubicAbsPrototype::create(this, a2, v18, v19);
}

uint64_t WebCore::JSSVGPathSegCurvetoCubicAbsPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGPathSegCurvetoCubicAbsPrototype::create(WebCore::JSSVGPathSegCurvetoCubicAbsPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<7u>(this, (uint64_t)&WebCore::JSSVGPathSegCurvetoCubicAbs::s_info, &WebCore::JSSVGPathSegCurvetoCubicAbsPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSegCurvetoCubicAbs>,(WebCore::DOMConstructorID)833>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  unint64_t Prototype;
  unint64_t v28;
  JSC::JSObject *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6664);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSeg>,(WebCore::DOMConstructorID)829>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v33 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v33);
    v5[2] = SlowCase + (int)v33;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSegCurvetoCubicAbs>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v34 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v34);
    v10[2848] = v2 + (int)v34;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (!v18)
    goto LABEL_21;
  v19 = *(_DWORD *)(v18 - 8);
  v20 = ((unint64_t)&WebCore::JSSVGPathSegCurvetoCubicAbs::s_info
       + ~((_QWORD)&WebCore::JSSVGPathSegCurvetoCubicAbs::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGPathSegCurvetoCubicAbs::s_info
                                                                           + ~((_QWORD)&WebCore::JSSVGPathSegCurvetoCubicAbs::s_info << 32)) >> 22);
  v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
  v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
  v23 = v19 & ((v22 >> 31) ^ v22);
  v24 = *(char ***)(v18 + 16 * v23);
  if (v24 != &WebCore::JSSVGPathSegCurvetoCubicAbs::s_info)
  {
    v25 = 1;
    while (v24)
    {
      v23 = ((_DWORD)v23 + v25) & v19;
      v24 = *(char ***)(v18 + 16 * v23);
      ++v25;
      if (v24 == &WebCore::JSSVGPathSegCurvetoCubicAbs::s_info)
        goto LABEL_20;
    }
LABEL_21:
    Prototype = WebCore::JSSVGPathSegCurvetoCubicAbs::createPrototype((WebCore::JSSVGPathSegCurvetoCubicAbs *)a1, (JSC::VM *)a2, v16);
    v28 = Prototype;
    LODWORD(v36) = 23;
    if ((Prototype & 0xFFFE000000000002) == 0)
    {
      v29 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)Prototype);
      if (v29)
        JSC::JSObject::didBecomePrototype(v29, (JSC::VM *)a1);
    }
    v30 = *v5;
    if (*v5 >= (unint64_t)v5[1])
    {
      v30 = v5[2];
      if ((v30 & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        v30 = JSC::LocalAllocator::allocateSlowCase();
        goto LABEL_26;
      }
      v35 = *(_QWORD *)(v30 + 8) ^ v5[3];
      v5[1] = v30 + HIDWORD(v35);
      v5[2] = v30 + (int)v35;
    }
    *v5 = v30 + 128;
LABEL_26:
    *(_DWORD *)v30 = 0;
    MEMORY[0x19AEA4278](v30, a1, a2, v28, &v36, &WebCore::JSSVGPathSegCurvetoCubicAbs::s_info, 0, 0);
    if (*(_BYTE *)(a1 + 755))
      __dmb(0xAu);
    v26 = WebCore::cacheDOMStructure((JSCell *)a2, v30, (uint64_t)&WebCore::JSSVGPathSegCurvetoCubicAbs::s_info);
    goto LABEL_29;
  }
LABEL_20:
  v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
  if (!v26)
    goto LABEL_21;
LABEL_29:
  v31 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v31, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6664) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGPathSegCurvetoCubicAbsConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGPathSegCurvetoCubicAbsPrototype::s_info != (char **)(16
                                                                         * *(unsigned int *)(16
                                                                                           * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                           + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSegCurvetoCubicAbs>,(WebCore::DOMConstructorID)833>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGPathSegCurvetoCubicAbs_x(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(a2 + 24) + 28);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, (double)(int)v4 == v3)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

BOOL WebCore::setJSSVGPathSegCurvetoCubicAbs_x(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  float v12;
  uint64_t v13;
  int v15;
  double v16;
  JSC::VM *v17;
  unint64_t v18;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGPathSegCurvetoCubicAbs::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGPathSegCurvetoCubicAbs::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v18 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v17 = v4;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v18, a1);
    v4 = v17;
    v11 = v16;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v11 < -3.40282347e38)
  {
    *(float *)&v15 = -INFINITY;
LABEL_28:
    v12 = *(float *)&v15;
    goto LABEL_19;
  }
  if (v11 > 3.40282347e38)
  {
    *(float *)&v15 = INFINITY;
    goto LABEL_28;
  }
  v12 = v11;
LABEL_19:
  *(float *)(v10 + 28) = v12;
  v13 = *(_QWORD *)(v10 + 16);
  if (v13)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, v10);
  return 1;
}

unint64_t WebCore::jsSVGPathSegCurvetoCubicAbs_y(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(a2 + 24) + 32);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, (double)(int)v4 == v3)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

BOOL WebCore::setJSSVGPathSegCurvetoCubicAbs_y(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  float v12;
  uint64_t v13;
  int v15;
  double v16;
  JSC::VM *v17;
  unint64_t v18;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGPathSegCurvetoCubicAbs::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGPathSegCurvetoCubicAbs::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v18 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v17 = v4;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v18, a1);
    v4 = v17;
    v11 = v16;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v11 < -3.40282347e38)
  {
    *(float *)&v15 = -INFINITY;
LABEL_28:
    v12 = *(float *)&v15;
    goto LABEL_19;
  }
  if (v11 > 3.40282347e38)
  {
    *(float *)&v15 = INFINITY;
    goto LABEL_28;
  }
  v12 = v11;
LABEL_19:
  *(float *)(v10 + 32) = v12;
  v13 = *(_QWORD *)(v10 + 16);
  if (v13)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, v10);
  return 1;
}

unint64_t WebCore::jsSVGPathSegCurvetoCubicAbs_x1(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(a2 + 24) + 36);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, (double)(int)v4 == v3)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

BOOL WebCore::setJSSVGPathSegCurvetoCubicAbs_x1(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  float v12;
  uint64_t v13;
  int v15;
  double v16;
  JSC::VM *v17;
  unint64_t v18;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGPathSegCurvetoCubicAbs::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGPathSegCurvetoCubicAbs::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v18 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v17 = v4;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v18, a1);
    v4 = v17;
    v11 = v16;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v11 < -3.40282347e38)
  {
    *(float *)&v15 = -INFINITY;
LABEL_28:
    v12 = *(float *)&v15;
    goto LABEL_19;
  }
  if (v11 > 3.40282347e38)
  {
    *(float *)&v15 = INFINITY;
    goto LABEL_28;
  }
  v12 = v11;
LABEL_19:
  *(float *)(v10 + 36) = v12;
  v13 = *(_QWORD *)(v10 + 16);
  if (v13)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, v10);
  return 1;
}

unint64_t WebCore::jsSVGPathSegCurvetoCubicAbs_y1(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(a2 + 24) + 40);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, (double)(int)v4 == v3)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

BOOL WebCore::setJSSVGPathSegCurvetoCubicAbs_y1(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  float v12;
  uint64_t v13;
  int v15;
  double v16;
  JSC::VM *v17;
  unint64_t v18;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGPathSegCurvetoCubicAbs::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGPathSegCurvetoCubicAbs::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v18 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v17 = v4;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v18, a1);
    v4 = v17;
    v11 = v16;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v11 < -3.40282347e38)
  {
    *(float *)&v15 = -INFINITY;
LABEL_28:
    v12 = *(float *)&v15;
    goto LABEL_19;
  }
  if (v11 > 3.40282347e38)
  {
    *(float *)&v15 = INFINITY;
    goto LABEL_28;
  }
  v12 = v11;
LABEL_19:
  *(float *)(v10 + 40) = v12;
  v13 = *(_QWORD *)(v10 + 16);
  if (v13)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, v10);
  return 1;
}

unint64_t WebCore::jsSVGPathSegCurvetoCubicAbs_x2(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(a2 + 24) + 44);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, (double)(int)v4 == v3)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

BOOL WebCore::setJSSVGPathSegCurvetoCubicAbs_x2(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  float v12;
  uint64_t v13;
  int v15;
  double v16;
  JSC::VM *v17;
  unint64_t v18;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGPathSegCurvetoCubicAbs::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGPathSegCurvetoCubicAbs::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v18 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v17 = v4;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v18, a1);
    v4 = v17;
    v11 = v16;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v11 < -3.40282347e38)
  {
    *(float *)&v15 = -INFINITY;
LABEL_28:
    v12 = *(float *)&v15;
    goto LABEL_19;
  }
  if (v11 > 3.40282347e38)
  {
    *(float *)&v15 = INFINITY;
    goto LABEL_28;
  }
  v12 = v11;
LABEL_19:
  *(float *)(v10 + 44) = v12;
  v13 = *(_QWORD *)(v10 + 16);
  if (v13)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, v10);
  return 1;
}

unint64_t WebCore::jsSVGPathSegCurvetoCubicAbs_y2(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(a2 + 24) + 48);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, (double)(int)v4 == v3)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

BOOL WebCore::setJSSVGPathSegCurvetoCubicAbs_y2(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  float v12;
  uint64_t v13;
  int v15;
  double v16;
  JSC::VM *v17;
  unint64_t v18;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGPathSegCurvetoCubicAbs::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGPathSegCurvetoCubicAbs::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v18 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v17 = v4;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v18, a1);
    v4 = v17;
    v11 = v16;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v11 < -3.40282347e38)
  {
    *(float *)&v15 = -INFINITY;
LABEL_28:
    v12 = *(float *)&v15;
    goto LABEL_19;
  }
  if (v11 > 3.40282347e38)
  {
    *(float *)&v15 = INFINITY;
    goto LABEL_28;
  }
  v12 = v11;
LABEL_19:
  *(float *)(v10 + 48) = v12;
  v13 = *(_QWORD *)(v10 + 16);
  if (v13)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, v10);
  return 1;
}

uint64_t WebCore::JSSVGPathSegCurvetoCubicAbs::subspaceForImpl(WebCore::JSSVGPathSegCurvetoCubicAbs *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 6744);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 6744))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 6744);
    *(_QWORD *)(v8 + 6744) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 6744);
  *(_QWORD *)(v3 + 6744) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSSVGPathSegCurvetoCubicRel::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGPathSeg::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGPathSeg::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGPathSeg::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::JSSVGPathSegCurvetoCubicRel::createPrototype(WebCore::JSSVGPathSegCurvetoCubicRel *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  uint64_t v13;
  unint64_t Structure;
  JSC::Structure *v15;
  JSC::JSCell *v16;
  uint64_t v17;
  unint64_t v18;
  JSC::Structure *v19;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSSVGPathSeg::s_info + ~((_QWORD)&WebCore::JSSVGPathSeg::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGPathSeg::s_info + ~((_QWORD)&WebCore::JSSVGPathSeg::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSSVGPathSeg::s_info)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v12;
      if (v11 == &WebCore::JSSVGPathSeg::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v13)
  {
LABEL_7:
    Structure = WebCore::JSSVGPathSegPrototype::createStructure((uint64_t *)this, (uint64_t)a2, *((JSC::JSCell **)a2 + 82));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v16 = (JSC::JSCell *)WebCore::JSSVGPathSegPrototype::create(this, a2, Structure, v15);
    v17 = WebCore::JSSVGPathSeg::createStructure((uint64_t *)this, (uint64_t)a2, v16);
    v13 = WebCore::cacheDOMStructure((JSCell *)a2, v17, (uint64_t)&WebCore::JSSVGPathSeg::s_info);
  }
  v18 = WebCore::JSSVGPathSegCurvetoCubicRelPrototype::createStructure((uint64_t *)this, (uint64_t)a2, *(JSC::JSCell **)(v13 + 48));
  *(_DWORD *)(v18 + 16) |= 0x80000u;
  return WebCore::JSSVGPathSegCurvetoCubicRelPrototype::create(this, a2, v18, v19);
}

uint64_t WebCore::JSSVGPathSegCurvetoCubicRelPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGPathSegCurvetoCubicRelPrototype::create(WebCore::JSSVGPathSegCurvetoCubicRelPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<7u>(this, (uint64_t)&WebCore::JSSVGPathSegCurvetoCubicRel::s_info, &WebCore::JSSVGPathSegCurvetoCubicRelPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSegCurvetoCubicRel>,(WebCore::DOMConstructorID)834>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  unint64_t Prototype;
  unint64_t v28;
  JSC::JSObject *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6672);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSeg>,(WebCore::DOMConstructorID)829>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v33 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v33);
    v5[2] = SlowCase + (int)v33;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSegCurvetoCubicRel>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v34 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v34);
    v10[2848] = v2 + (int)v34;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (!v18)
    goto LABEL_21;
  v19 = *(_DWORD *)(v18 - 8);
  v20 = ((unint64_t)&WebCore::JSSVGPathSegCurvetoCubicRel::s_info
       + ~((_QWORD)&WebCore::JSSVGPathSegCurvetoCubicRel::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGPathSegCurvetoCubicRel::s_info
                                                                           + ~((_QWORD)&WebCore::JSSVGPathSegCurvetoCubicRel::s_info << 32)) >> 22);
  v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
  v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
  v23 = v19 & ((v22 >> 31) ^ v22);
  v24 = *(char ***)(v18 + 16 * v23);
  if (v24 != &WebCore::JSSVGPathSegCurvetoCubicRel::s_info)
  {
    v25 = 1;
    while (v24)
    {
      v23 = ((_DWORD)v23 + v25) & v19;
      v24 = *(char ***)(v18 + 16 * v23);
      ++v25;
      if (v24 == &WebCore::JSSVGPathSegCurvetoCubicRel::s_info)
        goto LABEL_20;
    }
LABEL_21:
    Prototype = WebCore::JSSVGPathSegCurvetoCubicRel::createPrototype((WebCore::JSSVGPathSegCurvetoCubicRel *)a1, (JSC::VM *)a2, v16);
    v28 = Prototype;
    LODWORD(v36) = 23;
    if ((Prototype & 0xFFFE000000000002) == 0)
    {
      v29 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)Prototype);
      if (v29)
        JSC::JSObject::didBecomePrototype(v29, (JSC::VM *)a1);
    }
    v30 = *v5;
    if (*v5 >= (unint64_t)v5[1])
    {
      v30 = v5[2];
      if ((v30 & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        v30 = JSC::LocalAllocator::allocateSlowCase();
        goto LABEL_26;
      }
      v35 = *(_QWORD *)(v30 + 8) ^ v5[3];
      v5[1] = v30 + HIDWORD(v35);
      v5[2] = v30 + (int)v35;
    }
    *v5 = v30 + 128;
LABEL_26:
    *(_DWORD *)v30 = 0;
    MEMORY[0x19AEA4278](v30, a1, a2, v28, &v36, &WebCore::JSSVGPathSegCurvetoCubicRel::s_info, 0, 0);
    if (*(_BYTE *)(a1 + 755))
      __dmb(0xAu);
    v26 = WebCore::cacheDOMStructure((JSCell *)a2, v30, (uint64_t)&WebCore::JSSVGPathSegCurvetoCubicRel::s_info);
    goto LABEL_29;
  }
LABEL_20:
  v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
  if (!v26)
    goto LABEL_21;
LABEL_29:
  v31 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v31, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6672) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGPathSegCurvetoCubicRelConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGPathSegCurvetoCubicRelPrototype::s_info != (char **)(16
                                                                         * *(unsigned int *)(16
                                                                                           * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                           + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSegCurvetoCubicRel>,(WebCore::DOMConstructorID)834>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGPathSegCurvetoCubicRel_x(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(a2 + 24) + 28);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, (double)(int)v4 == v3)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

BOOL WebCore::setJSSVGPathSegCurvetoCubicRel_x(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  float v12;
  uint64_t v13;
  int v15;
  double v16;
  JSC::VM *v17;
  unint64_t v18;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGPathSegCurvetoCubicRel::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGPathSegCurvetoCubicRel::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v18 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v17 = v4;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v18, a1);
    v4 = v17;
    v11 = v16;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v11 < -3.40282347e38)
  {
    *(float *)&v15 = -INFINITY;
LABEL_28:
    v12 = *(float *)&v15;
    goto LABEL_19;
  }
  if (v11 > 3.40282347e38)
  {
    *(float *)&v15 = INFINITY;
    goto LABEL_28;
  }
  v12 = v11;
LABEL_19:
  *(float *)(v10 + 28) = v12;
  v13 = *(_QWORD *)(v10 + 16);
  if (v13)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, v10);
  return 1;
}

unint64_t WebCore::jsSVGPathSegCurvetoCubicRel_y(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(a2 + 24) + 32);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, (double)(int)v4 == v3)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

BOOL WebCore::setJSSVGPathSegCurvetoCubicRel_y(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  float v12;
  uint64_t v13;
  int v15;
  double v16;
  JSC::VM *v17;
  unint64_t v18;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGPathSegCurvetoCubicRel::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGPathSegCurvetoCubicRel::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v18 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v17 = v4;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v18, a1);
    v4 = v17;
    v11 = v16;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v11 < -3.40282347e38)
  {
    *(float *)&v15 = -INFINITY;
LABEL_28:
    v12 = *(float *)&v15;
    goto LABEL_19;
  }
  if (v11 > 3.40282347e38)
  {
    *(float *)&v15 = INFINITY;
    goto LABEL_28;
  }
  v12 = v11;
LABEL_19:
  *(float *)(v10 + 32) = v12;
  v13 = *(_QWORD *)(v10 + 16);
  if (v13)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, v10);
  return 1;
}

unint64_t WebCore::jsSVGPathSegCurvetoCubicRel_x1(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(a2 + 24) + 36);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, (double)(int)v4 == v3)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

BOOL WebCore::setJSSVGPathSegCurvetoCubicRel_x1(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  float v12;
  uint64_t v13;
  int v15;
  double v16;
  JSC::VM *v17;
  unint64_t v18;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGPathSegCurvetoCubicRel::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGPathSegCurvetoCubicRel::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v18 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v17 = v4;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v18, a1);
    v4 = v17;
    v11 = v16;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v11 < -3.40282347e38)
  {
    *(float *)&v15 = -INFINITY;
LABEL_28:
    v12 = *(float *)&v15;
    goto LABEL_19;
  }
  if (v11 > 3.40282347e38)
  {
    *(float *)&v15 = INFINITY;
    goto LABEL_28;
  }
  v12 = v11;
LABEL_19:
  *(float *)(v10 + 36) = v12;
  v13 = *(_QWORD *)(v10 + 16);
  if (v13)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, v10);
  return 1;
}

unint64_t WebCore::jsSVGPathSegCurvetoCubicRel_y1(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(a2 + 24) + 40);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, (double)(int)v4 == v3)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

BOOL WebCore::setJSSVGPathSegCurvetoCubicRel_y1(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  float v12;
  uint64_t v13;
  int v15;
  double v16;
  JSC::VM *v17;
  unint64_t v18;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGPathSegCurvetoCubicRel::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGPathSegCurvetoCubicRel::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v18 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v17 = v4;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v18, a1);
    v4 = v17;
    v11 = v16;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v11 < -3.40282347e38)
  {
    *(float *)&v15 = -INFINITY;
LABEL_28:
    v12 = *(float *)&v15;
    goto LABEL_19;
  }
  if (v11 > 3.40282347e38)
  {
    *(float *)&v15 = INFINITY;
    goto LABEL_28;
  }
  v12 = v11;
LABEL_19:
  *(float *)(v10 + 40) = v12;
  v13 = *(_QWORD *)(v10 + 16);
  if (v13)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, v10);
  return 1;
}

unint64_t WebCore::jsSVGPathSegCurvetoCubicRel_x2(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(a2 + 24) + 44);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, (double)(int)v4 == v3)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

BOOL WebCore::setJSSVGPathSegCurvetoCubicRel_x2(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  float v12;
  uint64_t v13;
  int v15;
  double v16;
  JSC::VM *v17;
  unint64_t v18;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGPathSegCurvetoCubicRel::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGPathSegCurvetoCubicRel::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v18 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v17 = v4;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v18, a1);
    v4 = v17;
    v11 = v16;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v11 < -3.40282347e38)
  {
    *(float *)&v15 = -INFINITY;
LABEL_28:
    v12 = *(float *)&v15;
    goto LABEL_19;
  }
  if (v11 > 3.40282347e38)
  {
    *(float *)&v15 = INFINITY;
    goto LABEL_28;
  }
  v12 = v11;
LABEL_19:
  *(float *)(v10 + 44) = v12;
  v13 = *(_QWORD *)(v10 + 16);
  if (v13)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, v10);
  return 1;
}

unint64_t WebCore::jsSVGPathSegCurvetoCubicRel_y2(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(a2 + 24) + 48);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, (double)(int)v4 == v3)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

BOOL WebCore::setJSSVGPathSegCurvetoCubicRel_y2(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  float v12;
  uint64_t v13;
  int v15;
  double v16;
  JSC::VM *v17;
  unint64_t v18;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGPathSegCurvetoCubicRel::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGPathSegCurvetoCubicRel::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v18 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v17 = v4;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v18, a1);
    v4 = v17;
    v11 = v16;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v11 < -3.40282347e38)
  {
    *(float *)&v15 = -INFINITY;
LABEL_28:
    v12 = *(float *)&v15;
    goto LABEL_19;
  }
  if (v11 > 3.40282347e38)
  {
    *(float *)&v15 = INFINITY;
    goto LABEL_28;
  }
  v12 = v11;
LABEL_19:
  *(float *)(v10 + 48) = v12;
  v13 = *(_QWORD *)(v10 + 16);
  if (v13)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, v10);
  return 1;
}

uint64_t WebCore::JSSVGPathSegCurvetoCubicRel::subspaceForImpl(WebCore::JSSVGPathSegCurvetoCubicRel *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 6752);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 6752))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 6752);
    *(_QWORD *)(v8 + 6752) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 6752);
  *(_QWORD *)(v3 + 6752) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSSVGPathSegCurvetoCubicSmoothAbs::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGPathSeg::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGPathSeg::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGPathSeg::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::JSSVGPathSegCurvetoCubicSmoothAbs::createPrototype(WebCore::JSSVGPathSegCurvetoCubicSmoothAbs *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  uint64_t v13;
  unint64_t Structure;
  JSC::Structure *v15;
  JSC::JSCell *v16;
  uint64_t v17;
  unint64_t v18;
  JSC::Structure *v19;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSSVGPathSeg::s_info + ~((_QWORD)&WebCore::JSSVGPathSeg::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGPathSeg::s_info + ~((_QWORD)&WebCore::JSSVGPathSeg::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSSVGPathSeg::s_info)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v12;
      if (v11 == &WebCore::JSSVGPathSeg::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v13)
  {
LABEL_7:
    Structure = WebCore::JSSVGPathSegPrototype::createStructure((uint64_t *)this, (uint64_t)a2, *((JSC::JSCell **)a2 + 82));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v16 = (JSC::JSCell *)WebCore::JSSVGPathSegPrototype::create(this, a2, Structure, v15);
    v17 = WebCore::JSSVGPathSeg::createStructure((uint64_t *)this, (uint64_t)a2, v16);
    v13 = WebCore::cacheDOMStructure((JSCell *)a2, v17, (uint64_t)&WebCore::JSSVGPathSeg::s_info);
  }
  v18 = WebCore::JSSVGPathSegCurvetoCubicSmoothAbsPrototype::createStructure((uint64_t *)this, (uint64_t)a2, *(JSC::JSCell **)(v13 + 48));
  *(_DWORD *)(v18 + 16) |= 0x80000u;
  return WebCore::JSSVGPathSegCurvetoCubicSmoothAbsPrototype::create(this, a2, v18, v19);
}

uint64_t WebCore::JSSVGPathSegCurvetoCubicSmoothAbsPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGPathSegCurvetoCubicSmoothAbsPrototype::create(WebCore::JSSVGPathSegCurvetoCubicSmoothAbsPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<5u>(this, (uint64_t)&WebCore::JSSVGPathSegCurvetoCubicSmoothAbs::s_info, &WebCore::JSSVGPathSegCurvetoCubicSmoothAbsPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSegCurvetoCubicSmoothAbs>,(WebCore::DOMConstructorID)835>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  unint64_t Prototype;
  unint64_t v28;
  JSC::JSObject *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6680);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSeg>,(WebCore::DOMConstructorID)829>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v33 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v33);
    v5[2] = SlowCase + (int)v33;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSegCurvetoCubicSmoothAbs>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v34 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v34);
    v10[2848] = v2 + (int)v34;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (!v18)
    goto LABEL_21;
  v19 = *(_DWORD *)(v18 - 8);
  v20 = ((unint64_t)&WebCore::JSSVGPathSegCurvetoCubicSmoothAbs::s_info
       + ~((_QWORD)&WebCore::JSSVGPathSegCurvetoCubicSmoothAbs::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGPathSegCurvetoCubicSmoothAbs::s_info
                                                                                 + ~((_QWORD)&WebCore::JSSVGPathSegCurvetoCubicSmoothAbs::s_info << 32)) >> 22);
  v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
  v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
  v23 = v19 & ((v22 >> 31) ^ v22);
  v24 = *(char ***)(v18 + 16 * v23);
  if (v24 != &WebCore::JSSVGPathSegCurvetoCubicSmoothAbs::s_info)
  {
    v25 = 1;
    while (v24)
    {
      v23 = ((_DWORD)v23 + v25) & v19;
      v24 = *(char ***)(v18 + 16 * v23);
      ++v25;
      if (v24 == &WebCore::JSSVGPathSegCurvetoCubicSmoothAbs::s_info)
        goto LABEL_20;
    }
LABEL_21:
    Prototype = WebCore::JSSVGPathSegCurvetoCubicSmoothAbs::createPrototype((WebCore::JSSVGPathSegCurvetoCubicSmoothAbs *)a1, (JSC::VM *)a2, v16);
    v28 = Prototype;
    LODWORD(v36) = 23;
    if ((Prototype & 0xFFFE000000000002) == 0)
    {
      v29 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)Prototype);
      if (v29)
        JSC::JSObject::didBecomePrototype(v29, (JSC::VM *)a1);
    }
    v30 = *v5;
    if (*v5 >= (unint64_t)v5[1])
    {
      v30 = v5[2];
      if ((v30 & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        v30 = JSC::LocalAllocator::allocateSlowCase();
        goto LABEL_26;
      }
      v35 = *(_QWORD *)(v30 + 8) ^ v5[3];
      v5[1] = v30 + HIDWORD(v35);
      v5[2] = v30 + (int)v35;
    }
    *v5 = v30 + 128;
LABEL_26:
    *(_DWORD *)v30 = 0;
    MEMORY[0x19AEA4278](v30, a1, a2, v28, &v36, &WebCore::JSSVGPathSegCurvetoCubicSmoothAbs::s_info, 0, 0);
    if (*(_BYTE *)(a1 + 755))
      __dmb(0xAu);
    v26 = WebCore::cacheDOMStructure((JSCell *)a2, v30, (uint64_t)&WebCore::JSSVGPathSegCurvetoCubicSmoothAbs::s_info);
    goto LABEL_29;
  }
LABEL_20:
  v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
  if (!v26)
    goto LABEL_21;
LABEL_29:
  v31 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v31, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6680) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGPathSegCurvetoCubicSmoothAbsConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGPathSegCurvetoCubicSmoothAbsPrototype::s_info != (char **)(16
                                                                               * *(unsigned int *)(16
                                                                                                 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                                 + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSegCurvetoCubicSmoothAbs>,(WebCore::DOMConstructorID)835>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGPathSegCurvetoCubicSmoothAbs_x(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(a2 + 24) + 28);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, (double)(int)v4 == v3)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

BOOL WebCore::setJSSVGPathSegCurvetoCubicSmoothAbs_x(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  float v12;
  uint64_t v13;
  int v15;
  double v16;
  JSC::VM *v17;
  unint64_t v18;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGPathSegCurvetoCubicSmoothAbs::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGPathSegCurvetoCubicSmoothAbs::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v18 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v17 = v4;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v18, a1);
    v4 = v17;
    v11 = v16;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v11 < -3.40282347e38)
  {
    *(float *)&v15 = -INFINITY;
LABEL_28:
    v12 = *(float *)&v15;
    goto LABEL_19;
  }
  if (v11 > 3.40282347e38)
  {
    *(float *)&v15 = INFINITY;
    goto LABEL_28;
  }
  v12 = v11;
LABEL_19:
  *(float *)(v10 + 28) = v12;
  v13 = *(_QWORD *)(v10 + 16);
  if (v13)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, v10);
  return 1;
}

unint64_t WebCore::jsSVGPathSegCurvetoCubicSmoothAbs_y(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(a2 + 24) + 32);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, (double)(int)v4 == v3)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

BOOL WebCore::setJSSVGPathSegCurvetoCubicSmoothAbs_y(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  float v12;
  uint64_t v13;
  int v15;
  double v16;
  JSC::VM *v17;
  unint64_t v18;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGPathSegCurvetoCubicSmoothAbs::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGPathSegCurvetoCubicSmoothAbs::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v18 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v17 = v4;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v18, a1);
    v4 = v17;
    v11 = v16;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v11 < -3.40282347e38)
  {
    *(float *)&v15 = -INFINITY;
LABEL_28:
    v12 = *(float *)&v15;
    goto LABEL_19;
  }
  if (v11 > 3.40282347e38)
  {
    *(float *)&v15 = INFINITY;
    goto LABEL_28;
  }
  v12 = v11;
LABEL_19:
  *(float *)(v10 + 32) = v12;
  v13 = *(_QWORD *)(v10 + 16);
  if (v13)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, v10);
  return 1;
}

unint64_t WebCore::jsSVGPathSegCurvetoCubicSmoothAbs_x2(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(a2 + 24) + 36);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, (double)(int)v4 == v3)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

BOOL WebCore::setJSSVGPathSegCurvetoCubicSmoothAbs_x2(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  float v12;
  uint64_t v13;
  int v15;
  double v16;
  JSC::VM *v17;
  unint64_t v18;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGPathSegCurvetoCubicSmoothAbs::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGPathSegCurvetoCubicSmoothAbs::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v18 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v17 = v4;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v18, a1);
    v4 = v17;
    v11 = v16;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v11 < -3.40282347e38)
  {
    *(float *)&v15 = -INFINITY;
LABEL_28:
    v12 = *(float *)&v15;
    goto LABEL_19;
  }
  if (v11 > 3.40282347e38)
  {
    *(float *)&v15 = INFINITY;
    goto LABEL_28;
  }
  v12 = v11;
LABEL_19:
  *(float *)(v10 + 36) = v12;
  v13 = *(_QWORD *)(v10 + 16);
  if (v13)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, v10);
  return 1;
}

unint64_t WebCore::jsSVGPathSegCurvetoCubicSmoothAbs_y2(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(a2 + 24) + 40);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, (double)(int)v4 == v3)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

BOOL WebCore::setJSSVGPathSegCurvetoCubicSmoothAbs_y2(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  float v12;
  uint64_t v13;
  int v15;
  double v16;
  JSC::VM *v17;
  unint64_t v18;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGPathSegCurvetoCubicSmoothAbs::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGPathSegCurvetoCubicSmoothAbs::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v18 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v17 = v4;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v18, a1);
    v4 = v17;
    v11 = v16;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v11 < -3.40282347e38)
  {
    *(float *)&v15 = -INFINITY;
LABEL_28:
    v12 = *(float *)&v15;
    goto LABEL_19;
  }
  if (v11 > 3.40282347e38)
  {
    *(float *)&v15 = INFINITY;
    goto LABEL_28;
  }
  v12 = v11;
LABEL_19:
  *(float *)(v10 + 40) = v12;
  v13 = *(_QWORD *)(v10 + 16);
  if (v13)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, v10);
  return 1;
}

uint64_t WebCore::JSSVGPathSegCurvetoCubicSmoothAbs::subspaceForImpl(WebCore::JSSVGPathSegCurvetoCubicSmoothAbs *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 6760);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 6760))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 6760);
    *(_QWORD *)(v8 + 6760) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 6760);
  *(_QWORD *)(v3 + 6760) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSSVGPathSegCurvetoCubicSmoothRel::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGPathSeg::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGPathSeg::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGPathSeg::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::JSSVGPathSegCurvetoCubicSmoothRel::createPrototype(WebCore::JSSVGPathSegCurvetoCubicSmoothRel *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  uint64_t v13;
  unint64_t Structure;
  JSC::Structure *v15;
  JSC::JSCell *v16;
  uint64_t v17;
  unint64_t v18;
  JSC::Structure *v19;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSSVGPathSeg::s_info + ~((_QWORD)&WebCore::JSSVGPathSeg::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGPathSeg::s_info + ~((_QWORD)&WebCore::JSSVGPathSeg::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSSVGPathSeg::s_info)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v12;
      if (v11 == &WebCore::JSSVGPathSeg::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v13)
  {
LABEL_7:
    Structure = WebCore::JSSVGPathSegPrototype::createStructure((uint64_t *)this, (uint64_t)a2, *((JSC::JSCell **)a2 + 82));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v16 = (JSC::JSCell *)WebCore::JSSVGPathSegPrototype::create(this, a2, Structure, v15);
    v17 = WebCore::JSSVGPathSeg::createStructure((uint64_t *)this, (uint64_t)a2, v16);
    v13 = WebCore::cacheDOMStructure((JSCell *)a2, v17, (uint64_t)&WebCore::JSSVGPathSeg::s_info);
  }
  v18 = WebCore::JSSVGPathSegCurvetoCubicSmoothRelPrototype::createStructure((uint64_t *)this, (uint64_t)a2, *(JSC::JSCell **)(v13 + 48));
  *(_DWORD *)(v18 + 16) |= 0x80000u;
  return WebCore::JSSVGPathSegCurvetoCubicSmoothRelPrototype::create(this, a2, v18, v19);
}

uint64_t WebCore::JSSVGPathSegCurvetoCubicSmoothRelPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGPathSegCurvetoCubicSmoothRelPrototype::create(WebCore::JSSVGPathSegCurvetoCubicSmoothRelPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<5u>(this, (uint64_t)&WebCore::JSSVGPathSegCurvetoCubicSmoothRel::s_info, &WebCore::JSSVGPathSegCurvetoCubicSmoothRelPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSegCurvetoCubicSmoothRel>,(WebCore::DOMConstructorID)836>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  unint64_t Prototype;
  unint64_t v28;
  JSC::JSObject *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6688);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSeg>,(WebCore::DOMConstructorID)829>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v33 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v33);
    v5[2] = SlowCase + (int)v33;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSegCurvetoCubicSmoothRel>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v34 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v34);
    v10[2848] = v2 + (int)v34;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (!v18)
    goto LABEL_21;
  v19 = *(_DWORD *)(v18 - 8);
  v20 = ((unint64_t)&WebCore::JSSVGPathSegCurvetoCubicSmoothRel::s_info
       + ~((_QWORD)&WebCore::JSSVGPathSegCurvetoCubicSmoothRel::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGPathSegCurvetoCubicSmoothRel::s_info
                                                                                 + ~((_QWORD)&WebCore::JSSVGPathSegCurvetoCubicSmoothRel::s_info << 32)) >> 22);
  v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
  v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
  v23 = v19 & ((v22 >> 31) ^ v22);
  v24 = *(char ***)(v18 + 16 * v23);
  if (v24 != &WebCore::JSSVGPathSegCurvetoCubicSmoothRel::s_info)
  {
    v25 = 1;
    while (v24)
    {
      v23 = ((_DWORD)v23 + v25) & v19;
      v24 = *(char ***)(v18 + 16 * v23);
      ++v25;
      if (v24 == &WebCore::JSSVGPathSegCurvetoCubicSmoothRel::s_info)
        goto LABEL_20;
    }
LABEL_21:
    Prototype = WebCore::JSSVGPathSegCurvetoCubicSmoothRel::createPrototype((WebCore::JSSVGPathSegCurvetoCubicSmoothRel *)a1, (JSC::VM *)a2, v16);
    v28 = Prototype;
    LODWORD(v36) = 23;
    if ((Prototype & 0xFFFE000000000002) == 0)
    {
      v29 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)Prototype);
      if (v29)
        JSC::JSObject::didBecomePrototype(v29, (JSC::VM *)a1);
    }
    v30 = *v5;
    if (*v5 >= (unint64_t)v5[1])
    {
      v30 = v5[2];
      if ((v30 & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        v30 = JSC::LocalAllocator::allocateSlowCase();
        goto LABEL_26;
      }
      v35 = *(_QWORD *)(v30 + 8) ^ v5[3];
      v5[1] = v30 + HIDWORD(v35);
      v5[2] = v30 + (int)v35;
    }
    *v5 = v30 + 128;
LABEL_26:
    *(_DWORD *)v30 = 0;
    MEMORY[0x19AEA4278](v30, a1, a2, v28, &v36, &WebCore::JSSVGPathSegCurvetoCubicSmoothRel::s_info, 0, 0);
    if (*(_BYTE *)(a1 + 755))
      __dmb(0xAu);
    v26 = WebCore::cacheDOMStructure((JSCell *)a2, v30, (uint64_t)&WebCore::JSSVGPathSegCurvetoCubicSmoothRel::s_info);
    goto LABEL_29;
  }
LABEL_20:
  v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
  if (!v26)
    goto LABEL_21;
LABEL_29:
  v31 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v31, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6688) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGPathSegCurvetoCubicSmoothRelConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGPathSegCurvetoCubicSmoothRelPrototype::s_info != (char **)(16
                                                                               * *(unsigned int *)(16
                                                                                                 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                                 + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSegCurvetoCubicSmoothRel>,(WebCore::DOMConstructorID)836>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGPathSegCurvetoCubicSmoothRel_x(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(a2 + 24) + 28);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, (double)(int)v4 == v3)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

BOOL WebCore::setJSSVGPathSegCurvetoCubicSmoothRel_x(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  float v12;
  uint64_t v13;
  int v15;
  double v16;
  JSC::VM *v17;
  unint64_t v18;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGPathSegCurvetoCubicSmoothRel::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGPathSegCurvetoCubicSmoothRel::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v18 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v17 = v4;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v18, a1);
    v4 = v17;
    v11 = v16;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v11 < -3.40282347e38)
  {
    *(float *)&v15 = -INFINITY;
LABEL_28:
    v12 = *(float *)&v15;
    goto LABEL_19;
  }
  if (v11 > 3.40282347e38)
  {
    *(float *)&v15 = INFINITY;
    goto LABEL_28;
  }
  v12 = v11;
LABEL_19:
  *(float *)(v10 + 28) = v12;
  v13 = *(_QWORD *)(v10 + 16);
  if (v13)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, v10);
  return 1;
}

unint64_t WebCore::jsSVGPathSegCurvetoCubicSmoothRel_y(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(a2 + 24) + 32);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, (double)(int)v4 == v3)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

BOOL WebCore::setJSSVGPathSegCurvetoCubicSmoothRel_y(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  float v12;
  uint64_t v13;
  int v15;
  double v16;
  JSC::VM *v17;
  unint64_t v18;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGPathSegCurvetoCubicSmoothRel::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGPathSegCurvetoCubicSmoothRel::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v18 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v17 = v4;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v18, a1);
    v4 = v17;
    v11 = v16;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v11 < -3.40282347e38)
  {
    *(float *)&v15 = -INFINITY;
LABEL_28:
    v12 = *(float *)&v15;
    goto LABEL_19;
  }
  if (v11 > 3.40282347e38)
  {
    *(float *)&v15 = INFINITY;
    goto LABEL_28;
  }
  v12 = v11;
LABEL_19:
  *(float *)(v10 + 32) = v12;
  v13 = *(_QWORD *)(v10 + 16);
  if (v13)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, v10);
  return 1;
}

unint64_t WebCore::jsSVGPathSegCurvetoCubicSmoothRel_x2(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(a2 + 24) + 36);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, (double)(int)v4 == v3)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

BOOL WebCore::setJSSVGPathSegCurvetoCubicSmoothRel_x2(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  float v12;
  uint64_t v13;
  int v15;
  double v16;
  JSC::VM *v17;
  unint64_t v18;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGPathSegCurvetoCubicSmoothRel::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGPathSegCurvetoCubicSmoothRel::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v18 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v17 = v4;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v18, a1);
    v4 = v17;
    v11 = v16;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v11 < -3.40282347e38)
  {
    *(float *)&v15 = -INFINITY;
LABEL_28:
    v12 = *(float *)&v15;
    goto LABEL_19;
  }
  if (v11 > 3.40282347e38)
  {
    *(float *)&v15 = INFINITY;
    goto LABEL_28;
  }
  v12 = v11;
LABEL_19:
  *(float *)(v10 + 36) = v12;
  v13 = *(_QWORD *)(v10 + 16);
  if (v13)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, v10);
  return 1;
}

unint64_t WebCore::jsSVGPathSegCurvetoCubicSmoothRel_y2(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(a2 + 24) + 40);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, (double)(int)v4 == v3)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

BOOL WebCore::setJSSVGPathSegCurvetoCubicSmoothRel_y2(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  float v12;
  uint64_t v13;
  int v15;
  double v16;
  JSC::VM *v17;
  unint64_t v18;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGPathSegCurvetoCubicSmoothRel::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGPathSegCurvetoCubicSmoothRel::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v18 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v17 = v4;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v18, a1);
    v4 = v17;
    v11 = v16;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v11 < -3.40282347e38)
  {
    *(float *)&v15 = -INFINITY;
LABEL_28:
    v12 = *(float *)&v15;
    goto LABEL_19;
  }
  if (v11 > 3.40282347e38)
  {
    *(float *)&v15 = INFINITY;
    goto LABEL_28;
  }
  v12 = v11;
LABEL_19:
  *(float *)(v10 + 40) = v12;
  v13 = *(_QWORD *)(v10 + 16);
  if (v13)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, v10);
  return 1;
}

uint64_t WebCore::JSSVGPathSegCurvetoCubicSmoothRel::subspaceForImpl(WebCore::JSSVGPathSegCurvetoCubicSmoothRel *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 6768);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 6768))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 6768);
    *(_QWORD *)(v8 + 6768) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 6768);
  *(_QWORD *)(v3 + 6768) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSSVGPathSegCurvetoQuadraticAbs::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGPathSeg::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGPathSeg::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGPathSeg::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::JSSVGPathSegCurvetoQuadraticAbs::createPrototype(WebCore::JSSVGPathSegCurvetoQuadraticAbs *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  uint64_t v13;
  unint64_t Structure;
  JSC::Structure *v15;
  JSC::JSCell *v16;
  uint64_t v17;
  unint64_t v18;
  JSC::Structure *v19;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSSVGPathSeg::s_info + ~((_QWORD)&WebCore::JSSVGPathSeg::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGPathSeg::s_info + ~((_QWORD)&WebCore::JSSVGPathSeg::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSSVGPathSeg::s_info)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v12;
      if (v11 == &WebCore::JSSVGPathSeg::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v13)
  {
LABEL_7:
    Structure = WebCore::JSSVGPathSegPrototype::createStructure((uint64_t *)this, (uint64_t)a2, *((JSC::JSCell **)a2 + 82));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v16 = (JSC::JSCell *)WebCore::JSSVGPathSegPrototype::create(this, a2, Structure, v15);
    v17 = WebCore::JSSVGPathSeg::createStructure((uint64_t *)this, (uint64_t)a2, v16);
    v13 = WebCore::cacheDOMStructure((JSCell *)a2, v17, (uint64_t)&WebCore::JSSVGPathSeg::s_info);
  }
  v18 = WebCore::JSSVGPathSegCurvetoQuadraticAbsPrototype::createStructure((uint64_t *)this, (uint64_t)a2, *(JSC::JSCell **)(v13 + 48));
  *(_DWORD *)(v18 + 16) |= 0x80000u;
  return WebCore::JSSVGPathSegCurvetoQuadraticAbsPrototype::create(this, a2, v18, v19);
}

uint64_t WebCore::JSSVGPathSegCurvetoQuadraticAbsPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGPathSegCurvetoQuadraticAbsPrototype::create(WebCore::JSSVGPathSegCurvetoQuadraticAbsPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<5u>(this, (uint64_t)&WebCore::JSSVGPathSegCurvetoQuadraticAbs::s_info, &WebCore::JSSVGPathSegCurvetoQuadraticAbsPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSegCurvetoQuadraticAbs>,(WebCore::DOMConstructorID)837>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  unint64_t Prototype;
  unint64_t v28;
  JSC::JSObject *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6696);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSeg>,(WebCore::DOMConstructorID)829>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v33 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v33);
    v5[2] = SlowCase + (int)v33;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSegCurvetoQuadraticAbs>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v34 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v34);
    v10[2848] = v2 + (int)v34;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (!v18)
    goto LABEL_21;
  v19 = *(_DWORD *)(v18 - 8);
  v20 = ((unint64_t)&WebCore::JSSVGPathSegCurvetoQuadraticAbs::s_info
       + ~((_QWORD)&WebCore::JSSVGPathSegCurvetoQuadraticAbs::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGPathSegCurvetoQuadraticAbs::s_info
                                                                               + ~((_QWORD)&WebCore::JSSVGPathSegCurvetoQuadraticAbs::s_info << 32)) >> 22);
  v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
  v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
  v23 = v19 & ((v22 >> 31) ^ v22);
  v24 = *(char ***)(v18 + 16 * v23);
  if (v24 != &WebCore::JSSVGPathSegCurvetoQuadraticAbs::s_info)
  {
    v25 = 1;
    while (v24)
    {
      v23 = ((_DWORD)v23 + v25) & v19;
      v24 = *(char ***)(v18 + 16 * v23);
      ++v25;
      if (v24 == &WebCore::JSSVGPathSegCurvetoQuadraticAbs::s_info)
        goto LABEL_20;
    }
LABEL_21:
    Prototype = WebCore::JSSVGPathSegCurvetoQuadraticAbs::createPrototype((WebCore::JSSVGPathSegCurvetoQuadraticAbs *)a1, (JSC::VM *)a2, v16);
    v28 = Prototype;
    LODWORD(v36) = 23;
    if ((Prototype & 0xFFFE000000000002) == 0)
    {
      v29 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)Prototype);
      if (v29)
        JSC::JSObject::didBecomePrototype(v29, (JSC::VM *)a1);
    }
    v30 = *v5;
    if (*v5 >= (unint64_t)v5[1])
    {
      v30 = v5[2];
      if ((v30 & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        v30 = JSC::LocalAllocator::allocateSlowCase();
        goto LABEL_26;
      }
      v35 = *(_QWORD *)(v30 + 8) ^ v5[3];
      v5[1] = v30 + HIDWORD(v35);
      v5[2] = v30 + (int)v35;
    }
    *v5 = v30 + 128;
LABEL_26:
    *(_DWORD *)v30 = 0;
    MEMORY[0x19AEA4278](v30, a1, a2, v28, &v36, &WebCore::JSSVGPathSegCurvetoQuadraticAbs::s_info, 0, 0);
    if (*(_BYTE *)(a1 + 755))
      __dmb(0xAu);
    v26 = WebCore::cacheDOMStructure((JSCell *)a2, v30, (uint64_t)&WebCore::JSSVGPathSegCurvetoQuadraticAbs::s_info);
    goto LABEL_29;
  }
LABEL_20:
  v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
  if (!v26)
    goto LABEL_21;
LABEL_29:
  v31 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v31, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6696) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGPathSegCurvetoQuadraticAbsConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGPathSegCurvetoQuadraticAbsPrototype::s_info != (char **)(16
                                                                             * *(unsigned int *)(16
                                                                                               * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                               + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSegCurvetoQuadraticAbs>,(WebCore::DOMConstructorID)837>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGPathSegCurvetoQuadraticAbs_x(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(a2 + 24) + 28);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, (double)(int)v4 == v3)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

BOOL WebCore::setJSSVGPathSegCurvetoQuadraticAbs_x(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  float v12;
  uint64_t v13;
  int v15;
  double v16;
  JSC::VM *v17;
  unint64_t v18;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGPathSegCurvetoQuadraticAbs::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGPathSegCurvetoQuadraticAbs::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v18 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v17 = v4;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v18, a1);
    v4 = v17;
    v11 = v16;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v11 < -3.40282347e38)
  {
    *(float *)&v15 = -INFINITY;
LABEL_28:
    v12 = *(float *)&v15;
    goto LABEL_19;
  }
  if (v11 > 3.40282347e38)
  {
    *(float *)&v15 = INFINITY;
    goto LABEL_28;
  }
  v12 = v11;
LABEL_19:
  *(float *)(v10 + 28) = v12;
  v13 = *(_QWORD *)(v10 + 16);
  if (v13)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, v10);
  return 1;
}

unint64_t WebCore::jsSVGPathSegCurvetoQuadraticAbs_y(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(a2 + 24) + 32);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, (double)(int)v4 == v3)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

BOOL WebCore::setJSSVGPathSegCurvetoQuadraticAbs_y(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  float v12;
  uint64_t v13;
  int v15;
  double v16;
  JSC::VM *v17;
  unint64_t v18;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGPathSegCurvetoQuadraticAbs::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGPathSegCurvetoQuadraticAbs::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v18 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v17 = v4;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v18, a1);
    v4 = v17;
    v11 = v16;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v11 < -3.40282347e38)
  {
    *(float *)&v15 = -INFINITY;
LABEL_28:
    v12 = *(float *)&v15;
    goto LABEL_19;
  }
  if (v11 > 3.40282347e38)
  {
    *(float *)&v15 = INFINITY;
    goto LABEL_28;
  }
  v12 = v11;
LABEL_19:
  *(float *)(v10 + 32) = v12;
  v13 = *(_QWORD *)(v10 + 16);
  if (v13)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, v10);
  return 1;
}

unint64_t WebCore::jsSVGPathSegCurvetoQuadraticAbs_x1(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(a2 + 24) + 36);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, (double)(int)v4 == v3)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

BOOL WebCore::setJSSVGPathSegCurvetoQuadraticAbs_x1(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  float v12;
  uint64_t v13;
  int v15;
  double v16;
  JSC::VM *v17;
  unint64_t v18;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGPathSegCurvetoQuadraticAbs::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGPathSegCurvetoQuadraticAbs::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v18 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v17 = v4;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v18, a1);
    v4 = v17;
    v11 = v16;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v11 < -3.40282347e38)
  {
    *(float *)&v15 = -INFINITY;
LABEL_28:
    v12 = *(float *)&v15;
    goto LABEL_19;
  }
  if (v11 > 3.40282347e38)
  {
    *(float *)&v15 = INFINITY;
    goto LABEL_28;
  }
  v12 = v11;
LABEL_19:
  *(float *)(v10 + 36) = v12;
  v13 = *(_QWORD *)(v10 + 16);
  if (v13)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, v10);
  return 1;
}

unint64_t WebCore::jsSVGPathSegCurvetoQuadraticAbs_y1(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(a2 + 24) + 40);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, (double)(int)v4 == v3)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

BOOL WebCore::setJSSVGPathSegCurvetoQuadraticAbs_y1(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  float v12;
  uint64_t v13;
  int v15;
  double v16;
  JSC::VM *v17;
  unint64_t v18;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGPathSegCurvetoQuadraticAbs::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGPathSegCurvetoQuadraticAbs::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v18 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v17 = v4;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v18, a1);
    v4 = v17;
    v11 = v16;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v11 < -3.40282347e38)
  {
    *(float *)&v15 = -INFINITY;
LABEL_28:
    v12 = *(float *)&v15;
    goto LABEL_19;
  }
  if (v11 > 3.40282347e38)
  {
    *(float *)&v15 = INFINITY;
    goto LABEL_28;
  }
  v12 = v11;
LABEL_19:
  *(float *)(v10 + 40) = v12;
  v13 = *(_QWORD *)(v10 + 16);
  if (v13)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, v10);
  return 1;
}

uint64_t WebCore::JSSVGPathSegCurvetoQuadraticAbs::subspaceForImpl(WebCore::JSSVGPathSegCurvetoQuadraticAbs *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 6776);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 6776))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 6776);
    *(_QWORD *)(v8 + 6776) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 6776);
  *(_QWORD *)(v3 + 6776) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSSVGPathSegCurvetoQuadraticRel::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGPathSeg::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGPathSeg::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGPathSeg::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::JSSVGPathSegCurvetoQuadraticRel::createPrototype(WebCore::JSSVGPathSegCurvetoQuadraticRel *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  uint64_t v13;
  unint64_t Structure;
  JSC::Structure *v15;
  JSC::JSCell *v16;
  uint64_t v17;
  unint64_t v18;
  JSC::Structure *v19;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSSVGPathSeg::s_info + ~((_QWORD)&WebCore::JSSVGPathSeg::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGPathSeg::s_info + ~((_QWORD)&WebCore::JSSVGPathSeg::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSSVGPathSeg::s_info)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v12;
      if (v11 == &WebCore::JSSVGPathSeg::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v13)
  {
LABEL_7:
    Structure = WebCore::JSSVGPathSegPrototype::createStructure((uint64_t *)this, (uint64_t)a2, *((JSC::JSCell **)a2 + 82));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v16 = (JSC::JSCell *)WebCore::JSSVGPathSegPrototype::create(this, a2, Structure, v15);
    v17 = WebCore::JSSVGPathSeg::createStructure((uint64_t *)this, (uint64_t)a2, v16);
    v13 = WebCore::cacheDOMStructure((JSCell *)a2, v17, (uint64_t)&WebCore::JSSVGPathSeg::s_info);
  }
  v18 = WebCore::JSSVGPathSegCurvetoQuadraticRelPrototype::createStructure((uint64_t *)this, (uint64_t)a2, *(JSC::JSCell **)(v13 + 48));
  *(_DWORD *)(v18 + 16) |= 0x80000u;
  return WebCore::JSSVGPathSegCurvetoQuadraticRelPrototype::create(this, a2, v18, v19);
}

uint64_t WebCore::JSSVGPathSegCurvetoQuadraticRelPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGPathSegCurvetoQuadraticRelPrototype::create(WebCore::JSSVGPathSegCurvetoQuadraticRelPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<5u>(this, (uint64_t)&WebCore::JSSVGPathSegCurvetoQuadraticRel::s_info, &WebCore::JSSVGPathSegCurvetoQuadraticRelPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSegCurvetoQuadraticRel>,(WebCore::DOMConstructorID)838>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  unint64_t Prototype;
  unint64_t v28;
  JSC::JSObject *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6704);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSeg>,(WebCore::DOMConstructorID)829>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v33 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v33);
    v5[2] = SlowCase + (int)v33;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSegCurvetoQuadraticRel>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v34 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v34);
    v10[2848] = v2 + (int)v34;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (!v18)
    goto LABEL_21;
  v19 = *(_DWORD *)(v18 - 8);
  v20 = ((unint64_t)&WebCore::JSSVGPathSegCurvetoQuadraticRel::s_info
       + ~((_QWORD)&WebCore::JSSVGPathSegCurvetoQuadraticRel::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGPathSegCurvetoQuadraticRel::s_info
                                                                               + ~((_QWORD)&WebCore::JSSVGPathSegCurvetoQuadraticRel::s_info << 32)) >> 22);
  v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
  v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
  v23 = v19 & ((v22 >> 31) ^ v22);
  v24 = *(char ***)(v18 + 16 * v23);
  if (v24 != &WebCore::JSSVGPathSegCurvetoQuadraticRel::s_info)
  {
    v25 = 1;
    while (v24)
    {
      v23 = ((_DWORD)v23 + v25) & v19;
      v24 = *(char ***)(v18 + 16 * v23);
      ++v25;
      if (v24 == &WebCore::JSSVGPathSegCurvetoQuadraticRel::s_info)
        goto LABEL_20;
    }
LABEL_21:
    Prototype = WebCore::JSSVGPathSegCurvetoQuadraticRel::createPrototype((WebCore::JSSVGPathSegCurvetoQuadraticRel *)a1, (JSC::VM *)a2, v16);
    v28 = Prototype;
    LODWORD(v36) = 23;
    if ((Prototype & 0xFFFE000000000002) == 0)
    {
      v29 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)Prototype);
      if (v29)
        JSC::JSObject::didBecomePrototype(v29, (JSC::VM *)a1);
    }
    v30 = *v5;
    if (*v5 >= (unint64_t)v5[1])
    {
      v30 = v5[2];
      if ((v30 & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        v30 = JSC::LocalAllocator::allocateSlowCase();
        goto LABEL_26;
      }
      v35 = *(_QWORD *)(v30 + 8) ^ v5[3];
      v5[1] = v30 + HIDWORD(v35);
      v5[2] = v30 + (int)v35;
    }
    *v5 = v30 + 128;
LABEL_26:
    *(_DWORD *)v30 = 0;
    MEMORY[0x19AEA4278](v30, a1, a2, v28, &v36, &WebCore::JSSVGPathSegCurvetoQuadraticRel::s_info, 0, 0);
    if (*(_BYTE *)(a1 + 755))
      __dmb(0xAu);
    v26 = WebCore::cacheDOMStructure((JSCell *)a2, v30, (uint64_t)&WebCore::JSSVGPathSegCurvetoQuadraticRel::s_info);
    goto LABEL_29;
  }
LABEL_20:
  v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
  if (!v26)
    goto LABEL_21;
LABEL_29:
  v31 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v31, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6704) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGPathSegCurvetoQuadraticRelConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGPathSegCurvetoQuadraticRelPrototype::s_info != (char **)(16
                                                                             * *(unsigned int *)(16
                                                                                               * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                               + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSegCurvetoQuadraticRel>,(WebCore::DOMConstructorID)838>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGPathSegCurvetoQuadraticRel_x(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(a2 + 24) + 28);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, (double)(int)v4 == v3)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

BOOL WebCore::setJSSVGPathSegCurvetoQuadraticRel_x(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  float v12;
  uint64_t v13;
  int v15;
  double v16;
  JSC::VM *v17;
  unint64_t v18;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGPathSegCurvetoQuadraticRel::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGPathSegCurvetoQuadraticRel::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v18 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v17 = v4;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v18, a1);
    v4 = v17;
    v11 = v16;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v11 < -3.40282347e38)
  {
    *(float *)&v15 = -INFINITY;
LABEL_28:
    v12 = *(float *)&v15;
    goto LABEL_19;
  }
  if (v11 > 3.40282347e38)
  {
    *(float *)&v15 = INFINITY;
    goto LABEL_28;
  }
  v12 = v11;
LABEL_19:
  *(float *)(v10 + 28) = v12;
  v13 = *(_QWORD *)(v10 + 16);
  if (v13)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, v10);
  return 1;
}

unint64_t WebCore::jsSVGPathSegCurvetoQuadraticRel_y(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(a2 + 24) + 32);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, (double)(int)v4 == v3)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

BOOL WebCore::setJSSVGPathSegCurvetoQuadraticRel_y(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  float v12;
  uint64_t v13;
  int v15;
  double v16;
  JSC::VM *v17;
  unint64_t v18;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGPathSegCurvetoQuadraticRel::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGPathSegCurvetoQuadraticRel::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v18 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v17 = v4;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v18, a1);
    v4 = v17;
    v11 = v16;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v11 < -3.40282347e38)
  {
    *(float *)&v15 = -INFINITY;
LABEL_28:
    v12 = *(float *)&v15;
    goto LABEL_19;
  }
  if (v11 > 3.40282347e38)
  {
    *(float *)&v15 = INFINITY;
    goto LABEL_28;
  }
  v12 = v11;
LABEL_19:
  *(float *)(v10 + 32) = v12;
  v13 = *(_QWORD *)(v10 + 16);
  if (v13)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, v10);
  return 1;
}

unint64_t WebCore::jsSVGPathSegCurvetoQuadraticRel_x1(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(a2 + 24) + 36);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, (double)(int)v4 == v3)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

BOOL WebCore::setJSSVGPathSegCurvetoQuadraticRel_x1(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  float v12;
  uint64_t v13;
  int v15;
  double v16;
  JSC::VM *v17;
  unint64_t v18;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGPathSegCurvetoQuadraticRel::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGPathSegCurvetoQuadraticRel::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v18 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v17 = v4;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v18, a1);
    v4 = v17;
    v11 = v16;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v11 < -3.40282347e38)
  {
    *(float *)&v15 = -INFINITY;
LABEL_28:
    v12 = *(float *)&v15;
    goto LABEL_19;
  }
  if (v11 > 3.40282347e38)
  {
    *(float *)&v15 = INFINITY;
    goto LABEL_28;
  }
  v12 = v11;
LABEL_19:
  *(float *)(v10 + 36) = v12;
  v13 = *(_QWORD *)(v10 + 16);
  if (v13)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, v10);
  return 1;
}

unint64_t WebCore::jsSVGPathSegCurvetoQuadraticRel_y1(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(a2 + 24) + 40);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, (double)(int)v4 == v3)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

BOOL WebCore::setJSSVGPathSegCurvetoQuadraticRel_y1(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  float v12;
  uint64_t v13;
  int v15;
  double v16;
  JSC::VM *v17;
  unint64_t v18;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGPathSegCurvetoQuadraticRel::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGPathSegCurvetoQuadraticRel::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v18 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v17 = v4;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v18, a1);
    v4 = v17;
    v11 = v16;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v11 < -3.40282347e38)
  {
    *(float *)&v15 = -INFINITY;
LABEL_28:
    v12 = *(float *)&v15;
    goto LABEL_19;
  }
  if (v11 > 3.40282347e38)
  {
    *(float *)&v15 = INFINITY;
    goto LABEL_28;
  }
  v12 = v11;
LABEL_19:
  *(float *)(v10 + 40) = v12;
  v13 = *(_QWORD *)(v10 + 16);
  if (v13)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, v10);
  return 1;
}

uint64_t WebCore::JSSVGPathSegCurvetoQuadraticRel::subspaceForImpl(WebCore::JSSVGPathSegCurvetoQuadraticRel *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 6784);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 6784))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 6784);
    *(_QWORD *)(v8 + 6784) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 6784);
  *(_QWORD *)(v3 + 6784) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSSVGPathSegCurvetoQuadraticSmoothAbs::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGPathSeg::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGPathSeg::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGPathSeg::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::JSSVGPathSegCurvetoQuadraticSmoothAbs::createPrototype(WebCore::JSSVGPathSegCurvetoQuadraticSmoothAbs *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  uint64_t v13;
  unint64_t Structure;
  JSC::Structure *v15;
  JSC::JSCell *v16;
  uint64_t v17;
  unint64_t v18;
  JSC::Structure *v19;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSSVGPathSeg::s_info + ~((_QWORD)&WebCore::JSSVGPathSeg::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGPathSeg::s_info + ~((_QWORD)&WebCore::JSSVGPathSeg::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSSVGPathSeg::s_info)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v12;
      if (v11 == &WebCore::JSSVGPathSeg::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v13)
  {
LABEL_7:
    Structure = WebCore::JSSVGPathSegPrototype::createStructure((uint64_t *)this, (uint64_t)a2, *((JSC::JSCell **)a2 + 82));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v16 = (JSC::JSCell *)WebCore::JSSVGPathSegPrototype::create(this, a2, Structure, v15);
    v17 = WebCore::JSSVGPathSeg::createStructure((uint64_t *)this, (uint64_t)a2, v16);
    v13 = WebCore::cacheDOMStructure((JSCell *)a2, v17, (uint64_t)&WebCore::JSSVGPathSeg::s_info);
  }
  v18 = WebCore::JSSVGPathSegCurvetoQuadraticSmoothAbsPrototype::createStructure((uint64_t *)this, (uint64_t)a2, *(JSC::JSCell **)(v13 + 48));
  *(_DWORD *)(v18 + 16) |= 0x80000u;
  return WebCore::JSSVGPathSegCurvetoQuadraticSmoothAbsPrototype::create(this, a2, v18, v19);
}

uint64_t WebCore::JSSVGPathSegCurvetoQuadraticSmoothAbsPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGPathSegCurvetoQuadraticSmoothAbsPrototype::create(WebCore::JSSVGPathSegCurvetoQuadraticSmoothAbsPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(this, (uint64_t)&WebCore::JSSVGPathSegCurvetoQuadraticSmoothAbs::s_info, &WebCore::JSSVGPathSegCurvetoQuadraticSmoothAbsPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSegCurvetoQuadraticSmoothAbs>,(WebCore::DOMConstructorID)839>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  unint64_t Prototype;
  unint64_t v28;
  JSC::JSObject *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6712);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSeg>,(WebCore::DOMConstructorID)829>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v33 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v33);
    v5[2] = SlowCase + (int)v33;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSegCurvetoQuadraticSmoothAbs>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v34 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v34);
    v10[2848] = v2 + (int)v34;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (!v18)
    goto LABEL_21;
  v19 = *(_DWORD *)(v18 - 8);
  v20 = ((unint64_t)&WebCore::JSSVGPathSegCurvetoQuadraticSmoothAbs::s_info
       + ~((_QWORD)&WebCore::JSSVGPathSegCurvetoQuadraticSmoothAbs::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGPathSegCurvetoQuadraticSmoothAbs::s_info
                                                                                     + ~((_QWORD)&WebCore::JSSVGPathSegCurvetoQuadraticSmoothAbs::s_info << 32)) >> 22);
  v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
  v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
  v23 = v19 & ((v22 >> 31) ^ v22);
  v24 = *(char ***)(v18 + 16 * v23);
  if (v24 != &WebCore::JSSVGPathSegCurvetoQuadraticSmoothAbs::s_info)
  {
    v25 = 1;
    while (v24)
    {
      v23 = ((_DWORD)v23 + v25) & v19;
      v24 = *(char ***)(v18 + 16 * v23);
      ++v25;
      if (v24 == &WebCore::JSSVGPathSegCurvetoQuadraticSmoothAbs::s_info)
        goto LABEL_20;
    }
LABEL_21:
    Prototype = WebCore::JSSVGPathSegCurvetoQuadraticSmoothAbs::createPrototype((WebCore::JSSVGPathSegCurvetoQuadraticSmoothAbs *)a1, (JSC::VM *)a2, v16);
    v28 = Prototype;
    LODWORD(v36) = 23;
    if ((Prototype & 0xFFFE000000000002) == 0)
    {
      v29 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)Prototype);
      if (v29)
        JSC::JSObject::didBecomePrototype(v29, (JSC::VM *)a1);
    }
    v30 = *v5;
    if (*v5 >= (unint64_t)v5[1])
    {
      v30 = v5[2];
      if ((v30 & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        v30 = JSC::LocalAllocator::allocateSlowCase();
        goto LABEL_26;
      }
      v35 = *(_QWORD *)(v30 + 8) ^ v5[3];
      v5[1] = v30 + HIDWORD(v35);
      v5[2] = v30 + (int)v35;
    }
    *v5 = v30 + 128;
LABEL_26:
    *(_DWORD *)v30 = 0;
    MEMORY[0x19AEA4278](v30, a1, a2, v28, &v36, &WebCore::JSSVGPathSegCurvetoQuadraticSmoothAbs::s_info, 0, 0);
    if (*(_BYTE *)(a1 + 755))
      __dmb(0xAu);
    v26 = WebCore::cacheDOMStructure((JSCell *)a2, v30, (uint64_t)&WebCore::JSSVGPathSegCurvetoQuadraticSmoothAbs::s_info);
    goto LABEL_29;
  }
LABEL_20:
  v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
  if (!v26)
    goto LABEL_21;
LABEL_29:
  v31 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v31, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6712) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGPathSegCurvetoQuadraticSmoothAbsConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGPathSegCurvetoQuadraticSmoothAbsPrototype::s_info != (char **)(16
                                                                                   * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSegCurvetoQuadraticSmoothAbs>,(WebCore::DOMConstructorID)839>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGPathSegCurvetoQuadraticSmoothAbs_x(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(a2 + 24) + 28);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, (double)(int)v4 == v3)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

BOOL WebCore::setJSSVGPathSegCurvetoQuadraticSmoothAbs_x(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  float v12;
  uint64_t v13;
  int v15;
  double v16;
  JSC::VM *v17;
  unint64_t v18;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGPathSegCurvetoQuadraticSmoothAbs::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGPathSegCurvetoQuadraticSmoothAbs::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v18 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v17 = v4;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v18, a1);
    v4 = v17;
    v11 = v16;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v11 < -3.40282347e38)
  {
    *(float *)&v15 = -INFINITY;
LABEL_28:
    v12 = *(float *)&v15;
    goto LABEL_19;
  }
  if (v11 > 3.40282347e38)
  {
    *(float *)&v15 = INFINITY;
    goto LABEL_28;
  }
  v12 = v11;
LABEL_19:
  *(float *)(v10 + 28) = v12;
  v13 = *(_QWORD *)(v10 + 16);
  if (v13)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, v10);
  return 1;
}

unint64_t WebCore::jsSVGPathSegCurvetoQuadraticSmoothAbs_y(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(a2 + 24) + 32);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, (double)(int)v4 == v3)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

BOOL WebCore::setJSSVGPathSegCurvetoQuadraticSmoothAbs_y(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  float v12;
  uint64_t v13;
  int v15;
  double v16;
  JSC::VM *v17;
  unint64_t v18;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGPathSegCurvetoQuadraticSmoothAbs::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGPathSegCurvetoQuadraticSmoothAbs::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v18 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v17 = v4;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v18, a1);
    v4 = v17;
    v11 = v16;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v11 < -3.40282347e38)
  {
    *(float *)&v15 = -INFINITY;
LABEL_28:
    v12 = *(float *)&v15;
    goto LABEL_19;
  }
  if (v11 > 3.40282347e38)
  {
    *(float *)&v15 = INFINITY;
    goto LABEL_28;
  }
  v12 = v11;
LABEL_19:
  *(float *)(v10 + 32) = v12;
  v13 = *(_QWORD *)(v10 + 16);
  if (v13)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, v10);
  return 1;
}

uint64_t WebCore::JSSVGPathSegCurvetoQuadraticSmoothAbs::subspaceForImpl(WebCore::JSSVGPathSegCurvetoQuadraticSmoothAbs *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 6792);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 6792))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 6792);
    *(_QWORD *)(v8 + 6792) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 6792);
  *(_QWORD *)(v3 + 6792) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSSVGPathSegCurvetoQuadraticSmoothRel::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGPathSeg::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGPathSeg::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGPathSeg::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::JSSVGPathSegCurvetoQuadraticSmoothRel::createPrototype(WebCore::JSSVGPathSegCurvetoQuadraticSmoothRel *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  uint64_t v13;
  unint64_t Structure;
  JSC::Structure *v15;
  JSC::JSCell *v16;
  uint64_t v17;
  unint64_t v18;
  JSC::Structure *v19;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSSVGPathSeg::s_info + ~((_QWORD)&WebCore::JSSVGPathSeg::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGPathSeg::s_info + ~((_QWORD)&WebCore::JSSVGPathSeg::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSSVGPathSeg::s_info)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v12;
      if (v11 == &WebCore::JSSVGPathSeg::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v13)
  {
LABEL_7:
    Structure = WebCore::JSSVGPathSegPrototype::createStructure((uint64_t *)this, (uint64_t)a2, *((JSC::JSCell **)a2 + 82));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v16 = (JSC::JSCell *)WebCore::JSSVGPathSegPrototype::create(this, a2, Structure, v15);
    v17 = WebCore::JSSVGPathSeg::createStructure((uint64_t *)this, (uint64_t)a2, v16);
    v13 = WebCore::cacheDOMStructure((JSCell *)a2, v17, (uint64_t)&WebCore::JSSVGPathSeg::s_info);
  }
  v18 = WebCore::JSSVGPathSegCurvetoQuadraticSmoothRelPrototype::createStructure((uint64_t *)this, (uint64_t)a2, *(JSC::JSCell **)(v13 + 48));
  *(_DWORD *)(v18 + 16) |= 0x80000u;
  return WebCore::JSSVGPathSegCurvetoQuadraticSmoothRelPrototype::create(this, a2, v18, v19);
}

uint64_t WebCore::JSSVGPathSegCurvetoQuadraticSmoothRelPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGPathSegCurvetoQuadraticSmoothRelPrototype::create(WebCore::JSSVGPathSegCurvetoQuadraticSmoothRelPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(this, (uint64_t)&WebCore::JSSVGPathSegCurvetoQuadraticSmoothRel::s_info, &WebCore::JSSVGPathSegCurvetoQuadraticSmoothRelPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSegCurvetoQuadraticSmoothRel>,(WebCore::DOMConstructorID)840>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  unint64_t Prototype;
  unint64_t v28;
  JSC::JSObject *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6720);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSeg>,(WebCore::DOMConstructorID)829>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v33 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v33);
    v5[2] = SlowCase + (int)v33;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSegCurvetoQuadraticSmoothRel>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v34 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v34);
    v10[2848] = v2 + (int)v34;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (!v18)
    goto LABEL_21;
  v19 = *(_DWORD *)(v18 - 8);
  v20 = ((unint64_t)&WebCore::JSSVGPathSegCurvetoQuadraticSmoothRel::s_info
       + ~((_QWORD)&WebCore::JSSVGPathSegCurvetoQuadraticSmoothRel::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGPathSegCurvetoQuadraticSmoothRel::s_info
                                                                                     + ~((_QWORD)&WebCore::JSSVGPathSegCurvetoQuadraticSmoothRel::s_info << 32)) >> 22);
  v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
  v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
  v23 = v19 & ((v22 >> 31) ^ v22);
  v24 = *(char ***)(v18 + 16 * v23);
  if (v24 != &WebCore::JSSVGPathSegCurvetoQuadraticSmoothRel::s_info)
  {
    v25 = 1;
    while (v24)
    {
      v23 = ((_DWORD)v23 + v25) & v19;
      v24 = *(char ***)(v18 + 16 * v23);
      ++v25;
      if (v24 == &WebCore::JSSVGPathSegCurvetoQuadraticSmoothRel::s_info)
        goto LABEL_20;
    }
LABEL_21:
    Prototype = WebCore::JSSVGPathSegCurvetoQuadraticSmoothRel::createPrototype((WebCore::JSSVGPathSegCurvetoQuadraticSmoothRel *)a1, (JSC::VM *)a2, v16);
    v28 = Prototype;
    LODWORD(v36) = 23;
    if ((Prototype & 0xFFFE000000000002) == 0)
    {
      v29 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)Prototype);
      if (v29)
        JSC::JSObject::didBecomePrototype(v29, (JSC::VM *)a1);
    }
    v30 = *v5;
    if (*v5 >= (unint64_t)v5[1])
    {
      v30 = v5[2];
      if ((v30 & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        v30 = JSC::LocalAllocator::allocateSlowCase();
        goto LABEL_26;
      }
      v35 = *(_QWORD *)(v30 + 8) ^ v5[3];
      v5[1] = v30 + HIDWORD(v35);
      v5[2] = v30 + (int)v35;
    }
    *v5 = v30 + 128;
LABEL_26:
    *(_DWORD *)v30 = 0;
    MEMORY[0x19AEA4278](v30, a1, a2, v28, &v36, &WebCore::JSSVGPathSegCurvetoQuadraticSmoothRel::s_info, 0, 0);
    if (*(_BYTE *)(a1 + 755))
      __dmb(0xAu);
    v26 = WebCore::cacheDOMStructure((JSCell *)a2, v30, (uint64_t)&WebCore::JSSVGPathSegCurvetoQuadraticSmoothRel::s_info);
    goto LABEL_29;
  }
LABEL_20:
  v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
  if (!v26)
    goto LABEL_21;
LABEL_29:
  v31 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v31, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6720) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGPathSegCurvetoQuadraticSmoothRelConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGPathSegCurvetoQuadraticSmoothRelPrototype::s_info != (char **)(16
                                                                                   * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSegCurvetoQuadraticSmoothRel>,(WebCore::DOMConstructorID)840>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGPathSegCurvetoQuadraticSmoothRel_x(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(a2 + 24) + 28);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, (double)(int)v4 == v3)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

BOOL WebCore::setJSSVGPathSegCurvetoQuadraticSmoothRel_x(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  float v12;
  uint64_t v13;
  int v15;
  double v16;
  JSC::VM *v17;
  unint64_t v18;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGPathSegCurvetoQuadraticSmoothRel::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGPathSegCurvetoQuadraticSmoothRel::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v18 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v17 = v4;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v18, a1);
    v4 = v17;
    v11 = v16;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v11 < -3.40282347e38)
  {
    *(float *)&v15 = -INFINITY;
LABEL_28:
    v12 = *(float *)&v15;
    goto LABEL_19;
  }
  if (v11 > 3.40282347e38)
  {
    *(float *)&v15 = INFINITY;
    goto LABEL_28;
  }
  v12 = v11;
LABEL_19:
  *(float *)(v10 + 28) = v12;
  v13 = *(_QWORD *)(v10 + 16);
  if (v13)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, v10);
  return 1;
}

unint64_t WebCore::jsSVGPathSegCurvetoQuadraticSmoothRel_y(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(a2 + 24) + 32);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, (double)(int)v4 == v3)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

BOOL WebCore::setJSSVGPathSegCurvetoQuadraticSmoothRel_y(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  float v12;
  uint64_t v13;
  int v15;
  double v16;
  JSC::VM *v17;
  unint64_t v18;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGPathSegCurvetoQuadraticSmoothRel::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGPathSegCurvetoQuadraticSmoothRel::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v18 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v17 = v4;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v18, a1);
    v4 = v17;
    v11 = v16;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v11 < -3.40282347e38)
  {
    *(float *)&v15 = -INFINITY;
LABEL_28:
    v12 = *(float *)&v15;
    goto LABEL_19;
  }
  if (v11 > 3.40282347e38)
  {
    *(float *)&v15 = INFINITY;
    goto LABEL_28;
  }
  v12 = v11;
LABEL_19:
  *(float *)(v10 + 32) = v12;
  v13 = *(_QWORD *)(v10 + 16);
  if (v13)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, v10);
  return 1;
}

uint64_t WebCore::JSSVGPathSegCurvetoQuadraticSmoothRel::subspaceForImpl(WebCore::JSSVGPathSegCurvetoQuadraticSmoothRel *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 6800);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 6800))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 6800);
    *(_QWORD *)(v8 + 6800) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 6800);
  *(_QWORD *)(v3 + 6800) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSSVGPathSegLinetoAbs::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGPathSeg::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGPathSeg::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGPathSeg::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::JSSVGPathSegLinetoAbs::createPrototype(WebCore::JSSVGPathSegLinetoAbs *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  uint64_t v13;
  unint64_t Structure;
  JSC::Structure *v15;
  JSC::JSCell *v16;
  uint64_t v17;
  unint64_t v18;
  JSC::Structure *v19;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSSVGPathSeg::s_info + ~((_QWORD)&WebCore::JSSVGPathSeg::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGPathSeg::s_info + ~((_QWORD)&WebCore::JSSVGPathSeg::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSSVGPathSeg::s_info)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v12;
      if (v11 == &WebCore::JSSVGPathSeg::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v13)
  {
LABEL_7:
    Structure = WebCore::JSSVGPathSegPrototype::createStructure((uint64_t *)this, (uint64_t)a2, *((JSC::JSCell **)a2 + 82));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v16 = (JSC::JSCell *)WebCore::JSSVGPathSegPrototype::create(this, a2, Structure, v15);
    v17 = WebCore::JSSVGPathSeg::createStructure((uint64_t *)this, (uint64_t)a2, v16);
    v13 = WebCore::cacheDOMStructure((JSCell *)a2, v17, (uint64_t)&WebCore::JSSVGPathSeg::s_info);
  }
  v18 = WebCore::JSSVGPathSegLinetoAbsPrototype::createStructure((uint64_t *)this, (uint64_t)a2, *(JSC::JSCell **)(v13 + 48));
  *(_DWORD *)(v18 + 16) |= 0x80000u;
  return WebCore::JSSVGPathSegLinetoAbsPrototype::create(this, a2, v18, v19);
}

uint64_t WebCore::JSSVGPathSegLinetoAbsPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGPathSegLinetoAbsPrototype::create(WebCore::JSSVGPathSegLinetoAbsPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(this, (uint64_t)&WebCore::JSSVGPathSegLinetoAbs::s_info, &WebCore::JSSVGPathSegLinetoAbsPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSegLinetoAbs>,(WebCore::DOMConstructorID)841>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  unint64_t Prototype;
  unint64_t v28;
  JSC::JSObject *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6728);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSeg>,(WebCore::DOMConstructorID)829>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v33 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v33);
    v5[2] = SlowCase + (int)v33;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSegLinetoAbs>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v34 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v34);
    v10[2848] = v2 + (int)v34;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (!v18)
    goto LABEL_21;
  v19 = *(_DWORD *)(v18 - 8);
  v20 = ((unint64_t)&WebCore::JSSVGPathSegLinetoAbs::s_info
       + ~((_QWORD)&WebCore::JSSVGPathSegLinetoAbs::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGPathSegLinetoAbs::s_info
                                                                     + ~((_QWORD)&WebCore::JSSVGPathSegLinetoAbs::s_info << 32)) >> 22);
  v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
  v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
  v23 = v19 & ((v22 >> 31) ^ v22);
  v24 = *(char ***)(v18 + 16 * v23);
  if (v24 != &WebCore::JSSVGPathSegLinetoAbs::s_info)
  {
    v25 = 1;
    while (v24)
    {
      v23 = ((_DWORD)v23 + v25) & v19;
      v24 = *(char ***)(v18 + 16 * v23);
      ++v25;
      if (v24 == &WebCore::JSSVGPathSegLinetoAbs::s_info)
        goto LABEL_20;
    }
LABEL_21:
    Prototype = WebCore::JSSVGPathSegLinetoAbs::createPrototype((WebCore::JSSVGPathSegLinetoAbs *)a1, (JSC::VM *)a2, v16);
    v28 = Prototype;
    LODWORD(v36) = 23;
    if ((Prototype & 0xFFFE000000000002) == 0)
    {
      v29 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)Prototype);
      if (v29)
        JSC::JSObject::didBecomePrototype(v29, (JSC::VM *)a1);
    }
    v30 = *v5;
    if (*v5 >= (unint64_t)v5[1])
    {
      v30 = v5[2];
      if ((v30 & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        v30 = JSC::LocalAllocator::allocateSlowCase();
        goto LABEL_26;
      }
      v35 = *(_QWORD *)(v30 + 8) ^ v5[3];
      v5[1] = v30 + HIDWORD(v35);
      v5[2] = v30 + (int)v35;
    }
    *v5 = v30 + 128;
LABEL_26:
    *(_DWORD *)v30 = 0;
    MEMORY[0x19AEA4278](v30, a1, a2, v28, &v36, &WebCore::JSSVGPathSegLinetoAbs::s_info, 0, 0);
    if (*(_BYTE *)(a1 + 755))
      __dmb(0xAu);
    v26 = WebCore::cacheDOMStructure((JSCell *)a2, v30, (uint64_t)&WebCore::JSSVGPathSegLinetoAbs::s_info);
    goto LABEL_29;
  }
LABEL_20:
  v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
  if (!v26)
    goto LABEL_21;
LABEL_29:
  v31 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v31, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6728) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGPathSegLinetoAbsConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGPathSegLinetoAbsPrototype::s_info != (char **)(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                     + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSegLinetoAbs>,(WebCore::DOMConstructorID)841>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGPathSegLinetoAbs_x(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(a2 + 24) + 28);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, (double)(int)v4 == v3)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

BOOL WebCore::setJSSVGPathSegLinetoAbs_x(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  float v12;
  uint64_t v13;
  int v15;
  double v16;
  JSC::VM *v17;
  unint64_t v18;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGPathSegLinetoAbs::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGPathSegLinetoAbs::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v18 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v17 = v4;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v18, a1);
    v4 = v17;
    v11 = v16;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v11 < -3.40282347e38)
  {
    *(float *)&v15 = -INFINITY;
LABEL_28:
    v12 = *(float *)&v15;
    goto LABEL_19;
  }
  if (v11 > 3.40282347e38)
  {
    *(float *)&v15 = INFINITY;
    goto LABEL_28;
  }
  v12 = v11;
LABEL_19:
  *(float *)(v10 + 28) = v12;
  v13 = *(_QWORD *)(v10 + 16);
  if (v13)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, v10);
  return 1;
}

unint64_t WebCore::jsSVGPathSegLinetoAbs_y(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(a2 + 24) + 32);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, (double)(int)v4 == v3)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

BOOL WebCore::setJSSVGPathSegLinetoAbs_y(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  float v12;
  uint64_t v13;
  int v15;
  double v16;
  JSC::VM *v17;
  unint64_t v18;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGPathSegLinetoAbs::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGPathSegLinetoAbs::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v18 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v17 = v4;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v18, a1);
    v4 = v17;
    v11 = v16;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v11 < -3.40282347e38)
  {
    *(float *)&v15 = -INFINITY;
LABEL_28:
    v12 = *(float *)&v15;
    goto LABEL_19;
  }
  if (v11 > 3.40282347e38)
  {
    *(float *)&v15 = INFINITY;
    goto LABEL_28;
  }
  v12 = v11;
LABEL_19:
  *(float *)(v10 + 32) = v12;
  v13 = *(_QWORD *)(v10 + 16);
  if (v13)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, v10);
  return 1;
}

uint64_t WebCore::JSSVGPathSegLinetoAbs::subspaceForImpl(WebCore::JSSVGPathSegLinetoAbs *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 6808);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 6808))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 6808);
    *(_QWORD *)(v8 + 6808) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 6808);
  *(_QWORD *)(v3 + 6808) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSSVGPathSegLinetoHorizontalAbs::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGPathSeg::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGPathSeg::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGPathSeg::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::JSSVGPathSegLinetoHorizontalAbs::createPrototype(WebCore::JSSVGPathSegLinetoHorizontalAbs *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  uint64_t v13;
  unint64_t Structure;
  JSC::Structure *v15;
  JSC::JSCell *v16;
  uint64_t v17;
  unint64_t v18;
  JSC::Structure *v19;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSSVGPathSeg::s_info + ~((_QWORD)&WebCore::JSSVGPathSeg::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGPathSeg::s_info + ~((_QWORD)&WebCore::JSSVGPathSeg::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSSVGPathSeg::s_info)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v12;
      if (v11 == &WebCore::JSSVGPathSeg::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v13)
  {
LABEL_7:
    Structure = WebCore::JSSVGPathSegPrototype::createStructure((uint64_t *)this, (uint64_t)a2, *((JSC::JSCell **)a2 + 82));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v16 = (JSC::JSCell *)WebCore::JSSVGPathSegPrototype::create(this, a2, Structure, v15);
    v17 = WebCore::JSSVGPathSeg::createStructure((uint64_t *)this, (uint64_t)a2, v16);
    v13 = WebCore::cacheDOMStructure((JSCell *)a2, v17, (uint64_t)&WebCore::JSSVGPathSeg::s_info);
  }
  v18 = WebCore::JSSVGPathSegLinetoHorizontalAbsPrototype::createStructure((uint64_t *)this, (uint64_t)a2, *(JSC::JSCell **)(v13 + 48));
  *(_DWORD *)(v18 + 16) |= 0x80000u;
  return WebCore::JSSVGPathSegLinetoHorizontalAbsPrototype::create(this, a2, v18, v19);
}

uint64_t WebCore::JSSVGPathSegLinetoHorizontalAbsPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGPathSegLinetoHorizontalAbsPrototype::create(WebCore::JSSVGPathSegLinetoHorizontalAbsPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>(this, (uint64_t)&WebCore::JSSVGPathSegLinetoHorizontalAbs::s_info, (uint64_t)&WebCore::JSSVGPathSegLinetoHorizontalAbsPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSegLinetoHorizontalAbs>,(WebCore::DOMConstructorID)842>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  unint64_t Prototype;
  unint64_t v28;
  JSC::JSObject *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6736);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSeg>,(WebCore::DOMConstructorID)829>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v33 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v33);
    v5[2] = SlowCase + (int)v33;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSegLinetoHorizontalAbs>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v34 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v34);
    v10[2848] = v2 + (int)v34;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (!v18)
    goto LABEL_21;
  v19 = *(_DWORD *)(v18 - 8);
  v20 = ((unint64_t)&WebCore::JSSVGPathSegLinetoHorizontalAbs::s_info
       + ~((_QWORD)&WebCore::JSSVGPathSegLinetoHorizontalAbs::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGPathSegLinetoHorizontalAbs::s_info
                                                                               + ~((_QWORD)&WebCore::JSSVGPathSegLinetoHorizontalAbs::s_info << 32)) >> 22);
  v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
  v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
  v23 = v19 & ((v22 >> 31) ^ v22);
  v24 = *(char ***)(v18 + 16 * v23);
  if (v24 != &WebCore::JSSVGPathSegLinetoHorizontalAbs::s_info)
  {
    v25 = 1;
    while (v24)
    {
      v23 = ((_DWORD)v23 + v25) & v19;
      v24 = *(char ***)(v18 + 16 * v23);
      ++v25;
      if (v24 == &WebCore::JSSVGPathSegLinetoHorizontalAbs::s_info)
        goto LABEL_20;
    }
LABEL_21:
    Prototype = WebCore::JSSVGPathSegLinetoHorizontalAbs::createPrototype((WebCore::JSSVGPathSegLinetoHorizontalAbs *)a1, (JSC::VM *)a2, v16);
    v28 = Prototype;
    LODWORD(v36) = 23;
    if ((Prototype & 0xFFFE000000000002) == 0)
    {
      v29 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)Prototype);
      if (v29)
        JSC::JSObject::didBecomePrototype(v29, (JSC::VM *)a1);
    }
    v30 = *v5;
    if (*v5 >= (unint64_t)v5[1])
    {
      v30 = v5[2];
      if ((v30 & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        v30 = JSC::LocalAllocator::allocateSlowCase();
        goto LABEL_26;
      }
      v35 = *(_QWORD *)(v30 + 8) ^ v5[3];
      v5[1] = v30 + HIDWORD(v35);
      v5[2] = v30 + (int)v35;
    }
    *v5 = v30 + 128;
LABEL_26:
    *(_DWORD *)v30 = 0;
    MEMORY[0x19AEA4278](v30, a1, a2, v28, &v36, &WebCore::JSSVGPathSegLinetoHorizontalAbs::s_info, 0, 0);
    if (*(_BYTE *)(a1 + 755))
      __dmb(0xAu);
    v26 = WebCore::cacheDOMStructure((JSCell *)a2, v30, (uint64_t)&WebCore::JSSVGPathSegLinetoHorizontalAbs::s_info);
    goto LABEL_29;
  }
LABEL_20:
  v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
  if (!v26)
    goto LABEL_21;
LABEL_29:
  v31 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v31, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6736) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGPathSegLinetoHorizontalAbsConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGPathSegLinetoHorizontalAbsPrototype::s_info != (char **)(16
                                                                             * *(unsigned int *)(16
                                                                                               * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                               + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSegLinetoHorizontalAbs>,(WebCore::DOMConstructorID)842>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGPathSegLinetoHorizontalAbs_x(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(a2 + 24) + 28);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, (double)(int)v4 == v3)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

BOOL WebCore::setJSSVGPathSegLinetoHorizontalAbs_x(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  float v12;
  uint64_t v13;
  int v15;
  double v16;
  JSC::VM *v17;
  unint64_t v18;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGPathSegLinetoHorizontalAbs::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGPathSegLinetoHorizontalAbs::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v18 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v17 = v4;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v18, a1);
    v4 = v17;
    v11 = v16;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v11 < -3.40282347e38)
  {
    *(float *)&v15 = -INFINITY;
LABEL_28:
    v12 = *(float *)&v15;
    goto LABEL_19;
  }
  if (v11 > 3.40282347e38)
  {
    *(float *)&v15 = INFINITY;
    goto LABEL_28;
  }
  v12 = v11;
LABEL_19:
  *(float *)(v10 + 28) = v12;
  v13 = *(_QWORD *)(v10 + 16);
  if (v13)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, v10);
  return 1;
}

uint64_t WebCore::JSSVGPathSegLinetoHorizontalAbs::subspaceForImpl(WebCore::JSSVGPathSegLinetoHorizontalAbs *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 6816);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 6816))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 6816);
    *(_QWORD *)(v8 + 6816) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 6816);
  *(_QWORD *)(v3 + 6816) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSSVGPathSegLinetoHorizontalRel::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGPathSeg::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGPathSeg::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGPathSeg::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::JSSVGPathSegLinetoHorizontalRel::createPrototype(WebCore::JSSVGPathSegLinetoHorizontalRel *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  uint64_t v13;
  unint64_t Structure;
  JSC::Structure *v15;
  JSC::JSCell *v16;
  uint64_t v17;
  unint64_t v18;
  JSC::Structure *v19;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSSVGPathSeg::s_info + ~((_QWORD)&WebCore::JSSVGPathSeg::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGPathSeg::s_info + ~((_QWORD)&WebCore::JSSVGPathSeg::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSSVGPathSeg::s_info)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v12;
      if (v11 == &WebCore::JSSVGPathSeg::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v13)
  {
LABEL_7:
    Structure = WebCore::JSSVGPathSegPrototype::createStructure((uint64_t *)this, (uint64_t)a2, *((JSC::JSCell **)a2 + 82));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v16 = (JSC::JSCell *)WebCore::JSSVGPathSegPrototype::create(this, a2, Structure, v15);
    v17 = WebCore::JSSVGPathSeg::createStructure((uint64_t *)this, (uint64_t)a2, v16);
    v13 = WebCore::cacheDOMStructure((JSCell *)a2, v17, (uint64_t)&WebCore::JSSVGPathSeg::s_info);
  }
  v18 = WebCore::JSSVGPathSegLinetoHorizontalRelPrototype::createStructure((uint64_t *)this, (uint64_t)a2, *(JSC::JSCell **)(v13 + 48));
  *(_DWORD *)(v18 + 16) |= 0x80000u;
  return WebCore::JSSVGPathSegLinetoHorizontalRelPrototype::create(this, a2, v18, v19);
}

uint64_t WebCore::JSSVGPathSegLinetoHorizontalRelPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGPathSegLinetoHorizontalRelPrototype::create(WebCore::JSSVGPathSegLinetoHorizontalRelPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>(this, (uint64_t)&WebCore::JSSVGPathSegLinetoHorizontalRel::s_info, (uint64_t)&WebCore::JSSVGPathSegLinetoHorizontalRelPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSegLinetoHorizontalRel>,(WebCore::DOMConstructorID)843>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  unint64_t Prototype;
  unint64_t v28;
  JSC::JSObject *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6744);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSeg>,(WebCore::DOMConstructorID)829>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v33 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v33);
    v5[2] = SlowCase + (int)v33;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSegLinetoHorizontalRel>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v34 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v34);
    v10[2848] = v2 + (int)v34;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (!v18)
    goto LABEL_21;
  v19 = *(_DWORD *)(v18 - 8);
  v20 = ((unint64_t)&WebCore::JSSVGPathSegLinetoHorizontalRel::s_info
       + ~((_QWORD)&WebCore::JSSVGPathSegLinetoHorizontalRel::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGPathSegLinetoHorizontalRel::s_info
                                                                               + ~((_QWORD)&WebCore::JSSVGPathSegLinetoHorizontalRel::s_info << 32)) >> 22);
  v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
  v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
  v23 = v19 & ((v22 >> 31) ^ v22);
  v24 = *(char ***)(v18 + 16 * v23);
  if (v24 != &WebCore::JSSVGPathSegLinetoHorizontalRel::s_info)
  {
    v25 = 1;
    while (v24)
    {
      v23 = ((_DWORD)v23 + v25) & v19;
      v24 = *(char ***)(v18 + 16 * v23);
      ++v25;
      if (v24 == &WebCore::JSSVGPathSegLinetoHorizontalRel::s_info)
        goto LABEL_20;
    }
LABEL_21:
    Prototype = WebCore::JSSVGPathSegLinetoHorizontalRel::createPrototype((WebCore::JSSVGPathSegLinetoHorizontalRel *)a1, (JSC::VM *)a2, v16);
    v28 = Prototype;
    LODWORD(v36) = 23;
    if ((Prototype & 0xFFFE000000000002) == 0)
    {
      v29 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)Prototype);
      if (v29)
        JSC::JSObject::didBecomePrototype(v29, (JSC::VM *)a1);
    }
    v30 = *v5;
    if (*v5 >= (unint64_t)v5[1])
    {
      v30 = v5[2];
      if ((v30 & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        v30 = JSC::LocalAllocator::allocateSlowCase();
        goto LABEL_26;
      }
      v35 = *(_QWORD *)(v30 + 8) ^ v5[3];
      v5[1] = v30 + HIDWORD(v35);
      v5[2] = v30 + (int)v35;
    }
    *v5 = v30 + 128;
LABEL_26:
    *(_DWORD *)v30 = 0;
    MEMORY[0x19AEA4278](v30, a1, a2, v28, &v36, &WebCore::JSSVGPathSegLinetoHorizontalRel::s_info, 0, 0);
    if (*(_BYTE *)(a1 + 755))
      __dmb(0xAu);
    v26 = WebCore::cacheDOMStructure((JSCell *)a2, v30, (uint64_t)&WebCore::JSSVGPathSegLinetoHorizontalRel::s_info);
    goto LABEL_29;
  }
LABEL_20:
  v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
  if (!v26)
    goto LABEL_21;
LABEL_29:
  v31 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v31, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6744) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGPathSegLinetoHorizontalRelConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGPathSegLinetoHorizontalRelPrototype::s_info != (char **)(16
                                                                             * *(unsigned int *)(16
                                                                                               * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                               + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSegLinetoHorizontalRel>,(WebCore::DOMConstructorID)843>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGPathSegLinetoHorizontalRel_x(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(a2 + 24) + 28);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, (double)(int)v4 == v3)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

BOOL WebCore::setJSSVGPathSegLinetoHorizontalRel_x(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  float v12;
  uint64_t v13;
  int v15;
  double v16;
  JSC::VM *v17;
  unint64_t v18;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGPathSegLinetoHorizontalRel::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGPathSegLinetoHorizontalRel::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v18 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v17 = v4;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v18, a1);
    v4 = v17;
    v11 = v16;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v11 < -3.40282347e38)
  {
    *(float *)&v15 = -INFINITY;
LABEL_28:
    v12 = *(float *)&v15;
    goto LABEL_19;
  }
  if (v11 > 3.40282347e38)
  {
    *(float *)&v15 = INFINITY;
    goto LABEL_28;
  }
  v12 = v11;
LABEL_19:
  *(float *)(v10 + 28) = v12;
  v13 = *(_QWORD *)(v10 + 16);
  if (v13)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, v10);
  return 1;
}

uint64_t WebCore::JSSVGPathSegLinetoHorizontalRel::subspaceForImpl(WebCore::JSSVGPathSegLinetoHorizontalRel *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 6824);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 6824))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 6824);
    *(_QWORD *)(v8 + 6824) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 6824);
  *(_QWORD *)(v3 + 6824) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSSVGPathSegLinetoRel::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGPathSeg::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGPathSeg::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGPathSeg::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::JSSVGPathSegLinetoRel::createPrototype(WebCore::JSSVGPathSegLinetoRel *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  uint64_t v13;
  unint64_t Structure;
  JSC::Structure *v15;
  JSC::JSCell *v16;
  uint64_t v17;
  unint64_t v18;
  JSC::Structure *v19;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSSVGPathSeg::s_info + ~((_QWORD)&WebCore::JSSVGPathSeg::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGPathSeg::s_info + ~((_QWORD)&WebCore::JSSVGPathSeg::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSSVGPathSeg::s_info)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v12;
      if (v11 == &WebCore::JSSVGPathSeg::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v13)
  {
LABEL_7:
    Structure = WebCore::JSSVGPathSegPrototype::createStructure((uint64_t *)this, (uint64_t)a2, *((JSC::JSCell **)a2 + 82));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v16 = (JSC::JSCell *)WebCore::JSSVGPathSegPrototype::create(this, a2, Structure, v15);
    v17 = WebCore::JSSVGPathSeg::createStructure((uint64_t *)this, (uint64_t)a2, v16);
    v13 = WebCore::cacheDOMStructure((JSCell *)a2, v17, (uint64_t)&WebCore::JSSVGPathSeg::s_info);
  }
  v18 = WebCore::JSSVGPathSegLinetoRelPrototype::createStructure((uint64_t *)this, (uint64_t)a2, *(JSC::JSCell **)(v13 + 48));
  *(_DWORD *)(v18 + 16) |= 0x80000u;
  return WebCore::JSSVGPathSegLinetoRelPrototype::create(this, a2, v18, v19);
}

uint64_t WebCore::JSSVGPathSegLinetoRelPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGPathSegLinetoRelPrototype::create(WebCore::JSSVGPathSegLinetoRelPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(this, (uint64_t)&WebCore::JSSVGPathSegLinetoRel::s_info, &WebCore::JSSVGPathSegLinetoRelPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSegLinetoRel>,(WebCore::DOMConstructorID)844>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  unint64_t Prototype;
  unint64_t v28;
  JSC::JSObject *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6752);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSeg>,(WebCore::DOMConstructorID)829>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v33 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v33);
    v5[2] = SlowCase + (int)v33;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSegLinetoRel>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v34 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v34);
    v10[2848] = v2 + (int)v34;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (!v18)
    goto LABEL_21;
  v19 = *(_DWORD *)(v18 - 8);
  v20 = ((unint64_t)&WebCore::JSSVGPathSegLinetoRel::s_info
       + ~((_QWORD)&WebCore::JSSVGPathSegLinetoRel::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGPathSegLinetoRel::s_info
                                                                     + ~((_QWORD)&WebCore::JSSVGPathSegLinetoRel::s_info << 32)) >> 22);
  v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
  v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
  v23 = v19 & ((v22 >> 31) ^ v22);
  v24 = *(char ***)(v18 + 16 * v23);
  if (v24 != &WebCore::JSSVGPathSegLinetoRel::s_info)
  {
    v25 = 1;
    while (v24)
    {
      v23 = ((_DWORD)v23 + v25) & v19;
      v24 = *(char ***)(v18 + 16 * v23);
      ++v25;
      if (v24 == &WebCore::JSSVGPathSegLinetoRel::s_info)
        goto LABEL_20;
    }
LABEL_21:
    Prototype = WebCore::JSSVGPathSegLinetoRel::createPrototype((WebCore::JSSVGPathSegLinetoRel *)a1, (JSC::VM *)a2, v16);
    v28 = Prototype;
    LODWORD(v36) = 23;
    if ((Prototype & 0xFFFE000000000002) == 0)
    {
      v29 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)Prototype);
      if (v29)
        JSC::JSObject::didBecomePrototype(v29, (JSC::VM *)a1);
    }
    v30 = *v5;
    if (*v5 >= (unint64_t)v5[1])
    {
      v30 = v5[2];
      if ((v30 & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        v30 = JSC::LocalAllocator::allocateSlowCase();
        goto LABEL_26;
      }
      v35 = *(_QWORD *)(v30 + 8) ^ v5[3];
      v5[1] = v30 + HIDWORD(v35);
      v5[2] = v30 + (int)v35;
    }
    *v5 = v30 + 128;
LABEL_26:
    *(_DWORD *)v30 = 0;
    MEMORY[0x19AEA4278](v30, a1, a2, v28, &v36, &WebCore::JSSVGPathSegLinetoRel::s_info, 0, 0);
    if (*(_BYTE *)(a1 + 755))
      __dmb(0xAu);
    v26 = WebCore::cacheDOMStructure((JSCell *)a2, v30, (uint64_t)&WebCore::JSSVGPathSegLinetoRel::s_info);
    goto LABEL_29;
  }
LABEL_20:
  v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
  if (!v26)
    goto LABEL_21;
LABEL_29:
  v31 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v31, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6752) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGPathSegLinetoRelConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGPathSegLinetoRelPrototype::s_info != (char **)(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                     + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSegLinetoRel>,(WebCore::DOMConstructorID)844>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGPathSegLinetoRel_x(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(a2 + 24) + 28);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, (double)(int)v4 == v3)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

BOOL WebCore::setJSSVGPathSegLinetoRel_x(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  float v12;
  uint64_t v13;
  int v15;
  double v16;
  JSC::VM *v17;
  unint64_t v18;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGPathSegLinetoRel::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGPathSegLinetoRel::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v18 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v17 = v4;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v18, a1);
    v4 = v17;
    v11 = v16;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v11 < -3.40282347e38)
  {
    *(float *)&v15 = -INFINITY;
LABEL_28:
    v12 = *(float *)&v15;
    goto LABEL_19;
  }
  if (v11 > 3.40282347e38)
  {
    *(float *)&v15 = INFINITY;
    goto LABEL_28;
  }
  v12 = v11;
LABEL_19:
  *(float *)(v10 + 28) = v12;
  v13 = *(_QWORD *)(v10 + 16);
  if (v13)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, v10);
  return 1;
}

unint64_t WebCore::jsSVGPathSegLinetoRel_y(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(a2 + 24) + 32);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, (double)(int)v4 == v3)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

BOOL WebCore::setJSSVGPathSegLinetoRel_y(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  float v12;
  uint64_t v13;
  int v15;
  double v16;
  JSC::VM *v17;
  unint64_t v18;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGPathSegLinetoRel::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGPathSegLinetoRel::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v18 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v17 = v4;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v18, a1);
    v4 = v17;
    v11 = v16;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v11 < -3.40282347e38)
  {
    *(float *)&v15 = -INFINITY;
LABEL_28:
    v12 = *(float *)&v15;
    goto LABEL_19;
  }
  if (v11 > 3.40282347e38)
  {
    *(float *)&v15 = INFINITY;
    goto LABEL_28;
  }
  v12 = v11;
LABEL_19:
  *(float *)(v10 + 32) = v12;
  v13 = *(_QWORD *)(v10 + 16);
  if (v13)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, v10);
  return 1;
}

uint64_t WebCore::JSSVGPathSegLinetoRel::subspaceForImpl(WebCore::JSSVGPathSegLinetoRel *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 6832);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 6832))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 6832);
    *(_QWORD *)(v8 + 6832) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 6832);
  *(_QWORD *)(v3 + 6832) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSSVGPathSegLinetoVerticalAbs::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGPathSeg::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGPathSeg::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGPathSeg::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::JSSVGPathSegLinetoVerticalAbs::createPrototype(WebCore::JSSVGPathSegLinetoVerticalAbs *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  uint64_t v13;
  unint64_t Structure;
  JSC::Structure *v15;
  JSC::JSCell *v16;
  uint64_t v17;
  unint64_t v18;
  JSC::Structure *v19;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSSVGPathSeg::s_info + ~((_QWORD)&WebCore::JSSVGPathSeg::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGPathSeg::s_info + ~((_QWORD)&WebCore::JSSVGPathSeg::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSSVGPathSeg::s_info)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v12;
      if (v11 == &WebCore::JSSVGPathSeg::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v13)
  {
LABEL_7:
    Structure = WebCore::JSSVGPathSegPrototype::createStructure((uint64_t *)this, (uint64_t)a2, *((JSC::JSCell **)a2 + 82));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v16 = (JSC::JSCell *)WebCore::JSSVGPathSegPrototype::create(this, a2, Structure, v15);
    v17 = WebCore::JSSVGPathSeg::createStructure((uint64_t *)this, (uint64_t)a2, v16);
    v13 = WebCore::cacheDOMStructure((JSCell *)a2, v17, (uint64_t)&WebCore::JSSVGPathSeg::s_info);
  }
  v18 = WebCore::JSSVGPathSegLinetoVerticalAbsPrototype::createStructure((uint64_t *)this, (uint64_t)a2, *(JSC::JSCell **)(v13 + 48));
  *(_DWORD *)(v18 + 16) |= 0x80000u;
  return WebCore::JSSVGPathSegLinetoVerticalAbsPrototype::create(this, a2, v18, v19);
}

uint64_t WebCore::JSSVGPathSegLinetoVerticalAbsPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGPathSegLinetoVerticalAbsPrototype::create(WebCore::JSSVGPathSegLinetoVerticalAbsPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>(this, (uint64_t)&WebCore::JSSVGPathSegLinetoVerticalAbs::s_info, (uint64_t)&WebCore::JSSVGPathSegLinetoVerticalAbsPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSegLinetoVerticalAbs>,(WebCore::DOMConstructorID)845>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  unint64_t Prototype;
  unint64_t v28;
  JSC::JSObject *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6760);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSeg>,(WebCore::DOMConstructorID)829>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v33 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v33);
    v5[2] = SlowCase + (int)v33;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSegLinetoVerticalAbs>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v34 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v34);
    v10[2848] = v2 + (int)v34;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (!v18)
    goto LABEL_21;
  v19 = *(_DWORD *)(v18 - 8);
  v20 = ((unint64_t)&WebCore::JSSVGPathSegLinetoVerticalAbs::s_info
       + ~((_QWORD)&WebCore::JSSVGPathSegLinetoVerticalAbs::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGPathSegLinetoVerticalAbs::s_info
                                                                             + ~((_QWORD)&WebCore::JSSVGPathSegLinetoVerticalAbs::s_info << 32)) >> 22);
  v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
  v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
  v23 = v19 & ((v22 >> 31) ^ v22);
  v24 = *(char ***)(v18 + 16 * v23);
  if (v24 != &WebCore::JSSVGPathSegLinetoVerticalAbs::s_info)
  {
    v25 = 1;
    while (v24)
    {
      v23 = ((_DWORD)v23 + v25) & v19;
      v24 = *(char ***)(v18 + 16 * v23);
      ++v25;
      if (v24 == &WebCore::JSSVGPathSegLinetoVerticalAbs::s_info)
        goto LABEL_20;
    }
LABEL_21:
    Prototype = WebCore::JSSVGPathSegLinetoVerticalAbs::createPrototype((WebCore::JSSVGPathSegLinetoVerticalAbs *)a1, (JSC::VM *)a2, v16);
    v28 = Prototype;
    LODWORD(v36) = 23;
    if ((Prototype & 0xFFFE000000000002) == 0)
    {
      v29 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)Prototype);
      if (v29)
        JSC::JSObject::didBecomePrototype(v29, (JSC::VM *)a1);
    }
    v30 = *v5;
    if (*v5 >= (unint64_t)v5[1])
    {
      v30 = v5[2];
      if ((v30 & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        v30 = JSC::LocalAllocator::allocateSlowCase();
        goto LABEL_26;
      }
      v35 = *(_QWORD *)(v30 + 8) ^ v5[3];
      v5[1] = v30 + HIDWORD(v35);
      v5[2] = v30 + (int)v35;
    }
    *v5 = v30 + 128;
LABEL_26:
    *(_DWORD *)v30 = 0;
    MEMORY[0x19AEA4278](v30, a1, a2, v28, &v36, &WebCore::JSSVGPathSegLinetoVerticalAbs::s_info, 0, 0);
    if (*(_BYTE *)(a1 + 755))
      __dmb(0xAu);
    v26 = WebCore::cacheDOMStructure((JSCell *)a2, v30, (uint64_t)&WebCore::JSSVGPathSegLinetoVerticalAbs::s_info);
    goto LABEL_29;
  }
LABEL_20:
  v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
  if (!v26)
    goto LABEL_21;
LABEL_29:
  v31 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v31, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6760) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGPathSegLinetoVerticalAbsConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGPathSegLinetoVerticalAbsPrototype::s_info != (char **)(16
                                                                           * *(unsigned int *)(16
                                                                                             * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                             + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSegLinetoVerticalAbs>,(WebCore::DOMConstructorID)845>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGPathSegLinetoVerticalAbs_y(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(a2 + 24) + 28);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, (double)(int)v4 == v3)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

BOOL WebCore::setJSSVGPathSegLinetoVerticalAbs_y(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  float v12;
  uint64_t v13;
  int v15;
  double v16;
  JSC::VM *v17;
  unint64_t v18;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGPathSegLinetoVerticalAbs::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGPathSegLinetoVerticalAbs::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v18 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v17 = v4;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v18, a1);
    v4 = v17;
    v11 = v16;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v11 < -3.40282347e38)
  {
    *(float *)&v15 = -INFINITY;
LABEL_28:
    v12 = *(float *)&v15;
    goto LABEL_19;
  }
  if (v11 > 3.40282347e38)
  {
    *(float *)&v15 = INFINITY;
    goto LABEL_28;
  }
  v12 = v11;
LABEL_19:
  *(float *)(v10 + 28) = v12;
  v13 = *(_QWORD *)(v10 + 16);
  if (v13)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, v10);
  return 1;
}

uint64_t WebCore::JSSVGPathSegLinetoVerticalAbs::subspaceForImpl(WebCore::JSSVGPathSegLinetoVerticalAbs *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 6840);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 6840))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 6840);
    *(_QWORD *)(v8 + 6840) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 6840);
  *(_QWORD *)(v3 + 6840) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSSVGPathSegLinetoVerticalRel::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGPathSeg::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGPathSeg::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGPathSeg::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::JSSVGPathSegLinetoVerticalRel::createPrototype(WebCore::JSSVGPathSegLinetoVerticalRel *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  uint64_t v13;
  unint64_t Structure;
  JSC::Structure *v15;
  JSC::JSCell *v16;
  uint64_t v17;
  unint64_t v18;
  JSC::Structure *v19;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSSVGPathSeg::s_info + ~((_QWORD)&WebCore::JSSVGPathSeg::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGPathSeg::s_info + ~((_QWORD)&WebCore::JSSVGPathSeg::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSSVGPathSeg::s_info)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v12;
      if (v11 == &WebCore::JSSVGPathSeg::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v13)
  {
LABEL_7:
    Structure = WebCore::JSSVGPathSegPrototype::createStructure((uint64_t *)this, (uint64_t)a2, *((JSC::JSCell **)a2 + 82));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v16 = (JSC::JSCell *)WebCore::JSSVGPathSegPrototype::create(this, a2, Structure, v15);
    v17 = WebCore::JSSVGPathSeg::createStructure((uint64_t *)this, (uint64_t)a2, v16);
    v13 = WebCore::cacheDOMStructure((JSCell *)a2, v17, (uint64_t)&WebCore::JSSVGPathSeg::s_info);
  }
  v18 = WebCore::JSSVGPathSegLinetoVerticalRelPrototype::createStructure((uint64_t *)this, (uint64_t)a2, *(JSC::JSCell **)(v13 + 48));
  *(_DWORD *)(v18 + 16) |= 0x80000u;
  return WebCore::JSSVGPathSegLinetoVerticalRelPrototype::create(this, a2, v18, v19);
}

uint64_t WebCore::JSSVGPathSegLinetoVerticalRelPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGPathSegLinetoVerticalRelPrototype::create(WebCore::JSSVGPathSegLinetoVerticalRelPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>(this, (uint64_t)&WebCore::JSSVGPathSegLinetoVerticalRel::s_info, (uint64_t)&WebCore::JSSVGPathSegLinetoVerticalRelPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSegLinetoVerticalRel>,(WebCore::DOMConstructorID)846>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  unint64_t Prototype;
  unint64_t v28;
  JSC::JSObject *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6768);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSeg>,(WebCore::DOMConstructorID)829>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v33 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v33);
    v5[2] = SlowCase + (int)v33;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSegLinetoVerticalRel>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v34 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v34);
    v10[2848] = v2 + (int)v34;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (!v18)
    goto LABEL_21;
  v19 = *(_DWORD *)(v18 - 8);
  v20 = ((unint64_t)&WebCore::JSSVGPathSegLinetoVerticalRel::s_info
       + ~((_QWORD)&WebCore::JSSVGPathSegLinetoVerticalRel::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGPathSegLinetoVerticalRel::s_info
                                                                             + ~((_QWORD)&WebCore::JSSVGPathSegLinetoVerticalRel::s_info << 32)) >> 22);
  v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
  v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
  v23 = v19 & ((v22 >> 31) ^ v22);
  v24 = *(char ***)(v18 + 16 * v23);
  if (v24 != &WebCore::JSSVGPathSegLinetoVerticalRel::s_info)
  {
    v25 = 1;
    while (v24)
    {
      v23 = ((_DWORD)v23 + v25) & v19;
      v24 = *(char ***)(v18 + 16 * v23);
      ++v25;
      if (v24 == &WebCore::JSSVGPathSegLinetoVerticalRel::s_info)
        goto LABEL_20;
    }
LABEL_21:
    Prototype = WebCore::JSSVGPathSegLinetoVerticalRel::createPrototype((WebCore::JSSVGPathSegLinetoVerticalRel *)a1, (JSC::VM *)a2, v16);
    v28 = Prototype;
    LODWORD(v36) = 23;
    if ((Prototype & 0xFFFE000000000002) == 0)
    {
      v29 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)Prototype);
      if (v29)
        JSC::JSObject::didBecomePrototype(v29, (JSC::VM *)a1);
    }
    v30 = *v5;
    if (*v5 >= (unint64_t)v5[1])
    {
      v30 = v5[2];
      if ((v30 & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        v30 = JSC::LocalAllocator::allocateSlowCase();
        goto LABEL_26;
      }
      v35 = *(_QWORD *)(v30 + 8) ^ v5[3];
      v5[1] = v30 + HIDWORD(v35);
      v5[2] = v30 + (int)v35;
    }
    *v5 = v30 + 128;
LABEL_26:
    *(_DWORD *)v30 = 0;
    MEMORY[0x19AEA4278](v30, a1, a2, v28, &v36, &WebCore::JSSVGPathSegLinetoVerticalRel::s_info, 0, 0);
    if (*(_BYTE *)(a1 + 755))
      __dmb(0xAu);
    v26 = WebCore::cacheDOMStructure((JSCell *)a2, v30, (uint64_t)&WebCore::JSSVGPathSegLinetoVerticalRel::s_info);
    goto LABEL_29;
  }
LABEL_20:
  v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
  if (!v26)
    goto LABEL_21;
LABEL_29:
  v31 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v31, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6768) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGPathSegLinetoVerticalRelConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGPathSegLinetoVerticalRelPrototype::s_info != (char **)(16
                                                                           * *(unsigned int *)(16
                                                                                             * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                             + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSegLinetoVerticalRel>,(WebCore::DOMConstructorID)846>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGPathSegLinetoVerticalRel_y(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(a2 + 24) + 28);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, (double)(int)v4 == v3)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

BOOL WebCore::setJSSVGPathSegLinetoVerticalRel_y(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  float v12;
  uint64_t v13;
  int v15;
  double v16;
  JSC::VM *v17;
  unint64_t v18;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGPathSegLinetoVerticalRel::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGPathSegLinetoVerticalRel::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v18 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v17 = v4;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v18, a1);
    v4 = v17;
    v11 = v16;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v11 < -3.40282347e38)
  {
    *(float *)&v15 = -INFINITY;
LABEL_28:
    v12 = *(float *)&v15;
    goto LABEL_19;
  }
  if (v11 > 3.40282347e38)
  {
    *(float *)&v15 = INFINITY;
    goto LABEL_28;
  }
  v12 = v11;
LABEL_19:
  *(float *)(v10 + 28) = v12;
  v13 = *(_QWORD *)(v10 + 16);
  if (v13)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, v10);
  return 1;
}

uint64_t WebCore::JSSVGPathSegLinetoVerticalRel::subspaceForImpl(WebCore::JSSVGPathSegLinetoVerticalRel *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 6848);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 6848))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 6848);
    *(_QWORD *)(v8 + 6848) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 6848);
  *(_QWORD *)(v3 + 6848) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

BOOL WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSegList>::initializeProperties(uint64_t a1, uint64_t a2, JSC::JSCell **a3)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  unint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v13;

  v6 = a2 + 41952;
  JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, *(_QWORD *)(*(_QWORD *)(a2 + 41952) + 1768), 0xFFFE000000000000, 6);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8 = JSC::jsNontrivialString(a2, &v13);
  v9 = v13;
  v13 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  *(_QWORD *)(a1 + 32) = v8;
  if (a1 && v8 && *(_DWORD *)(a2 + 760) >= *(unsigned __int8 *)(a1 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a2 + 192), (const JSCell *)a1);
  JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, *(_QWORD *)(*(_QWORD *)v6 + 1968), v8, 6);
  v10 = *(_QWORD *)(*(_QWORD *)v6 + 2160);
  v11 = WebCore::getDOMStructure<WebCore::JSSVGPathSegList>((WebCore::JSSVGPathSegList *)a2, a3);
  return JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, v10, *(_QWORD *)(v11 + 48), 14);
}

WTF::StringImpl *WebCore::JSSVGPathSegListPrototype::finishCreation(WebCore::JSSVGPathSegListPrototype *this, JSC::VM *a2)
{
  unint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t Direct;
  WTF::StringImpl *v8;
  unint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<10u>(a2, (uint64_t)&WebCore::JSSVGPathSegList::s_info, (uint64_t)&WebCore::JSSVGPathSegListPrototypeTableValues, this);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2712);
  v5 = *(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28) + 672);
  v6 = (_DWORD *)MEMORY[0x1E0CBEBF0];
  *MEMORY[0x1E0CBEBF0] += 2;
  Direct = JSC::JSObject::getDirect(v5, a2, (unint64_t)v6);
  JSC::JSObject::putDirect((unsigned __int8 *)this, a2, v4, Direct, 4);
  if (*v6 == 2)
    WTF::StringImpl::destroy(MEMORY[0x1E0CBEBF0], v8);
  else
    *v6 -= 2;
  v9 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v10 = JSC::jsNontrivialString((uint64_t)a2, &v13);
  JSC::JSObject::putDirectWithoutTransition((int *)this, a2, v9, v10, 6);
  result = v13;
  v13 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_DWORD *WebCore::JSSVGPathSegList::destroy(WebCore::JSSVGPathSegList *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSSVGPathSegList::put(uint64_t a1, JSC *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v6;
  JSC::VM *v7;
  _WORD *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  char **v15;
  BOOL v16;
  _DWORD *v18;
  WebCore::SVGPathSegList *v19;
  char v20;
  JSC::JSGlobalObject *v21;
  WTF::StringImpl *v22;
  unsigned __int16 *v23;
  uint64_t v24;
  unsigned int v25;
  BOOL v26;
  WTF::StringImpl *v27;
  _DWORD *v28;
  JSValue v30;
  unsigned int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  unsigned int v36;
  _DWORD *v37;
  JSC::VM *v38;
  WTF::StringImpl *v39;
  int v40;
  char v41;

  if (*(_QWORD *)(a5 + 8) != a1)
    return JSC::JSObject::put();
  if (!a3)
    return JSC::JSObject::put();
  v6 = *(_DWORD *)(a3 + 16);
  if ((v6 & 0x20) != 0)
    return JSC::JSObject::put();
  v7 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v8 = *(_WORD **)(a3 + 8);
  v9 = *(unsigned int *)(a3 + 4);
  if ((v6 & 4) != 0)
  {
    if (!(_DWORD)v9)
      goto LABEL_56;
    v31 = *(unsigned __int8 *)v8 - 48;
    if (v31 <= 9)
      goto LABEL_60;
    goto LABEL_55;
  }
  if (!(_DWORD)v9)
  {
    v11 = 0;
    v10 = 0;
    goto LABEL_13;
  }
  v10 = (unsigned __int16)*v8 - 48;
  if (v10 > 9)
  {
LABEL_7:
    v11 = 0;
    v10 = 0;
LABEL_12:
    LODWORD(v9) = 0;
    goto LABEL_13;
  }
  if (v9 >= 2 && *v8 == 48)
  {
    v11 = 0;
    goto LABEL_12;
  }
  v23 = v8 + 1;
  v24 = v9 - 1;
  while (v24)
  {
    if (v10 <= 0x19999999)
    {
      v25 = *v23 - 48;
      if (v25 <= 9)
      {
        v26 = __CFADD__(v25, 10 * v10);
        v10 = v25 + 10 * v10;
        ++v23;
        --v24;
        if (!v26)
          continue;
      }
    }
    goto LABEL_7;
  }
  v16 = v10 == -1;
  LODWORD(v9) = v10 & 0xFFFFFF00;
  v10 = v10;
  v11 = 0x100000000;
  if (v16)
  {
    v11 = 0;
    v10 = 0;
    LODWORD(v9) = 0;
  }
LABEL_13:
  v12 = v9 | v10;
  if ((v11 & 0x100000000) != 0)
  {
    while (1)
    {
      v38 = v7;
      if ((a4 & 0xFFFE000000000002) != 0)
        goto LABEL_25;
      v13 = *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C);
      v14 = *(_DWORD *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C) != 0;
      v15 = (char **)(16 * v13);
      if ((_DWORD)v13)
        v16 = v15 == &WebCore::JSSVGPathSeg::s_info;
      else
        v16 = 1;
      if (!v16)
      {
        do
        {
          v15 = (char **)v15[2];
          v14 = v15 != 0;
        }
        while (v15 != &WebCore::JSSVGPathSeg::s_info && v15 != 0);
      }
      if (!v14 || (v18 = *(_DWORD **)(a4 + 24)) == 0)
      {
LABEL_25:
        JSC::throwTypeError();
        return 1;
      }
      v19 = *(WebCore::SVGPathSegList **)(a1 + 24);
      ++v18[2];
      v37 = v18;
      WebCore::SVGPathSegList::replaceItem((uint64_t)&v38, v19, (uint64_t)&v37, v12);
      if (!v40)
        break;
      if (v40 == 1)
      {
        v20 = 0;
        v21 = (JSC::JSGlobalObject *)v38;
        v22 = v39;
        v39 = 0;
        goto LABEL_38;
      }
      a1 = std::__throw_bad_variant_access[abi:sn180100]();
LABEL_60:
      if (v9 < 2 || v31)
      {
        v34 = v9 - 1;
        v35 = (unsigned __int8 *)v8 + 1;
        while (v34)
        {
          if (v31 > 0x19999999)
            goto LABEL_55;
          v36 = *v35 - 48;
          if (v36 > 9)
            goto LABEL_55;
          LODWORD(v9) = 0;
          v32 = 0;
          v33 = 0;
          v26 = __CFADD__(v36, 10 * v31);
          v31 = v36 + 10 * v31;
          --v34;
          ++v35;
          if (v26)
            goto LABEL_57;
        }
        if (v31 == -1)
          LODWORD(v9) = 0;
        else
          LODWORD(v9) = v31 & 0xFFFFFF00;
        if (v31 == -1)
          v32 = 0;
        else
          v32 = v31;
        if (v31 == -1)
          v33 = 0;
        else
          v33 = 0x100000000;
      }
      else
      {
LABEL_55:
        LODWORD(v9) = 0;
LABEL_56:
        v32 = 0;
        v33 = 0;
      }
LABEL_57:
      v12 = v32 | v9;
      if ((v33 & 0x100000000) == 0)
        return JSC::JSObject::put();
    }
    v21 = 0;
    v22 = 0;
    v20 = 1;
LABEL_38:
    ((void (*)(char *, JSC::VM **))off_1E32FA770[v40])(&v41, &v38);
    v28 = v37;
    v37 = 0;
    if (v28)
    {
      if (v28[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v28 + 8))(v28);
        if ((v20 & 1) != 0)
          return 1;
        goto LABEL_47;
      }
      --v28[2];
    }
    if ((v20 & 1) != 0)
      return 1;
LABEL_47:
    LOBYTE(v38) = (_BYTE)v21;
    v39 = v22;
    if (!*((_QWORD *)v7 + 2))
    {
      v30.super.isa = (Class)WebCore::createDOMException(a2, v21, (JSC::JSGlobalObject *)&v39);
      JSC::VM::throwException(v7, a2, v30);
      v22 = v39;
    }
    v39 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v27);
      else
        *(_DWORD *)v22 -= 2;
    }
    return 1;
  }
  return JSC::JSObject::put();
}

uint64_t WebCore::JSSVGPathSegList::putByIndex(uint64_t a1, WTF::StringImpl **a2, uint64_t a3, uint64_t a4)
{
  JSC::VM *v5;
  uint64_t v6;
  _BOOL4 v7;
  char **v8;
  BOOL v9;
  _DWORD *v11;
  WebCore::SVGPathSegList *v12;
  char v13;
  JSC::JSGlobalObject *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  _DWORD *v17;
  uint64_t v18;
  JSValue v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  _DWORD *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  int v27;
  char v28;

  v5 = a2[7];
  if ((_DWORD)a3 == -1)
  {
    JSC::Identifier::from();
    v18 = JSC::ordinarySetSlow();
    v22 = v25;
    v25 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v21);
      else
        *(_DWORD *)v22 -= 2;
    }
    return v18;
  }
  v25 = a2[7];
  if ((a4 & 0xFFFE000000000002) != 0)
    goto LABEL_13;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSSVGPathSeg::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSSVGPathSeg::s_info && v8 != 0);
  }
  if (!v7 || (v11 = *(_DWORD **)(a4 + 24)) == 0)
  {
LABEL_13:
    JSC::throwTypeError();
    return 1;
  }
  v12 = *(WebCore::SVGPathSegList **)(a1 + 24);
  ++v11[2];
  v24 = v11;
  WebCore::SVGPathSegList::replaceItem((uint64_t)&v25, v12, (uint64_t)&v24, a3);
  if (!v27)
  {
    v14 = 0;
    v15 = 0;
    v13 = 1;
LABEL_19:
    ((void (*)(char *, WTF::StringImpl **))off_1E32FA770[v27])(&v28, &v25);
    v17 = v24;
    v24 = 0;
    if (v17)
    {
      if (v17[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
        if ((v13 & 1) != 0)
          return 1;
        goto LABEL_26;
      }
      --v17[2];
    }
    if ((v13 & 1) != 0)
      return 1;
LABEL_26:
    LOBYTE(v25) = (_BYTE)v14;
    v26 = v15;
    if (!*((_QWORD *)v5 + 2))
    {
      v20.super.isa = (Class)WebCore::createDOMException((JSC *)a2, v14, (JSC::JSGlobalObject *)&v26);
      JSC::VM::throwException(v5, (JSC::JSGlobalObject *)a2, v20);
      v15 = v26;
    }
    v26 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v16);
      else
        *(_DWORD *)v15 -= 2;
    }
    return 1;
  }
  if (v27 == 1)
  {
    v13 = 0;
    v14 = (JSC::JSGlobalObject *)v25;
    v15 = v26;
    v26 = 0;
    goto LABEL_19;
  }
  v23 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::JSSVGPathSegList::deleteProperty(v23);
}

uint64_t WebCore::JSSVGPathSegList::deleteProperty(uint64_t a1, WebCore::JSDOMGlobalObject *a2, uint64_t a3)
{
  uint64_t v4;
  _BOOL4 v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  WebCore::JSDOMGlobalObject *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _WORD *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned __int16 *v25;
  uint64_t v26;
  unsigned int v27;
  BOOL v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  unsigned int v34;

  v4 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSDOMGlobalObject::s_info && v6 != 0);
  }
  v9 = *(_QWORD *)(a1 + 24);
  if (v5)
    v10 = a2;
  else
    v10 = 0;
  v11 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v10);
  if (v11)
  {
    v12 = v11;
    if (!*(_BYTE *)(v11 + 274))
    {
      v13 = *(_BYTE **)(v11 + 496);
      if (!v13)
        v13 = (_BYTE *)WebCore::Document::ensureQuirks((WebCore::Document *)(v12 - 192));
      if (*(_QWORD *)v13)
      {
        v14 = *(_QWORD *)(*(_QWORD *)v13 + 8);
        if (v14)
        {
          v15 = *(_QWORD *)(v14 + 680);
          if (*(_BYTE *)(v15 + 243))
          {
            if (!*(_BYTE *)(v15 + 242))
              goto LABEL_22;
          }
          else if ((*(_QWORD *)(v15 + 688) & 0x80000) == 0)
          {
            goto LABEL_22;
          }
          if (v13[65])
            return JSC::JSObject::deleteProperty();
        }
      }
    }
  }
LABEL_22:
  if (!a3)
    return JSC::JSObject::deleteProperty();
  v16 = *(_DWORD *)(a3 + 16);
  if ((v16 & 0x20) != 0)
    return JSC::JSObject::deleteProperty();
  v17 = *(_WORD **)(a3 + 8);
  v18 = *(unsigned int *)(a3 + 4);
  if ((v16 & 4) == 0)
  {
    if ((_DWORD)v18 && (v19 = (unsigned __int16)*v17 - 48, v19 <= 9) && (v18 < 2 || *v17 != 48))
    {
      v25 = v17 + 1;
      v26 = v18 - 1;
      while (v26)
      {
        if (v19 <= 0x19999999)
        {
          v27 = *v25 - 48;
          if (v27 <= 9)
          {
            v28 = __CFADD__(v27, 10 * v19);
            v19 = v27 + 10 * v19;
            ++v25;
            --v26;
            if (!v28)
              continue;
          }
        }
        goto LABEL_29;
      }
      v7 = v19 == -1;
      v22 = v19 & 0xFFFFFF00;
      v21 = v19;
      v20 = 0x100000000;
      if (v7)
      {
        v20 = 0;
        v21 = 0;
        v22 = 0;
      }
    }
    else
    {
LABEL_29:
      v20 = 0;
      v21 = 0;
      v22 = 0;
    }
    v23 = v22 | v21;
    if ((v20 & 0x100000000) != 0)
      return *(_DWORD *)(v9 + 44) <= v23;
    return JSC::JSObject::deleteProperty();
  }
  if (!(_DWORD)v18)
  {
    v30 = 0;
    goto LABEL_47;
  }
  v29 = *(unsigned __int8 *)v17 - 48;
  if (v29 > 9 || v18 >= 2 && *(_BYTE *)v17 == 48)
  {
LABEL_46:
    v30 = 0;
    LODWORD(v18) = 0;
LABEL_47:
    v31 = 0;
    goto LABEL_48;
  }
  v32 = v18 - 1;
  v33 = (unsigned __int8 *)v17 + 1;
  while (v32)
  {
    if (v29 > 0x19999999)
      goto LABEL_46;
    v34 = *v33 - 48;
    if (v34 > 9)
      goto LABEL_46;
    v30 = 0;
    LODWORD(v18) = 0;
    v31 = 0;
    v28 = __CFADD__(v34, 10 * v29);
    v29 = v34 + 10 * v29;
    --v32;
    ++v33;
    if (v28)
      goto LABEL_48;
  }
  if (v29 == -1)
    v30 = 0;
  else
    v30 = v29 & 0xFFFFFF00;
  if (v29 == -1)
    LODWORD(v18) = 0;
  else
    LODWORD(v18) = v29;
  if (v29 == -1)
    v31 = 0;
  else
    v31 = 0x100000000;
LABEL_48:
  v23 = v18 | v30;
  if ((v31 & 0x100000000) != 0)
    return *(_DWORD *)(v9 + 44) <= v23;
  return JSC::JSObject::deleteProperty();
}

uint64_t WebCore::JSSVGPathSegList::deletePropertyByIndex(WebCore::JSSVGPathSegList *this, JSC::JSCell *a2, JSC::JSGlobalObject *a3)
{
  uint64_t v6;
  _BOOL4 v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  WebCore::JSDOMGlobalObject *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;

  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSDOMGlobalObject::s_info && v8 != 0);
  }
  v11 = *((_QWORD *)this + 3);
  if (v7)
    v12 = a2;
  else
    v12 = 0;
  v13 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v12);
  if (!v13)
    return *(_DWORD *)(v11 + 44) <= a3;
  v14 = v13;
  if (*(_BYTE *)(v13 + 274))
    return *(_DWORD *)(v11 + 44) <= a3;
  v15 = *(_BYTE **)(v13 + 496);
  if (!v15)
    v15 = (_BYTE *)WebCore::Document::ensureQuirks((WebCore::Document *)(v14 - 192));
  if (!*(_QWORD *)v15)
    return *(_DWORD *)(v11 + 44) <= a3;
  v16 = *(_QWORD *)(*(_QWORD *)v15 + 8);
  if (!v16)
    return *(_DWORD *)(v11 + 44) <= a3;
  v17 = *(_QWORD *)(v16 + 680);
  if (*(_BYTE *)(v17 + 243))
  {
    if (!*(_BYTE *)(v17 + 242))
      return *(_DWORD *)(v11 + 44) <= a3;
  }
  else if ((*(_QWORD *)(v17 + 688) & 0x80000) == 0)
  {
    return *(_DWORD *)(v11 + 44) <= a3;
  }
  if (!v15[65])
    return *(_DWORD *)(v11 + 44) <= a3;
  return JSC::JSObject::deletePropertyByIndex(this, a2, a3);
}

uint64_t WebCore::JSSVGPathSegList::getOwnPropertySlot(uint64_t a1, JSC *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  int v9;
  _BYTE *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  unsigned __int16 *v34;
  uint64_t v35;
  unsigned int v36;
  BOOL v37;
  _DWORD *v38;
  unint64_t v39;
  uint64_t result;
  uint64_t v41;
  int v42;
  _BYTE *v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  unsigned __int16 *v47;
  uint64_t v48;
  unsigned int v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  BOOL v55;
  unsigned int v56;
  int v57;
  unsigned int v58;
  int v59;
  unint64_t v60;
  int v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  JSValue v70;
  unsigned int v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  unsigned __int8 *v76;
  unsigned int v77;
  uint64_t v78;
  unsigned __int8 *v79;
  unsigned int v80;
  int v81[2];
  WTF::StringImpl *v82;
  int v83;
  char v84[8];
  WTF::StringImpl *v85;
  int v86;
  char v87;

  v6 = *((_QWORD *)a2 + 7);
  if (!a3)
  {
    if ((*(_BYTE *)(a1 + 6) & 0x20) == 0)
      return 0;
    return JSC::JSObject::getOwnStaticPropertySlot();
  }
  v7 = a3;
  v9 = *(_DWORD *)(a3 + 16);
  if ((v9 & 0x20) != 0)
    goto LABEL_22;
  v10 = *(_BYTE **)(a3 + 8);
  v11 = *(unsigned int *)(a3 + 4);
  if ((v9 & 4) != 0)
  {
    if (!(_DWORD)v11)
      goto LABEL_132;
    v71 = *v10 - 48;
    if (v71 <= 9 && (v11 < 2 || *v10 != 48))
    {
      v75 = v11 - 1;
      v76 = v10 + 1;
      while (1)
      {
        if (!v75)
        {
          if (v71 == -1)
            v15 = 0;
          else
            v15 = v71 & 0xFFFFFF00;
          if (v71 == -1)
            LOBYTE(v11) = 0;
          else
            LOBYTE(v11) = v71;
          if (v71 == -1)
            v72 = 0;
          else
            v72 = 0x100000000;
          goto LABEL_122;
        }
        if (v71 > 0x19999999)
          break;
        v77 = *v76 - 48;
        if (v77 > 9)
          break;
        v15 = 0;
        LOBYTE(v11) = 0;
        v72 = 0;
        v37 = __CFADD__(v77, 10 * v71);
        v71 = v77 + 10 * v71;
        --v75;
        ++v76;
        if (v37)
          goto LABEL_122;
      }
    }
    v15 = 0;
    LOBYTE(v11) = 0;
    goto LABEL_121;
  }
  if (!(_DWORD)v11 || (v12 = *(unsigned __int16 *)v10 - 48, v12 > 9))
  {
LABEL_6:
    v13 = 0;
    LOBYTE(v12) = 0;
LABEL_7:
    v14 = 0;
    goto LABEL_8;
  }
  if (v11 >= 2 && *(_WORD *)v10 == 48)
  {
    v13 = 0;
    goto LABEL_7;
  }
  v34 = (unsigned __int16 *)(v10 + 2);
  v35 = v11 - 1;
  while (v35)
  {
    if (v12 <= 0x19999999)
    {
      v36 = *v34 - 48;
      if (v36 <= 9)
      {
        v37 = __CFADD__(v36, 10 * v12);
        v12 = v36 + 10 * v12;
        ++v34;
        --v35;
        if (!v37)
          continue;
      }
    }
    goto LABEL_6;
  }
  v55 = v12 == -1;
  v56 = v12 & 0xFFFFFF00;
  v13 = 0x100000000;
  if (v12 == -1)
  {
    v13 = 0;
    LOBYTE(v12) = 0;
  }
  if (v55)
    v14 = 0;
  else
    v14 = v56;
LABEL_8:
  v15 = v12;
  if ((v13 & 0x100000000) != 0)
  {
    do
    {
      v16 = *(_QWORD *)(a1 + 24);
      v17 = *(_DWORD *)(v16 + 44);
      if (!v17)
      {
        if (!*(_DWORD *)(*(_QWORD *)(v16 + 72) + 20))
          break;
        WebCore::buildSVGPathSegListFromByteStream(v16 + 64, *(_QWORD *)(a1 + 24), 1);
        v17 = *(_DWORD *)(v16 + 44);
      }
      v18 = v14 | v15;
      if (v17 <= v18)
      {
        v6 = *((_QWORD *)a2 + 7);
        break;
      }
      v7 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x28);
      v19 = *(_QWORD *)(a1 + 24);
      v20 = *(_DWORD *)(v19 + 44);
      if (!v20)
      {
        if (!*(_DWORD *)(*(_QWORD *)(v19 + 72) + 20))
          goto LABEL_41;
        WebCore::buildSVGPathSegListFromByteStream(v19 + 64, *(_QWORD *)(a1 + 24), 1);
        v20 = *(_DWORD *)(v19 + 44);
      }
      if (v20 > v18)
      {
        v84[0] = 1;
        v86 = 0;
        (*(void (**)(int *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v19 + 48))(v81, v19, v18);
        v21 = 0;
        goto LABEL_42;
      }
LABEL_41:
      v84[0] = 0;
      v21 = 1;
      v86 = 1;
      v85 = 0;
      LOBYTE(v81[0]) = 0;
      v82 = 0;
LABEL_42:
      v83 = v21;
      ((uint64_t (**)(char *, char *))off_1E32F83C8)[v21](&v87, v84);
      if (!v83)
      {
        v38 = *(_DWORD **)v81;
        *(_QWORD *)v81 = 0;
        v39 = WebCore::wrap<WebCore::SVGPathSeg>((uint64_t)a2, v7, v38);
        if (v38[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v38 + 8))(v38);
        else
          --v38[2];
        goto LABEL_45;
      }
      if (v83 == 1)
      {
        v68 = (WTF::StringImpl *)LOBYTE(v81[0]);
        v84[0] = v81[0];
        v69 = v82;
        v82 = 0;
        v85 = v69;
        if (!*(_QWORD *)(v6 + 16))
        {
          v70.super.isa = (Class)WebCore::createDOMException(a2, (JSC::JSGlobalObject *)LOBYTE(v81[0]), (JSC::JSGlobalObject *)&v85);
          JSC::VM::throwException((JSC::VM *)v6, a2, v70);
          v69 = v85;
        }
        v85 = 0;
        if (v69)
        {
          if (*(_DWORD *)v69 == 2)
            WTF::StringImpl::destroy(v69, v68);
          else
            *(_DWORD *)v69 -= 2;
        }
        v39 = 0;
LABEL_45:
        if (v83 != -1)
          ((void (*)(char *, int *))off_1E32FA770[v83])(v84, v81);
        if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
          return 0;
        *(_QWORD *)a4 = v39;
        *(_DWORD *)(a4 + 16) = 0;
        *(_QWORD *)(a4 + 32) = a1;
        result = 1;
        *(_BYTE *)(a4 + 49) = 1;
        return result;
      }
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_132:
      v15 = 0;
LABEL_121:
      v72 = 0;
LABEL_122:
      v14 = v11;
    }
    while ((v72 & 0x100000000) != 0);
  }
LABEL_22:
  if (!(v7 >> 4))
    goto LABEL_50;
  v22 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE);
  if (((v7 >> 4) & ~*(_DWORD *)(v22 + 0x20)) != 0)
    goto LABEL_50;
  v23 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x58);
  if (!v23)
  {
    v41 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x40);
    if (!v41 || *(_BYTE *)(v41 + 5) != 1 && *(_DWORD *)(v41 + 80) < 2u)
      goto LABEL_50;
    v23 = JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)), (JSC::VM *)v6);
    if (!v23)
      goto LABEL_50;
  }
  if (!*(_DWORD *)(v23 + 24))
    goto LABEL_50;
  v24 = *(_QWORD *)(v23 + 16);
  v25 = v24 & 0xFFFFFFFFFFFFFFFELL;
  v26 = *(unsigned int *)(v23 + 8);
  v27 = *(_DWORD *)(v7 + 16);
  if ((v24 & 1) != 0)
  {
    if ((v27 & 0x20) != 0)
      v27 = *(_DWORD *)(v7 + 32);
    v28 = *(_DWORD *)(v23 + 12);
    v29 = (v27 >> 8) & *(_QWORD *)&v28;
    v30 = *(unsigned __int8 *)(v25 + v29);
    if (!*(_BYTE *)(v25 + v29))
      goto LABEL_50;
    v31 = v25 + v26;
    v32 = 1;
    while (1)
    {
      v33 = *(_QWORD *)(v31 + 8 * (v30 - 1));
      if (v7 == (v33 & 0xFFFFFFFFFFFFLL))
        break;
      v29 = ((_DWORD)v29 + v32) & v28;
      v30 = *(unsigned __int8 *)(v25 + v29);
      ++v32;
      if (!*(_BYTE *)(v25 + v29))
        goto LABEL_50;
    }
    v50 = (v33 >> 16) & 0xFF00000000 | HIBYTE(v33);
  }
  else
  {
    if ((v27 & 0x20) != 0)
      v27 = *(_DWORD *)(v7 + 32);
    v57 = *(_DWORD *)(v23 + 12);
    v58 = v57 & (v27 >> 8);
    v59 = *(_DWORD *)(v25 + 4 * v58);
    if (!v59)
      goto LABEL_50;
    v60 = v25 + 4 * v26;
    v61 = 1;
    while (1)
    {
      v62 = (v59 - 1);
      if (*(_QWORD *)(v60 + 16 * v62) == v7)
        break;
      v58 = (v58 + v61) & v57;
      v59 = *(_DWORD *)(v25 + 4 * v58);
      ++v61;
      if (!v59)
        goto LABEL_50;
    }
    v50 = *(unsigned int *)(v60 + 16 * v62 + 8) | ((unint64_t)*(unsigned __int8 *)(v60 + 16 * v62 + 12) << 32);
  }
  if ((_DWORD)v50 != -1)
  {
    if ((int)v50 > 63)
    {
      v51 = *(_QWORD *)(a1 + 8) - 8;
      v52 = 0x3F00000000 - (v50 << 32);
    }
    else
    {
      v51 = a1 + 16;
      v52 = v50 << 32;
    }
    v53 = *(_QWORD *)(v51 + (v52 >> 29));
    if ((v53 & 0xFFFE000000000002) != 0)
      goto LABEL_75;
    v54 = *(unsigned __int8 *)(v53 + 5);
    if (v54 == 6)
    {
      v63 = *(_DWORD *)(v22 + 16) & 3;
      v65 = *(_QWORD *)(v53 + 8);
      v64 = *(_QWORD *)(v53 + 16);
      if (MEMORY[0x1E0CBE830] == 16 * *(unsigned int *)(16 * (*(_DWORD *)v53 & 0xFFFFFFFE) + 0x4C))
      {
        v67 = *(_QWORD *)(v53 + 24);
        v66 = *(_QWORD *)(v53 + 32);
        *(_QWORD *)a4 = v65;
        *(_QWORD *)(a4 + 8) = v64;
        *(_DWORD *)(a4 + 16) = HIDWORD(v50);
        *(_QWORD *)(a4 + 32) = a1;
        *(_BYTE *)(a4 + 49) = 3;
        result = 1;
        if (v63 != 2)
          *(_BYTE *)(a4 + 48) = 1;
        *(_BYTE *)(a4 + 51) = 1;
        *(_QWORD *)(a4 + 72) = v67;
        *(_QWORD *)(a4 + 80) = v66;
      }
      else
      {
        *(_QWORD *)a4 = v65;
        *(_QWORD *)(a4 + 8) = v64;
        *(_DWORD *)(a4 + 16) = HIDWORD(v50);
        *(_QWORD *)(a4 + 32) = a1;
        result = 1;
        *(_BYTE *)(a4 + 49) = 3;
        if (v63 != 2)
          *(_BYTE *)(a4 + 48) = 1;
      }
      return result;
    }
    if (v54 != 5)
    {
LABEL_75:
      *(_QWORD *)a4 = v53;
      *(_QWORD *)(a4 + 32) = a1;
      *(_DWORD *)(a4 + 16) = HIDWORD(v50);
      *(_DWORD *)(a4 + 20) = v50;
      result = 1;
      *(_WORD *)(a4 + 48) = 257;
      return result;
    }
    JSC::JSObject::fillGetterPropertySlot();
    return 1;
  }
LABEL_50:
  if ((*(_BYTE *)(a1 + 6) & 0x20) != 0 && (JSC::JSObject::getOwnStaticPropertySlot() & 1) != 0)
    return 1;
  v42 = *(_DWORD *)(v7 + 16);
  if ((v42 & 0x20) != 0)
    return 0;
  v43 = *(_BYTE **)(v7 + 8);
  v44 = *(unsigned int *)(v7 + 4);
  if ((v42 & 4) != 0)
  {
    if (!(_DWORD)v44 || (v73 = *v43 - 48, v73 > 9) || v44 >= 2 && *v43 == 48)
    {
LABEL_128:
      v74 = 0;
    }
    else
    {
      v78 = v44 - 1;
      v79 = v43 + 1;
      while (v78)
      {
        if (v73 > 0x19999999)
          goto LABEL_128;
        v80 = *v79 - 48;
        if (v80 > 9)
          goto LABEL_128;
        v74 = 0;
        v37 = __CFADD__(v80, 10 * v73);
        v73 = v80 + 10 * v73;
        --v78;
        ++v79;
        if (v37)
          goto LABEL_129;
      }
      v74 = 0x100000000;
      if (v73 == -1)
        v74 = 0;
    }
LABEL_129:
    if ((v74 & 0x100000000) == 0)
      return 0;
  }
  else
  {
    if ((_DWORD)v44
      && (v45 = *(unsigned __int16 *)v43 - 48, v45 <= 9)
      && (v44 < 2 || *(_WORD *)v43 != 48))
    {
      v47 = (unsigned __int16 *)(v43 + 2);
      v48 = v44 - 1;
      while (v48)
      {
        if (v45 <= 0x19999999)
        {
          v49 = *v47 - 48;
          if (v49 <= 9)
          {
            v37 = __CFADD__(v49, 10 * v45);
            v45 = v49 + 10 * v45;
            ++v47;
            --v48;
            if (!v37)
              continue;
          }
        }
        goto LABEL_57;
      }
      v55 = v45 == -1;
      v46 = 0x100000000;
      if (v55)
        v46 = 0;
    }
    else
    {
LABEL_57:
      v46 = 0;
    }
    if ((v46 & 0x100000000) == 0)
      return 0;
  }
  return JSC::JSObject::getOwnPropertySlotByIndex();
}

uint64_t WebCore::JSSVGPathSegList::getOwnPropertySlotByIndex(WebCore::JSSVGPathSegList *this, JSC::JSObject *a2, JSC::JSGlobalObject *a3, uint64_t a4, JSC::PropertySlot *a5)
{
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  uint64_t result;
  _DWORD *v17;
  unint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  JSValue v21;
  uint64_t v22;
  int v23[2];
  WTF::StringImpl *v24;
  int v25;
  char v26[8];
  WTF::StringImpl *v27;
  int v28;
  char v29;

  if ((_DWORD)a3 == -1)
    return JSC::JSObject::getOwnPropertySlotByIndex();
  v9 = *((_QWORD *)a2 + 7);
  v10 = *((_QWORD *)this + 3);
  v11 = *(_DWORD *)(v10 + 44);
  if (!v11)
  {
    if (!*(_DWORD *)(*(_QWORD *)(v10 + 72) + 20))
      return JSC::JSObject::getOwnPropertySlotByIndex();
    WebCore::buildSVGPathSegListFromByteStream(v10 + 64, *((_QWORD *)this + 3), 1);
    v11 = *(_DWORD *)(v10 + 44);
  }
  if (v11 <= a3)
    return JSC::JSObject::getOwnPropertySlotByIndex();
  v12 = *(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28);
  v13 = *((_QWORD *)this + 3);
  v14 = *(_DWORD *)(v13 + 44);
  if (!v14)
  {
    if (!*(_DWORD *)(*(_QWORD *)(v13 + 72) + 20))
      goto LABEL_12;
    WebCore::buildSVGPathSegListFromByteStream(v13 + 64, *((_QWORD *)this + 3), 1);
    v14 = *(_DWORD *)(v13 + 44);
  }
  if (v14 > a3)
  {
    v26[0] = 1;
    v28 = 0;
    (*(void (**)(int *__return_ptr, uint64_t, JSC::JSGlobalObject *))(*(_QWORD *)v13 + 48))(v23, v13, a3);
    v15 = 0;
    goto LABEL_13;
  }
LABEL_12:
  v26[0] = 0;
  v15 = 1;
  v28 = 1;
  v27 = 0;
  LOBYTE(v23[0]) = 0;
  v24 = 0;
LABEL_13:
  v25 = v15;
  ((uint64_t (**)(char *, char *))off_1E32F83C8)[v15](&v29, v26);
  if (v25)
  {
    if (v25 != 1)
    {
      v22 = std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::JSSVGPathSegList::getOwnPropertyNames(v22);
    }
    v19 = (WTF::StringImpl *)LOBYTE(v23[0]);
    v26[0] = v23[0];
    v20 = v24;
    v24 = 0;
    v27 = v20;
    if (!*(_QWORD *)(v9 + 16))
    {
      v21.super.isa = (Class)WebCore::createDOMException(a2, (JSC::JSGlobalObject *)LOBYTE(v23[0]), (JSC::JSGlobalObject *)&v27);
      JSC::VM::throwException((JSC::VM *)v9, a2, v21);
      v20 = v27;
    }
    v27 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v19);
      else
        *(_DWORD *)v20 -= 2;
    }
    v18 = 0;
  }
  else
  {
    v17 = *(_DWORD **)v23;
    *(_QWORD *)v23 = 0;
    v18 = WebCore::wrap<WebCore::SVGPathSeg>((uint64_t)a2, v12, v17);
    if (v17[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
    else
      --v17[2];
  }
  if (v25 != -1)
    ((void (*)(char *, int *))off_1E32FA770[v25])(v26, v23);
  if (*(_DWORD *)(v9 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9) & 1) != 0)
    return 0;
  *(_QWORD *)a4 = v18;
  *(_DWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 32) = this;
  result = 1;
  *(_BYTE *)(a4 + 49) = 1;
  return result;
}

uint64_t WebCore::JSSVGPathSegList::getOwnPropertyNames(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  unsigned int v33;
  int v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45[2];
  char v46;
  WTF::StringImpl *v47;

  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_DWORD *)(v4 + 44);
  if (v5
    || *(_DWORD *)(*(_QWORD *)(v4 + 72) + 20)
    && (WebCore::buildSVGPathSegListFromByteStream(v4 + 64, v4, 1), (v5 = *(_DWORD *)(v4 + 44)) != 0))
  {
    v6 = 0;
    v7 = a3 + 1;
    while (1)
    {
      JSC::Identifier::from();
      v9 = v44;
      v47 = v44;
      v10 = *((_DWORD *)v44 + 4);
      if ((v10 & 0x20) != 0)
      {
        if ((a3[3] & 1) == 0 || *((_BYTE *)a3 + 25) && (*((_BYTE *)v44 + 36) & 4) != 0)
          goto LABEL_60;
      }
      else if ((a3[3] & 2) == 0)
      {
        goto LABEL_60;
      }
      v11 = *a3;
      v12 = *(unsigned int *)(*a3 + 20);
      if (v12 <= 0x13)
      {
        if ((_DWORD)v12)
        {
          v13 = *(WTF::StringImpl ***)(v11 + 8);
          while (*v13 != v44)
          {
            ++v13;
            if (!--v12)
              goto LABEL_19;
          }
          goto LABEL_60;
        }
LABEL_19:
        if ((v10 & 0x20) != 0)
        {
          v34 = *(_DWORD *)v9 + 2;
        }
        else
        {
          if ((v10 & 0x10) != 0)
          {
            *(_DWORD *)v9 += 2;
          }
          else
          {
            WTF::AtomStringImpl::addSlowCase();
            v9 = v45[0];
          }
          v34 = *(_DWORD *)v9;
          *(_DWORD *)v9 += 2;
          if (!v34)
          {
            WTF::StringImpl::destroy(v9, v8);
LABEL_54:
            v35 = (uint64_t *)(v11 + 8);
            v45[0] = v9;
            v36 = *(unsigned int *)(v11 + 20);
            if ((_DWORD)v36 == *(_DWORD *)(v11 + 16))
            {
              v37 = (uint64_t *)WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v35, v36 + 1, (unint64_t)v45);
              v36 = *(unsigned int *)(v11 + 20);
              v38 = *(_QWORD *)(v11 + 8);
              v39 = *v37;
              *v37 = 0;
              *(_QWORD *)(v38 + 8 * v36) = v39;
            }
            else
            {
              v40 = *v35;
              v45[0] = 0;
              *(_QWORD *)(v40 + 8 * v36) = v9;
            }
            *(_DWORD *)(v11 + 20) = v36 + 1;
            v41 = v45[0];
            v45[0] = 0;
            if (v41)
            {
              if (*(_DWORD *)v41 == 2)
                WTF::StringImpl::destroy(v41, v8);
              else
                *(_DWORD *)v41 -= 2;
            }
            goto LABEL_60;
          }
        }
        *(_DWORD *)v9 = v34;
        goto LABEL_54;
      }
      if (!*v7 || !*(_DWORD *)(*v7 - 12))
        break;
LABEL_17:
      WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add(a3 + 1, (uint64_t *)&v47, (uint64_t)v45);
      if (v46)
      {
        v9 = v47;
        v11 = *a3;
        v10 = *((_DWORD *)v47 + 4);
        goto LABEL_19;
      }
LABEL_60:
      v42 = v44;
      v44 = 0;
      if (v42)
      {
        if (*(_DWORD *)v42 == 2)
          WTF::StringImpl::destroy(v42, v8);
        else
          *(_DWORD *)v42 -= 2;
      }
      if (++v6 == v5)
        return JSC::JSObject::getOwnPropertyNames();
    }
    v14 = *(uint64_t **)(v11 + 8);
    v15 = &v14[v12];
    while (1)
    {
      v16 = *v14;
      v17 = *v7;
      if (*v7
        || (WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(a3 + 1, 8u, 0), (v17 = *v7) != 0))
      {
        v18 = *(_DWORD *)(v17 - 8);
      }
      else
      {
        v18 = 0;
      }
      v19 = (~(v16 << 32) + v16) ^ ((unint64_t)(~(v16 << 32) + v16) >> 22);
      v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
      v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
      v22 = v18 & ((v21 >> 31) ^ v21);
      v23 = (uint64_t *)(v17 + 8 * v22);
      v24 = *v23;
      if (*v23)
      {
        v25 = 0;
        v26 = 1;
        while (v24 != v16)
        {
          if (v24 == -1)
            v25 = v23;
          v22 = (v22 + v26) & v18;
          v23 = (uint64_t *)(v17 + 8 * v22);
          v24 = *v23;
          ++v26;
          if (!*v23)
          {
            if (v25)
            {
              *v25 = 0;
              --*(_DWORD *)(*v7 - 16);
              v23 = v25;
            }
            goto LABEL_34;
          }
        }
        goto LABEL_47;
      }
LABEL_34:
      *v23 = v16;
      v27 = *v7;
      v28 = *v7 ? *(_DWORD *)(v27 - 12) + 1 : 1;
      *(_DWORD *)(v27 - 12) = v28;
      v29 = *v7;
      v30 = *v7 ? *(_DWORD *)(v29 - 12) : 0;
      v31 = (*(_DWORD *)(v29 - 16) + v30);
      v32 = *(unsigned int *)(v29 - 4);
      if (v32 > 0x400)
        break;
      if (3 * v32 <= 4 * v31)
      {
        if ((_DWORD)v32)
          goto LABEL_43;
        v33 = 8;
        goto LABEL_46;
      }
LABEL_47:
      if (++v14 == v15)
        goto LABEL_17;
    }
    if (v32 > 2 * v31)
      goto LABEL_47;
LABEL_43:
    v33 = (_DWORD)v32 << (6 * *(_DWORD *)(v29 - 12) >= (2 * v32));
LABEL_46:
    WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(a3 + 1, v33, v23);
    goto LABEL_47;
  }
  return JSC::JSObject::getOwnPropertyNames();
}

uint64_t WebCore::JSSVGPathSegList::defineOwnProperty(uint64_t a1, JSC *a2, uint64_t a3, JSC::PropertyDescriptor *this, int a5)
{
  JSC::VM *v9;
  int v10;
  _BYTE *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 v20;
  char **v21;
  BOOL v22;
  unsigned __int16 *v25;
  uint64_t v26;
  unsigned int v27;
  BOOL v28;
  _DWORD *v29;
  WebCore::SVGPathSegList *v30;
  char v31;
  JSC::JSGlobalObject *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  _DWORD *v35;
  JSValue v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  unsigned __int8 *v42;
  unsigned int v43;
  __int128 v44;
  __int128 v45;
  JSC::VM *v46;
  _DWORD *v47;
  char v48;

  v9 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v46 = v9;
  if (!a3)
    goto LABEL_58;
  v10 = *(_DWORD *)(a3 + 16);
  if ((v10 & 0x20) != 0)
    goto LABEL_58;
  v11 = *(_BYTE **)(a3 + 8);
  v12 = *(unsigned int *)(a3 + 4);
  if ((v10 & 4) != 0)
  {
    if (!(_DWORD)v12)
      goto LABEL_60;
    v37 = *v11 - 48;
    if (v37 <= 9 && (v12 < 2 || *v11 != 48))
    {
      v41 = v12 - 1;
      v42 = v11 + 1;
      while (1)
      {
        if (!v41)
        {
          if (v37 == -1)
            v38 = 0;
          else
            v38 = v37 & 0xFFFFFF00;
          if (v37 == -1)
            LODWORD(v12) = 0;
          else
            LODWORD(v12) = v37;
          if (v37 == -1)
            v39 = 0;
          else
            v39 = 0x100000000;
          goto LABEL_57;
        }
        if (v37 > 0x19999999)
          break;
        v43 = *v42 - 48;
        if (v43 > 9)
          break;
        v38 = 0;
        LODWORD(v12) = 0;
        v39 = 0;
        v28 = __CFADD__(v43, 10 * v37);
        v37 = v43 + 10 * v37;
        --v41;
        ++v42;
        if (v28)
          goto LABEL_57;
      }
    }
    v38 = 0;
    LODWORD(v12) = 0;
    goto LABEL_56;
  }
  if ((_DWORD)v12 && (v13 = *(unsigned __int16 *)v11 - 48, v13 <= 9) && (v12 < 2 || *(_WORD *)v11 != 48))
  {
    v25 = (unsigned __int16 *)(v11 + 2);
    v26 = v12 - 1;
    while (v26)
    {
      if (v13 <= 0x19999999)
      {
        v27 = *v25 - 48;
        if (v27 <= 9)
        {
          v28 = __CFADD__(v27, 10 * v13);
          v13 = v27 + 10 * v13;
          ++v25;
          --v26;
          if (!v28)
            continue;
        }
      }
      goto LABEL_8;
    }
    v22 = v13 == -1;
    v16 = v13 & 0xFFFFFF00;
    v15 = v13;
    v14 = 0x100000000;
    if (v22)
    {
      v14 = 0;
      v15 = 0;
      v16 = 0;
    }
  }
  else
  {
LABEL_8:
    v14 = 0;
    v15 = 0;
    v16 = 0;
  }
  v17 = v16 | v15;
  if ((v14 & 0x100000000) != 0)
  {
    while ((JSC::PropertyDescriptor::isDataDescriptor(this) & 1) != 0)
    {
      v18 = *(_QWORD *)this;
      *(_QWORD *)&v44 = *((_QWORD *)a2 + 7);
      if ((v18 & 0xFFFE000000000002) != 0)
        goto LABEL_22;
      v19 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
      v20 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
      v21 = (char **)(16 * v19);
      if ((_DWORD)v19)
        v22 = v21 == &WebCore::JSSVGPathSeg::s_info;
      else
        v22 = 1;
      if (!v22)
      {
        do
        {
          v21 = (char **)v21[2];
          v20 = v21 != 0;
        }
        while (v21 != &WebCore::JSSVGPathSeg::s_info && v21 != 0);
      }
      if (!v20 || (v29 = *(_DWORD **)(v18 + 24)) == 0)
      {
LABEL_22:
        JSC::throwTypeError();
        return 1;
      }
      v30 = *(WebCore::SVGPathSegList **)(a1 + 24);
      ++v29[2];
      v47 = v29;
      WebCore::SVGPathSegList::replaceItem((uint64_t)&v44, v30, (uint64_t)&v47, v17);
      if (!(_DWORD)v45)
      {
        v32 = 0;
        v33 = 0;
        v31 = 1;
LABEL_38:
        ((void (*)(char *, __int128 *))off_1E32FA770[v45])(&v48, &v44);
        v35 = v47;
        v47 = 0;
        if (v35)
        {
          if (v35[2] != 1)
          {
            --v35[2];
            goto LABEL_41;
          }
          (*(void (**)(_DWORD *))(*(_QWORD *)v35 + 8))(v35);
          if ((v31 & 1) != 0)
            return 1;
        }
        else
        {
LABEL_41:
          if ((v31 & 1) != 0)
            return 1;
        }
        LOBYTE(v44) = (_BYTE)v32;
        *((_QWORD *)&v44 + 1) = v33;
        if (!*((_QWORD *)v9 + 2))
        {
          v36.super.isa = (Class)WebCore::createDOMException(a2, v32, (JSC::JSGlobalObject *)((char *)&v44 + 8));
          JSC::VM::throwException(v9, a2, v36);
          v33 = (WTF::StringImpl *)*((_QWORD *)&v44 + 1);
        }
        *((_QWORD *)&v44 + 1) = 0;
        if (v33)
        {
          if (*(_DWORD *)v33 == 2)
            WTF::StringImpl::destroy(v33, v34);
          else
            *(_DWORD *)v33 -= 2;
        }
        return 1;
      }
      if ((_DWORD)v45 == 1)
      {
        v31 = 0;
        v32 = (JSC::JSGlobalObject *)v44;
        v33 = (WTF::StringImpl *)*((_QWORD *)&v44 + 1);
        *((_QWORD *)&v44 + 1) = 0;
        goto LABEL_38;
      }
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_60:
      v38 = 0;
LABEL_56:
      v39 = 0;
LABEL_57:
      v17 = v12 | v38;
      if ((v39 & 0x100000000) == 0)
        goto LABEL_58;
    }
    if (a5)
      JSC::throwTypeError();
    return 0;
  }
  else
  {
LABEL_58:
    v40 = *((_OWORD *)this + 1);
    v44 = *(_OWORD *)this;
    v45 = v40;
    return JSC::JSObject::defineOwnProperty();
  }
}

uint64_t WebCore::JSSVGPathSegList::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::JSSVGPathSegList::createPrototype(WebCore::JSSVGPathSegList *this, JSC::JSCell **a2, WebCore::JSDOMGlobalObject *a3)
{
  unint64_t v4;
  WebCore::JSDOMGlobalObject *v5;
  JSC::Structure *v6;

  v4 = JSC::Structure::create((uint64_t *)this, (int)a2, a2[82]);
  *(_DWORD *)(v4 + 16) |= 0x80000u;
  return WebCore::JSSVGPathSegListPrototype::create(this, v4, v5, v6);
}

unint64_t WebCore::JSSVGPathSegListPrototype::create(WebCore::JSSVGPathSegListPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  unint64_t v6;
  int v7;

  v6 = JSC::allocateCell<WebCore::JSAbstractRangePrototype>((uint64_t)this);
  v7 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)v6 = a2 >> 4;
  *(_DWORD *)(v6 + 4) = v7;
  *(_QWORD *)(v6 + 8) = 0;
  WebCore::JSSVGPathSegListPrototype::finishCreation((WebCore::JSSVGPathSegListPrototype *)v6, this);
  return v6;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSegList>,(WebCore::DOMConstructorID)847>(uint64_t a1, uint64_t a2)
{
  unint64_t result;
  uint64_t Structure;
  JSC::Heap *v6;
  unint64_t v7;

  result = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6776);
  if (!result)
  {
    Structure = WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSegList>::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 664));
    result = WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSegList>::create(a1, Structure, (JSC::JSCell **)a2);
    *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6776) = result;
    if (result)
    {
      if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
      {
        v6 = (JSC::Heap *)(a1 + 192);
        v7 = result;
        JSC::Heap::writeBarrierSlowPath(v6, (const JSCell *)a2);
        return v7;
      }
    }
  }
  return result;
}

unint64_t WebCore::jsSVGPathSegListConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGPathSegListPrototype::s_info != (char **)(16
                                                              * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSegList>,(WebCore::DOMConstructorID)847>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsSVGPathSegList_length(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;

  v2 = *(_QWORD *)(a2 + 24);
  v3 = *(_DWORD *)(v2 + 44);
  if (!v3)
  {
    v3 = *(_DWORD *)(*(_QWORD *)(v2 + 72) + 20);
    if (!v3)
      return v3 | 0xFFFE000000000000;
    WebCore::buildSVGPathSegListFromByteStream(v2 + 64, *(_QWORD *)(a2 + 24), 1);
    v3 = *(_DWORD *)(v2 + 44);
  }
  if ((v3 & 0x80000000) == 0)
    return v3 | 0xFFFE000000000000;
  return COERCE__INT64((double)v3) + 0x2000000000000;
}

uint64_t WebCore::jsSVGPathSegList_numberOfItems(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;

  v2 = *(_QWORD *)(a2 + 24);
  v3 = *(_DWORD *)(v2 + 44);
  if (!v3)
  {
    v3 = *(_DWORD *)(*(_QWORD *)(v2 + 72) + 20);
    if (!v3)
      return v3 | 0xFFFE000000000000;
    WebCore::buildSVGPathSegListFromByteStream(v2 + 64, *(_QWORD *)(a2 + 24), 1);
    v3 = *(_DWORD *)(v2 + 44);
  }
  if ((v3 & 0x80000000) == 0)
    return v3 | 0xFFFE000000000000;
  return COERCE__INT64((double)v3) + 0x2000000000000;
}

uint64_t WebCore::JSSVGPathSegListOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

_QWORD *WebCore::JSSVGPathSegListOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::wrap<WebCore::SVGPathSegList>(uint64_t a1, WTF *a2)
{
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  WTF *v10;
  int v11;
  uint64_t v12;
  unint64_t SlowCase;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  void *v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *Allocator;
  unint64_t v37;
  _QWORD *v38;
  WTF *v39;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 3320) + 32);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 - 8);
    v6 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
    v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
    v9 = v5 & ((v8 >> 31) ^ v8);
    v10 = *(WTF **)(v4 + 16 * v9);
    if (v10 == a2)
    {
LABEL_6:
      v12 = *(_QWORD *)(v4 + 16 * v9 + 8);
      if (v12)
      {
        if ((*(_BYTE *)(v12 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v12;
          if (*(_QWORD *)v12)
            return SlowCase;
        }
      }
    }
    else
    {
      v11 = 1;
      while (v10)
      {
        v9 = ((_DWORD)v9 + v11) & v5;
        v10 = *(WTF **)(v4 + 16 * v9);
        ++v11;
        if (v10 == a2)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a2 + 2);
  if (*(void (***)(WebCore::SVGPathSegList *__hidden))a2 != off_1E32FFB80)
  {
    __break(0xC471u);
    JUMPOUT(0x194F29408);
  }
  v14 = WebCore::getDOMStructure<WebCore::JSSVGPathSegList>(*(WebCore::JSSVGPathSegList **)(a1 + 56), (JSC::JSCell **)a1);
  v15 = *(_QWORD *)(a1 + 56);
  v16 = *(_QWORD *)(v15 + 41456);
  v17 = *(_QWORD *)(v16 + 23536);
  v18 = *(_QWORD **)(v17 + 6856);
  if (!v18)
  {
    v19 = *(_QWORD *)(v16 + 22648);
    if (__ldaxr((unsigned __int8 *)v19))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v19))
    {
      goto LABEL_15;
    }
    MEMORY[0x19AEA534C](v19);
LABEL_15:
    v21 = *(_QWORD *)(v19 + 2824);
    if (!*(_QWORD *)(v21 + 6856))
    {
      v22 = WTF::fastMalloc((WTF *)0xF8);
      WTF::CString::CString((WTF::CString *)&v39, "IsoSpace T");
      v38 = 0;
      MEMORY[0x19AEA3204](v22, &v39, v15 + 192, v15 + 1872, 32, 8, &v38);
      v24 = (uint64_t)v38;
      v38 = 0;
      if (v24)
        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
      v25 = v39;
      v39 = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 1)
          WTF::fastFree(v25, v23);
        else
          --*(_DWORD *)v25;
      }
      v26 = *(_QWORD *)(v21 + 6856);
      *(_QWORD *)(v21 + 6856) = v22;
      if (v26)
        (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
    }
    v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
    JSC::GCClient::IsoSubspace::IsoSubspace();
    v28 = *(_QWORD *)(v17 + 6856);
    *(_QWORD *)(v17 + 6856) = v18;
    if (v28)
    {
      v29 = (WTF *)MEMORY[0x19AEA3528](v28, v27);
      WTF::fastFree(v29, v30);
    }
    v31 = __ldxr((unsigned __int8 *)v19);
    if (v31 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v19))
        goto LABEL_30;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v19);
  }
LABEL_30:
  SlowCase = v18[3];
  if (SlowCase >= v18[4])
  {
    SlowCase = v18[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_32;
    }
    v37 = *(_QWORD *)(SlowCase + 8) ^ v18[6];
    v18[4] = SlowCase + HIDWORD(v37);
    v18[5] = SlowCase + (int)v37;
  }
  v18[3] = SlowCase + 32;
LABEL_32:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v14);
  *(_QWORD *)(SlowCase + 24) = a2;
  if (*(_BYTE *)(v15 + 755))
    __dmb(0xAu);
  v32 = *(_QWORD *)(a1 + 3320);
  if ((byte_1ECE81668 & 1) == 0)
  {
    qword_1ECE81660 = (uint64_t)&off_1E32F7650;
    byte_1ECE81668 = 1;
  }
  v39 = a2;
  if ((SlowCase & 8) != 0)
    v33 = (SlowCase - 112) | 1;
  else
    v33 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v33 & 1) != 0)
    v34 = v33 + 47;
  else
    v34 = *(_QWORD *)v33 + 32;
  Allocator = *(_QWORD **)(v34 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v34 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1ECE81660;
  Allocator[2] = v32;
  v38 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v32 + 32), (uint64_t *)&v39, (uint64_t *)&v38);
  if (v38)
    v38[1] = 3;
  return SlowCase;
}

uint64_t WebCore::JSSVGPathSegMovetoAbs::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGPathSeg::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGPathSeg::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGPathSeg::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::JSSVGPathSegMovetoAbs::createPrototype(WebCore::JSSVGPathSegMovetoAbs *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  uint64_t v13;
  unint64_t Structure;
  JSC::Structure *v15;
  JSC::JSCell *v16;
  uint64_t v17;
  unint64_t v18;
  JSC::Structure *v19;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSSVGPathSeg::s_info + ~((_QWORD)&WebCore::JSSVGPathSeg::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGPathSeg::s_info + ~((_QWORD)&WebCore::JSSVGPathSeg::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSSVGPathSeg::s_info)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v12;
      if (v11 == &WebCore::JSSVGPathSeg::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v13)
  {
LABEL_7:
    Structure = WebCore::JSSVGPathSegPrototype::createStructure((uint64_t *)this, (uint64_t)a2, *((JSC::JSCell **)a2 + 82));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v16 = (JSC::JSCell *)WebCore::JSSVGPathSegPrototype::create(this, a2, Structure, v15);
    v17 = WebCore::JSSVGPathSeg::createStructure((uint64_t *)this, (uint64_t)a2, v16);
    v13 = WebCore::cacheDOMStructure((JSCell *)a2, v17, (uint64_t)&WebCore::JSSVGPathSeg::s_info);
  }
  v18 = WebCore::JSSVGPathSegMovetoAbsPrototype::createStructure((uint64_t *)this, (uint64_t)a2, *(JSC::JSCell **)(v13 + 48));
  *(_DWORD *)(v18 + 16) |= 0x80000u;
  return WebCore::JSSVGPathSegMovetoAbsPrototype::create(this, a2, v18, v19);
}

uint64_t WebCore::JSSVGPathSegMovetoAbsPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGPathSegMovetoAbsPrototype::create(WebCore::JSSVGPathSegMovetoAbsPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(this, (uint64_t)&WebCore::JSSVGPathSegMovetoAbs::s_info, &WebCore::JSSVGPathSegMovetoAbsPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSegMovetoAbs>,(WebCore::DOMConstructorID)848>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  unint64_t Prototype;
  unint64_t v28;
  JSC::JSObject *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6784);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSeg>,(WebCore::DOMConstructorID)829>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v33 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v33);
    v5[2] = SlowCase + (int)v33;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSegMovetoAbs>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v34 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v34);
    v10[2848] = v2 + (int)v34;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (!v18)
    goto LABEL_21;
  v19 = *(_DWORD *)(v18 - 8);
  v20 = ((unint64_t)&WebCore::JSSVGPathSegMovetoAbs::s_info
       + ~((_QWORD)&WebCore::JSSVGPathSegMovetoAbs::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGPathSegMovetoAbs::s_info
                                                                     + ~((_QWORD)&WebCore::JSSVGPathSegMovetoAbs::s_info << 32)) >> 22);
  v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
  v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
  v23 = v19 & ((v22 >> 31) ^ v22);
  v24 = *(char ***)(v18 + 16 * v23);
  if (v24 != &WebCore::JSSVGPathSegMovetoAbs::s_info)
  {
    v25 = 1;
    while (v24)
    {
      v23 = ((_DWORD)v23 + v25) & v19;
      v24 = *(char ***)(v18 + 16 * v23);
      ++v25;
      if (v24 == &WebCore::JSSVGPathSegMovetoAbs::s_info)
        goto LABEL_20;
    }
LABEL_21:
    Prototype = WebCore::JSSVGPathSegMovetoAbs::createPrototype((WebCore::JSSVGPathSegMovetoAbs *)a1, (JSC::VM *)a2, v16);
    v28 = Prototype;
    LODWORD(v36) = 23;
    if ((Prototype & 0xFFFE000000000002) == 0)
    {
      v29 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)Prototype);
      if (v29)
        JSC::JSObject::didBecomePrototype(v29, (JSC::VM *)a1);
    }
    v30 = *v5;
    if (*v5 >= (unint64_t)v5[1])
    {
      v30 = v5[2];
      if ((v30 & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        v30 = JSC::LocalAllocator::allocateSlowCase();
        goto LABEL_26;
      }
      v35 = *(_QWORD *)(v30 + 8) ^ v5[3];
      v5[1] = v30 + HIDWORD(v35);
      v5[2] = v30 + (int)v35;
    }
    *v5 = v30 + 128;
LABEL_26:
    *(_DWORD *)v30 = 0;
    MEMORY[0x19AEA4278](v30, a1, a2, v28, &v36, &WebCore::JSSVGPathSegMovetoAbs::s_info, 0, 0);
    if (*(_BYTE *)(a1 + 755))
      __dmb(0xAu);
    v26 = WebCore::cacheDOMStructure((JSCell *)a2, v30, (uint64_t)&WebCore::JSSVGPathSegMovetoAbs::s_info);
    goto LABEL_29;
  }
LABEL_20:
  v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
  if (!v26)
    goto LABEL_21;
LABEL_29:
  v31 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v31, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6784) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGPathSegMovetoAbsConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGPathSegMovetoAbsPrototype::s_info != (char **)(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                     + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSegMovetoAbs>,(WebCore::DOMConstructorID)848>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGPathSegMovetoAbs_x(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(a2 + 24) + 28);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, (double)(int)v4 == v3)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

BOOL WebCore::setJSSVGPathSegMovetoAbs_x(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  float v12;
  uint64_t v13;
  int v15;
  double v16;
  JSC::VM *v17;
  unint64_t v18;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGPathSegMovetoAbs::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGPathSegMovetoAbs::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v18 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v17 = v4;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v18, a1);
    v4 = v17;
    v11 = v16;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v11 < -3.40282347e38)
  {
    *(float *)&v15 = -INFINITY;
LABEL_28:
    v12 = *(float *)&v15;
    goto LABEL_19;
  }
  if (v11 > 3.40282347e38)
  {
    *(float *)&v15 = INFINITY;
    goto LABEL_28;
  }
  v12 = v11;
LABEL_19:
  *(float *)(v10 + 28) = v12;
  v13 = *(_QWORD *)(v10 + 16);
  if (v13)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, v10);
  return 1;
}

unint64_t WebCore::jsSVGPathSegMovetoAbs_y(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(a2 + 24) + 32);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, (double)(int)v4 == v3)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

BOOL WebCore::setJSSVGPathSegMovetoAbs_y(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  float v12;
  uint64_t v13;
  int v15;
  double v16;
  JSC::VM *v17;
  unint64_t v18;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGPathSegMovetoAbs::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGPathSegMovetoAbs::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v18 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v17 = v4;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v18, a1);
    v4 = v17;
    v11 = v16;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v11 < -3.40282347e38)
  {
    *(float *)&v15 = -INFINITY;
LABEL_28:
    v12 = *(float *)&v15;
    goto LABEL_19;
  }
  if (v11 > 3.40282347e38)
  {
    *(float *)&v15 = INFINITY;
    goto LABEL_28;
  }
  v12 = v11;
LABEL_19:
  *(float *)(v10 + 32) = v12;
  v13 = *(_QWORD *)(v10 + 16);
  if (v13)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, v10);
  return 1;
}

uint64_t WebCore::JSSVGPathSegMovetoAbs::subspaceForImpl(WebCore::JSSVGPathSegMovetoAbs *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 6864);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 6864))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 6864);
    *(_QWORD *)(v8 + 6864) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 6864);
  *(_QWORD *)(v3 + 6864) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSSVGPathSegMovetoRel::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGPathSeg::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGPathSeg::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGPathSeg::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::JSSVGPathSegMovetoRel::createPrototype(WebCore::JSSVGPathSegMovetoRel *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  uint64_t v13;
  unint64_t Structure;
  JSC::Structure *v15;
  JSC::JSCell *v16;
  uint64_t v17;
  unint64_t v18;
  JSC::Structure *v19;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSSVGPathSeg::s_info + ~((_QWORD)&WebCore::JSSVGPathSeg::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGPathSeg::s_info + ~((_QWORD)&WebCore::JSSVGPathSeg::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSSVGPathSeg::s_info)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v12;
      if (v11 == &WebCore::JSSVGPathSeg::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v13)
  {
LABEL_7:
    Structure = WebCore::JSSVGPathSegPrototype::createStructure((uint64_t *)this, (uint64_t)a2, *((JSC::JSCell **)a2 + 82));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v16 = (JSC::JSCell *)WebCore::JSSVGPathSegPrototype::create(this, a2, Structure, v15);
    v17 = WebCore::JSSVGPathSeg::createStructure((uint64_t *)this, (uint64_t)a2, v16);
    v13 = WebCore::cacheDOMStructure((JSCell *)a2, v17, (uint64_t)&WebCore::JSSVGPathSeg::s_info);
  }
  v18 = WebCore::JSSVGPathSegMovetoRelPrototype::createStructure((uint64_t *)this, (uint64_t)a2, *(JSC::JSCell **)(v13 + 48));
  *(_DWORD *)(v18 + 16) |= 0x80000u;
  return WebCore::JSSVGPathSegMovetoRelPrototype::create(this, a2, v18, v19);
}

uint64_t WebCore::JSSVGPathSegMovetoRelPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGPathSegMovetoRelPrototype::create(WebCore::JSSVGPathSegMovetoRelPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(this, (uint64_t)&WebCore::JSSVGPathSegMovetoRel::s_info, &WebCore::JSSVGPathSegMovetoRelPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSegMovetoRel>,(WebCore::DOMConstructorID)849>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  unint64_t Prototype;
  unint64_t v28;
  JSC::JSObject *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6792);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSeg>,(WebCore::DOMConstructorID)829>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v33 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v33);
    v5[2] = SlowCase + (int)v33;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSegMovetoRel>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v34 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v34);
    v10[2848] = v2 + (int)v34;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (!v18)
    goto LABEL_21;
  v19 = *(_DWORD *)(v18 - 8);
  v20 = ((unint64_t)&WebCore::JSSVGPathSegMovetoRel::s_info
       + ~((_QWORD)&WebCore::JSSVGPathSegMovetoRel::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGPathSegMovetoRel::s_info
                                                                     + ~((_QWORD)&WebCore::JSSVGPathSegMovetoRel::s_info << 32)) >> 22);
  v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
  v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
  v23 = v19 & ((v22 >> 31) ^ v22);
  v24 = *(char ***)(v18 + 16 * v23);
  if (v24 != &WebCore::JSSVGPathSegMovetoRel::s_info)
  {
    v25 = 1;
    while (v24)
    {
      v23 = ((_DWORD)v23 + v25) & v19;
      v24 = *(char ***)(v18 + 16 * v23);
      ++v25;
      if (v24 == &WebCore::JSSVGPathSegMovetoRel::s_info)
        goto LABEL_20;
    }
LABEL_21:
    Prototype = WebCore::JSSVGPathSegMovetoRel::createPrototype((WebCore::JSSVGPathSegMovetoRel *)a1, (JSC::VM *)a2, v16);
    v28 = Prototype;
    LODWORD(v36) = 23;
    if ((Prototype & 0xFFFE000000000002) == 0)
    {
      v29 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)Prototype);
      if (v29)
        JSC::JSObject::didBecomePrototype(v29, (JSC::VM *)a1);
    }
    v30 = *v5;
    if (*v5 >= (unint64_t)v5[1])
    {
      v30 = v5[2];
      if ((v30 & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        v30 = JSC::LocalAllocator::allocateSlowCase();
        goto LABEL_26;
      }
      v35 = *(_QWORD *)(v30 + 8) ^ v5[3];
      v5[1] = v30 + HIDWORD(v35);
      v5[2] = v30 + (int)v35;
    }
    *v5 = v30 + 128;
LABEL_26:
    *(_DWORD *)v30 = 0;
    MEMORY[0x19AEA4278](v30, a1, a2, v28, &v36, &WebCore::JSSVGPathSegMovetoRel::s_info, 0, 0);
    if (*(_BYTE *)(a1 + 755))
      __dmb(0xAu);
    v26 = WebCore::cacheDOMStructure((JSCell *)a2, v30, (uint64_t)&WebCore::JSSVGPathSegMovetoRel::s_info);
    goto LABEL_29;
  }
LABEL_20:
  v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
  if (!v26)
    goto LABEL_21;
LABEL_29:
  v31 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v31, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6792) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGPathSegMovetoRelConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGPathSegMovetoRelPrototype::s_info != (char **)(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                     + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSegMovetoRel>,(WebCore::DOMConstructorID)849>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGPathSegMovetoRel_x(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(a2 + 24) + 28);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, (double)(int)v4 == v3)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

BOOL WebCore::setJSSVGPathSegMovetoRel_x(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  float v12;
  uint64_t v13;
  int v15;
  double v16;
  JSC::VM *v17;
  unint64_t v18;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGPathSegMovetoRel::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGPathSegMovetoRel::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v18 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v17 = v4;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v18, a1);
    v4 = v17;
    v11 = v16;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v11 < -3.40282347e38)
  {
    *(float *)&v15 = -INFINITY;
LABEL_28:
    v12 = *(float *)&v15;
    goto LABEL_19;
  }
  if (v11 > 3.40282347e38)
  {
    *(float *)&v15 = INFINITY;
    goto LABEL_28;
  }
  v12 = v11;
LABEL_19:
  *(float *)(v10 + 28) = v12;
  v13 = *(_QWORD *)(v10 + 16);
  if (v13)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, v10);
  return 1;
}

unint64_t WebCore::jsSVGPathSegMovetoRel_y(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(a2 + 24) + 32);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, (double)(int)v4 == v3)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

BOOL WebCore::setJSSVGPathSegMovetoRel_y(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  float v12;
  uint64_t v13;
  int v15;
  double v16;
  JSC::VM *v17;
  unint64_t v18;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGPathSegMovetoRel::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGPathSegMovetoRel::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v18 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v17 = v4;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v18, a1);
    v4 = v17;
    v11 = v16;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v11 < -3.40282347e38)
  {
    *(float *)&v15 = -INFINITY;
LABEL_28:
    v12 = *(float *)&v15;
    goto LABEL_19;
  }
  if (v11 > 3.40282347e38)
  {
    *(float *)&v15 = INFINITY;
    goto LABEL_28;
  }
  v12 = v11;
LABEL_19:
  *(float *)(v10 + 32) = v12;
  v13 = *(_QWORD *)(v10 + 16);
  if (v13)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, v10);
  return 1;
}

uint64_t WebCore::JSSVGPathSegMovetoRel::subspaceForImpl(WebCore::JSSVGPathSegMovetoRel *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 6872);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 6872))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 6872);
    *(_QWORD *)(v8 + 6872) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 6872);
  *(_QWORD *)(v3 + 6872) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSSVGPatternElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSVGPatternElementPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGPatternElementPrototype::create(WebCore::JSSVGPatternElementPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<15u>(this, (uint64_t)&WebCore::JSSVGPatternElement::s_info, (uint64_t)&WebCore::JSSVGPatternElementPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPatternElement>,(WebCore::DOMConstructorID)850>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6800);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGElement>,(WebCore::DOMConstructorID)783>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v34);
    v5[2] = SlowCase + (int)v34;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPatternElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v35 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v35);
    v10[2848] = v2 + (int)v35;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSSVGPatternElement::s_info
         + ~((_QWORD)&WebCore::JSSVGPatternElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGPatternElement::s_info
                                                                     + ~((_QWORD)&WebCore::JSSVGPatternElement::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSSVGPatternElement::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSSVGPatternElement::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSSVGElement::prototype((WebCore::JSSVGElement *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSSVGPatternElementPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v30 = (JSC::JSCell *)WebCore::JSSVGPatternElementPrototype::create((WebCore::JSSVGPatternElementPrototype *)a1, (JSC::VM *)a2, Structure, v29);
  v31 = WebCore::JSSVGPatternElement::createStructure((uint64_t *)a1, a2, v30);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v31, (uint64_t)&WebCore::JSSVGPatternElement::s_info);
LABEL_22:
  v32 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v32, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6800) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGPatternElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGPatternElementPrototype::s_info != (char **)(16
                                                                 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                   + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPatternElement>,(WebCore::DOMConstructorID)850>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGPatternElement_patternUnits(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 256));
}

unint64_t WebCore::jsSVGPatternElement_patternContentUnits(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 264));
}

unint64_t WebCore::jsSVGPatternElement_patternTransform(int a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedPropertyList<WebCore::SVGTransformList>>(a1, *(JSC::VM **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WebCore::JSDOMGlobalObject **)(*(_QWORD *)(a2 + 24) + 272));
}

unint64_t WebCore::jsSVGPatternElement_x(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 224));
}

unint64_t WebCore::jsSVGPatternElement_y(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 232));
}

unint64_t WebCore::jsSVGPatternElement_width(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 240));
}

unint64_t WebCore::jsSVGPatternElement_height(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 248));
}

unint64_t WebCore::jsSVGPatternElement_viewBox(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGRect>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 176));
}

unint64_t WebCore::jsSVGPatternElement_preserveAspectRatio(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGPreserveAspectRatio>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 184));
}

unint64_t WebCore::jsSVGPatternElement_requiredExtensions(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  WebCore::SVGElementRareData *v5;
  void *v6;
  WebCore::SVGConditionalProcessingAttributes *v7;

  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 200) + 8);
  *(_DWORD *)(v4 + 24) += 2;
  v5 = (WebCore::SVGElementRareData *)WebCore::SVGElement::ensureSVGRareData((WebCore::SVGElement *)v4);
  v7 = WebCore::SVGElementRareData::conditionalProcessingAttributes(v5, (WebCore::SVGElement *)v4);
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v4, v6);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  return WebCore::wrap<WebCore::SVGStringList>(a1, v3, *((WTF **)v7 + 1));
}

unint64_t WebCore::jsSVGPatternElement_systemLanguage(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  WebCore::SVGElementRareData *v5;
  void *v6;
  WebCore::SVGConditionalProcessingAttributes *v7;

  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 200) + 8);
  *(_DWORD *)(v4 + 24) += 2;
  v5 = (WebCore::SVGElementRareData *)WebCore::SVGElement::ensureSVGRareData((WebCore::SVGElement *)v4);
  v7 = WebCore::SVGElementRareData::conditionalProcessingAttributes(v5, (WebCore::SVGElement *)v4);
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v4, v6);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  return WebCore::wrap<WebCore::SVGStringList>(a1, v3, *((WTF **)v7 + 2));
}

unint64_t WebCore::jsSVGPatternElement_requiredFeatures(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  WebCore::SVGElementRareData *v5;
  void *v6;
  WTF **v7;

  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 200) + 8);
  *(_DWORD *)(v4 + 24) += 2;
  v5 = (WebCore::SVGElementRareData *)WebCore::SVGElement::ensureSVGRareData((WebCore::SVGElement *)v4);
  v7 = (WTF **)WebCore::SVGElementRareData::conditionalProcessingAttributes(v5, (WebCore::SVGElement *)v4);
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v4, v6);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  return WebCore::wrap<WebCore::SVGStringList>(a1, v3, *v7);
}

unint64_t WebCore::jsSVGPatternElement_href(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedString>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 216));
}

uint64_t WebCore::JSSVGPatternElement::subspaceForImpl(WebCore::JSSVGPatternElement *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 6880);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  v20 = *(_QWORD *)(v8 + 6880);
  if (!v20)
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v22, "IsoSpace T");
    v21 = 0;
    MEMORY[0x19AEA3204](v9, &v22, (char *)this + 192, (char *)this + 1872, 40, 8, &v21);
    v11 = v21;
    v21 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v22;
    v22 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v20 = v9;
    v13 = *(_QWORD *)(v8 + 6880);
    *(_QWORD *)(v8 + 6880) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = *(unsigned int *)(v6 + 2844);
    if ((_DWORD)v14 == *(_DWORD *)(v6 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v6 + 2832, (unint64_t)&v20);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = v9;
      *(_DWORD *)(v6 + 2844) = v14 + 1;
    }
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 6880);
  *(_QWORD *)(v3 + 6880) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

WTF::StringImpl *WebCore::JSSVGPointPrototype::finishCreation(WebCore::JSSVGPointPrototype *this, JSC::VM *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<4u>(a2, (uint64_t)&WebCore::JSSVGPoint::s_info, &WebCore::JSSVGPointPrototypeTableValues, this);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5 = JSC::jsNontrivialString((uint64_t)a2, &v8);
  JSC::JSObject::putDirectWithoutTransition((int *)this, a2, v4, v5, 6);
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_DWORD *WebCore::JSSVGPoint::destroy(WebCore::JSSVGPoint *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSSVGPoint::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::JSSVGPoint::createPrototype(WebCore::JSSVGPoint *this, JSC::JSCell **a2, WebCore::JSDOMGlobalObject *a3)
{
  unint64_t v4;
  WebCore::JSDOMGlobalObject *v5;
  JSC::Structure *v6;

  v4 = JSC::Structure::create((uint64_t *)this, (int)a2, a2[82]);
  *(_DWORD *)(v4 + 16) |= 0x80000u;
  return WebCore::JSSVGPointPrototype::create(this, v4, v5, v6);
}

unint64_t WebCore::JSSVGPointPrototype::create(WebCore::JSSVGPointPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  unint64_t v6;
  int v7;

  v6 = JSC::allocateCell<WebCore::JSAbstractRangePrototype>((uint64_t)this);
  v7 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)v6 = a2 >> 4;
  *(_DWORD *)(v6 + 4) = v7;
  *(_QWORD *)(v6 + 8) = 0;
  WebCore::JSSVGPointPrototype::finishCreation((WebCore::JSSVGPointPrototype *)v6, this);
  return v6;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPoint>,(WebCore::DOMConstructorID)851>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  uint64_t v17;
  unint64_t v19;
  unint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  int v23;
  int v24;
  uint64_t v25;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6808);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v21) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v19 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v19);
    v5[2] = SlowCase + (int)v19;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v21, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPoint>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 >= v9[2847])
  {
    v2 = v9[2848];
    if ((v2 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v2 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_11;
    }
    v20 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v20);
    v9[2848] = v2 + (int)v20;
  }
  v9[2846] = v2 + 48;
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v21 = 0;
  v22 = v2;
  v23 = -1;
  v24 = 0x1000000;
  v25 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v21);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v21);
  v13 = v21;
  v21 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v21 = 0;
  v22 = v2;
  v23 = -1;
  v24 = 0x1000000;
  v25 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v21);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v17 = *(_QWORD *)(WebCore::getDOMStructure<WebCore::JSSVGPoint>((WebCore::JSSVGPoint *)a1, (JSC::VM *)a2, v16) + 48);
  v21 = 0;
  v22 = v2;
  v23 = -1;
  v24 = 0x1000000;
  v25 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v17, 14, (uint64_t)&v21);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6808) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGPointConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGPointPrototype::s_info != (char **)(16
                                                        * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPoint>,(WebCore::DOMConstructorID)851>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGPoint_x(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(a2 + 24) + 28);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, (double)(int)v4 == v3)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

BOOL WebCore::setJSSVGPoint_x(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v9;
  double v10;
  float v11;
  uint64_t v12;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  double v17;
  JSC::VM *v18[2];
  unint64_t v19;
  WTF::StringImpl *v20;

  v4 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGPoint::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGPoint::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v9 = *(_QWORD *)(a2 + 24);
  v18[0] = *((JSC::VM **)a1 + 7);
  v18[1] = (JSC::VM *)v4;
  v19 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v10 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v19, a1);
    v10 = v17;
  }
  else
  {
    *(_QWORD *)&v10 = a3 - 0x2000000000000;
  }
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
    return 0;
  if ((*(_QWORD *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v10 < -3.40282347e38 || v10 > 3.40282347e38)
  {
    JSC::throwTypeError();
    return 0;
  }
  if (*(_BYTE *)(v9 + 24) == 1)
  {
    LOBYTE(v19) = 4;
    v20 = 0;
    if (!*(_QWORD *)(v4 + 16))
    {
      WebCore::propagateExceptionSlowPath(a1, v18, (unsigned __int8 *)&v19);
      v16 = v20;
      v20 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v15);
        else
          *(_DWORD *)v16 -= 2;
      }
    }
  }
  else
  {
    v11 = v10;
    *(float *)(v9 + 28) = v11;
    v12 = *(_QWORD *)(v9 + 16);
    if (v12)
      (*(void (**)(uint64_t, uint64_t, const char *, uint64_t))(*(_QWORD *)v12 + 32))(v12, v9, "The provided value is outside the range of a float", 51);
  }
  return 1;
}

unint64_t WebCore::jsSVGPoint_y(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(a2 + 24) + 32);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, (double)(int)v4 == v3)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

BOOL WebCore::setJSSVGPoint_y(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v9;
  double v10;
  float v11;
  uint64_t v12;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  double v17;
  JSC::VM *v18[2];
  unint64_t v19;
  WTF::StringImpl *v20;

  v4 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGPoint::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGPoint::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v9 = *(_QWORD *)(a2 + 24);
  v18[0] = *((JSC::VM **)a1 + 7);
  v18[1] = (JSC::VM *)v4;
  v19 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v10 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v19, a1);
    v10 = v17;
  }
  else
  {
    *(_QWORD *)&v10 = a3 - 0x2000000000000;
  }
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
    return 0;
  if ((*(_QWORD *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v10 < -3.40282347e38 || v10 > 3.40282347e38)
  {
    JSC::throwTypeError();
    return 0;
  }
  if (*(_BYTE *)(v9 + 24) == 1)
  {
    LOBYTE(v19) = 4;
    v20 = 0;
    if (!*(_QWORD *)(v4 + 16))
    {
      WebCore::propagateExceptionSlowPath(a1, v18, (unsigned __int8 *)&v19);
      v16 = v20;
      v20 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v15);
        else
          *(_DWORD *)v16 -= 2;
      }
    }
  }
  else
  {
    v11 = v10;
    *(float *)(v9 + 32) = v11;
    v12 = *(_QWORD *)(v9 + 16);
    if (v12)
      (*(void (**)(uint64_t, uint64_t, const char *, uint64_t))(*(_QWORD *)v12 + 32))(v12, v9, "The provided value is outside the range of a float", 51);
  }
  return 1;
}

uint64_t WebCore::JSSVGPointOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

_QWORD *WebCore::JSSVGPointOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  int v23;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v23 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v23) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v23;
        if (v12 == v3)
          goto LABEL_3;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_3:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v13 = (_QWORD *)(v5 + 16 * v11);
      *v13 = -1;
      v16 = v13[1];
      v15 = v13 + 1;
      v14 = v16;
      if (v16)
      {
        *(_QWORD *)(v14 + 8) = 3;
        *v15 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v17 = *v4;
      if (*v4)
        v18 = *(_DWORD *)(v17 - 12) - 1;
      else
        v18 = -1;
      *(_DWORD *)(v17 - 12) = v18;
      v19 = *v4;
      if (*v4)
      {
        v20 = 6 * *(_DWORD *)(v19 - 12);
        v21 = *(_DWORD *)(v19 - 4);
        if (v20 < v21 && v21 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v21 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::toJSNewlyCreated(WebCore::JSSVGPoint **a1, WTF **a2, WebCore::JSDOMGlobalObject *a3)
{
  WTF *v5;
  unint64_t v6;
  WebCore::JSSVGPoint *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t SlowCase;
  WTF *v12;
  WebCore::JSSVGPoint *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *Allocator;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;
  void *v23;
  int v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  WTF *v32;

  v5 = *a2;
  v6 = WebCore::getDOMStructure<WebCore::JSSVGPoint>(a1[7], (JSC::VM *)a1, a3);
  v7 = a1[7];
  v8 = *((_QWORD *)v7 + 5182);
  v9 = *(_QWORD *)(v8 + 23536);
  v10 = *(_QWORD **)(v9 + 6888);
  if (!v10)
  {
    v18 = *(_QWORD *)(v8 + 22648);
    if (__ldaxr((unsigned __int8 *)v18))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v18))
    {
LABEL_21:
      v20 = *(_QWORD *)(v18 + 2824);
      if (!*(_QWORD *)(v20 + 6888))
      {
        v25 = WTF::fastMalloc((WTF *)0xF8);
        WTF::CString::CString((WTF::CString *)&v32, "IsoSpace T");
        v31 = 0;
        MEMORY[0x19AEA3204](v25, &v32, (char *)v7 + 192, (char *)v7 + 1872, 32, 8, &v31);
        v27 = (uint64_t)v31;
        v31 = 0;
        if (v27)
          (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
        v28 = v32;
        v32 = 0;
        if (v28)
        {
          if (*(_DWORD *)v28 == 1)
            WTF::fastFree(v28, v26);
          else
            --*(_DWORD *)v28;
        }
        v29 = *(_QWORD *)(v20 + 6888);
        *(_QWORD *)(v20 + 6888) = v25;
        if (v29)
          (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
      }
      v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
      JSC::GCClient::IsoSubspace::IsoSubspace();
      v21 = *(_QWORD *)(v9 + 6888);
      *(_QWORD *)(v9 + 6888) = v10;
      if (v21)
      {
        v22 = (WTF *)MEMORY[0x19AEA3528]();
        WTF::fastFree(v22, v23);
      }
      v24 = __ldxr((unsigned __int8 *)v18);
      if (v24 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v18))
          goto LABEL_2;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v18);
      goto LABEL_2;
    }
    MEMORY[0x19AEA534C](v18);
    goto LABEL_21;
  }
LABEL_2:
  SlowCase = v10[3];
  if (SlowCase < v10[4])
  {
LABEL_3:
    v10[3] = SlowCase + 32;
    goto LABEL_4;
  }
  SlowCase = v10[5];
  if ((SlowCase & 1) == 0)
  {
    v30 = *(_QWORD *)(SlowCase + 8) ^ v10[6];
    v10[4] = SlowCase + HIDWORD(v30);
    v10[5] = SlowCase + (int)v30;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_4:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v6);
  v12 = *a2;
  *a2 = 0;
  *(_QWORD *)(SlowCase + 24) = v12;
  if (*((_BYTE *)v7 + 755))
    __dmb(0xAu);
  v13 = a1[415];
  if ((byte_1ECE81678 & 1) == 0)
  {
    qword_1ECE81670 = (uint64_t)&off_1E32F7680;
    byte_1ECE81678 = 1;
  }
  v32 = v5;
  if ((SlowCase & 8) != 0)
    v14 = (SlowCase - 112) | 1;
  else
    v14 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v14 & 1) != 0)
    v15 = v14 + 47;
  else
    v15 = *(_QWORD *)v14 + 32;
  Allocator = *(_QWORD **)(v15 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v15 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1ECE81670;
  Allocator[2] = v13;
  v31 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)v13 + 4, (uint64_t *)&v32, (uint64_t *)&v31);
  if (v31)
    v31[1] = 3;
  return SlowCase;
}

unint64_t WebCore::wrap<WebCore::SVGPoint>(uint64_t a1, WTF *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  WTF *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  WTF *v14;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 3320) + 32);
  if (v3)
  {
    v4 = *(_DWORD *)(v3 - 8);
    v5 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    v8 = v4 & ((v7 >> 31) ^ v7);
    v9 = *(WTF **)(v3 + 16 * v8);
    if (v9 == a2)
    {
LABEL_6:
      v11 = *(_QWORD *)(v3 + 16 * v8 + 8);
      if (v11)
      {
        if ((*(_BYTE *)(v11 + 8) & 3) == 0)
        {
          v12 = *(_QWORD *)v11;
          if (*(_QWORD *)v11)
            return v12;
        }
      }
    }
    else
    {
      v10 = 1;
      while (v9)
      {
        v8 = ((_DWORD)v8 + v10) & v4;
        v9 = *(WTF **)(v3 + 16 * v8);
        ++v10;
        if (v9 == a2)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a2 + 2);
  v14 = a2;
  v12 = WebCore::toJSNewlyCreated((WebCore::JSSVGPoint **)a1, &v14, a3);
  if (v14)
  {
    if (*((_DWORD *)v14 + 2) == 1)
      (*(void (**)(void))(*(_QWORD *)v14 + 8))();
    else
      --*((_DWORD *)v14 + 2);
  }
  return v12;
}

unint64_t JSC::jsDynamicCast<WebCore::JSSVGPoint *>(unint64_t result)
{
  uint64_t v1;
  _BOOL4 v2;
  char **v3;
  BOOL v4;

  if ((result & 0xFFFE000000000002) != 0)
    return 0;
  v1 = *(unsigned int *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x4C);
  v2 = *(_DWORD *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x4C) != 0;
  v3 = (char **)(16 * v1);
  if ((_DWORD)v1)
    v4 = v3 == &WebCore::JSSVGPoint::s_info;
  else
    v4 = 1;
  if (!v4)
  {
    do
    {
      v3 = (char **)v3[2];
      v2 = v3 != 0;
    }
    while (v3 != &WebCore::JSSVGPoint::s_info && v3 != 0);
  }
  if (!v2)
    return 0;
  return result;
}

BOOL WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPointList>::initializeProperties(uint64_t a1, uint64_t a2, JSC::JSCell **a3)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  unint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v13;

  v6 = a2 + 41952;
  JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, *(_QWORD *)(*(_QWORD *)(a2 + 41952) + 1768), 0xFFFE000000000000, 6);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8 = JSC::jsNontrivialString(a2, &v13);
  v9 = v13;
  v13 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  *(_QWORD *)(a1 + 32) = v8;
  if (a1 && v8 && *(_DWORD *)(a2 + 760) >= *(unsigned __int8 *)(a1 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a2 + 192), (const JSCell *)a1);
  JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, *(_QWORD *)(*(_QWORD *)v6 + 1968), v8, 6);
  v10 = *(_QWORD *)(*(_QWORD *)v6 + 2160);
  v11 = WebCore::getDOMStructure<WebCore::JSSVGPointList>((WebCore::JSSVGPointList *)a2, a3);
  return JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, v10, *(_QWORD *)(v11 + 48), 14);
}

WTF::StringImpl *WebCore::JSSVGPointListPrototype::finishCreation(WebCore::JSSVGPointListPrototype *this, JSC::VM *a2)
{
  unint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t Direct;
  WTF::StringImpl *v8;
  unint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<10u>(a2, (uint64_t)&WebCore::JSSVGPointList::s_info, (uint64_t)&WebCore::JSSVGPointListPrototypeTableValues, this);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2712);
  v5 = *(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28) + 672);
  v6 = (_DWORD *)MEMORY[0x1E0CBEBF0];
  *MEMORY[0x1E0CBEBF0] += 2;
  Direct = JSC::JSObject::getDirect(v5, a2, (unint64_t)v6);
  JSC::JSObject::putDirect((unsigned __int8 *)this, a2, v4, Direct, 4);
  if (*v6 == 2)
    WTF::StringImpl::destroy(MEMORY[0x1E0CBEBF0], v8);
  else
    *v6 -= 2;
  v9 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v10 = JSC::jsNontrivialString((uint64_t)a2, &v13);
  JSC::JSObject::putDirectWithoutTransition((int *)this, a2, v9, v10, 6);
  result = v13;
  v13 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_DWORD *WebCore::JSSVGPointList::destroy(WebCore::JSSVGPointList *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSSVGPointList::put(uint64_t a1, JSC *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  int v7;
  JSC::VM *v8;
  _BYTE *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  unsigned __int16 *v24;
  uint64_t v25;
  unsigned int v26;
  BOOL v27;
  _DWORD *v28;
  BOOL v30;
  JSValue v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 *v38;
  unsigned int v39;
  _DWORD *v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  int v44;

  if (*(_QWORD *)(a5 + 8) != a1)
    return JSC::JSObject::put();
  if (!a3)
    return JSC::JSObject::put();
  v7 = *(_DWORD *)(a3 + 16);
  if ((v7 & 0x20) != 0)
    return JSC::JSObject::put();
  v8 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v9 = *(_BYTE **)(a3 + 8);
  v10 = *(unsigned int *)(a3 + 4);
  if ((v7 & 4) != 0)
  {
    if ((_DWORD)v10)
    {
      v34 = *v9 - 48;
      if (v34 <= 9 && (v10 < 2 || *v9 != 48))
      {
        v37 = v10 - 1;
        v38 = v9 + 1;
        while (v37)
        {
          if (v34 > 0x19999999)
            goto LABEL_45;
          v39 = *v38 - 48;
          if (v39 > 9)
            goto LABEL_45;
          v35 = 0;
          LODWORD(v10) = 0;
          v36 = 0;
          v27 = __CFADD__(v39, 10 * v34);
          v34 = v39 + 10 * v34;
          --v37;
          ++v38;
          if (v27)
            goto LABEL_47;
        }
        if (v34 == -1)
          v35 = 0;
        else
          v35 = v34 & 0xFFFFFF00;
        if (v34 == -1)
          LODWORD(v10) = 0;
        else
          LODWORD(v10) = v34;
        if (v34 == -1)
          v36 = 0;
        else
          v36 = 0x100000000;
LABEL_47:
        v15 = v10 | v35;
        if ((v36 & 0x100000000) != 0)
          goto LABEL_11;
        return JSC::JSObject::put();
      }
LABEL_45:
      v35 = 0;
      LODWORD(v10) = 0;
    }
    else
    {
      v35 = 0;
    }
    v36 = 0;
    goto LABEL_47;
  }
  if ((_DWORD)v10 && (v11 = *(unsigned __int16 *)v9 - 48, v11 <= 9) && (v10 < 2 || *(_WORD *)v9 != 48))
  {
    v24 = (unsigned __int16 *)(v9 + 2);
    v25 = v10 - 1;
    while (v25)
    {
      if (v11 <= 0x19999999)
      {
        v26 = *v24 - 48;
        if (v26 <= 9)
        {
          v27 = __CFADD__(v26, 10 * v11);
          v11 = v26 + 10 * v11;
          ++v24;
          --v25;
          if (!v27)
            continue;
        }
      }
      goto LABEL_9;
    }
    v30 = v11 == -1;
    v14 = v11 & 0xFFFFFF00;
    v13 = v11;
    v12 = 0x100000000;
    if (v30)
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
    }
  }
  else
  {
LABEL_9:
    v12 = 0;
    v13 = 0;
    v14 = 0;
  }
  v15 = v14 | v13;
  if ((v12 & 0x100000000) != 0)
  {
LABEL_11:
    v42 = *((_QWORD *)a2 + 7);
    v16 = JSC::jsDynamicCast<WebCore::JSSVGPoint *>(a4);
    if (!v16 || (v17 = *(_DWORD **)(v16 + 24)) == 0)
    {
      JSC::throwTypeError();
      return 1;
    }
    v18 = *(_QWORD *)(a1 + 24);
    ++v17[2];
    v40 = v17;
    if (*(_BYTE *)(v18 + 24) == 1)
    {
      v19 = 4;
      LOBYTE(v42) = 4;
      v20 = 1;
      v44 = 1;
      v43 = 0;
    }
    else
    {
      LOBYTE(v42) = 1;
      v44 = 0;
      if (*(_DWORD *)(v18 + 44) > v15)
      {
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, _DWORD **))(*(_QWORD *)v18 + 64))(&v41, v18, v15, &v40);
        v21 = *(_QWORD *)(v18 + 16);
        if (v21)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 32))(v21, v18);
        v19 = 0;
        v22 = 0;
        v42 = v41;
        v44 = 0;
        v23 = 1;
LABEL_29:
        ((void (*)(uint64_t *, uint64_t *))off_1E32FACF8[v22])(&v41, &v42);
        v28 = v40;
        v40 = 0;
        if (v28)
        {
          if (v28[2] == 1)
          {
            (*(void (**)(_DWORD *))(*(_QWORD *)v28 + 8))(v28);
            if ((v23 & 1) != 0)
              return 1;
            goto LABEL_38;
          }
          --v28[2];
        }
        if ((v23 & 1) != 0)
          return 1;
LABEL_38:
        LOBYTE(v42) = v19;
        v43 = 0;
        if (!*((_QWORD *)v8 + 2))
        {
          v31.super.isa = (Class)WebCore::createDOMException(a2, (JSC::JSGlobalObject *)v19, (JSC::JSGlobalObject *)&v43);
          JSC::VM::throwException(v8, a2, v31);
          v33 = v43;
          v43 = 0;
          if (v33)
          {
            if (*(_DWORD *)v33 == 2)
              WTF::StringImpl::destroy(v33, v32);
            else
              *(_DWORD *)v33 -= 2;
          }
        }
        return 1;
      }
      v19 = 0;
      v20 = 0;
    }
    off_1E32F83C8[v20](&v41, (char *)&v42);
    v23 = 0;
    LOBYTE(v42) = v19;
    v22 = 1;
    v44 = 1;
    v43 = 0;
    goto LABEL_29;
  }
  return JSC::JSObject::put();
}

uint64_t WebCore::JSSVGPointList::putByIndex(uint64_t a1, WTF::StringImpl **a2, uint64_t a3, unint64_t a4)
{
  JSC::VM *v6;
  unint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  _DWORD *v16;
  uint64_t v17;
  JSValue v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  _DWORD *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  int v28;

  v6 = a2[7];
  if ((_DWORD)a3 != -1)
  {
    v26 = a2[7];
    v8 = JSC::jsDynamicCast<WebCore::JSSVGPoint *>(a4);
    if (!v8 || (v9 = *(_DWORD **)(v8 + 24)) == 0)
    {
      JSC::throwTypeError();
      return 1;
    }
    v10 = *(_QWORD *)(a1 + 24);
    ++v9[2];
    v24 = v9;
    if (*(_BYTE *)(v10 + 24) == 1)
    {
      v11 = 4;
      LOBYTE(v26) = 4;
      v12 = 1;
      v28 = 1;
      v27 = 0;
    }
    else
    {
      LOBYTE(v26) = 1;
      v28 = 0;
      if (*(_DWORD *)(v10 + 44) > a3)
      {
        (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, uint64_t, _DWORD **))(*(_QWORD *)v10 + 64))(&v25, v10, a3, &v24);
        v13 = *(_QWORD *)(v10 + 16);
        if (v13)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, v10);
        v11 = 0;
        v14 = 0;
        v26 = v25;
        v28 = 0;
        v15 = 1;
LABEL_13:
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32FACF8[v14])(&v25, &v26);
        v16 = v24;
        v24 = 0;
        if (v16)
        {
          if (v16[2] == 1)
          {
            (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
            if ((v15 & 1) != 0)
              return 1;
            goto LABEL_20;
          }
          --v16[2];
        }
        if ((v15 & 1) != 0)
          return 1;
LABEL_20:
        LOBYTE(v26) = v11;
        v27 = 0;
        if (!*((_QWORD *)v6 + 2))
        {
          v19.super.isa = (Class)WebCore::createDOMException((JSC *)a2, (JSC::JSGlobalObject *)v11, (JSC::JSGlobalObject *)&v27);
          JSC::VM::throwException(v6, (JSC::JSGlobalObject *)a2, v19);
          v21 = v27;
          v27 = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 2)
              WTF::StringImpl::destroy(v21, v20);
            else
              *(_DWORD *)v21 -= 2;
          }
        }
        return 1;
      }
      v11 = 0;
      v12 = 0;
    }
    ((uint64_t (**)(WTF::StringImpl **, char *))off_1E32F83C8)[v12](&v25, (char *)&v26);
    v15 = 0;
    LOBYTE(v26) = v11;
    v14 = 1;
    v28 = 1;
    v27 = 0;
    goto LABEL_13;
  }
  JSC::Identifier::from();
  v17 = JSC::ordinarySetSlow();
  v23 = v26;
  v26 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v22);
    else
      *(_DWORD *)v23 -= 2;
  }
  return v17;
}

uint64_t WebCore::JSSVGPointList::deleteProperty(uint64_t a1, WebCore::JSDOMGlobalObject *a2, uint64_t a3)
{
  uint64_t v4;
  _BOOL4 v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  WebCore::JSDOMGlobalObject *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _WORD *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned __int16 *v25;
  uint64_t v26;
  unsigned int v27;
  BOOL v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  unsigned int v34;

  v4 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSDOMGlobalObject::s_info && v6 != 0);
  }
  v9 = *(_QWORD *)(a1 + 24);
  if (v5)
    v10 = a2;
  else
    v10 = 0;
  v11 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v10);
  if (v11)
  {
    v12 = v11;
    if (!*(_BYTE *)(v11 + 274))
    {
      v13 = *(_BYTE **)(v11 + 496);
      if (!v13)
        v13 = (_BYTE *)WebCore::Document::ensureQuirks((WebCore::Document *)(v12 - 192));
      if (*(_QWORD *)v13)
      {
        v14 = *(_QWORD *)(*(_QWORD *)v13 + 8);
        if (v14)
        {
          v15 = *(_QWORD *)(v14 + 680);
          if (*(_BYTE *)(v15 + 243))
          {
            if (!*(_BYTE *)(v15 + 242))
              goto LABEL_22;
          }
          else if ((*(_QWORD *)(v15 + 688) & 0x80000) == 0)
          {
            goto LABEL_22;
          }
          if (v13[65])
            return JSC::JSObject::deleteProperty();
        }
      }
    }
  }
LABEL_22:
  if (!a3)
    return JSC::JSObject::deleteProperty();
  v16 = *(_DWORD *)(a3 + 16);
  if ((v16 & 0x20) != 0)
    return JSC::JSObject::deleteProperty();
  v17 = *(_WORD **)(a3 + 8);
  v18 = *(unsigned int *)(a3 + 4);
  if ((v16 & 4) == 0)
  {
    if ((_DWORD)v18 && (v19 = (unsigned __int16)*v17 - 48, v19 <= 9) && (v18 < 2 || *v17 != 48))
    {
      v25 = v17 + 1;
      v26 = v18 - 1;
      while (v26)
      {
        if (v19 <= 0x19999999)
        {
          v27 = *v25 - 48;
          if (v27 <= 9)
          {
            v28 = __CFADD__(v27, 10 * v19);
            v19 = v27 + 10 * v19;
            ++v25;
            --v26;
            if (!v28)
              continue;
          }
        }
        goto LABEL_29;
      }
      v7 = v19 == -1;
      v22 = v19 & 0xFFFFFF00;
      v21 = v19;
      v20 = 0x100000000;
      if (v7)
      {
        v20 = 0;
        v21 = 0;
        v22 = 0;
      }
    }
    else
    {
LABEL_29:
      v20 = 0;
      v21 = 0;
      v22 = 0;
    }
    v23 = v22 | v21;
    if ((v20 & 0x100000000) != 0)
      return *(_DWORD *)(v9 + 44) <= v23;
    return JSC::JSObject::deleteProperty();
  }
  if (!(_DWORD)v18)
  {
    v30 = 0;
    goto LABEL_47;
  }
  v29 = *(unsigned __int8 *)v17 - 48;
  if (v29 > 9 || v18 >= 2 && *(_BYTE *)v17 == 48)
  {
LABEL_46:
    v30 = 0;
    LODWORD(v18) = 0;
LABEL_47:
    v31 = 0;
    goto LABEL_48;
  }
  v32 = v18 - 1;
  v33 = (unsigned __int8 *)v17 + 1;
  while (v32)
  {
    if (v29 > 0x19999999)
      goto LABEL_46;
    v34 = *v33 - 48;
    if (v34 > 9)
      goto LABEL_46;
    v30 = 0;
    LODWORD(v18) = 0;
    v31 = 0;
    v28 = __CFADD__(v34, 10 * v29);
    v29 = v34 + 10 * v29;
    --v32;
    ++v33;
    if (v28)
      goto LABEL_48;
  }
  if (v29 == -1)
    v30 = 0;
  else
    v30 = v29 & 0xFFFFFF00;
  if (v29 == -1)
    LODWORD(v18) = 0;
  else
    LODWORD(v18) = v29;
  if (v29 == -1)
    v31 = 0;
  else
    v31 = 0x100000000;
LABEL_48:
  v23 = v18 | v30;
  if ((v31 & 0x100000000) != 0)
    return *(_DWORD *)(v9 + 44) <= v23;
  return JSC::JSObject::deleteProperty();
}

uint64_t WebCore::JSSVGPointList::deletePropertyByIndex(WebCore::JSSVGPointList *this, JSC::JSCell *a2, JSC::JSGlobalObject *a3)
{
  uint64_t v6;
  _BOOL4 v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  WebCore::JSDOMGlobalObject *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;

  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSDOMGlobalObject::s_info && v8 != 0);
  }
  v11 = *((_QWORD *)this + 3);
  if (v7)
    v12 = a2;
  else
    v12 = 0;
  v13 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v12);
  if (!v13)
    return *(_DWORD *)(v11 + 44) <= a3;
  v14 = v13;
  if (*(_BYTE *)(v13 + 274))
    return *(_DWORD *)(v11 + 44) <= a3;
  v15 = *(_BYTE **)(v13 + 496);
  if (!v15)
    v15 = (_BYTE *)WebCore::Document::ensureQuirks((WebCore::Document *)(v14 - 192));
  if (!*(_QWORD *)v15)
    return *(_DWORD *)(v11 + 44) <= a3;
  v16 = *(_QWORD *)(*(_QWORD *)v15 + 8);
  if (!v16)
    return *(_DWORD *)(v11 + 44) <= a3;
  v17 = *(_QWORD *)(v16 + 680);
  if (*(_BYTE *)(v17 + 243))
  {
    if (!*(_BYTE *)(v17 + 242))
      return *(_DWORD *)(v11 + 44) <= a3;
  }
  else if ((*(_QWORD *)(v17 + 688) & 0x80000) == 0)
  {
    return *(_DWORD *)(v11 + 44) <= a3;
  }
  if (!v15[65])
    return *(_DWORD *)(v11 + 44) <= a3;
  return JSC::JSObject::deletePropertyByIndex(this, a2, a3);
}

uint64_t WebCore::JSSVGPointList::getOwnPropertySlot(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  JSC::VM *v6;
  int v8;
  _WORD *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  _DWORD *v14;
  uint64_t v15;
  WTF *v16;
  WebCore::JSDOMGlobalObject *v17;
  unint64_t v18;
  uint64_t result;
  unsigned __int16 *v20;
  uint64_t v21;
  unsigned int v22;
  BOOL v23;
  BOOL v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  _BYTE *v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  unsigned __int16 *v45;
  uint64_t v46;
  unsigned int v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  unsigned int v54;
  int v55;
  unint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  unsigned __int8 *v67;
  unsigned int v68;
  uint64_t v69;
  unsigned __int8 *v70;
  unsigned int v71;
  WTF *v72;

  v6 = *(JSC::VM **)(a2 + 56);
  if (!a3)
  {
    if ((*(_BYTE *)(a1 + 6) & 0x20) != 0)
      return JSC::JSObject::getOwnStaticPropertySlot();
    return 0;
  }
  v8 = *(_DWORD *)(a3 + 16);
  if ((v8 & 0x20) != 0)
    goto LABEL_37;
  v9 = *(_WORD **)(a3 + 8);
  v10 = *(unsigned int *)(a3 + 4);
  if ((v8 & 4) == 0)
  {
    if ((_DWORD)v10 && (v11 = (unsigned __int16)*v9 - 48, v11 <= 9))
    {
      if (v10 < 2 || *v9 != 48)
      {
        v20 = v9 + 1;
        v21 = v10 - 1;
        while (v21)
        {
          if (v11 <= 0x19999999)
          {
            v22 = *v20 - 48;
            if (v22 <= 9)
            {
              v23 = __CFADD__(v22, 10 * v11);
              v11 = v22 + 10 * v11;
              ++v20;
              --v21;
              if (!v23)
                continue;
            }
          }
          goto LABEL_6;
        }
        v24 = v11 == -1;
        v13 = v11 & 0xFFFFFF00;
        v12 = 0x100000000;
        if (v11 == -1)
        {
          v12 = 0;
          LOBYTE(v11) = 0;
        }
        if (v24)
          v13 = 0;
LABEL_8:
        v11 = v11;
        if ((v12 & 0x100000000) == 0)
          goto LABEL_37;
        goto LABEL_9;
      }
      v12 = 0;
    }
    else
    {
LABEL_6:
      v12 = 0;
      LOBYTE(v11) = 0;
    }
    v13 = 0;
    goto LABEL_8;
  }
  if (!(_DWORD)v10)
  {
    v11 = 0;
    goto LABEL_35;
  }
  v25 = *(unsigned __int8 *)v9 - 48;
  if (v25 > 9 || v10 >= 2 && *(_BYTE *)v9 == 48)
  {
LABEL_34:
    v11 = 0;
    LOBYTE(v10) = 0;
LABEL_35:
    v26 = 0;
    goto LABEL_36;
  }
  v66 = v10 - 1;
  v67 = (unsigned __int8 *)v9 + 1;
  while (v66)
  {
    if (v25 > 0x19999999)
      goto LABEL_34;
    v68 = *v67 - 48;
    if (v68 > 9)
      goto LABEL_34;
    v11 = 0;
    LOBYTE(v10) = 0;
    v26 = 0;
    v23 = __CFADD__(v68, 10 * v25);
    v25 = v68 + 10 * v25;
    --v66;
    ++v67;
    if (v23)
      goto LABEL_36;
  }
  if (v25 == -1)
    v11 = 0;
  else
    v11 = v25 & 0xFFFFFF00;
  if (v25 == -1)
    LOBYTE(v10) = 0;
  else
    LOBYTE(v10) = v25;
  if (v25 == -1)
    v26 = 0;
  else
    v26 = 0x100000000;
LABEL_36:
  v13 = v10;
  if ((v26 & 0x100000000) == 0)
    goto LABEL_37;
LABEL_9:
  v14 = *(_DWORD **)(a1 + 24);
  if (v14[11] > (v13 | v11))
  {
    v15 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x28);
    (*(void (**)(WTF **__return_ptr))(*(_QWORD *)v14 + 48))(&v72);
    v16 = v72;
    v18 = WebCore::wrap<WebCore::SVGPoint>(v15, v72, v17);
    if (*((_DWORD *)v16 + 2) == 1)
      (*(void (**)(WTF *))(*(_QWORD *)v16 + 8))(v16);
    else
      --*((_DWORD *)v16 + 2);
    if (!*((_DWORD *)v6 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v6) & 1) == 0)
    {
      *(_QWORD *)a4 = v18;
      *(_DWORD *)(a4 + 16) = 0;
      *(_QWORD *)(a4 + 32) = a1;
      result = 1;
      *(_BYTE *)(a4 + 49) = 1;
      return result;
    }
    return 0;
  }
LABEL_37:
  if (!(a3 >> 4))
    goto LABEL_50;
  v27 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE);
  if (((a3 >> 4) & ~*(_DWORD *)(v27 + 0x20)) != 0)
    goto LABEL_50;
  v28 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x58);
  if (!v28)
  {
    v39 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x40);
    if (!v39 || *(_BYTE *)(v39 + 5) != 1 && *(_DWORD *)(v39 + 80) < 2u)
      goto LABEL_50;
    v28 = JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)), v6);
    if (!v28)
      goto LABEL_50;
  }
  if (!*(_DWORD *)(v28 + 24))
    goto LABEL_50;
  v29 = *(_QWORD *)(v28 + 16);
  v30 = v29 & 0xFFFFFFFFFFFFFFFELL;
  v31 = *(unsigned int *)(v28 + 8);
  v32 = *(_DWORD *)(a3 + 16);
  if ((v29 & 1) != 0)
  {
    if ((v32 & 0x20) != 0)
      v32 = *(_DWORD *)(a3 + 32);
    v33 = *(_DWORD *)(v28 + 12);
    v34 = (v32 >> 8) & *(_QWORD *)&v33;
    v35 = *(unsigned __int8 *)(v30 + v34);
    if (*(_BYTE *)(v30 + v34))
    {
      v36 = v30 + v31;
      v37 = 1;
      while (1)
      {
        v38 = *(_QWORD *)(v36 + 8 * (v35 - 1));
        if (a3 == (v38 & 0xFFFFFFFFFFFFLL))
          break;
        v34 = ((_DWORD)v34 + v37) & v33;
        v35 = *(unsigned __int8 *)(v30 + v34);
        ++v37;
        if (!*(_BYTE *)(v30 + v34))
          goto LABEL_50;
      }
      v48 = (v38 >> 16) & 0xFF00000000 | HIBYTE(v38);
      goto LABEL_69;
    }
LABEL_50:
    if ((*(_BYTE *)(a1 + 6) & 0x20) != 0 && (JSC::JSObject::getOwnStaticPropertySlot() & 1) != 0)
      return 1;
    v40 = *(_DWORD *)(a3 + 16);
    if ((v40 & 0x20) == 0)
    {
      v41 = *(_BYTE **)(a3 + 8);
      v42 = *(unsigned int *)(a3 + 4);
      if ((v40 & 4) != 0)
      {
        if (!(_DWORD)v42 || (v64 = *v41 - 48, v64 > 9) || v42 >= 2 && *v41 == 48)
        {
LABEL_106:
          v65 = 0;
        }
        else
        {
          v69 = v42 - 1;
          v70 = v41 + 1;
          while (v69)
          {
            if (v64 > 0x19999999)
              goto LABEL_106;
            v71 = *v70 - 48;
            if (v71 > 9)
              goto LABEL_106;
            v65 = 0;
            v23 = __CFADD__(v71, 10 * v64);
            v64 = v71 + 10 * v64;
            --v69;
            ++v70;
            if (v23)
              goto LABEL_107;
          }
          v65 = 0x100000000;
          if (v64 == -1)
            v65 = 0;
        }
LABEL_107:
        if ((v65 & 0x100000000) == 0)
          return 0;
      }
      else
      {
        if ((_DWORD)v42
          && (v43 = *(unsigned __int16 *)v41 - 48, v43 <= 9)
          && (v42 < 2 || *(_WORD *)v41 != 48))
        {
          v45 = (unsigned __int16 *)(v41 + 2);
          v46 = v42 - 1;
          while (v46)
          {
            if (v43 <= 0x19999999)
            {
              v47 = *v45 - 48;
              if (v47 <= 9)
              {
                v23 = __CFADD__(v47, 10 * v43);
                v43 = v47 + 10 * v43;
                ++v45;
                --v46;
                if (!v23)
                  continue;
              }
            }
            goto LABEL_57;
          }
          v24 = v43 == -1;
          v44 = 0x100000000;
          if (v24)
            v44 = 0;
        }
        else
        {
LABEL_57:
          v44 = 0;
        }
        if ((v44 & 0x100000000) == 0)
          return 0;
      }
      return JSC::JSObject::getOwnPropertySlotByIndex();
    }
    return 0;
  }
  if ((v32 & 0x20) != 0)
    v32 = *(_DWORD *)(a3 + 32);
  v53 = *(_DWORD *)(v28 + 12);
  v54 = v53 & (v32 >> 8);
  v55 = *(_DWORD *)(v30 + 4 * v54);
  if (!v55)
    goto LABEL_50;
  v56 = v30 + 4 * v31;
  v57 = 1;
  while (1)
  {
    v58 = (v55 - 1);
    if (*(_QWORD *)(v56 + 16 * v58) == a3)
      break;
    v54 = (v54 + v57) & v53;
    v55 = *(_DWORD *)(v30 + 4 * v54);
    ++v57;
    if (!v55)
      goto LABEL_50;
  }
  v48 = *(unsigned int *)(v56 + 16 * v58 + 8) | ((unint64_t)*(unsigned __int8 *)(v56 + 16 * v58 + 12) << 32);
LABEL_69:
  if ((_DWORD)v48 == -1)
    goto LABEL_50;
  if ((int)v48 > 63)
  {
    v49 = *(_QWORD *)(a1 + 8) - 8;
    v50 = 0x3F00000000 - (v48 << 32);
  }
  else
  {
    v49 = a1 + 16;
    v50 = v48 << 32;
  }
  v51 = *(_QWORD *)(v49 + (v50 >> 29));
  if ((v51 & 0xFFFE000000000002) != 0)
    goto LABEL_75;
  v52 = *(unsigned __int8 *)(v51 + 5);
  if (v52 != 6)
  {
    if (v52 != 5)
    {
LABEL_75:
      *(_QWORD *)a4 = v51;
      *(_QWORD *)(a4 + 32) = a1;
      *(_DWORD *)(a4 + 16) = HIDWORD(v48);
      *(_DWORD *)(a4 + 20) = v48;
      result = 1;
      *(_WORD *)(a4 + 48) = 257;
      return result;
    }
    JSC::JSObject::fillGetterPropertySlot();
    return 1;
  }
  v59 = *(_DWORD *)(v27 + 16) & 3;
  v61 = *(_QWORD *)(v51 + 8);
  v60 = *(_QWORD *)(v51 + 16);
  if (MEMORY[0x1E0CBE830] == 16 * *(unsigned int *)(16 * (*(_DWORD *)v51 & 0xFFFFFFFE) + 0x4C))
  {
    v63 = *(_QWORD *)(v51 + 24);
    v62 = *(_QWORD *)(v51 + 32);
    *(_QWORD *)a4 = v61;
    *(_QWORD *)(a4 + 8) = v60;
    *(_DWORD *)(a4 + 16) = HIDWORD(v48);
    *(_QWORD *)(a4 + 32) = a1;
    *(_BYTE *)(a4 + 49) = 3;
    result = 1;
    if (v59 != 2)
      *(_BYTE *)(a4 + 48) = 1;
    *(_BYTE *)(a4 + 51) = 1;
    *(_QWORD *)(a4 + 72) = v63;
    *(_QWORD *)(a4 + 80) = v62;
  }
  else
  {
    *(_QWORD *)a4 = v61;
    *(_QWORD *)(a4 + 8) = v60;
    *(_DWORD *)(a4 + 16) = HIDWORD(v48);
    *(_QWORD *)(a4 + 32) = a1;
    result = 1;
    *(_BYTE *)(a4 + 49) = 3;
    if (v59 != 2)
      *(_BYTE *)(a4 + 48) = 1;
  }
  return result;
}

uint64_t WebCore::JSSVGPointList::getOwnPropertySlotByIndex(WebCore::JSSVGPointList *this, JSC::JSObject *a2, JSC::JSGlobalObject *a3, uint64_t a4, JSC::PropertySlot *a5)
{
  _DWORD *v7;
  JSC::VM *v8;
  uint64_t v9;
  WTF *v10;
  WebCore::JSDOMGlobalObject *v11;
  unint64_t v12;
  uint64_t result;
  WTF *v14;

  if ((_DWORD)a3 == -1)
    return JSC::JSObject::getOwnPropertySlotByIndex();
  v7 = (_DWORD *)*((_QWORD *)this + 3);
  if (v7[11] <= a3)
    return JSC::JSObject::getOwnPropertySlotByIndex();
  v8 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v9 = *(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28);
  (*(void (**)(WTF **__return_ptr, _DWORD *, JSC::JSGlobalObject *))(*(_QWORD *)v7 + 48))(&v14, v7, a3);
  v10 = v14;
  v12 = WebCore::wrap<WebCore::SVGPoint>(v9, v14, v11);
  if (*((_DWORD *)v10 + 2) == 1)
    (*(void (**)(WTF *))(*(_QWORD *)v10 + 8))(v10);
  else
    --*((_DWORD *)v10 + 2);
  if (*((_DWORD *)v8 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v8) & 1) != 0)
    return 0;
  *(_QWORD *)a4 = v12;
  *(_DWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 32) = this;
  result = 1;
  *(_BYTE *)(a4 + 49) = 1;
  return result;
}

uint64_t WebCore::JSSVGPointList::getOwnPropertyNames(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v4;
  int v5;
  uint64_t *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  int v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44[2];
  char v45;
  WTF::StringImpl *v46;

  v4 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 44);
  if (v4)
  {
    v5 = 0;
    v6 = a3 + 1;
    while (1)
    {
      JSC::Identifier::from();
      v8 = v43;
      v46 = v43;
      v9 = *((_DWORD *)v43 + 4);
      if ((v9 & 0x20) != 0)
      {
        if ((a3[3] & 1) == 0 || *((_BYTE *)a3 + 25) && (*((_BYTE *)v43 + 36) & 4) != 0)
          goto LABEL_60;
      }
      else if ((a3[3] & 2) == 0)
      {
        goto LABEL_60;
      }
      v10 = *a3;
      v11 = *(unsigned int *)(*a3 + 20);
      if (v11 <= 0x13)
      {
        if ((_DWORD)v11)
        {
          v12 = *(WTF::StringImpl ***)(v10 + 8);
          while (*v12 != v43)
          {
            ++v12;
            if (!--v11)
              goto LABEL_19;
          }
          goto LABEL_60;
        }
LABEL_19:
        if ((v9 & 0x20) != 0)
        {
          v33 = *(_DWORD *)v8 + 2;
        }
        else
        {
          if ((v9 & 0x10) != 0)
          {
            *(_DWORD *)v8 += 2;
          }
          else
          {
            WTF::AtomStringImpl::addSlowCase();
            v8 = v44[0];
          }
          v33 = *(_DWORD *)v8;
          *(_DWORD *)v8 += 2;
          if (!v33)
          {
            WTF::StringImpl::destroy(v8, v7);
LABEL_54:
            v34 = (uint64_t *)(v10 + 8);
            v44[0] = v8;
            v35 = *(unsigned int *)(v10 + 20);
            if ((_DWORD)v35 == *(_DWORD *)(v10 + 16))
            {
              v36 = (uint64_t *)WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v34, v35 + 1, (unint64_t)v44);
              v35 = *(unsigned int *)(v10 + 20);
              v37 = *(_QWORD *)(v10 + 8);
              v38 = *v36;
              *v36 = 0;
              *(_QWORD *)(v37 + 8 * v35) = v38;
            }
            else
            {
              v39 = *v34;
              v44[0] = 0;
              *(_QWORD *)(v39 + 8 * v35) = v8;
            }
            *(_DWORD *)(v10 + 20) = v35 + 1;
            v40 = v44[0];
            v44[0] = 0;
            if (v40)
            {
              if (*(_DWORD *)v40 == 2)
                WTF::StringImpl::destroy(v40, v7);
              else
                *(_DWORD *)v40 -= 2;
            }
            goto LABEL_60;
          }
        }
        *(_DWORD *)v8 = v33;
        goto LABEL_54;
      }
      if (!*v6 || !*(_DWORD *)(*v6 - 12))
        break;
LABEL_17:
      WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add(a3 + 1, (uint64_t *)&v46, (uint64_t)v44);
      if (v45)
      {
        v8 = v46;
        v10 = *a3;
        v9 = *((_DWORD *)v46 + 4);
        goto LABEL_19;
      }
LABEL_60:
      v41 = v43;
      v43 = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2)
          WTF::StringImpl::destroy(v41, v7);
        else
          *(_DWORD *)v41 -= 2;
      }
      if (++v5 == v4)
        return JSC::JSObject::getOwnPropertyNames();
    }
    v13 = *(uint64_t **)(v10 + 8);
    v14 = &v13[v11];
    while (1)
    {
      v15 = *v13;
      v16 = *v6;
      if (*v6
        || (WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(a3 + 1, 8u, 0), (v16 = *v6) != 0))
      {
        v17 = *(_DWORD *)(v16 - 8);
      }
      else
      {
        v17 = 0;
      }
      v18 = (~(v15 << 32) + v15) ^ ((unint64_t)(~(v15 << 32) + v15) >> 22);
      v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
      v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
      v21 = v17 & ((v20 >> 31) ^ v20);
      v22 = (uint64_t *)(v16 + 8 * v21);
      v23 = *v22;
      if (*v22)
      {
        v24 = 0;
        v25 = 1;
        while (v23 != v15)
        {
          if (v23 == -1)
            v24 = v22;
          v21 = (v21 + v25) & v17;
          v22 = (uint64_t *)(v16 + 8 * v21);
          v23 = *v22;
          ++v25;
          if (!*v22)
          {
            if (v24)
            {
              *v24 = 0;
              --*(_DWORD *)(*v6 - 16);
              v22 = v24;
            }
            goto LABEL_34;
          }
        }
        goto LABEL_47;
      }
LABEL_34:
      *v22 = v15;
      v26 = *v6;
      v27 = *v6 ? *(_DWORD *)(v26 - 12) + 1 : 1;
      *(_DWORD *)(v26 - 12) = v27;
      v28 = *v6;
      v29 = *v6 ? *(_DWORD *)(v28 - 12) : 0;
      v30 = (*(_DWORD *)(v28 - 16) + v29);
      v31 = *(unsigned int *)(v28 - 4);
      if (v31 > 0x400)
        break;
      if (3 * v31 <= 4 * v30)
      {
        if ((_DWORD)v31)
          goto LABEL_43;
        v32 = 8;
        goto LABEL_46;
      }
LABEL_47:
      if (++v13 == v14)
        goto LABEL_17;
    }
    if (v31 > 2 * v30)
      goto LABEL_47;
LABEL_43:
    v32 = (_DWORD)v31 << (6 * *(_DWORD *)(v28 - 12) >= (2 * v31));
LABEL_46:
    WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(a3 + 1, v32, v22);
    goto LABEL_47;
  }
  return JSC::JSObject::getOwnPropertyNames();
}

uint64_t WebCore::JSSVGPointList::defineOwnProperty(uint64_t a1, WTF::StringImpl **a2, uint64_t a3, JSC::PropertyDescriptor *this, int a5)
{
  JSC::VM *v9;
  int v10;
  _WORD *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int16 *v25;
  uint64_t v26;
  unsigned int v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  _DWORD *v32;
  BOOL v33;
  JSValue v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  unsigned __int8 *v42;
  unsigned int v43;
  WTF::StringImpl *v44[2];
  __int128 v45;
  JSC::VM *v46;
  _DWORD *v47;
  WTF::StringImpl *v48;

  v9 = a2[7];
  v46 = v9;
  if (!a3)
    goto LABEL_51;
  v10 = *(_DWORD *)(a3 + 16);
  if ((v10 & 0x20) != 0)
    goto LABEL_51;
  v11 = *(_WORD **)(a3 + 8);
  v12 = *(unsigned int *)(a3 + 4);
  if ((v10 & 4) == 0)
  {
    if ((_DWORD)v12 && (v13 = (unsigned __int16)*v11 - 48, v13 <= 9) && (v12 < 2 || *v11 != 48))
    {
      v25 = v11 + 1;
      v26 = v12 - 1;
      while (v26)
      {
        if (v13 <= 0x19999999)
        {
          v27 = *v25 - 48;
          if (v27 <= 9)
          {
            v28 = __CFADD__(v27, 10 * v13);
            v13 = v27 + 10 * v13;
            ++v25;
            --v26;
            if (!v28)
              continue;
          }
        }
        goto LABEL_8;
      }
      v33 = v13 == -1;
      v16 = v13 & 0xFFFFFF00;
      v15 = v13;
      v14 = 0x100000000;
      if (v33)
      {
        v14 = 0;
        v15 = 0;
        v16 = 0;
      }
    }
    else
    {
LABEL_8:
      v14 = 0;
      v15 = 0;
      v16 = 0;
    }
    v17 = v16 | v15;
    if ((v14 & 0x100000000) != 0)
      goto LABEL_10;
LABEL_51:
    v40 = *((_OWORD *)this + 1);
    *(_OWORD *)v44 = *(_OWORD *)this;
    v45 = v40;
    return JSC::JSObject::defineOwnProperty();
  }
  if (!(_DWORD)v12)
  {
    v38 = 0;
    goto LABEL_49;
  }
  v37 = *(unsigned __int8 *)v11 - 48;
  if (v37 > 9 || v12 >= 2 && *(_BYTE *)v11 == 48)
  {
LABEL_48:
    v38 = 0;
    LODWORD(v12) = 0;
LABEL_49:
    v39 = 0;
    goto LABEL_50;
  }
  v41 = v12 - 1;
  v42 = (unsigned __int8 *)v11 + 1;
  while (v41)
  {
    if (v37 > 0x19999999)
      goto LABEL_48;
    v43 = *v42 - 48;
    if (v43 > 9)
      goto LABEL_48;
    v38 = 0;
    LODWORD(v12) = 0;
    v39 = 0;
    v28 = __CFADD__(v43, 10 * v37);
    v37 = v43 + 10 * v37;
    --v41;
    ++v42;
    if (v28)
      goto LABEL_50;
  }
  if (v37 == -1)
    v38 = 0;
  else
    v38 = v37 & 0xFFFFFF00;
  if (v37 == -1)
    LODWORD(v12) = 0;
  else
    LODWORD(v12) = v37;
  if (v37 == -1)
    v39 = 0;
  else
    v39 = 0x100000000;
LABEL_50:
  v17 = v12 | v38;
  if ((v39 & 0x100000000) == 0)
    goto LABEL_51;
LABEL_10:
  if ((JSC::PropertyDescriptor::isDataDescriptor(this) & 1) != 0)
  {
    v18 = *(_QWORD *)this;
    v44[0] = a2[7];
    v19 = JSC::jsDynamicCast<WebCore::JSSVGPoint *>(v18);
    if (!v19 || (v20 = *(_DWORD **)(v19 + 24)) == 0)
    {
      JSC::throwTypeError();
      return 1;
    }
    v21 = *(_QWORD *)(a1 + 24);
    ++v20[2];
    v47 = v20;
    if (*(_BYTE *)(v21 + 24) == 1)
    {
      v22 = 4;
      LOBYTE(v44[0]) = 4;
      v23 = 1;
      LODWORD(v45) = 1;
      v44[1] = 0;
    }
    else
    {
      LOBYTE(v44[0]) = 1;
      LODWORD(v45) = 0;
      if (*(_DWORD *)(v21 + 44) > v17)
      {
        (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, uint64_t, _DWORD **))(*(_QWORD *)v21 + 64))(&v48, v21, v17, &v47);
        v29 = *(_QWORD *)(v21 + 16);
        if (v29)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v29 + 32))(v29, v21);
        v22 = 0;
        v30 = 0;
        v44[0] = v48;
        LODWORD(v45) = 0;
        v31 = 1;
LABEL_32:
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32FACF8[v30])(&v48, v44);
        v32 = v47;
        v47 = 0;
        if (v32)
        {
          if (v32[2] == 1)
          {
            (*(void (**)(_DWORD *))(*(_QWORD *)v32 + 8))(v32);
            if ((v31 & 1) != 0)
              return 1;
            goto LABEL_41;
          }
          --v32[2];
        }
        if ((v31 & 1) != 0)
          return 1;
LABEL_41:
        LOBYTE(v44[0]) = v22;
        v44[1] = 0;
        if (!*((_QWORD *)v9 + 2))
        {
          v34.super.isa = (Class)WebCore::createDOMException((JSC *)a2, (JSC::JSGlobalObject *)v22, (JSC::JSGlobalObject *)&v44[1]);
          JSC::VM::throwException(v9, (JSC::JSGlobalObject *)a2, v34);
          v36 = v44[1];
          v44[1] = 0;
          if (v36)
          {
            if (*(_DWORD *)v36 == 2)
              WTF::StringImpl::destroy(v36, v35);
            else
              *(_DWORD *)v36 -= 2;
          }
        }
        return 1;
      }
      v22 = 0;
      v23 = 0;
    }
    ((uint64_t (**)(WTF::StringImpl **, char *))off_1E32F83C8)[v23](&v48, (char *)v44);
    v31 = 0;
    LOBYTE(v44[0]) = v22;
    v30 = 1;
    LODWORD(v45) = 1;
    v44[1] = 0;
    goto LABEL_32;
  }
  if (a5)
    JSC::throwTypeError();
  return 0;
}

uint64_t WebCore::JSSVGPointList::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::JSSVGPointList::createPrototype(WebCore::JSSVGPointList *this, JSC::JSCell **a2, WebCore::JSDOMGlobalObject *a3)
{
  unint64_t v4;
  WebCore::JSDOMGlobalObject *v5;
  JSC::Structure *v6;

  v4 = JSC::Structure::create((uint64_t *)this, (int)a2, a2[82]);
  *(_DWORD *)(v4 + 16) |= 0x80000u;
  return WebCore::JSSVGPointListPrototype::create(this, v4, v5, v6);
}

unint64_t WebCore::JSSVGPointListPrototype::create(WebCore::JSSVGPointListPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  unint64_t v6;
  int v7;

  v6 = JSC::allocateCell<WebCore::JSAbstractRangePrototype>((uint64_t)this);
  v7 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)v6 = a2 >> 4;
  *(_DWORD *)(v6 + 4) = v7;
  *(_QWORD *)(v6 + 8) = 0;
  WebCore::JSSVGPointListPrototype::finishCreation((WebCore::JSSVGPointListPrototype *)v6, this);
  return v6;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPointList>,(WebCore::DOMConstructorID)852>(uint64_t a1, uint64_t a2)
{
  unint64_t result;
  uint64_t Structure;
  JSC::Heap *v6;
  unint64_t v7;

  result = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6816);
  if (!result)
  {
    Structure = WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPointList>::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 664));
    result = WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPointList>::create(a1, Structure, (JSC::JSCell **)a2);
    *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6816) = result;
    if (result)
    {
      if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
      {
        v6 = (JSC::Heap *)(a1 + 192);
        v7 = result;
        JSC::Heap::writeBarrierSlowPath(v6, (const JSCell *)a2);
        return v7;
      }
    }
  }
  return result;
}

unint64_t WebCore::jsSVGPointListConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGPointListPrototype::s_info != (char **)(16
                                                            * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                              + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPointList>,(WebCore::DOMConstructorID)852>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGPointList_length(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 24) + 44);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

unint64_t WebCore::jsSVGPointList_numberOfItems(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 24) + 44);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

uint64_t WebCore::JSSVGPointListOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

_QWORD *WebCore::JSSVGPointListOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::wrap<WebCore::SVGPointList>(uint64_t a1, WTF *a2)
{
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  WTF *v10;
  int v11;
  uint64_t v12;
  unint64_t SlowCase;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  void *v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *Allocator;
  unint64_t v37;
  _QWORD *v38;
  WTF *v39;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 3320) + 32);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 - 8);
    v6 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
    v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
    v9 = v5 & ((v8 >> 31) ^ v8);
    v10 = *(WTF **)(v4 + 16 * v9);
    if (v10 == a2)
    {
LABEL_6:
      v12 = *(_QWORD *)(v4 + 16 * v9 + 8);
      if (v12)
      {
        if ((*(_BYTE *)(v12 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v12;
          if (*(_QWORD *)v12)
            return SlowCase;
        }
      }
    }
    else
    {
      v11 = 1;
      while (v10)
      {
        v9 = ((_DWORD)v9 + v11) & v5;
        v10 = *(WTF **)(v4 + 16 * v9);
        ++v11;
        if (v10 == a2)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a2 + 2);
  if (*(void (***)(WebCore::SVGPointList *__hidden))a2 != off_1E3470938)
  {
    __break(0xC471u);
    JUMPOUT(0x194F2F408);
  }
  v14 = WebCore::getDOMStructure<WebCore::JSSVGPointList>(*(WebCore::JSSVGPointList **)(a1 + 56), (JSC::JSCell **)a1);
  v15 = *(_QWORD *)(a1 + 56);
  v16 = *(_QWORD *)(v15 + 41456);
  v17 = *(_QWORD *)(v16 + 23536);
  v18 = *(_QWORD **)(v17 + 6896);
  if (!v18)
  {
    v19 = *(_QWORD *)(v16 + 22648);
    if (__ldaxr((unsigned __int8 *)v19))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v19))
    {
      goto LABEL_15;
    }
    MEMORY[0x19AEA534C](v19);
LABEL_15:
    v21 = *(_QWORD *)(v19 + 2824);
    if (!*(_QWORD *)(v21 + 6896))
    {
      v22 = WTF::fastMalloc((WTF *)0xF8);
      WTF::CString::CString((WTF::CString *)&v39, "IsoSpace T");
      v38 = 0;
      MEMORY[0x19AEA3204](v22, &v39, v15 + 192, v15 + 1872, 32, 8, &v38);
      v24 = (uint64_t)v38;
      v38 = 0;
      if (v24)
        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
      v25 = v39;
      v39 = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 1)
          WTF::fastFree(v25, v23);
        else
          --*(_DWORD *)v25;
      }
      v26 = *(_QWORD *)(v21 + 6896);
      *(_QWORD *)(v21 + 6896) = v22;
      if (v26)
        (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
    }
    v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
    JSC::GCClient::IsoSubspace::IsoSubspace();
    v28 = *(_QWORD *)(v17 + 6896);
    *(_QWORD *)(v17 + 6896) = v18;
    if (v28)
    {
      v29 = (WTF *)MEMORY[0x19AEA3528](v28, v27);
      WTF::fastFree(v29, v30);
    }
    v31 = __ldxr((unsigned __int8 *)v19);
    if (v31 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v19))
        goto LABEL_30;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v19);
  }
LABEL_30:
  SlowCase = v18[3];
  if (SlowCase >= v18[4])
  {
    SlowCase = v18[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_32;
    }
    v37 = *(_QWORD *)(SlowCase + 8) ^ v18[6];
    v18[4] = SlowCase + HIDWORD(v37);
    v18[5] = SlowCase + (int)v37;
  }
  v18[3] = SlowCase + 32;
LABEL_32:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v14);
  *(_QWORD *)(SlowCase + 24) = a2;
  if (*(_BYTE *)(v15 + 755))
    __dmb(0xAu);
  v32 = *(_QWORD *)(a1 + 3320);
  if ((byte_1ECE81688 & 1) == 0)
  {
    qword_1ECE81680 = (uint64_t)&off_1E32F76B0;
    byte_1ECE81688 = 1;
  }
  v39 = a2;
  if ((SlowCase & 8) != 0)
    v33 = (SlowCase - 112) | 1;
  else
    v33 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v33 & 1) != 0)
    v34 = v33 + 47;
  else
    v34 = *(_QWORD *)v33 + 32;
  Allocator = *(_QWORD **)(v34 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v34 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1ECE81680;
  Allocator[2] = v32;
  v38 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v32 + 32), (uint64_t *)&v39, (uint64_t *)&v38);
  if (v38)
    v38[1] = 3;
  return SlowCase;
}

WTF::StringImpl *WebCore::JSSVGPolygonElementPrototype::finishCreation(WebCore::JSSVGPolygonElementPrototype *this, JSC::VM *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(a2, (uint64_t)&WebCore::JSSVGPolygonElement::s_info, &WebCore::JSSVGPolygonElementPrototypeTableValues, this);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5 = JSC::jsNontrivialString((uint64_t)a2, &v8);
  JSC::JSObject::putDirectWithoutTransition((int *)this, a2, v4, v5, 6);
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::JSSVGPolygonElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGGeometryElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGGeometryElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGGeometryElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::JSSVGPolygonElement::createPrototype(WebCore::JSSVGPolygonElement *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  JSC::JSCell *v5;
  unint64_t v6;
  JSC::Structure *v7;

  v5 = (JSC::JSCell *)WebCore::JSSVGGeometryElement::prototype(this, a2, a3);
  v6 = JSC::Structure::create((uint64_t *)this, (int)a2, v5);
  *(_DWORD *)(v6 + 16) |= 0x80000u;
  return WebCore::JSSVGPolygonElementPrototype::create(this, a2, v6, v7);
}

unint64_t WebCore::JSSVGPolygonElementPrototype::create(WebCore::JSSVGPolygonElementPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  unint64_t v6;
  int v7;

  v6 = JSC::allocateCell<WebCore::JSAbstractRangePrototype>((uint64_t)this);
  v7 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)v6 = a3 >> 4;
  *(_DWORD *)(v6 + 4) = v7;
  *(_QWORD *)(v6 + 8) = 0;
  WebCore::JSSVGPolygonElementPrototype::finishCreation((WebCore::JSSVGPolygonElementPrototype *)v6, this);
  return v6;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPolygonElement>,(WebCore::DOMConstructorID)853>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  unint64_t v16;
  WebCore::JSDOMGlobalObject *v17;
  uint64_t v18;
  unint64_t v20;
  unint64_t v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  int v24;
  int v25;
  uint64_t v26;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6824);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGGeometryElement>,(WebCore::DOMConstructorID)813>(a1, a2);
  v7 = v6;
  LODWORD(v22) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v20 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v20);
    v5[2] = SlowCase + (int)v20;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v22, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPolygonElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 >= v10[2847])
  {
    v2 = v10[2848];
    if ((v2 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v2 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_11;
    }
    v21 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v21);
    v10[2848] = v2 + (int)v21;
  }
  v10[2846] = v2 + 48;
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v22);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v22);
  v14 = v22;
  v22 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v22);
  v16 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(WebCore::getDOMStructure<WebCore::JSSVGPolygonElement>(a1, (JSC::VM *)a2, v17) + 48);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v16, v18, 14, (uint64_t)&v22);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6824) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGPolygonElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGPolygonElementPrototype::s_info != (char **)(16
                                                                 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                   + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPolygonElement>,(WebCore::DOMConstructorID)853>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGPolygonElement_points(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGPointList>(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 224) + 40));
}

unint64_t WebCore::jsSVGPolygonElement_animatedPoints(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  _QWORD *v6;
  _DWORD *v7;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 224);
  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = *(WTF **)(v2 + 48);
  if (!v4)
  {
    v5 = *(_QWORD *)(v2 + 40);
    v4 = (WTF *)WTF::fastMalloc((WTF *)0x38);
    v6 = (_QWORD *)WebCore::SVGValuePropertyList<WebCore::SVGPoint>::SVGValuePropertyList((uint64_t)v4, v5, 1);
    *v6 = off_1E3470938;
    v6[6] = &unk_1E34709B0;
    v7 = *(_DWORD **)(v2 + 48);
    *(_QWORD *)(v2 + 48) = v4;
    if (v7)
    {
      if (v7[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
        v4 = *(WTF **)(v2 + 48);
      }
      else
      {
        --v7[2];
      }
    }
  }
  return WebCore::wrap<WebCore::SVGPointList>(v3, v4);
}

uint64_t WebCore::JSSVGPolygonElement::subspaceForImpl(WebCore::JSSVGPolygonElement *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  void *v12;
  int v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 6904);
  if (v4)
    return v4;
  v7 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v7, a2);
LABEL_6:
  v9 = *(_QWORD *)(v7 + 2824);
  v20 = *(_QWORD *)(v9 + 6904);
  if (!v20)
  {
    v14 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v22, "IsoSpace T");
    v21 = 0;
    MEMORY[0x19AEA3204](v14, &v22, (char *)this + 192, (char *)this + 1872, 40, 8, &v21);
    v16 = v21;
    v21 = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    v17 = v22;
    v22 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 1)
        WTF::fastFree(v17, v15);
      else
        --*(_DWORD *)v17;
    }
    v20 = v14;
    v18 = *(_QWORD *)(v9 + 6904);
    *(_QWORD *)(v9 + 6904) = v14;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    v19 = *(unsigned int *)(v7 + 2844);
    if ((_DWORD)v19 == *(_DWORD *)(v7 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v7 + 2832, (unint64_t)&v20);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v7 + 2832) + 8 * v19) = v14;
      *(_DWORD *)(v7 + 2844) = v19 + 1;
    }
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v10 = *(_QWORD *)(v3 + 6904);
  *(_QWORD *)(v3 + 6904) = v4;
  if (v10)
  {
    v11 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v11, v12);
  }
  v13 = __ldxr((unsigned __int8 *)v7);
  if (v13 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
  return v4;
}

uint64_t WebCore::JSSVGPolylineElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGGeometryElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGGeometryElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGGeometryElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSVGPolylineElementPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGPolylineElementPrototype::create(WebCore::JSSVGPolylineElementPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(this, (uint64_t)&WebCore::JSSVGPolylineElement::s_info, &WebCore::JSSVGPolylineElementPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPolylineElement>,(WebCore::DOMConstructorID)854>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6832);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGGeometryElement>,(WebCore::DOMConstructorID)813>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v34);
    v5[2] = SlowCase + (int)v34;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPolylineElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v35 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v35);
    v10[2848] = v2 + (int)v35;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSSVGPolylineElement::s_info
         + ~((_QWORD)&WebCore::JSSVGPolylineElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGPolylineElement::s_info
                                                                      + ~((_QWORD)&WebCore::JSSVGPolylineElement::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSSVGPolylineElement::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSSVGPolylineElement::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSSVGGeometryElement::prototype((WebCore::JSSVGGeometryElement *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSSVGPolylineElementPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v30 = (JSC::JSCell *)WebCore::JSSVGPolylineElementPrototype::create((WebCore::JSSVGPolylineElementPrototype *)a1, (JSC::VM *)a2, Structure, v29);
  v31 = WebCore::JSSVGPolylineElement::createStructure((uint64_t *)a1, a2, v30);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v31, (uint64_t)&WebCore::JSSVGPolylineElement::s_info);
LABEL_22:
  v32 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v32, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6832) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGPolylineElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGPolylineElementPrototype::s_info != (char **)(16
                                                                  * *(unsigned int *)(16
                                                                                    * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                    + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPolylineElement>,(WebCore::DOMConstructorID)854>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGPolylineElement_points(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGPointList>(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 224) + 40));
}

unint64_t WebCore::jsSVGPolylineElement_animatedPoints(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  _QWORD *v6;
  _DWORD *v7;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 224);
  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = *(WTF **)(v2 + 48);
  if (!v4)
  {
    v5 = *(_QWORD *)(v2 + 40);
    v4 = (WTF *)WTF::fastMalloc((WTF *)0x38);
    v6 = (_QWORD *)WebCore::SVGValuePropertyList<WebCore::SVGPoint>::SVGValuePropertyList((uint64_t)v4, v5, 1);
    *v6 = off_1E3470938;
    v6[6] = &unk_1E34709B0;
    v7 = *(_DWORD **)(v2 + 48);
    *(_QWORD *)(v2 + 48) = v4;
    if (v7)
    {
      if (v7[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
        v4 = *(WTF **)(v2 + 48);
      }
      else
      {
        --v7[2];
      }
    }
  }
  return WebCore::wrap<WebCore::SVGPointList>(v3, v4);
}

uint64_t WebCore::JSSVGPolylineElement::subspaceForImpl(WebCore::JSSVGPolylineElement *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 6912);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  v20 = *(_QWORD *)(v8 + 6912);
  if (!v20)
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v22, "IsoSpace T");
    v21 = 0;
    MEMORY[0x19AEA3204](v9, &v22, (char *)this + 192, (char *)this + 1872, 40, 8, &v21);
    v11 = v21;
    v21 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v22;
    v22 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v20 = v9;
    v13 = *(_QWORD *)(v8 + 6912);
    *(_QWORD *)(v8 + 6912) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = *(unsigned int *)(v6 + 2844);
    if ((_DWORD)v14 == *(_DWORD *)(v6 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v6 + 2832, (unint64_t)&v20);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = v9;
      *(_DWORD *)(v6 + 2844) = v14 + 1;
    }
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 6912);
  *(_QWORD *)(v3 + 6912) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

_DWORD *WebCore::JSSVGPreserveAspectRatio::destroy(WebCore::JSSVGPreserveAspectRatio *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSSVGPreserveAspectRatio::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSVGPreserveAspectRatioPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGPreserveAspectRatioPrototype::create(WebCore::JSSVGPreserveAspectRatioPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<17u>(this, (uint64_t)&WebCore::JSSVGPreserveAspectRatio::s_info, (uint64_t)&WebCore::JSSVGPreserveAspectRatioPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPreserveAspectRatio>,(WebCore::DOMConstructorID)855>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6840);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPreserveAspectRatio>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSSVGPreserveAspectRatio::s_info
         + ~((_QWORD)&WebCore::JSSVGPreserveAspectRatio::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGPreserveAspectRatio::s_info
                                                                          + ~((_QWORD)&WebCore::JSSVGPreserveAspectRatio::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSSVGPreserveAspectRatio::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSSVGPreserveAspectRatio::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSSVGPreserveAspectRatioPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSSVGPreserveAspectRatioPrototype::create((WebCore::JSSVGPreserveAspectRatioPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSSVGPreserveAspectRatio::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSSVGPreserveAspectRatio::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  JSC::reifyStaticProperties<14u>((JSC::VM *)a1, (uint64_t)&WebCore::JSSVGPreserveAspectRatio::s_info, (uint64_t)&WebCore::JSSVGPreserveAspectRatioConstructorTableValues, (JSC::JSObject *)v2);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6840) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGPreserveAspectRatioConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGPreserveAspectRatioPrototype::s_info != (char **)(16
                                                                      * *(unsigned int *)(16
                                                                                        * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                        + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPreserveAspectRatio>,(WebCore::DOMConstructorID)855>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGPreserveAspectRatio_align(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a2 + 24) + 26) | 0xFFFE000000000000;
}

BOOL WebCore::setJSSVGPreserveAspectRatio_align(JSC *this, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  JSValue v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v20;
  double v21;
  unint64_t v22;
  WTF::StringImpl *v23;

  v4 = *((_QWORD *)this + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGPreserveAspectRatio::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGPreserveAspectRatio::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v22 = a3;
  if (a3 >= 0xFFFE000000000000 && (a3 & 0x80000000) == 0)
  {
LABEL_25:
    if (*(_BYTE *)(v10 + 24) == 1)
    {
      v15 = 4;
    }
    else
    {
      if ((unsigned __int16)(a3 - 11) >= 0xFFF6u)
      {
        *(_BYTE *)(v10 + 26) = a3;
        v20 = *(_QWORD *)(v10 + 16);
        if (v20)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 32))(v20, v10);
        return 1;
      }
      v15 = 6;
    }
    LOBYTE(v22) = v15;
    v23 = 0;
    if (!*(_QWORD *)(v4 + 16))
    {
      v16.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v15, (JSC::JSGlobalObject *)&v23);
      JSC::VM::throwException((JSC::VM *)v4, this, v16);
      v18 = v23;
      v23 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, v17);
        else
          *(_DWORD *)v18 -= 2;
      }
    }
    return 1;
  }
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v22, this);
    v11 = v21;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (!*(_DWORD *)(v4 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) == 0)
  {
    LOWORD(a3) = 0;
    if (fabs(v11) != INFINITY && v11 != 0.0)
    {
      v12 = -floor(-v11);
      v13 = floor(v11);
      if (v11 >= 0.0)
        v12 = v13;
      v14 = fmod(v12, 65536.0);
      if (v14 < 0.0)
        v14 = v14 + 65536.0;
      LODWORD(a3) = (int)v14;
    }
    goto LABEL_25;
  }
  return 0;
}

unint64_t WebCore::jsSVGPreserveAspectRatio_meetOrSlice(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a2 + 24) + 27) | 0xFFFE000000000000;
}

BOOL WebCore::setJSSVGPreserveAspectRatio_meetOrSlice(JSC *this, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  JSValue v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v20;
  double v21;
  unint64_t v22;
  WTF::StringImpl *v23;

  v4 = *((_QWORD *)this + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGPreserveAspectRatio::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGPreserveAspectRatio::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v22 = a3;
  if (a3 >= 0xFFFE000000000000 && (a3 & 0x80000000) == 0)
  {
LABEL_25:
    if (*(_BYTE *)(v10 + 24) == 1)
    {
      v15 = 4;
    }
    else
    {
      if ((unsigned __int16)(a3 - 3) == 65534 || (unsigned __int16)(a3 - 3) == 0xFFFF)
      {
        *(_BYTE *)(v10 + 27) = a3;
        v20 = *(_QWORD *)(v10 + 16);
        if (v20)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 32))(v20, v10);
        return 1;
      }
      v15 = 6;
    }
    LOBYTE(v22) = v15;
    v23 = 0;
    if (!*(_QWORD *)(v4 + 16))
    {
      v16.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v15, (JSC::JSGlobalObject *)&v23);
      JSC::VM::throwException((JSC::VM *)v4, this, v16);
      v18 = v23;
      v23 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, v17);
        else
          *(_DWORD *)v18 -= 2;
      }
    }
    return 1;
  }
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v22, this);
    v11 = v21;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (!*(_DWORD *)(v4 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) == 0)
  {
    LOWORD(a3) = 0;
    if (fabs(v11) != INFINITY && v11 != 0.0)
    {
      v12 = -floor(-v11);
      v13 = floor(v11);
      if (v11 >= 0.0)
        v12 = v13;
      v14 = fmod(v12, 65536.0);
      if (v14 < 0.0)
        v14 = v14 + 65536.0;
      LODWORD(a3) = (int)v14;
    }
    goto LABEL_25;
  }
  return 0;
}

uint64_t WebCore::JSSVGPreserveAspectRatioOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

_QWORD *WebCore::JSSVGPreserveAspectRatioOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::wrap<WebCore::SVGPreserveAspectRatio>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *Allocator;
  unint64_t v52;
  _QWORD *v53;
  WTF *v54;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 2);
  if (*(void (***)(WebCore::SVGPreserveAspectRatio *__hidden))a3 != off_1E32EE030)
  {
    __break(0xC471u);
    JUMPOUT(0x194F31BB4);
  }
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSSVGPreserveAspectRatio::s_info
         + ~((_QWORD)&WebCore::JSSVGPreserveAspectRatio::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGPreserveAspectRatio::s_info
                                                                          + ~((_QWORD)&WebCore::JSSVGPreserveAspectRatio::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSSVGPreserveAspectRatio::s_info)
    {
LABEL_15:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_17;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSSVGPreserveAspectRatio::s_info)
          goto LABEL_15;
      }
    }
  }
  v24 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSSVGPreserveAspectRatioPrototype::createStructure(v24, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSSVGPreserveAspectRatioPrototype::create((WebCore::JSSVGPreserveAspectRatioPrototype *)v24, Structure, v26, v27);
  v29 = WebCore::JSSVGPreserveAspectRatio::createStructure(v24, a2, v28);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSSVGPreserveAspectRatio::s_info);
LABEL_17:
  v30 = *(_QWORD *)(a2 + 56);
  v31 = *(_QWORD *)(v30 + 41456);
  v32 = *(_QWORD *)(v31 + 23536);
  v33 = *(_QWORD **)(v32 + 6920);
  if (v33)
    goto LABEL_37;
  v34 = *(_QWORD *)(v31 + 22648);
  if (__ldaxr((unsigned __int8 *)v34))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v34))
  {
    goto LABEL_22;
  }
  MEMORY[0x19AEA534C](v34);
LABEL_22:
  v36 = *(_QWORD *)(v34 + 2824);
  if (!*(_QWORD *)(v36 + 6920))
  {
    v37 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v54, "IsoSpace T");
    v53 = 0;
    MEMORY[0x19AEA3204](v37, &v54, v30 + 192, v30 + 1872, 32, 8, &v53);
    v39 = (uint64_t)v53;
    v53 = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = v54;
    v54 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1)
        WTF::fastFree(v40, v38);
      else
        --*(_DWORD *)v40;
    }
    v41 = *(_QWORD *)(v36 + 6920);
    *(_QWORD *)(v36 + 6920) = v37;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v43 = *(_QWORD *)(v32 + 6920);
  *(_QWORD *)(v32 + 6920) = v33;
  if (v43)
  {
    v44 = (WTF *)MEMORY[0x19AEA3528](v43, v42);
    WTF::fastFree(v44, v45);
  }
  v46 = __ldxr((unsigned __int8 *)v34);
  if (v46 != 1)
  {
    __clrex();
    goto LABEL_36;
  }
  if (__stlxr(0, (unsigned __int8 *)v34))
LABEL_36:
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
LABEL_37:
  SlowCase = v33[3];
  if (SlowCase >= v33[4])
  {
    SlowCase = v33[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_39;
    }
    v52 = *(_QWORD *)(SlowCase + 8) ^ v33[6];
    v33[4] = SlowCase + HIDWORD(v52);
    v33[5] = SlowCase + (int)v52;
  }
  v33[3] = SlowCase + 32;
LABEL_39:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v23);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v30 + 755))
    __dmb(0xAu);
  v47 = *(_QWORD *)(a2 + 3320);
  if ((byte_1ECE81698 & 1) == 0)
  {
    qword_1ECE81690 = (uint64_t)&off_1E32F76E0;
    byte_1ECE81698 = 1;
  }
  v54 = a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  Allocator = *(_QWORD **)(v49 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1ECE81690;
  Allocator[2] = v47;
  v53 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v47 + 32), (uint64_t *)&v54, (uint64_t *)&v53);
  if (v53)
    v53[1] = 3;
  return SlowCase;
}

uint64_t WebCore::JSSVGRadialGradientElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGGradientElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGGradientElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGGradientElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSVGRadialGradientElementPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGRadialGradientElementPrototype::create(WebCore::JSSVGRadialGradientElementPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<7u>(this, (uint64_t)&WebCore::JSSVGRadialGradientElement::s_info, &WebCore::JSSVGRadialGradientElementPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGRadialGradientElement>,(WebCore::DOMConstructorID)856>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char **v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t Structure;
  JSC::Structure *v28;
  JSC::JSCell *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v33;
  unint64_t v34;
  WTF::StringImpl *v35;
  unint64_t v36;
  int v37;
  int v38;
  uint64_t v39;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6848);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGGradientElement>,(WebCore::DOMConstructorID)814>(a1, a2);
  v7 = v6;
  LODWORD(v35) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v33 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v33);
    v5[2] = SlowCase + (int)v33;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v35, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGRadialGradientElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v34 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v34);
    v10[2848] = v2 + (int)v34;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v35 = 0;
  v36 = v2;
  v37 = -1;
  v38 = 0x1000000;
  v39 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v35);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v35);
  v14 = v35;
  v35 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v35 = 0;
  v36 = v2;
  v37 = -1;
  v38 = 0x1000000;
  v39 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v35);
  v16 = *(_QWORD *)(v5[227] + 2160);
  v17 = *(_QWORD *)(a2 + 3296);
  if (v17)
  {
    v18 = *(_DWORD *)(v17 - 8);
    v19 = ((unint64_t)&WebCore::JSSVGRadialGradientElement::s_info
         + ~((_QWORD)&WebCore::JSSVGRadialGradientElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGRadialGradientElement::s_info
                                                                            + ~((_QWORD)&WebCore::JSSVGRadialGradientElement::s_info << 32)) >> 22);
    v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
    v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
    v22 = v18 & ((v21 >> 31) ^ v21);
    v23 = *(char ***)(v17 + 16 * v22);
    if (v23 == &WebCore::JSSVGRadialGradientElement::s_info)
    {
LABEL_20:
      v25 = *(_QWORD *)(v17 + 16 * v22 + 8);
      if (v25)
        goto LABEL_22;
    }
    else
    {
      v24 = 1;
      while (v23)
      {
        v22 = ((_DWORD)v22 + v24) & v18;
        v23 = *(char ***)(v17 + 16 * v22);
        ++v24;
        if (v23 == &WebCore::JSSVGRadialGradientElement::s_info)
          goto LABEL_20;
      }
    }
  }
  v26 = WebCore::getDOMStructure<WebCore::JSSVGGradientElement>((WebCore::JSSVGGradientElement *)a1, (JSC::VM *)a2);
  Structure = WebCore::JSSVGRadialGradientElementPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(v26 + 48));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v29 = (JSC::JSCell *)WebCore::JSSVGRadialGradientElementPrototype::create((WebCore::JSSVGRadialGradientElementPrototype *)a1, (JSC::VM *)a2, Structure, v28);
  v30 = WebCore::JSSVGRadialGradientElement::createStructure((uint64_t *)a1, a2, v29);
  v25 = WebCore::cacheDOMStructure((JSCell *)a2, v30, (uint64_t)&WebCore::JSSVGRadialGradientElement::s_info);
LABEL_22:
  v31 = *(_QWORD *)(v25 + 48);
  v35 = 0;
  v36 = v2;
  v37 = -1;
  v38 = 0x1000000;
  v39 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v16, v31, 14, (uint64_t)&v35);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6848) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGRadialGradientElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGRadialGradientElementPrototype::s_info != (char **)(16
                                                                        * *(unsigned int *)(16
                                                                                          * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                          + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGRadialGradientElement>,(WebCore::DOMConstructorID)856>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGRadialGradientElement_cx(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 216));
}

unint64_t WebCore::jsSVGRadialGradientElement_cy(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 224));
}

unint64_t WebCore::jsSVGRadialGradientElement_r(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 232));
}

unint64_t WebCore::jsSVGRadialGradientElement_fx(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 240));
}

unint64_t WebCore::jsSVGRadialGradientElement_fy(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 248));
}

unint64_t WebCore::jsSVGRadialGradientElement_fr(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 256));
}

uint64_t WebCore::JSSVGRadialGradientElement::subspaceForImpl(WebCore::JSSVGRadialGradientElement *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 6928);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  v20 = *(_QWORD *)(v8 + 6928);
  if (!v20)
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v22, "IsoSpace T");
    v21 = 0;
    MEMORY[0x19AEA3204](v9, &v22, (char *)this + 192, (char *)this + 1872, 40, 8, &v21);
    v11 = v21;
    v21 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v22;
    v22 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v20 = v9;
    v13 = *(_QWORD *)(v8 + 6928);
    *(_QWORD *)(v8 + 6928) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = *(unsigned int *)(v6 + 2844);
    if ((_DWORD)v14 == *(_DWORD *)(v6 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v6 + 2832, (unint64_t)&v20);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = v9;
      *(_DWORD *)(v6 + 2844) = v14 + 1;
    }
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 6928);
  *(_QWORD *)(v3 + 6928) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

_DWORD *WebCore::JSSVGRect::destroy(WebCore::JSSVGRect *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSSVGRect::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSVGRectPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGRectPrototype::create(WebCore::JSSVGRectPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<5u>(this, (uint64_t)&WebCore::JSSVGRect::s_info, &WebCore::JSSVGRectPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGRect>,(WebCore::DOMConstructorID)857>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6856);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGRect>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSSVGRect::s_info + ~((_QWORD)&WebCore::JSSVGRect::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGRect::s_info + ~((_QWORD)&WebCore::JSSVGRect::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSSVGRect::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSSVGRect::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSSVGRectPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSSVGRectPrototype::create((WebCore::JSSVGRectPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSSVGRect::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSSVGRect::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6856) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGRectConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGRectPrototype::s_info != (char **)(16
                                                       * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGRect>,(WebCore::DOMConstructorID)857>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGRect_x(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(a2 + 24) + 28);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, (double)(int)v4 == v3)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

BOOL WebCore::setJSSVGRect_x(JSC *this, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  float v12;
  JSValue v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  int v18;
  double v19;
  unint64_t v20;
  WTF::StringImpl *v21;

  v4 = *((_QWORD *)this + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGRect::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGRect::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v20 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v20, this);
    v11 = v19;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
    return 0;
  if (v11 < -3.40282347e38)
  {
    *(float *)&v18 = -INFINITY;
LABEL_34:
    v12 = *(float *)&v18;
    goto LABEL_19;
  }
  if (v11 > 3.40282347e38)
  {
    *(float *)&v18 = INFINITY;
    goto LABEL_34;
  }
  v12 = v11;
LABEL_19:
  if (*(_BYTE *)(v10 + 24) == 1)
  {
    LOBYTE(v20) = 4;
    v21 = 0;
    if (!*(_QWORD *)(v4 + 16))
    {
      v13.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)4, (JSC::JSGlobalObject *)&v21);
      JSC::VM::throwException((JSC::VM *)v4, this, v13);
      v15 = v21;
      v21 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v14);
        else
          *(_DWORD *)v15 -= 2;
      }
    }
  }
  else
  {
    *(float *)(v10 + 28) = v12;
    v16 = *(_QWORD *)(v10 + 16);
    if (v16)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 32))(v16, v10);
  }
  return 1;
}

unint64_t WebCore::jsSVGRect_y(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(a2 + 24) + 32);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, (double)(int)v4 == v3)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

BOOL WebCore::setJSSVGRect_y(JSC *this, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  float v12;
  JSValue v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  int v18;
  double v19;
  unint64_t v20;
  WTF::StringImpl *v21;

  v4 = *((_QWORD *)this + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGRect::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGRect::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v20 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v20, this);
    v11 = v19;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
    return 0;
  if (v11 < -3.40282347e38)
  {
    *(float *)&v18 = -INFINITY;
LABEL_34:
    v12 = *(float *)&v18;
    goto LABEL_19;
  }
  if (v11 > 3.40282347e38)
  {
    *(float *)&v18 = INFINITY;
    goto LABEL_34;
  }
  v12 = v11;
LABEL_19:
  if (*(_BYTE *)(v10 + 24) == 1)
  {
    LOBYTE(v20) = 4;
    v21 = 0;
    if (!*(_QWORD *)(v4 + 16))
    {
      v13.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)4, (JSC::JSGlobalObject *)&v21);
      JSC::VM::throwException((JSC::VM *)v4, this, v13);
      v15 = v21;
      v21 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v14);
        else
          *(_DWORD *)v15 -= 2;
      }
    }
  }
  else
  {
    *(float *)(v10 + 32) = v12;
    v16 = *(_QWORD *)(v10 + 16);
    if (v16)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 32))(v16, v10);
  }
  return 1;
}

unint64_t WebCore::jsSVGRect_width(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(a2 + 24) + 36);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, (double)(int)v4 == v3)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

BOOL WebCore::setJSSVGRect_width(JSC *this, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  float v12;
  JSValue v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  int v18;
  double v19;
  unint64_t v20;
  WTF::StringImpl *v21;

  v4 = *((_QWORD *)this + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGRect::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGRect::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v20 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v20, this);
    v11 = v19;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
    return 0;
  if (v11 < -3.40282347e38)
  {
    *(float *)&v18 = -INFINITY;
LABEL_34:
    v12 = *(float *)&v18;
    goto LABEL_19;
  }
  if (v11 > 3.40282347e38)
  {
    *(float *)&v18 = INFINITY;
    goto LABEL_34;
  }
  v12 = v11;
LABEL_19:
  if (*(_BYTE *)(v10 + 24) == 1)
  {
    LOBYTE(v20) = 4;
    v21 = 0;
    if (!*(_QWORD *)(v4 + 16))
    {
      v13.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)4, (JSC::JSGlobalObject *)&v21);
      JSC::VM::throwException((JSC::VM *)v4, this, v13);
      v15 = v21;
      v21 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v14);
        else
          *(_DWORD *)v15 -= 2;
      }
    }
  }
  else
  {
    *(float *)(v10 + 36) = v12;
    v16 = *(_QWORD *)(v10 + 16);
    if (v16)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 32))(v16, v10);
  }
  return 1;
}

unint64_t WebCore::jsSVGRect_height(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(a2 + 24) + 40);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, (double)(int)v4 == v3)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

BOOL WebCore::setJSSVGRect_height(JSC *this, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  float v12;
  JSValue v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  int v18;
  double v19;
  unint64_t v20;
  WTF::StringImpl *v21;

  v4 = *((_QWORD *)this + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGRect::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGRect::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v20 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v20, this);
    v11 = v19;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
    return 0;
  if (v11 < -3.40282347e38)
  {
    *(float *)&v18 = -INFINITY;
LABEL_34:
    v12 = *(float *)&v18;
    goto LABEL_19;
  }
  if (v11 > 3.40282347e38)
  {
    *(float *)&v18 = INFINITY;
    goto LABEL_34;
  }
  v12 = v11;
LABEL_19:
  if (*(_BYTE *)(v10 + 24) == 1)
  {
    LOBYTE(v20) = 4;
    v21 = 0;
    if (!*(_QWORD *)(v4 + 16))
    {
      v13.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)4, (JSC::JSGlobalObject *)&v21);
      JSC::VM::throwException((JSC::VM *)v4, this, v13);
      v15 = v21;
      v21 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v14);
        else
          *(_DWORD *)v15 -= 2;
      }
    }
  }
  else
  {
    *(float *)(v10 + 40) = v12;
    v16 = *(_QWORD *)(v10 + 16);
    if (v16)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 32))(v16, v10);
  }
  return 1;
}

uint64_t WebCore::JSSVGRectOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

_QWORD *WebCore::JSSVGRectOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::createWrapper<WebCore::SVGRect,WebCore::SVGRect>(uint64_t a1, WTF **a2)
{
  WTF *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v16;
  JSC::Structure *v17;
  JSC::JSCell *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  void *v34;
  int v35;
  unint64_t SlowCase;
  WTF *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *Allocator;
  unint64_t v43;
  _QWORD *v44;
  WTF *v45;

  v4 = *a2;
  v5 = *(_QWORD *)(a1 + 3296);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSSVGRect::s_info + ~((_QWORD)&WebCore::JSSVGRect::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGRect::s_info + ~((_QWORD)&WebCore::JSSVGRect::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSSVGRect::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSSVGRect::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = *(uint64_t **)(a1 + 56);
  Structure = WebCore::JSSVGRectPrototype::createStructure(v14, a1, *(JSC::JSCell **)(a1 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v18 = (JSC::JSCell *)WebCore::JSSVGRectPrototype::create((WebCore::JSSVGRectPrototype *)v14, Structure, v16, v17);
  v19 = WebCore::JSSVGRect::createStructure(v14, a1, v18);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v19, (uint64_t)&WebCore::JSSVGRect::s_info);
LABEL_8:
  v20 = *(_QWORD *)(a1 + 56);
  v21 = *(_QWORD *)(v20 + 41456);
  v22 = *(_QWORD *)(v21 + 23536);
  v23 = *(_QWORD **)(v22 + 6936);
  if (v23)
    goto LABEL_28;
  v24 = *(_QWORD *)(v21 + 22648);
  if (__ldaxr((unsigned __int8 *)v24))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v24))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v24);
LABEL_13:
  v26 = *(_QWORD *)(v24 + 2824);
  if (!*(_QWORD *)(v26 + 6936))
  {
    v27 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v45, "IsoSpace T");
    v44 = 0;
    MEMORY[0x19AEA3204](v27, &v45, v20 + 192, v20 + 1872, 32, 8, &v44);
    v29 = (uint64_t)v44;
    v44 = 0;
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    v30 = v45;
    v45 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 1)
        WTF::fastFree(v30, v28);
      else
        --*(_DWORD *)v30;
    }
    v31 = *(_QWORD *)(v26 + 6936);
    *(_QWORD *)(v26 + 6936) = v27;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  }
  v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v32 = *(_QWORD *)(v22 + 6936);
  *(_QWORD *)(v22 + 6936) = v23;
  if (v32)
  {
    v33 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v33, v34);
  }
  v35 = __ldxr((unsigned __int8 *)v24);
  if (v35 != 1)
  {
    __clrex();
    goto LABEL_27;
  }
  if (__stlxr(0, (unsigned __int8 *)v24))
LABEL_27:
    WTF::Lock::unlockSlow((WTF::Lock *)v24);
LABEL_28:
  SlowCase = v23[3];
  if (SlowCase < v23[4])
  {
LABEL_29:
    v23[3] = SlowCase + 32;
    goto LABEL_30;
  }
  SlowCase = v23[5];
  if ((SlowCase & 1) == 0)
  {
    v43 = *(_QWORD *)(SlowCase + 8) ^ v23[6];
    v23[4] = SlowCase + HIDWORD(v43);
    v23[5] = SlowCase + (int)v43;
    goto LABEL_29;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_30:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  v37 = *a2;
  *a2 = 0;
  *(_QWORD *)(SlowCase + 24) = v37;
  if (*(_BYTE *)(v20 + 755))
    __dmb(0xAu);
  v38 = *(_QWORD *)(a1 + 3320);
  if ((byte_1ECE816A8 & 1) == 0)
  {
    qword_1ECE816A0 = (uint64_t)&off_1E32F7710;
    byte_1ECE816A8 = 1;
  }
  v45 = v4;
  if ((SlowCase & 8) != 0)
    v39 = (SlowCase - 112) | 1;
  else
    v39 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v39 & 1) != 0)
    v40 = v39 + 47;
  else
    v40 = *(_QWORD *)v39 + 32;
  Allocator = *(_QWORD **)(v40 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v40 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1ECE816A0;
  Allocator[2] = v38;
  v44 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v38 + 32), (uint64_t *)&v45, (uint64_t *)&v44);
  if (v44)
    v44[1] = 3;
  return SlowCase;
}

uint64_t WebCore::wrap<WebCore::SVGRect>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  WTF *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  WTF *v14;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v3)
  {
    v4 = *(_DWORD *)(v3 - 8);
    v5 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    v8 = v4 & ((v7 >> 31) ^ v7);
    v9 = *(WTF **)(v3 + 16 * v8);
    if (v9 == a3)
    {
LABEL_6:
      v11 = *(_QWORD *)(v3 + 16 * v8 + 8);
      if (v11)
      {
        if ((*(_BYTE *)(v11 + 8) & 3) == 0)
        {
          v12 = *(_QWORD *)v11;
          if (*(_QWORD *)v11)
            return v12;
        }
      }
    }
    else
    {
      v10 = 1;
      while (v9)
      {
        v8 = ((_DWORD)v8 + v10) & v4;
        v9 = *(WTF **)(v3 + 16 * v8);
        ++v10;
        if (v9 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 2);
  v14 = a3;
  if (*(void (***)(WebCore::SVGRect *__hidden))a3 == off_1E32EE110)
  {
    v12 = WebCore::createWrapper<WebCore::SVGRect,WebCore::SVGRect>(a2, &v14);
    if (v14)
    {
      if (*((_DWORD *)v14 + 2) == 1)
        (*(void (**)(void))(*(_QWORD *)v14 + 8))();
      else
        --*((_DWORD *)v14 + 2);
    }
    return v12;
  }
  result = 362;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSVGRectElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGGeometryElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGGeometryElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGGeometryElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::JSSVGRectElement::createPrototype(WebCore::JSSVGRectElement *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  JSC::JSCell *v5;
  unint64_t Structure;
  JSC::Structure *v7;

  v5 = (JSC::JSCell *)WebCore::JSSVGGeometryElement::prototype(this, a2, a3);
  Structure = WebCore::JSSVGRectElementPrototype::createStructure((uint64_t *)this, (uint64_t)a2, v5);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  return WebCore::JSSVGRectElementPrototype::create(this, a2, Structure, v7);
}

uint64_t WebCore::JSSVGRectElementPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGRectElementPrototype::create(WebCore::JSSVGRectElementPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<7u>(this, (uint64_t)&WebCore::JSSVGRectElement::s_info, &WebCore::JSSVGRectElementPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGRectElement>,(WebCore::DOMConstructorID)858>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6864);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGGeometryElement>,(WebCore::DOMConstructorID)813>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v34);
    v5[2] = SlowCase + (int)v34;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGRectElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v35 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v35);
    v10[2848] = v2 + (int)v35;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSSVGRectElement::s_info + ~((_QWORD)&WebCore::JSSVGRectElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGRectElement::s_info + ~((_QWORD)&WebCore::JSSVGRectElement::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSSVGRectElement::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSSVGRectElement::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSSVGGeometryElement::prototype((WebCore::JSSVGGeometryElement *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSSVGRectElementPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v30 = (JSC::JSCell *)WebCore::JSSVGRectElementPrototype::create((WebCore::JSSVGRectElementPrototype *)a1, (JSC::VM *)a2, Structure, v29);
  v31 = WebCore::JSSVGRectElement::createStructure((uint64_t *)a1, a2, v30);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v31, (uint64_t)&WebCore::JSSVGRectElement::s_info);
LABEL_22:
  v32 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v32, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6864) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGRectElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGRectElementPrototype::s_info != (char **)(16
                                                              * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGRectElement>,(WebCore::DOMConstructorID)858>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGRectElement_x(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 224));
}

unint64_t WebCore::jsSVGRectElement_y(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 232));
}

unint64_t WebCore::jsSVGRectElement_width(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 240));
}

unint64_t WebCore::jsSVGRectElement_height(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 248));
}

unint64_t WebCore::jsSVGRectElement_rx(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 256));
}

unint64_t WebCore::jsSVGRectElement_ry(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 264));
}

uint64_t WebCore::JSSVGRectElement::subspaceForImpl(WebCore::JSSVGRectElement *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  void *v12;
  int v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 6944);
  if (v4)
    return v4;
  v7 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v7, a2);
LABEL_6:
  v9 = *(_QWORD *)(v7 + 2824);
  v20 = *(_QWORD *)(v9 + 6944);
  if (!v20)
  {
    v14 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v22, "IsoSpace T");
    v21 = 0;
    MEMORY[0x19AEA3204](v14, &v22, (char *)this + 192, (char *)this + 1872, 40, 8, &v21);
    v16 = v21;
    v21 = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    v17 = v22;
    v22 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 1)
        WTF::fastFree(v17, v15);
      else
        --*(_DWORD *)v17;
    }
    v20 = v14;
    v18 = *(_QWORD *)(v9 + 6944);
    *(_QWORD *)(v9 + 6944) = v14;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    v19 = *(unsigned int *)(v7 + 2844);
    if ((_DWORD)v19 == *(_DWORD *)(v7 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v7 + 2832, (unint64_t)&v20);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v7 + 2832) + 8 * v19) = v14;
      *(_DWORD *)(v7 + 2844) = v19 + 1;
    }
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v10 = *(_QWORD *)(v3 + 6944);
  *(_QWORD *)(v3 + 6944) = v4;
  if (v10)
  {
    v11 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v11, v12);
  }
  v13 = __ldxr((unsigned __int8 *)v7);
  if (v13 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
  return v4;
}

uint64_t WebCore::JSSVGSVGElement::prototype(WebCore::JSSVGSVGElement *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  uint64_t v13;
  JSC::JSCell *v14;
  unint64_t Structure;
  JSC::Structure *v16;
  JSC::JSCell *v17;
  uint64_t v18;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSSVGSVGElement::s_info + ~((_QWORD)&WebCore::JSSVGSVGElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGSVGElement::s_info + ~((_QWORD)&WebCore::JSSVGSVGElement::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSSVGSVGElement::s_info)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v12;
      if (v11 == &WebCore::JSSVGSVGElement::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v13)
  {
LABEL_7:
    v14 = (JSC::JSCell *)WebCore::JSSVGGraphicsElement::prototype(this, a2, a3);
    Structure = WebCore::JSSVGSVGElementPrototype::createStructure((uint64_t *)this, (uint64_t)a2, v14);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v17 = (JSC::JSCell *)WebCore::JSSVGSVGElementPrototype::create(this, a2, Structure, v16);
    v18 = WebCore::JSSVGSVGElement::createStructure((uint64_t *)this, (uint64_t)a2, v17);
    v13 = WebCore::cacheDOMStructure((JSCell *)a2, v18, (uint64_t)&WebCore::JSSVGSVGElement::s_info);
  }
  return *(_QWORD *)(v13 + 48);
}

uint64_t WebCore::JSSVGSVGElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGGraphicsElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGGraphicsElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGGraphicsElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSVGSVGElement::JSSVGSVGElement(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t result;

  v4 = *a4;
  *a4 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(a1, a2);
  *(_QWORD *)(result + 24) = v4;
  *(_QWORD *)(result + 32) = 0;
  return result;
}

{
  uint64_t v4;
  uint64_t result;

  v4 = *a4;
  *a4 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(a1, a2);
  *(_QWORD *)(result + 24) = v4;
  *(_QWORD *)(result + 32) = 0;
  return result;
}

uint64_t WebCore::JSSVGSVGElement::protectedWrapped@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 24);
  *(_DWORD *)(v2 + 24) += 2;
  *a2 = v2;
  return this;
}

unint64_t WebCore::JSSVGSVGElement::createPrototype(WebCore::JSSVGSVGElement *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  JSC::JSCell *v5;
  unint64_t Structure;
  JSC::Structure *v7;

  v5 = (JSC::JSCell *)WebCore::JSSVGGraphicsElement::prototype(this, a2, a3);
  Structure = WebCore::JSSVGSVGElementPrototype::createStructure((uint64_t *)this, (uint64_t)a2, v5);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  return WebCore::JSSVGSVGElementPrototype::create(this, a2, Structure, v7);
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGSVGElement>,(WebCore::DOMConstructorID)859>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  unint64_t v16;
  WebCore::JSDOMGlobalObject *v17;
  uint64_t v18;
  unint64_t v20;
  unint64_t v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  int v24;
  int v25;
  uint64_t v26;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6872);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGGraphicsElement>,(WebCore::DOMConstructorID)815>(a1, a2);
  v7 = v6;
  LODWORD(v22) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v20 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v20);
    v5[2] = SlowCase + (int)v20;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v22, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGSVGElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 >= v10[2847])
  {
    v2 = v10[2848];
    if ((v2 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v2 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_11;
    }
    v21 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v21);
    v10[2848] = v2 + (int)v21;
  }
  v10[2846] = v2 + 48;
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v22);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v22);
  v14 = v22;
  v22 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v22);
  v16 = *(_QWORD *)(v5[227] + 2160);
  v18 = WebCore::JSSVGSVGElement::prototype((WebCore::JSSVGSVGElement *)a1, (JSC::VM *)a2, v17);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v16, v18, 14, (uint64_t)&v22);
  JSC::reifyStaticProperties<3u>((JSC::VM *)a1, (uint64_t)&WebCore::JSSVGSVGElement::s_info, &WebCore::JSSVGSVGElementConstructorTableValues, (JSC::JSObject *)v2);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6872) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGSVGElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGSVGElementPrototype::s_info != (char **)(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                               + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGSVGElement>,(WebCore::DOMConstructorID)859>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGSVGElement_x(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 288));
}

unint64_t WebCore::jsSVGSVGElement_y(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 296));
}

unint64_t WebCore::jsSVGSVGElement_width(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 304));
}

unint64_t WebCore::jsSVGSVGElement_height(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 312));
}

unint64_t WebCore::jsSVGSVGElement_currentScale(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  float v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _QWORD *v7;
  _QWORD *v8;
  double v9;
  uint64_t v10;
  uint64_t v12;
  _QWORD *v13;

  WebCore::SVGSVGElement::frameForCurrentScale(*(_QWORD *)(a2 + 24), &v12);
  v2 = v12;
  if (v12)
  {
    v3 = *(float *)(v12 + 592);
    v12 = 0;
    v4 = (unsigned int *)(v2 + 8);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v7 = off_1E31FE290;
      v7[1] = v4;
      v13 = v7;
      WTF::ensureOnMainThread();
      v8 = v13;
      v13 = 0;
      if (v8)
        (*(void (**)(_QWORD *))(*v8 + 8))(v8);
    }
  }
  else
  {
    v3 = 1.0;
  }
  v9 = v3;
  if (COERCE__INT64(fabs(v3)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v10 = (int)v3, (double)(int)v10 == v9)
    && ((_DWORD)v10 || (LODWORD(v3) & 0x80000000) == 0))
  {
    return v10 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v9 + 0x2000000000000;
  }
}

BOOL WebCore::setJSSVGSVGElement_currentScale(JSC::JSGlobalObject *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  _BOOL8 v7;
  float v8;
  WebCore::LocalFrame *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  _QWORD *v14;
  _QWORD *v15;
  float v16;
  int v17;
  WebCore::LocalFrame *v18;
  _QWORD *v19;

  v5 = JSC::jsDynamicCast<WebCore::JSSVGSVGElement *>(a2);
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(_QWORD *)(v5 + 24);
  WebCore::convert<WebCore::IDLFloat>((uint64_t)&v16, a1, a3);
  v7 = v17 == 0;
  if (!v17)
  {
    v8 = v16;
    WebCore::SVGSVGElement::frameForCurrentScale(v6, &v18);
    v9 = v18;
    if (v18)
    {
      WebCore::LocalFrame::setPageAndTextZoomFactors(v18, v8, *((float *)v18 + 149));
      v18 = 0;
      v10 = (unsigned int *)((char *)v9 + 8);
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v14 = off_1E31FE290;
        v14[1] = v10;
        v19 = v14;
        WTF::ensureOnMainThread();
        v15 = v19;
        v19 = 0;
        if (v15)
          (*(void (**)(_QWORD *))(*v15 + 8))(v15);
      }
    }
  }
  return v7;
}

unint64_t WebCore::jsSVGSVGElement_currentTranslate(uint64_t a1, uint64_t a2, WebCore::JSDOMGlobalObject *a3)
{
  return WebCore::wrap<WebCore::SVGPoint>(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 280), a3);
}

uint64_t WebCore::jsSVGSVGElement_useCurrentView(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(*(_QWORD *)(a2 + 24) + 240))
    return 7;
  else
    return 6;
}

unint64_t WebCore::jsSVGSVGElement_currentView(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  WTF *v4;

  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = (WTF *)WebCore::SVGSVGElement::currentView(*(WebCore::SVGSVGElement **)(a2 + 24));
  return WebCore::wrap<WebCore::SVGViewSpec>(a1, v3, v4);
}

unint64_t WebCore::jsSVGSVGElement_viewBox(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGRect>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 216));
}

unint64_t WebCore::jsSVGSVGElement_preserveAspectRatio(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGPreserveAspectRatio>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 224));
}

unint64_t WebCore::jsSVGSVGElement_zoomAndPan(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int16 *)(*(_QWORD *)(a2 + 24) + 236) | 0xFFFE000000000000;
}

BOOL WebCore::setJSSVGSVGElement_zoomAndPan(JSC::JSGlobalObject *a1, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  JSValue v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  unint64_t v10;
  WTF::StringImpl *v11;

  v5 = *((_QWORD *)a1 + 7);
  if (!JSC::jsDynamicCast<WebCore::JSSVGSVGElement *>(a2))
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = a3;
  if (a3 < 0xFFFE000000000000 || (a3 & 0x80000000) != 0)
  {
    if (!(a3 >> 49))
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v10, a1);
    if (*(_DWORD *)(v5 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5))
      return 0;
  }
  LOBYTE(v10) = 4;
  v11 = 0;
  if (!*(_QWORD *)(v5 + 16))
  {
    v6.super.isa = (Class)WebCore::createDOMException(a1, (JSC::JSGlobalObject *)4, (JSC::JSGlobalObject *)&v11);
    JSC::VM::throwException((JSC::VM *)v5, a1, v6);
    v8 = v11;
    v11 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v7);
      else
        *(_DWORD *)v8 -= 2;
    }
  }
  return 1;
}

unint64_t WebCore::JSSVGSVGElement::toWrapped(uint64_t a1, unint64_t a2)
{
  unint64_t result;

  result = JSC::jsDynamicCast<WebCore::JSSVGSVGElement *>(a2);
  if (result)
    return *(_QWORD *)(result + 24);
  return result;
}

unint64_t JSC::jsDynamicCast<WebCore::JSSVGSVGElement *>(unint64_t result)
{
  uint64_t v1;
  _BOOL4 v2;
  char **v3;
  BOOL v4;

  if ((result & 0xFFFE000000000002) != 0)
    return 0;
  v1 = *(unsigned int *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x4C);
  v2 = *(_DWORD *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x4C) != 0;
  v3 = (char **)(16 * v1);
  if ((_DWORD)v1)
    v4 = v3 == &WebCore::JSSVGSVGElement::s_info;
  else
    v4 = 1;
  if (!v4)
  {
    do
    {
      v3 = (char **)v3[2];
      v2 = v3 != 0;
    }
    while (v3 != &WebCore::JSSVGSVGElement::s_info && v3 != 0);
  }
  if (!v2)
    return 0;
  return result;
}

uint64_t WebCore::JSSVGScriptElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSVGScriptElementPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGScriptElementPrototype::create(WebCore::JSSVGScriptElementPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(this, (uint64_t)&WebCore::JSSVGScriptElement::s_info, &WebCore::JSSVGScriptElementPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGScriptElement>,(WebCore::DOMConstructorID)860>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6880);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGElement>,(WebCore::DOMConstructorID)783>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v34);
    v5[2] = SlowCase + (int)v34;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGScriptElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v35 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v35);
    v10[2848] = v2 + (int)v35;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSSVGScriptElement::s_info + ~((_QWORD)&WebCore::JSSVGScriptElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGScriptElement::s_info + ~((_QWORD)&WebCore::JSSVGScriptElement::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSSVGScriptElement::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSSVGScriptElement::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSSVGElement::prototype((WebCore::JSSVGElement *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSSVGScriptElementPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v30 = (JSC::JSCell *)WebCore::JSSVGScriptElementPrototype::create((WebCore::JSSVGScriptElementPrototype *)a1, (JSC::VM *)a2, Structure, v29);
  v31 = WebCore::JSSVGScriptElement::createStructure((uint64_t *)a1, a2, v30);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v31, (uint64_t)&WebCore::JSSVGScriptElement::s_info);
LABEL_22:
  v32 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v32, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6880) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGScriptElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGScriptElementPrototype::s_info != (char **)(16
                                                                * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                  + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGScriptElement>,(WebCore::DOMConstructorID)860>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsSVGScriptElement_type(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v3)
    goto LABEL_12;
  v4 = *(_DWORD *)(v3 + 4);
  if ((v4 & 1) == 0)
  {
    v5 = v3 + 32;
    LODWORD(v6) = v4 >> 5;
    if ((_DWORD)v6)
      goto LABEL_4;
LABEL_12:
    v7 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v5 = *(_QWORD *)(v3 + 40);
  LODWORD(v6) = *(_DWORD *)(v3 + 52);
  if (!(_DWORD)v6)
    goto LABEL_12;
LABEL_4:
  v6 = v6;
  v7 = (uint64_t *)(v5 + 8);
  while (1)
  {
    v8 = *(v7 - 1);
    if (v8 == WebCore::SVGNames::typeAttr
      || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::SVGNames::typeAttr + 24)
      && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::SVGNames::typeAttr + 32))
    {
      break;
    }
    v7 += 2;
    if (!--v6)
    {
      v7 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v9 = *v7;
  if (!*v7)
    return *(_QWORD *)(v2 + 41968);
  v10 = *(_DWORD *)(v9 + 4);
  if (!v10)
    return *(_QWORD *)(v2 + 41968);
  if (v10 == 1)
  {
    v13 = *(unsigned __int8 **)(v9 + 8);
    if ((*(_BYTE *)(v9 + 16) & 4) != 0)
    {
      v14 = *v13;
    }
    else
    {
      v15 = *(unsigned __int16 *)v13;
      if (v15 > 0xFF)
        goto LABEL_16;
      v14 = v15;
    }
    return *(_QWORD *)(v2 + 8 * v14 + 42216);
  }
LABEL_16:
  v11 = *(_QWORD *)(v2 + 64760);
  if (!v11 || v9 != *(_QWORD *)(v11 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v11;
}

BOOL WebCore::setJSSVGScriptElement_type(JSC::JSGlobalObject *a1, uint64_t a2, JSC::JSRopeString *this)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WTF::StringImpl *v8;
  int v9;
  _BOOL8 v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v21;
  int v22;
  WTF::StringImpl *v23;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSSVGScriptElement::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSSVGScriptElement::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(WTF::StringImpl **)(a2 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, (unint64_t)this, (uint64_t)&v21);
  v9 = v22;
  v10 = v22 == 0;
  if (!v22)
  {
    v11 = v21;
    v21 = 0;
    v23 = v11;
    v12 = *((_QWORD *)v8 + 13);
    if (v12)
    {
      v13 = *(_DWORD *)(v12 + 4);
      if ((v13 & 1) == 0)
      {
        v14 = (uint64_t *)(v12 + 32);
        v15 = v13 >> 5;
        if (!v15)
          goto LABEL_25;
LABEL_18:
        v16 = 0;
        while (1)
        {
          v17 = *v14;
          if (*v14 == WebCore::SVGNames::typeAttr
            || *(_QWORD *)(v17 + 24) == *(_QWORD *)(WebCore::SVGNames::typeAttr + 24)
            && *(_QWORD *)(v17 + 32) == *(_QWORD *)(WebCore::SVGNames::typeAttr + 32))
          {
            goto LABEL_26;
          }
          ++v16;
          v14 += 2;
          if (v15 == v16)
            goto LABEL_25;
        }
      }
      v14 = *(uint64_t **)(v12 + 40);
      v15 = *(_DWORD *)(v12 + 52);
      if (v15)
        goto LABEL_18;
    }
LABEL_25:
    v16 = 0xFFFFFFFFLL;
LABEL_26:
    WebCore::Element::setAttributeInternal(v8, v16, (WebCore::TreeScope *)&WebCore::SVGNames::typeAttr, &v23, 0);
    v19 = v23;
    v23 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v18);
      else
        *(_DWORD *)v19 -= 2;
    }
    v9 = v22;
  }
  if (v9 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32FBC30[v9])(&v23, &v21);
  return v10;
}

unint64_t WebCore::jsSVGScriptElement_href(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedString>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 184));
}

uint64_t WebCore::JSSVGScriptElement::subspaceForImpl(WebCore::JSSVGScriptElement *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 6960);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  v20 = *(_QWORD *)(v8 + 6960);
  if (!v20)
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v22, "IsoSpace T");
    v21 = 0;
    MEMORY[0x19AEA3204](v9, &v22, (char *)this + 192, (char *)this + 1872, 40, 8, &v21);
    v11 = v21;
    v21 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v22;
    v22 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v20 = v9;
    v13 = *(_QWORD *)(v8 + 6960);
    *(_QWORD *)(v8 + 6960) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = *(unsigned int *)(v6 + 2844);
    if ((_DWORD)v14 == *(_DWORD *)(v6 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v6 + 2832, (unint64_t)&v20);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = v9;
      *(_DWORD *)(v6 + 2844) = v14 + 1;
    }
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 6960);
  *(_QWORD *)(v3 + 6960) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSSVGSetElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGAnimationElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGAnimationElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGAnimationElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSVGSetElementPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGSetElementPrototype::create(WebCore::JSSVGSetElementPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  JSC::Structure *v15;
  int v16;
  unint64_t v18;
  WTF::StringImpl *v19[6];
  int v20;
  int v21;
  JSC::Structure *v22;
  int v23;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v18 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v18);
    *((_QWORD *)this + 4865) = SlowCase + (int)v18;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)SlowCase, this);
  WTF::AtomStringImpl::addLiteral();
  v9 = v19[0];
  JSC::reifyStaticProperty(this, (uint64_t)&WebCore::JSSVGSetElement::s_info, (unint64_t *)v19, (uint64_t)&WebCore::JSSVGSetElementPrototypeTableValues, (unsigned __int8 *)SlowCase);
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v10);
    else
      *(_DWORD *)v9 -= 2;
  }
  v11 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create((uint64_t)this, v19);
  v14 = v19[0];
  v19[0] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v23 = *(_DWORD *)SlowCase;
  v22 = v15;
  v16 = JSC::Structure::outOfLineCapacity(v15);
  v20 = 0;
  v21 = v16;
  v19[0] = (WTF::StringImpl *)&v21;
  v19[1] = (WTF::StringImpl *)SlowCase;
  v19[2] = this;
  v19[3] = (WTF::StringImpl *)&v23;
  v19[4] = (WTF::StringImpl *)&v22;
  v19[5] = (WTF::StringImpl *)&v20;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v15, this, v11, 6, (uint64_t)v19);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v20, v13);
  *((_DWORD *)v15 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGSetElement>,(WebCore::DOMConstructorID)861>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6888);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGAnimationElement>,(WebCore::DOMConstructorID)777>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v34);
    v5[2] = SlowCase + (int)v34;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGSetElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v35 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v35);
    v10[2848] = v2 + (int)v35;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSSVGSetElement::s_info + ~((_QWORD)&WebCore::JSSVGSetElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGSetElement::s_info + ~((_QWORD)&WebCore::JSSVGSetElement::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSSVGSetElement::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSSVGSetElement::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSSVGAnimationElement::prototype((WebCore::JSSVGAnimationElement *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSSVGSetElementPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v30 = (JSC::JSCell *)WebCore::JSSVGSetElementPrototype::create((WebCore::JSSVGSetElementPrototype *)a1, (JSC::VM *)a2, Structure, v29);
  v31 = WebCore::JSSVGSetElement::createStructure((uint64_t *)a1, a2, v30);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v31, (uint64_t)&WebCore::JSSVGSetElement::s_info);
LABEL_22:
  v32 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v32, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6888) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGSetElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGSetElementPrototype::s_info != (char **)(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                               + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGSetElement>,(WebCore::DOMConstructorID)861>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::JSSVGSetElement::subspaceForImpl(WebCore::JSSVGSetElement *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 6968);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  v20 = *(_QWORD *)(v8 + 6968);
  if (!v20)
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v22, "IsoSpace T");
    v21 = 0;
    MEMORY[0x19AEA3204](v9, &v22, (char *)this + 192, (char *)this + 1872, 40, 8, &v21);
    v11 = v21;
    v21 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v22;
    v22 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v20 = v9;
    v13 = *(_QWORD *)(v8 + 6968);
    *(_QWORD *)(v8 + 6968) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = *(unsigned int *)(v6 + 2844);
    if ((_DWORD)v14 == *(_DWORD *)(v6 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v6 + 2832, (unint64_t)&v20);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = v9;
      *(_DWORD *)(v6 + 2844) = v14 + 1;
    }
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 6968);
  *(_QWORD *)(v3 + 6968) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

WTF::StringImpl *WebCore::JSSVGStopElementPrototype::finishCreation(WebCore::JSSVGStopElementPrototype *this, JSC::VM *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>(a2, (uint64_t)&WebCore::JSSVGStopElement::s_info, (uint64_t)&WebCore::JSSVGStopElementPrototypeTableValues, this);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5 = JSC::jsNontrivialString((uint64_t)a2, &v8);
  JSC::JSObject::putDirectWithoutTransition((int *)this, a2, v4, v5, 6);
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::JSSVGStopElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::JSSVGStopElement::createPrototype(WebCore::JSSVGStopElement *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  JSC::JSCell *v5;
  unint64_t v6;
  JSC::Structure *v7;

  v5 = (JSC::JSCell *)WebCore::JSSVGElement::prototype(this, a2, a3);
  v6 = JSC::Structure::create((uint64_t *)this, (int)a2, v5);
  *(_DWORD *)(v6 + 16) |= 0x80000u;
  return WebCore::JSSVGStopElementPrototype::create(this, a2, v6, v7);
}

unint64_t WebCore::JSSVGStopElementPrototype::create(WebCore::JSSVGStopElementPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  unint64_t v6;
  int v7;

  v6 = JSC::allocateCell<WebCore::JSAbstractRangePrototype>((uint64_t)this);
  v7 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)v6 = a3 >> 4;
  *(_DWORD *)(v6 + 4) = v7;
  *(_QWORD *)(v6 + 8) = 0;
  WebCore::JSSVGStopElementPrototype::finishCreation((WebCore::JSSVGStopElementPrototype *)v6, this);
  return v6;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGStopElement>,(WebCore::DOMConstructorID)862>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  unint64_t v16;
  WebCore::JSDOMGlobalObject *v17;
  uint64_t v18;
  unint64_t v20;
  unint64_t v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  int v24;
  int v25;
  uint64_t v26;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6896);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGElement>,(WebCore::DOMConstructorID)783>(a1, a2);
  v7 = v6;
  LODWORD(v22) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v20 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v20);
    v5[2] = SlowCase + (int)v20;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v22, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGStopElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 >= v10[2847])
  {
    v2 = v10[2848];
    if ((v2 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v2 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_11;
    }
    v21 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v21);
    v10[2848] = v2 + (int)v21;
  }
  v10[2846] = v2 + 48;
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v22);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v22);
  v14 = v22;
  v22 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v22);
  v16 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(WebCore::getDOMStructure<WebCore::JSSVGStopElement>(a1, (JSC::VM *)a2, v17) + 48);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v16, v18, 14, (uint64_t)&v22);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6896) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGStopElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGStopElementPrototype::s_info != (char **)(16
                                                              * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGStopElement>,(WebCore::DOMConstructorID)862>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGStopElement_offset(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedPrimitiveProperty<float>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 176));
}

uint64_t WebCore::JSSVGStopElement::subspaceForImpl(WebCore::JSSVGStopElement *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  void *v12;
  int v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 6976);
  if (v4)
    return v4;
  v7 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v7, a2);
LABEL_6:
  v9 = *(_QWORD *)(v7 + 2824);
  v20 = *(_QWORD *)(v9 + 6976);
  if (!v20)
  {
    v14 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v22, "IsoSpace T");
    v21 = 0;
    MEMORY[0x19AEA3204](v14, &v22, (char *)this + 192, (char *)this + 1872, 40, 8, &v21);
    v16 = v21;
    v21 = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    v17 = v22;
    v22 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 1)
        WTF::fastFree(v17, v15);
      else
        --*(_DWORD *)v17;
    }
    v20 = v14;
    v18 = *(_QWORD *)(v9 + 6976);
    *(_QWORD *)(v9 + 6976) = v14;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    v19 = *(unsigned int *)(v7 + 2844);
    if ((_DWORD)v19 == *(_DWORD *)(v7 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v7 + 2832, (unint64_t)&v20);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v7 + 2832) + 8 * v19) = v14;
      *(_DWORD *)(v7 + 2844) = v19 + 1;
    }
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v10 = *(_QWORD *)(v3 + 6976);
  *(_QWORD *)(v3 + 6976) = v4;
  if (v10)
  {
    v11 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v11, v12);
  }
  v13 = __ldxr((unsigned __int8 *)v7);
  if (v13 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
  return v4;
}

BOOL WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGStringList>::initializeProperties(uint64_t a1, uint64_t a2, JSC::JSCell **a3)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  unint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v13;

  v6 = a2 + 41952;
  JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, *(_QWORD *)(*(_QWORD *)(a2 + 41952) + 1768), 0xFFFE000000000000, 6);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8 = JSC::jsNontrivialString(a2, &v13);
  v9 = v13;
  v13 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  *(_QWORD *)(a1 + 32) = v8;
  if (a1 && v8 && *(_DWORD *)(a2 + 760) >= *(unsigned __int8 *)(a1 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a2 + 192), (const JSCell *)a1);
  JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, *(_QWORD *)(*(_QWORD *)v6 + 1968), v8, 6);
  v10 = *(_QWORD *)(*(_QWORD *)v6 + 2160);
  v11 = WebCore::getDOMStructure<WebCore::JSSVGStringList>((WebCore::JSSVGStringList *)a2, a3);
  return JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, v10, *(_QWORD *)(v11 + 48), 14);
}

WTF::StringImpl *WebCore::JSSVGStringListPrototype::finishCreation(WebCore::JSSVGStringListPrototype *this, JSC::VM *a2)
{
  unint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t Direct;
  WTF::StringImpl *v8;
  unint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<10u>(a2, (uint64_t)&WebCore::JSSVGStringList::s_info, (uint64_t)&WebCore::JSSVGStringListPrototypeTableValues, this);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2712);
  v5 = *(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28) + 672);
  v6 = (_DWORD *)MEMORY[0x1E0CBEBF0];
  *MEMORY[0x1E0CBEBF0] += 2;
  Direct = JSC::JSObject::getDirect(v5, a2, (unint64_t)v6);
  JSC::JSObject::putDirect((unsigned __int8 *)this, a2, v4, Direct, 4);
  if (*v6 == 2)
    WTF::StringImpl::destroy(MEMORY[0x1E0CBEBF0], v8);
  else
    *v6 -= 2;
  v9 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v10 = JSC::jsNontrivialString((uint64_t)a2, &v13);
  JSC::JSObject::putDirectWithoutTransition((int *)this, a2, v9, v10, 6);
  result = v13;
  v13 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_DWORD *WebCore::JSSVGStringList::destroy(WebCore::JSSVGStringList *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSSVGStringList::put(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3, unint64_t this, uint64_t a5)
{
  int v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  unsigned __int16 *v23;
  uint64_t v24;
  unsigned int v25;
  BOOL v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  JSValue v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  BOOL v34;
  unsigned int v35;
  WTF::StringImpl *v36;
  int hasExceptionsAfterHandlingTraps;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 *v41;
  unsigned int v42;
  uint64_t v43;
  int v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  int v49;

  if (*(_QWORD *)(a5 + 8) != a1)
    return JSC::JSObject::put();
  if (!a3)
    return JSC::JSObject::put();
  v7 = *(_DWORD *)(a3 + 16);
  if ((v7 & 0x20) != 0)
    return JSC::JSObject::put();
  v8 = *((_QWORD *)a2 + 7);
  v9 = *(_BYTE **)(a3 + 8);
  v10 = *(unsigned int *)(a3 + 4);
  if ((v7 & 4) != 0)
  {
    if ((_DWORD)v10)
    {
      v38 = *v9 - 48;
      if (v38 <= 9 && (v10 < 2 || *v9 != 48))
      {
        v40 = v10 - 1;
        v41 = v9 + 1;
        while (v40)
        {
          if (v38 > 0x19999999)
            goto LABEL_64;
          v42 = *v41 - 48;
          if (v42 > 9)
            goto LABEL_64;
          v14 = 0;
          LOBYTE(v10) = 0;
          v39 = 0;
          v26 = __CFADD__(v42, 10 * v38);
          v38 = v42 + 10 * v38;
          --v40;
          ++v41;
          if (v26)
            goto LABEL_66;
        }
        if (v38 == -1)
          v14 = 0;
        else
          v14 = v38 & 0xFFFFFF00;
        if (v38 == -1)
          LOBYTE(v10) = 0;
        else
          LOBYTE(v10) = v38;
        if (v38 == -1)
          v39 = 0;
        else
          v39 = 0x100000000;
LABEL_66:
        v13 = v10;
        if ((v39 & 0x100000000) != 0)
          goto LABEL_10;
        return JSC::JSObject::put();
      }
LABEL_64:
      v14 = 0;
      LOBYTE(v10) = 0;
    }
    else
    {
      v14 = 0;
    }
    v39 = 0;
    goto LABEL_66;
  }
  if (!(_DWORD)v10 || (v11 = *(unsigned __int16 *)v9 - 48, v11 > 9))
  {
LABEL_7:
    v12 = 0;
    LOBYTE(v11) = 0;
LABEL_8:
    v13 = 0;
    goto LABEL_9;
  }
  if (v10 >= 2 && *(_WORD *)v9 == 48)
  {
    v12 = 0;
    goto LABEL_8;
  }
  v23 = (unsigned __int16 *)(v9 + 2);
  v24 = v10 - 1;
  while (v24)
  {
    if (v11 <= 0x19999999)
    {
      v25 = *v23 - 48;
      if (v25 <= 9)
      {
        v26 = __CFADD__(v25, 10 * v11);
        v11 = v25 + 10 * v11;
        ++v23;
        --v24;
        if (!v26)
          continue;
      }
    }
    goto LABEL_7;
  }
  v34 = v11 == -1;
  v35 = v11 & 0xFFFFFF00;
  v12 = 0x100000000;
  if (v11 == -1)
  {
    v12 = 0;
    LOBYTE(v11) = 0;
  }
  if (v34)
    v13 = 0;
  else
    v13 = v35;
LABEL_9:
  v14 = v11;
  if ((v12 & 0x100000000) != 0)
  {
LABEL_10:
    v47 = (WTF::StringImpl *)this;
    if ((this & 0xFFFE000000000002) != 0 || *(_BYTE *)(this + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v47, a2);
LABEL_16:
      if (*(_DWORD *)(v8 + 80))
      {
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v8);
        v16 = v46;
        if (hasExceptionsAfterHandlingTraps)
        {
          v44 = 1;
          v46 = 0;
          if (v16)
          {
            if (*(_DWORD *)v16 == 2)
              WTF::StringImpl::destroy(v16, v36);
            else
              *(_DWORD *)v16 -= 2;
          }
          v29 = 1;
          goto LABEL_41;
        }
      }
      else
      {
        v16 = v46;
      }
      v44 = 0;
      v17 = *(_QWORD *)(a1 + 24);
      v43 = 0;
      v45 = v16;
      if (*(_BYTE *)(v17 + 24) == 1)
      {
        v18 = 4;
        LOBYTE(v47) = 4;
        v19 = 1;
        v49 = 1;
        v48 = 0;
      }
      else
      {
        LOBYTE(v47) = 1;
        v49 = 0;
        if (*(_DWORD *)(v17 + 44) > (v13 | v14))
        {
          (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(_QWORD *)v17 + 64))(&v46, v17);
          v20 = *(_QWORD *)(v17 + 16);
          if (v20)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 32))(v20, v17);
          v18 = 0;
          v21 = 0;
          v47 = v46;
          v49 = 0;
          v22 = 1;
LABEL_36:
          ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32FBEC0[v21])(&v46, &v47);
          v28 = v45;
          v45 = 0;
          if (v28)
          {
            if (*(_DWORD *)v28 == 2)
            {
              WTF::StringImpl::destroy(v28, v27);
              if ((v22 & 1) != 0)
                goto LABEL_40;
              goto LABEL_45;
            }
            *(_DWORD *)v28 -= 2;
          }
          if ((v22 & 1) != 0)
          {
LABEL_40:
            v29 = 0;
LABEL_41:
            ((void (*)(WTF::StringImpl **, uint64_t *))off_1E32FBED0[v29])(&v47, &v43);
            return 1;
          }
LABEL_45:
          LOBYTE(v47) = v18;
          v48 = 0;
          if (!*(_QWORD *)(v8 + 16))
          {
            v31.super.isa = (Class)WebCore::createDOMException(a2, (JSC::JSGlobalObject *)v18, (JSC::JSGlobalObject *)&v48);
            JSC::VM::throwException((JSC::VM *)v8, a2, v31);
            v33 = v48;
            v48 = 0;
            if (v33)
            {
              if (*(_DWORD *)v33 == 2)
                WTF::StringImpl::destroy(v33, v32);
              else
                *(_DWORD *)v33 -= 2;
            }
          }
          goto LABEL_40;
        }
        v18 = 0;
        v19 = 0;
      }
      ((uint64_t (**)(WTF::StringImpl **, char *))off_1E32F83C8)[v19](&v46, (char *)&v47);
      v22 = 0;
      LOBYTE(v47) = v18;
      v21 = 1;
      v49 = 1;
      v48 = 0;
      goto LABEL_36;
    }
    v15 = *(WTF::StringImpl **)(this + 8);
    if ((v15 & 1) != 0)
    {
      v15 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, a2);
      if (!v15)
        goto LABEL_15;
    }
    else if (!v15)
    {
LABEL_15:
      v46 = v15;
      goto LABEL_16;
    }
    *(_DWORD *)v15 += 2;
    goto LABEL_15;
  }
  return JSC::JSObject::put();
}

uint64_t WebCore::JSSVGStringList::putByIndex(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  JSValue v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  int hasExceptionsAfterHandlingTraps;
  uint64_t v28;
  int v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  int v34;

  v6 = *((_QWORD *)a2 + 7);
  if ((_DWORD)a3 != -1)
  {
    v32 = (WTF::StringImpl *)a4;
    if ((a4 & 0xFFFE000000000002) != 0 || *(_BYTE *)(a4 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v32, a2);
LABEL_8:
      if (*(_DWORD *)(v6 + 80))
      {
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6);
        v9 = v31;
        if (hasExceptionsAfterHandlingTraps)
        {
          v29 = 1;
          v31 = 0;
          if (v9)
          {
            if (*(_DWORD *)v9 == 2)
              WTF::StringImpl::destroy(v9, v26);
            else
              *(_DWORD *)v9 -= 2;
          }
          v18 = 1;
          goto LABEL_23;
        }
      }
      else
      {
        v9 = v31;
      }
      v29 = 0;
      v10 = *(_QWORD *)(a1 + 24);
      v28 = 0;
      v30 = v9;
      if (*(_BYTE *)(v10 + 24) == 1)
      {
        v11 = 4;
        LOBYTE(v32) = 4;
        v12 = 1;
        v34 = 1;
        v33 = 0;
      }
      else
      {
        LOBYTE(v32) = 1;
        v34 = 0;
        if (*(_DWORD *)(v10 + 44) > a3)
        {
          (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v10 + 64))(&v31, v10, a3, &v30);
          v13 = *(_QWORD *)(v10 + 16);
          if (v13)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, v10);
          v11 = 0;
          v14 = 0;
          v32 = v31;
          v34 = 0;
          v15 = 1;
LABEL_18:
          ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32FBEC0[v14])(&v31, &v32);
          v17 = v30;
          v30 = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 2)
            {
              WTF::StringImpl::destroy(v17, v16);
              if ((v15 & 1) != 0)
                goto LABEL_22;
              goto LABEL_28;
            }
            *(_DWORD *)v17 -= 2;
          }
          if ((v15 & 1) != 0)
          {
LABEL_22:
            v18 = 0;
LABEL_23:
            ((void (*)(WTF::StringImpl **, uint64_t *))off_1E32FBED0[v18])(&v32, &v28);
            return 1;
          }
LABEL_28:
          LOBYTE(v32) = v11;
          v33 = 0;
          if (!*(_QWORD *)(v6 + 16))
          {
            v21.super.isa = (Class)WebCore::createDOMException(a2, (JSC::JSGlobalObject *)v11, (JSC::JSGlobalObject *)&v33);
            JSC::VM::throwException((JSC::VM *)v6, a2, v21);
            v23 = v33;
            v33 = 0;
            if (v23)
            {
              if (*(_DWORD *)v23 == 2)
                WTF::StringImpl::destroy(v23, v22);
              else
                *(_DWORD *)v23 -= 2;
            }
          }
          goto LABEL_22;
        }
        v11 = 0;
        v12 = 0;
      }
      ((uint64_t (**)(WTF::StringImpl **, char *))off_1E32F83C8)[v12](&v31, (char *)&v32);
      v15 = 0;
      LOBYTE(v32) = v11;
      v14 = 1;
      v34 = 1;
      v33 = 0;
      goto LABEL_18;
    }
    v8 = *(WTF::StringImpl **)(a4 + 8);
    if ((v8 & 1) != 0)
    {
      v8 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)a4, a2);
      if (!v8)
        goto LABEL_7;
    }
    else if (!v8)
    {
LABEL_7:
      v31 = v8;
      goto LABEL_8;
    }
    *(_DWORD *)v8 += 2;
    goto LABEL_7;
  }
  JSC::Identifier::from();
  v19 = JSC::ordinarySetSlow();
  v25 = v32;
  v32 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v24);
    else
      *(_DWORD *)v25 -= 2;
  }
  return v19;
}

uint64_t WebCore::JSSVGStringList::deleteProperty(uint64_t a1, WebCore::JSDOMGlobalObject *a2, uint64_t a3)
{
  uint64_t v4;
  _BOOL4 v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  WebCore::JSDOMGlobalObject *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _WORD *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned __int16 *v25;
  uint64_t v26;
  unsigned int v27;
  BOOL v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  unsigned int v34;

  v4 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSDOMGlobalObject::s_info && v6 != 0);
  }
  v9 = *(_QWORD *)(a1 + 24);
  if (v5)
    v10 = a2;
  else
    v10 = 0;
  v11 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v10);
  if (v11)
  {
    v12 = v11;
    if (!*(_BYTE *)(v11 + 274))
    {
      v13 = *(_BYTE **)(v11 + 496);
      if (!v13)
        v13 = (_BYTE *)WebCore::Document::ensureQuirks((WebCore::Document *)(v12 - 192));
      if (*(_QWORD *)v13)
      {
        v14 = *(_QWORD *)(*(_QWORD *)v13 + 8);
        if (v14)
        {
          v15 = *(_QWORD *)(v14 + 680);
          if (*(_BYTE *)(v15 + 243))
          {
            if (!*(_BYTE *)(v15 + 242))
              goto LABEL_22;
          }
          else if ((*(_QWORD *)(v15 + 688) & 0x80000) == 0)
          {
            goto LABEL_22;
          }
          if (v13[65])
            return JSC::JSObject::deleteProperty();
        }
      }
    }
  }
LABEL_22:
  if (!a3)
    return JSC::JSObject::deleteProperty();
  v16 = *(_DWORD *)(a3 + 16);
  if ((v16 & 0x20) != 0)
    return JSC::JSObject::deleteProperty();
  v17 = *(_WORD **)(a3 + 8);
  v18 = *(unsigned int *)(a3 + 4);
  if ((v16 & 4) == 0)
  {
    if ((_DWORD)v18 && (v19 = (unsigned __int16)*v17 - 48, v19 <= 9) && (v18 < 2 || *v17 != 48))
    {
      v25 = v17 + 1;
      v26 = v18 - 1;
      while (v26)
      {
        if (v19 <= 0x19999999)
        {
          v27 = *v25 - 48;
          if (v27 <= 9)
          {
            v28 = __CFADD__(v27, 10 * v19);
            v19 = v27 + 10 * v19;
            ++v25;
            --v26;
            if (!v28)
              continue;
          }
        }
        goto LABEL_29;
      }
      v7 = v19 == -1;
      v22 = v19 & 0xFFFFFF00;
      v21 = v19;
      v20 = 0x100000000;
      if (v7)
      {
        v20 = 0;
        v21 = 0;
        v22 = 0;
      }
    }
    else
    {
LABEL_29:
      v20 = 0;
      v21 = 0;
      v22 = 0;
    }
    v23 = v22 | v21;
    if ((v20 & 0x100000000) != 0)
      return *(_DWORD *)(v9 + 44) <= v23;
    return JSC::JSObject::deleteProperty();
  }
  if (!(_DWORD)v18)
  {
    v30 = 0;
    goto LABEL_47;
  }
  v29 = *(unsigned __int8 *)v17 - 48;
  if (v29 > 9 || v18 >= 2 && *(_BYTE *)v17 == 48)
  {
LABEL_46:
    v30 = 0;
    LODWORD(v18) = 0;
LABEL_47:
    v31 = 0;
    goto LABEL_48;
  }
  v32 = v18 - 1;
  v33 = (unsigned __int8 *)v17 + 1;
  while (v32)
  {
    if (v29 > 0x19999999)
      goto LABEL_46;
    v34 = *v33 - 48;
    if (v34 > 9)
      goto LABEL_46;
    v30 = 0;
    LODWORD(v18) = 0;
    v31 = 0;
    v28 = __CFADD__(v34, 10 * v29);
    v29 = v34 + 10 * v29;
    --v32;
    ++v33;
    if (v28)
      goto LABEL_48;
  }
  if (v29 == -1)
    v30 = 0;
  else
    v30 = v29 & 0xFFFFFF00;
  if (v29 == -1)
    LODWORD(v18) = 0;
  else
    LODWORD(v18) = v29;
  if (v29 == -1)
    v31 = 0;
  else
    v31 = 0x100000000;
LABEL_48:
  v23 = v18 | v30;
  if ((v31 & 0x100000000) != 0)
    return *(_DWORD *)(v9 + 44) <= v23;
  return JSC::JSObject::deleteProperty();
}

uint64_t WebCore::JSSVGStringList::deletePropertyByIndex(WebCore::JSSVGStringList *this, JSC::JSCell *a2, JSC::JSGlobalObject *a3)
{
  uint64_t v6;
  _BOOL4 v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  WebCore::JSDOMGlobalObject *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;

  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSDOMGlobalObject::s_info && v8 != 0);
  }
  v11 = *((_QWORD *)this + 3);
  if (v7)
    v12 = a2;
  else
    v12 = 0;
  v13 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v12);
  if (!v13)
    return *(_DWORD *)(v11 + 44) <= a3;
  v14 = v13;
  if (*(_BYTE *)(v13 + 274))
    return *(_DWORD *)(v11 + 44) <= a3;
  v15 = *(_BYTE **)(v13 + 496);
  if (!v15)
    v15 = (_BYTE *)WebCore::Document::ensureQuirks((WebCore::Document *)(v14 - 192));
  if (!*(_QWORD *)v15)
    return *(_DWORD *)(v11 + 44) <= a3;
  v16 = *(_QWORD *)(*(_QWORD *)v15 + 8);
  if (!v16)
    return *(_DWORD *)(v11 + 44) <= a3;
  v17 = *(_QWORD *)(v16 + 680);
  if (*(_BYTE *)(v17 + 243))
  {
    if (!*(_BYTE *)(v17 + 242))
      return *(_DWORD *)(v11 + 44) <= a3;
  }
  else if ((*(_QWORD *)(v17 + 688) & 0x80000) == 0)
  {
    return *(_DWORD *)(v11 + 44) <= a3;
  }
  if (!v15[65])
    return *(_DWORD *)(v11 + 44) <= a3;
  return JSC::JSObject::deletePropertyByIndex(this, a2, a3);
}

uint64_t WebCore::JSSVGStringList::getOwnPropertySlot(uint64_t a1, JSC *a2, unint64_t a3, uint64_t a4)
{
  JSC::VM *v6;
  int v9;
  _WORD *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t result;
  unsigned __int16 *v18;
  uint64_t v19;
  unsigned int v20;
  BOOL v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  _BYTE *v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  unsigned __int16 *v43;
  uint64_t v44;
  unsigned int v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  unsigned int v52;
  int v53;
  unint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  unsigned __int8 *v65;
  unsigned int v66;
  uint64_t v67;
  unsigned __int8 *v68;
  unsigned int v69;
  _QWORD v70[2];
  int v71;
  JSC::VM *v72;
  char v73;

  v6 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v72 = v6;
  if (!a3)
  {
    if ((*(_BYTE *)(a1 + 6) & 0x20) != 0)
      return JSC::JSObject::getOwnStaticPropertySlot();
    return 0;
  }
  v9 = *(_DWORD *)(a3 + 16);
  if ((v9 & 0x20) != 0)
    goto LABEL_36;
  v10 = *(_WORD **)(a3 + 8);
  v11 = *(unsigned int *)(a3 + 4);
  if ((v9 & 4) == 0)
  {
    if ((_DWORD)v11 && (v12 = (unsigned __int16)*v10 - 48, v12 <= 9))
    {
      if (v11 < 2 || *v10 != 48)
      {
        v18 = v10 + 1;
        v19 = v11 - 1;
        while (v19)
        {
          if (v12 <= 0x19999999)
          {
            v20 = *v18 - 48;
            if (v20 <= 9)
            {
              v21 = __CFADD__(v20, 10 * v12);
              v12 = v20 + 10 * v12;
              ++v18;
              --v19;
              if (!v21)
                continue;
            }
          }
          goto LABEL_6;
        }
        v22 = v12 == -1;
        v14 = v12 & 0xFFFFFF00;
        v13 = 0x100000000;
        if (v12 == -1)
        {
          v13 = 0;
          LOBYTE(v12) = 0;
        }
        if (v22)
          v14 = 0;
LABEL_8:
        v12 = v12;
        if ((v13 & 0x100000000) == 0)
          goto LABEL_36;
        goto LABEL_9;
      }
      v13 = 0;
    }
    else
    {
LABEL_6:
      v13 = 0;
      LOBYTE(v12) = 0;
    }
    v14 = 0;
    goto LABEL_8;
  }
  if (!(_DWORD)v11)
  {
    v12 = 0;
    goto LABEL_34;
  }
  v23 = *(unsigned __int8 *)v10 - 48;
  if (v23 > 9 || v11 >= 2 && *(_BYTE *)v10 == 48)
  {
LABEL_33:
    v12 = 0;
    LOBYTE(v11) = 0;
LABEL_34:
    v24 = 0;
    goto LABEL_35;
  }
  v64 = v11 - 1;
  v65 = (unsigned __int8 *)v10 + 1;
  while (v64)
  {
    if (v23 > 0x19999999)
      goto LABEL_33;
    v66 = *v65 - 48;
    if (v66 > 9)
      goto LABEL_33;
    v12 = 0;
    LOBYTE(v11) = 0;
    v24 = 0;
    v21 = __CFADD__(v66, 10 * v23);
    v23 = v66 + 10 * v23;
    --v64;
    ++v65;
    if (v21)
      goto LABEL_35;
  }
  if (v23 == -1)
    v12 = 0;
  else
    v12 = v23 & 0xFFFFFF00;
  if (v23 == -1)
    LOBYTE(v11) = 0;
  else
    LOBYTE(v11) = v23;
  if (v23 == -1)
    v24 = 0;
  else
    v24 = 0x100000000;
LABEL_35:
  v14 = v11;
  if ((v24 & 0x100000000) == 0)
    goto LABEL_36;
LABEL_9:
  v15 = *(_DWORD **)(a1 + 24);
  if (v15[11] > (v14 | v12))
  {
    (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v15 + 48))(v70);
    v71 = 0;
    v16 = WebCore::toJS<WebCore::IDLDOMString,WebCore::ExceptionOr<WTF::String>>(a2, (WTF::StringImpl *)&v72, (unsigned __int8 *)v70);
    if (v71 != -1)
      ((void (*)(char *, _QWORD *))off_1E32FBEC0[v71])(&v73, v70);
    if (!*((_DWORD *)v72 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v72) & 1) == 0)
    {
      *(_QWORD *)a4 = v16;
      *(_DWORD *)(a4 + 16) = 0;
      *(_QWORD *)(a4 + 32) = a1;
      result = 1;
      *(_BYTE *)(a4 + 49) = 1;
      return result;
    }
    return 0;
  }
LABEL_36:
  if (!(a3 >> 4))
    goto LABEL_49;
  v25 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE);
  if (((a3 >> 4) & ~*(_DWORD *)(v25 + 0x20)) != 0)
    goto LABEL_49;
  v26 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x58);
  if (!v26)
  {
    v37 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x40);
    if (!v37 || *(_BYTE *)(v37 + 5) != 1 && *(_DWORD *)(v37 + 80) < 2u)
      goto LABEL_49;
    v26 = JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)), v6);
    if (!v26)
      goto LABEL_49;
  }
  if (!*(_DWORD *)(v26 + 24))
    goto LABEL_49;
  v27 = *(_QWORD *)(v26 + 16);
  v28 = v27 & 0xFFFFFFFFFFFFFFFELL;
  v29 = *(unsigned int *)(v26 + 8);
  v30 = *(_DWORD *)(a3 + 16);
  if ((v27 & 1) != 0)
  {
    if ((v30 & 0x20) != 0)
      v30 = *(_DWORD *)(a3 + 32);
    v31 = *(_DWORD *)(v26 + 12);
    v32 = (v30 >> 8) & *(_QWORD *)&v31;
    v33 = *(unsigned __int8 *)(v28 + v32);
    if (*(_BYTE *)(v28 + v32))
    {
      v34 = v28 + v29;
      v35 = 1;
      while (1)
      {
        v36 = *(_QWORD *)(v34 + 8 * (v33 - 1));
        if (a3 == (v36 & 0xFFFFFFFFFFFFLL))
          break;
        v32 = ((_DWORD)v32 + v35) & v31;
        v33 = *(unsigned __int8 *)(v28 + v32);
        ++v35;
        if (!*(_BYTE *)(v28 + v32))
          goto LABEL_49;
      }
      v46 = (v36 >> 16) & 0xFF00000000 | HIBYTE(v36);
      goto LABEL_68;
    }
LABEL_49:
    if ((*(_BYTE *)(a1 + 6) & 0x20) != 0 && (JSC::JSObject::getOwnStaticPropertySlot() & 1) != 0)
      return 1;
    v38 = *(_DWORD *)(a3 + 16);
    if ((v38 & 0x20) == 0)
    {
      v39 = *(_BYTE **)(a3 + 8);
      v40 = *(unsigned int *)(a3 + 4);
      if ((v38 & 4) != 0)
      {
        if (!(_DWORD)v40 || (v62 = *v39 - 48, v62 > 9) || v40 >= 2 && *v39 == 48)
        {
LABEL_105:
          v63 = 0;
        }
        else
        {
          v67 = v40 - 1;
          v68 = v39 + 1;
          while (v67)
          {
            if (v62 > 0x19999999)
              goto LABEL_105;
            v69 = *v68 - 48;
            if (v69 > 9)
              goto LABEL_105;
            v63 = 0;
            v21 = __CFADD__(v69, 10 * v62);
            v62 = v69 + 10 * v62;
            --v67;
            ++v68;
            if (v21)
              goto LABEL_106;
          }
          v63 = 0x100000000;
          if (v62 == -1)
            v63 = 0;
        }
LABEL_106:
        if ((v63 & 0x100000000) == 0)
          return 0;
      }
      else
      {
        if ((_DWORD)v40
          && (v41 = *(unsigned __int16 *)v39 - 48, v41 <= 9)
          && (v40 < 2 || *(_WORD *)v39 != 48))
        {
          v43 = (unsigned __int16 *)(v39 + 2);
          v44 = v40 - 1;
          while (v44)
          {
            if (v41 <= 0x19999999)
            {
              v45 = *v43 - 48;
              if (v45 <= 9)
              {
                v21 = __CFADD__(v45, 10 * v41);
                v41 = v45 + 10 * v41;
                ++v43;
                --v44;
                if (!v21)
                  continue;
              }
            }
            goto LABEL_56;
          }
          v22 = v41 == -1;
          v42 = 0x100000000;
          if (v22)
            v42 = 0;
        }
        else
        {
LABEL_56:
          v42 = 0;
        }
        if ((v42 & 0x100000000) == 0)
          return 0;
      }
      return JSC::JSObject::getOwnPropertySlotByIndex();
    }
    return 0;
  }
  if ((v30 & 0x20) != 0)
    v30 = *(_DWORD *)(a3 + 32);
  v51 = *(_DWORD *)(v26 + 12);
  v52 = v51 & (v30 >> 8);
  v53 = *(_DWORD *)(v28 + 4 * v52);
  if (!v53)
    goto LABEL_49;
  v54 = v28 + 4 * v29;
  v55 = 1;
  while (1)
  {
    v56 = (v53 - 1);
    if (*(_QWORD *)(v54 + 16 * v56) == a3)
      break;
    v52 = (v52 + v55) & v51;
    v53 = *(_DWORD *)(v28 + 4 * v52);
    ++v55;
    if (!v53)
      goto LABEL_49;
  }
  v46 = *(unsigned int *)(v54 + 16 * v56 + 8) | ((unint64_t)*(unsigned __int8 *)(v54 + 16 * v56 + 12) << 32);
LABEL_68:
  if ((_DWORD)v46 == -1)
    goto LABEL_49;
  if ((int)v46 > 63)
  {
    v47 = *(_QWORD *)(a1 + 8) - 8;
    v48 = 0x3F00000000 - (v46 << 32);
  }
  else
  {
    v47 = a1 + 16;
    v48 = v46 << 32;
  }
  v49 = *(_QWORD *)(v47 + (v48 >> 29));
  if ((v49 & 0xFFFE000000000002) != 0)
    goto LABEL_74;
  v50 = *(unsigned __int8 *)(v49 + 5);
  if (v50 != 6)
  {
    if (v50 != 5)
    {
LABEL_74:
      *(_QWORD *)a4 = v49;
      *(_QWORD *)(a4 + 32) = a1;
      *(_DWORD *)(a4 + 16) = HIDWORD(v46);
      *(_DWORD *)(a4 + 20) = v46;
      result = 1;
      *(_WORD *)(a4 + 48) = 257;
      return result;
    }
    JSC::JSObject::fillGetterPropertySlot();
    return 1;
  }
  v57 = *(_DWORD *)(v25 + 16) & 3;
  v59 = *(_QWORD *)(v49 + 8);
  v58 = *(_QWORD *)(v49 + 16);
  if (MEMORY[0x1E0CBE830] == 16 * *(unsigned int *)(16 * (*(_DWORD *)v49 & 0xFFFFFFFE) + 0x4C))
  {
    v61 = *(_QWORD *)(v49 + 24);
    v60 = *(_QWORD *)(v49 + 32);
    *(_QWORD *)a4 = v59;
    *(_QWORD *)(a4 + 8) = v58;
    *(_DWORD *)(a4 + 16) = HIDWORD(v46);
    *(_QWORD *)(a4 + 32) = a1;
    *(_BYTE *)(a4 + 49) = 3;
    result = 1;
    if (v57 != 2)
      *(_BYTE *)(a4 + 48) = 1;
    *(_BYTE *)(a4 + 51) = 1;
    *(_QWORD *)(a4 + 72) = v61;
    *(_QWORD *)(a4 + 80) = v60;
  }
  else
  {
    *(_QWORD *)a4 = v59;
    *(_QWORD *)(a4 + 8) = v58;
    *(_DWORD *)(a4 + 16) = HIDWORD(v46);
    *(_QWORD *)(a4 + 32) = a1;
    result = 1;
    *(_BYTE *)(a4 + 49) = 3;
    if (v57 != 2)
      *(_BYTE *)(a4 + 48) = 1;
  }
  return result;
}

uint64_t WebCore::JSSVGStringList::getOwnPropertySlotByIndex(WebCore::JSSVGStringList *this, JSC::JSObject *a2, JSC::JSGlobalObject *a3, uint64_t a4, JSC::PropertySlot *a5)
{
  _DWORD *v8;
  uint64_t v9;
  uint64_t result;
  _QWORD v11[2];
  int v12;
  JSC::VM *v13;
  char v14;

  v13 = (JSC::VM *)*((_QWORD *)a2 + 7);
  if ((_DWORD)a3 == -1)
    return JSC::JSObject::getOwnPropertySlotByIndex();
  v8 = (_DWORD *)*((_QWORD *)this + 3);
  if (v8[11] <= a3)
    return JSC::JSObject::getOwnPropertySlotByIndex();
  (*(void (**)(_QWORD *__return_ptr, _DWORD *, JSC::JSGlobalObject *))(*(_QWORD *)v8 + 48))(v11, v8, a3);
  v12 = 0;
  v9 = WebCore::toJS<WebCore::IDLDOMString,WebCore::ExceptionOr<WTF::String>>(a2, (WTF::StringImpl *)&v13, (unsigned __int8 *)v11);
  if (v12 != -1)
    ((void (*)(char *, _QWORD *))off_1E32FBEC0[v12])(&v14, v11);
  if (*((_DWORD *)v13 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v13) & 1) != 0)
    return 0;
  *(_QWORD *)a4 = v9;
  *(_DWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 32) = this;
  result = 1;
  *(_BYTE *)(a4 + 49) = 1;
  return result;
}

uint64_t WebCore::JSSVGStringList::getOwnPropertyNames(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v4;
  int v5;
  uint64_t *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  int v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44[2];
  char v45;
  WTF::StringImpl *v46;

  v4 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 44);
  if (v4)
  {
    v5 = 0;
    v6 = a3 + 1;
    while (1)
    {
      JSC::Identifier::from();
      v8 = v43;
      v46 = v43;
      v9 = *((_DWORD *)v43 + 4);
      if ((v9 & 0x20) != 0)
      {
        if ((a3[3] & 1) == 0 || *((_BYTE *)a3 + 25) && (*((_BYTE *)v43 + 36) & 4) != 0)
          goto LABEL_60;
      }
      else if ((a3[3] & 2) == 0)
      {
        goto LABEL_60;
      }
      v10 = *a3;
      v11 = *(unsigned int *)(*a3 + 20);
      if (v11 <= 0x13)
      {
        if ((_DWORD)v11)
        {
          v12 = *(WTF::StringImpl ***)(v10 + 8);
          while (*v12 != v43)
          {
            ++v12;
            if (!--v11)
              goto LABEL_19;
          }
          goto LABEL_60;
        }
LABEL_19:
        if ((v9 & 0x20) != 0)
        {
          v33 = *(_DWORD *)v8 + 2;
        }
        else
        {
          if ((v9 & 0x10) != 0)
          {
            *(_DWORD *)v8 += 2;
          }
          else
          {
            WTF::AtomStringImpl::addSlowCase();
            v8 = v44[0];
          }
          v33 = *(_DWORD *)v8;
          *(_DWORD *)v8 += 2;
          if (!v33)
          {
            WTF::StringImpl::destroy(v8, v7);
LABEL_54:
            v34 = (uint64_t *)(v10 + 8);
            v44[0] = v8;
            v35 = *(unsigned int *)(v10 + 20);
            if ((_DWORD)v35 == *(_DWORD *)(v10 + 16))
            {
              v36 = (uint64_t *)WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v34, v35 + 1, (unint64_t)v44);
              v35 = *(unsigned int *)(v10 + 20);
              v37 = *(_QWORD *)(v10 + 8);
              v38 = *v36;
              *v36 = 0;
              *(_QWORD *)(v37 + 8 * v35) = v38;
            }
            else
            {
              v39 = *v34;
              v44[0] = 0;
              *(_QWORD *)(v39 + 8 * v35) = v8;
            }
            *(_DWORD *)(v10 + 20) = v35 + 1;
            v40 = v44[0];
            v44[0] = 0;
            if (v40)
            {
              if (*(_DWORD *)v40 == 2)
                WTF::StringImpl::destroy(v40, v7);
              else
                *(_DWORD *)v40 -= 2;
            }
            goto LABEL_60;
          }
        }
        *(_DWORD *)v8 = v33;
        goto LABEL_54;
      }
      if (!*v6 || !*(_DWORD *)(*v6 - 12))
        break;
LABEL_17:
      WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add(a3 + 1, (uint64_t *)&v46, (uint64_t)v44);
      if (v45)
      {
        v8 = v46;
        v10 = *a3;
        v9 = *((_DWORD *)v46 + 4);
        goto LABEL_19;
      }
LABEL_60:
      v41 = v43;
      v43 = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2)
          WTF::StringImpl::destroy(v41, v7);
        else
          *(_DWORD *)v41 -= 2;
      }
      if (++v5 == v4)
        return JSC::JSObject::getOwnPropertyNames();
    }
    v13 = *(uint64_t **)(v10 + 8);
    v14 = &v13[v11];
    while (1)
    {
      v15 = *v13;
      v16 = *v6;
      if (*v6
        || (WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(a3 + 1, 8u, 0), (v16 = *v6) != 0))
      {
        v17 = *(_DWORD *)(v16 - 8);
      }
      else
      {
        v17 = 0;
      }
      v18 = (~(v15 << 32) + v15) ^ ((unint64_t)(~(v15 << 32) + v15) >> 22);
      v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
      v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
      v21 = v17 & ((v20 >> 31) ^ v20);
      v22 = (uint64_t *)(v16 + 8 * v21);
      v23 = *v22;
      if (*v22)
      {
        v24 = 0;
        v25 = 1;
        while (v23 != v15)
        {
          if (v23 == -1)
            v24 = v22;
          v21 = (v21 + v25) & v17;
          v22 = (uint64_t *)(v16 + 8 * v21);
          v23 = *v22;
          ++v25;
          if (!*v22)
          {
            if (v24)
            {
              *v24 = 0;
              --*(_DWORD *)(*v6 - 16);
              v22 = v24;
            }
            goto LABEL_34;
          }
        }
        goto LABEL_47;
      }
LABEL_34:
      *v22 = v15;
      v26 = *v6;
      v27 = *v6 ? *(_DWORD *)(v26 - 12) + 1 : 1;
      *(_DWORD *)(v26 - 12) = v27;
      v28 = *v6;
      v29 = *v6 ? *(_DWORD *)(v28 - 12) : 0;
      v30 = (*(_DWORD *)(v28 - 16) + v29);
      v31 = *(unsigned int *)(v28 - 4);
      if (v31 > 0x400)
        break;
      if (3 * v31 <= 4 * v30)
      {
        if ((_DWORD)v31)
          goto LABEL_43;
        v32 = 8;
        goto LABEL_46;
      }
LABEL_47:
      if (++v13 == v14)
        goto LABEL_17;
    }
    if (v31 > 2 * v30)
      goto LABEL_47;
LABEL_43:
    v32 = (_DWORD)v31 << (6 * *(_DWORD *)(v28 - 12) >= (2 * v31));
LABEL_46:
    WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(a3 + 1, v32, v22);
    goto LABEL_47;
  }
  return JSC::JSObject::getOwnPropertyNames();
}

uint64_t WebCore::JSSVGStringList::defineOwnProperty(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3, JSC::PropertyDescriptor *this, int a5)
{
  JSC::VM *v9;
  int v10;
  _BYTE *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  JSC::VM *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int16 *v25;
  uint64_t v26;
  unsigned int v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  BOOL v35;
  unsigned int v36;
  JSValue v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  int hasExceptionsAfterHandlingTraps;
  unsigned int v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  unsigned __int8 *v46;
  unsigned int v47;
  WTF::StringImpl *v48[2];
  __int128 v49;
  uint64_t v50;
  int v51;
  JSC::VM *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;

  v9 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v52 = v9;
  if (!a3)
    goto LABEL_70;
  v10 = *(_DWORD *)(a3 + 16);
  if ((v10 & 0x20) != 0)
    goto LABEL_70;
  v11 = *(_BYTE **)(a3 + 8);
  v12 = *(unsigned int *)(a3 + 4);
  if ((v10 & 4) != 0)
  {
    if ((_DWORD)v12)
    {
      v42 = *v11 - 48;
      if (v42 <= 9 && (v12 < 2 || *v11 != 48))
      {
        v45 = v12 - 1;
        v46 = v11 + 1;
        while (v45)
        {
          if (v42 > 0x19999999)
            goto LABEL_67;
          v47 = *v46 - 48;
          if (v47 > 9)
            goto LABEL_67;
          v16 = 0;
          LOBYTE(v12) = 0;
          v43 = 0;
          v28 = __CFADD__(v47, 10 * v42);
          v42 = v47 + 10 * v42;
          --v45;
          ++v46;
          if (v28)
            goto LABEL_69;
        }
        if (v42 == -1)
          v16 = 0;
        else
          v16 = v42 & 0xFFFFFF00;
        if (v42 == -1)
          LOBYTE(v12) = 0;
        else
          LOBYTE(v12) = v42;
        if (v42 == -1)
          v43 = 0;
        else
          v43 = 0x100000000;
LABEL_69:
        v15 = v12;
        if ((v43 & 0x100000000) != 0)
          goto LABEL_9;
LABEL_70:
        v44 = *((_OWORD *)this + 1);
        *(_OWORD *)v48 = *(_OWORD *)this;
        v49 = v44;
        return JSC::JSObject::defineOwnProperty();
      }
LABEL_67:
      v16 = 0;
      LOBYTE(v12) = 0;
    }
    else
    {
      v16 = 0;
    }
    v43 = 0;
    goto LABEL_69;
  }
  if (!(_DWORD)v12 || (v13 = *(unsigned __int16 *)v11 - 48, v13 > 9))
  {
LABEL_6:
    v14 = 0;
    LOBYTE(v13) = 0;
LABEL_7:
    v15 = 0;
    goto LABEL_8;
  }
  if (v12 >= 2 && *(_WORD *)v11 == 48)
  {
    v14 = 0;
    goto LABEL_7;
  }
  v25 = (unsigned __int16 *)(v11 + 2);
  v26 = v12 - 1;
  while (v26)
  {
    if (v13 <= 0x19999999)
    {
      v27 = *v25 - 48;
      if (v27 <= 9)
      {
        v28 = __CFADD__(v27, 10 * v13);
        v13 = v27 + 10 * v13;
        ++v25;
        --v26;
        if (!v28)
          continue;
      }
    }
    goto LABEL_6;
  }
  v35 = v13 == -1;
  v36 = v13 & 0xFFFFFF00;
  v14 = 0x100000000;
  if (v13 == -1)
  {
    v14 = 0;
    LOBYTE(v13) = 0;
  }
  if (v35)
    v15 = 0;
  else
    v15 = v36;
LABEL_8:
  v16 = v13;
  if ((v14 & 0x100000000) == 0)
    goto LABEL_70;
LABEL_9:
  if ((JSC::PropertyDescriptor::isDataDescriptor(this) & 1) != 0)
  {
    v17 = *(_QWORD *)this;
    v48[0] = (WTF::StringImpl *)v17;
    v18 = (JSC::VM *)*((_QWORD *)a2 + 7);
    if ((v17 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v17 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v48, a2);
LABEL_16:
      if (*((_DWORD *)v18 + 20))
      {
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v18);
        v20 = v54;
        if (hasExceptionsAfterHandlingTraps)
        {
          v51 = 1;
          v54 = 0;
          if (v20)
          {
            if (*(_DWORD *)v20 == 2)
              WTF::StringImpl::destroy(v20, v40);
            else
              *(_DWORD *)v20 -= 2;
          }
          v34 = 1;
          goto LABEL_44;
        }
      }
      else
      {
        v20 = v54;
      }
      v51 = 0;
      v21 = *(_QWORD *)(a1 + 24);
      v50 = 0;
      v53 = v20;
      if (*(_BYTE *)(v21 + 24) == 1)
      {
        v22 = 4;
        LOBYTE(v48[0]) = 4;
        v23 = 1;
        LODWORD(v49) = 1;
        v48[1] = 0;
      }
      else
      {
        LOBYTE(v48[0]) = 1;
        LODWORD(v49) = 0;
        if (*(_DWORD *)(v21 + 44) > (v15 | v16))
        {
          (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(_QWORD *)v21 + 64))(&v54, v21);
          v29 = *(_QWORD *)(v21 + 16);
          if (v29)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v29 + 32))(v29, v21);
          v22 = 0;
          v30 = 0;
          v48[0] = v54;
          LODWORD(v49) = 0;
          v31 = 1;
LABEL_39:
          ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32FBEC0[v30])(&v54, v48);
          v33 = v53;
          v53 = 0;
          if (v33)
          {
            if (*(_DWORD *)v33 == 2)
            {
              WTF::StringImpl::destroy(v33, v32);
              if ((v31 & 1) != 0)
                goto LABEL_43;
              goto LABEL_53;
            }
            *(_DWORD *)v33 -= 2;
          }
          if ((v31 & 1) != 0)
          {
LABEL_43:
            v34 = 0;
LABEL_44:
            ((void (*)(WTF::StringImpl **, uint64_t *))off_1E32FBED0[v34])(v48, &v50);
            return 1;
          }
LABEL_53:
          LOBYTE(v48[0]) = v22;
          v48[1] = 0;
          if (!*((_QWORD *)v9 + 2))
          {
            v37.super.isa = (Class)WebCore::createDOMException(a2, (JSC::JSGlobalObject *)v22, (JSC::JSGlobalObject *)&v48[1]);
            JSC::VM::throwException(v9, a2, v37);
            v39 = v48[1];
            v48[1] = 0;
            if (v39)
            {
              if (*(_DWORD *)v39 == 2)
                WTF::StringImpl::destroy(v39, v38);
              else
                *(_DWORD *)v39 -= 2;
            }
          }
          goto LABEL_43;
        }
        v22 = 0;
        v23 = 0;
      }
      ((uint64_t (**)(WTF::StringImpl **, char *))off_1E32F83C8)[v23](&v54, (char *)v48);
      v31 = 0;
      LOBYTE(v48[0]) = v22;
      v30 = 1;
      LODWORD(v49) = 1;
      v48[1] = 0;
      goto LABEL_39;
    }
    v19 = *(WTF::StringImpl **)(v17 + 8);
    if ((v19 & 1) != 0)
    {
      v19 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v17, a2);
      if (!v19)
        goto LABEL_15;
    }
    else if (!v19)
    {
LABEL_15:
      v54 = v19;
      goto LABEL_16;
    }
    *(_DWORD *)v19 += 2;
    goto LABEL_15;
  }
  if (a5)
    JSC::throwTypeError();
  return 0;
}

uint64_t WebCore::JSSVGStringList::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::JSSVGStringList::createPrototype(WebCore::JSSVGStringList *this, JSC::JSCell **a2, WebCore::JSDOMGlobalObject *a3)
{
  unint64_t v4;
  WebCore::JSDOMGlobalObject *v5;
  JSC::Structure *v6;

  v4 = JSC::Structure::create((uint64_t *)this, (int)a2, a2[82]);
  *(_DWORD *)(v4 + 16) |= 0x80000u;
  return WebCore::JSSVGStringListPrototype::create(this, v4, v5, v6);
}

unint64_t WebCore::JSSVGStringListPrototype::create(WebCore::JSSVGStringListPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  unint64_t v6;
  int v7;

  v6 = JSC::allocateCell<WebCore::JSAbstractRangePrototype>((uint64_t)this);
  v7 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)v6 = a2 >> 4;
  *(_DWORD *)(v6 + 4) = v7;
  *(_QWORD *)(v6 + 8) = 0;
  WebCore::JSSVGStringListPrototype::finishCreation((WebCore::JSSVGStringListPrototype *)v6, this);
  return v6;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGStringList>,(WebCore::DOMConstructorID)863>(uint64_t a1, uint64_t a2)
{
  unint64_t result;
  uint64_t Structure;
  JSC::Heap *v6;
  unint64_t v7;

  result = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6904);
  if (!result)
  {
    Structure = WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGStringList>::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 664));
    result = WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGStringList>::create(a1, Structure, (JSC::JSCell **)a2);
    *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6904) = result;
    if (result)
    {
      if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
      {
        v6 = (JSC::Heap *)(a1 + 192);
        v7 = result;
        JSC::Heap::writeBarrierSlowPath(v6, (const JSCell *)a2);
        return v7;
      }
    }
  }
  return result;
}

unint64_t WebCore::jsSVGStringListConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGStringListPrototype::s_info != (char **)(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                               + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGStringList>,(WebCore::DOMConstructorID)863>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGStringList_length(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 24) + 44);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

unint64_t WebCore::jsSVGStringList_numberOfItems(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 24) + 44);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

uint64_t WebCore::JSSVGStringListOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

_QWORD *WebCore::JSSVGStringListOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::wrap<WebCore::SVGStringList>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF *v30;
  void *v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *Allocator;
  unint64_t v38;
  _QWORD *v39;
  WTF *v40;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 2);
  if (*(void (***)(WebCore::SVGStringList *__hidden))a3 != off_1E34742D0)
  {
    __break(0xC471u);
    JUMPOUT(0x194F39B70);
  }
  v15 = WebCore::getDOMStructure<WebCore::JSSVGStringList>(*(WebCore::JSSVGStringList **)(a2 + 56), (JSC::JSCell **)a2);
  v16 = *(_QWORD *)(a2 + 56);
  v17 = *(_QWORD *)(v16 + 41456);
  v18 = *(_QWORD *)(v17 + 23536);
  v19 = *(_QWORD **)(v18 + 6984);
  if (!v19)
  {
    v20 = *(_QWORD *)(v17 + 22648);
    if (__ldaxr((unsigned __int8 *)v20))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v20))
    {
      goto LABEL_15;
    }
    MEMORY[0x19AEA534C](v20);
LABEL_15:
    v22 = *(_QWORD *)(v20 + 2824);
    if (!*(_QWORD *)(v22 + 6984))
    {
      v23 = WTF::fastMalloc((WTF *)0xF8);
      WTF::CString::CString((WTF::CString *)&v40, "IsoSpace T");
      v39 = 0;
      MEMORY[0x19AEA3204](v23, &v40, v16 + 192, v16 + 1872, 32, 8, &v39);
      v25 = (uint64_t)v39;
      v39 = 0;
      if (v25)
        (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
      v26 = v40;
      v40 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 1)
          WTF::fastFree(v26, v24);
        else
          --*(_DWORD *)v26;
      }
      v27 = *(_QWORD *)(v22 + 6984);
      *(_QWORD *)(v22 + 6984) = v23;
      if (v27)
        (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    }
    v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
    JSC::GCClient::IsoSubspace::IsoSubspace();
    v29 = *(_QWORD *)(v18 + 6984);
    *(_QWORD *)(v18 + 6984) = v19;
    if (v29)
    {
      v30 = (WTF *)MEMORY[0x19AEA3528](v29, v28);
      WTF::fastFree(v30, v31);
    }
    v32 = __ldxr((unsigned __int8 *)v20);
    if (v32 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v20))
        goto LABEL_30;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v20);
  }
LABEL_30:
  SlowCase = v19[3];
  if (SlowCase >= v19[4])
  {
    SlowCase = v19[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_32;
    }
    v38 = *(_QWORD *)(SlowCase + 8) ^ v19[6];
    v19[4] = SlowCase + HIDWORD(v38);
    v19[5] = SlowCase + (int)v38;
  }
  v19[3] = SlowCase + 32;
LABEL_32:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v15);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v16 + 755))
    __dmb(0xAu);
  v33 = *(_QWORD *)(a2 + 3320);
  if ((byte_1ECE816B8 & 1) == 0)
  {
    qword_1ECE816B0 = (uint64_t)&off_1E32F7740;
    byte_1ECE816B8 = 1;
  }
  v40 = a3;
  if ((SlowCase & 8) != 0)
    v34 = (SlowCase - 112) | 1;
  else
    v34 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v34 & 1) != 0)
    v35 = v34 + 47;
  else
    v35 = *(_QWORD *)v34 + 32;
  Allocator = *(_QWORD **)(v35 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v35 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1ECE816B0;
  Allocator[2] = v33;
  v39 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v33 + 32), (uint64_t *)&v40, (uint64_t *)&v39);
  if (v39)
    v39[1] = 3;
  return SlowCase;
}

uint64_t WebCore::JSSVGStyleElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSVGStyleElementPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGStyleElementPrototype::create(WebCore::JSSVGStyleElementPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<6u>(this, (uint64_t)&WebCore::JSSVGStyleElement::s_info, &WebCore::JSSVGStyleElementPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGStyleElement>,(WebCore::DOMConstructorID)864>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6912);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGElement>,(WebCore::DOMConstructorID)783>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v34);
    v5[2] = SlowCase + (int)v34;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGStyleElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v35 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v35);
    v10[2848] = v2 + (int)v35;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSSVGStyleElement::s_info + ~((_QWORD)&WebCore::JSSVGStyleElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGStyleElement::s_info + ~((_QWORD)&WebCore::JSSVGStyleElement::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSSVGStyleElement::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSSVGStyleElement::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSSVGElement::prototype((WebCore::JSSVGElement *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSSVGStyleElementPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v30 = (JSC::JSCell *)WebCore::JSSVGStyleElementPrototype::create((WebCore::JSSVGStyleElementPrototype *)a1, (JSC::VM *)a2, Structure, v29);
  v31 = WebCore::JSSVGStyleElement::createStructure((uint64_t *)a1, a2, v30);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v31, (uint64_t)&WebCore::JSSVGStyleElement::s_info);
LABEL_22:
  v32 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v32, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6912) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGStyleElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGStyleElementPrototype::s_info != (char **)(16
                                                               * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                 + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGStyleElement>,(WebCore::DOMConstructorID)864>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsSVGStyleElement_disabled(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 208);
  if (!v2)
    return 6;
  if (*(_BYTE *)(v2 + 33))
    return 7;
  return 6;
}

uint64_t WebCore::setJSSVGStyleElement_disabled(uint64_t a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  double v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  BOOL v17;
  int v18;
  uint64_t v19;
  int *v20;
  int v21;
  uint64_t v22;

  v4 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGStyleElement::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGStyleElement::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  if (a3 >= 0xFFFE000000000000)
  {
    v17 = (_DWORD)a3 == 0;
    goto LABEL_43;
  }
  *(_QWORD *)&v10 = a3 - 0x2000000000000;
  if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((a3 & 0xFFFE000000000002) != 0)
    {
      v11 = a3 == 7;
      goto LABEL_16;
    }
    v18 = *(unsigned __int8 *)(a3 + 5);
    if (v18 == 3)
    {
      v21 = *(_DWORD *)(a3 + 8);
    }
    else
    {
      if (v18 != 2)
      {
        if ((*(_BYTE *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0xA) & 1) == 0)
        {
          v11 = 1;
          goto LABEL_16;
        }
        v17 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28) == a1;
        goto LABEL_43;
      }
      v19 = *(_QWORD *)(a3 + 8);
      if ((v19 & 1) != 0)
        v20 = (int *)(a3 + 16);
      else
        v20 = (int *)(v19 + 4);
      v21 = *v20;
    }
    v17 = v21 == 0;
LABEL_43:
    v11 = !v17;
    goto LABEL_16;
  }
  v11 = v10 > 0.0 || v10 < 0.0;
LABEL_16:
  v12 = *(_QWORD *)(a2 + 24);
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  v13 = *(_QWORD *)(v12 + 208);
  if (v13)
  {
    v14 = *(_DWORD *)(v13 + 8);
    *(_DWORD *)(v13 + 8) = v14 + 1;
    if (*(unsigned __int8 *)(v13 + 33) != v11)
    {
      *(_BYTE *)(v13 + 33) = v11;
      v15 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v15 = off_1E3398D48;
      v22 = v15;
      WebCore::CSSStyleSheet::forEachStyleScope(v13, &v22);
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
      v14 = *(_DWORD *)(v13 + 8) - 1;
    }
    if (v14)
      *(_DWORD *)(v13 + 8) = v14;
    else
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  return 1;
}

uint64_t WebCore::jsSVGStyleElement_type(uint64_t a1, uint64_t a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned __int8 *v12;
  unsigned int v13;
  unsigned int v14;

  v6 = *(_QWORD *)WebCore::Element::getAttribute(*(WebCore::Element **)(a2 + 24), (const WebCore::QualifiedName *)&WebCore::SVGNames::typeAttr, a3, a4, a5);
  v7 = *(_QWORD *)(a1 + 56);
  if (v6)
    v8 = v6;
  else
    v8 = WebCore::cssContentTypeAtomData;
  if (!v8)
    return *(_QWORD *)(v7 + 41968);
  v9 = *(_DWORD *)(v8 + 4);
  if (!v9)
    return *(_QWORD *)(v7 + 41968);
  if (v9 == 1)
  {
    v12 = *(unsigned __int8 **)(v8 + 8);
    if ((*(_BYTE *)(v8 + 16) & 4) != 0)
    {
      v13 = *v12;
    }
    else
    {
      v14 = *(unsigned __int16 *)v12;
      if (v14 > 0xFF)
        goto LABEL_7;
      v13 = v14;
    }
    return *(_QWORD *)(v7 + 8 * v13 + 42216);
  }
LABEL_7:
  v10 = *(_QWORD *)(v7 + 64760);
  if (!v10 || v8 != *(_QWORD *)(v10 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v10;
}

BOOL WebCore::setJSSVGStyleElement_type(JSC::JSGlobalObject *a1, uint64_t a2, JSC::JSRopeString *this)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WebCore::Element *v8;
  __n128 v9;
  int v10;
  _BOOL8 v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v17;
  int v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  char v22;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSSVGStyleElement::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSSVGStyleElement::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(WebCore::Element **)(a2 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, (unint64_t)this, (uint64_t)&v17);
  v10 = v18;
  v11 = v18 == 0;
  if (!v18)
  {
    v12 = v17;
    v17 = 0;
    v19 = v12;
    WebCore::Element::setAttribute(v8, (const WebCore::QualifiedName *)&WebCore::SVGNames::typeAttr, &v19, 0, &v20, v9);
    if (v22)
    {
      v14 = v21;
      v21 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v13);
        else
          *(_DWORD *)v14 -= 2;
      }
    }
    v15 = v19;
    v19 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v13);
      else
        *(_DWORD *)v15 -= 2;
    }
    v10 = v18;
  }
  if (v10 != -1)
    ((void (*)(uint64_t *, WTF::StringImpl **))off_1E32FBC30[v10])(&v20, &v17);
  return v11;
}

uint64_t WebCore::jsSVGStyleElement_media(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v2)
    goto LABEL_12;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) == 0)
  {
    v4 = v2 + 32;
    LODWORD(v5) = v3 >> 5;
    if ((_DWORD)v5)
      goto LABEL_4;
LABEL_12:
    v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(v2 + 40);
  LODWORD(v5) = *(_DWORD *)(v2 + 52);
  if (!(_DWORD)v5)
    goto LABEL_12;
LABEL_4:
  v5 = v5;
  v6 = (uint64_t *)(v4 + 8);
  while (1)
  {
    v7 = *(v6 - 1);
    if (v7 == WebCore::SVGNames::mediaAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::SVGNames::mediaAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::SVGNames::mediaAttr + 32))
    {
      break;
    }
    v6 += 2;
    if (!--v5)
    {
      v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v8 = *(_QWORD *)(a1 + 56);
  if (*v6)
    v9 = *v6;
  else
    v9 = WebCore::allAtomData;
  if (!v9)
    return *(_QWORD *)(v8 + 41968);
  v10 = *(_DWORD *)(v9 + 4);
  if (!v10)
    return *(_QWORD *)(v8 + 41968);
  if (v10 == 1)
  {
    v13 = *(unsigned __int8 **)(v9 + 8);
    if ((*(_BYTE *)(v9 + 16) & 4) != 0)
    {
      v14 = *v13;
    }
    else
    {
      v15 = *(unsigned __int16 *)v13;
      if (v15 > 0xFF)
        goto LABEL_19;
      v14 = v15;
    }
    return *(_QWORD *)(v8 + 8 * v14 + 42216);
  }
LABEL_19:
  v11 = *(_QWORD *)(v8 + 64760);
  if (!v11 || v9 != *(_QWORD *)(v11 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v11;
}

BOOL WebCore::setJSSVGStyleElement_media(JSC::JSGlobalObject *a1, uint64_t a2, JSC::JSRopeString *this)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WTF::StringImpl *v8;
  int v9;
  _BOOL8 v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v21;
  int v22;
  WTF::StringImpl *v23;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSSVGStyleElement::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSSVGStyleElement::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(WTF::StringImpl **)(a2 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, (unint64_t)this, (uint64_t)&v21);
  v9 = v22;
  v10 = v22 == 0;
  if (!v22)
  {
    v11 = v21;
    v21 = 0;
    v23 = v11;
    v12 = *((_QWORD *)v8 + 13);
    if (v12)
    {
      v13 = *(_DWORD *)(v12 + 4);
      if ((v13 & 1) == 0)
      {
        v14 = (uint64_t *)(v12 + 32);
        v15 = v13 >> 5;
        if (!v15)
          goto LABEL_25;
LABEL_18:
        v16 = 0;
        while (1)
        {
          v17 = *v14;
          if (*v14 == WebCore::SVGNames::mediaAttr
            || *(_QWORD *)(v17 + 24) == *(_QWORD *)(WebCore::SVGNames::mediaAttr + 24)
            && *(_QWORD *)(v17 + 32) == *(_QWORD *)(WebCore::SVGNames::mediaAttr + 32))
          {
            goto LABEL_26;
          }
          ++v16;
          v14 += 2;
          if (v15 == v16)
            goto LABEL_25;
        }
      }
      v14 = *(uint64_t **)(v12 + 40);
      v15 = *(_DWORD *)(v12 + 52);
      if (v15)
        goto LABEL_18;
    }
LABEL_25:
    v16 = 0xFFFFFFFFLL;
LABEL_26:
    WebCore::Element::setAttributeInternal(v8, v16, (WebCore::TreeScope *)&WebCore::SVGNames::mediaAttr, &v23, 0);
    v19 = v23;
    v23 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v18);
      else
        *(_DWORD *)v19 -= 2;
    }
    v9 = v22;
  }
  if (v9 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32FBC30[v9])(&v23, &v21);
  return v10;
}

uint64_t WebCore::jsSVGStyleElement_title(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v3)
    goto LABEL_12;
  v4 = *(_DWORD *)(v3 + 4);
  if ((v4 & 1) == 0)
  {
    v5 = v3 + 32;
    LODWORD(v6) = v4 >> 5;
    if ((_DWORD)v6)
      goto LABEL_4;
LABEL_12:
    v7 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v5 = *(_QWORD *)(v3 + 40);
  LODWORD(v6) = *(_DWORD *)(v3 + 52);
  if (!(_DWORD)v6)
    goto LABEL_12;
LABEL_4:
  v6 = v6;
  v7 = (uint64_t *)(v5 + 8);
  while (1)
  {
    v8 = *(v7 - 1);
    if (v8 == WebCore::SVGNames::titleAttr
      || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::SVGNames::titleAttr + 24)
      && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::SVGNames::titleAttr + 32))
    {
      break;
    }
    v7 += 2;
    if (!--v6)
    {
      v7 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v9 = *v7;
  if (!*v7)
    return *(_QWORD *)(v2 + 41968);
  v10 = *(_DWORD *)(v9 + 4);
  if (!v10)
    return *(_QWORD *)(v2 + 41968);
  if (v10 == 1)
  {
    v13 = *(unsigned __int8 **)(v9 + 8);
    if ((*(_BYTE *)(v9 + 16) & 4) != 0)
    {
      v14 = *v13;
    }
    else
    {
      v15 = *(unsigned __int16 *)v13;
      if (v15 > 0xFF)
        goto LABEL_16;
      v14 = v15;
    }
    return *(_QWORD *)(v2 + 8 * v14 + 42216);
  }
LABEL_16:
  v11 = *(_QWORD *)(v2 + 64760);
  if (!v11 || v9 != *(_QWORD *)(v11 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v11;
}

BOOL WebCore::setJSSVGStyleElement_title(JSC::JSGlobalObject *a1, uint64_t a2, JSC::JSRopeString *this)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  WTF::StringImpl *v8;
  int v9;
  _BOOL8 v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v21;
  int v22;
  WTF::StringImpl *v23;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSSVGStyleElement::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSSVGStyleElement::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(WTF::StringImpl **)(a2 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, (unint64_t)this, (uint64_t)&v21);
  v9 = v22;
  v10 = v22 == 0;
  if (!v22)
  {
    v11 = v21;
    v21 = 0;
    v23 = v11;
    v12 = *((_QWORD *)v8 + 13);
    if (v12)
    {
      v13 = *(_DWORD *)(v12 + 4);
      if ((v13 & 1) == 0)
      {
        v14 = (uint64_t *)(v12 + 32);
        v15 = v13 >> 5;
        if (!v15)
          goto LABEL_25;
LABEL_18:
        v16 = 0;
        while (1)
        {
          v17 = *v14;
          if (*v14 == WebCore::SVGNames::titleAttr
            || *(_QWORD *)(v17 + 24) == *(_QWORD *)(WebCore::SVGNames::titleAttr + 24)
            && *(_QWORD *)(v17 + 32) == *(_QWORD *)(WebCore::SVGNames::titleAttr + 32))
          {
            goto LABEL_26;
          }
          ++v16;
          v14 += 2;
          if (v15 == v16)
            goto LABEL_25;
        }
      }
      v14 = *(uint64_t **)(v12 + 40);
      v15 = *(_DWORD *)(v12 + 52);
      if (v15)
        goto LABEL_18;
    }
LABEL_25:
    v16 = 0xFFFFFFFFLL;
LABEL_26:
    WebCore::Element::setAttributeInternal(v8, v16, (WebCore::TreeScope *)&WebCore::SVGNames::titleAttr, &v23, 0);
    v19 = v23;
    v23 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v18);
      else
        *(_DWORD *)v19 -= 2;
    }
    v9 = v22;
  }
  if (v9 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32FBC30[v9])(&v23, &v21);
  return v10;
}

uint64_t WebCore::jsSVGStyleElement_sheet(int a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 208);
  if (v2)
    return WebCore::wrap<WebCore::CSSStyleSheet>(a1, *(JSC::VM **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), v2);
  else
    return 2;
}

uint64_t WebCore::JSSVGStyleElement::subspaceForImpl(WebCore::JSSVGStyleElement *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  void *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 6992);
  if (v4)
    return v4;
  v7 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v7, a2);
LABEL_6:
  v9 = *(_QWORD *)(v7 + 2824);
  v19 = *(_QWORD *)(v9 + 6992);
  if (!v19)
  {
    v17 = 40;
    std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[11],JSC::Heap &,JSC::JSDestructibleObjectHeapCellType &,unsigned long,unsigned char const&>("IsoSpace T", (uint64_t)this + 192, (uint64_t)this + 1872, &v17, JSC::JSCell::numberOfLowerTierCells, &v18);
    v14 = v18;
    v19 = v18;
    v15 = *(_QWORD *)(v9 + 6992);
    *(_QWORD *)(v9 + 6992) = v18;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    v16 = *(unsigned int *)(v7 + 2844);
    if ((_DWORD)v16 == *(_DWORD *)(v7 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v7 + 2832, (unint64_t)&v19);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v7 + 2832) + 8 * v16) = v14;
      *(_DWORD *)(v7 + 2844) = v16 + 1;
    }
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v10 = *(_QWORD *)(v3 + 6992);
  *(_QWORD *)(v3 + 6992) = v4;
  if (v10)
  {
    v11 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v11, v12);
  }
  v13 = __ldxr((unsigned __int8 *)v7);
  if (v13 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
  return v4;
}

uint64_t WebCore::JSSVGSwitchElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGGraphicsElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGGraphicsElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGGraphicsElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSVGSwitchElementPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGSwitchElementPrototype::create(WebCore::JSSVGSwitchElementPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  JSC::Structure *v15;
  int v16;
  unint64_t v18;
  WTF::StringImpl *v19[6];
  int v20;
  int v21;
  JSC::Structure *v22;
  int v23;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v18 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v18);
    *((_QWORD *)this + 4865) = SlowCase + (int)v18;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)SlowCase, this);
  WTF::AtomStringImpl::addLiteral();
  v9 = v19[0];
  JSC::reifyStaticProperty(this, (uint64_t)&WebCore::JSSVGSwitchElement::s_info, (unint64_t *)v19, (uint64_t)&WebCore::JSSVGSwitchElementPrototypeTableValues, (unsigned __int8 *)SlowCase);
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v10);
    else
      *(_DWORD *)v9 -= 2;
  }
  v11 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create((uint64_t)this, v19);
  v14 = v19[0];
  v19[0] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v23 = *(_DWORD *)SlowCase;
  v22 = v15;
  v16 = JSC::Structure::outOfLineCapacity(v15);
  v20 = 0;
  v21 = v16;
  v19[0] = (WTF::StringImpl *)&v21;
  v19[1] = (WTF::StringImpl *)SlowCase;
  v19[2] = this;
  v19[3] = (WTF::StringImpl *)&v23;
  v19[4] = (WTF::StringImpl *)&v22;
  v19[5] = (WTF::StringImpl *)&v20;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v15, this, v11, 6, (uint64_t)v19);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v20, v13);
  *((_DWORD *)v15 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGSwitchElement>,(WebCore::DOMConstructorID)865>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6920);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGGraphicsElement>,(WebCore::DOMConstructorID)815>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v34);
    v5[2] = SlowCase + (int)v34;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGSwitchElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v35 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v35);
    v10[2848] = v2 + (int)v35;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSSVGSwitchElement::s_info + ~((_QWORD)&WebCore::JSSVGSwitchElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGSwitchElement::s_info + ~((_QWORD)&WebCore::JSSVGSwitchElement::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSSVGSwitchElement::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSSVGSwitchElement::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSSVGGraphicsElement::prototype((WebCore::JSSVGGraphicsElement *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSSVGSwitchElementPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v30 = (JSC::JSCell *)WebCore::JSSVGSwitchElementPrototype::create((WebCore::JSSVGSwitchElementPrototype *)a1, (JSC::VM *)a2, Structure, v29);
  v31 = WebCore::JSSVGSwitchElement::createStructure((uint64_t *)a1, a2, v30);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v31, (uint64_t)&WebCore::JSSVGSwitchElement::s_info);
LABEL_22:
  v32 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v32, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6920) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGSwitchElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGSwitchElementPrototype::s_info != (char **)(16
                                                                * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                  + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGSwitchElement>,(WebCore::DOMConstructorID)865>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::JSSVGSwitchElement::subspaceForImpl(WebCore::JSSVGSwitchElement *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 7000);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  v20 = *(_QWORD *)(v8 + 7000);
  if (!v20)
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v22, "IsoSpace T");
    v21 = 0;
    MEMORY[0x19AEA3204](v9, &v22, (char *)this + 192, (char *)this + 1872, 40, 8, &v21);
    v11 = v21;
    v21 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v22;
    v22 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v20 = v9;
    v13 = *(_QWORD *)(v8 + 7000);
    *(_QWORD *)(v8 + 7000) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = *(unsigned int *)(v6 + 2844);
    if ((_DWORD)v14 == *(_DWORD *)(v6 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v6 + 2832, (unint64_t)&v20);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = v9;
      *(_DWORD *)(v6 + 2844) = v14 + 1;
    }
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 7000);
  *(_QWORD *)(v3 + 7000) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSSVGSymbolElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGGraphicsElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGGraphicsElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGGraphicsElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSVGSymbolElementPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGSymbolElementPrototype::create(WebCore::JSSVGSymbolElementPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(this, (uint64_t)&WebCore::JSSVGSymbolElement::s_info, &WebCore::JSSVGSymbolElementPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGSymbolElement>,(WebCore::DOMConstructorID)866>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6928);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGGraphicsElement>,(WebCore::DOMConstructorID)815>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v34);
    v5[2] = SlowCase + (int)v34;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGSymbolElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v35 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v35);
    v10[2848] = v2 + (int)v35;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSSVGSymbolElement::s_info + ~((_QWORD)&WebCore::JSSVGSymbolElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGSymbolElement::s_info + ~((_QWORD)&WebCore::JSSVGSymbolElement::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSSVGSymbolElement::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSSVGSymbolElement::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSSVGGraphicsElement::prototype((WebCore::JSSVGGraphicsElement *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSSVGSymbolElementPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v30 = (JSC::JSCell *)WebCore::JSSVGSymbolElementPrototype::create((WebCore::JSSVGSymbolElementPrototype *)a1, (JSC::VM *)a2, Structure, v29);
  v31 = WebCore::JSSVGSymbolElement::createStructure((uint64_t *)a1, a2, v30);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v31, (uint64_t)&WebCore::JSSVGSymbolElement::s_info);
LABEL_22:
  v32 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v32, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6928) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGSymbolElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGSymbolElementPrototype::s_info != (char **)(16
                                                                * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                  + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGSymbolElement>,(WebCore::DOMConstructorID)866>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGSymbolElement_viewBox(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGRect>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 216));
}

unint64_t WebCore::jsSVGSymbolElement_preserveAspectRatio(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGPreserveAspectRatio>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 224));
}

uint64_t WebCore::JSSVGSymbolElement::subspaceForImpl(WebCore::JSSVGSymbolElement *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 7008);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  v20 = *(_QWORD *)(v8 + 7008);
  if (!v20)
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v22, "IsoSpace T");
    v21 = 0;
    MEMORY[0x19AEA3204](v9, &v22, (char *)this + 192, (char *)this + 1872, 40, 8, &v21);
    v11 = v21;
    v21 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v22;
    v22 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v20 = v9;
    v13 = *(_QWORD *)(v8 + 7008);
    *(_QWORD *)(v8 + 7008) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = *(unsigned int *)(v6 + 2844);
    if ((_DWORD)v14 == *(_DWORD *)(v6 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v6 + 2832, (unint64_t)&v20);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = v9;
      *(_DWORD *)(v6 + 2844) = v14 + 1;
    }
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 7008);
  *(_QWORD *)(v3 + 7008) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

WTF::StringImpl *WebCore::JSSVGTSpanElementPrototype::finishCreation(WebCore::JSSVGTSpanElementPrototype *this, JSC::VM *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<1u>(a2, (uint64_t)&WebCore::JSSVGTSpanElement::s_info, (uint64_t)&WebCore::JSSVGTSpanElementPrototypeTableValues, this);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5 = JSC::jsNontrivialString((uint64_t)a2, &v8);
  JSC::JSObject::putDirectWithoutTransition((int *)this, a2, v4, v5, 6);
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::JSSVGTSpanElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGTextPositioningElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGTextPositioningElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGTextPositioningElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::JSSVGTSpanElement::createPrototype(WebCore::JSSVGTSpanElement *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  JSC::JSCell *v5;
  unint64_t v6;
  JSC::Structure *v7;

  v5 = (JSC::JSCell *)WebCore::JSSVGTextPositioningElement::prototype(this, a2, a3);
  v6 = JSC::Structure::create((uint64_t *)this, (int)a2, v5);
  *(_DWORD *)(v6 + 16) |= 0x80000u;
  return WebCore::JSSVGTSpanElementPrototype::create(this, a2, v6, v7);
}

uint64_t WebCore::JSSVGTextPositioningElement::prototype(WebCore::JSSVGTextPositioningElement *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t v12;
  JSC::JSCell *Prototype;
  uint64_t v14;
  int v16;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_4;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSSVGTextPositioningElement::s_info
      + ~((_QWORD)&WebCore::JSSVGTextPositioningElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGTextPositioningElement::s_info
                                                                          + ~((_QWORD)&WebCore::JSSVGTextPositioningElement::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSSVGTextPositioningElement::s_info)
  {
    v16 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v16) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v16;
      if (v11 == &WebCore::JSSVGTextPositioningElement::s_info)
        goto LABEL_3;
    }
    goto LABEL_4;
  }
LABEL_3:
  v12 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v12)
  {
LABEL_4:
    Prototype = (JSC::JSCell *)WebCore::JSSVGTextPositioningElement::createPrototype(this, a2, a3);
    v14 = JSC::Structure::create((uint64_t *)this, (int)a2, Prototype);
    v12 = WebCore::cacheDOMStructure((JSCell *)a2, v14, (uint64_t)&WebCore::JSSVGTextPositioningElement::s_info);
  }
  return *(_QWORD *)(v12 + 48);
}

unint64_t WebCore::JSSVGTSpanElementPrototype::create(WebCore::JSSVGTSpanElementPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  unint64_t v6;
  int v7;

  v6 = JSC::allocateCell<WebCore::JSAbstractRangePrototype>((uint64_t)this);
  v7 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)v6 = a3 >> 4;
  *(_DWORD *)(v6 + 4) = v7;
  *(_QWORD *)(v6 + 8) = 0;
  WebCore::JSSVGTSpanElementPrototype::finishCreation((WebCore::JSSVGTSpanElementPrototype *)v6, this);
  return v6;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGTSpanElement>,(WebCore::DOMConstructorID)867>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  unint64_t v16;
  WebCore::JSDOMGlobalObject *v17;
  uint64_t v18;
  unint64_t v20;
  unint64_t v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  int v24;
  int v25;
  uint64_t v26;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6936);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGTextPositioningElement>,(WebCore::DOMConstructorID)871>(a1, a2);
  v7 = v6;
  LODWORD(v22) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v20 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v20);
    v5[2] = SlowCase + (int)v20;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v22, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGTSpanElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 >= v10[2847])
  {
    v2 = v10[2848];
    if ((v2 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v2 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_11;
    }
    v21 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v21);
    v10[2848] = v2 + (int)v21;
  }
  v10[2846] = v2 + 48;
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v22);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v22);
  v14 = v22;
  v22 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v22);
  v16 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(WebCore::getDOMStructure<WebCore::JSSVGTSpanElement>(a1, (JSC::VM *)a2, v17) + 48);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v16, v18, 14, (uint64_t)&v22);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6936) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGTSpanElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGTSpanElementPrototype::s_info != (char **)(16
                                                               * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                 + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGTSpanElement>,(WebCore::DOMConstructorID)867>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::JSSVGTSpanElement::subspaceForImpl(WebCore::JSSVGTSpanElement *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  void *v12;
  int v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 7016);
  if (v4)
    return v4;
  v7 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v7, a2);
LABEL_6:
  v9 = *(_QWORD *)(v7 + 2824);
  v20 = *(_QWORD *)(v9 + 7016);
  if (!v20)
  {
    v14 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v22, "IsoSpace T");
    v21 = 0;
    MEMORY[0x19AEA3204](v14, &v22, (char *)this + 192, (char *)this + 1872, 40, 8, &v21);
    v16 = v21;
    v21 = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    v17 = v22;
    v22 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 1)
        WTF::fastFree(v17, v15);
      else
        --*(_DWORD *)v17;
    }
    v20 = v14;
    v18 = *(_QWORD *)(v9 + 7016);
    *(_QWORD *)(v9 + 7016) = v14;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    v19 = *(unsigned int *)(v7 + 2844);
    if ((_DWORD)v19 == *(_DWORD *)(v7 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v7 + 2832, (unint64_t)&v20);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v7 + 2832) + 8 * v19) = v14;
      *(_DWORD *)(v7 + 2844) = v19 + 1;
    }
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v10 = *(_QWORD *)(v3 + 7016);
  *(_QWORD *)(v3 + 7016) = v4;
  if (v10)
  {
    v11 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v11, v12);
  }
  v13 = __ldxr((unsigned __int8 *)v7);
  if (v13 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
  return v4;
}

uint64_t WebCore::JSSVGTextPositioningElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGTextContentElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGTextContentElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGTextContentElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

WTF::StringImpl *WebCore::JSSVGTextContentElementPrototype::finishCreation(WebCore::JSSVGTextContentElementPrototype *this, JSC::VM *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<15u>(a2, (uint64_t)&WebCore::JSSVGTextContentElement::s_info, (uint64_t)&WebCore::JSSVGTextContentElementPrototypeTableValues, this);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5 = JSC::jsNontrivialString((uint64_t)a2, &v8);
  JSC::JSObject::putDirectWithoutTransition((int *)this, a2, v4, v5, 6);
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::JSSVGTextContentElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGGraphicsElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGGraphicsElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGGraphicsElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::JSSVGTextContentElement::createPrototype(WebCore::JSSVGTextContentElement *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  int v3;
  JSC::JSCell *v5;
  unint64_t v6;
  WebCore::JSDOMGlobalObject *v7;
  JSC::Structure *v8;

  v3 = (int)a2;
  v5 = (JSC::JSCell *)WebCore::JSSVGGraphicsElement::prototype(this, a2, a3);
  v6 = JSC::Structure::create((uint64_t *)this, v3, v5);
  *(_DWORD *)(v6 + 16) |= 0x80000u;
  return WebCore::JSSVGTextContentElementPrototype::create(this, v6, v7, v8);
}

unint64_t WebCore::JSSVGTextContentElementPrototype::create(WebCore::JSSVGTextContentElementPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  unint64_t v6;
  int v7;

  v6 = JSC::allocateCell<WebCore::JSAbstractRangePrototype>((uint64_t)this);
  v7 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)v6 = a2 >> 4;
  *(_DWORD *)(v6 + 4) = v7;
  *(_QWORD *)(v6 + 8) = 0;
  WebCore::JSSVGTextContentElementPrototype::finishCreation((WebCore::JSSVGTextContentElementPrototype *)v6, this);
  return v6;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGTextContentElement>,(WebCore::DOMConstructorID)868>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v19;
  unint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  int v23;
  int v24;
  uint64_t v25;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6944);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGGraphicsElement>,(WebCore::DOMConstructorID)815>(a1, a2);
  v7 = v6;
  LODWORD(v21) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v19 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v19);
    v5[2] = SlowCase + (int)v19;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v21, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGTextContentElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 >= v10[2847])
  {
    v2 = v10[2848];
    if ((v2 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v2 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_11;
    }
    v20 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v20);
    v10[2848] = v2 + (int)v20;
  }
  v10[2846] = v2 + 48;
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v21 = 0;
  v22 = v2;
  v23 = -1;
  v24 = 0x1000000;
  v25 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v21);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v21);
  v14 = v21;
  v21 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v21 = 0;
  v22 = v2;
  v23 = -1;
  v24 = 0x1000000;
  v25 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v21);
  v16 = *(_QWORD *)(v5[227] + 2160);
  v17 = *(_QWORD *)(WebCore::getDOMStructure<WebCore::JSSVGTextContentElement>((WebCore::JSSVGTextContentElement *)a1, (JSC::VM *)a2)+ 48);
  v21 = 0;
  v22 = v2;
  v23 = -1;
  v24 = 0x1000000;
  v25 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v16, v17, 14, (uint64_t)&v21);
  JSC::reifyStaticProperties<3u>((JSC::VM *)a1, (uint64_t)&WebCore::JSSVGTextContentElement::s_info, &WebCore::JSSVGTextContentElementConstructorTableValues, (JSC::JSObject *)v2);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6944) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGTextContentElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGTextContentElementPrototype::s_info != (char **)(16
                                                                     * *(unsigned int *)(16
                                                                                       * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                       + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGTextContentElement>,(WebCore::DOMConstructorID)868>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGTextContentElement_textLength(uint64_t a1, uint64_t a2)
{
  WebCore::SVGTextContentElement *v3;
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  float ComputedTextLength;
  uint64_t v8;
  uint64_t v10;

  v3 = *(WebCore::SVGTextContentElement **)(a2 + 24);
  v4 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  {
    v10 = 0;
    WebCore::SVGLengthValue::SVGLengthValue((uint64_t)&WebCore::SVGTextContentElement::textLengthAnimated(void)::defaultTextLength, 2, &v10);
  }
  v5 = (WTF *)*((_QWORD *)v3 + 27);
  v6 = *((_QWORD *)v5 + 5);
  if (*(float *)(v6 + 28) == *(float *)&WebCore::SVGTextContentElement::textLengthAnimated(void)::defaultTextLength
    && (unsigned __int16)*(_DWORD *)(v6 + 32) == (unsigned __int16)dword_1EE2F976C)
  {
    ComputedTextLength = WebCore::SVGTextContentElement::getComputedTextLength(v3);
    v5 = (WTF *)*((_QWORD *)v3 + 27);
    v8 = *((_QWORD *)v5 + 5);
    *(float *)(v8 + 28) = ComputedTextLength;
    *(_WORD *)(v8 + 32) = 513;
  }
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, v4, v5);
}

unint64_t WebCore::jsSVGTextContentElement_lengthAdjust(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 224));
}

WTF::StringImpl *WebCore::JSSVGTextElementPrototype::finishCreation(WebCore::JSSVGTextElementPrototype *this, JSC::VM *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<1u>(a2, (uint64_t)&WebCore::JSSVGTextElement::s_info, (uint64_t)&WebCore::JSSVGTextElementPrototypeTableValues, this);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5 = JSC::jsNontrivialString((uint64_t)a2, &v8);
  JSC::JSObject::putDirectWithoutTransition((int *)this, a2, v4, v5, 6);
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::JSSVGTextElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGTextPositioningElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGTextPositioningElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGTextPositioningElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::JSSVGTextElement::createPrototype(WebCore::JSSVGTextElement *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  JSC::JSCell *v5;
  unint64_t v6;
  JSC::Structure *v7;

  v5 = (JSC::JSCell *)WebCore::JSSVGTextPositioningElement::prototype(this, a2, a3);
  v6 = JSC::Structure::create((uint64_t *)this, (int)a2, v5);
  *(_DWORD *)(v6 + 16) |= 0x80000u;
  return WebCore::JSSVGTextElementPrototype::create(this, a2, v6, v7);
}

unint64_t WebCore::JSSVGTextElementPrototype::create(WebCore::JSSVGTextElementPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  unint64_t v6;
  int v7;

  v6 = JSC::allocateCell<WebCore::JSAbstractRangePrototype>((uint64_t)this);
  v7 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)v6 = a3 >> 4;
  *(_DWORD *)(v6 + 4) = v7;
  *(_QWORD *)(v6 + 8) = 0;
  WebCore::JSSVGTextElementPrototype::finishCreation((WebCore::JSSVGTextElementPrototype *)v6, this);
  return v6;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGTextElement>,(WebCore::DOMConstructorID)869>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  unint64_t v16;
  WebCore::JSDOMGlobalObject *v17;
  uint64_t v18;
  unint64_t v20;
  unint64_t v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  int v24;
  int v25;
  uint64_t v26;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6952);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGTextPositioningElement>,(WebCore::DOMConstructorID)871>(a1, a2);
  v7 = v6;
  LODWORD(v22) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v20 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v20);
    v5[2] = SlowCase + (int)v20;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v22, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGTextElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 >= v10[2847])
  {
    v2 = v10[2848];
    if ((v2 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v2 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_11;
    }
    v21 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v21);
    v10[2848] = v2 + (int)v21;
  }
  v10[2846] = v2 + 48;
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v22);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v22);
  v14 = v22;
  v22 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v22);
  v16 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(WebCore::getDOMStructure<WebCore::JSSVGTextElement>(a1, (JSC::VM *)a2, v17) + 48);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v16, v18, 14, (uint64_t)&v22);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6952) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGTextElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGTextElementPrototype::s_info != (char **)(16
                                                              * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGTextElement>,(WebCore::DOMConstructorID)869>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::JSSVGTextElement::subspaceForImpl(WebCore::JSSVGTextElement *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  void *v12;
  int v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 7032);
  if (v4)
    return v4;
  v7 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v7, a2);
LABEL_6:
  v9 = *(_QWORD *)(v7 + 2824);
  v20 = *(_QWORD *)(v9 + 7032);
  if (!v20)
  {
    v14 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v22, "IsoSpace T");
    v21 = 0;
    MEMORY[0x19AEA3204](v14, &v22, (char *)this + 192, (char *)this + 1872, 40, 8, &v21);
    v16 = v21;
    v21 = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    v17 = v22;
    v22 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 1)
        WTF::fastFree(v17, v15);
      else
        --*(_DWORD *)v17;
    }
    v20 = v14;
    v18 = *(_QWORD *)(v9 + 7032);
    *(_QWORD *)(v9 + 7032) = v14;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    v19 = *(unsigned int *)(v7 + 2844);
    if ((_DWORD)v19 == *(_DWORD *)(v7 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v7 + 2832, (unint64_t)&v20);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v7 + 2832) + 8 * v19) = v14;
      *(_DWORD *)(v7 + 2844) = v19 + 1;
    }
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v10 = *(_QWORD *)(v3 + 7032);
  *(_QWORD *)(v3 + 7032) = v4;
  if (v10)
  {
    v11 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v11, v12);
  }
  v13 = __ldxr((unsigned __int8 *)v7);
  if (v13 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
  return v4;
}

uint64_t WebCore::JSSVGTextPathElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGTextContentElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGTextContentElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGTextContentElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSVGTextPathElementPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGTextPathElementPrototype::create(WebCore::JSSVGTextPathElementPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<11u>(this, (uint64_t)&WebCore::JSSVGTextPathElement::s_info, (uint64_t)&WebCore::JSSVGTextPathElementPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGTextPathElement>,(WebCore::DOMConstructorID)870>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char **v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t Structure;
  JSC::Structure *v28;
  JSC::JSCell *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v33;
  unint64_t v34;
  WTF::StringImpl *v35;
  unint64_t v36;
  int v37;
  int v38;
  uint64_t v39;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6960);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGTextContentElement>,(WebCore::DOMConstructorID)868>(a1, a2);
  v7 = v6;
  LODWORD(v35) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v33 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v33);
    v5[2] = SlowCase + (int)v33;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v35, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGTextPathElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v34 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v34);
    v10[2848] = v2 + (int)v34;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v35 = 0;
  v36 = v2;
  v37 = -1;
  v38 = 0x1000000;
  v39 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v35);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v35);
  v14 = v35;
  v35 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v35 = 0;
  v36 = v2;
  v37 = -1;
  v38 = 0x1000000;
  v39 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v35);
  v16 = *(_QWORD *)(v5[227] + 2160);
  v17 = *(_QWORD *)(a2 + 3296);
  if (v17)
  {
    v18 = *(_DWORD *)(v17 - 8);
    v19 = ((unint64_t)&WebCore::JSSVGTextPathElement::s_info
         + ~((_QWORD)&WebCore::JSSVGTextPathElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGTextPathElement::s_info
                                                                      + ~((_QWORD)&WebCore::JSSVGTextPathElement::s_info << 32)) >> 22);
    v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
    v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
    v22 = v18 & ((v21 >> 31) ^ v21);
    v23 = *(char ***)(v17 + 16 * v22);
    if (v23 == &WebCore::JSSVGTextPathElement::s_info)
    {
LABEL_20:
      v25 = *(_QWORD *)(v17 + 16 * v22 + 8);
      if (v25)
        goto LABEL_22;
    }
    else
    {
      v24 = 1;
      while (v23)
      {
        v22 = ((_DWORD)v22 + v24) & v18;
        v23 = *(char ***)(v17 + 16 * v22);
        ++v24;
        if (v23 == &WebCore::JSSVGTextPathElement::s_info)
          goto LABEL_20;
      }
    }
  }
  v26 = WebCore::getDOMStructure<WebCore::JSSVGTextContentElement>((WebCore::JSSVGTextContentElement *)a1, (JSC::VM *)a2);
  Structure = WebCore::JSSVGTextPathElementPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(v26 + 48));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v29 = (JSC::JSCell *)WebCore::JSSVGTextPathElementPrototype::create((WebCore::JSSVGTextPathElementPrototype *)a1, (JSC::VM *)a2, Structure, v28);
  v30 = WebCore::JSSVGTextPathElement::createStructure((uint64_t *)a1, a2, v29);
  v25 = WebCore::cacheDOMStructure((JSCell *)a2, v30, (uint64_t)&WebCore::JSSVGTextPathElement::s_info);
LABEL_22:
  v31 = *(_QWORD *)(v25 + 48);
  v35 = 0;
  v36 = v2;
  v37 = -1;
  v38 = 0x1000000;
  v39 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v16, v31, 14, (uint64_t)&v35);
  JSC::reifyStaticProperties<6u>((JSC::VM *)a1, (uint64_t)&WebCore::JSSVGTextPathElement::s_info, &WebCore::JSSVGTextPathElementConstructorTableValues, (JSC::JSObject *)v2);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6960) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGTextPathElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGTextPathElementPrototype::s_info != (char **)(16
                                                                  * *(unsigned int *)(16
                                                                                    * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                    + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGTextPathElement>,(WebCore::DOMConstructorID)870>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGTextPathElement_startOffset(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 256));
}

unint64_t WebCore::jsSVGTextPathElement_method(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 264));
}

unint64_t WebCore::jsSVGTextPathElement_spacing(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedDecoratedProperty<WebCore::SVGDecoratedEnumeration,unsigned int>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 272));
}

unint64_t WebCore::jsSVGTextPathElement_href(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedString>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 248));
}

uint64_t WebCore::JSSVGTextPathElement::subspaceForImpl(WebCore::JSSVGTextPathElement *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 7040);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  v20 = *(_QWORD *)(v8 + 7040);
  if (!v20)
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v22, "IsoSpace T");
    v21 = 0;
    MEMORY[0x19AEA3204](v9, &v22, (char *)this + 192, (char *)this + 1872, 40, 8, &v21);
    v11 = v21;
    v21 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v22;
    v22 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v20 = v9;
    v13 = *(_QWORD *)(v8 + 7040);
    *(_QWORD *)(v8 + 7040) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = *(unsigned int *)(v6 + 2844);
    if ((_DWORD)v14 == *(_DWORD *)(v6 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v6 + 2832, (unint64_t)&v20);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = v9;
      *(_DWORD *)(v6 + 2844) = v14 + 1;
    }
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 7040);
  *(_QWORD *)(v3 + 7040) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

WTF::StringImpl *WebCore::JSSVGTextPositioningElementPrototype::finishCreation(WebCore::JSSVGTextPositioningElementPrototype *this, JSC::VM *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<6u>(a2, (uint64_t)&WebCore::JSSVGTextPositioningElement::s_info, &WebCore::JSSVGTextPositioningElementPrototypeTableValues, this);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5 = JSC::jsNontrivialString((uint64_t)a2, &v8);
  JSC::JSObject::putDirectWithoutTransition((int *)this, a2, v4, v5, 6);
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unint64_t WebCore::JSSVGTextPositioningElement::createPrototype(WebCore::JSSVGTextPositioningElement *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  int v3;
  uint64_t v5;
  unint64_t v6;
  WebCore::JSDOMGlobalObject *v7;
  JSC::Structure *v8;

  v3 = (int)a2;
  v5 = WebCore::getDOMStructure<WebCore::JSSVGTextContentElement>(this, a2);
  v6 = JSC::Structure::create((uint64_t *)this, v3, *(JSC::JSCell **)(v5 + 48));
  *(_DWORD *)(v6 + 16) |= 0x80000u;
  return WebCore::JSSVGTextPositioningElementPrototype::create(this, v6, v7, v8);
}

unint64_t WebCore::JSSVGTextPositioningElementPrototype::create(WebCore::JSSVGTextPositioningElementPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  unint64_t v6;
  int v7;

  v6 = JSC::allocateCell<WebCore::JSAbstractRangePrototype>((uint64_t)this);
  v7 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)v6 = a2 >> 4;
  *(_DWORD *)(v6 + 4) = v7;
  *(_QWORD *)(v6 + 8) = 0;
  WebCore::JSSVGTextPositioningElementPrototype::finishCreation((WebCore::JSSVGTextPositioningElementPrototype *)v6, this);
  return v6;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGTextPositioningElement>,(WebCore::DOMConstructorID)871>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  unint64_t Prototype;
  unint64_t v28;
  JSC::JSObject *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6968);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGTextContentElement>,(WebCore::DOMConstructorID)868>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v33 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v33);
    v5[2] = SlowCase + (int)v33;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGTextPositioningElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v34 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v34);
    v10[2848] = v2 + (int)v34;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (!v18)
    goto LABEL_21;
  v19 = *(_DWORD *)(v18 - 8);
  v20 = ((unint64_t)&WebCore::JSSVGTextPositioningElement::s_info
       + ~((_QWORD)&WebCore::JSSVGTextPositioningElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGTextPositioningElement::s_info
                                                                           + ~((_QWORD)&WebCore::JSSVGTextPositioningElement::s_info << 32)) >> 22);
  v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
  v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
  v23 = v19 & ((v22 >> 31) ^ v22);
  v24 = *(char ***)(v18 + 16 * v23);
  if (v24 != &WebCore::JSSVGTextPositioningElement::s_info)
  {
    v25 = 1;
    while (v24)
    {
      v23 = ((_DWORD)v23 + v25) & v19;
      v24 = *(char ***)(v18 + 16 * v23);
      ++v25;
      if (v24 == &WebCore::JSSVGTextPositioningElement::s_info)
        goto LABEL_20;
    }
LABEL_21:
    Prototype = WebCore::JSSVGTextPositioningElement::createPrototype((WebCore::JSSVGTextPositioningElement *)a1, (JSC::VM *)a2, v16);
    v28 = Prototype;
    LODWORD(v36) = 241;
    if ((Prototype & 0xFFFE000000000002) == 0)
    {
      v29 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)Prototype);
      if (v29)
        JSC::JSObject::didBecomePrototype(v29, (JSC::VM *)a1);
    }
    v30 = *v5;
    if (*v5 >= (unint64_t)v5[1])
    {
      v30 = v5[2];
      if ((v30 & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        v30 = JSC::LocalAllocator::allocateSlowCase();
        goto LABEL_26;
      }
      v35 = *(_QWORD *)(v30 + 8) ^ v5[3];
      v5[1] = v30 + HIDWORD(v35);
      v5[2] = v30 + (int)v35;
    }
    *v5 = v30 + 128;
LABEL_26:
    *(_DWORD *)v30 = 0;
    MEMORY[0x19AEA4278](v30, a1, a2, v28, &v36, &WebCore::JSSVGTextPositioningElement::s_info, 0, 0);
    if (*(_BYTE *)(a1 + 755))
      __dmb(0xAu);
    v26 = WebCore::cacheDOMStructure((JSCell *)a2, v30, (uint64_t)&WebCore::JSSVGTextPositioningElement::s_info);
    goto LABEL_29;
  }
LABEL_20:
  v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
  if (!v26)
    goto LABEL_21;
LABEL_29:
  v31 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v31, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6968) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGTextPositioningElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGTextPositioningElementPrototype::s_info != (char **)(16
                                                                         * *(unsigned int *)(16
                                                                                           * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                           + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGTextPositioningElement>,(WebCore::DOMConstructorID)871>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGTextPositioningElement_x(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedPropertyList<WebCore::SVGLengthList>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 240));
}

unint64_t WebCore::jsSVGTextPositioningElement_y(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedPropertyList<WebCore::SVGLengthList>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 248));
}

unint64_t WebCore::jsSVGTextPositioningElement_dx(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedPropertyList<WebCore::SVGLengthList>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 256));
}

unint64_t WebCore::jsSVGTextPositioningElement_dy(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedPropertyList<WebCore::SVGLengthList>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 264));
}

unint64_t WebCore::jsSVGTextPositioningElement_rotate(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedPropertyList<WebCore::SVGNumberList>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 272));
}

uint64_t WebCore::JSSVGTitleElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::JSSVGTitleElement::createPrototype(WebCore::JSSVGTitleElement *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  JSC::JSCell *v5;
  unint64_t Structure;
  JSC::Structure *v7;

  v5 = (JSC::JSCell *)WebCore::JSSVGElement::prototype(this, a2, a3);
  Structure = WebCore::JSSVGTitleElementPrototype::createStructure((uint64_t *)this, (uint64_t)a2, v5);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  return WebCore::JSSVGTitleElementPrototype::create(this, a2, Structure, v7);
}

uint64_t WebCore::JSSVGTitleElementPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGTitleElementPrototype::create(WebCore::JSSVGTitleElementPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  JSC::Structure *v15;
  int v16;
  unint64_t v18;
  WTF::StringImpl *v19[6];
  int v20;
  int v21;
  JSC::Structure *v22;
  int v23;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v18 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v18);
    *((_QWORD *)this + 4865) = SlowCase + (int)v18;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)SlowCase, this);
  WTF::AtomStringImpl::addLiteral();
  v9 = v19[0];
  JSC::reifyStaticProperty(this, (uint64_t)&WebCore::JSSVGTitleElement::s_info, (unint64_t *)v19, (uint64_t)&WebCore::JSSVGTitleElementPrototypeTableValues, (unsigned __int8 *)SlowCase);
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v10);
    else
      *(_DWORD *)v9 -= 2;
  }
  v11 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create((uint64_t)this, v19);
  v14 = v19[0];
  v19[0] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v23 = *(_DWORD *)SlowCase;
  v22 = v15;
  v16 = JSC::Structure::outOfLineCapacity(v15);
  v20 = 0;
  v21 = v16;
  v19[0] = (WTF::StringImpl *)&v21;
  v19[1] = (WTF::StringImpl *)SlowCase;
  v19[2] = this;
  v19[3] = (WTF::StringImpl *)&v23;
  v19[4] = (WTF::StringImpl *)&v22;
  v19[5] = (WTF::StringImpl *)&v20;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v15, this, v11, 6, (uint64_t)v19);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v20, v13);
  *((_DWORD *)v15 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGTitleElement>,(WebCore::DOMConstructorID)872>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6976);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGElement>,(WebCore::DOMConstructorID)783>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v34);
    v5[2] = SlowCase + (int)v34;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGTitleElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v35 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v35);
    v10[2848] = v2 + (int)v35;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSSVGTitleElement::s_info + ~((_QWORD)&WebCore::JSSVGTitleElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGTitleElement::s_info + ~((_QWORD)&WebCore::JSSVGTitleElement::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSSVGTitleElement::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSSVGTitleElement::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSSVGElement::prototype((WebCore::JSSVGElement *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSSVGTitleElementPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v30 = (JSC::JSCell *)WebCore::JSSVGTitleElementPrototype::create((WebCore::JSSVGTitleElementPrototype *)a1, (JSC::VM *)a2, Structure, v29);
  v31 = WebCore::JSSVGTitleElement::createStructure((uint64_t *)a1, a2, v30);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v31, (uint64_t)&WebCore::JSSVGTitleElement::s_info);
LABEL_22:
  v32 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v32, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6976) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGTitleElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGTitleElementPrototype::s_info != (char **)(16
                                                               * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                 + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGTitleElement>,(WebCore::DOMConstructorID)872>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::JSSVGTitleElement::subspaceForImpl(WebCore::JSSVGTitleElement *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  void *v12;
  int v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 7056);
  if (v4)
    return v4;
  v7 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v7, a2);
LABEL_6:
  v9 = *(_QWORD *)(v7 + 2824);
  v20 = *(_QWORD *)(v9 + 7056);
  if (!v20)
  {
    v14 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v22, "IsoSpace T");
    v21 = 0;
    MEMORY[0x19AEA3204](v14, &v22, (char *)this + 192, (char *)this + 1872, 40, 8, &v21);
    v16 = v21;
    v21 = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    v17 = v22;
    v22 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 1)
        WTF::fastFree(v17, v15);
      else
        --*(_DWORD *)v17;
    }
    v20 = v14;
    v18 = *(_QWORD *)(v9 + 7056);
    *(_QWORD *)(v9 + 7056) = v14;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    v19 = *(unsigned int *)(v7 + 2844);
    if ((_DWORD)v19 == *(_DWORD *)(v7 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v7 + 2832, (unint64_t)&v20);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v7 + 2832) + 8 * v19) = v14;
      *(_DWORD *)(v7 + 2844) = v19 + 1;
    }
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v10 = *(_QWORD *)(v3 + 7056);
  *(_QWORD *)(v3 + 7056) = v4;
  if (v10)
  {
    v11 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v11, v12);
  }
  v13 = __ldxr((unsigned __int8 *)v7);
  if (v13 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
  return v4;
}

WTF::StringImpl *WebCore::JSSVGTransformPrototype::finishCreation(WebCore::JSSVGTransformPrototype *this, JSC::VM *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<17u>(a2, (uint64_t)&WebCore::JSSVGTransform::s_info, (uint64_t)&WebCore::JSSVGTransformPrototypeTableValues, this);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5 = JSC::jsNontrivialString((uint64_t)a2, &v8);
  JSC::JSObject::putDirectWithoutTransition((int *)this, a2, v4, v5, 6);
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_DWORD *WebCore::JSSVGTransform::destroy(WebCore::JSSVGTransform *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSSVGTransform::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::JSSVGTransform::createPrototype(WebCore::JSSVGTransform *this, JSC::JSCell **a2, WebCore::JSDOMGlobalObject *a3)
{
  unint64_t v4;
  WebCore::JSDOMGlobalObject *v5;
  JSC::Structure *v6;

  v4 = JSC::Structure::create((uint64_t *)this, (int)a2, a2[82]);
  *(_DWORD *)(v4 + 16) |= 0x80000u;
  return WebCore::JSSVGTransformPrototype::create(this, v4, v5, v6);
}

unint64_t WebCore::JSSVGTransformPrototype::create(WebCore::JSSVGTransformPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  unint64_t v6;
  int v7;

  v6 = JSC::allocateCell<WebCore::JSAbstractRangePrototype>((uint64_t)this);
  v7 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)v6 = a2 >> 4;
  *(_DWORD *)(v6 + 4) = v7;
  *(_QWORD *)(v6 + 8) = 0;
  WebCore::JSSVGTransformPrototype::finishCreation((WebCore::JSSVGTransformPrototype *)v6, this);
  return v6;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGTransform>,(WebCore::DOMConstructorID)873>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  uint64_t v17;
  unint64_t v19;
  unint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  int v23;
  int v24;
  uint64_t v25;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6984);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v21) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v19 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v19);
    v5[2] = SlowCase + (int)v19;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v21, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGTransform>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 >= v9[2847])
  {
    v2 = v9[2848];
    if ((v2 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v2 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_11;
    }
    v20 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v20);
    v9[2848] = v2 + (int)v20;
  }
  v9[2846] = v2 + 48;
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v21 = 0;
  v22 = v2;
  v23 = -1;
  v24 = 0x1000000;
  v25 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v21);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v21);
  v13 = v21;
  v21 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v21 = 0;
  v22 = v2;
  v23 = -1;
  v24 = 0x1000000;
  v25 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v21);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v17 = *(_QWORD *)(WebCore::getDOMStructure<WebCore::JSSVGTransform>((WebCore::JSSVGTransform *)a1, (JSC::VM *)a2, v16)
                  + 48);
  v21 = 0;
  v22 = v2;
  v23 = -1;
  v24 = 0x1000000;
  v25 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v17, 14, (uint64_t)&v21);
  JSC::reifyStaticProperties<7u>((JSC::VM *)a1, (uint64_t)&WebCore::JSSVGTransform::s_info, &WebCore::JSSVGTransformConstructorTableValues, (JSC::JSObject *)v2);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6984) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGTransformConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGTransformPrototype::s_info != (char **)(16
                                                            * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                              + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGTransform>,(WebCore::DOMConstructorID)873>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGTransform_type(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int16 *)(*(_QWORD *)(a2 + 24) + 32) | 0xFFFE000000000000;
}

unint64_t WebCore::jsSVGTransform_matrix(uint64_t a1, uint64_t a2, WebCore::JSDOMGlobalObject *a3)
{
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  WTF *v16;

  v3 = *(WTF **)(*(_QWORD *)(a2 + 24) + 40);
  v4 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v5 = *(_QWORD *)(*(_QWORD *)(v4 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 == v3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          v14 = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return v14;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF **)(v5 + 16 * v10);
        ++v12;
        if (v11 == v3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)v3 + 2);
  v16 = v3;
  v14 = WebCore::toJSNewlyCreated((WebCore::JSSVGMatrix **)v4, &v16, a3);
  if (v16)
  {
    if (*((_DWORD *)v16 + 2) == 1)
      (*(void (**)(void))(*(_QWORD *)v16 + 8))();
    else
      --*((_DWORD *)v16 + 2);
  }
  return v14;
}

unint64_t WebCore::jsSVGTransform_angle(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(a2 + 24) + 48);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, (double)(int)v4 == v3)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

uint64_t WebCore::JSSVGTransformOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

_QWORD *WebCore::JSSVGTransformOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  int v23;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v23 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v23) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v23;
        if (v12 == v3)
          goto LABEL_3;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_3:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v13 = (_QWORD *)(v5 + 16 * v11);
      *v13 = -1;
      v16 = v13[1];
      v15 = v13 + 1;
      v14 = v16;
      if (v16)
      {
        *(_QWORD *)(v14 + 8) = 3;
        *v15 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v17 = *v4;
      if (*v4)
        v18 = *(_DWORD *)(v17 - 12) - 1;
      else
        v18 = -1;
      *(_DWORD *)(v17 - 12) = v18;
      v19 = *v4;
      if (*v4)
      {
        v20 = 6 * *(_DWORD *)(v19 - 12);
        v21 = *(_DWORD *)(v19 - 4);
        if (v20 < v21 && v21 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v21 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::toJSNewlyCreated(WebCore::JSSVGTransform **a1, WTF **a2, WebCore::JSDOMGlobalObject *a3)
{
  WTF *v3;
  unint64_t v6;
  WebCore::JSSVGTransform *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t SlowCase;
  WTF *v12;
  WebCore::JSSVGTransform *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *Allocator;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;
  void *v23;
  int v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  WTF *v32;

  v3 = *a2;
  if (*(void (***)(WebCore::SVGTransform *__hidden))*a2 != off_1E32EE228)
  {
    __break(0xC471u);
    JUMPOUT(0x194F40A48);
  }
  v6 = WebCore::getDOMStructure<WebCore::JSSVGTransform>(a1[7], (JSC::VM *)a1, a3);
  v7 = a1[7];
  v8 = *((_QWORD *)v7 + 5182);
  v9 = *(_QWORD *)(v8 + 23536);
  v10 = *(_QWORD **)(v9 + 7064);
  if (!v10)
  {
    v18 = *(_QWORD *)(v8 + 22648);
    if (__ldaxr((unsigned __int8 *)v18))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v18))
    {
LABEL_22:
      v20 = *(_QWORD *)(v18 + 2824);
      if (!*(_QWORD *)(v20 + 7064))
      {
        v25 = WTF::fastMalloc((WTF *)0xF8);
        WTF::CString::CString((WTF::CString *)&v32, "IsoSpace T");
        v31 = 0;
        MEMORY[0x19AEA3204](v25, &v32, (char *)v7 + 192, (char *)v7 + 1872, 32, 8, &v31);
        v27 = (uint64_t)v31;
        v31 = 0;
        if (v27)
          (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
        v28 = v32;
        v32 = 0;
        if (v28)
        {
          if (*(_DWORD *)v28 == 1)
            WTF::fastFree(v28, v26);
          else
            --*(_DWORD *)v28;
        }
        v29 = *(_QWORD *)(v20 + 7064);
        *(_QWORD *)(v20 + 7064) = v25;
        if (v29)
          (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
      }
      v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
      JSC::GCClient::IsoSubspace::IsoSubspace();
      v21 = *(_QWORD *)(v9 + 7064);
      *(_QWORD *)(v9 + 7064) = v10;
      if (v21)
      {
        v22 = (WTF *)MEMORY[0x19AEA3528]();
        WTF::fastFree(v22, v23);
      }
      v24 = __ldxr((unsigned __int8 *)v18);
      if (v24 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v18))
          goto LABEL_3;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v18);
      goto LABEL_3;
    }
    MEMORY[0x19AEA534C](v18);
    goto LABEL_22;
  }
LABEL_3:
  SlowCase = v10[3];
  if (SlowCase < v10[4])
  {
LABEL_4:
    v10[3] = SlowCase + 32;
    goto LABEL_5;
  }
  SlowCase = v10[5];
  if ((SlowCase & 1) == 0)
  {
    v30 = *(_QWORD *)(SlowCase + 8) ^ v10[6];
    v10[4] = SlowCase + HIDWORD(v30);
    v10[5] = SlowCase + (int)v30;
    goto LABEL_4;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_5:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v6);
  v12 = *a2;
  *a2 = 0;
  *(_QWORD *)(SlowCase + 24) = v12;
  if (*((_BYTE *)v7 + 755))
    __dmb(0xAu);
  v13 = a1[415];
  if ((byte_1ECE816C8 & 1) == 0)
  {
    qword_1ECE816C0 = (uint64_t)&off_1E32F7770;
    byte_1ECE816C8 = 1;
  }
  v32 = v3;
  if ((SlowCase & 8) != 0)
    v14 = (SlowCase - 112) | 1;
  else
    v14 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v14 & 1) != 0)
    v15 = v14 + 47;
  else
    v15 = *(_QWORD *)v14 + 32;
  Allocator = *(_QWORD **)(v15 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v15 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1ECE816C0;
  Allocator[2] = v13;
  v31 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)v13 + 4, (uint64_t *)&v32, (uint64_t *)&v31);
  if (v31)
    v31[1] = 3;
  return SlowCase;
}

unint64_t WebCore::wrap<WebCore::SVGTransform>(uint64_t a1, WTF *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  WTF *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  WTF *v14;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 3320) + 32);
  if (v3)
  {
    v4 = *(_DWORD *)(v3 - 8);
    v5 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    v8 = v4 & ((v7 >> 31) ^ v7);
    v9 = *(WTF **)(v3 + 16 * v8);
    if (v9 == a2)
    {
LABEL_6:
      v11 = *(_QWORD *)(v3 + 16 * v8 + 8);
      if (v11)
      {
        if ((*(_BYTE *)(v11 + 8) & 3) == 0)
        {
          v12 = *(_QWORD *)v11;
          if (*(_QWORD *)v11)
            return v12;
        }
      }
    }
    else
    {
      v10 = 1;
      while (v9)
      {
        v8 = ((_DWORD)v8 + v10) & v4;
        v9 = *(WTF **)(v3 + 16 * v8);
        ++v10;
        if (v9 == a2)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a2 + 2);
  v14 = a2;
  v12 = WebCore::toJSNewlyCreated((WebCore::JSSVGTransform **)a1, &v14, a3);
  if (v14)
  {
    if (*((_DWORD *)v14 + 2) == 1)
      (*(void (**)(void))(*(_QWORD *)v14 + 8))();
    else
      --*((_DWORD *)v14 + 2);
  }
  return v12;
}

BOOL WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGTransformList>::initializeProperties(uint64_t a1, uint64_t a2, JSC::VM *a3)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  unint64_t v10;
  WebCore::JSDOMGlobalObject *v11;
  uint64_t v12;
  WTF::StringImpl *v14;

  v6 = a2 + 41952;
  JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, *(_QWORD *)(*(_QWORD *)(a2 + 41952) + 1768), 0xFFFE000000000000, 6);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8 = JSC::jsNontrivialString(a2, &v14);
  v9 = v14;
  v14 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  *(_QWORD *)(a1 + 32) = v8;
  if (a1 && v8 && *(_DWORD *)(a2 + 760) >= *(unsigned __int8 *)(a1 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a2 + 192), (const JSCell *)a1);
  JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, *(_QWORD *)(*(_QWORD *)v6 + 1968), v8, 6);
  v10 = *(_QWORD *)(*(_QWORD *)v6 + 2160);
  v12 = WebCore::getDOMStructure<WebCore::JSSVGTransformList>((WebCore::JSSVGTransformList *)a2, a3, v11);
  return JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, v10, *(_QWORD *)(v12 + 48), 14);
}

WTF::StringImpl *WebCore::JSSVGTransformListPrototype::finishCreation(WebCore::JSSVGTransformListPrototype *this, JSC::VM *a2)
{
  unint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t Direct;
  WTF::StringImpl *v8;
  unint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<12u>(a2, (uint64_t)&WebCore::JSSVGTransformList::s_info, (uint64_t)&WebCore::JSSVGTransformListPrototypeTableValues, this);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2712);
  v5 = *(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28) + 672);
  v6 = (_DWORD *)MEMORY[0x1E0CBEBF0];
  *MEMORY[0x1E0CBEBF0] += 2;
  Direct = JSC::JSObject::getDirect(v5, a2, (unint64_t)v6);
  JSC::JSObject::putDirect((unsigned __int8 *)this, a2, v4, Direct, 4);
  if (*v6 == 2)
    WTF::StringImpl::destroy(MEMORY[0x1E0CBEBF0], v8);
  else
    *v6 -= 2;
  v9 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v10 = JSC::jsNontrivialString((uint64_t)a2, &v13);
  JSC::JSObject::putDirectWithoutTransition((int *)this, a2, v9, v10, 6);
  result = v13;
  v13 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_DWORD *WebCore::JSSVGTransformList::destroy(WebCore::JSSVGTransformList *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSSVGTransformList::put(uint64_t a1, JSC *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v6;
  JSC::VM *v7;
  _BYTE *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  _BOOL4 v16;
  char **v17;
  BOOL v18;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  unsigned __int16 *v28;
  uint64_t v29;
  unsigned int v30;
  BOOL v31;
  JSValue v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 *v39;
  unsigned int v40;
  _DWORD *v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  int v45;

  if (*(_QWORD *)(a5 + 8) != a1)
    return JSC::JSObject::put();
  if (!a3)
    return JSC::JSObject::put();
  v6 = *(_DWORD *)(a3 + 16);
  if ((v6 & 0x20) != 0)
    return JSC::JSObject::put();
  v7 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v8 = *(_BYTE **)(a3 + 8);
  v9 = *(unsigned int *)(a3 + 4);
  if ((v6 & 4) != 0)
  {
    if ((_DWORD)v9)
    {
      v35 = *v8 - 48;
      if (v35 <= 9 && (v9 < 2 || *v8 != 48))
      {
        v38 = v9 - 1;
        v39 = v8 + 1;
        while (v38)
        {
          if (v35 > 0x19999999)
            goto LABEL_55;
          v40 = *v39 - 48;
          if (v40 > 9)
            goto LABEL_55;
          v36 = 0;
          LODWORD(v9) = 0;
          v37 = 0;
          v31 = __CFADD__(v40, 10 * v35);
          v35 = v40 + 10 * v35;
          --v38;
          ++v39;
          if (v31)
            goto LABEL_57;
        }
        if (v35 == -1)
          v36 = 0;
        else
          v36 = v35 & 0xFFFFFF00;
        if (v35 == -1)
          LODWORD(v9) = 0;
        else
          LODWORD(v9) = v35;
        if (v35 == -1)
          v37 = 0;
        else
          v37 = 0x100000000;
LABEL_57:
        v14 = v9 | v36;
        if ((v37 & 0x100000000) != 0)
          goto LABEL_11;
        return JSC::JSObject::put();
      }
LABEL_55:
      v36 = 0;
      LODWORD(v9) = 0;
    }
    else
    {
      v36 = 0;
    }
    v37 = 0;
    goto LABEL_57;
  }
  if ((_DWORD)v9 && (v10 = *(unsigned __int16 *)v8 - 48, v10 <= 9) && (v9 < 2 || *(_WORD *)v8 != 48))
  {
    v28 = (unsigned __int16 *)(v8 + 2);
    v29 = v9 - 1;
    while (v29)
    {
      if (v10 <= 0x19999999)
      {
        v30 = *v28 - 48;
        if (v30 <= 9)
        {
          v31 = __CFADD__(v30, 10 * v10);
          v10 = v30 + 10 * v10;
          ++v28;
          --v29;
          if (!v31)
            continue;
        }
      }
      goto LABEL_9;
    }
    v18 = v10 == -1;
    v13 = v10 & 0xFFFFFF00;
    v12 = v10;
    v11 = 0x100000000;
    if (v18)
    {
      v11 = 0;
      v12 = 0;
      v13 = 0;
    }
  }
  else
  {
LABEL_9:
    v11 = 0;
    v12 = 0;
    v13 = 0;
  }
  v14 = v13 | v12;
  if ((v11 & 0x100000000) != 0)
  {
LABEL_11:
    v43 = *((_QWORD *)a2 + 7);
    if ((a4 & 0xFFFE000000000002) != 0)
      goto LABEL_50;
    v15 = *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C);
    v16 = *(_DWORD *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C) != 0;
    v17 = (char **)(16 * v15);
    if ((_DWORD)v15)
      v18 = v17 == &WebCore::JSSVGTransform::s_info;
    else
      v18 = 1;
    if (!v18)
    {
      do
      {
        v17 = (char **)v17[2];
        v16 = v17 != 0;
      }
      while (v17 != &WebCore::JSSVGTransform::s_info && v17 != 0);
    }
    if (!v16 || (v20 = *(_DWORD **)(a4 + 24)) == 0)
    {
LABEL_50:
      JSC::throwTypeError();
      return 1;
    }
    v21 = *(_QWORD *)(a1 + 24);
    ++v20[2];
    v41 = v20;
    if (*(_BYTE *)(v21 + 24) == 1)
    {
      v23 = 4;
      LOBYTE(v43) = 4;
      v26 = 1;
      v45 = 1;
      v44 = 0;
    }
    else
    {
      LOBYTE(v43) = 1;
      v45 = 0;
      if (*(_DWORD *)(v21 + 44) > v14)
      {
        (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v21 + 64))(&v42, v21);
        v22 = *(_QWORD *)(v21 + 16);
        if (v22)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 32))(v22, v21);
        v23 = 0;
        v24 = 0;
        v43 = v42;
        v45 = 0;
        v25 = 1;
        goto LABEL_30;
      }
      v23 = 0;
      v26 = 0;
    }
    off_1E32F83C8[v26](&v42, (char *)&v43);
    v25 = 0;
    LOBYTE(v43) = v23;
    v24 = 1;
    v45 = 1;
    v44 = 0;
LABEL_30:
    ((void (*)(uint64_t *, uint64_t *))off_1E32FCD20[v24])(&v42, &v43);
    if (v41[2] != 1)
    {
      --v41[2];
      if ((v25 & 1) != 0)
        return 1;
LABEL_46:
      LOBYTE(v43) = v23;
      v44 = 0;
      if (!*((_QWORD *)v7 + 2))
      {
        v32.super.isa = (Class)WebCore::createDOMException(a2, (JSC::JSGlobalObject *)v23, (JSC::JSGlobalObject *)&v44);
        JSC::VM::throwException(v7, a2, v32);
        v34 = v44;
        v44 = 0;
        if (v34)
        {
          if (*(_DWORD *)v34 == 2)
            WTF::StringImpl::destroy(v34, v33);
          else
            *(_DWORD *)v34 -= 2;
        }
      }
      return 1;
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)v41 + 8))(v41);
    if ((v25 & 1) == 0)
      goto LABEL_46;
    return 1;
  }
  return JSC::JSObject::put();
}

uint64_t WebCore::JSSVGTransformList::putByIndex(uint64_t a1, WTF::StringImpl **a2, uint64_t a3, uint64_t a4)
{
  JSC::VM *v5;
  uint64_t v6;
  _BOOL4 v7;
  char **v8;
  BOOL v9;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  JSValue v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  _DWORD *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  int v30;

  v5 = a2[7];
  if ((_DWORD)a3 != -1)
  {
    v28 = a2[7];
    if ((a4 & 0xFFFE000000000002) != 0)
      goto LABEL_32;
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSSVGTransform::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSSVGTransform::s_info && v8 != 0);
    }
    if (!v7 || (v11 = *(_DWORD **)(a4 + 24)) == 0)
    {
LABEL_32:
      JSC::throwTypeError();
      return 1;
    }
    v12 = *(_QWORD *)(a1 + 24);
    ++v11[2];
    v26 = v11;
    if (*(_BYTE *)(v12 + 24) == 1)
    {
      v14 = 4;
      LOBYTE(v28) = 4;
      v17 = 1;
      v30 = 1;
      v29 = 0;
    }
    else
    {
      LOBYTE(v28) = 1;
      v30 = 0;
      if (*(_DWORD *)(v12 + 44) > a3)
      {
        (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, uint64_t, _DWORD **))(*(_QWORD *)v12 + 64))(&v27, v12, a3, &v26);
        v13 = *(_QWORD *)(v12 + 16);
        if (v13)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, v12);
        v14 = 0;
        v15 = 0;
        v28 = v27;
        v30 = 0;
        v16 = 1;
LABEL_21:
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32FCD20[v15])(&v27, &v28);
        v18 = v26;
        v26 = 0;
        if (v18)
        {
          if (v18[2] == 1)
          {
            (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 8))(v18);
            if ((v16 & 1) != 0)
              return 1;
            goto LABEL_28;
          }
          --v18[2];
        }
        if ((v16 & 1) != 0)
          return 1;
LABEL_28:
        LOBYTE(v28) = v14;
        v29 = 0;
        if (!*((_QWORD *)v5 + 2))
        {
          v21.super.isa = (Class)WebCore::createDOMException((JSC *)a2, (JSC::JSGlobalObject *)v14, (JSC::JSGlobalObject *)&v29);
          JSC::VM::throwException(v5, (JSC::JSGlobalObject *)a2, v21);
          v23 = v29;
          v29 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
              WTF::StringImpl::destroy(v23, v22);
            else
              *(_DWORD *)v23 -= 2;
          }
        }
        return 1;
      }
      v14 = 0;
      v17 = 0;
    }
    ((uint64_t (**)(WTF::StringImpl **, char *))off_1E32F83C8)[v17](&v27, (char *)&v28);
    v16 = 0;
    LOBYTE(v28) = v14;
    v15 = 1;
    v30 = 1;
    v29 = 0;
    goto LABEL_21;
  }
  JSC::Identifier::from();
  v19 = JSC::ordinarySetSlow();
  v25 = v28;
  v28 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v24);
    else
      *(_DWORD *)v25 -= 2;
  }
  return v19;
}

uint64_t WebCore::JSSVGTransformList::deleteProperty(uint64_t a1, WebCore::JSDOMGlobalObject *a2, uint64_t a3)
{
  uint64_t v4;
  _BOOL4 v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  WebCore::JSDOMGlobalObject *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _WORD *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned __int16 *v25;
  uint64_t v26;
  unsigned int v27;
  BOOL v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  unsigned int v34;

  v4 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSDOMGlobalObject::s_info && v6 != 0);
  }
  v9 = *(_QWORD *)(a1 + 24);
  if (v5)
    v10 = a2;
  else
    v10 = 0;
  v11 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v10);
  if (v11)
  {
    v12 = v11;
    if (!*(_BYTE *)(v11 + 274))
    {
      v13 = *(_BYTE **)(v11 + 496);
      if (!v13)
        v13 = (_BYTE *)WebCore::Document::ensureQuirks((WebCore::Document *)(v12 - 192));
      if (*(_QWORD *)v13)
      {
        v14 = *(_QWORD *)(*(_QWORD *)v13 + 8);
        if (v14)
        {
          v15 = *(_QWORD *)(v14 + 680);
          if (*(_BYTE *)(v15 + 243))
          {
            if (!*(_BYTE *)(v15 + 242))
              goto LABEL_22;
          }
          else if ((*(_QWORD *)(v15 + 688) & 0x80000) == 0)
          {
            goto LABEL_22;
          }
          if (v13[65])
            return JSC::JSObject::deleteProperty();
        }
      }
    }
  }
LABEL_22:
  if (!a3)
    return JSC::JSObject::deleteProperty();
  v16 = *(_DWORD *)(a3 + 16);
  if ((v16 & 0x20) != 0)
    return JSC::JSObject::deleteProperty();
  v17 = *(_WORD **)(a3 + 8);
  v18 = *(unsigned int *)(a3 + 4);
  if ((v16 & 4) == 0)
  {
    if ((_DWORD)v18 && (v19 = (unsigned __int16)*v17 - 48, v19 <= 9) && (v18 < 2 || *v17 != 48))
    {
      v25 = v17 + 1;
      v26 = v18 - 1;
      while (v26)
      {
        if (v19 <= 0x19999999)
        {
          v27 = *v25 - 48;
          if (v27 <= 9)
          {
            v28 = __CFADD__(v27, 10 * v19);
            v19 = v27 + 10 * v19;
            ++v25;
            --v26;
            if (!v28)
              continue;
          }
        }
        goto LABEL_29;
      }
      v7 = v19 == -1;
      v22 = v19 & 0xFFFFFF00;
      v21 = v19;
      v20 = 0x100000000;
      if (v7)
      {
        v20 = 0;
        v21 = 0;
        v22 = 0;
      }
    }
    else
    {
LABEL_29:
      v20 = 0;
      v21 = 0;
      v22 = 0;
    }
    v23 = v22 | v21;
    if ((v20 & 0x100000000) != 0)
      return *(_DWORD *)(v9 + 44) <= v23;
    return JSC::JSObject::deleteProperty();
  }
  if (!(_DWORD)v18)
  {
    v30 = 0;
    goto LABEL_47;
  }
  v29 = *(unsigned __int8 *)v17 - 48;
  if (v29 > 9 || v18 >= 2 && *(_BYTE *)v17 == 48)
  {
LABEL_46:
    v30 = 0;
    LODWORD(v18) = 0;
LABEL_47:
    v31 = 0;
    goto LABEL_48;
  }
  v32 = v18 - 1;
  v33 = (unsigned __int8 *)v17 + 1;
  while (v32)
  {
    if (v29 > 0x19999999)
      goto LABEL_46;
    v34 = *v33 - 48;
    if (v34 > 9)
      goto LABEL_46;
    v30 = 0;
    LODWORD(v18) = 0;
    v31 = 0;
    v28 = __CFADD__(v34, 10 * v29);
    v29 = v34 + 10 * v29;
    --v32;
    ++v33;
    if (v28)
      goto LABEL_48;
  }
  if (v29 == -1)
    v30 = 0;
  else
    v30 = v29 & 0xFFFFFF00;
  if (v29 == -1)
    LODWORD(v18) = 0;
  else
    LODWORD(v18) = v29;
  if (v29 == -1)
    v31 = 0;
  else
    v31 = 0x100000000;
LABEL_48:
  v23 = v18 | v30;
  if ((v31 & 0x100000000) != 0)
    return *(_DWORD *)(v9 + 44) <= v23;
  return JSC::JSObject::deleteProperty();
}

uint64_t WebCore::JSSVGTransformList::deletePropertyByIndex(WebCore::JSSVGTransformList *this, JSC::JSCell *a2, JSC::JSGlobalObject *a3)
{
  uint64_t v6;
  _BOOL4 v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  WebCore::JSDOMGlobalObject *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;

  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSDOMGlobalObject::s_info && v8 != 0);
  }
  v11 = *((_QWORD *)this + 3);
  if (v7)
    v12 = a2;
  else
    v12 = 0;
  v13 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v12);
  if (!v13)
    return *(_DWORD *)(v11 + 44) <= a3;
  v14 = v13;
  if (*(_BYTE *)(v13 + 274))
    return *(_DWORD *)(v11 + 44) <= a3;
  v15 = *(_BYTE **)(v13 + 496);
  if (!v15)
    v15 = (_BYTE *)WebCore::Document::ensureQuirks((WebCore::Document *)(v14 - 192));
  if (!*(_QWORD *)v15)
    return *(_DWORD *)(v11 + 44) <= a3;
  v16 = *(_QWORD *)(*(_QWORD *)v15 + 8);
  if (!v16)
    return *(_DWORD *)(v11 + 44) <= a3;
  v17 = *(_QWORD *)(v16 + 680);
  if (*(_BYTE *)(v17 + 243))
  {
    if (!*(_BYTE *)(v17 + 242))
      return *(_DWORD *)(v11 + 44) <= a3;
  }
  else if ((*(_QWORD *)(v17 + 688) & 0x80000) == 0)
  {
    return *(_DWORD *)(v11 + 44) <= a3;
  }
  if (!v15[65])
    return *(_DWORD *)(v11 + 44) <= a3;
  return JSC::JSObject::deletePropertyByIndex(this, a2, a3);
}

uint64_t WebCore::JSSVGTransformList::getOwnPropertySlotByIndex(WebCore::JSSVGTransformList *this, JSC::JSObject *a2, JSC::JSGlobalObject *a3, uint64_t a4, JSC::PropertySlot *a5)
{
  _DWORD *v7;
  JSC::VM *v8;
  uint64_t v9;
  WTF *v10;
  WebCore::JSDOMGlobalObject *v11;
  unint64_t v12;
  uint64_t result;
  WTF *v14;

  if ((_DWORD)a3 == -1)
    return JSC::JSObject::getOwnPropertySlotByIndex();
  v7 = (_DWORD *)*((_QWORD *)this + 3);
  if (v7[11] <= a3)
    return JSC::JSObject::getOwnPropertySlotByIndex();
  v8 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v9 = *(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28);
  (*(void (**)(WTF **__return_ptr, _DWORD *, JSC::JSGlobalObject *))(*(_QWORD *)v7 + 48))(&v14, v7, a3);
  v10 = v14;
  v12 = WebCore::wrap<WebCore::SVGTransform>(v9, v14, v11);
  if (*((_DWORD *)v10 + 2) == 1)
    (*(void (**)(WTF *))(*(_QWORD *)v10 + 8))(v10);
  else
    --*((_DWORD *)v10 + 2);
  if (*((_DWORD *)v8 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v8) & 1) != 0)
    return 0;
  *(_QWORD *)a4 = v12;
  *(_DWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 32) = this;
  result = 1;
  *(_BYTE *)(a4 + 49) = 1;
  return result;
}

uint64_t WebCore::JSSVGTransformList::getOwnPropertyNames(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v4;
  int v5;
  uint64_t *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  int v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44[2];
  char v45;
  WTF::StringImpl *v46;

  v4 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 44);
  if (v4)
  {
    v5 = 0;
    v6 = a3 + 1;
    while (1)
    {
      JSC::Identifier::from();
      v8 = v43;
      v46 = v43;
      v9 = *((_DWORD *)v43 + 4);
      if ((v9 & 0x20) != 0)
      {
        if ((a3[3] & 1) == 0 || *((_BYTE *)a3 + 25) && (*((_BYTE *)v43 + 36) & 4) != 0)
          goto LABEL_60;
      }
      else if ((a3[3] & 2) == 0)
      {
        goto LABEL_60;
      }
      v10 = *a3;
      v11 = *(unsigned int *)(*a3 + 20);
      if (v11 <= 0x13)
      {
        if ((_DWORD)v11)
        {
          v12 = *(WTF::StringImpl ***)(v10 + 8);
          while (*v12 != v43)
          {
            ++v12;
            if (!--v11)
              goto LABEL_19;
          }
          goto LABEL_60;
        }
LABEL_19:
        if ((v9 & 0x20) != 0)
        {
          v33 = *(_DWORD *)v8 + 2;
        }
        else
        {
          if ((v9 & 0x10) != 0)
          {
            *(_DWORD *)v8 += 2;
          }
          else
          {
            WTF::AtomStringImpl::addSlowCase();
            v8 = v44[0];
          }
          v33 = *(_DWORD *)v8;
          *(_DWORD *)v8 += 2;
          if (!v33)
          {
            WTF::StringImpl::destroy(v8, v7);
LABEL_54:
            v34 = (uint64_t *)(v10 + 8);
            v44[0] = v8;
            v35 = *(unsigned int *)(v10 + 20);
            if ((_DWORD)v35 == *(_DWORD *)(v10 + 16))
            {
              v36 = (uint64_t *)WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v34, v35 + 1, (unint64_t)v44);
              v35 = *(unsigned int *)(v10 + 20);
              v37 = *(_QWORD *)(v10 + 8);
              v38 = *v36;
              *v36 = 0;
              *(_QWORD *)(v37 + 8 * v35) = v38;
            }
            else
            {
              v39 = *v34;
              v44[0] = 0;
              *(_QWORD *)(v39 + 8 * v35) = v8;
            }
            *(_DWORD *)(v10 + 20) = v35 + 1;
            v40 = v44[0];
            v44[0] = 0;
            if (v40)
            {
              if (*(_DWORD *)v40 == 2)
                WTF::StringImpl::destroy(v40, v7);
              else
                *(_DWORD *)v40 -= 2;
            }
            goto LABEL_60;
          }
        }
        *(_DWORD *)v8 = v33;
        goto LABEL_54;
      }
      if (!*v6 || !*(_DWORD *)(*v6 - 12))
        break;
LABEL_17:
      WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add(a3 + 1, (uint64_t *)&v46, (uint64_t)v44);
      if (v45)
      {
        v8 = v46;
        v10 = *a3;
        v9 = *((_DWORD *)v46 + 4);
        goto LABEL_19;
      }
LABEL_60:
      v41 = v43;
      v43 = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2)
          WTF::StringImpl::destroy(v41, v7);
        else
          *(_DWORD *)v41 -= 2;
      }
      if (++v5 == v4)
        return JSC::JSObject::getOwnPropertyNames();
    }
    v13 = *(uint64_t **)(v10 + 8);
    v14 = &v13[v11];
    while (1)
    {
      v15 = *v13;
      v16 = *v6;
      if (*v6
        || (WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(a3 + 1, 8u, 0), (v16 = *v6) != 0))
      {
        v17 = *(_DWORD *)(v16 - 8);
      }
      else
      {
        v17 = 0;
      }
      v18 = (~(v15 << 32) + v15) ^ ((unint64_t)(~(v15 << 32) + v15) >> 22);
      v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
      v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
      v21 = v17 & ((v20 >> 31) ^ v20);
      v22 = (uint64_t *)(v16 + 8 * v21);
      v23 = *v22;
      if (*v22)
      {
        v24 = 0;
        v25 = 1;
        while (v23 != v15)
        {
          if (v23 == -1)
            v24 = v22;
          v21 = (v21 + v25) & v17;
          v22 = (uint64_t *)(v16 + 8 * v21);
          v23 = *v22;
          ++v25;
          if (!*v22)
          {
            if (v24)
            {
              *v24 = 0;
              --*(_DWORD *)(*v6 - 16);
              v22 = v24;
            }
            goto LABEL_34;
          }
        }
        goto LABEL_47;
      }
LABEL_34:
      *v22 = v15;
      v26 = *v6;
      v27 = *v6 ? *(_DWORD *)(v26 - 12) + 1 : 1;
      *(_DWORD *)(v26 - 12) = v27;
      v28 = *v6;
      v29 = *v6 ? *(_DWORD *)(v28 - 12) : 0;
      v30 = (*(_DWORD *)(v28 - 16) + v29);
      v31 = *(unsigned int *)(v28 - 4);
      if (v31 > 0x400)
        break;
      if (3 * v31 <= 4 * v30)
      {
        if ((_DWORD)v31)
          goto LABEL_43;
        v32 = 8;
        goto LABEL_46;
      }
LABEL_47:
      if (++v13 == v14)
        goto LABEL_17;
    }
    if (v31 > 2 * v30)
      goto LABEL_47;
LABEL_43:
    v32 = (_DWORD)v31 << (6 * *(_DWORD *)(v28 - 12) >= (2 * v31));
LABEL_46:
    WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(a3 + 1, v32, v22);
    goto LABEL_47;
  }
  return JSC::JSObject::getOwnPropertyNames();
}

uint64_t WebCore::JSSVGTransformList::defineOwnProperty(uint64_t a1, WTF::StringImpl **a2, uint64_t a3, JSC::PropertyDescriptor *this, int a5)
{
  JSC::VM *v9;
  int v10;
  _BYTE *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  char **v20;
  BOOL v21;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  unsigned __int16 *v30;
  uint64_t v31;
  unsigned int v32;
  BOOL v33;
  uint64_t v34;
  _DWORD *v35;
  BOOL v36;
  unsigned int v37;
  JSValue v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  unsigned int v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  unsigned __int8 *v45;
  unsigned int v46;
  WTF::StringImpl *v47[2];
  __int128 v48;
  JSC::VM *v49;
  _DWORD *v50;
  WTF::StringImpl *v51;

  v9 = a2[7];
  v49 = v9;
  if (!a3)
    goto LABEL_65;
  v10 = *(_DWORD *)(a3 + 16);
  if ((v10 & 0x20) != 0)
    goto LABEL_65;
  v11 = *(_BYTE **)(a3 + 8);
  v12 = *(unsigned int *)(a3 + 4);
  if ((v10 & 4) != 0)
  {
    if ((_DWORD)v12)
    {
      v41 = *v11 - 48;
      if (v41 <= 9 && (v12 < 2 || *v11 != 48))
      {
        v44 = v12 - 1;
        v45 = v11 + 1;
        while (v44)
        {
          if (v41 > 0x19999999)
            goto LABEL_62;
          v46 = *v45 - 48;
          if (v46 > 9)
            goto LABEL_62;
          v16 = 0;
          LOBYTE(v12) = 0;
          v42 = 0;
          v33 = __CFADD__(v46, 10 * v41);
          v41 = v46 + 10 * v41;
          --v44;
          ++v45;
          if (v33)
            goto LABEL_64;
        }
        if (v41 == -1)
          v16 = 0;
        else
          v16 = v41 & 0xFFFFFF00;
        if (v41 == -1)
          LOBYTE(v12) = 0;
        else
          LOBYTE(v12) = v41;
        if (v41 == -1)
          v42 = 0;
        else
          v42 = 0x100000000;
LABEL_64:
        v15 = v12;
        if ((v42 & 0x100000000) != 0)
          goto LABEL_9;
LABEL_65:
        v43 = *((_OWORD *)this + 1);
        *(_OWORD *)v47 = *(_OWORD *)this;
        v48 = v43;
        return JSC::JSObject::defineOwnProperty();
      }
LABEL_62:
      v16 = 0;
      LOBYTE(v12) = 0;
    }
    else
    {
      v16 = 0;
    }
    v42 = 0;
    goto LABEL_64;
  }
  if (!(_DWORD)v12 || (v13 = *(unsigned __int16 *)v11 - 48, v13 > 9))
  {
LABEL_6:
    v14 = 0;
    LOBYTE(v13) = 0;
LABEL_7:
    v15 = 0;
    goto LABEL_8;
  }
  if (v12 >= 2 && *(_WORD *)v11 == 48)
  {
    v14 = 0;
    goto LABEL_7;
  }
  v30 = (unsigned __int16 *)(v11 + 2);
  v31 = v12 - 1;
  while (v31)
  {
    if (v13 <= 0x19999999)
    {
      v32 = *v30 - 48;
      if (v32 <= 9)
      {
        v33 = __CFADD__(v32, 10 * v13);
        v13 = v32 + 10 * v13;
        ++v30;
        --v31;
        if (!v33)
          continue;
      }
    }
    goto LABEL_6;
  }
  v36 = v13 == -1;
  v37 = v13 & 0xFFFFFF00;
  v14 = 0x100000000;
  if (v13 == -1)
  {
    v14 = 0;
    LOBYTE(v13) = 0;
  }
  if (v36)
    v15 = 0;
  else
    v15 = v37;
LABEL_8:
  v16 = v13;
  if ((v14 & 0x100000000) == 0)
    goto LABEL_65;
LABEL_9:
  if ((JSC::PropertyDescriptor::isDataDescriptor(this) & 1) != 0)
  {
    v17 = *(_QWORD *)this;
    v47[0] = a2[7];
    if ((v17 & 0xFFFE000000000002) != 0)
      goto LABEL_57;
    v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
    v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
    v20 = (char **)(16 * v18);
    if ((_DWORD)v18)
      v21 = v20 == &WebCore::JSSVGTransform::s_info;
    else
      v21 = 1;
    if (!v21)
    {
      do
      {
        v20 = (char **)v20[2];
        v19 = v20 != 0;
      }
      while (v20 != &WebCore::JSSVGTransform::s_info && v20 != 0);
    }
    if (!v19 || (v23 = *(_DWORD **)(v17 + 24)) == 0)
    {
LABEL_57:
      JSC::throwTypeError();
      return 1;
    }
    v24 = *(_QWORD *)(a1 + 24);
    ++v23[2];
    v50 = v23;
    if (*(_BYTE *)(v24 + 24) == 1)
    {
      v26 = 4;
      LOBYTE(v47[0]) = 4;
      v34 = 1;
      LODWORD(v48) = 1;
      v47[1] = 0;
    }
    else
    {
      LOBYTE(v47[0]) = 1;
      LODWORD(v48) = 0;
      if (*(_DWORD *)(v24 + 44) > (v15 | v16))
      {
        (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(_QWORD *)v24 + 64))(&v51, v24);
        v25 = *(_QWORD *)(v24 + 16);
        if (v25)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 32))(v25, v24);
        v26 = 0;
        v27 = 0;
        v47[0] = v51;
        LODWORD(v48) = 0;
        v28 = 1;
LABEL_42:
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32FCD20[v27])(&v51, v47);
        v35 = v50;
        v50 = 0;
        if (v35)
        {
          if (v35[2] == 1)
          {
            (*(void (**)(_DWORD *))(*(_QWORD *)v35 + 8))(v35);
            if ((v28 & 1) != 0)
              return 1;
            goto LABEL_53;
          }
          --v35[2];
        }
        if ((v28 & 1) != 0)
          return 1;
LABEL_53:
        LOBYTE(v47[0]) = v26;
        v47[1] = 0;
        if (!*((_QWORD *)v9 + 2))
        {
          v38.super.isa = (Class)WebCore::createDOMException((JSC *)a2, (JSC::JSGlobalObject *)v26, (JSC::JSGlobalObject *)&v47[1]);
          JSC::VM::throwException(v9, (JSC::JSGlobalObject *)a2, v38);
          v40 = v47[1];
          v47[1] = 0;
          if (v40)
          {
            if (*(_DWORD *)v40 == 2)
              WTF::StringImpl::destroy(v40, v39);
            else
              *(_DWORD *)v40 -= 2;
          }
        }
        return 1;
      }
      v26 = 0;
      v34 = 0;
    }
    ((uint64_t (**)(WTF::StringImpl **, char *))off_1E32F83C8)[v34](&v51, (char *)v47);
    v28 = 0;
    LOBYTE(v47[0]) = v26;
    v27 = 1;
    LODWORD(v48) = 1;
    v47[1] = 0;
    goto LABEL_42;
  }
  if (a5)
    JSC::throwTypeError();
  return 0;
}

uint64_t WebCore::JSSVGTransformList::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::JSSVGTransformList::createPrototype(WebCore::JSSVGTransformList *this, JSC::JSCell **a2, WebCore::JSDOMGlobalObject *a3)
{
  unint64_t v4;
  WebCore::JSDOMGlobalObject *v5;
  JSC::Structure *v6;

  v4 = JSC::Structure::create((uint64_t *)this, (int)a2, a2[82]);
  *(_DWORD *)(v4 + 16) |= 0x80000u;
  return WebCore::JSSVGTransformListPrototype::create(this, v4, v5, v6);
}

unint64_t WebCore::JSSVGTransformListPrototype::create(WebCore::JSSVGTransformListPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  unint64_t v6;
  int v7;

  v6 = JSC::allocateCell<WebCore::JSAbstractRangePrototype>((uint64_t)this);
  v7 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)v6 = a2 >> 4;
  *(_DWORD *)(v6 + 4) = v7;
  *(_QWORD *)(v6 + 8) = 0;
  WebCore::JSSVGTransformListPrototype::finishCreation((WebCore::JSSVGTransformListPrototype *)v6, this);
  return v6;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGTransformList>,(WebCore::DOMConstructorID)874>(uint64_t a1, uint64_t a2)
{
  unint64_t result;
  uint64_t Structure;
  JSC::Heap *v6;
  unint64_t v7;

  result = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6992);
  if (!result)
  {
    Structure = WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGTransformList>::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 664));
    result = WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGTransformList>::create(a1, Structure, (JSC::VM *)a2);
    *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6992) = result;
    if (result)
    {
      if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
      {
        v6 = (JSC::Heap *)(a1 + 192);
        v7 = result;
        JSC::Heap::writeBarrierSlowPath(v6, (const JSCell *)a2);
        return v7;
      }
    }
  }
  return result;
}

uint64_t WebCore::JSSVGTransformList::legacyPlatformObjectGetOwnProperty(uint64_t a1, JSC *a2, unint64_t a3, uint64_t a4)
{
  JSC::VM *v6;
  int v9;
  _BYTE *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  _BYTE *v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t result;
  unsigned __int16 *v24;
  uint64_t v25;
  unsigned int v26;
  BOOL v27;
  uint64_t v28;
  _DWORD *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  unsigned __int16 *v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  BOOL v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  unsigned __int8 *v48;
  unsigned int v49;
  uint64_t v50;
  unsigned __int8 *v51;
  unsigned int v52;
  uint64_t v53[2];
  int v54;
  JSC::VM *v55;
  char v56;

  v6 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v55 = v6;
  if (!a3)
  {
    if ((*(_BYTE *)(a1 + 6) & 0x20) != 0)
      return JSC::JSObject::getOwnStaticPropertySlot();
    return 0;
  }
  v9 = *(_DWORD *)(a3 + 16);
  if ((v9 & 0x20) != 0)
    goto LABEL_10;
  v10 = *(_BYTE **)(a3 + 8);
  v11 = *(unsigned int *)(a3 + 4);
  if ((v9 & 4) != 0)
  {
    if ((_DWORD)v11)
    {
      v45 = *v10 - 48;
      if (v45 <= 9 && (v11 < 2 || *v10 != 48))
      {
        v47 = v11 - 1;
        v48 = v10 + 1;
        while (v47)
        {
          if (v45 > 0x19999999)
            goto LABEL_77;
          v49 = *v48 - 48;
          if (v49 > 9)
            goto LABEL_77;
          v12 = 0;
          LOBYTE(v11) = 0;
          v13 = 0;
          v27 = __CFADD__(v49, 10 * v45);
          v45 = v49 + 10 * v45;
          --v47;
          ++v48;
          if (v27)
            goto LABEL_79;
        }
        if (v45 == -1)
          v12 = 0;
        else
          v12 = v45 & 0xFFFFFF00;
        if (v45 == -1)
          LOBYTE(v11) = 0;
        else
          LOBYTE(v11) = v45;
        if (v45 == -1)
          v13 = 0;
        else
          v13 = 0x100000000;
        goto LABEL_79;
      }
LABEL_77:
      v12 = 0;
      LOBYTE(v11) = 0;
    }
    else
    {
      v12 = 0;
    }
    v13 = 0;
LABEL_79:
    v14 = v11;
    goto LABEL_9;
  }
  if ((_DWORD)v11 && (v12 = *(unsigned __int16 *)v10 - 48, v12 <= 9))
  {
    if (v11 < 2 || *(_WORD *)v10 != 48)
    {
      v32 = (unsigned __int16 *)(v10 + 2);
      v33 = v11 - 1;
      while (v33)
      {
        if (v12 <= 0x19999999)
        {
          v34 = *v32 - 48;
          if (v34 <= 9)
          {
            v27 = __CFADD__(v34, 10 * v12);
            v12 = v34 + 10 * v12;
            ++v32;
            --v33;
            if (!v27)
              continue;
          }
        }
        goto LABEL_6;
      }
      v39 = v12 == -1;
      v14 = v12 & 0xFFFFFF00;
      v13 = 0x100000000;
      if (v12 == -1)
      {
        v13 = 0;
        LOBYTE(v12) = 0;
      }
      if (v39)
        v14 = 0;
      goto LABEL_8;
    }
    v13 = 0;
  }
  else
  {
LABEL_6:
    v13 = 0;
    LOBYTE(v12) = 0;
  }
  v14 = 0;
LABEL_8:
  v12 = v12;
LABEL_9:
  if ((v13 & 0x100000000) != 0)
  {
    v28 = v14 | v12;
    v29 = *(_DWORD **)(a1 + 24);
    if (v29[11] > v28)
    {
      v30 = *(WTF::StringImpl **)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x28);
      WebCore::SVGList<WTF::Ref<WebCore::SVGTransform,WTF::RawPtrTraits<WebCore::SVGTransform>,WTF::DefaultRefDerefTraits<WebCore::SVGTransform>>>::getItem((uint64_t)v53, v29, v28);
      v31 = WebCore::toJS<WebCore::IDLInterface<WebCore::SVGTransform>,WebCore::ExceptionOr<WTF::Ref<WebCore::SVGTransform,WTF::RawPtrTraits<WebCore::SVGTransform>,WTF::DefaultRefDerefTraits<WebCore::SVGTransform>>>>(a2, v30, (WebCore::JSDOMGlobalObject *)&v55, (uint64_t)v53);
      if (v54 != -1)
        ((void (*)(char *, uint64_t *))off_1E32FCD20[v54])(&v56, v53);
      if (!*((_DWORD *)v6 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v6) & 1) == 0)
      {
        *(_QWORD *)a4 = v31;
        *(_DWORD *)(a4 + 16) = 0;
        *(_QWORD *)(a4 + 32) = a1;
        result = 1;
        *(_BYTE *)(a4 + 49) = 1;
        return result;
      }
      return 0;
    }
  }
LABEL_10:
  if (!(a3 >> 4)
    || (v15 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE), ((a3 >> 4) & ~*(_DWORD *)(v15 + 0x20)) != 0)
    || (v16 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)), v6)) == 0
    || (v53[0] = a3, v17 = JSC::PropertyTable::get(v16, v53), (_DWORD)v17 == -1))
  {
    if ((*(_BYTE *)(a1 + 6) & 0x20) == 0 || (JSC::JSObject::getOwnStaticPropertySlot() & 1) == 0)
    {
      v18 = *(_DWORD *)(a3 + 16);
      if ((v18 & 0x20) == 0)
      {
        v19 = *(_BYTE **)(a3 + 8);
        v20 = *(unsigned int *)(a3 + 4);
        if ((v18 & 4) != 0)
        {
          if (!(_DWORD)v20 || (v46 = *v19 - 48, v46 > 9) || v20 >= 2 && *v19 == 48)
          {
LABEL_84:
            v22 = 0;
          }
          else
          {
            v50 = v20 - 1;
            v51 = v19 + 1;
            while (v50)
            {
              if (v46 > 0x19999999)
                goto LABEL_84;
              v52 = *v51 - 48;
              if (v52 > 9)
                goto LABEL_84;
              v22 = 0;
              v27 = __CFADD__(v52, 10 * v46);
              v46 = v52 + 10 * v46;
              --v50;
              ++v51;
              if (v27)
                goto LABEL_20;
            }
            v22 = v46 == -1 ? 0 : 0x100000000;
          }
        }
        else if (!(_DWORD)v20
               || (v21 = *(unsigned __int16 *)v19 - 48, v21 > 9)
               || v20 >= 2 && *(_WORD *)v19 == 48)
        {
LABEL_19:
          v22 = 0;
        }
        else
        {
          v24 = (unsigned __int16 *)(v19 + 2);
          v25 = v20 - 1;
          while (v25)
          {
            if (v21 <= 0x19999999)
            {
              v26 = *v24 - 48;
              if (v26 <= 9)
              {
                v27 = __CFADD__(v26, 10 * v21);
                v21 = v26 + 10 * v21;
                ++v24;
                --v25;
                if (!v27)
                  continue;
              }
            }
            goto LABEL_19;
          }
          v39 = v21 == -1;
          v22 = 0x100000000;
          if (v39)
            v22 = 0;
        }
LABEL_20:
        if ((v22 & 0x100000000) != 0)
          return JSC::JSObject::getOwnPropertySlotByIndex();
      }
      return 0;
    }
    return 1;
  }
  if ((int)v17 > 63)
  {
    v35 = *(_QWORD *)(a1 + 8) - 8;
    v36 = 0x3F00000000 - (v17 << 32);
  }
  else
  {
    v35 = a1 + 16;
    v36 = v17 << 32;
  }
  v37 = *(_QWORD *)(v35 + (v36 >> 29));
  if ((v37 & 0xFFFE000000000002) != 0)
  {
LABEL_50:
    *(_QWORD *)a4 = v37;
    *(_QWORD *)(a4 + 32) = a1;
    *(_DWORD *)(a4 + 16) = HIDWORD(v17);
    *(_DWORD *)(a4 + 20) = v17;
    result = 1;
    *(_WORD *)(a4 + 48) = 257;
    return result;
  }
  v38 = *(unsigned __int8 *)(v37 + 5);
  if (v38 != 6)
  {
    if (v38 == 5)
    {
      JSC::JSObject::fillGetterPropertySlot();
      return 1;
    }
    goto LABEL_50;
  }
  v40 = *(_DWORD *)(v15 + 16) & 3;
  v42 = *(_QWORD *)(v37 + 8);
  v41 = *(_QWORD *)(v37 + 16);
  if (MEMORY[0x1E0CBE830] == 16 * *(unsigned int *)(16 * (*(_DWORD *)v37 & 0xFFFFFFFE) + 0x4C))
  {
    v44 = *(_QWORD *)(v37 + 24);
    v43 = *(_QWORD *)(v37 + 32);
    *(_QWORD *)a4 = v42;
    *(_QWORD *)(a4 + 8) = v41;
    *(_DWORD *)(a4 + 16) = HIDWORD(v17);
    *(_QWORD *)(a4 + 32) = a1;
    *(_BYTE *)(a4 + 49) = 3;
    result = 1;
    if (v40 != 2)
      *(_BYTE *)(a4 + 48) = 1;
    *(_BYTE *)(a4 + 51) = 1;
    *(_QWORD *)(a4 + 72) = v44;
    *(_QWORD *)(a4 + 80) = v43;
  }
  else
  {
    *(_QWORD *)a4 = v42;
    *(_QWORD *)(a4 + 8) = v41;
    *(_DWORD *)(a4 + 16) = HIDWORD(v17);
    *(_QWORD *)(a4 + 32) = a1;
    result = 1;
    *(_BYTE *)(a4 + 49) = 3;
    if (v40 != 2)
      *(_BYTE *)(a4 + 48) = 1;
  }
  return result;
}

uint64_t WebCore::toJS<WebCore::IDLInterface<WebCore::SVGTransform>,WebCore::ExceptionOr<WTF::Ref<WebCore::SVGTransform,WTF::RawPtrTraits<WebCore::SVGTransform>,WTF::DefaultRefDerefTraits<WebCore::SVGTransform>>>>(JSC *a1, WTF::StringImpl *a2, WebCore::JSDOMGlobalObject *a3, uint64_t a4)
{
  int v4;
  WTF *v5;
  unint64_t v6;
  WTF::StringImpl *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  unsigned __int8 v13[8];
  WTF::StringImpl *v14;

  v4 = *(_DWORD *)(a4 + 16);
  if (!v4)
  {
    v5 = *(WTF **)a4;
    *(_QWORD *)a4 = 0;
    v6 = WebCore::wrap<WebCore::SVGTransform>((uint64_t)a2, v5, a3);
    if (*((_DWORD *)v5 + 2) == 1)
      (*(void (**)(WTF *))(*(_QWORD *)v5 + 8))(v5);
    else
      --*((_DWORD *)v5 + 2);
    return v6;
  }
  if (v4 == 1)
  {
    v13[0] = *(_BYTE *)a4;
    v9 = *(WTF::StringImpl **)(a4 + 8);
    *(_QWORD *)(a4 + 8) = 0;
    v14 = v9;
    if (!*(_QWORD *)(*(_QWORD *)a3 + 16))
    {
      WebCore::propagateExceptionSlowPath(a1, (JSC::VM **)a3, v13);
      v9 = v14;
    }
    v14 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, a2);
      else
        *(_DWORD *)v9 -= 2;
    }
    return 0;
  }
  v10 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::SVGList<WTF::Ref<WebCore::SVGTransform,WTF::RawPtrTraits<WebCore::SVGTransform>,WTF::DefaultRefDerefTraits<WebCore::SVGTransform>>>::getItem(v10, v11, v12);
}

uint64_t WebCore::SVGList<WTF::Ref<WebCore::SVGTransform,WTF::RawPtrTraits<WebCore::SVGTransform>,WTF::DefaultRefDerefTraits<WebCore::SVGTransform>>>::getItem(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v6;
  char v7[8];
  uint64_t v8;
  int v9;

  if (a2[11] <= a3)
  {
    v7[0] = 0;
    v4 = 1;
    v9 = 1;
    v8 = 0;
    *(_BYTE *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
  else
  {
    v7[0] = 1;
    v9 = 0;
    (*(void (**)(uint64_t *__return_ptr, _DWORD *, uint64_t))(*(_QWORD *)a2 + 48))(&v6, a2, a3);
    v4 = 0;
    *(_QWORD *)a1 = v6;
  }
  *(_DWORD *)(a1 + 16) = v4;
  return off_1E32F83C8[v4](&v6, v7);
}

unint64_t WebCore::jsSVGTransformListConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGTransformListPrototype::s_info != (char **)(16
                                                                * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                  + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGTransformList>,(WebCore::DOMConstructorID)874>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGTransformList_length(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 24) + 44);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

unint64_t WebCore::jsSVGTransformList_numberOfItems(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 24) + 44);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

uint64_t WebCore::JSSVGTransformListOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

_QWORD *WebCore::JSSVGTransformListOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  int v23;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v23 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v23) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v23;
        if (v12 == v3)
          goto LABEL_3;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_3:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v13 = (_QWORD *)(v5 + 16 * v11);
      *v13 = -1;
      v16 = v13[1];
      v15 = v13 + 1;
      v14 = v16;
      if (v16)
      {
        *(_QWORD *)(v14 + 8) = 3;
        *v15 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v17 = *v4;
      if (*v4)
        v18 = *(_DWORD *)(v17 - 12) - 1;
      else
        v18 = -1;
      *(_DWORD *)(v17 - 12) = v18;
      v19 = *v4;
      if (*v4)
      {
        v20 = 6 * *(_DWORD *)(v19 - 12);
        v21 = *(_DWORD *)(v19 - 4);
        if (v20 < v21 && v21 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v21 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::wrap<WebCore::SVGTransformList>(int a1, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WebCore::JSDOMGlobalObject *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *Allocator;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF *v30;
  void *v31;
  int v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  WTF *v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  WTF *v40;

  v5 = *(_QWORD *)(*((_QWORD *)a2 + 415) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WebCore::JSDOMGlobalObject **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WebCore::JSDOMGlobalObject **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 2);
  if (*(void (***)(WebCore::SVGTransformList *__hidden))a3 != off_1E34794A0)
  {
    __break(0xC471u);
    JUMPOUT(0x194F42F64);
  }
  v15 = WebCore::getDOMStructure<WebCore::JSSVGTransformList>(*((WebCore::JSSVGTransformList **)a2 + 7), a2, a3);
  v16 = *((_QWORD *)a2 + 7);
  v17 = *(_QWORD *)(v16 + 41456);
  v18 = *(_QWORD *)(v17 + 23536);
  v19 = *(_QWORD **)(v18 + 7072);
  if (!v19)
  {
    v25 = *(_QWORD *)(v17 + 22648);
    if (__ldaxr((unsigned __int8 *)v25))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v25))
    {
LABEL_30:
      v27 = *(_QWORD *)(v25 + 2824);
      if (!*(_QWORD *)(v27 + 7072))
      {
        v33 = WTF::fastMalloc((WTF *)0xF8);
        WTF::CString::CString((WTF::CString *)&v40, "IsoSpace T");
        v39 = 0;
        MEMORY[0x19AEA3204](v33, &v40, v16 + 192, v16 + 1872, 32, 8, &v39);
        v35 = (uint64_t)v39;
        v39 = 0;
        if (v35)
          (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
        v36 = v40;
        v40 = 0;
        if (v36)
        {
          if (*(_DWORD *)v36 == 1)
            WTF::fastFree(v36, v34);
          else
            --*(_DWORD *)v36;
        }
        v37 = *(_QWORD *)(v27 + 7072);
        *(_QWORD *)(v27 + 7072) = v33;
        if (v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
      }
      v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
      JSC::GCClient::IsoSubspace::IsoSubspace();
      v29 = *(_QWORD *)(v18 + 7072);
      *(_QWORD *)(v18 + 7072) = v19;
      if (v29)
      {
        v30 = (WTF *)MEMORY[0x19AEA3528](v29, v28);
        WTF::fastFree(v30, v31);
      }
      v32 = __ldxr((unsigned __int8 *)v25);
      if (v32 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v25))
          goto LABEL_11;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v25);
      goto LABEL_11;
    }
    MEMORY[0x19AEA534C](v25);
    goto LABEL_30;
  }
LABEL_11:
  SlowCase = v19[3];
  if (SlowCase >= v19[4])
  {
    SlowCase = v19[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_13;
    }
    v38 = *(_QWORD *)(SlowCase + 8) ^ v19[6];
    v19[4] = SlowCase + HIDWORD(v38);
    v19[5] = SlowCase + (int)v38;
  }
  v19[3] = SlowCase + 32;
LABEL_13:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v15);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v16 + 755))
    __dmb(0xAu);
  v20 = *((_QWORD *)a2 + 415);
  if ((byte_1ECE816D8 & 1) == 0)
  {
    qword_1ECE816D0 = (uint64_t)&off_1E32F77A0;
    byte_1ECE816D8 = 1;
  }
  v40 = a3;
  if ((SlowCase & 8) != 0)
    v21 = (SlowCase - 112) | 1;
  else
    v21 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v21 & 1) != 0)
    v22 = v21 + 47;
  else
    v22 = *(_QWORD *)v21 + 32;
  Allocator = *(_QWORD **)(v22 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v22 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1ECE816D0;
  Allocator[2] = v20;
  v39 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v20 + 32), (uint64_t *)&v40, (uint64_t *)&v39);
  if (v39)
    v39[1] = 3;
  return SlowCase;
}

void WebCore::JSSVGLengthOwner::~JSSVGLengthOwner(WebCore::JSSVGLengthOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSSVGLengthListOwner::~JSSVGLengthListOwner(WebCore::JSSVGLengthListOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSSVGMatrixOwner::~JSSVGMatrixOwner(WebCore::JSSVGMatrixOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSSVGNumberOwner::~JSSVGNumberOwner(WebCore::JSSVGNumberOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSSVGNumberListOwner::~JSSVGNumberListOwner(WebCore::JSSVGNumberListOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSSVGPathSegOwner::~JSSVGPathSegOwner(WebCore::JSSVGPathSegOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSSVGPathSegListOwner::~JSSVGPathSegListOwner(WebCore::JSSVGPathSegListOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSSVGPointOwner::~JSSVGPointOwner(WebCore::JSSVGPointOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSSVGPointListOwner::~JSSVGPointListOwner(WebCore::JSSVGPointListOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSSVGPreserveAspectRatioOwner::~JSSVGPreserveAspectRatioOwner(WebCore::JSSVGPreserveAspectRatioOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSSVGRectOwner::~JSSVGRectOwner(WebCore::JSSVGRectOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSSVGStringListOwner::~JSSVGStringListOwner(WebCore::JSSVGStringListOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSSVGTransformOwner::~JSSVGTransformOwner(WebCore::JSSVGTransformOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSSVGTransformListOwner::~JSSVGTransformListOwner(WebCore::JSSVGTransformListOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

uint64_t WebCore::jsSVGGeometryElementPrototypeFunction_isPointInFill(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  float64x2_t v13[2];
  _OWORD v14[2];
  int v15;

  v12 = *((_QWORD *)this + 7);
  v3 = *((_QWORD *)a2 + 5);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v12, "SVGGeometryElement", "isPointInFill");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSSVGGeometryElement::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSSVGGeometryElement::s_info && v6 != 0);
  }
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v12, "SVGGeometryElement", "isPointInFill");
  if (*((_DWORD *)a2 + 8) == 1)
    v9 = 10;
  else
    v9 = *((_QWORD *)a2 + 6);
  v10 = *(_QWORD *)(v3 + 24);
  WebCore::convertDictionary<WebCore::DOMPointInit>((JSC::JSCell *)v9, (uint64_t)this, (uint64_t)v14);
  if (v15)
    return 0;
  v13[0] = (float64x2_t)v14[0];
  v13[1] = (float64x2_t)v14[1];
  if (WebCore::SVGGeometryElement::isPointInFill(v10, v13))
    return 7;
  else
    return 6;
}

uint64_t WebCore::jsSVGGeometryElementPrototypeFunction_isPointInStroke(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  float64x2_t v13[2];
  _OWORD v14[2];
  int v15;

  v12 = *((_QWORD *)this + 7);
  v3 = *((_QWORD *)a2 + 5);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v12, "SVGGeometryElement", "isPointInStroke");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSSVGGeometryElement::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSSVGGeometryElement::s_info && v6 != 0);
  }
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v12, "SVGGeometryElement", "isPointInStroke");
  if (*((_DWORD *)a2 + 8) == 1)
    v9 = 10;
  else
    v9 = *((_QWORD *)a2 + 6);
  v10 = *(_QWORD *)(v3 + 24);
  WebCore::convertDictionary<WebCore::DOMPointInit>((JSC::JSCell *)v9, (uint64_t)this, (uint64_t)v14);
  if (v15)
    return 0;
  v13[0] = (float64x2_t)v14[0];
  v13[1] = (float64x2_t)v14[1];
  if (WebCore::SVGGeometryElement::isPointInStroke(v10, v13))
    return 7;
  else
    return 6;
}

_BYTE *WebCore::jsSVGGeometryElementPrototypeFunction_getTotalLength(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  float v9;
  double v10;
  uint64_t v11;
  uint64_t v13;

  v3 = *((_QWORD *)a2 + 5);
  v13 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v13, "SVGGeometryElement", "getTotalLength");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSSVGGeometryElement::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSSVGGeometryElement::s_info && v6 != 0);
  }
  if (!v5)
    return WebCore::throwThisTypeError((int)this, (int)&v13, "SVGGeometryElement", "getTotalLength");
  v9 = (*(float (**)(_QWORD))(**(_QWORD **)(v3 + 24) + 1376))(*(_QWORD *)(v3 + 24));
  v10 = v9;
  if (COERCE__INT64(fabs(v9)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v11 = (int)v9, (double)(int)v11 == v10)
    && ((_DWORD)v11 || (LODWORD(v9) & 0x80000000) == 0))
  {
    return (_BYTE *)(v11 | 0xFFFE000000000000);
  }
  else
  {
    return (_BYTE *)(*(_QWORD *)&v10 + 0x2000000000000);
  }
}

_BYTE *WebCore::jsSVGGeometryElementPrototypeFunction_getPointAtLength(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  unint64_t v12;
  double v13;
  float v14;
  WebCore::JSSVGPoint **v15;
  WebCore::JSDOMGlobalObject *v16;
  WTF *v17;
  unint64_t v18;
  JSValue v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  JSValue v24;
  double v25;
  uint64_t v26;
  JSC::JSGlobalObject *v27;
  unint64_t v28;
  uint64_t v29;
  int v30[2];
  WTF::StringImpl *v31;
  int v32;
  WTF *v33;
  WTF::StringImpl *v34;

  v4 = *((_QWORD *)this + 7);
  v29 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v29, "SVGGeometryElement", "getPointAtLength");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSSVGGeometryElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSSVGGeometryElement::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v29, "SVGGeometryElement", "getPointAtLength");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v21.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException((JSC::VM *)v4, this, v21);
  }
  v11 = *(_QWORD *)(v5 + 24);
  v12 = *((_QWORD *)a2 + 6);
  *(_QWORD *)v30 = v12;
  v33 = (WTF *)v4;
  if (v12 >= 0xFFFE000000000000)
  {
    v13 = (double)(int)v12;
  }
  else if (v12 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v30, this);
    v13 = v25;
  }
  else
  {
    *(_QWORD *)&v13 = v12 - 0x2000000000000;
  }
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
    return 0;
  if ((*(_QWORD *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v13 < -3.40282347e38 || v13 > 3.40282347e38)
  {
    JSC::throwTypeError();
    return 0;
  }
  v14 = v13;
  v15 = *(WebCore::JSSVGPoint ***)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  (*(void (**)(int *__return_ptr, uint64_t, float))(*(_QWORD *)v11 + 1384))(v30, v11, v14);
  if (!v32)
  {
    v17 = *(WTF **)v30;
    *(_QWORD *)v30 = 0;
    v33 = v17;
    v18 = WebCore::toJSNewlyCreated(v15, &v33, v16);
    if (v33)
    {
      if (*((_DWORD *)v33 + 2) == 1)
        (*(void (**)(void))(*(_QWORD *)v33 + 8))();
      else
        --*((_DWORD *)v33 + 2);
    }
LABEL_24:
    if (v32 != -1)
      ((void (*)(WTF **, int *))off_1E32FACF8[v32])(&v33, v30);
    return (_BYTE *)v18;
  }
  if (v32 == 1)
  {
    v22 = (WTF::StringImpl *)LOBYTE(v30[0]);
    LOBYTE(v33) = v30[0];
    v23 = v31;
    v31 = 0;
    v34 = v23;
    if (!*(_QWORD *)(v4 + 16))
    {
      v24.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v30[0]), (JSC::JSGlobalObject *)&v34);
      JSC::VM::throwException((JSC::VM *)v4, this, v24);
      v23 = v34;
    }
    v34 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v22);
      else
        *(_DWORD *)v23 -= 2;
    }
    v18 = 0;
    goto LABEL_24;
  }
  v26 = std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::convert<WebCore::IDLFloat>(v26, v27, v28);
}

uint64_t WebCore::convert<WebCore::IDLFloat>(uint64_t a1, JSC::JSGlobalObject *a2, unint64_t a3)
{
  uint64_t result;
  double v5;
  int v6;
  float v7;
  double v8;
  uint64_t v9;
  unint64_t v10;

  result = *((_QWORD *)a2 + 7);
  v10 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v5 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v9 = result;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v10, a2);
    result = v9;
    v5 = v8;
  }
  else
  {
    *(_QWORD *)&v5 = a3 - 0x2000000000000;
  }
  if (*(_DWORD *)(result + 80))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)result);
    if ((result & 1) != 0)
      goto LABEL_12;
  }
  if ((*(_QWORD *)&v5 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000 || v5 < -3.40282347e38 || v5 > 3.40282347e38)
  {
    result = JSC::throwTypeError();
LABEL_12:
    v6 = 1;
    goto LABEL_9;
  }
  v6 = 0;
  v7 = v5;
  *(float *)a1 = v7;
LABEL_9:
  *(_DWORD *)(a1 + 4) = v6;
  return result;
}

_BYTE *WebCore::jsSVGGraphicsElementPrototypeFunction_getBBox(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  int v3;
  unint64_t v4;
  uint64_t v5;
  float v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  WTF *v17;

  v3 = (int)this;
  v16 = *((_QWORD *)this + 7);
  v4 = WebCore::IDLOperation<WebCore::JSSVGGraphicsElement>::cast(*((_QWORD *)a2 + 5));
  if (!v4)
    return WebCore::throwThisTypeError(v3, (int)&v16, "SVGGraphicsElement", "getBBox");
  v5 = *(_QWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x28);
  v6 = (*(float (**)(_QWORD, _QWORD))(**(_QWORD **)(v4 + 24) + 1360))(*(_QWORD *)(v4 + 24), 0);
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v13 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v13 + 8) = 1;
  *(_QWORD *)(v13 + 16) = 0;
  *(_WORD *)(v13 + 24) = 0;
  *(float *)(v13 + 28) = v6;
  *(_DWORD *)(v13 + 32) = v8;
  *(_DWORD *)(v13 + 36) = v10;
  *(_DWORD *)(v13 + 40) = v12;
  *(_QWORD *)v13 = off_1E32EE110;
  v17 = (WTF *)v13;
  v14 = WebCore::createWrapper<WebCore::SVGRect,WebCore::SVGRect>(v5, &v17);
  if (v17)
  {
    if (*((_DWORD *)v17 + 2) == 1)
      (*(void (**)(WTF *))(*(_QWORD *)v17 + 8))(v17);
    else
      --*((_DWORD *)v17 + 2);
  }
  return (_BYTE *)v14;
}

_BYTE *WebCore::jsSVGGraphicsElementPrototypeFunction_getCTM(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  int v3;
  unint64_t v4;
  WebCore::JSSVGMatrix **v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  WebCore::JSDOMGlobalObject *v9;
  unint64_t v10;
  uint64_t v12;
  WTF *v13;
  _OWORD v14[3];

  v3 = (int)this;
  v12 = *((_QWORD *)this + 7);
  v4 = WebCore::IDLOperation<WebCore::JSSVGGraphicsElement>::cast(*((_QWORD *)a2 + 5));
  if (!v4)
    return WebCore::throwThisTypeError(v3, (int)&v12, "SVGGraphicsElement", "getCTM");
  v5 = *(WebCore::JSSVGMatrix ***)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x28);
  (*(void (**)(_OWORD *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(v4 + 24) + 1312))(v14, *(_QWORD *)(v4 + 24), 0);
  v6 = WTF::fastMalloc((WTF *)0x50);
  *(_DWORD *)(v6 + 8) = 1;
  *(_QWORD *)(v6 + 16) = 0;
  *(_WORD *)(v6 + 24) = 0;
  *(_QWORD *)v6 = off_1E32EE1F0;
  v8 = v14[1];
  v7 = v14[2];
  *(_OWORD *)(v6 + 32) = v14[0];
  *(_OWORD *)(v6 + 48) = v8;
  *(_OWORD *)(v6 + 64) = v7;
  *(_QWORD *)v6 = off_1E32EE1B8;
  v13 = (WTF *)v6;
  v10 = WebCore::toJSNewlyCreated(v5, &v13, v9);
  if (v13)
  {
    if (*((_DWORD *)v13 + 2) == 1)
      (*(void (**)(WTF *))(*(_QWORD *)v13 + 8))(v13);
    else
      --*((_DWORD *)v13 + 2);
  }
  return (_BYTE *)v10;
}

_BYTE *WebCore::jsSVGGraphicsElementPrototypeFunction_getScreenCTM(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  WebCore::JSSVGMatrix **v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  WebCore::JSDOMGlobalObject *v12;
  unint64_t v13;
  uint64_t v16;
  WTF *v17;
  _OWORD v18[3];

  v3 = *((_QWORD *)a2 + 5);
  v16 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v16, "SVGGraphicsElement", "getScreenCTM");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSSVGGraphicsElement::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSSVGGraphicsElement::s_info && v6 != 0);
  }
  if (!v5)
    return WebCore::throwThisTypeError((int)this, (int)&v16, "SVGGraphicsElement", "getScreenCTM");
  v8 = *(WebCore::JSSVGMatrix ***)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x28);
  (*(void (**)(_OWORD *__return_ptr, _QWORD, _QWORD, JSC::CallFrame *))(**(_QWORD **)(v3 + 24) + 1320))(v18, *(_QWORD *)(v3 + 24), 0, a3);
  v9 = WTF::fastMalloc((WTF *)0x50);
  *(_DWORD *)(v9 + 8) = 1;
  *(_QWORD *)(v9 + 16) = 0;
  *(_WORD *)(v9 + 24) = 0;
  *(_QWORD *)v9 = off_1E32EE1F0;
  v11 = v18[1];
  v10 = v18[2];
  *(_OWORD *)(v9 + 32) = v18[0];
  *(_OWORD *)(v9 + 48) = v11;
  *(_OWORD *)(v9 + 64) = v10;
  *(_QWORD *)v9 = off_1E32EE1B8;
  v17 = (WTF *)v9;
  v13 = WebCore::toJSNewlyCreated(v8, &v17, v12);
  if (v17)
  {
    if (*((_DWORD *)v17 + 2) == 1)
      (*(void (**)(WTF *))(*(_QWORD *)v17 + 8))(v17);
    else
      --*((_DWORD *)v17 + 2);
  }
  return (_BYTE *)v13;
}

_BYTE *WebCore::jsSVGGraphicsElementPrototypeFunction_hasExtension(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  const WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  JSValue v21;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v23;
  JSC::VM *v24;
  uint64_t v25;
  int v26;
  WTF::StringImpl *v27;
  uint64_t v28;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v24 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v24, "SVGGraphicsElement", "hasExtension");
  v6 = 16 * (*(_DWORD *)v5 & 0xFFFFFFFE);
  v7 = *(unsigned int *)(v6 + 76);
  v8 = *(_DWORD *)(v6 + 76) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSSVGGraphicsElement::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSSVGGraphicsElement::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v24, "SVGGraphicsElement", "hasExtension");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v21.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v21);
  }
  v12 = *((_QWORD *)a2 + 6);
  v28 = v12;
  if ((v12 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v12 + 5) == 2)
  {
    v13 = *(WTF::StringImpl **)(v12 + 8);
    if ((v13 & 1) != 0)
    {
      v13 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v12, this);
      if (!v13)
        goto LABEL_18;
    }
    else if (!v13)
    {
LABEL_18:
      v27 = v13;
      goto LABEL_19;
    }
    *(_DWORD *)v13 += 2;
    goto LABEL_18;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v28, this);
LABEL_19:
  if (*((_DWORD *)v4 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    v14 = v27;
    if (hasExceptionsAfterHandlingTraps)
    {
      v26 = 1;
      v27 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v23);
        else
          *(_DWORD *)v14 -= 2;
      }
      v17 = 0;
      v18 = 1;
      goto LABEL_28;
    }
  }
  else
  {
    v14 = v27;
  }
  v26 = 0;
  v25 = 0;
  if ((WTF::equal(v14, (const WTF::StringImpl *)WebCore::MathMLNames::mathmlNamespaceURI, a3) & 1) != 0
    || WTF::equal(v14, (const WTF::StringImpl *)WebCore::HTMLNames::xhtmlNamespaceURI, v16))
  {
    v17 = 7;
    if (!v14)
      goto LABEL_33;
  }
  else
  {
    v17 = 6;
    if (!v14)
    {
LABEL_33:
      v18 = 0;
      goto LABEL_28;
    }
  }
  if (*(_DWORD *)v14 == 2)
  {
    WTF::StringImpl::destroy(v14, v15);
    goto LABEL_33;
  }
  v18 = 0;
  *(_DWORD *)v14 -= 2;
LABEL_28:
  ((void (*)(uint64_t *, uint64_t *))off_1E32FBED0[v18])(&v28, &v25);
  return (_BYTE *)v17;
}

unint64_t WebCore::IDLOperation<WebCore::JSSVGGraphicsElement>::cast(unint64_t result)
{
  uint64_t v1;
  _BOOL4 v2;
  char **v3;
  BOOL v4;

  if ((result & 0xFFFE000000000002) != 0)
    return 0;
  v1 = *(unsigned int *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x4C);
  v2 = *(_DWORD *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x4C) != 0;
  v3 = (char **)(16 * v1);
  if ((_DWORD)v1)
    v4 = v3 == &WebCore::JSSVGGraphicsElement::s_info;
  else
    v4 = 1;
  if (!v4)
  {
    do
    {
      v3 = (char **)v3[2];
      v2 = v3 != 0;
    }
    while (v3 != &WebCore::JSSVGGraphicsElement::s_info && v3 != 0);
  }
  if (!v2)
    return 0;
  return result;
}

uint64_t WebCore::jsSVGLengthPrototypeFunction_newValueSpecifiedUnits(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  unint64_t v13;
  double v15;
  int v16;
  double v17;
  double v18;
  double v19;
  unint64_t v20;
  JSC::VM *v21;
  double v22;
  uint64_t v23;
  JSValue v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  float v28;
  uint64_t v29;
  JSValue v30;
  double v31;
  double v32;
  _QWORD v33[2];
  unint64_t v34;
  WTF::StringImpl *v35;

  v4 = *((_QWORD *)this + 7);
  v33[0] = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)v33, "SVGLength", "newValueSpecifiedUnits");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSSVGLength::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSSVGLength::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)v33, "SVGLength", "newValueSpecifiedUnits");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v30.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException((JSC::VM *)v4, this, v30);
  }
  v12 = *(_QWORD *)(v5 + 24);
  v13 = *((_QWORD *)a2 + 6);
  v34 = v13;
  if (v13 >= 0xFFFE000000000000 && (v13 & 0x80000000) == 0)
  {
    LOWORD(v16) = v13;
  }
  else
  {
    if (v13 >= 0xFFFE000000000000)
    {
      v15 = (double)(int)v13;
    }
    else if (v13 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v34, this);
      v15 = v32;
    }
    else
    {
      *(_QWORD *)&v15 = v13 - 0x2000000000000;
    }
    if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
      return 0;
    LOWORD(v16) = 0;
    if (fabs(v15) != INFINITY && v15 != 0.0)
    {
      v17 = -floor(-v15);
      v18 = floor(v15);
      if (v15 >= 0.0)
        v17 = v18;
      v19 = fmod(v17, 65536.0);
      if (v19 < 0.0)
        v19 = v19 + 65536.0;
      v16 = (int)v19;
    }
  }
  v20 = *((_QWORD *)a2 + 7);
  v21 = (JSC::VM *)*((_QWORD *)this + 7);
  v33[1] = v21;
  v34 = v20;
  if (v20 >= 0xFFFE000000000000)
  {
    v22 = (double)(int)v20;
  }
  else if (v20 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v34, this);
    v22 = v31;
  }
  else
  {
    *(_QWORD *)&v22 = v20 - 0x2000000000000;
  }
  if (*((_DWORD *)v21 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v21) & 1) != 0)
    return 0;
  if ((*(_QWORD *)&v22 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v22 < -3.40282347e38 || v22 > 3.40282347e38)
  {
    JSC::throwTypeError();
    return 0;
  }
  if (*(_BYTE *)(v12 + 24) == 1)
  {
    v23 = 4;
LABEL_40:
    LOBYTE(v34) = v23;
    v35 = 0;
    if (!*(_QWORD *)(v4 + 16))
    {
      v24.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v23, (JSC::JSGlobalObject *)&v35);
      JSC::VM::throwException((JSC::VM *)v4, this, v24);
      v26 = v35;
      v35 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
          WTF::StringImpl::destroy(v26, v25);
        else
          *(_DWORD *)v26 -= 2;
      }
    }
    return 0;
  }
  if ((unsigned __int16)(v16 - 11) < 0xFFF6u)
  {
    v23 = 6;
    goto LABEL_40;
  }
  v28 = v22;
  *(float *)(v12 + 28) = v28;
  *(_BYTE *)(v12 + 32) = v16;
  v29 = *(_QWORD *)(v12 + 16);
  if (v29)
    (*(void (**)(uint64_t, uint64_t, const char *, uint64_t))(*(_QWORD *)v29 + 32))(v29, v12, "The provided value is outside the range of a float", 51);
  return 10;
}

uint64_t WebCore::jsSVGLengthPrototypeFunction_convertToSpecifiedUnits(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  unint64_t v12;
  double v14;
  int v15;
  double v16;
  double v17;
  double v18;
  JSValue v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  JSValue v23;
  double v24;
  uint64_t v25;
  char v26;
  WTF::StringImpl *v27;
  int v28[2];
  WTF::StringImpl *v29;
  char v30;

  v4 = *((_QWORD *)this + 7);
  v25 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v25, "SVGLength", "convertToSpecifiedUnits");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSSVGLength::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSSVGLength::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v25, "SVGLength", "convertToSpecifiedUnits");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v20.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException((JSC::VM *)v4, this, v20);
  }
  v11 = *(_QWORD *)(v5 + 24);
  v12 = *((_QWORD *)a2 + 6);
  *(_QWORD *)v28 = v12;
  if (v12 >= 0xFFFE000000000000 && (v12 & 0x80000000) == 0)
  {
    LOWORD(v15) = v12;
LABEL_29:
    WebCore::SVGLength::convertToSpecifiedUnits(v11, v15, (uint64_t)v28);
    if (!v30)
      return 10;
    v21 = (WTF::StringImpl *)LOBYTE(v28[0]);
    v26 = v28[0];
    v22 = v29;
    v27 = v29;
    if (!*(_QWORD *)(v4 + 16))
    {
      v23.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v28[0]), (JSC::JSGlobalObject *)&v27);
      JSC::VM::throwException((JSC::VM *)v4, this, v23);
      v22 = v27;
    }
    v27 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v21);
      else
        *(_DWORD *)v22 -= 2;
    }
    return 0;
  }
  if (v12 >= 0xFFFE000000000000)
  {
    v14 = (double)(int)v12;
  }
  else if (v12 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v28, this);
    v14 = v24;
  }
  else
  {
    *(_QWORD *)&v14 = v12 - 0x2000000000000;
  }
  if (!*(_DWORD *)(v4 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) == 0)
  {
    LOWORD(v15) = 0;
    if (fabs(v14) != INFINITY && v14 != 0.0)
    {
      v16 = -floor(-v14);
      v17 = floor(v14);
      if (v14 >= 0.0)
        v16 = v17;
      v18 = fmod(v16, 65536.0);
      if (v18 < 0.0)
        v18 = v18 + 65536.0;
      v15 = (int)v18;
    }
    goto LABEL_29;
  }
  return 0;
}

uint64_t WebCore::jsSVGLengthListPrototypeFunction_clear(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  JSC::VM *v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v18;
  _DWORD **v19;
  uint64_t v20;
  _DWORD *v21;
  WTF *v22;
  JSValue v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  JSC::VM *v26;
  char v27[8];
  WTF::StringImpl *v28;
  int v29;
  char v30;

  v4 = *((_QWORD *)a2 + 5);
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v26 = v5;
  if ((v4 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v26, "SVGLengthList", "clear");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSSVGLengthList::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSSVGLengthList::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v26, "SVGLengthList", "clear");
  v11 = *(_QWORD *)(v4 + 24);
  v12 = *(unsigned __int8 *)(v11 + 24);
  if (v12 == 1)
  {
    v13 = 4;
    v27[0] = 4;
    v14 = 1;
    v29 = 1;
    v28 = 0;
  }
  else
  {
    v27[0] = 1;
    v29 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
    if (*(_DWORD *)(v11 + 40))
    {
      v18 = *(unsigned int *)(v11 + 44);
      if ((_DWORD)v18)
      {
        v19 = *(_DWORD ***)(v11 + 32);
        v20 = 8 * v18;
        do
        {
          v21 = *v19;
          *v19 = 0;
          if (v21)
          {
            if (v21[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
            else
              --v21[2];
          }
          ++v19;
          v20 -= 8;
        }
        while (v20);
        *(_DWORD *)(v11 + 44) = 0;
      }
      v22 = *(WTF **)(v11 + 32);
      if (v22)
      {
        *(_QWORD *)(v11 + 32) = 0;
        *(_DWORD *)(v11 + 40) = 0;
        WTF::fastFree(v22, v15);
      }
    }
    v16 = *(_QWORD *)(v11 + 16);
    if (v16)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 32))(v16, v11);
    v13 = 0;
    v14 = 0;
  }
  ((void (*)(char *, char *, JSC::CallFrame *))off_1E32F83C8[v14])(&v30, v27, a3);
  if (v12 != 1)
    return 10;
  v27[0] = v13;
  v28 = 0;
  if (!*((_QWORD *)v5 + 2))
  {
    v23.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v13, (JSC::JSGlobalObject *)&v28);
    JSC::VM::throwException(v5, this, v23);
    v25 = v28;
    v28 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v24);
      else
        *(_DWORD *)v25 -= 2;
    }
  }
  return 0;
}

_BYTE *WebCore::jsSVGLengthListPrototypeFunction_initialize(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 v20;
  char **v21;
  BOOL v22;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  int v27;
  unsigned __int8 v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  WTF *v32;
  int v33;
  int v34;
  uint64_t v35;
  _DWORD *v36;
  uint64_t v38;
  _DWORD **v39;
  uint64_t v40;
  _DWORD *v41;
  WTF *v42;
  JSValue v44;
  JSValue v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  JSC::VM *v48;
  _DWORD *v49;
  WTF *v50;
  uint64_t v51;
  int v52;
  WTF *v53;
  JSC::VM *v54;
  WTF::StringImpl *v55;
  int v56;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v48 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v48, "SVGLengthList", "initialize");
  v11 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
  v12 = *(unsigned int *)(v11 + 0x4C);
  v13 = *(_DWORD *)(v11 + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSSVGLengthList::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSSVGLengthList::s_info && v14 != 0);
  }
  if (!v13)
    return WebCore::throwThisTypeError((int)this, (int)&v48, "SVGLengthList", "initialize");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v44.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v44);
  }
  v17 = *(_QWORD *)(v10 + 24);
  v18 = *((_QWORD *)a2 + 6);
  v54 = v9;
  if ((v18 & 0xFFFE000000000002) != 0)
    goto LABEL_24;
  v19 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
  v20 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
  v21 = (char **)(16 * v19);
  if ((_DWORD)v19)
    v22 = v21 == &WebCore::JSSVGLength::s_info;
  else
    v22 = 1;
  if (!v22)
  {
    do
    {
      v21 = (char **)v21[2];
      v20 = v21 != 0;
    }
    while (v21 != &WebCore::JSSVGLength::s_info && v21 != 0);
  }
  if (v20 && (v25 = *(_DWORD **)(v18 + 24)) != 0)
  {
    v26 = *(_QWORD *)(v11 + 40);
    ++v25[2];
    v49 = v25;
    v27 = *(unsigned __int8 *)(v17 + 24);
    if (v27 == 1)
    {
      v28 = 4;
      LOBYTE(v54) = 4;
      v29 = 1;
      v56 = 1;
      v55 = 0;
      LOBYTE(v50) = 4;
      v51 = 0;
      v52 = 1;
    }
    else
    {
      LOBYTE(v54) = 1;
      v56 = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17);
      if (*(_DWORD *)(v17 + 40))
      {
        v38 = *(unsigned int *)(v17 + 44);
        if ((_DWORD)v38)
        {
          v39 = *(_DWORD ***)(v17 + 32);
          v40 = 8 * v38;
          do
          {
            v41 = *v39;
            *v39 = 0;
            if (v41)
            {
              if (v41[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v41 + 8))(v41);
              else
                --v41[2];
            }
            ++v39;
            v40 -= 8;
          }
          while (v40);
          *(_DWORD *)(v17 + 44) = 0;
        }
        v42 = *(WTF **)(v17 + 32);
        if (v42)
        {
          *(_QWORD *)(v17 + 32) = 0;
          *(_DWORD *)(v17 + 40) = 0;
          WTF::fastFree(v42, v30);
        }
      }
      (*(void (**)(WTF **__return_ptr, uint64_t, _DWORD **))(*(_QWORD *)v17 + 80))(&v53, v17, &v49);
      v31 = *(_QWORD *)(v17 + 16);
      if (v31)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v31 + 32))(v31, v17);
      v29 = 0;
      v28 = v53;
      v50 = v53;
      v52 = 0;
    }
    ((void (*)(WTF **, JSC::VM **, JSC::CallFrame *))off_1E32F83C8[v29])(&v53, &v54, a3);
    if (v27 == 1)
    {
      LOBYTE(v54) = v28;
      v51 = 0;
      v55 = 0;
      if (!*((_QWORD *)v9 + 2))
      {
        v45.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v28, (JSC::JSGlobalObject *)&v55);
        JSC::VM::throwException(v9, this, v45);
        v47 = v55;
        v55 = 0;
        if (v47)
        {
          if (*(_DWORD *)v47 == 2)
            WTF::StringImpl::destroy(v47, v46);
          else
            *(_DWORD *)v47 -= 2;
        }
      }
      v24 = 0;
      v35 = 1;
    }
    else
    {
      v32 = v50;
      v50 = 0;
      v24 = WebCore::wrap<WebCore::SVGLength>((uint64_t)this, v26, v32);
      v33 = *((_DWORD *)v32 + 2);
      v34 = v33 - 1;
      if (v33 == 1)
      {
        (*(void (**)(WTF *))(*(_QWORD *)v32 + 8))(v32);
        v35 = 0;
      }
      else
      {
        v35 = 0;
        *((_DWORD *)v32 + 2) = v34;
      }
    }
    ((void (*)(JSC::VM **, WTF **))off_1E32F83D8[v35])(&v54, &v50);
    v52 = -1;
    v36 = v49;
    v49 = 0;
    if (v36)
    {
      if (v36[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v36 + 8))(v36);
      else
        --v36[2];
    }
  }
  else
  {
LABEL_24:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v54, 0, "newItem", 8, "SVGLengthList", 14, a8, "initialize", 11, "SVGLength", 10);
    return 0;
  }
  return (_BYTE *)v24;
}

_BYTE *WebCore::jsSVGLengthListPrototypeFunction_getItem(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  _DWORD *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  unsigned __int8 v16;
  WTF *v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  JSValue v24;
  JSValue v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  JSC::VM *v28;
  WTF *v29;
  uint64_t v30;
  int v31;
  _DWORD v32[2];
  WTF *v33;
  char v34[8];
  WTF::StringImpl *v35;
  int v36;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v28 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v28, "SVGLengthList", "getItem");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSSVGLengthList::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSSVGLengthList::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v28, "SVGLengthList", "getItem");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v24.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v24);
  }
  v11 = *(_DWORD **)(v5 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v32);
  if (v32[1])
    return 0;
  v12 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  v13 = v32[0];
  v14 = v11[11];
  if (v14 <= v32[0])
  {
    v16 = 0;
    v34[0] = 0;
    v15 = 1;
    v36 = 1;
    v35 = 0;
    LOBYTE(v29) = 0;
    v30 = 0;
  }
  else
  {
    v34[0] = 1;
    v36 = 0;
    (*(void (**)(WTF **__return_ptr, _DWORD *, _QWORD))(*(_QWORD *)v11 + 48))(&v33, v11, v32[0]);
    v15 = 0;
    v16 = v33;
    v29 = v33;
  }
  v31 = v15;
  ((uint64_t (**)(WTF **, char *))off_1E32F83C8)[v15](&v33, v34);
  if (v14 <= v13)
  {
    v34[0] = v16;
    v30 = 0;
    v35 = 0;
    if (!*((_QWORD *)v4 + 2))
    {
      v25.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v16, (JSC::JSGlobalObject *)&v35);
      JSC::VM::throwException(v4, this, v25);
      v27 = v35;
      v35 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
          WTF::StringImpl::destroy(v27, v26);
        else
          *(_DWORD *)v27 -= 2;
      }
    }
    v18 = 0;
    v21 = 1;
  }
  else
  {
    v17 = v29;
    v29 = 0;
    v18 = WebCore::wrap<WebCore::SVGLength>((uint64_t)this, v12, v17);
    v19 = *((_DWORD *)v17 + 2);
    v20 = v19 - 1;
    if (v19 == 1)
    {
      (*(void (**)(WTF *))(*(_QWORD *)v17 + 8))(v17);
      v21 = 0;
    }
    else
    {
      v21 = 0;
      *((_DWORD *)v17 + 2) = v20;
    }
  }
  ((void (*)(char *, WTF **))off_1E32F83D8[v21])(v34, &v29);
  return (_BYTE *)v18;
}

_BYTE *WebCore::jsSVGLengthListPrototypeFunction_insertItemBefore(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  char **v20;
  BOOL v21;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  int v26;
  unsigned __int8 v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  WTF *v32;
  int v33;
  int v34;
  uint64_t v35;
  _DWORD *v36;
  JSValue v39;
  JSValue v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  JSC::VM *v43;
  _DWORD *v44;
  WTF *v45;
  uint64_t v46;
  int v47;
  _DWORD v48[2];
  WTF *v49;
  JSC::VM *v50;
  WTF::StringImpl *v51;
  int v52;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v43 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v43, "SVGLengthList", "insertItemBefore");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSSVGLengthList::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSSVGLengthList::s_info && v13 != 0);
  }
  if (!v12)
    return WebCore::throwThisTypeError((int)this, (int)&v43, "SVGLengthList", "insertItemBefore");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v39.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v39);
  }
  v16 = *(_QWORD *)(v10 + 24);
  v17 = *((_QWORD *)a2 + 6);
  v50 = v9;
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_24;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSSVGLength::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSSVGLength::s_info && v20 != 0);
  }
  if (v19 && (v24 = *(_DWORD **)(v17 + 24)) != 0)
  {
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v48);
    if (v48[1])
    {
      return 0;
    }
    else
    {
      v25 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
      ++v24[2];
      v44 = v24;
      v26 = *(unsigned __int8 *)(v16 + 24);
      if (v26 == 1)
      {
        v27 = 4;
        LOBYTE(v50) = 4;
        v28 = 1;
        v52 = 1;
        v51 = 0;
        LOBYTE(v45) = 4;
        v46 = 0;
        v47 = 1;
      }
      else
      {
        LOBYTE(v50) = 1;
        v52 = 0;
        v29 = *(_DWORD *)(v16 + 44);
        if (v29 >= v48[0])
          v30 = v48[0];
        else
          v30 = v29;
        (*(void (**)(WTF **__return_ptr, uint64_t, uint64_t, _DWORD **))(*(_QWORD *)v16 + 56))(&v49, v16, v30, &v44);
        v31 = *(_QWORD *)(v16 + 16);
        if (v31)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v31 + 32))(v31, v16);
        v28 = 0;
        v27 = v49;
        v45 = v49;
        v47 = 0;
      }
      ((uint64_t (**)(WTF **, char *))off_1E32F83C8)[v28](&v49, (char *)&v50);
      if (v26 == 1)
      {
        LOBYTE(v50) = v27;
        v46 = 0;
        v51 = 0;
        if (!*((_QWORD *)v9 + 2))
        {
          v40.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v27, (JSC::JSGlobalObject *)&v51);
          JSC::VM::throwException(v9, this, v40);
          v42 = v51;
          v51 = 0;
          if (v42)
          {
            if (*(_DWORD *)v42 == 2)
              WTF::StringImpl::destroy(v42, v41);
            else
              *(_DWORD *)v42 -= 2;
          }
        }
        v23 = 0;
        v35 = 1;
      }
      else
      {
        v32 = v45;
        v45 = 0;
        v23 = WebCore::wrap<WebCore::SVGLength>((uint64_t)this, v25, v32);
        v33 = *((_DWORD *)v32 + 2);
        v34 = v33 - 1;
        if (v33 == 1)
        {
          (*(void (**)(WTF *))(*(_QWORD *)v32 + 8))(v32);
          v35 = 0;
        }
        else
        {
          v35 = 0;
          *((_DWORD *)v32 + 2) = v34;
        }
      }
      ((void (*)(JSC::VM **, WTF **))off_1E32F83D8[v35])(&v50, &v45);
      v47 = -1;
      v36 = v44;
      v44 = 0;
      if (v36)
      {
        if (v36[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v36 + 8))(v36);
        else
          --v36[2];
      }
    }
  }
  else
  {
LABEL_24:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v50, 0, "newItem", 8, "SVGLengthList", 14, a8, "insertItemBefore", 17, "SVGLength", 10);
    return 0;
  }
  return (_BYTE *)v23;
}

_BYTE *WebCore::jsSVGLengthListPrototypeFunction_replaceItem(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  char **v20;
  BOOL v21;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  unsigned __int8 v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  WTF *v32;
  int v33;
  int v34;
  uint64_t v35;
  _DWORD *v36;
  JSValue v39;
  JSValue v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WebCore *v43;
  JSC::JSGlobalObject *v44;
  JSC::CallFrame *v45;
  JSC::VM *v46;
  _DWORD *v47;
  _DWORD v48[2];
  WTF *v49;
  char v50[8];
  WTF::StringImpl *v51;
  int v52;
  WTF *v53;
  uint64_t v54;
  int v55;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v46 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v46, "SVGLengthList", "replaceItem");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSSVGLengthList::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSSVGLengthList::s_info && v13 != 0);
  }
  if (!v12)
    return WebCore::throwThisTypeError((int)this, (int)&v46, "SVGLengthList", "replaceItem");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v39.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v39);
  }
  v16 = *(_QWORD *)(v10 + 24);
  v17 = *((_QWORD *)a2 + 6);
  v53 = v9;
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_24;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSSVGLength::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSSVGLength::s_info && v20 != 0);
  }
  if (!v19 || (v24 = *(_DWORD **)(v17 + 24)) == 0)
  {
LABEL_24:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v53, 0, "newItem", 8, "SVGLengthList", 14, a8, "replaceItem", 12, "SVGLength", 10);
    return 0;
  }
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v48);
  if (v48[1])
    return 0;
  v25 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
  ++v24[2];
  v47 = v24;
  if (*(_BYTE *)(v16 + 24) == 1)
  {
    v26 = 4;
    LOBYTE(v53) = 4;
    v27 = 1;
    v55 = 1;
    v54 = 0;
LABEL_34:
    v50[0] = v26;
    v29 = 1;
    v52 = 1;
    ((uint64_t (**)(WTF **, char *))off_1E32F83C8)[v27](&v49, (char *)&v53);
    v31 = 0;
    v51 = 0;
    LOBYTE(v53) = v26;
    v54 = 0;
    v30 = 1;
    v55 = 1;
    goto LABEL_35;
  }
  LOBYTE(v53) = 1;
  v55 = 0;
  if (*(_DWORD *)(v16 + 44) <= v48[0])
  {
    v26 = 0;
    v27 = 0;
    goto LABEL_34;
  }
  v50[0] = 1;
  v52 = 0;
  (*(void (**)(WTF **__return_ptr, uint64_t))(*(_QWORD *)v16 + 64))(&v49, v16);
  v28 = *(_QWORD *)(v16 + 16);
  if (v28)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v28 + 32))(v28, v16);
  v29 = 0;
  v30 = 0;
  v26 = v49;
  v53 = v49;
  v55 = 0;
  v31 = 1;
LABEL_35:
  ((uint64_t (**)(WTF **, char *))off_1E32F83C8)[v30](&v49, v50);
  if ((v31 & 1) != 0)
  {
    v32 = v53;
    v53 = 0;
    v23 = WebCore::wrap<WebCore::SVGLength>((uint64_t)this, v25, v32);
    v33 = *((_DWORD *)v32 + 2);
    v34 = v33 - 1;
    if (v33 == 1)
    {
      (*(void (**)(WTF *))(*(_QWORD *)v32 + 8))(v32);
      v35 = 0;
    }
    else
    {
      v35 = 0;
      *((_DWORD *)v32 + 2) = v34;
    }
LABEL_38:
    ((void (*)(char *, WTF **))off_1E32F83D8[v35])(v50, &v53);
    v55 = -1;
    v36 = v47;
    v47 = 0;
    if (v36)
    {
      if (v36[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v36 + 8))(v36);
      else
        --v36[2];
    }
    return (_BYTE *)v23;
  }
  if ((v29 & 1) != 0)
  {
    v50[0] = v26;
    v54 = 0;
    v51 = 0;
    if (!*((_QWORD *)v9 + 2))
    {
      v40.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v26, (JSC::JSGlobalObject *)&v51);
      JSC::VM::throwException(v9, this, v40);
      v42 = v51;
      v51 = 0;
      if (v42)
      {
        if (*(_DWORD *)v42 == 2)
          WTF::StringImpl::destroy(v42, v41);
        else
          *(_DWORD *)v42 -= 2;
      }
    }
    v23 = 0;
    v35 = 1;
    goto LABEL_38;
  }
  v43 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsSVGLengthListPrototypeFunction_removeItem(v43, v44, v45);
}

_BYTE *WebCore::jsSVGLengthListPrototypeFunction_removeItem(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  WTF *v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  JSValue v26;
  JSValue v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WebCore *v30;
  JSC::JSGlobalObject *v31;
  JSC::CallFrame *v32;
  JSC::VM *v33;
  _DWORD v34[2];
  WTF *v35;
  char v36[8];
  WTF::StringImpl *v37;
  int v38;
  WTF *v39;
  uint64_t v40;
  int v41;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v33 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v33, "SVGLengthList", "removeItem");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSSVGLengthList::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSSVGLengthList::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v33, "SVGLengthList", "removeItem");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v26.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v26);
  }
  v11 = *(_QWORD *)(v5 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v34);
  if (v34[1])
    return 0;
  v12 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  if (*(_BYTE *)(v11 + 24) == 1)
  {
    v13 = 4;
    LOBYTE(v39) = 4;
    v14 = 1;
    v41 = 1;
    v40 = 0;
LABEL_21:
    v36[0] = v13;
    v16 = 1;
    v38 = 1;
    ((uint64_t (**)(WTF **, char *))off_1E32F83C8)[v14](&v35, (char *)&v39);
    v18 = 0;
    v37 = 0;
    LOBYTE(v39) = v13;
    v40 = 0;
    v17 = 1;
    v41 = 1;
    goto LABEL_22;
  }
  LOBYTE(v39) = 1;
  v41 = 0;
  if (*(_DWORD *)(v11 + 44) <= v34[0])
  {
    v13 = 0;
    v14 = 0;
    goto LABEL_21;
  }
  v36[0] = 1;
  v38 = 0;
  (*(void (**)(WTF **__return_ptr, uint64_t))(*(_QWORD *)v11 + 72))(&v35, v11);
  v15 = *(_QWORD *)(v11 + 16);
  if (v15)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 32))(v15, v11);
  v16 = 0;
  v17 = 0;
  v13 = v35;
  v39 = v35;
  v41 = 0;
  v18 = 1;
LABEL_22:
  ((uint64_t (**)(WTF **, char *))off_1E32F83C8)[v17](&v35, v36);
  if ((v18 & 1) != 0)
  {
    v19 = v39;
    v39 = 0;
    v20 = WebCore::wrap<WebCore::SVGLength>((uint64_t)this, v12, v19);
    v21 = *((_DWORD *)v19 + 2);
    v22 = v21 - 1;
    if (v21 == 1)
    {
      (*(void (**)(WTF *))(*(_QWORD *)v19 + 8))(v19);
      v23 = 0;
    }
    else
    {
      v23 = 0;
      *((_DWORD *)v19 + 2) = v22;
    }
LABEL_25:
    ((void (*)(char *, WTF **))off_1E32F83D8[v23])(v36, &v39);
    return (_BYTE *)v20;
  }
  if ((v16 & 1) != 0)
  {
    v36[0] = v13;
    v40 = 0;
    v37 = 0;
    if (!*((_QWORD *)v4 + 2))
    {
      v27.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v13, (JSC::JSGlobalObject *)&v37);
      JSC::VM::throwException(v4, this, v27);
      v29 = v37;
      v37 = 0;
      if (v29)
      {
        if (*(_DWORD *)v29 == 2)
          WTF::StringImpl::destroy(v29, v28);
        else
          *(_DWORD *)v29 -= 2;
      }
    }
    v20 = 0;
    v23 = 1;
    goto LABEL_25;
  }
  v30 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsSVGLengthListPrototypeFunction_appendItem(v30, v31, v32);
}

_BYTE *WebCore::jsSVGLengthListPrototypeFunction_appendItem(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 v20;
  char **v21;
  BOOL v22;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  int v27;
  unsigned __int8 v28;
  uint64_t v29;
  uint64_t v30;
  WTF *v31;
  int v32;
  int v33;
  uint64_t v34;
  _DWORD *v35;
  JSValue v38;
  JSValue v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  JSC::VM *v42;
  _DWORD *v43;
  WTF *v44;
  uint64_t v45;
  int v46;
  WTF *v47;
  JSC::VM *v48;
  WTF::StringImpl *v49;
  int v50;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v42 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v42, "SVGLengthList", "appendItem");
  v11 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
  v12 = *(unsigned int *)(v11 + 0x4C);
  v13 = *(_DWORD *)(v11 + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSSVGLengthList::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSSVGLengthList::s_info && v14 != 0);
  }
  if (!v13)
    return WebCore::throwThisTypeError((int)this, (int)&v42, "SVGLengthList", "appendItem");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v38.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v38);
  }
  v17 = *(_QWORD *)(v10 + 24);
  v18 = *((_QWORD *)a2 + 6);
  v48 = v9;
  if ((v18 & 0xFFFE000000000002) != 0)
    goto LABEL_24;
  v19 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
  v20 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
  v21 = (char **)(16 * v19);
  if ((_DWORD)v19)
    v22 = v21 == &WebCore::JSSVGLength::s_info;
  else
    v22 = 1;
  if (!v22)
  {
    do
    {
      v21 = (char **)v21[2];
      v20 = v21 != 0;
    }
    while (v21 != &WebCore::JSSVGLength::s_info && v21 != 0);
  }
  if (v20 && (v25 = *(_DWORD **)(v18 + 24)) != 0)
  {
    v26 = *(_QWORD *)(v11 + 40);
    ++v25[2];
    v43 = v25;
    v27 = *(unsigned __int8 *)(v17 + 24);
    if (v27 == 1)
    {
      v28 = 4;
      LOBYTE(v48) = 4;
      v29 = 1;
      v50 = 1;
      v49 = 0;
      LOBYTE(v44) = 4;
      v45 = 0;
      v46 = 1;
    }
    else
    {
      LOBYTE(v48) = 1;
      v50 = 0;
      (*(void (**)(WTF **__return_ptr, uint64_t, _DWORD **, JSC::CallFrame *))(*(_QWORD *)v17 + 80))(&v47, v17, &v43, a3);
      v30 = *(_QWORD *)(v17 + 16);
      if (v30)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v30 + 32))(v30, v17);
      v29 = 0;
      v28 = v47;
      v44 = v47;
      v46 = 0;
    }
    ((void (*)(WTF **, JSC::VM **, JSC::CallFrame *))off_1E32F83C8[v29])(&v47, &v48, a3);
    if (v27 == 1)
    {
      LOBYTE(v48) = v28;
      v45 = 0;
      v49 = 0;
      if (!*((_QWORD *)v9 + 2))
      {
        v39.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v28, (JSC::JSGlobalObject *)&v49);
        JSC::VM::throwException(v9, this, v39);
        v41 = v49;
        v49 = 0;
        if (v41)
        {
          if (*(_DWORD *)v41 == 2)
            WTF::StringImpl::destroy(v41, v40);
          else
            *(_DWORD *)v41 -= 2;
        }
      }
      v24 = 0;
      v34 = 1;
    }
    else
    {
      v31 = v44;
      v44 = 0;
      v24 = WebCore::wrap<WebCore::SVGLength>((uint64_t)this, v26, v31);
      v32 = *((_DWORD *)v31 + 2);
      v33 = v32 - 1;
      if (v32 == 1)
      {
        (*(void (**)(WTF *))(*(_QWORD *)v31 + 8))(v31);
        v34 = 0;
      }
      else
      {
        v34 = 0;
        *((_DWORD *)v31 + 2) = v33;
      }
    }
    ((void (*)(JSC::VM **, WTF **))off_1E32F83D8[v34])(&v48, &v44);
    v46 = -1;
    v35 = v43;
    v43 = 0;
    if (v35)
    {
      if (v35[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v35 + 8))(v35);
      else
        --v35[2];
    }
  }
  else
  {
LABEL_24:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v48, 0, "newItem", 8, "SVGLengthList", 14, a8, "appendItem", 11, "SVGLength", 10);
    return 0;
  }
  return (_BYTE *)v24;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore9SVGLengthENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore9SVGLengthENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::jsSVGMarkerElementPrototypeFunction_setOrientToAuto(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v10;

  v3 = *((_QWORD *)a2 + 5);
  v10 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v10, "SVGMarkerElement", "setOrientToAuto");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSSVGMarkerElement::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSSVGMarkerElement::s_info && v6 != 0);
  }
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v10, "SVGMarkerElement", "setOrientToAuto");
  WebCore::SVGMarkerElement::setOrientToAuto(*(WebCore::SVGMarkerElement **)(v3 + 24));
  return 10;
}

uint64_t WebCore::jsSVGMarkerElementPrototypeFunction_setOrientToAngle(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  WebCore::SVGMarkerElement *v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  char **v20;
  BOOL v21;
  const WebCore::SVGAngle *v24;
  JSValue v25;
  JSC::VM *v26;
  JSC::VM *v27;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v26 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v26, "SVGMarkerElement", "setOrientToAngle");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSSVGMarkerElement::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSSVGMarkerElement::s_info && v13 != 0);
  }
  if (!v12)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v26, "SVGMarkerElement", "setOrientToAngle");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v25.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v25);
  }
  else
  {
    v16 = *(WebCore::SVGMarkerElement **)(v10 + 24);
    v17 = *((_QWORD *)a2 + 6);
    v27 = v9;
    if ((v17 & 0xFFFE000000000002) != 0)
      goto LABEL_24;
    v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
    v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
    v20 = (char **)(16 * v18);
    if ((_DWORD)v18)
      v21 = v20 == &WebCore::JSSVGAngle::s_info;
    else
      v21 = 1;
    if (!v21)
    {
      do
      {
        v20 = (char **)v20[2];
        v19 = v20 != 0;
      }
      while (v20 != &WebCore::JSSVGAngle::s_info && v20 != 0);
    }
    if (v19 && (v24 = *(const WebCore::SVGAngle **)(v17 + 24)) != 0)
    {
      WebCore::SVGMarkerElement::setOrientToAngle(v16, v24);
      return 10;
    }
    else
    {
LABEL_24:
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v27, 0, "angle", 6, "SVGMarkerElement", 17, a8, "setOrientToAngle", 17, "SVGAngle", 9);
      return 0;
    }
  }
}

_BYTE *WebCore::jsSVGMaskElementPrototypeFunction_hasExtension(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  const WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  JSValue v21;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v23;
  JSC::VM *v24;
  uint64_t v25;
  int v26;
  WTF::StringImpl *v27;
  uint64_t v28;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v24 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v24, "SVGMaskElement", "hasExtension");
  v6 = 16 * (*(_DWORD *)v5 & 0xFFFFFFFE);
  v7 = *(unsigned int *)(v6 + 76);
  v8 = *(_DWORD *)(v6 + 76) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSSVGMaskElement::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSSVGMaskElement::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v24, "SVGMaskElement", "hasExtension");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v21.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v21);
  }
  v12 = *((_QWORD *)a2 + 6);
  v28 = v12;
  if ((v12 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v12 + 5) == 2)
  {
    v13 = *(WTF::StringImpl **)(v12 + 8);
    if ((v13 & 1) != 0)
    {
      v13 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v12, this);
      if (!v13)
        goto LABEL_18;
    }
    else if (!v13)
    {
LABEL_18:
      v27 = v13;
      goto LABEL_19;
    }
    *(_DWORD *)v13 += 2;
    goto LABEL_18;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v28, this);
LABEL_19:
  if (*((_DWORD *)v4 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    v14 = v27;
    if (hasExceptionsAfterHandlingTraps)
    {
      v26 = 1;
      v27 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v23);
        else
          *(_DWORD *)v14 -= 2;
      }
      v17 = 0;
      v18 = 1;
      goto LABEL_28;
    }
  }
  else
  {
    v14 = v27;
  }
  v26 = 0;
  v25 = 0;
  if ((WTF::equal(v14, (const WTF::StringImpl *)WebCore::MathMLNames::mathmlNamespaceURI, a3) & 1) != 0
    || WTF::equal(v14, (const WTF::StringImpl *)WebCore::HTMLNames::xhtmlNamespaceURI, v16))
  {
    v17 = 7;
    if (!v14)
      goto LABEL_33;
  }
  else
  {
    v17 = 6;
    if (!v14)
    {
LABEL_33:
      v18 = 0;
      goto LABEL_28;
    }
  }
  if (*(_DWORD *)v14 == 2)
  {
    WTF::StringImpl::destroy(v14, v15);
    goto LABEL_33;
  }
  v18 = 0;
  *(_DWORD *)v14 -= 2;
LABEL_28:
  ((void (*)(uint64_t *, uint64_t *))off_1E32FBED0[v18])(&v28, &v25);
  return (_BYTE *)v17;
}

_BYTE *WebCore::jsSVGMatrixPrototypeFunction_multiply(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  double *v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 v20;
  char **v21;
  BOOL v22;
  double *v24;
  WebCore::JSSVGMatrix **v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  uint64_t v42;
  WebCore::JSDOMGlobalObject *v43;
  unint64_t v44;
  JSValue v47;
  JSC::VM *v48;
  WTF *v49;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v48 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v48, "SVGMatrix", "multiply");
  v11 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
  v12 = *(unsigned int *)(v11 + 0x4C);
  v13 = *(_DWORD *)(v11 + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSSVGMatrix::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSSVGMatrix::s_info && v14 != 0);
  }
  if (!v13)
    return WebCore::throwThisTypeError((int)this, (int)&v48, "SVGMatrix", "multiply");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v47.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v47);
  }
  v17 = *(double **)(v10 + 24);
  v18 = *((_QWORD *)a2 + 6);
  v49 = v9;
  if ((v18 & 0xFFFE000000000002) != 0)
    goto LABEL_31;
  v19 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
  v20 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
  v21 = (char **)(16 * v19);
  if ((_DWORD)v19)
    v22 = v21 == &WebCore::JSSVGMatrix::s_info;
  else
    v22 = 1;
  if (!v22)
  {
    do
    {
      v21 = (char **)v21[2];
      v20 = v21 != 0;
    }
    while (v21 != &WebCore::JSSVGMatrix::s_info && v21 != 0);
  }
  if (v20 && (v24 = *(double **)(v18 + 24)) != 0)
  {
    v25 = *(WebCore::JSSVGMatrix ***)(v11 + 40);
    v26 = v17[4];
    v27 = v17[5];
    v28 = v17[6];
    v29 = v17[7];
    v30 = v24[4];
    v31 = v24[5];
    v32 = v28 * v31 + v30 * v26;
    v33 = v29 * v31 + v30 * v27;
    v34 = v24[6];
    v35 = v24[7];
    v36 = v28 * v35 + v34 * v26;
    v37 = v29 * v35 + v34 * v27;
    v38 = v24[8];
    v39 = v24[9];
    v40 = v17[8] + v28 * v39 + v38 * v26;
    v41 = v17[9] + v29 * v39 + v38 * v27;
    v42 = WTF::fastMalloc((WTF *)0x50);
    *(_DWORD *)(v42 + 8) = 1;
    *(_QWORD *)(v42 + 16) = 0;
    *(_WORD *)(v42 + 24) = 0;
    *(double *)(v42 + 32) = v32;
    *(double *)(v42 + 40) = v33;
    *(double *)(v42 + 48) = v36;
    *(double *)(v42 + 56) = v37;
    *(double *)(v42 + 64) = v40;
    *(double *)(v42 + 72) = v41;
    *(_QWORD *)v42 = off_1E32EE1B8;
    v49 = (WTF *)v42;
    v44 = WebCore::toJSNewlyCreated(v25, &v49, v43);
    if (v49)
    {
      if (*((_DWORD *)v49 + 2) == 1)
        (*(void (**)(void))(*(_QWORD *)v49 + 8))();
      else
        --*((_DWORD *)v49 + 2);
    }
  }
  else
  {
LABEL_31:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v49, 0, "secondMatrix", 13, "SVGMatrix", 10, a8, "multiply", 9, "SVGMatrix", 10);
    return 0;
  }
  return (_BYTE *)v44;
}

_BYTE *WebCore::jsSVGMatrixPrototypeFunction_inverse(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  double *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  WebCore::JSSVGMatrix **v18;
  double v19;
  BOOL v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  uint64_t v28;
  WebCore::JSDOMGlobalObject *v29;
  unint64_t v30;
  uint64_t v31;
  JSC::VM *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  JSC::VM *v38;
  _QWORD v39[2];
  int v40;
  JSC::VM *v41;
  WTF *v42;
  WTF::StringImpl *v43;

  v3 = *((_QWORD *)a2 + 5);
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v38 = v4;
  if ((v3 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v38, "SVGMatrix", "inverse");
  v5 = 16 * (*(_DWORD *)v3 & 0xFFFFFFFE);
  v6 = *(unsigned int *)(v5 + 0x4C);
  v7 = *(_DWORD *)(v5 + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSSVGMatrix::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSSVGMatrix::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v38, "SVGMatrix", "inverse");
  v10 = *(double **)(v3 + 24);
  v41 = v4;
  v11 = v10[4];
  v12 = v10[5];
  v13 = v10[6];
  v14 = v10[7];
  v15 = v11 * v14 - v12 * v13;
  v16 = fabs(v15);
  if ((unint64_t)(*(_QWORD *)&v16 - 0x10000000000000) >> 53 > 0x3FE
    && (unint64_t)(*(_QWORD *)&v16 - 1) > 0xFFFFFFFFFFFFELL)
  {
    v35 = v4;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v37 = (WTF::StringImpl *)v39[0];
    LOBYTE(v39[0]) = 8;
    v40 = 1;
    LOBYTE(v42) = 8;
    v39[1] = 0;
    v43 = v37;
    if (!*((_QWORD *)v35 + 2))
    {
      WebCore::propagateExceptionSlowPath(this, &v41, (unsigned __int8 *)&v42);
      v37 = v43;
    }
    v43 = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2)
        WTF::StringImpl::destroy(v37, v36);
      else
        *(_DWORD *)v37 -= 2;
    }
    v30 = 0;
    v31 = 1;
  }
  else
  {
    v18 = *(WebCore::JSSVGMatrix ***)(v5 + 40);
    if (v11 == 1.0 && v12 == 0.0 && ((v19 = 1.0, v13 == 0.0) ? (v20 = v14 == 1.0) : (v20 = 0), v20))
    {
      v26 = -v10[8];
      v27 = -v10[9];
      v22 = 0.0;
      v21 = 0.0;
      v23 = 1.0;
    }
    else
    {
      v19 = v14 / v15;
      v21 = -v12 / v15;
      v22 = -v13 / v15;
      v23 = v11 / v15;
      v25 = v10[8];
      v24 = v10[9];
      v26 = (v13 * v24 - v14 * v25) / v15;
      v27 = (v12 * v25 - v11 * v24) / v15;
    }
    v28 = WTF::fastMalloc((WTF *)0x50);
    *(_DWORD *)(v28 + 8) = 1;
    *(_QWORD *)(v28 + 16) = 0;
    *(_WORD *)(v28 + 24) = 0;
    *(double *)(v28 + 32) = v19;
    *(double *)(v28 + 40) = v21;
    *(double *)(v28 + 48) = v22;
    *(double *)(v28 + 56) = v23;
    *(double *)(v28 + 64) = v26;
    *(double *)(v28 + 72) = v27;
    *(_QWORD *)v28 = off_1E32EE1B8;
    v40 = 0;
    v39[0] = 0;
    v42 = (WTF *)v28;
    v30 = WebCore::toJSNewlyCreated(v18, &v42, v29);
    if (v42)
    {
      if (*((_DWORD *)v42 + 2) == 1)
        (*(void (**)(void))(*(_QWORD *)v42 + 8))();
      else
        --*((_DWORD *)v42 + 2);
    }
    v31 = 0;
  }
  ((void (*)(WTF **, _QWORD *))off_1E32F8E38[v31])(&v42, v39);
  return (_BYTE *)v30;
}

_BYTE *WebCore::jsSVGMatrixPrototypeFunction_translate(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v5;
  unint64_t v6;
  JSC::JSGlobalObject *v7;
  _DWORD *v8;
  double *v9;
  WTF *v10;
  double v11;
  float v12;
  double v13;
  WTF *v14;
  JSC::VM *v15;
  double v16;
  float v17;
  double v18;
  WebCore::JSSVGMatrix **v19;
  double v20;
  double v21;
  double v22;
  double v23;
  BOOL v24;
  double v25;
  double v26;
  double v27;
  uint64_t v28;
  WebCore::JSDOMGlobalObject *v29;
  unint64_t v30;
  JSValue v33;
  unint64_t v34;
  unint64_t v35;
  double v36;
  double v37;
  JSC::VM *v38;
  WTF *v39;

  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v38 = v5;
  v6 = WebCore::IDLOperation<WebCore::JSSVGMatrix>::cast(*((_QWORD *)a2 + 5));
  if (!v6)
    return WebCore::throwThisTypeError((int)this, (int)&v38, "SVGMatrix", "translate");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v33.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, v7);
    return (_BYTE *)JSC::VM::throwException(v5, this, v33);
  }
  v8 = (_DWORD *)v6;
  v9 = *(double **)(v6 + 24);
  v10 = (WTF *)*((_QWORD *)a2 + 6);
  v39 = v10;
  if ((unint64_t)v10 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)v10;
  }
  else if ((unint64_t)v10 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v39, this);
    v11 = v36;
  }
  else
  {
    *(_QWORD *)&v11 = (char *)v10 - 0x2000000000000;
  }
  if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
    return 0;
  if (v11 < -3.40282347e38)
  {
    *(double *)&v34 = -INFINITY;
  }
  else
  {
    if (v11 <= 3.40282347e38)
    {
      v12 = v11;
      v13 = v12;
      goto LABEL_10;
    }
    *(double *)&v34 = INFINITY;
  }
  v13 = *(double *)&v34;
LABEL_10:
  v14 = (WTF *)*((_QWORD *)a2 + 7);
  v39 = v14;
  v15 = (JSC::VM *)*((_QWORD *)this + 7);
  if ((unint64_t)v14 >= 0xFFFE000000000000)
  {
    v16 = (double)(int)v14;
  }
  else if ((unint64_t)v14 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v39, this);
    v16 = v37;
  }
  else
  {
    *(_QWORD *)&v16 = (char *)v14 - 0x2000000000000;
  }
  if (*((_DWORD *)v15 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v15) & 1) != 0)
    return 0;
  if (v16 < -3.40282347e38)
  {
    *(double *)&v35 = -INFINITY;
LABEL_43:
    v18 = *(double *)&v35;
    goto LABEL_17;
  }
  if (v16 > 3.40282347e38)
  {
    *(double *)&v35 = INFINITY;
    goto LABEL_43;
  }
  v17 = v16;
  v18 = v17;
LABEL_17:
  v19 = *(WebCore::JSSVGMatrix ***)(16 * (*v8 & 0xFFFFFFFE) + 0x28);
  v20 = v9[4];
  v21 = v9[5];
  v22 = v9[6];
  v23 = v9[7];
  v24 = v20 == 1.0;
  if (v21 != 0.0)
    v24 = 0;
  if (v22 != 0.0)
    v24 = 0;
  v25 = v18 * v22 + v13 * v20;
  if (v24 && v23 == 1.0)
    v25 = v13;
  else
    v18 = v18 * v23 + v13 * v21;
  v26 = v9[8] + v25;
  v27 = v9[9] + v18;
  v28 = WTF::fastMalloc((WTF *)0x50);
  *(_DWORD *)(v28 + 8) = 1;
  *(_QWORD *)(v28 + 16) = 0;
  *(_WORD *)(v28 + 24) = 0;
  *(double *)(v28 + 32) = v20;
  *(double *)(v28 + 40) = v21;
  *(double *)(v28 + 48) = v22;
  *(double *)(v28 + 56) = v23;
  *(double *)(v28 + 64) = v26;
  *(double *)(v28 + 72) = v27;
  *(_QWORD *)v28 = off_1E32EE1B8;
  v39 = (WTF *)v28;
  v30 = WebCore::toJSNewlyCreated(v19, &v39, v29);
  if (v39)
  {
    if (*((_DWORD *)v39 + 2) == 1)
      (*(void (**)(void))(*(_QWORD *)v39 + 8))();
    else
      --*((_DWORD *)v39 + 2);
  }
  return (_BYTE *)v30;
}

_BYTE *WebCore::jsSVGMatrixPrototypeFunction_scale(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v5;
  unint64_t v6;
  JSC::JSGlobalObject *v7;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;
  double v11;
  float v12;
  double v13;
  WebCore::JSSVGMatrix **v14;
  float64x2_t v15;
  uint64_t v16;
  WebCore::JSDOMGlobalObject *v17;
  unint64_t v18;
  JSValue v21;
  unint64_t v22;
  double v23;
  float64x2_t v24;
  float64x2_t v25;
  JSC::VM *v26;
  WTF *v27;
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v26 = v5;
  v6 = WebCore::IDLOperation<WebCore::JSSVGMatrix>::cast(*((_QWORD *)a2 + 5));
  if (!v6)
    return WebCore::throwThisTypeError((int)this, (int)&v26, "SVGMatrix", "scale");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v21.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, v7);
    return (_BYTE *)JSC::VM::throwException(v5, this, v21);
  }
  v8 = (_DWORD *)v6;
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *((_QWORD *)a2 + 6);
  *(_QWORD *)&v28 = v10;
  if (v10 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)v10;
  }
  else if (v10 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v28, this);
    v11 = v23;
  }
  else
  {
    *(_QWORD *)&v11 = v10 - 0x2000000000000;
  }
  if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
    return 0;
  if (v11 < -3.40282347e38)
  {
    *(double *)&v22 = -INFINITY;
  }
  else
  {
    if (v11 <= 3.40282347e38)
    {
      v12 = v11;
      v13 = v12;
      goto LABEL_10;
    }
    *(double *)&v22 = INFINITY;
  }
  v13 = *(double *)&v22;
LABEL_10:
  v14 = *(WebCore::JSSVGMatrix ***)(16 * (*v8 & 0xFFFFFFFE) + 0x28);
  v15 = *(float64x2_t *)(v9 + 48);
  v28 = *(_OWORD *)(v9 + 64);
  v24 = vmulq_n_f64(*(float64x2_t *)(v9 + 32), v13);
  v25 = vmulq_n_f64(v15, v13);
  v16 = WTF::fastMalloc((WTF *)0x50);
  *(_DWORD *)(v16 + 8) = 1;
  *(_QWORD *)(v16 + 16) = 0;
  *(_WORD *)(v16 + 24) = 0;
  *(float64x2_t *)(v16 + 32) = v24;
  *(float64x2_t *)(v16 + 48) = v25;
  *(_OWORD *)(v16 + 64) = v28;
  *(_QWORD *)v16 = off_1E32EE1B8;
  v27 = (WTF *)v16;
  v18 = WebCore::toJSNewlyCreated(v14, &v27, v17);
  if (v27)
  {
    if (*((_DWORD *)v27 + 2) == 1)
      (*(void (**)(void))(*(_QWORD *)v27 + 8))();
    else
      --*((_DWORD *)v27 + 2);
  }
  return (_BYTE *)v18;
}

_BYTE *WebCore::jsSVGMatrixPrototypeFunction_scaleNonUniform(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v5;
  unint64_t v6;
  JSC::JSGlobalObject *v7;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;
  double v11;
  float v12;
  double v13;
  unint64_t v14;
  JSC::VM *v15;
  double v16;
  float v17;
  double v18;
  WebCore::JSSVGMatrix **v19;
  float64x2_t v20;
  uint64_t v21;
  WebCore::JSDOMGlobalObject *v22;
  unint64_t v23;
  JSValue v26;
  unint64_t v27;
  char hasExceptionsAfterHandlingTraps;
  unint64_t v29;
  double v30;
  double v31;
  float64x2_t v32;
  float64x2_t v33;
  double v34;
  double v35;
  JSC::VM *v36;
  WTF *v37;
  __int128 v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v36 = v5;
  v6 = WebCore::IDLOperation<WebCore::JSSVGMatrix>::cast(*((_QWORD *)a2 + 5));
  if (!v6)
    return WebCore::throwThisTypeError((int)this, (int)&v36, "SVGMatrix", "scaleNonUniform");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v26.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, v7);
    return (_BYTE *)JSC::VM::throwException(v5, this, v26);
  }
  v8 = (_DWORD *)v6;
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *((_QWORD *)a2 + 6);
  *(_QWORD *)&v38 = v10;
  if (v10 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)v10;
  }
  else if (v10 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v38, this);
    v11 = v30;
  }
  else
  {
    *(_QWORD *)&v11 = v10 - 0x2000000000000;
  }
  if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
    return 0;
  if (v11 < -3.40282347e38)
  {
    *(double *)&v27 = -INFINITY;
  }
  else
  {
    if (v11 <= 3.40282347e38)
    {
      v12 = v11;
      v13 = v12;
      goto LABEL_10;
    }
    *(double *)&v27 = INFINITY;
  }
  v13 = *(double *)&v27;
LABEL_10:
  v14 = *((_QWORD *)a2 + 7);
  *(_QWORD *)&v38 = v14;
  v15 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v14 >= 0xFFFE000000000000)
  {
    v16 = (double)(int)v14;
  }
  else if (v14 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v35 = v13;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v38, this);
    v13 = v35;
    v16 = v31;
  }
  else
  {
    *(_QWORD *)&v16 = v14 - 0x2000000000000;
  }
  if (*((_DWORD *)v15 + 20))
  {
    v34 = v13;
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v15);
    v13 = v34;
    if ((hasExceptionsAfterHandlingTraps & 1) != 0)
      return 0;
  }
  if (v16 < -3.40282347e38)
  {
    *(double *)&v29 = -INFINITY;
  }
  else
  {
    if (v16 <= 3.40282347e38)
    {
      v17 = v16;
      v18 = v17;
      goto LABEL_17;
    }
    *(double *)&v29 = INFINITY;
  }
  v18 = *(double *)&v29;
LABEL_17:
  v19 = *(WebCore::JSSVGMatrix ***)(16 * (*v8 & 0xFFFFFFFE) + 0x28);
  v20 = *(float64x2_t *)(v9 + 48);
  v38 = *(_OWORD *)(v9 + 64);
  v32 = vmulq_n_f64(v20, v18);
  v33 = vmulq_n_f64(*(float64x2_t *)(v9 + 32), v13);
  v21 = WTF::fastMalloc((WTF *)0x50);
  *(_DWORD *)(v21 + 8) = 1;
  *(_QWORD *)(v21 + 16) = 0;
  *(_WORD *)(v21 + 24) = 0;
  *(float64x2_t *)(v21 + 32) = v33;
  *(float64x2_t *)(v21 + 48) = v32;
  *(_OWORD *)(v21 + 64) = v38;
  *(_QWORD *)v21 = off_1E32EE1B8;
  v37 = (WTF *)v21;
  v23 = WebCore::toJSNewlyCreated(v19, &v37, v22);
  if (v37)
  {
    if (*((_DWORD *)v37 + 2) == 1)
      (*(void (**)(void))(*(_QWORD *)v37 + 8))();
    else
      --*((_DWORD *)v37 + 2);
  }
  return (_BYTE *)v23;
}

_BYTE *WebCore::jsSVGMatrixPrototypeFunction_rotate(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v5;
  unint64_t v6;
  JSC::JSGlobalObject *v7;
  _DWORD *v8;
  double *v9;
  WTF *v10;
  double v11;
  float v12;
  double v13;
  WebCore::JSSVGMatrix **v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  __double2 v21;
  uint64_t v22;
  WebCore::JSDOMGlobalObject *v23;
  unint64_t v24;
  JSValue v27;
  unint64_t v28;
  double v29;
  JSC::VM *v30;
  WTF *v31;

  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v30 = v5;
  v6 = WebCore::IDLOperation<WebCore::JSSVGMatrix>::cast(*((_QWORD *)a2 + 5));
  if (!v6)
    return WebCore::throwThisTypeError((int)this, (int)&v30, "SVGMatrix", "rotate");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v27.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, v7);
    return (_BYTE *)JSC::VM::throwException(v5, this, v27);
  }
  v8 = (_DWORD *)v6;
  v9 = *(double **)(v6 + 24);
  v10 = (WTF *)*((_QWORD *)a2 + 6);
  v31 = v10;
  if ((unint64_t)v10 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)v10;
  }
  else if ((unint64_t)v10 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v31, this);
    v11 = v29;
  }
  else
  {
    *(_QWORD *)&v11 = (char *)v10 - 0x2000000000000;
  }
  if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
    return 0;
  if (v11 < -3.40282347e38)
  {
    *(double *)&v28 = -INFINITY;
  }
  else
  {
    if (v11 <= 3.40282347e38)
    {
      v12 = v11;
      v13 = v12 * 0.0174532925;
      goto LABEL_10;
    }
    *(double *)&v28 = INFINITY;
  }
  v13 = *(double *)&v28;
LABEL_10:
  v14 = *(WebCore::JSSVGMatrix ***)(16 * (*v8 & 0xFFFFFFFE) + 0x28);
  v15 = v9[4];
  v16 = v9[5];
  v17 = v9[6];
  v18 = v9[7];
  v19 = v9[8];
  v20 = v9[9];
  v21 = __sincos_stret(v13);
  v22 = WTF::fastMalloc((WTF *)0x50);
  *(_DWORD *)(v22 + 8) = 1;
  *(_QWORD *)(v22 + 16) = 0;
  *(_WORD *)(v22 + 24) = 0;
  *(double *)(v22 + 32) = v21.__sinval * v17 + v21.__cosval * v15;
  *(double *)(v22 + 40) = v21.__sinval * v18 + v21.__cosval * v16;
  *(double *)(v22 + 48) = v21.__cosval * v17 - v21.__sinval * v15;
  *(double *)(v22 + 56) = v21.__cosval * v18 - v21.__sinval * v16;
  *(double *)(v22 + 64) = v17 * 0.0 + v15 * 0.0 + v19;
  *(double *)(v22 + 72) = v18 * 0.0 + v16 * 0.0 + v20;
  *(_QWORD *)v22 = off_1E32EE1B8;
  v31 = (WTF *)v22;
  v24 = WebCore::toJSNewlyCreated(v14, &v31, v23);
  if (v31)
  {
    if (*((_DWORD *)v31 + 2) == 1)
      (*(void (**)(void))(*(_QWORD *)v31 + 8))();
    else
      --*((_DWORD *)v31 + 2);
  }
  return (_BYTE *)v24;
}

_BYTE *WebCore::jsSVGMatrixPrototypeFunction_rotateFromVector(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v5;
  unint64_t v6;
  JSC::JSGlobalObject *v7;
  _DWORD *v8;
  double *v9;
  unint64_t v10;
  double v11;
  float v12;
  unint64_t v13;
  JSC::VM *v14;
  double v15;
  float v16;
  WebCore::JSSVGMatrix **v17;
  double v18;
  double v19;
  double v20;
  double v21;
  long double v22;
  double v23;
  double v24;
  double v25;
  __double2 v26;
  uint64_t v27;
  int v28;
  _DWORD *v29;
  JSValue v32;
  int v33;
  double v34;
  double v35;
  JSC::VM *v36;
  _QWORD v37[2];
  int v38;
  JSC::VM *v39;
  char v40;

  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v36 = v5;
  v6 = WebCore::IDLOperation<WebCore::JSSVGMatrix>::cast(*((_QWORD *)a2 + 5));
  if (!v6)
    return WebCore::throwThisTypeError((int)this, (int)&v36, "SVGMatrix", "rotateFromVector");
  v39 = v5;
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v32.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, v7);
    return (_BYTE *)JSC::VM::throwException(v5, this, v32);
  }
  v8 = (_DWORD *)v6;
  v9 = *(double **)(v6 + 24);
  v10 = *((_QWORD *)a2 + 6);
  v37[0] = v10;
  if (v10 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)v10;
  }
  else if (v10 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v37, this);
    v11 = v34;
  }
  else
  {
    *(_QWORD *)&v11 = v10 - 0x2000000000000;
  }
  if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
    return 0;
  if (v11 < -3.40282347e38)
  {
    *(float *)&v33 = -INFINITY;
  }
  else
  {
    if (v11 <= 3.40282347e38)
    {
      v12 = v11;
      goto LABEL_10;
    }
    *(float *)&v33 = INFINITY;
  }
  v12 = *(float *)&v33;
LABEL_10:
  v13 = *((_QWORD *)a2 + 7);
  v37[0] = v13;
  v14 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v13 >= 0xFFFE000000000000)
  {
    v15 = (double)(int)v13;
  }
  else if (v13 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v37, this);
    v15 = v35;
  }
  else
  {
    *(_QWORD *)&v15 = v13 - 0x2000000000000;
  }
  if (*((_DWORD *)v14 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v14) & 1) != 0)
    return 0;
  if (v15 < -3.40282347e38)
  {
    v16 = -INFINITY;
  }
  else
  {
    v16 = INFINITY;
    if (v15 <= 3.40282347e38)
      v16 = v15;
  }
  v17 = *(WebCore::JSSVGMatrix ***)(16 * (*v8 & 0xFFFFFFFE) + 0x28);
  if (v12 == 0.0 || v16 == 0.0)
  {
    LOBYTE(v37[0]) = 33;
    v37[1] = 0;
    v28 = 1;
  }
  else
  {
    v18 = v9[4];
    v19 = v9[5];
    v20 = v9[6];
    v21 = v9[7];
    v22 = v12;
    v23 = v9[8];
    v24 = v9[9];
    v25 = atan2(v16, v22);
    v26 = __sincos_stret(v25);
    v27 = WTF::fastMalloc((WTF *)0x50);
    v28 = 0;
    *(_DWORD *)(v27 + 8) = 1;
    *(_QWORD *)v27 = off_1E32EE1B8;
    *(_QWORD *)(v27 + 16) = 0;
    *(_WORD *)(v27 + 24) = 0;
    *(double *)(v27 + 32) = v20 * v26.__sinval + v26.__cosval * v18;
    *(double *)(v27 + 40) = v21 * v26.__sinval + v26.__cosval * v19;
    *(double *)(v27 + 48) = v20 * v26.__cosval - v26.__sinval * v18;
    *(double *)(v27 + 56) = v21 * v26.__cosval - v26.__sinval * v19;
    *(double *)(v27 + 64) = v20 * 0.0 + v18 * 0.0 + v23;
    *(double *)(v27 + 72) = v21 * 0.0 + v19 * 0.0 + v24;
    v37[0] = v27;
  }
  v38 = v28;
  v29 = WebCore::toJSNewlyCreated<WebCore::IDLInterface<WebCore::SVGMatrix>,WebCore::ExceptionOr<WTF::Ref<WebCore::SVGMatrix,WTF::RawPtrTraits<WebCore::SVGMatrix>,WTF::DefaultRefDerefTraits<WebCore::SVGMatrix>>>>(this, v17, (WebCore::JSDOMGlobalObject *)&v39, (uint64_t)v37);
  if (v38 != -1)
    ((void (*)(char *, _QWORD *))off_1E32F8E38[v38])(&v40, v37);
  return v29;
}

_BYTE *WebCore::jsSVGMatrixPrototypeFunction_flipX(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  int v3;
  unint64_t v4;
  float64x2_t *v5;
  WebCore::JSSVGMatrix **v6;
  float64x2_t v7;
  float64x2_t v8;
  uint64_t v9;
  float64x2_t v10;
  float64x2_t v11;
  WebCore::JSDOMGlobalObject *v12;
  unint64_t v13;
  float64x2_t v15;
  uint64_t v16;
  WTF *v17;
  float64x2_t v18;
  float64x2_t v19;
  uint64_t v20;

  v3 = (int)this;
  v20 = *MEMORY[0x1E0C80C00];
  v16 = *((_QWORD *)this + 7);
  v4 = WebCore::IDLOperation<WebCore::JSSVGMatrix>::cast(*((_QWORD *)a2 + 5));
  if (!v4)
    return WebCore::throwThisTypeError(v3, (int)&v16, "SVGMatrix", "flipX");
  v5 = *(float64x2_t **)(v4 + 24);
  v6 = *(WebCore::JSSVGMatrix ***)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x28);
  v7 = v5[4];
  v8 = v5[2];
  v18 = v5[3];
  v19 = v7;
  v15 = vnegq_f64(v8);
  v9 = WTF::fastMalloc((WTF *)0x50);
  *(_DWORD *)(v9 + 8) = 1;
  *(_QWORD *)(v9 + 16) = 0;
  *(_WORD *)(v9 + 24) = 0;
  v10 = v18;
  v11 = v19;
  *(float64x2_t *)(v9 + 32) = v15;
  *(float64x2_t *)(v9 + 48) = v10;
  *(float64x2_t *)(v9 + 64) = v11;
  *(_QWORD *)v9 = off_1E32EE1B8;
  v17 = (WTF *)v9;
  v13 = WebCore::toJSNewlyCreated(v6, &v17, v12);
  if (v17)
  {
    if (*((_DWORD *)v17 + 2) == 1)
      (*(void (**)(void))(*(_QWORD *)v17 + 8))();
    else
      --*((_DWORD *)v17 + 2);
  }
  return (_BYTE *)v13;
}

_BYTE *WebCore::jsSVGMatrixPrototypeFunction_flipY(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  int v3;
  unint64_t v4;
  float64x2_t *v5;
  WebCore::JSSVGMatrix **v6;
  float64x2_t v7;
  float64x2_t v8;
  uint64_t v9;
  WebCore::JSDOMGlobalObject *v10;
  unint64_t v11;
  float64x2_t v13;
  uint64_t v14;
  WTF *v15;
  float64x2_t v16;
  float64x2_t v17;
  uint64_t v18;

  v3 = (int)this;
  v18 = *MEMORY[0x1E0C80C00];
  v14 = *((_QWORD *)this + 7);
  v4 = WebCore::IDLOperation<WebCore::JSSVGMatrix>::cast(*((_QWORD *)a2 + 5));
  if (!v4)
    return WebCore::throwThisTypeError(v3, (int)&v14, "SVGMatrix", "flipY");
  v5 = *(float64x2_t **)(v4 + 24);
  v6 = *(WebCore::JSSVGMatrix ***)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x28);
  v8 = v5[2];
  v7 = v5[3];
  v16 = v5[4];
  v17 = v8;
  v13 = vnegq_f64(v7);
  v9 = WTF::fastMalloc((WTF *)0x50);
  *(_DWORD *)(v9 + 8) = 1;
  *(_QWORD *)(v9 + 16) = 0;
  *(_WORD *)(v9 + 24) = 0;
  *(float64x2_t *)(v9 + 32) = v17;
  *(float64x2_t *)(v9 + 48) = v13;
  *(float64x2_t *)(v9 + 64) = v16;
  *(_QWORD *)v9 = off_1E32EE1B8;
  v15 = (WTF *)v9;
  v11 = WebCore::toJSNewlyCreated(v6, &v15, v10);
  if (v15)
  {
    if (*((_DWORD *)v15 + 2) == 1)
      (*(void (**)(void))(*(_QWORD *)v15 + 8))();
    else
      --*((_DWORD *)v15 + 2);
  }
  return (_BYTE *)v11;
}

_BYTE *WebCore::jsSVGMatrixPrototypeFunction_skewX(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v5;
  unint64_t v6;
  JSC::JSGlobalObject *v7;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;
  double v11;
  float v12;
  double v13;
  WebCore::JSSVGMatrix **v14;
  double v15;
  double v16;
  double v17;
  double v18;
  long double v19;
  double v20;
  double v21;
  long double v22;
  long double v23;
  uint64_t v24;
  WebCore::JSDOMGlobalObject *v25;
  unint64_t v26;
  JSValue v29;
  unint64_t v30;
  double v31;
  JSC::VM *v32;
  WTF *v33;
  __int128 v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v32 = v5;
  v6 = WebCore::IDLOperation<WebCore::JSSVGMatrix>::cast(*((_QWORD *)a2 + 5));
  if (!v6)
    return WebCore::throwThisTypeError((int)this, (int)&v32, "SVGMatrix", "skewX");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v29.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, v7);
    return (_BYTE *)JSC::VM::throwException(v5, this, v29);
  }
  v8 = (_DWORD *)v6;
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *((_QWORD *)a2 + 6);
  *(_QWORD *)&v34 = v10;
  if (v10 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)v10;
  }
  else if (v10 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v34, this);
    v11 = v31;
  }
  else
  {
    *(_QWORD *)&v11 = v10 - 0x2000000000000;
  }
  if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
    return 0;
  if (v11 < -3.40282347e38)
  {
    *(double *)&v30 = -INFINITY;
  }
  else
  {
    if (v11 <= 3.40282347e38)
    {
      v12 = v11;
      v13 = v12 * 0.0174532925;
      goto LABEL_10;
    }
    *(double *)&v30 = INFINITY;
  }
  v13 = *(double *)&v30;
LABEL_10:
  v14 = *(WebCore::JSSVGMatrix ***)(16 * (*v8 & 0xFFFFFFFE) + 0x28);
  v15 = *(double *)(v9 + 32);
  v16 = *(double *)(v9 + 40);
  v17 = *(double *)(v9 + 48);
  v18 = *(double *)(v9 + 56);
  v34 = *(_OWORD *)(v9 + 64);
  v19 = tan(v13);
  v20 = v15 + v17 * 0.0;
  v21 = v16 + v18 * 0.0;
  v22 = v17 + v19 * v15;
  v23 = v18 + v19 * v16;
  v24 = WTF::fastMalloc((WTF *)0x50);
  *(_DWORD *)(v24 + 8) = 1;
  *(_QWORD *)(v24 + 16) = 0;
  *(_WORD *)(v24 + 24) = 0;
  *(double *)(v24 + 32) = v20;
  *(double *)(v24 + 40) = v21;
  *(long double *)(v24 + 48) = v22;
  *(long double *)(v24 + 56) = v23;
  *(_OWORD *)(v24 + 64) = v34;
  *(_QWORD *)v24 = off_1E32EE1B8;
  v33 = (WTF *)v24;
  v26 = WebCore::toJSNewlyCreated(v14, &v33, v25);
  if (v33)
  {
    if (*((_DWORD *)v33 + 2) == 1)
      (*(void (**)(void))(*(_QWORD *)v33 + 8))();
    else
      --*((_DWORD *)v33 + 2);
  }
  return (_BYTE *)v26;
}

_BYTE *WebCore::jsSVGMatrixPrototypeFunction_skewY(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v5;
  unint64_t v6;
  JSC::JSGlobalObject *v7;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;
  double v11;
  float v12;
  double v13;
  WebCore::JSSVGMatrix **v14;
  double v15;
  double v16;
  double v17;
  double v18;
  long double v19;
  long double v20;
  long double v21;
  uint64_t v22;
  WebCore::JSDOMGlobalObject *v23;
  unint64_t v24;
  JSValue v27;
  unint64_t v28;
  double v29;
  JSC::VM *v30;
  WTF *v31;
  __int128 v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v30 = v5;
  v6 = WebCore::IDLOperation<WebCore::JSSVGMatrix>::cast(*((_QWORD *)a2 + 5));
  if (!v6)
    return WebCore::throwThisTypeError((int)this, (int)&v30, "SVGMatrix", "skewY");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v27.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, v7);
    return (_BYTE *)JSC::VM::throwException(v5, this, v27);
  }
  v8 = (_DWORD *)v6;
  v9 = *(_QWORD *)(v6 + 24);
  v10 = *((_QWORD *)a2 + 6);
  *(_QWORD *)&v32 = v10;
  if (v10 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)v10;
  }
  else if (v10 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v32, this);
    v11 = v29;
  }
  else
  {
    *(_QWORD *)&v11 = v10 - 0x2000000000000;
  }
  if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
    return 0;
  if (v11 < -3.40282347e38)
  {
    *(double *)&v28 = -INFINITY;
  }
  else
  {
    if (v11 <= 3.40282347e38)
    {
      v12 = v11;
      v13 = v12 * 0.0174532925;
      goto LABEL_10;
    }
    *(double *)&v28 = INFINITY;
  }
  v13 = *(double *)&v28;
LABEL_10:
  v14 = *(WebCore::JSSVGMatrix ***)(16 * (*v8 & 0xFFFFFFFE) + 0x28);
  v15 = *(double *)(v9 + 32);
  v16 = *(double *)(v9 + 40);
  v17 = *(double *)(v9 + 48);
  v18 = *(double *)(v9 + 56);
  v32 = *(_OWORD *)(v9 + 64);
  v19 = tan(v13);
  v20 = v15 + v19 * v17;
  v21 = v16 + v19 * v18;
  v22 = WTF::fastMalloc((WTF *)0x50);
  *(_DWORD *)(v22 + 8) = 1;
  *(_QWORD *)(v22 + 16) = 0;
  *(_WORD *)(v22 + 24) = 0;
  *(long double *)(v22 + 32) = v20;
  *(long double *)(v22 + 40) = v21;
  *(double *)(v22 + 48) = v17 + v15 * 0.0;
  *(double *)(v22 + 56) = v18 + v16 * 0.0;
  *(_OWORD *)(v22 + 64) = v32;
  *(_QWORD *)v22 = off_1E32EE1B8;
  v31 = (WTF *)v22;
  v24 = WebCore::toJSNewlyCreated(v14, &v31, v23);
  if (v31)
  {
    if (*((_DWORD *)v31 + 2) == 1)
      (*(void (**)(void))(*(_QWORD *)v31 + 8))();
    else
      --*((_DWORD *)v31 + 2);
  }
  return (_BYTE *)v24;
}

unint64_t WebCore::IDLOperation<WebCore::JSSVGMatrix>::cast(unint64_t result)
{
  uint64_t v1;
  _BOOL4 v2;
  char **v3;
  BOOL v4;

  if ((result & 0xFFFE000000000002) != 0)
    return 0;
  v1 = *(unsigned int *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x4C);
  v2 = *(_DWORD *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x4C) != 0;
  v3 = (char **)(16 * v1);
  if ((_DWORD)v1)
    v4 = v3 == &WebCore::JSSVGMatrix::s_info;
  else
    v4 = 1;
  if (!v4)
  {
    do
    {
      v3 = (char **)v3[2];
      v2 = v3 != 0;
    }
    while (v3 != &WebCore::JSSVGMatrix::s_info && v3 != 0);
  }
  if (!v2)
    return 0;
  return result;
}

_DWORD *WebCore::toJSNewlyCreated<WebCore::IDLInterface<WebCore::SVGMatrix>,WebCore::ExceptionOr<WTF::Ref<WebCore::SVGMatrix,WTF::RawPtrTraits<WebCore::SVGMatrix>,WTF::DefaultRefDerefTraits<WebCore::SVGMatrix>>>>(JSC *a1, WebCore::JSSVGMatrix **a2, WebCore::JSDOMGlobalObject *a3, uint64_t a4)
{
  int v4;
  WTF *v5;
  unint64_t v6;
  WTF::StringImpl *v9;
  uint64_t v10;
  _DWORD **v11;
  WTF *v12;
  WTF::StringImpl *v13;

  v4 = *(_DWORD *)(a4 + 16);
  if (!v4)
  {
    v5 = *(WTF **)a4;
    *(_QWORD *)a4 = 0;
    v12 = v5;
    v6 = WebCore::toJSNewlyCreated(a2, &v12, a3);
    if (v12)
    {
      if (*((_DWORD *)v12 + 2) == 1)
        (*(void (**)(void))(*(_QWORD *)v12 + 8))();
      else
        --*((_DWORD *)v12 + 2);
    }
    return (_DWORD *)v6;
  }
  if (v4 == 1)
  {
    LOBYTE(v12) = *(_BYTE *)a4;
    v9 = *(WTF::StringImpl **)(a4 + 8);
    *(_QWORD *)(a4 + 8) = 0;
    v13 = v9;
    if (!*(_QWORD *)(*(_QWORD *)a3 + 16))
    {
      WebCore::propagateExceptionSlowPath(a1, (JSC::VM **)a3, (unsigned __int8 *)&v12);
      v9 = v13;
    }
    v13 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v9 -= 2;
    }
    return 0;
  }
  v10 = std::__throw_bad_variant_access[abi:sn180100]();
  return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore9SVGMatrixENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(v10, v11);
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore9SVGMatrixENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore9SVGMatrixENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::jsSVGNumberListPrototypeFunction_clear(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  JSC::VM *v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSValue v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  JSC::VM *v20;
  char v21[8];
  WTF::StringImpl *v22;
  int v23;
  char v24;

  v4 = *((_QWORD *)a2 + 5);
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v20 = v5;
  if ((v4 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v20, "SVGNumberList", "clear");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSSVGNumberList::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSSVGNumberList::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v20, "SVGNumberList", "clear");
  v11 = *(_QWORD *)(v4 + 24);
  v12 = *(unsigned __int8 *)(v11 + 24);
  if (v12 == 1)
  {
    v13 = 4;
    v21[0] = 4;
    v14 = 1;
    v23 = 1;
    v22 = 0;
  }
  else
  {
    v21[0] = 1;
    v23 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
    WTF::Vector<WTF::Ref<WebCore::SVGNumber,WTF::RawPtrTraits<WebCore::SVGNumber>,WTF::DefaultRefDerefTraits<WebCore::SVGNumber>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((WTF *)(v11 + 32), 0);
    v15 = *(_QWORD *)(v11 + 16);
    if (v15)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 32))(v15, v11);
    v13 = 0;
    v14 = 0;
  }
  ((void (*)(char *, char *, JSC::CallFrame *))off_1E32F83C8[v14])(&v24, v21, a3);
  if (v12 != 1)
    return 10;
  v21[0] = v13;
  v22 = 0;
  if (!*((_QWORD *)v5 + 2))
  {
    v17.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v13, (JSC::JSGlobalObject *)&v22);
    JSC::VM::throwException(v5, this, v17);
    v19 = v22;
    v22 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v18);
      else
        *(_DWORD *)v19 -= 2;
    }
  }
  return 0;
}

_BYTE *WebCore::jsSVGNumberListPrototypeFunction_initialize(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 v20;
  char **v21;
  BOOL v22;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  int v27;
  unsigned __int8 v28;
  uint64_t v29;
  uint64_t v30;
  WTF *v31;
  int v32;
  int v33;
  uint64_t v34;
  _DWORD *v35;
  JSValue v38;
  JSValue v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  JSC::VM *v42;
  _DWORD *v43;
  WTF *v44;
  uint64_t v45;
  int v46;
  WTF *v47;
  JSC::VM *v48;
  WTF::StringImpl *v49;
  int v50;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v42 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v42, "SVGNumberList", "initialize");
  v11 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
  v12 = *(unsigned int *)(v11 + 0x4C);
  v13 = *(_DWORD *)(v11 + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSSVGNumberList::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSSVGNumberList::s_info && v14 != 0);
  }
  if (!v13)
    return WebCore::throwThisTypeError((int)this, (int)&v42, "SVGNumberList", "initialize");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v38.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v38);
  }
  v17 = *(_QWORD *)(v10 + 24);
  v18 = *((_QWORD *)a2 + 6);
  v48 = v9;
  if ((v18 & 0xFFFE000000000002) != 0)
    goto LABEL_24;
  v19 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
  v20 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
  v21 = (char **)(16 * v19);
  if ((_DWORD)v19)
    v22 = v21 == &WebCore::JSSVGNumber::s_info;
  else
    v22 = 1;
  if (!v22)
  {
    do
    {
      v21 = (char **)v21[2];
      v20 = v21 != 0;
    }
    while (v21 != &WebCore::JSSVGNumber::s_info && v21 != 0);
  }
  if (v20 && (v25 = *(_DWORD **)(v18 + 24)) != 0)
  {
    v26 = *(_QWORD *)(v11 + 40);
    ++v25[2];
    v43 = v25;
    v27 = *(unsigned __int8 *)(v17 + 24);
    if (v27 == 1)
    {
      v28 = 4;
      LOBYTE(v48) = 4;
      v29 = 1;
      v50 = 1;
      v49 = 0;
      LOBYTE(v44) = 4;
      v45 = 0;
      v46 = 1;
    }
    else
    {
      LOBYTE(v48) = 1;
      v50 = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17);
      WTF::Vector<WTF::Ref<WebCore::SVGNumber,WTF::RawPtrTraits<WebCore::SVGNumber>,WTF::DefaultRefDerefTraits<WebCore::SVGNumber>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((WTF *)(v17 + 32), 0);
      (*(void (**)(WTF **__return_ptr, uint64_t, _DWORD **))(*(_QWORD *)v17 + 80))(&v47, v17, &v43);
      v30 = *(_QWORD *)(v17 + 16);
      if (v30)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v30 + 32))(v30, v17);
      v29 = 0;
      v28 = v47;
      v44 = v47;
      v46 = 0;
    }
    ((void (*)(WTF **, JSC::VM **, JSC::CallFrame *))off_1E32F83C8[v29])(&v47, &v48, a3);
    if (v27 == 1)
    {
      LOBYTE(v48) = v28;
      v45 = 0;
      v49 = 0;
      if (!*((_QWORD *)v9 + 2))
      {
        v39.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v28, (JSC::JSGlobalObject *)&v49);
        JSC::VM::throwException(v9, this, v39);
        v41 = v49;
        v49 = 0;
        if (v41)
        {
          if (*(_DWORD *)v41 == 2)
            WTF::StringImpl::destroy(v41, v40);
          else
            *(_DWORD *)v41 -= 2;
        }
      }
      v24 = 0;
      v34 = 1;
    }
    else
    {
      v31 = v44;
      v44 = 0;
      v24 = WebCore::wrap<WebCore::SVGNumber>(v26, v31);
      v32 = *((_DWORD *)v31 + 2);
      v33 = v32 - 1;
      if (v32 == 1)
      {
        (*(void (**)(WTF *))(*(_QWORD *)v31 + 8))(v31);
        v34 = 0;
      }
      else
      {
        v34 = 0;
        *((_DWORD *)v31 + 2) = v33;
      }
    }
    ((void (*)(JSC::VM **, WTF **))off_1E32F9050[v34])(&v48, &v44);
    v46 = -1;
    v35 = v43;
    v43 = 0;
    if (v35)
    {
      if (v35[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v35 + 8))(v35);
      else
        --v35[2];
    }
  }
  else
  {
LABEL_24:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v48, 0, "newItem", 8, "SVGNumberList", 14, a8, "initialize", 11, "SVGNumber", 10);
    return 0;
  }
  return (_BYTE *)v24;
}

_BYTE *WebCore::jsSVGNumberListPrototypeFunction_getItem(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  _DWORD *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  unsigned __int8 v16;
  WTF *v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  JSValue v24;
  JSValue v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  JSC::VM *v28;
  WTF *v29;
  uint64_t v30;
  int v31;
  _DWORD v32[2];
  WTF *v33;
  char v34[8];
  WTF::StringImpl *v35;
  int v36;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v28 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v28, "SVGNumberList", "getItem");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSSVGNumberList::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSSVGNumberList::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v28, "SVGNumberList", "getItem");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v24.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v24);
  }
  v11 = *(_DWORD **)(v5 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v32);
  if (v32[1])
    return 0;
  v12 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  v13 = v32[0];
  v14 = v11[11];
  if (v14 <= v32[0])
  {
    v16 = 0;
    v34[0] = 0;
    v15 = 1;
    v36 = 1;
    v35 = 0;
    LOBYTE(v29) = 0;
    v30 = 0;
  }
  else
  {
    v34[0] = 1;
    v36 = 0;
    (*(void (**)(WTF **__return_ptr, _DWORD *, _QWORD))(*(_QWORD *)v11 + 48))(&v33, v11, v32[0]);
    v15 = 0;
    v16 = v33;
    v29 = v33;
  }
  v31 = v15;
  ((uint64_t (**)(WTF **, char *))off_1E32F83C8)[v15](&v33, v34);
  if (v14 <= v13)
  {
    v34[0] = v16;
    v30 = 0;
    v35 = 0;
    if (!*((_QWORD *)v4 + 2))
    {
      v25.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v16, (JSC::JSGlobalObject *)&v35);
      JSC::VM::throwException(v4, this, v25);
      v27 = v35;
      v35 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
          WTF::StringImpl::destroy(v27, v26);
        else
          *(_DWORD *)v27 -= 2;
      }
    }
    v18 = 0;
    v21 = 1;
  }
  else
  {
    v17 = v29;
    v29 = 0;
    v18 = WebCore::wrap<WebCore::SVGNumber>(v12, v17);
    v19 = *((_DWORD *)v17 + 2);
    v20 = v19 - 1;
    if (v19 == 1)
    {
      (*(void (**)(WTF *))(*(_QWORD *)v17 + 8))(v17);
      v21 = 0;
    }
    else
    {
      v21 = 0;
      *((_DWORD *)v17 + 2) = v20;
    }
  }
  ((void (*)(char *, WTF **))off_1E32F9050[v21])(v34, &v29);
  return (_BYTE *)v18;
}

_BYTE *WebCore::jsSVGNumberListPrototypeFunction_insertItemBefore(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  char **v20;
  BOOL v21;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  int v26;
  unsigned __int8 v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  WTF *v32;
  int v33;
  int v34;
  uint64_t v35;
  _DWORD *v36;
  JSValue v39;
  JSValue v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  JSC::VM *v43;
  _DWORD *v44;
  WTF *v45;
  uint64_t v46;
  int v47;
  _DWORD v48[2];
  WTF *v49;
  JSC::VM *v50;
  WTF::StringImpl *v51;
  int v52;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v43 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v43, "SVGNumberList", "insertItemBefore");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSSVGNumberList::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSSVGNumberList::s_info && v13 != 0);
  }
  if (!v12)
    return WebCore::throwThisTypeError((int)this, (int)&v43, "SVGNumberList", "insertItemBefore");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v39.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v39);
  }
  v16 = *(_QWORD *)(v10 + 24);
  v17 = *((_QWORD *)a2 + 6);
  v50 = v9;
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_24;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSSVGNumber::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSSVGNumber::s_info && v20 != 0);
  }
  if (v19 && (v24 = *(_DWORD **)(v17 + 24)) != 0)
  {
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v48);
    if (v48[1])
    {
      return 0;
    }
    else
    {
      v25 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
      ++v24[2];
      v44 = v24;
      v26 = *(unsigned __int8 *)(v16 + 24);
      if (v26 == 1)
      {
        v27 = 4;
        LOBYTE(v50) = 4;
        v28 = 1;
        v52 = 1;
        v51 = 0;
        LOBYTE(v45) = 4;
        v46 = 0;
        v47 = 1;
      }
      else
      {
        LOBYTE(v50) = 1;
        v52 = 0;
        v29 = *(_DWORD *)(v16 + 44);
        if (v29 >= v48[0])
          v30 = v48[0];
        else
          v30 = v29;
        (*(void (**)(WTF **__return_ptr, uint64_t, uint64_t, _DWORD **))(*(_QWORD *)v16 + 56))(&v49, v16, v30, &v44);
        v31 = *(_QWORD *)(v16 + 16);
        if (v31)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v31 + 32))(v31, v16);
        v28 = 0;
        v27 = v49;
        v45 = v49;
        v47 = 0;
      }
      ((uint64_t (**)(WTF **, char *))off_1E32F83C8)[v28](&v49, (char *)&v50);
      if (v26 == 1)
      {
        LOBYTE(v50) = v27;
        v46 = 0;
        v51 = 0;
        if (!*((_QWORD *)v9 + 2))
        {
          v40.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v27, (JSC::JSGlobalObject *)&v51);
          JSC::VM::throwException(v9, this, v40);
          v42 = v51;
          v51 = 0;
          if (v42)
          {
            if (*(_DWORD *)v42 == 2)
              WTF::StringImpl::destroy(v42, v41);
            else
              *(_DWORD *)v42 -= 2;
          }
        }
        v23 = 0;
        v35 = 1;
      }
      else
      {
        v32 = v45;
        v45 = 0;
        v23 = WebCore::wrap<WebCore::SVGNumber>(v25, v32);
        v33 = *((_DWORD *)v32 + 2);
        v34 = v33 - 1;
        if (v33 == 1)
        {
          (*(void (**)(WTF *))(*(_QWORD *)v32 + 8))(v32);
          v35 = 0;
        }
        else
        {
          v35 = 0;
          *((_DWORD *)v32 + 2) = v34;
        }
      }
      ((void (*)(JSC::VM **, WTF **))off_1E32F9050[v35])(&v50, &v45);
      v47 = -1;
      v36 = v44;
      v44 = 0;
      if (v36)
      {
        if (v36[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v36 + 8))(v36);
        else
          --v36[2];
      }
    }
  }
  else
  {
LABEL_24:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v50, 0, "newItem", 8, "SVGNumberList", 14, a8, "insertItemBefore", 17, "SVGNumber", 10);
    return 0;
  }
  return (_BYTE *)v23;
}

_BYTE *WebCore::jsSVGNumberListPrototypeFunction_replaceItem(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  char **v20;
  BOOL v21;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  unsigned __int8 v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  WTF *v32;
  int v33;
  int v34;
  uint64_t v35;
  _DWORD *v36;
  JSValue v39;
  JSValue v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WebCore *v43;
  JSC::JSGlobalObject *v44;
  JSC::CallFrame *v45;
  JSC::VM *v46;
  _DWORD *v47;
  _DWORD v48[2];
  WTF *v49;
  char v50[8];
  WTF::StringImpl *v51;
  int v52;
  WTF *v53;
  uint64_t v54;
  int v55;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v46 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v46, "SVGNumberList", "replaceItem");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSSVGNumberList::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSSVGNumberList::s_info && v13 != 0);
  }
  if (!v12)
    return WebCore::throwThisTypeError((int)this, (int)&v46, "SVGNumberList", "replaceItem");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v39.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v39);
  }
  v16 = *(_QWORD *)(v10 + 24);
  v17 = *((_QWORD *)a2 + 6);
  v53 = v9;
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_24;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSSVGNumber::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSSVGNumber::s_info && v20 != 0);
  }
  if (!v19 || (v24 = *(_DWORD **)(v17 + 24)) == 0)
  {
LABEL_24:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v53, 0, "newItem", 8, "SVGNumberList", 14, a8, "replaceItem", 12, "SVGNumber", 10);
    return 0;
  }
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v48);
  if (v48[1])
    return 0;
  v25 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
  ++v24[2];
  v47 = v24;
  if (*(_BYTE *)(v16 + 24) == 1)
  {
    v26 = 4;
    LOBYTE(v53) = 4;
    v27 = 1;
    v55 = 1;
    v54 = 0;
LABEL_34:
    v50[0] = v26;
    v29 = 1;
    v52 = 1;
    ((uint64_t (**)(WTF **, char *))off_1E32F83C8)[v27](&v49, (char *)&v53);
    v31 = 0;
    v51 = 0;
    LOBYTE(v53) = v26;
    v54 = 0;
    v30 = 1;
    v55 = 1;
    goto LABEL_35;
  }
  LOBYTE(v53) = 1;
  v55 = 0;
  if (*(_DWORD *)(v16 + 44) <= v48[0])
  {
    v26 = 0;
    v27 = 0;
    goto LABEL_34;
  }
  v50[0] = 1;
  v52 = 0;
  (*(void (**)(WTF **__return_ptr, uint64_t))(*(_QWORD *)v16 + 64))(&v49, v16);
  v28 = *(_QWORD *)(v16 + 16);
  if (v28)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v28 + 32))(v28, v16);
  v29 = 0;
  v30 = 0;
  v26 = v49;
  v53 = v49;
  v55 = 0;
  v31 = 1;
LABEL_35:
  ((uint64_t (**)(WTF **, char *))off_1E32F83C8)[v30](&v49, v50);
  if ((v31 & 1) != 0)
  {
    v32 = v53;
    v53 = 0;
    v23 = WebCore::wrap<WebCore::SVGNumber>(v25, v32);
    v33 = *((_DWORD *)v32 + 2);
    v34 = v33 - 1;
    if (v33 == 1)
    {
      (*(void (**)(WTF *))(*(_QWORD *)v32 + 8))(v32);
      v35 = 0;
    }
    else
    {
      v35 = 0;
      *((_DWORD *)v32 + 2) = v34;
    }
LABEL_38:
    ((void (*)(char *, WTF **))off_1E32F9050[v35])(v50, &v53);
    v55 = -1;
    v36 = v47;
    v47 = 0;
    if (v36)
    {
      if (v36[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v36 + 8))(v36);
      else
        --v36[2];
    }
    return (_BYTE *)v23;
  }
  if ((v29 & 1) != 0)
  {
    v50[0] = v26;
    v54 = 0;
    v51 = 0;
    if (!*((_QWORD *)v9 + 2))
    {
      v40.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v26, (JSC::JSGlobalObject *)&v51);
      JSC::VM::throwException(v9, this, v40);
      v42 = v51;
      v51 = 0;
      if (v42)
      {
        if (*(_DWORD *)v42 == 2)
          WTF::StringImpl::destroy(v42, v41);
        else
          *(_DWORD *)v42 -= 2;
      }
    }
    v23 = 0;
    v35 = 1;
    goto LABEL_38;
  }
  v43 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsSVGNumberListPrototypeFunction_removeItem(v43, v44, v45);
}

_BYTE *WebCore::jsSVGNumberListPrototypeFunction_removeItem(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  WTF *v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  JSValue v26;
  JSValue v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WebCore *v30;
  JSC::JSGlobalObject *v31;
  JSC::CallFrame *v32;
  JSC::VM *v33;
  _DWORD v34[2];
  WTF *v35;
  char v36[8];
  WTF::StringImpl *v37;
  int v38;
  WTF *v39;
  uint64_t v40;
  int v41;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v33 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v33, "SVGNumberList", "removeItem");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSSVGNumberList::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSSVGNumberList::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v33, "SVGNumberList", "removeItem");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v26.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v26);
  }
  v11 = *(_QWORD *)(v5 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v34);
  if (v34[1])
    return 0;
  v12 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  if (*(_BYTE *)(v11 + 24) == 1)
  {
    v13 = 4;
    LOBYTE(v39) = 4;
    v14 = 1;
    v41 = 1;
    v40 = 0;
LABEL_21:
    v36[0] = v13;
    v16 = 1;
    v38 = 1;
    ((uint64_t (**)(WTF **, char *))off_1E32F83C8)[v14](&v35, (char *)&v39);
    v18 = 0;
    v37 = 0;
    LOBYTE(v39) = v13;
    v40 = 0;
    v17 = 1;
    v41 = 1;
    goto LABEL_22;
  }
  LOBYTE(v39) = 1;
  v41 = 0;
  if (*(_DWORD *)(v11 + 44) <= v34[0])
  {
    v13 = 0;
    v14 = 0;
    goto LABEL_21;
  }
  v36[0] = 1;
  v38 = 0;
  (*(void (**)(WTF **__return_ptr, uint64_t))(*(_QWORD *)v11 + 72))(&v35, v11);
  v15 = *(_QWORD *)(v11 + 16);
  if (v15)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 32))(v15, v11);
  v16 = 0;
  v17 = 0;
  v13 = v35;
  v39 = v35;
  v41 = 0;
  v18 = 1;
LABEL_22:
  ((uint64_t (**)(WTF **, char *))off_1E32F83C8)[v17](&v35, v36);
  if ((v18 & 1) != 0)
  {
    v19 = v39;
    v39 = 0;
    v20 = WebCore::wrap<WebCore::SVGNumber>(v12, v19);
    v21 = *((_DWORD *)v19 + 2);
    v22 = v21 - 1;
    if (v21 == 1)
    {
      (*(void (**)(WTF *))(*(_QWORD *)v19 + 8))(v19);
      v23 = 0;
    }
    else
    {
      v23 = 0;
      *((_DWORD *)v19 + 2) = v22;
    }
LABEL_25:
    ((void (*)(char *, WTF **))off_1E32F9050[v23])(v36, &v39);
    return (_BYTE *)v20;
  }
  if ((v16 & 1) != 0)
  {
    v36[0] = v13;
    v40 = 0;
    v37 = 0;
    if (!*((_QWORD *)v4 + 2))
    {
      v27.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v13, (JSC::JSGlobalObject *)&v37);
      JSC::VM::throwException(v4, this, v27);
      v29 = v37;
      v37 = 0;
      if (v29)
      {
        if (*(_DWORD *)v29 == 2)
          WTF::StringImpl::destroy(v29, v28);
        else
          *(_DWORD *)v29 -= 2;
      }
    }
    v20 = 0;
    v23 = 1;
    goto LABEL_25;
  }
  v30 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsSVGNumberListPrototypeFunction_appendItem(v30, v31, v32);
}

_BYTE *WebCore::jsSVGNumberListPrototypeFunction_appendItem(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 v20;
  char **v21;
  BOOL v22;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  int v27;
  unsigned __int8 v28;
  uint64_t v29;
  uint64_t v30;
  WTF *v31;
  int v32;
  int v33;
  uint64_t v34;
  _DWORD *v35;
  JSValue v38;
  JSValue v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  JSC::VM *v42;
  _DWORD *v43;
  WTF *v44;
  uint64_t v45;
  int v46;
  WTF *v47;
  JSC::VM *v48;
  WTF::StringImpl *v49;
  int v50;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v42 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v42, "SVGNumberList", "appendItem");
  v11 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
  v12 = *(unsigned int *)(v11 + 0x4C);
  v13 = *(_DWORD *)(v11 + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSSVGNumberList::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSSVGNumberList::s_info && v14 != 0);
  }
  if (!v13)
    return WebCore::throwThisTypeError((int)this, (int)&v42, "SVGNumberList", "appendItem");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v38.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v38);
  }
  v17 = *(_QWORD *)(v10 + 24);
  v18 = *((_QWORD *)a2 + 6);
  v48 = v9;
  if ((v18 & 0xFFFE000000000002) != 0)
    goto LABEL_24;
  v19 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
  v20 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
  v21 = (char **)(16 * v19);
  if ((_DWORD)v19)
    v22 = v21 == &WebCore::JSSVGNumber::s_info;
  else
    v22 = 1;
  if (!v22)
  {
    do
    {
      v21 = (char **)v21[2];
      v20 = v21 != 0;
    }
    while (v21 != &WebCore::JSSVGNumber::s_info && v21 != 0);
  }
  if (v20 && (v25 = *(_DWORD **)(v18 + 24)) != 0)
  {
    v26 = *(_QWORD *)(v11 + 40);
    ++v25[2];
    v43 = v25;
    v27 = *(unsigned __int8 *)(v17 + 24);
    if (v27 == 1)
    {
      v28 = 4;
      LOBYTE(v48) = 4;
      v29 = 1;
      v50 = 1;
      v49 = 0;
      LOBYTE(v44) = 4;
      v45 = 0;
      v46 = 1;
    }
    else
    {
      LOBYTE(v48) = 1;
      v50 = 0;
      (*(void (**)(WTF **__return_ptr, uint64_t, _DWORD **, JSC::CallFrame *))(*(_QWORD *)v17 + 80))(&v47, v17, &v43, a3);
      v30 = *(_QWORD *)(v17 + 16);
      if (v30)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v30 + 32))(v30, v17);
      v29 = 0;
      v28 = v47;
      v44 = v47;
      v46 = 0;
    }
    ((void (*)(WTF **, JSC::VM **, JSC::CallFrame *))off_1E32F83C8[v29])(&v47, &v48, a3);
    if (v27 == 1)
    {
      LOBYTE(v48) = v28;
      v45 = 0;
      v49 = 0;
      if (!*((_QWORD *)v9 + 2))
      {
        v39.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v28, (JSC::JSGlobalObject *)&v49);
        JSC::VM::throwException(v9, this, v39);
        v41 = v49;
        v49 = 0;
        if (v41)
        {
          if (*(_DWORD *)v41 == 2)
            WTF::StringImpl::destroy(v41, v40);
          else
            *(_DWORD *)v41 -= 2;
        }
      }
      v24 = 0;
      v34 = 1;
    }
    else
    {
      v31 = v44;
      v44 = 0;
      v24 = WebCore::wrap<WebCore::SVGNumber>(v26, v31);
      v32 = *((_DWORD *)v31 + 2);
      v33 = v32 - 1;
      if (v32 == 1)
      {
        (*(void (**)(WTF *))(*(_QWORD *)v31 + 8))(v31);
        v34 = 0;
      }
      else
      {
        v34 = 0;
        *((_DWORD *)v31 + 2) = v33;
      }
    }
    ((void (*)(JSC::VM **, WTF **))off_1E32F9050[v34])(&v48, &v44);
    v46 = -1;
    v35 = v43;
    v43 = 0;
    if (v35)
    {
      if (v35[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v35 + 8))(v35);
      else
        --v35[2];
    }
  }
  else
  {
LABEL_24:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v48, 0, "newItem", 8, "SVGNumberList", 14, a8, "appendItem", 11, "SVGNumber", 10);
    return 0;
  }
  return (_BYTE *)v24;
}

WTF *WTF::Vector<WTF::Ref<WebCore::SVGNumber,WTF::RawPtrTraits<WebCore::SVGNumber>,WTF::DefaultRefDerefTraits<WebCore::SVGNumber>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(WTF *result, unint64_t a2)
{
  WTF *v3;
  WTF *v4;
  uint64_t v5;

  if (*((unsigned int *)result + 2) > a2)
  {
    v3 = result;
    if (*((unsigned int *)result + 3) > a2)
      result = (WTF *)WTF::Vector<WTF::Ref<WebCore::SVGNumber,WTF::RawPtrTraits<WebCore::SVGNumber>,WTF::DefaultRefDerefTraits<WebCore::SVGNumber>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(result, a2);
    v4 = *(WTF **)v3;
    if (a2)
    {
      if (*((_DWORD *)v3 + 2))
      {
        *((_DWORD *)v3 + 2) = a2;
        result = (WTF *)WTF::fastRealloc(v4, (void *)(8 * a2));
        *(_QWORD *)v3 = result;
        return result;
      }
      if (a2 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v5 = *((unsigned int *)v3 + 3);
      result = (WTF *)WTF::fastMalloc((WTF *)(8 * a2));
      *((_DWORD *)v3 + 2) = a2;
      *(_QWORD *)v3 = result;
      if (result != v4)
        result = (WTF *)memcpy(result, v4, 8 * v5);
    }
    if (v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        *((_DWORD *)v3 + 2) = 0;
      }
      return (WTF *)WTF::fastFree(v4, (void *)a2);
    }
  }
  return result;
}

_DWORD *WTF::Vector<WTF::Ref<WebCore::SVGNumber,WTF::RawPtrTraits<WebCore::SVGNumber>,WTF::DefaultRefDerefTraits<WebCore::SVGNumber>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(_DWORD *result, uint64_t a2)
{
  int v2;
  _DWORD *v3;
  uint64_t v4;
  _DWORD **v5;
  uint64_t v6;

  v2 = a2;
  v3 = result;
  v4 = result[3];
  if (v4 != a2)
  {
    v5 = (_DWORD **)(*(_QWORD *)result + 8 * a2);
    v6 = 8 * v4 - 8 * a2;
    do
    {
      result = *v5;
      *v5 = 0;
      if (result)
      {
        if (result[2] == 1)
          result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
        else
          --result[2];
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  v3[3] = v2;
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore9SVGNumberENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore9SVGNumberENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_BYTE *WebCore::jsSVGPathElementPrototypeFunction_getPathSegAtLength(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  WebCore::SVGPathElement *v10;
  unint64_t v11;
  double v12;
  double v13;
  float v14;
  uint64_t v15;
  void *v16;
  char *v17;
  const WebCore::SVGPathByteStream *v18;
  unsigned int SVGPathSegAtLengthFromSVGPathByteStream;
  JSC::VM *v21;
  uint64_t v22;

  v3 = (JSC::VM *)*((_QWORD *)this + 7);
  v21 = v3;
  v4 = *((_QWORD *)a2 + 5);
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v21, "SVGPathElement", "getPathSegAtLength");
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGPathElement::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGPathElement::s_info && v7 != 0);
  }
  if (!v6)
    return WebCore::throwThisTypeError((int)this, (int)&v21, "SVGPathElement", "getPathSegAtLength");
  v10 = *(WebCore::SVGPathElement **)(v4 + 24);
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v22 = 10;
LABEL_17:
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v22, this);
    v12 = v13;
    goto LABEL_18;
  }
  v11 = *((_QWORD *)a2 + 6);
  v22 = v11;
  if (v11 >= 0xFFFE000000000000)
  {
    v12 = (double)(int)v11;
    goto LABEL_18;
  }
  if (v11 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    goto LABEL_17;
  *(_QWORD *)&v12 = v11 - 0x2000000000000;
LABEL_18:
  if (*((_DWORD *)v3 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v3) & 1) != 0)
    return 0;
  if (v12 < -3.40282347e38)
  {
    v14 = -INFINITY;
  }
  else if (v12 <= 3.40282347e38)
  {
    v14 = v12;
  }
  else
  {
    v14 = INFINITY;
  }
  v15 = *(_QWORD *)(*((_QWORD *)v10 + 5) + 8);
  *(_DWORD *)(v15 + 24) += 2;
  WebCore::Document::updateLayout(v15, 6u, (uint64_t)v10);
  if (*(_DWORD *)(v15 + 24) == 2)
  {
    if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v15, v16);
  }
  else
  {
    *(_DWORD *)(v15 + 24) -= 2;
  }
  v17 = WebCore::SVGPathElement::pathByteStream(v10);
  SVGPathSegAtLengthFromSVGPathByteStream = WebCore::getSVGPathSegAtLengthFromSVGPathByteStream((WebCore *)v17, v18, v14);
  if ((SVGPathSegAtLengthFromSVGPathByteStream & 0x80000000) != 0)
    return (_BYTE *)(COERCE__INT64((double)SVGPathSegAtLengthFromSVGPathByteStream) + 0x2000000000000);
  else
    return (_BYTE *)(SVGPathSegAtLengthFromSVGPathByteStream | 0xFFFE000000000000);
}

_BYTE *WebCore::jsSVGPathElementPrototypeFunction_createSVGPathSegClosePath(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;

  v4 = *((_QWORD *)a2 + 5);
  v15 = *((_QWORD *)this + 7);
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v15, "SVGPathElement", "createSVGPathSegClosePath");
  v5 = 16 * (*(_DWORD *)v4 & 0xFFFFFFFE);
  v6 = *(unsigned int *)(v5 + 76);
  v7 = *(_DWORD *)(v5 + 76) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSSVGPathElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSSVGPathElement::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v15, "SVGPathElement", "createSVGPathSegClosePath");
  v11 = *(_QWORD *)(v5 + 40);
  v12 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)(v12 + 8) = 0;
  *(_QWORD *)(v12 + 16) = 0;
  *(_QWORD *)(v12 + 24) = 0;
  *(_DWORD *)(v12 + 8) = 1;
  *(_QWORD *)v12 = off_1E32FFD48;
  v13 = WebCore::wrap<WebCore::SVGPathSeg>((uint64_t)this, v11, (_DWORD *)v12);
  if (*(_DWORD *)(v12 + 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  else
    --*(_DWORD *)(v12 + 8);
  return (_BYTE *)v13;
}

_BYTE *WebCore::jsSVGPathElementPrototypeFunction_createSVGPathSegMovetoAbs(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  unint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  unint64_t v12;
  double v13;
  double v14;
  float v15;
  unint64_t v16;
  JSC::VM *v17;
  double v18;
  double v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v25;
  JSC::VM *v26;
  uint64_t v27;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v26 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v26, "SVGPathElement", "createSVGPathSegMovetoAbs");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSSVGPathElement::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSSVGPathElement::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v26, "SVGPathElement", "createSVGPathSegMovetoAbs");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v27 = 10;
LABEL_17:
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v27, this);
    v13 = v14;
    goto LABEL_18;
  }
  v12 = *((_QWORD *)a2 + 6);
  v27 = v12;
  if (v12 >= 0xFFFE000000000000)
  {
    v13 = (double)(int)v12;
    goto LABEL_18;
  }
  if (v12 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    goto LABEL_17;
  *(_QWORD *)&v13 = v12 - 0x2000000000000;
LABEL_18:
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v13 < -3.40282347e38)
  {
    v15 = -INFINITY;
  }
  else if (v13 <= 3.40282347e38)
  {
    v15 = v13;
  }
  else
  {
    v15 = INFINITY;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 3) >= 0xFFFFFFFFFFFFFFFELL)
  {
    v27 = 10;
    v17 = (JSC::VM *)*((_QWORD *)this + 7);
LABEL_28:
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v27, this);
    v18 = v19;
    goto LABEL_29;
  }
  v16 = *((_QWORD *)a2 + 7);
  v27 = v16;
  v17 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v16 >= 0xFFFE000000000000)
  {
    v18 = (double)(int)v16;
    goto LABEL_29;
  }
  if (v16 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    goto LABEL_28;
  *(_QWORD *)&v18 = v16 - 0x2000000000000;
LABEL_29:
  if (*((_DWORD *)v17 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v17) & 1) != 0)
    return 0;
  if (v18 < -3.40282347e38)
  {
    *(float *)&v25 = -INFINITY;
  }
  else
  {
    if (v18 <= 3.40282347e38)
    {
      v20 = v18;
      goto LABEL_33;
    }
    *(float *)&v25 = INFINITY;
  }
  v20 = *(float *)&v25;
LABEL_33:
  v21 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  v22 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v22 + 8) = 1;
  *(_QWORD *)(v22 + 16) = 0;
  *(_WORD *)(v22 + 24) = 0;
  *(float *)(v22 + 28) = v15;
  *(float *)(v22 + 32) = v20;
  *(_QWORD *)v22 = off_1E32FFF28;
  v23 = WebCore::wrap<WebCore::SVGPathSeg>((uint64_t)this, v21, (_DWORD *)v22);
  if (*(_DWORD *)(v22 + 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  else
    --*(_DWORD *)(v22 + 8);
  return (_BYTE *)v23;
}

_BYTE *WebCore::jsSVGPathElementPrototypeFunction_createSVGPathSegMovetoRel(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  unint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  unint64_t v12;
  double v13;
  double v14;
  float v15;
  unint64_t v16;
  JSC::VM *v17;
  double v18;
  double v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v25;
  JSC::VM *v26;
  uint64_t v27;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v26 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v26, "SVGPathElement", "createSVGPathSegMovetoRel");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSSVGPathElement::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSSVGPathElement::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v26, "SVGPathElement", "createSVGPathSegMovetoRel");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v27 = 10;
LABEL_17:
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v27, this);
    v13 = v14;
    goto LABEL_18;
  }
  v12 = *((_QWORD *)a2 + 6);
  v27 = v12;
  if (v12 >= 0xFFFE000000000000)
  {
    v13 = (double)(int)v12;
    goto LABEL_18;
  }
  if (v12 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    goto LABEL_17;
  *(_QWORD *)&v13 = v12 - 0x2000000000000;
LABEL_18:
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v13 < -3.40282347e38)
  {
    v15 = -INFINITY;
  }
  else if (v13 <= 3.40282347e38)
  {
    v15 = v13;
  }
  else
  {
    v15 = INFINITY;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 3) >= 0xFFFFFFFFFFFFFFFELL)
  {
    v27 = 10;
    v17 = (JSC::VM *)*((_QWORD *)this + 7);
LABEL_28:
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v27, this);
    v18 = v19;
    goto LABEL_29;
  }
  v16 = *((_QWORD *)a2 + 7);
  v27 = v16;
  v17 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v16 >= 0xFFFE000000000000)
  {
    v18 = (double)(int)v16;
    goto LABEL_29;
  }
  if (v16 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    goto LABEL_28;
  *(_QWORD *)&v18 = v16 - 0x2000000000000;
LABEL_29:
  if (*((_DWORD *)v17 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v17) & 1) != 0)
    return 0;
  if (v18 < -3.40282347e38)
  {
    *(float *)&v25 = -INFINITY;
  }
  else
  {
    if (v18 <= 3.40282347e38)
    {
      v20 = v18;
      goto LABEL_33;
    }
    *(float *)&v25 = INFINITY;
  }
  v20 = *(float *)&v25;
LABEL_33:
  v21 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  v22 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v22 + 8) = 1;
  *(_QWORD *)(v22 + 16) = 0;
  *(_WORD *)(v22 + 24) = 0;
  *(float *)(v22 + 28) = v15;
  *(float *)(v22 + 32) = v20;
  *(_QWORD *)v22 = off_1E32FFFC8;
  v23 = WebCore::wrap<WebCore::SVGPathSeg>((uint64_t)this, v21, (_DWORD *)v22);
  if (*(_DWORD *)(v22 + 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  else
    --*(_DWORD *)(v22 + 8);
  return (_BYTE *)v23;
}

_BYTE *WebCore::jsSVGPathElementPrototypeFunction_createSVGPathSegLinetoAbs(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  unint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  unint64_t v12;
  double v13;
  double v14;
  float v15;
  unint64_t v16;
  JSC::VM *v17;
  double v18;
  double v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v25;
  JSC::VM *v26;
  uint64_t v27;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v26 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v26, "SVGPathElement", "createSVGPathSegLinetoAbs");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSSVGPathElement::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSSVGPathElement::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v26, "SVGPathElement", "createSVGPathSegLinetoAbs");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v27 = 10;
LABEL_17:
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v27, this);
    v13 = v14;
    goto LABEL_18;
  }
  v12 = *((_QWORD *)a2 + 6);
  v27 = v12;
  if (v12 >= 0xFFFE000000000000)
  {
    v13 = (double)(int)v12;
    goto LABEL_18;
  }
  if (v12 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    goto LABEL_17;
  *(_QWORD *)&v13 = v12 - 0x2000000000000;
LABEL_18:
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v13 < -3.40282347e38)
  {
    v15 = -INFINITY;
  }
  else if (v13 <= 3.40282347e38)
  {
    v15 = v13;
  }
  else
  {
    v15 = INFINITY;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 3) >= 0xFFFFFFFFFFFFFFFELL)
  {
    v27 = 10;
    v17 = (JSC::VM *)*((_QWORD *)this + 7);
LABEL_28:
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v27, this);
    v18 = v19;
    goto LABEL_29;
  }
  v16 = *((_QWORD *)a2 + 7);
  v27 = v16;
  v17 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v16 >= 0xFFFE000000000000)
  {
    v18 = (double)(int)v16;
    goto LABEL_29;
  }
  if (v16 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    goto LABEL_28;
  *(_QWORD *)&v18 = v16 - 0x2000000000000;
LABEL_29:
  if (*((_DWORD *)v17 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v17) & 1) != 0)
    return 0;
  if (v18 < -3.40282347e38)
  {
    *(float *)&v25 = -INFINITY;
  }
  else
  {
    if (v18 <= 3.40282347e38)
    {
      v20 = v18;
      goto LABEL_33;
    }
    *(float *)&v25 = INFINITY;
  }
  v20 = *(float *)&v25;
LABEL_33:
  v21 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  v22 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v22 + 8) = 1;
  *(_QWORD *)(v22 + 16) = 0;
  *(_WORD *)(v22 + 24) = 0;
  *(float *)(v22 + 28) = v15;
  *(float *)(v22 + 32) = v20;
  *(_QWORD *)v22 = off_1E3300018;
  v23 = WebCore::wrap<WebCore::SVGPathSeg>((uint64_t)this, v21, (_DWORD *)v22);
  if (*(_DWORD *)(v22 + 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  else
    --*(_DWORD *)(v22 + 8);
  return (_BYTE *)v23;
}

_BYTE *WebCore::jsSVGPathElementPrototypeFunction_createSVGPathSegLinetoRel(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  unint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  unint64_t v12;
  double v13;
  double v14;
  float v15;
  unint64_t v16;
  JSC::VM *v17;
  double v18;
  double v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v25;
  JSC::VM *v26;
  uint64_t v27;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v26 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v26, "SVGPathElement", "createSVGPathSegLinetoRel");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSSVGPathElement::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSSVGPathElement::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v26, "SVGPathElement", "createSVGPathSegLinetoRel");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v27 = 10;
LABEL_17:
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v27, this);
    v13 = v14;
    goto LABEL_18;
  }
  v12 = *((_QWORD *)a2 + 6);
  v27 = v12;
  if (v12 >= 0xFFFE000000000000)
  {
    v13 = (double)(int)v12;
    goto LABEL_18;
  }
  if (v12 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    goto LABEL_17;
  *(_QWORD *)&v13 = v12 - 0x2000000000000;
LABEL_18:
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v13 < -3.40282347e38)
  {
    v15 = -INFINITY;
  }
  else if (v13 <= 3.40282347e38)
  {
    v15 = v13;
  }
  else
  {
    v15 = INFINITY;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 3) >= 0xFFFFFFFFFFFFFFFELL)
  {
    v27 = 10;
    v17 = (JSC::VM *)*((_QWORD *)this + 7);
LABEL_28:
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v27, this);
    v18 = v19;
    goto LABEL_29;
  }
  v16 = *((_QWORD *)a2 + 7);
  v27 = v16;
  v17 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v16 >= 0xFFFE000000000000)
  {
    v18 = (double)(int)v16;
    goto LABEL_29;
  }
  if (v16 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    goto LABEL_28;
  *(_QWORD *)&v18 = v16 - 0x2000000000000;
LABEL_29:
  if (*((_DWORD *)v17 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v17) & 1) != 0)
    return 0;
  if (v18 < -3.40282347e38)
  {
    *(float *)&v25 = -INFINITY;
  }
  else
  {
    if (v18 <= 3.40282347e38)
    {
      v20 = v18;
      goto LABEL_33;
    }
    *(float *)&v25 = INFINITY;
  }
  v20 = *(float *)&v25;
LABEL_33:
  v21 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  v22 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v22 + 8) = 1;
  *(_QWORD *)(v22 + 16) = 0;
  *(_WORD *)(v22 + 24) = 0;
  *(float *)(v22 + 28) = v15;
  *(float *)(v22 + 32) = v20;
  *(_QWORD *)v22 = off_1E3300068;
  v23 = WebCore::wrap<WebCore::SVGPathSeg>((uint64_t)this, v21, (_DWORD *)v22);
  if (*(_DWORD *)(v22 + 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  else
    --*(_DWORD *)(v22 + 8);
  return (_BYTE *)v23;
}

_BYTE *WebCore::jsSVGPathElementPrototypeFunction_createSVGPathSegCurvetoCubicAbs(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  unint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  unint64_t v12;
  double v13;
  double v14;
  float v15;
  unint64_t v16;
  JSC::VM *v17;
  double v18;
  double v19;
  float v20;
  unint64_t v21;
  JSC::VM *v22;
  double v23;
  double v24;
  float v25;
  unint64_t v26;
  JSC::VM *v27;
  double v28;
  double v29;
  float v30;
  unint64_t v31;
  JSC::VM *v32;
  double v33;
  double v34;
  _DWORD *v35;
  float v36;
  unint64_t v37;
  JSC::VM *v38;
  double v39;
  double v40;
  float v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  JSC::VM *v51;
  uint64_t v52;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v51 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v51, "SVGPathElement", "createSVGPathSegCurvetoCubicAbs");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSSVGPathElement::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSSVGPathElement::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v51, "SVGPathElement", "createSVGPathSegCurvetoCubicAbs");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v52 = 10;
LABEL_17:
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v52, this);
    v13 = v14;
    goto LABEL_18;
  }
  v12 = *((_QWORD *)a2 + 6);
  v52 = v12;
  if (v12 >= 0xFFFE000000000000)
  {
    v13 = (double)(int)v12;
    goto LABEL_18;
  }
  if (v12 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    goto LABEL_17;
  *(_QWORD *)&v13 = v12 - 0x2000000000000;
LABEL_18:
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v13 < -3.40282347e38)
  {
    v15 = -INFINITY;
  }
  else if (v13 <= 3.40282347e38)
  {
    v15 = v13;
  }
  else
  {
    v15 = INFINITY;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 3) >= 0xFFFFFFFFFFFFFFFELL)
  {
    v52 = 10;
    v17 = (JSC::VM *)*((_QWORD *)this + 7);
LABEL_28:
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v52, this);
    v18 = v19;
    goto LABEL_29;
  }
  v16 = *((_QWORD *)a2 + 7);
  v52 = v16;
  v17 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v16 >= 0xFFFE000000000000)
  {
    v18 = (double)(int)v16;
    goto LABEL_29;
  }
  if (v16 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    goto LABEL_28;
  *(_QWORD *)&v18 = v16 - 0x2000000000000;
LABEL_29:
  if (*((_DWORD *)v17 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v17) & 1) != 0)
    return 0;
  if (v18 < -3.40282347e38)
  {
    *(float *)&v46 = -INFINITY;
  }
  else
  {
    if (v18 <= 3.40282347e38)
    {
      v20 = v18;
      goto LABEL_33;
    }
    *(float *)&v46 = INFINITY;
  }
  v20 = *(float *)&v46;
LABEL_33:
  if ((unint64_t)(*((int *)a2 + 8) - 4) >= 0xFFFFFFFFFFFFFFFDLL)
  {
    v52 = 10;
    v22 = (JSC::VM *)*((_QWORD *)this + 7);
LABEL_38:
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v52, this);
    v23 = v24;
    goto LABEL_39;
  }
  v21 = *((_QWORD *)a2 + 8);
  v52 = v21;
  v22 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v21 >= 0xFFFE000000000000)
  {
    v23 = (double)(int)v21;
    goto LABEL_39;
  }
  if (v21 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    goto LABEL_38;
  *(_QWORD *)&v23 = v21 - 0x2000000000000;
LABEL_39:
  if (*((_DWORD *)v22 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v22) & 1) != 0)
    return 0;
  if (v23 < -3.40282347e38)
  {
    *(float *)&v47 = -INFINITY;
  }
  else
  {
    if (v23 <= 3.40282347e38)
    {
      v25 = v23;
      goto LABEL_43;
    }
    *(float *)&v47 = INFINITY;
  }
  v25 = *(float *)&v47;
LABEL_43:
  if ((unint64_t)(*((int *)a2 + 8) - 5) >= 0xFFFFFFFFFFFFFFFCLL)
  {
    v52 = 10;
    v27 = (JSC::VM *)*((_QWORD *)this + 7);
LABEL_48:
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v52, this);
    v28 = v29;
    goto LABEL_49;
  }
  v26 = *((_QWORD *)a2 + 9);
  v52 = v26;
  v27 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v26 >= 0xFFFE000000000000)
  {
    v28 = (double)(int)v26;
    goto LABEL_49;
  }
  if (v26 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    goto LABEL_48;
  *(_QWORD *)&v28 = v26 - 0x2000000000000;
LABEL_49:
  if (*((_DWORD *)v27 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v27) & 1) != 0)
    return 0;
  if (v28 < -3.40282347e38)
  {
    *(float *)&v48 = -INFINITY;
  }
  else
  {
    if (v28 <= 3.40282347e38)
    {
      v30 = v28;
      goto LABEL_53;
    }
    *(float *)&v48 = INFINITY;
  }
  v30 = *(float *)&v48;
LABEL_53:
  if ((unint64_t)(*((int *)a2 + 8) - 6) >= 0xFFFFFFFFFFFFFFFBLL)
  {
    v52 = 10;
    v32 = (JSC::VM *)*((_QWORD *)this + 7);
LABEL_58:
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v52, this);
    v33 = v34;
    goto LABEL_59;
  }
  v31 = *((_QWORD *)a2 + 10);
  v52 = v31;
  v32 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v31 >= 0xFFFE000000000000)
  {
    v33 = (double)(int)v31;
    goto LABEL_59;
  }
  if (v31 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    goto LABEL_58;
  *(_QWORD *)&v33 = v31 - 0x2000000000000;
LABEL_59:
  if (*((_DWORD *)v32 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v32) & 1) != 0)
    return 0;
  if (v33 < -3.40282347e38)
  {
    v35 = (_DWORD *)v5;
    *(float *)&v49 = -INFINITY;
  }
  else
  {
    v35 = (_DWORD *)v5;
    if (v33 <= 3.40282347e38)
    {
      v36 = v33;
      goto LABEL_63;
    }
    *(float *)&v49 = INFINITY;
  }
  v36 = *(float *)&v49;
LABEL_63:
  if ((unint64_t)(*((int *)a2 + 8) - 7) >= 0xFFFFFFFFFFFFFFFALL)
  {
    v52 = 10;
    v38 = (JSC::VM *)*((_QWORD *)this + 7);
LABEL_68:
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v52, this);
    v39 = v40;
    goto LABEL_69;
  }
  v37 = *((_QWORD *)a2 + 11);
  v52 = v37;
  v38 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v37 >= 0xFFFE000000000000)
  {
    v39 = (double)(int)v37;
    goto LABEL_69;
  }
  if (v37 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    goto LABEL_68;
  *(_QWORD *)&v39 = v37 - 0x2000000000000;
LABEL_69:
  if (*((_DWORD *)v38 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v38) & 1) != 0)
    return 0;
  if (v39 < -3.40282347e38)
  {
    *(float *)&v50 = -INFINITY;
  }
  else
  {
    if (v39 <= 3.40282347e38)
    {
      v41 = v39;
      goto LABEL_73;
    }
    *(float *)&v50 = INFINITY;
  }
  v41 = *(float *)&v50;
LABEL_73:
  v42 = *(_QWORD *)(16 * (*v35 & 0xFFFFFFFE) + 0x28);
  v43 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v43 + 8) = 1;
  *(_QWORD *)(v43 + 16) = 0;
  *(_WORD *)(v43 + 24) = 0;
  *(float *)(v43 + 28) = v15;
  *(float *)(v43 + 32) = v20;
  *(float *)(v43 + 36) = v25;
  *(float *)(v43 + 40) = v30;
  *(float *)(v43 + 44) = v36;
  *(float *)(v43 + 48) = v41;
  *(_QWORD *)v43 = off_1E33001A8;
  v44 = WebCore::wrap<WebCore::SVGPathSeg>((uint64_t)this, v42, (_DWORD *)v43);
  if (*(_DWORD *)(v43 + 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  else
    --*(_DWORD *)(v43 + 8);
  return (_BYTE *)v44;
}

_BYTE *WebCore::jsSVGPathElementPrototypeFunction_createSVGPathSegCurvetoCubicRel(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  unint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  unint64_t v12;
  double v13;
  double v14;
  float v15;
  unint64_t v16;
  JSC::VM *v17;
  double v18;
  double v19;
  float v20;
  unint64_t v21;
  JSC::VM *v22;
  double v23;
  double v24;
  float v25;
  unint64_t v26;
  JSC::VM *v27;
  double v28;
  double v29;
  float v30;
  unint64_t v31;
  JSC::VM *v32;
  double v33;
  double v34;
  _DWORD *v35;
  float v36;
  unint64_t v37;
  JSC::VM *v38;
  double v39;
  double v40;
  float v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  JSC::VM *v51;
  uint64_t v52;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v51 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v51, "SVGPathElement", "createSVGPathSegCurvetoCubicRel");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSSVGPathElement::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSSVGPathElement::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v51, "SVGPathElement", "createSVGPathSegCurvetoCubicRel");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v52 = 10;
LABEL_17:
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v52, this);
    v13 = v14;
    goto LABEL_18;
  }
  v12 = *((_QWORD *)a2 + 6);
  v52 = v12;
  if (v12 >= 0xFFFE000000000000)
  {
    v13 = (double)(int)v12;
    goto LABEL_18;
  }
  if (v12 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    goto LABEL_17;
  *(_QWORD *)&v13 = v12 - 0x2000000000000;
LABEL_18:
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v13 < -3.40282347e38)
  {
    v15 = -INFINITY;
  }
  else if (v13 <= 3.40282347e38)
  {
    v15 = v13;
  }
  else
  {
    v15 = INFINITY;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 3) >= 0xFFFFFFFFFFFFFFFELL)
  {
    v52 = 10;
    v17 = (JSC::VM *)*((_QWORD *)this + 7);
LABEL_28:
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v52, this);
    v18 = v19;
    goto LABEL_29;
  }
  v16 = *((_QWORD *)a2 + 7);
  v52 = v16;
  v17 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v16 >= 0xFFFE000000000000)
  {
    v18 = (double)(int)v16;
    goto LABEL_29;
  }
  if (v16 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    goto LABEL_28;
  *(_QWORD *)&v18 = v16 - 0x2000000000000;
LABEL_29:
  if (*((_DWORD *)v17 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v17) & 1) != 0)
    return 0;
  if (v18 < -3.40282347e38)
  {
    *(float *)&v46 = -INFINITY;
  }
  else
  {
    if (v18 <= 3.40282347e38)
    {
      v20 = v18;
      goto LABEL_33;
    }
    *(float *)&v46 = INFINITY;
  }
  v20 = *(float *)&v46;
LABEL_33:
  if ((unint64_t)(*((int *)a2 + 8) - 4) >= 0xFFFFFFFFFFFFFFFDLL)
  {
    v52 = 10;
    v22 = (JSC::VM *)*((_QWORD *)this + 7);
LABEL_38:
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v52, this);
    v23 = v24;
    goto LABEL_39;
  }
  v21 = *((_QWORD *)a2 + 8);
  v52 = v21;
  v22 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v21 >= 0xFFFE000000000000)
  {
    v23 = (double)(int)v21;
    goto LABEL_39;
  }
  if (v21 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    goto LABEL_38;
  *(_QWORD *)&v23 = v21 - 0x2000000000000;
LABEL_39:
  if (*((_DWORD *)v22 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v22) & 1) != 0)
    return 0;
  if (v23 < -3.40282347e38)
  {
    *(float *)&v47 = -INFINITY;
  }
  else
  {
    if (v23 <= 3.40282347e38)
    {
      v25 = v23;
      goto LABEL_43;
    }
    *(float *)&v47 = INFINITY;
  }
  v25 = *(float *)&v47;
LABEL_43:
  if ((unint64_t)(*((int *)a2 + 8) - 5) >= 0xFFFFFFFFFFFFFFFCLL)
  {
    v52 = 10;
    v27 = (JSC::VM *)*((_QWORD *)this + 7);
LABEL_48:
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v52, this);
    v28 = v29;
    goto LABEL_49;
  }
  v26 = *((_QWORD *)a2 + 9);
  v52 = v26;
  v27 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v26 >= 0xFFFE000000000000)
  {
    v28 = (double)(int)v26;
    goto LABEL_49;
  }
  if (v26 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    goto LABEL_48;
  *(_QWORD *)&v28 = v26 - 0x2000000000000;
LABEL_49:
  if (*((_DWORD *)v27 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v27) & 1) != 0)
    return 0;
  if (v28 < -3.40282347e38)
  {
    *(float *)&v48 = -INFINITY;
  }
  else
  {
    if (v28 <= 3.40282347e38)
    {
      v30 = v28;
      goto LABEL_53;
    }
    *(float *)&v48 = INFINITY;
  }
  v30 = *(float *)&v48;
LABEL_53:
  if ((unint64_t)(*((int *)a2 + 8) - 6) >= 0xFFFFFFFFFFFFFFFBLL)
  {
    v52 = 10;
    v32 = (JSC::VM *)*((_QWORD *)this + 7);
LABEL_58:
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v52, this);
    v33 = v34;
    goto LABEL_59;
  }
  v31 = *((_QWORD *)a2 + 10);
  v52 = v31;
  v32 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v31 >= 0xFFFE000000000000)
  {
    v33 = (double)(int)v31;
    goto LABEL_59;
  }
  if (v31 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    goto LABEL_58;
  *(_QWORD *)&v33 = v31 - 0x2000000000000;
LABEL_59:
  if (*((_DWORD *)v32 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v32) & 1) != 0)
    return 0;
  if (v33 < -3.40282347e38)
  {
    v35 = (_DWORD *)v5;
    *(float *)&v49 = -INFINITY;
  }
  else
  {
    v35 = (_DWORD *)v5;
    if (v33 <= 3.40282347e38)
    {
      v36 = v33;
      goto LABEL_63;
    }
    *(float *)&v49 = INFINITY;
  }
  v36 = *(float *)&v49;
LABEL_63:
  if ((unint64_t)(*((int *)a2 + 8) - 7) >= 0xFFFFFFFFFFFFFFFALL)
  {
    v52 = 10;
    v38 = (JSC::VM *)*((_QWORD *)this + 7);
LABEL_68:
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v52, this);
    v39 = v40;
    goto LABEL_69;
  }
  v37 = *((_QWORD *)a2 + 11);
  v52 = v37;
  v38 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v37 >= 0xFFFE000000000000)
  {
    v39 = (double)(int)v37;
    goto LABEL_69;
  }
  if (v37 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    goto LABEL_68;
  *(_QWORD *)&v39 = v37 - 0x2000000000000;
LABEL_69:
  if (*((_DWORD *)v38 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v38) & 1) != 0)
    return 0;
  if (v39 < -3.40282347e38)
  {
    *(float *)&v50 = -INFINITY;
  }
  else
  {
    if (v39 <= 3.40282347e38)
    {
      v41 = v39;
      goto LABEL_73;
    }
    *(float *)&v50 = INFINITY;
  }
  v41 = *(float *)&v50;
LABEL_73:
  v42 = *(_QWORD *)(16 * (*v35 & 0xFFFFFFFE) + 0x28);
  v43 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v43 + 8) = 1;
  *(_QWORD *)(v43 + 16) = 0;
  *(_WORD *)(v43 + 24) = 0;
  *(float *)(v43 + 28) = v15;
  *(float *)(v43 + 32) = v20;
  *(float *)(v43 + 36) = v25;
  *(float *)(v43 + 40) = v30;
  *(float *)(v43 + 44) = v36;
  *(float *)(v43 + 48) = v41;
  *(_QWORD *)v43 = off_1E3300248;
  v44 = WebCore::wrap<WebCore::SVGPathSeg>((uint64_t)this, v42, (_DWORD *)v43);
  if (*(_DWORD *)(v43 + 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  else
    --*(_DWORD *)(v43 + 8);
  return (_BYTE *)v44;
}

_BYTE *WebCore::jsSVGPathElementPrototypeFunction_createSVGPathSegCurvetoQuadraticAbs(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  unint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  unint64_t v12;
  double v13;
  double v14;
  float v15;
  unint64_t v16;
  JSC::VM *v17;
  double v18;
  double v19;
  float v20;
  unint64_t v21;
  JSC::VM *v22;
  double v23;
  double v24;
  float v25;
  unint64_t v26;
  JSC::VM *v27;
  double v28;
  double v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int v35;
  int v36;
  int v37;
  JSC::VM *v38;
  uint64_t v39;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v38 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v38, "SVGPathElement", "createSVGPathSegCurvetoQuadraticAbs");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSSVGPathElement::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSSVGPathElement::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v38, "SVGPathElement", "createSVGPathSegCurvetoQuadraticAbs");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v39 = 10;
LABEL_17:
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v39, this);
    v13 = v14;
    goto LABEL_18;
  }
  v12 = *((_QWORD *)a2 + 6);
  v39 = v12;
  if (v12 >= 0xFFFE000000000000)
  {
    v13 = (double)(int)v12;
    goto LABEL_18;
  }
  if (v12 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    goto LABEL_17;
  *(_QWORD *)&v13 = v12 - 0x2000000000000;
LABEL_18:
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v13 < -3.40282347e38)
  {
    v15 = -INFINITY;
  }
  else if (v13 <= 3.40282347e38)
  {
    v15 = v13;
  }
  else
  {
    v15 = INFINITY;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 3) >= 0xFFFFFFFFFFFFFFFELL)
  {
    v39 = 10;
    v17 = (JSC::VM *)*((_QWORD *)this + 7);
LABEL_28:
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v39, this);
    v18 = v19;
    goto LABEL_29;
  }
  v16 = *((_QWORD *)a2 + 7);
  v39 = v16;
  v17 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v16 >= 0xFFFE000000000000)
  {
    v18 = (double)(int)v16;
    goto LABEL_29;
  }
  if (v16 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    goto LABEL_28;
  *(_QWORD *)&v18 = v16 - 0x2000000000000;
LABEL_29:
  if (*((_DWORD *)v17 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v17) & 1) != 0)
    return 0;
  if (v18 < -3.40282347e38)
  {
    *(float *)&v35 = -INFINITY;
  }
  else
  {
    if (v18 <= 3.40282347e38)
    {
      v20 = v18;
      goto LABEL_33;
    }
    *(float *)&v35 = INFINITY;
  }
  v20 = *(float *)&v35;
LABEL_33:
  if ((unint64_t)(*((int *)a2 + 8) - 4) >= 0xFFFFFFFFFFFFFFFDLL)
  {
    v39 = 10;
    v22 = (JSC::VM *)*((_QWORD *)this + 7);
LABEL_38:
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v39, this);
    v23 = v24;
    goto LABEL_39;
  }
  v21 = *((_QWORD *)a2 + 8);
  v39 = v21;
  v22 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v21 >= 0xFFFE000000000000)
  {
    v23 = (double)(int)v21;
    goto LABEL_39;
  }
  if (v21 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    goto LABEL_38;
  *(_QWORD *)&v23 = v21 - 0x2000000000000;
LABEL_39:
  if (*((_DWORD *)v22 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v22) & 1) != 0)
    return 0;
  if (v23 < -3.40282347e38)
  {
    *(float *)&v36 = -INFINITY;
  }
  else
  {
    if (v23 <= 3.40282347e38)
    {
      v25 = v23;
      goto LABEL_43;
    }
    *(float *)&v36 = INFINITY;
  }
  v25 = *(float *)&v36;
LABEL_43:
  if ((unint64_t)(*((int *)a2 + 8) - 5) >= 0xFFFFFFFFFFFFFFFCLL)
  {
    v39 = 10;
    v27 = (JSC::VM *)*((_QWORD *)this + 7);
LABEL_48:
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v39, this);
    v28 = v29;
    goto LABEL_49;
  }
  v26 = *((_QWORD *)a2 + 9);
  v39 = v26;
  v27 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v26 >= 0xFFFE000000000000)
  {
    v28 = (double)(int)v26;
    goto LABEL_49;
  }
  if (v26 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    goto LABEL_48;
  *(_QWORD *)&v28 = v26 - 0x2000000000000;
LABEL_49:
  if (*((_DWORD *)v27 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v27) & 1) != 0)
    return 0;
  if (v28 < -3.40282347e38)
  {
    *(float *)&v37 = -INFINITY;
  }
  else
  {
    if (v28 <= 3.40282347e38)
    {
      v30 = v28;
      goto LABEL_53;
    }
    *(float *)&v37 = INFINITY;
  }
  v30 = *(float *)&v37;
LABEL_53:
  v31 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  v32 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v32 + 8) = 1;
  *(_QWORD *)(v32 + 16) = 0;
  *(_WORD *)(v32 + 24) = 0;
  *(float *)(v32 + 28) = v15;
  *(float *)(v32 + 32) = v20;
  *(float *)(v32 + 36) = v25;
  *(float *)(v32 + 40) = v30;
  *(_QWORD *)v32 = off_1E33000B8;
  v33 = WebCore::wrap<WebCore::SVGPathSeg>((uint64_t)this, v31, (_DWORD *)v32);
  if (*(_DWORD *)(v32 + 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  else
    --*(_DWORD *)(v32 + 8);
  return (_BYTE *)v33;
}

_BYTE *WebCore::jsSVGPathElementPrototypeFunction_createSVGPathSegCurvetoQuadraticRel(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  unint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  unint64_t v12;
  double v13;
  double v14;
  float v15;
  unint64_t v16;
  JSC::VM *v17;
  double v18;
  double v19;
  float v20;
  unint64_t v21;
  JSC::VM *v22;
  double v23;
  double v24;
  float v25;
  unint64_t v26;
  JSC::VM *v27;
  double v28;
  double v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int v35;
  int v36;
  int v37;
  JSC::VM *v38;
  uint64_t v39;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v38 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v38, "SVGPathElement", "createSVGPathSegCurvetoQuadraticRel");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSSVGPathElement::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSSVGPathElement::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v38, "SVGPathElement", "createSVGPathSegCurvetoQuadraticRel");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v39 = 10;
LABEL_17:
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v39, this);
    v13 = v14;
    goto LABEL_18;
  }
  v12 = *((_QWORD *)a2 + 6);
  v39 = v12;
  if (v12 >= 0xFFFE000000000000)
  {
    v13 = (double)(int)v12;
    goto LABEL_18;
  }
  if (v12 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    goto LABEL_17;
  *(_QWORD *)&v13 = v12 - 0x2000000000000;
LABEL_18:
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v13 < -3.40282347e38)
  {
    v15 = -INFINITY;
  }
  else if (v13 <= 3.40282347e38)
  {
    v15 = v13;
  }
  else
  {
    v15 = INFINITY;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 3) >= 0xFFFFFFFFFFFFFFFELL)
  {
    v39 = 10;
    v17 = (JSC::VM *)*((_QWORD *)this + 7);
LABEL_28:
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v39, this);
    v18 = v19;
    goto LABEL_29;
  }
  v16 = *((_QWORD *)a2 + 7);
  v39 = v16;
  v17 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v16 >= 0xFFFE000000000000)
  {
    v18 = (double)(int)v16;
    goto LABEL_29;
  }
  if (v16 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    goto LABEL_28;
  *(_QWORD *)&v18 = v16 - 0x2000000000000;
LABEL_29:
  if (*((_DWORD *)v17 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v17) & 1) != 0)
    return 0;
  if (v18 < -3.40282347e38)
  {
    *(float *)&v35 = -INFINITY;
  }
  else
  {
    if (v18 <= 3.40282347e38)
    {
      v20 = v18;
      goto LABEL_33;
    }
    *(float *)&v35 = INFINITY;
  }
  v20 = *(float *)&v35;
LABEL_33:
  if ((unint64_t)(*((int *)a2 + 8) - 4) >= 0xFFFFFFFFFFFFFFFDLL)
  {
    v39 = 10;
    v22 = (JSC::VM *)*((_QWORD *)this + 7);
LABEL_38:
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v39, this);
    v23 = v24;
    goto LABEL_39;
  }
  v21 = *((_QWORD *)a2 + 8);
  v39 = v21;
  v22 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v21 >= 0xFFFE000000000000)
  {
    v23 = (double)(int)v21;
    goto LABEL_39;
  }
  if (v21 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    goto LABEL_38;
  *(_QWORD *)&v23 = v21 - 0x2000000000000;
LABEL_39:
  if (*((_DWORD *)v22 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v22) & 1) != 0)
    return 0;
  if (v23 < -3.40282347e38)
  {
    *(float *)&v36 = -INFINITY;
  }
  else
  {
    if (v23 <= 3.40282347e38)
    {
      v25 = v23;
      goto LABEL_43;
    }
    *(float *)&v36 = INFINITY;
  }
  v25 = *(float *)&v36;
LABEL_43:
  if ((unint64_t)(*((int *)a2 + 8) - 5) >= 0xFFFFFFFFFFFFFFFCLL)
  {
    v39 = 10;
    v27 = (JSC::VM *)*((_QWORD *)this + 7);
LABEL_48:
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v39, this);
    v28 = v29;
    goto LABEL_49;
  }
  v26 = *((_QWORD *)a2 + 9);
  v39 = v26;
  v27 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v26 >= 0xFFFE000000000000)
  {
    v28 = (double)(int)v26;
    goto LABEL_49;
  }
  if (v26 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    goto LABEL_48;
  *(_QWORD *)&v28 = v26 - 0x2000000000000;
LABEL_49:
  if (*((_DWORD *)v27 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v27) & 1) != 0)
    return 0;
  if (v28 < -3.40282347e38)
  {
    *(float *)&v37 = -INFINITY;
  }
  else
  {
    if (v28 <= 3.40282347e38)
    {
      v30 = v28;
      goto LABEL_53;
    }
    *(float *)&v37 = INFINITY;
  }
  v30 = *(float *)&v37;
LABEL_53:
  v31 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  v32 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v32 + 8) = 1;
  *(_QWORD *)(v32 + 16) = 0;
  *(_WORD *)(v32 + 24) = 0;
  *(float *)(v32 + 28) = v15;
  *(float *)(v32 + 32) = v20;
  *(float *)(v32 + 36) = v25;
  *(float *)(v32 + 40) = v30;
  *(_QWORD *)v32 = off_1E3300158;
  v33 = WebCore::wrap<WebCore::SVGPathSeg>((uint64_t)this, v31, (_DWORD *)v32);
  if (*(_DWORD *)(v32 + 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  else
    --*(_DWORD *)(v32 + 8);
  return (_BYTE *)v33;
}

_BYTE *WebCore::jsSVGPathElementPrototypeFunction_createSVGPathSegArcAbs(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  unint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  unint64_t v12;
  double v13;
  double v14;
  float v15;
  unint64_t v16;
  JSC::VM *v17;
  double v18;
  double v19;
  float v20;
  unint64_t v21;
  JSC::VM *v22;
  double v23;
  double v24;
  float v25;
  unint64_t v26;
  JSC::VM *v27;
  double v28;
  double v29;
  float v30;
  unint64_t v31;
  JSC::VM *v32;
  double v33;
  double v34;
  float v35;
  uint64_t v36;
  unint64_t v37;
  JSC::VM *v38;
  double v39;
  int v40;
  uint64_t v41;
  int *v42;
  int v43;
  BOOL v44;
  unint64_t v45;
  JSC::VM *v46;
  double v47;
  _DWORD *v48;
  int v49;
  uint64_t v50;
  int *v51;
  int v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  int v58;
  int v59;
  int v60;
  int v61;
  BOOL v62;
  BOOL v63;
  JSC::VM *v64;
  uint64_t v65;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v64 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v64, "SVGPathElement", "createSVGPathSegArcAbs");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSSVGPathElement::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSSVGPathElement::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v64, "SVGPathElement", "createSVGPathSegArcAbs");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v65 = 10;
LABEL_17:
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v65, this);
    v13 = v14;
    goto LABEL_18;
  }
  v12 = *((_QWORD *)a2 + 6);
  v65 = v12;
  if (v12 >= 0xFFFE000000000000)
  {
    v13 = (double)(int)v12;
    goto LABEL_18;
  }
  if (v12 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    goto LABEL_17;
  *(_QWORD *)&v13 = v12 - 0x2000000000000;
LABEL_18:
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v13 < -3.40282347e38)
  {
    v15 = -INFINITY;
  }
  else if (v13 <= 3.40282347e38)
  {
    v15 = v13;
  }
  else
  {
    v15 = INFINITY;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 3) >= 0xFFFFFFFFFFFFFFFELL)
  {
    v65 = 10;
    v17 = (JSC::VM *)*((_QWORD *)this + 7);
LABEL_28:
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v65, this);
    v18 = v19;
    goto LABEL_29;
  }
  v16 = *((_QWORD *)a2 + 7);
  v65 = v16;
  v17 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v16 >= 0xFFFE000000000000)
  {
    v18 = (double)(int)v16;
    goto LABEL_29;
  }
  if (v16 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    goto LABEL_28;
  *(_QWORD *)&v18 = v16 - 0x2000000000000;
LABEL_29:
  if (*((_DWORD *)v17 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v17) & 1) != 0)
    return 0;
  if (v18 < -3.40282347e38)
  {
    *(float *)&v58 = -INFINITY;
  }
  else
  {
    if (v18 <= 3.40282347e38)
    {
      v20 = v18;
      goto LABEL_33;
    }
    *(float *)&v58 = INFINITY;
  }
  v20 = *(float *)&v58;
LABEL_33:
  if ((unint64_t)(*((int *)a2 + 8) - 4) >= 0xFFFFFFFFFFFFFFFDLL)
  {
    v65 = 10;
    v22 = (JSC::VM *)*((_QWORD *)this + 7);
LABEL_38:
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v65, this);
    v23 = v24;
    goto LABEL_39;
  }
  v21 = *((_QWORD *)a2 + 8);
  v65 = v21;
  v22 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v21 >= 0xFFFE000000000000)
  {
    v23 = (double)(int)v21;
    goto LABEL_39;
  }
  if (v21 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    goto LABEL_38;
  *(_QWORD *)&v23 = v21 - 0x2000000000000;
LABEL_39:
  if (*((_DWORD *)v22 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v22) & 1) != 0)
    return 0;
  if (v23 < -3.40282347e38)
  {
    *(float *)&v59 = -INFINITY;
  }
  else
  {
    if (v23 <= 3.40282347e38)
    {
      v25 = v23;
      goto LABEL_43;
    }
    *(float *)&v59 = INFINITY;
  }
  v25 = *(float *)&v59;
LABEL_43:
  if ((unint64_t)(*((int *)a2 + 8) - 5) >= 0xFFFFFFFFFFFFFFFCLL)
  {
    v65 = 10;
    v27 = (JSC::VM *)*((_QWORD *)this + 7);
LABEL_48:
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v65, this);
    v28 = v29;
    goto LABEL_49;
  }
  v26 = *((_QWORD *)a2 + 9);
  v65 = v26;
  v27 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v26 >= 0xFFFE000000000000)
  {
    v28 = (double)(int)v26;
    goto LABEL_49;
  }
  if (v26 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    goto LABEL_48;
  *(_QWORD *)&v28 = v26 - 0x2000000000000;
LABEL_49:
  if (*((_DWORD *)v27 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v27) & 1) != 0)
    return 0;
  if (v28 < -3.40282347e38)
  {
    *(float *)&v60 = -INFINITY;
  }
  else
  {
    if (v28 <= 3.40282347e38)
    {
      v30 = v28;
      goto LABEL_53;
    }
    *(float *)&v60 = INFINITY;
  }
  v30 = *(float *)&v60;
LABEL_53:
  if ((unint64_t)(*((int *)a2 + 8) - 6) >= 0xFFFFFFFFFFFFFFFBLL)
  {
    v65 = 10;
    v32 = (JSC::VM *)*((_QWORD *)this + 7);
LABEL_58:
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v65, this);
    v33 = v34;
    goto LABEL_59;
  }
  v31 = *((_QWORD *)a2 + 10);
  v65 = v31;
  v32 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v31 >= 0xFFFE000000000000)
  {
    v33 = (double)(int)v31;
    goto LABEL_59;
  }
  if (v31 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    goto LABEL_58;
  *(_QWORD *)&v33 = v31 - 0x2000000000000;
LABEL_59:
  if (*((_DWORD *)v32 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v32) & 1) != 0)
    return 0;
  if (v33 < -3.40282347e38)
  {
    *(float *)&v61 = -INFINITY;
  }
  else
  {
    if (v33 <= 3.40282347e38)
    {
      v35 = v33;
      goto LABEL_63;
    }
    *(float *)&v61 = INFINITY;
  }
  v35 = *(float *)&v61;
LABEL_63:
  v36 = *((int *)a2 + 8);
  if ((unint64_t)(v36 - 7) >= 0xFFFFFFFFFFFFFFFALL)
  {
    v38 = (JSC::VM *)*((_QWORD *)this + 7);
    v37 = 10;
    goto LABEL_74;
  }
  v37 = *((_QWORD *)a2 + 11);
  v38 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v37 >= 0xFFFE000000000000)
  {
    v62 = (_DWORD)v37 == 0;
    goto LABEL_142;
  }
  *(_QWORD *)&v39 = v37 - 0x2000000000000;
  if (v37 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    if (v39 <= 0.0)
    {
      v44 = v39 < 0.0;
      goto LABEL_75;
    }
    goto LABEL_136;
  }
  if ((v37 & 0xFFFE000000000002) != 0)
  {
LABEL_74:
    v44 = v37 == 7;
    goto LABEL_75;
  }
  v40 = *(unsigned __int8 *)(v37 + 5);
  if (v40 == 3)
  {
    v43 = *(_DWORD *)(v37 + 8);
LABEL_134:
    v62 = v43 == 0;
    goto LABEL_142;
  }
  if (v40 == 2)
  {
    v41 = *(_QWORD *)(v37 + 8);
    if ((v41 & 1) != 0)
      v42 = (int *)(v37 + 16);
    else
      v42 = (int *)(v41 + 4);
    v43 = *v42;
    goto LABEL_134;
  }
  if ((*(_BYTE *)(16 * (*(_DWORD *)v37 & 0xFFFFFFFE) + 0xA) & 1) == 0)
  {
LABEL_136:
    v44 = 1;
    goto LABEL_75;
  }
  v62 = *(_QWORD *)(16 * (*(_DWORD *)v37 & 0xFFFFFFFE) + 0x28) == (_QWORD)this;
LABEL_142:
  v44 = !v62;
LABEL_75:
  if (*((_DWORD *)v38 + 20))
  {
    if ((JSC::VM::hasExceptionsAfterHandlingTraps(v38) & 1) != 0)
      return 0;
    v36 = *((int *)a2 + 8);
  }
  if ((unint64_t)(v36 - 8) >= 0xFFFFFFFFFFFFFFF9)
  {
    v48 = (_DWORD *)v5;
    v46 = (JSC::VM *)*((_QWORD *)this + 7);
    v45 = 10;
    goto LABEL_87;
  }
  v45 = *((_QWORD *)a2 + 12);
  v46 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v45 >= 0xFFFE000000000000)
  {
    v48 = (_DWORD *)v5;
    v63 = (_DWORD)v45 == 0;
    goto LABEL_146;
  }
  *(_QWORD *)&v47 = v45 - 0x2000000000000;
  v48 = (_DWORD *)v5;
  if (v45 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    if (v47 <= 0.0)
    {
      v53 = v47 < 0.0;
      goto LABEL_88;
    }
    goto LABEL_140;
  }
  if ((v45 & 0xFFFE000000000002) != 0)
  {
LABEL_87:
    v53 = v45 == 7;
    goto LABEL_88;
  }
  v49 = *(unsigned __int8 *)(v45 + 5);
  if (v49 == 3)
  {
    v52 = *(_DWORD *)(v45 + 8);
LABEL_138:
    v63 = v52 == 0;
    goto LABEL_146;
  }
  if (v49 == 2)
  {
    v50 = *(_QWORD *)(v45 + 8);
    if ((v50 & 1) != 0)
      v51 = (int *)(v45 + 16);
    else
      v51 = (int *)(v50 + 4);
    v52 = *v51;
    goto LABEL_138;
  }
  if ((*(_BYTE *)(16 * (*(_DWORD *)v45 & 0xFFFFFFFE) + 0xA) & 1) == 0)
  {
LABEL_140:
    v53 = 1;
    goto LABEL_88;
  }
  v63 = *(_QWORD *)(16 * (*(_DWORD *)v45 & 0xFFFFFFFE) + 0x28) == (_QWORD)this;
LABEL_146:
  v53 = !v63;
LABEL_88:
  if (*((_DWORD *)v46 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v46) & 1) != 0)
    return 0;
  v54 = *(_QWORD *)(16 * (*v48 & 0xFFFFFFFE) + 0x28);
  v55 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v55 + 8) = 1;
  *(_QWORD *)(v55 + 16) = 0;
  *(_WORD *)(v55 + 24) = 0;
  *(float *)(v55 + 28) = v15;
  *(float *)(v55 + 32) = v20;
  *(float *)(v55 + 36) = v25;
  *(float *)(v55 + 40) = v30;
  *(float *)(v55 + 44) = v35;
  *(_BYTE *)(v55 + 48) = v44;
  *(_BYTE *)(v55 + 49) = v53;
  *(_QWORD *)v55 = off_1E3300298;
  v56 = WebCore::wrap<WebCore::SVGPathSeg>((uint64_t)this, v54, (_DWORD *)v55);
  if (*(_DWORD *)(v55 + 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  else
    --*(_DWORD *)(v55 + 8);
  return (_BYTE *)v56;
}

_BYTE *WebCore::jsSVGPathElementPrototypeFunction_createSVGPathSegArcRel(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  unint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  unint64_t v12;
  double v13;
  double v14;
  float v15;
  unint64_t v16;
  JSC::VM *v17;
  double v18;
  double v19;
  float v20;
  unint64_t v21;
  JSC::VM *v22;
  double v23;
  double v24;
  float v25;
  unint64_t v26;
  JSC::VM *v27;
  double v28;
  double v29;
  float v30;
  unint64_t v31;
  JSC::VM *v32;
  double v33;
  double v34;
  float v35;
  uint64_t v36;
  unint64_t v37;
  JSC::VM *v38;
  double v39;
  int v40;
  uint64_t v41;
  int *v42;
  int v43;
  BOOL v44;
  unint64_t v45;
  JSC::VM *v46;
  double v47;
  _DWORD *v48;
  int v49;
  uint64_t v50;
  int *v51;
  int v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  int v58;
  int v59;
  int v60;
  int v61;
  BOOL v62;
  BOOL v63;
  JSC::VM *v64;
  uint64_t v65;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v64 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v64, "SVGPathElement", "createSVGPathSegArcRel");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSSVGPathElement::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSSVGPathElement::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v64, "SVGPathElement", "createSVGPathSegArcRel");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v65 = 10;
LABEL_17:
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v65, this);
    v13 = v14;
    goto LABEL_18;
  }
  v12 = *((_QWORD *)a2 + 6);
  v65 = v12;
  if (v12 >= 0xFFFE000000000000)
  {
    v13 = (double)(int)v12;
    goto LABEL_18;
  }
  if (v12 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    goto LABEL_17;
  *(_QWORD *)&v13 = v12 - 0x2000000000000;
LABEL_18:
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v13 < -3.40282347e38)
  {
    v15 = -INFINITY;
  }
  else if (v13 <= 3.40282347e38)
  {
    v15 = v13;
  }
  else
  {
    v15 = INFINITY;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 3) >= 0xFFFFFFFFFFFFFFFELL)
  {
    v65 = 10;
    v17 = (JSC::VM *)*((_QWORD *)this + 7);
LABEL_28:
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v65, this);
    v18 = v19;
    goto LABEL_29;
  }
  v16 = *((_QWORD *)a2 + 7);
  v65 = v16;
  v17 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v16 >= 0xFFFE000000000000)
  {
    v18 = (double)(int)v16;
    goto LABEL_29;
  }
  if (v16 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    goto LABEL_28;
  *(_QWORD *)&v18 = v16 - 0x2000000000000;
LABEL_29:
  if (*((_DWORD *)v17 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v17) & 1) != 0)
    return 0;
  if (v18 < -3.40282347e38)
  {
    *(float *)&v58 = -INFINITY;
  }
  else
  {
    if (v18 <= 3.40282347e38)
    {
      v20 = v18;
      goto LABEL_33;
    }
    *(float *)&v58 = INFINITY;
  }
  v20 = *(float *)&v58;
LABEL_33:
  if ((unint64_t)(*((int *)a2 + 8) - 4) >= 0xFFFFFFFFFFFFFFFDLL)
  {
    v65 = 10;
    v22 = (JSC::VM *)*((_QWORD *)this + 7);
LABEL_38:
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v65, this);
    v23 = v24;
    goto LABEL_39;
  }
  v21 = *((_QWORD *)a2 + 8);
  v65 = v21;
  v22 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v21 >= 0xFFFE000000000000)
  {
    v23 = (double)(int)v21;
    goto LABEL_39;
  }
  if (v21 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    goto LABEL_38;
  *(_QWORD *)&v23 = v21 - 0x2000000000000;
LABEL_39:
  if (*((_DWORD *)v22 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v22) & 1) != 0)
    return 0;
  if (v23 < -3.40282347e38)
  {
    *(float *)&v59 = -INFINITY;
  }
  else
  {
    if (v23 <= 3.40282347e38)
    {
      v25 = v23;
      goto LABEL_43;
    }
    *(float *)&v59 = INFINITY;
  }
  v25 = *(float *)&v59;
LABEL_43:
  if ((unint64_t)(*((int *)a2 + 8) - 5) >= 0xFFFFFFFFFFFFFFFCLL)
  {
    v65 = 10;
    v27 = (JSC::VM *)*((_QWORD *)this + 7);
LABEL_48:
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v65, this);
    v28 = v29;
    goto LABEL_49;
  }
  v26 = *((_QWORD *)a2 + 9);
  v65 = v26;
  v27 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v26 >= 0xFFFE000000000000)
  {
    v28 = (double)(int)v26;
    goto LABEL_49;
  }
  if (v26 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    goto LABEL_48;
  *(_QWORD *)&v28 = v26 - 0x2000000000000;
LABEL_49:
  if (*((_DWORD *)v27 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v27) & 1) != 0)
    return 0;
  if (v28 < -3.40282347e38)
  {
    *(float *)&v60 = -INFINITY;
  }
  else
  {
    if (v28 <= 3.40282347e38)
    {
      v30 = v28;
      goto LABEL_53;
    }
    *(float *)&v60 = INFINITY;
  }
  v30 = *(float *)&v60;
LABEL_53:
  if ((unint64_t)(*((int *)a2 + 8) - 6) >= 0xFFFFFFFFFFFFFFFBLL)
  {
    v65 = 10;
    v32 = (JSC::VM *)*((_QWORD *)this + 7);
LABEL_58:
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v65, this);
    v33 = v34;
    goto LABEL_59;
  }
  v31 = *((_QWORD *)a2 + 10);
  v65 = v31;
  v32 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v31 >= 0xFFFE000000000000)
  {
    v33 = (double)(int)v31;
    goto LABEL_59;
  }
  if (v31 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    goto LABEL_58;
  *(_QWORD *)&v33 = v31 - 0x2000000000000;
LABEL_59:
  if (*((_DWORD *)v32 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v32) & 1) != 0)
    return 0;
  if (v33 < -3.40282347e38)
  {
    *(float *)&v61 = -INFINITY;
  }
  else
  {
    if (v33 <= 3.40282347e38)
    {
      v35 = v33;
      goto LABEL_63;
    }
    *(float *)&v61 = INFINITY;
  }
  v35 = *(float *)&v61;
LABEL_63:
  v36 = *((int *)a2 + 8);
  if ((unint64_t)(v36 - 7) >= 0xFFFFFFFFFFFFFFFALL)
  {
    v38 = (JSC::VM *)*((_QWORD *)this + 7);
    v37 = 10;
    goto LABEL_74;
  }
  v37 = *((_QWORD *)a2 + 11);
  v38 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v37 >= 0xFFFE000000000000)
  {
    v62 = (_DWORD)v37 == 0;
    goto LABEL_142;
  }
  *(_QWORD *)&v39 = v37 - 0x2000000000000;
  if (v37 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    if (v39 <= 0.0)
    {
      v44 = v39 < 0.0;
      goto LABEL_75;
    }
    goto LABEL_136;
  }
  if ((v37 & 0xFFFE000000000002) != 0)
  {
LABEL_74:
    v44 = v37 == 7;
    goto LABEL_75;
  }
  v40 = *(unsigned __int8 *)(v37 + 5);
  if (v40 == 3)
  {
    v43 = *(_DWORD *)(v37 + 8);
LABEL_134:
    v62 = v43 == 0;
    goto LABEL_142;
  }
  if (v40 == 2)
  {
    v41 = *(_QWORD *)(v37 + 8);
    if ((v41 & 1) != 0)
      v42 = (int *)(v37 + 16);
    else
      v42 = (int *)(v41 + 4);
    v43 = *v42;
    goto LABEL_134;
  }
  if ((*(_BYTE *)(16 * (*(_DWORD *)v37 & 0xFFFFFFFE) + 0xA) & 1) == 0)
  {
LABEL_136:
    v44 = 1;
    goto LABEL_75;
  }
  v62 = *(_QWORD *)(16 * (*(_DWORD *)v37 & 0xFFFFFFFE) + 0x28) == (_QWORD)this;
LABEL_142:
  v44 = !v62;
LABEL_75:
  if (*((_DWORD *)v38 + 20))
  {
    if ((JSC::VM::hasExceptionsAfterHandlingTraps(v38) & 1) != 0)
      return 0;
    v36 = *((int *)a2 + 8);
  }
  if ((unint64_t)(v36 - 8) >= 0xFFFFFFFFFFFFFFF9)
  {
    v48 = (_DWORD *)v5;
    v46 = (JSC::VM *)*((_QWORD *)this + 7);
    v45 = 10;
    goto LABEL_87;
  }
  v45 = *((_QWORD *)a2 + 12);
  v46 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v45 >= 0xFFFE000000000000)
  {
    v48 = (_DWORD *)v5;
    v63 = (_DWORD)v45 == 0;
    goto LABEL_146;
  }
  *(_QWORD *)&v47 = v45 - 0x2000000000000;
  v48 = (_DWORD *)v5;
  if (v45 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    if (v47 <= 0.0)
    {
      v53 = v47 < 0.0;
      goto LABEL_88;
    }
    goto LABEL_140;
  }
  if ((v45 & 0xFFFE000000000002) != 0)
  {
LABEL_87:
    v53 = v45 == 7;
    goto LABEL_88;
  }
  v49 = *(unsigned __int8 *)(v45 + 5);
  if (v49 == 3)
  {
    v52 = *(_DWORD *)(v45 + 8);
LABEL_138:
    v63 = v52 == 0;
    goto LABEL_146;
  }
  if (v49 == 2)
  {
    v50 = *(_QWORD *)(v45 + 8);
    if ((v50 & 1) != 0)
      v51 = (int *)(v45 + 16);
    else
      v51 = (int *)(v50 + 4);
    v52 = *v51;
    goto LABEL_138;
  }
  if ((*(_BYTE *)(16 * (*(_DWORD *)v45 & 0xFFFFFFFE) + 0xA) & 1) == 0)
  {
LABEL_140:
    v53 = 1;
    goto LABEL_88;
  }
  v63 = *(_QWORD *)(16 * (*(_DWORD *)v45 & 0xFFFFFFFE) + 0x28) == (_QWORD)this;
LABEL_146:
  v53 = !v63;
LABEL_88:
  if (*((_DWORD *)v46 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v46) & 1) != 0)
    return 0;
  v54 = *(_QWORD *)(16 * (*v48 & 0xFFFFFFFE) + 0x28);
  v55 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v55 + 8) = 1;
  *(_QWORD *)(v55 + 16) = 0;
  *(_WORD *)(v55 + 24) = 0;
  *(float *)(v55 + 28) = v15;
  *(float *)(v55 + 32) = v20;
  *(float *)(v55 + 36) = v25;
  *(float *)(v55 + 40) = v30;
  *(float *)(v55 + 44) = v35;
  *(_BYTE *)(v55 + 48) = v44;
  *(_BYTE *)(v55 + 49) = v53;
  *(_QWORD *)v55 = off_1E3300338;
  v56 = WebCore::wrap<WebCore::SVGPathSeg>((uint64_t)this, v54, (_DWORD *)v55);
  if (*(_DWORD *)(v55 + 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  else
    --*(_DWORD *)(v55 + 8);
  return (_BYTE *)v56;
}

_BYTE *WebCore::jsSVGPathElementPrototypeFunction_createSVGPathSegLinetoHorizontalAbs(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  unint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  unint64_t v11;
  double v12;
  double v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  JSC::VM *v19;
  uint64_t v20;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v19 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v19, "SVGPathElement", "createSVGPathSegLinetoHorizontalAbs");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSSVGPathElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSSVGPathElement::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v19, "SVGPathElement", "createSVGPathSegLinetoHorizontalAbs");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v20 = 10;
LABEL_17:
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v20, this);
    v12 = v13;
    goto LABEL_18;
  }
  v11 = *((_QWORD *)a2 + 6);
  v20 = v11;
  if (v11 >= 0xFFFE000000000000)
  {
    v12 = (double)(int)v11;
    goto LABEL_18;
  }
  if (v11 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    goto LABEL_17;
  *(_QWORD *)&v12 = v11 - 0x2000000000000;
LABEL_18:
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v12 < -3.40282347e38)
  {
    v14 = -INFINITY;
  }
  else if (v12 <= 3.40282347e38)
  {
    v14 = v12;
  }
  else
  {
    v14 = INFINITY;
  }
  v15 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  v16 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v16 + 8) = 1;
  *(_QWORD *)(v16 + 16) = 0;
  *(_WORD *)(v16 + 24) = 0;
  *(float *)(v16 + 28) = v14;
  *(_QWORD *)v16 = off_1E32FFD98;
  v17 = WebCore::wrap<WebCore::SVGPathSeg>((uint64_t)this, v15, (_DWORD *)v16);
  if (*(_DWORD *)(v16 + 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  else
    --*(_DWORD *)(v16 + 8);
  return (_BYTE *)v17;
}

_BYTE *WebCore::jsSVGPathElementPrototypeFunction_createSVGPathSegLinetoHorizontalRel(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  unint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  unint64_t v11;
  double v12;
  double v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  JSC::VM *v19;
  uint64_t v20;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v19 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v19, "SVGPathElement", "createSVGPathSegLinetoHorizontalRel");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSSVGPathElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSSVGPathElement::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v19, "SVGPathElement", "createSVGPathSegLinetoHorizontalRel");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v20 = 10;
LABEL_17:
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v20, this);
    v12 = v13;
    goto LABEL_18;
  }
  v11 = *((_QWORD *)a2 + 6);
  v20 = v11;
  if (v11 >= 0xFFFE000000000000)
  {
    v12 = (double)(int)v11;
    goto LABEL_18;
  }
  if (v11 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    goto LABEL_17;
  *(_QWORD *)&v12 = v11 - 0x2000000000000;
LABEL_18:
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v12 < -3.40282347e38)
  {
    v14 = -INFINITY;
  }
  else if (v12 <= 3.40282347e38)
  {
    v14 = v12;
  }
  else
  {
    v14 = INFINITY;
  }
  v15 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  v16 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v16 + 8) = 1;
  *(_QWORD *)(v16 + 16) = 0;
  *(_WORD *)(v16 + 24) = 0;
  *(float *)(v16 + 28) = v14;
  *(_QWORD *)v16 = off_1E32FFE38;
  v17 = WebCore::wrap<WebCore::SVGPathSeg>((uint64_t)this, v15, (_DWORD *)v16);
  if (*(_DWORD *)(v16 + 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  else
    --*(_DWORD *)(v16 + 8);
  return (_BYTE *)v17;
}

_BYTE *WebCore::jsSVGPathElementPrototypeFunction_createSVGPathSegLinetoVerticalAbs(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  unint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  unint64_t v11;
  double v12;
  double v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  JSC::VM *v19;
  uint64_t v20;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v19 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v19, "SVGPathElement", "createSVGPathSegLinetoVerticalAbs");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSSVGPathElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSSVGPathElement::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v19, "SVGPathElement", "createSVGPathSegLinetoVerticalAbs");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v20 = 10;
LABEL_17:
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v20, this);
    v12 = v13;
    goto LABEL_18;
  }
  v11 = *((_QWORD *)a2 + 6);
  v20 = v11;
  if (v11 >= 0xFFFE000000000000)
  {
    v12 = (double)(int)v11;
    goto LABEL_18;
  }
  if (v11 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    goto LABEL_17;
  *(_QWORD *)&v12 = v11 - 0x2000000000000;
LABEL_18:
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v12 < -3.40282347e38)
  {
    v14 = -INFINITY;
  }
  else if (v12 <= 3.40282347e38)
  {
    v14 = v12;
  }
  else
  {
    v14 = INFINITY;
  }
  v15 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  v16 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v16 + 8) = 1;
  *(_QWORD *)(v16 + 16) = 0;
  *(_WORD *)(v16 + 24) = 0;
  *(float *)(v16 + 28) = v14;
  *(_QWORD *)v16 = off_1E32FFE88;
  v17 = WebCore::wrap<WebCore::SVGPathSeg>((uint64_t)this, v15, (_DWORD *)v16);
  if (*(_DWORD *)(v16 + 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  else
    --*(_DWORD *)(v16 + 8);
  return (_BYTE *)v17;
}

_BYTE *WebCore::jsSVGPathElementPrototypeFunction_createSVGPathSegLinetoVerticalRel(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  unint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  unint64_t v11;
  double v12;
  double v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  JSC::VM *v19;
  uint64_t v20;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v19 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v19, "SVGPathElement", "createSVGPathSegLinetoVerticalRel");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSSVGPathElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSSVGPathElement::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v19, "SVGPathElement", "createSVGPathSegLinetoVerticalRel");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v20 = 10;
LABEL_17:
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v20, this);
    v12 = v13;
    goto LABEL_18;
  }
  v11 = *((_QWORD *)a2 + 6);
  v20 = v11;
  if (v11 >= 0xFFFE000000000000)
  {
    v12 = (double)(int)v11;
    goto LABEL_18;
  }
  if (v11 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    goto LABEL_17;
  *(_QWORD *)&v12 = v11 - 0x2000000000000;
LABEL_18:
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v12 < -3.40282347e38)
  {
    v14 = -INFINITY;
  }
  else if (v12 <= 3.40282347e38)
  {
    v14 = v12;
  }
  else
  {
    v14 = INFINITY;
  }
  v15 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  v16 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v16 + 8) = 1;
  *(_QWORD *)(v16 + 16) = 0;
  *(_WORD *)(v16 + 24) = 0;
  *(float *)(v16 + 28) = v14;
  *(_QWORD *)v16 = off_1E32FFED8;
  v17 = WebCore::wrap<WebCore::SVGPathSeg>((uint64_t)this, v15, (_DWORD *)v16);
  if (*(_DWORD *)(v16 + 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  else
    --*(_DWORD *)(v16 + 8);
  return (_BYTE *)v17;
}

_BYTE *WebCore::jsSVGPathElementPrototypeFunction_createSVGPathSegCurvetoCubicSmoothAbs(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  unint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  unint64_t v12;
  double v13;
  double v14;
  float v15;
  unint64_t v16;
  JSC::VM *v17;
  double v18;
  double v19;
  float v20;
  unint64_t v21;
  JSC::VM *v22;
  double v23;
  double v24;
  float v25;
  unint64_t v26;
  JSC::VM *v27;
  double v28;
  double v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int v35;
  int v36;
  int v37;
  JSC::VM *v38;
  uint64_t v39;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v38 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v38, "SVGPathElement", "createSVGPathSegCurvetoCubicSmoothAbs");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSSVGPathElement::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSSVGPathElement::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v38, "SVGPathElement", "createSVGPathSegCurvetoCubicSmoothAbs");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v39 = 10;
LABEL_17:
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v39, this);
    v13 = v14;
    goto LABEL_18;
  }
  v12 = *((_QWORD *)a2 + 6);
  v39 = v12;
  if (v12 >= 0xFFFE000000000000)
  {
    v13 = (double)(int)v12;
    goto LABEL_18;
  }
  if (v12 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    goto LABEL_17;
  *(_QWORD *)&v13 = v12 - 0x2000000000000;
LABEL_18:
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v13 < -3.40282347e38)
  {
    v15 = -INFINITY;
  }
  else if (v13 <= 3.40282347e38)
  {
    v15 = v13;
  }
  else
  {
    v15 = INFINITY;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 3) >= 0xFFFFFFFFFFFFFFFELL)
  {
    v39 = 10;
    v17 = (JSC::VM *)*((_QWORD *)this + 7);
LABEL_28:
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v39, this);
    v18 = v19;
    goto LABEL_29;
  }
  v16 = *((_QWORD *)a2 + 7);
  v39 = v16;
  v17 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v16 >= 0xFFFE000000000000)
  {
    v18 = (double)(int)v16;
    goto LABEL_29;
  }
  if (v16 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    goto LABEL_28;
  *(_QWORD *)&v18 = v16 - 0x2000000000000;
LABEL_29:
  if (*((_DWORD *)v17 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v17) & 1) != 0)
    return 0;
  if (v18 < -3.40282347e38)
  {
    *(float *)&v35 = -INFINITY;
  }
  else
  {
    if (v18 <= 3.40282347e38)
    {
      v20 = v18;
      goto LABEL_33;
    }
    *(float *)&v35 = INFINITY;
  }
  v20 = *(float *)&v35;
LABEL_33:
  if ((unint64_t)(*((int *)a2 + 8) - 4) >= 0xFFFFFFFFFFFFFFFDLL)
  {
    v39 = 10;
    v22 = (JSC::VM *)*((_QWORD *)this + 7);
LABEL_38:
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v39, this);
    v23 = v24;
    goto LABEL_39;
  }
  v21 = *((_QWORD *)a2 + 8);
  v39 = v21;
  v22 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v21 >= 0xFFFE000000000000)
  {
    v23 = (double)(int)v21;
    goto LABEL_39;
  }
  if (v21 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    goto LABEL_38;
  *(_QWORD *)&v23 = v21 - 0x2000000000000;
LABEL_39:
  if (*((_DWORD *)v22 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v22) & 1) != 0)
    return 0;
  if (v23 < -3.40282347e38)
  {
    *(float *)&v36 = -INFINITY;
  }
  else
  {
    if (v23 <= 3.40282347e38)
    {
      v25 = v23;
      goto LABEL_43;
    }
    *(float *)&v36 = INFINITY;
  }
  v25 = *(float *)&v36;
LABEL_43:
  if ((unint64_t)(*((int *)a2 + 8) - 5) >= 0xFFFFFFFFFFFFFFFCLL)
  {
    v39 = 10;
    v27 = (JSC::VM *)*((_QWORD *)this + 7);
LABEL_48:
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v39, this);
    v28 = v29;
    goto LABEL_49;
  }
  v26 = *((_QWORD *)a2 + 9);
  v39 = v26;
  v27 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v26 >= 0xFFFE000000000000)
  {
    v28 = (double)(int)v26;
    goto LABEL_49;
  }
  if (v26 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    goto LABEL_48;
  *(_QWORD *)&v28 = v26 - 0x2000000000000;
LABEL_49:
  if (*((_DWORD *)v27 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v27) & 1) != 0)
    return 0;
  if (v28 < -3.40282347e38)
  {
    *(float *)&v37 = -INFINITY;
  }
  else
  {
    if (v28 <= 3.40282347e38)
    {
      v30 = v28;
      goto LABEL_53;
    }
    *(float *)&v37 = INFINITY;
  }
  v30 = *(float *)&v37;
LABEL_53:
  v31 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  v32 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v32 + 8) = 1;
  *(_QWORD *)(v32 + 16) = 0;
  *(_WORD *)(v32 + 24) = 0;
  *(float *)(v32 + 28) = v15;
  *(float *)(v32 + 32) = v20;
  *(float *)(v32 + 36) = v25;
  *(float *)(v32 + 40) = v30;
  *(_QWORD *)v32 = off_1E3300428;
  v33 = WebCore::wrap<WebCore::SVGPathSeg>((uint64_t)this, v31, (_DWORD *)v32);
  if (*(_DWORD *)(v32 + 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  else
    --*(_DWORD *)(v32 + 8);
  return (_BYTE *)v33;
}

_BYTE *WebCore::jsSVGPathElementPrototypeFunction_createSVGPathSegCurvetoCubicSmoothRel(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  unint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  unint64_t v12;
  double v13;
  double v14;
  float v15;
  unint64_t v16;
  JSC::VM *v17;
  double v18;
  double v19;
  float v20;
  unint64_t v21;
  JSC::VM *v22;
  double v23;
  double v24;
  float v25;
  unint64_t v26;
  JSC::VM *v27;
  double v28;
  double v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int v35;
  int v36;
  int v37;
  JSC::VM *v38;
  uint64_t v39;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v38 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v38, "SVGPathElement", "createSVGPathSegCurvetoCubicSmoothRel");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSSVGPathElement::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSSVGPathElement::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v38, "SVGPathElement", "createSVGPathSegCurvetoCubicSmoothRel");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v39 = 10;
LABEL_17:
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v39, this);
    v13 = v14;
    goto LABEL_18;
  }
  v12 = *((_QWORD *)a2 + 6);
  v39 = v12;
  if (v12 >= 0xFFFE000000000000)
  {
    v13 = (double)(int)v12;
    goto LABEL_18;
  }
  if (v12 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    goto LABEL_17;
  *(_QWORD *)&v13 = v12 - 0x2000000000000;
LABEL_18:
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v13 < -3.40282347e38)
  {
    v15 = -INFINITY;
  }
  else if (v13 <= 3.40282347e38)
  {
    v15 = v13;
  }
  else
  {
    v15 = INFINITY;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 3) >= 0xFFFFFFFFFFFFFFFELL)
  {
    v39 = 10;
    v17 = (JSC::VM *)*((_QWORD *)this + 7);
LABEL_28:
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v39, this);
    v18 = v19;
    goto LABEL_29;
  }
  v16 = *((_QWORD *)a2 + 7);
  v39 = v16;
  v17 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v16 >= 0xFFFE000000000000)
  {
    v18 = (double)(int)v16;
    goto LABEL_29;
  }
  if (v16 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    goto LABEL_28;
  *(_QWORD *)&v18 = v16 - 0x2000000000000;
LABEL_29:
  if (*((_DWORD *)v17 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v17) & 1) != 0)
    return 0;
  if (v18 < -3.40282347e38)
  {
    *(float *)&v35 = -INFINITY;
  }
  else
  {
    if (v18 <= 3.40282347e38)
    {
      v20 = v18;
      goto LABEL_33;
    }
    *(float *)&v35 = INFINITY;
  }
  v20 = *(float *)&v35;
LABEL_33:
  if ((unint64_t)(*((int *)a2 + 8) - 4) >= 0xFFFFFFFFFFFFFFFDLL)
  {
    v39 = 10;
    v22 = (JSC::VM *)*((_QWORD *)this + 7);
LABEL_38:
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v39, this);
    v23 = v24;
    goto LABEL_39;
  }
  v21 = *((_QWORD *)a2 + 8);
  v39 = v21;
  v22 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v21 >= 0xFFFE000000000000)
  {
    v23 = (double)(int)v21;
    goto LABEL_39;
  }
  if (v21 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    goto LABEL_38;
  *(_QWORD *)&v23 = v21 - 0x2000000000000;
LABEL_39:
  if (*((_DWORD *)v22 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v22) & 1) != 0)
    return 0;
  if (v23 < -3.40282347e38)
  {
    *(float *)&v36 = -INFINITY;
  }
  else
  {
    if (v23 <= 3.40282347e38)
    {
      v25 = v23;
      goto LABEL_43;
    }
    *(float *)&v36 = INFINITY;
  }
  v25 = *(float *)&v36;
LABEL_43:
  if ((unint64_t)(*((int *)a2 + 8) - 5) >= 0xFFFFFFFFFFFFFFFCLL)
  {
    v39 = 10;
    v27 = (JSC::VM *)*((_QWORD *)this + 7);
LABEL_48:
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v39, this);
    v28 = v29;
    goto LABEL_49;
  }
  v26 = *((_QWORD *)a2 + 9);
  v39 = v26;
  v27 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v26 >= 0xFFFE000000000000)
  {
    v28 = (double)(int)v26;
    goto LABEL_49;
  }
  if (v26 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    goto LABEL_48;
  *(_QWORD *)&v28 = v26 - 0x2000000000000;
LABEL_49:
  if (*((_DWORD *)v27 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v27) & 1) != 0)
    return 0;
  if (v28 < -3.40282347e38)
  {
    *(float *)&v37 = -INFINITY;
  }
  else
  {
    if (v28 <= 3.40282347e38)
    {
      v30 = v28;
      goto LABEL_53;
    }
    *(float *)&v37 = INFINITY;
  }
  v30 = *(float *)&v37;
LABEL_53:
  v31 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  v32 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v32 + 8) = 1;
  *(_QWORD *)(v32 + 16) = 0;
  *(_WORD *)(v32 + 24) = 0;
  *(float *)(v32 + 28) = v15;
  *(float *)(v32 + 32) = v20;
  *(float *)(v32 + 36) = v25;
  *(float *)(v32 + 40) = v30;
  *(_QWORD *)v32 = off_1E3300478;
  v33 = WebCore::wrap<WebCore::SVGPathSeg>((uint64_t)this, v31, (_DWORD *)v32);
  if (*(_DWORD *)(v32 + 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  else
    --*(_DWORD *)(v32 + 8);
  return (_BYTE *)v33;
}

_BYTE *WebCore::jsSVGPathElementPrototypeFunction_createSVGPathSegCurvetoQuadraticSmoothAbs(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  unint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  unint64_t v12;
  double v13;
  double v14;
  float v15;
  unint64_t v16;
  JSC::VM *v17;
  double v18;
  double v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v25;
  JSC::VM *v26;
  uint64_t v27;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v26 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v26, "SVGPathElement", "createSVGPathSegCurvetoQuadraticSmoothAbs");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSSVGPathElement::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSSVGPathElement::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v26, "SVGPathElement", "createSVGPathSegCurvetoQuadraticSmoothAbs");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v27 = 10;
LABEL_17:
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v27, this);
    v13 = v14;
    goto LABEL_18;
  }
  v12 = *((_QWORD *)a2 + 6);
  v27 = v12;
  if (v12 >= 0xFFFE000000000000)
  {
    v13 = (double)(int)v12;
    goto LABEL_18;
  }
  if (v12 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    goto LABEL_17;
  *(_QWORD *)&v13 = v12 - 0x2000000000000;
LABEL_18:
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v13 < -3.40282347e38)
  {
    v15 = -INFINITY;
  }
  else if (v13 <= 3.40282347e38)
  {
    v15 = v13;
  }
  else
  {
    v15 = INFINITY;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 3) >= 0xFFFFFFFFFFFFFFFELL)
  {
    v27 = 10;
    v17 = (JSC::VM *)*((_QWORD *)this + 7);
LABEL_28:
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v27, this);
    v18 = v19;
    goto LABEL_29;
  }
  v16 = *((_QWORD *)a2 + 7);
  v27 = v16;
  v17 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v16 >= 0xFFFE000000000000)
  {
    v18 = (double)(int)v16;
    goto LABEL_29;
  }
  if (v16 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    goto LABEL_28;
  *(_QWORD *)&v18 = v16 - 0x2000000000000;
LABEL_29:
  if (*((_DWORD *)v17 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v17) & 1) != 0)
    return 0;
  if (v18 < -3.40282347e38)
  {
    *(float *)&v25 = -INFINITY;
  }
  else
  {
    if (v18 <= 3.40282347e38)
    {
      v20 = v18;
      goto LABEL_33;
    }
    *(float *)&v25 = INFINITY;
  }
  v20 = *(float *)&v25;
LABEL_33:
  v21 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  v22 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v22 + 8) = 1;
  *(_QWORD *)(v22 + 16) = 0;
  *(_WORD *)(v22 + 24) = 0;
  *(float *)(v22 + 28) = v15;
  *(float *)(v22 + 32) = v20;
  *(_QWORD *)v22 = off_1E3300388;
  v23 = WebCore::wrap<WebCore::SVGPathSeg>((uint64_t)this, v21, (_DWORD *)v22);
  if (*(_DWORD *)(v22 + 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  else
    --*(_DWORD *)(v22 + 8);
  return (_BYTE *)v23;
}

_BYTE *WebCore::jsSVGPathElementPrototypeFunction_createSVGPathSegCurvetoQuadraticSmoothRel(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  unint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  unint64_t v12;
  double v13;
  double v14;
  float v15;
  unint64_t v16;
  JSC::VM *v17;
  double v18;
  double v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v25;
  JSC::VM *v26;
  uint64_t v27;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v26 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v26, "SVGPathElement", "createSVGPathSegCurvetoQuadraticSmoothRel");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSSVGPathElement::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSSVGPathElement::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v26, "SVGPathElement", "createSVGPathSegCurvetoQuadraticSmoothRel");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v27 = 10;
LABEL_17:
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v27, this);
    v13 = v14;
    goto LABEL_18;
  }
  v12 = *((_QWORD *)a2 + 6);
  v27 = v12;
  if (v12 >= 0xFFFE000000000000)
  {
    v13 = (double)(int)v12;
    goto LABEL_18;
  }
  if (v12 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    goto LABEL_17;
  *(_QWORD *)&v13 = v12 - 0x2000000000000;
LABEL_18:
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v13 < -3.40282347e38)
  {
    v15 = -INFINITY;
  }
  else if (v13 <= 3.40282347e38)
  {
    v15 = v13;
  }
  else
  {
    v15 = INFINITY;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 3) >= 0xFFFFFFFFFFFFFFFELL)
  {
    v27 = 10;
    v17 = (JSC::VM *)*((_QWORD *)this + 7);
LABEL_28:
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v27, this);
    v18 = v19;
    goto LABEL_29;
  }
  v16 = *((_QWORD *)a2 + 7);
  v27 = v16;
  v17 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v16 >= 0xFFFE000000000000)
  {
    v18 = (double)(int)v16;
    goto LABEL_29;
  }
  if (v16 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    goto LABEL_28;
  *(_QWORD *)&v18 = v16 - 0x2000000000000;
LABEL_29:
  if (*((_DWORD *)v17 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v17) & 1) != 0)
    return 0;
  if (v18 < -3.40282347e38)
  {
    *(float *)&v25 = -INFINITY;
  }
  else
  {
    if (v18 <= 3.40282347e38)
    {
      v20 = v18;
      goto LABEL_33;
    }
    *(float *)&v25 = INFINITY;
  }
  v20 = *(float *)&v25;
LABEL_33:
  v21 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  v22 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v22 + 8) = 1;
  *(_QWORD *)(v22 + 16) = 0;
  *(_WORD *)(v22 + 24) = 0;
  *(float *)(v22 + 28) = v15;
  *(float *)(v22 + 32) = v20;
  *(_QWORD *)v22 = off_1E33003D8;
  v23 = WebCore::wrap<WebCore::SVGPathSeg>((uint64_t)this, v21, (_DWORD *)v22);
  if (*(_DWORD *)(v22 + 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  else
    --*(_DWORD *)(v22 + 8);
  return (_BYTE *)v23;
}

uint64_t WebCore::SVGPathSegClosePath::pathSegType(WebCore::SVGPathSegClosePath *this)
{
  return 1;
}

uint64_t WebCore::SVGPathSegClosePath::pathSegTypeAsLetter(WebCore::SVGPathSegClosePath *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

_QWORD *WebCore::SVGPathSegClosePath::clone@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  result[2] = 0;
  result[3] = 0;
  *result = off_1E32FFD48;
  result[1] = 0;
  *((_DWORD *)result + 2) = 1;
  *a1 = result;
  return result;
}

uint64_t WebCore::SVGPathSegMovetoAbs::pathSegType(WebCore::SVGPathSegMovetoAbs *this)
{
  return 2;
}

uint64_t WebCore::SVGPathSegMovetoAbs::pathSegTypeAsLetter(WebCore::SVGPathSegMovetoAbs *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::SVGPathSegMovetoAbs::clone@<X0>(WebCore::SVGPathSegMovetoAbs *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_WORD *)(result + 24) = 0;
  *(_QWORD *)result = off_1E32FFF78;
  *(_QWORD *)(result + 28) = *(_QWORD *)((char *)this + 28);
  *(_QWORD *)result = off_1E32FFF28;
  *a2 = result;
  return result;
}

uint64_t WebCore::SVGPathSegMovetoRel::pathSegType(WebCore::SVGPathSegMovetoRel *this)
{
  return 3;
}

uint64_t WebCore::SVGPathSegMovetoRel::pathSegTypeAsLetter(WebCore::SVGPathSegMovetoRel *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::SVGPathSegMovetoRel::clone@<X0>(WebCore::SVGPathSegMovetoRel *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_WORD *)(result + 24) = 0;
  *(_QWORD *)result = off_1E32FFF78;
  *(_QWORD *)(result + 28) = *(_QWORD *)((char *)this + 28);
  *(_QWORD *)result = off_1E32FFFC8;
  *a2 = result;
  return result;
}

uint64_t WebCore::SVGPathSegLinetoAbs::pathSegType(WebCore::SVGPathSegLinetoAbs *this)
{
  return 4;
}

uint64_t WebCore::SVGPathSegLinetoAbs::pathSegTypeAsLetter(WebCore::SVGPathSegLinetoAbs *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::SVGPathSegLinetoAbs::clone@<X0>(WebCore::SVGPathSegLinetoAbs *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_WORD *)(result + 24) = 0;
  *(_QWORD *)result = off_1E32FFF78;
  *(_QWORD *)(result + 28) = *(_QWORD *)((char *)this + 28);
  *(_QWORD *)result = off_1E3300018;
  *a2 = result;
  return result;
}

uint64_t WebCore::SVGPathSegLinetoRel::pathSegType(WebCore::SVGPathSegLinetoRel *this)
{
  return 5;
}

uint64_t WebCore::SVGPathSegLinetoRel::pathSegTypeAsLetter(WebCore::SVGPathSegLinetoRel *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::SVGPathSegLinetoRel::clone@<X0>(WebCore::SVGPathSegLinetoRel *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_WORD *)(result + 24) = 0;
  *(_QWORD *)result = off_1E32FFF78;
  *(_QWORD *)(result + 28) = *(_QWORD *)((char *)this + 28);
  *(_QWORD *)result = off_1E3300068;
  *a2 = result;
  return result;
}

uint64_t WebCore::SVGPathSegCurvetoCubicAbs::pathSegType(WebCore::SVGPathSegCurvetoCubicAbs *this)
{
  return 6;
}

uint64_t WebCore::SVGPathSegCurvetoCubicAbs::pathSegTypeAsLetter(WebCore::SVGPathSegCurvetoCubicAbs *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

__n128 WebCore::SVGPathSegCurvetoCubicAbs::clone@<Q0>(WebCore::SVGPathSegCurvetoCubicAbs *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  __n128 result;

  v4 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)(v4 + 16) = 0;
  *(_WORD *)(v4 + 24) = 0;
  *(_QWORD *)v4 = off_1E33001F8;
  result = *(__n128 *)((char *)this + 28);
  *(_QWORD *)(v4 + 44) = *(_QWORD *)((char *)this + 44);
  *(__n128 *)(v4 + 28) = result;
  *(_QWORD *)v4 = off_1E33001A8;
  *a2 = v4;
  return result;
}

uint64_t WebCore::SVGPathSegCurvetoCubicRel::pathSegType(WebCore::SVGPathSegCurvetoCubicRel *this)
{
  return 7;
}

uint64_t WebCore::SVGPathSegCurvetoCubicRel::pathSegTypeAsLetter(WebCore::SVGPathSegCurvetoCubicRel *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

__n128 WebCore::SVGPathSegCurvetoCubicRel::clone@<Q0>(WebCore::SVGPathSegCurvetoCubicRel *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  __n128 result;

  v4 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)(v4 + 16) = 0;
  *(_WORD *)(v4 + 24) = 0;
  *(_QWORD *)v4 = off_1E33001F8;
  result = *(__n128 *)((char *)this + 28);
  *(_QWORD *)(v4 + 44) = *(_QWORD *)((char *)this + 44);
  *(__n128 *)(v4 + 28) = result;
  *(_QWORD *)v4 = off_1E3300248;
  *a2 = v4;
  return result;
}

uint64_t WebCore::SVGPathSegCurvetoQuadraticAbs::pathSegType(WebCore::SVGPathSegCurvetoQuadraticAbs *this)
{
  return 8;
}

uint64_t WebCore::SVGPathSegCurvetoQuadraticAbs::pathSegTypeAsLetter(WebCore::SVGPathSegCurvetoQuadraticAbs *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

__n128 WebCore::SVGPathSegCurvetoQuadraticAbs::clone@<Q0>(WebCore::SVGPathSegCurvetoQuadraticAbs *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  __n128 result;

  v4 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)(v4 + 16) = 0;
  *(_WORD *)(v4 + 24) = 0;
  *(_QWORD *)v4 = off_1E3300108;
  result = *(__n128 *)((char *)this + 28);
  *(__n128 *)(v4 + 28) = result;
  *(_QWORD *)v4 = off_1E33000B8;
  *a2 = v4;
  return result;
}

uint64_t WebCore::SVGPathSegCurvetoQuadraticRel::pathSegType(WebCore::SVGPathSegCurvetoQuadraticRel *this)
{
  return 9;
}

uint64_t WebCore::SVGPathSegCurvetoQuadraticRel::pathSegTypeAsLetter(WebCore::SVGPathSegCurvetoQuadraticRel *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

__n128 WebCore::SVGPathSegCurvetoQuadraticRel::clone@<Q0>(WebCore::SVGPathSegCurvetoQuadraticRel *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  __n128 result;

  v4 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)(v4 + 16) = 0;
  *(_WORD *)(v4 + 24) = 0;
  *(_QWORD *)v4 = off_1E3300108;
  result = *(__n128 *)((char *)this + 28);
  *(__n128 *)(v4 + 28) = result;
  *(_QWORD *)v4 = off_1E3300158;
  *a2 = v4;
  return result;
}

uint64_t WebCore::SVGPathSegArcAbs::pathSegType(WebCore::SVGPathSegArcAbs *this)
{
  return 10;
}

uint64_t WebCore::SVGPathSegArcAbs::pathSegTypeAsLetter(WebCore::SVGPathSegArcAbs *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

__n128 WebCore::SVGPathSegArcAbs::clone@<Q0>(WebCore::SVGPathSegArcAbs *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  __n128 result;

  v4 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)(v4 + 16) = 0;
  *(_WORD *)(v4 + 24) = 0;
  *(_QWORD *)v4 = off_1E33002E8;
  result = *(__n128 *)((char *)this + 28);
  *(_QWORD *)(v4 + 44) = *(_QWORD *)((char *)this + 44);
  *(__n128 *)(v4 + 28) = result;
  *(_QWORD *)v4 = off_1E3300298;
  *a2 = v4;
  return result;
}

uint64_t WebCore::SVGPathSegArcRel::pathSegType(WebCore::SVGPathSegArcRel *this)
{
  return 11;
}

uint64_t WebCore::SVGPathSegArcRel::pathSegTypeAsLetter(WebCore::SVGPathSegArcRel *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

__n128 WebCore::SVGPathSegArcRel::clone@<Q0>(WebCore::SVGPathSegArcRel *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  __n128 result;

  v4 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)(v4 + 16) = 0;
  *(_WORD *)(v4 + 24) = 0;
  *(_QWORD *)v4 = off_1E33002E8;
  result = *(__n128 *)((char *)this + 28);
  *(_QWORD *)(v4 + 44) = *(_QWORD *)((char *)this + 44);
  *(__n128 *)(v4 + 28) = result;
  *(_QWORD *)v4 = off_1E3300338;
  *a2 = v4;
  return result;
}

uint64_t WebCore::SVGPathSegLinetoHorizontalAbs::pathSegType(WebCore::SVGPathSegLinetoHorizontalAbs *this)
{
  return 12;
}

uint64_t WebCore::SVGPathSegLinetoHorizontalAbs::pathSegTypeAsLetter(WebCore::SVGPathSegLinetoHorizontalAbs *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::SVGPathSegLinetoHorizontalAbs::clone@<X0>(WebCore::SVGPathSegLinetoHorizontalAbs *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_WORD *)(result + 24) = 0;
  *(_QWORD *)result = off_1E32FFDE8;
  *(_DWORD *)(result + 28) = *((_DWORD *)this + 7);
  *(_QWORD *)result = off_1E32FFD98;
  *a2 = result;
  return result;
}

uint64_t WebCore::SVGPathSegLinetoHorizontalRel::pathSegType(WebCore::SVGPathSegLinetoHorizontalRel *this)
{
  return 13;
}

uint64_t WebCore::SVGPathSegLinetoHorizontalRel::pathSegTypeAsLetter(WebCore::SVGPathSegLinetoHorizontalRel *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::SVGPathSegLinetoHorizontalRel::clone@<X0>(WebCore::SVGPathSegLinetoHorizontalRel *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_WORD *)(result + 24) = 0;
  *(_QWORD *)result = off_1E32FFDE8;
  *(_DWORD *)(result + 28) = *((_DWORD *)this + 7);
  *(_QWORD *)result = off_1E32FFE38;
  *a2 = result;
  return result;
}

uint64_t WebCore::SVGPathSegLinetoVerticalAbs::pathSegType(WebCore::SVGPathSegLinetoVerticalAbs *this)
{
  return 14;
}

uint64_t WebCore::SVGPathSegLinetoVerticalAbs::pathSegTypeAsLetter(WebCore::SVGPathSegLinetoVerticalAbs *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::SVGPathSegLinetoVerticalAbs::clone@<X0>(WebCore::SVGPathSegLinetoVerticalAbs *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_WORD *)(result + 24) = 0;
  *(_QWORD *)result = off_1E32FFDE8;
  *(_DWORD *)(result + 28) = *((_DWORD *)this + 7);
  *(_QWORD *)result = off_1E32FFE88;
  *a2 = result;
  return result;
}

uint64_t WebCore::SVGPathSegLinetoVerticalRel::pathSegType(WebCore::SVGPathSegLinetoVerticalRel *this)
{
  return 15;
}

uint64_t WebCore::SVGPathSegLinetoVerticalRel::pathSegTypeAsLetter(WebCore::SVGPathSegLinetoVerticalRel *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::SVGPathSegLinetoVerticalRel::clone@<X0>(WebCore::SVGPathSegLinetoVerticalRel *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_WORD *)(result + 24) = 0;
  *(_QWORD *)result = off_1E32FFDE8;
  *(_DWORD *)(result + 28) = *((_DWORD *)this + 7);
  *(_QWORD *)result = off_1E32FFED8;
  *a2 = result;
  return result;
}

uint64_t WebCore::SVGPathSegCurvetoCubicSmoothAbs::pathSegType(WebCore::SVGPathSegCurvetoCubicSmoothAbs *this)
{
  return 16;
}

uint64_t WebCore::SVGPathSegCurvetoCubicSmoothAbs::pathSegTypeAsLetter(WebCore::SVGPathSegCurvetoCubicSmoothAbs *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

__n128 WebCore::SVGPathSegCurvetoCubicSmoothAbs::clone@<Q0>(WebCore::SVGPathSegCurvetoCubicSmoothAbs *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  __n128 result;

  v4 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)(v4 + 16) = 0;
  *(_WORD *)(v4 + 24) = 0;
  *(_QWORD *)v4 = off_1E3300108;
  result = *(__n128 *)((char *)this + 28);
  *(__n128 *)(v4 + 28) = result;
  *(_QWORD *)v4 = off_1E3300428;
  *a2 = v4;
  return result;
}

uint64_t WebCore::SVGPathSegCurvetoCubicSmoothRel::pathSegType(WebCore::SVGPathSegCurvetoCubicSmoothRel *this)
{
  return 17;
}

uint64_t WebCore::SVGPathSegCurvetoCubicSmoothRel::pathSegTypeAsLetter(WebCore::SVGPathSegCurvetoCubicSmoothRel *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

__n128 WebCore::SVGPathSegCurvetoCubicSmoothRel::clone@<Q0>(WebCore::SVGPathSegCurvetoCubicSmoothRel *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  __n128 result;

  v4 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)(v4 + 16) = 0;
  *(_WORD *)(v4 + 24) = 0;
  *(_QWORD *)v4 = off_1E3300108;
  result = *(__n128 *)((char *)this + 28);
  *(__n128 *)(v4 + 28) = result;
  *(_QWORD *)v4 = off_1E3300478;
  *a2 = v4;
  return result;
}

uint64_t WebCore::SVGPathSegCurvetoQuadraticSmoothAbs::pathSegType(WebCore::SVGPathSegCurvetoQuadraticSmoothAbs *this)
{
  return 18;
}

uint64_t WebCore::SVGPathSegCurvetoQuadraticSmoothAbs::pathSegTypeAsLetter(WebCore::SVGPathSegCurvetoQuadraticSmoothAbs *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::SVGPathSegCurvetoQuadraticSmoothAbs::clone@<X0>(WebCore::SVGPathSegCurvetoQuadraticSmoothAbs *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_WORD *)(result + 24) = 0;
  *(_QWORD *)result = off_1E32FFF78;
  *(_QWORD *)(result + 28) = *(_QWORD *)((char *)this + 28);
  *(_QWORD *)result = off_1E3300388;
  *a2 = result;
  return result;
}

uint64_t WebCore::SVGPathSegCurvetoQuadraticSmoothRel::pathSegType(WebCore::SVGPathSegCurvetoQuadraticSmoothRel *this)
{
  return 19;
}

uint64_t WebCore::SVGPathSegCurvetoQuadraticSmoothRel::pathSegTypeAsLetter(WebCore::SVGPathSegCurvetoQuadraticSmoothRel *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

uint64_t WebCore::SVGPathSegCurvetoQuadraticSmoothRel::clone@<X0>(WebCore::SVGPathSegCurvetoQuadraticSmoothRel *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_WORD *)(result + 24) = 0;
  *(_QWORD *)result = off_1E32FFF78;
  *(_QWORD *)(result + 28) = *(_QWORD *)((char *)this + 28);
  *(_QWORD *)result = off_1E33003D8;
  *a2 = result;
  return result;
}

uint64_t WebCore::jsSVGPathSegListPrototypeFunction_clear(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  JSC::VM *v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  JSValue v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  WTF *v22;
  uint64_t v23;
  _DWORD *v24;
  JSC::VM *v25;
  char v26[8];
  WTF::StringImpl *v27;
  int v28;
  char v29;

  v4 = *((_QWORD *)a2 + 5);
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v25 = v5;
  if ((v4 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v25, "SVGPathSegList", "clear");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSSVGPathSegList::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSSVGPathSegList::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v25, "SVGPathSegList", "clear");
  v11 = *(_QWORD *)(v4 + 24);
  WebCore::SVGPathSegList::itemsWillChange(v11, a2);
  v12 = *(unsigned __int8 *)(v11 + 24);
  if (v12 == 1)
  {
    v13 = 4;
    v26[0] = 4;
    v14 = 1;
    v28 = 1;
    v27 = 0;
  }
  else
  {
    v26[0] = 1;
    v28 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
    if (*(_DWORD *)(v11 + 40))
    {
      v21 = *(unsigned int *)(v11 + 44);
      v22 = *(WTF **)(v11 + 32);
      if ((_DWORD)v21)
      {
        v23 = 8 * v21;
        do
        {
          v24 = *(_DWORD **)v22;
          *(_QWORD *)v22 = 0;
          if (v24)
          {
            if (v24[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 8))(v24);
            else
              --v24[2];
          }
          v22 = (WTF *)((char *)v22 + 8);
          v23 -= 8;
        }
        while (v23);
        v22 = *(WTF **)(v11 + 32);
        *(_DWORD *)(v11 + 44) = 0;
      }
      if (v22)
      {
        *(_QWORD *)(v11 + 32) = 0;
        *(_DWORD *)(v11 + 40) = 0;
        WTF::fastFree(v22, v15);
      }
    }
    v16 = *(_QWORD *)(v11 + 16);
    if (v16)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 32))(v16, v11);
    v13 = 0;
    v14 = 0;
  }
  ((uint64_t (**)(char *, char *))off_1E32F83C8)[v14](&v29, v26);
  if (v12 != 1)
    return 10;
  v26[0] = v13;
  v27 = 0;
  if (!*((_QWORD *)v5 + 2))
  {
    v18.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v13, (JSC::JSGlobalObject *)&v27);
    JSC::VM::throwException(v5, this, v18);
    v20 = v27;
    v27 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v19);
      else
        *(_DWORD *)v20 -= 2;
    }
  }
  return 0;
}

_BYTE *WebCore::jsSVGPathSegListPrototypeFunction_initialize(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 v20;
  char **v21;
  BOOL v22;
  unint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  int v27;
  unsigned __int8 v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  _DWORD *v32;
  int v33;
  int v34;
  uint64_t v35;
  _DWORD *v36;
  JSValue v39;
  JSValue v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  WTF *v44;
  uint64_t v45;
  _DWORD *v46;
  JSC::VM *v47;
  _DWORD *v48;
  _DWORD *v49;
  uint64_t v50;
  int v51;
  _DWORD *v52;
  JSC::VM *v53;
  WTF::StringImpl *v54;
  int v55;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v47 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v47, "SVGPathSegList", "initialize");
  v11 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
  v12 = *(unsigned int *)(v11 + 0x4C);
  v13 = *(_DWORD *)(v11 + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSSVGPathSegList::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSSVGPathSegList::s_info && v14 != 0);
  }
  if (!v13)
    return WebCore::throwThisTypeError((int)this, (int)&v47, "SVGPathSegList", "initialize");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v39.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v39);
  }
  v17 = *(_QWORD *)(v10 + 24);
  v18 = *((_QWORD *)a2 + 6);
  v53 = v9;
  if ((v18 & 0xFFFE000000000002) != 0)
    goto LABEL_24;
  v19 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
  v20 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
  v21 = (char **)(16 * v19);
  if ((_DWORD)v19)
    v22 = v21 == &WebCore::JSSVGPathSeg::s_info;
  else
    v22 = 1;
  if (!v22)
  {
    do
    {
      v21 = (char **)v21[2];
      v20 = v21 != 0;
    }
    while (v21 != &WebCore::JSSVGPathSeg::s_info && v21 != 0);
  }
  if (v20 && (v25 = *(_DWORD **)(v18 + 24)) != 0)
  {
    v26 = *(_QWORD *)(v11 + 40);
    ++v25[2];
    v48 = v25;
    WebCore::SVGPathSegList::itemsWillChange(v17, a2);
    v27 = *(unsigned __int8 *)(v17 + 24);
    if (v27 == 1)
    {
      v28 = 4;
      LOBYTE(v53) = 4;
      v29 = 1;
      v55 = 1;
      v54 = 0;
      LOBYTE(v49) = 4;
      v50 = 0;
      v51 = 1;
    }
    else
    {
      LOBYTE(v53) = 1;
      v55 = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17);
      if (*(_DWORD *)(v17 + 40))
      {
        v43 = *(unsigned int *)(v17 + 44);
        v44 = *(WTF **)(v17 + 32);
        if ((_DWORD)v43)
        {
          v45 = 8 * v43;
          do
          {
            v46 = *(_DWORD **)v44;
            *(_QWORD *)v44 = 0;
            if (v46)
            {
              if (v46[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v46 + 8))(v46);
              else
                --v46[2];
            }
            v44 = (WTF *)((char *)v44 + 8);
            v45 -= 8;
          }
          while (v45);
          v44 = *(WTF **)(v17 + 32);
          *(_DWORD *)(v17 + 44) = 0;
        }
        if (v44)
        {
          *(_QWORD *)(v17 + 32) = 0;
          *(_DWORD *)(v17 + 40) = 0;
          WTF::fastFree(v44, v30);
        }
      }
      (*(void (**)(_DWORD **__return_ptr, uint64_t, _DWORD **))(*(_QWORD *)v17 + 80))(&v52, v17, &v48);
      v31 = *(_QWORD *)(v17 + 16);
      if (v31)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v31 + 32))(v31, v17);
      v29 = 0;
      v28 = v52;
      v49 = v52;
      v51 = 0;
    }
    ((uint64_t (**)(_DWORD **, char *))off_1E32F83C8)[v29](&v52, (char *)&v53);
    if (v27 == 1)
    {
      LOBYTE(v53) = v28;
      v50 = 0;
      v54 = 0;
      if (!*((_QWORD *)v9 + 2))
      {
        v40.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v28, (JSC::JSGlobalObject *)&v54);
        JSC::VM::throwException(v9, this, v40);
        v42 = v54;
        v54 = 0;
        if (v42)
        {
          if (*(_DWORD *)v42 == 2)
            WTF::StringImpl::destroy(v42, v41);
          else
            *(_DWORD *)v42 -= 2;
        }
      }
      v24 = 0;
      v35 = 1;
    }
    else
    {
      v32 = v49;
      v49 = 0;
      v24 = WebCore::wrap<WebCore::SVGPathSeg>((uint64_t)this, v26, v32);
      v33 = v32[2];
      v34 = v33 - 1;
      if (v33 == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v32 + 8))(v32);
        v35 = 0;
      }
      else
      {
        v35 = 0;
        v32[2] = v34;
      }
    }
    ((void (*)(JSC::VM **, _DWORD **))off_1E32FA770[v35])(&v53, &v49);
    v51 = -1;
    v36 = v48;
    v48 = 0;
    if (v36)
    {
      if (v36[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v36 + 8))(v36);
      else
        --v36[2];
    }
  }
  else
  {
LABEL_24:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v53, 0, "newItem", 8, "SVGPathSegList", 15, a8, "initialize", 11, "SVGPathSeg", 11);
    return 0;
  }
  return (_BYTE *)v24;
}

_BYTE *WebCore::jsSVGPathSegListPrototypeFunction_getItem(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  _DWORD *v16;
  unint64_t v17;
  JSValue v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  JSValue v23;
  WebCore *v24;
  JSC::JSGlobalObject *v25;
  JSC::CallFrame *v26;
  JSC::VM *v27;
  int v28[2];
  WTF::StringImpl *v29;
  int v30;
  _DWORD v31[2];
  char v32[8];
  WTF::StringImpl *v33;
  int v34;
  char v35;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v27 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v27, "SVGPathSegList", "getItem");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSSVGPathSegList::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSSVGPathSegList::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v27, "SVGPathSegList", "getItem");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v20.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v20);
  }
  v11 = *(_QWORD *)(v5 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v31);
  if (v31[1])
    return 0;
  v12 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  v13 = v31[0];
  v14 = *(_DWORD *)(v11 + 44);
  if (!v14)
  {
    if (!*(_DWORD *)(*(_QWORD *)(v11 + 72) + 20))
      goto LABEL_19;
    WebCore::buildSVGPathSegListFromByteStream(v11 + 64, v11, 1);
    v14 = *(_DWORD *)(v11 + 44);
  }
  if (v14 > v13)
  {
    v32[0] = 1;
    v34 = 0;
    (*(void (**)(int *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v11 + 48))(v28, v11, v13);
    v15 = 0;
    goto LABEL_20;
  }
LABEL_19:
  v32[0] = 0;
  v15 = 1;
  v34 = 1;
  v33 = 0;
  LOBYTE(v28[0]) = 0;
  v29 = 0;
LABEL_20:
  v30 = v15;
  ((uint64_t (**)(char *, char *))off_1E32F83C8)[v15](&v35, v32);
  if (!v30)
  {
    v16 = *(_DWORD **)v28;
    *(_QWORD *)v28 = 0;
    v17 = WebCore::wrap<WebCore::SVGPathSeg>((uint64_t)this, v12, v16);
    if (v16[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
    else
      --v16[2];
LABEL_23:
    if (v30 != -1)
      ((void (*)(char *, int *))off_1E32FA770[v30])(v32, v28);
    return (_BYTE *)v17;
  }
  if (v30 == 1)
  {
    v21 = (WTF::StringImpl *)LOBYTE(v28[0]);
    v32[0] = v28[0];
    v22 = v29;
    v29 = 0;
    v33 = v22;
    if (!*((_QWORD *)v4 + 2))
    {
      v23.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v28[0]), (JSC::JSGlobalObject *)&v33);
      JSC::VM::throwException(v4, this, v23);
      v22 = v33;
    }
    v33 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v21);
      else
        *(_DWORD *)v22 -= 2;
    }
    v17 = 0;
    goto LABEL_23;
  }
  v24 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsSVGPathSegListPrototypeFunction_insertItemBefore(v24, v25, v26);
}

_BYTE *WebCore::jsSVGPathSegListPrototypeFunction_insertItemBefore(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  char **v20;
  BOOL v21;
  unint64_t v23;
  _DWORD *v24;
  void *v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  unsigned __int8 v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  int v35;
  int v36;
  uint64_t v37;
  _DWORD *v38;
  JSValue v41;
  JSValue v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  JSC::VM *v45;
  _DWORD *v46;
  _DWORD *v47;
  uint64_t v48;
  int v49;
  _DWORD v50[2];
  _DWORD *v51;
  JSC::VM *v52;
  WTF::StringImpl *v53;
  int v54;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v45 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v45, "SVGPathSegList", "insertItemBefore");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSSVGPathSegList::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSSVGPathSegList::s_info && v13 != 0);
  }
  if (!v12)
    return WebCore::throwThisTypeError((int)this, (int)&v45, "SVGPathSegList", "insertItemBefore");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v41.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v41);
  }
  v16 = *(_QWORD *)(v10 + 24);
  v17 = *((_QWORD *)a2 + 6);
  v52 = v9;
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_24;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSSVGPathSeg::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSSVGPathSeg::s_info && v20 != 0);
  }
  if (v19 && (v24 = *(_DWORD **)(v17 + 24)) != 0)
  {
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v50);
    if (v50[1])
    {
      return 0;
    }
    else
    {
      v26 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
      ++v24[2];
      v46 = v24;
      v27 = v50[0];
      if (!*(_DWORD *)(v16 + 44) && *(_DWORD *)(*(_QWORD *)(v16 + 72) + 20))
        WebCore::buildSVGPathSegListFromByteStream(v16 + 64, v16, 1);
      WebCore::SVGPathSegList::itemsWillChange(v16, v25);
      v28 = *(unsigned __int8 *)(v16 + 24);
      if (v28 == 1)
      {
        v29 = 4;
        LOBYTE(v52) = 4;
        v30 = 1;
        v54 = 1;
        v53 = 0;
        LOBYTE(v47) = 4;
        v48 = 0;
        v49 = 1;
      }
      else
      {
        LOBYTE(v52) = 1;
        v54 = 0;
        v31 = *(_DWORD *)(v16 + 44);
        if (v31 >= v27)
          v32 = v27;
        else
          v32 = v31;
        (*(void (**)(_DWORD **__return_ptr, uint64_t, uint64_t, _DWORD **))(*(_QWORD *)v16 + 56))(&v51, v16, v32, &v46);
        v33 = *(_QWORD *)(v16 + 16);
        if (v33)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v33 + 32))(v33, v16);
        v30 = 0;
        v29 = v51;
        v47 = v51;
        v49 = 0;
      }
      ((uint64_t (**)(_DWORD **, char *))off_1E32F83C8)[v30](&v51, (char *)&v52);
      if (v28 == 1)
      {
        LOBYTE(v52) = v29;
        v48 = 0;
        v53 = 0;
        if (!*((_QWORD *)v9 + 2))
        {
          v42.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v29, (JSC::JSGlobalObject *)&v53);
          JSC::VM::throwException(v9, this, v42);
          v44 = v53;
          v53 = 0;
          if (v44)
          {
            if (*(_DWORD *)v44 == 2)
              WTF::StringImpl::destroy(v44, v43);
            else
              *(_DWORD *)v44 -= 2;
          }
        }
        v23 = 0;
        v37 = 1;
      }
      else
      {
        v34 = v47;
        v47 = 0;
        v23 = WebCore::wrap<WebCore::SVGPathSeg>((uint64_t)this, v26, v34);
        v35 = v34[2];
        v36 = v35 - 1;
        if (v35 == 1)
        {
          (*(void (**)(_DWORD *))(*(_QWORD *)v34 + 8))(v34);
          v37 = 0;
        }
        else
        {
          v37 = 0;
          v34[2] = v36;
        }
      }
      ((void (*)(JSC::VM **, _DWORD **))off_1E32FA770[v37])(&v52, &v47);
      v49 = -1;
      v38 = v46;
      v46 = 0;
      if (v38)
      {
        if (v38[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v38 + 8))(v38);
        else
          --v38[2];
      }
    }
  }
  else
  {
LABEL_24:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v52, 0, "newItem", 8, "SVGPathSegList", 15, a8, "insertItemBefore", 17, "SVGPathSeg", 11);
    return 0;
  }
  return (_BYTE *)v23;
}

_BYTE *WebCore::jsSVGPathSegListPrototypeFunction_replaceItem(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  WebCore::SVGPathSegList *v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  char **v20;
  BOOL v21;
  unint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  _DWORD *v28;
  JSValue v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  JSValue v34;
  WebCore *v35;
  JSC::JSGlobalObject *v36;
  JSC::CallFrame *v37;
  JSC::VM *v38;
  _DWORD *v39;
  int v40[2];
  WTF::StringImpl *v41;
  unsigned int v42;
  _DWORD v43[2];
  char v44[8];
  WTF::StringImpl *v45;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v38 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v38, "SVGPathSegList", "replaceItem");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSSVGPathSegList::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSSVGPathSegList::s_info && v13 != 0);
  }
  if (!v12)
    return WebCore::throwThisTypeError((int)this, (int)&v38, "SVGPathSegList", "replaceItem");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v31.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v31);
  }
  v16 = *(WebCore::SVGPathSegList **)(v10 + 24);
  v17 = *((_QWORD *)a2 + 6);
  *(_QWORD *)v40 = v9;
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_24;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSSVGPathSeg::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSSVGPathSeg::s_info && v20 != 0);
  }
  if (!v19 || (v24 = *(_DWORD **)(v17 + 24)) == 0)
  {
LABEL_24:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v40, 0, "newItem", 8, "SVGPathSegList", 15, a8, "replaceItem", 12, "SVGPathSeg", 11);
    return 0;
  }
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v43);
  if (v43[1])
    return 0;
  v25 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
  ++v24[2];
  v39 = v24;
  WebCore::SVGPathSegList::replaceItem((uint64_t)v40, v16, (uint64_t)&v39, v43[0]);
  v26 = v42;
  if (!v42)
  {
    v27 = *(_DWORD **)v40;
    *(_QWORD *)v40 = 0;
    v23 = WebCore::wrap<WebCore::SVGPathSeg>((uint64_t)this, v25, v27);
    if (v27[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v27 + 8))(v27);
    else
      --v27[2];
LABEL_30:
    ((void (*)(char *, int *))off_1E32FA770[v26])(v44, v40);
    v42 = -1;
    v28 = v39;
    v39 = 0;
    if (v28)
    {
      if (v28[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v28 + 8))(v28);
      else
        --v28[2];
    }
    return (_BYTE *)v23;
  }
  if (v42 == 1)
  {
    v32 = (WTF::StringImpl *)LOBYTE(v40[0]);
    v44[0] = v40[0];
    v33 = v41;
    v41 = 0;
    v45 = v33;
    if (!*((_QWORD *)v9 + 2))
    {
      v34.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v40[0]), (JSC::JSGlobalObject *)&v45);
      JSC::VM::throwException(v9, this, v34);
      v33 = v45;
    }
    v45 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2)
        WTF::StringImpl::destroy(v33, v32);
      else
        *(_DWORD *)v33 -= 2;
    }
    v23 = 0;
    goto LABEL_30;
  }
  v35 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsSVGPathSegListPrototypeFunction_removeItem(v35, v36, v37);
}

_BYTE *WebCore::jsSVGPathSegListPrototypeFunction_removeItem(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  _DWORD *v21;
  unint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  JSValue v28;
  JSValue v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WebCore *v32;
  JSC::JSGlobalObject *v33;
  JSC::CallFrame *v34;
  JSC::VM *v35;
  _DWORD v36[2];
  _DWORD *v37;
  char v38[8];
  WTF::StringImpl *v39;
  int v40;
  _DWORD *v41;
  uint64_t v42;
  int v43;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v35 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v35, "SVGPathSegList", "removeItem");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSSVGPathSegList::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSSVGPathSegList::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v35, "SVGPathSegList", "removeItem");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v28.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v28);
  }
  v11 = *(_QWORD *)(v5 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v36);
  if (v36[1])
    return 0;
  v13 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  v14 = v36[0];
  if (!*(_DWORD *)(v11 + 44) && *(_DWORD *)(*(_QWORD *)(v11 + 72) + 20))
    WebCore::buildSVGPathSegListFromByteStream(v11 + 64, v11, 1);
  WebCore::SVGPathSegList::itemsWillChange(v11, v12);
  if (*(_BYTE *)(v11 + 24) == 1)
  {
    v15 = 4;
    LOBYTE(v41) = 4;
    v16 = 1;
    v43 = 1;
    v42 = 0;
LABEL_24:
    v38[0] = v15;
    v18 = 1;
    v40 = 1;
    ((uint64_t (**)(_DWORD **, char *))off_1E32F83C8)[v16](&v37, (char *)&v41);
    v20 = 0;
    v39 = 0;
    LOBYTE(v41) = v15;
    v42 = 0;
    v19 = 1;
    v43 = 1;
    goto LABEL_25;
  }
  LOBYTE(v41) = 1;
  v43 = 0;
  if (*(_DWORD *)(v11 + 44) <= v14)
  {
    v15 = 0;
    v16 = 0;
    goto LABEL_24;
  }
  v38[0] = 1;
  v40 = 0;
  (*(void (**)(_DWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v11 + 72))(&v37, v11, v14);
  v17 = *(_QWORD *)(v11 + 16);
  if (v17)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 32))(v17, v11);
  v18 = 0;
  v19 = 0;
  v15 = v37;
  v41 = v37;
  v43 = 0;
  v20 = 1;
LABEL_25:
  ((uint64_t (**)(_DWORD **, char *))off_1E32F83C8)[v19](&v37, v38);
  if ((v20 & 1) != 0)
  {
    v21 = v41;
    v41 = 0;
    v22 = WebCore::wrap<WebCore::SVGPathSeg>((uint64_t)this, v13, v21);
    v23 = v21[2];
    v24 = v23 - 1;
    if (v23 == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
      v25 = 0;
    }
    else
    {
      v25 = 0;
      v21[2] = v24;
    }
LABEL_28:
    ((void (*)(char *, _DWORD **))off_1E32FA770[v25])(v38, &v41);
    return (_BYTE *)v22;
  }
  if ((v18 & 1) != 0)
  {
    v38[0] = v15;
    v42 = 0;
    v39 = 0;
    if (!*((_QWORD *)v4 + 2))
    {
      v29.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v15, (JSC::JSGlobalObject *)&v39);
      JSC::VM::throwException(v4, this, v29);
      v31 = v39;
      v39 = 0;
      if (v31)
      {
        if (*(_DWORD *)v31 == 2)
          WTF::StringImpl::destroy(v31, v30);
        else
          *(_DWORD *)v31 -= 2;
      }
    }
    v22 = 0;
    v25 = 1;
    goto LABEL_28;
  }
  v32 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsSVGPathSegListPrototypeFunction_appendItem(v32, v33, v34);
}

_BYTE *WebCore::jsSVGPathSegListPrototypeFunction_appendItem(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 v20;
  char **v21;
  BOOL v22;
  unint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  int v29;
  JSC::VM *v30;
  _DWORD *v31;
  int v32;
  void *v33;
  _DWORD *v34;
  _DWORD *v35;
  __int128 *v36;
  uint64_t v37;
  size_t v38;
  const void *v39;
  size_t v40;
  size_t v41;
  unint64_t v42;
  unint64_t v43;
  __int128 *v44;
  WTF *v45;
  uint64_t v46;
  int v47;
  unsigned __int8 v48;
  uint64_t v49;
  uint64_t v50;
  _DWORD *v51;
  int v52;
  int v53;
  uint64_t v54;
  _DWORD *v55;
  uint64_t v57;
  WTF *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  void *v62;
  void *v63;
  JSValue v65;
  JSValue v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  int v69;
  WTF *v70;
  uint64_t v71;
  JSC::VM *v72;
  _DWORD *v73;
  _DWORD *v74;
  uint64_t v75;
  int v76;
  _DWORD *v77;
  JSC::VM *v78;
  __int128 *v79;
  int v80;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v72 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v72, "SVGPathSegList", "appendItem");
  v11 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
  v12 = *(unsigned int *)(v11 + 0x4C);
  v13 = *(_DWORD *)(v11 + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSSVGPathSegList::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSSVGPathSegList::s_info && v14 != 0);
  }
  if (!v13)
    return WebCore::throwThisTypeError((int)this, (int)&v72, "SVGPathSegList", "appendItem");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v65.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v65);
  }
  v17 = *(_QWORD *)(v10 + 24);
  v18 = *((_QWORD *)a2 + 6);
  v78 = v9;
  if ((v18 & 0xFFFE000000000002) != 0)
    goto LABEL_24;
  v19 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
  v20 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
  v21 = (char **)(16 * v19);
  if ((_DWORD)v19)
    v22 = v21 == &WebCore::JSSVGPathSeg::s_info;
  else
    v22 = 1;
  if (!v22)
  {
    do
    {
      v21 = (char **)v21[2];
      v20 = v21 != 0;
    }
    while (v21 != &WebCore::JSSVGPathSeg::s_info && v21 != 0);
  }
  if (!v20 || (v25 = *(_DWORD **)(v18 + 24)) == 0)
  {
LABEL_24:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v78, 0, "newItem", 8, "SVGPathSegList", 15, a8, "appendItem", 11, "SVGPathSeg", 11);
    return 0;
  }
  v26 = *(_QWORD *)(v11 + 40);
  ++v25[2];
  v73 = v25;
  if (!*(_DWORD *)(v17 + 44) && *(_DWORD *)(*(_QWORD *)(v17 + 72) + 20))
    WebCore::buildSVGPathSegListFromByteStream(v17 + 64, v17, 1);
  if (*(_DWORD *)(*(_QWORD *)(v17 + 72) + 20))
  {
    v71 = v26;
    ++v25[2];
    v74 = v25;
    v27 = WTF::fastMalloc((WTF *)0xA0);
    v28 = (_DWORD *)v27;
    *(_DWORD *)(v27 + 8) = 1;
    *(_QWORD *)(v27 + 16) = 0;
    *(_WORD *)(v27 + 24) = 0;
    *(_QWORD *)(v27 + 32) = 0;
    *(_QWORD *)(v27 + 40) = 0;
    *(_QWORD *)v27 = off_1E32FFB80;
    *(_QWORD *)(v27 + 56) = 0;
    *(_QWORD *)(v27 + 64) = 0;
    *(_QWORD *)(v27 + 48) = &unk_1E32FFBF8;
    {
      v29 = WebCore::SVGPathByteStream::Data::empty(void)::singleton + 1;
    }
    else
    {
      xmmword_1EE2DFB60 = 0u;
      unk_1EE2DFB70 = 0u;
      xmmword_1EE2DFB40 = 0u;
      unk_1EE2DFB50 = 0u;
      WebCore::SVGPathByteStream::Data::empty(void)::singleton = 0u;
      *(_OWORD *)&dword_1EE2DFB30 = 0u;
      v29 = 2;
    }
    LODWORD(WebCore::SVGPathByteStream::Data::empty(void)::singleton) = v29;
    *(_QWORD *)(v27 + 72) = &WebCore::SVGPathByteStream::Data::empty(void)::singleton;
    *(_BYTE *)(v27 + 80) = 0;
    *(_BYTE *)(v27 + 152) = 0;
    WebCore::SVGPropertyList<WebCore::SVGPathSeg>::append(v27, (char *)&v74);
    v30 = v78;
    v78 = 0;
    if (v30)
    {
      if (*((_DWORD *)v30 + 2) == 1)
        (*(void (**)(JSC::VM *))(*(_QWORD *)v30 + 8))(v30);
      else
        --*((_DWORD *)v30 + 2);
    }
    v31 = v74;
    v74 = 0;
    if (v31)
    {
      if (v31[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v31 + 8))(v31);
      else
        --v31[2];
    }
    v78 = 0;
    {
      v32 = WebCore::SVGPathByteStream::Data::empty(void)::singleton + 1;
    }
    else
    {
      xmmword_1EE2DFB60 = 0u;
      unk_1EE2DFB70 = 0u;
      xmmword_1EE2DFB40 = 0u;
      unk_1EE2DFB50 = 0u;
      WebCore::SVGPathByteStream::Data::empty(void)::singleton = 0u;
      *(_OWORD *)&dword_1EE2DFB30 = 0u;
      v32 = 2;
    }
    LODWORD(WebCore::SVGPathByteStream::Data::empty(void)::singleton) = v32;
    v79 = &WebCore::SVGPathByteStream::Data::empty(void)::singleton;
    if (!WebCore::buildSVGPathByteStreamFromSVGPathSegList((uint64_t)v28, &v78, 1, 0))
      goto LABEL_49;
    v34 = WTF::DataRef<WebCore::SVGPathByteStream::Data>::access((uint64_t *)(v17 + 72));
    v35 = v34;
    v36 = v79;
    v37 = v34[22];
    if ((_DWORD)v37 != -1)
    {
      if (!(_DWORD)v37)
        goto LABEL_45;
      ((void (*)(_DWORD **, _DWORD *))off_1E32FA758[v37])(&v74, v34 + 8);
    }
    v35[22] = 0;
LABEL_45:
    v38 = *((unsigned int *)v36 + 5);
    if (!(_DWORD)v38)
    {
LABEL_49:
      v44 = v79;
      v79 = 0;
      v26 = v71;
      if (v44)
      {
        if (*(_DWORD *)v44 == 1)
        {
          v57 = *((unsigned int *)v44 + 22);
          if ((_DWORD)v57 != -1)
            ((void (*)(_DWORD **, __int128 *))off_1E32FA758[v57])(&v74, v44 + 2);
          *((_DWORD *)v44 + 22) = -1;
          v58 = (WTF *)*((_QWORD *)v44 + 1);
          if (v58)
          {
            *((_QWORD *)v44 + 1) = 0;
            *((_DWORD *)v44 + 4) = 0;
            WTF::fastFree(v58, v33);
          }
          WTF::fastFree((WTF *)v44, v33);
        }
        else
        {
          --*(_DWORD *)v44;
        }
      }
      v45 = v78;
      if (v78)
      {
        *((_QWORD *)v78 + 1) = 0;
        v78 = 0;
        if (*(_DWORD *)v45 == 1)
          WTF::fastFree(v45, v33);
        else
          --*(_DWORD *)v45;
      }
      if (v28[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v28 + 8))(v28);
      else
        --v28[2];
      goto LABEL_55;
    }
    v39 = (const void *)*((_QWORD *)v36 + 1);
    v40 = v35[4];
    v41 = v35[5];
    v42 = v41 + v38;
    if (v41 + v38 > v40)
    {
      v59 = v40 + (v40 >> 2);
      if (v59 >= 0x10)
        v60 = v59 + 1;
      else
        v60 = 16;
      if (v60 <= v42)
        v61 = v41 + v38;
      else
        v61 = v60;
      if (HIDWORD(v61))
        goto LABEL_106;
      v69 = v61;
      v70 = (WTF *)*((_QWORD *)v35 + 1);
      v62 = (void *)WTF::fastMalloc((WTF *)v61);
      v35[4] = v69;
      *((_QWORD *)v35 + 1) = v62;
      memcpy(v62, v70, v41);
      if (v70)
      {
        if (*((WTF **)v35 + 1) == v70)
        {
          *((_QWORD *)v35 + 1) = 0;
          v35[4] = 0;
        }
        WTF::fastFree(v70, v63);
      }
    }
    v43 = v35[5];
    if (v42 >= v43)
    {
      memcpy((void *)(*((_QWORD *)v35 + 1) + v43), v39, v38);
      v35[5] = v42;
      goto LABEL_49;
    }
LABEL_106:
    __break(0xC471u);
    JUMPOUT(0x194F4F9CCLL);
  }
LABEL_55:
  if (*(_BYTE *)(v17 + 152))
  {
    v46 = *(unsigned int *)(v17 + 144);
    if ((_DWORD)v46 != -1)
      ((void (*)(JSC::VM **, uint64_t, JSC::CallFrame *))off_1E32FA758[v46])(&v78, v17 + 88, a3);
    *(_DWORD *)(v17 + 144) = -1;
    *(_BYTE *)(v17 + 152) = 0;
  }
  v47 = *(unsigned __int8 *)(v17 + 24);
  if (v47 == 1)
  {
    v48 = 4;
    LOBYTE(v78) = 4;
    v49 = 1;
    v80 = 1;
    v79 = 0;
    LOBYTE(v74) = 4;
    v75 = 0;
    v76 = 1;
  }
  else
  {
    LOBYTE(v78) = 1;
    v80 = 0;
    (*(void (**)(_DWORD **__return_ptr, uint64_t, _DWORD **, JSC::CallFrame *))(*(_QWORD *)v17 + 80))(&v77, v17, &v73, a3);
    v50 = *(_QWORD *)(v17 + 16);
    if (v50)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v50 + 32))(v50, v17);
    v49 = 0;
    v48 = v77;
    v74 = v77;
    v76 = 0;
  }
  ((void (*)(_DWORD **, JSC::VM **, JSC::CallFrame *))off_1E32F83C8[v49])(&v77, &v78, a3);
  if (v47 == 1)
  {
    LOBYTE(v78) = v48;
    v75 = 0;
    v79 = 0;
    if (!*((_QWORD *)v9 + 2))
    {
      v66.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v48, (JSC::JSGlobalObject *)&v79);
      JSC::VM::throwException(v9, this, v66);
      v68 = (WTF::StringImpl *)v79;
      v79 = 0;
      if (v68)
      {
        if (*(_DWORD *)v68 == 2)
          WTF::StringImpl::destroy(v68, v67);
        else
          *(_DWORD *)v68 -= 2;
      }
    }
    v24 = 0;
    v54 = 1;
  }
  else
  {
    v51 = v74;
    v74 = 0;
    v24 = WebCore::wrap<WebCore::SVGPathSeg>((uint64_t)this, v26, v51);
    v52 = v51[2];
    v53 = v52 - 1;
    if (v52 == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v51 + 8))(v51);
      v54 = 0;
    }
    else
    {
      v54 = 0;
      v51[2] = v53;
    }
  }
  ((void (*)(JSC::VM **, _DWORD **))off_1E32FA770[v54])(&v78, &v74);
  v76 = -1;
  v55 = v73;
  v73 = 0;
  if (v55)
  {
    if (v55[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v55 + 8))(v55);
    else
      --v55[2];
  }
  return (_BYTE *)v24;
}

uint64_t WebCore::SVGPathSegList::itemsWillChange(uint64_t this, void *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  char v8;
  char v9;

  v2 = this;
  {
    v3 = WebCore::SVGPathByteStream::Data::empty(void)::singleton + 1;
  }
  else
  {
    xmmword_1EE2DFB60 = 0u;
    unk_1EE2DFB70 = 0u;
    xmmword_1EE2DFB40 = 0u;
    unk_1EE2DFB50 = 0u;
    WebCore::SVGPathByteStream::Data::empty(void)::singleton = 0u;
    *(_OWORD *)&dword_1EE2DFB30 = 0u;
    v3 = 2;
  }
  LODWORD(WebCore::SVGPathByteStream::Data::empty(void)::singleton) = v3;
  v4 = *(_QWORD *)(this + 72);
  *(_QWORD *)(this + 72) = &WebCore::SVGPathByteStream::Data::empty(void)::singleton;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v6 = *(unsigned int *)(v4 + 88);
      if ((_DWORD)v6 != -1)
        ((void (*)(char *, uint64_t))off_1E32FA758[v6])(&v8, v4 + 32);
      *(_DWORD *)(v4 + 88) = -1;
      v7 = *(WTF **)(v4 + 8);
      if (v7)
      {
        *(_QWORD *)(v4 + 8) = 0;
        *(_DWORD *)(v4 + 16) = 0;
        WTF::fastFree(v7, a2);
      }
      this = WTF::fastFree((WTF *)v4, a2);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  if (*(_BYTE *)(v2 + 152))
  {
    v5 = *(unsigned int *)(v2 + 144);
    if ((_DWORD)v5 != -1)
      this = ((uint64_t (*)(char *, uint64_t))off_1E32FA758[v5])(&v9, v2 + 88);
    *(_DWORD *)(v2 + 144) = -1;
    *(_BYTE *)(v2 + 152) = 0;
  }
  return this;
}

uint64_t WebCore::SVGPathSegList::replaceItem(uint64_t a1, WebCore::SVGPathSegList *this, uint64_t a3, uint64_t a4)
{
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13[8];
  uint64_t v14;
  int v15;
  _QWORD v16[2];
  int v17;
  char v18;

  if (!*((_DWORD *)this + 11) && *(_DWORD *)(*((_QWORD *)this + 9) + 20))
    WebCore::buildSVGPathSegListFromByteStream((uint64_t)this + 64, (uint64_t)this, 1);
  WebCore::SVGPathSegList::itemsWillChange((uint64_t)this, this);
  if (*((_BYTE *)this + 24) == 1)
  {
    v8 = 4;
    LOBYTE(v16[0]) = 4;
    v9 = 1;
    v17 = 1;
    v16[1] = 0;
LABEL_11:
    v13[0] = v8;
    v11 = 1;
    v15 = 1;
    ((uint64_t (**)(char *, char *))off_1E32F83C8)[v9](&v18, (char *)v16);
    v14 = 0;
    *(_BYTE *)a1 = v8;
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 1;
    return off_1E32F83C8[v11](v16, v13);
  }
  LOBYTE(v16[0]) = 1;
  v17 = 0;
  if (*((_DWORD *)this + 11) <= a4)
  {
    v8 = 0;
    v9 = 0;
    goto LABEL_11;
  }
  v13[0] = 1;
  v15 = 0;
  (*(void (**)(_QWORD *__return_ptr, WebCore::SVGPathSegList *, uint64_t, uint64_t))(*(_QWORD *)this + 64))(v16, this, a4, a3);
  v10 = *((_QWORD *)this + 2);
  if (v10)
    (*(void (**)(uint64_t, WebCore::SVGPathSegList *))(*(_QWORD *)v10 + 32))(v10, this);
  v11 = 0;
  *(_QWORD *)a1 = v16[0];
  *(_DWORD *)(a1 + 16) = 0;
  return off_1E32F83C8[v11](v16, v13);
}

uint64_t WebCore::SVGPropertyList<WebCore::SVGPathSeg>::append(uint64_t a1, char *a2)
{
  char *v2;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  int v7;
  char **v8;
  uint64_t v9;
  char *v10;
  _DWORD *v11;
  _DWORD *v13;

  v2 = a2;
  v4 = *(_DWORD **)a2;
  if (!*(_QWORD *)(*(_QWORD *)a2 + 16))
    goto LABEL_6;
  (*(void (**)(_DWORD **__return_ptr))(*(_QWORD *)v4 + 56))(&v13);
  v5 = v13;
  v13 = 0;
  v6 = *(_DWORD **)v2;
  *(_QWORD *)v2 = v5;
  if (v6)
  {
    v7 = v6[2] - 1;
    if (v6[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
      v6 = v13;
      v13 = 0;
      if (!v6)
        goto LABEL_5;
      v7 = v6[2] - 1;
      if (v6[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
        goto LABEL_5;
      }
    }
    v6[2] = v7;
  }
LABEL_5:
  v4 = *(_DWORD **)v2;
LABEL_6:
  (*(void (**)(_DWORD *, uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, a1 + 48, *(unsigned __int8 *)(a1 + 24));
  v8 = (char **)(a1 + 32);
  v9 = *(unsigned int *)(a1 + 44);
  if ((_DWORD)v9 == *(_DWORD *)(a1 + 40))
  {
    v2 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v8, v9 + 1, (unint64_t)v2);
    v9 = *(unsigned int *)(a1 + 44);
    v10 = (char *)(*(_QWORD *)(a1 + 32) + 8 * v9);
  }
  else
  {
    v10 = &(*v8)[8 * v9];
  }
  v11 = *(_DWORD **)v2;
  *(_QWORD *)v2 = 0;
  *(_QWORD *)v10 = v11;
  *(_DWORD *)(a1 + 44) = v9 + 1;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

void WebCore::SVGPathSegList::~SVGPathSegList(WebCore::SVGPathSegList *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::SVGPathSegList::~SVGPathSegList(this, a2);
  WTF::fastFree(v2, v3);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  WTF *v11;
  WTF *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD **v17;
  uint64_t v18;
  _DWORD *v19;
  _DWORD **v20;
  char v21;
  char v22;

  if (*((_BYTE *)this + 152))
  {
    v3 = *((unsigned int *)this + 36);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, char *))off_1E32FA758[v3])(&v21, (char *)this + 88);
    *((_DWORD *)this + 36) = -1;
  }
  v4 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v9 = *(unsigned int *)(v4 + 88);
      if ((_DWORD)v9 != -1)
        ((void (*)(char *, uint64_t))off_1E32FA758[v9])(&v22, v4 + 32);
      *(_DWORD *)(v4 + 88) = -1;
      v10 = *(WTF **)(v4 + 8);
      if (v10)
      {
        *(_QWORD *)(v4 + 8) = 0;
        *(_DWORD *)(v4 + 16) = 0;
        WTF::fastFree(v10, a2);
      }
      WTF::fastFree((WTF *)v4, a2);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  v5 = *((_QWORD *)this + 8);
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = 0;
    v11 = (WTF *)*((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 1)
        WTF::fastFree(v11, a2);
      else
        --*(_DWORD *)v11;
    }
  }
  else
  {
    *((_QWORD *)this + 8) = 0;
  }
  v6 = *((_QWORD *)this + 7);
  if (v6)
  {
    *(_QWORD *)(v6 + 8) = 0;
    v12 = (WTF *)*((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, a2);
      else
        --*(_DWORD *)v12;
    }
  }
  else
  {
    *((_QWORD *)this + 7) = 0;
  }
  *(_QWORD *)this = off_1E32FFC30;
  *((_QWORD *)this + 6) = &unk_1E32FFCA8;
  v7 = (WTF *)*((_QWORD *)this + 4);
  v8 = *((unsigned int *)this + 11);
  if ((_DWORD)v8)
  {
    v13 = (uint64_t *)*((_QWORD *)this + 4);
    v14 = 8 * v8;
    do
    {
      v15 = *v13++;
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15);
      v14 -= 8;
    }
    while (v14);
    v16 = *((unsigned int *)this + 11);
    *(_QWORD *)this = off_1E32FFCE0;
    v17 = (_DWORD **)*((_QWORD *)this + 4);
    if ((_DWORD)v16)
    {
      v18 = 8 * v16;
      do
      {
        v19 = *v17;
        v20 = v17;
        *v17 = 0;
        if (v19)
        {
          if (v19[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 8))(v19);
          else
            --v19[2];
        }
        v17 = v20 + 1;
        v18 -= 8;
      }
      while (v18);
      v7 = (WTF *)*((_QWORD *)this + 4);
    }
    else
    {
      v7 = (WTF *)*((_QWORD *)this + 4);
    }
  }
  else
  {
    *(_QWORD *)this = off_1E32FFCE0;
  }
  if (v7)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v7, a2);
  }
}

uint64_t WebCore::SVGPathSegList::valueAsString@<X0>(uint64_t this@<X0>, WTF::StringImpl **a2@<X8>)
{
  uint64_t v2;
  unsigned int v3;
  void *v4;
  uint64_t v5;
  WTF::StringImpl **v6;
  void (**v7)(WebCore::SVGPathByteStreamSource *__hidden);
  WTF *v8;
  uint64_t v9;
  uint64_t v10;

  *a2 = 0;
  v2 = *(_QWORD *)(this + 72);
  v3 = *(_DWORD *)(v2 + 20);
  if (!v3)
  {
    v6 = a2;
    if (!*(_DWORD *)(this + 44))
      return this;
    v5 = this;
    this = WebCore::buildSVGPathByteStreamFromSVGPathSegList(this, (_QWORD *)(this + 64), 1, 1);
    v2 = *(_QWORD *)(v5 + 72);
    v3 = *(_DWORD *)(v2 + 20);
    if (!v3)
      return this;
    a2 = v6;
  }
  v7 = off_1E346F660;
  v8 = 0;
  v9 = *(_QWORD *)(v2 + 8);
  v10 = v9 + v3;
  this = WebCore::SVGPathParser::parseToString((uint64_t)&v7, a2, 1, 1);
  if (v8)
  {
    *((_QWORD *)v8 + 1) = 0;
    this = (uint64_t)v8;
    v8 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 1)
        return WTF::fastFree((WTF *)this, v4);
      else
        --*(_DWORD *)this;
    }
  }
  return this;
}

uint64_t WebCore::SVGPropertyList<WebCore::SVGPathSeg>::detachItems(uint64_t result)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(unsigned int *)(result + 44);
  if ((_DWORD)v1)
  {
    v2 = *(uint64_t **)(result + 32);
    v3 = 8 * v1;
    do
    {
      v4 = *v2++;
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
      v3 -= 8;
    }
    while (v3);
  }
  return result;
}

uint64_t WebCore::SVGPropertyList<WebCore::SVGPathSeg>::at@<X0>(uint64_t result@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v3;

  if (*(_DWORD *)(result + 44) <= a2)
  {
    __break(0xC471u);
  }
  else
  {
    v3 = *(_QWORD *)(*(_QWORD *)(result + 32) + 8 * a2);
    ++*(_DWORD *)(v3 + 8);
    *a3 = v3;
  }
  return result;
}

uint64_t WebCore::SVGPropertyList<WebCore::SVGPathSeg>::insert(uint64_t a1, uint64_t a2, char *a3)
{
  char *v3;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;
  _DWORD *v12;
  _DWORD *v14;

  v3 = a3;
  v6 = *(_DWORD **)a3;
  if (*(_QWORD *)(*(_QWORD *)a3 + 16))
  {
    (*(void (**)(_DWORD **__return_ptr))(*(_QWORD *)v6 + 56))(&v14);
    v7 = v14;
    v14 = 0;
    v8 = *(_DWORD **)v3;
    *(_QWORD *)v3 = v7;
    if (v8)
    {
      v9 = v8[2] - 1;
      if (v8[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
        v8 = v14;
        v14 = 0;
        if (!v8)
          goto LABEL_5;
        v9 = v8[2] - 1;
        if (v8[2] == 1)
        {
          (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
          goto LABEL_5;
        }
      }
      v8[2] = v9;
    }
LABEL_5:
    v6 = *(_DWORD **)v3;
  }
  (*(void (**)(_DWORD *, uint64_t, _QWORD))(*(_QWORD *)v6 + 16))(v6, a1 + 48, *(unsigned __int8 *)(a1 + 24));
  v10 = *(unsigned int *)(a1 + 44);
  if ((_DWORD)v10 == *(_DWORD *)(a1 + 40))
  {
    v3 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a1 + 32), v10 + 1, (unint64_t)v3);
    LODWORD(v10) = *(_DWORD *)(a1 + 44);
  }
  v11 = (_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * a2);
  memmove(v11 + 1, v11, 8 * v10 - 8 * a2);
  v12 = *(_DWORD **)v3;
  *(_QWORD *)v3 = 0;
  *v11 = v12;
  ++*(_DWORD *)(a1 + 44);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, a2);
}

uint64_t WebCore::SVGPropertyList<WebCore::SVGPathSeg>::replace(uint64_t result, uint64_t a2, uint64_t *a3)
{
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  int v11;
  _DWORD *v12;
  _DWORD *v13;

  if (*(_DWORD *)(result + 44) > a2)
  {
    v5 = (unsigned __int8 *)result;
    v6 = a2;
    v7 = *(_QWORD *)(result + 32);
    (*(void (**)(_QWORD))(**(_QWORD **)(v7 + 8 * a2) + 24))(*(_QWORD *)(v7 + 8 * a2));
    v8 = *a3;
    if (!*(_QWORD *)(*a3 + 16))
    {
      *a3 = 0;
      v12 = *(_DWORD **)(v7 + 8 * v6);
      *(_QWORD *)(v7 + 8 * v6) = v8;
      if (v12)
      {
        if (v12[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
        else
          --v12[2];
      }
      goto LABEL_9;
    }
    (*(void (**)(_DWORD **__return_ptr))(*(_QWORD *)v8 + 56))(&v13);
    v9 = v13;
    v13 = 0;
    v10 = *(_DWORD **)(v7 + 8 * v6);
    *(_QWORD *)(v7 + 8 * v6) = v9;
    if (v10)
    {
      v11 = v10[2] - 1;
      if (v10[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
        v10 = v13;
        v13 = 0;
        if (!v10)
          goto LABEL_9;
        v11 = v10[2] - 1;
        if (v10[2] == 1)
        {
          (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
          goto LABEL_9;
        }
      }
      v10[2] = v11;
    }
LABEL_9:
    (*(void (**)(_QWORD, unsigned __int8 *, _QWORD))(**(_QWORD **)(v7 + 8 * v6) + 16))(*(_QWORD *)(v7 + 8 * v6), v5 + 48, v5[24]);
    return (*(uint64_t (**)(unsigned __int8 *, uint64_t))(*(_QWORD *)v5 + 48))(v5, a2);
  }
  __break(0xC471u);
  return result;
}

void *WebCore::SVGPropertyList<WebCore::SVGPathSeg>::remove@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _DWORD *v7;
  void *result;

  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 48))(a3);
  (*(void (**)(_QWORD))(*(_QWORD *)*a3 + 24))(*a3);
  v6 = (_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * a2);
  v7 = (_DWORD *)*v6;
  *v6 = 0;
  if (v7)
  {
    if (v7[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
    else
      --v7[2];
  }
  result = memmove(v6, v6 + 1, *(_QWORD *)(a1 + 32) + 8 * *(unsigned int *)(a1 + 44) - (_QWORD)(v6 + 1));
  --*(_DWORD *)(a1 + 44);
  return result;
}

uint64_t WebCore::SVGPropertyList<WebCore::SVGPathSeg>::owner(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t WebCore::SVGPathSegList::commitPropertyChange(WebCore::SVGPathSegList *this, WebCore::SVGProperty *a2)
{
  uint64_t result;
  uint64_t v4;

  WebCore::SVGPathSegList::itemsWillChange((uint64_t)this, a2);
  result = (*(uint64_t (**)(WebCore::SVGPathSegList *))(*(_QWORD *)this + 88))(this);
  if (result)
  {
    v4 = (*(uint64_t (**)(WebCore::SVGPathSegList *))(*(_QWORD *)this + 88))(this);
    return (*(uint64_t (**)(uint64_t, WebCore::SVGPathSegList *))(*(_QWORD *)v4 + 32))(v4, this);
  }
  return result;
}

void `non-virtual thunk to'WebCore::SVGPathSegList::~SVGPathSegList(WebCore::SVGPathSegList *this, void *a2)
{
  WebCore::SVGPathSegList::~SVGPathSegList((WebCore::SVGPathSegList *)((char *)this - 48), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::SVGPathSegList::~SVGPathSegList((WebCore::SVGPathSegList *)((char *)this - 48), a2);
  WTF::fastFree(v2, v3);
}

uint64_t `non-virtual thunk to'WebCore::SVGPropertyList<WebCore::SVGPathSeg>::owner(uint64_t a1)
{
  return *(_QWORD *)(a1 - 32);
}

uint64_t `non-virtual thunk to'WebCore::SVGPathSegList::commitPropertyChange(WebCore::SVGPathSegList *this, WebCore::SVGProperty *a2)
{
  char *v3;
  uint64_t result;
  uint64_t v5;

  v3 = (char *)this - 48;
  WebCore::SVGPathSegList::itemsWillChange((uint64_t)this - 48, a2);
  result = (*(uint64_t (**)(char *))(*((_QWORD *)this - 6) + 88))(v3);
  if (result)
  {
    v5 = (*(uint64_t (**)(char *))(*(_QWORD *)v3 + 88))(v3);
    return (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v5 + 32))(v5, v3);
  }
  return result;
}

uint64_t WebCore::SVGPropertyList<WebCore::SVGPathSeg>::~SVGPropertyList(uint64_t result, void *a2)
{
  WTF *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  WTF *v11;
  uint64_t v12;

  *(_QWORD *)result = off_1E32FFC30;
  *(_QWORD *)(result + 48) = &unk_1E32FFCA8;
  v2 = *(WTF **)(result + 32);
  v3 = *(unsigned int *)(result + 44);
  if ((_DWORD)v3)
  {
    v5 = *(uint64_t **)(result + 32);
    v12 = result;
    v6 = 8 * v3;
    do
    {
      v7 = *v5++;
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
      v6 -= 8;
    }
    while (v6);
    v8 = *(unsigned int *)(v12 + 44);
    *(_QWORD *)v12 = off_1E32FFCE0;
    v2 = *(WTF **)(v12 + 32);
    if ((_DWORD)v8)
    {
      v9 = 8 * v8;
      do
      {
        v10 = *(_DWORD **)v2;
        v11 = v2;
        *(_QWORD *)v2 = 0;
        if (v10)
        {
          if (v10[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
          else
            --v10[2];
        }
        v2 = (WTF *)((char *)v11 + 8);
        v9 -= 8;
      }
      while (v9);
      result = v12;
      v2 = *(WTF **)(v12 + 32);
    }
    else
    {
      result = v12;
    }
  }
  else
  {
    *(_QWORD *)result = off_1E32FFCE0;
  }
  if (v2)
  {
    *(_QWORD *)(result + 32) = 0;
    *(_DWORD *)(result + 40) = 0;
    v4 = result;
    WTF::fastFree(v2, a2);
    return v4;
  }
  return result;
}

uint64_t WebCore::SVGPropertyList<WebCore::SVGPathSeg>::~SVGPropertyList(uint64_t a1, void *a2)
{
  WTF *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  WTF *v12;
  uint64_t v13;

  *(_QWORD *)a1 = off_1E32FFC30;
  *(_QWORD *)(a1 + 48) = &unk_1E32FFCA8;
  v2 = *(WTF **)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 44);
  if ((_DWORD)v3)
  {
    v6 = *(uint64_t **)(a1 + 32);
    v13 = a1;
    v7 = 8 * v3;
    do
    {
      v8 = *v6++;
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
      v7 -= 8;
    }
    while (v7);
    v9 = *(unsigned int *)(v13 + 44);
    *(_QWORD *)v13 = off_1E32FFCE0;
    v2 = *(WTF **)(v13 + 32);
    if ((_DWORD)v9)
    {
      v10 = 8 * v9;
      do
      {
        v11 = *(_DWORD **)v2;
        v12 = v2;
        *(_QWORD *)v2 = 0;
        if (v11)
        {
          if (v11[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
          else
            --v11[2];
        }
        v2 = (WTF *)((char *)v12 + 8);
        v10 -= 8;
      }
      while (v10);
      a1 = v13;
      v2 = *(WTF **)(v13 + 32);
    }
    else
    {
      a1 = v13;
    }
  }
  else
  {
    *(_QWORD *)a1 = off_1E32FFCE0;
  }
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = 0;
    *(_DWORD *)(a1 + 40) = 0;
    v5 = a1;
    WTF::fastFree(v2, a2);
    a1 = v5;
  }
  return WTF::fastFree((WTF *)a1, a2);
}

uint64_t WebCore::SVGPropertyList<WebCore::SVGPathSeg>::commitPropertyChange(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  if (result)
  {
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 32))(v3, a1);
  }
  return result;
}

_QWORD *`non-virtual thunk to'WebCore::SVGPropertyList<WebCore::SVGPathSeg>::~SVGPropertyList(_QWORD *result, void *a2)
{
  WTF *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  WTF *v10;
  _QWORD *v11;

  *(result - 6) = off_1E32FFC30;
  *result = &unk_1E32FFCA8;
  v2 = (WTF *)*(result - 2);
  v3 = *((unsigned int *)result - 1);
  if ((_DWORD)v3)
  {
    v4 = (uint64_t *)*(result - 2);
    v11 = result;
    v5 = 8 * v3;
    do
    {
      v6 = *v4++;
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
      v5 -= 8;
    }
    while (v5);
    v7 = *((unsigned int *)v11 - 1);
    *(v11 - 6) = off_1E32FFCE0;
    v2 = (WTF *)*(v11 - 2);
    if ((_DWORD)v7)
    {
      v8 = 8 * v7;
      do
      {
        v9 = *(_DWORD **)v2;
        v10 = v2;
        *(_QWORD *)v2 = 0;
        if (v9)
        {
          if (v9[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
          else
            --v9[2];
        }
        v2 = (WTF *)((char *)v10 + 8);
        v8 -= 8;
      }
      while (v8);
      result = v11;
      v2 = (WTF *)*(v11 - 2);
    }
    else
    {
      result = v11;
    }
  }
  else
  {
    *(result - 6) = off_1E32FFCE0;
  }
  if (v2)
  {
    *(result - 2) = 0;
    *((_DWORD *)result - 2) = 0;
    return (_QWORD *)WTF::fastFree(v2, a2);
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::SVGPropertyList<WebCore::SVGPathSeg>::~SVGPropertyList(_QWORD *a1, void *a2)
{
  WTF *v2;
  WTF *v3;
  uint64_t v4;
  WTF *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  WTF *v13;
  WTF *v14;
  _QWORD *v15;

  *(a1 - 6) = off_1E32FFC30;
  v2 = (WTF *)(a1 - 6);
  *a1 = &unk_1E32FFCA8;
  v3 = (WTF *)*(a1 - 2);
  v4 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v4)
  {
    v7 = (uint64_t *)*(a1 - 2);
    v14 = (WTF *)(a1 - 6);
    v15 = a1;
    v8 = 8 * v4;
    do
    {
      v9 = *v7++;
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
      v8 -= 8;
    }
    while (v8);
    v10 = *((unsigned int *)v15 - 1);
    *(v15 - 6) = off_1E32FFCE0;
    v3 = (WTF *)*(v15 - 2);
    if ((_DWORD)v10)
    {
      v11 = 8 * v10;
      do
      {
        v12 = *(_DWORD **)v3;
        v13 = v3;
        *(_QWORD *)v3 = 0;
        if (v12)
        {
          if (v12[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
          else
            --v12[2];
        }
        v3 = (WTF *)((char *)v13 + 8);
        v11 -= 8;
      }
      while (v11);
      v2 = v14;
      a1 = v15;
      v3 = (WTF *)*(v15 - 2);
    }
    else
    {
      v2 = v14;
      a1 = v15;
    }
  }
  else
  {
    *(_QWORD *)v2 = off_1E32FFCE0;
  }
  if (v3)
  {
    *(a1 - 2) = 0;
    *((_DWORD *)a1 - 2) = 0;
    v6 = v2;
    WTF::fastFree(v3, a2);
    v2 = v6;
  }
  return WTF::fastFree(v2, a2);
}

uint64_t `non-virtual thunk to'WebCore::SVGPropertyList<WebCore::SVGPathSeg>::commitPropertyChange(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  v1 = a1 - 48;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 - 48) + 88))(a1 - 48);
  if (result)
  {
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 88))(v1);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 32))(v3, v1);
  }
  return result;
}

_DWORD *WTF::DataRef<WebCore::SVGPathByteStream::Data>::access(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v5;
  WTF *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  char v12;
  uint64_t v13;

  v1 = *a1;
  if (*(_DWORD *)*a1 == 1)
    return (_DWORD *)*a1;
  v2 = WTF::fastMalloc((WTF *)0x60);
  *(_DWORD *)v2 = 1;
  v6 = (WTF *)*(unsigned int *)(v1 + 20);
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  *(_DWORD *)(v2 + 20) = (_DWORD)v6;
  if ((_DWORD)v6)
  {
    v7 = (void *)WTF::fastMalloc(v6);
    *(_DWORD *)(v2 + 16) = (_DWORD)v6;
    *(_QWORD *)(v2 + 8) = v7;
    memcpy(v7, *(const void **)(v1 + 8), *(unsigned int *)(v1 + 20));
  }
  *(_DWORD *)(v2 + 88) = 0;
  v8 = *(unsigned int *)(v1 + 88);
  if ((_DWORD)v8 == -1)
  {
    *(_DWORD *)(v2 + 88) = -1;
  }
  else
  {
    v13 = v2 + 32;
    ((void (*)(uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRSE_SK_EEEDcmSM_DpOT0____fdiagonal_1[v8])(&v13);
  }
  v9 = *a1;
  *a1 = v2;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      v10 = *(unsigned int *)(v9 + 88);
      if ((_DWORD)v10 != -1)
        ((void (*)(char *, uint64_t))off_1E32FA758[v10])(&v12, v9 + 32);
      *(_DWORD *)(v9 + 88) = -1;
      v11 = *(WTF **)(v9 + 8);
      if (v11)
      {
        *(_QWORD *)(v9 + 8) = 0;
        *(_DWORD *)(v9 + 16) = 0;
        WTF::fastFree(v11, v5);
      }
      WTF::fastFree((WTF *)v9, v5);
      return (_DWORD *)*a1;
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
  return (_DWORD *)v2;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore10SVGPathSegENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore10SVGPathSegENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_BYTE *WebCore::jsSVGPatternElementPrototypeFunction_hasExtension(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  const WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  JSValue v21;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v23;
  JSC::VM *v24;
  uint64_t v25;
  int v26;
  WTF::StringImpl *v27;
  uint64_t v28;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v24 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v24, "SVGPatternElement", "hasExtension");
  v6 = 16 * (*(_DWORD *)v5 & 0xFFFFFFFE);
  v7 = *(unsigned int *)(v6 + 76);
  v8 = *(_DWORD *)(v6 + 76) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSSVGPatternElement::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSSVGPatternElement::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v24, "SVGPatternElement", "hasExtension");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v21.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v21);
  }
  v12 = *((_QWORD *)a2 + 6);
  v28 = v12;
  if ((v12 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v12 + 5) == 2)
  {
    v13 = *(WTF::StringImpl **)(v12 + 8);
    if ((v13 & 1) != 0)
    {
      v13 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v12, this);
      if (!v13)
        goto LABEL_18;
    }
    else if (!v13)
    {
LABEL_18:
      v27 = v13;
      goto LABEL_19;
    }
    *(_DWORD *)v13 += 2;
    goto LABEL_18;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v28, this);
LABEL_19:
  if (*((_DWORD *)v4 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    v14 = v27;
    if (hasExceptionsAfterHandlingTraps)
    {
      v26 = 1;
      v27 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v23);
        else
          *(_DWORD *)v14 -= 2;
      }
      v17 = 0;
      v18 = 1;
      goto LABEL_28;
    }
  }
  else
  {
    v14 = v27;
  }
  v26 = 0;
  v25 = 0;
  if ((WTF::equal(v14, (const WTF::StringImpl *)WebCore::MathMLNames::mathmlNamespaceURI, a3) & 1) != 0
    || WTF::equal(v14, (const WTF::StringImpl *)WebCore::HTMLNames::xhtmlNamespaceURI, v16))
  {
    v17 = 7;
    if (!v14)
      goto LABEL_33;
  }
  else
  {
    v17 = 6;
    if (!v14)
    {
LABEL_33:
      v18 = 0;
      goto LABEL_28;
    }
  }
  if (*(_DWORD *)v14 == 2)
  {
    WTF::StringImpl::destroy(v14, v15);
    goto LABEL_33;
  }
  v18 = 0;
  *(_DWORD *)v14 -= 2;
LABEL_28:
  ((void (*)(uint64_t *, uint64_t *))off_1E32FBED0[v18])(&v28, &v25);
  return (_BYTE *)v17;
}

_BYTE *WebCore::jsSVGPointPrototypeFunction_matrixTransform(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  char **v20;
  BOOL v21;
  float64x2_t *v22;
  WebCore::JSSVGPoint **v23;
  float32x2_t v24;
  uint64_t v25;
  WebCore::JSDOMGlobalObject *v26;
  unint64_t v27;
  JSValue v32;
  JSC::VM *v33;
  WTF *v34;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v33 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v33, "SVGPoint", "matrixTransform");
  v11 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
  v12 = *(unsigned int *)(v11 + 0x4C);
  v13 = *(_DWORD *)(v11 + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSSVGPoint::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSSVGPoint::s_info && v14 != 0);
  }
  if (!v13)
    return WebCore::throwThisTypeError((int)this, (int)&v33, "SVGPoint", "matrixTransform");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v32.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v32);
  }
  v16 = *(_QWORD *)(v10 + 24);
  v17 = *((_QWORD *)a2 + 6);
  v34 = v9;
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_34;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSSVGMatrix::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSSVGMatrix::s_info && v20 != 0);
  }
  if (v19 && (v22 = *(float64x2_t **)(v17 + 24)) != 0)
  {
    v23 = *(WebCore::JSSVGPoint ***)(v11 + 40);
    v24 = vcvt_f32_f64(vaddq_f64(v22[4], vmlaq_n_f64(vmulq_n_f64(v22[3], *(float *)(v16 + 32)), v22[2], *(float *)(v16 + 28))));
    v25 = WTF::fastMalloc((WTF *)0x28);
    *(_DWORD *)(v25 + 8) = 1;
    *(_QWORD *)(v25 + 16) = 0;
    *(_WORD *)(v25 + 24) = 0;
    *(float32x2_t *)(v25 + 28) = v24;
    *(_QWORD *)v25 = off_1E33006C8;
    v34 = (WTF *)v25;
    v27 = WebCore::toJSNewlyCreated(v23, &v34, v26);
    if (v34)
    {
      if (*((_DWORD *)v34 + 2) == 1)
        (*(void (**)(void))(*(_QWORD *)v34 + 8))();
      else
        --*((_DWORD *)v34 + 2);
    }
  }
  else
  {
LABEL_34:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v34, 0, "matrix", 7, "SVGPoint", 9, a8, "matrixTransform", 16, "SVGMatrix", 10);
    return 0;
  }
  return (_BYTE *)v27;
}

uint64_t WebCore::SVGPoint::valueAsString@<X0>(WebCore::SVGPoint *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  char v4;
  int v5;

  v5 = *((_DWORD *)this + 7);
  v4 = 32;
  result = WTF::tryMakeString<float,char,float>(&v4, a2);
  if (!*a2)
    __break(0xC471u);
  return result;
}

uint64_t WTF::tryMakeString<float,char,float>@<X0>(char *a1@<X1>, _QWORD *a2@<X8>)
{
  char v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _OWORD v11[7];
  __int128 v12;
  char __s[16];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _OWORD __src[7];
  size_t __n[2];
  _OWORD v39[7];
  __int128 v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  WTF::numberToString();
  HIDWORD(v20) = strlen(__s);
  v4 = *a1;
  WTF::numberToString();
  result = strlen((const char *)v11);
  HIDWORD(v12) = result;
  if ((result & 0x80000000) != 0)
    goto LABEL_16;
  v6 = 0;
  v7 = result + 1;
  if (__OFADD__((_DWORD)result, 1) || (HIDWORD(v20) & 0x80000000) != 0)
    goto LABEL_13;
  v8 = (HIDWORD(v20) + v7);
  if (__OFADD__(HIDWORD(v20), v7))
    goto LABEL_16;
  v33 = v17;
  v34 = v18;
  v35 = v19;
  v36 = v20;
  v29 = *(_OWORD *)__s;
  v30 = v14;
  v31 = v15;
  v32 = v16;
  v23 = v11[2];
  v24 = v11[3];
  v21 = v11[0];
  v22 = v11[1];
  v27 = v11[6];
  v28 = v12;
  v25 = v11[4];
  v26 = v11[5];
  if ((v8 & 0x80000000) != 0)
  {
LABEL_16:
    v6 = 0;
    goto LABEL_13;
  }
  result = WTF::tryFastCompactMalloc((WTF *)(v8 + 20));
  v6 = *(_QWORD *)&v39[0];
  if (*(_QWORD *)&v39[0])
  {
    v9 = (_BYTE *)(*(_QWORD *)&v39[0] + 20);
    **(_DWORD **)&v39[0] = 2;
    *(_DWORD *)(v6 + 4) = v8;
    *(_QWORD *)(v6 + 8) = v6 + 20;
    *(_DWORD *)(v6 + 16) = 4;
    __src[4] = v33;
    __src[5] = v34;
    __src[6] = v35;
    *(_OWORD *)__n = v36;
    __src[0] = v29;
    __src[1] = v30;
    __src[2] = v31;
    __src[3] = v32;
    v10 = HIDWORD(v36);
    if (HIDWORD(v36))
    {
      if (HIDWORD(v36) == 1)
        *v9 = __src[0];
      else
        memcpy((void *)(v6 + 20), __src, HIDWORD(v36));
    }
    v39[4] = v25;
    v39[5] = v26;
    v39[6] = v27;
    v40 = v28;
    v39[0] = v21;
    v39[1] = v22;
    v39[2] = v23;
    v39[3] = v24;
    v9[v10] = v4;
    result = (uint64_t)&v9[v10 + 1];
    if (HIDWORD(v40))
    {
      if (HIDWORD(v40) == 1)
        *(_BYTE *)result = v39[0];
      else
        result = (uint64_t)memcpy((void *)result, v39, HIDWORD(v40));
    }
  }
LABEL_13:
  *a2 = v6;
  return result;
}

uint64_t WebCore::jsSVGPointListPrototypeFunction_clear(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  JSC::VM *v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  _DWORD *v21;
  JSValue v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF *v25;
  JSC::VM *v26;
  char v27[8];
  WTF::StringImpl *v28;
  int v29;
  char v30;

  v4 = *((_QWORD *)a2 + 5);
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v26 = v5;
  if ((v4 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v26, "SVGPointList", "clear");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSSVGPointList::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSSVGPointList::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v26, "SVGPointList", "clear");
  v11 = *(_QWORD *)(v4 + 24);
  v12 = *(unsigned __int8 *)(v11 + 24);
  if (v12 == 1)
  {
    v13 = 4;
    v27[0] = 4;
    v14 = 1;
    v29 = 1;
    v28 = 0;
  }
  else
  {
    v27[0] = 1;
    v29 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
    if (*(_DWORD *)(v11 + 40))
    {
      v18 = *(unsigned int *)(v11 + 44);
      v19 = *(WTF **)(v11 + 32);
      if ((_DWORD)v18)
      {
        v20 = 8 * v18;
        do
        {
          v21 = *(_DWORD **)v19;
          *(_QWORD *)v19 = 0;
          if (v21)
          {
            if (v21[2] == 1)
            {
              v25 = v19;
              (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
              v19 = v25;
            }
            else
            {
              --v21[2];
            }
          }
          v19 = (WTF *)((char *)v19 + 8);
          v20 -= 8;
        }
        while (v20);
        v19 = *(WTF **)(v11 + 32);
        *(_DWORD *)(v11 + 44) = 0;
      }
      if (v19)
      {
        *(_QWORD *)(v11 + 32) = 0;
        *(_DWORD *)(v11 + 40) = 0;
        WTF::fastFree(v19, v15);
      }
    }
    v16 = *(_QWORD *)(v11 + 16);
    if (v16)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 32))(v16, v11);
    v13 = 0;
    v14 = 0;
  }
  ((void (*)(char *, char *, JSC::CallFrame *))off_1E32F83C8[v14])(&v30, v27, a3);
  if (v12 != 1)
    return 10;
  v27[0] = v13;
  v28 = 0;
  if (!*((_QWORD *)v5 + 2))
  {
    v22.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v13, (JSC::JSGlobalObject *)&v28);
    JSC::VM::throwException(v5, this, v22);
    v24 = v28;
    v28 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v23);
      else
        *(_DWORD *)v24 -= 2;
    }
  }
  return 0;
}

_BYTE *WebCore::jsSVGPointListPrototypeFunction_initialize(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  int v18;
  unsigned __int8 v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  WebCore::JSDOMGlobalObject *v24;
  WTF *v25;
  int v26;
  int v27;
  uint64_t v28;
  _DWORD *v29;
  JSValue v32;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;
  _DWORD *v36;
  JSValue v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF *v40;
  JSC::VM *v41;
  _DWORD *v42;
  WTF *v43;
  uint64_t v44;
  int v45;
  WTF *v46;
  JSC::VM *v47;
  WTF::StringImpl *v48;
  int v49;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v41 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v41, "SVGPointList", "initialize");
  v6 = 16 * (*(_DWORD *)v5 & 0xFFFFFFFE);
  v7 = *(unsigned int *)(v6 + 0x4C);
  v8 = *(_DWORD *)(v6 + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSSVGPointList::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSSVGPointList::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v41, "SVGPointList", "initialize");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v32.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v32);
  }
  v12 = *(_QWORD *)(v5 + 24);
  v13 = *((_QWORD *)a2 + 6);
  v47 = v4;
  v14 = JSC::jsDynamicCast<WebCore::JSSVGPoint *>(v13);
  if (v14 && (v16 = *(_DWORD **)(v14 + 24)) != 0)
  {
    v17 = *(_QWORD *)(v6 + 40);
    ++v16[2];
    v42 = v16;
    v18 = *(unsigned __int8 *)(v12 + 24);
    if (v18 == 1)
    {
      v19 = 4;
      LOBYTE(v47) = 4;
      v20 = 1;
      v49 = 1;
      v48 = 0;
      LOBYTE(v43) = 4;
      v44 = 0;
      v45 = 1;
    }
    else
    {
      LOBYTE(v47) = 1;
      v49 = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
      if (*(_DWORD *)(v12 + 40))
      {
        v33 = *(unsigned int *)(v12 + 44);
        v34 = *(WTF **)(v12 + 32);
        if ((_DWORD)v33)
        {
          v35 = 8 * v33;
          do
          {
            v36 = *(_DWORD **)v34;
            *(_QWORD *)v34 = 0;
            if (v36)
            {
              if (v36[2] == 1)
              {
                v40 = v34;
                (*(void (**)(_DWORD *))(*(_QWORD *)v36 + 8))(v36);
                v34 = v40;
              }
              else
              {
                --v36[2];
              }
            }
            v34 = (WTF *)((char *)v34 + 8);
            v35 -= 8;
          }
          while (v35);
          v34 = *(WTF **)(v12 + 32);
          *(_DWORD *)(v12 + 44) = 0;
        }
        if (v34)
        {
          *(_QWORD *)(v12 + 32) = 0;
          *(_DWORD *)(v12 + 40) = 0;
          WTF::fastFree(v34, v22);
        }
      }
      (*(void (**)(WTF **__return_ptr, uint64_t, _DWORD **))(*(_QWORD *)v12 + 80))(&v46, v12, &v42);
      v23 = *(_QWORD *)(v12 + 16);
      if (v23)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 32))(v23, v12);
      v20 = 0;
      v19 = v46;
      v43 = v46;
      v45 = 0;
    }
    ((uint64_t (**)(WTF **, char *))off_1E32F83C8)[v20](&v46, (char *)&v47);
    if (v18 == 1)
    {
      LOBYTE(v47) = v19;
      v44 = 0;
      v48 = 0;
      if (!*((_QWORD *)v4 + 2))
      {
        v37.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v19, (JSC::JSGlobalObject *)&v48);
        JSC::VM::throwException(v4, this, v37);
        v39 = v48;
        v48 = 0;
        if (v39)
        {
          if (*(_DWORD *)v39 == 2)
            WTF::StringImpl::destroy(v39, v38);
          else
            *(_DWORD *)v39 -= 2;
        }
      }
      v21 = 0;
      v28 = 1;
    }
    else
    {
      v25 = v43;
      v43 = 0;
      v21 = WebCore::wrap<WebCore::SVGPoint>(v17, v25, v24);
      v26 = *((_DWORD *)v25 + 2);
      v27 = v26 - 1;
      if (v26 == 1)
      {
        (*(void (**)(WTF *))(*(_QWORD *)v25 + 8))(v25);
        v28 = 0;
      }
      else
      {
        v28 = 0;
        *((_DWORD *)v25 + 2) = v27;
      }
    }
    ((void (*)(JSC::VM **, WTF **))off_1E32FACF8[v28])(&v47, &v43);
    v45 = -1;
    v29 = v42;
    v42 = 0;
    if (v29)
    {
      if (v29[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v29 + 8))(v29);
      else
        --v29[2];
    }
  }
  else
  {
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v47, 0, "newItem", 8, "SVGPointList", 13, v15, "initialize", 11, "SVGPoint", 9);
    return 0;
  }
  return (_BYTE *)v21;
}

_BYTE *WebCore::jsSVGPointListPrototypeFunction_getItem(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  _DWORD *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  unsigned __int8 v16;
  WebCore::JSDOMGlobalObject *v17;
  WTF *v18;
  unint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  JSValue v25;
  JSValue v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  JSC::VM *v29;
  WTF *v30;
  uint64_t v31;
  int v32;
  _DWORD v33[2];
  WTF *v34;
  char v35[8];
  WTF::StringImpl *v36;
  int v37;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v29 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v29, "SVGPointList", "getItem");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSSVGPointList::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSSVGPointList::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v29, "SVGPointList", "getItem");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v25.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v25);
  }
  v11 = *(_DWORD **)(v5 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v33);
  if (v33[1])
    return 0;
  v12 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  v13 = v33[0];
  v14 = v11[11];
  if (v14 <= v33[0])
  {
    v16 = 0;
    v35[0] = 0;
    v15 = 1;
    v37 = 1;
    v36 = 0;
    LOBYTE(v30) = 0;
    v31 = 0;
  }
  else
  {
    v35[0] = 1;
    v37 = 0;
    (*(void (**)(WTF **__return_ptr, _DWORD *, _QWORD))(*(_QWORD *)v11 + 48))(&v34, v11, v33[0]);
    v15 = 0;
    v16 = v34;
    v30 = v34;
  }
  v32 = v15;
  ((uint64_t (**)(WTF **, char *))off_1E32F83C8)[v15](&v34, v35);
  if (v14 <= v13)
  {
    v35[0] = v16;
    v31 = 0;
    v36 = 0;
    if (!*((_QWORD *)v4 + 2))
    {
      v26.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v16, (JSC::JSGlobalObject *)&v36);
      JSC::VM::throwException(v4, this, v26);
      v28 = v36;
      v36 = 0;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2)
          WTF::StringImpl::destroy(v28, v27);
        else
          *(_DWORD *)v28 -= 2;
      }
    }
    v19 = 0;
    v22 = 1;
  }
  else
  {
    v18 = v30;
    v30 = 0;
    v19 = WebCore::wrap<WebCore::SVGPoint>(v12, v18, v17);
    v20 = *((_DWORD *)v18 + 2);
    v21 = v20 - 1;
    if (v20 == 1)
    {
      (*(void (**)(WTF *))(*(_QWORD *)v18 + 8))(v18);
      v22 = 0;
    }
    else
    {
      v22 = 0;
      *((_DWORD *)v18 + 2) = v21;
    }
  }
  ((void (*)(char *, WTF **))off_1E32FACF8[v22])(v35, &v30);
  return (_BYTE *)v19;
}

_BYTE *WebCore::jsSVGPointListPrototypeFunction_insertItemBefore(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  int v18;
  unsigned __int8 v19;
  uint64_t v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  WebCore::JSDOMGlobalObject *v25;
  WTF *v26;
  int v27;
  int v28;
  uint64_t v29;
  _DWORD *v30;
  JSValue v33;
  JSValue v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  JSC::VM *v37;
  _DWORD *v38;
  WTF *v39;
  uint64_t v40;
  int v41;
  _DWORD v42[2];
  WTF *v43;
  JSC::VM *v44;
  WTF::StringImpl *v45;
  int v46;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v37 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v37, "SVGPointList", "insertItemBefore");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSSVGPointList::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSSVGPointList::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v37, "SVGPointList", "insertItemBefore");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v33.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v33);
  }
  v12 = *(_QWORD *)(v5 + 24);
  v13 = *((_QWORD *)a2 + 6);
  v44 = v4;
  v14 = JSC::jsDynamicCast<WebCore::JSSVGPoint *>(v13);
  if (v14 && (v16 = *(_DWORD **)(v14 + 24)) != 0)
  {
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v42);
    if (v42[1])
    {
      return 0;
    }
    else
    {
      v17 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
      ++v16[2];
      v38 = v16;
      v18 = *(unsigned __int8 *)(v12 + 24);
      if (v18 == 1)
      {
        v19 = 4;
        LOBYTE(v44) = 4;
        v20 = 1;
        v46 = 1;
        v45 = 0;
        LOBYTE(v39) = 4;
        v40 = 0;
        v41 = 1;
      }
      else
      {
        LOBYTE(v44) = 1;
        v46 = 0;
        v22 = *(_DWORD *)(v12 + 44);
        if (v22 >= v42[0])
          v23 = v42[0];
        else
          v23 = v22;
        (*(void (**)(WTF **__return_ptr, uint64_t, uint64_t, _DWORD **))(*(_QWORD *)v12 + 56))(&v43, v12, v23, &v38);
        v24 = *(_QWORD *)(v12 + 16);
        if (v24)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 32))(v24, v12);
        v20 = 0;
        v19 = v43;
        v39 = v43;
        v41 = 0;
      }
      ((uint64_t (**)(WTF **, char *))off_1E32F83C8)[v20](&v43, (char *)&v44);
      if (v18 == 1)
      {
        LOBYTE(v44) = v19;
        v40 = 0;
        v45 = 0;
        if (!*((_QWORD *)v4 + 2))
        {
          v34.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v19, (JSC::JSGlobalObject *)&v45);
          JSC::VM::throwException(v4, this, v34);
          v36 = v45;
          v45 = 0;
          if (v36)
          {
            if (*(_DWORD *)v36 == 2)
              WTF::StringImpl::destroy(v36, v35);
            else
              *(_DWORD *)v36 -= 2;
          }
        }
        v21 = 0;
        v29 = 1;
      }
      else
      {
        v26 = v39;
        v39 = 0;
        v21 = WebCore::wrap<WebCore::SVGPoint>(v17, v26, v25);
        v27 = *((_DWORD *)v26 + 2);
        v28 = v27 - 1;
        if (v27 == 1)
        {
          (*(void (**)(WTF *))(*(_QWORD *)v26 + 8))(v26);
          v29 = 0;
        }
        else
        {
          v29 = 0;
          *((_DWORD *)v26 + 2) = v28;
        }
      }
      ((void (*)(JSC::VM **, WTF **))off_1E32FACF8[v29])(&v44, &v39);
      v41 = -1;
      v30 = v38;
      v38 = 0;
      if (v30)
      {
        if (v30[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v30 + 8))(v30);
        else
          --v30[2];
      }
    }
  }
  else
  {
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v44, 0, "newItem", 8, "SVGPointList", 13, v15, "insertItemBefore", 17, "SVGPoint", 9);
    return 0;
  }
  return (_BYTE *)v21;
}

_BYTE *WebCore::jsSVGPointListPrototypeFunction_replaceItem(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  unsigned __int8 v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  WebCore::JSDOMGlobalObject *v25;
  WTF *v26;
  int v27;
  int v28;
  uint64_t v29;
  _DWORD *v30;
  JSValue v33;
  JSValue v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WebCore *v37;
  JSC::JSGlobalObject *v38;
  JSC::CallFrame *v39;
  JSC::VM *v40;
  _DWORD *v41;
  _DWORD v42[2];
  WTF *v43;
  char v44[8];
  WTF::StringImpl *v45;
  int v46;
  WTF *v47;
  uint64_t v48;
  int v49;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v40 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v40, "SVGPointList", "replaceItem");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSSVGPointList::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSSVGPointList::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v40, "SVGPointList", "replaceItem");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v33.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v33);
  }
  v12 = *(_QWORD *)(v5 + 24);
  v13 = *((_QWORD *)a2 + 6);
  v47 = v4;
  v14 = JSC::jsDynamicCast<WebCore::JSSVGPoint *>(v13);
  if (!v14 || (v16 = *(_DWORD **)(v14 + 24)) == 0)
  {
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v47, 0, "newItem", 8, "SVGPointList", 13, v15, "replaceItem", 12, "SVGPoint", 9);
    return 0;
  }
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v42);
  if (v42[1])
    return 0;
  v17 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  ++v16[2];
  v41 = v16;
  if (*(_BYTE *)(v12 + 24) == 1)
  {
    v18 = 4;
    LOBYTE(v47) = 4;
    v19 = 1;
    v49 = 1;
    v48 = 0;
LABEL_24:
    v44[0] = v18;
    v22 = 1;
    v46 = 1;
    ((uint64_t (**)(WTF **, char *))off_1E32F83C8)[v19](&v43, (char *)&v47);
    v24 = 0;
    v45 = 0;
    LOBYTE(v47) = v18;
    v48 = 0;
    v23 = 1;
    v49 = 1;
    goto LABEL_25;
  }
  LOBYTE(v47) = 1;
  v49 = 0;
  if (*(_DWORD *)(v12 + 44) <= v42[0])
  {
    v18 = 0;
    v19 = 0;
    goto LABEL_24;
  }
  v44[0] = 1;
  v46 = 0;
  (*(void (**)(WTF **__return_ptr, uint64_t))(*(_QWORD *)v12 + 64))(&v43, v12);
  v21 = *(_QWORD *)(v12 + 16);
  if (v21)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 32))(v21, v12);
  v22 = 0;
  v23 = 0;
  v18 = v43;
  v47 = v43;
  v49 = 0;
  v24 = 1;
LABEL_25:
  ((uint64_t (**)(WTF **, char *))off_1E32F83C8)[v23](&v43, v44);
  if ((v24 & 1) != 0)
  {
    v26 = v47;
    v47 = 0;
    v20 = WebCore::wrap<WebCore::SVGPoint>(v17, v26, v25);
    v27 = *((_DWORD *)v26 + 2);
    v28 = v27 - 1;
    if (v27 == 1)
    {
      (*(void (**)(WTF *))(*(_QWORD *)v26 + 8))(v26);
      v29 = 0;
    }
    else
    {
      v29 = 0;
      *((_DWORD *)v26 + 2) = v28;
    }
LABEL_28:
    ((void (*)(char *, WTF **))off_1E32FACF8[v29])(v44, &v47);
    v49 = -1;
    v30 = v41;
    v41 = 0;
    if (v30)
    {
      if (v30[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v30 + 8))(v30);
      else
        --v30[2];
    }
    return (_BYTE *)v20;
  }
  if ((v22 & 1) != 0)
  {
    v44[0] = v18;
    v48 = 0;
    v45 = 0;
    if (!*((_QWORD *)v4 + 2))
    {
      v34.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v18, (JSC::JSGlobalObject *)&v45);
      JSC::VM::throwException(v4, this, v34);
      v36 = v45;
      v45 = 0;
      if (v36)
      {
        if (*(_DWORD *)v36 == 2)
          WTF::StringImpl::destroy(v36, v35);
        else
          *(_DWORD *)v36 -= 2;
      }
    }
    v20 = 0;
    v29 = 1;
    goto LABEL_28;
  }
  v37 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsSVGPointListPrototypeFunction_removeItem(v37, v38, v39);
}

_BYTE *WebCore::jsSVGPointListPrototypeFunction_removeItem(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  WebCore::JSDOMGlobalObject *v19;
  WTF *v20;
  unint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  JSValue v27;
  JSValue v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WebCore *v31;
  JSC::JSGlobalObject *v32;
  JSC::CallFrame *v33;
  JSC::VM *v34;
  _DWORD v35[2];
  WTF *v36;
  char v37[8];
  WTF::StringImpl *v38;
  int v39;
  WTF *v40;
  uint64_t v41;
  int v42;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v34 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v34, "SVGPointList", "removeItem");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSSVGPointList::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSSVGPointList::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v34, "SVGPointList", "removeItem");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v27.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v27);
  }
  v11 = *(_QWORD *)(v5 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v35);
  if (v35[1])
    return 0;
  v12 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  if (*(_BYTE *)(v11 + 24) == 1)
  {
    v13 = 4;
    LOBYTE(v40) = 4;
    v14 = 1;
    v42 = 1;
    v41 = 0;
LABEL_21:
    v37[0] = v13;
    v16 = 1;
    v39 = 1;
    ((uint64_t (**)(WTF **, char *))off_1E32F83C8)[v14](&v36, (char *)&v40);
    v18 = 0;
    v38 = 0;
    LOBYTE(v40) = v13;
    v41 = 0;
    v17 = 1;
    v42 = 1;
    goto LABEL_22;
  }
  LOBYTE(v40) = 1;
  v42 = 0;
  if (*(_DWORD *)(v11 + 44) <= v35[0])
  {
    v13 = 0;
    v14 = 0;
    goto LABEL_21;
  }
  v37[0] = 1;
  v39 = 0;
  (*(void (**)(WTF **__return_ptr, uint64_t))(*(_QWORD *)v11 + 72))(&v36, v11);
  v15 = *(_QWORD *)(v11 + 16);
  if (v15)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 32))(v15, v11);
  v16 = 0;
  v17 = 0;
  v13 = v36;
  v40 = v36;
  v42 = 0;
  v18 = 1;
LABEL_22:
  ((uint64_t (**)(WTF **, char *))off_1E32F83C8)[v17](&v36, v37);
  if ((v18 & 1) != 0)
  {
    v20 = v40;
    v40 = 0;
    v21 = WebCore::wrap<WebCore::SVGPoint>(v12, v20, v19);
    v22 = *((_DWORD *)v20 + 2);
    v23 = v22 - 1;
    if (v22 == 1)
    {
      (*(void (**)(WTF *))(*(_QWORD *)v20 + 8))(v20);
      v24 = 0;
    }
    else
    {
      v24 = 0;
      *((_DWORD *)v20 + 2) = v23;
    }
LABEL_25:
    ((void (*)(char *, WTF **))off_1E32FACF8[v24])(v37, &v40);
    return (_BYTE *)v21;
  }
  if ((v16 & 1) != 0)
  {
    v37[0] = v13;
    v41 = 0;
    v38 = 0;
    if (!*((_QWORD *)v4 + 2))
    {
      v28.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v13, (JSC::JSGlobalObject *)&v38);
      JSC::VM::throwException(v4, this, v28);
      v30 = v38;
      v38 = 0;
      if (v30)
      {
        if (*(_DWORD *)v30 == 2)
          WTF::StringImpl::destroy(v30, v29);
        else
          *(_DWORD *)v30 -= 2;
      }
    }
    v21 = 0;
    v24 = 1;
    goto LABEL_25;
  }
  v31 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsSVGPointListPrototypeFunction_appendItem(v31, v32, v33);
}

_BYTE *WebCore::jsSVGPointListPrototypeFunction_appendItem(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  int v18;
  unsigned __int8 v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  WebCore::JSDOMGlobalObject *v23;
  WTF *v24;
  int v25;
  int v26;
  uint64_t v27;
  _DWORD *v28;
  JSValue v31;
  JSValue v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  JSC::VM *v35;
  _DWORD *v36;
  WTF *v37;
  uint64_t v38;
  int v39;
  WTF *v40;
  JSC::VM *v41;
  WTF::StringImpl *v42;
  int v43;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v35 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v35, "SVGPointList", "appendItem");
  v6 = 16 * (*(_DWORD *)v5 & 0xFFFFFFFE);
  v7 = *(unsigned int *)(v6 + 0x4C);
  v8 = *(_DWORD *)(v6 + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSSVGPointList::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSSVGPointList::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v35, "SVGPointList", "appendItem");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v31.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v31);
  }
  v12 = *(_QWORD *)(v5 + 24);
  v13 = *((_QWORD *)a2 + 6);
  v41 = v4;
  v14 = JSC::jsDynamicCast<WebCore::JSSVGPoint *>(v13);
  if (v14 && (v16 = *(_DWORD **)(v14 + 24)) != 0)
  {
    v17 = *(_QWORD *)(v6 + 40);
    ++v16[2];
    v36 = v16;
    v18 = *(unsigned __int8 *)(v12 + 24);
    if (v18 == 1)
    {
      v19 = 4;
      LOBYTE(v41) = 4;
      v20 = 1;
      v43 = 1;
      v42 = 0;
      LOBYTE(v37) = 4;
      v38 = 0;
      v39 = 1;
    }
    else
    {
      LOBYTE(v41) = 1;
      v43 = 0;
      (*(void (**)(WTF **__return_ptr, uint64_t, _DWORD **))(*(_QWORD *)v12 + 80))(&v40, v12, &v36);
      v22 = *(_QWORD *)(v12 + 16);
      if (v22)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 32))(v22, v12);
      v20 = 0;
      v19 = v40;
      v37 = v40;
      v39 = 0;
    }
    ((uint64_t (**)(WTF **, char *))off_1E32F83C8)[v20](&v40, (char *)&v41);
    if (v18 == 1)
    {
      LOBYTE(v41) = v19;
      v38 = 0;
      v42 = 0;
      if (!*((_QWORD *)v4 + 2))
      {
        v32.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v19, (JSC::JSGlobalObject *)&v42);
        JSC::VM::throwException(v4, this, v32);
        v34 = v42;
        v42 = 0;
        if (v34)
        {
          if (*(_DWORD *)v34 == 2)
            WTF::StringImpl::destroy(v34, v33);
          else
            *(_DWORD *)v34 -= 2;
        }
      }
      v21 = 0;
      v27 = 1;
    }
    else
    {
      v24 = v37;
      v37 = 0;
      v21 = WebCore::wrap<WebCore::SVGPoint>(v17, v24, v23);
      v25 = *((_DWORD *)v24 + 2);
      v26 = v25 - 1;
      if (v25 == 1)
      {
        (*(void (**)(WTF *))(*(_QWORD *)v24 + 8))(v24);
        v27 = 0;
      }
      else
      {
        v27 = 0;
        *((_DWORD *)v24 + 2) = v26;
      }
    }
    ((void (*)(JSC::VM **, WTF **))off_1E32FACF8[v27])(&v41, &v37);
    v39 = -1;
    v28 = v36;
    v36 = 0;
    if (v28)
    {
      if (v28[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v28 + 8))(v28);
      else
        --v28[2];
    }
  }
  else
  {
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v41, 0, "newItem", 8, "SVGPointList", 13, v15, "appendItem", 11, "SVGPoint", 9);
    return 0;
  }
  return (_BYTE *)v21;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore8SVGPointENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore8SVGPointENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_BYTE *WebCore::jsSVGSVGElementPrototypeFunction_getIntersectionList(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v5;
  unint64_t v6;
  JSC::JSGlobalObject *v7;
  uint64_t v8;
  _DWORD *v9;
  WebCore::SVGSVGElement *v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL4 v13;
  char **v14;
  BOOL v15;
  unint64_t v17;
  WebCore::SVGRect *v18;
  unint64_t v19;
  WebCore::SVGElement *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  JSC::VM *v26;
  JSValue v29;
  JSC::VM *v30;
  JSC::VM *v31;

  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v30 = v5;
  v6 = JSC::jsDynamicCast<WebCore::JSSVGSVGElement *>(*((_QWORD *)a2 + 5));
  if (!v6)
    return WebCore::throwThisTypeError((int)this, (int)&v30, "SVGSVGElement", "getIntersectionList");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v29.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, v7);
    return (_BYTE *)JSC::VM::throwException(v5, this, v29);
  }
  v9 = (_DWORD *)v6;
  v10 = *(WebCore::SVGSVGElement **)(v6 + 24);
  v11 = *((_QWORD *)a2 + 6);
  v31 = v5;
  if ((v11 & 0xFFFE000000000002) != 0)
    goto LABEL_14;
  v12 = *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C);
  v13 = *(_DWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSSVGRect::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSSVGRect::s_info && v14 != 0);
  }
  if (v13 && (v18 = *(WebCore::SVGRect **)(v11 + 24)) != 0)
  {
    v19 = *((_QWORD *)a2 + 7);
    if ((v19 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
      v20 = 0;
    }
    else
    {
      v31 = v5;
      v21 = JSC::jsDynamicCast<WebCore::JSSVGElement *>(v19);
      if (!v21 || (v20 = *(WebCore::SVGElement **)(v21 + 24)) == 0)
      {
        WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v31, 1, "referenceElement", 17, "SVGSVGElement", 14, v22, "getIntersectionList", 20, "SVGElement", 11);
        return 0;
      }
    }
    v23 = *(_QWORD *)(16 * (*v9 & 0xFFFFFFFE) + 0x28);
    v24 = *(_QWORD *)(*((_QWORD *)v10 + 5) + 8);
    *(_DWORD *)(v24 + 24) += 2;
    WebCore::Document::updateLayout(v24, 6u, (uint64_t)v10);
    if (*(_DWORD *)(v24 + 24) == 2)
    {
      if ((*(_WORD *)(v24 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v24, v25);
    }
    else
    {
      *(_DWORD *)(v24 + 24) -= 2;
    }
    WebCore::SVGSVGElement::collectIntersectionOrEnclosureList(v10, v18, v20, (uint64_t (*)(WebCore::SVGSVGElement *, WebCore::SVGRect *))WebCore::checkIntersectionWithoutUpdatingLayout, &v31);
    v17 = WebCore::JSConverter<WebCore::IDLInterface<WebCore::NodeList>>::convert<WTF::Ref<WebCore::NodeList,WTF::RawPtrTraits<WebCore::NodeList>,WTF::DefaultRefDerefTraits<WebCore::NodeList>>>((uint64_t)this, v23, (uint64_t *)&v31);
    v26 = v31;
    v31 = 0;
    if (v26)
    {
      if (*((_DWORD *)v26 + 4) == 1)
        (*(void (**)(JSC::VM *))(*(_QWORD *)v26 + 8))(v26);
      else
        --*((_DWORD *)v26 + 4);
    }
  }
  else
  {
LABEL_14:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v31, 0, "rect", 5, "SVGSVGElement", 14, v8, "getIntersectionList", 20, "SVGRect", 8);
    return 0;
  }
  return (_BYTE *)v17;
}

_BYTE *WebCore::jsSVGSVGElementPrototypeFunction_getEnclosureList(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v5;
  unint64_t v6;
  JSC::JSGlobalObject *v7;
  uint64_t v8;
  _DWORD *v9;
  WebCore::SVGSVGElement *v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL4 v13;
  char **v14;
  BOOL v15;
  unint64_t v17;
  WebCore::SVGRect *v18;
  unint64_t v19;
  WebCore::SVGElement *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  JSC::VM *v26;
  JSValue v29;
  JSC::VM *v30;
  JSC::VM *v31;

  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v30 = v5;
  v6 = JSC::jsDynamicCast<WebCore::JSSVGSVGElement *>(*((_QWORD *)a2 + 5));
  if (!v6)
    return WebCore::throwThisTypeError((int)this, (int)&v30, "SVGSVGElement", "getEnclosureList");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v29.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, v7);
    return (_BYTE *)JSC::VM::throwException(v5, this, v29);
  }
  v9 = (_DWORD *)v6;
  v10 = *(WebCore::SVGSVGElement **)(v6 + 24);
  v11 = *((_QWORD *)a2 + 6);
  v31 = v5;
  if ((v11 & 0xFFFE000000000002) != 0)
    goto LABEL_14;
  v12 = *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C);
  v13 = *(_DWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSSVGRect::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSSVGRect::s_info && v14 != 0);
  }
  if (v13 && (v18 = *(WebCore::SVGRect **)(v11 + 24)) != 0)
  {
    v19 = *((_QWORD *)a2 + 7);
    if ((v19 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
      v20 = 0;
    }
    else
    {
      v31 = v5;
      v21 = JSC::jsDynamicCast<WebCore::JSSVGElement *>(v19);
      if (!v21 || (v20 = *(WebCore::SVGElement **)(v21 + 24)) == 0)
      {
        WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v31, 1, "referenceElement", 17, "SVGSVGElement", 14, v22, "getEnclosureList", 17, "SVGElement", 11);
        return 0;
      }
    }
    v23 = *(_QWORD *)(16 * (*v9 & 0xFFFFFFFE) + 0x28);
    v24 = *(_QWORD *)(*((_QWORD *)v10 + 5) + 8);
    *(_DWORD *)(v24 + 24) += 2;
    WebCore::Document::updateLayout(v24, 6u, (uint64_t)v10);
    if (*(_DWORD *)(v24 + 24) == 2)
    {
      if ((*(_WORD *)(v24 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v24, v25);
    }
    else
    {
      *(_DWORD *)(v24 + 24) -= 2;
    }
    WebCore::SVGSVGElement::collectIntersectionOrEnclosureList(v10, v18, v20, (uint64_t (*)(WebCore::SVGSVGElement *, WebCore::SVGRect *))WebCore::checkEnclosureWithoutUpdatingLayout, &v31);
    v17 = WebCore::JSConverter<WebCore::IDLInterface<WebCore::NodeList>>::convert<WTF::Ref<WebCore::NodeList,WTF::RawPtrTraits<WebCore::NodeList>,WTF::DefaultRefDerefTraits<WebCore::NodeList>>>((uint64_t)this, v23, (uint64_t *)&v31);
    v26 = v31;
    v31 = 0;
    if (v26)
    {
      if (*((_DWORD *)v26 + 4) == 1)
        (*(void (**)(JSC::VM *))(*(_QWORD *)v26 + 8))(v26);
      else
        --*((_DWORD *)v26 + 4);
    }
  }
  else
  {
LABEL_14:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v31, 0, "rect", 5, "SVGSVGElement", 14, v8, "getEnclosureList", 17, "SVGRect", 8);
    return 0;
  }
  return (_BYTE *)v17;
}

_BYTE *WebCore::jsSVGSVGElementPrototypeFunction_checkIntersection(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v5;
  JSC::JSGlobalObject *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL4 v13;
  char **v14;
  BOOL v15;
  uint64_t v17;
  WebCore::SVGElement *v18;
  uint64_t v19;
  void *v20;
  WebCore::SVGRect *v21;
  void *v22;
  JSValue v25;
  JSC::VM *v26;
  JSC::VM *v27;

  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v26 = v5;
  if (!JSC::jsDynamicCast<WebCore::JSSVGSVGElement *>(*((_QWORD *)a2 + 5)))
    return WebCore::throwThisTypeError((int)this, (int)&v26, "SVGSVGElement", "checkIntersection");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v25.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, v6);
    return (_BYTE *)JSC::VM::throwException(v5, this, v25);
  }
  v7 = *((_QWORD *)a2 + 6);
  v27 = v5;
  v8 = JSC::jsDynamicCast<WebCore::JSSVGElement *>(v7);
  if (v8 && (v10 = *(_QWORD *)(v8 + 24)) != 0)
  {
    v11 = *((_QWORD *)a2 + 7);
    v27 = (JSC::VM *)*((_QWORD *)this + 7);
    if ((v11 & 0xFFFE000000000002) != 0)
      goto LABEL_16;
    v12 = *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C);
    v13 = *(_DWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C) != 0;
    v14 = (char **)(16 * v12);
    if ((_DWORD)v12)
      v15 = v14 == &WebCore::JSSVGRect::s_info;
    else
      v15 = 1;
    if (!v15)
    {
      do
      {
        v14 = (char **)v14[2];
        v13 = v14 != 0;
      }
      while (v14 != &WebCore::JSSVGRect::s_info && v14 != 0);
    }
    if (v13 && (v18 = *(WebCore::SVGElement **)(v11 + 24)) != 0)
    {
      *(_DWORD *)(v10 + 24) += 2;
      v19 = *(_QWORD *)(*(_QWORD *)(v10 + 40) + 8);
      *(_DWORD *)(v19 + 24) += 2;
      WebCore::Document::updateLayout(v19, 6u, v10);
      if (*(_DWORD *)(v19 + 24) == 2)
      {
        if ((*(_WORD *)(v19 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v19, v20);
      }
      else
      {
        *(_DWORD *)(v19 + 24) -= 2;
      }
      if (WebCore::checkIntersectionWithoutUpdatingLayout((WebCore *)v10, v18, v21))
        v17 = 7;
      else
        v17 = 6;
      if (*(_DWORD *)(v10 + 24) == 2)
      {
        if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v10, v22);
      }
      else
      {
        *(_DWORD *)(v10 + 24) -= 2;
      }
    }
    else
    {
LABEL_16:
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v27, 1, "rect", 5, "SVGSVGElement", 14, v9, "checkIntersection", 18, "SVGRect", 8);
      return 0;
    }
  }
  else
  {
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v27, 0, "element", 8, "SVGSVGElement", 14, v9, "checkIntersection", 18, "SVGElement", 11);
    return 0;
  }
  return (_BYTE *)v17;
}

_BYTE *WebCore::jsSVGSVGElementPrototypeFunction_checkEnclosure(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v5;
  JSC::JSGlobalObject *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL4 v13;
  char **v14;
  BOOL v15;
  uint64_t v17;
  WebCore::SVGElement *v18;
  uint64_t v19;
  void *v20;
  WebCore::SVGRect *v21;
  void *v22;
  JSValue v25;
  JSC::VM *v26;
  JSC::VM *v27;

  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v26 = v5;
  if (!JSC::jsDynamicCast<WebCore::JSSVGSVGElement *>(*((_QWORD *)a2 + 5)))
    return WebCore::throwThisTypeError((int)this, (int)&v26, "SVGSVGElement", "checkEnclosure");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v25.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, v6);
    return (_BYTE *)JSC::VM::throwException(v5, this, v25);
  }
  v7 = *((_QWORD *)a2 + 6);
  v27 = v5;
  v8 = JSC::jsDynamicCast<WebCore::JSSVGElement *>(v7);
  if (v8 && (v10 = *(_QWORD *)(v8 + 24)) != 0)
  {
    v11 = *((_QWORD *)a2 + 7);
    v27 = (JSC::VM *)*((_QWORD *)this + 7);
    if ((v11 & 0xFFFE000000000002) != 0)
      goto LABEL_16;
    v12 = *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C);
    v13 = *(_DWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C) != 0;
    v14 = (char **)(16 * v12);
    if ((_DWORD)v12)
      v15 = v14 == &WebCore::JSSVGRect::s_info;
    else
      v15 = 1;
    if (!v15)
    {
      do
      {
        v14 = (char **)v14[2];
        v13 = v14 != 0;
      }
      while (v14 != &WebCore::JSSVGRect::s_info && v14 != 0);
    }
    if (v13 && (v18 = *(WebCore::SVGElement **)(v11 + 24)) != 0)
    {
      *(_DWORD *)(v10 + 24) += 2;
      v19 = *(_QWORD *)(*(_QWORD *)(v10 + 40) + 8);
      *(_DWORD *)(v19 + 24) += 2;
      WebCore::Document::updateLayout(v19, 6u, v10);
      if (*(_DWORD *)(v19 + 24) == 2)
      {
        if ((*(_WORD *)(v19 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v19, v20);
      }
      else
      {
        *(_DWORD *)(v19 + 24) -= 2;
      }
      if (WebCore::checkEnclosureWithoutUpdatingLayout((WebCore *)v10, v18, v21))
        v17 = 7;
      else
        v17 = 6;
      if (*(_DWORD *)(v10 + 24) == 2)
      {
        if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v10, v22);
      }
      else
      {
        *(_DWORD *)(v10 + 24) -= 2;
      }
    }
    else
    {
LABEL_16:
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v27, 1, "rect", 5, "SVGSVGElement", 14, v9, "checkEnclosure", 15, "SVGRect", 8);
      return 0;
    }
  }
  else
  {
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v27, 0, "element", 8, "SVGSVGElement", 14, v9, "checkEnclosure", 15, "SVGElement", 11);
    return 0;
  }
  return (_BYTE *)v17;
}

uint64_t WebCore::jsSVGSVGElementPrototypeFunction_deselectAll(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  int v3;
  unint64_t v4;
  uint64_t v6;

  v3 = (int)this;
  v6 = *((_QWORD *)this + 7);
  v4 = JSC::jsDynamicCast<WebCore::JSSVGSVGElement *>(*((_QWORD *)a2 + 5));
  if (!v4)
    return (uint64_t)WebCore::throwThisTypeError(v3, (int)&v6, "SVGSVGElement", "deselectAll");
  WebCore::SVGSVGElement::deselectAll(*(WebCore::SVGSVGElement **)(v4 + 24));
  return 10;
}

_BYTE *WebCore::jsSVGSVGElementPrototypeFunction_createSVGNumber(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  int v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  WTF *v10;

  v3 = (int)this;
  v9 = *((_QWORD *)this + 7);
  v4 = (_DWORD *)JSC::jsDynamicCast<WebCore::JSSVGSVGElement *>(*((_QWORD *)a2 + 5));
  if (!v4)
    return WebCore::throwThisTypeError(v3, (int)&v9, "SVGSVGElement", "createSVGNumber");
  v5 = *(_QWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x28);
  v6 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v6 + 8) = 1;
  *(_QWORD *)(v6 + 16) = 0;
  *(_WORD *)(v6 + 24) = 0;
  *(_DWORD *)(v6 + 28) = 0;
  *(_QWORD *)v6 = off_1E32EE788;
  v10 = (WTF *)v6;
  v7 = WebCore::createWrapper<WebCore::SVGNumber,WebCore::SVGNumber>(v5, &v10);
  if (v10)
  {
    if (*((_DWORD *)v10 + 2) == 1)
      (*(void (**)(WTF *))(*(_QWORD *)v10 + 8))(v10);
    else
      --*((_DWORD *)v10 + 2);
  }
  return (_BYTE *)v7;
}

_BYTE *WebCore::jsSVGSVGElementPrototypeFunction_createSVGLength(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  int v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  WTF *v10;

  v3 = (int)this;
  v9 = *((_QWORD *)this + 7);
  v4 = (_DWORD *)JSC::jsDynamicCast<WebCore::JSSVGSVGElement *>(*((_QWORD *)a2 + 5));
  if (!v4)
    return WebCore::throwThisTypeError(v3, (int)&v9, "SVGSVGElement", "createSVGLength");
  v5 = *(_QWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x28);
  v6 = WTF::fastMalloc((WTF *)0x28);
  *(_OWORD *)(v6 + 8) = 0u;
  *(_OWORD *)(v6 + 24) = 0u;
  *(_DWORD *)(v6 + 8) = 1;
  *(_QWORD *)v6 = off_1E32EE180;
  v10 = 0;
  WebCore::SVGLengthValue::SVGLengthValue(v6 + 28, 2, (uint64_t *)&v10);
  *(_QWORD *)v6 = off_1E32EE148;
  v10 = (WTF *)v6;
  v7 = WebCore::createWrapper<WebCore::SVGLength,WebCore::SVGLength>(v5, &v10);
  if (v10)
  {
    if (*((_DWORD *)v10 + 2) == 1)
      (*(void (**)(WTF *))(*(_QWORD *)v10 + 8))(v10);
    else
      --*((_DWORD *)v10 + 2);
  }
  return (_BYTE *)v7;
}

_BYTE *WebCore::jsSVGSVGElementPrototypeFunction_createSVGAngle(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  WTF *v8;
  uint64_t v10;
  WTF *v11;

  v10 = *((_QWORD *)this + 7);
  v4 = (_DWORD *)JSC::jsDynamicCast<WebCore::JSSVGSVGElement *>(*((_QWORD *)a2 + 5));
  if (!v4)
    return WebCore::throwThisTypeError((int)this, (int)&v10, "SVGSVGElement", "createSVGAngle");
  v5 = *(_QWORD *)(16 * (*v4 & 0xFFFFFFFE) + 0x28);
  v6 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v6 + 8) = 1;
  *(_QWORD *)(v6 + 16) = 0;
  *(_WORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 28) = 1;
  *(_QWORD *)v6 = off_1E32EE0A0;
  v11 = (WTF *)v6;
  v7 = WebCore::toJSNewlyCreated((uint64_t)this, v5, &v11);
  v8 = v11;
  v11 = 0;
  if (v8)
  {
    if (*((_DWORD *)v8 + 2) == 1)
      (*(void (**)(WTF *))(*(_QWORD *)v8 + 8))(v8);
    else
      --*((_DWORD *)v8 + 2);
  }
  return (_BYTE *)v7;
}

_BYTE *WebCore::jsSVGSVGElementPrototypeFunction_createSVGPoint(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  WebCore::JSSVGPoint **v9;
  uint64_t v10;
  WebCore::JSDOMGlobalObject *v11;
  unint64_t v12;
  uint64_t v15;
  WTF *v16;

  v3 = *((_QWORD *)a2 + 5);
  v15 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v15, "SVGSVGElement", "createSVGPoint");
  v4 = 16 * (*(_DWORD *)v3 & 0xFFFFFFFE);
  v5 = *(unsigned int *)(v4 + 76);
  v6 = *(_DWORD *)(v4 + 76) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGSVGElement::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGSVGElement::s_info && v7 != 0);
  }
  if (!v6)
    return WebCore::throwThisTypeError((int)this, (int)&v15, "SVGSVGElement", "createSVGPoint");
  v9 = *(WebCore::JSSVGPoint ***)(v4 + 40);
  v10 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v10 + 8) = 1;
  *(_QWORD *)(v10 + 16) = 0;
  *(_WORD *)(v10 + 24) = 0;
  *(_DWORD *)(v10 + 28) = 0;
  *(_DWORD *)(v10 + 32) = 0;
  *(_QWORD *)v10 = off_1E33006C8;
  v16 = (WTF *)v10;
  v12 = WebCore::toJSNewlyCreated(v9, &v16, v11);
  if (v16)
  {
    if (*((_DWORD *)v16 + 2) == 1)
      (*(void (**)(WTF *))(*(_QWORD *)v16 + 8))(v16);
    else
      --*((_DWORD *)v16 + 2);
  }
  return (_BYTE *)v12;
}

_BYTE *WebCore::jsSVGSVGElementPrototypeFunction_createSVGMatrix(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  WebCore::JSSVGMatrix **v10;
  uint64_t v11;
  WebCore::JSDOMGlobalObject *v12;
  unint64_t v13;
  uint64_t v15;
  WTF *v16;

  v3 = *((_QWORD *)a2 + 5);
  v15 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v15, "SVGSVGElement", "createSVGMatrix");
  v4 = 16 * (*(_DWORD *)v3 & 0xFFFFFFFE);
  v5 = *(unsigned int *)(v4 + 76);
  v6 = *(_DWORD *)(v4 + 76) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGSVGElement::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGSVGElement::s_info && v7 != 0);
  }
  if (!v6)
    return WebCore::throwThisTypeError((int)this, (int)&v15, "SVGSVGElement", "createSVGMatrix");
  v10 = *(WebCore::JSSVGMatrix ***)(v4 + 40);
  v11 = WTF::fastMalloc((WTF *)0x50);
  *(_DWORD *)(v11 + 8) = 1;
  *(_QWORD *)(v11 + 16) = 0;
  *(_WORD *)(v11 + 24) = 0;
  *(_OWORD *)(v11 + 32) = constinit_16;
  *(_OWORD *)(v11 + 48) = unk_1969FEC10;
  *(_OWORD *)(v11 + 64) = xmmword_1969FEC20;
  *(_QWORD *)v11 = off_1E32EE1B8;
  v16 = (WTF *)v11;
  v13 = WebCore::toJSNewlyCreated(v10, &v16, v12);
  if (v16)
  {
    if (*((_DWORD *)v16 + 2) == 1)
      (*(void (**)(WTF *))(*(_QWORD *)v16 + 8))(v16);
    else
      --*((_DWORD *)v16 + 2);
  }
  return (_BYTE *)v13;
}

_BYTE *WebCore::jsSVGSVGElementPrototypeFunction_createSVGRect(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  WTF *v15;

  v3 = *((_QWORD *)a2 + 5);
  v14 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v14, "SVGSVGElement", "createSVGRect");
  v4 = 16 * (*(_DWORD *)v3 & 0xFFFFFFFE);
  v5 = *(unsigned int *)(v4 + 76);
  v6 = *(_DWORD *)(v4 + 76) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGSVGElement::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGSVGElement::s_info && v7 != 0);
  }
  if (!v6)
    return WebCore::throwThisTypeError((int)this, (int)&v14, "SVGSVGElement", "createSVGRect");
  v10 = *(_QWORD *)(v4 + 40);
  v11 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v11 + 8) = 1;
  *(_QWORD *)(v11 + 16) = 0;
  *(_WORD *)(v11 + 24) = 0;
  *(_QWORD *)(v11 + 36) = 0;
  *(_QWORD *)(v11 + 28) = 0;
  *(_QWORD *)v11 = off_1E32EE110;
  v15 = (WTF *)v11;
  v12 = WebCore::createWrapper<WebCore::SVGRect,WebCore::SVGRect>(v10, &v15);
  if (v15)
  {
    if (*((_DWORD *)v15 + 2) == 1)
      (*(void (**)(WTF *))(*(_QWORD *)v15 + 8))(v15);
    else
      --*((_DWORD *)v15 + 2);
  }
  return (_BYTE *)v12;
}

_BYTE *WebCore::jsSVGSVGElementPrototypeFunction_createSVGTransform(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  WebCore::JSSVGTransform **v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::JSDOMGlobalObject *v12;
  int v13;
  unint64_t v14;
  uint64_t v17;
  WTF *v18;

  v3 = *((_QWORD *)a2 + 5);
  v17 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v17, "SVGSVGElement", "createSVGTransform");
  v4 = 16 * (*(_DWORD *)v3 & 0xFFFFFFFE);
  v5 = *(unsigned int *)(v4 + 76);
  v6 = *(_DWORD *)(v4 + 76) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGSVGElement::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGSVGElement::s_info && v7 != 0);
  }
  if (!v6)
    return WebCore::throwThisTypeError((int)this, (int)&v17, "SVGSVGElement", "createSVGTransform");
  v9 = *(WebCore::JSSVGTransform ***)(v4 + 40);
  v10 = WTF::fastMalloc((WTF *)0x48);
  *(_QWORD *)v10 = off_1E32EE228;
  *(_QWORD *)(v10 + 64) = &unk_1E32EE270;
  v11 = WTF::fastMalloc((WTF *)0x50);
  *(_DWORD *)(v11 + 8) = 1;
  *(_QWORD *)(v11 + 16) = v10 + 64;
  *(_WORD *)(v11 + 24) = 0;
  *(_OWORD *)(v11 + 48) = unk_1969FEC10;
  *(_OWORD *)(v11 + 64) = xmmword_1969FEC20;
  *(_OWORD *)(v11 + 32) = constinit_16;
  *(_QWORD *)v11 = off_1E32EE1B8;
  *(_DWORD *)(v10 + 8) = 1;
  *(_QWORD *)(v10 + 16) = 0;
  *(_WORD *)(v10 + 24) = 0;
  *(_QWORD *)v10 = &off_1E32EE2A8;
  *(_DWORD *)(v10 + 32) = 1;
  v13 = *(_DWORD *)(v11 + 8);
  *(_DWORD *)(v11 + 8) = v13 + 1;
  *(_QWORD *)(v10 + 40) = v11;
  *(_QWORD *)(v10 + 48) = 0;
  *(_DWORD *)(v10 + 56) = 0;
  if (v13)
    *(_DWORD *)(v11 + 8) = v13;
  else
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  *(_QWORD *)v10 = off_1E32EE228;
  *(_QWORD *)(v10 + 64) = &unk_1E32EE270;
  v18 = (WTF *)v10;
  v14 = WebCore::toJSNewlyCreated(v9, &v18, v12);
  if (v18)
  {
    if (*((_DWORD *)v18 + 2) == 1)
      (*(void (**)(WTF *))(*(_QWORD *)v18 + 8))(v18);
    else
      --*((_DWORD *)v18 + 2);
  }
  return (_BYTE *)v14;
}

_BYTE *WebCore::jsSVGSVGElementPrototypeFunction_createSVGTransformFromMatrix(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  unint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  WebCore::JSSVGTransform **v10;
  WebCore::JSDOMGlobalObject *v11;
  unint64_t v12;
  uint64_t v14;
  _OWORD v15[12];
  WTF *v16;
  _BYTE v17[8];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v14 = *((_QWORD *)this + 7);
  v3 = *((_QWORD *)a2 + 5);
  if ((v3 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v14, "SVGSVGElement", "createSVGTransformFromMatrix");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSSVGSVGElement::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSSVGSVGElement::s_info && v6 != 0);
  }
  if (!v5)
    return WebCore::throwThisTypeError((int)this, (int)&v14, "SVGSVGElement", "createSVGTransformFromMatrix");
  if (*((_DWORD *)a2 + 8) == 1)
    v9 = 10;
  else
    v9 = *((_QWORD *)a2 + 6);
  WebCore::convertDictionary<WebCore::DOMMatrix2DInit>((JSC::JSCell *)v9, (uint64_t)this, (uint64_t)v17);
  if (v30)
    return 0;
  v10 = *(WebCore::JSSVGTransform ***)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x28);
  v15[8] = v26;
  v15[9] = v27;
  v15[10] = v28;
  v15[11] = v29;
  v15[4] = v22;
  v15[5] = v23;
  v15[6] = v24;
  v15[7] = v25;
  v15[0] = v18;
  v15[1] = v19;
  v15[2] = v20;
  v15[3] = v21;
  WebCore::SVGSVGElement::createSVGTransformFromMatrix((uint64_t)v15, (uint64_t *)&v16);
  v12 = WebCore::toJSNewlyCreated(v10, &v16, v11);
  if (v16)
  {
    if (*((_DWORD *)v16 + 2) == 1)
      (*(void (**)(void))(*(_QWORD *)v16 + 8))();
    else
      --*((_DWORD *)v16 + 2);
  }
  return (_BYTE *)v12;
}

_BYTE *WebCore::jsSVGSVGElementPrototypeFunction_getElementById(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::SVGSVGElement *v11;
  JSC::JSRopeString *v12;
  JSC::JSRopeString *v13;
  WTF::StringImpl *v14;
  JSC::JSGlobalObject *v15;
  WebCore::SVGSVGElement *ElementById;
  WTF::StringImpl *v17;
  WebCore::Element *v18;
  unint64_t v19;
  WTF::StringImpl *v20;
  JSValue v23;
  JSC::VM *v24;
  JSC::JSRopeString *v25;
  WTF::StringImpl *v26;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v24 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v24, "SVGSVGElement", "getElementById");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSSVGSVGElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSSVGSVGElement::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v24, "SVGSVGElement", "getElementById");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v23.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v23);
  }
  v11 = *(WebCore::SVGSVGElement **)(v5 + 24);
  v12 = (JSC::JSRopeString *)*((_QWORD *)a2 + 6);
  v25 = v12;
  if (((unint64_t)v12 & 0xFFFE000000000002) != 0 || (v13 = v12, *((_BYTE *)v12 + 5) != 2))
    v13 = (JSC::JSRopeString *)JSC::JSValue::toStringSlowCase((JSC::JSValue *)&v25, this);
  v14 = (WTF::StringImpl *)*((_QWORD *)v13 + 1);
  if ((v14 & 1) != 0)
  {
    JSC::JSRopeString::resolveRopeToExistingAtomString(v13, this);
  }
  else
  {
    if ((*((_BYTE *)v14 + 16) & 0x10) != 0)
    {
      *(_DWORD *)v14 += 2;
      goto LABEL_20;
    }
    WTF::AtomStringImpl::lookUpSlowCase(v14, a2);
  }
  v14 = v26;
LABEL_20:
  v15 = *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  v26 = v14;
  ElementById = WebCore::SVGSVGElement::getElementById(v11, (const WTF::AtomString *)&v26);
  if (ElementById)
    v19 = WebCore::toJS(this, v15, ElementById, v18);
  else
    v19 = 2;
  v20 = v26;
  v26 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v17);
    else
      *(_DWORD *)v20 -= 2;
  }
  return (_BYTE *)v19;
}

uint64_t WebCore::jsSVGSVGElementPrototypeFunction_pauseAnimations(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  double v10;
  WTF *v12;
  void *v13;
  uint64_t v14;

  v3 = *((_QWORD *)a2 + 5);
  v14 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v14, "SVGSVGElement", "pauseAnimations");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSSVGSVGElement::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSSVGSVGElement::s_info && v6 != 0);
  }
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v14, "SVGSVGElement", "pauseAnimations");
  v9 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 248);
  ++*(_DWORD *)v9;
  if (*(double *)(v9 + 16) == 0.0)
  {
    WTF::MonotonicTime::now(this);
    *(double *)(v9 + 16) = v10;
    if (*(double *)(v9 + 8) != 0.0)
    {
      *(double *)(v9 + 24) = v10 - *(double *)(v9 + 32) + *(double *)(v9 + 24);
      if ((*(_QWORD *)(v9 + 88) & 0xFFFFFFFFFFFFLL) != 0)
        WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v9 + 56));
    }
  }
  if (*(_DWORD *)v9 == 1)
  {
    WebCore::SMILTimeContainer::~SMILTimeContainer((WebCore::SMILTimeContainer *)v9, a2);
    WTF::fastFree(v12, v13);
  }
  else
  {
    --*(_DWORD *)v9;
  }
  return 10;
}

uint64_t WebCore::jsSVGSVGElementPrototypeFunction_unpauseAnimations(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  double *v9;
  int v10;
  WTF *v12;
  void *v13;
  uint64_t v14;

  v3 = *((_QWORD *)a2 + 5);
  v14 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v14, "SVGSVGElement", "unpauseAnimations");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSSVGSVGElement::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSSVGSVGElement::s_info && v6 != 0);
  }
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v14, "SVGSVGElement", "unpauseAnimations");
  v9 = *(double **)(*(_QWORD *)(v3 + 24) + 248);
  v10 = (*(_DWORD *)v9)++;
  if (v9[2] != 0.0)
  {
    WebCore::SMILTimeContainer::resume((WTF::MonotonicTime *)v9);
    v10 = *(_DWORD *)v9 - 1;
    if (*(_DWORD *)v9 != 1)
      goto LABEL_14;
LABEL_18:
    WebCore::SMILTimeContainer::~SMILTimeContainer((WebCore::SMILTimeContainer *)v9, a2);
    WTF::fastFree(v12, v13);
    return 10;
  }
  if (!v10)
    goto LABEL_18;
LABEL_14:
  *(_DWORD *)v9 = v10;
  return 10;
}

uint64_t WebCore::jsSVGSVGElementPrototypeFunction_animationsPaused(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  double *v9;
  int v10;
  double v11;
  WTF *v13;
  void *v14;
  uint64_t v15;

  v3 = *((_QWORD *)a2 + 5);
  v15 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v15, "SVGSVGElement", "animationsPaused");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSSVGSVGElement::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSSVGSVGElement::s_info && v6 != 0);
  }
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v15, "SVGSVGElement", "animationsPaused");
  v9 = *(double **)(*(_QWORD *)(v3 + 24) + 248);
  v10 = (*(_DWORD *)v9)++;
  v11 = v9[2];
  if (v10)
  {
    *(_DWORD *)v9 = v10;
  }
  else
  {
    WebCore::SMILTimeContainer::~SMILTimeContainer((WebCore::SMILTimeContainer *)v9, a2);
    WTF::fastFree(v13, v14);
  }
  if (v11 == 0.0)
    return 6;
  else
    return 7;
}

_BYTE *WebCore::jsSVGSVGElementPrototypeFunction_getCurrentTime(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  double *v9;
  int v10;
  double v11;
  double v12;
  float v13;
  double v14;
  uint64_t v15;
  WTF *v17;
  void *v18;
  uint64_t v19;

  v3 = *((_QWORD *)a2 + 5);
  v19 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v19, "SVGSVGElement", "getCurrentTime");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSSVGSVGElement::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSSVGSVGElement::s_info && v6 != 0);
  }
  if (!v5)
    return WebCore::throwThisTypeError((int)this, (int)&v19, "SVGSVGElement", "getCurrentTime");
  v9 = *(double **)(*(_QWORD *)(v3 + 24) + 248);
  v10 = (*(_DWORD *)v9)++;
  if (v9[1] == 0.0)
  {
    v12 = 0.0;
  }
  else if (v9[2] == 0.0)
  {
    WTF::MonotonicTime::now(this);
    v12 = v9[3] + v11 - v9[4];
    v10 = *(_DWORD *)v9 - 1;
  }
  else
  {
    v12 = v9[3];
  }
  if (v10)
  {
    *(_DWORD *)v9 = v10;
  }
  else
  {
    WebCore::SMILTimeContainer::~SMILTimeContainer((WebCore::SMILTimeContainer *)v9, a2);
    WTF::fastFree(v17, v18);
  }
  v13 = v12;
  v14 = v13;
  if (COERCE__INT64(fabs(v13)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v15 = (int)v13, (double)(int)v15 == v14)
    && ((*(_QWORD *)&v12 & 0x8000000000000000) == 0 || (_DWORD)v15))
  {
    return (_BYTE *)(v15 | 0xFFFE000000000000);
  }
  else
  {
    return (_BYTE *)(*(_QWORD *)&v14 + 0x2000000000000);
  }
}

uint64_t WebCore::jsSVGSVGElementPrototypeFunction_setCurrentTime(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  unint64_t v12;
  double v13;
  float v14;
  WebCore::SMILTimeContainer *v15;
  void *v16;
  WTF *v18;
  void *v19;
  JSValue v20;
  double v21;
  _QWORD v22[2];
  double v23;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v22[0] = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)v22, "SVGSVGElement", "setCurrentTime");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSSVGSVGElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSSVGSVGElement::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)v22, "SVGSVGElement", "setCurrentTime");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v20.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v20);
  }
  v11 = *(_QWORD *)(v5 + 24);
  v12 = *((unint64_t *)a2 + 6);
  v22[1] = v4;
  v23 = *(double *)&v12;
  if (v12 >= 0xFFFE000000000000)
  {
    v13 = (double)(int)v12;
  }
  else if (v12 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v23, this);
    v13 = v21;
  }
  else
  {
    *(_QWORD *)&v13 = v12 - 0x2000000000000;
  }
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if ((*(_QWORD *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v13 < -3.40282347e38 || v13 > 3.40282347e38)
  {
    JSC::throwTypeError();
    return 0;
  }
  v14 = v13;
  v15 = *(WebCore::SMILTimeContainer **)(v11 + 248);
  ++*(_DWORD *)v15;
  if (v14 < 0.0)
    v14 = 0.0;
  v23 = v14;
  WebCore::SMILTimeContainer::setElapsed(v15, &v23);
  if (*(_DWORD *)v15 == 1)
  {
    WebCore::SMILTimeContainer::~SMILTimeContainer(v15, v16);
    WTF::fastFree(v18, v19);
  }
  else
  {
    --*(_DWORD *)v15;
  }
  return 10;
}

_BYTE *WebCore::jsSVGSVGElementPrototypeFunction_suspendRedraw(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  JSValue v13;
  JSC::VM *v14;
  _DWORD v15[2];

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v14 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v14, "SVGSVGElement", "suspendRedraw");
  v6 = 16 * (*(_DWORD *)v5 & 0xFFFFFFFE);
  v7 = *(unsigned int *)(v6 + 76);
  v8 = *(_DWORD *)(v6 + 76) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSSVGSVGElement::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSSVGSVGElement::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v14, "SVGSVGElement", "suspendRedraw");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v13.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v13);
  }
  else
  {
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v15);
    if (v15[1])
      return 0;
    else
      return (_BYTE *)0xFFFE000000000001;
  }
}

uint64_t WebCore::jsSVGSVGElementPrototypeFunction_unsuspendRedraw(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  JSValue v13;
  JSC::VM *v14;
  _DWORD v15[2];

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v14 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v14, "SVGSVGElement", "unsuspendRedraw");
  v6 = 16 * (*(_DWORD *)v5 & 0xFFFFFFFE);
  v7 = *(unsigned int *)(v6 + 76);
  v8 = *(_DWORD *)(v6 + 76) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSSVGSVGElement::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSSVGSVGElement::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v14, "SVGSVGElement", "unsuspendRedraw");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v13.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v13);
  }
  else
  {
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v15);
    if (v15[1])
      return 0;
    else
      return 10;
  }
}

uint64_t WebCore::jsSVGSVGElementPrototypeFunction_unsuspendRedrawAll(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;

  v3 = *((_QWORD *)a2 + 5);
  v11 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v11, "SVGSVGElement", "unsuspendRedrawAll");
  v4 = 16 * (*(_DWORD *)v3 & 0xFFFFFFFE);
  v5 = *(unsigned int *)(v4 + 76);
  v6 = *(_DWORD *)(v4 + 76) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGSVGElement::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGSVGElement::s_info && v7 != 0);
  }
  if (!v6)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v11, "SVGSVGElement", "unsuspendRedrawAll");
  else
    return 10;
}

uint64_t WebCore::jsSVGSVGElementPrototypeFunction_forceRedraw(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;

  v3 = *((_QWORD *)a2 + 5);
  v11 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v11, "SVGSVGElement", "forceRedraw");
  v4 = 16 * (*(_DWORD *)v3 & 0xFFFFFFFE);
  v5 = *(unsigned int *)(v4 + 76);
  v6 = *(_DWORD *)(v4 + 76) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGSVGElement::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGSVGElement::s_info && v7 != 0);
  }
  if (!v6)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v11, "SVGSVGElement", "forceRedraw");
  else
    return 10;
}

uint64_t WebCore::jsSVGStringListPrototypeFunction_clear(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  JSC::VM *v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  JSValue v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  WTF::StringImpl **v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF *v25;
  WTF::StringImpl **v26;
  JSC::VM *v27;
  char v28[8];
  WTF::StringImpl *v29;
  int v30;
  char v31;

  v4 = *((_QWORD *)a2 + 5);
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v27 = v5;
  if ((v4 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v27, "SVGStringList", "clear");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSSVGStringList::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSSVGStringList::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v27, "SVGStringList", "clear");
  v11 = *(_QWORD *)(v4 + 24);
  v12 = *(unsigned __int8 *)(v11 + 24);
  if (v12 == 1)
  {
    v13 = 4;
    v28[0] = 4;
    v14 = 1;
    v30 = 1;
    v29 = 0;
  }
  else
  {
    v28[0] = 1;
    v30 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
    if (*(_DWORD *)(v11 + 40))
    {
      v21 = *(unsigned int *)(v11 + 44);
      if ((_DWORD)v21)
      {
        v22 = *(WTF::StringImpl ***)(v11 + 32);
        v23 = 8 * v21;
        do
        {
          v24 = *v22;
          *v22 = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 2)
            {
              v26 = v22;
              WTF::StringImpl::destroy(v24, v15);
              v22 = v26;
            }
            else
            {
              *(_DWORD *)v24 -= 2;
            }
          }
          ++v22;
          v23 -= 8;
        }
        while (v23);
        *(_DWORD *)(v11 + 44) = 0;
      }
      v25 = *(WTF **)(v11 + 32);
      if (v25)
      {
        *(_QWORD *)(v11 + 32) = 0;
        *(_DWORD *)(v11 + 40) = 0;
        WTF::fastFree(v25, v15);
      }
    }
    v16 = *(_QWORD *)(v11 + 16);
    if (v16)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 32))(v16, v11);
    v13 = 0;
    v14 = 0;
  }
  ((void (*)(char *, char *, JSC::CallFrame *))off_1E32F83C8[v14])(&v31, v28, a3);
  if (v12 != 1)
    return 10;
  v28[0] = v13;
  v29 = 0;
  if (!*((_QWORD *)v5 + 2))
  {
    v18.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v13, (JSC::JSGlobalObject *)&v29);
    JSC::VM::throwException(v5, this, v18);
    v20 = v29;
    v29 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v19);
      else
        *(_DWORD *)v20 -= 2;
    }
  }
  return 0;
}

_BYTE *WebCore::jsSVGStringListPrototypeFunction_initialize(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  JSValue v24;
  WTF::StringImpl *v25;
  int hasExceptionsAfterHandlingTraps;
  uint64_t v27;
  WTF::StringImpl **v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF *v31;
  JSC::VM *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34[2];
  int v35;
  uint64_t v36;
  int v37;
  JSC::VM *v38;
  WTF::StringImpl *v39;
  _QWORD v40[2];
  int v41;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v32 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v32, "SVGStringList", "initialize");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSSVGStringList::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSSVGStringList::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v32, "SVGStringList", "initialize");
  v11 = *(_QWORD *)(v5 + 24);
  v38 = v4;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v24.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v24);
  }
  v12 = *((_QWORD *)a2 + 6);
  v40[0] = v12;
  if ((v12 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v12 + 5) == 2)
  {
    v13 = *(WTF::StringImpl **)(v12 + 8);
    if ((v13 & 1) != 0)
    {
      v13 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v12, this);
      if (!v13)
        goto LABEL_18;
    }
    else if (!v13)
    {
LABEL_18:
      v34[0] = v13;
      goto LABEL_19;
    }
    *(_DWORD *)v13 += 2;
    goto LABEL_18;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v40, this);
LABEL_19:
  if (*((_DWORD *)v4 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    v14 = v34[0];
    if (hasExceptionsAfterHandlingTraps)
    {
      v37 = 1;
      v34[0] = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v25);
        else
          *(_DWORD *)v14 -= 2;
      }
      v19 = 0;
      v21 = 1;
      goto LABEL_33;
    }
  }
  else
  {
    v14 = v34[0];
  }
  v37 = 0;
  v36 = 0;
  v33 = v14;
  if (*(_BYTE *)(v11 + 24) == 1)
  {
    LOBYTE(v40[0]) = 4;
    v15 = 1;
    v41 = 1;
    v40[1] = 0;
    LOBYTE(v34[0]) = 4;
    v34[1] = 0;
    v35 = 1;
  }
  else
  {
    LOBYTE(v40[0]) = 1;
    v41 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
    if (*(_DWORD *)(v11 + 40))
    {
      v27 = *(unsigned int *)(v11 + 44);
      if ((_DWORD)v27)
      {
        v28 = *(WTF::StringImpl ***)(v11 + 32);
        v29 = 8 * v27;
        do
        {
          v30 = *v28;
          *v28 = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 == 2)
              WTF::StringImpl::destroy(v30, v16);
            else
              *(_DWORD *)v30 -= 2;
          }
          ++v28;
          v29 -= 8;
        }
        while (v29);
        *(_DWORD *)(v11 + 44) = 0;
      }
      v31 = *(WTF **)(v11 + 32);
      if (v31)
      {
        *(_QWORD *)(v11 + 32) = 0;
        *(_DWORD *)(v11 + 40) = 0;
        WTF::fastFree(v31, v16);
      }
    }
    (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, WTF::StringImpl **))(*(_QWORD *)v11 + 80))(&v39, v11, &v33);
    v17 = *(_QWORD *)(v11 + 16);
    if (v17)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 32))(v17, v11);
    v15 = 0;
    v34[0] = v39;
    v35 = 0;
  }
  ((void (*)(WTF::StringImpl **, _QWORD *, JSC::CallFrame *))off_1E32F83C8[v15])(&v39, v40, a3);
  v19 = WebCore::toJS<WebCore::IDLDOMString,WebCore::ExceptionOr<WTF::String>>(this, (WTF::StringImpl *)&v38, (unsigned __int8 *)v34);
  if (v35 != -1)
    ((void (*)(_QWORD *, WTF::StringImpl **))off_1E32FBEC0[v35])(v40, v34);
  v35 = -1;
  v20 = v33;
  v33 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v18);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = 0;
LABEL_33:
  ((void (*)(_QWORD *, uint64_t *))off_1E32FBED0[v21])(v40, &v36);
  return (_BYTE *)v19;
}

_BYTE *WebCore::jsSVGStringListPrototypeFunction_getItem(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  _DWORD *v11;
  int v12;
  uint64_t v13;
  JSValue v16;
  JSC::VM *v17;
  _QWORD v18[2];
  int v19;
  _DWORD v20[2];
  JSC::VM *v21;
  char v22[8];
  uint64_t v23;
  int v24;
  char v25;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v17 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v17, "SVGStringList", "getItem");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSSVGStringList::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSSVGStringList::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v17, "SVGStringList", "getItem");
  v11 = *(_DWORD **)(v5 + 24);
  v21 = v4;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v16.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v16);
  }
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v20);
  if (v20[1])
    return 0;
  if (v11[11] <= v20[0])
  {
    v22[0] = 0;
    v12 = 1;
    v24 = 1;
    v23 = 0;
    LOBYTE(v18[0]) = 0;
    v18[1] = 0;
  }
  else
  {
    v22[0] = 1;
    v24 = 0;
    (*(void (**)(_QWORD *__return_ptr, _DWORD *))(*(_QWORD *)v11 + 48))(v18, v11);
    v12 = 0;
  }
  v19 = v12;
  ((uint64_t (**)(char *, char *))off_1E32F83C8)[v12](&v25, v22);
  v13 = WebCore::toJS<WebCore::IDLDOMString,WebCore::ExceptionOr<WTF::String>>(this, (WTF::StringImpl *)&v21, (unsigned __int8 *)v18);
  if (v19 != -1)
    ((void (*)(char *, _QWORD *))off_1E32FBEC0[v19])(v22, v18);
  return (_BYTE *)v13;
}

_BYTE *WebCore::jsSVGStringListPrototypeFunction_insertItemBefore(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  JSValue v26;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v28;
  JSC::VM *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31[2];
  int v32;
  _DWORD v33[2];
  WTF::StringImpl *v34;
  int v35;
  JSC::VM *v36;
  WTF::StringImpl *v37;
  _QWORD v38[2];
  int v39;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v29 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v29, "SVGStringList", "insertItemBefore");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSSVGStringList::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSSVGStringList::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v29, "SVGStringList", "insertItemBefore");
  v12 = *(_QWORD *)(v5 + 24);
  v36 = v4;
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v26.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v26);
  }
  v13 = *((_QWORD *)a2 + 6);
  v38[0] = v13;
  if ((v13 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v13 + 5) == 2)
  {
    v14 = *(WTF::StringImpl **)(v13 + 8);
    if ((v14 & 1) != 0)
    {
      v14 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v13, this);
      if (!v14)
        goto LABEL_18;
    }
    else if (!v14)
    {
LABEL_18:
      v31[0] = v14;
      goto LABEL_19;
    }
    *(_DWORD *)v14 += 2;
    goto LABEL_18;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v38, this);
LABEL_19:
  if (*((_DWORD *)v4 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    v15 = v31[0];
    if (hasExceptionsAfterHandlingTraps)
    {
      v35 = 1;
      v31[0] = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v28);
        else
          *(_DWORD *)v15 -= 2;
      }
      v21 = 0;
      v23 = 1;
      goto LABEL_36;
    }
  }
  else
  {
    v15 = v31[0];
  }
  v34 = v15;
  v35 = 0;
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v33);
  if (v33[1])
  {
    v21 = 0;
  }
  else
  {
    v34 = 0;
    v30 = v15;
    if (*(_BYTE *)(v12 + 24) == 1)
    {
      LOBYTE(v38[0]) = 4;
      v16 = 1;
      v39 = 1;
      v38[1] = 0;
      LOBYTE(v31[0]) = 4;
      v31[1] = 0;
      v32 = 1;
    }
    else
    {
      LOBYTE(v38[0]) = 1;
      v39 = 0;
      v17 = *(_DWORD *)(v12 + 44);
      if (v17 >= v33[0])
        v18 = v33[0];
      else
        v18 = v17;
      (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v12 + 56))(&v37, v12, v18, &v30);
      v19 = *(_QWORD *)(v12 + 16);
      if (v19)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 32))(v19, v12);
      v16 = 0;
      v31[0] = v37;
      v32 = 0;
    }
    ((uint64_t (**)(WTF::StringImpl **, char *))off_1E32F83C8)[v16](&v37, (char *)v38);
    v21 = WebCore::toJS<WebCore::IDLDOMString,WebCore::ExceptionOr<WTF::String>>(this, (WTF::StringImpl *)&v36, (unsigned __int8 *)v31);
    if (v32 != -1)
      ((void (*)(_QWORD *, WTF::StringImpl **))off_1E32FBEC0[v32])(v38, v31);
    v32 = -1;
    v22 = v30;
    v30 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v20);
      else
        *(_DWORD *)v22 -= 2;
    }
  }
  v23 = 0;
LABEL_36:
  ((void (*)(_QWORD *, WTF::StringImpl **))off_1E32FBED0[v23])(v38, &v34);
  return (_BYTE *)v21;
}

_BYTE *WebCore::jsSVGStringListPrototypeFunction_replaceItem(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  JSValue v26;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v28;
  JSC::VM *v29;
  WTF::StringImpl *v30;
  _DWORD v31[2];
  WTF::StringImpl *v32;
  int v33;
  JSC::VM *v34;
  uint64_t v35;
  WTF::StringImpl *v36[2];
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v29 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v29, "SVGStringList", "replaceItem");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSSVGStringList::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSSVGStringList::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v29, "SVGStringList", "replaceItem");
  v12 = *(_QWORD *)(v5 + 24);
  v34 = v4;
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v26.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v26);
  }
  v13 = *((_QWORD *)a2 + 6);
  v38 = v13;
  if ((v13 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v13 + 5) == 2)
  {
    v14 = *(WTF::StringImpl **)(v13 + 8);
    if ((v14 & 1) != 0)
    {
      v14 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v13, this);
      if (!v14)
        goto LABEL_18;
    }
    else if (!v14)
    {
LABEL_18:
      v36[0] = v14;
      goto LABEL_19;
    }
    *(_DWORD *)v14 += 2;
    goto LABEL_18;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v38, this);
LABEL_19:
  if (*((_DWORD *)v4 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    v15 = v36[0];
    if (hasExceptionsAfterHandlingTraps)
    {
      v33 = 1;
      v36[0] = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v28);
        else
          *(_DWORD *)v15 -= 2;
      }
      v21 = 0;
      v23 = 1;
      goto LABEL_36;
    }
  }
  else
  {
    v15 = v36[0];
  }
  v32 = v15;
  v33 = 0;
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v31);
  if (!v31[1])
  {
    v32 = 0;
    v30 = v15;
    if (*(_BYTE *)(v12 + 24) == 1)
    {
      v16 = 4;
      LOBYTE(v38) = 4;
      v17 = 1;
      v40 = 1;
      v39 = 0;
    }
    else
    {
      LOBYTE(v38) = 1;
      v40 = 0;
      if (*(_DWORD *)(v12 + 44) > v31[0])
      {
        LOBYTE(v36[0]) = 1;
        v37 = 0;
        (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v12 + 64))(&v35, v12);
        v18 = *(_QWORD *)(v12 + 16);
        if (v18)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 32))(v18, v12);
        v19 = 0;
        v38 = v35;
        v40 = 0;
        goto LABEL_30;
      }
      v16 = 0;
      v17 = 0;
    }
    LOBYTE(v36[0]) = v16;
    v19 = 1;
    v37 = 1;
    off_1E32F83C8[v17](&v35, (char *)&v38);
    v36[1] = 0;
    LOBYTE(v38) = v16;
    v39 = 0;
    v40 = 1;
LABEL_30:
    off_1E32F83C8[v19](&v35, (char *)v36);
    v21 = WebCore::toJS<WebCore::IDLDOMString,WebCore::ExceptionOr<WTF::String>>(this, (WTF::StringImpl *)&v34, (unsigned __int8 *)&v38);
    if (v40 != -1)
      ((void (*)(WTF::StringImpl **, uint64_t *))off_1E32FBEC0[v40])(v36, &v38);
    v40 = -1;
    v22 = v30;
    v30 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v20);
      else
        *(_DWORD *)v22 -= 2;
    }
    goto LABEL_35;
  }
  v21 = 0;
LABEL_35:
  v23 = 0;
LABEL_36:
  ((void (*)(uint64_t *, WTF::StringImpl **))off_1E32FBED0[v23])(&v38, &v32);
  return (_BYTE *)v21;
}

_BYTE *WebCore::jsSVGStringListPrototypeFunction_removeItem(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSValue v19;
  JSC::VM *v20;
  _DWORD v21[2];
  JSC::VM *v22;
  uint64_t v23;
  char v24[8];
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v20 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v20, "SVGStringList", "removeItem");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSSVGStringList::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSSVGStringList::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v20, "SVGStringList", "removeItem");
  v11 = *(_QWORD *)(v5 + 24);
  v22 = v4;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v19.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v19);
  }
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v21);
  if (v21[1])
    return 0;
  if (*(_BYTE *)(v11 + 24) == 1)
  {
    v12 = 4;
    LOBYTE(v27) = 4;
    v13 = 1;
    v29 = 1;
    v28 = 0;
  }
  else
  {
    LOBYTE(v27) = 1;
    v29 = 0;
    if (*(_DWORD *)(v11 + 44) > v21[0])
    {
      v24[0] = 1;
      v26 = 0;
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v11 + 72))(&v23, v11);
      v14 = *(_QWORD *)(v11 + 16);
      if (v14)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 32))(v14, v11);
      v15 = 0;
      v27 = v23;
      v29 = 0;
      goto LABEL_22;
    }
    v12 = 0;
    v13 = 0;
  }
  v24[0] = v12;
  v15 = 1;
  v26 = 1;
  off_1E32F83C8[v13](&v23, (char *)&v27);
  v25 = 0;
  LOBYTE(v27) = v12;
  v28 = 0;
  v29 = 1;
LABEL_22:
  off_1E32F83C8[v15](&v23, v24);
  v16 = WebCore::toJS<WebCore::IDLDOMString,WebCore::ExceptionOr<WTF::String>>(this, (WTF::StringImpl *)&v22, (unsigned __int8 *)&v27);
  if (v29 != -1)
    ((void (*)(char *, uint64_t *))off_1E32FBEC0[v29])(v24, &v27);
  return (_BYTE *)v16;
}

_BYTE *WebCore::jsSVGStringListPrototypeFunction_appendItem(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  JSValue v23;
  WTF::StringImpl *v24;
  int hasExceptionsAfterHandlingTraps;
  JSC::VM *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28[2];
  int v29;
  uint64_t v30;
  int v31;
  JSC::VM *v32;
  WTF::StringImpl *v33;
  _QWORD v34[2];
  int v35;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v26 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v26, "SVGStringList", "appendItem");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSSVGStringList::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSSVGStringList::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v26, "SVGStringList", "appendItem");
  v11 = *(_QWORD *)(v5 + 24);
  v32 = v4;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v23.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v23);
  }
  v12 = *((_QWORD *)a2 + 6);
  v34[0] = v12;
  if ((v12 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v12 + 5) == 2)
  {
    v13 = *(WTF::StringImpl **)(v12 + 8);
    if ((v13 & 1) != 0)
    {
      v13 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v12, this);
      if (!v13)
        goto LABEL_18;
    }
    else if (!v13)
    {
LABEL_18:
      v28[0] = v13;
      goto LABEL_19;
    }
    *(_DWORD *)v13 += 2;
    goto LABEL_18;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v34, this);
LABEL_19:
  if (*((_DWORD *)v4 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    v14 = v28[0];
    if (hasExceptionsAfterHandlingTraps)
    {
      v31 = 1;
      v28[0] = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v24);
        else
          *(_DWORD *)v14 -= 2;
      }
      v18 = 0;
      v20 = 1;
      goto LABEL_32;
    }
  }
  else
  {
    v14 = v28[0];
  }
  v31 = 0;
  v30 = 0;
  v27 = v14;
  if (*(_BYTE *)(v11 + 24) == 1)
  {
    LOBYTE(v34[0]) = 4;
    v15 = 1;
    v35 = 1;
    v34[1] = 0;
    LOBYTE(v28[0]) = 4;
    v28[1] = 0;
    v29 = 1;
  }
  else
  {
    LOBYTE(v34[0]) = 1;
    v35 = 0;
    (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, WTF::StringImpl **, JSC::CallFrame *))(*(_QWORD *)v11 + 80))(&v33, v11, &v27, a3);
    v16 = *(_QWORD *)(v11 + 16);
    if (v16)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 32))(v16, v11);
    v15 = 0;
    v28[0] = v33;
    v29 = 0;
  }
  ((void (*)(WTF::StringImpl **, _QWORD *, JSC::CallFrame *))off_1E32F83C8[v15])(&v33, v34, a3);
  v18 = WebCore::toJS<WebCore::IDLDOMString,WebCore::ExceptionOr<WTF::String>>(this, (WTF::StringImpl *)&v32, (unsigned __int8 *)v28);
  if (v29 != -1)
    ((void (*)(_QWORD *, WTF::StringImpl **))off_1E32FBEC0[v29])(v34, v28);
  v29 = -1;
  v19 = v27;
  v27 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v17);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = 0;
LABEL_32:
  ((void (*)(_QWORD *, uint64_t *))off_1E32FBED0[v20])(v34, &v30);
  return (_BYTE *)v18;
}

_BYTE *WebCore::jsSVGTextContentElementPrototypeFunction_getNumberOfChars(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v10;

  v3 = *((_QWORD *)a2 + 5);
  v10 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v10, "SVGTextContentElement", "getNumberOfChars");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSSVGTextContentElement::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSSVGTextContentElement::s_info && v6 != 0);
  }
  if (!v5)
    return WebCore::throwThisTypeError((int)this, (int)&v10, "SVGTextContentElement", "getNumberOfChars");
  else
    return (_BYTE *)(WebCore::SVGTextContentElement::getNumberOfChars(*(WebCore::SVGTextContentElement **)(v3 + 24)) | 0xFFFE000000000000);
}

_BYTE *WebCore::jsSVGTextContentElementPrototypeFunction_getComputedTextLength(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  float ComputedTextLength;
  double v10;
  uint64_t v11;
  uint64_t v13;

  v3 = *((_QWORD *)a2 + 5);
  v13 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v13, "SVGTextContentElement", "getComputedTextLength");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSSVGTextContentElement::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSSVGTextContentElement::s_info && v6 != 0);
  }
  if (!v5)
    return WebCore::throwThisTypeError((int)this, (int)&v13, "SVGTextContentElement", "getComputedTextLength");
  ComputedTextLength = WebCore::SVGTextContentElement::getComputedTextLength(*(WebCore::SVGTextContentElement **)(v3 + 24));
  v10 = ComputedTextLength;
  if (COERCE__INT64(fabs(ComputedTextLength)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v11 = (int)ComputedTextLength, (double)(int)v11 == v10)
    && ((_DWORD)v11 || (LODWORD(ComputedTextLength) & 0x80000000) == 0))
  {
    return (_BYTE *)(v11 | 0xFFFE000000000000);
  }
  else
  {
    return (_BYTE *)(*(_QWORD *)&v10 + 0x2000000000000);
  }
}

_BYTE *WebCore::jsSVGTextContentElementPrototypeFunction_getSubStringLength(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  WebCore::SVGTextContentElement *v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  JSValue v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  JSValue v22;
  WebCore *v23;
  JSC::JSGlobalObject *v24;
  JSC::CallFrame *v25;
  JSC::VM *v26;
  int v27;
  WTF::StringImpl *v28;
  int v29;
  unsigned int v30[2];
  unsigned int v31[2];
  _BYTE v32[8];
  WTF::StringImpl *v33;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v26 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v26, "SVGTextContentElement", "getSubStringLength");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSSVGTextContentElement::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSSVGTextContentElement::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v26, "SVGTextContentElement", "getSubStringLength");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v19.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v19);
  }
  v12 = *(WebCore::SVGTextContentElement **)(v5 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v31);
  if (v31[1])
    return 0;
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v30);
  if (v30[1])
    return 0;
  WebCore::SVGTextContentElement::getSubStringLength(v12, v31[0], v30[0], (uint64_t)&v27);
  if (!v29)
  {
    v13 = *(float *)&v27;
    if (COERCE__INT64(fabs(*(float *)&v27)) <= 0x7FEFFFFFFFFFFFFFLL
      && (v14 = (int)*(float *)&v27, (double)(int)v14 == v13)
      && ((_DWORD)v14 || (v27 & 0x80000000) == 0))
    {
      v15 = 0;
      v16 = v14 | 0xFFFE000000000000;
    }
    else
    {
      v15 = 0;
      v16 = *(_QWORD *)&v13 + 0x2000000000000;
    }
LABEL_22:
    ((void (*)(_BYTE *, int *))off_1E32FC368[v15])(v32, &v27);
    return (_BYTE *)v16;
  }
  if (v29 == 1)
  {
    v20 = (WTF::StringImpl *)v27;
    v32[0] = v27;
    v21 = v28;
    v28 = 0;
    v33 = v21;
    if (!*((_QWORD *)v4 + 2))
    {
      v22.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v27, (JSC::JSGlobalObject *)&v33);
      JSC::VM::throwException(v4, this, v22);
      v21 = v33;
    }
    v33 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v20);
      else
        *(_DWORD *)v21 -= 2;
    }
    v16 = 0;
    v15 = 1;
    goto LABEL_22;
  }
  v23 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsSVGTextContentElementPrototypeFunction_getStartPositionOfChar(v23, v24, v25);
}

_BYTE *WebCore::jsSVGTextContentElementPrototypeFunction_getStartPositionOfChar(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::SVGTextContentElement *v11;
  uint64_t v12;
  WebCore::JSDOMGlobalObject *v13;
  uint64_t v14;
  WTF *v15;
  unint64_t v16;
  JSValue v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  JSValue v22;
  WebCore *v23;
  JSC::JSGlobalObject *v24;
  JSC::CallFrame *v25;
  JSC::VM *v26;
  int v27[2];
  WTF::StringImpl *v28;
  unsigned int v29;
  unsigned int v30[2];
  _BYTE v31[8];
  WTF::StringImpl *v32;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v26 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v26, "SVGTextContentElement", "getStartPositionOfChar");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSSVGTextContentElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSSVGTextContentElement::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v26, "SVGTextContentElement", "getStartPositionOfChar");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v19.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v19);
  }
  v11 = *(WebCore::SVGTextContentElement **)(v5 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v30);
  if (v30[1])
    return 0;
  v12 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  WebCore::SVGTextContentElement::getStartPositionOfChar(v11, v30[0], (uint64_t)v27);
  v14 = v29;
  if (!v29)
  {
    v15 = *(WTF **)v27;
    *(_QWORD *)v27 = 0;
    v16 = WebCore::wrap<WebCore::SVGPoint>(v12, v15, v13);
    if (*((_DWORD *)v15 + 2) == 1)
      (*(void (**)(WTF *))(*(_QWORD *)v15 + 8))(v15);
    else
      --*((_DWORD *)v15 + 2);
LABEL_17:
    ((void (*)(_BYTE *, int *))off_1E32FACF8[v14])(v31, v27);
    return (_BYTE *)v16;
  }
  if (v29 == 1)
  {
    v20 = (WTF::StringImpl *)LOBYTE(v27[0]);
    v31[0] = v27[0];
    v21 = v28;
    v28 = 0;
    v32 = v21;
    if (!*((_QWORD *)v4 + 2))
    {
      v22.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v27[0]), (JSC::JSGlobalObject *)&v32);
      JSC::VM::throwException(v4, this, v22);
      v21 = v32;
    }
    v32 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v20);
      else
        *(_DWORD *)v21 -= 2;
    }
    v16 = 0;
    goto LABEL_17;
  }
  v23 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsSVGTextContentElementPrototypeFunction_getEndPositionOfChar(v23, v24, v25);
}

_BYTE *WebCore::jsSVGTextContentElementPrototypeFunction_getEndPositionOfChar(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::SVGTextContentElement *v11;
  uint64_t v12;
  WebCore::JSDOMGlobalObject *v13;
  uint64_t v14;
  WTF *v15;
  unint64_t v16;
  JSValue v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  JSValue v22;
  WebCore *v23;
  JSC::JSGlobalObject *v24;
  JSC::CallFrame *v25;
  JSC::VM *v26;
  int v27[2];
  WTF::StringImpl *v28;
  unsigned int v29;
  unsigned int v30[2];
  _BYTE v31[8];
  WTF::StringImpl *v32;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v26 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v26, "SVGTextContentElement", "getEndPositionOfChar");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSSVGTextContentElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSSVGTextContentElement::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v26, "SVGTextContentElement", "getEndPositionOfChar");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v19.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v19);
  }
  v11 = *(WebCore::SVGTextContentElement **)(v5 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v30);
  if (v30[1])
    return 0;
  v12 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  WebCore::SVGTextContentElement::getEndPositionOfChar(v11, v30[0], (uint64_t)v27);
  v14 = v29;
  if (!v29)
  {
    v15 = *(WTF **)v27;
    *(_QWORD *)v27 = 0;
    v16 = WebCore::wrap<WebCore::SVGPoint>(v12, v15, v13);
    if (*((_DWORD *)v15 + 2) == 1)
      (*(void (**)(WTF *))(*(_QWORD *)v15 + 8))(v15);
    else
      --*((_DWORD *)v15 + 2);
LABEL_17:
    ((void (*)(_BYTE *, int *))off_1E32FACF8[v14])(v31, v27);
    return (_BYTE *)v16;
  }
  if (v29 == 1)
  {
    v20 = (WTF::StringImpl *)LOBYTE(v27[0]);
    v31[0] = v27[0];
    v21 = v28;
    v28 = 0;
    v32 = v21;
    if (!*((_QWORD *)v4 + 2))
    {
      v22.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v27[0]), (JSC::JSGlobalObject *)&v32);
      JSC::VM::throwException(v4, this, v22);
      v21 = v32;
    }
    v32 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v20);
      else
        *(_DWORD *)v21 -= 2;
    }
    v16 = 0;
    goto LABEL_17;
  }
  v23 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsSVGTextContentElementPrototypeFunction_getExtentOfChar(v23, v24, v25);
}

_BYTE *WebCore::jsSVGTextContentElementPrototypeFunction_getExtentOfChar(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::SVGTextContentElement *v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  JSValue v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  JSValue v21;
  WebCore *v22;
  JSC::JSGlobalObject *v23;
  JSC::CallFrame *v24;
  JSC::VM *v25;
  int v26[2];
  WTF::StringImpl *v27;
  unsigned int v28;
  unsigned int v29[2];
  _BYTE v30[8];
  WTF::StringImpl *v31;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v25 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v25, "SVGTextContentElement", "getExtentOfChar");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSSVGTextContentElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSSVGTextContentElement::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v25, "SVGTextContentElement", "getExtentOfChar");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v18.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v18);
  }
  v11 = *(WebCore::SVGTextContentElement **)(v5 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v29);
  if (v29[1])
    return 0;
  v12 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  WebCore::SVGTextContentElement::getExtentOfChar(v11, v29[0], (uint64_t)v26);
  v13 = v28;
  if (!v28)
  {
    v14 = *(WTF **)v26;
    *(_QWORD *)v26 = 0;
    v15 = WebCore::wrap<WebCore::SVGRect>((uint64_t)this, v12, v14);
    if (*((_DWORD *)v14 + 2) == 1)
      (*(void (**)(WTF *))(*(_QWORD *)v14 + 8))(v14);
    else
      --*((_DWORD *)v14 + 2);
LABEL_17:
    ((void (*)(_BYTE *, int *))off_1E32FC378[v13])(v30, v26);
    return (_BYTE *)v15;
  }
  if (v28 == 1)
  {
    v19 = (WTF::StringImpl *)LOBYTE(v26[0]);
    v30[0] = v26[0];
    v20 = v27;
    v27 = 0;
    v31 = v20;
    if (!*((_QWORD *)v4 + 2))
    {
      v21.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v26[0]), (JSC::JSGlobalObject *)&v31);
      JSC::VM::throwException(v4, this, v21);
      v20 = v31;
    }
    v31 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v19);
      else
        *(_DWORD *)v20 -= 2;
    }
    v15 = 0;
    goto LABEL_17;
  }
  v22 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsSVGTextContentElementPrototypeFunction_getRotationOfChar(v22, v23, v24);
}

_BYTE *WebCore::jsSVGTextContentElementPrototypeFunction_getRotationOfChar(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::SVGTextContentElement *v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  JSValue v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  JSValue v21;
  WebCore *v22;
  JSC::JSGlobalObject *v23;
  JSC::CallFrame *v24;
  JSC::VM *v25;
  int v26;
  WTF::StringImpl *v27;
  int v28;
  unsigned int v29[2];
  _BYTE v30[8];
  WTF::StringImpl *v31;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v25 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v25, "SVGTextContentElement", "getRotationOfChar");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSSVGTextContentElement::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSSVGTextContentElement::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v25, "SVGTextContentElement", "getRotationOfChar");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v18.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v18);
  }
  v11 = *(WebCore::SVGTextContentElement **)(v5 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v29);
  if (v29[1])
    return 0;
  WebCore::SVGTextContentElement::getRotationOfChar(v11, v29[0], (uint64_t)&v26);
  if (!v28)
  {
    v12 = *(float *)&v26;
    if (COERCE__INT64(fabs(*(float *)&v26)) <= 0x7FEFFFFFFFFFFFFFLL
      && (v13 = (int)*(float *)&v26, (double)(int)v13 == v12)
      && ((_DWORD)v13 || (v26 & 0x80000000) == 0))
    {
      v14 = 0;
      v15 = v13 | 0xFFFE000000000000;
    }
    else
    {
      v14 = 0;
      v15 = *(_QWORD *)&v12 + 0x2000000000000;
    }
LABEL_21:
    ((void (*)(_BYTE *, int *))off_1E32FC368[v14])(v30, &v26);
    return (_BYTE *)v15;
  }
  if (v28 == 1)
  {
    v19 = (WTF::StringImpl *)v26;
    v30[0] = v26;
    v20 = v27;
    v27 = 0;
    v31 = v20;
    if (!*((_QWORD *)v4 + 2))
    {
      v21.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v26, (JSC::JSGlobalObject *)&v31);
      JSC::VM::throwException(v4, this, v21);
      v20 = v31;
    }
    v31 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v19);
      else
        *(_DWORD *)v20 -= 2;
    }
    v15 = 0;
    v14 = 1;
    goto LABEL_21;
  }
  v22 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsSVGTextContentElementPrototypeFunction_getCharNumAtPosition(v22, v23, v24);
}

_BYTE *WebCore::jsSVGTextContentElementPrototypeFunction_getCharNumAtPosition(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  float64x2_t v13[2];
  _OWORD v14[2];
  int v15;

  v12 = *((_QWORD *)this + 7);
  v3 = *((_QWORD *)a2 + 5);
  if ((v3 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v12, "SVGTextContentElement", "getCharNumAtPosition");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSSVGTextContentElement::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSSVGTextContentElement::s_info && v6 != 0);
  }
  if (!v5)
    return WebCore::throwThisTypeError((int)this, (int)&v12, "SVGTextContentElement", "getCharNumAtPosition");
  if (*((_DWORD *)a2 + 8) == 1)
    v9 = 10;
  else
    v9 = *((_QWORD *)a2 + 6);
  v10 = *(_QWORD *)(v3 + 24);
  WebCore::convertDictionary<WebCore::DOMPointInit>((JSC::JSCell *)v9, (uint64_t)this, (uint64_t)v14);
  if (v15)
    return 0;
  v13[0] = (float64x2_t)v14[0];
  v13[1] = (float64x2_t)v14[1];
  return (_BYTE *)(WebCore::SVGTextContentElement::getCharNumAtPosition(v10, v13) | 0xFFFE000000000000);
}

uint64_t WebCore::jsSVGTextContentElementPrototypeFunction_selectSubString(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  WebCore::SVGTextContentElement *v12;
  uint64_t result;
  JSValue v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  JSValue v17;
  WTF::StringImpl *v18;
  JSC::VM *v19;
  unsigned int v20[2];
  unsigned int v21[2];
  char v22;
  WTF::StringImpl *v23;
  int v24;
  WTF::StringImpl *v25;
  char v26;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v19 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v19, "SVGTextContentElement", "selectSubString");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSSVGTextContentElement::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSSVGTextContentElement::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v19, "SVGTextContentElement", "selectSubString");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v14.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v14);
  }
  v12 = *(WebCore::SVGTextContentElement **)(v5 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v21);
  if (v21[1])
    return 0;
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v20);
  if (!v20[1])
  {
    WebCore::SVGTextContentElement::selectSubString(v12, v21[0], v20[0], (uint64_t)&v24);
    if (!v26)
      return 10;
    v15 = (WTF::StringImpl *)v24;
    v22 = v24;
    v16 = v25;
    v25 = 0;
    v23 = v16;
    if (!*((_QWORD *)v4 + 2))
    {
      v17.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v24, (JSC::JSGlobalObject *)&v23);
      JSC::VM::throwException(v4, this, v17);
      v16 = v23;
    }
    v23 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v15);
      else
        *(_DWORD *)v16 -= 2;
    }
    if (v26)
    {
      v18 = v25;
      v25 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 != 2)
        {
          result = 0;
          *(_DWORD *)v18 -= 2;
          return result;
        }
        WTF::StringImpl::destroy(v18, v15);
      }
    }
  }
  return 0;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore7SVGRectENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore7SVGRectENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::jsSVGTransformPrototypeFunction_setMatrix(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  JSValue v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  JSC::VM *v22;
  char v23;
  WTF::StringImpl *v24;
  _BYTE v25[8];
  double v26;
  char v27;
  double v28;
  char v29;
  double v30;
  char v31;
  double v32;
  char v33;
  double v34;
  char v35;
  double v36;
  char v37;
  int v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v22 = v5;
  v6 = WebCore::IDLOperation<WebCore::JSSVGTransform>::cast(*((_QWORD *)a2 + 5));
  if (!v6)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v22, "SVGTransform", "setMatrix");
  if (*((_DWORD *)a2 + 8) == 1)
    v7 = 10;
  else
    v7 = *((_QWORD *)a2 + 6);
  v8 = *(_QWORD *)(v6 + 24);
  WebCore::convertDictionary<WebCore::DOMMatrix2DInit>((JSC::JSCell *)v7, (uint64_t)this, (uint64_t)v25);
  if (v38)
    return 0;
  if (*(_BYTE *)(v8 + 24) == 1)
  {
    v23 = 4;
    v24 = 0;
    if (!*((_QWORD *)v5 + 2))
    {
      v9.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)4, (JSC::JSGlobalObject *)&v24);
      JSC::VM::throwException(v5, this, v9);
      v11 = v24;
      v24 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v10);
        else
          *(_DWORD *)v11 -= 2;
      }
    }
    return 0;
  }
  v13 = v36;
  v14 = v34;
  v15 = v32;
  v16 = v30;
  v17 = v28;
  v18 = v26;
  if (!v27)
    v18 = 1.0;
  if (!v29)
    v17 = 0.0;
  if (!v31)
    v16 = 0.0;
  if (!v33)
    v15 = 1.0;
  if (!v35)
    v14 = 0.0;
  if (!v37)
    v13 = 0.0;
  *(_DWORD *)(v8 + 32) = 1;
  *(_DWORD *)(v8 + 56) = 0;
  *(_QWORD *)(v8 + 48) = 0;
  v19 = *(_QWORD *)(v8 + 40);
  v20 = *(_DWORD *)(v19 + 8);
  *(_DWORD *)(v19 + 8) = v20 + 1;
  *(double *)(v19 + 32) = v18;
  *(double *)(v19 + 40) = v17;
  *(double *)(v19 + 48) = v16;
  *(double *)(v19 + 56) = v15;
  *(double *)(v19 + 64) = v14;
  *(double *)(v19 + 72) = v13;
  if (v20)
    *(_DWORD *)(v19 + 8) = v20;
  else
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v21 = *(_QWORD *)(v8 + 16);
  if (v21)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 32))(v21, v8);
  return 10;
}

uint64_t WebCore::jsSVGTransformPrototypeFunction_setTranslate(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v5;
  unint64_t v6;
  JSC::JSGlobalObject *v7;
  uint64_t v8;
  JSValue v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  float v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  JSValue v17;
  JSC::VM *v18;
  _DWORD v19[2];
  _DWORD v20[2];
  char v21;
  WTF::StringImpl *v22;

  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v18 = v5;
  v6 = WebCore::IDLOperation<WebCore::JSSVGTransform>::cast(*((_QWORD *)a2 + 5));
  if (!v6)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v18, "SVGTransform", "setTranslate");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v17.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, v7);
    return JSC::VM::throwException(v5, this, v17);
  }
  else
  {
    v8 = *(_QWORD *)(v6 + 24);
    WebCore::convert<WebCore::IDLFloat>((uint64_t)v20, this, *((_QWORD *)a2 + 6));
    if (v20[1])
    {
      return 0;
    }
    else
    {
      WebCore::convert<WebCore::IDLFloat>((uint64_t)v19, this, *((_QWORD *)a2 + 7));
      if (v19[1])
        return 0;
      if (*(_BYTE *)(v8 + 24) == 1)
      {
        v21 = 4;
        v22 = 0;
        if (!*((_QWORD *)v5 + 2))
        {
          v9.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)4, (JSC::JSGlobalObject *)&v22);
          JSC::VM::throwException(v5, this, v9);
          v11 = v22;
          v22 = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2)
              WTF::StringImpl::destroy(v11, v10);
            else
              *(_DWORD *)v11 -= 2;
          }
        }
        return 0;
      }
      v13 = *(float *)v20;
      v14 = *(float *)v19;
      *(_DWORD *)(v8 + 32) = 2;
      *(_DWORD *)(v8 + 56) = 0;
      *(_QWORD *)(v8 + 48) = 0;
      v15 = *(_QWORD *)(v8 + 40);
      *(_QWORD *)(v15 + 32) = 0x3FF0000000000000;
      *(_QWORD *)(v15 + 40) = 0;
      *(_QWORD *)(v15 + 48) = 0;
      *(_QWORD *)(v15 + 56) = 0x3FF0000000000000;
      *(double *)(v15 + 64) = v13;
      *(double *)(v15 + 72) = v14;
      v16 = *(_QWORD *)(v8 + 16);
      if (v16)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 32))(v16, v8);
      return 10;
    }
  }
}

uint64_t WebCore::jsSVGTransformPrototypeFunction_setScale(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v5;
  unint64_t v6;
  JSC::JSGlobalObject *v7;
  uint64_t v8;
  JSValue v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  float v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  JSValue v17;
  JSC::VM *v18;
  _DWORD v19[2];
  _DWORD v20[2];
  char v21;
  WTF::StringImpl *v22;

  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v18 = v5;
  v6 = WebCore::IDLOperation<WebCore::JSSVGTransform>::cast(*((_QWORD *)a2 + 5));
  if (!v6)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v18, "SVGTransform", "setScale");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v17.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, v7);
    return JSC::VM::throwException(v5, this, v17);
  }
  else
  {
    v8 = *(_QWORD *)(v6 + 24);
    WebCore::convert<WebCore::IDLFloat>((uint64_t)v20, this, *((_QWORD *)a2 + 6));
    if (v20[1])
    {
      return 0;
    }
    else
    {
      WebCore::convert<WebCore::IDLFloat>((uint64_t)v19, this, *((_QWORD *)a2 + 7));
      if (v19[1])
        return 0;
      if (*(_BYTE *)(v8 + 24) == 1)
      {
        v21 = 4;
        v22 = 0;
        if (!*((_QWORD *)v5 + 2))
        {
          v9.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)4, (JSC::JSGlobalObject *)&v22);
          JSC::VM::throwException(v5, this, v9);
          v11 = v22;
          v22 = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2)
              WTF::StringImpl::destroy(v11, v10);
            else
              *(_DWORD *)v11 -= 2;
          }
        }
        return 0;
      }
      v13 = *(float *)v20;
      v14 = *(float *)v19;
      *(_DWORD *)(v8 + 32) = 3;
      *(_DWORD *)(v8 + 56) = 0;
      *(_QWORD *)(v8 + 48) = 0;
      v15 = *(_QWORD *)(v8 + 40);
      *(double *)(v15 + 32) = v13;
      *(_QWORD *)(v15 + 40) = 0;
      *(_QWORD *)(v15 + 48) = 0;
      *(double *)(v15 + 56) = v14;
      *(_QWORD *)(v15 + 64) = 0;
      *(_QWORD *)(v15 + 72) = 0;
      v16 = *(_QWORD *)(v8 + 16);
      if (v16)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 32))(v16, v8);
      return 10;
    }
  }
}

uint64_t WebCore::jsSVGTransformPrototypeFunction_setRotate(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v11;
  unint64_t v12;
  double v13;
  unint64_t v14;
  JSC::VM *v15;
  double v16;
  unint64_t v17;
  JSC::VM *v18;
  double v19;
  float v20;
  float v21;
  float v22;
  __double2 v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  BOOL v30;
  double v31;
  double *v32;
  uint64_t v33;
  JSValue v36;
  double v37;
  JSC::VM *v38;
  double v39;
  double v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  JSC::VM *v44;
  JSC::VM *v45;
  unint64_t v46;
  WTF::StringImpl *v47;

  v4 = *((_QWORD *)this + 7);
  v43 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v43, "SVGTransform", "setRotate");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSSVGTransform::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSSVGTransform::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v43, "SVGTransform", "setRotate");
  v11 = *(_QWORD *)(v5 + 24);
  v44 = (JSC::VM *)v4;
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 2)
  {
    v36.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException((JSC::VM *)v4, this, v36);
  }
  v12 = *((_QWORD *)a2 + 6);
  v45 = (JSC::VM *)v4;
  v46 = v12;
  if (v12 >= 0xFFFE000000000000)
  {
    v13 = (double)(int)v12;
  }
  else if (v12 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v46, this);
    v13 = v37;
  }
  else
  {
    *(_QWORD *)&v13 = v12 - 0x2000000000000;
  }
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
    return 0;
  if ((*(_QWORD *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v13 < -3.40282347e38 || v13 > 3.40282347e38)
  {
    JSC::throwTypeError();
    return 0;
  }
  v14 = *((_QWORD *)a2 + 7);
  v15 = (JSC::VM *)*((_QWORD *)this + 7);
  v45 = v15;
  v46 = v14;
  if (v14 >= 0xFFFE000000000000)
  {
    v16 = (double)(int)v14;
  }
  else if (v14 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v38 = v15;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v46, this);
    v15 = v38;
    v16 = v39;
  }
  else
  {
    *(_QWORD *)&v16 = v14 - 0x2000000000000;
  }
  if (*((_DWORD *)v15 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v15) & 1) != 0)
    return 0;
  if ((*(_QWORD *)&v16 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v16 < -3.40282347e38 || v16 > 3.40282347e38)
  {
    JSC::throwTypeError();
    return 0;
  }
  v17 = *((_QWORD *)a2 + 8);
  v18 = (JSC::VM *)*((_QWORD *)this + 7);
  v45 = v18;
  v46 = v17;
  if (v17 >= 0xFFFE000000000000)
  {
    v19 = (double)(int)v17;
  }
  else if (v17 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v46, this);
    v19 = v40;
  }
  else
  {
    *(_QWORD *)&v19 = v17 - 0x2000000000000;
  }
  if (*((_DWORD *)v18 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v18) & 1) != 0)
    return 0;
  if ((*(_QWORD *)&v19 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v19 < -3.40282347e38 || v19 > 3.40282347e38)
  {
    JSC::throwTypeError();
    return 0;
  }
  if (*(_BYTE *)(v11 + 24) == 1)
  {
    LOBYTE(v46) = 4;
    v47 = 0;
    if (!*(_QWORD *)(v4 + 16))
    {
      WebCore::propagateExceptionSlowPath(this, &v44, (unsigned __int8 *)&v46);
      v42 = v47;
      v47 = 0;
      if (v42)
      {
        if (*(_DWORD *)v42 == 2)
          WTF::StringImpl::destroy(v42, v41);
        else
          *(_DWORD *)v42 -= 2;
      }
    }
    return 0;
  }
  v20 = v13;
  v21 = v16;
  v22 = v19;
  *(_DWORD *)(v11 + 32) = 4;
  *(float *)(v11 + 48) = v20;
  *(float *)(v11 + 52) = v21;
  *(float *)(v11 + 56) = v22;
  v23 = __sincos_stret(v20 * 0.0174532925);
  v24 = v23.__cosval + v23.__sinval * 0.0;
  v25 = v23.__sinval + v23.__cosval * 0.0;
  v26 = v23.__cosval * 0.0 - v23.__sinval;
  v27 = v23.__cosval - v23.__sinval * 0.0;
  v28 = (float)-v21;
  v29 = (float)-v22;
  v30 = v25 == 0.0;
  if (v24 != 1.0)
    v30 = 0;
  if (v26 != 0.0)
    v30 = 0;
  v31 = v27 * v29 + v28 * v25;
  if (v27 != 1.0 || !v30)
  {
    v28 = v26 * v29 + v28 * v24;
    v29 = v31;
  }
  v32 = *(double **)(v11 + 40);
  v32[4] = v24;
  v32[5] = v25;
  v32[6] = v26;
  v32[7] = v27;
  v32[8] = v21 + 0.0 + v28;
  v32[9] = v22 + 0.0 + v29;
  v33 = *(_QWORD *)(v11 + 16);
  if (v33)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v33 + 32))(v33, v11);
  return 10;
}

uint64_t WebCore::jsSVGTransformPrototypeFunction_setSkewX(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  unint64_t v12;
  double v13;
  JSValue v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  float v18;
  _QWORD *v19;
  double *v20;
  long double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  JSValue v27;
  double v28;
  _QWORD v29[2];
  unint64_t v30;
  WTF::StringImpl *v31;

  v4 = *((_QWORD *)this + 7);
  v29[0] = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)v29, "SVGTransform", "setSkewX");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSSVGTransform::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSSVGTransform::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)v29, "SVGTransform", "setSkewX");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v27.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException((JSC::VM *)v4, this, v27);
  }
  else
  {
    v11 = *(_QWORD *)(v5 + 24);
    v12 = *((_QWORD *)a2 + 6);
    v29[1] = v4;
    v30 = v12;
    if (v12 >= 0xFFFE000000000000)
    {
      v13 = (double)(int)v12;
    }
    else if (v12 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v30, this);
      v13 = v28;
    }
    else
    {
      *(_QWORD *)&v13 = v12 - 0x2000000000000;
    }
    if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
      return 0;
    if ((*(_QWORD *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v13 < -3.40282347e38 || v13 > 3.40282347e38)
    {
      JSC::throwTypeError();
      return 0;
    }
    if (*(_BYTE *)(v11 + 24) == 1)
    {
      LOBYTE(v30) = 4;
      v31 = 0;
      if (!*(_QWORD *)(v4 + 16))
      {
        v14.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)4, (JSC::JSGlobalObject *)&v31);
        JSC::VM::throwException((JSC::VM *)v4, this, v14);
        v16 = v31;
        v31 = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2)
            WTF::StringImpl::destroy(v16, v15);
          else
            *(_DWORD *)v16 -= 2;
        }
      }
      return 0;
    }
    v18 = v13;
    *(_DWORD *)(v11 + 32) = 5;
    *(float *)(v11 + 48) = v18;
    *(_DWORD *)(v11 + 52) = 0;
    *(_DWORD *)(v11 + 56) = 0;
    v19 = *(_QWORD **)(v11 + 40);
    v19[4] = 0x3FF0000000000000;
    v19[5] = 0;
    v19[6] = 0;
    v19[7] = 0x3FF0000000000000;
    v19[8] = 0;
    v19[9] = 0;
    v20 = *(double **)(v11 + 40);
    v21 = tan(v18 * 0.0174532925);
    v22 = v20[4];
    v23 = v20[5];
    v24 = v20[6];
    v25 = v20[7];
    v20[4] = v22 + v24 * 0.0;
    v20[5] = v23 + v25 * 0.0;
    v20[6] = v24 + v21 * v22;
    v20[7] = v25 + v21 * v23;
    v26 = *(_QWORD *)(v11 + 16);
    if (v26)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v26 + 32))(v26, v11);
    return 10;
  }
}

uint64_t WebCore::jsSVGTransformPrototypeFunction_setSkewY(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  unint64_t v12;
  double v13;
  JSValue v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  float v18;
  _QWORD *v19;
  double *v20;
  long double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  JSValue v27;
  double v28;
  _QWORD v29[2];
  unint64_t v30;
  WTF::StringImpl *v31;

  v4 = *((_QWORD *)this + 7);
  v29[0] = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)v29, "SVGTransform", "setSkewY");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSSVGTransform::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSSVGTransform::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)v29, "SVGTransform", "setSkewY");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v27.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException((JSC::VM *)v4, this, v27);
  }
  else
  {
    v11 = *(_QWORD *)(v5 + 24);
    v12 = *((_QWORD *)a2 + 6);
    v29[1] = v4;
    v30 = v12;
    if (v12 >= 0xFFFE000000000000)
    {
      v13 = (double)(int)v12;
    }
    else if (v12 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v30, this);
      v13 = v28;
    }
    else
    {
      *(_QWORD *)&v13 = v12 - 0x2000000000000;
    }
    if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
      return 0;
    if ((*(_QWORD *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v13 < -3.40282347e38 || v13 > 3.40282347e38)
    {
      JSC::throwTypeError();
      return 0;
    }
    if (*(_BYTE *)(v11 + 24) == 1)
    {
      LOBYTE(v30) = 4;
      v31 = 0;
      if (!*(_QWORD *)(v4 + 16))
      {
        v14.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)4, (JSC::JSGlobalObject *)&v31);
        JSC::VM::throwException((JSC::VM *)v4, this, v14);
        v16 = v31;
        v31 = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2)
            WTF::StringImpl::destroy(v16, v15);
          else
            *(_DWORD *)v16 -= 2;
        }
      }
      return 0;
    }
    v18 = v13;
    *(_DWORD *)(v11 + 32) = 6;
    *(float *)(v11 + 48) = v18;
    *(_DWORD *)(v11 + 52) = 0;
    *(_DWORD *)(v11 + 56) = 0;
    v19 = *(_QWORD **)(v11 + 40);
    v19[4] = 0x3FF0000000000000;
    v19[5] = 0;
    v19[6] = 0;
    v19[7] = 0x3FF0000000000000;
    v19[8] = 0;
    v19[9] = 0;
    v20 = *(double **)(v11 + 40);
    v21 = tan(v18 * 0.0174532925);
    v22 = v20[4];
    v23 = v20[5];
    v24 = v20[6];
    v25 = v20[7];
    v20[4] = v22 + v21 * v24;
    v20[5] = v23 + v21 * v25;
    v20[6] = v24 + v22 * 0.0;
    v20[7] = v25 + v23 * 0.0;
    v26 = *(_QWORD *)(v11 + 16);
    if (v26)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v26 + 32))(v26, v11);
    return 10;
  }
}

unint64_t WebCore::IDLOperation<WebCore::JSSVGTransform>::cast(unint64_t result)
{
  uint64_t v1;
  _BOOL4 v2;
  char **v3;
  BOOL v4;

  if ((result & 0xFFFE000000000002) != 0)
    return 0;
  v1 = *(unsigned int *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x4C);
  v2 = *(_DWORD *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x4C) != 0;
  v3 = (char **)(16 * v1);
  if ((_DWORD)v1)
    v4 = v3 == &WebCore::JSSVGTransform::s_info;
  else
    v4 = 1;
  if (!v4)
  {
    do
    {
      v3 = (char **)v3[2];
      v2 = v3 != 0;
    }
    while (v3 != &WebCore::JSSVGTransform::s_info && v3 != 0);
  }
  if (!v2)
    return 0;
  return result;
}

uint64_t WebCore::jsSVGTransformListPrototypeFunction_clear(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  void *v8;
  uint64_t v9;
  _DWORD **v10;
  uint64_t v11;
  _DWORD *v12;
  WTF *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSValue v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  JSC::VM *v21;
  char v22[8];
  WTF::StringImpl *v23;
  int v24;
  char v25;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v21 = v4;
  v5 = WebCore::IDLOperation<WebCore::JSSVGTransformList>::cast(*((_QWORD *)a2 + 5));
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v21, "SVGTransformList", "clear");
  v6 = *(_QWORD *)(v5 + 24);
  v7 = *(unsigned __int8 *)(v6 + 24);
  if (v7 == 1)
  {
    v15 = 4;
    v22[0] = 4;
    v16 = 1;
    v24 = 1;
    v23 = 0;
  }
  else
  {
    v22[0] = 1;
    v24 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    if (*(_DWORD *)(v6 + 40))
    {
      v9 = *(unsigned int *)(v6 + 44);
      if ((_DWORD)v9)
      {
        v10 = *(_DWORD ***)(v6 + 32);
        v11 = 8 * v9;
        do
        {
          v12 = *v10;
          *v10 = 0;
          if (v12)
          {
            if (v12[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
            else
              --v12[2];
          }
          ++v10;
          v11 -= 8;
        }
        while (v11);
        *(_DWORD *)(v6 + 44) = 0;
      }
      v13 = *(WTF **)(v6 + 32);
      if (v13)
      {
        *(_QWORD *)(v6 + 32) = 0;
        *(_DWORD *)(v6 + 40) = 0;
        WTF::fastFree(v13, v8);
      }
    }
    v14 = *(_QWORD *)(v6 + 16);
    if (v14)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 32))(v14, v6);
    v15 = 0;
    v16 = 0;
  }
  ((uint64_t (**)(char *, char *))off_1E32F83C8)[v16](&v25, v22);
  if (v7 != 1)
    return 10;
  v22[0] = v15;
  v23 = 0;
  if (!*((_QWORD *)v4 + 2))
  {
    v18.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v15, (JSC::JSGlobalObject *)&v23);
    JSC::VM::throwException(v4, this, v18);
    v20 = v23;
    v23 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v19);
      else
        *(_DWORD *)v20 -= 2;
    }
  }
  return 0;
}

_BYTE *WebCore::jsSVGTransformListPrototypeFunction_initialize(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  char **v20;
  BOOL v21;
  _DWORD *v22;
  uint64_t v23;
  int v24;
  void *v25;
  uint64_t v26;
  _DWORD **v27;
  uint64_t v28;
  _DWORD *v29;
  WTF *v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  WebCore::JSDOMGlobalObject *v34;
  WTF *v35;
  unint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  _DWORD *v40;
  JSValue v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  JSC::VM *v48;
  _DWORD *v49;
  WTF *v50;
  uint64_t v51;
  int v52;
  JSC::VM *v53;
  WTF *v54;
  JSC::VM *v55;
  WTF::StringImpl *v56;
  int v57;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v48 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v48, "SVGTransformList", "initialize");
  v11 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
  v12 = *(unsigned int *)(v11 + 0x4C);
  v13 = *(_DWORD *)(v11 + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSSVGTransformList::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSSVGTransformList::s_info && v14 != 0);
  }
  if (!v13)
    return WebCore::throwThisTypeError((int)this, (int)&v48, "SVGTransformList", "initialize");
  v53 = v9;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v45.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v45);
  }
  v16 = *(_QWORD *)(v10 + 24);
  v17 = *((_QWORD *)a2 + 6);
  v55 = v9;
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_53;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSSVGTransform::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSSVGTransform::s_info && v20 != 0);
  }
  if (v19 && (v22 = *(_DWORD **)(v17 + 24)) != 0)
  {
    v23 = *(_QWORD *)(v11 + 40);
    ++v22[2];
    v49 = v22;
    v24 = *(unsigned __int8 *)(v16 + 24);
    if (v24 == 1)
    {
      v33 = 4;
      LOBYTE(v55) = 4;
      v32 = 1;
      v57 = 1;
      v56 = 0;
      LOBYTE(v50) = 4;
      v51 = 0;
      v52 = 1;
    }
    else
    {
      LOBYTE(v55) = 1;
      v57 = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
      if (*(_DWORD *)(v16 + 40))
      {
        v26 = *(unsigned int *)(v16 + 44);
        if ((_DWORD)v26)
        {
          v27 = *(_DWORD ***)(v16 + 32);
          v28 = 8 * v26;
          do
          {
            v29 = *v27;
            *v27 = 0;
            if (v29)
            {
              if (v29[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v29 + 8))(v29);
              else
                --v29[2];
            }
            ++v27;
            v28 -= 8;
          }
          while (v28);
          *(_DWORD *)(v16 + 44) = 0;
        }
        v30 = *(WTF **)(v16 + 32);
        if (v30)
        {
          *(_QWORD *)(v16 + 32) = 0;
          *(_DWORD *)(v16 + 40) = 0;
          WTF::fastFree(v30, v25);
        }
      }
      (*(void (**)(WTF **__return_ptr, uint64_t, _DWORD **))(*(_QWORD *)v16 + 80))(&v54, v16, &v49);
      v31 = *(_QWORD *)(v16 + 16);
      if (v31)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v31 + 32))(v31, v16);
      v32 = 0;
      v33 = (char)v54;
      v50 = v54;
      v52 = 0;
    }
    ((uint64_t (**)(WTF **, char *))off_1E32F83C8)[v32](&v54, (char *)&v55);
    if (v24 == 1)
    {
      LOBYTE(v55) = v33;
      v51 = 0;
      v56 = 0;
      if (!*((_QWORD *)v9 + 2))
      {
        WebCore::propagateExceptionSlowPath(this, &v53, (unsigned __int8 *)&v55);
        v47 = v56;
        v56 = 0;
        if (v47)
        {
          if (*(_DWORD *)v47 == 2)
            WTF::StringImpl::destroy(v47, v46);
          else
            *(_DWORD *)v47 -= 2;
        }
      }
      v36 = 0;
      v39 = 1;
    }
    else
    {
      v35 = v50;
      v50 = 0;
      v36 = WebCore::wrap<WebCore::SVGTransform>(v23, v35, v34);
      v37 = *((_DWORD *)v35 + 2);
      v38 = v37 - 1;
      if (v37 == 1)
      {
        (*(void (**)(WTF *))(*(_QWORD *)v35 + 8))(v35);
        v39 = 0;
      }
      else
      {
        v39 = 0;
        *((_DWORD *)v35 + 2) = v38;
      }
    }
    ((void (*)(JSC::VM **, WTF **))off_1E32FCD20[v39])(&v55, &v50);
    v52 = -1;
    v40 = v49;
    v49 = 0;
    if (v40)
    {
      if (v40[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v40 + 8))(v40);
      else
        --v40[2];
    }
  }
  else
  {
LABEL_53:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v55, 0, "newItem", 8, "SVGTransformList", 17, a8, "initialize", 11, "SVGTransform", 13);
    return 0;
  }
  return (_BYTE *)v36;
}

_BYTE *WebCore::jsSVGTransformListPrototypeFunction_getItem(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  _DWORD *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  unsigned __int8 v16;
  WebCore::JSDOMGlobalObject *v17;
  WTF *v18;
  unint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  JSValue v25;
  JSValue v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  JSC::VM *v29;
  WTF *v30;
  uint64_t v31;
  int v32;
  _DWORD v33[2];
  WTF *v34;
  char v35[8];
  WTF::StringImpl *v36;
  int v37;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v29 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v29, "SVGTransformList", "getItem");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSSVGTransformList::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSSVGTransformList::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v29, "SVGTransformList", "getItem");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v25.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v25);
  }
  v11 = *(_DWORD **)(v5 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v33);
  if (v33[1])
    return 0;
  v12 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  v13 = v33[0];
  v14 = v11[11];
  if (v14 <= v33[0])
  {
    v16 = 0;
    v35[0] = 0;
    v15 = 1;
    v37 = 1;
    v36 = 0;
    LOBYTE(v30) = 0;
    v31 = 0;
  }
  else
  {
    v35[0] = 1;
    v37 = 0;
    (*(void (**)(WTF **__return_ptr, _DWORD *, _QWORD))(*(_QWORD *)v11 + 48))(&v34, v11, v33[0]);
    v15 = 0;
    v16 = v34;
    v30 = v34;
  }
  v32 = v15;
  ((uint64_t (**)(WTF **, char *))off_1E32F83C8)[v15](&v34, v35);
  if (v14 <= v13)
  {
    v35[0] = v16;
    v31 = 0;
    v36 = 0;
    if (!*((_QWORD *)v4 + 2))
    {
      v26.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v16, (JSC::JSGlobalObject *)&v36);
      JSC::VM::throwException(v4, this, v26);
      v28 = v36;
      v36 = 0;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2)
          WTF::StringImpl::destroy(v28, v27);
        else
          *(_DWORD *)v28 -= 2;
      }
    }
    v19 = 0;
    v22 = 1;
  }
  else
  {
    v18 = v30;
    v30 = 0;
    v19 = WebCore::wrap<WebCore::SVGTransform>(v12, v18, v17);
    v20 = *((_DWORD *)v18 + 2);
    v21 = v20 - 1;
    if (v20 == 1)
    {
      (*(void (**)(WTF *))(*(_QWORD *)v18 + 8))(v18);
      v22 = 0;
    }
    else
    {
      v22 = 0;
      *((_DWORD *)v18 + 2) = v21;
    }
  }
  ((void (*)(char *, WTF **))off_1E32FCD20[v22])(v35, &v30);
  return (_BYTE *)v19;
}

_BYTE *WebCore::jsSVGTransformListPrototypeFunction_insertItemBefore(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  char **v20;
  BOOL v21;
  _DWORD *v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 v30;
  WebCore::JSDOMGlobalObject *v31;
  WTF *v32;
  unint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  _DWORD *v37;
  JSValue v40;
  JSValue v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  JSC::VM *v44;
  _DWORD *v45;
  WTF *v46;
  uint64_t v47;
  int v48;
  _DWORD v49[2];
  WTF *v50;
  JSC::VM *v51;
  WTF::StringImpl *v52;
  int v53;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v44 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v44, "SVGTransformList", "insertItemBefore");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSSVGTransformList::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSSVGTransformList::s_info && v13 != 0);
  }
  if (!v12)
    return WebCore::throwThisTypeError((int)this, (int)&v44, "SVGTransformList", "insertItemBefore");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v40.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v40);
  }
  v16 = *(_QWORD *)(v10 + 24);
  v17 = *((_QWORD *)a2 + 6);
  v51 = v9;
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_43;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSSVGTransform::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSSVGTransform::s_info && v20 != 0);
  }
  if (v19 && (v23 = *(_DWORD **)(v17 + 24)) != 0)
  {
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v49);
    if (v49[1])
    {
      return 0;
    }
    else
    {
      v24 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
      ++v23[2];
      v45 = v23;
      v25 = *(unsigned __int8 *)(v16 + 24);
      if (v25 == 1)
      {
        v30 = 4;
        LOBYTE(v51) = 4;
        v29 = 1;
        v53 = 1;
        v52 = 0;
        LOBYTE(v46) = 4;
        v47 = 0;
        v48 = 1;
      }
      else
      {
        LOBYTE(v51) = 1;
        v53 = 0;
        v26 = *(_DWORD *)(v16 + 44);
        if (v26 >= v49[0])
          v27 = v49[0];
        else
          v27 = v26;
        (*(void (**)(WTF **__return_ptr, uint64_t, uint64_t, _DWORD **))(*(_QWORD *)v16 + 56))(&v50, v16, v27, &v45);
        v28 = *(_QWORD *)(v16 + 16);
        if (v28)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v28 + 32))(v28, v16);
        v29 = 0;
        v30 = v50;
        v46 = v50;
        v48 = 0;
      }
      ((uint64_t (**)(WTF **, char *))off_1E32F83C8)[v29](&v50, (char *)&v51);
      if (v25 == 1)
      {
        LOBYTE(v51) = v30;
        v47 = 0;
        v52 = 0;
        if (!*((_QWORD *)v9 + 2))
        {
          v41.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v30, (JSC::JSGlobalObject *)&v52);
          JSC::VM::throwException(v9, this, v41);
          v43 = v52;
          v52 = 0;
          if (v43)
          {
            if (*(_DWORD *)v43 == 2)
              WTF::StringImpl::destroy(v43, v42);
            else
              *(_DWORD *)v43 -= 2;
          }
        }
        v33 = 0;
        v36 = 1;
      }
      else
      {
        v32 = v46;
        v46 = 0;
        v33 = WebCore::wrap<WebCore::SVGTransform>(v24, v32, v31);
        v34 = *((_DWORD *)v32 + 2);
        v35 = v34 - 1;
        if (v34 == 1)
        {
          (*(void (**)(WTF *))(*(_QWORD *)v32 + 8))(v32);
          v36 = 0;
        }
        else
        {
          v36 = 0;
          *((_DWORD *)v32 + 2) = v35;
        }
      }
      ((void (*)(JSC::VM **, WTF **))off_1E32FCD20[v36])(&v51, &v46);
      v48 = -1;
      v37 = v45;
      v45 = 0;
      if (v37)
      {
        if (v37[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v37 + 8))(v37);
        else
          --v37[2];
      }
    }
  }
  else
  {
LABEL_43:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v51, 0, "newItem", 8, "SVGTransformList", 17, a8, "insertItemBefore", 17, "SVGTransform", 13);
    return 0;
  }
  return (_BYTE *)v33;
}

_BYTE *WebCore::jsSVGTransformListPrototypeFunction_replaceItem(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  char **v20;
  BOOL v21;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  unsigned __int8 v28;
  char v29;
  uint64_t v30;
  WebCore::JSDOMGlobalObject *v31;
  WTF *v32;
  unint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  _DWORD *v37;
  JSValue v40;
  JSValue v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WebCore *v44;
  JSC::JSGlobalObject *v45;
  JSC::CallFrame *v46;
  JSC::VM *v47;
  _DWORD *v48;
  _DWORD v49[2];
  WTF *v50;
  char v51[8];
  WTF::StringImpl *v52;
  int v53;
  WTF *v54;
  uint64_t v55;
  int v56;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v47 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v47, "SVGTransformList", "replaceItem");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSSVGTransformList::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSSVGTransformList::s_info && v13 != 0);
  }
  if (!v12)
    return WebCore::throwThisTypeError((int)this, (int)&v47, "SVGTransformList", "replaceItem");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v40.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v40);
  }
  v16 = *(_QWORD *)(v10 + 24);
  v17 = *((_QWORD *)a2 + 6);
  v54 = v9;
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_43;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSSVGTransform::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSSVGTransform::s_info && v20 != 0);
  }
  if (!v19 || (v23 = *(_DWORD **)(v17 + 24)) == 0)
  {
LABEL_43:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v54, 0, "newItem", 8, "SVGTransformList", 17, a8, "replaceItem", 12, "SVGTransform", 13);
    return 0;
  }
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v49);
  if (v49[1])
    return 0;
  v24 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
  ++v23[2];
  v48 = v23;
  if (*(_BYTE *)(v16 + 24) == 1)
  {
    v28 = 4;
    LOBYTE(v54) = 4;
    v30 = 1;
    v56 = 1;
    v55 = 0;
    goto LABEL_32;
  }
  LOBYTE(v54) = 1;
  v56 = 0;
  if (*(_DWORD *)(v16 + 44) <= v49[0])
  {
    v28 = 0;
    v30 = 0;
LABEL_32:
    v51[0] = v28;
    v26 = 1;
    v53 = 1;
    ((uint64_t (**)(WTF **, char *))off_1E32F83C8)[v30](&v50, (char *)&v54);
    v29 = 0;
    v52 = 0;
    LOBYTE(v54) = v28;
    v55 = 0;
    v27 = 1;
    v56 = 1;
    goto LABEL_33;
  }
  v51[0] = 1;
  v53 = 0;
  (*(void (**)(WTF **__return_ptr, uint64_t))(*(_QWORD *)v16 + 64))(&v50, v16);
  v25 = *(_QWORD *)(v16 + 16);
  if (v25)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 32))(v25, v16);
  v26 = 0;
  v27 = 0;
  v28 = v50;
  v54 = v50;
  v56 = 0;
  v29 = 1;
LABEL_33:
  ((uint64_t (**)(WTF **, char *))off_1E32F83C8)[v27](&v50, v51);
  if ((v29 & 1) != 0)
  {
    v32 = v54;
    v54 = 0;
    v33 = WebCore::wrap<WebCore::SVGTransform>(v24, v32, v31);
    v34 = *((_DWORD *)v32 + 2);
    v35 = v34 - 1;
    if (v34 == 1)
    {
      (*(void (**)(WTF *))(*(_QWORD *)v32 + 8))(v32);
      v36 = 0;
    }
    else
    {
      v36 = 0;
      *((_DWORD *)v32 + 2) = v35;
    }
LABEL_36:
    ((void (*)(char *, WTF **))off_1E32FCD20[v36])(v51, &v54);
    v56 = -1;
    v37 = v48;
    v48 = 0;
    if (v37)
    {
      if (v37[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v37 + 8))(v37);
      else
        --v37[2];
    }
    return (_BYTE *)v33;
  }
  if ((v26 & 1) != 0)
  {
    v51[0] = v28;
    v55 = 0;
    v52 = 0;
    if (!*((_QWORD *)v9 + 2))
    {
      v41.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v28, (JSC::JSGlobalObject *)&v52);
      JSC::VM::throwException(v9, this, v41);
      v43 = v52;
      v52 = 0;
      if (v43)
      {
        if (*(_DWORD *)v43 == 2)
          WTF::StringImpl::destroy(v43, v42);
        else
          *(_DWORD *)v43 -= 2;
      }
    }
    v33 = 0;
    v36 = 1;
    goto LABEL_36;
  }
  v44 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsSVGTransformListPrototypeFunction_removeItem(v44, v45, v46);
}

_BYTE *WebCore::jsSVGTransformListPrototypeFunction_removeItem(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  unsigned __int8 v16;
  char v17;
  uint64_t v18;
  WebCore::JSDOMGlobalObject *v19;
  WTF *v20;
  unint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  JSValue v27;
  JSValue v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WebCore *v31;
  JSC::JSGlobalObject *v32;
  JSC::CallFrame *v33;
  JSC::VM *v34;
  _DWORD v35[2];
  WTF *v36;
  char v37[8];
  WTF::StringImpl *v38;
  int v39;
  WTF *v40;
  uint64_t v41;
  int v42;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v34 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v34, "SVGTransformList", "removeItem");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSSVGTransformList::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSSVGTransformList::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v34, "SVGTransformList", "removeItem");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v27.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v27);
  }
  v11 = *(_QWORD *)(v5 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v35);
  if (v35[1])
    return 0;
  v12 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  if (*(_BYTE *)(v11 + 24) == 1)
  {
    v16 = 4;
    LOBYTE(v40) = 4;
    v18 = 1;
    v42 = 1;
    v41 = 0;
    goto LABEL_20;
  }
  LOBYTE(v40) = 1;
  v42 = 0;
  if (*(_DWORD *)(v11 + 44) <= v35[0])
  {
    v16 = 0;
    v18 = 0;
LABEL_20:
    v37[0] = v16;
    v14 = 1;
    v39 = 1;
    ((uint64_t (**)(WTF **, char *))off_1E32F83C8)[v18](&v36, (char *)&v40);
    v17 = 0;
    v38 = 0;
    LOBYTE(v40) = v16;
    v41 = 0;
    v15 = 1;
    v42 = 1;
    goto LABEL_21;
  }
  v37[0] = 1;
  v39 = 0;
  (*(void (**)(WTF **__return_ptr, uint64_t))(*(_QWORD *)v11 + 72))(&v36, v11);
  v13 = *(_QWORD *)(v11 + 16);
  if (v13)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, v11);
  v14 = 0;
  v15 = 0;
  v16 = v36;
  v40 = v36;
  v42 = 0;
  v17 = 1;
LABEL_21:
  ((uint64_t (**)(WTF **, char *))off_1E32F83C8)[v15](&v36, v37);
  if ((v17 & 1) != 0)
  {
    v20 = v40;
    v40 = 0;
    v21 = WebCore::wrap<WebCore::SVGTransform>(v12, v20, v19);
    v22 = *((_DWORD *)v20 + 2);
    v23 = v22 - 1;
    if (v22 == 1)
    {
      (*(void (**)(WTF *))(*(_QWORD *)v20 + 8))(v20);
      v24 = 0;
    }
    else
    {
      v24 = 0;
      *((_DWORD *)v20 + 2) = v23;
    }
LABEL_24:
    ((void (*)(char *, WTF **))off_1E32FCD20[v24])(v37, &v40);
    return (_BYTE *)v21;
  }
  if ((v14 & 1) != 0)
  {
    v37[0] = v16;
    v41 = 0;
    v38 = 0;
    if (!*((_QWORD *)v4 + 2))
    {
      v28.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v16, (JSC::JSGlobalObject *)&v38);
      JSC::VM::throwException(v4, this, v28);
      v30 = v38;
      v38 = 0;
      if (v30)
      {
        if (*(_DWORD *)v30 == 2)
          WTF::StringImpl::destroy(v30, v29);
        else
          *(_DWORD *)v30 -= 2;
      }
    }
    v21 = 0;
    v24 = 1;
    goto LABEL_24;
  }
  v31 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsSVGTransformListPrototypeFunction_appendItem(v31, v32, v33);
}

_BYTE *WebCore::jsSVGTransformListPrototypeFunction_appendItem(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 v20;
  char **v21;
  BOOL v22;
  _DWORD *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 v29;
  WebCore::JSDOMGlobalObject *v30;
  WTF *v31;
  unint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  _DWORD *v36;
  JSValue v39;
  JSValue v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  JSC::VM *v43;
  _DWORD *v44;
  WTF *v45;
  uint64_t v46;
  int v47;
  WTF *v48;
  JSC::VM *v49;
  WTF::StringImpl *v50;
  int v51;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v43 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v43, "SVGTransformList", "appendItem");
  v11 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
  v12 = *(unsigned int *)(v11 + 0x4C);
  v13 = *(_DWORD *)(v11 + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSSVGTransformList::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSSVGTransformList::s_info && v14 != 0);
  }
  if (!v13)
    return WebCore::throwThisTypeError((int)this, (int)&v43, "SVGTransformList", "appendItem");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v39.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v39);
  }
  v17 = *(_QWORD *)(v10 + 24);
  v18 = *((_QWORD *)a2 + 6);
  v49 = v9;
  if ((v18 & 0xFFFE000000000002) != 0)
    goto LABEL_39;
  v19 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
  v20 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
  v21 = (char **)(16 * v19);
  if ((_DWORD)v19)
    v22 = v21 == &WebCore::JSSVGTransform::s_info;
  else
    v22 = 1;
  if (!v22)
  {
    do
    {
      v21 = (char **)v21[2];
      v20 = v21 != 0;
    }
    while (v21 != &WebCore::JSSVGTransform::s_info && v21 != 0);
  }
  if (v20 && (v24 = *(_DWORD **)(v18 + 24)) != 0)
  {
    v25 = *(_QWORD *)(v11 + 40);
    ++v24[2];
    v44 = v24;
    v26 = *(unsigned __int8 *)(v17 + 24);
    if (v26 == 1)
    {
      v29 = 4;
      LOBYTE(v49) = 4;
      v28 = 1;
      v51 = 1;
      v50 = 0;
      LOBYTE(v45) = 4;
      v46 = 0;
      v47 = 1;
    }
    else
    {
      LOBYTE(v49) = 1;
      v51 = 0;
      (*(void (**)(WTF **__return_ptr, uint64_t, _DWORD **, JSC::CallFrame *))(*(_QWORD *)v17 + 80))(&v48, v17, &v44, a3);
      v27 = *(_QWORD *)(v17 + 16);
      if (v27)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v27 + 32))(v27, v17);
      v28 = 0;
      v29 = v48;
      v45 = v48;
      v47 = 0;
    }
    ((uint64_t (**)(WTF **, char *))off_1E32F83C8)[v28](&v48, (char *)&v49);
    if (v26 == 1)
    {
      LOBYTE(v49) = v29;
      v46 = 0;
      v50 = 0;
      if (!*((_QWORD *)v9 + 2))
      {
        v40.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v29, (JSC::JSGlobalObject *)&v50);
        JSC::VM::throwException(v9, this, v40);
        v42 = v50;
        v50 = 0;
        if (v42)
        {
          if (*(_DWORD *)v42 == 2)
            WTF::StringImpl::destroy(v42, v41);
          else
            *(_DWORD *)v42 -= 2;
        }
      }
      v32 = 0;
      v35 = 1;
    }
    else
    {
      v31 = v45;
      v45 = 0;
      v32 = WebCore::wrap<WebCore::SVGTransform>(v25, v31, v30);
      v33 = *((_DWORD *)v31 + 2);
      v34 = v33 - 1;
      if (v33 == 1)
      {
        (*(void (**)(WTF *))(*(_QWORD *)v31 + 8))(v31);
        v35 = 0;
      }
      else
      {
        v35 = 0;
        *((_DWORD *)v31 + 2) = v34;
      }
    }
    ((void (*)(JSC::VM **, WTF **))off_1E32FCD20[v35])(&v49, &v45);
    v47 = -1;
    v36 = v44;
    v44 = 0;
    if (v36)
    {
      if (v36[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v36 + 8))(v36);
      else
        --v36[2];
    }
  }
  else
  {
LABEL_39:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v49, 0, "newItem", 8, "SVGTransformList", 17, a8, "appendItem", 11, "SVGTransform", 13);
    return 0;
  }
  return (_BYTE *)v32;
}

_BYTE *WebCore::jsSVGTransformListPrototypeFunction_createSVGTransformFromMatrix(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  unint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  WebCore::JSSVGTransform **v10;
  double v11;
  int v12;
  double v13;
  int v14;
  double v15;
  int v16;
  double v17;
  int v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  WebCore::JSDOMGlobalObject *v23;
  int v24;
  int v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  uint64_t v32;
  unint64_t v33;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  WTF *v39;
  char v40[8];
  double v41;
  unsigned __int8 v42;
  double v43;
  unsigned __int8 v44;
  double v45;
  unsigned __int8 v46;
  double v47;
  unsigned __int8 v48;
  double v49;
  unsigned __int8 v50;
  double v51;
  unsigned __int8 v52;
  int v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v38 = *((_QWORD *)this + 7);
  v3 = *((_QWORD *)a2 + 5);
  if ((v3 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v38, "SVGTransformList", "createSVGTransformFromMatrix");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSSVGTransformList::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSSVGTransformList::s_info && v6 != 0);
  }
  if (!v5)
    return WebCore::throwThisTypeError((int)this, (int)&v38, "SVGTransformList", "createSVGTransformFromMatrix");
  if (*((_DWORD *)a2 + 8) == 1)
    v9 = 10;
  else
    v9 = *((_QWORD *)a2 + 6);
  WebCore::convertDictionary<WebCore::DOMMatrix2DInit>((JSC::JSCell *)v9, (uint64_t)this, (uint64_t)v40);
  if (v53)
    return 0;
  v10 = *(WebCore::JSSVGTransform ***)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x28);
  v11 = v41;
  v12 = v42;
  v13 = v43;
  v14 = v44;
  v15 = v45;
  v16 = v46;
  v17 = v47;
  v18 = v48;
  v19 = v49;
  v20 = v51;
  v36 = v50;
  v37 = v52;
  v21 = WTF::fastMalloc((WTF *)0x48);
  *(_QWORD *)v21 = off_1E32EE228;
  *(_QWORD *)(v21 + 64) = &unk_1E32EE270;
  v22 = WTF::fastMalloc((WTF *)0x50);
  *(_DWORD *)(v22 + 8) = 1;
  *(_QWORD *)(v22 + 16) = v21 + 64;
  *(_WORD *)(v22 + 24) = 0;
  *(_OWORD *)(v22 + 48) = unk_1968C0F08;
  *(_OWORD *)(v22 + 64) = xmmword_1968C0F18;
  *(_OWORD *)(v22 + 32) = xmmword_1968C0EF8;
  *(_QWORD *)v22 = off_1E32EE1B8;
  *(_DWORD *)(v21 + 8) = 1;
  *(_QWORD *)(v21 + 16) = 0;
  *(_WORD *)(v21 + 24) = 0;
  *(_QWORD *)v21 = &off_1E32EE2A8;
  *(_DWORD *)(v21 + 32) = 1;
  v24 = *(_DWORD *)(v22 + 8);
  v25 = v24 + 1;
  *(_DWORD *)(v22 + 8) = v24 + 1;
  *(_QWORD *)(v21 + 40) = v22;
  *(_QWORD *)(v21 + 48) = 0;
  *(_DWORD *)(v21 + 56) = 0;
  if (v24)
  {
    *(_DWORD *)(v22 + 8) = v24;
    *(_QWORD *)v21 = off_1E32EE228;
    *(_QWORD *)(v21 + 64) = &unk_1E32EE270;
LABEL_18:
    v26 = 1.0;
    if (v12)
      v27 = v11;
    else
      v27 = 1.0;
    if (v14)
      v28 = v13;
    else
      v28 = 0.0;
    if (v16)
      v29 = v15;
    else
      v29 = 0.0;
    *(_DWORD *)(v21 + 32) = 1;
    if (v18)
      v26 = v17;
    *(_DWORD *)(v21 + 56) = 0;
    if (v36)
      v30 = v19;
    else
      v30 = 0.0;
    *(_QWORD *)(v21 + 48) = 0;
    *(_DWORD *)(v22 + 8) = v25;
    *(double *)(v22 + 32) = v27;
    *(double *)(v22 + 40) = v28;
    if (v37)
      v31 = v20;
    else
      v31 = 0.0;
    *(double *)(v22 + 48) = v29;
    *(double *)(v22 + 56) = v26;
    *(double *)(v22 + 64) = v30;
    *(double *)(v22 + 72) = v31;
    if (v24)
      *(_DWORD *)(v22 + 8) = v24;
    else
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    v32 = *(_QWORD *)(v21 + 16);
    if (v32)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v32 + 32))(v32, v21);
    goto LABEL_39;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  v35 = *(unsigned __int8 *)(v21 + 24);
  *(_QWORD *)v21 = off_1E32EE228;
  *(_QWORD *)(v21 + 64) = &unk_1E32EE270;
  if (v35 != 1)
  {
    v22 = *(_QWORD *)(v21 + 40);
    v24 = *(_DWORD *)(v22 + 8);
    v25 = v24 + 1;
    goto LABEL_18;
  }
LABEL_39:
  v39 = (WTF *)v21;
  v33 = WebCore::toJSNewlyCreated(v10, &v39, v23);
  if (v39)
  {
    if (*((_DWORD *)v39 + 2) == 1)
      (*(void (**)(void))(*(_QWORD *)v39 + 8))();
    else
      --*((_DWORD *)v39 + 2);
  }
  return (_BYTE *)v33;
}

_BYTE *WebCore::jsSVGTransformListPrototypeFunction_consolidate(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  JSC::VM *v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  WebCore::JSDOMGlobalObject *v12;
  WTF *v13;
  unint64_t v14;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  JSValue v18;
  unint64_t v19;
  JSC::VM *v20;
  int v21[2];
  WTF::StringImpl *v22;
  int v23;
  _BYTE v24[8];
  WTF::StringImpl *v25;

  v4 = *((_QWORD *)a2 + 5);
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v20 = v5;
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v20, "SVGTransformList", "consolidate");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSSVGTransformList::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSSVGTransformList::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v20, "SVGTransformList", "consolidate");
  v11 = *(_QWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x28);
  WebCore::SVGTransformList::consolidate(*(WebCore::SVGTransformList **)(v4 + 24), (uint64_t)v21);
  if (!v23)
  {
    v13 = *(WTF **)v21;
    *(_QWORD *)v21 = 0;
    if (v13)
    {
      v14 = WebCore::wrap<WebCore::SVGTransform>(v11, v13, v12);
      if (*((_DWORD *)v13 + 2) == 1)
        (*(void (**)(WTF *))(*(_QWORD *)v13 + 8))(v13);
      else
        --*((_DWORD *)v13 + 2);
    }
    else
    {
      v14 = 2;
    }
LABEL_17:
    if (v23 != -1)
      ((void (*)(_BYTE *, int *))off_1E32FCD10[v23])(v24, v21);
    return (_BYTE *)v14;
  }
  if (v23 == 1)
  {
    v16 = (WTF::StringImpl *)LOBYTE(v21[0]);
    v24[0] = v21[0];
    v17 = v22;
    v22 = 0;
    v25 = v17;
    if (!*((_QWORD *)v5 + 2))
    {
      v18.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v21[0]), (JSC::JSGlobalObject *)&v25);
      JSC::VM::throwException(v5, this, v18);
      v17 = v25;
    }
    v25 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v16);
      else
        *(_DWORD *)v17 -= 2;
    }
    v14 = 0;
    goto LABEL_17;
  }
  v19 = std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::IDLOperation<WebCore::JSSVGTransformList>::cast(v19);
}

unint64_t WebCore::IDLOperation<WebCore::JSSVGTransformList>::cast(unint64_t result)
{
  uint64_t v1;
  _BOOL4 v2;
  char **v3;
  BOOL v4;

  if ((result & 0xFFFE000000000002) != 0)
    return 0;
  v1 = *(unsigned int *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x4C);
  v2 = *(_DWORD *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x4C) != 0;
  v3 = (char **)(16 * v1);
  if ((_DWORD)v1)
    v4 = v3 == &WebCore::JSSVGTransformList::s_info;
  else
    v4 = 1;
  if (!v4)
  {
    do
    {
      v3 = (char **)v3[2];
      v2 = v3 != 0;
    }
    while (v3 != &WebCore::JSSVGTransformList::s_info && v3 != 0);
  }
  if (!v2)
    return 0;
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore12SVGTransformENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore12SVGTransformENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore12SVGTransformENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore12SVGTransformENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::JSSVGGeometryElement::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::getDOMStructure<WebCore::JSSVGGradientElement>(WebCore::JSSVGGradientElement *a1, JSC::VM *a2)
{
  uint64_t result;
  WebCore::JSDOMGlobalObject *v5;
  JSC::JSCell *Prototype;
  uint64_t v7;

  result = WebCore::getCachedDOMStructure((uint64_t)a2, (uint64_t)&WebCore::JSSVGGradientElement::s_info);
  if (!result)
  {
    Prototype = (JSC::JSCell *)WebCore::JSSVGGradientElement::createPrototype(a1, a2, v5);
    v7 = JSC::Structure::create((uint64_t *)a1, (int)a2, Prototype);
    return WebCore::cacheDOMStructure((JSCell *)a2, v7, (uint64_t)&WebCore::JSSVGGradientElement::s_info);
  }
  return result;
}

uint64_t WebCore::JSSVGGraphicsElement::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSSVGLength::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::getDOMStructure<WebCore::JSSVGLengthList>(WebCore::JSSVGLengthList *a1, JSC::JSCell **a2)
{
  uint64_t result;
  WebCore::JSDOMGlobalObject *v5;
  JSC::JSCell *Prototype;
  uint64_t v7;

  result = WebCore::getCachedDOMStructure((uint64_t)a2, (uint64_t)&WebCore::JSSVGLengthList::s_info);
  if (!result)
  {
    Prototype = (JSC::JSCell *)WebCore::JSSVGLengthList::createPrototype(a1, a2, v5);
    v7 = JSC::Structure::create((uint64_t *)a1, (int)a2, Prototype);
    return WebCore::cacheDOMStructure((JSCell *)a2, v7, (uint64_t)&WebCore::JSSVGLengthList::s_info);
  }
  return result;
}

unint64_t WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGLengthList>::create(uint64_t a1, uint64_t a2, JSC::JSCell **a3)
{
  unint64_t v5;

  v5 = JSC::allocateCell<WebCore::JSDOMConstructor<WebCore::JSBlob>>(a1);
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGLengthList>::initializeProperties(v5, a1, a3);
  return v5;
}

uint64_t WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGLengthList>::createStructure(uint64_t *a1, int a2, JSC::JSCell *a3)
{
  uint64_t result;

  result = JSC::Structure::create(a1, a2, a3);
  *(_DWORD *)(result + 16) |= 0x80000u;
  return result;
}

uint64_t WebCore::getDOMStructure<WebCore::JSSVGMatrix>(WebCore::JSSVGMatrix *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t result;
  int v13;
  uint64_t *v14;
  unint64_t Prototype;
  unint64_t v16;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  unint64_t v19;
  int v20;

  v5 = *((_QWORD *)a2 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSSVGMatrix::s_info + ~((_QWORD)&WebCore::JSSVGMatrix::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGMatrix::s_info + ~((_QWORD)&WebCore::JSSVGMatrix::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSSVGMatrix::s_info)
    {
LABEL_3:
      result = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (result)
        return result;
    }
    else
    {
      v13 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v13) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v13;
        if (v11 == &WebCore::JSSVGMatrix::s_info)
          goto LABEL_3;
      }
    }
  }
  v14 = (uint64_t *)((char *)this + 40136);
  Prototype = WebCore::JSSVGMatrix::createPrototype(this, (JSC::JSCell **)a2, a3);
  v16 = Prototype;
  v20 = 23;
  if ((Prototype & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)Prototype);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, this);
  }
  SlowCase = *v14;
  if ((unint64_t)*v14 >= *((_QWORD *)this + 5018))
  {
    SlowCase = *((_QWORD *)this + 5019);
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_14;
    }
    v19 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 5020);
    *((_QWORD *)this + 5018) = SlowCase + HIDWORD(v19);
    *((_QWORD *)this + 5019) = SlowCase + (int)v19;
  }
  *v14 = SlowCase + 128;
LABEL_14:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, this, a2, v16, &v20, &WebCore::JSSVGMatrix::s_info, 0, 0);
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  return WebCore::cacheDOMStructure((JSCell *)a2, SlowCase, (uint64_t)&WebCore::JSSVGMatrix::s_info);
}

uint64_t WebCore::JSSVGNumber::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::getDOMStructure<WebCore::JSSVGNumberList>(WebCore::JSSVGNumberList *a1, JSC::JSCell **a2)
{
  uint64_t result;
  WebCore::JSDOMGlobalObject *v5;
  JSC::JSCell *Prototype;
  uint64_t v7;

  result = WebCore::getCachedDOMStructure((uint64_t)a2, (uint64_t)&WebCore::JSSVGNumberList::s_info);
  if (!result)
  {
    Prototype = (JSC::JSCell *)WebCore::JSSVGNumberList::createPrototype(a1, a2, v5);
    v7 = JSC::Structure::create((uint64_t *)a1, (int)a2, Prototype);
    return WebCore::cacheDOMStructure((JSCell *)a2, v7, (uint64_t)&WebCore::JSSVGNumberList::s_info);
  }
  return result;
}

unint64_t WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGNumberList>::create(uint64_t a1, uint64_t a2, JSC::JSCell **a3)
{
  unint64_t v5;

  v5 = JSC::allocateCell<WebCore::JSDOMConstructor<WebCore::JSBlob>>(a1);
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGNumberList>::initializeProperties(v5, a1, a3);
  return v5;
}

uint64_t WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGNumberList>::createStructure(uint64_t *a1, int a2, JSC::JSCell *a3)
{
  uint64_t result;

  result = JSC::Structure::create(a1, a2, a3);
  *(_DWORD *)(result + 16) |= 0x80000u;
  return result;
}

uint64_t *WebCore::SVGAnimatedPropertyList<WebCore::SVGPathSegList>::ensureAnimVal(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v8;

  v1 = (uint64_t *)(a1 + 48);
  if (!*(_QWORD *)(a1 + 48))
  {
    v2 = *(_QWORD *)(a1 + 40);
    v3 = WTF::fastMalloc((WTF *)0xA0);
    v4 = *(_QWORD *)(v2 + 16);
    *(_DWORD *)(v3 + 8) = 1;
    *(_QWORD *)(v3 + 16) = v4;
    *(_WORD *)(v3 + 24) = 1;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0;
    *(_QWORD *)v3 = off_1E32FFB80;
    *(_QWORD *)(v3 + 48) = &unk_1E32FFBF8;
    *(_QWORD *)(v3 + 56) = 0;
    v5 = *(_DWORD **)(v2 + 72);
    if (!v5[5] && *(_DWORD *)(v2 + 44))
    {
      v8 = v3;
      WebCore::buildSVGPathByteStreamFromSVGPathSegList(v2, (_QWORD *)(v2 + 64), 1, 1);
      v3 = v8;
      v5 = *(_DWORD **)(v2 + 72);
    }
    ++*v5;
    *(_QWORD *)(v3 + 64) = 0;
    *(_QWORD *)(v3 + 72) = v5;
    *(_BYTE *)(v3 + 80) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    v6 = (_DWORD *)*v1;
    *v1 = v3;
    if (v6)
    {
      if (v6[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
      else
        --v6[2];
    }
  }
  return v1;
}

uint64_t WebCore::JSSVGPathSeg::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::getDOMStructure<WebCore::JSSVGPathSegList>(WebCore::JSSVGPathSegList *a1, JSC::JSCell **a2)
{
  uint64_t result;
  WebCore::JSDOMGlobalObject *v5;
  JSC::JSCell *Prototype;
  uint64_t v7;

  result = WebCore::getCachedDOMStructure((uint64_t)a2, (uint64_t)&WebCore::JSSVGPathSegList::s_info);
  if (!result)
  {
    Prototype = (JSC::JSCell *)WebCore::JSSVGPathSegList::createPrototype(a1, a2, v5);
    v7 = JSC::Structure::create((uint64_t *)a1, (int)a2, Prototype);
    return WebCore::cacheDOMStructure((JSCell *)a2, v7, (uint64_t)&WebCore::JSSVGPathSegList::s_info);
  }
  return result;
}

unint64_t WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSegList>::create(uint64_t a1, uint64_t a2, JSC::JSCell **a3)
{
  unint64_t v5;

  v5 = JSC::allocateCell<WebCore::JSDOMConstructor<WebCore::JSBlob>>(a1);
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSegList>::initializeProperties(v5, a1, a3);
  return v5;
}

uint64_t WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPathSegList>::createStructure(uint64_t *a1, int a2, JSC::JSCell *a3)
{
  uint64_t result;

  result = JSC::Structure::create(a1, a2, a3);
  *(_DWORD *)(result + 16) |= 0x80000u;
  return result;
}

uint64_t WebCore::getDOMStructure<WebCore::JSSVGPoint>(WebCore::JSSVGPoint *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t result;
  int v13;
  uint64_t *v14;
  unint64_t Prototype;
  unint64_t v16;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  unint64_t v19;
  int v20;

  v5 = *((_QWORD *)a2 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSSVGPoint::s_info + ~((_QWORD)&WebCore::JSSVGPoint::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGPoint::s_info + ~((_QWORD)&WebCore::JSSVGPoint::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSSVGPoint::s_info)
    {
LABEL_3:
      result = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (result)
        return result;
    }
    else
    {
      v13 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v13) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v13;
        if (v11 == &WebCore::JSSVGPoint::s_info)
          goto LABEL_3;
      }
    }
  }
  v14 = (uint64_t *)((char *)this + 40136);
  Prototype = WebCore::JSSVGPoint::createPrototype(this, (JSC::JSCell **)a2, a3);
  v16 = Prototype;
  v20 = 23;
  if ((Prototype & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)Prototype);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, this);
  }
  SlowCase = *v14;
  if ((unint64_t)*v14 >= *((_QWORD *)this + 5018))
  {
    SlowCase = *((_QWORD *)this + 5019);
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_14;
    }
    v19 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 5020);
    *((_QWORD *)this + 5018) = SlowCase + HIDWORD(v19);
    *((_QWORD *)this + 5019) = SlowCase + (int)v19;
  }
  *v14 = SlowCase + 128;
LABEL_14:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, this, a2, v16, &v20, &WebCore::JSSVGPoint::s_info, 0, 0);
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  return WebCore::cacheDOMStructure((JSCell *)a2, SlowCase, (uint64_t)&WebCore::JSSVGPoint::s_info);
}

uint64_t WebCore::getDOMStructure<WebCore::JSSVGPointList>(WebCore::JSSVGPointList *a1, JSC::JSCell **a2)
{
  uint64_t result;
  WebCore::JSDOMGlobalObject *v5;
  JSC::JSCell *Prototype;
  uint64_t v7;

  result = WebCore::getCachedDOMStructure((uint64_t)a2, (uint64_t)&WebCore::JSSVGPointList::s_info);
  if (!result)
  {
    Prototype = (JSC::JSCell *)WebCore::JSSVGPointList::createPrototype(a1, a2, v5);
    v7 = JSC::Structure::create((uint64_t *)a1, (int)a2, Prototype);
    return WebCore::cacheDOMStructure((JSCell *)a2, v7, (uint64_t)&WebCore::JSSVGPointList::s_info);
  }
  return result;
}

unint64_t WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPointList>::create(uint64_t a1, uint64_t a2, JSC::JSCell **a3)
{
  unint64_t v5;

  v5 = JSC::allocateCell<WebCore::JSDOMConstructor<WebCore::JSBlob>>(a1);
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPointList>::initializeProperties(v5, a1, a3);
  return v5;
}

uint64_t WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGPointList>::createStructure(uint64_t *a1, int a2, JSC::JSCell *a3)
{
  uint64_t result;

  result = JSC::Structure::create(a1, a2, a3);
  *(_DWORD *)(result + 16) |= 0x80000u;
  return result;
}

uint64_t WebCore::SVGValuePropertyList<WebCore::SVGPoint>::SVGValuePropertyList(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v15;
  _DWORD *v16;

  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 88))(a2);
  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = a3;
  *(_BYTE *)(a1 + 25) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)a1 = &off_1E3300618;
  *(_QWORD *)(a1 + 48) = &unk_1E3300690;
  v7 = *(unsigned int *)(a2 + 44);
  if ((_DWORD)v7)
  {
    v8 = *(uint64_t **)(a2 + 32);
    v9 = 8 * v7;
    do
    {
      v10 = *v8;
      v11 = WTF::fastMalloc((WTF *)0x28);
      *(_DWORD *)(v11 + 8) = 1;
      *(_QWORD *)(v11 + 16) = 0;
      *(_WORD *)(v11 + 24) = 0;
      *(_QWORD *)v11 = off_1E33004C8;
      *(_QWORD *)(v11 + 28) = *(_QWORD *)(v10 + 28);
      *(_QWORD *)v11 = off_1E33006C8;
      v15 = (_DWORD *)v11;
      (*(void (**)(_DWORD **__return_ptr, uint64_t, _DWORD **))(*(_QWORD *)a1 + 80))(&v16, a1, &v15);
      v12 = v16;
      v16 = 0;
      if (v12)
      {
        if (v12[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
        else
          --v12[2];
      }
      v13 = v15;
      v15 = 0;
      if (v13)
      {
        if (v13[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
        else
          --v13[2];
      }
      ++v8;
      v9 -= 8;
    }
    while (v9);
  }
  return a1;
}

uint64_t WebCore::SVGValuePropertyList<WebCore::SVGPoint>::~SVGValuePropertyList(uint64_t a1, void *a2)
{
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;

  *(_QWORD *)a1 = &off_1E3300500;
  *(_QWORD *)(a1 + 48) = &unk_1E3300578;
  v3 = *(WTF **)(a1 + 32);
  v4 = *(unsigned int *)(a1 + 44);
  if ((_DWORD)v4)
  {
    v5 = 8 * v4;
    do
    {
      v6 = *(_DWORD **)v3;
      v3 = (WTF *)((char *)v3 + 8);
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 24))(v6);
      v5 -= 8;
    }
    while (v5);
    v7 = *(unsigned int *)(a1 + 44);
    *(_QWORD *)a1 = off_1E33005B0;
    v3 = *(WTF **)(a1 + 32);
    if ((_DWORD)v7)
    {
      v8 = 8 * v7;
      do
      {
        v9 = *(_DWORD **)v3;
        *(_QWORD *)v3 = 0;
        if (v9)
        {
          if (v9[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
          else
            --v9[2];
        }
        v3 = (WTF *)((char *)v3 + 8);
        v8 -= 8;
      }
      while (v8);
      v3 = *(WTF **)(a1 + 32);
    }
  }
  else
  {
    *(_QWORD *)a1 = off_1E33005B0;
  }
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = 0;
    *(_DWORD *)(a1 + 40) = 0;
    WTF::fastFree(v3, a2);
  }
  return a1;
}

uint64_t WebCore::SVGValuePropertyList<WebCore::SVGPoint>::~SVGValuePropertyList(WTF *this, void *a2)
{
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;

  *(_QWORD *)this = &off_1E3300500;
  *((_QWORD *)this + 6) = &unk_1E3300578;
  v3 = (WTF *)*((_QWORD *)this + 4);
  v4 = *((unsigned int *)this + 11);
  if ((_DWORD)v4)
  {
    v5 = 8 * v4;
    do
    {
      v6 = *(_DWORD **)v3;
      v3 = (WTF *)((char *)v3 + 8);
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 24))(v6);
      v5 -= 8;
    }
    while (v5);
    v7 = *((unsigned int *)this + 11);
    *(_QWORD *)this = off_1E33005B0;
    v3 = (WTF *)*((_QWORD *)this + 4);
    if ((_DWORD)v7)
    {
      v8 = 8 * v7;
      do
      {
        v9 = *(_DWORD **)v3;
        *(_QWORD *)v3 = 0;
        if (v9)
        {
          if (v9[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
          else
            --v9[2];
        }
        v3 = (WTF *)((char *)v3 + 8);
        v8 -= 8;
      }
      while (v8);
      v3 = (WTF *)*((_QWORD *)this + 4);
    }
  }
  else
  {
    *(_QWORD *)this = off_1E33005B0;
  }
  if (v3)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v3, a2);
  }
  return WTF::fastFree(this, a2);
}

uint64_t WebCore::SVGPropertyList<WebCore::SVGPoint>::detachItems(uint64_t result)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(unsigned int *)(result + 44);
  if ((_DWORD)v1)
  {
    v2 = *(uint64_t **)(result + 32);
    v3 = 8 * v1;
    do
    {
      v4 = *v2++;
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
      v3 -= 8;
    }
    while (v3);
  }
  return result;
}

uint64_t WebCore::SVGPropertyList<WebCore::SVGPoint>::at@<X0>(uint64_t result@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v3;

  if (*(_DWORD *)(result + 44) <= a2)
  {
    __break(0xC471u);
  }
  else
  {
    v3 = *(_QWORD *)(*(_QWORD *)(result + 32) + 8 * a2);
    ++*(_DWORD *)(v3 + 8);
    *a3 = v3;
  }
  return result;
}

uint64_t WebCore::SVGPropertyList<WebCore::SVGPoint>::insert(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;

  v3 = a3;
  v6 = *a3;
  if (*(_QWORD *)(*a3 + 16))
  {
    v7 = WTF::fastMalloc((WTF *)0x28);
    *(_DWORD *)(v7 + 8) = 1;
    *(_QWORD *)(v7 + 16) = 0;
    *(_WORD *)(v7 + 24) = 0;
    *(_QWORD *)v7 = off_1E33004C8;
    *(_QWORD *)(v7 + 28) = *(_QWORD *)(v6 + 28);
    *(_QWORD *)v7 = off_1E33006C8;
    v8 = (_DWORD *)*v3;
    *v3 = v7;
    if (v8)
    {
      if (v8[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
        v7 = *v3;
      }
      else
      {
        --v8[2];
      }
    }
  }
  else
  {
    v7 = *a3;
  }
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v7 + 16))(v7, a1 + 48, *(unsigned __int8 *)(a1 + 24));
  v9 = *(unsigned int *)(a1 + 44);
  if ((_DWORD)v9 == *(_DWORD *)(a1 + 40))
  {
    v3 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 32, v9 + 1, (unint64_t)v3);
    LODWORD(v9) = *(_DWORD *)(a1 + 44);
  }
  v10 = (uint64_t *)(*(_QWORD *)(a1 + 32) + 8 * a2);
  memmove(v10 + 1, v10, 8 * v9 - 8 * a2);
  v11 = *v3;
  *v3 = 0;
  *v10 = v11;
  ++*(_DWORD *)(a1 + 44);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, a2);
}

uint64_t WebCore::SVGPropertyList<WebCore::SVGPoint>::replace(uint64_t result, uint64_t a2, uint64_t *a3)
{
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;

  if (*(_DWORD *)(result + 44) > a2)
  {
    v5 = (unsigned __int8 *)result;
    v6 = a2;
    v7 = *(_QWORD *)(result + 32);
    (*(void (**)(_QWORD))(**(_QWORD **)(v7 + 8 * a2) + 24))(*(_QWORD *)(v7 + 8 * a2));
    v8 = *a3;
    if (*(_QWORD *)(*a3 + 16))
    {
      v9 = WTF::fastMalloc((WTF *)0x28);
      *(_DWORD *)(v9 + 8) = 1;
      *(_QWORD *)(v9 + 16) = 0;
      *(_WORD *)(v9 + 24) = 0;
      *(_QWORD *)v9 = off_1E33004C8;
      *(_QWORD *)(v9 + 28) = *(_QWORD *)(v8 + 28);
      *(_QWORD *)v9 = off_1E33006C8;
      v10 = *(_DWORD **)(v7 + 8 * v6);
      *(_QWORD *)(v7 + 8 * v6) = v9;
      if (!v10)
        goto LABEL_8;
    }
    else
    {
      *a3 = 0;
      v10 = *(_DWORD **)(v7 + 8 * v6);
      *(_QWORD *)(v7 + 8 * v6) = v8;
      if (!v10)
      {
LABEL_8:
        (*(void (**)(_QWORD, unsigned __int8 *, _QWORD))(**(_QWORD **)(v7 + 8 * v6) + 16))(*(_QWORD *)(v7 + 8 * v6), v5 + 48, v5[24]);
        return (*(uint64_t (**)(unsigned __int8 *, uint64_t))(*(_QWORD *)v5 + 48))(v5, a2);
      }
    }
    if (v10[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
    else
      --v10[2];
    goto LABEL_8;
  }
  __break(0xC471u);
  return result;
}

void *WebCore::SVGPropertyList<WebCore::SVGPoint>::remove@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _DWORD *v7;
  void *result;

  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 48))(a3);
  (*(void (**)(_QWORD))(*(_QWORD *)*a3 + 24))(*a3);
  v6 = (_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * a2);
  v7 = (_DWORD *)*v6;
  *v6 = 0;
  if (v7)
  {
    if (v7[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
    else
      --v7[2];
  }
  result = memmove(v6, v6 + 1, *(_QWORD *)(a1 + 32) + 8 * *(unsigned int *)(a1 + 44) - (_QWORD)(v6 + 1));
  --*(_DWORD *)(a1 + 44);
  return result;
}

uint64_t WebCore::SVGPropertyList<WebCore::SVGPoint>::append(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  _DWORD *v11;

  v2 = a2;
  v4 = *a2;
  if (*(_QWORD *)(*a2 + 16))
  {
    v5 = WTF::fastMalloc((WTF *)0x28);
    *(_DWORD *)(v5 + 8) = 1;
    *(_QWORD *)(v5 + 16) = 0;
    *(_WORD *)(v5 + 24) = 0;
    *(_QWORD *)v5 = off_1E33004C8;
    *(_QWORD *)(v5 + 28) = *(_QWORD *)(v4 + 28);
    *(_QWORD *)v5 = off_1E33006C8;
    v11 = (_DWORD *)*v2;
    *v2 = v5;
    if (v11)
    {
      if (v11[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
        v5 = *v2;
      }
      else
      {
        --v11[2];
      }
    }
  }
  else
  {
    v5 = *a2;
  }
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, a1 + 48, *(unsigned __int8 *)(a1 + 24));
  v6 = (_QWORD *)(a1 + 32);
  v7 = *(unsigned int *)(a1 + 44);
  if ((_DWORD)v7 == *(_DWORD *)(a1 + 40))
  {
    v2 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v6, v7 + 1, (unint64_t)v2);
    v7 = *(unsigned int *)(a1 + 44);
    v8 = (uint64_t *)(*(_QWORD *)(a1 + 32) + 8 * v7);
  }
  else
  {
    v8 = (uint64_t *)(*v6 + 8 * v7);
  }
  v9 = *v2;
  *v2 = 0;
  *v8 = v9;
  *(_DWORD *)(a1 + 44) = v7 + 1;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t WebCore::SVGPropertyList<WebCore::SVGPoint>::owner(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t WebCore::SVGPropertyList<WebCore::SVGPoint>::commitPropertyChange(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  if (result)
  {
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 32))(v3, a1);
  }
  return result;
}

_DWORD *`non-virtual thunk to'WebCore::SVGValuePropertyList<WebCore::SVGPoint>::~SVGValuePropertyList(_DWORD *result, void *a2)
{
  _DWORD *v2;
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = result;
  *((_QWORD *)result - 6) = &off_1E3300500;
  *(_QWORD *)result = &unk_1E3300578;
  v3 = (WTF *)*((_QWORD *)result - 2);
  v4 = *(result - 1);
  if ((_DWORD)v4)
  {
    v5 = 8 * v4;
    do
    {
      v6 = *(_DWORD **)v3;
      v3 = (WTF *)((char *)v3 + 8);
      result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v6 + 24))(v6);
      v5 -= 8;
    }
    while (v5);
    v7 = *(v2 - 1);
    *((_QWORD *)v2 - 6) = off_1E33005B0;
    v3 = (WTF *)*((_QWORD *)v2 - 2);
    if ((_DWORD)v7)
    {
      v8 = 8 * v7;
      do
      {
        result = *(_DWORD **)v3;
        *(_QWORD *)v3 = 0;
        if (result)
        {
          if (result[2] == 1)
            result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
          else
            --result[2];
        }
        v3 = (WTF *)((char *)v3 + 8);
        v8 -= 8;
      }
      while (v8);
      v3 = (WTF *)*((_QWORD *)v2 - 2);
    }
  }
  else
  {
    *((_QWORD *)result - 6) = off_1E33005B0;
  }
  if (v3)
  {
    *((_QWORD *)v2 - 2) = 0;
    *(v2 - 2) = 0;
    return (_DWORD *)WTF::fastFree(v3, a2);
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::SVGValuePropertyList<WebCore::SVGPoint>::~SVGValuePropertyList(_QWORD *a1, void *a2)
{
  WTF *v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;

  *(a1 - 6) = &off_1E3300500;
  v3 = (WTF *)(a1 - 6);
  *a1 = &unk_1E3300578;
  v4 = (WTF *)*(a1 - 2);
  v5 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v5)
  {
    v6 = 8 * v5;
    do
    {
      v7 = *(_DWORD **)v4;
      v4 = (WTF *)((char *)v4 + 8);
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 24))(v7);
      v6 -= 8;
    }
    while (v6);
    v8 = *((unsigned int *)a1 - 1);
    *(a1 - 6) = off_1E33005B0;
    v4 = (WTF *)*(a1 - 2);
    if ((_DWORD)v8)
    {
      v9 = 8 * v8;
      do
      {
        v10 = *(_DWORD **)v4;
        *(_QWORD *)v4 = 0;
        if (v10)
        {
          if (v10[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
          else
            --v10[2];
        }
        v4 = (WTF *)((char *)v4 + 8);
        v9 -= 8;
      }
      while (v9);
      v4 = (WTF *)*(a1 - 2);
    }
  }
  else
  {
    *(_QWORD *)v3 = off_1E33005B0;
  }
  if (v4)
  {
    *(a1 - 2) = 0;
    *((_DWORD *)a1 - 2) = 0;
    WTF::fastFree(v4, a2);
  }
  return WTF::fastFree(v3, a2);
}

uint64_t `non-virtual thunk to'WebCore::SVGPropertyList<WebCore::SVGPoint>::owner(uint64_t a1)
{
  return *(_QWORD *)(a1 - 32);
}

uint64_t `non-virtual thunk to'WebCore::SVGPropertyList<WebCore::SVGPoint>::commitPropertyChange(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  v1 = a1 - 48;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 - 48) + 88))(a1 - 48);
  if (result)
  {
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 88))(v1);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 32))(v3, v1);
  }
  return result;
}

uint64_t WebCore::SVGPropertyList<WebCore::SVGPoint>::~SVGPropertyList(uint64_t a1, void *a2)
{
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;

  *(_QWORD *)a1 = &off_1E3300500;
  *(_QWORD *)(a1 + 48) = &unk_1E3300578;
  v3 = *(WTF **)(a1 + 32);
  v4 = *(unsigned int *)(a1 + 44);
  if ((_DWORD)v4)
  {
    v5 = 8 * v4;
    do
    {
      v6 = *(_DWORD **)v3;
      v3 = (WTF *)((char *)v3 + 8);
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 24))(v6);
      v5 -= 8;
    }
    while (v5);
    v7 = *(unsigned int *)(a1 + 44);
    *(_QWORD *)a1 = off_1E33005B0;
    v3 = *(WTF **)(a1 + 32);
    if ((_DWORD)v7)
    {
      v8 = 8 * v7;
      do
      {
        v9 = *(_DWORD **)v3;
        *(_QWORD *)v3 = 0;
        if (v9)
        {
          if (v9[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
          else
            --v9[2];
        }
        v3 = (WTF *)((char *)v3 + 8);
        v8 -= 8;
      }
      while (v8);
      v3 = *(WTF **)(a1 + 32);
    }
  }
  else
  {
    *(_QWORD *)a1 = off_1E33005B0;
  }
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = 0;
    *(_DWORD *)(a1 + 40) = 0;
    WTF::fastFree(v3, a2);
  }
  return a1;
}

uint64_t WebCore::SVGPropertyList<WebCore::SVGPoint>::~SVGPropertyList(WTF *this, void *a2)
{
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;

  *(_QWORD *)this = &off_1E3300500;
  *((_QWORD *)this + 6) = &unk_1E3300578;
  v3 = (WTF *)*((_QWORD *)this + 4);
  v4 = *((unsigned int *)this + 11);
  if ((_DWORD)v4)
  {
    v5 = 8 * v4;
    do
    {
      v6 = *(_DWORD **)v3;
      v3 = (WTF *)((char *)v3 + 8);
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 24))(v6);
      v5 -= 8;
    }
    while (v5);
    v7 = *((unsigned int *)this + 11);
    *(_QWORD *)this = off_1E33005B0;
    v3 = (WTF *)*((_QWORD *)this + 4);
    if ((_DWORD)v7)
    {
      v8 = 8 * v7;
      do
      {
        v9 = *(_DWORD **)v3;
        *(_QWORD *)v3 = 0;
        if (v9)
        {
          if (v9[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
          else
            --v9[2];
        }
        v3 = (WTF *)((char *)v3 + 8);
        v8 -= 8;
      }
      while (v8);
      v3 = (WTF *)*((_QWORD *)this + 4);
    }
  }
  else
  {
    *(_QWORD *)this = off_1E33005B0;
  }
  if (v3)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v3, a2);
  }
  return WTF::fastFree(this, a2);
}

_DWORD *`non-virtual thunk to'WebCore::SVGPropertyList<WebCore::SVGPoint>::~SVGPropertyList(_DWORD *result, void *a2)
{
  _DWORD *v2;
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = result;
  *((_QWORD *)result - 6) = &off_1E3300500;
  *(_QWORD *)result = &unk_1E3300578;
  v3 = (WTF *)*((_QWORD *)result - 2);
  v4 = *(result - 1);
  if ((_DWORD)v4)
  {
    v5 = 8 * v4;
    do
    {
      v6 = *(_DWORD **)v3;
      v3 = (WTF *)((char *)v3 + 8);
      result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v6 + 24))(v6);
      v5 -= 8;
    }
    while (v5);
    v7 = *(v2 - 1);
    *((_QWORD *)v2 - 6) = off_1E33005B0;
    v3 = (WTF *)*((_QWORD *)v2 - 2);
    if ((_DWORD)v7)
    {
      v8 = 8 * v7;
      do
      {
        result = *(_DWORD **)v3;
        *(_QWORD *)v3 = 0;
        if (result)
        {
          if (result[2] == 1)
            result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
          else
            --result[2];
        }
        v3 = (WTF *)((char *)v3 + 8);
        v8 -= 8;
      }
      while (v8);
      v3 = (WTF *)*((_QWORD *)v2 - 2);
    }
  }
  else
  {
    *((_QWORD *)result - 6) = off_1E33005B0;
  }
  if (v3)
  {
    *((_QWORD *)v2 - 2) = 0;
    *(v2 - 2) = 0;
    return (_DWORD *)WTF::fastFree(v3, a2);
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::SVGPropertyList<WebCore::SVGPoint>::~SVGPropertyList(_QWORD *a1, void *a2)
{
  WTF *v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;

  *(a1 - 6) = &off_1E3300500;
  v3 = (WTF *)(a1 - 6);
  *a1 = &unk_1E3300578;
  v4 = (WTF *)*(a1 - 2);
  v5 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v5)
  {
    v6 = 8 * v5;
    do
    {
      v7 = *(_DWORD **)v4;
      v4 = (WTF *)((char *)v4 + 8);
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 24))(v7);
      v6 -= 8;
    }
    while (v6);
    v8 = *((unsigned int *)a1 - 1);
    *(a1 - 6) = off_1E33005B0;
    v4 = (WTF *)*(a1 - 2);
    if ((_DWORD)v8)
    {
      v9 = 8 * v8;
      do
      {
        v10 = *(_DWORD **)v4;
        *(_QWORD *)v4 = 0;
        if (v10)
        {
          if (v10[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
          else
            --v10[2];
        }
        v4 = (WTF *)((char *)v4 + 8);
        v9 -= 8;
      }
      while (v9);
      v4 = (WTF *)*(a1 - 2);
    }
  }
  else
  {
    *(_QWORD *)v3 = off_1E33005B0;
  }
  if (v4)
  {
    *(a1 - 2) = 0;
    *((_DWORD *)a1 - 2) = 0;
    WTF::fastFree(v4, a2);
  }
  return WTF::fastFree(v3, a2);
}

uint64_t WebCore::JSSVGPreserveAspectRatio::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSSVGRect::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::getDOMStructure<WebCore::JSSVGStringList>(WebCore::JSSVGStringList *a1, JSC::JSCell **a2)
{
  uint64_t result;
  WebCore::JSDOMGlobalObject *v5;
  JSC::JSCell *Prototype;
  uint64_t v7;

  result = WebCore::getCachedDOMStructure((uint64_t)a2, (uint64_t)&WebCore::JSSVGStringList::s_info);
  if (!result)
  {
    Prototype = (JSC::JSCell *)WebCore::JSSVGStringList::createPrototype(a1, a2, v5);
    v7 = JSC::Structure::create((uint64_t *)a1, (int)a2, Prototype);
    return WebCore::cacheDOMStructure((JSCell *)a2, v7, (uint64_t)&WebCore::JSSVGStringList::s_info);
  }
  return result;
}

unint64_t WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGStringList>::create(uint64_t a1, uint64_t a2, JSC::JSCell **a3)
{
  unint64_t v5;

  v5 = JSC::allocateCell<WebCore::JSDOMConstructor<WebCore::JSBlob>>(a1);
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGStringList>::initializeProperties(v5, a1, a3);
  return v5;
}

uint64_t WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGStringList>::createStructure(uint64_t *a1, int a2, JSC::JSCell *a3)
{
  uint64_t result;

  result = JSC::Structure::create(a1, a2, a3);
  *(_DWORD *)(result + 16) |= 0x80000u;
  return result;
}

uint64_t WebCore::getDOMStructure<WebCore::JSSVGTextContentElement>(WebCore::JSSVGTextContentElement *a1, JSC::VM *a2)
{
  uint64_t result;
  WebCore::JSDOMGlobalObject *v5;
  JSC::JSCell *Prototype;
  uint64_t v7;

  result = WebCore::getCachedDOMStructure((uint64_t)a2, (uint64_t)&WebCore::JSSVGTextContentElement::s_info);
  if (!result)
  {
    Prototype = (JSC::JSCell *)WebCore::JSSVGTextContentElement::createPrototype(a1, a2, v5);
    v7 = JSC::Structure::create((uint64_t *)a1, (int)a2, Prototype);
    return WebCore::cacheDOMStructure((JSCell *)a2, v7, (uint64_t)&WebCore::JSSVGTextContentElement::s_info);
  }
  return result;
}

uint64_t WebCore::getDOMStructure<WebCore::JSSVGTransform>(WebCore::JSSVGTransform *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t result;
  int v13;
  uint64_t *v14;
  unint64_t Prototype;
  unint64_t v16;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  unint64_t v19;
  int v20;

  v5 = *((_QWORD *)a2 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSSVGTransform::s_info + ~((_QWORD)&WebCore::JSSVGTransform::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGTransform::s_info + ~((_QWORD)&WebCore::JSSVGTransform::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSSVGTransform::s_info)
    {
LABEL_3:
      result = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (result)
        return result;
    }
    else
    {
      v13 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v13) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v13;
        if (v11 == &WebCore::JSSVGTransform::s_info)
          goto LABEL_3;
      }
    }
  }
  v14 = (uint64_t *)((char *)this + 40136);
  Prototype = WebCore::JSSVGTransform::createPrototype(this, (JSC::JSCell **)a2, a3);
  v16 = Prototype;
  v20 = 23;
  if ((Prototype & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)Prototype);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, this);
  }
  SlowCase = *v14;
  if ((unint64_t)*v14 >= *((_QWORD *)this + 5018))
  {
    SlowCase = *((_QWORD *)this + 5019);
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_14;
    }
    v19 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 5020);
    *((_QWORD *)this + 5018) = SlowCase + HIDWORD(v19);
    *((_QWORD *)this + 5019) = SlowCase + (int)v19;
  }
  *v14 = SlowCase + 128;
LABEL_14:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, this, a2, v16, &v20, &WebCore::JSSVGTransform::s_info, 0, 0);
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  return WebCore::cacheDOMStructure((JSCell *)a2, SlowCase, (uint64_t)&WebCore::JSSVGTransform::s_info);
}

uint64_t WebCore::getDOMStructure<WebCore::JSSVGTransformList>(WebCore::JSSVGTransformList *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t result;
  int v13;
  uint64_t *v14;
  unint64_t Prototype;
  unint64_t v16;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  unint64_t v19;
  int v20;

  v5 = *((_QWORD *)a2 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSSVGTransformList::s_info + ~((_QWORD)&WebCore::JSSVGTransformList::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGTransformList::s_info + ~((_QWORD)&WebCore::JSSVGTransformList::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSSVGTransformList::s_info)
    {
LABEL_3:
      result = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (result)
        return result;
    }
    else
    {
      v13 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v13) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v13;
        if (v11 == &WebCore::JSSVGTransformList::s_info)
          goto LABEL_3;
      }
    }
  }
  v14 = (uint64_t *)((char *)this + 40136);
  Prototype = WebCore::JSSVGTransformList::createPrototype(this, (JSC::JSCell **)a2, a3);
  v16 = Prototype;
  v20 = 84019223;
  if ((Prototype & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)Prototype);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, this);
  }
  SlowCase = *v14;
  if ((unint64_t)*v14 >= *((_QWORD *)this + 5018))
  {
    SlowCase = *((_QWORD *)this + 5019);
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_14;
    }
    v19 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 5020);
    *((_QWORD *)this + 5018) = SlowCase + HIDWORD(v19);
    *((_QWORD *)this + 5019) = SlowCase + (int)v19;
  }
  *v14 = SlowCase + 128;
LABEL_14:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, this, a2, v16, &v20, &WebCore::JSSVGTransformList::s_info, 32, 0);
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  return WebCore::cacheDOMStructure((JSCell *)a2, SlowCase, (uint64_t)&WebCore::JSSVGTransformList::s_info);
}

unint64_t WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGTransformList>::create(uint64_t a1, uint64_t a2, JSC::VM *a3)
{
  unint64_t v5;

  v5 = JSC::allocateCell<WebCore::JSDOMConstructor<WebCore::JSBlob>>(a1);
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGTransformList>::initializeProperties(v5, a1, a3);
  return v5;
}

uint64_t WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGTransformList>::createStructure(uint64_t *a1, int a2, JSC::JSCell *a3)
{
  uint64_t result;

  result = JSC::Structure::create(a1, a2, a3);
  *(_DWORD *)(result + 16) |= 0x80000u;
  return result;
}

double WebCore::ScrollingTreeStickyNodeCocoa::create@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  double result;

  v8 = WTF::fastMalloc((WTF *)0xD0);
  v9 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v9 = 0;
  *(_OWORD *)(v9 + 8) = xmmword_19689B170;
  *(_QWORD *)(v9 + 24) = v8;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 32) = a1;
  *(_BYTE *)(v8 + 40) = 8;
  *(_QWORD *)(v8 + 48) = a2;
  *(_QWORD *)(v8 + 56) = a3;
  result = 0.0;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_DWORD *)(v8 + 112) = 0;
  *(_QWORD *)(v8 + 96) = off_1E34043D0;
  *(_QWORD *)(v8 + 104) = 0;
  *(_OWORD *)(v8 + 180) = 0u;
  *(_OWORD *)(v8 + 164) = 0u;
  *(_OWORD *)(v8 + 148) = 0u;
  *(_OWORD *)(v8 + 132) = 0u;
  *(_OWORD *)(v8 + 116) = 0u;
  ++*(_DWORD *)(a1 + 332);
  *(_QWORD *)v8 = off_1E3300700;
  *(_QWORD *)(v8 + 8) = v9;
  *(_QWORD *)(v8 + 200) = 0;
  *a4 = v8;
  return result;
}

BOOL WebCore::ScrollingTreeStickyNodeCocoa::commitStateBeforeChildren(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  int v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  if ((*(_BYTE *)(a2 + 40) & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 96);
    if (v4)
      CFRetain(*(CFTypeRef *)(a2 + 96));
    v5 = *(const void **)(a1 + 200);
    *(_QWORD *)(a1 + 200) = v4;
    if (v5)
      CFRelease(v5);
  }
  v6 = *(unsigned __int8 *)(a2 + 16);
  if (v6 == 8 && (*(_BYTE *)(a2 + 40) & 2) != 0)
  {
    v7 = *(_QWORD *)(a2 + 136);
    *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 104) = v7;
    v8 = *(_OWORD *)(a2 + 180);
    v9 = *(_OWORD *)(a2 + 196);
    v10 = *(_OWORD *)(a2 + 212);
    *(_OWORD *)(a1 + 132) = *(_OWORD *)(a2 + 164);
    *(_OWORD *)(a1 + 180) = v10;
    *(_OWORD *)(a1 + 164) = v9;
    *(_OWORD *)(a1 + 148) = v8;
    *(_OWORD *)(a1 + 116) = *(_OWORD *)(a2 + 148);
  }
  return v6 == 8;
}

uint64_t WebCore::ScrollingTreeStickyNodeCocoa::applyLayerPositions(id *this, void *a2)
{
  float v3;
  float v4;

  WebCore::ScrollingTreeStickyNode::computeLayerPosition((WebCore::ScrollingTreeStickyNode *)this, a2);
  return objc_msgSend(this[25], "_web_setLayerTopLeftPosition:", (float)(v3 - *((float *)this + 26)), (float)(v4 - *((float *)this + 27)));
}

float WebCore::ScrollingTreeStickyNodeCocoa::layerTopLeft(id *this)
{
  double v2;
  float v3;
  double v4;
  float v5;
  double v6;

  objc_msgSend(this[25], "bounds");
  v3 = v2;
  objc_msgSend(this[25], "anchorPoint");
  v5 = v4;
  objc_msgSend(this[25], "position");
  *(float *)&v6 = v6;
  return *((float *)this + 26) + (float)(*(float *)&v6 - (float)(v3 * v5));
}

void WebCore::ScrollingTreeStickyNodeCocoa::~ScrollingTreeStickyNodeCocoa(WebCore::ScrollingTreeStickyNodeCocoa *this, void *a2)
{
  const void *v2;
  WebCore::ScrollingTreeStickyNodeCocoa *v3;

  *(_QWORD *)this = off_1E3300700;
  v2 = (const void *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v2)
  {
    v3 = this;
    CFRelease(v2);
    this = v3;
  }
  WebCore::ScrollingTreeFixedNode::~ScrollingTreeFixedNode(this, a2);
}

{
  const void *v3;
  WTF *v4;
  void *v5;

  *(_QWORD *)this = off_1E3300700;
  v3 = (const void *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v3)
    CFRelease(v3);
  WebCore::ScrollingTreeFixedNode::~ScrollingTreeFixedNode(this, a2);
  WTF::fastFree(v4, v5);
}

uint64_t WebCore::ScrollingTreeStickyNodeCocoa::layer(WebCore::ScrollingTreeStickyNodeCocoa *this)
{
  return *((_QWORD *)this + 25);
}

WTF *WebCore::JSSVGUnitTypes::destroy(WebCore::JSSVGUnitTypes *this, JSC::JSCell *a2)
{
  WTF *result;

  result = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF *)WTF::fastFree(result, a2);
    else
      --*(_DWORD *)result;
  }
  return result;
}

uint64_t WebCore::JSSVGUnitTypes::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGUnitTypes>,(WebCore::DOMConstructorID)875>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  JSC::Heap *v8;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char **v23;
  int v24;
  uint64_t v25;
  JSC::JSCell *v26;
  JSC::JSObject *v27;
  uint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  JSC::Structure *v36;
  int v37;
  JSC::JSObject *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  WTF::StringImpl *v47;
  unint64_t v48;
  uint64_t v49;
  int *v50;
  JSC::Structure **v51;
  int *v52;
  int v53;
  int v54;
  JSC::Structure *v55;
  int v56;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 7000);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v47) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  v8 = (JSC::Heap *)(a1 + 192);
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v42 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v42);
    v5[2] = SlowCase + (int)v42;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v47, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGUnitTypes>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v43 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v43);
    v10[2848] = v2 + (int)v43;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v47 = 0;
  v48 = v2;
  v49 = 0x1000000FFFFFFFFLL;
  v50 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v47);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v47);
  v14 = v47;
  v47 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v47 = 0;
  v48 = v2;
  v49 = 0x1000000FFFFFFFFLL;
  v50 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v47);
  v16 = *(_QWORD *)(v5[227] + 2160);
  v17 = *(_QWORD *)(a2 + 3296);
  if (!v17)
    goto LABEL_21;
  v18 = *(_DWORD *)(v17 - 8);
  v19 = ((unint64_t)&WebCore::JSSVGUnitTypes::s_info + ~((_QWORD)&WebCore::JSSVGUnitTypes::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGUnitTypes::s_info + ~((_QWORD)&WebCore::JSSVGUnitTypes::s_info << 32)) >> 22);
  v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
  v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
  v22 = v18 & ((v21 >> 31) ^ v21);
  v23 = *(char ***)(v17 + 16 * v22);
  if (v23 != &WebCore::JSSVGUnitTypes::s_info)
  {
    v24 = 1;
    while (v23)
    {
      v22 = ((_DWORD)v22 + v24) & v18;
      v23 = *(char ***)(v17 + 16 * v22);
      ++v24;
      if (v23 == &WebCore::JSSVGUnitTypes::s_info)
        goto LABEL_20;
    }
LABEL_21:
    v26 = *(JSC::JSCell **)(a2 + 656);
    LODWORD(v47) = 23;
    if (((unint64_t)v26 & 0xFFFE000000000002) == 0)
    {
      v27 = (JSC::JSObject *)JSC::JSCell::getObject(v26);
      if (v27)
        JSC::JSObject::didBecomePrototype(v27, (JSC::VM *)a1);
    }
    v28 = (uint64_t *)(a1 + 38904);
    v29 = *v5;
    if (*v5 >= (unint64_t)v5[1])
    {
      v29 = v5[2];
      if ((v29 & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        v29 = JSC::LocalAllocator::allocateSlowCase();
LABEL_26:
        *(_DWORD *)v29 = 0;
        MEMORY[0x19AEA4278](v29, a1, a2, v26, &v47, &WebCore::JSSVGUnitTypesPrototype::s_info, 0, 0);
        if (*(_BYTE *)(a1 + 755))
          __dmb(0xAu);
        *(_DWORD *)(v29 + 16) |= 0x80000u;
        v30 = *v28;
        if (*(_QWORD *)(a1 + 38904) >= *(_QWORD *)(a1 + 38912))
        {
          v30 = *(_QWORD *)(a1 + 38920);
          if ((v30 & 1) != 0)
          {
            JSC::sanitizeStackForVM();
            v30 = JSC::LocalAllocator::allocateSlowCase();
LABEL_30:
            *(_DWORD *)v30 = 0;
            v31 = *(_DWORD *)(v29 + 8);
            *(_DWORD *)v30 = v29 >> 4;
            *(_DWORD *)(v30 + 4) = v31;
            *(_QWORD *)(v30 + 8) = 0;
            if (*(_BYTE *)(a1 + 755))
              __dmb(0xAu);
            JSC::reifyStaticProperties<4u>((JSC::VM *)a1, (uint64_t)&WebCore::JSSVGUnitTypes::s_info, &WebCore::JSSVGUnitTypesPrototypeTableValues, (JSC::JSObject *)v30);
            v32 = *(_QWORD *)(v5[227] + 2776);
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v34 = JSC::JSString::create(a1, &v47);
            v35 = v47;
            v47 = 0;
            if (v35)
            {
              if (*(_DWORD *)v35 == 2)
                WTF::StringImpl::destroy(v35, v33);
              else
                *(_DWORD *)v35 -= 2;
            }
            v36 = (JSC::Structure *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE));
            v56 = *(_DWORD *)v30;
            v55 = v36;
            v37 = JSC::Structure::outOfLineCapacity(v36);
            v53 = 0;
            v54 = v37;
            v47 = (WTF::StringImpl *)&v54;
            v48 = v30;
            v49 = a1;
            v50 = &v56;
            v51 = &v55;
            v52 = &v53;
            JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v36, (JSC::VM *)a1, v32, 6, (uint64_t)&v47);
            if ((*(_BYTE *)((16 * *(unsigned int *)v30) | 0x12) & 8) != 0)
              JSC::VM::invalidateStructureChainIntegrity();
            JSC::JSObject::putDirectOffset(v30, a1, v53, v34);
            *((_DWORD *)v36 + 4) |= 0x10u;
            LODWORD(v47) = 23;
            if ((v30 & 0xFFFE000000000002) == 0)
            {
              v38 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v30);
              if (v38)
                JSC::JSObject::didBecomePrototype(v38, (JSC::VM *)a1);
            }
            v39 = *v5;
            v8 = (JSC::Heap *)(a1 + 192);
            if (*v5 >= (unint64_t)v5[1])
            {
              v39 = v5[2];
              if ((v39 & 1) != 0)
              {
                JSC::sanitizeStackForVM();
                v39 = JSC::LocalAllocator::allocateSlowCase();
                goto LABEL_40;
              }
              v46 = *(_QWORD *)(v39 + 8) ^ v5[3];
              v5[1] = v39 + HIDWORD(v46);
              v5[2] = v39 + (int)v46;
            }
            *v5 = v39 + 128;
LABEL_40:
            *(_DWORD *)v39 = 0;
            MEMORY[0x19AEA4278](v39, a1, a2, v30, &v47, &WebCore::JSSVGUnitTypes::s_info, 0, 0);
            if (*(_BYTE *)(a1 + 755))
              __dmb(0xAu);
            v25 = WebCore::cacheDOMStructure((JSCell *)a2, v39, (uint64_t)&WebCore::JSSVGUnitTypes::s_info);
            goto LABEL_43;
          }
          v45 = *(_QWORD *)(v30 + 8) ^ *(_QWORD *)(a1 + 38928);
          *(_QWORD *)(a1 + 38912) = v30 + HIDWORD(v45);
          *(_QWORD *)(a1 + 38920) = v30 + (int)v45;
        }
        *v28 = v30 + 16;
        goto LABEL_30;
      }
      v44 = *(_QWORD *)(v29 + 8) ^ v5[3];
      v5[1] = v29 + HIDWORD(v44);
      v5[2] = v29 + (int)v44;
    }
    *v5 = v29 + 128;
    goto LABEL_26;
  }
LABEL_20:
  v25 = *(_QWORD *)(v17 + 16 * v22 + 8);
  if (!v25)
    goto LABEL_21;
LABEL_43:
  v40 = *(_QWORD *)(v25 + 48);
  v47 = 0;
  v48 = v2;
  v49 = 0x1000000FFFFFFFFLL;
  v50 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v16, v40, 14, (uint64_t)&v47);
  JSC::reifyStaticProperties<3u>((JSC::VM *)a1, (uint64_t)&WebCore::JSSVGUnitTypes::s_info, &WebCore::JSSVGUnitTypesConstructorTableValues, (JSC::JSObject *)v2);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 7000) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath(v8, (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGUnitTypesConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGUnitTypesPrototype::s_info != (char **)(16
                                                            * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                              + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGUnitTypes>,(WebCore::DOMConstructorID)875>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

WTF::StringImpl *WebCore::JSSVGUseElementPrototype::finishCreation(WebCore::JSSVGUseElementPrototype *this, JSC::VM *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<6u>(a2, (uint64_t)&WebCore::JSSVGUseElement::s_info, &WebCore::JSSVGUseElementPrototypeTableValues, this);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5 = JSC::jsNontrivialString((uint64_t)a2, &v8);
  JSC::JSObject::putDirectWithoutTransition((int *)this, a2, v4, v5, 6);
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::JSSVGUseElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGGraphicsElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGGraphicsElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGGraphicsElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSVGUseElement::JSSVGUseElement(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = *a4;
  *a4 = 0;
  v7 = v5;
  WebCore::JSSVGGraphicsElement::JSSVGGraphicsElement(a1, a2, a3, &v7);
  WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v7);
  return a1;
}

unint64_t WebCore::JSSVGUseElement::createPrototype(WebCore::JSSVGUseElement *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  int v3;
  JSC::JSCell *v5;
  unint64_t v6;
  WebCore::JSDOMGlobalObject *v7;
  JSC::Structure *v8;

  v3 = (int)a2;
  v5 = (JSC::JSCell *)WebCore::JSSVGGraphicsElement::prototype(this, a2, a3);
  v6 = JSC::Structure::create((uint64_t *)this, v3, v5);
  *(_DWORD *)(v6 + 16) |= 0x80000u;
  return WebCore::JSSVGUseElementPrototype::create(this, v6, v7, v8);
}

unint64_t WebCore::JSSVGUseElementPrototype::create(WebCore::JSSVGUseElementPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  unint64_t v6;
  int v7;

  v6 = JSC::allocateCell<WebCore::JSAbstractRangePrototype>((uint64_t)this);
  v7 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)v6 = a2 >> 4;
  *(_DWORD *)(v6 + 4) = v7;
  *(_QWORD *)(v6 + 8) = 0;
  WebCore::JSSVGUseElementPrototype::finishCreation((WebCore::JSSVGUseElementPrototype *)v6, this);
  return v6;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGUseElement>,(WebCore::DOMConstructorID)876>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v19;
  unint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  int v23;
  int v24;
  uint64_t v25;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 7008);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGGraphicsElement>,(WebCore::DOMConstructorID)815>(a1, a2);
  v7 = v6;
  LODWORD(v21) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v19 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v19);
    v5[2] = SlowCase + (int)v19;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v21, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGUseElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 >= v10[2847])
  {
    v2 = v10[2848];
    if ((v2 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v2 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_11;
    }
    v20 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v20);
    v10[2848] = v2 + (int)v20;
  }
  v10[2846] = v2 + 48;
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v21 = 0;
  v22 = v2;
  v23 = -1;
  v24 = 0x1000000;
  v25 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v21);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v21);
  v14 = v21;
  v21 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v21 = 0;
  v22 = v2;
  v23 = -1;
  v24 = 0x1000000;
  v25 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v21);
  v16 = *(_QWORD *)(v5[227] + 2160);
  v17 = *(_QWORD *)(WebCore::getDOMStructure<WebCore::JSSVGUseElement>((WebCore::JSSVGUseElement *)a1, (JSC::VM *)a2)
                  + 48);
  v21 = 0;
  v22 = v2;
  v23 = -1;
  v24 = 0x1000000;
  v25 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v16, v17, 14, (uint64_t)&v21);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 7008) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGUseElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGUseElementPrototype::s_info != (char **)(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                               + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGUseElement>,(WebCore::DOMConstructorID)876>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGUseElement_x(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 248));
}

unint64_t WebCore::jsSVGUseElement_y(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 256));
}

unint64_t WebCore::jsSVGUseElement_width(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 264));
}

unint64_t WebCore::jsSVGUseElement_height(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGLength>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 272));
}

unint64_t WebCore::jsSVGUseElement_href(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedString>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 224));
}

uint64_t WebCore::JSSVGUseElement::subspaceForImpl(WebCore::JSSVGUseElement *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 7088);
  if (v4)
    return v4;
  v7 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v7, a2);
LABEL_6:
  v9 = *(_QWORD *)(v7 + 2824);
  v16 = *(_QWORD *)(v9 + 7088);
  if (!v16)
  {
    v14 = 40;
    std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[11],JSC::Heap &,JSC::JSDestructibleObjectHeapCellType &,unsigned long,unsigned char const&>("IsoSpace T", (uint64_t)this + 192, (uint64_t)this + 1872, &v14, JSC::JSCell::numberOfLowerTierCells, &v15);
    v11 = v15;
    v16 = v15;
    v12 = *(_QWORD *)(v9 + 7088);
    *(_QWORD *)(v9 + 7088) = v15;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    v13 = *(unsigned int *)(v7 + 2844);
    if ((_DWORD)v13 == *(_DWORD *)(v7 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v7 + 2832, (unint64_t)&v16);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v7 + 2832) + 8 * v13) = v11;
      *(_DWORD *)(v7 + 2844) = v13 + 1;
    }
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  v15 = JSC::GCClient::IsoSubspace::IsoSubspace();
  WebCore::JSSVGUseElement::subspaceForImpl(JSC::VM &)::$_1::operator()<WebCore::ExtendedDOMClientIsoSubspaces,std::unique_ptr<JSC::GCClient::IsoSubspace>>(v3, &v15);
  std::unique_ptr<JSC::GCClient::IsoSubspace>::~unique_ptr[abi:sn180100](&v15);
  v10 = __ldxr((unsigned __int8 *)v7);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
  return v4;
}

uint64_t WebCore::JSSVGViewElement::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSSVGElement::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSSVGElement::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSSVGElement::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSVGViewElementPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGViewElementPrototype::create(WebCore::JSSVGViewElementPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<7u>(this, (uint64_t)&WebCore::JSSVGViewElement::s_info, &WebCore::JSSVGViewElementPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGViewElement>,(WebCore::DOMConstructorID)877>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 7016);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGElement>,(WebCore::DOMConstructorID)783>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v34);
    v5[2] = SlowCase + (int)v34;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGViewElement>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v35 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v35);
    v10[2848] = v2 + (int)v35;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSSVGViewElement::s_info + ~((_QWORD)&WebCore::JSSVGViewElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGViewElement::s_info + ~((_QWORD)&WebCore::JSSVGViewElement::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSSVGViewElement::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSSVGViewElement::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSSVGElement::prototype((WebCore::JSSVGElement *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSSVGViewElementPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v30 = (JSC::JSCell *)WebCore::JSSVGViewElementPrototype::create((WebCore::JSSVGViewElementPrototype *)a1, (JSC::VM *)a2, Structure, v29);
  v31 = WebCore::JSSVGViewElement::createStructure((uint64_t *)a1, a2, v30);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v31, (uint64_t)&WebCore::JSSVGViewElement::s_info);
LABEL_22:
  v32 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v32, 14, (uint64_t)&v36);
  JSC::reifyStaticProperties<3u>((JSC::VM *)a1, (uint64_t)&WebCore::JSSVGViewElement::s_info, &WebCore::JSSVGViewElementConstructorTableValues, (JSC::JSObject *)v2);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 7016) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGViewElementConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGViewElementPrototype::s_info != (char **)(16
                                                              * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGViewElement>,(WebCore::DOMConstructorID)877>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGViewElement_viewBox(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGRect>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 176));
}

unint64_t WebCore::jsSVGViewElement_preserveAspectRatio(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGPreserveAspectRatio>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 184));
}

unint64_t WebCore::jsSVGViewElement_zoomAndPan(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int16 *)(*(_QWORD *)(a2 + 24) + 196) | 0xFFFE000000000000;
}

BOOL WebCore::setJSSVGViewElement_zoomAndPan(JSC *this, unint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  JSValue v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  unint64_t v14;
  WTF::StringImpl *v15;

  v4 = *((_QWORD *)this + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGViewElement::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGViewElement::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v14 = a3;
  if (a3 < 0xFFFE000000000000 || (a3 & 0x80000000) != 0)
  {
    if (!(a3 >> 49))
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v14, this);
    if (*(_DWORD *)(v4 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4))
      return 0;
  }
  LOBYTE(v14) = 4;
  v15 = 0;
  if (!*(_QWORD *)(v4 + 16))
  {
    v10.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)4, (JSC::JSGlobalObject *)&v15);
    JSC::VM::throwException((JSC::VM *)v4, this, v10);
    v12 = v15;
    v15 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
  }
  return 1;
}

uint64_t WebCore::JSSVGViewElement::subspaceForImpl(WebCore::JSSVGViewElement *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  WTF *v17;
  void *v18;
  int v19;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 7096);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  v21 = *(_QWORD *)(v8 + 7096);
  if (!v21)
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v23, "IsoSpace T");
    v22 = 0;
    MEMORY[0x19AEA3204](v9, &v23, (char *)this + 192, (char *)this + 1872, 40, 8, &v22);
    v11 = v22;
    v22 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v23;
    v23 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v21 = v9;
    v13 = *(_QWORD *)(v8 + 7096);
    *(_QWORD *)(v8 + 7096) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = *(unsigned int *)(v6 + 2844);
    if ((_DWORD)v14 == *(_DWORD *)(v6 + 2840))
    {
      v15 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v6 + 2832, v14 + 1, (unint64_t)&v21);
      v14 = *(unsigned int *)(v6 + 2844);
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = *v15;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = v9;
    }
    *(_DWORD *)(v6 + 2844) = v14 + 1;
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v16 = *(_QWORD *)(v3 + 7096);
  *(_QWORD *)(v3 + 7096) = v4;
  if (v16)
  {
    v17 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v17, v18);
  }
  v19 = __ldxr((unsigned __int8 *)v6);
  if (v19 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSSVGViewSpec::visitOutputConstraints<JSC::AbstractSlotVisitor>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a2 + 88);
  if (!v2 || !*(_BYTE *)(v2 + 24))
    return WebCore::JSSVGViewSpec::visitAdditionalChildren<JSC::AbstractSlotVisitor>(a1, a2);
  result = 75;
  __break(0xC471u);
  return result;
}

WebCore::SVGViewSpec *WebCore::JSSVGViewSpec::destroy(WebCore::JSSVGViewSpec *this, JSC::JSCell *a2)
{
  WebCore::SVGViewSpec *result;
  WTF *v4;
  void *v5;

  result = (WebCore::SVGViewSpec *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::SVGViewSpec::~SVGViewSpec(result, a2);
      return (WebCore::SVGViewSpec *)WTF::fastFree(v4, v5);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

uint64_t WebCore::JSSVGViewSpec::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSVGViewSpec::visitChildren(uint64_t a1, uint64_t a2)
{
  JSC::JSObject::visitChildren();
  return WebCore::JSSVGViewSpec::visitAdditionalChildren<JSC::AbstractSlotVisitor>(a1, a2);
}

uint64_t WebCore::JSSVGViewSpec::visitChildren(WebCore::JSSVGViewSpec *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v7;
    JSC::JSObject::visitChildren();
    result = WebCore::JSSVGViewSpec::visitAdditionalChildren<JSC::AbstractSlotVisitor>((uint64_t)this, (uint64_t)a2);
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

uint64_t WebCore::JSSVGViewSpecPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSVGViewSpecPrototype::create(WebCore::JSSVGViewSpecPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<13u>(this, (uint64_t)&WebCore::JSSVGViewSpec::s_info, (uint64_t)&WebCore::JSSVGViewSpecPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGViewSpec>,(WebCore::DOMConstructorID)878>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 7024);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGViewSpec>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSSVGViewSpec::s_info + ~((_QWORD)&WebCore::JSSVGViewSpec::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGViewSpec::s_info + ~((_QWORD)&WebCore::JSSVGViewSpec::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSSVGViewSpec::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSSVGViewSpec::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSSVGViewSpecPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSSVGViewSpecPrototype::create((WebCore::JSSVGViewSpecPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSSVGViewSpec::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSSVGViewSpec::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  JSC::reifyStaticProperties<3u>((JSC::VM *)a1, (uint64_t)&WebCore::JSSVGViewSpec::s_info, &WebCore::JSSVGViewSpecConstructorTableValues, (JSC::JSObject *)v2);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 7024) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSVGViewSpecConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSVGViewSpecPrototype::s_info != (char **)(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSSVGViewSpec>,(WebCore::DOMConstructorID)878>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsSVGViewSpec_transform(int a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGTransformList>(a1, *(JSC::VM **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WebCore::JSDOMGlobalObject **)(*(_QWORD *)(a2 + 24) + 48));
}

uint64_t WebCore::jsSVGViewSpec_viewTarget(WebCore *a1, unsigned int **a2)
{
  JSC::JSGlobalObject *v3;
  WebCore::Element *v4;
  JSC::JSGlobalObject *v6;
  WebCore::JSDOMGlobalObject *v7;
  void *v8;
  unint64_t v9;
  WebCore::JSDOMGlobalObject *v10;

  v3 = *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  WebCore::SVGViewSpec::viewTarget(a2[3], (WTF::StringImpl *)a2, (unsigned int **)&v10);
  if (!v10)
    return 2;
  v6 = v3;
  v7 = v10;
  v9 = WebCore::toJS(a1, v6, v10, v4);
  if (*((_DWORD *)v7 + 6) == 2)
  {
    if ((*((_WORD *)v7 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v7, v8);
  }
  else
  {
    *((_DWORD *)v7 + 6) -= 2;
  }
  return v9;
}

size_t WebCore::jsSVGViewSpec_viewBoxString(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _DWORD *v6;
  int v7;
  int v8;
  int v9;
  size_t result;
  WTF::StringImpl *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unsigned __int8 *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  int v24;
  char v25;
  int v26;
  char v27;
  int v28;
  char v29;
  int v30;

  v3 = *(_QWORD **)(*(_QWORD *)(a2 + 24) + 8);
  v4 = v3[3];
  if (!v4 || !*(_DWORD *)(v4 - 12))
    goto LABEL_2;
  v15 = *(unsigned int *)(v4 - 4);
  if ((_DWORD)v15)
  {
    v16 = 8 * v15;
    v17 = (uint64_t *)v3[3];
    while ((unint64_t)(*v17 + 1) <= 1)
    {
      ++v17;
      v16 -= 8;
      if (!v16)
        goto LABEL_2;
    }
  }
  else
  {
    v17 = (uint64_t *)v3[3];
  }
  v21 = (uint64_t *)(v4 + 8 * v15);
  if (v17 == v21)
    goto LABEL_2;
  v22 = *v17;
LABEL_30:
  if (!*(_QWORD *)(v22 + 8))
  {
    while (++v17 != v21)
    {
      v22 = *v17;
      if ((unint64_t)(*v17 + 1) > 1)
      {
        if (v17 != v21)
          goto LABEL_30;
        break;
      }
    }
LABEL_2:
    v5 = v3 + 5;
    goto LABEL_3;
  }
  v5 = v3 + 6;
LABEL_3:
  v6 = (_DWORD *)*v5;
  v7 = v6[8];
  v8 = v6[9];
  v9 = v6[10];
  v30 = v6[7];
  v29 = 32;
  v28 = v7;
  v27 = 32;
  v26 = v8;
  v25 = 32;
  v24 = v9;
  result = WTF::tryMakeString<float,char,float,char,float,char,float>(&v29, &v27, &v25, &v23);
  v11 = v23;
  if (v23)
  {
    v12 = *(_QWORD *)(a1 + 56);
    v13 = *((_DWORD *)v23 + 1);
    if (!v13)
    {
      v14 = *(_QWORD *)(v12 + 41968);
      goto LABEL_20;
    }
    if (v13 != 1)
    {
LABEL_6:
      v14 = *(_QWORD *)(v12 + 64760);
      if (!v14 || v23 != *(WTF::StringImpl **)(v14 + 8))
      {
        v14 = JSC::jsStringWithCacheSlowCase();
        v11 = v23;
        v23 = 0;
        if (!v11)
          return v14;
LABEL_21:
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v11);
        else
          *(_DWORD *)v11 -= 2;
        return v14;
      }
LABEL_20:
      v23 = 0;
      goto LABEL_21;
    }
    v18 = (unsigned __int8 *)*((_QWORD *)v23 + 1);
    if ((*((_BYTE *)v23 + 16) & 4) != 0)
    {
      v19 = *v18;
    }
    else
    {
      v20 = *(unsigned __int16 *)v18;
      if (v20 > 0xFF)
        goto LABEL_6;
      v19 = v20;
    }
    v14 = *(_QWORD *)(v12 + 8 * v19 + 42216);
    goto LABEL_20;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::jsSVGViewSpec_preserveAspectRatioString(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  WTF::StringImpl *v19;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 16);
  v4 = *(_QWORD *)(v3 + 24);
  if (v4 && *(_DWORD *)(v4 - 12))
  {
    v10 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v10)
    {
      v11 = 8 * v10;
      v12 = *(uint64_t **)(v3 + 24);
      while ((unint64_t)(*v12 + 1) <= 1)
      {
        ++v12;
        v11 -= 8;
        if (!v11)
          goto LABEL_2;
      }
    }
    else
    {
      v12 = *(uint64_t **)(v3 + 24);
    }
    v17 = (uint64_t *)(v4 + 8 * v10);
    if (v12 != v17)
    {
      v18 = *v12;
LABEL_31:
      if (*(_QWORD *)(v18 + 8))
      {
        v5 = v3 + 48;
        goto LABEL_3;
      }
      while (++v12 != v17)
      {
        v18 = *v12;
        if ((unint64_t)(*v12 + 1) > 1)
        {
          if (v12 != v17)
            goto LABEL_31;
          break;
        }
      }
    }
  }
LABEL_2:
  v5 = v3 + 40;
LABEL_3:
  WebCore::SVGPreserveAspectRatioValue::valueAsString((WebCore::SVGPreserveAspectRatioValue *)(*(_QWORD *)v5 + 26), (const char **)&v19);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = v19;
  if (!v19 || (v8 = *((_DWORD *)v19 + 1)) == 0)
  {
    v9 = *(_QWORD *)(v6 + 41968);
LABEL_9:
    v19 = 0;
    if (!v7)
      return v9;
    goto LABEL_22;
  }
  if (v8 != 1)
    goto LABEL_6;
  v13 = (unsigned __int8 *)*((_QWORD *)v19 + 1);
  if ((*((_BYTE *)v19 + 16) & 4) != 0)
  {
    v14 = *v13;
LABEL_20:
    v9 = *(_QWORD *)(v6 + 8 * v14 + 42216);
    goto LABEL_21;
  }
  v16 = *(unsigned __int16 *)v13;
  if (v16 <= 0xFF)
  {
    v14 = v16;
    goto LABEL_20;
  }
LABEL_6:
  v9 = *(_QWORD *)(v6 + 64760);
  if (!v9 || v19 != *(WTF::StringImpl **)(v9 + 8))
  {
    v9 = JSC::jsStringWithCacheSlowCase();
    v7 = v19;
    goto LABEL_9;
  }
LABEL_21:
  v19 = 0;
LABEL_22:
  if (*(_DWORD *)v7 == 2)
    WTF::StringImpl::destroy(v7, v7);
  else
    *(_DWORD *)v7 -= 2;
  return v9;
}

uint64_t WebCore::jsSVGViewSpec_transformString(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;
  WTF::StringImpl *v11;

  WebCore::SVGTransformList::valueAsString(*(WebCore::SVGTransformList **)(*(_QWORD *)(a2 + 24) + 48), &v11);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = v11;
  if (!v11 || (v5 = *((_DWORD *)v11 + 1)) == 0)
  {
    v6 = *(_QWORD *)(v3 + 41968);
LABEL_7:
    v11 = 0;
    if (!v4)
      return v6;
    goto LABEL_16;
  }
  if (v5 != 1)
    goto LABEL_4;
  v7 = (unsigned __int8 *)*((_QWORD *)v11 + 1);
  if ((*((_BYTE *)v11 + 16) & 4) != 0)
  {
    v8 = *v7;
LABEL_14:
    v6 = *(_QWORD *)(v3 + 8 * v8 + 42216);
    goto LABEL_15;
  }
  v9 = *(unsigned __int16 *)v7;
  if (v9 <= 0xFF)
  {
    v8 = v9;
    goto LABEL_14;
  }
LABEL_4:
  v6 = *(_QWORD *)(v3 + 64760);
  if (!v6 || v11 != *(WTF::StringImpl **)(v6 + 8))
  {
    v6 = JSC::jsStringWithCacheSlowCase();
    v4 = v11;
    goto LABEL_7;
  }
LABEL_15:
  v11 = 0;
LABEL_16:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy(v4, v4);
  else
    *(_DWORD *)v4 -= 2;
  return v6;
}

uint64_t WebCore::jsSVGViewSpec_viewTargetString(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 40);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

unint64_t WebCore::jsSVGViewSpec_viewBox(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGRect>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 8));
}

unint64_t WebCore::jsSVGViewSpec_preserveAspectRatio(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::SVGAnimatedValueProperty<WebCore::SVGPreserveAspectRatio>>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 16));
}

unint64_t WebCore::jsSVGViewSpec_zoomAndPan(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int16 *)(*(_QWORD *)(a2 + 24) + 28) | 0xFFFE000000000000;
}

BOOL WebCore::setJSSVGViewSpec_zoomAndPan(JSC *this, unint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  JSValue v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  unint64_t v14;
  WTF::StringImpl *v15;

  v4 = *((_QWORD *)this + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSSVGViewSpec::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSSVGViewSpec::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v14 = a3;
  if (a3 < 0xFFFE000000000000 || (a3 & 0x80000000) != 0)
  {
    if (!(a3 >> 49))
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v14, this);
    if (*(_DWORD *)(v4 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4))
      return 0;
  }
  LOBYTE(v14) = 4;
  v15 = 0;
  if (!*(_QWORD *)(v4 + 16))
  {
    v10.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)4, (JSC::JSGlobalObject *)&v15);
    JSC::VM::throwException((JSC::VM *)v4, this, v10);
    v12 = v15;
    v15 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
  }
  return 1;
}

uint64_t WebCore::JSSVGViewSpecOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSSVGViewSpecOwner::finalize(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  WebCore::SVGViewSpec *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WebCore::SVGViewSpec *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  WTF *v24;
  void *v25;

  v3 = *(WebCore::SVGViewSpec **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WebCore::SVGViewSpec **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WebCore::SVGViewSpec **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    WebCore::SVGViewSpec::~SVGViewSpec(v3, a2);
    WTF::fastFree(v24, v25);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

unint64_t WebCore::wrap<WebCore::SVGViewSpec>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  WTF *v45;
  void *v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *Allocator;
  unint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  WTF *v56;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)a3;
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSSVGViewSpec::s_info + ~((_QWORD)&WebCore::JSSVGViewSpec::s_info << 32)) ^ (((unint64_t)&WebCore::JSSVGViewSpec::s_info + ~((_QWORD)&WebCore::JSSVGViewSpec::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSSVGViewSpec::s_info)
    {
LABEL_14:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_16;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSSVGViewSpec::s_info)
          goto LABEL_14;
      }
    }
  }
  v24 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSSVGViewSpecPrototype::createStructure(v24, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSSVGViewSpecPrototype::create((WebCore::JSSVGViewSpecPrototype *)v24, Structure, v26, v27);
  v29 = WebCore::JSSVGViewSpec::createStructure(v24, a2, v28);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSSVGViewSpec::s_info);
LABEL_16:
  v30 = *(_QWORD *)(a2 + 56);
  v31 = *(_QWORD *)(v30 + 41456);
  v32 = *(_QWORD *)(v31 + 23536);
  v33 = *(_QWORD **)(v32 + 7104);
  if (v33)
    goto LABEL_39;
  v34 = *(_QWORD *)(v31 + 22648);
  if (__ldaxr((unsigned __int8 *)v34))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v34))
  {
    goto LABEL_21;
  }
  MEMORY[0x19AEA534C](v34);
LABEL_21:
  v36 = *(_QWORD *)(v34 + 2824);
  v54 = *(_QWORD *)(v36 + 7104);
  if (!v54)
  {
    v37 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v56, "IsoSpace T");
    v55 = 0;
    MEMORY[0x19AEA3204](v37, &v56, v30 + 192, v30 + 1872, 32, 8, &v55);
    v39 = (uint64_t)v55;
    v55 = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = v56;
    v56 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1)
        WTF::fastFree(v40, v38);
      else
        --*(_DWORD *)v40;
    }
    v54 = v37;
    v41 = *(_QWORD *)(v36 + 7104);
    *(_QWORD *)(v36 + 7104) = v37;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
    v42 = *(unsigned int *)(v34 + 2844);
    if ((_DWORD)v42 == *(_DWORD *)(v34 + 2840))
    {
      v43 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v34 + 2832, v42 + 1, (unint64_t)&v54);
      v42 = *(unsigned int *)(v34 + 2844);
      *(_QWORD *)(*(_QWORD *)(v34 + 2832) + 8 * v42) = *v43;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v34 + 2832) + 8 * v42) = v37;
    }
    *(_DWORD *)(v34 + 2844) = v42 + 1;
  }
  v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v44 = *(_QWORD *)(v32 + 7104);
  *(_QWORD *)(v32 + 7104) = v33;
  if (v44)
  {
    v45 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v45, v46);
  }
  v47 = __ldxr((unsigned __int8 *)v34);
  if (v47 != 1)
  {
    __clrex();
    goto LABEL_38;
  }
  if (__stlxr(0, (unsigned __int8 *)v34))
LABEL_38:
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
LABEL_39:
  SlowCase = v33[3];
  if (SlowCase >= v33[4])
  {
    SlowCase = v33[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_41;
    }
    v53 = *(_QWORD *)(SlowCase + 8) ^ v33[6];
    v33[4] = SlowCase + HIDWORD(v53);
    v33[5] = SlowCase + (int)v53;
  }
  v33[3] = SlowCase + 32;
LABEL_41:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v23);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v30 + 755))
    __dmb(0xAu);
  v48 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE336960 & 1) == 0)
  {
    qword_1EE336958 = (uint64_t)&off_1E3307B10;
    byte_1EE336960 = 1;
  }
  v56 = a3;
  if ((SlowCase & 8) != 0)
    v49 = (SlowCase - 112) | 1;
  else
    v49 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v49 & 1) != 0)
    v50 = v49 + 47;
  else
    v50 = *(_QWORD *)v49 + 32;
  Allocator = *(_QWORD **)(v50 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v50 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE336958;
  Allocator[2] = v48;
  v55 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v48 + 32), (uint64_t *)&v56, (uint64_t *)&v55);
  if (v55)
    v55[1] = 3;
  return SlowCase;
}

WebCore::Screen *WebCore::JSScreen::destroy(WebCore::JSScreen *this, JSC::JSCell *a2)
{
  WebCore::Screen *result;
  bmalloc::api *v4;
  void *v5;

  result = (WebCore::Screen *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (*((_DWORD *)result + 2) == 1)
    {
      WebCore::Screen::~Screen(result, a2);
      return (WebCore::Screen *)bmalloc::api::isoDeallocate(v4, v5);
    }
    else
    {
      --*((_DWORD *)result + 2);
    }
  }
  return result;
}

uint64_t WebCore::JSScreen::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSScreenPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSScreenPrototype::create(WebCore::JSScreenPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  JSC::Structure *v18;
  int v19;
  unint64_t v21;
  WTF::StringImpl *v22[6];
  int v23;
  int v24;
  JSC::Structure *v25;
  int v26;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v21 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v21);
    *((_QWORD *)this + 4865) = SlowCase + (int)v21;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<10u>(this, (uint64_t)&WebCore::JSScreen::s_info, (uint64_t)&WebCore::JSScreenPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                         + 0x28));
  if (v9 && *(_BYTE *)(v9 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194F5F738);
  }
  v10 = v9 - 192;
  if (!v9)
    v10 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v10 + 680) + 688) & 0x2000000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v11 = v22[0];
    v12 = *((_DWORD *)this + 23281);
    *((_DWORD *)this + 23281) = 1;
    LODWORD(v22[0]) = -1;
    WORD2(v22[0]) = 1;
    JSC::JSObject::deleteProperty();
    *((_DWORD *)this + 23281) = v12;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v13);
      else
        *(_DWORD *)v11 -= 2;
    }
    if ((*(_BYTE *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x10) & 3) != 0)
      JSC::Structure::flattenDictionaryStructure((JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE)), this, (JSC::JSObject *)SlowCase);
  }
  v14 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v16 = JSC::JSString::create((uint64_t)this, v22);
  v17 = v22[0];
  v22[0] = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v15);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v26 = *(_DWORD *)SlowCase;
  v25 = v18;
  v19 = JSC::Structure::outOfLineCapacity(v18);
  v23 = 0;
  v24 = v19;
  v22[0] = (WTF::StringImpl *)&v24;
  v22[1] = (WTF::StringImpl *)SlowCase;
  v22[2] = this;
  v22[3] = (WTF::StringImpl *)&v26;
  v22[4] = (WTF::StringImpl *)&v25;
  v22[5] = (WTF::StringImpl *)&v23;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v18, this, v14, 6, (uint64_t)v22);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v23, v16);
  *((_DWORD *)v18 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSScreen>,(WebCore::DOMConstructorID)742>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5936);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSScreen>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSScreen::s_info + ~((_QWORD)&WebCore::JSScreen::s_info << 32)) ^ (((unint64_t)&WebCore::JSScreen::s_info + ~((_QWORD)&WebCore::JSScreen::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSScreen::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSScreen::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSScreenPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSScreenPrototype::create((WebCore::JSScreenPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSScreen::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSScreen::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5936) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsScreenConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSScreenPrototype::s_info != (char **)(16
                                                      * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSScreen>,(WebCore::DOMConstructorID)742>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsScreen_height(uint64_t a1, WebCore::Screen **a2)
{
  return WebCore::Screen::height(a2[3], a2) | 0xFFFE000000000000;
}

unint64_t WebCore::jsScreen_width(uint64_t a1, WebCore::Screen **a2)
{
  return WebCore::Screen::width(a2[3], a2) | 0xFFFE000000000000;
}

unint64_t WebCore::jsScreen_colorDepth(uint64_t a1, uint64_t a2)
{
  unsigned int v2;

  v2 = WebCore::Screen::colorDepth(*(WebCore::Screen **)(a2 + 24));
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

unint64_t WebCore::jsScreen_pixelDepth(uint64_t a1, uint64_t a2)
{
  unsigned int v2;

  v2 = WebCore::Screen::colorDepth(*(WebCore::Screen **)(a2 + 24));
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

unint64_t WebCore::jsScreen_availLeft(uint64_t a1, uint64_t a2)
{
  return WebCore::Screen::availLeft(*(WebCore::Screen **)(a2 + 24)) | 0xFFFE000000000000;
}

unint64_t WebCore::jsScreen_availTop(uint64_t a1, uint64_t a2)
{
  return WebCore::Screen::availTop(*(WebCore::Screen **)(a2 + 24)) | 0xFFFE000000000000;
}

unint64_t WebCore::jsScreen_availHeight(uint64_t a1, uint64_t a2)
{
  return WebCore::Screen::availHeight(*(WebCore::Screen **)(a2 + 24)) | 0xFFFE000000000000;
}

unint64_t WebCore::jsScreen_availWidth(uint64_t a1, uint64_t a2)
{
  return WebCore::Screen::availWidth(*(WebCore::Screen **)(a2 + 24)) | 0xFFFE000000000000;
}

unint64_t WebCore::jsScreen_orientation(int a1, uint64_t a2)
{
  JSC::VM *v3;
  uint64_t v4;

  v3 = *(JSC::VM **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = WebCore::Screen::orientation(*(WebCore::Screen **)(a2 + 24));
  return WebCore::wrap<WebCore::ScreenOrientation>(a1, v3, v4);
}

uint64_t WebCore::JSScreenOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  void *v6;
  WTF::ConcurrentPtrHashSet *v7;
  _DWORD *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  void *v15;
  uint64_t result;
  uint64_t v17;
  void *v18;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 24) + 16);
  if (!v5)
    return 0;
  v6 = *(void **)(v5 + 8);
  if (!v6)
    return 0;
  if (a5)
  {
    *a5 = "Reachable from Window";
    a5[1] = 22;
  }
  v7 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v8 = (_DWORD *)*((_QWORD *)v7 + 6);
  if ((_DWORD *)((char *)v7 + 56) != v8)
  {
    v9 = v8[1];
    v10 = ((unint64_t)v6 + ~((_QWORD)v6 << 32)) ^ (((unint64_t)v6 + ~((_QWORD)v6 << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = v13;
    while (1)
    {
      v15 = *(void **)&v8[2 * v14 + 4];
      if (!v15)
        return 0;
      if (v6 == v15)
        goto LABEL_14;
      v14 = (v14 + 1) & v9;
      if (v14 == v13)
      {
        __break(0xC471u);
        JUMPOUT(0x194F5FE10);
      }
    }
  }
  v17 = a4;
  v18 = v6;
  result = WTF::ConcurrentPtrHashSet::containsImplSlow(v7, v6);
  a4 = v17;
  v6 = v18;
  if ((_DWORD)result)
  {
LABEL_14:
    if (*(_BYTE *)(a4 + 131))
      (*(void (**)(uint64_t, void *))(*(_QWORD *)a4 + 152))(a4, v6);
    return 1;
  }
  return result;
}

void WebCore::JSScreenOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WebCore::Screen *v3;
  int v4;
  bmalloc::api *v5;
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  WebCore::Screen *v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;

  v3 = *(WebCore::Screen **)(*(_QWORD *)a2 + 24);
  v4 = *((_DWORD *)v3 + 2);
  *((_DWORD *)v3 + 2) = v4 + 1;
  if (*(_DWORD *)(a3 + 48))
  {
    v9 = *(_QWORD *)(a3 + 32);
    v7 = (uint64_t *)(a3 + 32);
    v8 = v9;
    if (v9)
    {
      v10 = *(_DWORD *)(v8 - 8);
      v11 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
      v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
      v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
      v14 = v10 & ((v13 >> 31) ^ v13);
      v15 = *(WebCore::Screen **)(v8 + 16 * v14);
      if (v15 != v3)
      {
        v16 = 1;
        while (v15)
        {
          v14 = ((_DWORD)v14 + v16) & v10;
          v15 = *(WebCore::Screen **)(v8 + 16 * v14);
          ++v16;
          if (v15 == v3)
            goto LABEL_12;
        }
        v14 = *(unsigned int *)(v8 - 4);
      }
LABEL_12:
      if (v14 != *(_DWORD *)(v8 - 4))
      {
        v17 = (_QWORD *)(v8 + 16 * v14);
        *v17 = -1;
        v20 = v17[1];
        v19 = v17 + 1;
        v18 = v20;
        if (v20)
        {
          *(_QWORD *)(v18 + 8) = 3;
          *v19 = 0;
        }
        ++*(_DWORD *)(*v7 - 16);
        v21 = *v7;
        if (*v7)
          v22 = *(_DWORD *)(v21 - 12) - 1;
        else
          v22 = -1;
        *(_DWORD *)(v21 - 12) = v22;
        v23 = *v7;
        if (*v7)
        {
          v24 = 6 * *(_DWORD *)(v23 - 12);
          v25 = *(_DWORD *)(v23 - 4);
          if (v24 < v25 && v25 >= 9)
            WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v7, v25 >> 1, 0);
        }
      }
    }
    v4 = *((_DWORD *)v3 + 2) - 1;
  }
  else if (*(_QWORD *)v3)
  {
    *(_QWORD *)(*(_QWORD *)v3 + 8) = 3;
    *(_QWORD *)v3 = 0;
  }
  if (v4)
  {
    *((_DWORD *)v3 + 2) = v4;
  }
  else
  {
    WebCore::Screen::~Screen(v3, a2);
    bmalloc::api::isoDeallocate(v5, v6);
  }
}

unint64_t WebCore::wrap<WebCore::Screen>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t SlowCase;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char **v14;
  int v15;
  unint64_t v16;
  uint64_t *v17;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v19;
  JSC::Structure *v20;
  JSC::JSCell *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  WTF *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;
  void *v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *Allocator;
  uint64_t v44;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  unsigned int v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  WTF *v55;
  int v56;
  unint64_t v57;
  _QWORD *v58;
  WTF *v59;

  v5 = *(_QWORD *)(a2 + 3320);
  if (*(_DWORD *)(v5 + 48))
  {
    v49 = *(_QWORD *)(v5 + 32);
    if (!v49)
      goto LABEL_5;
    v50 = *(_DWORD *)(v49 - 8);
    v51 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v52 = 9 * ((v51 + ~(v51 << 13)) ^ ((v51 + ~(v51 << 13)) >> 8));
    v53 = (v52 ^ (v52 >> 15)) + ~((v52 ^ (v52 >> 15)) << 27);
    v54 = v50 & ((v53 >> 31) ^ v53);
    v55 = *(WTF **)(v49 + 16 * v54);
    if (v55 != a3)
    {
      v56 = 1;
      while (v55)
      {
        v54 = ((_DWORD)v54 + v56) & v50;
        v55 = *(WTF **)(v49 + 16 * v54);
        ++v56;
        if (v55 == a3)
          goto LABEL_62;
      }
      goto LABEL_5;
    }
LABEL_62:
    v6 = *(_QWORD *)(v49 + 16 * v54 + 8);
    if (!v6)
      goto LABEL_5;
  }
  else
  {
    v6 = *(_QWORD *)a3;
    if (!*(_QWORD *)a3)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v6 + 8) & 3) == 0)
  {
    SlowCase = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
      return SlowCase;
  }
LABEL_5:
  ++*((_DWORD *)a3 + 2);
  v8 = *(_QWORD *)(a2 + 3296);
  if (v8)
  {
    v9 = *(_DWORD *)(v8 - 8);
    v10 = ((unint64_t)&WebCore::JSScreen::s_info + ~((_QWORD)&WebCore::JSScreen::s_info << 32)) ^ (((unint64_t)&WebCore::JSScreen::s_info + ~((_QWORD)&WebCore::JSScreen::s_info << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = *(char ***)(v8 + 16 * v13);
    if (v14 == &WebCore::JSScreen::s_info)
    {
LABEL_10:
      v16 = *(_QWORD *)(v8 + 16 * v13 + 8);
      if (v16)
        goto LABEL_12;
    }
    else
    {
      v15 = 1;
      while (v14)
      {
        v13 = ((_DWORD)v13 + v15) & v9;
        v14 = *(char ***)(v8 + 16 * v13);
        ++v15;
        if (v14 == &WebCore::JSScreen::s_info)
          goto LABEL_10;
      }
    }
  }
  v17 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSScreenPrototype::createStructure(v17, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v21 = (JSC::JSCell *)WebCore::JSScreenPrototype::create((WebCore::JSScreenPrototype *)v17, Structure, v19, v20);
  v22 = WebCore::JSScreen::createStructure(v17, a2, v21);
  v16 = WebCore::cacheDOMStructure((JSCell *)a2, v22, (uint64_t)&WebCore::JSScreen::s_info);
LABEL_12:
  v23 = *(_QWORD *)(a2 + 56);
  v24 = *(_QWORD *)(v23 + 41456);
  v25 = *(_QWORD *)(v24 + 23536);
  v26 = *(_QWORD **)(v25 + 6016);
  if (v26)
    goto LABEL_32;
  v27 = *(_QWORD *)(v24 + 22648);
  if (__ldaxr((unsigned __int8 *)v27))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v27))
  {
    goto LABEL_17;
  }
  MEMORY[0x19AEA534C](v27);
LABEL_17:
  v29 = *(_QWORD *)(v27 + 2824);
  if (!*(_QWORD *)(v29 + 6016))
  {
    v30 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v59, "IsoSpace T");
    v58 = 0;
    MEMORY[0x19AEA3204](v30, &v59, v23 + 192, v23 + 1872, 32, 8, &v58);
    v32 = (uint64_t)v58;
    v58 = 0;
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    v33 = v59;
    v59 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 1)
        WTF::fastFree(v33, v31);
      else
        --*(_DWORD *)v33;
    }
    v34 = *(_QWORD *)(v29 + 6016);
    *(_QWORD *)(v29 + 6016) = v30;
    if (v34)
      (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  }
  v26 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v36 = *(_QWORD *)(v25 + 6016);
  *(_QWORD *)(v25 + 6016) = v26;
  if (v36)
  {
    v37 = (WTF *)MEMORY[0x19AEA3528](v36, v35);
    WTF::fastFree(v37, v38);
  }
  v39 = __ldxr((unsigned __int8 *)v27);
  if (v39 != 1)
  {
    __clrex();
    goto LABEL_31;
  }
  if (__stlxr(0, (unsigned __int8 *)v27))
LABEL_31:
    WTF::Lock::unlockSlow((WTF::Lock *)v27);
LABEL_32:
  SlowCase = v26[3];
  if (SlowCase < v26[4])
  {
LABEL_33:
    v26[3] = SlowCase + 32;
    goto LABEL_34;
  }
  SlowCase = v26[5];
  if ((SlowCase & 1) == 0)
  {
    v57 = *(_QWORD *)(SlowCase + 8) ^ v26[6];
    v26[4] = SlowCase + HIDWORD(v57);
    v26[5] = SlowCase + (int)v57;
    goto LABEL_33;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_34:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v16);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v23 + 755))
    __dmb(0xAu);
  v40 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE336970 & 1) == 0)
  {
    qword_1EE336968 = (uint64_t)&off_1E3307B40;
    byte_1EE336970 = 1;
  }
  if (!*(_DWORD *)(v40 + 48))
  {
    if ((SlowCase & 8) != 0)
      v41 = (SlowCase - 112) | 1;
    else
      v41 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v41 & 1) != 0)
      v42 = v41 + 47;
    else
      v42 = *(_QWORD *)v41 + 32;
    Allocator = *(_QWORD **)(v42 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v42 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &qword_1EE336968;
    Allocator[2] = v40;
    v44 = *(_QWORD *)a3;
    *(_QWORD *)a3 = Allocator;
    if (!v44)
      return SlowCase;
LABEL_56:
    *(_QWORD *)(v44 + 8) = 3;
    return SlowCase;
  }
  v59 = a3;
  if ((SlowCase & 8) != 0)
    v46 = (SlowCase - 112) | 1;
  else
    v46 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v46 & 1) != 0)
    v47 = v46 + 47;
  else
    v47 = *(_QWORD *)v46 + 32;
  v48 = *(_QWORD **)(v47 + 16);
  if (!v48)
    v48 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v47 + 16) = *v48;
  *v48 = SlowCase;
  v48[1] = &qword_1EE336968;
  v48[2] = v40;
  v58 = v48;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v40 + 32), (uint64_t *)&v59, (uint64_t *)&v58);
  v44 = (uint64_t)v58;
  if (v58)
    goto LABEL_56;
  return SlowCase;
}

uint64_t WebCore::JSScreenOrientation::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24) - 24);
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEventTarget::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSScreenOrientationPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSScreenOrientationPrototype::create(WebCore::JSScreenOrientationPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  int v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  int v19;
  WTF::StringImpl *v20;
  unint64_t v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  JSC::Structure *v25;
  int v26;
  unint64_t v28;
  WTF::StringImpl *v29[6];
  int v30;
  int v31;
  JSC::Structure *v32;
  int v33;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v28 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v28);
    *((_QWORD *)this + 4865) = SlowCase + (int)v28;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<6u>(this, (uint64_t)&WebCore::JSScreenOrientation::s_info, &WebCore::JSScreenOrientationPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                         + 0x28));
  if (v9 && *(_BYTE *)(v9 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194F60A88);
  }
  v10 = (int *)((char *)this + 93124);
  v11 = v9 - 192;
  if (!v9)
    v11 = 0;
  v12 = *(_QWORD *)(*(_QWORD *)(v11 + 680) + 688);
  if ((v12 & 0x4000000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v13 = v29[0];
    v14 = *v10;
    *v10 = 1;
    LODWORD(v29[0]) = -1;
    WORD2(v29[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v10 = v14;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v15);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  v16 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v16 && *(_BYTE *)(v16 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194F60AA8);
  }
  v17 = v16 - 192;
  if (!v16)
    v17 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v17 + 680) + 688) & 0x4000000000000) != 0)
  {
    if ((v12 & 0x4000000000000) != 0)
      goto LABEL_24;
  }
  else
  {
    WTF::AtomStringImpl::addLiteral();
    v18 = v29[0];
    v19 = *v10;
    *v10 = 1;
    LODWORD(v29[0]) = -1;
    WORD2(v29[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v10 = v19;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v20);
      else
        *(_DWORD *)v18 -= 2;
    }
  }
  if ((*(_BYTE *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x10) & 3) != 0)
    JSC::Structure::flattenDictionaryStructure((JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE)), this, (JSC::JSObject *)SlowCase);
LABEL_24:
  v21 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v23 = JSC::JSString::create((uint64_t)this, v29);
  v24 = v29[0];
  v29[0] = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v22);
    else
      *(_DWORD *)v24 -= 2;
  }
  v25 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v33 = *(_DWORD *)SlowCase;
  v32 = v25;
  v26 = JSC::Structure::outOfLineCapacity(v25);
  v30 = 0;
  v31 = v26;
  v29[0] = (WTF::StringImpl *)&v31;
  v29[1] = (WTF::StringImpl *)SlowCase;
  v29[2] = this;
  v29[3] = (WTF::StringImpl *)&v33;
  v29[4] = (WTF::StringImpl *)&v32;
  v29[5] = (WTF::StringImpl *)&v30;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v25, this, v21, 6, (uint64_t)v29);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v30, v23);
  *((_DWORD *)v25 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSScreenOrientation>,(WebCore::DOMConstructorID)743>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v29;
  JSC::Structure *v30;
  JSC::JSCell *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v35;
  unint64_t v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  int v39;
  int v40;
  uint64_t v41;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5944);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEventTarget>,(WebCore::DOMConstructorID)450>(a1, a2);
  v7 = v6;
  LODWORD(v37) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v35 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v35);
    v5[2] = SlowCase + (int)v35;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v37, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSScreenOrientation>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v36 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v36);
    v10[2848] = v2 + (int)v36;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v37);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v37);
  v14 = v37;
  v37 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v37);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSScreenOrientation::s_info
         + ~((_QWORD)&WebCore::JSScreenOrientation::s_info << 32)) ^ (((unint64_t)&WebCore::JSScreenOrientation::s_info
                                                                     + ~((_QWORD)&WebCore::JSScreenOrientation::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSScreenOrientation::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSScreenOrientation::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSEventTarget::prototype((WebCore::JSEventTarget *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSScreenOrientationPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v31 = (JSC::JSCell *)WebCore::JSScreenOrientationPrototype::create((WebCore::JSScreenOrientationPrototype *)a1, Structure, v29, v30);
  v32 = WebCore::JSScreenOrientation::createStructure((uint64_t *)a1, a2, v31);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v32, (uint64_t)&WebCore::JSScreenOrientation::s_info);
LABEL_22:
  v33 = *(_QWORD *)(v26 + 48);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v33, 14, (uint64_t)&v37);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5944) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsScreenOrientationConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSScreenOrientationPrototype::s_info != (char **)(16
                                                                 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                   + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSScreenOrientation>,(WebCore::DOMConstructorID)743>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsScreenOrientation_type(PAL *a1, uint64_t a2)
{
  PAL *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  int v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  unsigned __int8 *v19;
  unsigned int v20;
  unsigned int v21;

  v2 = a1;
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) - 16);
  if (!v3)
    goto LABEL_37;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    goto LABEL_37;
  if (*(_BYTE *)(v4 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x194F610D4);
  }
  v5 = *(_QWORD *)(v4 + 240);
  if (v5
    && (v6 = *(_QWORD *)(v5 + 8)) != 0
    && (v7 = *(_QWORD *)(v6 + 24)) != 0
    && (v8 = *(_QWORD *)(v7 + 8)) != 0
    && (v9 = *(_QWORD *)(v8 + 944)) != 0
    && (a1 = *(PAL **)(v9 + 8)) != 0)
  {
    v11 = (*(uint64_t (**)(PAL *))(*(_QWORD *)a1 + 16))(a1);
  }
  else
  {
LABEL_37:
    if (PAL::deviceHasIPadCapability(a1))
      v11 = 2;
    else
      v11 = 0;
  }
  v12 = *((_QWORD *)v2 + 7);
  v13 = (uint64_t *)(v12 + 41968);
  if ((_MergedGlobals_774[0] & 1) == 0)
  {
    _MergedGlobals_25 += 2;
    dword_1ECE79D80 += 2;
    qword_1EE336B08 = (uint64_t)&_MergedGlobals_25;
    unk_1EE336B10 = &dword_1ECE79D80;
    dword_1ECE79DA0 += 2;
    dword_1ECE79DC0 += 2;
    qword_1EE336B18 = (uint64_t)&dword_1ECE79DA0;
    unk_1EE336B20 = &dword_1ECE79DC0;
    _MergedGlobals_774[0] = 1;
  }
  v14 = *(_QWORD *)&_MergedGlobals_774[8 * v11 + 448];
  if (!v14)
    return *v13;
  v15 = *(_DWORD *)v14;
  v16 = *(_DWORD *)(v14 + 4);
  *(_DWORD *)v14 += 2;
  if (v16)
  {
    if (v16 != 1)
    {
LABEL_19:
      v17 = *(_QWORD *)(v12 + 64760);
      if (!v17 || v14 != *(_QWORD *)(v17 + 8))
      {
        v17 = JSC::jsStringWithCacheSlowCase();
        v15 = *(_DWORD *)v14 - 2;
      }
      goto LABEL_22;
    }
    v19 = *(unsigned __int8 **)(v14 + 8);
    if ((*(_BYTE *)(v14 + 16) & 4) != 0)
    {
      v20 = *v19;
    }
    else
    {
      v21 = *(unsigned __int16 *)v19;
      if (v21 > 0xFF)
        goto LABEL_19;
      v20 = v21;
    }
    v17 = *(_QWORD *)(v12 + 8 * v20 + 42216);
  }
  else
  {
    v17 = *v13;
  }
LABEL_22:
  if (v15)
    *(_DWORD *)v14 = v15;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v14, v10);
  return v17;
}

unint64_t WebCore::jsScreenOrientation_angle(uint64_t a1, uint64_t a2)
{
  return WebCore::ScreenOrientation::angle((WebCore::ScreenOrientation *)(*(_QWORD *)(a2 + 24) - 24)) | 0xFFFE000000000000;
}

uint64_t WebCore::jsScreenOrientation_onchange(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  bmalloc::api *v12;
  void *v13;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 + 14);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 368), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 + 14) == 1)
  {
    WebCore::ScreenOrientation::~ScreenOrientation((WebCore *)((char *)v5 - 24), v9);
    bmalloc::api::isoDeallocate(v12, v13);
  }
  else
  {
    --*((_DWORD *)v5 + 14);
  }
  return v10;
}

BOOL WebCore::setJSScreenOrientation_onchange(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  bmalloc::api *v17;
  void *v18;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSScreenOrientation::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSScreenOrientation::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 + 14);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 368), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 + 14) == 1)
      {
        WebCore::ScreenOrientation::~ScreenOrientation((WebCore::EventTarget *)((char *)v11 - 24), v15);
        bmalloc::api::isoDeallocate(v17, v18);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 + 14);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::JSScreenOrientationOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v6 = *(_QWORD *)(v5 - 16);
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7 || *(_BYTE *)(v7 + 180))
    return 0;
  if (*(_QWORD *)(v5 - 8)
    || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 - 24) + 64))(v5 - 24), (_DWORD)result))
  {
    if (a5)
    {
      *a5 = "ActiveDOMObject with pending activity";
      a5[1] = 38;
    }
    return 1;
  }
  return result;
}

void WebCore::JSScreenOrientationOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  WebCore::ScreenOrientation *v4;
  int v5;
  uint64_t v6;
  bmalloc::api *v7;
  void *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  WebCore::ScreenOrientation *v17;
  int v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v29;

  v3 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v4 = (WebCore::ScreenOrientation *)(v3 - 24);
  v5 = *(_DWORD *)(v3 + 56);
  *(_DWORD *)(v3 + 56) = v5 + 1;
  if (*(_DWORD *)(a3 + 48))
  {
    v11 = *(_QWORD *)(a3 + 32);
    v9 = (uint64_t *)(a3 + 32);
    v10 = v11;
    if (v11)
    {
      v12 = *(_DWORD *)(v10 - 8);
      v13 = ((unint64_t)v4 + ~((_QWORD)v4 << 32)) ^ (((unint64_t)v4 + ~((_QWORD)v4 << 32)) >> 22);
      v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
      v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
      v16 = v12 & ((v15 >> 31) ^ v15);
      v17 = *(WebCore::ScreenOrientation **)(v10 + 16 * v16);
      if (v17 != v4)
      {
        v18 = 1;
        while (v17)
        {
          v16 = ((_DWORD)v16 + v18) & v12;
          v17 = *(WebCore::ScreenOrientation **)(v10 + 16 * v16);
          ++v18;
          if (v17 == v4)
            goto LABEL_12;
        }
        v16 = *(unsigned int *)(v10 - 4);
      }
LABEL_12:
      if (v16 != *(_DWORD *)(v10 - 4))
      {
        v19 = (_QWORD *)(v10 + 16 * v16);
        *v19 = -1;
        v22 = v19[1];
        v21 = v19 + 1;
        v20 = v22;
        if (v22)
        {
          *(_QWORD *)(v20 + 8) = 3;
          *v21 = 0;
        }
        ++*(_DWORD *)(*v9 - 16);
        v23 = *v9;
        if (*v9)
          v24 = *(_DWORD *)(v23 - 12) - 1;
        else
          v24 = -1;
        *(_DWORD *)(v23 - 12) = v24;
        v25 = *v9;
        if (*v9)
        {
          v26 = 6 * *(_DWORD *)(v25 - 12);
          v27 = *(_DWORD *)(v25 - 4);
          if (v26 < v27 && v27 >= 9)
          {
            v29 = v3;
            WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v9, v27 >> 1, 0);
            v3 = v29;
          }
        }
      }
    }
    v5 = *(_DWORD *)(v3 + 56) - 1;
  }
  else
  {
    v6 = *(_QWORD *)(v3 + 8);
    if (v6)
    {
      *(_QWORD *)(v6 + 8) = 3;
      *(_QWORD *)(v3 + 8) = 0;
    }
  }
  if (v5)
  {
    *(_DWORD *)(v3 + 56) = v5;
  }
  else
  {
    WebCore::ScreenOrientation::~ScreenOrientation(v4, a2);
    bmalloc::api::isoDeallocate(v7, v8);
  }
}

unint64_t WebCore::wrap<WebCore::ScreenOrientation>(int a1, JSC::VM *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t SlowCase;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char **v14;
  int v15;
  unint64_t v16;
  WebCore::JSEventTarget *v17;
  JSC::JSCell *v18;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v20;
  JSC::Structure *v21;
  JSC::JSCell *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  WTF *v39;
  void *v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *Allocator;
  uint64_t v46;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  unsigned int v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  unint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  WTF *v62;

  v5 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v5 + 48))
  {
    v51 = *(_QWORD *)(v5 + 32);
    if (!v51)
      goto LABEL_5;
    v52 = *(_DWORD *)(v51 - 8);
    v53 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v54 = 9 * ((v53 + ~(v53 << 13)) ^ ((v53 + ~(v53 << 13)) >> 8));
    v55 = (v54 ^ (v54 >> 15)) + ~((v54 ^ (v54 >> 15)) << 27);
    v56 = v52 & ((v55 >> 31) ^ v55);
    v57 = *(_QWORD *)(v51 + 16 * v56);
    if (v57 != a3)
    {
      v58 = 1;
      while (v57)
      {
        v56 = ((_DWORD)v56 + v58) & v52;
        v57 = *(_QWORD *)(v51 + 16 * v56);
        ++v58;
        if (v57 == a3)
          goto LABEL_66;
      }
      goto LABEL_5;
    }
LABEL_66:
    v6 = *(_QWORD *)(v51 + 16 * v56 + 8);
    if (!v6)
      goto LABEL_5;
  }
  else
  {
    v6 = *(_QWORD *)(a3 + 32);
    if (!v6)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v6 + 8) & 3) == 0)
  {
    SlowCase = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
      return SlowCase;
  }
LABEL_5:
  ++*(_DWORD *)(a3 + 80);
  if (*(uint64_t (***)(WebCore::ContextDestructionObserver *__hidden))a3 != &off_1E34028C0)
  {
    __break(0xC471u);
    JUMPOUT(0x194F61A54);
  }
  v8 = *((_QWORD *)a2 + 412);
  if (v8)
  {
    v9 = *(_DWORD *)(v8 - 8);
    v10 = ((unint64_t)&WebCore::JSScreenOrientation::s_info
         + ~((_QWORD)&WebCore::JSScreenOrientation::s_info << 32)) ^ (((unint64_t)&WebCore::JSScreenOrientation::s_info
                                                                     + ~((_QWORD)&WebCore::JSScreenOrientation::s_info << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = *(char ***)(v8 + 16 * v13);
    if (v14 == &WebCore::JSScreenOrientation::s_info)
    {
LABEL_11:
      v16 = *(_QWORD *)(v8 + 16 * v13 + 8);
      if (v16)
        goto LABEL_13;
    }
    else
    {
      v15 = 1;
      while (v14)
      {
        v13 = ((_DWORD)v13 + v15) & v9;
        v14 = *(char ***)(v8 + 16 * v13);
        ++v15;
        if (v14 == &WebCore::JSScreenOrientation::s_info)
          goto LABEL_11;
      }
    }
  }
  v17 = (WebCore::JSEventTarget *)*((_QWORD *)a2 + 7);
  v18 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(v17, a2, (WebCore::JSDOMGlobalObject *)a3);
  Structure = WebCore::JSScreenOrientationPrototype::createStructure((uint64_t *)v17, (uint64_t)a2, v18);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v22 = (JSC::JSCell *)WebCore::JSScreenOrientationPrototype::create(v17, Structure, v20, v21);
  v23 = WebCore::JSScreenOrientation::createStructure((uint64_t *)v17, (uint64_t)a2, v22);
  v16 = WebCore::cacheDOMStructure((JSCell *)a2, v23, (uint64_t)&WebCore::JSScreenOrientation::s_info);
LABEL_13:
  v24 = *((_QWORD *)a2 + 7);
  v25 = *(_QWORD *)(v24 + 41456);
  v26 = *(_QWORD *)(v25 + 23536);
  v27 = *(_QWORD **)(v26 + 6024);
  if (v27)
    goto LABEL_36;
  v28 = *(_QWORD *)(v25 + 22648);
  if (__ldaxr((unsigned __int8 *)v28))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v28))
  {
    goto LABEL_18;
  }
  MEMORY[0x19AEA534C](v28);
LABEL_18:
  v30 = *(_QWORD *)(v28 + 2824);
  v60 = *(_QWORD *)(v30 + 6024);
  if (!v60)
  {
    v31 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v62, "IsoSpace T");
    v61 = 0;
    MEMORY[0x19AEA3204](v31, &v62, v24 + 192, v24 + 1872, 32, 8, &v61);
    v33 = (uint64_t)v61;
    v61 = 0;
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    v34 = v62;
    v62 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 1)
        WTF::fastFree(v34, v32);
      else
        --*(_DWORD *)v34;
    }
    v60 = v31;
    v35 = *(_QWORD *)(v30 + 6024);
    *(_QWORD *)(v30 + 6024) = v31;
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
    v36 = *(unsigned int *)(v28 + 2844);
    if ((_DWORD)v36 == *(_DWORD *)(v28 + 2840))
    {
      v37 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v28 + 2832, v36 + 1, (unint64_t)&v60);
      v36 = *(unsigned int *)(v28 + 2844);
      *(_QWORD *)(*(_QWORD *)(v28 + 2832) + 8 * v36) = *v37;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v28 + 2832) + 8 * v36) = v31;
    }
    *(_DWORD *)(v28 + 2844) = v36 + 1;
  }
  v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v38 = *(_QWORD *)(v26 + 6024);
  *(_QWORD *)(v26 + 6024) = v27;
  if (v38)
  {
    v39 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v39, v40);
  }
  v41 = __ldxr((unsigned __int8 *)v28);
  if (v41 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, (unsigned __int8 *)v28))
LABEL_35:
    WTF::Lock::unlockSlow((WTF::Lock *)v28);
LABEL_36:
  SlowCase = v27[3];
  if (SlowCase < v27[4])
  {
LABEL_37:
    v27[3] = SlowCase + 32;
    goto LABEL_38;
  }
  SlowCase = v27[5];
  if ((SlowCase & 1) == 0)
  {
    v59 = *(_QWORD *)(SlowCase + 8) ^ v27[6];
    v27[4] = SlowCase + HIDWORD(v59);
    v27[5] = SlowCase + (int)v59;
    goto LABEL_37;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_38:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v16);
  *(_QWORD *)(SlowCase + 24) = a3 + 24;
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v42 = *((_QWORD *)a2 + 415);
  if ((byte_1EE336980 & 1) == 0)
  {
    qword_1EE336978 = (uint64_t)&off_1E3307B70;
    byte_1EE336980 = 1;
  }
  if (!*(_DWORD *)(v42 + 48))
  {
    if ((SlowCase & 8) != 0)
      v43 = (SlowCase - 112) | 1;
    else
      v43 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v43 & 1) != 0)
      v44 = v43 + 47;
    else
      v44 = *(_QWORD *)v43 + 32;
    Allocator = *(_QWORD **)(v44 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v44 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &qword_1EE336978;
    Allocator[2] = v42;
    v46 = *(_QWORD *)(a3 + 32);
    *(_QWORD *)(a3 + 32) = Allocator;
    if (!v46)
      return SlowCase;
LABEL_60:
    *(_QWORD *)(v46 + 8) = 3;
    return SlowCase;
  }
  v62 = (WTF *)a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  v50 = *(_QWORD **)(v49 + 16);
  if (!v50)
    v50 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *v50;
  *v50 = SlowCase;
  v50[1] = &qword_1EE336978;
  v50[2] = v42;
  v61 = v50;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v42 + 32), (uint64_t *)&v62, (uint64_t *)&v61);
  v46 = (uint64_t)v61;
  if (v61)
    goto LABEL_60;
  return SlowCase;
}

uint64_t WebCore::JSScriptProcessorNode::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSAudioNode::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSAudioNode::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSAudioNode::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSScriptProcessorNodePrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSScriptProcessorNodePrototype::create(WebCore::JSScriptProcessorNodePrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(this, (uint64_t)&WebCore::JSScriptProcessorNode::s_info, &WebCore::JSScriptProcessorNodePrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSScriptProcessorNode>,(WebCore::DOMConstructorID)264>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2112);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSAudioNode>,(WebCore::DOMConstructorID)237>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v34);
    v5[2] = SlowCase + (int)v34;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSScriptProcessorNode>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v35 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v35);
    v10[2848] = v2 + (int)v35;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSScriptProcessorNode::s_info
         + ~((_QWORD)&WebCore::JSScriptProcessorNode::s_info << 32)) ^ (((unint64_t)&WebCore::JSScriptProcessorNode::s_info
                                                                       + ~((_QWORD)&WebCore::JSScriptProcessorNode::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSScriptProcessorNode::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSScriptProcessorNode::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSAudioNode::prototype((WebCore::JSAudioNode *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSScriptProcessorNodePrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v30 = (JSC::JSCell *)WebCore::JSScriptProcessorNodePrototype::create((WebCore::JSScriptProcessorNodePrototype *)a1, (JSC::VM *)a2, Structure, v29);
  v31 = WebCore::JSScriptProcessorNode::createStructure((uint64_t *)a1, a2, v30);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v31, (uint64_t)&WebCore::JSScriptProcessorNode::s_info);
LABEL_22:
  v32 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v32, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2112) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsScriptProcessorNodeConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSScriptProcessorNodePrototype::s_info != (char **)(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                     + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSScriptProcessorNode>,(WebCore::DOMConstructorID)264>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsScriptProcessorNode_onaudioprocess(uint64_t a1, uint64_t a2)
{
  WebCore::AudioNode *v3;
  WebCore *v4;
  WebCore::DOMWrapperWorld *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(WebCore::AudioNode **)(a2 + 24);
  v4 = WebCore::AudioNode::ref(v3);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(v4);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v9 = WebCore::eventHandlerAttribute(v3, (WebCore::EventTarget *)(v8 + 160), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), v5);
  WebCore::AudioNode::deref(v3);
  return v9;
}

uint64_t WebCore::setJSScriptProcessorNode_onaudioprocess(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::AudioNode *v11;
  WebCore *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = *(_QWORD *)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSScriptProcessorNode::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSScriptProcessorNode::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(WebCore::AudioNode **)(a2 + 24);
  v12 = WebCore::AudioNode::ref(v11);
  v13 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v13 || (v14 = *(_QWORD *)(v13 + 96)) == 0)
    v14 = WebCore::threadGlobalDataSlow(v12);
  v15 = *(_QWORD *)(v14 + 40);
  if (!v15)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v14);
    v15 = *(_QWORD *)(v14 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v15 + 160), a3, (_DWORD *)a2);
  if (v11)
    WebCore::AudioNode::deref(v11);
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

unint64_t WebCore::jsScriptProcessorNode_bufferSize(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(*(_QWORD *)(a2 + 24) + 232) | 0xFFFE000000000000;
}

uint64_t WebCore::JSScriptProcessorNode::subspaceForImpl(WebCore::JSScriptProcessorNode *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  WTF *v17;
  void *v18;
  int v19;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 2136);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  v21 = *(_QWORD *)(v8 + 2136);
  if (!v21)
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v23, "IsoSpace T");
    v22 = 0;
    MEMORY[0x19AEA3204](v9, &v23, (char *)this + 192, (char *)this + 1872, 32, 8, &v22);
    v11 = v22;
    v22 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v23;
    v23 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v21 = v9;
    v13 = *(_QWORD *)(v8 + 2136);
    *(_QWORD *)(v8 + 2136) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = *(unsigned int *)(v6 + 2844);
    if ((_DWORD)v14 == *(_DWORD *)(v6 + 2840))
    {
      v15 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v6 + 2832, v14 + 1, (unint64_t)&v21);
      v14 = *(unsigned int *)(v6 + 2844);
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = *v15;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = v9;
    }
    *(_DWORD *)(v6 + 2844) = v14 + 1;
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v16 = *(_QWORD *)(v3 + 2136);
  *(_QWORD *)(v3 + 2136) = v4;
  if (v16)
  {
    v17 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v17, v18);
  }
  v19 = __ldxr((unsigned __int8 *)v6);
  if (v19 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSScriptProcessorNodeOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(_QWORD **)(*(_QWORD *)a2 + 24);
  v6 = v5[20];
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7 || *(_BYTE *)(v7 + 180))
    return 0;
  if (v5[21] || (result = (*(uint64_t (**)(_QWORD *))(v5[19] + 64))(v5 + 19), (_DWORD)result))
  {
    if (a5)
    {
      *a5 = "ActiveDOMObject with pending activity";
      a5[1] = 38;
    }
    return 1;
  }
  return result;
}

WTF::Thread *WebCore::JSScriptProcessorNodeOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WebCore::AudioNode *v4;
  WTF::Thread *result;
  char *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  WebCore::AudioNode *v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;

  v4 = *(WebCore::AudioNode **)(*(_QWORD *)a2 + 24);
  result = WebCore::AudioNode::ref(v4);
  v6 = (char *)v4 + 8;
  if (!v4)
    v6 = 0;
  if (*(_DWORD *)(a3 + 48))
  {
    v9 = *(_QWORD *)(a3 + 32);
    v8 = (uint64_t *)(a3 + 32);
    v7 = v9;
    if (v9)
    {
      v10 = *(_DWORD *)(v7 - 8);
      v11 = ((unint64_t)v4 + ~((_QWORD)v4 << 32)) ^ (((unint64_t)v4 + ~((_QWORD)v4 << 32)) >> 22);
      v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
      v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
      v14 = v10 & ((v13 >> 31) ^ v13);
      v15 = *(WebCore::AudioNode **)(v7 + 16 * v14);
      if (v15 != v4)
      {
        v16 = 1;
        while (v15)
        {
          v14 = ((_DWORD)v14 + v16) & v10;
          v15 = *(WebCore::AudioNode **)(v7 + 16 * v14);
          ++v16;
          if (v15 == v4)
            goto LABEL_14;
        }
        v14 = *(unsigned int *)(v7 - 4);
      }
LABEL_14:
      if (v14 != *(_DWORD *)(v7 - 4))
      {
        v17 = (_QWORD *)(v7 + 16 * v14);
        *v17 = -1;
        v20 = v17[1];
        v19 = v17 + 1;
        v18 = v20;
        if (v20)
        {
          *(_QWORD *)(v18 + 8) = 3;
          *v19 = 0;
        }
        ++*(_DWORD *)(*v8 - 16);
        v21 = *v8;
        if (*v8)
          v22 = *(_DWORD *)(v21 - 12) - 1;
        else
          v22 = -1;
        *(_DWORD *)(v21 - 12) = v22;
        v23 = *v8;
        if (*v8)
        {
          v24 = 6 * *(_DWORD *)(v23 - 12);
          v25 = *(_DWORD *)(v23 - 4);
          if (v24 < v25 && v25 >= 9)
            result = (WTF::Thread *)WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v8, v25 >> 1, 0);
        }
      }
    }
  }
  else if (*(_QWORD *)v6)
  {
    *(_QWORD *)(*(_QWORD *)v6 + 8) = 3;
    *(_QWORD *)v6 = 0;
  }
  if (v4)
    return WebCore::AudioNode::deref(v4);
  return result;
}

uint64_t WebCore::wrap<WebCore::ScriptProcessorNode>(int a1, JSC::VM *a2, uint64_t this)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::JSDOMGlobalObject *v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char **v15;
  int v16;
  unint64_t v17;
  WebCore::JSAudioNode *v18;
  JSC::JSCell *v19;
  unint64_t Structure;
  JSC::Structure *v21;
  JSC::JSCell *v22;
  uint64_t v23;
  WebCore::AudioNode *v24;
  uint64_t result;
  uint64_t v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  WebCore::AudioNode *v32;
  int v33;
  WebCore::AudioNode *v34;

  v5 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v5 + 48))
  {
    v26 = *(_QWORD *)(v5 + 32);
    if (!v26)
      goto LABEL_5;
    v27 = *(_DWORD *)(v26 - 8);
    v28 = (~(this << 32) + this) ^ ((unint64_t)(~(this << 32) + this) >> 22);
    v29 = 9 * ((v28 + ~(v28 << 13)) ^ ((v28 + ~(v28 << 13)) >> 8));
    v30 = (v29 ^ (v29 >> 15)) + ~((v29 ^ (v29 >> 15)) << 27);
    v31 = v27 & ((v30 >> 31) ^ v30);
    v32 = *(WebCore::AudioNode **)(v26 + 16 * v31);
    if (v32 != (WebCore::AudioNode *)this)
    {
      v33 = 1;
      while (v32)
      {
        v31 = ((_DWORD)v31 + v33) & v27;
        v32 = *(WebCore::AudioNode **)(v26 + 16 * v31);
        ++v33;
        if (v32 == (WebCore::AudioNode *)this)
          goto LABEL_21;
      }
      goto LABEL_5;
    }
LABEL_21:
    v6 = *(_QWORD *)(v26 + 16 * v31 + 8);
    if (!v6)
      goto LABEL_5;
  }
  else
  {
    v6 = *(_QWORD *)(this + 8);
    if (!v6)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v6 + 8) & 3) == 0)
  {
    v7 = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
      return v7;
  }
LABEL_5:
  WebCore::AudioNode::ref((WebCore::AudioNode *)this);
  v34 = (WebCore::AudioNode *)this;
  if (*(uint64_t (***)(WebCore::AudioNode *__hidden))this == off_1E336B9F8)
  {
    v9 = *((_QWORD *)a2 + 412);
    if (v9)
    {
      v10 = *(_DWORD *)(v9 - 8);
      v11 = ((unint64_t)&WebCore::JSScriptProcessorNode::s_info
           + ~((_QWORD)&WebCore::JSScriptProcessorNode::s_info << 32)) ^ (((unint64_t)&WebCore::JSScriptProcessorNode::s_info
                                                                         + ~((_QWORD)&WebCore::JSScriptProcessorNode::s_info << 32)) >> 22);
      v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
      v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
      v14 = v10 & ((v13 >> 31) ^ v13);
      v15 = *(char ***)(v9 + 16 * v14);
      if (v15 == &WebCore::JSScriptProcessorNode::s_info)
      {
LABEL_11:
        v17 = *(_QWORD *)(v9 + 16 * v14 + 8);
        if (v17)
          goto LABEL_13;
      }
      else
      {
        v16 = 1;
        while (v15)
        {
          v14 = ((_DWORD)v14 + v16) & v10;
          v15 = *(char ***)(v9 + 16 * v14);
          ++v16;
          if (v15 == &WebCore::JSScriptProcessorNode::s_info)
            goto LABEL_11;
        }
      }
    }
    v18 = (WebCore::JSAudioNode *)*((_QWORD *)a2 + 7);
    v19 = (JSC::JSCell *)WebCore::JSAudioNode::prototype(v18, a2, v8);
    Structure = WebCore::JSScriptProcessorNodePrototype::createStructure((uint64_t *)v18, (uint64_t)a2, v19);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v22 = (JSC::JSCell *)WebCore::JSScriptProcessorNodePrototype::create(v18, a2, Structure, v21);
    v23 = WebCore::JSScriptProcessorNode::createStructure((uint64_t *)v18, (uint64_t)a2, v22);
    v17 = WebCore::cacheDOMStructure((JSCell *)a2, v23, (uint64_t)&WebCore::JSScriptProcessorNode::s_info);
LABEL_13:
    v7 = WebCore::JSScriptProcessorNode::create(v17, a2, (uint64_t *)&v34);
    WebCore::cacheWrapper<WebCore::ScriptProcessorNode,WebCore::JSScriptProcessorNode>(*((_QWORD *)a2 + 415), this, v7);
    v24 = v34;
    v34 = 0;
    if (v24)
      WebCore::AudioNode::deref(v24);
    return v7;
  }
  result = 271;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::parseEnumeration<WebCore::ScrollAxis>(JSC::JSGlobalObject *a1, unint64_t this)
{
  JSC::JSGlobalObject *v3;
  uint64_t v4;
  const char *v5;
  int v6;
  unint64_t v7;
  int v9;
  int v10;
  char **v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  BOOL v19;
  int v20;
  int v21;
  uint64_t v23;
  unint64_t v24;

  v3 = a1;
  v24 = this;
  if ((this & 0xFFFE000000000002) == 0 && *(_BYTE *)(this + 5) == 2)
  {
    v4 = *(_QWORD *)(this + 8);
    if ((v4 & 1) != 0)
    {
      v4 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, v3);
      if (!v4)
      {
LABEL_6:
        if (v4)
          goto LABEL_7;
LABEL_34:
        v10 = 0;
        v9 = 0;
        return v10 | (v9 << 8);
      }
    }
    else if (!v4)
    {
      goto LABEL_6;
    }
    *(_DWORD *)v4 += 2;
    goto LABEL_6;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v24, a1);
  v4 = v23;
  if (!v23)
    goto LABEL_34;
LABEL_7:
  v5 = *(const char **)(v4 + 8);
  v6 = *(_DWORD *)(v4 + 4);
  v7 = ((unint64_t)*(unsigned int *)(v4 + 16) >> 2) & 1;
  if (v5 != "block" && v6 == 5)
  {
    if ((_DWORD)v7)
    {
      if (*v5 != 98 || *(_WORD *)(v5 + 1) != 28524 || *(_WORD *)(v5 + 3) != 27491)
        goto LABEL_16;
    }
    else if (*(_WORD *)v5 != 98 || *(_QWORD *)(v5 + 2) != 0x6B0063006F006CLL)
    {
      goto LABEL_16;
    }
    goto LABEL_37;
  }
  if (v5 == "block" && v6 == 5)
  {
LABEL_37:
    v13 = &WebCore::parseEnumerationFromString<WebCore::ScrollAxis>(WTF::String const&)::mappings;
    goto LABEL_38;
  }
  if (v5 != "inline" && v6 == 6)
  {
    if ((_DWORD)v7)
    {
      if (*v5 != 105 || *(_DWORD *)(v5 + 1) != 1852402798 || *(_DWORD *)(v5 + 2) != 1701734764)
        goto LABEL_16;
    }
    else
    {
      if (*(_WORD *)v5 != 105)
        goto LABEL_16;
      v15 = *(_QWORD *)(v5 + 2);
      v16 = *(_QWORD *)(v5 + 4);
      if (v15 != 0x6E0069006C006ELL || v16 != 0x65006E0069006CLL)
        goto LABEL_16;
    }
  }
  else if (v5 != "inline" || v6 != 6)
  {
    v18 = v7 << 32;
    v19 = v6 != 1;
    if (v5 == "x" || v6 != 1)
    {
      v20 = *(_DWORD *)(v4 + 4);
      if (v5 == "x" && v6 == 1)
        goto LABEL_56;
    }
    else if ((_DWORD)v7)
    {
      if (*v5 == 120)
      {
LABEL_56:
        v13 = &off_1E3301A50;
        goto LABEL_38;
      }
      v19 = 0;
      v20 = 6;
      v18 = 0x100000000;
    }
    else
    {
      if (*(_WORD *)v5 == 120)
        goto LABEL_56;
      v19 = 0;
      v20 = 6;
    }
    if (v5 == "y" || v19)
    {
      if (v6 == 1 && v5 == "y")
        goto LABEL_64;
    }
    else if (!v20
           || ((v18 & 0x100000000) == 0 ? (v21 = *(unsigned __int16 *)v5) : (v21 = *(unsigned __int8 *)v5), v21 == 121))
    {
LABEL_64:
      v13 = &off_1E3301A68;
      goto LABEL_38;
    }
LABEL_16:
    v9 = 0;
    v10 = 0;
    goto LABEL_39;
  }
  v13 = &off_1E3301A38;
LABEL_38:
  v10 = *((unsigned __int8 *)v13 + 16);
  v9 = 1;
LABEL_39:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, v3);
  else
    *(_DWORD *)v4 -= 2;
  return v10 | (v9 << 8);
}

uint64_t WebCore::parseEnumeration<WebCore::ScrollBehavior>(JSC::JSGlobalObject *a1, unint64_t this)
{
  WTF::StringImpl *v2;
  uint64_t v3;
  unint64_t v4;
  char **v5;
  int v6;
  int v7;
  WTF::StringImpl *v9;
  unint64_t v10;

  v10 = this;
  if ((this & 0xFFFE000000000002) != 0 || *(_BYTE *)(this + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v10, a1);
    v2 = v9;
  }
  else
  {
    v2 = *(WTF::StringImpl **)(this + 8);
    if ((v2 & 1) != 0)
      v2 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, a1);
    if (v2)
      *(_DWORD *)v2 += 2;
    v9 = v2;
  }
  if (v2)
  {
    v3 = *((_QWORD *)v2 + 1);
    v4 = *((unsigned int *)v2 + 1) | ((unint64_t)((*((_DWORD *)v2 + 4) >> 2) & 1) << 32);
  }
  else
  {
    v3 = 0;
    v4 = 0x100000000;
  }
  if ((char *)v3 == "auto" || v4 != 4)
  {
    if ((char *)v3 == "auto" && v4 == 4)
      goto LABEL_16;
    if ((char *)v3 == "instant" || v4 != 7)
    {
      if ((char *)v3 != "instant" || v4 != 7)
        goto LABEL_37;
    }
    else if ((v4 & 0x100000000) != 0)
    {
      if (*(_BYTE *)v3 != 105 || *(_DWORD *)(v3 + 1) != 1635021678 || *(_DWORD *)(v3 + 3) != 1953390964)
        goto LABEL_37;
    }
    else if (*(_WORD *)v3 != 105
           || *(_QWORD *)(v3 + 2) != 0x6100740073006ELL
           || *(_QWORD *)(v3 + 6) != 0x74006E00610074)
    {
      goto LABEL_37;
    }
    v5 = &off_1E3301A98;
    goto LABEL_17;
  }
  if ((v4 & 0x100000000) != 0)
  {
    if (*(_BYTE *)v3 == 97 && *(_WORD *)(v3 + 1) == 29813 && *(_WORD *)(v3 + 2) == 28532)
    {
LABEL_16:
      v5 = &WebCore::parseEnumerationFromString<WebCore::ScrollBehavior>(WTF::String const&)::mappings;
LABEL_17:
      v6 = *((unsigned __int8 *)v5 + 16);
      v7 = 1;
      goto LABEL_18;
    }
  }
  else if (*(_WORD *)v3 == 97 && *(_DWORD *)(v3 + 2) == 7602293 && *(_DWORD *)(v3 + 4) == 7274612)
  {
    goto LABEL_16;
  }
LABEL_37:
  if (WTF::operator==((unsigned __int8 *)v3, v4, "smooth", 7))
  {
    v5 = &off_1E3301AB0;
    goto LABEL_17;
  }
  v7 = 0;
  v6 = 0;
LABEL_18:
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, (WTF::StringImpl *)v4);
    else
      *(_DWORD *)v9 -= 2;
  }
  return v6 | (v7 << 8);
}

unint64_t WebCore::convertDictionary<WebCore::ScrollIntoViewOptions>@<X0>(JSC::JSCell *this@<X1>, unint64_t result@<X0>, uint64_t a3@<X8>)
{
  JSC::VM *v4;
  unsigned __int16 v5;
  unsigned __int16 v6;
  JSC::JSGlobalObject *v7;
  uint64_t Object;
  JSC::Structure *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  unint64_t v17;
  unsigned __int16 v18;
  JSC::VM *v19;
  int v20;
  WTF::StringImpl *v21;

  v4 = *(JSC::VM **)(result + 56);
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) != 2)
  {
    v7 = (JSC::JSGlobalObject *)result;
    if (((unint64_t)this & 0xFFFE000000000002) == 0)
    {
      Object = JSC::JSCell::getObject(this);
      if (Object)
      {
        v9 = (JSC::Structure *)Object;
        WTF::AtomStringImpl::addLiteral();
        v11 = JSC::JSObject::get(v9, v7, (unint64_t)v21);
        if (v21)
        {
          if (*(_DWORD *)v21 == 2)
            WTF::StringImpl::destroy(v21, v10);
          else
            *(_DWORD *)v21 -= 2;
        }
        if (*((_DWORD *)v4 + 20))
        {
          result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
          if ((result & 1) != 0)
            goto LABEL_35;
        }
        if (v11 == 10)
        {
          LOBYTE(v6) = 0;
        }
        else
        {
          v12 = (WTF::StringImpl *)*((_QWORD *)v7 + 7);
          v21 = v12;
          v6 = WebCore::parseEnumeration<WebCore::ScrollBehavior>(v7, v11);
          if (*((_DWORD *)v12 + 20))
          {
            result = JSC::VM::hasExceptionsAfterHandlingTraps(v12);
            if ((result & 1) != 0)
              goto LABEL_35;
          }
          if (v6 <= 0xFFu)
            goto LABEL_34;
        }
        WTF::AtomStringImpl::addLiteral();
        v14 = JSC::JSObject::get(v9, v7, (unint64_t)v21);
        if (v21)
        {
          if (*(_DWORD *)v21 == 2)
            WTF::StringImpl::destroy(v21, v13);
          else
            *(_DWORD *)v21 -= 2;
        }
        if (*((_DWORD *)v4 + 20))
        {
          result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
          if ((result & 1) != 0)
            goto LABEL_35;
        }
        if (v14 == 10)
        {
          LOBYTE(v5) = 0;
        }
        else
        {
          v15 = (WTF::StringImpl *)*((_QWORD *)v7 + 7);
          v21 = v15;
          v5 = WebCore::parseEnumeration<WebCore::ScrollLogicalPosition>(v7, v14);
          if (*((_DWORD *)v15 + 20))
          {
            result = JSC::VM::hasExceptionsAfterHandlingTraps(v15);
            if ((result & 1) != 0)
              goto LABEL_35;
          }
          if (v5 <= 0xFFu)
            goto LABEL_34;
        }
        WTF::AtomStringImpl::addLiteral();
        result = JSC::JSObject::get(v9, v7, (unint64_t)v21);
        v17 = result;
        if (v21)
        {
          if (*(_DWORD *)v21 == 2)
            result = WTF::StringImpl::destroy(v21, v16);
          else
            *(_DWORD *)v21 -= 2;
        }
        if (*((_DWORD *)v4 + 20))
        {
          result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
          if ((result & 1) != 0)
            goto LABEL_35;
        }
        if (v17 == 10)
          goto LABEL_26;
        v19 = (JSC::VM *)*((_QWORD *)v7 + 7);
        result = WebCore::parseEnumeration<WebCore::ScrollLogicalPosition>(v7, v17);
        v18 = result;
        if (*((_DWORD *)v19 + 20))
        {
          result = JSC::VM::hasExceptionsAfterHandlingTraps(v19);
          if ((result & 1) != 0)
          {
LABEL_35:
            v20 = 1;
            goto LABEL_30;
          }
        }
        if (v18 > 0xFFu)
          goto LABEL_29;
      }
    }
LABEL_34:
    result = JSC::throwTypeError();
    goto LABEL_35;
  }
  LOBYTE(v5) = 0;
  LOBYTE(v6) = 0;
LABEL_26:
  LOBYTE(v18) = 3;
LABEL_29:
  v20 = 0;
  *(_WORD *)(a3 + 4) = v6 | 0x100;
  *(_WORD *)(a3 + 6) = v5 | 0x100;
  *(_WORD *)(a3 + 8) = v18 | 0x100;
LABEL_30:
  *(_DWORD *)(a3 + 12) = v20;
  return result;
}

uint64_t WebCore::parseEnumeration<WebCore::ScrollLogicalPosition>(JSC::JSGlobalObject *a1, unint64_t this)
{
  JSC::JSGlobalObject *v3;
  uint64_t v4;
  int v5;
  const char *v6;
  int v7;
  int v9;
  int v10;
  char **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v19;
  unint64_t v20;

  v3 = a1;
  v20 = this;
  if ((this & 0xFFFE000000000002) == 0 && *(_BYTE *)(this + 5) == 2)
  {
    v4 = *(_QWORD *)(this + 8);
    if ((v4 & 1) != 0)
    {
      v4 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, v3);
      if (!v4)
      {
LABEL_6:
        if (v4)
          goto LABEL_7;
LABEL_33:
        v10 = 0;
        v9 = 0;
        return v10 | (v9 << 8);
      }
    }
    else if (!v4)
    {
      goto LABEL_6;
    }
    *(_DWORD *)v4 += 2;
    goto LABEL_6;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v20, a1);
  v4 = v19;
  if (!v19)
    goto LABEL_33;
LABEL_7:
  v5 = *(_DWORD *)(v4 + 16);
  v6 = *(const char **)(v4 + 8);
  v7 = *(_DWORD *)(v4 + 4);
  if (v6 != "center" && v7 == 6)
  {
    if ((v5 & 4) != 0)
    {
      if (*v6 != 99 || *(_DWORD *)(v6 + 1) != 1702129253 || *(_DWORD *)(v6 + 2) != 1919251566)
        goto LABEL_16;
    }
    else
    {
      if (*(_WORD *)v6 != 99)
        goto LABEL_16;
      v14 = *(_QWORD *)(v6 + 2);
      v15 = *(_QWORD *)(v6 + 4);
      if (v14 != 0x650074006E0065 || v15 != 0x7200650074006ELL)
        goto LABEL_16;
    }
    goto LABEL_40;
  }
  if (v6 == "center" && v7 == 6)
  {
LABEL_40:
    v13 = &WebCore::parseEnumerationFromString<WebCore::ScrollLogicalPosition>(WTF::String const&)::mappings;
    goto LABEL_41;
  }
  if (v6 != "end" && v7 == 3)
  {
    if ((v5 & 4) != 0)
    {
      if (*v6 != 101 || *(_WORD *)(v6 + 1) != 25710)
        goto LABEL_16;
    }
    else if (*(_WORD *)v6 != 101 || *(_DWORD *)(v6 + 2) != 6553710)
    {
      goto LABEL_16;
    }
    goto LABEL_29;
  }
  if (v6 == "end" && v7 == 3)
  {
LABEL_29:
    v13 = &off_1E3301AE0;
LABEL_41:
    v10 = *((unsigned __int8 *)v13 + 16);
    v9 = 1;
    goto LABEL_42;
  }
  if (v6 == "nearest" || v7 != 7)
  {
    if (v6 == "nearest" && v7 == 7)
      goto LABEL_60;
    if (v6 == "start" || v7 != 5)
    {
      if (v7 != 5 || v6 != "start")
        goto LABEL_16;
    }
    else if ((v5 & 4) != 0)
    {
      if (*v6 != 115 || *(_WORD *)(v6 + 1) != 24948 || *(_WORD *)(v6 + 3) != 29810)
        goto LABEL_16;
    }
    else if (*(_WORD *)v6 != 115 || *(_QWORD *)(v6 + 2) != 0x74007200610074)
    {
      goto LABEL_16;
    }
    v13 = &off_1E3301B10;
    goto LABEL_41;
  }
  if ((v5 & 4) != 0)
  {
    if (*v6 == 110 && *(_DWORD *)(v6 + 1) == 1701994853 && *(_DWORD *)(v6 + 3) == 1953719666)
      goto LABEL_60;
LABEL_16:
    v9 = 0;
    v10 = 0;
    goto LABEL_42;
  }
  if (*(_WORD *)v6 != 110)
    goto LABEL_16;
  v9 = 0;
  if (*(_QWORD *)(v6 + 2) == 0x65007200610065)
  {
    v10 = 0;
    if (*(_QWORD *)(v6 + 6) == 0x74007300650072)
    {
LABEL_60:
      v13 = &off_1E3301AF8;
      goto LABEL_41;
    }
  }
  else
  {
    v10 = 0;
  }
LABEL_42:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, v3);
  else
    *(_DWORD *)v4 -= 2;
  return v10 | (v9 << 8);
}

unint64_t WebCore::JSDOMConstructor<WebCore::JSScrollTimeline>::construct(WTF **a1, uint64_t a2)
{
  JSC::VM *v4;
  uint64_t v5;
  JSC::JSCell *v6;
  unsigned __int16 v7;
  uint64_t v8;
  uint64_t Object;
  JSC::Structure *v10;
  WTF::StringImpl *v11;
  unint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  uint64_t v17;
  JSC::VM *v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char **v25;
  int v26;
  unint64_t v27;
  WebCore::JSAnimationTimeline *v28;
  JSC::JSCell *v29;
  unint64_t Structure;
  JSC::Structure *v31;
  JSC::JSCell *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  WTF *v44;
  uint64_t v45;
  uint64_t v46;
  WTF *v47;
  void *v48;
  int v49;
  unint64_t SlowCase;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  WTF *Allocator;
  JSC::JSCell *v55;
  JSC::JSGlobalObject *v56;
  JSC::JSObject *v57;
  JSC::JSGlobalObject *v58;
  JSC::VM *v59;
  WebCore::JSDOMGlobalObject *v60;
  JSC::Structure *v61;
  JSC::VM *FunctionRealm;
  uint64_t v63;
  unsigned int v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  char **v69;
  int v70;
  JSC::JSCell *v71;
  unint64_t v72;
  JSC::Structure *v73;
  JSC::JSCell *v74;
  uint64_t v75;
  unint64_t SubclassStructure;
  uint64_t v77;
  unint64_t v79;
  unsigned int *v80;
  unsigned int v81;
  WTF **v82;
  uint64_t v83;
  char v84;
  int v85;
  WTF *v86;
  WTF *v87;

  v4 = a1[7];
  v5 = *(_QWORD *)(a2 + 24);
  if (*(_DWORD *)(a2 + 32) == 1)
  {
    LOBYTE(v7) = 0;
    v8 = 0;
    goto LABEL_21;
  }
  v6 = *(JSC::JSCell **)(a2 + 48);
  v86 = a1[7];
  if (((unint64_t)v6 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    LOBYTE(v7) = 0;
LABEL_20:
    v8 = 0;
    goto LABEL_21;
  }
  if (((unint64_t)v6 & 0xFFFE000000000002) != 0)
    goto LABEL_90;
  Object = JSC::JSCell::getObject(v6);
  if (!Object)
    goto LABEL_90;
  v10 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  v12 = JSC::JSObject::get(v10, (JSC::JSGlobalObject *)a1, (unint64_t)v87);
  if (v87)
  {
    if (*(_DWORD *)v87 == 2)
      WTF::StringImpl::destroy(v87, v11);
    else
      *(_DWORD *)v87 -= 2;
  }
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    goto LABEL_91;
  if (v12 == 10)
  {
    LOBYTE(v7) = 0;
    goto LABEL_15;
  }
  v87 = a1[7];
  v7 = WebCore::parseEnumeration<WebCore::ScrollAxis>((JSC::JSGlobalObject *)a1, v12);
  if (*((_DWORD *)v87 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v87) & 1) != 0)
    goto LABEL_91;
  if (v7 <= 0xFFu)
  {
LABEL_90:
    JSC::throwTypeError();
LABEL_91:
    SlowCase = 0;
    v77 = 1;
    v85 = 1;
    goto LABEL_81;
  }
LABEL_15:
  WTF::AtomStringImpl::addLiteral();
  v14 = JSC::JSObject::get(v10, (JSC::JSGlobalObject *)a1, (unint64_t)v87);
  if (v87)
  {
    if (*(_DWORD *)v87 == 2)
      WTF::StringImpl::destroy(v87, v13);
    else
      *(_DWORD *)v87 -= 2;
  }
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    goto LABEL_91;
  if ((v14 | 8) == 0xA)
    goto LABEL_20;
  v87 = a1[7];
  if ((v14 & 0xFFFE000000000002) != 0)
    goto LABEL_90;
  if (*(unsigned __int8 *)(v14 + 5) != 241)
    goto LABEL_90;
  v8 = *(_QWORD *)(v14 + 24);
  if (!v8)
    goto LABEL_90;
  *(_DWORD *)(v8 + 24) += 2;
LABEL_21:
  v84 = v7;
  v85 = 0;
  v83 = 0;
  v15 = WTF::fastMalloc((WTF *)0x58);
  v17 = v15;
  *(_DWORD *)(v15 + 8) = 1;
  *(_OWORD *)(v15 + 16) = 0u;
  *(_OWORD *)(v15 + 32) = 0u;
  *(_QWORD *)(v15 + 48) = 0x7FF8000000000000;
  *(_QWORD *)v15 = off_1E3391D80;
  if (v8)
  {
    v80 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v8);
    if (v80)
    {
      do
        v81 = __ldaxr(v80);
      while (__stlxr(v81 + 1, v80));
    }
    *(_QWORD *)(v17 + 56) = v80;
    *(_BYTE *)(v17 + 64) = v7;
    *(_QWORD *)(v17 + 72) = 0;
    *(_BYTE *)(v17 + 80) = 0;
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v8);
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
  }
  else
  {
    *(_QWORD *)(v15 + 56) = 0;
    *(_BYTE *)(v15 + 64) = v7;
    *(_QWORD *)(v15 + 72) = 0;
    *(_BYTE *)(v15 + 80) = 0;
  }
  if (*(void (***)(WebCore::ScrollTimeline *__hidden))v17 != off_1E3391D80)
  {
    __break(0xC471u);
    JUMPOUT(0x194F63DE0);
  }
  v82 = a1;
  v18 = *(JSC::VM **)(v5 + 40);
  v19 = *((_QWORD *)v18 + 412);
  if (v19)
  {
    v20 = *(_DWORD *)(v19 - 8);
    v21 = ((unint64_t)&WebCore::JSScrollTimeline::s_info + ~((_QWORD)&WebCore::JSScrollTimeline::s_info << 32)) ^ (((unint64_t)&WebCore::JSScrollTimeline::s_info + ~((_QWORD)&WebCore::JSScrollTimeline::s_info << 32)) >> 22);
    v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
    v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
    v24 = v20 & ((v23 >> 31) ^ v23);
    v25 = *(char ***)(v19 + 16 * v24);
    if (v25 == &WebCore::JSScrollTimeline::s_info)
    {
LABEL_29:
      v27 = *(_QWORD *)(v19 + 16 * v24 + 8);
      if (v27)
        goto LABEL_31;
    }
    else
    {
      v26 = 1;
      while (v25)
      {
        v24 = ((_DWORD)v24 + v26) & v20;
        v25 = *(char ***)(v19 + 16 * v24);
        ++v26;
        if (v25 == &WebCore::JSScrollTimeline::s_info)
          goto LABEL_29;
      }
    }
  }
  v28 = (WebCore::JSAnimationTimeline *)*((_QWORD *)v18 + 7);
  v29 = (JSC::JSCell *)WebCore::JSAnimationTimeline::prototype(v28, *(JSC::VM **)(v5 + 40), v16);
  Structure = WebCore::JSScrollTimelinePrototype::createStructure((uint64_t *)v28, (uint64_t)v18, v29);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v32 = (JSC::JSCell *)WebCore::JSScrollTimelinePrototype::create(v28, v18, Structure, v31);
  v33 = WebCore::JSScrollTimeline::createStructure((uint64_t *)v28, (uint64_t)v18, v32);
  v27 = WebCore::cacheDOMStructure((JSCell *)v18, v33, (uint64_t)&WebCore::JSScrollTimeline::s_info);
LABEL_31:
  v34 = *((_QWORD *)v18 + 7);
  v35 = *(_QWORD *)(v34 + 41456);
  v36 = *(_QWORD *)(v35 + 23536);
  v37 = *(_QWORD **)(v36 + 2648);
  if (v37)
    goto LABEL_51;
  v38 = *(_QWORD *)(v35 + 22648);
  if (__ldaxr((unsigned __int8 *)v38))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v38))
  {
    goto LABEL_36;
  }
  MEMORY[0x19AEA534C](v38);
LABEL_36:
  v40 = *(_QWORD *)(v38 + 2824);
  if (!*(_QWORD *)(v40 + 2648))
  {
    v41 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v87, "IsoSpace T");
    v86 = 0;
    MEMORY[0x19AEA3204](v41, &v87, v34 + 192, v34 + 1872, 32, 8, &v86);
    v43 = (uint64_t)v86;
    v86 = 0;
    if (v43)
      (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
    v44 = v87;
    v87 = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 1)
        WTF::fastFree(v44, v42);
      else
        --*(_DWORD *)v44;
    }
    v45 = *(_QWORD *)(v40 + 2648);
    *(_QWORD *)(v40 + 2648) = v41;
    if (v45)
      (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
  }
  v37 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v46 = *(_QWORD *)(v36 + 2648);
  *(_QWORD *)(v36 + 2648) = v37;
  if (v46)
  {
    v47 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v47, v48);
  }
  v49 = __ldxr((unsigned __int8 *)v38);
  if (v49 != 1)
  {
    __clrex();
    goto LABEL_50;
  }
  if (__stlxr(0, (unsigned __int8 *)v38))
LABEL_50:
    WTF::Lock::unlockSlow((WTF::Lock *)v38);
LABEL_51:
  SlowCase = v37[3];
  if (SlowCase < v37[4])
  {
LABEL_52:
    v37[3] = SlowCase + 32;
    goto LABEL_53;
  }
  SlowCase = v37[5];
  if ((SlowCase & 1) == 0)
  {
    v79 = *(_QWORD *)(SlowCase + 8) ^ v37[6];
    v37[4] = SlowCase + HIDWORD(v79);
    v37[5] = SlowCase + (int)v79;
    goto LABEL_52;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_53:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v27);
  *(_QWORD *)(SlowCase + 24) = v17;
  if (*(_BYTE *)(v34 + 755))
    __dmb(0xAu);
  v51 = *((_QWORD *)v18 + 415);
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::AnimationTimeline *)::owner = (uint64_t)&unk_1E32268D0;
  }
  v87 = (WTF *)v17;
  if ((SlowCase & 8) != 0)
    v52 = (SlowCase - 112) | 1;
  else
    v52 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v52 & 1) != 0)
    v53 = v52 + 47;
  else
    v53 = *(_QWORD *)v52 + 32;
  Allocator = *(WTF **)(v53 + 16);
  if (!Allocator)
    Allocator = (WTF *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v53 + 16) = *(_QWORD *)Allocator;
  *(_QWORD *)Allocator = SlowCase;
  *((_QWORD *)Allocator + 1) = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::AnimationTimeline *)::owner;
  *((_QWORD *)Allocator + 2) = v51;
  v86 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v51 + 32), (uint64_t *)&v87, (uint64_t *)&v86);
  if (v86)
    *((_QWORD *)v86 + 1) = 3;
  v55 = *(JSC::JSCell **)(a2 + 40);
  if (((unint64_t)v55 & 0xFFFE000000000002) != 0)
    goto LABEL_79;
  v56 = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v55);
  if (!v56)
    goto LABEL_79;
  v58 = v56;
  if (v56 == *(JSC::JSGlobalObject **)(a2 + 24))
    goto LABEL_79;
  v59 = v82[7];
  FunctionRealm = (JSC::VM *)JSC::getFunctionRealm((JSC *)v82, v56, v57);
  if (*((_DWORD *)v59 + 20))
  {
    if ((JSC::VM::hasExceptionsAfterHandlingTraps(v59) & 1) != 0)
      goto LABEL_79;
  }
  v63 = *((_QWORD *)FunctionRealm + 412);
  if (!v63)
    goto LABEL_76;
  v64 = *(_DWORD *)(v63 - 8);
  v65 = ((unint64_t)&WebCore::JSScrollTimeline::s_info + ~((_QWORD)&WebCore::JSScrollTimeline::s_info << 32)) ^ (((unint64_t)&WebCore::JSScrollTimeline::s_info + ~((_QWORD)&WebCore::JSScrollTimeline::s_info << 32)) >> 22);
  v66 = 9 * ((v65 + ~(v65 << 13)) ^ ((v65 + ~(v65 << 13)) >> 8));
  v67 = (v66 ^ (v66 >> 15)) + ~((v66 ^ (v66 >> 15)) << 27);
  v68 = v64 & ((v67 >> 31) ^ v67);
  v69 = *(char ***)(v63 + 16 * v68);
  if (v69 != &WebCore::JSScrollTimeline::s_info)
  {
    v70 = 1;
    while (v69)
    {
      v68 = ((_DWORD)v68 + v70) & v64;
      v69 = *(char ***)(v63 + 16 * v68);
      ++v70;
      if (v69 == &WebCore::JSScrollTimeline::s_info)
        goto LABEL_75;
    }
    goto LABEL_76;
  }
LABEL_75:
  v60 = *(WebCore::JSDOMGlobalObject **)(v63 + 16 * v68 + 8);
  if (!v60)
  {
LABEL_76:
    v71 = (JSC::JSCell *)WebCore::JSAnimationTimeline::prototype(v59, FunctionRealm, v60);
    v72 = WebCore::JSScrollTimelinePrototype::createStructure((uint64_t *)v59, (uint64_t)FunctionRealm, v71);
    *(_DWORD *)(v72 + 16) |= 0x80000u;
    v74 = (JSC::JSCell *)WebCore::JSScrollTimelinePrototype::create(v59, FunctionRealm, v72, v73);
    v75 = WebCore::JSScrollTimeline::createStructure((uint64_t *)v59, (uint64_t)FunctionRealm, v74);
    v60 = (WebCore::JSDOMGlobalObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v75, (uint64_t)&WebCore::JSScrollTimeline::s_info);
  }
  SubclassStructure = JSC::InternalFunction::createSubclassStructure((JSC::InternalFunction *)v82, v58, v60, v61);
  if (!*((_DWORD *)v59 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v59) & 1) == 0)
    JSC::JSObject::setStructure((JSCell *)SlowCase, v59, SubclassStructure);
LABEL_79:
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
  {
    v77 = 0;
    SlowCase = 0;
  }
  else
  {
    v77 = 0;
  }
LABEL_81:
  ((void (*)(WTF **, uint64_t *))off_1E3308830[v77])(&v87, &v83);
  return SlowCase;
}

uint64_t WebCore::JSScrollTimeline::prototype(WebCore::JSScrollTimeline *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  uint64_t v13;
  JSC::JSCell *v14;
  unint64_t Structure;
  JSC::Structure *v16;
  JSC::JSCell *v17;
  uint64_t v18;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSScrollTimeline::s_info + ~((_QWORD)&WebCore::JSScrollTimeline::s_info << 32)) ^ (((unint64_t)&WebCore::JSScrollTimeline::s_info + ~((_QWORD)&WebCore::JSScrollTimeline::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSScrollTimeline::s_info)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v12;
      if (v11 == &WebCore::JSScrollTimeline::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v13)
  {
LABEL_7:
    v14 = (JSC::JSCell *)WebCore::JSAnimationTimeline::prototype(this, a2, a3);
    Structure = WebCore::JSScrollTimelinePrototype::createStructure((uint64_t *)this, (uint64_t)a2, v14);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v17 = (JSC::JSCell *)WebCore::JSScrollTimelinePrototype::create(this, a2, Structure, v16);
    v18 = WebCore::JSScrollTimeline::createStructure((uint64_t *)this, (uint64_t)a2, v17);
    v13 = WebCore::cacheDOMStructure((JSCell *)a2, v18, (uint64_t)&WebCore::JSScrollTimeline::s_info);
  }
  return *(_QWORD *)(v13 + 48);
}

uint64_t WebCore::JSScrollTimeline::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSAnimationTimeline::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSAnimationTimeline::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSAnimationTimeline::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSScrollTimelinePrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSScrollTimelinePrototype::create(WebCore::JSScrollTimelinePrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(this, (uint64_t)&WebCore::JSScrollTimeline::s_info, &WebCore::JSScrollTimelinePrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSScrollTimeline>,(WebCore::DOMConstructorID)326>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  unint64_t v16;
  WebCore::JSDOMGlobalObject *v17;
  uint64_t v18;
  unint64_t v20;
  unint64_t v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  int v24;
  int v25;
  uint64_t v26;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2608);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSAnimationTimeline>,(WebCore::DOMConstructorID)318>(a1, a2);
  v7 = v6;
  LODWORD(v22) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v20 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v20);
    v5[2] = SlowCase + (int)v20;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v22, &WebCore::JSDOMConstructor<WebCore::JSScrollTimeline>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 >= v10[2847])
  {
    v2 = v10[2848];
    if ((v2 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v2 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_11;
    }
    v21 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v21);
    v10[2848] = v2 + (int)v21;
  }
  v10[2846] = v2 + 48;
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v22);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v22);
  v14 = v22;
  v22 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v22);
  v16 = *(_QWORD *)(v5[227] + 2160);
  v18 = WebCore::JSScrollTimeline::prototype((WebCore::JSScrollTimeline *)a1, (JSC::VM *)a2, v17);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v16, v18, 14, (uint64_t)&v22);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2608) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsScrollTimelineConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSScrollTimelinePrototype::s_info != (char **)(16
                                                              * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSScrollTimeline>,(WebCore::DOMConstructorID)326>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsScrollTimeline_source(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::Element *a4)
{
  uint64_t v4;
  WebCore::JSDOMGlobalObject *v6;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 56);
  if (v4 && (v6 = *(WebCore::JSDOMGlobalObject **)(v4 + 8)) != 0)
    return WebCore::toJS(a1, *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), v6, a4);
  else
    return 2;
}

uint64_t WebCore::jsScrollTimeline_axis(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = (uint64_t *)(v2 + 41968);
  v4 = *(unsigned __int8 *)(*((_QWORD *)a2 + 3) + 64);
  if ((byte_1EE336949 & 1) == 0)
  {
    dword_1ECE79DE0 += 2;
    byte_1EE336949 = 1;
    dword_1ECE79E00 += 2;
    qword_1EE336B28 = (uint64_t)&dword_1ECE79DE0;
    unk_1EE336B30 = &dword_1ECE79E00;
    dword_1ECE79E20 += 2;
    dword_1ECE79E40 += 2;
    qword_1EE336B38 = (uint64_t)&dword_1ECE79E20;
    unk_1EE336B40 = &dword_1ECE79E40;
  }
  v5 = *(_QWORD *)&_MergedGlobals_774[8 * v4 + 480];
  if (!v5)
    return *v3;
  v6 = *(_DWORD *)v5;
  v7 = *(_DWORD *)(v5 + 4);
  *(_DWORD *)v5 += 2;
  if (v7)
  {
    if (v7 != 1)
    {
LABEL_6:
      v8 = *(_QWORD *)(v2 + 64760);
      if (!v8 || v5 != *(_QWORD *)(v8 + 8))
      {
        v8 = JSC::jsStringWithCacheSlowCase();
        v6 = *(_DWORD *)v5 - 2;
      }
      goto LABEL_9;
    }
    v10 = *(unsigned __int8 **)(v5 + 8);
    if ((*(_BYTE *)(v5 + 16) & 4) != 0)
    {
      v11 = *v10;
    }
    else
    {
      v12 = *(unsigned __int16 *)v10;
      if (v12 > 0xFF)
        goto LABEL_6;
      v11 = v12;
    }
    v8 = *(_QWORD *)(v2 + 8 * v11 + 42216);
  }
  else
  {
    v8 = *v3;
  }
LABEL_9:
  if (v6)
    *(_DWORD *)v5 = v6;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v5, a2);
  return v8;
}

uint64_t WebCore::convertDictionary<WebCore::ScrollToOptions>@<X0>(JSC::JSCell *this@<X1>, uint64_t result@<X0>, uint64_t a3@<X8>)
{
  JSC::VM *v4;
  JSC::JSGlobalObject *v5;
  uint64_t Object;
  JSC::Structure *v7;
  WTF::StringImpl *v8;
  unint64_t v9;
  unsigned __int16 v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  JSC::VM *v13;
  double v14;
  char v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  JSC::VM *v19;
  double v20;
  char v21;
  int v22;
  JSC::VM *v23;
  double v24;
  double v25;
  _BYTE v26[7];
  _BYTE v27[7];
  int v28;
  __int16 v29;
  WTF::StringImpl *v30;

  v4 = *(JSC::VM **)(result + 56);
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    LOBYTE(v10) = 0;
    v15 = 0;
    v21 = 0;
    v14 = 0.0;
LABEL_42:
    v20 = 0.0;
    goto LABEL_32;
  }
  v5 = (JSC::JSGlobalObject *)result;
  if (((unint64_t)this & 0xFFFE000000000002) != 0)
    goto LABEL_39;
  Object = JSC::JSCell::getObject(this);
  if (!Object)
    goto LABEL_39;
  v7 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  v9 = JSC::JSObject::get(v7, v5, (unint64_t)v30);
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, v8);
    else
      *(_DWORD *)v30 -= 2;
  }
  if (*((_DWORD *)v4 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    if ((result & 1) != 0)
      goto LABEL_40;
  }
  if (v9 == 10)
  {
    LOBYTE(v10) = 0;
    goto LABEL_12;
  }
  v30 = (WTF::StringImpl *)*((_QWORD *)v5 + 7);
  v10 = WebCore::parseEnumeration<WebCore::ScrollBehavior>(v5, v9);
  if (*((_DWORD *)v30 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v30);
    if ((result & 1) != 0)
    {
LABEL_40:
      v22 = 1;
      goto LABEL_33;
    }
  }
  if (v10 <= 0xFFu)
  {
LABEL_39:
    result = JSC::throwTypeError();
    goto LABEL_40;
  }
LABEL_12:
  WTF::AtomStringImpl::addLiteral();
  v12 = (WTF::StringImpl *)JSC::JSObject::get(v7, v5, (unint64_t)v30);
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, v11);
    else
      *(_DWORD *)v30 -= 2;
  }
  if (*((_DWORD *)v4 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    if ((result & 1) != 0)
      goto LABEL_40;
  }
  if (v12 == (WTF::StringImpl *)10)
  {
    v15 = 0;
    v14 = 0.0;
  }
  else
  {
    v30 = v12;
    v13 = (JSC::VM *)*((_QWORD *)v5 + 7);
    if ((unint64_t)v12 >= 0xFFFE000000000000)
    {
      v14 = (double)(int)v12;
    }
    else if ((unint64_t)v12 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      v23 = (JSC::VM *)*((_QWORD *)v5 + 7);
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v30, v5);
      v13 = v23;
      v14 = v24;
    }
    else
    {
      *(_QWORD *)&v14 = (char *)v12 - 0x2000000000000;
    }
    if (*((_DWORD *)v13 + 20))
    {
      result = JSC::VM::hasExceptionsAfterHandlingTraps(v13);
      if ((_DWORD)result)
        goto LABEL_40;
    }
    v15 = 1;
  }
  WTF::AtomStringImpl::addLiteral();
  v16 = v30;
  result = JSC::JSObject::get(v7, v5, (unint64_t)v30);
  v18 = (WTF::StringImpl *)result;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      result = WTF::StringImpl::destroy(v16, v17);
    else
      *(_DWORD *)v16 -= 2;
  }
  if (*((_DWORD *)v4 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    if ((result & 1) != 0)
      goto LABEL_40;
  }
  if (v18 == (WTF::StringImpl *)10)
  {
    v21 = 0;
    goto LABEL_42;
  }
  v30 = v18;
  v19 = (JSC::VM *)*((_QWORD *)v5 + 7);
  if ((unint64_t)v18 >= 0xFFFE000000000000)
  {
    v20 = (double)(int)v18;
  }
  else if ((unint64_t)v18 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    result = JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v30, v5);
    v20 = v25;
  }
  else
  {
    *(_QWORD *)&v20 = (char *)v18 - 0x2000000000000;
  }
  if (*((_DWORD *)v19 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v19);
    if ((_DWORD)result)
      goto LABEL_40;
  }
  v21 = 1;
LABEL_32:
  v22 = 0;
  *(_WORD *)(a3 + 8) = v10 | 0x100;
  *(_DWORD *)(a3 + 10) = v28;
  *(_WORD *)(a3 + 14) = v29;
  *(double *)(a3 + 16) = v14;
  *(_BYTE *)(a3 + 24) = v15;
  *(_DWORD *)(a3 + 25) = *(_DWORD *)v27;
  *(_DWORD *)(a3 + 28) = *(_DWORD *)&v27[3];
  *(double *)(a3 + 32) = v20;
  *(_BYTE *)(a3 + 40) = v21;
  *(_DWORD *)(a3 + 41) = *(_DWORD *)v26;
  *(_DWORD *)(a3 + 44) = *(_DWORD *)&v26[3];
LABEL_33:
  *(_DWORD *)(a3 + 48) = v22;
  return result;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSSecurityPolicyViolationEvent>::construct(JSC::JSGlobalObject *a1, uint64_t a2)
{
  JSC::VM *v3;
  unint64_t v4;
  uint64_t v6;
  int v7;
  WTF::StringImpl *v8;
  void (***v9)(WebCore::SecurityPolicyViolationEvent *__hidden);
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WebCore::JSDOMGlobalObject *v12;
  WTF::StringImpl *v13;
  JSCell *v14;
  _DWORD *v15;
  uint64_t v16;
  int v17;
  JSC::JSCell *v18;
  unint64_t v19;
  JSC::Structure *Object;
  JSValue v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  BOOL v24;
  JSC::VM *v25;
  double v26;
  WTF::StringImpl *v27;
  unint64_t v28;
  BOOL v29;
  JSC::VM *v30;
  double v31;
  WTF::StringImpl *v32;
  unint64_t v33;
  BOOL v34;
  JSC::VM *v35;
  double v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  _DWORD *v39;
  WTF::StringImpl *v40;
  int v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  unint64_t v44;
  int v45;
  uint64_t v46;
  char *v47;
  char *v48;
  int v49;
  uint64_t v50;
  unsigned int v51;
  WTF::StringImpl *v52;
  __int128 v53;
  void (***v54)(WebCore::SecurityPolicyViolationEvent *__hidden);
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WebCore::JSDOMGlobalObject *v57;
  WTF::StringImpl *v58;
  _DWORD *v59;
  JSC::VM *v61;
  WTF::StringImpl *v62;
  int v63;
  const char *v64;
  int v65;
  int v66;
  int v67;
  char **v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  uint64_t v71;
  int v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  uint64_t v76;
  JSC::VM *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  unint64_t v83;
  int v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  uint64_t v87;
  int v88;
  JSC::VM *v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  uint64_t v94;
  WTF::StringImpl *v95;
  int v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  uint64_t v99;
  WTF::StringImpl *v100;
  JSC::VM *v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  uint64_t v105;
  WTF::StringImpl *v106;
  int v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  unint64_t v111;
  JSC::VM *v112;
  double v113;
  double v114;
  double v115;
  long double v116;
  double v117;
  WTF::StringImpl *v118;
  uint64_t v119;
  int v120;
  int v121;
  JSC::VM *v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  int v125;
  uint64_t v126;
  int hasExceptionsAfterHandlingTraps;
  int v129;
  int v130;
  double v131;
  char v132;
  int v133;
  BOOL v134;
  int v135;
  uint64_t v136;
  int *v137;
  int v138;
  BOOL v139;
  int v140;
  uint64_t v141;
  int *v142;
  int v143;
  BOOL v144;
  int v145;
  uint64_t v146;
  int *v147;
  int v148;
  WTF::StringImpl *v150;
  WTF::StringImpl *v151;
  WTF::StringImpl *v152;
  WTF::StringImpl *v153;
  _OWORD v154[5];
  uint64_t v155;
  int v156;
  WTF::StringImpl *v157;
  int v158;
  uint64_t v159;
  int v160;
  WTF::StringImpl *v161;
  int v162;
  uint64_t v163;
  int v164;
  WTF::StringImpl *v165;
  int v166;
  WTF::StringImpl *v167;
  int v168;
  uint64_t v169;
  JSC::VM *v170;
  int v171;
  WTF::StringImpl *v172;
  int v173;
  uint64_t v174;
  _DWORD *v175;
  int v176;
  WTF::StringImpl *v177;
  __int128 v178;
  _OWORD v179[3];
  _QWORD v180[2];
  JSC::VM *v181;
  WTF::StringImpl *v182;

  v3 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v4 = *(int *)(a2 + 32) - 1;
  if (v4 >= 2)
    v4 = 2;
  if (!v4)
  {
    v21.super.isa = (Class)JSC::createNotEnoughArgumentsError(a1, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException(v3, a1, v21);
  }
  if (v4 != 2)
  {
    v6 = *(_QWORD *)(a2 + 24);
    WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, *(_QWORD *)(a2 + 48), (uint64_t)&v177);
    v7 = v178;
    if ((_DWORD)v178)
    {
      v14 = 0;
    }
    else
    {
      v8 = v177;
      v177 = 0;
      v172 = v8;
      v155 = 0;
      memset(v154, 0, sizeof(v154));
      v9 = (void (***)(WebCore::SecurityPolicyViolationEvent *__hidden))bmalloc::api::isoAllocate();
      v175 = (_DWORD *)WebCore::SecurityPolicyViolationEvent::SecurityPolicyViolationEvent((uint64_t)v9, &v172, (unsigned __int8 *)v154, 0);
      WebCore::SecurityPolicyViolationEventInit::~SecurityPolicyViolationEventInit((WebCore::SecurityPolicyViolationEventInit *)v154, v10);
      v13 = v172;
      v172 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v11);
        else
          *(_DWORD *)v13 -= 2;
      }
      if (*v9 != off_1E330CCE0)
      {
        __break(0xC471u);
        JUMPOUT(0x194F661E4);
      }
      v14 = (JSCell *)WebCore::createWrapper<WebCore::SecurityPolicyViolationEvent,WebCore::SecurityPolicyViolationEvent>(*(JSC::VM **)(v6 + 40), (uint64_t *)&v175, v12);
      WebCore::setSubclassStructureIfNeeded<WebCore::SecurityPolicyViolationEvent>(a1, a2, v14);
      if (*((_DWORD *)v3 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v3) & 1) != 0)
        v14 = 0;
      v15 = v175;
      v175 = 0;
      if (v15)
      {
        if (v15[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
        else
          --v15[4];
      }
      v7 = v178;
    }
    if (v7 != -1)
      ((void (*)(_OWORD *, WTF::StringImpl **))off_1E330AAE8[v7])(v154, &v177);
    return v14;
  }
  v16 = *(_QWORD *)(a2 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, *(_QWORD *)(a2 + 48), (uint64_t)&v157);
  v17 = v158;
  if (!v158)
  {
    v18 = *(JSC::JSCell **)(a2 + 56);
    v181 = (JSC::VM *)*((_QWORD *)a1 + 7);
    v19 = (unint64_t)v18 & 0xFFFFFFFFFFFFFFF7;
    if (((unint64_t)v18 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
      Object = 0;
    }
    else if (((unint64_t)v18 & 0xFFFE000000000002) != 0
           || (Object = (JSC::Structure *)JSC::JSCell::getObject(v18)) == 0)
    {
      JSC::throwTypeError();
      v14 = 0;
      v51 = 1;
      v156 = 1;
LABEL_99:
      (*(&off_1E33088C8 + v51))((int)&v177, (WebCore::SecurityPolicyViolationEventInit *)v154);
LABEL_100:
      v17 = v158;
      goto LABEL_101;
    }
    LOWORD(v177) = 0;
    BYTE2(v177) = 0;
    WORD1(v180[0]) = 0;
    *(_QWORD *)((char *)v180 + 4) = 0;
    v178 = 0u;
    memset(v179, 0, sizeof(v179));
    LOBYTE(v180[0]) = 0;
    if (v19 == 2)
      goto LABEL_63;
    WTF::AtomStringImpl::addLiteral();
    v23 = JSC::JSObject::get(Object, a1, *(unint64_t *)&v154[0]);
    if (*(_QWORD *)&v154[0])
    {
      if (**(_DWORD **)&v154[0] == 2)
        WTF::StringImpl::destroy(*(WTF::StringImpl **)&v154[0], v22);
      else
        **(_DWORD **)&v154[0] -= 2;
    }
    if (*((_DWORD *)v181 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v181))
    {
LABEL_376:
      v156 = 1;
      while (1)
      {
        WebCore::SecurityPolicyViolationEventInit::~SecurityPolicyViolationEventInit((WebCore::SecurityPolicyViolationEventInit *)&v177, v40);
        v51 = v156;
        if (v156)
          break;
        if (!v158)
        {
          v52 = v157;
          v157 = 0;
          v172 = v52;
          LOWORD(v177) = v154[0];
          BYTE2(v177) = BYTE2(v154[0]);
          v53 = *(_OWORD *)((char *)v154 + 8);
          memset((char *)v154 + 8, 0, 64);
          v178 = v53;
          v179[0] = *(_OWORD *)((char *)&v154[1] + 8);
          v179[1] = *(_OWORD *)((char *)&v154[2] + 8);
          v179[2] = *(_OWORD *)((char *)&v154[3] + 8);
          LODWORD(v180[1]) = v155;
          v180[0] = *((_QWORD *)&v154[4] + 1);
          v54 = (void (***)(WebCore::SecurityPolicyViolationEvent *__hidden))bmalloc::api::isoAllocate();
          v175 = (_DWORD *)WebCore::SecurityPolicyViolationEvent::SecurityPolicyViolationEvent((uint64_t)v54, &v172, (unsigned __int8 *)&v177, 0);
          WebCore::SecurityPolicyViolationEventInit::~SecurityPolicyViolationEventInit((WebCore::SecurityPolicyViolationEventInit *)&v177, v55);
          v58 = v172;
          v172 = 0;
          if (v58)
          {
            if (*(_DWORD *)v58 == 2)
              WTF::StringImpl::destroy(v58, v56);
            else
              *(_DWORD *)v58 -= 2;
          }
          if (*v54 != off_1E330CCE0)
          {
            __break(0xC471u);
            JUMPOUT(0x194F66218);
          }
          v14 = (JSCell *)WebCore::createWrapper<WebCore::SecurityPolicyViolationEvent,WebCore::SecurityPolicyViolationEvent>(*(JSC::VM **)(v16 + 40), (uint64_t *)&v175, v57);
          WebCore::setSubclassStructureIfNeeded<WebCore::SecurityPolicyViolationEvent>(a1, a2, v14);
          if (*((_DWORD *)v3 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v3) & 1) != 0)
            v14 = 0;
          v59 = v175;
          v175 = 0;
          if (v59)
          {
            if (v59[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v59 + 8))(v59);
            else
              --v59[4];
          }
          v51 = 0;
          goto LABEL_99;
        }
        std::__throw_bad_variant_access[abi:sn180100]();
LABEL_424:
        WTF::StringImpl::destroy(v91, v86);
LABEL_393:
        v121 = 1;
LABEL_396:
        v156 = 1;
LABEL_281:
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E33088B8[v121])(&v165, &v167);
LABEL_282:
        v88 = v171;
        if (v171 != -1)
LABEL_283:
          ((void (*)(WTF::StringImpl **, JSC::VM **))off_1E33088B8[v88])(&v167, &v170);
LABEL_284:
        v72 = v173;
LABEL_285:
        if (v72 != -1)
          ((void (*)(JSC::VM **, WTF::StringImpl **))off_1E33088B8[v72])(&v170, &v172);
LABEL_85:
        v41 = v176;
LABEL_86:
        if (v41 != -1)
          ((void (*)(WTF::StringImpl **, _DWORD **))off_1E33088B8[v41])(&v172, &v175);
      }
      v14 = 0;
      if (v156 == -1)
        goto LABEL_100;
      goto LABEL_99;
    }
    if (v23 == 10)
    {
      v24 = 0;
      goto LABEL_36;
    }
    v25 = (JSC::VM *)*((_QWORD *)a1 + 7);
    if (v23 >= 0xFFFE000000000000)
    {
      v134 = (_DWORD)v23 == 0;
    }
    else
    {
      *(_QWORD *)&v26 = v23 - 0x2000000000000;
      if (v23 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        v24 = v26 > 0.0 || v26 < 0.0;
LABEL_35:
        if (*((_DWORD *)v25 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v25))
          goto LABEL_376;
LABEL_36:
        LOBYTE(v177) = v24;
        WTF::AtomStringImpl::addLiteral();
        v28 = JSC::JSObject::get(Object, a1, *(unint64_t *)&v154[0]);
        if (*(_QWORD *)&v154[0])
        {
          if (**(_DWORD **)&v154[0] == 2)
            WTF::StringImpl::destroy(*(WTF::StringImpl **)&v154[0], v27);
          else
            **(_DWORD **)&v154[0] -= 2;
        }
        if (*((_DWORD *)v181 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v181))
          goto LABEL_376;
        if (v28 == 10)
        {
          v29 = 0;
          goto LABEL_47;
        }
        v30 = (JSC::VM *)*((_QWORD *)a1 + 7);
        if (v28 >= 0xFFFE000000000000)
        {
          v139 = (_DWORD)v28 == 0;
          goto LABEL_475;
        }
        *(_QWORD *)&v31 = v28 - 0x2000000000000;
        if (v28 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
        {
          if (v31 <= 0.0)
          {
            v29 = v31 < 0.0;
            goto LABEL_46;
          }
        }
        else
        {
          if ((v28 & 0xFFFE000000000002) != 0)
          {
            v29 = v28 == 7;
            goto LABEL_46;
          }
          v140 = *(unsigned __int8 *)(v28 + 5);
          if (v140 == 3)
          {
            v143 = *(_DWORD *)(v28 + 8);
LABEL_463:
            v139 = v143 == 0;
            goto LABEL_475;
          }
          if (v140 == 2)
          {
            v141 = *(_QWORD *)(v28 + 8);
            if ((v141 & 1) != 0)
              v142 = (int *)(v28 + 16);
            else
              v142 = (int *)(v141 + 4);
            v143 = *v142;
            goto LABEL_463;
          }
          if ((*(_BYTE *)(16 * (*(_DWORD *)v28 & 0xFFFFFFFE) + 0xA) & 1) != 0)
          {
            v139 = *(_QWORD *)(16 * (*(_DWORD *)v28 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
LABEL_475:
            v29 = !v139;
LABEL_46:
            if (*((_DWORD *)v30 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v30))
              goto LABEL_376;
LABEL_47:
            BYTE1(v177) = v29;
            WTF::AtomStringImpl::addLiteral();
            v33 = JSC::JSObject::get(Object, a1, *(unint64_t *)&v154[0]);
            if (*(_QWORD *)&v154[0])
            {
              if (**(_DWORD **)&v154[0] == 2)
                WTF::StringImpl::destroy(*(WTF::StringImpl **)&v154[0], v32);
              else
                **(_DWORD **)&v154[0] -= 2;
            }
            if (*((_DWORD *)v181 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v181))
              goto LABEL_376;
            if (v33 == 10)
            {
              v34 = 0;
              goto LABEL_58;
            }
            v35 = (JSC::VM *)*((_QWORD *)a1 + 7);
            if (v33 >= 0xFFFE000000000000)
            {
              v144 = (_DWORD)v33 == 0;
              goto LABEL_468;
            }
            *(_QWORD *)&v36 = v33 - 0x2000000000000;
            if (v33 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
            {
              if (v36 <= 0.0)
              {
                v34 = v36 < 0.0;
                goto LABEL_57;
              }
            }
            else
            {
              if ((v33 & 0xFFFE000000000002) != 0)
              {
                v34 = v33 == 7;
                goto LABEL_57;
              }
              v145 = *(unsigned __int8 *)(v33 + 5);
              if (v145 == 3)
              {
                v148 = *(_DWORD *)(v33 + 8);
LABEL_467:
                v144 = v148 == 0;
                goto LABEL_468;
              }
              if (v145 == 2)
              {
                v146 = *(_QWORD *)(v33 + 8);
                if ((v146 & 1) != 0)
                  v147 = (int *)(v33 + 16);
                else
                  v147 = (int *)(v146 + 4);
                v148 = *v147;
                goto LABEL_467;
              }
              if ((*(_BYTE *)(16 * (*(_DWORD *)v33 & 0xFFFFFFFE) + 0xA) & 1) != 0)
              {
                v144 = *(_QWORD *)(16 * (*(_DWORD *)v33 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
LABEL_468:
                v34 = !v144;
LABEL_57:
                if (*((_DWORD *)v35 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v35))
                  goto LABEL_376;
LABEL_58:
                BYTE2(v177) = v34;
                WTF::AtomStringImpl::addLiteral();
                v38 = JSC::JSObject::get(Object, a1, *(unint64_t *)&v154[0]);
                if (*(_QWORD *)&v154[0])
                {
                  if (**(_DWORD **)&v154[0] == 2)
                    WTF::StringImpl::destroy(*(WTF::StringImpl **)&v154[0], v37);
                  else
                    **(_DWORD **)&v154[0] -= 2;
                }
                if (*((_DWORD *)v181 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v181))
                  goto LABEL_376;
                if (v38 != 10)
                {
                  WebCore::valueToUSVString(a1, v38, (uint64_t)&v175);
                  v41 = v176;
                  if (v176)
                  {
                    v156 = 1;
                    goto LABEL_86;
                  }
                  v42 = (uint64_t)v175;
                  v175 = 0;
                  *(_QWORD *)&v179[0] = v42;
                  goto LABEL_69;
                }
LABEL_63:
                v39 = (_DWORD *)*MEMORY[0x1E0CBF738];
                if (*MEMORY[0x1E0CBF738])
                  *v39 += 2;
                v176 = 0;
                v175 = 0;
                *(_QWORD *)&v179[0] = v39;
                if (v19 == 2)
                {
                  LODWORD(v180[1]) = 0;
LABEL_82:
                  v47 = "disposition";
                  v48 = "SecurityPolicyViolationEventDisposition";
                  v49 = (int)a1;
                  v50 = 40;
LABEL_83:
                  WebCore::throwRequiredMemberTypeError(v49, (int)&v181, v47, 12, "SecurityPolicyViolationEventInit", 33, v48, v50);
                  goto LABEL_84;
                }
LABEL_69:
                WTF::AtomStringImpl::addLiteral();
                v44 = JSC::JSObject::get(Object, a1, *(unint64_t *)&v154[0]);
                if (*(_QWORD *)&v154[0])
                {
                  if (**(_DWORD **)&v154[0] == 2)
                    WTF::StringImpl::destroy(*(WTF::StringImpl **)&v154[0], v43);
                  else
                    **(_DWORD **)&v154[0] -= 2;
                }
                if (*((_DWORD *)v181 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v181))
                  goto LABEL_84;
                if (v44 == 10)
                {
                  v45 = 0;
                  v174 = 0;
                }
                else
                {
                  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(a1, v44, &v174);
                  if (HIDWORD(v174))
                  {
LABEL_84:
                    v156 = 1;
                    goto LABEL_85;
                  }
                  v45 = v174;
                }
                LODWORD(v180[1]) = v45;
                WTF::AtomStringImpl::addLiteral();
                v46 = JSC::JSObject::get(Object, a1, *(unint64_t *)&v154[0]);
                if (*(_QWORD *)&v154[0])
                {
                  if (**(_DWORD **)&v154[0] == 2)
                    WTF::StringImpl::destroy(*(WTF::StringImpl **)&v154[0], v40);
                  else
                    **(_DWORD **)&v154[0] -= 2;
                }
                if (*((_DWORD *)v181 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v181))
                  goto LABEL_84;
                if (v46 == 10)
                  goto LABEL_82;
                v61 = (JSC::VM *)*((_QWORD *)a1 + 7);
                v170 = v61;
                *(_QWORD *)&v154[0] = v46;
                if ((v46 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v46 + 5) != 2)
                {
                  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v154, a1);
                  v62 = v172;
                  if (v172)
                    goto LABEL_110;
                  goto LABEL_290;
                }
                v62 = *(WTF::StringImpl **)(v46 + 8);
                if ((v62 & 1) != 0)
                {
                  v62 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v46, a1);
                  if (!v62)
                  {
LABEL_109:
                    v172 = v62;
                    if (v62)
                    {
LABEL_110:
                      v63 = *((_DWORD *)v62 + 4);
                      v64 = (const char *)*((_QWORD *)v62 + 1);
                      v65 = *((_DWORD *)v62 + 1);
                      if (v64 == "enforce" || v65 != 7)
                      {
                        if (v64 != "enforce" || v65 != 7)
                        {
                          if (v64 == "report" || v65 != 6)
                          {
                            if (v65 != 6 || v64 != "report")
                              goto LABEL_116;
                          }
                          else if ((v63 & 4) != 0)
                          {
                            if (*v64 != 114 || *(_DWORD *)(v64 + 1) != 1919905893 || *(_DWORD *)(v64 + 2) != 1953656688)
                              goto LABEL_116;
                          }
                          else
                          {
                            if (*(_WORD *)v64 != 114)
                              goto LABEL_116;
                            if (*(_QWORD *)(v64 + 4) != 0x740072006F0070
                              || *(_QWORD *)(v64 + 2) != 0x72006F00700065)
                            {
                              goto LABEL_116;
                            }
                          }
                          v68 = &off_1E3301F48;
                          goto LABEL_120;
                        }
                      }
                      else
                      {
                        if ((v63 & 4) != 0)
                        {
                          if (*v64 != 101 || *(_DWORD *)(v64 + 1) != 1919903342 || *(_DWORD *)(v64 + 3) != 1701016175)
                            goto LABEL_116;
                          goto LABEL_119;
                        }
                        if (*(_WORD *)v64 != 101)
                        {
LABEL_116:
                          v66 = 0;
                          v67 = 0;
                          goto LABEL_121;
                        }
                        v66 = 0;
                        if (*(_QWORD *)(v64 + 2) != 0x72006F0066006ELL)
                        {
                          v67 = 0;
                          goto LABEL_121;
                        }
                        v67 = 0;
                        if (*(_QWORD *)(v64 + 6) != 0x6500630072006FLL)
                        {
LABEL_121:
                          v172 = 0;
                          if (*(_DWORD *)v62 == 2)
                            WTF::StringImpl::destroy(v62, v40);
                          else
                            *(_DWORD *)v62 -= 2;
LABEL_123:
                          if (*((_DWORD *)v61 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v61) & 1) != 0)
                            goto LABEL_84;
                          if (!v66)
                          {
                            JSC::throwTypeError();
                            goto LABEL_84;
                          }
                          LOBYTE(v180[0]) = v67 != 0;
                          WTF::AtomStringImpl::addLiteral();
                          v69 = *(WTF::StringImpl **)&v154[0];
                          v71 = JSC::JSObject::get(Object, a1, *(unint64_t *)&v154[0]);
                          if (v69)
                          {
                            if (*(_DWORD *)v69 == 2)
                              WTF::StringImpl::destroy(v69, v70);
                            else
                              *(_DWORD *)v69 -= 2;
                          }
                          if (*((_DWORD *)v181 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v181))
                            goto LABEL_84;
                          if (v71 == 10)
                          {
                            v47 = "documentURI";
                            v48 = "USVString";
                            v49 = (int)a1;
                            v50 = 10;
                            goto LABEL_83;
                          }
                          WebCore::valueToUSVString(a1, v71, (uint64_t)&v172);
                          v72 = v173;
                          if (v173)
                          {
                            v156 = 1;
                            goto LABEL_285;
                          }
                          v73 = v172;
                          v172 = 0;
                          v74 = (WTF::StringImpl *)v178;
                          *(_QWORD *)&v178 = v73;
                          if (v74)
                          {
                            if (*(_DWORD *)v74 == 2)
                              WTF::StringImpl::destroy(v74, v40);
                            else
                              *(_DWORD *)v74 -= 2;
                          }
                          WTF::AtomStringImpl::addLiteral();
                          v75 = *(WTF::StringImpl **)&v154[0];
                          v76 = JSC::JSObject::get(Object, a1, *(unint64_t *)&v154[0]);
                          if (v75)
                          {
                            if (*(_DWORD *)v75 == 2)
                              WTF::StringImpl::destroy(v75, v40);
                            else
                              *(_DWORD *)v75 -= 2;
                          }
                          if (*((_DWORD *)v181 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v181))
                          {
LABEL_141:
                            v156 = 1;
                            goto LABEL_284;
                          }
                          if (v76 == 10)
                          {
                            WebCore::throwRequiredMemberTypeError((int)a1, (int)&v181, "effectiveDirective", 19, "SecurityPolicyViolationEventInit", 33, "DOMString", 10);
                            goto LABEL_141;
                          }
                          *(_QWORD *)&v154[0] = v76;
                          v77 = (JSC::VM *)*((_QWORD *)a1 + 7);
                          if ((v76 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v76 + 5) != 2)
                          {
                            JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v154, a1);
LABEL_148:
                            if (*((_DWORD *)v77 + 20))
                            {
                              hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v77);
                              v79 = v167;
                              if (hasExceptionsAfterHandlingTraps)
                              {
                                v88 = 1;
                                v171 = 1;
                                v167 = 0;
                                if (v79)
                                {
                                  if (*(_DWORD *)v79 == 2)
                                    WTF::StringImpl::destroy(v79, v40);
                                  else
                                    *(_DWORD *)v79 -= 2;
                                }
                                v156 = 1;
                                goto LABEL_283;
                              }
                            }
                            else
                            {
                              v79 = v167;
                            }
                            v171 = 0;
                            v170 = 0;
                            v80 = *(WTF::StringImpl **)&v179[1];
                            v152 = v79;
                            *(_QWORD *)&v179[1] = v79;
                            if (v80)
                            {
                              if (*(_DWORD *)v80 == 2)
                                WTF::StringImpl::destroy(v80, v40);
                              else
                                *(_DWORD *)v80 -= 2;
                            }
                            v153 = v73;
                            WTF::AtomStringImpl::addLiteral();
                            v81 = *(WTF::StringImpl **)&v154[0];
                            v83 = JSC::JSObject::get(Object, a1, *(unint64_t *)&v154[0]);
                            if (v81)
                            {
                              if (*(_DWORD *)v81 == 2)
                                WTF::StringImpl::destroy(v81, v82);
                              else
                                *(_DWORD *)v81 -= 2;
                            }
                            if (*((_DWORD *)v181 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v181))
                            {
LABEL_180:
                              v88 = 0;
                              v156 = 1;
                              goto LABEL_283;
                            }
                            if (v83 == 10)
                            {
                              v84 = 0;
                              v169 = 0;
                            }
                            else
                            {
                              WebCore::convertToInteger<WebCore::IDLUnsignedLong>(a1, v83, &v169);
                              if (HIDWORD(v169))
                                goto LABEL_180;
                              v84 = v169;
                            }
                            HIDWORD(v180[0]) = v84;
                            WTF::AtomStringImpl::addLiteral();
                            v85 = *(WTF::StringImpl **)&v154[0];
                            v87 = JSC::JSObject::get(Object, a1, *(unint64_t *)&v154[0]);
                            if (v85)
                            {
                              if (*(_DWORD *)v85 == 2)
                                WTF::StringImpl::destroy(v85, v86);
                              else
                                *(_DWORD *)v85 -= 2;
                            }
                            if (*((_DWORD *)v181 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v181) & 1) != 0)
                              goto LABEL_180;
                            if (v87 == 10)
                            {
                              WebCore::throwRequiredMemberTypeError((int)a1, (int)&v181, "originalPolicy", 15, "SecurityPolicyViolationEventInit", 33, "DOMString", 10);
                              goto LABEL_180;
                            }
                            *(_QWORD *)&v154[0] = v87;
                            v89 = (JSC::VM *)*((_QWORD *)a1 + 7);
                            if ((v87 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v87 + 5) != 2)
                            {
                              JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v154, a1);
LABEL_187:
                              if (*((_DWORD *)v89 + 20))
                              {
                                v129 = JSC::VM::hasExceptionsAfterHandlingTraps(v89);
                                v91 = v165;
                                if (v129)
                                {
                                  v168 = 1;
                                  v165 = 0;
                                  if (v91)
                                  {
                                    if (*(_DWORD *)v91 == 2)
                                      goto LABEL_424;
                                    *(_DWORD *)v91 -= 2;
                                  }
                                  goto LABEL_393;
                                }
                              }
                              else
                              {
                                v91 = v165;
                              }
                              v168 = 0;
                              v167 = 0;
                              v92 = (WTF::StringImpl *)*((_QWORD *)&v179[1] + 1);
                              v151 = v91;
                              *((_QWORD *)&v179[1] + 1) = v91;
                              if (v92)
                              {
                                if (*(_DWORD *)v92 == 2)
                                  WTF::StringImpl::destroy(v92, v86);
                                else
                                  *(_DWORD *)v92 -= 2;
                              }
                              WTF::AtomStringImpl::addLiteral();
                              v93 = *(WTF::StringImpl **)&v154[0];
                              v94 = JSC::JSObject::get(Object, a1, *(unint64_t *)&v154[0]);
                              if (v93)
                              {
                                if (*(_DWORD *)v93 == 2)
                                  WTF::StringImpl::destroy(v93, v40);
                                else
                                  *(_DWORD *)v93 -= 2;
                              }
                              if (*((_DWORD *)v181 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v181) & 1) != 0)
                              {
                                v121 = 0;
                                goto LABEL_396;
                              }
                              if (v94 == 10)
                              {
                                v95 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
                                if (*MEMORY[0x1E0CBF738])
                                  *(_DWORD *)v95 += 2;
                                v166 = 0;
                              }
                              else
                              {
                                WebCore::valueToUSVString(a1, v94, (uint64_t)&v165);
                                v96 = v166;
                                if (v166)
                                {
                                  v156 = 1;
LABEL_278:
                                  if (v96 != -1)
                                    ((void (*)(uint64_t *, WTF::StringImpl **))off_1E33088B8[v96])(&v163, &v165);
                                  v121 = v168;
                                  if (v168 == -1)
                                    goto LABEL_282;
                                  goto LABEL_281;
                                }
                                v95 = v165;
                              }
                              v165 = 0;
                              v97 = (WTF::StringImpl *)*((_QWORD *)&v178 + 1);
                              *((_QWORD *)&v178 + 1) = v95;
                              if (v97)
                              {
                                if (*(_DWORD *)v97 == 2)
                                  WTF::StringImpl::destroy(v97, v40);
                                else
                                  *(_DWORD *)v97 -= 2;
                              }
                              v150 = v95;
                              WTF::AtomStringImpl::addLiteral();
                              v98 = *(WTF::StringImpl **)&v154[0];
                              v99 = JSC::JSObject::get(Object, a1, *(unint64_t *)&v154[0]);
                              if (v98)
                              {
                                if (*(_DWORD *)v98 == 2)
                                  WTF::StringImpl::destroy(v98, v40);
                                else
                                  *(_DWORD *)v98 -= 2;
                              }
                              if (*((_DWORD *)v181 + 20)
                                && JSC::VM::hasExceptionsAfterHandlingTraps(v181))
                              {
                                v156 = 1;
                                goto LABEL_277;
                              }
                              if (v99 == 10)
                              {
                                v100 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
                                if (*MEMORY[0x1E0CBF738])
                                  *(_DWORD *)v100 += 2;
                                goto LABEL_228;
                              }
                              *(_QWORD *)&v154[0] = v99;
                              v101 = (JSC::VM *)*((_QWORD *)a1 + 7);
                              if ((v99 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v99 + 5) != 2)
                              {
                                JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v154, a1);
LABEL_226:
                                if (*((_DWORD *)v101 + 20))
                                {
                                  v130 = JSC::VM::hasExceptionsAfterHandlingTraps(v101);
                                  v100 = v161;
                                  if (v130)
                                  {
                                    v164 = 1;
                                    v161 = 0;
                                    if (v100)
                                    {
                                      if (*(_DWORD *)v100 == 2)
                                        WTF::StringImpl::destroy(v100, v40);
                                      else
                                        *(_DWORD *)v100 -= 2;
                                    }
                                    v120 = 1;
                                    goto LABEL_410;
                                  }
                                }
                                else
                                {
                                  v100 = v161;
                                }
LABEL_228:
                                v164 = 0;
                                v163 = 0;
                                v103 = (WTF::StringImpl *)*((_QWORD *)&v179[2] + 1);
                                *((_QWORD *)&v179[2] + 1) = v100;
                                if (v103)
                                {
                                  if (*(_DWORD *)v103 == 2)
                                    WTF::StringImpl::destroy(v103, v40);
                                  else
                                    *(_DWORD *)v103 -= 2;
                                }
                                WTF::AtomStringImpl::addLiteral();
                                v104 = *(WTF::StringImpl **)&v154[0];
                                v105 = JSC::JSObject::get(Object, a1, *(unint64_t *)&v154[0]);
                                if (v104)
                                {
                                  if (*(_DWORD *)v104 == 2)
                                    WTF::StringImpl::destroy(v104, v40);
                                  else
                                    *(_DWORD *)v104 -= 2;
                                }
                                if (*((_DWORD *)v181 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v181) & 1) != 0)
                                {
                                  v120 = 0;
LABEL_410:
                                  v156 = 1;
LABEL_276:
                                  ((void (*)(WTF::StringImpl **, uint64_t *))off_1E33088B8[v120])(&v161, &v163);
LABEL_277:
                                  v96 = v166;
                                  goto LABEL_278;
                                }
                                if (v105 == 10)
                                {
                                  v106 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
                                  if (*MEMORY[0x1E0CBF738])
                                    *(_DWORD *)v106 += 2;
                                  v162 = 0;
                                }
                                else
                                {
                                  WebCore::valueToUSVString(a1, v105, (uint64_t)&v161);
                                  v107 = v162;
                                  if (v162)
                                  {
                                    v156 = 1;
LABEL_273:
                                    if (v107 != -1)
                                      ((void (*)(uint64_t *, WTF::StringImpl **))off_1E33088B8[v107])(&v159, &v161);
                                    v120 = v164;
                                    if (v164 == -1)
                                      goto LABEL_277;
                                    goto LABEL_276;
                                  }
                                  v106 = v161;
                                }
                                v161 = 0;
                                v108 = *(WTF::StringImpl **)&v179[2];
                                *(_QWORD *)&v179[2] = v106;
                                if (v108)
                                {
                                  if (*(_DWORD *)v108 == 2)
                                    WTF::StringImpl::destroy(v108, v40);
                                  else
                                    *(_DWORD *)v108 -= 2;
                                }
                                WTF::AtomStringImpl::addLiteral();
                                v109 = *(WTF::StringImpl **)&v154[0];
                                v111 = JSC::JSObject::get(Object, a1, *(unint64_t *)&v154[0]);
                                if (v109)
                                {
                                  if (*(_DWORD *)v109 == 2)
                                    WTF::StringImpl::destroy(v109, v110);
                                  else
                                    *(_DWORD *)v109 -= 2;
                                }
                                if (*((_DWORD *)v181 + 20)
                                  && JSC::VM::hasExceptionsAfterHandlingTraps(v181))
                                {
                                  goto LABEL_250;
                                }
                                if (v111 == 10)
                                {
                                  WebCore::throwRequiredMemberTypeError((int)a1, (int)&v181, "statusCode", 11, "SecurityPolicyViolationEventInit", 33, "unsigned short", 15);
LABEL_250:
                                  v156 = 1;
LABEL_272:
                                  v107 = v162;
                                  goto LABEL_273;
                                }
                                *(_QWORD *)&v154[0] = v111;
                                v112 = (JSC::VM *)*((_QWORD *)a1 + 7);
                                if (v111 < 0xFFFE000000000000 || (v111 & 0x80000000) != 0)
                                {
                                  if (v111 >= 0xFFFE000000000000)
                                  {
                                    v113 = (double)(int)v111;
                                  }
                                  else if (v111 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                                  {
                                    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v154, a1);
                                  }
                                  else
                                  {
                                    *(_QWORD *)&v113 = v111 - 0x2000000000000;
                                  }
                                  if (*((_DWORD *)v112 + 20))
                                  {
                                    v131 = v113;
                                    v132 = JSC::VM::hasExceptionsAfterHandlingTraps(v112);
                                    v113 = v131;
                                    if ((v132 & 1) != 0)
                                      goto LABEL_250;
                                  }
                                  LOWORD(v111) = 0;
                                  if (fabs(v113) != INFINITY && v113 != 0.0)
                                  {
                                    v114 = -floor(-v113);
                                    v115 = floor(v113);
                                    if (v113 >= 0.0)
                                      v116 = v115;
                                    else
                                      v116 = v114;
                                    v117 = fmod(v116, 65536.0);
                                    if (v117 < 0.0)
                                      v117 = v117 + 65536.0;
                                    LODWORD(v111) = (int)v117;
                                  }
                                }
                                WORD1(v180[0]) = v111;
                                WTF::AtomStringImpl::addLiteral();
                                v118 = *(WTF::StringImpl **)&v154[0];
                                v119 = JSC::JSObject::get(Object, a1, *(unint64_t *)&v154[0]);
                                if (v118)
                                {
                                  if (*(_DWORD *)v118 == 2)
                                    WTF::StringImpl::destroy(v118, v40);
                                  else
                                    *(_DWORD *)v118 -= 2;
                                }
                                if (*((_DWORD *)v181 + 20)
                                  && JSC::VM::hasExceptionsAfterHandlingTraps(v181))
                                {
LABEL_271:
                                  v156 = 1;
                                  goto LABEL_272;
                                }
                                if (v119 == 10)
                                {
                                  WebCore::throwRequiredMemberTypeError((int)a1, (int)&v181, "violatedDirective", 18, "SecurityPolicyViolationEventInit", 33, "DOMString", 10);
                                  goto LABEL_271;
                                }
                                *(_QWORD *)&v154[0] = v119;
                                v122 = (JSC::VM *)*((_QWORD *)a1 + 7);
                                if ((v119 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v119 + 5) != 2)
                                {
                                  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v154, a1);
LABEL_297:
                                  if (*((_DWORD *)v122 + 20))
                                  {
                                    v133 = JSC::VM::hasExceptionsAfterHandlingTraps(v122);
                                    v124 = v182;
                                    if (v133)
                                    {
                                      v160 = 1;
                                      v182 = 0;
                                      if (v124)
                                      {
                                        if (*(_DWORD *)v124 == 2)
                                          WTF::StringImpl::destroy(v124, v40);
                                        else
                                          *(_DWORD *)v124 -= 2;
                                      }
                                      v125 = 1;
                                      v156 = 1;
LABEL_303:
                                      ((void (*)(WTF::StringImpl **, uint64_t *))off_1E33088B8[v125])(&v182, &v159);
                                      goto LABEL_272;
                                    }
                                  }
                                  else
                                  {
                                    v124 = v182;
                                  }
                                  v160 = 0;
                                  v159 = 0;
                                  if (*((_QWORD *)&v179[0] + 1))
                                  {
                                    if (**((_DWORD **)&v179[0] + 1) == 2)
                                    {
                                      WTF::StringImpl::destroy(*((WTF::StringImpl **)&v179[0] + 1), v40);
                                      v125 = v160;
                                    }
                                    else
                                    {
                                      v125 = 0;
                                      **((_DWORD **)&v179[0] + 1) -= 2;
                                    }
                                  }
                                  else
                                  {
                                    v125 = 0;
                                  }
                                  LOWORD(v154[0]) = (_WORD)v177;
                                  BYTE2(v154[0]) = BYTE2(v177);
                                  v178 = 0u;
                                  *((_QWORD *)&v154[0] + 1) = v153;
                                  *(_QWORD *)&v154[1] = v150;
                                  v126 = *(_QWORD *)&v179[0];
                                  memset(v179, 0, sizeof(v179));
                                  *((_QWORD *)&v154[1] + 1) = v126;
                                  *(_QWORD *)&v154[2] = v124;
                                  *((_QWORD *)&v154[2] + 1) = v152;
                                  *(_QWORD *)&v154[3] = v151;
                                  *((_QWORD *)&v154[3] + 1) = v106;
                                  *(_QWORD *)&v154[4] = v100;
                                  *((_QWORD *)&v154[4] + 1) = v180[0];
                                  LODWORD(v155) = v180[1];
                                  v156 = 0;
                                  if (v125 == -1)
                                    goto LABEL_272;
                                  goto LABEL_303;
                                }
                                v123 = *(WTF::StringImpl **)(v119 + 8);
                                if ((v123 & 1) != 0)
                                {
                                  v123 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v119, a1);
                                  if (!v123)
                                    goto LABEL_296;
                                }
                                else if (!v123)
                                {
LABEL_296:
                                  v182 = v123;
                                  goto LABEL_297;
                                }
                                *(_DWORD *)v123 += 2;
                                goto LABEL_296;
                              }
                              v102 = *(WTF::StringImpl **)(v99 + 8);
                              if ((v102 & 1) != 0)
                              {
                                v102 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v99, a1);
                                if (!v102)
                                  goto LABEL_225;
                              }
                              else if (!v102)
                              {
LABEL_225:
                                v161 = v102;
                                goto LABEL_226;
                              }
                              *(_DWORD *)v102 += 2;
                              goto LABEL_225;
                            }
                            v90 = *(WTF::StringImpl **)(v87 + 8);
                            if ((v90 & 1) != 0)
                            {
                              v90 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v87, a1);
                              if (!v90)
                                goto LABEL_186;
                            }
                            else if (!v90)
                            {
LABEL_186:
                              v165 = v90;
                              goto LABEL_187;
                            }
                            *(_DWORD *)v90 += 2;
                            goto LABEL_186;
                          }
                          v78 = *(WTF::StringImpl **)(v76 + 8);
                          if ((v78 & 1) != 0)
                          {
                            v78 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v76, a1);
                            if (!v78)
                              goto LABEL_147;
                          }
                          else if (!v78)
                          {
LABEL_147:
                            v167 = v78;
                            goto LABEL_148;
                          }
                          *(_DWORD *)v78 += 2;
                          goto LABEL_147;
                        }
                      }
LABEL_119:
                      v68 = &WebCore::parseEnumerationFromString<WebCore::SecurityPolicyViolationEventDisposition>(WTF::String const&)::mappings;
LABEL_120:
                      v67 = *((unsigned __int8 *)v68 + 16);
                      v66 = 1;
                      goto LABEL_121;
                    }
LABEL_290:
                    v67 = 0;
                    v66 = 0;
                    goto LABEL_123;
                  }
                }
                else if (!v62)
                {
                  goto LABEL_109;
                }
                *(_DWORD *)v62 += 2;
                goto LABEL_109;
              }
            }
            v34 = 1;
            goto LABEL_57;
          }
        }
        v29 = 1;
        goto LABEL_46;
      }
      if ((v23 & 0xFFFE000000000002) != 0)
      {
        v24 = v23 == 7;
        goto LABEL_35;
      }
      v135 = *(unsigned __int8 *)(v23 + 5);
      if (v135 == 3)
      {
        v138 = *(_DWORD *)(v23 + 8);
      }
      else
      {
        if (v135 != 2)
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v23 & 0xFFFFFFFE) + 0xA) & 1) == 0)
          {
            v24 = 1;
            goto LABEL_35;
          }
          v134 = *(_QWORD *)(16 * (*(_DWORD *)v23 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
          goto LABEL_457;
        }
        v136 = *(_QWORD *)(v23 + 8);
        if ((v136 & 1) != 0)
          v137 = (int *)(v23 + 16);
        else
          v137 = (int *)(v136 + 4);
        v138 = *v137;
      }
      v134 = v138 == 0;
    }
LABEL_457:
    v24 = !v134;
    goto LABEL_35;
  }
  v14 = 0;
LABEL_101:
  if (v17 != -1)
    ((void (*)(_OWORD *, WTF::StringImpl **))off_1E330AAE8[v17])(v154, &v157);
  return v14;
}

uint64_t WebCore::JSSecurityPolicyViolationEvent::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEvent::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSSecurityPolicyViolationEventPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSSecurityPolicyViolationEventPrototype::create(WebCore::JSSecurityPolicyViolationEventPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<15u>(this, (uint64_t)&WebCore::JSSecurityPolicyViolationEvent::s_info, (uint64_t)&WebCore::JSSecurityPolicyViolationEventPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSSecurityPolicyViolationEvent>,(WebCore::DOMConstructorID)478>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3824);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEvent>,(WebCore::DOMConstructorID)448>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v34);
    v5[2] = SlowCase + (int)v34;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructor<WebCore::JSSecurityPolicyViolationEvent>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v35 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v35);
    v10[2848] = v2 + (int)v35;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000001, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSSecurityPolicyViolationEvent::s_info
         + ~((_QWORD)&WebCore::JSSecurityPolicyViolationEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSSecurityPolicyViolationEvent::s_info
                                                                                + ~((_QWORD)&WebCore::JSSecurityPolicyViolationEvent::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSSecurityPolicyViolationEvent::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSSecurityPolicyViolationEvent::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSEvent::prototype((WebCore::JSEvent *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSSecurityPolicyViolationEventPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v30 = (JSC::JSCell *)WebCore::JSSecurityPolicyViolationEventPrototype::create((WebCore::JSSecurityPolicyViolationEventPrototype *)a1, (JSC::VM *)a2, Structure, v29);
  v31 = WebCore::JSSecurityPolicyViolationEvent::createStructure((uint64_t *)a1, a2, v30);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v31, (uint64_t)&WebCore::JSSecurityPolicyViolationEvent::s_info);
LABEL_22:
  v32 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v32, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3824) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsSecurityPolicyViolationEventConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSSecurityPolicyViolationEventPrototype::s_info != (char **)(16
                                                                            * *(unsigned int *)(16
                                                                                              * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                              + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSSecurityPolicyViolationEvent>,(WebCore::DOMConstructorID)478>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsSecurityPolicyViolationEvent_documentURI(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 72);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

uint64_t WebCore::jsSecurityPolicyViolationEvent_referrer(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 80);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

uint64_t WebCore::jsSecurityPolicyViolationEvent_blockedURI(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 88);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

uint64_t WebCore::jsSecurityPolicyViolationEvent_effectiveDirective(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

uint64_t WebCore::jsSecurityPolicyViolationEvent_violatedDirective(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 96);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

uint64_t WebCore::jsSecurityPolicyViolationEvent_originalPolicy(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 112);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

uint64_t WebCore::jsSecurityPolicyViolationEvent_sourceFile(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 120);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

uint64_t WebCore::jsSecurityPolicyViolationEvent_sample(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 128);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

uint64_t WebCore::jsSecurityPolicyViolationEvent_disposition(uint64_t a1, uint64_t a2)
{
  return WebCore::convertEnumerationToJS<WebCore::SecurityPolicyViolationEventDisposition>(*(_QWORD *)(a1 + 56), (WTF::StringImpl *)*(unsigned __int8 *)(*(_QWORD *)(a2 + 24) + 136));
}

unint64_t WebCore::jsSecurityPolicyViolationEvent_statusCode(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int16 *)(*(_QWORD *)(a2 + 24) + 138) | 0xFFFE000000000000;
}

unint64_t WebCore::jsSecurityPolicyViolationEvent_lineno(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 24) + 140);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

unint64_t WebCore::jsSecurityPolicyViolationEvent_lineNumber(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 24) + 140);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

unint64_t WebCore::jsSecurityPolicyViolationEvent_colno(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 24) + 144);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

unint64_t WebCore::jsSecurityPolicyViolationEvent_columnNumber(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 24) + 144);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

uint64_t WebCore::JSSecurityPolicyViolationEvent::subspaceForImpl(WebCore::JSSecurityPolicyViolationEvent *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 3904);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 3904))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 3904);
    *(_QWORD *)(v8 + 3904) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 3904);
  *(_QWORD *)(v3 + 3904) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::createWrapper<WebCore::SecurityPolicyViolationEvent,WebCore::SecurityPolicyViolationEvent>(JSC::VM *a1, uint64_t *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char **v12;
  int v13;
  unint64_t v14;
  WebCore::JSEvent *v15;
  JSC::JSCell *v16;
  unint64_t Structure;
  JSC::Structure *v18;
  JSC::JSCell *v19;
  uint64_t v20;
  uint64_t v21;

  v5 = *a2;
  v6 = *((_QWORD *)a1 + 412);
  if (!v6)
    goto LABEL_7;
  v7 = *(_DWORD *)(v6 - 8);
  v8 = ((unint64_t)&WebCore::JSSecurityPolicyViolationEvent::s_info
      + ~((_QWORD)&WebCore::JSSecurityPolicyViolationEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSSecurityPolicyViolationEvent::s_info
                                                                             + ~((_QWORD)&WebCore::JSSecurityPolicyViolationEvent::s_info << 32)) >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  v11 = v7 & ((v10 >> 31) ^ v10);
  v12 = *(char ***)(v6 + 16 * v11);
  if (v12 != &WebCore::JSSecurityPolicyViolationEvent::s_info)
  {
    v13 = 1;
    while (v12)
    {
      v11 = ((_DWORD)v11 + v13) & v7;
      v12 = *(char ***)(v6 + 16 * v11);
      ++v13;
      if (v12 == &WebCore::JSSecurityPolicyViolationEvent::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v14 = *(_QWORD *)(v6 + 16 * v11 + 8);
  if (!v14)
  {
LABEL_7:
    v15 = (WebCore::JSEvent *)*((_QWORD *)a1 + 7);
    v16 = (JSC::JSCell *)WebCore::JSEvent::prototype(v15, a1, a3);
    Structure = WebCore::JSSecurityPolicyViolationEventPrototype::createStructure((uint64_t *)v15, (uint64_t)a1, v16);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v19 = (JSC::JSCell *)WebCore::JSSecurityPolicyViolationEventPrototype::create(v15, a1, Structure, v18);
    v20 = WebCore::JSSecurityPolicyViolationEvent::createStructure((uint64_t *)v15, (uint64_t)a1, v19);
    v14 = WebCore::cacheDOMStructure((JSCell *)a1, v20, (uint64_t)&WebCore::JSSecurityPolicyViolationEvent::s_info);
  }
  v21 = WebCore::JSSecurityPolicyViolationEvent::create(v14, a1, a2);
  WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)a1 + 415), v5, v21);
  return v21;
}

uint64_t WebCore::convertEnumerationToJS<WebCore::SecurityPolicyViolationEventDisposition>(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = (uint64_t *)(a1 + 41968);
  {
    WebCore::convertEnumerationToString(WebCore::SecurityPolicyViolationEventDisposition)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::SecurityPolicyViolationEventDisposition)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::SecurityPolicyViolationEventDisposition)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::SecurityPolicyViolationEventDisposition)::$_0::operator() const(void)::impl;
    unk_1EE2F4C20 = &WebCore::convertEnumerationToString(WebCore::SecurityPolicyViolationEventDisposition)::$_1::operator() const(void)::impl;
  }
  v3 = WebCore::convertEnumerationToString(WebCore::SecurityPolicyViolationEventDisposition)::values[a2];
  if (!v3)
    return *v2;
  v4 = *(_DWORD *)v3;
  v5 = *(_DWORD *)(v3 + 4);
  *(_DWORD *)v3 += 2;
  if (v5)
  {
    if (v5 != 1)
    {
LABEL_6:
      v6 = *(_QWORD *)(a1 + 64760);
      if (!v6 || v3 != *(_QWORD *)(v6 + 8))
      {
        v6 = JSC::jsStringWithCacheSlowCase();
        v4 = *(_DWORD *)v3 - 2;
      }
      goto LABEL_9;
    }
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_6;
      v9 = v10;
    }
    v6 = *(_QWORD *)(a1 + 8 * v9 + 42216);
  }
  else
  {
    v6 = *v2;
  }
LABEL_9:
  if (v4)
    *(_DWORD *)v3 = v4;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v3, a2);
  return v6;
}

uint64_t WebCore::JSServiceWorker::prototype(WebCore::JSServiceWorker *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  uint64_t v13;
  JSC::JSCell *v14;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v16;
  JSC::Structure *v17;
  JSC::JSCell *v18;
  uint64_t v19;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSServiceWorker::s_info + ~((_QWORD)&WebCore::JSServiceWorker::s_info << 32)) ^ (((unint64_t)&WebCore::JSServiceWorker::s_info + ~((_QWORD)&WebCore::JSServiceWorker::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSServiceWorker::s_info)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v12;
      if (v11 == &WebCore::JSServiceWorker::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v13)
  {
LABEL_7:
    v14 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(this, a2, a3);
    Structure = WebCore::JSServiceWorkerPrototype::createStructure((uint64_t *)this, (uint64_t)a2, v14);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v18 = (JSC::JSCell *)WebCore::JSServiceWorkerPrototype::create(this, Structure, v16, v17);
    v19 = WebCore::JSServiceWorker::createStructure((uint64_t *)this, (uint64_t)a2, v18);
    v13 = WebCore::cacheDOMStructure((JSCell *)a2, v19, (uint64_t)&WebCore::JSServiceWorker::s_info);
  }
  return *(_QWORD *)(v13 + 48);
}

uint64_t WebCore::JSServiceWorker::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEventTarget::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSServiceWorker::JSServiceWorker(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t result;

  v4 = *a4;
  *a4 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(a1, a2);
  *(_QWORD *)(result + 24) = v4;
  return result;
}

{
  uint64_t v4;
  uint64_t result;

  v4 = *a4;
  *a4 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(a1, a2);
  *(_QWORD *)(result + 24) = v4;
  return result;
}

uint64_t WebCore::JSServiceWorker::protectedWrapped@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 24);
  ++*(_DWORD *)(v2 + 24);
  *a2 = v2;
  return this;
}

unint64_t WebCore::JSServiceWorker::createPrototype(WebCore::JSServiceWorker *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  JSC::JSCell *v5;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v7;
  JSC::Structure *v8;

  v5 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(this, a2, a3);
  Structure = WebCore::JSServiceWorkerPrototype::createStructure((uint64_t *)this, (uint64_t)a2, v5);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  return WebCore::JSServiceWorkerPrototype::create(this, Structure, v7, v8);
}

uint64_t WebCore::JSServiceWorkerPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSServiceWorkerPrototype::create(WebCore::JSServiceWorkerPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<6u>(this, (uint64_t)&WebCore::JSServiceWorker::s_info, &WebCore::JSServiceWorkerPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSServiceWorker>,(WebCore::DOMConstructorID)903>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  unint64_t v16;
  WebCore::JSDOMGlobalObject *v17;
  uint64_t v18;
  unint64_t v20;
  unint64_t v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  int v24;
  int v25;
  uint64_t v26;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 7224);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEventTarget>,(WebCore::DOMConstructorID)450>(a1, a2);
  v7 = v6;
  LODWORD(v22) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v20 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v20);
    v5[2] = SlowCase + (int)v20;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v22, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSServiceWorker>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 >= v10[2847])
  {
    v2 = v10[2848];
    if ((v2 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v2 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_11;
    }
    v21 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v21);
    v10[2848] = v2 + (int)v21;
  }
  v10[2846] = v2 + 48;
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v22);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v22);
  v14 = v22;
  v22 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v22);
  v16 = *(_QWORD *)(v5[227] + 2160);
  v18 = WebCore::JSServiceWorker::prototype((WebCore::JSServiceWorker *)a1, (JSC::VM *)a2, v17);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v16, v18, 14, (uint64_t)&v22);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 7224) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsServiceWorkerConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSServiceWorkerPrototype::s_info != (char **)(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                               + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSServiceWorker>,(WebCore::DOMConstructorID)903>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsServiceWorker_scriptURL(uint64_t a1, uint64_t a2, const WTF::String *a3)
{
  return JSC::jsOwnedString(*(JSC **)(a1 + 56), (JSC::VM *)(*(_QWORD *)(a2 + 24) + 72), a3);
}

uint64_t WebCore::jsServiceWorker_state(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = (uint64_t *)(v2 + 41968);
  v4 = *(unsigned __int8 *)(*((_QWORD *)a2 + 3) + 112);
  if ((byte_1EE33694A & 1) == 0)
  {
    dword_1ECE79E60 += 2;
    byte_1EE33694A = 1;
    qword_1EE336B88 = (uint64_t)&dword_1ECE79E60;
    dword_1ECE79E80 += 2;
    qword_1EE336B90 = (uint64_t)&dword_1ECE79E80;
    dword_1ECE79EA0 += 2;
    qword_1EE336B98 = (uint64_t)&dword_1ECE79EA0;
    dword_1ECE79EC0 += 2;
    qword_1EE336BA0 = (uint64_t)&dword_1ECE79EC0;
    dword_1ECE79EE0 += 2;
    qword_1EE336BA8 = (uint64_t)&dword_1ECE79EE0;
    dword_1ECE79F00 += 2;
    qword_1EE336BB0 = (uint64_t)&dword_1ECE79F00;
  }
  v5 = *(_QWORD *)&_MergedGlobals_774[8 * v4 + 576];
  if (!v5)
    return *v3;
  v6 = *(_DWORD *)v5;
  v7 = *(_DWORD *)(v5 + 4);
  *(_DWORD *)v5 += 2;
  if (v7)
  {
    if (v7 != 1)
    {
LABEL_6:
      v8 = *(_QWORD *)(v2 + 64760);
      if (!v8 || v5 != *(_QWORD *)(v8 + 8))
      {
        v8 = JSC::jsStringWithCacheSlowCase();
        v6 = *(_DWORD *)v5 - 2;
      }
      goto LABEL_9;
    }
    v10 = *(unsigned __int8 **)(v5 + 8);
    if ((*(_BYTE *)(v5 + 16) & 4) != 0)
    {
      v11 = *v10;
    }
    else
    {
      v12 = *(unsigned __int16 *)v10;
      if (v12 > 0xFF)
        goto LABEL_6;
      v11 = v12;
    }
    v8 = *(_QWORD *)(v2 + 8 * v11 + 42216);
  }
  else
  {
    v8 = *v3;
  }
LABEL_9:
  if (v6)
    *(_DWORD *)v5 = v6;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v5, a2);
  return v8;
}

uint64_t WebCore::jsServiceWorker_onstatechange(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  bmalloc::api *v12;
  void *v13;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 + 6);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 1984), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 + 6) == 1)
  {
    WebCore::ServiceWorker::~ServiceWorker(v5, v9);
    bmalloc::api::isoDeallocate(v12, v13);
  }
  else
  {
    --*((_DWORD *)v5 + 6);
  }
  return v10;
}

BOOL WebCore::setJSServiceWorker_onstatechange(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  bmalloc::api *v17;
  void *v18;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSServiceWorker::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSServiceWorker::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 + 6);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 1984), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 + 6) == 1)
      {
        WebCore::ServiceWorker::~ServiceWorker(v11, v15);
        bmalloc::api::isoDeallocate(v17, v18);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 + 6);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsServiceWorker_onerror(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  bmalloc::api *v12;
  void *v13;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 + 6);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 784), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 + 6) == 1)
  {
    WebCore::ServiceWorker::~ServiceWorker(v5, v9);
    bmalloc::api::isoDeallocate(v12, v13);
  }
  else
  {
    --*((_DWORD *)v5 + 6);
  }
  return v10;
}

BOOL WebCore::setJSServiceWorker_onerror(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  bmalloc::api *v17;
  void *v18;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSServiceWorker::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSServiceWorker::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 + 6);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 784), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 + 6) == 1)
      {
        WebCore::ServiceWorker::~ServiceWorker(v11, v15);
        bmalloc::api::isoDeallocate(v17, v18);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 + 6);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::JSServiceWorker::subspaceForImpl(WebCore::JSServiceWorker *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  WTF *v17;
  void *v18;
  int v19;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 7304);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  v21 = *(_QWORD *)(v8 + 7304);
  if (!v21)
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v23, "IsoSpace T");
    v22 = 0;
    MEMORY[0x19AEA3204](v9, &v23, (char *)this + 192, (char *)this + 1872, 32, 8, &v22);
    v11 = v22;
    v22 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v23;
    v23 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v21 = v9;
    v13 = *(_QWORD *)(v8 + 7304);
    *(_QWORD *)(v8 + 7304) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = *(unsigned int *)(v6 + 2844);
    if ((_DWORD)v14 == *(_DWORD *)(v6 + 2840))
    {
      v15 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v6 + 2832, v14 + 1, (unint64_t)&v21);
      v14 = *(unsigned int *)(v6 + 2844);
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = *v15;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = v9;
    }
    *(_DWORD *)(v6 + 2844) = v14 + 1;
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v16 = *(_QWORD *)(v3 + 7304);
  *(_QWORD *)(v3 + 7304) = v4;
  if (v16)
  {
    v17 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v17, v18);
  }
  v19 = __ldxr((unsigned __int8 *)v6);
  if (v19 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSServiceWorkerOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(_QWORD **)(*(_QWORD *)a2 + 24);
  v6 = v5[5];
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7 || *(_BYTE *)(v7 + 180))
    return 0;
  if (v5[6] || (result = (*(uint64_t (**)(_QWORD *))(v5[4] + 64))(v5 + 4), (_DWORD)result))
  {
    if (a5)
    {
      *a5 = "ActiveDOMObject with pending activity";
      a5[1] = 38;
    }
    return 1;
  }
  return result;
}

void WebCore::JSServiceWorkerOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WebCore::ServiceWorker *v3;
  int v4;
  _DWORD *v5;
  bmalloc::api *v6;
  void *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  WebCore::ServiceWorker *v16;
  int v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;

  v3 = *(WebCore::ServiceWorker **)(*(_QWORD *)a2 + 24);
  v4 = *((_DWORD *)v3 + 6);
  *((_DWORD *)v3 + 6) = v4 + 1;
  v5 = (_DWORD *)((char *)v3 + 8);
  if (!v3)
    v5 = 0;
  if (*(_DWORD *)(a3 + 48))
  {
    v10 = *(_QWORD *)(a3 + 32);
    v8 = (uint64_t *)(a3 + 32);
    v9 = v10;
    if (v10)
    {
      v11 = *(_DWORD *)(v9 - 8);
      v12 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
      v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
      v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
      v15 = v11 & ((v14 >> 31) ^ v14);
      v16 = *(WebCore::ServiceWorker **)(v9 + 16 * v15);
      if (v16 != v3)
      {
        v17 = 1;
        while (v16)
        {
          v15 = ((_DWORD)v15 + v17) & v11;
          v16 = *(WebCore::ServiceWorker **)(v9 + 16 * v15);
          ++v17;
          if (v16 == v3)
            goto LABEL_14;
        }
        v15 = *(unsigned int *)(v9 - 4);
      }
LABEL_14:
      if (v15 != *(_DWORD *)(v9 - 4))
      {
        v18 = (_QWORD *)(v9 + 16 * v15);
        *v18 = -1;
        v21 = v18[1];
        v20 = v18 + 1;
        v19 = v21;
        if (v21)
        {
          *(_QWORD *)(v19 + 8) = 3;
          *v20 = 0;
        }
        ++*(_DWORD *)(*v8 - 16);
        v22 = *v8;
        if (*v8)
          v23 = *(_DWORD *)(v22 - 12) - 1;
        else
          v23 = -1;
        *(_DWORD *)(v22 - 12) = v23;
        v24 = *v8;
        if (*v8)
        {
          v25 = 6 * *(_DWORD *)(v24 - 12);
          v26 = *(_DWORD *)(v24 - 4);
          if (v25 < v26 && v26 >= 9)
            WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v8, v26 >> 1, 0);
        }
      }
    }
    v4 = *((_DWORD *)v3 + 6) - 1;
  }
  else if (*(_QWORD *)v5)
  {
    *(_QWORD *)(*(_QWORD *)v5 + 8) = 3;
    *(_QWORD *)v5 = 0;
  }
  if (v4)
  {
    *((_DWORD *)v3 + 6) = v4;
  }
  else
  {
    WebCore::ServiceWorker::~ServiceWorker(v3, a2);
    bmalloc::api::isoDeallocate(v6, v7);
  }
}

unint64_t WebCore::wrap<WebCore::ServiceWorker>(int a1, JSC::VM *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t SlowCase;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char **v14;
  int v15;
  unint64_t v16;
  WebCore::JSEventTarget *v17;
  JSC::JSCell *v18;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v20;
  JSC::Structure *v21;
  JSC::JSCell *v22;
  uint64_t v23;
  WebCore::JSServiceWorker *v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *Allocator;
  uint64_t v30;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;

  v5 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v5 + 48))
  {
    v35 = *(_QWORD *)(v5 + 32);
    if (!v35)
      goto LABEL_5;
    v36 = *(_DWORD *)(v35 - 8);
    v37 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v38 = 9 * ((v37 + ~(v37 << 13)) ^ ((v37 + ~(v37 << 13)) >> 8));
    v39 = (v38 ^ (v38 >> 15)) + ~((v38 ^ (v38 >> 15)) << 27);
    v40 = v36 & ((v39 >> 31) ^ v39);
    v41 = *(_QWORD *)(v35 + 16 * v40);
    if (v41 != a3)
    {
      v42 = 1;
      while (v41)
      {
        v40 = ((_DWORD)v40 + v42) & v36;
        v41 = *(_QWORD *)(v35 + 16 * v40);
        ++v42;
        if (v41 == a3)
          goto LABEL_43;
      }
      goto LABEL_5;
    }
LABEL_43:
    v6 = *(_QWORD *)(v35 + 16 * v40 + 8);
    if (!v6)
      goto LABEL_5;
  }
  else
  {
    v6 = *(_QWORD *)(a3 + 8);
    if (!v6)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v6 + 8) & 3) == 0)
  {
    SlowCase = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
      return SlowCase;
  }
LABEL_5:
  ++*(_DWORD *)(a3 + 24);
  if (*(uint64_t (***)(WebCore::ServiceWorker *__hidden))a3 != off_1E347EDF0)
  {
    __break(0xC471u);
    JUMPOUT(0x194F68F8CLL);
  }
  v8 = *((_QWORD *)a2 + 412);
  if (v8)
  {
    v9 = *(_DWORD *)(v8 - 8);
    v10 = ((unint64_t)&WebCore::JSServiceWorker::s_info + ~((_QWORD)&WebCore::JSServiceWorker::s_info << 32)) ^ (((unint64_t)&WebCore::JSServiceWorker::s_info + ~((_QWORD)&WebCore::JSServiceWorker::s_info << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = *(char ***)(v8 + 16 * v13);
    if (v14 == &WebCore::JSServiceWorker::s_info)
    {
LABEL_11:
      v16 = *(_QWORD *)(v8 + 16 * v13 + 8);
      if (v16)
        goto LABEL_13;
    }
    else
    {
      v15 = 1;
      while (v14)
      {
        v13 = ((_DWORD)v13 + v15) & v9;
        v14 = *(char ***)(v8 + 16 * v13);
        ++v15;
        if (v14 == &WebCore::JSServiceWorker::s_info)
          goto LABEL_11;
      }
    }
  }
  v17 = (WebCore::JSEventTarget *)*((_QWORD *)a2 + 7);
  v18 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(v17, a2, (WebCore::JSDOMGlobalObject *)a3);
  Structure = WebCore::JSServiceWorkerPrototype::createStructure((uint64_t *)v17, (uint64_t)a2, v18);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v22 = (JSC::JSCell *)WebCore::JSServiceWorkerPrototype::create(v17, Structure, v20, v21);
  v23 = WebCore::JSServiceWorker::createStructure((uint64_t *)v17, (uint64_t)a2, v22);
  v16 = WebCore::cacheDOMStructure((JSCell *)a2, v23, (uint64_t)&WebCore::JSServiceWorker::s_info);
LABEL_13:
  v24 = (WebCore::JSServiceWorker *)*((_QWORD *)a2 + 7);
  v25 = (_QWORD *)WebCore::JSServiceWorker::subspaceForImpl(v24, a2);
  SlowCase = v25[3];
  if (SlowCase < v25[4])
  {
LABEL_14:
    v25[3] = SlowCase + 32;
    goto LABEL_15;
  }
  SlowCase = v25[5];
  if ((SlowCase & 1) == 0)
  {
    v43 = *(_QWORD *)(SlowCase + 8) ^ v25[6];
    v25[4] = SlowCase + HIDWORD(v43);
    v25[5] = SlowCase + (int)v43;
    goto LABEL_14;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_15:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v16);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*((_BYTE *)v24 + 755))
    __dmb(0xAu);
  v26 = *((_QWORD *)a2 + 415);
  if ((byte_1EE336990 & 1) == 0)
  {
    qword_1EE336988 = (uint64_t)&off_1E3307BA0;
    byte_1EE336990 = 1;
  }
  if (!*(_DWORD *)(v26 + 48))
  {
    if ((SlowCase & 8) != 0)
      v27 = (SlowCase - 112) | 1;
    else
      v27 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v27 & 1) != 0)
      v28 = v27 + 47;
    else
      v28 = *(_QWORD *)v27 + 32;
    Allocator = *(_QWORD **)(v28 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v28 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &qword_1EE336988;
    Allocator[2] = v26;
    v30 = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = Allocator;
    if (!v30)
      return SlowCase;
LABEL_37:
    *(_QWORD *)(v30 + 8) = 3;
    return SlowCase;
  }
  v45 = a3;
  if ((SlowCase & 8) != 0)
    v32 = (SlowCase - 112) | 1;
  else
    v32 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v32 & 1) != 0)
    v33 = v32 + 47;
  else
    v33 = *(_QWORD *)v32 + 32;
  v34 = *(_QWORD **)(v33 + 16);
  if (!v34)
    v34 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v33 + 16) = *v34;
  *v34 = SlowCase;
  v34[1] = &qword_1EE336988;
  v34[2] = v26;
  v44 = v34;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v26 + 32), &v45, (uint64_t *)&v44);
  v30 = (uint64_t)v44;
  if (v44)
    goto LABEL_37;
  return SlowCase;
}

uint64_t WebCore::JSServiceWorker::toWrapped(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL4 v3;
  char **v4;
  BOOL v5;

  if ((a2 & 0xFFFE000000000002) != 0)
    return 0;
  v2 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v3 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v4 = (char **)(16 * v2);
  if ((_DWORD)v2)
    v5 = v4 == &WebCore::JSServiceWorker::s_info;
  else
    v5 = 1;
  if (!v5)
  {
    do
    {
      v4 = (char **)v4[2];
      v3 = v4 != 0;
    }
    while (v4 != &WebCore::JSServiceWorker::s_info && v4 != 0);
  }
  if (v3)
    return *(_QWORD *)(a2 + 24);
  else
    return 0;
}

uint64_t WebCore::JSServiceWorkerClient::prototype(WebCore::JSServiceWorkerClient *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  uint64_t v13;
  unint64_t Structure;
  JSC::Structure *v15;
  JSC::JSCell *v16;
  uint64_t v17;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSServiceWorkerClient::s_info
      + ~((_QWORD)&WebCore::JSServiceWorkerClient::s_info << 32)) ^ (((unint64_t)&WebCore::JSServiceWorkerClient::s_info
                                                                    + ~((_QWORD)&WebCore::JSServiceWorkerClient::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSServiceWorkerClient::s_info)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v12;
      if (v11 == &WebCore::JSServiceWorkerClient::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v13)
  {
LABEL_7:
    Structure = WebCore::JSServiceWorkerClientPrototype::createStructure((uint64_t *)this, (uint64_t)a2, *((JSC::JSCell **)a2 + 82));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v16 = (JSC::JSCell *)WebCore::JSServiceWorkerClientPrototype::create(this, a2, Structure, v15);
    v17 = WebCore::JSServiceWorkerClient::createStructure((uint64_t *)this, (uint64_t)a2, v16);
    v13 = WebCore::cacheDOMStructure((JSCell *)a2, v17, (uint64_t)&WebCore::JSServiceWorkerClient::s_info);
  }
  return *(_QWORD *)(v13 + 48);
}

_DWORD *WebCore::JSServiceWorkerClient::destroy(WebCore::JSServiceWorkerClient *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[4];
  }
  return result;
}

uint64_t WebCore::JSServiceWorkerClient::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSServiceWorkerClient::JSServiceWorkerClient(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v6;

  result = WebCore::JSDOMObject::JSDOMObject(a1, a2);
  v6 = *a4;
  *a4 = 0;
  *(_QWORD *)(result + 24) = v6;
  return result;
}

{
  uint64_t result;
  uint64_t v6;

  result = WebCore::JSDOMObject::JSDOMObject(a1, a2);
  v6 = *a4;
  *a4 = 0;
  *(_QWORD *)(result + 24) = v6;
  return result;
}

unint64_t WebCore::JSServiceWorkerClient::createPrototype(WebCore::JSServiceWorkerClient *this, JSC::JSCell **a2, WebCore::JSDOMGlobalObject *a3)
{
  unint64_t Structure;
  JSC::Structure *v6;

  Structure = WebCore::JSServiceWorkerClientPrototype::createStructure((uint64_t *)this, (uint64_t)a2, a2[82]);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  return WebCore::JSServiceWorkerClientPrototype::create(this, (JSC::VM *)a2, Structure, v6);
}

uint64_t WebCore::JSServiceWorkerClientPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSServiceWorkerClientPrototype::create(WebCore::JSServiceWorkerClientPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<6u>(this, (uint64_t)&WebCore::JSServiceWorkerClient::s_info, &WebCore::JSServiceWorkerClientPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSServiceWorkerClient>,(WebCore::DOMConstructorID)904>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  JSC::Structure *v26;
  JSC::JSCell *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  unint64_t v34;
  int v35;
  int v36;
  uint64_t v37;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 7232);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v33) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v31 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v31);
    v5[2] = SlowCase + (int)v31;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v33, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSServiceWorkerClient>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v32 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v32);
    v9[2848] = v2 + (int)v32;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v33 = 0;
  v34 = v2;
  v35 = -1;
  v36 = 0x1000000;
  v37 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v33);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v33);
  v13 = v33;
  v33 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v33 = 0;
  v34 = v2;
  v35 = -1;
  v36 = 0x1000000;
  v37 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v33);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSServiceWorkerClient::s_info
         + ~((_QWORD)&WebCore::JSServiceWorkerClient::s_info << 32)) ^ (((unint64_t)&WebCore::JSServiceWorkerClient::s_info
                                                                       + ~((_QWORD)&WebCore::JSServiceWorkerClient::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSServiceWorkerClient::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSServiceWorkerClient::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSServiceWorkerClientPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v27 = (JSC::JSCell *)WebCore::JSServiceWorkerClientPrototype::create((WebCore::JSServiceWorkerClientPrototype *)a1, (JSC::VM *)a2, Structure, v26);
  v28 = WebCore::JSServiceWorkerClient::createStructure((uint64_t *)a1, a2, v27);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v28, (uint64_t)&WebCore::JSServiceWorkerClient::s_info);
LABEL_22:
  v29 = *(_QWORD *)(v24 + 48);
  v33 = 0;
  v34 = v2;
  v35 = -1;
  v36 = 0x1000000;
  v37 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v29, 14, (uint64_t)&v33);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 7232) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsServiceWorkerClientConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSServiceWorkerClientPrototype::s_info != (char **)(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                     + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSServiceWorkerClient>,(WebCore::DOMConstructorID)904>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsServiceWorkerClient_url(uint64_t a1, uint64_t a2, const WTF::String *a3)
{
  return JSC::jsOwnedString(*(JSC **)(a1 + 56), (JSC::VM *)(*(_QWORD *)(a2 + 24) + 72), a3);
}

uint64_t WebCore::jsServiceWorkerClient_frameType(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;

  v2 = *(unsigned __int8 *)(*((_QWORD *)a2 + 3) + 65);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = (uint64_t *)(v3 + 41968);
  if ((byte_1EE33694B & 1) == 0)
  {
    dword_1ECE79F20 += 2;
    byte_1EE33694B = 1;
    qword_1EE336B48 = (uint64_t)&dword_1ECE79F20;
    dword_1ECE79F40 += 2;
    qword_1EE336B50 = (uint64_t)&dword_1ECE79F40;
    dword_1ECE79F60 += 2;
    qword_1EE336B58 = (uint64_t)&dword_1ECE79F60;
    dword_1ECE79F80 += 2;
    qword_1EE336B60 = (uint64_t)&dword_1ECE79F80;
  }
  v5 = *(_QWORD *)&_MergedGlobals_774[8 * v2 + 512];
  if (!v5)
    return *v4;
  v6 = *(_DWORD *)v5;
  v7 = *(_DWORD *)(v5 + 4);
  *(_DWORD *)v5 += 2;
  if (v7)
  {
    if (v7 != 1)
    {
LABEL_6:
      v8 = *(_QWORD *)(v3 + 64760);
      if (!v8 || v5 != *(_QWORD *)(v8 + 8))
      {
        v8 = JSC::jsStringWithCacheSlowCase();
        v6 = *(_DWORD *)v5 - 2;
      }
      goto LABEL_9;
    }
    v10 = *(unsigned __int8 **)(v5 + 8);
    if ((*(_BYTE *)(v5 + 16) & 4) != 0)
    {
      v11 = *v10;
    }
    else
    {
      v12 = *(unsigned __int16 *)v10;
      if (v12 > 0xFF)
        goto LABEL_6;
      v11 = v12;
    }
    v8 = *(_QWORD *)(v3 + 8 * v11 + 42216);
  }
  else
  {
    v8 = *v4;
  }
LABEL_9:
  if (v6)
    *(_DWORD *)v5 = v6;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v5, a2);
  return v8;
}

uint64_t WebCore::jsServiceWorkerClient_type(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;

  v2 = *(unsigned __int8 *)(*((_QWORD *)a2 + 3) + 64);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = (uint64_t *)(v3 + 41968);
  if ((byte_1EE33694C & 1) == 0)
  {
    dword_1ECE79FA0 += 2;
    byte_1EE33694C = 1;
    qword_1EE336B68 = (uint64_t)&dword_1ECE79FA0;
    dword_1ECE79FC0 += 2;
    qword_1EE336B70 = (uint64_t)&dword_1ECE79FC0;
    dword_1ECE79FE0 += 2;
    qword_1EE336B78 = (uint64_t)&dword_1ECE79FE0;
    dword_1ECE7A000 += 2;
    qword_1EE336B80 = (uint64_t)&dword_1ECE7A000;
  }
  v5 = *(_QWORD *)&_MergedGlobals_774[8 * v2 + 544];
  if (!v5)
    return *v4;
  v6 = *(_DWORD *)v5;
  v7 = *(_DWORD *)(v5 + 4);
  *(_DWORD *)v5 += 2;
  if (v7)
  {
    if (v7 != 1)
    {
LABEL_6:
      v8 = *(_QWORD *)(v3 + 64760);
      if (!v8 || v5 != *(_QWORD *)(v8 + 8))
      {
        v8 = JSC::jsStringWithCacheSlowCase();
        v6 = *(_DWORD *)v5 - 2;
      }
      goto LABEL_9;
    }
    v10 = *(unsigned __int8 **)(v5 + 8);
    if ((*(_BYTE *)(v5 + 16) & 4) != 0)
    {
      v11 = *v10;
    }
    else
    {
      v12 = *(unsigned __int16 *)v10;
      if (v12 > 0xFF)
        goto LABEL_6;
      v11 = v12;
    }
    v8 = *(_QWORD *)(v3 + 8 * v11 + 42216);
  }
  else
  {
    v8 = *v4;
  }
LABEL_9:
  if (v6)
    *(_DWORD *)v5 = v6;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v5, a2);
  return v8;
}

uint64_t WebCore::jsServiceWorkerClient_id(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned int v10;
  unsigned int v12;
  WTF::StringImpl *v13;
  _OWORD v14[2];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a2 + 24);
  v4 = *(_OWORD *)(v3 + 48);
  v14[0] = *(_OWORD *)(v3 + 32);
  v14[1] = v4;
  WTF::UUID::toString((WTF::UUID *)v14);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = v13;
  if (!v13 || (v7 = *((_DWORD *)v13 + 1)) == 0)
  {
    v8 = *(_QWORD *)(v5 + 41968);
LABEL_7:
    if (!v6)
      return v8;
    goto LABEL_13;
  }
  if (v7 != 1)
    goto LABEL_4;
  v9 = (unsigned __int8 *)*((_QWORD *)v13 + 1);
  if ((*((_BYTE *)v13 + 16) & 4) != 0)
  {
    v10 = *v9;
LABEL_12:
    v8 = *(_QWORD *)(v5 + 8 * v10 + 42216);
    goto LABEL_13;
  }
  v12 = *(unsigned __int16 *)v9;
  if (v12 <= 0xFF)
  {
    v10 = v12;
    goto LABEL_12;
  }
LABEL_4:
  v8 = *(_QWORD *)(v5 + 64760);
  if (!v8 || v13 != *(WTF::StringImpl **)(v8 + 8))
  {
    v8 = JSC::jsStringWithCacheSlowCase();
    v6 = v13;
    goto LABEL_7;
  }
LABEL_13:
  if (*(_DWORD *)v6 == 2)
    WTF::StringImpl::destroy(v6, v6);
  else
    *(_DWORD *)v6 -= 2;
  return v8;
}

uint64_t WebCore::JSServiceWorkerClient::subspaceForImpl(WebCore::JSServiceWorkerClient *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 7312);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 7312))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 7312);
    *(_QWORD *)(v8 + 7312) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 7312);
  *(_QWORD *)(v3 + 7312) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSServiceWorkerClientOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

_QWORD *WebCore::JSServiceWorkerClientOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[4];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[4] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
  --v3[4];
  return result;
}

uint64_t WebCore::JSServiceWorkerClient::toWrapped(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL4 v3;
  char **v4;
  BOOL v5;

  if ((a2 & 0xFFFE000000000002) != 0)
    return 0;
  v2 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v3 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v4 = (char **)(16 * v2);
  if ((_DWORD)v2)
    v5 = v4 == &WebCore::JSServiceWorkerClient::s_info;
  else
    v5 = 1;
  if (!v5)
  {
    do
    {
      v4 = (char **)v4[2];
      v3 = v4 != 0;
    }
    while (v4 != &WebCore::JSServiceWorkerClient::s_info && v4 != 0);
  }
  if (v3)
    return *(_QWORD *)(a2 + 24);
  else
    return 0;
}

uint64_t WebCore::JSServiceWorkerClients::destroy(uint64_t this, JSC::JSCell *a2)
{
  WTF *v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD **v5;
  _DWORD *v6;

  v2 = *(WTF **)(this + 24);
  *(_QWORD *)(this + 24) = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = *((_QWORD *)v2 + 1);
      if (v3)
      {
        v4 = *(unsigned int *)(v3 - 4);
        if ((_DWORD)v4)
        {
          v5 = (_DWORD **)(v3 + 8);
          do
          {
            if (*(v5 - 1) != (_DWORD *)-1)
            {
              v6 = *v5;
              *v5 = 0;
              if (v6)
              {
                if (v6[4] == 1)
                  (*(void (**)(_DWORD *, JSC::JSCell *))(*(_QWORD *)v6 + 16))(v6, a2);
                else
                  --v6[4];
              }
            }
            v5 += 2;
            --v4;
          }
          while (v4);
        }
        WTF::fastFree((WTF *)(v3 - 16), a2);
      }
      return WTF::fastFree(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
  return this;
}

uint64_t WebCore::JSServiceWorkerClients::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSServiceWorkerClientsPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSServiceWorkerClientsPrototype::create(WebCore::JSServiceWorkerClientsPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<5u>(this, (uint64_t)&WebCore::JSServiceWorkerClients::s_info, &WebCore::JSServiceWorkerClientsPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSServiceWorkerClients>,(WebCore::DOMConstructorID)905>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 7240);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSServiceWorkerClients>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSServiceWorkerClients::s_info
         + ~((_QWORD)&WebCore::JSServiceWorkerClients::s_info << 32)) ^ (((unint64_t)&WebCore::JSServiceWorkerClients::s_info
                                                                        + ~((_QWORD)&WebCore::JSServiceWorkerClients::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSServiceWorkerClients::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSServiceWorkerClients::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSServiceWorkerClientsPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSServiceWorkerClientsPrototype::create((WebCore::JSServiceWorkerClientsPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSServiceWorkerClients::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSServiceWorkerClients::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 7240) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsServiceWorkerClientsConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSServiceWorkerClientsPrototype::s_info != (char **)(16
                                                                    * *(unsigned int *)(16
                                                                                      * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                      + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSServiceWorkerClients>,(WebCore::DOMConstructorID)905>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::JSServiceWorkerClientsOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  void *v5;
  WTF::ConcurrentPtrHashSet *v6;
  _DWORD *v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  void *v14;
  uint64_t result;
  uint64_t v16;
  void *v17;

  v5 = *(void **)(*(_QWORD *)a2 + 24);
  if (a5)
  {
    *a5 = "Reachable from ServiceWorkerClients";
    a5[1] = 36;
  }
  v6 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v7 = (_DWORD *)*((_QWORD *)v6 + 6);
  if ((_DWORD *)((char *)v6 + 56) == v7)
  {
    v16 = a4;
    v17 = v5;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v6, v5);
    a4 = v16;
    v5 = v17;
    if ((_DWORD)result)
    {
LABEL_12:
      if (*(_BYTE *)(a4 + 131))
        (*(void (**)(uint64_t, void *))(*(_QWORD *)a4 + 152))(a4, v5);
      return 1;
    }
  }
  else
  {
    v8 = v7[1];
    v9 = ((unint64_t)v5 + ~((_QWORD)v5 << 32)) ^ (((unint64_t)v5 + ~((_QWORD)v5 << 32)) >> 22);
    v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    v12 = v8 & ((v11 >> 31) ^ v11);
    v13 = v12;
    while (1)
    {
      v14 = *(void **)&v7[2 * v13 + 4];
      if (!v14)
        return 0;
      if (v5 == v14)
        goto LABEL_12;
      v13 = (v13 + 1) & v8;
      if (v13 == v12)
      {
        __break(0xC471u);
        JUMPOUT(0x194F6AC4CLL);
      }
    }
  }
  return result;
}

