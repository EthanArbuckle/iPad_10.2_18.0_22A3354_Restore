uint64_t *WebCore::DebugPageOverlays::didLayout(uint64_t *this, WebCore::LocalFrame *a2)
{
  uint64_t v2;
  WebCore::Page *v3;
  uint64_t *v4;
  uint64_t v5;

  v2 = this[3];
  if (v2)
  {
    v3 = *(WebCore::Page **)(v2 + 8);
    if (v3)
    {
      v4 = this;
      this = (uint64_t *)WebCore::DebugPageOverlays::sharedDebugOverlays;
      if (WebCore::DebugPageOverlays::sharedDebugOverlays)
      {
        v5 = (uint64_t)v4;
        this = (uint64_t *)WebCore::DebugPageOverlays::hasOverlaysForPage((WebCore::DebugPageOverlays *)WebCore::DebugPageOverlays::sharedDebugOverlays, v3);
        if ((_DWORD)this)
        {
          WebCore::DebugPageOverlays::regionChanged((uint64_t *)WebCore::DebugPageOverlays::sharedDebugOverlays, v5, 0);
          WebCore::DebugPageOverlays::regionChanged((uint64_t *)WebCore::DebugPageOverlays::sharedDebugOverlays, v5, 1u);
          WebCore::DebugPageOverlays::regionChanged((uint64_t *)WebCore::DebugPageOverlays::sharedDebugOverlays, v5, 2u);
          return WebCore::DebugPageOverlays::regionChanged((uint64_t *)WebCore::DebugPageOverlays::sharedDebugOverlays, v5, 3u);
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::RenderLayerScrollableArea::scrollTo(WebCore::IntPoint const&)::$_1::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  WebCore::RenderObject *v5;

  if ((*(_BYTE *)(a1 + 45) & 0x10) == 0)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (!v3)
      return v3;
    a1 = *(_QWORD *)(v3 + 8);
    if (!a1)
      return 0;
    while ((*(_BYTE *)(a1 + 45) & 0x10) == 0)
    {
      v4 = *(_QWORD *)(a1 + 32);
      if (!v4)
        return 0;
      v3 = 0;
      a1 = *(_QWORD *)(v4 + 8);
      if (!a1)
        return v3;
    }
  }
LABEL_11:
  if ((*(_BYTE *)(a1 + 21) & 0x80) != 0)
  {
    v3 = *(_QWORD *)(a1 + 144);
    if (v3)
    {
      if (v3 != a2)
      {
        v5 = *(WebCore::RenderObject **)(v3 + 32);
        while (1)
        {
          v5 = WebCore::RenderObject::containingBlock(v5);
          if (!v5 || *((_BYTE *)v5 + 46) == 49)
            break;
          if (*((_QWORD *)v5 + 18) == a2)
            return 1;
        }
        return 0;
      }
      return 1;
    }
  }
  else
  {
    while (1)
    {
      v3 = *(_QWORD *)(a1 + 32);
      if (!v3)
        break;
      a1 = *(_QWORD *)(v3 + 8);
      if (!a1)
        return 0;
      if ((*(_BYTE *)(a1 + 45) & 0x10) != 0)
        goto LABEL_11;
    }
  }
  return v3;
}

uint64_t *std::unique_ptr<WebCore::RenderMarquee>::operator=[abi:sn180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v3 = *a2;
  *a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    if (*(_BYTE *)(v4 + 88) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v4 + 84));
    }
    *(_QWORD *)(v4 + 8) = off_1E31F7378;
    v5 = *(_QWORD *)(v4 + 56);
    *(_QWORD *)(v4 + 56) = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    WebCore::TimerBase::~TimerBase((WebCore::TimerBase *)(v4 + 8));
    WTF::fastFree((WTF *)v4, v6);
  }
  return a1;
}

uint64_t WebCore::RenderLayerScrollableArea::setScrollOffset(WebCore::RenderLayerScrollableArea *this, const WebCore::IntPoint *a2)
{
  unint64_t v3;

  v3 = WebCore::ScrollableArea::scrollPositionFromOffset((uint64_t)this, *(_QWORD *)a2);
  return WebCore::RenderLayerScrollableArea::scrollTo(this, v3);
}

uint64_t WebCore::RenderLayerScrollableArea::handleWheelEventForScrolling(uint64_t a1, uint64_t a2, unsigned __int16 a3)
{
  uint64_t result;
  WebCore::RenderView *v7;
  WebCore::RenderLayerCompositor *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int16 v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WebCore::RenderLayerCompositor *v20;
  WebCore::RenderLayerCompositor *v21;
  WTF *v22;
  void *v23;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 96) + 32) + 824))(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 32));
  if ((_DWORD)result)
  {
    v7 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96)
                                                                                             + 32)
                                                                                 + 24)
                                                                     + 8)
                                                         + 40)
                                             + 8)
                                 + 1944);
    v8 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v7 + 50);
    if (!v8)
    {
      v20 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
      v8 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v20, v7);
      v21 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v7 + 50);
      *((_QWORD *)v7 + 50) = v8;
      if (v21)
      {
        WebCore::RenderLayerCompositor::~RenderLayerCompositor(v21);
        WTF::fastFree(v22, v23);
        v8 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v7 + 50);
      }
    }
    if (!WebCore::RenderLayerCompositor::useCoordinatedScrollingForLayer(v8, *(const WebCore::RenderLayer **)(a1 + 96)))goto LABEL_21;
    v9 = *(_QWORD *)(a1 + 96);
    v10 = *(_QWORD *)(v9 + 256);
    if (!v10)
      goto LABEL_21;
    if (!*(_QWORD *)(v10 + 224))
      goto LABEL_21;
    v11 = WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 32) + 24) + 8) + 40) + 8) + 528)
                                                                                        + 8)
                                                                            + 24)
                                                                + 8));
    if (!v11)
      goto LABEL_21;
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 256);
    if (v12)
    {
      v13 = *(_QWORD *)(v12 + 224);
      v14 = *(_QWORD *)(v12 + 232);
    }
    else
    {
      v13 = 0;
      v14 = 0;
    }
    v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v11 + 216))(v11, a2, v13, v14, a3);
    v16 = v15;
    result = v15 > 0xFFu;
    if ((v16 & 0xE) != 0)
    {
LABEL_21:
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 592))(a1);
      if ((_DWORD)result)
      {
        v17 = *(_QWORD *)(a1 + 16);
        if (!v17)
        {
          v17 = WTF::fastMalloc((WTF *)0xB0);
          *(_QWORD *)v17 = off_1E3405EF0;
          *(_QWORD *)(v17 + 8) = a1;
          *(_QWORD *)(v17 + 16) = 0;
          *(_QWORD *)(v17 + 24) = &off_1E3406D78;
          *(_OWORD *)(v17 + 32) = 0u;
          *(_OWORD *)(v17 + 48) = 0u;
          *(_OWORD *)(v17 + 64) = 0u;
          *(_QWORD *)(v17 + 80) = 0;
          *(_QWORD *)(v17 + 88) = v17;
          *(_QWORD *)(v17 + 96) = 0;
          *(_QWORD *)(v17 + 104) = 0;
          *(_QWORD *)(v17 + 110) = 0;
          *(_QWORD *)(v17 + 120) = 0;
          v18 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v18 = 0;
          *(_DWORD *)(v18 + 8) = 0;
          *(_QWORD *)(v18 + 16) = a1;
          *(_BYTE *)(v18 + 24) = 0;
          *(_QWORD *)(v17 + 128) = v18;
          *(_BYTE *)(v17 + 136) = 0;
          *(_QWORD *)v17 = off_1E3354B08;
          *(_QWORD *)(v17 + 168) = 0;
          *(_DWORD *)(v17 + 140) = 0;
          *(_DWORD *)(v17 + 143) = 0;
          *(_QWORD *)(v17 + 156) = 0;
          *(_QWORD *)(v17 + 148) = 0;
          v19 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v17;
          if (v19)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
            v17 = *(_QWORD *)(a1 + 16);
          }
        }
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 184))(v17, a2);
      }
    }
  }
  return result;
}

uint64_t WebCore::RenderLayerScrollableArea::isScrollableOrRubberbandable(WebCore::RenderLayerScrollableArea *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 12) + 32) + 824))(*(_QWORD *)(*((_QWORD *)this + 12) + 32));
}

uint64_t WebCore::RenderLayerScrollableArea::visibleContentRectInternal(WebCore::ScrollableArea *a1, int a2)
{
  WebCore::RenderBox *v4;
  BOOL v5;

  if (!WebCore::RenderLayerScrollableArea::canUseCompositedScrolling(a1) && a2)
    WebCore::ScrollableArea::scrollbarIntrusion(a1);
  v4 = *(WebCore::RenderBox **)(*((_QWORD *)a1 + 12) + 32);
  if (v4)
    v5 = (*((_BYTE *)v4 + 45) & 4) == 0;
  else
    v5 = 1;
  if (!v5)
  {
    WebCore::RenderBox::clientWidth(*(WebCore::RenderBox **)(*((_QWORD *)a1 + 12) + 32));
    WebCore::RenderBox::clientHeight(v4);
  }
  return *((_QWORD *)a1 + 13);
}

uint64_t WebCore::RenderLayerScrollableArea::overhangAmount(WebCore::RenderLayerScrollableArea *this)
{
  return 0;
}

uint64_t WebCore::RenderLayerScrollableArea::scrollCornerRect(WebCore::RenderLayerScrollableArea *this)
{
  _QWORD v2[5];

  WebCore::RenderLayerScrollableArea::overflowControlsRects(this, (uint64_t)v2);
  return v2[4];
}

BOOL WebCore::RenderLayerScrollableArea::isScrollCornerVisible(WebCore::RenderLayerScrollableArea *this)
{
  _DWORD v3[16];

  WebCore::RenderLayerScrollableArea::overflowControlsRects(this, (uint64_t)v3);
  return v3[10] > 0 && v3[11] > 0;
}

uint64_t WebCore::RenderLayerScrollableArea::convertFromScrollbarToContainingView(WebCore::RenderLayerScrollableArea *this, const WebCore::Scrollbar *a2, const WebCore::IntRect *a3)
{
  const WebCore::RenderElement *v5;
  uint64_t v6;
  int v7;
  __int128 v9;
  _QWORD v10[8];

  v5 = *(const WebCore::RenderElement **)(*((_QWORD *)this + 12) + 32);
  v9 = *(_OWORD *)a3;
  WebCore::RenderLayerScrollableArea::overflowControlsRects(this, (uint64_t)v10);
  if (*((const WebCore::Scrollbar **)this + 17) == a2)
  {
    v6 = v10[2];
LABEL_6:
    v7 = HIDWORD(v6);
    goto LABEL_7;
  }
  if (*((const WebCore::Scrollbar **)this + 16) == a2)
  {
    v6 = v10[0];
    goto LABEL_6;
  }
  LODWORD(v6) = 0;
  v7 = 0;
LABEL_7:
  LODWORD(v9) = v9 + v6;
  DWORD1(v9) += v7;
  return WebCore::FrameView::convertFromRendererToContainingView(*(WebCore::FrameView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 3) + 8) + 40)+ 8)+ 1944)+ 248), v5, (const WebCore::IntRect *)&v9);
}

unint64_t WebCore::RenderLayerScrollableArea::convertFromContainingViewToScrollbar(WebCore::RenderLayerScrollableArea *this, const WebCore::Scrollbar *a2, const WebCore::IntRect *a3)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v9[8];

  v5 = WebCore::FrameView::convertFromContainingViewToRenderer(*(WebCore::FrameView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 12) + 32)+ 24)+ 8)+ 40)+ 8)+ 1944)+ 248), *(const WebCore::RenderElement **)(*((_QWORD *)this + 12) + 32), a3);
  WebCore::RenderLayerScrollableArea::overflowControlsRects(this, (uint64_t)v9);
  if (*((const WebCore::Scrollbar **)this + 17) == a2)
  {
    v6 = v9[2];
LABEL_6:
    v7 = v6 & 0xFFFFFFFF00000000;
    return (v5 - v7) & 0xFFFFFFFF00000000 | (v5 - v6);
  }
  if (*((const WebCore::Scrollbar **)this + 16) == a2)
  {
    v6 = v9[0];
    goto LABEL_6;
  }
  LODWORD(v6) = 0;
  v7 = 0;
  return (v5 - v7) & 0xFFFFFFFF00000000 | (v5 - v6);
}

unint64_t WebCore::RenderLayerScrollableArea::convertFromScrollbarToContainingView(WebCore::RenderLayerScrollableArea *this, const WebCore::Scrollbar *a2, const WebCore::IntPoint *a3)
{
  const WebCore::RenderElement *v5;
  uint64_t v6;
  int32x2_t v7;
  __int32 v8;
  int32x2_t v10[8];

  v5 = *(const WebCore::RenderElement **)(*((_QWORD *)this + 12) + 32);
  v6 = *(_QWORD *)a3;
  WebCore::RenderLayerScrollableArea::overflowControlsRects(this, (uint64_t)v10);
  if (*((const WebCore::Scrollbar **)this + 17) == a2)
  {
    v7 = v10[2];
LABEL_6:
    v8 = v7.i32[1];
    goto LABEL_7;
  }
  if (*((const WebCore::Scrollbar **)this + 16) == a2)
  {
    v7 = v10[0];
    goto LABEL_6;
  }
  v7.i32[0] = 0;
  v8 = 0;
LABEL_7:
  v10[0].i32[0] = v7.i32[0] + v6;
  v10[0].i32[1] = v8 + HIDWORD(v6);
  return WebCore::FrameView::convertFromRendererToContainingView(*(WebCore::FrameView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 3) + 8) + 40)+ 8)+ 1944)+ 248), v5, v10);
}

unint64_t WebCore::RenderLayerScrollableArea::convertFromContainingViewToScrollbar(WebCore::RenderLayerScrollableArea *this, const WebCore::Scrollbar *a2, const WebCore::IntPoint *a3)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v9[8];

  v5 = WebCore::FrameView::convertFromContainingViewToRenderer(*(WebCore::FrameView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 12) + 32)+ 24)+ 8)+ 40)+ 8)+ 1944)+ 248), *(const WebCore::RenderElement **)(*((_QWORD *)this + 12) + 32), a3);
  WebCore::RenderLayerScrollableArea::overflowControlsRects(this, (uint64_t)v9);
  if (*((const WebCore::Scrollbar **)this + 17) == a2)
  {
    v6 = v9[2];
LABEL_6:
    v7 = v6 & 0xFFFFFFFF00000000;
    return (v5 - v7) & 0xFFFFFFFF00000000 | (v5 - v6);
  }
  if (*((const WebCore::Scrollbar **)this + 16) == a2)
  {
    v6 = v9[0];
    goto LABEL_6;
  }
  LODWORD(v6) = 0;
  v7 = 0;
  return (v5 - v7) & 0xFFFFFFFF00000000 | (v5 - v6);
}

void WebCore::RenderLayerScrollableArea::availableContentSizeChanged(WebCore::ScrollAnimator *a1, char a2)
{
  uint64_t v4;
  int v5;
  int v6;
  WebCore::RenderElement *v7;
  uint64_t v8;
  int v9;

  WebCore::ScrollableArea::availableContentSizeChanged(a1);
  if ((a2 & 1) == 0)
  {
    v4 = *(_QWORD *)(*((_QWORD *)a1 + 12) + 32);
    if ((*(_BYTE *)(v4 + 45) & 0x40) != 0 && v4)
    {
      v5 = *(_DWORD *)(v4 + 16);
      *(_WORD *)(v4 + 69) |= 0x200u;
      *(_DWORD *)(v4 + 16) = v5 + 1;
      if (v5 == -1)
        goto LABEL_17;
      *(_DWORD *)(v4 + 16) = v5;
    }
    v6 = *(_DWORD *)(v4 + 20);
    if ((v6 & 8) == 0)
    {
      *(_DWORD *)(v4 + 20) = v6 | 8;
      v7 = WebCore::RenderObject::markContainingBlocksForLayout((WebCore::RenderObject *)v4, 0);
      WebCore::RenderObject::scheduleLayout((WebCore::RenderObject *)v4, v7);
      if ((*(_BYTE *)(v4 + 21) & 0x80) != 0)
      {
        if ((*(_BYTE *)(v4 + 45) & 0x10) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x196409DD8);
        }
        v8 = *(_QWORD *)(v4 + 144);
        if (v8)
        {
          v9 = *(_DWORD *)(v8 + 8) + 1;
          *(_DWORD *)(v8 + 8) = v9;
        }
        else
        {
          v9 = MEMORY[8];
        }
        *(_QWORD *)(v8 + 24) = *(_QWORD *)(v8 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
        if (v9)
        {
          *(_DWORD *)(v8 + 8) = v9 - 1;
          return;
        }
LABEL_17:
        __break(0xC471u);
        JUMPOUT(0x196409DB8);
      }
    }
  }
}

BOOL WebCore::RenderLayerScrollableArea::shouldSuspendScrollAnimations(WebCore::RenderLayerScrollableArea *this)
{
  return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 12) + 32) + 24) + 8)
                                                                                          + 40)
                                                                              + 8)
                                                                  + 1944)
                                                      + 248)
                                          + 328)
                              + 280)
                  + 80) != 2;
}

uint64_t WebCore::RenderLayerScrollableArea::didStartScroll(WebCore::RenderLayerScrollableArea *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 12) + 32) + 24) + 8) + 40)
                                                                                         + 8)
                                                                             + 528)
                                                                 + 8)
                                                     + 24)
                                         + 8)
                             + 48)
                 + 16);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 672))(v1);
}

uint64_t WebCore::RenderLayerScrollableArea::didEndScroll(WebCore::RenderLayerScrollableArea *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 12) + 32) + 24) + 8) + 40)
                                                                                         + 8)
                                                                             + 528)
                                                                 + 8)
                                                     + 24)
                                         + 8)
                             + 48)
                 + 16);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 680))(v1);
}

uint64_t WebCore::RenderLayerScrollableArea::didUpdateScroll(WebCore::RenderLayerScrollableArea *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 12) + 32) + 24) + 8) + 40)
                                                                                         + 8)
                                                                             + 528)
                                                                 + 8)
                                                     + 24)
                                         + 8)
                             + 48)
                 + 16);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 664))(v1, 1);
}

uint64_t WebCore::RenderLayerScrollableArea::layerForVerticalScrollbar(WebCore::RenderLayerScrollableArea *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*((_QWORD *)this + 12) + 256);
  if (v1)
    return *(_QWORD *)(v1 + 136);
  else
    return 0;
}

uint64_t WebCore::RenderLayerScrollableArea::invalidateScrollCornerRect(WebCore::RenderLayerScrollableArea *this, int32x2_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  int8x8_t v10[2];

  result = WebCore::RenderLayerScrollableArea::canUseCompositedScrolling(this);
  if ((result & 1) == 0)
  {
    v5 = *(_QWORD *)(*((_QWORD *)this + 12) + 256);
    if (v5 && (v8 = *(_QWORD *)(v5 + 144)) != 0)
    {
      v9 = WebCore::FloatRect::FloatRect((float *)v10, (int *)a2);
      return (*(uint64_t (**)(uint64_t, int8x8_t *, uint64_t, float))(*(_QWORD *)v8 + 328))(v8, v10, 1, v9);
    }
    else
    {
      v6 = *((_QWORD *)this + 19);
      if (v6)
      {
        WebCore::LayoutRect::LayoutRect(v10, a2);
        result = WebCore::RenderObject::repaintRectangle(v6, (const WebCore::LayoutRect *)v10);
      }
      v7 = *((_QWORD *)this + 20);
      if (v7)
      {
        WebCore::LayoutRect::LayoutRect(v10, a2);
        return WebCore::RenderObject::repaintRectangle(v7, (const WebCore::LayoutRect *)v10);
      }
    }
  }
  return result;
}

uint64_t WebCore::RenderLayerScrollableArea::layerForScrollCorner(WebCore::RenderLayerScrollableArea *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*((_QWORD *)this + 12) + 256);
  if (v1)
    return *(_QWORD *)(v1 + 144);
  else
    return 0;
}

uint64_t WebCore::RenderLayerScrollableArea::canShowNonOverlayScrollbars(WebCore::RenderLayerScrollableArea *this)
{
  uint64_t v3;
  BOOL v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  WebCore::RenderLayerScrollableArea *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  char v15;
  char v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char **v21;

  if ((*(unsigned int (**)(WebCore::RenderLayerScrollableArea *))(*(_QWORD *)this + 144))(this) == 1
    && (*(unsigned int (**)(WebCore::RenderLayerScrollableArea *))(*(_QWORD *)this + 152))(this) == 1)
  {
    return 0;
  }
  v3 = *(_QWORD *)(*((_QWORD *)this + 12) + 32);
  if (v3)
    v4 = (*(_BYTE *)(v3 + 45) & 4) == 0;
  else
    v4 = 1;
  if (v4)
    return 1;
  if ((*(_BYTE *)(v3 + 103) & 2) == 0 || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 88) + 40) + 586))
    goto LABEL_11;
  v6 = *(_QWORD *)(v3 + 104);
  v7 = *(unsigned int *)(v6 + 392);
  if (!(_DWORD)v7)
  {
    if ((*(_BYTE *)(v6 + 390) & 4) != 0)
    {
      v17 = &v16;
      v18 = &v16;
      v19 = &v16;
      v20 = &v16;
      goto LABEL_26;
    }
    return 1;
  }
  v17 = &v16;
  v18 = &v16;
  v19 = &v16;
  v20 = &v16;
  if ((_DWORD)v7 == -1)
  {
LABEL_31:
    v10 = (WebCore::RenderLayerScrollableArea *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::RenderLayerScrollableArea::createScrollbarsController(v10);
  }
LABEL_26:
  v21 = &v17;
  ((void (*)(uint64_t *__return_ptr, char ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v7])(&v11, &v21, v6 + 384);
  v17 = &v16;
  v18 = &v16;
  v19 = &v16;
  v20 = &v16;
  v9 = *(unsigned int *)(v6 + 408);
  if ((_DWORD)v9 == -1)
    goto LABEL_31;
  v21 = &v17;
  ((void (*)(uint64_t *__return_ptr, char ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v9])(&v13, &v21, v6 + 400);
  v15 = 1;
  if (v14 != -1)
    ((void (*)(char **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v14])(&v17, &v13);
  v14 = -1;
  if (v12 != -1)
    ((void (*)(char **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v12])(&v17, &v11);
LABEL_11:
  {
    if (BYTE1(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings))
    {
      v5 = &WebCore::ScrollbarTheme::theme(void)::mockTheme;
        return (*(unsigned int (**)(uint64_t *))(*v5 + 64))(v5) ^ 1;
      WebCore::ScrollbarTheme::theme(void)::mockTheme = (uint64_t)off_1E341CAA8;
LABEL_24:
      *v8 = 1;
      return (*(unsigned int (**)(uint64_t *))(*v5 + 64))(v5) ^ 1;
    }
  }
  else
  {
    WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
    *(_OWORD *)&byte_1ECE90A50 = 0u;
    qword_1ECE90A60 = 0;
    LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
    *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
    *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
    byte_1ECE90A56 = 1;
    *(_DWORD *)&algn_1ECE90A57 = 0;
    unk_1ECE90A5B = 0;
    byte_1ECE90A5D = 1;
    byte_1ECE90A5F = 1;
  }
  v5 = &WebCore::ScrollbarTheme::nativeTheme(void)::theme;
  {
    WebCore::ScrollbarTheme::nativeTheme(void)::theme = (uint64_t)off_1E3354BF8;
    goto LABEL_24;
  }
  return (*(unsigned int (**)(uint64_t *))(*v5 + 64))(v5) ^ 1;
}

uint64_t WebCore::RenderLayerScrollableArea::createScrollbarsController(WebCore::RenderLayerScrollableArea *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 12) + 32) + 24) + 8) + 40)
                                                                                         + 8)
                                                                             + 528)
                                                                 + 8)
                                                     + 24)
                                         + 8)
                             + 48)
                 + 16);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 1080))(v1);
}

unsigned int *WebCore::RenderLayerScrollableArea::createScrollbar(WebCore::Widget **a1, WebCore::ScrollAnimator *a2, int a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  _BOOL4 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  WebCore::Widget *v18;
  unsigned int *result;
  void *v20;
  unsigned __int8 *v22;
  void *v23;
  unsigned __int8 **v24;
  unsigned __int8 **v25;

  v6 = *(_QWORD *)(*((_QWORD *)a2 + 12) + 32);
  v7 = *(_BYTE *)(v6 + 45);
  if ((v7 & 1) != 0)
    goto LABEL_9;
  v8 = *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8);
  if (!v8)
    goto LABEL_9;
  if ((*(_WORD *)(v8 + 28) & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19640A538);
  }
  v9 = **(_QWORD **)(v8 + 40);
  if (!v9 || (*(_WORD *)(v9 + 28) & 0x80) == 0)
  {
LABEL_9:
    v11 = *(_QWORD *)(*((_QWORD *)a2 + 12) + 32);
  }
  else
  {
    v11 = *(_QWORD *)(*((_QWORD *)a2 + 12) + 32);
    if (!*(_BYTE *)(v9 + 193))
    {
      v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 200) + 8) + 64) & 0xFFFFFFFFFFFFLL;
      v7 = *(_BYTE *)(v11 + 0x2D);
      if (v11 && (v7 & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19640A460);
      }
    }
  }
  if ((v7 & 4) == 0
    || ((*(_BYTE *)(v11 + 103) & 2) != 0
      ? (v12 = !WebCore::RenderStyle::usesStandardScrollbarStyle((WebCore::RenderStyle *)(v11 + 80)),
         v7 = *(_BYTE *)(v11 + 45))
      : (v12 = 0),
        (v7 & 1) != 0))
  {
    v13 = 0;
    goto LABEL_37;
  }
  v13 = *(_QWORD *)(*(_QWORD *)(v11 + 24) + 8);
  if (!v13)
  {
LABEL_37:
    v14 = 1;
    goto LABEL_18;
  }
  if ((*(_WORD *)(v13 + 28) & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19640A558);
  }
  *(_DWORD *)(v13 + 24) += 2;
  if (v12)
  {
    WebCore::RenderScrollbar::createCustomScrollbar((uint64_t)a2, a3, v13, 0, (uint64_t *)&v25);
    v14 = 0;
    v18 = (WebCore::Widget *)v25;
    goto LABEL_24;
  }
  v14 = 0;
LABEL_18:
  v15 = *(_QWORD *)(*((_QWORD *)a2 + 12) + 32);
  if (v15)
    v16 = (*(_BYTE *)(v15 + 45) & 4) == 0;
  else
    v16 = 1;
  if (v16)
    v17 = 0;
  else
    v17 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v15 + 88) + 40) + 586);
  v18 = (WebCore::Widget *)WTF::fastMalloc((WTF *)0xD0);
  WebCore::Scrollbar::Scrollbar((uint64_t)v18, (uint64_t)a2, a3, v17, 0, 0);
  WebCore::ScrollableArea::didAddScrollbar(a2, (uint64_t)v18, a3);
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 12) + 32) + 24) + 8)
                                                                                         + 40)
                                                                             + 8)
                                                                 + 528)
                                                     + 8)
                                         + 24)
                             + 8)
                 + 968))
  {
    v22 = (unsigned __int8 *)WebCore::ScrollableArea::scrollAnimator(a2);
    WebCore::Page::wheelEventTestMonitor(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 12) + 32) + 24)+ 8)+ 40)+ 8)+ 528)+ 8)+ 24)+ 8), &v25);
    WebCore::ScrollAnimator::setWheelEventTestMonitor(v22, &v25);
    v24 = v25;
    v25 = 0;
    if (v24)
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WheelEventTestMonitor,(WTF::DestructionThread)0>(*v24, v23);
  }
LABEL_24:
  result = (unsigned int *)WebCore::LocalFrameView::addChild(*(WebCore::LocalFrameView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 24) + 8)+ 40)+ 8)+ 1944)+ 248), v18);
  *a1 = v18;
  if ((v14 & 1) == 0)
  {
    if (*(_DWORD *)(v13 + 24) == 2)
    {
      if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v13, v20);
    }
    else
    {
      *(_DWORD *)(v13 + 24) -= 2;
    }
  }
  return result;
}

uint64_t WebCore::rendererForScrollbar(uint64_t this, WebCore::RenderLayerModelObject *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;

  if ((*(_BYTE *)(this + 45) & 1) == 0)
  {
    v2 = *(_QWORD *)(*(_QWORD *)(this + 24) + 8);
    if (v2)
    {
      if ((*(_WORD *)(v2 + 28) & 8) == 0
        || ((v3 = **(_QWORD **)(v2 + 40)) != 0 ? (v4 = (*(_WORD *)(v3 + 28) & 0x80) == 0) : (v4 = 1),
            !v4
         && !*(_BYTE *)(v3 + 193)
         && (this = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 200) + 8) + 64) & 0xFFFFFFFFFFFFLL) != 0
         && (*(_BYTE *)((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 200) + 8) + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0))
      {
        __break(0xC471u);
        JUMPOUT(0x19640A5E0);
      }
    }
  }
  return this;
}

uint64_t WebCore::RenderLayerScrollableArea::enclosingScrollableArea(WebCore::RenderLayerScrollableArea *this)
{
  uint64_t v2;

  v2 = WebCore::RenderLayer::enclosingScrollableLayer(*((_QWORD *)this + 12), 1, 0);
  if (v2)
    return *(_QWORD *)(v2 + 264);
  else
    return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 12)
                                                                                             + 32)
                                                                                 + 24)
                                                                     + 8)
                                                         + 40)
                                             + 8)
                                 + 1944)
                     + 248)
         + 64;
}

uint64_t WebCore::RenderLayerScrollableArea::hasScrollableOrRubberbandableAncestor(WebCore::RenderLayerScrollableArea *this)
{
  WebCore::RenderLayer *v1;
  WebCore::RenderObject *v2;
  WebCore::RenderLayer *v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::RenderObject *v6;

  v1 = (WebCore::RenderLayer *)*((_QWORD *)this + 12);
  v2 = (WebCore::RenderObject *)*((_QWORD *)v1 + 4);
  do
  {
    v2 = WebCore::RenderObject::containingBlock(v2);
    if (!v2)
    {
      v3 = (WebCore::RenderLayer *)WebCore::RenderLayer::enclosingFrameRenderLayer(v1);
      if (v3)
        break;
      return 0;
    }
    v3 = (WebCore::RenderLayer *)*((_QWORD *)v2 + 18);
  }
  while (!v3);
LABEL_6:
  while (1)
  {
    v4 = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)v3 + 4) + 824))(*((_QWORD **)v3 + 4));
    if ((v4 & 1) != 0)
      return 1;
    v5 = v4;
    v6 = (WebCore::RenderObject *)*((_QWORD *)v3 + 4);
    while (1)
    {
      v6 = WebCore::RenderObject::containingBlock(v6);
      if (!v6)
        break;
      if (*((_QWORD *)v6 + 18))
      {
        v3 = (WebCore::RenderLayer *)*((_QWORD *)v6 + 18);
        goto LABEL_6;
      }
    }
    v3 = (WebCore::RenderLayer *)WebCore::RenderLayer::enclosingFrameRenderLayer(v3);
    if (!v3)
      return v5;
  }
}

uint64_t WebCore::RenderLayerScrollableArea::scrollbarGutterStyle(WebCore::RenderLayerScrollableArea *this)
{
  uint64_t v1;
  BOOL v2;
  unsigned int v3;
  unsigned int v4;

  v1 = *(_QWORD *)(*((_QWORD *)this + 12) + 32);
  if (v1)
    v2 = (*(_BYTE *)(v1 + 45) & 4) == 0;
  else
    v2 = 1;
  if (v2)
  {
    v4 = 0;
    LOBYTE(v3) = 1;
  }
  else
  {
    v3 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v1 + 88) + 40) + 584);
    v4 = v3 >> 8;
  }
  return v3 | (v4 << 8);
}

uint64_t WebCore::RenderLayerScrollableArea::scrollbarThumbColorStyle@<X0>(uint64_t this@<X0>, WebCore::Color *a2@<X8>)
{
  uint64_t v2;
  BOOL v3;

  v2 = *(_QWORD *)(*(_QWORD *)(this + 96) + 32);
  if (v2)
    v3 = (*(_BYTE *)(v2 + 45) & 4) == 0;
  else
    v3 = 1;
  if (!v3)
    return WebCore::RenderStyle::usedScrollbarThumbColor(v2 + 80, a2);
  *(_QWORD *)a2 = 0;
  return this;
}

uint64_t WebCore::RenderLayerScrollableArea::scrollbarTrackColorStyle@<X0>(uint64_t this@<X0>, WebCore::Color *a2@<X8>)
{
  uint64_t v2;
  BOOL v3;

  v2 = *(_QWORD *)(*(_QWORD *)(this + 96) + 32);
  if (v2)
    v3 = (*(_BYTE *)(v2 + 45) & 4) == 0;
  else
    v3 = 1;
  if (!v3)
    return WebCore::RenderStyle::usedScrollbarTrackColor(v2 + 80, a2);
  *(_QWORD *)a2 = 0;
  return this;
}

uint64_t WebCore::RenderLayerScrollableArea::drawPlatformResizerImage(WebCore::RenderLayerScrollableArea *this, WebCore::GraphicsContext *a2, const WebCore::LayoutRect *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  float v11;
  uint64_t *v12;
  float v13;
  float v14;
  float v15;
  unsigned int v16;
  int v17;
  int v18;
  BOOL v19;
  int v20;
  int v21;
  int v22;
  int v23;
  float v24;
  double v25;
  int v26;
  int v27;
  double v28;
  int v29;
  double v30;
  int v31;
  double v32;
  int v33;
  uint64_t v34;
  float v35;
  uint64_t v36;
  uint64_t v37;
  float *v38;
  int v39;
  int v40;
  int v41;
  int v42;
  float v43;
  int v44;
  uint64_t result;
  WTF *v46;
  void *v47;
  WTF *v48;
  void *v49;
  _DWORD v50[4];
  uint64_t *v51;
  float v52;
  int v53;

  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 528);
  if (!v6)
    goto LABEL_8;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7)
    goto LABEL_8;
  v8 = *(_QWORD *)(v7 + 24);
  if (!v8)
    goto LABEL_8;
  v9 = *(_QWORD *)(v8 + 8);
  if (!v9)
    goto LABEL_8;
  v10 = (*(_DWORD *)v9)++;
  v11 = *(float *)(v9 + 364);
  if (v10)
  {
    *(_DWORD *)v9 = v10;
  }
  else
  {
    WebCore::Page::~Page(v9);
    WTF::fastFree(v46, v47);
  }
  if (v11 < 2.0)
  {
LABEL_8:
    if ((byte_1ECE84211 & 1) != 0)
    {
      v12 = (uint64_t *)qword_1ECE84220;
      if (!qword_1ECE84220)
      {
LABEL_11:
        (*(void (**)(uint64_t *, _QWORD))(*v12 + 168))(v12, 0);
        goto LABEL_16;
      }
    }
    else
    {
      WebCore::ImageAdapter::loadPlatformResource((WebCore::ImageAdapter *)"textAreaResizeCorner", &v51);
      v12 = v51;
      qword_1ECE84220 = (uint64_t)v51;
      byte_1ECE84211 = 1;
      if (!v51)
        goto LABEL_11;
    }
    ++*((_DWORD *)v12 + 2);
    goto LABEL_11;
  }
  if ((_MergedGlobals_250 & 1) == 0)
  {
    WebCore::ImageAdapter::loadPlatformResource((WebCore::ImageAdapter *)"textAreaResizeCorner@2x", &v51);
    v12 = v51;
    qword_1ECE84218 = (uint64_t)v51;
    _MergedGlobals_250 = 1;
    if (!v51)
      goto LABEL_15;
    goto LABEL_14;
  }
  v12 = (uint64_t *)qword_1ECE84218;
  if (qword_1ECE84218)
LABEL_14:
    ++*((_DWORD *)v12 + 2);
LABEL_15:
  v13 = (*(float (**)(uint64_t *, _QWORD))(*v12 + 168))(v12, 0) * 0.5;
  v14 = v15 * 0.5;
LABEL_16:
  v16 = *((_DWORD *)a3 + 1);
  v17 = *((_DWORD *)a3 + 2);
  v18 = *((_DWORD *)a3 + 3);
  v19 = __OFADD__(*(_DWORD *)a3, v17);
  v20 = *(_DWORD *)a3 + v17;
  v21 = (*(_DWORD *)a3 >> 31) + 0x7FFFFFFF;
  if (!v19)
    v21 = v20;
  v19 = __OFADD__(v16, v18);
  v22 = v16 + v18;
  v23 = (v16 >> 31) + 0x7FFFFFFF;
  if (!v19)
    v23 = v22;
  v24 = (float)((float)v23 * 0.015625) - v14;
  v25 = (float)((float)((float)v21 * 0.015625) - v13) * 64.0;
  if (v25 > -2147483650.0)
    v26 = (int)v25;
  else
    v26 = 0x80000000;
  if (v25 < 2147483650.0)
    v27 = v26;
  else
    v27 = 0x7FFFFFFF;
  LODWORD(v51) = v27;
  v28 = v24 * 64.0;
  if (v28 >= 2147483650.0)
  {
    v29 = 0x7FFFFFFF;
  }
  else if (v28 <= -2147483650.0)
  {
    v29 = 0x80000000;
  }
  else
  {
    v29 = (int)v28;
  }
  v30 = v13 * 64.0;
  if (v30 > -2147483650.0)
    v31 = (int)v30;
  else
    v31 = 0x80000000;
  if (v30 >= 2147483650.0)
    v31 = 0x7FFFFFFF;
  HIDWORD(v51) = v29;
  v52 = *(float *)&v31;
  v32 = v14 * 64.0;
  if (v32 >= 2147483650.0)
  {
    v33 = 0x7FFFFFFF;
  }
  else if (v32 > -2147483650.0)
  {
    v33 = (int)v32;
  }
  else
  {
    v33 = 0x80000000;
  }
  v53 = v33;
  v34 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 528);
  v35 = 1.0;
  if (v34)
  {
    v36 = *(_QWORD *)(v34 + 8);
    if (v36)
    {
      v37 = *(_QWORD *)(v36 + 24);
      if (v37)
      {
        v38 = *(float **)(v37 + 8);
        if (v38)
        {
          v39 = (*(_DWORD *)v38)++;
          v35 = v38[91];
          if (v39)
          {
            *(_DWORD *)v38 = v39;
          }
          else
          {
            WebCore::Page::~Page((uint64_t)v38);
            WTF::fastFree(v48, v49);
          }
        }
      }
    }
  }
  v50[0] = WebCore::snapRectToDevicePixels((int *)&v51, v35);
  v50[1] = v40;
  v50[2] = v41;
  v50[3] = v42;
  v43 = (*(float (**)(uint64_t *, _QWORD))(*v12 + 168))(v12, 0);
  v51 = 0;
  v52 = v43;
  v53 = v44;
  result = (*(uint64_t (**)(WebCore::GraphicsContext *, uint64_t *, _DWORD *, uint64_t **, uint64_t))(*(_QWORD *)a2 + 360))(a2, v12, v50, &v51, 545);
  if (*((_DWORD *)v12 + 2) == 1)
    return (*(uint64_t (**)(uint64_t *))(*v12 + 8))(v12);
  --*((_DWORD *)v12 + 2);
  return result;
}

uint64_t WebCore::RenderLayerScrollableArea::hitTestOverflowControls(WebCore::RenderLayerScrollableArea *this, WebCore::HitTestResult *a2, const WebCore::IntPoint *a3)
{
  uint64_t v6;
  uint64_t result;
  int v8;
  WebCore::Scrollbar *v9;
  int v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _DWORD *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;

  if (*((_OWORD *)this + 8) == 0)
  {
    v6 = *(_QWORD *)(*((_QWORD *)this + 12) + 32);
    if ((*(_BYTE *)(v6 + 22) & 1) == 0 && *(_BYTE *)(v6 + 46) != 14)
      return 0;
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v6 + 88) + 32) + 151) & 0x38) == 0)
      return 0;
  }
  WebCore::RenderLayerScrollableArea::overflowControlsRects(this, (uint64_t)&v15);
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 12) + 32) + 88) + 32) + 151) & 0x38) != 0
    && v23 <= *(_DWORD *)a3
    && v25 + v23 > *(_DWORD *)a3)
  {
    v8 = *((_DWORD *)a3 + 1);
    if (v24 <= v8 && v26 + v24 > v8)
      return 1;
  }
  v9 = (WebCore::Scrollbar *)*((_QWORD *)this + 17);
  if (v9)
  {
    if (WebCore::Scrollbar::shouldParticipateInHitTesting(v9))
    {
      if (v19 <= *(_DWORD *)a3 && v21 + v19 > *(_DWORD *)a3)
      {
        v10 = *((_DWORD *)a3 + 1);
        if (v20 <= v10 && v22 + v20 > v10)
        {
          v11 = *((_QWORD *)this + 17);
          if (!v11)
            goto LABEL_21;
          goto LABEL_20;
        }
      }
    }
  }
  result = *((_QWORD *)this + 16);
  if (result)
  {
    result = WebCore::Scrollbar::shouldParticipateInHitTesting((WebCore::Scrollbar *)result);
    if ((_DWORD)result)
    {
      if (v15 <= *(_DWORD *)a3 && v17 + v15 > *(_DWORD *)a3)
      {
        v13 = *((_DWORD *)a3 + 1);
        if (v16 <= v13 && v18 + v16 > v13)
        {
          v11 = *((_QWORD *)this + 16);
          if (!v11)
          {
LABEL_21:
            v14 = (_DWORD *)v11;
            WebCore::HitTestResult::setScrollbar((uint64_t)a2, (uint64_t *)&v14);
            v12 = v14;
            v14 = 0;
            if (v12)
            {
              if (v12[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
              else
                --v12[2];
            }
            return 1;
          }
LABEL_20:
          ++*(_DWORD *)(v11 + 8);
          goto LABEL_21;
        }
      }
      return 0;
    }
  }
  return result;
}

uint64_t WebCore::RenderLayerScrollableArea::isActive(WebCore::RenderLayerScrollableArea *this)
{
  return *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 12) + 32) + 24) + 8) + 40)
                                                                                          + 8)
                                                                              + 528)
                                                                  + 8)
                                                      + 24)
                                          + 8)
                              + 72)
                  + 26) & 1;
}

uint64_t WebCore::RenderLayerScrollableArea::lastKnownMousePositionInView(WebCore::RenderLayerScrollableArea *this, uint64_t a2, const WebCore::IntPoint *a3)
{
  WebCore::Widget *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v3 = *(WebCore::Widget **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 12) + 32)
                                                                                       + 24)
                                                                           + 8)
                                                               + 40)
                                                   + 8)
                                       + 1944)
                           + 248);
  v4 = *(_QWORD *)(*((_QWORD *)v3 + 41) + 640);
  if (*(_BYTE *)(v4 + 308))
    v5 = *(_QWORD *)(v4 + 300);
  else
    v5 = 0;
  v7 = v5;
  return WebCore::Widget::convertFromContainingWindow(v3, (const WebCore::IntPoint *)&v7, a3);
}

uint64_t WebCore::RenderLayerScrollableArea::isHandlingWheelEvent(WebCore::RenderLayerScrollableArea *this)
{
  return *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 12) + 32) + 24) + 8)
                                                                                        + 40)
                                                                            + 8)
                                                                + 528)
                                                    + 8)
                                        + 640)
                            + 187);
}

uint64_t WebCore::RenderLayerScrollableArea::scrollAnimatorEnabled(WebCore::RenderLayerScrollableArea *this)
{
  return (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 12) + 32) + 24) + 8) + 40)
                                                                                            + 8)
                                                                                + 528)
                                                                    + 8)
                                                        + 24)
                                            + 8)
                                + 112)
                    + 688) >> 54) & 1;
}

void WebCore::RenderLayerScrollableArea::paintOverlayScrollbars(uint64_t a1, WTF *a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  signed int v13;
  unsigned int v14;
  int v15;
  int v16;
  signed int v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  int v27;
  _QWORD v28[2];
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  __int16 v36;
  uint64_t v37;

  if (*(_BYTE *)(a1 + 82))
  {
    v6 = *(_QWORD *)(a1 + 96);
    v7 = *(_QWORD *)a3;
    v8 = HIDWORD(*(_QWORD *)a3);
    v9 = (int)*(_QWORD *)a3 >> 6;
    v10 = *(uint64_t *)a3 >> 38;
    v11 = *(_DWORD *)(a3 + 8);
    v12 = *(_DWORD *)(a3 + 12);
    v13 = *(_QWORD *)a3 + v11;
    if (__OFADD__(*(_QWORD *)a3, v11))
      v13 = (*(_QWORD *)a3 >> 31) + 0x7FFFFFFF;
    v14 = -(-v13 >> 6);
    if (v13 >= 0)
      v14 = (v13 + 63) >> 6;
    if (v13 <= 2147483583)
      v15 = v14;
    else
      v15 = 0x1FFFFFF;
    if (v11)
      v16 = v15;
    else
      v16 = v9;
    v17 = v8 + v12;
    if (__OFADD__((_DWORD)v8, v12))
      v17 = (v8 >> 31) + 0x7FFFFFFF;
    v18 = -(-v17 >> 6);
    if (v17 >= 0)
      v18 = (v17 + 63) >> 6;
    if (v17 <= 2147483583)
      v19 = v18;
    else
      v19 = 0x1FFFFFF;
    if (!v12)
      v19 = v10;
    v20 = v16 - v9;
    v21 = v19 - v10;
    v22 = v7 & 0xFFFFFFC0;
    v23 = v8 & 0xFFFFFFC0;
    v24 = v20 << 6;
    if (v20 < -33554432)
      v24 = 0x80000000;
    v28[0] = v6;
    v28[1] = a5;
    if (v20 <= 0x1FFFFFF)
      v25 = v24;
    else
      v25 = 0x7FFFFFFF;
    v29 = v22;
    v30 = v23;
    if (v21 >= -33554432)
      v26 = v21 << 6;
    else
      v26 = 0x80000000;
    if (v21 <= 0x1FFFFFF)
      v27 = v26;
    else
      v27 = 0x7FFFFFFF;
    v31 = v25;
    v32 = v27;
    v33 = 0;
    v34 = 0;
    v35 = a4;
    v36 = 256;
    v37 = 0;
    WebCore::RenderLayer::paintLayer(v6, a2, (uint64_t)v28, 16);
    *(_BYTE *)(a1 + 82) = 0;
  }
}

uint64_t WebCore::RenderLayerScrollableArea::hitTestResizerInFragments(WebCore::RenderLayerScrollableArea *a1, uint64_t *a2, unsigned int *a3, unint64_t *a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  int v17;
  int v18;
  int v19;
  uint64_t i;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  int v29;
  int v30;
  BOOL v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  int v45;
  int v46;
  BOOL v47;
  BOOL v48;
  int v51;
  int v52;
  unsigned int v53;
  uint64_t v54;
  unint64_t *v55;
  int v56;
  int v57;
  int v58;
  int v59;
  char v60[48];
  int v61;
  int v62;
  int v63;
  int v64;

  if (!*((_DWORD *)a2 + 3))
    return 0;
  v4 = *(_QWORD *)(*((_QWORD *)a1 + 12) + 32);
  if ((*(_BYTE *)(*(_QWORD *)(v4 + 104) + 239) & 4) != 0)
    return 0;
  if ((*(_BYTE *)(v4 + 120) & 0x30) != 0)
    return 0;
  v8 = *(_QWORD *)(v4 + 32);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (v9)
    {
      if ((*(_BYTE *)(*(_QWORD *)(v9 + 104) + 239) & 0x18) != 0)
        return 0;
    }
  }
  v10 = *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8);
  v11 = *(_QWORD *)(*(_QWORD *)(v10 + 40) + 8);
  if (*(_BYTE *)(v11 + 3441))
  {
    if (*(_QWORD *)(v11 + 1272) != v10)
      return 0;
  }
  if ((*(_BYTE *)(v4 + 45) & 2) != 0)
    v12 = 0;
  else
    v12 = *(_QWORD *)(*((_QWORD *)a1 + 12) + 32);
  if (v8)
    v13 = (*(_BYTE *)(v4 + 45) & 2) == 0;
  else
    v13 = 1;
  if (!v13)
    v12 = *(_QWORD *)(v8 + 8);
  if ((*(_BYTE *)(*(_QWORD *)(v12 + 104) + 239) & 1) != 0 || (*(_WORD *)(v12 + 124) & 0x3C0) == 0)
    return 0;
  if ((*(_BYTE *)(v4 + 45) & 4) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19640B244);
  }
  v14 = *(_QWORD *)(v4 + 160);
  WebCore::RenderLayerScrollableArea::overflowControlsRects(a1, (uint64_t)v60);
  v15 = *((_DWORD *)a2 + 3);
  v16 = (v15 - 1);
  if (v15 - 1 < 0)
    return 0;
  v55 = a4;
  if (SHIDWORD(v14) <= 0)
    v17 = -(-HIDWORD(v14) & 0x3F);
  else
    v17 = BYTE4(v14) & 0x3F;
  v18 = v17 + 32;
  if ((int)v14 <= 0)
    v19 = -(-(int)v14 & 0x3F);
  else
    v19 = v14 & 0x3F;
  v57 = v62 - (SHIDWORD(v14) / 64 + (v18 >> 6)) + v64;
  v58 = v64;
  v59 = v63;
  v56 = v61 - ((int)v14 / 64 + ((v19 + 32) >> 6)) + v63;
  for (i = 104 * v16; ; i -= 104)
  {
    if (v16 >= *((unsigned int *)a2 + 3))
    {
      __break(0xC471u);
      JUMPOUT(0x19640B25CLL);
    }
    v21 = *a2;
    v22 = *a2 + i;
    v23 = *(_QWORD *)(v22 + 24);
    v24 = HIDWORD(v23);
    v25 = (v23 & 0x80000000) == 0 ? *(_QWORD *)(v22 + 24) : (int)v23 + 63;
    v26 = v23 - (v25 & 0xFFFFFFC0);
    v27 = (v24 & 0x80000000) == 0 ? v24 : (int)v24 + 63;
    v28 = v24 - (v27 & 0xFFFFFFC0);
    v30 = *(_DWORD *)(v22 + 32);
    v29 = *(_DWORD *)(v22 + 36);
    v31 = __OFADD__(v26, v30);
    v32 = v26 + v30;
    v33 = (v26 >> 31) + 0x7FFFFFFF;
    v34 = v31 ? v33 : v32;
    v31 = __OFADD__(v28, v29);
    v35 = v28 + v29;
    v36 = (v28 >> 31) + 0x7FFFFFFF;
    v37 = v31 ? v36 : v35;
    if (WebCore::ClipRect::intersects((int *)(v22 + 40), (uint64_t)a3))
    {
      v40 = v57 + (v27 >> 6) + v37 / 64 + ((int)(v37 - (v38 & 0xFFFFFFC0) + 32) >> 6);
      v41 = v56 + (v25 >> 6) + v34 / 64 + ((int)(v34 - ((v27 >> 6) & 0xFFFFFFC0) + 32) >> 6);
      v43 = *a3;
      v42 = a3[1];
      v44 = *a3 + 63;
      if ((*a3 & 0x80000000) == 0)
        v44 = *a3;
      v45 = ((int)(v43 - (v44 & 0xFFFFFFC0) + 32) >> 6) + (v44 >> 6);
      v46 = ((int)(v42 - (v39 & 0xFFFFFFC0) + 32) >> 6) + (int)v42 / 64;
      v47 = v41 - v59 > v45 || v41 <= v45;
      v48 = !v47 && v40 - v58 <= v46;
      if (v48 && v40 > v46)
        break;
    }
    v47 = (uint64_t)v16-- <= 0;
    if (v47)
      return 0;
  }
  v51 = *(_DWORD *)(v21 + i + 24);
  v52 = *(_DWORD *)(v21 + i + 28);
  v31 = __OFSUB__(v43, v51);
  v53 = v43 - v51;
  if (v31)
    v53 = (v43 >> 31) + 0x7FFFFFFF;
  v54 = v42 - v52;
  if (__OFSUB__(v42, v52))
    v54 = (v42 >> 31) + 0x7FFFFFFF;
  *v55 = v53 | (unint64_t)(v54 << 32);
  return 1;
}

BOOL WebCore::RenderLayerScrollableArea::isVisibleToHitTesting(WebCore::RenderLayerScrollableArea *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v1 = *(_QWORD *)(*((_QWORD *)this + 12) + 32);
  if ((*(_BYTE *)(*(_QWORD *)(v1 + 104) + 239) & 4) != 0)
    return 0;
  if ((*(_BYTE *)(v1 + 120) & 0x30) != 0)
    return 0;
  v2 = *(_QWORD *)(v1 + 32);
  v3 = *(_QWORD *)(*(_QWORD *)(v1 + 24) + 8);
  v4 = *(_QWORD *)(*(_QWORD *)(v3 + 40) + 8);
  if (v2)
  {
    v5 = *(_QWORD *)(v2 + 8);
    if (v5)
    {
      if ((*(_BYTE *)(*(_QWORD *)(v5 + 104) + 239) & 0x18) != 0)
        return 0;
    }
  }
  if (*(_BYTE *)(v4 + 3441) && *(_QWORD *)(v4 + 1272) != v3)
    return 0;
  v6 = *(_BYTE *)(v1 + 45) & 2;
  if ((*(_BYTE *)(v1 + 45) & 2) != 0)
    v1 = 0;
  if (v2 && v6 != 0)
    v1 = *(_QWORD *)(v2 + 8);
  return (*(_BYTE *)(*(_QWORD *)(v1 + 104) + 239) & 1) == 0
      && (*(_WORD *)(v1 + 124) & 0x3C0) != 0
      && WebCore::LocalFrameView::isVisibleToHitTesting(*(WebCore::LocalFrameView **)(*(_QWORD *)(v4 + 1944) + 248));
}

void WebCore::createRenderer<WebCore::RenderScrollbarPart,WebCore::Document &,WebCore::RenderStyle>(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = WebCore::RenderScrollbarPart::operator new(216);
  WebCore::RenderScrollbarPart::RenderScrollbarPart(v6, a2, a3, 0, 0);
  *a1 = v7;
}

WebCore::ScrollableArea *WebCore::RenderLayerScrollableArea::panScrollFromPoint(WebCore::RenderLayerScrollableArea *this, const WebCore::IntPoint *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  unint64_t v13;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 12) + 32)
                                                                                         + 24)
                                                                             + 8)
                                                                 + 40)
                                                     + 8)
                                         + 528)
                             + 8)
                 + 640);
  if (*(_BYTE *)(v2 + 308))
    v3 = *(_QWORD *)(v2 + 300);
  else
    v3 = 0;
  if ((v3 & 0x8000000080000000) != 0)
    v3 = WebCore::RenderLayerScrollableArea::panScrollFromPoint(WebCore::IntPoint const&)::previousMousePosition;
  else
    WebCore::RenderLayerScrollableArea::panScrollFromPoint(WebCore::IntPoint const&)::previousMousePosition = v3;
  v4 = HIDWORD(v3);
  v5 = v3 - *(_DWORD *)a2;
  v6 = v4 - *((_DWORD *)a2 + 1);
  if (v5 >= 0)
    v7 = v5;
  else
    v7 = -v5;
  if (v7 >= 0x10)
    v8 = v5;
  else
    v8 = 0;
  if (v6 >= 0)
    v9 = v6;
  else
    v9 = -v6;
  if (v9 < 0x10)
    v6 = 0;
  v10 = v8 / 12;
  if (v8 < 24)
  {
    if (v8 <= -24)
      v10 = (int)(sqrt((double)(v8 / -12)) * (double)(v8 / 12)) + 1;
  }
  else
  {
    v10 = (int)(sqrt((double)v10) * (double)v10) - 1;
  }
  v11 = (v6 / 12);
  if (v6 < 24)
  {
    if (v6 <= -24)
      v11 = ((int)(sqrt((double)(v6 / -12)) * (double)(v6 / 12)) + 1);
  }
  else
  {
    v11 = ((int)(sqrt((double)(int)v11) * (double)(int)v11) - 1);
  }
  v13 = v10 | (unint64_t)(v11 << 32);
  return WebCore::RenderLayerScrollableArea::scrollByRecursively(this, (const WebCore::IntSize *)&v13, 0);
}

WebCore::ScrollableArea *WebCore::RenderLayerScrollableArea::scrollByRecursively(WebCore::ScrollableArea *this, const WebCore::IntSize *a2, WebCore::ScrollableArea **a3)
{
  WebCore::ScrollableArea *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  WebCore::RenderLayerScrollableArea *v19;
  _QWORD *v20;
  uint64_t v21;
  __int128 v22;
  unint64_t v23;

  if (*(_QWORD *)a2)
  {
    v5 = this;
    v6 = *(_QWORD *)(*((_QWORD *)this + 12) + 32);
    v7 = *(_QWORD *)(v6 + 32);
    if (v7)
    {
      v7 = *(_QWORD *)(v7 + 8);
      if (v7)
        LOBYTE(v7) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 88) + 40) + 48) != -1;
    }
    if ((*(_BYTE *)(v6 + 22) & 1) == 0 || (v7 & 1) != 0)
    {
      v20 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 24) + 8) + 40) + 8)
                                   + 1944)
                       + 248);
      v21 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(v20[8] + 832))(v20 + 8, 0, 1);
      v23 = (*(_DWORD *)a2 + v21) | ((unint64_t)(*((_DWORD *)a2 + 1) + HIDWORD(v21)) << 32);
      v22 = xmmword_1968DF820;
      this = (WebCore::ScrollableArea *)(*(uint64_t (**)(_QWORD *, unint64_t *, __int128 *))(*v20 + 472))(v20, &v23, &v22);
      if (a3)
        *a3 = (WebCore::ScrollableArea *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 24) + 8)
                                                                                        + 40)
                                                                            + 8)
                                                                + 1944)
                                                    + 248)
                                        + 64);
    }
    else
    {
      v8 = (*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)this + 416))(this);
      v9 = *((_QWORD *)v5 + 4);
      v10 = (*(_DWORD *)a2 + v9 + v8);
      v11 = (*((_DWORD *)a2 + 1) + (((v9 & 0xFFFFFFFF00000000) + v8) >> 32));
      v23 = v10 | (v11 << 32);
      v22 = xmmword_1968DF820;
      WebCore::RenderLayerScrollableArea::scrollToOffset(v5, (WebCore::IntPoint *)&v23, &v22);
      if (a3)
        *a3 = v5;
      this = (WebCore::ScrollableArea *)(*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)v5 + 416))(v5);
      v12 = *((_QWORD *)v5 + 4);
      v13 = ((unint64_t)this + (v12 & 0xFFFFFFFF00000000)) >> 32;
      v14 = (v10 - (v12 + (_DWORD)this));
      *(_QWORD *)&v22 = v14 | ((unint64_t)(v11 - v13) << 32);
      if ((_DWORD)v14)
        v15 = 0;
      else
        v15 = (_DWORD)v11 == (_DWORD)v13;
      if (!v15)
      {
        v16 = *(_QWORD *)(v6 + 32);
        if (v16)
        {
          if (*(_QWORD *)(v16 + 8))
          {
            v17 = WebCore::RenderLayer::enclosingScrollableLayer(*((_QWORD *)v5 + 12), 1, 1);
            if (v17)
            {
              v19 = *(WebCore::RenderLayerScrollableArea **)(v17 + 264);
              if (v19)
                WebCore::RenderLayerScrollableArea::scrollByRecursively(v19, (const WebCore::IntSize *)&v22, a3);
            }
            return (WebCore::ScrollableArea *)WebCore::AutoscrollController::updateAutoscrollRenderer(*(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 24) + 8) + 40) + 8)+ 528)+ 8)+ 640)+ 144), v18);
          }
        }
      }
    }
  }
  return this;
}

unint64_t WebCore::RenderLayerScrollableArea::scrollRectToVisible(uint64_t a1, int32x2_t *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  const WebCore::LayoutRect *v8;
  uint64_t v9;
  char v10;
  int v11;
  const WebCore::LayoutRect *v12;
  unint64_t v13;
  int *v14;
  int *v15;
  unint64_t RectToExposeForScrollIntoView;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  float v23;
  int v24;
  unint64_t v25;
  float v26;
  unint64_t v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  unint64_t v39;
  unint64_t v40;
  int v41;
  int v42;
  int v43;
  unsigned int v44;
  int v45;
  BOOL v46;
  signed int v47;
  int v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  double v55;
  uint64_t v56;
  double v57;
  unint64_t v58;
  __int128 v60;
  _QWORD v61[2];
  char v62;
  unint64_t LocalExposeRect;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  __int128 v76;
  float v77;
  float v78;
  float v79;
  float v80;
  unint64_t v81;

  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 32) + 45) & 4) != 0)
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 32);
  else
    v6 = 0;
  v65 = 0;
  v66 = WebCore::RenderBox::clientWidth((WebCore::RenderBox *)v6);
  v67 = WebCore::RenderBox::clientHeight((WebCore::RenderBox *)v6);
  WebCore::RenderLayerScrollableArea::verticalScrollbarWidth((WebCore::RenderLayerScrollableArea *)a1, 0, 1);
  LocalExposeRect = WebCore::getLocalExposeRect(a2, (const WebCore::LayoutRect *)v6, (WebCore::RenderBox *)&v65, v7, v8);
  v64 = v9;
  if (*(_BYTE *)(a3 + 44))
  {
    v10 = 1;
    WebCore::RenderLayerScrollableArea::verticalScrollbarWidth((WebCore::RenderLayerScrollableArea *)a1, 0, 1);
    v13 = WebCore::getLocalExposeRect((int32x2_t *)(a3 + 28), (const WebCore::LayoutRect *)v6, (WebCore::RenderBox *)&v65, v11, v12);
  }
  else
  {
    v10 = 0;
    v13 = 0;
  }
  v14 = *(int **)(a3 + 8);
  v15 = *(int **)(a3 + 16);
  v61[0] = v13;
  v61[1] = v9;
  v62 = v10;
  RectToExposeForScrollIntoView = WebCore::ScrollableArea::getRectToExposeForScrollIntoView(a1, (int *)&v65, (unsigned int *)&LocalExposeRect, v14, v15, (uint64_t)v61);
  v60 = xmmword_1968DF820;
  v17 = *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 40) + 8) + 528) + 8)
                                        + 640)
                            + 144)
                + 64) != 2
    && (*(_BYTE *)(v6 + 45) & 1) == 0)
  {
    if ((*(_WORD *)(v17 + 28) & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19640BC60);
    }
    if (WebCore::useSmoothScrolling(*(unsigned __int8 *)(a3 + 25), v17))
      BYTE2(v60) = 1;
  }
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 32) + 45) & 4) != 0)
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 32);
  else
    v18 = 0;
  v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 416))(a1);
  v20 = *(_QWORD *)(a1 + 32);
  v21 = v20 & 0xFFFFFFFF00000000;
  v22 = v20 + v19;
  v23 = roundf((float)(int)RectToExposeForScrollIntoView * 0.015625);
  if (v23 >= 2147500000.0)
  {
    v24 = 0x7FFFFFFF;
  }
  else if (v23 <= -2147500000.0)
  {
    v24 = 0x80000000;
  }
  else
  {
    v24 = (int)v23;
  }
  v25 = v21 + v19;
  v26 = roundf((float)SHIDWORD(RectToExposeForScrollIntoView) * 0.015625);
  if (v26 >= 2147500000.0)
  {
    v27 = 0x7FFFFFFF00000000;
  }
  else if (v26 <= -2147500000.0)
  {
    v27 = 0x8000000000000000;
  }
  else
  {
    v27 = (unint64_t)(int)v26 << 32;
  }
  v28 = v22 + v24;
  v29 = (v25 + v27) >> 32;
  v30 = WebCore::ScrollableArea::maximumScrollOffset((WebCore::ScrollableArea *)a1);
  v31 = HIDWORD(v30);
  if (v28 >= (int)v30)
    v32 = v30;
  else
    v32 = v28;
  v33 = v32 & ~(v32 >> 31);
  if ((int)v29 < SHIDWORD(v30))
    LODWORD(v31) = v29;
  v34 = v33 | ((unint64_t)(v31 & ~((int)v31 >> 31)) << 32);
  v81 = v34;
  v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 416))(a1);
  if (v34 == (((*(_QWORD *)(a1 + 32) & 0xFFFFFFFF00000000) + v35) & 0xFFFFFFFF00000000 | (*(_QWORD *)(a1 + 32)
                                                                                             + v35))
    && !*(_BYTE *)(a1 + 45))
  {
    return (unint64_t)*a2;
  }
  v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 416))(a1);
  v37 = *(_QWORD *)(a1 + 32);
  v38 = v37 + v36;
  v39 = ((v37 & 0xFFFFFFFF00000000) + v36) >> 32;
  v40 = WebCore::RenderLayerScrollableArea::scrollToOffset((WebCore::ScrollableArea *)a1, (WebCore::IntPoint *)&v81, &v60);
  v41 = v39 - HIDWORD(v40);
  if (v38 - (int)v40 >= -33554432)
    v42 = (v38 - (_DWORD)v40) << 6;
  else
    v42 = 0x80000000;
  if (v38 - (int)v40 <= 0x1FFFFFF)
    v43 = v42;
  else
    v43 = 0x7FFFFFFF;
  if (v41 >= -33554432)
    v44 = v41 << 6;
  else
    v44 = 0x80000000;
  if (v41 <= 0x1FFFFFF)
    v45 = v44;
  else
    v45 = 0x7FFFFFFF;
  v46 = __OFADD__((_DWORD)LocalExposeRect, v43);
  v47 = LocalExposeRect + v43;
  if (v46)
    v47 = (LocalExposeRect >> 31) + 0x7FFFFFFF;
  v46 = __OFADD__(HIDWORD(LocalExposeRect), v45);
  v48 = HIDWORD(LocalExposeRect) + v45;
  if (v46)
    v48 = (HIDWORD(LocalExposeRect) >> 31) + 0x7FFFFFFF;
  v68 = (float)v47 * 0.015625;
  v69 = (float)v48 * 0.015625;
  v70 = (float)((float)(int)v64 * 0.015625) + v68;
  v71 = v69;
  v72 = v70;
  v73 = (float)((float)SHIDWORD(v64) * 0.015625) + v69;
  v74 = v68;
  v75 = v73;
  WebCore::RenderObject::localToContainerQuad(v18, &v68, 0, 2u, &v76);
  if (v79 >= v77)
    v49 = v77;
  else
    v49 = v79;
  if (*((float *)&v76 + 2) >= *(float *)&v76)
    v50 = *(float *)&v76;
  else
    v50 = *((float *)&v76 + 2);
  if (v49 >= v50)
    v49 = v50;
  v51 = fabsf(v49);
  if (v51 == INFINITY || v51 > 2147500000.0)
    v49 = (float)((SLODWORD(v49) >> 31) ^ 0x7FFFFFFF);
  if (v80 >= v78)
    v52 = v78;
  else
    v52 = v80;
  if (*((float *)&v76 + 3) >= *((float *)&v76 + 1))
    v53 = *((float *)&v76 + 1);
  else
    v53 = *((float *)&v76 + 3);
  if (v52 >= v53)
    v52 = v53;
  v54 = fabsf(v52);
  if (v54 == INFINITY || v54 > 2147500000.0)
    v52 = (float)((SLODWORD(v52) >> 31) ^ 0x7FFFFFFF);
  v55 = v49 * 64.0;
  if (v55 >= 2147483650.0)
  {
    v56 = 0x7FFFFFFFLL;
  }
  else if (v55 <= -2147483650.0)
  {
    v56 = 0x80000000;
  }
  else
  {
    v56 = (int)v55;
  }
  v57 = v52 * 64.0;
  if (v57 >= 2147483650.0)
  {
    v58 = 0x7FFFFFFF00000000;
  }
  else if (v57 <= -2147483650.0)
  {
    v58 = 0x8000000000000000;
  }
  else
  {
    v58 = (unint64_t)(int)v57 << 32;
  }
  return v58 | v56;
}

unint64_t WebCore::getLocalExposeRect(int32x2_t *this, const WebCore::LayoutRect *a2, WebCore::RenderBox *a3, int a4, const WebCore::LayoutRect *a5)
{
  float32x2_t v7;
  float32x2_t v8;
  float32x2_t v9;
  float v10;
  float v11;
  float v12;
  BOOL v13;
  float v14;
  float v15;
  float v16;
  float v17;
  double v19;
  int v20;
  unsigned int v21;
  double v22;
  int v23;
  unsigned int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  unsigned int v35;
  BOOL v36;
  uint64_t v37;
  _QWORD v39[4];
  __int128 v40;
  float v41;
  float v42;
  float v43;
  float v44;

  v7 = (float32x2_t)vdup_n_s32(0x3C800000u);
  v8 = vmul_f32(vcvt_f32_s32(*this), v7);
  v9 = vadd_f32(v8, vmul_f32(vcvt_f32_s32(this[1]), v7));
  v39[0] = v8;
  v39[1] = __PAIR64__(v8.u32[1], v9.u32[0]);
  v8.i32[1] = v9.i32[1];
  v39[2] = v9;
  v39[3] = v8;
  WebCore::RenderObject::absoluteToLocalQuad((uint64_t)a2, (float *)v39, 2u, &v40);
  if (v43 >= v41)
    v10 = v41;
  else
    v10 = v43;
  if (*((float *)&v40 + 2) >= *(float *)&v40)
    v11 = *(float *)&v40;
  else
    v11 = *((float *)&v40 + 2);
  if (v10 >= v11)
    v10 = v11;
  v12 = fabsf(v10);
  v13 = v12 != INFINITY && v12 <= 2147500000.0;
  v14 = (float)((SLODWORD(v10) >> 31) ^ 0x7FFFFFFF);
  if (v13)
    v14 = v10;
  if (v44 >= v42)
    v15 = v42;
  else
    v15 = v44;
  if (*((float *)&v40 + 3) >= *((float *)&v40 + 1))
    v16 = *((float *)&v40 + 1);
  else
    v16 = *((float *)&v40 + 3);
  if (v15 >= v16)
    v15 = v16;
  v17 = fabsf(v15);
  if (v17 == INFINITY || v17 > 2147500000.0)
    v15 = (float)((SLODWORD(v15) >> 31) ^ 0x7FFFFFFF);
  v19 = v14 * 64.0;
  if (v19 > -2147483650.0)
    v20 = (int)v19;
  else
    v20 = 0x80000000;
  if (v19 < 2147483650.0)
    v21 = v20;
  else
    v21 = 0x7FFFFFFF;
  v22 = v15 * 64.0;
  if (v22 > -2147483650.0)
    v23 = (int)v22;
  else
    v23 = 0x80000000;
  if (v22 < 2147483650.0)
    v24 = v23;
  else
    v24 = 0x7FFFFFFF;
  v25 = (*(uint64_t (**)(const WebCore::LayoutRect *))(*(_QWORD *)a2 + 1016))(a2);
  v26 = (*(uint64_t (**)(const WebCore::LayoutRect *))(*(_QWORD *)a2 + 1000))(a2);
  if (v25 == 0x80000000)
    v27 = 0x7FFFFFFF;
  else
    v27 = -v25;
  if (v26 == 0x80000000)
    v28 = 0x7FFFFFFF;
  else
    v28 = -v26;
  v29 = v21 + v27;
  if (__OFADD__(v21, v27))
    v29 = (v21 >> 31) + 0x7FFFFFFF;
  v30 = v24 + v28;
  if (__OFADD__(v24, v28))
    v30 = (v24 >> 31) + 0x7FFFFFFF;
  v31 = WebCore::RenderBox::scrollPaddingForViewportRect(a2, a3);
  if (v32 == 0x80000000)
    v33 = 0x7FFFFFFF;
  else
    v33 = -v32;
  if (v31 == 0x80000000)
    v34 = 0x7FFFFFFF;
  else
    v34 = -v31;
  v35 = v29 + v33;
  if (__OFADD__(v29, v33))
    v35 = (v29 >> 31) + 0x7FFFFFFF;
  v36 = __OFADD__(v30, v34);
  v37 = v30 + v34;
  if (v36)
    v37 = (v30 >> 31) + 0x7FFFFFFF;
  return v35 | (unint64_t)(v37 << 32);
}

uint64_t WebCore::RenderLayerScrollableArea::mockScrollbarsControllerEnabled(WebCore::RenderLayerScrollableArea *this)
{
  return (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 12) + 32) + 24) + 8) + 40)
                                                                                            + 8)
                                                                                + 528)
                                                                    + 8)
                                                        + 24)
                                            + 8)
                                + 112)
                    + 688) >> 12) & 1;
}

uint64_t WebCore::RenderLayerScrollableArea::logMockScrollbarsControllerMessage(uint64_t this, const WTF::String *a2)
{
  _QWORD *v2;
  uint64_t v3;
  int v4;
  int v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  v2 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 96) + 32) + 24) + 8) + 40)
                  + 8);
  v3 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v4 = *(_DWORD *)(v3 + 4);
    *(_DWORD *)v3 += 2;
    if (v4 < 0 || (this = (v4 + 13), __OFADD__(v4, 13)))
    {
      v7 = 0;
      goto LABEL_18;
    }
    v5 = (*(unsigned __int8 *)(v3 + 16) >> 2) & 1;
  }
  else
  {
    v5 = 1;
    this = 13;
  }
  this = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(this, v5, (int8x16_t *)"RenderLayer: ", 0xDu, v3, &v7);
  if (!v7)
  {
LABEL_18:
    __break(0xC471u);
    return this;
  }
  WebCore::Document::addConsoleMessage(v2, 16, 3, &v7, 0);
  this = (uint64_t)v7;
  v7 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
    {
      this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v6);
      if (!v3)
        return this;
      goto LABEL_10;
    }
    *(_DWORD *)this -= 2;
  }
  if (!v3)
    return this;
LABEL_10:
  if (*(_DWORD *)v3 == 2)
    return WTF::StringImpl::destroy((WTF::StringImpl *)v3, v6);
  *(_DWORD *)v3 -= 2;
  return this;
}

unsigned __int128 *WebCore::RenderLayerScrollableArea::debugDescription@<X0>(WebCore::RenderLayer **this@<X0>, WTF::StringImpl **a2@<X8>)
{
  return WebCore::RenderLayer::debugDescription(this[12], a2);
}

uint64_t WebCore::RenderLayerScrollableArea::didStartScrollAnimation(WebCore::RenderLayerScrollableArea *this)
{
  return WebCore::Page::scheduleRenderingUpdate(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 12) + 32) + 24)+ 8)+ 40)+ 8)+ 528)+ 8)+ 24)+ 8), 2);
}

uint64_t WebCore::RenderLayerScrollableArea::animatedScrollDidEnd(uint64_t this)
{
  _QWORD *v1;
  uint64_t v2;

  if (*(_BYTE *)(this + 84))
  {
    v1 = (_QWORD *)this;
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 96)
                                                                                           + 32)
                                                                               + 24)
                                                                   + 8)
                                                       + 40)
                                           + 8)
                               + 1944)
                   + 248);
    *(_BYTE *)(this + 84) = 0;
    this = *(_QWORD *)(v2 + 1296);
    if (this)
      return WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::ScrollableArea>(this, v1);
  }
  return this;
}

float WebCore::RenderLayerScrollableArea::deviceScaleFactor(WebCore::RenderLayerScrollableArea *this)
{
  uint64_t v1;
  float v2;
  uint64_t v3;
  uint64_t v4;
  float *v5;
  int v6;
  WTF *v8;
  void *v9;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 12) + 32) + 24)
                                                     + 8)
                                         + 40)
                             + 8)
                 + 528);
  v2 = 1.0;
  if (v1)
  {
    v3 = *(_QWORD *)(v1 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        v5 = *(float **)(v4 + 8);
        if (v5)
        {
          v6 = (*(_DWORD *)v5)++;
          v2 = v5[91];
          if (v6)
          {
            *(_DWORD *)v5 = v6;
          }
          else
          {
            WebCore::Page::~Page((uint64_t)v5);
            WTF::fastFree(v8, v9);
          }
        }
      }
    }
  }
  return v2;
}

uint64_t WebCore::RenderLayerScrollableArea::updateScrollPositionForScrollAnchoringController(WebCore::RenderLayerScrollableArea *this, const WebCore::RenderObject *a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 22);
  if (result)
    return WebCore::ScrollAnchoringController::adjustScrollPositionForAnchoring(result, a2);
  return result;
}

uint64_t WebCore::RenderLayerScrollableArea::invalidateScrollAnchoringElement(WebCore::RenderLayerScrollableArea *this, const WebCore::RenderObject *a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 22);
  if (result)
    return WebCore::ScrollAnchoringController::invalidateAnchorElement(result, a2);
  return result;
}

uint64_t WebCore::RenderLayerScrollableArea::rootFrameID(WebCore::RenderLayerScrollableArea *this)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 12) + 32) + 24) + 8)
                                                                                           + 40)
                                                                               + 8)
                                                                   + 528)
                                                       + 8)
                                           + 632)
                               + 8)
                   + 32);
}

void WebCore::RenderLayoutState::computeLineGridPaginationOrigin(WebCore::RenderLayoutState *this, const WebCore::RenderMultiColumnFlow *a2)
{
  _DWORD *v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  void *v10;
  int v11;
  BOOL v12;
  int v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  float v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;

  if ((*(_BYTE *)this & 2) != 0 && *((_DWORD *)this + 18) && a2 != 0)
  {
    v4 = *(_DWORD **)(*((_QWORD *)this + 3) + 8);
    v5 = v4[5];
    v6 = 84;
    if ((v5 & 0x1000) == 0)
      v6 = 88;
    v7 = *(_DWORD *)((char *)this + v6);
    v8 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v4 + 1048))(*(_QWORD *)(*((_QWORD *)this + 3) + 8));
    v9 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v4 + 960))(v4);
    v11 = v8 + v9;
    if (__OFADD__(v8, v9))
      v11 = (v8 >> 31) + 0x7FFFFFFF;
    v12 = __OFADD__(v7, v11);
    v13 = v7 + v11;
    if (v12)
      v14 = (v7 >> 31) + 0x7FFFFFFF;
    else
      v14 = v13;
    v15 = 76;
    if ((v5 & 0x1000) == 0)
      v15 = 80;
    v16 = *(_DWORD *)((char *)this + v15);
    if ((int)v16 > v14)
    {
      v17 = *((_QWORD *)this + 3);
      if (v17)
        v17 = *(_QWORD *)(v17 + 8);
      v19 = ceilf(WebCore::RenderStyle::computedLineHeight((WebCore::RenderStyle *)(v17 + 80), v10) * 64.0);
      if (v19 >= 2147500000.0)
      {
        v20 = 0x7FFFFFFF;
      }
      else if (v19 <= -2147500000.0)
      {
        v20 = 0x80000000;
      }
      else
      {
        v20 = (int)v19;
      }
      v21 = ((int)(v20 - (v18 & 0xFFFFFFC0) + 32) >> 6) + v20 / 64;
      if (v21)
      {
        v22 = v16 - v14;
        if (__OFSUB__(v16, v14))
          v22 = (v16 >> 31) + 0x7FFFFFFF;
        v23 = (((int)(v22 - (((v16 >> 31) + 0x7FFFFFFF) & 0xFFFFFFC0) + 32) >> 6) + v22 / 64) % v21;
        if (v23 <= 0x1FFFFFF)
          v24 = v23 << 6;
        else
          v24 = 0x7FFFFFFF;
        v12 = __OFSUB__(v20, v24);
        v25 = v20 - v24;
        if (v12)
          v25 = (v20 >> 31) + 0x7FFFFFFF;
        v26 = 92;
        if ((v5 & 0x1000) == 0)
          v26 = 96;
        *(_DWORD *)((char *)this + v26) = v25;
      }
    }
  }
}

uint64_t WebCore::RenderLayoutState::establishLineGrid(uint64_t result, _QWORD *a2, int a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  WTF *v16;

  v5 = (_QWORD *)result;
  v6 = *(_QWORD *)(result + 24);
  if (v6)
  {
    v10 = *(_QWORD *)(v6 + 8);
    if (v10)
    {
      v11 = *(_QWORD *)(*(_QWORD *)(a4 + 104) + 328);
      if (*(_QWORD *)(*(_QWORD *)(v10 + 104) + 328) == v11)
        return result;
      if (a3 - 1 >= 0)
      {
        do
        {
          v12 = a2[--a3];
          v13 = *(_QWORD *)(v12 + 24);
          if (!v13)
            break;
          v14 = *(_QWORD *)(v13 + 8);
          if (v14 != v10)
          {
            if (!v14)
              break;
            if (*(_QWORD *)(*(_QWORD *)(v14 + 104) + 328) == v11)
            {
              result = *(_QWORD *)(v14 + 8);
              if (result)
                goto LABEL_27;
              result = WTF::fastCompactMalloc((WTF *)0x10);
              *(_DWORD *)result = 1;
              *(_QWORD *)(result + 8) = v14;
              v16 = *(WTF **)(v14 + 8);
              *(_QWORD *)(v14 + 8) = result;
              if (!v16)
                goto LABEL_27;
              if (*(_DWORD *)v16 != 1)
              {
                --*(_DWORD *)v16;
                goto LABEL_27;
              }
              WTF::fastFree(v16, a2);
              result = *(_QWORD *)(v14 + 8);
              if (result)
LABEL_27:
                ++*(_DWORD *)result;
              v15 = (WTF *)v5[3];
              v5[3] = result;
              if (v15)
              {
                if (*(_DWORD *)v15 == 1)
                  result = WTF::fastFree(v15, a2);
                else
                  --*(_DWORD *)v15;
              }
              v8 = *(_QWORD *)(v12 + 84);
              goto LABEL_8;
            }
            v10 = *(_QWORD *)(v13 + 8);
          }
        }
        while (a3 > 0);
      }
    }
  }
  result = *(_QWORD *)(a4 + 8);
  if (result)
    goto LABEL_3;
  result = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 8) = a4;
  v9 = *(WTF **)(a4 + 8);
  *(_QWORD *)(a4 + 8) = result;
  if (!v9)
    goto LABEL_3;
  if (*(_DWORD *)v9 != 1)
  {
    --*(_DWORD *)v9;
LABEL_3:
    ++*(_DWORD *)result;
    goto LABEL_4;
  }
  WTF::fastFree(v9, a2);
  result = *(_QWORD *)(a4 + 8);
  if (result)
    goto LABEL_3;
LABEL_4:
  v7 = (WTF *)v5[3];
  v5[3] = result;
  if (v7)
  {
    if (*(_DWORD *)v7 == 1)
      result = WTF::fastFree(v7, a2);
    else
      --*(_DWORD *)v7;
  }
  v8 = v5[7];
LABEL_8:
  *(_QWORD *)((char *)v5 + 84) = v8;
  return result;
}

uint64_t WebCore::RenderLayoutState::pageLogicalOffset(_DWORD *a1, uint64_t a2, int a3)
{
  unsigned int v3;
  BOOL v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;

  if ((*(_BYTE *)(a2 + 21) & 0x10) != 0)
  {
    v8 = a1[14];
    v4 = __OFADD__(v8, a3);
    v9 = v8 + a3;
    v6 = (v8 >> 31) + 0x7FFFFFFF;
    if (!v4)
      v6 = v9;
    v7 = a1[19];
  }
  else
  {
    v3 = a1[15];
    v4 = __OFADD__(v3, a3);
    v5 = v3 + a3;
    v6 = (v3 >> 31) + 0x7FFFFFFF;
    if (!v4)
      v6 = v5;
    v7 = a1[20];
  }
  v4 = __OFSUB__(v6, v7);
  v10 = v6 - v7;
  v11 = (v6 >> 31) + 0x7FFFFFFF;
  if (v4)
    return v11;
  else
    return v10;
}

_QWORD *WebCore::LayoutStateDisabler::LayoutStateDisabler(_QWORD *this, WebCore::LocalFrameViewLayoutContext *a2)
{
  *this = a2;
  ++*((_DWORD *)a2 + 39);
  return this;
}

void WebCore::LayoutStateDisabler::~LayoutStateDisabler(WebCore::LayoutStateDisabler *this)
{
  --*(_DWORD *)(*(_QWORD *)this + 156);
}

WebCore::LegacyInlineFlowBox **WebCore::RenderLineBoxList::removeLineBox(WebCore::LegacyInlineFlowBox **this, WebCore::LegacyInlineFlowBox *a2)
{
  uint64_t v2;
  uint64_t v3;

  if (*this == a2)
    *this = (WebCore::LegacyInlineFlowBox *)*((_QWORD *)a2 + 12);
  if (this[1] == a2)
    this[1] = (WebCore::LegacyInlineFlowBox *)*((_QWORD *)a2 + 11);
  v2 = *((_QWORD *)a2 + 12);
  if (v2)
    *(_QWORD *)(v2 + 88) = *((_QWORD *)a2 + 11);
  v3 = *((_QWORD *)a2 + 11);
  if (v3)
    *(_QWORD *)(v3 + 96) = v2;
  return this;
}

_QWORD **WebCore::RenderLineBoxList::dirtyLineBoxes(_QWORD **this)
{
  _QWORD *i;

  for (i = *this; i; i = (_QWORD *)i[12])
    this = (_QWORD **)(*(uint64_t (**)(_QWORD *))(*i + 184))(i);
  return this;
}

_QWORD **WebCore::RenderLineBoxList::shiftLinesBy(_QWORD **result, int a2, int a3)
{
  _QWORD *v3;
  float v4;
  float v5;

  v3 = *result;
  if (*result)
  {
    v4 = (float)a2 * 0.015625;
    v5 = (float)a3 * 0.015625;
    do
    {
      result = (_QWORD **)(*(uint64_t (**)(_QWORD *, float, float))(*v3 + 48))(v3, v4, v5);
      v3 = (_QWORD *)v3[12];
    }
    while (v3);
  }
  return result;
}

BOOL WebCore::RenderLineBoxList::rangeIntersectsRect(WebCore::RenderObject *a1, int a2, unsigned int a3, int *a4, _DWORD *a5)
{
  int v5;
  unsigned int v6;
  int v7;
  BOOL v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  unsigned int v17;
  WebCore::RenderObject *v18;
  int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  int *v23;
  _DWORD *v24;
  WebCore::RenderObject *v25;

  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 3) + 8) + 40) + 8)
                                        + 1944)
                            + 248)
                + 1383))
  {
    v17 = a2;
    v22 = a3;
    v23 = a4;
    v24 = a5;
    v25 = a1;
    v18 = a1;
    if ((*((_BYTE *)a1 + 45) & 4) == 0)
      v18 = WebCore::RenderObject::containingBlock(a1);
    v19 = WebCore::RenderBox::flipForWritingMode(v18, v17);
    v20 = WebCore::RenderBox::flipForWritingMode(v18, v22);
    a2 = v19;
    a3 = v20;
    a4 = v23;
    a5 = v24;
    a1 = v25;
  }
  v5 = a3 - a2;
  if (__OFSUB__(a3, a2))
    v5 = (a3 >> 31) + 0x7FFFFFFF;
  if (v5 < 0)
    v5 = -v5;
  if ((int)a3 >= a2)
    v6 = a2;
  else
    v6 = a3;
  if (((*((_DWORD *)a1 + 31) >> 13) & 6u) - 2 < 4)
  {
    v8 = __OFADD__(v6, *a5);
    v9 = v6 + *a5;
    v21 = (v6 >> 31) + 0x7FFFFFFF;
    if (v8)
      v9 = v21;
    v11 = *a4;
    v12 = a4[2];
  }
  else
  {
    v7 = a5[1];
    v8 = __OFADD__(v6, v7);
    v9 = v6 + v7;
    v10 = (v6 >> 31) + 0x7FFFFFFF;
    if (v8)
      v9 = v10;
    v11 = a4[1];
    v12 = a4[3];
  }
  v8 = __OFADD__(v11, v12);
  v13 = v11 + v12;
  v14 = (v11 >> 31) + 0x7FFFFFFF;
  if (!v8)
    v14 = v13;
  if (v9 >= v14)
    return 0;
  v8 = __OFADD__(v9, v5);
  v15 = v9 + v5;
  if (v8)
    v15 = (v9 >> 31) + 0x7FFFFFFF;
  return v15 > v11;
}

uint64_t WebCore::LegacyInlineFlowBox::logicalBottomVisualOverflow(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  unint64_t v5;

  v2 = *(_QWORD *)(a1 + 64);
  if (v2)
  {
    v4 = *(_QWORD *)(v2 + 20);
    v5 = *(_QWORD *)(v2 + 28);
    if ((*(_WORD *)(a1 + 52) & 0x800) != 0)
    {
      v4 >>= 32;
      v5 >>= 32;
    }
    a2 = (v4 + v5);
    if (__OFADD__((_DWORD)v4, (_DWORD)v5))
      return (v4 >> 31) + 0x7FFFFFFF;
  }
  return a2;
}

uint64_t WebCore::RenderLineBoxList::paint(uint64_t this, WebCore::RenderBoxModelObject *a2, WebCore::PaintInfo *a3, int32x2_t *a4)
{
  uint64_t v4;
  _QWORD *v8;
  _DWORD *v9;
  BOOL v10;
  _DWORD *v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  void *v21;
  __int128 v22;
  __int128 v23;
  uint64_t i;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  WebCore::LegacyRootInlineBox *v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  BOOL v38;
  uint64_t v39;
  uint64_t *v41;
  uint64_t *j;
  WTF *v43;
  uint64_t v44;
  WTF *k;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  unsigned int v55;
  int v56;
  int v57;
  int v58;
  signed int v59;
  unsigned __int32 v60;
  int v61;
  BOOL v62;
  int v63;
  int v64;
  signed int v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  int v69;
  unsigned int v70;
  BOOL v71;
  int v72;
  signed int v73;
  int v74;
  _BOOL4 v75;
  int v76;
  int v77;
  unsigned int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  uint64_t v85;
  __int16 v86;
  unint64_t v87;
  unint64_t v88;
  unsigned int v89;
  unint64_t v90;
  unint64_t v91;
  unsigned int v92;
  unint64_t v93;
  unint64_t v94;
  unsigned int v95;
  unint64_t v96;
  unint64_t v97;
  unsigned int v98;
  _QWORD *v99;
  WTF *v100;
  WTF *v101;
  unint64_t v102;
  int v103;
  int v104;
  uint64_t v105;
  WTF *v106;
  WTF *v107;
  int v108;
  WTF *v109[2];
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  uint64_t v116;

  v4 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v8 = (_QWORD *)this;
    v9 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 40) + 8) + 1944);
    v10 = (int)v9[91] < 1 || v9[92] < 1;
    do
    {
      v11 = (_DWORD *)v4;
      v4 = *(_QWORD *)(v4 + 24);
    }
    while (v4);
    if (((*(uint64_t (**)(_DWORD *))(*(_QWORD *)v11 + 88))(v11) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19640CC40);
    }
    v12 = v8[1];
    do
    {
      v13 = (_DWORD *)v12;
      v12 = *(_QWORD *)(v12 + 24);
    }
    while (v12);
    if (((*(uint64_t (**)(_DWORD *))(*(_QWORD *)v13 + 88))(v13) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19640CC60);
    }
    v14 = *v8;
    v15 = v11[29];
    v16 = *(_QWORD *)(*v8 + 64);
    v17 = v15;
    if (v16)
    {
      v85 = v16 + 20;
      v83 = *(_DWORD *)(v16 + 20);
      v84 = *(_DWORD *)(v85 + 4);
      if ((*(_WORD *)(v14 + 52) & 0x800) != 0)
        v17 = v84;
      else
        v17 = v83;
    }
    if (v10)
    {
      v18 = v8[1];
      v19 = *(_QWORD *)(v18 + 64);
      if (v19)
      {
        v86 = *(_WORD *)(v18 + 52);
        v87 = *(_QWORD *)(v19 + 20);
        v88 = *(_QWORD *)(v19 + 28);
        v89 = v87 + v88;
        if (__OFADD__((_DWORD)v87, (_DWORD)v88))
          v89 = (v87 >> 31) + 0x7FFFFFFF;
        v90 = HIDWORD(v87);
        v91 = HIDWORD(v88);
        v71 = __OFADD__((_DWORD)v90, (_DWORD)v91);
        v20 = v90 + v91;
        v92 = (v90 >> 31) + 0x7FFFFFFF;
        if (v71)
          v20 = v92;
        if ((v86 & 0x800) == 0)
          v20 = v89;
      }
      else
      {
        v20 = v13[30];
      }
    }
    else
    {
      v46 = *(_QWORD *)(v14 + 24);
      if (v15 >= v17)
        v15 = v17;
      if (!v46)
        v17 = v15;
      v47 = v8[1];
      v48 = v13[30];
      v49 = WebCore::LegacyInlineFlowBox::logicalBottomVisualOverflow(v47, v48);
      v50 = v49 <= (int)v48 ? v48 : v49;
      v20 = *(_QWORD *)(v47 + 24) ? v49 : v50;
    }
    this = WebCore::RenderLineBoxList::rangeIntersectsRect(a2, v17, v20, (int *)a3, a4);
    if ((_DWORD)this)
    {
      v22 = *((_OWORD *)a3 + 3);
      v113 = *((_OWORD *)a3 + 2);
      v114 = v22;
      v115 = *((_OWORD *)a3 + 4);
      v116 = *((_QWORD *)a3 + 10);
      v23 = *((_OWORD *)a3 + 1);
      v111 = *(_OWORD *)a3;
      v112 = v23;
      *(_OWORD *)v109 = 0u;
      v110 = 0u;
      *(_QWORD *)&v113 = v109;
      for (i = *v8; i; i = *(_QWORD *)(i + 96))
      {
        if (!v10)
        {
          v51 = i;
          do
          {
            v52 = v51;
            v51 = *(_QWORD *)(v51 + 24);
          }
          while (v51);
          if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v52 + 88))(v52) & 1) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x19640D090);
          }
          v53 = *(_DWORD *)(v52 + 116);
          v54 = *(_QWORD *)(i + 64);
          v108 = v53;
          if (v54)
          {
            v102 = *(_QWORD *)(v54 + 20);
            if ((*(_WORD *)(i + 52) & 0x800) != 0)
              v102 >>= 32;
            v108 = v102;
          }
          this = WebCore::LegacyInlineFlowBox::logicalLeftVisualOverflow((WebCore::LegacyInlineFlowBox *)i);
          v55 = this;
          if (!*(_QWORD *)(i + 24))
          {
            if (v53 >= v108)
              v56 = v108;
            else
              v56 = v53;
            v108 = v56;
            if ((int)this <= *(_DWORD *)(v52 + 120))
              v55 = *(_DWORD *)(v52 + 120);
            else
              v55 = this;
          }
          v57 = v55 - v108;
          if (__OFSUB__(v55, v108))
            v57 = (v55 >> 31) + 0x7FFFFFFF;
          v58 = v9[92];
          v59 = v58 << 6;
          if (v58 < -33554432)
            v59 = 0x80000000;
          if (v58 > 0x1FFFFFF || v59 >= v57)
          {
            v60 = a4->u32[1];
            v61 = v60 + v55;
            v62 = __OFADD__(v60, v55);
            v63 = (v60 >> 31) + 0x7FFFFFFF;
            if (!__OFADD__(v60, v55))
              v63 = v60 + v55;
            v64 = v9[90] + v58;
            v65 = v64 << 6;
            if (v64 < -33554432)
              v65 = 0x80000000;
            if (v64 <= 0x1FFFFFF && v65 < v63)
            {
              v66 = *(_QWORD *)(v52 + 96);
              if (v66)
              {
                this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v66 + 88))(v66);
                if ((this & 1) == 0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19640D0B8);
                }
                v67 = *(_DWORD *)(v66 + 116);
                v68 = *(_QWORD *)(v66 + 64);
                v69 = v67;
                if (v68)
                {
                  v105 = v68 + 20;
                  v103 = *(_DWORD *)(v68 + 20);
                  v104 = *(_DWORD *)(v105 + 4);
                  if ((*(_WORD *)(v66 + 52) & 0x800) != 0)
                    v69 = v104;
                  else
                    v69 = v103;
                }
                if (v67 >= v69)
                  v67 = v69;
                if (v67 >= (int)v55)
                  v70 = v55;
                else
                  v70 = v67;
                v60 = a4->u32[1];
                v71 = __OFADD__(v60, v70);
                v61 = v60 + v70;
                v62 = v71;
              }
            }
            if (v62)
              v61 = (v60 >> 31) + 0x7FFFFFFF;
            v72 = v9[92] + v9[90];
            v73 = v72 << 6;
            if (v72 < -33554432)
              v73 = 0x80000000;
            if (v72 <= 0x1FFFFFF && v73 < v61)
            {
              v74 = v60 + v108;
              v75 = __OFADD__(v60, v108);
              v76 = v60 + v108;
              if (__OFADD__(v60, v108))
                v76 = (v60 >> 31) + 0x7FFFFFFF;
              v77 = v9[87];
              v78 = v77 << 6;
              if (v77 < -33554432)
                v78 = 0x80000000;
              if (v77 <= 0x1FFFFFF)
                v79 = v78;
              else
                v79 = 0x7FFFFFFF;
              if (v76 < v79)
              {
                if (v75)
                  v74 = (v60 >> 31) + 0x7FFFFFFF;
                this = WebCore::RenderView::setBestTruncatedAt((uint64_t)v9, v74 / 64, a2, 0);
                v60 = a4->u32[1];
                v74 = v60 + v108;
                LOBYTE(v75) = __OFADD__(v60, v108);
              }
              if (v75)
                v74 = (v60 >> 31) + 0x7FFFFFFF;
              v80 = v9[87];
              v81 = v80 << 6;
              if (v80 < -33554432)
                v81 = 0x80000000;
              v82 = v80 <= 0x1FFFFFF ? v81 : 0x7FFFFFFF;
              if (v74 >= v82)
                break;
            }
          }
        }
        v25 = i;
        do
        {
          v26 = v25;
          v25 = *(_QWORD *)(v25 + 24);
        }
        while (v25);
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 88))(v26) & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19640CC80);
        }
        v27 = *(_DWORD *)(v26 + 116);
        v28 = *(_QWORD *)(i + 64);
        v29 = v27;
        if (v28)
        {
          if ((*(_WORD *)(i + 52) & 0x800) != 0)
            v29 = *(_DWORD *)(v28 + 24);
          else
            v29 = *(_DWORD *)(v28 + 20);
        }
        v30 = *(_QWORD *)(v26 + 32);
        if (v30)
          v30 = *(_QWORD *)(v30 + 8);
        if ((*(_BYTE *)(v30 + 45) & 8) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19640CCA0);
        }
        v31 = (unsigned __int16)*(_DWORD *)(v30 + 124) >> 13;
        if (v31 > 4 || ((1 << v31) & 0x16) == 0)
        {
          v32 = *(WebCore::LegacyRootInlineBox **)(v26 + 88);
          if (v32)
          {
            if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v32 + 88))(*(_QWORD *)(v26 + 88)) & 1) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x19640CCE0);
            }
            v27 = WebCore::LegacyRootInlineBox::selectionBottom(v32);
            v28 = *(_QWORD *)(i + 64);
          }
        }
        if (v28)
        {
          v93 = *(_QWORD *)(v28 + 20);
          v94 = *(_QWORD *)(v28 + 28);
          v95 = v93 + v94;
          if (__OFADD__((_DWORD)v93, (_DWORD)v94))
            v95 = (v93 >> 31) + 0x7FFFFFFF;
          v96 = HIDWORD(v93);
          v97 = HIDWORD(v94);
          v71 = __OFADD__((_DWORD)v96, (_DWORD)v97);
          v33 = v96 + v97;
          v98 = (v96 >> 31) + 0x7FFFFFFF;
          if (v71)
            v33 = v98;
          if ((*(_WORD *)(i + 52) & 0x800) == 0)
            v33 = v95;
        }
        else
        {
          v33 = *(_DWORD *)(v26 + 120);
        }
        if (v27 >= v29)
          v34 = v29;
        else
          v34 = v27;
        this = WebCore::RenderLineBoxList::rangeIntersectsRect(a2, v34, v33, (int *)&v111, a4);
        if ((_DWORD)this)
        {
          v35 = i;
          do
          {
            v36 = (unsigned int *)v35;
            v35 = *(_QWORD *)(v35 + 24);
          }
          while (v35);
          if (((*(uint64_t (**)(unsigned int *))(*(_QWORD *)v36 + 88))(v36) & 1) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x19640CCC0);
          }
          this = (*(uint64_t (**)(uint64_t, __int128 *, int32x2_t *, _QWORD, _QWORD))(*(_QWORD *)i + 56))(i, &v111, a4, v36[29], v36[30]);
        }
      }
      v37 = (unsigned __int16)v112 - 16;
      v38 = v37 > 0x30;
      v39 = (1 << v37) & 0x1000000010001;
      if (!v38 && v39 != 0)
      {
        v41 = (uint64_t *)v113;
        j = (uint64_t *)(v113 + 8);
        v43 = *(WTF **)(v113 + 8);
        if (v43)
        {
          v99 = *(_QWORD **)(v113 + 8);
          while (1)
          {
            this = *(_QWORD *)(*v99 + 8);
            if (this)
              break;
            v99 = (_QWORD *)v99[2];
            if (!v99)
              goto LABEL_169;
          }
LABEL_166:
          this = WebCore::RenderInline::paintOutline(this, (WebCore::PaintInfo *)&v111, a4);
          while (1)
          {
            v99 = (_QWORD *)v99[2];
            if (!v99)
              break;
            this = *(_QWORD *)(*v99 + 8);
            if (this)
            {
              ++*((_DWORD *)v41 + 6);
              goto LABEL_166;
            }
          }
          ++*((_DWORD *)v41 + 6);
          v41 = (uint64_t *)v113;
          v43 = *(WTF **)(v113 + 8);
LABEL_169:
          for (j = v41 + 1; v43; this = WTF::fastFree(v100, v21))
          {
            v100 = v43;
            v43 = (WTF *)*((_QWORD *)v43 + 2);
            v101 = *(WTF **)v100;
            *(_QWORD *)v100 = 0;
            if (v101)
            {
              if (*(_DWORD *)v101 == 1)
                WTF::fastFree(v101, v21);
              else
                --*(_DWORD *)v101;
            }
          }
        }
        v44 = *v41;
        if (*v41)
        {
          *v41 = 0;
          this = WTF::fastFree((WTF *)(v44 - 16), v21);
          v44 = *v41;
          *j = 0;
          j[1] = 0;
          *((_DWORD *)j + 4) = 0;
          if (v44)
          {
            LODWORD(v44) = *(_DWORD *)(v44 - 12);
            if (v44 > 0x7FFFFFFE)
              LODWORD(v44) = 0x7FFFFFFF;
          }
        }
        else
        {
          *j = 0;
          j[1] = 0;
          *((_DWORD *)j + 4) = 0;
        }
        *((_DWORD *)v41 + 7) = 2 * v44;
      }
      for (k = v109[1]; k; this = WTF::fastFree(v106, v21))
      {
        v106 = k;
        k = (WTF *)*((_QWORD *)k + 2);
        v107 = *(WTF **)v106;
        *(_QWORD *)v106 = 0;
        if (v107)
        {
          if (*(_DWORD *)v107 == 1)
            WTF::fastFree(v107, v21);
          else
            --*(_DWORD *)v107;
        }
      }
      if (v109[0])
        return WTF::fastFree((WTF *)((char *)v109[0] - 16), v21);
    }
  }
  return this;
}

unint64_t WebCore::LegacyInlineFlowBox::logicalLeftVisualOverflow(WebCore::LegacyInlineFlowBox *this)
{
  uint64_t v1;
  __int16 v2;
  unint64_t result;
  uint64_t v4;
  double v5;

  v1 = *((_QWORD *)this + 8);
  v2 = *((_WORD *)this + 26);
  if (v1)
  {
    result = *(_QWORD *)(v1 + 20);
    if ((v2 & 0x800) == 0)
      result >>= 32;
  }
  else
  {
    v4 = 44;
    if ((*((_WORD *)this + 26) & 0x800) == 0)
      v4 = 48;
    v5 = *(float *)((char *)this + v4) * 64.0;
    if (v5 >= 2147483650.0)
    {
      return 0x7FFFFFFFLL;
    }
    else if (v5 <= -2147483650.0)
    {
      return 0x80000000;
    }
    else
    {
      return (int)v5;
    }
  }
  return result;
}

BOOL WebCore::RenderLineBoxList::hitTest(_QWORD *a1, WebCore::RenderObject *a2, uint64_t a3, uint64_t a4, unsigned int *a5, _DWORD *a6, uint64_t a7)
{
  uint64_t v7;
  signed int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  _BOOL4 v23;
  int v24;
  int v25;
  unsigned int v26;
  BOOL v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  int v36;
  signed int v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  _BOOL4 v46;
  int v47;
  unsigned int v48;
  int v49;
  int v50;
  uint64_t v51;
  int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  int v57;
  signed int v58;
  int32x4_t v59;
  int32x4_t v60;
  int8x16_t v61;
  int32x4_t v62;
  int8x16_t v63;
  _DWORD *v64;
  uint64_t v65;
  _DWORD *v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  _BOOL8 result;
  uint64_t v73;
  uint64_t v74;
  _DWORD *v75;
  uint64_t v76;
  unint64_t v77;
  unsigned int v78;
  unint64_t v79;
  int v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  __int16 v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  int8x16_t v90;

  v7 = *a1;
  if (!*a1)
    return 0;
  v16 = *a5;
  v15 = a5[1];
  v17 = *a5 + 63;
  if ((*a5 & 0x80000000) == 0)
    v17 = *a5;
  v18 = (v17 >> 6);
  if ((*(_WORD *)(v7 + 52) & 0x800) != 0)
  {
    v42 = ((int)(v15 - (v16 & 0xFFFFFFC0) + 32) >> 6) + v15 / 64;
    v43 = a5[3];
    v44 = v42 << 6;
    if (v42 < -33554432)
      v44 = 0x80000000;
    if (v42 > 0x1FFFFFF)
      v44 = 0x7FFFFFFF;
    v45 = v44 - v43;
    v46 = __OFSUB__(v44, v43);
    if (__OFSUB__(v44, v43))
      v47 = (v44 >> 31) + 0x7FFFFFFF;
    else
      v47 = v44 - v43;
    v48 = (v47 + (v47 < 0 ? 0x3F : 0)) & 0xFFFFFFC0;
    v27 = __OFSUB__(v15, v48);
    v49 = v15 - v48;
    v50 = (v15 >> 31) + 0x7FFFFFFF;
    if (!v27)
      v50 = v49;
    v51 = (v50 / 64);
    if (v46)
      v45 = (v44 >> 31) + 0x7FFFFFFF;
    v52 = v45 / 64;
    v53 = a5[5];
    v27 = __OFADD__(v43, v53);
    v54 = v43 + v53;
    v55 = (v43 >> 31) + 0x7FFFFFFF;
    if (!v27)
      v55 = v54;
    v27 = __OFSUB__(v55, v44);
    v56 = v55 - v44;
    v57 = (v55 >> 31) + 0x7FFFFFFF;
    if (!v27)
      v57 = v56;
    v27 = __OFSUB__(v57, 64);
    v58 = v57 - 64;
    if (v27)
      v58 = 0x80000000;
    v40 = v18 | (v51 << 32);
    v41 = ((unint64_t)(v52 + v58 / 64 + 1) << 32) | 1;
  }
  else
  {
    v19 = v18 + ((int)(v16 - ((_DWORD)v18 << 6) + 32) >> 6);
    v20 = a5[2];
    v21 = v19 << 6;
    if (v19 < -33554432)
      v21 = 0x80000000;
    if (v19 > 0x1FFFFFF)
      v21 = 0x7FFFFFFF;
    v22 = v21 - v20;
    v23 = __OFSUB__(v21, v20);
    v24 = (v21 >> 31) + 0x7FFFFFFF;
    if (__OFSUB__(v21, v20))
      v25 = (v21 >> 31) + 0x7FFFFFFF;
    else
      v25 = v21 - v20;
    v26 = (v25 + (v25 < 0 ? 0x3F : 0)) & 0xFFFFFFC0;
    v27 = __OFSUB__(v16, v26);
    v28 = v16 - v26;
    v29 = (v16 >> 31) + 0x7FFFFFFF;
    if (!v27)
      v29 = v28;
    v30 = (v29 / 64);
    v31 = (v15 / 64);
    v32 = a5[4];
    v27 = __OFADD__(v20, v32);
    v33 = v20 + v32;
    v34 = (v20 >> 31) + 0x7FFFFFFF;
    if (!v27)
      v34 = v33;
    v27 = __OFSUB__(v34, v21);
    v35 = v34 - v21;
    v36 = (v34 >> 31) + 0x7FFFFFFF;
    if (!v27)
      v36 = v35;
    v27 = __OFSUB__(v36, 64);
    v37 = v36 - 64;
    if (v27)
      v37 = 0x80000000;
    v38 = v37 / 64;
    if (v23)
      v39 = v24;
    else
      v39 = v22;
    v40 = v30 | (v31 << 32);
    v41 = (v38 + v39 / 64 + 1) | 0x100000000;
  }
  v59.i64[0] = v40;
  v59.i64[1] = v41;
  v60.i64[0] = 0xFE000000FE000000;
  v60.i64[1] = 0xFE000000FE000000;
  v61 = (int8x16_t)vcgtq_s32(v59, v60);
  v62.i64[0] = 0xFE000000FE000000;
  v62.i64[1] = 0xFE000000FE000000;
  v63.i64[0] = 0x8000000080000000;
  v63.i64[1] = 0x8000000080000000;
  v90 = vorrq_s8((int8x16_t)(*(_OWORD *)&v61 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vbicq_s8(vbslq_s8((int8x16_t)vcgtq_s32(v62, v59), v63, (int8x16_t)vshlq_n_s32(v59, 6uLL)), v61));
  do
  {
    v64 = (_DWORD *)v7;
    v7 = *(_QWORD *)(v7 + 24);
  }
  while (v7);
  if (((*(uint64_t (**)(_DWORD *))(*(_QWORD *)v64 + 88))(v64) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19640D65CLL);
  }
  v65 = a1[1];
  do
  {
    v66 = (_DWORD *)v65;
    v65 = *(_QWORD *)(v65 + 24);
  }
  while (v65);
  if (((*(uint64_t (**)(_DWORD *))(*(_QWORD *)v66 + 88))(v66) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19640D67CLL);
  }
  v67 = *(_QWORD *)(*a1 + 64);
  if (v67)
  {
    v85 = v67 + 20;
    v68 = *(_DWORD *)(v67 + 20);
    v84 = *(_DWORD *)(v85 + 4);
    if ((*(_WORD *)(*a1 + 52) & 0x800) != 0)
      v68 = v84;
  }
  else
  {
    v68 = v64[29];
  }
  v69 = a1[1];
  v70 = *(_QWORD *)(v69 + 64);
  if (v70)
  {
    v86 = *(_WORD *)(v69 + 52);
    v87 = *(_QWORD *)(v70 + 20);
    v88 = *(_QWORD *)(v70 + 28);
    if ((v86 & 0x800) != 0)
    {
      v87 >>= 32;
      v88 >>= 32;
    }
    v27 = __OFADD__((_DWORD)v87, (_DWORD)v88);
    v71 = v87 + v88;
    if (v27)
      v71 = (v87 >> 31) + 0x7FFFFFFF;
  }
  else
  {
    v71 = v66[30];
  }
  result = WebCore::RenderLineBoxList::rangeIntersectsRect(a2, v68, v71, v90.i32, a6);
  if (!result)
    return result;
  v73 = a1[1];
  if (!v73)
    return 0;
  while (1)
  {
    v74 = v73;
    do
    {
      v75 = (_DWORD *)v74;
      v74 = *(_QWORD *)(v74 + 24);
    }
    while (v74);
    if (((*(uint64_t (**)(_DWORD *))(*(_QWORD *)v75 + 88))(v75) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19640D63CLL);
    }
    v76 = *(_QWORD *)(v73 + 64);
    if (v76)
    {
      v79 = *(_QWORD *)(v76 + 20);
      if ((*(_WORD *)(v73 + 52) & 0x800) != 0)
        v77 = HIDWORD(v79);
      else
        LODWORD(v77) = v79;
    }
    else
    {
      LODWORD(v77) = v75[29];
    }
    v78 = WebCore::LegacyInlineFlowBox::logicalBottomVisualOverflow(v73, v75[30]);
    if (WebCore::RenderLineBoxList::rangeIntersectsRect(a2, v77, v78, v90.i32, a6))
    {
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, unsigned int *, _DWORD *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v73 + 64))(v73, a3, a4, a5, a6, v75[29], v75[30], a7))
      {
        break;
      }
    }
    v73 = *(_QWORD *)(v73 + 88);
    if (!v73)
      return 0;
  }
  v80 = a6[1];
  v81 = a5[1];
  LODWORD(v82) = *a5 - *a6;
  if (__OFSUB__(*a5, *a6))
    v82 = (*a5 >> 31) + 0x7FFFFFFF;
  else
    v82 = v82;
  v27 = __OFSUB__(v81, v80);
  LODWORD(v83) = v81 - v80;
  if (v27)
    v83 = (v81 >> 31) + 0x7FFFFFFF;
  else
    v83 = v83;
  v89 = v82 | (v83 << 32);
  (*(void (**)(WebCore::RenderObject *, uint64_t, uint64_t *))(*(_QWORD *)a2 + 328))(a2, a4, &v89);
  return 1;
}

void WebCore::RenderLineBreak::~RenderLineBreak(WebCore::RenderLayerModelObject *this, void *a2)
{
  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
}

void WebCore::RenderLineBreak::~RenderLineBreak(WebCore::RenderLineBreak *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
  if (*((_DWORD *)v2 + 4))
  {
    *((_OWORD *)v2 + 8) = 0u;
    *((_OWORD *)v2 + 9) = 0u;
    *((_OWORD *)v2 + 6) = 0u;
    *((_OWORD *)v2 + 7) = 0u;
    *((_OWORD *)v2 + 4) = 0u;
    *((_OWORD *)v2 + 5) = 0u;
    *((_OWORD *)v2 + 2) = 0u;
    *((_OWORD *)v2 + 3) = 0u;
    *(_OWORD *)v2 = 0u;
    *((_OWORD *)v2 + 1) = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(v2, v3);
  }
}

uint64_t WebCore::RenderLineBreak::lineHeight(WebCore::RenderElement *this, void *a2)
{
  char *LineStyle;
  float v4;
  uint64_t result;
  float v6;

  if (!(_DWORD)a2
    || (LineStyle = WebCore::RenderElement::firstLineStyle(this, (WTF::StringImpl *)a2), LineStyle == (char *)this + 80))
  {
    if (*((_BYTE *)this + 156))
    {
      return *((unsigned int *)this + 38);
    }
    else
    {
      v6 = ceilf(WebCore::RenderStyle::computedLineHeight((WebCore::RenderElement *)((char *)this + 80), a2) * 64.0);
      if (v6 >= 2147500000.0)
      {
        result = 0x7FFFFFFFLL;
      }
      else if (v6 <= -2147500000.0)
      {
        result = 0x80000000;
      }
      else
      {
        result = (int)v6;
      }
      if (!*((_BYTE *)this + 156))
        *((_BYTE *)this + 156) = 1;
      *((_DWORD *)this + 38) = result;
    }
  }
  else
  {
    v4 = ceilf(WebCore::RenderStyle::computedLineHeight((WebCore::RenderStyle *)LineStyle, a2) * 64.0);
    if (v4 >= 2147500000.0)
    {
      return 0x7FFFFFFFLL;
    }
    else if (v4 <= -2147500000.0)
    {
      return 0x80000000;
    }
    else
    {
      return (int)v4;
    }
  }
  return result;
}

uint64_t WebCore::RenderLineBreak::baselinePosition(WebCore::RenderElement *this, WTF::StringImpl *a2, int a3)
{
  int v4;
  char *LineStyle;
  WTF *v7;
  WTF::StringImpl *v8;
  WTF *v9;
  float v10;
  char *v11;
  float v12;
  int v13;
  float v14;
  double v15;

  v4 = (int)a2;
  if (a3)
    LineStyle = WebCore::RenderElement::firstLineStyle(this, a2);
  else
    LineStyle = (char *)this + 80;
  v7 = WebCore::RenderStyle::metricsOfPrimaryFont((WebCore::RenderStyle *)LineStyle, a2);
  v9 = v7;
  v10 = *((float *)v7 + 1);
  if (v4)
  {
    v10 = (float)(v10 + *((float *)v7 + 3)) * 0.5;
    if (!a3)
      goto LABEL_11;
  }
  else if (!a3)
  {
    goto LABEL_11;
  }
  v11 = WebCore::RenderElement::firstLineStyle(this, v8);
  if (v11 != (char *)this + 80)
  {
    v12 = ceilf(WebCore::RenderStyle::computedLineHeight((WebCore::RenderStyle *)v11, v8) * 64.0);
    if (v12 >= 2147500000.0)
    {
      v13 = 0x7FFFFFFF;
    }
    else if (v12 <= -2147500000.0)
    {
      v13 = 0x80000000;
    }
    else
    {
      v13 = (int)v12;
    }
    goto LABEL_19;
  }
LABEL_11:
  if (*((_BYTE *)this + 156))
  {
    v13 = *((_DWORD *)this + 38);
  }
  else
  {
    v14 = ceilf(WebCore::RenderStyle::computedLineHeight((WebCore::RenderElement *)((char *)this + 80), v8) * 64.0);
    if (v14 >= 2147500000.0)
    {
      v13 = 0x7FFFFFFF;
    }
    else if (v14 <= -2147500000.0)
    {
      v13 = 0x80000000;
    }
    else
    {
      v13 = (int)v14;
    }
    if (!*((_BYTE *)this + 156))
      *((_BYTE *)this + 156) = 1;
    *((_DWORD *)this + 38) = v13;
  }
LABEL_19:
  v15 = (float)(v10
              + (float)((float)((float)((float)v13 * 0.015625) - (float)(*((float *)v9 + 1) + *((float *)v9 + 3))) * 0.5))
      * 64.0;
  if (v15 >= 2147483650.0)
    return 0x7FFFFFFFLL;
  if (v15 <= -2147483650.0)
    return 0x80000000;
  return (int)v15;
}

uint64_t WebCore::RenderLineBreak::caretMinOffset(WebCore::RenderLineBreak *this)
{
  return 0;
}

uint64_t WebCore::RenderLineBreak::caretMaxOffset(WebCore::RenderLineBreak *this)
{
  return 1;
}

uint64_t WebCore::RenderLineBreak::canBeSelectionLeaf(WebCore::RenderLineBreak *this)
{
  return 1;
}

unsigned int *WebCore::RenderLineBreak::positionForPoint@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  return WebCore::RenderObject::createVisiblePosition(a1, 0, 1, a2);
}

unint64_t WebCore::RenderLineBreak::linesBoundingBox(WebCore::RenderLineBreak *this, WebCore::RenderObject *a2)
{
  WebCore::LayoutIntegration::LineLayout *v3;
  unint64_t v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD v13[2];
  uint64_t v14;
  char v15;
  char *v16;

  v3 = (WebCore::LayoutIntegration::LineLayout *)WebCore::LayoutIntegration::LineLayout::containing(this, a2);
  if (v3)
  {
    WebCore::LayoutIntegration::LineLayout::boxFor(v3, this, (uint64_t)v13);
  }
  else
  {
    v13[1] = 0;
    v13[0] = 0;
    v14 = 1;
  }
  if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v13) & 1) == 0)
  {
    if ((_DWORD)v14 == -1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
    }
    else
    {
      v16 = &v15;
      v6 = floorf(((float (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box32visualRectIgnoringBlockDirectionEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v14])(&v16, v13));
      v7 = 2147500000.0;
      if (v6 < 2147500000.0)
      {
        v7 = -2147500000.0;
        if (v6 > -2147500000.0)
          v7 = (float)(int)v6;
      }
      v8 = floorf(v5);
      v9 = 2147500000.0;
      if (v8 < 2147500000.0)
      {
        v9 = -2147500000.0;
        if (v8 > -2147500000.0)
          v9 = (float)(int)v8;
      }
      if (v7 < 2147500000.0)
      {
        if (v7 <= -2147500000.0)
          v10 = 0x80000000;
        else
          v10 = (int)v7;
LABEL_16:
        if (v9 >= 2147500000.0)
        {
          v11 = 0x7FFFFFFF00000000;
        }
        else if (v9 <= -2147500000.0)
        {
          v11 = 0x8000000000000000;
        }
        else
        {
          v11 = (unint64_t)(int)v9 << 32;
        }
        v4 = v11 | v10;
        goto LABEL_20;
      }
    }
    v10 = 0x7FFFFFFFLL;
    goto LABEL_16;
  }
  v4 = 0;
LABEL_20:
  if ((_DWORD)v14 != -1)
    ((void (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_5[v14])(&v16, v13);
  return v4;
}

void WebCore::RenderLineBreak::boundingRects(WebCore::LayoutIntegration::LineLayout *a1, WebCore::RenderObject *a2, _DWORD *a3)
{
  WebCore::LayoutIntegration::LineLayout *v6;
  double v7;
  float v8;
  float v9;
  float v10;
  unsigned int v11;
  double v12;
  int v13;
  unsigned int v14;
  double v15;
  int v16;
  int v17;
  double v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 *v26;
  __int128 v27;
  _QWORD v28[2];
  uint64_t v29;
  char v30;

  v6 = (WebCore::LayoutIntegration::LineLayout *)WebCore::LayoutIntegration::LineLayout::containing(a1, a2);
  if (v6)
  {
    WebCore::LayoutIntegration::LineLayout::boxFor(v6, a1, (uint64_t)v28);
  }
  else
  {
    v28[1] = 0;
    v28[0] = 0;
    v29 = 1;
  }
  if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v28) & 1) != 0)
    goto LABEL_33;
  if ((_DWORD)v29 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_39;
  }
  *(_QWORD *)&v27 = &v30;
  v7 = ((float (*)(__int128 *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box32visualRectIgnoringBlockDirectionEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v29])(&v27, v28)* 64.0;
  if (v7 > -2147483650.0)
    v11 = (int)v7;
  else
    v11 = 0x80000000;
  if (v7 >= 2147483650.0)
    v11 = 0x7FFFFFFF;
  v12 = v8 * 64.0;
  if (v12 > -2147483650.0)
    v13 = (int)v12;
  else
    v13 = 0x80000000;
  if (v12 < 2147483650.0)
    v14 = v13;
  else
    v14 = 0x7FFFFFFF;
  v15 = v9 * 64.0;
  if (v15 > -2147483650.0)
    v16 = (int)v15;
  else
    v16 = 0x80000000;
  if (v15 < 2147483650.0)
    v17 = v16;
  else
    v17 = 0x7FFFFFFF;
  DWORD2(v27) = v17;
  v18 = v10 * 64.0;
  if (v18 >= 2147483650.0)
  {
    v19 = 0x7FFFFFFF;
    goto LABEL_26;
  }
  if (v18 <= -2147483650.0)
  {
LABEL_39:
    v19 = 0x80000000;
    goto LABEL_26;
  }
  v19 = (int)v18;
LABEL_26:
  HIDWORD(v27) = v19;
  v20 = a3[1];
  v21 = v11 + *a3;
  if (__OFADD__(v11, *a3))
    v21 = (v11 >> 31) + 0x7FFFFFFF;
  LODWORD(v27) = v21;
  v22 = v14 + v20;
  if (__OFADD__(v14, v20))
    v22 = (v14 >> 31) + 0x7FFFFFFF;
  DWORD1(v27) = v22;
  v23 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v23 == *((_DWORD *)a2 + 2))
  {
    v26 = (__int128 *)WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2, v23 + 1, (unint64_t)&v27);
    v23 = *((unsigned int *)a2 + 3);
    v24 = *(_QWORD *)a2;
    v25 = *v26;
  }
  else
  {
    v24 = *(_QWORD *)a2;
    v25 = v27;
  }
  *(_OWORD *)(v24 + 16 * v23) = v25;
  ++*((_DWORD *)a2 + 3);
LABEL_33:
  if ((_DWORD)v29 != -1)
    ((void (*)(__int128 *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_5[v29])(&v27, v28);
}

uint64_t WebCore::RenderLineBreak::absoluteQuads(WebCore::LayoutIntegration::LineLayout *a1, WebCore::RenderObject *a2)
{
  WebCore::LayoutIntegration::LineLayout *v4;
  uint64_t result;
  float v6;
  float v7;
  float v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  float v14[8];
  _OWORD v15[2];
  _QWORD v16[2];
  uint64_t v17;

  v4 = (WebCore::LayoutIntegration::LineLayout *)WebCore::LayoutIntegration::LineLayout::containing(a1, a2);
  if (v4)
  {
    WebCore::LayoutIntegration::LineLayout::boxFor(v4, a1, (uint64_t)v16);
  }
  else
  {
    v16[1] = 0;
    v17 = 1;
    v16[0] = 0;
  }
  result = WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v16);
  if ((result & 1) == 0)
  {
    if ((_DWORD)v17 == -1)
    {
      v13 = std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::RenderLineBreak::updateFromStyle(v13);
    }
    *(_QWORD *)&v15[0] = v14;
    v14[0] = ((float (*)(_OWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box32visualRectIgnoringBlockDirectionEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v17])(v15, v16);
    v14[1] = v6;
    v14[2] = v14[0] + v7;
    v14[3] = v6;
    v14[4] = v14[0] + v7;
    v14[5] = v6 + v8;
    v14[6] = v14[0];
    v14[7] = v6 + v8;
    result = (uint64_t)WebCore::RenderObject::localToContainerQuad((uint64_t)a1, v14, 0, 2u, v15);
    v9 = *((unsigned int *)a2 + 3);
    if ((_DWORD)v9 == *((_DWORD *)a2 + 2))
    {
      result = WTF::Vector<WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2, v9 + 1, (unint64_t)v15);
      v10 = (_OWORD *)(*(_QWORD *)a2 + 32 * *((unsigned int *)a2 + 3));
      v11 = *(_OWORD *)result;
      v12 = *(_OWORD *)(result + 16);
    }
    else
    {
      v10 = (_OWORD *)(*(_QWORD *)a2 + 32 * v9);
      v11 = v15[0];
      v12 = v15[1];
    }
    *v10 = v11;
    v10[1] = v12;
    ++*((_DWORD *)a2 + 3);
  }
  if ((_DWORD)v17 != -1)
    return ((uint64_t (*)(_OWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_5[v17])(v15, v16);
  return result;
}

uint64_t WebCore::RenderLineBreak::updateFromStyle(uint64_t this)
{
  *(_BYTE *)(this + 152) = 0;
  *(_BYTE *)(this + 156) = 0;
  if ((*(_BYTE *)(this + 20) & 1) != 0)
  {
    this = 133;
    __break(0xC471u);
  }
  return this;
}

uint64_t WebCore::RenderLineBreak::collectSelectionGeometries(uint64_t a1, WebCore::RenderObject *a2)
{
  WebCore::RenderBlock *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  WebCore::LayoutIntegration::LineLayout *v11;
  uint64_t result;
  uint64_t (**v13)();
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  float v25;
  unsigned int v26;
  uint64_t v27;
  double v28;
  unsigned int v29;
  int v30;
  int v31;
  double v32;
  unsigned int v33;
  int v34;
  signed int v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  double v41;
  unsigned int v42;
  int v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  double v49;
  unsigned int v50;
  int v51;
  int v52;
  uint64_t v53;
  _BOOL4 v54;
  uint64_t v55;
  int v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  signed int v80;
  signed int v81;
  float v82;
  float v83;
  signed int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unsigned int v90;
  unsigned int v91;
  int v92;
  int v93;
  uint64_t v94;
  __int128 v95;
  int v96;
  int v97;
  const WebCore::Node *v98;
  WebCore::ImageOverlay *v99;
  signed int v100;
  signed int v101;
  int v102;
  float v103;
  float v104;
  float v105;
  uint64_t v106;
  float v107;
  float v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int16 v124;
  unsigned int v125;
  unsigned int v126;
  char v127;
  char v128;
  uint64_t v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  int v135;
  char v136;
  __int128 v137;
  __int128 v138;
  uint64_t v139[12];
  unsigned int v140[4];
  int v141;
  _QWORD v142[2];
  uint64_t v143;
  _BYTE v144[9];

  v11 = (WebCore::LayoutIntegration::LineLayout *)WebCore::LayoutIntegration::LineLayout::containing((WebCore::LayoutIntegration::LineLayout *)a1, a2);
  if (v11)
  {
    WebCore::LayoutIntegration::LineLayout::boxFor(v11, (const WebCore::RenderElement *)a1, (uint64_t)v142);
  }
  else
  {
    v142[1] = 0;
    v143 = 1;
    v142[0] = 0;
  }
  result = WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v142);
  v13 = __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_5;
  if ((result & 1) != 0)
    goto LABEL_227;
  if ((_DWORD)v143 == -1)
    goto LABEL_249;
  v2 = (WebCore::RenderBlock *)&v130;
  v139[0] = (uint64_t)&v130;
  ((void (*)(unsigned int *__return_ptr, uint64_t *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box7lineBoxEvE3__0JZNKSA_7lineBoxEvE3__1EEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v143])(v140, v139, v142);
  WebCore::LineSelection::logicalRect(v140);
  if ((_DWORD)v143 == -1)
    goto LABEL_249;
  v16 = v14;
  v17 = v15;
  v139[0] = (uint64_t)&v130;
  v8 = (unint64_t)__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box32visualRectIgnoringBlockDirectionEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0;
  ((void (*)(uint64_t *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box32visualRectIgnoringBlockDirectionEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v143])(v139, v142);
  if ((_DWORD)v143 == -1)
    goto LABEL_249;
  v20 = v18;
  v21 = v19;
  v129 = (uint64_t)a2;
  v2 = (WebCore::RenderBlock *)&v130;
  v139[0] = (uint64_t)&v130;
  v13 = off_1E342A658;
  v22 = ((uint64_t (*)(uint64_t *, _QWORD *))off_1E342A658[v143])(v139, v142);
  if (v141 == -1)
    goto LABEL_249;
  v23 = (int)v17 << 6;
  if ((int)v17 < -33554432)
    v23 = 0x80000000;
  if ((int)v17 <= 0x1FFFFFF)
    v3 = v23;
  else
    v3 = 0x7FFFFFFFLL;
  v24 = (int)v16 << 6;
  if ((int)v16 < -33554432)
    v24 = 0x80000000;
  v4 = (int)v16 <= 0x1FFFFFF ? v24 : 0x7FFFFFFFLL;
  v25 = v22 ? v20 : v21;
  v26 = (int)v25 >= -33554432 ? (int)v25 << 6 : 0x80000000;
  v27 = (int)v25 <= 0x1FFFFFF ? v26 : 0x7FFFFFFFLL;
  v7 = v3 << 32;
  v6 = v27 | (v4 << 32);
  v139[0] = (uint64_t)&v130;
  if (((unsigned int (*)(uint64_t *, unsigned int *))off_1E342A638[v141])(v139, v140))
  {
    v5 = v3 << 32;
  }
  else
  {
    v6 = v4 | (v27 << 32);
    v5 = v3;
  }
  if (v141 == -1)
    goto LABEL_249;
  v139[0] = (uint64_t)&v130;
  v3 = (uint64_t)&WebCore::lookup[6508];
  if (((unsigned int (*)(uint64_t *, unsigned int *))off_1E342A648[v141])(v139, v140))
  {
    if ((_DWORD)v143 == -1)
      goto LABEL_249;
    v139[0] = (uint64_t)&v130;
    if (((unsigned int (*)(uint64_t *, _QWORD *))off_1E342A658[v143])(v139, v142))
    {
      if (v141 == -1)
        goto LABEL_249;
      v139[0] = (uint64_t)&v130;
      v28 = ((float (*)(uint64_t *, unsigned int *))off_1E342A668[v141])(v139, v140) * 64.0;
      if (v28 >= 2147483650.0)
      {
        v29 = 0x7FFFFFFF;
      }
      else if (v28 <= -2147483650.0)
      {
        v29 = 0x80000000;
      }
      else
      {
        v29 = (int)v28;
      }
      v30 = v29 - HIDWORD(v6);
      if (__OFSUB__(v29, HIDWORD(v6)))
        v30 = (v29 >> 31) + 0x7FFFFFFF;
      v6 = v6 | ((unint64_t)v29 << 32);
      v31 = HIDWORD(v5) - v30;
      if (__OFSUB__(HIDWORD(v5), v30))
        v31 = (HIDWORD(v5) >> 31) + 0x7FFFFFFF;
      v5 = v5 | ((unint64_t)(v31 & ~(v31 >> 31)) << 32);
    }
    else
    {
      if (v141 == -1)
        goto LABEL_249;
      v139[0] = (uint64_t)&v130;
      v32 = ((float (*)(uint64_t *, unsigned int *))off_1E342A668[v141])(v139, v140) * 64.0;
      if (v32 >= 2147483650.0)
      {
        v33 = 0x7FFFFFFF;
      }
      else if (v32 > -2147483650.0)
      {
        v33 = (int)v32;
      }
      else
      {
        v33 = 0x80000000;
      }
      v34 = v33 - v6;
      if (__OFSUB__(v33, (_DWORD)v6))
        v34 = (v33 >> 31) + 0x7FFFFFFF;
      v6 = v6 & 0xFFFFFFFF00000000 | v33;
      v35 = v5 - v34;
      if (__OFSUB__((_DWORD)v5, v34))
        v35 = (v5 >> 31) + 0x7FFFFFFF;
      v5 = v5 & 0xFFFFFFFF00000000 | v35 & ~(v35 >> 31);
    }
  }
  v2 = (WebCore::RenderBlock *)WebCore::RenderObject::containingBlockForPositionType(0, a1);
  WebCore::LogicalSelectionOffsetCaches::LogicalSelectionOffsetCaches((WebCore::LogicalSelectionOffsetCaches *)v139, v2);
  if ((_DWORD)v143 == -1)
    goto LABEL_249;
  v4 = (uint64_t)&v137;
  *(_QWORD *)&v130 = &v137;
  ((void (*)(__int128 *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box32visualRectIgnoringBlockDirectionEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v143])(&v130, v142);
  if ((_DWORD)v143 == -1)
    goto LABEL_249;
  v38 = v36;
  v39 = v37;
  *(_QWORD *)&v130 = &v137;
  v40 = ((unsigned int (*)(__int128 *, _QWORD *))off_1E342A658[v143])(&v130, v142) ? v39 : v38;
  v41 = v40 * 64.0;
  if (v41 >= 2147483650.0)
    v42 = 0x7FFFFFFF;
  else
    v42 = v41 <= -2147483650.0 ? 0x80000000 : (int)v41;
  v43 = WebCore::RenderBlock::logicalLeftSelectionOffset((uint64_t *)v2, (uint64_t)v2, v42, v139);
  if ((_DWORD)v143 == -1)
    goto LABEL_249;
  LODWORD(v3) = v43;
  v4 = (uint64_t)&v137;
  *(_QWORD *)&v130 = &v137;
  ((void (*)(__int128 *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box32visualRectIgnoringBlockDirectionEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v143])(&v130, v142);
  if ((_DWORD)v143 == -1)
    goto LABEL_249;
  v46 = v44;
  v47 = v45;
  *(_QWORD *)&v130 = &v137;
  v48 = ((unsigned int (*)(__int128 *, _QWORD *))off_1E342A658[v143])(&v130, v142) ? v47 : v46;
  v49 = v48 * 64.0;
  if (v49 >= 2147483650.0)
    v50 = 0x7FFFFFFF;
  else
    v50 = v49 <= -2147483650.0 ? 0x80000000 : (int)v49;
  v51 = WebCore::RenderBlock::logicalRightSelectionOffset(v2, v2, v50, (uint64_t)v139);
  if ((_DWORD)v143 == -1)
    goto LABEL_249;
  LODWORD(v2) = v51;
  *(_QWORD *)&v130 = &v137;
  v52 = ((uint64_t (*)(__int128 *, _QWORD *))off_1E342A658[v143])(&v130, v142);
  v53 = ((_DWORD)v2 - v3);
  v54 = __OFSUB__((_DWORD)v2, (_DWORD)v3);
  if (v52)
  {
    if (v54)
      LODWORD(v53) = (v2 >> 31) + 0x7FFFFFFF;
    HIDWORD(v55) = HIDWORD(v5);
    v56 = v3;
    v3 = HIDWORD(v6);
  }
  else
  {
    if (v54)
      v53 = (v2 >> 31) + 0x7FFFFFFF;
    v55 = v53 << 32;
    LODWORD(v53) = v5;
    v56 = v6;
  }
  *(float *)&v137 = (float)v56 * 0.015625;
  *((float *)&v137 + 1) = (float)(int)v3 * 0.015625;
  *((float *)&v137 + 2) = (float)((float)(int)v53 * 0.015625) + *(float *)&v137;
  *((float *)&v137 + 3) = *((float *)&v137 + 1);
  *(float *)&v138 = *((float *)&v137 + 2);
  *((float *)&v138 + 1) = *((float *)&v137 + 1) + (float)((float)SHIDWORD(v55) * 0.015625);
  *((float *)&v138 + 2) = *(float *)&v137;
  *((float *)&v138 + 3) = *((float *)&v138 + 1);
  WebCore::RenderObject::localToContainerQuad(a1, (float *)&v137, 0, 2u, &v130);
  v57 = *(float *)&v130;
  v58 = *(float *)&v131;
  if (*((float *)&v131 + 2) >= *(float *)&v131)
    v59 = *(float *)&v131;
  else
    v59 = *((float *)&v131 + 2);
  if (*((float *)&v130 + 2) >= *(float *)&v130)
    v60 = *(float *)&v130;
  else
    v60 = *((float *)&v130 + 2);
  if (v59 >= v60)
    v59 = v60;
  v61 = fabsf(v59);
  if (v61 == INFINITY || v61 > 2147500000.0)
    v59 = (float)((SLODWORD(v59) >> 31) ^ 0x7FFFFFFF);
  if (*((float *)&v131 + 3) >= *((float *)&v131 + 1))
    v62 = *((float *)&v131 + 1);
  else
    v62 = *((float *)&v131 + 3);
  if (*((float *)&v130 + 3) >= *((float *)&v130 + 1))
    v63 = *((float *)&v130 + 1);
  else
    v63 = *((float *)&v130 + 3);
  if (v62 >= v63)
    v62 = v63;
  v64 = fabsf(v62);
  if (v64 == INFINITY || v64 > 2147500000.0)
    v62 = (float)((SLODWORD(v62) >> 31) ^ 0x7FFFFFFF);
  if (*(float *)&v130 < *((float *)&v130 + 2))
    v57 = *((float *)&v130 + 2);
  if (*(float *)&v131 < *((float *)&v131 + 2))
    v58 = *((float *)&v131 + 2);
  if (v57 >= v58)
    v58 = v57;
  v65 = fabsf(v58);
  if (v65 == INFINITY || v65 > 2147500000.0)
    v58 = (float)((SLODWORD(v58) >> 31) ^ 0x7FFFFFFF);
  if (*((float *)&v130 + 1) >= *((float *)&v130 + 3))
    v66 = *((float *)&v130 + 1);
  else
    v66 = *((float *)&v130 + 3);
  if (*((float *)&v131 + 1) >= *((float *)&v131 + 3))
    v67 = *((float *)&v131 + 1);
  else
    v67 = *((float *)&v131 + 3);
  if (v66 >= v67)
    v67 = v66;
  v68 = fabsf(v67);
  if (v68 == INFINITY || v68 > 2147500000.0)
    v67 = (float)((SLODWORD(v67) >> 31) ^ 0x7FFFFFFF);
  v69 = floorf(v59);
  v70 = 2147500000.0;
  if (v69 < 2147500000.0)
  {
    v70 = -2147500000.0;
    if (v69 > -2147500000.0)
      v70 = (float)(int)v69;
  }
  v71 = v58 - v59;
  v72 = v67 - v62;
  v73 = floorf(v62);
  v74 = 2147500000.0;
  if (v73 < 2147500000.0)
  {
    v74 = -2147500000.0;
    if (v73 > -2147500000.0)
      v74 = (float)(int)v73;
  }
  v75 = v62 + v72;
  v76 = ceilf(v59 + v71);
  v77 = 2147500000.0;
  if (v76 < 2147500000.0)
  {
    v77 = -2147500000.0;
    if (v76 > -2147500000.0)
      v77 = (float)(int)v76;
  }
  v78 = ceilf(v75);
  v79 = 2147500000.0;
  if (v78 < 2147500000.0)
  {
    v79 = -2147500000.0;
    if (v78 > -2147500000.0)
      v79 = (float)(int)v78;
  }
  if (v70 >= 2147500000.0)
    v80 = 0x7FFFFFFF;
  else
    v80 = v70 <= -2147500000.0 ? 0x80000000 : (int)v70;
  if (v74 >= 2147500000.0)
    v81 = 0x7FFFFFFF;
  else
    v81 = v74 <= -2147500000.0 ? 0x80000000 : (int)v74;
  v82 = v77 - v70;
  v83 = v79 - v74;
  if (v82 >= 2147500000.0)
    v84 = 0x7FFFFFFF;
  else
    v84 = v82 <= -2147500000.0 ? 0x80000000 : (int)v82;
  if (v83 >= 2147500000.0)
    v85 = 0x7FFFFFFFLL;
  else
    v85 = v83 <= -2147500000.0 ? 0x80000000 : (int)v83;
  if ((_DWORD)v143 == -1)
    goto LABEL_249;
  v86 = (v84 << 6);
  if (v84 < -33554432)
    v86 = 0x80000000;
  if (v84 <= 0x1FFFFFF)
    v87 = v86;
  else
    v87 = 0x7FFFFFFFLL;
  v88 = v85 << 38;
  if ((int)v85 < -33554432)
    v88 = 0x8000000000000000;
  if ((int)v85 <= 0x1FFFFFF)
    v89 = v88;
  else
    v89 = 0x7FFFFFFF00000000;
  v90 = v81 << 6;
  if (v81 < -33554432)
    v90 = 0x80000000;
  if (v81 <= 0x1FFFFFF)
    LODWORD(v4) = v90;
  else
    LODWORD(v4) = 0x7FFFFFFF;
  v91 = v80 << 6;
  if (v80 < -33554432)
    v91 = 0x80000000;
  if (v80 <= 0x1FFFFFF)
    v92 = v91;
  else
    v92 = 0x7FFFFFFF;
  v7 = v89 | v87;
  *(_QWORD *)&v130 = &v137;
  v93 = ((uint64_t (*)(__int128 *, _QWORD *))off_1E342A658[v143])(&v130, v142);
  *((_QWORD *)&v95 + 1) = v87;
  *(_QWORD *)&v95 = v89;
  v94 = v95 >> 32;
  if (v93)
  {
    LODWORD(v2) = v92;
  }
  else
  {
    v7 = v94;
    LODWORD(v2) = v4;
  }
  if (v93)
    LODWORD(v13) = v4;
  else
    LODWORD(v13) = v92;
  WebCore::InlineIterator::Box::previousOnLine((WebCore::InlineIterator::Box *)v142, (uint64_t)&v130);
  v128 = WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)&v130);
  if ((_DWORD)v131 != -1)
    ((void (*)(__int128 *, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_5[v131])(&v137, &v130);
  LOBYTE(v130) = 0;
  LOBYTE(v3) = -1;
  LODWORD(v131) = -1;
  v8 = v143;
  if ((_DWORD)v143 == -1)
    goto LABEL_249;
  v4 = (uint64_t)__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0;
  ((void (*)(__int128 *, __int128 *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v143])(&v137, &v130, v142);
  LODWORD(v131) = v8;
  *(_QWORD *)&v137 = v144;
  ((void (*)(__int128 *, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator15LeafBoxIterator18traverseNextOnLineEvE3__0JEEEEEJRNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v8])(&v137, &v130);
  LOBYTE(v137) = 0;
  LODWORD(v138) = -1;
  v96 = v131;
  if ((_DWORD)v131 != -1)
  {
    ((void (*)(_BYTE *, __int128 *, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v131])(v144, &v137, &v130);
    LODWORD(v138) = v96;
    if ((_DWORD)v131 != -1)
      ((void (*)(_BYTE *, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v131])(v144, &v130);
  }
  LOBYTE(v3) = WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)&v137);
  if ((_DWORD)v138 != -1)
    ((void (*)(__int128 *, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_5[v138])(&v130, &v137);
  v136 = 0;
  *(float *)&v130 = (float)(int)v6 * 0.015625;
  *((float *)&v130 + 1) = (float)SHIDWORD(v6) * 0.015625;
  *((float *)&v130 + 2) = *(float *)&v130 + (float)((float)(int)v5 * 0.015625);
  *((float *)&v130 + 3) = *((float *)&v130 + 1);
  *(float *)&v131 = *((float *)&v130 + 2);
  *((float *)&v131 + 1) = *((float *)&v130 + 1) + (float)((float)SHIDWORD(v5) * 0.015625);
  *((float *)&v131 + 2) = *(float *)&v130;
  *((float *)&v131 + 3) = *((float *)&v131 + 1);
  WebCore::RenderObject::localToContainerQuad(a1, (float *)&v130, 0, 2u, &v137);
  v97 = v143;
  if ((_DWORD)v143 != 1)
    goto LABEL_179;
  if (!v142[0])
  {
    v97 = 1;
LABEL_180:
    *(_QWORD *)&v130 = v144;
    LOBYTE(v4) = ((uint64_t (*)(__int128 *, _QWORD *))off_1E342A658[v97])(&v130, v142);
    goto LABEL_181;
  }
  if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v142[0] + 96))(v142[0]) & 1) == 0)
  {
    v97 = v143;
LABEL_179:
    if (v97 == -1)
      goto LABEL_249;
    goto LABEL_180;
  }
  v124 = (unsigned __int16)*(_DWORD *)(a1 + 124) >> 13;
  v127 = 2;
  switch((unsigned __int16)*(_DWORD *)(a1 + 124) >> 13)
  {
    case 1:
    case 2:
      goto LABEL_235;
    case 3:
    case 5:
      LOBYTE(v124) = 3;
      goto LABEL_235;
    case 4:
      goto LABEL_236;
    default:
      LOBYTE(v124) = 0;
LABEL_235:
      v127 = v124;
LABEL_236:
      LOBYTE(v4) = (v127 & 6) != 2;
      break;
  }
LABEL_181:
  if ((*(_BYTE *)(a1 + 45) & 1) != 0 || (v99 = *(WebCore::ImageOverlay **)(*(_QWORD *)(a1 + 24) + 8)) == 0)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    if ((*((_WORD *)v99 + 14) & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19640ECFCLL);
    }
    LOBYTE(v5) = WebCore::ImageOverlay::isOverlayText(v99, v98);
  }
  if ((_DWORD)v143 == -1)
    goto LABEL_249;
  *(_QWORD *)&v130 = v144;
  LOBYTE(v6) = ((uint64_t (*)(__int128 *, _QWORD *))off_1E342A678[v143])(&v130, v142);
  if ((int)v2 >= 0)
    LODWORD(v8) = (_DWORD)v2;
  else
    LODWORD(v8) = (_DWORD)v2 + 63;
  v100 = (_DWORD)v2 + v7;
  if (__OFADD__((_DWORD)v2, (_DWORD)v7))
    goto LABEL_250;
  while (1)
  {
    if (v100 >= 0)
      LODWORD(v2) = v100;
    else
      LODWORD(v2) = v100 + 63;
    v101 = (_DWORD)v13 + HIDWORD(v7);
    if (__OFADD__((_DWORD)v13, HIDWORD(v7)))
      v101 = (v13 >> 31) + 0x7FFFFFFF;
    v13 = __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_5;
    if ((_DWORD)v143 != -1)
      break;
LABEL_249:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_250:
    v100 = (v2 >> 31) + 0x7FFFFFFF;
  }
  if (v101 >= 0)
    v102 = v101;
  else
    v102 = v101 + 63;
  *(_QWORD *)&v130 = v144;
  result = ((uint64_t (*)(__int128 *, _QWORD *))off_1E342A688[v143])(&v130, v142);
  v103 = *(float *)&v137;
  v104 = *(float *)&v138;
  if (*((float *)&v138 + 2) < *(float *)&v138)
    v104 = *((float *)&v138 + 2);
  if (*((float *)&v137 + 2) < *(float *)&v137)
    v103 = *((float *)&v137 + 2);
  if (v104 < v103)
    v103 = v104;
  v105 = fabsf(v103);
  if (v105 == INFINITY || v105 > 2147500000.0)
    v103 = (float)((SLODWORD(v103) >> 31) ^ 0x7FFFFFFF);
  v106 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8) + 1944);
  v107 = floorf(v103);
  v108 = 2147500000.0;
  if (v107 < 2147500000.0)
  {
    v108 = -2147500000.0;
    if (v107 > -2147500000.0)
      v108 = (float)(int)v107;
  }
  if (v108 >= 2147500000.0)
  {
    v109 = 0x7FFFFFFF;
  }
  else if (v108 <= -2147500000.0)
  {
    v109 = 0x80000000;
  }
  else
  {
    v109 = (int)v108;
  }
  v110 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v106 + 24) + 8) + 40)
                                                       + 8)
                                           + 528)
                               + 8)
                   + 24);
  if (v110)
    v111 = *(_QWORD *)(v110 + 8);
  else
    v111 = 0;
  if (!*(_BYTE *)(v111 + 468))
    goto LABEL_221;
  v112 = *(_QWORD *)(v106 + 224);
  if (!v112)
    goto LABEL_222;
  v112 = *(_QWORD *)(v112 + 24);
  if (!v112)
    goto LABEL_222;
  v112 = *(_QWORD *)(v112 + 8);
  if (!v112)
    goto LABEL_222;
  if (!*(_BYTE *)(v112 + 367))
  {
    v125 = *(_DWORD *)(v111 + 476) + *(_DWORD *)(v111 + 472);
    if (*(_BYTE *)(v112 + 368))
      v126 = v109;
    else
      v126 = v125 - v109;
    LODWORD(v112) = v126 / v125;
  }
  else
  {
LABEL_221:
    LODWORD(v112) = 0;
  }
LABEL_222:
  v130 = v137;
  v131 = v138;
  LOBYTE(v132) = v5;
  BYTE1(v132) = v6 & 1;
  DWORD1(v132) = (int)v8 >> 6;
  DWORD2(v132) = (int)v2 >> 6;
  HIDWORD(v132) = v102 >> 6;
  LODWORD(v133) = 0;
  BYTE4(v133) = result;
  BYTE5(v133) = v128;
  BYTE6(v133) = v3;
  *(_WORD *)((char *)&v133 + 7) = 0;
  BYTE9(v133) = v4;
  BYTE10(v133) = v136;
  HIDWORD(v133) = v112;
  LOBYTE(v134) = 0;
  LOBYTE(v135) = 0;
  v113 = *(unsigned int *)(v129 + 12);
  if ((_DWORD)v113 == *(_DWORD *)(v129 + 8))
  {
    result = (uint64_t)WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v129, v113 + 1, (unint64_t)&v130);
    v114 = *(_QWORD *)v129 + 84 * *(unsigned int *)(v129 + 12);
    v116 = *(_OWORD *)(result + 48);
    v115 = *(_OWORD *)(result + 64);
    v117 = *(_OWORD *)(result + 32);
    *(_DWORD *)(v114 + 80) = *(_DWORD *)(result + 80);
    *(_OWORD *)(v114 + 48) = v116;
    *(_OWORD *)(v114 + 64) = v115;
    *(_OWORD *)(v114 + 32) = v117;
    v118 = *(_OWORD *)(result + 16);
    *(_OWORD *)v114 = *(_OWORD *)result;
    *(_OWORD *)(v114 + 16) = v118;
  }
  else
  {
    v119 = *(_QWORD *)v129 + 84 * v113;
    v120 = v131;
    *(_OWORD *)v119 = v130;
    *(_OWORD *)(v119 + 16) = v120;
    v121 = v132;
    v122 = v133;
    v123 = v134;
    *(_DWORD *)(v119 + 80) = v135;
    *(_OWORD *)(v119 + 48) = v122;
    *(_OWORD *)(v119 + 64) = v123;
    *(_OWORD *)(v119 + 32) = v121;
  }
  ++*(_DWORD *)(v129 + 12);
  if (v141 != -1)
    result = ((uint64_t (*)(uint64_t *, unsigned int *))off_1E342A698[v141])(v139, v140);
LABEL_227:
  if ((_DWORD)v143 != -1)
    return ((uint64_t (*)(uint64_t *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_5[v143])(v139, v142);
  return result;
}

void WebCore::RenderListBox::selectionChanged(WebCore::RenderListBox *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  WebCore::AXObjectCache *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[20];
  __int128 v15;
  char v16;

  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40)
                                                                                         + 8)
                                                                             + 1944)
                                                                 + 24)
                                                     + 8)
                                         + 40)
                             + 8)
                 + 3382))
  {
    LOBYTE(v15) = 0;
    v16 = 0;
    v14[0] = 0;
    v14[16] = 0;
    WebCore::RenderObject::issueRepaint((uint64_t)this, &v15, 0, 0, (uint64_t)v14);
  }
  if (!*((_BYTE *)this + 322))
  {
    if (*((_BYTE *)this + 320) || (*((_BYTE *)this + 20) & 0xF8) != 0)
      *((_BYTE *)this + 321) = 1;
    else
      WebCore::RenderListBox::scrollToRevealSelection(this);
  }
  if (WebCore::Document::hasEverCreatedAnAXObjectCache)
  {
    v2 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    v3 = *(_QWORD *)(*(_QWORD *)(v2 + 40) + 8);
    if (*(_BYTE *)(v3 + 3362) || *(_BYTE *)(v3 + 3405))
    {
      while (1)
      {
        v10 = *(_QWORD *)(v3 + 528);
        if (!v10)
          break;
        v11 = *(_QWORD *)(v10 + 8);
        if (!v11)
          break;
        v12 = *(_QWORD *)(v11 + 120);
        if (!v12)
          break;
        v13 = *(_QWORD *)(v12 + 8);
        if (!v13)
          break;
        v3 = *(_QWORD *)(*(_QWORD *)(v13 + 40) + 8);
      }
    }
    else
    {
      v4 = *(_QWORD *)(v3 + 528);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 8);
        if (v5)
        {
          v6 = *(_QWORD *)(*(_QWORD *)(v5 + 128) + 8);
          if (v6 && *(_BYTE *)(v6 + 144) == 0)
          {
            v8 = *(_QWORD *)(v6 + 296);
            if (v8)
              v3 = v8;
          }
        }
      }
    }
    v9 = *(WebCore::AXObjectCache **)(v3 + 1488);
    if (v9)
    {
      if ((*(_WORD *)(v2 + 28) & 0x10) == 0
        || *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::selectTag + 24))
      {
        __break(0xC471u);
        JUMPOUT(0x19640EFA8);
      }
      WebCore::AXObjectCache::deferSelectedChildrenChangedIfNeeded(v9, (WebCore::Element *)v2);
    }
  }
}

uint64_t WebCore::RenderListBox::scrollToRevealSelection(WebCore::RenderListBox *this)
{
  uint64_t v1;
  int v3;
  int SelectedListIndex;
  uint64_t result;
  int v6;

  *((_BYTE *)this + 321) = 0;
  v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v1 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v1 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::selectTag + 24))
  {
    goto LABEL_13;
  }
  v3 = *(_DWORD *)(v1 + 288);
  if ((v3 & 0x80000000) == 0)
    goto LABEL_4;
  v6 = WebCore::HTMLSelectElement::selectedIndex(*(WebCore::HTMLSelectElement **)(*((_QWORD *)this + 3) + 8));
  result = WebCore::HTMLSelectElement::optionToListIndex((WebCore::HTMLSelectElement *)v1, v6);
  if ((result & 0x80000000) != 0)
    return result;
  v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v1 + 28) & 0x10) == 0)
  {
LABEL_13:
    __break(0xC471u);
    JUMPOUT(0x19640F0DCLL);
  }
  v3 = result;
LABEL_4:
  if (*(_QWORD *)(*(_QWORD *)(v1 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::selectTag + 24))
    goto LABEL_13;
  SelectedListIndex = *(_DWORD *)(v1 + 292);
  if (SelectedListIndex < 0)
    SelectedListIndex = WebCore::HTMLSelectElement::lastSelectedListIndex(v1);
  result = WebCore::RenderListBox::listIndexIsVisible(this, SelectedListIndex);
  if ((result & 1) == 0)
    return WebCore::RenderListBox::scrollToRevealElementAtListIndex(this, v3);
  return result;
}

BOOL WebCore::RenderListBox::listIndexIsVisible(WebCore::RenderListBox *this, int a2)
{
  unint64_t v4;
  unsigned int v5;
  unint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  void *v12;
  int v13;
  WTF *v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;

  v4 = *((_QWORD *)this + 42);
  v5 = ((*((_DWORD *)this + 31) >> 13) & 6) - 2;
  if (v5 <= 3)
    v6 = *((_QWORD *)this + 42);
  else
    v6 = HIDWORD(v4);
  if ((v6 & 0x80000000) == 0)
    v7 = v6;
  else
    v7 = -(int)v6;
  if (*((_BYTE *)this + 348))
    v7 = *((_DWORD *)this + 86);
  if (*((_BYTE *)this + 356))
  {
    v8 = *((_DWORD *)this + 88);
    v9 = WebCore::RenderListBox::numberOfVisibleItemsInPaddingAfter(this) + v8;
  }
  else
  {
    if (v5 > 3)
      v4 >>= 32;
    if ((v4 & 0x80000000) == 0)
      v10 = v4;
    else
      v10 = -(int)v4;
    v11 = WebCore::RenderBox::contentLogicalHeight(this);
    if (__OFADD__(v11, 64))
      v13 = 0x7FFFFFFF;
    else
      v13 = v11 + 64;
    v14 = WebCore::RenderStyle::metricsOfPrimaryFont((WebCore::RenderListBox *)((char *)this + 80), v12);
    v15 = *((_DWORD *)v14 + 12) + *((_DWORD *)v14 + 11);
    v16 = (v15 << 6) + 64;
    if (v15 < -33554433)
      v16 = 0x80000000;
    if (v15 <= 33554430)
      v17 = v16;
    else
      v17 = 0x7FFFFFFF;
    v18 = ((uint64_t)v13 << 6) / v17;
    if (v18 <= (uint64_t)0xFFFFFFFF80000000)
      v18 = 0xFFFFFFFF80000000;
    if (v18 >= 0x7FFFFFFF)
      LODWORD(v18) = 0x7FFFFFFF;
    v19 = (int)v18 / 64;
    if (v19 <= 1)
      v19 = 1;
    v9 = v19 + v10;
  }
  return v7 <= a2 && v9 > a2;
}

uint64_t WebCore::RenderListBox::scrollToRevealElementAtListIndex(WebCore::RenderListBox *this, int a2)
{
  uint64_t v3;
  int v4;
  unint64_t v6;
  unsigned int v7;
  int v8;
  void *v9;
  int v10;
  WTF *v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  BOOL v18;
  int v19;
  char v20;

  if (a2 < 0)
    return 0;
  v3 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v3 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v3 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::selectTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x19640F3C8);
  }
  v4 = a2;
  if (*(_BYTE *)(v3 + 300))
    WebCore::HTMLSelectElement::recalcListItems(*(_QWORD *)(*((_QWORD *)this + 3) + 8), (void *)1, 1u);
  if (*(_DWORD *)(v3 + 196) <= v4 || WebCore::RenderListBox::listIndexIsVisible(this, v4))
    return 0;
  v6 = *((_QWORD *)this + 42);
  v7 = *((_DWORD *)this + 31);
  if (((v7 >> 13) & 6) - 2 > 3)
    v6 >>= 32;
  if ((v6 & 0x80000000) != 0)
    LODWORD(v6) = -(int)v6;
  if (v6 <= v4)
  {
    v8 = WebCore::RenderBox::contentLogicalHeight(this);
    if (__OFADD__(v8, 64))
      v10 = 0x7FFFFFFF;
    else
      v10 = v8 + 64;
    v11 = WebCore::RenderStyle::metricsOfPrimaryFont((WebCore::RenderListBox *)((char *)this + 80), v9);
    v12 = *((_DWORD *)v11 + 12) + *((_DWORD *)v11 + 11);
    v13 = (v12 << 6) + 64;
    if (v12 < -33554433)
      v13 = 0x80000000;
    if (v12 <= 33554430)
      v14 = v13;
    else
      v14 = 0x7FFFFFFF;
    v15 = ((uint64_t)v10 << 6) / v14;
    if (v15 <= (uint64_t)0xFFFFFFFF80000000)
      v15 = 0xFFFFFFFF80000000;
    if (v15 >= 0x7FFFFFFF)
      LODWORD(v15) = 0x7FFFFFFF;
    v16 = (int)v15 / 64;
    if (v16 <= 1)
      v16 = 1;
    v4 = v4 - v16 + 1;
    v7 = *((_DWORD *)this + 31);
  }
  v17 = ((unsigned __int16)v7 >> 13) - 1;
  v20 = 2;
  switch(v17)
  {
    case 0:
      v20 = 1;
      break;
    case 1:
    case 3:
      break;
    case 2:
    case 4:
      v20 = 3;
      break;
    default:
      v20 = 0;
      break;
  }
  v18 = (v20 & 2) == 0;
  v19 = *((_DWORD *)this + 70);
  if (v18)
    v19 = *((_DWORD *)this + 71);
  WebCore::ScrollableArea::scrollToOffsetWithoutAnimation((WebCore::RenderListBox *)((char *)this + 248), v18, (float)(v4 + v19));
  return 1;
}

uint64_t WebCore::RenderListBox::numberOfVisibleItemsInPaddingAfter(WebCore::RenderListBox *this)
{
  int v2;
  void *v3;
  WTF *v4;
  int v5;
  int v6;
  BOOL v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  int v15;
  int v16;
  void *v17;
  int v18;
  WTF *v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;

  if (!*((_BYTE *)this + 356))
    return 0;
  v2 = WebCore::RenderBoxModelObject::paddingAfter(this);
  v4 = WebCore::RenderStyle::metricsOfPrimaryFont((WebCore::RenderListBox *)((char *)this + 80), v3);
  v5 = *((_DWORD *)v4 + 12) + *((_DWORD *)v4 + 11);
  v6 = (v5 << 6) + 64;
  if (v5 < -33554433)
    v6 = 0x80000000;
  v7 = v5 <= 33554430;
  v8 = 0x7FFFFFFF;
  if (!v7)
    v6 = 0x7FFFFFFF;
  v9 = ((uint64_t)v2 << 6) / v6;
  if (v9 <= (uint64_t)0xFFFFFFFF80000000)
    v9 = 0xFFFFFFFF80000000;
  if (v9 < 0x7FFFFFFF)
    v8 = v9;
  v10 = v8 + (v8 < 0 ? 0x3F : 0);
  v11 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v11 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v11 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::selectTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x19640F61CLL);
  }
  v12 = v10 >> 6;
  if (*(_BYTE *)(v11 + 300))
    WebCore::HTMLSelectElement::recalcListItems(*(_QWORD *)(*((_QWORD *)this + 3) + 8), (void *)1, 1u);
  v13 = *(_DWORD *)(v11 + 196);
  v14 = *((_QWORD *)this + 42);
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 > 3)
    v14 >>= 32;
  if ((v14 & 0x80000000) == 0)
    v15 = v14;
  else
    v15 = -(int)v14;
  v16 = WebCore::RenderBox::contentLogicalHeight(this);
  if (__OFADD__(v16, 64))
    v18 = 0x7FFFFFFF;
  else
    v18 = v16 + 64;
  v19 = WebCore::RenderStyle::metricsOfPrimaryFont((WebCore::RenderListBox *)((char *)this + 80), v17);
  v20 = *((_DWORD *)v19 + 12) + *((_DWORD *)v19 + 11);
  v21 = (v20 << 6) + 64;
  if (v20 < -33554433)
    v21 = 0x80000000;
  if (v20 <= 33554430)
    v22 = v21;
  else
    v22 = 0x7FFFFFFF;
  v23 = ((uint64_t)v18 << 6) / v22;
  if (v23 <= (uint64_t)0xFFFFFFFF80000000)
    v23 = 0xFFFFFFFF80000000;
  if (v23 >= 0x7FFFFFFF)
    LODWORD(v23) = 0x7FFFFFFF;
  v24 = (int)v23 / 64;
  if (v24 <= 1)
    v24 = 1;
  v25 = v13 - v15 - v24;
  if (v25 >= v12)
    return v12;
  else
    return v25;
}

unint64_t WebCore::RenderListBox::itemBoundingBoxRect(WebCore::RenderListBox *this, const WebCore::LayoutPoint *a2, int a3)
{
  unsigned int v6;
  int v7;
  BOOL v8;
  uint64_t v9;
  float v10;
  double v11;
  int v12;
  unsigned int v13;
  unsigned __int8 *v14;
  int v15;
  float v16;
  float v17;
  double v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  float v23;
  double v24;
  int v25;
  unsigned int v26;
  unsigned __int8 *v27;
  int v28;
  float v29;
  float v30;
  double v31;
  int v32;
  uint64_t v33;
  WTF *v34;
  void *v35;
  int v36;
  int v37;
  int v38;
  unint64_t v39;
  unsigned int v40;
  char v41;
  int v42;
  signed int v43;
  uint64_t v44;
  void *v45;
  uint64_t v47;
  uint64_t v48;
  float v49;
  float v50;
  uint64_t v51;
  uint64_t v52;
  float v53;
  double v54;
  unsigned int v55;
  int v56;
  int v57;
  int v58;
  unsigned int v59;
  void *v60;
  WTF *v61;
  int v62;
  int v63;
  int v64;
  BOOL v65;
  unsigned int v66;
  uint64_t v67;
  float v68;
  double v69;
  unsigned int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;

  v6 = *(_DWORD *)a2;
  v7 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
  v8 = v7 == 4 || v7 == 2;
  if (v8 && WebCore::RenderBlock::intrinsicBorderForFieldset(this))
  {
    v67 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
    v68 = 0.0;
    if ((*(_BYTE *)(v67 + 124) & 0xE) != 0)
    {
      v73 = *(_QWORD *)(v67 + 200);
      if (*(_BYTE *)(v73 + 5) && *(_BYTE *)(v73 + 76) == 4)
      {
        if (*(_BYTE *)(v73 + 78))
          v68 = *(float *)(v73 + 72);
        else
          v68 = (float)*(int *)(v73 + 72);
      }
      else
      {
        v68 = *(float *)(v67 + 120);
      }
    }
    v69 = v68 * 64.0;
    if (v69 >= 2147483650.0)
    {
      v70 = 0x7FFFFFFF;
    }
    else if (v69 <= -2147483650.0)
    {
      v70 = 0x80000000;
    }
    else
    {
      v70 = (int)v69;
    }
    v71 = WebCore::RenderBlock::intrinsicBorderForFieldset(this);
    v12 = v70 + v71;
    if (__OFADD__(v70, v71))
      v12 = (v70 >> 31) + 0x7FFFFFFF;
  }
  else
  {
    v9 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
    v10 = 0.0;
    if ((*(_BYTE *)(v9 + 124) & 0xE) != 0)
    {
      v47 = *(_QWORD *)(v9 + 200);
      if (*(_BYTE *)(v47 + 5) && *(_BYTE *)(v47 + 76) == 4)
      {
        if (*(_BYTE *)(v47 + 78))
          v10 = *(float *)(v47 + 72);
        else
          v10 = (float)*(int *)(v47 + 72);
      }
      else
      {
        v10 = *(float *)(v9 + 120);
      }
    }
    v11 = v10 * 64.0;
    if (v11 >= 2147483650.0)
    {
      v12 = 0x7FFFFFFF;
    }
    else if (v11 <= -2147483650.0)
    {
      v12 = 0x80000000;
    }
    else
    {
      v12 = (int)v11;
    }
  }
  v13 = v6 + v12;
  if (__OFADD__(v6, v12))
    v13 = (v6 >> 31) + 0x7FFFFFFF;
  v14 = *(unsigned __int8 **)(*((_QWORD *)this + 11) + 24);
  v15 = v14[100];
  if ((v15 & 0xFFFFFFF7) == 3)
  {
    v57 = (*(uint64_t (**)(WebCore::RenderListBox *))(*(_QWORD *)this + 1144))(this);
    v15 = v14[100];
    v16 = (float)v57 * 0.015625;
  }
  else
  {
    v16 = 0.0;
  }
  switch(v15)
  {
    case 4:
      v17 = *((float *)v14 + 24);
      if (!v14[102])
        v17 = (float)SLODWORD(v17);
      break;
    case 3:
      v49 = *((float *)v14 + 24);
      if (!v14[102])
        v49 = (float)SLODWORD(v49);
      v17 = (float)(v16 * v49) / 100.0;
      break;
    case 11:
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v14 + 96), v16);
      break;
    default:
      v19 = 0;
      goto LABEL_19;
  }
  v18 = v17 * 64.0;
  if (v18 >= 2147483650.0)
  {
    v19 = 0x7FFFFFFF;
  }
  else if (v18 <= -2147483650.0)
  {
    v19 = 0x80000000;
  }
  else
  {
    v19 = (int)v18;
  }
LABEL_19:
  v20 = v13 + v19;
  if (__OFADD__(v13, v19))
    v20 = (v13 >> 31) + 0x7FFFFFFF;
  v21 = *((_DWORD *)a2 + 1);
  if (((unsigned __int16)*((_DWORD *)this + 31) >> 13) - 1 >= 5
    && (*(_WORD *)((_BYTE *)this + 69) & 0x400) != 0
    && (v51 = WTF::HashMap<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBlockRareData>>,WTF::HashTableTraits>::get<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>((uint64_t *)WebCore::gRareDataMap, (uint64_t)this)) != 0&& *(_DWORD *)(v51 + 8))
  {
    v52 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
    v53 = 0.0;
    if ((*(_BYTE *)(v52 + 172) & 0xE) != 0)
    {
      v72 = *(_QWORD *)(v52 + 200);
      if (*(_BYTE *)(v72 + 5) && *(_BYTE *)(v72 + 52) == 4)
      {
        if (*(_BYTE *)(v72 + 54))
          v53 = *(float *)(v72 + 48);
        else
          v53 = (float)*(int *)(v72 + 48);
      }
      else
      {
        v53 = *(float *)(v52 + 168);
      }
    }
    v54 = v53 * 64.0;
    if (v54 >= 2147483650.0)
    {
      v55 = 0x7FFFFFFF;
    }
    else if (v54 <= -2147483650.0)
    {
      v55 = 0x80000000;
    }
    else
    {
      v55 = (int)v54;
    }
    v56 = WebCore::RenderBlock::intrinsicBorderForFieldset(this);
    v25 = v55 + v56;
    if (__OFADD__(v55, v56))
      v25 = (v55 >> 31) + 0x7FFFFFFF;
  }
  else
  {
    v22 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
    v23 = 0.0;
    if ((*(_BYTE *)(v22 + 172) & 0xE) != 0)
    {
      v48 = *(_QWORD *)(v22 + 200);
      if (*(_BYTE *)(v48 + 5) && *(_BYTE *)(v48 + 52) == 4)
      {
        if (*(_BYTE *)(v48 + 54))
          v23 = *(float *)(v48 + 48);
        else
          v23 = (float)*(int *)(v48 + 48);
      }
      else
      {
        v23 = *(float *)(v22 + 168);
      }
    }
    v24 = v23 * 64.0;
    if (v24 >= 2147483650.0)
    {
      v25 = 0x7FFFFFFF;
    }
    else if (v24 <= -2147483650.0)
    {
      v25 = 0x80000000;
    }
    else
    {
      v25 = (int)v24;
    }
  }
  v26 = v21 + v25;
  if (__OFADD__(v21, v25))
    v26 = (v21 >> 31) + 0x7FFFFFFF;
  v27 = *(unsigned __int8 **)(*((_QWORD *)this + 11) + 24);
  v28 = v27[76];
  if ((v28 & 0xFFFFFFF7) == 3)
  {
    v58 = (*(uint64_t (**)(WebCore::RenderListBox *))(*(_QWORD *)this + 1144))(this);
    v28 = v27[76];
    v29 = (float)v58 * 0.015625;
  }
  else
  {
    v29 = 0.0;
  }
  switch(v28)
  {
    case 4:
      v30 = *((float *)v27 + 18);
      if (!v27[78])
        v30 = (float)SLODWORD(v30);
      break;
    case 3:
      v50 = *((float *)v27 + 18);
      if (!v27[78])
        v50 = (float)SLODWORD(v50);
      v30 = (float)(v29 * v50) / 100.0;
      break;
    case 11:
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v27 + 72), v29);
      break;
    default:
      v32 = 0;
      goto LABEL_37;
  }
  v31 = v30 * 64.0;
  if (v31 >= 2147483650.0)
  {
    v32 = 0x7FFFFFFF;
  }
  else if (v31 <= -2147483650.0)
  {
    v32 = 0x80000000;
  }
  else
  {
    v32 = (int)v31;
  }
LABEL_37:
  v33 = v26 + v32;
  if (__OFADD__(v26, v32))
    v33 = (v26 >> 31) + 0x7FFFFFFF;
  v34 = WebCore::RenderStyle::metricsOfPrimaryFont((WebCore::RenderListBox *)((char *)this + 80), a2);
  v36 = *((_DWORD *)v34 + 12) + *((_DWORD *)v34 + 11);
  v37 = (v36 << 6) + 64;
  if (v36 < -33554433)
    v37 = 0x80000000;
  if (v36 <= 33554430)
    v38 = v37;
  else
    v38 = 0x7FFFFFFF;
  v39 = *((_QWORD *)this + 42);
  v40 = *((_DWORD *)this + 31);
  if (((v40 >> 13) & 6) - 2 > 3)
    v39 >>= 32;
  v41 = v40 >> 13;
  if ((v39 & 0x80000000) != 0)
    LODWORD(v39) = -(int)v39;
  v42 = a3 - v39;
  if (v42 >= -33554432)
    v43 = v42 << 6;
  else
    v43 = 0x80000000;
  if (v42 > 0x1FFFFFF)
    v43 = 0x7FFFFFFF;
  v44 = v43 * (uint64_t)v38 / 64;
  if (HIDWORD(v44) != (int)v44 >> 31)
    LODWORD(v44) = ((v43 ^ v38) >> 31) + 0x7FFFFFFF;
  if ((v41 & 7u) <= 5 && ((1 << (v41 & 7)) & 0x2A) != 0)
  {
    v59 = WebCore::RenderBox::contentLogicalHeight(this);
    v61 = WebCore::RenderStyle::metricsOfPrimaryFont((WebCore::RenderListBox *)((char *)this + 80), v60);
    v62 = *((_DWORD *)v61 + 12) + *((_DWORD *)v61 + 11);
    if (v62 >= -33554433)
      v63 = (v62 << 6) + 64;
    else
      v63 = 0x80000000;
    if (v62 <= 33554430)
      v64 = v63;
    else
      v64 = 0x7FFFFFFF;
    v65 = __OFSUB__(v59, v64);
    v66 = v59 - v64;
    if (v65)
      v66 = (v59 >> 31) + 0x7FFFFFFF;
    v65 = __OFSUB__(v66, (_DWORD)v44);
    LODWORD(v44) = v66 - v44;
    if (v65)
      LODWORD(v44) = (v66 >> 31) + 0x7FFFFFFF;
  }
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 <= 3)
  {
    if (__OFADD__(v20, (_DWORD)v44))
      v20 = (v20 >> 31) + 0x7FFFFFFF;
    else
      v20 += v44;
    WebCore::RenderStyle::metricsOfPrimaryFont((WebCore::RenderListBox *)((char *)this + 80), v35);
    (*(uint64_t (**)(WebCore::RenderListBox *))(*(_QWORD *)this + 1000))(this);
    (*(uint64_t (**)(WebCore::RenderListBox *))(*(_QWORD *)this + 1008))(this);
    (*(void (**)(WebCore::RenderListBox *))(*(_QWORD *)this + 1360))(this);
    (*(uint64_t (**)(WebCore::RenderListBox *))(*(_QWORD *)this + 928))(this);
    (*(uint64_t (**)(WebCore::RenderListBox *))(*(_QWORD *)this + 936))(this);
    if ((*(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 584) & 0x100) != 0)
      (*(void (**)(WebCore::RenderListBox *))(*(_QWORD *)this + 1360))(this);
  }
  else
  {
    if (__OFADD__((_DWORD)v33, (_DWORD)v44))
      v33 = (v33 >> 31) + 0x7FFFFFFF;
    else
      v33 = (v33 + v44);
    (*(uint64_t (**)(WebCore::RenderListBox *))(*(_QWORD *)this + 1016))(this);
    (*(uint64_t (**)(WebCore::RenderListBox *))(*(_QWORD *)this + 1024))(this);
    (*(void (**)(WebCore::RenderListBox *))(*(_QWORD *)this + 1352))(this);
    (*(uint64_t (**)(WebCore::RenderListBox *))(*(_QWORD *)this + 944))(this);
    (*(uint64_t (**)(WebCore::RenderListBox *))(*(_QWORD *)this + 952))(this);
    if ((*(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 584) & 0x100) != 0)
      (*(void (**)(WebCore::RenderListBox *))(*(_QWORD *)this + 1352))(this);
    WebCore::RenderStyle::metricsOfPrimaryFont((WebCore::RenderListBox *)((char *)this + 80), v45);
  }
  return v20 | (unint64_t)(v33 << 32);
}

WebCore::RenderListBox *WebCore::RenderListBox::localBoundsOfOption@<X0>(WebCore::RenderListBox *this@<X0>, const WebCore::HTMLOptionElement *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  WebCore::RenderListBox *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v4 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v4 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::selectTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x1964100FCLL);
  }
  v6 = this;
  if (*(_BYTE *)(v4 + 300))
    this = WebCore::HTMLSelectElement::recalcListItems(*(_QWORD *)(*((_QWORD *)this + 3) + 8), (void *)1, 1u);
  v7 = *(unsigned int *)(v4 + 196);
  if ((_DWORD)v7)
  {
    v8 = 0;
    v9 = 8 * v7;
    while (1)
    {
      v10 = *(_QWORD *)(*(_QWORD *)(v4 + 184) + 8 * v8);
      if (v10)
      {
        if (*(const WebCore::HTMLOptionElement **)(v10 + 8) == a2)
          break;
      }
      ++v8;
      v9 -= 8;
      if (!v9)
        goto LABEL_10;
    }
    v13 = 0;
    this = (WebCore::RenderListBox *)WebCore::RenderListBox::itemBoundingBoxRect(v6, (const WebCore::LayoutPoint *)&v13, v8);
    *(_QWORD *)a3 = this;
    *(_QWORD *)(a3 + 8) = v12;
    v11 = 1;
  }
  else
  {
LABEL_10:
    v11 = 0;
    *(_BYTE *)a3 = 0;
  }
  *(_BYTE *)(a3 + 16) = v11;
  return this;
}

WebCore::RenderListBox *WebCore::RenderListBox::localBoundsOfOptGroup@<X0>(WebCore::RenderListBox *this@<X0>, const WebCore::HTMLOptGroupElement *a2@<X1>, uint64_t a3@<X8>)
{
  WebCore::RenderListBox *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;

  v4 = this;
  v6 = *((_QWORD *)a2 + 4);
  if (v6 && (*(_WORD *)(v6 + 28) & 0x10) != 0)
  {
    if (*(_QWORD *)(*(_QWORD *)(v6 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::selectTag + 24))
      v7 = *((_QWORD *)a2 + 4);
    else
      v7 = 0;
  }
  else
  {
    v7 = 0;
  }
  v8 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v8 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v8 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::selectTag + 24))
  {
    __break(0xC471u);
LABEL_29:
    __break(1u);
LABEL_30:
    this = WebCore::HTMLSelectElement::recalcListItems(v7, (void *)1, 1u);
    goto LABEL_11;
  }
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 16) = 0;
  if (v7 != v8)
    return this;
  if (*(_BYTE *)(v7 + 300))
    goto LABEL_30;
LABEL_11:
  v9 = *(unsigned int *)(v7 + 196);
  if ((_DWORD)v9)
  {
    v10 = 0;
    v11 = 0;
    v7 = *(_QWORD *)(v7 + 184);
    for (i = 8 * v9; i; i -= 8)
    {
      v13 = *(_QWORD *)(v7 + 8 * v10);
      if (v13)
      {
        v14 = *(_QWORD *)(v13 + 8);
        v15 = *(_QWORD *)(*(_QWORD *)(v14 + 96) + 24);
        if (v15 == *(_QWORD *)(WebCore::HTMLNames::optgroupTag + 24))
        {
          if ((const WebCore::HTMLOptGroupElement *)v14 == a2)
          {
            v20 = 0;
            this = (WebCore::RenderListBox *)WebCore::RenderListBox::itemBoundingBoxRect(v4, (const WebCore::LayoutPoint *)&v20, v10);
            *(_QWORD *)a3 = this;
            *(_QWORD *)(a3 + 8) = v19;
            if (!v11)
              *(_BYTE *)(a3 + 16) = 1;
LABEL_25:
            v11 = 1;
          }
        }
        else if (v15 == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
        {
          if (*(const WebCore::HTMLOptGroupElement **)(v14 + 32) != a2)
            return this;
          if (!v11)
            goto LABEL_29;
          v16 = *(_DWORD *)(a3 + 12);
          v20 = 0;
          this = (WebCore::RenderListBox *)WebCore::RenderListBox::itemBoundingBoxRect(v4, (const WebCore::LayoutPoint *)&v20, v10);
          v18 = v16 + v17;
          if (__OFADD__(v16, v17))
            v18 = (v16 >> 31) + 0x7FFFFFFF;
          *(_DWORD *)(a3 + 12) = v18;
          goto LABEL_25;
        }
      }
      ++v10;
    }
  }
  return this;
}

void WebCore::RenderListItem::~RenderListItem(WebCore::RenderListItem *this, void *a2)
{
  WTF *v3;

  v3 = (WTF *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  WebCore::RenderBlockFlow::~RenderBlockFlow(this, a2);
}

{
  WTF *v3;
  void *v4;

  v3 = (WTF *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  WebCore::RenderBlockFlow::~RenderBlockFlow(this, a2);
  if (*((_DWORD *)this + 4))
  {
    *((_OWORD *)this + 15) = 0u;
    *((_OWORD *)this + 16) = 0u;
    *((_OWORD *)this + 13) = 0u;
    *((_OWORD *)this + 14) = 0u;
    *((_OWORD *)this + 11) = 0u;
    *((_OWORD *)this + 12) = 0u;
    *((_OWORD *)this + 9) = 0u;
    *((_OWORD *)this + 10) = 0u;
    *((_OWORD *)this + 7) = 0u;
    *((_OWORD *)this + 8) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 1) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *(_OWORD *)this = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(this, v4);
  }
}

void WebCore::RenderListItem::computeMarkerStyle(WebCore::RenderListItem *this@<X0>, WebCore::RenderStyle *a2@<X8>)
{
  unsigned __int16 *v4;
  int v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  _QWORD *CachedPseudoStyle;
  WTF::StringImpl *v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  const WTF::StringImpl *v14;
  uint64_t v15;
  WTF *v16;
  WebCore *v17;
  WebCore *v18;
  WTF::StringImpl *v19;
  WebCore *v20;
  unsigned int *v21;
  uint64_t v22;
  WTF::StringImpl **v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WebCore *v26;
  int v27;
  WTF::StringImpl *v28;
  __int16 v29;
  WTF *v30;
  int v31;
  __int16 v32;

  v4 = *(unsigned __int16 **)(*((_QWORD *)this + 3) + 8);
  v5 = v4[14];
  if ((v5 & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19641060CLL);
  }
  if ((~v5 & 0x408) == 0 && (*(unsigned int (**)(unsigned __int16 *))(*(_QWORD *)v4 + 368))(v4))
    goto LABEL_12;
  v27 = 5;
  v6 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
  if (*MEMORY[0x1E0CBF2F8])
    *(_DWORD *)v6 += 2;
  v28 = v6;
  CachedPseudoStyle = (_QWORD *)WebCore::RenderElement::getCachedPseudoStyle((uint64_t)this, (uint64_t)&v27, (uint64_t)this + 80);
  v9 = v28;
  v28 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  if (CachedPseudoStyle)
  {
    *(_DWORD *)a2 = 0;
    v10 = (_DWORD *)CachedPseudoStyle[1];
    ++*v10;
    *((_QWORD *)a2 + 1) = v10;
    *((_QWORD *)a2 + 2) = CachedPseudoStyle[2];
    v11 = (_DWORD *)CachedPseudoStyle[3];
    ++*v11;
    *((_QWORD *)a2 + 3) = v11;
    v12 = (_DWORD *)CachedPseudoStyle[4];
    ++*v12;
    *((_QWORD *)a2 + 4) = v12;
    *((_QWORD *)a2 + 5) = CachedPseudoStyle[5];
    *((_QWORD *)a2 + 6) = 0;
    v13 = (_DWORD *)CachedPseudoStyle[7];
    ++*v13;
    *((_QWORD *)a2 + 7) = v13;
  }
  else
  {
LABEL_12:
    WebCore::RenderStyle::create((uint64_t)a2);
    WebCore::RenderStyle::inheritFrom(a2, (WebCore::RenderListItem *)((char *)this + 80), v14);
    v15 = *((_QWORD *)this + 14);
    WebCore::FontDescription::FontDescription((WebCore::FontDescription *)&v27, (const WebCore::FontDescription *)(v15 + 48));
    v16 = *(WTF **)(v15 + 216);
    ++*(_DWORD *)v16;
    v30 = v16;
    v31 = *(_DWORD *)(v15 + 224);
    v32 = *(_WORD *)(v15 + 228);
    v29 = v29 & 0xFFFC | 2;
    WebCore::RenderStyle::setFontDescription((uint64_t)a2, (uint64_t)&v27);
    v17 = (WebCore *)(*((_QWORD *)a2 + 4) + 32);
    v18 = *(WebCore **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 2648);
    if (!v18)
      v18 = (WebCore *)WebCore::Document::ensureFontSelector(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8)
                                                                                               + 40)
                                                                                   + 8));
    ++*((_DWORD *)v18 + 2);
    v26 = v18;
    WebCore::FontCascade::update(v17, &v26);
    v20 = v26;
    v26 = 0;
    if (v20)
    {
      if (*((_DWORD *)v20 + 2) == 1)
        (*(void (**)(WebCore *))(*(_QWORD *)v20 + 8))(v20);
      else
        --*((_DWORD *)v20 + 2);
    }
    *((_QWORD *)a2 + 2) = *((_QWORD *)a2 + 2) & 0xFFFFFFFFFE3FFFFFLL | 0xC00000;
    *((_DWORD *)a2 + 10) = *((_DWORD *)a2 + 10) & 0x87FF83FF | 0x48000000;
    v21 = (unsigned int *)v30;
    v30 = 0;
    if (v21)
    {
      if (*v21 == 1)
      {
        v22 = v21[1];
        if ((_DWORD)v22)
        {
          v23 = (WTF::StringImpl **)(v21 + 2);
          v24 = 8 * v22;
          do
          {
            v25 = *v23;
            *v23 = 0;
            if (v25)
            {
              if (*(_DWORD *)v25 == 2)
                WTF::StringImpl::destroy(v25, v19);
              else
                *(_DWORD *)v25 -= 2;
            }
            ++v23;
            v24 -= 8;
          }
          while (v24);
        }
        WTF::fastFree((WTF *)v21, v19);
      }
      else
      {
        --*v21;
      }
    }
    WebCore::FontDescription::~FontDescription((WebCore::FontDescription *)&v27, v19);
  }
}

BOOL WebCore::isHTMLListElement(WebCore *this, const WebCore::Node *a2)
{
  uint64_t v2;

  if ((*((_WORD *)this + 14) & 0x10) == 0)
    return 0;
  v2 = *(_QWORD *)(*((_QWORD *)this + 12) + 24);
  return v2 == *(_QWORD *)(WebCore::HTMLNames::ulTag + 24) || v2 == *(_QWORD *)(WebCore::HTMLNames::olTag + 24);
}

uint64_t WebCore::RenderListItem::updateItemValuesForOrderedList(WebCore::RenderListItem *this, const WebCore::HTMLOListElement *a2, const WebCore::Element *a3)
{
  uint64_t result;
  const WebCore::Element *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  WebCore::RenderElement *v10;
  uint64_t v11;
  int v12;
  const WebCore::Element *v13;

  result = WebCore::nextListItemHelper(this, this, a3);
  if (result)
  {
    v6 = result;
    do
    {
      if (*(_BYTE *)(v6 + 260))
        *(_BYTE *)(v6 + 260) = 0;
      v7 = *(_QWORD *)(v6 + 248);
      if (v7)
      {
        v8 = *(_QWORD *)(v7 + 8);
        if (v8)
        {
          v9 = *(_DWORD *)(v8 + 20);
          if ((v9 & 8) == 0)
          {
            *(_DWORD *)(v8 + 20) = v9 | 8;
            v10 = WebCore::RenderObject::markContainingBlocksForLayout((WebCore::RenderObject *)v8, 0);
            WebCore::RenderObject::scheduleLayout((WebCore::RenderObject *)v8, v10);
            if ((*(_BYTE *)(v8 + 21) & 0x80) != 0)
            {
              if ((*(_BYTE *)(v8 + 45) & 0x10) == 0)
              {
                __break(0xC471u);
                JUMPOUT(0x196410804);
              }
              v11 = *(_QWORD *)(v8 + 144);
              if (v11)
              {
                v12 = *(_DWORD *)(v11 + 8) + 1;
                *(_DWORD *)(v11 + 8) = v12;
              }
              else
              {
                v12 = MEMORY[8];
              }
              *(_QWORD *)(v11 + 24) = *(_QWORD *)(v11 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
              if (!v12)
              {
LABEL_22:
                __break(0xC471u);
                JUMPOUT(0x1964107E4);
              }
              *(_DWORD *)(v11 + 8) = v12 - 1;
            }
          }
          WebCore::RenderObject::setPreferredLogicalWidthsDirty(v8, 1, 1);
        }
      }
      v13 = *(const WebCore::Element **)(*(_QWORD *)(v6 + 24) + 8);
      if ((*((_WORD *)v13 + 14) & 8) == 0)
        goto LABEL_22;
      result = WebCore::nextListItemHelper(this, v13, v5);
      v6 = result;
    }
    while (result);
  }
  return result;
}

uint64_t WebCore::nextListItem(WebCore *this, const WebCore::Element *a2, const WebCore::RenderListItem *a3)
{
  const WebCore::Element *v3;
  uint64_t result;

  v3 = *(const WebCore::Element **)(*((_QWORD *)a2 + 3) + 8);
  if ((*((_WORD *)v3 + 14) & 8) != 0)
    return WebCore::nextListItemHelper(this, v3, a3);
  result = 96;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::RenderListItem::updateValueNow(WebCore::RenderListItem *this)
{
  uint64_t result;
  const WebCore::RenderListItem *v3;
  WebCore *v4;
  uint64_t v5;
  WebCore::RenderListItem *ListItemHelper;
  char *v7;
  int v8;
  const WebCore::Element *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  const WebCore::Element *v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  _BYTE *v27;
  int v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  unsigned int i;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  int v48;
  unsigned int j;
  uint64_t v50;
  WTF::StringImpl *v51;
  int v52;
  unsigned int k;
  uint64_t v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  int v59;
  WTF::StringImpl *v60;

  result = WebCore::enclosingList(*(_QWORD *)(*((_QWORD *)this + 3) + 8));
  v4 = (WebCore *)result;
  if (result)
  {
    if ((*(_WORD *)(result + 28) & 0x10) == 0)
      goto LABEL_62;
    if (*(_QWORD *)(*(_QWORD *)(result + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::olTag + 24))
      v5 = result;
    else
      v5 = 0;
    while (1)
    {
      ListItemHelper = this;
      do
      {
        result = WebCore::previousListItem(v4, ListItemHelper, v3);
        if (!result)
          break;
        ListItemHelper = (WebCore::RenderListItem *)result;
      }
      while (!*(_BYTE *)(result + 260));
      v59 = 1;
      if (v5)
      {
        if (*(_BYTE *)(v5 + 128))
          v42 = -1;
        else
          v42 = 1;
        v59 = v42;
      }
      v7 = (char *)ListItemHelper + 256;
      if (*((_BYTE *)ListItemHelper + 260))
      {
LABEL_11:
        if (ListItemHelper == this)
          return result;
        v8 = *(_DWORD *)v7;
        while (2)
        {
          v9 = *(const WebCore::Element **)(*((_QWORD *)ListItemHelper + 3) + 8);
          if ((*((_WORD *)v9 + 14) & 8) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x196410B9CLL);
          }
          ListItemHelper = (WebCore::RenderListItem *)WebCore::nextListItemHelper(v4, v9, v3);
          v10 = *(_QWORD *)(*((_QWORD *)ListItemHelper + 11) + 40);
          WTF::AtomStringImpl::add();
          result = (uint64_t)v60;
          v12 = *(_QWORD *)(v10 + 192);
          if (v12)
          {
            v43 = 0;
            for (i = *((_DWORD *)v60 + 4) >> 8; ; i = v43 + v45)
            {
              v45 = i & *(_DWORD *)(v12 - 8);
              v46 = *(WTF::StringImpl **)(v12 + 32 * v45);
              if (v46 != (WTF::StringImpl *)-1)
              {
                if (!v46)
                  goto LABEL_16;
                if (v46 == v60)
                  break;
              }
              ++v43;
            }
            v47 = v12 + 32 * v45;
            v13 = *(_DWORD *)(v47 + 8);
            v14 = *(unsigned __int8 *)(v47 + 12);
            v15 = *(_DWORD *)(v47 + 16);
            v16 = *(unsigned __int8 *)(v47 + 20);
            v17 = *(_DWORD *)(v47 + 24);
            v18 = *(unsigned __int8 *)(v47 + 28);
          }
          else
          {
LABEL_16:
            v13 = 0;
            v14 = 0;
            v15 = 0;
            v16 = 0;
            v17 = 0;
            v18 = 0;
          }
          if (v60)
          {
            if (*(_DWORD *)v60 == 2)
              result = WTF::StringImpl::destroy(v60, v11);
            else
              *(_DWORD *)v60 -= 2;
          }
          if (v18)
          {
            *((_DWORD *)ListItemHelper + 64) = v17;
            *((_BYTE *)ListItemHelper + 260) = 1;
            if (!v14)
              goto LABEL_22;
          }
          else
          {
            v19 = v59;
            if (v16)
              v19 = v15;
            if (v14)
            {
              *((_DWORD *)ListItemHelper + 64) = v19 + v13;
              *((_BYTE *)ListItemHelper + 260) = 1;
            }
            else
            {
              v17 = v19 + v8;
              *((_DWORD *)ListItemHelper + 64) = v19 + v8;
              *((_BYTE *)ListItemHelper + 260) = 1;
LABEL_22:
              v8 = v17;
            }
          }
          if (ListItemHelper == this)
            return result;
          continue;
        }
      }
      v58 = (char *)ListItemHelper + 260;
      if ((*((_QWORD *)v4 + 8) & 0xFFFFFFFFFFFFLL) != 0)
        break;
LABEL_47:
      v29 = *(_QWORD *)(*((_QWORD *)ListItemHelper + 11) + 40);
      WTF::AtomStringImpl::add();
      result = (uint64_t)v60;
      v31 = *(_QWORD *)(v29 + 192);
      if (v31)
      {
        v48 = 0;
        for (j = *((_DWORD *)v60 + 4) >> 8; ; j = v48 + v50)
        {
          v50 = j & *(_DWORD *)(v31 - 8);
          v51 = *(WTF::StringImpl **)(v31 + 32 * v50);
          if (v51 != (WTF::StringImpl *)-1)
          {
            if (!v51)
              goto LABEL_48;
            if (v51 == v60)
              break;
          }
          ++v48;
        }
        v56 = v31 + 32 * v50;
        v37 = *(_DWORD *)(v56 + 8);
        v36 = *(unsigned __int8 *)(v56 + 12);
        v35 = *(_DWORD *)(v56 + 16);
        v34 = *(unsigned __int8 *)(v56 + 20);
        v33 = *(_DWORD *)(v56 + 24);
        v32 = *(unsigned __int8 *)(v56 + 28);
      }
      else
      {
LABEL_48:
        v32 = 0;
        v33 = 0;
        v34 = 0;
        v35 = 0;
        v36 = 0;
        v37 = 0;
      }
      if (v60)
      {
        if (*(_DWORD *)v60 == 2)
          result = WTF::StringImpl::destroy(v60, v30);
        else
          *(_DWORD *)v60 -= 2;
      }
      v38 = *v58;
      if (*v58)
        v38 = *(_DWORD *)v7;
      v39 = v59;
      if (v34)
        v39 = v35;
      v40 = v38 + v39;
      v41 = v37 + v39;
      if (v36)
        v40 = v41;
      if (v32)
        v40 = v33;
      *(_DWORD *)v7 = v40;
      v7[4] = 1;
      if (*v58)
        goto LABEL_11;
      __break(1u);
LABEL_62:
      v5 = 0;
    }
    if ((*(_BYTE *)((*((_QWORD *)v4 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196410BD0);
    }
    v20 = *(_QWORD *)(*(_QWORD *)((*((_QWORD *)v4 + 8) & 0xFFFFFFFFFFFFLL) + 0x58) + 40);
    WTF::AtomStringImpl::add();
    v23 = *(_QWORD *)(v20 + 192);
    if (v23)
    {
      v52 = 0;
      for (k = *((_DWORD *)v60 + 4) >> 8; ; k = v52 + v54)
      {
        v54 = k & *(_DWORD *)(v23 - 8);
        v55 = *(WTF::StringImpl **)(v23 + 32 * v54);
        if (v55 != (WTF::StringImpl *)-1)
        {
          if (!v55)
            goto LABEL_33;
          if (v55 == v60)
            break;
        }
        ++v52;
      }
      v57 = v23 + 32 * v54;
      v25 = *(_DWORD *)(v57 + 8);
      v24 = *(unsigned __int8 *)(v57 + 12);
    }
    else
    {
LABEL_33:
      v24 = 0;
      v25 = 0;
    }
    if (v60)
    {
      if (*(_DWORD *)v60 == 2)
        WTF::StringImpl::destroy(v60, v21);
      else
        *(_DWORD *)v60 -= 2;
    }
    if (v24)
      v26 = v25;
    else
      v26 = 0;
    if (v5)
    {
      v27 = (char *)ListItemHelper + 260;
      if (v24)
      {
LABEL_46:
        *(_DWORD *)v7 = v26;
        *v27 = 1;
        goto LABEL_47;
      }
      if (*(_BYTE *)(v5 + 116))
      {
        v28 = *(_DWORD *)(v5 + 112);
      }
      else if (*(_BYTE *)(v5 + 128))
      {
        v28 = WebCore::HTMLOListElement::itemCount((WebCore::HTMLOListElement *)v5, (uint64_t)v21, v22);
      }
      else
      {
        v28 = 1;
      }
      v26 = v28 - v59;
    }
    v27 = (char *)ListItemHelper + 260;
    goto LABEL_46;
  }
  if (!*((_BYTE *)this + 260))
  {
    v7 = (char *)this + 256;
    v58 = (char *)this + 260;
    v59 = 1;
    ListItemHelper = this;
    goto LABEL_47;
  }
  return result;
}

uint64_t WebCore::enclosingList(uint64_t a1)
{
  int v1;
  uint64_t v3;
  __int16 v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  int v12;
  int isAtomicInlineLevelBox;
  uint64_t v14;
  uint64_t v15;

  v1 = *(unsigned __int16 *)(a1 + 28);
  if ((v1 & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196410E10);
  }
  if ((~v1 & 0x408) == 0 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 368))(a1))
  {
    v6 = *(_QWORD *)(a1 + 112);
    if (v6)
    {
      v3 = *(_QWORD *)(v6 + 8);
      if (v3)
      {
        v4 = *(_WORD *)(v3 + 28);
        goto LABEL_11;
      }
    }
    return 0;
  }
  v3 = *(_QWORD *)(a1 + 32);
  if (!v3)
    return 0;
  v4 = *(_WORD *)(v3 + 28);
  if ((v4 & 8) == 0)
    return 0;
LABEL_11:
  result = v3;
  while (1)
  {
    if ((v4 & 0x10) != 0)
    {
      v7 = *(_QWORD *)(*(_QWORD *)(result + 96) + 24);
      if (v7 == *(_QWORD *)(WebCore::HTMLNames::ulTag + 24) || v7 == *(_QWORD *)(WebCore::HTMLNames::olTag + 24))
        break;
    }
    v8 = *(_QWORD *)(result + 64) & 0xFFFFFFFFFFFFLL;
    if (v8)
    {
      if ((*(_BYTE *)((*(_QWORD *)(result + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x196410E30);
      }
      v9 = *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(result + 64) & 0xFFFFFFFFFFFFLL) + 0x58) + 40);
      v10 = (*(_BYTE *)(v9 + 642) & 3u) - 3 <= 0xFFFFFFFD && (*(_BYTE *)(v9 + 462) & 0x10) == 0;
      if (!v10 || (*(_DWORD *)(v9 + 636) & 0xC0000) != 0)
      {
        if ((*(_BYTE *)((*(_QWORD *)(result + 64) & 0xFFFFFFFFFFFFLL) + 0x14) & 1) != 0
          || (v14 = *(_QWORD *)(result + 64) & 0xFFFFFFFFFFFFLL,
              v15 = result,
              isAtomicInlineLevelBox = WebCore::RenderObject::isAtomicInlineLevelBox((WebCore::RenderObject *)v8),
              v8 = v14,
              result = v15,
              isAtomicInlineLevelBox))
        {
          if ((*(_QWORD *)(v8 + 96) & 0x1FLL) != 0x19)
          {
            v12 = *(unsigned __int8 *)(v8 + 46);
            if ((v12 - 36) <= 4)
            {
              if (v12 == 36)
                return result;
            }
            else if (v12 != 63 && v12 != 35)
            {
              return result;
            }
          }
        }
      }
    }
    result = *(_QWORD *)(result + 32);
    if (result)
    {
      v4 = *(_WORD *)(result + 28);
      if ((v4 & 8) != 0)
        continue;
    }
    return v3;
  }
  return result;
}

uint64_t WebCore::previousListItem(WebCore *this, const WebCore::Element *a2, const WebCore::RenderListItem *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];
  uint64_t v10;

  v4 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 8);
  if ((*(_WORD *)(v4 + 28) & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196410F7CLL);
  }
  v9[1] = this;
  v10 = v4;
  v9[0] = &v10;
  while (1)
  {
    v4 = WebCore::NodeTraversal::previousIncludingPseudo((WebCore::NodeTraversal *)v4, this, a3);
    if (!v4)
      return 0;
    if ((*(_WORD *)(v4 + 28) & 8) != 0)
    {
      v10 = v4;
      while (1)
      {
        v5 = *(_QWORD *)(v4 + 64);
        v6 = v5 & 0xFFFFFFFFFFFFLL;
        if ((v5 & 0xFFFFFFFFFFFFLL) == 0)
          goto LABEL_13;
        if ((*(_BYTE *)((v5 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x196410F9CLL);
        }
        if (*(_BYTE *)((v5 & 0xFFFFFFFFFFFFLL) + 0x2E) == 19)
        {
          v4 = WebCore::enclosingList(*(_QWORD *)(*(_QWORD *)((v5 & 0xFFFFFFFFFFFFLL) + 0x18) + 8));
          if (!v4)
          {
            WebCore::previousListItem(WebCore::Element const&,WebCore::RenderListItem const&)::$_0::operator()((uint64_t)v9, v7, a3);
            v4 = v10;
            goto LABEL_15;
          }
          if ((WebCore *)v4 == this)
            return v6;
        }
        else
        {
LABEL_13:
          do
            v4 = WebCore::NodeTraversal::previousIncludingPseudo((WebCore::NodeTraversal *)v4, this, a3);
          while (v4 && (*(_WORD *)(v4 + 28) & 8) == 0);
        }
        v10 = v4;
LABEL_15:
        v6 = 0;
        if (!v4)
          return v6;
      }
    }
  }
}

void WebCore::RenderListItem::styleDidChange(WebCore::RenderListItem *a1, WTF::StringImpl *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  char v16;
  int v17;
  unsigned int i;
  uint64_t v19;
  WTF::StringImpl *v20;
  int v21;
  unsigned int j;
  uint64_t v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  _BOOL4 v27;
  _BOOL4 v28;
  WTF::StringImpl *v29;

  WebCore::RenderBlockFlow::styleDidChange((uint64_t)a1, a2, a3);
  if (!a3)
    return;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 8) + 40);
  WTF::AtomStringImpl::add();
  v6 = *(_QWORD *)(v5 + 192);
  if (v6)
  {
    v17 = 0;
    for (i = *((_DWORD *)v29 + 4) >> 8; ; i = v17 + v19)
    {
      v19 = i & *(_DWORD *)(v6 - 8);
      v20 = *(WTF::StringImpl **)(v6 + 32 * v19);
      if (v20 != (WTF::StringImpl *)-1)
      {
        if (!v20)
          goto LABEL_4;
        if (v20 == v29)
          break;
      }
      ++v17;
    }
    v25 = v6 + 32 * v19;
    v7 = *(_DWORD *)(v25 + 8);
    v8 = *(unsigned __int8 *)(v25 + 12);
    v9 = *(_DWORD *)(v25 + 16);
    v10 = *(unsigned __int8 *)(v25 + 20);
    v11 = *(_DWORD *)(v25 + 24);
    v12 = *(unsigned __int8 *)(v25 + 28);
  }
  else
  {
LABEL_4:
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
  }
  v13 = *(_QWORD *)(*((_QWORD *)a1 + 11) + 40);
  WTF::AtomStringImpl::add();
  v15 = *(_QWORD *)(v13 + 192);
  if (v15)
  {
    v21 = 0;
    for (j = *((_DWORD *)v29 + 4) >> 8; ; j = v21 + v23)
    {
      v23 = j & *(_DWORD *)(v15 - 8);
      v24 = *(WTF::StringImpl **)(v15 + 32 * v23);
      if (v24 != (WTF::StringImpl *)-1)
      {
        if (!v24)
          goto LABEL_6;
        if (v24 == v29)
          break;
      }
      ++v21;
    }
    v26 = v15 + 32 * v23;
    if (v8 && *(_BYTE *)(v26 + 12))
    {
      if (v7 != *(_DWORD *)(v26 + 8))
        goto LABEL_36;
    }
    else if ((v8 != 0) != (*(_BYTE *)(v26 + 12) != 0))
    {
LABEL_36:
      v16 = 0;
      goto LABEL_7;
    }
    if (v10 && *(_BYTE *)(v26 + 20))
    {
      if (v9 != *(_DWORD *)(v26 + 16))
        goto LABEL_36;
    }
    else if ((v10 != 0) != (*(_BYTE *)(v26 + 20) != 0))
    {
      goto LABEL_36;
    }
    v27 = v12 != 0;
    v28 = *(unsigned __int8 *)(v26 + 28) != 0;
    if (v27 && v28)
      v16 = v11 == *(_DWORD *)(v26 + 24);
    else
      v16 = v27 ^ v28 ^ 1;
    goto LABEL_7;
  }
LABEL_6:
  v16 = (v8 | v10 | v12) == 0;
LABEL_7:
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, v14);
    else
      *(_DWORD *)v29 -= 2;
  }
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, v14);
    else
      *(_DWORD *)v29 -= 2;
  }
  if ((v16 & 1) == 0)
    WebCore::RenderListItem::counterDirectivesChanged(a1);
}

uint64_t WebCore::RenderListItem::counterDirectivesChanged(WebCore::RenderListItem *this)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  WebCore::RenderElement *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  WebCore::RenderElement *v11;
  uint64_t v12;
  int v13;
  uint64_t result;
  const WebCore::Element *v15;
  const WebCore::Element *v16;
  WebCore *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  WebCore::RenderElement *v22;
  uint64_t v23;
  int v24;

  v2 = *((_QWORD *)this + 31);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(_DWORD *)(v3 + 20);
      if ((v4 & 8) == 0)
      {
        *(_DWORD *)(v3 + 20) = v4 | 8;
        v5 = WebCore::RenderObject::markContainingBlocksForLayout((WebCore::RenderObject *)v3, 0);
        WebCore::RenderObject::scheduleLayout((WebCore::RenderObject *)v3, v5);
        if ((*(_BYTE *)(v3 + 21) & 0x80) != 0)
        {
          if ((*(_BYTE *)(v3 + 45) & 0x10) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x1964114F4);
          }
          v6 = *(_QWORD *)(v3 + 144);
          if (v6)
          {
            v7 = *(_DWORD *)(v6 + 8) + 1;
            *(_DWORD *)(v6 + 8) = v7;
          }
          else
          {
            v7 = MEMORY[8];
          }
          *(_QWORD *)(v6 + 24) = *(_QWORD *)(v6 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
          if (!v7)
            goto LABEL_51;
          *(_DWORD *)(v6 + 8) = v7 - 1;
        }
      }
      WebCore::RenderObject::setPreferredLogicalWidthsDirty(v3, 1, 1);
    }
  }
  if (*((_BYTE *)this + 260))
    *((_BYTE *)this + 260) = 0;
  v8 = *((_QWORD *)this + 31);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (v9)
    {
      v10 = *(_DWORD *)(v9 + 20);
      if ((v10 & 8) == 0)
      {
        *(_DWORD *)(v9 + 20) = v10 | 8;
        v11 = WebCore::RenderObject::markContainingBlocksForLayout((WebCore::RenderObject *)v9, 0);
        WebCore::RenderObject::scheduleLayout((WebCore::RenderObject *)v9, v11);
        if ((*(_BYTE *)(v9 + 21) & 0x80) != 0)
        {
          if ((*(_BYTE *)(v9 + 45) & 0x10) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x1964114A8);
          }
          v12 = *(_QWORD *)(v9 + 144);
          if (v12)
          {
            v13 = *(_DWORD *)(v12 + 8) + 1;
            *(_DWORD *)(v12 + 8) = v13;
          }
          else
          {
            v13 = MEMORY[8];
          }
          *(_QWORD *)(v12 + 24) = *(_QWORD *)(v12 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
          if (!v13)
          {
            __break(0xC471u);
            JUMPOUT(0x1964114D4);
          }
          *(_DWORD *)(v12 + 8) = v13 - 1;
        }
      }
      WebCore::RenderObject::setPreferredLogicalWidthsDirty(v9, 1, 1);
    }
  }
  result = WebCore::enclosingList(*(_QWORD *)(*((_QWORD *)this + 3) + 8));
  if (!result)
    return result;
  v16 = *(const WebCore::Element **)(*((_QWORD *)this + 3) + 8);
  if ((*((_WORD *)v16 + 14) & 8) == 0)
  {
LABEL_51:
    __break(0xC471u);
    JUMPOUT(0x196411448);
  }
  v17 = (WebCore *)result;
  while (1)
  {
    result = WebCore::nextListItemHelper(v17, v16, v15);
    if (!result)
      return result;
    v18 = result;
    if (*(_BYTE *)(result + 260))
      *(_BYTE *)(result + 260) = 0;
    v19 = *(_QWORD *)(result + 248);
    if (v19)
    {
      v20 = *(_QWORD *)(v19 + 8);
      if (v20)
      {
        v21 = *(_DWORD *)(v20 + 20);
        if ((v21 & 8) == 0)
        {
          *(_DWORD *)(v20 + 20) = v21 | 8;
          v22 = WebCore::RenderObject::markContainingBlocksForLayout((WebCore::RenderObject *)v20, 0);
          WebCore::RenderObject::scheduleLayout((WebCore::RenderObject *)v20, v22);
          if ((*(_BYTE *)(v20 + 21) & 0x80) != 0)
          {
            if ((*(_BYTE *)(v20 + 45) & 0x10) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x196411468);
            }
            v23 = *(_QWORD *)(v20 + 144);
            if (v23)
            {
              v24 = *(_DWORD *)(v23 + 8) + 1;
              *(_DWORD *)(v23 + 8) = v24;
            }
            else
            {
              v24 = MEMORY[8];
            }
            *(_QWORD *)(v23 + 24) = *(_QWORD *)(v23 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
            if (!v24)
            {
              __break(0xC471u);
              JUMPOUT(0x196411488);
            }
            *(_DWORD *)(v23 + 8) = v24 - 1;
          }
        }
        WebCore::RenderObject::setPreferredLogicalWidthsDirty(v20, 1, 1);
      }
    }
    v16 = *(const WebCore::Element **)(*(_QWORD *)(v18 + 24) + 8);
    if ((*((_WORD *)v16 + 14) & 8) == 0)
      goto LABEL_51;
  }
}

int *WebCore::RenderListItem::computePreferredLogicalWidths(WebCore::RenderListItem *this, void *a2)
{
  uint64_t v3;
  WebCore::RenderListMarker *v5;
  void *v6;

  v3 = *((_QWORD *)this + 31);
  if (v3)
  {
    v5 = *(WebCore::RenderListMarker **)(v3 + 8);
    if (v5)
    {
      if ((*((_BYTE *)v5 + 21) & 0x20) != 0)
      {
        WebCore::RenderListMarker::updateContent(v5, a2);
        WebCore::RenderListMarker::updateMargins(v5, v6);
      }
    }
  }
  return WebCore::RenderBlock::computePreferredLogicalWidths(this);
}

uint64_t WebCore::RenderListItem::paint(uint64_t this, WebCore::PaintInfo *a2, const WebCore::LayoutPoint *a3)
{
  _DWORD *v3;

  v3 = (_DWORD *)(this + 160);
  if (((*(_DWORD *)(this + 124) >> 13) & 6u) - 2 >= 4)
    v3 = (_DWORD *)(this + 164);
  if (*v3 || (*(_BYTE *)(this + 22) & 1) == 0)
    return WebCore::RenderBlock::paint(this, a2, a3);
  return this;
}

void *WebCore::RenderListItem::markerTextWithoutSuffix(WebCore::RenderListItem *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *((_QWORD *)this + 31);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 200);
  if (v3 && *(_DWORD *)(v3 + 4))
    return *(void **)(v3 + 8);
  else
    return &str_4_76;
}

uint64_t WebCore::RenderListItem::updateListMarkerNumbers(WebCore::RenderListItem *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t (*v4)(WebCore *, const WebCore::Element *, const WebCore::RenderListItem *);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  WebCore::RenderElement *v9;
  int v10;

  result = WebCore::enclosingList(*(_QWORD *)(*((_QWORD *)this + 3) + 8));
  if (result)
  {
    v3 = result;
    if ((*(_WORD *)(result + 28) & 0x10) != 0)
    {
      v4 = WebCore::nextListItem;
      if (*(_QWORD *)(*(_QWORD *)(result + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::olTag + 24))
      {
        v10 = *(_DWORD *)(result + 24);
        *(_DWORD *)(result + 24) = v10 + 2;
        if (*(_BYTE *)(result + 124))
          *(_BYTE *)(result + 124) = 0;
        if (*(_BYTE *)(result + 128))
          v4 = WebCore::previousListItem;
        if (v10)
        {
          *(_DWORD *)(result + 24) = v10;
        }
        else if ((*(_WORD *)(result + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)result);
        }
      }
      result = ((uint64_t (*)(uint64_t, WebCore::RenderListItem *))v4)(v3, this);
    }
    else
    {
      v4 = WebCore::nextListItem;
      result = ((uint64_t (*)(uint64_t, WebCore::RenderListItem *))WebCore::nextListItem)(result, this);
    }
    if (result)
    {
      v5 = result;
      do
      {
        if (!*(_BYTE *)(v5 + 260))
          break;
        *(_BYTE *)(v5 + 260) = 0;
        v6 = *(_QWORD *)(v5 + 248);
        if (v6)
        {
          v7 = *(_QWORD *)(v6 + 8);
          if (v7)
          {
            v8 = *(_DWORD *)(v7 + 20);
            if ((v8 & 8) == 0)
            {
              *(_DWORD *)(v7 + 20) = v8 | 8;
              v9 = WebCore::RenderObject::markContainingBlocksForLayout((WebCore::RenderObject *)v7, 0);
              WebCore::RenderObject::scheduleLayout((WebCore::RenderObject *)v7, v9);
              if ((*(_BYTE *)(v7 + 21) & 0x80) != 0)
                WebCore::RenderObject::setLayerNeedsFullRepaint(v7);
            }
            WebCore::RenderObject::setPreferredLogicalWidthsDirty(v7, 1, 1);
          }
        }
        result = ((uint64_t (*)(uint64_t, uint64_t))v4)(v3, v5);
        v5 = result;
      }
      while (result);
    }
  }
  return result;
}

uint64_t WebCore::RenderLayerScrollableArea::ptrCount(WebCore::RenderLayerScrollableArea *this)
{
  return *((unsigned int *)this + 18);
}

uint64_t WebCore::RenderLayerScrollableArea::ptrCountWithoutThreadCheck(WebCore::RenderLayerScrollableArea *this)
{
  return *((unsigned int *)this + 18);
}

uint64_t WebCore::RenderLayerScrollableArea::incrementPtrCount(uint64_t this)
{
  ++*(_DWORD *)(this + 72);
  return this;
}

uint64_t WebCore::RenderLayerScrollableArea::decrementPtrCount(uint64_t this)
{
  int v1;

  v1 = *(_DWORD *)(this + 72);
  if (v1)
  {
    *(_DWORD *)(this + 72) = v1 - 1;
  }
  else
  {
    this = 286;
    __break(0xC471u);
  }
  return this;
}

uint64_t WebCore::RenderLayerScrollableArea::isRenderLayer(WebCore::RenderLayerScrollableArea *this)
{
  return 1;
}

uint64_t WebCore::RenderLayerScrollableArea::needsAnimatedScroll(WebCore::RenderLayerScrollableArea *this)
{
  return *((unsigned __int8 *)this + 84);
}

const char *WebCore::RenderLineBreak::renderName(WebCore::RenderLineBreak *this)
{
  if ((*((_BYTE *)this + 52) & 7) == 2 && (*((_BYTE *)this + 53) & 1) != 0)
    return "RenderWordBreak";
  else
    return "RenderBR";
}

uint64_t WebCore::RenderLineBreak::canHaveChildren(WebCore::RenderLineBreak *this)
{
  return 0;
}

void WebCore::RenderLineBreak::localRectsForRepaint(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 32) = 0;
}

uint64_t WebCore::RenderLineBreak::requiresLayer(WebCore::RenderLineBreak *this)
{
  return 0;
}

uint64_t WebCore::RenderLineBreak::offsetWidth(WebCore::RenderLineBreak *this, WebCore::RenderObject *a2)
{
  int v2;
  unsigned int v3;

  WebCore::RenderLineBreak::linesBoundingBox(this, a2);
  v3 = v2 << 6;
  if (v2 < -33554432)
    v3 = 0x80000000;
  if (v2 <= 0x1FFFFFF)
    return v3;
  else
    return 0x7FFFFFFFLL;
}

uint64_t WebCore::RenderLineBreak::offsetHeight(WebCore::RenderLineBreak *this, WebCore::RenderObject *a2)
{
  int v2;
  unsigned int v3;

  WebCore::RenderLineBreak::linesBoundingBox(this, a2);
  v3 = v2 << 6;
  if (v2 < -33554432)
    v3 = 0x80000000;
  if (v2 <= 0x1FFFFFF)
    return v3;
  else
    return 0x7FFFFFFFLL;
}

uint64_t WebCore::RenderLineBreak::borderBoundingBox(WebCore::RenderLineBreak *this, WebCore::RenderObject *a2)
{
  WebCore::RenderLineBreak::linesBoundingBox(this, a2);
  return 0;
}

uint64_t WebCore::RenderLineBreak::marginTop(WebCore::RenderLineBreak *this)
{
  return 0;
}

uint64_t WebCore::RenderLineBreak::marginBottom(WebCore::RenderLineBreak *this)
{
  return 0;
}

uint64_t WebCore::RenderLineBreak::marginLeft(WebCore::RenderLineBreak *this)
{
  return 0;
}

uint64_t WebCore::RenderLineBreak::marginRight(WebCore::RenderLineBreak *this)
{
  return 0;
}

uint64_t WebCore::RenderLineBreak::marginBefore(WebCore::RenderLineBreak *this, const WebCore::RenderStyle *a2)
{
  return 0;
}

uint64_t WebCore::RenderLineBreak::marginAfter(WebCore::RenderLineBreak *this, const WebCore::RenderStyle *a2)
{
  return 0;
}

uint64_t WebCore::RenderLineBreak::marginStart(WebCore::RenderLineBreak *this, const WebCore::RenderStyle *a2)
{
  return 0;
}

uint64_t WebCore::RenderLineBreak::marginEnd(WebCore::RenderLineBreak *this, const WebCore::RenderStyle *a2)
{
  return 0;
}

uint64_t WebCore::RenderLineBreak::frameRectForStickyPositioning(WebCore::RenderLineBreak *this)
{
  return 0;
}

const char *WebCore::RenderListItem::renderName(WebCore::RenderListItem *this)
{
  return "RenderListItem";
}

uint64_t WebCore::nextListItemHelper(WebCore *this, const WebCore::Element *a2, const WebCore::Element *a3)
{
  uint64_t IncludingPseudo;
  const WebCore::Node *v5;
  uint64_t v6;
  int v7;
  WebCore::ElementTraversal *v8;
  uint64_t v9;
  WebCore::ElementTraversal **v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  WebCore::ElementTraversal **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t IncludingPseudoSkippingChildren;
  uint64_t v19;
  WebCore::ElementTraversal **v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  WebCore::ElementTraversal **v25;
  uint64_t v26;
  uint64_t v27;
  WebCore *v29;
  uint64_t v30;
  const WebCore::Node *v31;
  WebCore::ElementTraversal *v32;
  int v33;
  uint64_t v34;
  WebCore::ElementTraversal **v35;
  WebCore **v36;
  WebCore *v37;
  uint64_t v38;
  WebCore::ElementTraversal **v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WebCore::ElementTraversal **v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  WebCore::ElementTraversal **v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WebCore::ElementTraversal **v56;
  WebCore::ElementTraversal **v57;
  _QWORD v58[2];
  WebCore::ElementTraversal *v59;

  v58[1] = this;
  v59 = a2;
  v58[0] = &v59;
  if (((*((_QWORD *)a2 + 9) & 0xFFFFFFFFFFFFLL) == 0
     || (v53 = *(_QWORD *)((*((_QWORD *)a2 + 9) & 0xFFFFFFFFFFFFLL) + 0x38)) == 0
     || (*(_QWORD *)(v53 + 16) & 0x1FLL) != 0x12)
    && (*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) == 0)
  {
    IncludingPseudoSkippingChildren = WebCore::NodeTraversal::nextIncludingPseudoSkippingChildren(a2, this, a3);
    if (!IncludingPseudoSkippingChildren)
      return 0;
    v6 = IncludingPseudoSkippingChildren;
    if ((*(_WORD *)(IncludingPseudoSkippingChildren + 28) & 8) != 0)
      goto LABEL_88;
    while (1)
    {
      if ((WebCore *)v6 == this)
        return 0;
      if ((~*(unsigned __int16 *)(v6 + 28) & 0x408) != 0
        || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 368))(v6))
      {
        v19 = *(_QWORD *)(v6 + 32);
        if (!v19 || (*(_WORD *)(v19 + 28) & 8) == 0)
          goto LABEL_56;
      }
      else
      {
        v21 = *(_QWORD *)(v6 + 112);
        if (!v21)
          goto LABEL_56;
        v19 = *(_QWORD *)(v21 + 8);
        if (!v19)
          goto LABEL_56;
      }
      if (*(_QWORD *)(v6 + 56))
        goto LABEL_56;
      if ((~*(unsigned __int16 *)(v6 + 28) & 0x408) != 0)
        break;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 368))(v6) != 6)
        break;
      v8 = *(WebCore::ElementTraversal **)(v19 + 80);
      if (!v8)
        break;
LABEL_58:
      v6 = (uint64_t)v8;
      if ((*((_WORD *)v8 + 14) & 8) != 0)
        goto LABEL_89;
    }
    if ((~*(unsigned __int16 *)(v6 + 28) & 0x408) == 0
      && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 368))(v6) == 7)
    {
LABEL_56:
      v20 = (WebCore::ElementTraversal **)(v6 + 56);
    }
    else
    {
      if ((*(_QWORD *)(v19 + 72) & 0xFFFFFFFFFFFFLL) == 0)
      {
LABEL_69:
        if ((~*(unsigned __int16 *)(v6 + 28) & 0x408) != 0
          || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 368))(v6))
        {
          v22 = (uint64_t *)(v6 + 32);
        }
        else
        {
          v27 = *(_QWORD *)(v6 + 112);
          if (!v27)
            return 0;
          v22 = (uint64_t *)(v27 + 8);
        }
        v12 = 0;
        v23 = *v22;
        if (!*v22)
          return v12;
        while (2)
        {
          if ((WebCore *)v23 == this)
            return v12;
          if ((~*(unsigned __int16 *)(v23 + 28) & 0x408) != 0
            || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v23 + 368))(v23))
          {
            v24 = *(_QWORD *)(v23 + 32);
            if (!v24 || (*(_WORD *)(v24 + 28) & 8) == 0)
              goto LABEL_77;
          }
          else
          {
            v26 = *(_QWORD *)(v23 + 112);
            if (!v26)
              goto LABEL_77;
            v24 = *(_QWORD *)(v26 + 8);
            if (!v24)
              goto LABEL_77;
          }
          if (*(_QWORD *)(v23 + 56))
            goto LABEL_77;
          if ((~*(unsigned __int16 *)(v23 + 28) & 0x408) == 0
            && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v23 + 368))(v23) == 6)
          {
            v8 = *(WebCore::ElementTraversal **)(v24 + 80);
            if (v8)
              goto LABEL_58;
          }
          if ((~*(unsigned __int16 *)(v23 + 28) & 0x408) == 0
            && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v23 + 368))(v23) == 7)
          {
LABEL_77:
            v25 = (WebCore::ElementTraversal **)(v23 + 56);
LABEL_78:
            v8 = *v25;
            if (*v25)
              goto LABEL_58;
          }
          else if ((*(_QWORD *)(v24 + 72) & 0xFFFFFFFFFFFFLL) != 0)
          {
            v25 = (WebCore::ElementTraversal **)((*(_QWORD *)(v24 + 72) & 0xFFFFFFFFFFFFLL) + 176);
            goto LABEL_78;
          }
          v12 = 0;
          v23 = *(_QWORD *)(v23 + 32);
          if (!v23)
            return v12;
          continue;
        }
      }
      v20 = (WebCore::ElementTraversal **)((*(_QWORD *)(v19 + 72) & 0xFFFFFFFFFFFFLL) + 176);
    }
    v8 = *v20;
    if (!*v20)
      goto LABEL_69;
    goto LABEL_58;
  }
  IncludingPseudo = WebCore::NodeTraversal::nextIncludingPseudo(a2, this, a3);
  if (!IncludingPseudo)
    return 0;
  v6 = IncludingPseudo;
  if ((*(_WORD *)(IncludingPseudo + 28) & 8) != 0)
  {
LABEL_88:
    v8 = (WebCore::ElementTraversal *)v6;
LABEL_89:
    v59 = v8;
LABEL_90:
    v12 = *((_QWORD *)v8 + 8) & 0xFFFFFFFFFFFFLL;
    if (v12)
    {
      if ((*(_BYTE *)((*((_QWORD *)v8 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19641232CLL);
      }
      if (*(_BYTE *)((*((_QWORD *)v8 + 8) & 0xFFFFFFFFFFFFLL) + 0x2E) == 19)
      {
        v29 = (WebCore *)WebCore::enclosingList(*(_QWORD *)(*(_QWORD *)((*((_QWORD *)v8 + 8) & 0xFFFFFFFFFFFFLL) + 0x18)
                                                          + 8));
        if (!v29)
        {
          WebCore::nextListItemHelper(WebCore::Element const&,WebCore::Element const&)::$_0::operator()((uint64_t)v58, v30, v31);
          v8 = v59;
          goto LABEL_184;
        }
        if (v29 != this)
        {
          v8 = (WebCore::ElementTraversal *)WebCore::ElementTraversal::nextIncludingPseudoSkippingChildren(v59, this, v31);
          goto LABEL_183;
        }
        return v12;
      }
    }
    if ((*((_QWORD *)v8 + 9) & 0xFFFFFFFFFFFFLL) != 0
      && (v51 = *(_QWORD *)((*((_QWORD *)v8 + 9) & 0xFFFFFFFFFFFFLL) + 0x38)) != 0)
    {
      if ((*(_QWORD *)(v51 + 16) & 0x1FLL) != 0x12 && v12 == 0)
      {
LABEL_144:
        v8 = (WebCore::ElementTraversal *)WebCore::NodeTraversal::nextIncludingPseudoSkippingChildren(v8, this, v5);
        if (!v8)
          goto LABEL_183;
        v32 = v8;
        if ((*((_WORD *)v8 + 14) & 8) != 0)
        {
LABEL_182:
          v8 = v32;
          goto LABEL_183;
        }
        while (2)
        {
          if (v32 == this)
            goto LABEL_197;
          if ((~*((unsigned __int16 *)v32 + 14) & 0x408) != 0
            || !(*(unsigned int (**)(WebCore::ElementTraversal *))(*(_QWORD *)v32 + 368))(v32))
          {
            v42 = *((_QWORD *)v32 + 4);
            if (!v42 || (*(_WORD *)(v42 + 28) & 8) == 0)
              goto LABEL_151;
          }
          else
          {
            v44 = *((_QWORD *)v32 + 14);
            if (!v44 || (v42 = *(_QWORD *)(v44 + 8)) == 0)
            {
LABEL_151:
              v43 = (WebCore::ElementTraversal **)((char *)v32 + 56);
              goto LABEL_152;
            }
          }
          if (*((_QWORD *)v32 + 7))
            goto LABEL_151;
          if ((~*((unsigned __int16 *)v32 + 14) & 0x408) != 0
            || (*(unsigned int (**)(WebCore::ElementTraversal *))(*(_QWORD *)v32 + 368))(v32) != 6
            || (v8 = *(WebCore::ElementTraversal **)(v42 + 80)) == 0)
          {
            if ((~*((unsigned __int16 *)v32 + 14) & 0x408) == 0
              && (*(unsigned int (**)(WebCore::ElementTraversal *))(*(_QWORD *)v32 + 368))(v32) == 7)
            {
              goto LABEL_151;
            }
            if ((*(_QWORD *)(v42 + 72) & 0xFFFFFFFFFFFFLL) == 0)
            {
LABEL_164:
              if ((~*((unsigned __int16 *)v32 + 14) & 0x408) != 0
                || !(*(unsigned int (**)(WebCore::ElementTraversal *))(*(_QWORD *)v32 + 368))(v32))
              {
                v45 = (uint64_t *)((char *)v32 + 32);
              }
              else
              {
                v50 = *((_QWORD *)v32 + 14);
                if (!v50)
                  goto LABEL_197;
                v45 = (uint64_t *)(v50 + 8);
              }
              v8 = 0;
              v46 = *v45;
              if (!*v45)
                goto LABEL_183;
              while (2)
              {
                if ((WebCore *)v46 == this)
                  goto LABEL_183;
                if ((~*(unsigned __int16 *)(v46 + 28) & 0x408) != 0
                  || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v46 + 368))(v46))
                {
                  v47 = *(_QWORD *)(v46 + 32);
                  if (!v47 || (*(_WORD *)(v47 + 28) & 8) == 0)
                    goto LABEL_172;
                }
                else
                {
                  v49 = *(_QWORD *)(v46 + 112);
                  if (!v49)
                    goto LABEL_172;
                  v47 = *(_QWORD *)(v49 + 8);
                  if (!v47)
                    goto LABEL_172;
                }
                if (*(_QWORD *)(v46 + 56))
                  goto LABEL_172;
                if ((~*(unsigned __int16 *)(v46 + 28) & 0x408) == 0
                  && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v46 + 368))(v46) == 6)
                {
                  v8 = *(WebCore::ElementTraversal **)(v47 + 80);
                  if (v8)
                    goto LABEL_153;
                }
                if ((~*(unsigned __int16 *)(v46 + 28) & 0x408) == 0
                  && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v46 + 368))(v46) == 7)
                {
LABEL_172:
                  v48 = (WebCore::ElementTraversal **)(v46 + 56);
LABEL_173:
                  v8 = *v48;
                  if (*v48)
                    goto LABEL_153;
                }
                else if ((*(_QWORD *)(v47 + 72) & 0xFFFFFFFFFFFFLL) != 0)
                {
                  v48 = (WebCore::ElementTraversal **)((*(_QWORD *)(v47 + 72) & 0xFFFFFFFFFFFFLL) + 176);
                  goto LABEL_173;
                }
                v8 = 0;
                v46 = *(_QWORD *)(v46 + 32);
                if (!v46)
                  goto LABEL_183;
                continue;
              }
            }
            v43 = (WebCore::ElementTraversal **)((*(_QWORD *)(v42 + 72) & 0xFFFFFFFFFFFFLL) + 176);
LABEL_152:
            v8 = *v43;
            if (!*v43)
              goto LABEL_164;
          }
LABEL_153:
          v32 = v8;
          if ((*((_WORD *)v8 + 14) & 8) != 0)
            goto LABEL_183;
          continue;
        }
      }
    }
    else if (!v12)
    {
      goto LABEL_144;
    }
    v8 = (WebCore::ElementTraversal *)WebCore::NodeTraversal::nextIncludingPseudo(v8, this, v5);
    if (!v8)
      goto LABEL_183;
    v32 = v8;
    if ((*((_WORD *)v8 + 14) & 8) != 0)
      goto LABEL_182;
    while (1)
    {
      v33 = *((unsigned __int16 *)v32 + 14);
      if ((v33 & 8) == 0)
        break;
      if ((*((_QWORD *)v32 + 9) & 0xFFFFFFFFFFFFLL) != 0)
      {
        v8 = *(WebCore::ElementTraversal **)((*((_QWORD *)v32 + 9) & 0xFFFFFFFFFFFFLL) + 0xA8);
        if (v8)
          goto LABEL_103;
        v8 = (WebCore::ElementTraversal *)*((_QWORD *)v32 + 10);
        if (v8)
          goto LABEL_103;
        v56 = (WebCore::ElementTraversal **)((*((_QWORD *)v32 + 9) & 0xFFFFFFFFFFFFLL) + 176);
LABEL_110:
        v8 = *v56;
        if (*v56)
          goto LABEL_103;
        goto LABEL_111;
      }
      v8 = (WebCore::ElementTraversal *)*((_QWORD *)v32 + 10);
      if (v8)
        goto LABEL_103;
LABEL_111:
      if (v32 == this)
        goto LABEL_197;
      if ((~v33 & 0x408) != 0
        || !(*(unsigned int (**)(WebCore::ElementTraversal *))(*(_QWORD *)v32 + 368))(v32))
      {
        v34 = *((_QWORD *)v32 + 4);
        if (!v34 || (*(_WORD *)(v34 + 28) & 8) == 0)
          goto LABEL_116;
      }
      else
      {
        v41 = *((_QWORD *)v32 + 14);
        if (!v41)
          goto LABEL_116;
        v34 = *(_QWORD *)(v41 + 8);
        if (!v34)
          goto LABEL_116;
      }
      if (!*((_QWORD *)v32 + 7))
      {
        if ((~*((unsigned __int16 *)v32 + 14) & 0x408) == 0
          && (*(unsigned int (**)(WebCore::ElementTraversal *))(*(_QWORD *)v32 + 368))(v32) == 6)
        {
          v8 = *(WebCore::ElementTraversal **)(v34 + 80);
          if (v8)
            goto LABEL_103;
        }
        if ((~*((unsigned __int16 *)v32 + 14) & 0x408) != 0
          || (*(unsigned int (**)(WebCore::ElementTraversal *))(*(_QWORD *)v32 + 368))(v32) != 7)
        {
          if ((*(_QWORD *)(v34 + 72) & 0xFFFFFFFFFFFFLL) == 0)
          {
LABEL_118:
            if ((~*((unsigned __int16 *)v32 + 14) & 0x408) != 0
              || !(*(unsigned int (**)(WebCore::ElementTraversal *))(*(_QWORD *)v32 + 368))(v32))
            {
              v36 = (WebCore **)((char *)v32 + 32);
              goto LABEL_120;
            }
            v54 = *((_QWORD *)v32 + 14);
            if (!v54)
            {
LABEL_197:
              v8 = 0;
              goto LABEL_183;
            }
            v36 = (WebCore **)(v54 + 8);
LABEL_120:
            v8 = 0;
            v37 = *v36;
            if (*v36)
            {
              while (v37 != this)
              {
                if ((~*((unsigned __int16 *)v37 + 14) & 0x408) != 0
                  || !(*(unsigned int (**)(WebCore *))(*(_QWORD *)v37 + 368))(v37))
                {
                  v38 = *((_QWORD *)v37 + 4);
                  if (!v38 || (*(_WORD *)(v38 + 28) & 8) == 0)
                    goto LABEL_126;
                }
                else
                {
                  v40 = *((_QWORD *)v37 + 14);
                  if (!v40)
                    goto LABEL_126;
                  v38 = *(_QWORD *)(v40 + 8);
                  if (!v38)
                    goto LABEL_126;
                }
                if (*((_QWORD *)v37 + 7))
                  goto LABEL_126;
                if ((~*((unsigned __int16 *)v37 + 14) & 0x408) == 0
                  && (*(unsigned int (**)(WebCore *))(*(_QWORD *)v37 + 368))(v37) == 6)
                {
                  v8 = *(WebCore::ElementTraversal **)(v38 + 80);
                  if (v8)
                    goto LABEL_103;
                }
                if ((~*((unsigned __int16 *)v37 + 14) & 0x408) == 0
                  && (*(unsigned int (**)(WebCore *))(*(_QWORD *)v37 + 368))(v37) == 7)
                {
LABEL_126:
                  v39 = (WebCore::ElementTraversal **)((char *)v37 + 56);
LABEL_127:
                  v8 = *v39;
                  if (*v39)
                    goto LABEL_103;
                }
                else if ((*(_QWORD *)(v38 + 72) & 0xFFFFFFFFFFFFLL) != 0)
                {
                  v39 = (WebCore::ElementTraversal **)((*(_QWORD *)(v38 + 72) & 0xFFFFFFFFFFFFLL) + 176);
                  goto LABEL_127;
                }
                v8 = 0;
                v37 = (WebCore *)*((_QWORD *)v37 + 4);
                if (!v37)
                  break;
                continue;
              }
            }
LABEL_183:
            v59 = v8;
LABEL_184:
            if (!v8)
              return 0;
            goto LABEL_90;
          }
          v35 = (WebCore::ElementTraversal **)((*(_QWORD *)(v34 + 72) & 0xFFFFFFFFFFFFLL) + 176);
          goto LABEL_117;
        }
      }
LABEL_116:
      v35 = (WebCore::ElementTraversal **)((char *)v32 + 56);
LABEL_117:
      v8 = *v35;
      if (!*v35)
        goto LABEL_118;
LABEL_103:
      v32 = v8;
      if ((*((_WORD *)v8 + 14) & 8) != 0)
        goto LABEL_183;
    }
    if ((v33 & 4) == 0)
      goto LABEL_111;
    v56 = (WebCore::ElementTraversal **)((char *)v32 + 80);
    goto LABEL_110;
  }
  while (1)
  {
    v7 = *(unsigned __int16 *)(v6 + 28);
    if ((v7 & 8) == 0)
    {
      if ((v7 & 4) == 0)
        goto LABEL_16;
      v57 = (WebCore::ElementTraversal **)(v6 + 80);
      goto LABEL_15;
    }
    if ((*(_QWORD *)(v6 + 72) & 0xFFFFFFFFFFFFLL) != 0)
    {
      v8 = *(WebCore::ElementTraversal **)((*(_QWORD *)(v6 + 72) & 0xFFFFFFFFFFFFLL) + 0xA8);
      if (v8)
        goto LABEL_8;
      v8 = *(WebCore::ElementTraversal **)(v6 + 80);
      if (v8)
        goto LABEL_8;
      v57 = (WebCore::ElementTraversal **)((*(_QWORD *)(v6 + 72) & 0xFFFFFFFFFFFFLL) + 176);
LABEL_15:
      v8 = *v57;
      if (*v57)
        goto LABEL_8;
      goto LABEL_16;
    }
    v8 = *(WebCore::ElementTraversal **)(v6 + 80);
    if (v8)
      goto LABEL_8;
LABEL_16:
    if ((WebCore *)v6 == this)
      return 0;
    if ((~v7 & 0x408) != 0 || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 368))(v6))
    {
      v9 = *(_QWORD *)(v6 + 32);
      if (!v9 || (*(_WORD *)(v9 + 28) & 8) == 0)
        goto LABEL_21;
    }
    else
    {
      v17 = *(_QWORD *)(v6 + 112);
      if (!v17)
        goto LABEL_21;
      v9 = *(_QWORD *)(v17 + 8);
      if (!v9)
        goto LABEL_21;
    }
    if (*(_QWORD *)(v6 + 56))
      goto LABEL_21;
    if ((~*(unsigned __int16 *)(v6 + 28) & 0x408) == 0
      && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 368))(v6) == 6)
    {
      v8 = *(WebCore::ElementTraversal **)(v9 + 80);
      if (v8)
        goto LABEL_8;
    }
    if ((~*(unsigned __int16 *)(v6 + 28) & 0x408) == 0
      && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 368))(v6) == 7)
    {
LABEL_21:
      v10 = (WebCore::ElementTraversal **)(v6 + 56);
      goto LABEL_22;
    }
    if ((*(_QWORD *)(v9 + 72) & 0xFFFFFFFFFFFFLL) == 0)
      break;
    v10 = (WebCore::ElementTraversal **)((*(_QWORD *)(v9 + 72) & 0xFFFFFFFFFFFFLL) + 176);
LABEL_22:
    v8 = *v10;
    if (!*v10)
      break;
LABEL_8:
    v6 = (uint64_t)v8;
    if ((*((_WORD *)v8 + 14) & 8) != 0)
      goto LABEL_89;
  }
  if ((~*(unsigned __int16 *)(v6 + 28) & 0x408) == 0
    && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 368))(v6))
  {
    v55 = *(_QWORD *)(v6 + 112);
    if (!v55)
      return 0;
    v11 = (uint64_t *)(v55 + 8);
  }
  else
  {
    v11 = (uint64_t *)(v6 + 32);
  }
  v12 = 0;
  for (i = *v11; i; i = *(_QWORD *)(i + 32))
  {
    if ((WebCore *)i == this)
      return v12;
    if ((~*(unsigned __int16 *)(i + 28) & 0x408) != 0
      || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)i + 368))(i))
    {
      v14 = *(_QWORD *)(i + 32);
      if (!v14 || (*(_WORD *)(v14 + 28) & 8) == 0)
        goto LABEL_31;
    }
    else
    {
      v16 = *(_QWORD *)(i + 112);
      if (!v16)
        goto LABEL_31;
      v14 = *(_QWORD *)(v16 + 8);
      if (!v14)
        goto LABEL_31;
    }
    if (*(_QWORD *)(i + 56))
      goto LABEL_31;
    if ((~*(unsigned __int16 *)(i + 28) & 0x408) == 0
      && (*(unsigned int (**)(uint64_t))(*(_QWORD *)i + 368))(i) == 6)
    {
      v8 = *(WebCore::ElementTraversal **)(v14 + 80);
      if (v8)
        goto LABEL_8;
    }
    if ((~*(unsigned __int16 *)(i + 28) & 0x408) == 0
      && (*(unsigned int (**)(uint64_t))(*(_QWORD *)i + 368))(i) == 7)
    {
LABEL_31:
      v15 = (WebCore::ElementTraversal **)(i + 56);
      goto LABEL_32;
    }
    if ((*(_QWORD *)(v14 + 72) & 0xFFFFFFFFFFFFLL) == 0)
      goto LABEL_33;
    v15 = (WebCore::ElementTraversal **)((*(_QWORD *)(v14 + 72) & 0xFFFFFFFFFFFFLL) + 176);
LABEL_32:
    v8 = *v15;
    if (*v15)
      goto LABEL_8;
LABEL_33:
    v12 = 0;
  }
  return v12;
}

uint64_t WebCore::nextListItemHelper(WebCore::Element const&,WebCore::Element const&)::$_0::operator()(uint64_t a1, uint64_t a2, const WebCore::Node *a3)
{
  uint64_t result;
  const WebCore::Node *v5;
  const WebCore::Node *v6;
  uint64_t v7;

  result = **(_QWORD **)a1;
  if ((*(_QWORD *)(result + 72) & 0xFFFFFFFFFFFFLL) != 0
    && (v7 = *(_QWORD *)((*(_QWORD *)(result + 72) & 0xFFFFFFFFFFFFLL) + 0x38)) != 0
    && (*(_QWORD *)(v7 + 16) & 0x1FLL) == 0x12
    || (*(_QWORD *)(result + 64) & 0xFFFFFFFFFFFFLL) != 0)
  {
    v5 = *(const WebCore::Node **)(a1 + 8);
    do
      result = WebCore::NodeTraversal::nextIncludingPseudo((WebCore::NodeTraversal *)result, v5, a3);
    while (result && (*(_WORD *)(result + 28) & 8) == 0);
  }
  else
  {
    v6 = *(const WebCore::Node **)(a1 + 8);
    do
      result = WebCore::NodeTraversal::nextIncludingPseudoSkippingChildren((WebCore::NodeTraversal *)result, v6, a3);
    while (result && (*(_WORD *)(result + 28) & 8) == 0);
  }
  **(_QWORD **)a1 = result;
  return result;
}

uint64_t WebCore::ElementTraversal::nextIncludingPseudoSkippingChildren(WebCore::ElementTraversal *this, const WebCore::Node *a2, const WebCore::Node *a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const WebCore::Node **v19;
  const WebCore::Node *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;

  if (this == a2)
    return 0;
  if ((~*((unsigned __int16 *)this + 14) & 0x408) != 0
    || !(*(unsigned int (**)(WebCore::ElementTraversal *))(*(_QWORD *)this + 368))(this))
  {
    v5 = *((_QWORD *)this + 4);
    if (!v5 || (*(_WORD *)(v5 + 28) & 8) == 0)
    {
LABEL_6:
      v6 = (uint64_t *)((char *)this + 56);
      goto LABEL_7;
    }
  }
  else
  {
    v18 = *((_QWORD *)this + 14);
    if (!v18)
      goto LABEL_6;
    v5 = *(_QWORD *)(v18 + 8);
    if (!v5)
      goto LABEL_6;
  }
  if (*((_QWORD *)this + 7))
    goto LABEL_6;
  if ((~*((unsigned __int16 *)this + 14) & 0x408) == 0
    && (*(unsigned int (**)(WebCore::ElementTraversal *))(*(_QWORD *)this + 368))(this) == 6)
  {
    v7 = *(_QWORD *)(v5 + 80);
    if (v7)
    {
LABEL_8:
      if ((*(_WORD *)(v7 + 28) & 8) != 0)
        return v7;
      while (1)
      {
        if ((const WebCore::Node *)v7 == a2)
          return 0;
        if ((~*(unsigned __int16 *)(v7 + 28) & 0x408) != 0
          || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 368))(v7))
        {
          v8 = *(_QWORD *)(v7 + 32);
          if (!v8 || (*(_WORD *)(v8 + 28) & 8) == 0)
            goto LABEL_14;
        }
        else
        {
          v11 = *(_QWORD *)(v7 + 112);
          if (!v11)
            goto LABEL_14;
          v8 = *(_QWORD *)(v11 + 8);
          if (!v8)
            goto LABEL_14;
        }
        if (*(_QWORD *)(v7 + 56))
          goto LABEL_14;
        if ((~*(unsigned __int16 *)(v7 + 28) & 0x408) != 0)
          break;
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 368))(v7) != 6)
          break;
        result = *(_QWORD *)(v8 + 80);
        if (!result)
          break;
LABEL_16:
        v7 = result;
        if ((*(_WORD *)(result + 28) & 8) != 0)
          return result;
      }
      if ((~*(unsigned __int16 *)(v7 + 28) & 0x408) == 0
        && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 368))(v7) == 7)
      {
LABEL_14:
        v9 = (uint64_t *)(v7 + 56);
      }
      else
      {
        if ((*(_QWORD *)(v8 + 72) & 0xFFFFFFFFFFFFLL) == 0)
        {
LABEL_27:
          if ((~*(unsigned __int16 *)(v7 + 28) & 0x408) != 0
            || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 368))(v7))
          {
            v12 = (uint64_t *)(v7 + 32);
          }
          else
          {
            v17 = *(_QWORD *)(v7 + 112);
            if (!v17)
              return 0;
            v12 = (uint64_t *)(v17 + 8);
          }
          result = 0;
          v13 = *v12;
          if (*v12)
          {
            while (2)
            {
              if ((const WebCore::Node *)v13 == a2)
                return result;
              if ((~*(unsigned __int16 *)(v13 + 28) & 0x408) != 0
                || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 368))(v13))
              {
                v14 = *(_QWORD *)(v13 + 32);
                if (!v14 || (*(_WORD *)(v14 + 28) & 8) == 0)
                  goto LABEL_35;
              }
              else
              {
                v16 = *(_QWORD *)(v13 + 112);
                if (!v16)
                  goto LABEL_35;
                v14 = *(_QWORD *)(v16 + 8);
                if (!v14)
                  goto LABEL_35;
              }
              if (*(_QWORD *)(v13 + 56))
                goto LABEL_35;
              if ((~*(unsigned __int16 *)(v13 + 28) & 0x408) == 0
                && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 368))(v13) == 6)
              {
                result = *(_QWORD *)(v14 + 80);
                if (result)
                  goto LABEL_16;
              }
              if ((~*(unsigned __int16 *)(v13 + 28) & 0x408) == 0
                && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 368))(v13) == 7)
              {
LABEL_35:
                v15 = (uint64_t *)(v13 + 56);
LABEL_36:
                result = *v15;
                if (*v15)
                  goto LABEL_16;
              }
              else if ((*(_QWORD *)(v14 + 72) & 0xFFFFFFFFFFFFLL) != 0)
              {
                v15 = (uint64_t *)((*(_QWORD *)(v14 + 72) & 0xFFFFFFFFFFFFLL) + 176);
                goto LABEL_36;
              }
              result = 0;
              v13 = *(_QWORD *)(v13 + 32);
              if (!v13)
                return result;
              continue;
            }
          }
          return result;
        }
        v9 = (uint64_t *)((*(_QWORD *)(v8 + 72) & 0xFFFFFFFFFFFFLL) + 176);
      }
      result = *v9;
      if (!*v9)
        goto LABEL_27;
      goto LABEL_16;
    }
  }
  if ((~*((unsigned __int16 *)this + 14) & 0x408) == 0
    && (*(unsigned int (**)(WebCore::ElementTraversal *))(*(_QWORD *)this + 368))(this) == 7)
  {
    goto LABEL_6;
  }
  if ((*(_QWORD *)(v5 + 72) & 0xFFFFFFFFFFFFLL) == 0)
    goto LABEL_58;
  v6 = (uint64_t *)((*(_QWORD *)(v5 + 72) & 0xFFFFFFFFFFFFLL) + 176);
LABEL_7:
  v7 = *v6;
  if (*v6)
    goto LABEL_8;
LABEL_58:
  if ((~*((unsigned __int16 *)this + 14) & 0x408) != 0
    || !(*(unsigned int (**)(WebCore::ElementTraversal *))(*(_QWORD *)this + 368))(this))
  {
    v19 = (const WebCore::Node **)((char *)this + 32);
  }
  else
  {
    v24 = *((_QWORD *)this + 14);
    if (!v24)
      return 0;
    v19 = (const WebCore::Node **)(v24 + 8);
  }
  result = 0;
  v20 = *v19;
  if (*v19 && v20 != a2)
  {
    do
    {
      if ((~*((unsigned __int16 *)v20 + 14) & 0x408) != 0
        || !(*(unsigned int (**)(const WebCore::Node *))(*(_QWORD *)v20 + 368))(v20))
      {
        v21 = *((_QWORD *)v20 + 4);
        if (!v21 || (*(_WORD *)(v21 + 28) & 8) == 0)
          goto LABEL_66;
      }
      else
      {
        v23 = *((_QWORD *)v20 + 14);
        if (!v23)
          goto LABEL_66;
        v21 = *(_QWORD *)(v23 + 8);
        if (!v21)
          goto LABEL_66;
      }
      if (*((_QWORD *)v20 + 7))
        goto LABEL_66;
      if ((~*((unsigned __int16 *)v20 + 14) & 0x408) == 0
        && (*(unsigned int (**)(const WebCore::Node *))(*(_QWORD *)v20 + 368))(v20) == 6)
      {
        v7 = *(_QWORD *)(v21 + 80);
        if (v7)
          goto LABEL_8;
      }
      if ((~*((unsigned __int16 *)v20 + 14) & 0x408) == 0
        && (*(unsigned int (**)(const WebCore::Node *))(*(_QWORD *)v20 + 368))(v20) == 7)
      {
LABEL_66:
        v22 = (uint64_t *)((char *)v20 + 56);
        goto LABEL_67;
      }
      if ((*(_QWORD *)(v21 + 72) & 0xFFFFFFFFFFFFLL) == 0)
        goto LABEL_68;
      v22 = (uint64_t *)((*(_QWORD *)(v21 + 72) & 0xFFFFFFFFFFFFLL) + 176);
LABEL_67:
      v7 = *v22;
      if (*v22)
        goto LABEL_8;
LABEL_68:
      result = 0;
      v20 = (const WebCore::Node *)*((_QWORD *)v20 + 4);
    }
    while (v20 && v20 != a2);
  }
  return result;
}

WebCore::NodeTraversal *WebCore::previousListItem(WebCore::Element const&,WebCore::RenderListItem const&)::$_0::operator()(uint64_t a1, uint64_t a2, const WebCore::Node *a3)
{
  const WebCore::Node *v4;
  WebCore::NodeTraversal *result;

  v4 = *(const WebCore::Node **)(a1 + 8);
  result = **(WebCore::NodeTraversal ***)a1;
  do
    result = (WebCore::NodeTraversal *)WebCore::NodeTraversal::previousIncludingPseudo(result, v4, a3);
  while (result && (*((_WORD *)result + 14) & 8) == 0);
  **(_QWORD **)a1 = result;
  return result;
}

uint64_t WebCore::RenderListMarker::RenderListMarker(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v14;
  WTF *v15;

  v6 = WebCore::RenderObject::RenderObject(a1, 20, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 40) + 8), 28, 0);
  *(_QWORD *)v6 = off_1E3422BC8;
  *(_QWORD *)(v6 + 70) = 0;
  *(_QWORD *)(v6 + 64) = 0;
  *(_DWORD *)(v6 + 80) = 0;
  v7 = a3[1];
  a3[1] = 0;
  *(_QWORD *)(v6 + 88) = v7;
  *(_QWORD *)(v6 + 96) = a3[2];
  v8 = a3[3];
  a3[3] = 0;
  *(_QWORD *)(v6 + 104) = v8;
  v9 = a3[4];
  a3[4] = 0;
  *(_QWORD *)(v6 + 112) = v9;
  *(_QWORD *)(v6 + 120) = a3[5];
  v10 = a3[6];
  a3[6] = 0;
  *(_QWORD *)(v6 + 128) = v10;
  v11 = a3[7];
  a3[7] = 0;
  *(_QWORD *)(v6 + 136) = v11;
  *(_QWORD *)(v6 + 192) = 0;
  *(_QWORD *)(v6 + 200) = 0;
  *(_OWORD *)(v6 + 160) = 0u;
  *(_OWORD *)(v6 + 176) = 0u;
  *(_OWORD *)(v6 + 144) = 0u;
  *(_QWORD *)v6 = off_1E342A6D8;
  *(_WORD *)(v6 + 208) = 256;
  *(_QWORD *)(v6 + 216) = 0;
  v12 = *(_QWORD *)(a2 + 8);
  if (!v12)
  {
    v12 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v12 = 1;
    *(_QWORD *)(v12 + 8) = a2;
    v15 = *(WTF **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = v12;
    if (v15)
    {
      if (*(_DWORD *)v15 == 1)
      {
        WTF::fastFree(v15, v14);
        v12 = *(_QWORD *)(a2 + 8);
        if (!v12)
          goto LABEL_3;
      }
      else
      {
        --*(_DWORD *)v15;
      }
    }
  }
  ++*(_DWORD *)v12;
LABEL_3:
  *(_QWORD *)(a1 + 224) = v12;
  *(_QWORD *)(a1 + 232) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 20) & 0xFFFFFFFC | 2;
  return a1;
}

void WebCore::RenderListMarker::~RenderListMarker(WebCore::RenderListMarker *this, void *a2)
{
  WTF *v3;
  _DWORD *v4;
  WTF::StringImpl *v5;
  WTF *v6;

  v3 = (WTF *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  v4 = (_DWORD *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  *(_QWORD *)this = off_1E34201A0;
  v6 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
      WTF::fastFree(v6, a2);
    else
      --*(_DWORD *)v6;
  }
  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
}

{
  WTF *v3;
  _DWORD *v4;
  WTF::StringImpl *v5;
  WTF *v6;
  void *v7;

  v3 = (WTF *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  v4 = (_DWORD *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  *(_QWORD *)this = off_1E34201A0;
  v6 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
      WTF::fastFree(v6, a2);
    else
      --*(_DWORD *)v6;
  }
  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
  if (*((_DWORD *)this + 4))
  {
    *((_OWORD *)this + 13) = 0u;
    *((_OWORD *)this + 14) = 0u;
    *((_OWORD *)this + 11) = 0u;
    *((_OWORD *)this + 12) = 0u;
    *((_OWORD *)this + 9) = 0u;
    *((_OWORD *)this + 10) = 0u;
    *((_OWORD *)this + 7) = 0u;
    *((_OWORD *)this + 8) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 1) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *(_OWORD *)this = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(this, v7);
  }
}

void WebCore::RenderListMarker::willBeDestroyed(WebCore::RenderListMarker *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 27);
  if (v3)
    (*(void (**)(uint64_t, WebCore::RenderListMarker *))(*(_QWORD *)v3 + 104))(v3, this);
  WebCore::RenderBox::willBeDestroyed(this, a2);
}

uint64_t WebCore::RenderListMarker::styleDidChange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t *v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  int v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;

  if (a2 <= 7 && a3)
  {
    if (((*(unsigned __int8 *)(a1 + 120) ^ *(unsigned __int8 *)(a3 + 40)) & 8) != 0)
    {
      a2 = 8;
    }
    else
    {
      v7 = *(_QWORD *)(a1 + 104);
      v8 = *(unsigned __int8 *)(v7 + 368);
      v9 = *(WTF::StringImpl **)(v7 + 376);
      if (v9)
        *(_DWORD *)v9 += 2;
      v10 = *(_QWORD *)(a3 + 24);
      v11 = *(unsigned __int8 *)(v10 + 368);
      v12 = *(WTF::StringImpl **)(v10 + 376);
      if (v12)
        *(_DWORD *)v12 += 2;
      v13 = 8;
      if (v8 == v11 && v9 == v12)
      {
        if ((((*(_BYTE *)(a1 + 96) & 0x1Fu) < 0x1A) & (0x3528029u >> *(_BYTE *)(a1 + 96))) != (((*(_BYTE *)(a3 + 16) & 0x1Fu) < 0x1A) & (0x3528029u >> *(_BYTE *)(a3 + 16))))
          v13 = 8;
        else
          v13 = a2;
      }
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
        {
          v15 = v9;
          v16 = a3;
          WTF::StringImpl::destroy(v12, (WTF::StringImpl *)a2);
          v9 = v15;
          a3 = v16;
        }
        else
        {
          *(_DWORD *)v12 -= 2;
        }
      }
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
        {
          v17 = a3;
          WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
          a3 = v17;
        }
        else
        {
          *(_DWORD *)v9 -= 2;
        }
      }
      a2 = v13;
    }
  }
  WebCore::RenderBox::styleDidChange(a1, (WTF::StringImpl *)a2, a3);
  v5 = (uint64_t *)(a1 + 216);
  result = *(_QWORD *)(a1 + 216);
  v6 = *(_DWORD **)(*(_QWORD *)(a1 + 104) + 8);
  if ((_DWORD *)result != v6)
  {
    if (result)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)result + 104))(result, a1);
      v6 = *(_DWORD **)(*(_QWORD *)(a1 + 104) + 8);
    }
    WTF::RefPtr<WebCore::MockContentFilterSettingsClient,WTF::RawPtrTraits<WebCore::MockContentFilterSettingsClient>,WTF::DefaultRefDerefTraits<WebCore::MockContentFilterSettingsClient>>::operator=((_DWORD **)(a1 + 216), v6);
    result = *v5;
    if (*v5)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 96))(result, a1);
  }
  return result;
}

uint64_t WebCore::RenderListMarker::isImage(WebCore::RenderListMarker *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 27);
  if (result)
    return (*(unsigned int (**)(uint64_t))(*(_QWORD *)result + 64))(result) ^ 1;
  return result;
}

double WebCore::RenderListMarker::textRun(WebCore::RenderListMarker *this, uint64_t a2, uint64_t a3, WTF::StringImpl *a4)
{
  int v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  unsigned int v38;
  int v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  int v42;
  double result;
  _DWORD *v44;
  WTF::StringImpl *v45;
  double v46[3];
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;

  v6 = *(_DWORD *)(a2 + 120);
  if (!*(_BYTE *)(a2 + 209))
  {
    if ((v6 & 0x4000000) != 0)
    {
      v28 = *(_QWORD *)(a2 + 200);
      if (v28)
      {
        v29 = *(_QWORD *)(v28 + 8);
        v30 = *(unsigned int *)(v28 + 4) | ((unint64_t)((*(_DWORD *)(v28 + 16) >> 2) & 1) << 32);
      }
      else
      {
        v29 = 0;
        v30 = 0x100000000;
      }
      WebCore::reversed(&v44, v29, v30);
      v7 = v44;
      v31 = a2 + 80;
      if (v44)
        goto LABEL_65;
LABEL_35:
      v32 = 0x100000000;
      goto LABEL_66;
    }
    v8 = *(_QWORD *)(a2 + 200);
    if (v8 && (v9 = *(unsigned int *)(v8 + 4), (_DWORD)v9))
    {
      v10 = *(void **)(v8 + 8);
      v11 = *(unsigned __int8 *)(a2 + 208);
      v12 = (*(_DWORD *)(v8 + 16) >> 2) & 1;
      if (v9 <= v11)
        v13 = v9 & 0xFFFFFFFEFFFFFFFFLL | ((unint64_t)(v12 & 1) << 32);
      else
        v13 = (v12 << 32) | v11;
    }
    else
    {
      v13 = 0x100000000;
      v10 = &str_4_76;
    }
    WebCore::reversed(&v47, (uint64_t)v10, v13);
    v34 = *(_QWORD *)(a2 + 200);
    if (v34)
    {
      if (*(_BYTE *)(a2 + 208) || (*(_DWORD *)(v34 + 4) & 0x80000000) != 0)
      {
        WTF::StringImpl::substring(*(WTF::StringImpl **)(a2 + 200));
        v34 = (uint64_t)v44;
      }
      else
      {
        *(_DWORD *)v34 += 2;
      }
    }
    if (v47)
    {
      v35 = *((_DWORD *)v47 + 1);
      if (v34)
      {
LABEL_50:
        v36 = *(_DWORD *)(v34 + 4);
LABEL_51:
        if ((v36 | v35) < 0 || (v37 = (v35 + v36), __OFADD__(v35, v36)))
        {
          v44 = 0;
          goto LABEL_91;
        }
        if (v47)
        {
          v38 = *((_DWORD *)v47 + 4);
          v39 = (v38 >> 2) & 1;
          if (v34 && (v38 & 4) != 0)
            goto LABEL_56;
        }
        else
        {
          if (v34)
          {
LABEL_56:
            v39 = (*(unsigned __int8 *)(v34 + 16) >> 2) & 1;
            goto LABEL_57;
          }
          v39 = 1;
        }
LABEL_57:
        WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v37, v39, (uint64_t)v47, v34, &v44);
        v7 = v44;
        if (v44)
        {
          v44 = 0;
          if (v34)
          {
            if (*(_DWORD *)v34 == 2)
              WTF::StringImpl::destroy((WTF::StringImpl *)v34, v25);
            else
              *(_DWORD *)v34 -= 2;
          }
          v27 = v47;
          v47 = 0;
          if (!v27)
            goto LABEL_64;
LABEL_62:
          if (*(_DWORD *)v27 == 2)
            WTF::StringImpl::destroy(v27, v25);
          else
            *(_DWORD *)v27 -= 2;
          goto LABEL_64;
        }
LABEL_91:
        __break(0xC471u);
        JUMPOUT(0x1964131ACLL);
      }
    }
    else
    {
      v35 = 0;
      if (v34)
        goto LABEL_50;
    }
    v36 = 0;
    goto LABEL_51;
  }
  if ((v6 & 0x4000000) != 0)
  {
    v14 = *(_QWORD *)(a2 + 200);
    if (!v14
      || (v15 = *(unsigned int *)(v14 + 4), v16 = *(unsigned __int8 *)(a2 + 208), v15 <= v16))
    {
      v19 = 0x100000000;
      v17 = (char *)&str_4_76;
      goto LABEL_14;
    }
    v17 = *(char **)(v14 + 8);
    v18 = ((unint64_t)*(unsigned int *)(v14 + 16) >> 2) & 1;
    if (!(_DWORD)v16)
    {
      v19 = v15 | (v18 << 32);
      goto LABEL_14;
    }
    v19 = (v15 - v16);
    v33 = v15 - v16;
    if ((_DWORD)v18)
    {
      if (v33 >= v19)
      {
        v17 += v16;
        v19 |= 0x100000000uLL;
        goto LABEL_14;
      }
    }
    else if (v33 >= v19)
    {
      v17 += 2 * v16;
LABEL_14:
      WebCore::reversed(&v49, (uint64_t)v17, v19);
      a4 = *(WTF::StringImpl **)(a2 + 200);
      if (a4)
      {
        if (*((_DWORD *)a4 + 1) > *(unsigned __int8 *)(a2 + 208))
        {
          WTF::StringImpl::substring(*(WTF::StringImpl **)(a2 + 200));
          a4 = v48;
        }
        else
        {
          *(_DWORD *)a4 += 2;
          v48 = a4;
        }
LABEL_17:
        if (v49)
        {
          v20 = *((_DWORD *)v49 + 1);
          if (a4)
          {
LABEL_19:
            v21 = *((_DWORD *)a4 + 1);
LABEL_20:
            if ((v21 | v20) < 0 || (v22 = (v20 + v21), __OFADD__(v20, v21)))
            {
              v44 = 0;
              goto LABEL_91;
            }
            if (v49)
            {
              v23 = *((_DWORD *)v49 + 4);
              v24 = (v23 >> 2) & 1;
              if (a4 && (v23 & 4) != 0)
                goto LABEL_25;
            }
            else
            {
              if (a4)
              {
LABEL_25:
                v24 = (*((unsigned __int8 *)a4 + 16) >> 2) & 1;
                goto LABEL_26;
              }
              v24 = 1;
            }
LABEL_26:
            WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v22, v24, (uint64_t)v49, (uint64_t)a4, &v44);
            v7 = v44;
            if (v44)
            {
              v44 = 0;
              v26 = v48;
              v48 = 0;
              if (v26)
              {
                if (*(_DWORD *)v26 == 2)
                  WTF::StringImpl::destroy(v26, v25);
                else
                  *(_DWORD *)v26 -= 2;
              }
              v27 = v49;
              v49 = 0;
              if (!v27)
                goto LABEL_64;
              goto LABEL_62;
            }
            goto LABEL_91;
          }
        }
        else
        {
          v20 = 0;
          if (a4)
            goto LABEL_19;
        }
        v21 = 0;
        goto LABEL_20;
      }
LABEL_87:
      v48 = 0;
      goto LABEL_17;
    }
    __break(1u);
    goto LABEL_87;
  }
  v7 = *(_DWORD **)(a2 + 200);
  if (!v7)
  {
    v31 = a2 + 80;
    goto LABEL_35;
  }
  *v7 += 2;
LABEL_64:
  v31 = a2 + 80;
LABEL_65:
  v32 = v7[1] | ((unint64_t)((v7[4] >> 2) & 1) << 32);
LABEL_66:
  WebCore::RenderBlock::constructTextRun(v32, v31, 4, 0, (uint64_t)&v44);
  *(_DWORD *)this = 0;
  v41 = v45;
  if (v45)
  {
    v42 = *(_DWORD *)v45;
    *(_DWORD *)v45 += 2;
    *((_QWORD *)this + 1) = v41;
    result = v46[0];
    *((_OWORD *)this + 1) = *(_OWORD *)v46;
    *(double *)((char *)this + 30) = *(double *)((char *)&v46[1] + 6);
    *((_QWORD *)this + 5) = v7;
    if (v42)
      *(_DWORD *)v41 = v42;
    else
      WTF::StringImpl::destroy(v41, v40);
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
    result = v46[0];
    *((_OWORD *)this + 1) = *(_OWORD *)v46;
    *(double *)((char *)this + 30) = *(double *)((char *)&v46[1] + 6);
    *((_QWORD *)this + 5) = v7;
  }
  return result;
}

uint64_t WebCore::reversed(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  uint64_t result;
  _WORD *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = BYTE4(a3);
  if ((a3 & 0xFFFFFFFE) != 0)
  {
    v7 = a3;
    result = WTF::StringImpl::createUninitialized();
    *a1 = v11;
    v9 = 0;
    v10 = a3 - 1;
    if (v6)
    {
      do
      {
        *v9++ = *(unsigned __int8 *)(a2 + v10--);
        --v7;
      }
      while (v7);
    }
    else
    {
      do
      {
        *v9++ = *(_WORD *)(a2 + 2 * v10--);
        --v7;
      }
      while (v7);
    }
  }
  else if (BYTE4(a3))
  {
    return WTF::String::String();
  }
  else
  {
    return WTF::String::String();
  }
  return result;
}

void WebCore::RenderListMarker::paint(WebCore::RenderListMarker *this, WebCore::PaintInfo *a2, const WebCore::LayoutPoint *a3)
{
  int v5;
  int v6;
  int v7;
  unsigned int v8;
  BOOL v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  unsigned int v17;
  unint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  const WebCore::LayoutRect *v22;
  float v23;
  float v24;
  float v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  WebCore::RenderElement *v34;
  double v35;
  void *v36;
  uint64_t v37;
  int v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  void *v41;
  WTF::StringImpl *v42;
  unsigned int *v43;
  unsigned int v44;
  BOOL v45;
  uint64_t v46;
  unsigned int v47;
  int32x2_t v48;
  WTF *v49;
  double v50;
  int v51;
  int v52;
  double v53;
  int v54;
  float v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  double v60;
  WTF::StringImpl *v61;
  uint64_t v62;
  const WebCore::LayoutRect *v63;
  const WebCore::LayoutRect *v64;
  unint64_t v65;
  int v66;
  int v67;
  uint64_t v68;
  WebCore::RenderElement *v69;
  double v70;
  unsigned int v71;
  unsigned int *v72;
  unsigned int v73;
  unsigned int v74;
  int8x8_t v75;
  float32x2_t v76;
  float32x2_t v77;
  int v78;
  int v79;
  float32x2_t v80;
  const WebCore::LayoutRect *v81;
  uint64_t v82;
  _DWORD v83[2];
  unint64_t v84;
  int32x2_t v85;
  WTF::StringImpl *v86;
  int32x2_t v87;
  int32x2_t v88;
  _DWORD v89[2];
  uint64_t v90;

  v5 = *((unsigned __int16 *)a2 + 8);
  if (v5 != 8 && v5 != 0x2000
    || (*(_BYTE *)(*((_QWORD *)this + 13) + 239) & 4) != 0
    || (*((_BYTE *)this + 120) & 0x30) != 0)
  {
    return;
  }
  v7 = *((_DWORD *)this + 38);
  v6 = *((_DWORD *)this + 39);
  v8 = *((_DWORD *)a3 + 1);
  v9 = __OFADD__(*(_DWORD *)a3, v7);
  v10 = *(_DWORD *)a3 + v7;
  if (v9)
    v11 = (*(_DWORD *)a3 >> 31) + 0x7FFFFFFF;
  else
    v11 = v10;
  v9 = __OFADD__(v8, v6);
  v12 = v8 + v6;
  if (v9)
    v13 = (v8 >> 31) + 0x7FFFFFFF;
  else
    v13 = v12;
  v14 = *((_QWORD *)this + 24);
  if (v14)
  {
    v15 = *(_QWORD *)(v14 + 20);
    v16 = (uint64_t *)(v14 + 28);
  }
  else
  {
    v15 = 0;
    v16 = (uint64_t *)((char *)this + 160);
  }
  v90 = *v16;
  v9 = __OFADD__((_DWORD)v15, v11);
  v17 = v15 + v11;
  v18 = HIDWORD(v15);
  v19 = (v15 >> 31) + 0x7FFFFFFF;
  if (!v9)
    v19 = v17;
  v9 = __OFADD__((_DWORD)v18, v13);
  v20 = v18 + v13;
  v21 = (v18 >> 31) + 0x7FFFFFFF;
  if (v9)
    v20 = v21;
  v89[0] = v19;
  v89[1] = v20;
  if (!WebCore::LayoutRect::intersects(a2, (const WebCore::LayoutRect *)v89))
    return;
  WebCore::RenderListMarker::relativeMarkerRect(this);
  v88 = (int32x2_t)__PAIR64__(LODWORD(v24), LODWORD(v23));
  *(float *)v87.i32 = (float)((float)v11 * 0.015625) + v25;
  *(float *)&v87.i32[1] = (float)((float)v13 * 0.015625) + v26;
  if (*((_WORD *)a2 + 8) == 0x2000)
  {
    v27 = *((_QWORD *)a2 + 9);
    if (v27)
    {
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v27 + 24))(v27))
        v27 = 0;
    }
    WebCore::AccessibilityRegionContext::takeBounds(v27, (uint64_t)this, *(float *)v87.i32, *(float *)&v87.i32[1], *(float *)v88.i32, *(float *)&v88.i32[1]);
    return;
  }
  if (v23 <= 0.0 || v24 <= 0.0)
    return;
  v28 = *((_QWORD *)a2 + 10);
  v29 = *((_QWORD *)this + 27);
  if (v29 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 64))(v29) & 1) == 0)
  {
    v62 = *((_QWORD *)this + 27);
    v85 = v88;
    (*(void (**)(const WebCore::LayoutRect **__return_ptr, uint64_t, WebCore::RenderListMarker *, int32x2_t *, _QWORD))(*(_QWORD *)v62 + 176))(&v81, v62, this, &v85, 0);
    v63 = v81;
    if (v81)
    {
      WebCore::GraphicsContext::drawImage(v28, (uint64_t)v81, (uint64_t)&v87, 545);
      v64 = v81;
      v81 = 0;
      if (v64)
      {
        if (*((_DWORD *)v64 + 2) == 1)
          (*(void (**)(const WebCore::LayoutRect *))(*(_QWORD *)v64 + 8))(v64);
        else
          --*((_DWORD *)v64 + 2);
      }
    }
    if ((*((_BYTE *)this + 23) & 0xE) != 0)
    {
      v82 = *((_QWORD *)this + 20);
      v81 = (const WebCore::LayoutRect *)__PAIR64__(v13, v11);
      v65 = WebCore::snappedIntRect((WebCore *)&v81, v63);
      *(float *)v85.i32 = (float)(int)v65;
      *(float *)&v85.i32[1] = (float)SHIDWORD(v65);
      *(float *)&v86 = (float)v66;
      *((float *)&v86 + 1) = (float)v67;
      v68 = *((_QWORD *)this + 28);
      v69 = v68 ? *(WebCore::RenderElement **)(v68 + 8) : 0;
      v70 = WebCore::RenderElement::selectionBackgroundColor(v69, &v84);
      (*(void (**)(uint64_t, int32x2_t *, unint64_t *, double))(*(_QWORD *)v28 + 224))(v28, &v85, &v84, v70);
      if ((v84 & 0x8000000000000) != 0)
      {
        v43 = (unsigned int *)(v84 & 0xFFFFFFFFFFFFLL);
        do
        {
          v71 = __ldaxr(v43);
          v45 = --v71 == 0;
        }
        while (__stlxr(v71, v43));
LABEL_45:
        if (v45)
        {
          atomic_store(1u, v43);
          WTF::fastFree((WTF *)v43, v41);
        }
        return;
      }
    }
    return;
  }
  if ((*((_BYTE *)this + 23) & 0xE) != 0)
  {
    v82 = *((_QWORD *)this + 20);
    v81 = (const WebCore::LayoutRect *)__PAIR64__(v13, v11);
    v30 = WebCore::snappedIntRect((WebCore *)&v81, v22);
    *(float *)v85.i32 = (float)(int)v30;
    *(float *)&v85.i32[1] = (float)SHIDWORD(v30);
    *(float *)&v86 = (float)v31;
    *((float *)&v86 + 1) = (float)v32;
    v33 = *((_QWORD *)this + 28);
    v34 = v33 ? *(WebCore::RenderElement **)(v33 + 8) : 0;
    v35 = WebCore::RenderElement::selectionBackgroundColor(v34, &v84);
    (*(void (**)(uint64_t, int32x2_t *, unint64_t *, double))(*(_QWORD *)v28 + 224))(v28, &v85, &v84, v35);
    if ((v84 & 0x8000000000000) != 0)
    {
      v72 = (unsigned int *)(v84 & 0xFFFFFFFFFFFFLL);
      do
      {
        v73 = __ldaxr(v72);
        v74 = v73 - 1;
      }
      while (__stlxr(v74, v72));
      if (!v74)
      {
        atomic_store(1u, v72);
        WTF::fastFree((WTF *)v72, v36);
      }
    }
  }
  WebCore::RenderStyle::visitedDependentColorWithColorFilter((uint64_t)this + 80, 5, 0, &v84);
  WebCore::GraphicsContext::setStrokeColor((WebCore::GraphicsContext *)v28, (const WebCore::Color *)&v84);
  if (*(_BYTE *)(v28 + 193) != 1)
  {
    *(_BYTE *)(v28 + 193) = 1;
    *(_DWORD *)(v28 + 184) |= 0x10u;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v28 + 88))(v28, v28 + 8);
  if (*(float *)(v28 + 188) != 1.0)
  {
    *(_DWORD *)(v28 + 184) |= 8u;
    *(_DWORD *)(v28 + 188) = 1065353216;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v28 + 88))(v28, v28 + 8);
  WebCore::GraphicsContext::setFillColor((WebCore::GraphicsContext *)v28, (const WebCore::Color *)&v84);
  v37 = *((_QWORD *)this + 13);
  v38 = *(unsigned __int8 *)(v37 + 368);
  v85.i8[0] = *(_BYTE *)(v37 + 368);
  v39 = *(WTF::StringImpl **)(v37 + 376);
  if (v39)
    *(_DWORD *)v39 += 2;
  v86 = v39;
  if (v38)
    goto LABEL_97;
  v40 = v39;
  if (MEMORY[0x19AEA53F4](v39, "disc", 4))
  {
    (*(void (**)(uint64_t, int32x2_t *))(*(_QWORD *)v28 + 200))(v28, &v87);
    goto LABEL_39;
  }
  if (!MEMORY[0x19AEA53F4](v40, "circle", 6))
  {
LABEL_97:
    if (WebCore::ListStyleType::isSquare((WebCore::ListStyleType *)&v85))
    {
      (*(void (**)(uint64_t, int32x2_t *, uint64_t))(*(_QWORD *)v28 + 216))(v28, &v87, 1);
    }
    else
    {
      v46 = *((_QWORD *)this + 25);
      if (v46 && *(_DWORD *)(v46 + 4))
      {
        v47 = ((*((_DWORD *)this + 31) >> 13) & 6) - 6;
        if (v47 >= 0xFFFFFFFC)
        {
          v75 = (int8x8_t)vceq_s32((int32x2_t)__PAIR64__(v11, v13), (int32x2_t)0x8000000080000000);
          v76 = vmul_f32(vcvt_f32_s32((int32x2_t)vorr_s8((int8x8_t)(*(_QWORD *)&v75 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8((int8x8_t)vneg_s32((int32x2_t)__PAIR64__(v11, v13)), v75))), (float32x2_t)vdup_n_s32(0x3C800000u));
          v77 = (float32x2_t)vrev64_s32(v87);
          v78 = *((_DWORD *)this + 40);
          v9 = __OFSUB__(v13, v78);
          v79 = v13 - v78;
          if (v9)
            v79 = (v13 >> 31) + 0x7FFFFFFF;
          v80.f32[0] = (float)v11 * 0.015625;
          v80.f32[1] = (float)v79 * 0.015625;
          v87 = (int32x2_t)vadd_f32(v80, vadd_f32(v76, v77));
          v88 = vrev64_s32(v88);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v28 + 96))(v28, 1);
          (*(void (**)(uint64_t, float, float))(*(_QWORD *)v28 + 648))(v28, *(float *)v87.i32, *(float *)&v87.i32[1] + *(float *)&v88.i32[1]);
          (*(void (**)(uint64_t, float))(*(_QWORD *)v28 + 640))(v28, 1.5708);
          (*(void (**)(uint64_t, float, float))(*(_QWORD *)v28 + 648))(v28, -*(float *)v87.i32, -(float)(*(float *)&v87.i32[1] + *(float *)&v88.i32[1]));
        }
        v48 = v87;
        v49 = WebCore::RenderStyle::metricsOfPrimaryFont((WebCore::RenderListMarker *)((char *)this + 80), v41);
        v50 = *(float *)v48.i32 * 64.0;
        if (v50 > -2147483650.0)
          v51 = (int)v50;
        else
          v51 = 0x80000000;
        if (v50 < 2147483650.0)
          v52 = v51;
        else
          v52 = 0x7FFFFFFF;
        v53 = (float)(*(float *)&v48.i32[1] + (float)*((int *)v49 + 11)) * 64.0;
        if (v53 > -2147483650.0)
          v54 = (int)v53;
        else
          v54 = 0x80000000;
        if (v53 >= 2147483650.0)
          v54 = 0x7FFFFFFF;
        v81 = (const WebCore::LayoutRect *)__PAIR64__(v54, v52);
        v55 = WebCore::Document::deviceScaleFactor(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3)
                                                                                                 + 8)
                                                                                     + 40)
                                                                         + 8));
        v83[0] = WebCore::roundPointToDevicePixels((WebCore *)&v81, (const WebCore::LayoutPoint *)((*((_DWORD *)this + 30) & 0x4000000) == 0), v55);
        v83[1] = v56;
        v57 = *((_QWORD *)this + 14) + 32;
        v60 = WebCore::RenderListMarker::textRun((WebCore::RenderListMarker *)&v81, (uint64_t)this, v58, v59);
        (*(void (**)(uint64_t, uint64_t, const WebCore::LayoutRect **, _DWORD *, _QWORD, _QWORD, double))(*(_QWORD *)v28 + 520))(v28, v57, &v81, v83, 0, 0, v60);
        WebCore::RenderListMarker::TextRunWithUnderlyingString::~TextRunWithUnderlyingString((WebCore::RenderListMarker::TextRunWithUnderlyingString *)&v81, v61);
        if (v47 >= 0xFFFFFFFC)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v28 + 104))(v28, 1);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, int32x2_t *))(*(_QWORD *)v28 + 208))(v28, &v87);
  }
LABEL_39:
  v42 = v86;
  v86 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
      WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v41);
    else
      *(_DWORD *)v42 -= 2;
  }
  if ((v84 & 0x8000000000000) != 0)
  {
    v43 = (unsigned int *)(v84 & 0xFFFFFFFFFFFFLL);
    do
    {
      v44 = __ldaxr(v43);
      v45 = --v44 == 0;
    }
    while (__stlxr(v44, v43));
    goto LABEL_45;
  }
}

WTF::StringImpl *WebCore::RenderListMarker::relativeMarkerRect(WebCore::RenderListMarker *this)
{
  uint64_t v2;
  WTF::StringImpl *result;
  void *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WebCore::FontCascade *v8;
  void *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;

  v2 = *((_QWORD *)this + 27);
  if (!v2 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 64))(v2) & 1) != 0)
  {
    result = (WTF::StringImpl *)WebCore::RenderListMarker::widthUsesMetricsOfPrimaryFont((WebCore::RenderListMarker *)*(unsigned __int8 *)(*((_QWORD *)this + 13) + 368), *(WTF::StringImpl **)(*((_QWORD *)this + 13) + 376));
    if ((_DWORD)result)
    {
      return WebCore::RenderStyle::metricsOfPrimaryFont((WebCore::RenderListMarker *)((char *)this + 80), v4);
    }
    else
    {
      v7 = *((_QWORD *)this + 25);
      if (v7 && *(_DWORD *)(v7 + 4))
      {
        v8 = (WebCore::FontCascade *)(*((_QWORD *)this + 14) + 32);
        WebCore::RenderListMarker::textRun((WebCore::RenderListMarker *)&v12, (uint64_t)this, v5, v6);
        WebCore::FontCascade::width((uint64_t)v8, (uint64_t)&v12);
        WebCore::FontCascade::metricsOfPrimaryFont(v8, v9);
        v11 = v14;
        v14 = 0;
        if (v11)
        {
          if (*(_DWORD *)v11 == 2)
            WTF::StringImpl::destroy(v11, v10);
          else
            *(_DWORD *)v11 -= 2;
        }
        result = v13;
        v13 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
  }
  else
  {
    (*(void (**)(_QWORD, WebCore::RenderListMarker *, float))(**((_QWORD **)this + 27) + 120))(*((_QWORD *)this + 27), this, *(float *)(*((_QWORD *)this + 13) + 184));
    return (WTF::StringImpl *)(*(uint64_t (**)(_QWORD, WebCore::RenderListMarker *, float))(**((_QWORD **)this + 27) + 120))(*((_QWORD *)this + 27), this, *(float *)(*((_QWORD *)this + 13) + 184));
  }
  return result;
}

void WebCore::RenderListMarker::TextRunWithUnderlyingString::~TextRunWithUnderlyingString(WebCore::RenderListMarker::TextRunWithUnderlyingString *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
}

uint64_t WebCore::RenderListMarker::parentBox(WebCore::RenderListMarker *this, WebCore::RenderBox *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t ColumnSpannerPlaceholder;
  uint64_t v8;
  uint64_t v9;
  int v10;
  WebCore::RenderBox *v11;

  if (this)
    this = (WebCore::RenderListMarker *)*((_QWORD *)this + 1);
  if ((*((_BYTE *)this + 23) & 0x10) != 0)
  {
    v11 = a2;
    v5 = (*(uint64_t (**)(WebCore::RenderListMarker *))(*(_QWORD *)this + 648))(this);
    a2 = v11;
    if (v5)
    {
      v6 = v5;
      if (*(_BYTE *)(v5 + 46) == 25)
      {
        ++*(_DWORD *)(v5 + 16);
        ColumnSpannerPlaceholder = WebCore::RenderMultiColumnFlow::findColumnSpannerPlaceholder((WebCore::RenderMultiColumnFlow *)v5, v11);
        if (ColumnSpannerPlaceholder)
        {
          v8 = *(_QWORD *)(ColumnSpannerPlaceholder + 32);
          if (!v8)
            goto LABEL_22;
        }
        else
        {
          v8 = *((_QWORD *)v11 + 4);
          if (!v8)
            goto LABEL_22;
        }
        v9 = *(_QWORD *)(v8 + 8);
        if (v9)
        {
          if ((*(_BYTE *)(v9 + 45) & 4) != 0)
            result = v9;
          else
            result = 0;
          goto LABEL_20;
        }
LABEL_22:
        result = 0;
LABEL_20:
        v10 = *(_DWORD *)(v6 + 16);
        if (v10)
        {
          *(_DWORD *)(v6 + 16) = v10 - 1;
        }
        else
        {
          result = 286;
          __break(0xC471u);
        }
        return result;
      }
    }
  }
  v2 = *((_QWORD *)a2 + 4);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return 0;
  if ((*(_BYTE *)(v3 + 45) & 4) != 0)
    return v3;
  return 0;
}

uint64_t WebCore::RenderMultiColumnFlow::findColumnSpannerPlaceholder(WebCore::RenderMultiColumnFlow *this, const WebCore::RenderBox *a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int i;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;

  v2 = **((_QWORD **)this + 42);
  if (!v2)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
  v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
  v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  v7 = v3 & ((v6 >> 31) ^ v6);
  for (i = 1; ; v7 = (v9 + i++) & v3)
  {
    v9 = v7;
    v10 = *(_QWORD *)(v2 + 16 * v7);
    if (v10 != -1)
    {
      if (!v10)
        return 0;
      if (*(const WebCore::RenderBox **)(v10 + 8) == a2)
        break;
    }
  }
  v11 = *(WTF **)(v2 + 16 * v9 + 8);
  if (!v11)
    return 0;
  v12 = (*(_DWORD *)v11)++;
  v13 = *((_QWORD *)v11 + 1);
  if (v12)
    *(_DWORD *)v11 = v12;
  else
    WTF::fastFree(v11, a2);
  return v13;
}

int *WebCore::RenderListMarker::layout(WebCore::RenderListMarker *this)
{
  uint64_t v2;
  int *v3;
  unsigned int v4;
  WebCore::RenderListMarker *v5;
  int *v6;
  int *v7;
  int v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  void *v19;
  uint64_t v20;
  WebCore::RenderBox *v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  char *v26;
  int *result;
  int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  char v32;
  int v33;
  unsigned int v34;
  int v35;
  int v36;
  unsigned int v37;
  _BOOL4 v38;
  uint64_t v39;
  char *v40;
  _BOOL4 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  int v46;
  void *v47;
  float v48;
  int v49;
  _BOOL4 v50;
  int v51;
  uint64_t v52;
  unsigned int *v53;
  int v54;
  void *v55;
  float v56;
  int v57;
  float v58;
  double v59;
  int v60;
  unsigned int v61;
  int v62;
  int v63;
  uint64_t v64;
  double v65;
  int v66;
  unsigned int v67;
  int v68;
  int v69;
  uint64_t v70;
  unsigned int v71;
  double v72;
  int v73;
  float v74;
  double v75;
  int v76;
  BOOL v77;
  float v78;
  unsigned __int8 v79;
  char v80;
  char v81;
  float v82;
  unsigned __int8 v83;
  char v84;
  char v85;

  v2 = WebCore::RenderListMarker::parentBox(*((WebCore::RenderListMarker **)this + 28), this);
  if (v2)
  {
    v3 = (int *)v2;
    v4 = 0;
    do
    {
      v5 = (WebCore::RenderListMarker *)*((_QWORD *)this + 28);
      if (v5)
        v6 = (int *)*((_QWORD *)v5 + 1);
      else
        v6 = 0;
      if (v3 == v6)
        break;
      v7 = v3 + 38;
      if (((v3[31] >> 13) & 6) - 2 >= 4)
        v7 = v3 + 39;
      v8 = *v7;
      v9 = __OFADD__(v4, v8);
      v10 = v4 + v8;
      v4 = v9 ? (v4 >> 31) + 0x7FFFFFFF : v10;
      v3 = (int *)WebCore::RenderListMarker::parentBox(v5, (WebCore::RenderBox *)v3);
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }
  v11 = *((_QWORD *)this + 28);
  if (v11)
    v12 = *(_QWORD *)(v11 + 8);
  else
    v12 = 0;
  WebCore::RenderBlock::fragmentAtBlockOffset((_BYTE *)v12, v4);
  v13 = *(_QWORD *)v12;
  if (((*(_DWORD *)(v12 + 124) >> 13) & 6u) - 2 < 4)
  {
    v14 = (*(uint64_t (**)(uint64_t))(v13 + 1000))(v12);
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 928))(v12);
  }
  else
  {
    v14 = (*(uint64_t (**)(uint64_t))(v13 + 1016))(v12);
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 944))(v12);
  }
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
    v16 = (v14 >> 31) + 0x7FFFFFFF;
  v17 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v12 + 1824))(v12, v4, v16, 0);
  v18 = WebCore::RenderBlock::adjustLogicalLeftOffsetForLine(v12, (void *)v17);
  *((_DWORD *)this + 59) = v18;
  if ((*((_BYTE *)this + 123) & 4) != 0)
  {
    v20 = *((_QWORD *)this + 28);
    if (v20)
      v21 = *(WebCore::RenderBox **)(v20 + 8);
    else
      v21 = 0;
    v22 = WebCore::RenderBlock::fragmentAtBlockOffset(v21, v4);
    v23 = WebCore::RenderBlock::logicalRightOffsetForContent(v21, v22);
    v24 = (*(uint64_t (**)(WebCore::RenderBox *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v21 + 1816))(v21, v4, v23, 0);
    v18 = WebCore::RenderBlock::adjustLogicalRightOffsetForLine((uint64_t)v21, (void *)v24);
  }
  *((_DWORD *)this + 58) = v18;
  v25 = *((_QWORD *)this + 27);
  if (!v25 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 64))(v25) & 1) != 0)
  {
    if ((*((_BYTE *)this + 21) & 0x20) != 0)
      (*(void (**)(WebCore::RenderListMarker *))(*(_QWORD *)this + 1640))(this);
    if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
      v26 = (char *)this + 164;
    else
      v26 = (char *)this + 160;
    *(_DWORD *)v26 = *((_DWORD *)this + 46);
    result = (int *)WebCore::RenderStyle::metricsOfPrimaryFont((WebCore::RenderListMarker *)((char *)this + 80), v19);
    v28 = result[12] + result[11];
    v29 = v28 << 6;
    if (v28 < -33554432)
      v29 = 0x80000000;
    if (v28 <= 0x1FFFFFF)
      v30 = v29;
    else
      v30 = 0x7FFFFFFF;
    v31 = *((_DWORD *)this + 31);
    v32 = v31 >> 13;
    if (((v31 >> 13) & 6) - 2 < 4)
      *((_DWORD *)this + 40) = v30;
    else
      *((_DWORD *)this + 41) = v30;
  }
  else
  {
    WebCore::RenderListMarker::updateMarginsAndContent(this, v19);
    v72 = (*(float (**)(_QWORD, WebCore::RenderListMarker *, float))(**((_QWORD **)this + 27) + 120))(*((_QWORD *)this + 27), this, *(float *)(*((_QWORD *)this + 13) + 184))* 64.0;
    if (v72 >= 2147483650.0)
    {
      v73 = 0x7FFFFFFF;
    }
    else if (v72 <= -2147483650.0)
    {
      v73 = 0x80000000;
    }
    else
    {
      v73 = (int)v72;
    }
    *((_DWORD *)this + 40) = v73;
    result = (int *)(*(uint64_t (**)(_QWORD, WebCore::RenderListMarker *, float))(**((_QWORD **)this + 27)
                                                                                          + 120))(*((_QWORD *)this + 27), this, *(float *)(*((_QWORD *)this + 13) + 184));
    v75 = v74 * 64.0;
    if (v75 >= 2147483650.0)
    {
      v76 = 0x7FFFFFFF;
    }
    else if (v75 <= -2147483650.0)
    {
      v76 = 0x80000000;
    }
    else
    {
      v76 = (int)v75;
    }
    *((_DWORD *)this + 41) = v76;
    v31 = *((_DWORD *)this + 31);
    v32 = v31 >> 13;
  }
  v33 = v32 & 7;
  v34 = *((_DWORD *)this + 30);
  v35 = v34 & 0x4000000;
  v36 = (v34 >> 26) & 1;
  v37 = v33 - 2;
  v38 = v36;
  if ((v33 - 2) >= 2)
  {
    if (v33 == 4)
    {
      v38 = v35 == 0;
    }
    else
    {
      v38 = v36;
      if (v33 != 5)
      {
        v39 = 3;
        if (v35)
          v39 = 1;
        goto LABEL_40;
      }
    }
  }
  v77 = !v38;
  v39 = 2;
  if (v77)
    v39 = 0;
LABEL_40:
  v40 = (char *)this + 168;
  *((_DWORD *)this + v39 + 42) = 0;
  v41 = v36;
  if (v37 >= 2)
  {
    if (v33 == 4)
    {
      v41 = v35 == 0;
    }
    else
    {
      v41 = v36;
      if (v33 != 5)
      {
        v42 = 3;
        if (!v35)
          v42 = 1;
        goto LABEL_45;
      }
    }
  }
  v77 = !v41;
  v42 = 2;
  if (!v77)
    v42 = 0;
LABEL_45:
  *(_DWORD *)&v40[4 * v42] = 0;
  v43 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
  if (v37 >= 2)
  {
    if (v33 == 4)
    {
      v36 = v35 == 0;
    }
    else if (v33 != 5)
    {
      v44 = 3;
      if (v35)
        v44 = 1;
      goto LABEL_50;
    }
  }
  v77 = v36 == 0;
  v44 = 2;
  if (v77)
    v44 = 0;
LABEL_50:
  v45 = (unsigned int *)(v43 + 40 + 8 * v44);
  v85 = 0;
  v83 = *((_BYTE *)v45 + 4);
  v46 = v83;
  v84 = *((_BYTE *)v45 + 5);
  if (v83 - 2 >= 9)
  {
    if (v83 == 11)
    {
      v47 = (void *)*v45;
      v82 = *(float *)v45;
      result = WebCore::Length::ref((int *)&v82);
      v43 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
      v31 = *((_DWORD *)this + 31);
      v35 = *((_DWORD *)this + 30) & 0x4000000;
      goto LABEL_53;
    }
    v47 = 0;
    v49 = 1;
    v48 = 0.0;
  }
  else
  {
    if (!*((_BYTE *)v45 + 6))
    {
      v47 = (void *)*v45;
LABEL_53:
      v48 = *(float *)&v47;
      v49 = 1;
      goto LABEL_56;
    }
    v49 = 0;
    v48 = *(float *)v45;
    v47 = (void *)*v45;
  }
LABEL_56:
  v50 = v35 != 0;
  v51 = (unsigned __int16)v31 >> 13;
  if ((v51 - 2) >= 2)
  {
    if (v51 == 4)
    {
      v50 = v35 == 0;
    }
    else if (v51 != 5)
    {
      v52 = 3;
      if (!v35)
        v52 = 1;
      goto LABEL_61;
    }
  }
  v52 = 2;
  if (v50)
    v52 = 0;
LABEL_61:
  v53 = (unsigned int *)(v43 + 40 + 8 * v52);
  v81 = 0;
  v79 = *((_BYTE *)v53 + 4);
  v54 = v79;
  v80 = *((_BYTE *)v53 + 5);
  if (v79 - 2 >= 9)
  {
    if (v79 == 11)
    {
      v55 = (void *)*v53;
      v78 = *(float *)v53;
      result = WebCore::Length::ref((int *)&v78);
      goto LABEL_64;
    }
    v55 = 0;
    v57 = 1;
    v56 = 0.0;
  }
  else
  {
    if (!*((_BYTE *)v53 + 6))
    {
      v55 = (void *)*v53;
LABEL_64:
      v56 = *(float *)&v55;
      v57 = 1;
      goto LABEL_67;
    }
    v57 = 0;
    v56 = *(float *)v53;
    v55 = (void *)*v53;
  }
LABEL_67:
  if (v46 != 4)
    goto LABEL_79;
  v58 = (float)SLODWORD(v48);
  if (!v49)
    v58 = v48;
  v59 = v58 * 64.0;
  if (v59 >= 2147483650.0)
  {
    v60 = 0x7FFFFFFF;
  }
  else if (v59 <= -2147483650.0)
  {
    v60 = 0x80000000;
  }
  else
  {
    v60 = (int)v59;
  }
  v61 = *((_DWORD *)this + 30);
  v62 = (v61 >> 26) & 1;
  v63 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
  if ((v63 - 2) < 2)
    goto LABEL_142;
  if (v63 == 4)
  {
    v62 = (v61 & 0x4000000) == 0;
LABEL_142:
    v77 = v62 == 0;
    v64 = 2;
    if (v77)
      v64 = 0;
    goto LABEL_78;
  }
  if (v63 == 5)
    goto LABEL_142;
  v64 = 3;
  if ((v61 & 0x4000000) != 0)
    v64 = 1;
LABEL_78:
  *(_DWORD *)&v40[4 * v64] = v60;
LABEL_79:
  if (v54 != 4)
    goto LABEL_91;
  if (v57)
    v56 = (float)SLODWORD(v56);
  v65 = v56 * 64.0;
  if (v65 >= 2147483650.0)
  {
    v66 = 0x7FFFFFFF;
  }
  else if (v65 <= -2147483650.0)
  {
    v66 = 0x80000000;
  }
  else
  {
    v66 = (int)v65;
  }
  v67 = *((_DWORD *)this + 30);
  v68 = (v67 >> 26) & 1;
  v69 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
  if ((v69 - 2) < 2)
    goto LABEL_146;
  if (v69 == 4)
  {
    v68 = (v67 & 0x4000000) == 0;
LABEL_146:
    v77 = v68 == 0;
    v70 = 2;
    if (!v77)
      v70 = 0;
    goto LABEL_90;
  }
  if (v69 == 5)
    goto LABEL_146;
  v70 = 3;
  if ((v67 & 0x4000000) == 0)
    v70 = 1;
LABEL_90:
  *(_DWORD *)&v40[4 * v70] = v66;
LABEL_91:
  v71 = *((_DWORD *)this + 5) & 0xFFDFFDFF | 0x200;
  *((_DWORD *)this + 5) = v71;
  if ((*((_BYTE *)this + 45) & 2) == 0)
  {
    *(_WORD *)((char *)this + 69) &= ~1u;
    *((_WORD *)this + 38) = *((_WORD *)this + 38) & 0xF | (16
                                                         * *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8)
                                                                                            + 1944)
                                                                                + 248)
                                                                    + 472));
  }
  *((_DWORD *)this + 5) = v71 & 0xFFDFFE07;
  if (v54 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v55);
  }
  if (v46 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v47);
  }
  return result;
}

int *WebCore::RenderListMarker::updateMarginsAndContent(WebCore::RenderListMarker *this, void *a2)
{
  if ((*((_BYTE *)this + 21) & 0x20) != 0)
    WebCore::RenderListMarker::updateContent(this, a2);
  return WebCore::RenderListMarker::updateMargins(this, a2);
}

WTF::StringImpl *WebCore::RenderListMarker::imageChanged(WebCore::RenderListMarker *this, WTF::StringImpl *a2, const WebCore::IntRect *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  float v10;
  int v11;
  WebCore::RenderElement *v12;
  uint64_t v13;
  int v14;
  _BYTE v16[20];
  __int128 v17;
  char v18;

  v6 = *((_QWORD *)this + 4);
  if (v6)
  {
    if (*(_QWORD *)(v6 + 8))
    {
      v7 = *((_QWORD *)this + 27);
      if (v7)
      {
        if ((WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7) == a2)
        {
          v8 = *((_DWORD *)this + 40);
          if ((float)((float)v8 * 0.015625) == (*(float (**)(_QWORD, WebCore::RenderListMarker *, float))(**((_QWORD **)this + 27) + 120))(*((_QWORD *)this + 27), this, *(float *)(*((_QWORD *)this + 13) + 184))&& (v9 = *((_DWORD *)this + 41), (*(void (**)(_QWORD, WebCore::RenderListMarker *, float))(**((_QWORD **)this + 27) + 120))(*((_QWORD *)this + 27), this, *(float *)(*((_QWORD *)this + 13) + 184)), (float)((float)v9 * 0.015625) == v10)&& !(*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 27) + 64))(*((_QWORD *)this + 27)))
          {
            if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8)
                                                                                       + 1944)
                                                                           + 24)
                                                               + 8)
                                                   + 40)
                                       + 8)
                           + 3382))
            {
              LOBYTE(v17) = 0;
              v18 = 0;
              v16[0] = 0;
              v16[16] = 0;
              WebCore::RenderObject::issueRepaint((uint64_t)this, &v17, 0, 0, (uint64_t)v16);
            }
          }
          else
          {
            v11 = *((_DWORD *)this + 5);
            if ((v11 & 8) == 0)
            {
              *((_DWORD *)this + 5) = v11 | 8;
              v12 = WebCore::RenderObject::markContainingBlocksForLayout(this, 0);
              WebCore::RenderObject::scheduleLayout(this, v12);
              if ((*((_BYTE *)this + 21) & 0x80) != 0)
              {
                if ((*((_BYTE *)this + 45) & 0x10) == 0
                  || ((v13 = *((_QWORD *)this + 18)) == 0
                    ? (v14 = MEMORY[8])
                    : (v14 = *(_DWORD *)(v13 + 8) + 1, *(_DWORD *)(v13 + 8) = v14),
                      *(_QWORD *)(v13 + 24) = *(_QWORD *)(v13 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000,
                      !v14))
                {
                  __break(0xC471u);
                  JUMPOUT(0x1964147DCLL);
                }
                *(_DWORD *)(v13 + 8) = v14 - 1;
              }
            }
            WebCore::RenderObject::setPreferredLogicalWidthsDirty((uint64_t)this, 1, 1);
          }
        }
      }
    }
  }
  return WebCore::RenderBox::imageChanged(this, a2, a3);
}

uint64_t WebCore::RenderListMarker::updateContent(WebCore::RenderListMarker *this, void *a2)
{
  uint64_t result;
  uint64_t v4;
  int v5;
  WTF::StringImpl *v6;
  WebCore::CSSCounterStyle *v7;
  int v8;
  WebCore::CSSCounterStyle *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  WTF::StringImpl *v14;
  int v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  int v32;
  unsigned __int8 *v33;
  uint64_t v34;
  WTF *v35;
  void *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  int v39;
  unsigned __int8 *v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  unint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  unsigned int v49[2];
  float v50[2];
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;

  result = *((_QWORD *)this + 27);
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 64))(result);
    if ((result & 1) == 0)
    {
      v42 = *((_DWORD *)WebCore::RenderStyle::metricsOfPrimaryFont((WebCore::RenderListMarker *)((char *)this + 80), a2)
            + 11);
      v43 = 32 * v42;
      if (v42 < -33554432)
        v43 = -1073741824;
      if (v42 <= 0x1FFFFFF)
        v44 = v43;
      else
        v44 = 0x3FFFFFFF;
      LODWORD(v52) = v44;
      HIDWORD(v52) = v44;
      v45 = WebCore::RenderBoxModelObject::calculateImageIntrinsicDimensions((uint64_t)this, *((_QWORD *)this + 27), (int *)&v52, 0);
      v46 = *((_QWORD *)this + 27);
      v50[0] = (float)(int)v45 * 0.015625;
      v50[1] = (float)SHIDWORD(v45) * 0.015625;
      (*(void (**)(uint64_t, WebCore::RenderListMarker *, float *, float))(*(_QWORD *)v46 + 216))(v46, this, v50, *(float *)(*((_QWORD *)this + 13) + 184));
      result = (uint64_t)WTF::String::operator=((uint64_t *)this + 25, MEMORY[0x1E0CBF738]);
      *((_WORD *)this + 104) = 256;
      return result;
    }
  }
  v4 = *((_QWORD *)this + 13);
  v5 = *(unsigned __int8 *)(v4 + 368);
  LOBYTE(v50[0]) = *(_BYTE *)(v4 + 368);
  v6 = *(WTF::StringImpl **)(v4 + 376);
  if (v6)
    *(_DWORD *)v6 += 2;
  v51 = v6;
  if (v5)
  {
    if (v5 == 2)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      result = *((_QWORD *)this + 25);
      *((_QWORD *)this + 25) = v52;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)result -= 2;
      }
      *((_WORD *)this + 104) = 256;
    }
    else if (v5 == 1)
    {
      WTF::String::operator=((uint64_t *)this + 25, &v51);
      v38 = *((_QWORD *)this + 25);
      if (v38)
      {
        v39 = *(_DWORD *)(v38 + 4);
        *((_BYTE *)this + 208) = v39;
        if (v39)
        {
          v40 = *(unsigned __int8 **)(v38 + 8);
          if ((*(_BYTE *)(v38 + 16) & 4) != 0)
            v41 = *v40;
          else
            v41 = *(unsigned __int16 *)v40;
        }
        else
        {
          v41 = 0;
        }
      }
      else
      {
        v41 = 0;
        *((_BYTE *)this + 208) = 0;
      }
      result = MEMORY[0x19AEA858C](v41);
      *((_BYTE *)this + 209) = (_DWORD)result != 1;
      v6 = v51;
    }
    goto LABEL_70;
  }
  v7 = *(WebCore::CSSCounterStyle **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40)
                                                            + 8)
                                                + 1328)
                                    + 304);
  v8 = *(unsigned __int8 *)(v4 + 368);
  LOBYTE(v52) = v8;
  if (v6)
    *(_DWORD *)v6 += 2;
  v53 = v6;
  if (v8)
  {
    *(_QWORD *)v49 = 0;
  }
  else
  {
    WebCore::CSSCounterStyleRegistry::resolveReferencesIfNeeded(v7);
    WebCore::CSSCounterStyleRegistry::counterStyle((WebCore::CSSCounterStyle *)&v53, (uint64_t *)v7, (WebCore::CSSCounterStyleRegistry *)v49);
  }
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v9 = *(WebCore::CSSCounterStyle **)v49;
  v10 = *(WTF::StringImpl **)(*(_QWORD *)v49 + 72);
  if (v10)
    *(_DWORD *)v10 += 2;
  v11 = *((_QWORD *)this + 28);
  if (v11)
    v12 = *(_QWORD *)(v11 + 8);
  else
    v12 = 0;
  if (!*(_BYTE *)(v12 + 260))
  {
    WebCore::RenderListItem::updateValueNow((WebCore::RenderListItem *)v12);
    if (!*(_BYTE *)(v12 + 260))
    {
      std::__throw_bad_optional_access[abi:sn180100]();
LABEL_120:
      v34 = 0;
      goto LABEL_65;
    }
  }
  switch((unsigned __int16)*((_DWORD *)this + 31) >> 13)
  {
    case 1:
      v13 = 1;
      break;
    case 2:
    case 4:
      v13 = 2;
      break;
    case 3:
    case 5:
      v13 = 3;
      break;
    default:
      v13 = 0;
      break;
  }
  WebCore::CSSCounterStyle::text((uint64_t)v9, (void *)*(unsigned int *)(v12 + 256), v13, &v48);
  v14 = v48;
  if (v10)
    v15 = *((_DWORD *)v10 + 1);
  else
    v15 = 0;
  if (v48)
    v16 = *((_DWORD *)v48 + 1);
  else
    v16 = 0;
  if ((v16 | v15) < 0 || (v17 = (v15 + v16), __OFADD__(v15, v16)))
  {
    v52 = 0;
    goto LABEL_126;
  }
  if (v10)
  {
    v18 = *((_DWORD *)v10 + 4);
    v19 = (v18 >> 2) & 1;
    if (v48 && (v18 & 4) != 0)
      goto LABEL_29;
  }
  else
  {
    if (v48)
    {
LABEL_29:
      v19 = (*((unsigned __int8 *)v48 + 16) >> 2) & 1;
      goto LABEL_30;
    }
    v19 = 1;
  }
LABEL_30:
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v17, v19, (uint64_t)v10, (uint64_t)v48, &v52);
  if (!v52)
  {
LABEL_126:
    __break(0xC471u);
    JUMPOUT(0x196414DB8);
  }
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v20);
    else
      *(_DWORD *)v14 -= 2;
  }
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v20);
    else
      *(_DWORD *)v10 -= 2;
  }
  v21 = v52;
  if (v52)
    *(_DWORD *)v52 += 2;
  v22 = *((_QWORD *)v9 + 11);
  if (v22)
    *(_DWORD *)v22 += 2;
  if (v21)
    v23 = *((_DWORD *)v21 + 1);
  else
    v23 = 0;
  if (v22)
    v24 = *(_DWORD *)(v22 + 4);
  else
    v24 = 0;
  if ((v24 | v23) < 0 || (v25 = (v23 + v24), __OFADD__(v23, v24)))
  {
    v47 = 0;
    goto LABEL_128;
  }
  if (v21)
  {
    v26 = *((_DWORD *)v21 + 4);
    v27 = (v26 >> 2) & 1;
    if (v22 && (v26 & 4) != 0)
      goto LABEL_50;
  }
  else
  {
    if (v22)
    {
LABEL_50:
      v27 = (*(unsigned __int8 *)(v22 + 16) >> 2) & 1;
      goto LABEL_51;
    }
    v27 = 1;
  }
LABEL_51:
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v25, v27, (uint64_t)v21, v22, &v47);
  v29 = v47;
  if (!v47)
  {
LABEL_128:
    __break(0xC471u);
    JUMPOUT(0x196414DC4);
  }
  v47 = 0;
  v30 = (WTF::StringImpl *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = v29;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
    {
      WTF::StringImpl::destroy(v30, v28);
      v37 = v47;
      v47 = 0;
      if (v37)
      {
        if (*(_DWORD *)v37 == 2)
          WTF::StringImpl::destroy(v37, v28);
        else
          *(_DWORD *)v37 -= 2;
      }
    }
    else
    {
      *(_DWORD *)v30 -= 2;
      v47 = 0;
    }
  }
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v22, v28);
    else
      *(_DWORD *)v22 -= 2;
  }
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v28);
    else
      *(_DWORD *)v21 -= 2;
  }
  v31 = v52;
  if (v52)
  {
    v32 = *((_DWORD *)v52 + 1);
    *((_BYTE *)this + 208) = v32;
    if (v32)
    {
      v33 = (unsigned __int8 *)*((_QWORD *)v31 + 1);
      if ((*((_BYTE *)v31 + 16) & 4) != 0)
        v34 = *v33;
      else
        v34 = *(unsigned __int16 *)v33;
      goto LABEL_65;
    }
    goto LABEL_120;
  }
  v34 = 0;
  *((_BYTE *)this + 208) = 0;
LABEL_65:
  *((_BYTE *)this + 209) = MEMORY[0x19AEA858C](v34) != 1;
  result = (uint64_t)v52;
  v52 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  if (*(_DWORD *)v9 == 1)
  {
    WebCore::CSSCounterStyle::~CSSCounterStyle(v9, a2);
    result = WTF::fastFree(v35, v36);
  }
  else
  {
    --*(_DWORD *)v9;
  }
LABEL_70:
  v51 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      return WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  return result;
}

int *WebCore::RenderListMarker::updateMargins(WebCore::RenderListMarker *this, void *a2)
{
  char *v3;
  WTF *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  int isSquare;
  int v12;
  double v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;
  int *result;
  uint64_t v21;
  int v22;
  int v23;
  unsigned int v24;
  BOOL v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  WTF::StringImpl *v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;
  int v40;
  int v41;
  int v42;
  double v43;
  unsigned int v44;
  __int16 v45;
  char v46;
  WTF::StringImpl *v47;

  v3 = (char *)this + 80;
  v4 = WebCore::RenderStyle::metricsOfPrimaryFont((WebCore::RenderListMarker *)((char *)this + 80), a2);
  if (!*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 28) + 8) + 264) && (*((_BYTE *)this + 120) & 8) == 0)
  {
    v5 = *((_QWORD *)this + 27);
    if (v5 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 64))(v5) & 1) == 0)
    {
      if ((*((_BYTE *)this + 21) & 0x20) != 0)
        (*(void (**)(WebCore::RenderListMarker *))(*(_QWORD *)this + 1640))(this);
      v35 = *((_DWORD *)this + 46);
      if (v35 == 0x80000000)
        v36 = 0x7FFFFFFF;
      else
        v36 = -v35;
      v25 = __OFSUB__(v36, 448);
      v37 = v36 - 448;
      v17 = 448;
      if (v25)
        v14 = 0x80000000;
      else
        v14 = v37;
      goto LABEL_26;
    }
    v6 = *((_DWORD *)v4 + 11);
    v7 = *((_QWORD *)this + 13);
    v8 = *(unsigned __int8 *)(v7 + 368);
    LOBYTE(v44) = *(_BYTE *)(v7 + 368);
    v9 = *(WTF::StringImpl **)(v7 + 376);
    if (v9)
      *(_DWORD *)v9 += 2;
    v47 = v9;
    if (!v8 && ((MEMORY[0x19AEA53F4](v9, "circle", 6) & 1) != 0 || (MEMORY[0x19AEA53F4](v9, "disc", 4) & 1) != 0))
    {
      isSquare = 1;
    }
    else
    {
      isSquare = WebCore::ListStyleType::isSquare((WebCore::ListStyleType *)&v44);
      v9 = v47;
    }
    v47 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v10);
      else
        *(_DWORD *)v9 -= 2;
    }
    if (isSquare)
    {
      v12 = 2 * v6 / 3;
      v13 = (float)(-8 - v12) * 64.0;
      if (v13 >= 2147483650.0)
      {
        v14 = 0x7FFFFFFF;
      }
      else if (v13 <= -2147483650.0)
      {
        v14 = 0x80000000;
      }
      else
      {
        v14 = (int)v13;
      }
      if ((*((_BYTE *)this + 21) & 0x20) != 0)
        (*(void (**)(WebCore::RenderListMarker *))(*(_QWORD *)this + 1640))(this);
      v15 = *((_DWORD *)this + 46);
      if (v6 >= -50331661)
        v16 = (v12 << 6) + 512;
      else
        v16 = 0x80000000;
      if (v6 > 50331635)
        v16 = 0x7FFFFFFF;
      v17 = v16 - v15;
      if (__OFSUB__(v16, v15))
        v17 = (v16 >> 31) + 0x7FFFFFFF;
      goto LABEL_26;
    }
    v28 = *((_QWORD *)this + 13);
    v29 = *(unsigned __int8 *)(v28 + 368);
    v30 = *(WTF::StringImpl **)(v28 + 376);
    if (v30)
    {
      v31 = *(_DWORD *)v30;
      *(_DWORD *)v30 += 2;
      if (v31)
        *(_DWORD *)v30 = v31;
      else
        WTF::StringImpl::destroy(v30, v10);
    }
    if (v29 == 1)
    {
      v32 = *((_QWORD *)this + 25);
      if (v32 && *(_DWORD *)(v32 + 4))
      {
        if ((*((_BYTE *)this + 21) & 0x20) != 0)
          (*(void (**)(WebCore::RenderListMarker *))(*(_QWORD *)this + 1640))(this);
        v17 = 0;
        v33 = *((_DWORD *)this + 46);
        if (v33 == 0x80000000)
          v14 = 0x7FFFFFFF;
        else
          v14 = -v33;
        goto LABEL_26;
      }
LABEL_70:
      v17 = 0;
      v14 = 0;
      goto LABEL_26;
    }
    v34 = *((_QWORD *)this + 25);
    if (!v34 || !*(_DWORD *)(v34 + 4))
      goto LABEL_70;
    if ((*((_BYTE *)this + 21) & 0x20) != 0)
      (*(void (**)(WebCore::RenderListMarker *))(*(_QWORD *)this + 1640))(this);
    v38 = *((_DWORD *)this + 46);
    if (v38 == 0x80000000)
      v39 = 0x7FFFFFFF;
    else
      v39 = -v38;
    if (v6 >= -100663298)
      v40 = (v6 / 3) << 6;
    else
      v40 = 0x80000000;
    if (v6 > 100663295)
      v40 = 0x7FFFFFFF;
    v25 = __OFSUB__(v39, v40);
    v41 = v39 - v40;
    v42 = (v39 >> 31) + 0x7FFFFFFF;
    if (v25)
      v14 = v42;
    else
      v14 = v41;
    v43 = (float)(v6 / 3) * 64.0;
    if (v43 < 2147483650.0)
    {
      if (v43 <= -2147483650.0)
        v17 = 0x80000000;
      else
        v17 = (int)v43;
      goto LABEL_26;
    }
LABEL_106:
    v17 = 0x7FFFFFFF;
    goto LABEL_26;
  }
  v21 = *((_QWORD *)this + 27);
  if (v21 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v21 + 64))(v21))
  {
    v14 = 0;
    v17 = 448;
    goto LABEL_26;
  }
  if (!WebCore::RenderListMarker::widthUsesMetricsOfPrimaryFont((WebCore::RenderListMarker *)*(unsigned __int8 *)(*((_QWORD *)this + 13) + 368), *(WTF::StringImpl **)(*((_QWORD *)this + 13) + 376)))goto LABEL_70;
  v22 = *((_DWORD *)v4 + 11);
  if ((*((_BYTE *)this + 21) & 0x20) != 0)
    (*(void (**)(WebCore::RenderListMarker *))(*(_QWORD *)this + 1640))(this);
  v23 = *((_DWORD *)this + 46);
  v24 = v22 << 6;
  if (v22 < -33554432)
    v24 = 0x80000000;
  if (v22 > 0x1FFFFFF)
    v24 = 0x7FFFFFFF;
  v25 = __OFSUB__(v24, v23);
  v26 = v24 - v23;
  v27 = (v24 >> 31) + 0x7FFFFFFF;
  if (v25)
    v26 = v27;
  v14 = -64;
  v17 = v26 + 64;
  if (__OFADD__(v26, 64))
    goto LABEL_106;
LABEL_26:
  *(float *)&v44 = (float)v14 * 0.015625;
  v45 = 4;
  v46 = 1;
  v18 = *((_DWORD *)this + 30);
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
  {
    if ((v18 & 0x4000000) != 0)
      WebCore::RenderStyle::setMarginBottom((uint64_t)v3, (WebCore::Length *)&v44);
    else
      WebCore::RenderStyle::setMarginTop((uint64_t)v3, (WebCore::Length *)&v44);
  }
  else if ((v18 & 0x4000000) != 0)
  {
    WebCore::RenderStyle::setMarginRight((uint64_t)v3, (WebCore::Length *)&v44);
  }
  else
  {
    WebCore::RenderStyle::setMarginLeft((uint64_t)v3, (WebCore::Length *)&v44);
  }
  if (v45 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v44);
  }
  *(float *)&v44 = (float)v17 * 0.015625;
  v45 = 4;
  v46 = 1;
  v19 = *((_DWORD *)this + 30);
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
  {
    if ((v19 & 0x4000000) != 0)
      result = WebCore::RenderStyle::setMarginTop((uint64_t)v3, (WebCore::Length *)&v44);
    else
      result = WebCore::RenderStyle::setMarginBottom((uint64_t)v3, (WebCore::Length *)&v44);
  }
  else if ((v19 & 0x4000000) != 0)
  {
    result = WebCore::RenderStyle::setMarginLeft((uint64_t)v3, (WebCore::Length *)&v44);
  }
  else
  {
    result = WebCore::RenderStyle::setMarginRight((uint64_t)v3, (WebCore::Length *)&v44);
  }
  if (v45 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v44);
  }
  return result;
}

int *WebCore::RenderListMarker::computePreferredLogicalWidths(WebCore::RenderListMarker *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  int isSquare;
  WebCore::FontCascade *v12;
  unint64_t v13;
  int v14;
  int v15;
  double v16;
  int v17;
  uint64_t v19;
  WTF::StringImpl *v20;
  double v21;
  void *v22;
  double v23;
  float v24;
  int v25;
  int v26;
  double v27;
  int v28;
  int v29;
  _BYTE v30[8];
  WTF::StringImpl *v31;

  WebCore::RenderListMarker::updateContent(this, a2);
  v3 = *((_QWORD *)this + 27);
  if (!v3 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 64))(v3) & 1) != 0)
  {
    v4 = *((_QWORD *)this + 13);
    v5 = *((_QWORD *)this + 14);
    v6 = *(unsigned __int8 *)(v4 + 368);
    v30[0] = *(_BYTE *)(v4 + 368);
    v7 = *(WTF::StringImpl **)(v4 + 376);
    if (v7)
      *(_DWORD *)v7 += 2;
    v31 = v7;
    if (!v6 && ((MEMORY[0x19AEA53F4](v7, "circle", 6) & 1) != 0 || (MEMORY[0x19AEA53F4](v7, "disc", 4) & 1) != 0))
    {
      isSquare = 1;
    }
    else
    {
      isSquare = WebCore::ListStyleType::isSquare((WebCore::ListStyleType *)v30);
      v7 = v31;
    }
    v12 = (WebCore::FontCascade *)(v5 + 32);
    v31 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v8);
      else
        *(_DWORD *)v7 -= 2;
    }
    if (isSquare)
    {
      v13 = 2863311532 * *(_DWORD *)(WebCore::FontCascade::metricsOfPrimaryFont(v12, v8) + 44);
      v14 = HIDWORD(v13) + (v13 >> 63);
      if (v14 >= -1)
        v15 = v14 + 1;
      else
        v15 = v14 + 2;
      v16 = (float)((v15 >> 1) + 2) * 64.0;
      if (v16 >= 2147483650.0)
      {
        v17 = 0x7FFFFFFF;
      }
      else if (v16 <= -2147483650.0)
      {
        v17 = 0x80000000;
      }
      else
      {
        v17 = (int)v16;
      }
    }
    else
    {
      v19 = *((_QWORD *)this + 25);
      if (v19 && *(_DWORD *)(v19 + 4))
      {
        WebCore::RenderListMarker::textRun((WebCore::RenderListMarker *)v30, (uint64_t)this, v9, v10);
        v21 = WebCore::FontCascade::width((uint64_t)v12, (uint64_t)v30) * 64.0;
        if (v21 >= 2147483650.0)
        {
          v17 = 0x7FFFFFFF;
        }
        else if (v21 <= -2147483650.0)
        {
          v17 = 0x80000000;
        }
        else
        {
          v17 = (int)v21;
        }
        WebCore::RenderListMarker::TextRunWithUnderlyingString::~TextRunWithUnderlyingString((WebCore::RenderListMarker::TextRunWithUnderlyingString *)v30, v20);
      }
      else
      {
        v17 = 0;
      }
    }
    *((_DWORD *)this + 46) = v17;
    *((_DWORD *)this + 47) = v17;
    *((_DWORD *)this + 5) &= ~0x2000u;
    return WebCore::RenderListMarker::updateMargins(this, v8);
  }
  else
  {
    v23 = (*(float (**)(_QWORD, WebCore::RenderListMarker *, float))(**((_QWORD **)this + 27) + 120))(*((_QWORD *)this + 27), this, *(float *)(*((_QWORD *)this + 13) + 184))* 64.0;
    if (v23 > -2147483650.0)
      v25 = (int)v23;
    else
      v25 = 0x80000000;
    if (v23 < 2147483650.0)
      v26 = v25;
    else
      v26 = 0x7FFFFFFF;
    v27 = v24 * 64.0;
    if (v27 >= 2147483650.0)
    {
      v28 = 0x7FFFFFFF;
    }
    else if (v27 <= -2147483650.0)
    {
      v28 = 0x80000000;
    }
    else
    {
      v28 = (int)v27;
    }
    v29 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
    if ((v29 - 2) < 2 || v29 == 4 || v29 == 5)
      v26 = v28;
    *((_DWORD *)this + 46) = v26;
    *((_DWORD *)this + 47) = v26;
    *((_DWORD *)this + 5) &= ~0x2000u;
    return WebCore::RenderListMarker::updateMargins(this, v22);
  }
}

uint64_t WebCore::RenderListMarker::widthUsesMetricsOfPrimaryFont(WebCore::RenderListMarker *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  uint64_t isSquare;
  _BYTE v6[8];
  WTF::StringImpl *v7;

  v2 = a2;
  v6[0] = (_BYTE)this;
  if (a2)
    *(_DWORD *)a2 += 2;
  v7 = a2;
  if (!(_BYTE)this
    && ((MEMORY[0x19AEA53F4](a2, "circle", 6) & 1) != 0 || (MEMORY[0x19AEA53F4](v2, "disc", 4) & 1) != 0))
  {
    isSquare = 1;
  }
  else
  {
    isSquare = WebCore::ListStyleType::isSquare((WebCore::ListStyleType *)v6);
    v2 = v7;
  }
  v7 = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, v3);
    else
      *(_DWORD *)v2 -= 2;
  }
  return isSquare;
}

uint64_t WebCore::RenderListMarker::isInside(WebCore::RenderListMarker *this)
{
  if (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 28) + 8) + 264))
    return 1;
  else
    return (*((unsigned __int8 *)this + 120) >> 3) & 1;
}

uint64_t WebCore::RenderListMarker::lineHeight(uint64_t a1, WTF::StringImpl *a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  WebCore::RenderElement *v5;
  char *LineStyle;
  float v7;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  BOOL v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v23;
  uint64_t v24;

  v3 = *(_QWORD *)(a1 + 216);
  if (!v3
    || (v24 = a1,
        v23 = a2,
        v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 64))(v3),
        a2 = (WTF::StringImpl *)v23,
        v10 = v9,
        a1 = v24,
        v10))
  {
    v4 = *(_QWORD *)(a1 + 224);
    if (v4)
    {
      v5 = *(WebCore::RenderElement **)(v4 + 8);
      if (!(_DWORD)a2)
      {
LABEL_4:
        LineStyle = (char *)v5 + 80;
        goto LABEL_5;
      }
    }
    else
    {
      v5 = 0;
      if (!(_DWORD)a2)
        goto LABEL_4;
    }
    LineStyle = WebCore::RenderElement::firstLineStyle(v5, a2);
LABEL_5:
    v7 = ceilf(WebCore::RenderStyle::computedLineHeight((WebCore::RenderStyle *)LineStyle, a2) * 64.0);
    if (v7 >= 2147500000.0)
      return 0x7FFFFFFFLL;
    if (v7 <= -2147500000.0)
      return 0x80000000;
    return (int)v7;
  }
  if ((*(_BYTE *)(v24 + 20) & 2) == 0)
    return 0;
  if (a3)
  {
    v11 = *(_DWORD *)(v24 + 160);
    v12 = *(_DWORD *)(v24 + 172);
    v13 = __OFADD__(v12, v11);
    v14 = v12 + v11;
    v15 = (v12 >> 31) + 0x7FFFFFFF;
    if (v13)
      v14 = v15;
    v16 = *(_DWORD *)(v24 + 180);
  }
  else
  {
    v17 = *(_DWORD *)(v24 + 164);
    v18 = *(_DWORD *)(v24 + 168);
    v13 = __OFADD__(v18, v17);
    v14 = v18 + v17;
    v19 = (v18 >> 31) + 0x7FFFFFFF;
    if (v13)
      v14 = v19;
    v16 = *(_DWORD *)(v24 + 176);
  }
  v13 = __OFADD__(v14, v16);
  v20 = v14 + v16;
  v21 = (v14 >> 31) + 0x7FFFFFFF;
  if (v13)
    return v21;
  else
    return v20;
}

uint64_t WebCore::RenderListMarker::baselinePosition(uint64_t a1, WTF::StringImpl *a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  WebCore::RenderElement *v6;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;

  v4 = *(_QWORD *)(a1 + 216);
  if (v4)
  {
    v13 = a1;
    v12 = a4;
    v10 = a3;
    v11 = a2;
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 64))(v4);
    a3 = v10;
    a2 = (WTF::StringImpl *)v11;
    a4 = v12;
    v9 = v8;
    a1 = v13;
    if (!v9)
      return WebCore::RenderBox::baselinePosition(v13, v11, v10, v12);
  }
  v5 = *(_QWORD *)(a1 + 224);
  if (v5)
    v6 = *(WebCore::RenderElement **)(v5 + 8);
  else
    v6 = 0;
  return WebCore::RenderBlock::baselinePosition(v6, a2, a3, a4, 1);
}

uint64_t WebCore::RenderListMarker::selectionRectForRepaint(WebCore::RenderListMarker *this, const WebCore::RenderLayerModelObject *a2)
{
  return 0;
}

int *WebCore::RenderMarquee::timerFired(int *this)
{
  uint64_t v1;
  uint64_t v2;
  WebCore::ScrollableArea *v3;
  int v4;
  unint64_t v5;
  int *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  WebCore::RenderBox *v12;
  int v13;
  int v14;
  WebCore::RenderBox *v15;
  int v16;
  float *v17;
  int v18;
  float v19;
  int v20;
  float v21;
  double v22;
  int v23;
  int v24;
  unint64_t v25;
  int v26;
  int v27;
  BOOL v28;
  int v29;
  int v30;
  int v31;
  unint64_t v32;
  int v33;
  int v34;
  __int128 v35;
  int v36;
  int v37;

  v1 = *(_QWORD *)(*(_QWORD *)this + 32);
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 24) + 8) + 40) + 8) + 1944)
                 + 20) & 0xF8) == 0)
  {
    v2 = (uint64_t)this;
    v3 = *(WebCore::ScrollableArea **)(*(_QWORD *)this + 264);
    if (*((_BYTE *)this + 93))
    {
      *((_BYTE *)this + 93) = 0;
      if (WebCore::RenderMarquee::direction((WebCore::RenderMarquee *)this) == 1
        || WebCore::RenderMarquee::direction((WebCore::RenderMarquee *)v2) == 2)
      {
        v4 = *(_DWORD *)(v2 + 72);
        v5 = ((*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)v3 + 416))(v3)
            + ((unint64_t)*((unsigned int *)v3 + 9) << 32)) >> 32;
        v36 = v4;
        v37 = v5;
      }
      else
      {
        v11 = *(_DWORD *)(v2 + 72);
        v36 = *((_DWORD *)v3 + 8) + (*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)v3 + 416))(v3);
        v37 = v11;
      }
    }
    else
    {
      v6 = this + 19;
      v7 = this[19];
      v33 = 0;
      v34 = v7;
      v8 = this[18];
      v9 = v7 - v8;
      if (v7 != v8)
      {
        v10 = WebCore::RenderMarquee::direction((WebCore::RenderMarquee *)this) == 3
           || WebCore::RenderMarquee::direction((WebCore::RenderMarquee *)v2) == 1;
        if ((~*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 88) + 40) + 64) + 20) & 3) == 0
          && (*(_BYTE *)(v2 + 64) & 1) != 0)
        {
          v7 = *(_DWORD *)(v2 + 72);
          v34 = v7;
          v9 = -v9;
          v10 ^= 1u;
        }
        if (WebCore::RenderMarquee::direction((WebCore::RenderMarquee *)v2) == 1
          || WebCore::RenderMarquee::direction((WebCore::RenderMarquee *)v2) == 2)
        {
          if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)v2 + 32) + 45) & 4) != 0)
            v12 = *(WebCore::RenderBox **)(*(_QWORD *)v2 + 32);
          else
            v12 = 0;
          v13 = WebCore::RenderBox::clientWidth(v12);
        }
        else
        {
          if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)v2 + 32) + 45) & 4) != 0)
            v15 = *(WebCore::RenderBox **)(*(_QWORD *)v2 + 32);
          else
            v15 = 0;
          v13 = WebCore::RenderBox::clientHeight(v15);
        }
        v16 = ((int)(v13 - (v14 & 0xFFFFFFC0) + 32) >> 6) + v13 / 64;
        v17 = *(float **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 32) + 88) + 40) + 64);
        v18 = v16 << 6;
        if (v16 < -33554432)
          v18 = 0x80000000;
        if (v16 > 0x1FFFFFF)
          v18 = 0x7FFFFFFF;
        if (*((_BYTE *)v17 + 8) == 4)
        {
          v19 = v17[1];
          if (!*((_BYTE *)v17 + 10))
            v19 = (float)SLODWORD(v19);
LABEL_36:
          v22 = v19 * 64.0;
          if (v22 >= 2147483650.0)
          {
            v20 = 0x7FFFFFFF;
          }
          else if (v22 <= -2147483650.0)
          {
            v20 = 0x80000000;
          }
          else
          {
            v20 = (int)v22;
          }
        }
        else
        {
          v20 = 0;
          switch(*((_BYTE *)v17 + 8))
          {
            case 0:
            case 1:
            case 9:
              v20 = v18;
              break;
            case 3:
              v21 = v17[1];
              if (!*((_BYTE *)v17 + 10))
                v21 = (float)SLODWORD(v21);
              v19 = (float)((float)((float)v18 * 0.015625) * v21) / 100.0;
              goto LABEL_36;
            case 0xB:
              WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v17 + 1), (float)v18 * 0.015625);
              goto LABEL_36;
            default:
              break;
          }
        }
        v23 = v20 / 64;
        if (v23 >= 0)
          v24 = v23;
        else
          v24 = -v23;
        if (WebCore::RenderMarquee::direction((WebCore::RenderMarquee *)v2) == 1
          || WebCore::RenderMarquee::direction((WebCore::RenderMarquee *)v2) == 2)
        {
          LODWORD(v25) = *((_DWORD *)v3 + 8)
                       + (*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)v3 + 416))(v3);
        }
        else
        {
          v25 = ((*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)v3 + 416))(v3)
               + ((unint64_t)*((unsigned int *)v3 + 9) << 32)) >> 32;
        }
        if (v10)
          v26 = v24;
        else
          v26 = -v24;
        v27 = v26 + v25;
        v33 = v27;
        if (v9 < 1)
          v28 = v27 < v7;
        else
          v28 = v7 < v27;
        v6 = &v33;
        if (v28)
          v6 = &v34;
      }
      v29 = *v6;
      if (*v6 == v7)
      {
        v30 = *(_DWORD *)(v2 + 68);
        v31 = *(_DWORD *)(v2 + 64) + 1;
        *(_DWORD *)(v2 + 64) = v31;
        if (v30 < 1 || v31 < v30)
        {
          if ((~*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 88) + 40) + 64) + 20) & 3) != 0)
            *(_BYTE *)(v2 + 93) = 1;
        }
        else if ((*(_QWORD *)(v2 + 40) & 0xFFFFFFFFFFFFLL) != 0)
        {
          WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v2 + 8));
        }
      }
      if (WebCore::RenderMarquee::direction((WebCore::RenderMarquee *)v2) == 1
        || WebCore::RenderMarquee::direction((WebCore::RenderMarquee *)v2) == 2)
      {
        v32 = ((*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)v3 + 416))(v3)
             + ((unint64_t)*((unsigned int *)v3 + 9) << 32)) >> 32;
        v36 = v29;
        v37 = v32;
      }
      else
      {
        v36 = *((_DWORD *)v3 + 8) + (*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)v3 + 416))(v3);
        v37 = v29;
      }
    }
    v35 = xmmword_1969FCD40;
    return (int *)WebCore::RenderLayerScrollableArea::scrollToOffset(v3, (WebCore::IntPoint *)&v36, &v35);
  }
  return this;
}

WebCore::RenderMarquee *WebCore::RenderMarquee::RenderMarquee(WebCore::RenderMarquee *this, WebCore::RenderLayer *a2)
{
  unint64_t StatusReg;
  unsigned int *v5;
  unsigned int v6;
  _QWORD *v7;

  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  v5 = *(unsigned int **)(StatusReg + 736);
  if (!v5)
    v5 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  *((_QWORD *)this + 6) = v5;
  *((_QWORD *)this + 1) = off_1E31F7378;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v7 = off_1E342DC18;
  v7[1] = WebCore::RenderMarquee::timerFired;
  v7[2] = 0;
  v7[3] = this;
  *((_QWORD *)this + 7) = v7;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *(_DWORD *)((char *)this + 87) = 0;
  *((_DWORD *)this + 23) = 0;
  *(_BYTE *)(*((_QWORD *)a2 + 33) + 40) = 0;
  return this;
}

uint64_t WebCore::RenderMarquee::direction(WebCore::RenderMarquee *this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  char v6;
  unsigned __int8 v7;
  float v8;
  void *v10;
  int v11;
  unsigned __int8 v12;
  char v13;
  char v14;

  v1 = *(_QWORD *)(*(_QWORD *)this + 32);
  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 88) + 40) + 64);
  v3 = *(_DWORD *)(v1 + 120);
  v4 = (*(unsigned __int8 *)(v2 + 20) >> 2) & 7;
  if (!v4)
    v4 = 6;
  if ((v3 & 0x4000000) != 0)
    v5 = 1;
  else
    v5 = 2;
  if ((v3 & 0x4000000) != 0)
    v6 = 2;
  else
    v6 = 1;
  if (v4 == 5)
    v4 = v5;
  if (v4 == 6)
    v7 = v6;
  else
    v7 = v4;
  v14 = 0;
  v12 = *(_BYTE *)(v2 + 8);
  v13 = *(_BYTE *)(v2 + 9);
  if (v12 - 2 >= 9)
  {
    if (v12 == 11)
    {
      v10 = (void *)*(unsigned int *)(v2 + 4);
      v11 = *(_DWORD *)(v2 + 4);
      WebCore::Length::ref(&v11);
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v10);
    }
  }
  else
  {
    v8 = *(float *)(v2 + 4);
    if (*(_BYTE *)(v2 + 10))
    {
      if (v8 >= 0.0)
        return v7;
    }
    else if ((LODWORD(v8) & 0x80000000) == 0)
    {
      return v7;
    }
    if (v7 >= 5u)
      return 0;
    else
      return (0x304010200uLL >> (8 * (v7 & 0x1Fu)));
  }
  return v7;
}

uint64_t WebCore::RenderMarquee::isHorizontal(WebCore::RenderMarquee *this)
{
  uint64_t result;

  result = WebCore::RenderMarquee::direction(this);
  if ((_DWORD)result != 1)
    return WebCore::RenderMarquee::direction(this) == 2;
  return result;
}

uint64_t WebCore::RenderMarquee::computePosition(WebCore::RenderMarquee *a1, int a2, int a3)
{
  uint64_t *v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  int v25;
  BOOL v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;

  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)a1 + 32) + 45) & 4) != 0)
    v6 = *(uint64_t **)(*(_QWORD *)a1 + 32);
  else
    v6 = 0;
  if (WebCore::RenderMarquee::direction(a1) == 1
    || WebCore::RenderMarquee::direction(a1) == 2)
  {
    v7 = *((_DWORD *)v6 + 30);
    v8 = WebCore::RenderBox::clientWidth((WebCore::RenderBox *)v6);
    v9 = *v6;
    if ((v7 & 0x4000000) != 0)
    {
      v18 = (*(uint64_t (**)(uint64_t *))(v9 + 408))(v6);
      v19 = *((_DWORD *)v6 + 40);
      v14 = __OFSUB__(v19, v18);
      v20 = v19 - v18;
      v21 = (v19 >> 31) + 0x7FFFFFFF;
      if (v14)
        v22 = v21;
      else
        v22 = v20;
      v23 = (*(uint64_t (**)(uint64_t *))(*v6 + 944))(v6);
      v24 = (*(uint64_t (**)(uint64_t *))(*v6 + 1024))(v6);
      v25 = v23 - v24;
      if (__OFSUB__(v23, v24))
        v25 = (v23 >> 31) + 0x7FFFFFFF;
      v26 = __OFADD__(v22, v25);
      v15 = v22 + v25;
      if (v26)
        v17 = (v22 >> 31) + 0x7FFFFFFF;
      else
        v17 = v15;
      if (v26)
        v15 = (v22 >> 31) + 0x7FFFFFFF;
      v16 = v8;
    }
    else
    {
      v10 = (*(uint64_t (**)(uint64_t *))(v9 + 416))(v6);
      v11 = (*(uint64_t (**)(uint64_t *))(*v6 + 952))(v6);
      v12 = (*(uint64_t (**)(uint64_t *))(*v6 + 1016))(v6);
      v13 = v11 - v12;
      if (__OFSUB__(v11, v12))
        v13 = (v11 >> 31) + 0x7FFFFFFF;
      v14 = __OFADD__(v10, v13);
      v15 = v10 + v13;
      if (v14)
        v16 = (v10 >> 31) + 0x7FFFFFFF;
      else
        v16 = v15;
      if (v14)
        v15 = (v10 >> 31) + 0x7FFFFFFF;
      v17 = v8;
    }
    if (a2 == 2)
    {
      if (a3)
      {
        v27 = v8 - v15;
        if (__OFSUB__(v8, v15))
          v27 = (v8 >> 31) + 0x7FFFFFFF;
        v14 = __OFSUB__(v15, v8);
        v28 = v15 - v8;
        v29 = (v15 >> 31) + 0x7FFFFFFF;
        if (!v14)
          v29 = v28;
        if ((v7 & 0x4000000) != 0)
          v29 = v27;
        return (v29 & ~(v29 >> 31)) >> 6;
      }
      else
      {
        return (v16 / 64);
      }
    }
    else if (a3)
    {
      v31 = v8 - v15;
      if (__OFSUB__(v8, v15))
        v31 = (v8 >> 31) + 0x7FFFFFFF;
      v14 = __OFSUB__(v15, v8);
      v32 = v15 - v8;
      v33 = (v15 >> 31) + 0x7FFFFFFF;
      if (!v14)
        v33 = v32;
      if ((v7 & 0x4000000) != 0)
        v33 = v31;
      return -(-(v33 & (v33 >> 31)) >> 6);
    }
    else if (v17 == 0x80000000)
    {
      return 0x1FFFFFFLL;
    }
    else
    {
      return (v17 / -64);
    }
  }
  else
  {
    v34 = v6[24];
    if (v34)
    {
      v35 = *(_QWORD *)(v34 + 4);
      v36 = *(_QWORD *)(v34 + 12);
    }
    else
    {
      v35 = WebCore::RenderBox::flippedClientBoxRect((WebCore::RenderBox *)v6);
    }
    if (__OFADD__(HIDWORD(v35), HIDWORD(v36)))
      v37 = (HIDWORD(v35) >> 31) + 0x7FFFFFFF;
    else
      v37 = HIDWORD(v35) + HIDWORD(v36);
    v38 = (*(uint64_t (**)(uint64_t *))(*v6 + 1000))(v6);
    if (__OFSUB__(v37, v38))
      v39 = (v37 >> 31) + 0x7FFFFFFF;
    else
      v39 = v37 - v38;
    v40 = (*(uint64_t (**)(uint64_t *))(*v6 + 936))(v6);
    v41 = v39 + v40;
    if (__OFADD__(v39, v40))
      v41 = (v39 >> 31) + 0x7FFFFFFF;
    v30 = (v41 / 64);
    v42 = WebCore::RenderBox::clientHeight((WebCore::RenderBox *)v6);
    v44 = ((int)(v42 - (v43 & 0xFFFFFFC0) + 32) >> 6) + v42 / 64;
    if (a2 == 3)
    {
      if (a3)
        return ((_DWORD)v30 - v44) & (((int)v30 - v44) >> 31);
      return -v44;
    }
    else if (a3)
    {
      return ((_DWORD)v30 - v44) & ~(((int)v30 - v44) >> 31);
    }
  }
  return v30;
}

WebCore::RenderMarquee *WebCore::RenderMarquee::start(WebCore::RenderMarquee *this)
{
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  WebCore::ScrollableArea *v4;
  double v5;
  double v6;
  int v7;
  int v8;
  int v9;
  __int128 v10;

  v1 = (uint64_t)this;
  if ((*((_QWORD *)this + 5) & 0xFFFFFFFFFFFFLL) == 0
    || *(double *)((*((_QWORD *)this + 5) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
  {
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 32) + 88) + 40) + 64);
    if (*(_BYTE *)(v2 + 8))
      v3 = *(_BYTE *)(v2 + 8) == 11;
    else
      v3 = 1;
    if (!v3)
    {
      if (*(_BYTE *)(v2 + 10))
      {
        if (*(float *)(v2 + 4) == 0.0)
          return this;
      }
      else if (!*(_DWORD *)(v2 + 4))
      {
        return this;
      }
    }
    v4 = *(WebCore::ScrollableArea **)(*(_QWORD *)this + 264);
    v10 = xmmword_1969FCD40;
    if (*((_BYTE *)this + 94) || *((_BYTE *)this + 95))
    {
      *((_WORD *)this + 47) = 0;
    }
    else
    {
      if (WebCore::RenderMarquee::direction(this) == 1
        || WebCore::RenderMarquee::direction((WebCore::RenderMarquee *)v1) == 2)
      {
        v8 = *(_DWORD *)(v1 + 72);
        v9 = 0;
      }
      else
      {
        v7 = *(_DWORD *)(v1 + 72);
        v8 = 0;
        v9 = v7;
      }
      this = (WebCore::RenderMarquee *)WebCore::RenderLayerScrollableArea::scrollToOffset(v4, (WebCore::IntPoint *)&v8, &v10);
    }
    v5 = (double)*(int *)(v1 + 80) * 0.001;
    *(double *)(v1 + 32) = v5;
    WTF::MonotonicTime::now(this);
    return (WebCore::RenderMarquee *)WebCore::TimerBase::setNextFireTime(v1 + 8, v5 + v6);
  }
  return this;
}

WebCore::RenderMarquee *WebCore::RenderMarquee::updateMarqueePosition(WebCore::RenderMarquee *this)
{
  WebCore::RenderMarquee *v1;
  int v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  unint64_t v6;

  v1 = this;
  v2 = *((_DWORD *)this + 17);
  if (v2 < 1 || *((_DWORD *)this + 16) < v2)
  {
    v3 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 32) + 88) + 40)
                                        + 64)
                            + 20);
    v4 = WebCore::RenderMarquee::direction(this);
    *((_DWORD *)v1 + 18) = WebCore::RenderMarquee::computePosition(v1, v4, (~v3 & 3) == 0);
    v5 = WebCore::RenderMarquee::direction(v1);
    v6 = 0x304010200uLL >> (8 * v5);
    if (v5 >= 5)
      LOBYTE(v6) = 0;
    this = (WebCore::RenderMarquee *)WebCore::RenderMarquee::computePosition(v1, v6 & 7, (v3 >> 1) & 1);
    *((_DWORD *)v1 + 19) = (_DWORD)this;
    if (!*((_BYTE *)v1 + 95))
      return WebCore::RenderMarquee::start(v1);
  }
  return this;
}

void WebCore::RenderMarquee::updateMarqueeStyle(WebCore::RenderMarquee *this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  char v5;
  uint64_t v6;
  BOOL v7;
  int v8;
  int v9;
  uint64_t v10;
  __int16 v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  WebCore::RenderElement *v27;
  uint64_t v28;
  int v29;
  char *v30;
  double v31;
  WebCore::RenderMarquee *v32;
  double v33;

  v1 = *(_QWORD *)(*(_QWORD *)this + 32);
  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 88) + 40) + 64);
  if (*((_BYTE *)this + 92) == ((*(unsigned __int8 *)(v2 + 20) >> 2) & 7))
  {
    v3 = *((_DWORD *)this + 17);
    v4 = *(_DWORD *)(v2 + 16);
    if (v3 == v4)
      goto LABEL_8;
    v7 = *((_DWORD *)this + 16) < v3;
    v3 = *(_DWORD *)(v2 + 16);
    if (v7)
      goto LABEL_8;
  }
  else
  {
    v4 = *(_DWORD *)(v2 + 16);
  }
  *((_DWORD *)this + 16) = 0;
  v3 = v4;
LABEL_8:
  *((_DWORD *)this + 17) = v3;
  *((_BYTE *)this + 92) = (*(_BYTE *)(v2 + 20) >> 2) & 7;
  v5 = *(_BYTE *)(v1 + 45);
  if ((v5 & 1) == 0)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(v1 + 24) + 8);
    if (v6)
    {
      if (v1 == (*(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL) && (*(_WORD *)(v6 + 28) & 0x10) != 0)
      {
        v7 = *(_QWORD *)(*(_QWORD *)(v6 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::marqueeTag + 24) && v3 <= 0;
        if (v7 && (*(_BYTE *)(v2 + 20) & 3) == 2)
        {
          v3 = 1;
          *((_DWORD *)this + 17) = 1;
          v5 = *(_BYTE *)(v1 + 45);
        }
      }
    }
  }
  v8 = *((_DWORD *)this + 20);
  v9 = *(_DWORD *)(v2 + 12);
  if ((v5 & 1) != 0 || (v10 = *(_QWORD *)(*(_QWORD *)(v1 + 24) + 8)) == 0)
  {
    if (v8 == v9)
      goto LABEL_59;
    goto LABEL_58;
  }
  v11 = *(_WORD *)(v10 + 28);
  if ((v11 & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196416720);
  }
  v12 = v9;
  if ((v11 & 0x10) != 0)
  {
    v12 = v9;
    if (*(_QWORD *)(*(_QWORD *)(v10 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::marqueeTag + 24))
    {
      v13 = *(_QWORD *)(v10 + 104);
      if (v13)
      {
        v14 = *(_DWORD *)(v13 + 4);
        if ((v14 & 1) == 0)
        {
          v15 = (uint64_t *)(v13 + 32);
          LODWORD(v16) = v14 >> 5;
          if (!(_DWORD)v16)
            goto LABEL_36;
LABEL_29:
          v16 = v16;
          while (1)
          {
            v17 = *v15;
            if (*v15 == WebCore::HTMLNames::truespeedAttr
              || *(_QWORD *)(v17 + 24) == *(_QWORD *)(WebCore::HTMLNames::truespeedAttr + 24)
              && *(_QWORD *)(v17 + 32) == *(_QWORD *)(WebCore::HTMLNames::truespeedAttr + 32))
            {
              break;
            }
            v15 += 2;
            if (!--v16)
              goto LABEL_36;
          }
          v12 = 16;
          goto LABEL_37;
        }
        v15 = *(uint64_t **)(v13 + 40);
        LODWORD(v16) = *(_DWORD *)(v13 + 52);
        if ((_DWORD)v16)
          goto LABEL_29;
      }
LABEL_36:
      v12 = 60;
LABEL_37:
      if (v9 > v12)
        v12 = v9;
    }
  }
  if (v8 == v12)
    goto LABEL_59;
  v18 = *(_WORD *)(v10 + 28);
  if ((v18 & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196416740);
  }
  if ((v18 & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v10 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::marqueeTag + 24))
  {
    v19 = *(_QWORD *)(v10 + 104);
    if (v19)
    {
      v20 = *(_DWORD *)(v19 + 4);
      if ((v20 & 1) == 0)
      {
        v21 = (uint64_t *)(v19 + 32);
        LODWORD(v22) = v20 >> 5;
        if (!(_DWORD)v22)
          goto LABEL_55;
LABEL_48:
        v22 = v22;
        while (1)
        {
          v23 = *v21;
          if (*v21 == WebCore::HTMLNames::truespeedAttr
            || *(_QWORD *)(v23 + 24) == *(_QWORD *)(WebCore::HTMLNames::truespeedAttr + 24)
            && *(_QWORD *)(v23 + 32) == *(_QWORD *)(WebCore::HTMLNames::truespeedAttr + 32))
          {
            break;
          }
          v21 += 2;
          if (!--v22)
            goto LABEL_55;
        }
        v24 = 16;
        goto LABEL_56;
      }
      v21 = *(uint64_t **)(v19 + 40);
      LODWORD(v22) = *(_DWORD *)(v19 + 52);
      if ((_DWORD)v22)
        goto LABEL_48;
    }
LABEL_55:
    v24 = 60;
LABEL_56:
    if (v9 <= v24)
      v9 = v24;
  }
LABEL_58:
  *((_DWORD *)this + 20) = v9;
  if ((*((_QWORD *)this + 5) & 0xFFFFFFFFFFFFLL) != 0
    && *(double *)((*((_QWORD *)this + 5) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
  {
    v30 = (char *)this + 8;
    v31 = (double)v9 * 0.001;
    *((double *)this + 4) = v31;
    v32 = this;
    WTF::MonotonicTime::now(this);
    WebCore::TimerBase::setNextFireTime((uint64_t)v30, v31 + v33);
    this = v32;
    v3 = *((_DWORD *)v32 + 17);
  }
LABEL_59:
  if (v3 >= 1 && *((_DWORD *)this + 16) >= v3)
  {
    if ((*((_QWORD *)this + 5) & 0xFFFFFFFFFFFFLL) != 0
      && *(double *)((*((_QWORD *)this + 5) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
    {
      WebCore::TimerBase::stopSlowCase((WebCore::RenderMarquee *)((char *)this + 8));
    }
  }
  else if ((*((_QWORD *)this + 5) & 0xFFFFFFFFFFFFLL) == 0
         || *(double *)((*((_QWORD *)this + 5) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
  {
    v25 = *(_QWORD *)(*(_QWORD *)this + 32);
    v26 = *(_DWORD *)(v25 + 20);
    if ((v26 & 8) == 0)
    {
      *(_DWORD *)(v25 + 20) = v26 | 8;
      v27 = WebCore::RenderObject::markContainingBlocksForLayout((WebCore::RenderObject *)v25, 0);
      WebCore::RenderObject::scheduleLayout((WebCore::RenderObject *)v25, v27);
      if ((*(_BYTE *)(v25 + 21) & 0x80) != 0)
      {
        if ((*(_BYTE *)(v25 + 45) & 0x10) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x196416760);
        }
        v28 = *(_QWORD *)(v25 + 144);
        if (v28)
        {
          v29 = *(_DWORD *)(v28 + 8) + 1;
          *(_DWORD *)(v28 + 8) = v29;
        }
        else
        {
          v29 = MEMORY[8];
        }
        *(_QWORD *)(v28 + 24) = *(_QWORD *)(v28 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
        if (!v29)
        {
          __break(0xC471u);
          JUMPOUT(0x19641678CLL);
        }
        *(_DWORD *)(v28 + 8) = v29 - 1;
      }
    }
  }
}

void WebCore::RenderMedia::~RenderMedia(WebCore::RenderMedia *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF *v5;

  *(_QWORD *)this = off_1E34280E8;
  v3 = *((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  *(_QWORD *)this = off_1E34201A0;
  v5 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 1)
      WTF::fastFree(v5, a2);
    else
      --*(_DWORD *)v5;
  }
  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
}

{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF *v5;
  void *v6;

  *(_QWORD *)this = off_1E34280E8;
  v3 = *((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  *(_QWORD *)this = off_1E34201A0;
  v5 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 1)
      WTF::fastFree(v5, a2);
    else
      --*(_DWORD *)v5;
  }
  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
  if (*((_DWORD *)this + 4))
  {
    *((_OWORD *)this + 13) = 0u;
    *((_OWORD *)this + 14) = 0u;
    *((_OWORD *)this + 11) = 0u;
    *((_OWORD *)this + 12) = 0u;
    *((_OWORD *)this + 9) = 0u;
    *((_OWORD *)this + 10) = 0u;
    *((_OWORD *)this + 7) = 0u;
    *((_OWORD *)this + 8) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 1) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *(_OWORD *)this = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(this, v6);
  }
}

uint64_t WebCore::RenderMedia::layout(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  WebCore::HTMLMediaElement *v5;
  uint64_t v6;

  v1 = this;
  v2 = *(_QWORD *)(this + 160);
  if ((*(_DWORD *)(this + 20) & 0xF8) != 0x80 || *(_BYTE *)(this + 234) || *(_BYTE *)(this + 235))
  {
    WebCore::RenderBox::contentBoxRect((WebCore::RenderBox *)this);
    v6 = v4;
    WebCore::RenderReplaced::layout((WebCore::RenderReplaced *)v1);
    this = (uint64_t)WebCore::RenderImage::updateInnerContentRect((WebCore::RenderImage *)v1);
    if (*(_BYTE *)(v1 + 234) || *(_BYTE *)(v1 + 235))
      this = WebCore::RenderImage::layoutShadowContent(v1, (const WebCore::LayoutSize *)&v6);
    if (v2 != *(_QWORD *)(v1 + 160))
    {
      v5 = *(WebCore::HTMLMediaElement **)(*(_QWORD *)(v1 + 24) + 8);
      if ((*((_WORD *)v5 + 14) & 8) == 0
        || ((*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)v5 + 824))(v5) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x196416AC0);
      }
      return WebCore::HTMLMediaElement::layoutSizeChanged(v5);
    }
  }
  else
  {
    v3 = *(_DWORD *)(this + 20) & 0xFFDFFDFF | 0x200;
    *(_DWORD *)(this + 20) = v3;
    if ((*(_BYTE *)(this + 45) & 2) == 0)
    {
      *(_WORD *)(this + 69) &= ~1u;
      *(_WORD *)(this + 76) = *(_WORD *)(this + 76) & 0xF | (16
                                                           * *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 24) + 8) + 40) + 8)
                                                                                              + 1944)
                                                                                  + 248)
                                                                      + 472));
    }
    *(_DWORD *)(this + 20) = v3 & 0xFFDFFE07;
  }
  return this;
}

void WebCore::RenderMedia::styleDidChange(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  int v5;
  int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t (**v11)();
  uint64_t (**v12)();

  WebCore::RenderImage::styleDidChange((WebCore::RenderImage *)a1, a2, a3);
  if (!a3
    || ((*(_BYTE *)(*(_QWORD *)(a1 + 104) + 239) & 4) != 0 ? (v5 = 1) : (v5 = (*(_DWORD *)(a1 + 120) >> 4) & 3),
        (*(_BYTE *)(*(_QWORD *)(a3 + 24) + 239) & 4) != 0 ? (v6 = 1) : (v6 = (*(_DWORD *)(a3 + 40) >> 4) & 3),
        v5 != v6))
  {
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
    if ((*(_WORD *)(v7 + 28) & 8) != 0 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 824))(v7) & 1) != 0)
    {
      v8 = **(unsigned int ***)(v7 + 808);
      if (!v8 || (v9 = atomic_load(v8), v9 == 1))
      {
        v10 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v10 = off_1E33C5E68;
        *(_QWORD *)(v10 + 8) = v7;
        v12 = (uint64_t (**)())v10;
        WebCore::ActiveDOMObject::queueCancellableTaskKeepingObjectAlive<WebCore::HTMLMediaElement>(v7, 9, v7 + 800, &v12);
        v11 = v12;
        v12 = 0;
        if (v11)
          (*((void (**)(uint64_t (**)()))*v11 + 1))(v11);
      }
    }
    else
    {
      __break(0xC471u);
    }
  }
}

void WebCore::RenderMenuList::RenderMenuList(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;

  WebCore::RenderFlexibleBox::RenderFlexibleBox(a1, 22, a2, a3);
  *(_QWORD *)v3 = off_1E342B410;
  *(_QWORD *)(v3 + 416) = 0;
  *(_QWORD *)(v3 + 424) = 0;
  *(_QWORD *)(v3 + 408) = &unk_1E342BC88;
  *(_BYTE *)(v3 + 432) = 1;
  *(_DWORD *)(v3 + 436) = 0;
  *(_BYTE *)(v3 + 440) = 0;
  *(_BYTE *)(v3 + 444) = 0;
  *(_QWORD *)(v3 + 448) = 0;
}

void WebCore::RenderMenuList::~RenderMenuList(WebCore::RenderStyle **this, void *a2)
{
  void *v3;
  void *v4;
  void *v5;

  std::unique_ptr<WebCore::RenderStyle>::~unique_ptr[abi:sn180100](this + 56, a2);
  WebCore::CompositedClipData::~CompositedClipData(this + 53, v3);
  WebCore::CompositedClipData::~CompositedClipData(this + 52, v4);
  WebCore::RenderFlexibleBox::~RenderFlexibleBox((WebCore::RenderFlexibleBox *)this, v5);
}

void `non-virtual thunk to'WebCore::RenderMenuList::~RenderMenuList(WebCore::RenderStyle **this, void *a2)
{
  WebCore::RenderMenuList::~RenderMenuList(this - 51, a2);
}

{
  WebCore::RenderMenuList::operator delete(this - 51, a2);
}

double WebCore::RenderMenuList::operator delete(WebCore::RenderStyle **a1, void *a2)
{
  uint64_t v2;
  void *v3;
  double result;

  WebCore::RenderMenuList::~RenderMenuList(a1, a2);
  if (*(_DWORD *)(v2 + 16))
  {
    *(_QWORD *)(v2 + 448) = 0;
    result = 0.0;
    *(_OWORD *)(v2 + 416) = 0u;
    *(_OWORD *)(v2 + 432) = 0u;
    *(_OWORD *)(v2 + 384) = 0u;
    *(_OWORD *)(v2 + 400) = 0u;
    *(_OWORD *)(v2 + 352) = 0u;
    *(_OWORD *)(v2 + 368) = 0u;
    *(_OWORD *)(v2 + 320) = 0u;
    *(_OWORD *)(v2 + 336) = 0u;
    *(_OWORD *)(v2 + 288) = 0u;
    *(_OWORD *)(v2 + 304) = 0u;
    *(_OWORD *)(v2 + 256) = 0u;
    *(_OWORD *)(v2 + 272) = 0u;
    *(_OWORD *)(v2 + 224) = 0u;
    *(_OWORD *)(v2 + 240) = 0u;
    *(_OWORD *)(v2 + 192) = 0u;
    *(_OWORD *)(v2 + 208) = 0u;
    *(_OWORD *)(v2 + 160) = 0u;
    *(_OWORD *)(v2 + 176) = 0u;
    *(_OWORD *)(v2 + 128) = 0u;
    *(_OWORD *)(v2 + 144) = 0u;
    *(_OWORD *)(v2 + 96) = 0u;
    *(_OWORD *)(v2 + 112) = 0u;
    *(_OWORD *)(v2 + 64) = 0u;
    *(_OWORD *)(v2 + 80) = 0u;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_OWORD *)(v2 + 48) = 0u;
    *(_OWORD *)v2 = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate((bmalloc::api *)v2, v3);
  }
  return result;
}

void WebCore::RenderMenuList::setInnerRenderer(WebCore::RenderMenuList *this, WebCore::RenderBlock *a2)
{
  void *v3;
  WTF *v4;
  WTF *v5;
  int v6;
  void *v7;
  WTF *v8;

  WTF::WeakPtr<WebCore::CachedRawResourceClient,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>::WeakPtr<void>((uint64_t *)&v8, (uint64_t)a2);
  v4 = v8;
  v8 = 0;
  v5 = (WTF *)*((_QWORD *)this + 53);
  *((_QWORD *)this + 53) = v4;
  if (v5)
  {
    v6 = *(_DWORD *)v5 - 1;
    if (*(_DWORD *)v5 == 1)
    {
      WTF::fastFree(v5, v3);
      v5 = v8;
      v8 = 0;
      if (!v5)
        goto LABEL_4;
      v6 = *(_DWORD *)v5 - 1;
      if (*(_DWORD *)v5 == 1)
      {
        WTF::fastFree(v5, v7);
        goto LABEL_4;
      }
    }
    *(_DWORD *)v5 = v6;
  }
LABEL_4:
  WebCore::RenderMenuList::adjustInnerStyle(this);
}

void WebCore::RenderMenuList::adjustInnerStyle(WebCore::RenderMenuList *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  WebCore::StyleMiscNonInheritedData *v6;
  WTF::StringImpl *v7;
  WebCore::StyleMiscNonInheritedData *v8;
  WebCore::StyleMiscNonInheritedData *v9;
  int v10;
  void (**v11)(WebCore::RenderThemeIOS *__hidden);
  WTF *v12;
  _DWORD *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  WTF *v31;
  void *v32;
  WTF::StringImpl *v33;
  WTF *v34;
  void *v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  uint64_t v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WebCore::LayoutIntegration::LineLayout *v47;
  WebCore::LayoutIntegration::LineLayout *v48;
  const WebCore::RenderObject *v49;
  const WebCore::RenderObject *v50;
  unint64_t i;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  float v55;
  unsigned int v56;
  float v57;
  unsigned int v58;
  float v59;
  unsigned int v60;
  float v61;
  unsigned int v62;
  __int16 v63;
  char v64;
  unsigned int v65;
  __int16 v66;
  char v67;
  unsigned int v68;
  __int16 v69;
  char v70;
  unsigned int v71;
  __int16 v72;
  char v73;
  WebCore::StyleMiscNonInheritedData *v74;
  unsigned int v75;
  char v76;
  char v77;
  unsigned int v78;
  char v79;
  char v80;
  unsigned int v81;
  char v82;
  char v83;

  v2 = *((_QWORD *)this + 53);
  if (v2)
    v3 = *(_QWORD *)(v2 + 8);
  else
    v3 = 0;
  WebCore::RenderStyle::setFlexGrow((WebCore::RenderStyle *)(v3 + 80), 1.0);
  WebCore::RenderStyle::setFlexShrink((WebCore::RenderStyle *)(v3 + 80), 1.0);
  LODWORD(v74) = 0;
  WORD2(v74) = 4;
  BYTE6(v74) = 0;
  v4 = v3 + 80;
  if (((*(_DWORD *)(v3 + 124) >> 13) & 6u) - 2 < 4)
    WebCore::RenderStyle::setMinHeight(v4, (WebCore::Length *)&v74);
  else
    WebCore::RenderStyle::setMinWidth(v4, (WebCore::Length *)&v74);
  if (BYTE4(v74) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v74);
  }
  if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 124) & 0xF) == 6)
  {
    *(_DWORD *)((char *)&v74 + 3) = 0;
    LODWORD(v74) = 0;
    switch((unsigned __int16)*(_DWORD *)(v3 + 124) >> 13)
    {
      case 1:
        WebCore::RenderStyle::setMarginBottom(v3 + 80, (WebCore::Length *)&v74);
        break;
      case 2:
      case 4:
        WebCore::RenderStyle::setMarginLeft(v3 + 80, (WebCore::Length *)&v74);
        break;
      case 3:
      case 5:
        WebCore::RenderStyle::setMarginRight(v3 + 80, (WebCore::Length *)&v74);
        break;
      default:
        WebCore::RenderStyle::setMarginTop(v3 + 80, (WebCore::Length *)&v74);
        break;
    }
    if (BYTE4(v74) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v74);
    }
    *(_DWORD *)((char *)&v74 + 3) = 0;
    LODWORD(v74) = 0;
    switch((unsigned __int16)*(_DWORD *)(v3 + 124) >> 13)
    {
      case 1:
        WebCore::RenderStyle::setMarginTop(v3 + 80, (WebCore::Length *)&v74);
        break;
      case 2:
      case 4:
        WebCore::RenderStyle::setMarginRight(v3 + 80, (WebCore::Length *)&v74);
        break;
      case 3:
      case 5:
        WebCore::RenderStyle::setMarginLeft(v3 + 80, (WebCore::Length *)&v74);
        break;
      default:
        WebCore::RenderStyle::setMarginBottom(v3 + 80, (WebCore::Length *)&v74);
        break;
    }
    if (BYTE4(v74) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v74);
    }
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)(v3 + 88));
    v6 = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v5 + 4);
    if (*(_DWORD *)v6 == 1)
      goto LABEL_18;
    WebCore::StyleMiscNonInheritedData::copy(v6, (uint64_t *)&v74);
    v8 = v74;
    v74 = 0;
    v9 = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v5 + 4);
    *((_QWORD *)v5 + 4) = v8;
    if (v9)
    {
      v10 = *(_DWORD *)v9 - 1;
      if (*(_DWORD *)v9 == 1)
      {
        WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(v9, v7);
        WTF::fastFree(v31, v32);
        v9 = v74;
        v74 = 0;
        if (!v9)
          goto LABEL_17;
        v10 = *(_DWORD *)v9 - 1;
        if (*(_DWORD *)v9 == 1)
        {
          WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(v9, v33);
          WTF::fastFree(v34, v35);
          goto LABEL_17;
        }
      }
      *(_DWORD *)v9 = v10;
    }
LABEL_17:
    v6 = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v5 + 4);
LABEL_18:
    *((_BYTE *)v6 + 125) = *((_BYTE *)v6 + 125) & 0xF0 | 0xB;
  }
  {
    v11 = (void (**)(WebCore::RenderThemeIOS *__hidden))WebCore::RenderTheme::singleton(void)::theme;
  }
  else
  {
    v54 = WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
    *(_OWORD *)(v54 + 40) = 0u;
    *(_OWORD *)(v54 + 24) = 0u;
    v11 = &off_1E335BC30;
    *(_QWORD *)v54 = &off_1E335BC30;
  }
  ((void (*)(WebCore::StyleMiscNonInheritedData **__return_ptr, uint64_t *, char *))v11[37])(&v74, &WebCore::RenderTheme::singleton(void)::theme, (char *)this + 80);
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 <= 3)
  {
    v55 = *(float *)&v81;
    if (!v83)
      v55 = (float)(int)v81;
    v56 = (int)v55;
    v57 = *(float *)&v74;
    if (!BYTE6(v74))
      v57 = (float)(int)v74;
    v58 = (int)v57;
    v59 = *(float *)&v75;
    if (!v77)
      v59 = (float)(int)v75;
    v60 = (int)v59;
    v61 = *(float *)&v78;
    if (!v80)
      v61 = (float)(int)v78;
    v63 = 4;
    v64 = 0;
    v62 = v56;
    v66 = 4;
    v67 = 0;
    v65 = v58;
    v69 = 4;
    v70 = 0;
    v68 = v60;
    v72 = 4;
    v73 = 0;
    v71 = (int)v61;
    std::array<WebCore::Length,4ul>::operator=((WebCore::Length *)&v74, (uint64_t)&v62);
    if (v72 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v71);
    }
    if (v69 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v68);
    }
    if (v66 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v65);
    }
    if (v63 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v62);
    }
  }
  if ((WebCore::operator==((unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v3 + 88) + 24) + 72), (unsigned __int8 *)&v74) & 1) == 0)
  {
    v12 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)(v3 + 88));
    v13 = WTF::DataRef<WebCore::StyleSurroundData>::access((uint64_t *)v12 + 3);
    std::array<WebCore::Length,4ul>::operator=((WebCore::Length *)(v13 + 18), (uint64_t)&v74);
  }
  v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40)
                                                                                          + 8)
                                                                              + 528)
                                                                  + 8)
                                                      + 24)
                                          + 8)
                              + 48)
                  + 16);
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 1288))(v14))
  {
    v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40)
                                                                                            + 8)
                                                                                + 528)
                                                                    + 8)
                                                        + 24)
                                            + 8)
                                + 48)
                    + 16);
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v17 + 1296))(v17))
      goto LABEL_86;
    *(_DWORD *)(v3 + 120) = *(_DWORD *)(v3 + 120) & 0xFFFFFC3F | (*((_DWORD *)this + 30) >> 20) & 0x40;
    v18 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    if ((*(_WORD *)(v18 + 28) & 0x10) == 0
      || *(_QWORD *)(*(_QWORD *)(v18 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::selectTag + 24))
    {
      __break(0xC471u);
      JUMPOUT(0x19641712CLL);
    }
    if (!*(_BYTE *)(v18 + 297))
      goto LABEL_44;
    if (*(_BYTE *)(v18 + 300))
      WebCore::HTMLSelectElement::recalcListItems(*(_QWORD *)(*((_QWORD *)this + 3) + 8), (void *)1, 1u);
    v19 = *(unsigned int *)(v18 + 196);
    if (!(_DWORD)v19)
      goto LABEL_46;
    v20 = 0;
    v21 = 0;
    do
    {
      if (v20 >= *(unsigned int *)(v18 + 196))
      {
        __break(0xC471u);
        JUMPOUT(0x1964175DCLL);
      }
      v22 = *(_QWORD *)(*(_QWORD *)(v18 + 184) + 8 * v20);
      if (v22)
      {
        v23 = *(_QWORD *)(v22 + 8);
        if (v23)
        {
          if (*(_QWORD *)(*(_QWORD *)(v23 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
            v21 += WebCore::HTMLOptionElement::selected(v23, 1u);
        }
      }
      ++v20;
    }
    while (v19 != v20);
    if (v21 == 1)
    {
LABEL_44:
      v24 = *((_QWORD *)this + 56);
      if (v24)
      {
        v25 = *(_DWORD *)(v24 + 40);
        v26 = *(_DWORD *)(v24 + 16);
      }
      else
      {
        v25 = *((_DWORD *)this + 30);
        v26 = *((_DWORD *)this + 24);
      }
      v28 = (v26 >> 22) & 7;
      v30 = *(_DWORD *)(v3 + 120);
      if ((v25 & 0x4000000) == 0)
      {
        v29 = 0;
        goto LABEL_85;
      }
    }
    else
    {
LABEL_46:
      v27 = *((_QWORD *)this + 52);
      if (!v27 || (v40 = *(_QWORD *)(v27 + 8)) == 0 || (v41 = *(WTF::StringImpl **)(v40 + 104)) == 0)
      {
        LOBYTE(v28) = 0;
        v29 = 0;
        v30 = *(_DWORD *)(v3 + 120);
LABEL_85:
        *(_DWORD *)(v3 + 120) = v29 | v30 & 0xFBFFFFFF;
        *(_QWORD *)(v3 + 96) = *(_QWORD *)(v3 + 96) & 0xFFFFFFFFFE3FFFFFLL | ((unint64_t)(v28 & 7) << 22);
        goto LABEL_86;
      }
      v42 = WTF::StringImpl::defaultWritingDirection(v41);
      LOBYTE(v28) = 0;
      v29 = 0;
      v43 = (_DWORD)v42 != 1 || (v42 & 0xFF00000000) == 0;
      v30 = *(_DWORD *)(v3 + 120);
      if (v43)
        goto LABEL_85;
    }
    v29 = 0x4000000;
    goto LABEL_85;
  }
  v15 = *(_DWORD *)(v3 + 120) & 0xFFFFFC3F;
  *(_DWORD *)(v3 + 120) = v15;
  v16 = *((_QWORD *)this + 52);
  if (v16)
  {
    v16 = *(_QWORD *)(v16 + 8);
    if (v16)
    {
      v36 = *(WTF::StringImpl **)(v16 + 104);
      if (v36)
      {
        v37 = WTF::StringImpl::defaultWritingDirection(v36);
        if ((v37 & 0xFF00000000) != 0 && (_DWORD)v37 == 1)
          LODWORD(v16) = 0x4000000;
        else
          LODWORD(v16) = 0;
        v15 = *(_DWORD *)(v3 + 120);
      }
      else
      {
        LODWORD(v16) = 0;
      }
    }
  }
  *(_DWORD *)(v3 + 120) = v15 & 0xFBFFFFFF | v16;
LABEL_86:
  v44 = *((_QWORD *)this + 53);
  if (v44)
  {
    v45 = *(_QWORD *)(v44 + 8);
    if (v45)
    {
      v46 = *(_QWORD *)(v45 + 56);
      if (v46)
      {
        if ((*(_WORD *)(v46 + 12) & 0x40) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19641742CLL);
        }
        if ((*(_BYTE *)(v45 + 52) & 7) == 1 && *(_DWORD *)(v45 + 240) == 1)
        {
          v47 = *(WebCore::LayoutIntegration::LineLayout **)(v45 + 232);
          if (v47)
          {
            WebCore::LayoutIntegration::LineLayout::rootStyleWillChange(v47, (const WebCore::RenderBlockFlow *)v45, (const WebCore::RenderStyle *)(v3 + 80));
            v45 = *(_QWORD *)(*((_QWORD *)this + 53) + 8);
          }
        }
        v48 = (WebCore::LayoutIntegration::LineLayout *)WebCore::LayoutIntegration::LineLayout::containing((WebCore::LayoutIntegration::LineLayout *)v45, (WebCore::RenderObject *)v45);
        if (v48)
          WebCore::LayoutIntegration::LineLayout::styleWillChange(v48, *(const WebCore::RenderElement **)(*((_QWORD *)this + 53) + 8), (const WebCore::RenderStyle *)(v3 + 80));
        WebCore::LayoutIntegration::BoxTree::updateStyle(*(WebCore::LayoutIntegration::BoxTree **)(*((_QWORD *)this + 53) + 8), v49);
        for (i = *(unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 53) + 8) + 64) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 53) + 8) + 68) << 32);
              i;
              i = *(unsigned int *)(v52 + 47) | ((unint64_t)*(unsigned __int8 *)(v52 + 51) << 32))
        {
          v52 = *(_QWORD *)(i + 8);
          if (!v52)
            break;
          if ((*(_BYTE *)(v52 + 45) & 2) != 0)
          {
LABEL_105:
            WebCore::LayoutIntegration::BoxTree::updateStyle((WebCore::LayoutIntegration::BoxTree *)v52, v50);
            while (1)
            {
              v53 = *(unsigned int *)(v52 + 47);
              if (!(v53 | ((unint64_t)*(unsigned __int8 *)(v52 + 51) << 32)))
                goto LABEL_100;
              v52 = *(_QWORD *)((v53 | ((unint64_t)*(unsigned __int8 *)(v52 + 51) << 32)) + 8);
              if (!v52)
                goto LABEL_100;
              if ((*(_BYTE *)(v52 + 45) & 2) != 0)
                goto LABEL_105;
            }
          }
        }
      }
    }
  }
LABEL_100:
  if (v82 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v81);
  }
  if (v79 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v78);
  }
  if (v76 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v75);
  }
  if (BYTE4(v74) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v74);
  }
}

uint64_t WebCore::RenderMenuList::multiple(WebCore::RenderMenuList *this)
{
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v1 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v1 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::selectTag + 24))
  {
    return *(unsigned __int8 *)(v1 + 297);
  }
  result = 96;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::RenderMenuList::selectElement(WebCore::RenderMenuList *this)
{
  uint64_t result;

  result = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(result + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(result + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::selectTag + 24))
  {
    result = 96;
    __break(0xC471u);
  }
  return result;
}

void WebCore::RenderMenuList::didAttachChild(WebCore::RenderMenuList *this, WebCore::RenderObject *a2, WebCore::RenderObject *a3)
{
  WebCore::AXObjectCache *v4;
  WebCore::RenderObject *v5;
  WebCore::AXObjectCache *v6;
  int v7;

  if (WebCore::Document::hasEverCreatedAnAXObjectCache)
  {
    v4 = (WebCore::AXObjectCache *)WebCore::Document::existingAXObjectCacheSlow(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8));
    if (v4)
    {
      v5 = this;
      v6 = v4;
      ++*((_DWORD *)v4 + 2);
      WebCore::AXObjectCache::childrenChanged(v4, v5, a2);
      v7 = *((_DWORD *)v6 + 2);
      if (v7)
        *((_DWORD *)v6 + 2) = v7 - 1;
      else
        __break(0xC471u);
    }
  }
}

void WebCore::RenderMenuList::styleDidChange(uint64_t a1, WTF::StringImpl *a2, const WebCore::RenderStyle *a3)
{
  uint64_t v5;

  WebCore::RenderBlock::styleDidChange(a1, a2, a3);
  v5 = *(_QWORD *)(a1 + 424);
  if (v5 && *(_QWORD *)(v5 + 8))
    WebCore::RenderMenuList::adjustInnerStyle((WebCore::RenderMenuList *)a1);
  if (!a3 || !WebCore::FontCascade::operator==(*((_QWORD *)a3 + 4) + 32, *(_QWORD *)(a1 + 112) + 32))
  {
    WebCore::RenderMenuList::updateOptionsWidth((WebCore::RenderMenuList *)a1);
    *(_BYTE *)(a1 + 432) = 0;
  }
}

void WebCore::RenderMenuList::updateOptionsWidth(WebCore::RenderMenuList *this)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  float v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  int v16;
  void (**v17)(WebCore::RenderThemeIOS *__hidden);
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  float v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  unsigned int v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  float v28;
  WebCore::Node *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  float v34;
  WTF::StringImpl *v35;
  float v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;

  v2 = WebCore::RenderMenuList::selectElement(this);
  v4 = v2;
  if (*(_BYTE *)(v2 + 300))
    WebCore::HTMLSelectElement::recalcListItems(v2, (void *)1, 1u);
  v5 = *(unsigned int *)(v4 + 196);
  if ((int)v5 >= 1)
  {
    v6 = 0;
    v7 = 0.0;
    v8 = &WebCore::MathMLNames::rspaceAttr;
    v9 = &WebCore::MathMLNames::rspaceAttr;
    v10 = &WebCore::RenderTheme::singleton(void)::theme;
    while (1)
    {
      if (v6 >= *(unsigned int *)(v4 + 196))
      {
        __break(0xC471u);
        return;
      }
      v11 = *(_QWORD *)(*(_QWORD *)(v4 + 184) + 8 * v6);
      if (v11)
      {
        v12 = *(_QWORD *)(v11 + 8);
        if (v12)
        {
          if (*(_QWORD *)(*(_QWORD *)(v12 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
            break;
        }
      }
LABEL_18:
      if (v5 == ++v6)
        goto LABEL_31;
    }
    *(_DWORD *)(v12 + 24) += 2;
    WebCore::HTMLOptionElement::textIndentedToRespectGroupLabel((WebCore::HTMLOptionElement *)v12, v3, &v39);
    WebCore::applyTextTransform((WebCore::RenderMenuList *)((char *)this + 80), &v39, 32, &v37);
    v14 = v37;
    v37 = 0;
    v15 = v39;
    v39 = v14;
    if (v15)
    {
      v16 = *(_DWORD *)v15 - 2;
      if (*(_DWORD *)v15 != 2)
      {
LABEL_11:
        *(_DWORD *)v15 = v16;
        goto LABEL_12;
      }
      WTF::StringImpl::destroy(v15, v13);
      v15 = v37;
      v37 = 0;
      if (v15)
      {
        v16 = *(_DWORD *)v15 - 2;
        if (*(_DWORD *)v15 != 2)
          goto LABEL_11;
        WTF::StringImpl::destroy(v15, v27);
      }
    }
LABEL_12:
    if (*((_BYTE *)v8 + 2784) == 1)
    {
      v17 = (void (**)(WebCore::RenderThemeIOS *__hidden))v9[341];
    }
    else
    {
      WebCore::RenderTheme::RenderTheme((uint64_t)v10);
      *(_OWORD *)(v10 + 5) = 0u;
      *(_OWORD *)(v10 + 3) = 0u;
      v17 = &off_1E335BC30;
      *v10 = (uint64_t)&off_1E335BC30;
      *((_BYTE *)v8 + 2784) = 1;
    }
    if (((unsigned int (*)(uint64_t *))v17[38])(v10))
    {
      v28 = 0.0;
      if ((*(_BYTE *)(v12 + 22) & 8) != 0)
      {
        v29 = WebCore::Element::resolveComputedStyle(v12, 2);
        if (v29)
          v28 = (float)((float)(int)WebCore::minimumValueForLength<int>((unsigned __int8 *)(*((_QWORD *)v29 + 3) + 176))
                      * 0.015625)
              + 0.0;
      }
      if (v39 && *((_DWORD *)v39 + 1))
      {
        v30 = v10;
        v31 = v9;
        v32 = v8;
        v33 = *((_QWORD *)this + 14) + 32;
        WebCore::RenderBlock::constructTextRun((uint64_t)&v39, (uint64_t)this + 80, 4, 0, (uint64_t)&v37);
        v34 = WebCore::FontCascade::width(v33, (uint64_t)&v37);
        v35 = v38;
        v38 = 0;
        if (v35)
        {
          if (*(_DWORD *)v35 == 2)
          {
            v36 = v34;
            WTF::StringImpl::destroy(v35, v3);
            v34 = v36;
          }
          else
          {
            *(_DWORD *)v35 -= 2;
          }
        }
        v28 = v28 + v34;
        v8 = v32;
        v9 = v31;
        v10 = v30;
      }
      if (v7 < v28)
        v7 = v28;
    }
    else
    {
      if (!v39)
      {
LABEL_16:
        if (*(_DWORD *)(v12 + 24) == 2)
        {
          if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v12, v3);
        }
        else
        {
          *(_DWORD *)(v12 + 24) -= 2;
        }
        goto LABEL_18;
      }
      v18 = v10;
      v19 = v9;
      v20 = v8;
      if (*((_DWORD *)v39 + 1))
      {
        v21 = *((_QWORD *)this + 14) + 32;
        WebCore::RenderBlock::constructTextRun((uint64_t)&v39, (uint64_t)this + 80, 4, 0, (uint64_t)&v37);
        v22 = WebCore::FontCascade::width(v21, (uint64_t)&v37);
        if (v7 < v22)
          v7 = v22;
        v23 = v38;
        v38 = 0;
        if (v23)
        {
          if (*(_DWORD *)v23 == 2)
            WTF::StringImpl::destroy(v23, v3);
          else
            *(_DWORD *)v23 -= 2;
        }
      }
      v8 = v20;
      v9 = v19;
      v10 = v18;
    }
    v24 = v39;
    v39 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v3);
      else
        *(_DWORD *)v24 -= 2;
    }
    goto LABEL_16;
  }
  v7 = 0.0;
LABEL_31:
  v25 = vcvtps_s32_f32(v7);
  if (*((_DWORD *)this + 109) != v25)
  {
    *((_DWORD *)this + 109) = v25;
    v26 = *((_QWORD *)this + 4);
    if (v26)
    {
      if (*(_QWORD *)(v26 + 8))
        WebCore::RenderObject::setNeedsLayoutAndPrefWidthsRecalc(this);
    }
  }
}

uint64_t WebCore::minimumValueForLength<int>(unsigned __int8 *a1)
{
  int v1;
  float v2;
  double v3;
  float v5;

  v1 = a1[4];
  switch(v1)
  {
    case 4:
      v2 = *(float *)a1;
      if (!a1[6])
        v2 = (float)*(int *)a1;
      break;
    case 3:
      v5 = *(float *)a1;
      if (!a1[6])
        v5 = (float)*(int *)a1;
      v2 = (float)(v5 * 0.0) / 100.0;
      break;
    case 11:
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)a1, 0.0);
      break;
    default:
      return 0;
  }
  v3 = v2 * 64.0;
  if (v3 >= 2147483650.0)
    return 0x7FFFFFFFLL;
  if (v3 <= -2147483650.0)
    return 0x80000000;
  return (int)v3;
}

uint64_t WebCore::RenderMenuList::updateFromElement(WebCore::RenderMenuList *this)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t result;

  if (*((_BYTE *)this + 432))
  {
    WebCore::RenderMenuList::updateOptionsWidth(this);
    *((_BYTE *)this + 432) = 0;
  }
  v2 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v2 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::selectTag + 24))
  {
    v3 = WebCore::HTMLSelectElement::selectedIndex((WebCore::HTMLSelectElement *)v2);
    return (uint64_t)WebCore::RenderMenuList::setTextFromOption(this, v3);
  }
  else
  {
    result = 96;
    __break(0xC471u);
  }
  return result;
}

WTF::StringImpl *WebCore::RenderMenuList::setTextFromOption(WebCore::RenderMenuList *this, unsigned int a2)
{
  uint64_t v2;
  uint64_t v5;
  int v6;
  unsigned int v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  _QWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  WebCore::RenderStyle *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  WebCore *v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *result;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;

  v2 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v2 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::selectTag + 24))
  {
    goto LABEL_72;
  }
  v5 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if (*(_BYTE *)(v2 + 300)
    && (WebCore::HTMLSelectElement::recalcListItems(v2, (void *)1, 1u),
        v5 = *(_QWORD *)(*((_QWORD *)this + 3) + 8),
        (*(_WORD *)(v5 + 28) & 0x10) == 0)
    || *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::selectTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x1964180A4);
  }
  v6 = *(_DWORD *)(v2 + 196);
  v7 = WebCore::HTMLSelectElement::optionToListIndex((WebCore::HTMLSelectElement *)v5, a2);
  v9 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *(_DWORD *)v9 += 2;
  v37 = v9;
  if ((v7 & 0x80000000) != 0 || (int)v7 >= v6)
    goto LABEL_34;
  if (*(_DWORD *)(v2 + 196) <= v7)
  {
LABEL_72:
    __break(0xC471u);
    JUMPOUT(0x196418064);
  }
  v10 = *(_QWORD *)(*(_QWORD *)(v2 + 184) + 8 * v7);
  if (!v10
    || (v11 = *(_QWORD *)(v10 + 8)) == 0
    || *(_QWORD *)(*(_QWORD *)(v11 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
  {
LABEL_34:
    v13 = v9;
    goto LABEL_35;
  }
  *(_DWORD *)(v11 + 24) += 2;
  WebCore::HTMLOptionElement::textIndentedToRespectGroupLabel((WebCore::HTMLOptionElement *)v11, v8, &v36);
  v13 = v36;
  v36 = 0;
  v37 = v13;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::destroy(v9, v12);
      v21 = v36;
      v36 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, v12);
        else
          *(_DWORD *)v21 -= 2;
      }
    }
    else
    {
      *(_DWORD *)v9 -= 2;
    }
  }
  if ((*(_BYTE *)(v11 + 22) & 8) != 0)
  {
    v14 = (uint64_t)WebCore::Element::resolveComputedStyle(v11, 2);
    if (v14)
    {
      v15 = (_QWORD *)v14;
      v14 = WTF::fastMalloc((WTF *)0x40);
      *(_DWORD *)v14 = 0;
      v16 = (_DWORD *)v15[1];
      ++*v16;
      *(_QWORD *)(v14 + 8) = v16;
      *(_QWORD *)(v14 + 16) = v15[2];
      v17 = (_DWORD *)v15[3];
      ++*v17;
      *(_QWORD *)(v14 + 24) = v17;
      v18 = (_DWORD *)v15[4];
      ++*v18;
      *(_QWORD *)(v14 + 32) = v18;
      *(_QWORD *)(v14 + 40) = v15[5];
      *(_QWORD *)(v14 + 48) = 0;
      v19 = (_DWORD *)v15[7];
      ++*v19;
      *(_QWORD *)(v14 + 56) = v19;
    }
  }
  else
  {
    v14 = 0;
  }
  v20 = (WebCore::RenderStyle *)*((_QWORD *)this + 56);
  *((_QWORD *)this + 56) = v14;
  if (v20)
  {
    WebCore::RenderStyle::~RenderStyle(v20, v12);
    if (*(_DWORD *)v20)
    {
      *((_OWORD *)v20 + 2) = 0u;
      *((_OWORD *)v20 + 3) = 0u;
      *(_OWORD *)v20 = 0u;
      *((_OWORD *)v20 + 1) = 0u;
    }
    else
    {
      WTF::fastFree(v20, v12);
    }
  }
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v12);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
LABEL_35:
  v22 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v22 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v22 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::selectTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x19641828CLL);
  }
  if (*(_BYTE *)(v22 + 297))
  {
    if (*(_BYTE *)(v22 + 300))
      WebCore::HTMLSelectElement::recalcListItems(*(_QWORD *)(*((_QWORD *)this + 3) + 8), (void *)1, 1u);
    v23 = *(unsigned int *)(v22 + 196);
    if ((_DWORD)v23)
    {
      v24 = 0;
      v25 = 0;
      do
      {
        if (v24 >= *(unsigned int *)(v22 + 196))
        {
          __break(0xC471u);
          JUMPOUT(0x1964182F0);
        }
        v26 = *(_QWORD *)(*(_QWORD *)(v22 + 184) + 8 * v24);
        if (v26)
        {
          v27 = *(_QWORD *)(v26 + 8);
          if (v27)
          {
            if (*(_QWORD *)(*(_QWORD *)(v27 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
              v25 = (WebCore *)((char *)v25 + WebCore::HTMLOptionElement::selected(v27, 1u));
          }
        }
        ++v24;
      }
      while (v23 != v24);
      if (v25 == (WebCore *)1)
        goto LABEL_56;
    }
    else
    {
      v25 = 0;
    }
    WebCore::htmlSelectMultipleItems(v25, (uint64_t)&v36);
    v29 = v36;
    v36 = 0;
    v37 = v29;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
      {
        WTF::StringImpl::destroy(v13, v28);
        v35 = v36;
        v36 = 0;
        if (v35)
        {
          if (*(_DWORD *)v35 == 2)
            WTF::StringImpl::destroy(v35, v34);
          else
            *(_DWORD *)v35 -= 2;
        }
      }
      else
      {
        *(_DWORD *)v13 -= 2;
      }
    }
  }
LABEL_56:
  WTF::String::trim();
  WebCore::RenderMenuList::setText(this, v36);
  v31 = v36;
  v36 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, v30);
    else
      *(_DWORD *)v31 -= 2;
  }
  WebCore::RenderMenuList::didUpdateActiveOption((uint64_t)this, a2);
  result = v37;
  v37 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v32);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::RenderMenuList::setText(WebCore::RenderMenuList *this, const WTF::String *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  void *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  int v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  void *v13;
  uint64_t v14;
  const WTF::StringImpl **v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  _QWORD **v19;
  unint64_t v20;
  WTF::StringImpl *v21[18];
  unint64_t v22;
  WTF::StringImpl *v23;

  if (a2 && *((_DWORD *)a2 + 1))
  {
    *(_DWORD *)a2 += 2;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    a2 = v21[0];
  }
  v23 = a2;
  v3 = *((_QWORD *)this + 52);
  if (v3)
  {
    v15 = *(const WTF::StringImpl ***)(v3 + 8);
    if (v15)
    {
      if (a2)
        *(_DWORD *)a2 += 2;
      v21[0] = a2;
      WebCore::RenderText::setText(v15, v21, (const WTF::StringImpl *)1);
      v17 = v21[0];
      v21[0] = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v16);
        else
          *(_DWORD *)v17 -= 2;
      }
      v18 = *((_QWORD *)this + 52);
      if (v18)
        v19 = *(_QWORD ***)(v18 + 8);
      else
        v19 = 0;
      WebCore::RenderText::dirtyLineBoxes(v19, 0);
      goto LABEL_10;
    }
  }
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8);
  v5 = WebCore::RenderText::operator new(120);
  WebCore::RenderText::RenderText(v5, 41, v4, &v23);
  WTF::WeakPtr<WebCore::CachedRawResourceClient,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>::WeakPtr<void>((uint64_t *)v21, v5);
  v7 = v21[0];
  v21[0] = 0;
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 52);
  *((_QWORD *)this + 52) = v7;
  if (v8)
  {
    v9 = *(_DWORD *)v8 - 1;
    if (*(_DWORD *)v8 != 1)
    {
LABEL_6:
      *(_DWORD *)v8 = v9;
      goto LABEL_7;
    }
    WTF::fastFree(v8, v6);
    v8 = v21[0];
    v21[0] = 0;
    if (v8)
    {
      v9 = *(_DWORD *)v8 - 1;
      if (*(_DWORD *)v8 != 1)
        goto LABEL_6;
      WTF::fastFree(v8, v13);
    }
  }
LABEL_7:
  if (WebCore::RenderTreeBuilder::s_current)
  {
    v22 = v5;
    WebCore::RenderTreeBuilder::attach(WebCore::RenderTreeBuilder::s_current, this, &v22);
    v10 = v22;
    v22 = 0;
    if (v10)
      WebCore::RenderObjectDeleter::operator()((uint64_t)&v22, v10);
  }
  else
  {
    WebCore::RenderTreeBuilder::RenderTreeBuilder((WebCore::RenderTreeBuilder *)v21, *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1944));
    v20 = v5;
    WebCore::RenderTreeBuilder::attach((uint64_t)v21, this, &v20);
    v14 = v20;
    v20 = 0;
    if (v14)
      WebCore::RenderObjectDeleter::operator()((uint64_t)&v20, v14);
    WebCore::RenderTreeBuilder::~RenderTreeBuilder((WebCore::RenderTreeBuilder *)v21);
  }
LABEL_10:
  WebCore::RenderMenuList::adjustInnerStyle(this);
  result = v23;
  v23 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::RenderMenuList::didUpdateActiveOption(uint64_t this, unsigned int a2)
{
  unsigned __int8 v2;
  WebCore::AXObjectCache *v3;
  int v4;
  WebCore::HTMLSelectElement *v5;
  int v6;
  uint64_t v7;
  unsigned __int8 **v8;
  void *v9;
  WebCore::RenderObject *v11;

  v2 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
  if ((v2 & 1) != 0)
  {
    if (WebCore::Document::hasEverCreatedAnAXObjectCache)
    {
      v11 = (WebCore::RenderObject *)this;
      this = WebCore::Document::existingAXObjectCacheSlow(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 24) + 8)
                                                                                            + 40)
                                                                                + 8));
      if (this)
      {
        v3 = (WebCore::AXObjectCache *)this;
        ++*(_DWORD *)(this + 8);
        if (!*((_BYTE *)v11 + 444) || *((_DWORD *)v11 + 110) != a2)
        {
          *((_DWORD *)v11 + 110) = a2;
          *((_BYTE *)v11 + 444) = 1;
          v5 = (WebCore::HTMLSelectElement *)WebCore::RenderMenuList::selectElement(v11);
          this = WebCore::HTMLSelectElement::optionToListIndex(v5, a2);
          if ((this & 0x80000000) == 0)
          {
            v6 = this;
            this = WebCore::RenderMenuList::selectElement(v11);
            v7 = this;
            if (*(_BYTE *)(this + 300))
              this = (uint64_t)WebCore::HTMLSelectElement::recalcListItems(this, (void *)1, 1u);
            if (v6 < *(_DWORD *)(v7 + 196))
            {
              this = WebCore::AXObjectCache::get(v3, v11);
              if (this)
              {
                v8 = (unsigned __int8 **)this;
                this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 2800))(this);
                if ((_DWORD)this)
                {
                  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::AXCoreObject,(WTF::DestructionThread)0>::ref(v8[1]);
                  WebCore::AccessibilityMenuList::didUpdateActiveOption((WebCore::AccessibilityMenuList *)v8, a2);
                  this = (uint64_t)WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::AXCoreObject,(WTF::DestructionThread)0>::deref(v8[1], v9);
                }
              }
            }
          }
        }
        v4 = *((_DWORD *)v3 + 2);
        if (v4)
        {
          *((_DWORD *)v3 + 2) = v4 - 1;
        }
        else
        {
          this = 286;
          __break(0xC471u);
        }
      }
    }
  }
  return this;
}

unint64_t WebCore::RenderMenuList::controlClipRect(WebCore::RenderMenuList *this, const WebCore::LayoutPoint *a2)
{
  unsigned int v4;
  int v5;
  BOOL v6;
  uint64_t v7;
  float v8;
  double v9;
  int v10;
  unsigned int v11;
  unsigned __int8 *v12;
  int v13;
  float v14;
  float v15;
  double v16;
  int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  float v21;
  double v22;
  int v23;
  unsigned int v24;
  unsigned __int8 *v25;
  int v26;
  float v27;
  float v28;
  double v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  BOOL v39;
  int v40;
  int v41;
  int v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  int v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  int v53;
  unsigned int v54;
  int v55;
  int v56;
  int v57;
  unsigned int v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  int v62;
  _DWORD *v63;
  int v64;
  unsigned int v65;
  int v66;
  int v67;
  unsigned int v68;
  _DWORD *v69;
  int v70;
  unsigned int v71;
  int v72;
  unsigned int v73;
  uint64_t v74;
  _QWORD *v75;
  unsigned int v76;
  int v77;
  unsigned int v78;
  int v79;
  unsigned int v80;
  int v81;
  unsigned int v82;
  int v83;
  int v84;
  int v85;
  unsigned int v86;
  int v87;
  unsigned int v88;
  unsigned int v89;
  int v90;
  uint64_t v91;
  _QWORD *v92;
  unsigned int v93;
  int v94;
  unsigned int v95;
  int v96;
  unsigned int v97;
  int v98;
  unsigned int v99;
  int v100;
  int v101;
  int v102;
  unsigned int v103;
  int v104;
  unsigned int v105;
  unsigned int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  uint64_t v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  uint64_t v120;
  uint64_t v121;
  float v122;
  float v123;
  int v124;
  unsigned int v125;
  int v126;
  int v127;
  unsigned int v128;
  int v129;
  uint64_t v130;
  int v131;
  unsigned int v132;
  int v133;
  int v134;
  int v135;
  unsigned int v136;
  int v137;

  v4 = *(_DWORD *)a2;
  v5 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
  v6 = v5 == 4 || v5 == 2;
  if (v6 && WebCore::RenderBlock::intrinsicBorderForFieldset(this))
  {
    v136 = WebCore::RenderBoxModelObject::borderLeft(this);
    v137 = WebCore::RenderBlock::intrinsicBorderForFieldset(this);
    v10 = v136 + v137;
    if (__OFADD__(v136, v137))
      v10 = (v136 >> 31) + 0x7FFFFFFF;
  }
  else
  {
    v7 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
    v8 = 0.0;
    if ((*(_BYTE *)(v7 + 124) & 0xE) != 0)
    {
      v120 = *(_QWORD *)(v7 + 200);
      if (*(_BYTE *)(v120 + 5) && *(_BYTE *)(v120 + 76) == 4)
      {
        if (*(_BYTE *)(v120 + 78))
          v8 = *(float *)(v120 + 72);
        else
          v8 = (float)*(int *)(v120 + 72);
      }
      else
      {
        v8 = *(float *)(v7 + 120);
      }
    }
    v9 = v8 * 64.0;
    if (v9 >= 2147483650.0)
    {
      v10 = 0x7FFFFFFF;
    }
    else if (v9 <= -2147483650.0)
    {
      v10 = 0x80000000;
    }
    else
    {
      v10 = (int)v9;
    }
  }
  v11 = v4 + v10;
  if (__OFADD__(v4, v10))
    v11 = (v4 >> 31) + 0x7FFFFFFF;
  v12 = *(unsigned __int8 **)(*((_QWORD *)this + 11) + 24);
  v13 = v12[100];
  if ((v13 & 0xFFFFFFF7) == 3)
  {
    v134 = (*(uint64_t (**)(WebCore::RenderMenuList *))(*(_QWORD *)this + 1144))(this);
    v13 = v12[100];
    v14 = (float)v134 * 0.015625;
  }
  else
  {
    v14 = 0.0;
  }
  switch(v13)
  {
    case 4:
      v15 = *((float *)v12 + 24);
      if (!v12[102])
        v15 = (float)SLODWORD(v15);
      break;
    case 3:
      v122 = *((float *)v12 + 24);
      if (!v12[102])
        v122 = (float)SLODWORD(v122);
      v15 = (float)(v14 * v122) / 100.0;
      break;
    case 11:
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v12 + 96), v14);
      break;
    default:
      v17 = 0;
      goto LABEL_19;
  }
  v16 = v15 * 64.0;
  if (v16 >= 2147483650.0)
  {
    v17 = 0x7FFFFFFF;
  }
  else if (v16 <= -2147483650.0)
  {
    v17 = 0x80000000;
  }
  else
  {
    v17 = (int)v16;
  }
LABEL_19:
  v18 = v11 + v17;
  if (__OFADD__(v11, v17))
    v18 = (v11 >> 31) + 0x7FFFFFFF;
  v19 = *((_DWORD *)a2 + 1);
  if (((unsigned __int16)*((_DWORD *)this + 31) >> 13) - 1 >= 5
    && (*(_WORD *)((_BYTE *)this + 69) & 0x400) != 0
    && (v130 = WTF::HashMap<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBlockRareData>>,WTF::HashTableTraits>::get<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>((uint64_t *)WebCore::gRareDataMap, (uint64_t)this)) != 0&& *(_DWORD *)(v130 + 8))
  {
    v131 = v18;
    v132 = WebCore::RenderBoxModelObject::borderTop(this);
    v133 = WebCore::RenderBlock::intrinsicBorderForFieldset(this);
    v23 = v132 + v133;
    if (__OFADD__(v132, v133))
      v23 = (v132 >> 31) + 0x7FFFFFFF;
    v18 = v131;
  }
  else
  {
    v20 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
    v21 = 0.0;
    if ((*(_BYTE *)(v20 + 172) & 0xE) != 0)
    {
      v121 = *(_QWORD *)(v20 + 200);
      if (*(_BYTE *)(v121 + 5) && *(_BYTE *)(v121 + 52) == 4)
      {
        if (*(_BYTE *)(v121 + 54))
          v21 = *(float *)(v121 + 48);
        else
          v21 = (float)*(int *)(v121 + 48);
      }
      else
      {
        v21 = *(float *)(v20 + 168);
      }
    }
    v22 = v21 * 64.0;
    if (v22 >= 2147483650.0)
    {
      v23 = 0x7FFFFFFF;
    }
    else if (v22 <= -2147483650.0)
    {
      v23 = 0x80000000;
    }
    else
    {
      v23 = (int)v22;
    }
  }
  v24 = v19 + v23;
  if (__OFADD__(v19, v23))
    v24 = (v19 >> 31) + 0x7FFFFFFF;
  v25 = *(unsigned __int8 **)(*((_QWORD *)this + 11) + 24);
  v26 = v25[76];
  if ((v26 & 0xFFFFFFF7) == 3)
  {
    v135 = (*(uint64_t (**)(WebCore::RenderMenuList *))(*(_QWORD *)this + 1144))(this);
    v26 = v25[76];
    v27 = (float)v135 * 0.015625;
  }
  else
  {
    v27 = 0.0;
  }
  switch(v26)
  {
    case 4:
      v28 = *((float *)v25 + 18);
      if (!v25[78])
        v28 = (float)SLODWORD(v28);
      break;
    case 3:
      v123 = *((float *)v25 + 18);
      if (!v25[78])
        v123 = (float)SLODWORD(v123);
      v28 = (float)(v27 * v123) / 100.0;
      break;
    case 11:
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v25 + 72), v27);
      break;
    default:
      v30 = 0;
      goto LABEL_37;
  }
  v29 = v28 * 64.0;
  if (v29 >= 2147483650.0)
  {
    v30 = 0x7FFFFFFF;
  }
  else if (v29 <= -2147483650.0)
  {
    v30 = 0x80000000;
  }
  else
  {
    v30 = (int)v29;
  }
LABEL_37:
  v31 = v24 + v30;
  if (__OFADD__(v24, v30))
    v31 = (v24 >> 31) + 0x7FFFFFFF;
  v32 = *((_DWORD *)this + 40);
  v33 = (*(uint64_t (**)(WebCore::RenderMenuList *))(*(_QWORD *)this + 1016))(this);
  v34 = v32 - v33;
  if (__OFSUB__(v32, v33))
    v34 = (v32 >> 31) + 0x7FFFFFFF;
  v35 = (*(uint64_t (**)(WebCore::RenderMenuList *))(*(_QWORD *)this + 1024))(this);
  v36 = v34 - v35;
  if (__OFSUB__(v34, v35))
    v36 = (v34 >> 31) + 0x7FFFFFFF;
  v37 = (*(uint64_t (**)(WebCore::RenderMenuList *))(*(_QWORD *)this + 1352))(this);
  v38 = v37 << 6;
  if (v37 < -33554432)
    v38 = 0x80000000;
  if (v37 > 0x1FFFFFF)
    v38 = 0x7FFFFFFF;
  v39 = __OFSUB__(v36, v38);
  v40 = v36 - v38;
  if (v39)
    v40 = (v36 >> 31) + 0x7FFFFFFF;
  v41 = v40 & ~(v40 >> 31);
  v42 = (*(uint64_t (**)(WebCore::RenderMenuList *))(*(_QWORD *)this + 944))(this);
  v39 = __OFSUB__(v41, v42);
  v43 = v41 - v42;
  if (v39)
    v43 = 0x7FFFFFFF;
  v44 = (*(uint64_t (**)(WebCore::RenderMenuList *))(*(_QWORD *)this + 952))(this);
  v45 = v43 - v44;
  if (__OFSUB__(v43, v44))
    v45 = (v43 >> 31) + 0x7FFFFFFF;
  if ((*(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 584) & 0x100) != 0)
  {
    v127 = (*(uint64_t (**)(WebCore::RenderMenuList *))(*(_QWORD *)this + 1352))(this);
    if (v127 >= -33554432)
    {
      v46 = v127 << 6;
      if (v127 > 0x1FFFFFF)
        v46 = 0x7FFFFFFF;
    }
    else
    {
      v46 = 0x80000000;
    }
  }
  else
  {
    v46 = 0;
  }
  v47 = v45 - v46;
  if (__OFSUB__(v45, v46))
    v47 = (v45 >> 31) + 0x7FFFFFFF;
  v48 = *((_DWORD *)this + 41);
  v49 = (*(uint64_t (**)(WebCore::RenderMenuList *))(*(_QWORD *)this + 1000))(this);
  v50 = v48 - v49;
  if (__OFSUB__(v48, v49))
    v50 = (v48 >> 31) + 0x7FFFFFFF;
  v51 = (*(uint64_t (**)(WebCore::RenderMenuList *))(*(_QWORD *)this + 1008))(this);
  v52 = v50 - v51;
  if (__OFSUB__(v50, v51))
    v52 = (v50 >> 31) + 0x7FFFFFFF;
  v53 = (*(uint64_t (**)(WebCore::RenderMenuList *))(*(_QWORD *)this + 1360))(this);
  v54 = v53 << 6;
  if (v53 < -33554432)
    v54 = 0x80000000;
  if (v53 > 0x1FFFFFF)
    v54 = 0x7FFFFFFF;
  v39 = __OFSUB__(v52, v54);
  v55 = v52 - v54;
  if (v39)
    v55 = (v52 >> 31) + 0x7FFFFFFF;
  v56 = v55 & ~(v55 >> 31);
  v57 = (*(uint64_t (**)(WebCore::RenderMenuList *))(*(_QWORD *)this + 928))(this);
  v39 = __OFSUB__(v56, v57);
  v58 = v56 - v57;
  if (v39)
    v58 = 0x7FFFFFFF;
  v59 = (*(uint64_t (**)(WebCore::RenderMenuList *))(*(_QWORD *)this + 936))(this);
  v60 = v58 - v59;
  if (__OFSUB__(v58, v59))
    v60 = (v58 >> 31) + 0x7FFFFFFF;
  if ((*(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 584) & 0x100) != 0)
  {
    v124 = (*(uint64_t (**)(WebCore::RenderMenuList *))(*(_QWORD *)this + 1360))(this);
    if (v124 >= -33554432)
    {
      v61 = v124 << 6;
      if (v124 > 0x1FFFFFF)
        v61 = 0x7FFFFFFF;
    }
    else
    {
      v61 = 0x80000000;
    }
  }
  else
  {
    v61 = 0;
  }
  v62 = v60 - v61;
  if (__OFSUB__(v60, v61))
    v62 = (v60 >> 31) + 0x7FFFFFFF;
  v63 = *(_DWORD **)(*((_QWORD *)this + 53) + 8);
  v64 = v63[38];
  v65 = *(_DWORD *)a2 + v64;
  if (__OFADD__(*(_DWORD *)a2, v64))
    v65 = (*(_DWORD *)a2 >> 31) + 0x7FFFFFFF;
  v66 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v63 + 944))(v63);
  v67 = v65 + v66;
  if (__OFADD__(v65, v66))
    v67 = (v65 >> 31) + 0x7FFFFFFF;
  v68 = *((_DWORD *)a2 + 1);
  v69 = *(_DWORD **)(*((_QWORD *)this + 53) + 8);
  v70 = v69[39];
  v71 = v68 + v70;
  if (__OFADD__(v68, v70))
    v71 = (v68 >> 31) + 0x7FFFFFFF;
  v72 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v69 + 928))(v69);
  v73 = v71 + v72;
  if (__OFADD__(v71, v72))
    v73 = (v71 >> 31) + 0x7FFFFFFF;
  v74 = *((_QWORD *)this + 53);
  if (v74)
    v75 = *(_QWORD **)(v74 + 8);
  else
    v75 = 0;
  v76 = *((_DWORD *)v75 + 40);
  v77 = (*(uint64_t (**)(_QWORD *))(*v75 + 1016))(v75);
  v78 = v76 - v77;
  if (__OFSUB__(v76, v77))
    v78 = (v76 >> 31) + 0x7FFFFFFF;
  v79 = (*(uint64_t (**)(_QWORD *))(*v75 + 1024))(v75);
  v80 = v78 - v79;
  if (__OFSUB__(v78, v79))
    v80 = (v78 >> 31) + 0x7FFFFFFF;
  v81 = (*(uint64_t (**)(_QWORD *))(*v75 + 1352))(v75);
  v82 = v81 << 6;
  if (v81 < -33554432)
    v82 = 0x80000000;
  if (v81 > 0x1FFFFFF)
    v82 = 0x7FFFFFFF;
  v39 = __OFSUB__(v80, v82);
  v83 = v80 - v82;
  if (v39)
    v83 = (v80 >> 31) + 0x7FFFFFFF;
  v84 = v83 & ~(v83 >> 31);
  v85 = (*(uint64_t (**)(_QWORD *))(*v75 + 944))(v75);
  v39 = __OFSUB__(v84, v85);
  v86 = v84 - v85;
  if (v39)
    v86 = 0x7FFFFFFF;
  v87 = (*(uint64_t (**)(_QWORD *))(*v75 + 952))(v75);
  v88 = v86 - v87;
  if (__OFSUB__(v86, v87))
    v88 = (v86 >> 31) + 0x7FFFFFFF;
  if ((*(_WORD *)(*(_QWORD *)(v75[11] + 40) + 584) & 0x100) != 0)
  {
    v128 = v88;
    v129 = (*(uint64_t (**)(_QWORD *))(*v75 + 1352))(v75);
    if (v129 >= -33554432)
    {
      if (v129 <= 0x1FFFFFF)
        v89 = v129 << 6;
      else
        v89 = 0x7FFFFFFF;
    }
    else
    {
      v89 = 0x80000000;
    }
    v88 = v128;
  }
  else
  {
    v89 = 0;
  }
  v90 = v88 - v89;
  if (__OFSUB__(v88, v89))
    v90 = (v88 >> 31) + 0x7FFFFFFF;
  v91 = *((_QWORD *)this + 53);
  if (v91)
    v92 = *(_QWORD **)(v91 + 8);
  else
    v92 = 0;
  v93 = *((_DWORD *)v92 + 41);
  v94 = (*(uint64_t (**)(_QWORD *))(*v92 + 1000))(v92);
  v95 = v93 - v94;
  if (__OFSUB__(v93, v94))
    v95 = (v93 >> 31) + 0x7FFFFFFF;
  v96 = (*(uint64_t (**)(_QWORD *))(*v92 + 1008))(v92);
  v97 = v95 - v96;
  if (__OFSUB__(v95, v96))
    v97 = (v95 >> 31) + 0x7FFFFFFF;
  v98 = (*(uint64_t (**)(_QWORD *))(*v92 + 1360))(v92);
  v99 = v98 << 6;
  if (v98 < -33554432)
    v99 = 0x80000000;
  if (v98 > 0x1FFFFFF)
    v99 = 0x7FFFFFFF;
  v39 = __OFSUB__(v97, v99);
  v100 = v97 - v99;
  if (v39)
    v100 = (v97 >> 31) + 0x7FFFFFFF;
  v101 = v100 & ~(v100 >> 31);
  v102 = (*(uint64_t (**)(_QWORD *))(*v92 + 928))(v92);
  v39 = __OFSUB__(v101, v102);
  v103 = v101 - v102;
  if (v39)
    v103 = 0x7FFFFFFF;
  v104 = (*(uint64_t (**)(_QWORD *))(*v92 + 936))(v92);
  v105 = v103 - v104;
  if (__OFSUB__(v103, v104))
    v105 = (v103 >> 31) + 0x7FFFFFFF;
  if ((*(_WORD *)(*(_QWORD *)(v92[11] + 40) + 584) & 0x100) != 0)
  {
    v125 = v105;
    v126 = (*(uint64_t (**)(_QWORD *))(*v92 + 1360))(v92);
    if (v126 >= -33554432)
    {
      if (v126 <= 0x1FFFFFF)
        v106 = v126 << 6;
      else
        v106 = 0x7FFFFFFF;
    }
    else
    {
      v106 = 0x80000000;
    }
    v105 = v125;
  }
  else
  {
    v106 = 0;
  }
  v107 = v105 - v106;
  if (__OFSUB__(v105, v106))
    v107 = (v105 >> 31) + 0x7FFFFFFF;
  v108 = v90 & ~(v90 >> 31);
  v109 = v47 & ~(v47 >> 31);
  if (v18 <= v67)
    v110 = v67;
  else
    v110 = v18;
  if ((int)v31 <= (int)v73)
    v111 = v73;
  else
    v111 = v31;
  v39 = __OFADD__(v18, v109);
  v112 = v18 + v109;
  if (v39)
    v112 = (v18 >> 31) + 0x7FFFFFFF;
  v113 = v62 & ~(v62 >> 31);
  v114 = v67 + v108;
  if (__OFADD__(v67, v108))
    v114 = (v67 >> 31) + 0x7FFFFFFF;
  v115 = v107 & ~(v107 >> 31);
  if (v114 >= v112)
    v116 = v112;
  else
    v116 = v114;
  v117 = v31 + v113;
  if (__OFADD__(v31, v113))
    v117 = (v31 >> 31) + 0x7FFFFFFF;
  v39 = __OFADD__(v73, v115);
  v118 = v73 + v115;
  if (v39)
    v118 = (v73 >> 31) + 0x7FFFFFFF;
  if (v118 < v117)
    v117 = v118;
  if (v110 >= v116 || (int)v111 >= v117)
  {
    v110 = 0;
    v111 = 0;
  }
  return v110 | (unint64_t)(v111 << 32);
}

uint64_t WebCore::RenderMenuList::computeIntrinsicLogicalWidths(WebCore::RenderMenuList *this, WebCore::LayoutUnit *a2, WebCore::LayoutUnit *a3)
{
  char *v6;
  void (**v7)(WebCore::RenderThemeIOS *__hidden);
  int v8;
  double v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  int v20;
  int v21;
  void (**v22)(WebCore::RenderThemeIOS *__hidden);
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = (char *)this + 80;
  if (WebCore::RenderStyle::fieldSizing((WebCore::RenderMenuList *)((char *)this + 80)))
    return WebCore::RenderFlexibleBox::computeIntrinsicLogicalWidths(this, a2, a3);
  if (WebCore::RenderElement::shouldApplySizeContainment(this))
  {
    {
      v22 = (void (**)(WebCore::RenderThemeIOS *__hidden))WebCore::RenderTheme::singleton(void)::theme;
    }
    else
    {
      v25 = WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
      *(_OWORD *)(v25 + 40) = 0u;
      *(_OWORD *)(v25 + 24) = 0u;
      v22 = &off_1E335BC30;
      *(_QWORD *)v25 = &off_1E335BC30;
    }
    v8 = ((uint64_t (*)(uint64_t *, char *))v22[35])(&WebCore::RenderTheme::singleton(void)::theme, v6);
  }
  else
  {
    {
      v7 = (void (**)(WebCore::RenderThemeIOS *__hidden))WebCore::RenderTheme::singleton(void)::theme;
    }
    else
    {
      v24 = WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
      *(_OWORD *)(v24 + 40) = 0u;
      *(_OWORD *)(v24 + 24) = 0u;
      v7 = &off_1E335BC30;
      *(_QWORD *)v24 = &off_1E335BC30;
    }
    v8 = ((uint64_t (*)(uint64_t *, char *))v7[35])(&WebCore::RenderTheme::singleton(void)::theme, v6);
    if (*((_DWORD *)this + 109) > v8)
      v8 = *((_DWORD *)this + 109);
  }
  v9 = (float)v8 * 64.0;
  if (v9 >= 2147483650.0)
  {
    v10 = 0x7FFFFFFF;
  }
  else if (v9 <= -2147483650.0)
  {
    v10 = 0x80000000;
  }
  else
  {
    v10 = (int)v9;
  }
  *(_DWORD *)a3 = v10;
  v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 53) + 8) + 976))(*(_QWORD *)(*((_QWORD *)this + 53) + 8));
  v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 53) + 8) + 984))(*(_QWORD *)(*((_QWORD *)this + 53) + 8));
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
    v13 = (v11 >> 31) + 0x7FFFFFFF;
  v14 = __OFADD__(*(_DWORD *)a3, v13);
  v15 = *(_DWORD *)a3 + v13;
  if (v14)
    v15 = (*(_DWORD *)a3 >> 31) + 0x7FFFFFFF;
  *(_DWORD *)a3 = v15;
  if (WebCore::RenderElement::shouldApplySizeOrInlineSizeContainment(this))
  {
    v23 = WebCore::RenderBox::explicitIntrinsicInnerLogicalWidth(this);
    if ((v23 & 0xFF00000000) != 0)
      *(_DWORD *)a3 = v23;
  }
  v16 = *(_QWORD *)(*((_QWORD *)this + 11) + 8);
  v17 = v16 + 12;
  v18 = v16 + 4;
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
    result = v18;
  else
    result = v17;
  v20 = *(unsigned __int8 *)(result + 4);
  if (v20 == 11)
  {
    result = WebCore::valueForLength((unsigned __int8 *)result, 0);
    v21 = result & ~((int)result >> 31);
  }
  else
  {
    if (v20 == 3)
      return result;
    v21 = *(_DWORD *)a3;
  }
  *(_DWORD *)a2 = v21;
  return result;
}

int *WebCore::RenderMenuList::computePreferredLogicalWidths(WebCore::RenderMenuList *this)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  const WebCore::RenderBox *v5;
  uint64_t v6;
  int v7;
  int *result;
  uint64_t v9;
  float v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  if (WebCore::RenderStyle::fieldSizing((WebCore::RenderMenuList *)((char *)this + 80)))
    return WebCore::RenderBlock::computePreferredLogicalWidths(this);
  *((_DWORD *)this + 46) = 0;
  *((_DWORD *)this + 47) = 0;
  v2 = ((*((_DWORD *)this + 31) >> 13) & 6) - 2;
  v3 = *(_QWORD *)(*((_QWORD *)this + 11) + 8);
  if (v2 <= 3)
  {
    if (*(_BYTE *)(v3 + 16) != 4)
      goto LABEL_4;
    v9 = v3 + 12;
  }
  else
  {
    if (*(_BYTE *)(v3 + 8) != 4)
      goto LABEL_4;
    v9 = v3 + 4;
  }
  if (*(_BYTE *)(v9 + 6))
    v10 = *(float *)v9;
  else
    v10 = (float)*(int *)v9;
  if (v10 > 0.0)
  {
    v11 = v2 >= 4;
    v12 = v3 + 12;
    v13 = v3 + 4;
    if (v11)
      v14 = v13;
    else
      v14 = v12;
    v15 = WebCore::RenderBox::adjustContentBoxLogicalWidthForBoxSizing(this, v14);
    *((_DWORD *)this + 46) = v15;
    *((_DWORD *)this + 47) = v15;
    goto LABEL_5;
  }
LABEL_4:
  WebCore::RenderMenuList::computeIntrinsicLogicalWidths(this, (WebCore::RenderMenuList *)((char *)this + 184), (WebCore::RenderMenuList *)((char *)this + 188));
LABEL_5:
  v4 = *(_QWORD *)(*((_QWORD *)this + 11) + 8);
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
  {
    v5 = (const WebCore::RenderBox *)(v4 + 36);
    v6 = v4 + 44;
    v7 = WebCore::RenderBoxModelObject::verticalBorderAndPaddingExtent(this);
  }
  else
  {
    v5 = (const WebCore::RenderBox *)(v4 + 20);
    v6 = v4 + 28;
    v7 = WebCore::RenderBoxModelObject::horizontalBorderAndPaddingExtent(this);
  }
  result = (int *)WebCore::RenderBox::computePreferredLogicalWidths((uint64_t)this, v5, v6, v7);
  *((_DWORD *)this + 5) &= ~0x2000u;
  return result;
}

void WebCore::RenderMenuList::valueChanged(WebCore::RenderMenuList *this, unsigned int a2, int a3)
{
  uint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if (*(_QWORD *)(*(_QWORD *)(v3 + 40) + 8) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 40)
                                                                                                + 8)
                                                                                    + 528)
                                                                        + 8)
                                                            + 296))
  {
    if ((*(_WORD *)(v3 + 28) & 0x10) == 0
      || *(_QWORD *)(*(_QWORD *)(v3 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::selectTag + 24))
    {
      __break(0xC471u);
      JUMPOUT(0x1964195E8);
    }
    if (*(_BYTE *)(v3 + 300))
    {
      WebCore::HTMLSelectElement::recalcListItems(*(_QWORD *)(*((_QWORD *)this + 3) + 8), (void *)1, 1u);
      if ((a2 & 0x80000000) != 0)
        goto LABEL_8;
    }
    else if ((a2 & 0x80000000) != 0)
    {
      goto LABEL_8;
    }
    if (*(_DWORD *)(v3 + 196) > (signed int)a2)
    {
      v6 = *(uint64_t **)(v3 + 184);
      v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6[a2] + 8) + 96) + 24);
      if (v7 == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
      {
        v8 = 0;
        if (a2)
        {
          v9 = a2;
          do
          {
            v10 = *v6++;
            if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 8) + 96) + 24) == v7)
              v8 = (v8 + 1);
            else
              v8 = v8;
            --v9;
          }
          while (v9);
        }
        goto LABEL_9;
      }
    }
LABEL_8:
    v8 = 0xFFFFFFFFLL;
LABEL_9:
    WebCore::HTMLSelectElement::optionSelectedByUser((WebCore::HTMLSelectElement *)v3, (void *)v8, a3, 0);
  }
}

void `non-virtual thunk to'WebCore::RenderMenuList::valueChanged(WebCore::RenderMenuList *this, unsigned int a2, int a3)
{
  uint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *(_QWORD *)(*((_QWORD *)this - 48) + 8);
  if (*(_QWORD *)(*(_QWORD *)(v3 + 40) + 8) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 40)
                                                                                                + 8)
                                                                                    + 528)
                                                                        + 8)
                                                            + 296))
  {
    if ((*(_WORD *)(v3 + 28) & 0x10) == 0
      || *(_QWORD *)(*(_QWORD *)(v3 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::selectTag + 24))
    {
      __break(0xC471u);
      JUMPOUT(0x19641972CLL);
    }
    if (*(_BYTE *)(v3 + 300))
    {
      WebCore::HTMLSelectElement::recalcListItems(*(_QWORD *)(*((_QWORD *)this - 48) + 8), (void *)1, 1u);
      if ((a2 & 0x80000000) != 0)
        goto LABEL_8;
    }
    else if ((a2 & 0x80000000) != 0)
    {
      goto LABEL_8;
    }
    if (*(_DWORD *)(v3 + 196) > (signed int)a2)
    {
      v6 = *(uint64_t **)(v3 + 184);
      v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6[a2] + 8) + 96) + 24);
      if (v7 == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
      {
        v8 = 0;
        if (a2)
        {
          v9 = a2;
          do
          {
            v10 = *v6++;
            if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 8) + 96) + 24) == v7)
              v8 = (v8 + 1);
            else
              v8 = v8;
            --v9;
          }
          while (v9);
        }
        goto LABEL_9;
      }
    }
LABEL_8:
    v8 = 0xFFFFFFFFLL;
LABEL_9:
    WebCore::HTMLSelectElement::optionSelectedByUser((WebCore::HTMLSelectElement *)v3, (void *)v8, a3, 0);
  }
}

void WebCore::RenderMenuList::listBoxSelectItem(WebCore::RenderMenuList *this, void *a2, int a3, int a4, int a5)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v5 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::selectTag + 24))
  {
    WebCore::HTMLSelectElement::listBoxSelectItem((WebCore::HTMLSelectElement *)v5, a2, a3, a4, a5);
  }
  else
  {
    __break(0xC471u);
  }
}

void `non-virtual thunk to'WebCore::RenderMenuList::listBoxSelectItem(WebCore::RenderMenuList *this, void *a2, int a3, int a4, int a5)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*((_QWORD *)this - 48) + 8);
  if ((*(_WORD *)(v5 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::selectTag + 24))
  {
    WebCore::HTMLSelectElement::listBoxSelectItem((WebCore::HTMLSelectElement *)v5, a2, a3, a4, a5);
  }
  else
  {
    __break(0xC471u);
  }
}

uint64_t `non-virtual thunk to'WebCore::RenderMenuList::multiple(WebCore::RenderMenuList *this)
{
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(*((_QWORD *)this - 48) + 8);
  if ((*(_WORD *)(v1 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v1 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::selectTag + 24))
  {
    return *(unsigned __int8 *)(v1 + 297);
  }
  result = 96;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::RenderMenuList::didSetSelectedIndex(WebCore::RenderMenuList *this, unsigned int a2)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v2 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::selectTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x196419940);
  }
  if (*(_BYTE *)(v2 + 300))
  {
    WebCore::HTMLSelectElement::recalcListItems(*(_QWORD *)(*((_QWORD *)this + 3) + 8), (void *)1, 1u);
    if ((a2 & 0x80000000) == 0)
      goto LABEL_5;
LABEL_7:
    v7 = -1;
    return WebCore::RenderMenuList::didUpdateActiveOption((uint64_t)this, v7);
  }
  if ((a2 & 0x80000000) != 0)
    goto LABEL_7;
LABEL_5:
  if (*(_DWORD *)(v2 + 196) <= (signed int)a2)
    goto LABEL_7;
  v5 = *(uint64_t **)(v2 + 184);
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5[a2] + 8) + 96) + 24);
  if (v6 != *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
    goto LABEL_7;
  v7 = 0;
  if (a2)
  {
    v9 = a2;
    do
    {
      v10 = *v5++;
      if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 8) + 96) + 24) == v6)
        ++v7;
      --v9;
    }
    while (v9);
  }
  return WebCore::RenderMenuList::didUpdateActiveOption((uint64_t)this, v7);
}

WebCore::Node *WebCore::RenderMenuList::itemText@<X0>(WebCore::Node *this@<X0>, WTF::StringImpl *a2@<X1>, WTF::StringImpl **a3@<X8>)
{
  uint64_t v4;
  unsigned int v5;
  WebCore::Node *v6;
  uint64_t v7;
  WebCore::HTMLOptGroupElement *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  v4 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v4 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v4 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::selectTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x196419AC0);
  }
  v5 = a2;
  v6 = this;
  if (*(_BYTE *)(v4 + 300))
    this = WebCore::HTMLSelectElement::recalcListItems(*(_QWORD *)(*((_QWORD *)this + 3) + 8), (void *)1, 1u);
  if (*(_DWORD *)(v4 + 196) <= v5)
  {
    *a3 = 0;
  }
  else
  {
    v11 = 0;
    v7 = *(_QWORD *)(*(_QWORD *)(v4 + 184) + 8 * v5);
    if (v7)
      v8 = *(WebCore::HTMLOptGroupElement **)(v7 + 8);
    else
      v8 = 0;
    v9 = *(_QWORD *)(*((_QWORD *)v8 + 12) + 24);
    if (v8 && v9 == *(_QWORD *)(WebCore::HTMLNames::optgroupTag + 24))
    {
      WebCore::HTMLOptGroupElement::groupLabelText(v8, &v11);
    }
    else if (v8 && v9 == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
    {
      WebCore::HTMLOptionElement::textIndentedToRespectGroupLabel(v8, a2, &v11);
    }
    WebCore::applyTextTransform((WebCore::Node *)((char *)v6 + 80), &v11, 32, a3);
    this = v11;
    v11 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        return (WebCore::Node *)WTF::StringImpl::destroy(this, v10);
      else
        *(_DWORD *)this -= 2;
    }
  }
  return this;
}

WebCore::Node *`non-virtual thunk to'WebCore::RenderMenuList::itemText@<X0>(WebCore::RenderMenuList *this@<X0>, WTF::StringImpl *a2@<X1>, WTF::StringImpl **a3@<X8>)
{
  return WebCore::RenderMenuList::itemText((WebCore::RenderMenuList *)((char *)this - 408), a2, a3);
}

void WebCore::RenderMenuList::itemLabel(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void `non-virtual thunk to'WebCore::RenderMenuList::itemLabel(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebCore::RenderMenuList::itemIcon(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void `non-virtual thunk to'WebCore::RenderMenuList::itemIcon(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

WebCore::Node *WebCore::RenderMenuList::itemAccessibilityText@<X0>(WebCore::Node *this@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD **v10;
  uint64_t v11;
  _DWORD *v12;

  v4 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v4 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v4 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::selectTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x196419C1CLL);
  }
  if (*(_BYTE *)(v4 + 300))
    this = WebCore::HTMLSelectElement::recalcListItems(*(_QWORD *)(*((_QWORD *)this + 3) + 8), (void *)1, 1u);
  if (*(_DWORD *)(v4 + 196) <= a2)
  {
    v12 = 0;
    goto LABEL_22;
  }
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 184) + 8 * a2) + 8) + 104);
  if (v6)
  {
    v7 = *(_DWORD *)(v6 + 4);
    if ((v7 & 1) != 0)
    {
      v8 = *(_QWORD *)(v6 + 40);
      LODWORD(v9) = *(_DWORD *)(v6 + 52);
      if ((_DWORD)v9)
      {
LABEL_9:
        v9 = v9;
        v10 = (_DWORD **)(v8 + 8);
        while (1)
        {
          v11 = (uint64_t)*(v10 - 1);
          if (v11 == WebCore::HTMLNames::aria_labelAttr
            || *(_QWORD *)(v11 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_labelAttr + 24)
            && *(_QWORD *)(v11 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_labelAttr + 32))
          {
            goto LABEL_20;
          }
          v10 += 2;
          if (!--v9)
          {
            v10 = (_DWORD **)MEMORY[0x1E0CBF2F8];
            goto LABEL_20;
          }
        }
      }
    }
    else
    {
      v8 = v6 + 32;
      LODWORD(v9) = v7 >> 5;
      if ((_DWORD)v9)
        goto LABEL_9;
    }
  }
  v10 = (_DWORD **)MEMORY[0x1E0CBF2F8];
LABEL_20:
  v12 = *v10;
  if (v12)
    *v12 += 2;
LABEL_22:
  *a3 = v12;
  return this;
}

WebCore::Node *`non-virtual thunk to'WebCore::RenderMenuList::itemAccessibilityText@<X0>(WebCore::RenderMenuList *this@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  return WebCore::RenderMenuList::itemAccessibilityText((WebCore::RenderMenuList *)((char *)this - 408), a2, a3);
}

WebCore::Node *WebCore::RenderMenuList::itemToolTip@<X0>(WebCore::Node *this@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD **v10;
  uint64_t v11;
  _DWORD *v12;

  v4 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v4 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v4 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::selectTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x196419D84);
  }
  if (*(_BYTE *)(v4 + 300))
    this = WebCore::HTMLSelectElement::recalcListItems(*(_QWORD *)(*((_QWORD *)this + 3) + 8), (void *)1, 1u);
  if (*(_DWORD *)(v4 + 196) <= a2)
  {
    v12 = 0;
    goto LABEL_22;
  }
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 184) + 8 * a2) + 8) + 104);
  if (v6)
  {
    v7 = *(_DWORD *)(v6 + 4);
    if ((v7 & 1) != 0)
    {
      v8 = *(_QWORD *)(v6 + 40);
      LODWORD(v9) = *(_DWORD *)(v6 + 52);
      if ((_DWORD)v9)
      {
LABEL_9:
        v9 = v9;
        v10 = (_DWORD **)(v8 + 8);
        while (1)
        {
          v11 = (uint64_t)*(v10 - 1);
          if (v11 == WebCore::HTMLNames::titleAttr
            || *(_QWORD *)(v11 + 24) == *(_QWORD *)(WebCore::HTMLNames::titleAttr + 24)
            && *(_QWORD *)(v11 + 32) == *(_QWORD *)(WebCore::HTMLNames::titleAttr + 32))
          {
            goto LABEL_20;
          }
          v10 += 2;
          if (!--v9)
          {
            v10 = (_DWORD **)MEMORY[0x1E0CBF2F8];
            goto LABEL_20;
          }
        }
      }
    }
    else
    {
      v8 = v6 + 32;
      LODWORD(v9) = v7 >> 5;
      if ((_DWORD)v9)
        goto LABEL_9;
    }
  }
  v10 = (_DWORD **)MEMORY[0x1E0CBF2F8];
LABEL_20:
  v12 = *v10;
  if (v12)
    *v12 += 2;
LABEL_22:
  *a3 = v12;
  return this;
}

WebCore::Node *`non-virtual thunk to'WebCore::RenderMenuList::itemToolTip@<X0>(WebCore::Node *this@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD **v10;
  uint64_t v11;
  _DWORD *v12;

  v4 = *(_QWORD *)(*((_QWORD *)this - 48) + 8);
  if ((*(_WORD *)(v4 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v4 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::selectTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x196419EE8);
  }
  if (*(_BYTE *)(v4 + 300))
    this = WebCore::HTMLSelectElement::recalcListItems(*(_QWORD *)(*((_QWORD *)this - 48) + 8), (void *)1, 1u);
  if (*(_DWORD *)(v4 + 196) <= a2)
  {
    v12 = 0;
    goto LABEL_22;
  }
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 184) + 8 * a2) + 8) + 104);
  if (v6)
  {
    v7 = *(_DWORD *)(v6 + 4);
    if ((v7 & 1) != 0)
    {
      v8 = *(_QWORD *)(v6 + 40);
      LODWORD(v9) = *(_DWORD *)(v6 + 52);
      if ((_DWORD)v9)
      {
LABEL_9:
        v9 = v9;
        v10 = (_DWORD **)(v8 + 8);
        while (1)
        {
          v11 = (uint64_t)*(v10 - 1);
          if (v11 == WebCore::HTMLNames::titleAttr
            || *(_QWORD *)(v11 + 24) == *(_QWORD *)(WebCore::HTMLNames::titleAttr + 24)
            && *(_QWORD *)(v11 + 32) == *(_QWORD *)(WebCore::HTMLNames::titleAttr + 32))
          {
            goto LABEL_20;
          }
          v10 += 2;
          if (!--v9)
          {
            v10 = (_DWORD **)MEMORY[0x1E0CBF2F8];
            goto LABEL_20;
          }
        }
      }
    }
    else
    {
      v8 = v6 + 32;
      LODWORD(v9) = v7 >> 5;
      if ((_DWORD)v9)
        goto LABEL_9;
    }
  }
  v10 = (_DWORD **)MEMORY[0x1E0CBF2F8];
LABEL_20:
  v12 = *v10;
  if (v12)
    *v12 += 2;
LABEL_22:
  *a3 = v12;
  return this;
}

uint64_t WebCore::RenderMenuList::itemIsEnabled(WebCore::RenderMenuList *this, unsigned int a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;

  v2 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v2 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::selectTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x19641A04CLL);
  }
  if (*(_BYTE *)(v2 + 300))
    WebCore::HTMLSelectElement::recalcListItems(*(_QWORD *)(*((_QWORD *)this + 3) + 8), (void *)1, 1u);
  if (*(_DWORD *)(v2 + 196) <= a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 184) + 8 * a2);
  v5 = v4 ? *(_QWORD **)(v4 + 8) : 0;
  if (*(_QWORD *)(v5[12] + 24) != *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
    return 0;
  v7 = v5[4];
  if (v7
    && (~*(unsigned __int16 *)(v7 + 28) & 0x18) == 0
    && *(_QWORD *)(*(_QWORD *)(v7 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::optgroupTag + 24)
    && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 960))(v7) & 1) != 0)
  {
    return 0;
  }
  else
  {
    return (*(unsigned int (**)(_QWORD *))(*v5 + 960))(v5) ^ 1;
  }
}

uint64_t `non-virtual thunk to'WebCore::RenderMenuList::itemIsEnabled(WebCore::RenderMenuList *this, unsigned int a2)
{
  return WebCore::RenderMenuList::itemIsEnabled((WebCore::RenderMenuList *)((char *)this - 408), a2);
}

int *WebCore::RenderMenuList::itemStyle@<X0>(WebCore::RenderMenuList *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::Node *v13;
  void *v14;
  unint64_t v15;
  _BOOL4 v16;
  uint64_t v17;
  int *result;
  float v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  WebCore::Node *v29;
  WebCore::Node *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  BOOL v39;
  unsigned int v40;
  BOOL v42;
  unint64_t v43;
  int v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned __int8 v71;
  char v72;
  char v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;

  v4 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v4 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v4 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::selectTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x19641A208);
  }
  if (*(_BYTE *)(v4 + 300))
    WebCore::HTMLSelectElement::recalcListItems(*(_QWORD *)(*((_QWORD *)this + 3) + 8), (void *)1, 1u);
  v7 = *(_DWORD *)(v4 + 196);
  if (v7 <= a2)
  {
    if (!a2)
      return WebCore::RenderMenuList::menuStyle(this, a3);
    a2 = 0;
  }
  if (v7 <= a2)
  {
    __break(0xC471u);
    JUMPOUT(0x19641A2D4);
  }
  v8 = *(_QWORD *)(*(_QWORD *)(v4 + 184) + 8 * a2);
  if (v8)
    v9 = *(_QWORD *)(v8 + 8);
  else
    v9 = 0;
  v10 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v10 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v10 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::selectTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x19641A230);
  }
  if (*(_BYTE *)(v10 + 300))
    WebCore::HTMLSelectElement::recalcListItems(*(_QWORD *)(*((_QWORD *)this + 3) + 8), (void *)1, 1u);
  if (*(_DWORD *)(v10 + 196) > a2)
  {
    v11 = *(_QWORD *)(*(_QWORD *)(v10 + 184) + 8 * a2);
    if (v11)
      v12 = *(_QWORD *)(v11 + 8);
    else
      v12 = 0;
    v76 = 0;
    if ((*(_BYTE *)(v12 + 22) & 8) == 0 || (v13 = WebCore::Element::resolveComputedStyle(v12, 2)) == 0)
    {
      v16 = 0;
      goto LABEL_56;
    }
    WebCore::RenderStyle::visitedDependentColorWithColorFilter((uint64_t)v13, 61, 0, &v75);
    if ((v76 & 0x8000000000000) != 0)
    {
      v22 = (unsigned int *)(v76 & 0xFFFFFFFFFFFFLL);
      if ((v75 & 0x8000000000000) == 0
        || (v25 = (unsigned int *)(v75 & 0xFFFFFFFFFFFFLL),
            *(float *)((v76 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v75 & 0xFFFFFFFFFFFFLL) + 4))
        || *(float *)((v76 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v75 & 0xFFFFFFFFFFFFLL) + 8)
        || *(float *)((v76 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v75 & 0xFFFFFFFFFFFFLL) + 0xC)
        || *(float *)((v76 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v75 & 0xFFFFFFFFFFFFLL) + 0x10)
        || HIBYTE(v76) != HIBYTE(v75)
        || BYTE6(v76) != BYTE6(v75))
      {
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          atomic_store(1u, v22);
          WTF::fastFree((WTF *)v22, v14);
        }
LABEL_23:
        v15 = v75;
        v76 = v75;
        if ((v75 & 0x4000000000000) == 0)
        {
LABEL_24:
          v16 = 0;
          if ((v15 & 0x8000000000000) == 0)
          {
            v17 = v15;
            goto LABEL_55;
          }
          v19 = *(float *)((v15 & 0xFFFFFFFFFFFFLL) + 0x10);
          goto LABEL_34;
        }
LABEL_53:
        if ((v15 & 0x8000000000000) == 0)
        {
          v17 = v15;
          v16 = v15 != 0;
LABEL_55:
          if (v17 == 255)
            goto LABEL_66;
          goto LABEL_56;
        }
        v19 = *(float *)((v15 & 0xFFFFFFFFFFFFLL) + 0x10);
        v16 = v19 > 0.0;
LABEL_34:
        if (v19 == 1.0)
        {
          v20 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFLL);
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 + 1, v20));
          goto LABEL_66;
        }
LABEL_56:
        WebCore::RenderStyle::visitedDependentColorWithColorFilter((uint64_t)this + 80, 61, 0, &v74);
        WebCore::blendSourceOver(&v74, (const WebCore::Color *)&v76, &v75);
        if ((v76 & 0x8000000000000) != 0)
        {
          v61 = (unsigned int *)(v76 & 0xFFFFFFFFFFFFLL);
          if ((v75 & 0x8000000000000) == 0
            || (v67 = (unsigned int *)(v75 & 0xFFFFFFFFFFFFLL),
                *(float *)((v76 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v75 & 0xFFFFFFFFFFFFLL) + 4))
            || *(float *)((v76 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v75 & 0xFFFFFFFFFFFFLL) + 8)
            || *(float *)((v76 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v75 & 0xFFFFFFFFFFFFLL) + 0xC)
            || *(float *)((v76 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v75 & 0xFFFFFFFFFFFFLL) + 0x10)
            || HIBYTE(v76) != HIBYTE(v75)
            || BYTE6(v76) != BYTE6(v75))
          {
            do
            {
              v62 = __ldaxr(v61);
              v63 = v62 - 1;
            }
            while (__stlxr(v63, v61));
            if (!v63)
            {
              atomic_store(1u, v61);
              WTF::fastFree((WTF *)v61, v14);
            }
            goto LABEL_59;
          }
          do
          {
            v68 = __ldaxr(v67);
            v69 = v68 - 1;
          }
          while (__stlxr(v69, v67));
          if (!v69)
          {
            atomic_store(1u, v67);
            WTF::fastFree((WTF *)v67, v14);
          }
        }
        else if (v76 != v75 || (v75 & 0x8000000000000) != 0)
        {
LABEL_59:
          v28 = v75;
          v75 = 0;
          v76 = v28;
        }
        if ((v74 & 0x8000000000000) != 0)
        {
          v58 = (unsigned int *)(v74 & 0xFFFFFFFFFFFFLL);
          do
          {
            v59 = __ldaxr(v58);
            v60 = v59 - 1;
          }
          while (__stlxr(v60, v58));
          if (!v60)
          {
            atomic_store(1u, v58);
            WTF::fastFree((WTF *)v58, v14);
          }
        }
        v15 = v76;
        if ((v76 & 0x8000000000000) != 0)
        {
          v49 = (unsigned int *)(v76 & 0xFFFFFFFFFFFFLL);
          if (*(float *)((v76 & 0xFFFFFFFFFFFFLL) + 0x10) != 1.0)
            goto LABEL_63;
          do
            v50 = __ldaxr(v49);
          while (__stlxr(v50 + 1, v49));
        }
        else if ((_BYTE)v76 != 0xFF)
        {
LABEL_63:
          v74 = 0x11040000FFFFFFFFLL;
          WebCore::blendSourceOver(&v74, (const WebCore::Color *)&v76, &v75);
          v15 = v75;
          if (v75)
            v75 = 0;
          if ((v74 & 0x8000000000000) != 0)
          {
            v64 = (unsigned int *)(v74 & 0xFFFFFFFFFFFFLL);
            do
            {
              v65 = __ldaxr(v64);
              v66 = v65 - 1;
            }
            while (__stlxr(v66, v64));
            if (!v66)
            {
              atomic_store(1u, v64);
              WTF::fastFree((WTF *)v64, v14);
            }
          }
        }
LABEL_66:
        if ((v76 & 0x8000000000000) != 0)
        {
          v55 = (unsigned int *)(v76 & 0xFFFFFFFFFFFFLL);
          do
          {
            v56 = __ldaxr(v55);
            v57 = v56 - 1;
          }
          while (__stlxr(v57, v55));
          if (!v57)
          {
            atomic_store(1u, v55);
            WTF::fastFree((WTF *)v55, v14);
          }
        }
        goto LABEL_67;
      }
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        atomic_store(1u, v25);
        WTF::fastFree((WTF *)v25, v14);
      }
    }
    else if (v76 != v75 || (v75 & 0x8000000000000) != 0)
    {
      goto LABEL_23;
    }
    v15 = v76;
    if ((v76 & 0x4000000000000) == 0)
      goto LABEL_24;
    goto LABEL_53;
  }
  WebCore::RenderStyle::visitedDependentColorWithColorFilter((uint64_t)this + 80, 61, 0, &v76);
  v16 = 0;
  v15 = v76;
LABEL_67:
  if ((*(_BYTE *)(v9 + 22) & 8) != 0 && (v29 = WebCore::Element::resolveComputedStyle(v9, 2)) != 0)
  {
    v30 = v29;
    WebCore::RenderStyle::visitedDependentColorWithColorFilter((uint64_t)v29, 5, 0, &v76);
    v31 = *((_QWORD *)v30 + 3);
    v32 = *((_QWORD *)v30 + 4);
    v33 = *((_DWORD *)v30 + 10);
    v34 = v33 & 0x30;
    v35 = *((_QWORD *)v30 + 2);
    v36 = v35 & 0x1F;
    v70 = 0;
    v73 = 0;
    v71 = *(_BYTE *)(v31 + 180);
    v72 = *(_BYTE *)(v31 + 181);
    if (v71 - 2 >= 9)
    {
      if (v71 == 11)
      {
        v70 = *(_DWORD *)(v31 + 176);
        WebCore::Length::ref((int *)&v70);
        v33 = *((_DWORD *)v30 + 10);
        v35 = *((_QWORD *)v30 + 2);
      }
    }
    else
    {
      v73 = *(_BYTE *)(v31 + 182);
      v70 = *(_DWORD *)(v31 + 176);
    }
    v39 = v34 == 0;
    v40 = (v35 >> 22) & 7;
    v42 = v40 == 2 || v40 == 5;
    v43 = v76;
    *(_QWORD *)a3 = v76;
    if ((v43 & 0x8000000000000) != 0)
    {
      v45 = (unsigned int *)(v43 & 0xFFFFFFFFFFFFLL);
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 + 1, v45));
    }
    *(_QWORD *)(a3 + 8) = v15;
    if ((v15 & 0x8000000000000) != 0)
    {
      v47 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFLL);
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 + 1, v47));
    }
    WebCore::FontCascade::FontCascade((WebCore::FontCascade *)(a3 + 16), (const WebCore::FontCascade *)(v32 + 32));
    *(_BYTE *)(a3 + 312) = v39;
    *(_BYTE *)(a3 + 313) = v36 == 26;
    *(_BYTE *)(a3 + 314) = 1;
    result = (int *)(a3 + 316);
    *(_DWORD *)(a3 + 316) = 0;
    *(_BYTE *)(a3 + 322) = 0;
    v44 = v71;
    *(_BYTE *)(a3 + 320) = v71;
    *(_BYTE *)(a3 + 321) = v72;
    if ((v44 - 2) >= 9)
    {
      if (v44 == 11)
      {
        *result = v70;
        result = WebCore::Length::ref(result);
      }
    }
    else
    {
      *(_BYTE *)(a3 + 322) = v73;
      *result = v70;
    }
    *(_BYTE *)(a3 + 324) = (v33 & 0x4000000) != 0;
    *(_BYTE *)(a3 + 325) = v42;
    *(_DWORD *)(a3 + 328) = v16;
    *(_DWORD *)(a3 + 332) = 0;
    *(_BYTE *)(a3 + 336) = 0;
    if (v44 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v70);
    }
    v38 = v15 & 0x8000000000000;
    if ((v76 & 0x8000000000000) != 0)
    {
      result = (int *)(v76 & 0xFFFFFFFFFFFFLL);
      do
      {
        v53 = __ldaxr((unsigned int *)result);
        v54 = v53 - 1;
      }
      while (__stlxr(v54, (unsigned int *)result));
      if (!v54)
      {
        atomic_store(1u, (unsigned int *)result);
        result = (int *)WTF::fastFree((WTF *)result, v37);
      }
    }
  }
  else
  {
    result = WebCore::RenderMenuList::menuStyle(this, a3);
    v38 = v15 & 0x8000000000000;
  }
  if (v38)
  {
    result = (int *)(v15 & 0xFFFFFFFFFFFFLL);
    do
    {
      v51 = __ldaxr((unsigned int *)result);
      v52 = v51 - 1;
    }
    while (__stlxr(v52, (unsigned int *)result));
    if (!v52)
    {
      atomic_store(1u, (unsigned int *)result);
      return (int *)WTF::fastFree((WTF *)result, v37);
    }
  }
  return result;
}

int *WebCore::RenderMenuList::menuStyle@<X0>(WebCore::RenderMenuList *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  WebCore::RenderMenuList *v5;
  WebCore::RenderMenuList *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  BOOL v19;
  void (**v20)(WebCore::RenderThemeIOS *__hidden);
  const WebCore::FontCascade *v21;
  BOOL v22;
  BOOL v23;
  char v24;
  unint64_t v25;
  unint64_t v26;
  void *v27;
  int *result;
  int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  unsigned __int8 v41;
  char v42;
  char v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD v46[2];

  v4 = *((_QWORD *)this + 53);
  v5 = this;
  if (v4)
  {
    v6 = *(WebCore::RenderMenuList **)(v4 + 8);
    if (v6)
      v5 = v6;
    else
      v5 = this;
  }
  v7 = (char *)v5 + 80;
  v46[0] = WebCore::RenderObject::absoluteBoundingBoxRect(this, 0, 0);
  v46[1] = v8;
  WebCore::RenderStyle::visitedDependentColorWithColorFilter((uint64_t)v5 + 80, 5, 0, &v45);
  WebCore::RenderStyle::visitedDependentColorWithColorFilter((uint64_t)v5 + 80, 61, 0, &v44);
  v9 = *((_QWORD *)v5 + 13);
  v10 = (*(_BYTE *)(v9 + 239) & 4) == 0 && (*((_BYTE *)v5 + 120) & 0x30) == 0;
  v11 = *((_QWORD *)v5 + 14);
  v12 = *((_QWORD *)v5 + 12);
  v13 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 148);
  v40 = 0;
  v43 = 0;
  v41 = *(_BYTE *)(v9 + 180);
  v42 = *(_BYTE *)(v9 + 181);
  if (v41 - 2 >= 9)
  {
    if (v41 == 11)
    {
      v40 = *(_DWORD *)(v9 + 176);
      WebCore::Length::ref((int *)&v40);
    }
  }
  else
  {
    v43 = *(_BYTE *)(v9 + 182);
    v40 = *(_DWORD *)(v9 + 176);
  }
  v14 = v13 & 0x1FC000;
  v15 = v12 & 0x1F;
  v16 = *((_DWORD *)this + 30);
  v17 = (*((_DWORD *)this + 24) >> 22) & 7;
  v19 = v17 == 2 || v17 == 5;
  {
    v20 = (void (**)(WebCore::RenderThemeIOS *__hidden))WebCore::RenderTheme::singleton(void)::theme;
  }
  else
  {
    v39 = v15;
    v34 = WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
    v15 = v39;
    *(_OWORD *)(v34 + 40) = 0u;
    *(_OWORD *)(v34 + 24) = 0u;
    v20 = &off_1E335BC30;
    *(_QWORD *)v34 = &off_1E335BC30;
  }
  v21 = (const WebCore::FontCascade *)(v11 + 32);
  v22 = v15 == 26;
  v23 = v14 == 147456;
  v24 = ((uint64_t (*)(uint64_t *, char *, _QWORD *))v20[39])(&WebCore::RenderTheme::singleton(void)::theme, v7, v46);
  v25 = v45;
  *(_QWORD *)a2 = v45;
  if ((v25 & 0x8000000000000) != 0)
  {
    v30 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFLL);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 + 1, v30));
  }
  v26 = v44;
  *(_QWORD *)(a2 + 8) = v44;
  if ((v26 & 0x8000000000000) != 0)
  {
    v32 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFLL);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 + 1, v32));
  }
  WebCore::FontCascade::FontCascade((WebCore::FontCascade *)(a2 + 16), v21);
  *(_BYTE *)(a2 + 312) = v10;
  *(_BYTE *)(a2 + 313) = v22;
  *(_BYTE *)(a2 + 314) = v23;
  result = (int *)(a2 + 316);
  *(_DWORD *)(a2 + 316) = 0;
  *(_BYTE *)(a2 + 322) = 0;
  v29 = v41;
  *(_BYTE *)(a2 + 320) = v41;
  *(_BYTE *)(a2 + 321) = v42;
  if ((v29 - 2) >= 9)
  {
    if (v29 == 11)
    {
      *result = v40;
      result = WebCore::Length::ref(result);
    }
  }
  else
  {
    *(_BYTE *)(a2 + 322) = v43;
    *result = v40;
  }
  *(_BYTE *)(a2 + 324) = (v16 & 0x4000000) != 0;
  *(_BYTE *)(a2 + 325) = v19;
  *(_QWORD *)(a2 + 328) = 0;
  *(_BYTE *)(a2 + 336) = v24;
  if (v29 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v40);
  }
  if ((v44 & 0x8000000000000) != 0)
  {
    result = (int *)(v44 & 0xFFFFFFFFFFFFLL);
    do
    {
      v35 = __ldaxr((unsigned int *)result);
      v36 = v35 - 1;
    }
    while (__stlxr(v36, (unsigned int *)result));
    if (!v36)
    {
      atomic_store(1u, (unsigned int *)result);
      result = (int *)WTF::fastFree((WTF *)result, v27);
    }
  }
  if ((v45 & 0x8000000000000) != 0)
  {
    result = (int *)(v45 & 0xFFFFFFFFFFFFLL);
    do
    {
      v37 = __ldaxr((unsigned int *)result);
      v38 = v37 - 1;
    }
    while (__stlxr(v38, (unsigned int *)result));
    if (!v38)
    {
      atomic_store(1u, (unsigned int *)result);
      return (int *)WTF::fastFree((WTF *)result, v27);
    }
  }
  return result;
}

int *`non-virtual thunk to'WebCore::RenderMenuList::itemStyle@<X0>(WebCore::RenderMenuList *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  return WebCore::RenderMenuList::itemStyle((WebCore::RenderMenuList *)((char *)this - 408), a2, a3);
}

int *`non-virtual thunk to'WebCore::RenderMenuList::menuStyle@<X0>(WebCore::RenderMenuList *this@<X0>, uint64_t a2@<X8>)
{
  return WebCore::RenderMenuList::menuStyle((WebCore::RenderMenuList *)((char *)this - 408), a2);
}

uint64_t `non-virtual thunk to'WebCore::RenderMenuList::hostWindow(WebCore::RenderMenuList *this)
{
  return WebCore::RenderObject::hostWindow((WebCore::RenderMenuList *)((char *)this - 408));
}

uint64_t WebCore::RenderMenuList::createScrollbar@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  char v22;
  char v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char **v28;

  if ((*(_BYTE *)(a1 + 103) & 2) == 0 || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 40) + 586))
  {
LABEL_2:
    v9 = WTF::fastMalloc((WTF *)0xD0);
    result = WebCore::Scrollbar::Scrollbar(v9, a2, a3, a4, 0, 0);
LABEL_3:
    *a5 = result;
    return result;
  }
  v11 = *(_QWORD *)(a1 + 104);
  v12 = *(unsigned int *)(v11 + 392);
  if ((_DWORD)v12)
  {
    v17 = *(_QWORD *)(a1 + 104);
    v24 = &v23;
    v25 = &v23;
    v26 = &v23;
    v27 = &v23;
    if ((_DWORD)v12 == -1)
      goto LABEL_19;
  }
  else
  {
    if ((*(_BYTE *)(v11 + 390) & 4) == 0)
    {
      v13 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
      if ((*(_WORD *)(v13 + 28) & 0x10) == 0
        || *(_QWORD *)(*(_QWORD *)(v13 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::selectTag + 24))
      {
        __break(0xC471u);
        JUMPOUT(0x19641ACC8);
      }
      v14 = WTF::fastMalloc((WTF *)0xE8);
      result = WebCore::RenderScrollbar::RenderScrollbar(v14, a2, a3, v13, 0);
      goto LABEL_3;
    }
    v17 = *(_QWORD *)(a1 + 104);
    v24 = &v23;
    v25 = &v23;
    v26 = &v23;
    v27 = &v23;
  }
  v28 = &v24;
  ((void (*)(uint64_t *__return_ptr, char ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v12])(&v18, &v28, v11 + 384);
  v24 = &v23;
  v25 = &v23;
  v26 = &v23;
  v27 = &v23;
  v15 = *(unsigned int *)(v17 + 408);
  if ((_DWORD)v15 != -1)
  {
    v28 = &v24;
    ((void (*)(uint64_t *__return_ptr, char ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v15])(&v20, &v28, v17 + 400);
    v22 = 1;
    if (v21 != -1)
      ((void (*)(char **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v21])(&v24, &v20);
    v21 = -1;
    if (v19 != -1)
      ((void (*)(char **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v19])(&v24, &v18);
    goto LABEL_2;
  }
LABEL_19:
  v16 = std::__throw_bad_variant_access[abi:sn180100]();
}

uint64_t `non-virtual thunk to'WebCore::RenderMenuList::createScrollbar@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  return WebCore::RenderMenuList::createScrollbar(a1 - 408, a2, a3, a4, a5);
}

uint64_t WebCore::RenderMenuList::clientInsetLeft(WebCore::RenderMenuList *this)
{
  return 0;
}

uint64_t `non-virtual thunk to'WebCore::RenderMenuList::clientInsetLeft(WebCore::RenderMenuList *this)
{
  return 0;
}

uint64_t WebCore::RenderMenuList::clientInsetRight(WebCore::RenderMenuList *this)
{
  return 0;
}

uint64_t `non-virtual thunk to'WebCore::RenderMenuList::clientInsetRight(WebCore::RenderMenuList *this)
{
  return 0;
}

uint64_t WebCore::RenderMenuList::clientPaddingLeft(WebCore::RenderMenuList *this)
{
  uint64_t v2;
  unsigned __int8 *v3;
  int v4;
  float v5;
  float v6;
  double v7;
  unsigned int v8;
  int v9;
  BOOL v10;
  uint64_t result;
  float v12;
  float v13;
  double v14;
  int v15;

  v2 = *((_QWORD *)this + 11);
  if (((*(_DWORD *)(*(_QWORD *)(v2 + 32) + 148) >> 14) & 0x7Fu) - 9 <= 1 && (*((_BYTE *)this + 123) & 4) != 0)
    return 128;
  v3 = *(unsigned __int8 **)(v2 + 24);
  v4 = v3[100];
  if ((v4 & 0xFFFFFFF7) == 3)
  {
    v15 = (*(uint64_t (**)(WebCore::RenderMenuList *))(*(_QWORD *)this + 1144))(this);
    v4 = v3[100];
    v5 = (float)v15 * 0.015625;
  }
  else
  {
    v5 = 0.0;
  }
  if (v4 == 4)
  {
    v6 = *((float *)v3 + 24);
    if (!v3[102])
      v6 = (float)SLODWORD(v6);
    goto LABEL_8;
  }
  if (v4 == 3)
  {
    v12 = *((float *)v3 + 24);
    if (!v3[102])
      v12 = (float)SLODWORD(v12);
    v6 = (float)(v5 * v12) / 100.0;
LABEL_8:
    v7 = v6 * 64.0;
    if (v7 < 2147483650.0)
    {
      if (v7 <= -2147483650.0)
        v8 = 0x80000000;
      else
        v8 = (int)v7;
      goto LABEL_11;
    }
    goto LABEL_25;
  }
  if (v4 != 11)
  {
    v8 = 0;
    goto LABEL_11;
  }
  WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v3 + 96), v5);
  v14 = v13 * 64.0;
  if (v14 < 2147483650.0)
  {
    if (v14 > -2147483650.0)
      v8 = (int)v14;
    else
      v8 = 0x80000000;
    goto LABEL_11;
  }
LABEL_25:
  v8 = 0x7FFFFFFF;
LABEL_11:
  v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 53) + 8) + 944))(*(_QWORD *)(*((_QWORD *)this + 53) + 8));
  v10 = __OFADD__(v8, v9);
  result = v8 + v9;
  if (v10)
    return (v8 >> 31) + 0x7FFFFFFF;
  return result;
}

uint64_t `non-virtual thunk to'WebCore::RenderMenuList::clientPaddingLeft(WebCore::RenderMenuList *this)
{
  return WebCore::RenderMenuList::clientPaddingLeft((WebCore::RenderMenuList *)((char *)this - 408));
}

uint64_t WebCore::RenderMenuList::clientPaddingRight(WebCore::RenderMenuList *this)
{
  uint64_t v2;
  uint64_t result;
  unsigned __int8 *v4;
  int v5;
  float v6;
  float v7;
  double v8;
  unsigned int v9;
  int v10;
  BOOL v11;
  float v12;
  float v13;
  double v14;
  int v15;

  v2 = *((_QWORD *)this + 11);
  if (((*(_DWORD *)(*(_QWORD *)(v2 + 32) + 148) >> 14) & 0x7Fu) - 9 <= 1 && (*((_BYTE *)this + 123) & 4) == 0)
    return 128;
  v4 = *(unsigned __int8 **)(v2 + 24);
  v5 = v4[84];
  if ((v5 & 0xFFFFFFF7) == 3)
  {
    v15 = (*(uint64_t (**)(WebCore::RenderMenuList *))(*(_QWORD *)this + 1144))(this);
    v5 = v4[84];
    v6 = (float)v15 * 0.015625;
  }
  else
  {
    v6 = 0.0;
  }
  if (v5 == 4)
  {
    v7 = *((float *)v4 + 20);
    if (!v4[86])
      v7 = (float)SLODWORD(v7);
    goto LABEL_9;
  }
  if (v5 == 3)
  {
    v12 = *((float *)v4 + 20);
    if (!v4[86])
      v12 = (float)SLODWORD(v12);
    v7 = (float)(v6 * v12) / 100.0;
LABEL_9:
    v8 = v7 * 64.0;
    if (v8 < 2147483650.0)
    {
      if (v8 <= -2147483650.0)
        v9 = 0x80000000;
      else
        v9 = (int)v8;
      goto LABEL_12;
    }
    goto LABEL_25;
  }
  if (v5 != 11)
  {
    v9 = 0;
    goto LABEL_12;
  }
  WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v4 + 80), v6);
  v14 = v13 * 64.0;
  if (v14 < 2147483650.0)
  {
    if (v14 > -2147483650.0)
      v9 = (int)v14;
    else
      v9 = 0x80000000;
    goto LABEL_12;
  }
LABEL_25:
  v9 = 0x7FFFFFFF;
LABEL_12:
  v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 53) + 8) + 952))(*(_QWORD *)(*((_QWORD *)this + 53) + 8));
  v11 = __OFADD__(v9, v10);
  result = v9 + v10;
  if (v11)
    return (v9 >> 31) + 0x7FFFFFFF;
  return result;
}

uint64_t `non-virtual thunk to'WebCore::RenderMenuList::clientPaddingRight(WebCore::RenderMenuList *this)
{
  return WebCore::RenderMenuList::clientPaddingRight((WebCore::RenderMenuList *)((char *)this - 408));
}

uint64_t WebCore::RenderMenuList::listSize(WebCore::RenderMenuList *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v1 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v1 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::selectTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x19641B18CLL);
  }
  if (*(_BYTE *)(v1 + 300))
    WebCore::HTMLSelectElement::recalcListItems(*(_QWORD *)(*((_QWORD *)this + 3) + 8), (void *)1, 1u);
  return *(unsigned int *)(v1 + 196);
}

uint64_t `non-virtual thunk to'WebCore::RenderMenuList::listSize(WebCore::RenderMenuList *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*((_QWORD *)this - 48) + 8);
  if ((*(_WORD *)(v1 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v1 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::selectTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x19641B218);
  }
  if (*(_BYTE *)(v1 + 300))
    WebCore::HTMLSelectElement::recalcListItems(*(_QWORD *)(*((_QWORD *)this - 48) + 8), (void *)1, 1u);
  return *(unsigned int *)(v1 + 196);
}

uint64_t WebCore::RenderMenuList::selectedIndex(WebCore::RenderMenuList *this)
{
  uint64_t v1;
  int v2;
  uint64_t result;

  v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v1 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v1 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::selectTag + 24))
  {
    v2 = WebCore::HTMLSelectElement::selectedIndex(*(WebCore::HTMLSelectElement **)(*((_QWORD *)this + 3) + 8));
    return WebCore::HTMLSelectElement::optionToListIndex((WebCore::HTMLSelectElement *)v1, v2);
  }
  else
  {
    result = 96;
    __break(0xC471u);
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::RenderMenuList::selectedIndex(WebCore::RenderMenuList *this)
{
  uint64_t v1;
  int v2;
  uint64_t result;

  v1 = *(_QWORD *)(*((_QWORD *)this - 48) + 8);
  if ((*(_WORD *)(v1 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v1 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::selectTag + 24))
  {
    v2 = WebCore::HTMLSelectElement::selectedIndex(*(WebCore::HTMLSelectElement **)(*((_QWORD *)this - 48) + 8));
    return WebCore::HTMLSelectElement::optionToListIndex((WebCore::HTMLSelectElement *)v1, v2);
  }
  else
  {
    result = 96;
    __break(0xC471u);
  }
  return result;
}

BOOL WebCore::RenderMenuList::itemIsSeparator(WebCore::RenderMenuList *this, unsigned int a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v2 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::selectTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x19641B3DCLL);
  }
  if (*(_BYTE *)(v2 + 300))
    WebCore::HTMLSelectElement::recalcListItems(*(_QWORD *)(*((_QWORD *)this + 3) + 8), (void *)1, 1u);
  return *(_DWORD *)(v2 + 196) > a2
      && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 184) + 8 * a2) + 8) + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::hrTag + 24);
}

BOOL `non-virtual thunk to'WebCore::RenderMenuList::itemIsSeparator(WebCore::RenderMenuList *this, unsigned int a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*((_QWORD *)this - 48) + 8);
  if ((*(_WORD *)(v2 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::selectTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x19641B4A8);
  }
  if (*(_BYTE *)(v2 + 300))
    WebCore::HTMLSelectElement::recalcListItems(*(_QWORD *)(*((_QWORD *)this - 48) + 8), (void *)1, 1u);
  return *(_DWORD *)(v2 + 196) > a2
      && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 184) + 8 * a2) + 8) + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::hrTag + 24);
}

BOOL WebCore::RenderMenuList::itemIsLabel(WebCore::RenderMenuList *this, unsigned int a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v2 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::selectTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x19641B570);
  }
  if (*(_BYTE *)(v2 + 300))
    WebCore::HTMLSelectElement::recalcListItems(*(_QWORD *)(*((_QWORD *)this + 3) + 8), (void *)1, 1u);
  return *(_DWORD *)(v2 + 196) > a2
      && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 184) + 8 * a2) + 8) + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::optgroupTag + 24);
}

BOOL `non-virtual thunk to'WebCore::RenderMenuList::itemIsLabel(WebCore::RenderMenuList *this, unsigned int a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*((_QWORD *)this - 48) + 8);
  if ((*(_WORD *)(v2 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::selectTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x19641B63CLL);
  }
  if (*(_BYTE *)(v2 + 300))
    WebCore::HTMLSelectElement::recalcListItems(*(_QWORD *)(*((_QWORD *)this - 48) + 8), (void *)1, 1u);
  return *(_DWORD *)(v2 + 196) > a2
      && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 184) + 8 * a2) + 8) + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::optgroupTag + 24);
}

uint64_t WebCore::RenderMenuList::itemIsSelected(WebCore::RenderMenuList *this, unsigned int a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v2 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::selectTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x19641B718);
  }
  if (*(_BYTE *)(v2 + 300))
    WebCore::HTMLSelectElement::recalcListItems(*(_QWORD *)(*((_QWORD *)this + 3) + 8), (void *)1, 1u);
  if (*(_DWORD *)(v2 + 196) > a2
    && (v4 = *(_QWORD *)(*(_QWORD *)(v2 + 184) + 8 * a2)) != 0
    && (v5 = *(_QWORD *)(v4 + 8)) != 0
    && *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
  {
    return WebCore::HTMLOptionElement::selected(v5, 1u);
  }
  else
  {
    return 0;
  }
}

uint64_t `non-virtual thunk to'WebCore::RenderMenuList::itemIsSelected(WebCore::RenderMenuList *this, unsigned int a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*((_QWORD *)this - 48) + 8);
  if ((*(_WORD *)(v2 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::selectTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x19641B7F8);
  }
  if (*(_BYTE *)(v2 + 300))
    WebCore::HTMLSelectElement::recalcListItems(*(_QWORD *)(*((_QWORD *)this - 48) + 8), (void *)1, 1u);
  if (*(_DWORD *)(v2 + 196) > a2
    && (v4 = *(_QWORD *)(*(_QWORD *)(v2 + 184) + 8 * a2)) != 0
    && (v5 = *(_QWORD *)(v4 + 8)) != 0
    && *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
  {
    return WebCore::HTMLOptionElement::selected(v5, 1u);
  }
  else
  {
    return 0;
  }
}

WTF::StringImpl *WebCore::RenderMenuList::setTextFromItem(WebCore::RenderMenuList *this, unsigned int a2)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v2 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::selectTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x19641B8D0);
  }
  if (*(_BYTE *)(v2 + 300))
  {
    WebCore::HTMLSelectElement::recalcListItems(*(_QWORD *)(*((_QWORD *)this + 3) + 8), (void *)1, 1u);
    if ((a2 & 0x80000000) == 0)
      goto LABEL_5;
LABEL_7:
    v7 = -1;
    return WebCore::RenderMenuList::setTextFromOption(this, v7);
  }
  if ((a2 & 0x80000000) != 0)
    goto LABEL_7;
LABEL_5:
  if (*(_DWORD *)(v2 + 196) <= (signed int)a2)
    goto LABEL_7;
  v5 = *(uint64_t **)(v2 + 184);
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5[a2] + 8) + 96) + 24);
  if (v6 != *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
    goto LABEL_7;
  v7 = 0;
  if (a2)
  {
    v9 = a2;
    do
    {
      v10 = *v5++;
      if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 8) + 96) + 24) == v6)
        ++v7;
      --v9;
    }
    while (v9);
  }
  return WebCore::RenderMenuList::setTextFromOption(this, v7);
}

WTF::StringImpl *`non-virtual thunk to'WebCore::RenderMenuList::setTextFromItem(WebCore::RenderMenuList *this, unsigned int a2)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(*((_QWORD *)this - 48) + 8);
  if ((*(_WORD *)(v2 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::selectTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x19641B9E0);
  }
  if (*(_BYTE *)(v2 + 300))
  {
    WebCore::HTMLSelectElement::recalcListItems(*(_QWORD *)(*((_QWORD *)this - 48) + 8), (void *)1, 1u);
    if ((a2 & 0x80000000) == 0)
      goto LABEL_5;
LABEL_7:
    v7 = -1;
    return WebCore::RenderMenuList::setTextFromOption((WebCore::RenderMenuList *)((char *)this - 408), v7);
  }
  if ((a2 & 0x80000000) != 0)
    goto LABEL_7;
LABEL_5:
  if (*(_DWORD *)(v2 + 196) <= (signed int)a2)
    goto LABEL_7;
  v5 = *(uint64_t **)(v2 + 184);
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5[a2] + 8) + 96) + 24);
  if (v6 != *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
    goto LABEL_7;
  v7 = 0;
  if (a2)
  {
    v9 = a2;
    do
    {
      v10 = *v5++;
      if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 8) + 96) + 24) == v6)
        ++v7;
      --v9;
    }
    while (v9);
  }
  return WebCore::RenderMenuList::setTextFromOption((WebCore::RenderMenuList *)((char *)this - 408), v7);
}

uint64_t WebCore::RenderMenuList::fontSelector(WebCore::RenderMenuList *this)
{
  WebCore::Document *v1;

  v1 = *(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8);
  if (*((_QWORD *)v1 + 331))
    return *((_QWORD *)v1 + 331);
  else
    return WebCore::Document::ensureFontSelector(v1);
}

uint64_t `non-virtual thunk to'WebCore::RenderMenuList::fontSelector(WebCore::RenderMenuList *this)
{
  WebCore::Document *v1;

  v1 = *(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this - 48) + 8) + 40) + 8);
  if (*((_QWORD *)v1 + 331))
    return *((_QWORD *)v1 + 331);
  else
    return WebCore::Document::ensureFontSelector(v1);
}

int *WebCore::RenderMenuList::layout(WebCore::RenderMenuList *this)
{
  WebCore::RenderBox *v2;

  WebCore::RenderBlock::layout(this);
  return WebCore::RenderThemeIOS::adjustRoundBorderRadius((int *)this + 20, this, v2);
}

void WebCore::RenderMeter::~RenderMeter(WebCore::RenderMeter *this, void *a2)
{
  uint64_t v2;
  void *v3;

  WebCore::RenderBlockFlow::~RenderBlockFlow(this, a2);
  if (*(_DWORD *)(v2 + 16))
  {
    *(_QWORD *)(v2 + 240) = 0;
    *(_OWORD *)(v2 + 208) = 0u;
    *(_OWORD *)(v2 + 224) = 0u;
    *(_OWORD *)(v2 + 176) = 0u;
    *(_OWORD *)(v2 + 192) = 0u;
    *(_OWORD *)(v2 + 144) = 0u;
    *(_OWORD *)(v2 + 160) = 0u;
    *(_OWORD *)(v2 + 112) = 0u;
    *(_OWORD *)(v2 + 128) = 0u;
    *(_OWORD *)(v2 + 80) = 0u;
    *(_OWORD *)(v2 + 96) = 0u;
    *(_OWORD *)(v2 + 48) = 0u;
    *(_OWORD *)(v2 + 64) = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_OWORD *)v2 = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate((bmalloc::api *)v2, v3);
  }
}

uint64_t WebCore::RenderMeter::meterElement(WebCore::RenderMeter *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  if ((*((_BYTE *)this + 45) & 1) != 0)
  {
    result = 0;
  }
  else
  {
    result = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    if (result && (*(_WORD *)(result + 28) & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19641BBECLL);
    }
  }
  if ((*(_WORD *)(result + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(result + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::meterTag + 24))
  {
    v3 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    if ((*(_WORD *)(v3 + 28) & 8) == 0)
      goto LABEL_20;
    v4 = **(_QWORD **)(v3 + 40);
    if (v4)
      v5 = (*(_WORD *)(v4 + 28) & 0x80) == 0;
    else
      v5 = 1;
    if (v5)
      return 0;
    v6 = *(_QWORD *)(v4 + 200);
    if (!v6)
      return 0;
    result = *(_QWORD *)(v6 + 8);
    if (result)
    {
      if ((*(_WORD *)(result + 28) & 0x10) == 0
        || *(_QWORD *)(*(_QWORD *)(result + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::meterTag + 24))
      {
LABEL_20:
        __break(0xC471u);
        JUMPOUT(0x19641BBC4);
      }
    }
  }
  return result;
}

uint64_t WebCore::RenderMeter::updateLogicalWidth(WebCore::RenderMeter *this)
{
  char v2;
  int v3;
  unsigned int v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  unint64_t v19;
  BOOL v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t result;
  float v27;
  float v28;
  double v29;
  int v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v32 = 0;
  v33 = 0;
  v34 = 0;
  WebCore::RenderBox::computeLogicalWidthInFragment(this, (int *)&v32, 0);
  v2 = *((_DWORD *)this + 31) >> 13;
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
  {
    *((_DWORD *)this + 41) = v32;
    *((_DWORD *)this + 39) = HIDWORD(v32);
  }
  else
  {
    *((_DWORD *)this + 40) = v32;
    *((_DWORD *)this + 38) = HIDWORD(v32);
  }
  v3 = v2 & 7;
  v4 = *((_DWORD *)this + 30);
  v5 = (v4 >> 26) & 1;
  v6 = v5;
  if ((v3 - 2) >= 2)
  {
    if (v3 == 4)
    {
      v6 = (v4 & 0x4000000) == 0;
    }
    else
    {
      v6 = (v4 >> 26) & 1;
      if (v3 != 5)
      {
        if ((v4 & 0x4000000) != 0)
          v7 = 1;
        else
          v7 = 3;
        goto LABEL_9;
      }
    }
  }
  if (v6)
    v7 = 2;
  else
    v7 = 0;
LABEL_9:
  *((_DWORD *)this + v7 + 42) = v34;
  v8 = HIDWORD(v34);
  if ((v3 - 2) >= 2)
  {
    if (v3 == 4)
    {
      v5 = (v4 & 0x4000000) == 0;
    }
    else if (v3 != 5)
    {
      v9 = 3;
      if ((v4 & 0x4000000) == 0)
        v9 = 1;
      goto LABEL_14;
    }
  }
  v31 = v5 == 0;
  v9 = 2;
  if (!v31)
    v9 = 0;
LABEL_14:
  *((_DWORD *)this + v9 + 42) = HIDWORD(v34);
  v10 = &WebCore::RenderTheme::singleton(void)::theme;
  {
    v10 = (uint64_t *)WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
    *(_OWORD *)(v10 + 5) = 0u;
    *(_OWORD *)(v10 + 3) = 0u;
    *v10 = (uint64_t)&off_1E335BC30;
  }
  v12 = (char *)this + 160;
  v11 = *((_QWORD *)this + 20);
  v13 = *((_QWORD *)this + 19);
  v14 = HIDWORD(v13);
  v15 = (int)v13 / 64;
  v16 = v13 - (v8 & 0xFFFFFFC0);
  v17 = (int)v14 / 64;
  v18 = v14 - (v8 & 0xFFFFFFC0);
  v19 = HIDWORD(v11);
  v20 = __OFADD__(v16, (_DWORD)v11);
  v21 = v16 + v11;
  if (v20)
    v21 = (v16 >> 31) + 0x7FFFFFFF;
  v20 = __OFADD__(v18, (_DWORD)v19);
  v22 = v18 + v19;
  v23 = (v18 >> 31) + 0x7FFFFFFF;
  if (v20)
    v22 = (v18 >> 31) + 0x7FFFFFFF;
  v24 = v18 + 32;
  v25 = v16 + 32;
  *(float *)&v32 = (float)(v15 + (v25 >> 6));
  *((float *)&v32 + 1) = (float)(v17 + (v24 >> 6));
  *(float *)&v33 = (float)(v21 / 64 - (v25 >> 6) + ((int)(v21 - (v23 & 0xFFFFFFC0) + 32) >> 6));
  *((float *)&v33 + 1) = (float)(v22 / 64 - (v24 >> 6) + ((int)(v22 - (v25 & 0xFFFFFFC0) + 32) >> 6));
  result = (*(uint64_t (**)(uint64_t *, WebCore::RenderMeter *, uint64_t *))(*v10 + 352))(v10, this, &v32);
  if ((*((_BYTE *)this + 21) & 0x10) != 0)
    v27 = v28;
  v29 = v27 * 64.0;
  if (v29 >= 2147483650.0)
  {
    v30 = 0x7FFFFFFF;
  }
  else if (v29 <= -2147483650.0)
  {
    v30 = 0x80000000;
  }
  else
  {
    v30 = (int)v29;
  }
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 <= 3)
    v12 = (char *)this + 164;
  *(_DWORD *)v12 = v30;
  return result;
}

uint64_t WebCore::RenderMeter::computeLogicalHeight@<X0>(unint64_t a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, int *a4@<X8>)
{
  int v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  unint64_t v17;
  BOOL v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t result;
  float v25;
  float v26;
  double v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  float v31[4];

  WebCore::RenderBox::computeLogicalHeight(a1, a2, a3, (uint64_t)a4);
  v7 = *(_QWORD *)(a1 + 152);
  v8 = *a4;
  v9 = *(_QWORD *)(a1 + 160) | ((unint64_t)v8 << 32);
  v10 = *(_QWORD *)(a1 + 160) & 0xFFFFFFFF00000000 | v8;
  if ((*(_BYTE *)(a1 + 21) & 0x10) != 0)
    v9 = v10;
  v11 = &WebCore::RenderTheme::singleton(void)::theme;
  {
    v29 = *(_QWORD *)(a1 + 152);
    v30 = v9;
    v11 = (uint64_t *)WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
    v7 = v29;
    v9 = v30;
    *(_OWORD *)(v11 + 5) = 0u;
    *(_OWORD *)(v11 + 3) = 0u;
    *v11 = (uint64_t)&off_1E335BC30;
  }
  v12 = HIDWORD(v7);
  v13 = (int)v7 / 64;
  v14 = v7 - (v6 & 0xFFFFFFC0);
  v15 = (int)v12 / 64;
  v16 = v12 - (v6 & 0xFFFFFFC0);
  v17 = HIDWORD(v9);
  v18 = __OFADD__(v14, (_DWORD)v9);
  v19 = v14 + v9;
  if (v18)
    v19 = (v14 >> 31) + 0x7FFFFFFF;
  v18 = __OFADD__(v16, (_DWORD)v17);
  v20 = v16 + v17;
  v21 = (v16 >> 31) + 0x7FFFFFFF;
  if (v18)
    v20 = (v16 >> 31) + 0x7FFFFFFF;
  v22 = v16 + 32;
  v23 = v14 + 32;
  v31[0] = (float)(v13 + (v23 >> 6));
  v31[1] = (float)(v15 + (v22 >> 6));
  v31[2] = (float)(v19 / 64 - (v23 >> 6) + ((int)(v19 - (v21 & 0xFFFFFFC0) + 32) >> 6));
  v31[3] = (float)(v20 / 64 - (v22 >> 6) + ((int)(v20 - (v19 & 0xFFFFFFC0) + 32) >> 6));
  result = (*(uint64_t (**)(uint64_t *, unint64_t, float *))(*v11 + 352))(v11, a1, v31);
  if ((*(_BYTE *)(a1 + 21) & 0x10) == 0)
    v25 = v26;
  v27 = v25 * 64.0;
  if (v27 >= 2147483650.0)
  {
    v28 = 0x7FFFFFFF;
  }
  else if (v27 <= -2147483650.0)
  {
    v28 = 0x80000000;
  }
  else
  {
    v28 = (int)v27;
  }
  *a4 = v28;
  return result;
}

uint64_t WebCore::RenderMeter::updateFromElement(uint64_t this)
{
  _BYTE v1[20];
  __int128 v2;
  char v3;

  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 24) + 8) + 40)
                                                                                         + 8)
                                                                             + 1944)
                                                                 + 24)
                                                     + 8)
                                         + 40)
                             + 8)
                 + 3382))
  {
    LOBYTE(v2) = 0;
    v3 = 0;
    v1[0] = 0;
    v1[16] = 0;
    return WebCore::RenderObject::issueRepaint(this, &v2, 0, 0, (uint64_t)v1);
  }
  return this;
}

void WebCore::RenderModel::~RenderModel(WebCore::RenderModel *this, void *a2)
{
  WTF *v3;

  *(_QWORD *)this = off_1E34201A0;
  v3 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
}

{
  WTF *v3;
  void *v4;

  *(_QWORD *)this = off_1E34201A0;
  v3 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
  if (*((_DWORD *)this + 4))
  {
    *((_QWORD *)this + 26) = 0;
    *((_OWORD *)this + 11) = 0u;
    *((_OWORD *)this + 12) = 0u;
    *((_OWORD *)this + 9) = 0u;
    *((_OWORD *)this + 10) = 0u;
    *((_OWORD *)this + 7) = 0u;
    *((_OWORD *)this + 8) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 1) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *(_OWORD *)this = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(this, v4);
  }
}

uint64_t WebCore::RenderModel::requiresLayer(WebCore::RenderModel *this)
{
  return 1;
}

void WebCore::RenderModel::updateFromElement(WebCore::RenderModel *this)
{
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 3405)
    && (*((_BYTE *)this + 21) & 0x80) != 0)
  {
    WebCore::RenderLayer::contentChanged(*((_QWORD *)this + 18), (const WebCore::RenderObject *)7);
  }
}

void WebCore::RenderMultiColumnFlow::~RenderMultiColumnFlow(WebCore::RenderMultiColumnFlow *this, void *a2)
{
  WTF *v3;
  WTF ***v4;

  v3 = (WTF *)*((_QWORD *)this + 43);
  *((_QWORD *)this + 43) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  v4 = (WTF ***)*((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = 0;
  if (v4)
    std::default_delete<WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::WeakPtr<WebCore::RenderMultiColumnSpannerPlaceholder,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakPtr<WebCore::RenderMultiColumnSpannerPlaceholder,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>>::operator()[abi:sn180100](v4, a2);
  WebCore::RenderFragmentedFlow::~RenderFragmentedFlow(this, a2);
}

{
  WTF *v3;
  WTF ***v4;
  void *v5;

  v3 = (WTF *)*((_QWORD *)this + 43);
  *((_QWORD *)this + 43) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  v4 = (WTF ***)*((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = 0;
  if (v4)
    std::default_delete<WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::WeakPtr<WebCore::RenderMultiColumnSpannerPlaceholder,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakPtr<WebCore::RenderMultiColumnSpannerPlaceholder,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>>::operator()[abi:sn180100](v4, a2);
  WebCore::RenderFragmentedFlow::~RenderFragmentedFlow(this, a2);
  if (*((_DWORD *)this + 4))
  {
    *((_QWORD *)this + 46) = 0;
    *((_OWORD *)this + 21) = 0u;
    *((_OWORD *)this + 22) = 0u;
    *((_OWORD *)this + 19) = 0u;
    *((_OWORD *)this + 20) = 0u;
    *((_OWORD *)this + 17) = 0u;
    *((_OWORD *)this + 18) = 0u;
    *((_OWORD *)this + 15) = 0u;
    *((_OWORD *)this + 16) = 0u;
    *((_OWORD *)this + 13) = 0u;
    *((_OWORD *)this + 14) = 0u;
    *((_OWORD *)this + 11) = 0u;
    *((_OWORD *)this + 12) = 0u;
    *((_OWORD *)this + 9) = 0u;
    *((_OWORD *)this + 10) = 0u;
    *((_OWORD *)this + 7) = 0u;
    *((_OWORD *)this + 8) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 1) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *(_OWORD *)this = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(this, v5);
  }
}

const char *WebCore::RenderMultiColumnFlow::renderName(WebCore::RenderMultiColumnFlow *this)
{
  return "RenderMultiColumnFlowThread";
}

uint64_t WebCore::RenderMultiColumnFlow::firstMultiColumnSet(WebCore::RenderMultiColumnFlow *this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t result;

  v1 = *(unsigned int *)((char *)this + 47);
  if (!(v1 | ((unint64_t)*((unsigned __int8 *)this + 51) << 32)))
    return 0;
  v2 = *(_QWORD *)((v1 | ((unint64_t)*((unsigned __int8 *)this + 51) << 32)) + 8);
  if (!v2)
    return 0;
  while (*(_BYTE *)(v2 + 46) != 26)
  {
    v3 = *(unsigned int *)(v2 + 47) | ((unint64_t)*(unsigned __int8 *)(v2 + 51) << 32);
    if (!v3)
      return 0;
    result = 0;
    v2 = *(_QWORD *)(v3 + 8);
    if (!v2)
      return result;
  }
  return v2;
}

WTF *WebCore::RenderMultiColumnFlow::layout(WebCore::RenderMultiColumnFlow *this, void *a2)
{
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  WebCore::RenderFragmentedFlow *v12;
  unsigned int Fragment;
  char *v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  void *v22;
  uint64_t v23;
  unint64_t i;
  uint64_t v25;
  WTF *result;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  WTF *v30;

  *((_BYTE *)this + 364) = 1;
  v3 = (WTF *)*((_QWORD *)this + 43);
  *((_QWORD *)this + 43) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  v4 = *(unsigned int *)((char *)this + 47);
  if (!(v4 | ((unint64_t)*((unsigned __int8 *)this + 51) << 32)))
    goto LABEL_29;
  v5 = *(_QWORD *)((v4 | ((unint64_t)*((unsigned __int8 *)this + 51) << 32)) + 8);
  if (!v5)
    goto LABEL_29;
  if ((*(_BYTE *)(v5 + 45) & 4) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19641C670);
  }
  v6 = *(unsigned __int8 *)(v5 + 46);
  if (v6 == 26)
    v7 = v5;
  else
    v7 = 0;
  if (!v7)
  {
    if (v6 != 26)
      goto LABEL_29;
    v9 = 0;
    goto LABEL_14;
  }
  v8 = *(_DWORD *)(v7 + 16) + 1;
  *(_DWORD *)(v7 + 16) = v8;
  if (v6 == 26)
  {
    v9 = *(_QWORD *)(v5 + 8);
    if (!v9)
    {
      v9 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = v5;
      v30 = *(WTF **)(v5 + 8);
      *(_QWORD *)(v5 + 8) = v9;
      if (v30)
      {
        if (*(_DWORD *)v30 == 1)
        {
          WTF::fastFree(v30, a2);
          v9 = *(_QWORD *)(v5 + 8);
          if (!v9)
            goto LABEL_14;
        }
        else
        {
          --*(_DWORD *)v30;
        }
      }
    }
    ++*(_DWORD *)v9;
LABEL_14:
    v10 = (WTF *)*((_QWORD *)this + 43);
    *((_QWORD *)this + 43) = v9;
    if (v10)
    {
      if (*(_DWORD *)v10 == 1)
        WTF::fastFree(v10, a2);
      else
        --*(_DWORD *)v10;
    }
    v11 = *(_QWORD *)(v5 + 248);
    if (v11)
      v12 = *(WebCore::RenderFragmentedFlow **)(v11 + 8);
    else
      v12 = 0;
    Fragment = WebCore::RenderFragmentedFlow::offsetFromLogicalTopOfFirstFragment(v12, this);
    v14 = (char *)this + 160;
    if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
      v14 = (char *)this + 164;
    v15 = *(_DWORD *)v14;
    v16 = __OFADD__(Fragment, v15);
    v17 = Fragment + v15;
    v18 = (Fragment >> 31) + 0x7FFFFFFF;
    if (!v16)
      v18 = v17;
    v19 = *(_QWORD *)(v5 + 256);
    v8 = *(_DWORD *)(v5 + 16);
    v20 = HIDWORD(v19);
    if ((*(_DWORD *)(v5 + 20) & 0x1000) != 0)
    {
      LODWORD(v19) = v18;
      v18 = v20;
    }
    *(_QWORD *)(v5 + 256) = v19 | ((unint64_t)v18 << 32);
  }
  if (!v8)
    goto LABEL_60;
  *(_DWORD *)(v7 + 16) = v8 - 1;
LABEL_29:
  if ((*((_BYTE *)this + 328) & 1) != 0)
    v21 = (*((_DWORD *)this + 5) >> 6) & 8;
  else
    LOBYTE(v21) = 0;
  *((_BYTE *)this + 328) = v21 | *((_BYTE *)this + 328) & 0xF7;
  WebCore::RenderFragmentedFlow::validateFragments(this, a2);
  WebCore::RenderBlock::layout(this);
  *((_BYTE *)this + 328) &= ~8u;
  v23 = *(_QWORD *)(*((_QWORD *)this + 4) + 8);
  if ((*(_BYTE *)(v23 + 52) & 7) != 1)
  {
LABEL_60:
    __break(0xC471u);
    JUMPOUT(0x19641C650);
  }
  for (i = *(unsigned int *)(v23 + 71) | ((unint64_t)*(unsigned __int8 *)(v23 + 75) << 32);
        i;
        i = *(unsigned int *)(v25 + 40) | ((unint64_t)*(unsigned __int8 *)(v25 + 44) << 32))
  {
    v25 = *(_QWORD *)(i + 8);
    if (!v25)
      break;
    if (*(_BYTE *)(v25 + 46) == 26)
    {
      v27 = *(unsigned int *)(v25 + 47);
      if (!(v27 | ((unint64_t)*(unsigned __int8 *)(v25 + 51) << 32))
        || (v28 = *(_QWORD *)((v27 | ((unint64_t)*(unsigned __int8 *)(v25 + 51) << 32)) + 8)) == 0
        || (*(_BYTE *)(v28 + 45) & 4) == 0)
      {
        v29 = (int *)((char *)this + 160);
        if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
          v29 = (int *)((char *)this + 164);
        WebCore::RenderMultiColumnSet::endFlow(v25, this, *v29);
      }
      WebCore::RenderFragmentContainerSet::expandToEncompassFragmentedFlowContentsIfNeeded((WebCore::RenderFragmentContainerSet *)v25);
      break;
    }
  }
  *((_BYTE *)this + 364) = 0;
  result = (WTF *)*((_QWORD *)this + 43);
  *((_QWORD *)this + 43) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF *)WTF::fastFree(result, v22);
    else
      --*(_DWORD *)result;
  }
  return result;
}

WebCore::RenderObject *WebCore::RenderMultiColumnSet::endFlow(uint64_t a1, _DWORD *a2, int a3)
{
  uint64_t v6;
  WebCore::RenderFragmentedFlow *v7;
  WebCore::RenderObject *result;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  int v15;
  int v16;
  int v17;
  signed int v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  _DWORD *v26;

  v6 = *(_QWORD *)(a1 + 248);
  if (v6)
    v7 = *(WebCore::RenderFragmentedFlow **)(v6 + 8);
  else
    v7 = 0;
  result = WebCore::RenderFragmentedFlow::offsetFromLogicalTopOfFirstFragment(v7, (const WebCore::RenderBlock *)a2);
  v9 = (_DWORD)result + a3;
  if (__OFADD__((_DWORD)result, a3))
    v9 = (result >> 31) + 0x7FFFFFFF;
  v10 = *(_DWORD *)(a1 + 256);
  v11 = *(_DWORD *)(a1 + 260);
  v12 = *(_QWORD *)(a1 + 264);
  v13 = __OFADD__(v10, (_DWORD)v12);
  v14 = v10 + v12;
  v15 = (v10 >> 31) + 0x7FFFFFFF;
  if (!v13)
    v15 = v14;
  v13 = __OFSUB__(v9, v15);
  v16 = v9 - v15;
  v17 = (v9 >> 31) + 0x7FFFFFFF;
  if (v13)
    v16 = (v9 >> 31) + 0x7FFFFFFF;
  v13 = __OFADD__((_DWORD)v12, v16);
  v18 = v12 + v16;
  if (v13)
    v18 = (v12 >> 31) + 0x7FFFFFFF;
  v19 = v18 & ~(v18 >> 31);
  v13 = __OFADD__(v11, HIDWORD(v12));
  v20 = v11 + HIDWORD(v12);
  v21 = (v11 >> 31) + 0x7FFFFFFF;
  if (!v13)
    v21 = v20;
  v13 = __OFSUB__(v9, v21);
  v22 = v9 - v21;
  if (v13)
    v22 = v17;
  v13 = __OFADD__(HIDWORD(v12), v22);
  v23 = HIDWORD(v12) + v22;
  if (v13)
    v23 = (HIDWORD(v12) >> 31) + 0x7FFFFFFF;
  v24 = (unint64_t)(v23 & ~(v23 >> 31)) << 32;
  v25 = *(_QWORD *)(a1 + 264);
  if ((*(_BYTE *)(a1 + 21) & 0x10) != 0)
  {
    v25 = v19;
    v24 = v12 & 0xFFFFFFFF00000000;
  }
  *(_QWORD *)(a1 + 264) = v24 | v25;
  if (((a2[31] >> 13) & 6u) - 2 < 4)
    v26 = a2 + 40;
  else
    v26 = a2 + 41;
  *v26 = a3;
  return result;
}

WTF *WebCore::RenderMultiColumnFlow::addFragmentToThread(WebCore::RenderMultiColumnFlow *this, WebCore::RenderFragmentContainer *a2)
{
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unsigned int v9;
  WTF *v10;
  WTF *v11;
  uint64_t v12;
  WTF *v13;
  void *v14;
  WTF *result;
  void *v16;
  WTF *v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  int j;
  _QWORD *v28;
  unsigned int v29;
  WTF *v30;
  WTF *v31;
  uint64_t v32;
  void *v33;
  WTF *v34;
  _BYTE v35[24];
  WTF *v36;

  if (a2 && *((_BYTE *)a2 + 46) != 26)
  {
    __break(0xC471u);
    JUMPOUT(0x19641CAF0);
  }
  v4 = *((unsigned __int8 *)a2 + 51);
  for (i = *(unsigned int *)((char *)a2 + 47); ; i = *(unsigned int *)(v7 + 47))
  {
    v6 = i | (v4 << 32);
    if (!v6 || (v7 = *(_QWORD *)(v6 + 8)) == 0)
    {
      v8 = (uint64_t *)((char *)this + 248);
      v9 = *((_DWORD *)this + 68) + 1;
      *((_DWORD *)this + 68) = v9;
      if (v9 > *((_DWORD *)this + 69))
      {
        v10 = (WTF *)*((_QWORD *)this + 32);
        if (v10)
        {
          do
          {
            v11 = (WTF *)*((_QWORD *)v10 + 2);
            if (!*(_QWORD *)(*(_QWORD *)v10 + 8))
              WTF::ListHashSet<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::remove((uint64_t *)this + 31, (char *)this + 248, v10);
            v10 = v11;
          }
          while (v11);
        }
        *((_DWORD *)this + 68) = 0;
        v12 = *((_QWORD *)this + 31);
        if (v12)
        {
          LODWORD(v12) = *(_DWORD *)(v12 - 12);
          if (v12 > 0x7FFFFFFE)
            LODWORD(v12) = 0x7FFFFFFF;
        }
        *((_DWORD *)this + 69) = 2 * v12;
      }
      v13 = (WTF *)*((_QWORD *)a2 + 1);
      if (!v13)
      {
        v13 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v13 = 1;
        *((_QWORD *)v13 + 1) = a2;
        v17 = (WTF *)*((_QWORD *)a2 + 1);
        *((_QWORD *)a2 + 1) = v13;
        if (v17)
        {
          if (*(_DWORD *)v17 == 1)
          {
            WTF::fastFree(v17, v16);
            v13 = (WTF *)*((_QWORD *)a2 + 1);
          }
          else
          {
            --*(_DWORD *)v17;
          }
        }
      }
      *(_DWORD *)v13 += 2;
      v36 = v13;
      WTF::ListHashSet<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::add(v8, (uint64_t *)&v36, (uint64_t)v35);
      goto LABEL_19;
    }
    if (*(_BYTE *)(v7 + 46) == 26)
      break;
    v4 = *(unsigned __int8 *)(v7 + 51);
  }
  v18 = (uint64_t *)((char *)this + 248);
  v19 = *((_DWORD *)this + 68);
  *((_DWORD *)this + 68) = v19 + 1;
  v20 = *(_QWORD *)(v7 + 8);
  if (v20 && *(_QWORD *)(v20 + 8) && (v21 = *v18) != 0)
  {
    v22 = *(_DWORD *)(v21 - 8);
    v23 = (~(v20 << 32) + v20) ^ ((unint64_t)(~(v20 << 32) + v20) >> 22);
    v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
    v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
    v26 = v22 & ((v25 >> 31) ^ v25);
    for (j = 1; ; ++j)
    {
      v28 = *(_QWORD **)(v21 + 8 * v26);
      if (!v28)
        break;
      if (v28 != (_QWORD *)-1 && *v28 == v20)
      {
        if (v26 == *(_DWORD *)(v21 - 4))
          goto LABEL_41;
        do
        {
          if (*(_QWORD *)(*v28 + 8))
            break;
          v28 = (_QWORD *)v28[2];
        }
        while (v28);
        break;
      }
      v26 = (v26 + j) & v22;
    }
  }
  else
  {
LABEL_41:
    v28 = 0;
  }
  v29 = v19 + 2;
  *((_DWORD *)this + 68) = v29;
  if (v29 > *((_DWORD *)this + 69))
  {
    v30 = (WTF *)*((_QWORD *)this + 32);
    if (v30)
    {
      do
      {
        v31 = (WTF *)*((_QWORD *)v30 + 2);
        if (!*(_QWORD *)(*(_QWORD *)v30 + 8))
          WTF::ListHashSet<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::remove((uint64_t *)this + 31, (char *)this + 248, v30);
        v30 = v31;
      }
      while (v31);
    }
    *((_DWORD *)this + 68) = 0;
    v32 = *((_QWORD *)this + 31);
    if (v32)
    {
      LODWORD(v32) = *(_DWORD *)(v32 - 12);
      if (v32 > 0x7FFFFFFE)
        LODWORD(v32) = 0x7FFFFFFF;
    }
    *((_DWORD *)this + 69) = 2 * v32;
  }
  v13 = (WTF *)*((_QWORD *)a2 + 1);
  if (!v13)
  {
    v13 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v13 = 1;
    *((_QWORD *)v13 + 1) = a2;
    v34 = (WTF *)*((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v13;
    if (v34)
    {
      if (*(_DWORD *)v34 == 1)
      {
        WTF::fastFree(v34, v33);
        v13 = (WTF *)*((_QWORD *)a2 + 1);
      }
      else
      {
        --*(_DWORD *)v34;
      }
    }
  }
  *(_DWORD *)v13 += 2;
  v36 = v13;
  WTF::ListHashSet<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::insertBefore(v18, (uint64_t)v28, (uint64_t *)&v36, (uint64_t)v35);
LABEL_19:
  result = v36;
  v36 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      result = (WTF *)WTF::fastFree(result, v14);
    else
      --*(_DWORD *)result;
  }
  if (*(_DWORD *)v13 == 1)
    result = (WTF *)WTF::fastFree(v13, v14);
  else
    --*(_DWORD *)v13;
  *((_BYTE *)a2 + 280) = 1;
  return result;
}

_DWORD *WebCore::RenderMultiColumnFlow::willBeRemovedFromTree(WebCore::RenderMultiColumnFlow *this, void *a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *((unsigned __int8 *)this + 51);
  for (i = *(unsigned int *)((char *)this + 47); ; i = *(unsigned int *)(v6 + 47))
  {
    v5 = i | (v3 << 32);
    if (!v5)
      break;
    v6 = *(_QWORD *)(v5 + 8);
    if (!v6)
      break;
    if (*(_BYTE *)(v6 + 46) == 26)
    {
LABEL_6:
      v7 = *(WTF **)(v6 + 248);
      if (v7)
      {
        v8 = *((_QWORD *)v7 + 1);
        if (v8)
        {
          WTF::WeakListHashSet<WebCore::RenderFragmentContainer,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::RenderFragmentContainer>(v8 + 248, v6);
          v7 = *(WTF **)(v6 + 248);
          *(_QWORD *)(v6 + 248) = 0;
          if (!v7)
            goto LABEL_14;
        }
        else
        {
          *(_QWORD *)(v6 + 248) = 0;
        }
        if (*(_DWORD *)v7 == 1)
          WTF::fastFree(v7, a2);
        else
          --*(_DWORD *)v7;
      }
      else
      {
        *(_QWORD *)(v6 + 248) = 0;
      }
LABEL_14:
      while (1)
      {
        v9 = *(unsigned int *)(v6 + 47);
        if (!(v9 | ((unint64_t)*(unsigned __int8 *)(v6 + 51) << 32)))
          break;
        v6 = *(_QWORD *)((v9 | ((unint64_t)*(unsigned __int8 *)(v6 + 51) << 32)) + 8);
        if (!v6)
          break;
        if (*(_BYTE *)(v6 + 46) == 26)
          goto LABEL_6;
      }
      return WebCore::RenderElement::willBeRemovedFromTree(this, a2);
    }
    v3 = *(unsigned __int8 *)(v6 + 51);
  }
  return WebCore::RenderElement::willBeRemovedFromTree(this, a2);
}

WebCore::RenderObject *WebCore::RenderMultiColumnFlow::fragmentedFlowDescendantBoxLaidOut(WebCore::RenderObject *this, WebCore::RenderBox *a2)
{
  WebCore::RenderObject *v3;
  void *v4;
  WebCore::RenderObject *v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  int *v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  WebCore::RenderFragmentedFlow *v23;
  int *v24;
  int v25;
  BOOL v26;
  unsigned int v27;
  unsigned int v28;
  unint64_t v29;
  int v30;
  unint64_t v31;
  WTF *v32;

  if (a2 && *((_BYTE *)a2 + 46) == 27)
  {
    v3 = this;
    ++*((_DWORD *)a2 + 4);
    this = WebCore::RenderObject::containingBlock(a2);
    v5 = this;
    if (this)
      ++*((_DWORD *)this + 4);
    v6 = *((_QWORD *)a2 + 25);
    if (!v6)
      goto LABEL_6;
    v9 = *(_QWORD *)(v6 + 8);
    if (v9)
    {
      v10 = *(unsigned int *)(v9 + 40) | ((unint64_t)*(unsigned __int8 *)(v9 + 44) << 32);
      if (v10)
      {
        v11 = *(_QWORD *)(v10 + 8);
        if (v11)
        {
          if ((*(_BYTE *)(v11 + 45) & 4) != 0 && ((*(_BYTE *)(v11 + 52) & 7) != 1 || (*(_BYTE *)(v11 + 53) & 2) == 0))
          {
            while (*(_BYTE *)(v11 + 46) != 26)
            {
              v13 = *(unsigned int *)(v11 + 40);
              if (v13 | ((unint64_t)*(unsigned __int8 *)(v11 + 44) << 32))
              {
                v11 = *(_QWORD *)((v13 | ((unint64_t)*(unsigned __int8 *)(v11 + 44) << 32)) + 8);
                if (v11)
                {
                  if ((*(_BYTE *)(v11 + 45) & 4) != 0
                    && ((*(_BYTE *)(v11 + 52) & 7) != 1 || (*(_BYTE *)(v11 + 53) & 2) == 0))
                  {
                    continue;
                  }
                }
              }
              goto LABEL_34;
            }
            ++*(_DWORD *)(v11 + 16);
            v15 = (int *)((char *)a2 + 152);
            if (((*((_DWORD *)a2 + 31) >> 13) & 6u) - 2 >= 4)
              v15 = (int *)((char *)a2 + 156);
            this = WebCore::RenderMultiColumnSet::endFlow(v11, this, *v15);
            v16 = *(_DWORD *)(v11 + 16);
            if (!v16)
              goto LABEL_67;
            *(_DWORD *)(v11 + 16) = v16 - 1;
            v6 = *((_QWORD *)a2 + 25);
LABEL_34:
            if (!v6)
              goto LABEL_6;
          }
        }
      }
    }
    v17 = *(_QWORD *)(v6 + 8);
    if (!v17 || (v18 = *(unsigned int *)(v17 + 47) | ((unint64_t)*(unsigned __int8 *)(v17 + 51) << 32)) == 0)
    {
LABEL_6:
      if (v5)
      {
LABEL_7:
        v7 = *((_DWORD *)v5 + 4);
        if (!v7)
        {
          __break(0xC471u);
          JUMPOUT(0x19641CEB8);
        }
        *((_DWORD *)v5 + 4) = v7 - 1;
      }
      v8 = *((_DWORD *)a2 + 4);
      if (v8)
      {
        *((_DWORD *)a2 + 4) = v8 - 1;
        return this;
      }
LABEL_67:
      __break(0xC471u);
      JUMPOUT(0x19641CE98);
    }
    while (1)
    {
      v19 = *(_QWORD *)(v18 + 8);
      if (!v19 || (*(_BYTE *)(v19 + 45) & 4) == 0)
        goto LABEL_6;
      if (*(_BYTE *)(v19 + 46) == 26)
        break;
      v18 = *(unsigned int *)(v19 + 47) | ((unint64_t)*(unsigned __int8 *)(v19 + 51) << 32);
      if (!v18)
        goto LABEL_6;
    }
    ++*(_DWORD *)(v19 + 16);
    v20 = *(_QWORD *)(v19 + 8);
    if (!v20)
    {
      v20 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v20 = 1;
      *(_QWORD *)(v20 + 8) = v19;
      v32 = *(WTF **)(v19 + 8);
      *(_QWORD *)(v19 + 8) = v20;
      if (v32)
      {
        if (*(_DWORD *)v32 == 1)
        {
          WTF::fastFree(v32, v4);
          v20 = *(_QWORD *)(v19 + 8);
          if (!v20)
            goto LABEL_44;
        }
        else
        {
          --*(_DWORD *)v32;
        }
      }
    }
    ++*(_DWORD *)v20;
LABEL_44:
    v21 = (WTF *)*((_QWORD *)v3 + 43);
    *((_QWORD *)v3 + 43) = v20;
    if (v21)
    {
      if (*(_DWORD *)v21 == 1)
        WTF::fastFree(v21, v4);
      else
        --*(_DWORD *)v21;
    }
    v22 = *(_QWORD *)(v19 + 248);
    if (v22)
      v23 = *(WebCore::RenderFragmentedFlow **)(v22 + 8);
    else
      v23 = 0;
    this = WebCore::RenderFragmentedFlow::offsetFromLogicalTopOfFirstFragment(v23, v5);
    v24 = (int *)((char *)v5 + 160);
    if (((*((_DWORD *)v5 + 31) >> 13) & 6u) - 2 >= 4)
      v24 = (int *)((char *)v5 + 164);
    v25 = *v24;
    v26 = __OFADD__((_DWORD)this, v25);
    v27 = (_DWORD)this + v25;
    v28 = (this >> 31) + 0x7FFFFFFF;
    if (!v26)
      v28 = v27;
    v29 = *(_QWORD *)(v19 + 256);
    v30 = *(_DWORD *)(v19 + 16);
    v31 = HIDWORD(v29);
    if ((*(_DWORD *)(v19 + 20) & 0x1000) != 0)
    {
      LODWORD(v29) = v28;
      v28 = v31;
    }
    *(_QWORD *)(v19 + 256) = v29 | ((unint64_t)v28 << 32);
    if (!v30)
    {
      __break(0xC471u);
      JUMPOUT(0x19641CEECLL);
    }
    *(_DWORD *)(v19 + 16) = v30 - 1;
    goto LABEL_7;
  }
  return this;
}

void WebCore::RenderMultiColumnFlow::computeLogicalHeight(int a1@<W1>, int a2@<W2>, uint64_t a3@<X8>)
{
  *(_DWORD *)a3 = a1;
  *(_DWORD *)(a3 + 4) = a2;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
}

uint64_t WebCore::RenderMultiColumnFlow::initialLogicalWidth(WebCore::RenderMultiColumnFlow *this)
{
  return *((unsigned int *)this + 89);
}

uint64_t WebCore::RenderMultiColumnFlow::setPageBreak(uint64_t result, _BYTE *a2, int a3, int a4)
{
  if (a4 >= 1)
  {
    result = (uint64_t)WebCore::RenderMultiColumnFlow::fragmentAtBlockOffset(result, a2, a3, 0);
    if (result)
    {
      if (*(_BYTE *)(result + 46) == 26)
      {
        if (*(_DWORD *)(result + 308) > a4)
          *(_DWORD *)(result + 308) = a4;
      }
      else
      {
        result = 105;
        __break(0xC471u);
      }
    }
  }
  return result;
}

WebCore::RenderFragmentContainer *WebCore::RenderMultiColumnFlow::fragmentAtBlockOffset(uint64_t a1, _BYTE *a2, int a3, int a4)
{
  WTF *v6;
  WebCore::RenderFragmentContainer *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  WebCore::RenderFragmentContainer *result;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t j;
  uint64_t v18;
  int v19;
  unint64_t v20;
  signed int v21;
  unint64_t v22;
  unint64_t v23;
  BOOL v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t i;
  int v28;

  if (!*(_BYTE *)(a1 + 364))
    return WebCore::RenderFragmentedFlow::fragmentAtBlockOffset(a1, a2, a3, a4);
  v6 = *(WTF **)(a1 + 344);
  if (v6)
  {
    v7 = (WebCore::RenderFragmentContainer *)*((_QWORD *)v6 + 1);
    if (v7)
    {
      v8 = *((_QWORD *)v7 + 31);
      if (v8)
        v8 = *(_QWORD *)(v8 + 8);
      if (v8 == a1)
        goto LABEL_20;
      *(_QWORD *)(a1 + 344) = 0;
      if (*(_DWORD *)v6 == 1)
      {
        WTF::fastFree(v6, a2);
        v12 = *(_QWORD *)(a1 + 344);
        if (v12)
        {
          v7 = *(WebCore::RenderFragmentContainer **)(v12 + 8);
          if (v7)
            goto LABEL_20;
        }
      }
      else
      {
        --*(_DWORD *)v6;
      }
    }
  }
  v9 = *(unsigned int *)(a1 + 47);
  if (!(v9 | ((unint64_t)*(unsigned __int8 *)(a1 + 51) << 32)))
    return 0;
  v7 = *(WebCore::RenderFragmentContainer **)((v9 | ((unint64_t)*(unsigned __int8 *)(a1 + 51) << 32)) + 8);
  if (!v7)
    return 0;
  while (*((_BYTE *)v7 + 46) != 26)
  {
    v10 = *(unsigned int *)((char *)v7 + 47) | ((unint64_t)*((unsigned __int8 *)v7 + 51) << 32);
    if (!v10)
      return 0;
    result = 0;
    v7 = *(WebCore::RenderFragmentContainer **)(v10 + 8);
    if (!v7)
      return result;
  }
LABEL_20:
  v13 = *((_DWORD *)v7 + 5);
  v14 = *((_QWORD *)v7 + 32);
  v15 = HIDWORD(v14);
  if ((v13 & 0x1000) != 0)
    LODWORD(v15) = *((_QWORD *)v7 + 32);
  if (a3 >= (int)v15)
  {
    v20 = *((_QWORD *)v7 + 33);
LABEL_33:
    result = v7;
    v21 = v14 + v20;
    if (__OFADD__((_DWORD)v14, (_DWORD)v20))
      v21 = (v14 >> 31) + 0x7FFFFFFF;
    v22 = HIDWORD(v14);
    v23 = HIDWORD(v20);
    v24 = __OFADD__((_DWORD)v22, (_DWORD)v23);
    v25 = v22 + v23;
    v26 = (v22 >> 31) + 0x7FFFFFFF;
    if (!v24)
      v26 = v25;
    if ((v13 & 0x1000) == 0)
      v21 = v26;
    if (v21 <= a3)
    {
      for (i = *(unsigned int *)((char *)result + 47) | ((unint64_t)*((unsigned __int8 *)result + 51) << 32);
            i;
            i = *(unsigned int *)((char *)v7 + 47) | ((unint64_t)*((unsigned __int8 *)v7 + 51) << 32))
      {
        v7 = *(WebCore::RenderFragmentContainer **)(i + 8);
        if (!v7)
          break;
        if (*((_BYTE *)v7 + 46) == 26)
        {
          v13 = *((_DWORD *)v7 + 5);
          v14 = *((_QWORD *)v7 + 32);
          v20 = *((_QWORD *)v7 + 33);
          if ((v13 & 0x1000) != 0)
          {
            v28 = v14 + v20;
            if (__OFADD__((_DWORD)v14, (_DWORD)v20))
              goto LABEL_33;
          }
          else
          {
            v28 = HIDWORD(v14) + HIDWORD(v20);
            if (__OFADD__(HIDWORD(v14), HIDWORD(v20)))
              goto LABEL_33;
          }
          if (v28 != 0x3FFFFFFF)
            goto LABEL_33;
          return result;
        }
      }
    }
  }
  else
  {
    do
    {
      v16 = *((unsigned __int8 *)v7 + 44);
      for (j = *((unsigned int *)v7 + 10); ; j = *((unsigned int *)result + 10))
      {
        v18 = j | (v16 << 32);
        if (!v18)
          return v7;
        result = *(WebCore::RenderFragmentContainer **)(v18 + 8);
        if (!result)
          return v7;
        if (*((_BYTE *)result + 46) == 26)
          break;
        v16 = *((unsigned __int8 *)result + 44);
      }
      v19 = *((_DWORD *)result + 65);
      if ((*((_BYTE *)result + 21) & 0x10) != 0)
        v19 = *((_DWORD *)result + 64);
      v7 = result;
    }
    while (a3 < v19);
  }
  return result;
}

uint64_t WebCore::RenderMultiColumnFlow::updateMinimumPageHeight(uint64_t a1, _BYTE *a2, int a3, int a4)
{
  uint64_t result;
  int v6;

  result = (uint64_t)WebCore::RenderMultiColumnFlow::fragmentAtBlockOffset(a1, a2, a3, 0);
  if (result)
  {
    if (*(_BYTE *)(result + 46) == 26)
    {
      v6 = *(_DWORD *)(result + 312);
      if (v6 <= a4)
        v6 = a4;
      *(_DWORD *)(result + 312) = v6;
    }
    else
    {
      result = 105;
      __break(0xC471u);
    }
  }
  return result;
}

uint64_t WebCore::RenderMultiColumnFlow::updateSpaceShortageForSizeContainment(uint64_t a1, _BYTE *a2, int a3, int a4)
{
  uint64_t result;
  int *v6;
  int v7;
  int v8;

  result = (uint64_t)WebCore::RenderMultiColumnFlow::fragmentAtBlockOffset(a1, a2, a3, 0);
  if (result)
  {
    if (*(_BYTE *)(result + 46) == 26)
    {
      v8 = a4;
      v6 = (int *)(result + 316);
      v7 = *(_DWORD *)(result + 316);
      if (v7 >= a4)
        v6 = &v8;
      if (v7 < 1)
        v6 = &v8;
      *(_DWORD *)(result + 316) = *v6;
    }
    else
    {
      result = 105;
      __break(0xC471u);
    }
  }
  return result;
}

void WebCore::RenderMultiColumnFlow::setFragmentRangeForBox(WebCore::RenderMultiColumnFlow *this, const WebCore::RenderBox *a2, WebCore::RenderFragmentContainer *a3, WebCore::RenderFragmentContainer *a4)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t j;
  uint64_t v7;
  unint64_t i;
  int v9;
  unint64_t k;
  int v11;

  if (*((_BYTE *)a3 + 46) != 26)
    goto LABEL_30;
  v4 = *((unsigned int *)a3 + 10) | ((unint64_t)*((unsigned __int8 *)a3 + 44) << 32);
  if (v4)
  {
    while (1)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (!v5)
        goto LABEL_6;
      if (*(_BYTE *)(v5 + 46) == 26)
        break;
      v4 = *(unsigned int *)(v5 + 40) | ((unint64_t)*(unsigned __int8 *)(v5 + 44) << 32);
      if (!v4)
        goto LABEL_6;
    }
LABEL_16:
    v9 = *(_DWORD *)(v5 + 264);
    if ((*(_BYTE *)(v5 + 21) & 0x10) == 0)
      v9 = *(_DWORD *)(v5 + 268);
    if (!v9)
    {
      a3 = (WebCore::RenderFragmentContainer *)v5;
      for (i = *(unsigned int *)(v5 + 40) | ((unint64_t)*(unsigned __int8 *)(v5 + 44) << 32);
            i;
            i = *(unsigned int *)(v5 + 40) | ((unint64_t)*(unsigned __int8 *)(v5 + 44) << 32))
      {
        v5 = *(_QWORD *)(i + 8);
        if (!v5)
          break;
        if (*(_BYTE *)(v5 + 46) == 26)
          goto LABEL_16;
      }
    }
    if (*((_BYTE *)a3 + 46) != 26)
    {
LABEL_30:
      __break(0xC471u);
      JUMPOUT(0x19641D36CLL);
    }
  }
LABEL_6:
  for (j = *(unsigned int *)((char *)a3 + 47) | ((unint64_t)*((unsigned __int8 *)a3 + 51) << 32);
        j;
        j = *(unsigned int *)(v7 + 47) | ((unint64_t)*(unsigned __int8 *)(v7 + 51) << 32))
  {
    v7 = *(_QWORD *)(j + 8);
    if (!v7)
      break;
    if (*(_BYTE *)(v7 + 46) == 26)
    {
LABEL_26:
      v11 = *(_DWORD *)(v7 + 264);
      if ((*(_BYTE *)(v7 + 21) & 0x10) == 0)
        v11 = *(_DWORD *)(v7 + 268);
      if (!v11)
      {
        a4 = (WebCore::RenderFragmentContainer *)v7;
        for (k = *(unsigned int *)(v7 + 47) | ((unint64_t)*(unsigned __int8 *)(v7 + 51) << 32);
              k;
              k = *(unsigned int *)(v7 + 47) | ((unint64_t)*(unsigned __int8 *)(v7 + 51) << 32))
        {
          v7 = *(_QWORD *)(k + 8);
          if (!v7)
            break;
          if (*(_BYTE *)(v7 + 46) == 26)
            goto LABEL_26;
        }
      }
      break;
    }
  }
  WebCore::RenderFragmentedFlow::setFragmentRangeForBox(this, a2, a3, a4);
}

uint64_t WebCore::RenderMultiColumnFlow::addForcedFragmentBreak(uint64_t a1, _BYTE *a2, unsigned int a3, uint64_t a4, uint64_t a5, int *a6)
{
  uint64_t v9;
  WebCore::RenderFragmentContainer *v10;
  WebCore::RenderFragmentContainer *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  BOOL v18;
  int v19;
  int v20;
  int v21;
  uint64_t result;

  v9 = a3;
  v10 = WebCore::RenderMultiColumnFlow::fragmentAtBlockOffset(a1, a2, a3, 0);
  v11 = v10;
  if (!v10)
    return v11 != 0;
  if (*((_BYTE *)v10 + 46) == 26)
  {
    WebCore::RenderMultiColumnSet::addForcedBreak((uint64_t)v10, v9);
    if (a6)
    {
      v12 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 2000))(a1, 0, v9, 0);
      if (v12
        && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 1976))(v12)
        && (v13 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 2000))(a1, 0, v9, 0)) != 0)
      {
        v14 = v13;
        v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 1992))(v13, v9);
        v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 1976))(v14);
        v17 = v15 + v16;
        if (__OFADD__(v15, v16))
          v17 = (v15 >> 31) + 0x7FFFFFFF;
        v18 = __OFSUB__(v17, a3);
        v19 = v17 - a3;
        v20 = (v17 >> 31) + 0x7FFFFFFF;
        if (!v18)
          v20 = v19;
        v21 = v20 % v16;
      }
      else
      {
        v21 = 0;
      }
      *a6 = v21;
    }
    return v11 != 0;
  }
  result = 105;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::RenderMultiColumnSet::addForcedBreak(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(*(_QWORD *)(result + 248) + 8);
  if (*(_BYTE *)(v2 + 367))
  {
    v3 = result;
    v4 = *(unsigned int *)(result + 47);
    if (v4 | ((unint64_t)*(unsigned __int8 *)(result + 51) << 32))
    {
      v5 = *(_QWORD *)((v4 | ((unint64_t)*(unsigned __int8 *)(result + 51) << 32)) + 8);
      if (v5)
      {
        if ((*(_BYTE *)(v5 + 45) & 4) != 0 && *(_BYTE *)(v5 + 46) != 26)
        {
          if ((*(_BYTE *)(v5 + 45) & 1) != 0)
            goto LABEL_13;
          v6 = *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8);
          if (!v6
            || (*(_WORD *)(v6 + 28) & 0x10) == 0
            || *(_QWORD *)(*(_QWORD *)(v6 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::legendTag + 24))
          {
            goto LABEL_13;
          }
        }
      }
    }
    v7 = *(_QWORD *)(*(_QWORD *)(result + 32) + 8);
    if ((*(_BYTE *)(v7 + 52) & 7) != 1)
    {
      result = 105;
      __break(0xC471u);
      return result;
    }
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 88) + 32) + 24) + 56) & 4) == 0
      || !*(_DWORD *)(v2 + 360))
    {
LABEL_13:
      result += 320;
      v8 = *(unsigned int *)(v3 + 332);
      if ((_DWORD)v8)
      {
        v9 = *(unsigned int *)(v3 + 332);
        if (*(_DWORD *)(*(_QWORD *)result + 8 * v8 - 8) >= (signed int)a2)
          return result;
      }
      else
      {
        v9 = 0;
      }
      if (v8 < *(_DWORD *)(v3 + 284))
      {
        v10 = a2;
        if ((_DWORD)v8 == *(_DWORD *)(v3 + 328))
        {
          result = (uint64_t)WTF::Vector<WebCore::RenderMultiColumnSet::ContentRun,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, (void *)(v9 + 1), (unint64_t)&v10);
          *(_QWORD *)(*(_QWORD *)(v3 + 320) + 8 * *(unsigned int *)(v3 + 332)) = *(_QWORD *)result;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)result + 8 * v9) = v10;
        }
        ++*(_DWORD *)(v3 + 332);
      }
    }
  }
  return result;
}

unint64_t WebCore::RenderMultiColumnFlow::offsetFromContainer(WebCore::RenderMultiColumnFlow *this, WebCore::RenderElement *a2, const WebCore::LayoutPoint *a3, BOOL *a4)
{
  WebCore::RenderFragmentContainer *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;

  if (a4)
    *a4 = 1;
  v23 = *(_QWORD *)a3;
  v5 = WebCore::RenderMultiColumnFlow::physicalTranslationFromFlowToFragment(this, (WebCore::LayoutPoint *)&v23);
  if (v5)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 3) + 8) + 40) + 8) + 528);
    if (v6 && (v7 = *(_QWORD *)(v6 + 8)) != 0 && (v8 = *(_QWORD *)(v7 + 288)) != 0 && *(_BYTE *)(v8 + 1383))
      v9 = WebCore::RenderBox::topLeftLocationWithFlipping(v5);
    else
      v9 = *((_QWORD *)v5 + 19);
    v10 = (v23 >> 31) + 0x7FFFFFFF;
    if (!__OFADD__((_DWORD)v23, (_DWORD)v9))
      v10 = v23 + v9;
    LODWORD(v11) = HIDWORD(v23) + HIDWORD(v9);
    if (__OFADD__(HIDWORD(v23), HIDWORD(v9)))
      v11 = ((HIDWORD(v23) >> 31) + 0x7FFFFFFF);
    else
      v11 = v11;
  }
  else
  {
    v10 = v23;
    v11 = HIDWORD(v23);
  }
  if ((*((_BYTE *)a2 + 45) & 4) != 0)
  {
    if ((*((_BYTE *)a2 + 22) & 1) == 0
      || ((*((_BYTE *)a2 + 45) & 2) != 0
        ? (v18 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 4) + 8) + 96))
        : (v18 = *((_QWORD *)a2 + 12)),
          v12 = v18 & 0x1C00,
          v12 == 2048))
    {
      LODWORD(v12) = 0;
    }
    else if (v12)
    {
      v12 = *(_QWORD *)(*((_QWORD *)a2 + 18) + 264);
      if (v12)
      {
        v19 = *(_QWORD *)(v12 + 104);
        v20 = HIDWORD(v19);
        v21 = (_DWORD)v19 << 6;
        if ((int)v19 < -33554432)
          v21 = 0x80000000;
        if ((int)v19 <= 0x1FFFFFF)
          LODWORD(v12) = v21;
        else
          LODWORD(v12) = 0x7FFFFFFF;
        if ((int)v20 >= -33554432)
          v22 = HIDWORD(v19) << 6;
        else
          v22 = 0x80000000;
        if ((int)v20 <= 0x1FFFFFF)
          v13 = v22;
        else
          v13 = 0x7FFFFFFF;
        goto LABEL_19;
      }
    }
    v13 = 0;
LABEL_19:
    v14 = __OFSUB__(v10, (_DWORD)v12);
    v15 = v10 - v12;
    v10 = (v10 >> 31) + 0x7FFFFFFF;
    if (!v14)
      v10 = v15;
    v14 = __OFSUB__((_DWORD)v11, v13);
    v16 = v11 - v13;
    LODWORD(v11) = (v11 >> 31) + 0x7FFFFFFF;
    if (v14)
      v11 = v11;
    else
      v11 = v16;
  }
  return v10 | (unint64_t)(v11 << 32);
}

WebCore::RenderFragmentContainer *WebCore::RenderMultiColumnFlow::physicalTranslationFromFlowToFragment(WebCore::RenderMultiColumnFlow *this, WebCore::LayoutPoint *a2)
{
  WebCore::RenderFragmentContainer *v4;
  unsigned int v6;
  BOOL v7;
  int v8;
  int v10;
  signed int v11;
  unint64_t v12;
  unsigned int v13;
  int v14;
  BOOL v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;

  if ((*((_BYTE *)this + 328) & 1) != 0
    || (WTF::WeakListHashSet<WebCore::RenderFragmentContainer,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((uint64_t *)this + 31, a2) & 1) != 0)
  {
    return 0;
  }
  v6 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
  v7 = v6 > 5;
  v8 = (1 << v6) & 0x2A;
  if (v7 || v8 == 0)
  {
    v10 = *(_DWORD *)a2;
    if ((*((_BYTE *)this + 21) & 0x10) == 0)
      v10 = *((_DWORD *)a2 + 1);
  }
  else
  {
    if ((*((_BYTE *)this + 21) & 0x10) != 0)
    {
      v18 = *((_DWORD *)this + 40);
      v19 = *(_DWORD *)a2;
    }
    else
    {
      v18 = *((_DWORD *)this + 41);
      v19 = *((_DWORD *)a2 + 1);
    }
    v15 = __OFSUB__(v18, v19);
    v20 = v18 - v19;
    v10 = (v18 >> 31) + 0x7FFFFFFF;
    if (!v15)
      v10 = v20;
  }
  v11 = v10;
  v4 = WebCore::RenderMultiColumnFlow::fragmentAtBlockOffset((uint64_t)this, this, v10, 1);
  if (v4)
  {
    v12 = WebCore::RenderMultiColumnFlow::physicalTranslationOffsetFromFlowToFragment(this, (uint64_t)v4, v11);
    v13 = *((_DWORD *)a2 + 1);
    v14 = (*(_DWORD *)a2 >> 31) + 0x7FFFFFFF;
    if (!__OFADD__(*(_DWORD *)a2, (_DWORD)v12))
      v14 = *(_DWORD *)a2 + v12;
    v15 = __OFADD__(v13, HIDWORD(v12));
    v16 = v13 + HIDWORD(v12);
    v17 = (v13 >> 31) + 0x7FFFFFFF;
    if (v15)
      v16 = v17;
    *(_DWORD *)a2 = v14;
    *((_DWORD *)a2 + 1) = v16;
  }
  return v4;
}

void WebCore::RenderMultiColumnFlow::mapAbsoluteToLocalPoint(uint64_t a1, unsigned int a2, uint64_t a3)
{
  char v5;
  double (*v6)[4][4];
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  float64x2_t *v15;
  double v16;
  int v17;
  unsigned int v18;
  double v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int v30;
  BOOL v31;
  int v32;
  BOOL v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unsigned int v38;
  unsigned int v39;
  BOOL v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unsigned int v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  signed int v56;
  uint64_t v57;
  uint64_t v58;
  int *v59;
  int v60;
  signed int v61;
  unint64_t i;
  uint64_t v63;
  __int128 *v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  unsigned int v69;
  int v70;
  unsigned int v71;
  unsigned int v72;
  int v73;
  int v74;
  unsigned int v75;
  int v76;
  int v77;
  signed int v78[32];
  char v79;
  float64x2_t v80[8];
  float32x2_t v81[3];

  v5 = a2;
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 8) + 584))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), a2);
  v7 = *(_DWORD *)(a3 + 112);
  if (v7)
  {
    v8 = *(_DWORD *)(a3 + 96);
    v9 = *(_DWORD *)(a3 + 100);
    if (v8 == 0x80000000)
      v10 = 0x7FFFFFFFLL;
    else
      v10 = -v8;
    if (v9 == 0x80000000)
      v11 = 0x7FFFFFFFLL;
    else
      v11 = -v9;
    v12 = v10 | (v11 << 32);
  }
  else
  {
    v12 = *(_QWORD *)(a3 + 96);
  }
  v13 = (float)((float)(int)v12 * 0.015625) + *(float *)a3;
  v14 = (float)((float)SHIDWORD(v12) * 0.015625) + *(float *)(a3 + 4);
  v81[0].f32[0] = v13;
  v81[0].f32[1] = v14;
  v15 = *(float64x2_t **)(a3 + 80);
  if (v15)
  {
    if (v7)
    {
      WebCore::TransformationMatrix::inverse(v15->f64, v6, (uint64_t)v78);
      if (v79)
        v64 = (__int128 *)v78;
      else
        v64 = &constinit_5;
      v65 = (float64x2_t)v64[5];
      v80[4] = (float64x2_t)v64[4];
      v80[5] = v65;
      v66 = (float64x2_t)v64[7];
      v80[6] = (float64x2_t)v64[6];
      v80[7] = v66;
      v67 = (float64x2_t)v64[1];
      v80[0] = (float64x2_t)*v64;
      v80[1] = v67;
      v68 = (float64x2_t)v64[3];
      v80[2] = (float64x2_t)v64[2];
      v80[3] = v68;
      LODWORD(v13) = WebCore::TransformationMatrix::projectPoint(v80, (const WebCore::FloatPoint *)v81, 0).u32[0];
    }
    else
    {
      LODWORD(v13) = WebCore::TransformationMatrix::mapPoint(v15, v81).u32[0];
    }
  }
  v16 = v13 * 64.0;
  if (v16 > -2147483650.0)
    v17 = (int)v16;
  else
    v17 = 0x80000000;
  if (v16 < 2147483650.0)
    v18 = v17;
  else
    v18 = 0x7FFFFFFF;
  v19 = v14 * 64.0;
  if (v19 >= 2147483650.0)
  {
    v20 = 0x7FFFFFFF;
  }
  else if (v19 <= -2147483650.0)
  {
    v20 = 0x80000000;
  }
  else
  {
    v20 = (int)v19;
  }
  v21 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v22 = *(unsigned int *)(v21 + 64);
  if (v22 | ((unint64_t)*(unsigned __int8 *)(v21 + 68) << 32)
    && (v23 = *(_QWORD *)((v22 | ((unint64_t)*(unsigned __int8 *)(v21 + 68) << 32)) + 8)) != 0)
  {
    while (*(_BYTE *)(v23 + 46) != 26)
    {
      v24 = *(unsigned int *)(v23 + 47);
      if (!(v24 | ((unint64_t)*(unsigned __int8 *)(v23 + 51) << 32)))
        goto LABEL_25;
      v25 = 0;
      v26 = 0;
      v27 = 0;
      LODWORD(v28) = 0;
      v29 = 0;
      v23 = *(_QWORD *)((v24 | ((unint64_t)*(unsigned __int8 *)(v23 + 51) << 32)) + 8);
      if (!v23)
        goto LABEL_26;
    }
    v48 = (v18 >> 31) + 0x7FFFFFFF;
    v77 = v48;
    v49 = v18;
LABEL_49:
    *(_QWORD *)v78 = 0;
    v50 = WebCore::RenderBox::offsetFromContainer((WebCore::RenderBox *)v23, (WebCore::RenderElement *)v21, (const WebCore::LayoutPoint *)v78, 0, v19);
    v27 = v50;
    v28 = HIDWORD(v50);
    if (__OFSUB__(v49, (_DWORD)v50))
      v26 = v48;
    else
      v26 = v49 - v50;
    if (__OFSUB__(v20, HIDWORD(v50)))
      v25 = (v20 >> 31) + 0x7FFFFFFF;
    else
      v25 = v20 - HIDWORD(v50);
    v51 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 24) + 8) + 40) + 8) + 528);
    if ((*(_BYTE *)(a1 + 21) & 0x10) != 0)
    {
      if (v51 && (v57 = *(_QWORD *)(v51 + 8)) != 0 && (v58 = *(_QWORD *)(v57 + 288)) != 0 && *(_BYTE *)(v58 + 1383))
        LODWORD(v55) = WebCore::RenderBox::topLeftLocationWithFlipping((WebCore::RenderBox *)v23);
      else
        v55 = *(_QWORD *)(v23 + 152);
      v56 = v26;
    }
    else
    {
      if (v51 && (v52 = *(_QWORD *)(v51 + 8)) != 0 && (v53 = *(_QWORD *)(v52 + 288)) != 0 && *(_BYTE *)(v53 + 1383))
        v54 = WebCore::RenderBox::topLeftLocationWithFlipping((WebCore::RenderBox *)v23);
      else
        v54 = *(_QWORD *)(v23 + 152);
      v55 = HIDWORD(v54);
      v56 = v25;
    }
    v59 = (int *)(v23 + 160);
    if (((*(_DWORD *)(v23 + 124) >> 13) & 6u) - 2 >= 4)
      v59 = (int *)(v23 + 164);
    v60 = *v59;
    v40 = __OFADD__((_DWORD)v55, v60);
    v61 = v55 + v60;
    if (v40)
      v61 = (v55 >> 31) + 0x7FFFFFFF;
    if (v56 >= v61)
    {
      for (i = *(unsigned int *)(v23 + 47) | ((unint64_t)*(unsigned __int8 *)(v23 + 51) << 32);
            i;
            i = *(unsigned int *)(v63 + 47) | ((unint64_t)*(unsigned __int8 *)(v63 + 51) << 32))
      {
        v63 = *(_QWORD *)(i + 8);
        if (!v63)
          break;
        if (*(_BYTE *)(v63 + 46) == 26)
        {
          v21 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
          v23 = v63;
          v48 = v77;
          goto LABEL_49;
        }
      }
    }
    v29 = v23;
  }
  else
  {
LABEL_25:
    v25 = 0;
    v26 = 0;
    v27 = 0;
    LODWORD(v28) = 0;
    v29 = 0;
  }
LABEL_26:
  v30 = (unsigned __int16)*(_DWORD *)(v29 + 124) >> 13;
  v31 = v30 > 5;
  v32 = (1 << v30) & 0x2A;
  v33 = v31 || v32 == 0;
  v34 = v26;
  v35 = v25;
  if (!v33)
  {
    if ((*(_BYTE *)(v29 + 21) & 0x10) != 0)
    {
      v75 = *(_DWORD *)(v29 + 160);
      v40 = __OFSUB__(v75, v26);
      v34 = v75 - v26;
      v76 = (v75 >> 31) + 0x7FFFFFFF;
      if (v40)
        v34 = v76;
      v35 = v25;
    }
    else
    {
      v71 = *(_DWORD *)(v29 + 164);
      v35 = v71 - v25;
      if (__OFSUB__(v71, (_DWORD)v25))
        v35 = (v71 >> 31) + 0x7FFFFFFF;
      v34 = v26;
    }
  }
  *(_QWORD *)v78 = v34 | (unint64_t)(v35 << 32);
  v36 = WebCore::RenderMultiColumnSet::translateFragmentPointToFragmentedFlow(v29, v78, 1);
  v37 = HIDWORD(v36);
  v38 = (unsigned __int16)*(_DWORD *)(v29 + 124) >> 13;
  if (v38 <= 5 && ((1 << v38) & 0x2A) != 0)
  {
    if ((*(_BYTE *)(v29 + 21) & 0x10) != 0)
    {
      v72 = *(_DWORD *)(v29 + 160);
      v40 = __OFSUB__(v72, (_DWORD)v36);
      v73 = v72 - v36;
      v74 = (v72 >> 31) + 0x7FFFFFFF;
      if (v40)
        LODWORD(v36) = v74;
      else
        LODWORD(v36) = v73;
    }
    else
    {
      v69 = *(_DWORD *)(v29 + 164);
      v40 = __OFSUB__(v69, HIDWORD(v36));
      LODWORD(v37) = v69 - HIDWORD(v36);
      v70 = (v69 >> 31) + 0x7FFFFFFF;
      if (v40)
        LODWORD(v37) = v70;
    }
  }
  v39 = v26 - v36;
  if (__OFSUB__(v26, (_DWORD)v36))
    v39 = (v26 >> 31) + 0x7FFFFFFF;
  v40 = __OFSUB__((_DWORD)v25, (_DWORD)v37);
  v41 = v25 - v37;
  if (v40)
    v41 = (v25 >> 31) + 0x7FFFFFFF;
  v40 = __OFADD__(v39, v27);
  v42 = v39 + v27;
  LODWORD(v43) = (v39 >> 31) + 0x7FFFFFFF;
  if (v40)
    v43 = v43;
  else
    v43 = v42;
  v40 = __OFADD__(v41, (_DWORD)v28);
  v44 = v41 + v28;
  LODWORD(v45) = (v41 >> 31) + 0x7FFFFFFF;
  if (v40)
    v45 = v45;
  else
    v45 = v44;
  *(_QWORD *)v78 = v43 | (v45 << 32);
  v46 = *(_QWORD *)(a1 + 32);
  if (v46)
    v47 = *(_QWORD *)(v46 + 8);
  else
    v47 = 0;
  WebCore::RenderObject::pushOntoTransformState(a1, (WebCore::TransformState *)a3, v5, 0, v47, (const WebCore::LayoutSize *)v78, 0);
}

uint64_t WebCore::RenderMultiColumnSet::translateFragmentPointToFragmentedFlow(uint64_t a1, signed int *a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  float *v7;
  float v8;
  int v9;
  int v10;
  float v11;
  double v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  int v30;
  BOOL v31;
  int v32;
  int v33;
  int v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  int v53;
  int v54;
  int v55;
  int v56;
  signed int *v58;
  signed int v59;
  signed int v60;
  int v61;

  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = 0;
  if ((*(_BYTE *)(v6 + 52) & 7) != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x19641E2C0);
  }
  v7 = *(float **)(*(_QWORD *)(v6 + 88) + 40);
  if (*((_BYTE *)v7 + 376))
  {
    v8 = *(float *)(*(_QWORD *)(v6 + 112) + 204);
  }
  else
  {
    v9 = WebCore::RenderBox::contentLogicalWidth((WebCore::RenderBox *)v6);
    if (*((_BYTE *)v7 + 384) != 4)
    {
      v10 = 0;
      switch(*((_BYTE *)v7 + 384))
      {
        case 0:
        case 1:
        case 9:
          v10 = v9;
          break;
        case 3:
          v11 = v7[95];
          if (!*((_BYTE *)v7 + 386))
            v11 = (float)SLODWORD(v11);
          v8 = (float)((float)((float)v9 * 0.015625) * v11) / 100.0;
          goto LABEL_14;
        case 0xB:
          WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v7 + 95), (float)v9 * 0.015625);
          goto LABEL_14;
        default:
          goto LABEL_17;
      }
      goto LABEL_17;
    }
    v8 = v7[95];
    if (!*((_BYTE *)v7 + 386))
      v8 = (float)SLODWORD(v8);
  }
LABEL_14:
  v12 = v8 * 64.0;
  if (v12 >= 2147483650.0)
  {
    v10 = 0x7FFFFFFF;
  }
  else if (v12 <= -2147483650.0)
  {
    v10 = 0x80000000;
  }
  else
  {
    v10 = (int)v12;
  }
LABEL_17:
  v13 = 0;
  v14 = 0;
  if (v10 >= 0)
    v15 = v10;
  else
    v15 = v10 + 1;
  v16 = v15 >> 1;
  v59 = *a2;
  v58 = a2;
  v17 = a2[1];
  v60 = a2[1];
  v61 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 248) + 8) + 367);
  while (1)
  {
    v18 = *(unsigned int *)(a1 + 292);
    if ((int)v18 < 1
      || ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 248) + 8) + 21) & 0x10) != 0
        ? (v17 = *(_QWORD *)(a1 + 264))
        : (v17 = HIDWORD(*(_QWORD *)(a1 + 264))),
          (int)v17 < 1))
    {
      v24 = 1;
    }
    else
    {
      if ((uint64_t)(((unint64_t)v17 << 6) / v18) >= 0x7FFFFFFF)
        LODWORD(v19) = 0x7FFFFFFF;
      else
        v19 = ((unint64_t)v17 << 6) / v18;
      v20 = v19 >> 6;
      v21 = v19 & 0x7FFFFFC0;
      if (v20 == 0x1FFFFFF)
        v21 = 0x7FFFFFFF;
      v22 = v21 * (unint64_t)v18;
      v23 = v22 >> 6;
      if (v22 >> 38 != (int)(v22 >> 6) >> 31)
        LODWORD(v23) = 0x7FFFFFFF;
      v24 = (int)v23 >= (int)v17 ? v20 : v20 + 1;
    }
    if (v14 >= v24)
      break;
    v25 = *(_DWORD *)(a1 + 288);
    if ((*(_BYTE *)(a1 + 21) & 0x10) != 0)
    {
      v26 = WebCore::RenderMultiColumnSet::columnLogicalTop((WebCore::RenderMultiColumnSet *)a1, v14);
      v27 = WebCore::RenderMultiColumnSet::columnLogicalLeft((WebCore::RenderMultiColumnSet *)a1, v14);
      v28 = v25;
      v25 = v18;
    }
    else
    {
      v26 = WebCore::RenderMultiColumnSet::columnLogicalLeft((WebCore::RenderMultiColumnSet *)a1, v14);
      v27 = WebCore::RenderMultiColumnSet::columnLogicalTop((WebCore::RenderMultiColumnSet *)a1, v14);
      v28 = v18;
    }
    v17 = *(unsigned int *)(a1 + 20);
    if ((v61 != 0) != ((*(_DWORD *)(a1 + 20) & 0x1000) == 0))
    {
      v29 = v27 - v16;
      if (__OFSUB__(v27, v16))
        v29 = (v27 >> 31) + 0x7FFFFFFF;
      v30 = v28 + v10;
      if (__OFADD__(v28, v10))
        v30 = (v28 >> 31) + 0x7FFFFFFF;
      if (v29 <= v60)
      {
        v31 = __OFADD__(v29, v30);
        v32 = v29 + v30;
        if (v31)
          v32 = (v29 >> 31) + 0x7FFFFFFF;
        if (v32 > v60)
        {
          if (!a3)
          {
            if (v61)
            {
              v37 = v59;
              if ((int)v26 <= v59)
              {
                v54 = v26 + v25;
                if (__OFADD__(v26, v25))
                  v54 = (v26 >> 31) + 0x7FFFFFFF;
                v36 = v60;
                if (v54 > v59)
                  goto LABEL_73;
                v37 = v54;
              }
              else
              {
                v37 = v26;
              }
              v36 = v29;
LABEL_73:
              v38 = v37 - v26;
              if (__OFSUB__(v37, v26))
                v38 = (v37 >> 31) + 0x7FFFFFFF;
              v39 = v36 - v27;
              if (__OFSUB__(v36, v27))
                v39 = (v36 >> 31) + 0x7FFFFFFF;
              v40 = *(_DWORD *)(a1 + 256);
              v41 = *(int *)(a1 + 292);
              if (v14 <= 0x1FFFFFE)
                v42 = v13;
              else
                v42 = 0x7FFFFFFFLL;
              v43 = v41 * v42 / 64;
              v44 = *(_DWORD *)(a1 + 260);
              v45 = (int)v43 >> 31;
              if ((v17 & 0x1000) != 0)
              {
                v47 = (v41 >> 31) + 0x7FFFFFFF;
                if (v45 == HIDWORD(v43))
                  v47 = v43;
                v31 = __OFADD__(v40, v47);
                v48 = v40 + v47;
                v40 = (v40 >> 31) + 0x7FFFFFFF;
                if (!v31)
                  v40 = v48;
                v46 = *(_DWORD *)(a1 + 260);
              }
              else
              {
                if (v45 != HIDWORD(v43))
                  LODWORD(v43) = (v41 >> 31) + 0x7FFFFFFF;
                v46 = v44 + v43;
                if (__OFADD__(v44, (_DWORD)v43))
                  v46 = (v44 >> 31) + 0x7FFFFFFF;
              }
              v31 = __OFADD__(v40, v38);
              LODWORD(v49) = v40 + v38;
              v50 = (v40 >> 31) + 0x7FFFFFFF;
              if (v31)
                v49 = v50;
              else
                v49 = v49;
              v31 = __OFADD__(v46, v39);
              v51 = v46 + v39;
              if (v31)
                v51 = (v46 >> 31) + 0x7FFFFFFF;
              v17 = v49 | (v51 << 32);
              break;
            }
            v36 = v60;
            if ((int)v27 <= v60)
            {
              v31 = __OFADD__(v27, v28);
              v56 = v27 + v28;
              if (v31)
              {
                v56 = (v27 >> 31) + 0x7FFFFFFF;
                v37 = v59;
                if (v56 > v60)
                {
LABEL_105:
                  v36 = v60;
                  goto LABEL_73;
                }
              }
              else
              {
                v37 = v59;
                if (v56 > v60)
                  goto LABEL_73;
              }
              v36 = v56 - 64;
              if (__OFSUB__(v56, 64))
                v36 = 0x80000000;
              goto LABEL_73;
            }
            v36 = v27;
            goto LABEL_72;
          }
          goto LABEL_71;
        }
      }
    }
    else
    {
      v33 = v26 - v16;
      if (__OFSUB__(v26, v16))
        v33 = (v26 >> 31) + 0x7FFFFFFF;
      v34 = v25 + v10;
      if (__OFADD__(v25, v10))
        v34 = (v25 >> 31) + 0x7FFFFFFF;
      if (v33 <= v59)
      {
        v31 = __OFADD__(v33, v34);
        v35 = v33 + v34;
        if (v31)
          v35 = (v33 >> 31) + 0x7FFFFFFF;
        if (v35 > v59)
        {
          if (!a3)
          {
            if (v61)
            {
              v36 = v60;
              if ((int)v27 <= v60)
              {
                v31 = __OFADD__(v27, v28);
                v53 = v27 + v28;
                if (v31)
                  v53 = (v27 >> 31) + 0x7FFFFFFF;
                v37 = v59;
                if (v53 <= v60)
                  v37 = v33;
                if (v53 < v60)
                  v36 = v53;
              }
              else
              {
                v37 = v33;
                v36 = v27;
              }
              goto LABEL_73;
            }
            v37 = v59;
            if ((int)v26 > v59)
            {
              v37 = v26;
              goto LABEL_105;
            }
            v55 = v26 + v25;
            if (!__OFADD__(v26, v25))
            {
              v36 = v60;
              if (v55 <= v59)
                goto LABEL_123;
              goto LABEL_73;
            }
            v55 = (v26 >> 31) + 0x7FFFFFFF;
            v36 = v60;
            if (v55 <= v59)
            {
LABEL_123:
              v37 = v55 - 64;
              if (__OFSUB__(v55, 64))
                v37 = 0x80000000;
              goto LABEL_73;
            }
LABEL_72:
            v37 = v59;
            goto LABEL_73;
          }
LABEL_71:
          v36 = v60;
          goto LABEL_72;
        }
      }
    }
    ++v14;
    v13 += 64;
  }
  if (v14 >= v24)
    return *(_QWORD *)v58;
  else
    return v17;
}

WebCore::RenderFragmentContainer *WebCore::RenderMultiColumnFlow::mapFromFlowToFragment(WebCore::RenderMultiColumnFlow *this, WebCore::TransformState *a2)
{
  WebCore::RenderFragmentContainer *v4;
  __int128 v6;
  float m_y;
  float m_x;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v15;
  float v16;
  float v17;
  float v19;
  float v21;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  int v36;
  int v37;
  float v38;
  float v39;
  int v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  signed int v46;
  unsigned int v47;
  BOOL v48;
  int v49;
  int v50;
  int v51;
  unsigned int v52;
  int v53;
  unsigned int v54;
  int v55;
  FloatQuad v56;

  if ((*((_BYTE *)this + 328) & 1) != 0
    || (WTF::WeakListHashSet<WebCore::RenderFragmentContainer,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((uint64_t *)this + 31, a2) & 1) != 0)
  {
    return 0;
  }
  v6 = *(_OWORD *)((char *)a2 + 24);
  *(_OWORD *)&v56.var0.m_x = *(_OWORD *)((char *)a2 + 8);
  *(_OWORD *)&v56.var2.m_x = v6;
  WebCore::TransformState::mapQuad((uint64_t)a2, &v56, (double (*)[4][4])*((unsigned int *)a2 + 28), 0);
  m_y = v56.var2.m_y;
  m_x = v56.var2.m_x;
  if (v56.var3.m_x >= v56.var2.m_x)
    v9 = v56.var2.m_x;
  else
    v9 = v56.var3.m_x;
  v10 = v56.var0.m_y;
  v11 = v56.var0.m_x;
  if (v56.var1.m_x >= v56.var0.m_x)
    v12 = v56.var0.m_x;
  else
    v12 = v56.var1.m_x;
  if (v9 >= v12)
    v9 = v12;
  v13 = fabsf(v9);
  if (v13 == INFINITY || v13 > 2147500000.0)
    v9 = (float)((SLODWORD(v9) >> 31) ^ 0x7FFFFFFF);
  if (v56.var3.m_y >= v56.var2.m_y)
    v15 = v56.var2.m_y;
  else
    v15 = v56.var3.m_y;
  if (v56.var1.m_y >= v56.var0.m_y)
    v16 = v56.var0.m_y;
  else
    v16 = v56.var1.m_y;
  if (v15 >= v16)
    v15 = v16;
  v17 = fabsf(v15);
  if (v17 == INFINITY || v17 > 2147500000.0)
    v15 = (float)((SLODWORD(v15) >> 31) ^ 0x7FFFFFFF);
  if (v56.var0.m_x < v56.var1.m_x)
    v11 = v56.var1.m_x;
  if (v56.var2.m_x < v56.var3.m_x)
    m_x = v56.var3.m_x;
  if (v11 >= m_x)
    m_x = v11;
  v19 = fabsf(m_x);
  if (v19 == INFINITY || v19 > 2147500000.0)
    m_x = (float)((SLODWORD(m_x) >> 31) ^ 0x7FFFFFFF);
  if (v56.var0.m_y < v56.var1.m_y)
    v10 = v56.var1.m_y;
  if (v56.var2.m_y < v56.var3.m_y)
    m_y = v56.var3.m_y;
  if (v10 >= m_y)
    m_y = v10;
  v21 = fabsf(m_y);
  if (v21 == INFINITY || v21 > 2147500000.0)
    m_y = (float)((SLODWORD(m_y) >> 31) ^ 0x7FFFFFFF);
  v23 = m_x - v9;
  v24 = m_y - v15;
  v25 = floorf(v9);
  v26 = -2147500000.0;
  if (v25 > -2147500000.0)
    v26 = (float)(int)v25;
  if (v25 < 2147500000.0)
    v27 = v26;
  else
    v27 = 2147500000.0;
  v28 = floorf(v15);
  v29 = -2147500000.0;
  if (v28 > -2147500000.0)
    v29 = (float)(int)v28;
  if (v28 < 2147500000.0)
    v30 = v29;
  else
    v30 = 2147500000.0;
  v31 = v15 + v24;
  v32 = ceilf(v9 + v23);
  v33 = 2147500000.0;
  if (v32 < 2147500000.0)
  {
    v33 = -2147500000.0;
    if (v32 > -2147500000.0)
      v33 = (float)(int)v32;
  }
  v34 = ceilf(v31);
  v35 = 2147500000.0;
  if (v34 < 2147500000.0)
  {
    v35 = -2147500000.0;
    if (v34 > -2147500000.0)
      v35 = (float)(int)v34;
  }
  if (v27 >= 2147500000.0)
  {
    v36 = 0x7FFFFFFF;
  }
  else if (v27 <= -2147500000.0)
  {
    v36 = 0x80000000;
  }
  else
  {
    v36 = (int)v27;
  }
  if (v30 >= 2147500000.0)
  {
    v37 = 0x7FFFFFFF;
  }
  else if (v30 <= -2147500000.0)
  {
    v37 = 0x80000000;
  }
  else
  {
    v37 = (int)v30;
  }
  v38 = v33 - v27;
  v39 = v35 - v30;
  if (v38 >= 2147500000.0)
  {
    v40 = 0x7FFFFFFF;
  }
  else if (v38 <= -2147500000.0)
  {
    v40 = 0x80000000;
  }
  else
  {
    v40 = (int)v38;
  }
  if (v39 >= 2147500000.0)
  {
    v41 = 0x7FFFFFFF;
  }
  else if (v39 <= -2147500000.0)
  {
    v41 = 0x80000000;
  }
  else
  {
    v41 = (int)v39;
  }
  v42 = v36 << 6;
  if (v36 < -33554432)
    v42 = 0x80000000;
  if (v36 > 0x1FFFFFF)
    v42 = 0x7FFFFFFF;
  v43 = v37 << 6;
  if (v37 < -33554432)
    v43 = 0x80000000;
  if (v37 > 0x1FFFFFF)
    v43 = 0x7FFFFFFF;
  v44 = v40 << 6;
  if (v40 < -33554432)
    v44 = 0x80000000;
  if (v40 <= 0x1FFFFFF)
    v45 = v44;
  else
    v45 = 0x7FFFFFFF;
  v46 = v41 << 6;
  if (v41 < -33554432)
    v46 = 0x80000000;
  if (v41 > 0x1FFFFFF)
    v46 = 0x7FFFFFFF;
  v47 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
  if (v47 <= 5 && ((1 << v47) & 0x2A) != 0)
  {
    if ((*((_BYTE *)this + 21) & 0x10) != 0)
    {
      v54 = *((_DWORD *)this + 40);
      v55 = v42 + v45;
      if (__OFADD__(v42, v45))
        v55 = (v42 >> 31) + 0x7FFFFFFF;
      v42 = v54 - v55;
      if (__OFSUB__(v54, v55))
        v42 = (v54 >> 31) + 0x7FFFFFFF;
    }
    else
    {
      v52 = *((_DWORD *)this + 41);
      v53 = v43 + v46;
      if (__OFADD__(v43, v46))
        v53 = (v43 >> 31) + 0x7FFFFFFF;
      v43 = v52 - v53;
      if (__OFSUB__(v52, v53))
        v43 = (v52 >> 31) + 0x7FFFFFFF;
    }
  }
  v48 = __OFADD__(v42, v45 / 2);
  v49 = v42 + v45 / 2;
  if (v48)
    v49 = (v42 >> 31) + 0x7FFFFFFF;
  v48 = __OFADD__(v43, v46 / 2);
  v50 = v43 + v46 / 2;
  if (v48)
    v50 = (v43 >> 31) + 0x7FFFFFFF;
  if ((*((_DWORD *)this + 5) & 0x1000) != 0)
    v51 = v49;
  else
    v51 = v50;
  v4 = WebCore::RenderMultiColumnFlow::fragmentAtBlockOffset((uint64_t)this, this, v51, 1);
  if (v4)
  {
    v56.var0 = (FloatPoint)WebCore::RenderMultiColumnFlow::physicalTranslationOffsetFromFlowToFragment(this, (uint64_t)v4, v51);
    WebCore::TransformState::move(a2, (WebCore::LayoutSize *)&v56, 0);
  }
  return v4;
}

unint64_t WebCore::RenderMultiColumnFlow::physicalTranslationOffsetFromFlowToFragment(_DWORD *a1, uint64_t a2, signed int a3)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  float *v8;
  double v9;
  int v10;
  int v11;
  int v12;
  float v13;
  float v14;
  double v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  BOOL v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  BOOL v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  int v37;
  uint64_t v38;
  unsigned int v39;
  int v40;
  int v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int *v59;
  unsigned int v60;
  int v61;
  unint64_t v62;
  unint64_t v63;
  unsigned int v64;
  unint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  unint64_t v69;
  unsigned int v70;
  unsigned int v71;
  int v72;
  unsigned int v73;
  unsigned int v74;
  int v75;
  unsigned int v76;
  unsigned int v77;
  unint64_t v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int v81;
  int v82;
  unsigned int v83;
  unsigned int v84;

  if (a2 && *(_BYTE *)(a2 + 46) != 26)
  {
    __break(0xC471u);
    JUMPOUT(0x19641EBB0);
  }
  v5 = WebCore::RenderMultiColumnSet::columnIndexAtOffset(a2, a3);
  v6 = *(_QWORD *)(a2 + 32);
  if (v6)
    v7 = *(_QWORD *)(v6 + 8);
  else
    v7 = 0;
  if ((*(_BYTE *)(v7 + 52) & 7) != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x19641EB90);
  }
  v8 = *(float **)(*(_QWORD *)(v7 + 88) + 40);
  if (*((_BYTE *)v8 + 376))
  {
    v9 = *(float *)(*(_QWORD *)(v7 + 112) + 204) * 64.0;
    if (v9 > -2147483650.0)
      v10 = (int)v9;
    else
      v10 = 0x80000000;
    if (v9 < 2147483650.0)
      v11 = v10;
    else
      v11 = 0x7FFFFFFF;
  }
  else
  {
    v12 = WebCore::RenderBox::contentLogicalWidth((WebCore::RenderBox *)v7);
    if (*((_BYTE *)v8 + 384) == 4)
    {
      v13 = v8[95];
      if (!*((_BYTE *)v8 + 386))
        v13 = (float)SLODWORD(v13);
LABEL_21:
      v15 = v13 * 64.0;
      if (v15 >= 2147483650.0)
      {
        v11 = 0x7FFFFFFF;
      }
      else if (v15 <= -2147483650.0)
      {
        v11 = 0x80000000;
      }
      else
      {
        v11 = (int)v15;
      }
    }
    else
    {
      v11 = 0;
      switch(*((_BYTE *)v8 + 384))
      {
        case 0:
        case 1:
        case 9:
          v11 = v12;
          break;
        case 3:
          v14 = v8[95];
          if (!*((_BYTE *)v8 + 386))
            v14 = (float)SLODWORD(v14);
          v13 = (float)((float)((float)v12 * 0.015625) * v14) / 100.0;
          goto LABEL_21;
        case 0xB:
          WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v8 + 95), (float)v12 * 0.015625);
          goto LABEL_21;
        default:
          break;
      }
    }
  }
  v16 = *(_DWORD *)(a2 + 256);
  v17 = *(_DWORD *)(a2 + 260);
  v18 = *(_DWORD *)(a2 + 20);
  v19 = *(int *)(a2 + 292);
  if (v5 <= 0x1FFFFFE)
    v20 = v5 << 6;
  else
    v20 = 0x7FFFFFFFLL;
  v21 = v19 * v20 / 64;
  v22 = (v19 >> 31) + 0x7FFFFFFF;
  if ((int)v21 >> 31 == HIDWORD(v21))
    v23 = v21;
  else
    v23 = v22;
  v24 = __OFADD__(v16, v23);
  v25 = v16 + v23;
  if (v24)
    v25 = (v16 >> 31) + 0x7FFFFFFF;
  if ((int)v21 >> 31 == HIDWORD(v21))
    v22 = v21;
  v24 = __OFADD__(v17, v22);
  v26 = v17 + v22;
  if (v24)
    v26 = (v17 >> 31) + 0x7FFFFFFF;
  if ((v18 & 0x1000) != 0)
    v27 = v25;
  else
    v27 = *(_DWORD *)(a2 + 256);
  if ((v18 & 0x1000) != 0)
    v28 = *(_DWORD *)(a2 + 260);
  else
    v28 = v26;
  v29 = *(_QWORD *)(*(_QWORD *)(a2 + 248) + 8);
  v30 = *(unsigned __int8 *)(v29 + 368);
  v31 = *(unsigned __int8 *)(v29 + 367);
  if (*(_BYTE *)(v29 + 368))
    v32 = v31 == 0;
  else
    v32 = 0;
  if (v32)
  {
    if ((v18 & 0x1000) != 0)
    {
      v33 = WebCore::RenderMultiColumnSet::columnLogicalTop((WebCore::RenderMultiColumnSet *)a2, 0);
      v34 = WebCore::RenderMultiColumnSet::columnLogicalLeft((WebCore::RenderMultiColumnSet *)a2, 0);
    }
    else
    {
      v33 = WebCore::RenderMultiColumnSet::columnLogicalLeft((WebCore::RenderMultiColumnSet *)a2, 0);
      v34 = WebCore::RenderMultiColumnSet::columnLogicalTop((WebCore::RenderMultiColumnSet *)a2, 0);
    }
    if ((*(_BYTE *)(a2 + 21) & 0x10) == 0)
      v33 = v34;
  }
  else
  {
    v33 = 0;
  }
  v35 = WebCore::RenderMultiColumnSet::columnLogicalLeft((WebCore::RenderMultiColumnSet *)a2, v5);
  v36 = *(_DWORD *)(a2 + 20);
  if ((v36 & 0x1000) != 0)
    v37 = v27;
  else
    v37 = v28;
  v24 = __OFSUB__(v33, v37);
  LODWORD(v38) = v33 - v37;
  if (v24)
  {
    LODWORD(v38) = (v33 >> 31) + 0x7FFFFFFF;
    if (v31)
      goto LABEL_69;
  }
  else if (v31)
  {
    goto LABEL_69;
  }
  if (v30)
  {
    v39 = *(_DWORD *)(a2 + 292);
    v24 = __OFADD__(v39, v11);
    v40 = v39 + v11;
    v41 = (v39 >> 31) + 0x7FFFFFFF;
    if (!v24)
      v41 = v40;
    v42 = v41 * v20 / 64;
    if (HIDWORD(v42) != (int)v42 >> 31)
      LODWORD(v42) = (v41 >> 31) + 0x7FFFFFFF;
    v24 = __OFSUB__((_DWORD)v38, (_DWORD)v42);
    v43 = v38 - v42;
    LODWORD(v38) = (v38 >> 31) + 0x7FFFFFFF;
    if (!v24)
      LODWORD(v38) = v43;
  }
  else
  {
    v38 = v11 * v20 / 64;
    if (HIDWORD(v38) != (int)v38 >> 31)
      LODWORD(v38) = (v11 >> 31) + 0x7FFFFFFF;
  }
LABEL_69:
  v44 = (unsigned __int16)*(_DWORD *)(a2 + 124) >> 13;
  if ((_DWORD)v38 == 0x80000000)
    v45 = 0x7FFFFFFF;
  else
    v45 = -(int)v38;
  if (((1 << v44) & 0x2A) != 0)
    v46 = v45;
  else
    v46 = v38;
  if (v44 <= 5)
    v47 = v46;
  else
    v47 = v38;
  if ((v36 & 0x1000) != 0)
    v48 = v47;
  else
    v48 = v35;
  if ((v36 & 0x1000) != 0)
    v49 = v35;
  else
    v49 = v47;
  v50 = (unsigned __int16)a1[31] >> 13;
  if (v50 <= 5 && ((1 << v50) & 0x2A) != 0)
  {
    v84 = v48;
    v52 = *(_QWORD *)(a2 + 256);
    v53 = *(_QWORD *)(a2 + 264);
    v54 = *(unsigned int *)(a2 + 288);
    v55 = *(unsigned int *)(a2 + 292);
    if ((v36 & 0x1000) != 0)
    {
      v56 = WebCore::RenderMultiColumnSet::columnLogicalTop((WebCore::RenderMultiColumnSet *)a2, 0);
      v57 = WebCore::RenderMultiColumnSet::columnLogicalLeft((WebCore::RenderMultiColumnSet *)a2, 0);
      v58 = v54;
      LODWORD(v54) = v55;
    }
    else
    {
      v56 = WebCore::RenderMultiColumnSet::columnLogicalLeft((WebCore::RenderMultiColumnSet *)a2, 0);
      v57 = WebCore::RenderMultiColumnSet::columnLogicalTop((WebCore::RenderMultiColumnSet *)a2, 0);
      v58 = v55;
    }
    if (((a1[31] >> 13) & 6u) - 2 < 4)
      v59 = a1 + 40;
    else
      v59 = a1 + 41;
    v60 = *v59;
    v61 = *(_DWORD *)(a2 + 20);
    v62 = *(_QWORD *)(a2 + 256);
    v63 = *(_QWORD *)(a2 + 264);
    if ((v61 & 0x1000) == 0)
    {
      v62 >>= 32;
      v63 >>= 32;
    }
    v24 = __OFADD__((_DWORD)v62, (_DWORD)v63);
    v64 = v62 + v63;
    if (v24)
      v64 = (v62 >> 31) + 0x7FFFFFFF;
    v65 = v56 | ((unint64_t)v57 << 32);
    v66 = v58 << 32;
    v67 = v60 - v64;
    if (__OFSUB__(v60, v64))
      v67 = (v60 >> 31) + 0x7FFFFFFF;
    v68 = a1[5];
    v69 = v53 & 0xFFFFFFFF00000000 | v54;
    if ((v68 & 0x1000) != 0)
      v69 = v66 | v53;
    v70 = (unsigned __int16)*(_DWORD *)(a2 + 124) >> 13;
    if (v70 <= 5 && ((1 << v70) & 0x2A) != 0)
    {
      if ((v61 & 0x1000) != 0)
      {
        v81 = *(_DWORD *)(a2 + 160);
        v24 = __OFADD__(v56, (_DWORD)v69);
        v82 = v56 + v69;
        if (v24)
          v82 = (v56 >> 31) + 0x7FFFFFFF;
        v24 = __OFSUB__(v81, v82);
        v83 = v81 - v82;
        if (v24)
          v83 = (v81 >> 31) + 0x7FFFFFFF;
        v65 = (v57 << 32) | v83;
      }
      else
      {
        v77 = *(_DWORD *)(a2 + 164);
        v78 = HIDWORD(v69);
        v24 = __OFADD__((_DWORD)v57, (_DWORD)v78);
        v79 = v57 + v78;
        if (v24)
          v79 = (v57 >> 31) + 0x7FFFFFFF;
        v24 = __OFSUB__(v77, v79);
        v80 = v77 - v79;
        if (v24)
          v80 = (v77 >> 31) + 0x7FFFFFFF;
        v65 = v56 | (unint64_t)(v80 << 32);
      }
    }
    if ((v68 & 0x1000) != 0)
    {
      v74 = v65 - v52;
      if (__OFSUB__((_DWORD)v65, (_DWORD)v52))
        v74 = (v65 >> 31) + 0x7FFFFFFF;
      v24 = __OFSUB__(v74, v67);
      v75 = v74 - v67;
      if (v24)
        v75 = (v74 >> 31) + 0x7FFFFFFF;
      v24 = __OFADD__(v84, v75);
      v76 = v84 + v75;
      v48 = (v84 >> 31) + 0x7FFFFFFF;
      if (!v24)
        v48 = v76;
    }
    else
    {
      v71 = HIDWORD(v65) - HIDWORD(v52);
      if (__OFSUB__(HIDWORD(v65), HIDWORD(v52)))
        v71 = (HIDWORD(v65) >> 31) + 0x7FFFFFFF;
      v24 = __OFSUB__(v71, v67);
      v72 = v71 - v67;
      if (v24)
        v72 = (v71 >> 31) + 0x7FFFFFFF;
      v24 = __OFADD__((_DWORD)v49, v72);
      v73 = v49 + v72;
      if (v24)
        v49 = (v49 >> 31) + 0x7FFFFFFF;
      else
        v49 = v73;
      v48 = v84;
    }
  }
  return v48 | (unint64_t)(v49 << 32);
}

uint64_t WebCore::RenderMultiColumnFlow::isPageLogicalHeightKnown(WebCore::RenderMultiColumnFlow *this)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;

  v1 = *(_QWORD *)(*((_QWORD *)this + 4) + 8);
  if ((*(_BYTE *)(v1 + 52) & 7) == 1)
  {
    v2 = *(unsigned int *)(v1 + 71) | ((unint64_t)*(unsigned __int8 *)(v1 + 75) << 32);
    if (v2 && (v3 = *(_QWORD *)(v2 + 8)) != 0)
    {
      while (*(_BYTE *)(v3 + 46) != 26)
      {
        v4 = *(unsigned int *)(v3 + 40) | ((unint64_t)*(unsigned __int8 *)(v3 + 44) << 32);
        if (!v4)
          return 0;
        result = 0;
        v3 = *(_QWORD *)(v4 + 8);
        if (!v3)
          return result;
      }
      return *(unsigned __int8 *)(v3 + 300) != 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    result = 105;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::RenderMultiColumnFlow::nodeAtPoint(uint64_t a1, int *a2, WebCore::HitTestResult *a3, float32x4_t *a4, const WebCore::LayoutPoint *a5, uint64_t a6)
{
  int v7;
  int v8;

  if (!(_DWORD)a6)
    return 0;
  v7 = WebCore::RenderBlock::nodeAtPoint(a1, a2, a3, a4, a5, a6);
  v8 = v7 ^ 1;
  if (*((_QWORD *)a3 + 9))
    v8 = 1;
  return v7 & v8;
}

BOOL WebCore::RenderMultiColumnFlow::shouldCheckColumnBreaks(WebCore::RenderMultiColumnFlow *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 4) + 8) + 46) != 49)
    return 1;
  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1944)
                 + 248);
  v2 = v1 + 1316;
  if (!*(_WORD *)(v1 + 1316) && !*(_DWORD *)(v1 + 1320) && !*(_DWORD *)(v1 + 1324))
  {
    v3 = *(_QWORD *)(v1 + 328);
    if (*(_QWORD *)(*(_QWORD *)(v3 + 128) + 8) == v3)
    {
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 8);
        if (v5)
          v2 = v5 + 468;
      }
    }
  }
  return *(_BYTE *)(v2 + 1) != 0;
}

void WebCore::RenderMultiColumnSet::~RenderMultiColumnSet(WebCore::RenderMultiColumnSet *this, void *a2)
{
  WTF *v3;
  WTF **v5;
  WTF *v6;

  v3 = (WTF *)*((_QWORD *)this + 40);
  if ((WebCore::RenderMultiColumnSet *)((char *)this + 336) != v3 && v3 != 0)
  {
    *((_QWORD *)this + 40) = 0;
    *((_DWORD *)this + 82) = 0;
    WTF::fastFree(v3, a2);
  }
  *(_QWORD *)this = off_1E3424520;
  v5 = (WTF **)*((_QWORD *)this + 34);
  if (v5)
    WTF::HashTable<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBoxFragmentInfo>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBoxFragmentInfo>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBoxFragmentInfo>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBoxFragmentInfo>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>>::deallocateTable(v5, a2);
  v6 = (WTF *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
      WTF::fastFree(v6, a2);
    else
      --*(_DWORD *)v6;
  }
  WebCore::RenderBlockFlow::~RenderBlockFlow(this, a2);
}

{
  WTF *v3;
  WTF **v5;
  WTF *v6;
  void *v7;

  v3 = (WTF *)*((_QWORD *)this + 40);
  if ((WebCore::RenderMultiColumnSet *)((char *)this + 336) != v3 && v3 != 0)
  {
    *((_QWORD *)this + 40) = 0;
    *((_DWORD *)this + 82) = 0;
    WTF::fastFree(v3, a2);
  }
  *(_QWORD *)this = off_1E3424520;
  v5 = (WTF **)*((_QWORD *)this + 34);
  if (v5)
    WTF::HashTable<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBoxFragmentInfo>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBoxFragmentInfo>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBoxFragmentInfo>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBoxFragmentInfo>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>>::deallocateTable(v5, a2);
  v6 = (WTF *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
      WTF::fastFree(v6, a2);
    else
      --*(_DWORD *)v6;
  }
  WebCore::RenderBlockFlow::~RenderBlockFlow(this, a2);
  if (*((_DWORD *)this + 4))
  {
    *((_QWORD *)this + 42) = 0;
    *((_OWORD *)this + 19) = 0u;
    *((_OWORD *)this + 20) = 0u;
    *((_OWORD *)this + 17) = 0u;
    *((_OWORD *)this + 18) = 0u;
    *((_OWORD *)this + 15) = 0u;
    *((_OWORD *)this + 16) = 0u;
    *((_OWORD *)this + 13) = 0u;
    *((_OWORD *)this + 14) = 0u;
    *((_OWORD *)this + 11) = 0u;
    *((_OWORD *)this + 12) = 0u;
    *((_OWORD *)this + 9) = 0u;
    *((_OWORD *)this + 10) = 0u;
    *((_OWORD *)this + 7) = 0u;
    *((_OWORD *)this + 8) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 1) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *(_OWORD *)this = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(this, v7);
  }
}

uint64_t WebCore::RenderMultiColumnSet::firstRendererInFragmentedFlow(WebCore::RenderMultiColumnSet *this, void *a2)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  int i;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (!this)
    goto LABEL_29;
  v3 = *((unsigned int *)this + 10);
  if (!(v3 | ((unint64_t)*((unsigned __int8 *)this + 44) << 32)))
    goto LABEL_29;
  v4 = *(_BYTE **)((v3 | ((unint64_t)*((unsigned __int8 *)this + 44) << 32)) + 8);
  if (!v4 || (v4[45] & 4) == 0)
    goto LABEL_29;
  if ((v4[52] & 7) == 1 && (v4[53] & 2) != 0)
    goto LABEL_29;
  v6 = **(_QWORD **)(*(_QWORD *)(*((_QWORD *)this + 31) + 8) + 336);
  if (!v6)
    goto LABEL_29;
  v7 = *(_DWORD *)(v6 - 8);
  v8 = (unint64_t)&v4[~((_QWORD)v4 << 32)] ^ ((unint64_t)&v4[~((_QWORD)v4 << 32)] >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  v11 = v7 & ((v10 >> 31) ^ v10);
  for (i = 1; ; v11 = (v13 + i++) & v7)
  {
    v13 = v11;
    v14 = *(_QWORD *)(v6 + 16 * v11);
    if (v14 != -1)
    {
      if (!v14)
        goto LABEL_29;
      if (*(_BYTE **)(v14 + 8) == v4)
        break;
    }
  }
  v15 = *(WTF **)(v6 + 16 * v13 + 8);
  if (!v15)
    goto LABEL_29;
  v16 = (*(_DWORD *)v15)++;
  v17 = *((_QWORD *)v15 + 1);
  if (!v16)
  {
    WTF::fastFree(v15, a2);
    if (v17)
      goto LABEL_19;
LABEL_29:
    if (*(unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 31) + 8) + 64) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 31) + 8) + 68) << 32))
      return *(_QWORD *)((*(unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 31) + 8) + 64) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 31) + 8) + 68) << 32))
                       + 8);
    return 0;
  }
  *(_DWORD *)v15 = v16;
  if (!v17)
    goto LABEL_29;
LABEL_19:
  v18 = *(unsigned int *)(v17 + 47);
  if (v18 | ((unint64_t)*(unsigned __int8 *)(v17 + 51) << 32))
  {
    result = *(_QWORD *)((v18 | ((unint64_t)*(unsigned __int8 *)(v17 + 51) << 32)) + 8);
    if (result)
      return result;
  }
  v20 = *(_QWORD *)(v17 + 32);
  if (!v20)
    return 0;
  v21 = *(_QWORD *)(v20 + 8);
  if (!v21)
    return 0;
  do
  {
    v22 = *(unsigned int *)(v21 + 47);
    if (v22 | ((unint64_t)*(unsigned __int8 *)(v21 + 51) << 32))
    {
      result = *(_QWORD *)((v22 | ((unint64_t)*(unsigned __int8 *)(v21 + 51) << 32)) + 8);
      if (result)
        break;
    }
    v23 = *(_QWORD *)(v21 + 32);
    if (!v23)
      return 0;
    result = 0;
    v21 = *(_QWORD *)(v23 + 8);
  }
  while (v21);
  return result;
}

uint64_t WebCore::RenderMultiColumnSet::lastRendererInFragmentedFlow(WebCore::RenderMultiColumnSet *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  int i;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (this)
  {
    v3 = *(unsigned int *)((char *)this + 47);
    if (v3 | ((unint64_t)*((unsigned __int8 *)this + 51) << 32))
    {
      v4 = *(_QWORD *)((v3 | ((unint64_t)*((unsigned __int8 *)this + 51) << 32)) + 8);
      if (v4)
      {
        if ((*(_BYTE *)(v4 + 45) & 4) != 0)
        {
          v5 = **(_QWORD **)(*(_QWORD *)(*((_QWORD *)this + 31) + 8) + 336);
          if (v5)
          {
            v6 = *(_DWORD *)(v5 - 8);
            v7 = (~(v4 << 32) + v4) ^ ((unint64_t)(~(v4 << 32) + v4) >> 22);
            v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
            v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
            v10 = v6 & ((v9 >> 31) ^ v9);
            for (i = 1; ; ++i)
            {
              v12 = v10;
              v13 = *(_QWORD *)(v5 + 16 * v10);
              if (v13 != -1)
              {
                if (!v13)
                  goto LABEL_21;
                if (*(_QWORD *)(v13 + 8) == v4)
                  break;
              }
              v10 = (v12 + i) & v6;
            }
            v14 = *(WTF **)(v5 + 16 * v12 + 8);
            if (v14)
            {
              v15 = (*(_DWORD *)v14)++;
              v16 = *((_QWORD *)v14 + 1);
              if (v15)
              {
                *(_DWORD *)v14 = v15;
                if (v16)
                {
LABEL_14:
                  v17 = *(unsigned int *)(v16 + 40);
                  if (v17 | ((unint64_t)*(unsigned __int8 *)(v16 + 44) << 32)
                    && (v18 = *(_QWORD *)((v17 | ((unint64_t)*(unsigned __int8 *)(v16 + 44) << 32)) + 8)) != 0)
                  {
                    do
                    {
                      v20 = v18;
                      v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 120))(v18);
                    }
                    while (v18);
                  }
                  else
                  {
                    v19 = *(_QWORD *)(v16 + 32);
                    if (v19)
                      return *(_QWORD *)(v19 + 8);
                    else
                      return 0;
                  }
                  return v20;
                }
              }
              else
              {
                WTF::fastFree(v14, a2);
                if (v16)
                  goto LABEL_14;
              }
            }
          }
        }
      }
    }
  }
LABEL_21:
  v21 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 31) + 8) + 120))(*(_QWORD *)(*((_QWORD *)this + 31) + 8));
  do
  {
    v20 = v21;
    if (!v21)
      break;
    v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 120))(v21);
  }
  while (v21);
  return v20;
}

BOOL WebCore::RenderMultiColumnSet::containsRendererInFragmentedFlow(WebCore::RenderMultiColumnSet *this, const WebCore::RenderObject *a2)
{
  const WebCore::RenderObject *v2;
  unint64_t i;
  uint64_t v5;
  unint64_t j;
  uint64_t v7;
  const WebCore::RenderObject *v8;
  uint64_t v9;
  _BOOL8 result;
  uint64_t RendererInFragmentedFlow;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = a2;
  for (i = *((unsigned int *)this + 10) | ((unint64_t)*((unsigned __int8 *)this + 44) << 32);
        i;
        i = *(unsigned int *)(v5 + 40) | ((unint64_t)*(unsigned __int8 *)(v5 + 44) << 32))
  {
    v5 = *(_QWORD *)(i + 8);
    if (!v5)
      break;
    if (*(_BYTE *)(v5 + 46) == 26)
    {
LABEL_18:
      RendererInFragmentedFlow = WebCore::RenderMultiColumnSet::firstRendererInFragmentedFlow(this, a2);
      v14 = WebCore::RenderMultiColumnSet::lastRendererInFragmentedFlow(this, v13);
      if ((const WebCore::RenderObject *)RendererInFragmentedFlow != v2 && RendererInFragmentedFlow)
      {
        while (1)
        {
          v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)RendererInFragmentedFlow + 112))(RendererInFragmentedFlow);
          if (!v15)
          {
            v16 = *(unsigned int *)(RendererInFragmentedFlow + 47);
            if (!(v16 | ((unint64_t)*(unsigned __int8 *)(RendererInFragmentedFlow + 51) << 32))
              || (v15 = *(_QWORD *)((v16 | ((unint64_t)*(unsigned __int8 *)(RendererInFragmentedFlow + 51) << 32))
                                  + 8)) == 0)
            {
              v17 = *(_QWORD *)(RendererInFragmentedFlow + 32);
              if (!v17)
                return 0;
              v18 = *(_QWORD *)(v17 + 8);
              if (!v18)
                return 0;
              while (1)
              {
                v19 = *(unsigned int *)(v18 + 47);
                if (v19 | ((unint64_t)*(unsigned __int8 *)(v18 + 51) << 32))
                {
                  v15 = *(_QWORD *)((v19 | ((unint64_t)*(unsigned __int8 *)(v18 + 51) << 32)) + 8);
                  if (v15)
                    break;
                }
                v20 = *(_QWORD *)(v18 + 32);
                if (!v20)
                  return 0;
                result = 0;
                v18 = *(_QWORD *)(v20 + 8);
                if (!v18)
                  return result;
              }
            }
          }
          RendererInFragmentedFlow = v15;
          if ((const WebCore::RenderObject *)v15 == v2)
            goto LABEL_33;
        }
      }
      if (RendererInFragmentedFlow)
      {
LABEL_33:
        if ((const WebCore::RenderObject *)v14 != v2)
        {
          while (1)
          {
            v21 = (*(uint64_t (**)(const WebCore::RenderObject *))(*(_QWORD *)v2 + 112))(v2);
            if (!v21)
            {
              v22 = *(unsigned int *)((char *)v2 + 47);
              if (!(v22 | ((unint64_t)*((unsigned __int8 *)v2 + 51) << 32))
                || (v21 = *(_QWORD *)((v22 | ((unint64_t)*((unsigned __int8 *)v2 + 51) << 32)) + 8)) == 0)
              {
                v23 = *((_QWORD *)v2 + 4);
                if (!v23)
                  return 0;
                v24 = *(_QWORD *)(v23 + 8);
                if (!v24)
                  return 0;
                while (1)
                {
                  v25 = *(unsigned int *)(v24 + 47);
                  if (v25 | ((unint64_t)*(unsigned __int8 *)(v24 + 51) << 32))
                  {
                    v21 = *(_QWORD *)((v25 | ((unint64_t)*(unsigned __int8 *)(v24 + 51) << 32)) + 8);
                    if (v21)
                      break;
                  }
                  v26 = *(_QWORD *)(v24 + 32);
                  if (!v26)
                    return 0;
                  result = 0;
                  v24 = *(_QWORD *)(v26 + 8);
                  if (!v24)
                    return result;
                }
              }
            }
            result = 1;
            v2 = (const WebCore::RenderObject *)v21;
            if (v21 == v14)
              return result;
          }
        }
        return 1;
      }
      return 0;
    }
  }
  for (j = *(unsigned int *)((char *)this + 47) | ((unint64_t)*((unsigned __int8 *)this + 51) << 32);
        j;
        j = *(unsigned int *)(v7 + 47) | ((unint64_t)*(unsigned __int8 *)(v7 + 51) << 32))
  {
    v7 = *(_QWORD *)(j + 8);
    if (!v7)
      break;
    if (*(_BYTE *)(v7 + 46) == 26)
      goto LABEL_18;
  }
  v8 = (const WebCore::RenderObject *)*((_QWORD *)this + 31);
  if (v8)
  {
    v8 = (const WebCore::RenderObject *)*((_QWORD *)v8 + 1);
    if (v8 == a2)
      return 1;
  }
  while (1)
  {
    v9 = *((_QWORD *)v2 + 4);
    if (!v9)
      break;
    v2 = *(const WebCore::RenderObject **)(v9 + 8);
    result = v2 != 0;
    if (v2 == v8 || v2 == 0)
      return result;
  }
  return 0;
}

uint64_t WebCore::RenderMultiColumnSet::pageLogicalTopForOffset(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  int v3;
  int v4;
  float v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;

  v2 = *(_DWORD *)(a1 + 256);
  if ((*(_BYTE *)(a1 + 21) & 0x10) == 0)
    v2 = *(_DWORD *)(a1 + 260);
  v3 = *(_DWORD *)(a1 + 292);
  if ((int)a2 >= (int)v2 && v3)
  {
    v4 = a2 - v2;
    if (__OFSUB__(a2, v2))
      v4 = (a2 >> 31) + 0x7FFFFFFF;
    v5 = (float)((float)v4 * 0.015625) / (float)((float)v3 * 0.015625);
    if (v5 <= 0x1FFFFFE)
      v6 = v5 << 6;
    else
      v6 = 0x7FFFFFFFLL;
  }
  else
  {
    v6 = 0;
  }
  v7 = v6 * v3 / 64;
  v8 = (v3 >> 31) + 0x7FFFFFFF;
  if (HIDWORD(v7) == (int)v7 >> 31)
    v8 = v7;
  v9 = __OFADD__(v2, v8);
  v10 = v2 + v8;
  v11 = (v2 >> 31) + 0x7FFFFFFF;
  if (v9)
    return v11;
  else
    return v10;
}

uint64_t WebCore::RenderMultiColumnSet::columnIndexAtOffset(uint64_t a1, signed int a2)
{
  unint64_t v2;
  int v3;
  unint64_t v4;
  signed int v5;
  unint64_t v7;
  BOOL v8;
  unsigned int v9;
  unsigned int v10;
  signed int v11;
  signed int v12;
  unint64_t v13;
  int v14;
  unsigned int v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;

  v2 = *(_QWORD *)(a1 + 256);
  v3 = *(_DWORD *)(a1 + 20);
  v4 = HIDWORD(v2);
  if ((v3 & 0x1000) != 0)
    v5 = *(_QWORD *)(a1 + 256);
  else
    v5 = HIDWORD(*(_QWORD *)(a1 + 256));
  if (a2 < v5)
    return 0;
  v7 = *(_QWORD *)(a1 + 264);
  v8 = __OFADD__((_DWORD)v2, (_DWORD)v7);
  v9 = v2 + v7;
  v10 = (v2 >> 31) + 0x7FFFFFFF;
  if (v8)
    v9 = v10;
  v8 = __OFADD__((_DWORD)v4, HIDWORD(v7));
  v11 = v4 + HIDWORD(v7);
  v12 = (v4 >> 31) + 0x7FFFFFFF;
  if (!v8)
    v12 = v11;
  if ((v3 & 0x1000) != 0)
    v12 = v9;
  v13 = *(unsigned int *)(a1 + 292);
  if (v12 <= a2)
  {
    if ((int)v13 < 1)
      return 0;
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 248) + 8) + 21) & 0x10) == 0)
      v7 >>= 32;
    if ((int)v7 < 1)
      return 0;
    v15 = 0x7FFFFFFF;
    if ((uint64_t)(((unint64_t)v7 << 6) / v13) >= 0x7FFFFFFF)
      LODWORD(v16) = 0x7FFFFFFF;
    else
      v16 = ((unint64_t)v7 << 6) / v13;
    v17 = v16 >> 6;
    v18 = v16 & 0x7FFFFFC0;
    if (v17 != 0x1FFFFFF)
      v15 = v18;
    v19 = v15 * (unint64_t)v13;
    v20 = v19 >> 6;
    if (v19 >> 38 != (int)(v19 >> 6) >> 31)
      LODWORD(v20) = 0x7FFFFFFF;
    if ((int)v20 >= (int)v7)
      v21 = v17;
    else
      v21 = v17 + 1;
    return v21 - 1;
  }
  else
  {
    if (!(_DWORD)v13)
      return 0;
    v14 = a2 - v5;
    if (__OFSUB__(a2, v5))
      v14 = (a2 >> 31) + 0x7FFFFFFF;
    return (float)((float)((float)v14 * 0.015625) / (float)((float)(int)v13 * 0.015625));
  }
}

BOOL WebCore::RenderMultiColumnSet::recalculateColumnHeight(WebCore::RenderMultiColumnSet *this, int a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  _DWORD *v28;
  unsigned int v29;
  int v30;
  double v31;
  int v32;
  BOOL v33;
  uint64_t v34;
  unsigned int v35;
  unint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unint64_t v39;
  unint64_t v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  signed int v44;
  int v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  signed int v49;
  unint64_t v50;
  uint64_t v51;
  int v52;
  unsigned int v53;
  uint64_t v54;
  _DWORD *v55;
  unsigned int v56;
  int v57;
  double v58;
  int v59;
  BOOL v60;
  int v61;
  uint64_t v62;
  unsigned int v63;
  int v64;
  int v65;
  double v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  double v75;

  v3 = *((unsigned int *)this + 73);
  v4 = *((_QWORD *)this + 31);
  v5 = *(_QWORD *)(v4 + 8);
  if (!*(_BYTE *)(v5 + 367))
    goto LABEL_13;
  v6 = *(unsigned int *)((char *)this + 47);
  if (!(v6 | ((unint64_t)*((unsigned __int8 *)this + 51) << 32))
    || (v7 = *(_QWORD *)((v6 | ((unint64_t)*((unsigned __int8 *)this + 51) << 32)) + 8)) == 0
    || (*(_BYTE *)(v7 + 45) & 4) == 0
    || *(_BYTE *)(v7 + 46) == 26
    || (*(_BYTE *)(v7 + 45) & 1) == 0
    && (v8 = *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8)) != 0
    && (*(_WORD *)(v8 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v8 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::legendTag + 24))
  {
    v9 = *(_QWORD *)(*((_QWORD *)this + 4) + 8);
    if ((*(_BYTE *)(v9 + 52) & 7) != 1)
      goto LABEL_141;
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 88) + 32) + 24) + 56) & 4) != 0
      && *(_DWORD *)(v5 + 360))
    {
LABEL_13:
      v10 = *((_DWORD *)this + 76);
      if (v10 >= (int)v3)
        v10 = *((_DWORD *)this + 73);
      *((_DWORD *)this + 73) = v10;
      *((_DWORD *)this + 74) = v10;
LABEL_115:
      v68 = *(_QWORD *)(v4 + 8);
      if (v68 && !*(_BYTE *)(v68 + 367) && *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 4) + 8) + 46) == 49)
      {
        v69 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8)
                                    + 1944)
                        + 248);
        v70 = v69 + 1316;
        if (!*(_BYTE *)(v69 + 1316) && !*(_BYTE *)(v69 + 1317) && !*(_DWORD *)(v69 + 1320) && !*(_DWORD *)(v69 + 1324))
        {
          v71 = *(_QWORD *)(v69 + 328);
          if (*(_QWORD *)(*(_QWORD *)(v71 + 128) + 8) == v71)
          {
            v72 = *(_QWORD *)(v71 + 24);
            if (v72)
            {
              v73 = *(_QWORD *)(v72 + 8);
              if (v73)
                v70 = v73 + 468;
            }
          }
        }
        v74 = *(_DWORD *)(v70 + 4);
        if (v74)
        {
          v75 = (float)v74 * 64.0;
          if (v75 >= 2147483650.0)
          {
            v10 = 0x7FFFFFFF;
          }
          else if (v75 <= -2147483650.0)
          {
            v10 = 0x80000000;
          }
          else
          {
            v10 = (int)v75;
          }
          *((_DWORD *)this + 73) = v10;
        }
      }
      goto LABEL_131;
    }
  }
  if (a2)
  {
    v11 = *((_QWORD *)this + 32);
    v12 = *((_QWORD *)this + 33);
    v13 = v11 + v12;
    if (__OFADD__((_DWORD)v11, (_DWORD)v12))
      v13 = (v11 >> 31) + 0x7FFFFFFF;
    v14 = HIDWORD(v11);
    v15 = HIDWORD(v12);
    v16 = __OFADD__((_DWORD)v14, (_DWORD)v15);
    v17 = v14 + v15;
    v18 = (v14 >> 31) + 0x7FFFFFFF;
    if (!v16)
      v18 = v17;
    if ((*((_BYTE *)this + 21) & 0x10) != 0)
      v19 = v13;
    else
      v19 = v18;
    WebCore::RenderMultiColumnSet::addForcedBreak((uint64_t)this, v19);
    v20 = *((unsigned int *)this + 83);
    v21 = v20;
    v22 = *((_DWORD *)this + 71);
    if (v20 < v22)
    {
      if ((_DWORD)v20)
      {
        v23 = *((_QWORD *)this + 40);
        while (1)
        {
          v24 = 0;
          v25 = 0;
          v26 = 0;
          v27 = 0;
          v28 = (_DWORD *)(v23 + 4);
          do
          {
            v29 = v27;
            v27 = *(v28 - 1);
            v16 = __OFSUB__(v27, v29);
            v30 = v27 - v29;
            if (v16)
              v30 = (v27 >> 31) + 0x7FFFFFFF;
            v31 = ceilf((float)((float)v30 * 0.015625) / (float)(*v28 + 1)) * 64.0;
            if (v31 >= 2147483650.0)
            {
              v32 = 0x7FFFFFFF;
            }
            else if (v31 <= -2147483650.0)
            {
              v32 = 0x80000000;
            }
            else
            {
              v32 = (int)v31;
            }
            v33 = v26 < v32;
            if (v26 <= v32)
              v26 = v32;
            if (v33)
              v24 = v25;
            ++v25;
            v28 += 2;
          }
          while (v20 != v25);
          if (v20 <= v24)
            break;
          ++*(_DWORD *)(v23 + 8 * v24 + 4);
          if (++v21 == v22)
            goto LABEL_81;
        }
      }
      __break(0xC471u);
      JUMPOUT(0x19641FD68);
    }
    if ((_DWORD)v20)
    {
LABEL_81:
      LODWORD(v50) = 0;
      v51 = 0;
      v52 = 0;
      v53 = 0;
      v54 = *((_QWORD *)this + 40);
      v55 = (_DWORD *)(v54 + 4);
      do
      {
        v56 = v53;
        v53 = *(v55 - 1);
        v16 = __OFSUB__(v53, v56);
        v57 = v53 - v56;
        if (v16)
          v57 = (v53 >> 31) + 0x7FFFFFFF;
        v58 = ceilf((float)((float)v57 * 0.015625) / (float)(*v55 + 1)) * 64.0;
        if (v58 >= 2147483650.0)
        {
          v59 = 0x7FFFFFFF;
        }
        else if (v58 <= -2147483650.0)
        {
          v59 = 0x80000000;
        }
        else
        {
          v59 = (int)v58;
        }
        v60 = v52 < v59;
        if (v52 <= v59)
          v52 = v59;
        if (v60)
          v50 = v51;
        else
          v50 = v50;
        ++v51;
        v55 += 2;
      }
      while (v20 != v51);
      if ((_DWORD)v50)
      {
        if (v20 > (int)v50 - 1)
        {
          v61 = *(_DWORD *)(v54 + 8 * (v50 - 1));
LABEL_103:
          if (v50 >= v20)
          {
            __break(0xC471u);
            JUMPOUT(0x19641FD80);
          }
          v62 = *((_QWORD *)this + 40);
          v63 = *(_DWORD *)(v62 + 8 * v50);
          v16 = __OFSUB__(v63, v61);
          v64 = v63 - v61;
          v65 = (v63 >> 31) + 0x7FFFFFFF;
          if (v16)
            v64 = v65;
          v66 = ceilf((float)((float)v64 * 0.015625) / (float)(*(_DWORD *)(v62 + 8 * v50 + 4) + 1)) * 64.0;
          if (v66 >= 2147483650.0)
          {
            v67 = 0x7FFFFFFF;
          }
          else if (v66 <= -2147483650.0)
          {
            v67 = 0x80000000;
          }
          else
          {
            v67 = (int)v66;
          }
          v44 = *((_DWORD *)this + 78);
          if (v67 > v44)
            v44 = v67;
          goto LABEL_112;
        }
LABEL_141:
        __break(0xC471u);
        JUMPOUT(0x19641FD48);
      }
    }
    else
    {
      v20 = 0;
    }
    v50 = 0;
    v61 = *((_DWORD *)this + 64);
    if ((*((_BYTE *)this + 21) & 0x10) == 0)
      v61 = *((_DWORD *)this + 65);
    goto LABEL_103;
  }
  if ((int)v3 < 1
    || ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 31) + 8) + 21) & 0x10) != 0
      ? (v34 = *((_QWORD *)this + 33))
      : (v34 = HIDWORD(*((_QWORD *)this + 33))),
        (int)v34 < 1))
  {
    v41 = 1;
  }
  else
  {
    v35 = 0x7FFFFFFF;
    if ((uint64_t)(((unint64_t)v34 << 6) / v3) >= 0x7FFFFFFF)
      LODWORD(v36) = 0x7FFFFFFF;
    else
      v36 = ((unint64_t)v34 << 6) / v3;
    v37 = v36 >> 6;
    v38 = v36 & 0x7FFFFFC0;
    if (v37 != 0x1FFFFFF)
      v35 = v38;
    v39 = v35 * (unint64_t)v3;
    v40 = v39 >> 6;
    if (v39 >> 38 != (int)(v39 >> 6) >> 31)
      LODWORD(v40) = 0x7FFFFFFF;
    if ((int)v40 >= (int)v34)
      v41 = v37;
    else
      v41 = v37 + 1;
  }
  v42 = *((_DWORD *)this + 79) & ~(*((int *)this + 79) >> 31);
  v43 = *((_DWORD *)this + 71);
  if (v41 <= v43 || *((_DWORD *)this + 83) >= v43)
  {
    v16 = __OFADD__((_DWORD)v3, v42);
    v49 = v3 + v42;
    v44 = (v3 >> 31) + 0x7FFFFFFF;
    if (!v16)
      v44 = v49;
  }
  else
  {
    v44 = *((_DWORD *)this + 73);
    if ((int)v3 < *((_DWORD *)this + 76))
    {
      v45 = *((_DWORD *)this + 77);
      if (v42 <= v45)
        v46 = *((_DWORD *)this + 77);
      else
        v46 = *((_DWORD *)this + 79) & ~(*((int *)this + 79) >> 31);
      v16 = __OFADD__((_DWORD)v3, v46);
      v47 = v3 + v46;
      if (v16)
        v47 = (v3 >> 31) + 0x7FFFFFFF;
      v16 = __OFADD__((_DWORD)v3, v42);
      v48 = v3 + v42;
      if (v16)
        v48 = (v3 >> 31) + 0x7FFFFFFF;
      if (v45 == 0x3FFFFFFF)
        v44 = v48;
      else
        v44 = v47;
    }
  }
LABEL_112:
  v10 = *((_DWORD *)this + 76);
  if (v10 >= v44)
    v10 = v44;
  *((_DWORD *)this + 73) = v10;
  *((_DWORD *)this + 74) = v10;
  v4 = *((_QWORD *)this + 31);
  if (v4)
    goto LABEL_115;
LABEL_131:
  *((_BYTE *)this + 300) = 1;
  if (v10 != (_DWORD)v3)
    *((_DWORD *)this + 77) = 0x3FFFFFFF;
  return v10 != (_DWORD)v3;
}

uint64_t WebCore::RenderMultiColumnSet::updateLogicalWidth(WebCore::RenderMultiColumnSet *this)
{
  uint64_t v2;
  WebCore::RenderBox *v3;
  uint64_t result;
  char *v5;

  *(_QWORD *)((char *)this + 284) = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 31) + 8) + 352);
  v2 = *((_QWORD *)this + 4);
  if (v2)
  {
    v3 = *(WebCore::RenderBox **)(v2 + 8);
    if (v3 && (*((_BYTE *)v3 + 52) & 7) != 1)
    {
      result = 105;
      __break(0xC471u);
      return result;
    }
  }
  else
  {
    v3 = 0;
  }
  result = WebCore::RenderBox::contentLogicalWidth(v3);
  v5 = (char *)this + 164;
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
    v5 = (char *)this + 160;
  *(_DWORD *)v5 = result;
  return result;
}

WTF *WebCore::RenderMultiColumnSet::prepareForLayout(WebCore::RenderMultiColumnSet *this, int a2)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  unsigned int v7;
  _DWORD *v8;
  _DWORD *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  unsigned int v15;
  int v16;
  BOOL v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  char *v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  double v43;
  int v44;
  uint64_t v45;
  WebCore::RenderBox *v46;
  WTF *result;
  void *v48;
  char *v49;
  uint64_t v50;
  int v51;
  unsigned int v52;
  int v53;
  int v54;
  int v55;
  unint64_t v56;
  uint64_t v57;
  unsigned int v58;
  int v59;
  int v60;
  int v61;
  signed int v62;
  uint64_t v63;
  int v64;
  int v65;

  if (this
    && (v4 = *((unsigned int *)this + 10), v4 | ((unint64_t)*((unsigned __int8 *)this + 44) << 32))
    && (v5 = *(_QWORD *)((v4 | ((unint64_t)*((unsigned __int8 *)this + 44) << 32)) + 8)) != 0
    && (*(_BYTE *)(v5 + 45) & 4) != 0
    && ((*(_BYTE *)(v5 + 52) & 7) == 1 ? (v6 = (*(_BYTE *)(v5 + 53) & 2) == 0) : (v6 = 1), v6))
  {
    v7 = *(_DWORD *)(v5 + 124);
    v8 = (_DWORD *)(v5 + 152);
    v9 = (_DWORD *)(v5 + 160);
    if (((v7 >> 13) & 6) - 2 >= 4)
    {
      v8 = (_DWORD *)(v5 + 156);
      v9 = (_DWORD *)(v5 + 164);
    }
    v17 = __OFADD__(*v8, *v9);
    v10 = *v8 + *v9;
    if (v17)
      v10 = (*v8 >> 31) + 0x7FFFFFFF;
    v11 = ((unsigned __int16)v7 >> 13) - 1;
    if (v11 > 4)
      v12 = 2;
    else
      v12 = qword_1969FCD70[v11];
    v65 = *(_DWORD *)(v5 + 4 * v12 + 168);
    v17 = __OFADD__(v10, v65);
    v18 = v10 + v65;
    v19 = (v10 >> 31) + 0x7FFFFFFF;
  }
  else
  {
    v13 = *((_QWORD *)this + 4);
    if (v13)
    {
      v14 = *(_BYTE **)(v13 + 8);
      if (v14 && (v14[52] & 7) != 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1964203C0);
      }
    }
    else
    {
      v14 = 0;
    }
    v15 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v14 + 1048))(v14);
    v16 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v14 + 960))(v14);
    v17 = __OFADD__(v15, v16);
    v18 = v15 + v16;
    v19 = (v15 >> 31) + 0x7FFFFFFF;
  }
  if (v17)
    v18 = v19;
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
  {
    *((_DWORD *)this + 39) = v18;
    if (!a2)
      goto LABEL_27;
    goto LABEL_26;
  }
  *((_DWORD *)this + 38) = v18;
  if (a2)
LABEL_26:
    *((_DWORD *)this + 76) = WebCore::RenderMultiColumnSet::calculateMaxColumnHeight(this);
LABEL_27:
  v20 = *((_QWORD *)this + 31);
  v21 = *(_QWORD *)(v20 + 8);
  if (*(_BYTE *)(v21 + 367))
  {
    v22 = *(unsigned int *)((char *)this + 47);
    if (v22 | ((unint64_t)*((unsigned __int8 *)this + 51) << 32))
    {
      v23 = *(_QWORD *)((v22 | ((unint64_t)*((unsigned __int8 *)this + 51) << 32)) + 8);
      if (v23)
      {
        if ((*(_BYTE *)(v23 + 45) & 4) != 0 && *(_BYTE *)(v23 + 46) != 26)
        {
          if ((*(_BYTE *)(v23 + 45) & 1) != 0)
            goto LABEL_39;
          v24 = *(_QWORD *)(*(_QWORD *)(v23 + 24) + 8);
          if (!v24
            || (*(_WORD *)(v24 + 28) & 0x10) == 0
            || *(_QWORD *)(*(_QWORD *)(v24 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::legendTag + 24))
          {
            goto LABEL_39;
          }
        }
      }
    }
    v25 = (char *)this + 32;
    v26 = *(_QWORD *)(*((_QWORD *)this + 4) + 8);
    if ((*(_BYTE *)(v26 + 52) & 7) != 1)
    {
      __break(0xC471u);
      JUMPOUT(0x1964203A0);
    }
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v26 + 88) + 32) + 24) + 56) & 4) == 0
      || (v27 = *(_DWORD *)(v21 + 360)) == 0)
    {
LABEL_39:
      if (a2)
      {
        *((_BYTE *)this + 300) = 0;
        *(_QWORD *)((char *)this + 292) = 0;
      }
      goto LABEL_77;
    }
  }
  else
  {
    v27 = *(_DWORD *)(v21 + 360);
    v25 = (char *)this + 32;
    v28 = *((_QWORD *)this + 4);
    if (v28)
      v26 = *(_QWORD *)(v28 + 8);
    else
      v26 = 0;
  }
  if ((*(_BYTE *)(v26 + 52) & 7) != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1964203E0);
  }
  v29 = (char *)this + 152;
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
    v29 = (char *)this + 156;
  v30 = *(_DWORD *)v29;
  v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 1048))(v26);
  v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 960))(v26);
  v33 = v31 + v32;
  if (__OFADD__(v31, v32))
    v33 = (v31 >> 31) + 0x7FFFFFFF;
  v17 = __OFSUB__(v30, v33);
  v34 = v30 - v33;
  if (v17)
    v34 = (v30 >> 31) + 0x7FFFFFFF;
  v17 = __OFSUB__(v27, v34);
  v35 = v27 - v34;
  if (v17)
    v35 = (v27 >> 31) + 0x7FFFFFFF;
  if (v35 <= 64)
    v35 = 64;
  if (*((_DWORD *)this + 76) < v35)
    v35 = *((_DWORD *)this + 76);
  *((_DWORD *)this + 73) = v35;
  *((_DWORD *)this + 74) = v35;
  v20 = *((_QWORD *)this + 31);
  if (v20)
  {
    v36 = *(_QWORD *)(v20 + 8);
    if (v36)
    {
      if (!*(_BYTE *)(v36 + 367) && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)v25 + 8) + 46) == 49)
      {
        v37 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8)
                                    + 1944)
                        + 248);
        v38 = v37 + 1316;
        if (!*(_BYTE *)(v37 + 1316) && !*(_BYTE *)(v37 + 1317) && !*(_DWORD *)(v37 + 1320) && !*(_DWORD *)(v37 + 1324))
        {
          v39 = *(_QWORD *)(v37 + 328);
          if (*(_QWORD *)(*(_QWORD *)(v39 + 128) + 8) == v39)
          {
            v40 = *(_QWORD *)(v39 + 24);
            if (v40)
            {
              v41 = *(_QWORD *)(v40 + 8);
              if (v41)
                v38 = v41 + 468;
            }
          }
        }
        v42 = *(_DWORD *)(v38 + 4);
        if (v42)
        {
          v43 = (float)v42 * 64.0;
          if (v43 >= 2147483650.0)
          {
            v44 = 0x7FFFFFFF;
          }
          else if (v43 <= -2147483650.0)
          {
            v44 = 0x80000000;
          }
          else
          {
            v44 = (int)v43;
          }
          *((_DWORD *)this + 73) = v44;
        }
      }
    }
  }
  *((_BYTE *)this + 300) = 1;
LABEL_77:
  *(_QWORD *)((char *)this + 284) = *(_QWORD *)(*(_QWORD *)(v20 + 8) + 352);
  v45 = *((_QWORD *)this + 4);
  if (v45)
  {
    v46 = *(WebCore::RenderBox **)(v45 + 8);
    if (v46 && (*((_BYTE *)v46 + 52) & 7) != 1)
    {
      __break(0xC471u);
      JUMPOUT(0x196420380);
    }
  }
  else
  {
    v46 = 0;
  }
  result = (WTF *)WebCore::RenderBox::contentLogicalWidth(v46);
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
    v49 = (char *)this + 164;
  else
    v49 = (char *)this + 160;
  *(_DWORD *)v49 = (_DWORD)result;
  if (*((_DWORD *)this + 82))
  {
    if (*((_DWORD *)this + 83))
      *((_DWORD *)this + 83) = 0;
    result = (WTF *)*((_QWORD *)this + 40);
    if ((WebCore::RenderMultiColumnSet *)((char *)this + 336) != result && result)
    {
      *((_QWORD *)this + 40) = 0;
      *((_DWORD *)this + 82) = 0;
      WTF::fastFree(result, v48);
      result = (WTF *)*((_QWORD *)this + 40);
    }
    if (!result)
    {
      *((_QWORD *)this + 40) = (char *)this + 336;
      *((_DWORD *)this + 82) = 1;
    }
  }
  *((_QWORD *)this + 39) = 0;
  v50 = *((_QWORD *)this + 33);
  v51 = *((_DWORD *)this + 5);
  if ((v51 & 0x1000) != 0)
  {
    v58 = *((_DWORD *)this + 64);
    v17 = __OFADD__(v58, (_DWORD)v50);
    v59 = v58 + v50;
    v60 = (v58 >> 31) + 0x7FFFFFFF;
    if (!v17)
      v60 = v59;
    v17 = __OFSUB__(0x3FFFFFFF, v60);
    v61 = 0x3FFFFFFF - v60;
    if (v17)
      v61 = 0x7FFFFFFF;
    v17 = __OFADD__((_DWORD)v50, v61);
    v62 = v50 + v61;
    if (v17)
      v62 = (v50 >> 31) + 0x7FFFFFFF;
    v57 = v62 & ~(v62 >> 31);
    v56 = v50 & 0xFFFFFFFF00000000;
  }
  else
  {
    v52 = *((_DWORD *)this + 65);
    v53 = v52 + HIDWORD(v50);
    if (__OFADD__(v52, HIDWORD(v50)))
      v53 = (v52 >> 31) + 0x7FFFFFFF;
    v17 = __OFSUB__(0x3FFFFFFF, v53);
    v54 = 0x3FFFFFFF - v53;
    if (v17)
      v54 = 0x7FFFFFFF;
    v17 = __OFADD__(HIDWORD(v50), v54);
    v55 = HIDWORD(v50) + v54;
    if (v17)
      v55 = (HIDWORD(v50) >> 31) + 0x7FFFFFFF;
    v56 = (unint64_t)(v55 & ~(v55 >> 31)) << 32;
    v57 = *((_QWORD *)this + 33);
  }
  *((_QWORD *)this + 33) = v56 | v57;
  if ((v51 & 8) == 0)
  {
    *((_DWORD *)this + 5) = v51 | 8;
    if ((v51 & 0x8000) != 0)
    {
      if ((*((_BYTE *)this + 45) & 0x10) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x196420400);
      }
      v63 = *((_QWORD *)this + 18);
      if (v63)
      {
        v64 = *(_DWORD *)(v63 + 8) + 1;
        *(_DWORD *)(v63 + 8) = v64;
      }
      else
      {
        v64 = MEMORY[8];
      }
      *(_QWORD *)(v63 + 24) = *(_QWORD *)(v63 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
      if (!v64)
      {
        __break(0xC471u);
        JUMPOUT(0x19642042CLL);
      }
      *(_DWORD *)(v63 + 8) = v64 - 1;
    }
  }
  return result;
}

uint64_t WebCore::RenderMultiColumnSet::calculateMaxColumnHeight(WebCore::RenderMultiColumnSet *this)
{
  uint64_t v1;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  BOOL v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  int v20;
  int v21;

  v1 = *(_QWORD *)(*((_QWORD *)this + 4) + 8);
  if ((*(_BYTE *)(v1 + 52) & 7) != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x196420678);
  }
  if (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 31) + 8) + 360))
    v3 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 31) + 8) + 360);
  else
    v3 = 0x3FFFFFFF;
  v4 = *(_QWORD *)(*(_QWORD *)(v1 + 88) + 8);
  if (((*(_DWORD *)(v1 + 124) >> 13) & 6u) - 2 <= 3)
  {
    if (*(_BYTE *)(v4 + 32) == 13)
      goto LABEL_25;
    v5 = v4 + 28;
  }
  else
  {
    if (*(_BYTE *)(v4 + 48) == 13)
      goto LABEL_25;
    v5 = v4 + 44;
  }
  v6 = WebCore::RenderBox::computeContentAndScrollbarLogicalHeightUsing(*(WebCore::RenderBox **)(*((_QWORD *)this + 4) + 8), 2, v5, 0);
  if ((v6 & 0xFF00000000) != 0)
  {
    v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 1272))(v1, v6);
    v8 = 1360;
    if (((*(_DWORD *)(v1 + 124) >> 13) & 6u) - 2 < 4)
      v8 = 1352;
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + v8))(v1);
    v10 = v9 << 6;
    if (v9 < -33554432)
      v10 = 0x80000000;
    if (v9 > 0x1FFFFFF)
      v10 = 0x7FFFFFFF;
    v11 = __OFSUB__(v7, v10);
    v12 = v7 - v10;
    if (v11)
      v12 = (v7 >> 31) + 0x7FFFFFFF;
    v13 = v12 & ~(v12 >> 31) | 0x100000000;
  }
  else
  {
    v13 = 0;
  }
  if ((v13 & 0x100000000) == 0)
    LODWORD(v13) = v3;
  if ((int)v13 < v3)
    v3 = v13;
  v14 = *((_QWORD *)this + 4);
  if (v14)
    v1 = *(_QWORD *)(v14 + 8);
  else
    v1 = 0;
LABEL_25:
  if ((*(_BYTE *)(v1 + 52) & 7) != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x196420698);
  }
  v15 = (char *)this + 152;
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
    v15 = (char *)this + 156;
  v16 = *(_DWORD *)v15;
  v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 1048))(v1);
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 960))(v1);
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
    v19 = (v17 >> 31) + 0x7FFFFFFF;
  v11 = __OFSUB__(v16, v19);
  v20 = v16 - v19;
  if (v11)
    v20 = (v16 >> 31) + 0x7FFFFFFF;
  v11 = __OFSUB__(v3, v20);
  v21 = v3 - v20;
  if (v11)
    v21 = (v3 >> 31) + 0x7FFFFFFF;
  if (v21 <= 64)
    return 64;
  else
    return v21;
}

uint64_t *WebCore::RenderMultiColumnSet::layout(WebCore::RenderMultiColumnSet *this)
{
  uint64_t *result;
  void *v3;
  unint64_t i;
  uint64_t v5;
  uint64_t v6;
  WebCore::RenderFragmentedFlow *v7;

  WebCore::RenderBlock::layout(this);
  result = (uint64_t *)WebCore::RenderMultiColumnSet::calculateMaxColumnHeight(this);
  *((_DWORD *)this + 76) = (_DWORD)result;
  for (i = *(unsigned int *)((char *)this + 47) | ((unint64_t)*((unsigned __int8 *)this + 51) << 32);
        i;
        i = *(unsigned int *)(v5 + 47) | ((unint64_t)*(unsigned __int8 *)(v5 + 51) << 32))
  {
    v5 = *(_QWORD *)(i + 8);
    if (!v5)
      break;
    if (*(_BYTE *)(v5 + 46) == 26)
      return result;
  }
  v6 = *((_QWORD *)this + 31);
  if (v6)
    v7 = *(WebCore::RenderFragmentedFlow **)(v6 + 8);
  else
    v7 = 0;
  return WebCore::RenderFragmentedFlow::validateFragments(v7, v3);
}

uint64_t WebCore::RenderMultiColumnSet::computeLogicalHeight@<X0>(uint64_t result@<X0>, int a2@<W2>, uint64_t a3@<X8>)
{
  *(_DWORD *)a3 = *(_DWORD *)(result + 296);
  *(_DWORD *)(a3 + 4) = a2;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  return result;
}

uint64_t WebCore::RenderMultiColumnSet::columnLogicalLeft(WebCore::RenderMultiColumnSet *this, unsigned int a2)
{
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float *v11;
  float v12;
  int v13;
  int v14;
  float v15;
  double v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;

  v4 = *((_DWORD *)this + 72);
  v5 = *(_QWORD *)this;
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
  {
    v6 = (*(uint64_t (**)(WebCore::RenderMultiColumnSet *))(v5 + 1000))(this);
    v7 = (*(uint64_t (**)(WebCore::RenderMultiColumnSet *))(*(_QWORD *)this + 928))(this);
  }
  else
  {
    v6 = (*(uint64_t (**)(WebCore::RenderMultiColumnSet *))(v5 + 1016))(this);
    v7 = (*(uint64_t (**)(WebCore::RenderMultiColumnSet *))(*(_QWORD *)this + 944))(this);
  }
  if (__OFADD__(v6, v7))
    v8 = (v6 >> 31) + 0x7FFFFFFF;
  else
    v8 = v6 + v7;
  v9 = *((_QWORD *)this + 4);
  if (v9)
    v10 = *(_QWORD *)(v9 + 8);
  else
    v10 = 0;
  if ((*(_BYTE *)(v10 + 52) & 7) != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1964209F0);
  }
  v11 = *(float **)(*(_QWORD *)(v10 + 88) + 40);
  if (*((_BYTE *)v11 + 376))
  {
    v12 = *(float *)(*(_QWORD *)(v10 + 112) + 204);
LABEL_19:
    v16 = v12 * 64.0;
    if (v16 >= 2147483650.0)
    {
      v14 = 0x7FFFFFFF;
    }
    else if (v16 <= -2147483650.0)
    {
      v14 = 0x80000000;
    }
    else
    {
      v14 = (int)v16;
    }
    goto LABEL_22;
  }
  v13 = WebCore::RenderBox::contentLogicalWidth((WebCore::RenderBox *)v10);
  if (*((_BYTE *)v11 + 384) == 4)
  {
    v12 = v11[95];
    if (!*((_BYTE *)v11 + 386))
      v12 = (float)SLODWORD(v12);
    goto LABEL_19;
  }
  v14 = 0;
  switch(*((_BYTE *)v11 + 384))
  {
    case 0:
    case 1:
    case 9:
      v14 = v13;
      break;
    case 3:
      v15 = v11[95];
      if (!*((_BYTE *)v11 + 386))
        v15 = (float)SLODWORD(v15);
      v12 = (float)((float)((float)v13 * 0.015625) * v15) / 100.0;
      goto LABEL_19;
    case 0xB:
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v11 + 95), (float)v13 * 0.015625);
      goto LABEL_19;
    default:
      break;
  }
LABEL_22:
  v17 = *(_QWORD *)(*((_QWORD *)this + 31) + 8);
  if (*(_BYTE *)(v17 + 367))
  {
    if ((*(_BYTE *)(v17 + 368) != 0) == ((*((_BYTE *)this + 123) & 4) == 0))
    {
      v24 = WebCore::RenderBox::contentLogicalWidth(this);
      v25 = v24 - v4;
      if (__OFSUB__(v24, v4))
        v25 = (v24 >> 31) + 0x7FFFFFFF;
      v26 = v4 + v14;
      if (__OFADD__(v4, v14))
        v26 = (v4 >> 31) + 0x7FFFFFFF;
      LODWORD(v27) = a2 << 6;
      if (a2 <= 0x1FFFFFE)
        v27 = v27;
      else
        v27 = 0x7FFFFFFFLL;
      v28 = v26 * v27 / 64;
      v29 = (v26 >> 31) + 0x7FFFFFFF;
      if (HIDWORD(v28) == (int)v28 >> 31)
        v29 = v28;
      v22 = __OFSUB__(v25, v29);
      v30 = v25 - v29;
      if (v22)
        v30 = (v25 >> 31) + 0x7FFFFFFF;
      v22 = __OFADD__((_DWORD)v8, v30);
      v23 = v8 + v30;
    }
    else
    {
      v18 = v4 + v14;
      if (__OFADD__(v4, v14))
        v18 = (v4 >> 31) + 0x7FFFFFFF;
      LODWORD(v19) = a2 << 6;
      if (a2 <= 0x1FFFFFE)
        v19 = v19;
      else
        v19 = 0x7FFFFFFFLL;
      v20 = v18 * v19 / 64;
      v21 = (v18 >> 31) + 0x7FFFFFFF;
      if (HIDWORD(v20) == (int)v20 >> 31)
        v21 = v20;
      v22 = __OFADD__((_DWORD)v8, v21);
      v23 = v8 + v21;
    }
    if (v22)
      return (v8 >> 31) + 0x7FFFFFFF;
    else
      return v23;
  }
  return v8;
}

uint64_t WebCore::RenderMultiColumnSet::columnLogicalTop(WebCore::RenderMultiColumnSet *this, unsigned int a2)
{
  unsigned int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float *v10;
  float v11;
  int v12;
  int v13;
  float v14;
  double v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  BOOL v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;

  v4 = *((_DWORD *)this + 73);
  v5 = (*(uint64_t (**)(WebCore::RenderMultiColumnSet *))(*(_QWORD *)this + 1048))(this);
  v6 = (*(uint64_t (**)(WebCore::RenderMultiColumnSet *))(*(_QWORD *)this + 960))(this);
  if (__OFADD__(v5, v6))
    v7 = (v5 >> 31) + 0x7FFFFFFF;
  else
    v7 = v5 + v6;
  v8 = *((_QWORD *)this + 4);
  if (v8)
    v9 = *(_QWORD *)(v8 + 8);
  else
    v9 = 0;
  if ((*(_BYTE *)(v9 + 52) & 7) != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x196420CE8);
  }
  v10 = *(float **)(*(_QWORD *)(v9 + 88) + 40);
  if (*((_BYTE *)v10 + 376))
  {
    v11 = *(float *)(*(_QWORD *)(v9 + 112) + 204);
LABEL_17:
    v15 = v11 * 64.0;
    if (v15 >= 2147483650.0)
    {
      v13 = 0x7FFFFFFF;
    }
    else if (v15 <= -2147483650.0)
    {
      v13 = 0x80000000;
    }
    else
    {
      v13 = (int)v15;
    }
    goto LABEL_20;
  }
  v12 = WebCore::RenderBox::contentLogicalWidth((WebCore::RenderBox *)v9);
  if (*((_BYTE *)v10 + 384) == 4)
  {
    v11 = v10[95];
    if (!*((_BYTE *)v10 + 386))
      v11 = (float)SLODWORD(v11);
    goto LABEL_17;
  }
  v13 = 0;
  switch(*((_BYTE *)v10 + 384))
  {
    case 0:
    case 1:
    case 9:
      v13 = v12;
      break;
    case 3:
      v14 = v10[95];
      if (!*((_BYTE *)v10 + 386))
        v14 = (float)SLODWORD(v14);
      v11 = (float)((float)((float)v12 * 0.015625) * v14) / 100.0;
      goto LABEL_17;
    case 0xB:
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v10 + 95), (float)v12 * 0.015625);
      goto LABEL_17;
    default:
      break;
  }
LABEL_20:
  v16 = *(_QWORD *)(*((_QWORD *)this + 31) + 8);
  if (!*(_BYTE *)(v16 + 367))
  {
    if (*(_BYTE *)(v16 + 368))
    {
      v17 = WebCore::RenderBox::contentLogicalHeight(this);
      v18 = v17 - v4;
      if (__OFSUB__(v17, v4))
        v18 = (v17 >> 31) + 0x7FFFFFFF;
      v19 = v4 + v13;
      if (__OFADD__(v4, v13))
        v19 = (v4 >> 31) + 0x7FFFFFFF;
      LODWORD(v20) = a2 << 6;
      if (a2 <= 0x1FFFFFE)
        v20 = v20;
      else
        v20 = 0x7FFFFFFFLL;
      v21 = v19 * v20 / 64;
      v22 = (v19 >> 31) + 0x7FFFFFFF;
      if (HIDWORD(v21) == (int)v21 >> 31)
        v22 = v21;
      v25 = __OFSUB__(v18, v22);
      v23 = v18 - v22;
      v24 = (v18 >> 31) + 0x7FFFFFFF;
      if (!v25)
        v24 = v23;
      v25 = __OFADD__((_DWORD)v7, v24);
      v26 = v7 + v24;
      v27 = (v7 >> 31) + 0x7FFFFFFF;
    }
    else
    {
      v28 = v4 + v13;
      if (__OFADD__(v4, v13))
        v28 = (v4 >> 31) + 0x7FFFFFFF;
      LODWORD(v29) = a2 << 6;
      if (a2 <= 0x1FFFFFE)
        v29 = v29;
      else
        v29 = 0x7FFFFFFFLL;
      v30 = v28 * v29 / 64;
      v31 = (v28 >> 31) + 0x7FFFFFFF;
      if (HIDWORD(v30) == (int)v30 >> 31)
        v31 = v30;
      v25 = __OFADD__((_DWORD)v7, v31);
      v26 = v7 + v31;
      v27 = (v7 >> 31) + 0x7FFFFFFF;
    }
    if (v25)
      return v27;
    else
      return v26;
  }
  return v7;
}

unint64_t WebCore::RenderMultiColumnSet::fragmentedFlowPortionOverflowRect(uint64_t a1, _DWORD *a2, int a3, int a4, int a5)
{
  uint64_t v9;
  int v10;
  BOOL v12;
  _BOOL4 v13;
  uint64_t v14;
  _QWORD **v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *i;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  BOOL v28;
  int v29;
  int v30;
  unsigned int v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int v34;
  unint64_t v35;

  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 248) + 8);
  v10 = a4 - 1;
  if ((*(_BYTE *)(v9 + 368) != 0) != ((*(_BYTE *)(a1 + 123) & 4) == 0))
    v12 = a3 == 0;
  else
    v12 = a4 - 1 == a3;
  if (a3)
  {
    v13 = 0;
  }
  else
  {
    if ((WTF::WeakListHashSet<WebCore::RenderFragmentContainer,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((uint64_t *)(v9 + 248), a2) & 1) != 0)
    {
      v14 = 0;
    }
    else
    {
      v15 = (_QWORD **)(v9 + 256);
      do
      {
        v16 = *v15;
        v17 = *v16;
        v15 = (_QWORD **)(v16 + 2);
        v14 = *(_QWORD *)(v17 + 8);
      }
      while (!v14);
    }
    v13 = v14 == a1;
  }
  if (v10 == a3)
  {
    v18 = *(_QWORD *)(a1 + 248);
    v19 = v18 ? *(_QWORD *)(v18 + 8) : 0;
    if ((WTF::WeakListHashSet<WebCore::RenderFragmentContainer,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((uint64_t *)(v19 + 248), a2) & 1) == 0)
    {
      for (i = *(_QWORD **)(v19 + 264); i != *(_QWORD **)(v19 + 256) && !*(_QWORD *)(*i + 8); i = (_QWORD *)i[1])
        ;
      ++*(_DWORD *)(v19 + 272);
    }
  }
  v21 = WebCore::RenderFragmentContainer::overflowRectForFragmentedFlowPortion((WebCore::RenderFragmentContainer *)a1, (const WebCore::LayoutRect *)a2, v13);
  v22 = HIDWORD(v21);
  v23 = *(_QWORD *)(a1 + 32);
  if (v23)
    v23 = *(_QWORD *)(v23 + 8);
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8) + 1944) == v23)
  {
    if ((*(_BYTE *)(a1 + 21) & 0x10) != 0)
    {
      if (!v12)
      {
        v31 = a2[1];
        v32 = ((uint64_t)a5 << 6) + 127;
        if ((a5 & 0x200000000000000) == 0)
          v32 = (uint64_t)a5 << 6;
        v33 = v32 >> 7;
        v28 = __OFSUB__(v31, (_DWORD)v33);
        v34 = v31 - v33;
        LODWORD(v35) = (v31 >> 31) + 0x7FFFFFFF;
        if (v28)
          v35 = v35;
        else
          v35 = v34;
        v22 = v35;
      }
    }
    else if (!v12)
    {
      v25 = *a2;
      v26 = (uint64_t)a5 << 6;
      if ((a5 & 0x200000000000000) != 0)
        v26 += 127;
      v27 = v26 >> 7;
      v28 = __OFSUB__(v25, (_DWORD)v27);
      v29 = v25 - v27;
      v30 = (v25 >> 31) + 0x7FFFFFFF;
      if (!v28)
        v30 = v29;
      LODWORD(v21) = v30;
    }
  }
  return v21 | (v22 << 32);
}

void WebCore::RenderMultiColumnSet::paintColumnRules(WebCore::RenderMultiColumnSet *this, WebCore::PaintInfo *a2, const WebCore::LayoutPoint *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  BOOL v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  float *v17;
  float v18;
  int v19;
  int v20;
  float v21;
  double v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int v32;
  __n128 v33;
  int v34;
  unsigned int v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  int v46;
  int v47;
  int v48;
  unsigned int v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  unsigned int v54;
  int v55;
  uint64_t v56;
  unsigned int v57;
  int v58;
  int v59;
  int v60;
  unsigned int v61;
  int v62;
  int v63;
  int v64;
  unsigned int v65;
  int v66;
  int v67;
  unsigned int v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unsigned int v75;
  int v76;
  unsigned int v77;
  int v78;
  uint64_t v79;
  unsigned int v80;
  unint64_t v81;
  unint64_t v82;
  int v83;
  int v84;
  int v85;
  int v86;
  unsigned int v87;
  int v88;
  _BOOL4 v89;
  int v90;
  int v91;
  int v92;
  unsigned int v93;
  uint64_t v94;
  unint64_t v95;
  unsigned int v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int v99;
  unsigned int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  uint64_t v106;
  _QWORD *v107;
  unsigned int *v108;
  unsigned int v109;
  unsigned int *v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int v115;
  int v116;
  int v117;
  _BOOL4 v118;
  int v119;
  _BOOL4 v120;
  int v121;
  int v122;
  int v123;
  int v124;
  BOOL v125;
  unsigned int v126;
  int v127;
  int v128;
  unsigned int v129;
  unsigned int v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  int v134;
  unsigned int v135;
  int v136;
  uint64_t v137;
  float v138;
  double v139;
  int v140;
  unsigned int v141;
  unsigned __int8 *v142;
  int v143;
  float v144;
  float v145;
  double v146;
  int v147;
  unsigned int v148;
  unsigned int v149;
  int v150;
  unsigned int v151;
  int v152;
  unsigned int v153;
  int v154;
  unsigned int v155;
  int v156;
  int v157;
  int v158;
  unsigned int v159;
  int v160;
  unsigned int v161;
  unsigned int v162;
  int v163;
  int v164;
  unsigned int v165;
  uint64_t v166;
  float v167;
  double v168;
  int v169;
  unsigned int v170;
  unsigned int v171;
  unsigned __int8 *v172;
  int v173;
  float v174;
  float v175;
  double v176;
  int v177;
  int v178;
  int v179;
  unsigned int v180;
  unsigned int v181;
  unsigned int v182;
  int v183;
  int v184;
  int v185;
  BOOL v186;
  unsigned int v187;
  int v188;
  int v189;
  int v190;
  unsigned int v191;
  unsigned int v192;
  int v193;
  int v194;
  int v195;
  int v196;
  int v197;
  uint64_t v198;
  _QWORD *v199;
  uint64_t v200;
  uint64_t v201;
  float v202;
  float v203;
  unsigned int *v204;
  unsigned int v205;
  int v206;
  uint64_t v207;
  uint64_t v208;
  float v209;
  double v210;
  unsigned int v211;
  int v212;
  int v213;
  int v214;
  unsigned int *v215;
  unsigned int v216;
  unsigned int v217;
  uint64_t v218;
  float v219;
  double v220;
  unsigned int v221;
  int v222;
  uint64_t v223;
  uint64_t v224;
  unsigned int *v225;
  unsigned int v226;
  unsigned int v227;
  int v228;
  int v229;
  int v230;
  int v231;
  int v232;
  int v233;
  int v234;
  int v235;
  _BOOL4 v236;
  int v237;
  _BOOL4 v238;
  int v239;
  int v240;
  unsigned int v241;
  unint64_t v244;
  unint64_t v245;
  unint64_t v246;
  double v247;
  double v248;
  double v249;
  double v250;

  if (((*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 10) + 40))(*((_QWORD *)a2 + 10)) & 1) != 0)
    return;
  v4 = *((_QWORD *)this + 31);
  if (v4)
    v5 = *(_QWORD *)(v4 + 8);
  else
    v5 = 0;
  v6 = *((_QWORD *)this + 4);
  if (v6)
    v7 = *(_QWORD *)(v6 + 8);
  else
    v7 = 0;
  WebCore::RenderStyle::visitedDependentColorWithColorFilter(v7 + 80, 93, 0, &v246);
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 88) + 32) + 24);
  if (*(_DWORD *)(v9 + 24) || (v11 = *(_QWORD *)(v9 + 16), (v11 & 0x4000000000000) == 0))
  {
    v10 = 0;
  }
  else
  {
    if ((v11 & 0x8000000000000) != 0)
      v12 = *(float *)((v11 & 0xFFFFFFFFFFFFLL) + 0x10) > 0.0;
    else
      v12 = *(_QWORD *)(v9 + 16) != 0;
    v10 = !v12;
  }
  v13 = *(_BYTE *)(v9 + 36) & 0xF;
  if (v13 == 4)
  {
    v13 = 3;
  }
  else if (v13 == 2)
  {
    v13 = 5;
  }
  if ((*(_BYTE *)(v9 + 36) & 0xE) != 0)
    v14 = (int)*(float *)(v9 + 32);
  else
    v14 = 0;
  v15 = *((_QWORD *)this + 4);
  if (v15)
    v16 = *(_QWORD *)(v15 + 8);
  else
    v16 = 0;
  if ((*(_BYTE *)(v16 + 52) & 7) != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1964217B4);
  }
  v17 = *(float **)(*(_QWORD *)(v16 + 88) + 40);
  if (*((_BYTE *)v17 + 376))
  {
    v18 = *(float *)(*(_QWORD *)(v16 + 112) + 204);
LABEL_32:
    v22 = v18 * 64.0;
    if (v22 >= 2147483650.0)
    {
      v20 = 0x7FFFFFFF;
    }
    else if (v22 <= -2147483650.0)
    {
      v20 = 0x80000000;
    }
    else
    {
      v20 = (int)v22;
    }
    goto LABEL_35;
  }
  v19 = WebCore::RenderBox::contentLogicalWidth((WebCore::RenderBox *)v16);
  if (*((_BYTE *)v17 + 384) == 4)
  {
    v18 = v17[95];
    if (!*((_BYTE *)v17 + 386))
      v18 = (float)SLODWORD(v18);
    goto LABEL_32;
  }
  v20 = 0;
  switch(*((_BYTE *)v17 + 384))
  {
    case 0:
    case 1:
    case 9:
      v20 = v19;
      break;
    case 3:
      v21 = v17[95];
      if (!*((_BYTE *)v17 + 386))
        v21 = (float)SLODWORD(v21);
      v18 = (float)((float)((float)v19 * 0.015625) * v21) / 100.0;
      goto LABEL_32;
    case 0xB:
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v17 + 95), (float)v19 * 0.015625);
      goto LABEL_32;
    default:
      break;
  }
LABEL_35:
  if (v13 < 2)
    v23 = 1;
  else
    v23 = v10;
  if ((v23 & 1) != 0)
    goto LABEL_55;
  v24 = *((unsigned int *)this + 73);
  if ((int)v24 < 1)
    goto LABEL_55;
  v25 = (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 31) + 8) + 21) & 0x10) != 0
      ? *((_QWORD *)this + 33)
      : HIDWORD(*((_QWORD *)this + 33));
  if ((int)v25 < 1)
    goto LABEL_55;
  v26 = 0x7FFFFFFF;
  if ((uint64_t)(((unint64_t)v25 << 6) / v24) >= 0x7FFFFFFF)
    LODWORD(v27) = 0x7FFFFFFF;
  else
    v27 = ((unint64_t)v25 << 6) / v24;
  v28 = v27 >> 6;
  v29 = v27 & 0x7FFFFFC0;
  if (v28 != 0x1FFFFFF)
    v26 = v29;
  v30 = v26 * (unint64_t)v24;
  v31 = v30 >> 6;
  if (v30 >> 38 != (int)(v30 >> 6) >> 31)
    LODWORD(v31) = 0x7FFFFFFF;
  v32 = (int)v31 >= (int)v25 ? v28 : v28 + 1;
  v241 = v32;
  if (v32 < 2)
    goto LABEL_55;
  v239 = 1;
  (*(void (**)(double *__return_ptr, _QWORD, uint64_t))(**((_QWORD **)a2 + 10) + 672))(&v247, *((_QWORD *)a2 + 10), 1);
  v33.n128_f64[0] = v247;
  if (v247 == 1.0)
  {
    v33.n128_f64[0] = v248;
    v239 = 1;
    if (v248 == 0.0)
    {
      v33.n128_f64[0] = v249;
      if (v249 == 0.0)
      {
        v33.n128_f64[0] = v250;
        v239 = v250 != 1.0 && v250 != -1.0;
      }
    }
  }
  v240 = v14 << 6;
  if (*(_BYTE *)(v5 + 367))
  {
    v34 = ((*((_BYTE *)this + 123) & 4) == 0) ^ (*(_BYTE *)(v5 + 368) != 0);
    if (v34)
      v35 = 0;
    else
      v35 = WebCore::RenderBox::contentLogicalWidth(this);
    v56 = *(_QWORD *)this;
    if ((*((_BYTE *)this + 21) & 0x10) != 0)
    {
      v57 = (*(uint64_t (**)(WebCore::RenderMultiColumnSet *))(v56 + 1000))(this);
      v58 = (*(uint64_t (**)(WebCore::RenderMultiColumnSet *))(*(_QWORD *)this + 928))(this);
    }
    else
    {
      v57 = (*(uint64_t (**)(WebCore::RenderMultiColumnSet *, __n128))(v56 + 1016))(this, v33);
      v58 = (*(uint64_t (**)(WebCore::RenderMultiColumnSet *))(*(_QWORD *)this + 944))(this);
    }
    v235 = v57 + v58;
    if (__OFADD__(v57, v58))
    {
      v235 = (v57 >> 31) + 0x7FFFFFFF;
      if ((v34 & 1) != 0)
        goto LABEL_89;
    }
    else if ((v34 & 1) != 0)
    {
LABEL_89:
      v60 = 0;
      v61 = 0;
      v62 = 3;
LABEL_187:
      v113 = 0;
      if ((*((_BYTE *)this + 21) & 0x10) == 0)
        v60 = v62;
      v233 = v60;
      v114 = v241 - 1;
      v115 = *((_DWORD *)this + 72);
      if (v20 >= 0)
        v116 = v20;
      else
        v116 = v20 + 1;
      v117 = v115 + (v116 >> 1);
      v118 = __OFADD__(v115, v116 >> 1);
      v119 = (v115 >> 31) + 0x7FFFFFFF;
      v237 = v115 + v20;
      v238 = v118;
      v120 = __OFADD__(v115, v20);
      v236 = v120;
      v230 = v119;
      v231 = 32 * v14;
      v232 = v117;
      v234 = v34;
      while (1)
      {
        v121 = v117;
        if (v34)
        {
          if (v238)
            v121 = v230;
          v125 = __OFADD__(v61, v121);
          v122 = v61 + v121;
          if (v125)
            v123 = (v61 >> 31) + 0x7FFFFFFF;
          else
            v123 = v122;
          v124 = v237;
          if (v236)
            v124 = v230;
          v125 = __OFADD__(v35, v124);
          v126 = v35 + v124;
        }
        else
        {
          if (v238)
            v121 = v230;
          v125 = __OFSUB__(v61, v121);
          v127 = v61 - v121;
          if (v125)
            v123 = (v61 >> 31) + 0x7FFFFFFF;
          else
            v123 = v127;
          v128 = v237;
          if (v236)
            v128 = v230;
          v125 = __OFSUB__(v35, v128);
          v126 = v35 - v128;
        }
        if (v125)
          v35 = (v35 >> 31) + 0x7FFFFFFF;
        else
          v35 = v126;
        if (v113 >= v114)
          goto LABEL_319;
        v129 = *(_DWORD *)a3;
        if ((*((_BYTE *)this + 21) & 0x10) == 0)
        {
          v130 = v129 + v123;
          if (__OFADD__(v129, v123))
            v130 = (v129 >> 31) + 0x7FFFFFFF;
          v125 = __OFSUB__(v130, v231);
          v131 = v130 - v231;
          v132 = (v130 >> 31) + 0x7FFFFFFF;
          if (!v125)
            v132 = v131;
          v125 = __OFADD__(v132, v235);
          v133 = v132 + v235;
          v134 = (v132 >> 31) + 0x7FFFFFFF;
          if (v125)
            v135 = v134;
          else
            v135 = v133;
          goto LABEL_247;
        }
        v136 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
        if ((v136 == 4 || v136 == 2) && WebCore::RenderBlock::intrinsicBorderForFieldset(this))
        {
          v218 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
          v219 = 0.0;
          if ((*(_BYTE *)(v218 + 124) & 0xE) != 0)
          {
            v224 = *(_QWORD *)(v218 + 200);
            if (*(_BYTE *)(v224 + 5) && *(_BYTE *)(v224 + 76) == 4)
            {
              if (*(_BYTE *)(v224 + 78))
                v219 = *(float *)(v224 + 72);
              else
                v219 = (float)*(int *)(v224 + 72);
            }
            else
            {
              v219 = *(float *)(v218 + 120);
            }
          }
          v220 = v219 * 64.0;
          if (v220 >= 2147483650.0)
          {
            v221 = 0x7FFFFFFF;
          }
          else if (v220 <= -2147483650.0)
          {
            v221 = 0x80000000;
          }
          else
          {
            v221 = (int)v220;
          }
          v222 = WebCore::RenderBlock::intrinsicBorderForFieldset(this);
          v140 = v221 + v222;
          if (__OFADD__(v221, v222))
            v140 = (v221 >> 31) + 0x7FFFFFFF;
        }
        else
        {
          v137 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
          v138 = 0.0;
          if ((*(_BYTE *)(v137 + 124) & 0xE) != 0)
          {
            v200 = *(_QWORD *)(v137 + 200);
            if (*(_BYTE *)(v200 + 5) && *(_BYTE *)(v200 + 76) == 4)
            {
              if (*(_BYTE *)(v200 + 78))
                v138 = *(float *)(v200 + 72);
              else
                v138 = (float)*(int *)(v200 + 72);
            }
            else
            {
              v138 = *(float *)(v137 + 120);
            }
          }
          v139 = v138 * 64.0;
          if (v139 >= 2147483650.0)
          {
            v140 = 0x7FFFFFFF;
          }
          else if (v139 <= -2147483650.0)
          {
            v140 = 0x80000000;
          }
          else
          {
            v140 = (int)v139;
          }
        }
        v141 = v129 + v140;
        if (__OFADD__(v129, v140))
          v141 = (v129 >> 31) + 0x7FFFFFFF;
        v142 = *(unsigned __int8 **)(*((_QWORD *)this + 11) + 24);
        v143 = v142[100];
        if ((v143 & 0xFFFFFFF7) == 3)
        {
          v213 = (*(uint64_t (**)(WebCore::RenderMultiColumnSet *))(*(_QWORD *)this + 1144))(this);
          v143 = v142[100];
          v144 = (float)v213 * 0.015625;
        }
        else
        {
          v144 = 0.0;
        }
        switch(v143)
        {
          case 4:
            v145 = *((float *)v142 + 24);
            if (!v142[102])
              v145 = (float)SLODWORD(v145);
            break;
          case 3:
            v203 = *((float *)v142 + 24);
            if (!v142[102])
              v203 = (float)SLODWORD(v203);
            v145 = (float)(v144 * v203) / 100.0;
            break;
          case 11:
            WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v142 + 96), v144);
            break;
          default:
            v147 = 0;
            goto LABEL_245;
        }
        v146 = v145 * 64.0;
        if (v146 >= 2147483650.0)
        {
          v147 = 0x7FFFFFFF;
        }
        else if (v146 <= -2147483650.0)
        {
          v147 = 0x80000000;
        }
        else
        {
          v147 = (int)v146;
        }
LABEL_245:
        v135 = v141 + v147;
        if (__OFADD__(v141, v147))
          v135 = (v141 >> 31) + 0x7FFFFFFF;
LABEL_247:
        if ((*((_BYTE *)this + 21) & 0x10) != 0)
        {
          v149 = *((_DWORD *)this + 40);
          v150 = (*(uint64_t (**)(WebCore::RenderMultiColumnSet *))(*(_QWORD *)this + 1016))(this);
          v151 = v149 - v150;
          if (__OFSUB__(v149, v150))
            v151 = (v149 >> 31) + 0x7FFFFFFF;
          v152 = (*(uint64_t (**)(WebCore::RenderMultiColumnSet *))(*(_QWORD *)this + 1024))(this);
          v153 = v151 - v152;
          if (__OFSUB__(v151, v152))
            v153 = (v151 >> 31) + 0x7FFFFFFF;
          v154 = (*(uint64_t (**)(WebCore::RenderMultiColumnSet *))(*(_QWORD *)this + 1352))(this);
          v155 = v154 << 6;
          if (v154 < -33554432)
            v155 = 0x80000000;
          if (v154 > 0x1FFFFFF)
            v155 = 0x7FFFFFFF;
          v125 = __OFSUB__(v153, v155);
          v156 = v153 - v155;
          if (v125)
            v156 = (v153 >> 31) + 0x7FFFFFFF;
          v157 = v156 & ~(v156 >> 31);
          v158 = (*(uint64_t (**)(WebCore::RenderMultiColumnSet *))(*(_QWORD *)this + 944))(this);
          v159 = v157 - v158;
          if (__OFSUB__(v157, v158))
            v159 = 0x7FFFFFFF;
          v160 = (*(uint64_t (**)(WebCore::RenderMultiColumnSet *))(*(_QWORD *)this + 952))(this);
          v161 = v159 - v160;
          if (__OFSUB__(v159, v160))
            v161 = (v159 >> 31) + 0x7FFFFFFF;
          if ((*(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 584) & 0x100) != 0)
          {
            v206 = (*(uint64_t (**)(WebCore::RenderMultiColumnSet *))(*(_QWORD *)this + 1352))(this);
            if (v206 >= -33554432)
            {
              v162 = v206 << 6;
              if (v206 > 0x1FFFFFF)
                v162 = 0x7FFFFFFF;
            }
            else
            {
              v162 = 0x80000000;
            }
          }
          else
          {
            v162 = 0;
          }
          v125 = __OFSUB__(v161, v162);
          v163 = v161 - v162;
          if (v125)
            v163 = (v161 >> 31) + 0x7FFFFFFF;
          v164 = v163 & ~(v163 >> 31);
          v148 = v135 + v164;
          if (__OFADD__(v135, v164))
            v148 = (v135 >> 31) + 0x7FFFFFFF;
        }
        else if (__OFADD__(v135, v240))
        {
          v148 = (v135 >> 31) + 0x7FFFFFFF;
        }
        else
        {
          v148 = v135 + v240;
        }
        v165 = *((_DWORD *)a3 + 1);
        if ((*((_BYTE *)this + 21) & 0x10) != 0)
        {
          v180 = v165 + v123;
          if (__OFADD__(v165, v123))
            v180 = (v165 >> 31) + 0x7FFFFFFF;
          v125 = __OFSUB__(v180, v231);
          v181 = v180 - v231;
          v182 = (v180 >> 31) + 0x7FFFFFFF;
          if (!v125)
            v182 = v181;
          v125 = __OFADD__(v182, v235);
          v183 = v182 + v235;
          v184 = (v182 >> 31) + 0x7FFFFFFF;
          if (v125)
            v179 = v184;
          else
            v179 = v183;
          goto LABEL_300;
        }
        if (((unsigned __int16)*((_DWORD *)this + 31) >> 13) - 1 >= 5
          && (*(_WORD *)((_BYTE *)this + 69) & 0x400) != 0
          && (v207 = WTF::HashMap<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBlockRareData>>,WTF::HashTableTraits>::get<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>((uint64_t *)WebCore::gRareDataMap, (uint64_t)this)) != 0&& *(_DWORD *)(v207 + 8))
        {
          v208 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
          v209 = 0.0;
          if ((*(_BYTE *)(v208 + 172) & 0xE) != 0)
          {
            v223 = *(_QWORD *)(v208 + 200);
            if (*(_BYTE *)(v223 + 5) && *(_BYTE *)(v223 + 52) == 4)
            {
              if (*(_BYTE *)(v223 + 54))
                v209 = *(float *)(v223 + 48);
              else
                v209 = (float)*(int *)(v223 + 48);
            }
            else
            {
              v209 = *(float *)(v208 + 168);
            }
          }
          v210 = v209 * 64.0;
          if (v210 >= 2147483650.0)
          {
            v211 = 0x7FFFFFFF;
          }
          else if (v210 <= -2147483650.0)
          {
            v211 = 0x80000000;
          }
          else
          {
            v211 = (int)v210;
          }
          v212 = WebCore::RenderBlock::intrinsicBorderForFieldset(this);
          v169 = v211 + v212;
          if (__OFADD__(v211, v212))
            v169 = (v211 >> 31) + 0x7FFFFFFF;
        }
        else
        {
          v166 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
          v167 = 0.0;
          if ((*(_BYTE *)(v166 + 172) & 0xE) != 0)
          {
            v201 = *(_QWORD *)(v166 + 200);
            if (*(_BYTE *)(v201 + 5) && *(_BYTE *)(v201 + 52) == 4)
            {
              if (*(_BYTE *)(v201 + 54))
                v167 = *(float *)(v201 + 48);
              else
                v167 = (float)*(int *)(v201 + 48);
            }
            else
            {
              v167 = *(float *)(v166 + 168);
            }
          }
          v168 = v167 * 64.0;
          if (v168 >= 2147483650.0)
          {
            v169 = 0x7FFFFFFF;
          }
          else if (v168 <= -2147483650.0)
          {
            v169 = 0x80000000;
          }
          else
          {
            v169 = (int)v168;
          }
        }
        v125 = __OFADD__(v165, v169);
        v170 = v165 + v169;
        if (v125)
          v171 = (v165 >> 31) + 0x7FFFFFFF;
        else
          v171 = v170;
        v172 = *(unsigned __int8 **)(*((_QWORD *)this + 11) + 24);
        v173 = v172[76];
        if ((v173 & 0xFFFFFFF7) == 3)
        {
          v214 = (*(uint64_t (**)(WebCore::RenderMultiColumnSet *))(*(_QWORD *)this + 1144))(this);
          v173 = v172[76];
          v174 = (float)v214 * 0.015625;
        }
        else
        {
          v174 = 0.0;
        }
        switch(v173)
        {
          case 4:
            v175 = *((float *)v172 + 18);
            if (!v172[78])
              v175 = (float)SLODWORD(v175);
            goto LABEL_286;
          case 3:
            v202 = *((float *)v172 + 18);
            if (!v172[78])
              v202 = (float)SLODWORD(v202);
            v175 = (float)(v174 * v202) / 100.0;
            goto LABEL_286;
          case 11:
            WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v172 + 72), v174);
LABEL_286:
            v176 = v175 * 64.0;
            if (v176 >= 2147483650.0)
            {
              v177 = 0x7FFFFFFF;
            }
            else if (v176 <= -2147483650.0)
            {
              v177 = 0x80000000;
            }
            else
            {
              v177 = (int)v176;
            }
            goto LABEL_289;
        }
        v177 = 0;
LABEL_289:
        v125 = __OFADD__(v171, v177);
        v178 = v171 + v177;
        if (v125)
          v179 = (v171 >> 31) + 0x7FFFFFFF;
        else
          v179 = v178;
LABEL_300:
        v34 = v234;
        if ((*((_BYTE *)this + 21) & 0x10) != 0)
        {
          v186 = __OFADD__(v179, v240);
          v187 = v179 + v240;
        }
        else
        {
          v185 = WebCore::RenderBox::contentHeight(this);
          v186 = __OFADD__(v179, v185);
          v187 = v179 + v185;
        }
        if (v186)
          v187 = (v179 >> 31) + 0x7FFFFFFF;
        v188 = v148 - v135;
        if (__OFSUB__(v148, v135))
          v188 = (v148 >> 31) + 0x7FFFFFFF;
        v125 = __OFSUB__(v187, v179);
        v189 = v187 - v179;
        v190 = (v187 >> 31) + 0x7FFFFFFF;
        if (!v125)
          v190 = v189;
        v191 = v135 - (v189 & 0xFFFFFFC0);
        v192 = v179 - (v59 & 0xFFFFFFC0);
        v125 = __OFADD__(v191, v188);
        v193 = v191 + v188;
        if (v125)
          v193 = (v191 >> 31) + 0x7FFFFFFF;
        v125 = __OFADD__(v192, v190);
        v194 = v192 + v190;
        v195 = (v192 >> 31) + 0x7FFFFFFF;
        if (v125)
          v194 = (v192 >> 31) + 0x7FFFFFFF;
        v196 = v192 + 32;
        v197 = v191 + 32;
        v198 = *((_QWORD *)a2 + 10);
        v199 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8);
        *(float *)&v247 = (float)((int)v135 / 64 + (v197 >> 6));
        *((float *)&v247 + 1) = (float)(v179 / 64 + (v196 >> 6));
        *(float *)&v248 = (float)(v193 / 64 - (v197 >> 6) + ((int)(v193 - (v195 & 0xFFFFFFC0) + 32) >> 6));
        *((float *)&v248 + 1) = (float)(v194 / 64 - (v196 >> 6) + ((int)(v194 - (v197 & 0xFFFFFFC0) + 32) >> 6));
        v245 = v246;
        if ((v246 & 0x8000000000000) != 0)
        {
          v204 = (unsigned int *)(v246 & 0xFFFFFFFFFFFFLL);
          do
            v205 = __ldaxr(v204);
          while (__stlxr(v205 + 1, v204));
        }
        WebCore::BorderPainter::drawLineForBoxSide(v198, v199, (float *)&v247, v233, (WebCore::Color *)&v245, v13, v239, 0.0, 0.0);
        v117 = v232;
        v114 = v241 - 1;
        if ((v245 & 0x8000000000000) != 0)
        {
          v215 = (unsigned int *)(v245 & 0xFFFFFFFFFFFFLL);
          do
          {
            v216 = __ldaxr(v215);
            v217 = v216 - 1;
          }
          while (__stlxr(v217, v215));
          v34 = v234;
          v117 = v232;
          v114 = v241 - 1;
          if (!v217)
          {
            atomic_store(1u, v215);
            WTF::fastFree((WTF *)v215, v8);
          }
        }
LABEL_319:
        ++v113;
        v61 = v35;
        if (v113 == v241)
          goto LABEL_55;
      }
    }
    v61 = WebCore::RenderBox::contentLogicalWidth(this);
    v62 = 1;
    v60 = 2;
    goto LABEL_187;
  }
  v36 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
  v229 = 2;
  switch((unsigned __int16)*((_DWORD *)this + 31) >> 13)
  {
    case 1:
    case 2:
      goto LABEL_63;
    case 3:
    case 5:
      v36 = 3;
      goto LABEL_63;
    case 4:
      goto LABEL_64;
    default:
      v36 = 0;
LABEL_63:
      v229 = v36;
LABEL_64:
      v37 = ((v229 & 0xFFFFFFFD) == 1) ^ (*(_BYTE *)(v5 + 368) != 0);
      v38 = *((_DWORD *)this + 5);
      if ((v38 & 0x1000) != 0)
      {
        if (v20 >= 0)
          v63 = v20;
        else
          v63 = v20 + 1;
        v64 = v63 >> 1;
        v125 = __OFSUB__(v64, v20);
        v65 = v64 - v20;
        if (v125)
        {
          if (v20 < -1)
            v65 = 0x80000000;
          else
            v65 = 0x7FFFFFFF;
        }
        v54 = v65 - 32 * v14;
        if (__OFSUB__(v65, 32 * v14))
          v54 = (v65 >> 31) + 0x7FFFFFFF;
        v55 = v14 << 6;
      }
      else
      {
        v39 = *((_DWORD *)this + 40);
        v40 = (*(uint64_t (**)(WebCore::RenderMultiColumnSet *))(*(_QWORD *)this + 1016))(this);
        v41 = v39 - v40;
        if (__OFSUB__(v39, v40))
          v41 = (v39 >> 31) + 0x7FFFFFFF;
        v42 = (*(uint64_t (**)(WebCore::RenderMultiColumnSet *))(*(_QWORD *)this + 1024))(this);
        v43 = v41 - v42;
        if (__OFSUB__(v41, v42))
          v43 = (v41 >> 31) + 0x7FFFFFFF;
        v44 = (*(uint64_t (**)(WebCore::RenderMultiColumnSet *))(*(_QWORD *)this + 1352))(this);
        v45 = v44 << 6;
        if (v44 < -33554432)
          v45 = 0x80000000;
        if (v44 > 0x1FFFFFF)
          v45 = 0x7FFFFFFF;
        v125 = __OFSUB__(v43, v45);
        v46 = v43 - v45;
        if (v125)
          v46 = (v43 >> 31) + 0x7FFFFFFF;
        v47 = v46 & ~(v46 >> 31);
        v48 = (*(uint64_t (**)(WebCore::RenderMultiColumnSet *))(*(_QWORD *)this + 944))(this);
        v49 = v47 - v48;
        if (__OFSUB__(v47, v48))
          v49 = 0x7FFFFFFF;
        v50 = (*(uint64_t (**)(WebCore::RenderMultiColumnSet *))(*(_QWORD *)this + 952))(this);
        v51 = v49 - v50;
        if (__OFSUB__(v49, v50))
          v51 = (v49 >> 31) + 0x7FFFFFFF;
        if ((*(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 584) & 0x100) != 0)
        {
          v228 = (*(uint64_t (**)(WebCore::RenderMultiColumnSet *))(*(_QWORD *)this + 1352))(this);
          if (v228 >= -33554432)
          {
            v52 = v228 << 6;
            if (v228 > 0x1FFFFFF)
              v52 = 0x7FFFFFFF;
          }
          else
          {
            v52 = 0x80000000;
          }
        }
        else
        {
          v52 = 0;
        }
        v125 = __OFSUB__(v51, v52);
        v53 = v51 - v52;
        if (v125)
          v53 = (v51 >> 31) + 0x7FFFFFFF;
        v54 = 0;
        v55 = v53 & ~(v53 >> 31);
        v38 = *((_DWORD *)this + 5);
      }
      if ((v38 & 0x1000) != 0)
      {
        v240 = WebCore::RenderBox::contentHeight(this);
        v69 = 0;
      }
      else
      {
        if (v20 >= 0)
          v66 = v20;
        else
          v66 = v20 + 1;
        v67 = v66 >> 1;
        v125 = __OFSUB__(v67, v20);
        v68 = v67 - v20;
        if (v125)
        {
          if (v20 < -1)
            v68 = 0x80000000;
          else
            v68 = 0x7FFFFFFF;
        }
        v69 = v68 - 32 * v14;
        if (__OFSUB__(v68, 32 * v14))
          v69 = (v68 >> 31) + 0x7FFFFFFF;
      }
      if (v37)
      {
        if ((*((_BYTE *)this + 21) & 0x10) != 0)
        {
          v74 = v69 << 32;
          v75 = *((_DWORD *)this + 40);
          v76 = v54 + v55;
          if (__OFADD__(v54, v55))
            v76 = (v54 >> 31) + 0x7FFFFFFF;
          v125 = __OFSUB__(v75, v76);
          v77 = v75 - v76;
          if (v125)
            v77 = (v75 >> 31) + 0x7FFFFFFF;
          v73 = v74 | v77;
        }
        else
        {
          v70 = *((_DWORD *)this + 41);
          v71 = v69 + v240;
          if (__OFADD__((_DWORD)v69, v240))
            v71 = (v69 >> 31) + 0x7FFFFFFF;
          v72 = v70 - v71;
          if (__OFSUB__(v70, v71))
            v72 = (v70 >> 31) + 0x7FFFFFFF;
          v73 = v54 | (unint64_t)(v72 << 32);
        }
      }
      else
      {
        v73 = v54 | ((unint64_t)v69 << 32);
      }
      v78 = *((_DWORD *)a3 + 1);
      LODWORD(v79) = v73 + *(_DWORD *)a3;
      if (__OFADD__((_DWORD)v73, *(_DWORD *)a3))
        v79 = (v73 >> 31) + 0x7FFFFFFF;
      else
        v79 = v79;
      v81 = HIDWORD(v73);
      v125 = __OFADD__((_DWORD)v81, v78);
      v80 = v81 + v78;
      LODWORD(v81) = (v81 >> 31) + 0x7FFFFFFF;
      if (v125)
        v81 = v81;
      else
        v81 = v80;
      v82 = v79 | (v81 << 32);
      v83 = *((_DWORD *)this + 5);
      if (v37)
        v84 = 2;
      else
        v84 = 0;
      if (v37)
        v85 = 1;
      else
        v85 = 3;
      if ((v83 & 0x1000) != 0)
        v86 = v85;
      else
        v86 = v84;
      v87 = *((_DWORD *)this + 73);
      v88 = v87 + v20;
      v89 = __OFADD__(v87, v20);
      if ((v37 & 1) != 0)
      {
        if (v89)
          v88 = (v87 >> 31) + 0x7FFFFFFF;
        if (v88 == 0x80000000)
          v88 = 0x7FFFFFFF;
        else
          v88 = -v88;
      }
      else if (v89)
      {
        v88 = (v87 >> 31) + 0x7FFFFFFF;
      }
      if ((v83 & 0x1000) != 0)
        v90 = 0;
      else
        v90 = v88;
      v91 = v88 & (v83 << 19 >> 31);
      v92 = 1;
      do
      {
        v93 = (v82 >> 31) + 0x7FFFFFFF;
        if (__OFADD__((_DWORD)v82, v91))
          v94 = v93;
        else
          v94 = (v82 + v91);
        v95 = HIDWORD(v82);
        v125 = __OFADD__((_DWORD)v95, v90);
        v96 = v95 + v90;
        v97 = (v95 >> 31) + 0x7FFFFFFF;
        if (v125)
          v98 = v97;
        else
          v98 = v96;
        v99 = v94 - (v97 & 0xFFFFFFC0);
        v100 = v98 - (v93 & 0xFFFFFFC0);
        v101 = v99 + v55;
        if (__OFADD__(v99, v55))
          v101 = (v99 >> 31) + 0x7FFFFFFF;
        v102 = v100 + v240;
        v103 = (v100 >> 31) + 0x7FFFFFFF;
        if (__OFADD__(v100, v240))
          v102 = (v100 >> 31) + 0x7FFFFFFF;
        v104 = v100 + 32;
        v105 = v99 + 32;
        v106 = *((_QWORD *)a2 + 10);
        v107 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8);
        *(float *)&v247 = (float)((int)v94 / 64 + (v105 >> 6));
        *((float *)&v247 + 1) = (float)((int)v98 / 64 + (v104 >> 6));
        *(float *)&v248 = (float)(v101 / 64 - (v105 >> 6) + ((int)(v101 - (v103 & 0xFFFFFFC0) + 32) >> 6));
        *((float *)&v248 + 1) = (float)(v102 / 64 - (v104 >> 6) + ((int)(v102 - (v101 & 0xFFFFFFC0) + 32) >> 6));
        v244 = v246;
        if ((v246 & 0x8000000000000) != 0)
        {
          v108 = (unsigned int *)(v246 & 0xFFFFFFFFFFFFLL);
          do
            v109 = __ldaxr(v108);
          while (__stlxr(v109 + 1, v108));
        }
        WebCore::BorderPainter::drawLineForBoxSide(v106, v107, (float *)&v247, v86, (WebCore::Color *)&v244, v13, v239, 0.0, 0.0);
        if ((v244 & 0x8000000000000) != 0)
        {
          v110 = (unsigned int *)(v244 & 0xFFFFFFFFFFFFLL);
          do
          {
            v111 = __ldaxr(v110);
            v112 = v111 - 1;
          }
          while (__stlxr(v112, v110));
          if (!v112)
          {
            atomic_store(1u, v110);
            WTF::fastFree((WTF *)v110, v8);
          }
        }
        v82 = v94 | (v98 << 32);
        ++v92;
      }
      while (v92 != v241);
      break;
  }
LABEL_55:
  if ((v246 & 0x8000000000000) != 0)
  {
    v225 = (unsigned int *)(v246 & 0xFFFFFFFFFFFFLL);
    do
    {
      v226 = __ldaxr(v225);
      v227 = v226 - 1;
    }
    while (__stlxr(v227, v225));
    if (!v227)
    {
      atomic_store(1u, v225);
      WTF::fastFree((WTF *)v225, v8);
    }
  }
}

uint64_t WebCore::RenderMultiColumnSet::repaintFragmentedFlowContent(WebCore::RenderMultiColumnSet *this, const WebCore::LayoutRect *a2)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  int v9;
  uint64_t result;
  int v12;
  int v13;
  signed int v14;
  signed int v15;
  int v16;
  _BOOL4 v17;
  int v18;
  signed int v19;
  int v20;
  _BOOL4 v21;
  int v22;
  int v23;
  int v24;
  BOOL v25;
  int v26;
  int v27;
  int v28;
  signed int v29;
  unsigned int v30;
  uint64_t v31;
  float *v32;
  float v33;
  int v34;
  float v35;
  double v36;
  unint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unint64_t v40;
  unsigned int v41;
  unsigned int v42;
  unint64_t v43;
  unint64_t v44;
  int v45;
  unsigned int v46;
  int v47;
  int v48;
  int v49;
  unsigned int v50;
  uint64_t v51;
  int v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  int v74;
  unsigned int v75;
  int v76;
  unsigned int v77;
  int v78;
  unsigned int v79;
  int v80;
  int v81;
  unsigned int v82;
  unint64_t v84;
  _QWORD v85[2];
  _QWORD v86[2];

  v4 = *(_DWORD *)a2;
  v3 = *((_DWORD *)a2 + 1);
  v5 = *((_QWORD *)a2 + 1);
  v6 = *((_QWORD *)this + 31);
  if (v6)
    v6 = *(_QWORD *)(v6 + 8);
  v7 = (unsigned __int16)*(_DWORD *)(v6 + 124) >> 13;
  v8 = v7 > 5;
  v9 = (1 << v7) & 0x2A;
  if (!v8 && v9 != 0)
  {
    if ((*(_BYTE *)(v6 + 21) & 0x10) != 0)
    {
      v77 = *(_DWORD *)(v6 + 160);
      v78 = v4 + v5;
      if (__OFADD__(v4, (_DWORD)v5))
        v78 = (v4 >> 31) + 0x7FFFFFFF;
      v25 = __OFSUB__(v77, v78);
      v79 = v77 - v78;
      v80 = (v77 >> 31) + 0x7FFFFFFF;
      if (v25)
        v4 = v80;
      else
        v4 = v79;
    }
    else
    {
      v73 = *(_DWORD *)(v6 + 164);
      v74 = v3 + HIDWORD(v5);
      if (__OFADD__(v3, HIDWORD(v5)))
        v74 = (v3 >> 31) + 0x7FFFFFFF;
      v25 = __OFSUB__(v73, v74);
      v75 = v73 - v74;
      v76 = (v73 >> 31) + 0x7FFFFFFF;
      if (v25)
        v3 = v76;
      else
        v3 = v75;
    }
  }
  result = WebCore::RenderFragmentContainer::fragmentedFlowPortionOverflowRect(this, a2);
  if ((int)v4 <= (int)result)
    v14 = result;
  else
    v14 = v4;
  if ((int)v3 <= SHIDWORD(result))
    v15 = HIDWORD(result);
  else
    v15 = v3;
  v16 = v4 + v5;
  v17 = __OFADD__(v4, (_DWORD)v5);
  v18 = (v4 >> 31) + 0x7FFFFFFF;
  if (!__OFADD__(v4, (_DWORD)v5))
    v18 = v4 + v5;
  v19 = result + v12;
  if (__OFADD__((_DWORD)result, v12))
    v19 = (result >> 31) + 0x7FFFFFFF;
  if (v19 >= v18)
    v20 = v18;
  else
    v20 = v19;
  v21 = __OFADD__(v3, HIDWORD(v5));
  v22 = (v3 >> 31) + 0x7FFFFFFF;
  if (!__OFADD__(v3, HIDWORD(v5)))
    v22 = v3 + HIDWORD(v5);
  v23 = HIDWORD(result) + v13;
  if (__OFADD__(HIDWORD(result), v13))
    v23 = (HIDWORD(result) >> 31) + 0x7FFFFFFF;
  if (v23 >= v22)
    v24 = v22;
  else
    v24 = v23;
  if (v14 >= v20 || v15 >= v24)
  {
    v20 = 0;
    v24 = 0;
    v14 = 0;
    v15 = 0;
  }
  v25 = __OFSUB__(v20, v14);
  v26 = v20 - v14;
  v27 = (v20 >> 31) + 0x7FFFFFFF;
  if (!v25)
    v27 = v26;
  v28 = v24 - v15;
  if (__OFSUB__(v24, v15))
    v28 = (v24 >> 31) + 0x7FFFFFFF;
  if (v27 >= 1 && v28 >= 1)
  {
    if ((*((_BYTE *)this + 21) & 0x10) != 0)
    {
      if (v17)
        v16 = (v4 >> 31) + 0x7FFFFFFF;
      v3 = v4;
    }
    else if (v21)
    {
      v16 = (v3 >> 31) + 0x7FFFFFFF;
    }
    else
    {
      v16 = v3 + HIDWORD(v5);
    }
    v29 = v16 - 64;
    if (__OFSUB__(v16, 64))
      v29 = 0x80000000;
    v30 = WebCore::RenderMultiColumnSet::columnIndexAtOffset((uint64_t)this, v3);
    v82 = WebCore::RenderMultiColumnSet::columnIndexAtOffset((uint64_t)this, v29);
    v31 = *((_QWORD *)this + 4);
    if (v31)
      result = *(_QWORD *)(v31 + 8);
    else
      result = 0;
    if ((*(_BYTE *)(result + 52) & 7) != 1)
    {
      __break(0xC471u);
      JUMPOUT(0x196422860);
    }
    v32 = *(float **)(*(_QWORD *)(result + 88) + 40);
    if (*((_BYTE *)v32 + 376))
    {
      v33 = *(float *)(*(_QWORD *)(result + 112) + 204);
    }
    else
    {
      result = WebCore::RenderBox::contentLogicalWidth((WebCore::RenderBox *)result);
      if (*((_BYTE *)v32 + 384) != 4)
      {
        v34 = 0;
        switch(*((_BYTE *)v32 + 384))
        {
          case 0:
          case 1:
          case 9:
            v34 = result;
            break;
          case 3:
            v35 = v32[95];
            if (!*((_BYTE *)v32 + 386))
              v35 = (float)SLODWORD(v35);
            v33 = (float)((float)((float)(int)result * 0.015625) * v35) / 100.0;
            goto LABEL_65;
          case 0xB:
            result = WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v32 + 95), (float)(int)result * 0.015625);
            goto LABEL_65;
          default:
            goto LABEL_68;
        }
        goto LABEL_68;
      }
      v33 = v32[95];
      if (!*((_BYTE *)v32 + 386))
        v33 = (float)SLODWORD(v33);
    }
LABEL_65:
    v36 = v33 * 64.0;
    if (v36 >= 2147483650.0)
    {
      v34 = 0x7FFFFFFF;
    }
    else if (v36 <= -2147483650.0)
    {
      v34 = 0x80000000;
    }
    else
    {
      v34 = (int)v36;
    }
LABEL_68:
    v37 = *((unsigned int *)this + 73);
    if ((int)v37 < 1
      || ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 31) + 8) + 21) & 0x10) != 0
        ? (v38 = *((_QWORD *)this + 33))
        : (v38 = HIDWORD(*((_QWORD *)this + 33))),
          (int)v38 < 1))
    {
      v45 = 1;
    }
    else
    {
      v39 = 0x7FFFFFFF;
      if ((uint64_t)(((unint64_t)v38 << 6) / v37) >= 0x7FFFFFFF)
        LODWORD(v40) = 0x7FFFFFFF;
      else
        v40 = ((unint64_t)v38 << 6) / v37;
      v41 = v40 >> 6;
      v42 = v40 & 0x7FFFFFC0;
      if (v41 != 0x1FFFFFF)
        v39 = v42;
      v43 = v39 * (unint64_t)v37;
      v44 = v43 >> 6;
      if (v43 >> 38 != (int)(v43 >> 6) >> 31)
        LODWORD(v44) = 0x7FFFFFFF;
      if ((int)v44 >= (int)v38)
        v45 = v41;
      else
        v45 = v41 + 1;
    }
    v81 = v45;
    if (v30 <= v82)
    {
      v46 = v30 << 6;
      v47 = v34;
      do
      {
        v48 = *((_DWORD *)this + 72);
        v49 = *((_DWORD *)this + 73);
        if ((*((_BYTE *)this + 21) & 0x10) != 0)
        {
          v50 = WebCore::RenderMultiColumnSet::columnLogicalTop(this, v30);
          v51 = WebCore::RenderMultiColumnSet::columnLogicalLeft(this, v30);
          v52 = v48;
          v48 = v49;
        }
        else
        {
          v50 = WebCore::RenderMultiColumnSet::columnLogicalLeft(this, v30);
          v51 = WebCore::RenderMultiColumnSet::columnLogicalTop(this, v30);
          v52 = v49;
        }
        v53 = *((_DWORD *)this + 64);
        v54 = *((unsigned int *)this + 65);
        v55 = *((int *)this + 73);
        if (v30 <= 0x1FFFFFE)
          v56 = v46;
        else
          v56 = 0x7FFFFFFFLL;
        v57 = v55 * v56 / 64;
        v58 = (int)v57 >> 31;
        if ((*((_BYTE *)this + 21) & 0x10) != 0)
        {
          v61 = (v55 >> 31) + 0x7FFFFFFF;
          v59 = *((_DWORD *)this + 73);
          v55 = *((unsigned int *)this + 67);
          if (v58 != HIDWORD(v57))
            LODWORD(v57) = v61;
          v25 = __OFADD__(v53, (_DWORD)v57);
          v62 = v53 + v57;
          v53 = (v53 >> 31) + 0x7FFFFFFF;
          if (!v25)
            v53 = v62;
        }
        else
        {
          v59 = *((_DWORD *)this + 66);
          if (v58 != HIDWORD(v57))
            LODWORD(v57) = (v55 >> 31) + 0x7FFFFFFF;
          v25 = __OFADD__((_DWORD)v54, (_DWORD)v57);
          v60 = v54 + v57;
          LODWORD(v54) = (v54 >> 31) + 0x7FFFFFFF;
          if (v25)
            v54 = v54;
          else
            v54 = v60;
        }
        v63 = v50;
        v86[0] = v53 | (unint64_t)(v54 << 32);
        v86[1] = v59 | (unint64_t)(v55 << 32);
        v64 = v50 | ((unint64_t)v51 << 32);
        v85[0] = WebCore::RenderMultiColumnSet::fragmentedFlowPortionOverflowRect((uint64_t)this, v86, v30, v81, v47);
        v85[1] = v65;
        v66 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
        if (v66 <= 5 && ((1 << v66) & 0x2A) != 0)
        {
          if ((*((_BYTE *)this + 21) & 0x10) != 0)
          {
            v70 = v63 + v48;
            if (__OFADD__((_DWORD)v63, v48))
              v70 = (v63 >> 31) + 0x7FFFFFFF;
            v71 = *((_DWORD *)this + 40);
            v25 = __OFSUB__(v71, v70);
            v72 = v71 - v70;
            if (v25)
              v72 = (v71 >> 31) + 0x7FFFFFFF;
            v64 = (v51 << 32) | v72;
          }
          else
          {
            v67 = v51 + v52;
            if (__OFADD__((_DWORD)v51, v52))
              v67 = (v51 >> 31) + 0x7FFFFFFF;
            v68 = *((_DWORD *)this + 41);
            v25 = __OFSUB__(v68, v67);
            v69 = v68 - v67;
            if (v25)
              v69 = (v68 >> 31) + 0x7FFFFFFF;
            v64 = v63 | (v69 << 32);
          }
        }
        v84 = v64;
        result = WebCore::RenderFragmentContainer::repaintFragmentedFlowContentRectangle((uint64_t)this, a2, (const WebCore::LayoutRect *)v86, (const WebCore::LayoutPoint *)&v84, (const WebCore::LayoutRect *)v85);
        ++v30;
        v46 += 64;
      }
      while (v30 <= v82);
    }
  }
  return result;
}

__int128 *WebCore::RenderMultiColumnSet::fragmentRectsForFlowContentRect@<X0>(WebCore::RenderMultiColumnSet *this@<X0>, const WebCore::LayoutRect *a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  int v14;
  int v15;
  unint64_t v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  unint64_t v20;
  int v21;
  unint64_t v22;
  int v23;
  float v24;
  BOOL v25;
  unsigned int v26;
  unint64_t v27;
  unsigned int v28;
  unint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int v34;
  unint64_t v35;
  unsigned int v36;
  unint64_t v37;
  unsigned int v38;
  unsigned int v39;
  unint64_t v40;
  unint64_t v41;
  unsigned int v42;
  uint64_t v43;
  __int128 *result;
  float *v45;
  float v46;
  int v47;
  float v48;
  double v49;
  unint64_t v50;
  uint64_t v51;
  unsigned int v52;
  unint64_t v53;
  unsigned int v54;
  unsigned int v55;
  unint64_t v56;
  unint64_t v57;
  int v58;
  unsigned int v59;
  int v60;
  int v61;
  int v62;
  unsigned int v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  unsigned int v67;
  int v68;
  uint64_t v70;
  int v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  int v77;
  unsigned int v78;
  uint64_t v79;
  unsigned int v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  int v88;
  unsigned int v89;
  int v90;
  unsigned int v91;
  unsigned int v92;
  uint64_t v93;
  unsigned int v94;
  unsigned int v95;
  int v96;
  int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  int v101;
  int v102;
  int v103;
  unsigned int v104;
  int v105;
  int v106;
  unsigned int v107;
  int v108;
  unsigned int v109;
  uint64_t v111;
  __int128 v112;
  _QWORD v113[2];
  _QWORD v114[2];

  v6 = *(_DWORD *)a2;
  v5 = *((_DWORD *)a2 + 1);
  v7 = *((_QWORD *)this + 31);
  if (v7)
    v8 = *(_QWORD *)(v7 + 8);
  else
    v8 = 0;
  v9 = *((_DWORD *)a2 + 2);
  v10 = *((_DWORD *)a2 + 3);
  v11 = (unsigned __int16)*(_DWORD *)(v8 + 124) >> 13;
  v25 = v11 > 5;
  v12 = (1 << v11) & 0x2A;
  if (!v25 && v12 != 0)
  {
    if ((*(_BYTE *)(v8 + 21) & 0x10) != 0)
    {
      v104 = *(_DWORD *)(v8 + 160);
      v18 = __OFADD__(v6, v9);
      v105 = v6 + v9;
      v106 = (v6 >> 31) + 0x7FFFFFFF;
      if (v18)
        v105 = v106;
      v18 = __OFSUB__(v104, v105);
      v107 = v104 - v105;
      v108 = (v104 >> 31) + 0x7FFFFFFF;
      if (v18)
        v6 = v108;
      else
        v6 = v107;
    }
    else
    {
      v100 = *(_DWORD *)(v8 + 164);
      v18 = __OFADD__(v5, v10);
      v101 = v5 + v10;
      v102 = (v5 >> 31) + 0x7FFFFFFF;
      if (!v18)
        v102 = v101;
      v18 = __OFSUB__(v100, v102);
      v5 = v100 - v102;
      v103 = (v100 >> 31) + 0x7FFFFFFF;
      if (v18)
        v5 = v103;
    }
  }
  if ((*((_BYTE *)this + 21) & 0x10) != 0)
  {
    v18 = __OFADD__(v6, v9);
    v14 = v6 + v9;
    if (v18)
      v14 = (v6 >> 31) + 0x7FFFFFFF;
    v15 = *((_DWORD *)this + 64);
    v16 = *((_QWORD *)this + 33);
    v17 = v15 + v16;
    if (__OFADD__(v15, (_DWORD)v16))
      v17 = (v15 >> 31) + 0x7FFFFFFF;
    v5 = v6;
  }
  else
  {
    v14 = v5 + v10;
    if (__OFADD__(v5, v10))
      v14 = (v5 >> 31) + 0x7FFFFFFF;
    v15 = *((_DWORD *)this + 65);
    v16 = *((_QWORD *)this + 33);
    v17 = (v15 >> 31) + 0x7FFFFFFF;
    if (!__OFADD__(v15, HIDWORD(v16)))
      v17 = v15 + HIDWORD(v16);
  }
  if (v15 > v5)
    goto LABEL_24;
  v20 = *((unsigned int *)this + 73);
  if (v17 > v5)
  {
    if ((_DWORD)v20)
    {
      v21 = v5 - v15;
      if (__OFSUB__(v5, v15))
        v21 = (v5 >> 31) + 0x7FFFFFFF;
      v19 = (float)((float)((float)v21 * 0.015625) / (float)((float)(int)v20 * 0.015625));
      goto LABEL_25;
    }
LABEL_24:
    v19 = 0;
    goto LABEL_25;
  }
  if ((int)v20 < 1)
    goto LABEL_24;
  if ((*(_BYTE *)(*(_QWORD *)(v7 + 8) + 21) & 0x10) != 0)
    LODWORD(v27) = v16;
  else
    v27 = HIDWORD(v16);
  if ((int)v27 < 1)
    goto LABEL_24;
  v28 = 0x7FFFFFFF;
  if ((uint64_t)(((unint64_t)v27 << 6) / v20) >= 0x7FFFFFFF)
    LODWORD(v29) = 0x7FFFFFFF;
  else
    v29 = ((unint64_t)v27 << 6) / v20;
  v30 = v29 >> 6;
  v31 = v29 & 0x7FFFFFC0;
  if (v30 != 0x1FFFFFF)
    v28 = v31;
  v32 = v28 * (unint64_t)v20;
  v33 = v32 >> 6;
  if (v32 >> 38 != (int)(v32 >> 6) >> 31)
    LODWORD(v33) = 0x7FFFFFFF;
  if ((int)v33 >= (int)v27)
    v34 = v30;
  else
    v34 = v30 + 1;
  v19 = v34 - 1;
LABEL_25:
  if (v15 > v14)
  {
LABEL_26:
    v109 = 0;
    goto LABEL_78;
  }
  v22 = *((unsigned int *)this + 73);
  if (v17 <= v14)
  {
    if ((int)v22 < 1)
      goto LABEL_26;
    if ((*(_BYTE *)(*(_QWORD *)(v7 + 8) + 21) & 0x10) != 0)
      LODWORD(v35) = v16;
    else
      v35 = HIDWORD(v16);
    if ((int)v35 < 1)
      goto LABEL_26;
    v36 = 0x7FFFFFFF;
    if ((uint64_t)(((unint64_t)v35 << 6) / v22) >= 0x7FFFFFFF)
      LODWORD(v37) = 0x7FFFFFFF;
    else
      v37 = ((unint64_t)v35 << 6) / v22;
    v38 = v37 >> 6;
    v39 = v37 & 0x7FFFFFC0;
    if (v38 != 0x1FFFFFF)
      v36 = v39;
    v40 = v36 * (unint64_t)v22;
    v41 = v40 >> 6;
    if (v40 >> 38 != (int)(v40 >> 6) >> 31)
      LODWORD(v41) = 0x7FFFFFFF;
    if ((int)v41 >= (int)v35)
      v42 = v38;
    else
      v42 = v38 + 1;
    v26 = v42 - 1;
  }
  else
  {
    if (!(_DWORD)v22)
      goto LABEL_26;
    v23 = v14 - v15;
    if (__OFSUB__(v14, v15))
      v23 = (v14 >> 31) + 0x7FFFFFFF;
    v24 = (float)((float)v23 * 0.015625) / (float)((float)(int)v22 * 0.015625);
    if (v24 == (float)(int)v24)
    {
      v25 = v24 <= 0.0 || v14 <= v5;
      if (!v25)
        v24 = v24 + -1.0;
    }
    v26 = v24;
  }
  v109 = v26;
LABEL_78:
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v43 = *((_QWORD *)this + 4);
  if (v43)
    result = *(__int128 **)(v43 + 8);
  else
    result = 0;
  if ((*((_BYTE *)result + 52) & 7) != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x196423044);
  }
  v45 = *(float **)(*((_QWORD *)result + 11) + 40);
  if (*((_BYTE *)v45 + 376))
  {
    v46 = *(float *)(*((_QWORD *)result + 14) + 204);
LABEL_91:
    v49 = v46 * 64.0;
    if (v49 >= 2147483650.0)
    {
      v47 = 0x7FFFFFFF;
    }
    else if (v49 <= -2147483650.0)
    {
      v47 = 0x80000000;
    }
    else
    {
      v47 = (int)v49;
    }
    goto LABEL_94;
  }
  result = (__int128 *)WebCore::RenderBox::contentLogicalWidth((WebCore::RenderBox *)result);
  if (*((_BYTE *)v45 + 384) == 4)
  {
    v46 = v45[95];
    if (!*((_BYTE *)v45 + 386))
      v46 = (float)SLODWORD(v46);
    goto LABEL_91;
  }
  v47 = 0;
  switch(*((_BYTE *)v45 + 384))
  {
    case 0:
    case 1:
    case 9:
      v47 = (int)result;
      break;
    case 3:
      v48 = v45[95];
      if (!*((_BYTE *)v45 + 386))
        v48 = (float)SLODWORD(v48);
      v46 = (float)((float)((float)(int)result * 0.015625) * v48) / 100.0;
      goto LABEL_91;
    case 0xB:
      result = (__int128 *)WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v45 + 95), (float)(int)result * 0.015625);
      goto LABEL_91;
    default:
      break;
  }
LABEL_94:
  v50 = *((unsigned int *)this + 73);
  if ((int)v50 < 1
    || ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 31) + 8) + 21) & 0x10) != 0
      ? (v51 = *((_QWORD *)this + 33))
      : (v51 = HIDWORD(*((_QWORD *)this + 33))),
        (int)v51 < 1))
  {
    v58 = 1;
  }
  else
  {
    v52 = 0x7FFFFFFF;
    if ((uint64_t)(((unint64_t)v51 << 6) / v50) >= 0x7FFFFFFF)
      LODWORD(v53) = 0x7FFFFFFF;
    else
      v53 = ((unint64_t)v51 << 6) / v50;
    v54 = v53 >> 6;
    v55 = v53 & 0x7FFFFFC0;
    if (v54 != 0x1FFFFFF)
      v52 = v55;
    v56 = v52 * (unint64_t)v50;
    v57 = v56 >> 6;
    if (v56 >> 38 != (int)(v56 >> 6) >> 31)
      LODWORD(v57) = 0x7FFFFFFF;
    if ((int)v57 >= (int)v51)
      v58 = v54;
    else
      v58 = v54 + 1;
  }
  if (v19 <= v109)
  {
    v59 = v19 << 6;
    v60 = v47;
    do
    {
      v61 = *((_DWORD *)this + 72);
      v62 = *((_DWORD *)this + 73);
      if ((*((_BYTE *)this + 21) & 0x10) != 0)
      {
        v63 = WebCore::RenderMultiColumnSet::columnLogicalTop(this, v19);
        v64 = WebCore::RenderMultiColumnSet::columnLogicalLeft(this, v19);
        v65 = v61;
        v61 = v62;
      }
      else
      {
        v63 = WebCore::RenderMultiColumnSet::columnLogicalLeft(this, v19);
        v64 = WebCore::RenderMultiColumnSet::columnLogicalTop(this, v19);
        v65 = v62;
      }
      v66 = v64 << 32;
      v67 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
      v25 = v67 > 5;
      v68 = (1 << v67) & 0x2A;
      if (v25 || v68 == 0)
      {
        v70 = v66 | v63;
        v71 = *((_DWORD *)this + 5);
      }
      else
      {
        v71 = *((_DWORD *)this + 5);
        if ((v71 & 0x1000) != 0)
        {
          v97 = v63 + v61;
          if (__OFADD__(v63, v61))
            v97 = (v63 >> 31) + 0x7FFFFFFF;
          v98 = *((_DWORD *)this + 40);
          v99 = v98 - v97;
          if (__OFSUB__(v98, v97))
            v99 = (v98 >> 31) + 0x7FFFFFFF;
          v70 = v66 | v99;
        }
        else
        {
          v91 = v64 + v65;
          if (__OFADD__((_DWORD)v64, v65))
            v91 = (v64 >> 31) + 0x7FFFFFFF;
          v92 = *((_DWORD *)this + 41);
          v18 = __OFSUB__(v92, v91);
          v93 = v92 - v91;
          if (v18)
            v93 = (v92 >> 31) + 0x7FFFFFFF;
          v70 = v63 | (unint64_t)(v93 << 32);
        }
      }
      v72 = *((_DWORD *)this + 64);
      v73 = *((int *)this + 73);
      if (v19 <= 0x1FFFFFE)
        v74 = v59;
      else
        v74 = 0x7FFFFFFFLL;
      v75 = v73 * v74 / 64;
      v76 = *((_DWORD *)this + 65);
      v77 = (int)v75 >> 31;
      if ((v71 & 0x1000) != 0)
      {
        v80 = (v73 >> 31) + 0x7FFFFFFF;
        v78 = *((_DWORD *)this + 73);
        v73 = *((unsigned int *)this + 67);
        if (v77 != HIDWORD(v75))
          LODWORD(v75) = v80;
        v18 = __OFADD__(v72, (_DWORD)v75);
        v81 = v72 + v75;
        v72 = (v72 >> 31) + 0x7FFFFFFF;
        if (!v18)
          v72 = v81;
        v79 = *((unsigned int *)this + 65);
      }
      else
      {
        if (v77 != HIDWORD(v75))
          LODWORD(v75) = (v73 >> 31) + 0x7FFFFFFF;
        v78 = *((_DWORD *)this + 66);
        v18 = __OFADD__(v76, (_DWORD)v75);
        v79 = v76 + v75;
        if (v18)
          v79 = (v76 >> 31) + 0x7FFFFFFF;
      }
      v114[0] = v72 | (unint64_t)(v79 << 32);
      v114[1] = v78 | (unint64_t)(v73 << 32);
      v113[0] = WebCore::RenderMultiColumnSet::fragmentedFlowPortionOverflowRect((uint64_t)this, v114, v19, v58, v60);
      v113[1] = v82;
      v111 = v70;
      result = (__int128 *)WebCore::RenderFragmentContainer::fragmentedFlowContentRectangle(this, a2, (const WebCore::LayoutRect *)v114, (const WebCore::LayoutPoint *)&v111, (const WebCore::LayoutRect *)v113);
      *(_QWORD *)&v112 = result;
      *((_QWORD *)&v112 + 1) = v83;
      v84 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
      if (v84 <= 5 && ((1 << v84) & 0x2A) != 0)
      {
        if ((*((_BYTE *)this + 21) & 0x10) != 0)
        {
          v94 = (_DWORD)result + v83;
          if (__OFADD__((_DWORD)result, (_DWORD)v83))
            v94 = (result >> 31) + 0x7FFFFFFF;
          v95 = *((_DWORD *)this + 40);
          v18 = __OFSUB__(v95, v94);
          v96 = v95 - v94;
          if (v18)
            v96 = (v95 >> 31) + 0x7FFFFFFF;
          LODWORD(v112) = v96;
        }
        else
        {
          v88 = HIDWORD(result) + HIDWORD(v83);
          if (__OFADD__(HIDWORD(result), HIDWORD(v83)))
            v88 = (HIDWORD(result) >> 31) + 0x7FFFFFFF;
          v89 = *((_DWORD *)this + 41);
          v18 = __OFSUB__(v89, v88);
          v90 = v89 - v88;
          if (v18)
            v90 = (v89 >> 31) + 0x7FFFFFFF;
          DWORD1(v112) = v90;
        }
      }
      v85 = *(unsigned int *)(a3 + 12);
      if ((_DWORD)v85 == *(_DWORD *)(a3 + 8))
      {
        result = (__int128 *)WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v85 + 1, (unint64_t)&v112);
        v85 = *(unsigned int *)(a3 + 12);
        v86 = *(_QWORD *)a3;
        v87 = *result;
      }
      else
      {
        v86 = *(_QWORD *)a3;
        v87 = v112;
      }
      *(_OWORD *)(v86 + 16 * v85) = v87;
      ++*(_DWORD *)(a3 + 12);
      ++v19;
      v59 += 64;
    }
    while (v19 <= v109);
  }
  return result;
}

unint64_t WebCore::RenderMultiColumnSet::collectLayerFragments(WebCore::RenderFragmentContainer *this, void *a2, uint64_t a3, unsigned int *a4)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  int v10;
  unint64_t result;
  int v13;
  int v14;
  int v15;
  signed int v16;
  _BOOL4 v17;
  int v18;
  signed int v19;
  _BOOL4 v20;
  int v21;
  int v22;
  int v23;
  BOOL v24;
  int v25;
  int v26;
  int v27;
  signed int v28;
  int v29;
  signed int v30;
  unsigned int v31;
  uint64_t v32;
  float *v33;
  float v34;
  float v35;
  double v36;
  int v37;
  unint64_t v38;
  _BYTE *v39;
  unint64_t v40;
  unsigned int v41;
  unint64_t v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  int v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  _BOOL4 v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  unsigned int v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  unint64_t v64;
  unsigned int v65;
  signed int v66;
  unint64_t v67;
  signed int v68;
  signed int v69;
  int v70;
  _BOOL4 v71;
  signed int v72;
  int v73;
  unint64_t v74;
  int v75;
  _BOOL4 v76;
  int v77;
  int v78;
  int v79;
  int v80;
  uint64_t v81;
  int v82;
  _BOOL4 v83;
  int v84;
  unsigned int v85;
  int v86;
  int v87;
  unsigned int v88;
  uint64_t v89;
  int v90;
  unsigned int v91;
  uint64_t v92;
  _DWORD *v93;
  int *v94;
  int v95;
  unsigned int v96;
  int v97;
  int *v98;
  int v99;
  int v100;
  uint64_t v101;
  unsigned int v102;
  int v103;
  uint64_t v104;
  unsigned int v105;
  unint64_t v106;
  uint64_t v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int v111;
  int v112;
  int v113;
  int v114;
  uint64_t v115;
  int v116;
  unsigned int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  unsigned int v127;
  uint64_t v128;
  uint64_t v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  unsigned __int128 v134;
  uint64_t v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int v143;
  int v144;
  int v145;
  int v146;
  unsigned int v147;
  int v148;
  unsigned int v149;
  int v150;
  int v151;
  int v152;
  unsigned int v153;
  uint64_t v154;
  _BOOL4 v155;
  int v156;
  _BOOL4 v157;
  unsigned int v158;
  unsigned int v159;
  int v163;
  int v164;
  int v165;
  unsigned int v166;
  _BOOL4 v167;
  int v168;
  _BOOL4 v169;
  signed int v170;
  unsigned int v171;
  __int128 v172;
  _BYTE v173[64];
  unsigned __int128 v174;
  unint64_t v175;
  _QWORD v176[3];

  v5 = *(_DWORD *)a3;
  v171 = *(_DWORD *)(a3 + 4);
  v6 = *(_QWORD *)(a3 + 8);
  v7 = *((_QWORD *)this + 31);
  if (v7)
    v7 = *(_QWORD *)(v7 + 8);
  v8 = (unsigned __int16)*(_DWORD *)(v7 + 124) >> 13;
  v9 = v8 > 5;
  v10 = (1 << v8) & 0x2A;
  if (!v9 && v10 != 0)
  {
    if ((*(_BYTE *)(v7 + 21) & 0x10) != 0)
    {
      v147 = *(_DWORD *)(v7 + 160);
      v148 = v5 + v6;
      if (__OFADD__(v5, (_DWORD)v6))
        v148 = (v5 >> 31) + 0x7FFFFFFF;
      v24 = __OFSUB__(v147, v148);
      v149 = v147 - v148;
      v150 = (v147 >> 31) + 0x7FFFFFFF;
      if (v24)
        v5 = v150;
      else
        v5 = v149;
    }
    else
    {
      v143 = *(_DWORD *)(v7 + 164);
      v144 = v171 + HIDWORD(v6);
      if (__OFADD__(v171, HIDWORD(v6)))
        v144 = (v171 >> 31) + 0x7FFFFFFF;
      v24 = __OFSUB__(v143, v144);
      v145 = v143 - v144;
      v146 = (v143 >> 31) + 0x7FFFFFFF;
      if (!v24)
        v146 = v145;
      v171 = v146;
    }
  }
  result = WebCore::RenderFragmentContainer::fragmentedFlowPortionOverflowRect(this, a2);
  if ((int)v5 <= (int)result)
    v15 = result;
  else
    v15 = v5;
  v16 = v171;
  if ((int)v171 <= SHIDWORD(result))
    v16 = HIDWORD(result);
  v17 = __OFADD__(v5, (_DWORD)v6);
  v169 = v17;
  v170 = v5 + v6;
  v18 = (v5 >> 31) + 0x7FFFFFFF;
  if (!__OFADD__(v5, (_DWORD)v6))
    v18 = v5 + v6;
  v19 = result + v13;
  if (__OFADD__((_DWORD)result, v13))
    v19 = (result >> 31) + 0x7FFFFFFF;
  if (v19 < v18)
    v18 = v19;
  v20 = __OFADD__(v171, HIDWORD(v6));
  v167 = v20;
  v168 = v171 + HIDWORD(v6);
  v21 = (v171 >> 31) + 0x7FFFFFFF;
  if (!__OFADD__(v171, HIDWORD(v6)))
    v21 = v171 + HIDWORD(v6);
  v22 = HIDWORD(result) + v14;
  if (__OFADD__(HIDWORD(result), v14))
    v22 = (HIDWORD(result) >> 31) + 0x7FFFFFFF;
  if (v22 >= v21)
    v23 = v21;
  else
    v23 = v22;
  if (v15 >= v18 || v16 >= v23)
  {
    v18 = 0;
    v23 = 0;
    v15 = 0;
    v16 = 0;
  }
  v24 = __OFSUB__(v18, v15);
  v25 = v18 - v15;
  v26 = (v18 >> 31) + 0x7FFFFFFF;
  if (!v24)
    v26 = v25;
  v27 = v23 - v16;
  if (__OFSUB__(v23, v16))
    v27 = (v23 >> 31) + 0x7FFFFFFF;
  if (v26 < 1 || v27 < 1)
    return result;
  if ((*((_BYTE *)this + 21) & 0x10) != 0)
  {
    v28 = v5;
    v29 = v5 + v6;
    if (v169)
    {
      v29 = (v5 >> 31) + 0x7FFFFFFF;
      v28 = v5;
    }
  }
  else
  {
    v28 = v171;
    v29 = v171 + HIDWORD(v6);
    if (v20)
    {
      v29 = (v171 >> 31) + 0x7FFFFFFF;
      v28 = v171;
    }
  }
  v30 = v29 - 64;
  if (__OFSUB__(v29, 64))
    v30 = 0x80000000;
  v31 = WebCore::RenderMultiColumnSet::columnIndexAtOffset((uint64_t)this, v28);
  v166 = WebCore::RenderMultiColumnSet::columnIndexAtOffset((uint64_t)this, v30);
  v32 = *((_QWORD *)this + 4);
  if (v32)
    result = *(_QWORD *)(v32 + 8);
  else
    result = 0;
  if ((*(_BYTE *)(result + 52) & 7) != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x196423BF0);
  }
  v153 = *((_DWORD *)this + 72);
  v33 = *(float **)(*(_QWORD *)(result + 88) + 40);
  if (*((_BYTE *)v33 + 376))
  {
    v34 = *(float *)(*(_QWORD *)(result + 112) + 204);
    goto LABEL_62;
  }
  result = WebCore::RenderBox::contentLogicalWidth((WebCore::RenderBox *)result);
  if (*((_BYTE *)v33 + 384) == 4)
  {
    v34 = v33[95];
    if (!*((_BYTE *)v33 + 386))
      v34 = (float)SLODWORD(v34);
LABEL_62:
    v36 = v34 * 64.0;
    if (v36 >= 2147483650.0)
    {
      v37 = 0x7FFFFFFF;
    }
    else if (v36 <= -2147483650.0)
    {
      v37 = 0x80000000;
    }
    else
    {
      v37 = (int)v36;
    }
LABEL_65:
    v152 = v37;
    goto LABEL_66;
  }
  v152 = 0;
  switch(*((_BYTE *)v33 + 384))
  {
    case 0:
    case 1:
    case 9:
      v37 = result;
      goto LABEL_65;
    case 3:
      v35 = v33[95];
      if (!*((_BYTE *)v33 + 386))
        v35 = (float)SLODWORD(v35);
      v34 = (float)((float)((float)(int)result * 0.015625) * v35) / 100.0;
      goto LABEL_62;
    case 0xB:
      result = WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v33 + 95), (float)(int)result * 0.015625);
      goto LABEL_62;
    default:
      break;
  }
LABEL_66:
  v38 = *((unsigned int *)this + 73);
  v39 = *(_BYTE **)(*((_QWORD *)this + 31) + 8);
  if ((int)v38 < 1)
    goto LABEL_80;
  v40 = *((_QWORD *)this + 33);
  if ((v39[21] & 0x10) == 0)
    v40 >>= 32;
  if ((int)v40 < 1)
  {
LABEL_80:
    v47 = 1;
  }
  else
  {
    v41 = 0x7FFFFFFF;
    if ((uint64_t)(((unint64_t)v40 << 6) / v38) >= 0x7FFFFFFF)
      LODWORD(v42) = 0x7FFFFFFF;
    else
      v42 = ((unint64_t)v40 << 6) / v38;
    v43 = v42 >> 6;
    v44 = v42 & 0x7FFFFFC0;
    if (v43 != 0x1FFFFFF)
      v41 = v44;
    v45 = v41 * (unint64_t)v38;
    v46 = v45 >> 6;
    if (v45 >> 38 != (int)(v45 >> 6) >> 31)
      LODWORD(v46) = 0x7FFFFFFF;
    if ((int)v46 >= (int)v40)
      v47 = v43;
    else
      v47 = v43 + 1;
  }
  v159 = 0;
  v48 = v39[368];
  v49 = v39[367];
  v164 = v49;
  v165 = v47;
  if (v48 && !v49)
  {
    if ((*((_BYTE *)this + 21) & 0x10) != 0)
    {
      v50 = WebCore::RenderMultiColumnSet::columnLogicalTop(this, 0);
      result = WebCore::RenderMultiColumnSet::columnLogicalLeft(this, 0);
    }
    else
    {
      v50 = WebCore::RenderMultiColumnSet::columnLogicalLeft(this, 0);
      result = WebCore::RenderMultiColumnSet::columnLogicalTop(this, 0);
    }
    if ((*((_BYTE *)this + 21) & 0x10) != 0)
      v51 = v50;
    else
      v51 = result;
    v159 = v51;
  }
  v163 = v48;
  if (v31 <= v166)
  {
    v158 = v5;
    v52 = __OFADD__(v153, v152);
    v157 = v52;
    v53 = v31 << 6;
    v151 = (v5 >> 31) + 0x7FFFFFFF;
    do
    {
      v54 = *((_DWORD *)this + 64);
      v55 = *((unsigned int *)this + 65);
      v56 = *((int *)this + 73);
      if (v31 <= 0x1FFFFFE)
        v57 = v53;
      else
        v57 = 0x7FFFFFFFLL;
      v58 = v56 * v57 / 64;
      v59 = (int)v58 >> 31;
      if ((*((_BYTE *)this + 21) & 0x10) != 0)
      {
        v62 = (v56 >> 31) + 0x7FFFFFFF;
        if (v59 == HIDWORD(v58))
          v62 = v58;
        v24 = __OFADD__(v54, v62);
        v63 = v54 + v62;
        if (v24)
          v54 = (v54 >> 31) + 0x7FFFFFFF;
        else
          v54 = v63;
        v60 = *((_DWORD *)this + 73);
        v56 = *((unsigned int *)this + 67);
      }
      else
      {
        if (v59 != HIDWORD(v58))
          LODWORD(v58) = (v56 >> 31) + 0x7FFFFFFF;
        v60 = *((_DWORD *)this + 66);
        v24 = __OFADD__((_DWORD)v55, (_DWORD)v58);
        v61 = (v55 + v58);
        if (v24)
          v55 = (v55 >> 31) + 0x7FFFFFFF;
        else
          v55 = v61;
      }
      v176[0] = v54 | (unint64_t)(v55 << 32);
      v176[1] = v60 | (unint64_t)(v56 << 32);
      result = WebCore::RenderMultiColumnSet::fragmentedFlowPortionOverflowRect((uint64_t)this, v176, v31, v165, v152);
      v65 = result;
      if ((int)v5 <= (int)result)
        v66 = result;
      else
        v66 = v5;
      v67 = HIDWORD(result);
      v69 = v170;
      v68 = v171;
      if ((int)v171 <= SHIDWORD(result))
        v68 = HIDWORD(result);
      if (v169)
        v69 = v151;
      v70 = result + v64;
      v71 = __OFADD__((_DWORD)result, (_DWORD)v64);
      v72 = result + v64;
      if (__OFADD__((_DWORD)result, (_DWORD)v64))
        v72 = (result >> 31) + 0x7FFFFFFF;
      if (v72 < v69)
        v69 = v72;
      v73 = v168;
      if (v167)
        v73 = (v171 >> 31) + 0x7FFFFFFF;
      v74 = HIDWORD(v64);
      v75 = HIDWORD(result) + HIDWORD(v64);
      v76 = __OFADD__(HIDWORD(result), HIDWORD(v64));
      v77 = HIDWORD(result) + HIDWORD(v64);
      if (__OFADD__(HIDWORD(result), HIDWORD(v64)))
        v77 = (HIDWORD(result) >> 31) + 0x7FFFFFFF;
      if (v77 < v73)
        v73 = v77;
      if (v66 >= v69 || v68 >= v73)
      {
        v69 = 0;
        v73 = 0;
        v66 = 0;
        v68 = 0;
      }
      v24 = __OFSUB__(v69, v66);
      v78 = v69 - v66;
      if (v24)
        v78 = (v69 >> 31) + 0x7FFFFFFF;
      v24 = __OFSUB__(v73, v68);
      v79 = v73 - v68;
      if (v24)
        v79 = (v73 >> 31) + 0x7FFFFFFF;
      if (v78 >= 1 && v79 >= 1)
      {
        if (v164)
        {
          v80 = v153 + v152;
          if (v157)
            v80 = (v153 >> 31) + 0x7FFFFFFF;
          v81 = v80 * v57 / 64;
          if (HIDWORD(v81) != (int)v81 >> 31)
            LODWORD(v81) = (v80 >> 31) + 0x7FFFFFFF;
        }
        else
        {
          LODWORD(v81) = 0;
        }
        if ((v163 != 0) == ((*((_BYTE *)this + 123) & 4) == 0))
        {
          LODWORD(v81) = (_DWORD)v81 == 0x80000000 ? 0x7FFFFFFF : -(int)v81;
          if (v163)
          {
            v154 = v57;
            v155 = v76;
            v156 = HIDWORD(result) + HIDWORD(v64);
            v82 = v64;
            v83 = v71;
            v84 = result + v64;
            v85 = WebCore::RenderBox::contentLogicalWidth(this);
            v86 = v85 - v153;
            if (__OFSUB__(v85, v153))
              v86 = (v85 >> 31) + 0x7FFFFFFF;
            v24 = __OFADD__((_DWORD)v81, v86);
            v87 = v81 + v86;
            v70 = v84;
            v71 = v83;
            LODWORD(v64) = v82;
            if (v24)
              LODWORD(v81) = (v81 >> 31) + 0x7FFFFFFF;
            else
              LODWORD(v81) = v87;
            v76 = v155;
            v75 = v156;
            v57 = v154;
          }
        }
        v88 = *((_DWORD *)this + 31);
        v89 = 156;
        if (((v88 >> 13) & 6) - 2 < 4)
          v89 = 152;
        v90 = *(_DWORD *)((char *)this + v89);
        v91 = v159 + v90;
        if (__OFADD__(v159, v90))
          v91 = (v159 >> 31) + 0x7FFFFFFF;
        v92 = *((_QWORD *)this + 31);
        if (v92)
          v93 = *(_DWORD **)(v92 + 8);
        else
          v93 = 0;
        if (((v93[31] >> 13) & 6u) - 2 < 4)
          v94 = v93 + 38;
        else
          v94 = v93 + 39;
        v95 = *v94;
        v96 = v91 - v95;
        if (__OFSUB__(v91, v95))
          v96 = (v91 >> 31) + 0x7FFFFFFF;
        v97 = *((_DWORD *)this + 5);
        v98 = (int *)v176 + 1;
        if ((v97 & 0x1000) != 0)
          v98 = (int *)v176;
        v99 = *v98;
        if (v99 == 0x80000000)
          v100 = 0x7FFFFFFF;
        else
          v100 = -v99;
        v24 = __OFADD__(v96, v100);
        LODWORD(v101) = v96 + v100;
        if (v24)
          LODWORD(v101) = (v96 >> 31) + 0x7FFFFFFF;
        if (!v164)
        {
          if (v163)
          {
            v102 = *((_DWORD *)this + 73);
            v103 = v102 + v152;
            if (__OFADD__(v102, v152))
              v103 = (v102 >> 31) + 0x7FFFFFFF;
            v104 = v103 * v57 / 64;
            if (HIDWORD(v104) != (int)v104 >> 31)
              LODWORD(v104) = (v103 >> 31) + 0x7FFFFFFF;
            if (__OFSUB__((_DWORD)v101, (_DWORD)v104))
              LODWORD(v101) = (v101 >> 31) + 0x7FFFFFFF;
            else
              LODWORD(v101) = v101 - v104;
          }
          else
          {
            v101 = v57 * v152 / 64;
            if (HIDWORD(v101) != (int)v101 >> 31)
              LODWORD(v101) = (v152 >> 31) + 0x7FFFFFFF;
          }
        }
        v105 = (unsigned __int16)v88 >> 13;
        if (v105 <= 5 && ((1 << v105) & 0x2A) != 0)
        {
          if ((_DWORD)v101 == 0x80000000)
            LODWORD(v101) = 0x7FFFFFFF;
          else
            LODWORD(v101) = -(int)v101;
        }
        if ((v97 & 0x1000) != 0)
          v106 = v101;
        else
          v106 = v81;
        if ((v97 & 0x1000) != 0)
          v107 = v81;
        else
          v107 = v101;
        v109 = *a4;
        v108 = a4[1];
        v111 = a4[2];
        v110 = a4[3];
        if ((_DWORD)v106 == 0x80000000)
          v112 = 0x7FFFFFFF;
        else
          v112 = -(int)v106;
        if ((_DWORD)v107 == 0x80000000)
          v113 = 0x7FFFFFFF;
        else
          v113 = -(int)v107;
        v24 = __OFADD__(v109, v112);
        v114 = v109 + v112;
        if (v24)
          v114 = (v109 >> 31) + 0x7FFFFFFF;
        v115 = (uint64_t)a2;
        v5 = v158;
        v116 = v108 + v113;
        if (__OFADD__(v108, v113))
          v116 = (v108 >> 31) + 0x7FFFFFFF;
        v117 = *(_DWORD *)a3;
        v118 = *(_DWORD *)(a3 + 4);
        result = *(_QWORD *)(a3 + 8);
        if (*(_DWORD *)a3 <= v114)
          v119 = v114;
        else
          v119 = *(_DWORD *)a3;
        if (v118 <= v116)
          v120 = v116;
        else
          v120 = *(_DWORD *)(a3 + 4);
        v121 = v117 + result;
        if (__OFADD__(v117, (_DWORD)result))
          v121 = (v117 >> 31) + 0x7FFFFFFF;
        v24 = __OFADD__(v114, v111);
        v122 = v114 + v111;
        if (v24)
          v122 = (v114 >> 31) + 0x7FFFFFFF;
        if (v122 >= v121)
          v122 = v121;
        v123 = v118 + HIDWORD(result);
        if (__OFADD__(v118, HIDWORD(result)))
          v123 = (v118 >> 31) + 0x7FFFFFFF;
        v24 = __OFADD__(v116, v110);
        v124 = v116 + v110;
        if (v24)
          v124 = (v116 >> 31) + 0x7FFFFFFF;
        if (v124 >= v123)
          v124 = v123;
        if (v119 >= v122 || v120 >= v124)
        {
          v122 = 0;
          v124 = 0;
          v119 = 0;
          v120 = 0;
        }
        v24 = __OFSUB__(v122, v119);
        v125 = v122 - v119;
        if (v24)
          v125 = (v122 >> 31) + 0x7FFFFFFF;
        v24 = __OFSUB__(v124, v120);
        v126 = v124 - v120;
        if (v24)
          v126 = (v124 >> 31) + 0x7FFFFFFF;
        if (v125 >= 1 && v126 >= 1)
        {
          LOBYTE(v172) = 0;
          BYTE4(v172) = 0;
          v173[4] = 0;
          memset(&v173[44], 0, 17);
          memset(&v173[8], 0, 33);
          v175 = 0;
          v174 = v106 | (unsigned __int128)(unint64_t)(v107 << 32);
          if (v92)
            v92 = *(_QWORD *)(v92 + 8);
          v127 = (unsigned __int16)*(_DWORD *)(v92 + 124) >> 13;
          if (v127 <= 5 && ((1 << v127) & 0x2A) != 0)
          {
            if ((*(_BYTE *)(v92 + 21) & 0x10) != 0)
            {
              if (v71)
                v70 = (v65 >> 31) + 0x7FFFFFFF;
              v142 = *(_DWORD *)(v92 + 160);
              v65 = v142 - v70;
              if (__OFSUB__(v142, v70))
                v65 = (v142 >> 31) + 0x7FFFFFFF;
            }
            else
            {
              if (v76)
                v75 = (v67 >> 31) + 0x7FFFFFFF;
              v141 = *(_DWORD *)(v92 + 164);
              LODWORD(v67) = v141 - v75;
              if (__OFSUB__(v141, v75))
                LODWORD(v67) = (v141 >> 31) + 0x7FFFFFFF;
            }
            v115 = (uint64_t)a2;
            v5 = v158;
          }
          *((_QWORD *)&v174 + 1) = __PAIR64__(v67, v65);
          v175 = __PAIR64__(v74, v64);
          v128 = *(unsigned int *)(v115 + 12);
          if (v128 > 0x26259F)
            return result;
          if ((_DWORD)v128 == *(_DWORD *)(v115 + 8))
          {
            result = WTF::Vector<WebCore::LayerFragment,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v115, (void *)(v128 + 1), (unint64_t)&v172);
            v135 = *(_QWORD *)v115 + 104 * *(unsigned int *)(v115 + 12);
            v137 = *(_OWORD *)(result + 64);
            v136 = *(_OWORD *)(result + 80);
            v138 = *(_OWORD *)(result + 48);
            *(_QWORD *)(v135 + 96) = *(_QWORD *)(result + 96);
            *(_OWORD *)(v135 + 64) = v137;
            *(_OWORD *)(v135 + 80) = v136;
            *(_OWORD *)(v135 + 48) = v138;
            v140 = *(_OWORD *)(result + 16);
            v139 = *(_OWORD *)(result + 32);
            *(_OWORD *)v135 = *(_OWORD *)result;
            *(_OWORD *)(v135 + 16) = v140;
            *(_OWORD *)(v135 + 32) = v139;
          }
          else
          {
            v129 = *(_QWORD *)v115 + 104 * v128;
            v130 = v172;
            v131 = *(_OWORD *)&v173[16];
            *(_OWORD *)(v129 + 16) = *(_OWORD *)v173;
            *(_OWORD *)(v129 + 32) = v131;
            *(_OWORD *)v129 = v130;
            v132 = *(_OWORD *)&v173[32];
            v133 = *(_OWORD *)&v173[48];
            v134 = v174;
            *(_QWORD *)(v129 + 96) = v175;
            *(_OWORD *)(v129 + 64) = v133;
            *(_OWORD *)(v129 + 80) = v134;
            *(_OWORD *)(v129 + 48) = v132;
          }
          ++*(_DWORD *)(v115 + 12);
        }
      }
      ++v31;
      v53 += 64;
    }
    while (v31 <= v166);
  }
  return result;
}

uint64_t WebCore::RenderMultiColumnSet::addOverflowFromChildren(uint64_t this)
{
  WebCore::RenderMultiColumnSet *v1;
  unint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];

  v1 = (WebCore::RenderMultiColumnSet *)this;
  v2 = *(unsigned int *)(this + 292);
  if ((int)v2 < 1
    || ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(this + 248) + 8) + 21) & 0x10) != 0
      ? (v3 = *(_QWORD *)(this + 264))
      : (v3 = HIDWORD(*(_QWORD *)(this + 264))),
        (int)v3 < 1))
  {
    v10 = 1;
LABEL_19:
    v11 = v10 - 1;
    v12 = *(unsigned int *)(this + 288);
    if ((*(_BYTE *)(this + 21) & 0x10) != 0)
    {
      v13 = WebCore::RenderMultiColumnSet::columnLogicalTop((WebCore::RenderMultiColumnSet *)this, v11);
      v14 = WebCore::RenderMultiColumnSet::columnLogicalLeft(v1, v11);
      v15 = v12;
      LODWORD(v12) = v2;
    }
    else
    {
      v13 = WebCore::RenderMultiColumnSet::columnLogicalLeft((WebCore::RenderMultiColumnSet *)this, v11);
      v14 = WebCore::RenderMultiColumnSet::columnLogicalTop(v1, v11);
      v15 = v2;
    }
    v16[0] = v13 | (unint64_t)(v14 << 32);
    v16[1] = v12 | (unint64_t)(v15 << 32);
    this = WebCore::RenderBox::addLayoutOverflow(v1, (const WebCore::LayoutRect *)v16);
    if ((*((_BYTE *)v1 + 22) & 1) == 0)
      return WebCore::RenderBox::addVisualOverflow((uint64_t)v1, (const WebCore::LayoutRect *)v16);
    return this;
  }
  v4 = 0x7FFFFFFF;
  if ((uint64_t)(((unint64_t)v3 << 6) / v2) >= 0x7FFFFFFF)
    LODWORD(v5) = 0x7FFFFFFF;
  else
    v5 = ((unint64_t)v3 << 6) / v2;
  v6 = v5 >> 6;
  v7 = v5 & 0x7FFFFFC0;
  if (v6 != 0x1FFFFFF)
    v4 = v7;
  v8 = v4 * (unint64_t)v2;
  v9 = v8 >> 6;
  if (v8 >> 38 != (int)(v8 >> 6) >> 31)
    LODWORD(v9) = 0x7FFFFFFF;
  if ((int)v9 >= (int)v3)
    v10 = v6;
  else
    v10 = v6 + 1;
  if (v10)
    goto LABEL_19;
  return this;
}

unsigned int *WebCore::RenderMultiColumnSet::positionForPoint@<X0>(uint64_t a1@<X0>, signed int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  WebCore::RenderBlock *v7;
  uint64_t v9;

  v6 = *(_QWORD *)(a1 + 248);
  if (v6)
    v7 = *(WebCore::RenderBlock **)(v6 + 8);
  else
    v7 = 0;
  v9 = WebCore::RenderMultiColumnSet::translateFragmentPointToFragmentedFlow(a1, a2, 0);
  return WebCore::RenderBlock::positionForPoint(v7, (int *)&v9, a3, 0, a4);
}

uint64_t WebCore::RenderMultiColumnSet::nodeForHitTest(WebCore::RenderMultiColumnSet *this)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1272);
}

unsigned int *WebCore::RenderMultiColumnSet::updateHitTestResult(unsigned int *this, WebCore::HitTestResult *a2, const WebCore::LayoutPoint *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;

  if (!*((_QWORD *)a2 + 9))
  {
    v3 = (uint64_t)this;
    if (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 4) + 8) + 46) == 49)
    {
      v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1272);
      if (v4)
      {
        *(_DWORD *)(v4 + 24) += 2;
        v7 = v4;
        if ((~*(unsigned __int16 *)(v4 + 28) & 0x408) != 0
          || (v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 368))(v4), v7 = v4, !v8)
          || (v7 = *(_QWORD *)(v4 + 112)) != 0 && (v7 = *(_QWORD *)(v7 + 8)) != 0)
        {
          *(_DWORD *)(v7 + 24) += 2;
        }
        v9 = *((_QWORD *)a2 + 9);
        *((_QWORD *)a2 + 9) = v7;
        if (v9)
        {
          if (*(_DWORD *)(v9 + 24) == 2)
          {
            if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v9, a2);
          }
          else
          {
            *(_DWORD *)(v9 + 24) -= 2;
          }
        }
        if (!*((_QWORD *)a2 + 10))
        {
          v10 = v4;
          if ((~*(unsigned __int16 *)(v4 + 28) & 0x408) != 0
            || (v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 368))(v4), v10 = v4, !v11)
            || (v10 = *(_QWORD *)(v4 + 112)) != 0 && (v10 = *(_QWORD *)(v10 + 8)) != 0)
          {
            *(_DWORD *)(v10 + 24) += 2;
          }
          v12 = *((_QWORD *)a2 + 10);
          *((_QWORD *)a2 + 10) = v10;
          if (v12)
          {
            if (*(_DWORD *)(v12 + 24) == 2)
            {
              if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v12, a2);
            }
            else
            {
              *(_DWORD *)(v12 + 24) -= 2;
            }
          }
        }
        v14 = WebCore::RenderMultiColumnSet::translateFragmentPointToFragmentedFlow(v3, (signed int *)a3, 1);
        this = (unsigned int *)WebCore::RenderBlock::offsetForContents(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 24) + 8) + 40)+ 8)+ 1944), (WebCore::LayoutPoint *)&v14);
        *((_QWORD *)a2 + 12) = v14;
        if (*(_DWORD *)(v4 + 24) == 2)
        {
          if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
            return WebCore::Node::removedLastRef((WebCore::Node *)v4, v13);
        }
        else
        {
          *(_DWORD *)(v4 + 24) -= 2;
        }
      }
    }
  }
  return this;
}

const char *WebCore::RenderMultiColumnSet::renderName(WebCore::RenderMultiColumnSet *this)
{
  return "RenderMultiColumnSet";
}

const char *WebCore::RenderListMarker::renderName(WebCore::RenderListMarker *this)
{
  return "RenderListMarker";
}

uint64_t WebCore::RenderListMarker::canHaveChildren(WebCore::RenderListMarker *this)
{
  return 0;
}

uint64_t WebCore::RenderListMarker::canBeSelectionLeaf(WebCore::RenderListMarker *this)
{
  return 1;
}

const char *WebCore::RenderMedia::renderName(WebCore::RenderMedia *this)
{
  return "RenderMedia";
}

uint64_t WebCore::RenderMedia::canHaveChildren(WebCore::RenderMedia *this)
{
  return 1;
}

uint64_t WebCore::RenderMedia::isImage(WebCore::RenderMedia *this)
{
  return 0;
}

uint64_t WebCore::RenderMedia::shouldDisplayBrokenImageIcon(WebCore::RenderMedia *this)
{
  return 0;
}

const char *WebCore::RenderMenuList::renderName(WebCore::RenderMenuList *this)
{
  return "RenderMenuList";
}

uint64_t WebCore::RenderMenuList::canHaveGeneratedChildren(WebCore::RenderMenuList *this)
{
  return 0;
}

uint64_t WebCore::RenderMenuList::createsAnonymousWrapper(WebCore::RenderMenuList *this)
{
  return 1;
}

uint64_t WebCore::RenderMenuList::hasControlClip(WebCore::RenderMenuList *this)
{
  return 1;
}

uint64_t WebCore::RenderMenuList::hasLineIfEmpty(WebCore::RenderMenuList *this)
{
  return 1;
}

uint64_t WebCore::RenderMenuList::isFlexibleBoxImpl(WebCore::RenderMenuList *this)
{
  return 1;
}

uint64_t WebCore::RenderMenuList::shouldPopOver(WebCore::RenderMenuList *this)
{
  return 1;
}

uint64_t `non-virtual thunk to'WebCore::RenderMenuList::shouldPopOver(WebCore::RenderMenuList *this)
{
  return 1;
}

const char *WebCore::RenderMeter::renderName(WebCore::RenderMeter *this)
{
  return "RenderMeter";
}

const char *WebCore::RenderModel::renderName(WebCore::RenderModel *this)
{
  return "RenderModel";
}

uint64_t WebCore::RenderMultiColumnSet::pageLogicalWidth(WebCore::RenderMultiColumnSet *this)
{
  return *((unsigned int *)this + 72);
}

uint64_t WebCore::RenderMultiColumnSet::pageLogicalHeight(WebCore::RenderMultiColumnSet *this)
{
  return *((unsigned int *)this + 73);
}

uint64_t WebCore::RenderMultiColumnSet::logicalHeightOfAllFragmentedFlowContent(WebCore::RenderMultiColumnSet *this)
{
  if ((*((_BYTE *)this + 21) & 0x10) != 0)
    return *((unsigned int *)this + 66);
  else
    return *((unsigned int *)this + 67);
}

uint64_t std::default_delete<WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WTF::WeakPtr<WebCore::RenderMultiColumnSpannerPlaceholder,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakPtr<WebCore::RenderMultiColumnSpannerPlaceholder,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>>::operator()[abi:sn180100](WTF ***this, void *a2)
{
  WTF **v3;
  uint64_t v4;
  WTF **v5;
  WTF *v6;
  WTF *v7;

  v3 = *this;
  if (*this)
  {
    v4 = *((unsigned int *)v3 - 1);
    if ((_DWORD)v4)
    {
      v5 = *this;
      do
      {
        v6 = *v5;
        if (*v5 != (WTF *)-1)
        {
          v7 = v5[1];
          v5[1] = 0;
          if (v7)
          {
            if (*(_DWORD *)v7 == 1)
            {
              WTF::fastFree(v7, a2);
              v6 = *v5;
            }
            else
            {
              --*(_DWORD *)v7;
            }
          }
          *v5 = 0;
          if (v6)
          {
            if (*(_DWORD *)v6 == 1)
              WTF::fastFree(v6, a2);
            else
              --*(_DWORD *)v6;
          }
        }
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 2), a2);
  }
  return WTF::fastFree((WTF *)this, a2);
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::RenderMarquee::*&)(void),WebCore::RenderMarquee*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

unsigned __int8 *WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::AXCoreObject,(WTF::DestructionThread)0>::ref(unsigned __int8 *this)
{
  unsigned __int8 *v1;
  int v3;

  v1 = this;
  if (__ldaxr(this))
  {
    __clrex();
  }
  else if (!__stxr(1u, this))
  {
    goto LABEL_5;
  }
  this = (unsigned __int8 *)MEMORY[0x19AEA534C](this);
LABEL_5:
  ++*((_QWORD *)v1 + 1);
  v3 = __ldxr(v1);
  if (v3 != 1)
  {
    __clrex();
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  if (__stlxr(0, v1))
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
  return this;
}

unsigned __int8 *WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::AXCoreObject,(WTF::DestructionThread)0>::deref(unsigned __int8 *this, void *a2)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  int v8;
  uint64_t v9;

  v2 = this;
  if (__ldaxr(this))
  {
    __clrex();
  }
  else if (!__stxr(1u, this))
  {
    goto LABEL_5;
  }
  this = (unsigned __int8 *)MEMORY[0x19AEA534C](this);
LABEL_5:
  v4 = *((_QWORD *)v2 + 1);
  v5 = v4 - 1;
  *((_QWORD *)v2 + 1) = v4 - 1;
  if (v4 == 1)
  {
    v9 = *((_QWORD *)v2 + 2);
    v6 = *((_QWORD *)v2 + 3);
    *((_QWORD *)v2 + 3) = 0;
    v7 = v9 != 0;
  }
  else
  {
    v6 = 0;
    v7 = 1;
  }
  v8 = __ldxr(v2);
  if (v8 != 1)
  {
    __clrex();
LABEL_12:
    this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
    if (v5)
      return this;
    goto LABEL_13;
  }
  if (__stlxr(0, v2))
    goto LABEL_12;
  if (v5)
    return this;
LABEL_13:
  if (v6)
    this = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  if (!v7)
    return (unsigned __int8 *)WTF::fastFree((WTF *)v2, a2);
  return this;
}

char *WTF::Vector<WebCore::RenderMultiColumnSet::ContentRun,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, void *a2, unint64_t a3)
{
  unint64_t v3;
  WTF *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;

  v3 = a3;
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + 8 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= (unint64_t)a2)
        v10 = (unint64_t)a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v21 = *(WTF **)a1;
        return (char *)v21 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      }
      if (v10 < 2)
      {
        v11 = a1 + 16;
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 1;
        goto LABEL_34;
      }
      if (!(v10 >> 29))
      {
        v11 = WTF::fastMalloc((WTF *)(8 * v10));
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
LABEL_34:
        v22 = 0;
        do
        {
          *(_QWORD *)(v11 + v22) = *(_QWORD *)((char *)v5 + v22);
          v22 += 8;
        }
        while (8 * v6 != v22);
        v21 = *(WTF **)a1;
        if ((WTF *)(a1 + 16) != v5 && v5)
        {
          if (v21 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, a2);
          v21 = *(WTF **)a1;
        }
        return (char *)v21 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      }
LABEL_43:
      __break(0xC471u);
      JUMPOUT(0x196424528);
    }
  }
  v12 = *(unsigned int *)(a1 + 8);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= (unint64_t)a2)
    v15 = (unint64_t)a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *(unsigned int *)(a1 + 12);
    if (v15 < 2)
    {
      v17 = (_QWORD *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 1;
      if (!(_DWORD)v16)
        goto LABEL_27;
    }
    else
    {
      if (v15 >> 29)
        goto LABEL_43;
      v17 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v15));
      *(_DWORD *)(a1 + 8) = v15;
      *(_QWORD *)a1 = v17;
      if (!(_DWORD)v16)
        goto LABEL_27;
    }
    v18 = 8 * v16;
    v19 = v5;
    do
    {
      v20 = *(_QWORD *)v19;
      v19 = (WTF *)((char *)v19 + 8);
      *v17++ = v20;
      v18 -= 8;
    }
    while (v18);
LABEL_27:
    if ((WTF *)(a1 + 16) != v5 && v5)
    {
      if (*(WTF **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, a2);
    }
  }
  return (char *)v3;
}

uint64_t WebCore::RenderMultiColumnSpannerPlaceholder::RenderMultiColumnSpannerPlaceholder(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v17;
  WTF *v18;
  void *v19;
  WTF *v20;

  v8 = WebCore::RenderObject::RenderObject(a1, 27, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 40) + 8), 28, 0);
  *(_QWORD *)v8 = off_1E3422BC8;
  *(_QWORD *)(v8 + 70) = 0;
  *(_QWORD *)(v8 + 64) = 0;
  *(_DWORD *)(v8 + 80) = 0;
  v9 = a4[1];
  a4[1] = 0;
  *(_QWORD *)(v8 + 88) = v9;
  *(_QWORD *)(v8 + 96) = a4[2];
  v10 = a4[3];
  a4[3] = 0;
  *(_QWORD *)(v8 + 104) = v10;
  v11 = a4[4];
  a4[4] = 0;
  *(_QWORD *)(v8 + 112) = v11;
  *(_QWORD *)(v8 + 120) = a4[5];
  v12 = a4[6];
  a4[6] = 0;
  *(_QWORD *)(v8 + 128) = v12;
  v13 = a4[7];
  a4[7] = 0;
  *(_QWORD *)(v8 + 136) = v13;
  *(_OWORD *)(v8 + 144) = 0u;
  *(_OWORD *)(v8 + 160) = 0u;
  *(_OWORD *)(v8 + 176) = 0u;
  *(_QWORD *)(v8 + 192) = 0;
  *(_QWORD *)v8 = off_1E342DCA0;
  v14 = *(_QWORD *)(a3 + 8);
  if (!v14)
  {
    v14 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v14 = 1;
    *(_QWORD *)(v14 + 8) = a3;
    v18 = *(WTF **)(a3 + 8);
    *(_QWORD *)(a3 + 8) = v14;
    if (v18)
    {
      if (*(_DWORD *)v18 == 1)
      {
        WTF::fastFree(v18, v17);
        v14 = *(_QWORD *)(a3 + 8);
        if (!v14)
          goto LABEL_3;
      }
      else
      {
        --*(_DWORD *)v18;
      }
    }
  }
  ++*(_DWORD *)v14;
LABEL_3:
  *(_QWORD *)(a1 + 200) = v14;
  v15 = *(_QWORD *)(a2 + 8);
  if (!v15)
  {
    v15 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v15 = 1;
    *(_QWORD *)(v15 + 8) = a2;
    v20 = *(WTF **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = v15;
    if (v20)
    {
      if (*(_DWORD *)v20 == 1)
      {
        WTF::fastFree(v20, v19);
        v15 = *(_QWORD *)(a2 + 8);
        if (!v15)
          goto LABEL_5;
      }
      else
      {
        --*(_DWORD *)v20;
      }
    }
  }
  ++*(_DWORD *)v15;
LABEL_5:
  *(_QWORD *)(a1 + 208) = v15;
  return a1;
}

void WebCore::RenderMultiColumnSpannerPlaceholder::~RenderMultiColumnSpannerPlaceholder(WebCore::RenderMultiColumnSpannerPlaceholder *this, void *a2)
{
  WTF *v3;
  WTF *v4;
  WTF *v5;

  v3 = (WTF *)*((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  v4 = (WTF *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      WTF::fastFree(v4, a2);
    else
      --*(_DWORD *)v4;
  }
  *(_QWORD *)this = off_1E34201A0;
  v5 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 1)
      WTF::fastFree(v5, a2);
    else
      --*(_DWORD *)v5;
  }
  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
}

{
  WTF *v3;
  WTF *v4;
  WTF *v5;
  void *v6;

  v3 = (WTF *)*((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  v4 = (WTF *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      WTF::fastFree(v4, a2);
    else
      --*(_DWORD *)v4;
  }
  *(_QWORD *)this = off_1E34201A0;
  v5 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 1)
      WTF::fastFree(v5, a2);
    else
      --*(_DWORD *)v5;
  }
  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
  if (*((_DWORD *)this + 4))
  {
    *((_QWORD *)this + 26) = 0;
    *((_OWORD *)this + 11) = 0u;
    *((_OWORD *)this + 12) = 0u;
    *((_OWORD *)this + 9) = 0u;
    *((_OWORD *)this + 10) = 0u;
    *((_OWORD *)this + 7) = 0u;
    *((_OWORD *)this + 8) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 1) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *(_OWORD *)this = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(this, v6);
  }
}

const char *WebCore::RenderMultiColumnSpannerPlaceholder::renderName(WebCore::RenderMultiColumnSpannerPlaceholder *this)
{
  return "RenderMultiColumnSpannerPlaceholder";
}

uint64_t WebCore::RenderObjectDeleter::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 32);
  if (v3 && *(_QWORD *)(v3 + 8))
    goto LABEL_16;
  v4 = *(unsigned int *)(a2 + 47);
  if (v4 | ((unint64_t)*(unsigned __int8 *)(a2 + 51) << 32)
    && *(_QWORD *)((v4 | ((unint64_t)*(unsigned __int8 *)(a2 + 51) << 32)) + 8))
  {
    __break(0xC471u);
    JUMPOUT(0x196424970);
  }
  v5 = *(unsigned int *)(a2 + 40);
  if (v5 | ((unint64_t)*(unsigned __int8 *)(a2 + 44) << 32))
  {
    if (*(_QWORD *)((v5 | ((unint64_t)*(unsigned __int8 *)(a2 + 44) << 32)) + 8))
    {
LABEL_16:
      __break(0xC471u);
      JUMPOUT(0x19642490CLL);
    }
  }
  v6 = *(_DWORD *)(a2 + 20);
  if ((v6 & 4) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19642492CLL);
  }
  *(_DWORD *)(a2 + 20) = v6 | 4;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 640))(a2);
  if ((*(_BYTE *)(a2 + 52) & 7) != 3 || (*(_BYTE *)(a2 + 53) & 4) == 0 || *(_DWORD *)(a2 + 224) == 1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
  --*(_DWORD *)(a2 + 224);
  return result;
}

uint64_t *WebCore::RenderObject::theme(WebCore::RenderObject *this)
{
  uint64_t v2;

  {
    v2 = WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_QWORD *)v2 = &off_1E335BC30;
  }
  return &WebCore::RenderTheme::singleton(void)::theme;
}

BOOL WebCore::RenderObject::isDescendantOf(WebCore::RenderObject *this, const WebCore::RenderObject *a2)
{
  WebCore::RenderObject *v2;
  _BOOL8 result;
  uint64_t v4;

  v2 = this;
  result = this != 0;
  if (v2 && v2 != a2)
  {
    while (1)
    {
      v4 = *((_QWORD *)v2 + 4);
      if (!v4)
        break;
      v2 = *(WebCore::RenderObject **)(v4 + 8);
      result = v2 != 0;
      if (v2 == a2 || v2 == 0)
        return result;
    }
    return 0;
  }
  return result;
}

uint64_t WebCore::RenderObject::firstNonAnonymousAncestor(WebCore::RenderObject *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v1 = *((_QWORD *)this + 4);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  result = 0;
  while ((*(_BYTE *)(v2 + 45) & 1) != 0)
  {
    v4 = *(_QWORD *)(v2 + 32);
    if (!v4)
      return 0;
    v2 = *(_QWORD *)(v4 + 8);
    if (!v2)
      return result;
  }
  return v2;
}

BOOL WebCore::RenderObject::isLegend(WebCore::RenderObject *this)
{
  uint64_t v1;

  return (*((_BYTE *)this + 45) & 1) == 0
      && (v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 8)) != 0
      && (*(_WORD *)(v1 + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(v1 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::legendTag + 24);
}

BOOL WebCore::RenderObject::isFieldset(WebCore::RenderObject *this)
{
  uint64_t v1;

  return (*((_BYTE *)this + 45) & 1) == 0
      && (v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 8)) != 0
      && (*(_WORD *)(v1 + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(v1 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::fieldsetTag + 24);
}

BOOL WebCore::RenderObject::isHTMLMarquee(WebCore::RenderObject *this)
{
  uint64_t v1;

  return (*((_BYTE *)this + 45) & 1) == 0
      && (v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 8)) != 0
      && (WebCore::RenderObject *)(*(_QWORD *)(v1 + 64) & 0xFFFFFFFFFFFFLL) == this
      && (*(_WORD *)(v1 + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(v1 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::marqueeTag + 24);
}

uint64_t WebCore::RenderObject::setFragmentedFlowStateIncludingDescendants(uint64_t result, uint64_t a2, char a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;

  if ((_DWORD)a2)
    v3 = 0x10000000;
  else
    v3 = 0;
  *(_DWORD *)(result + 20) = *(_DWORD *)(result + 20) & 0xEFFFFFFF | v3;
  if (result)
  {
    if ((*(_BYTE *)(result + 45) & 2) == 0)
    {
      v4 = *(unsigned int *)(result + 64);
      if (v4 | ((unint64_t)*(unsigned __int8 *)(result + 68) << 32))
      {
        v5 = *(_QWORD *)((v4 | ((unint64_t)*(unsigned __int8 *)(result + 68) << 32)) + 8);
        if (v5)
        {
          if ((a3 & 1) != 0)
          {
            while (1)
            {
              ++*(_DWORD *)(v5 + 16);
              if (((*(_BYTE *)(v5 + 52) & 7) != 1 || (*(_BYTE *)(v5 + 53) & 2) == 0)
                && ((*(_DWORD *)(v5 + 20) & 0x1800000) != 0x1000000
                 || (result = (uint64_t)WebCore::RenderObject::containingBlock((WebCore::RenderObject *)v5)) != 0
                 && (*(_BYTE *)(result + 23) & 0x10) != 0))
              {
                result = WebCore::RenderObject::setFragmentedFlowStateIncludingDescendants(v5, a2, 1);
              }
              v7 = *(_DWORD *)(v5 + 16);
              if (!v7)
                break;
              *(_DWORD *)(v5 + 16) = v7 - 1;
              v8 = *(unsigned int *)(v5 + 47);
              if (v8 | ((unint64_t)*(unsigned __int8 *)(v5 + 51) << 32))
              {
                v5 = *(_QWORD *)((v8 | ((unint64_t)*(unsigned __int8 *)(v5 + 51) << 32)) + 8);
                if (v5)
                  continue;
              }
              return result;
            }
          }
          else
          {
            while (1)
            {
              v9 = *(_DWORD *)(v5 + 20);
              ++*(_DWORD *)(v5 + 16);
              if ((v9 & 0x1800000) != 0x1000000
                || (result = (uint64_t)WebCore::RenderObject::containingBlock((WebCore::RenderObject *)v5)) != 0
                && (*(_BYTE *)(result + 23) & 0x10) != 0)
              {
                result = WebCore::RenderObject::setFragmentedFlowStateIncludingDescendants(v5, a2, 0);
              }
              v10 = *(_DWORD *)(v5 + 16);
              if (!v10)
                break;
              *(_DWORD *)(v5 + 16) = v10 - 1;
              v11 = *(unsigned int *)(v5 + 47);
              if (v11 | ((unint64_t)*(unsigned __int8 *)(v5 + 51) << 32))
              {
                v5 = *(_QWORD *)((v11 | ((unint64_t)*(unsigned __int8 *)(v5 + 51) << 32)) + 8);
                if (v5)
                  continue;
              }
              return result;
            }
          }
          result = 286;
          __break(0xC471u);
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::RenderObject::computedFragmentedFlowState(WebCore::RenderObject *this, const WebCore::RenderObject *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  char v6;
  int v7;
  BOOL v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  int v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  BOOL canContainFixedPositionObjects;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  int isAtomicInlineLevelBox;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41[3];
  WebCore::RenderObject *v42;
  _BYTE *v43;
  uint64_t v44;

  v3 = *((_QWORD *)this + 4);
  if (!v3 || (v4 = *(_QWORD *)(v3 + 8)) == 0)
  {
LABEL_92:
    v16 = *((unsigned __int8 *)this + 23);
    return (v16 >> 4) & 1;
  }
  v5 = *((unsigned __int8 *)this + 46);
  if (v5 == 25)
    return 1;
  v6 = *((_BYTE *)this + 45);
  if ((v6 & 2) != 0)
  {
    v16 = *(unsigned __int8 *)(v4 + 23);
    return (v16 >> 4) & 1;
  }
  v7 = *((_BYTE *)this + 52) & 7;
  v8 = v7 != 1 || (*((_BYTE *)this + 53) & 8) == 0;
  if (!v8
    || ((v5 - 71) <= 0xF ? (v9 = ((1 << (v5 - 71)) & 0xA001) == 0) : (v9 = 1),
        !v9 || v7 == 4 && (*((_BYTE *)this + 53) & 1) != 0))
  {
    v4 = WebCore::lineageOfType<WebCore::LegacyRenderSVGRoot>((uint64_t)this);
    if (!v4)
      return 0;
    v10 = *(_DWORD *)(v4 + 16);
    *(_DWORD *)(v4 + 16) = v10 + 1;
    if (v10 == -1)
    {
      __break(0xC471u);
      JUMPOUT(0x196424FA4);
    }
    goto LABEL_16;
  }
  v44 = 0;
  v43 = 0;
  if (v5 != 17)
  {
    v41[0] = &v43;
    v41[1] = &v44;
    v41[2] = &v42;
    v42 = this;
    if ((v6 & 1) == 0)
    {
      v13 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
      if (v13)
      {
        if ((*(_WORD *)(v13 + 28) & 8) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x196424FC4);
        }
        if ((*(_BYTE *)(v13 + 23) & 0x20) != 0)
          goto LABEL_96;
      }
    }
    v14 = *((_QWORD *)this + 12);
    if ((v14 & 0xF80000000000) == 0x480000000000)
    {
LABEL_96:
      WebCore::containerForElement(WebCore::RenderObject const&,WebCore::RenderLayerModelObject const*,BOOL *)::{lambda(void)#1}::operator()(v41);
      v32 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v42 + 3) + 8) + 40) + 8) + 1944);
    }
    else
    {
      v15 = (v14 >> 19) & 7;
      if (v15 <= 3 && v15 != 2)
        goto LABEL_28;
      v40 = v4;
      ++*(_DWORD *)(v4 + 16);
      if (v15 == 2)
      {
        do
        {
          v17 = *(unsigned __int8 *)(v4 + 46);
          if (v17 == 49
            || (*(_BYTE *)(v4 + 98) & 0x38) != 0
            || ((*(_BYTE *)(v4 + 45) & 0x40) != 0 || (v17 - 36) <= 4 && v17 != 38)
            && (*(_BYTE *)(v4 + 22) & 2) != 0)
          {
            break;
          }
          v18 = *(_QWORD *)(*(_QWORD *)(v4 + 88) + 40);
          if (*(_DWORD *)(*(_QWORD *)(v18 + 72) + 20))
          {
            if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8) + 40) + 8) + 1272) != *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8))
              break;
          }
          if ((*(_BYTE *)(v4 + 45) & 0x40) != 0 && *(_QWORD *)(v18 + 200))
          {
            v35 = v4;
            if ((WebCore::WillChangeData::createsContainingBlockForAbsolutelyPositioned(*(WebCore::WillChangeData **)(v18 + 200), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8) + 40) + 8) + 1272) == *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8)) & 1) != 0)break;
            v4 = v35;
            v17 = *(unsigned __int8 *)(v35 + 46);
          }
          if (v17 == 67 || v17 == 90)
            break;
          v19 = *(_QWORD *)(*(_QWORD *)(v4 + 88) + 40);
          v20 = *(_BYTE *)(v19 + 462);
          v21 = *(_BYTE *)(v19 + 642) & 3;
          v22 = v20 | 0x19;
          if (v21 == 1)
            v20 |= 0x15u;
          v23 = v21 == 2 ? v22 : v20;
          if ((v23 & 3) != 0)
          {
            if ((*(_BYTE *)(v4 + 20) & 1) != 0
              || (v38 = v4,
                  isAtomicInlineLevelBox = WebCore::RenderObject::isAtomicInlineLevelBox((WebCore::RenderObject *)v4),
                  v4 = v38,
                  isAtomicInlineLevelBox))
            {
              if ((*(_QWORD *)(v4 + 96) & 0x1FLL) != 0x19
                && (*(unsigned __int8 *)(v4 + 46) - 36 > 4 || (*(_BYTE *)(v4 + 52) & 7) == 1))
              {
                break;
              }
            }
          }
          if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 88) + 40) + 636) & 0xC0000) != 0)
          {
            if ((*(_BYTE *)(v4 + 20) & 1) != 0
              || (v39 = v4,
                  v37 = WebCore::RenderObject::isAtomicInlineLevelBox((WebCore::RenderObject *)v4),
                  v4 = v39,
                  v37))
            {
              if ((*(_QWORD *)(v4 + 96) & 0x1FLL) != 0x19)
              {
                v33 = *(unsigned __int8 *)(v4 + 46);
                if ((v33 - 36) <= 4)
                {
                  if (v33 == 36)
                    break;
                }
                else if (v33 != 63 && v33 != 35)
                {
                  break;
                }
              }
            }
          }
          v24 = v40;
          if (v43 && v40 == v44)
            *v43 = 1;
          v25 = *(_QWORD *)(v24 + 32);
          if (v25)
          {
            v4 = *(_QWORD *)(v25 + 8);
            if (v4)
              ++*(_DWORD *)(v4 + 16);
          }
          else
          {
            v4 = 0;
          }
          v40 = v4;
          v26 = *(_DWORD *)(v24 + 16);
          if (!v26)
          {
            __break(0xC471u);
            JUMPOUT(0x196425064);
          }
          *(_DWORD *)(v24 + 16) = v26 - 1;
        }
        while (v4);
        v28 = v40;
      }
      else
      {
        while (1)
        {
          canContainFixedPositionObjects = WebCore::RenderElement::canContainFixedPositionObjects((WebCore::RenderElement *)v4);
          v28 = v40;
          if (canContainFixedPositionObjects)
            break;
          if ((*(_BYTE *)(v40 + 45) & 1) == 0)
          {
            v29 = *(_QWORD *)(*(_QWORD *)(v40 + 24) + 8);
            if (v29)
            {
              if ((*(_WORD *)(v29 + 28) & 8) == 0)
              {
                __break(0xC471u);
                JUMPOUT(0x196425134);
              }
              if ((*(_BYTE *)(v29 + 23) & 0x20) != 0)
                goto LABEL_95;
            }
          }
          if ((*(_QWORD *)(v40 + 96) & 0xF80000000000) == 0x480000000000)
          {
LABEL_95:
            WebCore::containerForElement(WebCore::RenderObject const&,WebCore::RenderLayerModelObject const*,BOOL *)::{lambda(void)#1}::operator()(v41);
            v32 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v42 + 3) + 8) + 40) + 8) + 1944);
            v28 = v40;
            goto LABEL_88;
          }
          if (v43 && v40 == v44)
            *v43 = 1;
          v30 = *(_QWORD *)(v28 + 32);
          if (v30)
            v31 = *(_QWORD *)(v30 + 8);
          else
            v31 = 0;
          WTF::CheckedPtr<WebCore::RenderElement,WTF::RawPtrTraits<WebCore::RenderElement>>::operator=((uint64_t)&v40, v31);
          v32 = 0;
          v4 = v40;
          if (!v40)
            goto LABEL_91;
        }
      }
      v32 = v28;
LABEL_88:
      if (v28)
      {
        v34 = *(_DWORD *)(v28 + 16);
        if (!v34)
        {
          __break(0xC471u);
          JUMPOUT(0x196425114);
        }
        *(_DWORD *)(v28 + 16) = v34 - 1;
      }
    }
LABEL_91:
    v4 = v32;
    if (v32)
      goto LABEL_28;
    goto LABEL_92;
  }
LABEL_28:
  v10 = *(_DWORD *)(v4 + 16);
  *(_DWORD *)(v4 + 16) = v10 + 1;
  if (v10 == -1)
  {
    __break(0xC471u);
    JUMPOUT(0x196424E40);
  }
LABEL_16:
  v11 = (*(_DWORD *)(v4 + 20) >> 28) & 1;
  *(_DWORD *)(v4 + 16) = v10;
  return v11;
}

uint64_t WebCore::RenderObject::setParent(WebCore::RenderObject *this, WebCore::RenderElement *a2)
{
  WebCore::RenderObject *v2;
  uint64_t result;
  WTF *v4;
  WTF *v5;

  v2 = this;
  if (!a2)
  {
    result = 0;
    goto LABEL_3;
  }
  result = *((_QWORD *)a2 + 1);
  if (!result)
  {
    result = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)result = 1;
    *(_QWORD *)(result + 8) = a2;
    v5 = (WTF *)*((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = result;
    if (v5)
    {
      if (*(_DWORD *)v5 == 1)
      {
        WTF::fastFree(v5, a2);
        result = *((_QWORD *)a2 + 1);
        if (!result)
          goto LABEL_10;
      }
      else
      {
        --*(_DWORD *)v5;
      }
    }
  }
  ++*(_DWORD *)result;
LABEL_10:
  v2 = this;
LABEL_3:
  v4 = (WTF *)*((_QWORD *)v2 + 4);
  *((_QWORD *)v2 + 4) = result;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      return WTF::fastFree(v4, a2);
    else
      --*(_DWORD *)v4;
  }
  return result;
}

uint64_t WebCore::RenderObject::nextInPreOrder(WebCore::RenderObject *this, const WebCore::RenderObject *a2)
{
  WebCore::RenderObject *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v3 = this;
  result = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)this + 112))(this);
  if (!result)
  {
    if (v3 == a2)
    {
      return 0;
    }
    else
    {
      do
      {
        v5 = *(unsigned int *)((char *)v3 + 47);
        if (v5 | ((unint64_t)*((unsigned __int8 *)v3 + 51) << 32))
        {
          result = *(_QWORD *)((v5 | ((unint64_t)*((unsigned __int8 *)v3 + 51) << 32)) + 8);
          if (result)
            break;
        }
        v6 = *((_QWORD *)v3 + 4);
        if (!v6)
          return 0;
        result = 0;
        v3 = *(WebCore::RenderObject **)(v6 + 8);
      }
      while (v3 && v3 != a2);
    }
  }
  return result;
}

uint64_t WebCore::RenderObject::nextInPreOrderAfterChildren(WebCore::RenderObject *this, const WebCore::RenderObject *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;

  if (this == a2)
    return 0;
  while (1)
  {
    v2 = *(unsigned int *)((char *)this + 47);
    if (v2 | ((unint64_t)*((unsigned __int8 *)this + 51) << 32))
    {
      v3 = *(_QWORD *)((v2 | ((unint64_t)*((unsigned __int8 *)this + 51) << 32)) + 8);
      if (v3)
        break;
    }
    v3 = *((_QWORD *)this + 4);
    if (!v3)
      break;
    this = *(WebCore::RenderObject **)(v3 + 8);
    if (this)
      v4 = this == a2;
    else
      v4 = 1;
    if (v4)
      return 0;
  }
  return v3;
}

uint64_t WebCore::RenderObject::childAt(WebCore::RenderObject *this, unsigned int a2)
{
  uint64_t result;
  unsigned int i;
  uint64_t v5;
  BOOL v6;

  result = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)this + 112))(this);
  if (a2 && result)
  {
    for (i = 1; ; ++i)
    {
      v5 = *(unsigned int *)(result + 47);
      if (!(v5 | ((unint64_t)*(unsigned __int8 *)(result + 51) << 32)))
        break;
      result = *(_QWORD *)((v5 | ((unint64_t)*(unsigned __int8 *)(result + 51) << 32)) + 8);
      if (result)
        v6 = i >= a2;
      else
        v6 = 1;
      if (v6)
        return result;
    }
    return 0;
  }
  return result;
}

uint64_t WebCore::RenderObject::enclosingLayer(WebCore::RenderObject *this)
{
  uint64_t v1;
  uint64_t v2;

  if ((*((_BYTE *)this + 45) & 0x10) == 0)
  {
    v1 = *((_QWORD *)this + 4);
    if (!v1)
      return v1;
    this = *(WebCore::RenderObject **)(v1 + 8);
    if (!this)
      return 0;
    while ((*((_BYTE *)this + 45) & 0x10) == 0)
    {
      v2 = *((_QWORD *)this + 4);
      if (!v2)
        return 0;
      v1 = 0;
      this = *(WebCore::RenderObject **)(v2 + 8);
      if (!this)
        return v1;
    }
  }
LABEL_11:
  if ((*((_BYTE *)this + 21) & 0x80) != 0)
    return *((_QWORD *)this + 18);
  while (1)
  {
    v1 = *((_QWORD *)this + 4);
    if (!v1)
      return v1;
    this = *(WebCore::RenderObject **)(v1 + 8);
    if (!this)
      return 0;
    if ((*((_BYTE *)this + 45) & 0x10) != 0)
      goto LABEL_11;
  }
}

uint64_t WebCore::RenderObject::enclosingBox(uint64_t this)
{
  uint64_t v1;

  while ((*(_BYTE *)(this + 45) & 4) == 0)
  {
    v1 = *(_QWORD *)(this + 32);
    if (!v1)
      return 0;
    this = *(_QWORD *)(v1 + 8);
    if (!this)
      return this;
  }
  return this;
}

uint64_t WebCore::RenderObject::enclosingBoxModelObject(uint64_t this)
{
  uint64_t v1;

  while ((*(_BYTE *)(this + 45) & 8) == 0)
  {
    v1 = *(_QWORD *)(this + 32);
    if (!v1)
      return 0;
    this = *(_QWORD *)(v1 + 8);
    if (!this)
      return this;
  }
  return this;
}

uint64_t WebCore::RenderObject::enclosingScrollableContainerForSnapping(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = this;
  while (1)
  {
    this = WebCore::RenderObject::container((WebCore::RenderObject *)this);
    if (!this || *(_BYTE *)(this + 46) == 49)
      break;
    if ((*(_BYTE *)(this + 22) & 1) != 0)
    {
      v2 = (*(_BYTE *)(this + 45) & 2) != 0
         ? *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 32) + 8) + 96)
         : *(_QWORD *)(this + 96);
      v3 = v2 & 0x1C00;
      if (v3 != 2048)
      {
        if (v3)
        {
          if ((*(_BYTE *)(this + 45) & 4) == 0)
          {
            this = 105;
            __break(0xC471u);
          }
          return this;
        }
      }
    }
  }
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 24) + 8) + 40) + 8) + 1272);
  if (!v4)
    return 0;
  v5 = *(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL;
  if (!v5)
    return 0;
  if ((*(_BYTE *)(v5 + 45) & 4) != 0)
    return v5;
  return 0;
}

uint64_t WebCore::RenderObject::clearNeedsLayout(uint64_t result, int a2)
{
  int v2;
  unsigned int v3;

  if (a2 == 1)
    v2 = 2097664;
  else
    v2 = 512;
  v3 = *(_DWORD *)(result + 20) & 0xFFDFFFFF | v2;
  *(_DWORD *)(result + 20) = v3;
  if (result && (*(_BYTE *)(result + 45) & 2) == 0)
  {
    *(_WORD *)(result + 69) &= ~1u;
    *(_WORD *)(result + 76) = *(_WORD *)(result + 76) & 0xF | (16
                                                             * *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 8) + 40) + 8)
                                                                                                + 1944)
                                                                                    + 248)
                                                                        + 472));
  }
  *(_DWORD *)(result + 20) = v3 & 0xFFFFFE07;
  return result;
}

void WebCore::RenderObject::scheduleLayout(WebCore::RenderObject *this, WebCore::RenderElement *a2)
{
  WebCore::RenderElement *v2;
  WebCore::RenderElement *v3;
  uint64_t v4;
  _DWORD *v6;
  int v7;

  if (!a2)
    return;
  if (*((_BYTE *)a2 + 46) == 49)
  {
    v6 = (_DWORD *)*((_QWORD *)a2 + 31);
    ++v6[2];
    ++v6[84];
    WebCore::LocalFrameViewLayoutContext::scheduleLayout((WebCore::LocalFrameViewLayoutContext *)(v6 + 84));
    v7 = v6[84];
    if (v7)
    {
LABEL_14:
      v6[84] = v7 - 1;
      if (v6[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
      else
        --v6[2];
      return;
    }
LABEL_19:
    __break(0xC471u);
    JUMPOUT(0x19642572CLL);
  }
  v2 = *(WebCore::RenderElement **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 40) + 8)
                                  + 1944);
  if (v2 == a2)
    goto LABEL_13;
  v3 = a2;
  do
  {
    v4 = *((_QWORD *)v3 + 4);
    if (!v4)
      return;
    v3 = *(WebCore::RenderElement **)(v4 + 8);
  }
  while (v3 != v2 && v3 != 0);
  if (v3)
  {
LABEL_13:
    v6 = (_DWORD *)*((_QWORD *)v2 + 31);
    ++v6[2];
    ++v6[84];
    WebCore::LocalFrameViewLayoutContext::scheduleSubtreeLayout((WebCore::RenderObject *)(v6 + 84), (WTF::MonotonicTime **)a2);
    v7 = v6[84];
    if (v7)
      goto LABEL_14;
    goto LABEL_19;
  }
}

WebCore::RenderObject *WebCore::RenderObject::markContainingBlocksForLayout(WebCore::RenderObject *this, WebCore::RenderElement *a2)
{
  WebCore::RenderObject *v2;
  int v3;
  char v5;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v11;
  WebCore::RenderObject *v12;
  BOOL v13;
  BOOL v14;
  WebCore::RenderObject *v15;
  WebCore::RenderObject *v16;
  char v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  char v24;
  int v25;
  int v26;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  WebCore::WillChangeData *v32;
  uint64_t v33;
  char v34;
  int v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  BOOL v44;
  uint64_t v45;
  BOOL v46;
  BOOL v47;
  int v48;
  WebCore::RenderObject *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  BOOL v54;
  int v55;
  BOOL v56;
  BOOL v57;
  int v58;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  WebCore::WillChangeData *v64;
  uint64_t v65;
  char v66;
  int v67;
  char v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  int v75;
  uint64_t v76;
  uint64_t v77;
  int v79;
  uint64_t v80;
  uint64_t v81;
  BOOL v82;
  BOOL canContainFixedPositionObjects;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  BOOL v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  int v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  int isAtomicInlineLevelBox;
  uint64_t v99;
  int v100;
  WebCore::RenderObject *v101;
  uint64_t v102;
  WebCore::RenderObject *v103;
  uint64_t *v104;
  WebCore::RenderObject **v105;
  WebCore::RenderObject *v106;
  _BYTE *v107;
  uint64_t v108;

  v2 = this;
  v3 = *((unsigned __int8 *)this + 46);
  if (v3 != 49)
  {
    v107 = 0;
    v108 = 0;
    v5 = *((_BYTE *)this + 45);
    if (v3 == 17 || (v5 & 2) != 0)
    {
      v11 = *((_QWORD *)this + 4);
      if (!v11)
      {
        v12 = 0;
        v101 = 0;
LABEL_20:
        v13 = (*((_DWORD *)v2 + 5) & 0xA8) == 128;
        v14 = (*((_DWORD *)v2 + 5) & 0x1800000) == 0x1000000;
        v15 = v12;
        v16 = v12;
        while (1)
        {
          if (!v16)
            return 0;
          v107 = 0;
          v108 = 0;
          v17 = *((_BYTE *)v16 + 45);
          v18 = *((unsigned __int8 *)v16 + 46);
          if ((v17 & 2) != 0 || v18 == 17)
          {
            v51 = *((_QWORD *)v16 + 4);
            if (!v51)
            {
              v103 = 0;
LABEL_223:
              if (v18 != 49)
              {
                v2 = 0;
                v24 = 0;
                goto LABEL_40;
              }
              goto LABEL_35;
            }
            v22 = *(_QWORD *)(v51 + 8);
          }
          else
          {
            v105 = &v106;
            v106 = v16;
            v103 = (WebCore::RenderObject *)&v107;
            v104 = &v108;
            if ((v17 & 1) == 0)
            {
              v19 = *(_QWORD *)(*((_QWORD *)v16 + 3) + 8);
              if (v19)
              {
                if ((*(_WORD *)(v19 + 28) & 8) == 0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x196425F84);
                }
                if ((*(_BYTE *)(v19 + 23) & 0x20) != 0)
                  goto LABEL_304;
              }
            }
            v20 = *((_QWORD *)v16 + 12);
            if ((v20 & 0xF80000000000) == 0x480000000000)
            {
LABEL_304:
              WebCore::containerForElement(WebCore::RenderObject const&,WebCore::RenderLayerModelObject const*,BOOL *)::{lambda(void)#1}::operator()((_QWORD **)&v103);
              v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v106 + 3) + 8) + 40) + 8) + 1944);
              goto LABEL_33;
            }
            v21 = (v20 >> 19) & 7;
            if (v21 > 3 || v21 == 2)
            {
              v28 = *((_QWORD *)v16 + 4);
              if (v28)
              {
                v29 = *(_QWORD *)(v28 + 8);
                v102 = v29;
                if (v29)
                  ++*(_DWORD *)(v29 + 16);
              }
              else
              {
                v29 = 0;
                v102 = 0;
              }
              if (v21 == 2)
              {
                if (!v29)
                  goto LABEL_306;
                do
                {
                  v30 = *(unsigned __int8 *)(v29 + 46);
                  if (v30 == 49
                    || (*(_BYTE *)(v29 + 98) & 0x38) != 0
                    || ((*(_BYTE *)(v29 + 45) & 0x40) != 0 || (v30 - 36) <= 4 && v30 != 38)
                    && (*(_BYTE *)(v29 + 22) & 2) != 0)
                  {
                    break;
                  }
                  v31 = *(_QWORD *)(*(_QWORD *)(v29 + 88) + 40);
                  if (*(_DWORD *)(*(_QWORD *)(v31 + 72) + 20))
                  {
                    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v29 + 24) + 8) + 40) + 8)
                                   + 1272) != *(_QWORD *)(*(_QWORD *)(v29 + 24) + 8))
                      break;
                  }
                  if ((*(_BYTE *)(v29 + 45) & 0x40) != 0)
                  {
                    v32 = *(WebCore::WillChangeData **)(v31 + 200);
                    if (v32)
                    {
                      if ((WebCore::WillChangeData::createsContainingBlockForAbsolutelyPositioned(v32, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v29 + 24) + 8) + 40) + 8)+ 1272) == *(_QWORD *)(*(_QWORD *)(v29 + 24) + 8)) & 1) != 0)break;
                      v30 = *(unsigned __int8 *)(v29 + 46);
                    }
                  }
                  if (v30 == 67 || v30 == 90)
                    break;
                  v33 = *(_QWORD *)(*(_QWORD *)(v29 + 88) + 40);
                  v34 = *(_BYTE *)(v33 + 462);
                  v35 = *(_BYTE *)(v33 + 642) & 3;
                  v36 = v34 | 0x19;
                  if (v35 == 1)
                    v34 |= 0x15u;
                  v37 = v35 == 2 ? v36 : v34;
                  if ((v37 & 3) != 0
                    && ((*(_BYTE *)(v29 + 20) & 1) != 0
                     || WebCore::RenderObject::isAtomicInlineLevelBox((WebCore::RenderObject *)v29))
                    && (*(_QWORD *)(v29 + 96) & 0x1FLL) != 0x19
                    && (*(unsigned __int8 *)(v29 + 46) - 36 > 4 || (*(_BYTE *)(v29 + 52) & 7) == 1))
                  {
                    break;
                  }
                  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v29 + 88) + 40) + 636) & 0xC0000) != 0
                    && ((*(_BYTE *)(v29 + 20) & 1) != 0
                     || WebCore::RenderObject::isAtomicInlineLevelBox((WebCore::RenderObject *)v29))
                    && (*(_QWORD *)(v29 + 96) & 0x1FLL) != 0x19)
                  {
                    v92 = *(unsigned __int8 *)(v29 + 46);
                    if ((v92 - 36) <= 4)
                    {
                      if (v92 == 36)
                        break;
                    }
                    else if (v92 != 63 && v92 != 35)
                    {
                      break;
                    }
                  }
                  v38 = v102;
                  if (v107 && v102 == v108)
                    *v107 = 1;
                  v39 = *(_QWORD *)(v38 + 32);
                  if (v39)
                  {
                    v29 = *(_QWORD *)(v39 + 8);
                    if (v29)
                      ++*(_DWORD *)(v29 + 16);
                  }
                  else
                  {
                    v29 = 0;
                  }
                  v102 = v29;
                  v40 = *(_DWORD *)(v38 + 16);
                  if (!v40)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1964260BCLL);
                  }
                  *(_DWORD *)(v38 + 16) = v40 - 1;
                }
                while (v29);
                v41 = v102;
                v22 = v102;
              }
              else
              {
                if (!v29)
                {
LABEL_306:
                  v22 = 0;
                  goto LABEL_33;
                }
                while (1)
                {
                  canContainFixedPositionObjects = WebCore::RenderElement::canContainFixedPositionObjects((WebCore::RenderElement *)v29);
                  v41 = v102;
                  if (canContainFixedPositionObjects)
                    break;
                  if ((*(_BYTE *)(v102 + 45) & 1) == 0)
                  {
                    v84 = *(_QWORD *)(*(_QWORD *)(v102 + 24) + 8);
                    if (v84)
                    {
                      if ((*(_WORD *)(v84 + 28) & 8) == 0)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x1964262D8);
                      }
                      if ((*(_BYTE *)(v84 + 23) & 0x20) != 0)
                        goto LABEL_303;
                    }
                  }
                  if ((*(_QWORD *)(v102 + 96) & 0xF80000000000) == 0x480000000000)
                  {
LABEL_303:
                    WebCore::containerForElement(WebCore::RenderObject const&,WebCore::RenderLayerModelObject const*,BOOL *)::{lambda(void)#1}::operator()((_QWORD **)&v103);
                    v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v106 + 3) + 8) + 40) + 8)
                                    + 1944);
                    v41 = v102;
                    goto LABEL_83;
                  }
                  if (v107 && v102 == v108)
                    *v107 = 1;
                  v85 = *(_QWORD *)(v41 + 32);
                  if (v85)
                    v86 = *(_QWORD *)(v85 + 8);
                  else
                    v86 = 0;
                  WTF::CheckedPtr<WebCore::RenderElement,WTF::RawPtrTraits<WebCore::RenderElement>>::operator=((uint64_t)&v102, v86);
                  v22 = 0;
                  v29 = v102;
                  if (!v102)
                    goto LABEL_33;
                }
                v22 = v102;
              }
LABEL_83:
              if (v41)
              {
                v42 = *(_DWORD *)(v41 + 16);
                if (!v42)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1964260DCLL);
                }
                *(_DWORD *)(v41 + 16) = v42 - 1;
              }
            }
            else
            {
              v22 = *((_QWORD *)v16 + 4);
              if (v22)
                v22 = *(_QWORD *)(v22 + 8);
            }
          }
LABEL_33:
          v103 = (WebCore::RenderObject *)v22;
          if (!v22)
          {
            v12 = v101;
            v18 = *((unsigned __int8 *)v101 + 46);
            v15 = v101;
            v16 = v101;
            goto LABEL_223;
          }
          ++*(_DWORD *)(v22 + 16);
          v12 = v101;
LABEL_35:
          if (!v14)
          {
            v23 = *((_DWORD *)v12 + 5);
            if (v13)
            {
              if ((v23 & 0x80) == 0)
              {
                v43 = v23 | 0x80;
                goto LABEL_110;
              }
              v2 = 0;
              v14 = 0;
              v24 = 0;
              v13 = 1;
            }
            else
            {
              if ((v23 & 0x20) == 0)
              {
                v13 = 0;
                v43 = v23 | 0x20;
                *((_DWORD *)v12 + 5) = v43;
                goto LABEL_87;
              }
              v2 = 0;
              v13 = 0;
              v14 = 0;
              v24 = 0;
            }
LABEL_39:
            v15 = v12;
            v16 = v12;
            goto LABEL_40;
          }
          if ((*((_BYTE *)v12 + 45) & 0x40) != 0)
          {
            if ((*((_BYTE *)v12 + 45) & 1) != 0)
            {
              v77 = (*((_BYTE *)v12 + 45) & 2) != 0
                  ? *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v12 + 4) + 8) + 96)
                  : *((_QWORD *)v12 + 12);
              if ((v77 & 0x1F) == 1 || (v77 & 0x1F) == 14)
              {
                if ((v77 & 0xF80000000000) != 0
                  || ((*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)v12 + 176))(v12) & 1) != 0)
                {
                  v27 = 0;
                  goto LABEL_199;
                }
                v79 = *((unsigned __int8 *)v12 + 46);
                if (v79 != 20)
                {
                  if ((*((_BYTE *)v12 + 52) & 7) == 1)
                  {
                    v27 = 0;
                    if (v79 == 26 || (*((_BYTE *)v12 + 53) & 2) != 0)
                      goto LABEL_199;
LABEL_198:
                    v27 = v79 != 49;
                    goto LABEL_199;
                  }
                  if (v79 != 26)
                    goto LABEL_198;
                }
              }
            }
            v27 = 0;
            goto LABEL_199;
          }
          v27 = 1;
          while ((*((_BYTE *)v12 + 45) & 0x40) == 0)
          {
LABEL_184:
            v76 = WebCore::RenderObject::container(v101);
            WTF::CheckedPtr<WebCore::RenderElement,WTF::RawPtrTraits<WebCore::RenderElement>>::operator=((uint64_t)&v101, v76);
LABEL_199:
            v12 = v101;
            if (!v101)
              goto LABEL_200;
          }
          if ((*((_BYTE *)v12 + 45) & 1) != 0)
          {
            v73 = (*((_BYTE *)v12 + 45) & 2) != 0
                ? *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v12 + 4) + 8) + 96)
                : *((_QWORD *)v12 + 12);
            if (((v73 & 0x1F) == 1 || (v73 & 0x1F) == 14)
              && (v73 & 0xF80000000000) == 0
              && ((*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)v12 + 176))(v12) & 1) == 0)
            {
              v75 = *((unsigned __int8 *)v12 + 46);
              if (v75 != 20)
              {
                if ((*((_BYTE *)v12 + 52) & 7) == 1)
                {
                  if ((*((_BYTE *)v12 + 53) & 2) != 0 || v75 == 26 || v75 == 49)
                    goto LABEL_47;
                }
                else if (v75 == 49 || v75 == 26)
                {
                  goto LABEL_47;
                }
                goto LABEL_184;
              }
            }
          }
LABEL_47:
          v12 = v101;
          if (!v101)
          {
LABEL_200:
            v15 = 0;
            v16 = 0;
            v2 = 0;
            v24 = 0;
            v14 = 1;
            goto LABEL_40;
          }
          v26 = *((_DWORD *)v101 + 5);
          if ((v26 & 0x40) != 0)
          {
            v2 = 0;
            v24 = 0;
            v14 = 1;
            goto LABEL_39;
          }
          if (v27)
          {
            v93 = WebCore::RenderObject::container(v101);
            WTF::CheckedPtr<WebCore::RenderElement,WTF::RawPtrTraits<WebCore::RenderElement>>::operator=((uint64_t)&v103, v93);
            v12 = v101;
            v26 = *((_DWORD *)v101 + 5);
          }
          v43 = v26 | 0x40;
LABEL_110:
          *((_DWORD *)v12 + 5) = v43;
          v13 = 1;
LABEL_87:
          if (a2)
          {
            if (v12 != a2)
              goto LABEL_106;
            v24 = 0;
            v12 = a2;
            v15 = a2;
            v16 = a2;
            v2 = a2;
          }
          else
          {
            if (*((_BYTE *)v12 + 46) != 49)
            {
              v44 = (*((_BYTE *)v12 + 52) & 7) != 1 || (*((_BYTE *)v12 + 53) & 4) == 0;
              if (v44
                || (v80 = *((_QWORD *)v12 + 4)) != 0
                && (v81 = *(_QWORD *)(v80 + 8)) != 0
                && (*(char *)(v81 + 45) < 0 && (v43 & 0x400) == 0
                 || (*(_BYTE *)(v81 + 46) == 12 ? (v82 = (v43 & 0x400) == 0) : (v82 = 0), v82)))
              {
                v45 = *(_QWORD *)(*((_QWORD *)v12 + 11) + 40);
                v46 = (*(_BYTE *)(v45 + 642) & 3u) - 3 <= 0xFFFFFFFD && (*(_BYTE *)(v45 + 462) & 1) == 0;
                v47 = v46 && (*(_DWORD *)(v45 + 636) & 0xC0000) == 0;
                if (v47
                  || (v43 & 1) == 0 && !WebCore::RenderObject::isAtomicInlineLevelBox(v12)
                  || (*((_QWORD *)v12 + 12) & 0x1FLL) == 0x19
                  || *((unsigned __int8 *)v12 + 46) - 36 <= 4 && (*((_BYTE *)v12 + 52) & 7) != 1
                  || (WebCore::RenderElement::shouldApplySizeContainment(v12) & 1) == 0)
                {
                  v48 = *((unsigned __int8 *)v12 + 46);
                  if (v48 != 83 && v48 != 103)
                  {
                    if ((*((_BYTE *)v12 + 22) & 1) == 0
                      || (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v12 + 3) + 8) + 40)
                                                            + 8)
                                                + 680)
                                    + 680) & 0x800000000000) != 0
                      && WebCore::RenderObject::isSVGLayerAwareRenderer(v12)
                      || ((v52 = *(_QWORD *)(*((_QWORD *)v12 + 11) + 8),
                           v53 = *(unsigned __int8 *)(v52 + 8),
                           (v53 - 7) >= 4)
                        ? (v54 = v53 == 0)
                        : (v54 = 1),
                          v54
                       || (v53 - 5) < 2
                       || ((v55 = *(unsigned __int8 *)(v52 + 16), (v55 - 5) >= 7)
                         ? (v56 = v55 == 0)
                         : (v56 = 1),
                           !v56 ? (v57 = v55 == 3) : (v57 = 1),
                           v57 || *((unsigned __int8 *)v12 + 46) - 41 > 0xFFFFFFFA)))
                    {
LABEL_106:
                      v49 = v101;
                      v12 = v103;
                      v103 = 0;
                      v101 = v12;
                      v50 = *((_DWORD *)v49 + 4);
                      if (!v50)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x196426130);
                      }
                      v14 = (*((_DWORD *)v49 + 5) & 0x1800000) == 0x1000000;
                      *((_DWORD *)v49 + 4) = v50 - 1;
                      v24 = 1;
                      goto LABEL_39;
                    }
                  }
                }
              }
            }
            v24 = 0;
            v12 = v101;
            v15 = v101;
            v16 = v101;
            v2 = v101;
          }
LABEL_40:
          if (v103)
          {
            v25 = *((_DWORD *)v103 + 4);
            if (!v25)
            {
              __break(0xC471u);
              JUMPOUT(0x196425F64);
            }
            *((_DWORD *)v103 + 4) = v25 - 1;
          }
          if ((v24 & 1) == 0)
          {
            if (v15)
            {
              v58 = *((_DWORD *)v15 + 4);
              if (!v58)
              {
                __break(0xC471u);
                JUMPOUT(0x19642617CLL);
              }
              *((_DWORD *)v15 + 4) = v58 - 1;
            }
            return v2;
          }
        }
      }
      goto LABEL_17;
    }
    v103 = (WebCore::RenderObject *)&v107;
    v104 = &v108;
    v105 = &v106;
    v106 = this;
    if ((v5 & 1) == 0)
    {
      v7 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
      if (v7)
      {
        if ((*(_WORD *)(v7 + 28) & 8) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19642615CLL);
        }
        if ((*(_BYTE *)(v7 + 23) & 0x20) != 0)
          goto LABEL_324;
      }
    }
    v8 = *((_QWORD *)this + 12);
    if ((v8 & 0xF80000000000) == 0x480000000000)
    {
LABEL_324:
      WebCore::containerForElement(WebCore::RenderObject const&,WebCore::RenderLayerModelObject const*,BOOL *)::{lambda(void)#1}::operator()((_QWORD **)&v103);
      v12 = *(WebCore::RenderObject **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v106 + 3) + 8) + 40) + 8)
                                      + 1944);
LABEL_18:
      v101 = v12;
      if (v12)
        ++*((_DWORD *)v12 + 4);
      goto LABEL_20;
    }
    v9 = (v8 >> 19) & 7;
    if (v9 <= 3 && v9 != 2)
    {
      v11 = *((_QWORD *)this + 4);
      if (v11)
      {
LABEL_17:
        v12 = *(WebCore::RenderObject **)(v11 + 8);
        goto LABEL_18;
      }
      goto LABEL_268;
    }
    v60 = *((_QWORD *)this + 4);
    if (v60)
    {
      v61 = *(_QWORD *)(v60 + 8);
      v102 = v61;
      if (v61)
        ++*(_DWORD *)(v61 + 16);
    }
    else
    {
      v61 = 0;
      v102 = 0;
    }
    if (v9 == 2)
    {
      if (v61)
      {
        do
        {
          v62 = *(unsigned __int8 *)(v61 + 46);
          if (v62 == 49
            || (*(_BYTE *)(v61 + 98) & 0x38) != 0
            || ((*(_BYTE *)(v61 + 45) & 0x40) != 0 || (v62 - 36) <= 4 && v62 != 38)
            && (*(_BYTE *)(v61 + 22) & 2) != 0)
          {
            break;
          }
          v63 = *(_QWORD *)(*(_QWORD *)(v61 + 88) + 40);
          if (*(_DWORD *)(*(_QWORD *)(v63 + 72) + 20))
          {
            if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v61 + 24) + 8) + 40) + 8) + 1272) != *(_QWORD *)(*(_QWORD *)(v61 + 24) + 8))
              break;
          }
          if ((*(_BYTE *)(v61 + 45) & 0x40) != 0)
          {
            v64 = *(WebCore::WillChangeData **)(v63 + 200);
            if (v64)
            {
              v96 = v61;
              if ((WebCore::WillChangeData::createsContainingBlockForAbsolutelyPositioned(v64, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v61 + 24) + 8) + 40) + 8)+ 1272) == *(_QWORD *)(*(_QWORD *)(v61 + 24) + 8)) & 1) != 0)break;
              v61 = v96;
              v62 = *(unsigned __int8 *)(v96 + 46);
            }
          }
          if (v62 == 67 || v62 == 90)
            break;
          v65 = *(_QWORD *)(*(_QWORD *)(v61 + 88) + 40);
          v66 = *(_BYTE *)(v65 + 462);
          v67 = *(_BYTE *)(v65 + 642) & 3;
          v68 = v66 | 0x19;
          if (v67 == 1)
            v66 |= 0x15u;
          v69 = v67 == 2 ? v68 : v66;
          if ((v69 & 3) != 0)
          {
            if ((*(_BYTE *)(v61 + 20) & 1) != 0
              || (v97 = v61,
                  isAtomicInlineLevelBox = WebCore::RenderObject::isAtomicInlineLevelBox((WebCore::RenderObject *)v61),
                  v61 = v97,
                  isAtomicInlineLevelBox))
            {
              if ((*(_QWORD *)(v61 + 96) & 0x1FLL) != 0x19
                && (*(unsigned __int8 *)(v61 + 46) - 36 > 4 || (*(_BYTE *)(v61 + 52) & 7) == 1))
              {
                break;
              }
            }
          }
          if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v61 + 88) + 40) + 636) & 0xC0000) != 0)
          {
            if ((*(_BYTE *)(v61 + 20) & 1) != 0
              || (v99 = v61,
                  v100 = WebCore::RenderObject::isAtomicInlineLevelBox((WebCore::RenderObject *)v61),
                  v61 = v99,
                  v100))
            {
              if ((*(_QWORD *)(v61 + 96) & 0x1FLL) != 0x19)
              {
                v94 = *(unsigned __int8 *)(v61 + 46);
                if ((v94 - 36) <= 4)
                {
                  if (v94 == 36)
                    break;
                }
                else if (v94 != 63 && v94 != 35)
                {
                  break;
                }
              }
            }
          }
          v70 = v102;
          if (v107 && v102 == v108)
            *v107 = 1;
          v71 = *(_QWORD *)(v70 + 32);
          if (v71)
          {
            v61 = *(_QWORD *)(v71 + 8);
            if (v61)
              ++*(_DWORD *)(v61 + 16);
          }
          else
          {
            v61 = 0;
          }
          v102 = v61;
          v72 = *(_DWORD *)(v70 + 16);
          if (!v72)
          {
            __break(0xC471u);
            JUMPOUT(0x196426258);
          }
          *(_DWORD *)(v70 + 16) = v72 - 1;
        }
        while (v61);
        v88 = v102;
LABEL_290:
        v12 = (WebCore::RenderObject *)v88;
LABEL_291:
        if (v88)
        {
          v95 = *(_DWORD *)(v88 + 16);
          if (!v95)
          {
            __break(0xC471u);
            JUMPOUT(0x1964263B8);
          }
          *(_DWORD *)(v88 + 16) = v95 - 1;
        }
        goto LABEL_18;
      }
    }
    else if (v61)
    {
      while (1)
      {
        v87 = WebCore::RenderElement::canContainFixedPositionObjects((WebCore::RenderElement *)v61);
        v88 = v102;
        if (v87)
          goto LABEL_290;
        if ((*(_BYTE *)(v102 + 45) & 1) == 0)
        {
          v89 = *(_QWORD *)(*(_QWORD *)(v102 + 24) + 8);
          if (v89)
          {
            if ((*(_WORD *)(v89 + 28) & 8) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x1964264ACLL);
            }
            if ((*(_BYTE *)(v89 + 23) & 0x20) != 0)
              break;
          }
        }
        if ((*(_QWORD *)(v102 + 96) & 0xF80000000000) == 0x480000000000)
          break;
        if (v107 && v102 == v108)
          *v107 = 1;
        v90 = *(_QWORD *)(v88 + 32);
        if (v90)
          v91 = *(_QWORD *)(v90 + 8);
        else
          v91 = 0;
        WTF::CheckedPtr<WebCore::RenderElement,WTF::RawPtrTraits<WebCore::RenderElement>>::operator=((uint64_t)&v102, v91);
        v12 = 0;
        v61 = v102;
        if (!v102)
          goto LABEL_18;
      }
      WebCore::containerForElement(WebCore::RenderObject const&,WebCore::RenderLayerModelObject const*,BOOL *)::{lambda(void)#1}::operator()((_QWORD **)&v103);
      v12 = *(WebCore::RenderObject **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v106 + 3) + 8) + 40) + 8)
                                      + 1944);
      v88 = v102;
      goto LABEL_291;
    }
LABEL_268:
    v12 = 0;
    goto LABEL_18;
  }
  if ((*((_BYTE *)this + 45) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196426238);
  }
  return v2;
}

uint64_t WebCore::RenderObject::setLayerNeedsFullRepaint(uint64_t this)
{
  uint64_t v1;
  int v2;

  if ((*(_BYTE *)(this + 45) & 0x10) == 0
    || ((v1 = *(_QWORD *)(this + 144)) == 0
      ? (v2 = MEMORY[8])
      : (v2 = *(_DWORD *)(v1 + 8) + 1, *(_DWORD *)(v1 + 8) = v2),
        *(_QWORD *)(v1 + 24) = *(_QWORD *)(v1 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000,
        !v2))
  {
    __break(0xC471u);
    JUMPOUT(0x196426750);
  }
  *(_DWORD *)(v1 + 8) = v2 - 1;
  return this;
}

_BYTE *WebCore::RenderObject::containingBlockForPositionType(int a1, uint64_t a2)
{
  _BYTE *result;
  uint64_t v4;
  uint64_t v5;
  WebCore::RenderElement *v6;
  BOOL canContainAbsolutelyPositionedObjects;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WebCore *v12;
  int v13;
  WebCore::RenderElement *v14;

  result = 0;
  switch(a1)
  {
    case 0:
    case 1:
    case 3:
      v4 = *(_QWORD *)(a2 + 32);
      if (v4)
      {
        while (1)
        {
          result = *(_BYTE **)(v4 + 8);
          if (!result || (result[20] & 3) != 0 && (result[45] & 0x40) != 0)
            break;
          v4 = *((_QWORD *)result + 4);
          if (!v4)
            goto LABEL_7;
        }
      }
      else
      {
LABEL_7:
        result = 0;
      }
      break;
    case 2:
      if ((*(_BYTE *)(a2 + 45) & 0x20) == 0)
        goto LABEL_9;
      v10 = a2;
      if ((*(_BYTE *)(a2 + 45) & 2) != 0)
        v10 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8);
      if ((*(_QWORD *)(v10 + 96) & 0x380000) == 0x80000)
      {
        v11 = *(_QWORD *)(a2 + 32);
        if (v11)
          v12 = *(WebCore **)(v11 + 8);
        else
          v12 = 0;
        result = WebCore::nearestNonAnonymousContainingBlockIncludingSelf(v12, (WebCore::RenderElement *)a2);
      }
      else
      {
LABEL_9:
        v5 = *(_QWORD *)(a2 + 32);
        if (v5)
        {
          v6 = *(WebCore::RenderElement **)(v5 + 8);
          v14 = v6;
          if (v6)
          {
            ++*((_DWORD *)v6 + 4);
            do
            {
              canContainAbsolutelyPositionedObjects = WebCore::RenderElement::canContainAbsolutelyPositionedObjects(v6);
              v6 = v14;
              if (canContainAbsolutelyPositionedObjects)
                break;
              v8 = *((_QWORD *)v14 + 4);
              v9 = v8 ? *(_QWORD *)(v8 + 8) : 0;
              WTF::CheckedPtr<WebCore::RenderElement,WTF::RawPtrTraits<WebCore::RenderElement>>::operator=((uint64_t)&v14, v9);
              v6 = v14;
            }
            while (v14);
          }
        }
        else
        {
          v6 = 0;
          v14 = 0;
        }
        result = WebCore::nearestNonAnonymousContainingBlockIncludingSelf(v6, (WebCore::RenderElement *)a2);
        if (v14)
        {
          v13 = *((_DWORD *)v14 + 4);
          if (!v13)
          {
            __break(0xC471u);
            JUMPOUT(0x1964268DCLL);
          }
          *((_DWORD *)v14 + 4) = v13 - 1;
        }
      }
      break;
    case 6:
      v14 = (WebCore::RenderElement *)a2;
      result = WebCore::RenderObject::containingBlockForPositionType(WebCore::PositionType,WebCore::RenderObject const&)::$_2::operator()((uint64_t)&v14);
      break;
    default:
      return result;
  }
  return result;
}

_BYTE *WebCore::RenderObject::containingBlockForPositionType(WebCore::PositionType,WebCore::RenderObject const&)::$_2::operator()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _BYTE *result;
  _BYTE *v8;
  uint64_t v9;
  int v11;
  int v12;

  v1 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  ++*(_DWORD *)(v2 + 16);
  while (!WebCore::RenderElement::canContainFixedPositionObjects((WebCore::RenderElement *)v2))
  {
    if ((*(_BYTE *)(v2 + 45) & 1) == 0)
    {
      v4 = *(_QWORD *)(*(_QWORD *)(v2 + 24) + 8);
      if (v4)
      {
        if ((*(_WORD *)(v4 + 28) & 8) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x196426AF4);
        }
        if ((*(_BYTE *)(v4 + 23) & 0x20) != 0)
          goto LABEL_41;
      }
    }
    if ((*(_QWORD *)(v2 + 96) & 0xF80000000000) == 0x480000000000)
    {
LABEL_41:
      result = *(_BYTE **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 24) + 8) + 40) + 8)
                         + 1944);
      goto LABEL_42;
    }
    v5 = *(_QWORD *)(v2 + 32);
    if (v5)
    {
      v5 = *(_QWORD *)(v5 + 8);
      if (v5)
        ++*(_DWORD *)(v5 + 16);
    }
    v6 = *(_DWORD *)(v2 + 16);
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x196426B14);
    }
    *(_DWORD *)(v2 + 16) = v6 - 1;
    v2 = v5;
    if (!v5)
      return 0;
  }
  v8 = (_BYTE *)v2;
  while (1)
  {
    if ((v8[45] & 0x40) == 0)
      goto LABEL_33;
    if ((v8[45] & 1) == 0)
      break;
    v9 = (v8[45] & 2) != 0 ? *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v8 + 4) + 8) + 96) : *((_QWORD *)v8 + 12);
    if ((v9 & 0x1F) != 1 && (v9 & 0x1F) != 14)
      break;
    if ((v9 & 0xF80000000000) != 0)
      break;
    if (((*(uint64_t (**)(_BYTE *))(*(_QWORD *)v8 + 176))(v8) & 1) != 0)
      break;
    v11 = v8[46];
    if (v11 == 20)
      break;
    if ((v8[52] & 7) == 1)
    {
      if ((v8[53] & 2) != 0 || v11 == 26 || v11 == 49)
        break;
    }
    else if (v11 == 49 || v11 == 26)
    {
      break;
    }
LABEL_33:
    v8 = (_BYTE *)WebCore::RenderObject::containingBlock((WebCore::RenderObject *)v8);
    result = 0;
    if (!v8)
      goto LABEL_42;
  }
  result = v8;
  if ((v8[45] & 0x40) == 0)
    goto LABEL_46;
LABEL_42:
  v12 = *(_DWORD *)(v2 + 16);
  if (!v12)
  {
LABEL_46:
    __break(0xC471u);
    JUMPOUT(0x196426A9CLL);
  }
  *(_DWORD *)(v2 + 16) = v12 - 1;
  return result;
}

WTF *WebCore::RenderObject::addPDFURLRect(WebCore::RenderObject *this, const WebCore::PaintInfo *a2, const WebCore::LayoutPoint *a3)
{
  unint64_t v5;
  void *v6;
  uint64_t v7;
  WTF::String *v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *Attribute;
  _QWORD *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  int32x4_t v16;
  WebCore::Node *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  int32x4_t v22;
  WTF::StringImpl *v23;
  WTF *result;
  uint64_t v25;
  WTF::StringImpl *v26[2];
  WTF::StringImpl *v27[2];
  WebCore::Node *v28;
  WTF *v29;
  uint64_t v30;

  v29 = 0;
  v30 = 0;
  (*(void (**)(WebCore::RenderObject *, WTF **, const WebCore::LayoutPoint *, _QWORD))(*(_QWORD *)this + 600))(this, &v29, a3, *((_QWORD *)a2 + 6));
  v5 = WebCore::unionRect((unsigned int *)&v29);
  v9.n128_u64[0] = (unint64_t)vcgt_s32((int32x2_t)0x100000001, (int32x2_t)v6);
  v9.n128_u64[0] = (unint64_t)vorr_s8((int8x8_t)v9.n128_u64[0], (int8x8_t)vdup_lane_s32((int32x2_t)v9.n128_u64[0], 1));
  if ((v9.n128_u8[0] & 1) != 0)
    goto LABEL_25;
  if ((*((_BYTE *)this + 45) & 1) != 0)
    goto LABEL_25;
  v10 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if (!v10 || (*(_WORD *)(v10 + 28) & 8) == 0)
    goto LABEL_25;
  v25 = (uint64_t)v6;
  *(_DWORD *)(v10 + 24) += 2;
  if ((*(_WORD *)(v10 + 30) & 1) != 0)
  {
    v11 = v5;
    Attribute = (_QWORD *)WebCore::Element::getAttribute((WebCore::Element *)v10, (const WebCore::QualifiedName *)&WebCore::HTMLNames::hrefAttr, v7, v8, v9);
    if (*Attribute)
    {
      v13 = Attribute;
      if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)a2 + 10) + 712))(*((_QWORD *)a2 + 10)))
      {
        v26[0] = 0;
        WebCore::Element::findAnchorElementForLink((unsigned int *)v10, v26, (uint64_t *)&v28);
        if (v28)
        {
          v15 = *((_QWORD *)a2 + 10);
          v16.i64[0] = v11;
          v16.i64[1] = v25;
          *(float32x4_t *)v27 = vmulq_f32(vcvtq_f32_s32(v16), (float32x4_t)vdupq_n_s32(0x3C800000u));
          (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)v15 + 696))(v15, v26, v27);
          v17 = v28;
          v28 = 0;
          if (v17)
          {
            if (*((_DWORD *)v17 + 6) == 2)
            {
              if ((*((_WORD *)v17 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v17, v6);
            }
            else
            {
              *((_DWORD *)v17 + 6) -= 2;
            }
          }
          v18 = v26[0];
          v26[0] = 0;
          if (v18)
          {
            if (*(_DWORD *)v18 == 2)
              WTF::StringImpl::destroy(v18, (WTF::StringImpl *)v6);
            else
              *(_DWORD *)v18 -= 2;
          }
          goto LABEL_23;
        }
        v19 = v26[0];
        v26[0] = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2)
            WTF::StringImpl::destroy(v19, v14);
          else
            *(_DWORD *)v19 -= 2;
        }
      }
      v20 = *((_QWORD *)a2 + 10);
      v21 = *(_QWORD *)(*(_QWORD *)(v10 + 40) + 8);
      *(_DWORD *)(v21 + 24) += 2;
      WebCore::Document::completeURL((WebCore::Document *)v21, v13, v21 + 848, 0, (WTF::URL *)v27);
      v22.i64[1] = v25;
      v22.i64[0] = v11;
      *(float32x4_t *)v26 = vmulq_f32(vcvtq_f32_s32(v22), (float32x4_t)vdupq_n_s32(0x3C800000u));
      (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)v20 + 688))(v20, v27, v26);
      v23 = v27[0];
      v27[0] = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
          WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v6);
        else
          *(_DWORD *)v23 -= 2;
      }
      if (*(_DWORD *)(v21 + 24) == 2)
      {
        if ((*(_WORD *)(v21 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v21, v6);
      }
      else
      {
        *(_DWORD *)(v21 + 24) -= 2;
      }
    }
  }
LABEL_23:
  if (*(_DWORD *)(v10 + 24) == 2)
  {
    if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v10, v6);
  }
  else
  {
    *(_DWORD *)(v10 + 24) -= 2;
  }
LABEL_25:
  result = v29;
  if (v29)
  {
    v29 = 0;
    LODWORD(v30) = 0;
    return (WTF *)WTF::fastFree(result, v6);
  }
  return result;
}

_OWORD *WebCore::RenderObject::collectSelectionGeometries(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  _OWORD *result;
  void *v9;
  _DWORD *v10;
  unsigned int v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  _DWORD *v22;
  uint64_t v23;
  int v24;
  int v25;
  float *v26;
  float *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  int v31;
  uint64_t v32;
  float v33;
  float v34;
  float v35;
  float v37;
  unsigned int v38;
  float v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  __int128 v59;
  __int128 v60;
  _BYTE v61[32];
  __int128 v62;
  int v63;
  WTF *v64;
  uint64_t v65;

  v64 = 0;
  v65 = 0;
  result = (_OWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  if (result)
  {
    result = (_OWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
    v10 = result;
    if (a3 && result)
    {
      v11 = 1;
      do
      {
        v12 = *(unsigned int *)((char *)v10 + 47);
        if (!(v12 | ((unint64_t)*((unsigned __int8 *)v10 + 51) << 32)))
          goto LABEL_41;
        v10 = *(_DWORD **)((v12 | ((unint64_t)*((unsigned __int8 *)v10 + 51) << 32)) + 8);
        if (v10)
          v13 = v11 >= a3;
        else
          v13 = 1;
        ++v11;
      }
      while (!v13);
    }
    if (v10)
    {
      v14 = v10[4] + 1;
      v10[4] = v14;
      if (a3 >= a4)
      {
        v17 = (unint64_t)v10;
      }
      else
      {
        v15 = a3 + 1;
        do
        {
          result = (_OWORD *)(*(uint64_t (**)(_DWORD *, WTF **, _QWORD))(*(_QWORD *)v10 + 392))(v10, &v64, 0);
          v16 = *(unsigned int *)((char *)v10 + 47);
          v17 = v16 | ((unint64_t)*((unsigned __int8 *)v10 + 51) << 32);
          if (v17)
          {
            v17 = *(_QWORD *)((v16 | ((unint64_t)*((unsigned __int8 *)v10 + 51) << 32)) + 8);
            if (v17)
              ++*(_DWORD *)(v17 + 16);
          }
          v18 = v10[4];
          if (!v18)
          {
            __break(0xC471u);
            JUMPOUT(0x1964272B8);
          }
          v10[4] = v18 - 1;
          if (!v17)
            break;
          v10 = (_DWORD *)v17;
          v13 = v15++ >= a4;
        }
        while (!v13);
        if (!v17)
          goto LABEL_41;
        v14 = *(_DWORD *)(v17 + 16);
      }
      if (!v14)
      {
        __break(0xC471u);
        JUMPOUT(0x1964272F8);
      }
      v22 = (_DWORD *)(v17 + 16);
      goto LABEL_40;
    }
    goto LABEL_41;
  }
  v19 = *(unsigned int *)(a1 + 40);
  if (v19 | ((unint64_t)*(unsigned __int8 *)(a1 + 44) << 32))
  {
    v20 = *(_QWORD *)((v19 | ((unint64_t)*(unsigned __int8 *)(a1 + 44) << 32)) + 8);
    if (v20)
    {
      v21 = 0;
      ++*(_DWORD *)(v20 + 16);
      goto LABEL_31;
    }
  }
  else
  {
    v20 = 0;
  }
  v21 = 1;
LABEL_31:
  if ((*(_BYTE *)(a1 + 45) & 1) != 0)
  {
    v23 = 0;
  }
  else
  {
    v23 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
    if (v23)
    {
      v24 = 0;
      *(_DWORD *)(v23 + 24) += 2;
      if (!v20)
        goto LABEL_35;
      goto LABEL_34;
    }
  }
  v24 = 1;
  if (!v20)
    goto LABEL_35;
LABEL_34:
  if (*(_BYTE *)(v20 + 46) != 17 || (*(_BYTE *)(v20 + 52) & 7) == 2 && (*(_BYTE *)(v20 + 53) & 1) != 0)
  {
LABEL_35:
    result = (_OWORD *)(*(uint64_t (**)(uint64_t, WTF **))(*(_QWORD *)a1 + 376))(a1, &v64);
    if ((v24 & 1) != 0)
      goto LABEL_38;
    goto LABEL_36;
  }
  if (v24)
  {
    result = (_OWORD *)(*(uint64_t (**)(uint64_t, WTF **))(*(_QWORD *)a1 + 376))(a1, &v64);
    goto LABEL_38;
  }
  if ((*(_WORD *)(v23 + 28) & 4) == 0 || (*(_BYTE *)(a1 + 20) & 1) != 0)
    result = (_OWORD *)(*(uint64_t (**)(uint64_t, WTF **))(*(_QWORD *)a1 + 376))(a1, &v64);
LABEL_36:
  if (*(_DWORD *)(v23 + 24) == 2)
  {
    if ((*(_WORD *)(v23 + 30) & 0x400) == 0)
      result = WebCore::Node::removedLastRef((WebCore::Node *)v23, v9);
  }
  else
  {
    *(_DWORD *)(v23 + 24) -= 2;
  }
LABEL_38:
  if ((v21 & 1) == 0)
  {
    v25 = *(_DWORD *)(v20 + 16);
    v22 = (_DWORD *)(v20 + 16);
    v14 = v25;
    if (!v25)
    {
      __break(0xC471u);
      JUMPOUT(0x1964272D8);
    }
LABEL_40:
    *v22 = v14 - 1;
  }
LABEL_41:
  v26 = (float *)v64;
  if (!HIDWORD(v65))
    goto LABEL_89;
  v27 = (float *)((char *)v64 + 32 * HIDWORD(v65));
  do
  {
    v28 = *(_QWORD *)(a1 + 24);
    if ((*(_BYTE *)(a1 + 45) & 1) != 0)
    {
      v29 = 0;
    }
    else
    {
      v29 = *(_QWORD *)(v28 + 8);
      if (v29)
      {
        *(_DWORD *)(v29 + 24) += 2;
        result = (_OWORD *)WebCore::ImageOverlay::isOverlayText((WebCore::ImageOverlay *)v29, (const WebCore::Node *)v9);
        v30 = 0;
        v28 = *(_QWORD *)(a1 + 24);
        goto LABEL_46;
      }
    }
    result = 0;
    v30 = 1;
LABEL_46:
    v31 = *(_DWORD *)(a1 + 20);
    v32 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v28 + 8) + 40) + 8) + 1944);
    ++*(_DWORD *)(v32 + 16);
    v33 = *v26;
    v34 = v26[4];
    if (v26[6] < v34)
      v34 = v26[6];
    if (v26[2] < v33)
      v33 = v26[2];
    if (v34 < v33)
      v33 = v34;
    v35 = fabsf(v33);
    if (v35 == INFINITY || v35 > 2147500000.0)
      v33 = (float)((SLODWORD(v33) >> 31) ^ 0x7FFFFFFF);
    v37 = floorf(v33);
    v38 = (int)v37;
    v39 = (float)(int)v37;
    if (v39 <= -2147500000.0)
      v38 = 0x80000000;
    if (v39 >= 2147500000.0)
      v38 = 0x7FFFFFFF;
    if (v37 <= -2147500000.0)
      v38 = 0x80000000;
    if (v37 >= 2147500000.0)
      v38 = 0x7FFFFFFF;
    v40 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v32 + 24) + 8) + 40)
                                                        + 8)
                                            + 528)
                                + 8)
                    + 24);
    if (v40)
      v40 = *(_QWORD *)(v40 + 8);
    if (*(_BYTE *)(v40 + 468)
      && (v41 = *(_QWORD *)(v32 + 224)) != 0
      && (v56 = *(_QWORD *)(v41 + 24)) != 0
      && (v57 = *(_QWORD *)(v56 + 8)) != 0
      && !*(_BYTE *)(v57 + 367))
    {
      v58 = *(_DWORD *)(v40 + 476) + *(_DWORD *)(v40 + 472);
      if (!*(_BYTE *)(v57 + 368))
        v38 = v58 - v38;
      v42 = v38 / v58;
    }
    else
    {
      v42 = 0;
    }
    v43 = *((_OWORD *)v26 + 1);
    v59 = *(_OWORD *)v26;
    v60 = v43;
    *(_WORD *)v61 = result;
    memset(&v61[4], 0, 21);
    v61[25] = (v31 & 0x1000) == 0;
    v61[26] = 0;
    *(_DWORD *)&v61[28] = v42;
    LOBYTE(v62) = 0;
    LOBYTE(v63) = 0;
    v44 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v44 == *(_DWORD *)(a2 + 8))
    {
      result = WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v44 + 1, (unint64_t)&v59);
      v45 = *(_QWORD *)a2 + 84 * *(unsigned int *)(a2 + 12);
      v47 = result[3];
      v46 = result[4];
      v48 = result[2];
      *(_DWORD *)(v45 + 80) = *((_DWORD *)result + 20);
      *(_OWORD *)(v45 + 48) = v47;
      *(_OWORD *)(v45 + 64) = v46;
      *(_OWORD *)(v45 + 32) = v48;
      v49 = result[1];
      *(_OWORD *)v45 = *result;
      *(_OWORD *)(v45 + 16) = v49;
    }
    else
    {
      v50 = *(_QWORD *)a2 + 84 * v44;
      v51 = v60;
      *(_OWORD *)v50 = v59;
      *(_OWORD *)(v50 + 16) = v51;
      v52 = *(_OWORD *)v61;
      v53 = *(_OWORD *)&v61[16];
      v54 = v62;
      *(_DWORD *)(v50 + 80) = v63;
      *(_OWORD *)(v50 + 48) = v53;
      *(_OWORD *)(v50 + 64) = v54;
      *(_OWORD *)(v50 + 32) = v52;
    }
    ++*(_DWORD *)(a2 + 12);
    v55 = *(_DWORD *)(v32 + 16);
    if (!v55)
    {
      __break(0xC471u);
      JUMPOUT(0x196427288);
    }
    *(_DWORD *)(v32 + 16) = v55 - 1;
    if ((v30 & 1) == 0)
    {
      if (*(_DWORD *)(v29 + 24) == 2)
      {
        if ((*(_WORD *)(v29 + 30) & 0x400) == 0)
          result = WebCore::Node::removedLastRef((WebCore::Node *)v29, v9);
      }
      else
      {
        *(_DWORD *)(v29 + 24) -= 2;
      }
    }
    v26 += 8;
  }
  while (v26 != v27);
  v26 = (float *)v64;
LABEL_89:
  if (v26)
  {
    v64 = 0;
    LODWORD(v65) = 0;
    return (_OWORD *)WTF::fastFree((WTF *)v26, v9);
  }
  return result;
}

uint64_t WebCore::RenderObject::absoluteFocusRingQuads(_QWORD *a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  WTF *v6;
  WTF *v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  void *v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  WTF *v21;
  double v22;
  int v23;
  double v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  float v31;
  float v32;
  float v33;
  uint64_t v34;
  _OWORD *v35;
  __int128 v36;
  __int128 v37;
  WTF *v38;
  void *v39;
  float v40[8];
  __int128 v41;
  WTF *v42;
  uint64_t v43;
  _OWORD v44[4];
  char v45;
  WTF *v46;
  WTF *v47;
  uint64_t v48;
  char v49;
  __int16 v50;
  int v51;
  int v52;

  v42 = 0;
  v43 = 0;
  v45 = 0;
  v47 = 0;
  v48 = 0;
  v46 = 0;
  v49 = 0;
  memset(v44, 0, 41);
  v50 = 1;
  v51 = 0;
  v52 = 0;
  (*(void (**)(_QWORD *, _QWORD, _OWORD *, uint64_t, _QWORD))(*a1 + 576))(a1, 0, v44, 4, 0);
  WebCore::TransformState::flatten((WebCore::TransformState *)v44, 0);
  v5 = *(_QWORD *)&v44[0];
  v6 = v47;
  v47 = 0;
  if (v6)
    WTF::fastFree(v6, v4);
  v7 = v46;
  v46 = 0;
  if (v7)
    WTF::fastFree(v7, v4);
  v8 = floorf(*(float *)&v5 * 64.0);
  v9 = 0x7FFFFFFFLL;
  v10 = 0x80000000;
  if (v8 > -2147500000.0)
    v10 = (int)v8;
  if (v8 < 2147500000.0)
    v9 = v10;
  v11 = floorf(*((float *)&v5 + 1) * 64.0);
  v12 = 0x7FFFFFFF00000000;
  v13 = 0x8000000000000000;
  if (v11 > -2147500000.0)
    v13 = (unint64_t)(int)v11 << 32;
  if (v11 < 2147500000.0)
    v12 = v13;
  *(_QWORD *)&v44[0] = v12 | v9;
  result = (*(uint64_t (**)(_QWORD *, WTF **, _OWORD *, _QWORD))(*a1 + 600))(a1, &v42, v44, 0);
  v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[3] + 8) + 40) + 8) + 528);
  v17 = 1.0;
  if (v16)
  {
    v18 = *(_QWORD *)(v16 + 8);
    if (v18)
    {
      v19 = *(_QWORD *)(v18 + 24);
      if (v19)
      {
        result = *(_QWORD *)(v19 + 8);
        if (result)
        {
          v20 = (*(_DWORD *)result)++;
          v17 = *(float *)(result + 364);
          if (v20)
          {
            *(_DWORD *)result = v20;
          }
          else
          {
            WebCore::Page::~Page(result);
            result = WTF::fastFree(v38, v39);
          }
        }
      }
    }
  }
  v21 = v42;
  if (HIDWORD(v43))
  {
    v22 = (float)-*(float *)&v5 * 64.0;
    v23 = (int)fmax(v22, -2147483650.0);
    v24 = (float)-*((float *)&v5 + 1) * 64.0;
    if (v22 < 2147483650.0)
      v25 = v23;
    else
      v25 = 0x7FFFFFFF;
    v26 = (int)fmax(v24, -2147483650.0);
    if (v24 < 2147483650.0)
      v27 = v26;
    else
      v27 = 0x7FFFFFFF;
    v28 = 16 * HIDWORD(v43);
    do
    {
      v41 = *(_OWORD *)v21;
      v29 = (v41 >> 31) + 0x7FFFFFFF;
      if (!__OFADD__((_DWORD)v41, v25))
        v29 = v41 + v25;
      v30 = (DWORD1(v41) >> 31) + 0x7FFFFFFF;
      if (!__OFADD__(DWORD1(v41), v27))
        v30 = DWORD1(v41) + v27;
      *(_QWORD *)&v41 = __PAIR64__(v30, v29);
      v40[0] = WebCore::snapRectToDevicePixels((int *)&v41, v17);
      v40[1] = v31;
      v40[2] = v40[0] + v32;
      v40[3] = v31;
      v40[4] = v40[0] + v32;
      v40[5] = v31 + v33;
      v40[6] = v40[0];
      v40[7] = v31 + v33;
      result = (uint64_t)WebCore::RenderObject::localToContainerQuad((uint64_t)a1, v40, 0, 2u, v44);
      v34 = *(unsigned int *)(a2 + 12);
      if ((_DWORD)v34 == *(_DWORD *)(a2 + 8))
      {
        result = WTF::Vector<WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v34 + 1, (unint64_t)v44);
        v35 = (_OWORD *)(*(_QWORD *)a2 + 32 * *(unsigned int *)(a2 + 12));
        v36 = *(_OWORD *)result;
        v37 = *(_OWORD *)(result + 16);
      }
      else
      {
        v35 = (_OWORD *)(*(_QWORD *)a2 + 32 * v34);
        v36 = v44[0];
        v37 = v44[1];
      }
      *v35 = v36;
      v35[1] = v37;
      ++*(_DWORD *)(a2 + 12);
      v21 = (WTF *)((char *)v21 + 16);
      v28 -= 16;
    }
    while (v28);
    v21 = v42;
  }
  if (v21)
  {
    v42 = 0;
    LODWORD(v43) = 0;
    return WTF::fastFree(v21, v15);
  }
  return result;
}

unint64_t WebCore::RenderObject::addAbsoluteRectForLayer(unint64_t this, WebCore::LayoutRect *a2)
{
  unint64_t v3;
  int32x4_t v4;
  uint64_t v5;
  int32x4_t v6;
  int8x16_t v7;
  int32x4_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  signed int v18;
  int v19;
  signed int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t i;
  uint64_t v29;
  uint64_t v30;
  int v31;

  v3 = this;
  if ((*(_BYTE *)(this + 21) & 0x80) != 0)
  {
    this = WebCore::RenderObject::absoluteBoundingBoxRect((WebCore::RenderObject *)this, 0, 0);
    v4.i64[0] = this;
    v4.i64[1] = v5;
    v6.i64[0] = 0xFE000000FE000000;
    v6.i64[1] = 0xFE000000FE000000;
    v7 = (int8x16_t)vcgtq_s32(v4, v6);
    v8.i64[0] = 0xFE000000FE000000;
    v8.i64[1] = 0xFE000000FE000000;
    v9.i64[0] = 0x8000000080000000;
    v9.i64[1] = 0x8000000080000000;
    v10 = vorrq_s8((int8x16_t)(*(_OWORD *)&v7 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vbicq_s8(vbslq_s8((int8x16_t)vcgtq_s32(v8, v4), v9, (int8x16_t)vshlq_n_s32(v4, 6uLL)), v7));
    *(int32x2_t *)v7.i8 = vcgt_s32((int32x2_t)0x100000001, vrev64_s32((int32x2_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL)));
    if (((v7.i32[1] | v7.i32[0]) & 1) == 0)
    {
      v11 = *((_DWORD *)a2 + 2);
      if (v11 < 1 || (v12 = *((_DWORD *)a2 + 3), v12 <= 0))
      {
        *(int8x16_t *)a2 = v10;
      }
      else
      {
        v13 = *(_DWORD *)a2;
        v14 = *((_DWORD *)a2 + 1);
        if (v10.i32[0] >= *(_DWORD *)a2)
          v15 = v13;
        else
          v15 = v10.u32[0];
        if (v10.i32[1] >= (int)v14)
          v16 = v14;
        else
          v16 = v10.u32[1];
        v17 = __OFADD__(v13, v11);
        v18 = v13 + v11;
        v19 = (v13 >> 31) + 0x7FFFFFFF;
        if (v17)
          v18 = v19;
        v20 = ((unsigned __int32)v10.i32[0] >> 31) + 0x7FFFFFFF;
        if (!__OFADD__(v10.i32[0], v10.i32[2]))
          v20 = v10.i32[0] + v10.i32[2];
        if (v18 <= v20)
          v18 = v20;
        v17 = __OFADD__(v14, v12);
        v21 = v14 + v12;
        if (v17)
          v21 = (v14 >> 31) + 0x7FFFFFFF;
        v22 = v10.i32[1] + v10.i32[3];
        if (__OFADD__(v10.i32[1], v10.i32[3]))
          v22 = ((unsigned __int32)v10.i32[1] >> 31) + 0x7FFFFFFF;
        if (v21 <= v22)
          v21 = v22;
        *(_QWORD *)a2 = v15 | (v16 << 32);
        v17 = __OFSUB__(v18, (_DWORD)v15);
        v23 = v18 - v15;
        v24 = (v18 >> 31) + 0x7FFFFFFF;
        if (!v17)
          v24 = v23;
        v17 = __OFSUB__(v21, (_DWORD)v16);
        v25 = v21 - v16;
        v26 = (v21 >> 31) + 0x7FFFFFFF;
        if (!v17)
          v26 = v25;
        *((_DWORD *)a2 + 2) = v24;
        *((_DWORD *)a2 + 3) = v26;
      }
    }
  }
  if ((*(_BYTE *)(v3 + 45) & 2) == 0)
  {
    v27 = *(unsigned __int8 *)(v3 + 68);
    for (i = *(unsigned int *)(v3 + 64); ; i = *(unsigned int *)(v30 + 47))
    {
      v29 = i | (v27 << 32);
      if (!v29)
        break;
      v30 = *(_QWORD *)(v29 + 8);
      if (!v30)
        break;
      ++*(_DWORD *)(v30 + 16);
      this = WebCore::RenderObject::addAbsoluteRectForLayer((WebCore::RenderObject *)v30, a2);
      v31 = *(_DWORD *)(v30 + 16);
      if (!v31)
      {
        this = 286;
        __break(0xC471u);
        return this;
      }
      *(_DWORD *)(v30 + 16) = v31 - 1;
      v27 = *(unsigned __int8 *)(v30 + 51);
    }
  }
  return this;
}

uint64_t WebCore::RenderObject::paintingRootRect(WebCore::RenderObject *this, int8x16_t *a2)
{
  int32x4_t v4;
  uint64_t v5;
  int32x4_t v6;
  int8x16_t v7;
  int32x4_t v8;
  int8x16_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t result;
  int8x16_t v16;

  v4.i64[0] = WebCore::RenderObject::absoluteBoundingBoxRect(this, 0, 0);
  v4.i64[1] = v5;
  v6.i64[0] = 0xFE000000FE000000;
  v6.i64[1] = 0xFE000000FE000000;
  v7 = (int8x16_t)vcgtq_s32(v4, v6);
  v8.i64[0] = 0xFE000000FE000000;
  v8.i64[1] = 0xFE000000FE000000;
  v9.i64[0] = 0x8000000080000000;
  v9.i64[1] = 0x8000000080000000;
  v16 = vorrq_s8((int8x16_t)(*(_OWORD *)&v7 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vbicq_s8(vbslq_s8((int8x16_t)vcgtq_s32(v8, v4), v9, (int8x16_t)vshlq_n_s32(v4, 6uLL)), v7));
  *a2 = v16;
  if (this && (*((_BYTE *)this + 45) & 2) == 0)
  {
    v10 = *((unsigned __int8 *)this + 68);
    for (i = *((unsigned int *)this + 16); ; i = *(unsigned int *)(v13 + 47))
    {
      v12 = i | (v10 << 32);
      if (!v12)
        break;
      v13 = *(_QWORD *)(v12 + 8);
      if (!v13)
        break;
      ++*(_DWORD *)(v13 + 16);
      WebCore::RenderObject::addAbsoluteRectForLayer(v13, (WebCore::LayoutRect *)&v16);
      v14 = *(_DWORD *)(v13 + 16);
      if (!v14)
      {
        result = 286;
        __break(0xC471u);
        return result;
      }
      *(_DWORD *)(v13 + 16) = v14 - 1;
      v10 = *(unsigned __int8 *)(v13 + 51);
    }
  }
  return v16.i64[0];
}

uint64_t WebCore::RenderObject::propagateRepaintToParentWithOutlineAutoIfNeeded(uint64_t this, const WebCore::RenderLayerModelObject *a2, const WebCore::LayoutRect *a3)
{
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  int i;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  uint64_t v19;
  int v20;
  const WebCore::RenderObject *v21;
  uint64_t v22;
  float v23;
  float v24;
  double v25;
  int v27;
  signed int v28;
  unsigned int v29;
  BOOL v30;
  int v31;
  int v33;
  int v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  unint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const WebCore::RenderLayerModelObject *v48;
  uint64_t v49;
  int v50;
  BOOL v51;
  uint64_t v52;
  WTF *v53;
  void *v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  int v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unsigned int v63;
  int j;
  uint64_t v65;
  uint64_t v66;
  int v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unsigned int v71;
  int k;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  BOOL v78;
  float v79;
  float v80;
  uint64_t v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  int v85;
  const WebCore::LayoutRect *v86;
  int v87;
  uint64_t v88;
  WebCore::RenderMultiColumnFlow *v89;
  char v90;
  int v91;
  int v92;
  uint64_t v93;
  const WebCore::FilterOperations *v94;
  uint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  int v98;
  int v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  void *v104;
  WTF *v105;
  int v106;
  int v107;
  int v108;
  int v109;
  uint64_t v110;
  __int128 v111;
  unsigned int v112[4];
  char v113;
  __int128 v114;
  unint64_t v115;
  uint64_t v116;
  float v117;
  float v118;
  float v119;
  float v120;
  char v121;
  WTF *v122[2];
  char v123;

  if ((*(_BYTE *)(this + 21) & 0x40) == 0)
    return this;
  v4 = this;
  v5 = *(_DWORD *)(WebCore::RenderObject::rareDataMap(void)::map - 8);
  v6 = (~(this << 32) + this) ^ ((unint64_t)(~(this << 32) + this) >> 22);
  v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
  v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
  v9 = v5 & ((v8 >> 31) ^ v8);
  for (i = 1; ; v9 = (v11 + i++) & v5)
  {
    v11 = v9;
    v12 = *(_QWORD *)(WebCore::RenderObject::rareDataMap(void)::map + 16 * v9);
    if (v12 != -1 && *(_QWORD *)(v12 + 8) == this)
      break;
  }
  if (!this || !*(_BYTE *)(*(_QWORD *)(WebCore::RenderObject::rareDataMap(void)::map + 16 * v11 + 8) + 1))
    return this;
  v13 = 0;
  ++*(_DWORD *)(this + 16);
  while (1)
  {
    ++*(_DWORD *)(v4 + 16);
    v14 = *(unsigned int *)(v4 + 40);
    v15 = v4;
    if (!(v14 | ((unint64_t)*(unsigned __int8 *)(v4 + 44) << 32)))
      goto LABEL_13;
    v16 = *(_QWORD *)((v14 | ((unint64_t)*(unsigned __int8 *)(v4 + 44) << 32)) + 8);
    v15 = v4;
    if (!v16)
      goto LABEL_13;
    v15 = v4;
    if (*(_BYTE *)(v16 + 46) != 26)
      goto LABEL_13;
    v86 = a3;
    v87 = *(_DWORD *)(v16 + 16) + 1;
    *(_DWORD *)(v16 + 16) = v87;
    this = WebCore::RenderObject::isLegend((WebCore::RenderObject *)v4);
    v15 = v4;
    if ((this & 1) == 0)
    {
      v88 = *(_QWORD *)(v16 + 248);
      if (v88)
      {
        v89 = *(WebCore::RenderMultiColumnFlow **)(v88 + 8);
        if (v89)
        {
          v90 = 0;
          ++*((_DWORD *)v89 + 4);
LABEL_159:
          if ((*(_BYTE *)(v4 + 45) & 4) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x196428434);
          }
          this = WebCore::RenderMultiColumnFlow::findColumnSpannerPlaceholder(v89, (const WebCore::RenderBox *)v4);
          v15 = this;
          if (this)
            ++*(_DWORD *)(this + 16);
          v91 = *(_DWORD *)(v4 + 16);
          if (!v91)
          {
            __break(0xC471u);
            JUMPOUT(0x196428414);
          }
          *(_DWORD *)(v4 + 16) = v91 - 1;
          if ((v90 & 1) == 0)
          {
            v92 = *((_DWORD *)v89 + 4);
            if (!v92)
            {
              __break(0xC471u);
              JUMPOUT(0x1964283F4);
            }
            *((_DWORD *)v89 + 4) = v92 - 1;
          }
          v87 = *(_DWORD *)(v16 + 16);
          goto LABEL_167;
        }
      }
      else
      {
        v89 = 0;
      }
      v90 = 1;
      goto LABEL_159;
    }
LABEL_167:
    if (!v87)
    {
      __break(0xC471u);
      JUMPOUT(0x1964283D4);
    }
    *(_DWORD *)(v16 + 16) = v87 - 1;
    a3 = v86;
    if ((*(_BYTE *)(v15 + 21) & 0x40) == 0)
      goto LABEL_14;
LABEL_13:
    v59 = *(_DWORD *)(WebCore::RenderObject::rareDataMap(void)::map - 8);
    v60 = (~(v15 << 32) + v15) ^ ((unint64_t)(~(v15 << 32) + v15) >> 22);
    v61 = 9 * ((v60 + ~(v60 << 13)) ^ ((v60 + ~(v60 << 13)) >> 8));
    v62 = (v61 ^ (v61 >> 15)) + ~((v61 ^ (v61 >> 15)) << 27);
    v63 = v59 & ((v62 >> 31) ^ v62);
    for (j = 1; ; v63 = (v65 + j++) & v59)
    {
      v65 = v63;
      v66 = *(_QWORD *)(WebCore::RenderObject::rareDataMap(void)::map + 16 * v63);
      if (v66 != -1 && *(_QWORD *)(v66 + 8) == v15)
        break;
    }
    if (*(_BYTE *)(*(_QWORD *)(WebCore::RenderObject::rareDataMap(void)::map + 16 * v65 + 8) + 1))
    {
      v17 = 1;
    }
    else
    {
LABEL_14:
      if ((*(_BYTE *)(v4 + 21) & 0x40) != 0)
      {
        v67 = *(_DWORD *)(WebCore::RenderObject::rareDataMap(void)::map - 8);
        v68 = (~(v4 << 32) + v4) ^ ((unint64_t)(~(v4 << 32) + v4) >> 22);
        v69 = 9 * ((v68 + ~(v68 << 13)) ^ ((v68 + ~(v68 << 13)) >> 8));
        v70 = (v69 ^ (v69 >> 15)) + ~((v69 ^ (v69 >> 15)) << 27);
        v71 = v67 & ((v70 >> 31) ^ v70);
        for (k = 1; ; ++k)
        {
          v73 = v71;
          v74 = *(_QWORD *)(WebCore::RenderObject::rareDataMap(void)::map + 16 * v71);
          if (v74 != -1 && *(_QWORD *)(v74 + 8) == v4)
            break;
          v71 = (v73 + k) & v67;
        }
        v17 = *(_BYTE *)(*(_QWORD *)(WebCore::RenderObject::rareDataMap(void)::map + 16 * v73 + 8) + 1) != 0;
      }
      else
      {
        v17 = 0;
      }
    }
    if ((const WebCore::RenderLayerModelObject *)v4 == a2)
      v13 |= v17;
    if (!v17)
      break;
    v18 = *(_DWORD *)(v4 + 16);
    if (!v18)
      goto LABEL_230;
    *(_DWORD *)(v4 + 16) = v18 - 1;
    v19 = *(_QWORD *)(v15 + 32);
    if (v19)
    {
      v4 = *(_QWORD *)(v19 + 8);
      if (v4)
        ++*(_DWORD *)(v4 + 16);
    }
    else
    {
      v4 = 0;
    }
    v20 = *(_DWORD *)(v15 + 16);
    if (!v20)
    {
      __break(0xC471u);
      JUMPOUT(0x196427FDCLL);
    }
    *(_DWORD *)(v15 + 16) = v20 - 1;
    if (!v4)
      return this;
  }
  v111 = *(_OWORD *)a3;
  this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 424))(v4);
  v22 = *(_QWORD *)(*(_QWORD *)(this + 8) + 16);
  if ((*(_BYTE *)(v22 + 52) & 0xF) != 0)
  {
    v24 = *(float *)(v22 + 48);
    v23 = *(float *)(v22 + 56);
    if ((*(_BYTE *)(v22 + 52) & 0x10) != 0)
    {
      v78 = v24 < 3.0;
      v79 = v24 + -3.0;
      if (v24 < 3.0)
        v24 = 3.0;
      v80 = 0.0;
      if (!v78)
        v80 = v79;
      goto LABEL_138;
    }
  }
  else
  {
    v23 = *(float *)(v22 + 56);
    v24 = 0.0;
    if ((*(_BYTE *)(v22 + 52) & 0x10) == 0)
      goto LABEL_28;
    v80 = -3.0;
LABEL_138:
    if (v80 < 0.0)
      v80 = 0.0;
    v23 = v23 + v80;
  }
LABEL_28:
  v25 = fmaxf(v24 + v23, 0.0) * 64.0;
  if (v25 >= 2147483650.0 || v25 <= -2147483650.0)
  {
    if (v25 >= 2147483650.0)
    {
      v27 = 0x7FFFFFFF;
    }
    else
    {
      if (v25 > -2147483650.0)
        goto LABEL_32;
      v27 = 0x80000000;
    }
  }
  else
  {
LABEL_32:
    v27 = (int)v25;
  }
  v28 = v111 - v27;
  if (__OFSUB__((_DWORD)v111, v27))
    v28 = (v111 >> 31) + 0x7FFFFFFF;
  LODWORD(v111) = v28;
  v29 = DWORD2(v111) + v27;
  if (__OFADD__(DWORD2(v111), v27))
    v29 = (DWORD2(v111) >> 31) + 0x7FFFFFFF;
  v30 = __OFADD__(v29, v27);
  v31 = v29 + v27;
  if (v30)
    v31 = (v29 >> 31) + 0x7FFFFFFF;
  DWORD2(v111) = v31;
  if (v25 >= 2147483650.0 || v25 <= -2147483650.0)
  {
    if (v25 >= 2147483650.0)
    {
      v33 = 0x7FFFFFFF;
    }
    else
    {
      if (v25 > -2147483650.0)
        goto LABEL_43;
      v33 = 0x80000000;
    }
  }
  else
  {
LABEL_43:
    v33 = (int)v25;
  }
  v34 = DWORD1(v111) - v33;
  if (__OFSUB__(DWORD1(v111), v33))
    v34 = (DWORD1(v111) >> 31) + 0x7FFFFFFF;
  DWORD1(v111) = v34;
  v35 = HIDWORD(v111) + v33;
  if (__OFADD__(HIDWORD(v111), v33))
    v35 = (HIDWORD(v111) >> 31) + 0x7FFFFFFF;
  v30 = __OFADD__(v35, v33);
  v36 = v35 + v33;
  if (v30)
    v36 = (v35 >> 31) + 0x7FFFFFFF;
  HIDWORD(v111) = v36;
  if ((v13 & 1) != 0)
  {
    v56 = *(_DWORD *)(v4 + 16);
    if ((*(_BYTE *)(v4 + 45) & 0x10) != 0)
    {
      *(_DWORD *)(v4 + 16) = v56 + 1;
      *(float *)&v115 = (float)v28 * 0.015625;
      *((float *)&v115 + 1) = (float)v34 * 0.015625;
      *(float *)&v116 = *(float *)&v115 + (float)((float)v31 * 0.015625);
      *((float *)&v116 + 1) = *((float *)&v115 + 1);
      v117 = *(float *)&v116;
      v118 = *((float *)&v115 + 1) + (float)((float)v36 * 0.015625);
      v119 = *(float *)&v115;
      v120 = v118;
      WebCore::RenderObject::localToContainerQuad((uint64_t)a2, (float *)&v115, v4, 2u, v122);
      v112[0] = WebCore::FloatQuad::boundingBox((WebCore::FloatQuad *)v122);
      v112[1] = v82;
      v112[2] = v83;
      v112[3] = v84;
      WebCore::LayoutRect::LayoutRect((int *)&v111, (const WebCore::FloatRect *)v112);
      this = WebCore::RenderObject::repaintRectangle(v4, (const WebCore::LayoutRect *)&v111);
      v85 = *(_DWORD *)(v4 + 16);
      if (!v85)
      {
        __break(0xC471u);
        JUMPOUT(0x1964283B4);
      }
      v56 = v85 - 1;
      *(_DWORD *)(v4 + 16) = v85 - 1;
    }
    goto LABEL_94;
  }
  v37 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 40) + 8) + 1944);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v37 + 24) + 8) + 40) + 8) + 3382))
    goto LABEL_93;
  v38 = *(_QWORD *)(v37 + 248);
  v39 = *(unsigned int *)(v38 + 508);
  if ((_DWORD)v39 && (v40 = *(_QWORD *)(*(_QWORD *)(v38 + 496) + 8 * v39 - 8)) != 0)
  {
    v75 = *(_QWORD *)(v40 + 64);
    v41 = v75 & 0xFFFFFFFF00000000;
    v42 = v75;
  }
  else
  {
    v41 = 0;
    v42 = 0;
  }
  v43 = HIDWORD(v41);
  v44 = v111 + v42;
  if (__OFADD__((_DWORD)v111, v42))
    v44 = (v111 >> 31) + 0x7FFFFFFF;
  v45 = (DWORD1(v111) + v43);
  if (__OFADD__(DWORD1(v111), (_DWORD)v43))
    v45 = ((DWORD1(v111) >> 31) + 0x7FFFFFFF);
  v46 = *((_QWORD *)&v111 + 1);
  LOBYTE(v112[0]) = 0;
  v113 = 0;
  v47 = *(_QWORD *)(v37 + 400);
  if (!v47)
    goto LABEL_128;
  if (!*(_BYTE *)(v47 + 195))
    goto LABEL_127;
  v48 = a2;
  if ((*((_BYTE *)a2 + 45) & 0x10) != 0)
    goto LABEL_62;
  v47 = *((_QWORD *)a2 + 4);
  if (!v47)
  {
LABEL_128:
    this = 0;
    goto LABEL_77;
  }
  v48 = *(const WebCore::RenderLayerModelObject **)(v47 + 8);
  if (!v48)
    goto LABEL_127;
  this = 0;
  while ((*((_BYTE *)v48 + 45) & 0x10) == 0)
  {
    v76 = *((_QWORD *)v48 + 4);
    if (!v76)
      goto LABEL_127;
    v47 = 0;
    v48 = *(const WebCore::RenderLayerModelObject **)(v76 + 8);
    if (!v48)
      goto LABEL_77;
  }
LABEL_62:
  if ((*((_BYTE *)v48 + 21) & 0x80) == 0)
  {
    this = 0;
    do
    {
      v47 = *((_QWORD *)v48 + 4);
      if (!v47)
        goto LABEL_128;
      v48 = *(const WebCore::RenderLayerModelObject **)(v47 + 8);
      if (!v48)
        goto LABEL_127;
      while ((*((_BYTE *)v48 + 45) & 0x10) == 0)
      {
        v77 = *((_QWORD *)v48 + 4);
        if (!v77)
          goto LABEL_127;
        v47 = 0;
        v48 = *(const WebCore::RenderLayerModelObject **)(v77 + 8);
        if (!v48)
          goto LABEL_77;
      }
    }
    while ((*((_BYTE *)v48 + 21) & 0x80) == 0);
  }
  v49 = *((_QWORD *)v48 + 18);
  if (!v49)
  {
LABEL_127:
    v47 = 0;
    goto LABEL_128;
  }
  v50 = *(_DWORD *)(v49 + 8) + 1;
  *(_DWORD *)(v49 + 8) = v50;
  v51 = WebCore::RenderLayer::enclosingCompositingLayerForRepaint((_QWORD *)v49, 0);
  if (v21)
  {
    v47 = *((_QWORD *)v21 + 4);
    if (v47)
      ++*(_DWORD *)(v47 + 16);
    if (v51)
    {
      if ((*((_BYTE *)a2 + 45) & 2) != 0 || (*((_BYTE *)a2 + 21) & 0x80) == 0)
        goto LABEL_116;
      if ((*((_BYTE *)a2 + 45) & 0x10) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x196428244);
      }
      v81 = *((_QWORD *)a2 + 18);
      if (v81 && (*(_BYTE *)(v81 + 25) & 8) != 0)
        this = *(_BYTE *)(v47 + 22) & 1;
      else
LABEL_116:
        this = 1;
    }
    else
    {
      this = 0;
    }
    v50 = *(_DWORD *)(v49 + 8);
  }
  else
  {
    v47 = 0;
    this = 0;
  }
  if (!v50)
  {
    __break(0xC471u);
    JUMPOUT(0x19642807CLL);
  }
  *(_DWORD *)(v49 + 8) = v50 - 1;
LABEL_77:
  if (!*(_BYTE *)(v37 + 440))
    goto LABEL_78;
  v110 = v47;
  v93 = this;
  v95 = WebCore::RenderObject::enclosingLayer(a2);
  this = v93;
  v47 = v110;
  if (!v95)
    goto LABEL_78;
  ++*(_DWORD *)(v95 + 8);
  v96 = WebCore::RenderLayer::enclosingFilterLayer((_QWORD *)v95, 0, v94);
  if (!v96)
  {
    v106 = *(_DWORD *)(v95 + 8);
    if (!v106)
      goto LABEL_214;
    *(_DWORD *)(v95 + 8) = v106 - 1;
    v47 = v110;
    this = v93;
LABEL_78:
    if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
    {
      v52 = v47;
      goto LABEL_80;
    }
    v101 = this;
    v102 = v47;
    this = (*(uint64_t (**)(const WebCore::RenderLayerModelObject *))(*(_QWORD *)a2 + 648))(a2);
    if (!this)
    {
      v52 = v102;
      this = v101;
      goto LABEL_80;
    }
    v52 = this;
    ++*(_DWORD *)(this + 16);
    if (!v102)
      goto LABEL_193;
    if ((*(_BYTE *)(v102 + 23) & 0x10) != 0
      && (this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v102 + 648))(v102)) != 0)
    {
      ++*(_DWORD *)(this + 16);
      if (this == v52)
      {
        v109 = *(_DWORD *)(v52 + 16);
        if (v109)
        {
          *(_DWORD *)(v52 + 16) = v109 - 1;
          if (v109 == 1)
          {
LABEL_230:
            __break(0xC471u);
            JUMPOUT(0x196427FBCLL);
          }
          *(_DWORD *)(v52 + 16) = v109 - 2;
          v52 = v102;
          goto LABEL_193;
        }
        goto LABEL_228;
      }
      v107 = *(_DWORD *)(v102 + 16);
      if (v107)
      {
        *(_DWORD *)(v102 + 16) = v107 - 1;
        v108 = *(_DWORD *)(this + 16);
        if (v108)
        {
          *(_DWORD *)(this + 16) = v108 - 1;
          goto LABEL_193;
        }
LABEL_228:
        __break(0xC471u);
        JUMPOUT(0x196428618);
      }
    }
    else
    {
      v103 = *(_DWORD *)(v102 + 16);
      if (v103)
      {
        *(_DWORD *)(v102 + 16) = v103 - 1;
LABEL_193:
        if ((v101 & 1) == 0)
          goto LABEL_82;
LABEL_91:
        v55 = *(_DWORD *)(v52 + 16);
        if (!v55)
        {
          __break(0xC471u);
          JUMPOUT(0x19642801CLL);
        }
        *(_DWORD *)(v52 + 16) = v55 - 1;
        goto LABEL_93;
      }
    }
    __break(0xC471u);
    JUMPOUT(0x1964285D4);
  }
  v97 = v96;
  ++*((_DWORD *)v96 + 2);
  if ((*(_BYTE *)(v95 + 26) & 3u) - 1 > 1)
  {
    this = 0;
  }
  else if ((*((_BYTE *)a2 + 45) & 2) == 0 && WebCore::RenderElement::hasSelfPaintingLayer(a2))
  {
    this = *(_BYTE *)(*(_QWORD *)(v95 + 32) + 22) & 1;
  }
  else
  {
    this = 1;
  }
  v52 = v97[4];
  if (v52)
    ++*(_DWORD *)(v52 + 16);
  v98 = *((_DWORD *)v97 + 2);
  if (!v98)
  {
    __break(0xC471u);
    JUMPOUT(0x196428538);
  }
  *((_DWORD *)v97 + 2) = v98 - 1;
  v99 = *(_DWORD *)(v95 + 8);
  if (!v99)
  {
LABEL_214:
    __break(0xC471u);
    JUMPOUT(0x196428518);
  }
  *(_DWORD *)(v95 + 8) = v99 - 1;
  if (v110)
  {
    v100 = *(_DWORD *)(v110 + 16);
    if (!v100)
    {
      __break(0xC471u);
      JUMPOUT(0x196428558);
    }
    *(_DWORD *)(v110 + 16) = v100 - 1;
  }
LABEL_80:
  if (v52
    || (this = WebCore::fullRepaintIsScheduled(a2, v21),
        (v58 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 40) + 8) + 1944)) == 0))
  {
    if ((this & 1) == 0)
      goto LABEL_82;
  }
  else
  {
    ++*(_DWORD *)(v58 + 16);
    v52 = v58;
    if ((this & 1) != 0)
      goto LABEL_91;
LABEL_82:
    v114 = 0uLL;
    v115 = v44 | (unint64_t)(v45 << 32);
    v116 = v46;
    LOBYTE(v117) = 0;
    v121 = 0;
    (*(void (**)(WTF **__return_ptr, const WebCore::RenderLayerModelObject *, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)a2 + 472))(v122, a2, &v115, v52, 0xC00000000);
    if (!v123)
    {
      __break(0xC471u);
      JUMPOUT(0x19642805CLL);
    }
    v114 = *(_OWORD *)v122;
    if (v113)
      WebCore::LayoutRect::expand(&v114, v112);
    if (v52)
    {
      v53 = *(WTF **)(v52 + 8);
      if (!v53)
      {
        v53 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v53 = 1;
        *((_QWORD *)v53 + 1) = v52;
        v105 = *(WTF **)(v52 + 8);
        *(_QWORD *)(v52 + 8) = v53;
        if (v105)
        {
          if (*(_DWORD *)v105 == 1)
          {
            WTF::fastFree(v105, v104);
            v53 = *(WTF **)(v52 + 8);
            if (!v53)
              goto LABEL_87;
          }
          else
          {
            --*(_DWORD *)v105;
          }
        }
      }
      ++*(_DWORD *)v53;
    }
    else
    {
      v53 = 0;
    }
LABEL_87:
    v122[0] = v53;
    WebCore::RenderObject::repaintUsingContainer((uint64_t)a2, (uint64_t *)v122, (WebCore::LayoutRect *)&v114, 1);
    this = (uint64_t)v122[0];
    if (v122[0])
    {
      if (*(_DWORD *)v122[0] == 1)
        this = WTF::fastFree(v122[0], v54);
      else
        --*(_DWORD *)v122[0];
    }
  }
  if (v52)
    goto LABEL_91;
LABEL_93:
  v56 = *(_DWORD *)(v4 + 16);
LABEL_94:
  if (!v56)
  {
    __break(0xC471u);
    JUMPOUT(0x196427FFCLL);
  }
  *(_DWORD *)(v4 + 16) = v56 - 1;
  if (v15)
  {
    v57 = *(_DWORD *)(v15 + 16);
    if (!v57)
    {
      __break(0xC471u);
      JUMPOUT(0x19642803CLL);
    }
    *(_DWORD *)(v15 + 16) = v57 - 1;
  }
  return this;
}

uint64_t WebCore::RenderObject::repaintRectangle(uint64_t this, const WebCore::LayoutRect *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  int v10;
  int v11;
  int v12;
  int v13;
  char v14;
  char v15;
  int v16;
  int v17;
  uint64_t v18;
  char v19;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 24) + 8) + 40) + 8) + 1944);
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 24) + 8) + 40) + 8) + 3382))
  {
    v4 = *(_DWORD *)a2;
    v3 = *((_DWORD *)a2 + 1);
    v5 = *((_QWORD *)a2 + 1);
    v6 = *(_QWORD *)(v2 + 248);
    v7 = *(unsigned int *)(v6 + 508);
    if ((_DWORD)v7 && (v7 = *(_QWORD *)(*(_QWORD *)(v6 + 496) + 8 * v7 - 8)) != 0)
    {
      v8 = *(_DWORD *)(v7 + 64);
      LODWORD(v7) = *(_DWORD *)(v7 + 68);
    }
    else
    {
      v8 = 0;
    }
    v9 = __OFADD__(v4, v8);
    v10 = v4 + v8;
    v11 = (v4 >> 31) + 0x7FFFFFFF;
    if (!v9)
      v11 = v10;
    v9 = __OFADD__(v3, (_DWORD)v7);
    v12 = v3 + v7;
    v13 = (v3 >> 31) + 0x7FFFFFFF;
    if (!v9)
      v13 = v12;
    v16 = v11;
    v17 = v13;
    v18 = v5;
    v19 = 1;
    v14 = 0;
    v15 = 0;
    return WebCore::RenderObject::issueRepaint();
  }
  return this;
}

uint64_t WTF::CheckedPtr<WebCore::RenderObject const,WTF::RawPtrTraits<WebCore::RenderObject const>>::operator=(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int v3;

  if (a2)
    ++*(_DWORD *)(a2 + 16);
  v2 = *(_QWORD *)result;
  *(_QWORD *)result = a2;
  if (v2)
  {
    v3 = *(_DWORD *)(v2 + 16);
    if (v3)
    {
      *(_DWORD *)(v2 + 16) = v3 - 1;
    }
    else
    {
      result = 286;
      __break(0xC471u);
    }
  }
  return result;
}

uint64_t WebCore::RenderObject::repaintUsingContainer(uint64_t this, uint64_t *a2, WebCore::LayoutRect *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int32x2_t *v20;
  int32x2_t v21;
  uint64_t v22;
  uint64_t v23;
  int32x2_t *v24;
  uint64_t v25;
  int32x2_t *v26;
  int32x2_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float v34;
  uint64_t v35;
  uint64_t v36;
  float *v37;
  int v38;
  double v39;
  double v40;
  int v41;
  double v42;
  double v43;
  int v44;
  int v45;
  BOOL v46;
  int v47;
  double v48;
  double v49;
  int v50;
  int v51;
  double v52;
  double v53;
  int v54;
  int v55;
  double v56;
  double v57;
  double v58;
  double v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  uint64_t v68;
  int32x2_t v69;
  int32x2_t v70;
  int32x2_t v71;
  int32x2_t v72;
  int v73;
  __int128 v74;
  uint64_t v75;
  unsigned int v76;
  unint64_t v77;
  signed int v78;
  unsigned int v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  int v93;
  uint64_t v94;
  unsigned int v95;
  unsigned int v96;
  int v97;
  int v98;
  unsigned int v99;
  unsigned int v100;
  uint64_t v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  unsigned int v107;
  unsigned int v108;
  int v109;
  int v110;
  unsigned int v111;
  int v112;
  int v113;
  unsigned int v114;
  unsigned int v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int v124;
  int v125;
  uint64_t v126;
  WebCore::RenderView *v127;
  uint64_t v128;
  WebCore::RenderView *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unsigned int v134;
  int v135;
  uint64_t v136;
  WebCore::RenderView *v137;
  WebCore::RenderView *v138;
  float64x2_t *v139;
  float v140;
  unsigned int v141;
  unsigned int v142;
  int v143;
  unsigned int v144;
  unsigned int v145;
  unsigned int v146;
  unsigned int v147;
  uint64_t v148;
  WTF *v149;
  int32x2_t v150;
  int v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t v154;
  float v155;
  float *v156;
  int v157;
  double v158;
  double v159;
  double v160;
  double v161;
  int v162;
  int v163;
  double v164;
  double v165;
  double v166;
  double v167;
  int v168;
  int v169;
  double v170;
  double v171;
  double v172;
  double v173;
  WTF *v174;
  void *v175;
  WTF *v176;
  WTF *v177;
  WTF *v178;
  uint64_t *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  void *v183;
  WTF *v184;
  uint64_t v185;
  WTF *v186;
  WTF *v187;
  _QWORD *v188;
  int v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  unsigned int v193;
  int i;
  uint64_t v195;
  uint64_t v196;
  int v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  _BOOL4 v202;
  int v203;
  uint64_t v204;
  int v205;
  uint64_t v206;
  uint64_t *v207;
  WebCore::Page *v208;
  uint64_t v209;
  uint64_t v210;
  _QWORD *v211;
  uint64_t v212;
  unint64_t v213;
  int32x2_t v214;
  int8x8_t v215;
  int8x8_t v216;
  float32x2_t v217;
  WTF *v218;
  void *v219;
  uint64_t v220;
  float v221;
  float v222;
  double v223;
  int v225;
  signed int v226;
  unsigned int v227;
  int v228;
  int v230;
  int v231;
  unsigned int v232;
  int v233;
  int v234;
  int v235;
  WTF *v236;
  void *v237;
  uint64_t v238;
  uint64_t v239;
  int v240;
  unint64_t v241;
  unint64_t v242;
  unint64_t v243;
  unsigned int v244;
  int j;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  int v249;
  unint64_t v250;
  unint64_t v251;
  unint64_t v252;
  unsigned int v253;
  int k;
  uint64_t v255;
  uint64_t v256;
  float v257;
  float v258;
  float v259;
  float v260;
  float v261;
  float v262;
  unsigned int v263;
  unsigned int v264;
  uint64_t v265;
  int32x2_t v266;
  uint64_t v267;
  BOOL v268;
  float v269;
  float v270;
  WebCore::RenderLayerCompositor *v271;
  WebCore::RenderLayerCompositor *v272;
  WTF *v273;
  void *v274;
  WebCore::RenderLayerCompositor *v275;
  WebCore::RenderLayerCompositor *v276;
  WTF *v277;
  void *v278;
  WebCore::RenderLayerCompositor *v279;
  WebCore::RenderLayerCompositor *v280;
  WTF *v281;
  void *v282;
  WebCore::RenderLayerCompositor *v283;
  WebCore::RenderLayerCompositor *v284;
  WTF *v285;
  void *v286;
  int v287;
  unsigned int v288;
  unsigned int v289;
  int v290;
  int v291;
  const WebCore::FilterOperations *v292;
  double v293;
  uint64_t v294;
  uint64_t v295;
  int v296;
  int v297;
  uint64_t v298;
  WebCore::RenderMultiColumnFlow *v299;
  char v300;
  int v301;
  int v302;
  double v303;
  int v305;
  double v306;
  int v308;
  int v309;
  WTF *v310;
  unsigned int v311;
  uint64_t v312;
  unsigned int v313;
  uint64_t v314;
  int v315;
  uint64_t v316;
  unsigned int v317;
  unsigned int v318;
  int v319;
  int v320;
  unsigned int v321;
  unsigned int v322;
  uint64_t v323;
  int v324;
  int v325;
  int v326;
  int v327;
  int v328;
  unsigned int v329;
  unsigned int v330;
  int v331;
  int v332;
  unsigned int v333;
  int v334;
  int v335;
  unsigned int v336;
  unsigned int v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  int v341;
  int v342;
  int v343;
  int v344;
  int v345;
  double v346;
  int v347;
  double v348;
  int v349;
  int v350;
  int v351;
  int v352;
  uint64_t v353;
  __int128 v354;
  float v355;
  float v356;
  float v357;
  float v358;
  __int128 v359;
  WTF *v360;
  __int128 v361;
  __int128 v362;

  if (*((int *)a3 + 2) < 1 || *((_DWORD *)a3 + 3) < 1)
    return this;
  v8 = this;
  this = *a2;
  if (!*a2 || (v9 = *(_QWORD *)(this + 8)) == 0)
  {
    v148 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 24) + 8) + 40) + 8) + 1944);
    if (v148)
    {
      this = *(_QWORD *)(v148 + 8);
      if (!this)
      {
        this = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)this = 1;
        *(_QWORD *)(this + 8) = v148;
        v310 = *(WTF **)(v148 + 8);
        *(_QWORD *)(v148 + 8) = this;
        if (v310)
        {
          if (*(_DWORD *)v310 == 1)
          {
            WTF::fastFree(v310, a2);
            this = *(_QWORD *)(v148 + 8);
            if (!this)
              goto LABEL_196;
          }
          else
          {
            --*(_DWORD *)v310;
          }
        }
      }
      ++*(_DWORD *)this;
    }
    else
    {
      this = 0;
    }
LABEL_196:
    v149 = (WTF *)*a2;
    *a2 = this;
    if (v149)
    {
      if (*(_DWORD *)v149 == 1)
      {
        WTF::fastFree(v149, a2);
        this = *a2;
      }
      else
      {
        --*(_DWORD *)v149;
      }
    }
    if (this)
    {
      v10 = 0;
      v9 = *(_QWORD *)(this + 8);
    }
    else
    {
      v9 = 0;
      v10 = 1;
    }
    goto LABEL_8;
  }
  v10 = 0;
LABEL_8:
  if ((*(_BYTE *)(v9 + 52) & 7) == 1 && (*(_BYTE *)(v9 + 53) & 2) != 0)
  {
    ++*(_DWORD *)(v9 + 16);
    this = WebCore::RenderFragmentedFlow::repaintRectangleInFragments(v9, a3);
    v287 = *(_DWORD *)(v9 + 16);
    if (!v287)
    {
      __break(0xC471u);
      JUMPOUT(0x19642A4D8);
    }
    *(_DWORD *)(v9 + 16) = v287 - 1;
    return this;
  }
  if ((v10 & 1) != 0)
    return this;
  v12 = *(_QWORD *)(this + 8);
  if (!v12)
    return this;
  if ((*(_BYTE *)(v8 + 21) & 0x40) == 0)
    goto LABEL_16;
  v188 = &unk_1EE2F9000;
  v189 = *(_DWORD *)(WebCore::RenderObject::rareDataMap(void)::map - 8);
  v190 = (~(v8 << 32) + v8) ^ ((unint64_t)(~(v8 << 32) + v8) >> 22);
  v191 = 9 * ((v190 + ~(v190 << 13)) ^ ((v190 + ~(v190 << 13)) >> 8));
  v192 = (v191 ^ (v191 >> 15)) + ~((v191 ^ (v191 >> 15)) << 27);
  v193 = v189 & ((v192 >> 31) ^ v192);
  for (i = 1; ; v193 = (v195 + i++) & v189)
  {
    v195 = v193;
    v196 = *(_QWORD *)(WebCore::RenderObject::rareDataMap(void)::map + 16 * v193);
    if (v196 != -1 && *(_QWORD *)(v196 + 8) == v8)
      break;
  }
  if (!v8 || !*(_BYTE *)(*(_QWORD *)(WebCore::RenderObject::rareDataMap(void)::map + 16 * v195 + 8) + 1))
    goto LABEL_16;
  v197 = 0;
  ++*(_DWORD *)(v8 + 16);
  v198 = v8;
  while (1)
  {
    ++*(_DWORD *)(v198 + 16);
    v199 = *(unsigned int *)(v198 + 40);
    v200 = v198;
    if (!(v199 | ((unint64_t)*(unsigned __int8 *)(v198 + 44) << 32)))
      goto LABEL_272;
    v201 = *(_QWORD *)((v199 | ((unint64_t)*(unsigned __int8 *)(v198 + 44) << 32)) + 8);
    v200 = v198;
    if (!v201)
      goto LABEL_272;
    v200 = v198;
    if (*(_BYTE *)(v201 + 46) != 26)
      goto LABEL_272;
    v352 = v197;
    v297 = *(_DWORD *)(v201 + 16) + 1;
    v353 = *(_QWORD *)((v199 | ((unint64_t)*(unsigned __int8 *)(v198 + 44) << 32)) + 8);
    *(_DWORD *)(v201 + 16) = v297;
    this = WebCore::RenderObject::isLegend((WebCore::RenderObject *)v198);
    v200 = v198;
    if ((this & 1) == 0)
    {
      v298 = *(_QWORD *)(v353 + 248);
      if (v298)
      {
        v299 = *(WebCore::RenderMultiColumnFlow **)(v298 + 8);
        if (v299)
        {
          v300 = 0;
          ++*((_DWORD *)v299 + 4);
LABEL_424:
          if ((*(_BYTE *)(v198 + 45) & 4) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x19642A58CLL);
          }
          this = WebCore::RenderMultiColumnFlow::findColumnSpannerPlaceholder(v299, (const WebCore::RenderBox *)v198);
          v200 = this;
          if (this)
            ++*(_DWORD *)(this + 16);
          v301 = *(_DWORD *)(v198 + 16);
          if (!v301)
          {
            __break(0xC471u);
            JUMPOUT(0x19642A56CLL);
          }
          *(_DWORD *)(v198 + 16) = v301 - 1;
          if ((v300 & 1) == 0)
          {
            v302 = *((_DWORD *)v299 + 4);
            if (!v302)
            {
              __break(0xC471u);
              JUMPOUT(0x19642A54CLL);
            }
            *((_DWORD *)v299 + 4) = v302 - 1;
          }
          v297 = *(_DWORD *)(v353 + 16);
          goto LABEL_432;
        }
      }
      else
      {
        v299 = 0;
      }
      v300 = 1;
      goto LABEL_424;
    }
LABEL_432:
    if (!v297)
    {
      __break(0xC471u);
      JUMPOUT(0x19642A52CLL);
    }
    *(_DWORD *)(v353 + 16) = v297 - 1;
    v197 = v352;
    v188 = (_QWORD *)&unk_1EE2F9000;
    if ((*(_BYTE *)(v200 + 21) & 0x40) == 0)
      goto LABEL_273;
LABEL_272:
    v239 = v188[114];
    v240 = *(_DWORD *)(v239 - 8);
    v241 = (~(v200 << 32) + v200) ^ ((unint64_t)(~(v200 << 32) + v200) >> 22);
    v242 = 9 * ((v241 + ~(v241 << 13)) ^ ((v241 + ~(v241 << 13)) >> 8));
    v243 = (v242 ^ (v242 >> 15)) + ~((v242 ^ (v242 >> 15)) << 27);
    v244 = v240 & ((v243 >> 31) ^ v243);
    for (j = 1; ; v244 = (v246 + j++) & v240)
    {
      v246 = v244;
      v247 = *(_QWORD *)(v239 + 16 * v244);
      if (v247 != -1 && *(_QWORD *)(v247 + 8) == v200)
        break;
    }
    if (*(_BYTE *)(*(_QWORD *)(v239 + 16 * v246 + 8) + 1))
    {
      v202 = 1;
    }
    else
    {
LABEL_273:
      if ((*(_BYTE *)(v198 + 21) & 0x40) != 0)
      {
        v248 = v188[114];
        v249 = *(_DWORD *)(v248 - 8);
        v250 = (~(v198 << 32) + v198) ^ ((unint64_t)(~(v198 << 32) + v198) >> 22);
        v251 = 9 * ((v250 + ~(v250 << 13)) ^ ((v250 + ~(v250 << 13)) >> 8));
        v252 = (v251 ^ (v251 >> 15)) + ~((v251 ^ (v251 >> 15)) << 27);
        v253 = v249 & ((v252 >> 31) ^ v252);
        for (k = 1; ; ++k)
        {
          v255 = v253;
          v256 = *(_QWORD *)(v248 + 16 * v253);
          if (v256 != -1 && *(_QWORD *)(v256 + 8) == v198)
            break;
          v253 = (v255 + k) & v249;
        }
        v202 = *(unsigned __int8 *)(*(_QWORD *)(v248 + 16 * v255 + 8) + 1) != 0;
      }
      else
      {
        v202 = 0;
      }
    }
    if (v198 == v12)
      v197 |= v202;
    if (!v202)
      break;
    v203 = *(_DWORD *)(v198 + 16);
    if (!v203)
    {
      __break(0xC471u);
      JUMPOUT(0x196429D64);
    }
    *(_DWORD *)(v198 + 16) = v203 - 1;
    v204 = *(_QWORD *)(v200 + 32);
    if (v204)
    {
      v198 = *(_QWORD *)(v204 + 8);
      if (v198)
        ++*(_DWORD *)(v198 + 16);
    }
    else
    {
      v198 = 0;
    }
    v205 = *(_DWORD *)(v200 + 16);
    if (!v205)
    {
      __break(0xC471u);
      JUMPOUT(0x196429D84);
    }
    *(_DWORD *)(v200 + 16) = v205 - 1;
    if (!v198)
      goto LABEL_16;
  }
  v362 = *(_OWORD *)a3;
  this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v198 + 424))(v198);
  v220 = *(_QWORD *)(*(_QWORD *)(this + 8) + 16);
  if ((*(_BYTE *)(v220 + 52) & 0xF) != 0)
  {
    v222 = *(float *)(v220 + 48);
    v221 = *(float *)(v220 + 56);
    if ((*(_BYTE *)(v220 + 52) & 0x10) != 0)
    {
      v268 = v222 < 3.0;
      v269 = v222 + -3.0;
      if (v222 < 3.0)
        v222 = 3.0;
      v270 = 0.0;
      if (!v268)
        v270 = v269;
      goto LABEL_386;
    }
  }
  else
  {
    v221 = *(float *)(v220 + 56);
    v222 = 0.0;
    if ((*(_BYTE *)(v220 + 52) & 0x10) == 0)
      goto LABEL_307;
    v270 = -3.0;
LABEL_386:
    if (v270 < 0.0)
      v270 = 0.0;
    v221 = v221 + v270;
  }
LABEL_307:
  v223 = fmaxf(v222 + v221, 0.0) * 64.0;
  if (v223 >= 2147483650.0 || v223 <= -2147483650.0)
  {
    if (v223 >= 2147483650.0)
    {
      v225 = 0x7FFFFFFF;
    }
    else
    {
      if (v223 > -2147483650.0)
        goto LABEL_311;
      v225 = 0x80000000;
    }
  }
  else
  {
LABEL_311:
    v225 = (int)v223;
  }
  v226 = v362 - v225;
  if (__OFSUB__((_DWORD)v362, v225))
    v226 = (v362 >> 31) + 0x7FFFFFFF;
  LODWORD(v362) = v226;
  v227 = DWORD2(v362) + v225;
  if (__OFADD__(DWORD2(v362), v225))
    v227 = (DWORD2(v362) >> 31) + 0x7FFFFFFF;
  v46 = __OFADD__(v227, v225);
  v228 = v227 + v225;
  if (v46)
    v228 = (v227 >> 31) + 0x7FFFFFFF;
  DWORD2(v362) = v228;
  if (v223 >= 2147483650.0 || v223 <= -2147483650.0)
  {
    if (v223 >= 2147483650.0)
    {
      v230 = 0x7FFFFFFF;
    }
    else
    {
      if (v223 > -2147483650.0)
        goto LABEL_322;
      v230 = 0x80000000;
    }
  }
  else
  {
LABEL_322:
    v230 = (int)v223;
  }
  v231 = DWORD1(v362) - v230;
  if (__OFSUB__(DWORD1(v362), v230))
    v231 = (DWORD1(v362) >> 31) + 0x7FFFFFFF;
  DWORD1(v362) = v231;
  v232 = HIDWORD(v362) + v230;
  if (__OFADD__(HIDWORD(v362), v230))
    v232 = (HIDWORD(v362) >> 31) + 0x7FFFFFFF;
  v46 = __OFADD__(v232, v230);
  v233 = v232 + v230;
  if (v46)
    v233 = (v232 >> 31) + 0x7FFFFFFF;
  HIDWORD(v362) = v233;
  if ((v197 & 1) != 0)
  {
    v234 = *(_DWORD *)(v198 + 16);
    if ((*(_BYTE *)(v198 + 45) & 0x10) != 0)
    {
      *(_DWORD *)(v198 + 16) = v234 + 1;
      *(float *)&v354 = (float)v226 * 0.015625;
      *((float *)&v354 + 1) = (float)v231 * 0.015625;
      *((float *)&v354 + 2) = *(float *)&v354 + (float)((float)v228 * 0.015625);
      *((float *)&v354 + 3) = *((float *)&v354 + 1);
      v355 = *((float *)&v354 + 2);
      v356 = *((float *)&v354 + 1) + (float)((float)v233 * 0.015625);
      v357 = *(float *)&v354;
      v358 = v356;
      WebCore::RenderObject::localToContainerQuad(v12, (float *)&v354, v198, 2u, &v359);
      LODWORD(v361) = WebCore::FloatQuad::boundingBox((WebCore::FloatQuad *)&v359);
      *(_QWORD *)((char *)&v361 + 4) = __PAIR64__(v289, v288);
      HIDWORD(v361) = v290;
      WebCore::LayoutRect::LayoutRect((int *)&v362, (const WebCore::FloatRect *)&v361);
      this = WebCore::RenderObject::repaintRectangle(v198, (const WebCore::LayoutRect *)&v362);
      v291 = *(_DWORD *)(v198 + 16);
      if (!v291)
      {
        __break(0xC471u);
        JUMPOUT(0x19642A4F8);
      }
      v234 = v291 - 1;
      *(_DWORD *)(v198 + 16) = v291 - 1;
    }
  }
  else
  {
    LOBYTE(v359) = 0;
    LOBYTE(v360) = 0;
    this = WebCore::RenderObject::repaintRectangle(v12, (int *)&v362, 1, 0, &v359);
    v234 = *(_DWORD *)(v198 + 16);
  }
  if (!v234)
  {
    __break(0xC471u);
    JUMPOUT(0x196429DD4);
  }
  *(_DWORD *)(v198 + 16) = v234 - 1;
  if (v200)
  {
    v235 = *(_DWORD *)(v200 + 16);
    if (!v235)
    {
      __break(0xC471u);
      JUMPOUT(0x196429DF4);
    }
    *(_DWORD *)(v200 + 16) = v235 - 1;
  }
LABEL_16:
  v13 = *(_QWORD *)(*a2 + 8);
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 88) + 32) + 32) + 20))
  {
    this = *(_QWORD *)(v13 + 144);
    if (this)
    {
      this = WebCore::RenderLayer::requiresFullLayerImageForFilters((WebCore::RenderLayer *)this, (uint64_t)a2, a3);
      v294 = *a2;
      if ((this & 1) != 0)
      {
        v295 = *(_QWORD *)(*(_QWORD *)(v294 + 8) + 144);
        if (!v295)
          return WebCore::RenderLayer::setFilterBackendNeedsRepaintingInRect(0, a3, v292, v293);
        ++*(_DWORD *)(v295 + 8);
        this = WebCore::RenderLayer::setFilterBackendNeedsRepaintingInRect(v295, a3, v292, v293);
        v296 = *(_DWORD *)(v295 + 8);
        if (!v296)
        {
          __break(0xC471u);
          JUMPOUT(0x19642A5BCLL);
        }
        *(_DWORD *)(v295 + 8) = v296 - 1;
        return this;
      }
      v13 = *(_QWORD *)(v294 + 8);
    }
  }
  if (*(_BYTE *)(v13 + 46) == 49)
  {
    v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 24) + 8) + 40) + 8) + 1944);
    ++*(_DWORD *)(v14 + 16);
    if ((*(_BYTE *)(v14 + 21) & 0x80) == 0)
      goto LABEL_95;
    if ((*(_BYTE *)(v14 + 45) & 0x10) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196429990);
    }
    v15 = *(_QWORD *)(*(_QWORD *)(v14 + 144) + 256);
    if (!v15)
    {
LABEL_95:
      v74 = *(_OWORD *)a3;
      goto LABEL_96;
    }
    if (!*(_BYTE *)(v15 + 290))
    {
      v136 = *(_QWORD *)(v15 + 8);
      if ((*(_BYTE *)(v136 + 24) & 1) != 0)
      {
        v137 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v136 + 32) + 24)
                                                                           + 8)
                                                               + 40)
                                                   + 8)
                                       + 1944);
        this = *((_QWORD *)v137 + 50);
        if (!this)
        {
          v275 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
          this = WebCore::RenderLayerCompositor::RenderLayerCompositor(v275, v137);
          v276 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v137 + 50);
          *((_QWORD *)v137 + 50) = this;
          if (v276)
          {
            WebCore::RenderLayerCompositor::~RenderLayerCompositor(v276);
            WTF::fastFree(v277, v278);
            this = *((_QWORD *)v137 + 50);
          }
        }
        if (!*(_BYTE *)(this + 198))
        {
          v138 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 8) + 32)
                                                                                         + 24)
                                                                             + 8)
                                                                 + 40)
                                                     + 8)
                                         + 1944);
          this = *((_QWORD *)v138 + 50);
          if (!this)
          {
            v283 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
            this = WebCore::RenderLayerCompositor::RenderLayerCompositor(v283, v138);
            v284 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v138 + 50);
            *((_QWORD *)v138 + 50) = this;
            if (v284)
            {
              WebCore::RenderLayerCompositor::~RenderLayerCompositor(v284);
              WTF::fastFree(v285, v286);
              this = *((_QWORD *)v138 + 50);
            }
          }
          if (*(_DWORD *)(this + 216) != 2)
          {
            v361 = *(_OWORD *)a3;
            v139 = *(float64x2_t **)(*(_QWORD *)(v14 + 144) + 200);
            if (v139)
            {
              v140 = WebCore::Document::deviceScaleFactor(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 24) + 8)
                                                                                            + 40)
                                                                                + 8));
              LODWORD(v362) = WebCore::snapRectToDevicePixels((int *)&v361, v140);
              *(_QWORD *)((char *)&v362 + 4) = __PAIR64__(v142, v141);
              HIDWORD(v362) = v143;
              WebCore::TransformationMatrix::mapRect(v139, (const WebCore::FloatRect *)&v362);
              *(_QWORD *)&v354 = __PAIR64__(v145, v144);
              *((_QWORD *)&v354 + 1) = __PAIR64__(v147, v146);
              this = (uint64_t)WebCore::LayoutRect::LayoutRect((int *)&v359, (const WebCore::FloatRect *)&v354);
              v74 = v359;
LABEL_96:
              v361 = v74;
            }
            v75 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 24) + 8) + 40) + 8);
            if (*(_BYTE *)(v75 + 3382) || SDWORD2(v361) < 1 || SHIDWORD(v361) < 1)
              goto LABEL_173;
            v76 = v361;
            v77 = DWORD1(v361);
            v78 = v361 + DWORD2(v361);
            if (__OFADD__((_DWORD)v361, DWORD2(v361)))
              v78 = (v361 >> 31) + 0x7FFFFFFF;
            if (v78 > 2147483583)
            {
              v79 = 0x1FFFFFF;
            }
            else if (v78 < 0)
            {
              v79 = -(-v78 >> 6);
            }
            else
            {
              v79 = (v78 + 63) >> 6;
            }
            v80 = (uint64_t)v361 >> 38;
            v81 = DWORD1(v361) + HIDWORD(v361);
            if (__OFADD__(DWORD1(v361), HIDWORD(v361)))
              v81 = (DWORD1(v361) >> 31) + 0x7FFFFFFF;
            v82 = ((int)v361 >> 6);
            if (v81 > 2147483583)
            {
              v83 = 0x1FFFFFF;
            }
            else if (v81 < 0)
            {
              v83 = -(-v81 >> 6);
            }
            else
            {
              v83 = (v81 + 63) >> 6;
            }
            v84 = v79 - v82;
            v85 = v83 - v80;
            *(_QWORD *)&v362 = v82 | (v80 << 32);
            *((_QWORD *)&v362 + 1) = v84 | (v85 << 32);
            v86 = *(_QWORD *)(v75 + 528);
            if (v86 && (v87 = *(_QWORD *)(v86 + 8)) != 0)
            {
              v88 = *(_QWORD *)(v87 + 120);
              if (v88)
              {
                v89 = *(_QWORD *)(v88 + 8);
                if (v89)
                {
                  v90 = *(_QWORD *)(v89 + 64) & 0xFFFFFFFFFFFFLL;
                  if ((int)v84 > 0x1FFFFFF || (int)v85 > 0x1FFFFFF)
                  {
                    if (v90 && (*(_BYTE *)((*(_QWORD *)(v89 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) != 0)
                    {
                      this = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)(v14 + 248)
                                                                                             + 64)
                                                                                 + 832))(*(_QWORD *)(v14 + 248) + 64, 0, 1);
                      v311 = (_DWORD)v84 << 6;
                      if ((int)v84 < -33554432)
                        v311 = 0x80000000;
                      if ((int)v84 <= 0x1FFFFFF)
                        v312 = v311;
                      else
                        v312 = 0x7FFFFFFFLL;
                      v313 = (_DWORD)v85 << 6;
                      if ((int)v85 < -33554432)
                        v313 = 0x80000000;
                      v314 = (int)v85 <= 0x1FFFFFF ? v313 : 0x7FFFFFFFLL;
                      if ((int)v312 >= 1 && (int)v314 >= 1)
                      {
                        v315 = v77 & 0xFFFFFFC0;
                        if ((int)this >= -33554432)
                          v316 = ((_DWORD)this << 6);
                        else
                          v316 = 0x80000000;
                        if ((int)this > 0x1FFFFFF)
                          v316 = 0x7FFFFFFFLL;
                        v317 = v76 & 0xFFFFFFC0;
                        if (SHIDWORD(this) >= -33554432)
                          v318 = HIDWORD(this) << 6;
                        else
                          v318 = 0x80000000;
                        if (SHIDWORD(this) > 0x1FFFFFF)
                          v318 = 0x7FFFFFFF;
                        if (v318 == 0x80000000)
                          v319 = 0x7FFFFFFF;
                        else
                          v319 = -v318;
                        if (v316 == 0x80000000)
                          v320 = 0x7FFFFFFF;
                        else
                          v320 = -(int)v316;
                        v321 = v317 + v320;
                        if (__OFADD__(v317, v320))
                          v321 = (v76 >> 31) + 0x7FFFFFFF;
                        v322 = v315 + v319;
                        if (__OFADD__(v315, v319))
                          v322 = (v77 >> 31) + 0x7FFFFFFF;
                        v323 = *(_QWORD *)v90;
                        if ((*(_BYTE *)(v90 + 22) & 1) != 0)
                        {
                          v346 = (float)(*(int (**)(uint64_t))(v323 + 1352))(v90) * 64.0;
                          if (v346 >= 2147483650.0)
                          {
                            v347 = 0x7FFFFFFF;
                          }
                          else if (v346 > -2147483650.0)
                          {
                            v347 = (int)v346;
                          }
                          else
                          {
                            v347 = 0x80000000;
                          }
                          v348 = (float)(*(int (**)(uint64_t))(*(_QWORD *)v90 + 1360))(v90) * 64.0;
                          if (v348 >= 2147483650.0)
                          {
                            v349 = 0x7FFFFFFF;
                          }
                          else if (v348 > -2147483650.0)
                          {
                            v349 = (int)v348;
                          }
                          else
                          {
                            v349 = 0x80000000;
                          }
                          v350 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v90 + 88) + 40) + 584) << 23;
                          v324 = v349 & (v350 >> 31);
                          v325 = v347 & (v350 >> 31);
                          v323 = *(_QWORD *)v90;
                        }
                        else
                        {
                          v324 = 0;
                          v325 = 0;
                        }
                        v326 = (*(uint64_t (**)(uint64_t))(v323 + 920))(v90);
                        v328 = v327;
                        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v90 + 992))(v90);
                        v330 = (v329 >> 31) + 0x7FFFFFFF;
                        if (!__OFADD__(v329, v328))
                          v330 = v329 + v328;
                        v46 = __OFADD__(v330, v325);
                        v331 = v330 + v325;
                        v332 = (v330 >> 31) + 0x7FFFFFFF;
                        if (!v46)
                          v332 = v331;
                        v333 = this + v326;
                        if (__OFADD__((_DWORD)this, v326))
                          v333 = (this >> 31) + 0x7FFFFFFF;
                        v46 = __OFADD__(v333, v324);
                        v334 = v333 + v324;
                        v335 = (v333 >> 31) + 0x7FFFFFFF;
                        if (!v46)
                          v335 = v334;
                        v46 = __OFADD__(v321, v332);
                        v336 = v321 + v332;
                        if (v46)
                          v336 = (v321 >> 31) + 0x7FFFFFFF;
                        v46 = __OFADD__(v322, v335);
                        v337 = v322 + v335;
                        if (v46)
                          v337 = (v322 >> 31) + 0x7FFFFFFF;
                        v338 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v90 + 24) + 8) + 40) + 8)
                                         + 1944);
                        if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v338 + 24) + 8) + 40) + 8)
                                       + 3382))
                        {
                          v339 = *(_QWORD *)(v338 + 248);
                          v340 = *(unsigned int *)(v339 + 508);
                          if ((_DWORD)v340 && (v340 = *(_QWORD *)(*(_QWORD *)(v339 + 496) + 8 * v340 - 8)) != 0)
                          {
                            v341 = *(_DWORD *)(v340 + 64);
                            LODWORD(v340) = *(_DWORD *)(v340 + 68);
                          }
                          else
                          {
                            v341 = 0;
                          }
                          v46 = __OFADD__(v336, v341);
                          v342 = v336 + v341;
                          v343 = (v336 >> 31) + 0x7FFFFFFF;
                          if (!v46)
                            v343 = v342;
                          v46 = __OFADD__(v337, (_DWORD)v340);
                          v344 = v337 + v340;
                          v345 = (v337 >> 31) + 0x7FFFFFFF;
                          if (!v46)
                            v345 = v344;
                          *(_QWORD *)&v359 = __PAIR64__(v345, v343);
                          *((_QWORD *)&v359 + 1) = v312 | (v314 << 32);
LABEL_172:
                          LOBYTE(v360) = 1;
                          LOBYTE(v354) = 0;
                          LOBYTE(v355) = 0;
                          this = WebCore::RenderObject::issueRepaint(v90, &v359, 1, 0, &v354);
                        }
                      }
                    }
                  }
                  else if (v90 && (*(_BYTE *)((*(_QWORD *)(v89 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) != 0)
                  {
                    this = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)(v14 + 248)
                                                                                           + 64)
                                                                               + 832))(*(_QWORD *)(v14 + 248) + 64, 0, 1);
                    v91 = (int)v84 >= -33554432 ? ((_DWORD)v84 << 6) : 0x80000000;
                    v92 = (int)v85 >= -33554432 ? ((_DWORD)v85 << 6) : 0x80000000;
                    if ((int)v91 >= 1 && (int)v92 >= 1)
                    {
                      v93 = v77 & 0xFFFFFFC0;
                      if ((int)this >= -33554432)
                        v94 = ((_DWORD)this << 6);
                      else
                        v94 = 0x80000000;
                      if ((int)this > 0x1FFFFFF)
                        v94 = 0x7FFFFFFFLL;
                      v95 = v76 & 0xFFFFFFC0;
                      if (SHIDWORD(this) >= -33554432)
                        v96 = HIDWORD(this) << 6;
                      else
                        v96 = 0x80000000;
                      if (SHIDWORD(this) > 0x1FFFFFF)
                        v96 = 0x7FFFFFFF;
                      if (v96 == 0x80000000)
                        v97 = 0x7FFFFFFF;
                      else
                        v97 = -v96;
                      if (v94 == 0x80000000)
                        v98 = 0x7FFFFFFF;
                      else
                        v98 = -(int)v94;
                      v99 = v95 + v98;
                      if (__OFADD__(v95, v98))
                        v99 = (v76 >> 31) + 0x7FFFFFFF;
                      v100 = v93 + v97;
                      if (__OFADD__(v93, v97))
                        v100 = (v77 >> 31) + 0x7FFFFFFF;
                      v101 = *(_QWORD *)v90;
                      if ((*(_BYTE *)(v90 + 22) & 1) != 0)
                      {
                        v303 = (float)(*(int (**)(uint64_t))(v101 + 1352))(v90) * 64.0;
                        if (v303 >= 2147483650.0 || v303 <= -2147483650.0)
                        {
                          if (v303 > -2147483650.0)
                            v351 = (int)v303;
                          else
                            v351 = 0x80000000;
                          if (v303 < 2147483650.0)
                            v305 = v351;
                          else
                            v305 = 0x7FFFFFFF;
                        }
                        else
                        {
                          v305 = (int)v303;
                        }
                        v306 = (float)(*(int (**)(uint64_t))(*(_QWORD *)v90 + 1360))(v90) * 64.0;
                        if (v306 >= 2147483650.0 || v306 <= -2147483650.0)
                        {
                          if (v306 >= 2147483650.0)
                          {
                            v308 = 0x7FFFFFFF;
                          }
                          else if (v306 > -2147483650.0)
                          {
                            v308 = (int)v306;
                          }
                          else
                          {
                            v308 = 0x80000000;
                          }
                        }
                        else
                        {
                          v308 = (int)v306;
                        }
                        v309 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v90 + 88) + 40) + 584) << 23;
                        v102 = v308 & (v309 >> 31);
                        v103 = v305 & (v309 >> 31);
                        v101 = *(_QWORD *)v90;
                      }
                      else
                      {
                        v102 = 0;
                        v103 = 0;
                      }
                      v104 = (*(uint64_t (**)(uint64_t))(v101 + 920))(v90);
                      v106 = v105;
                      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v90 + 992))(v90);
                      v108 = (v107 >> 31) + 0x7FFFFFFF;
                      if (!__OFADD__(v107, v106))
                        v108 = v107 + v106;
                      v46 = __OFADD__(v108, v103);
                      v109 = v108 + v103;
                      v110 = (v108 >> 31) + 0x7FFFFFFF;
                      if (!v46)
                        v110 = v109;
                      v111 = this + v104;
                      if (__OFADD__((_DWORD)this, v104))
                        v111 = (this >> 31) + 0x7FFFFFFF;
                      v46 = __OFADD__(v111, v102);
                      v112 = v111 + v102;
                      v113 = (v111 >> 31) + 0x7FFFFFFF;
                      if (!v46)
                        v113 = v112;
                      v46 = __OFADD__(v99, v110);
                      v114 = v99 + v110;
                      if (v46)
                        v114 = (v99 >> 31) + 0x7FFFFFFF;
                      v46 = __OFADD__(v100, v113);
                      v115 = v100 + v113;
                      if (v46)
                        v115 = (v100 >> 31) + 0x7FFFFFFF;
                      v116 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v90 + 24) + 8) + 40) + 8)
                                       + 1944);
                      if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v116 + 24) + 8) + 40) + 8)
                                     + 3382))
                      {
                        v117 = v91 & 0x3FFFFFFFFFLL | ((unint64_t)(v92 >> 6) << 38);
                        v118 = *(_QWORD *)(v116 + 248);
                        v119 = *(unsigned int *)(v118 + 508);
                        if ((_DWORD)v119 && (v119 = *(_QWORD *)(*(_QWORD *)(v118 + 496) + 8 * v119 - 8)) != 0)
                        {
                          v120 = *(_DWORD *)(v119 + 64);
                          LODWORD(v119) = *(_DWORD *)(v119 + 68);
                        }
                        else
                        {
                          v120 = 0;
                        }
                        v46 = __OFADD__(v114, v120);
                        v121 = v114 + v120;
                        v122 = (v114 >> 31) + 0x7FFFFFFF;
                        if (!v46)
                          v122 = v121;
                        v46 = __OFADD__(v115, (_DWORD)v119);
                        v123 = v115 + v119;
                        v124 = (v115 >> 31) + 0x7FFFFFFF;
                        if (!v46)
                          v124 = v123;
                        *(_QWORD *)&v359 = __PAIR64__(v124, v122);
                        *((_QWORD *)&v359 + 1) = v117;
                        goto LABEL_172;
                      }
                    }
                  }
LABEL_173:
                  v125 = *(_DWORD *)(v14 + 16);
                  if (v125)
                  {
                    *(_DWORD *)(v14 + 16) = v125 - 1;
                    return this;
                  }
LABEL_348:
                  __break(0xC471u);
                  JUMPOUT(0x196429970);
                }
              }
              v152 = (uint64_t *)(v14 + 248);
              v153 = *(_QWORD *)(v14 + 248);
              v154 = *(_QWORD *)(v87 + 24);
              v155 = 1.0;
              if (v154)
              {
                v156 = *(float **)(v154 + 8);
                if (v156)
                {
                  v157 = (*(_DWORD *)v156)++;
                  v155 = v156[91];
                  if (v157)
                  {
                    *(_DWORD *)v156 = v157;
                  }
                  else
                  {
                    WebCore::Page::~Page((WebCore::Page *)v156);
                    WTF::fastFree(v236, v237);
                  }
                }
              }
            }
            else
            {
              v152 = (uint64_t *)(v14 + 248);
              v153 = *(_QWORD *)(v14 + 248);
              v155 = 1.0;
            }
            v158 = (double)(int)v361 * 0.015625;
            if (v158 < 0.0)
              v159 = round((v158 + (double)-(int)v361) * v155) / v155 - (double)-(int)v361;
            else
              v159 = round(v158 * v155) / v155;
            v160 = (double)SDWORD1(v361) * 0.015625;
            if (v160 < 0.0)
              v161 = round((v160 + (double)-DWORD1(v361)) * v155) / v155
                   - (double)-DWORD1(v361);
            else
              v161 = round(v160 * v155) / v155;
            v162 = v361 & 0x3F;
            if ((int)v361 <= 0)
              v162 = -(-(int)v361 & 0x3F);
            v163 = v162 + DWORD2(v361);
            if (__OFADD__(v162, DWORD2(v361)))
              v163 = (v162 >> 31) + 0x7FFFFFFF;
            v164 = (double)v163 * 0.015625;
            if (v164 < 0.0)
              v165 = round((v164 + (double)-v163) * v155) / v155 - (double)-v163;
            else
              v165 = round(v164 * v155) / v155;
            v166 = (double)v162 * 0.015625;
            if (v166 < 0.0)
              v167 = round((v166 + (double)-v162) * v155) / v155 - (double)-v162;
            else
              v167 = round(v166 * v155) / v155;
            if (SDWORD1(v361) <= 0)
              v168 = -(-DWORD1(v361) & 0x3F);
            else
              v168 = BYTE4(v361) & 0x3F;
            v169 = v168 + HIDWORD(v361);
            if (__OFADD__(v168, HIDWORD(v361)))
              v169 = (v168 >> 31) + 0x7FFFFFFF;
            v170 = (double)v169 * 0.015625;
            if (v170 < 0.0)
              v171 = round((v170 + (double)-v169) * v155) / v155 - (double)-v169;
            else
              v171 = round(v170 * v155) / v155;
            v172 = (double)v168 * 0.015625;
            if (v172 < 0.0)
              v173 = round((v172 + (double)-v168) * v155) / v155 - (double)-v168;
            else
              v173 = round(v172 * v155) / v155;
            if (*(_BYTE *)(v153 + 1371))
            {
              v257 = v165;
              v258 = v167;
              v259 = v257 - v258;
              if (v259 > 0.0)
              {
                v260 = v171;
                v261 = v173;
                v262 = v260 - v261;
                if (v262 > 0.0)
                {
                  *(float *)&v263 = v161;
                  *(float *)&v264 = v159;
                  *(_QWORD *)&v359 = __PAIR64__(v263, v264);
                  *((_QWORD *)&v359 + 1) = __PAIR64__(LODWORD(v262), LODWORD(v259));
                  v265 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v153 + 64) + 832))(v153 + 64, 0, 1);
                  v266.i32[0] = -(int)v265;
                  v266.i32[1] = (unint64_t)-(uint64_t)(v265 & 0xFFFFFFFF00000000) >> 32;
                  *(float32x2_t *)&v359 = vadd_f32(*(float32x2_t *)&v359, vcvt_f32_s32(v266));
                  v267 = *(unsigned int *)(v153 + 1068);
                  if ((_DWORD)v267 == *(_DWORD *)(v153 + 1064))
                  {
                    WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::FloatRect&>(v153 + 1056, (unint64_t)&v359);
                  }
                  else
                  {
                    *(_OWORD *)(*(_QWORD *)(v153 + 1056) + 16 * v267) = v359;
                    ++*(_DWORD *)(v153 + 1068);
                  }
                }
              }
            }
            v174 = *(WTF **)(v14 + 280);
            if (v174)
            {
              v359 = v362;
              v360 = 0;
              this = (uint64_t)WebCore::Region::unite(v174, (const WebCore::Region *)&v359);
              v176 = v360;
              v360 = 0;
              if (v176)
              {
                v177 = (WTF *)*((_QWORD *)v176 + 18);
                if ((WTF *)((char *)v176 + 160) != v177 && v177)
                {
                  *((_QWORD *)v176 + 18) = 0;
                  *((_DWORD *)v176 + 38) = 0;
                  WTF::fastFree(v177, v175);
                }
                v178 = *(WTF **)v176;
                if ((WTF *)((char *)v176 + 16) != *(WTF **)v176 && v178)
                {
                  *(_QWORD *)v176 = 0;
                  *((_DWORD *)v176 + 2) = 0;
                  WTF::fastFree(v178, v175);
                }
                this = WTF::fastFree(v176, v175);
              }
              v179 = *(uint64_t **)(v14 + 280);
              v180 = v179[2];
              if (v180)
              {
                if ((*(_DWORD *)(v180 + 12) * *(_DWORD *)(v180 + 156)) >= 0x101)
                {
                  v181 = *v179;
                  v182 = v179[1];
                  this = WTF::fastMalloc((WTF *)0x18);
                  *(_QWORD *)this = v181;
                  *(_QWORD *)(this + 8) = v182;
                  *(_QWORD *)(this + 16) = 0;
                  v184 = *(WTF **)(v14 + 280);
                  *(_QWORD *)(v14 + 280) = this;
                  if (v184)
                  {
                    v185 = *((_QWORD *)v184 + 2);
                    *((_QWORD *)v184 + 2) = 0;
                    if (v185)
                    {
                      v186 = *(WTF **)(v185 + 144);
                      if ((WTF *)(v185 + 160) != v186 && v186)
                      {
                        *(_QWORD *)(v185 + 144) = 0;
                        *(_DWORD *)(v185 + 152) = 0;
                        WTF::fastFree(v186, v183);
                      }
                      v187 = *(WTF **)v185;
                      if (v185 + 16 != *(_QWORD *)v185 && v187)
                      {
                        *(_QWORD *)v185 = 0;
                        *(_DWORD *)(v185 + 8) = 0;
                        WTF::fastFree(v187, v183);
                      }
                      WTF::fastFree((WTF *)v185, v183);
                    }
                    this = WTF::fastFree(v184, v183);
                  }
                }
              }
            }
            else
            {
              this = WebCore::LocalFrameView::repaintContentRectangle(*v152, (const WebCore::IntRect *)&v362);
            }
            goto LABEL_173;
          }
        }
      }
    }
    v16 = *(_DWORD *)(v14 + 16);
    if (!v16)
      goto LABEL_348;
    *(_DWORD *)(v14 + 16) = v16 - 1;
  }
  v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 24) + 8) + 40) + 8) + 1944)
                  + 400);
  if (!v17 || !*(_BYTE *)(v17 + 195))
    return this;
  v18 = *(_QWORD *)(*(_QWORD *)(*a2 + 8) + 144);
  if (v18)
    ++*(_DWORD *)(v18 + 8);
  v19 = *(_QWORD *)(v18 + 256);
  if (!v19)
    goto LABEL_180;
  if (!*(_BYTE *)(v19 + 290))
  {
    v126 = *(_QWORD *)(v19 + 8);
    if ((*(_BYTE *)(v126 + 24) & 1) != 0)
    {
      v127 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v126 + 32) + 24)
                                                                         + 8)
                                                             + 40)
                                                 + 8)
                                     + 1944);
      v128 = *((_QWORD *)v127 + 50);
      if (!v128)
      {
        v271 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
        v128 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v271, v127);
        v272 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v127 + 50);
        *((_QWORD *)v127 + 50) = v128;
        if (v272)
        {
          WebCore::RenderLayerCompositor::~RenderLayerCompositor(v272);
          WTF::fastFree(v273, v274);
          v128 = *((_QWORD *)v127 + 50);
        }
      }
      if (!*(_BYTE *)(v128 + 198))
      {
        v129 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v19 + 8) + 32)
                                                                                       + 24)
                                                                           + 8)
                                                               + 40)
                                                   + 8)
                                       + 1944);
        v130 = *((_QWORD *)v129 + 50);
        if (!v130)
        {
          v279 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
          v130 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v279, v129);
          v280 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v129 + 50);
          *((_QWORD *)v129 + 50) = v130;
          if (v280)
          {
            WebCore::RenderLayerCompositor::~RenderLayerCompositor(v280);
            WTF::fastFree(v281, v282);
            v130 = *((_QWORD *)v129 + 50);
          }
        }
        if (*(_DWORD *)(v130 + 216) != 2)
        {
LABEL_180:
          v359 = *(_OWORD *)a3;
          v131 = v18;
          do
          {
            v132 = v131;
            v131 = *(_QWORD *)(v131 + 40);
          }
          while (v131);
          v133 = WebCore::RenderLayer::offsetFromAncestor(v18, v132, 0);
          v134 = (v359 >> 31) + 0x7FFFFFFF;
          if (!__OFADD__((_DWORD)v359, (_DWORD)v133))
            v134 = v359 + v133;
          v135 = (DWORD1(v359) >> 31) + 0x7FFFFFFF;
          if (!__OFADD__(DWORD1(v359), HIDWORD(v133)))
            v135 = DWORD1(v359) + HIDWORD(v133);
          *(_QWORD *)&v359 = __PAIR64__(v135, v134);
          this = WebCore::RenderView::repaintViewRectangle(*(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v18 + 32) + 24)+ 8)+ 40)+ 8)+ 1944), (const WebCore::LayoutRect *)&v359);
          goto LABEL_92;
        }
      }
    }
  }
  v20 = *(int32x2_t **)(v18 + 256);
  v21 = v20[1];
  v22 = *(_QWORD *)(*(_QWORD *)&v21 + 24);
  if ((v22 & 1) == 0)
  {
    *(_DWORD *)(*(_QWORD *)&v21 + 12) |= 0x80u;
    if ((v22 & 4) != 0)
    {
      v150 = *(int32x2_t *)(*(_QWORD *)&v21 + 40);
      if (v150)
      {
LABEL_207:
        do
        {
          v151 = *(_DWORD *)(*(_QWORD *)&v150 + 12);
          if ((v151 & 2) != 0)
            break;
          *(_DWORD *)(*(_QWORD *)&v150 + 12) = v151 | 2;
          if ((*(_BYTE *)(*(_QWORD *)&v150 + 24) & 4) == 0)
          {
            while (1)
            {
              v150 = *(int32x2_t *)(*(_QWORD *)&v150 + 40);
              if (!*(_QWORD *)&v150)
                goto LABEL_31;
              if ((*(_BYTE *)(*(_QWORD *)&v150 + 24) & 0x4A) != 0)
                goto LABEL_211;
            }
          }
          v150 = *(int32x2_t *)(*(_QWORD *)&v150 + 40);
LABEL_211:
          ;
        }
        while (v150);
      }
    }
    else
    {
      v150 = v21;
      while (1)
      {
        v150 = *(int32x2_t *)(*(_QWORD *)&v150 + 40);
        if (!*(_QWORD *)&v150)
          break;
        if ((*(_BYTE *)(*(_QWORD *)&v150 + 24) & 0x4A) != 0)
          goto LABEL_207;
      }
    }
  }
LABEL_31:
  v23 = *(_QWORD *)(*(_QWORD *)&v21 + 256);
  if (v23 && *(_BYTE *)(v23 + 291))
  {
LABEL_202:
    v27 = v21;
    goto LABEL_46;
  }
  v24 = *(int32x2_t **)(*(_QWORD *)&v21 + 80);
  if (v24 && (v27 = v24[1], *(_QWORD *)&v27))
  {
LABEL_46:
    v28 = *(_QWORD *)(*(_QWORD *)&v27 + 256);
    if (WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v28 + 8) + 32) + 24) + 8) + 40) + 8) + 528)
                                                                                       + 8)
                                                                           + 24)
                                                               + 8))
      && *(_BYTE *)(v28 + 291))
    {
      v29 = *(_QWORD *)(v28 + 8);
      v30 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v29 + 32) + 24) + 8) + 40) + 8);
      if (*(_BYTE *)(*(_QWORD *)(v30 + 1944) + 442))
        goto LABEL_49;
      if (*(_BYTE *)(v30 + 3443))
        goto LABEL_49;
      if (*(_BYTE *)(v30 + 3444))
      {
        v206 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v30 + 528) + 8) + 24) + 8);
        if (*(_BYTE *)(v206 + 1100) || (*(_BYTE *)(*(_QWORD *)(v206 + 112) + 612) & 8) != 0)
          goto LABEL_49;
      }
      if ((v207 = *(uint64_t **)(v30 + 2304)) != 0 && (v238 = *v207) != 0 && *(_DWORD *)(v238 - 12)
        || (*(_BYTE *)(v29 + 24) & 1) == 0
        && (v208 = *(WebCore::Page **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v30 + 528) + 8) + 24) + 8),
            (*(_QWORD *)(*((_QWORD *)v208 + 14) + 664) & 0xC0000000) != 0)
        && (v209 = WebCore::Page::scrollingCoordinator(v208),
            v210 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v28 + 8) + 32) + 24) + 8) + 40) + 8) + 1944) + 24) + 8)
                                                                                         + 40)
                                                                             + 8)
                                                                 + 528)
                                                     + 8)
                                         + 632)
                             + 8),
            (*(unsigned int (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v209 + 440))(v209, *(_QWORD *)(v210 + 32), *(_QWORD *)(v210 + 40))))
      {
LABEL_49:
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)&v27 + 256) + 297) = 1;
      }
    }
  }
  else if ((*(_QWORD *)(*(_QWORD *)&v21 + 24) & 4) != 0)
  {
    v21 = *(int32x2_t *)(*(_QWORD *)&v21 + 40);
    if (v21)
      goto LABEL_36;
  }
  else
  {
    while (1)
    {
      v21 = *(int32x2_t *)(*(_QWORD *)&v21 + 40);
      if (!*(_QWORD *)&v21)
        break;
      if ((*(_BYTE *)(*(_QWORD *)&v21 + 24) & 0x4A) != 0)
      {
LABEL_36:
        while (1)
        {
          v25 = *(_QWORD *)(*(_QWORD *)&v21 + 256);
          if (v25)
          {
            if (*(_BYTE *)(v25 + 291))
              goto LABEL_202;
          }
          v26 = *(int32x2_t **)(*(_QWORD *)&v21 + 80);
          if (v26)
          {
            v27 = v26[1];
            if (v27)
              goto LABEL_46;
          }
          if ((*(_BYTE *)(*(_QWORD *)&v21 + 24) & 4) == 0)
          {
            while (1)
            {
              v21 = *(int32x2_t *)(*(_QWORD *)&v21 + 40);
              if (!*(_QWORD *)&v21)
                goto LABEL_50;
              if ((*(_BYTE *)(*(_QWORD *)&v21 + 24) & 0x4A) != 0)
                goto LABEL_41;
            }
          }
          v21 = *(int32x2_t *)(*(_QWORD *)&v21 + 40);
LABEL_41:
          if (!*(_QWORD *)&v21)
            goto LABEL_50;
        }
      }
    }
  }
LABEL_50:
  v31 = *(_QWORD *)(*(_QWORD *)&v20[1] + 32);
  v32 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v31 + 24) + 8) + 40) + 8);
  if ((*(_QWORD *)(*(_QWORD *)(v32 + 680) + 680) & 0x800000000000) != 0)
  {
    if (!WebCore::RenderObject::isSVGLayerAwareRenderer(*(WebCore::RenderObject **)(*(_QWORD *)&v20[1] + 32))
      || *(_BYTE *)(v31 + 46) == 83)
    {
      v32 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v31 + 24) + 8) + 40) + 8);
      goto LABEL_51;
    }
    v61 = WebCore::LayoutRect::operator WebCore::FloatRect((int *)a3);
  }
  else
  {
LABEL_51:
    v33 = *(_QWORD *)(v32 + 528);
    v34 = 1.0;
    if (v33)
    {
      v35 = *(_QWORD *)(v33 + 8);
      if (v35)
      {
        v36 = *(_QWORD *)(v35 + 24);
        if (v36)
        {
          v37 = *(float **)(v36 + 8);
          if (v37)
          {
            v38 = (*(_DWORD *)v37)++;
            v34 = v37[91];
            if (v38)
            {
              *(_DWORD *)v37 = v38;
            }
            else
            {
              WebCore::Page::~Page((WebCore::Page *)v37);
              WTF::fastFree(v218, v219);
            }
          }
        }
      }
    }
    v39 = (double)*(int *)a3 * 0.015625;
    if (v39 < 0.0)
      v40 = round((v39 + (double)-*(_DWORD *)a3) * v34) / v34 - (double)-*(_DWORD *)a3;
    else
      v40 = round(v39 * v34) / v34;
    v41 = *((_DWORD *)a3 + 1);
    v42 = (double)v41 * 0.015625;
    if (v42 < 0.0)
      v43 = round((v42 + (double)-v41) * v34) / v34 - (double)-v41;
    else
      v43 = round(v42 * v34) / v34;
    v44 = *((_DWORD *)a3 + 2);
    v45 = *(_DWORD *)a3 & 0x3F;
    if (*(int *)a3 <= 0)
      v45 = -(-*(_DWORD *)a3 & 0x3F);
    v46 = __OFADD__(v45, v44);
    v47 = v45 + v44;
    if (v46)
      v47 = (v45 >> 31) + 0x7FFFFFFF;
    v48 = (double)v47 * 0.015625;
    if (v48 < 0.0)
      v49 = round((v48 + (double)-v47) * v34) / v34 - (double)-v47;
    else
      v49 = round(v48 * v34) / v34;
    v50 = *((_DWORD *)a3 + 3);
    v51 = *((_DWORD *)a3 + 1);
    v52 = (double)v45 * 0.015625;
    if (v52 < 0.0)
      v53 = round((v52 + (double)-v45) * v34) / v34 - (double)-v45;
    else
      v53 = round(v52 * v34) / v34;
    if (v51 <= 0)
      v54 = -(-v51 & 0x3F);
    else
      v54 = *((_DWORD *)a3 + 1) & 0x3F;
    v46 = __OFADD__(v54, v50);
    v55 = v54 + v50;
    if (v46)
      v55 = (v54 >> 31) + 0x7FFFFFFF;
    v56 = (double)v55 * 0.015625;
    if (v56 < 0.0)
      v57 = round((v56 + (double)-v55) * v34) / v34 - (double)-v55;
    else
      v57 = round(v56 * v34) / v34;
    v58 = (double)v54 * 0.015625;
    if (v58 < 0.0)
      v59 = round((v58 + (double)-v54) * v34) / v34 - (double)-v54;
    else
      v59 = round(v58 * v34) / v34;
    v60 = v43;
    v61 = v40;
    v62 = v49;
    v63 = v53;
    v64 = v62 - v63;
    v65 = v57;
    v66 = v59;
    v67 = v65 - v66;
  }
  *(_QWORD *)&v359 = __PAIR64__(LODWORD(v60), LODWORD(v61));
  *((_QWORD *)&v359 + 1) = __PAIR64__(LODWORD(v67), LODWORD(v64));
  if (v20[36].i8[1])
  {
    v68 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)&v20[1] + 32)
                                                                                + 24)
                                                                    + 8)
                                                        + 40)
                                            + 8)
                                + 1944)
                    + 248);
    if (*(_BYTE *)(v68 + 1371))
      WebCore::LocalFrameView::addTrackedRepaintRect(v68, (const WebCore::FloatRect *)&v359);
  }
  v69 = v20[9];
  if (*(_QWORD *)&v69 && (*(_WORD *)(*(_QWORD *)&v69 + 177) & 0x20) != 0)
  {
    v354 = v359;
    *(float32x2_t *)&v354 = vadd_f32(*(float32x2_t *)&v359, vsub_f32(vmul_f32(vcvt_f32_s32(v20[24]), (float32x2_t)vdup_n_s32(0xBC800000)), *(float32x2_t *)(*(_QWORD *)&v69 + 40)));
    (*(void (**)(int32x2_t, __int128 *, uint64_t))(**(_QWORD **)&v69 + 328))(v69, &v354, a4);
  }
  v70 = v20[10];
  if (*(_QWORD *)&v70 && (*(_WORD *)(*(_QWORD *)&v70 + 177) & 0x20) != 0)
  {
    v354 = v359;
    *(float32x2_t *)&v354 = vadd_f32(*(float32x2_t *)&v359, vsub_f32(vmul_f32(vcvt_f32_s32(v20[24]), (float32x2_t)vdup_n_s32(0xBC800000)), *(float32x2_t *)(*(_QWORD *)&v70 + 40)));
    (*(void (**)(int32x2_t, __int128 *, uint64_t))(**(_QWORD **)&v70 + 328))(v70, &v354, a4);
  }
  v71 = v20[11];
  if (*(_QWORD *)&v71 && (*(_WORD *)(*(_QWORD *)&v71 + 177) & 0x20) != 0)
  {
    v354 = v359;
    *(float32x2_t *)&v354 = vadd_f32(*(float32x2_t *)&v359, vsub_f32(vmul_f32(vcvt_f32_s32(v20[24]), (float32x2_t)vdup_n_s32(0xBC800000)), *(float32x2_t *)(*(_QWORD *)&v71 + 40)));
    (*(void (**)(int32x2_t, __int128 *, uint64_t))(**(_QWORD **)&v71 + 328))(v71, &v354, a4);
  }
  v72 = v20[14];
  if (*(_QWORD *)&v72 && (*(_WORD *)(*(_QWORD *)&v72 + 177) & 0x20) != 0)
  {
    v354 = v359;
    *(float32x2_t *)&v354 = vadd_f32(*(float32x2_t *)&v359, vsub_f32(vmul_f32(vcvt_f32_s32(v20[24]), (float32x2_t)vdup_n_s32(0xBC800000)), *(float32x2_t *)(*(_QWORD *)&v72 + 40)));
    (*(void (**)(int32x2_t, __int128 *, uint64_t))(**(_QWORD **)&v72 + 328))(v72, &v354, a4);
  }
  this = (uint64_t)v20[21];
  if (this && (*(_WORD *)(this + 177) & 0x20) != 0)
  {
    v354 = v359;
    v211 = *(_QWORD **)(*(_QWORD *)&v20[1] + 264);
    if (v211)
    {
      v212 = (*(uint64_t (**)(_QWORD *))(*v211 + 416))(v211);
      v213 = ((v211[4] & 0xFFFFFFFF00000000) + v212) & 0xFFFFFFFF00000000 | (v211[4]
                                                                               + v212);
      v214.i32[1] = (((v211[4] & 0xFFFFFFFF00000000) + v212) & 0xFFFFFFFF00000000) >> 32;
      v215 = (int8x8_t)vshl_n_s32((int32x2_t)v213, 6uLL);
      HIDWORD(v213) = 0x1FFFFFF;
      v214.i32[0] = -33554432;
      this = (uint64_t)v20[21];
      v216 = (int8x8_t)vcgt_s32(v214, (int32x2_t)v213);
      HIDWORD(v213) = -33554432;
      v214.i32[0] = 0x1FFFFFF;
      v217 = vmul_f32(vcvt_f32_s32((int32x2_t)vbsl_s8(v216, (int8x8_t)0x7FFFFFFF80000000, vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)v213, v214), (int8x8_t)0x800000007FFFFFFFLL, v215))), (float32x2_t)vdup_n_s32(0x3C800000u));
    }
    else
    {
      v217 = 0;
    }
    *(float32x2_t *)&v354 = vadd_f32(*(float32x2_t *)&v354, vadd_f32(vsub_f32(v217, *(float32x2_t *)(this + 40)), vmul_f32(vcvt_f32_s32(v20[24]), (float32x2_t)vdup_n_s32(0xBC800000))));
    this = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)this + 328))(this, &v354, a4);
  }
  if (v18)
  {
LABEL_92:
    v73 = *(_DWORD *)(v18 + 8);
    if (!v73)
    {
      __break(0xC471u);
      JUMPOUT(0x196429ACCLL);
    }
    *(_DWORD *)(v18 + 8) = v73 - 1;
  }
  return this;
}

uint64_t WebCore::fullRepaintIsScheduled(WebCore *this, const WebCore::RenderObject *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  int v11;
  _DWORD *v12;
  int v13;
  int v14;
  int v16;
  uint64_t v17;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8);
  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 1944) + 400);
  if (!v3 || !*(_BYTE *)(v3 + 195))
  {
    v4 = *(_QWORD *)(v2 + 528);
    if (!v4)
      return v4;
    v4 = *(_QWORD *)(v4 + 8);
    if (!v4)
      return v4;
    v4 = *(_QWORD *)(v4 + 120);
    if (!v4)
      return v4;
    v4 = *(_QWORD *)(v4 + 8);
    if (!v4)
      return v4;
  }
  v5 = this;
  if ((*((_BYTE *)this + 45) & 0x10) == 0)
  {
    v4 = *((_QWORD *)this + 4);
    if (!v4)
      return v4;
    v5 = *(WebCore **)(v4 + 8);
    if (!v5)
      return 0;
    while ((*((_BYTE *)v5 + 45) & 0x10) == 0)
    {
      v6 = *((_QWORD *)v5 + 4);
      if (!v6)
        return 0;
      v4 = 0;
      v5 = *(WebCore **)(v6 + 8);
      if (!v5)
        return v4;
    }
  }
LABEL_17:
  if ((*((_BYTE *)v5 + 21) & 0x80) != 0)
  {
    v7 = *((_QWORD *)v5 + 18);
    if (v7)
    {
      ++*(_DWORD *)(v7 + 8);
      while (1)
      {
        v8 = *(_QWORD *)(v7 + 24);
        if ((WORD1(v8) & 3) - 1 <= 1u)
          break;
        if ((v8 & 4) == 0)
        {
          v9 = v7;
          while (1)
          {
            v9 = *(_QWORD *)(v9 + 40);
            if (!v9)
              break;
            if ((*(_BYTE *)(v9 + 24) & 0x4A) != 0)
              goto LABEL_25;
          }
          v16 = *(_DWORD *)(v7 + 8);
          v12 = (_DWORD *)(v7 + 8);
          v13 = v16;
          if (v16)
          {
            v4 = 0;
            goto LABEL_33;
          }
LABEL_45:
          __break(0xC471u);
          JUMPOUT(0x19642A8F0);
        }
        v9 = *(_QWORD *)(v7 + 40);
        if (v9)
        {
LABEL_25:
          v10 = 0;
          ++*(_DWORD *)(v9 + 8);
        }
        else
        {
          v10 = 1;
        }
        v11 = *(_DWORD *)(v7 + 8);
        if (!v11)
          goto LABEL_45;
        *(_DWORD *)(v7 + 8) = v11 - 1;
        v7 = v9;
        if ((v10 & 1) != 0)
          return 0;
      }
      if ((*((_BYTE *)this + 45) & 2) != 0 || (*((_BYTE *)this + 21) & 0x80) == 0)
        goto LABEL_31;
      if ((*((_BYTE *)this + 45) & 0x10) == 0)
        goto LABEL_45;
      v17 = *((_QWORD *)this + 18);
      if (v17 && (*(_BYTE *)(v17 + 25) & 8) != 0)
        v4 = *(_BYTE *)(*(_QWORD *)(v7 + 32) + 22) & 1;
      else
LABEL_31:
        v4 = 1;
      v14 = *(_DWORD *)(v7 + 8);
      v12 = (_DWORD *)(v7 + 8);
      v13 = v14;
      if (!v14)
      {
        __break(0xC471u);
        JUMPOUT(0x19642A910);
      }
LABEL_33:
      *v12 = v13 - 1;
      return v4;
    }
    return 0;
  }
  while (1)
  {
    v4 = *((_QWORD *)v5 + 4);
    if (!v4)
      return v4;
    v5 = *(WebCore **)(v4 + 8);
    if (!v5)
      return 0;
    if ((*((_BYTE *)v5 + 45) & 0x10) != 0)
      goto LABEL_17;
  }
}

uint64_t WebCore::RenderObject::repaint(uint64_t result, int a2)
{
  _BYTE v2[20];
  __int128 v3;
  char v4;

  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 8) + 40)
                                                                                         + 8)
                                                                             + 1944)
                                                                 + 24)
                                                     + 8)
                                         + 40)
                             + 8)
                 + 3382))
  {
    LOBYTE(v3) = 0;
    v4 = 0;
    v2[0] = 0;
    v2[16] = 0;
    return WebCore::RenderObject::issueRepaint(result, &v3, 0, a2, (uint64_t)v2);
  }
  return result;
}

uint64_t WebCore::RenderObject::repaintRectangle(uint64_t this, int *a2, uint64_t a3, int a4, __int128 *a5)
{
  uint64_t v5;
  WebCore *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  WTF *v13;
  BOOL v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  const WebCore::RenderObject *v21;
  uint64_t v22;
  WTF *v23;
  void *v24;
  int v25;
  void *v26;
  WTF *v27;
  __int128 v28;
  int v29;
  _BYTE v30[8];
  uint64_t v31;
  WTF *v32[2];
  char v33;
  char v34;
  _OWORD v35[2];
  char v36;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 24) + 8) + 40) + 8) + 1944);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8) + 40) + 8) + 3382))
    return this;
  v7 = (WebCore *)this;
  v9 = *a2;
  v8 = a2[1];
  v10 = *(_QWORD *)(v5 + 248);
  v11 = *(unsigned int *)(v10 + 508);
  if ((_DWORD)v11 && (v11 = *(_QWORD *)(*(_QWORD *)(v10 + 496) + 8 * v11 - 8)) != 0)
  {
    v12 = *(_DWORD *)(v11 + 64);
    LODWORD(v11) = *(_DWORD *)(v11 + 68);
  }
  else
  {
    v12 = 0;
  }
  v13 = (WTF *)*((_QWORD *)a2 + 1);
  v14 = __OFADD__(v9, v12);
  v15 = v9 + v12;
  v16 = (v9 >> 31) + 0x7FFFFFFF;
  if (v14)
    v17 = v16;
  else
    v17 = v15;
  v14 = __OFADD__(v8, (_DWORD)v11);
  v18 = v8 + v11;
  v19 = (v8 >> 31) + 0x7FFFFFFF;
  if (v14)
    v20 = v19;
  else
    v20 = v18;
  v28 = *a5;
  v29 = *((_DWORD *)a5 + 4);
  WebCore::RenderObject::containerForRepaint((_QWORD *)this, (uint64_t)v30);
  v22 = v31;
  if (v31)
  {
    this = v30[0];
  }
  else
  {
    this = WebCore::fullRepaintIsScheduled(v7, v21);
    v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v7 + 3) + 8) + 40) + 8) + 1944);
    if (v22)
      ++*(_DWORD *)(v22 + 16);
  }
  if (!(_DWORD)this || a4)
  {
    v32[0] = (WTF *)(v17 | (v20 << 32));
    v32[1] = v13;
    v33 = 0;
    v34 = 0;
    (*(void (**)(_OWORD *__return_ptr, WebCore *, WTF **, uint64_t, uint64_t))(*(_QWORD *)v7 + 472))(v35, v7, v32, v22, 0xC00000000);
    if (!v36)
    {
      __break(0xC471u);
      JUMPOUT(0x19642AB90);
    }
    if ((_BYTE)v29)
      WebCore::LayoutRect::expand(v35, (unsigned int *)&v28);
    if (!v22)
    {
      v23 = 0;
      goto LABEL_20;
    }
    v23 = *(WTF **)(v22 + 8);
    if (!v23)
    {
      v23 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v23 = 1;
      *((_QWORD *)v23 + 1) = v22;
      v27 = *(WTF **)(v22 + 8);
      *(_QWORD *)(v22 + 8) = v23;
      if (v27)
      {
        if (*(_DWORD *)v27 == 1)
        {
          WTF::fastFree(v27, v26);
          v23 = *(WTF **)(v22 + 8);
          if (!v23)
          {
LABEL_20:
            v32[0] = v23;
            WebCore::RenderObject::repaintUsingContainer(v7, (int)v32, (WebCore::LayoutRect *)v35);
            this = (uint64_t)v32[0];
            if (v32[0])
            {
              if (*(_DWORD *)v32[0] == 1)
                this = WTF::fastFree(v32[0], v24);
              else
                --*(_DWORD *)v32[0];
            }
            goto LABEL_23;
          }
        }
        else
        {
          --*(_DWORD *)v27;
        }
      }
    }
    ++*(_DWORD *)v23;
    goto LABEL_20;
  }
LABEL_23:
  if (v22)
  {
    v25 = *(_DWORD *)(v22 + 16);
    if (!v25)
    {
      __break(0xC471u);
      JUMPOUT(0x19642AB70);
    }
    *(_DWORD *)(v22 + 16) = v25 - 1;
  }
  return this;
}

_QWORD *WebCore::RenderObject::repaintSlowRepaintObject(_QWORD *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  int v7;
  int v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  int v13;
  signed int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  WTF *v27;
  int32x4_t v28;
  int8x16_t v29;
  int32x4_t v30;
  int8x16_t v31;
  void *v32;
  int v33;
  int v34;
  void *v35;
  WTF *v36;
  int32x4_t v37;
  WTF *v38;
  int8x16_t v39;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this[3] + 8) + 40) + 8) + 1944);
  ++*(_DWORD *)(v1 + 16);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 24) + 8) + 40) + 8) + 3382))
    goto LABEL_42;
  v2 = (uint64_t)this;
  WebCore::RenderObject::containerForRepaint(this, (uint64_t)&v39);
  v3 = v39.i64[1];
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 24) + 8);
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 40) + 8) + 1272) == v4
    || (*(_BYTE *)(v2 + 45) & 1) == 0
    && (*(_WORD *)(v4 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v4 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
  {
    v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 248) + 328) + 296);
    if (v16
      && (v17 = *(_QWORD *)(v16 + 1944)) != 0
      && (v18 = *(_QWORD *)(*(_QWORD *)(v17 + 144) + 256)) != 0
      && (v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v18 + 72) + 832))(*(_QWORD *)(v18 + 72))) != 0)
    {
      v15 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v19 + 272))(v19) ^ 1;
    }
    else
    {
      v15 = 1;
    }
    WebCore::RenderView::backgroundRect((WebCore::RenderView *)v1);
    v9 = HIDWORD(v5);
    if ((int)v5 <= 0)
      v10 = -(-(int)v5 & 0x3F);
    else
      v10 = v5 & 0x3F;
    if (SHIDWORD(v5) <= 0)
      LODWORD(v11) = -(-HIDWORD(v5) & 0x3F);
    else
      LODWORD(v11) = BYTE4(v5) & 0x3F;
    v12 = v10 + v20;
    v13 = (v10 >> 31) + 0x7FFFFFFF;
    if (__OFADD__(v10, v20))
      v12 = (v10 >> 31) + 0x7FFFFFFF;
    v14 = v11 + v21;
    if (__OFADD__((_DWORD)v11, v21))
      v14 = (v11 >> 31) + 0x7FFFFFFF;
  }
  else
  {
    v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2 + 440))(v2, v39.i64[1], 0xC00000000);
    v9 = HIDWORD(v5);
    v10 = v5 & 0x3F;
    if ((int)v5 <= 0)
      v10 = -(-(int)v5 & 0x3F);
    v11 = HIDWORD(v5) & 0x3F;
    if (SHIDWORD(v5) <= 0)
      LODWORD(v11) = -(-HIDWORD(v5) & 0x3F);
    v12 = v10 + v6;
    v13 = (v10 >> 31) + 0x7FFFFFFF;
    if (__OFADD__(v10, v6))
      v12 = (v10 >> 31) + 0x7FFFFFFF;
    v14 = v11 + v7;
    if (__OFADD__((_DWORD)v11, v7))
      v14 = (v11 >> 31) + 0x7FFFFFFF;
    v15 = 1;
  }
  v22.i64[0] = __PAIR64__(v11, v10);
  v22.i32[2] = v12 - (v13 & 0xFFFFFFC0);
  v22.i32[3] = v14 - (v8 & 0xFFFFFFC0);
  v23.i64[0] = 0x2000000020;
  v23.i64[1] = 0x2000000020;
  v24 = vaddq_s32(v22, v23);
  v23.i64[0] = vshrq_n_s32(v24, 6uLL).u64[0];
  v25.i32[0] = (int)v5 / 64;
  v25.i32[1] = (int)v9 / 64;
  v25.i32[2] = v12 / 64 - v23.i32[0];
  v25.i32[3] = v14 / 64 - v23.i32[1];
  v26 = vsraq_n_s32(v25, v24, 6uLL);
  if (!v3)
  {
    v27 = 0;
    goto LABEL_36;
  }
  v37 = v26;
  v27 = *(WTF **)(v3 + 8);
  if (!v27)
  {
    v27 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v27 = 1;
    *((_QWORD *)v27 + 1) = v3;
    v36 = *(WTF **)(v3 + 8);
    *(_QWORD *)(v3 + 8) = v27;
    if (v36)
    {
      if (*(_DWORD *)v36 == 1)
      {
        WTF::fastFree(v36, v35);
        v27 = *(WTF **)(v3 + 8);
        if (!v27)
          goto LABEL_50;
      }
      else
      {
        --*(_DWORD *)v36;
      }
    }
  }
  ++*(_DWORD *)v27;
LABEL_50:
  v26 = v37;
LABEL_36:
  v38 = v27;
  v28.i64[0] = 0xFE000000FE000000;
  v28.i64[1] = 0xFE000000FE000000;
  v29 = (int8x16_t)vcgtq_s32(v26, v28);
  v30.i64[0] = 0xFE000000FE000000;
  v30.i64[1] = 0xFE000000FE000000;
  v31.i64[0] = 0x8000000080000000;
  v31.i64[1] = 0x8000000080000000;
  v39 = vorrq_s8((int8x16_t)(*(_OWORD *)&v29 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vbicq_s8(vbslq_s8((int8x16_t)vcgtq_s32(v30, v26), v31, (int8x16_t)vshlq_n_s32(v26, 6uLL)), v29));
  WebCore::RenderObject::repaintUsingContainer(v2, (uint64_t *)&v38, (WebCore::LayoutRect *)&v39, v15);
  this = v38;
  if (v38)
  {
    if (*(_DWORD *)v38 == 1)
    {
      this = (_QWORD *)WTF::fastFree(v38, v32);
      if (!v3)
        goto LABEL_42;
      goto LABEL_40;
    }
    --*(_DWORD *)v38;
  }
  if (!v3)
    goto LABEL_42;
LABEL_40:
  v33 = *(_DWORD *)(v3 + 16);
  if (!v33)
  {
    __break(0xC471u);
    JUMPOUT(0x19642AF24);
  }
  *(_DWORD *)(v3 + 16) = v33 - 1;
LABEL_42:
  v34 = *(_DWORD *)(v1 + 16);
  if (!v34)
  {
    __break(0xC471u);
    JUMPOUT(0x19642AF04);
  }
  *(_DWORD *)(v1 + 16) = v34 - 1;
  return this;
}

unint64_t WebCore::RenderObject::pixelSnappedAbsoluteClippedOverflowRect(WebCore::RenderObject *this)
{
  uint64_t v1;
  int v2;
  int v3;

  v1 = (*(uint64_t (**)(WebCore::RenderObject *, _QWORD, uint64_t))(*(_QWORD *)this + 440))(this, 0, 0xC00000000);
  return ((int)v1 / 64 + ((int)(v1 - (v2 & 0xFFFFFFC0) + 32) >> 6)) | ((unint64_t)(SHIDWORD(v1) / 64 + ((int)(HIDWORD(v1) - (v3 & 0xFFFFFFC0) + 32) >> 6)) << 32);
}

uint64_t WebCore::RenderObject::rectWithOutlineForRepaint(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 440))(a1, a2, 0xC00000000);
  LODWORD(v5) = v4 - a3;
  if (__OFSUB__((_DWORD)v4, a3))
    v5 = (v4 >> 31) + 0x7FFFFFFF;
  else
    v5 = v5;
  LODWORD(v6) = (HIDWORD(v4) >> 31) + 0x7FFFFFFF;
  if (__OFSUB__(HIDWORD(v4), a3))
    v6 = v6;
  else
    v6 = (HIDWORD(v4) - a3);
  return v5 | (v6 << 32);
}

void WebCore::RenderObject::localRectsForRepaint(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 32) = 0;
}

__n128 WebCore::RenderObject::computeVisibleRectsInContainer@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v10;
  __n128 result;
  int v12;
  __int128 v13;
  __int128 v14;
  __n128 v15;
  __int128 v16;
  int v17;

  if (a3 != a1)
  {
    v6 = *(_QWORD *)(a1 + 32);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 8);
      if (v7)
      {
        ++*(_DWORD *)(v7 + 16);
        v17 = *(_DWORD *)(a2 + 32);
        v10 = *(_OWORD *)(a2 + 16);
        v15 = *(__n128 *)a2;
        v16 = v10;
        if ((*(_BYTE *)(v7 + 22) & 1) == 0)
          goto LABEL_7;
        if ((*(_BYTE *)(v7 + 45) & 0x10) == 0)
        {
          __break(0xC471u);
          goto LABEL_17;
        }
        if (((*(uint64_t (**)(uint64_t, __n128 *, uint64_t, uint64_t))(*(_QWORD *)v7 + 816))(v7, &v15, a3, a4) & 1) == 0)
        {
          if ((a4 & 0x100000000) != 0)
          {
            *(_BYTE *)a5 = 0;
            *(_BYTE *)(a5 + 36) = 0;
          }
          else
          {
            result.n128_u64[0] = v15.n128_u64[0];
            v14 = v16;
            *(__n128 *)a5 = v15;
            *(_OWORD *)(a5 + 16) = v14;
            *(_DWORD *)(a5 + 32) = v17;
            *(_BYTE *)(a5 + 36) = 1;
          }
        }
        else
        {
LABEL_7:
          (*(void (**)(uint64_t, __n128 *, uint64_t, uint64_t))(*(_QWORD *)v7 + 472))(v7, &v15, a3, a4);
        }
        v12 = *(_DWORD *)(v7 + 16);
        if (v12)
        {
          *(_DWORD *)(v7 + 16) = v12 - 1;
          return result;
        }
        __break(0xC471u);
LABEL_17:
        JUMPOUT(0x19642B234);
      }
    }
  }
  result = *(__n128 *)a2;
  v13 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a5 = *(_OWORD *)a2;
  *(_OWORD *)(a5 + 16) = v13;
  *(_DWORD *)(a5 + 32) = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a5 + 36) = 1;
  return result;
}

void WebCore::RenderObject::computeFloatVisibleRectInContainer(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
}

WTF *WebCore::RenderObject::absoluteToLocalQuad@<X0>(uint64_t a1@<X0>, float *a2@<X1>, unsigned int a3@<W2>, _OWORD *a4@<X8>)
{
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v17;
  float v18;
  float v19;
  float v21;
  float v23;
  __int128 v25;
  void *v26;
  __int128 v27;
  WTF *v28;
  WTF *result;
  float v30[2];
  __int128 v31;
  __int128 v32;
  char v33;
  char v34;
  WTF *v35;
  WTF *v36;
  uint64_t v37;
  char v38;
  __int16 v39;
  uint64_t v40;

  v6 = a2[4];
  v5 = a2[5];
  v8 = a2[6];
  v7 = a2[7];
  if (v8 >= v6)
    v9 = a2[4];
  else
    v9 = a2[6];
  v11 = *a2;
  v10 = a2[1];
  v13 = a2[2];
  v12 = a2[3];
  if (v13 >= *a2)
    v14 = *a2;
  else
    v14 = a2[2];
  if (v9 >= v14)
    v9 = v14;
  v15 = fabsf(v9);
  if (v15 == INFINITY || v15 > 2147500000.0)
    v9 = (float)((SLODWORD(v9) >> 31) ^ 0x7FFFFFFF);
  if (v7 >= v5)
    v17 = a2[5];
  else
    v17 = a2[7];
  if (v12 >= v10)
    v18 = a2[1];
  else
    v18 = a2[3];
  if (v17 >= v18)
    v17 = v18;
  v19 = fabsf(v17);
  if (v19 == INFINITY || v19 > 2147500000.0)
    v17 = (float)((SLODWORD(v17) >> 31) ^ 0x7FFFFFFF);
  if (v11 < v13)
    v11 = a2[2];
  if (v6 < v8)
    v6 = a2[6];
  if (v11 >= v6)
    v6 = v11;
  v21 = fabsf(v6);
  if (v21 == INFINITY || v21 > 2147500000.0)
    v6 = (float)((SLODWORD(v6) >> 31) ^ 0x7FFFFFFF);
  if (v10 < v12)
    v10 = a2[3];
  if (v5 < v7)
    v5 = a2[7];
  if (v10 >= v5)
    v5 = v10;
  v23 = fabsf(v5);
  if (v23 == INFINITY || v23 > 2147500000.0)
    v5 = (float)((SLODWORD(v5) >> 31) ^ 0x7FFFFFFF);
  v30[0] = v9 + (float)((float)(v6 - v9) * 0.5);
  v30[1] = v17 + (float)((float)(v5 - v17) * 0.5);
  v25 = *((_OWORD *)a2 + 1);
  v31 = *(_OWORD *)a2;
  v32 = v25;
  v33 = 0;
  v34 = 0;
  v36 = 0;
  v37 = 0;
  v35 = 0;
  v38 = 0;
  v39 = 257;
  v40 = 0x100000000;
  (*(void (**)(uint64_t, _QWORD, float *))(*(_QWORD *)a1 + 584))(a1, a3, v30);
  WebCore::TransformState::flatten((WebCore::TransformState *)v30, 0);
  v27 = v32;
  *a4 = v31;
  a4[1] = v27;
  v28 = v36;
  v36 = 0;
  if (v28)
    WTF::fastFree(v28, v26);
  result = v35;
  v35 = 0;
  if (result)
    return (WTF *)WTF::fastFree(result, v26);
  return result;
}

uint64_t WebCore::RenderObject::mapLocalToContainer(uint64_t result, uint64_t a2, WebCore::TransformState *this, unsigned int a4, uint64_t a5, __n128 a6)
{
  uint64_t v6;
  uint64_t v7;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  float64x2_t *v19;
  double v20;
  int v21;
  int v22;
  double v23;
  int v24;
  unsigned int v25;
  BOOL v26;
  int v27;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  int v38;
  uint64_t v39;
  __int128 *v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float v45;
  float v46;
  double v47;
  int v48;
  double v49;
  int v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  _QWORD v56[16];
  char v57;
  float64x2_t v58[8];
  float32x2_t v59;

  if (a2 == result)
    return result;
  v6 = *(_QWORD *)(result + 32);
  if (!v6)
    return result;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7)
    return result;
  ++*(_DWORD *)(v7 + 16);
  v12 = *((_DWORD *)this + 28);
  if (v12)
  {
    v13 = *((_DWORD *)this + 24);
    v14 = *((_DWORD *)this + 25);
    if (v13 == 0x80000000)
      v15 = 0x7FFFFFFFLL;
    else
      v15 = -v13;
    if (v14 == 0x80000000)
      v16 = 0x7FFFFFFFLL;
    else
      v16 = -v14;
    v17 = v15 | (v16 << 32);
  }
  else
  {
    v17 = *((_QWORD *)this + 12);
  }
  a6.n128_f32[0] = (float)((float)(int)v17 * 0.015625) + *(float *)this;
  v18 = (float)((float)SHIDWORD(v17) * 0.015625) + *((float *)this + 1);
  v59.f32[0] = a6.n128_f32[0];
  v59.f32[1] = v18;
  v19 = (float64x2_t *)*((_QWORD *)this + 10);
  if (v19)
  {
    if (v12)
    {
      WebCore::TransformationMatrix::inverse(v19->f64, (double (*)[4][4])this, (uint64_t)v56);
      if (v57)
        v40 = (__int128 *)v56;
      else
        v40 = &constinit_5;
      v41 = (float64x2_t)v40[5];
      v58[4] = (float64x2_t)v40[4];
      v58[5] = v41;
      v42 = (float64x2_t)v40[7];
      v58[6] = (float64x2_t)v40[6];
      v58[7] = v42;
      v43 = (float64x2_t)v40[1];
      v58[0] = (float64x2_t)*v40;
      v58[1] = v43;
      v44 = (float64x2_t)v40[3];
      v58[2] = (float64x2_t)v40[2];
      v58[3] = v44;
      a6.n128_u32[0] = WebCore::TransformationMatrix::projectPoint(v58, (const WebCore::FloatPoint *)&v59, 0).u32[0];
    }
    else
    {
      a6.n128_u32[0] = WebCore::TransformationMatrix::mapPoint(v19, &v59).u32[0];
    }
  }
  v20 = a6.n128_f32[0] * 64.0;
  a6.n128_u64[0] = 0x41DFFFFFFFC00000;
  if (v20 > -2147483650.0)
    v21 = (int)v20;
  else
    v21 = 0x80000000;
  if (v20 < 2147483650.0)
    v22 = v21;
  else
    v22 = 0x7FFFFFFF;
  v23 = v18 * 64.0;
  if (v23 >= 2147483650.0)
  {
    v24 = 0x7FFFFFFF;
  }
  else if (v23 <= -2147483650.0)
  {
    v24 = 0x80000000;
  }
  else
  {
    v24 = (int)v23;
  }
  if ((*(_BYTE *)(v7 + 45) & 4) != 0)
  {
    if ((a4 & 4) != 0)
    {
      v25 = (unsigned __int16)*(_DWORD *)(v7 + 124) >> 13;
      v26 = v25 > 5;
      v27 = (1 << v25) & 0x2A;
      if (!v26 && v27 != 0)
      {
        v54 = v22;
        v55 = v24;
        LODWORD(v45) = WebCore::TransformState::mappedPoint(this, 0, (double (*)[4][4])this).u32[0];
        v47 = v45 * 64.0;
        if (v47 >= 2147483650.0)
        {
          v48 = 0x7FFFFFFF;
        }
        else if (v47 <= -2147483650.0)
        {
          v48 = 0x80000000;
        }
        else
        {
          v48 = (int)v47;
        }
        LODWORD(v58[0].f64[0]) = v48;
        v49 = v46 * 64.0;
        if (v49 >= 2147483650.0)
        {
          v50 = 0x7FFFFFFF;
        }
        else if (v49 <= -2147483650.0)
        {
          v50 = 0x80000000;
        }
        else
        {
          v50 = (int)v49;
        }
        HIDWORD(v58[0].f64[0]) = v50;
        v51 = WebCore::RenderBox::flipForWritingMode((WebCore::RenderBox *)v7, (const WebCore::LayoutPoint *)v58);
        LODWORD(v52) = v51 - v54;
        if (__OFSUB__((_DWORD)v51, v54))
          v52 = (v51 >> 31) + 0x7FFFFFFF;
        else
          v52 = v52;
        v53 = (HIDWORD(v51) - v55);
        if (__OFSUB__(HIDWORD(v51), v55))
          v53 = ((HIDWORD(v51) >> 31) + 0x7FFFFFFF);
        v56[0] = v52 | (v53 << 32);
        WebCore::TransformState::move(this, (WebCore::LayoutSize *)v56, 0);
      }
      a4 &= ~4u;
    }
    if ((*(_BYTE *)(v7 + 22) & 1) == 0
      || ((*(_BYTE *)(v7 + 45) & 2) != 0
        ? (v32 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 32) + 8) + 96))
        : (v32 = *(_QWORD *)(v7 + 96)),
          v29 = v32 & 0x1C00,
          v29 == 2048))
    {
      v29 = 0;
    }
    else if (v29)
    {
      v29 = *(_QWORD *)(*(_QWORD *)(v7 + 144) + 264);
      if (v29)
      {
        v33 = *(_QWORD *)(v29 + 104);
        v34 = HIDWORD(v33);
        v35 = (_DWORD)v33 << 6;
        if ((int)v33 < -33554432)
          v35 = 0x80000000;
        if ((int)v33 <= 0x1FFFFFF)
          v36 = v35;
        else
          v36 = 0x7FFFFFFF;
        if ((int)v34 >= -33554432)
          v37 = HIDWORD(v33) << 6;
        else
          v37 = 0x80000000;
        if ((int)v34 <= 0x1FFFFFF)
          v38 = v37;
        else
          v38 = 0x7FFFFFFF;
        if (v36 == 0x80000000)
          v29 = 0x7FFFFFFFLL;
        else
          v29 = -v36;
        if (v38 == 0x80000000)
          v39 = 0x7FFFFFFFLL;
        else
          v39 = -v38;
        v30 = v39 << 32;
        goto LABEL_33;
      }
    }
    v30 = 0;
LABEL_33:
    v56[0] = v30 | v29;
    WebCore::TransformState::move(this, (WebCore::LayoutSize *)v56, 0);
  }
  result = (*(uint64_t (**)(uint64_t, uint64_t, WebCore::TransformState *, _QWORD, uint64_t, __n128))(*(_QWORD *)v7 + 576))(v7, a2, this, a4, a5, a6);
  v31 = *(_DWORD *)(v7 + 16);
  if (!v31)
  {
    __break(0xC471u);
    JUMPOUT(0x19642B6C4);
  }
  *(_DWORD *)(v7 + 16) = v31 - 1;
  return result;
}

uint64_t WebCore::RenderObject::pushMappingToContainer(WebCore::RenderObject *this, const WebCore::RenderLayerModelObject *a2, WebCore::RenderGeometryMap *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  v3 = *((_QWORD *)this + 4);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return v4;
  ++*(_DWORD *)(v4 + 16);
  v17 = 0;
  if ((*(_BYTE *)(v4 + 45) & 4) != 0)
  {
    if ((*(_BYTE *)(v4 + 22) & 1) == 0
      || ((*(_BYTE *)(v4 + 45) & 2) != 0
        ? (v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 32) + 8) + 96))
        : (v9 = *(_QWORD *)(v4 + 96)),
          v5 = v9 & 0x1C00,
          v5 == 2048))
    {
      v5 = 0;
    }
    else if (v5)
    {
      v5 = *(_QWORD *)(*(_QWORD *)(v4 + 144) + 264);
      if (v5)
      {
        v10 = *(_QWORD *)(v5 + 104);
        v11 = HIDWORD(v10);
        v12 = (_DWORD)v10 << 6;
        if ((int)v10 < -33554432)
          v12 = 0x80000000;
        if ((int)v10 <= 0x1FFFFFF)
          v13 = v12;
        else
          v13 = 0x7FFFFFFF;
        if ((int)v11 >= -33554432)
          v14 = HIDWORD(v10) << 6;
        else
          v14 = 0x80000000;
        if ((int)v11 <= 0x1FFFFFF)
          v15 = v14;
        else
          v15 = 0x7FFFFFFF;
        if (v13 == 0x80000000)
          v5 = 0x7FFFFFFFLL;
        else
          v5 = -v13;
        if (v15 == 0x80000000)
          v16 = 0x7FFFFFFFLL;
        else
          v16 = -v15;
        v6 = v16 << 32;
        goto LABEL_7;
      }
    }
    v6 = 0;
LABEL_7:
    v17 = v6 | v5;
  }
  WebCore::RenderGeometryMap::push(a3, this, (const WebCore::LayoutSize *)&v17, 0, 0, 0, 0);
  v7 = *(_DWORD *)(v4 + 16);
  if (v7)
  {
    *(_DWORD *)(v4 + 16) = v7 - 1;
    return v4;
  }
  result = 286;
  __break(0xC471u);
  return result;
}

void WebCore::RenderObject::mapAbsoluteToLocalPoint(uint64_t a1, unsigned int a2, WebCore::TransformState *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;

  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      ++*(_DWORD *)(v4 + 16);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 584))(v4, a2);
      if ((*(_BYTE *)(v4 + 45) & 4) == 0)
      {
LABEL_18:
        v13 = *(_DWORD *)(v4 + 16);
        if (v13)
          *(_DWORD *)(v4 + 16) = v13 - 1;
        else
          __break(0xC471u);
        return;
      }
      if ((*(_BYTE *)(v4 + 22) & 1) == 0
        || ((*(_BYTE *)(v4 + 45) & 2) != 0
          ? (v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 32) + 8) + 96))
          : (v14 = *(_QWORD *)(v4 + 96)),
            v6 = v14 & 0x1C00,
            v6 == 2048))
      {
        v6 = 0;
      }
      else if (v6)
      {
        v6 = *(_QWORD *)(*(_QWORD *)(v4 + 144) + 264);
        if (v6)
        {
          v15 = *(_QWORD *)(v6 + 104);
          v7 = v15;
          v6 = HIDWORD(v15);
          goto LABEL_7;
        }
      }
      v7 = 0;
LABEL_7:
      v8 = (v7 << 6);
      if (v7 < -33554432)
        v8 = 0x80000000;
      v9 = 0x8000000000000000;
      if ((int)v6 >= -33554432)
        v9 = v6 << 38;
      v10 = (int)v6 <= 0x1FFFFFF;
      v11 = 0x7FFFFFFF00000000;
      if (v10)
        v11 = v9;
      v10 = v7 <= 0x1FFFFFF;
      v12 = 0x7FFFFFFFLL;
      if (v10)
        v12 = v8;
      v16 = v12 | v11;
      WebCore::TransformState::move(a3, (WebCore::LayoutSize *)&v16, 0);
      goto LABEL_18;
    }
  }
}

void WebCore::RenderObject::getTransformFromContainer(WebCore::RenderObject *this, const WebCore::LayoutSize *a2, WebCore::TransformationMatrix *a3)
{
  double v5;
  double v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  float v20;
  float v21;
  float v22;
  const double *v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  WebCore::RenderLayer *v39;
  float64x2x4_t v40;
  float64x2x4_t v41;
  float64x2x4_t v42;
  float64x2x4_t v43;
  float64x2x4_t v44;
  float64x2x4_t v45;
  float64x2x4_t v46;
  float64x2x4_t v47;

  *(_QWORD *)a3 = 0x3FF0000000000000;
  *(_OWORD *)((char *)a3 + 8) = 0u;
  *(_OWORD *)((char *)a3 + 24) = 0u;
  *((_QWORD *)a3 + 5) = 0x3FF0000000000000;
  *((_OWORD *)a3 + 3) = 0u;
  *((_OWORD *)a3 + 4) = 0u;
  *((_QWORD *)a3 + 10) = 0x3FF0000000000000;
  *(_OWORD *)((char *)a3 + 88) = 0u;
  *(_OWORD *)((char *)a3 + 104) = 0u;
  v5 = (double)*(int *)a2 * 0.015625;
  v6 = (double)*((int *)a2 + 1) * 0.015625;
  *((double *)a3 + 12) = v5 + v6 * 0.0 + 0.0;
  *((double *)a3 + 13) = v6 + v5 * 0.0 + 0.0;
  *((float64x2_t *)a3 + 7) = vaddq_f64((float64x2_t)vdupq_lane_s64(COERCE__INT64(v6 * 0.0 + v5 * 0.0), 0), (float64x2_t)xmmword_1968A14C0);
  v39 = 0;
  if ((*((_BYTE *)this + 21) & 0x80) != 0)
  {
    if ((*((_BYTE *)this + 45) & 0x10) == 0)
    {
      __break(0xC471u);
      goto LABEL_22;
    }
    if (*(_QWORD *)WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>::operator=((uint64_t)&v39, *((_QWORD *)this + 18))&& *((_QWORD *)v39 + 25))
    {
      WebCore::RenderLayer::currentTransform(v39);
      v7 = *(float64x2_t *)a3;
      v8 = *((float64x2_t *)a3 + 1);
      v9 = *((float64x2_t *)a3 + 2);
      v10 = *((float64x2_t *)a3 + 3);
      v11 = *((float64x2_t *)a3 + 4);
      v12 = *((float64x2_t *)a3 + 5);
      v13 = *((float64x2_t *)a3 + 6);
      v14 = *((float64x2_t *)a3 + 7);
      v44 = vld4q_dup_f64(v31.f64);
      v15 = &v33;
      v40 = vld4q_dup_f64(v15->f64);
      v15 += 2;
      *(float64x2_t *)a3 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v44.val[0], *(float64x2_t *)a3), v44.val[1], v9), v44.val[2], v11), v44.val[3], v13);
      *((float64x2_t *)a3 + 1) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v44.val[0], v8), v44.val[1], v10), v44.val[2], v12), v44.val[3], v14);
      v45 = vld4q_dup_f64(v15->f64);
      v15 += 2;
      *((float64x2_t *)a3 + 2) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v40.val[0], v7), v40.val[1], v9), v40.val[2], v11), v40.val[3], v13);
      *((float64x2_t *)a3 + 3) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v40.val[0], v8), v40.val[1], v10), v40.val[2], v12), v40.val[3], v14);
      v41 = vld4q_dup_f64(v15->f64);
      *((float64x2_t *)a3 + 4) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v45.val[0], v7), v45.val[1], v9), v45.val[2], v11), v45.val[3], v13);
      *((float64x2_t *)a3 + 5) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v45.val[0], v8), v45.val[1], v10), v45.val[2], v12), v45.val[3], v14);
      *((float64x2_t *)a3 + 6) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v41.val[0], v7), v41.val[1], v9), v41.val[2], v11), v41.val[3], v13);
      *((float64x2_t *)a3 + 7) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v41.val[0], v8), v41.val[1], v10), v41.val[2], v12), v41.val[3], v14);
    }
  }
  v16 = *((_QWORD *)this + 4);
  if (!v16)
    goto LABEL_11;
  v17 = *(_QWORD *)(v16 + 8);
  if (!v17)
    goto LABEL_11;
  v18 = *(_DWORD *)(v17 + 16) + 1;
  *(_DWORD *)(v17 + 16) = v18;
  if ((*(_BYTE *)(v17 + 21) & 0x80) != 0 && *(float *)(*(_QWORD *)(*(_QWORD *)(v17 + 88) + 40) + 260) != -1.0)
  {
    if ((*(_BYTE *)(v17 + 45) & 0x10) != 0)
    {
      v20 = WebCore::RenderLayer::perspectiveOrigin(*(WebCore::RenderLayer **)(v17 + 144));
      v22 = v21;
      v37 = (float64x2_t)xmmword_1969FCE40;
      v38 = (float64x2_t)unk_1969FCE50;
      v35 = (float64x2_t)xmmword_1969FCE20;
      v36 = (float64x2_t)unk_1969FCE30;
      v33 = (float64x2_t)xmmword_1969FCE00;
      v34 = (float64x2_t)unk_1969FCE10;
      v31 = (float64x2_t)constinit_7;
      v32 = *(float64x2_t *)algn_1969FCDF0;
      WebCore::TransformationMatrix::applyPerspective(&v31, fmaxf(*(float *)(*(_QWORD *)(*(_QWORD *)(v17 + 88) + 40) + 260), 1.0));
      WebCore::TransformationMatrix::translateRight3d(a3, (float)-v20, (float)-v22, 0.0);
      v23 = (const double *)a3;
      v46 = vld4q_dup_f64(v23);
      v23 += 4;
      v42 = vld4q_dup_f64(v23);
      v23 += 4;
      v24 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v46.val[0], v31), v46.val[1], v33), v46.val[2], v35), v46.val[3], v37);
      v25 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v46.val[0], v32), v46.val[1], v34), v46.val[2], v36), v46.val[3], v38);
      v47 = vld4q_dup_f64(v23);
      v23 += 4;
      v26 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v42.val[0], v31), v42.val[1], v33), v42.val[2], v35), v42.val[3], v37);
      v27 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v42.val[0], v32), v42.val[1], v34), v42.val[2], v36), v42.val[3], v38);
      v43 = vld4q_dup_f64(v23);
      v28 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v47.val[0], v32), v47.val[1], v34), v47.val[2], v36), v47.val[3], v38);
      v29 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v43.val[0], v31), v43.val[1], v33), v43.val[2], v35), v43.val[3], v37);
      v30 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v43.val[0], v32), v43.val[1], v34), v43.val[2], v36), v43.val[3], v38);
      *((float64x2_t *)a3 + 4) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v47.val[0], v31), v47.val[1], v33), v47.val[2], v35), v47.val[3], v37);
      *((float64x2_t *)a3 + 5) = v28;
      *((float64x2_t *)a3 + 6) = v29;
      *((float64x2_t *)a3 + 7) = v30;
      *(float64x2_t *)a3 = v24;
      *((float64x2_t *)a3 + 1) = v25;
      *((float64x2_t *)a3 + 2) = v26;
      *((float64x2_t *)a3 + 3) = v27;
      WebCore::TransformationMatrix::translateRight3d(a3, v20, v22, 0.0);
      v18 = *(_DWORD *)(v17 + 16);
      goto LABEL_9;
    }
    __break(0xC471u);
LABEL_22:
    JUMPOUT(0x19642BE64);
  }
LABEL_9:
  if (!v18)
  {
    __break(0xC471u);
    JUMPOUT(0x19642BEA4);
  }
  *(_DWORD *)(v17 + 16) = v18 - 1;
LABEL_11:
  if (v39)
  {
    v19 = *((_DWORD *)v39 + 2);
    if (!v19)
    {
      __break(0xC471u);
      JUMPOUT(0x19642BE84);
    }
    *((_DWORD *)v39 + 2) = v19 - 1;
  }
}

uint64_t WebCore::RenderObject::participatesInPreserve3D(WebCore::RenderObject *this)
{
  uint64_t result;

  if ((*((_BYTE *)this + 21) & 0x80) == 0)
    return 0;
  if ((*((_BYTE *)this + 45) & 0x10) != 0)
    return WebCore::RenderLayer::participatesInPreserve3D(*((WebCore::RenderLayer **)this + 18));
  result = 96;
  __break(0xC471u);
  return result;
}

unint64_t WebCore::RenderObject::offsetFromAncestorContainer(WebCore::RenderObject *this, const WebCore::RenderElement *a2)
{
  WebCore::RenderObject *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  const WebCore::RenderElement *v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  unint64_t v14;

  v3 = this;
  v14 = 0;
  if (this)
    ++*((_DWORD *)this + 4);
  v4 = 0;
  v5 = 0;
  while (1)
  {
    v6 = WebCore::RenderObject::container(v3);
    if (!v6)
      break;
    v7 = (const WebCore::RenderElement *)v6;
    ++*(_DWORD *)(v6 + 16);
    v8 = (*(uint64_t (**)(WebCore::RenderObject *, uint64_t, unint64_t *, _QWORD))(*(_QWORD *)v3 + 360))(v3, v6, &v14, 0);
    if (__OFADD__(v4, (_DWORD)v8))
      v4 = (v4 >> 31) + 0x7FFFFFFF;
    else
      v4 += v8;
    if (__OFADD__((_DWORD)v5, HIDWORD(v8)))
      v5 = (v5 >> 31) + 0x7FFFFFFF;
    else
      v5 = (v5 + HIDWORD(v8));
    v9 = (v14 >> 31) + 0x7FFFFFFF;
    if (!__OFADD__((_DWORD)v14, (_DWORD)v8))
      v9 = v14 + v8;
    v10 = HIDWORD(v14) + HIDWORD(v8);
    if (__OFADD__(HIDWORD(v14), HIDWORD(v8)))
      v10 = (HIDWORD(v14) >> 31) + 0x7FFFFFFF;
    v14 = __PAIR64__(v10, v9);
    v11 = *((_DWORD *)v3 + 4);
    if (!v11)
    {
      __break(0xC471u);
      JUMPOUT(0x19642C030);
    }
    *((_DWORD *)v3 + 4) = v11 - 1;
    v3 = v7;
    if (v7 == a2)
    {
      v3 = a2;
      goto LABEL_19;
    }
  }
  if (!v3)
    return v4 | (unint64_t)(v5 << 32);
LABEL_19:
  v12 = *((_DWORD *)v3 + 4);
  if (!v12)
  {
    __break(0xC471u);
    JUMPOUT(0x19642C050);
  }
  *((_DWORD *)v3 + 4) = v12 - 1;
  return v4 | (unint64_t)(v5 << 32);
}

float WebCore::RenderObject::localToContainerPoint(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  void *v4;
  float v5;
  WTF *v6;
  WTF *v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  char v12;
  char v13;
  WTF *v14;
  WTF *v15;
  uint64_t v16;
  char v17;
  __int16 v18;
  int v19;
  int v20;

  v9 = *a2;
  v13 = 0;
  v10 = 0u;
  v11 = 0u;
  v12 = 0;
  v15 = 0;
  v16 = 0;
  v14 = 0;
  v17 = 0;
  v18 = 1;
  v19 = 0;
  v20 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 576))(a1, a3, &v9, a4 | 4);
  WebCore::TransformState::flatten((WebCore::TransformState *)&v9, 0);
  v5 = *(float *)&v9;
  v6 = v15;
  v15 = 0;
  if (v6)
    WTF::fastFree(v6, v4);
  v7 = v14;
  v14 = 0;
  if (v7)
    WTF::fastFree(v7, v4);
  return v5;
}

unint64_t WebCore::RenderObject::offsetFromContainer(WebCore::RenderObject *this, WebCore::RenderElement *a2, const WebCore::LayoutPoint *a3, BOOL *a4)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v12;

  if ((*((_BYTE *)a2 + 45) & 4) != 0)
  {
    v8 = WebCore::RenderBox::scrollPosition(a2);
    v9 = (_DWORD)v8 << 6;
    v10 = HIDWORD(v8) << 6;
    if ((int)v8 < -33554432)
      v9 = 0x80000000;
    if ((int)v8 > 0x1FFFFFF)
      v9 = 0x7FFFFFFF;
    if (SHIDWORD(v8) < -33554432)
      v10 = 0x80000000;
    if (SHIDWORD(v8) > 0x1FFFFFF)
      v10 = 0x7FFFFFFF;
    v6 = -v9;
    if (__OFSUB__(0, v9))
      v6 = 0x7FFFFFFF;
    LODWORD(v7) = -v10;
    if (__OFSUB__(0, v10))
      v7 = 0x7FFFFFFFLL;
    else
      v7 = v7;
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  if (a4)
  {
    v12 = (*((unsigned __int8 *)a2 + 53) >> 1) & 1;
    if ((*((_BYTE *)a2 + 52) & 7) != 1)
      LOBYTE(v12) = 0;
    *a4 = v12;
  }
  return v6 | (unint64_t)(v7 << 32);
}

uint64_t WebCore::RenderObject::hostWindow(WebCore::RenderObject *this)
{
  _QWORD *v2;
  uint64_t i;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t j;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1944)
                  + 248);
  for (i = v2[4]; i; i = v4[4])
  {
    v4 = *(_QWORD **)(i + 8);
    if (!v4)
      break;
    v2 = v4;
  }
  if (((*(uint64_t (**)(_QWORD *))(*v2 + 72))(v2) & 1) == 0
    && !(*(unsigned int (**)(_QWORD *))(*v2 + 80))(v2))
  {
    return 0;
  }
  v5 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1944)
                  + 248);
  for (j = v5[4]; j; j = v7[4])
  {
    v7 = *(_QWORD **)(j + 8);
    if (!v7)
      break;
    v5 = v7;
  }
  if (((*(uint64_t (**)(_QWORD *))(*v5 + 72))(v5) & 1) == 0)
    (*(void (**)(_QWORD *))(*v5 + 80))(v5);
  v8 = *(_QWORD *)((*(uint64_t (**)(_QWORD *))(*v5 + 720))(v5) + 24);
  if (v8 && (v9 = *(_QWORD *)(v8 + 8)) != 0)
    return *(_QWORD *)(v9 + 48);
  else
    return 0;
}

BOOL WebCore::RenderObject::isSelectionBorder(WebCore::RenderObject *this)
{
  unsigned int v1;
  uint64_t v2;
  BOOL v3;
  int v4;
  BOOL v5;
  uint64_t v7;
  WebCore::RenderObject *v8;
  WebCore::RenderObject *v9;

  v1 = (*((_DWORD *)this + 5) >> 25) & 7;
  v2 = 1;
  v3 = v1 >= 4;
  v5 = v1 == 4;
  v4 = (1 << v1) & 0x1A;
  v5 = !v5 && v3 || v4 == 0;
  if (v5)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1944);
    v8 = *(WebCore::RenderObject **)(v7 + 288);
    if (v8)
      v8 = (WebCore::RenderObject *)*((_QWORD *)v8 + 1);
    if (v8 == this)
    {
      return 1;
    }
    else
    {
      v9 = *(WebCore::RenderObject **)(v7 + 296);
      if (v9)
        v9 = (WebCore::RenderObject *)*((_QWORD *)v9 + 1);
      return v9 == this;
    }
  }
  return v2;
}

uint64_t WebCore::RenderObject::setCapturedInViewTransition(uint64_t this, int a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  v2 = *(_DWORD *)(this + 20);
  if (a2 != (v2 & 0x400000u) >> 22)
  {
    if (a2)
      v3 = 0x400000;
    else
      v3 = 0;
    *(_DWORD *)(this + 20) = v2 & 0xFFBFFFFF | v3;
    v8 = 0;
    v4 = *(_QWORD *)(*(_QWORD *)(this + 24) + 8);
    v5 = *(_QWORD *)(*(_QWORD *)(v4 + 40) + 8);
    if (*(_QWORD *)(v5 + 1272) == v4)
    {
      this = *(_QWORD *)(v5 + 1944);
    }
    else
    {
      if ((v2 & 0x8000) == 0)
        return this;
      if ((*(_BYTE *)(this + 45) & 0x10) == 0)
      {
        __break(0xC471u);
        goto LABEL_16;
      }
    }
    WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>::operator=((uint64_t)&v8, *(_QWORD *)(this + 144));
    this = v8;
    if (!v8)
      return this;
    *(_DWORD *)(v8 + 12) |= 8u;
    WebCore::RenderLayer::setAncestorsHaveCompositingDirtyFlag(this, 1);
    v6 = v8;
    *(_DWORD *)(v8 + 12) |= 0x40u;
    this = WebCore::RenderLayer::setAncestorsHaveCompositingDirtyFlag(v6, 2);
    if (!v8)
      return this;
    v7 = *(_DWORD *)(v8 + 8);
    if (v7)
    {
      *(_DWORD *)(v8 + 8) = v7 - 1;
      return this;
    }
    __break(0xC471u);
LABEL_16:
    JUMPOUT(0x19642C3F4);
  }
  return this;
}

uint64_t WebCore::RenderObject::insertedIntoTree(uint64_t this)
{
  uint64_t v1;
  unsigned __int8 *v2;
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  int v7;

  if ((*(_BYTE *)(this + 21) & 8) != 0)
    return this;
  v1 = *(_QWORD *)(this + 32);
  if (v1)
    v2 = *(unsigned __int8 **)(v1 + 8);
  else
    v2 = 0;
  v3 = v2[46];
  if (v3 != 83 && v3 != 103)
  {
    v5 = v2[52] & 7;
    if (v5 == 1)
    {
      if ((v2[53] & 8) != 0)
        goto LABEL_6;
    }
    else if (v5 == 4)
    {
      goto LABEL_6;
    }
    v6 = v3 - 71;
    if (v6 > 0xF || ((1 << v6) & 0xA001) == 0)
      return this;
  }
LABEL_6:
  if (v1)
  {
    v4 = *(_QWORD *)(v1 + 8);
    if ((*(_BYTE *)(v4 + 22) & 4) == 0)
      return this;
    ++*(_DWORD *)(v4 + 16);
  }
  else
  {
    if ((MEMORY[0x16] & 4) == 0)
      return this;
    v4 = 0;
  }
  this = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 672))(v4, this);
  v7 = *(_DWORD *)(v4 + 16);
  if (v7)
  {
    *(_DWORD *)(v4 + 16) = v7 - 1;
  }
  else
  {
    this = 286;
    __break(0xC471u);
  }
  return this;
}

uint64_t WebCore::RenderObject::willBeRemovedFromTree(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  unsigned int v7;
  BOOL v8;
  int v9;
  int v11;
  int v12;
  uint64_t v13;
  int v14;

  v1 = *(_QWORD *)(this + 32);
  if (!v1)
    return this;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return this;
  *(_DWORD *)(v2 + 16) += 2;
  v3 = v2;
  while (1)
  {
    v4 = *(unsigned __int8 *)(v3 + 46);
    if (v4 == 83 || v4 == 103)
      goto LABEL_6;
    v6 = *(_BYTE *)(v3 + 52) & 7;
    if (v6 == 1)
    {
      if ((*(_BYTE *)(v3 + 53) & 8) != 0)
        goto LABEL_6;
    }
    else if (v6 == 4)
    {
      goto LABEL_6;
    }
    v7 = v4 - 71;
    v8 = v7 > 0xF;
    v9 = (1 << v7) & 0xA001;
    if (v8 || v9 == 0)
      goto LABEL_19;
LABEL_6:
    v5 = *(_BYTE *)(v3 + 52) & 7;
    if ((v5 == 3 || v5 == 4) && (*(_BYTE *)(v3 + 53) & 0x20) != 0)
      break;
    v13 = *(_QWORD *)(v3 + 32);
    if (v13)
    {
      v13 = *(_QWORD *)(v13 + 8);
      if (v13)
        ++*(_DWORD *)(v13 + 16);
    }
    v14 = *(_DWORD *)(v3 + 16);
    if (!v14)
      goto LABEL_34;
    *(_DWORD *)(v3 + 16) = v14 - 1;
    v3 = v13;
    if (!v13)
      goto LABEL_21;
  }
  this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 216))(v3);
LABEL_19:
  v11 = *(_DWORD *)(v3 + 16);
  if (!v11)
  {
LABEL_34:
    __break(0xC471u);
    JUMPOUT(0x19642C6BCLL);
  }
  *(_DWORD *)(v3 + 16) = v11 - 1;
LABEL_21:
  v12 = *(_DWORD *)(v2 + 16);
  if (!v12)
  {
    __break(0xC471u);
    JUMPOUT(0x19642C6DCLL);
  }
  *(_DWORD *)(v2 + 16) = v12 - 1;
  return this;
}

uint64_t WebCore::RenderObject::invalidateCachedBoundaries(uint64_t this)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  unsigned int v5;
  BOOL v6;
  int v7;
  int v9;
  uint64_t v10;
  int v11;

  if (!this)
    return this;
  v1 = this;
  ++*(_DWORD *)(this + 16);
  while (1)
  {
    v2 = *(unsigned __int8 *)(v1 + 46);
    if (v2 == 83 || v2 == 103)
      goto LABEL_5;
    v4 = *(_BYTE *)(v1 + 52) & 7;
    if (v4 == 1)
    {
      if ((*(_BYTE *)(v1 + 53) & 8) != 0)
        goto LABEL_5;
    }
    else if (v4 == 4)
    {
      goto LABEL_5;
    }
    v5 = v2 - 71;
    v6 = v5 > 0xF;
    v7 = (1 << v5) & 0xA001;
    if (v6 || v7 == 0)
      goto LABEL_18;
LABEL_5:
    v3 = *(_BYTE *)(v1 + 52) & 7;
    if ((v3 == 3 || v3 == 4) && (*(_BYTE *)(v1 + 53) & 0x20) != 0)
      break;
    v10 = *(_QWORD *)(v1 + 32);
    if (v10)
    {
      v10 = *(_QWORD *)(v10 + 8);
      if (v10)
        ++*(_DWORD *)(v10 + 16);
    }
    v11 = *(_DWORD *)(v1 + 16);
    if (!v11)
      goto LABEL_29;
    *(_DWORD *)(v1 + 16) = v11 - 1;
    v1 = v10;
    if (!v10)
      return this;
  }
  this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 216))(v1);
LABEL_18:
  v9 = *(_DWORD *)(v1 + 16);
  if (!v9)
  {
LABEL_29:
    __break(0xC471u);
    JUMPOUT(0x19642C820);
  }
  *(_DWORD *)(v1 + 16) = v9 - 1;
  return this;
}

unsigned int *WebCore::RenderObject::positionForPoint@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v3;
  unsigned int *result;
  unsigned int v5;
  WebCore::Node *v6;
  int v7;
  char v8;

  (*(void (**)(WebCore::Node **__return_ptr))(*(_QWORD *)a1 + 352))(&v6);
  result = (unsigned int *)v6;
  if (v6)
  {
    v5 = *((_DWORD *)v6 + 6);
    *((_DWORD *)v6 + 6) = v5 + 2;
    *(_QWORD *)a2 = result;
    *(_DWORD *)(a2 + 8) = v7;
    *(_BYTE *)(a2 + 12) = v8;
    v6 = 0;
    if (v5)
    {
      result[6] = v5;
    }
    else if ((*((_WORD *)result + 15) & 0x400) == 0)
    {
      return WebCore::Node::removedLastRef((WebCore::Node *)result, v3);
    }
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_DWORD *)(a2 + 8) = v7;
    *(_BYTE *)(a2 + 12) = v8;
  }
  return result;
}

unsigned int *WebCore::RenderObject::positionForPoint@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  int v4;

  v4 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 528))(a1);
  return WebCore::RenderObject::createVisiblePosition(a1, v4, 1, a2);
}

unsigned int *WebCore::RenderObject::createVisiblePosition@<X0>(unsigned int *result@<X0>, int a2@<W1>, char a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int *v6;
  char v8;
  uint64_t v9;
  char v10;
  void *v11;
  const WebCore::VisiblePosition *v12;
  char v13;
  void *v14;
  WebCore::Node *v15;
  WebCore::Node *v16;
  void *v17;
  const WebCore::VisiblePosition *v18;
  WebCore::Node *v19;
  WebCore::Node *v20;
  WebCore::Node *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  WebCore::Node *v25;
  unsigned int *v26;
  unsigned int v27;
  char v28;
  unsigned __int16 *v29;
  uint64_t v30;
  unsigned int *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  char v40;
  uint64_t v41;
  void *v42;
  __int16 v43;
  char v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  int v48;
  WebCore::Node *v49;
  unsigned int v50;
  _DWORD *v51;
  unsigned int v52;
  char v53;
  uint64_t v54;
  void *v55;
  unsigned int v56;
  void *v57;
  WebCore::Node *v58;
  unsigned int v59;
  WebCore::Node *v60;
  WebCore::Node *v61;
  WebCore::Node *v62;
  WebCore::Node *v63;
  int v64;
  char v65;
  WebCore::Node *v66;
  int v67;
  char v68;
  WebCore::Node *v69;
  int v70;
  char v71;
  char v72;

  v6 = result;
  v8 = *((_BYTE *)result + 45);
  if ((v8 & 1) != 0
    || (result = *(unsigned int **)(*((_QWORD *)result + 3) + 8)) == 0
    || (~*((unsigned __int16 *)result + 14) & 0x408) != 0)
  {
LABEL_6:
    if ((v8 & 1) == 0)
    {
      v9 = *(_QWORD *)(*((_QWORD *)v6 + 3) + 8);
      if (v9)
      {
        *(_DWORD *)(v9 + 24) += 2;
        if (WebCore::Node::computeEditability(v9, 0, 1))
          goto LABEL_9;
        *(_DWORD *)(v9 + 24) += 2;
        v66 = (WebCore::Node *)v9;
        v67 = a2;
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 208))(v9) & 1) != 0)
        {
          v13 = 8;
        }
        else if (a2)
        {
          v13 = 10;
        }
        else
        {
          v13 = 9;
        }
        v68 = v13;
        WebCore::Position::downstream((uint64_t)&v66, 0, (uint64_t)&v63);
        if (WebCore::Node::computeEditability((uint64_t)v63, 0, 1))
        {
LABEL_22:
          WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v63, a4);
          *(_BYTE *)(a4 + 16) = 1;
          if ((a3 & 1) == 0)
          {
            v61 = *(WebCore::Node **)a4;
            if (*(_QWORD *)a4)
            {
              *((_DWORD *)v61 + 6) += 2;
              v69 = v61;
              v70 = *(_DWORD *)(a4 + 8);
              v71 = *(_BYTE *)(a4 + 12);
              v72 = 0;
              if (!WebCore::inSameLine((WebCore *)a4, (const WebCore::VisiblePosition *)&v69, v18))
                *(_BYTE *)(a4 + 16) = 0;
              v62 = v69;
              v69 = 0;
              if (v62)
              {
                if (*((_DWORD *)v62 + 6) == 2)
                {
                  if ((*((_WORD *)v62 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v62, v11);
                }
                else
                {
                  *((_DWORD *)v62 + 6) -= 2;
                }
              }
            }
          }
          v19 = v63;
          v63 = 0;
          if (v19)
          {
            if (*((_DWORD *)v19 + 6) == 2)
            {
              if ((*((_WORD *)v19 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v19, v11);
            }
            else
            {
              *((_DWORD *)v19 + 6) -= 2;
            }
          }
          result = (unsigned int *)v66;
          v66 = 0;
          if (!result)
            goto LABEL_29;
          if (result[6] != 2)
          {
            result[6] -= 2;
            goto LABEL_29;
          }
          if ((*((_WORD *)result + 15) & 0x400) == 0)
            goto LABEL_149;
          goto LABEL_29;
        }
        WebCore::Position::upstream((uint64_t)&v66, 0, (uint64_t)&v69);
        v15 = v69;
        v69 = 0;
        v16 = v63;
        v63 = v15;
        if (v16)
        {
          if (*((_DWORD *)v16 + 6) == 2)
          {
            if ((*((_WORD *)v16 + 15) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef(v16, v14);
              v58 = v69;
              v64 = v70;
              v65 = v71;
              v69 = 0;
              if (v58)
              {
                if (*((_DWORD *)v58 + 6) == 2)
                {
                  if ((*((_WORD *)v58 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v58, v57);
                }
                else
                {
                  *((_DWORD *)v58 + 6) -= 2;
                }
              }
LABEL_21:
              if (!WebCore::Node::computeEditability((uint64_t)v63, 0, 1))
              {
                v20 = v63;
                v63 = 0;
                if (v20)
                {
                  if (*((_DWORD *)v20 + 6) == 2)
                  {
                    if ((*((_WORD *)v20 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v20, v17);
                  }
                  else
                  {
                    *((_DWORD *)v20 + 6) -= 2;
                  }
                }
                v21 = v66;
                v66 = 0;
                if (v21)
                {
                  if (*((_DWORD *)v21 + 6) == 2)
                  {
                    if ((*((_WORD *)v21 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v21, v17);
                  }
                  else
                  {
                    *((_DWORD *)v21 + 6) -= 2;
                  }
                }
LABEL_9:
                *(_DWORD *)(v9 + 24) += 2;
                v66 = (WebCore::Node *)v9;
                v67 = a2;
                if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 208))(v9) & 1) != 0)
                {
                  v10 = 8;
                }
                else if (a2)
                {
                  v10 = 10;
                }
                else
                {
                  v10 = 9;
                }
                v68 = v10;
                result = (unsigned int *)WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v66, a4);
                *(_BYTE *)(a4 + 16) = 1;
                if ((a3 & 1) == 0)
                {
                  v60 = *(WebCore::Node **)a4;
                  if (*(_QWORD *)a4)
                  {
                    *((_DWORD *)v60 + 6) += 2;
                    v69 = v60;
                    v70 = *(_DWORD *)(a4 + 8);
                    v71 = *(_BYTE *)(a4 + 12);
                    v72 = 0;
                    if (!WebCore::inSameLine((WebCore *)a4, (const WebCore::VisiblePosition *)&v69, v12))
                      *(_BYTE *)(a4 + 16) = 0;
                    result = (unsigned int *)v69;
                    v69 = 0;
                    if (result)
                    {
                      if (result[6] == 2)
                      {
                        if ((*((_WORD *)result + 15) & 0x400) == 0)
                          result = WebCore::Node::removedLastRef((WebCore::Node *)result, v11);
                      }
                      else
                      {
                        result[6] -= 2;
                      }
                    }
                  }
                }
                if (*(_DWORD *)(v9 + 24) != 2)
                {
                  *(_DWORD *)(v9 + 24) -= 2;
                  goto LABEL_29;
                }
                if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
                {
                  result = (unsigned int *)v9;
LABEL_149:
                  result = WebCore::Node::removedLastRef((WebCore::Node *)result, v11);
                }
LABEL_29:
                if (*(_DWORD *)(v9 + 24) == 2)
                {
                  if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
                    return WebCore::Node::removedLastRef((WebCore::Node *)v9, v11);
                }
                else
                {
                  *(_DWORD *)(v9 + 24) -= 2;
                }
                return result;
              }
              goto LABEL_22;
            }
          }
          else
          {
            *((_DWORD *)v16 + 6) -= 2;
          }
        }
        v64 = v70;
        v65 = v71;
        goto LABEL_21;
      }
    }
    goto LABEL_42;
  }
  result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 368))(result);
  if (!(_DWORD)result)
  {
    v8 = *((_BYTE *)v6 + 45);
    goto LABEL_6;
  }
LABEL_42:
  ++v6[4];
  do
  {
    v22 = *((_QWORD *)v6 + 4);
    if (!v22 || (v23 = *(_QWORD *)(v22 + 8)) == 0)
    {
      *(_QWORD *)(a4 + 8) = 0;
      *(_QWORD *)(a4 + 16) = 0;
      *(_QWORD *)a4 = 0;
      *(_BYTE *)(a4 + 16) = 1;
      goto LABEL_157;
    }
    ++*(_DWORD *)(v23 + 16);
    ++v6[4];
    v24 = v6;
    while (1)
    {
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v24 + 112))(v24);
      v26 = result;
      if (result)
        goto LABEL_47;
      if (v24 == (unsigned int *)v23)
        break;
      v31 = v24;
      while (1)
      {
        v32 = *(unsigned int *)((char *)v31 + 47);
        if (v32 | ((unint64_t)*((unsigned __int8 *)v31 + 51) << 32))
        {
          v26 = *(unsigned int **)((v32 | ((unint64_t)*((unsigned __int8 *)v31 + 51) << 32)) + 8);
          if (v26)
            break;
        }
        v33 = *((_QWORD *)v31 + 4);
        if (v33)
        {
          v31 = *(unsigned int **)(v33 + 8);
          if (v31 && v31 != (unsigned int *)v23)
            continue;
        }
        goto LABEL_66;
      }
LABEL_47:
      ++v26[4];
      v27 = v24[4];
      if (!v27)
        goto LABEL_193;
      v24[4] = v27 - 1;
      v28 = *((_BYTE *)v26 + 45);
      if ((v28 & 1) != 0)
        goto LABEL_53;
      v29 = *(unsigned __int16 **)(*((_QWORD *)v26 + 3) + 8);
      if (!v29 || (~v29[14] & 0x408) != 0)
        goto LABEL_53;
      v24 = v26;
      if (!(*(unsigned int (**)(unsigned __int16 *))(*(_QWORD *)v29 + 368))(v29))
      {
        v28 = *((_BYTE *)v26 + 45);
LABEL_53:
        v24 = v26;
        if ((v28 & 1) == 0)
        {
          v30 = *(_QWORD *)(*((_QWORD *)v26 + 3) + 8);
          v24 = v26;
          if (v30)
          {
            *(_DWORD *)(v30 + 24) += 2;
            WebCore::firstPositionInOrBeforeNode(v30, v25, (uint64_t)&v69);
            WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v69, a4);
            *(_BYTE *)(a4 + 16) = 1;
            result = (unsigned int *)v69;
            v69 = 0;
            if (result)
            {
              if (result[6] == 2)
              {
                if ((*((_WORD *)result + 15) & 0x400) == 0)
                  result = WebCore::Node::removedLastRef((WebCore::Node *)result, v42);
              }
              else
              {
                result[6] -= 2;
              }
            }
            if (*(_DWORD *)(v30 + 24) != 2)
            {
              *(_DWORD *)(v30 + 24) -= 2;
LABEL_102:
              v46 = 1;
              goto LABEL_103;
            }
            if ((*(_WORD *)(v30 + 30) & 0x400) != 0)
              goto LABEL_102;
            v49 = (WebCore::Node *)v30;
            goto LABEL_118;
          }
        }
      }
    }
    v24 = (unsigned int *)v23;
LABEL_66:
    v35 = v24[4];
    if (!v35)
    {
LABEL_193:
      __break(0xC471u);
      JUMPOUT(0x19642D0ECLL);
    }
    v24[4] = v35 - 1;
    ++v6[4];
    v26 = v6;
    while (2)
    {
      v36 = v26[10];
      if (v36 | ((unint64_t)*((unsigned __int8 *)v26 + 44) << 32))
      {
        result = *(unsigned int **)((v36 | ((unint64_t)*((unsigned __int8 *)v26 + 44) << 32)) + 8);
        if (result)
        {
          do
          {
            v38 = result;
            result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 120))(result);
          }
          while (result);
          ++v38[4];
          if (v26)
          {
LABEL_73:
            v39 = v26[4];
            if (!v39)
              goto LABEL_186;
            v26[4] = v39 - 1;
          }
          if (v38 == (unsigned int *)v23)
          {
            v26 = (unsigned int *)v23;
            goto LABEL_122;
          }
          v26 = v38;
          v40 = *((_BYTE *)v38 + 45);
          if ((v40 & 1) == 0)
          {
            result = *(unsigned int **)(*((_QWORD *)v38 + 3) + 8);
            if (result)
            {
              if ((~*((unsigned __int16 *)result + 14) & 0x408) == 0)
              {
                result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 368))(result);
                if ((_DWORD)result)
                  continue;
                v40 = *((_BYTE *)v38 + 45);
              }
            }
          }
          if ((v40 & 1) == 0)
          {
            v41 = *(_QWORD *)(*((_QWORD *)v38 + 3) + 8);
            if (v41)
            {
              *(_DWORD *)(v41 + 24) += 2;
              if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 208))(v41) & 1) != 0)
              {
                v43 = *(_WORD *)(v41 + 28);
                *(_DWORD *)(v41 + 24) += 2;
                if ((v43 & 1) != 0)
                {
                  v45 = *(_QWORD *)(v41 + 80);
                  if (v45)
                    LODWORD(v45) = *(_DWORD *)(v45 + 4);
                  v69 = (WebCore::Node *)v41;
                  v70 = v45;
                  v44 = v71 & 0xF0;
                }
                else
                {
                  v69 = (WebCore::Node *)v41;
                  v70 = 0;
                  v44 = v71 & 0xF0 | 4;
                }
              }
              else
              {
                *(_DWORD *)(v41 + 24) += 2;
                v69 = (WebCore::Node *)v41;
                v70 = 0;
                v44 = v71 & 0xF0 | 2;
              }
              v71 = v44;
              result = (unsigned int *)WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v69, a4);
              *(_BYTE *)(a4 + 16) = 1;
              if (*(_DWORD *)(v41 + 24) == 2)
              {
                if ((*(_WORD *)(v41 + 30) & 0x400) == 0)
                  result = WebCore::Node::removedLastRef((WebCore::Node *)v41, v42);
              }
              else
              {
                *(_DWORD *)(v41 + 24) -= 2;
              }
              if (*(_DWORD *)(v41 + 24) != 2)
              {
                *(_DWORD *)(v41 + 24) -= 2;
                goto LABEL_102;
              }
              if ((*(_WORD *)(v41 + 30) & 0x400) != 0)
                goto LABEL_102;
              v49 = (WebCore::Node *)v41;
LABEL_118:
              result = WebCore::Node::removedLastRef(v49, v42);
              goto LABEL_102;
            }
          }
          continue;
        }
      }
      break;
    }
    v37 = *((_QWORD *)v26 + 4);
    if (v37)
    {
      v38 = *(unsigned int **)(v37 + 8);
      if (v38)
      {
        ++v38[4];
        goto LABEL_73;
      }
    }
    v52 = v26[4];
    v51 = v26 + 4;
    v50 = v52;
    if (!v52)
    {
LABEL_186:
      __break(0xC471u);
      JUMPOUT(0x19642D22CLL);
    }
    *v51 = v50 - 1;
    v26 = 0;
LABEL_122:
    v53 = *(_BYTE *)(v23 + 45);
    if ((v53 & 1) != 0
      || (result = *(unsigned int **)(*(_QWORD *)(v23 + 24) + 8)) == 0
      || (~*((unsigned __int16 *)result + 14) & 0x408) != 0)
    {
LABEL_127:
      if ((v53 & 1) != 0)
        goto LABEL_141;
      v54 = *(_QWORD *)(*(_QWORD *)(v23 + 24) + 8);
      if (!v54)
        goto LABEL_141;
      if ((*(_WORD *)(v54 + 28) & 8) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19642D27CLL);
      }
      *(_DWORD *)(v54 + 24) += 2;
      WebCore::firstPositionInOrBeforeNode(v54, v25, (uint64_t)&v69);
      WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v69, a4);
      *(_BYTE *)(a4 + 16) = 1;
      result = (unsigned int *)v69;
      v69 = 0;
      if (result)
      {
        if (result[6] == 2)
        {
          if ((*((_WORD *)result + 15) & 0x400) == 0)
            result = WebCore::Node::removedLastRef((WebCore::Node *)result, v55);
        }
        else
        {
          result[6] -= 2;
        }
      }
      if (*(_DWORD *)(v54 + 24) == 2)
      {
        if ((*(_WORD *)(v54 + 30) & 0x400) == 0)
          result = WebCore::Node::removedLastRef((WebCore::Node *)v54, v55);
      }
      else
      {
        *(_DWORD *)(v54 + 24) -= 2;
      }
      v46 = 1;
      if (v26)
        goto LABEL_103;
      goto LABEL_105;
    }
    result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 368))(result);
    if (!(_DWORD)result)
    {
      v53 = *(_BYTE *)(v23 + 45);
      goto LABEL_127;
    }
LABEL_141:
    v56 = v6[4];
    if (!v56)
      goto LABEL_193;
    v46 = 0;
    v6[4] = v56 - 1;
    v6 = (unsigned int *)v23;
    v23 = 0;
    if (!v26)
      goto LABEL_105;
LABEL_103:
    v47 = v26[4];
    if (!v47)
    {
      __break(0xC471u);
      JUMPOUT(0x19642D10CLL);
    }
    v26[4] = v47 - 1;
LABEL_105:
    if (v23)
    {
      v48 = *(_DWORD *)(v23 + 16);
      if (!v48)
      {
        __break(0xC471u);
        JUMPOUT(0x19642D12CLL);
      }
      *(_DWORD *)(v23 + 16) = v48 - 1;
    }
  }
  while (!v46);
  if (!v6)
    return result;
LABEL_157:
  v59 = v6[4];
  if (!v59)
  {
    __break(0xC471u);
    JUMPOUT(0x19642D24CLL);
  }
  v6[4] = v59 - 1;
  return result;
}

uint64_t WebCore::RenderObject::hitTest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t result;

  if (a6 == 1)
  {
    result = 0;
  }
  else
  {
    if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 336))(a1, a2, a3, a4, a5, 4) & 1) != 0|| ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 336))(a1, a2, a3, a4, a5, 3) & 1) != 0)
    {
      return 1;
    }
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 336))(a1, a2, a3, a4, a5, 2);
  }
  if (a6 != 2 && (result & 1) == 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 336))(a1, a2, a3, a4, a5, 0);
  return result;
}

uint64_t WebCore::RenderObject::nodeForHitTest(WebCore::RenderObject *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if ((*((_BYTE *)this + 45) & 1) != 0 || (result = *(_QWORD *)(*((_QWORD *)this + 3) + 8)) == 0)
  {
    v3 = *((_QWORD *)this + 4);
    if (v3
      && (v4 = *(_QWORD *)(v3 + 8)) != 0
      && (*(_BYTE *)(v4 + 45) & 2) == 0
      && (*(_QWORD *)(v4 + 96) & 0xF00000000000) == 0x300000000000)
    {
      do
      {
        result = WebCore::RenderElement::element((WebCore::RenderElement *)v4);
        v5 = *(_QWORD *)(v4 + 32);
        if (!v5)
          break;
        v4 = *(_QWORD *)(v5 + 8);
      }
      while (v4 && result == 0);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t WebCore::RenderObject::protectedNodeForHitTest@<X0>(WebCore::RenderObject *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)this + 320))(this);
  if (result)
    *(_DWORD *)(result + 24) += 2;
  *a2 = result;
  return result;
}

unsigned int *WebCore::RenderObject::updateHitTestResult(unsigned int *this, WebCore::HitTestResult *a2, const WebCore::LayoutPoint *a3)
{
  void *v5;
  unsigned int *v6;
  unsigned int *v7;
  int v8;
  unsigned int *v9;
  int v10;

  if (!*((_QWORD *)a2 + 9))
  {
    this = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 320))(this);
    if (this)
    {
      v6 = this;
      this[6] += 2;
      v7 = this;
      if ((~*((unsigned __int16 *)this + 14) & 0x408) != 0
        || (v8 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 368))(this), v7 = v6, !v8)
        || (v7 = (unsigned int *)*((_QWORD *)v6 + 14)) != 0 && (v7 = (unsigned int *)*((_QWORD *)v7 + 1)) != 0)
      {
        v7[6] += 2;
      }
      this = (unsigned int *)*((_QWORD *)a2 + 9);
      *((_QWORD *)a2 + 9) = v7;
      if (this)
      {
        if (this[6] == 2)
        {
          if ((*((_WORD *)this + 15) & 0x400) == 0)
            this = WebCore::Node::removedLastRef((WebCore::Node *)this, v5);
        }
        else
        {
          this[6] -= 2;
        }
      }
      if (!*((_QWORD *)a2 + 10))
      {
        v9 = v6;
        if ((~*((unsigned __int16 *)v6 + 14) & 0x408) != 0
          || (v10 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v6 + 368))(v6), v9 = v6, !v10)
          || (v9 = (unsigned int *)*((_QWORD *)v6 + 14)) != 0 && (v9 = (unsigned int *)*((_QWORD *)v9 + 1)) != 0)
        {
          v9[6] += 2;
        }
        this = (unsigned int *)*((_QWORD *)a2 + 10);
        *((_QWORD *)a2 + 10) = v9;
        if (this)
        {
          if (this[6] == 2)
          {
            if ((*((_WORD *)this + 15) & 0x400) == 0)
              this = WebCore::Node::removedLastRef((WebCore::Node *)this, v5);
          }
          else
          {
            this[6] -= 2;
          }
        }
      }
      *((_QWORD *)a2 + 12) = *(_QWORD *)a3;
      if (v6[6] == 2)
      {
        if ((*((_WORD *)v6 + 15) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)v6, v5);
      }
      else
      {
        v6[6] -= 2;
      }
    }
  }
  return this;
}

uint64_t WebCore::RenderObject::nodeAtPoint()
{
  return 0;
}

uint64_t WebCore::RenderObject::innerLineHeight(WebCore::RenderObject *this, void *a2)
{
  uint64_t v3;

  if ((*((_BYTE *)this + 45) & 2) != 0)
  {
    v3 = *((_QWORD *)this + 4);
    if (v3)
      this = *(WebCore::RenderObject **)(v3 + 8);
    else
      this = 0;
  }
  return (int)WebCore::RenderStyle::computedLineHeight((WebCore::RenderObject *)((char *)this + 80), a2);
}

uint64_t WebCore::RenderObject::caretMinOffset(WebCore::RenderObject *this)
{
  return 0;
}

uint64_t WebCore::RenderObject::caretMaxOffset(WebCore::RenderObject *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;

  if ((*((_BYTE *)this + 20) & 2) != 0)
  {
    if ((*((_BYTE *)this + 45) & 1) == 0
      && (v3 = *(_QWORD *)(*((_QWORD *)this + 3) + 8)) != 0
      && (*(_WORD *)(v3 + 28) & 4) != 0)
    {
      v4 = *(_QWORD *)(v3 + 80);
      if (v4)
      {
        v5 = 0;
        do
        {
          ++v5;
          v4 = *(_QWORD *)(v4 + 56);
        }
        while (v4);
      }
      else
      {
        v5 = 0;
      }
      if (v5 <= 1)
        return 1;
      else
        return v5;
    }
    else
    {
      return 1;
    }
  }
  else
  {
    return (*((_BYTE *)this + 45) & 1) == 0
        && (v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 8)) != 0
        && (*(_WORD *)(v1 + 28) & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(v1 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::hrTag + 24);
  }
}

uint64_t WebCore::RenderObject::previousOffset(WebCore::RenderObject *this, int a2)
{
  return (a2 - 1);
}

uint64_t WebCore::RenderObject::previousOffsetForBackwardDeletion(WebCore::RenderObject *this, int a2)
{
  return (a2 - 1);
}

uint64_t WebCore::RenderObject::nextOffset(WebCore::RenderObject *this, int a2)
{
  return (a2 + 1);
}

WebCore::RenderElement *WebCore::RenderObject::offsetParent(WebCore::RenderObject *this, void *a2)
{
  uint64_t v2;
  int v3;
  WebCore::RenderObject *v4;
  WebCore::RenderElement *v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  WebCore::RenderElement *v9;
  char v10;
  uint64_t v11;
  BOOL canContainAbsolutelyPositionedObjects;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  char v16;
  uint64_t v17;
  float v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  WebCore::RenderElement *v24;

  v2 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 1272) != v2
    && ((*((_BYTE *)this + 45) & 1) != 0
     || (*(_WORD *)(v2 + 28) & 0x10) == 0
     || *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24)))
  {
    v3 = *((_DWORD *)this + 5) & 0x1800000;
    if (v3 != 0x1000000)
      goto LABEL_10;
    v4 = this;
    if ((*((_BYTE *)this + 45) & 2) != 0)
      v4 = *(WebCore::RenderObject **)(*((_QWORD *)this + 4) + 8);
    if ((*((_QWORD *)v4 + 12) & 0x380000) != 0x300000)
    {
LABEL_10:
      v6 = *((_QWORD *)this + 4);
      if ((*((_BYTE *)this + 45) & 2) != 0)
      {
        v8 = *(_QWORD *)(v6 + 8);
        v7 = *(float *)(*(_QWORD *)(v8 + 104) + 184);
        v24 = (WebCore::RenderElement *)v8;
LABEL_13:
        ++*(_DWORD *)(v8 + 16);
        goto LABEL_14;
      }
      v7 = *(float *)(*((_QWORD *)this + 13) + 184);
      if (v6)
      {
        v8 = *(_QWORD *)(v6 + 8);
        v24 = (WebCore::RenderElement *)v8;
        if (!v8)
          goto LABEL_14;
        goto LABEL_13;
      }
      v24 = 0;
      while (1)
      {
LABEL_14:
        v9 = v24;
        if (!v24)
          return 0;
        v10 = *((_BYTE *)v24 + 45);
        if ((v10 & 1) == 0)
        {
          v11 = *(_QWORD *)(*((_QWORD *)v24 + 3) + 8);
          if (v11)
          {
            if ((*(_WORD *)(v11 + 28) & 8) == 0)
              goto LABEL_58;
            canContainAbsolutelyPositionedObjects = WebCore::RenderElement::canContainAbsolutelyPositionedObjects(v24);
            v9 = v24;
            if (canContainAbsolutelyPositionedObjects)
              goto LABEL_47;
            v10 = *((_BYTE *)v24 + 45);
            if ((v10 & 1) == 0)
            {
              v13 = *(_QWORD *)(*((_QWORD *)v24 + 3) + 8);
              if (v13)
              {
                if ((*(_WORD *)(v13 + 28) & 0x10) != 0
                  && *(_QWORD *)(*(_QWORD *)(v13 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
                {
                  goto LABEL_48;
                }
              }
            }
          }
        }
        if ((v10 & 1) != 0)
          break;
        v14 = *(_QWORD *)(*((_QWORD *)v9 + 3) + 8);
        if (!v14)
          goto LABEL_33;
        v15 = *(_WORD *)(v14 + 28);
        if ((v15 & 8) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19642D9E0);
        }
        v16 = 0;
        *(_DWORD *)(v14 + 24) += 2;
        if (!v3 && (v15 & 0x10) != 0)
        {
          v17 = *(_QWORD *)(*(_QWORD *)(v14 + 96) + 24);
          if (v17 == *(_QWORD *)(WebCore::HTMLNames::tableTag + 24)
            || v17 == *(_QWORD *)(WebCore::HTMLNames::tdTag + 24)
            || v17 == *(_QWORD *)(WebCore::HTMLNames::thTag + 24))
          {
            goto LABEL_36;
          }
          v16 = 0;
        }
LABEL_34:
        v18 = *(float *)(*((_QWORD *)v9 + 13) + 184);
        if (v7 != v18)
        {
          if ((v16 & 1) != 0)
            goto LABEL_48;
LABEL_36:
          v19 = 3;
          v18 = v7;
LABEL_40:
          if (*(_DWORD *)(v14 + 24) == 2)
          {
            if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v14, a2);
          }
          else
          {
            *(_DWORD *)(v14 + 24) -= 2;
          }
          goto LABEL_42;
        }
        v20 = *((_QWORD *)v9 + 4);
        if (v20)
          v21 = *(_QWORD *)(v20 + 8);
        else
          v21 = 0;
        WTF::CheckedPtr<WebCore::RenderElement,WTF::RawPtrTraits<WebCore::RenderElement>>::operator=((uint64_t)&v24, v21);
        v19 = 0;
        if ((v16 & 1) == 0)
          goto LABEL_40;
LABEL_42:
        v7 = v18;
        if (v19)
        {
          v9 = v24;
LABEL_47:
          if (!v9)
            return 0;
LABEL_48:
          v22 = *((_DWORD *)v9 + 4);
          if (!v22)
          {
LABEL_58:
            __break(0xC471u);
            JUMPOUT(0x19642D9C0);
          }
          if ((*((_BYTE *)v9 + 45) & 8) != 0)
            v5 = v9;
          else
            v5 = 0;
          *((_DWORD *)v9 + 4) = v22 - 1;
          return v5;
        }
      }
      v14 = 0;
LABEL_33:
      v16 = 1;
      goto LABEL_34;
    }
  }
  return 0;
}

uint64_t WebCore::RenderObject::getCursor(WebCore::RenderObject *this, const WebCore::LayoutPoint *a2, WebCore::Cursor *a3)
{
  return 0;
}

BOOL WebCore::RenderObject::useDarkAppearance(WebCore::RenderObject *this)
{
  WebCore::RenderObject *v1;
  WebCore::Document *v2;

  v1 = this;
  v2 = *(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8);
  if ((*((_BYTE *)v1 + 45) & 2) != 0)
  {
    v1 = (WebCore::RenderObject *)*((_QWORD *)v1 + 4);
    if (v1)
      v1 = (WebCore::RenderObject *)*((_QWORD *)v1 + 1);
  }
  return WebCore::Document::useDarkAppearance(v2, (WebCore::RenderObject *)((char *)v1 + 80));
}

uint64_t WebCore::RenderObject::styleColorOptions(WebCore::RenderObject *this)
{
  WebCore::RenderObject *v1;
  WebCore::Document *v2;

  v1 = this;
  v2 = *(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8);
  if ((*((_BYTE *)v1 + 45) & 2) != 0)
  {
    v1 = (WebCore::RenderObject *)*((_QWORD *)v1 + 4);
    if (v1)
      v1 = (WebCore::RenderObject *)*((_QWORD *)v1 + 1);
  }
  return WebCore::Document::styleColorOptions(v2, (WebCore::RenderObject *)((char *)v1 + 80));
}

uint64_t WebCore::RenderObject::setSelectionState(uint64_t result, char a2)
{
  *(_DWORD *)(result + 20) = *(_DWORD *)(result + 20) & 0xF1FFFFFF | ((a2 & 7) << 25);
  return result;
}

uint64_t WebCore::RenderObject::generatingPseudoHostElement(WebCore::RenderObject *this)
{
  uint64_t v1;
  uint64_t v2;

  if ((*((_BYTE *)this + 45) & 1) != 0)
    v1 = 0;
  else
    v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((~*(unsigned __int16 *)(v1 + 28) & 0x408) != 0
    || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v1 + 368))(v1))
  {
    __break(0xC471u);
    JUMPOUT(0x19642DACCLL);
  }
  v2 = *(_QWORD *)(v1 + 112);
  if (v2)
    return *(_QWORD *)(v2 + 8);
  else
    return 0;
}

float WebCore::RenderObject::objectBoundingBox(WebCore::RenderObject *this)
{
  return 0.0;
}

float WebCore::RenderObject::strokeBoundingBox(WebCore::RenderObject *this)
{
  return 0.0;
}

float WebCore::RenderObject::repaintRectInLocalCoordinates()
{
  return 0.0;
}

double WebCore::RenderObject::localTransform@<D0>(_OWORD *a1@<X8>)
{
  double result;

  *a1 = xmmword_1969FCE60;
  a1[1] = unk_1969FCE70;
  result = 0.0;
  a1[2] = xmmword_1969FCE80;
  return result;
}

void *WebCore::RenderObject::localToParentTransform(WebCore::RenderObject *this)
{
  return &WebCore::identity;
}

uint64_t WebCore::RenderObject::nodeAtFloatPoint()
{
  return 0;
}

uint64_t WebCore::RenderObject::locateEnclosingFragmentedFlow(WebCore::RenderObject *this)
{
  WebCore::RenderObject *v1;
  int v2;
  uint64_t v3;
  uint64_t result;
  int *v5;

  v1 = WebCore::RenderObject::containingBlock(this);
  if (!v1)
    return 0;
  v2 = *((_DWORD *)v1 + 4) + 1;
  *((_DWORD *)v1 + 4) = v2;
  if ((*((_BYTE *)v1 + 23) & 0x10) != 0)
  {
    v5 = (int *)v1;
    v3 = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 648))();
    v1 = (WebCore::RenderObject *)v5;
    v2 = v5[4];
    if (v2)
      goto LABEL_4;
  }
  else
  {
    v3 = 0;
    if (v2)
    {
LABEL_4:
      *((_DWORD *)v1 + 4) = v2 - 1;
      return v3;
    }
  }
  result = 286;
  __break(0xC471u);
  return result;
}

WTF *WebCore::RenderObject::ensureRareData(WebCore::RenderObject *this, void *a2)
{
  WTF *v3;
  uint64_t v4;
  unsigned int v5;
  WTF **v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  int i;
  uint64_t v13;
  WTF **v14;
  WTF *v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  WTF *v23;

  *((_DWORD *)this + 5) |= 0x4000u;
  {
    WebCore::RenderObject::rareDataMap(void)::map = 0;
  }
  v3 = (WTF *)*((_QWORD *)this + 1);
  if (!v3)
  {
    v3 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v3 = 1;
    *((_QWORD *)v3 + 1) = this;
    v23 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v3;
    if (v23)
    {
      if (*(_DWORD *)v23 == 1)
      {
        WTF::fastFree(v23, a2);
        v3 = (WTF *)*((_QWORD *)this + 1);
      }
      else
      {
        --*(_DWORD *)v23;
      }
    }
  }
  ++*(_DWORD *)v3;
  v4 = WebCore::RenderObject::rareDataMap(void)::map;
  if (WebCore::RenderObject::rareDataMap(void)::map
    || (WTF::HashTable<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderObject::RenderObjectRareData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderObject::RenderObjectRareData>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderObject::RenderObjectRareData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderObject::RenderObjectRareData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>>::rehash(&WebCore::RenderObject::rareDataMap(void)::map, 8u, 0), (v4 = WebCore::RenderObject::rareDataMap(void)::map) != 0))
  {
    v5 = *(_DWORD *)(v4 - 8);
  }
  else
  {
    v5 = 0;
  }
  v6 = 0;
  v7 = *((_QWORD *)v3 + 1);
  v8 = (~(v7 << 32) + v7) ^ ((unint64_t)(~(v7 << 32) + v7) >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  v11 = (v10 >> 31) ^ v10;
  for (i = 1; ; ++i)
  {
    v13 = v11 & v5;
    v14 = (WTF **)(v4 + 16 * v13);
    v15 = *v14;
    if (*v14 != (WTF *)-1)
      break;
    v6 = (WTF **)(v4 + 16 * v13);
LABEL_13:
    v11 = i + v13;
  }
  if (!v15)
  {
    if (v6)
    {
      *v6 = 0;
      v6[1] = 0;
      --*(_DWORD *)(v4 - 16);
      *v6 = v3;
    }
    else
    {
      *v14 = v3;
      v6 = (WTF **)(v4 + 16 * v13);
    }
    v16 = WTF::fastMalloc((WTF *)0x20);
    *(_WORD *)v16 = 0;
    *(_BYTE *)(v16 + 2) = 0;
    *(_QWORD *)(v16 + 16) = 0;
    *(_QWORD *)(v16 + 24) = 0;
    *(_QWORD *)(v16 + 8) = 0;
    std::unique_ptr<WebCore::RenderObject::RenderObjectRareData>::reset[abi:sn180100](v6 + 1, (WTF *)v16);
    if (WebCore::RenderObject::rareDataMap(void)::map)
      v17 = *(_DWORD *)(WebCore::RenderObject::rareDataMap(void)::map - 12) + 1;
    else
      v17 = 1;
    *(_DWORD *)(WebCore::RenderObject::rareDataMap(void)::map - 12) = v17;
    if (WebCore::RenderObject::rareDataMap(void)::map)
      v18 = *(_DWORD *)(WebCore::RenderObject::rareDataMap(void)::map - 12);
    else
      v18 = 0;
    v19 = (*(_DWORD *)(WebCore::RenderObject::rareDataMap(void)::map - 16) + v18);
    v20 = *(unsigned int *)(WebCore::RenderObject::rareDataMap(void)::map - 4);
    if (v20 > 0x400)
    {
      if (v20 <= 2 * v19)
        goto LABEL_31;
    }
    else if (3 * v20 <= 4 * v19)
    {
      if (!(_DWORD)v20)
      {
        v21 = 8;
LABEL_32:
        v6 = WTF::HashTable<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderObject::RenderObjectRareData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderObject::RenderObjectRareData>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderObject::RenderObjectRareData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderObject::RenderObjectRareData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>>::rehash(&WebCore::RenderObject::rareDataMap(void)::map, v21, v6);
        return v6[1];
      }
LABEL_31:
      v21 = (_DWORD)v20 << (6 * *(_DWORD *)(WebCore::RenderObject::rareDataMap(void)::map - 12) >= (2 * v20));
      goto LABEL_32;
    }
    return v6[1];
  }
  if (*((_QWORD *)v15 + 1) != v7)
    goto LABEL_13;
  v22 = *(_QWORD *)(v4 + 16 * v13 + 8);
  if (*(_DWORD *)v3 == 1)
    WTF::fastFree(v3, a2);
  else
    --*(_DWORD *)v3;
  return (WTF *)v22;
}

uint64_t WebCore::RenderObject::rareData(WebCore::RenderObject *this)
{
  int v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unsigned int v5;
  int i;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  {
    if (WebCore::RenderObject::rareDataMap(void)::map)
    {
      v1 = *(_DWORD *)(WebCore::RenderObject::rareDataMap(void)::map - 8);
      v2 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
      v3 = 9 * ((v2 + ~(v2 << 13)) ^ ((v2 + ~(v2 << 13)) >> 8));
      v4 = (v3 ^ (v3 >> 15)) + ~((v3 ^ (v3 >> 15)) << 27);
      v5 = v1 & ((v4 >> 31) ^ v4);
      for (i = 1; ; ++i)
      {
        v7 = v5;
        v8 = *(_QWORD *)(WebCore::RenderObject::rareDataMap(void)::map + 16 * v5);
        if (v8 != -1)
        {
          if (!v8)
            return 0;
          if (*(WebCore::RenderObject **)(v8 + 8) == this)
            break;
        }
        v5 = (v7 + i) & v1;
      }
      return *(_QWORD *)(WebCore::RenderObject::rareDataMap(void)::map + 16 * v7 + 8);
    }
    else
    {
      return 0;
    }
  }
  else
  {
    result = 0;
    WebCore::RenderObject::rareDataMap(void)::map = 0;
  }
  return result;
}

uint64_t WebCore::RenderObject::hasNonEmptyVisibleRectRespectingParentFrames(WebCore::RenderObject *this)
{
  WebCore::RenderObject *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  WebCore::RenderObject *v15;
  _QWORD v16[2];
  char v17;
  char v18;
  uint64_t v19;
  int v20;
  int v21;
  char v22;

  v15 = this;
  if (!this)
    return 0;
  v1 = this;
  ++*((_DWORD *)this + 4);
  while (1)
  {
    do
    {
      if ((*((_BYTE *)v1 + 45) & 8) != 0)
        break;
      v2 = *((_QWORD *)v1 + 4);
      if (!v2)
      {
        v1 = 0;
        break;
      }
      v1 = *(WebCore::RenderObject **)(v2 + 8);
    }
    while (v1);
    ++*((_DWORD *)v1 + 4);
    v16[0] = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)v1 + 912))(v1);
    v16[1] = v3;
    v17 = 0;
    v18 = 0;
    (*(void (**)(uint64_t *__return_ptr, WebCore::RenderObject *, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v1 + 472))(&v19, v1, v16, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v1 + 3) + 8) + 40) + 8) + 1944), 0x300000000);
    if (!v22 || v20 < 1)
      break;
    v4 = *((_DWORD *)v1 + 4);
    if (!v4)
      goto LABEL_16;
    v5 = v21;
    *((_DWORD *)v1 + 4) = v4 - 1;
    if (v5 < 1)
      goto LABEL_23;
    v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v15 + 3) + 8) + 40) + 8) + 528);
    if (v6 && (v7 = *(_QWORD *)(v6 + 8)) != 0 && (v8 = *(_QWORD *)(v7 + 120)) != 0 && (v9 = *(_QWORD *)(v8 + 8)) != 0)
    {
      v10 = *(_QWORD *)(v9 + 64);
      v11 = v10 & 0xFFFFFFFFFFFFLL;
      if ((v10 & 0xFFFFFFFFFFFFLL) != 0 && (*(_BYTE *)((v10 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        goto LABEL_16;
    }
    else
    {
      v11 = 0;
    }
    WTF::CheckedPtr<WebCore::RenderObject const,WTF::RawPtrTraits<WebCore::RenderObject const>>::operator=((uint64_t)&v15, v11);
    v1 = v15;
    if (!v15)
      return 0;
  }
  v12 = *((_DWORD *)v1 + 4);
  if (!v12)
  {
LABEL_16:
    __break(0xC471u);
    JUMPOUT(0x19642E0D4);
  }
  *((_DWORD *)v1 + 4) = v12 - 1;
LABEL_23:
  if (v15)
  {
    v13 = *((_DWORD *)v15 + 4);
    if (!v13)
    {
      __break(0xC471u);
      JUMPOUT(0x19642E0F4);
    }
    *((_DWORD *)v15 + 4) = v13 - 1;
  }
  return 1;
}

unsigned int *WebCore::RenderObject::absoluteTextQuads@<X0>(uint64_t *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  WebCore::Node *i;
  int v10;
  uint64_t v11;
  WebCore::RenderObject *v12;
  unsigned int v13;
  uint64_t v14;
  WTF *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  __int128 v20;
  __int128 v21;
  _OWORD *v22;
  int v23;
  int v24;
  unsigned int *result;
  int v26;
  WTF *v27;
  int v28;
  unsigned int v29;
  WebCore::Node *v30;
  WebCore::Node *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v6 = *a1;
  *(_DWORD *)(v6 + 24) = *(_DWORD *)(*a1 + 24) + 2;
  v32 = v6;
  v33 = *((_DWORD *)a1 + 2);
  v7 = a1[2];
  *(_DWORD *)(v7 + 24) += 2;
  v34 = v7;
  v35 = *((_DWORD *)a1 + 6);
  WebCore::IntersectingNodeIterator::IntersectingNodeIterator((WebCore::IntersectingNodeIterator *)&v30, (const WebCore::SimpleRange *)&v32);
  for (i = v30; v30; i = v30)
  {
    v10 = *((_DWORD *)i + 6) + 2;
    *((_DWORD *)i + 6) = v10;
    v11 = *((_QWORD *)i + 8) & 0xFFFFFFFFFFFFLL;
    if (v11)
    {
      ++*(_DWORD *)((*((_QWORD *)i + 8) & 0xFFFFFFFFFFFFLL) + 0x10);
      if (*(_BYTE *)(v11 + 46) != 17 || (*(_BYTE *)(v11 + 52) & 7) == 2 && (*(_BYTE *)(v11 + 53) & 1) != 0)
      {
        if ((*(_BYTE *)(v11 + 45) & 2) != 0)
        {
          if ((*((_WORD *)i + 14) & 1) == 0)
            goto LABEL_50;
          if ((WebCore::Node *)*a1 == i)
            v12 = (WebCore::RenderObject *)*((unsigned int *)a1 + 2);
          else
            v12 = 0;
          if ((WebCore::Node *)a1[2] == i)
            v13 = *((_DWORD *)a1 + 6);
          else
            v13 = -1;
          WebCore::RenderText::absoluteQuadsForRange((WebCore::RenderText *)v11, v12, v13, a2, (uint64_t)&v27);
          v14 = v29;
          v8 = (void *)(v29 + (unint64_t)*(unsigned int *)(a3 + 12));
          if ((unint64_t)v8 > *(unsigned int *)(a3 + 8))
          {
            WTF::Vector<WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, (unint64_t)v8);
            v14 = v29;
          }
          v15 = v27;
          if ((_DWORD)v14)
          {
            v16 = *(_DWORD *)(a3 + 12);
            v17 = *(_QWORD *)a3;
            v18 = 32 * v14;
            v19 = v27;
            do
            {
              v20 = *(_OWORD *)v19;
              v21 = *((_OWORD *)v19 + 1);
              v19 = (WTF *)((char *)v19 + 32);
              v22 = (_OWORD *)(v17 + 32 * v16);
              *v22 = v20;
              v22[1] = v21;
              ++v16;
              v18 -= 32;
            }
            while (v18);
            *(_DWORD *)(a3 + 12) = v16;
          }
          if (v15)
          {
            v27 = 0;
            v28 = 0;
            WTF::fastFree(v15, v8);
          }
        }
      }
      else
      {
        WebCore::RenderLineBreak::absoluteQuads((WebCore::LayoutIntegration::LineLayout *)v11, (WebCore::RenderObject *)a3);
      }
      v23 = *(_DWORD *)(v11 + 16);
      if (!v23)
      {
LABEL_50:
        __break(0xC471u);
        JUMPOUT(0x19642E3BCLL);
      }
      *(_DWORD *)(v11 + 16) = v23 - 1;
      v10 = *((_DWORD *)i + 6);
    }
    v24 = v10 - 2;
    if (v24)
    {
      *((_DWORD *)i + 6) = v24;
    }
    else if ((*((_WORD *)i + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(i, v8);
    }
    WebCore::IntersectingNodeIterator::advance((WebCore::IntersectingNodeIterator *)&v30);
  }
  result = (unsigned int *)v31;
  v31 = 0;
  if (result)
  {
    v26 = result[6] - 2;
    if (result[6] != 2)
    {
LABEL_33:
      result[6] = v26;
      goto LABEL_34;
    }
    if ((*((_WORD *)result + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)result, v8);
      result = (unsigned int *)v30;
      v30 = 0;
      if (result)
      {
        v26 = result[6] - 2;
        if (result[6] != 2)
          goto LABEL_33;
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          result = WebCore::Node::removedLastRef((WebCore::Node *)result, v8);
      }
    }
  }
LABEL_34:
  if (v7)
  {
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)v7, v8);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  if (v6)
  {
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v6, v8);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  return result;
}

WTF *WebCore::RenderObject::absoluteTextRects@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  WebCore::Node *v6;
  unint64_t v7;
  WebCore::Node *v8;
  WebCore::LayoutIntegration::LineLayout *v9;
  void *v10;
  WTF *v11;
  WTF *v12;
  WTF *v13;
  float v14;
  uint64_t v15;
  float v16;
  unint64_t v17;
  float *v18;
  float *v19;
  double v20;
  int v21;
  double v22;
  int v23;
  float v24;
  double v25;
  int v26;
  double v27;
  int v28;
  uint64_t v29;
  WTF *v30;
  __int128 v31;
  __int128 *v32;
  int v33;
  WebCore::Node *v34;
  int v35;
  int v36;
  uint64_t v37;
  WTF *result;
  int v39;
  unint64_t *v40;
  WTF *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  signed int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  BOOL v52;
  signed int v53;
  signed int v54;
  int v55;
  WebCore::Node *v56;
  uint64_t v57;
  char v59;
  __int128 v60;
  WebCore::Node *v61;
  WebCore::Node *v62;
  uint64_t v63;
  int v64;
  WebCore::Node *v65;
  int v66;
  WTF *v67;
  uint64_t v68;
  WTF *v69[2];
  _BYTE v70[64];
  WTF *v71;
  WTF *v72;
  uint64_t v73;
  char v74;
  __int16 v75;
  int v76;
  int v77;

  v67 = 0;
  v68 = 0;
  v5 = *(_QWORD *)a1;
  *(_DWORD *)(v5 + 24) = *(_DWORD *)(*(_QWORD *)a1 + 24) + 2;
  v57 = v5;
  v63 = v5;
  v64 = *(_DWORD *)(a1 + 8);
  v6 = *(WebCore::Node **)(a1 + 16);
  *((_DWORD *)v6 + 6) += 2;
  v56 = v6;
  v65 = v6;
  v66 = *(_DWORD *)(a1 + 24);
  WebCore::IntersectingNodeIterator::IntersectingNodeIterator((WebCore::IntersectingNodeIterator *)&v61, (const WebCore::SimpleRange *)&v63);
  v8 = v61;
  if (v61)
  {
    v59 = a2;
    while (1)
    {
      *((_DWORD *)v8 + 6) += 2;
      v9 = (WebCore::LayoutIntegration::LineLayout *)(*((_QWORD *)v8 + 8) & 0xFFFFFFFFFFFFLL);
      if (v9)
      {
        ++*(_DWORD *)((*((_QWORD *)v8 + 8) & 0xFFFFFFFFFFFFLL) + 0x10);
        if (*((_BYTE *)v9 + 46) == 17 && ((*((_BYTE *)v9 + 52) & 7) != 2 || (*((_BYTE *)v9 + 53) & 1) == 0))
          break;
      }
      if ((*((_WORD *)v8 + 14) & 2) != 0)
      {
        WebCore::absoluteRectsForRangeInText((WTF *)v69, a1, (uint64_t)v8, v59);
        v18 = (float *)v69[0];
        v19 = (float *)((char *)v69[0] + 16 * HIDWORD(v69[1]));
        if (HIDWORD(v69[1]))
        {
          do
          {
            v20 = *v18 * 64.0;
            v21 = (int)v20;
            if (v20 <= -2147483650.0)
              v21 = 0x80000000;
            if (v20 >= 2147483650.0)
              v21 = 0x7FFFFFFF;
            v22 = v18[1] * 64.0;
            v23 = (int)v22;
            if (v22 <= -2147483650.0)
              v23 = 0x80000000;
            if (v22 >= 2147483650.0)
              v23 = 0x7FFFFFFF;
            *(_QWORD *)&v60 = __PAIR64__(v23, v21);
            v24 = v18[3];
            v25 = v18[2] * 64.0;
            v26 = (int)v25;
            if (v25 <= -2147483650.0)
              v26 = 0x80000000;
            if (v25 >= 2147483650.0)
              v26 = 0x7FFFFFFF;
            DWORD2(v60) = v26;
            v27 = v24 * 64.0;
            if (v27 >= 2147483650.0)
            {
              v28 = 0x7FFFFFFF;
            }
            else if (v27 <= -2147483650.0)
            {
              v28 = 0x80000000;
            }
            else
            {
              v28 = (int)v27;
            }
            HIDWORD(v60) = v28;
            v29 = HIDWORD(v68);
            if (HIDWORD(v68) == (_DWORD)v68)
            {
              v32 = (__int128 *)WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v67, HIDWORD(v68) + 1, (unint64_t)&v60);
              v29 = HIDWORD(v68);
              v30 = v67;
              v31 = *v32;
            }
            else
            {
              v30 = v67;
              v31 = v60;
            }
            *((_OWORD *)v30 + v29) = v31;
            ++HIDWORD(v68);
            v18 += 4;
          }
          while (v18 != v19);
          v18 = (float *)v69[0];
        }
        if (v18)
        {
          v69[0] = 0;
          LODWORD(v69[1]) = 0;
          WTF::fastFree((WTF *)v18, (void *)v7);
        }
      }
      if (v9)
        goto LABEL_46;
LABEL_48:
      if (*((_DWORD *)v8 + 6) == 2)
      {
        if ((*((_WORD *)v8 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v8, (void *)v7);
      }
      else
      {
        *((_DWORD *)v8 + 6) -= 2;
      }
      WebCore::IntersectingNodeIterator::advance((WebCore::IntersectingNodeIterator *)&v61);
      v8 = v61;
      if (!v61)
        goto LABEL_56;
    }
    v70[56] = 0;
    v72 = 0;
    v73 = 0;
    v71 = 0;
    v74 = 0;
    *(_OWORD *)v69 = 0u;
    memset(v70, 0, 25);
    v75 = 1;
    v76 = 0;
    v77 = 0;
    (*(void (**)(WebCore::LayoutIntegration::LineLayout *, _QWORD, WTF **, uint64_t, _QWORD))(*(_QWORD *)v9 + 576))(v9, 0, v69, 4, 0);
    WebCore::TransformState::flatten((WebCore::TransformState *)v69, 0);
    v11 = v69[0];
    v12 = v72;
    v72 = 0;
    if (v12)
      WTF::fastFree(v12, v10);
    v13 = v71;
    v71 = 0;
    if (v13)
      WTF::fastFree(v13, v10);
    v14 = floorf(*(float *)&v11 * 64.0);
    v15 = (int)v14;
    if (v14 <= -2147500000.0)
      v15 = 0x80000000;
    if (v14 >= 2147500000.0)
      v15 = 0x7FFFFFFFLL;
    v16 = floorf(*((float *)&v11 + 1) * 64.0);
    if (v16 >= 2147500000.0)
    {
      v17 = 0x7FFFFFFF00000000;
    }
    else if (v16 <= -2147500000.0)
    {
      v17 = 0x8000000000000000;
    }
    else
    {
      v17 = (unint64_t)(int)v16 << 32;
    }
    v69[0] = (WTF *)(v17 | v15);
    WebCore::RenderLineBreak::boundingRects(v9, (WebCore::RenderObject *)&v67, v69);
LABEL_46:
    v33 = *((_DWORD *)v9 + 4);
    if (!v33)
      goto LABEL_105;
    *((_DWORD *)v9 + 4) = v33 - 1;
    goto LABEL_48;
  }
LABEL_56:
  v34 = v62;
  v62 = 0;
  if (v34)
  {
    v35 = *((_DWORD *)v34 + 6) - 2;
    if (*((_DWORD *)v34 + 6) != 2)
    {
LABEL_58:
      *((_DWORD *)v34 + 6) = v35;
      goto LABEL_59;
    }
    if ((*((_WORD *)v34 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(v34, (void *)v7);
      v34 = v61;
      v61 = 0;
      if (v34)
      {
        v35 = *((_DWORD *)v34 + 6) - 2;
        if (*((_DWORD *)v34 + 6) != 2)
          goto LABEL_58;
        if ((*((_WORD *)v34 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v34, (void *)v7);
      }
    }
  }
LABEL_59:
  if (v56)
  {
    if (*((_DWORD *)v56 + 6) == 2)
    {
      if ((*((_WORD *)v56 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v56, (void *)v7);
    }
    else
    {
      *((_DWORD *)v56 + 6) -= 2;
    }
  }
  if (v57)
  {
    if (*(_DWORD *)(v57 + 24) == 2)
    {
      if ((*(_WORD *)(v57 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v57, (void *)v7);
    }
    else
    {
      *(_DWORD *)(v57 + 24) -= 2;
    }
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v36 = HIDWORD(v68);
  if (!HIDWORD(v68))
    goto LABEL_92;
  if (HIDWORD(v68) >> 28)
  {
LABEL_105:
    __break(0xC471u);
    JUMPOUT(0x19642E94CLL);
  }
  v37 = WTF::fastMalloc((WTF *)(16 * HIDWORD(v68)));
  *(_DWORD *)(a3 + 8) = v36;
  *(_QWORD *)a3 = v37;
  result = v67;
  if (HIDWORD(v68))
  {
    v39 = 0;
    v40 = (unint64_t *)(v37 + 8);
    v41 = (WTF *)((char *)v67 + 16 * HIDWORD(v68));
    do
    {
      v42 = *(_QWORD *)result;
      v43 = HIDWORD(*(_QWORD *)result);
      v44 = *((_DWORD *)result + 2);
      v45 = *((_DWORD *)result + 3);
      v46 = *(_QWORD *)result + v44;
      if (__OFADD__(*(_QWORD *)result, v44))
        v46 = (*(_QWORD *)result >> 31) + 0x7FFFFFFF;
      v47 = -(-v46 >> 6);
      if (v46 >= 0)
        v47 = (v46 + 63) >> 6;
      v48 = ((int)v42 >> 6);
      v49 = v42 >> 38;
      if (v46 <= 2147483583)
        v50 = v47;
      else
        v50 = 0x1FFFFFF;
      if (v44)
        v51 = v50;
      else
        v51 = v48;
      v52 = __OFADD__((_DWORD)v43, v45);
      v53 = v43 + v45;
      v54 = (v43 >> 31) + 0x7FFFFFFF;
      if (!v52)
        v54 = v53;
      LODWORD(v7) = -(-v54 >> 6);
      if (v54 >= 0)
        v7 = (v54 + 63) >> 6;
      else
        v7 = v7;
      if (v54 <= 2147483583)
        v55 = v7;
      else
        v55 = 0x1FFFFFF;
      if (!v45)
        v55 = v49;
      *(v40 - 1) = v48 | (v49 << 32);
      *v40 = (v51 - v48) | ((unint64_t)(v55 - v49) << 32);
      ++v39;
      v40 += 2;
      result = (WTF *)((char *)result + 16);
    }
    while (result != v41);
    *(_DWORD *)(a3 + 12) = v39;
LABEL_92:
    result = v67;
  }
  if (result)
  {
    v67 = 0;
    LODWORD(v68) = 0;
    return (WTF *)WTF::fastFree(result, (void *)v7);
  }
  return result;
}

WTF *WebCore::absoluteRectsForRangeInText(WTF *result, uint64_t a2, uint64_t a3, char a4)
{
  WTF *v4;
  WebCore::RenderText *v5;
  uint64_t v7;
  unsigned int v8;
  WebCore::RenderObject *v9;
  unsigned int v10;
  void *v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD v15[2];
  WTF *v16;
  int v17;

  v4 = result;
  v5 = (WebCore::RenderText *)(*(_QWORD *)(a3 + 64) & 0xFFFFFFFFFFFFLL);
  if (v5)
  {
    if ((*(_BYTE *)((*(_QWORD *)(a3 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      ++*(_DWORD *)((*(_QWORD *)(a3 + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
      v7 = *(_QWORD *)(a2 + 16);
      v8 = *(_DWORD *)(a2 + 24);
      if (*(_QWORD *)a2 == a3)
        v9 = (WebCore::RenderObject *)*(unsigned int *)(a2 + 8);
      else
        v9 = 0;
      if (v7 == a3)
        v10 = v8;
      else
        v10 = -1;
      WebCore::RenderText::absoluteQuadsForRange(v5, v9, v10, a4, (uint64_t)&v16);
      if ((a4 & 1) != 0)
      {
        v15[0] = (*(uint64_t (**)(WebCore::RenderText *, _QWORD, uint64_t))(*(_QWORD *)v5 + 440))(v5, 0, 0xC00000000);
        v15[1] = v13;
        v14 = v15;
        WTF::compactMap<0ul,WTF::CrashOnOverflow,16ul,WebCore::absoluteRectsForRangeInText(WebCore::SimpleRange const&,WebCore::Text &,WTF::OptionSet<WebCore::RenderObject::BoundingRectBehavior>)::$_0,WTF::Vector<WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v4, (uint64_t)&v16, (uint64_t)&v14);
      }
      else
      {
        WebCore::boundingBoxes((uint64_t)&v16, (uint64_t)v4);
      }
      result = v16;
      if (v16)
      {
        v16 = 0;
        v17 = 0;
        result = (WTF *)WTF::fastFree(result, v11);
      }
      v12 = *((_DWORD *)v5 + 4);
      if (v12)
      {
        *((_DWORD *)v5 + 4) = v12 - 1;
        return result;
      }
      __break(0xC471u);
    }
    else
    {
      __break(0xC471u);
    }
    JUMPOUT(0x19642EA6CLL);
  }
  *(_QWORD *)result = 0;
  *((_QWORD *)result + 1) = 0;
  return result;
}

uint64_t WebCore::RenderObject::absoluteBorderAndTextRects@<X0>(uint64_t a1@<X0>, unsigned __int8 a2@<W1>, uint64_t a3@<X8>)
{
  return WebCore::borderAndTextRects(a3, a1, 1, a2);
}

uint64_t WebCore::borderAndTextRects(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int **v12;
  WebCore::Node *v13;
  int v14;
  WebCore::Node *v15;
  int v16;
  uint64_t v17;
  char v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  WebCore::Node *v23;
  WebCore::Node *v24;
  void *v25;
  WebCore::Node *v26;
  __int16 v27;
  uint64_t v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t v31;
  WTF *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  WTF *v42;
  _OWORD *v43;
  WTF *v44;
  uint64_t v45;
  WTF *v46;
  __int128 v47;
  unint64_t v48;
  _OWORD *v49;
  uint64_t v50;
  __int128 v51;
  int v52;
  WebCore::Node *v53;
  int v54;
  uint64_t result;
  uint64_t v56;
  unsigned int **v57;
  void *v58;
  WebCore::Node *v59;
  uint64_t v60;
  uint64_t v61;
  _DWORD *v62;
  _QWORD *v63;
  WTF *v64;
  WTF *v65;
  WTF *v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  WTF *v70;
  uint64_t v71;
  int v72;
  float v73;
  int v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _DWORD *v80;
  unint64_t v81;
  WTF *v82[2];
  char v83;
  char v84;
  WTF *v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  char v89;
  WebCore::Node *v90;
  WebCore::Node *v91;
  WebCore::Node *v92;
  WebCore::Node *v93;
  WebCore::Node *v94;
  int v95;
  uint64_t v96;
  uint64_t v97[2];

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 40) + 8);
  *(_DWORD *)(v8 + 24) += 2;
  WebCore::Document::updateLayout(v8, 2u, 0);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v9);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  v97[0] = 0;
  v10 = *(_QWORD *)a2;
  *(_DWORD *)(v10 + 24) = *(_DWORD *)(*(_QWORD *)a2 + 24) + 2;
  v85 = (WTF *)v10;
  LODWORD(v86) = *(_DWORD *)(a2 + 8);
  v11 = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(v11 + 24) += 2;
  v87 = v11;
  v88 = *(_DWORD *)(a2 + 24);
  WebCore::IntersectingNodeIterator::IntersectingNodeIterator(&v92, (uint64_t *)&v85);
  while (1)
  {
    v13 = v92;
    if (!v92)
      break;
    v14 = *((_DWORD *)v92 + 6);
    *((_DWORD *)v92 + 6) = v14 + 2;
    if ((*((_WORD *)v13 + 14) & 8) != 0)
    {
      v82[0] = 0;
      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)v82);
      v96 = 0;
      v90 = v13;
      WTF::HashTable<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>::add(v97, (uint64_t *)&v90, (uint64_t)v82);
      v59 = v90;
      v90 = 0;
      if (v59)
      {
        if (*((_DWORD *)v59 + 6) == 2)
        {
          if ((*((_WORD *)v59 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v59, v58);
        }
        else
        {
          *((_DWORD *)v59 + 6) -= 2;
        }
      }
      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v96);
    }
    else if (v14)
    {
      *((_DWORD *)v13 + 6) = v14;
    }
    else if ((*((_WORD *)v13 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(v13, v12);
    }
    WebCore::IntersectingNodeIterator::advance((WebCore::IntersectingNodeIterator *)&v92);
  }
  v15 = v93;
  v93 = 0;
  if (v15)
  {
    v16 = *((_DWORD *)v15 + 6) - 2;
    if (*((_DWORD *)v15 + 6) != 2)
    {
LABEL_11:
      *((_DWORD *)v15 + 6) = v16;
      goto LABEL_12;
    }
    if ((*((_WORD *)v15 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(v15, v12);
      v15 = v92;
      v92 = 0;
      if (v15)
      {
        v16 = *((_DWORD *)v15 + 6) - 2;
        if (*((_DWORD *)v15 + 6) != 2)
          goto LABEL_11;
        if ((*((_WORD *)v15 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v15, v12);
      }
    }
  }
LABEL_12:
  if (v11)
  {
    if (*(_DWORD *)(v11 + 24) == 2)
    {
      if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v11, v12);
    }
    else
    {
      *(_DWORD *)(v11 + 24) -= 2;
    }
  }
  if (v10)
  {
    if (*(_DWORD *)(v10 + 24) == 2)
    {
      if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v10, v12);
    }
    else
    {
      *(_DWORD *)(v10 + 24) -= 2;
    }
  }
  v17 = *(_QWORD *)(a2 + 16);
  if (v17)
  {
    if ((*(_WORD *)(v17 + 28) & 4) != 0)
    {
      v17 = WebCore::ContainerNode::traverseToChildAt(*(WebCore::ContainerNode **)(a2 + 16), *(_DWORD *)(a2 + 24) + 1);
      if (!v17)
        v17 = *(_QWORD *)(a2 + 16);
    }
  }
  v18 = a4;
  v19 = *(_DWORD *)(v17 + 24) + 2;
  *(_DWORD *)(v17 + 24) = v19;
  v20 = v17;
  if ((*(_WORD *)(v17 + 28) & 8) != 0 || (v20 = *(_QWORD *)(v17 + 32)) != 0 && (*(_WORD *)(v20 + 28) & 8) != 0)
  {
    v21 = v97[0];
    if (v97[0])
    {
      while (1)
      {
        if (v21)
        {
          v57 = (unsigned int **)WTF::HashTable<WebCore::CSSCounterStyle *,WebCore::CSSCounterStyle *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CSSCounterStyle *>,WTF::HashTraits<WebCore::CSSCounterStyle *>,WTF::HashTraits<WebCore::CSSCounterStyle *>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::CSSCounterStyle *>,WTF::DefaultHash<WebCore::CSSCounterStyle *>>,WebCore::CSSCounterStyle *>(v21, v20);
          if (v57)
          {
            v12 = v57;
            if (v57 != (unsigned int **)(v21 + 8 * *(unsigned int *)(v21 - 4)))
              WTF::HashTable<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>::removeWithoutEntryConsistencyCheck((unsigned int *)v97, v57);
          }
        }
        v20 = *(_QWORD *)(v20 + 32);
        if (!v20 || (*(_WORD *)(v20 + 28) & 8) == 0)
          break;
        v21 = v97[0];
      }
    }
    else
    {
      do
        v20 = *(_QWORD *)(v20 + 32);
      while (v20 && (*(_WORD *)(v20 + 28) & 8) != 0);
    }
    if (!v17)
      goto LABEL_36;
    v19 = *(_DWORD *)(v17 + 24);
  }
  v22 = v19 - 2;
  if (v22)
  {
    *(_DWORD *)(v17 + 24) = v22;
  }
  else if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v17, v12);
  }
LABEL_36:
  v23 = *(WebCore::Node **)a2;
  *((_DWORD *)v23 + 6) = *(_DWORD *)(*(_QWORD *)a2 + 24) + 2;
  v92 = v23;
  LODWORD(v93) = *(_DWORD *)(a2 + 8);
  v24 = *(WebCore::Node **)(a2 + 16);
  *((_DWORD *)v24 + 6) += 2;
  v94 = v24;
  v95 = *(_DWORD *)(a2 + 24);
  WebCore::IntersectingNodeIterator::IntersectingNodeIterator(&v90, (uint64_t *)&v92);
  while (1)
  {
    v26 = v90;
    if (!v90)
      break;
    *((_DWORD *)v90 + 6) += 2;
    v27 = *((_WORD *)v26 + 14);
    if ((v27 & 8) == 0
      || (v60 = v97[0],
          !WTF::HashSet<JSC::ArrayBuffer *,WTF::DefaultHash<JSC::ArrayBuffer *>,WTF::HashTraits<JSC::ArrayBuffer *>,WTF::HashTableTraits>::contains(v97[0], (uint64_t)v26))|| (v18 & 2) == 0&& (v61 = *((_QWORD *)v26 + 4)) != 0&& (*(_WORD *)(v61 + 28) & 8) != 0&& (WTF::HashSet<JSC::ArrayBuffer *,WTF::DefaultHash<JSC::ArrayBuffer *>,WTF::HashTraits<JSC::ArrayBuffer *>,WTF::HashTableTraits>::contains(v60, v61) & 1) != 0)
    {
      if ((v27 & 2) != 0)
      {
        v28 = *((_QWORD *)v26 + 8) & 0xFFFFFFFFFFFFLL;
        if (v28)
        {
          if ((*(_BYTE *)((*((_QWORD *)v26 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x19642F354);
          }
          v29 = (_DWORD *)(v28 + 16);
          ++*(_DWORD *)((*((_QWORD *)v26 + 8) & 0xFFFFFFFFFFFFLL) + 0x10);
          WebCore::absoluteRectsForRangeInText((WTF *)&v85, a2, (uint64_t)v26, a4);
          if (!(_DWORD)a3)
          {
            v30 = *(_QWORD *)(*((_QWORD *)v26 + 5) + 8);
            *(_DWORD *)(v30 + 24) += 2;
            v31 = *(_QWORD *)(v28 + 32);
            if (v31)
              v31 = *(_QWORD *)(v31 + 8);
            WebCore::Document::convertAbsoluteToClientRects(v30, (uint64_t)&v85, v31 + 80);
            if (*(_DWORD *)(v30 + 24) == 2)
            {
              if ((*(_WORD *)(v30 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v30, v25);
            }
            else
            {
              *(_DWORD *)(v30 + 24) -= 2;
            }
          }
          v32 = v85;
          v33 = HIDWORD(v86);
          if (HIDWORD(v86))
          {
            v34 = *(unsigned int *)(a1 + 8);
            v35 = *(unsigned int *)(a1 + 12);
            v36 = v35 + HIDWORD(v86);
            if (v36 > v34)
            {
              v79 = HIDWORD(v86);
              v80 = v29;
              v37 = a3;
              v38 = a4;
              v39 = v34 + (v34 >> 2);
              if (v39 >= 0x10)
                v40 = v39 + 1;
              else
                v40 = 16;
              v81 = v35 + HIDWORD(v86);
              if (v40 <= v36)
                v41 = v35 + HIDWORD(v86);
              else
                v41 = v40;
              if (v41 >> 28)
              {
                __break(0xC471u);
                JUMPOUT(0x19642F39CLL);
              }
              v42 = *(WTF **)a1;
              v43 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v41));
              v44 = v42;
              *(_DWORD *)(a1 + 8) = v41;
              *(_QWORD *)a1 = v43;
              if ((_DWORD)v35)
              {
                v45 = 16 * v35;
                v46 = v42;
                do
                {
                  v47 = *(_OWORD *)v46;
                  v46 = (WTF *)((char *)v46 + 16);
                  *v43++ = v47;
                  v45 -= 16;
                }
                while (v45);
              }
              a4 = v38;
              a3 = v37;
              v33 = v79;
              v29 = v80;
              v36 = v81;
              if (v44)
              {
                if (*(WTF **)a1 == v44)
                {
                  *(_QWORD *)a1 = 0;
                  *(_DWORD *)(a1 + 8) = 0;
                }
                WTF::fastFree(v44, v25);
                v36 = v81;
              }
            }
            v48 = *(unsigned int *)(a1 + 12);
            if (v36 < v48)
            {
              __break(0xC471u);
              JUMPOUT(0x19642F3A4);
            }
            v49 = (_OWORD *)(*(_QWORD *)a1 + 16 * v48);
            v50 = 16 * v33;
            do
            {
              v51 = *(_OWORD *)v32;
              v32 = (WTF *)((char *)v32 + 16);
              *v49++ = v51;
              v50 -= 16;
            }
            while (v50);
            *(_DWORD *)(a1 + 12) = v36;
            v32 = v85;
          }
          if (v32)
          {
            v85 = 0;
            LODWORD(v86) = 0;
            WTF::fastFree(v32, v25);
          }
          v52 = *v29;
          if (!*v29)
          {
            __break(0xC471u);
            JUMPOUT(0x19642F374);
          }
          goto LABEL_70;
        }
      }
    }
    else
    {
      v62 = (_DWORD *)WebCore::Node::renderBoxModelObject(v26);
      if (v62)
      {
        v63 = v62;
        v29 = v62 + 4;
        ++v62[4];
        if ((v18 & 2) != 0)
        {
          v82[0] = (WTF *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v62 + 912))(v62);
          v82[1] = v70;
          v83 = 0;
          v84 = 0;
          v71 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v63[3] + 8) + 40) + 8) + 1944);
          ++*(_DWORD *)(v71 + 16);
          (*(void (**)(WTF **__return_ptr, _QWORD *, WTF **, uint64_t, uint64_t))(*v63 + 472))(&v85, v63, v82, v71, 0x700000000);
          v72 = *(_DWORD *)(v71 + 16);
          if (!v72)
          {
            __break(0xC471u);
            JUMPOUT(0x19642F394);
          }
          *(_DWORD *)(v71 + 16) = v72 - 1;
          if (v89)
          {
            v73 = WebCore::Document::deviceScaleFactor(*(WebCore::Document **)(*((_QWORD *)v26 + 5) + 8));
            LODWORD(v82[0]) = WebCore::snapRectToDevicePixels((int *)&v85, v73);
            HIDWORD(v82[0]) = v74;
            v82[1] = (WTF *)__PAIR64__(v76, v75);
            if (!(_DWORD)a3)
            {
              v77 = *(_QWORD *)(*((_QWORD *)v26 + 5) + 8);
              *(_DWORD *)(v77 + 24) += 2;
              v96 = v77;
              WebCore::Document::convertAbsoluteToClientRect(v77, (float32x4_t *)v82, (const WebCore::RenderStyle *)(v63 + 10));
              WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v96);
            }
            v78 = *(unsigned int *)(a1 + 12);
            if ((_DWORD)v78 == *(_DWORD *)(a1 + 8))
            {
              WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::FloatRect&>(a1, (unint64_t)v82);
            }
            else
            {
              *(_OWORD *)(*(_QWORD *)a1 + 16 * v78) = *(_OWORD *)v82;
              ++*(_DWORD *)(a1 + 12);
            }
          }
          v52 = *v29;
          if (!*v29)
          {
            __break(0xC471u);
            JUMPOUT(0x19642F314);
          }
        }
        else
        {
          v85 = 0;
          v86 = 0;
          (*(void (**)(_DWORD *, WTF **, _QWORD))(*(_QWORD *)v62 + 392))(v62, &v85, 0);
          if (!(_DWORD)a3)
          {
            v64 = *(WTF **)(*((_QWORD *)v26 + 5) + 8);
            *((_DWORD *)v64 + 6) += 2;
            v82[0] = v64;
            WebCore::Document::convertAbsoluteToClientQuads((uint64_t)v64, (uint64_t)&v85, (uint64_t)(v63 + 10));
            WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)v82);
          }
          WebCore::boundingBoxes((uint64_t)&v85, (uint64_t)v82);
          WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>(a1, (uint64_t)v82);
          v65 = v82[0];
          if (v82[0])
          {
            v82[0] = 0;
            LODWORD(v82[1]) = 0;
            WTF::fastFree(v65, v25);
          }
          v66 = v85;
          if (v85)
          {
            v85 = 0;
            LODWORD(v86) = 0;
            WTF::fastFree(v66, v25);
          }
          v52 = *v29;
          if (!*v29)
          {
            __break(0xC471u);
            JUMPOUT(0x19642F1A0);
          }
        }
LABEL_70:
        *v29 = v52 - 1;
      }
    }
    if (*((_DWORD *)v26 + 6) == 2)
    {
      if ((*((_WORD *)v26 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v26, v25);
    }
    else
    {
      *((_DWORD *)v26 + 6) -= 2;
    }
    WebCore::IntersectingNodeIterator::advance((WebCore::IntersectingNodeIterator *)&v90);
  }
  v53 = v91;
  v91 = 0;
  if (v53)
  {
    v54 = *((_DWORD *)v53 + 6) - 2;
    if (*((_DWORD *)v53 + 6) != 2)
      goto LABEL_73;
    if ((*((_WORD *)v53 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(v53, v25);
      v53 = v90;
      v90 = 0;
      if (v53)
      {
        v54 = *((_DWORD *)v53 + 6) - 2;
        if (*((_DWORD *)v53 + 6) == 2)
        {
          if ((*((_WORD *)v53 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v53, v25);
        }
        else
        {
LABEL_73:
          *((_DWORD *)v53 + 6) = v54;
        }
      }
    }
  }
  if (v94)
  {
    if (*((_DWORD *)v94 + 6) == 2)
    {
      if ((*((_WORD *)v94 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v94, v25);
    }
    else
    {
      *((_DWORD *)v94 + 6) -= 2;
    }
  }
  result = (uint64_t)v92;
  if (v92)
  {
    if (*((_DWORD *)v92 + 6) == 2)
    {
      if ((*((_WORD *)v92 + 15) & 0x400) == 0)
        result = (uint64_t)WebCore::Node::removedLastRef(v92, v25);
    }
    else
    {
      *((_DWORD *)v92 + 6) -= 2;
    }
  }
  if ((v18 & 4) != 0)
    result = WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeAllMatching<WebCore::borderAndTextRects(WebCore::SimpleRange const&,WebCore::CoordinateSpace,WTF::OptionSet<WebCore::RenderObject::BoundingRectBehavior>)::$_0>(a1);
  v56 = v97[0];
  if (v97[0])
  {
    v67 = *(unsigned int *)(v97[0] - 4);
    if ((_DWORD)v67)
    {
      v68 = (uint64_t *)v97[0];
      do
      {
        v69 = *v68;
        if (*v68 != -1)
        {
          *v68 = 0;
          if (v69)
          {
            if (*(_DWORD *)(v69 + 24) == 2)
            {
              if ((*(_WORD *)(v69 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v69, v25);
            }
            else
            {
              *(_DWORD *)(v69 + 24) -= 2;
            }
          }
        }
        ++v68;
        --v67;
      }
      while (v67);
    }
    return WTF::fastFree((WTF *)(v56 - 16), v25);
  }
  return result;
}

uint64_t WebCore::RenderObject::searchParentChainForScrollAnchoringController(WebCore::RenderObject *this, const WebCore::RenderObject *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::RenderObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t i;

  v2 = *((_DWORD *)this + 5);
  if ((v2 & 0x8000) == 0)
  {
LABEL_6:
    v6 = this;
    if ((*((_BYTE *)this + 45) & 0x10) != 0)
    {
      if ((v2 & 0x8000) != 0)
      {
LABEL_12:
        v8 = *((_QWORD *)v6 + 18);
        if (v8)
        {
          while (1)
          {
            v9 = *(_QWORD *)(v8 + 264);
            if (v9)
            {
              v4 = *(_QWORD *)(v9 + 176);
              if (v4)
              {
                v10 = *(_QWORD *)(v4 + 16);
                if (v10)
                {
                  if (*(_QWORD *)(v10 + 8))
                    break;
                }
              }
            }
            v8 = *(_QWORD *)(v8 + 40);
            if (!v8)
              return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8)
                                                                               + 40)
                                                                   + 8)
                                                       + 1944)
                                           + 248)
                               + 1352);
          }
          return v4;
        }
      }
      else
      {
LABEL_8:
        while (1)
        {
          v7 = *((_QWORD *)v6 + 4);
          if (!v7)
            break;
          v6 = *(WebCore::RenderObject **)(v7 + 8);
          if (!v6)
            break;
          if ((*((_BYTE *)v6 + 45) & 0x10) != 0 && (*((_BYTE *)v6 + 21) & 0x80) != 0)
            goto LABEL_12;
        }
      }
    }
    else
    {
      for (i = *((_QWORD *)this + 4); i; i = *((_QWORD *)v6 + 4))
      {
        v6 = *(WebCore::RenderObject **)(i + 8);
        if (!v6)
          break;
        if ((*((_BYTE *)v6 + 45) & 0x10) != 0)
        {
          if ((*((_DWORD *)v6 + 5) & 0x8000) == 0)
            goto LABEL_8;
          goto LABEL_12;
        }
      }
    }
    return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40)
                                                         + 8)
                                             + 1944)
                                 + 248)
                     + 1352);
  }
  if ((*((_BYTE *)this + 45) & 0x10) != 0)
  {
    v3 = *(_QWORD *)(*((_QWORD *)this + 18) + 264);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 176);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 16);
        if (v5)
        {
          if (*(_QWORD *)(v5 + 8))
            return v4;
        }
      }
    }
    goto LABEL_6;
  }
  result = 96;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::RenderObject::RepaintRects::transform(uint64_t this, const WebCore::TransformationMatrix *a2, float a3)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  float64x2_t v15;
  double v17;
  unsigned __int8 v18;
  double v19;
  double v20;
  double v21;
  double v22;
  float v23;
  float v24;
  float v25;
  float v26;
  double v27;
  double v28;
  float v29;
  double v30;
  float v31;
  float v32;
  double v33;
  double v34;
  float v35;
  double v36;
  float v37;
  float v38;
  float v39;
  int v40;
  int v41;
  float v43;
  int v44;
  int v45;
  float v47;
  float v48;
  int v49;
  unsigned int v50;
  float v52;
  unsigned int v54;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  float v62;
  float v63;
  float v64;
  double v65;
  double v66;
  BOOL v68;
  BOOL v69;
  BOOL v70;
  BOOL v71;
  BOOL v72;
  int v74;
  int v75;
  int v76;
  int v77;
  float v78;
  float v79;
  signed int v80;
  int v81;
  float v82;
  float v83;
  double v84;
  int v85;
  int v86;
  float v87;
  double v88;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  float v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  double v109;
  double v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  double v117;
  double v118;
  double v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v125;
  float v126;
  float v128;
  float v129;
  float v131;
  float v132;
  int v134;
  double v135;
  double v136;
  double v137;
  double v138;

  v4 = this;
  v5 = *(unsigned __int8 *)(this + 32);
  v6 = *(_DWORD *)this;
  if (*(_BYTE *)(this + 32))
  {
    v7 = *(_DWORD *)(this + 4);
    if (*(_DWORD *)(this + 16) == v6 && *(_DWORD *)(this + 20) == v7)
    {
      v134 = *(_DWORD *)(this + 24) == *(_DWORD *)(this + 8) && *(_DWORD *)(this + 28) == *(_DWORD *)(this + 12);
      v7 = *(_DWORD *)(this + 20);
    }
    else
    {
      v134 = 0;
    }
  }
  else
  {
    v134 = 0;
    v7 = *(_DWORD *)(this + 4);
  }
  *(float *)&v10 = (float)v6 * 0.015625;
  *(float *)&v11 = (float)v7 * 0.015625;
  *(float *)&v12 = (float)*(int *)(this + 8) * 0.015625;
  *(float *)&v13 = (float)*(int *)(this + 12) * 0.015625;
  v14 = *((double *)a2 + 3);
  v15.f64[0] = v14;
  v15.f64[1] = *((float64_t *)a2 + 2);
  _Q22 = *((float64x2_t *)a2 + 3);
  v17 = *((double *)a2 + 15);
  v18 = vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_f64(v15), (int32x4_t)vceqzq_f64(_Q22)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_f64((float64x2_t)vextq_s8(*((int8x16_t *)a2 + 5), *((int8x16_t *)a2 + 4), 8uLL)), (int32x4_t)vceqq_f64((float64x2_t)vextq_s8(*((int8x16_t *)a2 + 4), *((int8x16_t *)a2 + 5), 8uLL), (float64x2_t)xmmword_1968A14C0))))));
  v19 = *(double *)a2;
  if ((v18 & 1) != 0 || v17 != 1.0)
    goto LABEL_138;
  v20 = *((double *)a2 + 1);
  v22 = *((double *)a2 + 4);
  v21 = *((double *)a2 + 5);
  if (v20 == 0.0 && v22 == 0.0 && v19 == 1.0 && v21 == 1.0)
  {
    v78 = *((double *)a2 + 12);
    v79 = *((double *)a2 + 13);
    v37 = *(float *)&v10 + v78;
    v38 = *(float *)&v11 + v79;
  }
  else
  {
    if (*((double *)a2 + 14) != 0.0)
      goto LABEL_139;
    v23 = *(float *)&v10 + *(float *)&v12;
    v24 = *(float *)&v11 + *(float *)&v13;
    if (v19 <= 0.0)
      v25 = v23;
    else
      v25 = (float)v6 * 0.015625;
    if (v19 <= 0.0)
      v26 = (float)v6 * 0.015625;
    else
      v26 = v23;
    v27 = v19 * v26;
    v28 = v19 * v25;
    if (v20 <= 0.0)
      v29 = v23;
    else
      v29 = (float)v6 * 0.015625;
    if (v20 <= 0.0)
      v23 = (float)v6 * 0.015625;
    v12 = v20 * v23;
    v30 = v20 * v29;
    if (v22 <= 0.0)
      v31 = (float)v7 * 0.015625;
    else
      v31 = v24;
    if (v22 <= 0.0)
      v32 = v24;
    else
      v32 = (float)v7 * 0.015625;
    v33 = v27 + v22 * v31;
    v19 = v32;
    v34 = v28 + v22 * v32;
    if (v21 <= 0.0)
      v35 = (float)v7 * 0.015625;
    else
      v35 = v24;
    if (v21 > 0.0)
      v24 = (float)v7 * 0.015625;
    v36 = v12 + v21 * v35;
    v13 = v30 + v21 * v24;
    v37 = *((double *)a2 + 12) + v34;
    v38 = *((double *)a2 + 13) + v13;
    *(float *)&v12 = v33 - v34;
    *(float *)&v13 = v36 - v13;
  }
  while (1)
  {
    v39 = floorf(v37 * 64.0);
    if (v39 > -2147500000.0)
      v40 = (int)v39;
    else
      v40 = 0x80000000;
    if (v39 < 2147500000.0)
      v41 = v40;
    else
      v41 = 0x7FFFFFFF;
    if (v39 < 2147500000.0 && v39 > -2147500000.0)
      v41 = (int)v39;
    v43 = floorf(v38 * 64.0);
    if (v43 > -2147500000.0)
      v44 = (int)v43;
    else
      v44 = 0x80000000;
    if (v43 < 2147500000.0)
      v45 = v44;
    else
      v45 = 0x7FFFFFFF;
    if (v43 < 2147500000.0 && v43 > -2147500000.0)
      v45 = (int)v43;
    v47 = v38 + *(float *)&v13;
    v48 = ceilf((float)(v37 + *(float *)&v12) * 64.0);
    if (v48 > -2147500000.0)
      v49 = (int)v48;
    else
      v49 = 0x80000000;
    if (v48 < 2147500000.0)
      v50 = v49;
    else
      v50 = 0x7FFFFFFF;
    if (v48 < 2147500000.0 && v48 > -2147500000.0)
      v50 = (int)v48;
    v52 = ceilf(v47 * 64.0);
    if (v52 < 2147500000.0 && v52 > -2147500000.0)
    {
LABEL_81:
      v54 = (int)v52;
      goto LABEL_82;
    }
    if (v52 >= 2147500000.0)
    {
      v54 = 0x7FFFFFFF;
    }
    else
    {
      if (v52 > -2147500000.0)
        goto LABEL_81;
      v54 = 0x80000000;
    }
LABEL_82:
    _VF = __OFSUB__(v50, v41);
    v56 = v50 - v41;
    v57 = (v50 >> 31) + 0x7FFFFFFF;
    if (!_VF)
      v57 = v56;
    _VF = __OFSUB__(v54, v45);
    v58 = v54 - v45;
    v59 = (v54 >> 31) + 0x7FFFFFFF;
    if (!_VF)
      v59 = v58;
    _VF = __OFADD__(v41, v57);
    v60 = v41 + v57;
    if (_VF)
      v60 = (v41 >> 31) + 0x7FFFFFFF;
    _VF = __OFADD__(v45, v59);
    v61 = v45 + v59;
    if (_VF)
      v61 = (v45 >> 31) + 0x7FFFFFFF;
    v62 = floorf((float)((float)v45 * a3) * 0.015625) / a3;
    v63 = floorf((float)((float)v41 * a3) * 0.015625) / a3;
    v64 = (float)(ceilf((float)((float)v60 * a3) * 0.015625) / a3) - v63;
    v12 = v63 * 64.0;
    v65 = v62;
    v11 = v62 * 64.0;
    v66 = v64;
    v14 = v64 * 64.0;
    v13 = (float)((float)(ceilf((float)((float)v61 * a3) * 0.015625) / a3) - v62);
    v17 = v13 * 64.0;
    _NF = v12 < 2147483650.0 && v11 < 2147483650.0;
    v68 = _NF && v14 < 2147483650.0;
    v69 = v68 && v17 < 2147483650.0;
    LODWORD(v10) = 0;
    v70 = !v69 || v12 <= -2147483650.0;
    v71 = v70 || v11 <= -2147483650.0;
    v72 = v71 || v14 <= -2147483650.0;
    if (v72 || v17 <= -2147483650.0)
    {
      LODWORD(v11) = -4194304;
      v14 = -2147483650.0;
      if (v12 > -2147483650.0)
        v74 = (int)v12;
      else
        v74 = 0x80000000;
      if (v12 >= 2147483650.0)
        v74 = 0x7FFFFFFF;
      v135 = v65 * 64.0;
      LODWORD(v12) = 0;
      if (v135 > -2147483650.0)
        v75 = (int)v135;
      else
        v75 = 0x80000000;
      if (v135 >= 2147483650.0)
        v75 = 0x7FFFFFFF;
      v136 = v66 * 64.0;
      if (v136 > -2147483650.0)
        v76 = (int)v136;
      else
        v76 = 0x80000000;
      if (v136 >= 2147483650.0)
        v76 = 0x7FFFFFFF;
      v13 = v13 * 64.0;
      if (v13 > -2147483650.0)
        v77 = (int)v13;
      else
        v77 = 0x80000000;
      if (v13 >= 2147483650.0)
        v77 = 0x7FFFFFFF;
    }
    else
    {
      v74 = (int)v12;
      v75 = (int)v11;
      v76 = (int)v14;
      v77 = (int)v17;
    }
    *(_DWORD *)v4 = v74;
    *(_DWORD *)(v4 + 4) = v75;
    *(_DWORD *)(v4 + 8) = v76;
    *(_DWORD *)(v4 + 12) = v77;
    if (!v134)
      break;
    if (v5)
    {
      *(_OWORD *)(v4 + 16) = *(_OWORD *)v4;
      return this;
    }
LABEL_137:
    __break(1u);
LABEL_138:
    v20 = *((double *)a2 + 1);
    v22 = *((double *)a2 + 4);
    v21 = *((double *)a2 + 5);
LABEL_139:
    v87 = *(float *)&v10 + *(float *)&v12;
    v88 = *(float *)&v10;
    _D23 = *(float *)&v11;
    v90 = *((double *)a2 + 12);
    v91 = *((double *)a2 + 13);
    v92 = v90 + *(float *)&v10 * v19;
    v93 = v92 + *(float *)&v11 * v22;
    v94 = v91 + *(float *)&v10 * v20;
    v95 = v94 + *(float *)&v11 * v21;
    v96 = v17 + v88 * v14;
    __asm { FMLA            D27, D23, V22.D[1] }
    if (_D27 != 1.0 && _D27 != 0.0)
    {
      v93 = v93 / _D27;
      v95 = v95 / _D27;
    }
    v99 = *(float *)&v11 + *(float *)&v13;
    v100 = v87;
    v101 = v90 + v87 * v19;
    v102 = v101 + _D23 * v22;
    v103 = v91 + v100 * v20;
    v104 = v103 + _D23 * v21;
    v105 = v17 + v100 * v14;
    v106 = v105 + _D23 * _Q22.f64[1];
    if (v106 != 1.0 && v106 != 0.0)
    {
      v102 = v102 / v106;
      v104 = v104 / v106;
    }
    v107 = v99;
    v108 = v101 + v99 * v22;
    v109 = v103 + v99 * v21;
    v110 = v105 + v99 * _Q22.f64[1];
    if (v110 != 1.0 && v110 != 0.0)
    {
      v108 = v108 / v110;
      v109 = v109 / v110;
    }
    v111 = v93;
    v112 = v95;
    v113 = v102;
    v114 = v104;
    v115 = v108;
    v116 = v109;
    v117 = v92 + v107 * v22;
    v118 = v94 + v107 * v21;
    v119 = v96 + v107 * _Q22.f64[1];
    if (v119 != 1.0 && v119 != 0.0)
    {
      v117 = v117 / v119;
      v118 = v118 / v119;
    }
    v120 = v117;
    v121 = v118;
    if (v120 >= v115)
      v37 = v108;
    else
      v37 = v117;
    if (v113 >= v111)
      v122 = v111;
    else
      v122 = v113;
    if (v37 >= v122)
      v37 = v122;
    v123 = fabsf(v37);
    if (v123 == INFINITY || v123 > 2147500000.0)
      v37 = (float)((SLODWORD(v37) >> 31) ^ 0x7FFFFFFF);
    if (v121 >= v116)
      v38 = v109;
    else
      v38 = v121;
    if (v114 >= v112)
      v125 = v95;
    else
      v125 = v114;
    if (v38 >= v125)
      v38 = v125;
    v126 = fabsf(v38);
    if (v126 == INFINITY || v126 > 2147500000.0)
      v38 = (float)((SLODWORD(v38) >> 31) ^ 0x7FFFFFFF);
    if (v111 < v113)
      v111 = v113;
    if (v115 >= v120)
      v128 = v108;
    else
      v128 = v120;
    if (v111 < v128)
      v111 = v128;
    v129 = fabsf(v111);
    v19 = 3.53369517e72;
    if (v129 == INFINITY || v129 > 2147500000.0)
      v111 = (float)((SLODWORD(v111) >> 31) ^ 0x7FFFFFFF);
    if (v112 < v114)
      v112 = v114;
    if (v116 >= v121)
      v131 = v109;
    else
      v131 = v121;
    if (v112 < v131)
      v112 = v131;
    v132 = fabsf(v112);
    if (v132 == INFINITY || v132 > 2147500000.0)
      v112 = (float)((SLODWORD(v112) >> 31) ^ 0x7FFFFFFF);
    *(float *)&v12 = v111 - v37;
    *(float *)&v13 = v112 - v38;
  }
  if (!v5)
    return this;
  this = WebCore::TransformationMatrix::mapRect(a2, (const WebCore::LayoutRect *)(v4 + 16));
  v80 = this + (_DWORD)a2;
  if (__OFADD__((_DWORD)this, (_DWORD)a2))
    v80 = (this >> 31) + 0x7FFFFFFF;
  v81 = HIDWORD(this) + HIDWORD(a2);
  if (__OFADD__(HIDWORD(this), HIDWORD(a2)))
    v81 = (HIDWORD(this) >> 31) + 0x7FFFFFFF;
  v82 = floorf((float)((float)SHIDWORD(this) * a3) * 0.015625) / a3;
  v83 = floorf((float)((float)(int)this * a3) * 0.015625) / a3;
  *(float *)&v14 = (float)(ceilf((float)((float)v80 * a3) * 0.015625) / a3) - v83;
  LODWORD(v10) = 0;
  v11 = v83 * 64.0;
  v12 = v82;
  v84 = *(float *)&v14;
  v13 = (float)((float)(ceilf((float)((float)v81 * a3) * 0.015625) / a3) - v82);
  if (v11 >= 2147483650.0
    || (v14 = v12 * 64.0, v12 * 64.0 >= 2147483650.0)
    || (v17 = v84 * 64.0, v84 * 64.0 >= 2147483650.0)
    || (v10 = v13 * 64.0, v13 * 64.0 >= 2147483650.0)
    || (v19 = -2147483650.0, v11 <= -2147483650.0)
    || (v19 = -2147483650.0, v14 <= -2147483650.0)
    || (v19 = -2147483650.0, v17 <= -2147483650.0)
    || (v19 = -2147483650.0, v10 <= -2147483650.0))
  {
    if (v11 >= 2147483650.0)
    {
      v85 = 0x7FFFFFFF;
    }
    else
    {
      v14 = -2147483650.0;
      if (v11 <= -2147483650.0)
        v85 = 0x80000000;
      else
        v85 = (int)v11;
    }
    LODWORD(v11) = 0;
    v137 = v12 * 64.0;
    if (v137 >= 2147483650.0)
    {
      v5 = 0x7FFFFFFF;
    }
    else
    {
      LODWORD(v11) = 0;
      if (v137 <= -2147483650.0)
        v5 = 0x80000000;
      else
        v5 = (int)v137;
    }
    LODWORD(v12) = 0;
    v138 = v84 * 64.0;
    if (v138 >= 2147483650.0)
    {
      v134 = 0x7FFFFFFF;
    }
    else
    {
      LODWORD(v12) = 0;
      if (v138 <= -2147483650.0)
        v134 = 0x80000000;
      else
        v134 = (int)v138;
    }
    v13 = v13 * 64.0;
    if (v13 >= 2147483650.0)
    {
      v86 = 0x7FFFFFFF;
    }
    else if (v13 <= -2147483650.0)
    {
      v86 = 0x80000000;
    }
    else
    {
      v86 = (int)v13;
    }
  }
  else
  {
    v85 = (int)v11;
    v5 = (int)v14;
    v134 = (int)v17;
    v86 = (int)v10;
  }
  if (!*(_BYTE *)(v4 + 32))
    goto LABEL_137;
  *(_DWORD *)(v4 + 16) = v85;
  *(_DWORD *)(v4 + 20) = v5;
  *(_DWORD *)(v4 + 24) = v134;
  *(_DWORD *)(v4 + 28) = v86;
  return this;
}

WebCore::ViewTransition *WebCore::RenderObject::effectiveCapturedInViewTransition(WebCore::RenderObject *this)
{
  uint64_t v1;
  uint64_t v2;
  WebCore::ViewTransition *result;

  v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(v1 + 40) + 8);
  if (*(_QWORD *)(v2 + 1272) == v1)
    return 0;
  if (*((_BYTE *)this + 46) != 49)
    return (WebCore::ViewTransition *)((*((unsigned __int8 *)this + 22) >> 6) & 1);
  result = *(WebCore::ViewTransition **)(v2 + 2112);
  if (result)
    return (WebCore::ViewTransition *)WebCore::ViewTransition::documentElementIsCaptured(result);
  return result;
}

uint64_t WebCore::RenderObject::usedPointerEvents(WebCore::RenderObject *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(v1 + 40) + 8);
  if (*(_BYTE *)(v2 + 3441) && *(_QWORD *)(v2 + 1272) != v1)
    return 0;
  if ((*((_BYTE *)this + 45) & 2) != 0)
  {
    v4 = *((_QWORD *)this + 4);
    if (v4)
      this = *(WebCore::RenderObject **)(v4 + 8);
    else
      this = 0;
  }
  if ((*(_BYTE *)(*((_QWORD *)this + 13) + 239) & 1) != 0)
    return 0;
  else
    return (*((_DWORD *)this + 31) >> 6) & 0xF;
}

double WebCore::RenderObject::collectSelectionGeometriesWithoutUnionInteriorLines@<D0>(WebCore::Node **this@<X0>, double *a2@<X8>)
{
  double result;
  uint64_t v5;
  double v6;

  WebCore::RenderObject::collectSelectionGeometriesInternal(this, (uint64_t)&v5);
  *(_QWORD *)a2 = v5;
  result = v6;
  a2[1] = v6;
  return result;
}

WTF *WebCore::RenderObject::collectSelectionGeometriesInternal@<X0>(WebCore::Node **this@<X0>, uint64_t a2@<X8>)
{
  WebCore::Node *v3;
  uint64_t v4;
  int v5;
  WebCore::Node *v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  _DWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  WebCore::Node *v15;
  WebCore::Node *v16;
  WebCore::Node *v17;
  _DWORD *v18;
  WebCore::Node *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  BOOL v25;
  BOOL v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  char *v34;
  char *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  char *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  int v49;
  WebCore::Node *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  int v58;
  WebCore::Node *v59;
  int v60;
  uint64_t v61;
  WebCore::Node *v62;
  BOOL v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  signed int v69;
  signed int v70;
  signed int v71;
  unsigned __int8 *v72;
  int v73;
  unint64_t v74;
  signed int v75;
  unsigned __int8 *v76;
  int v77;
  unint64_t v78;
  signed int v79;
  signed int v80;
  int v81;
  BOOL v82;
  int v83;
  unint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t i;
  unint64_t v94;
  unsigned __int8 *v95;
  int v96;
  unint64_t v97;
  int v98;
  unsigned __int8 *v99;
  int v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  char *v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  unint64_t v109;
  uint64_t v110;
  int v111;
  unint64_t v112;
  unint64_t v113;
  int v114;
  int v115;
  unint64_t v116;
  int v117;
  char *v118;
  __int128 v119;
  __int128 v120;
  char *v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  uint64_t v126;
  unint64_t v127;
  WebCore::SelectionGeometry *v128;
  char *v129;
  WebCore::SelectionGeometry *v130;
  char *v131;
  int v132;
  unint64_t v133;
  int v134;
  int v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  int v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  WebCore::SelectionGeometry *v143;
  char *v144;
  char *v145;
  int v146;
  int v147;
  int v148;
  int v149;
  int v150;
  unint64_t v151;
  unint64_t v152;
  int v153;
  int v154;
  unint64_t v155;
  unint64_t v156;
  int v157;
  WTF *result;
  void *v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  BOOL v163;
  unint64_t v164;
  unint64_t v165;
  int v166;
  int v167;
  WebCore::Node *v169;
  WebCore::Node *v170;
  _BOOL4 v171;
  int v172;
  _BOOL4 v173;
  int v174;
  uint64_t v175;
  int v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  int v183;
  WebCore::Node *v184;
  int v185;
  char v186;
  WebCore::Node *v187;
  uint64_t v188;
  uint64_t v189;
  WTF *v190;
  uint64_t v191;
  WTF *v192;
  uint64_t v193;

  v192 = 0;
  v193 = 0;
  v190 = 0;
  v191 = 0;
  v3 = *this;
  v4 = *((_QWORD *)*this + 8) & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    if ((*(_BYTE *)((*((_QWORD *)*this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      v4 = *(_QWORD *)(*(_QWORD *)((*((_QWORD *)*this + 8) & 0xFFFFFFFFFFFFLL) + 0x20) + 8);
    v5 = (unsigned __int16)*(_DWORD *)(v4 + 124) >> 13;
    v166 = 2;
    switch(v5)
    {
      case 1:
      case 2:
        goto LABEL_6;
      case 3:
      case 5:
        v5 = 3;
        goto LABEL_6;
      case 4:
        goto LABEL_7;
      default:
        v5 = 0;
LABEL_6:
        v166 = v5;
LABEL_7:
        v173 = (v166 & 0xFFFFFFFD) == 1;
        break;
    }
  }
  else
  {
    v173 = 0;
  }
  *((_DWORD *)v3 + 6) += 2;
  *(_QWORD *)&v178 = v3;
  DWORD2(v178) = *((_DWORD *)this + 2);
  v6 = this[2];
  *((_DWORD *)v6 + 6) += 2;
  v169 = v6;
  v170 = v3;
  *(_QWORD *)&v179 = v6;
  DWORD2(v179) = *((_DWORD *)this + 6);
  WebCore::IntersectingNodeIterator::IntersectingNodeIterator(&v188, (uint64_t *)&v178);
  v8 = v188;
  if (v188)
  {
    v9 = 0;
    do
    {
      v10 = *(_DWORD *)(v8 + 24) + 2;
      *(_DWORD *)(v8 + 24) = v10;
      v11 = (_DWORD *)(*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL);
      if (v11)
      {
        ++*(_DWORD *)((*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
        if (!(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v11 + 112))(v11))
        {
          v12 = v11;
          if ((*((_BYTE *)v11 + 45) & 2) != 0)
          {
            v12 = (_QWORD *)*((_QWORD *)v11 + 4);
            if (v12)
              v12 = (_QWORD *)v12[1];
          }
          v13 = v12[13];
          if ((*(_BYTE *)(v13 + 239) & 1) == 0)
          {
            if ((v14 = *(_DWORD *)(v13 + 228), (v14 & 0x30) != 0)
              && (*(_DWORD *)(*(_QWORD *)(v12[11] + 32) + 148) & 0xC00000) != 0x800000
              || (v14 & 0x18000) != 0)
            {
              if ((*((_BYTE *)v11 + 45) & 1) != 0)
              {
                v16 = 0;
                v17 = 0;
                v15 = *this;
              }
              else
              {
                v15 = *(WebCore::Node **)(*((_QWORD *)v11 + 3) + 8);
                v16 = *this;
                v17 = v15;
              }
              v18 = v11;
              if ((*((_BYTE *)v11 + 45) & 2) != 0)
                v18 = *(_DWORD **)(*((_QWORD *)v11 + 4) + 8);
              v19 = this[2];
              v20 = (unsigned __int16)v18[31] >> 13;
              v174 = v9;
              v47 = 2;
              switch(v20)
              {
                case 1:
                case 2:
                  goto LABEL_23;
                case 3:
                case 5:
                  v20 = 3;
                  goto LABEL_23;
                case 4:
                  goto LABEL_24;
                default:
                  v20 = 0;
LABEL_23:
                  v47 = v20;
LABEL_24:
                  v171 = (v47 & 0xFFFFFFFD) == 1;
                  if (v15 == v16)
                    v21 = *((unsigned int *)this + 2);
                  else
                    v21 = 0;
                  if (v17 == v19)
                    v22 = *((unsigned int *)this + 6);
                  else
                    v22 = 0x7FFFFFFFLL;
                  (*(void (**)(_DWORD *, WTF **, uint64_t, uint64_t))(*(_QWORD *)v11 + 368))(v11, &v190, v21, v22);
                  if (HIDWORD(v191))
                  {
                    v23 = (unint64_t)v190;
                    v24 = 84 * HIDWORD(v191);
                    do
                    {
                      if (*(_BYTE *)(v23 + 55))
                        v25 = v15 == v16;
                      else
                        v25 = 1;
                      if (!v25)
                        *(_BYTE *)(v23 + 55) = 0;
                      if (*(_BYTE *)(v23 + 56))
                        v26 = v17 == v19;
                      else
                        v26 = 1;
                      if (!v26)
                        *(_BYTE *)(v23 + 56) = 0;
                      v27 = *(unsigned __int8 *)(v23 + 57);
                      WebCore::SelectionGeometry::rect((WebCore::SelectionGeometry *)v23);
                      v29 = HIDWORD(v28);
                      if (v27)
                        LODWORD(v29) = v28;
                      if ((_DWORD)v29)
                        goto LABEL_48;
                      v30 = *(unsigned __int8 *)(v23 + 57);
                      WebCore::SelectionGeometry::rect((WebCore::SelectionGeometry *)v23);
                      v32 = HIDWORD(v31);
                      if (!v30)
                        LODWORD(v32) = v31;
                      if ((_DWORD)v32)
                      {
LABEL_48:
                        v33 = HIDWORD(v193);
                        if (HIDWORD(v193) == (_DWORD)v193)
                        {
                          v34 = WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v192, HIDWORD(v193) + 1, v23);
                          v33 = HIDWORD(v193);
                          v35 = (char *)v192 + 84 * HIDWORD(v193);
                          v36 = *((_OWORD *)v34 + 1);
                          *(_OWORD *)v35 = *(_OWORD *)v34;
                          *((_OWORD *)v35 + 1) = v36;
                          v38 = *((_OWORD *)v34 + 3);
                          v37 = *((_OWORD *)v34 + 4);
                          v39 = *((_OWORD *)v34 + 2);
                          *((_DWORD *)v35 + 20) = *((_DWORD *)v34 + 20);
                          *((_OWORD *)v35 + 3) = v38;
                          *((_OWORD *)v35 + 4) = v37;
                          *((_OWORD *)v35 + 2) = v39;
                        }
                        else
                        {
                          v40 = (char *)v192 + 84 * HIDWORD(v193);
                          v41 = *(_OWORD *)v23;
                          *((_OWORD *)v40 + 1) = *(_OWORD *)(v23 + 16);
                          v43 = *(_OWORD *)(v23 + 48);
                          v42 = *(_OWORD *)(v23 + 64);
                          v44 = *(_OWORD *)(v23 + 32);
                          *((_DWORD *)v40 + 20) = *(_DWORD *)(v23 + 80);
                          *((_OWORD *)v40 + 3) = v43;
                          *((_OWORD *)v40 + 4) = v42;
                          *((_OWORD *)v40 + 2) = v44;
                          *(_OWORD *)v40 = v41;
                        }
                        HIDWORD(v193) = v33 + 1;
                      }
                      v23 += 84;
                      v24 -= 84;
                    }
                    while (v24);
                  }
                  v9 = v173 ^ v171 | v174;
                  HIDWORD(v191) = 0;
                  break;
              }
            }
          }
        }
        v45 = v11[4];
        if (!v45)
        {
          __break(0xC471u);
          JUMPOUT(0x196430C30);
        }
        v11[4] = v45 - 1;
        v10 = *(_DWORD *)(v8 + 24);
      }
      v46 = v10 - 2;
      if (v46)
      {
        *(_DWORD *)(v8 + 24) = v46;
      }
      else if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v8);
      }
      WebCore::IntersectingNodeIterator::advance((WebCore::IntersectingNodeIterator *)&v188);
      v8 = v188;
    }
    while (v188);
  }
  else
  {
    LOBYTE(v9) = 0;
  }
  v48 = v189;
  v189 = 0;
  if (v48)
  {
    v49 = *(_DWORD *)(v48 + 24) - 2;
    if (*(_DWORD *)(v48 + 24) != 2)
    {
LABEL_72:
      *(_DWORD *)(v48 + 24) = v49;
      goto LABEL_73;
    }
    if ((*(_WORD *)(v48 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v48);
      v48 = v188;
      v188 = 0;
      if (v48)
      {
        v49 = *(_DWORD *)(v48 + 24) - 2;
        if (*(_DWORD *)(v48 + 24) != 2)
          goto LABEL_72;
        if ((*(_WORD *)(v48 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v48);
      }
    }
  }
LABEL_73:
  if (v169)
  {
    if (*((_DWORD *)v169 + 6) == 2)
    {
      if ((*((_WORD *)v169 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v169);
    }
    else
    {
      *((_DWORD *)v169 + 6) -= 2;
    }
  }
  if (v170)
  {
    if (*((_DWORD *)v170 + 6) == 2)
    {
      if ((*((_WORD *)v170 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v170);
    }
    else
    {
      *((_DWORD *)v170 + 6) -= 2;
    }
  }
  if ((v9 & 1) != 0)
  {
    v50 = *this;
    v51 = (uint64_t)this[2];
    if (*this == (WebCore::Node *)v51)
      goto LABEL_81;
    v160 = WebCore::depth<(WebCore::TreeType)2>((uint64_t)*this);
    v161 = WebCore::depth<(WebCore::TreeType)2>(v51);
    v162 = v161 - v160;
    v163 = v160 >= v161;
    v164 = v160 - v161;
    if (v160 >= v161)
      v52 = (uint64_t)v50;
    else
      v52 = v51;
    if (v163)
      v50 = (WebCore::Node *)v51;
    if (v163)
      v165 = v164;
    else
      v165 = v162;
    for (; v165; --v165)
      v52 = WebCore::Node::parentInComposedTree((WebCore::Node *)v52);
    if ((WebCore::Node *)v52 == v50)
    {
LABEL_81:
      v52 = (uint64_t)v50;
    }
    else
    {
      do
      {
        v52 = WebCore::Node::parentInComposedTree((WebCore::Node *)v52);
        v50 = (WebCore::Node *)WebCore::Node::parentInComposedTree(v50);
      }
      while ((WebCore::Node *)v52 != v50);
    }
    if (v52)
    {
      v53 = *(_DWORD *)(v52 + 24);
      *(_DWORD *)(v52 + 24) = v53 + 2;
      v54 = *(_QWORD *)(v52 + 64) & 0xFFFFFFFFFFFFLL;
      if (v54)
      {
        v55 = *(_DWORD *)((*(_QWORD *)(v52 + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
        *(_DWORD *)((*(_QWORD *)(v52 + 64) & 0xFFFFFFFFFFFFLL) + 0x10) = v55 + 1;
        v56 = v54;
        if ((*(_BYTE *)(v54 + 45) & 2) != 0)
          v56 = *(_QWORD *)(*(_QWORD *)(v54 + 32) + 8);
        v57 = (unsigned __int16)*(_DWORD *)(v56 + 124) >> 13;
        v167 = 2;
        switch(v57)
        {
          case 1:
          case 2:
            goto LABEL_88;
          case 3:
          case 5:
            v57 = 3;
            goto LABEL_88;
          case 4:
            goto LABEL_89;
          default:
            v57 = 0;
LABEL_88:
            v167 = v57;
LABEL_89:
            if (v55 == -1)
            {
              __break(0xC471u);
              JUMPOUT(0x196430CBCLL);
            }
            LOBYTE(v173) = (v167 & 0xFFFFFFFD) == 1;
            *(_DWORD *)(v54 + 16) = v55;
            break;
        }
      }
      if (v53)
      {
        *(_DWORD *)(v52 + 24) = v53;
      }
      else if ((*(_WORD *)(v52 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v52);
      }
    }
  }
  v58 = HIDWORD(v193);
  v175 = HIDWORD(v193);
  if (HIDWORD(v193))
  {
    v59 = this[2];
    *((_DWORD *)v59 + 6) += 2;
    v60 = *((_DWORD *)this + 6);
    v184 = v59;
    v185 = v60;
    v186 &= 0xF0u;
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v184, (uint64_t)&v178);
    LOBYTE(v179) = 1;
    v61 = v178;
    if ((_QWORD)v178)
      *(_DWORD *)(v178 + 24) += 2;
    v188 = v61;
    LODWORD(v189) = DWORD2(v178);
    BYTE4(v189) = BYTE12(v178);
    WebCore::Position::firstNode((uint64_t)&v188, (uint64_t *)&v187);
    v62 = v187;
    if (v187)
    {
      v63 = (*((_WORD *)v187 + 14) & 0x10) != 0
         && *(_QWORD *)(*((_QWORD *)v187 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::brTag + 24);
      v187 = 0;
      if (*((_DWORD *)v62 + 6) == 2)
      {
        if ((*((_WORD *)v62 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v62);
      }
      else
      {
        *((_DWORD *)v62 + 6) -= 2;
      }
    }
    else
    {
      v63 = 0;
      v187 = 0;
    }
    v65 = v188;
    v188 = 0;
    if (v65)
    {
      if (*(_DWORD *)(v65 + 24) == 2)
      {
        if ((*(_WORD *)(v65 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v65);
      }
      else
      {
        *(_DWORD *)(v65 + 24) -= 2;
      }
    }
    if (v61)
    {
      if (*(_DWORD *)(v61 + 24) == 2)
      {
        if ((*(_WORD *)(v61 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v61);
      }
      else
      {
        *(_DWORD *)(v61 + 24) -= 2;
      }
    }
    if (*((_DWORD *)v59 + 6) == 2)
    {
      if ((*((_WORD *)v59 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v59);
    }
    else
    {
      *((_DWORD *)v59 + 6) -= 2;
    }
    if (v63)
    {
      if (!HIDWORD(v193))
      {
        __break(0xC471u);
        JUMPOUT(0x196430D8CLL);
      }
      *((_BYTE *)v192 + 84 * HIDWORD(v193) - 32) = 1;
    }
    v66 = 0;
    v67 = 0;
    v177 = 0;
    v172 = 0x7FFFFFFF;
    v68 = -1;
    v69 = 0x80000000;
    v70 = 0x80000000;
    v71 = 0x7FFFFFFF;
    do
    {
      if (v67 >= HIDWORD(v193))
      {
        __break(0xC471u);
        JUMPOUT(0x196430CD4);
      }
      v72 = (unsigned __int8 *)v192 + 84 * v67;
      v73 = v72[57];
      v74 = WebCore::SelectionGeometry::rect((WebCore::SelectionGeometry *)v72);
      if (v73)
        v75 = HIDWORD(v74);
      else
        v75 = v74;
      if (v67 >= HIDWORD(v193))
      {
        __break(0xC471u);
        JUMPOUT(0x196430CDCLL);
      }
      v76 = (unsigned __int8 *)v192 + 84 * v67;
      v77 = v76[57];
      WebCore::SelectionGeometry::rect((WebCore::SelectionGeometry *)v76);
      v78 = HIDWORD(v7);
      if (!v77)
        LODWORD(v78) = v7;
      v79 = v78 + v75;
      if (v70 <= v71 || (int)v78 < 1)
        goto LABEL_134;
      v80 = v75 <= v71 ? v71 : v75;
      v81 = v70 >= v79 ? v78 + v75 : v70;
      v82 = __OFSUB__(v81, v80);
      v83 = v81 - v80;
      if (v83 < 0 != v82)
        goto LABEL_134;
      if (v70 - v71 < (int)v78)
        LODWORD(v78) = v70 - v71;
      if ((float)((float)(int)v78 * 0.75) > (float)v83)
      {
LABEL_134:
        if (v67)
        {
          v84 = v68;
          v85 = v66;
          do
          {
            if (v84 >= HIDWORD(v193))
            {
              __break(0xC471u);
              JUMPOUT(0x196430CC4);
            }
            v86 = (char *)v192 + v85;
            if (*(_DWORD *)((char *)v192 + v85 - 36))
              break;
            if (!*(v86 - 52))
            {
              *((_DWORD *)v86 - 9) = v177;
              WebCore::SelectionGeometry::setLogicalTop((WebCore::SelectionGeometry *)(v86 - 84), v71);
              if (v84 >= HIDWORD(v193))
              {
                __break(0xC471u);
                JUMPOUT(0x196430CCCLL);
              }
              WebCore::SelectionGeometry::setLogicalHeight((WTF *)((char *)v192 + v85 - 84), (v70 - v71));
            }
            --v84;
            v85 -= 84;
          }
          while (v85);
        }
        if (v173)
        {
          if (!v67 || v70 < v75)
            goto LABEL_151;
          if (v67 >= HIDWORD(v193))
          {
            __break(0xC471u);
            JUMPOUT(0x196430D6CLL);
          }
          if (*((_DWORD *)v192 + 21 * v67 + 15) == *((_DWORD *)v192 + 21 * v67 - 6))
            v79 = v71;
          else
LABEL_151:
            v71 = 0x7FFFFFFF;
        }
        else if (v79 < v71)
        {
          v70 = 0x80000000;
        }
        else
        {
          v75 = v70;
        }
        v69 = v70;
        v172 = v71;
        ++v177;
        v71 = v75;
        v70 = v79;
      }
      else
      {
        if (v71 >= v75)
          v71 = v75;
        if (v70 <= v79)
          v70 = v79;
        if (v173)
        {
          if (v70 >= v172)
            v70 = v172;
        }
        else if (v69 > v71)
        {
          v71 = v69;
        }
      }
      ++v67;
      v66 += 84;
      ++v68;
    }
    while (v67 != v175);
    v87 = (v70 - v71);
    v88 = 84 * v175;
    v89 = v175 - 1;
    v64 = v177;
    do
    {
      if (v89 >= HIDWORD(v193))
      {
        __break(0xC471u);
        JUMPOUT(0x196430D34);
      }
      v90 = (char *)v192 + v88;
      if (*(_DWORD *)((char *)v192 + v88 - 36))
        break;
      if (!*(v90 - 52))
      {
        *((_DWORD *)v90 - 9) = v177;
        WebCore::SelectionGeometry::setLogicalTop((WebCore::SelectionGeometry *)(v90 - 84), v71);
        if (v89 >= HIDWORD(v193))
        {
          __break(0xC471u);
          JUMPOUT(0x196430D74);
        }
        WebCore::SelectionGeometry::setLogicalHeight((WTF *)((char *)v192 + v88 - 84), v87);
      }
      v88 -= 84;
      --v89;
    }
    while (v89 != -1);
    if (v175 > 1)
    {
      v91 = 0;
      v92 = 0;
      for (i = 1; i != v175; ++i)
      {
        if (i >= HIDWORD(v193))
        {
          __break(0xC471u);
          JUMPOUT(0x196430D3CLL);
        }
        v94 = i;
        if (*((_DWORD *)v192 + 21 * i + 12) == *((_DWORD *)v192 + 21 * i - 9))
        {
          v95 = (unsigned __int8 *)v192 + 84 * i;
          v96 = v95[57];
          v97 = WebCore::SelectionGeometry::rect((WebCore::SelectionGeometry *)v95);
          if (i - 1 >= HIDWORD(v193))
          {
            __break(0xC471u);
            JUMPOUT(0x196430D64);
          }
          if (v96)
            v98 = v97;
          else
            v98 = HIDWORD(v97);
          v99 = (unsigned __int8 *)v192 + 84 * i - 84;
          v100 = v99[57];
          v101 = WebCore::SelectionGeometry::rect((WebCore::SelectionGeometry *)v99);
          v102 = HIDWORD(v101);
          if (v100)
            LODWORD(v102) = v101;
          if (v98 >= (int)v102)
            goto LABEL_184;
          v103 = HIDWORD(v193);
          if (i >= HIDWORD(v193))
          {
            __break(0xC471u);
            JUMPOUT(0x196430D7CLL);
          }
          if (*((_BYTE *)v192 + 84 * i + 32))
          {
LABEL_184:
            v94 = v92;
          }
          else
          {
            v104 = (char *)v192 + 84 * i;
            v105 = *((_OWORD *)v104 + 1);
            v178 = *(_OWORD *)v104;
            v179 = v105;
            v106 = *((_OWORD *)v104 + 2);
            v107 = *((_OWORD *)v104 + 3);
            v108 = *((_OWORD *)v104 + 4);
            v183 = *((_DWORD *)v104 + 20);
            v181 = v107;
            v182 = v108;
            v180 = v106;
            v109 = i;
            if (i > v92)
            {
              v110 = v91;
              v109 = i;
              do
              {
                v111 = BYTE9(v181);
                v112 = WebCore::SelectionGeometry::rect((WebCore::SelectionGeometry *)&v178);
                v113 = v109 - 1;
                if (v109 - 1 >= HIDWORD(v193))
                {
                  __break(0xC471u);
                  JUMPOUT(0x196430D4CLL);
                }
                if (v111)
                  v114 = v112;
                else
                  v114 = HIDWORD(v112);
                v115 = *((unsigned __int8 *)v192 + v110 + 57);
                v116 = WebCore::SelectionGeometry::rect((WTF *)((char *)v192 + v110));
                if (v115)
                  v117 = v116;
                else
                  v117 = HIDWORD(v116);
                v103 = HIDWORD(v193);
                if (v114 >= v117)
                  goto LABEL_201;
                if (v113 >= HIDWORD(v193))
                {
                  __break(0xC471u);
                  JUMPOUT(0x196430D54);
                }
                if (v109 >= HIDWORD(v193))
                {
                  __break(0xC471u);
                  JUMPOUT(0x196430D5CLL);
                }
                v118 = (char *)v192 + v110;
                v119 = *(_OWORD *)((char *)v192 + v110 + 48);
                *(_OWORD *)(v118 + 116) = *((_OWORD *)v118 + 2);
                *(_OWORD *)(v118 + 132) = v119;
                *(_OWORD *)(v118 + 148) = *((_OWORD *)v118 + 4);
                v120 = *((_OWORD *)v118 + 1);
                *(_OWORD *)(v118 + 84) = *(_OWORD *)v118;
                *((_DWORD *)v118 + 41) = *((_DWORD *)v118 + 20);
                *(_OWORD *)(v118 + 100) = v120;
                v110 -= 84;
                --v109;
              }
              while (v113 > v92);
              v109 = v92;
            }
LABEL_201:
            if (v109 >= v103)
            {
              __break(0xC471u);
              JUMPOUT(0x196430D84);
            }
            v121 = (char *)v192 + 84 * v109;
            v122 = v178;
            *((_OWORD *)v121 + 1) = v179;
            v124 = v181;
            v123 = v182;
            v125 = v180;
            *((_DWORD *)v121 + 20) = v183;
            *((_OWORD *)v121 + 3) = v124;
            *((_OWORD *)v121 + 4) = v123;
            *((_OWORD *)v121 + 2) = v125;
            *(_OWORD *)v121 = v122;
            v94 = v92;
            v64 = v177;
          }
        }
        v91 += 84;
        v92 = v94;
      }
      v126 = 84;
      v127 = 1;
      do
      {
        if (v127 >= HIDWORD(v193))
        {
          __break(0xC471u);
          JUMPOUT(0x196430D44);
        }
        v128 = (WTF *)((char *)v192 + v126);
        if (*(_DWORD *)((char *)v192 + v126 + 48) != *(_DWORD *)((char *)v192 + v126 - 36) || *((_BYTE *)v128 + 32))
          goto LABEL_206;
        v129 = (char *)v192 + v126;
        if (*((_BYTE *)v192 + v126 - 51))
        {
          if (!*(v129 - 29))
            goto LABEL_212;
        }
        else if (!*(v129 - 28))
        {
LABEL_212:
          v130 = (WebCore::SelectionGeometry *)((char *)v128 - 84);
          v131 = (char *)v192 + v126;
          v132 = *((unsigned __int8 *)v192 + v126 + 57);
          v133 = WebCore::SelectionGeometry::rect(v128);
          if (v132)
            v134 = v133;
          else
            v134 = HIDWORD(v133);
          v135 = *(v131 - 27);
          v136 = WebCore::SelectionGeometry::rect(v130);
          v137 = HIDWORD(v136);
          v25 = v135 == 0;
          v64 = v177;
          if (!v25)
            LODWORD(v137) = v136;
          v138 = (v134 - v137);
          v139 = *(v131 - 27);
          WebCore::SelectionGeometry::rect(v130);
          v140 = HIDWORD(v7);
          if (v139)
            LODWORD(v140) = v7;
          if ((int)v138 > (int)v140)
            WebCore::SelectionGeometry::setLogicalWidth(v130, v138);
        }
LABEL_206:
        ++v127;
        v126 += 84;
      }
      while (84 * v175 != v126);
    }
    v141 = 0;
    v142 = 0;
    do
    {
      if (v142 >= HIDWORD(v193))
      {
        __break(0xC471u);
        JUMPOUT(0x196430CE4);
      }
      v143 = (WTF *)((char *)v192 + v141);
      if ((*((_BYTE *)v192 + v141 + 52) || *((_DWORD *)v143 + 12) < v64) && !*((_BYTE *)v143 + 32))
      {
        v144 = (char *)v192 + v141;
        if (*((_BYTE *)v192 + v141 + 33))
        {
          if (v144[53])
          {
            v145 = (char *)v192 + v141;
            v146 = *((unsigned __int8 *)v192 + v141 + 57);
            WebCore::SelectionGeometry::rect((WTF *)((char *)v192 + v141));
            if (v146)
              v149 = v147;
            else
              v149 = v148;
            v150 = v145[57];
            v151 = WebCore::SelectionGeometry::rect(v143);
            v152 = HIDWORD(v151);
            v25 = v150 == 0;
            v64 = v177;
            if (!v25)
              LODWORD(v152) = v151;
            WebCore::SelectionGeometry::setLogicalWidth(v143, (v149 - *((_DWORD *)v145 + 9) + v152));
            WebCore::SelectionGeometry::setLogicalLeft(v143, *((_DWORD *)v145 + 9));
          }
        }
        else if (v144[54])
        {
          v153 = *(_DWORD *)((char *)v192 + v141 + 40);
          v154 = *((unsigned __int8 *)v192 + v141 + 57);
          v155 = WebCore::SelectionGeometry::rect(v143);
          v156 = HIDWORD(v155);
          if (v154)
            LODWORD(v156) = v155;
          WebCore::SelectionGeometry::setLogicalWidth(v143, (v153 - v156));
        }
      }
      ++v142;
      v141 += 84;
    }
    while (84 * v175 != v141);
    v58 = HIDWORD(v193);
  }
  else
  {
    v64 = 0;
  }
  *(_QWORD *)a2 = v192;
  v157 = v193;
  v192 = 0;
  v193 = 0;
  *(_DWORD *)(a2 + 8) = v157;
  *(_DWORD *)(a2 + 12) = v58;
  *(_DWORD *)(a2 + 16) = v64;
  result = v190;
  if (v190)
  {
    v190 = 0;
    LODWORD(v191) = 0;
    WTF::fastFree(result, (void *)v7);
    result = v192;
    if (v192)
    {
      v192 = 0;
      LODWORD(v193) = 0;
      return (WTF *)WTF::fastFree(result, v159);
    }
  }
  return result;
}

void WebCore::RenderObject::collectSelectionGeometries(WebCore::Node **this@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  WTF *v9;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  _OWORD *v16;
  __int128 v17;
  float v18;
  __int128 v19;
  uint64_t v20;
  _BYTE *v21;
  int v22;
  uint64_t v23;
  BOOL *v24;
  int v25;
  _BOOL4 v26;
  BOOL v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unsigned int v42;
  _BOOL4 v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  unsigned int v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  unsigned int v55;
  int v57;
  char v61;
  int v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  int v76;
  unint64_t v77;
  int v78;
  int v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  BOOL v86;
  BOOL v87;
  BOOL v88;
  BOOL v89;
  BOOL v90;
  BOOL v91;
  int v93;
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  int v99;
  int v100;
  unint64_t v101;
  int v102;
  unint64_t v103;
  int v104;
  int v105;
  int v106;
  int v107;
  uint64_t v108;
  char v109;
  int v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  int v123;
  int v124;
  _BYTE v125[32];
  _BYTE v126[32];
  __int128 v127;
  int v128;
  WTF *v129;
  unsigned int v130;
  int v131;
  float v132[5];
  float v133[5];
  _BYTE v134[32];

  WebCore::RenderObject::collectSelectionGeometriesInternal(this, (uint64_t)&v129);
  v5 = v130;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  if (v5)
  {
    v6 = 0;
    v7 = 0;
    v123 = 0;
    v124 = 0;
    v8 = 84 * v5;
    while (1)
    {
      v9 = v129;
      v10 = (unint64_t)v129 + v6;
      if (*((_BYTE *)v129 + v6 + 32))
      {
        v11 = *(_OWORD *)(v10 + 16);
        *(_OWORD *)v125 = *(_OWORD *)v10;
        *(_OWORD *)&v125[16] = v11;
        if ((WebCore::FloatQuad::isEmpty((WebCore::FloatQuad *)v125) & 1) == 0)
        {
          v12 = *(unsigned int *)(a2 + 12);
          if (!(_DWORD)v12)
            goto LABEL_50;
          v13 = *(_QWORD *)a2;
          v14 = *(_OWORD *)(v10 + 16);
          *(_OWORD *)v125 = *(_OWORD *)v10;
          *(_OWORD *)&v125[16] = v14;
          if (!WebCore::FloatQuad::isEmpty((WebCore::FloatQuad *)v125))
          {
            v15 = v12 - 1;
            v16 = (_OWORD *)(v13 + 84 * v15);
            v17 = v16[1];
            *(_OWORD *)v134 = *v16;
            *(_OWORD *)&v134[16] = v17;
            WebCore::rotatedBoundingRectWithMinimumAngleOfRotation((float *)v134, 0, v133);
            v18 = v133[4];
            WebCore::rotatedBoundingRectWithMinimumAngleOfRotation((float *)v125, 0, v132);
            if (vabds_f32(v18, v132[4]) <= 0.017453
              && (float)((float)((float)(*(float *)&v134[12] - *(float *)&v125[4])
                               * (float)(*(float *)&v134[12] - *(float *)&v125[4]))
                       + (float)((float)(*(float *)&v134[8] - *(float *)v125)
                               * (float)(*(float *)&v134[8] - *(float *)v125))) <= 64.0
              && (float)((float)((float)(*(float *)&v134[20] - *(float *)&v125[28])
                               * (float)(*(float *)&v134[20] - *(float *)&v125[28]))
                       + (float)((float)(*(float *)&v134[16] - *(float *)&v125[24])
                               * (float)(*(float *)&v134[16] - *(float *)&v125[24]))) <= 64.0)
            {
              *(_OWORD *)&v134[8] = *(_OWORD *)&v125[8];
              v19 = *(_OWORD *)&v134[16];
              *v16 = *(_OWORD *)v134;
              v16[1] = v19;
              v20 = v13 + 84 * v15;
              v22 = *(unsigned __int8 *)(v20 + 80);
              v21 = (_BYTE *)(v20 + 80);
              if (v22)
                *v21 = 0;
              v23 = v13 + 84 * v15;
              v25 = *(unsigned __int8 *)(v23 + 55);
              v24 = (BOOL *)(v23 + 55);
              v26 = v24[1];
              if (v25)
              {
                v27 = 1;
              }
              else
              {
                if (!v24[1])
                  *(_BYTE *)(v13 + 84 * v15 + 33) = *((_BYTE *)v9 + v6 + 33);
                v27 = *((_BYTE *)v9 + v6 + 55) != 0;
              }
              *v24 = v27;
              v24[1] = (v26 | *((unsigned __int8 *)v9 + v6 + 56)) != 0;
              v108 = v13 + 84 * v15;
              *(_BYTE *)(v108 + 53) = (*(unsigned __int8 *)(v108 + 53) | *((unsigned __int8 *)v9 + v6 + 53)) != 0;
              *(_BYTE *)(v108 + 54) = (*(unsigned __int8 *)(v108 + 54) | *((unsigned __int8 *)v9 + v6 + 54)) != 0;
              goto LABEL_106;
            }
            goto LABEL_39;
          }
        }
      }
      else
      {
        v28 = *(_DWORD *)(v10 + 48);
        if (v28 == 1)
        {
          v29 = *(_DWORD *)(a2 + 12);
          if (v29)
          {
            v30 = *(_QWORD *)a2 + 84 * v29 - 84;
            v31 = WebCore::SelectionGeometry::rect((WebCore::SelectionGeometry *)v30);
            v33 = v32;
            v34 = WebCore::SelectionGeometry::rect((WebCore::SelectionGeometry *)v10);
            if ((int)v33 >= 1
              && SHIDWORD(v33) >= 1
              && (int)v4 >= 1
              && SHIDWORD(v4) >= 1
              && (int)v34 + (int)v4 > (int)v31
              && (int)v31 + (int)v33 > (int)v34
              && HIDWORD(v34) + HIDWORD(v4) > SHIDWORD(v31)
              && HIDWORD(v31) + HIDWORD(v33) > SHIDWORD(v34))
            {
              goto LABEL_108;
            }
LABEL_39:
            v42 = *(_DWORD *)(a2 + 12);
          }
          else
          {
LABEL_50:
            v42 = 0;
          }
          v47 = v42;
          if (v42 != *(_DWORD *)(a2 + 8))
            goto LABEL_105;
LABEL_52:
          v48 = WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v47 + 1, v10);
          v49 = *(_DWORD *)(a2 + 12);
          v50 = *(_QWORD *)a2 + 84 * v49;
          v51 = *((_OWORD *)v48 + 1);
          *(_OWORD *)v50 = *(_OWORD *)v48;
          *(_OWORD *)(v50 + 16) = v51;
          v53 = *((_OWORD *)v48 + 3);
          v52 = *((_OWORD *)v48 + 4);
          v54 = *((_OWORD *)v48 + 2);
          *(_DWORD *)(v50 + 80) = *((_DWORD *)v48 + 20);
          *(_OWORD *)(v50 + 48) = v53;
          *(_OWORD *)(v50 + 64) = v52;
          *(_OWORD *)(v50 + 32) = v54;
          *(_DWORD *)(a2 + 12) = v49 + 1;
          goto LABEL_106;
        }
        v44 = (int)v7 < 1 || SHIDWORD(v7) < 1;
        if (v28 >= v131)
        {
          if (v44)
          {
            v55 = *(_DWORD *)(a2 + 12);
            if (!v55)
              goto LABEL_138;
          }
          else
          {
            v61 = *((_BYTE *)v129 + v6 + 57);
            v62 = *(_DWORD *)((char *)v129 + v6 + 60);
            *(float *)v125 = (float)v124;
            *(float *)&v125[4] = (float)v123;
            *(float *)&v125[8] = (float)(int)v7 + (float)v124;
            *(float *)&v125[12] = (float)v123;
            *(float *)&v125[16] = *(float *)&v125[8];
            *(float *)&v125[20] = (float)v123 + (float)SHIDWORD(v7);
            *(float *)&v125[24] = (float)v124;
            *(float *)&v125[28] = *(float *)&v125[20];
            *(_WORD *)v126 = 0;
            memset(&v126[4], 0, 21);
            v126[25] = v61;
            v126[26] = 0;
            *(_DWORD *)&v126[28] = v62;
            LOBYTE(v127) = 0;
            LOBYTE(v128) = 0;
            v63 = *(unsigned int *)(a2 + 12);
            if ((_DWORD)v63 == *(_DWORD *)(a2 + 8))
            {
              v64 = WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v63 + 1, (unint64_t)v125);
              LODWORD(v63) = *(_DWORD *)(a2 + 12);
              v65 = *(_QWORD *)a2 + 84 * v63;
              v66 = *((_OWORD *)v64 + 1);
              *(_OWORD *)v65 = *(_OWORD *)v64;
              *(_OWORD *)(v65 + 16) = v66;
              v68 = *((_OWORD *)v64 + 3);
              v67 = *((_OWORD *)v64 + 4);
              v69 = *((_OWORD *)v64 + 2);
              *(_DWORD *)(v65 + 80) = *((_DWORD *)v64 + 20);
              *(_OWORD *)(v65 + 48) = v68;
              *(_OWORD *)(v65 + 64) = v67;
              *(_OWORD *)(v65 + 32) = v69;
            }
            else
            {
              v70 = *(_QWORD *)a2 + 84 * v63;
              v71 = *(_OWORD *)v125;
              *(_OWORD *)(v70 + 16) = *(_OWORD *)&v125[16];
              v73 = *(_OWORD *)&v126[16];
              v72 = v127;
              v74 = *(_OWORD *)v126;
              *(_DWORD *)(v70 + 80) = v128;
              *(_OWORD *)(v70 + 48) = v73;
              *(_OWORD *)(v70 + 64) = v72;
              *(_OWORD *)(v70 + 32) = v74;
              *(_OWORD *)v70 = v71;
            }
            v7 = 0;
            v123 = 0;
            v124 = 0;
            v55 = v63 + 1;
            *(_DWORD *)(a2 + 12) = v55;
            if (!v55)
            {
LABEL_138:
              __break(0xC471u);
              return;
            }
          }
          v75 = *(_QWORD *)a2 + 84 * v55;
          v30 = v75 - 84;
          v76 = *(unsigned __int8 *)(v75 - 27);
          v77 = WebCore::SelectionGeometry::rect((WebCore::SelectionGeometry *)(v75 - 84));
          if (v76)
            v78 = HIDWORD(v77);
          else
            v78 = v77;
          v79 = *((unsigned __int8 *)v9 + v6 + 57);
          v80 = WebCore::SelectionGeometry::rect((WebCore::SelectionGeometry *)v10);
          v81 = HIDWORD(v80);
          if (!v79)
            LODWORD(v81) = v80;
          if (v78 == (_DWORD)v81)
          {
            v82 = WebCore::SelectionGeometry::rect((WebCore::SelectionGeometry *)v30);
            v84 = v83;
            v85 = WebCore::SelectionGeometry::rect((WebCore::SelectionGeometry *)v10);
            v86 = (int)v84 < 1 || SHIDWORD(v84) < 1;
            v87 = v86 || (int)v4 < 1;
            v88 = v87 || SHIDWORD(v4) < 1;
            v89 = v88 || (int)v85 + (int)v4 <= (int)v82;
            v90 = v89 || (int)v82 + (int)v84 <= (int)v85;
            v91 = v90 || HIDWORD(v85) + HIDWORD(v4) <= SHIDWORD(v82);
            if (!v91 && HIDWORD(v82) + HIDWORD(v84) > SHIDWORD(v85))
            {
LABEL_108:
              WebCore::coalesceSelectionGeometries((WebCore *)v125, (const WebCore::SelectionGeometry *)v10, (const WebCore::SelectionGeometry *)v30);
              *(_OWORD *)(v30 + 32) = *(_OWORD *)v126;
              *(_OWORD *)(v30 + 48) = *(_OWORD *)&v126[16];
              *(_OWORD *)(v30 + 64) = v127;
              *(_DWORD *)(v30 + 80) = v128;
              *(_OWORD *)v30 = *(_OWORD *)v125;
              *(_OWORD *)(v30 + 16) = *(_OWORD *)&v125[16];
              goto LABEL_106;
            }
          }
          v47 = *(unsigned int *)(a2 + 12);
          if ((_DWORD)v47 != *(_DWORD *)(a2 + 8))
          {
LABEL_105:
            v93 = v47 + 1;
            v94 = *(_QWORD *)a2 + 84 * v47;
            v95 = *(_OWORD *)(v10 + 16);
            *(_OWORD *)v94 = *(_OWORD *)v10;
            *(_OWORD *)(v94 + 16) = v95;
            v97 = *(_OWORD *)(v10 + 48);
            v96 = *(_OWORD *)(v10 + 64);
            v98 = *(_OWORD *)(v10 + 32);
            *(_DWORD *)(v94 + 80) = *(_DWORD *)(v10 + 80);
            *(_OWORD *)(v94 + 48) = v97;
            *(_OWORD *)(v94 + 64) = v96;
            *(_OWORD *)(v94 + 32) = v98;
            *(_DWORD *)(a2 + 12) = v93;
            goto LABEL_106;
          }
          goto LABEL_52;
        }
        v45 = WebCore::SelectionGeometry::rect((WTF *)((char *)v129 + v6));
        if (v44)
        {
          v46 = HIDWORD(v45);
          v7 = (unint64_t)v4;
        }
        else
        {
          if ((int)v4 < 1 || SHIDWORD(v4) <= 0)
          {
            v57 = v124 + v7;
          }
          else
          {
            v57 = v124 + v7;
            if (v124 < (int)v45 + (int)v4
              && v57 > (int)v45
              && v123 < HIDWORD(v45) + HIDWORD(v4)
              && v123 + HIDWORD(v7) > SHIDWORD(v45))
            {
LABEL_114:
              v103 = WebCore::SelectionGeometry::rect((WebCore::SelectionGeometry *)v10);
              if ((int)v4 >= 1 && SHIDWORD(v4) >= 1)
              {
                v104 = v124 + v7;
                if ((int)v103 >= v124)
                  v105 = v124;
                else
                  v105 = v103;
                if (SHIDWORD(v103) >= v123)
                  v106 = v123;
                else
                  v106 = HIDWORD(v103);
                if (v104 <= (int)v103 + (int)v4)
                  v104 = v103 + (_DWORD)v4;
                v107 = HIDWORD(v103) + HIDWORD(v4);
                if (v123 + HIDWORD(v7) > HIDWORD(v103) + HIDWORD(v4))
                  v107 = v123 + HIDWORD(v7);
                v7 = (v104 - v105) | ((unint64_t)(v107 - v106) << 32);
                v123 = v106;
                v124 = v105;
              }
              goto LABEL_106;
            }
          }
          if (v57 == WebCore::SelectionGeometry::rect((WebCore::SelectionGeometry *)v10))
            goto LABEL_114;
          if (v123 + HIDWORD(v7) == WebCore::SelectionGeometry::rect((WebCore::SelectionGeometry *)v10) >> 32)
            goto LABEL_114;
          v99 = WebCore::SelectionGeometry::rect((WebCore::SelectionGeometry *)v10);
          if (v124 == v100 + v99)
            goto LABEL_114;
          v101 = WebCore::SelectionGeometry::rect((WebCore::SelectionGeometry *)v10);
          if (v123 == v102 + HIDWORD(v101))
            goto LABEL_114;
          v109 = *((_BYTE *)v9 + v6 + 57);
          v110 = *(_DWORD *)((char *)v9 + v6 + 60);
          *(float *)v125 = (float)v124;
          *(float *)&v125[4] = (float)v123;
          *(float *)&v125[8] = (float)(int)v7 + (float)v124;
          *(float *)&v125[12] = (float)v123;
          *(float *)&v125[16] = *(float *)&v125[8];
          *(float *)&v125[20] = (float)v123 + (float)SHIDWORD(v7);
          *(float *)&v125[24] = (float)v124;
          *(float *)&v125[28] = *(float *)&v125[20];
          *(_WORD *)v126 = 0;
          *(_QWORD *)&v126[4] = 0;
          *(_QWORD *)&v126[12] = 0;
          *(_QWORD *)&v126[17] = 0;
          v126[25] = v109;
          v126[26] = 0;
          *(_DWORD *)&v126[28] = v110;
          LOBYTE(v127) = 0;
          LOBYTE(v128) = 0;
          v111 = *(unsigned int *)(a2 + 12);
          if ((_DWORD)v111 == *(_DWORD *)(a2 + 8))
          {
            v112 = WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v111 + 1, (unint64_t)v125);
            LODWORD(v111) = *(_DWORD *)(a2 + 12);
            v113 = *(_QWORD *)a2 + 84 * v111;
            v114 = *((_OWORD *)v112 + 1);
            *(_OWORD *)v113 = *(_OWORD *)v112;
            *(_OWORD *)(v113 + 16) = v114;
            v116 = *((_OWORD *)v112 + 3);
            v115 = *((_OWORD *)v112 + 4);
            v117 = *((_OWORD *)v112 + 2);
            *(_DWORD *)(v113 + 80) = *((_DWORD *)v112 + 20);
            *(_OWORD *)(v113 + 48) = v116;
            *(_OWORD *)(v113 + 64) = v115;
            *(_OWORD *)(v113 + 32) = v117;
          }
          else
          {
            v118 = *(_QWORD *)a2 + 84 * v111;
            v119 = *(_OWORD *)v125;
            *(_OWORD *)(v118 + 16) = *(_OWORD *)&v125[16];
            v121 = *(_OWORD *)&v126[16];
            v120 = v127;
            v122 = *(_OWORD *)v126;
            *(_DWORD *)(v118 + 80) = v128;
            *(_OWORD *)(v118 + 48) = v121;
            *(_OWORD *)(v118 + 64) = v120;
            *(_OWORD *)(v118 + 32) = v122;
            *(_OWORD *)v118 = v119;
          }
          *(_DWORD *)(a2 + 12) = v111 + 1;
          v45 = WebCore::SelectionGeometry::rect((WebCore::SelectionGeometry *)v10);
          v7 = (unint64_t)v4;
          v46 = HIDWORD(v45);
        }
        v123 = v46;
        v124 = v45;
      }
LABEL_106:
      v6 += 84;
      if (v8 == v6)
        goto LABEL_136;
    }
  }
  v9 = v129;
  if (v129)
LABEL_136:
    WTF::fastFree(v9, v4);
}

unint64_t WebCore::coalesceSelectionGeometries(WebCore *this, const WebCore::SelectionGeometry *a2, const WebCore::SelectionGeometry *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t result;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  float v15;
  float v16;
  char v17;
  int v18;
  int v19;
  int v20;
  const WebCore::SelectionGeometry *v21;

  v6 = WebCore::SelectionGeometry::rect(a3);
  v8 = v7;
  result = WebCore::SelectionGeometry::rect(a2);
  if ((int)v10 < 1 || SHIDWORD(v10) < 1)
  {
    result = v6;
    v10 = v8;
  }
  else if ((int)v8 >= 1 && SHIDWORD(v8) >= 1)
  {
    if ((int)result >= (int)v6)
      v11 = v6;
    else
      v11 = result;
    if (SHIDWORD(result) >= SHIDWORD(v6))
      v12 = HIDWORD(v6);
    else
      v12 = HIDWORD(result);
    v13 = v6 + v8;
    if ((int)v6 + (int)v8 <= (int)result + (int)v10)
      v13 = result + v10;
    v14 = HIDWORD(result) + HIDWORD(v10);
    if (HIDWORD(v6) + HIDWORD(v8) > HIDWORD(result) + HIDWORD(v10))
      v14 = HIDWORD(v6) + HIDWORD(v8);
    result = v11 | (v12 << 32);
    v10 = (v13 - v11) | ((unint64_t)(v14 - v12) << 32);
  }
  v15 = (float)(int)result + (float)(int)v10;
  v16 = (float)SHIDWORD(result) + (float)SHIDWORD(v10);
  v17 = *((_BYTE *)a2 + 57);
  v18 = *((_DWORD *)a2 + 15);
  *(float *)this = (float)(int)result;
  *((float *)this + 1) = (float)SHIDWORD(result);
  *((float *)this + 2) = v15;
  *((float *)this + 3) = (float)SHIDWORD(result);
  *((float *)this + 4) = v15;
  *((float *)this + 5) = v16;
  *((float *)this + 6) = (float)(int)result;
  *((float *)this + 7) = v16;
  *((_BYTE *)this + 32) = 0;
  *(_QWORD *)((char *)this + 44) = 0;
  *(_QWORD *)((char *)this + 36) = 0;
  *((_DWORD *)this + 13) = 0;
  *((_BYTE *)this + 57) = v17;
  *((_BYTE *)this + 58) = 0;
  *((_DWORD *)this + 15) = v18;
  *((_BYTE *)this + 64) = 0;
  *((_BYTE *)this + 80) = 0;
  v19 = *((unsigned __int8 *)a2 + 55);
  v20 = *((unsigned __int8 *)a2 + 56);
  if (v19 | v20)
    v21 = a2;
  else
    v21 = a3;
  *((_BYTE *)this + 33) = *((_BYTE *)v21 + 33);
  *((_BYTE *)this + 55) = *((_BYTE *)a3 + 55) | v19;
  *((_BYTE *)this + 56) = (*((_BYTE *)a3 + 56) | v20) != 0;
  *((_BYTE *)this + 53) = (*((unsigned __int8 *)a3 + 53) | *((unsigned __int8 *)a2 + 53)) != 0;
  *((_BYTE *)this + 54) = (*((unsigned __int8 *)a3 + 54) | *((unsigned __int8 *)a2 + 54)) != 0;
  return result;
}

uint64_t WebCore::RenderObject::description@<X0>(WebCore::RenderObject *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  int8x16_t *v4;
  uint64_t v5;
  int v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t result;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  int v16;
  char v17;
  int8x16_t *v18;
  int v19;
  char v20;

  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 1;
  v4 = (int8x16_t *)(*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)this + 104))(this);
  if (v5)
  {
    v6 = v5 - 1;
    v18 = v4;
    if ((unint64_t)(v5 - 1) >> 31)
    {
      result = 124;
      __break(0xC471u);
      return result;
    }
  }
  else
  {
    v6 = 0;
    v18 = v4;
  }
  v19 = v6;
  LOBYTE(v13) = 32;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>>((WTF::StringBuilder *)&v14, &v18, (char *)&v13);
  if ((*((_BYTE *)this + 45) & 1) == 0)
  {
    v8 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    if (v8)
    {
      (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v8 + 296))(&v13);
      v20 = 32;
      v18 = (int8x16_t *)v13;
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>((WTF::StringBuilder *)&v14, &v20, (uint64_t *)&v18);
      v9 = v13;
      v13 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v7);
        else
          *(_DWORD *)v9 -= 2;
      }
    }
  }
  v10 = v14;
  if (v14
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v14),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v14),
        (v10 = v14) != 0))
  {
    *(_DWORD *)v10 += 2;
  }
  *a2 = v10;
  v11 = v15;
  v15 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v7);
    else
      *(_DWORD *)v11 -= 2;
  }
  result = (uint64_t)v14;
  v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

BOOL WebCore::RenderObject::isSkippedContent(WebCore::RenderObject *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 4);
  return v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0 && (*(_BYTE *)(*(_QWORD *)(v2 + 104) + 239) & 0x18) != 0;
}

uint64_t WebCore::RenderProgress::operator new(uint64_t this)
{
  if (this == 328)
    return bmalloc::api::isoAllocate();
  __break(0xC471u);
  return this;
}

uint64_t WebCore::RenderProgress::RenderProgress(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;

  v4 = WebCore::RenderBlockFlow::RenderBlockFlow(a1, 28, a2, a3, 0);
  *(_QWORD *)v4 = off_1E342E5C8;
  *(_OWORD *)(v4 + 248) = xmmword_1969FCDA0;
  *(_BYTE *)(v4 + 264) = 0;
  WebCore::Timer::Timer<WebCore::RenderProgress,WebCore::RenderProgress>(v4 + 272, a1);
  return a1;
}

void WebCore::RenderProgress::animationTimerFired(WebCore::RenderProgress *this)
{
  void (**v2)(WebCore::RenderThemeIOS *__hidden);
  WTF::MonotonicTime *v3;
  double v4;
  double v5;
  uint64_t v6;
  _BYTE v7[20];
  __int128 v8;
  char v9;

  {
    v2 = (void (**)(WebCore::RenderThemeIOS *__hidden))WebCore::RenderTheme::singleton(void)::theme;
  }
  else
  {
    v6 = WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
    *(_OWORD *)(v6 + 40) = 0u;
    *(_OWORD *)(v6 + 24) = 0u;
    v2 = &off_1E335BC30;
    *(_QWORD *)v6 = &off_1E335BC30;
  }
  v4 = ((double (*)(uint64_t *, WebCore::RenderProgress *))v2[41])(&WebCore::RenderTheme::singleton(void)::theme, this);
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40)
                                                                                         + 8)
                                                                             + 1944)
                                                                 + 24)
                                                     + 8)
                                         + 40)
                             + 8)
                 + 3382))
  {
    LOBYTE(v8) = 0;
    v9 = 0;
    v7[0] = 0;
    v7[16] = 0;
    v3 = (WTF::MonotonicTime *)WebCore::RenderObject::issueRepaint((uint64_t)this, &v8, 0, 0, (uint64_t)v7);
  }
  if ((*((_QWORD *)this + 38) & 0xFFFFFFFFFFFFLL) == 0
    || *(double *)((*((_QWORD *)this + 38) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
  {
    if (*((_BYTE *)this + 264))
    {
      *((_QWORD *)this + 37) = 0;
      WTF::MonotonicTime::now(v3);
      WebCore::TimerBase::setNextFireTime((uint64_t)this + 272, v4 + v5);
    }
  }
}

void WebCore::RenderProgress::~RenderProgress(WebCore::RenderProgress *this)
{
  WebCore::TimerBase *v2;
  uint64_t v3;
  void *v4;

  v2 = (WebCore::RenderProgress *)((char *)this + 272);
  *((_QWORD *)this + 34) = off_1E31F7378;
  v3 = *((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::TimerBase::~TimerBase(v2);
  WebCore::RenderBlockFlow::~RenderBlockFlow(this, v4);
}

double WebCore::RenderProgress::operator delete(WebCore::RenderProgress *a1)
{
  uint64_t v1;
  void *v2;
  double result;

  WebCore::RenderProgress::~RenderProgress(a1);
  if (*(_DWORD *)(v1 + 16))
  {
    *(_QWORD *)(v1 + 320) = 0;
    result = 0.0;
    *(_OWORD *)(v1 + 288) = 0u;
    *(_OWORD *)(v1 + 304) = 0u;
    *(_OWORD *)(v1 + 256) = 0u;
    *(_OWORD *)(v1 + 272) = 0u;
    *(_OWORD *)(v1 + 224) = 0u;
    *(_OWORD *)(v1 + 240) = 0u;
    *(_OWORD *)(v1 + 192) = 0u;
    *(_OWORD *)(v1 + 208) = 0u;
    *(_OWORD *)(v1 + 160) = 0u;
    *(_OWORD *)(v1 + 176) = 0u;
    *(_OWORD *)(v1 + 128) = 0u;
    *(_OWORD *)(v1 + 144) = 0u;
    *(_OWORD *)(v1 + 96) = 0u;
    *(_OWORD *)(v1 + 112) = 0u;
    *(_OWORD *)(v1 + 64) = 0u;
    *(_OWORD *)(v1 + 80) = 0u;
    *(_OWORD *)(v1 + 32) = 0u;
    *(_OWORD *)(v1 + 48) = 0u;
    *(_OWORD *)v1 = 0u;
    *(_OWORD *)(v1 + 16) = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate((bmalloc::api *)v1, v2);
  }
  return result;
}

void WebCore::RenderProgress::updateFromElement(WebCore::RenderProgress *this)
{
  uint64_t v2;
  __int16 v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  double v7;
  double v8;
  uint64_t v9;
  _BYTE v10[20];
  __int128 v11;
  char v12;

  if ((*((_BYTE *)this + 45) & 1) != 0)
  {
LABEL_11:
    v2 = 0;
    goto LABEL_12;
  }
  v2 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if (!v2)
    goto LABEL_12;
  v3 = *(_WORD *)(v2 + 28);
  if ((v3 & 8) == 0)
    goto LABEL_19;
  if ((v3 & 0x10) == 0 || *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::progressTag + 24))
  {
    v4 = **(_QWORD **)(v2 + 40);
    if (v4)
      v5 = (*(_WORD *)(v4 + 28) & 0x80) == 0;
    else
      v5 = 1;
    if (v5)
      goto LABEL_11;
    v6 = *(_QWORD *)(v4 + 200);
    if (!v6)
      goto LABEL_11;
    v2 = *(_QWORD *)(v6 + 8);
    if (v2)
    {
      if ((*(_WORD *)(v2 + 28) & 0x10) == 0
        || *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::progressTag + 24))
      {
LABEL_19:
        __break(0xC471u);
        JUMPOUT(0x196431C14);
      }
    }
  }
LABEL_12:
  v7 = *((double *)this + 31);
  WebCore::HTMLProgressElement::position((WebCore::HTMLProgressElement *)v2);
  if (v7 != v8)
  {
    WebCore::HTMLProgressElement::position((WebCore::HTMLProgressElement *)v2);
    *((_QWORD *)this + 31) = v9;
    WebCore::RenderProgress::updateAnimationState(this);
    if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40)
                                                                                           + 8)
                                                                               + 1944)
                                                                   + 24)
                                                       + 8)
                                           + 40)
                               + 8)
                   + 3382))
    {
      LOBYTE(v11) = 0;
      v12 = 0;
      v10[0] = 0;
      v10[16] = 0;
      WebCore::RenderObject::issueRepaint((uint64_t)this, &v11, 0, 0, (uint64_t)v10);
    }
  }
}

void WebCore::RenderProgress::updateAnimationState(WebCore::RenderProgress *this)
{
  void (**v2)(WebCore::RenderThemeIOS *__hidden);
  WTF::MonotonicTime *v3;
  double v4;
  double v5;
  int v6;
  double v7;
  WTF::MonotonicTime *v8;
  uint64_t v9;
  double v10;
  uint64_t v11;

  {
    v2 = (void (**)(WebCore::RenderThemeIOS *__hidden))WebCore::RenderTheme::singleton(void)::theme;
  }
  else
  {
    v11 = WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
    *(_OWORD *)(v11 + 40) = 0u;
    *(_OWORD *)(v11 + 24) = 0u;
    v2 = &off_1E335BC30;
    *(_QWORD *)v11 = &off_1E335BC30;
  }
  v4 = ((double (*)(uint64_t *, WebCore::RenderProgress *))v2[41])(&WebCore::RenderTheme::singleton(void)::theme, this);
  v5 = v4;
  if ((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 148) & 0x1FC000) != 0 && v4 > 0.0)
  {
    v7 = *((double *)this + 31);
    v6 = v7 == -1.0;
    if (v7 == -2.0)
      v6 = 1;
  }
  else
  {
    v6 = 0;
  }
  if (*((unsigned __int8 *)this + 264) != v6)
  {
    *((_BYTE *)this + 264) = v6;
    if (v6)
    {
      v8 = (WTF::MonotonicTime *)WTF::MonotonicTime::now(v3);
      *((_QWORD *)this + 32) = v9;
      *((_QWORD *)this + 37) = 0;
      WTF::MonotonicTime::now(v8);
      WebCore::TimerBase::setNextFireTime((uint64_t)this + 272, v5 + v10);
    }
    else if ((*((_QWORD *)this + 38) & 0xFFFFFFFFFFFFLL) != 0)
    {
      WebCore::TimerBase::stopSlowCase((WebCore::RenderProgress *)((char *)this + 272));
    }
  }
}

uint64_t WebCore::RenderProgress::computeLogicalHeight@<X0>(unint64_t a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, int *a4@<X8>)
{
  unint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t *v10;
  unint64_t v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  BOOL v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t result;
  unint64_t v22;
  unint64_t v23;
  double v24;
  int v25;
  unint64_t v26;
  int v27;
  int v28;
  _QWORD v29[2];

  WebCore::RenderBox::computeLogicalHeight(a1, a2, a3, (uint64_t)a4);
  v6 = *(_QWORD *)(a1 + 152);
  v7 = HIDWORD(*(_QWORD *)(a1 + 160));
  if ((*(_BYTE *)(a1 + 21) & 0x10) != 0)
    v8 = *a4;
  else
    v8 = *(_QWORD *)(a1 + 160);
  if ((*(_BYTE *)(a1 + 21) & 0x10) != 0)
    v9 = HIDWORD(*(_QWORD *)(a1 + 160));
  else
    v9 = *a4;
  v10 = &WebCore::RenderTheme::singleton(void)::theme;
  {
    v27 = v8;
    v28 = v9;
    v26 = *(_QWORD *)(a1 + 152);
    v10 = (uint64_t *)WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
    v8 = v27;
    v9 = v28;
    v6 = v26;
    *(_OWORD *)(v10 + 5) = 0u;
    *(_OWORD *)(v10 + 3) = 0u;
    *v10 = (uint64_t)&off_1E335BC30;
  }
  v11 = HIDWORD(v6);
  v12 = (int)v6 / 64;
  v13 = v6 - (v7 & 0xFFFFFFC0);
  v14 = (int)v11 / 64;
  v15 = v11 - (v7 & 0xFFFFFFC0);
  v16 = __OFADD__(v13, v8);
  v17 = v13 + v8;
  if (v16)
    v17 = (v13 >> 31) + 0x7FFFFFFF;
  v16 = __OFADD__(v15, v9);
  v18 = v15 + v9;
  if (v16)
    v18 = (v15 >> 31) + 0x7FFFFFFF;
  v19 = v15 + 32;
  v20 = v13 + 32;
  v29[0] = (v12 + (v20 >> 6)) | ((unint64_t)(v14 + (v19 >> 6)) << 32);
  v29[1] = (v17 / 64 - (v20 >> 6) + ((int)(v17 - (v12 & 0xFFFFFFC0) + 32) >> 6)) | ((unint64_t)(v18 / 64 - (v19 >> 6) + ((int)(v18 - (v17 & 0xFFFFFFC0) + 32) >> 6)) << 32);
  result = (*(uint64_t (**)(uint64_t *, unint64_t, _QWORD *))(*v10 + 344))(v10, a1, v29);
  v23 = HIDWORD(v22);
  if ((*(_BYTE *)(a1 + 21) & 0x10) != 0)
    LODWORD(v23) = v22;
  v24 = (float)(int)v23 * 64.0;
  if (v24 >= 2147483650.0)
  {
    v25 = 0x7FFFFFFF;
  }
  else if (v24 <= -2147483650.0)
  {
    v25 = 0x80000000;
  }
  else
  {
    v25 = (int)v24;
  }
  *a4 = v25;
  return result;
}

void WebCore::RenderQuote::~RenderQuote(WebCore::RenderQuote *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
}

{
  WTF::StringImpl *v3;
  void *v4;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
  if (*((_DWORD *)this + 4))
  {
    *((_OWORD *)this + 10) = 0u;
    *((_OWORD *)this + 11) = 0u;
    *((_OWORD *)this + 8) = 0u;
    *((_OWORD *)this + 9) = 0u;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 7) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(this, v4);
  }
}

uint64_t WebCore::RenderQuote::insertedIntoTree(WebCore::RenderQuote *this, void *a2, uint64_t a3, WebCore::RenderLayer *a4, BOOL a5)
{
  uint64_t result;

  result = WebCore::RenderElement::insertedIntoTree((uint64_t)this, a2, a3, a4, a5);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1944)
           + 408) = 1;
  return result;
}

_DWORD *WebCore::RenderQuote::willBeRemovedFromTree(_DWORD *this, void *a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1944)
           + 408) = 1;
  return WebCore::RenderElement::willBeRemovedFromTree(this, a2);
}

uint64_t WebCore::RenderQuote::styleDidChange(uint64_t a1, WTF::StringImpl *a2, const WebCore::RenderStyle *a3)
{
  unsigned int v3;
  uint64_t result;

  v3 = a2;
  result = WebCore::RenderInline::styleDidChange(a1, a2, a3);
  if (v3 >= 8)
  {
    *(_BYTE *)(a1 + 184) = 1;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8) + 1944)
             + 408) = 1;
  }
  return result;
}

void WebCore::RenderQuote::updateTextRenderer(WebCore::RenderQuote *this, WebCore::RenderTreeBuilder *a2, const WTF::StringImpl *a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  const WTF::StringImpl **v13;
  const WTF::StringImpl *v14;
  WTF::StringImpl **v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF *v34;
  unint64_t i;
  uint64_t v36;
  uint64_t v37;
  int v38;
  char *v40;
  void *v41;
  char *v42;
  unsigned __int16 *v43;
  char *v44;
  WTF::StringImpl *v45;
  _QWORD __key[3];

  v5 = *((unsigned int *)this + 43);
  if ((v5 & 0x80000000) != 0)
    goto LABEL_13;
  v6 = *((unsigned __int8 *)this + 168);
  if ((v6 - 2) < 2)
    goto LABEL_13;
  if (*((_BYTE *)this + 168))
  {
    if (v6 != 1)
      goto LABEL_13;
    v7 = *(_QWORD *)(*((_QWORD *)this + 13) + 312);
    if (v7)
    {
      v8 = *(_DWORD *)(v7 + 4);
      if (v8)
      {
        if (v8 <= v5)
          v9 = v7 + 16 * (v8 - 1);
        else
          v9 = v7 + 16 * v5;
        v13 = (const WTF::StringImpl **)(v9 + 16);
        goto LABEL_14;
      }
LABEL_13:
      v13 = (const WTF::StringImpl **)MEMORY[0x1E0CBF738];
LABEL_14:
      v14 = *v13;
      goto LABEL_15;
    }
    v29 = 0;
  }
  else
  {
    v10 = *(_QWORD *)(*((_QWORD *)this + 13) + 312);
    if (v10)
    {
      v11 = *(_DWORD *)(v10 + 4);
      if (v11)
      {
        if (v11 <= v5)
          v12 = v10 + 16 * (v11 - 1);
        else
          v12 = v10 + 16 * v5;
        v13 = (const WTF::StringImpl **)(v12 + 8);
        goto LABEL_14;
      }
      goto LABEL_13;
    }
    v29 = 1;
  }
  v30 = *((_QWORD *)this + 14);
  v31 = *(_QWORD *)(v30 + 176);
  if (v31)
  {
    v32 = *(unsigned int *)(v31 + 4);
    if ((_DWORD)v32)
    {
      v33 = (v32 + 1);
      if ((_DWORD)v32 == -1)
      {
        v33 = 0;
        v34 = 0;
      }
      else
      {
        v34 = (WTF *)WTF::fastMalloc((WTF *)(v32 + 1));
      }
      for (i = 0; i != v32; ++i)
      {
        v36 = *(_QWORD *)(v30 + 176);
        if (v36)
        {
          if (i >= *(unsigned int *)(v36 + 4))
          {
            LODWORD(v36) = 0;
          }
          else
          {
            v37 = *(_QWORD *)(v36 + 8);
            if ((*(_BYTE *)(v36 + 16) & 4) != 0)
              LODWORD(v36) = *(unsigned __int8 *)(v37 + i);
            else
              LODWORD(v36) = *(unsigned __int16 *)(v37 + 2 * i);
          }
        }
        v38 = v36 | (32 * ((v36 - 65) < 0x1A));
        if (v38 != 45 && (v38 - 97) > 0x19)
        {
          if (v34)
            WTF::fastFree(v34, a2);
          goto LABEL_78;
        }
        if (v33 == i)
          goto LABEL_91;
        *((_BYTE *)v34 + i) = v38;
      }
      if ((_DWORD)v32 == -1)
      {
LABEL_91:
        __break(0xC471u);
        JUMPOUT(0x1964324F4);
      }
      *((_BYTE *)v34 + v32) = 0;
      __key[1] = 0;
      __key[0] = v34;
      __key[2] = 0;
      v40 = (char *)bsearch(__key, &WebCore::quotesForLanguage(WTF::String const&)::quoteTable, 0x94uLL, 0x18uLL, (int (__cdecl *)(const void *, const void *))WebCore::quoteTableLanguageComparisonFunction);
      WTF::fastFree(v34, v41);
      if (v40)
      {
        v42 = v40 + 12;
        if (*((_DWORD *)this + 43))
        {
          v42 = v40 + 16;
          v43 = (unsigned __int16 *)(v40 + 14);
        }
        else
        {
          v43 = (unsigned __int16 *)(v40 + 10);
        }
        if (!v29)
          v43 = (unsigned __int16 *)v42;
        v14 = (const WTF::StringImpl *)WebCore::stringForQuoteCharacter(*v43);
        if (v14)
          goto LABEL_16;
        goto LABEL_17;
      }
    }
  }
LABEL_78:
  if (*((_DWORD *)this + 43))
  {
    if (_MergedGlobals_251 == 1)
    {
      v14 = (const WTF::StringImpl *)qword_1ECE84230;
      goto LABEL_15;
    }
    v14 = (const WTF::StringImpl *)WebCore::stringForQuoteCharacter(39);
    v44 = &_MergedGlobals_251;
    qword_1ECE84230 = (uint64_t)v14;
  }
  else
  {
    if (byte_1ECE84229 == 1)
    {
      v14 = (const WTF::StringImpl *)qword_1ECE84238;
      goto LABEL_15;
    }
    v14 = (const WTF::StringImpl *)WebCore::stringForQuoteCharacter(34);
    v44 = &byte_1ECE84229;
    qword_1ECE84238 = (uint64_t)v14;
  }
  *v44 = 1;
LABEL_15:
  if (v14)
LABEL_16:
    *(_DWORD *)v14 += 2;
LABEL_17:
  v15 = (WTF::StringImpl **)((char *)this + 176);
  if ((WTF::equal(*((WTF **)this + 22), v14, a3) & 1) == 0)
  {
    if (v14)
      *(_DWORD *)v14 += 2;
    v17 = *v15;
    *v15 = v14;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v16);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = *(unsigned int *)((char *)this + 71);
    if (v18 | ((unint64_t)*((unsigned __int8 *)this + 75) << 32)
      && (v19 = *(_QWORD *)((v18 | ((unint64_t)*((unsigned __int8 *)this + 75) << 32)) + 8)) != 0
      && ((*(_BYTE *)(v19 + 46) == 46) & (*(unsigned __int8 *)(v19 + 45) >> 1)) == 1)
    {
      v20 = *v15;
      if (*v15)
        *(_DWORD *)v20 += 2;
      v21 = *(WTF::StringImpl **)(v19 + 136);
      *(_QWORD *)(v19 + 136) = v20;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, v16);
        else
          *(_DWORD *)v21 -= 2;
      }
      WebCore::RenderText::setText((const WTF::StringImpl **)v19, (WTF **)this + 22, 0);
      v22 = *(_WORD *)(v19 + 118);
      if ((v22 & 0x20) == 0)
      {
        WebCore::RenderTextLineBoxes::dirtyAll((_QWORD **)(v19 + 64));
        v22 = *(_WORD *)(v19 + 118);
      }
      *(_WORD *)(v19 + 118) = v22 & 0xFFDF;
    }
    else
    {
      v23 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8);
      v24 = bmalloc::api::isoAllocate();
      v25 = WebCore::RenderText::RenderText(v24, 46, v23, (uint64_t *)this + 22);
      *(_QWORD *)v25 = off_1E3436F38;
      *(_DWORD *)(v25 + 120) = 0;
      v26 = *((_QWORD *)this + 22);
      if (v26)
        LODWORD(v26) = *(_DWORD *)(v26 + 4);
      *(_DWORD *)(v25 + 124) = v26;
      *(_QWORD *)(v25 + 128) = 0;
      v27 = *v15;
      if (*v15)
        *(_DWORD *)v27 += 2;
      *(_QWORD *)(v25 + 136) = v27;
      *(_QWORD *)(v25 + 144) = 0;
      v45 = (WTF::StringImpl *)v25;
      v28 = WebCore::RenderTreeBuilder::attach((uint64_t)a2, this, (unint64_t *)&v45);
      v16 = v45;
      v45 = 0;
      if (v16)
        WebCore::RenderObjectDeleter::operator()(v28, (uint64_t)v16);
    }
  }
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v16);
    else
      *(_DWORD *)v14 -= 2;
  }
}

uint64_t WebCore::stringForQuoteCharacter(int a1)
{
  uint64_t v1;
  uint64_t v2;
  __int16 *v3;
  uint64_t result;
  uint64_t v5;

  if ((unsigned __int16)WebCore::stringForQuoteCharacter(char16_t)::strings[0] == a1)
  {
    v1 = 0;
    return *(_QWORD *)&WebCore::stringForQuoteCharacter(char16_t)::strings[8 * v1 + 4];
  }
  if (WebCore::stringForQuoteCharacter(char16_t)::strings[0])
  {
    if ((unsigned __int16)word_1EE3381D8 == a1)
    {
      v1 = 1;
      return *(_QWORD *)&WebCore::stringForQuoteCharacter(char16_t)::strings[8 * v1 + 4];
    }
    if (word_1EE3381D8)
    {
      if ((unsigned __int16)word_1EE3381E8 == a1)
      {
        v1 = 2;
        return *(_QWORD *)&WebCore::stringForQuoteCharacter(char16_t)::strings[8 * v1 + 4];
      }
      if (word_1EE3381E8)
      {
        if ((unsigned __int16)word_1EE3381F8 == a1)
        {
          v1 = 3;
          return *(_QWORD *)&WebCore::stringForQuoteCharacter(char16_t)::strings[8 * v1 + 4];
        }
        if (word_1EE3381F8)
        {
          if ((unsigned __int16)word_1EE338208 == a1)
          {
            v1 = 4;
            return *(_QWORD *)&WebCore::stringForQuoteCharacter(char16_t)::strings[8 * v1 + 4];
          }
          if (word_1EE338208)
          {
            if ((unsigned __int16)word_1EE338218 == a1)
            {
              v1 = 5;
              return *(_QWORD *)&WebCore::stringForQuoteCharacter(char16_t)::strings[8 * v1 + 4];
            }
            if (word_1EE338218)
            {
              if ((unsigned __int16)word_1EE338228 == a1)
              {
                v1 = 6;
                return *(_QWORD *)&WebCore::stringForQuoteCharacter(char16_t)::strings[8 * v1 + 4];
              }
              if (word_1EE338228)
              {
                if ((unsigned __int16)word_1EE338238 == a1)
                {
                  v1 = 7;
                  return *(_QWORD *)&WebCore::stringForQuoteCharacter(char16_t)::strings[8 * v1 + 4];
                }
                if (word_1EE338238)
                {
                  if ((unsigned __int16)word_1EE338248 == a1)
                  {
                    v1 = 8;
                    return *(_QWORD *)&WebCore::stringForQuoteCharacter(char16_t)::strings[8 * v1 + 4];
                  }
                  if (word_1EE338248)
                  {
                    if ((unsigned __int16)word_1EE338258 == a1)
                    {
                      v1 = 9;
                      return *(_QWORD *)&WebCore::stringForQuoteCharacter(char16_t)::strings[8 * v1 + 4];
                    }
                    if (word_1EE338258)
                    {
                      if ((unsigned __int16)word_1EE338268 == a1)
                      {
                        v1 = 10;
                        return *(_QWORD *)&WebCore::stringForQuoteCharacter(char16_t)::strings[8 * v1 + 4];
                      }
                      if (word_1EE338268)
                      {
                        if ((unsigned __int16)word_1EE338278 == a1)
                        {
                          v1 = 11;
                          return *(_QWORD *)&WebCore::stringForQuoteCharacter(char16_t)::strings[8 * v1 + 4];
                        }
                        if (word_1EE338278)
                        {
                          if ((unsigned __int16)word_1EE338288 == a1)
                          {
                            v1 = 12;
                            return *(_QWORD *)&WebCore::stringForQuoteCharacter(char16_t)::strings[8 * v1 + 4];
                          }
                          if (word_1EE338288)
                          {
                            if ((unsigned __int16)word_1EE338298 == a1)
                            {
                              v1 = 13;
                              return *(_QWORD *)&WebCore::stringForQuoteCharacter(char16_t)::strings[8 * v1 + 4];
                            }
                            if (word_1EE338298)
                            {
                              if ((unsigned __int16)word_1EE3382A8 == a1)
                              {
                                v1 = 14;
                                return *(_QWORD *)&WebCore::stringForQuoteCharacter(char16_t)::strings[8 * v1 + 4];
                              }
                              if (word_1EE3382A8)
                              {
                                if ((unsigned __int16)word_1EE3382B8 == a1)
                                {
                                  v1 = 15;
                                  return *(_QWORD *)&WebCore::stringForQuoteCharacter(char16_t)::strings[8 * v1 + 4];
                                }
                                if (word_1EE3382B8)
                                  return MEMORY[0x1E0CBEF70];
                                v3 = &word_1EE3382B8;
                                v2 = 15;
                              }
                              else
                              {
                                v3 = &word_1EE3382A8;
                                v2 = 14;
                              }
                            }
                            else
                            {
                              v3 = &word_1EE338298;
                              v2 = 13;
                            }
                          }
                          else
                          {
                            v3 = &word_1EE338288;
                            v2 = 12;
                          }
                        }
                        else
                        {
                          v3 = &word_1EE338278;
                          v2 = 11;
                        }
                      }
                      else
                      {
                        v3 = &word_1EE338268;
                        v2 = 10;
                      }
                    }
                    else
                    {
                      v3 = &word_1EE338258;
                      v2 = 9;
                    }
                  }
                  else
                  {
                    v3 = &word_1EE338248;
                    v2 = 8;
                  }
                }
                else
                {
                  v3 = &word_1EE338238;
                  v2 = 7;
                }
              }
              else
              {
                v3 = &word_1EE338228;
                v2 = 6;
              }
            }
            else
            {
              v3 = &word_1EE338218;
              v2 = 5;
            }
          }
          else
          {
            v3 = &word_1EE338208;
            v2 = 4;
          }
        }
        else
        {
          v3 = &word_1EE3381F8;
          v2 = 3;
        }
      }
      else
      {
        v3 = &word_1EE3381E8;
        v2 = 2;
      }
    }
    else
    {
      v3 = &word_1EE3381D8;
      v2 = 1;
    }
  }
  else
  {
    v2 = 0;
    v3 = WebCore::stringForQuoteCharacter(char16_t)::strings;
  }
  *v3 = a1;
  WTF::StringImpl::create8BitIfPossible();
  result = v5;
  *(_QWORD *)&WebCore::stringForQuoteCharacter(char16_t)::strings[8 * v2 + 4] = v5;
  return result;
}

void WebCore::RenderReplaced::willBeDestroyed(WebCore::RenderReplaced *this, void *a2)
{
  WebCore::RenderBox *v2;
  uint64_t v3;
  uint64_t v4;
  WebCore::RenderBox *v5;

  v2 = this;
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 3405))
  {
    v3 = *((_QWORD *)this + 4);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 8);
      if (v4)
      {
        v5 = v2;
        (*(void (**)(uint64_t, WebCore::RenderBox *))(*(_QWORD *)v4 + 672))(v4, v2);
        v2 = v5;
      }
    }
  }
  WebCore::RenderBox::willBeDestroyed(v2, a2);
}

void WebCore::RenderReplaced::styleDidChange(_QWORD *a1, WTF::StringImpl *a2, uint64_t a3)
{
  float v5;

  WebCore::RenderBox::styleDidChange((uint64_t)a1, a2, a3);
  if (a3)
    v5 = *(float *)(*(_QWORD *)(a3 + 24) + 184);
  else
    v5 = 1.0;
  if (v5 != *(float *)(a1[13] + 184))
    (*(void (**)(_QWORD *))(*a1 + 1656))(a1);
}

void WebCore::RenderReplaced::intrinsicSizeChanged(WebCore::RenderObject *this)
{
  float v1;
  int v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;

  v1 = *(float *)(*((_QWORD *)this + 13) + 184);
  v2 = (int)(float)(v1 * 300.0);
  v3 = (int)(float)(v1 * 150.0);
  LODWORD(v4) = v2 << 6;
  if (v2 < -33554432)
    LODWORD(v4) = 0x80000000;
  if (v2 <= 0x1FFFFFF)
    v4 = v4;
  else
    v4 = 0x7FFFFFFFLL;
  if (v3 >= -33554432)
    v5 = v3 << 6;
  else
    v5 = 0x80000000;
  if (v3 <= 0x1FFFFFF)
    v6 = v5;
  else
    v6 = 0x7FFFFFFFLL;
  *((_QWORD *)this + 25) = v4 | (v6 << 32);
  WebCore::RenderObject::setNeedsLayoutAndPrefWidthsRecalc(this);
}

uint64_t WebCore::RenderReplaced::isHighlighted(WebCore::RenderElement *a1, int a2, int a3, int a4)
{
  uint64_t v5;
  int v6;
  BOOL v7;
  unsigned int v8;
  _BOOL4 v9;

  switch(a2)
  {
    case 0:
      return 0;
    case 2:
      return 1;
    case 1:
      return a3 == 0;
  }
  if (*(_QWORD *)(WebCore::RenderElement::element(a1) + 80))
  {
    v5 = *(_QWORD *)(WebCore::RenderElement::element(a1) + 80);
    if (v5)
    {
      v6 = 0;
      do
      {
        ++v6;
        v5 = *(_QWORD *)(v5 + 56);
      }
      while (v5);
    }
    else
    {
      v6 = 0;
    }
  }
  else
  {
    v6 = 1;
  }
  if (a3)
    v7 = 0;
  else
    v7 = v6 == a4;
  v8 = v7;
  v9 = v6 == a4;
  if (a2 != 3)
    v9 = 0;
  if (a2 == 4)
    return v8;
  else
    return v9;
}

uint64_t WebCore::RenderReplaced::localSelectionRect(WebCore::RenderReplaced *this, int a2)
{
  if (a2)
    WebCore::RenderReplaced::isSelected(this);
  return 0;
}

uint64_t WebCore::RenderReplaced::isSelected(WebCore::RenderReplaced *this)
{
  int v1;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  unsigned int v9;
  _BOOL4 v10;
  int v11;

  v1 = (*((_DWORD *)this + 5) >> 25) & 7;
  if (!v1)
    return 0;
  if (v1 == 2)
    return 1;
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1944);
  v4 = *(_DWORD *)(v3 + 304);
  v11 = (*((_DWORD *)this + 5) >> 25) & 7;
  if (v1 == 1)
    return v4 == 0;
  v5 = *(_DWORD *)(v3 + 308);
  if (*(_QWORD *)(WebCore::RenderElement::element(this) + 80))
  {
    v6 = *(_QWORD *)(WebCore::RenderElement::element(this) + 80);
    if (v6)
    {
      v7 = 0;
      do
      {
        ++v7;
        v6 = *(_QWORD *)(v6 + 56);
      }
      while (v6);
    }
    else
    {
      v7 = 0;
    }
  }
  else
  {
    v7 = 1;
  }
  if (v4)
    v8 = 0;
  else
    v8 = v5 == v7;
  v9 = v8;
  v10 = v5 == v7;
  if (v11 != 3)
    v10 = 0;
  if (v11 == 4)
    return v9;
  else
    return v10;
}

unint64_t WebCore::LayoutSize::fitToAspectRatio(int32x2_t *a1, int32x2_t *a2, int a3)
{
  int32x2_t v3;
  float32x2_t v4;
  int32x2_t v5;
  float32x2_t v6;
  uint64_t v7;
  signed int v8;
  uint64_t v9;
  signed int v10;

  v3 = *a1;
  v4 = (float32x2_t)vdup_n_s32(0x3C800000u);
  v5 = *a2;
  v6 = vdiv_f32(vmul_f32(vcvt_f32_s32(*a1), v4), vmul_f32(vcvt_f32_s32(*a2), v4));
  if ((((a3 == 1) ^ vmvn_s8((int8x8_t)vcgt_f32(v6, (float32x2_t)vdup_lane_s32((int32x2_t)v6, 1))).u32[0]) & 1) != 0)
  {
    LODWORD(v7) = *a1;
    v8 = ((v3.i32[0] ^ v5.i32[1]) >> 31) + 0x7FFFFFFF;
    if ((unint64_t)(v3.i32[0] * (uint64_t)v5.i32[1] / 64) >> 32 == (int)(v3.i32[0] * (uint64_t)v5.i32[1] / 64) >> 31)
      v8 = v3.i32[0] * (uint64_t)v5.i32[1] / 64;
    v9 = ((uint64_t)v8 << 6) / v5.i32[0];
    if (v9 <= (uint64_t)0xFFFFFFFF80000000)
      v9 = 0xFFFFFFFF80000000;
    if (v9 >= 0x7FFFFFFF)
      v9 = 0x7FFFFFFFLL;
  }
  else
  {
    v9 = v3.u32[1];
    v10 = ((v5.i32[0] ^ v3.i32[1]) >> 31) + 0x7FFFFFFF;
    if ((unint64_t)(v5.i32[0] * (uint64_t)v3.i32[1] / 64) >> 32 == (int)(v5.i32[0] * (uint64_t)v3.i32[1] / 64) >> 31)
      v10 = v5.i32[0] * (uint64_t)v3.i32[1] / 64;
    v7 = ((uint64_t)v10 << 6) / v5.i32[1];
    if (v7 <= (uint64_t)0xFFFFFFFF80000000)
      v7 = 0xFFFFFFFF80000000;
    if (v7 >= 0x7FFFFFFF)
      LODWORD(v7) = 0x7FFFFFFF;
  }
  return v7 | (unint64_t)(v9 << 32);
}

uint64_t WebCore::RenderReplaced::computeConstrainedLogicalWidth(WebCore::RenderObject *this, int a2)
{
  WebCore::RenderObject *v2;
  WebCore::RenderBox *v4;
  int v5;
  unsigned int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  int v12;
  float v13;
  double v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  int v22;
  float v23;
  double v24;
  int v25;
  BOOL v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  float v41;
  float v42;
  BOOL v43;

  v2 = this;
  if (a2 == 1)
  {
    v38 = 0;
    v39 = 1;
    return WebCore::RenderBox::computeReplacedLogicalWidthRespectingMinMaxWidth((uint64_t)this, v38, v39);
  }
  v4 = WebCore::RenderObject::containingBlock(this);
  v5 = WebCore::RenderBox::contentLogicalWidth(v4);
  v6 = *((_DWORD *)v2 + 30);
  v7 = (v6 >> 26) & 1;
  v8 = (unsigned __int16)*((_DWORD *)v2 + 31) >> 13;
  if ((v8 - 2) >= 2)
  {
    if (v8 == 4)
    {
      v7 = (v6 & 0x4000000) == 0;
    }
    else if (v8 != 5)
    {
      v9 = 3;
      if ((v6 & 0x4000000) != 0)
        v9 = 1;
      goto LABEL_7;
    }
  }
  v43 = v7 == 0;
  v9 = 2;
  if (v43)
    v9 = 0;
LABEL_7:
  v10 = *(_QWORD *)(*((_QWORD *)v2 + 11) + 24) + 40;
  v11 = (unsigned __int8 *)(v10 + 8 * v9);
  v12 = v11[4];
  switch(v12)
  {
    case 4:
      v13 = *(float *)v11;
      if (!v11[6])
        v13 = (float)*(int *)v11;
      break;
    case 3:
      v41 = *(float *)v11;
      if (!*(_BYTE *)(v10 + 8 * v9 + 6))
        v41 = (float)*(int *)v11;
      v13 = (float)((float)((float)v5 * 0.015625) * v41) / 100.0;
      break;
    case 11:
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)v11, (float)v5 * 0.015625);
      break;
    default:
      v15 = 0;
      goto LABEL_13;
  }
  v14 = v13 * 64.0;
  if (v14 >= 2147483650.0)
  {
    v15 = 0x7FFFFFFF;
  }
  else if (v14 <= -2147483650.0)
  {
    v15 = 0x80000000;
  }
  else
  {
    v15 = (int)v14;
  }
LABEL_13:
  v16 = *((_DWORD *)v2 + 30);
  v17 = (v16 >> 26) & 1;
  v18 = (unsigned __int16)*((_DWORD *)v2 + 31) >> 13;
  if ((v18 - 2) >= 2)
  {
    if (v18 == 4)
    {
      v17 = (v16 & 0x4000000) == 0;
    }
    else if (v18 != 5)
    {
      v19 = 3;
      if ((v16 & 0x4000000) == 0)
        v19 = 1;
      goto LABEL_18;
    }
  }
  v43 = v17 == 0;
  v19 = 2;
  if (!v43)
    v19 = 0;
LABEL_18:
  v20 = *(_QWORD *)(*((_QWORD *)v2 + 11) + 24) + 40;
  v21 = (unsigned __int8 *)(v20 + 8 * v19);
  v22 = v21[4];
  switch(v22)
  {
    case 4:
      v23 = *(float *)v21;
      if (!v21[6])
        v23 = (float)*(int *)v21;
      break;
    case 3:
      v42 = *(float *)v21;
      if (!*(_BYTE *)(v20 + 8 * v19 + 6))
        v42 = (float)*(int *)v21;
      v23 = (float)((float)((float)v5 * 0.015625) * v42) / 100.0;
      break;
    case 11:
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)v21, (float)v5 * 0.015625);
      break;
    default:
      v25 = 0;
      goto LABEL_24;
  }
  v24 = v23 * 64.0;
  if (v24 >= 2147483650.0)
  {
    v25 = 0x7FFFFFFF;
  }
  else if (v24 <= -2147483650.0)
  {
    v25 = 0x80000000;
  }
  else
  {
    v25 = (int)v24;
  }
LABEL_24:
  v26 = __OFADD__(v15, v25);
  v27 = v15 + v25;
  if (v26)
    v28 = (v15 >> 31) + 0x7FFFFFFF;
  else
    v28 = v27;
  v29 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)v2 + 1016))(v2);
  if (__OFADD__(v28, v29))
    v30 = (v28 >> 31) + 0x7FFFFFFF;
  else
    v30 = v28 + v29;
  v31 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)v2 + 1024))(v2);
  if (__OFADD__(v30, v31))
    v32 = (v30 >> 31) + 0x7FFFFFFF;
  else
    v32 = v30 + v31;
  v33 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)v2 + 944))(v2);
  if (__OFADD__(v32, v33))
    v34 = (v32 >> 31) + 0x7FFFFFFF;
  else
    v34 = v32 + v33;
  v35 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)v2 + 952))(v2);
  v36 = v34 + v35;
  if (__OFADD__(v34, v35))
    v36 = (v34 >> 31) + 0x7FFFFFFF;
  v26 = __OFSUB__(v5, v36);
  v37 = v5 - v36;
  if (v26)
    v37 = (v5 >> 31) + 0x7FFFFFFF;
  v38 = v37 & ~(v37 >> 31);
  this = v2;
  v39 = a2;
  return WebCore::RenderBox::computeReplacedLogicalWidthRespectingMinMaxWidth((uint64_t)this, v38, v39);
}

uint64_t WebCore::RenderBox::overridingContentLogicalWidth(uint64_t a1, unsigned int a2)
{
  unsigned int v4;
  int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  int v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  uint64_t v22;
  int v23;
  int v24;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1064))(a1);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1072))(a1);
  if (__OFADD__(v4, v5))
    v6 = (v4 >> 31) + 0x7FFFFFFF;
  else
    v6 = v4 + v5;
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 976))(a1);
  if (__OFADD__(v6, v7))
    v8 = (v6 >> 31) + 0x7FFFFFFF;
  else
    v8 = v6 + v7;
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 984))(a1);
  v10 = v8 + v9;
  if (__OFADD__(v8, v9))
    v10 = (v8 >> 31) + 0x7FFFFFFF;
  v11 = __OFSUB__(a2, v10);
  v12 = a2 - v10;
  if (v11)
    v13 = (a2 >> 31) + 0x7FFFFFFF;
  else
    v13 = v12;
  v14 = 1352;
  if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
    v14 = 1360;
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + v14))(a1);
  v16 = v15 << 6;
  if (v15 < -33554432)
    v16 = 0x80000000;
  if (v15 > 0x1FFFFFF)
    v16 = 0x7FFFFFFF;
  v11 = __OFSUB__(v13, v16);
  v17 = v13 - v16;
  if (v11)
    v18 = (v13 >> 31) + 0x7FFFFFFF;
  else
    v18 = v17;
  if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 40) + 584) & 0x100) != 0)
  {
    v22 = 1352;
    if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
      v22 = 1360;
    v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + v22))(a1);
    v24 = v23 << 6;
    if (v23 > 0x1FFFFFF)
      v24 = 0x7FFFFFFF;
    if (v23 >= -33554432)
      v19 = v24;
    else
      v19 = 0x80000000;
  }
  else
  {
    v19 = 0;
  }
  v11 = __OFSUB__(v18, v19);
  v20 = v18 - v19;
  if (v11)
    v20 = (v18 >> 31) + 0x7FFFFFFF;
  return v20 & ~(v20 >> 31);
}

unsigned int *WebCore::RenderReplaced::positionForPoint@<X0>(uint64_t a1@<X0>, WebCore::RenderObject *a2@<X1>, uint64_t a3@<X2>, WebCore::RenderFragmentContainer *a4@<X3>, uint64_t a5@<X8>)
{
  float v5;
  float v6;
  WebCore::LayoutIntegration::LineLayout *v12;
  int v13;
  const WebCore::InlineIterator::LineBox *v14;
  float v15;
  float v16;
  float v17;
  double v18;
  int *v19;
  int *v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  BOOL v30;
  int v31;
  int v32;
  float v33;
  int v34;
  uint64_t v35;
  _DWORD *v36;
  int v37;
  uint64_t v38;
  unsigned int *v39;
  _BOOL4 v40;
  _QWORD v42[2];
  unsigned int v43;
  _QWORD v44[2];
  uint64_t v45;
  char v46;
  char *v47;

  v12 = (WebCore::LayoutIntegration::LineLayout *)WebCore::LayoutIntegration::LineLayout::containing((WebCore::LayoutIntegration::LineLayout *)a1, a2);
  if (v12)
  {
    WebCore::LayoutIntegration::LineLayout::boxFor(v12, (const WebCore::RenderElement *)a1, (uint64_t)v44);
  }
  else
  {
    v44[1] = 0;
    v44[0] = 0;
    v45 = 1;
  }
  v13 = WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v44);
  if ((v13 & 1) == 0)
  {
    if ((_DWORD)v45 == -1)
      goto LABEL_52;
    v47 = &v46;
    ((void (*)(_QWORD *__return_ptr, char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box7lineBoxEvE3__0JZNKSA_7lineBoxEvE3__1EEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v45])(v42, &v47, v44);
    WebCore::InlineIterator::previousLineBoxContentBottomOrBorderAndPadding((WebCore::InlineIterator *)v42, v14);
    if (v43 == -1)
      goto LABEL_52;
    v16 = v15;
    v47 = &v46;
    v17 = ((float (*)(char **, _QWORD *))off_1E3430F58[v43])(&v47, v42);
    if (v17 >= v16)
      v17 = v16;
    v18 = v17 * 64.0;
    if (v18 >= 2147483650.0)
      v6 = 33554000.0;
    else
      v6 = v18 <= -2147483650.0 ? -33554000.0 : (float)(int)v18 * 0.015625;
    if (v43 == -1)
    {
LABEL_52:
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_53;
    }
    v47 = &v46;
    v5 = ((float (*)(char **, _QWORD *))*(&off_1E3430F68 + v43))(&v47, v42);
    if (v43 != -1)
      ((void (*)(char **, _QWORD *))off_1E3430F78[v43])(&v47, v42);
  }
  if ((_DWORD)v45 != -1)
    ((void (*)(_QWORD *, _QWORD *))off_1E3430F88[v45])(v42, v44);
  if (v13)
  {
    v19 = (int *)(a1 + 152);
    v20 = (int *)(a1 + 160);
    if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 >= 4)
    {
      v19 = (int *)(a1 + 156);
      v20 = (int *)(a1 + 164);
    }
    v21 = *v19;
    v22 = *v20;
    v30 = __OFADD__(v21, v22);
    v23 = v21 + v22;
    if (v30)
      v23 = (v21 >> 31) + 0x7FFFFFFF;
    v6 = (float)v21 * 0.015625;
    v5 = (float)v23 * 0.015625;
  }
  if ((*(_BYTE *)(a1 + 21) & 0x10) != 0)
  {
    v25 = *((_DWORD *)a2 + 1);
    v29 = *(_DWORD *)(a1 + 152);
    v27 = *(_DWORD *)a2 + v29;
    if (__OFADD__(*(_DWORD *)a2, v29))
      v27 = (*(_DWORD *)a2 >> 31) + 0x7FFFFFFF;
    v26 = *(_DWORD *)(a1 + 156);
    v30 = __OFADD__(v25, v26);
    v31 = v25 + v26;
  }
  else
  {
    v25 = *(_DWORD *)a2;
    v24 = *((_DWORD *)a2 + 1);
    v26 = *(_DWORD *)(a1 + 156);
    v30 = __OFADD__(v24, v26);
    v27 = v24 + v26;
    v28 = (v24 >> 31) + 0x7FFFFFFF;
    if (v30)
      v27 = v28;
    v29 = *(_DWORD *)(a1 + 152);
    v30 = __OFADD__(v25, v29);
    v31 = v25 + v29;
  }
  v32 = (v25 >> 31) + 0x7FFFFFFF;
  if (!v30)
    v32 = v31;
  v33 = (float)v27 * 0.015625;
  if (v33 < v6)
  {
    v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 528))(a1);
LABEL_46:
    v40 = v34;
    v38 = a5;
    v39 = (unsigned int *)a1;
    return WebCore::RenderObject::createVisiblePosition(v39, v40, 1, v38);
  }
  if (v33 >= v5)
  {
    v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 536))(a1);
    goto LABEL_46;
  }
  if ((*(_BYTE *)(a1 + 45) & 1) == 0)
  {
    v35 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
    if (v35)
    {
      if ((*(_WORD *)(v35 + 28) & 8) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x196433474);
      }
      if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 >= 4)
      {
        v36 = (_DWORD *)(a1 + 160);
LABEL_42:
        v37 = v29 + *v36 / 2;
        if (__OFADD__(v29, *v36 / 2))
          v37 = (v29 >> 31) + 0x7FFFFFFF;
        v38 = a5;
        v39 = (unsigned int *)a1;
        v40 = v32 > v37;
        return WebCore::RenderObject::createVisiblePosition(v39, v40, 1, v38);
      }
LABEL_53:
      v36 = (_DWORD *)(a1 + 164);
      v29 = v26;
      goto LABEL_42;
    }
  }
  return WebCore::RenderBox::positionForPoint((WebCore::RenderFragmentedFlow *)a1, a4, (int *)a2, a3, a5);
}

unint64_t WebCore::RenderReplaced::selectionRectForRepaint(WebCore::RenderReplaced *this, const WebCore::RenderLayerModelObject *a2, int a3)
{
  int v3;
  unint64_t v4;
  unsigned int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  float v11;
  float v12;
  float v13;
  float v15;
  float v16;
  float v17;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  float v37;
  float v38;
  int v39;
  float v40;
  char v41;
  __int128 v42;
  float v43;
  float v44;
  float v45;
  float v46;
  char v47;

  v3 = (*((_DWORD *)this + 5) >> 25) & 7;
  if (!v3)
  {
    v4 = (*((_DWORD *)this + 5) >> 25) & 7;
    v5 = 0;
    return v5 | v4;
  }
  if (v3 == 2)
    goto LABEL_5;
  v8 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 40) + 8) + 1944);
  v10 = *(_DWORD *)(v9 + 304);
  if (v3 == 1)
  {
    if (!v10)
      goto LABEL_5;
LABEL_74:
    v4 = 0;
    v5 = 0;
    return v5 | v4;
  }
  v30 = *(_DWORD *)(v9 + 308);
  if ((*((_BYTE *)this + 45) & 1) != 0)
    goto LABEL_70;
  if ((*(_WORD *)(v8 + 28) & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196433978);
  }
  v31 = *(_QWORD *)(v8 + 80);
  if (!v31)
  {
LABEL_70:
    v32 = 1;
  }
  else
  {
    v32 = 0;
    do
    {
      ++v32;
      v31 = *(_QWORD *)(v31 + 56);
    }
    while (v31);
  }
  if (v3 == 4)
  {
    v4 = 0;
    v5 = 0;
    if (v10 || v30 != v32)
      return v5 | v4;
  }
  else if (v3 != 3 || v30 != v32)
  {
    goto LABEL_74;
  }
  if ((*((_BYTE *)this + 45) & 1) != 0)
    goto LABEL_83;
  if ((*(_WORD *)(v8 + 28) & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196433998);
  }
  v33 = *(_QWORD *)(v8 + 80);
  if (!v33)
  {
LABEL_83:
    v34 = 1;
  }
  else
  {
    v34 = 0;
    do
    {
      ++v34;
      v33 = *(_QWORD *)(v33 + 56);
    }
    while (v33);
  }
  if (v3 == 4)
  {
    v7 = 0;
    if (!v10 && v30 == v34)
      goto LABEL_5;
  }
  else
  {
    if (v30 == v34)
    {
LABEL_5:
      v7 = *((_QWORD *)this + 20);
      goto LABEL_6;
    }
    v7 = 0;
  }
LABEL_6:
  if (a3)
  {
    v35 = 0;
    v36 = v7;
    LOBYTE(v37) = 0;
    v41 = 0;
    (*(void (**)(__int128 *__return_ptr, WebCore::RenderReplaced *, uint64_t *, const WebCore::RenderLayerModelObject *, uint64_t))(*(_QWORD *)this + 472))(&v42, this, &v35, a2, 0xC00000000);
    if (!v47)
    {
      __break(0xC471u);
      JUMPOUT(0x196433958);
    }
    v5 = v42;
    v4 = v42 & 0xFFFFFFFF00000000;
  }
  else
  {
    v35 = 0;
    *(float *)&v36 = (float)((float)(int)v7 * 0.015625) + 0.0;
    HIDWORD(v36) = 0;
    v37 = *(float *)&v36;
    v38 = (float)((float)SHIDWORD(v7) * 0.015625) + 0.0;
    v39 = 0;
    v40 = v38;
    WebCore::RenderObject::localToContainerQuad((uint64_t)this, (float *)&v35, (uint64_t)a2, 2u, &v42);
    if (v45 >= v43)
      v11 = v43;
    else
      v11 = v45;
    if (*((float *)&v42 + 2) >= *(float *)&v42)
      v12 = *(float *)&v42;
    else
      v12 = *((float *)&v42 + 2);
    if (v11 >= v12)
      v11 = v12;
    v13 = fabsf(v11);
    if (v13 == INFINITY || v13 > 2147500000.0)
      v11 = (float)((SLODWORD(v11) >> 31) ^ 0x7FFFFFFF);
    if (v46 >= v44)
      v15 = v44;
    else
      v15 = v46;
    if (*((float *)&v42 + 3) >= *((float *)&v42 + 1))
      v16 = *((float *)&v42 + 1);
    else
      v16 = *((float *)&v42 + 3);
    if (v15 >= v16)
      v15 = v16;
    v17 = fabsf(v15);
    if (v17 == INFINITY || v17 > 2147500000.0)
      v15 = (float)((SLODWORD(v15) >> 31) ^ 0x7FFFFFFF);
    v19 = floorf(v11);
    v20 = -2147500000.0;
    if (v19 > -2147500000.0)
      v20 = (float)(int)v19;
    if (v19 < 2147500000.0)
      v21 = v20;
    else
      v21 = 2147500000.0;
    v22 = floorf(v15);
    v23 = -2147500000.0;
    if (v22 > -2147500000.0)
      v23 = (float)(int)v22;
    if (v22 < 2147500000.0)
      v24 = v23;
    else
      v24 = 2147500000.0;
    if (v21 >= 2147500000.0)
    {
      v25 = 0x7FFFFFFF;
    }
    else if (v21 <= -2147500000.0)
    {
      v25 = 0x80000000;
    }
    else
    {
      v25 = (int)v21;
    }
    if (v24 >= 2147500000.0)
    {
      v26 = 0x7FFFFFFF00000000;
    }
    else if (v24 <= -2147500000.0)
    {
      v26 = 0x8000000000000000;
    }
    else
    {
      v26 = (unint64_t)(int)v24 << 32;
    }
    v27 = HIDWORD(v26);
    v28 = (v26 | v25) << 6;
    if (v25 < -33554432)
      v28 = 0x80000000;
    if (v25 <= 0x1FFFFFF)
      v5 = v28;
    else
      v5 = 0x7FFFFFFF;
    v29 = v26 << 6;
    if ((int)v27 < -33554432)
      v29 = 0x8000000000000000;
    if ((int)v27 <= 0x1FFFFFF)
      v4 = v29;
    else
      v4 = 0x7FFFFFFF00000000;
  }
  return v5 | v4;
}

void WebCore::RenderReplica::~RenderReplica(WebCore::RenderReplica *this, void *a2)
{
  WTF *v3;

  *(_QWORD *)this = off_1E34201A0;
  v3 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
}

{
  WTF *v3;
  void *v4;

  *(_QWORD *)this = off_1E34201A0;
  v3 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
  if (*((_DWORD *)this + 4))
  {
    *((_QWORD *)this + 24) = 0;
    *((_OWORD *)this + 10) = 0u;
    *((_OWORD *)this + 11) = 0u;
    *((_OWORD *)this + 8) = 0u;
    *((_OWORD *)this + 9) = 0u;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 7) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(this, v4);
  }
}

WTF *WebCore::RenderReplica::layout(WebCore::RenderReplica *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF *result;
  unsigned int v6;

  v3 = *(_QWORD *)(*((_QWORD *)this + 4) + 8);
  if ((*(_BYTE *)(v3 + 45) & 4) == 0)
    v3 = 0;
  v4 = *(_QWORD *)(v3 + 160);
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = v4;
  result = WebCore::RenderLayerModelObject::updateLayerTransform(this, a2);
  v6 = *((_DWORD *)this + 5) & 0xFFDFFDFF | 0x200;
  *((_DWORD *)this + 5) = v6;
  if ((*((_BYTE *)this + 45) & 2) == 0)
  {
    *(_WORD *)((char *)this + 69) &= ~1u;
    *((_WORD *)this + 38) = *((_WORD *)this + 38) & 0xF | (16
                                                         * *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8)
                                                                                            + 1944)
                                                                                + 248)
                                                                    + 472));
  }
  *((_DWORD *)this + 5) = v6 & 0xFFDFFE07;
  return result;
}

uint64_t WebCore::RenderReplica::computePreferredLogicalWidths(uint64_t this)
{
  uint64_t v1;
  int v2;

  v1 = *(_QWORD *)(*(_QWORD *)(this + 32) + 8);
  if ((*(_BYTE *)(v1 + 45) & 4) == 0)
    v1 = 0;
  v2 = *(_DWORD *)(v1 + 160);
  *(_DWORD *)(this + 184) = v2;
  *(_DWORD *)(this + 188) = v2;
  *(_DWORD *)(this + 20) &= ~0x2000u;
  return this;
}

void WebCore::RenderReplica::paint(WebCore::RenderReplica *this, WebCore::PaintInfo *a2, const WebCore::LayoutPoint *a3)
{
  int v3;
  int v7;
  int v8;
  unsigned int v9;
  BOOL v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WebCore::RenderReplica *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  _BYTE v24[16];
  uint64_t v25;

  v3 = *((unsigned __int16 *)a2 + 8);
  if (v3 == 1024 || v3 == 8)
  {
    v8 = *((_DWORD *)this + 38);
    v7 = *((_DWORD *)this + 39);
    v9 = *((_DWORD *)a3 + 1);
    v10 = __OFADD__(*(_DWORD *)a3, v8);
    v11 = *(_DWORD *)a3 + v8;
    if (v10)
      v12 = ((*(_DWORD *)a3 >> 31) + 0x7FFFFFFF);
    else
      v12 = v11;
    v10 = __OFADD__(v9, v7);
    v13 = v9 + v7;
    if (v10)
      v14 = (v9 >> 31) + 0x7FFFFFFF;
    else
      v14 = v13;
    if (v3 == 1024)
    {
      v18 = (WebCore::RenderReplica *)*((_QWORD *)a2 + 3);
      if ((!v18 || v18 == this)
        && (*(_BYTE *)(*((_QWORD *)this + 13) + 239) & 4) == 0
        && (*((_BYTE *)this + 120) & 0x30) == 0
        && ((*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 10) + 40))(*((_QWORD *)a2 + 10)) & 1) == 0)
      {
        v19 = *((_QWORD *)this + 20);
        v20 = v12 | (v14 << 32);
        v21 = v19;
        (*(void (**)(WebCore::RenderReplica *, uint64_t *))(*(_QWORD *)this + 1576))(this, &v20);
        WebCore::RenderBox::paintMaskImages(this, a2, (const WebCore::LayoutRect *)&v20);
      }
    }
    else if (v3 == 8)
    {
      v15 = *((_QWORD *)this + 18);
      if (*(_QWORD *)(v15 + 200))
      {
        v16 = *(_QWORD *)(v15 + 40);
        v17 = v16;
      }
      else
      {
        v17 = *((_QWORD *)this + 18);
        do
          v17 = *(_QWORD *)(v17 + 40);
        while (v17 && (*(_BYTE *)(v17 + 24) & 1) == 0 && !*(_QWORD *)(v17 + 200));
        v16 = *(_QWORD *)(v15 + 40);
      }
      v20 = v17;
      v21 = 0;
      v22 = *(_OWORD *)a2;
      v23 = 0;
      memset(v24, 0, 13);
      v24[13] = 1;
      v25 = 0;
      WebCore::RenderLayer::paintLayer(v16, *((WTF **)a2 + 10), (uint64_t)&v20, 15);
    }
  }
}

uint64_t WebCore::RenderScrollbar::createCustomScrollbar@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  uint64_t result;

  v10 = WTF::fastMalloc((WTF *)0xE8);
  result = WebCore::RenderScrollbar::RenderScrollbar(v10, a1, a2, a3, a4);
  *a5 = result;
  return result;
}

uint64_t WebCore::RenderScrollbar::RenderScrollbar(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v10;
  WebCore::RenderScrollbarPart *v11;
  WebCore::RenderScrollbarPart *v12;
  int v13;
  unint64_t v14;
  int v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  int v20;

  v10 = WebCore::RenderScrollbarTheme::renderScrollbarTheme((WebCore::RenderScrollbarTheme *)a1);
  WebCore::Scrollbar::Scrollbar(a1, a2, a3, 0, v10, 1);
  *(_QWORD *)a1 = off_1E342F8A8;
  if (a4)
    *(_DWORD *)(a4 + 24) += 2;
  *(_QWORD *)(a1 + 208) = a4;
  WTF::WeakPtr<WebCore::LocalFrame,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>((uint64_t *)(a1 + 216), a5);
  *(_QWORD *)(a1 + 224) = 0;
  WebCore::RenderScrollbar::updateScrollbarPart((WebCore::RenderStyle **)a1, 128);
  LODWORD(v18) = 128;
  v11 = (WebCore::RenderScrollbarPart *)WTF::HashMap<unsigned int,std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>>,WTF::HashTableTraits>::get((uint64_t *)(a1 + 224), (int *)&v18);
  if (v11)
  {
    v12 = v11;
    WebCore::RenderScrollbarPart::layout(v11);
    v13 = *((_DWORD *)v12 + 40) / 64;
    LODWORD(v14) = *((_DWORD *)v12 + 41) / 64;
  }
  else
  {
    v16 = *(unsigned __int8 *)(a1 + 72);
    WebCore::Widget::frameRect((WebCore::Widget *)a1);
    v14 = HIDWORD(v17);
    if (v16)
      v13 = 0;
    else
      v13 = v17;
    if (!v16)
      LODWORD(v14) = 0;
  }
  v18 = 0;
  v19 = v13;
  v20 = v14;
  WebCore::Scrollbar::setFrameRect((WebCore::Scrollbar *)a1, (const WebCore::IntRect *)&v18);
  return a1;
}

WebCore::RenderStyle **WebCore::RenderScrollbar::updateScrollbarPart(WebCore::RenderStyle **result, int a2)
{
  uint64_t v3;
  int v4;
  void *v5;
  uint64_t v6;
  unsigned int v7;
  const WebCore::Element *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const WebCore::Element *v14;
  WebCore::RenderElement *v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  int v19;
  int v20;
  uint64_t v22;
  uint64_t v23[3];
  WebCore::RenderStyle *v24;
  int v25;

  v25 = a2;
  if (a2)
  {
    v3 = (uint64_t)result;
    v4 = WebCore::pseudoForScrollbarPart(a2);
    WebCore::RenderScrollbar::getScrollbarPseudoStyle(&v24, (WebCore::RenderScrollbar *)v3, a2, v4);
    if (!v24)
    {
LABEL_3:
      WTF::HashMap<unsigned int,std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>>,WTF::HashTableTraits>::remove((uint64_t *)(v3 + 224), a2);
      return std::unique_ptr<WebCore::RenderStyle>::~unique_ptr[abi:sn180100](&v24, v5);
    }
    v6 = *((_QWORD *)v24 + 2) & 0x1FLL;
    if (v6 != 1)
    {
      if (v6 == 26)
        goto LABEL_3;
      v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 80) + 48))(*(_QWORD *)(v3 + 80));
      if (a2 <= 31)
      {
        if (a2 != 1)
        {
          if (a2 == 2 && v7 != 2 && v7 != 4)
            goto LABEL_3;
          goto LABEL_18;
        }
        v17 = v7 > 4;
        v18 = 1 << v7;
        v19 = 22;
LABEL_27:
        v20 = v18 & v19;
        if (v17 || v20 == 0)
          goto LABEL_3;
        goto LABEL_18;
      }
      if (a2 != 32)
      {
        if (a2 != 64)
          goto LABEL_18;
        v17 = v7 > 4;
        v18 = 1 << v7;
        v19 = 26;
        goto LABEL_27;
      }
      if (v7 - 3 >= 2)
        goto LABEL_3;
    }
LABEL_18:
    LODWORD(v22) = a2;
    WTF::HashMap<unsigned int,std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>>,WTF::HashTableTraits>::add<decltype(nullptr)>((uint64_t)v23, (uint64_t *)(v3 + 224), (int *)&v22);
    v10 = v23[0];
    v11 = *(_QWORD *)(v23[0] + 8);
    if (v11)
    {
      WebCore::RenderElement::setStyle(v11, v24, 0, v9);
    }
    else
    {
      v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(WebCore::RenderScrollbar::owningRenderer((WebCore::RenderScrollbar *)v3)
                                                          + 24)
                                              + 8)
                                  + 40)
                      + 8);
      v22 = v3;
      WebCore::createRenderer<WebCore::RenderScrollbarPart,WebCore::Document &,WebCore::RenderStyle,WebCore::RenderScrollbar *,WebCore::ScrollbarPart &>(v23, v12, v24, &v22, &v25);
      v15 = (WebCore::RenderElement *)v23[0];
      v16 = *(_QWORD *)(v10 + 8);
      *(_QWORD *)(v10 + 8) = v23[0];
      if (v16)
      {
        WebCore::RenderObjectDeleter::operator()((uint64_t)v15, v16);
        v15 = *(WebCore::RenderElement **)(v10 + 8);
      }
      WebCore::RenderElement::initializeStyle(v15, v16, v13, v14);
    }
    return std::unique_ptr<WebCore::RenderStyle>::~unique_ptr[abi:sn180100](&v24, v5);
  }
  return result;
}

uint64_t WTF::HashMap<unsigned int,std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>>,WTF::HashTableTraits>::get(uint64_t *a1, int *a2)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  int v9;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(_DWORD *)(v2 - 8);
    v4 = *a2;
    v5 = 9 * ((v4 + ~(v4 << 15)) ^ ((v4 + ~(v4 << 15)) >> 10));
    v6 = (v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11);
    v7 = (v6 ^ HIWORD(v6)) & v3;
    v8 = *(_DWORD *)(v2 + 16 * v7);
    if (v8 == *a2)
      return *(_QWORD *)(v2 + 16 * v7 + 8);
    v9 = 1;
    while (v8)
    {
      v7 = ((_DWORD)v7 + v9) & v3;
      v8 = *(_DWORD *)(v2 + 16 * v7);
      ++v9;
      if (v8 == v4)
        return *(_QWORD *)(v2 + 16 * v7 + 8);
    }
  }
  return 0;
}

uint64_t WebCore::RenderScrollbarPart::layout(WebCore::RenderScrollbarPart *this)
{
  *((_QWORD *)this + 19) = 0;
  if (*(_BYTE *)(*((_QWORD *)this + 25) + 72))
    WebCore::RenderScrollbarPart::layoutVerticalPart((WebCore::RenderScrollbar **)this);
  else
    WebCore::RenderScrollbarPart::layoutHorizontalPart(this);
  return WebCore::RenderObject::clearNeedsLayout((uint64_t)this, 0);
}

void WebCore::RenderScrollbar::~RenderScrollbar(WebCore::RenderScrollbar *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;

  v3 = *((_QWORD *)this + 28);
  if (v3)
    WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::deallocateTable(v3, a2);
  v4 = (unsigned int *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  v7 = *((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v7)
  {
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7, a2);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  WebCore::Scrollbar::~Scrollbar(this);
}

{
  WTF *v2;
  void *v3;

  WebCore::RenderScrollbar::~RenderScrollbar(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::RenderScrollbar::owningRenderer(WebCore::RenderScrollbar *this)
{
  uint64_t v1;
  WebCore::Frame *v2;
  uint64_t result;
  char v4;
  uint64_t v5;

  v1 = *((_QWORD *)this + 27);
  if (v1)
  {
    v2 = *(WebCore::Frame **)(v1 + 8);
    if (v2)
      return WebCore::Frame::ownerRenderer(v2);
  }
  result = *(_QWORD *)(*((_QWORD *)this + 26) + 64) & 0xFFFFFFFFFFFFLL;
  if (result)
  {
    v4 = *(_BYTE *)(result + 45);
    if ((v4 & 2) != 0)
    {
      result = 105;
      __break(0xC471u);
    }
    else
    {
      while ((v4 & 4) == 0)
      {
        v5 = *(_QWORD *)(result + 32);
        if (!v5)
          return 0;
        result = *(_QWORD *)(v5 + 8);
        if (!result)
          return result;
        v4 = *(_BYTE *)(result + 45);
      }
    }
  }
  return result;
}

uint64_t WebCore::RenderScrollbar::setParent(WebCore::RenderScrollbar *this, WebCore::ScrollView *a2)
{
  uint64_t result;
  void *v5;

  result = WebCore::Widget::setParent(this, a2);
  if (!a2)
  {
    result = *((_QWORD *)this + 28);
    if (result)
    {
      *((_QWORD *)this + 28) = 0;
      return WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::deallocateTable(result, v5);
    }
  }
  return result;
}

void WebCore::RenderScrollbar::setEnabled(WebCore::RenderScrollbar *this, int a2)
{
  int v4;

  v4 = *((_BYTE *)this + 136) != 0;
  WebCore::Scrollbar::setEnabled((uint64_t)this, a2);
  if (v4 != a2)
    WebCore::RenderScrollbar::updateScrollbarParts(this);
}

void WebCore::RenderScrollbar::updateScrollbarParts(WebCore::RenderScrollbar *this)
{
  int v2;
  int v3;
  int v4;
  int v5;
  WebCore::RenderScrollbarPart *v6;
  WebCore::RenderScrollbarPart *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::RenderObject *v15;
  _QWORD v16[2];

  WebCore::RenderScrollbar::updateScrollbarPart((WebCore::RenderStyle **)this, 128);
  WebCore::RenderScrollbar::updateScrollbarPart((WebCore::RenderStyle **)this, 1);
  WebCore::RenderScrollbar::updateScrollbarPart((WebCore::RenderStyle **)this, 2);
  WebCore::RenderScrollbar::updateScrollbarPart((WebCore::RenderStyle **)this, 4);
  WebCore::RenderScrollbar::updateScrollbarPart((WebCore::RenderStyle **)this, 8);
  WebCore::RenderScrollbar::updateScrollbarPart((WebCore::RenderStyle **)this, 16);
  WebCore::RenderScrollbar::updateScrollbarPart((WebCore::RenderStyle **)this, 32);
  WebCore::RenderScrollbar::updateScrollbarPart((WebCore::RenderStyle **)this, 64);
  WebCore::RenderScrollbar::updateScrollbarPart((WebCore::RenderStyle **)this, 256);
  v2 = *((unsigned __int8 *)this + 72);
  WebCore::Widget::frameRect(this);
  if (v2)
    v5 = v3;
  else
    v5 = v4;
  LODWORD(v16[0]) = 128;
  v6 = (WebCore::RenderScrollbarPart *)WTF::HashMap<unsigned int,std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>>,WTF::HashTableTraits>::get((uint64_t *)this + 28, (int *)v16);
  if (v6)
  {
    v7 = v6;
    WebCore::RenderScrollbarPart::layout(v6);
    v8 = 160;
    if (!v2)
      v8 = 164;
    v9 = *(_DWORD *)((char *)v7 + v8) / 64;
  }
  else
  {
    v9 = 0;
  }
  if (v9 != v5)
  {
    v10 = WebCore::Widget::frameRect(this);
    WebCore::Widget::frameRect(this);
    if (v2)
      v13 = v9;
    else
      v13 = v11;
    if (v2)
      v14 = v12;
    else
      v14 = v9;
    v16[0] = v10;
    v16[1] = v13 | (v14 << 32);
    WebCore::Scrollbar::setFrameRect(this, (const WebCore::IntRect *)v16);
    v15 = (WebCore::RenderObject *)WebCore::RenderScrollbar::owningRenderer(this);
    if (v15)
      WebCore::RenderElement::setChildNeedsLayout(v15, 1);
  }
}

void WebCore::RenderScrollbar::paint(WebCore::RenderScrollbar *a1, uint64_t a2, int *a3)
{
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2))
    WebCore::RenderScrollbar::updateScrollbarParts(a1);
  else
    WebCore::Scrollbar::paint((uint64_t)a1, a2, a3);
}

WebCore::RenderStyle **WebCore::RenderScrollbar::setHoveredPart(WebCore::RenderStyle **result, int a2)
{
  int v3;
  WebCore::RenderStyle **v4;

  v3 = *((_DWORD *)result + 29);
  if (v3 != a2)
  {
    v4 = result;
    *((_DWORD *)result + 29) = a2;
    WebCore::RenderScrollbar::updateScrollbarPart(result, v3);
    WebCore::RenderScrollbar::updateScrollbarPart(v4, *((_DWORD *)v4 + 29));
    WebCore::RenderScrollbar::updateScrollbarPart(v4, 128);
    return WebCore::RenderScrollbar::updateScrollbarPart(v4, 256);
  }
  return result;
}

WebCore::RenderStyle **WebCore::RenderScrollbar::setPressedPart(uint64_t a1, int a2)
{
  uint64_t v4;
  void (*v5)(void);

  v4 = *(unsigned int *)(a1 + 120);
  if ((_DWORD)v4)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 80) + 104))(*(_QWORD *)(a1 + 80), a1, v4);
  *(_DWORD *)(a1 + 120) = a2;
  if (a2)
  {
    v5 = *(void (**)(void))(**(_QWORD **)(a1 + 80) + 104);
LABEL_7:
    v5();
    goto LABEL_8;
  }
  if (*(_DWORD *)(a1 + 116))
  {
    v5 = *(void (**)(void))(**(_QWORD **)(a1 + 80) + 104);
    goto LABEL_7;
  }
LABEL_8:
  WebCore::RenderScrollbar::updateScrollbarPart((WebCore::RenderStyle **)a1, v4);
  WebCore::RenderScrollbar::updateScrollbarPart((WebCore::RenderStyle **)a1, a2);
  WebCore::RenderScrollbar::updateScrollbarPart((WebCore::RenderStyle **)a1, 128);
  return WebCore::RenderScrollbar::updateScrollbarPart((WebCore::RenderStyle **)a1, 256);
}

uint64_t WebCore::RenderScrollbar::getScrollbarPseudoStyle(WebCore::Style **a1, WebCore::RenderScrollbar *this, int a3, int a4)
{
  uint64_t result;
  uint64_t v9;
  char v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  WebCore::Style *v20;
  int v21;
  WTF::StringImpl *v22;
  int v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;

  result = WebCore::RenderScrollbar::owningRenderer(this);
  if (result)
  {
    v9 = *(_QWORD *)((char *)this + 116);
    v10 = *((_BYTE *)this + 72);
    v11 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 48))(*((_QWORD *)this + 10));
    v12 = *((_BYTE *)this + 136);
    v13 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 328))(*((_QWORD *)this + 8));
    v14 = WebCore::RenderScrollbar::owningRenderer(this);
    v21 = a4;
    v15 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
    if (*MEMORY[0x1E0CBF2F8])
      *(_DWORD *)v15 += 2;
    v22 = v15;
    v23 = a3;
    v24 = v9;
    v25 = v10;
    v26 = v11;
    v27 = v12;
    v28 = v13;
    v29 = 1;
    v16 = WebCore::RenderScrollbar::owningRenderer(this);
    WebCore::RenderElement::getUncachedPseudoStyle(v14, &v21, v16 + 80, 0, a1);
    result = (uint64_t)v22;
    v22 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v17);
      else
        *(_DWORD *)result -= 2;
    }
    if (*a1)
    {
      v18 = *((_QWORD *)this + 27);
      if (v18)
      {
        v19 = *(_QWORD *)(v18 + 8);
        if (v19)
        {
          result = *(_QWORD *)(v19 + 288);
          if (result)
          {
            result = WebCore::LocalFrameView::isTransparent((WebCore::LocalFrameView *)result);
            if ((result & 1) == 0)
            {
              result = WebCore::RenderStyle::hasBackground(*a1);
              if ((result & 1) == 0)
              {
                v20 = *a1;
                WebCore::StyleColor::StyleColor((uint64_t)&v21, 0xFFFFFFFF);
                result = WebCore::RenderStyle::setBackgroundColor((uint64_t)v20, (const WebCore::StyleColor *)&v21);
                if ((_DWORD)v22 != -1)
                  return ((uint64_t (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v22])(&v30, &v21);
              }
            }
          }
        }
      }
    }
  }
  else
  {
    *a1 = 0;
  }
  return result;
}

uint64_t WebCore::pseudoForScrollbarPart(int a1)
{
  uint64_t v1;
  unsigned int v3;

  v1 = (a1 - 1);
  if (v1 > 0x3F)
    goto LABEL_8;
  if (((1 << (a1 - 1)) & 0x8000000080000003) != 0)
    return 18;
  if (((1 << (a1 - 1)) & 0x8008) != 0)
    return 20;
  if (v1 == 7)
    return 17;
LABEL_8:
  if (a1 == 256)
    v3 = 19;
  else
    v3 = 10;
  if (a1 == 128)
    return 10;
  else
    return v3;
}

uint64_t *WTF::HashMap<unsigned int,std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>>,WTF::HashTableTraits>::remove(uint64_t *result, int a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *result;
  if (*result)
  {
    v3 = result;
    result = (uint64_t *)WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<unsigned int>>,unsigned int>(*result, a2);
    v4 = *(unsigned int *)(v2 - 4);
    if (result)
      v5 = (uint64_t)result;
    else
      v5 = v2 + 16 * v4;
    if (v2 + 16 * v4 != v5)
      return WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::removeWithoutEntryConsistencyCheck(v3, v5);
  }
  return result;
}

uint64_t WTF::HashMap<unsigned int,std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>>,WTF::HashTableTraits>::add<decltype(nullptr)>(uint64_t result, uint64_t *a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;

  v5 = result;
  v6 = *a2;
  if (*a2
    || (result = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::expand(a2, 0), (v6 = *a2) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = *a3;
  v10 = 9 * ((v9 + ~(v9 << 15)) ^ ((v9 + ~(v9 << 15)) >> 10));
  v11 = (v10 ^ (v10 >> 6)) + ~((v10 ^ (v10 >> 6)) << 11);
  v12 = (v11 ^ HIWORD(v11)) & v8;
  v13 = v6 + 16 * v12;
  v14 = *(_DWORD *)v13;
  if (*(_DWORD *)v13)
  {
    v15 = 0;
    v16 = 1;
    do
    {
      if (v14 == v9)
      {
        if ((v7 & 1) != 0)
          v26 = 0;
        else
          v26 = *(unsigned int *)(v6 - 4);
        v25 = 0;
        v24 = v6 + 16 * v26;
        goto LABEL_23;
      }
      if (v14 == -1)
        v15 = (_QWORD *)v13;
      v12 = (v12 + v16) & v8;
      v13 = v6 + 16 * v12;
      v14 = *(_DWORD *)v13;
      ++v16;
    }
    while (*(_DWORD *)v13);
    if (v15)
    {
      *v15 = 0;
      v15[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v9 = *a3;
      v13 = (uint64_t)v15;
    }
  }
  *(_DWORD *)v13 = v9;
  v17 = *(_QWORD *)(v13 + 8);
  *(_QWORD *)(v13 + 8) = 0;
  if (v17)
    result = WebCore::RenderObjectDeleter::operator()(result, v17);
  v18 = *a2;
  if (*a2)
    v19 = *(_DWORD *)(v18 - 12) + 1;
  else
    v19 = 1;
  *(_DWORD *)(v18 - 12) = v19;
  v20 = *a2;
  if (*a2)
    v21 = *(_DWORD *)(v20 - 12);
  else
    v21 = 0;
  v22 = (*(_DWORD *)(v20 - 16) + v21);
  v23 = *(unsigned int *)(v20 - 4);
  if (v23 > 0x400)
  {
    if (v23 > 2 * v22)
      goto LABEL_19;
LABEL_29:
    result = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::expand(a2, v13);
    v13 = result;
    v20 = *a2;
    if (*a2)
      v23 = *(unsigned int *)(v20 - 4);
    else
      v23 = 0;
    goto LABEL_19;
  }
  if (3 * v23 <= 4 * v22)
    goto LABEL_29;
LABEL_19:
  v24 = v20 + 16 * v23;
  v25 = 1;
LABEL_23:
  *(_QWORD *)v5 = v13;
  *(_QWORD *)(v5 + 8) = v24;
  *(_BYTE *)(v5 + 16) = v25;
  return result;
}

double WebCore::createRenderer<WebCore::RenderScrollbarPart,WebCore::Document &,WebCore::RenderStyle,WebCore::RenderScrollbar *,WebCore::ScrollbarPart &>(uint64_t *a1, uint64_t a2, _QWORD *a3, uint64_t *a4, _DWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double result;

  v10 = bmalloc::api::isoAllocate();
  v11 = *a4;
  LODWORD(a5) = *a5;
  v12 = WebCore::RenderLayerModelObject::RenderLayerModelObject(v10, 31, a2, a3, 76, 0);
  result = 0.0;
  *(_OWORD *)(v12 + 184) = 0u;
  *(_OWORD *)(v12 + 168) = 0u;
  *(_OWORD *)(v12 + 152) = 0u;
  *(_QWORD *)v12 = off_1E342F9F8;
  *(_QWORD *)(v12 + 200) = v11;
  *(_DWORD *)(v12 + 208) = (_DWORD)a5;
  *a1 = v12;
  return result;
}

_QWORD *WebCore::RenderScrollbar::paintPart(_QWORD *result, WebCore::GraphicsContext *a2, int a3, int32x4_t *a4)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  int v10;
  WebCore::RenderScrollbarPart *v11;
  void *v12;
  uint64_t v13;
  int8x8_t v14;
  int8x8_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int8x16_t v18;
  int32x4_t v19;
  int8x16_t v20;
  int32x4_t *v21;
  WebCore::GraphicsContext *v22;
  CGFloat v23;
  CGFloat v24;
  CGFloat v25;
  CGFloat v26;
  const CGRect *v27;
  void *v28;
  int8x8_t v29;
  CGRect v30;

  v4 = result[28];
  if (v4)
  {
    v5 = *(_DWORD *)(v4 - 8);
    v6 = 9 * ((~(a3 << 15) + a3) ^ ((~(a3 << 15) + a3) >> 10));
    v7 = (v6 ^ (v6 >> 6)) + ~((v6 ^ (v6 >> 6)) << 11);
    v8 = v5 & (v7 ^ HIWORD(v7));
    v9 = *(_DWORD *)(v4 + 16 * v8);
    if (v9 == a3)
    {
LABEL_6:
      v11 = *(WebCore::RenderScrollbarPart **)(v4 + 16 * v8 + 8);
      if (v11)
      {
        v12 = (void *)result[5];
        if (v12)
        {
          v21 = a4;
          v22 = a2;
          v28 = (void *)result[5];
          if (objc_msgSend(v12, "conformsToProtocol:", &unk_1EE342188))
            v28 = (void *)objc_msgSend(v28, "superview");
          objc_msgSend(v28, "frame", v28);
          v30.origin.x = v23;
          v30.origin.y = v24;
          v30.size.width = v25;
          v30.size.height = v26;
          v13 = WebCore::enclosingIntRect(&v30, v27);
          a2 = v22;
          a4 = v21;
        }
        else
        {
          v13 = result[6];
        }
        v14 = (int8x8_t)vcgt_s32((int32x2_t)v13, (int32x2_t)0xFE000000FE000000);
        v15 = vorr_s8((int8x8_t)(*(_QWORD *)&v14 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, (int32x2_t)v13), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32((int32x2_t)v13, 6uLL)), v14));
        v16 = *a4;
        v29 = v15;
        v17.i64[0] = 0xFE000000FE000000;
        v17.i64[1] = 0xFE000000FE000000;
        v18 = (int8x16_t)vcgtq_s32(v16, v17);
        v19.i64[0] = 0xFE000000FE000000;
        v19.i64[1] = 0xFE000000FE000000;
        v20.i64[0] = 0x8000000080000000;
        v20.i64[1] = 0x8000000080000000;
        v30.origin = (CGPoint)vorrq_s8((int8x16_t)(*(_OWORD *)&v18 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vbicq_s8(vbslq_s8((int8x16_t)vcgtq_s32(v19, v16), v20, (int8x16_t)vshlq_n_s32(v16, 6uLL)), v18));
        return (_QWORD *)WebCore::RenderScrollbarPart::paintIntoRect(v11, a2, (const WebCore::LayoutPoint *)&v29, (int32x4_t *)&v30);
      }
    }
    else
    {
      v10 = 1;
      while (v9)
      {
        v8 = ((_DWORD)v8 + v10) & v5;
        v9 = *(_DWORD *)(v4 + 16 * v8);
        ++v10;
        if (v9 == a3)
          goto LABEL_6;
      }
    }
  }
  return result;
}

uint64_t WebCore::RenderScrollbarPart::paintIntoRect(WebCore::RenderScrollbarPart *this, WebCore::GraphicsContext *a2, const WebCore::LayoutPoint *a3, int32x4_t *a4)
{
  unsigned __int32 v8;
  int v9;
  uint64_t v10;
  BOOL v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t result;
  float v15;
  BOOL v16;
  int v17;
  unint64_t v18;
  int v19;
  int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  __int32 v24;
  __int32 v25;
  int v26;
  int v27;
  BOOL v28;
  int v29;
  int32x2_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  __int16 v43;
  __int128 v44;
  _BYTE v45[21];
  uint64_t v46;
  uint64_t v47;
  WebCore::GraphicsContext *v48;

  v8 = a4->u32[1];
  v9 = *((_DWORD *)a3 + 1);
  LODWORD(v10) = ((unsigned __int32)a4->i32[0] >> 31) + 0x7FFFFFFF;
  if (__OFSUB__(a4->i32[0], *(_DWORD *)a3))
    v10 = v10;
  else
    v10 = (a4->i32[0] - *(_DWORD *)a3);
  v11 = __OFSUB__(v8, v9);
  v12 = v8 - v9;
  LODWORD(v13) = (v8 >> 31) + 0x7FFFFFFF;
  if (v11)
    v13 = v13;
  else
    v13 = v12;
  *((_QWORD *)this + 19) = v10 | (v13 << 32);
  *((_DWORD *)this + 40) = a4->i32[2];
  *((_DWORD *)this + 41) = a4->i32[3];
  result = (*(uint64_t (**)(WebCore::GraphicsContext *))(*(_QWORD *)a2 + 40))(a2);
  if ((result & 1) == 0)
  {
    v15 = *(float *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 4);
    if (v15 != 0.0)
    {
      v16 = v15 >= 1.0 || *((_DWORD *)this + 52) == 128;
      v17 = !v16;
      if (!v16)
      {
        (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 96))(a2, 1);
        v42 = (int8x16_t)vmulq_f32(vcvtq_f32_s32(*a4), (float32x4_t)vdupq_n_s32(0x3C800000u));
        (*(void (**)(WebCore::GraphicsContext *, int8x16_t *))(*(_QWORD *)a2 + 456))(a2, &v42);
        (*(void (**)(WebCore::GraphicsContext *, float))(*(_QWORD *)a2 + 592))(a2, *(float *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 4));
      }
      v18 = HIDWORD(a4->i64[0]);
      v19 = a4->i64[0] + 63;
      if ((int)a4->i64[0] >= 0)
        v19 = a4->i64[0];
      v20 = v19 >> 6;
      v21 = a4->i64[0] - (v19 & 0xFFFFFFC0);
      v22 = (int)v18 / 64;
      v23 = v18 - (v19 & 0xFFFFFFC0);
      v25 = a4->i32[2];
      v24 = a4->i32[3];
      v11 = __OFADD__(v21, v25);
      v26 = v21 + v25;
      if (v11)
        v26 = (v21 >> 31) + 0x7FFFFFFF;
      v11 = __OFADD__(v23, v24);
      v27 = v23 + v24;
      if (v11)
        v27 = (v23 >> 31) + 0x7FFFFFFF;
      v28 = -v26 < 0;
      v29 = v26 & 0x3F;
      v30 = (int32x2_t)vsra_n_u32((uint32x2_t)__PAIR64__(v27, v26), (uint32x2_t)vcltz_s32((int32x2_t)__PAIR64__(v27, v26)), 0x1AuLL);
      v31 = -v26 & 0x3F;
      if (v28)
        v32 = v29;
      else
        v32 = -v31;
      v28 = -v27 < 0;
      v33 = -v27 & 0x3F;
      v34 = v27 & 0x3F;
      if (!v28)
        v34 = -v33;
      v35.i64[0] = __PAIR64__(v23, v21);
      v35.i64[1] = __PAIR64__(v34, v32);
      v36.i64[0] = 0x2000000020;
      v36.i64[1] = 0x2000000020;
      v37 = vaddq_s32(v35, v36);
      v36.i64[0] = __PAIR64__(v22, v20);
      v36.u64[1] = (unint64_t)vsub_s32(vshr_n_s32(v30, 6uLL), (int32x2_t)*(_OWORD *)&vshrq_n_s32(v37, 6uLL));
      v38 = vsraq_n_s32(v36, v37, 6uLL);
      v39.i64[0] = 0xFE000000FE000000;
      v39.i64[1] = 0xFE000000FE000000;
      v40 = (int8x16_t)vcgtq_s32(v38, v39);
      v37.i64[0] = 0xFE000000FE000000;
      v37.i64[1] = 0xFE000000FE000000;
      v41.i64[0] = 0x8000000080000000;
      v41.i64[1] = 0x8000000080000000;
      v42 = vorrq_s8((int8x16_t)(*(_OWORD *)&v40 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vbicq_s8(vbslq_s8((int8x16_t)vcgtq_s32(v37, v38), v41, (int8x16_t)vshlq_n_s32(v38, 6uLL)), v40));
      v43 = 0;
      v44 = 0u;
      memset(v45, 0, sizeof(v45));
      v46 = 0;
      v47 = 0;
      v48 = a2;
      WebCore::RenderBlock::paint((uint64_t)this, (WebCore::PaintInfo *)&v42, a3);
      v43 = 2;
      WebCore::RenderBlock::paint((uint64_t)this, (WebCore::PaintInfo *)&v42, a3);
      v43 = 4;
      WebCore::RenderBlock::paint((uint64_t)this, (WebCore::PaintInfo *)&v42, a3);
      v43 = 8;
      WebCore::RenderBlock::paint((uint64_t)this, (WebCore::PaintInfo *)&v42, a3);
      v43 = 16;
      result = WebCore::RenderBlock::paint((uint64_t)this, (WebCore::PaintInfo *)&v42, a3);
      if (v17)
      {
        (*(void (**)(WebCore::GraphicsContext *))(*(_QWORD *)a2 + 608))(a2);
        return (*(uint64_t (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 104))(a2, 1);
      }
    }
  }
  return result;
}

unint64_t WebCore::RenderScrollbar::buttonRect(uint64_t a1, int a2)
{
  uint64_t v2;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  const WebCore::LayoutRect *v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  __int128 v34;

  v2 = *(_QWORD *)(a1 + 224);
  if (!v2)
    goto LABEL_11;
  v5 = *(_DWORD *)(v2 - 8);
  v6 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
  v7 = (v6 ^ (v6 >> 6)) + ~((v6 ^ (v6 >> 6)) << 11);
  v8 = v5 & (v7 ^ HIWORD(v7));
  v9 = *(_DWORD *)(v2 + 16 * v8);
  if (v9 != a2)
  {
    v10 = 1;
    while (v9)
    {
      v8 = ((_DWORD)v8 + v10) & v5;
      v9 = *(_DWORD *)(v2 + 16 * v8);
      ++v10;
      if (v9 == a2)
        goto LABEL_6;
    }
    goto LABEL_11;
  }
LABEL_6:
  v11 = v2 + 16 * v8;
  v12 = *(_QWORD *)(v11 + 8);
  if (!v12)
  {
LABEL_11:
    LODWORD(v19) = 0;
    LODWORD(v18) = 0;
    return v18 | ((unint64_t)v19 << 32);
  }
  WebCore::RenderScrollbarPart::layout(*(WebCore::RenderScrollbarPart **)(v11 + 8));
  v13 = *(unsigned __int8 *)(a1 + 72);
  v34 = *(_OWORD *)(v12 + 152);
  WebCore::snappedIntRect((WebCore *)&v34, v14);
  v16 = v15;
  v17 = HIDWORD(v15);
  if (a2 == 64)
  {
    LODWORD(v18) = WebCore::Widget::frameRect((WebCore::Widget *)a1);
    v21 = WebCore::Widget::frameRect((WebCore::Widget *)a1);
    if (v13)
    {
      v23 = HIDWORD(v21);
      WebCore::Widget::frameRect((WebCore::Widget *)a1);
      v25 = v23 - v17;
LABEL_19:
      v19 = v25 + HIDWORD(v24);
      goto LABEL_20;
    }
    v33 = v18 - v16;
    goto LABEL_24;
  }
  if (a2 == 2)
  {
    WebCore::RenderScrollbar::buttonRect(a1, 1);
    v27 = v26;
    v28 = WebCore::Widget::frameRect((WebCore::Widget *)a1);
    LODWORD(v18) = v28;
    if (v13)
    {
      v19 = ((unint64_t)WebCore::Widget::frameRect((WebCore::Widget *)a1) >> 32) + HIDWORD(v27);
LABEL_20:
      WebCore::Widget::frameRect((WebCore::Widget *)a1);
      return v18 | ((unint64_t)v19 << 32);
    }
    LODWORD(v18) = v28 + v27;
LABEL_25:
    v19 = (unint64_t)WebCore::Widget::frameRect((WebCore::Widget *)a1) >> 32;
    WebCore::Widget::frameRect((WebCore::Widget *)a1);
    return v18 | ((unint64_t)v19 << 32);
  }
  if (a2 != 1)
  {
    WebCore::RenderScrollbar::buttonRect(a1, 64);
    v30 = v29;
    LODWORD(v18) = WebCore::Widget::frameRect((WebCore::Widget *)a1);
    v31 = WebCore::Widget::frameRect((WebCore::Widget *)a1);
    if (v13)
    {
      v32 = HIDWORD(v31);
      WebCore::Widget::frameRect((WebCore::Widget *)a1);
      v25 = v32 - (v17 + HIDWORD(v30));
      goto LABEL_19;
    }
    v33 = v18 - (v30 + v16);
LABEL_24:
    LODWORD(v18) = v33 + v22;
    goto LABEL_25;
  }
  v18 = WebCore::Widget::frameRect((WebCore::Widget *)a1);
  WebCore::Widget::frameRect((WebCore::Widget *)a1);
  v19 = HIDWORD(v18);
  return v18 | ((unint64_t)v19 << 32);
}

unint64_t WebCore::RenderScrollbar::trackRect(WebCore::RenderScrollbar *this, int a2)
{
  WebCore::RenderScrollbarPart *v4;
  WebCore::RenderScrollbarPart *v5;
  int v6;
  int v7;
  unsigned int v8;
  unint64_t v9;
  int v11;
  int v12;

  v12 = 256;
  v4 = (WebCore::RenderScrollbarPart *)WTF::HashMap<unsigned int,std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>>,WTF::HashTableTraits>::get((uint64_t *)this + 28, &v12);
  v5 = v4;
  if (!v4)
  {
    v11 = 0;
    v6 = 0;
    if (*((_BYTE *)this + 72))
      goto LABEL_4;
LABEL_9:
    v8 = v11 + a2 + WebCore::Widget::frameRect(this);
    v9 = (unint64_t)WebCore::Widget::frameRect(this) >> 32;
    WebCore::Widget::frameRect(this);
    WebCore::Widget::frameRect(this);
    return v8 | (v9 << 32);
  }
  WebCore::RenderScrollbarPart::layout(v4);
  if (!*((_BYTE *)this + 72))
  {
    v11 = *((_DWORD *)v5 + 45) / 64;
    goto LABEL_9;
  }
  v6 = *((_DWORD *)v5 + 42) / 64;
LABEL_4:
  v7 = v6 + a2;
  v8 = WebCore::Widget::frameRect(this);
  v9 = (v7 + ((unint64_t)WebCore::Widget::frameRect(this) >> 32));
  WebCore::Widget::frameRect(this);
  WebCore::Widget::frameRect(this);
  return v8 | (v9 << 32);
}

uint64_t WebCore::RenderScrollbarPart::marginLeft(WebCore::RenderScrollbarPart *this)
{
  return *((unsigned int *)this + 45);
}

uint64_t WebCore::RenderScrollbarPart::marginRight(WebCore::RenderScrollbarPart *this)
{
  return *((unsigned int *)this + 43);
}

uint64_t WebCore::RenderScrollbarPart::marginTop(WebCore::RenderScrollbarPart *this)
{
  return *((unsigned int *)this + 42);
}

uint64_t WebCore::RenderScrollbarPart::marginBottom(WebCore::RenderScrollbarPart *this)
{
  return *((unsigned int *)this + 44);
}

unint64_t WebCore::RenderScrollbar::trackPieceRectWithMargins(uint64_t a1, int a2, int *a3)
{
  WebCore::RenderScrollbarPart *v5;
  uint64_t v6;
  int v7;
  WebCore::RenderScrollbarPart *v9;
  int v10;
  unsigned int v11;
  BOOL v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;

  v19 = a2;
  v5 = (WebCore::RenderScrollbarPart *)WTF::HashMap<unsigned int,std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>>,WTF::HashTableTraits>::get((uint64_t *)(a1 + 224), &v19);
  if (v5)
  {
    v9 = v5;
    WebCore::RenderScrollbarPart::layout(v5);
    v7 = *a3;
    v6 = a3[1];
    if (*(_BYTE *)(a1 + 72))
    {
      v10 = *((_DWORD *)v9 + 42);
      v11 = (_DWORD)v6 << 6;
      if ((int)v6 < -33554432)
        v11 = 0x80000000;
      if ((int)v6 > 0x1FFFFFF)
        v11 = 0x7FFFFFFF;
      v12 = __OFADD__(v11, v10);
      v13 = v11 + v10;
      v14 = (v11 >> 31) + 0x7FFFFFFF;
      if (v12)
        v13 = v14;
      v6 = (v13 / 64);
      (*(void (**)(WebCore::RenderScrollbarPart *))(*(_QWORD *)v9 + 1080))(v9);
      (*(uint64_t (**)(WebCore::RenderScrollbarPart *))(*(_QWORD *)v9 + 1088))(v9);
    }
    else
    {
      v15 = *((_DWORD *)v9 + 45);
      v16 = v7 << 6;
      if (v7 < -33554432)
        v16 = 0x80000000;
      if (v7 > 0x1FFFFFF)
        v16 = 0x7FFFFFFF;
      v12 = __OFADD__(v16, v15);
      v17 = v16 + v15;
      v18 = (v16 >> 31) + 0x7FFFFFFF;
      if (v12)
        v17 = v18;
      v7 = v17 / 64;
      (*(void (**)(WebCore::RenderScrollbarPart *))(*(_QWORD *)v9 + 1096))(v9);
      (*(uint64_t (**)(WebCore::RenderScrollbarPart *))(*(_QWORD *)v9 + 1104))(v9);
    }
  }
  else
  {
    v7 = *a3;
    v6 = a3[1];
  }
  return v7 | (unint64_t)(v6 << 32);
}

BOOL WebCore::RenderScrollbar::isHiddenByStyle(WebCore::RenderScrollbar *this)
{
  void *v1;
  WebCore::RenderStyle *v2;
  _BOOL8 v3;
  WTF *v4;
  void *v5;
  WebCore::RenderStyle *v7;

  WebCore::RenderScrollbar::getScrollbarPseudoStyle(&v7, this, 128, 10);
  v2 = v7;
  if (!v7)
    return 0;
  v3 = (*((_QWORD *)v7 + 2) & 0x1FLL) == 26;
  v7 = 0;
  WebCore::RenderStyle::~RenderStyle(v2, v1);
  if (*(_DWORD *)v4)
  {
    *((_OWORD *)v4 + 2) = 0u;
    *((_OWORD *)v4 + 3) = 0u;
    *(_OWORD *)v4 = 0u;
    *((_OWORD *)v4 + 1) = 0u;
  }
  else
  {
    WTF::fastFree(v4, v5);
  }
  return v3;
}

uint64_t WebCore::RenderScrollbarPart::operator new(uint64_t this)
{
  if (this == 216)
    return bmalloc::api::isoAllocate();
  __break(0xC471u);
  return this;
}

double WebCore::RenderScrollbarPart::RenderScrollbarPart(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, int a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double result;

  v8 = WebCore::RenderObject::RenderObject(a1, 31, a2, 92, 0);
  *(_QWORD *)v8 = off_1E3422BC8;
  *(_QWORD *)(v8 + 70) = 0;
  *(_QWORD *)(v8 + 64) = 0;
  *(_DWORD *)(v8 + 80) = 0;
  v9 = a3[1];
  a3[1] = 0;
  *(_QWORD *)(v8 + 88) = v9;
  *(_QWORD *)(v8 + 96) = a3[2];
  v10 = a3[3];
  a3[3] = 0;
  *(_QWORD *)(v8 + 104) = v10;
  v11 = a3[4];
  a3[4] = 0;
  *(_QWORD *)(v8 + 112) = v11;
  *(_QWORD *)(v8 + 120) = a3[5];
  v12 = a3[6];
  a3[6] = 0;
  *(_QWORD *)(v8 + 128) = v12;
  v13 = a3[7];
  a3[7] = 0;
  *(_QWORD *)(v8 + 136) = v13;
  result = 0.0;
  *(_OWORD *)(v8 + 144) = 0u;
  *(_OWORD *)(v8 + 160) = 0u;
  *(_OWORD *)(v8 + 176) = 0u;
  *(_QWORD *)v8 = off_1E342F9F8;
  *(_QWORD *)(v8 + 192) = 0;
  *(_QWORD *)(v8 + 200) = a4;
  *(_DWORD *)(v8 + 208) = a5;
  return result;
}

void WebCore::RenderScrollbarPart::~RenderScrollbarPart(WebCore::RenderScrollbarPart *this, void *a2)
{
  WTF *v3;

  *(_QWORD *)this = off_1E341F268;
  if ((*(_WORD *)((_BYTE *)this + 69) & 0x400) != 0)
    WTF::HashMap<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBlockRareData>>,WTF::HashTableTraits>::remove<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>((uint64_t *)WebCore::gRareDataMap, (uint64_t)this);
  *(_QWORD *)this = off_1E34201A0;
  v3 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
}

double WebCore::RenderScrollbarPart::operator delete(WebCore::RenderBlock *a1, void *a2)
{
  uint64_t v2;
  void *v3;
  double result;

  WebCore::RenderBlock::~RenderBlock(a1, a2);
  if (*(_DWORD *)(v2 + 16))
  {
    *(_QWORD *)(v2 + 208) = 0;
    result = 0.0;
    *(_OWORD *)(v2 + 176) = 0u;
    *(_OWORD *)(v2 + 192) = 0u;
    *(_OWORD *)(v2 + 144) = 0u;
    *(_OWORD *)(v2 + 160) = 0u;
    *(_OWORD *)(v2 + 112) = 0u;
    *(_OWORD *)(v2 + 128) = 0u;
    *(_OWORD *)(v2 + 80) = 0u;
    *(_OWORD *)(v2 + 96) = 0u;
    *(_OWORD *)(v2 + 48) = 0u;
    *(_OWORD *)(v2 + 64) = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_OWORD *)v2 = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate((bmalloc::api *)v2, v3);
  }
  return result;
}

uint64_t WebCore::RenderScrollbarPart::layoutHorizontalPart(WebCore::RenderScrollbarPart *this)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  double v5;
  int v6;
  uint64_t result;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  double v11;
  int v12;
  CGFloat v13;
  CGFloat v14;
  CGFloat v15;
  CGFloat v16;
  const CGRect *v17;
  CGFloat v18;
  CGFloat v19;
  CGFloat v20;
  CGFloat v21;
  const CGRect *v22;
  CGRect v23;

  if (*((_DWORD *)this + 52) == 128)
  {
    v2 = *((_QWORD *)this + 25);
    v3 = *(void **)(v2 + 40);
    if (v3)
    {
      if (objc_msgSend(v3, "conformsToProtocol:", &unk_1EE342188))
        v3 = (void *)objc_msgSend(v3, "superview");
      objc_msgSend(v3, "frame");
      v23.origin.x = v13;
      v23.origin.y = v14;
      v23.size.width = v15;
      v23.size.height = v16;
      WebCore::enclosingIntRect(&v23, v17);
    }
    else
    {
      v4 = *(_QWORD *)(v2 + 56);
    }
    v5 = (float)(int)v4 * 64.0;
    if (v5 >= 2147483650.0)
    {
      v6 = 0x7FFFFFFF;
    }
    else if (v5 <= -2147483650.0)
    {
      v6 = 0x80000000;
    }
    else
    {
      v6 = (int)v5;
    }
    *((_DWORD *)this + 40) = v6;
    return WebCore::RenderScrollbarPart::computeScrollbarHeight((WebCore::RenderScrollbar **)this);
  }
  else
  {
    result = WebCore::RenderScrollbarPart::computeScrollbarWidth((WebCore::RenderScrollbar **)this);
    v8 = *((_QWORD *)this + 25);
    v9 = *(void **)(v8 + 40);
    if (v9)
    {
      if (objc_msgSend(v9, "conformsToProtocol:", &unk_1EE342188))
        v9 = (void *)objc_msgSend(v9, "superview");
      objc_msgSend(v9, "frame");
      v23.origin.x = v18;
      v23.origin.y = v19;
      v23.size.width = v20;
      v23.size.height = v21;
      result = WebCore::enclosingIntRect(&v23, v22);
    }
    else
    {
      v10 = *(_QWORD *)(v8 + 56);
    }
    v11 = (float)SHIDWORD(v10) * 64.0;
    if (v11 >= 2147483650.0)
    {
      v12 = 0x7FFFFFFF;
    }
    else if (v11 <= -2147483650.0)
    {
      v12 = 0x80000000;
    }
    else
    {
      v12 = (int)v11;
    }
    *((_DWORD *)this + 41) = v12;
  }
  return result;
}

uint64_t WebCore::RenderScrollbarPart::layoutVerticalPart(WebCore::RenderScrollbar **this)
{
  uint64_t result;
  int v3;
  double v4;
  int v5;
  int v6;
  double v7;
  int v8;

  if (*((_DWORD *)this + 52) == 128)
  {
    WebCore::RenderScrollbarPart::computeScrollbarWidth(this);
    result = WebCore::Widget::frameRect(this[25]);
    v4 = (float)v3 * 64.0;
    if (v4 >= 2147483650.0)
    {
      v5 = 0x7FFFFFFF;
    }
    else if (v4 <= -2147483650.0)
    {
      v5 = 0x80000000;
    }
    else
    {
      v5 = (int)v4;
    }
    *((_DWORD *)this + 41) = v5;
  }
  else
  {
    WebCore::Widget::frameRect(this[25]);
    v7 = (float)v6 * 64.0;
    if (v7 >= 2147483650.0)
    {
      v8 = 0x7FFFFFFF;
    }
    else if (v7 <= -2147483650.0)
    {
      v8 = 0x80000000;
    }
    else
    {
      v8 = (int)v7;
    }
    *((_DWORD *)this + 40) = v8;
    return WebCore::RenderScrollbarPart::computeScrollbarHeight(this);
  }
  return result;
}

uint64_t WebCore::RenderScrollbarPart::computeScrollbarHeight(WebCore::RenderScrollbar **this)
{
  uint64_t result;
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  double v8;
  int v9;

  result = WebCore::RenderScrollbar::owningRenderer(this[25]);
  if (result)
  {
    v3 = WebCore::calcScrollbarThicknessUsing(0, (unsigned __int8 *)(*((_QWORD *)this[11] + 1) + 12));
    v4 = WebCore::calcScrollbarThicknessUsing((WebCore::ScrollbarTheme *)1, (unsigned __int8 *)(*((_QWORD *)this[11] + 1) + 36));
    v5 = *((_QWORD *)this[11] + 1);
    v6 = v3;
    if (*(_BYTE *)(v5 + 48) != 13)
      v6 = WebCore::calcScrollbarThicknessUsing((WebCore::ScrollbarTheme *)2, (unsigned __int8 *)(v5 + 44));
    if (v3 >= v6)
      v7 = v6;
    else
      v7 = v3;
    if (v4 > v7)
      v7 = v4;
    v8 = (float)v7 * 64.0;
    if (v8 >= 2147483650.0)
    {
      v9 = 0x7FFFFFFF;
    }
    else if (v8 <= -2147483650.0)
    {
      v9 = 0x80000000;
    }
    else
    {
      v9 = (int)v8;
    }
    *((_DWORD *)this + 41) = v9;
    *((_DWORD *)this + 42) = WebCore::minimumValueForLength((unsigned __int8 *)(*((_QWORD *)this[11] + 3) + 40), 0);
    result = WebCore::minimumValueForLength((unsigned __int8 *)(*((_QWORD *)this[11] + 3) + 56), 0);
    *((_DWORD *)this + 44) = result;
  }
  return result;
}

uint64_t WebCore::RenderScrollbarPart::computeScrollbarWidth(WebCore::RenderScrollbar **this)
{
  uint64_t result;
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  double v8;
  int v9;

  result = WebCore::RenderScrollbar::owningRenderer(this[25]);
  if (result)
  {
    v3 = WebCore::calcScrollbarThicknessUsing(0, (unsigned __int8 *)(*((_QWORD *)this[11] + 1) + 4));
    v4 = WebCore::calcScrollbarThicknessUsing((WebCore::ScrollbarTheme *)1, (unsigned __int8 *)(*((_QWORD *)this[11] + 1) + 20));
    v5 = *((_QWORD *)this[11] + 1);
    v6 = v3;
    if (*(_BYTE *)(v5 + 32) != 13)
      v6 = WebCore::calcScrollbarThicknessUsing((WebCore::ScrollbarTheme *)2, (unsigned __int8 *)(v5 + 28));
    if (v3 >= v6)
      v7 = v6;
    else
      v7 = v3;
    if (v4 > v7)
      v7 = v4;
    v8 = (float)v7 * 64.0;
    if (v8 >= 2147483650.0)
    {
      v9 = 0x7FFFFFFF;
    }
    else if (v8 <= -2147483650.0)
    {
      v9 = 0x80000000;
    }
    else
    {
      v9 = (int)v8;
    }
    *((_DWORD *)this + 40) = v9;
    *((_DWORD *)this + 45) = WebCore::minimumValueForLength((unsigned __int8 *)(*((_QWORD *)this[11] + 3) + 64), 0);
    result = WebCore::minimumValueForLength((unsigned __int8 *)(*((_QWORD *)this[11] + 3) + 48), 0);
    *((_DWORD *)this + 43) = result;
  }
  return result;
}

uint64_t WebCore::calcScrollbarThicknessUsing(WebCore::ScrollbarTheme *a1, unsigned __int8 *a2)
{
  int v2;
  uint64_t *v5;

  v2 = a2[4];
  if ((v2 & 0xFFFFFFF7) == 3)
    goto LABEL_11;
  if ((v2 - 7) < 4 || v2 == 0)
  {
    if ((_DWORD)a1 != 1 || a2[4])
      goto LABEL_11;
    return ((int)WebCore::minimumValueForLength(a2, 0) / 64);
  }
  if ((v2 - 5) >= 2)
    return ((int)WebCore::minimumValueForLength(a2, 0) / 64);
LABEL_11:
  v5 = WebCore::ScrollbarTheme::theme(a1);
  return (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(*v5 + 40))(v5, 0, 1);
}

void WebCore::RenderScrollbarPart::styleDidChange(uint64_t a1, WTF::StringImpl *a2, const WebCore::RenderStyle *a3)
{
  unsigned int v4;
  uint64_t v6;

  v4 = a2;
  WebCore::RenderBlock::styleDidChange(a1, a2, a3);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 20) & 0xFE7EF7FE | 1;
  if (a3)
  {
    v6 = *(_QWORD *)(a1 + 200);
    if (v6)
    {
      if (v4 >= 2)
      {
        if (*(_DWORD *)(a1 + 208))
          (*(void (**)(_QWORD))(**(_QWORD **)(v6 + 80) + 104))(*(_QWORD *)(v6 + 80));
      }
    }
  }
}

WTF::StringImpl *WebCore::RenderScrollbarPart::imageChanged(WebCore::RenderScrollbarPart *this, WTF::StringImpl *a2, const WebCore::IntRect *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];

  v3 = *((_QWORD *)this + 25);
  if (v3)
  {
    v4 = *((unsigned int *)this + 52);
    if ((_DWORD)v4)
      return (WTF::StringImpl *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 80) + 104))(*(_QWORD *)(v3 + 80), v3, v4);
  }
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1944)
                 + 248);
  if (*(WebCore::RenderScrollbarPart **)(v6 + 664) != this)
    return WebCore::RenderBox::imageChanged(this, a2, a3);
  v7 = WebCore::ScrollView::scrollCornerRect(*(WebCore::ScrollView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40)
                                                                                             + 8)
                                                                                 + 1944)
                                                                     + 248));
  v9 = *(_QWORD *)(v6 + 64);
  v8 = v6 + 64;
  v12[0] = v7;
  v12[1] = v10;
  v11 = (*(uint64_t (**)(uint64_t))(v9 + 824))(v8);
  if (v11)
    return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 320))(v11);
  else
    return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v8 + 816))(v8, v12);
}

uint64_t WebCore::RenderMultiColumnSpannerPlaceholder::canHaveChildren(WebCore::RenderMultiColumnSpannerPlaceholder *this)
{
  return 0;
}

const char *WebCore::RenderProgress::renderName(WebCore::RenderProgress *this)
{
  return "RenderProgress";
}

const char *WebCore::RenderQuote::renderName(WebCore::RenderQuote *this)
{
  return "RenderQuote";
}

const char *WebCore::RenderReplica::renderName(WebCore::RenderReplica *this)
{
  return "RenderReplica";
}

uint64_t WebCore::RenderReplica::canHaveChildren(WebCore::RenderReplica *this)
{
  return 0;
}

uint64_t WebCore::RenderReplica::requiresLayer(WebCore::RenderReplica *this)
{
  return 1;
}

uint64_t WebCore::RenderScrollbar::isOverlayScrollbar(WebCore::RenderScrollbar *this)
{
  return 0;
}

const char *WebCore::RenderScrollbarPart::renderName(WebCore::RenderScrollbarPart *this)
{
  return "RenderScrollbarPart";
}

uint64_t WebCore::RenderScrollbarPart::requiresLayer(WebCore::RenderScrollbarPart *this)
{
  return 0;
}

WebCore *WebCore::nearestNonAnonymousContainingBlockIncludingSelf(WebCore *this, WebCore::RenderElement *a2)
{
  WebCore *v2;
  uint64_t v4;
  BOOL v5;
  int v6;

  while (1)
  {
    v2 = this;
    if (!this)
      return v2;
    if ((*((_BYTE *)this + 45) & 0x40) != 0)
    {
      if ((*((_BYTE *)this + 45) & 1) == 0
        || ((*((_BYTE *)this + 45) & 2) != 0
          ? (v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 8) + 96))
          : (v4 = *((_QWORD *)this + 12)),
            (v4 & 0x1F) != 1 ? (v5 = (v4 & 0x1F) == 14) : (v5 = 1),
            !v5
         || (v4 & 0xF80000000000) != 0
         || ((*(uint64_t (**)(WebCore *, WebCore::RenderElement *))(*(_QWORD *)this + 176))(this, a2) & 1) != 0
         || (v6 = *((unsigned __int8 *)v2 + 46), v6 == 20)))
      {
LABEL_4:
        if ((*((_BYTE *)v2 + 45) & 0x40) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x196435E34);
        }
        return v2;
      }
      if ((*((_BYTE *)v2 + 52) & 7) == 1)
      {
        if ((*((_BYTE *)v2 + 53) & 2) != 0 || v6 == 26 || v6 == 49)
          goto LABEL_4;
      }
      else if (v6 == 49 || v6 == 26)
      {
        goto LABEL_4;
      }
    }
    this = WebCore::RenderObject::containingBlock(v2);
  }
}

_QWORD **WebCore::containerForElement(WebCore::RenderObject const&,WebCore::RenderLayerModelObject const*,BOOL *)::{lambda(void)#1}::operator()(_QWORD **result)
{
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = (_BYTE *)**result;
  if (v1)
  {
    *v1 = 0;
    v2 = *result[1];
    v3 = *result[2];
    if (v2 != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 24) + 8) + 40) + 8) + 1944))
    {
      while (1)
      {
        v4 = *(_QWORD *)(v3 + 32);
        if (!v4)
          break;
        v3 = *(_QWORD *)(v4 + 8);
        if (!v3)
          break;
        if (v2 == v3)
        {
          *v1 = 1;
          return result;
        }
      }
    }
  }
  return result;
}

WTF *WTF::compactMap<0ul,WTF::CrashOnOverflow,16ul,WebCore::absoluteRectsForRangeInText(WebCore::SimpleRange const&,WebCore::Text &,WTF::OptionSet<WebCore::RenderObject::BoundingRectBehavior>)::$_0,WTF::Vector<WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(WTF *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  unsigned int v9;
  float *v10;
  float *v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v24;
  float v25;
  float v26;
  float v28;
  float v30;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v43;
  float v44;
  WTF *v45;
  unsigned int v46;
  WTF *v47;
  WTF *v48;
  WTF *v49;
  __int128 v50;
  __int128 v51;

  *(_QWORD *)result = 0;
  *((_QWORD *)result + 1) = 0;
  v3 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v3)
  {
    if (v3 >> 28)
    {
      __break(0xC471u);
      goto LABEL_90;
    }
    v6 = (uint64_t)result;
    result = (WTF *)WTF::fastMalloc((WTF *)(16 * v3));
    *(_DWORD *)(v6 + 8) = v3;
    *(_QWORD *)v6 = result;
    v8 = *(unsigned int *)(a2 + 12);
    if (!(_DWORD)v8)
    {
LABEL_80:
      *(_QWORD *)v6 = 0;
      *(_DWORD *)(v6 + 8) = 0;
      return (WTF *)WTF::fastFree(result, v7);
    }
    v9 = 0;
    v10 = *(float **)a2;
    v11 = &v10[8 * v8];
    do
    {
      v13 = v10[4];
      v12 = v10[5];
      v15 = v10[6];
      v14 = v10[7];
      if (v15 >= v13)
        v16 = v10[4];
      else
        v16 = v10[6];
      v18 = *v10;
      v17 = v10[1];
      v20 = v10[2];
      v19 = v10[3];
      if (v20 >= *v10)
        v21 = *v10;
      else
        v21 = v10[2];
      if (v16 >= v21)
        v16 = v21;
      v22 = fabsf(v16);
      if (v22 == INFINITY || v22 > 2147500000.0)
        v16 = (float)((SLODWORD(v16) >> 31) ^ 0x7FFFFFFF);
      if (v14 >= v12)
        v24 = v10[5];
      else
        v24 = v10[7];
      if (v19 >= v17)
        v25 = v10[1];
      else
        v25 = v10[3];
      if (v24 >= v25)
        v24 = v25;
      v26 = fabsf(v24);
      if (v26 == INFINITY || v26 > 2147500000.0)
        v24 = (float)((SLODWORD(v24) >> 31) ^ 0x7FFFFFFF);
      if (v18 < v20)
        v18 = v10[2];
      if (v13 < v15)
        v13 = v10[6];
      if (v18 >= v13)
        v13 = v18;
      v28 = fabsf(v13);
      if (v28 == INFINITY || v28 > 2147500000.0)
        v13 = (float)((SLODWORD(v13) >> 31) ^ 0x7FFFFFFF);
      if (v17 < v19)
        v17 = v10[3];
      if (v12 < v14)
        v12 = v10[7];
      if (v17 >= v12)
        v12 = v17;
      v30 = fabsf(v12);
      if (v30 == INFINITY || v30 > 2147500000.0)
        v12 = (float)((SLODWORD(v12) >> 31) ^ 0x7FFFFFFF);
      v32 = v13 - v16;
      v33 = v12 - v24;
      v34 = (float)**(int **)a3 * 0.015625;
      v35 = (float)*(int *)(*(_QWORD *)a3 + 4) * 0.015625;
      v36 = (float)*(int *)(*(_QWORD *)a3 + 8) * 0.015625;
      v37 = (float)*(int *)(*(_QWORD *)a3 + 12) * 0.015625;
      if (v16 >= v34)
        v38 = v16;
      else
        v38 = (float)**(int **)a3 * 0.015625;
      if (v24 >= v35)
        v39 = v24;
      else
        v39 = (float)*(int *)(*(_QWORD *)a3 + 4) * 0.015625;
      v40 = v16 + v32;
      if ((float)(v34 + v36) < v40)
        v40 = v34 + v36;
      v41 = v24 + v33;
      if ((float)(v35 + v37) < v41)
        v41 = v35 + v37;
      if (v38 >= v40 || v39 >= v41)
      {
        v38 = 0.0;
        v39 = 0.0;
        v40 = 0.0;
        v41 = 0.0;
      }
      v43 = v40 - v38;
      if (v43 > 0.0)
      {
        v44 = v41 - v39;
        if (v44 > 0.0)
        {
          *(_QWORD *)&v51 = __PAIR64__(LODWORD(v39), LODWORD(v38));
          *((_QWORD *)&v51 + 1) = __PAIR64__(LODWORD(v44), LODWORD(v43));
          if (v9 == *(_DWORD *)(v6 + 8))
          {
            result = (WTF *)WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v6, v9 + 1, (unint64_t)&v51);
            *(_OWORD *)(*(_QWORD *)v6 + 16 * *(unsigned int *)(v6 + 12)) = *(_OWORD *)result;
          }
          else
          {
            *(_OWORD *)(*(_QWORD *)v6 + 16 * v9) = v51;
          }
          v9 = *(_DWORD *)(v6 + 12) + 1;
          *(_DWORD *)(v6 + 12) = v9;
        }
      }
      v10 += 8;
    }
    while (v10 != v11);
    if (*(_DWORD *)(v6 + 8) > v9)
    {
      result = *(WTF **)v6;
      if (!v9)
        goto LABEL_78;
      if (!(v9 >> 28))
      {
        v45 = *(WTF **)v6;
        v46 = v9;
        v47 = (WTF *)(16 * v9);
        v48 = (WTF *)WTF::fastMalloc(v47);
        *(_DWORD *)(v6 + 8) = v46;
        *(_QWORD *)v6 = v48;
        result = v45;
        if (v48 != v45)
        {
          v49 = v45;
          do
          {
            v50 = *(_OWORD *)v49;
            v49 = (WTF *)((char *)v49 + 16);
            *(_OWORD *)v48 = v50;
            v48 = (WTF *)((char *)v48 + 16);
            v47 = (WTF *)((char *)v47 - 16);
          }
          while (v47);
        }
LABEL_78:
        if (!result)
          return result;
        if (*(WTF **)v6 != result)
          return (WTF *)WTF::fastFree(result, v7);
        goto LABEL_80;
      }
      __break(0xC471u);
LABEL_90:
      JUMPOUT(0x1964361B8);
    }
  }
  return result;
}

uint64_t WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  WTF *v10;
  void *v11;
  uint64_t v12;
  WTF *v13;
  __int128 v14;
  uint64_t v15;
  __int128 *v16;
  unsigned int v17;
  uint64_t v18;
  __int128 v19;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  v5 = *(unsigned int *)(result + 12);
  v6 = *(unsigned int *)(a2 + 12) + v5;
  if (v6 > v4)
  {
    v7 = v4 + (v4 >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 <= v6)
      v9 = *(unsigned int *)(a2 + 12) + v5;
    else
      v9 = v8;
    if (v9 >> 28)
    {
      __break(0xC471u);
      return result;
    }
    v10 = *(WTF **)result;
    result = WTF::fastMalloc((WTF *)(16 * v9));
    *(_DWORD *)(v3 + 8) = v9;
    *(_QWORD *)v3 = result;
    if ((_DWORD)v5)
    {
      v12 = 16 * v5;
      v13 = v10;
      do
      {
        v14 = *(_OWORD *)v13;
        v13 = (WTF *)((char *)v13 + 16);
        *(_OWORD *)result = v14;
        result += 16;
        v12 -= 16;
      }
      while (v12);
    }
    if (v10)
    {
      if (*(WTF **)v3 == v10)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      result = WTF::fastFree(v10, v11);
    }
  }
  v15 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v15)
  {
    v16 = *(__int128 **)a2;
    v17 = *(_DWORD *)(v3 + 12);
    v18 = 16 * v15;
    do
    {
      v19 = *v16++;
      *(_OWORD *)(*(_QWORD *)v3 + 16 * v17) = v19;
      v17 = *(_DWORD *)(v3 + 12) + 1;
      *(_DWORD *)(v3 + 12) = v17;
      v18 -= 16;
    }
    while (v18);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeAllMatching<WebCore::borderAndTextRects(WebCore::SimpleRange const&,WebCore::CoordinateSpace,WTF::OptionSet<WebCore::RenderObject::BoundingRectBehavior>)::$_0>(uint64_t result)
{
  unint64_t v1;
  uint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  __int128 *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  __int128 v14;
  char *v15;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(result + 12);
  v3 = (char *)(*(_QWORD *)result + 16 * v2);
  if ((_DWORD)v2)
  {
    LODWORD(v2) = 0;
    v4 = v3;
    v5 = v3;
    do
    {
      if ((float)(*(float *)(v1 + 8) * *(float *)(v1 + 12)) <= 1.0)
      {
        v6 = (char *)v1;
        if (v5 != (char *)(*(_QWORD *)result + 16 * *(unsigned int *)(result + 12)))
        {
          if (v4 == (char *)v1)
          {
            v6 = v5;
          }
          else
          {
            if (v4 <= v5)
            {
              v11 = 0;
              v10 = (uint64_t)(v1 - (_QWORD)v4) >> 4;
              do
              {
                *(_OWORD *)&v5[((v1 - (_QWORD)v4) & 0xFFFFFFFFFFFFFFF0) - 16 + v11] = *(_OWORD *)(v1 + v11 - 16);
                v11 -= 16;
              }
              while ((char *)(v1 + v11) != v4);
            }
            else
            {
              v7 = v5;
              v8 = (__int128 *)v4;
              do
              {
                v9 = *v8++;
                *(_OWORD *)v7 = v9;
                v7 += 16;
              }
              while (v8 != (__int128 *)v1);
              v10 = (uint64_t)(v1 - (_QWORD)v4) >> 4;
            }
            v6 = &v5[16 * v10];
          }
        }
        v4 = (char *)(v1 + 16);
        LODWORD(v2) = v2 + 1;
        v5 = v6;
      }
      v1 += 16;
    }
    while (v1 < (unint64_t)v3);
    v1 = *(_QWORD *)result;
    v12 = *(unsigned int *)(result + 12);
    v3 = v5;
  }
  else
  {
    v12 = 0;
    v4 = (char *)(*(_QWORD *)result + 16 * v2);
  }
  v13 = (char *)(v1 + 16 * v12);
  if (v4 != v13)
  {
    if (v4 <= v3)
    {
      v15 = &v3[((v13 - v4) & 0xFFFFFFFFFFFFFFF0) - 16];
      do
      {
        *(_OWORD *)v15 = *((_OWORD *)v13 - 1);
        v15 -= 16;
        v13 -= 16;
      }
      while (v13 != v4);
    }
    else
    {
      do
      {
        v14 = *(_OWORD *)v4;
        v4 += 16;
        *(_OWORD *)v3 = v14;
        v3 += 16;
      }
      while (v4 != v13);
    }
  }
  *(_DWORD *)(result + 12) -= v2;
  return result;
}

unsigned int *WTF::HashTable<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>::removeWithoutEntryConsistencyCheck(unsigned int *result, unsigned int **a2)
{
  uint64_t *v2;
  unsigned int **v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  v2 = (uint64_t *)result;
  v3 = *(unsigned int ***)result;
  if (*(_QWORD *)result)
    v3 += *((unsigned int *)v3 - 1);
  if (v3 != a2)
  {
    result = *a2;
    *a2 = (unsigned int *)-1;
    if (result)
    {
      if (result[6] == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          result = WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
      }
      else
      {
        result[6] -= 2;
      }
    }
    ++*(_DWORD *)(*v2 - 16);
    v4 = *v2;
    if (*v2)
      v5 = *(_DWORD *)(v4 - 12) - 1;
    else
      v5 = -1;
    *(_DWORD *)(v4 - 12) = v5;
    v6 = *v2;
    if (*v2)
    {
      v7 = 6 * *(_DWORD *)(v6 - 12);
      v8 = *(_DWORD *)(v6 - 4);
      if (v7 < v8 && v8 >= 9)
        return (unsigned int *)WTF::HashTable<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>::rehash(v2, v8 >> 1, 0);
    }
  }
  return result;
}

uint64_t WebCore::quoteTableLanguageComparisonFunction(const char **this, unsigned __int16 *a2, const void *a3)
{
  char *v5;
  char *v6;
  size_t v7;
  char *v8;
  uint64_t v9;
  size_t v10;
  char *v11;
  size_t v12;
  uint64_t result;
  const void *v14;
  unsigned int v15;
  unsigned __int16 v16;
  char *v17;
  size_t v18;
  char *v19;
  size_t v20;
  char *v21;
  size_t v22;
  char *v23;

  v5 = (char *)*this;
  v6 = *(char **)a2;
  v7 = strlen(*this);
  v8 = strchr(v5, 45);
  if (v8)
    v9 = v8 - v5 + 1;
  else
    v9 = v7;
  if (v8)
    v7 = v8 - v5;
  v10 = strlen(v6);
  v11 = strchr(v6, 45);
  if (v11)
    v12 = v11 - v6;
  else
    v12 = v10;
  if (v11)
    v10 = v11 - v6 + 1;
  if (v7 != v12)
    return strcmp(v5, v6);
  result = memcmp(v5, v6, v7);
  if (!(_DWORD)result)
  {
    v15 = a2[4];
    if (a2[4])
    {
      v16 = 1;
      while (WebCore::quoteTableLanguageComparisonFunction((WebCore *)this, &a2[12 * v16], v14))
      {
        if (v15 < ++v16)
          goto LABEL_19;
      }
      return 1;
    }
    else
    {
LABEL_19:
      v17 = &v6[v10];
      v18 = strlen(&v6[v10]);
      v19 = strchr(v17, 45);
      if (v19)
        v18 = v19 - v17;
      if (v18)
      {
        do
        {
          v20 = strlen(&v5[v9]);
          v21 = strchr(&v5[v9], 45);
          if (v21)
            v22 = v21 - &v5[v9];
          else
            v22 = v20;
          if (v21)
            v20 = v21 - &v5[v9] + 1;
          v23 = &v5[v9];
          result = v22 == v18 ? memcmp(v23, v17, v18) : strcmp(v23, v17);
          if (!v22)
            break;
          if (v22 == 1)
            return 0xFFFFFFFFLL;
          v9 += v20;
        }
        while (v22 != v18 || (_DWORD)result);
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  void **v4;

  v2 = a1;
  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (void **)(a1 + 8);
    do
    {
      if (*((_DWORD *)v4 - 2) != -1)
      {
        a2 = *v4;
        *v4 = 0;
        if (a2)
          a1 = WebCore::RenderObjectDeleter::operator()(a1, (uint64_t)a2);
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(v2 - 16), a2);
}

WTF **WTF::HashTable<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderObject::RenderObjectRareData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderObject::RenderObjectRareData>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderObject::RenderObjectRareData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderObject::RenderObjectRareData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>>::rehash(uint64_t *a1, unsigned int a2, WTF **a3)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  WTF **v11;
  uint64_t v12;
  WTF **v13;
  WTF *v14;
  WTF *v15;
  _DWORD *v16;
  WTF *v17;
  WebCore::ReferencedSVGResources *v18;
  bmalloc::api *v19;
  void *v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  WTF **v30;
  WTF *v31;
  _DWORD *v32;
  WTF *v33;
  WebCore::ReferencedSVGResources *v34;
  bmalloc::api *v35;
  void *v36;
  WTF *v37;
  WTF *v38;
  uint64_t v39;
  WTF *v40;
  WTF *v41;
  _DWORD *v42;
  WTF *v43;
  WebCore::ReferencedSVGResources *v44;
  bmalloc::api *v45;
  void *v46;
  WTF *v47;
  WTF **result;

  v5 = *a1;
  if (*a1)
  {
    v6 = *(_DWORD *)(v5 - 4);
    v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    v10 = 0;
    v11 = 0;
    v12 = v6;
    do
    {
      v13 = (WTF **)(v5 + 16 * v10);
      v14 = *v13;
      if (*v13)
      {
        if (v14 != (WTF *)-1)
        {
          v21 = *a1;
          if (*a1)
            v22 = *(_DWORD *)(v21 - 8);
          else
            v22 = 0;
          v23 = ~(*((_QWORD *)v14 + 1) << 32) + *((_QWORD *)v14 + 1);
          v24 = (v23 ^ (v23 >> 22)) + ~((v23 ^ (v23 >> 22)) << 13);
          v25 = (9 * (v24 ^ (v24 >> 8))) ^ ((9 * (v24 ^ (v24 >> 8))) >> 15);
          v26 = v22 & (((v25 + ~(v25 << 27)) >> 31) ^ (v25 + ~((_DWORD)v25 << 27)));
          v27 = 1;
          do
          {
            v28 = v26;
            v29 = *(_QWORD *)(v21 + 16 * v26);
            v26 = (v26 + v27++) & v22;
          }
          while (v29);
          v30 = (WTF **)(v21 + 16 * v28);
          v31 = v30[1];
          v30[1] = 0;
          if (v31)
          {
            v32 = (_DWORD *)*((_QWORD *)v31 + 3);
            *((_QWORD *)v31 + 3) = 0;
            if (v32)
            {
              if (v32[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v32 + 8))(v32);
              else
                --v32[2];
            }
            v33 = (WTF *)*((_QWORD *)v31 + 2);
            *((_QWORD *)v31 + 2) = 0;
            if (v33)
            {
              if (*(_DWORD *)v33 == 1)
                WTF::fastFree(v33, v9);
              else
                --*(_DWORD *)v33;
            }
            v34 = (WebCore::ReferencedSVGResources *)*((_QWORD *)v31 + 1);
            *((_QWORD *)v31 + 1) = 0;
            if (v34)
            {
              WebCore::ReferencedSVGResources::~ReferencedSVGResources(v34, v9);
              bmalloc::api::isoDeallocate(v35, v36);
            }
            WTF::fastFree(v31, v9);
            v37 = *v30;
            *v30 = 0;
            if (v37)
            {
              if (*(_DWORD *)v37 == 1)
                WTF::fastFree(v37, v9);
              else
                --*(_DWORD *)v37;
            }
          }
          else
          {
            *v30 = 0;
          }
          v38 = *v13;
          *v13 = 0;
          *v30 = v38;
          v39 = v5 + 16 * v10;
          v40 = *(WTF **)(v39 + 8);
          *(_QWORD *)(v39 + 8) = 0;
          v30[1] = v40;
          v41 = *(WTF **)(v39 + 8);
          *(_QWORD *)(v39 + 8) = 0;
          if (v41)
          {
            v42 = (_DWORD *)*((_QWORD *)v41 + 3);
            *((_QWORD *)v41 + 3) = 0;
            if (v42)
            {
              if (v42[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v42 + 8))(v42);
              else
                --v42[2];
            }
            v43 = (WTF *)*((_QWORD *)v41 + 2);
            *((_QWORD *)v41 + 2) = 0;
            if (v43)
            {
              if (*(_DWORD *)v43 == 1)
                WTF::fastFree(v43, v9);
              else
                --*(_DWORD *)v43;
            }
            v44 = (WebCore::ReferencedSVGResources *)*((_QWORD *)v41 + 1);
            *((_QWORD *)v41 + 1) = 0;
            if (v44)
            {
              WebCore::ReferencedSVGResources::~ReferencedSVGResources(v44, v9);
              bmalloc::api::isoDeallocate(v45, v46);
            }
            WTF::fastFree(v41, v9);
          }
          v47 = *v13;
          *v13 = 0;
          if (v47)
          {
            if (*(_DWORD *)v47 == 1)
              WTF::fastFree(v47, v9);
            else
              --*(_DWORD *)v47;
          }
          if (v13 == a3)
            v11 = v30;
        }
      }
      else
      {
        v15 = v13[1];
        v13[1] = 0;
        if (v15)
        {
          v16 = (_DWORD *)*((_QWORD *)v15 + 3);
          *((_QWORD *)v15 + 3) = 0;
          if (v16)
          {
            if (v16[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
            else
              --v16[2];
          }
          v17 = (WTF *)*((_QWORD *)v15 + 2);
          *((_QWORD *)v15 + 2) = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 1)
              WTF::fastFree(v17, v9);
            else
              --*(_DWORD *)v17;
          }
          v18 = (WebCore::ReferencedSVGResources *)*((_QWORD *)v15 + 1);
          *((_QWORD *)v15 + 1) = 0;
          if (v18)
          {
            WebCore::ReferencedSVGResources::~ReferencedSVGResources(v18, v9);
            bmalloc::api::isoDeallocate(v19, v20);
          }
          WTF::fastFree(v15, v9);
          v14 = *v13;
        }
        *v13 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 1)
            WTF::fastFree(v14, v9);
          else
            --*(_DWORD *)v14;
        }
      }
      ++v10;
    }
    while (v10 != v12);
  }
  else
  {
    v11 = 0;
    result = 0;
    if (!v5)
      return result;
  }
  WTF::fastFree((WTF *)(v5 - 16), v9);
  return v11;
}

WTF **std::unique_ptr<WebCore::RenderObject::RenderObjectRareData>::reset[abi:sn180100](WTF **result, WTF *a2)
{
  WTF *v2;
  _DWORD *v3;
  WTF *v4;
  WebCore::ReferencedSVGResources *v5;
  bmalloc::api *v6;
  void *v7;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = (_DWORD *)*((_QWORD *)v2 + 3);
    *((_QWORD *)v2 + 3) = 0;
    if (v3)
    {
      if (v3[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
      else
        --v3[2];
    }
    v4 = (WTF *)*((_QWORD *)v2 + 2);
    *((_QWORD *)v2 + 2) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 1)
        WTF::fastFree(v4, a2);
      else
        --*(_DWORD *)v4;
    }
    v5 = (WebCore::ReferencedSVGResources *)*((_QWORD *)v2 + 1);
    *((_QWORD *)v2 + 1) = 0;
    if (v5)
    {
      WebCore::ReferencedSVGResources::~ReferencedSVGResources(v5, a2);
      bmalloc::api::isoDeallocate(v6, v7);
    }
    return (WTF **)WTF::fastFree(v2, a2);
  }
  return result;
}

uint64_t WTF::HashMap<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderObject::RenderObjectRareData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderObject::RenderObjectRareData>>,WTF::HashTableTraits>::remove<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>(uint64_t *a1, void *a2)
{
  uint64_t v2;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  int i;
  uint64_t v10;
  uint64_t result;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;

  v2 = *a1;
  if (!*a1)
    return 0;
  v4 = *(_DWORD *)(v2 - 8);
  v5 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
  v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
  v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  v8 = v4 & ((v7 >> 31) ^ v7);
  for (i = 1; ; v8 = (v8 + i++) & v4)
  {
    v10 = v8;
    result = *(_QWORD *)(v2 + 16 * v8);
    if (result != -1)
    {
      if (!result)
        return result;
      if (*(void **)(result + 8) == a2)
        break;
    }
  }
  if (v8 == *(_DWORD *)(v2 - 4))
    return 0;
  v12 = (_QWORD *)(v2 + 16 * v8);
  *v12 = 0;
  if (*(_DWORD *)result == 1)
    WTF::fastFree((WTF *)result, a2);
  else
    --*(_DWORD *)result;
  *v12 = -1;
  std::unique_ptr<WebCore::RenderObject::RenderObjectRareData>::reset[abi:sn180100]((WTF **)(v2 + 16 * v10 + 8), 0);
  ++*(_DWORD *)(*a1 - 16);
  v13 = *a1;
  if (*a1)
    v14 = *(_DWORD *)(v13 - 12) - 1;
  else
    v14 = -1;
  *(_DWORD *)(v13 - 12) = v14;
  v15 = *a1;
  if (*a1)
  {
    v16 = 6 * *(_DWORD *)(v15 - 12);
    v17 = *(_DWORD *)(v15 - 4);
    if (v16 < v17 && v17 >= 9)
      WTF::HashTable<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderObject::RenderObjectRareData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderObject::RenderObjectRareData>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderObject::RenderObjectRareData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderObject::RenderObjectRareData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl>>>::rehash(a1, v17 >> 1, 0);
  }
  return 1;
}

uint64_t WebCore::Timer::Timer<WebCore::RenderProgress,WebCore::RenderProgress>(uint64_t a1, uint64_t a2)
{
  unint64_t StatusReg;
  unsigned int *v5;
  unsigned int v6;
  _QWORD *v7;

  *(_QWORD *)a1 = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  v5 = *(unsigned int **)(StatusReg + 736);
  if (!v5)
    v5 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)a1 = off_1E31F7378;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v7 = off_1E3430FC8;
  v7[1] = WebCore::RenderProgress::animationTimerFired;
  v7[2] = 0;
  v7[3] = a2;
  *(_QWORD *)(a1 + 48) = v7;
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::RenderProgress::*&)(void),WebCore::RenderProgress*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t *WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::removeWithoutEntryConsistencyCheck(uint64_t *result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;

  v2 = result;
  v3 = *result;
  if (*result)
    v3 += 16 * *(unsigned int *)(v3 - 4);
  if (v3 != a2)
  {
    *(_DWORD *)a2 = -1;
    v4 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    if (v4)
      result = (uint64_t *)WebCore::RenderObjectDeleter::operator()((uint64_t)result, v4);
    ++*(_DWORD *)(*v2 - 16);
    v5 = *v2;
    if (*v2)
      v6 = *(_DWORD *)(v5 - 12) - 1;
    else
      v6 = -1;
    *(_DWORD *)(v5 - 12) = v6;
    v7 = *v2;
    if (*v2)
    {
      v8 = 6 * *(_DWORD *)(v7 - 12);
      v9 = *(_DWORD *)(v7 - 4);
      if (v8 < v9 && v9 >= 9)
        return (uint64_t *)WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(v2, v9 >> 1, 0);
    }
  }
  return result;
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if (v7)
  {
    v13 = v7;
    v14 = v6;
    do
    {
      if (*(_DWORD *)v14 != -1)
      {
        if (*(_DWORD *)v14)
        {
          v9 = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::reinsert(*a1, v14);
          v15 = v9;
          v10 = *(void **)(v14 + 8);
          *(_QWORD *)(v14 + 8) = 0;
          if (v10)
            v9 = WebCore::RenderObjectDeleter::operator()(v9, (uint64_t)v10);
          if (v14 == a3)
            v11 = v15;
        }
        else
        {
          v10 = *(void **)(v14 + 8);
          *(_QWORD *)(v14 + 8) = 0;
          if (v10)
            v9 = WebCore::RenderObjectDeleter::operator()(v9, (uint64_t)v10);
        }
      }
      v14 += 16;
      --v13;
    }
    while (v13);
    goto LABEL_16;
  }
  result = 0;
  if (v6)
  {
LABEL_16:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::reinsert(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a1)
    v3 = *(_DWORD *)(a1 - 8);
  else
    v3 = 0;
  v4 = 0;
  v5 = 9 * ((*(_DWORD *)a2 + ~(*(_DWORD *)a2 << 15)) ^ ((*(_DWORD *)a2 + ~(*(_DWORD *)a2 << 15)) >> 10));
  v6 = ((v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11)) ^ (((v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11)) >> 16);
  do
  {
    v7 = v6 & v3;
    v6 = ++v4 + v7;
  }
  while (*(_DWORD *)(a1 + 16 * v7));
  v8 = a1 + 16 * v7;
  v9 = *(_QWORD *)(v8 + 8);
  *(_QWORD *)(v8 + 8) = 0;
  if (v9)
    WebCore::RenderObjectDeleter::operator()(a1, v9);
  *(_DWORD *)v8 = *(_DWORD *)a2;
  v10 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(v8 + 8) = v10;
  return v8;
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<unsigned int>>,unsigned int>(uint64_t result, int a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  int v7;

  if (result)
  {
    v2 = *(_DWORD *)(result - 8);
    v3 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
    v4 = (v3 ^ (v3 >> 6)) + ~((v3 ^ (v3 >> 6)) << 11);
    v5 = v2 & (v4 ^ HIWORD(v4));
    v6 = *(_DWORD *)(result + 16 * v5);
    if (v6 == a2)
    {
LABEL_6:
      result += 16 * v5;
    }
    else
    {
      v7 = 1;
      while (v6)
      {
        v5 = ((_DWORD)v5 + v7) & v2;
        v6 = *(_DWORD *)(result + 16 * v5);
        ++v7;
        if (v6 == a2)
          goto LABEL_6;
      }
      return 0;
    }
  }
  return result;
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(a1, v5, a2);
}

uint64_t *WebCore::RenderScrollbarTheme::renderScrollbarTheme(WebCore::RenderScrollbarTheme *this)
{
  if ((_MergedGlobals_252 & 1) == 0)
  {
    qword_1ECE84248 = (uint64_t)off_1E3433828;
    _MergedGlobals_252 = 1;
  }
  return &qword_1ECE84248;
}

unint64_t WebCore::RenderScrollbarTheme::buttonSizesAlongTrackAxis(WebCore::RenderScrollbarTheme *this, WebCore::Scrollbar *a2, int *a3, int *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t result;
  unint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;

  if (!*((_BYTE *)this + 137))
    goto LABEL_14;
  WebCore::RenderScrollbar::buttonRect((uint64_t)this, 1);
  if (!*((_BYTE *)this + 137))
  {
    __break(0xC471u);
    JUMPOUT(0x19643714CLL);
  }
  v8 = v7;
  WebCore::RenderScrollbar::buttonRect((uint64_t)this, 2);
  if (!*((_BYTE *)this + 137))
  {
    __break(0xC471u);
    JUMPOUT(0x19643716CLL);
  }
  v10 = v9;
  WebCore::RenderScrollbar::buttonRect((uint64_t)this, 32);
  if (!*((_BYTE *)this + 137))
  {
LABEL_14:
    __break(0xC471u);
    JUMPOUT(0x19643712CLL);
  }
  v12 = v11;
  result = WebCore::RenderScrollbar::buttonRect((uint64_t)this, 64);
  v15 = HIDWORD(v10) + HIDWORD(v8);
  v16 = HIDWORD(v12);
  if (*((_BYTE *)this + 72))
    v17 = HIDWORD(v14);
  else
    LODWORD(v17) = v14;
  if (!*((_BYTE *)this + 72))
  {
    LODWORD(v16) = v12;
    v15 = v10 + v8;
  }
  *(_DWORD *)a2 = v15;
  *a3 = v16 + v17;
  return result;
}

unint64_t WebCore::RenderScrollbarTheme::backButtonRect(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t result;

  if (*(_BYTE *)(a2 + 137))
    return WebCore::RenderScrollbar::buttonRect(a2, a3);
  result = 96;
  __break(0xC471u);
  return result;
}

unint64_t WebCore::RenderScrollbarTheme::forwardButtonRect(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t result;

  if (*(_BYTE *)(a2 + 137))
    return WebCore::RenderScrollbar::buttonRect(a2, a3);
  result = 96;
  __break(0xC471u);
  return result;
}

BOOL WebCore::RenderScrollbarTheme::hasButtons(WebCore::RenderScrollbarTheme *this, WebCore::Scrollbar *a2, uint64_t a3, int *a4)
{
  int v5;
  int v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  int v11[2];

  *(_QWORD *)v11 = 0;
  WebCore::RenderScrollbarTheme::buttonSizesAlongTrackAxis(a2, (WebCore::Scrollbar *)&v11[1], v11, a4);
  v6 = v11[0];
  v5 = v11[1];
  v7 = *((unsigned __int8 *)a2 + 72);
  WebCore::Widget::frameRect(a2);
  v9 = HIDWORD(v8);
  if (!v7)
    LODWORD(v9) = v8;
  return v6 + v5 <= (int)v9;
}

BOOL WebCore::RenderScrollbarTheme::hasThumb(WebCore::RenderScrollbarTheme *this, WebCore::Scrollbar *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  int v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  int v15;
  signed int v16;
  signed int v17;
  unint64_t v18;
  _QWORD v20[2];

  v20[0] = (*(uint64_t (**)(WebCore::RenderScrollbarTheme *, WebCore::Scrollbar *, _QWORD))(*(_QWORD *)this + 280))(this, a2, 0);
  v20[1] = v4;
  (*(void (**)(WebCore::RenderScrollbarTheme *, WebCore::Scrollbar *, _QWORD *))(*(_QWORD *)this + 368))(this, a2, v20);
  v6 = v5;
  v7 = *((unsigned __int8 *)a2 + 72);
  v8 = *((unsigned __int8 *)a2 + 136);
  if (*((_BYTE *)a2 + 136))
  {
    v9 = (float)*((int *)a2 + 22);
    v10 = *((float *)a2 + 24);
    v11 = -v10;
    v12 = (float)*((int *)a2 + 23);
    v13 = (float)(v10 + v9) - v12;
    if (v13 <= v11)
      v13 = v11;
    v14 = v9 / (float)(fmaxf(v13, 0.0) + v12);
    v15 = (*(uint64_t (**)(WebCore::RenderScrollbarTheme *, WebCore::Scrollbar *))(*(_QWORD *)this + 184))(this, a2);
    v16 = llroundf(v14 * (float)v15);
    v17 = (*(uint64_t (**)(WebCore::RenderScrollbarTheme *, WebCore::Scrollbar *))(*(_QWORD *)this + 304))(this, a2);
    if (v17 <= v16)
      v8 = v16;
    else
      v8 = v17;
    if (v8 > v15)
      v8 = 0;
  }
  v18 = HIDWORD(v6);
  if (!v7)
    LODWORD(v18) = v6;
  return v8 <= (int)v18;
}

uint64_t WebCore::RenderScrollbarTheme::minimumThumbLength(WebCore::RenderScrollbarTheme *this, WebCore::Scrollbar *a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  int v6;

  if (*((_BYTE *)a2 + 137))
  {
    v6 = 8;
    result = WTF::HashMap<unsigned int,std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>>,WTF::HashTableTraits>::get((uint64_t *)a2 + 28, &v6);
    if (result)
    {
      v4 = result;
      WebCore::RenderScrollbarPart::layout((WebCore::RenderScrollbarPart *)result);
      v5 = 164;
      if (!*((_BYTE *)a2 + 72))
        v5 = 160;
      return (*(_DWORD *)(v4 + v5) / 64);
    }
  }
  else
  {
    result = 96;
    __break(0xC471u);
  }
  return result;
}

unint64_t WebCore::RenderScrollbarTheme::trackRect(WebCore::RenderScrollbarTheme *this, WebCore::Scrollbar *a2, uint64_t a3, int *a4)
{
  int *v5;
  unint64_t result;
  int v7[2];

  if (!WebCore::RenderScrollbarTheme::hasButtons(this, a2, a3, a4))
    return WebCore::Widget::frameRect(a2);
  *(_QWORD *)v7 = 0;
  WebCore::RenderScrollbarTheme::buttonSizesAlongTrackAxis(a2, (WebCore::Scrollbar *)&v7[1], v7, v5);
  if (*((_BYTE *)a2 + 137))
    return WebCore::RenderScrollbar::trackRect(a2, v7[1]);
  result = 96;
  __break(0xC471u);
  return result;
}

unint64_t WebCore::RenderScrollbarTheme::constrainTrackRectToTrackPieces(WebCore::RenderScrollbarTheme *this, WebCore::Scrollbar *a2, const WebCore::IntRect *a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;

  if (!*((_BYTE *)a2 + 137)
    || (v5 = WebCore::RenderScrollbar::trackPieceRectWithMargins((uint64_t)a2, 4, (int *)a3), !*((_BYTE *)a2 + 137)))
  {
    __break(0xC471u);
    JUMPOUT(0x196437540);
  }
  v6 = v5;
  WebCore::RenderScrollbar::trackPieceRectWithMargins((uint64_t)a2, 16, (int *)a3);
  v7 = *(_QWORD *)a3;
  if (*((_BYTE *)a2 + 72))
    v8 = v6 & 0xFFFFFFFF00000000;
  else
    v8 = *(_QWORD *)a3 & 0xFFFFFFFF00000000;
  if (!*((_BYTE *)a2 + 72))
    LODWORD(v7) = v6;
  return v7 | v8;
}

uint64_t WebCore::RenderScrollbarTheme::willPaintScrollbar(WebCore::RenderScrollbarTheme *this, WebCore::GraphicsContext *a2, WebCore::Scrollbar *a3)
{
  uint64_t result;
  float v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  const CGRect *v10;
  CGFloat v11;
  CGFloat v12;
  CGFloat v13;
  CGFloat v14;
  void *v15;
  CGRect v16;

  if (!*((_BYTE *)a3 + 137))
  {
    __break(0xC471u);
    JUMPOUT(0x196437658);
  }
  LODWORD(v16.origin.x) = 128;
  result = WTF::HashMap<unsigned int,std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>>,WTF::HashTableTraits>::get((uint64_t *)a3 + 28, (int *)&v16);
  if (result)
  {
    v6 = *(float *)(*(_QWORD *)(*(_QWORD *)(result + 88) + 32) + 4);
    if (v6 != 1.0)
    {
      (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 96))(a2, 1);
      v7 = (void *)*((_QWORD *)a3 + 5);
      if (v7)
      {
        v15 = (void *)*((_QWORD *)a3 + 5);
        if (objc_msgSend(v7, "conformsToProtocol:", &unk_1EE342188))
          objc_msgSend((id)objc_msgSend(v15, "superview"), "frame");
        else
          objc_msgSend(v15, "frame");
        v16.origin.x = v11;
        v16.origin.y = v12;
        v16.size.width = v13;
        v16.size.height = v14;
        v8 = WebCore::enclosingIntRect(&v16, v10);
      }
      else
      {
        v8 = *((_QWORD *)a3 + 6);
        v9 = *((_QWORD *)a3 + 7);
      }
      *(float *)&v16.origin.x = (float)(int)v8;
      *((float *)&v16.origin.x + 1) = (float)SHIDWORD(v8);
      *(float *)&v16.origin.y = (float)(int)v9;
      *((float *)&v16.origin.y + 1) = (float)SHIDWORD(v9);
      (*(void (**)(WebCore::GraphicsContext *, CGRect *))(*(_QWORD *)a2 + 456))(a2, &v16);
      return (*(uint64_t (**)(WebCore::GraphicsContext *, float))(*(_QWORD *)a2 + 592))(a2, v6);
    }
  }
  return result;
}

uint64_t WebCore::RenderScrollbarTheme::didPaintScrollbar(WebCore::RenderScrollbarTheme *this, WebCore::GraphicsContext *a2, WebCore::Scrollbar *a3)
{
  uint64_t result;
  int v5;

  if (*((_BYTE *)a3 + 137))
  {
    v5 = 128;
    result = WTF::HashMap<unsigned int,std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<std::unique_ptr<WebCore::RenderScrollbarPart,WebCore::RenderObjectDeleter>>,WTF::HashTableTraits>::get((uint64_t *)a3 + 28, &v5);
    if (result)
    {
      if (*(float *)(*(_QWORD *)(*(_QWORD *)(result + 88) + 32) + 4) != 1.0)
      {
        (*(void (**)(WebCore::GraphicsContext *))(*(_QWORD *)a2 + 608))(a2);
        return (*(uint64_t (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 104))(a2, 1);
      }
    }
  }
  else
  {
    result = 96;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::RenderScrollbarTheme::paintScrollCorner(WebCore::RenderScrollbarTheme *this, WebCore::ScrollableArea *a2, WebCore::GraphicsContext *a3, const WebCore::IntRect *a4)
{
  uint64_t *v4;
  char *v6;

  {
    if (BYTE1(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings))
    {
      v4 = &WebCore::ScrollbarTheme::theme(void)::mockTheme;
        return (*(uint64_t (**)(uint64_t *, WebCore::ScrollableArea *, WebCore::GraphicsContext *, const WebCore::IntRect *))(*v4 + 112))(v4, a2, a3, a4);
      WebCore::ScrollbarTheme::theme(void)::mockTheme = (uint64_t)off_1E341CAA8;
LABEL_9:
      *v6 = 1;
      return (*(uint64_t (**)(uint64_t *, WebCore::ScrollableArea *, WebCore::GraphicsContext *, const WebCore::IntRect *))(*v4 + 112))(v4, a2, a3, a4);
    }
  }
  else
  {
    WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
    *(_OWORD *)&byte_1ECE90A50 = 0u;
    qword_1ECE90A60 = 0;
    LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
    *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
    *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
    byte_1ECE90A56 = 1;
    *(_DWORD *)&algn_1ECE90A57 = 0;
    unk_1ECE90A5B = 0;
    byte_1ECE90A5D = 1;
    byte_1ECE90A5F = 1;
  }
  v4 = &WebCore::ScrollbarTheme::nativeTheme(void)::theme;
  {
    WebCore::ScrollbarTheme::nativeTheme(void)::theme = (uint64_t)off_1E3354BF8;
    goto LABEL_9;
  }
  return (*(uint64_t (**)(uint64_t *, WebCore::ScrollableArea *, WebCore::GraphicsContext *, const WebCore::IntRect *))(*v4 + 112))(v4, a2, a3, a4);
}

_QWORD *WebCore::RenderScrollbarTheme::paintScrollbarBackground(WebCore::RenderScrollbarTheme *this, WebCore::GraphicsContext *a2, WebCore::Scrollbar *a3)
{
  void *v3;
  uint64_t v4;
  CGFloat v5;
  WebCore::GraphicsContext *v7;
  WebCore::Scrollbar *v8;
  const CGRect *v9;
  CGFloat v10;
  CGFloat v11;
  CGFloat v12;
  CGFloat v13;
  double v14;
  void *v15;
  CGRect v16;

  if (!*((_BYTE *)a3 + 137))
  {
    __break(0xC471u);
    JUMPOUT(0x1964378B0);
  }
  v3 = (void *)*((_QWORD *)a3 + 5);
  if (v3)
  {
    v7 = a2;
    v8 = a3;
    v15 = (void *)*((_QWORD *)a3 + 5);
    if (objc_msgSend(v3, "conformsToProtocol:", &unk_1EE342188))
      objc_msgSend((id)objc_msgSend(v15, "superview"), "frame");
    else
      objc_msgSend(v15, "frame");
    v16.origin.x = v10;
    v16.origin.y = v11;
    v16.size.width = v12;
    v16.size.height = v13;
    v4 = WebCore::enclosingIntRect(&v16, v9);
    v5 = v14;
    a3 = v8;
    a2 = v7;
  }
  else
  {
    v4 = *((_QWORD *)a3 + 6);
    v5 = *((double *)a3 + 7);
  }
  *(_QWORD *)&v16.origin.x = v4;
  v16.origin.y = v5;
  return WebCore::RenderScrollbar::paintPart(a3, a2, 128, (int32x4_t *)&v16);
}

uint64_t WebCore::RenderScrollbarTheme::paintTrackBackground(WebCore::RenderScrollbarTheme *this, WebCore::GraphicsContext *a2, WebCore::Scrollbar *a3, int32x4_t *a4)
{
  uint64_t result;

  if (*((_BYTE *)a3 + 137))
    return (uint64_t)WebCore::RenderScrollbar::paintPart(a3, a2, 256, a4);
  result = 96;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::RenderScrollbarTheme::paintTrackPiece(uint64_t a1, WebCore::GraphicsContext *a2, uint64_t a3, int32x4_t *a4, int a5)
{
  uint64_t result;

  if (*(_BYTE *)(a3 + 137))
    return (uint64_t)WebCore::RenderScrollbar::paintPart((_QWORD *)a3, a2, a5, a4);
  result = 96;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::RenderScrollbarTheme::paintButton(uint64_t a1, WebCore::GraphicsContext *a2, uint64_t a3, int32x4_t *a4, int a5)
{
  uint64_t result;

  if (*(_BYTE *)(a3 + 137))
    return (uint64_t)WebCore::RenderScrollbar::paintPart((_QWORD *)a3, a2, a5, a4);
  result = 96;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::RenderScrollbarTheme::paintThumb(WebCore::RenderScrollbarTheme *this, WebCore::GraphicsContext *a2, WebCore::Scrollbar *a3, int32x4_t *a4)
{
  uint64_t result;

  if (*((_BYTE *)a3 + 137))
    return (uint64_t)WebCore::RenderScrollbar::paintPart(a3, a2, 8, a4);
  result = 96;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::RenderScrollbarTheme::paintTickmarks(WebCore::RenderScrollbarTheme *this, WebCore::GraphicsContext *a2, WebCore::Scrollbar *a3, const WebCore::IntRect *a4)
{
  uint64_t *v4;
  char *v6;

  {
    if (BYTE1(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings))
    {
      v4 = &WebCore::ScrollbarTheme::theme(void)::mockTheme;
        return (*(uint64_t (**)(uint64_t *, WebCore::GraphicsContext *, WebCore::Scrollbar *, const WebCore::IntRect *))(*v4 + 120))(v4, a2, a3, a4);
      WebCore::ScrollbarTheme::theme(void)::mockTheme = (uint64_t)off_1E341CAA8;
LABEL_9:
      *v6 = 1;
      return (*(uint64_t (**)(uint64_t *, WebCore::GraphicsContext *, WebCore::Scrollbar *, const WebCore::IntRect *))(*v4 + 120))(v4, a2, a3, a4);
    }
  }
  else
  {
    WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
    *(_OWORD *)&byte_1ECE90A50 = 0u;
    qword_1ECE90A60 = 0;
    LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
    *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
    *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
    byte_1ECE90A56 = 1;
    *(_DWORD *)&algn_1ECE90A57 = 0;
    unk_1ECE90A5B = 0;
    byte_1ECE90A5D = 1;
    byte_1ECE90A5F = 1;
  }
  v4 = &WebCore::ScrollbarTheme::nativeTheme(void)::theme;
  {
    WebCore::ScrollbarTheme::nativeTheme(void)::theme = (uint64_t)off_1E3354BF8;
    goto LABEL_9;
  }
  return (*(uint64_t (**)(uint64_t *, WebCore::GraphicsContext *, WebCore::Scrollbar *, const WebCore::IntRect *))(*v4 + 120))(v4, a2, a3, a4);
}

void WebCore::RenderSearchField::~RenderSearchField(WebCore::RenderSearchField *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  _DWORD *v5;
  WTF::StringImpl **v6;
  uint64_t v7;
  WTF::StringImpl *v8;

  v3 = *((unsigned int *)this + 71);
  if ((_DWORD)v3)
  {
    v6 = (WTF::StringImpl **)*((_QWORD *)this + 34);
    v7 = 16 * v3;
    do
    {
      v8 = *v6;
      *v6 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, a2);
        else
          *(_DWORD *)v8 -= 2;
      }
      v6 += 2;
      v7 -= 16;
    }
    while (v7);
  }
  v4 = (WTF *)*((_QWORD *)this + 34);
  if (v4)
  {
    *((_QWORD *)this + 34) = 0;
    *((_DWORD *)this + 70) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = (_DWORD *)*((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  WebCore::RenderBlockFlow::~RenderBlockFlow(this, a2);
}

void `non-virtual thunk to'WebCore::RenderSearchField::~RenderSearchField(WebCore::RenderSearchField *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  _DWORD *v5;
  WTF::StringImpl **v6;
  uint64_t v7;
  WTF::StringImpl *v8;

  v3 = *((unsigned int *)this + 9);
  if ((_DWORD)v3)
  {
    v6 = (WTF::StringImpl **)*((_QWORD *)this + 3);
    v7 = 16 * v3;
    do
    {
      v8 = *v6;
      *v6 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, a2);
        else
          *(_DWORD *)v8 -= 2;
      }
      v6 += 2;
      v7 -= 16;
    }
    while (v7);
  }
  v4 = (WTF *)*((_QWORD *)this + 3);
  if (v4)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  WebCore::RenderBlockFlow::~RenderBlockFlow((WebCore::RenderSearchField *)((char *)this - 248), a2);
}

{
  WebCore::RenderSearchField::operator delete((WebCore::RenderSearchField *)((char *)this - 248), a2);
}

double WebCore::RenderSearchField::operator delete(WebCore::RenderBlockFlow *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  _DWORD *v5;
  void *v6;
  double result;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF::StringImpl *v10;

  v3 = *((unsigned int *)this + 71);
  if ((_DWORD)v3)
  {
    v8 = (WTF::StringImpl **)*((_QWORD *)this + 34);
    v9 = 16 * v3;
    do
    {
      v10 = *v8;
      *v8 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, a2);
        else
          *(_DWORD *)v10 -= 2;
      }
      v8 += 2;
      v9 -= 16;
    }
    while (v9);
  }
  v4 = (WTF *)*((_QWORD *)this + 34);
  if (v4)
  {
    *((_QWORD *)this + 34) = 0;
    *((_DWORD *)this + 70) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = (_DWORD *)*((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  WebCore::RenderBlockFlow::~RenderBlockFlow(this, a2);
  if (*((_DWORD *)this + 4))
  {
    result = 0.0;
    *((_OWORD *)this + 16) = 0u;
    *((_OWORD *)this + 17) = 0u;
    *((_OWORD *)this + 14) = 0u;
    *((_OWORD *)this + 15) = 0u;
    *((_OWORD *)this + 12) = 0u;
    *((_OWORD *)this + 13) = 0u;
    *((_OWORD *)this + 10) = 0u;
    *((_OWORD *)this + 11) = 0u;
    *((_OWORD *)this + 8) = 0u;
    *((_OWORD *)this + 9) = 0u;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 7) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(this, v6);
  }
  return result;
}

void WebCore::RenderSearchField::willBeDestroyed(WebCore::RenderSearchField *this, void *a2)
{
  _DWORD *v3;
  uint64_t v4;

  v3 = (_DWORD *)*((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v3)
  {
    v4 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  WebCore::RenderBlockFlow::willBeDestroyed(this, a2);
}

uint64_t WebCore::RenderSearchField::autosaveName(WebCore::RenderSearchField *this)
{
  void *v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if ((*((_WORD *)this + 14) & 8) == 0
    || ((*(uint64_t (**)(WebCore::RenderSearchField *))(*(_QWORD *)this + 872))(this) & 1) == 0
    || *(_QWORD *)(*((_QWORD *)this + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x196437EE0);
  }
  v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = v3 + 2;
  v4 = *((_QWORD *)this + 13);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 + 4);
    if ((v5 & 1) != 0)
    {
      v6 = *(_QWORD *)(v4 + 40);
      LODWORD(v7) = *(_DWORD *)(v4 + 52);
      if ((_DWORD)v7)
        goto LABEL_7;
    }
    else
    {
      v6 = v4 + 32;
      LODWORD(v7) = v5 >> 5;
      if ((_DWORD)v7)
      {
LABEL_7:
        v7 = v7;
        v8 = v6 + 8;
        while (1)
        {
          v9 = *(_QWORD *)(v8 - 8);
          if (v9 == WebCore::HTMLNames::nameAttr
            || *(_QWORD *)(v9 + 24) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 24)
            && *(_QWORD *)(v9 + 32) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 32))
          {
            break;
          }
          v8 += 16;
          if (!--v7)
          {
            v8 = MEMORY[0x1E0CBF2F8];
            break;
          }
        }
        if (v3)
          goto LABEL_14;
        goto LABEL_18;
      }
    }
  }
  v8 = MEMORY[0x1E0CBF2F8];
  if (v3)
  {
LABEL_14:
    *((_DWORD *)this + 6) = v3;
    return v8;
  }
LABEL_18:
  if ((*((_WORD *)this + 15) & 0x400) == 0)
    WebCore::Node::removedLastRef(this, v2);
  return v8;
}

uint64_t WebCore::RenderSearchField::computeControlLogicalHeight(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v3;
  void *v7;
  uint64_t v8;
  int *v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  int v22;
  int *v23;
  int v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  int *v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  int v39;
  int v40;
  int *v41;
  int v42;
  uint64_t v43;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  if ((*(_WORD *)(v3 + 28) & 8) == 0
    || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v3 + 872))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8)) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196438330);
  }
  if (*(_QWORD *)(*(_QWORD *)(v3 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x1964382F0);
  }
  *(_DWORD *)(v3 + 24) += 2;
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 240) + 568))(*(_QWORD *)(v3 + 240));
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v3, v7);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
  if (v8)
  {
    *(_DWORD *)(v8 + 24) += 2;
    v9 = (int *)(*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL);
    if (v9)
    {
      if ((*(_BYTE *)((*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) != 0)
      {
        WebCore::RenderBox::updateLogicalHeight((WebCore::RenderBox *)(*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL));
        v10 = (*(uint64_t (**)(int *))(*(_QWORD *)v9 + 1048))(v9);
        v11 = (*(uint64_t (**)(int *))(*(_QWORD *)v9 + 960))(v9);
        if (__OFADD__(v10, v11))
          v12 = (v10 >> 31) + 0x7FFFFFFF;
        else
          v12 = v10 + v11;
        v13 = (*(uint64_t (**)(int *))(*(_QWORD *)v9 + 1056))(v9);
        v14 = (*(uint64_t (**)(int *))(*(_QWORD *)v9 + 968))(v9);
        v15 = v13 + v14;
        if (__OFADD__(v13, v14))
          v15 = (v13 >> 31) + 0x7FFFFFFF;
        v16 = __OFADD__(v12, v15);
        v17 = v12 + v15;
        if (v16)
          v18 = (v12 >> 31) + 0x7FFFFFFF;
        else
          v18 = v17;
        v19 = (*(uint64_t (**)(int *, _QWORD))(*(_QWORD *)v9 + 1112))(v9, 0);
        v20 = (*(uint64_t (**)(int *, _QWORD))(*(_QWORD *)v9 + 1120))(v9, 0);
        v21 = v19 + v20;
        if (__OFADD__(v19, v20))
          v21 = (v19 >> 31) + 0x7FFFFFFF;
        v16 = __OFADD__(v18, v21);
        v22 = v18 + v21;
        if (v16)
          v22 = (v18 >> 31) + 0x7FFFFFFF;
        if (v22 > a3)
          a3 = v22;
        v23 = v9 + 40;
        if (((v9[31] >> 13) & 6) - 2 >= 4)
          v23 = v9 + 41;
        v24 = *v23;
        if (v24 > (int)a2)
          a2 = v24;
      }
    }
  }
  v25 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  if ((*(_WORD *)(v25 + 28) & 8) == 0
    || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v25 + 872))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8)) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196438350);
  }
  if (*(_QWORD *)(*(_QWORD *)(v25 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x196438310);
  }
  *(_DWORD *)(v25 + 24) += 2;
  v27 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v25 + 240) + 576))(*(_QWORD *)(v25 + 240));
  if (*(_DWORD *)(v25 + 24) == 2)
  {
    if ((*(_WORD *)(v25 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v25, v26);
  }
  else
  {
    *(_DWORD *)(v25 + 24) -= 2;
  }
  if (v27)
  {
    *(_DWORD *)(v27 + 24) += 2;
    v28 = (int *)(*(_QWORD *)(v27 + 64) & 0xFFFFFFFFFFFFLL);
    if (v28)
    {
      if ((*(_BYTE *)((*(_QWORD *)(v27 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) != 0)
      {
        WebCore::RenderBox::updateLogicalHeight((WebCore::RenderBox *)(*(_QWORD *)(v27 + 64) & 0xFFFFFFFFFFFFLL));
        v29 = (*(uint64_t (**)(int *))(*(_QWORD *)v28 + 1048))(v28);
        v30 = (*(uint64_t (**)(int *))(*(_QWORD *)v28 + 960))(v28);
        if (__OFADD__(v29, v30))
          v31 = (v29 >> 31) + 0x7FFFFFFF;
        else
          v31 = v29 + v30;
        v32 = (*(uint64_t (**)(int *))(*(_QWORD *)v28 + 1056))(v28);
        v33 = (*(uint64_t (**)(int *))(*(_QWORD *)v28 + 968))(v28);
        v34 = v32 + v33;
        if (__OFADD__(v32, v33))
          v34 = (v32 >> 31) + 0x7FFFFFFF;
        v16 = __OFADD__(v31, v34);
        v35 = v31 + v34;
        if (v16)
          v36 = (v31 >> 31) + 0x7FFFFFFF;
        else
          v36 = v35;
        v37 = (*(uint64_t (**)(int *, _QWORD))(*(_QWORD *)v28 + 1112))(v28, 0);
        v38 = (*(uint64_t (**)(int *, _QWORD))(*(_QWORD *)v28 + 1120))(v28, 0);
        v39 = v37 + v38;
        if (__OFADD__(v37, v38))
          v39 = (v37 >> 31) + 0x7FFFFFFF;
        v16 = __OFADD__(v36, v39);
        v40 = v36 + v39;
        if (v16)
          v40 = (v36 >> 31) + 0x7FFFFFFF;
        if (a3 <= v40)
          a3 = v40;
        v41 = v28 + 40;
        if (((v28[31] >> 13) & 6) - 2 >= 4)
          v41 = v28 + 41;
        v42 = *v41;
        if ((int)a2 <= v42)
          a2 = v42;
      }
    }
  }
  v16 = __OFADD__(a2, a3);
  v43 = a2 + a3;
  if (v16)
    v43 = (a2 >> 31) + 0x7FFFFFFF;
  if (v27)
  {
    if (*(_DWORD *)(v27 + 24) == 2)
    {
      if ((*(_WORD *)(v27 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v27, v26);
    }
    else
    {
      *(_DWORD *)(v27 + 24) -= 2;
    }
  }
  if (v8)
  {
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v8, v26);
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
  }
  return v43;
}

uint64_t WebCore::RenderSearchField::recentSearches(WebCore::RenderSearchField *this)
{
  uint64_t v2;
  _DWORD *v3;
  _DWORD *v4;
  int v5;
  uint64_t v6;
  _DWORD *v8;

  if (!*((_QWORD *)this + 33))
  {
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8)
                                                                                           + 40)
                                                                               + 8)
                                                                   + 528)
                                                       + 8)
                                           + 24)
                               + 8)
                   + 48);
    WebCore::Chrome::notifyPopupOpeningObservers(v2);
    (*(void (**)(_DWORD **__return_ptr, _QWORD, char *))(**(_QWORD **)(v2 + 16) + 1312))(&v8, *(_QWORD *)(v2 + 16), (char *)this + 248);
    v3 = v8;
    v8 = 0;
    v4 = (_DWORD *)*((_QWORD *)this + 33);
    *((_QWORD *)this + 33) = v3;
    if (v4)
    {
      v5 = v4[2] - 1;
      if (v4[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
        v4 = v8;
        v8 = 0;
        if (!v4)
          goto LABEL_5;
        v5 = v4[2] - 1;
        if (v4[2] == 1)
        {
          (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
          goto LABEL_5;
        }
      }
      v4[2] = v5;
    }
  }
LABEL_5:
  v6 = WebCore::RenderSearchField::autosaveName(*(WebCore::RenderSearchField **)(*((_QWORD *)this + 3) + 8));
  (*(void (**)(_QWORD, uint64_t, char *))(**((_QWORD **)this + 33) + 32))(*((_QWORD *)this + 33), v6, (char *)this + 272);
  return *((_QWORD *)this + 34);
}

void WebCore::RenderSearchField::updateFromElement(WebCore::RenderSearchField *this)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;

  v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v1 + 28) & 8) == 0
    || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v1 + 872))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1964385A8);
  }
  if (*(_QWORD *)(*(_QWORD *)(v1 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x1964385C8);
  }
  *(_DWORD *)(v1 + 24) += 2;
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 240) + 576))(*(_QWORD *)(v1 + 240));
  if (*(_DWORD *)(v1 + 24) == 2)
  {
    if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v1, v3);
  }
  else
  {
    *(_DWORD *)(v1 + 24) -= 2;
  }
  if (v4)
    WebCore::RenderSearchField::updateCancelButtonVisibility(this);
  if (*((_BYTE *)this + 256))
  {
    v5 = (_DWORD *)*((_QWORD *)this + 33);
    if (v5)
      ++v5[2];
    v6 = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    v7 = v6;
    if (v6)
      ++v6[2];
    (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 32))(v6);
    if (v7[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
    else
      --v7[2];
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
}

void WebCore::RenderSearchField::updateCancelButtonVisibility(WebCore::RenderSearchField *this)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  _DWORD *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  int v17;
  const WebCore::Element *v18;
  int v19;
  void *v20;
  WTF::StringImpl *v21[5];
  unsigned int v22;

  v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v1 + 28) & 8) == 0
    || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v1 + 872))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1964388D4);
  }
  if (*(_QWORD *)(*(_QWORD *)(v1 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x1964388B4);
  }
  *(_DWORD *)(v1 + 24) += 2;
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 240) + 576))(*(_QWORD *)(v1 + 240));
  if (*(_DWORD *)(v1 + 24) == 2)
  {
    if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v1, v3);
  }
  else
  {
    *(_DWORD *)(v1 + 24) -= 2;
  }
  v5 = *(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL;
  if (v5)
  {
    if ((*(_BYTE *)((*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1964388F4);
    }
    if ((*(_BYTE *)(*((_QWORD *)this + 13) + 239) & 4) != 0 || (*((_DWORD *)this + 30) & 0x30) == 0x10)
      goto LABEL_27;
    v6 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    if ((*(_WORD *)(v6 + 28) & 8) == 0 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 872))(v6) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19643893CLL);
    }
    if (*(_QWORD *)(*(_QWORD *)(v6 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
    {
      __break(0xC471u);
      JUMPOUT(0x19643891CLL);
    }
    v8 = *(_DWORD **)(v6 + 240);
    if (v8[3] == 64)
    {
      WebCore::FileInputType::firstElementPathForInputValue((uint64_t)v8, v21);
    }
    else
    {
      v9 = *(WTF::StringImpl **)(v6 + 216);
      if (v9)
      {
        *(_DWORD *)v9 += 2;
        goto LABEL_34;
      }
      v10 = *(_QWORD *)(v6 + 104);
      if (v10
        && ((v11 = *(_DWORD *)(v10 + 4), (v11 & 1) != 0)
          ? (v12 = *(_QWORD *)(v10 + 40), LODWORD(v13) = *(_DWORD *)(v10 + 52))
          : (v12 = v10 + 32, LODWORD(v13) = v11 >> 5),
            (_DWORD)v13))
      {
        v13 = v13;
        v14 = (_QWORD *)(v12 + 8);
        while (1)
        {
          v15 = *(v14 - 1);
          if (v15 == WebCore::HTMLNames::valueAttr
            || *(_QWORD *)(v15 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
            && *(_QWORD *)(v15 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
          {
            break;
          }
          v14 += 2;
          if (!--v13)
          {
            v14 = (_QWORD *)MEMORY[0x1E0CBF2F8];
            break;
          }
        }
      }
      else
      {
        v14 = (_QWORD *)MEMORY[0x1E0CBF2F8];
      }
      if (*v14)
      {
        (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v8 + 296))(v21);
        v9 = v21[0];
        if (v21[0])
          goto LABEL_34;
        v21[0] = 0;
        v8 = *(_DWORD **)(v6 + 240);
      }
      (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v8 + 64))(v21);
    }
    v9 = v21[0];
    if (!v21[0])
    {
LABEL_27:
      v16 = 1;
LABEL_28:
      if ((*(_BYTE *)(*(_QWORD *)(v5 + 104) + 239) & 4) != 0)
        v17 = 1;
      else
        v17 = (*(unsigned __int8 *)(v5 + 120) >> 4) & 3;
      if (v17 != v16)
      {
        WebCore::RenderStyle::clone((_QWORD *)(v5 + 80), (uint64_t)v21);
        if (v16)
          v19 = 16;
        else
          v19 = 0;
        v22 = v22 & 0xFFFFFFCF | v19;
        WebCore::RenderElement::setStyle(v5, (WebCore::Style *)v21, 0, v18);
        WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)v21, v20);
      }
      return;
    }
LABEL_34:
    v16 = *((_DWORD *)v9 + 1) == 0;
    v21[0] = 0;
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
    goto LABEL_28;
  }
}

unsigned int *WebCore::RenderSearchField::valueChanged(unsigned int *this, WTF::StringImpl *a2, int a3)
{
  unsigned int *v4;
  uint64_t v5;
  int v6;
  WTF::StringImpl ***v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  int v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  void *v19;
  WTF *v20;
  unsigned int *v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  int v26;
  WTF::StringImpl *v27[2];
  _BYTE v28[8];
  WTF::StringImpl *v29;
  char v30;

  v4 = this;
  v5 = this[71];
  v6 = v5 + 2;
  if (!(_DWORD)v5)
    v6 = 0;
  if (v6 != (_DWORD)a2)
  {
    v11 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    if ((*(_WORD *)(v11 + 28) & 8) == 0
      || (v12 = (int)a2,
          ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v11 + 872))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0))
    {
      __break(0xC471u);
      JUMPOUT(0x196438CBCLL);
    }
    if (*(_QWORD *)(*(_QWORD *)(v11 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
    {
      *(_DWORD *)(v11 + 24) += 2;
      v13 = v4[71];
      if (v13)
        v14 = v13 + 1;
      else
        v14 = -1;
      if (v14 == v12)
      {
        v15 = 0;
LABEL_25:
        v27[0] = v15;
        WebCore::HTMLInputElement::setValue(v11, (uint64_t)v27, 0, 0, (uint64_t)v28);
        if (v30)
        {
          v17 = v29;
          v29 = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 2)
              WTF::StringImpl::destroy(v17, v16);
            else
              *(_DWORD *)v17 -= 2;
          }
        }
        v18 = v27[0];
        v27[0] = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 2)
            WTF::StringImpl::destroy(v18, v16);
          else
            *(_DWORD *)v18 -= 2;
        }
        if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 40) + 8) + 680) + 696) & 1) != 0 && a3)
          WebCore::HTMLInputElement::onSearch((WebCore::EventNames **)v11);
        v27[0] = 0;
        v27[1] = 0;
        this = (unsigned int *)WebCore::HTMLTextFormControlElement::setSelectionRange(v11, 0, 0xFFFFFFFF, 0, 3, (uint64_t *)v27, 0);
        if ((_DWORD)this)
          this = (unsigned int *)WebCore::HTMLTextFormControlElement::scheduleSelectEvent((WebCore::HTMLTextFormControlElement *)v11);
        if (*(_DWORD *)(v11 + 24) == 2)
        {
          if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
            return WebCore::Node::removedLastRef((WebCore::Node *)v11, v19);
        }
        else
        {
          *(_DWORD *)(v11 + 24) -= 2;
        }
        return this;
      }
      if (v13 > v12 - 1)
      {
        v15 = *(WTF::StringImpl **)(*((_QWORD *)v4 + 34) + 16 * (v12 - 1));
        if (v15)
          *(_DWORD *)v15 += 2;
        goto LABEL_25;
      }
    }
    __break(0xC471u);
    JUMPOUT(0x196438C9CLL);
  }
  if (a3)
  {
    v7 = (WTF::StringImpl ***)(this + 68);
    if (this[70])
    {
      if ((_DWORD)v5)
      {
        v8 = *v7;
        v9 = 16 * v5;
        do
        {
          v10 = *v8;
          *v8 = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 == 2)
              WTF::StringImpl::destroy(v10, a2);
            else
              *(_DWORD *)v10 -= 2;
          }
          v8 += 2;
          v9 -= 16;
        }
        while (v9);
        v4[71] = 0;
      }
      v20 = (WTF *)*v7;
      if (*v7)
      {
        *((_QWORD *)v4 + 34) = 0;
        v4[70] = 0;
        WTF::fastFree(v20, a2);
      }
    }
    this = (unsigned int *)WebCore::RenderSearchField::autosaveName(*(WebCore::RenderSearchField **)(*((_QWORD *)v4 + 3) + 8));
    if (*(_QWORD *)this)
    {
      if (*(_DWORD *)(*(_QWORD *)this + 4))
      {
        v21 = this;
        v22 = *((_QWORD *)v4 + 33);
        if (v22)
          return (unsigned int *)(*(uint64_t (**)(uint64_t, unsigned int *, unsigned int *))(*(_QWORD *)v22 + 24))(v22, v21, v4 + 68);
        v23 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v4 + 3) + 8)
                                                                                                + 40)
                                                                                    + 8)
                                                                        + 528)
                                                            + 8)
                                                + 24)
                                    + 8)
                        + 48);
        WebCore::Chrome::notifyPopupOpeningObservers(v23);
        (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, unsigned int *))(**(_QWORD **)(v23 + 16) + 1312))(v27, *(_QWORD *)(v23 + 16), v4 + 62);
        v24 = v27[0];
        v27[0] = 0;
        v25 = (WTF::StringImpl *)*((_QWORD *)v4 + 33);
        *((_QWORD *)v4 + 33) = v24;
        if (v25)
        {
          v26 = *((_DWORD *)v25 + 2) - 1;
          if (*((_DWORD *)v25 + 2) == 1)
          {
            (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v25 + 8))(v25);
            v25 = v27[0];
            v27[0] = 0;
            if (!v25)
              goto LABEL_48;
            v26 = *((_DWORD *)v25 + 2) - 1;
            if (*((_DWORD *)v25 + 2) == 1)
            {
              (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v25 + 8))(v25);
              goto LABEL_48;
            }
          }
          *((_DWORD *)v25 + 2) = v26;
        }
LABEL_48:
        v22 = *((_QWORD *)v4 + 33);
        return (unsigned int *)(*(uint64_t (**)(uint64_t, unsigned int *, unsigned int *))(*(_QWORD *)v22 + 24))(v22, v21, v4 + 68);
      }
    }
  }
  return this;
}

uint64_t WebCore::RenderSearchField::listSize(WebCore::RenderSearchField *this)
{
  int v1;

  v1 = *((_DWORD *)this + 71);
  if (v1)
    return (v1 + 3);
  else
    return 1;
}

uint64_t WebCore::RenderSearchField::itemText@<X0>(uint64_t this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  unsigned int v3;
  int v4;
  _DWORD *v5;

  v3 = *(_DWORD *)(this + 284);
  if (v3)
    v4 = v3 + 1;
  else
    v4 = -1;
  if (v4 == a2)
  {
    v5 = 0;
LABEL_9:
    *a3 = v5;
    return this;
  }
  if (v3 > a2 - 1)
  {
    v5 = *(_DWORD **)(*(_QWORD *)(this + 272) + 16 * (a2 - 1));
    if (v5)
      *v5 += 2;
    goto LABEL_9;
  }
  __break(0xC471u);
  return this;
}

unsigned int *`non-virtual thunk to'WebCore::RenderSearchField::valueChanged(WebCore::RenderSearchField *this, WTF::StringImpl *a2, int a3)
{
  return WebCore::RenderSearchField::valueChanged((unsigned int *)this - 62, a2, a3);
}

BOOL WebCore::RenderSearchField::itemIsSeparator(WebCore::RenderSearchField *this, int a2)
{
  int v2;
  int v3;

  v2 = *((_DWORD *)this + 71);
  if (v2)
    v3 = v2 + 1;
  else
    v3 = -1;
  return v3 == a2;
}

uint64_t `non-virtual thunk to'WebCore::RenderSearchField::itemText@<X0>(uint64_t this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  unsigned int v3;
  int v4;
  _DWORD *v5;

  v3 = *(_DWORD *)(this + 36);
  if (v3)
    v4 = v3 + 1;
  else
    v4 = -1;
  if (v4 == a2)
  {
    v5 = 0;
LABEL_9:
    *a3 = v5;
    return this;
  }
  if (v3 > a2 - 1)
  {
    v5 = *(_DWORD **)(*(_QWORD *)(this + 24) + 16 * (a2 - 1));
    if (v5)
      *v5 += 2;
    goto LABEL_9;
  }
  __break(0xC471u);
  return this;
}

void WebCore::RenderSearchField::itemLabel(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void `non-virtual thunk to'WebCore::RenderSearchField::itemLabel(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebCore::RenderSearchField::itemIcon(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void `non-virtual thunk to'WebCore::RenderSearchField::itemIcon(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

BOOL WebCore::RenderSearchField::itemIsEnabled(WebCore::RenderSearchField *this, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  v2 = *((_DWORD *)this + 71);
  if (v2)
    v3 = v2 + 1;
  else
    v3 = -1;
  return v3 != a2;
}

BOOL `non-virtual thunk to'WebCore::RenderSearchField::itemIsEnabled(WebCore::RenderSearchField *this, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  v2 = *((_DWORD *)this + 9);
  if (v2)
    v3 = v2 + 1;
  else
    v3 = -1;
  return v3 != a2;
}

int *WebCore::RenderSearchField::menuStyle@<X0>(WebCore::RenderSearchField *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const WebCore::FontCascade *v10;
  BOOL v11;
  int v12;
  unsigned int v13;
  BOOL v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  int *result;
  int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned __int8 v30;
  char v31;
  char v32;
  unint64_t v33;
  unint64_t v34;

  v4 = (char *)this + 80;
  WebCore::RenderStyle::visitedDependentColorWithColorFilter((uint64_t)this + 80, 5, 0, &v34);
  WebCore::RenderStyle::visitedDependentColorWithColorFilter((uint64_t)v4, 61, 0, &v33);
  v5 = *((_QWORD *)this + 13);
  v6 = (*(_BYTE *)(v5 + 239) & 4) == 0 && (*((_BYTE *)this + 120) & 0x30) == 0;
  v7 = *((_QWORD *)this + 14);
  v8 = *((_QWORD *)this + 12);
  v9 = v8 & 0x1F;
  v29 = 0;
  v32 = 0;
  v30 = *(_BYTE *)(v5 + 180);
  v31 = *(_BYTE *)(v5 + 181);
  if (v30 - 2 >= 9)
  {
    if (v30 == 11)
    {
      v29 = *(_DWORD *)(v5 + 176);
      WebCore::Length::ref((int *)&v29);
      v8 = *((_QWORD *)this + 12);
    }
  }
  else
  {
    v32 = *(_BYTE *)(v5 + 182);
    v29 = *(_DWORD *)(v5 + 176);
  }
  v10 = (const WebCore::FontCascade *)(v7 + 32);
  v11 = v9 == 26;
  v12 = *((_DWORD *)this + 30);
  v13 = (v8 >> 22) & 7;
  v15 = v13 == 2 || v13 == 5;
  v16 = v34;
  *(_QWORD *)a2 = v34;
  if ((v16 & 0x8000000000000) != 0)
  {
    v21 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFLL);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 + 1, v21));
  }
  v17 = v33;
  *(_QWORD *)(a2 + 8) = v33;
  if ((v17 & 0x8000000000000) != 0)
  {
    v23 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFLL);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 + 1, v23));
  }
  WebCore::FontCascade::FontCascade((WebCore::FontCascade *)(a2 + 16), v10);
  *(_BYTE *)(a2 + 312) = v6;
  *(_BYTE *)(a2 + 313) = v11;
  *(_BYTE *)(a2 + 314) = 1;
  result = (int *)(a2 + 316);
  *(_DWORD *)(a2 + 316) = 0;
  *(_BYTE *)(a2 + 322) = 0;
  v20 = v30;
  *(_BYTE *)(a2 + 320) = v30;
  *(_BYTE *)(a2 + 321) = v31;
  if ((v20 - 2) >= 9)
  {
    if (v20 == 11)
    {
      *result = v29;
      result = WebCore::Length::ref(result);
    }
  }
  else
  {
    *(_BYTE *)(a2 + 322) = v32;
    *result = v29;
  }
  *(_BYTE *)(a2 + 324) = (v12 & 0x4000000) != 0;
  *(_BYTE *)(a2 + 325) = v15;
  *(_QWORD *)(a2 + 328) = 1;
  *(_BYTE *)(a2 + 336) = 0;
  if (v20 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v29);
  }
  if ((v33 & 0x8000000000000) != 0)
  {
    result = (int *)(v33 & 0xFFFFFFFFFFFFLL);
    do
    {
      v25 = __ldaxr((unsigned int *)result);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, (unsigned int *)result));
    if (!v26)
    {
      atomic_store(1u, (unsigned int *)result);
      result = (int *)WTF::fastFree((WTF *)result, v18);
    }
  }
  if ((v34 & 0x8000000000000) != 0)
  {
    result = (int *)(v34 & 0xFFFFFFFFFFFFLL);
    do
    {
      v27 = __ldaxr((unsigned int *)result);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, (unsigned int *)result));
    if (!v28)
    {
      atomic_store(1u, (unsigned int *)result);
      return (int *)WTF::fastFree((WTF *)result, v18);
    }
  }
  return result;
}

int *`non-virtual thunk to'WebCore::RenderSearchField::itemStyle@<X0>(WebCore::RenderSearchField *this@<X0>, uint64_t a2@<X8>)
{
  return WebCore::RenderSearchField::menuStyle((WebCore::RenderSearchField *)((char *)this - 248), a2);
}

int *`non-virtual thunk to'WebCore::RenderSearchField::menuStyle@<X0>(WebCore::RenderSearchField *this@<X0>, uint64_t a2@<X8>)
{
  return WebCore::RenderSearchField::menuStyle((WebCore::RenderSearchField *)((char *)this - 248), a2);
}

uint64_t WebCore::RenderSearchField::clientInsetLeft(WebCore::RenderSearchField *this)
{
  return (*((_DWORD *)this + 41) / 128);
}

uint64_t `non-virtual thunk to'WebCore::RenderSearchField::clientInsetLeft(WebCore::RenderSearchField *this)
{
  return (*((_DWORD *)this - 21) / 128);
}

uint64_t WebCore::RenderSearchField::clientInsetRight(WebCore::RenderSearchField *this)
{
  return (*((_DWORD *)this + 41) / 128);
}

uint64_t `non-virtual thunk to'WebCore::RenderSearchField::clientInsetRight(WebCore::RenderSearchField *this)
{
  return (*((_DWORD *)this - 21) / 128);
}

uint64_t WebCore::RenderSearchField::clientPaddingLeft(WebCore::RenderSearchField *this)
{
  unsigned __int8 *v2;
  int v3;
  float v4;
  float v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  float v16;
  int v17;

  v2 = *(unsigned __int8 **)(*((_QWORD *)this + 11) + 24);
  v3 = v2[100];
  if ((v3 & 0xFFFFFFF7) == 3)
  {
    v17 = (*(uint64_t (**)(WebCore::RenderSearchField *))(*(_QWORD *)this + 1144))(this);
    v3 = v2[100];
    v4 = (float)v17 * 0.015625;
  }
  else
  {
    v4 = 0.0;
  }
  switch(v3)
  {
    case 4:
      v5 = *((float *)v2 + 24);
      if (!v2[102])
        v5 = (float)SLODWORD(v5);
      break;
    case 3:
      v16 = *((float *)v2 + 24);
      if (!v2[102])
        v16 = (float)SLODWORD(v16);
      v5 = (float)(v4 * v16) / 100.0;
      break;
    case 11:
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v2 + 96), v4);
      break;
    default:
      v7 = 0;
      goto LABEL_9;
  }
  v6 = v5 * 64.0;
  if (v6 >= 2147483650.0)
  {
    v7 = 0x7FFFFFFFLL;
  }
  else if (v6 <= -2147483650.0)
  {
    v7 = 0x80000000;
  }
  else
  {
    v7 = (int)v6;
  }
LABEL_9:
  v8 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v8 + 28) & 8) == 0 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 872))(v8) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1964392D4);
  }
  if (*(_QWORD *)(*(_QWORD *)(v8 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x1964392A8);
  }
  v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v8 + 240) + 536))(*(_QWORD *)(v8 + 240));
  if (v9)
  {
    v11 = *(_DWORD *)(v9 + 24);
    *(_DWORD *)(v9 + 24) = v11 + 2;
    if ((*(_QWORD *)(v9 + 64) & 0xFFFFFFFFFFFFLL) != 0
      && (*(_BYTE *)((*(_QWORD *)(v9 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) != 0)
    {
      v12 = *(_DWORD *)((*(_QWORD *)(v9 + 64) & 0xFFFFFFFFFFFFLL) + 0x98);
      v13 = __OFADD__((_DWORD)v7, v12);
      v14 = (v7 + v12);
      if (v13)
      {
        v7 = (v7 >> 31) + 0x7FFFFFFF;
        if (v11)
          goto LABEL_18;
LABEL_31:
        if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v9, v10);
        return v7;
      }
      v7 = v14;
    }
    if (v11)
    {
LABEL_18:
      *(_DWORD *)(v9 + 24) = v11;
      return v7;
    }
    goto LABEL_31;
  }
  return v7;
}

uint64_t `non-virtual thunk to'WebCore::RenderSearchField::clientPaddingLeft(WebCore::RenderSearchField *this)
{
  return WebCore::RenderSearchField::clientPaddingLeft((WebCore::RenderSearchField *)((char *)this - 248));
}

uint64_t WebCore::RenderSearchField::clientPaddingRight(WebCore::RenderSearchField *this)
{
  unsigned __int8 *v2;
  int v3;
  float v4;
  float v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  BOOL v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  float v26;
  int v27;

  v2 = *(unsigned __int8 **)(*((_QWORD *)this + 11) + 24);
  v3 = v2[84];
  if ((v3 & 0xFFFFFFF7) == 3)
  {
    v27 = (*(uint64_t (**)(WebCore::RenderSearchField *))(*(_QWORD *)this + 1144))(this);
    v3 = v2[84];
    v4 = (float)v27 * 0.015625;
  }
  else
  {
    v4 = 0.0;
  }
  switch(v3)
  {
    case 4:
      v5 = *((float *)v2 + 20);
      if (!v2[86])
        v5 = (float)SLODWORD(v5);
      break;
    case 3:
      v26 = *((float *)v2 + 20);
      if (!v2[86])
        v26 = (float)SLODWORD(v26);
      v5 = (float)(v4 * v26) / 100.0;
      break;
    case 11:
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v2 + 80), v4);
      break;
    default:
      v7 = 0;
      goto LABEL_9;
  }
  v6 = v5 * 64.0;
  if (v6 >= 2147483650.0)
  {
    v7 = 0x7FFFFFFFLL;
  }
  else if (v6 <= -2147483650.0)
  {
    v7 = 0x80000000;
  }
  else
  {
    v7 = (int)v6;
  }
LABEL_9:
  v8 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v8 + 28) & 8) == 0
    || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v8 + 872))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1964395ACLL);
  }
  if (*(_QWORD *)(*(_QWORD *)(v8 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x196439580);
  }
  v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v8 + 240) + 528))(*(_QWORD *)(v8 + 240));
  if (v9)
  {
    v11 = v9;
    *(_DWORD *)(v9 + 24) += 2;
    v12 = *(_QWORD *)(v9 + 64) & 0xFFFFFFFFFFFFLL;
    if (!v12 || (*(_BYTE *)((*(_QWORD *)(v9 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) == 0)
      goto LABEL_29;
    v13 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    if ((*(_WORD *)(v13 + 28) & 8) == 0
      || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 872))(v13) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1964395F4);
    }
    if (*(_QWORD *)(*(_QWORD *)(v13 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
    {
      __break(0xC471u);
      JUMPOUT(0x1964395D4);
    }
    v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v13 + 240) + 536))(*(_QWORD *)(v13 + 240));
    if (!v14)
      goto LABEL_29;
    v15 = *(_DWORD *)(v14 + 24);
    *(_DWORD *)(v14 + 24) = v15 + 2;
    if ((*(_QWORD *)(v14 + 64) & 0xFFFFFFFFFFFFLL) != 0
      && (*(_BYTE *)((*(_QWORD *)(v14 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) != 0)
    {
      v16 = *(_DWORD *)(v12 + 160);
      v17 = *(_DWORD *)((*(_QWORD *)(v14 + 64) & 0xFFFFFFFFFFFFLL) + 0x98);
      v18 = *(_DWORD *)((*(_QWORD *)(v14 + 64) & 0xFFFFFFFFFFFFLL) + 0xA0);
      v19 = __OFADD__(v17, v18);
      v20 = v17 + v18;
      v21 = (v17 >> 31) + 0x7FFFFFFF;
      if (!v19)
        v21 = v20;
      v19 = __OFSUB__(v16, v21);
      v22 = v16 - v21;
      v23 = (v16 >> 31) + 0x7FFFFFFF;
      if (!v19)
        v23 = v22;
      v19 = __OFADD__((_DWORD)v7, v23);
      v24 = (v7 + v23);
      if (v19)
      {
        v7 = (v7 >> 31) + 0x7FFFFFFF;
        if (v15)
          goto LABEL_28;
        goto LABEL_47;
      }
      v7 = v24;
    }
    if (v15)
    {
LABEL_28:
      *(_DWORD *)(v14 + 24) = v15;
LABEL_29:
      if (*(_DWORD *)(v11 + 24) == 2)
      {
        if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v11, v10);
      }
      else
      {
        *(_DWORD *)(v11 + 24) -= 2;
      }
      return v7;
    }
LABEL_47:
    if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v14, v10);
    goto LABEL_29;
  }
  return v7;
}

uint64_t `non-virtual thunk to'WebCore::RenderSearchField::clientPaddingRight(WebCore::RenderSearchField *this)
{
  return WebCore::RenderSearchField::clientPaddingRight((WebCore::RenderSearchField *)((char *)this - 248));
}

uint64_t `non-virtual thunk to'WebCore::RenderSearchField::listSize(WebCore::RenderSearchField *this)
{
  int v1;

  v1 = *((_DWORD *)this + 9);
  if (v1)
    return (v1 + 3);
  else
    return 1;
}

uint64_t WebCore::RenderSearchField::selectedIndex(WebCore::RenderSearchField *this)
{
  return 0xFFFFFFFFLL;
}

uint64_t `non-virtual thunk to'WebCore::RenderSearchField::selectedIndex(WebCore::RenderSearchField *this)
{
  return 0xFFFFFFFFLL;
}

uint64_t WebCore::RenderSearchField::popupDidHide(uint64_t this)
{
  *(_BYTE *)(this + 256) = 0;
  return this;
}

uint64_t `non-virtual thunk to'WebCore::RenderSearchField::popupDidHide(uint64_t this)
{
  *(_BYTE *)(this + 8) = 0;
  return this;
}

BOOL `non-virtual thunk to'WebCore::RenderSearchField::itemIsSeparator(WebCore::RenderSearchField *this, int a2)
{
  int v2;
  int v3;

  v2 = *((_DWORD *)this + 9);
  if (v2)
    v3 = v2 + 1;
  else
    v3 = -1;
  return v3 == a2;
}

BOOL WebCore::RenderSearchField::itemIsLabel(WebCore::RenderSearchField *this, int a2)
{
  return a2 == 0;
}

BOOL `non-virtual thunk to'WebCore::RenderSearchField::itemIsLabel(WebCore::RenderSearchField *this, int a2)
{
  return a2 == 0;
}

uint64_t WebCore::RenderSearchField::itemIsSelected(WebCore::RenderSearchField *this)
{
  return 0;
}

uint64_t `non-virtual thunk to'WebCore::RenderSearchField::itemIsSelected(WebCore::RenderSearchField *this)
{
  return 0;
}

unsigned int *WebCore::RenderSearchField::setTextFromItem(WebCore::RenderSearchField *this, int a2)
{
  uint64_t v2;
  unsigned int v5;
  int v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  unsigned int *result;
  WTF::StringImpl *v11;
  _BYTE v12[8];
  WTF::StringImpl *v13;
  char v14;

  v2 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v2 + 28) & 8) == 0
    || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v2 + 872))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196439854);
  }
  if (*(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
    goto LABEL_28;
  *(_DWORD *)(v2 + 24) += 2;
  v5 = *((_DWORD *)this + 71);
  if (v5)
    v6 = v5 + 1;
  else
    v6 = -1;
  if (v6 == a2)
  {
    v7 = 0;
    goto LABEL_12;
  }
  if (v5 <= a2 - 1)
  {
LABEL_28:
    __break(0xC471u);
    JUMPOUT(0x196439834);
  }
  v7 = *(WTF::StringImpl **)(*((_QWORD *)this + 34) + 16 * (a2 - 1));
  if (v7)
    *(_DWORD *)v7 += 2;
LABEL_12:
  v11 = v7;
  WebCore::HTMLInputElement::setValue(v2, (uint64_t)&v11, 0, 0, (uint64_t)v12);
  if (v14)
  {
    v9 = v13;
    v13 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
  }
  result = (unsigned int *)v11;
  v11 = 0;
  if (result)
  {
    if (*result == 2)
      result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v8);
    else
      *result -= 2;
  }
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v2, v8);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  return result;
}

unsigned int *`non-virtual thunk to'WebCore::RenderSearchField::setTextFromItem(WebCore::RenderSearchField *this, int a2)
{
  return WebCore::RenderSearchField::setTextFromItem((WebCore::RenderSearchField *)((char *)this - 248), a2);
}

uint64_t WebCore::RenderSearchField::fontSelector(WebCore::RenderSearchField *this)
{
  WebCore::Document *v1;

  v1 = *(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8);
  if (*((_QWORD *)v1 + 331))
    return *((_QWORD *)v1 + 331);
  else
    return WebCore::Document::ensureFontSelector(v1);
}

uint64_t `non-virtual thunk to'WebCore::RenderSearchField::fontSelector(WebCore::RenderSearchField *this)
{
  WebCore::Document *v1;

  v1 = *(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this - 28) + 8) + 40) + 8);
  if (*((_QWORD *)v1 + 331))
    return *((_QWORD *)v1 + 331);
  else
    return WebCore::Document::ensureFontSelector(v1);
}

uint64_t `non-virtual thunk to'WebCore::RenderSearchField::hostWindow(WebCore::RenderSearchField *this)
{
  return WebCore::RenderObject::hostWindow((WebCore::RenderSearchField *)((char *)this - 248));
}

unsigned int *WebCore::RenderSearchField::createScrollbar@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, unsigned int **a5@<X8>)
{
  uint64_t v9;
  unsigned int *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  char v24;
  char v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  char **v30;

  if ((*(_BYTE *)(a1 + 103) & 2) == 0 || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 40) + 586))
  {
LABEL_2:
    v9 = WTF::fastMalloc((WTF *)0xD0);
    result = (unsigned int *)WebCore::Scrollbar::Scrollbar(v9, a2, a3, a4, 0, 0);
    *a5 = result;
    return result;
  }
  v11 = *(_QWORD *)(a1 + 104);
  v12 = v11 + 384;
  v13 = *(unsigned int *)(v11 + 392);
  if ((_DWORD)v13)
  {
    v19 = *(_QWORD *)(a1 + 104);
    v26 = &v25;
    v27 = &v25;
    v28 = &v25;
    v29 = &v25;
    if ((_DWORD)v13 == -1)
      goto LABEL_24;
    goto LABEL_19;
  }
  if ((*(_BYTE *)(v11 + 390) & 4) != 0)
  {
    v19 = *(_QWORD *)(a1 + 104);
    v26 = &v25;
    v27 = &v25;
    v28 = &v25;
    v29 = &v25;
LABEL_19:
    v30 = &v26;
    ((void (*)(uint64_t *__return_ptr, char ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v13])(&v20, &v30, v12);
    v26 = &v25;
    v27 = &v25;
    v28 = &v25;
    v29 = &v25;
    v17 = *(unsigned int *)(v19 + 408);
    if ((_DWORD)v17 != -1)
    {
      v30 = &v26;
      ((void (*)(uint64_t *__return_ptr, char ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v17])(&v22, &v30, v19 + 400);
      v24 = 1;
      if (v23 != -1)
        ((void (*)(char **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v23])(&v26, &v22);
      v23 = -1;
      if (v21 != -1)
        ((void (*)(char **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v21])(&v26, &v20);
      goto LABEL_2;
    }
LABEL_24:
    v18 = std::__throw_bad_variant_access[abi:sn180100]();
  }
  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  if ((*(_WORD *)(v14 + 28) & 8) == 0
    || ((*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)v14 + 872))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), v12) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196439A40);
  }
  if (*(_QWORD *)(*(_QWORD *)(v14 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x196439A20);
  }
  *(_DWORD *)(v14 + 24) += 2;
  v15 = WTF::fastMalloc((WTF *)0xE8);
  result = (unsigned int *)WebCore::RenderScrollbar::RenderScrollbar(v15, a2, a3, v14, 0);
  *a5 = result;
  if (*(_DWORD *)(v14 + 24) == 2)
  {
    if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v14, v16);
  }
  else
  {
    *(_DWORD *)(v14 + 24) -= 2;
  }
  return result;
}

unsigned int *`non-virtual thunk to'WebCore::RenderSearchField::createScrollbar@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, unsigned int **a5@<X8>)
{
  return WebCore::RenderSearchField::createScrollbar(a1 - 248, a2, a3, a4, a5);
}

uint64_t WebCore::RenderSelection::set(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *a2;
  if (!*a2 || !*(_QWORD *)(v3 + 8) || (v8 = a2[1]) != 0 && *(_QWORD *)(v8 + 8))
  {
    v4 = a2[1];
    if (!v4 || !*(_QWORD *)(v4 + 8) || v3 && *(_QWORD *)(v3 + 8))
    {
      v5 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) + 8) + 40)
                                                                                          + 8)
                                                                              + 528)
                                                                  + 8)
                                                      + 296)
                                          + 3064)
                              + 153) == 1;
      if (v3)
        v3 = *(_QWORD *)(v3 + 8);
      v6 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        v6 = *(_QWORD *)(v6 + 8);
      if (v3 != v6)
        goto LABEL_19;
      if (v4)
        v4 = *(_QWORD *)(v4 + 8);
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        v7 = *(_QWORD *)(v7 + 8);
      if (v4 != v7
        || *((_DWORD *)a2 + 4) != *(_DWORD *)(a1 + 16)
        || *((_DWORD *)a2 + 5) != *(_DWORD *)(a1 + 20)
        || *(unsigned __int8 *)(a1 + 40) != v5)
      {
LABEL_19:
        *(_BYTE *)(a1 + 40) = v5;
        return (uint64_t)WebCore::RenderSelection::apply(a1, a2, a3);
      }
    }
  }
  return a1;
}

uint64_t *WebCore::RenderSelection::apply(uint64_t a1, _QWORD *a2, int a3)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _BYTE *v15;
  uint64_t v16;
  _DWORD *v17;
  WTF *v18;
  _DWORD *v19;
  WTF *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  void (*v25)(void);
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  WTF *v40;
  WebCore::RenderSelectionGeometry *v41;
  WTF *v42;
  void *v43;
  WebCore::RenderObject *v44;
  void *v45;
  WebCore::RenderObject *v46;
  WTF *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  char *v51;
  int v52;
  WebCore::RenderObject *v53;
  int v54;
  int v55;
  WTF *v56;
  void *v57;
  WTF *v58;
  uint64_t v59;
  WTF *v60;
  WTF *v61;
  uint64_t v62;
  void *v63;
  WTF *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  WTF *v70;
  WTF *v71;
  int v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unsigned int v76;
  int i;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  WTF *v83;
  WTF *v84;
  uint64_t v85;
  int v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unsigned int v90;
  int j;
  uint64_t v92;
  WTF *v93;
  _QWORD *v94;
  char *v95;
  uint64_t v96;
  WTF *v97;
  int v98;
  unsigned int v99;
  WTF *v101;
  uint64_t v102;
  WTF *v103;
  WTF *v104;
  WTF *v105;
  _QWORD *v106;
  uint64_t v107;
  _QWORD *v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unsigned int v116;
  int k;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char v122;
  uint64_t v123;
  unsigned int v124;
  unint64_t v125;
  int v126;
  int v127;
  unint64_t v129;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  uint64_t v134;
  BOOL v135;
  int v136;
  int v137;
  int v138;
  unsigned int v139;
  unsigned int v140;
  int v141;
  unsigned int v142;
  uint64_t v143;
  unsigned int v144;
  uint64_t v145;
  int v146;
  int v147;
  unint64_t v149;
  unsigned int v151;
  unsigned int v152;
  unsigned int v153;
  uint64_t v154;
  int v155;
  int v156;
  int v157;
  unsigned int v158;
  unsigned int v159;
  int v160;
  unsigned int v161;
  uint64_t v162;
  unsigned int v163;
  uint64_t v164;
  uint64_t v165;
  unsigned int v166;
  uint64_t v167;
  int v168;
  int v169;
  unint64_t v170;
  unsigned int v171;
  unsigned int v172;
  unsigned int v173;
  uint64_t v174;
  int v175;
  int v176;
  unsigned int v177;
  int v178;
  unsigned int v179;
  uint64_t v180;
  int v181;
  int v182;
  unint64_t v183;
  unsigned int v184;
  unsigned int v185;
  unsigned int v186;
  uint64_t v187;
  int v188;
  int v189;
  unsigned int v190;
  int v191;
  unsigned int v192;
  uint64_t v193;
  uint64_t v194;
  int v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  unsigned int v199;
  int m;
  uint64_t v201;
  WTF *v202;
  _QWORD *v204;
  uint64_t v205;
  WTF *v206;
  int v207;
  unsigned int v208;
  _QWORD *v210;
  _QWORD *v211;
  uint64_t v212;
  _QWORD *v213;
  _QWORD *v214;
  uint64_t v215;
  uint64_t v216;
  unsigned int v217;
  unint64_t v218;
  int v219;
  int v220;
  unint64_t v222;
  unsigned int v224;
  unsigned int v225;
  unsigned int v226;
  uint64_t v227;
  int v228;
  int v229;
  int v230;
  unsigned int v231;
  unsigned int v232;
  int v233;
  unsigned int v234;
  uint64_t v235;
  unsigned int v236;
  uint64_t v237;
  int v238;
  int v239;
  unint64_t v241;
  unsigned int v243;
  unsigned int v244;
  unsigned int v245;
  uint64_t v246;
  int v247;
  int v248;
  int v249;
  unsigned int v250;
  unsigned int v251;
  int v252;
  unsigned int v253;
  uint64_t v254;
  unsigned int v255;
  uint64_t v256;
  _QWORD *v257;
  void *v258;
  WTF *v259;
  uint64_t v260;
  uint64_t v262;
  unsigned int v263;
  uint64_t v264;
  BOOL v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  WTF **v272;
  WTF *v273;
  WTF *v274;
  uint64_t v275;
  uint64_t v276;
  WTF *v277;
  WTF *v278;
  uint64_t v279;
  char *v280;
  int v281;
  uint64_t v282;
  int v283;
  WTF *v284;
  char *v285;
  int v286;
  uint64_t v287;
  int v288;
  _DWORD *v289;
  uint64_t v290;
  uint64_t v291;
  char *v292;
  int v293;
  int v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  WTF *v299;
  WebCore::RenderSelectionGeometry *v300;
  void *v301;
  WTF *v302;
  WTF *v303;
  uint64_t v304;
  void *v305;
  char *v306;
  int v307;
  WebCore::RenderObject *v308;
  int v309;
  int v310;
  WTF *v311;
  WTF *v312;
  void *v313;
  WTF *v314;
  WebCore::RenderObject *v315;
  void *v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  void *v320;
  WTF *v321;
  WTF *v322;
  _QWORD *v323;
  int v324;
  unsigned int v325;
  _QWORD *v326;
  _QWORD *v327;
  uint64_t v328;
  char *v329;
  uint64_t v330;
  WTF *v331;
  uint64_t v332;
  WTF *v333;
  uint64_t v334;
  WTF **v335;

  v6 = *(_DWORD *)(a1 + 20);
  v324 = *(_DWORD *)(a1 + 16);
  v325 = v6;
  v326 = 0;
  v327 = 0;
  if (*(_QWORD *)a1)
    v7 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  else
    v7 = 0;
  v8 = *(_QWORD *)(a1 + 8);
  if (!v8)
    goto LABEL_6;
  v9 = *(_QWORD *)(v8 + 8);
  if (!v9)
    goto LABEL_6;
  v262 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 112))(v9);
  v10 = v262;
  if (v6 && v262)
  {
    v263 = 1;
    while (1)
    {
      v264 = *(unsigned int *)(v10 + 47);
      if (!(v264 | ((unint64_t)*(unsigned __int8 *)(v10 + 51) << 32)))
        break;
      v10 = *(_QWORD *)((v264 | ((unint64_t)*(unsigned __int8 *)(v10 + 51) << 32)) + 8);
      if (v10)
        v265 = v263 >= v6;
      else
        v265 = 1;
      ++v263;
      if (v265)
        goto LABEL_479;
    }
  }
  else
  {
LABEL_479:
    if (v10)
      goto LABEL_7;
  }
  v266 = *(unsigned int *)(v9 + 47);
  if (!(v266 | ((unint64_t)*(unsigned __int8 *)(v9 + 51) << 32))
    || (v10 = *(_QWORD *)((v266 | ((unint64_t)*(unsigned __int8 *)(v9 + 51) << 32)) + 8)) == 0)
  {
    v267 = *(_QWORD *)(v9 + 32);
    if (!v267 || (v268 = *(_QWORD *)(v267 + 8)) == 0)
    {
LABEL_6:
      v10 = 0;
      goto LABEL_7;
    }
    do
    {
      v269 = *(unsigned int *)(v268 + 47);
      if (v269 | ((unint64_t)*(unsigned __int8 *)(v268 + 51) << 32))
      {
        v10 = *(_QWORD *)((v269 | ((unint64_t)*(unsigned __int8 *)(v268 + 51) << 32)) + 8);
        if (v10)
          break;
      }
      v270 = *(_QWORD *)(v268 + 32);
      if (!v270)
        goto LABEL_6;
      v10 = 0;
      v268 = *(_QWORD *)(v270 + 8);
    }
    while (v268);
  }
LABEL_7:
  v333 = 0;
  v334 = 0;
  v332 = v7;
  if (v7)
  {
    if (*(_BYTE *)(v7 + 46) == 27)
    {
      ++*(_DWORD *)(v7 + 16);
      v328 = v7;
      v280 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v333, 1uLL, (unint64_t)&v328);
      v281 = HIDWORD(v334) + 1;
      *((_QWORD *)v333 + HIDWORD(v334)) = *(_QWORD *)v280;
      HIDWORD(v334) = v281;
      v282 = *(_QWORD *)(v7 + 200);
      if (v282)
        v282 = *(_QWORD *)(v282 + 8);
      v332 = v282;
      v283 = *(_DWORD *)(v7 + 16);
      if (!v283)
      {
        __break(0xC471u);
        JUMPOUT(0x19643B570);
      }
      *(_DWORD *)(v7 + 16) = v283 - 1;
    }
    if (v7 != v10)
    {
      do
      {
        if ((((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 512))(v7) & 1) != 0
           || *(_QWORD *)a1 && *(_QWORD *)(*(_QWORD *)a1 + 8) == v7
           || (v318 = *(_QWORD *)(a1 + 8)) != 0 && *(_QWORD *)(v318 + 8) == v7)
          && (*(_BYTE *)(v7 + 23) & 0xE) != 0
          && WebCore::RenderObject::containingBlock((WebCore::RenderObject *)v7))
        {
          v299 = *(WTF **)(v7 + 8);
          if (!v299)
          {
            v299 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
            *(_DWORD *)v299 = 1;
            *((_QWORD *)v299 + 1) = v7;
            v321 = *(WTF **)(v7 + 8);
            *(_QWORD *)(v7 + 8) = v299;
            if (v321)
            {
              if (*(_DWORD *)v321 == 1)
              {
                WTF::fastFree(v321, v320);
                v299 = *(WTF **)(v7 + 8);
              }
              else
              {
                --*(_DWORD *)v321;
              }
            }
          }
          ++*(_DWORD *)v299;
          v335 = (WTF **)v299;
          v300 = (WebCore::RenderSelectionGeometry *)WTF::fastMalloc((WTF *)0x38);
          v331 = WebCore::RenderSelectionGeometry::RenderSelectionGeometry(v300, (WebCore::RenderObject *)v7);
          WTF::HashMap<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderSelectionGeometry>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderSelectionGeometry>>,WTF::HashTableTraits>::inlineSet<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderSelectionGeometry>>((WTF *)&v328, (uint64_t *)&v326, (uint64_t *)&v335, (uint64_t *)&v331);
          v302 = v331;
          if (v331)
          {
            v303 = (WTF *)*((_QWORD *)v331 + 3);
            if (v303)
            {
              *((_QWORD *)v331 + 3) = 0;
              *((_DWORD *)v302 + 8) = 0;
              WTF::fastFree(v303, v301);
            }
            WTF::fastFree(v302, v301);
          }
          if (v335)
          {
            if (*(_DWORD *)v335 == 1)
              WTF::fastFree((WTF *)v335, v301);
            else
              --*(_DWORD *)v335;
          }
          if (!a3)
          {
            while (1)
            {
              v315 = WebCore::RenderObject::containingBlock((WebCore::RenderObject *)v7);
              if (!v315)
                break;
              v7 = (uint64_t)v315;
              if (*((_BYTE *)v315 + 46) == 49)
                break;
              v312 = (WTF *)*((_QWORD *)v315 + 1);
              if (!v312)
              {
                v312 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
                *(_DWORD *)v312 = 1;
                *((_QWORD *)v312 + 1) = v7;
                v314 = *(WTF **)(v7 + 8);
                *(_QWORD *)(v7 + 8) = v312;
                if (v314)
                {
                  if (*(_DWORD *)v314 == 1)
                  {
                    WTF::fastFree(v314, v313);
                    v312 = *(WTF **)(v7 + 8);
                  }
                  else
                  {
                    --*(_DWORD *)v314;
                  }
                }
              }
              ++*(_DWORD *)v312;
              v335 = (WTF **)v312;
              WTF::HashMap<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockSelectionGeometry>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBlockSelectionGeometry>>,WTF::HashTableTraits>::add<decltype(nullptr)>((WTF *)&v328, (uint64_t *)&v327, (WTF **)&v335);
              v317 = v328;
              if (v335)
              {
                if (*(_DWORD *)v335 == 1)
                  WTF::fastFree((WTF *)v335, v316);
                else
                  --*(_DWORD *)v335;
              }
              if (*(_QWORD *)(v317 + 8))
                break;
              v304 = WTF::fastMalloc((WTF *)0x48);
              *(_QWORD *)v304 = v7;
              WebCore::RenderObject::containerForRepaint((_QWORD *)v7, (uint64_t)&v328);
              v306 = v329;
              if (v329)
              {
                v307 = *((_DWORD *)v329 + 4);
                if (!v307)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19643B5D0);
                }
                *((_DWORD *)v329 + 4) = v307 - 1;
              }
              *(_QWORD *)(v304 + 8) = v306;
              *(_BYTE *)(v304 + 16) = (*(_DWORD *)(v7 + 20) >> 25) & 7;
              if ((*(_BYTE *)(v7 + 20) & 0xF8) != 0)
                goto LABEL_596;
              v308 = WebCore::RenderObject::containingBlock((WebCore::RenderObject *)v7);
              if (!v308)
                goto LABEL_601;
              v309 = *((_DWORD *)v308 + 4);
              *((_DWORD *)v308 + 4) = v309 + 1;
              if (v309 == -1)
              {
                __break(0xC471u);
                JUMPOUT(0x19643B5F0);
              }
              v310 = *((_DWORD *)v308 + 5);
              *((_DWORD *)v308 + 4) = v309;
              if ((v310 & 0xF8) != 0)
              {
LABEL_596:
                *(_OWORD *)(v304 + 36) = 0u;
                *(_OWORD *)(v304 + 52) = 0u;
                *(_OWORD *)(v304 + 20) = 0u;
              }
              else
              {
LABEL_601:
                WebCore::RenderBlock::selectionGapRectsForRepaint(v7, *(const WebCore::RenderLayerModelObject **)(v304 + 8), (_OWORD *)(v304 + 20));
              }
              v311 = *(WTF **)(v317 + 8);
              *(_QWORD *)(v317 + 8) = v304;
              if (v311)
                WTF::fastFree(v311, v305);
            }
          }
        }
        v319 = WebCore::RenderRangeIterator::next((WebCore::RenderRangeIterator *)&v332);
        if (!v319)
          break;
        v7 = v319;
      }
      while (v319 != v10);
    }
    v284 = v333;
    if (v333)
    {
      v333 = 0;
      LODWORD(v334) = 0;
      WTF::fastFree(v284, a2);
    }
  }
  if (!v326)
  {
    v11 = 0;
    v12 = 0;
LABEL_10:
    v13 = (uint64_t)&v326[2 * v12];
    goto LABEL_11;
  }
  v12 = *((unsigned int *)v326 - 1);
  v13 = (uint64_t)&v326[2 * v12];
  if (!*((_DWORD *)v326 - 3))
  {
    v11 = (uint64_t)&v326[2 * v12];
    goto LABEL_10;
  }
  v11 = (uint64_t)v326;
  if ((_DWORD)v12)
  {
    v279 = 16 * v12;
    v11 = (uint64_t)v326;
    while ((unint64_t)(*(_QWORD *)v11 + 1) <= 1)
    {
      v11 += 16;
      v279 -= 16;
      if (!v279)
      {
        v11 = v13;
        break;
      }
    }
  }
LABEL_11:
  if (v326)
    v14 = &v326[2 * *((unsigned int *)v326 - 1)];
  else
    v14 = 0;
  while ((_QWORD *)v11 != v14)
  {
    v15 = *(_BYTE **)(*(_QWORD *)v11 + 8);
    if ((v15[23] & 0xE) != 0)
      (*(void (**)(_BYTE *, _QWORD))(*(_QWORD *)v15 + 496))(v15, 0);
    v16 = v11 + 16;
    v11 = v13;
    if (v16 != v13)
    {
      v11 = v16;
      while ((unint64_t)(*(_QWORD *)v11 + 1) <= 1)
      {
        v11 += 16;
        if (v11 == v13)
        {
          v11 = v13;
          break;
        }
      }
    }
  }
  v17 = (_DWORD *)*a2;
  if (*a2)
    ++*v17;
  v18 = *(WTF **)a1;
  *(_QWORD *)a1 = v17;
  if (v18)
  {
    if (*(_DWORD *)v18 == 1)
      WTF::fastFree(v18, a2);
    else
      --*(_DWORD *)v18;
  }
  v19 = (_DWORD *)a2[1];
  if (v19)
    ++*v19;
  v20 = *(WTF **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v19;
  if (v20)
  {
    if (*(_DWORD *)v20 == 1)
      WTF::fastFree(v20, a2);
    else
      --*(_DWORD *)v20;
  }
  *(_QWORD *)(a1 + 16) = a2[2];
  if (*(_QWORD *)a1)
  {
    v21 = *(_QWORD *)(*(_QWORD *)a1 + 8);
    if (v21)
    {
      v22 = *(_QWORD *)(a1 + 8);
      if (v22 && v21 == *(_QWORD *)(v22 + 8))
      {
        if ((*(_DWORD *)(v21 + 20) & 0xE000000) == 0x8000000)
          goto LABEL_44;
        v25 = *(void (**)(void))(*(_QWORD *)v21 + 496);
        goto LABEL_43;
      }
      if ((*(_DWORD *)(v21 + 20) & 0xE000000) != 0x2000000)
        (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v21 + 496))(*(_QWORD *)(*(_QWORD *)a1 + 8), 1);
    }
  }
  else
  {
    v21 = 0;
  }
  v23 = *(_QWORD *)(a1 + 8);
  if (!v23)
  {
LABEL_63:
    v30 = 0;
    goto LABEL_64;
  }
  v24 = *(_DWORD **)(v23 + 8);
  if (v24 && (v24[5] & 0xE000000) != 0x6000000)
  {
    v25 = *(void (**)(void))(*(_QWORD *)v24 + 496);
LABEL_43:
    v25();
  }
LABEL_44:
  v26 = *(_QWORD *)(a1 + 8);
  if (!v26)
    goto LABEL_63;
  v27 = *(_QWORD *)(v26 + 8);
  if (!v27)
    goto LABEL_63;
  v28 = *(_DWORD *)(a1 + 20);
  v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 112))(v27);
  v30 = v29;
  if (v28 && v29)
  {
    v31 = 1;
    do
    {
      v32 = *(unsigned int *)(v30 + 47);
      if (!(v32 | ((unint64_t)*(unsigned __int8 *)(v30 + 51) << 32)))
        goto LABEL_56;
      v30 = *(_QWORD *)((v32 | ((unint64_t)*(unsigned __int8 *)(v30 + 51) << 32)) + 8);
      if (v30)
        v33 = v31 >= v28;
      else
        v33 = 1;
      ++v31;
    }
    while (!v33);
  }
  if (!v30)
  {
LABEL_56:
    v34 = *(unsigned int *)(v27 + 47);
    if (v34 | ((unint64_t)*(unsigned __int8 *)(v27 + 51) << 32))
    {
      v30 = *(_QWORD *)((v34 | ((unint64_t)*(unsigned __int8 *)(v27 + 51) << 32)) + 8);
      if (v30)
        goto LABEL_64;
    }
    v35 = *(_QWORD *)(v27 + 32);
    if (v35)
    {
      while (1)
      {
        v36 = *(_QWORD *)(v35 + 8);
        if (!v36)
          break;
        v37 = *(unsigned int *)(v36 + 47);
        if (v37 | ((unint64_t)*(unsigned __int8 *)(v36 + 51) << 32))
        {
          v30 = *(_QWORD *)((v37 | ((unint64_t)*(unsigned __int8 *)(v36 + 51) << 32)) + 8);
          if (v30)
            goto LABEL_64;
        }
        v35 = *(_QWORD *)(v36 + 32);
        if (!v35)
          goto LABEL_63;
      }
    }
    goto LABEL_63;
  }
LABEL_64:
  v333 = 0;
  v334 = 0;
  v332 = v21;
  if (!v21)
    goto LABEL_65;
  if (*(_BYTE *)(v21 + 46) == 27)
  {
    ++*(_DWORD *)(v21 + 16);
    v328 = v21;
    v285 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v333, 1uLL, (unint64_t)&v328);
    v286 = HIDWORD(v334) + 1;
    *((_QWORD *)v333 + HIDWORD(v334)) = *(_QWORD *)v285;
    HIDWORD(v334) = v286;
    v287 = *(_QWORD *)(v21 + 200);
    if (v287)
      v287 = *(_QWORD *)(v287 + 8);
    v332 = v287;
    v288 = *(_DWORD *)(v21 + 16);
    if (!v288)
    {
      __break(0xC471u);
      JUMPOUT(0x19643B590);
    }
    *(_DWORD *)(v21 + 16) = v288 - 1;
  }
  if (v21 == v30)
  {
LABEL_65:
    v38 = 0;
  }
  else
  {
    v289 = (_DWORD *)v21;
    v38 = 1;
    do
    {
      if (v289 != (_DWORD *)v21)
      {
        v290 = *(_QWORD *)(a1 + 8);
        if (v290)
          v290 = *(_QWORD *)(v290 + 8);
        if (v289 != (_DWORD *)v290
          && (*(unsigned int (**)(_DWORD *))(*(_QWORD *)v289 + 512))(v289)
          && (v289[5] & 0xE000000) != 0x4000000)
        {
          (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)v289 + 496))(v289, 2);
        }
      }
      v291 = WebCore::RenderRangeIterator::next((WebCore::RenderRangeIterator *)&v332);
      if (!v291)
        break;
      v289 = (_DWORD *)v291;
    }
    while (v291 != v30);
  }
  if (a3 != 2)
    WebCore::RenderLayer::clearBlockSelectionGapsBounds(*(_QWORD **)(*(_QWORD *)(a1 + 32) + 144));
  v39 = 0;
  v330 = 0;
  v331 = 0;
  v323 = 0;
  v328 = v21;
  v329 = 0;
  if (v21)
  {
    v39 = v21;
    if (*(_BYTE *)(v21 + 46) == 27)
    {
      ++*(_DWORD *)(v21 + 16);
      v335 = (WTF **)v21;
      v292 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(&v329, 1uLL, (unint64_t)&v335);
      v293 = HIDWORD(v330) + 1;
      *(_QWORD *)&v329[8 * HIDWORD(v330)] = *(_QWORD *)v292;
      HIDWORD(v330) = v293;
      v39 = *(_QWORD *)(v21 + 200);
      if (v39)
        v39 = *(_QWORD *)(v39 + 8);
      v328 = v39;
      v294 = *(_DWORD *)(v21 + 16);
      if (!v294)
      {
        __break(0xC471u);
        JUMPOUT(0x19643B5B0);
      }
      *(_DWORD *)(v21 + 16) = v294 - 1;
    }
  }
  v332 = v39;
  v40 = v333;
  if (v333)
  {
    v333 = 0;
    LODWORD(v334) = 0;
    WTF::fastFree(v40, a2);
  }
  v333 = (WTF *)v329;
  v334 = v330;
  if (v38)
  {
    do
    {
      if ((((*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 512))(v21) & 1) != 0
         || *(_QWORD *)a1 && *(_QWORD *)(*(_QWORD *)a1 + 8) == v21
         || (v59 = *(_QWORD *)(a1 + 8)) != 0 && *(_QWORD *)(v59 + 8) == v21)
        && (*(_BYTE *)(v21 + 23) & 0xE) != 0
        && WebCore::RenderObject::containingBlock((WebCore::RenderObject *)v21))
      {
        v41 = (WebCore::RenderSelectionGeometry *)WTF::fastMalloc((WTF *)0x38);
        v335 = (WTF **)WebCore::RenderSelectionGeometry::RenderSelectionGeometry(v41, (WebCore::RenderObject *)v21);
        v42 = *(WTF **)(v21 + 8);
        if (!v42)
        {
          v42 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v42 = 1;
          *((_QWORD *)v42 + 1) = v21;
          v64 = *(WTF **)(v21 + 8);
          *(_QWORD *)(v21 + 8) = v42;
          if (v64)
          {
            if (*(_DWORD *)v64 == 1)
            {
              WTF::fastFree(v64, v63);
              v42 = *(WTF **)(v21 + 8);
            }
            else
            {
              --*(_DWORD *)v64;
            }
          }
        }
        ++*(_DWORD *)v42;
        v322 = v42;
        WTF::HashMap<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderSelectionGeometry>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderSelectionGeometry>>,WTF::HashTableTraits>::inlineSet<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderSelectionGeometry>>((WTF *)&v328, (uint64_t *)&v331, (uint64_t *)&v322, (uint64_t *)&v335);
        if (v322)
        {
          if (*(_DWORD *)v322 == 1)
            WTF::fastFree(v322, v43);
          else
            --*(_DWORD *)v322;
        }
        v44 = WebCore::RenderObject::containingBlock((WebCore::RenderObject *)v21);
        if (v44)
        {
          v46 = v44;
          do
          {
            if (*((_BYTE *)v46 + 46) == 49)
              break;
            v47 = (WTF *)*((_QWORD *)v46 + 1);
            if (!v47)
            {
              v47 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
              *(_DWORD *)v47 = 1;
              *((_QWORD *)v47 + 1) = v46;
              v58 = (WTF *)*((_QWORD *)v46 + 1);
              *((_QWORD *)v46 + 1) = v47;
              if (v58)
              {
                if (*(_DWORD *)v58 == 1)
                {
                  WTF::fastFree(v58, v57);
                  v47 = (WTF *)*((_QWORD *)v46 + 1);
                }
                else
                {
                  --*(_DWORD *)v58;
                }
              }
            }
            ++*(_DWORD *)v47;
            v322 = v47;
            WTF::HashMap<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockSelectionGeometry>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBlockSelectionGeometry>>,WTF::HashTableTraits>::add<decltype(nullptr)>((WTF *)&v328, (uint64_t *)&v323, &v322);
            v48 = v328;
            if (v322)
            {
              if (*(_DWORD *)v322 == 1)
                WTF::fastFree(v322, v45);
              else
                --*(_DWORD *)v322;
            }
            if (*(_QWORD *)(v48 + 8))
              break;
            v49 = WTF::fastMalloc((WTF *)0x48);
            *(_QWORD *)v49 = v46;
            WebCore::RenderObject::containerForRepaint(v46, (uint64_t)&v328);
            v51 = v329;
            if (v329)
            {
              v52 = *((_DWORD *)v329 + 4);
              if (!v52)
              {
                __break(0xC471u);
                JUMPOUT(0x19643AD58);
              }
              *((_DWORD *)v329 + 4) = v52 - 1;
            }
            *(_QWORD *)(v49 + 8) = v51;
            *(_BYTE *)(v49 + 16) = (*((_DWORD *)v46 + 5) >> 25) & 7;
            if ((*((_BYTE *)v46 + 20) & 0xF8) != 0)
              goto LABEL_90;
            v53 = WebCore::RenderObject::containingBlock(v46);
            if (!v53)
              goto LABEL_97;
            v54 = *((_DWORD *)v53 + 4);
            *((_DWORD *)v53 + 4) = v54 + 1;
            if (v54 == -1)
            {
              __break(0xC471u);
              JUMPOUT(0x19643AD78);
            }
            v55 = *((_DWORD *)v53 + 5);
            *((_DWORD *)v53 + 4) = v54;
            if ((v55 & 0xF8) != 0)
            {
LABEL_90:
              *(_OWORD *)(v49 + 36) = 0u;
              *(_OWORD *)(v49 + 52) = 0u;
              *(_OWORD *)(v49 + 20) = 0u;
            }
            else
            {
LABEL_97:
              WebCore::RenderBlock::selectionGapRectsForRepaint((uint64_t)v46, *(const WebCore::RenderLayerModelObject **)(v49 + 8), (_OWORD *)(v49 + 20));
            }
            v56 = *(WTF **)(v48 + 8);
            *(_QWORD *)(v48 + 8) = v49;
            if (v56)
              WTF::fastFree(v56, v50);
            v46 = WebCore::RenderObject::containingBlock(v46);
          }
          while (v46);
        }
        v60 = (WTF *)v335;
        if (v335)
        {
          v61 = v335[3];
          if (v61)
          {
            v335[3] = 0;
            *((_DWORD *)v60 + 8) = 0;
            WTF::fastFree(v61, v45);
          }
          WTF::fastFree(v60, v45);
        }
      }
      v62 = WebCore::RenderRangeIterator::next((WebCore::RenderRangeIterator *)&v332);
      if (!v62)
        break;
      v21 = v62;
    }
    while (v62 != v30);
  }
  if (a3 == 2)
  {
    v65 = (uint64_t)v323;
    goto LABEL_459;
  }
  if (!v326)
  {
    v66 = 0;
    v67 = 0;
LABEL_126:
    v68 = &v326[2 * v67];
    goto LABEL_127;
  }
  v67 = *((unsigned int *)v326 - 1);
  v68 = &v326[2 * v67];
  if (!*((_DWORD *)v326 - 3))
  {
    v66 = &v326[2 * v67];
    goto LABEL_126;
  }
  v66 = v326;
  if ((_DWORD)v67)
  {
    v297 = 16 * v67;
    v66 = v326;
    while ((unint64_t)(*v66 + 1) <= 1)
    {
      v66 += 2;
      v297 -= 16;
      if (!v297)
      {
        v66 = v68;
        break;
      }
    }
  }
LABEL_127:
  if (v326)
    v69 = &v326[2 * *((unsigned int *)v326 - 1)];
  else
    v69 = 0;
  while (v66 != v69)
  {
    v70 = v331;
    if (v331)
    {
      v71 = *(WTF **)(*v66 + 8);
      v72 = *((_DWORD *)v331 - 2);
      v73 = ((unint64_t)v71 + ~((_QWORD)v71 << 32)) ^ (((unint64_t)v71 + ~((_QWORD)v71 << 32)) >> 22);
      v74 = 9 * ((v73 + ~(v73 << 13)) ^ ((v73 + ~(v73 << 13)) >> 8));
      v75 = (v74 ^ (v74 >> 15)) + ~((v74 ^ (v74 >> 15)) << 27);
      v76 = v72 & ((v75 >> 31) ^ v75);
      for (i = 1; ; ++i)
      {
        v78 = v76;
        v79 = *((_QWORD *)v331 + 2 * v76);
        if (v79 != -1)
        {
          if (!v79)
            goto LABEL_136;
          if (*(WTF **)(v79 + 8) == v71)
            break;
        }
        v76 = (v78 + i) & v72;
      }
      v82 = *((_QWORD *)v331 + 2 * v78 + 1);
      v80 = v66[1];
      if (v82)
      {
        if (*(_QWORD *)(v80 + 40) != *(_QWORD *)(v82 + 40)
          || *(_QWORD *)(v80 + 48) != *(_QWORD *)(v82 + 48)
          || *(unsigned __int8 *)(v80 + 16) != *(unsigned __int8 *)(v82 + 16))
        {
          goto LABEL_157;
        }
        v83 = *(WTF **)a1;
        if (*(_QWORD *)a1)
          v83 = (WTF *)*((_QWORD *)v83 + 1);
        if (v83 == v71 && v324 != *(_DWORD *)(a1 + 16))
          goto LABEL_157;
        v84 = *(WTF **)(a1 + 8);
        if (v84)
          v84 = (WTF *)*((_QWORD *)v84 + 1);
        if (v84 == v71 && v325 != *(_DWORD *)(a1 + 20))
        {
LABEL_157:
          WebCore::RenderSelectionGeometryBase::repaintRectangle(*(WebCore::RenderSelectionGeometryBase **)v80, *(const WebCore::LayoutRect **)(v80 + 8), v80 + 40);
          WebCore::RenderSelectionGeometryBase::repaintRectangle(*(WebCore::RenderSelectionGeometryBase **)v82, *(const WebCore::LayoutRect **)(v82 + 8), v82 + 40);
          v85 = *(_QWORD *)(*v66 + 8);
          v86 = *((_DWORD *)v70 - 2);
          v87 = (~(v85 << 32) + v85) ^ ((unint64_t)(~(v85 << 32) + v85) >> 22);
          v88 = 9 * ((v87 + ~(v87 << 13)) ^ ((v87 + ~(v87 << 13)) >> 8));
          v89 = (v88 ^ (v88 >> 15)) + ~((v88 ^ (v88 >> 15)) << 27);
          v90 = v86 & ((v89 >> 31) ^ v89);
          for (j = 1; ; ++j)
          {
            v92 = v90;
            v93 = (WTF *)*((_QWORD *)v70 + 2 * v90);
            if (v93 != (WTF *)-1)
            {
              if (!v93)
                goto LABEL_138;
              if (*((_QWORD *)v93 + 1) == v85)
                break;
            }
            v90 = (v90 + j) & v86;
          }
          if (v90 != *((_DWORD *)v70 - 1))
          {
            v94 = (_QWORD *)((char *)v70 + 16 * v90);
            *v94 = 0;
            if (*(_DWORD *)v93 == 1)
              WTF::fastFree(v93, a2);
            else
              --*(_DWORD *)v93;
            *v94 = -1;
            v95 = (char *)v70 + 16 * v92;
            v96 = *((_QWORD *)v95 + 1);
            *((_QWORD *)v95 + 1) = 0;
            if (v96)
            {
              v97 = *(WTF **)(v96 + 24);
              if (v97)
              {
                *(_QWORD *)(v96 + 24) = 0;
                *(_DWORD *)(v96 + 32) = 0;
                WTF::fastFree(v97, a2);
              }
              WTF::fastFree((WTF *)v96, a2);
            }
            v98 = *((_DWORD *)v70 - 3) - 1;
            ++*((_DWORD *)v70 - 4);
            *((_DWORD *)v70 - 3) = v98;
            v99 = *((_DWORD *)v70 - 1);
            if (6 * v98 < v99 && v99 >= 9)
              WTF::HashTable<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderSelectionGeometry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderSelectionGeometry>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderSelectionGeometry>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderSelectionGeometry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>>::rehash((uint64_t *)&v331, v99 >> 1, 0);
          }
        }
        goto LABEL_138;
      }
    }
    else
    {
LABEL_136:
      v80 = v66[1];
    }
    WebCore::RenderSelectionGeometryBase::repaintRectangle(*(WebCore::RenderSelectionGeometryBase **)v80, *(const WebCore::LayoutRect **)(v80 + 8), v80 + 40);
LABEL_138:
    v81 = v66 + 2;
    v66 = v68;
    if (v81 != v68)
    {
      v66 = v81;
      while ((unint64_t)(*v66 + 1) <= 1)
      {
        v66 += 2;
        if (v66 == v68)
        {
          v66 = v68;
          break;
        }
      }
    }
  }
  if (!v331)
  {
    v101 = 0;
    v102 = 0;
LABEL_178:
    v103 = (WTF *)((char *)v331 + 16 * v102);
    goto LABEL_179;
  }
  v102 = *((unsigned int *)v331 - 1);
  v103 = (WTF *)((char *)v331 + 16 * v102);
  if (!*((_DWORD *)v331 - 3))
  {
    v101 = (WTF *)((char *)v331 + 16 * v102);
    goto LABEL_178;
  }
  v101 = v331;
  if ((_DWORD)v102)
  {
    v298 = 16 * v102;
    v101 = v331;
    while ((unint64_t)(*(_QWORD *)v101 + 1) <= 1)
    {
      v101 = (WTF *)((char *)v101 + 16);
      v298 -= 16;
      if (!v298)
      {
        v101 = v103;
        break;
      }
    }
  }
LABEL_179:
  if (v331)
    v104 = (WTF *)((char *)v331 + 16 * *((unsigned int *)v331 - 1));
  else
    v104 = 0;
  while (v101 != v104)
  {
    WebCore::RenderSelectionGeometryBase::repaintRectangle(**((WebCore::RenderSelectionGeometryBase ***)v101 + 1), *(const WebCore::LayoutRect **)(*((_QWORD *)v101 + 1) + 8), *((_QWORD *)v101 + 1) + 40);
    v105 = (WTF *)((char *)v101 + 16);
    v101 = v103;
    if (v105 != v103)
    {
      v101 = v105;
      while ((unint64_t)(*(_QWORD *)v101 + 1) <= 1)
      {
        v101 = (WTF *)((char *)v101 + 16);
        if (v101 == v103)
        {
          v101 = v103;
          break;
        }
      }
    }
  }
  if (!v327)
  {
    v106 = 0;
    v107 = 0;
LABEL_190:
    v108 = &v327[2 * v107];
    goto LABEL_191;
  }
  v107 = *((unsigned int *)v327 - 1);
  v108 = &v327[2 * v107];
  if (!*((_DWORD *)v327 - 3))
  {
    v106 = &v327[2 * v107];
    goto LABEL_190;
  }
  v106 = v327;
  if ((_DWORD)v107)
  {
    v295 = 16 * v107;
    v106 = v327;
    while ((unint64_t)(*v106 + 1) <= 1)
    {
      v106 += 2;
      v295 -= 16;
      if (!v295)
      {
        v106 = v108;
        break;
      }
    }
  }
LABEL_191:
  if (v327)
    v109 = &v327[2 * *((unsigned int *)v327 - 1)];
  else
    v109 = 0;
  if (v109 != v106)
  {
    while (1)
    {
      v110 = (uint64_t)v323;
      if (!v323)
        break;
      v111 = *(_QWORD *)(*v106 + 8);
      v112 = *((_DWORD *)v323 - 2);
      v113 = (~(v111 << 32) + v111) ^ ((unint64_t)(~(v111 << 32) + v111) >> 22);
      v114 = 9 * ((v113 + ~(v113 << 13)) ^ ((v113 + ~(v113 << 13)) >> 8));
      v115 = (v114 ^ (v114 >> 15)) + ~((v114 ^ (v114 >> 15)) << 27);
      v116 = v112 & ((v115 >> 31) ^ v115);
      for (k = 1; ; ++k)
      {
        v118 = v116;
        v119 = v323[2 * v116];
        if (v119 != -1)
        {
          if (!v119)
            goto LABEL_200;
          if (*(_QWORD *)(v119 + 8) == v111)
            break;
        }
        v116 = (v118 + k) & v112;
      }
      v120 = v323[2 * v118 + 1];
      v121 = v106[1];
      if (!v120)
        goto LABEL_201;
      if (*(_DWORD *)(v121 + 20) != *(_DWORD *)(v120 + 20) || *(_DWORD *)(v121 + 24) != *(_DWORD *)(v120 + 24))
      {
LABEL_350:
        v122 = 0;
        goto LABEL_202;
      }
      v122 = 0;
      if (*(_DWORD *)(v121 + 28) != *(_DWORD *)(v120 + 28))
        goto LABEL_202;
      if (*(_DWORD *)(v121 + 32) != *(_DWORD *)(v120 + 32))
        goto LABEL_202;
      v122 = 0;
      if (*(_DWORD *)(v121 + 36) != *(_DWORD *)(v120 + 36))
        goto LABEL_202;
      if (*(_DWORD *)(v121 + 40) != *(_DWORD *)(v120 + 40))
        goto LABEL_202;
      v122 = 0;
      if (*(_DWORD *)(v121 + 44) != *(_DWORD *)(v120 + 44))
        goto LABEL_202;
      if (*(_DWORD *)(v121 + 48) != *(_DWORD *)(v120 + 48))
        goto LABEL_202;
      v122 = 0;
      if (*(_DWORD *)(v121 + 52) != *(_DWORD *)(v120 + 52))
        goto LABEL_202;
      if (*(_DWORD *)(v121 + 56) != *(_DWORD *)(v120 + 56))
        goto LABEL_202;
      v122 = 0;
      if (*(_DWORD *)(v121 + 60) != *(_DWORD *)(v120 + 60) || *(_DWORD *)(v121 + 64) != *(_DWORD *)(v120 + 64))
        goto LABEL_202;
      if (*(unsigned __int8 *)(v121 + 16) != *(unsigned __int8 *)(v120 + 16))
        goto LABEL_350;
LABEL_362:
      v210 = v106 + 2;
      v106 = v108;
      if (v210 != v108)
      {
        v106 = v210;
        while ((unint64_t)(*v106 + 1) <= 1)
        {
          v106 += 2;
          if (v106 == v108)
          {
            v106 = v108;
            break;
          }
        }
      }
      if (v106 == v109)
        goto LABEL_374;
    }
LABEL_200:
    v120 = 0;
    v121 = v106[1];
LABEL_201:
    v122 = 1;
LABEL_202:
    v124 = *(_DWORD *)(v121 + 20);
    v123 = *(unsigned int *)(v121 + 24);
    v125 = *(_QWORD *)(v121 + 28);
    v127 = *(_DWORD *)(v121 + 44);
    v126 = *(_DWORD *)(v121 + 48);
    if (v127 >= 1 && v126 >= 1)
    {
      v129 = HIDWORD(v125);
      if ((int)v125 < 1 || SHIDWORD(v125) <= 0)
      {
        v124 = *(_DWORD *)(v121 + 36);
        v123 = *(unsigned int *)(v121 + 40);
        v125 = *(_QWORD *)(v121 + 44);
      }
      else
      {
        v131 = *(_DWORD *)(v121 + 36);
        v132 = *(_DWORD *)(v121 + 40);
        if ((int)v131 >= (int)v124)
          v133 = *(_DWORD *)(v121 + 20);
        else
          v133 = *(_DWORD *)(v121 + 36);
        if ((int)v132 >= (int)v123)
          v134 = v123;
        else
          v134 = v132;
        v135 = __OFADD__(v124, (_DWORD)v125);
        v136 = v124 + v125;
        v137 = (v124 >> 31) + 0x7FFFFFFF;
        if (!v135)
          v137 = v136;
        v138 = v131 + v127;
        if (__OFADD__(v131, v127))
          v138 = (v131 >> 31) + 0x7FFFFFFF;
        if (v137 <= v138)
          v137 = v138;
        v135 = __OFADD__((_DWORD)v123, (_DWORD)v129);
        v139 = v123 + v129;
        v140 = (v123 >> 31) + 0x7FFFFFFF;
        if (!v135)
          v140 = v139;
        v141 = v132 + v126;
        if (__OFADD__(v132, v126))
          v141 = (v132 >> 31) + 0x7FFFFFFF;
        if ((int)v140 <= v141)
          v140 = v141;
        v135 = __OFSUB__(v137, v133);
        v142 = v137 - v133;
        LODWORD(v143) = (v137 >> 31) + 0x7FFFFFFF;
        if (v135)
          v143 = v143;
        else
          v143 = v142;
        v135 = __OFSUB__(v140, (_DWORD)v134);
        v144 = v140 - v134;
        LODWORD(v145) = (v140 >> 31) + 0x7FFFFFFF;
        if (v135)
          v145 = v145;
        else
          v145 = v144;
        v125 = v143 | (v145 << 32);
        v123 = v134;
        v124 = v133;
      }
    }
    v147 = *(_DWORD *)(v121 + 60);
    v146 = *(_DWORD *)(v121 + 64);
    if (v147 >= 1 && v146 >= 1)
    {
      v149 = HIDWORD(v125);
      if ((int)v125 < 1 || SHIDWORD(v125) <= 0)
      {
        v124 = *(_DWORD *)(v121 + 52);
        v123 = *(unsigned int *)(v121 + 56);
        v125 = *(_QWORD *)(v121 + 60);
      }
      else
      {
        v151 = *(_DWORD *)(v121 + 52);
        v152 = *(_DWORD *)(v121 + 56);
        if ((int)v151 >= (int)v124)
          v153 = v124;
        else
          v153 = *(_DWORD *)(v121 + 52);
        if ((int)v152 >= (int)v123)
          v154 = v123;
        else
          v154 = v152;
        v135 = __OFADD__(v124, (_DWORD)v125);
        v155 = v124 + v125;
        v156 = (v124 >> 31) + 0x7FFFFFFF;
        if (!v135)
          v156 = v155;
        v157 = v151 + v147;
        if (__OFADD__(v151, v147))
          v157 = (v151 >> 31) + 0x7FFFFFFF;
        if (v156 <= v157)
          v156 = v157;
        v135 = __OFADD__((_DWORD)v123, (_DWORD)v149);
        v158 = v123 + v149;
        v159 = (v123 >> 31) + 0x7FFFFFFF;
        if (!v135)
          v159 = v158;
        v160 = v152 + v146;
        if (__OFADD__(v152, v146))
          v160 = (v152 >> 31) + 0x7FFFFFFF;
        if ((int)v159 <= v160)
          v159 = v160;
        v135 = __OFSUB__(v156, v153);
        v161 = v156 - v153;
        LODWORD(v162) = (v156 >> 31) + 0x7FFFFFFF;
        if (v135)
          v162 = v162;
        else
          v162 = v161;
        v135 = __OFSUB__(v159, (_DWORD)v154);
        v163 = v159 - v154;
        LODWORD(v164) = (v159 >> 31) + 0x7FFFFFFF;
        if (v135)
          v164 = v164;
        else
          v164 = v163;
        v125 = v162 | (v164 << 32);
        v123 = v154;
        v124 = v153;
      }
    }
    v328 = v124 | (unint64_t)(v123 << 32);
    v329 = (char *)v125;
    WebCore::RenderSelectionGeometryBase::repaintRectangle(*(WebCore::RenderSelectionGeometryBase **)v121, *(const WebCore::LayoutRect **)(v121 + 8), (uint64_t)&v328);
    if ((v122 & 1) == 0)
    {
      v166 = *(_DWORD *)(v120 + 20);
      v165 = *(unsigned int *)(v120 + 24);
      v167 = *(_QWORD *)(v120 + 28);
      v168 = *(_DWORD *)(v120 + 44);
      if (v168 >= 1)
      {
        v169 = *(_DWORD *)(v120 + 48);
        if (v169 >= 1)
        {
          if ((int)v167 < 1 || (v170 = HIDWORD(v167), v167 <= 0))
          {
            v166 = *(_DWORD *)(v120 + 36);
            v165 = *(unsigned int *)(v120 + 40);
            v167 = *(_QWORD *)(v120 + 44);
          }
          else
          {
            v172 = *(_DWORD *)(v120 + 36);
            v171 = *(_DWORD *)(v120 + 40);
            if ((int)v172 >= (int)v166)
              v173 = *(_DWORD *)(v120 + 20);
            else
              v173 = *(_DWORD *)(v120 + 36);
            if ((int)v171 >= (int)v165)
              v174 = v165;
            else
              v174 = v171;
            v135 = __OFADD__(v166, (_DWORD)v167);
            v175 = v166 + v167;
            if (v135)
              v175 = (v166 >> 31) + 0x7FFFFFFF;
            v176 = v172 + v168;
            if (__OFADD__(v172, v168))
              v176 = (v172 >> 31) + 0x7FFFFFFF;
            if (v175 > v176)
              v176 = v175;
            v177 = v165 + v170;
            if (__OFADD__((_DWORD)v165, (_DWORD)v170))
              v177 = (v165 >> 31) + 0x7FFFFFFF;
            v178 = v171 + v169;
            if (__OFADD__(v171, v169))
              v178 = (v171 >> 31) + 0x7FFFFFFF;
            if ((int)v177 <= v178)
              v177 = v178;
            v179 = v176 - v173;
            if (__OFSUB__(v176, v173))
              v179 = (v176 >> 31) + 0x7FFFFFFF;
            v180 = v177 - v174;
            if (__OFSUB__(v177, (_DWORD)v174))
              v180 = (v177 >> 31) + 0x7FFFFFFF;
            v167 = v179 | (unint64_t)(v180 << 32);
            v165 = v174;
            v166 = v173;
          }
        }
      }
      v181 = *(_DWORD *)(v120 + 60);
      if (v181 >= 1)
      {
        v182 = *(_DWORD *)(v120 + 64);
        if (v182 >= 1)
        {
          if ((int)v167 < 1 || (v183 = HIDWORD(v167), v167 <= 0))
          {
            v166 = *(_DWORD *)(v120 + 52);
            v165 = *(unsigned int *)(v120 + 56);
            v167 = *(_QWORD *)(v120 + 60);
          }
          else
          {
            v185 = *(_DWORD *)(v120 + 52);
            v184 = *(_DWORD *)(v120 + 56);
            if ((int)v185 >= (int)v166)
              v186 = v166;
            else
              v186 = *(_DWORD *)(v120 + 52);
            if ((int)v184 >= (int)v165)
              v187 = v165;
            else
              v187 = v184;
            v135 = __OFADD__(v166, (_DWORD)v167);
            v188 = v166 + v167;
            if (v135)
              v188 = (v166 >> 31) + 0x7FFFFFFF;
            v189 = v185 + v181;
            if (__OFADD__(v185, v181))
              v189 = (v185 >> 31) + 0x7FFFFFFF;
            if (v188 > v189)
              v189 = v188;
            v190 = v165 + v183;
            if (__OFADD__((_DWORD)v165, (_DWORD)v183))
              v190 = (v165 >> 31) + 0x7FFFFFFF;
            v191 = v184 + v182;
            if (__OFADD__(v184, v182))
              v191 = (v184 >> 31) + 0x7FFFFFFF;
            if ((int)v190 <= v191)
              v190 = v191;
            v192 = v189 - v186;
            if (__OFSUB__(v189, v186))
              v192 = (v189 >> 31) + 0x7FFFFFFF;
            v193 = v190 - v187;
            if (__OFSUB__(v190, (_DWORD)v187))
              v193 = (v190 >> 31) + 0x7FFFFFFF;
            v167 = v192 | (unint64_t)(v193 << 32);
            v165 = v187;
            v166 = v186;
          }
        }
      }
      v328 = v166 | (unint64_t)(v165 << 32);
      v329 = (char *)v167;
      WebCore::RenderSelectionGeometryBase::repaintRectangle(*(WebCore::RenderSelectionGeometryBase **)v120, *(const WebCore::LayoutRect **)(v120 + 8), (uint64_t)&v328);
      if (v110)
      {
        v194 = *(_QWORD *)(*v106 + 8);
        v195 = *(_DWORD *)(v110 - 8);
        v196 = (~(v194 << 32) + v194) ^ ((unint64_t)(~(v194 << 32) + v194) >> 22);
        v197 = 9 * ((v196 + ~(v196 << 13)) ^ ((v196 + ~(v196 << 13)) >> 8));
        v198 = (v197 ^ (v197 >> 15)) + ~((v197 ^ (v197 >> 15)) << 27);
        v199 = v195 & ((v198 >> 31) ^ v198);
        for (m = 1; ; ++m)
        {
          v201 = v199;
          v202 = *(WTF **)(v110 + 16 * v199);
          if (v202 != (WTF *)-1)
          {
            if (!v202)
              goto LABEL_362;
            if (*((_QWORD *)v202 + 1) == v194)
              break;
          }
          v199 = (v199 + m) & v195;
        }
        if (v199 != *(_DWORD *)(v110 - 4))
        {
          v204 = (_QWORD *)(v110 + 16 * v199);
          *v204 = 0;
          if (*(_DWORD *)v202 == 1)
            WTF::fastFree(v202, a2);
          else
            --*(_DWORD *)v202;
          *v204 = -1;
          v205 = v110 + 16 * v201;
          v206 = *(WTF **)(v205 + 8);
          *(_QWORD *)(v205 + 8) = 0;
          if (v206)
            WTF::fastFree(v206, a2);
          v207 = *(_DWORD *)(v110 - 12) - 1;
          ++*(_DWORD *)(v110 - 16);
          *(_DWORD *)(v110 - 12) = v207;
          v208 = *(_DWORD *)(v110 - 4);
          if (6 * v207 < v208 && v208 >= 9)
            WTF::HashTable<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockSelectionGeometry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockSelectionGeometry>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockSelectionGeometry>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBlockSelectionGeometry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>>::rehash((uint64_t *)&v323, v208 >> 1, 0);
        }
      }
    }
    goto LABEL_362;
  }
LABEL_374:
  v65 = (uint64_t)v323;
  if (v323)
  {
    v212 = *((unsigned int *)v323 - 1);
    v213 = &v323[2 * v212];
    if (*((_DWORD *)v323 - 3))
    {
      v211 = v323;
      if ((_DWORD)v212)
      {
        v296 = 16 * v212;
        v211 = v323;
        while ((unint64_t)(*v211 + 1) <= 1)
        {
          v211 += 2;
          v296 -= 16;
          if (!v296)
          {
            v211 = v213;
            goto LABEL_377;
          }
        }
      }
      goto LABEL_377;
    }
    v211 = &v323[2 * v212];
  }
  else
  {
    v211 = 0;
    v212 = 0;
  }
  v213 = &v323[2 * v212];
LABEL_377:
  if (v323)
    v214 = &v323[2 * *((unsigned int *)v323 - 1)];
  else
    v214 = 0;
  while (v211 != v214)
  {
    v215 = v211[1];
    v217 = *(_DWORD *)(v215 + 20);
    v216 = *(unsigned int *)(v215 + 24);
    v218 = *(_QWORD *)(v215 + 28);
    v220 = *(_DWORD *)(v215 + 44);
    v219 = *(_DWORD *)(v215 + 48);
    if (v220 >= 1 && v219 >= 1)
    {
      v222 = HIDWORD(v218);
      if ((int)v218 < 1 || SHIDWORD(v218) <= 0)
      {
        v217 = *(_DWORD *)(v215 + 36);
        v216 = *(unsigned int *)(v215 + 40);
        v218 = *(_QWORD *)(v215 + 44);
      }
      else
      {
        v224 = *(_DWORD *)(v215 + 36);
        v225 = *(_DWORD *)(v215 + 40);
        if ((int)v224 >= (int)v217)
          v226 = *(_DWORD *)(v215 + 20);
        else
          v226 = *(_DWORD *)(v215 + 36);
        if ((int)v225 >= (int)v216)
          v227 = v216;
        else
          v227 = v225;
        v135 = __OFADD__(v217, (_DWORD)v218);
        v228 = v217 + v218;
        v229 = (v217 >> 31) + 0x7FFFFFFF;
        if (!v135)
          v229 = v228;
        v230 = v224 + v220;
        if (__OFADD__(v224, v220))
          v230 = (v224 >> 31) + 0x7FFFFFFF;
        if (v229 <= v230)
          v229 = v230;
        v135 = __OFADD__((_DWORD)v216, (_DWORD)v222);
        v231 = v216 + v222;
        v232 = (v216 >> 31) + 0x7FFFFFFF;
        if (!v135)
          v232 = v231;
        v233 = v225 + v219;
        if (__OFADD__(v225, v219))
          v233 = (v225 >> 31) + 0x7FFFFFFF;
        if ((int)v232 <= v233)
          v232 = v233;
        v135 = __OFSUB__(v229, v226);
        v234 = v229 - v226;
        LODWORD(v235) = (v229 >> 31) + 0x7FFFFFFF;
        if (v135)
          v235 = v235;
        else
          v235 = v234;
        v135 = __OFSUB__(v232, (_DWORD)v227);
        v236 = v232 - v227;
        LODWORD(v237) = (v232 >> 31) + 0x7FFFFFFF;
        if (v135)
          v237 = v237;
        else
          v237 = v236;
        v218 = v235 | (v237 << 32);
        v217 = v226;
        v216 = v227;
      }
    }
    v239 = *(_DWORD *)(v215 + 60);
    v238 = *(_DWORD *)(v215 + 64);
    if (v239 >= 1 && v238 >= 1)
    {
      v241 = HIDWORD(v218);
      if ((int)v218 < 1 || SHIDWORD(v218) <= 0)
      {
        v217 = *(_DWORD *)(v215 + 52);
        v216 = *(unsigned int *)(v215 + 56);
        v218 = *(_QWORD *)(v215 + 60);
      }
      else
      {
        v243 = *(_DWORD *)(v215 + 52);
        v244 = *(_DWORD *)(v215 + 56);
        if ((int)v243 >= (int)v217)
          v245 = v217;
        else
          v245 = *(_DWORD *)(v215 + 52);
        if ((int)v244 >= (int)v216)
          v246 = v216;
        else
          v246 = v244;
        v135 = __OFADD__(v217, (_DWORD)v218);
        v247 = v217 + v218;
        v248 = (v217 >> 31) + 0x7FFFFFFF;
        if (!v135)
          v248 = v247;
        v249 = v243 + v239;
        if (__OFADD__(v243, v239))
          v249 = (v243 >> 31) + 0x7FFFFFFF;
        if (v248 <= v249)
          v248 = v249;
        v135 = __OFADD__((_DWORD)v216, (_DWORD)v241);
        v250 = v216 + v241;
        v251 = (v216 >> 31) + 0x7FFFFFFF;
        if (!v135)
          v251 = v250;
        v252 = v244 + v238;
        if (__OFADD__(v244, v238))
          v252 = (v244 >> 31) + 0x7FFFFFFF;
        if ((int)v251 <= v252)
          v251 = v252;
        v135 = __OFSUB__(v248, v245);
        v253 = v248 - v245;
        LODWORD(v254) = (v248 >> 31) + 0x7FFFFFFF;
        if (v135)
          v254 = v254;
        else
          v254 = v253;
        v135 = __OFSUB__(v251, (_DWORD)v246);
        v255 = v251 - v246;
        LODWORD(v256) = (v251 >> 31) + 0x7FFFFFFF;
        if (v135)
          v256 = v256;
        else
          v256 = v255;
        v218 = v254 | (v256 << 32);
        v217 = v245;
        v216 = v246;
      }
    }
    v328 = v217 | (unint64_t)(v216 << 32);
    v329 = (char *)v218;
    WebCore::RenderSelectionGeometryBase::repaintRectangle(*(WebCore::RenderSelectionGeometryBase **)v215, *(const WebCore::LayoutRect **)(v215 + 8), (uint64_t)&v328);
    v257 = v211 + 2;
    v211 = v213;
    if (v257 != v213)
    {
      v211 = v257;
      while ((unint64_t)(*v211 + 1) <= 1)
      {
        v211 += 2;
        if (v211 == v213)
        {
          v211 = v213;
          break;
        }
      }
    }
  }
LABEL_459:
  if (v65)
  {
    v271 = *(unsigned int *)(v65 - 4);
    if ((_DWORD)v271)
    {
      v272 = (WTF **)v65;
      do
      {
        v273 = *v272;
        if (*v272 != (WTF *)-1)
        {
          v274 = v272[1];
          v272[1] = 0;
          if (v274)
          {
            WTF::fastFree(v274, a2);
            v273 = *v272;
          }
          *v272 = 0;
          if (v273)
          {
            if (*(_DWORD *)v273 == 1)
              WTF::fastFree(v273, a2);
            else
              --*(_DWORD *)v273;
          }
        }
        v272 += 2;
        --v271;
      }
      while (v271);
    }
    WTF::fastFree((WTF *)(v65 - 16), a2);
  }
  WTF::HashTable<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderSelectionGeometry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderSelectionGeometry>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderSelectionGeometry>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderSelectionGeometry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>>::~HashTable((uint64_t *)&v331, a2);
  v259 = v333;
  if (v333)
  {
    v333 = 0;
    LODWORD(v334) = 0;
    WTF::fastFree(v259, v258);
  }
  v260 = (uint64_t)v327;
  if (v327)
  {
    v275 = *((unsigned int *)v327 - 1);
    if ((_DWORD)v275)
    {
      v276 = (uint64_t)v327;
      do
      {
        v277 = *(WTF **)v276;
        if (*(_QWORD *)v276 != -1)
        {
          v278 = *(WTF **)(v276 + 8);
          *(_QWORD *)(v276 + 8) = 0;
          if (v278)
          {
            WTF::fastFree(v278, v258);
            v277 = *(WTF **)v276;
          }
          *(_QWORD *)v276 = 0;
          if (v277)
          {
            if (*(_DWORD *)v277 == 1)
              WTF::fastFree(v277, v258);
            else
              --*(_DWORD *)v277;
          }
        }
        v276 += 16;
        --v275;
      }
      while (v275);
    }
    WTF::fastFree((WTF *)(v260 - 16), v258);
  }
  return WTF::HashTable<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderSelectionGeometry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderSelectionGeometry>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderSelectionGeometry>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderSelectionGeometry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>>::~HashTable((uint64_t *)&v326, v258);
}

uint64_t WebCore::RenderSelection::clear(WebCore::RenderSelection *this)
{
  _QWORD v3[3];

  if (!*((_BYTE *)this + 40))
    WebCore::RenderLayer::repaintBlockSelectionGaps(*(int **)(*((_QWORD *)this + 4) + 144));
  memset(v3, 0, sizeof(v3));
  return WebCore::RenderSelection::set((uint64_t)this, v3, 1);
}

WTF *WTF::HashMap<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockSelectionGeometry>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBlockSelectionGeometry>>,WTF::HashTableTraits>::add<decltype(nullptr)>(WTF *result, uint64_t *a2, WTF **a3)
{
  WTF *v5;
  uint64_t v6;
  char v7;
  int v8;
  WTF **v9;
  WTF *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  int i;
  unsigned int v17;
  WTF **v18;
  WTF *v19;
  WTF *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  char v29;
  uint64_t v30;

  v5 = result;
  v6 = *a2;
  if (*a2
    || (result = (WTF *)WTF::HashTable<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockSelectionGeometry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockSelectionGeometry>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockSelectionGeometry>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBlockSelectionGeometry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>>::rehash(a2, 8u, 0), (v6 = *a2) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = 0;
  v10 = *a3;
  v11 = *((_QWORD *)*a3 + 1);
  v12 = (~(v11 << 32) + v11) ^ ((unint64_t)(~(v11 << 32) + v11) >> 22);
  v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = (v14 >> 31) ^ v14;
  for (i = 1; ; ++i)
  {
    v17 = v15 & v8;
    v18 = (WTF **)(v6 + 16 * v17);
    v19 = *v18;
    if (*v18 != (WTF *)-1)
      break;
    v9 = (WTF **)(v6 + 16 * v17);
LABEL_10:
    v15 = i + v17;
  }
  if (!v19)
  {
    if (v9)
    {
      *v9 = 0;
      v9[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v10 = *a3;
      v18 = v9;
    }
    *a3 = 0;
    v20 = *v18;
    *v18 = v10;
    if (v20)
    {
      if (*(_DWORD *)v20 == 1)
        WTF::fastFree(v20, a2);
      else
        --*(_DWORD *)v20;
    }
    result = v18[1];
    v18[1] = 0;
    if (result)
      result = (WTF *)WTF::fastFree(result, a2);
    v21 = *a2;
    if (*a2)
      v22 = *(_DWORD *)(v21 - 12) + 1;
    else
      v22 = 1;
    *(_DWORD *)(v21 - 12) = v22;
    v23 = *a2;
    if (*a2)
      v24 = *(_DWORD *)(v23 - 12);
    else
      v24 = 0;
    v25 = (*(_DWORD *)(v23 - 16) + v24);
    v26 = *(unsigned int *)(v23 - 4);
    if (v26 > 0x400)
    {
      if (v26 <= 2 * v25)
        goto LABEL_23;
    }
    else if (3 * v26 <= 4 * v25)
    {
      if (!(_DWORD)v26)
      {
        v27 = 8;
LABEL_31:
        result = (WTF *)WTF::HashTable<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockSelectionGeometry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockSelectionGeometry>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockSelectionGeometry>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBlockSelectionGeometry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>>::rehash(a2, v27, v18);
        v18 = (WTF **)result;
        v23 = *a2;
        if (*a2)
          v26 = *(unsigned int *)(v23 - 4);
        else
          v26 = 0;
        goto LABEL_33;
      }
LABEL_23:
      v27 = (_DWORD)v26 << (6 * *(_DWORD *)(v23 - 12) >= (2 * v26));
      goto LABEL_31;
    }
LABEL_33:
    v30 = v23 + 16 * v26;
    v29 = 1;
    goto LABEL_34;
  }
  if (*((_QWORD *)v19 + 1) != v11)
    goto LABEL_10;
  if ((v7 & 1) != 0)
    v28 = 0;
  else
    v28 = *(unsigned int *)(v6 - 4);
  v29 = 0;
  v30 = v6 + 16 * v28;
LABEL_34:
  *(_QWORD *)v5 = v18;
  *((_QWORD *)v5 + 1) = v30;
  *((_BYTE *)v5 + 16) = v29;
  return result;
}

WTF *WebCore::RenderSelectionGeometryBase::repaintRectangle(WebCore::RenderSelectionGeometryBase *this, const WebCore::LayoutRect *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  signed int v7;
  unsigned int v8;
  int v9;
  int v10;
  signed int v11;
  unsigned int v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  void *v19;
  WTF *result;
  void *v21;
  WTF *v22;
  WebCore::RenderSelectionGeometryBase *v24;
  uint64_t v25;
  _DWORD v26[4];
  WTF *v27;

  if (!a2)
  {
    v3 = 0;
    goto LABEL_3;
  }
  v24 = this;
  v25 = a3;
  v3 = *((_QWORD *)a2 + 1);
  if (!v3)
  {
    v3 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v3 = 1;
    *(_QWORD *)(v3 + 8) = a2;
    v22 = (WTF *)*((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v3;
    if (v22)
    {
      if (*(_DWORD *)v22 == 1)
      {
        WTF::fastFree(v22, v21);
        v3 = *((_QWORD *)a2 + 1);
        if (!v3)
          goto LABEL_41;
      }
      else
      {
        --*(_DWORD *)v22;
      }
    }
  }
  ++*(_DWORD *)v3;
LABEL_41:
  this = v24;
  a3 = v25;
LABEL_3:
  v27 = (WTF *)v3;
  v4 = HIDWORD(*(_QWORD *)a3);
  v5 = *(_DWORD *)(a3 + 8);
  v6 = *(_DWORD *)(a3 + 12);
  v7 = *(_QWORD *)a3 + v5;
  if (__OFADD__(*(_QWORD *)a3, v5))
    v7 = (*(_QWORD *)a3 >> 31) + 0x7FFFFFFF;
  v8 = -(-v7 >> 6);
  if (v7 >= 0)
    v8 = (v7 + 63) >> 6;
  if (v7 <= 2147483583)
    v9 = v8;
  else
    v9 = 0x1FFFFFF;
  if (v5)
    v10 = v9;
  else
    v10 = (int)*(_QWORD *)a3 >> 6;
  v11 = v4 + v6;
  if (__OFADD__((_DWORD)v4, v6))
    v11 = (v4 >> 31) + 0x7FFFFFFF;
  v12 = -(-v11 >> 6);
  if (v11 >= 0)
    v12 = (v11 + 63) >> 6;
  if (v11 <= 2147483583)
    v13 = v12;
  else
    v13 = 0x1FFFFFF;
  if (!v6)
    v13 = *(uint64_t *)a3 >> 38;
  v14 = v10 - ((int)*(_QWORD *)a3 >> 6);
  v15 = v13 - (*(uint64_t *)a3 >> 38);
  v26[0] = *(_QWORD *)a3 & 0xFFFFFFC0;
  v26[1] = v4 & 0xFFFFFFC0;
  v16 = v14 << 6;
  if (v14 < -33554432)
    v16 = 0x80000000;
  if (v14 > 0x1FFFFFF)
    v16 = 0x7FFFFFFF;
  if (v15 >= -33554432)
    v17 = v15 << 6;
  else
    v17 = 0x80000000;
  if (v15 <= 0x1FFFFFF)
    v18 = v17;
  else
    v18 = 0x7FFFFFFF;
  v26[2] = v16;
  v26[3] = v18;
  WebCore::RenderObject::repaintUsingContainer((uint64_t)this, (uint64_t *)&v27, (WebCore::LayoutRect *)v26, 1);
  result = v27;
  v27 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF *)WTF::fastFree(result, v19);
    else
      --*(_DWORD *)result;
  }
  return result;
}

WebCore::RenderSelectionGeometry *WebCore::RenderSelectionGeometry::RenderSelectionGeometry(WebCore::RenderSelectionGeometry *this, WebCore::RenderObject *a2)
{
  uint64_t v4;
  int v5;
  char v6;
  WebCore::RenderObject *v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)this = a2;
  WebCore::RenderObject::containerForRepaint(a2, (uint64_t)&v14);
  v4 = v15;
  if (v15)
  {
    v5 = *(_DWORD *)(v15 + 16);
    if (!v5)
    {
      __break(0xC471u);
      JUMPOUT(0x19643BB28);
    }
    *(_DWORD *)(v15 + 16) = v5 - 1;
  }
  *((_QWORD *)this + 1) = v4;
  v6 = (*((_DWORD *)a2 + 5) >> 25) & 7;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_BYTE *)this + 16) = v6;
  *(_OWORD *)((char *)this + 40) = 0u;
  if ((*((_BYTE *)a2 + 20) & 0xF8) == 0)
  {
    v7 = WebCore::RenderObject::containingBlock(a2);
    if (!v7)
      goto LABEL_8;
    v8 = *((_DWORD *)v7 + 4);
    *((_DWORD *)v7 + 4) = v8 + 1;
    if (v8 == -1)
    {
      __break(0xC471u);
      JUMPOUT(0x19643BB48);
    }
    v9 = *((_DWORD *)v7 + 5);
    *((_DWORD *)v7 + 4) = v8;
    if ((v9 & 0xF8) == 0)
    {
LABEL_8:
      if ((*((_BYTE *)a2 + 45) & 2) != 0)
      {
        ++*((_DWORD *)a2 + 4);
        *((_QWORD *)this + 5) = WebCore::RenderText::collectSelectionGeometriesForLineBoxes(a2, *((_QWORD *)this + 1), 1, (uint64_t)this + 24);
        *((_QWORD *)this + 6) = v10;
        v11 = *((_DWORD *)a2 + 4);
        if (!v11)
        {
          __break(0xC471u);
          JUMPOUT(0x19643BB88);
        }
        *((_DWORD *)a2 + 4) = v11 - 1;
      }
      else
      {
        *((_QWORD *)this + 5) = (*(uint64_t (**)(WebCore::RenderObject *, _QWORD, uint64_t))(*(_QWORD *)a2 + 504))(a2, *((_QWORD *)this + 1), 1);
        *((_QWORD *)this + 6) = v13;
      }
    }
  }
  return this;
}

uint64_t WebCore::RenderSlider::operator new(uint64_t this)
{
  if (this == 408)
    return bmalloc::api::isoAllocate();
  __break(0xC471u);
  return this;
}

double WebCore::RenderSlider::RenderSlider(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  double result;

  v3 = WebCore::RenderLayerModelObject::RenderLayerModelObject(a1, 33, a2, a3, 204, 0);
  *(_OWORD *)(v3 + 184) = 0u;
  *(_OWORD *)(v3 + 168) = 0u;
  *(_OWORD *)(v3 + 152) = 0u;
  *(_OWORD *)(v3 + 200) = 0u;
  *(_OWORD *)(v3 + 216) = 0u;
  *(_QWORD *)(v3 + 248) = v3 + 256;
  *(_QWORD *)(v3 + 256) = 0;
  *(_QWORD *)(v3 + 232) = v3;
  *(_QWORD *)(v3 + 240) = 0;
  *(_QWORD *)(v3 + 264) = 0;
  *(_QWORD *)(v3 + 272) = v3 + 256;
  *(_WORD *)(v3 + 280) = 1;
  *(_BYTE *)(v3 + 288) = 0;
  *(_BYTE *)(v3 + 296) = 0;
  *(_BYTE *)(v3 + 304) = 0;
  *(_BYTE *)(v3 + 312) = 0;
  *(_QWORD *)(v3 + 384) = 0;
  *(_OWORD *)(v3 + 352) = 0u;
  *(_OWORD *)(v3 + 368) = 0u;
  *(_OWORD *)(v3 + 320) = 0u;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_QWORD *)&result = 0x200000002;
  *(_DWORD *)(v3 + 392) = 2;
  *(_QWORD *)(v3 + 400) = 0;
  *(_DWORD *)(v3 + 20) &= ~0x40000u;
  *(_QWORD *)v3 = off_1E34319B0;
  return result;
}

uint64_t WebCore::RenderSlider::baselinePosition(uint64_t a1)
{
  unsigned int v1;
  int v2;
  BOOL v3;
  unsigned int v4;
  unsigned int v5;

  v1 = *(_DWORD *)(a1 + 164);
  v2 = *(_DWORD *)(a1 + 168);
  v3 = __OFADD__(v1, v2);
  v4 = v1 + v2;
  v5 = (v1 >> 31) + 0x7FFFFFFF;
  if (v3)
    return v5;
  else
    return v4;
}

uint64_t WebCore::RenderSlider::computeIntrinsicLogicalWidths(WebCore::RenderSlider *this, WebCore::LayoutUnit *a2, WebCore::LayoutUnit *a3)
{
  double v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  int v12;

  if (WebCore::RenderElement::shouldApplySizeOrInlineSizeContainment(this))
  {
    result = WebCore::RenderBox::explicitIntrinsicInnerLogicalWidth(this);
    if ((result & 0xFF00000000) != 0)
    {
      *(_DWORD *)a2 = result;
      *(_DWORD *)a3 = result;
    }
  }
  else
  {
    v6 = (float)(*(float *)(*((_QWORD *)this + 13) + 184) * 129.0) * 64.0;
    if (v6 >= 2147483650.0)
    {
      v7 = 0x7FFFFFFF;
    }
    else if (v6 <= -2147483650.0)
    {
      v7 = 0x80000000;
    }
    else
    {
      v7 = (int)v6;
    }
    *(_DWORD *)a3 = v7;
    v8 = *(_QWORD *)(*((_QWORD *)this + 11) + 8);
    v9 = v8 + 12;
    v10 = v8 + 4;
    if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
      result = v10;
    else
      result = v9;
    v12 = *(unsigned __int8 *)(result + 4);
    if (v12 == 11)
    {
      result = WebCore::valueForLength((unsigned __int8 *)result, 0);
      v7 = result & ~((int)result >> 31);
    }
    else if (v12 == 3)
    {
      return result;
    }
    *(_DWORD *)a2 = v7;
  }
  return result;
}

uint64_t WebCore::RenderSlider::computePreferredLogicalWidths(WebCore::RenderSlider *this)
{
  uint64_t v2;
  double v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  float *v19;
  float v20;
  unint64_t v21;
  int v22;

  *((_QWORD *)this + 23) = 0;
  v2 = *(_QWORD *)(*((_QWORD *)this + 11) + 8);
  if (*(_BYTE *)(v2 + 8) == 4)
  {
    v19 = (float *)(v2 + 4);
    v20 = *(_BYTE *)(v2 + 10) ? *v19 : (float)*(int *)v19;
    if (v20 > 0.0)
    {
      LODWORD(v21) = WebCore::RenderBox::adjustContentBoxLogicalWidthForBoxSizing(this, (uint64_t)v19);
LABEL_28:
      *((_DWORD *)this + 46) = v21;
      *((_DWORD *)this + 47) = v21;
      goto LABEL_13;
    }
  }
  if (WebCore::RenderElement::shouldApplySizeOrInlineSizeContainment(this))
  {
    v21 = WebCore::RenderBox::explicitIntrinsicInnerLogicalWidth(this);
    if ((v21 & 0xFF00000000) == 0)
      goto LABEL_13;
    goto LABEL_28;
  }
  v3 = (float)(*(float *)(*((_QWORD *)this + 13) + 184) * 129.0) * 64.0;
  if (v3 >= 2147483650.0)
  {
    v4 = 0x7FFFFFFF;
  }
  else if (v3 > -2147483650.0)
  {
    v4 = (int)v3;
  }
  else
  {
    v4 = 0x80000000;
  }
  *((_DWORD *)this + 47) = v4;
  v5 = *(_QWORD *)(*((_QWORD *)this + 11) + 8);
  v6 = (unsigned __int8 *)(v5 + 12);
  v7 = (unsigned __int8 *)(v5 + 4);
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
    v8 = v7;
  else
    v8 = v6;
  v9 = v8[4];
  if (v9 == 11)
  {
    v22 = WebCore::valueForLength(v8, 0);
    v4 = v22 & ~(v22 >> 31);
  }
  else if (v9 == 3)
  {
    goto LABEL_13;
  }
  *((_DWORD *)this + 46) = v4;
LABEL_13:
  v10 = *(_QWORD *)(*((_QWORD *)this + 11) + 8);
  v11 = (*(uint64_t (**)(WebCore::RenderSlider *))(*(_QWORD *)this + 1016))(this);
  v12 = (*(uint64_t (**)(WebCore::RenderSlider *))(*(_QWORD *)this + 1024))(this);
  if (__OFADD__(v11, v12))
    v13 = (v11 >> 31) + 0x7FFFFFFF;
  else
    v13 = v11 + v12;
  v14 = (*(uint64_t (**)(WebCore::RenderSlider *))(*(_QWORD *)this + 944))(this);
  if (__OFADD__(v13, v14))
    v15 = (v13 >> 31) + 0x7FFFFFFF;
  else
    v15 = v13 + v14;
  v16 = (*(uint64_t (**)(WebCore::RenderSlider *))(*(_QWORD *)this + 952))(this);
  if (__OFADD__(v15, v16))
    v17 = (v15 >> 31) + 0x7FFFFFFF;
  else
    v17 = v15 + v16;
  WebCore::RenderBox::computePreferredLogicalWidths((uint64_t)this, (const WebCore::RenderBox *)(v10 + 20), v10 + 28, v17);
  return WebCore::RenderObject::setPreferredLogicalWidthsDirty((uint64_t)this, 0, 1);
}

uint64_t *std::unique_ptr<WebCore::FixedTableLayout>::~unique_ptr[abi:sn180100](uint64_t *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  _BYTE *v6;
  uint64_t v7;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    v4 = *(unsigned int *)(v3 + 28);
    v5 = *(WTF **)(v3 + 16);
    if ((_DWORD)v4)
    {
      v6 = (char *)v5 + 4;
      v7 = 8 * v4;
      do
      {
        if (*v6 == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)v6 - 1));
        }
        v6 += 8;
        v7 -= 8;
      }
      while (v7);
      v5 = *(WTF **)(v3 + 16);
    }
    if (v5)
    {
      *(_QWORD *)(v3 + 16) = 0;
      *(_DWORD *)(v3 + 24) = 0;
      WTF::fastFree(v5, a2);
    }
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WebCore::RenderStyle::borderIsEquivalentForPainting(WebCore::RenderStyle *this, const WebCore::RenderStyle *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v8;
  uint64_t *v9;
  int v10;
  uint64_t result;
  int v12;
  WebCore::StyleColor *v13;
  uint64_t *v14;
  uint64_t v15;
  WebCore::StyleColor *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float v26[7];
  char v27;
  __int128 v28;
  char *v29;
  char *v30;

  v2 = *(_QWORD *)(*((_QWORD *)this + 1) + 24);
  v3 = *(_QWORD *)(*((_QWORD *)a2 + 1) + 24);
  v4 = *((_QWORD *)this + 4);
  v5 = *(_QWORD *)(v4 + 328);
  v6 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 328);
  if ((v5 & 0x8000000000000) != 0)
  {
    v24 = *((_QWORD *)a2 + 4);
    v25 = *(_QWORD *)(*((_QWORD *)a2 + 1) + 24);
    if ((v6 & 0x8000000000000) != 0
      && (v28 = *(_OWORD *)((v5 & 0xFFFFFFFFFFFFLL) + 4),
          *(_OWORD *)v26 = *(_OWORD *)((v6 & 0xFFFFFFFFFFFFLL) + 4),
          WebCore::operator==<float,4ul>((float *)&v28, v26)))
    {
      v22 = *(_QWORD *)(v4 + 328);
      v23 = *(_QWORD *)(v24 + 328);
      v8 = HIBYTE(v22) == HIBYTE(v23) && BYTE6(v22) == BYTE6(v23);
    }
    else
    {
      v8 = 0;
    }
    v3 = v25;
  }
  else
  {
    v8 = (v6 & 0x8000000000000) == 0 && v5 == v6;
  }
  v9 = (uint64_t *)(v2 + 104);
  v10 = !v8;
  if (v2 == v3)
    result = 1;
  else
    result = WebCore::operator==(v2 + 104, v3 + 104);
  if ((result & v10) == 1)
  {
    if (*(float *)(v2 + 168) != 0.0)
    {
      v12 = *(_BYTE *)(v2 + 172) & 0xF;
      if ((*(_BYTE *)(v2 + 172) & 0xF) != 0)
      {
        v13 = (WebCore::StyleColor *)(v2 + 152);
        if (*(_DWORD *)(v2 + 160))
          goto LABEL_23;
        v18 = *(_QWORD *)v13;
        if ((*(_QWORD *)v13 & 0x4000000000000) == 0)
          goto LABEL_23;
        if ((v18 & 0x8000000000000) != 0)
          goto LABEL_63;
        if (*(_QWORD *)v13)
          goto LABEL_23;
      }
    }
    while (1)
    {
      if (*(float *)(v2 + 144) != 0.0 && (*(_BYTE *)(v2 + 148) & 0xF) != 0)
      {
        v14 = (uint64_t *)(v2 + 128);
        v15 = *(unsigned int *)(v2 + 136);
        if (!(_DWORD)v15)
        {
          v19 = *v14;
          if ((*v14 & 0x4000000000000) != 0)
          {
            if ((v19 & 0x8000000000000) != 0)
            {
              if (*(float *)((v19 & 0xFFFFFFFFFFFFLL) + 0x10) <= 0.0)
                goto LABEL_15;
            }
            else if (!*v14)
            {
              goto LABEL_15;
            }
          }
        }
        if ((*(_BYTE *)(v2 + 148) & 0xF) != 1)
        {
          *(_QWORD *)&v28 = &v27;
          *((_QWORD *)&v28 + 1) = &v27;
          v29 = &v27;
          v30 = &v27;
          if ((_DWORD)v15 == -1)
            goto LABEL_62;
          *(_QWORD *)v26 = &v28;
          if ((((uint64_t (*)(float *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_20containsCurrentColorEvE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSG_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSG_INSJ_INS8_17HSLFunctionModernEEEEENSG_INSJ_INS8_11HWBFunctionEEEEENSG_INSJ_INS8_11LabFunctionEEEEENSG_INSJ_INS8_11LCHFunctionEEEEENSG_INSJ_INS8_13OKLabFunctionEEEEENSG_INSJ_INS8_13OKLCHFunctionEEEEENSG_INSJ_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INS8_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEEDpOT_EUlRKSE_E_JZNSA_IJSB_EEESC_S2E_S2H_EUlRKSF_E_ZNSA_IJSB_EEESC_S2E_S2H_EUlRKSI_E_ZNSA_IJSB_EEESC_S2E_S2H_EUlTyRKNSG_INSJ_IT_EEEEE_EEEEEJRKNS0_6__implIJSE_SF_SI_SM_SP_SS_SV_SY_S11_S14_S1B_S1G_S1L_S1Q_S1V_S20_S27_S2B_EEEEEESC_OS2R_DpOT0____fmatrix[v15])(v26, v14) & 1) != 0)return 0;
        }
      }
LABEL_15:
      if (*(float *)(v2 + 192) != 0.0 && (*(_BYTE *)(v2 + 196) & 0xF) != 0)
      {
        v16 = (WebCore::StyleColor *)(v2 + 176);
        if (!*(_DWORD *)(v2 + 184))
        {
          v20 = *(_QWORD *)v16;
          if ((*(_QWORD *)v16 & 0x4000000000000) != 0)
          {
            if ((v20 & 0x8000000000000) != 0)
            {
              if (*(float *)((v20 & 0xFFFFFFFFFFFFLL) + 0x10) <= 0.0)
                goto LABEL_17;
            }
            else if (!*(_QWORD *)v16)
            {
              goto LABEL_17;
            }
          }
        }
        if ((*(_BYTE *)(v2 + 196) & 0xF) != 1 && (WebCore::StyleColor::containsCurrentColor(v16) & 1) != 0)
          return 0;
      }
LABEL_17:
      if (*(float *)(v2 + 120) == 0.0 || (*(_BYTE *)(v2 + 124) & 0xF) == 0)
        return 1;
      v17 = *(unsigned int *)(v2 + 112);
      if (!(_DWORD)v17)
      {
        v21 = *v9;
        if ((*v9 & 0x4000000000000) != 0)
        {
          if ((v21 & 0x8000000000000) != 0)
          {
            if (*(float *)((v21 & 0xFFFFFFFFFFFFLL) + 0x10) <= 0.0)
              return 1;
          }
          else if (!*v9)
          {
            return 1;
          }
        }
      }
      if ((*(_BYTE *)(v2 + 124) & 0xF) == 1)
        return 1;
      *(_QWORD *)&v28 = &v27;
      *((_QWORD *)&v28 + 1) = &v27;
      v29 = &v27;
      v30 = &v27;
      if ((_DWORD)v17 != -1)
      {
        *(_QWORD *)v26 = &v28;
        return ((unsigned int (*)(float *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_20containsCurrentColorEvE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSG_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSG_INSJ_INS8_17HSLFunctionModernEEEEENSG_INSJ_INS8_11HWBFunctionEEEEENSG_INSJ_INS8_11LabFunctionEEEEENSG_INSJ_INS8_11LCHFunctionEEEEENSG_INSJ_INS8_13OKLabFunctionEEEEENSG_INSJ_INS8_13OKLCHFunctionEEEEENSG_INSJ_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INS8_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEEDpOT_EUlRKSE_E_JZNSA_IJSB_EEESC_S2E_S2H_EUlRKSF_E_ZNSA_IJSB_EEESC_S2E_S2H_EUlRKSI_E_ZNSA_IJSB_EEESC_S2E_S2H_EUlTyRKNSG_INSJ_IT_EEEEE_EEEEEJRKNS0_6__implIJSE_SF_SI_SM_SP_SS_SV_SY_S11_S14_S1B_S1G_S1L_S1Q_S1V_S20_S27_S2B_EEEEEESC_OS2R_DpOT0____fmatrix[v17])(v26, v2 + 104) ^ 1;
      }
LABEL_62:
      v13 = (WebCore::StyleColor *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_63:
      if (*(float *)((v18 & 0xFFFFFFFFFFFFLL) + 0x10) > 0.0)
      {
LABEL_23:
        if (v12 != 1 && (WebCore::StyleColor::containsCurrentColor(v13) & 1) != 0)
          return 0;
      }
    }
  }
  return result;
}

uint64_t WebCore::RenderTable::willInsertTableColumn(uint64_t result)
{
  *(_BYTE *)(result + 328) |= 4u;
  return result;
}

WTF **WebCore::resetSectionPointerIfNotBefore(WTF **a1, void *a2)
{
  uint64_t v2;
  unint64_t i;
  uint64_t v4;

  if (a2)
  {
    if (*a1)
    {
      v2 = *((_QWORD *)*a1 + 1);
      if (v2)
      {
        for (i = *((unsigned int *)a2 + 10) | ((unint64_t)*((unsigned __int8 *)a2 + 44) << 32);
              i;
              i = *(unsigned int *)(v4 + 40) | ((unint64_t)*(unsigned __int8 *)(v4 + 44) << 32))
        {
          v4 = *(_QWORD *)(i + 8);
          if (!v4)
            break;
          if (v2 == v4)
            return a1;
        }
        return (WTF **)WTF::WeakPtr<WebCore::RenderTableSection,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>::clear(a1, a2);
      }
    }
  }
  return a1;
}

uint64_t WebCore::RenderTable::invalidateCachedColumns(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  WTF **v6;
  uint64_t v7;
  WTF **v8;
  WTF *v9;

  v2 = this;
  *(_BYTE *)(this + 328) &= ~0x20u;
  v3 = *(unsigned int *)(this + 260);
  if ((_DWORD)v3)
  {
    v4 = *(uint64_t **)(this + 248);
    v5 = 8 * v3;
    do
    {
      this = *v4;
      *v4 = 0;
      if (this)
      {
        if (*(_DWORD *)this == 1)
          this = WTF::fastFree((WTF *)this, a2);
        else
          --*(_DWORD *)this;
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  *(_DWORD *)(v2 + 260) = 0;
  v6 = *(WTF ***)(v2 + 264);
  if (v6)
  {
    *(_QWORD *)(v2 + 264) = 0;
    v7 = *((unsigned int *)v6 - 1);
    if ((_DWORD)v7)
    {
      v8 = v6;
      do
      {
        v9 = *v8;
        if (*v8 != (WTF *)-1)
        {
          *v8 = 0;
          if (v9)
          {
            if (*(_DWORD *)v9 == 1)
              WTF::fastFree(v9, a2);
            else
              --*(_DWORD *)v9;
          }
        }
        v8 += 2;
        --v7;
      }
      while (v7);
    }
    return WTF::fastFree((WTF *)(v6 - 2), a2);
  }
  return this;
}

void WebCore::RenderTable::invalidateColumns(WebCore::RenderTable *this, void *a2)
{
  int v3;
  WebCore::RenderElement *v4;
  uint64_t v5;
  int v6;

  WebCore::RenderTable::invalidateCachedColumns((uint64_t)this, a2);
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 3405))
  {
    *((_BYTE *)this + 328) |= 8u;
    v3 = *((_DWORD *)this + 5);
    if ((v3 & 8) == 0)
    {
      *((_DWORD *)this + 5) = v3 | 8;
      v4 = WebCore::RenderObject::markContainingBlocksForLayout(this, 0);
      WebCore::RenderObject::scheduleLayout(this, v4);
      if ((*((_BYTE *)this + 21) & 0x80) != 0)
      {
        if ((*((_BYTE *)this + 45) & 0x10) == 0
          || ((v5 = *((_QWORD *)this + 18)) == 0
            ? (v6 = MEMORY[8])
            : (v6 = *(_DWORD *)(v5 + 8) + 1, *(_DWORD *)(v5 + 8) = v6),
              *(_QWORD *)(v5 + 24) = *(_QWORD *)(v5 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000,
              !v6))
        {
          __break(0xC471u);
          JUMPOUT(0x19643C510);
        }
        *(_DWORD *)(v5 + 8) = v6 - 1;
      }
    }
  }
}

uint64_t WebCore::RenderStyle::marginStart(WebCore::RenderStyle *this)
{
  unsigned int v1;
  int v2;
  int v3;
  uint64_t v4;
  BOOL v6;

  v1 = *((_DWORD *)this + 10);
  v2 = (v1 >> 26) & 1;
  v3 = (unsigned __int16)*((_DWORD *)this + 11) >> 13;
  if ((v3 - 2) >= 2)
  {
    if (v3 == 4)
    {
      v2 = (v1 & 0x4000000) == 0;
    }
    else if (v3 != 5)
    {
      v4 = 3;
      if ((v1 & 0x4000000) != 0)
        v4 = 1;
      return *(_QWORD *)(*((_QWORD *)this + 1) + 24) + 8 * v4 + 40;
    }
  }
  v6 = v2 == 0;
  v4 = 2;
  if (v6)
    v4 = 0;
  return *(_QWORD *)(*((_QWORD *)this + 1) + 24) + 8 * v4 + 40;
}

uint64_t WebCore::RenderStyle::marginEnd(WebCore::RenderStyle *this)
{
  unsigned int v1;
  int v2;
  int v3;
  uint64_t v4;
  BOOL v6;

  v1 = *((_DWORD *)this + 10);
  v2 = (v1 >> 26) & 1;
  v3 = (unsigned __int16)*((_DWORD *)this + 11) >> 13;
  if ((v3 - 2) >= 2)
  {
    if (v3 == 4)
    {
      v2 = (v1 & 0x4000000) == 0;
    }
    else if (v3 != 5)
    {
      v4 = 3;
      if ((v1 & 0x4000000) == 0)
        v4 = 1;
      return *(_QWORD *)(*((_QWORD *)this + 1) + 24) + 8 * v4 + 40;
    }
  }
  v6 = v2 == 0;
  v4 = 2;
  if (!v6)
    v4 = 0;
  return *(_QWORD *)(*((_QWORD *)this + 1) + 24) + 8 * v4 + 40;
}

uint64_t WebCore::RenderTable::bordersPaddingAndSpacingInRowDirection(WebCore::RenderTable *this)
{
  unsigned int v1;
  int v2;
  BOOL v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  unsigned int v18;

  v1 = *((_DWORD *)this + 85);
  v2 = *((_DWORD *)this + 86);
  v3 = __OFADD__(v1, v2);
  v4 = v1 + v2;
  v5 = (v1 >> 31) + 0x7FFFFFFF;
  if (v3)
    v6 = v5;
  else
    v6 = v4;
  if ((*((_BYTE *)this + 124) & 4) != 0)
  {
    v17 = 0;
  }
  else
  {
    v8 = (*(uint64_t (**)(WebCore::RenderTable *))(*(_QWORD *)this + 976))(this);
    v9 = (*(uint64_t (**)(WebCore::RenderTable *))(*(_QWORD *)this + 984))(this);
    v10 = v8 + v9;
    if (__OFADD__(v8, v9))
      v10 = (v8 >> 31) + 0x7FFFFFFF;
    v11 = *((_DWORD *)this + 57);
    if (v11)
    {
      v12 = v11 + 1;
      v13 = *((int *)this + 83);
      LODWORD(v14) = v12 << 6;
      if (v12 <= 0x1FFFFFE)
        v14 = v14;
      else
        v14 = 0x7FFFFFFFLL;
      v15 = v13 * v14 / 64;
      if (HIDWORD(v15) != (int)v15 >> 31)
        LODWORD(v15) = (v13 >> 31) + 0x7FFFFFFF;
    }
    else
    {
      LODWORD(v15) = 0;
    }
    v3 = __OFADD__(v10, (_DWORD)v15);
    v16 = v10 + v15;
    v17 = (v10 >> 31) + 0x7FFFFFFF;
    if (!v3)
      v17 = v16;
  }
  v3 = __OFADD__(v6, v17);
  v18 = v6 + v17;
  if (v3)
    return (v6 >> 31) + 0x7FFFFFFF;
  else
    return v18;
}

uint64_t WebCore::RenderTable::convertStyleLogicalHeightToComputedHeight(WebCore::RenderTable *this, const WebCore::Length *a2)
{
  unsigned int v4;
  void *v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  float v11;
  double v12;
  unsigned int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  float v23;
  double v24;
  unint64_t v25;
  unsigned int v26;
  BOOL v27;
  unsigned int v28;
  uint64_t v29;
  WebCore::RenderStyle *v30;
  unsigned int v31;
  char v32;

  if ((*((_BYTE *)this + 124) & 4) != 0)
  {
    if ((*((_BYTE *)this + 328) & 8) != 0)
      WebCore::RenderTable::recalcSections(this, a2);
    v4 = WebCore::RenderTable::outerBorderBefore(this);
  }
  else
  {
    v4 = WebCore::RenderBlock::borderBefore(this);
  }
  v6 = v4;
  if ((*((_BYTE *)this + 124) & 4) != 0)
    v7 = 0;
  else
    v7 = (*(uint64_t (**)(WebCore::RenderTable *))(*(_QWORD *)this + 960))(this);
  v8 = v6 + v7;
  if (__OFADD__(v6, v7))
    v8 = (v6 >> 31) + 0x7FFFFFFF;
  v9 = *((_DWORD *)this + 31);
  if ((v9 & 4) != 0)
  {
    if ((*((_BYTE *)this + 328) & 8) != 0)
      WebCore::RenderTable::recalcSections(this, v5);
    v13 = WebCore::RenderTable::outerBorderAfter(this, v5);
  }
  else
  {
    v30 = (WebCore::RenderTable *)((char *)this + 80);
    switch((unsigned __int16)v9 >> 13)
    {
      case 1:
        v11 = WebCore::RenderStyle::borderTopWidth(v30);
        break;
      case 2:
      case 4:
        v11 = WebCore::RenderStyle::borderRightWidth(v30);
        break;
      case 3:
      case 5:
        v11 = WebCore::RenderStyle::borderLeftWidth(v30);
        break;
      default:
        v10 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
        v11 = 0.0;
        if ((*(_BYTE *)(v10 + 196) & 0xE) != 0)
        {
          v21 = *(_QWORD *)(v10 + 200);
          if (*(_BYTE *)(v21 + 5) && *(_BYTE *)(v21 + 68) == 4)
          {
            if (*(_BYTE *)(v21 + 70))
              v11 = *(float *)(v21 + 64);
            else
              v11 = (float)*(int *)(v21 + 64);
          }
          else
          {
            v11 = *(float *)(v10 + 192);
          }
        }
        break;
    }
    v12 = v11 * 64.0;
    if (v12 >= 2147483650.0)
    {
      v13 = 0x7FFFFFFF;
    }
    else if (v12 <= -2147483650.0)
    {
      v13 = 0x80000000;
    }
    else
    {
      v13 = (int)v12;
    }
  }
  if ((*((_BYTE *)this + 124) & 4) != 0)
    v14 = 0;
  else
    v14 = (*(uint64_t (**)(WebCore::RenderTable *))(*(_QWORD *)this + 968))(this);
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
    v15 = (v13 >> 31) + 0x7FFFFFFF;
  v16 = v8 + v15;
  if (__OFADD__(v8, v15))
    v16 = (v8 >> 31) + 0x7FFFFFFF;
  v17 = *((unsigned __int8 *)a2 + 4);
  if (v17 == 4)
  {
    v22 = WebCore::RenderElement::element(this);
    if ((!v22
       || (*(_WORD *)(v22 + 28) & 0x10) == 0
       || *(_QWORD *)(*(_QWORD *)(v22 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::tableTag + 24))
      && (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 11) + 8) + 68) & 4) == 0)
    {
      v16 = 0;
    }
    v23 = *(float *)a2;
    if (!*((_BYTE *)a2 + 6))
      v23 = (float)*(int *)a2;
    v24 = (float)(v23 + (float)((float)v16 * -0.015625)) * 64.0;
    if (v24 >= 2147483650.0)
    {
      return 0x7FFFFFFFLL;
    }
    else if (v24 <= -2147483650.0)
    {
      return 0x80000000;
    }
    else
    {
      return (int)v24;
    }
  }
  else if ((v17 & 0xFFFFFFF7) == 3)
  {
    v18 = WebCore::RenderBox::computePercentageLogicalHeight((uint64_t)this, a2, 1);
    if ((v18 & 0xFF00000000) != 0)
      return v18;
    else
      return 0;
  }
  else if ((v17 - 7) > 3)
  {
    return 0;
  }
  else
  {
    WebCore::Length::Length((WebCore::Length *)&v31, a2);
    v25 = (unint64_t)this + 160;
    if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
      v25 = (unint64_t)this + 164;
    v26 = *(_DWORD *)v25;
    v27 = __OFSUB__(v26, v16);
    v28 = v26 - v16;
    LODWORD(v25) = (v26 >> 31) + 0x7FFFFFFF;
    if (v27)
      v25 = v25;
    else
      v25 = v28;
    v29 = WebCore::RenderBox::computeIntrinsicLogicalContentHeightUsing(this, (uint64_t)&v31, v25 | 0x100000000, v16);
    if ((v29 & 0xFF00000000) != 0)
      v19 = v29;
    else
      v19 = 0;
    if (v32 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v31);
    }
  }
  return v19;
}

_DWORD *WebCore::RenderTable::layoutCaption(_DWORD *this, WebCore::RenderTableCaption *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int *v14;
  int v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  int *v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  char *v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  int *v57;
  uint64_t v58;
  BOOL v59;
  __int128 v60;

  v3 = (uint64_t)this;
  v60 = *(_OWORD *)((char *)a2 + 152);
  if ((*((_BYTE *)a2 + 20) & 0xF8) == 0)
    goto LABEL_20;
  v5 = *((_DWORD *)a2 + 30);
  v4 = *((_DWORD *)a2 + 31);
  v6 = (unsigned __int16)v4 >> 13;
  v7 = (v5 >> 26) & 1;
  if ((v6 - 2) < 2)
    goto LABEL_75;
  if ((_DWORD)v6 == 4)
  {
    v7 = (v5 & 0x4000000) == 0;
LABEL_75:
    v59 = v7 == 0;
    v8 = 2;
    if (v59)
      v8 = 0;
    goto LABEL_7;
  }
  if ((_DWORD)v6 == 5)
    goto LABEL_75;
  v8 = 3;
  if ((v5 & 0x4000000) != 0)
    v8 = 1;
LABEL_7:
  v9 = (char *)a2 + 168;
  v10 = v6 - 1;
  if (v10 > 4)
    v11 = 0;
  else
    v11 = qword_1969FCEE8[v10];
  v12 = *(unsigned int *)&v9[4 * v8];
  v13 = *(_DWORD *)&v9[4 * v11];
  if (((this[31] >> 13) & 6u) - 2 < 4)
    v14 = this + 40;
  else
    v14 = this + 41;
  v15 = *v14;
  v16 = __OFADD__(v13, v15);
  v17 = v13 + v15;
  if (v16)
    v17 = (v13 >> 31) + 0x7FFFFFFF;
  v18 = v12 | (v17 << 32);
  v19 = ((v4 >> 13) & 6) - 2 > 3;
  v20 = __ROR8__(v18, 32);
  if (v19)
    v20 = v18;
  *((_QWORD *)a2 + 19) = v20;
  v21 = *((_QWORD *)a2 + 4);
  if (v21
    && (v22 = *(_QWORD *)(v21 + 8)) != 0
    && (*(_BYTE *)(*(_QWORD *)(v22 + 104) + 239) & 0x18) != 0
    && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 40) + 8)
                                         + 1944)
                             + 248)
                 + 479))
  {
    this = (_DWORD *)WebCore::RenderElement::clearNeedsLayoutForSkippedContent(a2);
  }
  else
  {
    this = (_DWORD *)(*(uint64_t (**)(WebCore::RenderTableCaption *))(*(_QWORD *)a2 + 688))(a2);
  }
LABEL_20:
  v24 = *((_DWORD *)a2 + 30);
  v23 = *((_DWORD *)a2 + 31);
  v25 = (unsigned __int16)v23 >> 13;
  v26 = (v24 >> 26) & 1;
  if ((v25 - 2) >= 2)
  {
    if ((_DWORD)v25 == 4)
    {
      v26 = (v24 & 0x4000000) == 0;
    }
    else if ((_DWORD)v25 != 5)
    {
      v27 = 3;
      if ((v24 & 0x4000000) != 0)
        v27 = 1;
      goto LABEL_25;
    }
  }
  v59 = v26 == 0;
  v27 = 2;
  if (v59)
    v27 = 0;
LABEL_25:
  v28 = (char *)a2 + 168;
  v29 = *((unsigned int *)a2 + v27 + 42);
  v30 = v25 - 1;
  if (v30 > 4)
    v31 = 0;
  else
    v31 = qword_1969FCEE8[v30];
  v32 = *(_DWORD *)&v28[4 * v31];
  v33 = (int *)(v3 + 160);
  if (((*(_DWORD *)(v3 + 124) >> 13) & 6u) - 2 >= 4)
    v33 = (int *)(v3 + 164);
  v34 = *v33;
  v16 = __OFADD__(v32, v34);
  v35 = v32 + v34;
  LODWORD(v36) = (v32 >> 31) + 0x7FFFFFFF;
  if (v16)
    v36 = v36;
  else
    v36 = v35;
  v37 = v29 | (v36 << 32);
  v19 = ((v23 >> 13) & 6) - 2 > 3;
  v38 = __ROR8__(v37, 32);
  if (v19)
    v38 = v37;
  *((_QWORD *)a2 + 19) = v38;
  if ((*(_BYTE *)(v3 + 20) & 8) == 0)
  {
    v39 = *((_DWORD *)a2 + 5);
    if ((v39 & 0x200) != 0)
    {
      if ((v39 & 0x8000) == 0)
        goto LABEL_81;
      if ((*((_BYTE *)a2 + 45) & 0x10) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19643CD8CLL);
      }
      v58 = *((_QWORD *)a2 + 18);
      if (!v58 || (*(_BYTE *)(v58 + 25) & 8) == 0)
      {
LABEL_81:
        if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3)
                                                                                               + 8)
                                                                                   + 40)
                                                                       + 8)
                                                           + 528)
                                               + 8)
                                   + 288)
                       + 476))
          this = (_DWORD *)WebCore::RenderBox::repaintDuringLayoutIfMoved((uint64_t)a2, (const WebCore::LayoutRect *)&v60);
      }
    }
  }
  v40 = ((*(_DWORD *)(v3 + 124) >> 13) & 6) - 2;
  if (v40 < 4)
    v41 = (unsigned int *)(v3 + 160);
  else
    v41 = (unsigned int *)(v3 + 164);
  v42 = *v41;
  v43 = *((_DWORD *)a2 + 31);
  if (((v43 >> 13) & 6) - 2 >= 4)
    v44 = (char *)a2 + 164;
  else
    v44 = (char *)a2 + 160;
  v45 = *(_DWORD *)v44;
  v16 = __OFADD__(v42, v45);
  v46 = v42 + v45;
  if (v16)
    v46 = (v42 >> 31) + 0x7FFFFFFF;
  v47 = (unsigned __int16)v43 >> 13;
  if ((v47 - 1) > 4)
    v48 = 0;
  else
    v48 = qword_1969FCEE8[v47 - 1];
  v49 = *(_DWORD *)&v28[4 * v48];
  v16 = __OFADD__(v46, v49);
  v50 = v46 + v49;
  v51 = (v46 >> 31) + 0x7FFFFFFF;
  if (!v16)
    v51 = v50;
  v52 = v47 - 1;
  if (v52 > 4)
    v53 = 2;
  else
    v53 = qword_1969FCF10[v52];
  v54 = *(_DWORD *)&v28[4 * v53];
  v16 = __OFADD__(v51, v54);
  v55 = v51 + v54;
  v56 = (v51 >> 31) + 0x7FFFFFFF;
  if (!v16)
    v56 = v55;
  if (v40 < 4)
    v57 = (int *)(v3 + 160);
  else
    v57 = (int *)(v3 + 164);
  *v57 = v56;
  return this;
}

void WebCore::RenderTable::simplifiedNormalFlowLayout(WebCore::RenderTable *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = *((unsigned int *)this + 61);
  if ((_DWORD)v2)
  {
    v3 = *((_QWORD *)this + 29);
    v4 = 8 * v2;
    do
    {
      if (*(_QWORD *)v3)
        v5 = *(_QWORD *)(*(_QWORD *)v3 + 8);
      else
        v5 = 0;
      if ((*(_BYTE *)(v5 + 20) & 0xF8) != 0)
      {
        v6 = *(_QWORD *)(v5 + 32);
        if (v6
          && (v7 = *(_QWORD *)(v6 + 8)) != 0
          && (*(_BYTE *)(*(_QWORD *)(v7 + 104) + 239) & 0x18) != 0
          && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8) + 40)
                                                           + 8)
                                               + 1944)
                                   + 248)
                       + 479))
        {
          WebCore::RenderElement::clearNeedsLayoutForSkippedContent((WebCore::RenderElement *)v5);
        }
        else
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 688))(v5);
        }
      }
      v3 += 8;
      v4 -= 8;
    }
    while (v4);
  }
  v8 = *((_QWORD *)this + 34);
  if (!v8 || (v11 = *(_QWORD *)(v8 + 8)) == 0)
  {
    v9 = *((_QWORD *)this + 36);
    if (!v9 || (v11 = *(_QWORD *)(v9 + 8)) == 0)
    {
      v10 = *((_QWORD *)this + 35);
      goto LABEL_18;
    }
  }
  while (1)
  {
    if ((*(_BYTE *)(v11 + 20) & 0xF8) != 0)
    {
      v12 = *(_QWORD *)(v11 + 32);
      if (v12
        && (v13 = *(_QWORD *)(v12 + 8)) != 0
        && (*(_BYTE *)(*(_QWORD *)(v13 + 104) + 239) & 0x18) != 0
        && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 24) + 8) + 40)
                                                         + 8)
                                             + 1944)
                                 + 248)
                     + 479))
      {
        WebCore::RenderElement::clearNeedsLayoutForSkippedContent((WebCore::RenderElement *)v11);
      }
      else
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 688))(v11);
      }
    }
    WebCore::RenderTableSection::layoutRows((WebCore::RenderTableSection *)v11);
    v14 = *(_QWORD *)(*(_QWORD *)(v11 + 32) + 8);
    v15 = *(unsigned __int8 *)(v14 + 46);
    if (v15 != 35 && v15 != 63)
      break;
    WebCore::RenderTableSection::computeOverflowFromCells((WebCore::RenderTableSection *)v11, (void *)*(unsigned int *)(v11 + 212), *(_DWORD *)(v14 + 228));
    WebCore::RenderBox::addVisualEffectOverflow((WebCore::RenderBox *)v11);
    if ((*((_BYTE *)this + 328) & 8) != 0)
      WebCore::RenderTable::recalcSections(this, v16);
    v10 = *((_QWORD *)this + 35);
    if (v10)
      v17 = *(_QWORD *)(v10 + 8);
    else
      v17 = 0;
    if (v17 == v11)
      return;
    v18 = *((_QWORD *)this + 34);
    if (v18)
      v19 = *(_QWORD *)(v18 + 8);
    else
      v19 = 0;
    if (v19 == v11)
    {
      v20 = *((unsigned __int8 *)this + 68);
      v21 = *((unsigned int *)this + 16);
    }
    else
    {
      v20 = *(unsigned __int8 *)(v11 + 51);
      v21 = *(unsigned int *)(v11 + 47);
    }
    v22 = v21 | (v20 << 32);
    if (v22 && (v11 = *(_QWORD *)(v22 + 8)) != 0)
    {
      if (v18)
      {
        if (v10)
        {
          while (*(_BYTE *)(v11 + 46) != 40 || *(_QWORD *)(v18 + 8) == v11 || *(_QWORD *)(v10 + 8) == v11)
          {
            v26 = *(unsigned int *)(v11 + 47);
            if (v26 | ((unint64_t)*(unsigned __int8 *)(v11 + 51) << 32))
            {
              v11 = *(_QWORD *)((v26 | ((unint64_t)*(unsigned __int8 *)(v11 + 51) << 32)) + 8);
              if (v11)
                continue;
            }
            goto LABEL_18;
          }
        }
        else
        {
          while (*(_BYTE *)(v11 + 46) != 40 || *(_QWORD *)(v18 + 8) == v11)
          {
            v24 = *(unsigned int *)(v11 + 47);
            if (v24 | ((unint64_t)*(unsigned __int8 *)(v11 + 51) << 32))
            {
              v11 = *(_QWORD *)((v24 | ((unint64_t)*(unsigned __int8 *)(v11 + 51) << 32)) + 8);
              if (v11)
                continue;
            }
            goto LABEL_18;
          }
        }
      }
      else if (v10)
      {
        while (*(_BYTE *)(v11 + 46) != 40 || *(_QWORD *)(v10 + 8) == v11)
        {
          v25 = *(unsigned int *)(v11 + 47);
          if (v25 | ((unint64_t)*(unsigned __int8 *)(v11 + 51) << 32))
          {
            v11 = *(_QWORD *)((v25 | ((unint64_t)*(unsigned __int8 *)(v11 + 51) << 32)) + 8);
            if (v11)
              continue;
          }
          goto LABEL_18;
        }
      }
      else
      {
        while (*(_BYTE *)(v11 + 46) != 40)
        {
          v23 = *(unsigned int *)(v11 + 47);
          if (v23 | ((unint64_t)*(unsigned __int8 *)(v11 + 51) << 32))
          {
            v11 = *(_QWORD *)((v23 | ((unint64_t)*(unsigned __int8 *)(v11 + 51) << 32)) + 8);
            if (v11)
              continue;
          }
          goto LABEL_18;
        }
      }
    }
    else
    {
LABEL_18:
      if (!v10)
        return;
      v11 = *(_QWORD *)(v10 + 8);
      if (!v11)
        return;
    }
  }
  __break(0xC471u);
}

uint64_t WebCore::RenderTable::sumCaptionsLogicalHeight(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  BOOL v7;
  unsigned int *v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  unsigned int v23;

  v1 = *(unsigned int *)(this + 244);
  if (!(_DWORD)v1)
    return 0;
  v2 = this;
  LODWORD(this) = 0;
  v3 = *(uint64_t **)(v2 + 232);
  v4 = 8 * v1;
  do
  {
    v5 = *v3;
    if (*v3)
      v6 = *(_DWORD **)(v5 + 8);
    else
      v6 = 0;
    v7 = ((v6[31] >> 13) & 6u) - 2 >= 4;
    v8 = v6 + 40;
    v9 = v6 + 41;
    if (v7)
      v8 = v9;
    v10 = *(_QWORD *)(v5 + 8);
    v11 = (unsigned __int16)*(_DWORD *)(v10 + 124) >> 13;
    if ((v11 - 1) > 4)
      v12 = 0;
    else
      v12 = qword_1969FCEE8[v11 - 1];
    v13 = *v8;
    v14 = v10 + 168;
    v15 = *(_DWORD *)(v14 + 4 * v12);
    v16 = __OFADD__(v13, v15);
    v17 = v13 + v15;
    v18 = (v13 >> 31) + 0x7FFFFFFF;
    if (!v16)
      v18 = v17;
    v19 = v11 - 1;
    if (v19 > 4)
      v20 = 2;
    else
      v20 = qword_1969FCF10[v19];
    v21 = *(_DWORD *)(v14 + 4 * v20);
    v16 = __OFADD__(v18, v21);
    v22 = v18 + v21;
    if (v16)
      v22 = (v18 >> 31) + 0x7FFFFFFF;
    v16 = __OFADD__((_DWORD)this, v22);
    v23 = this + v22;
    if (v16)
      this = (this >> 31) + 0x7FFFFFFF;
    else
      this = v23;
    ++v3;
    v4 -= 8;
  }
  while (v4);
  return this;
}

uint64_t WebCore::RenderTable::layout(void)::$_0::operator()(uint64_t a1)
{
  WebCore::RenderBox *v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  unsigned int v6;
  unsigned int *v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;

  v2 = *(WebCore::RenderBox **)a1;
  v3 = WebCore::RenderBox::overridingLogicalHeight(*(WebCore::RenderBox **)a1);
  if ((v3 & 0xFF00000000) != 0)
  {
    v4 = **(_DWORD **)(a1 + 8);
    v5 = __OFSUB__((_DWORD)v3, v4);
    v6 = v3 - v4;
    if (v5)
      return (v3 >> 31) + 0x7FFFFFFF;
    else
      return v6;
  }
  else
  {
    v8 = (unsigned int *)((char *)v2 + 160);
    if (((*((_DWORD *)v2 + 31) >> 13) & 6u) - 2 >= 4)
      v8 = (unsigned int *)((char *)v2 + 164);
    v9 = *v8;
    v10 = **(_DWORD **)(a1 + 16);
    v5 = __OFADD__(v9, v10);
    v11 = v9 + v10;
    v12 = (v9 >> 31) + 0x7FFFFFFF;
    if (v5)
      return v12;
    else
      return v11;
  }
}

uint64_t WebCore::RenderChildIteratorAdapter<WebCore::RenderTableSection>::begin(uint64_t *a1)
{
  uint64_t result;
  uint64_t v2;
  uint64_t i;
  unint64_t v4;

  result = *a1;
  v2 = *(unsigned int *)(result + 64);
  if (v2 | ((unint64_t)*(unsigned __int8 *)(result + 68) << 32))
  {
    for (i = *(_QWORD *)((v2 | ((unint64_t)*(unsigned __int8 *)(result + 68) << 32)) + 8);
          i;
          i = *(_QWORD *)(v4 + 8))
    {
      if (*(_BYTE *)(i + 46) == 40)
        break;
      v4 = *(unsigned int *)(i + 47) | ((unint64_t)*(unsigned __int8 *)(i + 51) << 32);
      if (!v4)
        break;
    }
  }
  return result;
}

uint64_t WebCore::RenderChildIterator<WebCore::RenderTableSection>::operator++(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  if (*(unsigned int *)(*(_QWORD *)(result + 8) + 47) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)(result + 8)
                                                                                                 + 51) << 32)
    && (v1 = *(_QWORD *)((*(unsigned int *)(*(_QWORD *)(result + 8) + 47) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)(result + 8) + 51) << 32))
                       + 8)) != 0)
  {
    while (*(_BYTE *)(v1 + 46) != 40)
    {
      v3 = *(unsigned int *)(v1 + 47) | ((unint64_t)*(unsigned __int8 *)(v1 + 51) << 32);
      if (!v3)
        goto LABEL_3;
      v2 = 0;
      v1 = *(_QWORD *)(v3 + 8);
      if (!v1)
        goto LABEL_4;
    }
    v2 = v1;
  }
  else
  {
LABEL_3:
    v2 = 0;
  }
LABEL_4:
  *(_QWORD *)(result + 8) = v2;
  return result;
}

uint64_t WebCore::RenderTable::cellAfter(WebCore::RenderTable *this, const WebCore::RenderTableCell *a2)
{
  int v4;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  int v19;
  unsigned int v20;

  if ((*((_BYTE *)this + 328) & 8) != 0)
    WebCore::RenderTable::recalcSections(this, a2);
  v4 = *((_DWORD *)a2 + 62);
  v5 = v4 & 0x1FFFFFF;
  if ((v4 & 0x4000000) != 0)
    v6 = WebCore::RenderTableCell::parseColSpanFromDOM(a2);
  else
    v6 = 1;
  v7 = v6 + v5;
  v8 = *((unsigned int *)this + 57);
  if ((*((_BYTE *)this + 328) & 0x40) != 0)
  {
    if (!(_DWORD)v8)
      return 0;
    v18 = 0;
    v19 = 0;
    while (1)
    {
      v19 += *(_DWORD *)(*((_QWORD *)this + 27) + 4 * v18);
      if (v19 - 1 >= v7)
        break;
      result = 0;
      if (v8 == ++v18)
        return result;
    }
    v7 = v18;
  }
  if (v7 < v8)
  {
    v9 = *((_QWORD *)a2 + 4);
    if (v9)
    {
      v10 = *(_QWORD *)(v9 + 8);
      if (*(_BYTE *)(v10 + 46) != 39)
      {
        __break(0xC471u);
        JUMPOUT(0x19643D4C4);
      }
      v11 = *(_QWORD *)(v10 + 32);
      if (v11)
      {
        v12 = *(_QWORD *)(v11 + 8);
        if (v12 && *(_BYTE *)(v12 + 46) != 40)
        {
          __break(0xC471u);
          JUMPOUT(0x19643D4E4);
        }
LABEL_12:
        v13 = *(_DWORD *)(v10 + 200) & 0x7FFFFFFF;
        if (*(_BYTE *)(v12 + 282))
        {
          v20 = v7;
          WebCore::RenderTableSection::recalcCells((WebCore::RenderTableSection *)v12);
          v7 = v20;
        }
        if (*(_DWORD *)(v12 + 212) <= v13)
        {
          __break(0xC471u);
          JUMPOUT(0x19643D548);
        }
        v14 = *(_QWORD *)(v12 + 200) + 40 * v13;
        if (*(_DWORD *)(v14 + 12) > v7)
        {
          v15 = *(_QWORD *)v14 + 32 * v7;
          v16 = *(unsigned int *)(v15 + 12);
          if ((_DWORD)v16)
            return *(_QWORD *)(*(_QWORD *)v15 + 8 * v16 - 8);
          return 0;
        }
LABEL_32:
        __break(0xC471u);
        JUMPOUT(0x19643D4A4);
      }
    }
    else
    {
      v10 = MEMORY[8];
      if (*(_BYTE *)(MEMORY[8] + 46) != 39)
        goto LABEL_32;
    }
    v12 = 0;
    goto LABEL_12;
  }
  return 0;
}

void WebCore::RenderTable::paintObject(WebCore::RenderTable *this, WebCore::PaintInfo *a2, WTF **a3)
{
  unsigned int v6;
  int v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF **v23;
  uint64_t v24;
  uint64_t j;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t k;
  uint64_t v42;
  uint64_t v43;
  uint64_t m;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unsigned int v49;
  WTF *v50;
  float v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  _BYTE v82[8];
  uint64_t v83;
  _BYTE v84[8];
  uint64_t v85;
  _BYTE v86[8];
  uint64_t v87;
  WTF *v88;
  uint64_t v89;

  v6 = *((unsigned __int16 *)a2 + 8);
  if (v6 <= 1
    && (*((_BYTE *)this + 23) & 0x60) != 0
    && (*(_BYTE *)(*((_QWORD *)this + 13) + 239) & 4) == 0
    && (*((_BYTE *)this + 120) & 0x30) == 0)
  {
    WebCore::RenderTable::paintBoxDecorations(this, a2, a3);
  }
  if (v6)
  {
    switch(v6)
    {
      case 0x2000u:
        v47 = *((_QWORD *)a2 + 9);
        if (v47 && !(*(unsigned int (**)(_QWORD))(*(_QWORD *)v47 + 24))(*((_QWORD *)a2 + 9)))
          v47 = 0;
        WebCore::AccessibilityRegionContext::takeBounds(v47, (uint64_t)this, (unint64_t)*a3);
        break;
      case 0x400u:
        WebCore::RenderTable::paintMask((uint64_t)this, a2, (const WebCore::LayoutPoint *)a3);
        return;
      case 2u:
        v7 = 1;
        break;
      default:
        v7 = v6;
        break;
    }
    v8 = *((_OWORD *)a2 + 3);
    v78 = *((_OWORD *)a2 + 2);
    v79 = v8;
    v80 = *((_OWORD *)a2 + 4);
    v81 = *((_QWORD *)a2 + 10);
    v9 = *((_OWORD *)a2 + 1);
    v76 = *(_OWORD *)a2;
    v77 = v9;
    LOWORD(v77) = v7;
    if (*((_QWORD *)&v9 + 1) && *((WebCore::RenderTable **)&v9 + 1) == this)
      *((_QWORD *)&v77 + 1) = 0;
    v10 = *((unsigned __int8 *)this + 68);
    for (i = *((unsigned int *)this + 16); ; i = *(unsigned int *)(v13 + 47))
    {
      v12 = i | (v10 << 32);
      if (!v12)
        break;
      v13 = *(_QWORD *)(v12 + 8);
      if (!v13)
        break;
      if ((*(_BYTE *)(v13 + 45) & 4) != 0)
      {
LABEL_13:
        v14 = *(_QWORD *)(v13 + 144);
        if (!v14 || (*(_BYTE *)(v14 + 25) & 8) == 0)
        {
          v15 = *(unsigned __int8 *)(v13 + 46);
          if (v15 == 40 || v15 == 36)
          {
            v88 = (WTF *)WebCore::RenderBox::flipForWritingModeForChild(this, (const WebCore::RenderBox *)v13, (const WebCore::LayoutPoint *)a3);
            (*(void (**)(uint64_t, __int128 *, WTF **))(*(_QWORD *)v13 + 680))(v13, &v76, &v88);
          }
        }
        while (1)
        {
          v16 = *(unsigned int *)(v13 + 47);
          if (!(v16 | ((unint64_t)*(unsigned __int8 *)(v13 + 51) << 32)))
            goto LABEL_21;
          v13 = *(_QWORD *)((v16 | ((unint64_t)*(unsigned __int8 *)(v13 + 51) << 32)) + 8);
          if (!v13)
            goto LABEL_21;
          if ((*(_BYTE *)(v13 + 45) & 4) != 0)
            goto LABEL_13;
        }
      }
      v10 = *(unsigned __int8 *)(v13 + 51);
    }
LABEL_21:
    if ((*((_BYTE *)this + 124) & 4) != 0)
    {
      if (v7 == 16 || v7 == 64)
      {
LABEL_24:
        v17 = *(_QWORD *)(*((_QWORD *)this + 11) + 16);
        v18 = *(unsigned __int8 *)(v17 + 52);
        v19 = (v18 & 0xE) == 0 || (v18 & 0xF) == 0;
        if (!v19)
        {
          v51 = *(float *)(v17 + 48);
          if (((v51 < 3.0) & (v18 >> 4)) != 0 || v51 > 0.0)
            goto LABEL_40;
        }
        if ((*((_BYTE *)this + 45) & 1) == 0)
        {
          v20 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
          if (v20)
          {
            if ((*(_WORD *)(v20 + 28) & 8) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x19643D95CLL);
            }
            if ((*(_WORD *)(v20 + 30) & 1) != 0)
            {
              v21 = *(_QWORD *)(*(_QWORD *)(v20 + 40) + 8);
              if (*(_BYTE *)(v21 + 3382)
                || (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v21 + 1944) + 248) + 1149) & 0x20) != 0)
              {
LABEL_40:
                if ((*(_BYTE *)(*((_QWORD *)this + 13) + 239) & 4) == 0 && (*((_BYTE *)this + 120) & 0x30) == 0)
                {
                  v22 = *((_QWORD *)this + 20);
                  v88 = *a3;
                  v89 = v22;
                  WebCore::RenderElement::paintOutline(this, a2, (const WebCore::LayoutRect *)&v88);
                }
              }
            }
          }
        }
        return;
      }
      if (v7 != 1 || (*(_BYTE *)(*((_QWORD *)this + 13) + 239) & 4) != 0 || (*((_BYTE *)this + 120) & 0x30) != 0)
        return;
      if ((*((_BYTE *)this + 328) & 1) == 0)
      {
        v23 = (WTF **)((char *)this + 304);
        if (*((_DWORD *)this + 78))
        {
          v49 = *((_DWORD *)this + 79);
          if (v49)
          {
            WTF::VectorDestructor<true,WebCore::CollapsedBorderValue>::destruct(*((_QWORD **)this + 38), (_QWORD *)(*((_QWORD *)this + 38) + 24 * v49));
            *((_DWORD *)this + 79) = 0;
          }
          v50 = *v23;
          if (*v23)
          {
            *((_QWORD *)this + 38) = 0;
            *((_DWORD *)this + 78) = 0;
            WTF::fastFree(v50, a2);
          }
        }
        v24 = *((unsigned __int8 *)this + 68);
        for (j = *((unsigned int *)this + 16); ; j = *(unsigned int *)(v27 + 47))
        {
          v26 = j | (v24 << 32);
          if (!v26)
            break;
          v27 = *(_QWORD *)(v26 + 8);
          if (!v27)
            break;
          if (*(_BYTE *)(v27 + 46) == 40)
          {
LABEL_55:
            v28 = *(unsigned int *)(v27 + 64);
            if (v28 | ((unint64_t)*(unsigned __int8 *)(v27 + 68) << 32))
            {
              v29 = *(_QWORD *)((v28 | ((unint64_t)*(unsigned __int8 *)(v27 + 68) << 32)) + 8);
              if (v29)
              {
                if (*(_BYTE *)(v29 + 46) != 39)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19643DB70);
                }
                while (1)
                {
                  v30 = v29;
                  v31 = *(unsigned int *)(v29 + 64) | ((unint64_t)*(unsigned __int8 *)(v29 + 68) << 32);
                  if (v31)
                  {
                    v32 = *(_QWORD *)(v31 + 8);
                    if (v32)
                    {
                      if (*(_BYTE *)(v32 + 46) != 37)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19643DB50);
                      }
                      while (1)
                      {
                        WebCore::RenderTableCell::collapsedStartBorder((uint64_t)&v88, v32, 1);
                        WebCore::addBorderStyle((uint64_t)this + 304, (unint64_t)&v88);
                        if ((v89 & 0x8000000000000) != 0)
                        {
                          v52 = (unsigned int *)(v89 & 0xFFFFFFFFFFFFLL);
                          do
                          {
                            v53 = __ldaxr(v52);
                            v54 = v53 - 1;
                          }
                          while (__stlxr(v54, v52));
                          if (!v54)
                          {
                            atomic_store(1u, v52);
                            WTF::fastFree((WTF *)v52, v33);
                          }
                        }
                        WebCore::RenderTableCell::collapsedEndBorder((uint64_t)v86, (WebCore::RenderTableCell *)v32, 1);
                        WebCore::addBorderStyle((uint64_t)this + 304, (unint64_t)v86);
                        if ((v87 & 0x8000000000000) != 0)
                        {
                          v55 = (unsigned int *)(v87 & 0xFFFFFFFFFFFFLL);
                          do
                          {
                            v56 = __ldaxr(v55);
                            v57 = v56 - 1;
                          }
                          while (__stlxr(v57, v55));
                          if (!v57)
                          {
                            atomic_store(1u, v55);
                            WTF::fastFree((WTF *)v55, v34);
                          }
                        }
                        WebCore::RenderTableCell::collapsedBeforeBorder((uint64_t)v84, v32, 1);
                        WebCore::addBorderStyle((uint64_t)this + 304, (unint64_t)v84);
                        if ((v85 & 0x8000000000000) != 0)
                        {
                          v58 = (unsigned int *)(v85 & 0xFFFFFFFFFFFFLL);
                          do
                          {
                            v59 = __ldaxr(v58);
                            v60 = v59 - 1;
                          }
                          while (__stlxr(v60, v58));
                          if (!v60)
                          {
                            atomic_store(1u, v58);
                            WTF::fastFree((WTF *)v58, v35);
                          }
                        }
                        WebCore::RenderTableCell::collapsedAfterBorder((uint64_t)v82, v32, 1);
                        WebCore::addBorderStyle((uint64_t)this + 304, (unint64_t)v82);
                        if ((v83 & 0x8000000000000) != 0)
                        {
                          v61 = (unsigned int *)(v83 & 0xFFFFFFFFFFFFLL);
                          do
                          {
                            v62 = __ldaxr(v61);
                            v63 = v62 - 1;
                          }
                          while (__stlxr(v63, v61));
                          if (!v63)
                          {
                            atomic_store(1u, v61);
                            WTF::fastFree((WTF *)v61, v36);
                          }
                        }
                        v37 = *(unsigned int *)(v32 + 47);
                        if (!(v37 | ((unint64_t)*(unsigned __int8 *)(v32 + 51) << 32)))
                          break;
                        v32 = *(_QWORD *)((v37 | ((unint64_t)*(unsigned __int8 *)(v32 + 51) << 32)) + 8);
                        if (!v32)
                          break;
                        if (*(_BYTE *)(v32 + 46) != 37)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x19643DB30);
                        }
                      }
                    }
                  }
                  v38 = *(unsigned int *)(v30 + 47);
                  if (!(v38 | ((unint64_t)*(unsigned __int8 *)(v30 + 51) << 32)))
                    break;
                  v29 = *(_QWORD *)((v38 | ((unint64_t)*(unsigned __int8 *)(v30 + 51) << 32)) + 8);
                  if (!v29)
                    break;
                  if (*(_BYTE *)(v29 + 46) != 39)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19643DB90);
                  }
                }
              }
            }
            while (1)
            {
              v39 = *(unsigned int *)(v27 + 47);
              if (!(v39 | ((unint64_t)*(unsigned __int8 *)(v27 + 51) << 32)))
                goto LABEL_80;
              v27 = *(_QWORD *)((v39 | ((unint64_t)*(unsigned __int8 *)(v27 + 51) << 32)) + 8);
              if (!v27)
                goto LABEL_80;
              if (*(_BYTE *)(v27 + 46) == 40)
                goto LABEL_55;
            }
          }
          v24 = *(unsigned __int8 *)(v27 + 51);
        }
LABEL_80:
        qsort(*((void **)this + 38), *((unsigned int *)this + 79), 0x18uLL, (int (__cdecl *)(const void *, const void *))WebCore::compareBorderValuesForQSort);
        *((_BYTE *)this + 328) |= 1u;
      }
      LOWORD(v77) = 256;
      v40 = *((unsigned int *)this + 79);
      if ((_DWORD)v40)
      {
        for (k = 0; k != v40; ++k)
        {
          if (k >= *((unsigned int *)this + 79))
          {
            __break(0xC471u);
            JUMPOUT(0x19643DC28);
          }
          *((_QWORD *)this + 40) = *((_QWORD *)this + 38) + 24 * k;
          if ((*((_BYTE *)this + 328) & 8) != 0)
          {
            v48 = k;
            WebCore::RenderTable::recalcSections(this, a2);
            k = v48;
          }
          v42 = *((_QWORD *)this + 35);
          if (v42 && (v46 = *(_QWORD *)(v42 + 8)) != 0)
          {
            do
            {
LABEL_135:
              v66 = k;
              v88 = (WTF *)WebCore::RenderBox::flipForWritingModeForChild(this, (const WebCore::RenderBox *)v46, (const WebCore::LayoutPoint *)a3);
              WebCore::RenderTableSection::paint((WebCore::RenderTableSection *)v46, (WebCore::PaintInfo *)&v76, (const WebCore::LayoutPoint *)&v88);
              if ((*((_BYTE *)this + 328) & 8) != 0)
                WebCore::RenderTable::recalcSections(this, a2);
              v67 = *((_QWORD *)this + 34);
              if (v67)
                v64 = *(_QWORD *)(v67 + 8);
              else
                v64 = 0;
              v19 = v64 == v46;
              k = v66;
              if (v19)
                break;
              v68 = *((_QWORD *)this + 35);
              v65 = v68 ? *(_QWORD *)(v68 + 8) : 0;
              if (v65 == v46)
              {
                v69 = *((unsigned __int8 *)this + 75);
                v70 = *(unsigned int *)((char *)this + 71);
              }
              else
              {
                v69 = *(unsigned __int8 *)(v46 + 44);
                v70 = *(unsigned int *)(v46 + 40);
              }
              v71 = v70 | (v69 << 32);
              if (v71 && (v46 = *(_QWORD *)(v71 + 8)) != 0)
              {
                if (v67)
                {
                  if (v68)
                  {
                    while (*(_BYTE *)(v46 + 46) != 40 || *(_QWORD *)(v67 + 8) == v46 || *(_QWORD *)(v68 + 8) == v46)
                    {
                      v75 = *(unsigned int *)(v46 + 40);
                      if (v75 | ((unint64_t)*(unsigned __int8 *)(v46 + 44) << 32))
                      {
                        v46 = *(_QWORD *)((v75 | ((unint64_t)*(unsigned __int8 *)(v46 + 44) << 32)) + 8);
                        if (v46)
                          continue;
                      }
                      goto LABEL_146;
                    }
                  }
                  else
                  {
                    while (*(_BYTE *)(v46 + 46) != 40 || *(_QWORD *)(v67 + 8) == v46)
                    {
                      v73 = *(unsigned int *)(v46 + 40);
                      if (v73 | ((unint64_t)*(unsigned __int8 *)(v46 + 44) << 32))
                      {
                        v46 = *(_QWORD *)((v73 | ((unint64_t)*(unsigned __int8 *)(v46 + 44) << 32)) + 8);
                        if (v46)
                          continue;
                      }
                      goto LABEL_146;
                    }
                  }
                }
                else if (v68)
                {
                  while (*(_BYTE *)(v46 + 46) != 40 || *(_QWORD *)(v68 + 8) == v46)
                  {
                    v74 = *(unsigned int *)(v46 + 40);
                    if (v74 | ((unint64_t)*(unsigned __int8 *)(v46 + 44) << 32))
                    {
                      v46 = *(_QWORD *)((v74 | ((unint64_t)*(unsigned __int8 *)(v46 + 44) << 32)) + 8);
                      if (v46)
                        continue;
                    }
                    goto LABEL_146;
                  }
                }
                else
                {
                  while (*(_BYTE *)(v46 + 46) != 40)
                  {
                    v72 = *(unsigned int *)(v46 + 40);
                    if (v72 | ((unint64_t)*(unsigned __int8 *)(v46 + 44) << 32))
                    {
                      v46 = *(_QWORD *)((v72 | ((unint64_t)*(unsigned __int8 *)(v46 + 44) << 32)) + 8);
                      if (v46)
                        continue;
                    }
                    goto LABEL_146;
                  }
                }
              }
              else
              {
LABEL_146:
                k = v66;
                if (!v67)
                  break;
                v46 = *(_QWORD *)(v67 + 8);
              }
              k = v66;
            }
            while (v46);
          }
          else
          {
            v43 = *((unsigned __int8 *)this + 75);
            for (m = *(unsigned int *)((char *)this + 71); ; m = *(unsigned int *)(v46 + 40))
            {
              v45 = m | (v43 << 32);
              if (!v45)
                break;
              v46 = *(_QWORD *)(v45 + 8);
              if (!v46)
                break;
              if (*(_BYTE *)(v46 + 46) == 40)
                goto LABEL_135;
              v43 = *(unsigned __int8 *)(v46 + 44);
            }
          }
        }
      }
      *((_QWORD *)this + 40) = 0;
    }
    if (v7 != 64 && v7 != 16)
      return;
    goto LABEL_24;
  }
}

void WebCore::RenderTable::paintBoxDecorations(WebCore::RenderTable *this, WebCore::PaintInfo *a2, WTF **a3)
{
  WebCore::RenderTable *v3;
  BOOL v4;
  WTF *v7;
  int v8;
  BOOL ShouldBeAppliedToBackground;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)();
  uint64_t v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[6];
  unsigned int *v20[2];
  uint64_t v21;
  unsigned int *v22[2];
  WTF *v23[2];
  char v24;

  v3 = (WebCore::RenderTable *)*((_QWORD *)a2 + 3);
  if (v3)
    v4 = v3 == this;
  else
    v4 = 1;
  if (v4)
  {
    v7 = (WTF *)*((_QWORD *)this + 20);
    v23[0] = *a3;
    v23[1] = v7;
    (*(void (**)(WebCore::RenderTable *, WTF **))(*(_QWORD *)this + 1576))(this, v23);
    v22[0] = (unsigned int *)this;
    v22[1] = (unsigned int *)a2;
    v8 = WebCore::RenderBox::determineBackgroundBleedAvoidance(this, *((WebCore::GraphicsContext **)a2 + 10));
    v19[0] = v23[0];
    v20[1] = 0;
    v20[0] = 0;
    v21 = 1;
    ShouldBeAppliedToBackground = WebCore::BackgroundPainter::boxShadowShouldBeAppliedToBackground((uint64_t)this, (uint64_t)v19, v8, (WebCore::InlineIterator::BoxIterator *)v20);
    if ((_DWORD)v21 != -1)
      ((void (*)(char *, unsigned int **))off_1E34339A0[v21])(&v24, v20);
    if (!ShouldBeAppliedToBackground)
      WebCore::BackgroundPainter::paintBoxShadow(v22, (const WebCore::LayoutRect *)v23, (uint64_t)this + 80, 0, (const WebCore::LayoutSize *)1, 1);
    v10 = *((_QWORD *)a2 + 10);
    if (v8 == 2)
    {
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v10 + 96))(*((_QWORD *)a2 + 10), 1);
      v13 = *((_QWORD *)a2 + 10);
      WebCore::RenderStyle::getRoundedBorderFor((WebCore::RenderTable *)((char *)this + 80), (const WebCore::LayoutRect *)v23, (const WebCore::LayoutSize *)1, 1, (uint64_t)v19);
      v14 = WebCore::Document::deviceScaleFactor(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3)
                                                                                               + 8)
                                                                                   + 40)
                                                                       + 8));
      WebCore::RoundedRect::pixelSnappedRoundedRectForPainting((WebCore::RoundedRect *)v19, v14, (uint64_t)v20);
      (*(void (**)(uint64_t, unsigned int **))(*(_QWORD *)v13 + 464))(v13, v20);
      (*(void (**)(_QWORD, float))(**((_QWORD **)a2 + 10) + 592))(*((_QWORD *)a2 + 10), 1.0);
    }
    WebCore::BackgroundPainter::paintBackground((const WebCore::CachedImageClient *)v22, v23, v8);
    WebCore::BackgroundPainter::paintBoxShadow(v22, (const WebCore::LayoutRect *)v23, (uint64_t)this + 80, 1, (const WebCore::LayoutSize *)1, 1);
    v11 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
    if (*(float *)(v11 + 120) != 0.0 && (*(_BYTE *)(v11 + 124) & 0xF) != 0)
    {
      if (!*(_DWORD *)(v11 + 112))
      {
        v15 = *(_QWORD *)(v11 + 104);
        if ((v15 & 0x4000000000000) != 0)
        {
          if ((v15 & 0x8000000000000) != 0)
          {
            if (*(float *)((v15 & 0xFFFFFFFFFFFFLL) + 0x10) <= 0.0)
              goto LABEL_14;
          }
          else if (!*(_QWORD *)(v11 + 104))
          {
            goto LABEL_14;
          }
        }
      }
      if ((*(_BYTE *)(v11 + 124) & 0xF) != 1)
        goto LABEL_24;
    }
LABEL_14:
    if (*(float *)(v11 + 144) != 0.0 && (*(_BYTE *)(v11 + 148) & 0xF) != 0)
    {
      if (!*(_DWORD *)(v11 + 136))
      {
        v16 = *(_QWORD *)(v11 + 128);
        if ((v16 & 0x4000000000000) != 0)
        {
          if ((v16 & 0x8000000000000) != 0)
          {
            if (*(float *)((v16 & 0xFFFFFFFFFFFFLL) + 0x10) <= 0.0)
              goto LABEL_16;
          }
          else if (!*(_QWORD *)(v11 + 128))
          {
            goto LABEL_16;
          }
        }
      }
      if ((*(_BYTE *)(v11 + 148) & 0xF) != 1)
        goto LABEL_24;
    }
LABEL_16:
    if (*(float *)(v11 + 168) != 0.0 && (*(_BYTE *)(v11 + 172) & 0xF) != 0)
    {
      if (!*(_DWORD *)(v11 + 160))
      {
        v17 = *(_QWORD *)(v11 + 152);
        if ((v17 & 0x4000000000000) != 0)
        {
          if ((v17 & 0x8000000000000) != 0)
          {
            if (*(float *)((v17 & 0xFFFFFFFFFFFFLL) + 0x10) <= 0.0)
              goto LABEL_18;
          }
          else if (!*(_QWORD *)(v11 + 152))
          {
            goto LABEL_18;
          }
        }
      }
      if ((*(_BYTE *)(v11 + 172) & 0xF) != 1)
        goto LABEL_24;
    }
LABEL_18:
    if (*(float *)(v11 + 192) == 0.0 || (*(_BYTE *)(v11 + 196) & 0xF) == 0)
      goto LABEL_20;
    if (!*(_DWORD *)(v11 + 184))
    {
      v18 = *(_QWORD *)(v11 + 176);
      if ((v18 & 0x4000000000000) != 0)
      {
        if ((v18 & 0x8000000000000) != 0)
        {
          if (*(float *)((v18 & 0xFFFFFFFFFFFFLL) + 0x10) <= 0.0)
            goto LABEL_20;
        }
        else if (!*(_QWORD *)(v11 + 176))
        {
          goto LABEL_20;
        }
      }
    }
    if ((*(_BYTE *)(v11 + 196) & 0xF) != 1)
    {
LABEL_24:
      if ((*((_BYTE *)this + 124) & 4) == 0)
      {
        WebCore::BackgroundPainter::BackgroundPainter(v20, (uint64_t)this, (uint64_t)a2);
        WebCore::BorderPainter::paintBorder(v20, (int *)v23, (uint64_t)this + 80, 0, (const WebCore::LayoutSize *)1, 1);
      }
LABEL_26:
      if (v8 == 2)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)a2 + 10) + 608))(*((_QWORD *)a2 + 10));
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 104))(v10, 1);
      }
      return;
    }
LABEL_20:
    if (*(_QWORD *)(*(_QWORD *)(v11 + 200) + 8))
      v12 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
    else
      v12 = 0;
    if (!v12)
      goto LABEL_26;
    goto LABEL_24;
  }
}

uint64_t WebCore::RenderTable::paintMask(uint64_t this, WebCore::PaintInfo *a2, const WebCore::LayoutPoint *a3)
{
  WebCore::RenderBox *v3;
  uint64_t v5;
  _QWORD v6[2];

  if ((*(_BYTE *)(*(_QWORD *)(this + 104) + 239) & 4) == 0)
  {
    v3 = (WebCore::RenderBox *)this;
    if ((*(_BYTE *)(this + 120) & 0x30) == 0 && *((_WORD *)a2 + 8) == 1024)
    {
      v5 = *(_QWORD *)(this + 160);
      v6[0] = *(_QWORD *)a3;
      v6[1] = v5;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)this + 1576))(this, v6);
      return WebCore::RenderBox::paintMaskImages(v3, a2, (const WebCore::LayoutRect *)v6);
    }
  }
  return this;
}

void WebCore::RenderTable::adjustBorderBoxRectForPainting(WebCore::RenderBlock *this, WebCore::LayoutRect *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  BOOL v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  _BOOL4 v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  int v30;
  int v31;
  unsigned int v32;

  if (*((_DWORD *)this + 61))
  {
    v2 = 0;
    v3 = *(_DWORD *)a2;
    v4 = *((_QWORD *)this + 29);
    while (2)
    {
      v5 = *(_QWORD *)(v4 + 8 * v2);
      if (v5)
        v6 = *(_DWORD **)(v5 + 8);
      else
        v6 = 0;
      v7 = ((v6[31] >> 13) & 6u) - 2 >= 4;
      v8 = v6 + 40;
      v9 = v6 + 41;
      if (v7)
        v10 = v9;
      else
        v10 = v8;
      v11 = *(_QWORD *)(v5 + 8);
      v12 = (unsigned __int16)*(_DWORD *)(v11 + 124) >> 13;
      if ((v12 - 1) > 4)
        v13 = 0;
      else
        v13 = qword_1969FCEE8[v12 - 1];
      v14 = *v10;
      v15 = *(_DWORD *)(v11 + 168 + 4 * v13);
      v16 = __OFADD__(v14, v15);
      v17 = v14 + v15;
      v18 = (v14 >> 31) + 0x7FFFFFFF;
      if (!v16)
        v18 = v17;
      v19 = ((unsigned __int16)*(_DWORD *)(v11 + 124) >> 13) - 1;
      if (v19 > 4)
        v20 = 2;
      else
        v20 = qword_1969FCF10[v19];
      v21 = *(_DWORD *)(v11 + 168 + 4 * v20);
      v16 = __OFADD__(v18, v21);
      v22 = v18 + v21;
      if (v16)
        v22 = (v18 >> 31) + 0x7FFFFFFF;
      v23 = *(_DWORD *)(v11 + 120) & 6;
      v24 = v23 != 2;
      switch((unsigned __int16)*((_DWORD *)this + 31) >> 13)
      {
        case 1:
          v24 = v23 == 2;
          goto LABEL_22;
        case 2:
        case 4:
          goto LABEL_32;
        case 3:
        case 5:
          v24 = v23 == 2;
          goto LABEL_32;
        default:
          if (((unsigned __int16)*((_DWORD *)this + 31) >> 13) - 2 < 4)
          {
LABEL_32:
            v29 = *((_DWORD *)a2 + 2);
            v16 = __OFSUB__(v29, v22);
            v30 = v29 - v22;
            v31 = (v29 >> 31) + 0x7FFFFFFF;
            if (!v16)
              v31 = v30;
            *((_DWORD *)a2 + 2) = v31;
            if (v24)
            {
              v16 = __OFADD__(v3, v22);
              v32 = v3 + v22;
              if (v16)
                v3 = (v3 >> 31) + 0x7FFFFFFF;
              else
                v3 = v32;
              *(_DWORD *)a2 = v3;
            }
          }
          else
          {
LABEL_22:
            v25 = *((_DWORD *)a2 + 3);
            v26 = v25 - v22;
            if (__OFSUB__(v25, v22))
              v26 = (v25 >> 31) + 0x7FFFFFFF;
            *((_DWORD *)a2 + 3) = v26;
            if (v24)
            {
              *(_DWORD *)a2 = v3;
              v27 = *((_DWORD *)a2 + 1);
              v16 = __OFADD__(v27, v22);
              v28 = v27 + v22;
              if (v16)
                v28 = (v27 >> 31) + 0x7FFFFFFF;
              *((_DWORD *)a2 + 1) = v28;
            }
          }
          if (++v2 < (unint64_t)*((unsigned int *)this + 61))
            continue;
          goto LABEL_2;
      }
    }
  }
LABEL_2:
  WebCore::RenderBlock::adjustBorderBoxRectForPainting(this, a2);
}

uint64_t WebCore::RenderTable::computeIntrinsicLogicalWidths(WebCore::RenderTable *this, void *a2, uint64_t a3)
{
  if ((*((_BYTE *)this + 328) & 8) != 0)
    WebCore::RenderTable::recalcSections(this, a2);
  *((_DWORD *)this + 85) = WebCore::RenderTable::calcBorderStart(this);
  *((_DWORD *)this + 86) = WebCore::RenderTable::calcBorderEnd(this);
  return (*(uint64_t (**)(_QWORD, void *, uint64_t, uint64_t))(**((_QWORD **)this + 37) + 16))(*((_QWORD *)this + 37), a2, a3, 1);
}

uint64_t WebCore::RenderTable::computeIntrinsicLogicalWidths(WebCore::RenderTable *this, WebCore::LayoutUnit *a2, WebCore::LayoutUnit *a3)
{
  if ((*((_BYTE *)this + 328) & 8) != 0)
    WebCore::RenderTable::recalcSections(this, a2);
  *((_DWORD *)this + 85) = WebCore::RenderTable::calcBorderStart(this);
  *((_DWORD *)this + 86) = WebCore::RenderTable::calcBorderEnd(this);
  return (*(uint64_t (**)(_QWORD, WebCore::LayoutUnit *, WebCore::LayoutUnit *, _QWORD))(**((_QWORD **)this + 37)
                                                                                                 + 16))(*((_QWORD *)this + 37), a2, a3, 0);
}

uint64_t WebCore::RenderTable::topNonEmptySection(WebCore::RenderTable *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *((_QWORD *)this + 34);
  if (!v1 || (v4 = *(_QWORD *)(v1 + 8)) == 0)
  {
    v2 = *((_QWORD *)this + 36);
    if (!v2 || (v4 = *(_QWORD *)(v2 + 8)) == 0)
    {
      v3 = *((_QWORD *)this + 35);
      if (!v3)
        return 0;
      v4 = *(_QWORD *)(v3 + 8);
      if (!v4)
        return v4;
    }
  }
  if (*(_DWORD *)(v4 + 212))
    return v4;
  return WebCore::RenderTable::sectionBelow((uint64_t)this, v4, 1);
}

uint64_t WebCore::RenderTable::splitColumn(WebCore::RenderTable *this, unsigned int a2, unsigned int a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  WebCore::RenderTable *v10;

  LODWORD(v8) = a3;
  result = WTF::Vector<WebCore::RenderTable::ColumnStruct,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::insert<WebCore::RenderTable::ColumnStruct>((uint64_t)this + 216, a2, &v8);
  if (*((_DWORD *)this + 57) <= a2 + 1)
  {
    __break(0xC471u);
  }
  else
  {
    *(_DWORD *)(*((_QWORD *)this + 27) + 4 * (a2 + 1)) -= a3;
    v10 = this;
    v8 = WebCore::RenderChildIteratorAdapter<WebCore::RenderTableSection>::begin((uint64_t *)&v10);
    for (i = v7; i; v7 = i)
    {
      if (!*(_BYTE *)(v7 + 282))
        WebCore::RenderTableSection::splitColumn(v7, a2, a3);
      WebCore::RenderChildIterator<WebCore::RenderTableSection>::operator++((uint64_t)&v8);
    }
    return WTF::Vector<WebCore::LayoutUnit,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)0>((uint64_t)this + 200, (*((_DWORD *)this + 57) + 1));
  }
  return result;
}

uint64_t WebCore::RenderTable::updateColumnCache(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  WTF *v15;
  WTF *v16;
  uint64_t v17;
  WTF **v18;
  WTF *v19;
  WTF *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  WTF **v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int v34;
  int j;
  unsigned int v36;
  WTF **v37;
  WTF *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  WTF *v52;
  WTF *v53;
  WTF *v54;
  uint64_t v55;
  int v56;

  v2 = *(unsigned __int8 *)(this + 68);
  for (i = *(unsigned int *)(this + 64); ; i = *(unsigned int *)(v4 + 47))
  {
    v5 = i | (v2 << 32);
    if (!v5)
      goto LABEL_6;
    v4 = *(_QWORD *)(v5 + 8);
    if (!v4)
      goto LABEL_6;
    if (*(_BYTE *)(v4 + 46) == 38)
      break;
    v2 = *(unsigned __int8 *)(v4 + 51);
  }
  v6 = 0;
  v7 = this;
  v8 = (uint64_t *)(this + 264);
LABEL_8:
  while (2)
  {
    v9 = *(unsigned __int8 *)(v4 + 68);
    v10 = *(unsigned int *)(v4 + 64) | (unint64_t)(v9 << 32);
    if (v10 && *(_QWORD *)((*(unsigned int *)(v4 + 64) | (unint64_t)(v9 << 32)) + 8))
      goto LABEL_64;
    v11 = *(unsigned int *)(v7 + 260);
    if ((_DWORD)v11 != *(_DWORD *)(v7 + 256))
    {
      v21 = *(_QWORD *)(v7 + 248);
      v22 = *(_QWORD *)(v4 + 8);
      if (!v22)
      {
        v22 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v22 = 1;
        *(_QWORD *)(v22 + 8) = v4;
        v53 = *(WTF **)(v4 + 8);
        *(_QWORD *)(v4 + 8) = v22;
        if (v53)
        {
          if (*(_DWORD *)v53 == 1)
          {
            WTF::fastFree(v53, a2);
            v22 = *(_QWORD *)(v4 + 8);
            if (!v22)
              goto LABEL_28;
          }
          else
          {
            --*(_DWORD *)v53;
          }
        }
      }
      ++*(_DWORD *)v22;
LABEL_28:
      *(_QWORD *)(v21 + 8 * v11) = v22;
      goto LABEL_33;
    }
    v12 = v11 + (v11 >> 2);
    if (v12 >= 0x10)
      v13 = v12 + 1;
    else
      v13 = 16;
    if (v13 <= v11 + 1)
      v14 = v11 + 1;
    else
      v14 = v13;
    if (v14 >> 29)
    {
LABEL_103:
      __break(0xC471u);
      JUMPOUT(0x19643EB14);
    }
    v15 = *(WTF **)(v7 + 248);
    v16 = (WTF *)WTF::fastMalloc((WTF *)(8 * v14));
    *(_DWORD *)(v7 + 256) = v14;
    *(_QWORD *)(v7 + 248) = v16;
    if ((_DWORD)v11)
    {
      v17 = 8 * v11;
      v18 = (WTF **)v15;
      do
      {
        v19 = *v18;
        *v18 = 0;
        *(_QWORD *)v16 = v19;
        v20 = *v18;
        *v18 = 0;
        if (v20)
        {
          if (*(_DWORD *)v20 == 1)
            WTF::fastFree(v20, a2);
          else
            --*(_DWORD *)v20;
        }
        v16 = (WTF *)((char *)v16 + 8);
        ++v18;
        v17 -= 8;
      }
      while (v17);
      v16 = *(WTF **)(v7 + 248);
    }
    if (v15)
    {
      if (v16 == v15)
      {
        *(_QWORD *)(v7 + 248) = 0;
        *(_DWORD *)(v7 + 256) = 0;
      }
      WTF::fastFree(v15, a2);
      v16 = *(WTF **)(v7 + 248);
    }
    v23 = *(unsigned int *)(v7 + 260);
    v24 = *(_QWORD *)(v4 + 8);
    if (!v24)
    {
      v24 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v24 = 1;
      *(_QWORD *)(v24 + 8) = v4;
      v54 = *(WTF **)(v4 + 8);
      *(_QWORD *)(v4 + 8) = v24;
      if (v54)
      {
        if (*(_DWORD *)v54 == 1)
        {
          WTF::fastFree(v54, a2);
          v24 = *(_QWORD *)(v4 + 8);
          if (!v24)
            goto LABEL_32;
        }
        else
        {
          --*(_DWORD *)v54;
        }
      }
    }
    ++*(_DWORD *)v24;
LABEL_32:
    *((_QWORD *)v16 + v23) = v24;
LABEL_33:
    ++*(_DWORD *)(v7 + 260);
    v25 = *(WTF **)(v4 + 8);
    if (!v25)
    {
      v25 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v25 = 1;
      *((_QWORD *)v25 + 1) = v4;
      v52 = *(WTF **)(v4 + 8);
      *(_QWORD *)(v4 + 8) = v25;
      if (v52)
      {
        if (*(_DWORD *)v52 == 1)
        {
          WTF::fastFree(v52, a2);
          v25 = *(WTF **)(v4 + 8);
        }
        else
        {
          --*(_DWORD *)v52;
        }
      }
    }
    ++*(_DWORD *)v25;
    LODWORD(v26) = v6;
    if ((*(_BYTE *)(v7 + 328) & 0x40) != 0)
    {
      v55 = *(unsigned int *)(v7 + 228);
      if ((_DWORD)v55)
      {
        v26 = 0;
        v56 = 0;
        while (1)
        {
          v56 += *(_DWORD *)(*(_QWORD *)(v7 + 216) + 4 * v26);
          if (v56 - 1 >= v6)
            break;
          if (v55 == ++v26)
          {
            LODWORD(v26) = *(_DWORD *)(v7 + 228);
            break;
          }
        }
      }
      else
      {
        LODWORD(v26) = 0;
      }
    }
    v27 = *v8;
    if (*v8
      || (WTF::HashTable<WTF::WeakRef<WebCore::RenderTableCol const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderTableCol const,WTF::SingleThreadWeakPtrImpl>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderTableCol const,WTF::SingleThreadWeakPtrImpl>,unsigned int>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderTableCol const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderTableCol const,WTF::SingleThreadWeakPtrImpl>,unsigned int,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderTableCol const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderTableCol const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderTableCol const,WTF::SingleThreadWeakPtrImpl>>>::rehash(v8, 8u), (v27 = *v8) != 0))
    {
      v28 = *(_DWORD *)(v27 - 8);
    }
    else
    {
      v28 = 0;
    }
    v29 = 0;
    v30 = *((_QWORD *)v25 + 1);
    v31 = (~(v30 << 32) + v30) ^ ((unint64_t)(~(v30 << 32) + v30) >> 22);
    v32 = 9 * ((v31 + ~(v31 << 13)) ^ ((v31 + ~(v31 << 13)) >> 8));
    v33 = (v32 ^ (v32 >> 15)) + ~((v32 ^ (v32 >> 15)) << 27);
    v34 = (v33 >> 31) ^ v33;
    for (j = 1; ; ++j)
    {
      v36 = v34 & v28;
      v37 = (WTF **)(v27 + 16 * v36);
      v38 = *v37;
      if (*v37 != (WTF *)-1)
        break;
      v29 = (WTF **)(v27 + 16 * v36);
LABEL_44:
      v34 = j + v36;
    }
    if (!v38)
    {
      if (v29)
      {
        *v29 = 0;
        v29[1] = 0;
        --*(_DWORD *)(*v8 - 16);
        *v29 = v25;
      }
      else
      {
        *v37 = v25;
        v29 = (WTF **)(v27 + 16 * v36);
      }
      *((_DWORD *)v29 + 2) = v26;
      v39 = *v8;
      if (*v8)
        v40 = *(_DWORD *)(v39 - 12) + 1;
      else
        v40 = 1;
      *(_DWORD *)(v39 - 12) = v40;
      v41 = *v8;
      if (*v8)
        v42 = *(_DWORD *)(v41 - 12);
      else
        v42 = 0;
      v43 = (*(_DWORD *)(v41 - 16) + v42);
      v44 = *(unsigned int *)(v41 - 4);
      if (v44 > 0x400)
      {
        if (v44 > 2 * v43)
          goto LABEL_63;
      }
      else
      {
        if (3 * v44 > 4 * v43)
          goto LABEL_63;
        if (!(_DWORD)v44)
        {
          v45 = 8;
          goto LABEL_62;
        }
      }
      v45 = (_DWORD)v44 << (6 * *(_DWORD *)(v41 - 12) >= (2 * v44));
LABEL_62:
      WTF::HashTable<WTF::WeakRef<WebCore::RenderTableCol const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderTableCol const,WTF::SingleThreadWeakPtrImpl>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderTableCol const,WTF::SingleThreadWeakPtrImpl>,unsigned int>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderTableCol const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderTableCol const,WTF::SingleThreadWeakPtrImpl>,unsigned int,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderTableCol const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderTableCol const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderTableCol const,WTF::SingleThreadWeakPtrImpl>>>::rehash(v8, v45);
      goto LABEL_63;
    }
    if (*((_QWORD *)v38 + 1) != v30)
      goto LABEL_44;
    if (*(_DWORD *)v25 == 1)
      WTF::fastFree(v25, a2);
    else
      --*(_DWORD *)v25;
LABEL_63:
    v6 += *(_DWORD *)(v4 + 200);
    v10 = *(unsigned int *)(v4 + 64) | ((unint64_t)*(unsigned __int8 *)(v4 + 68) << 32);
    if (v10)
    {
LABEL_64:
      v46 = *(_QWORD *)(v10 + 8);
      if (v46)
      {
        v4 = v46;
        if (*(_BYTE *)(v46 + 46) != 38)
          goto LABEL_103;
        continue;
      }
    }
    break;
  }
  v47 = *(unsigned int *)(v4 + 47);
  this = v7;
  if (v47 | ((unint64_t)*(unsigned __int8 *)(v4 + 51) << 32))
  {
    v48 = *(_QWORD *)((v47 | ((unint64_t)*(unsigned __int8 *)(v4 + 51) << 32)) + 8);
    if (v48)
    {
      while (1)
      {
        v4 = v48;
        if (*(_BYTE *)(v48 + 46) == 38)
          goto LABEL_8;
        v51 = *(unsigned int *)(v48 + 47) | ((unint64_t)*(unsigned __int8 *)(v48 + 51) << 32);
        this = v7;
        if (!v51)
          goto LABEL_6;
LABEL_99:
        v48 = *(_QWORD *)(v51 + 8);
        if (!v48)
          goto LABEL_6;
      }
    }
  }
  v49 = *(_QWORD *)(v4 + 32);
  if (v49)
  {
    v50 = *(_QWORD *)(v49 + 8);
    if (*(_BYTE *)(v50 + 46) == 38)
    {
      v51 = *(unsigned int *)(v50 + 47) | ((unint64_t)*(unsigned __int8 *)(v50 + 51) << 32);
      if (v51)
        goto LABEL_99;
    }
  }
LABEL_6:
  *(_BYTE *)(this + 328) |= 0x20u;
  return this;
}

uint64_t WebCore::RenderTable::effectiveIndexOfColumn(WebCore::RenderTable *this, const WebCore::RenderTableCol *a2)
{
  const WebCore::RenderTableCol *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  int i;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  v2 = a2;
  if ((*((_BYTE *)this + 328) & 0x20) == 0)
    WebCore::RenderTable::updateColumnCache((uint64_t)this, a2);
  v4 = *((unsigned int *)v2 + 16);
  if (v4 | ((unint64_t)*((unsigned __int8 *)v2 + 68) << 32)
    && (v5 = *(_QWORD *)((v4 | ((unint64_t)*((unsigned __int8 *)v2 + 68) << 32)) + 8)) != 0
    && (v2 = *(const WebCore::RenderTableCol **)((v4 | ((unint64_t)*((unsigned __int8 *)v2 + 68) << 32)) + 8),
        *(_BYTE *)(v5 + 46) != 38))
  {
    result = 105;
    __break(0xC471u);
  }
  else
  {
    v6 = *((_QWORD *)this + 33);
    if (!v6)
      return 0xFFFFFFFFLL;
    v7 = *(_DWORD *)(v6 - 8);
    v8 = ((unint64_t)v2 + ~((_QWORD)v2 << 32)) ^ (((unint64_t)v2 + ~((_QWORD)v2 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    for (i = 1; ; v11 = (v13 + i++) & v7)
    {
      v13 = v11;
      v14 = *(_QWORD *)(v6 + 16 * v11);
      if (v14 != -1)
      {
        if (!v14)
          return 0xFFFFFFFFLL;
        if (*(const WebCore::RenderTableCol **)(v14 + 8) == v2)
          break;
      }
    }
    if ((_DWORD)v13 != *(_DWORD *)(v6 - 4))
      return *(unsigned int *)(v6 + 16 * v13 + 8);
    else
      return 0xFFFFFFFFLL;
  }
  return result;
}

unint64_t WebCore::RenderTable::offsetTopForColumn(WebCore::RenderTable *this, const WebCore::RenderTableCol *a2)
{
  unint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  if (WebCore::RenderTable::effectiveIndexOfColumn(this, a2) >= *((_DWORD *)this + 57))
    return 0;
  result = *((unsigned int *)this + 87);
  if ((result & 0x80000000) != 0)
  {
    result = WebCore::RenderTable::topNonEmptySection(this);
    if (result)
    {
      v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 8) + 40) + 8) + 528);
      if (v4 && (v5 = *(_QWORD *)(v4 + 8)) != 0 && (v6 = *(_QWORD *)(v5 + 288)) != 0 && *(_BYTE *)(v6 + 1383))
      {
        v8 = result;
        v7 = WebCore::RenderBox::topLeftLocationWithFlipping((WebCore::RenderBox *)result);
        result = v8;
      }
      else
      {
        v7 = *(_QWORD *)(result + 152);
      }
      v9 = v7;
      result = WebCore::RenderBoxModelObject::adjustedPositionRelativeToOffsetParent((WebCore::RenderBoxModelObject *)result, (const WebCore::LayoutPoint *)&v9) >> 32;
    }
    *((_DWORD *)this + 87) = result;
  }
  return result;
}

uint64_t WebCore::RenderTable::offsetLeftForColumn(WebCore::RenderTable *this, const WebCore::RenderTableCol *a2)
{
  unsigned int v3;
  void *v4;
  unsigned int v5;
  int v6;
  BOOL v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  uint64_t result;
  WebCore::RenderStyle *v14;
  uint64_t v15;
  float v16;
  double v17;
  uint64_t v18;
  unsigned int v19;

  v3 = WebCore::RenderTable::effectiveIndexOfColumn(this, a2);
  if (v3 >= *((_DWORD *)this + 57))
    return 0;
  if (*((_DWORD *)this + 53) <= v3)
  {
    __break(0xC471u);
    JUMPOUT(0x19643EE34);
  }
  v5 = *(_DWORD *)(*((_QWORD *)this + 25) + 4 * v3);
  v6 = *((_DWORD *)this + 83);
  v7 = __OFADD__(v5, v6);
  v8 = v5 + v6;
  v9 = (v5 >> 31) + 0x7FFFFFFF;
  if (!v7)
    v9 = v8;
  v10 = *((_DWORD *)this + 31);
  v11 = (unsigned __int16)v10 >> 13;
  v19 = v9;
  switch((unsigned __int16)v10 >> 13)
  {
    case 2:
    case 4:
      if ((v10 & 4) != 0)
      {
        if ((*((_BYTE *)this + 328) & 8) != 0)
          WebCore::RenderTable::recalcSections(this, v4);
        v12 = WebCore::RenderTable::outerBorderBefore(this);
      }
      else
      {
        v12 = WebCore::RenderBlock::borderBefore(this);
      }
      goto LABEL_25;
    case 3:
    case 5:
      if ((v10 & 4) == 0)
      {
        v14 = (WebCore::RenderTable *)((char *)this + 80);
        if (v11 != 3)
        {
          if (v11 == 4)
          {
            v16 = WebCore::RenderStyle::borderRightWidth(v14);
LABEL_21:
            v17 = v16 * 64.0;
            if (v17 >= 2147483650.0)
            {
              v12 = 0x7FFFFFFF;
            }
            else if (v17 > -2147483650.0)
            {
              v12 = (int)v17;
            }
            else
            {
              v12 = 0x80000000;
            }
            goto LABEL_25;
          }
          if (v11 != 5)
          {
            v15 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
            v16 = 0.0;
            if ((*(_BYTE *)(v15 + 196) & 0xE) != 0)
            {
              v18 = *(_QWORD *)(v15 + 200);
              if (*(_BYTE *)(v18 + 5) && *(_BYTE *)(v18 + 68) == 4)
              {
                if (*(_BYTE *)(v18 + 70))
                  v16 = *(float *)(v18 + 64);
                else
                  v16 = (float)*(int *)(v18 + 64);
              }
              else
              {
                v16 = *(float *)(v15 + 192);
              }
            }
            goto LABEL_21;
          }
        }
        v16 = WebCore::RenderStyle::borderLeftWidth(v14);
        goto LABEL_21;
      }
      if ((*((_BYTE *)this + 328) & 8) != 0)
        WebCore::RenderTable::recalcSections(this, v4);
      v12 = WebCore::RenderTable::outerBorderAfter(this, v4);
LABEL_25:
      v9 = v19;
LABEL_8:
      v7 = __OFADD__(v9, v12);
      result = v9 + v12;
      if (v7)
        result = (v9 >> 31) + 0x7FFFFFFF;
      break;
    default:
      if ((*((_BYTE *)this + 123) & 4) != 0)
        v12 = *((_DWORD *)this + 86);
      else
        v12 = *((_DWORD *)this + 85);
      goto LABEL_8;
  }
  return result;
}

uint64_t WebCore::RenderTable::offsetWidthForColumn(WebCore::RenderTable *this, const WebCore::RenderTableCol *a2)
{
  const WebCore::RenderTableCol *v2;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  unsigned int v9;
  int v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  int v20;
  int v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const WebCore::RenderTableCol *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;

  v2 = a2;
  if (*((unsigned int *)a2 + 16) | ((unint64_t)*((unsigned __int8 *)a2 + 68) << 32)
    && (v4 = *(_QWORD *)((*((unsigned int *)a2 + 16) | ((unint64_t)*((unsigned __int8 *)a2 + 68) << 32)) + 8)) != 0)
  {
    if (*(_BYTE *)(v4 + 46) != 38)
    {
      __break(0xC471u);
      JUMPOUT(0x19643F144);
    }
    v5 = 1;
    v2 = *(const WebCore::RenderTableCol **)((*((unsigned int *)a2 + 16) | ((unint64_t)*((unsigned __int8 *)a2
                                                                                              + 68) << 32))
                                           + 8);
  }
  else
  {
    v5 = 0;
  }
  v6 = 0;
  v7 = *((unsigned int *)this + 57);
  v8 = *((_DWORD *)this + 83);
  while (1)
  {
    v9 = WebCore::RenderTable::effectiveIndexOfColumn(this, v2);
    v10 = *((_DWORD *)v2 + 50);
    if (v10)
      v11 = v9 >= v7;
    else
      v11 = 1;
    if (!v11)
    {
      v12 = *((unsigned int *)this + 53);
      v13 = v9;
      v14 = v9 + 1;
      if (v14 >= v12)
        goto LABEL_63;
      v15 = *((_QWORD *)this + 25);
      v16 = *(_DWORD *)(v15 + 4 * v14);
      v17 = *(_DWORD *)(v15 + 4 * v9);
      v18 = __OFSUB__(v16, v17);
      v19 = v16 - v17;
      if (v18)
        v19 = (v16 >> 31) + 0x7FFFFFFF;
      v18 = __OFSUB__(v19, v8);
      v20 = v19 - v8;
      v21 = (v19 >> 31) + 0x7FFFFFFF;
      if (!v18)
        v21 = v20;
      v18 = __OFADD__((_DWORD)v6, v21);
      v22 = v6 + v21;
      if (v18)
        v6 = (v6 >> 31) + 0x7FFFFFFF;
      else
        v6 = v22;
      v23 = *((unsigned int *)this + 57);
      if (v23 <= v9)
      {
LABEL_64:
        __break(0xC471u);
        JUMPOUT(0x19643F124);
      }
      v24 = *((_QWORD *)this + 27);
      v25 = v10 - *(_DWORD *)(v24 + 4 * v9);
      if (v25)
      {
        v6 = __OFADD__((_DWORD)v6, v8) ? (v6 >> 31) + 0x7FFFFFFF : (v6 + v8);
        if (v14 < v7)
        {
          v26 = v24 + 4;
          v27 = v15 + 8;
          while (v13 + 2 < v12)
          {
            v28 = *(_DWORD *)(v27 + 4 * v13);
            v18 = __OFSUB__(v28, v16);
            v29 = v28 - v16;
            if (v18)
              v29 = (v28 >> 31) + 0x7FFFFFFF;
            v18 = __OFSUB__(v29, v8);
            v30 = v29 - v8;
            v31 = (v29 >> 31) + 0x7FFFFFFF;
            if (!v18)
              v31 = v30;
            v18 = __OFADD__((_DWORD)v6, v31);
            v32 = v6 + v31;
            if (v18)
              v6 = (v6 >> 31) + 0x7FFFFFFF;
            else
              v6 = v32;
            if (v13 + 1 >= v23)
              goto LABEL_64;
            v25 -= *(_DWORD *)(v26 + 4 * v13);
            if (v25)
            {
              v6 = __OFADD__((_DWORD)v6, v8) ? (v6 >> 31) + 0x7FFFFFFF : (v6 + v8);
              ++v13;
              v16 = v28;
              if (v7 - 1 != v13)
                continue;
            }
            goto LABEL_42;
          }
LABEL_63:
          __break(0xC471u);
          JUMPOUT(0x19643F14CLL);
        }
      }
    }
LABEL_42:
    if (!v5)
      return v6;
    v33 = *((unsigned int *)v2 + 16);
    if (!(v33 | ((unint64_t)*((unsigned __int8 *)v2 + 68) << 32)))
      break;
    v34 = *(_QWORD *)((v33 | ((unint64_t)*((unsigned __int8 *)v2 + 68) << 32)) + 8);
    if (!v34)
      break;
    v2 = *(const WebCore::RenderTableCol **)((v33 | ((unint64_t)*((unsigned __int8 *)v2 + 68) << 32)) + 8);
    if (*(_BYTE *)(v34 + 46) != 38)
      goto LABEL_64;
LABEL_46:
    if ((*((_QWORD *)v2 + 12) & 0x1FLL) == 0xA)
      return v6;
    if (__OFADD__((_DWORD)v6, v8))
      v6 = (v6 >> 31) + 0x7FFFFFFF;
    else
      v6 = (v6 + v8);
  }
  v35 = *(unsigned int *)((char *)v2 + 47);
  if (v35 | ((unint64_t)*((unsigned __int8 *)v2 + 51) << 32)
    && (v36 = *(const WebCore::RenderTableCol **)((v35 | ((unint64_t)*((unsigned __int8 *)v2 + 51) << 32)) + 8)) != 0
    || (v37 = *((_QWORD *)v2 + 4)) != 0
    && (v38 = *(_QWORD *)(v37 + 8), *(_BYTE *)(v38 + 46) == 38)
    && (v39 = *(unsigned int *)(v38 + 47) | ((unint64_t)*(unsigned __int8 *)(v38 + 51) << 32)) != 0
    && (v36 = *(const WebCore::RenderTableCol **)(v39 + 8)) != 0)
  {
    v2 = v36;
    while (*((_BYTE *)v2 + 46) != 38)
    {
      v40 = *(unsigned int *)((char *)v2 + 47);
      if (v40 | ((unint64_t)*((unsigned __int8 *)v2 + 51) << 32))
      {
        v2 = *(const WebCore::RenderTableCol **)((v40 | ((unint64_t)*((unsigned __int8 *)v2 + 51) << 32)) + 8);
        if (v2)
          continue;
      }
      return v6;
    }
    goto LABEL_46;
  }
  return v6;
}

uint64_t WebCore::RenderTable::offsetHeightForColumn(WebCore::RenderTable *this, const WebCore::RenderTableCol *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (WebCore::RenderTable::effectiveIndexOfColumn(this, a2) >= *((_DWORD *)this + 57))
    return 0;
  v4 = *((unsigned int *)this + 88);
  if ((v4 & 0x80000000) != 0)
  {
    v5 = *((_QWORD *)this + 34);
    if (v5 && (v9 = *(_QWORD *)(v5 + 8)) != 0
      || (v6 = *((_QWORD *)this + 36)) != 0 && (v9 = *(_QWORD *)(v6 + 8)) != 0
      || (v7 = *((_QWORD *)this + 35)) != 0 && (v9 = *(_QWORD *)(v7 + 8)) != 0)
    {
      LODWORD(v4) = 0;
      while (1)
      {
        v10 = *(_DWORD *)(v9 + 164);
        v11 = __OFADD__((_DWORD)v4, v10);
        v12 = v4 + v10;
        if (v11)
          v4 = (v4 >> 31) + 0x7FFFFFFF;
        else
          v4 = v12;
        if ((*((_BYTE *)this + 328) & 8) != 0)
          WebCore::RenderTable::recalcSections(this, v3);
        v13 = *((_QWORD *)this + 35);
        v14 = v13 ? *(_QWORD *)(v13 + 8) : 0;
        if (v14 == v9)
          break;
        v15 = *((_QWORD *)this + 34);
        if (v15)
          v16 = *(_QWORD *)(v15 + 8);
        else
          v16 = 0;
        if (v16 == v9)
        {
          v17 = *((unsigned __int8 *)this + 68);
          v18 = *((unsigned int *)this + 16);
        }
        else
        {
          v17 = *(unsigned __int8 *)(v9 + 51);
          v18 = *(unsigned int *)(v9 + 47);
        }
        v19 = v18 | (v17 << 32);
        if (v19 && (v9 = *(_QWORD *)(v19 + 8)) != 0)
        {
          if (v15)
          {
            if (v13)
            {
              while (*(_BYTE *)(v9 + 46) != 40 || *(_QWORD *)(v15 + 8) == v9 || *(_QWORD *)(v13 + 8) == v9)
              {
                v23 = *(unsigned int *)(v9 + 47);
                if (v23 | ((unint64_t)*(unsigned __int8 *)(v9 + 51) << 32))
                {
                  v9 = *(_QWORD *)((v23 | ((unint64_t)*(unsigned __int8 *)(v9 + 51) << 32)) + 8);
                  if (v9)
                    continue;
                }
                goto LABEL_32;
              }
            }
            else
            {
              while (*(_BYTE *)(v9 + 46) != 40 || *(_QWORD *)(v15 + 8) == v9)
              {
                v21 = *(unsigned int *)(v9 + 47);
                if (v21 | ((unint64_t)*(unsigned __int8 *)(v9 + 51) << 32))
                {
                  v9 = *(_QWORD *)((v21 | ((unint64_t)*(unsigned __int8 *)(v9 + 51) << 32)) + 8);
                  if (v9)
                    continue;
                }
                goto LABEL_32;
              }
            }
          }
          else if (v13)
          {
            while (*(_BYTE *)(v9 + 46) != 40 || *(_QWORD *)(v13 + 8) == v9)
            {
              v22 = *(unsigned int *)(v9 + 47);
              if (v22 | ((unint64_t)*(unsigned __int8 *)(v9 + 51) << 32))
              {
                v9 = *(_QWORD *)((v22 | ((unint64_t)*(unsigned __int8 *)(v9 + 51) << 32)) + 8);
                if (v9)
                  continue;
              }
              goto LABEL_32;
            }
          }
          else
          {
            while (*(_BYTE *)(v9 + 46) != 40)
            {
              v20 = *(unsigned int *)(v9 + 47);
              if (v20 | ((unint64_t)*(unsigned __int8 *)(v9 + 51) << 32))
              {
                v9 = *(_QWORD *)((v20 | ((unint64_t)*(unsigned __int8 *)(v9 + 51) << 32)) + 8);
                if (v9)
                  continue;
              }
              goto LABEL_32;
            }
          }
        }
        else
        {
LABEL_32:
          if (!v13)
            break;
          v9 = *(_QWORD *)(v13 + 8);
          if (!v9)
            break;
        }
      }
    }
    else
    {
      v4 = 0;
    }
    *((_DWORD *)this + 88) = v4;
  }
  return v4;
}

uint64_t WebCore::RenderTable::slowColElement(WebCore::RenderTable *this, void *a2, BOOL *a3, BOOL *a4)
{
  unsigned int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  v6 = a2;
  if ((*((_BYTE *)this + 328) & 0x20) == 0)
    WebCore::RenderTable::updateColumnCache((uint64_t)this, a2);
  v8 = *((unsigned int *)this + 65);
  if (!(_DWORD)v8)
    return 0;
  v9 = 0;
  v10 = *((_QWORD *)this + 31);
  v11 = 8 * v8;
  while (1)
  {
    if (!*(_QWORD *)v10 || (result = *(_QWORD *)(*(_QWORD *)v10 + 8)) == 0)
    {
      v13 = v9;
      goto LABEL_10;
    }
    v13 = (*(_DWORD *)(result + 200) + v9);
    if (v13 > v6)
      break;
LABEL_10:
    v10 += 8;
    v9 = v13;
    v11 -= 8;
    if (!v11)
      return 0;
  }
  if (a3)
    *a3 = (_DWORD)v9 == v6;
  if (a4)
    *a4 = (_DWORD)v13 - 1 == v6;
  return result;
}

WTF *WTF::WeakPtr<WebCore::RenderTableSection,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>::clear(WTF **a1, void *a2)
{
  WTF *result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF *)WTF::fastFree(result, a2);
    else
      --*(_DWORD *)result;
  }
  return result;
}

uint64_t WebCore::CollapsedBorderValue::adjustedCollapsedBorderWidth(WebCore::CollapsedBorderValue *this, float a2, float a3)
{
  float v3;
  double v4;
  float v5;
  double v6;

  v3 = 1.0 / a3;
  if (!(_DWORD)this)
    v3 = 0.0;
  v4 = (float)((float)(v3 + a2) * 0.5) * 64.0;
  if (v4 >= 2147483650.0)
  {
    v5 = 2147500000.0;
  }
  else if (v4 <= -2147483650.0)
  {
    v5 = -2147500000.0;
  }
  else
  {
    v5 = (float)(int)v4;
  }
  v6 = (float)(floorf((float)(v5 * a3) * 0.015625) / a3) * 64.0;
  if (v6 >= 2147483650.0)
    return 0x7FFFFFFFLL;
  if (v6 <= -2147483650.0)
    return 0x80000000;
  return (int)v6;
}

uint64_t WebCore::RenderTable::baselinePosition(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  int v12;
  unsigned int v13;
  BOOL v14;
  unsigned int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  int v24;
  int v25;

  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1480))(a1);
  if ((v7 & 0xFF00000000) != 0)
  {
    v8 = v7;
    v9 = 1104;
    if (!a4)
      v9 = 1080;
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + v9))(a1);
    if (__OFADD__(v10, v8))
      return (v10 >> 31) + 0x7FFFFFFF;
    else
      return v10 + v8;
  }
  else if ((*(_BYTE *)(a1 + 20) & 2) != 0)
  {
    if (a4)
    {
      v12 = *(_DWORD *)(a1 + 160);
      v13 = *(_DWORD *)(a1 + 172);
      v14 = __OFADD__(v13, v12);
      v15 = v13 + v12;
      v16 = (v13 >> 31) + 0x7FFFFFFF;
      if (v14)
        v15 = v16;
      v17 = *(_DWORD *)(a1 + 180);
    }
    else
    {
      v22 = *(_DWORD *)(a1 + 164);
      v23 = *(_DWORD *)(a1 + 168);
      v14 = __OFADD__(v23, v22);
      v15 = v23 + v22;
      v24 = (v23 >> 31) + 0x7FFFFFFF;
      if (v14)
        v15 = v24;
      v17 = *(_DWORD *)(a1 + 176);
    }
    v14 = __OFADD__(v15, v17);
    v18 = v15 + v17;
    v19 = (v15 >> 31) + 0x7FFFFFFF;
    if (!v14)
      v19 = v18;
    v20 = ((int)(v19 - (v18 & 0xFFFFFFC0) + 32) >> 6) + v19 / 64;
    if (a2)
    {
      if (v20 >= 0)
        v25 = v20;
      else
        v25 = v20 + 1;
      v20 -= v25 >> 1;
    }
    v21 = v20 << 6;
    if (v20 < -33554432)
      v21 = 0x80000000;
    if (v20 <= 0x1FFFFFF)
      return v21;
    else
      return 0x7FFFFFFFLL;
  }
  else
  {
    return 0;
  }
}

uint64_t WebCore::RenderTable::inlineBlockBaseline()
{
  return 0;
}

uint64_t WebCore::RenderTable::firstLineBaseline(WebCore::RenderTable *this, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  BOOL v5;
  uint64_t result;
  uint64_t v8;
  unsigned int v9;
  int v10;
  BOOL v11;
  int v12;
  int v13;
  unint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  int v21;
  uint64_t v22;
  BOOL v23;

  v2 = *((_QWORD *)this + 4);
  if (!v2)
    goto LABEL_42;
  v2 = *(_QWORD *)(v2 + 8);
  if (!v2)
    goto LABEL_42;
  if (((*((_DWORD *)this + 31) ^ *(_DWORD *)(v2 + 124)) & 0xE000) != 0
    && ((*(char *)(v2 + 45) & 0x80000000) == 0 || (*((_BYTE *)this + 21) & 4) != 0))
  {
    goto LABEL_41;
  }
  v4 = *(_QWORD *)(*((_QWORD *)this + 11) + 40);
  v5 = (*(_BYTE *)(v4 + 642) & 3u) - 3 <= 0xFFFFFFFD && (*(_BYTE *)(v4 + 462) & 1) == 0;
  if (!v5 || (*(_DWORD *)(v4 + 636) & 0xC0000) != 0)
  {
    v21 = *((_DWORD *)this + 5);
    if ((v21 & 1) != 0)
      goto LABEL_40;
    if ((*((_BYTE *)this + 45) & 2) == 0)
      v2 = (uint64_t)this;
    v22 = *(_QWORD *)(v2 + 96);
    v23 = (v22 & 0x1Fu) > 0x19 || ((1 << (v22 & 0x1F)) & 0x3528029) == 0;
    if (!v23 && ((v21 & 2) != 0 || (v22 & 0x1F) != 0))
    {
LABEL_40:
      if ((*((_QWORD *)this + 12) & 0x1FLL) != 0x19
        && (*((unsigned __int8 *)this + 46) - 36 > 4 || (*((_BYTE *)this + 52) & 7) == 1))
      {
        goto LABEL_41;
      }
    }
  }
  if ((*((_BYTE *)this + 328) & 8) != 0)
    WebCore::RenderTable::recalcSections(this, a2);
  result = WebCore::RenderTable::topNonEmptySection(this);
  if (!result || (v8 = result, !*(_DWORD *)(result + 212)))
  {
LABEL_41:
    v2 = 0;
LABEL_42:
    v20 = 0;
    v19 = 0;
    return v2 | v19 | v20;
  }
  v9 = *(_DWORD *)(*(_QWORD *)(result + 200) + 24);
  if (!v9)
  {
    v14 = WebCore::RenderTableSection::baselineFromCellContentEdges(result, 4);
    if ((v14 & 0xFF00000000) != 0)
    {
LABEL_24:
      v15 = (unsigned int *)(v8 + 152);
      if (((*(_DWORD *)(v8 + 124) >> 13) & 6u) - 2 >= 4)
        v15 = (unsigned int *)(v8 + 156);
      v16 = *v15;
      v11 = __OFADD__(v16, (_DWORD)v14);
      v17 = v16 + v14;
      v18 = (v16 >> 31) + 0x7FFFFFFF;
      if (!v11)
        v18 = v17;
      v19 = v18 & 0xFFFFFF00;
      v20 = v18;
      v2 = 0x100000000;
      return v2 | v19 | v20;
    }
    goto LABEL_41;
  }
  if (*(_DWORD *)(result + 228))
  {
    v10 = **(_DWORD **)(result + 216);
    v11 = __OFADD__(v9, v10);
    v12 = v9 + v10;
    v13 = (v9 >> 31) + 0x7FFFFFFF;
    if (v11)
      LODWORD(v14) = v13;
    else
      LODWORD(v14) = v12;
    goto LABEL_24;
  }
  __break(0xC471u);
  return result;
}

void WebCore::RenderTable::lastLineBaseline(WebCore::RenderTable *this, void *a2)
{
  uint64_t v2;
  WebCore::RenderTable *v3;
  uint64_t v5;
  BOOL v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  int v14;
  uint64_t v15;
  BOOL v16;

  v2 = *((_QWORD *)this + 4);
  if (v2)
  {
    v3 = *(WebCore::RenderTable **)(v2 + 8);
    if (v3)
    {
      if (((*((_DWORD *)this + 31) ^ *((_DWORD *)v3 + 31)) & 0xE000) == 0)
      {
        v5 = *(_QWORD *)(*((_QWORD *)this + 11) + 40);
        v6 = (*(_BYTE *)(v5 + 642) & 3u) - 3 <= 0xFFFFFFFD && (*(_BYTE *)(v5 + 462) & 1) == 0;
        if (v6 && (*(_DWORD *)(v5 + 636) & 0xC0000) == 0)
          goto LABEL_47;
        v14 = *((_DWORD *)this + 5);
        if ((v14 & 1) == 0)
        {
          if ((*((_BYTE *)this + 45) & 2) == 0)
            v3 = this;
          v15 = *((_QWORD *)v3 + 12);
          v16 = (v15 & 0x1Fu) > 0x19 || ((1 << (v15 & 0x1F)) & 0x3528029) == 0;
          if (v16 || (v14 & 2) == 0 && (v15 & 0x1F) == 0)
            goto LABEL_47;
        }
        if ((*((_QWORD *)this + 12) & 0x1FLL) == 0x19
          || *((unsigned __int8 *)this + 46) - 36 <= 4 && (*((_BYTE *)this + 52) & 7) != 1)
        {
LABEL_47:
          if ((*((_BYTE *)this + 328) & 8) != 0)
          {
            WebCore::RenderTable::recalcSections(this, a2);
            if ((*((_BYTE *)this + 328) & 8) != 0)
              WebCore::RenderTable::recalcSections(this, v13);
          }
          v8 = *((_QWORD *)this + 35);
          if (!v8 || (v10 = *(_QWORD *)(v8 + 8)) == 0)
          {
            v9 = *(unsigned int *)((char *)this + 71);
            if (!(v9 | ((unint64_t)*((unsigned __int8 *)this + 75) << 32)))
              return;
            v10 = *(_QWORD *)((v9 | ((unint64_t)*((unsigned __int8 *)this + 75) << 32)) + 8);
            if (!v10)
              return;
            while (*(_BYTE *)(v10 + 46) != 40)
            {
              if (*(unsigned int *)(v10 + 40) | ((unint64_t)*(unsigned __int8 *)(v10 + 44) << 32))
              {
                v10 = *(_QWORD *)((*(unsigned int *)(v10 + 40) | ((unint64_t)*(unsigned __int8 *)(v10 + 44) << 32))
                                + 8);
                if (v10)
                  continue;
              }
              return;
            }
          }
          if (*(_DWORD *)(v10 + 212) || (v10 = WebCore::RenderTable::sectionAbove(this, v10, 1)) != 0)
          {
            v11 = *(unsigned int *)(v10 + 212);
            if ((_DWORD)v11)
            {
              v12 = v11 - 1;
              if (*(_DWORD *)(*(_QWORD *)(v10 + 200) + 40 * v12 + 24))
              {
                if (v12 >= *(unsigned int *)(v10 + 228))
                  __break(0xC471u);
              }
              else
              {
                WebCore::RenderTableSection::baselineFromCellContentEdges(v10, 5);
              }
            }
          }
        }
      }
    }
  }
}

unint64_t WebCore::RenderTable::overflowClipRect(uint64_t a1, unsigned int *a2, uint64_t a3, int a4, int a5)
{
  unint64_t v7;
  unint64_t v8;

  if (a5 == 2 || (*(_BYTE *)(*(_QWORD *)(a1 + 144) + 25) & 8) != 0)
  {
    LODWORD(v7) = *a2;
    v8 = a2[1];
  }
  else
  {
    v7 = WebCore::RenderBox::overflowClipRect((_QWORD *)a1, a2, a3, a4);
    v8 = HIDWORD(v7);
  }
  if (*(_DWORD *)(a1 + 244))
  {
    if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
      LODWORD(v7) = *a2;
    else
      v8 = a2[1];
  }
  return v7 | (v8 << 32);
}

BOOL WebCore::RenderTable::nodeAtPoint(WebCore::RenderBox *this, int *a2, WebCore::HitTestResult *a3, _DWORD *a4, _DWORD *a5, uint64_t a6)
{
  int v11;
  int v12;
  unsigned int v13;
  BOOL v14;
  unsigned int v15;
  unint64_t v16;
  unsigned int v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  int v27;
  int v28;
  signed int v29;
  int v30;
  signed int v31;
  signed int v32;
  int v33;
  signed int v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BOOL4 v38;
  unint64_t v39;
  int v40;
  int v41;
  signed int v42;
  int v43;
  signed int v44;
  unsigned int v45;
  int v46;
  int v47;
  uint64_t v49;
  uint64_t v50;
  WebCore::RenderBox *v51;
  int v52;
  int v53;
  int v54;
  int v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int v59;
  WebCore::ImageOverlay *v60;
  WebCore::Node *v61;
  void *v62;
  _BOOL4 v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  int v68;
  int v69;
  int v70;
  int v71;
  unsigned int v72;
  unsigned int v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  int v78;
  int v79;

  v12 = *((_DWORD *)this + 38);
  v11 = *((_DWORD *)this + 39);
  v13 = a5[1];
  v14 = __OFADD__(*a5, v12);
  v15 = *a5 + v12;
  if (v14)
    v16 = ((*a5 >> 31) + 0x7FFFFFFF);
  else
    v16 = v15;
  v14 = __OFADD__(v13, v11);
  v17 = v13 + v11;
  LODWORD(v18) = (v13 >> 31) + 0x7FFFFFFF;
  if (v14)
    v18 = v18;
  else
    v18 = v17;
  v76 = v16 | (v18 << 32);
  if ((*((_DWORD *)this + 5) & 0x10000) == 0)
    goto LABEL_8;
  if ((*(_BYTE *)(*((_QWORD *)this + 18) + 25) & 8) != 0)
  {
    v26 = *((_QWORD *)this + 20);
  }
  else
  {
    v16 = WebCore::RenderBox::overflowClipRect(this, (unsigned int *)&v76, 0, 0);
    v18 = HIDWORD(v16);
  }
  if (*((_DWORD *)this + 61))
  {
    if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
    {
      v26 = v26 & 0xFFFFFFFF00000000 | *((unsigned int *)this + 40);
      LODWORD(v16) = v76;
    }
    else
    {
      v26 = v26 | ((unint64_t)*((unsigned int *)this + 41) << 32);
      v18 = HIDWORD(v76);
    }
  }
  v74 = v16 | (v18 << 32);
  v75 = v26;
  if ((int)v26 >= 1 && SHIDWORD(v26) >= 1)
  {
    v27 = a4[4];
    if (v27 >= 1)
    {
      v28 = a4[5];
      if (v28 >= 1)
      {
        v29 = a4[2];
        v14 = __OFADD__(v29, v27);
        v30 = v29 + v27;
        if (v14)
          v30 = (v29 >> 31) + 0x7FFFFFFF;
        if ((int)v16 < v30)
        {
          v31 = v16 + v26;
          if (__OFADD__((_DWORD)v16, (_DWORD)v26))
            v31 = (v16 >> 31) + 0x7FFFFFFF;
          if (v29 < v31)
          {
            v32 = a4[3];
            v14 = __OFADD__(v32, v28);
            v33 = v32 + v28;
            if (v14)
              v33 = (v32 >> 31) + 0x7FFFFFFF;
            if ((int)v18 < v33)
            {
              v34 = v18 + HIDWORD(v26);
              if (__OFADD__((_DWORD)v18, HIDWORD(v26)))
                v34 = (v18 >> 31) + 0x7FFFFFFF;
              if (v32 < v34)
              {
                if (*((_BYTE *)a4 + 65)
                  || WebCore::LayoutRect::contains((WebCore::LayoutRect *)&v74, (const WebCore::LayoutRect *)(a4 + 2))
                  || (LODWORD(v77) = WebCore::LayoutRect::operator WebCore::FloatRect((int *)&v74),
                      HIDWORD(v77) = v53,
                      v78 = v54,
                      v79 = v55,
                      WebCore::FloatQuad::intersectsRect((WebCore::FloatQuad *)(a4 + 8), (const WebCore::FloatRect *)&v77)))
                {
LABEL_8:
                  v19 = *((unsigned __int8 *)this + 75);
                  for (i = *(unsigned int *)((char *)this + 71); ; i = *(unsigned int *)(v22 + 40))
                  {
                    v21 = i | (v19 << 32);
                    if (!v21)
                      break;
                    v22 = *(_QWORD *)(v21 + 8);
                    if (!v22)
                      break;
                    if ((*(_BYTE *)(v22 + 45) & 4) != 0)
                    {
                      v23 = *(_DWORD *)(v22 + 16) + 1;
                      *(_DWORD *)(v22 + 16) = v23;
                      v24 = *(_QWORD *)(v22 + 144);
                      if (!v24 || (*(_BYTE *)(v24 + 25) & 8) == 0)
                      {
                        v25 = *(unsigned __int8 *)(v22 + 46);
                        if (v25 == 40 || v25 == 36)
                        {
                          v77 = WebCore::RenderBox::flipForWritingModeForChild(this, (const WebCore::RenderBox *)v22, (const WebCore::LayoutPoint *)&v76);
                          if ((*(unsigned int (**)(uint64_t, int *, WebCore::HitTestResult *, _DWORD *, unint64_t *, uint64_t))(*(_QWORD *)v22 + 336))(v22, a2, a3, a4, &v77, a6))
                          {
                            v64 = a4[1];
                            LODWORD(v65) = (*a4 >> 31) + 0x7FFFFFFF;
                            if (__OFSUB__(*a4, (_DWORD)v77))
                              v65 = v65;
                            else
                              v65 = (*a4 - v77);
                            v14 = __OFSUB__(v64, HIDWORD(v77));
                            v66 = v64 - HIDWORD(v77);
                            LODWORD(v67) = (v64 >> 31) + 0x7FFFFFFF;
                            if (v14)
                              v67 = v67;
                            else
                              v67 = v66;
                            v74 = v65 | (v67 << 32);
                            (*(void (**)(WebCore::RenderBox *, WebCore::HitTestResult *, unint64_t *))(*(_QWORD *)this + 328))(this, a3, &v74);
                            v68 = *(_DWORD *)(v22 + 16);
                            if (!v68)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x196440024);
                            }
                            *(_DWORD *)(v22 + 16) = v68 - 1;
                            return 1;
                          }
                          v23 = *(_DWORD *)(v22 + 16);
                        }
                      }
                      if (!v23)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19643FFC0);
                      }
                      *(_DWORD *)(v22 + 16) = v23 - 1;
                    }
                    v19 = *(unsigned __int8 *)(v22 + 44);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  v35 = *((_QWORD *)this + 20);
  v74 = v76;
  v75 = v35;
  if ((*(_QWORD *)a2 & 0xFF00000000) != 0 && (*(_BYTE *)(*((_QWORD *)this + 13) + 239) & 4) != 0)
    return 0;
  if ((*((_BYTE *)this + 120) & 0x30) != 0)
    return 0;
  v36 = *((_QWORD *)this + 4);
  if (v36)
  {
    v37 = *(_QWORD *)(v36 + 8);
    if (v37)
    {
      if ((*(_BYTE *)(*(_QWORD *)(v37 + 104) + 239) & 0x18) != 0)
        return 0;
    }
  }
  if ((*(_QWORD *)a2 & 0x10) != 0)
  {
    v38 = 1;
  }
  else
  {
    v49 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    v50 = *(_QWORD *)(*(_QWORD *)(v49 + 40) + 8);
    if (*(_BYTE *)(v50 + 3441))
    {
      if (*(_QWORD *)(v50 + 1272) != v49)
        goto LABEL_118;
    }
    if ((*((_BYTE *)this + 45) & 2) != 0)
      v51 = 0;
    else
      v51 = this;
    if (v36 && (*((_BYTE *)this + 45) & 2) != 0)
      v51 = *(WebCore::RenderBox **)(v36 + 8);
    if ((*(_BYTE *)(*((_QWORD *)v51 + 13) + 239) & 1) != 0)
LABEL_118:
      v52 = 0;
    else
      v52 = (*((_DWORD *)v51 + 31) >> 6) & 0xF;
    v38 = v52 != 0;
  }
  if (a6 > 1)
    return 0;
  if (!v38)
    return 0;
  if ((int)v35 < 1)
    return 0;
  v39 = HIDWORD(v35);
  if (SHIDWORD(v35) < 1)
    return 0;
  v40 = a4[4];
  if (v40 < 1)
    return 0;
  v41 = a4[5];
  if (v41 < 1)
    return 0;
  v42 = a4[2];
  v14 = __OFADD__(v42, v40);
  v43 = v42 + v40;
  if (v14)
    v43 = (v42 >> 31) + 0x7FFFFFFF;
  if (v43 <= (int)v76)
    return 0;
  v14 = __OFADD__((_DWORD)v76, (_DWORD)v35);
  v44 = v76 + v35;
  if (v14)
    v44 = (v76 >> 31) + 0x7FFFFFFF;
  if (v42 >= v44)
    return 0;
  v45 = a4[3];
  v14 = __OFADD__(v45, v41);
  v46 = v45 + v41;
  if (v14)
    v46 = (v45 >> 31) + 0x7FFFFFFF;
  if (v46 <= SHIDWORD(v76))
    return 0;
  v14 = __OFADD__(HIDWORD(v76), (_DWORD)v39);
  v47 = HIDWORD(v76) + v39;
  if (v14)
    v47 = (HIDWORD(v76) >> 31) + 0x7FFFFFFF;
  if ((int)v45 >= v47)
    return 0;
  if (!*((_BYTE *)a4 + 65)
    && !WebCore::LayoutRect::contains((WebCore::LayoutRect *)&v74, (const WebCore::LayoutRect *)(a4 + 2)))
  {
    LODWORD(v77) = WebCore::LayoutRect::operator WebCore::FloatRect((int *)&v74);
    HIDWORD(v77) = v69;
    v78 = v70;
    v79 = v71;
    if (!WebCore::FloatQuad::intersectsRect((WebCore::FloatQuad *)(a4 + 8), (const WebCore::FloatRect *)&v77))
      return 0;
  }
  v56 = *a4 - v76;
  if (__OFSUB__(*a4, (_DWORD)v76))
    v56 = (*a4 >> 31) + 0x7FFFFFFF;
  v57 = a4[1];
  v58 = v57 - HIDWORD(v76);
  if (__OFSUB__(v57, HIDWORD(v76)))
    v58 = (v57 >> 31) + 0x7FFFFFFF;
  v59 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
  if (v59 <= 5 && ((1 << v59) & 0x2A) != 0)
  {
    if ((*((_BYTE *)this + 21) & 0x10) != 0)
    {
      v73 = *((_DWORD *)this + 40);
      v14 = __OFSUB__(v73, v56);
      v56 = v73 - v56;
      if (v14)
        v56 = (v73 >> 31) + 0x7FFFFFFF;
    }
    else
    {
      v72 = *((_DWORD *)this + 41);
      v14 = __OFSUB__(v72, (_DWORD)v58);
      v58 = v72 - v58;
      if (v14)
        v58 = (v72 >> 31) + 0x7FFFFFFF;
    }
  }
  v77 = v56 | (unint64_t)(v58 << 32);
  (*(void (**)(WebCore::RenderBox *, WebCore::HitTestResult *, unint64_t *))(*(_QWORD *)this + 328))(this, a3, &v77);
  v60 = (WebCore::ImageOverlay *)(*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 320))(this);
  if (v60)
  {
    v61 = v60;
    *((_DWORD *)v60 + 6) += 2;
    v63 = WebCore::HitTestResult::addNodeToListBasedTestResultCommon<WebCore::LayoutRect>(a3, v60, a2, (uint64_t)a4, (WebCore::LayoutRect *)&v74);
    if (*((_DWORD *)v61 + 6) == 2)
    {
      if ((*((_WORD *)v61 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v61, v62);
    }
    else
    {
      *((_DWORD *)v61 + 6) -= 2;
    }
    return !v63;
  }
  return !WebCore::HitTestResult::addNodeToListBasedTestResultCommon<WebCore::LayoutRect>(a3, 0, a2, (uint64_t)a4, (WebCore::LayoutRect *)&v74);
}

WTF::StringImpl *WebCore::RenderTable::createTableWithStyle@<X0>(WebCore::RenderTable *this@<X0>, WebCore::Document *a2@<X1>, const WebCore::RenderStyle *a3@<X2>, WebCore::RenderElement **a4@<X8>)
{
  uint64_t v7;
  WebCore::RenderElement *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  const WebCore::Element *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;

  if ((*((_QWORD *)a2 + 2) & 0x1FLL) != 0)
    v7 = 4;
  else
    v7 = 5;
  WebCore::RenderStyle::createAnonymousStyleWithDisplay(a2, (WTF::StringImpl *)v7, a3, (uint64_t)&v21);
  v8 = (WebCore::RenderElement *)bmalloc::api::isoAllocate();
  v9 = WebCore::RenderObject::RenderObject((uint64_t)v8, 35, (uint64_t)this, 92, 0);
  *(_QWORD *)v9 = off_1E3422BC8;
  *(_QWORD *)(v9 + 64) = 0;
  *(_QWORD *)(v9 + 70) = 0;
  *(_DWORD *)(v9 + 80) = 0;
  v10 = v22;
  v11 = v23;
  v22 = 0;
  *(_QWORD *)(v9 + 88) = v10;
  *(_QWORD *)(v9 + 96) = v11;
  v12 = v24;
  v24 = 0u;
  *(_OWORD *)(v9 + 104) = v12;
  *(_QWORD *)(v9 + 120) = v25;
  v13 = v26;
  v26 = 0u;
  *(_OWORD *)(v9 + 128) = v13;
  *(_OWORD *)(v9 + 144) = 0u;
  *(_OWORD *)(v9 + 160) = 0u;
  *(_OWORD *)(v9 + 176) = 0u;
  *(_QWORD *)(v9 + 192) = 0;
  *(_QWORD *)v9 = off_1E3432148;
  *(_OWORD *)(v9 + 200) = 0u;
  *(_DWORD *)(v9 + 212) = 1;
  v14 = (void *)WTF::fastMalloc((WTF *)4);
  *((_DWORD *)v8 + 52) = 1;
  *((_QWORD *)v8 + 25) = v14;
  v15 = *((unsigned int *)v8 + 53);
  if ((_DWORD)v15)
    bzero(v14, 4 * v15);
  *(_OWORD *)((char *)v8 + 248) = 0u;
  *(_OWORD *)((char *)v8 + 232) = 0u;
  *(_OWORD *)((char *)v8 + 216) = 0u;
  *(_OWORD *)((char *)v8 + 296) = 0u;
  *(_OWORD *)((char *)v8 + 312) = 0u;
  *(_OWORD *)((char *)v8 + 264) = 0u;
  *(_OWORD *)((char *)v8 + 280) = 0u;
  *((_BYTE *)v8 + 328) &= 0x80u;
  *((_DWORD *)v8 + 89) = 0;
  *(_QWORD *)((char *)v8 + 340) = 0;
  *(_QWORD *)((char *)v8 + 348) = 0;
  *(_QWORD *)((char *)v8 + 332) = 0;
  (*(void (**)(WebCore::RenderElement *, _QWORD))(*(_QWORD *)v8 + 168))(v8, 0);
  *a4 = v8;
  WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)&v21, v16);
  return WebCore::RenderElement::initializeStyle(v8, v17, v18, v19);
}

WTF::StringImpl *WebCore::RenderTable::createAnonymousWithParentRenderer@<X0>(WebCore::RenderTable *this@<X0>, const WebCore::RenderStyle *a2@<X2>, WebCore::RenderElement **a3@<X8>)
{
  return WebCore::RenderTable::createTableWithStyle(*(WebCore::RenderTable **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8), (WebCore::RenderTable *)((char *)this + 80), a2, a3);
}

void WebCore::RenderTableCaption::~RenderTableCaption(WebCore::RenderTableCaption *this, void *a2)
{
  uint64_t v2;
  void *v3;

  WebCore::RenderBlockFlow::~RenderBlockFlow(this, a2);
  if (*(_DWORD *)(v2 + 16))
  {
    *(_QWORD *)(v2 + 240) = 0;
    *(_OWORD *)(v2 + 208) = 0u;
    *(_OWORD *)(v2 + 224) = 0u;
    *(_OWORD *)(v2 + 176) = 0u;
    *(_OWORD *)(v2 + 192) = 0u;
    *(_OWORD *)(v2 + 144) = 0u;
    *(_OWORD *)(v2 + 160) = 0u;
    *(_OWORD *)(v2 + 112) = 0u;
    *(_OWORD *)(v2 + 128) = 0u;
    *(_OWORD *)(v2 + 80) = 0u;
    *(_OWORD *)(v2 + 96) = 0u;
    *(_OWORD *)(v2 + 48) = 0u;
    *(_OWORD *)(v2 + 64) = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_OWORD *)v2 = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate((bmalloc::api *)v2, v3);
  }
}

WTF *WebCore::RenderTableCaption::insertedIntoTree(WebCore::RenderTableCaption *this, void *a2, uint64_t a3, WebCore::RenderLayer *a4, BOOL a5)
{
  uint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  WTF *v12;
  void *v13;
  WTF **v14;
  uint64_t v15;
  WTF *result;
  void *v17;
  WTF *v18;
  uint64_t v19;
  WTF **v20;
  WTF **v21;
  WTF *v22;

  WebCore::RenderElement::insertedIntoTree((uint64_t)this, a2, a3, a4, a5);
  v6 = *(_QWORD *)(*((_QWORD *)this + 4) + 8);
  v7 = *(unsigned __int8 *)(v6 + 46);
  if (v7 != 35 && v7 != 63)
    goto LABEL_29;
  v8 = *(unsigned int *)(v6 + 244);
  if ((_DWORD)v8 != *(_DWORD *)(v6 + 240))
  {
    result = (WTF *)WTF::WeakPtr<WebCore::CachedRawResourceClient,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>::WeakPtr<void>((uint64_t *)(*(_QWORD *)(v6 + 232) + 8 * v8), (uint64_t)this);
    goto LABEL_16;
  }
  v9 = v8 + (v8 >> 2);
  v10 = v9 >= 0x10 ? v9 + 1 : 16;
  v11 = v10 <= v8 + 1 ? v8 + 1 : v10;
  if (v11 >> 29)
  {
LABEL_29:
    __break(0xC471u);
    JUMPOUT(0x19644044CLL);
  }
  v12 = *(WTF **)(v6 + 232);
  v14 = (WTF **)WTF::fastMalloc((WTF *)(8 * v11));
  *(_DWORD *)(v6 + 240) = v11;
  *(_QWORD *)(v6 + 232) = v14;
  if ((_DWORD)v8)
  {
    v19 = 8 * v8;
    v20 = (WTF **)v12;
    v21 = (WTF **)v12;
    do
    {
      v22 = *v20;
      *v21++ = 0;
      *v14++ = v22;
      WebCore::CompositedClipData::~CompositedClipData(v20, v13);
      v20 = v21;
      v19 -= 8;
    }
    while (v19);
    v14 = *(WTF ***)(v6 + 232);
  }
  if (v12)
  {
    if (v14 == (WTF **)v12)
    {
      *(_QWORD *)(v6 + 232) = 0;
      *(_DWORD *)(v6 + 240) = 0;
    }
    WTF::fastFree(v12, v13);
    v14 = *(WTF ***)(v6 + 232);
  }
  v15 = *(unsigned int *)(v6 + 244);
  result = (WTF *)*((_QWORD *)this + 1);
  if (!result)
  {
    result = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)result = 1;
    *((_QWORD *)result + 1) = this;
    v18 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = result;
    if (v18)
    {
      if (*(_DWORD *)v18 == 1)
      {
        WTF::fastFree(v18, v17);
        result = (WTF *)*((_QWORD *)this + 1);
        if (!result)
          goto LABEL_15;
      }
      else
      {
        --*(_DWORD *)v18;
      }
    }
  }
  ++*(_DWORD *)result;
LABEL_15:
  v14[v15] = result;
LABEL_16:
  ++*(_DWORD *)(v6 + 244);
  return result;
}

uint64_t WebCore::RenderTableCaption::table(uint64_t this)
{
  int v1;

  if (this)
  {
    this = *(_QWORD *)(this + 8);
    if (this)
    {
      v1 = *(unsigned __int8 *)(this + 46);
      if (v1 != 35 && v1 != 63)
      {
        this = 105;
        __break(0xC471u);
      }
    }
  }
  return this;
}

void WebCore::RenderTableCaption::willBeRemovedFromTree(WebCore::RenderTableCaption *this, void *a2)
{
  uint64_t v3;
  WebCore::RenderTableCaption *v4;

  WebCore::RenderElement::willBeRemovedFromTree(this, a2);
  v3 = WebCore::RenderTableCaption::table(*((_QWORD *)this + 4));
  v4 = this;
  WTF::Vector<WTF::WeakPtr<WebCore::RenderTableCaption,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeFirstMatching<BOOL WTF::Vector<WTF::WeakPtr<WebCore::RenderTableCaption,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeFirst<WebCore::RenderTableCaption*>(WebCore::RenderTableCaption* const&)::{lambda(WTF::WeakPtr<WebCore::RenderTableCaption,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&)#1}>(v3 + 232, (uint64_t *)&v4);
}

WebCore::RenderObject *WebCore::RenderTableCaption::containingBlockLogicalWidthForContent(WebCore::RenderTableCaption *this)
{
  WebCore::RenderObject *result;
  unsigned int *v2;

  result = WebCore::RenderObject::containingBlock(this);
  if (result)
  {
    v2 = (unsigned int *)((char *)result + 164);
    if (((*((_DWORD *)result + 31) >> 13) & 6u) - 2 >= 4)
      v2 = (unsigned int *)((char *)result + 160);
    return (WebCore::RenderObject *)*v2;
  }
  return result;
}

void WebCore::RenderTableCell::willBeRemovedFromTree(WebCore::RenderTableCell *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  WebCore::RenderElement::willBeRemovedFromTree(this, a2);
  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      if (*(_BYTE *)(v4 + 46) != 39)
        goto LABEL_15;
      v5 = *(_QWORD *)(v4 + 32);
      if (v5)
      {
        v6 = *(_QWORD *)(v5 + 8);
        if (v6)
        {
          if (*(_BYTE *)(v6 + 46) != 40)
          {
            __break(0xC471u);
            JUMPOUT(0x1964405F8);
          }
          v7 = *(_QWORD *)(v6 + 32);
          if (v7)
          {
            v8 = *(_QWORD *)(v7 + 8);
            if (v8)
            {
              v9 = *(unsigned __int8 *)(v8 + 46);
              if (v9 == 35 || v9 == 63)
              {
                WebCore::RenderTable::invalidateCollapsedBorders(v8, 0);
                WebCore::RenderTableSection::removeCachedCollapsedBorders((WebCore::RenderTableSection *)v6, this);
                WebCore::RenderTableSection::setNeedsCellRecalc((WebCore::RenderTableSection *)v6);
                return;
              }
LABEL_15:
              __break(0xC471u);
              JUMPOUT(0x1964405D8);
            }
          }
        }
      }
    }
  }
}

void WebCore::RenderTableCell::colSpanOrRowSpanChanged(WebCore::RenderTableCell *this)
{
  int v2;
  WebCore::RenderElement *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::RenderTableSection *v9;

  WebCore::RenderTableCell::updateColAndRowSpanFlags((uint64_t)this);
  v2 = *((_DWORD *)this + 5);
  if ((v2 & 8) == 0)
  {
    *((_DWORD *)this + 5) = v2 | 8;
    v3 = WebCore::RenderObject::markContainingBlocksForLayout(this, 0);
    WebCore::RenderObject::scheduleLayout(this, v3);
    if ((*((_BYTE *)this + 21) & 0x80) != 0)
    {
      if ((*((_BYTE *)this + 45) & 0x10) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x196440754);
      }
      v4 = *((_QWORD *)this + 18);
      if (v4)
      {
        v5 = *(_DWORD *)(v4 + 8) + 1;
        *(_DWORD *)(v4 + 8) = v5;
      }
      else
      {
        v5 = MEMORY[8];
      }
      *(_QWORD *)(v4 + 24) = *(_QWORD *)(v4 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
      if (!v5)
        goto LABEL_20;
      *(_DWORD *)(v4 + 8) = v5 - 1;
    }
  }
  WebCore::RenderObject::setPreferredLogicalWidthsDirty((uint64_t)this, 1, 1);
  v6 = *((_QWORD *)this + 4);
  if (!v6)
    return;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7)
    return;
  if (*(_BYTE *)(v7 + 46) != 39)
  {
LABEL_20:
    __break(0xC471u);
    JUMPOUT(0x196440714);
  }
  v8 = *(_QWORD *)(v7 + 32);
  if (v8)
  {
    v9 = *(WebCore::RenderTableSection **)(v8 + 8);
    if (v9)
    {
      if (*((_BYTE *)v9 + 46) != 40)
      {
        __break(0xC471u);
        JUMPOUT(0x196440734);
      }
      WebCore::RenderTableSection::setNeedsCellRecalc(v9);
    }
  }
}

float WebCore::RenderTableCell::logicalWidthFromColumns@<S0>(WebCore::RenderTableCell *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, __n128 a5@<Q0>)
{
  unsigned int v9;
  int v10;
  int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  int v15;
  char v16;
  unsigned int v17;
  int v18;
  float v19;
  void *v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  int v36;
  int v37;
  BOOL v38;
  int v39;
  float v40;
  int v41;
  int v42;
  unsigned __int32 v43;
  float v45;
  unsigned __int8 v46;
  char v47;
  char v48;

  if ((*((_BYTE *)a1 + 251) & 4) == 0)
  {
    v9 = 1;
LABEL_3:
    v10 = 0;
    v11 = 1;
    a5.n128_u64[0] = 0x41DFFFFFFFC00000;
    while (1)
    {
      v12 = *(_QWORD *)(*(_QWORD *)(a2 + 88) + 8);
      v13 = (unsigned int *)(v12 + 12);
      v14 = (unsigned int *)(v12 + 4);
      if (((*(_DWORD *)(a2 + 124) >> 13) & 6u) - 2 < 4)
        v14 = v13;
      v48 = 0;
      v46 = *((_BYTE *)v14 + 4);
      v15 = v46;
      v16 = *((_BYTE *)v14 + 5);
      v47 = v16;
      v17 = v46 - 2;
      if (v17 >= 9)
        break;
      v18 = *((unsigned __int8 *)v14 + 6);
      v19 = *(float *)v14;
      v20 = (void *)*v14;
      if (v46 != 4)
        goto LABEL_48;
      if (!*((_BYTE *)v14 + 6))
        v19 = (float)(int)v20;
      v21 = (float)((float)((float)v10 * 0.015625) + v19) * 64.0;
      if (v21 >= 2147483650.0)
      {
        v10 = 0x7FFFFFFF;
      }
      else if (v21 <= -2147483650.0)
      {
        v10 = 0x80000000;
      }
      else
      {
        v10 = (int)v21;
      }
      v22 = *(unsigned int *)(a2 + 64);
      if (v22 | ((unint64_t)*(unsigned __int8 *)(a2 + 68) << 32)
        && (v23 = *(_QWORD *)((v22 | ((unint64_t)*(unsigned __int8 *)(a2 + 68) << 32)) + 8)) != 0)
      {
        a2 = *(_QWORD *)((v22 | ((unint64_t)*(unsigned __int8 *)(a2 + 68) << 32)) + 8);
        if (*(_BYTE *)(v23 + 46) != 38)
        {
          __break(0xC471u);
          JUMPOUT(0x196440B34);
        }
      }
      else
      {
        v25 = *(unsigned int *)(a2 + 47);
        if (!(v25 | ((unint64_t)*(unsigned __int8 *)(a2 + 51) << 32))
          || (v26 = *(_QWORD *)((v25 | ((unint64_t)*(unsigned __int8 *)(a2 + 51) << 32)) + 8)) == 0)
        {
          v27 = *(_QWORD *)(a2 + 32);
          if (!v27
            || (v28 = *(_QWORD *)(v27 + 8), *(_BYTE *)(v28 + 46) != 38)
            || (v29 = *(unsigned int *)(v28 + 47) | ((unint64_t)*(unsigned __int8 *)(v28 + 51) << 32)) == 0
            || (v26 = *(_QWORD *)(v29 + 8)) == 0)
          {
LABEL_32:
            if (v10 < 1)
              goto LABEL_69;
            v31 = (*(uint64_t (**)(WebCore::RenderTableCell *, __n128))(*(_QWORD *)a1 + 1064))(a1, a5);
            v32 = (*(uint64_t (**)(WebCore::RenderTableCell *))(*(_QWORD *)a1 + 1072))(a1);
            if (__OFADD__(v31, v32))
              v33 = (v31 >> 31) + 0x7FFFFFFF;
            else
              v33 = v31 + v32;
            v34 = (*(uint64_t (**)(WebCore::RenderTableCell *))(*(_QWORD *)a1 + 976))(a1);
            if (__OFADD__(v33, v34))
              v35 = (v33 >> 31) + 0x7FFFFFFF;
            else
              v35 = v33 + v34;
            v36 = (*(uint64_t (**)(WebCore::RenderTableCell *))(*(_QWORD *)a1 + 984))(a1);
            v37 = v35 + v36;
            if (__OFADD__(v35, v36))
              v37 = (v35 >> 31) + 0x7FFFFFFF;
            v38 = __OFSUB__(v10, v37);
            v39 = v10 - v37;
            if (v38)
              v39 = 0x7FFFFFFF;
            v40 = (float)(v39 & ~(v39 >> 31));
            goto LABEL_70;
          }
        }
        a2 = v26;
        while (*(_BYTE *)(a2 + 46) != 38)
        {
          v30 = *(unsigned int *)(a2 + 47);
          if (v30 | ((unint64_t)*(unsigned __int8 *)(a2 + 51) << 32))
          {
            a2 = *(_QWORD *)((v30 | ((unint64_t)*(unsigned __int8 *)(a2 + 51) << 32)) + 8);
            if (a2)
              continue;
          }
          goto LABEL_32;
        }
      }
      if (v11++ == v9)
        goto LABEL_32;
    }
    if (v46 == 11)
    {
      v45 = *(float *)v14;
      v20 = (void *)LODWORD(v45);
      WebCore::Length::ref((int *)&v45);
      v18 = 0;
      v19 = *(float *)&v20;
    }
    else
    {
      v20 = 0;
      v18 = 0;
      v19 = 0.0;
    }
LABEL_48:
    *(_DWORD *)a4 = 0;
    *(_BYTE *)(a4 + 6) = 0;
    if (v9 >= 2)
    {
      v41 = *(unsigned __int8 *)(a3 + 4);
      *(_BYTE *)(a4 + 4) = v41;
      *(_BYTE *)(a4 + 5) = *(_BYTE *)(a3 + 5);
      if ((v41 - 2) >= 9)
      {
        if (v41 != 11)
        {
LABEL_52:
          *(_BYTE *)(a3 + 4) = 0;
          if (v15 == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v20);
          }
          return a5.n128_f32[0];
        }
        v43 = *(_DWORD *)a3;
        *(_DWORD *)a3 = 0;
      }
      else
      {
        v42 = *(unsigned __int8 *)(a3 + 6);
        *(_BYTE *)(a4 + 6) = v42;
        if (v42)
        {
          a5.n128_u32[0] = *(_DWORD *)a3;
          *(_DWORD *)a4 = *(_DWORD *)a3;
          goto LABEL_52;
        }
        v43 = *(_DWORD *)a3;
      }
      *(_DWORD *)a4 = v43;
      goto LABEL_52;
    }
    *(_BYTE *)(a4 + 4) = v15;
    *(_BYTE *)(a4 + 5) = v16;
    if (v17 >= 2)
    {
      if (v15 == 11)
      {
LABEL_64:
        *(_DWORD *)a4 = (_DWORD)v20;
        return a5.n128_f32[0];
      }
      if ((v15 - 5) > 5)
        return a5.n128_f32[0];
    }
    *(_BYTE *)(a4 + 6) = v18;
    if (v18)
    {
      *(float *)a4 = v19;
      return a5.n128_f32[0];
    }
    goto LABEL_64;
  }
  v9 = WebCore::RenderTableCell::parseColSpanFromDOM(a1);
  if (v9)
    goto LABEL_3;
  v10 = 0;
LABEL_69:
  v40 = (float)v10;
LABEL_70:
  a5.n128_f32[0] = v40 * 0.015625;
  *(_DWORD *)a4 = a5.n128_u32[0];
  *(_WORD *)(a4 + 4) = 4;
  *(_BYTE *)(a4 + 6) = 1;
  return a5.n128_f32[0];
}

uint64_t WebCore::RenderTableCell::frameRectForStickyPositioning(WebCore::RenderTableCell *this)
{
  unsigned int v1;
  unsigned int v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  BOOL v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;

  v2 = *((_DWORD *)this + 38);
  v1 = *((_DWORD *)this + 39);
  v3 = *(_QWORD *)(*((_QWORD *)this + 4) + 8);
  if ((*(_BYTE *)(v3 + 45) & 4) == 0)
    v3 = 0;
  v5 = *(_DWORD *)(v3 + 152);
  v4 = *(_DWORD *)(v3 + 156);
  if (v4 == 0x80000000)
    v6 = 0x7FFFFFFF;
  else
    v6 = -v4;
  if (v5 == 0x80000000)
    v7 = 0x7FFFFFFF;
  else
    v7 = -v5;
  v8 = __OFADD__(v2, v7);
  v9 = v2 + v7;
  LODWORD(v10) = (v2 >> 31) + 0x7FFFFFFF;
  if (v8)
    v10 = v10;
  else
    v10 = v9;
  v8 = __OFADD__(v1, v6);
  v11 = v1 + v6;
  LODWORD(v12) = (v1 >> 31) + 0x7FFFFFFF;
  if (v8)
    v12 = v12;
  else
    v12 = v11;
  return v10 | (v12 << 32);
}

unint64_t WebCore::RenderTableCell::padding(WebCore::RenderTableCell *this)
{
  unsigned __int8 *v2;
  int v3;
  float v4;
  float v5;
  double v6;
  unsigned int v7;
  unsigned __int8 *v8;
  int v9;
  float v10;
  float v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  float v16;
  uint64_t v17;
  int v18;
  float v19;
  int v20;
  char *v21;
  int v22;
  BOOL v23;
  unsigned int v24;
  _BOOL4 v25;
  BOOL v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  float v31;
  float v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;

  v2 = *(unsigned __int8 **)(*((_QWORD *)this + 11) + 24);
  v3 = v2[76];
  if ((v3 & 0xFFFFFFF7) == 3)
  {
    v33 = (*(uint64_t (**)(WebCore::RenderTableCell *))(*(_QWORD *)this + 1144))(this);
    v3 = v2[76];
    v4 = (float)v33 * 0.015625;
  }
  else
  {
    v4 = 0.0;
  }
  switch(v3)
  {
    case 4:
      v5 = *((float *)v2 + 18);
      if (!v2[78])
        v5 = (float)SLODWORD(v5);
      goto LABEL_6;
    case 3:
      v31 = *((float *)v2 + 18);
      if (!v2[78])
        v31 = (float)SLODWORD(v31);
      v5 = (float)(v4 * v31) / 100.0;
      goto LABEL_6;
    case 11:
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v2 + 72), v4);
LABEL_6:
      v6 = v5 * 64.0;
      if (v6 >= 2147483650.0)
      {
        v7 = 0x7FFFFFFF;
      }
      else if (v6 <= -2147483650.0)
      {
        v7 = 0x80000000;
      }
      else
      {
        v7 = (int)v6;
      }
      goto LABEL_9;
  }
  v7 = 0;
LABEL_9:
  v8 = *(unsigned __int8 **)(*((_QWORD *)this + 11) + 24);
  v9 = v8[84];
  if ((v9 & 0xFFFFFFF7) == 3)
  {
    v34 = (*(uint64_t (**)(WebCore::RenderTableCell *))(*(_QWORD *)this + 1144))(this);
    v9 = v8[84];
    v10 = (float)v34 * 0.015625;
  }
  else
  {
    v10 = 0.0;
  }
  switch(v9)
  {
    case 4:
      v11 = *((float *)v8 + 20);
      if (!v8[86])
        v11 = (float)SLODWORD(v11);
      goto LABEL_14;
    case 3:
      v32 = *((float *)v8 + 20);
      if (!v8[86])
        v32 = (float)SLODWORD(v32);
      v11 = (float)(v10 * v32) / 100.0;
      goto LABEL_14;
    case 11:
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v8 + 80), v10);
LABEL_14:
      v12 = v11 * 64.0;
      if (v12 >= 2147483650.0)
      {
        v13 = 0x7FFFFFFFLL;
      }
      else if (v12 <= -2147483650.0)
      {
        v13 = 0x80000000;
      }
      else
      {
        v13 = (int)v12;
      }
      goto LABEL_17;
  }
  v13 = 0;
LABEL_17:
  v14 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
  v15 = *(unsigned __int8 *)(v14 + 92);
  if ((v15 & 0xFFFFFFF7) == 3)
  {
    v35 = (*(uint64_t (**)(WebCore::RenderTableCell *))(*(_QWORD *)this + 1144))(this);
    v15 = *(unsigned __int8 *)(v14 + 92);
    v16 = (float)v35 * 0.015625;
  }
  else
  {
    v16 = 0.0;
  }
  if (v15 != 4 && v15 != 3 && v15 == 11)
    WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v14 + 88), v16);
  v17 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
  v18 = *(unsigned __int8 *)(v17 + 100);
  if ((v18 & 0xFFFFFFF7) == 3)
  {
    v37 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
    v36 = (*(uint64_t (**)(WebCore::RenderTableCell *))(*(_QWORD *)this + 1144))(this);
    v17 = v37;
    v18 = *(unsigned __int8 *)(v37 + 100);
    v19 = (float)v36 * 0.015625;
  }
  else
  {
    v19 = 0.0;
  }
  if (v18 != 4 && v18 != 3 && v18 == 11)
    WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v17 + 96), v19);
  v20 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
  if ((*((_BYTE *)this + 21) & 0x10) != 0)
  {
    v25 = v20 == 4 || v20 == 2;
    v26 = !v25;
    v27 = 252;
    if (!v26)
      v27 = 256;
    v28 = *(_DWORD *)((char *)this + v27);
    v23 = __OFADD__((_DWORD)v13, v28);
    v29 = (v13 + v28);
    if (v23)
      v13 = (v13 >> 31) + 0x7FFFFFFF;
    else
      v13 = v29;
  }
  else
  {
    if ((v20 - 6) > 0xFFFFFFFA)
      v21 = (char *)this + 256;
    else
      v21 = (char *)this + 252;
    v22 = *(_DWORD *)v21;
    v23 = __OFADD__(v7, v22);
    v24 = v7 + v22;
    if (v23)
      v7 = (v7 >> 31) + 0x7FFFFFFF;
    else
      v7 = v24;
  }
  return v7 | (unint64_t)(v13 << 32);
}

unint64_t WebCore::RenderTableCell::offsetFromContainer(WebCore::RenderTableCell *this, WebCore::RenderElement *a2, const WebCore::LayoutPoint *a3, BOOL *a4, double a5)
{
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = WebCore::RenderBox::offsetFromContainer(this, a2, a3, a4, a5);
  v9 = v8;
  v10 = HIDWORD(v8);
  v11 = WebCore::RenderObject::container(a2);
  if (v11)
  {
    v12 = *((_QWORD *)this + 4);
    if (v12)
    {
      v13 = *(_QWORD *)(v12 + 8);
      if (v13)
      {
        v14 = v11;
        if ((*(_BYTE *)(v13 + 45) & 4) != 0)
          v15 = v13;
        else
          v15 = 0;
        v16 = (*(uint64_t (**)(uint64_t, uint64_t, const WebCore::LayoutPoint *, _QWORD))(*(_QWORD *)v15 + 360))(v15, v14, a3, 0);
        if (__OFSUB__(v9, (_DWORD)v16))
          v9 = (v9 >> 31) + 0x7FFFFFFF;
        else
          v9 -= v16;
        if (__OFSUB__((_DWORD)v10, HIDWORD(v16)))
          v10 = (v10 >> 31) + 0x7FFFFFFF;
        else
          v10 = (v10 - HIDWORD(v16));
      }
    }
  }
  return v9 | (v10 << 32);
}

__n128 WebCore::RenderTableCell::computeVisibleRectsInContainer@<Q0>(WebCore::RenderBox *a1@<X0>, uint64_t a2@<X1>, WebCore::RenderObject *a3@<X2>, _BOOL8 a4@<X3>, uint64_t a5@<X8>)
{
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  unsigned __int32 v16;
  unsigned __int32 v17;
  BOOL v18;
  unsigned int v19;
  int v20;
  int v21;
  __n128 result;
  __int128 v23;
  __n128 v24;
  __int128 v25;
  int v26;

  if (a3 == a1)
  {
    result = *(__n128 *)a2;
    v23 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a5 = *(_OWORD *)a2;
    *(_OWORD *)(a5 + 16) = v23;
    *(_DWORD *)(a5 + 32) = *(_DWORD *)(a2 + 32);
    *(_BYTE *)(a5 + 36) = 1;
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 16);
    v24 = *(__n128 *)a2;
    v25 = v5;
    v26 = *(_DWORD *)(a2 + 32);
    v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 3) + 8) + 40) + 8) + 1944)
                   + 248);
    if (*(_DWORD *)(v6 + 492)
      || (v7 = *(unsigned int *)(v6 + 508), !(_DWORD)v7)
      || (*(_QWORD *)(*(_QWORD *)(v6 + 496) + 8 * v7 - 8) ? (v8 = a3 == 0) : (v8 = 0),
          v8 ? (v9 = (a4 & 0x100000000) == 0) : (v9 = 0),
          !v9))
    {
      v10 = *((_QWORD *)a1 + 4);
      if (v10)
      {
        v11 = *(_QWORD *)(v10 + 8);
        if (v11)
        {
          if ((*(_BYTE *)(v11 + 45) & 4) == 0)
            v11 = 0;
          v13 = *(_DWORD *)(v11 + 152);
          v12 = *(_DWORD *)(v11 + 156);
          if (v12 == 0x80000000)
            v14 = 0x7FFFFFFF;
          else
            v14 = -v12;
          if (v13 == 0x80000000)
            v15 = 0x7FFFFFFF;
          else
            v15 = -v13;
          v16 = (v24.n128_u32[0] >> 31) + 0x7FFFFFFF;
          if (!__OFADD__(v24.n128_u32[0], v15))
            v16 = v24.n128_u32[0] + v15;
          v17 = (v24.n128_u32[1] >> 31) + 0x7FFFFFFF;
          if (!__OFADD__(v24.n128_u32[1], v14))
            v17 = v24.n128_u32[1] + v14;
          v24.n128_u64[0] = __PAIR64__(v17, v16);
          if ((_BYTE)v26)
          {
            v18 = __OFADD__((_DWORD)v25, v15);
            v19 = v25 + v15;
            if (v18)
              v19 = (v25 >> 31) + 0x7FFFFFFF;
            v18 = __OFADD__(DWORD1(v25), v14);
            v20 = DWORD1(v25) + v14;
            v21 = (DWORD1(v25) >> 31) + 0x7FFFFFFF;
            if (!v18)
              v21 = v20;
            *(_QWORD *)&v25 = __PAIR64__(v21, v19);
          }
        }
      }
    }
    WebCore::RenderBox::computeVisibleRectsInContainer(a1, a3, &v24, a4, a5);
  }
  return result;
}

WebCore::RenderObject *WebCore::markCellDirtyWhenCollapsedBorderChanges(WebCore::RenderObject *this, WebCore::RenderTableCell *a2)
{
  uint64_t v2;
  int v3;
  WebCore::RenderElement *v4;
  uint64_t v5;
  int v6;

  if (this)
  {
    v2 = (uint64_t)this;
    v3 = *((_DWORD *)this + 5);
    if ((v3 & 8) == 0)
    {
      *((_DWORD *)this + 5) = v3 | 8;
      v4 = WebCore::RenderObject::markContainingBlocksForLayout(this, 0);
      WebCore::RenderObject::scheduleLayout((WebCore::RenderObject *)v2, v4);
      if ((*(_BYTE *)(v2 + 21) & 0x80) != 0)
      {
        if ((*(_BYTE *)(v2 + 45) & 0x10) == 0
          || ((v5 = *(_QWORD *)(v2 + 144)) == 0
            ? (v6 = MEMORY[8])
            : (v6 = *(_DWORD *)(v5 + 8) + 1, *(_DWORD *)(v5 + 8) = v6),
              *(_QWORD *)(v5 + 24) = *(_QWORD *)(v5 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000,
              !v6))
        {
          __break(0xC471u);
          JUMPOUT(0x196441358);
        }
        *(_DWORD *)(v5 + 8) = v6 - 1;
      }
    }
    return (WebCore::RenderObject *)WebCore::RenderObject::setPreferredLogicalWidthsDirty(v2, 1, 1);
  }
  return this;
}

uint64_t WebCore::CollapsedBorderValue::CollapsedBorderValue(uint64_t result, float *a2, uint64_t a3, char a4)
{
  float v4;
  double v5;
  int v6;
  char v7;
  char v8;
  uint64_t v9;
  _BOOL4 v10;
  unsigned int *v11;
  unsigned int v12;

  v4 = a2[4];
  v5 = 0.0;
  if (v4 == 0.0 || ((_BYTE)a2[5] & 0xF) == 0)
    goto LABEL_3;
  v5 = v4 * 64.0;
  if (v5 < 2147483650.0)
  {
    if (v5 > -2147483650.0)
    {
LABEL_3:
      v6 = (int)v5;
      goto LABEL_4;
    }
    v6 = 0x80000000;
  }
  else
  {
    v6 = 0x7FFFFFFF;
  }
LABEL_4:
  *(_DWORD *)result = v6;
  *(_QWORD *)(result + 8) = a3;
  if ((a3 & 0x8000000000000) != 0)
  {
    v11 = (unsigned int *)(a3 & 0xFFFFFFFFFFFFLL);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
  }
  v7 = (_BYTE)a2[5] & 0xF | (16 * a4);
  *(_BYTE *)(result + 16) = v7 | *(_BYTE *)(result + 16) & 0x80;
  if (*((_DWORD *)a2 + 2) || (v9 = *(_QWORD *)a2, (*(_QWORD *)a2 & 0x4000000000000) == 0))
  {
    v8 = 0;
  }
  else
  {
    if ((v9 & 0x8000000000000) != 0)
      v10 = *(float *)((v9 & 0xFFFFFFFFFFFFLL) + 0x10) > 0.0;
    else
      v10 = *(_QWORD *)a2 != 0;
    if (v10)
      v8 = 0;
    else
      v8 = 0x80;
  }
  *(_BYTE *)(result + 16) = v8 | v7;
  return result;
}

uint64_t WebCore::chooseBorder(uint64_t this, const WebCore::CollapsedBorderValue *a2, const WebCore::CollapsedBorderValue *a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  char v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  unsigned int *v14;
  unsigned int v15;
  int v16;
  int v17;

  v3 = *((unsigned __int8 *)a3 + 16);
  if ((v3 & 0x70) != 0)
  {
    v4 = *((unsigned __int8 *)a2 + 16);
    if ((v4 & 0x70) == 0)
      goto LABEL_13;
    v5 = v3 & 0xF;
    v6 = v4 & 0xF;
    if (v5 == 1)
    {
      if (v6 != 1)
        goto LABEL_13;
    }
    else
    {
      if (v6 == 1 || v5 == 0)
        goto LABEL_9;
      if ((v4 & 0xF) == 0)
        goto LABEL_13;
      if ((v4 & 0xE) != 0)
        v10 = *(_DWORD *)a2;
      else
        v10 = 0;
      v11 = v3 & 0xE;
      if ((v3 & 0xE) != 0)
        v12 = *(_DWORD *)a3;
      else
        v12 = 0;
      if (v10 != v12)
      {
        if ((v4 & 0xE) != 0)
          v16 = *(_DWORD *)a2;
        else
          v16 = 0;
        if (v11)
          v17 = *(_DWORD *)a3;
        else
          v17 = 0;
        if (v16 >= v17)
          goto LABEL_9;
        goto LABEL_13;
      }
      v13 = v6 >= v5;
      if (v6 == v5)
        v13 = ((v4 >> 4) & 7) >= ((v3 >> 4) & 7);
      if (!v13)
LABEL_13:
        a2 = a3;
    }
  }
LABEL_9:
  v8 = *((_BYTE *)a2 + 16);
  if ((v8 & 0xF) == 1)
  {
    v8 = 0;
    *(_DWORD *)this = 0;
    *(_QWORD *)(this + 8) = 0;
  }
  else
  {
    *(_DWORD *)this = *(_DWORD *)a2;
    v9 = *((_QWORD *)a2 + 1);
    *(_QWORD *)(this + 8) = v9;
    if ((v9 & 0x8000000000000) != 0)
    {
      v14 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFLL);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 + 1, v14));
      v8 = *((_BYTE *)a2 + 16);
    }
  }
  *(_BYTE *)(this + 16) = v8;
  return this;
}

unint64_t WebCore::RenderTableCell::borderWidths(WebCore::RenderTableCell *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v13;

  v2 = *((_QWORD *)this + 4);
  if (!v2)
    goto LABEL_15;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    goto LABEL_15;
  if (*(_BYTE *)(v3 + 46) != 39)
  {
    __break(0xC471u);
    JUMPOUT(0x1964417F0);
  }
  v4 = *(_QWORD *)(v3 + 32);
  if (!v4)
    goto LABEL_15;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    goto LABEL_15;
  if (*(_BYTE *)(v5 + 46) != 40)
  {
    __break(0xC471u);
    JUMPOUT(0x196441810);
  }
  v6 = *(_QWORD *)(v5 + 32);
  if (v6 && (v7 = *(_QWORD *)(v6 + 8)) != 0)
  {
    v8 = *(unsigned __int8 *)(v7 + 46);
    if (v8 != 35 && v8 != 63)
    {
      __break(0xC471u);
      JUMPOUT(0x196441830);
    }
    if ((*(_BYTE *)(v7 + 124) & 4) != 0)
    {
      v11 = WebCore::RenderTableCell::borderHalfTop(this, 0);
      v10 = WebCore::RenderTableCell::borderHalfRight(this, 0);
      WebCore::RenderTableCell::borderHalfBottom(this, 0);
      WebCore::RenderTableCell::borderHalfLeft(this, 0);
    }
    else
    {
      v9 = WebCore::RenderBlock::borderWidths(this);
      v10 = HIDWORD(v9);
      v11 = v9;
    }
  }
  else
  {
LABEL_15:
    v13 = WebCore::RenderBlock::borderWidths(this);
    v11 = v13;
    v10 = HIDWORD(v13);
  }
  return v11 | (unint64_t)(v10 << 32);
}

uint64_t WebCore::RenderTableCell::paint(uint64_t this, WebCore::PaintInfo *a2, const WebCore::LayoutPoint *a3)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  BOOL v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int *v19;
  int v20;
  int v21;
  unint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  BOOL v27;
  unint64_t v28;
  BOOL v29;
  signed int v31;
  int v32;
  int v33;
  unint64_t v34;
  signed int v35;
  signed int v36;
  int v37;
  int v38;
  int v39;
  _BOOL4 v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  WebCore::GraphicsContext *v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  int v48;
  unsigned int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  uint64_t v59;
  float v60;
  uint64_t v61;
  uint64_t v62;
  float *v63;
  int v64;
  uint64_t v65;
  unint64_t v66;
  float v67;
  float v68;
  float v69;
  int v70;
  int v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  unsigned int v80;
  unint64_t v81;
  WebCore::RegionContext *v82;
  float v83;
  float v84;
  unsigned int v85;
  unint64_t v86;
  uint64_t v87;
  int v88;
  __int16 v89;
  WTF *v90;
  void *v91;
  uint64_t v92;
  int32x2_t v93;
  unsigned int v94;
  int v95;
  int v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  int v100;
  int32x2_t v101;
  float v102;
  float v103;
  float v104;
  float v105;
  int32x2_t v106[6];
  unint64_t v107;
  unint64_t v108;

  v4 = this;
  v6 = *(_DWORD *)(this + 152);
  v5 = *(_DWORD *)(this + 156);
  v7 = *((_DWORD *)a3 + 1);
  v8 = __OFADD__(*(_DWORD *)a3, v6);
  v9 = *(_DWORD *)a3 + v6;
  if (v8)
    v10 = ((*(_DWORD *)a3 >> 31) + 0x7FFFFFFF);
  else
    v10 = v9;
  v8 = __OFADD__(v7, v5);
  v11 = v7 + v5;
  LODWORD(v12) = (v7 >> 31) + 0x7FFFFFFF;
  if (v8)
    v12 = v12;
  else
    v12 = v11;
  v101 = (int32x2_t)(v10 | (v12 << 32));
  v13 = *((unsigned __int16 *)a2 + 8);
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 24) + 8) + 40) + 8) + 1272) == *(_QWORD *)(*(_QWORD *)(this + 24) + 8))
    goto LABEL_45;
  v14 = *(_QWORD *)a2;
  v15 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)a2 + 21) & 0x10) != 0 && (*(_BYTE *)(this + 21) & 0x80) != 0)
  {
    v16 = *(_QWORD *)(*(_QWORD *)(this + 144) + 264);
    if (v16)
    {
      if (*(_BYTE *)(v16 + 79) && *(_QWORD *)(*(_QWORD *)(v16 + 96) + 256))
        goto LABEL_45;
    }
  }
  v17 = *(_QWORD *)(this + 192);
  if (v17)
  {
    v18 = *(_QWORD *)(v17 + 20);
    v19 = (int *)(v17 + 28);
  }
  else
  {
    v18 = 0;
    v19 = (int *)(this + 160);
  }
  v21 = *v19;
  v20 = v19[1];
  v22 = HIDWORD(v18);
  v23 = (unsigned __int16)*(_DWORD *)(this + 124) >> 13;
  if (v23 <= 5 && ((1 << v23) & 0x2A) != 0)
  {
    if ((*(_BYTE *)(this + 21) & 0x10) != 0)
    {
      v97 = *(_DWORD *)(this + 160);
      v8 = __OFADD__((_DWORD)v18, v21);
      v98 = v18 + v21;
      this = 0x7FFFFFFFLL;
      v99 = (v18 >> 31) + 0x7FFFFFFF;
      if (!v8)
        v99 = v98;
      v8 = __OFSUB__(v97, v99);
      LODWORD(v18) = v97 - v99;
      v100 = (v97 >> 31) + 0x7FFFFFFF;
      if (v8)
        LODWORD(v18) = v100;
    }
    else
    {
      v94 = *(_DWORD *)(this + 164);
      this = 0x7FFFFFFFLL;
      v95 = (HIDWORD(v18) >> 31) + 0x7FFFFFFF;
      if (!__OFADD__(HIDWORD(v18), v20))
        v95 = HIDWORD(v18) + v20;
      v8 = __OFSUB__(v94, v95);
      LODWORD(v22) = v94 - v95;
      v96 = (v94 >> 31) + 0x7FFFFFFF;
      if (v8)
        LODWORD(v22) = v96;
    }
  }
  v8 = __OFADD__((_DWORD)v18, (_DWORD)v10);
  v24 = v18 + v10;
  v25 = (v18 >> 31) + 0x7FFFFFFF;
  if (!v8)
    v25 = v24;
  v8 = __OFADD__((_DWORD)v22, (_DWORD)v12);
  v26 = v22 + v12;
  if (v8)
    v26 = (v22 >> 31) + 0x7FFFFFFF;
  v27 = v21 < 1 || v20 < 1;
  v28 = HIDWORD(v15);
  v29 = v27 || (int)v15 < 1;
  if (!v29 && SHIDWORD(v15) >= 1)
  {
    v8 = __OFADD__((_DWORD)v14, (_DWORD)v15);
    v31 = v14 + v15;
    if (v8)
      v31 = (v14 >> 31) + 0x7FFFFFFF;
    if ((int)v25 < v31)
    {
      v8 = __OFADD__(v25, v21);
      v32 = v25 + v21;
      v33 = (v25 >> 31) + 0x7FFFFFFF;
      if (v8)
        v32 = v33;
      if (v32 > (int)v14)
      {
        v34 = HIDWORD(v14);
        v8 = __OFADD__((_DWORD)v34, (_DWORD)v28);
        v35 = v34 + v28;
        v36 = (v34 >> 31) + 0x7FFFFFFF;
        if (!v8)
          v36 = v35;
        if ((int)v26 < v36)
        {
          v8 = __OFADD__(v26, v20);
          v37 = v26 + v20;
          v38 = (v26 >> 31) + 0x7FFFFFFF;
          if (!v8)
            v38 = v37;
          if (v38 > (int)v34)
          {
LABEL_45:
            if (*((unsigned __int16 *)a2 + 8) > 0x3Fu)
            {
              if (v13 == 4096)
              {
                v39 = 0;
LABEL_52:
                v40 = (*(_BYTE *)(v4 + 22) & 1) != 0 && (*(_BYTE *)(*(_QWORD *)(v4 + 144) + 25) & 8) == 0;
                if ((v39 | v40) != 1)
                  goto LABEL_55;
                v58 = *((unsigned __int16 *)a2 + 8);
                if (v58 == 16)
                {
                  v89 = 32;
                }
                else
                {
                  if (v58 != 1)
                  {
LABEL_82:
                    v59 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8) + 40) + 8)
                                    + 528);
                    v60 = 1.0;
                    if (v59)
                    {
                      v61 = *(_QWORD *)(v59 + 8);
                      if (v61)
                      {
                        v62 = *(_QWORD *)(v61 + 24);
                        if (v62)
                        {
                          v63 = *(float **)(v62 + 8);
                          if (v63)
                          {
                            v64 = (*(_DWORD *)v63)++;
                            v60 = v63[91];
                            if (v64)
                            {
                              *(_DWORD *)v63 = v64;
                            }
                            else
                            {
                              WebCore::Page::~Page((uint64_t)v63);
                              WTF::fastFree(v90, v91);
                            }
                          }
                        }
                      }
                    }
                    if (v39)
                      v65 = (*(uint64_t (**)(uint64_t, int32x2_t *))(*(_QWORD *)v4 + 1440))(v4, &v101);
                    else
                      v65 = (*(uint64_t (**)(uint64_t, int32x2_t *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v4 + 1416))(v4, &v101, 0, 0, *((unsigned __int16 *)a2 + 8));
                    v107 = v65;
                    v108 = v66;
                    v102 = WebCore::snapRectToDevicePixels((int *)&v107, v60);
                    v103 = v67;
                    v104 = v68;
                    v105 = v69;
                    (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 10) + 96))(*((_QWORD *)a2 + 10), 1);
                    if (WebCore::RenderStyle::hasBorderRadius((WebCore::RenderStyle *)(v4 + 80)))
                    {
                      v92 = *((_QWORD *)a2 + 10);
                      v93 = *(int32x2_t *)(v4 + 160);
                      v106[0] = v101;
                      v106[1] = v93;
                      WebCore::RenderStyle::getRoundedInnerBorderFor((WebCore::RenderStyle *)(v4 + 80), (const WebCore::LayoutRect *)v106, 1, 1, (uint64_t)&v107);
                      WebCore::RoundedRect::pixelSnappedRoundedRectForPainting((WebCore::RoundedRect *)&v107, v60, (uint64_t)v106);
                      (*(void (**)(uint64_t, int32x2_t *))(*(_QWORD *)v92 + 464))(v92, v106);
                    }
                    (*(void (**)(_QWORD, float *))(**((_QWORD **)a2 + 10) + 456))(*((_QWORD *)a2 + 10), &v102);
                    v70 = *((unsigned __int16 *)a2 + 8);
                    if (v70 != 4096 && v70 != 0x2000)
                    {
LABEL_94:
                      (*(void (**)(uint64_t, WebCore::PaintInfo *, int32x2_t *))(*(_QWORD *)v4 + 1448))(v4, a2, &v101);
                      v71 = *((unsigned __int16 *)a2 + 8);
                      if (v71 == 4096 || v71 == 0x2000)
                      {
                        v87 = *((_QWORD *)a2 + 9);
                        v88 = *(_DWORD *)(v87 + 44);
                        if (v88)
                          *(_DWORD *)(v87 + 44) = v88 - 1;
                      }
                      this = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 10) + 104))(*((_QWORD *)a2 + 10), 1);
                      if (v13 == 16)
                      {
                        *((_WORD *)a2 + 8) = 64;
                        this = (*(uint64_t (**)(uint64_t, WebCore::PaintInfo *, int32x2_t *))(*(_QWORD *)v4 + 1448))(v4, a2, &v101);
                      }
                      else if (v13 != 1)
                      {
                        goto LABEL_56;
                      }
                      *((_WORD *)a2 + 8) = v13;
LABEL_56:
                      if (v13 <= 1 && (*(_BYTE *)(v4 + 22) & 1) != 0)
                      {
                        v42 = *(_QWORD *)(v4 + 144);
                        if (v42)
                        {
                          this = *(_QWORD *)(v42 + 264);
                          if (this)
                          {
                            if ((*(_BYTE *)(*(_QWORD *)(v4 + 104) + 239) & 4) == 0
                              && (*(_BYTE *)(v4 + 120) & 0x30) == 0)
                            {
                              v43 = *((_QWORD *)a2 + 3);
                              if ((!v43 || v43 == v4) && (*((_BYTE *)a2 + 20) & 0x40) == 0)
                              {
                                v44 = (WebCore::GraphicsContext *)*((_QWORD *)a2 + 10);
                                v106[0] = (int32x2_t)((((int)(v101.i32[0] - (v41 & 0xFFFFFFC0) + 32) >> 6)
                                                                   + v101.i32[0] / 64) | ((unint64_t)(((int)(v101.i32[1] - (v41 & 0xFFFFFFC0) + 32) >> 6) + v101.i32[1] / 64) << 32));
                                v45 = HIDWORD(*(_QWORD *)a2);
                                if ((int)*(_QWORD *)a2 >= 0)
                                  v46 = *(_QWORD *)a2;
                                else
                                  v46 = *(_QWORD *)a2 + 63;
                                v47 = *(_QWORD *)a2 - (v46 & 0xFFFFFFC0);
                                if ((int)v45 >= 0)
                                  v48 = HIDWORD(*(_QWORD *)a2);
                                else
                                  v48 = v45 + 63;
                                v49 = v45 - (v48 & 0xFFFFFFC0);
                                v50 = *((_DWORD *)a2 + 2);
                                v51 = *((_DWORD *)a2 + 3);
                                v8 = __OFADD__(v47, v50);
                                v52 = v47 + v50;
                                if (v8)
                                  v52 = (v47 >> 31) + 0x7FFFFFFF;
                                v53 = v46 >> 6;
                                v54 = v48 >> 6;
                                v55 = v49 + v51;
                                if (__OFADD__(v49, v51))
                                  v55 = (v49 >> 31) + 0x7FFFFFFF;
                                v56 = v49 + 32;
                                v57 = v47 + 32;
                                v107 = (v53 + (v57 >> 6)) | ((unint64_t)(v54 + (v56 >> 6)) << 32);
                                v108 = (v52 / 64 - (v57 >> 6) + ((int)(v52 - (v53 & 0xFFFFFFC0) + 32) >> 6)) | ((unint64_t)(v55 / 64 - (v56 >> 6) + ((int)(v55 - (v52 & 0xFFFFFFC0) + 32) >> 6)) << 32);
                                return WebCore::RenderLayerScrollableArea::paintOverflowControls(this, v44, v106, (const WebCore::IntRect *)&v107, 0);
                              }
                            }
                          }
                        }
                      }
                      return this;
                    }
                    v72 = floorf(v102);
                    if (v72 < 2147500000.0 && v72 > -2147500000.0
                      || (v73 = 2147500000.0, v72 < 2147500000.0) && (v73 = -2147500000.0, v72 > -2147500000.0))
                    {
                      v73 = (float)(int)v72;
                    }
                    v74 = floorf(v103);
                    if (v74 < 2147500000.0 && v74 > -2147500000.0
                      || (v75 = 2147500000.0, v74 < 2147500000.0) && (v75 = -2147500000.0, v74 > -2147500000.0))
                    {
                      v75 = (float)(int)v74;
                    }
                    v76 = ceilf(v102 + v104);
                    if (v76 < 2147500000.0 && v76 > -2147500000.0
                      || (v77 = 2147500000.0, v76 < 2147500000.0) && (v77 = -2147500000.0, v76 > -2147500000.0))
                    {
                      v77 = (float)(int)v76;
                    }
                    v78 = ceilf(v103 + v105);
                    if (v78 < 2147500000.0 && v78 > -2147500000.0
                      || (v79 = 2147500000.0, v78 < 2147500000.0) && (v79 = -2147500000.0, v78 > -2147500000.0))
                    {
                      v79 = (float)(int)v78;
                    }
                    if (v73 < 2147500000.0 && v73 > -2147500000.0)
                      goto LABEL_113;
                    if (v73 >= 2147500000.0)
                    {
                      v80 = 0x7FFFFFFF;
                    }
                    else
                    {
                      if (v73 > -2147500000.0)
                      {
LABEL_113:
                        v80 = (int)v73;
                        goto LABEL_114;
                      }
                      v80 = 0x80000000;
                    }
LABEL_114:
                    if (v75 < 2147500000.0 && v75 > -2147500000.0)
                      goto LABEL_116;
                    if (v75 >= 2147500000.0)
                    {
                      v81 = 0x7FFFFFFF00000000;
                      goto LABEL_117;
                    }
                    if (v75 > -2147500000.0)
LABEL_116:
                      v81 = (unint64_t)(int)v75 << 32;
                    else
                      v81 = 0x8000000000000000;
LABEL_117:
                    v82 = (WebCore::RegionContext *)*((_QWORD *)a2 + 9);
                    v83 = v77 - v73;
                    v84 = v79 - v75;
                    if (v83 < 2147500000.0 && v83 > -2147500000.0)
                      goto LABEL_119;
                    if (v83 >= 2147500000.0)
                    {
                      v85 = 0x7FFFFFFF;
                    }
                    else
                    {
                      if (v83 > -2147500000.0)
                      {
LABEL_119:
                        v85 = (int)v83;
                        goto LABEL_120;
                      }
                      v85 = 0x80000000;
                    }
LABEL_120:
                    if (v84 < 2147500000.0 && v84 > -2147500000.0)
                      goto LABEL_122;
                    if (v84 >= 2147500000.0)
                    {
                      v86 = 0x7FFFFFFF00000000;
                      goto LABEL_123;
                    }
                    if (v84 > -2147500000.0)
LABEL_122:
                      v86 = (unint64_t)(int)v84 << 32;
                    else
                      v86 = 0x8000000000000000;
LABEL_123:
                    v107 = v81 | v80;
                    v108 = v86 | v85;
                    WebCore::RegionContext::pushClip(v82, (const WebCore::IntRect *)&v107);
                    goto LABEL_94;
                  }
                  *((_WORD *)a2 + 8) = 0;
                  (*(void (**)(uint64_t, WebCore::PaintInfo *, int32x2_t *))(*(_QWORD *)v4 + 1448))(v4, a2, &v101);
                  v89 = 2;
                }
                *((_WORD *)a2 + 8) = v89;
                goto LABEL_82;
              }
              if (v13 == 64 || v13 == 1024)
                goto LABEL_55;
            }
            else if (!*((_WORD *)a2 + 8))
            {
LABEL_55:
              this = (*(uint64_t (**)(uint64_t, WebCore::PaintInfo *, int32x2_t *))(*(_QWORD *)v4 + 1448))(v4, a2, &v101);
              goto LABEL_56;
            }
            v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 1432))(v4);
            goto LABEL_52;
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::addBorderStyle(uint64_t a1, unint64_t a2)
{
  unsigned __int8 v2;
  unsigned int v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _BYTE *v12;
  uint64_t v13;
  int v14;

  v2 = *(_BYTE *)(a2 + 16);
  if ((v2 & 0x70) != 0)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3)
    {
      v4 = *(_QWORD *)a1;
      if ((*(_BYTE *)(a2 + 16) & 0xE) != 0)
      {
        v12 = (_BYTE *)(v4 + 16);
        v13 = *(unsigned int *)(a1 + 12);
        while (1)
        {
          v14 = (*v12 & 0xE) != 0 ? *((_DWORD *)v12 - 4) : 0;
          if (v14 == *(_DWORD *)a2 && ((*v12 ^ v2) & 0x7F) == 0)
            break;
          v12 += 24;
          if (!--v13)
            goto LABEL_8;
        }
      }
      else
      {
        v5 = (_BYTE *)(v4 + 16);
        v6 = *(unsigned int *)(a1 + 12);
        while ((*v5 & 0xE) != 0 && *((_DWORD *)v5 - 4) || ((*v5 ^ v2) & 0x7F) != 0)
        {
          v5 += 24;
          if (!--v6)
            goto LABEL_8;
        }
      }
    }
    else
    {
LABEL_8:
      if (v3 == *(_DWORD *)(a1 + 8))
      {
        return WTF::Vector<WebCore::CollapsedBorderValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CollapsedBorderValue&>(a1, a2);
      }
      else
      {
        v7 = *(_QWORD *)a1;
        v8 = *(_QWORD *)a1 + 24 * v3;
        *(_DWORD *)v8 = *(_DWORD *)a2;
        v9 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(v8 + 8) = v9;
        if ((v9 & 0x8000000000000) != 0)
        {
          v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFLL);
          do
            v11 = __ldaxr(v10);
          while (__stlxr(v11 + 1, v10));
        }
        *(_BYTE *)(v7 + 24 * v3 + 16) = *(_BYTE *)(a2 + 16);
        ++*(_DWORD *)(a1 + 12);
      }
    }
  }
  return a1;
}

uint64_t WebCore::compareBorderValuesForQSort(WebCore *this, unsigned __int8 *a2, const void *a3)
{
  unsigned int v3;
  int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v10;
  int v11;
  int v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  unsigned int v16;

  v3 = *((unsigned __int8 *)this + 16);
  if ((v3 & 0xE) != 0)
    v4 = *(_DWORD *)this;
  else
    v4 = 0;
  v5 = a2[16];
  if ((v5 & 0xE) != 0)
    v6 = *(_DWORD *)a2;
  else
    v6 = 0;
  if (v4 == v6 && ((v5 ^ v3) & 0x7F) == 0)
    return 0;
  v7 = v3 & 0x70;
  if ((v5 & 0x70) == 0)
    return v7 != 0;
  if ((v3 & 0x70) == 0)
    return 0xFFFFFFFFLL;
  v8 = v5 & 0xF;
  v7 = v3 & 0xF;
  if (v8 == 1)
  {
    if (v7 == 1)
      return 0;
    else
      return 0xFFFFFFFFLL;
  }
  else
  {
    if (v7 == 1)
      return 1;
    if ((v5 & 0xF) == 0)
      return v7 != 0;
    if ((v3 & 0xF) == 0)
      return 0xFFFFFFFFLL;
    v10 = *(_DWORD *)this;
    v11 = *(_DWORD *)a2;
    if ((v3 & 0xE) != 0)
      v12 = *(_DWORD *)this;
    else
      v12 = 0;
    if ((v5 & 0xE) != 0)
      v13 = *(_DWORD *)a2;
    else
      v13 = 0;
    if (v12 == v13)
    {
      v14 = v7 >= v8;
      if (v7 != v8 || (v15 = (v3 >> 4) & 7, v16 = (v5 >> 4) & 7, v14 = v15 >= v16, v15 != v16))
      {
        if (v14)
          return 1;
        else
          return 0xFFFFFFFFLL;
      }
      return 0;
    }
    if ((v3 & 0xE) == 0)
      v10 = 0;
    if ((v5 & 0xE) == 0)
      v11 = 0;
    if (v10 < v11)
      return 0xFFFFFFFFLL;
    else
      return 1;
  }
}

void WebCore::RenderTableCell::paintCollapsedBorders(WebCore::RenderTableCell *this, WebCore::PaintInfo *a2, const WebCore::LayoutPoint *a3)
{
  WebCore::RenderTableCell *v3;
  BOOL v4;
  int v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  void *v26;
  int v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t v74;
  int v75;
  int v76;
  int v77;
  unint64_t v78;
  uint64_t v79;
  float v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  double v85;
  float v86;
  double v87;
  int v88;
  double v89;
  float v90;
  double v91;
  int v92;
  double v93;
  float v94;
  double v95;
  int v96;
  double v97;
  float v98;
  double v99;
  int v100;
  unsigned int v101;
  unsigned int v102;
  unsigned int v103;
  int v104;
  unsigned int v105;
  int v106;
  char v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int v111;
  BOOL v112;
  BOOL v113;
  BOOL v114;
  BOOL v115;
  BOOL v116;
  unsigned int v117;
  _BOOL4 v118;
  int v119;
  int v120;
  char v121;
  unsigned int v122;
  unsigned int v123;
  WebCore::RenderTableCell **v124;
  int v125;
  _BOOL4 v126;
  int v127;
  unsigned int v128;
  unsigned int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  char v135;
  WebCore::RenderTableCell **v136;
  WebCore::RenderTableCell *v137;
  unsigned int v139;
  WebCore::RenderTableCell **v140;
  int v141;
  char v142;
  WebCore::RenderTableCell *v143;
  WebCore::RenderTableCell **v144;
  WebCore::RenderTableCell *v145;
  unsigned int v147;
  WebCore::RenderTableCell **v148;
  int v149;
  unsigned int v150;
  int v151;
  int v152;
  int v153;
  int v154;
  char v155;
  WebCore::RenderTableCell **v156;
  WebCore::RenderTableCell *v157;
  unsigned int v159;
  WebCore::RenderTableCell **v160;
  int v161;
  void *v162;
  uint64_t v163;
  WebCore::RenderTableCell **v164;
  uint64_t v165;
  unsigned __int8 v166;
  uint64_t v167;
  float32x4_t v168;
  uint64_t v169;
  uint64_t v170;
  int v171;
  int v172;
  int *v173;
  unsigned __int8 v174;
  int v175;
  _QWORD *v176;
  int32x4_t v177;
  unsigned int v178;
  unsigned int v179;
  int v180;
  int v181;
  int v182;
  int v183;
  int v184;
  unint64_t v185;
  uint64_t v186;
  unint64_t v187;
  int v188;
  int v189;
  WTF *v190;
  void *v191;
  uint64_t v192;
  WebCore::RenderTableCell *v193;
  int v194;
  uint64_t v195;
  WebCore::RenderTableCell *v196;
  int v197;
  unsigned int *v198;
  unsigned int v199;
  unsigned int *v200;
  unsigned int v201;
  unsigned int *v202;
  unsigned int v203;
  unsigned int *v204;
  unsigned int v205;
  unsigned int *v206;
  unsigned int v207;
  unsigned int *v208;
  unsigned int v209;
  int v210;
  uint64_t v211;
  int v212;
  int v213;
  uint64_t v214;
  int v215;
  unsigned int *v216;
  unsigned int v217;
  unsigned int v218;
  unsigned int *v219;
  unsigned int v220;
  unsigned int v221;
  unsigned int *v222;
  unsigned int v223;
  unsigned int v224;
  unsigned int *v225;
  unsigned int v226;
  unsigned int v227;
  unsigned int *v228;
  unsigned int v229;
  unsigned int v230;
  unsigned int *v231;
  unsigned int v232;
  unsigned int v233;
  unsigned int *v234;
  unsigned int v235;
  unsigned int v236;
  unsigned int *v237;
  unsigned int v238;
  unsigned int v239;
  unsigned int *v240;
  unsigned int v241;
  unsigned int v242;
  uint64_t v243;
  uint64_t v244;
  _BOOL4 v245;
  char v246;
  unint64_t v247;
  unsigned int v248;
  _BOOL4 v249;
  unsigned int v250;
  char v251;
  unsigned int v252;
  _BOOL4 v253;
  unint64_t v254;
  unsigned int *v255;
  unsigned int v256;
  unsigned int *v257;
  unsigned int v258;
  BOOL v259;
  unint64_t v260;
  unsigned int *v261;
  unsigned int v262;
  char v263;
  unint64_t v264;
  unsigned int v265;
  unsigned int *v266;
  unsigned int v267;
  BOOL v268;
  unint64_t v269;
  unsigned int *v270;
  unsigned int v271;
  unsigned int v272;
  char v273;
  unsigned int v274;
  unsigned int *v275;
  unsigned int v276;
  unsigned int v277;
  char v278;
  char v279;
  int v280;
  int v281;
  unsigned int v282;
  unsigned int v283;
  unsigned int v284;
  unsigned int v285;
  BOOL v286;
  BOOL v287;
  BOOL v288;
  BOOL v289;
  unsigned int v290;
  unsigned int v291;
  unsigned int v292;
  unsigned int v293;
  char v294;
  char v295;
  char v296;
  char v297;
  float32x4_t v298;
  unsigned int v299;
  unsigned int v300;
  unsigned int v301;
  unsigned int v302;
  uint64_t v303;
  WebCore::RenderTableCell *v304;
  unint64_t v305;
  WebCore::RenderTableCell *v306;
  uint64_t v307;
  int v308;
  char v309;
  uint64_t v310;
  uint64_t v311;
  int v312;
  uint64_t v313;
  char v314;
  uint64_t v315;
  uint64_t v316;
  int v317;
  uint64_t v318;
  char v319;
  uint64_t v320;
  uint64_t v321;
  int v322;
  uint64_t v323;
  char v324;
  uint64_t v325;
  uint64_t v326;
  unsigned int v327;
  int v328;
  unint64_t v329;
  char v330;
  int v331;
  uint64_t v332;
  char v333;
  unsigned int v334;
  unint64_t v335;
  char v336;
  int v337;
  unint64_t v338;
  char v339;
  __int128 v340;
  float32x4_t v341;
  double v342;
  double v343;

  v3 = (WebCore::RenderTableCell *)*((_QWORD *)a2 + 3);
  if (v3)
    v4 = v3 == this;
  else
    v4 = 1;
  if (v4 && (*(_BYTE *)(*((_QWORD *)this + 13) + 239) & 4) == 0 && (*((_BYTE *)this + 120) & 0x30) == 0)
  {
    v7 = *((_DWORD *)a2 + 1);
    v8 = *((_DWORD *)a2 + 3);
    v10 = *((_DWORD *)this + 38);
    v9 = *((_DWORD *)this + 39);
    v11 = *((_DWORD *)a3 + 1);
    v116 = __OFADD__(*(_DWORD *)a3, v10);
    v12 = *(_DWORD *)a3 + v10;
    v13 = v116 ? (*(_DWORD *)a3 >> 31) + 0x7FFFFFFF : v12;
    v116 = __OFADD__(v11, v9);
    v14 = v11 + v9;
    v15 = v116 ? (v11 >> 31) + 0x7FFFFFFF : v14;
    v16 = *((_QWORD *)this + 20);
    v17 = *((_QWORD *)this + 4);
    if (!v17)
      goto LABEL_307;
    v18 = *(_QWORD *)(v17 + 8);
    if (!v18)
      goto LABEL_307;
    if (*(_BYTE *)(v18 + 46) != 39)
    {
      __break(0xC471u);
      JUMPOUT(0x196443300);
    }
    v19 = *(_QWORD *)(v18 + 32);
    if (!v19)
      goto LABEL_307;
    v20 = *(_QWORD *)(v19 + 8);
    if (!v20)
      goto LABEL_307;
    if (*(_BYTE *)(v20 + 46) != 40)
    {
      __break(0xC471u);
      JUMPOUT(0x1964433C0);
    }
    v21 = *(_QWORD *)(v20 + 32);
    if (v21)
    {
      v22 = *(_QWORD *)(v21 + 8);
      if (v22)
      {
        v23 = *(unsigned __int8 *)(v22 + 46);
        if (v23 != 35 && v23 != 63)
        {
          __break(0xC471u);
          JUMPOUT(0x19644366CLL);
        }
      }
    }
    else
    {
LABEL_307:
      v22 = 0;
    }
    v24 = (unsigned __int16)*(_DWORD *)(v22 + 124) >> 13;
    if ((v24 - 2) < 4)
    {
      if ((*(_BYTE *)(v22 + 123) & 4) != 0)
        v25 = WebCore::RenderTable::outerBorderEnd((WebCore::RenderTable *)v22, a2);
      else
        v25 = WebCore::RenderTable::outerBorderStart((WebCore::RenderTable *)v22, a2);
    }
    else if (v24 == 1)
    {
      v25 = WebCore::RenderTable::outerBorderAfter((WebCore::RenderTable *)v22, a2);
    }
    else
    {
      v25 = WebCore::RenderTable::outerBorderBefore((WebCore::RenderTable *)v22);
    }
    v27 = v15 - v25;
    if (__OFSUB__(v15, v25))
      v27 = (v15 >> 31) + 0x7FFFFFFF;
    v28 = (v7 >> 31) + 0x7FFFFFFF;
    if (!__OFADD__(v7, v8))
      v28 = v7 + v8;
    if (v27 < v28)
    {
      v29 = v15 + HIDWORD(v16);
      if (__OFADD__(v15, HIDWORD(v16)))
        v29 = (v15 >> 31) + 0x7FFFFFFF;
      v30 = *((_QWORD *)this + 4);
      if (!v30)
        goto LABEL_308;
      v31 = *(_QWORD *)(v30 + 8);
      if (!v31)
        goto LABEL_308;
      if (*(_BYTE *)(v31 + 46) != 39)
      {
        __break(0xC471u);
        JUMPOUT(0x196443320);
      }
      v32 = *(_QWORD *)(v31 + 32);
      if (!v32)
        goto LABEL_308;
      v33 = *(_QWORD *)(v32 + 8);
      if (!v33)
        goto LABEL_308;
      if (*(_BYTE *)(v33 + 46) != 40)
      {
        __break(0xC471u);
        JUMPOUT(0x1964433E0);
      }
      v34 = *(_QWORD *)(v33 + 32);
      if (v34)
      {
        v35 = *(_QWORD *)(v34 + 8);
        if (v35)
        {
          v36 = *(unsigned __int8 *)(v35 + 46);
          if (v36 != 35 && v36 != 63)
          {
            __break(0xC471u);
            JUMPOUT(0x19644368CLL);
          }
        }
      }
      else
      {
LABEL_308:
        v35 = 0;
      }
      v37 = (unsigned __int16)*(_DWORD *)(v35 + 124) >> 13;
      if ((v37 - 2) < 4)
      {
        if ((*(_BYTE *)(v35 + 123) & 4) != 0)
          v38 = WebCore::RenderTable::outerBorderStart((WebCore::RenderTable *)v35, v26);
        else
          v38 = WebCore::RenderTable::outerBorderEnd((WebCore::RenderTable *)v35, v26);
      }
      else if (v37 == 1)
      {
        v38 = WebCore::RenderTable::outerBorderBefore((WebCore::RenderTable *)v35);
      }
      else
      {
        v38 = WebCore::RenderTable::outerBorderAfter((WebCore::RenderTable *)v35, v26);
      }
      v39 = v29 + v38;
      if (__OFADD__(v29, v38))
        v39 = (v29 >> 31) + 0x7FFFFFFF;
      if (v39 > v7)
      {
        v40 = *(_QWORD *)(*((_QWORD *)this + 4) + 8);
        if (*(_BYTE *)(v40 + 46) != 39)
        {
          __break(0xC471u);
          JUMPOUT(0x1964432A0);
        }
        v41 = *(_QWORD *)(*(_QWORD *)(v40 + 32) + 8);
        if (*(_BYTE *)(v41 + 46) != 40)
        {
          __break(0xC471u);
          JUMPOUT(0x1964432C0);
        }
        v42 = *((_QWORD *)a2 + 10);
        v43 = *(_QWORD *)(*(_QWORD *)(v41 + 32) + 8);
        v44 = *(unsigned __int8 *)(v43 + 46);
        if (v44 != 35 && v44 != 63)
        {
          __break(0xC471u);
          JUMPOUT(0x19644364CLL);
        }
        if (*(_QWORD *)(v43 + 320) && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 40))(v42) & 1) == 0)
        {
          v45 = *((_QWORD *)this + 4);
          v46 = *(_QWORD *)(v45 + 8);
          if (*(_BYTE *)(v46 + 46) != 39)
          {
            __break(0xC471u);
            JUMPOUT(0x1964432E0);
          }
          switch((unsigned __int16)*(_DWORD *)(v46 + 124) >> 13)
          {
            case 2:
            case 4:
              v192 = WebCore::RenderTableCell::section(v45);
              v193 = this;
              v194 = 0;
              goto LABEL_314;
            case 3:
            case 5:
              v192 = WebCore::RenderTableCell::section(v45);
              v193 = this;
              v194 = 1;
              goto LABEL_314;
            default:
              if ((*(_DWORD *)(v46 + 120) & 0x4000000) != 0)
              {
                v47 = *(_QWORD *)(v46 + 32);
                if (v47)
                {
                  v48 = *(_QWORD *)(v47 + 8);
                  if (v48 && *(_BYTE *)(v48 + 46) != 40)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x196443340);
                  }
                }
                else
                {
                  v48 = 0;
                }
                v306 = this;
                LODWORD(v307) = 3;
                v49 = WTF::HashTable<std::pair<WebCore::RenderTableCell const*,int>,WTF::KeyValuePair<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue>>,WTF::DefaultHash<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashMap<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue,WTF::DefaultHash<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashTraits<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashTraits<WebCore::CollapsedBorderValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebCore::RenderTableCell const*,int>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue,WTF::DefaultHash<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashTraits<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashTraits<WebCore::CollapsedBorderValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WebCore::RenderTableCell const*,int>>>,std::pair<WebCore::RenderTableCell const*,int>>((uint64_t *)(v48 + 272), (uint64_t)&v306);
                v50 = *(uint64_t **)(v48 + 272);
                if (v50)
                  v50 += 5 * *((unsigned int *)v50 - 1);
                if (v50 == v49)
                {
                  LODWORD(v307) = 1;
                  v308 = 1077936128;
                  v309 = 0;
                  v337 = 0;
                  v338 = 0;
                  v339 = 96;
                  _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS8_17StyleCurrentColorEN3WTF9UniqueRefINS8_13StyleColorMixEEENSC_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSC_INSF_INS8_17HSLFunctionModernEEEEENSC_INSF_INS8_11HWBFunctionEEEEENSC_INSF_INS8_11LabFunctionEEEEENSC_INSF_INS8_11LCHFunctionEEEEENSC_INSF_INS8_13OKLabFunctionEEEEENSC_INSF_INS8_13OKLCHFunctionEEEEENSC_INSF_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEEEENSC_INSF_INS11_INS8_21ExtendedLinearEncodedIfS1N_EEEEEEEENSC_INSF_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSC_INSF_INS1X_INS1Y_IfLS1Z_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS29_1EJS9_SA_SE_SI_SL_SO_SR_SU_SX_S10_S17_S1C_S1H_S1M_S1R_S1W_S23_S27_EEEEEEDcS2B_DpT0_(&v341, &v306);
                }
                else
                {
                  v337 = *((_DWORD *)v49 + 4);
                  v51 = v49[3];
                  v338 = v51;
                  if ((v51 & 0x8000000000000) != 0)
                  {
                    v202 = (unsigned int *)(v51 & 0xFFFFFFFFFFFFLL);
                    do
                      v203 = __ldaxr(v202);
                    while (__stlxr(v203 + 1, v202));
                  }
                  v339 = *((_BYTE *)v49 + 32);
                }
              }
              else
              {
                v192 = WebCore::RenderTableCell::section(v45);
                v193 = this;
                v194 = 2;
LABEL_314:
                WebCore::RenderTableSection::cachedCollapsedBorder(v192, (uint64_t)v193, v194, (uint64_t)&v337);
              }
              switch((unsigned __int16)*(_DWORD *)(v46 + 124) >> 13)
              {
                case 2:
                case 4:
                  v195 = WebCore::RenderTableCell::section(*((_QWORD *)this + 4));
                  v196 = this;
                  v197 = 1;
                  goto LABEL_316;
                case 3:
                case 5:
                  v195 = WebCore::RenderTableCell::section(*((_QWORD *)this + 4));
                  v196 = this;
                  v197 = 0;
                  goto LABEL_316;
                default:
                  v52 = *((_QWORD *)this + 4);
                  if ((*(_DWORD *)(v46 + 120) & 0x4000000) != 0)
                  {
                    if (!v52)
                      goto LABEL_310;
                    v53 = *(_QWORD *)(v52 + 8);
                    if (!v53)
                      goto LABEL_310;
                    if (*(_BYTE *)(v53 + 46) != 39)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x196443380);
                    }
                    v54 = *(_QWORD *)(v53 + 32);
                    if (v54)
                    {
                      v55 = *(_QWORD *)(v54 + 8);
                      if (v55 && *(_BYTE *)(v55 + 46) != 40)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x196443420);
                      }
                    }
                    else
                    {
LABEL_310:
                      v55 = 0;
                    }
                    v306 = this;
                    LODWORD(v307) = 2;
                    v56 = WTF::HashTable<std::pair<WebCore::RenderTableCell const*,int>,WTF::KeyValuePair<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue>>,WTF::DefaultHash<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashMap<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue,WTF::DefaultHash<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashTraits<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashTraits<WebCore::CollapsedBorderValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebCore::RenderTableCell const*,int>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue,WTF::DefaultHash<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashTraits<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashTraits<WebCore::CollapsedBorderValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WebCore::RenderTableCell const*,int>>>,std::pair<WebCore::RenderTableCell const*,int>>((uint64_t *)(v55 + 272), (uint64_t)&v306);
                    v57 = *(uint64_t **)(v55 + 272);
                    if (v57)
                      v57 += 5 * *((unsigned int *)v57 - 1);
                    if (v57 == v56)
                    {
                      LODWORD(v307) = 1;
                      v308 = 1077936128;
                      v309 = 0;
                      v334 = 0;
                      v335 = 0;
                      v336 = 96;
                      _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS8_17StyleCurrentColorEN3WTF9UniqueRefINS8_13StyleColorMixEEENSC_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSC_INSF_INS8_17HSLFunctionModernEEEEENSC_INSF_INS8_11HWBFunctionEEEEENSC_INSF_INS8_11LabFunctionEEEEENSC_INSF_INS8_11LCHFunctionEEEEENSC_INSF_INS8_13OKLabFunctionEEEEENSC_INSF_INS8_13OKLCHFunctionEEEEENSC_INSF_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEEEENSC_INSF_INS11_INS8_21ExtendedLinearEncodedIfS1N_EEEEEEEENSC_INSF_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSC_INSF_INS1X_INS1Y_IfLS1Z_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS29_1EJS9_SA_SE_SI_SL_SO_SR_SU_SX_S10_S17_S1C_S1H_S1M_S1R_S1W_S23_S27_EEEEEEDcS2B_DpT0_(&v341, &v306);
                    }
                    else
                    {
                      v334 = *((_DWORD *)v56 + 4);
                      v58 = v56[3];
                      v335 = v58;
                      if ((v58 & 0x8000000000000) != 0)
                      {
                        v206 = (unsigned int *)(v58 & 0xFFFFFFFFFFFFLL);
                        do
                          v207 = __ldaxr(v206);
                        while (__stlxr(v207 + 1, v206));
                      }
                      v336 = *((_BYTE *)v56 + 32);
                    }
                  }
                  else
                  {
                    v195 = WebCore::RenderTableCell::section(v52);
                    v196 = this;
                    v197 = 3;
LABEL_316:
                    WebCore::RenderTableSection::cachedCollapsedBorder(v195, (uint64_t)v196, v197, (uint64_t)&v334);
                  }
                  v59 = (unsigned __int16)*(_DWORD *)(v46 + 124) >> 13;
                  if ((v59 - 2) < 4)
                  {
                    v210 = *(_DWORD *)(v46 + 120);
                    v211 = WebCore::RenderTableCell::section(*((_QWORD *)this + 4));
                    if ((v210 & 0x4000000) != 0)
                      v212 = 3;
                    else
                      v212 = 2;
                    WebCore::RenderTableSection::cachedCollapsedBorder(v211, (uint64_t)this, v212, (uint64_t)&v331);
                  }
                  else if (v59 == 1)
                  {
                    v243 = WebCore::RenderTableCell::section(*((_QWORD *)this + 4));
                    WebCore::RenderTableSection::cachedCollapsedBorder(v243, (uint64_t)this, 1, (uint64_t)&v331);
                  }
                  else
                  {
                    v60 = *((_QWORD *)this + 4);
                    if (!v60)
                      goto LABEL_309;
                    v61 = *(_QWORD *)(v60 + 8);
                    if (!v61)
                      goto LABEL_309;
                    if (*(_BYTE *)(v61 + 46) != 39)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x196443360);
                    }
                    v62 = *(_QWORD *)(v61 + 32);
                    if (v62)
                    {
                      v63 = *(_QWORD *)(v62 + 8);
                      if (v63 && *(_BYTE *)(v63 + 46) != 40)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x196443400);
                      }
                    }
                    else
                    {
LABEL_309:
                      v63 = 0;
                    }
                    v306 = this;
                    LODWORD(v307) = 0;
                    v64 = WTF::HashTable<std::pair<WebCore::RenderTableCell const*,int>,WTF::KeyValuePair<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue>>,WTF::DefaultHash<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashMap<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue,WTF::DefaultHash<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashTraits<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashTraits<WebCore::CollapsedBorderValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebCore::RenderTableCell const*,int>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue,WTF::DefaultHash<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashTraits<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashTraits<WebCore::CollapsedBorderValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WebCore::RenderTableCell const*,int>>>,std::pair<WebCore::RenderTableCell const*,int>>((uint64_t *)(v63 + 272), (uint64_t)&v306);
                    v65 = *(uint64_t **)(v63 + 272);
                    if (v65)
                      v65 += 5 * *((unsigned int *)v65 - 1);
                    if (v65 == v64)
                    {
                      LODWORD(v307) = 1;
                      v308 = 1077936128;
                      v309 = 0;
                      v331 = 0;
                      v332 = 0;
                      v333 = 96;
                      _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS8_17StyleCurrentColorEN3WTF9UniqueRefINS8_13StyleColorMixEEENSC_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSC_INSF_INS8_17HSLFunctionModernEEEEENSC_INSF_INS8_11HWBFunctionEEEEENSC_INSF_INS8_11LabFunctionEEEEENSC_INSF_INS8_11LCHFunctionEEEEENSC_INSF_INS8_13OKLabFunctionEEEEENSC_INSF_INS8_13OKLCHFunctionEEEEENSC_INSF_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEEEENSC_INSF_INS11_INS8_21ExtendedLinearEncodedIfS1N_EEEEEEEENSC_INSF_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSC_INSF_INS1X_INS1Y_IfLS1Z_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS29_1EJS9_SA_SE_SI_SL_SO_SR_SU_SX_S10_S17_S1C_S1H_S1M_S1R_S1W_S23_S27_EEEEEEDcS2B_DpT0_(&v341, &v306);
                    }
                    else
                    {
                      v331 = *((_DWORD *)v64 + 4);
                      v66 = v64[3];
                      v332 = v66;
                      if ((v66 & 0x8000000000000) != 0)
                      {
                        v204 = (unsigned int *)(v66 & 0xFFFFFFFFFFFFLL);
                        do
                          v205 = __ldaxr(v204);
                        while (__stlxr(v205 + 1, v204));
                      }
                      v333 = *((_BYTE *)v64 + 32);
                    }
                  }
                  v67 = (unsigned __int16)*(_DWORD *)(v46 + 124) >> 13;
                  if ((v67 - 2) < 4)
                  {
                    v213 = *(_DWORD *)(v46 + 120);
                    v214 = WebCore::RenderTableCell::section(*((_QWORD *)this + 4));
                    if ((v213 & 0x4000000) != 0)
                      v215 = 2;
                    else
                      v215 = 3;
                    WebCore::RenderTableSection::cachedCollapsedBorder(v214, (uint64_t)this, v215, (uint64_t)&v328);
                  }
                  else if (v67 == 1)
                  {
                    v244 = WebCore::RenderTableCell::section(*((_QWORD *)this + 4));
                    WebCore::RenderTableSection::cachedCollapsedBorder(v244, (uint64_t)this, 0, (uint64_t)&v328);
                  }
                  else
                  {
                    v68 = *((_QWORD *)this + 4);
                    if (!v68)
                      goto LABEL_311;
                    v69 = *(_QWORD *)(v68 + 8);
                    if (!v69)
                      goto LABEL_311;
                    if (*(_BYTE *)(v69 + 46) != 39)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1964433A0);
                    }
                    v70 = *(_QWORD *)(v69 + 32);
                    if (v70)
                    {
                      v71 = *(_QWORD *)(v70 + 8);
                      if (v71 && *(_BYTE *)(v71 + 46) != 40)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x196443440);
                      }
                    }
                    else
                    {
LABEL_311:
                      v71 = 0;
                    }
                    v306 = this;
                    LODWORD(v307) = 1;
                    v72 = WTF::HashTable<std::pair<WebCore::RenderTableCell const*,int>,WTF::KeyValuePair<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue>>,WTF::DefaultHash<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashMap<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue,WTF::DefaultHash<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashTraits<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashTraits<WebCore::CollapsedBorderValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebCore::RenderTableCell const*,int>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue,WTF::DefaultHash<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashTraits<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashTraits<WebCore::CollapsedBorderValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WebCore::RenderTableCell const*,int>>>,std::pair<WebCore::RenderTableCell const*,int>>((uint64_t *)(v71 + 272), (uint64_t)&v306);
                    v73 = *(uint64_t **)(v71 + 272);
                    if (v73)
                      v73 += 5 * *((unsigned int *)v73 - 1);
                    if (v73 == v72)
                    {
                      LODWORD(v307) = 1;
                      v308 = 1077936128;
                      v309 = 0;
                      v328 = 0;
                      v329 = 0;
                      v330 = 96;
                      _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS8_17StyleCurrentColorEN3WTF9UniqueRefINS8_13StyleColorMixEEENSC_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSC_INSF_INS8_17HSLFunctionModernEEEEENSC_INSF_INS8_11HWBFunctionEEEEENSC_INSF_INS8_11LabFunctionEEEEENSC_INSF_INS8_11LCHFunctionEEEEENSC_INSF_INS8_13OKLabFunctionEEEEENSC_INSF_INS8_13OKLCHFunctionEEEEENSC_INSF_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEEEENSC_INSF_INS11_INS8_21ExtendedLinearEncodedIfS1N_EEEEEEEENSC_INSF_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSC_INSF_INS1X_INS1Y_IfLS1Z_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS29_1EJS9_SA_SE_SI_SL_SO_SR_SU_SX_S10_S17_S1C_S1H_S1M_S1R_S1W_S23_S27_EEEEEEDcS2B_DpT0_(&v341, &v306);
                    }
                    else
                    {
                      v328 = *((_DWORD *)v72 + 4);
                      v74 = v72[3];
                      v329 = v74;
                      if ((v74 & 0x8000000000000) != 0)
                      {
                        v208 = (unsigned int *)(v74 & 0xFFFFFFFFFFFFLL);
                        do
                          v209 = __ldaxr(v208);
                        while (__stlxr(v209 + 1, v208));
                      }
                      v330 = *((_BYTE *)v72 + 32);
                    }
                  }
                  if ((v333 & 0xE) != 0)
                    v75 = v331;
                  else
                    v75 = 0;
                  if ((v330 & 0xE) != 0)
                    v76 = v328;
                  else
                    v76 = 0;
                  if ((v339 & 0xE) != 0)
                    v77 = v337;
                  else
                    v77 = 0;
                  if ((v336 & 0xE) != 0)
                    v78 = v334;
                  else
                    v78 = 0;
                  v79 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8)
                                  + 528);
                  v80 = 1.0;
                  if (v79)
                  {
                    v81 = *(_QWORD *)(v79 + 8);
                    if (v81)
                    {
                      v82 = *(_QWORD *)(v81 + 24);
                      if (v82)
                      {
                        v83 = *(_QWORD *)(v82 + 8);
                        if (v83)
                        {
                          v84 = (*(_DWORD *)v83)++;
                          v80 = *(float *)(v83 + 364);
                          if (v84)
                          {
                            *(_DWORD *)v83 = v84;
                          }
                          else
                          {
                            v187 = v78;
                            v188 = v77;
                            v189 = v76;
                            WebCore::Page::~Page(v83);
                            WTF::fastFree(v190, v191);
                            v76 = v189;
                            v77 = v188;
                            v78 = v187;
                          }
                        }
                      }
                    }
                  }
                  v85 = (float)((float)((float)((float)v77 * 0.015625) + 0.0) * 0.5) * 64.0;
                  if (v85 >= 2147483650.0)
                  {
                    v86 = 2147500000.0;
                  }
                  else if (v85 <= -2147483650.0)
                  {
                    v86 = -2147500000.0;
                  }
                  else
                  {
                    v86 = (float)(int)v85;
                  }
                  v87 = (float)(floorf((float)(v80 * v86) * 0.015625) / v80) * 64.0;
                  if (v87 > -2147483650.0)
                    v88 = (int)v87;
                  else
                    v88 = 0x80000000;
                  if (v87 >= 2147483650.0)
                    v88 = 0x7FFFFFFF;
                  v89 = (float)((float)((float)((float)v75 * 0.015625) + 0.0) * 0.5) * 64.0;
                  if (v89 >= 2147483650.0)
                  {
                    v90 = 2147500000.0;
                  }
                  else if (v89 <= -2147483650.0)
                  {
                    v90 = -2147500000.0;
                  }
                  else
                  {
                    v90 = (float)(int)v89;
                  }
                  v91 = (float)(floorf((float)(v80 * v90) * 0.015625) / v80) * 64.0;
                  if (v91 > -2147483650.0)
                    v92 = (int)v91;
                  else
                    v92 = 0x80000000;
                  if (v91 >= 2147483650.0)
                    v92 = 0x7FFFFFFF;
                  v93 = (float)((float)((float)((float)(int)v78 * 0.015625) + (float)(1.0 / v80)) * 0.5) * 64.0;
                  if (v93 >= 2147483650.0)
                  {
                    v94 = 2147500000.0;
                  }
                  else if (v93 <= -2147483650.0)
                  {
                    v94 = -2147500000.0;
                  }
                  else
                  {
                    v94 = (float)(int)v93;
                  }
                  v95 = (float)(floorf((float)(v80 * v94) * 0.015625) / v80) * 64.0;
                  if (v95 > -2147483650.0)
                    v96 = (int)v95;
                  else
                    v96 = 0x80000000;
                  if (v95 >= 2147483650.0)
                    v96 = 0x7FFFFFFF;
                  v97 = (float)((float)((float)((float)v76 * 0.015625) + (float)(1.0 / v80)) * 0.5) * 64.0;
                  if (v97 >= 2147483650.0)
                  {
                    v98 = 2147500000.0;
                  }
                  else if (v97 <= -2147483650.0)
                  {
                    v98 = -2147500000.0;
                  }
                  else
                  {
                    v98 = (float)(int)v97;
                  }
                  v99 = (float)(floorf((float)(v80 * v98) * 0.015625) / v80) * 64.0;
                  if (v99 >= 2147483650.0)
                  {
                    v100 = 0x7FFFFFFF;
                  }
                  else if (v99 <= -2147483650.0)
                  {
                    v100 = 0x80000000;
                  }
                  else
                  {
                    v100 = (int)v99;
                  }
                  v101 = v13 - v88;
                  if (__OFSUB__(v13, v88))
                    v101 = (v13 >> 31) + 0x7FFFFFFF;
                  v102 = v15 - v92;
                  if (__OFSUB__(v15, v92))
                    v102 = (v15 >> 31) + 0x7FFFFFFF;
                  v116 = __OFADD__((_DWORD)v16, v88);
                  v103 = v16 + v88;
                  if (v116)
                    v103 = (v16 >> 31) + 0x7FFFFFFF;
                  v104 = v103 + v96;
                  if (__OFADD__(v103, v96))
                    v104 = (v103 >> 31) + 0x7FFFFFFF;
                  v116 = __OFADD__(HIDWORD(v16), v92);
                  v105 = HIDWORD(v16) + v92;
                  if (v116)
                    v105 = (HIDWORD(v16) >> 31) + 0x7FFFFFFF;
                  v106 = v105 + v100;
                  if (__OFADD__(v105, v100))
                    v106 = (v105 >> 31) + 0x7FFFFFFF;
                  v107 = v333;
                  v108 = v333 & 0xF;
                  if (v108 == 4)
                  {
                    v108 = 3;
                  }
                  else if (v108 == 2)
                  {
                    v108 = 5;
                  }
                  v109 = v330 & 0xF;
                  if (v109 == 4)
                  {
                    v109 = 3;
                  }
                  else if (v109 == 2)
                  {
                    v109 = 5;
                  }
                  v110 = v339 & 0xF;
                  if (v110 == 4)
                  {
                    v110 = 3;
                  }
                  else if (v110 == 2)
                  {
                    v110 = 5;
                  }
                  v111 = v336 & 0xF;
                  if (v111 == 4)
                  {
                    v111 = 3;
                  }
                  else if (v111 == 2)
                  {
                    v111 = 5;
                  }
                  v112 = 0;
                  if ((v333 & 0x80) == 0 && v108 >= 2)
                    v112 = (float)(floorf((float)(v80 * (float)v75) * 0.015625) / v80) != 0.0;
                  v113 = 0;
                  if ((v330 & 0x80) == 0 && v109 >= 2)
                    v113 = (float)(floorf((float)(v80 * (float)v76) * 0.015625) / v80) != 0.0;
                  v114 = v110 >= 2
                      && (v339 & 0x80) == 0
                      && (float)(floorf((float)(v80 * (float)v77) * 0.015625) / v80) != 0.0;
                  v303 = v42;
                  v115 = v111 >= 2
                      && (v336 & 0x80) == 0
                      && (float)(floorf((float)(v80 * (float)(int)v78) * 0.015625) / v80) != 0.0;
                  LODWORD(v306) = 0;
                  v307 = 0;
                  LOBYTE(v308) = 0;
                  v311 = 0;
                  v310 = 0;
                  v312 = 0;
                  v313 = 0;
                  v314 = 0;
                  v316 = 0;
                  v315 = 0;
                  v317 = 0;
                  v318 = 0;
                  v319 = 0;
                  v321 = 0;
                  v320 = 0;
                  v322 = 0;
                  v323 = 0;
                  v324 = 0;
                  v326 = 0;
                  v325 = 0;
                  v327 = 0;
                  v116 = __OFADD__(v101, v104);
                  v117 = v101 + v104;
                  v118 = __OFADD__(v101, v104);
                  v119 = v101 + v104;
                  if (v116)
                    v119 = (v101 >> 31) + 0x7FFFFFFF;
                  v120 = v102 + v75;
                  if (__OFADD__(v102, v75))
                    v120 = (v102 >> 31) + 0x7FFFFFFF;
                  v121 = !v112;
                  if ((v333 & 0x70) == 0)
                    v121 = 1;
                  v304 = this;
                  if ((v121 & 1) != 0)
                  {
                    v122 = 0;
                  }
                  else
                  {
                    LODWORD(v306) = v331;
                    v123 = v332;
                    if (v332)
                    {
                      v307 = v332;
                      if ((v332 & 0x8000000000000) != 0)
                      {
                        v198 = (unsigned int *)(v332 & 0xFFFFFFFFFFFFLL);
                        do
                          v199 = __ldaxr(v198);
                        while (__stlxr(v199 + 1, v198));
                        v107 = v333;
                        v123 = v327;
                      }
                      else
                      {
                        v123 = 0;
                      }
                    }
                    LOBYTE(v308) = v107;
                    v124 = &v306 + 6 * v123;
                    *((_WORD *)v124 + 12) = 256;
                    *((_DWORD *)v124 + 7) = v101;
                    *((_DWORD *)v124 + 8) = v102;
                    *((_DWORD *)v124 + 9) = v119;
                    *((_DWORD *)v124 + 10) = v120;
                    *((_BYTE *)v124 + 44) = v108;
                    v122 = v123 + 1;
                    v327 = v123 + 1;
                  }
                  v125 = v102 + v106;
                  v126 = __OFADD__(v102, v106);
                  v127 = (v102 >> 31) + 0x7FFFFFFF;
                  if (__OFADD__(v102, v106))
                    v128 = (v102 >> 31) + 0x7FFFFFFF;
                  else
                    v128 = v102 + v106;
                  v116 = __OFSUB__(v128, v76);
                  v129 = v128 - v76;
                  v130 = (v128 >> 31) + 0x7FFFFFFF;
                  if (v116)
                    v131 = v130;
                  else
                    v131 = v129;
                  v132 = (v101 >> 31) + 0x7FFFFFFF;
                  if (v118)
                    v133 = (v101 >> 31) + 0x7FFFFFFF;
                  else
                    v133 = v117;
                  if (v126)
                    v134 = (v102 >> 31) + 0x7FFFFFFF;
                  else
                    v134 = v102 + v106;
                  v135 = !v113;
                  if ((v330 & 0x70) == 0)
                    v135 = 1;
                  if ((v135 & 1) != 0)
                    goto LABEL_222;
                  v136 = &v306 + 6 * v122;
                  *(_DWORD *)v136 = v328;
                  v137 = v136[1];
                  if (((unint64_t)v137 & 0x8000000000000) != 0)
                  {
                    if ((v329 & 0x8000000000000) != 0)
                    {
                      v278 = v111;
                      v286 = v115;
                      v290 = v117;
                      v294 = v110;
                      v299 = v102;
                      v280 = v77;
                      v282 = v78;
                      v284 = v101;
                      v341 = *(float32x4_t *)(((unint64_t)v137 & 0xFFFFFFFFFFFFLL) + 4);
                      v340 = *(_OWORD *)((v329 & 0xFFFFFFFFFFFFLL) + 4);
                      v245 = WebCore::operator==<float,4ul>(v341.f32, (float *)&v340);
                      v137 = v136[1];
                      if (v245 && (unint64_t)v137 >> 56 == HIBYTE(v329))
                      {
                        v78 = v282;
                        v101 = v284;
                        LOBYTE(v111) = v278;
                        v77 = v280;
                        LOBYTE(v110) = v294;
                        v102 = v299;
                        v115 = v286;
                        v117 = v290;
                        if (BYTE6(v137) == BYTE6(v329))
                          goto LABEL_221;
                      }
                      else
                      {
                        v78 = v282;
                        v101 = v284;
                        LOBYTE(v111) = v278;
                        v77 = v280;
                        LOBYTE(v110) = v294;
                        v102 = v299;
                        v115 = v286;
                        v117 = v290;
                      }
                    }
                  }
                  else if (v137 == (WebCore::RenderTableCell *)v329 && (v329 & 0x8000000000000) == 0)
                  {
                    goto LABEL_221;
                  }
                  if (((unint64_t)v137 & 0x8000000000000) != 0)
                  {
                    v279 = v111;
                    v288 = v115;
                    v292 = v117;
                    v296 = v110;
                    v301 = v102;
                    v281 = v77;
                    v283 = v78;
                    v285 = v101;
                    v257 = (unsigned int *)((unint64_t)v137 & 0xFFFFFFFFFFFFLL);
                    do
                    {
                      v258 = __ldaxr(v257);
                      v259 = --v258 == 0;
                    }
                    while (__stlxr(v258, v257));
                    v78 = v78;
                    v101 = v285;
                    if (v259)
                    {
                      atomic_store(1u, v257);
                      WTF::fastFree((WTF *)v257, (void *)v78);
                      LOBYTE(v111) = v279;
                      v115 = v288;
                      v117 = v292;
                      LOBYTE(v110) = v296;
                      v102 = v301;
                      v77 = v281;
                      v78 = v283;
                      v101 = v285;
                    }
                  }
                  v254 = v329;
                  v136[1] = (WebCore::RenderTableCell *)v329;
                  if ((v254 & 0x8000000000000) != 0)
                  {
                    v255 = (unsigned int *)(v254 & 0xFFFFFFFFFFFFLL);
                    do
                      v256 = __ldaxr(v255);
                    while (__stlxr(v256 + 1, v255));
                  }
LABEL_221:
                  *((_BYTE *)v136 + 16) = v330;
                  v139 = v327;
                  v140 = &v306 + 6 * v327;
                  *((_WORD *)v140 + 12) = 258;
                  *((_DWORD *)v140 + 7) = v101;
                  *((_DWORD *)v140 + 8) = v131;
                  *((_DWORD *)v140 + 9) = v133;
                  *((_DWORD *)v140 + 10) = v134;
                  *((_BYTE *)v140 + 44) = v109;
                  v122 = v139 + 1;
                  v327 = v139 + 1;
LABEL_222:
                  if (!__OFADD__(v101, v77))
                    v132 = v101 + v77;
                  if (v126)
                    v141 = v127;
                  else
                    v141 = v125;
                  v142 = !v114;
                  if ((v339 & 0x70) == 0)
                    v142 = 1;
                  if ((v142 & 1) != 0)
                  {
                    v143 = v304;
                    goto LABEL_238;
                  }
                  v144 = &v306 + 6 * v122;
                  *(_DWORD *)v144 = v337;
                  v145 = v144[1];
                  v143 = v304;
                  if (((unint64_t)v145 & 0x8000000000000) != 0)
                  {
                    if ((v338 & 0x8000000000000) != 0)
                    {
                      v287 = v115;
                      v291 = v117;
                      v295 = v110;
                      v300 = v102;
                      v246 = v111;
                      v247 = v78;
                      v248 = v101;
                      v341 = *(float32x4_t *)(((unint64_t)v145 & 0xFFFFFFFFFFFFLL) + 4);
                      v340 = *(_OWORD *)((v338 & 0xFFFFFFFFFFFFLL) + 4);
                      v249 = WebCore::operator==<float,4ul>(v341.f32, (float *)&v340);
                      v145 = v144[1];
                      if (v249 && (unint64_t)v145 >> 56 == HIBYTE(v338))
                      {
                        v101 = v248;
                        v78 = v247;
                        LOBYTE(v110) = v295;
                        v102 = v300;
                        LOBYTE(v111) = v246;
                        v115 = v287;
                        v117 = v291;
                        if (BYTE6(v145) == BYTE6(v338))
                          goto LABEL_237;
                      }
                      else
                      {
                        v101 = v248;
                        v78 = v247;
                        LOBYTE(v110) = v295;
                        v102 = v300;
                        LOBYTE(v111) = v246;
                        v115 = v287;
                        v117 = v291;
                      }
                    }
                  }
                  else if (v145 == (WebCore::RenderTableCell *)v338 && (v338 & 0x8000000000000) == 0)
                  {
                    goto LABEL_237;
                  }
                  if (((unint64_t)v145 & 0x8000000000000) != 0)
                  {
                    v289 = v115;
                    v293 = v117;
                    v297 = v110;
                    v302 = v102;
                    v263 = v111;
                    v264 = v78;
                    v265 = v101;
                    v266 = (unsigned int *)((unint64_t)v145 & 0xFFFFFFFFFFFFLL);
                    do
                    {
                      v267 = __ldaxr(v266);
                      v268 = --v267 == 0;
                    }
                    while (__stlxr(v267, v266));
                    v101 = v265;
                    if (v268)
                    {
                      atomic_store(1u, v266);
                      WTF::fastFree((WTF *)v266, (void *)v78);
                      v115 = v289;
                      v117 = v293;
                      LOBYTE(v110) = v297;
                      v102 = v302;
                      LOBYTE(v111) = v263;
                      v78 = v264;
                      v101 = v265;
                    }
                  }
                  v260 = v338;
                  v144[1] = (WebCore::RenderTableCell *)v338;
                  if ((v260 & 0x8000000000000) != 0)
                  {
                    v261 = (unsigned int *)(v260 & 0xFFFFFFFFFFFFLL);
                    do
                      v262 = __ldaxr(v261);
                    while (__stlxr(v262 + 1, v261));
                  }
LABEL_237:
                  *((_BYTE *)v144 + 16) = v339;
                  v147 = v327;
                  v148 = &v306 + 6 * v327;
                  *((_WORD *)v148 + 12) = 259;
                  *((_DWORD *)v148 + 7) = v101;
                  *((_DWORD *)v148 + 8) = v102;
                  *((_DWORD *)v148 + 9) = v132;
                  *((_DWORD *)v148 + 10) = v141;
                  *((_BYTE *)v148 + 44) = v110;
                  v122 = v147 + 1;
                  v327 = v147 + 1;
LABEL_238:
                  v149 = (v101 >> 31) + 0x7FFFFFFF;
                  if (v118)
                    v150 = v149;
                  else
                    v150 = v117;
                  v116 = __OFSUB__(v150, (_DWORD)v78);
                  v151 = v150 - v78;
                  v152 = (v150 >> 31) + 0x7FFFFFFF;
                  if (v116)
                    v153 = v152;
                  else
                    v153 = v151;
                  if (v118)
                    v117 = v149;
                  if (v126)
                    v154 = (v102 >> 31) + 0x7FFFFFFF;
                  else
                    v154 = v125;
                  v155 = !v115;
                  if ((v336 & 0x70) == 0)
                    v155 = 1;
                  if ((v155 & 1) != 0)
                    goto LABEL_259;
                  v156 = &v306 + 6 * v122;
                  *(_DWORD *)v156 = v334;
                  v157 = v156[1];
                  if (((unint64_t)v157 & 0x8000000000000) != 0)
                  {
                    if ((v335 & 0x8000000000000) != 0)
                    {
                      v250 = v117;
                      v251 = v111;
                      v252 = v102;
                      v341 = *(float32x4_t *)(((unint64_t)v157 & 0xFFFFFFFFFFFFLL) + 4);
                      v340 = *(_OWORD *)((v335 & 0xFFFFFFFFFFFFLL) + 4);
                      v253 = WebCore::operator==<float,4ul>(v341.f32, (float *)&v340);
                      v157 = v156[1];
                      if (v253 && (unint64_t)v157 >> 56 == HIBYTE(v335))
                      {
                        v102 = v252;
                        LOBYTE(v111) = v251;
                        v117 = v250;
                        if (BYTE6(v157) == BYTE6(v335))
                          goto LABEL_258;
                      }
                      else
                      {
                        v102 = v252;
                        LOBYTE(v111) = v251;
                        v117 = v250;
                      }
                    }
                  }
                  else if (v157 == (WebCore::RenderTableCell *)v335 && (v335 & 0x8000000000000) == 0)
                  {
                    goto LABEL_258;
                  }
                  if (((unint64_t)v157 & 0x8000000000000) != 0)
                  {
                    v272 = v117;
                    v273 = v111;
                    v274 = v102;
                    v275 = (unsigned int *)((unint64_t)v157 & 0xFFFFFFFFFFFFLL);
                    do
                    {
                      v276 = __ldaxr(v275);
                      v277 = v276 - 1;
                    }
                    while (__stlxr(v277, v275));
                    if (!v277)
                    {
                      atomic_store(1u, v275);
                      WTF::fastFree((WTF *)v275, (void *)v78);
                      v117 = v272;
                      LOBYTE(v111) = v273;
                      v102 = v274;
                    }
                  }
                  v269 = v335;
                  v156[1] = (WebCore::RenderTableCell *)v335;
                  if ((v269 & 0x8000000000000) != 0)
                  {
                    v270 = (unsigned int *)(v269 & 0xFFFFFFFFFFFFLL);
                    do
                      v271 = __ldaxr(v270);
                    while (__stlxr(v271 + 1, v270));
                  }
LABEL_258:
                  *((_BYTE *)v156 + 16) = v336;
                  v159 = v327;
                  v160 = &v306 + 6 * v327;
                  *((_WORD *)v160 + 12) = 257;
                  *((_DWORD *)v160 + 7) = v153;
                  *((_DWORD *)v160 + 8) = v102;
                  *((_DWORD *)v160 + 9) = v117;
                  *((_DWORD *)v160 + 10) = v154;
                  *((_BYTE *)v160 + 44) = v111;
                  v327 = v159 + 1;
LABEL_259:
                  v161 = 1;
                  (*(void (**)(float32x4_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v303 + 672))(&v341, v303, 1);
                  if (*(double *)v341.i64 == 1.0 && *(double *)&v341.i64[1] == 0.0 && v342 == 0.0)
                    v161 = v343 != 1.0 && v343 != -1.0;
                  v163 = v327;
                  if (!v327)
                    goto LABEL_265;
                  v164 = &v306;
                  v165 = v327;
                  break;
              }
              break;
          }
          while (1)
          {
            v166 = *((_BYTE *)v164 + 16);
            if ((v166 & 0x70) != 0)
            {
              if (*((_BYTE *)v164 + 25))
                break;
            }
            v164 += 6;
            if (!--v165)
              goto LABEL_265;
          }
          *((_BYTE *)v164 + 25) = 0;
          v167 = *(_QWORD *)(*((_QWORD *)v143 + 4) + 8);
          if (*(_BYTE *)(v167 + 46) != 39)
          {
LABEL_299:
            __break(0xC471u);
            JUMPOUT(0x19644306CLL);
          }
          v168 = (float32x4_t)vdupq_n_s32(0x3C800000u);
          while (1)
          {
            v169 = *(_QWORD *)(*(_QWORD *)(v167 + 32) + 8);
            if (*(_BYTE *)(v169 + 46) != 40)
            {
              __break(0xC471u);
              JUMPOUT(0x196443280);
            }
            v170 = *(_QWORD *)(*(_QWORD *)(v169 + 32) + 8);
            v171 = *(unsigned __int8 *)(v170 + 46);
            if (v171 != 35 && v171 != 63)
            {
              __break(0xC471u);
              JUMPOUT(0x19644362CLL);
            }
            if ((v166 & 0xE) != 0)
              v172 = *(_DWORD *)v164;
            else
              v172 = 0;
            v173 = *(int **)(v170 + 320);
            v174 = *((_BYTE *)v173 + 16);
            if ((v174 & 0xE) != 0)
              v175 = *v173;
            else
              v175 = 0;
            if (v172 == v175 && ((v174 ^ v166) & 0x7F) == 0)
            {
              v176 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v143 + 3) + 8) + 40) + 8);
              v177.i64[0] = *(uint64_t *)((char *)v164 + 28);
              v178 = *((_DWORD *)v164 + 9);
              v179 = *((_DWORD *)v164 + 10);
              v116 = __OFSUB__(v178, v177.i32[0]);
              v180 = v178 - v177.i32[0];
              v181 = (v178 >> 31) + 0x7FFFFFFF;
              if (!v116)
                v181 = v180;
              v116 = __OFSUB__(v179, v177.i32[1]);
              v182 = v179 - v177.i32[1];
              v183 = (v179 >> 31) + 0x7FFFFFFF;
              if (!v116)
                v183 = v182;
              v177.i64[1] = __PAIR64__(v183, v181);
              v298 = v168;
              v341 = vmulq_f32(vcvtq_f32_s32(v177), v168);
              v184 = *((unsigned __int8 *)v164 + 24);
              v185 = (unint64_t)v164[1];
              v305 = v185;
              if ((v185 & 0x8000000000000) != 0)
              {
                v200 = (unsigned int *)(v185 & 0xFFFFFFFFFFFFLL);
                do
                  v201 = __ldaxr(v200);
                while (__stlxr(v201 + 1, v200));
              }
              WebCore::BorderPainter::drawLineForBoxSide(v303, v176, v341.f32, v184, (WebCore::Color *)&v305, *((unsigned __int8 *)v164 + 44), v161, 0.0, 0.0);
              if ((v305 & 0x8000000000000) != 0)
              {
                v240 = (unsigned int *)(v305 & 0xFFFFFFFFFFFFLL);
                do
                {
                  v241 = __ldaxr(v240);
                  v242 = v241 - 1;
                }
                while (__stlxr(v242, v240));
                if (!v242)
                {
                  atomic_store(1u, v240);
                  WTF::fastFree((WTF *)v240, v162);
                }
              }
              v163 = v327;
              v168 = v298;
            }
            if (!v163)
              break;
            v164 = &v306;
            v186 = v163;
            while (1)
            {
              v166 = *((_BYTE *)v164 + 16);
              if ((v166 & 0x70) != 0)
              {
                if (*((_BYTE *)v164 + 25))
                  break;
              }
              v164 += 6;
              if (!--v186)
                goto LABEL_265;
            }
            *((_BYTE *)v164 + 25) = 0;
            v167 = *(_QWORD *)(*((_QWORD *)v143 + 4) + 8);
            if (*(_BYTE *)(v167 + 46) != 39)
              goto LABEL_299;
          }
LABEL_265:
          if ((v323 & 0x8000000000000) != 0)
          {
            v216 = (unsigned int *)(v323 & 0xFFFFFFFFFFFFLL);
            do
            {
              v217 = __ldaxr(v216);
              v218 = v217 - 1;
            }
            while (__stlxr(v218, v216));
            if (!v218)
            {
              atomic_store(1u, v216);
              WTF::fastFree((WTF *)v216, v162);
            }
          }
          if ((v318 & 0x8000000000000) != 0)
          {
            v219 = (unsigned int *)(v318 & 0xFFFFFFFFFFFFLL);
            do
            {
              v220 = __ldaxr(v219);
              v221 = v220 - 1;
            }
            while (__stlxr(v221, v219));
            if (!v221)
            {
              atomic_store(1u, v219);
              WTF::fastFree((WTF *)v219, v162);
            }
          }
          if ((v313 & 0x8000000000000) != 0)
          {
            v222 = (unsigned int *)(v313 & 0xFFFFFFFFFFFFLL);
            do
            {
              v223 = __ldaxr(v222);
              v224 = v223 - 1;
            }
            while (__stlxr(v224, v222));
            if (!v224)
            {
              atomic_store(1u, v222);
              WTF::fastFree((WTF *)v222, v162);
            }
          }
          if ((v307 & 0x8000000000000) != 0)
          {
            v225 = (unsigned int *)(v307 & 0xFFFFFFFFFFFFLL);
            do
            {
              v226 = __ldaxr(v225);
              v227 = v226 - 1;
            }
            while (__stlxr(v227, v225));
            if (!v227)
            {
              atomic_store(1u, v225);
              WTF::fastFree((WTF *)v225, v162);
            }
          }
          if ((v329 & 0x8000000000000) != 0)
          {
            v228 = (unsigned int *)(v329 & 0xFFFFFFFFFFFFLL);
            do
            {
              v229 = __ldaxr(v228);
              v230 = v229 - 1;
            }
            while (__stlxr(v230, v228));
            if (!v230)
            {
              atomic_store(1u, v228);
              WTF::fastFree((WTF *)v228, v162);
            }
          }
          if ((v332 & 0x8000000000000) != 0)
          {
            v231 = (unsigned int *)(v332 & 0xFFFFFFFFFFFFLL);
            do
            {
              v232 = __ldaxr(v231);
              v233 = v232 - 1;
            }
            while (__stlxr(v233, v231));
            if (!v233)
            {
              atomic_store(1u, v231);
              WTF::fastFree((WTF *)v231, v162);
            }
          }
          if ((v335 & 0x8000000000000) != 0)
          {
            v234 = (unsigned int *)(v335 & 0xFFFFFFFFFFFFLL);
            do
            {
              v235 = __ldaxr(v234);
              v236 = v235 - 1;
            }
            while (__stlxr(v236, v234));
            if (!v236)
            {
              atomic_store(1u, v234);
              WTF::fastFree((WTF *)v234, v162);
            }
          }
          if ((v338 & 0x8000000000000) != 0)
          {
            v237 = (unsigned int *)(v338 & 0xFFFFFFFFFFFFLL);
            do
            {
              v238 = __ldaxr(v237);
              v239 = v238 - 1;
            }
            while (__stlxr(v239, v237));
            if (!v239)
            {
              atomic_store(1u, v237);
              WTF::fastFree((WTF *)v237, v162);
            }
          }
        }
      }
    }
  }
}

uint64_t WebCore::RenderTableCell::paintBackgroundsBehindCell(uint64_t this, WebCore::PaintInfo *a2, const WebCore::LayoutPoint *a3, WebCore::RenderElement *a4)
{
  uint64_t v4;
  _BOOL4 v5;
  uint64_t v6;
  int v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  WebCore::FillLayer *v19;
  uint64_t v20;
  void *v21;
  uint64_t (*v22)();
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  float v28;
  unsigned int v29;
  unsigned int v30;
  void *v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  int v35;
  BOOL v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  int v51;
  int v52;
  unsigned int v53;
  int v54;
  unsigned int v55;
  int v56;
  int v57;
  uint64_t v58;
  int32x4_t v59;
  WebCore::RenderElement *v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  int v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  float32x4_t v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t v75;

  v4 = *((_QWORD *)a2 + 3);
  if (v4)
    v5 = v4 == this;
  else
    v5 = 1;
  if (!a4)
    return this;
  if (!v5)
    return this;
  v6 = this;
  if ((*(_BYTE *)(*(_QWORD *)(this + 104) + 239) & 4) != 0)
    return this;
  v7 = *(_DWORD *)(this + 120);
  if ((v7 & 0x30) != 0)
    return this;
  v11 = *(_QWORD *)(this + 32);
  if (!v11)
    goto LABEL_41;
  v12 = *(_QWORD *)(v11 + 8);
  if (!v12)
    goto LABEL_41;
  if (*(_BYTE *)(v12 + 46) != 39)
  {
    __break(0xC471u);
    JUMPOUT(0x196443FB0);
  }
  v13 = *(_QWORD *)(v12 + 32);
  if (!v13)
    goto LABEL_41;
  v14 = *(_QWORD *)(v13 + 8);
  if (!v14)
    goto LABEL_41;
  if (*(_BYTE *)(v14 + 46) != 40)
  {
    __break(0xC471u);
    JUMPOUT(0x196443FD0);
  }
  v15 = *(_QWORD *)(v14 + 32);
  if (v15)
  {
    v16 = *(_QWORD *)(v15 + 8);
    if (v16)
    {
      v17 = *(unsigned __int8 *)(v16 + 46);
      if (v17 != 35 && v17 != 63)
      {
LABEL_75:
        __break(0xC471u);
        JUMPOUT(0x196444124);
      }
    }
  }
  else
  {
LABEL_41:
    v16 = 0;
  }
  if ((v7 & 1) != 0 && (*(_DWORD *)(v16 + 124) & 4) == 0)
  {
    v43 = *(unsigned int *)(this + 64);
    if (!(v43 | ((unint64_t)*(unsigned __int8 *)(this + 68) << 32))
      || !*(_QWORD *)((v43 | ((unint64_t)*(unsigned __int8 *)(this + 68) << 32)) + 8))
    {
      return this;
    }
  }
  v18 = *(_QWORD *)(*((_QWORD *)a4 + 11) + 16);
  v19 = *(WebCore::FillLayer **)(v18 + 8);
  v72.i64[0] = (uint64_t)&v71;
  v72.i64[1] = (uint64_t)&v71;
  v73 = &v71;
  v74 = &v71;
  v20 = *(unsigned int *)(v18 + 24);
  if ((_DWORD)v20 == -1)
  {
LABEL_74:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_75;
  }
  v75 = (uint64_t)&v72;
  this = (uint64_t)((uint64_t (*)(unint64_t *__return_ptr, uint64_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v20])(&v69, &v75, v18 + 16);
  if ((_DWORD)v70 != 1)
  {
    v71 = *((_QWORD *)a4 + 14) + 328;
    v72.i64[0] = (uint64_t)&v71;
    v72.i64[1] = (uint64_t)&v71;
    v73 = &v71;
    v74 = &v71;
    if ((_DWORD)v70 != -1)
    {
      v75 = (uint64_t)&v72;
      this = (uint64_t)((uint64_t (*)(uint64_t *__return_ptr, uint64_t *, unint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix[v70])(&v68, &v75, &v69);
      goto LABEL_24;
    }
    goto LABEL_74;
  }
  v23 = *(_QWORD *)(*((_QWORD *)a4 + 14) + 328);
  v68 = v23;
  if ((v23 & 0x8000000000000) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFLL);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 + 1, v24));
  }
LABEL_24:
  if ((_DWORD)v70 != -1)
    this = ((uint64_t (*)(float32x4_t *, unint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v70])(&v72, &v69);
  if ((*((_DWORD *)a4 + 31) & 0xC00) != 0x800 || (*(_BYTE *)(*((_QWORD *)a4 + 13) + 239) & 2) != 0)
  {
    v75 = v68;
  }
  else
  {
    this = (uint64_t)WebCore::RenderStyle::colorResolvingCurrentColor((_QWORD *)a4 + 10, 61, 1, (WebCore::Color *)&v72);
    if (v72.i64[0] == 0x1104000000000000)
    {
      v75 = 0;
      if (v68)
      {
        v75 = v68;
        v68 = 0;
      }
    }
    else
    {
      if ((v68 & 0x8000000000000) != 0)
        v28 = *(float *)((v68 & 0xFFFFFFFFFFFFLL) + 0x10);
      else
        v28 = (float)v68 / 255.0;
      this = WebCore::Color::colorWithAlpha((uint64_t)&v72, v28, &v75);
      if ((v72.i64[0] & 0x8000000000000) != 0)
      {
        this = v72.i64[0] & 0xFFFFFFFFFFFFLL;
        do
        {
          v29 = __ldaxr((unsigned int *)this);
          v30 = v29 - 1;
        }
        while (__stlxr(v30, (unsigned int *)this));
        if (!v30)
        {
          atomic_store(1u, (unsigned int *)this);
          this = WTF::fastFree((WTF *)this, v21);
        }
      }
    }
    if ((v68 & 0x8000000000000) != 0)
    {
      this = v68 & 0xFFFFFFFFFFFFLL;
      do
      {
        v26 = __ldaxr((unsigned int *)this);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, (unsigned int *)this));
      if (!v27)
      {
        atomic_store(1u, (unsigned int *)this);
        this = WTF::fastFree((WTF *)this, v21);
      }
    }
  }
  if (*((_QWORD *)v19 + 1))
  {
    this = WebCore::FillLayer::hasImageInAnyLayer(v19);
    if ((this & 1) != 0)
      goto LABEL_61;
  }
  else
  {
    if (*((_QWORD *)v19 + 2))
      v22 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
    else
      v22 = 0;
    if (v22)
      goto LABEL_61;
  }
  if ((v75 & 0x8000000000000) == 0)
  {
    if (!(_BYTE)v75)
      goto LABEL_35;
LABEL_61:
    WebCore::RenderStyle::colorByApplyingColorFilter((uint64_t)a4 + 80, (const WebCore::Color *)&v75, (unint64_t *)&v72);
    WebCore::Color::operator=((unint64_t *)&v75, &v72);
    if ((v72.i64[0] & 0x8000000000000) != 0)
    {
      v63 = (unsigned int *)(v72.i64[0] & 0xFFFFFFFFFFFFLL);
      do
      {
        v64 = __ldaxr(v63);
        v65 = v64 - 1;
      }
      while (__stlxr(v65, v63));
      if (!v65)
      {
        atomic_store(1u, v63);
        WTF::fastFree((WTF *)v63, v31);
      }
    }
    v33 = *(_DWORD *)a3;
    v32 = *((unsigned int *)a3 + 1);
    if (a4 == (WebCore::RenderElement *)v6)
    {
      if ((*(_BYTE *)(v6 + 21) & 0x80) != 0)
        goto LABEL_80;
    }
    else
    {
      v35 = *(_DWORD *)(v6 + 152);
      v34 = *(_DWORD *)(v6 + 156);
      v36 = __OFADD__(v33, v35);
      v37 = v33 + v35;
      if (v36)
        v33 = (v33 >> 31) + 0x7FFFFFFF;
      else
        v33 = v37;
      v36 = __OFADD__((_DWORD)v32, v34);
      v38 = v32 + v34;
      if (v36)
        v32 = (v32 >> 31) + 0x7FFFFFFF;
      else
        v32 = v38;
      if ((*((_BYTE *)a4 + 21) & 0x80) != 0)
      {
        v60 = *(WebCore::RenderElement **)(v6 + 32);
        if (v60)
          v60 = (WebCore::RenderElement *)*((_QWORD *)v60 + 1);
        if (v60 == a4)
        {
LABEL_80:
          v39 = *((_QWORD *)a2 + 10);
          if ((*(_BYTE *)(v16 + 124) & 4) != 0)
          {
            (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v39 + 96))(*((_QWORD *)a2 + 10), 1);
            v44 = WebCore::RenderTableCell::borderLeft((WebCore::RenderTableCell *)v6);
            v45 = v33 + v44;
            if (__OFADD__(v33, v44))
              v45 = (v33 >> 31) + 0x7FFFFFFF;
            v67 = v45;
            v46 = WebCore::RenderTableCell::borderTop((WebCore::RenderTableCell *)v6);
            v47 = v32 + v46;
            if (__OFADD__((_DWORD)v32, v46))
              v47 = (v32 >> 31) + 0x7FFFFFFF;
            v66 = v47;
            v48 = *(_DWORD *)(v6 + 160);
            v49 = WebCore::RenderTableCell::borderLeft((WebCore::RenderTableCell *)v6);
            if (__OFSUB__(v48, v49))
              v50 = (v48 >> 31) + 0x7FFFFFFF;
            else
              v50 = v48 - v49;
            v51 = WebCore::RenderTableCell::borderRight((WebCore::RenderTableCell *)v6);
            if (__OFSUB__(v50, v51))
              v52 = (v50 >> 31) + 0x7FFFFFFF;
            else
              v52 = v50 - v51;
            v53 = *(_DWORD *)(v6 + 164);
            v54 = WebCore::RenderTableCell::borderTop((WebCore::RenderTableCell *)v6);
            if (__OFSUB__(v53, v54))
              v55 = (v53 >> 31) + 0x7FFFFFFF;
            else
              v55 = v53 - v54;
            v56 = WebCore::RenderTableCell::borderBottom((WebCore::RenderTableCell *)v6);
            v57 = v55 - v56;
            if (__OFSUB__(v55, v56))
              v57 = (v55 >> 31) + 0x7FFFFFFF;
            v58 = *((_QWORD *)a2 + 10);
            v59.i64[0] = __PAIR64__(v66, v67);
            v59.i64[1] = __PAIR64__(v57, v52);
            v72 = vmulq_f32(vcvtq_f32_s32(v59), (float32x4_t)vdupq_n_s32(0x3C800000u));
            (*(void (**)(uint64_t, float32x4_t *))(*(_QWORD *)v58 + 456))(v58, &v72);
            v40 = 0;
            goto LABEL_72;
          }
LABEL_71:
          v40 = 1;
LABEL_72:
          v41 = WebCore::Document::compositeOperatorForBackgroundColor(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 24) + 8) + 40) + 8), (const WebCore::Color *)&v75, (const WebCore::RenderObject *)v6);
          v72.i64[0] = v6;
          v72.i64[1] = (uint64_t)a2;
          v42 = *(_QWORD *)(v6 + 160);
          v69 = v33 | (unint64_t)(v32 << 32);
          v70 = v42;
          this = WebCore::BackgroundPainter::paintFillLayers((uint64_t)&v72, (const WebCore::CachedImageClient *)&v75, (uint64_t)v19, (uint64_t *)&v69, 0, v41, a4);
          if ((v40 & 1) == 0)
            this = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v39 + 104))(v39, 1);
          goto LABEL_35;
        }
      }
    }
    v39 = *((_QWORD *)a2 + 10);
    goto LABEL_71;
  }
  if (*(float *)((v75 & 0xFFFFFFFFFFFFLL) + 0x10) > 0.0)
    goto LABEL_61;
LABEL_35:
  if ((v75 & 0x8000000000000) != 0)
  {
    this = v75 & 0xFFFFFFFFFFFFLL;
    do
    {
      v61 = __ldaxr((unsigned int *)this);
      v62 = v61 - 1;
    }
    while (__stlxr(v62, (unsigned int *)this));
    if (!v62)
    {
      atomic_store(1u, (unsigned int *)this);
      return WTF::fastFree((WTF *)this, v21);
    }
  }
  return this;
}

void WebCore::RenderTableCell::paintBoxDecorations(WebCore::RenderTableCell *this, WebCore::PaintInfo *a2, const WebCore::LayoutPoint *a3)
{
  WebCore::RenderTableCell *v3;
  BOOL v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WebCore::RenderTableCell *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  WebCore::FillLayer *v28;
  uint64_t v29;
  void *v30;
  uint64_t (*v31)();
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  float v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t FieldsetLegend;
  unint64_t v51;
  unsigned int v52;
  double v53;
  int v54;
  BOOL v55;
  int v56;
  int v57;
  unsigned int v58;
  int v59;
  uint64_t v60;
  int v61;
  unsigned int v62;
  int v63;
  int v64;
  unsigned int v65;
  int v66;
  unsigned int v67;
  int v68;
  int v69;
  unsigned int v70;
  int v71;
  unsigned int v72;
  int v73;
  int v74;
  uint64_t v75;
  int32x4_t v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  double v84;
  int v85;
  int v86;
  int v87;
  unsigned int v88;
  int v89;
  unsigned int v90;
  int v91;
  unsigned int v92;
  unsigned int *v93[2];
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  float32x4_t v100;
  uint64_t *v101;
  uint64_t *v102;
  uint64_t v103;

  v3 = (WebCore::RenderTableCell *)*((_QWORD *)a2 + 3);
  if (v3)
    v4 = v3 == this;
  else
    v4 = 1;
  if (!v4)
    return;
  v8 = *((_QWORD *)this + 4);
  if (!v8)
    goto LABEL_66;
  v9 = *(_QWORD *)(v8 + 8);
  if (!v9)
    goto LABEL_66;
  if (*(_BYTE *)(v9 + 46) != 39)
  {
    __break(0xC471u);
    JUMPOUT(0x1964446ECLL);
  }
  v10 = *(_QWORD *)(v9 + 32);
  if (!v10)
    goto LABEL_66;
  v11 = *(_QWORD *)(v10 + 8);
  if (!v11)
    goto LABEL_66;
  if (*(_BYTE *)(v11 + 46) != 40)
  {
    __break(0xC471u);
    JUMPOUT(0x19644472CLL);
  }
  v12 = *(_QWORD *)(v11 + 32);
  if (v12)
  {
    v13 = *(_QWORD *)(v12 + 8);
    if (v13)
    {
      v14 = *(unsigned __int8 *)(v13 + 46);
      if (v14 != 35 && v14 != 63)
      {
        __break(0xC471u);
        JUMPOUT(0x1964448C4);
      }
    }
  }
  else
  {
LABEL_66:
    v13 = 0;
  }
  if ((*(_BYTE *)(v13 + 124) & 4) == 0 && (*((_BYTE *)this + 120) & 1) != 0)
    goto LABEL_98;
  while (1)
  {
    v15 = *((_QWORD *)this + 20);
    v16 = *(_QWORD *)a3;
    v94 = *(_QWORD *)a3;
    v95 = v15;
    if ((*((_BYTE *)this + 45) & 1) != 0)
      goto LABEL_22;
    v17 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    if (!v17)
      goto LABEL_22;
    if ((*(_WORD *)(v17 + 28) & 0x10) == 0)
      goto LABEL_22;
    if (*(_QWORD *)(*(_QWORD *)(v17 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::fieldsetTag + 24))
      goto LABEL_22;
    if ((WebCore::RenderElement::isSkippedContentRoot(this) & 1) != 0)
      goto LABEL_22;
    if (!WebCore::RenderBlock::intrinsicBorderForFieldset(this))
      goto LABEL_22;
    FieldsetLegend = WebCore::RenderBlock::findFieldsetLegend((uint64_t)this, 0);
    if (!FieldsetLegend)
      goto LABEL_22;
    if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
    {
      v51 = HIDWORD(v15);
      v52 = *(_DWORD *)(FieldsetLegend + 164);
      v53 = WebCore::RenderStyle::borderBeforeWidth((WebCore::RenderTableCell *)((char *)this + 80)) * 64.0;
      if (v53 < 2147483650.0 && v53 > -2147483650.0)
        goto LABEL_109;
      if (v53 >= 2147483650.0)
      {
        v54 = 0x7FFFFFFF;
        goto LABEL_110;
      }
      if (v53 > -2147483650.0)
LABEL_109:
        v54 = (int)v53;
      else
        v54 = 0x80000000;
LABEL_110:
      v55 = __OFSUB__(v52, v54);
      v56 = v52 - v54;
      if (v55)
        v56 = (v52 >> 31) + 0x7FFFFFFF;
      v57 = (v56 / 2) & ~((v56 + (v56 < 0)) >> 31);
      v58 = v51 - v57;
      if (__OFSUB__((_DWORD)v51, v57))
        v58 = (v51 >> 31) + 0x7FFFFFFF;
      HIDWORD(v95) = v58;
      if (((unsigned __int16)*((_DWORD *)this + 31) >> 13) - 1 >= 5)
      {
        v55 = __OFADD__(HIDWORD(v16), v57);
        v59 = HIDWORD(v16) + v57;
        if (v55)
          v59 = (HIDWORD(v16) >> 31) + 0x7FFFFFFF;
        HIDWORD(v94) = v59;
      }
      goto LABEL_22;
    }
    v83 = *(_DWORD *)(FieldsetLegend + 160);
    v84 = WebCore::RenderStyle::borderBeforeWidth((WebCore::RenderTableCell *)((char *)this + 80)) * 64.0;
    if (v84 >= 2147483650.0 || v84 <= -2147483650.0)
    {
      if (v84 >= 2147483650.0)
      {
        v85 = 0x7FFFFFFF;
        goto LABEL_164;
      }
      if (v84 <= -2147483650.0)
      {
        v85 = 0x80000000;
        goto LABEL_164;
      }
    }
    v85 = (int)v84;
LABEL_164:
    v55 = __OFSUB__(v83, v85);
    v86 = v83 - v85;
    if (v55)
      v86 = (v83 >> 31) + 0x7FFFFFFF;
    v87 = (v86 / 2) & ~((v86 + (v86 < 0)) >> 31);
    v88 = v15 - v87;
    if (__OFSUB__((_DWORD)v15, v87))
      v88 = (v15 >> 31) + 0x7FFFFFFF;
    LODWORD(v95) = v88;
    v89 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
    if (v89 == 4 || v89 == 2)
    {
      v55 = __OFADD__((_DWORD)v16, v87);
      v90 = v16 + v87;
      if (v55)
        v90 = (v16 >> 31) + 0x7FFFFFFF;
      LODWORD(v94) = v90;
    }
LABEL_22:
    v93[0] = (unsigned int *)this;
    v93[1] = (unsigned int *)a2;
    WebCore::BackgroundPainter::paintBoxShadow(v93, (const WebCore::LayoutRect *)&v94, (uint64_t)this + 80, 0, (const WebCore::LayoutSize *)1, 1);
    v18 = (WebCore::RenderTableCell *)*((_QWORD *)a2 + 3);
    if (v18 && v18 != this)
      goto LABEL_53;
    if ((*(_BYTE *)(*((_QWORD *)this + 13) + 239) & 4) != 0)
      goto LABEL_53;
    v19 = *((_DWORD *)this + 30);
    if ((v19 & 0x30) != 0)
      goto LABEL_53;
    v20 = *((_QWORD *)this + 4);
    if (!v20)
      goto LABEL_67;
    v21 = *(_QWORD *)(v20 + 8);
    if (!v21)
      goto LABEL_67;
    if (*(_BYTE *)(v21 + 46) != 39)
    {
      __break(0xC471u);
      JUMPOUT(0x19644470CLL);
    }
    v22 = *(_QWORD *)(v21 + 32);
    if (!v22)
      goto LABEL_67;
    v23 = *(_QWORD *)(v22 + 8);
    if (!v23)
      goto LABEL_67;
    if (*(_BYTE *)(v23 + 46) != 40)
    {
      __break(0xC471u);
      JUMPOUT(0x19644474CLL);
    }
    v24 = *(_QWORD *)(v23 + 32);
    if (v24)
    {
      v25 = *(_QWORD *)(v24 + 8);
      if (v25)
      {
        v26 = *(unsigned __int8 *)(v25 + 46);
        if (v26 != 35 && v26 != 63)
        {
          __break(0xC471u);
          JUMPOUT(0x1964448E4);
        }
      }
    }
    else
    {
LABEL_67:
      v25 = 0;
    }
    if ((v19 & 1) != 0 && (*(_DWORD *)(v25 + 124) & 4) == 0)
    {
      v60 = *((unsigned int *)this + 16);
      if (!(v60 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32))
        || !*(_QWORD *)((v60 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8))
      {
        goto LABEL_53;
      }
    }
    v27 = *(_QWORD *)(*((_QWORD *)this + 11) + 16);
    v28 = *(WebCore::FillLayer **)(v27 + 8);
    v100.i64[0] = (uint64_t)&v99;
    v100.i64[1] = (uint64_t)&v99;
    v101 = &v99;
    v102 = &v99;
    v29 = *(unsigned int *)(v27 + 24);
    if ((_DWORD)v29 == -1)
      goto LABEL_97;
    v103 = (uint64_t)&v100;
    ((void (*)(uint64_t *__return_ptr, uint64_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v29])(&v97, &v103, v27 + 16);
    if ((_DWORD)v98 == 1)
      break;
    v99 = *((_QWORD *)this + 14) + 328;
    v100.i64[0] = (uint64_t)&v99;
    v100.i64[1] = (uint64_t)&v99;
    v101 = &v99;
    v102 = &v99;
    if ((_DWORD)v98 != -1)
    {
      v103 = (uint64_t)&v100;
      ((void (*)(uint64_t *__return_ptr, uint64_t *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix[v98])(&v96, &v103, &v97);
      goto LABEL_41;
    }
LABEL_97:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_98:
    v49 = *((unsigned int *)this + 16);
    if (!(v49 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32))
      || !*(_QWORD *)((v49 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8))
    {
      return;
    }
  }
  v33 = *(_QWORD *)(*((_QWORD *)this + 14) + 328);
  v96 = v33;
  if ((v33 & 0x8000000000000) != 0)
  {
    v34 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFLL);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 + 1, v34));
  }
LABEL_41:
  if ((_DWORD)v98 != -1)
    ((void (*)(float32x4_t *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v98])(&v100, &v97);
  if ((*((_DWORD *)this + 31) & 0xC00) != 0x800 || (*(_BYTE *)(*((_QWORD *)this + 13) + 239) & 2) != 0)
  {
    v103 = v96;
  }
  else
  {
    WebCore::RenderStyle::colorResolvingCurrentColor((_QWORD *)this + 10, 61, 1, (WebCore::Color *)&v100);
    if (v100.i64[0] == 0x1104000000000000)
    {
      v103 = 0;
      if (v96)
      {
        v103 = v96;
        v96 = 0;
      }
    }
    else
    {
      if ((v96 & 0x8000000000000) != 0)
        v39 = *(float *)((v96 & 0xFFFFFFFFFFFFLL) + 0x10);
      else
        v39 = (float)v96 / 255.0;
      WebCore::Color::colorWithAlpha((uint64_t)&v100, v39, &v103);
      if ((v100.i64[0] & 0x8000000000000) != 0)
      {
        v40 = (unsigned int *)(v100.i64[0] & 0xFFFFFFFFFFFFLL);
        do
        {
          v41 = __ldaxr(v40);
          v42 = v41 - 1;
        }
        while (__stlxr(v42, v40));
        if (!v42)
        {
          atomic_store(1u, v40);
          WTF::fastFree((WTF *)v40, v30);
        }
      }
    }
    if ((v96 & 0x8000000000000) != 0)
    {
      v36 = (unsigned int *)(v96 & 0xFFFFFFFFFFFFLL);
      do
      {
        v37 = __ldaxr(v36);
        v38 = v37 - 1;
      }
      while (__stlxr(v38, v36));
      if (!v38)
      {
        atomic_store(1u, v36);
        WTF::fastFree((WTF *)v36, v30);
      }
    }
  }
  if (*((_QWORD *)v28 + 1))
  {
    if (!WebCore::FillLayer::hasImageInAnyLayer(v28))
      goto LABEL_50;
    goto LABEL_91;
  }
  if (*((_QWORD *)v28 + 2))
    v31 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
  else
    v31 = 0;
  if (v31)
    goto LABEL_91;
LABEL_50:
  if ((v103 & 0x8000000000000) != 0)
  {
    if (*(float *)((v103 & 0xFFFFFFFFFFFFLL) + 0x10) <= 0.0)
      goto LABEL_52;
LABEL_91:
    WebCore::RenderStyle::colorByApplyingColorFilter((uint64_t)this + 80, (const WebCore::Color *)&v103, (unint64_t *)&v100);
    WebCore::Color::operator=((unint64_t *)&v103, &v100);
    if ((v100.i64[0] & 0x8000000000000) != 0)
    {
      v80 = (unsigned int *)(v100.i64[0] & 0xFFFFFFFFFFFFLL);
      do
      {
        v81 = __ldaxr(v80);
        v82 = v81 - 1;
      }
      while (__stlxr(v82, v80));
      if (!v82)
      {
        atomic_store(1u, v80);
        WTF::fastFree((WTF *)v80, v43);
      }
    }
    v44 = *(_QWORD *)a3;
    if ((*((_BYTE *)this + 21) & 0x80) != 0)
    {
      v45 = *((_QWORD *)a2 + 10);
      if ((*(_BYTE *)(v25 + 124) & 4) != 0)
      {
        (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v45 + 96))(*((_QWORD *)a2 + 10), 1);
        v61 = WebCore::RenderTableCell::borderLeft(this);
        v62 = v44 + v61;
        if (__OFADD__((_DWORD)v44, v61))
          v62 = (v44 >> 31) + 0x7FFFFFFF;
        v92 = v62;
        v63 = WebCore::RenderTableCell::borderTop(this);
        v64 = HIDWORD(v44) + v63;
        if (__OFADD__(HIDWORD(v44), v63))
          v64 = (HIDWORD(v44) >> 31) + 0x7FFFFFFF;
        v91 = v64;
        v65 = *((_DWORD *)this + 40);
        v66 = WebCore::RenderTableCell::borderLeft(this);
        if (__OFSUB__(v65, v66))
          v67 = (v65 >> 31) + 0x7FFFFFFF;
        else
          v67 = v65 - v66;
        v68 = WebCore::RenderTableCell::borderRight(this);
        if (__OFSUB__(v67, v68))
          v69 = (v67 >> 31) + 0x7FFFFFFF;
        else
          v69 = v67 - v68;
        v70 = *((_DWORD *)this + 41);
        v71 = WebCore::RenderTableCell::borderTop(this);
        if (__OFSUB__(v70, v71))
          v72 = (v70 >> 31) + 0x7FFFFFFF;
        else
          v72 = v70 - v71;
        v73 = WebCore::RenderTableCell::borderBottom(this);
        v74 = v72 - v73;
        if (__OFSUB__(v72, v73))
          v74 = (v72 >> 31) + 0x7FFFFFFF;
        v75 = *((_QWORD *)a2 + 10);
        v76.i64[0] = __PAIR64__(v91, v92);
        v76.i64[1] = __PAIR64__(v74, v69);
        v100 = vmulq_f32(vcvtq_f32_s32(v76), (float32x4_t)vdupq_n_s32(0x3C800000u));
        (*(void (**)(uint64_t, float32x4_t *))(*(_QWORD *)v75 + 456))(v75, &v100);
        v46 = 0;
        goto LABEL_95;
      }
    }
    else
    {
      v45 = *((_QWORD *)a2 + 10);
    }
    v46 = 1;
LABEL_95:
    v47 = WebCore::Document::compositeOperatorForBackgroundColor(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8), (const WebCore::Color *)&v103, this);
    v100.i64[0] = (uint64_t)this;
    v100.i64[1] = (uint64_t)a2;
    v48 = *((_QWORD *)this + 20);
    v97 = v44;
    v98 = v48;
    WebCore::BackgroundPainter::paintFillLayers((uint64_t)&v100, (const WebCore::CachedImageClient *)&v103, (uint64_t)v28, &v97, 0, v47, this);
    if ((v46 & 1) == 0)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v45 + 104))(v45, 1);
    goto LABEL_52;
  }
  if ((_BYTE)v103)
    goto LABEL_91;
LABEL_52:
  if ((v103 & 0x8000000000000) != 0)
  {
    v77 = (unsigned int *)(v103 & 0xFFFFFFFFFFFFLL);
    do
    {
      v78 = __ldaxr(v77);
      v79 = v78 - 1;
    }
    while (__stlxr(v79, v77));
    if (!v79)
    {
      atomic_store(1u, v77);
      WTF::fastFree((WTF *)v77, v30);
    }
  }
LABEL_53:
  WebCore::BackgroundPainter::paintBoxShadow(v93, (const WebCore::LayoutRect *)&v94, (uint64_t)this + 80, 1, (const WebCore::LayoutSize *)1, 1);
  v32 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
  if ((*(float *)(v32 + 120) != 0.0 && (*(_BYTE *)(v32 + 124) & 0xF) != 0
     || *(float *)(v32 + 144) != 0.0 && (*(_BYTE *)(v32 + 148) & 0xF) != 0
     || *(float *)(v32 + 168) != 0.0 && (*(_BYTE *)(v32 + 172) & 0xF) != 0
     || *(float *)(v32 + 192) != 0.0 && (*(_BYTE *)(v32 + 196) & 0xF) != 0)
    && (*(_BYTE *)(v13 + 124) & 4) == 0)
  {
    WebCore::BackgroundPainter::BackgroundPainter(&v100, (uint64_t)this, (uint64_t)a2);
    WebCore::BorderPainter::paintBorder((unsigned int **)&v100, (int *)&v94, (uint64_t)this + 80, 0, (const WebCore::LayoutSize *)1, 1);
  }
}

uint64_t WebCore::RenderTableCell::paintMask(uint64_t this, WebCore::PaintInfo *a2, const WebCore::LayoutPoint *a3)
{
  WebCore::RenderBox *v3;
  int v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];

  if ((*(_BYTE *)(*(_QWORD *)(this + 104) + 239) & 4) == 0)
  {
    v3 = (WebCore::RenderBox *)this;
    v4 = *(_DWORD *)(this + 120);
    if ((v4 & 0x30) == 0 && *((_WORD *)a2 + 8) == 1024)
    {
      v6 = *(_QWORD *)(*(_QWORD *)(this + 32) + 8);
      if (*(_BYTE *)(v6 + 46) != 39)
        goto LABEL_16;
      v7 = *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8);
      if (*(_BYTE *)(v7 + 46) != 40)
      {
        __break(0xC471u);
        JUMPOUT(0x196444D8CLL);
      }
      v8 = *(_QWORD *)(*(_QWORD *)(v7 + 32) + 8);
      v9 = *(unsigned __int8 *)(v8 + 46);
      if (v9 != 35 && v9 != 63)
      {
LABEL_16:
        __break(0xC471u);
        JUMPOUT(0x196444D6CLL);
      }
      if ((v4 & 1) == 0
        || (*(_DWORD *)(v8 + 124) & 4) != 0
        || (v10 = *(unsigned int *)(this + 64), v10 | ((unint64_t)*(unsigned __int8 *)(this + 68) << 32))
        && *(_QWORD *)((v10 | ((unint64_t)*(unsigned __int8 *)(this + 68) << 32)) + 8))
      {
        v11 = *(_QWORD *)(this + 160);
        v12[0] = *(_QWORD *)a3;
        v12[1] = v11;
        WebCore::RenderBlock::adjustBorderBoxRectForPainting((WebCore::RenderBlock *)this, (WebCore::LayoutRect *)v12);
        return WebCore::RenderBox::paintMaskImages(v3, a2, (const WebCore::LayoutRect *)v12);
      }
    }
  }
  return this;
}

uint64_t WebCore::RenderTableCell::scrollbarsChanged(WebCore::RenderTableCell *this, int a2, int a3)
{
  uint64_t v6;
  uint64_t result;
  unsigned int v8;
  int v9;
  uint64_t v11;
  int v12;
  __int16 v13;
  BOOL v15;
  char *v16;
  unsigned int v17;
  int v18;
  int v19;
  BOOL v20;
  unsigned int v21;
  int v22;
  int v23;
  unsigned int v24;
  int v25;
  BOOL v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  unsigned int v32;
  int v33;

  v6 = 1360;
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
    v6 = 1352;
  result = (*(uint64_t (**)(void))(*(_QWORD *)this + v6))();
  v8 = (_DWORD)result << 6;
  if ((int)result < -33554432)
    v8 = 0x80000000;
  if ((int)result > 0x1FFFFFF)
    v8 = 0x7FFFFFFF;
  if (v8)
  {
    v9 = (*((_DWORD *)this + 5) & 0x1000) != 0 ? a3 : 1;
    if ((a2 | ((*((_DWORD *)this + 5) & 0x1000u) >> 12)) == 1 && v9 != 0)
    {
      v11 = *((_QWORD *)this + 11);
      v12 = *(_BYTE *)(*(_QWORD *)(v11 + 8) + 68) & 0xF0;
      v13 = *(_WORD *)(*(_QWORD *)(v11 + 32) + 120);
      v15 = v12 == 16 && (v13 & 0x7F) == 0 || (v13 & 0xF) == 3;
      if (v15 || (v13 & 0x60) == 0x20)
      {
        v16 = (char *)this + 160;
        if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
          v16 = (char *)this + 164;
        v17 = *(_DWORD *)v16;
        v18 = *((_DWORD *)this + 63);
        v19 = *((_DWORD *)this + 64);
        v20 = __OFSUB__(v17, v18);
        v21 = v17 - v18;
        if (v20)
          v21 = (v17 >> 31) + 0x7FFFFFFF;
        v20 = __OFSUB__(v21, v19);
        v22 = v21 - v19;
        v23 = (v21 >> 31) + 0x7FFFFFFF;
        if (!v20)
          v23 = v22;
        v20 = __OFSUB__(v17, v8);
        v24 = v17 - v8;
        if (v20)
          v24 = (v17 >> 31) + 0x7FFFFFFF;
        v25 = v24 - v23;
        v26 = __OFSUB__(v24, v23);
        v27 = (v24 >> 31) + 0x7FFFFFFF;
        if (!v26)
          v27 = v25;
        if (v27 >= 0)
          v28 = v27;
        else
          v28 = v27 + 1;
        v29 = v28 >> 1;
        v20 = __OFSUB__(v27, v28 >> 1);
        v30 = v27 - (v28 >> 1);
        v31 = (v27 >> 31) + 0x7FFFFFFF;
        if (!v20)
          v31 = v30;
        *((_DWORD *)this + 63) = v29;
      }
      else
      {
        v32 = *((_DWORD *)this + 64);
        v20 = __OFSUB__(v32, v8);
        v31 = v32 - v8;
        v33 = (v32 >> 31) + 0x7FFFFFFF;
        if (v20)
          v31 = v33;
      }
      *((_DWORD *)this + 64) = v31;
    }
  }
  return result;
}

uint64_t WebCore::RenderScrollbarTheme::scrollbarThickness(WebCore::ScrollbarTheme *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;

  v5 = WebCore::ScrollbarTheme::theme(a1);
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v5 + 40))(v5, a2, a3);
}

uint64_t WebCore::RenderScrollbarTheme::buttonsPlacement(WebCore::RenderScrollbarTheme *this)
{
  uint64_t *v1;
  char *v3;

  {
    if (BYTE1(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings))
    {
      v1 = &WebCore::ScrollbarTheme::theme(void)::mockTheme;
        return (*(uint64_t (**)(uint64_t *))(*v1 + 48))(v1);
      WebCore::ScrollbarTheme::theme(void)::mockTheme = (uint64_t)off_1E341CAA8;
LABEL_9:
      *v3 = 1;
      return (*(uint64_t (**)(uint64_t *))(*v1 + 48))(v1);
    }
  }
  else
  {
    WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
    *(_OWORD *)&byte_1ECE90A50 = 0u;
    qword_1ECE90A60 = 0;
    LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
    *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
    *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
    byte_1ECE90A56 = 1;
    *(_DWORD *)&algn_1ECE90A57 = 0;
    unk_1ECE90A5B = 0;
    byte_1ECE90A5D = 1;
    byte_1ECE90A5F = 1;
  }
  v1 = &WebCore::ScrollbarTheme::nativeTheme(void)::theme;
  {
    WebCore::ScrollbarTheme::nativeTheme(void)::theme = (uint64_t)off_1E3354BF8;
    goto LABEL_9;
  }
  return (*(uint64_t (**)(uint64_t *))(*v1 + 48))(v1);
}

uint64_t WebCore::RenderScrollbarTheme::supportsControlTints(WebCore::RenderScrollbarTheme *this)
{
  return 1;
}

uint64_t WebCore::RenderScrollbarTheme::handleMousePressEvent()
{
  uint64_t *v0;
  char *v2;

  {
    if (BYTE1(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings))
    {
      v0 = &WebCore::ScrollbarTheme::theme(void)::mockTheme;
        return (*(uint64_t (**)(uint64_t *))(*v0 + 136))(v0);
      WebCore::ScrollbarTheme::theme(void)::mockTheme = (uint64_t)off_1E341CAA8;
LABEL_9:
      *v2 = 1;
      return (*(uint64_t (**)(uint64_t *))(*v0 + 136))(v0);
    }
  }
  else
  {
    WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
    *(_OWORD *)&byte_1ECE90A50 = 0u;
    qword_1ECE90A60 = 0;
    LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
    *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
    *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
    byte_1ECE90A56 = 1;
    *(_DWORD *)&algn_1ECE90A57 = 0;
    unk_1ECE90A5B = 0;
    byte_1ECE90A5D = 1;
    byte_1ECE90A5F = 1;
  }
  v0 = &WebCore::ScrollbarTheme::nativeTheme(void)::theme;
  {
    WebCore::ScrollbarTheme::nativeTheme(void)::theme = (uint64_t)off_1E3354BF8;
    goto LABEL_9;
  }
  return (*(uint64_t (**)(uint64_t *))(*v0 + 136))(v0);
}

uint64_t WebCore::RenderScrollbarTheme::initialAutoscrollTimerDelay(WebCore::RenderScrollbarTheme *this)
{
  uint64_t *v1;
  char *v3;

  {
    if (BYTE1(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings))
    {
      v1 = &WebCore::ScrollbarTheme::theme(void)::mockTheme;
        return (*(uint64_t (**)(uint64_t *))(*v1 + 200))(v1);
      WebCore::ScrollbarTheme::theme(void)::mockTheme = (uint64_t)off_1E341CAA8;
LABEL_9:
      *v3 = 1;
      return (*(uint64_t (**)(uint64_t *))(*v1 + 200))(v1);
    }
  }
  else
  {
    WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
    *(_OWORD *)&byte_1ECE90A50 = 0u;
    qword_1ECE90A60 = 0;
    LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
    *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
    *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
    byte_1ECE90A56 = 1;
    *(_DWORD *)&algn_1ECE90A57 = 0;
    unk_1ECE90A5B = 0;
    byte_1ECE90A5D = 1;
    byte_1ECE90A5F = 1;
  }
  v1 = &WebCore::ScrollbarTheme::nativeTheme(void)::theme;
  {
    WebCore::ScrollbarTheme::nativeTheme(void)::theme = (uint64_t)off_1E3354BF8;
    goto LABEL_9;
  }
  return (*(uint64_t (**)(uint64_t *))(*v1 + 200))(v1);
}

uint64_t WebCore::RenderScrollbarTheme::autoscrollTimerDelay(WebCore::RenderScrollbarTheme *this)
{
  uint64_t *v1;
  char *v3;

  {
    if (BYTE1(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings))
    {
      v1 = &WebCore::ScrollbarTheme::theme(void)::mockTheme;
        return (*(uint64_t (**)(uint64_t *))(*v1 + 208))(v1);
      WebCore::ScrollbarTheme::theme(void)::mockTheme = (uint64_t)off_1E341CAA8;
LABEL_9:
      *v3 = 1;
      return (*(uint64_t (**)(uint64_t *))(*v1 + 208))(v1);
    }
  }
  else
  {
    WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
    *(_OWORD *)&byte_1ECE90A50 = 0u;
    qword_1ECE90A60 = 0;
    LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
    *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
    *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
    byte_1ECE90A56 = 1;
    *(_DWORD *)&algn_1ECE90A57 = 0;
    unk_1ECE90A5B = 0;
    byte_1ECE90A5D = 1;
    byte_1ECE90A5F = 1;
  }
  v1 = &WebCore::ScrollbarTheme::nativeTheme(void)::theme;
  {
    WebCore::ScrollbarTheme::nativeTheme(void)::theme = (uint64_t)off_1E3354BF8;
    goto LABEL_9;
  }
  return (*(uint64_t (**)(uint64_t *))(*v1 + 208))(v1);
}

uint64_t WebCore::RenderScrollbarTheme::registerScrollbar(WebCore::RenderScrollbarTheme *this, WebCore::Scrollbar *a2)
{
  uint64_t *v3;

  v3 = WebCore::ScrollbarTheme::theme(this);
  return (*(uint64_t (**)(uint64_t *, WebCore::Scrollbar *))(*v3 + 216))(v3, a2);
}

uint64_t WebCore::RenderScrollbarTheme::unregisterScrollbar(WebCore::RenderScrollbarTheme *this, WebCore::Scrollbar *a2)
{
  uint64_t *v3;

  v3 = WebCore::ScrollbarTheme::theme(this);
  return (*(uint64_t (**)(uint64_t *, WebCore::Scrollbar *))(*v3 + 224))(v3, a2);
}

const char *WebCore::RenderTextControl::renderName(WebCore::RenderTextControl *this)
{
  return "RenderTextControl";
}

uint64_t WebCore::RenderTextControl::canHaveGeneratedChildren(WebCore::RenderTextControl *this)
{
  return 0;
}

uint64_t WebCore::RenderTextControl::canBeProgramaticallyScrolled(WebCore::RenderTextControl *this)
{
  return 1;
}

uint64_t WebCore::RenderTextControl::avoidsFloats(WebCore::RenderTextControl *this)
{
  return 1;
}

void WebCore::RenderSearchField::itemToolTip(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebCore::RenderSearchField::itemAccessibilityText(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::RenderSearchField::shouldPopOver(WebCore::RenderSearchField *this)
{
  return 0;
}

void `non-virtual thunk to'WebCore::RenderSearchField::itemToolTip(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void `non-virtual thunk to'WebCore::RenderSearchField::itemAccessibilityText(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t `non-virtual thunk to'WebCore::RenderSearchField::shouldPopOver(WebCore::RenderSearchField *this)
{
  return 0;
}

uint64_t WebCore::PopupMenuClient::multiple(WebCore::PopupMenuClient *this)
{
  return 0;
}

const char *WebCore::RenderSlider::renderName(WebCore::RenderSlider *this)
{
  return "RenderSlider";
}

uint64_t WebCore::RenderSlider::isFlexibleBoxImpl(WebCore::RenderSlider *this)
{
  return 1;
}

const char *WebCore::RenderTable::renderName(WebCore::RenderTable *this)
{
  return "RenderTable";
}

unint64_t WebCore::RenderTable::borderWidths(WebCore::RenderTable *this, void *a2)
{
  int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  WebCore::RenderStyle *v12;
  uint64_t v13;

  v3 = *((_DWORD *)this + 31);
  v4 = (unsigned __int16)v3 >> 13;
  if ((v4 - 2) < 4)
  {
    if ((*((_BYTE *)this + 123) & 4) != 0)
      v6 = *((_DWORD *)this + 86);
    else
      v6 = *((_DWORD *)this + 85);
  }
  else
  {
    if (v4 == 1)
    {
      v5 = WebCore::RenderTable::borderAfter(this, a2);
    }
    else if ((v3 & 4) != 0)
    {
      if ((*((_BYTE *)this + 328) & 8) != 0)
        WebCore::RenderTable::recalcSections(this, a2);
      v5 = WebCore::RenderTable::outerBorderBefore(this);
    }
    else
    {
      v5 = WebCore::RenderBlock::borderBefore(this);
    }
    v6 = v5;
  }
  switch((unsigned __int16)*((_DWORD *)this + 31) >> 13)
  {
    case 2:
    case 4:
      v13 = WebCore::RenderTable::borderAfter(this, a2);
      goto LABEL_27;
    case 3:
    case 5:
      v13 = WebCore::RenderTable::borderBefore(this, a2);
LABEL_27:
      v7 = v13;
      break;
    default:
      if ((*((_BYTE *)this + 123) & 4) != 0)
        v7 = *((unsigned int *)this + 85);
      else
        v7 = *((unsigned int *)this + 86);
      break;
  }
  v8 = *((_DWORD *)this + 31);
  v9 = (unsigned __int16)v8 >> 13;
  if ((v9 - 2) >= 4)
  {
    v10 = v9 - 1;
    if (v10)
    {
      if ((v8 & 4) != 0)
      {
        if ((*((_BYTE *)this + 328) & 8) != 0)
          WebCore::RenderTable::recalcSections(this, a2);
        WebCore::RenderTable::outerBorderAfter(this, a2);
      }
      else
      {
        v12 = (WebCore::RenderTable *)((char *)this + 80);
        switch(v10)
        {
          case 0:
            WebCore::RenderStyle::borderTopWidth(v12);
            break;
          case 1:
          case 3:
            WebCore::RenderStyle::borderRightWidth(v12);
            break;
          case 2:
          case 4:
            WebCore::RenderStyle::borderLeftWidth(v12);
            break;
          default:
            break;
        }
      }
    }
    else
    {
      WebCore::RenderTable::borderBefore(this, a2);
    }
  }
  switch((unsigned __int16)*((_DWORD *)this + 31) >> 13)
  {
    case 2:
    case 4:
      WebCore::RenderTable::borderBefore(this, a2);
      break;
    case 3:
    case 5:
      WebCore::RenderTable::borderAfter(this, a2);
      break;
    default:
      return v6 | (unint64_t)(v7 << 32);
  }
  return v6 | (unint64_t)(v7 << 32);
}

uint64_t WebCore::RenderTable::overflowClipRectForChildLayers(_QWORD *a1, unsigned int *a2, uint64_t a3, int a4)
{
  return WebCore::RenderBox::overflowClipRect(a1, a2, a3, a4);
}

WTF::StringImpl *WebCore::RenderTable::createAnonymousBoxWithSameTypeAs@<X0>(const WebCore::RenderBox *a1@<X1>, const WebCore::RenderStyle *a2@<X2>, WebCore::RenderElement **a3@<X8>)
{
  return WebCore::RenderTable::createTableWithStyle(*(WebCore::RenderTable **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 3) + 8) + 40) + 8), (const WebCore::RenderBox *)((char *)a1 + 80), a2, a3);
}

const char *WebCore::RenderTableCell::renderName(WebCore::RenderTableCell *this)
{
  unsigned __int16 *v1;

  if ((*((_BYTE *)this + 45) & 1) != 0)
    return "RenderTableCell (anonymous)";
  v1 = *(unsigned __int16 **)(*((_QWORD *)this + 3) + 8);
  if (v1 && (~v1[14] & 0x408) == 0 && (*(unsigned int (**)(unsigned __int16 *))(*(_QWORD *)v1 + 368))(v1))
    return "RenderTableCell (anonymous)";
  else
    return "RenderTableCell";
}

WTF::StringImpl *WebCore::RenderTableCell::createAnonymousBoxWithSameTypeAs@<X0>(const WebCore::RenderBox *a1@<X1>, const WTF::StringImpl *a2@<X2>, WebCore::RenderElement **a3@<X8>)
{
  uint64_t v5;
  WebCore::RenderElement *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  const WebCore::Element *v15;
  WTF::StringImpl *result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 3) + 8) + 40) + 8);
  WebCore::RenderStyle::createAnonymousStyleWithDisplay((_QWORD *)a1 + 10, (WTF::StringImpl *)0xC, a2, (uint64_t)&v17);
  v6 = (WebCore::RenderElement *)bmalloc::api::isoAllocate();
  v7 = WebCore::RenderObject::RenderObject((uint64_t)v6, 37, v5, 92, 1);
  *(_QWORD *)v7 = off_1E3422BC8;
  *(_QWORD *)(v7 + 64) = 0;
  *(_QWORD *)(v7 + 70) = 0;
  *(_DWORD *)(v7 + 80) = 0;
  v8 = v18;
  v9 = v19;
  v18 = 0;
  *(_QWORD *)(v7 + 88) = v8;
  *(_QWORD *)(v7 + 96) = v9;
  v10 = v20;
  v20 = 0u;
  *(_OWORD *)(v7 + 104) = v10;
  *(_QWORD *)(v7 + 120) = v21;
  v11 = v22;
  v22 = 0u;
  *(_OWORD *)(v7 + 128) = v11;
  *(_OWORD *)(v7 + 144) = 0u;
  *(_OWORD *)(v7 + 160) = 0u;
  *(_OWORD *)(v7 + 176) = 0u;
  *(_QWORD *)(v7 + 192) = 0;
  *(_DWORD *)(v7 + 200) = -1;
  *(_BYTE *)(v7 + 204) &= 0xFCu;
  *(_BYTE *)(v7 + 208) = 0;
  *(_BYTE *)(v7 + 212) = 0;
  *(_DWORD *)(v7 + 240) = 0;
  *(_DWORD *)(v7 + 20) |= 0x40000u;
  *(_OWORD *)(v7 + 216) = 0u;
  *(_QWORD *)v7 = off_1E3433080;
  *(_QWORD *)(v7 + 248) = 0x1FFFFFFLL;
  *(_DWORD *)(v7 + 256) = 0;
  WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)&v17, v12);
  result = WebCore::RenderElement::initializeStyle(v6, v13, v14, v15);
  *a3 = v6;
  return result;
}

uint64_t *WTF::HashTable<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderSelectionGeometry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderSelectionGeometry>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderSelectionGeometry>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderSelectionGeometry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>>::~HashTable(uint64_t *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  WTF *v9;

  v3 = *a1;
  if (*a1)
  {
    v5 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v5)
    {
      v6 = *a1;
      do
      {
        v7 = *(WTF **)v6;
        if (*(_QWORD *)v6 != -1)
        {
          v8 = *(_QWORD *)(v6 + 8);
          *(_QWORD *)(v6 + 8) = 0;
          if (v8)
          {
            v9 = *(WTF **)(v8 + 24);
            if (v9)
            {
              *(_QWORD *)(v8 + 24) = 0;
              *(_DWORD *)(v8 + 32) = 0;
              WTF::fastFree(v9, a2);
            }
            WTF::fastFree((WTF *)v8, a2);
            v7 = *(WTF **)v6;
          }
          *(_QWORD *)v6 = 0;
          if (v7)
          {
            if (*(_DWORD *)v7 == 1)
              WTF::fastFree(v7, a2);
            else
              --*(_DWORD *)v7;
          }
        }
        v6 += 16;
        --v5;
      }
      while (v5);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  return a1;
}

unint64_t WTF::Vector<WebCore::CollapsedBorderValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CollapsedBorderValue&>(uint64_t a1, unint64_t a2)
{
  unint64_t result;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  result = WTF::Vector<WebCore::CollapsedBorderValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_DWORD *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)a1 + 24 * v4;
  *(_DWORD *)v6 = *(_DWORD *)result;
  v7 = *(_QWORD *)(result + 8);
  *(_QWORD *)(v6 + 8) = v7;
  if ((v7 & 0x8000000000000) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFLL);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
  }
  *(_BYTE *)(v5 + 24 * v4 + 16) = *(_BYTE *)(result + 16);
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<WebCore::CollapsedBorderValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 24 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<WebCore::CollapsedBorderValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<WebCore::CollapsedBorderValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::CollapsedBorderValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  WTF *v3;
  void *v4;
  int v5;
  uint64_t v6;
  void *v7;

  if (*(unsigned int *)(result + 8) < a2)
  {
    if (a2 >= 0xAAAAAAB)
    {
      __break(0xC471u);
      JUMPOUT(0x196445A68);
    }
    v2 = result;
    v3 = *(WTF **)result;
    v4 = (void *)(*(_QWORD *)result + 24 * *(unsigned int *)(result + 12));
    v5 = 24 * a2;
    v6 = WTF::fastMalloc((WTF *)(24 * a2));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)v2 = v6;
    result = WTF::VectorMover<false,WebCore::CollapsedBorderValue>::move((uint64_t)v3, v4, v6);
    if (v3)
    {
      if (*(WTF **)v2 == v3)
      {
        *(_QWORD *)v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      return WTF::fastFree(v3, v7);
    }
  }
  return result;
}

uint64_t WTF::VectorMover<false,WebCore::CollapsedBorderValue>::move(uint64_t result, void *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  if ((void *)result != a2)
  {
    v4 = a3 + 8;
    do
    {
      *(_DWORD *)(v4 - 8) = *(_DWORD *)result;
      *(_QWORD *)v4 = 0;
      v5 = *(_QWORD *)(result + 8);
      if (v5)
      {
        *(_QWORD *)v4 = v5;
        *(_QWORD *)(result + 8) = 0;
      }
      *(_BYTE *)(v4 + 8) = *(_BYTE *)(result + 16);
      result = WTF::KeyValuePair<int,WebCore::Color>::~KeyValuePair(result, a2) + 24;
      v4 += 24;
    }
    while ((void *)result != a2);
  }
  return result;
}

WTF *WTF::HashMap<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderSelectionGeometry>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderSelectionGeometry>>,WTF::HashTableTraits>::inlineSet<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderSelectionGeometry>>(WTF *result, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  WTF *v7;
  uint64_t v8;
  char v9;
  unsigned int v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  int i;
  uint64_t v19;
  WTF *v20;
  WTF *v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF *v36;

  v7 = result;
  v8 = *a2;
  if (*a2
    || (result = (WTF *)WTF::HashTable<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderSelectionGeometry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderSelectionGeometry>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderSelectionGeometry>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderSelectionGeometry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = 0;
  v12 = *a3;
  v13 = *(_QWORD *)(*a3 + 8);
  v14 = (~(v13 << 32) + v13) ^ ((unint64_t)(~(v13 << 32) + v13) >> 22);
  v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
  v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
  v17 = (v16 >> 31) ^ v16;
  for (i = 1; ; ++i)
  {
    v19 = v17 & v10;
    v20 = (WTF *)(v8 + 16 * v19);
    v21 = *(WTF **)v20;
    if (*(_QWORD *)v20 != -1)
      break;
    v11 = (WTF *)(v8 + 16 * v19);
LABEL_10:
    v17 = i + v19;
  }
  if (!v21)
  {
    if (v11)
    {
      *(_QWORD *)v11 = 0;
      *((_QWORD *)v11 + 1) = 0;
      --*(_DWORD *)(*a2 - 16);
      v12 = *a3;
      v20 = v11;
    }
    *a3 = 0;
    result = *(WTF **)v20;
    *(_QWORD *)v20 = v12;
    if (result)
    {
      if (*(_DWORD *)result == 1)
        result = (WTF *)WTF::fastFree(result, a2);
      else
        --*(_DWORD *)result;
    }
    v22 = *a4;
    *a4 = 0;
    v23 = *((_QWORD *)v20 + 1);
    *((_QWORD *)v20 + 1) = v22;
    if (v23)
    {
      v24 = *(WTF **)(v23 + 24);
      if (v24)
      {
        *(_QWORD *)(v23 + 24) = 0;
        *(_DWORD *)(v23 + 32) = 0;
        WTF::fastFree(v24, a2);
      }
      result = (WTF *)WTF::fastFree((WTF *)v23, a2);
    }
    v25 = *a2;
    if (*a2)
      v26 = *(_DWORD *)(v25 - 12) + 1;
    else
      v26 = 1;
    *(_DWORD *)(v25 - 12) = v26;
    v27 = *a2;
    if (*a2)
      v28 = *(_DWORD *)(v27 - 12);
    else
      v28 = 0;
    v29 = (*(_DWORD *)(v27 - 16) + v28);
    v30 = *(unsigned int *)(v27 - 4);
    if (v30 > 0x400)
    {
      if (v30 <= 2 * v29)
        goto LABEL_25;
    }
    else if (3 * v30 <= 4 * v29)
    {
      if (!(_DWORD)v30)
      {
        v31 = 8;
LABEL_36:
        result = (WTF *)WTF::HashTable<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderSelectionGeometry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderSelectionGeometry>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderSelectionGeometry>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderSelectionGeometry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>>::rehash(a2, v31, (WTF **)v20);
        v20 = result;
        v27 = *a2;
        if (*a2)
          v30 = *(unsigned int *)(v27 - 4);
        else
          v30 = 0;
        goto LABEL_38;
      }
LABEL_25:
      v31 = (_DWORD)v30 << (6 * *(_DWORD *)(v27 - 12) >= (2 * v30));
      goto LABEL_36;
    }
LABEL_38:
    *(_QWORD *)v7 = v20;
    *((_QWORD *)v7 + 1) = v27 + 16 * v30;
    *((_BYTE *)v7 + 16) = 1;
    return result;
  }
  if (*((_QWORD *)v21 + 1) != v13)
    goto LABEL_10;
  if ((v9 & 1) != 0)
    v32 = 0;
  else
    v32 = *(unsigned int *)(v8 - 4);
  *(_QWORD *)v7 = v20;
  *((_QWORD *)v7 + 1) = v8 + 16 * v32;
  *((_BYTE *)v7 + 16) = 0;
  v33 = v8 + 16 * v19;
  v34 = *a4;
  *a4 = 0;
  v35 = *(_QWORD *)(v33 + 8);
  *(_QWORD *)(v33 + 8) = v34;
  if (v35)
  {
    v36 = *(WTF **)(v35 + 24);
    if (v36)
    {
      *(_QWORD *)(v35 + 24) = 0;
      *(_DWORD *)(v35 + 32) = 0;
      WTF::fastFree(v36, a2);
    }
    return (WTF *)WTF::fastFree((WTF *)v35, a2);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderSelectionGeometry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderSelectionGeometry>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderSelectionGeometry>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderSelectionGeometry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl>>>::rehash(uint64_t *a1, unsigned int a2, WTF **a3)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF **v13;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  WTF *v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  WTF *v36;
  uint64_t result;

  v5 = *a1;
  if (*a1)
  {
    v6 = *(_DWORD *)(v5 - 4);
    v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    v10 = 0;
    v11 = 0;
    v12 = v6;
    do
    {
      v13 = (WTF **)(v5 + 16 * v10);
      v14 = *v13;
      if (*v13 != (WTF *)-1)
      {
        if (v14)
        {
          v18 = *a1;
          if (*a1)
            v19 = *(_DWORD *)(v18 - 8);
          else
            v19 = 0;
          v20 = ~(*((_QWORD *)v14 + 1) << 32) + *((_QWORD *)v14 + 1);
          v21 = (v20 ^ (v20 >> 22)) + ~((v20 ^ (v20 >> 22)) << 13);
          v22 = (9 * (v21 ^ (v21 >> 8))) ^ ((9 * (v21 ^ (v21 >> 8))) >> 15);
          v23 = v19 & (((v22 + ~(v22 << 27)) >> 31) ^ (v22 + ~((_DWORD)v22 << 27)));
          v24 = 1;
          do
          {
            v25 = v23;
            v26 = *(_QWORD *)(v18 + 16 * v23);
            v23 = (v23 + v24++) & v19;
          }
          while (v26);
          v27 = v18 + 16 * v25;
          v28 = *(_QWORD *)(v27 + 8);
          *(_QWORD *)(v27 + 8) = 0;
          if (v28)
          {
            v29 = *(WTF **)(v28 + 24);
            if (v29)
            {
              *(_QWORD *)(v28 + 24) = 0;
              *(_DWORD *)(v28 + 32) = 0;
              WTF::fastFree(v29, v9);
            }
            WTF::fastFree((WTF *)v28, v9);
            v30 = *(WTF **)v27;
            *(_QWORD *)v27 = 0;
            if (v30)
            {
              if (*(_DWORD *)v30 == 1)
                WTF::fastFree(v30, v9);
              else
                --*(_DWORD *)v30;
            }
          }
          else
          {
            *(_QWORD *)v27 = 0;
          }
          v31 = *v13;
          *v13 = 0;
          *(_QWORD *)v27 = v31;
          v32 = v5 + 16 * v10;
          v33 = *(_QWORD *)(v32 + 8);
          *(_QWORD *)(v32 + 8) = 0;
          *(_QWORD *)(v27 + 8) = v33;
          v34 = *(_QWORD *)(v32 + 8);
          *(_QWORD *)(v32 + 8) = 0;
          if (v34)
          {
            v35 = *(WTF **)(v34 + 24);
            if (v35)
            {
              *(_QWORD *)(v34 + 24) = 0;
              *(_DWORD *)(v34 + 32) = 0;
              WTF::fastFree(v35, v9);
            }
            WTF::fastFree((WTF *)v34, v9);
          }
          v36 = *v13;
          *v13 = 0;
          if (v36)
          {
            if (*(_DWORD *)v36 == 1)
              WTF::fastFree(v36, v9);
            else
              --*(_DWORD *)v36;
          }
          if (v13 == a3)
            v11 = v27;
        }
        else
        {
          v15 = v5 + 16 * v10;
          v16 = *(_QWORD *)(v15 + 8);
          *(_QWORD *)(v15 + 8) = 0;
          if (v16)
          {
            v17 = *(WTF **)(v16 + 24);
            if (v17)
            {
              *(_QWORD *)(v16 + 24) = 0;
              *(_DWORD *)(v16 + 32) = 0;
              WTF::fastFree(v17, v9);
            }
            WTF::fastFree((WTF *)v16, v9);
            v14 = *v13;
          }
          *v13 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 1)
              WTF::fastFree(v14, v9);
            else
              --*(_DWORD *)v14;
          }
        }
      }
      ++v10;
    }
    while (v10 != v12);
  }
  else
  {
    v11 = 0;
    result = 0;
    if (!v5)
      return result;
  }
  WTF::fastFree((WTF *)(v5 - 16), v9);
  return v11;
}

WTF **WTF::HashTable<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockSelectionGeometry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockSelectionGeometry>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockSelectionGeometry>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBlockSelectionGeometry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>>::rehash(uint64_t *a1, unsigned int a2, WTF **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF **v12;
  WTF **v13;
  WTF *v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  WTF **v26;
  WTF *v27;
  WTF *v28;
  WTF *v29;
  uint64_t v30;
  WTF *v31;
  WTF *v32;
  WTF *v33;
  WTF **result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (WTF **)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != (WTF *)-1)
      {
        if (v14)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = ~(*((_QWORD *)v14 + 1) << 32) + *((_QWORD *)v14 + 1);
          v20 = (v19 ^ (v19 >> 22)) + ~((v19 ^ (v19 >> 22)) << 13);
          v21 = (9 * (v20 ^ (v20 >> 8))) ^ ((9 * (v20 ^ (v20 >> 8))) >> 15);
          v22 = v18 & (((v21 + ~(v21 << 27)) >> 31) ^ (v21 + ~((_DWORD)v21 << 27)));
          v23 = 1;
          do
          {
            v24 = v22;
            v25 = *(_QWORD *)(v17 + 16 * v22);
            v22 = (v22 + v23++) & v18;
          }
          while (v25);
          v26 = (WTF **)(v17 + 16 * v24);
          v27 = v26[1];
          v26[1] = 0;
          if (v27)
          {
            WTF::fastFree(v27, v10);
            v28 = *v26;
            *v26 = 0;
            if (v28)
            {
              if (*(_DWORD *)v28 == 1)
                WTF::fastFree(v28, v10);
              else
                --*(_DWORD *)v28;
            }
          }
          else
          {
            *v26 = 0;
          }
          v29 = *v13;
          *v13 = 0;
          *v26 = v29;
          v30 = v6 + 16 * v11;
          v31 = *(WTF **)(v30 + 8);
          *(_QWORD *)(v30 + 8) = 0;
          v26[1] = v31;
          v32 = *(WTF **)(v30 + 8);
          *(_QWORD *)(v30 + 8) = 0;
          if (v32)
            WTF::fastFree(v32, v10);
          v33 = *v13;
          *v13 = 0;
          if (v33)
          {
            if (*(_DWORD *)v33 == 1)
              WTF::fastFree(v33, v10);
            else
              --*(_DWORD *)v33;
          }
          if (v13 == a3)
            v12 = v26;
        }
        else
        {
          v15 = v6 + 16 * v11;
          v16 = *(WTF **)(v15 + 8);
          *(_QWORD *)(v15 + 8) = 0;
          if (v16)
          {
            WTF::fastFree(v16, v10);
            v14 = *v13;
          }
          *v13 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 1)
              WTF::fastFree(v14, v10);
            else
              --*(_DWORD *)v14;
          }
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

_QWORD *WTF::VectorDestructor<true,WebCore::CollapsedBorderValue>::destruct(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;

  for (; result != a2; result += 3)
  {
    v2 = result[1];
    if ((v2 & 0x8000000000000) != 0)
    {
      v6 = result;
      v7 = a2;
      v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFLL);
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        atomic_store(1u, v3);
        WTF::fastFree((WTF *)v3, a2);
        result = v6;
        a2 = v7;
      }
    }
  }
  return result;
}

void WTF::Vector<WTF::WeakPtr<WebCore::RenderTableCaption,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeFirstMatching<BOOL WTF::Vector<WTF::WeakPtr<WebCore::RenderTableCaption,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeFirst<WebCore::RenderTableCaption*>(WebCore::RenderTableCaption* const&)::{lambda(WTF::WeakPtr<WebCore::RenderTableCaption,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&)#1}>(uint64_t a1, uint64_t *a2)
{
  void *v2;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (void *)*(unsigned int *)(a1 + 12);
  if ((_DWORD)v2)
  {
    v4 = 0;
    v5 = *a2;
    while (1)
    {
      v6 = *(_QWORD *)(*(_QWORD *)a1 + 8 * (_QWORD)v4);
      if (v6)
        v6 = *(_QWORD *)(v6 + 8);
      if (v6 == v5)
        break;
      v4 = (char *)v4 + 1;
      if (v2 == v4)
        return;
    }
    WTF::Vector<WTF::WeakPtr<WebCore::RenderTableCaption,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::remove(a1, v4);
  }
}

void WTF::Vector<WTF::WeakPtr<WebCore::RenderTableCaption,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::remove(uint64_t a1, void *a2)
{
  WTF **v3;

  v3 = (WTF **)(*(_QWORD *)a1 + 8 * (_QWORD)a2);
  WebCore::CompositedClipData::~CompositedClipData(v3, a2);
  WTF::VectorMover<false,WTF::WeakPtr<WebCore::RenderTableCaption,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>::moveOverlapping(v3 + 1, (WebCore::CompositedClipData *)(*(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 12)), (unint64_t)v3);
  --*(_DWORD *)(a1 + 12);
}

void WTF::VectorMover<false,WTF::WeakPtr<WebCore::RenderTableCaption,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>::moveOverlapping(WTF **this, WebCore::CompositedClipData *a2, unint64_t a3)
{
  WTF **v3;
  WTF **v5;
  WTF **v6;
  WTF **v7;
  WTF **v8;
  WTF *v9;
  WTF **v10;
  BOOL v11;
  WebCore::CompositedClipData *v12;
  WTF *v13;

  v3 = (WTF **)a3;
  v5 = this;
  if ((unint64_t)this <= a3)
  {
    if (a2 != (WebCore::CompositedClipData *)this)
    {
      v6 = (WTF **)(((a2 - (WebCore::CompositedClipData *)this) & 0xFFFFFFFFFFFFFFF8) + a3 - 8);
      v7 = (WTF **)((char *)a2 - 8);
      v8 = (WTF **)((char *)a2 - 8);
      do
      {
        v9 = *v7;
        *v8-- = 0;
        *v6-- = v9;
        WebCore::CompositedClipData::~CompositedClipData(v7, a2);
        v11 = v10 == v5;
        v7 = v8;
      }
      while (!v11);
    }
  }
  else if (this != (WTF **)a2)
  {
    v12 = (WebCore::CompositedClipData *)this;
    do
    {
      v13 = *v5;
      *(_QWORD *)v12 = 0;
      v12 = (WebCore::CompositedClipData *)((char *)v12 + 8);
      *v3++ = v13;
      WebCore::CompositedClipData::~CompositedClipData(v5, a2);
      v5 = (WTF **)v12;
    }
    while (v12 != a2);
  }
}

uint64_t WTF::Vector<WebCore::RenderTable::ColumnStruct,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::insert<WebCore::RenderTable::ColumnStruct>(uint64_t result, uint64_t a2, _DWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  int *v12;
  int v13;

  v4 = result;
  v5 = *(unsigned int *)(result + 12);
  if ((_DWORD)v5 == *(_DWORD *)(result + 8))
  {
    result = WTF::Vector<WebCore::RenderTable::ColumnStruct,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v5 + 1, (unint64_t)a3);
    a3 = (_DWORD *)result;
    LODWORD(v5) = *(_DWORD *)(v4 + 12);
  }
  v6 = *(_QWORD *)v4;
  v7 = (_DWORD *)(*(_QWORD *)v4 + 4 * a2);
  v8 = v5;
  if (v5 != a2)
  {
    v9 = v6 + 4 * v5;
    v10 = (_DWORD *)(v6 + ((v9 - (_QWORD)v7) & 0xFFFFFFFFFFFFFFFCLL) + 4 * a2);
    v11 = 4 * a2 - 4 * v8;
    v12 = (int *)(v9 - 4);
    do
    {
      v13 = *v12--;
      *v10-- = v13;
      v11 += 4;
    }
    while (v11);
  }
  *v7 = *a3;
  ++*(_DWORD *)(v4 + 12);
  return result;
}

uint64_t WTF::Vector<WebCore::RenderTable::ColumnStruct,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  _DWORD *v11;
  WTF *v12;
  int v13;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 30)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = result;
      v7 = *(WTF **)result;
      v8 = *(unsigned int *)(result + 12);
      result = WTF::fastMalloc((WTF *)(4 * v5));
      *(_DWORD *)(v6 + 8) = v5;
      *(_QWORD *)v6 = result;
      if ((_DWORD)v8)
      {
        v10 = 4 * v8;
        v11 = (_DWORD *)result;
        v12 = v7;
        do
        {
          v13 = *(_DWORD *)v12;
          v12 = (WTF *)((char *)v12 + 4);
          *v11++ = v13;
          v10 -= 4;
        }
        while (v10);
      }
      if (v7)
      {
        if ((WTF *)result == v7)
        {
          *(_QWORD *)v6 = 0;
          *(_DWORD *)(v6 + 8) = 0;
        }
        return WTF::fastFree(v7, v9);
      }
    }
  }
  return result;
}

uint64_t WTF::Vector<WebCore::LayoutUnit,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  WTF *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  WTF *v15;
  int v16;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  v5 = *(WTF **)result;
  if (v4 >= a2)
    goto LABEL_14;
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= a2)
    v8 = a2;
  else
    v8 = v7;
  if (!(v8 >> 30))
  {
    v9 = *(unsigned int *)(result + 12);
    v10 = WTF::fastMalloc((WTF *)(4 * v8));
    *(_DWORD *)(v3 + 8) = v8;
    *(_QWORD *)v3 = v10;
    if ((_DWORD)v9)
    {
      v13 = 4 * v9;
      v14 = (_DWORD *)v10;
      v15 = v5;
      do
      {
        v16 = *(_DWORD *)v15;
        v15 = (WTF *)((char *)v15 + 4);
        *v14++ = v16;
        v13 -= 4;
      }
      while (v13);
    }
    if (!v5)
      goto LABEL_15;
    if ((WTF *)v10 == v5)
    {
      *(_QWORD *)v3 = 0;
      *(_DWORD *)(v3 + 8) = 0;
    }
    WTF::fastFree(v5, v11);
    v5 = *(WTF **)v3;
LABEL_14:
    v10 = (uint64_t)v5;
    if (!v5)
    {
LABEL_17:
      *(_DWORD *)(v3 + 12) = a2;
      return 1;
    }
LABEL_15:
    v12 = *(unsigned int *)(v3 + 12);
    if (v12 != a2)
      bzero((void *)(v10 + 4 * v12), (4 * a2 - 4 * v12) & 0xFFFFFFFFFFFFFFFCLL);
    goto LABEL_17;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::HashTable<WTF::WeakRef<WebCore::RenderTableCol const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderTableCol const,WTF::SingleThreadWeakPtrImpl>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderTableCol const,WTF::SingleThreadWeakPtrImpl>,unsigned int>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderTableCol const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderTableCol const,WTF::SingleThreadWeakPtrImpl>,unsigned int,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderTableCol const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderTableCol const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderTableCol const,WTF::SingleThreadWeakPtrImpl>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t i;
  WTF **v10;
  WTF *v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;
  WTF *v23;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v10 = (WTF **)(v4 + 16 * i);
      v11 = *v10;
      if (*v10 != (WTF *)-1)
      {
        if (v11)
        {
          v12 = *a1;
          if (*a1)
            v13 = *(_DWORD *)(v12 - 8);
          else
            v13 = 0;
          v14 = ~(*((_QWORD *)v11 + 1) << 32) + *((_QWORD *)v11 + 1);
          v15 = (v14 ^ (v14 >> 22)) + ~((v14 ^ (v14 >> 22)) << 13);
          v16 = (9 * (v15 ^ (v15 >> 8))) ^ ((9 * (v15 ^ (v15 >> 8))) >> 15);
          v17 = v13 & (((v16 + ~(v16 << 27)) >> 31) ^ (v16 + ~((_DWORD)v16 << 27)));
          v18 = 1;
          do
          {
            v19 = v17;
            v20 = *(_QWORD *)(v12 + 16 * v17);
            v17 = (v17 + v18++) & v13;
          }
          while (v20);
          v21 = v12 + 16 * v19;
          *(_QWORD *)v21 = 0;
          v22 = *v10;
          *v10 = 0;
          *(_QWORD *)v21 = v22;
          *(_DWORD *)(v21 + 8) = *(_DWORD *)(v4 + 16 * i + 8);
          v23 = *v10;
          *v10 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 1)
              WTF::fastFree(v23, v8);
            else
              --*(_DWORD *)v23;
          }
        }
        else
        {
          *v10 = 0;
        }
      }
    }
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

uint64_t WebCore::RenderTableCol::operator new(uint64_t this)
{
  if (this == 208)
    return bmalloc::api::isoAllocate();
  __break(0xC471u);
  return this;
}

uint64_t WebCore::RenderTableCol::updateFromElement(uint64_t this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  __int16 v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  WebCore::RenderElement *v9;
  uint64_t v10;
  int v11;

  v1 = this;
  v2 = *(_DWORD *)(this + 200);
  if ((*(_BYTE *)(this + 45) & 1) != 0)
    goto LABEL_7;
  v3 = *(_QWORD *)(*(_QWORD *)(this + 24) + 8);
  if (!v3)
    goto LABEL_7;
  v4 = *(_WORD *)(v3 + 28);
  if ((v4 & 8) == 0)
    goto LABEL_25;
  if ((v4 & 0x10) != 0
    && ((v5 = *(_QWORD *)(*(_QWORD *)(v3 + 96) + 24), v5 == *(_QWORD *)(WebCore::HTMLNames::colTag + 24))
     || v5 == *(_QWORD *)(WebCore::HTMLNames::colgroupTag + 24)))
  {
    v6 = *(_DWORD *)(v3 + 112);
  }
  else
  {
LABEL_7:
    v6 = 1;
  }
  *(_DWORD *)(this + 200) = v6;
  if (v6 != v2 && (*(_WORD *)(this + 69) & 2) != 0)
  {
    v7 = *(_QWORD *)(this + 32);
    if (v7)
    {
      if (*(_QWORD *)(v7 + 8))
      {
        v8 = *(_DWORD *)(this + 20);
        if ((v8 & 8) != 0)
          return WebCore::RenderObject::setPreferredLogicalWidthsDirty(v1, 1, 1);
        *(_DWORD *)(this + 20) = v8 | 8;
        v9 = WebCore::RenderObject::markContainingBlocksForLayout((WebCore::RenderObject *)this, 0);
        WebCore::RenderObject::scheduleLayout((WebCore::RenderObject *)v1, v9);
        if ((*(_BYTE *)(v1 + 21) & 0x80) == 0)
          return WebCore::RenderObject::setPreferredLogicalWidthsDirty(v1, 1, 1);
        if ((*(_BYTE *)(v1 + 45) & 0x10) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19644691CLL);
        }
        v10 = *(_QWORD *)(v1 + 144);
        if (v10)
        {
          v11 = *(_DWORD *)(v10 + 8) + 1;
          *(_DWORD *)(v10 + 8) = v11;
        }
        else
        {
          v11 = MEMORY[8];
        }
        *(_QWORD *)(v10 + 24) = *(_QWORD *)(v10 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
        if (v11)
        {
          *(_DWORD *)(v10 + 8) = v11 - 1;
          return WebCore::RenderObject::setPreferredLogicalWidthsDirty(v1, 1, 1);
        }
LABEL_25:
        __break(0xC471u);
        JUMPOUT(0x1964468FCLL);
      }
    }
  }
  return this;
}

uint64_t WebCore::RenderTableCol::RenderTableCol(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;

  v4 = WebCore::RenderLayerModelObject::RenderLayerModelObject(a1, 38, a2, a3, 12, 0);
  *(_OWORD *)(v4 + 184) = 0u;
  *(_OWORD *)(v4 + 168) = 0u;
  *(_OWORD *)(v4 + 152) = 0u;
  *(_QWORD *)v4 = off_1E3433A10;
  *(_DWORD *)(v4 + 200) = 1;
  *(_DWORD *)(v4 + 20) &= ~1u;
  WebCore::RenderTableCol::updateFromElement(v4);
  return a1;
}

double WebCore::RenderTableCol::RenderTableCol(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double result;

  v4 = WebCore::RenderObject::RenderObject(a1, 38, a2, 28, 0);
  *(_QWORD *)v4 = off_1E3422BC8;
  *(_QWORD *)(v4 + 70) = 0;
  *(_QWORD *)(v4 + 64) = 0;
  *(_DWORD *)(v4 + 80) = 0;
  v5 = a3[1];
  a3[1] = 0;
  *(_QWORD *)(v4 + 88) = v5;
  *(_QWORD *)(v4 + 96) = a3[2];
  v6 = a3[3];
  a3[3] = 0;
  *(_QWORD *)(v4 + 104) = v6;
  v7 = a3[4];
  a3[4] = 0;
  *(_QWORD *)(v4 + 112) = v7;
  *(_QWORD *)(v4 + 120) = a3[5];
  v8 = a3[6];
  a3[6] = 0;
  *(_QWORD *)(v4 + 128) = v8;
  v9 = a3[7];
  a3[7] = 0;
  *(_QWORD *)(v4 + 136) = v9;
  result = 0.0;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_QWORD *)(v4 + 192) = 0;
  *(_QWORD *)v4 = off_1E3433A10;
  *(_DWORD *)(v4 + 200) = 1;
  *(_DWORD *)(v4 + 20) &= ~1u;
  return result;
}

void WebCore::RenderTableCol::~RenderTableCol(WebCore::RenderTableCol *this, void *a2)
{
  WTF *v3;

  *(_QWORD *)this = off_1E34201A0;
  v3 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
}

{
  WTF *v3;
  void *v4;

  *(_QWORD *)this = off_1E34201A0;
  v3 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
  if (*((_DWORD *)this + 4))
  {
    *((_OWORD *)this + 11) = 0u;
    *((_OWORD *)this + 12) = 0u;
    *((_OWORD *)this + 9) = 0u;
    *((_OWORD *)this + 10) = 0u;
    *((_OWORD *)this + 7) = 0u;
    *((_OWORD *)this + 8) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 1) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *(_OWORD *)this = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(this, v4);
  }
}

void WebCore::RenderTableCol::styleDidChange(_QWORD *a1, WTF::StringImpl *a2, WebCore::RenderStyle *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  BOOL v9;
  BOOL v10;
  uint64_t v11;
  void *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  int v15;
  WebCore::Length *v16;
  float v17;
  float v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t j;
  uint64_t v35;

  WebCore::RenderBox::styleDidChange((uint64_t)a1, a2, (uint64_t)a3);
  v5 = a1[4];
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
    {
      v7 = *(unsigned __int8 *)(v6 + 46);
      if (v7 != 35 && v7 != 63)
      {
        v8 = *(_QWORD *)(v6 + 32);
        if (!v8)
          return;
        v6 = *(_QWORD *)(v8 + 8);
        if (!v6)
          return;
        v7 = *(unsigned __int8 *)(v6 + 46);
      }
      v9 = v7 == 35 || v7 == 63;
      v10 = v9;
      v11 = v10 ? v6 : 0;
      if (a3 && v10)
      {
        if ((WebCore::RenderStyle::borderIsEquivalentForPainting(a3, (const WebCore::RenderStyle *)(a1 + 10)) & 1) == 0)
        {
          WebCore::RenderTable::invalidateCollapsedBorders(v11, 0);
          return;
        }
        v13 = *(unsigned __int8 **)(*((_QWORD *)a3 + 1) + 8);
        v14 = *(unsigned __int8 **)(a1[11] + 8);
        v15 = v13[8];
        if (v15 == v14[8] && (v13[9] != 0) == (v14[9] != 0))
        {
          if (v15 == 13)
            return;
          v16 = (WebCore::Length *)(v13 + 4);
          if (v15 == 11)
          {
            if ((WebCore::Length::isCalculatedEqual(v16, (const WebCore::Length *)(v14 + 4)) & 1) != 0)
              return;
          }
          else
          {
            if (v13[10])
              v17 = *(float *)v16;
            else
              v17 = (float)*(int *)v16;
            v18 = *((float *)v14 + 1);
            if (!v14[10])
              v18 = (float)SLODWORD(v18);
            if (v17 == v18)
              return;
          }
        }
        if ((*(_BYTE *)(v11 + 328) & 8) != 0)
          WebCore::RenderTable::recalcSections((WebCore::RenderTable *)v11, v12);
        v19 = *(unsigned __int8 *)(v11 + 68);
        for (i = *(unsigned int *)(v11 + 64); ; i = *(unsigned int *)(v22 + 47))
        {
          v21 = i | (v19 << 32);
          if (!v21)
            break;
          v22 = *(_QWORD *)(v21 + 8);
          if (!v22)
            break;
          if (*(_BYTE *)(v22 + 46) == 40)
          {
            v23 = *(unsigned int *)(v11 + 228);
            if ((_DWORD)v23)
            {
LABEL_41:
              v24 = *(unsigned int *)(v22 + 212);
              if ((_DWORD)v24)
              {
                v25 = 0;
                while (1)
                {
                  v26 = 0;
                  v27 = 0;
                  v28 = 40 * v24;
                  do
                  {
                    if (*(_BYTE *)(v22 + 282))
                      WebCore::RenderTableSection::recalcCells((WebCore::RenderTableSection *)v22);
                    if (v27 >= *(unsigned int *)(v22 + 212)
                      || (v29 = *(_QWORD *)(v22 + 200) + v26, *(_DWORD *)(v29 + 12) <= v25))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x196446E30);
                    }
                    v30 = *(_QWORD *)v29 + 32 * v25;
                    v31 = *(unsigned int *)(v30 + 12);
                    if ((_DWORD)v31)
                    {
                      v32 = *(_QWORD *)(*(_QWORD *)v30 + 8 * v31 - 8);
                      if (v32)
                        WebCore::RenderObject::setPreferredLogicalWidthsDirty(v32, 1, 1);
                    }
                    ++v27;
                    v26 += 40;
                  }
                  while (v28 != v26);
                  do
                  {
                    if (++v25 == v23)
                      goto LABEL_55;
                    v24 = *(unsigned int *)(v22 + 212);
                  }
                  while (!*(_DWORD *)(v22 + 212));
                }
              }
LABEL_55:
              while (1)
              {
                v33 = *(unsigned int *)(v22 + 47);
                if (!(v33 | ((unint64_t)*(unsigned __int8 *)(v22 + 51) << 32)))
                  break;
                v22 = *(_QWORD *)((v33 | ((unint64_t)*(unsigned __int8 *)(v22 + 51) << 32)) + 8);
                if (!v22)
                  break;
                if (*(_BYTE *)(v22 + 46) == 40)
                {
                  v23 = *(unsigned int *)(v11 + 228);
                  if (*(_DWORD *)(v11 + 228))
                    goto LABEL_41;
                }
              }
            }
            else
            {
              for (j = *(unsigned int *)(v22 + 47) | ((unint64_t)*(unsigned __int8 *)(v22 + 51) << 32);
                    j;
                    j = *(unsigned int *)(v35 + 47) | ((unint64_t)*(unsigned __int8 *)(v35 + 51) << 32))
              {
                v35 = *(_QWORD *)(j + 8);
                if (!v35)
                  break;
              }
            }
            return;
          }
          v19 = *(unsigned __int8 *)(v22 + 51);
        }
      }
    }
  }
}

uint64_t WebCore::RenderTableCol::insertedIntoTree(WebCore::RenderTableCol *this, void *a2, uint64_t a3, WebCore::RenderLayer *a4, BOOL a5)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v13;

  WebCore::RenderElement::insertedIntoTree((uint64_t)this, a2, a3, a4, a5);
  v7 = *((_QWORD *)this + 4);
  if (!v7)
    goto LABEL_17;
  v8 = *(_QWORD *)(v7 + 8);
  if (!v8)
    goto LABEL_17;
  v9 = *(unsigned __int8 *)(v8 + 46);
  if (v9 != 35 && v9 != 63)
  {
    v10 = *(_QWORD *)(v8 + 32);
    if (v10)
    {
      v8 = *(_QWORD *)(v10 + 8);
      if (v8)
      {
        v9 = *(unsigned __int8 *)(v8 + 46);
        goto LABEL_8;
      }
    }
LABEL_17:
    v13 = 0;
    return WebCore::RenderTable::invalidateCachedColumns(v13, v6);
  }
LABEL_8:
  if (v9 == 35 || v9 == 63)
    v13 = v8;
  else
    v13 = 0;
  return WebCore::RenderTable::invalidateCachedColumns(v13, v6);
}

void WebCore::RenderTableCol::willBeRemovedFromTree(WebCore::RenderTableCol *this, void *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;

  WebCore::RenderElement::willBeRemovedFromTree(this, a2);
  v4 = *((_QWORD *)this + 4);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      v6 = *(unsigned __int8 *)(v5 + 46);
      if (v6 != 35 && v6 != 63)
      {
        v7 = *(_QWORD *)(v5 + 32);
        if (!v7)
          return;
        v5 = *(_QWORD *)(v7 + 8);
        if (!v5)
          return;
        v6 = *(unsigned __int8 *)(v5 + 46);
      }
      if (v6 == 63 || v6 == 35)
        WebCore::RenderTable::invalidateColumns((WebCore::RenderTable *)v5, v3);
    }
  }
}

BOOL WebCore::RenderTableCol::isChildAllowed(WebCore::RenderTableCol *this, const WebCore::RenderObject *a2, const WebCore::RenderStyle *a3)
{
  return (*((_QWORD *)a3 + 2) & 0x1FLL) == 0xB && *((_BYTE *)a2 + 46) == 38;
}

BOOL WebCore::RenderTableCol::canHaveChildren(WebCore::RenderTableCol *this)
{
  return (*((_QWORD *)this + 12) & 0x1FLL) == 10;
}

uint64_t WebCore::RenderTableCol::clippedOverflowRect(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  int v3;
  uint64_t v4;

  v1 = *(_QWORD *)(a1 + 32);
  if (!v1)
    return 0;
  result = *(_QWORD *)(v1 + 8);
  if (!result)
    return result;
  v3 = *(unsigned __int8 *)(result + 46);
  if (v3 != 35 && v3 != 63)
  {
    v4 = *(_QWORD *)(result + 32);
    if (!v4)
      return 0;
    result = *(_QWORD *)(v4 + 8);
    if (!result)
      return result;
    v3 = *(unsigned __int8 *)(result + 46);
  }
  if (v3 == 63 || v3 == 35)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 440))(result);
  return 0;
}

uint64_t WebCore::RenderTableCol::rectsForRepaintingAfterLayout@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t result;
  int v6;
  uint64_t v7;
  uint64_t v9;

  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
    goto LABEL_14;
  result = *(_QWORD *)(v4 + 8);
  if (!result)
  {
LABEL_15:
    v9 = 0;
    goto LABEL_16;
  }
  v6 = *(unsigned __int8 *)(result + 46);
  if (v6 == 35 || v6 == 63)
    goto LABEL_8;
  v7 = *(_QWORD *)(result + 32);
  if (!v7)
  {
LABEL_14:
    result = 0;
    goto LABEL_15;
  }
  result = *(_QWORD *)(v7 + 8);
  if (!result)
    goto LABEL_15;
  v6 = *(unsigned __int8 *)(result + 46);
LABEL_8:
  if (v6 != 63 && v6 != 35)
    goto LABEL_14;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 440))(result, a2, 0xC00000000);
LABEL_16:
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 32) = 0;
  return result;
}

uint64_t WebCore::RenderTableCol::imageChanged(uint64_t this, const void *a2, const WebCore::IntRect *a3)
{
  uint64_t v3;
  _BYTE v4[20];
  __int128 v5;
  char v6;

  v3 = *(_QWORD *)(this + 32);
  if (v3
    && *(_QWORD *)(v3 + 8)
    && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 24) + 8) + 40)
                                                                                         + 8)
                                                                             + 1944)
                                                                 + 24)
                                                     + 8)
                                         + 40)
                             + 8)
                 + 3382))
  {
    LOBYTE(v5) = 0;
    v6 = 0;
    v4[0] = 0;
    v4[16] = 0;
    return WebCore::RenderObject::issueRepaint(this, &v5, 0, 0, (uint64_t)v4);
  }
  return this;
}

uint64_t WebCore::RenderTableCol::clearPreferredLogicalWidthsDirtyBits(WebCore::RenderTableCol *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;

  result = WebCore::RenderObject::setPreferredLogicalWidthsDirty((uint64_t)this, 0, 1);
  v3 = *((unsigned __int8 *)this + 68);
  for (i = *((unsigned int *)this + 16); ; i = *(unsigned int *)(v6 + 47))
  {
    v5 = i | (v3 << 32);
    if (!v5)
      break;
    v6 = *(_QWORD *)(v5 + 8);
    if (!v6)
      break;
    result = WebCore::RenderObject::setPreferredLogicalWidthsDirty(*(_QWORD *)(v5 + 8), 0, 1);
    v3 = *(unsigned __int8 *)(v6 + 51);
  }
  return result;
}

uint64_t WebCore::RenderTableCol::enclosingColumnGroup(WebCore::RenderTableCol *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 4);
  if (v1)
    v1 = *(_QWORD *)(v1 + 8);
  if (*(_BYTE *)(v1 + 46) == 38)
    return v1;
  else
    return 0;
}

uint64_t WebCore::RenderTableCol::nextColumn(WebCore::RenderTableCol *this)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v2 = *((unsigned int *)this + 16);
  if (v2 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)
    && (result = *(_QWORD *)((v2 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8)) != 0)
  {
    if (*(_BYTE *)(result + 46) != 38)
    {
      __break(0xC471u);
      JUMPOUT(0x19644720CLL);
    }
  }
  else
  {
    v4 = *(unsigned int *)((char *)this + 47);
    if (v4 | ((unint64_t)*((unsigned __int8 *)this + 51) << 32)
      && (v5 = *(_QWORD *)((v4 | ((unint64_t)*((unsigned __int8 *)this + 51) << 32)) + 8)) != 0
      || (v6 = *((_QWORD *)this + 4)) != 0
      && (v7 = *(_QWORD *)(v6 + 8), *(_BYTE *)(v7 + 46) == 38)
      && (v8 = *(unsigned int *)(v7 + 47) | ((unint64_t)*(unsigned __int8 *)(v7 + 51) << 32)) != 0
      && (v5 = *(_QWORD *)(v8 + 8)) != 0)
    {
      while (*(_BYTE *)(v5 + 46) != 38)
      {
        if (!(*(unsigned int *)(v5 + 47) | ((unint64_t)*(unsigned __int8 *)(v5 + 51) << 32)))
          return 0;
        result = 0;
        v5 = *(_QWORD *)((*(unsigned int *)(v5 + 47) | ((unint64_t)*(unsigned __int8 *)(v5 + 51) << 32)) + 8);
        if (!v5)
          return result;
      }
      return v5;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t WebCore::RenderTableCol::borderAdjoiningCellStartBorder(WebCore::RenderTableCol *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *((_DWORD *)this + 30);
  v2 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
  v3 = v2 + 176;
  if ((v1 & 0x4000000) == 0)
    v3 = v2 + 152;
  v4 = v2 + 128;
  v5 = v2 + 104;
  if ((v1 & 0x4000000) != 0)
    v6 = v4;
  else
    v6 = v5;
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
    return v6;
  else
    return v3;
}

uint64_t WebCore::RenderTableCol::borderAdjoiningCellEndBorder(WebCore::RenderTableCol *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *((_DWORD *)this + 30);
  v2 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
  v3 = v2 + 152;
  if ((v1 & 0x4000000) == 0)
    v3 = v2 + 176;
  v4 = v2 + 104;
  v5 = v2 + 128;
  if ((v1 & 0x4000000) != 0)
    v6 = v4;
  else
    v6 = v5;
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
    return v6;
  else
    return v3;
}

uint64_t WebCore::RenderTableCol::offsetLeft(WebCore::RenderTableCol *this)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  WebCore::RenderTable *v8;

  v2 = *((_QWORD *)this + 4);
  if (!v2)
    goto LABEL_18;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    goto LABEL_18;
  v4 = *(unsigned __int8 *)(v3 + 46);
  if (v4 != 35 && v4 != 63)
  {
    v5 = *(_QWORD *)(v3 + 32);
    if (v5)
    {
      v3 = *(_QWORD *)(v5 + 8);
      if (v3)
      {
        v4 = *(unsigned __int8 *)(v3 + 46);
        goto LABEL_8;
      }
    }
LABEL_18:
    v8 = 0;
    return WebCore::RenderTable::offsetLeftForColumn(v8, this);
  }
LABEL_8:
  if (v4 == 35 || v4 == 63)
    v8 = (WebCore::RenderTable *)v3;
  else
    v8 = 0;
  return WebCore::RenderTable::offsetLeftForColumn(v8, this);
}

unint64_t WebCore::RenderTableCol::offsetTop(WebCore::RenderTableCol *this)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  WebCore::RenderTable *v8;

  v2 = *((_QWORD *)this + 4);
  if (!v2)
    goto LABEL_18;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    goto LABEL_18;
  v4 = *(unsigned __int8 *)(v3 + 46);
  if (v4 != 35 && v4 != 63)
  {
    v5 = *(_QWORD *)(v3 + 32);
    if (v5)
    {
      v3 = *(_QWORD *)(v5 + 8);
      if (v3)
      {
        v4 = *(unsigned __int8 *)(v3 + 46);
        goto LABEL_8;
      }
    }
LABEL_18:
    v8 = 0;
    return WebCore::RenderTable::offsetTopForColumn(v8, this);
  }
LABEL_8:
  if (v4 == 35 || v4 == 63)
    v8 = (WebCore::RenderTable *)v3;
  else
    v8 = 0;
  return WebCore::RenderTable::offsetTopForColumn(v8, this);
}

uint64_t WebCore::RenderTableCol::offsetWidth(WebCore::RenderTableCol *this)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  WebCore::RenderTable *v8;

  v2 = *((_QWORD *)this + 4);
  if (!v2)
    goto LABEL_18;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    goto LABEL_18;
  v4 = *(unsigned __int8 *)(v3 + 46);
  if (v4 != 35 && v4 != 63)
  {
    v5 = *(_QWORD *)(v3 + 32);
    if (v5)
    {
      v3 = *(_QWORD *)(v5 + 8);
      if (v3)
      {
        v4 = *(unsigned __int8 *)(v3 + 46);
        goto LABEL_8;
      }
    }
LABEL_18:
    v8 = 0;
    return WebCore::RenderTable::offsetWidthForColumn(v8, this);
  }
LABEL_8:
  if (v4 == 35 || v4 == 63)
    v8 = (WebCore::RenderTable *)v3;
  else
    v8 = 0;
  return WebCore::RenderTable::offsetWidthForColumn(v8, this);
}

uint64_t WebCore::RenderTableCol::offsetHeight(WebCore::RenderTableCol *this)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  WebCore::RenderTable *v8;

  v2 = *((_QWORD *)this + 4);
  if (!v2)
    goto LABEL_18;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    goto LABEL_18;
  v4 = *(unsigned __int8 *)(v3 + 46);
  if (v4 != 35 && v4 != 63)
  {
    v5 = *(_QWORD *)(v3 + 32);
    if (v5)
    {
      v3 = *(_QWORD *)(v5 + 8);
      if (v3)
      {
        v4 = *(unsigned __int8 *)(v3 + 46);
        goto LABEL_8;
      }
    }
LABEL_18:
    v8 = 0;
    return WebCore::RenderTable::offsetHeightForColumn(v8, this);
  }
LABEL_8:
  if (v4 == 35 || v4 == 63)
    v8 = (WebCore::RenderTable *)v3;
  else
    v8 = 0;
  return WebCore::RenderTable::offsetHeightForColumn(v8, this);
}

void WebCore::RenderTableRow::willBeRemovedFromTree(WebCore::RenderTableRow *this, void *a2)
{
  uint64_t v3;
  WebCore::RenderTableSection *v4;

  WebCore::RenderElement::willBeRemovedFromTree(this, a2);
  v3 = *((_QWORD *)this + 4);
  if (!v3)
  {
    v4 = 0;
LABEL_4:
    WebCore::RenderTableSection::setNeedsCellRecalc(v4);
    return;
  }
  v4 = *(WebCore::RenderTableSection **)(v3 + 8);
  if (!v4 || *((_BYTE *)v4 + 46) == 40)
    goto LABEL_4;
  __break(0xC471u);
}

int *WebCore::RenderTableSection::rowLogicalHeightChanged(int *this, unsigned int a2)
{
  int *v3;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  int v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (!*((_BYTE *)this + 282))
  {
    v3 = this;
    if (this[53] <= a2)
    {
      __break(0xC471u);
      JUMPOUT(0x19644770CLL);
    }
    v5 = *((_QWORD *)this + 25);
    v6 = *(_QWORD *)(v5 + 40 * a2 + 16);
    v7 = ((*(_DWORD *)(v6 + 124) >> 13) & 6) - 2;
    v8 = *(_QWORD *)(*(_QWORD *)(v6 + 88) + 8);
    v9 = v7 >= 4;
    v10 = v8 + 4;
    v11 = v8 + 12;
    if (!v9)
      v11 = v10;
    this = (int *)(v5 + 40 * a2 + 28);
    if (this != (int *)v11)
    {
      v12 = v5 + 40 * a2;
      v14 = *(unsigned __int8 *)(v12 + 32);
      v13 = (_BYTE *)(v12 + 32);
      if (v14 == 11)
      {
        v21 = v11;
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*this);
        this = (int *)(v5 + 40 * a2 + 28);
        v11 = v21;
      }
      v15 = *(unsigned __int8 *)(v11 + 4);
      *v13 = v15;
      *(_BYTE *)(v5 + 40 * a2 + 33) = *(_BYTE *)(v11 + 5);
      if (v15 <= 0xD)
      {
        v16 = 1 << v15;
        if ((v16 & 0x7FC) != 0)
        {
          *(_BYTE *)(v5 + 40 * a2 + 34) = *(_BYTE *)(v11 + 6);
          *this = *(_DWORD *)v11;
        }
        else if ((v16 & 0x3003) != 0)
        {
          *this = 0;
        }
        else
        {
          *this = *(_DWORD *)v11;
          this = WebCore::Length::ref(this);
        }
      }
    }
    if (v3[53] <= a2)
    {
      __break(0xC471u);
      JUMPOUT(0x196447714);
    }
    v17 = *(_QWORD *)(*((_QWORD *)v3 + 25) + 40 * a2 + 16);
    v18 = *(unsigned int *)(v17 + 64) | ((unint64_t)*(unsigned __int8 *)(v17 + 68) << 32);
    if (v18)
    {
      v19 = *(_QWORD *)(v18 + 8);
      if (v19)
      {
        if (*(_BYTE *)(v19 + 46) != 37)
        {
          __break(0xC471u);
          JUMPOUT(0x1964476CCLL);
        }
        while (1)
        {
          if (v3[53] <= a2)
          {
            __break(0xC471u);
            JUMPOUT(0x196447704);
          }
          this = WebCore::updateLogicalHeightForCell((int *)(*((_QWORD *)v3 + 25) + 40 * a2), (WebCore::RenderTableCell *)v19);
          v20 = *(unsigned int *)(v19 + 47);
          if (!(v20 | ((unint64_t)*(unsigned __int8 *)(v19 + 51) << 32)))
            break;
          v19 = *(_QWORD *)((v20 | ((unint64_t)*(unsigned __int8 *)(v19 + 51) << 32)) + 8);
          if (!v19)
            break;
          if (*(_BYTE *)(v19 + 46) != 37)
          {
            __break(0xC471u);
            JUMPOUT(0x19644769CLL);
          }
        }
      }
    }
  }
  return this;
}

BOOL WebCore::borderWidthChanged(WebCore *this, const WebCore::RenderStyle *a2, const WebCore::RenderStyle *a3)
{
  float v3;
  float v4;
  uint64_t v5;
  float v6;
  float v7;
  float v8;
  float v9;
  uint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = 0.0;
  v4 = 0.0;
  if ((*((_BYTE *)this + 124) & 0xE) != 0)
  {
    v11 = *((_QWORD *)this + 25);
    if (*(_BYTE *)(v11 + 5) && *(_BYTE *)(v11 + 76) == 4)
    {
      if (*(_BYTE *)(v11 + 78))
        v4 = *(float *)(v11 + 72);
      else
        v4 = (float)*(int *)(v11 + 72);
    }
    else
    {
      v4 = *((float *)this + 30);
    }
  }
  v5 = *((_QWORD *)a2 + 3);
  if ((*(_BYTE *)(v5 + 124) & 0xE) != 0)
  {
    v12 = *(_QWORD *)(v5 + 200);
    if (*(_BYTE *)(v12 + 5) && *(_BYTE *)(v12 + 76) == 4)
    {
      if (*(_BYTE *)(v12 + 78))
        v3 = *(float *)(v12 + 72);
      else
        v3 = (float)*(int *)(v12 + 72);
    }
    else
    {
      v3 = *(float *)(v5 + 120);
    }
  }
  if (v4 != v3)
    return 1;
  v6 = 0.0;
  v7 = 0.0;
  if ((*((_BYTE *)this + 172) & 0xE) != 0)
  {
    v15 = *((_QWORD *)this + 25);
    if (*(_BYTE *)(v15 + 5) && *(_BYTE *)(v15 + 52) == 4)
    {
      if (*(_BYTE *)(v15 + 54))
        v7 = *(float *)(v15 + 48);
      else
        v7 = (float)*(int *)(v15 + 48);
    }
    else
    {
      v7 = *((float *)this + 42);
    }
  }
  if ((*(_BYTE *)(v5 + 172) & 0xE) != 0)
  {
    v16 = *(_QWORD *)(v5 + 200);
    if (*(_BYTE *)(v16 + 5) && *(_BYTE *)(v16 + 52) == 4)
    {
      if (*(_BYTE *)(v16 + 54))
        v6 = *(float *)(v16 + 48);
      else
        v6 = (float)*(int *)(v16 + 48);
    }
    else
    {
      v6 = *(float *)(v5 + 168);
    }
  }
  if (v7 != v6)
    return 1;
  v8 = 0.0;
  v9 = 0.0;
  if ((*((_BYTE *)this + 148) & 0xE) != 0)
  {
    v17 = *((_QWORD *)this + 25);
    if (*(_BYTE *)(v17 + 5) && *(_BYTE *)(v17 + 60) == 4)
    {
      if (*(_BYTE *)(v17 + 62))
        v9 = *(float *)(v17 + 56);
      else
        v9 = (float)*(int *)(v17 + 56);
    }
    else
    {
      v9 = *((float *)this + 36);
    }
  }
  if ((*(_BYTE *)(v5 + 148) & 0xE) != 0)
  {
    v18 = *(_QWORD *)(v5 + 200);
    if (*(_BYTE *)(v18 + 5) && *(_BYTE *)(v18 + 60) == 4)
    {
      if (*(_BYTE *)(v18 + 62))
        v8 = *(float *)(v18 + 56);
      else
        v8 = (float)*(int *)(v18 + 56);
    }
    else
    {
      v8 = *(float *)(v5 + 144);
    }
  }
  if (v9 != v8)
    return 1;
  v13 = 0.0;
  v14 = 0.0;
  if ((*((_BYTE *)this + 196) & 0xE) != 0)
  {
    v19 = *((_QWORD *)this + 25);
    if (*(_BYTE *)(v19 + 5) && *(_BYTE *)(v19 + 68) == 4)
    {
      if (*(_BYTE *)(v19 + 70))
        v14 = *(float *)(v19 + 64);
      else
        v14 = (float)*(int *)(v19 + 64);
    }
    else
    {
      v14 = *((float *)this + 48);
    }
  }
  if ((*(_BYTE *)(v5 + 196) & 0xE) != 0)
  {
    v20 = *(_QWORD *)(v5 + 200);
    if (*(_BYTE *)(v20 + 5) && *(_BYTE *)(v20 + 68) == 4)
    {
      if (*(_BYTE *)(v20 + 70))
        v13 = *(float *)(v20 + 64);
      else
        v13 = (float)*(int *)(v20 + 64);
    }
    else
    {
      v13 = *(float *)(v5 + 192);
    }
  }
  return v14 != v13;
}

uint64_t WebCore::RenderTableRow::styleDidChange(WebCore::StyleDifference,WebCore::RenderStyle const*)::$_0::operator()<WebCore::RenderTableRow>(uint64_t result)
{
  uint64_t v1;
  int v2;
  WebCore::RenderElement *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  if ((result & 0xFFFFFFFFFFLL) != 0)
  {
    v1 = *(_QWORD *)((result & 0xFFFFFFFFFFLL) + 8);
    if (v1)
    {
      if (*(_BYTE *)(v1 + 46) != 37)
      {
        __break(0xC471u);
        JUMPOUT(0x196447AE4);
      }
      while (1)
      {
        v2 = *(_DWORD *)(v1 + 20);
        if ((v2 & 8) == 0)
        {
          *(_DWORD *)(v1 + 20) = v2 | 8;
          v3 = WebCore::RenderObject::markContainingBlocksForLayout((WebCore::RenderObject *)v1, 0);
          WebCore::RenderObject::scheduleLayout((WebCore::RenderObject *)v1, v3);
          if ((*(_BYTE *)(v1 + 21) & 0x80) != 0)
          {
            if ((*(_BYTE *)(v1 + 45) & 0x10) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x196447B04);
            }
            v4 = *(_QWORD *)(v1 + 144);
            if (v4)
            {
              v5 = *(_DWORD *)(v4 + 8) + 1;
              *(_DWORD *)(v4 + 8) = v5;
            }
            else
            {
              v5 = MEMORY[8];
            }
            *(_QWORD *)(v4 + 24) = *(_QWORD *)(v4 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
            if (!v5)
            {
LABEL_19:
              __break(0xC471u);
              JUMPOUT(0x196447AC4);
            }
            *(_DWORD *)(v4 + 8) = v5 - 1;
          }
        }
        result = WebCore::RenderObject::setPreferredLogicalWidthsDirty(v1, 1, 1);
        v6 = *(unsigned int *)(v1 + 47);
        if (!(v6 | ((unint64_t)*(unsigned __int8 *)(v1 + 51) << 32)))
          break;
        v1 = *(_QWORD *)((v6 | ((unint64_t)*(unsigned __int8 *)(v1 + 51) << 32)) + 8);
        if (!v1)
          break;
        if (*(_BYTE *)(v1 + 46) != 37)
          goto LABEL_19;
      }
    }
  }
  return result;
}

uint64_t WebCore::RenderTableRow::previousRow(WebCore::RenderTableRow *this)
{
  uint64_t v1;
  uint64_t result;

  v1 = *((unsigned int *)this + 10);
  if (!(v1 | ((unint64_t)*((unsigned __int8 *)this + 44) << 32)))
    return 0;
  result = *(_QWORD *)((v1 | ((unint64_t)*((unsigned __int8 *)this + 44) << 32)) + 8);
  if (result && *(_BYTE *)(result + 46) != 39)
  {
    __break(0xC471u);
    JUMPOUT(0x196447B74);
  }
  return result;
}

unint64_t WebCore::RenderTableRow::rectsForRepaintingAfterLayout@<X0>(WebCore::RenderBox *a1@<X0>, const WebCore::RenderLayerModelObject *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = WebCore::RenderTableRow::clippedOverflowRect((uint64_t)a1, (uint64_t)a2, 0xC00000000);
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = v9;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 32) = 0;
  if (a3)
  {
    result = WebCore::RenderBox::outlineBoundsForRepaint(a1, a2, 0);
    *(_QWORD *)(a4 + 16) = result;
    *(_QWORD *)(a4 + 24) = v10;
    *(_BYTE *)(a4 + 32) = 1;
  }
  return result;
}

uint64_t WebCore::RenderTableRow::nodeAtPoint(uint64_t a1, int *a2, WebCore::HitTestResult *a3, float32x4_t *a4, unsigned int *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v16;
  unsigned int v17;
  BOOL v18;
  int v19;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  BOOL v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  int v34;
  int v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  int v45;
  int v46;
  unsigned int v47;
  unsigned __int32 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;

  v6 = *(_QWORD *)(a1 + 32);
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7)
    return 0;
  if (*(_BYTE *)(v7 + 46) != 40)
  {
LABEL_49:
    __break(0xC471u);
    JUMPOUT(0x196447E28);
  }
  v9 = *(unsigned int *)(a1 + 71);
  if (!(v9 | ((unint64_t)*(unsigned __int8 *)(a1 + 75) << 32)))
    return 0;
  v10 = *(_QWORD *)((v9 | ((unint64_t)*(unsigned __int8 *)(a1 + 75) << 32)) + 8);
  if (!v10)
    return 0;
  if (*(_BYTE *)(v10 + 46) != 37)
    goto LABEL_49;
  while (1)
  {
    v16 = *(_QWORD *)(v10 + 144);
    if (!v16 || (*(_BYTE *)(v16 + 25) & 8) == 0)
      break;
LABEL_16:
    v23 = *(unsigned int *)(v10 + 40);
    if (!(v23 | ((unint64_t)*(unsigned __int8 *)(v10 + 44) << 32)))
      return 0;
    v10 = *(_QWORD *)((v23 | ((unint64_t)*(unsigned __int8 *)(v10 + 44) << 32)) + 8);
    if (!v10)
      return 0;
    if (*(_BYTE *)(v10 + 46) != 37)
    {
      __break(0xC471u);
      JUMPOUT(0x196447E48);
    }
  }
  v17 = (unsigned __int16)*(_DWORD *)(v7 + 124) >> 13;
  v18 = v17 > 5;
  v19 = (1 << v17) & 0x2A;
  if (v18 || v19 == 0)
  {
    v21 = *a5;
LABEL_14:
    v22 = a5[1];
    goto LABEL_15;
  }
  v21 = *a5;
  if ((*(_BYTE *)(v7 + 21) & 0x10) != 0)
  {
    v37 = *(_DWORD *)(v7 + 160);
    v26 = __OFADD__(v21, v37);
    v38 = v21 + v37;
    v39 = (v21 >> 31) + 0x7FFFFFFF;
    if (!v26)
      v39 = v38;
    v40 = *(_DWORD *)(v10 + 160);
    v26 = __OFSUB__(v39, v40);
    v41 = v39 - v40;
    v42 = (v39 >> 31) + 0x7FFFFFFF;
    if (!v26)
      v42 = v41;
    v43 = *(_DWORD *)(v10 + 152);
    v44 = 2 * v43;
    v45 = v43 ^ (2 * v43);
    v46 = (v43 >> 31) + 0x7FFFFFFF;
    if (v45 >= 0)
      v46 = v44;
    v26 = __OFSUB__(v42, v46);
    v47 = v42 - v46;
    v21 = (v42 >> 31) + 0x7FFFFFFF;
    if (!v26)
      v21 = v47;
    goto LABEL_14;
  }
  v24 = a5[1];
  v25 = *(_DWORD *)(v7 + 164);
  v26 = __OFADD__(v24, v25);
  v27 = v24 + v25;
  v28 = (v24 >> 31) + 0x7FFFFFFF;
  if (!v26)
    v28 = v27;
  v29 = *(_DWORD *)(v10 + 164);
  v26 = __OFSUB__(v28, v29);
  v30 = v28 - v29;
  v31 = (v28 >> 31) + 0x7FFFFFFF;
  if (!v26)
    v31 = v30;
  v32 = *(_DWORD *)(v10 + 156);
  v33 = 2 * v32;
  v34 = v32 ^ (2 * v32);
  v35 = (v32 >> 31) + 0x7FFFFFFF;
  if (v34 >= 0)
    v35 = v33;
  v26 = __OFSUB__(v31, v35);
  v36 = v31 - v35;
  LODWORD(v22) = (v31 >> 31) + 0x7FFFFFFF;
  if (v26)
    v22 = v22;
  else
    v22 = v36;
LABEL_15:
  v53 = v21 | (unint64_t)(v22 << 32);
  if (!WebCore::RenderBlock::nodeAtPoint(v10, a2, a3, a4, (const WebCore::LayoutPoint *)&v53, a6))
    goto LABEL_16;
  v49 = a4->u32[1];
  LODWORD(v50) = a4->i32[0] - v53;
  if (__OFSUB__(a4->i32[0], (_DWORD)v53))
    v50 = ((unsigned __int32)a4->i32[0] >> 31) + 0x7FFFFFFF;
  else
    v50 = v50;
  LODWORD(v51) = v49 - HIDWORD(v53);
  if (__OFSUB__(v49, HIDWORD(v53)))
    v51 = (v49 >> 31) + 0x7FFFFFFF;
  else
    v51 = v51;
  v52 = v50 | (v51 << 32);
  WebCore::RenderObject::updateHitTestResult((unsigned int *)a1, a3, (const WebCore::LayoutPoint *)&v52);
  return 1;
}

uint64_t WebCore::RenderTableRow::paintOutlineForRowIfNeeded(uint64_t this, WebCore::PaintInfo *a2, const WebCore::LayoutPoint *a3, unsigned int a4)
{
  int v4;
  int v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  _QWORD v12[2];

  v4 = *(_DWORD *)(this + 152);
  v5 = *(_DWORD *)(this + 156);
  v6 = __OFADD__((_DWORD)a3, v4);
  LODWORD(v7) = (_DWORD)a3 + v4;
  if (v6)
    v7 = (a3 >> 31) + 0x7FFFFFFF;
  else
    v7 = v7;
  v6 = __OFADD__(a4, v5);
  LODWORD(v8) = a4 + v5;
  if (v6)
    v8 = (a4 >> 31) + 0x7FFFFFFF;
  else
    v8 = v8;
  v9 = *((unsigned __int16 *)a2 + 8);
  v10 = v9 == 64 || v9 == 16;
  if (v10 && (*(_BYTE *)(*(_QWORD *)(this + 104) + 239) & 4) == 0 && (*(_BYTE *)(this + 120) & 0x30) == 0)
  {
    v11 = *(_QWORD *)(this + 160);
    v12[0] = v7 | (v8 << 32);
    v12[1] = v11;
    return WebCore::RenderElement::paintOutline((WebCore::RenderElement *)this, a2, (const WebCore::LayoutRect *)v12);
  }
  return this;
}

uint64_t WebCore::RenderTableRow::paint(uint64_t this, WebCore::PaintInfo *a2, const WebCore::LayoutPoint *a3)
{
  uint64_t v5;
  int v6;
  int v7;
  unsigned int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[2];

  v5 = this;
  v6 = *(_DWORD *)(this + 152);
  v7 = *(_DWORD *)(this + 156);
  v8 = *((_DWORD *)a3 + 1);
  v9 = __OFADD__(*(_DWORD *)a3, v6);
  LODWORD(v10) = *(_DWORD *)a3 + v6;
  if (v9)
    v10 = ((*(_DWORD *)a3 >> 31) + 0x7FFFFFFF);
  else
    v10 = v10;
  v9 = __OFADD__(v8, v7);
  LODWORD(v11) = v8 + v7;
  if (v9)
    v11 = (v8 >> 31) + 0x7FFFFFFF;
  else
    v11 = v11;
  v12 = *((unsigned __int16 *)a2 + 8);
  v13 = v12 == 64 || v12 == 16;
  if (v13 && (*(_BYTE *)(*(_QWORD *)(this + 104) + 239) & 4) == 0 && (*(_BYTE *)(this + 120) & 0x30) == 0)
  {
    v14 = *(_QWORD *)(this + 160);
    v19[0] = v10 | (v11 << 32);
    v19[1] = v14;
    this = WebCore::RenderElement::paintOutline((WebCore::RenderElement *)this, a2, (const WebCore::LayoutRect *)v19);
  }
  v15 = *(unsigned int *)(v5 + 64);
  if (v15 | ((unint64_t)*(unsigned __int8 *)(v5 + 68) << 32))
  {
    v16 = *(_QWORD *)((v15 | ((unint64_t)*(unsigned __int8 *)(v5 + 68) << 32)) + 8);
    if (v16)
    {
      if (*(_BYTE *)(v16 + 46) != 37)
      {
LABEL_29:
        __break(0xC471u);
        JUMPOUT(0x196448028);
      }
      while (1)
      {
        if (*((unsigned __int16 *)a2 + 8) <= 1u)
          this = WebCore::RenderTableCell::paintBackgroundsBehindCell(v16, a2, a3, (WebCore::RenderElement *)v5);
        v17 = *(_QWORD *)(v16 + 144);
        if (!v17 || (*(_BYTE *)(v17 + 25) & 8) == 0)
          this = WebCore::RenderTableCell::paint(v16, a2, a3);
        v18 = *(unsigned int *)(v16 + 47);
        if (!(v18 | ((unint64_t)*(unsigned __int8 *)(v16 + 51) << 32)))
          break;
        v16 = *(_QWORD *)((v18 | ((unint64_t)*(unsigned __int8 *)(v16 + 51) << 32)) + 8);
        if (!v16)
          break;
        if (*(_BYTE *)(v16 + 46) != 37)
          goto LABEL_29;
      }
    }
  }
  return this;
}

uint64_t WebCore::RenderTableRow::imageChanged(uint64_t this, const void *a2, const WebCore::IntRect *a3)
{
  uint64_t v3;
  _BYTE v4[20];
  __int128 v5;
  char v6;

  v3 = *(_QWORD *)(this + 32);
  if (v3
    && *(_QWORD *)(v3 + 8)
    && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 24) + 8) + 40)
                                                                                         + 8)
                                                                             + 1944)
                                                                 + 24)
                                                     + 8)
                                         + 40)
                             + 8)
                 + 3382))
  {
    LOBYTE(v5) = 0;
    v6 = 0;
    v4[0] = 0;
    v4[16] = 0;
    return WebCore::RenderObject::issueRepaint(this, &v5, 0, 0, (uint64_t)v4);
  }
  return this;
}

WTF::StringImpl *WebCore::RenderTableRow::createAnonymousBoxWithSameTypeAs@<X0>(const WebCore::RenderBox *a1@<X1>, const WTF::StringImpl *a2@<X2>, WebCore::RenderElement **a3@<X8>)
{
  uint64_t v5;
  WebCore::RenderElement *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  const WebCore::Element *v15;
  WTF::StringImpl *result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 3) + 8) + 40) + 8);
  WebCore::RenderStyle::createAnonymousStyleWithDisplay((_QWORD *)a1 + 10, (WTF::StringImpl *)9, a2, (uint64_t)&v17);
  v6 = (WebCore::RenderElement *)bmalloc::api::isoAllocate();
  v7 = WebCore::RenderObject::RenderObject((uint64_t)v6, 39, v5, 28, 0);
  *(_QWORD *)v7 = off_1E3422BC8;
  *(_QWORD *)(v7 + 64) = 0;
  *(_QWORD *)(v7 + 70) = 0;
  *(_DWORD *)(v7 + 80) = 0;
  v8 = v18;
  v9 = v19;
  v18 = 0;
  *(_QWORD *)(v7 + 88) = v8;
  *(_QWORD *)(v7 + 96) = v9;
  v10 = v20;
  v20 = 0u;
  *(_OWORD *)(v7 + 104) = v10;
  *(_QWORD *)(v7 + 120) = v21;
  v11 = v22;
  v22 = 0u;
  *(_OWORD *)(v7 + 128) = v11;
  *(_OWORD *)(v7 + 144) = 0u;
  *(_OWORD *)(v7 + 160) = 0u;
  *(_OWORD *)(v7 + 176) = 0u;
  *(_QWORD *)(v7 + 192) = 0;
  *(_QWORD *)v7 = off_1E3434090;
  *(_DWORD *)(v7 + 200) |= 0x7FFFFFFFu;
  *(_DWORD *)(v7 + 20) |= 1u;
  WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)&v17, v12);
  result = WebCore::RenderElement::initializeStyle(v6, v13, v14, v15);
  *a3 = v6;
  return result;
}

uint64_t WebCore::RenderTableSection::table(WebCore::RenderTableSection *this)
{
  uint64_t v1;
  uint64_t result;
  int v3;

  v1 = *((_QWORD *)this + 4);
  if (!v1)
    return 0;
  result = *(_QWORD *)(v1 + 8);
  if (result)
  {
    v3 = *(unsigned __int8 *)(result + 46);
    if (v3 != 35 && v3 != 63)
    {
      result = 105;
      __break(0xC471u);
    }
  }
  return result;
}

void WebCore::RenderTableSection::willBeRemovedFromTree(WebCore::RenderTableSection *this, void *a2)
{
  WebCore::RenderElement::willBeRemovedFromTree(this, a2);
  WebCore::RenderTableSection::setNeedsCellRecalc(this);
}

uint64_t WebCore::RenderTableSection::cellAt(WebCore::RenderTableSection *this, unsigned int a2, unsigned int a3)
{
  uint64_t v3;
  unsigned int v5;
  unsigned int v6;
  WebCore::RenderTableSection *v7;

  if (*((_BYTE *)this + 282))
  {
    v7 = this;
    v5 = a2;
    v6 = a3;
    WebCore::RenderTableSection::recalcCells(this);
    this = v7;
    a2 = v5;
    a3 = v6;
  }
  if (*((_DWORD *)this + 53) <= a2)
  {
    __break(0xC471u);
    JUMPOUT(0x1964482A0);
  }
  v3 = *((_QWORD *)this + 25) + 40 * a2;
  if (*(_DWORD *)(v3 + 12) <= a3)
  {
    __break(0xC471u);
    JUMPOUT(0x1964482A8);
  }
  return *(_QWORD *)v3 + 32 * a3;
}

uint64_t WebCore::RenderTableSection::CellStruct::CellStruct(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  int v7;

  v4 = *(unsigned int *)(a2 + 12);
  v5 = (void *)(a1 + 16);
  *(_QWORD *)a1 = v5;
  *(_DWORD *)(a1 + 8) = 1;
  *(_DWORD *)(a1 + 12) = v4;
  if (v4 >= 2)
  {
    if (v4 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x196448344);
    }
    v7 = v4;
    v5 = (void *)WTF::fastMalloc((WTF *)(8 * v4));
    *(_DWORD *)(a1 + 8) = v7;
    *(_QWORD *)a1 = v5;
  }
  memcpy(v5, *(const void **)a2, 8 * *(unsigned int *)(a2 + 12));
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

{
  void *v4;
  const void *v5;
  const void *v6;
  int v7;
  int v9;

  v4 = (void *)(a1 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = 1;
  v6 = (const void *)(a2 + 16);
  v5 = *(const void **)a2;
  if (v5 == v6)
  {
    memcpy(v4, v5, 8 * *(unsigned int *)(a2 + 12));
  }
  else
  {
    *(_QWORD *)a2 = v6;
    *(_QWORD *)a1 = v5;
    v9 = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 8) = 1;
    *(_DWORD *)(a1 + 8) = v9;
  }
  v7 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(a1 + 12) = v7;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t WebCore::RenderTableSection::distributeExtraLogicalHeightToRows(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  _DWORD *v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  int v12;
  unint64_t v13;
  unsigned int v14;
  BOOL v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  int v21;
  int v22;
  float v23;
  uint64_t v24;
  int v25;
  float v26;
  float v27;
  double v28;
  int v29;
  int v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  unsigned int v39;
  int *v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  uint64_t v45;
  signed int v46;
  uint64_t v47;
  unsigned int v48;
  int v49;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  int *v54;
  _BYTE *v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  int v61;

  if ((_DWORD)a2)
  {
    v2 = *(unsigned int *)(a1 + 212);
    if ((_DWORD)v2)
    {
      v3 = *(_DWORD *)(a1 + 228);
      if (v3 <= v2)
      {
        __break(0xC471u);
        JUMPOUT(0x196448724);
      }
      v4 = *(_DWORD **)(a1 + 216);
      v5 = v4[v2];
      if (v5
        || (v51 = *(unsigned int *)(a1 + 47), !(v51 | ((unint64_t)*(unsigned __int8 *)(a1 + 51) << 32)))
        || !*(_QWORD *)((v51 | ((unint64_t)*(unsigned __int8 *)(a1 + 51) << 32)) + 8))
      {
        v6 = 0;
        v7 = 0;
        v8 = *(_QWORD *)(a1 + 200);
        v9 = v8 + 28;
        v10 = *(unsigned int *)(a1 + 212);
        do
        {
          if (*(_BYTE *)(v9 + 4) == 3)
          {
            if (*(_BYTE *)(v9 + 6))
              v11 = *(float *)v9;
            else
              v11 = (float)*(int *)v9;
            v6 = (int)(float)(v11 + (float)v6);
          }
          else if (!*(_BYTE *)(v9 + 4))
          {
            ++v7;
          }
          v9 += 40;
          --v10;
        }
        while (v10);
        v12 = a2;
        if (v6)
        {
          v13 = 0;
          v14 = 0;
          v15 = __OFADD__(v5, (_DWORD)a2);
          v16 = v5 + a2;
          v17 = (v5 >> 31) + 0x7FFFFFFF;
          if (v15)
            v16 = v17;
          if (v6 >= 100)
            v18 = 100;
          else
            v18 = v6;
          v19 = v4[1];
          v15 = __OFSUB__(v19, *v4);
          v20 = v19 - *v4;
          v21 = (v19 >> 31) + 0x7FFFFFFF;
          if (v15)
            v22 = v21;
          else
            v22 = v20;
          v23 = (float)v16 * 0.015625;
          v12 = a2;
          do
          {
            if (v18 >= 1)
            {
              v24 = v8 + 40 * v13;
              if (*(_BYTE *)(v24 + 32) == 3)
              {
                v25 = *(_DWORD *)(v24 + 28);
                if (*(_BYTE *)(v8 + 40 * v13 + 34))
                {
                  v27 = *(float *)(v24 + 28);
                  v26 = v27;
                }
                else
                {
                  v26 = (float)v25;
                  v27 = *(float *)(v24 + 28);
                }
                v28 = (float)((float)((float)(v23 * v26) / 100.0) + (float)((float)v22 * -0.015625)) * 64.0;
                if (v28 >= 2147483650.0)
                {
                  v29 = 0x7FFFFFFF;
                }
                else if (v28 <= -2147483650.0)
                {
                  v29 = 0x80000000;
                }
                else
                {
                  v29 = (int)v28;
                }
                if (v29 >= v12)
                  v29 = v12;
                v30 = v29 & ~(v29 >> 31);
                v15 = __OFADD__(v14, v30);
                v31 = v14 + v30;
                v14 = (v14 >> 31) + 0x7FFFFFFF;
                if (!v15)
                  v14 = v31;
                v15 = __OFSUB__(v12, v30);
                v32 = v12 - v30;
                if (v15)
                  v12 = (v12 >> 31) + 0x7FFFFFFF;
                else
                  v12 = v32;
                if (!*(_BYTE *)(v8 + 40 * v13 + 34))
                  v27 = (float)v25;
                v18 = (int)(float)((float)v18 - v27);
              }
            }
            if (v13 >= (v2 - 1))
            {
              v34 = v4[++v13];
            }
            else
            {
              if (v3 <= (int)v13 + 2)
                goto LABEL_109;
              v33 = v4[(v13++ + 2)];
              v34 = v4[v13];
              v15 = __OFSUB__(v33, v34);
              v35 = v33 - v34;
              v22 = (v33 >> 31) + 0x7FFFFFFF;
              if (!v15)
                v22 = v35;
            }
            v15 = __OFADD__(v34, v14);
            v36 = v34 + v14;
            v37 = (v34 >> 31) + 0x7FFFFFFF;
            if (!v15)
              v37 = v36;
            v4[v13] = v37;
          }
          while (v13 != v2);
        }
        if (v7)
        {
          v52 = 0;
          if (v3 <= 1)
            v3 = 1;
          v53 = v3 - 1;
          v54 = v4 + 1;
          v55 = (_BYTE *)(v8 + 32);
          v56 = v2;
          while (1)
          {
            if (v7 && !*v55)
            {
              LODWORD(v58) = v7 << 6;
              if (v7 <= 0x1FFFFFE)
                v58 = v58;
              else
                v58 = 0x7FFFFFFFLL;
              v59 = ((uint64_t)v12 << 6) / v58;
              if (v59 <= (uint64_t)0xFFFFFFFF80000000)
                v59 = 0xFFFFFFFF80000000;
              if (v59 >= 0x7FFFFFFF)
                LODWORD(v59) = 0x7FFFFFFF;
              v15 = __OFADD__(v52, (_DWORD)v59);
              v60 = v52 + v59;
              v52 = (v52 >> 31) + 0x7FFFFFFF;
              if (!v15)
                v52 = v60;
              v15 = __OFSUB__(v12, (_DWORD)v59);
              v61 = v12 - v59;
              if (v15)
                v12 = (v12 >> 31) + 0x7FFFFFFF;
              else
                v12 = v61;
              --v7;
            }
            if (!v53)
              break;
            v57 = (*v54 >> 31) + 0x7FFFFFFF;
            if (!__OFADD__(*v54, v52))
              v57 = *v54 + v52;
            *v54++ = v57;
            --v53;
            v55 += 40;
            if (!--v56)
              goto LABEL_51;
          }
LABEL_109:
          __break(0xC471u);
          JUMPOUT(0x19644871CLL);
        }
LABEL_51:
        if (v12 >= 1)
        {
          v38 = (int)v4[v2];
          if ((_DWORD)v38)
          {
            v39 = 0;
            v42 = *v4;
            v40 = v4 + 1;
            v41 = v42;
            do
            {
              v43 = *v40;
              v15 = __OFSUB__(*v40, v41);
              v44 = *v40 - v41;
              if (v15)
                v44 = (v43 >> 31) + 0x7FFFFFFF;
              v45 = (uint64_t)(v44 * (unint64_t)v12) / 64;
              v46 = ((v44 ^ v12) >> 31) + 0x7FFFFFFF;
              if (HIDWORD(v45) == (int)v45 >> 31)
                v46 = v45;
              v47 = ((uint64_t)v46 << 6) / v38;
              if (v47 <= (uint64_t)0xFFFFFFFF80000000)
                v47 = 0xFFFFFFFF80000000;
              if (v47 >= 0x7FFFFFFF)
                LODWORD(v47) = 0x7FFFFFFF;
              v15 = __OFADD__(v39, (_DWORD)v47);
              v48 = v39 + v47;
              v39 = (v39 >> 31) + 0x7FFFFFFF;
              if (!v15)
                v39 = v48;
              v49 = v43 + v39;
              if (__OFADD__(v43, v39))
                v49 = (v43 >> 31) + 0x7FFFFFFF;
              *v40++ = v49;
              v41 = v43;
              --v2;
            }
            while (v2);
            v15 = __OFSUB__(v12, v39);
            v12 -= v39;
            if (v15)
              v12 = 0x7FFFFFFF;
          }
        }
        if (__OFSUB__((_DWORD)a2, v12))
          return (a2 >> 31) + 0x7FFFFFFF;
        else
          return (a2 - v12);
      }
    }
  }
  return a2;
}

uint64_t WebCore::shouldFlexCellChild(WebCore *this, const WebCore::RenderTableCell *a2, const WebCore::RenderBox *a3)
{
  char *v3;
  unsigned int v4;
  BOOL v5;
  int v6;
  int v9;
  uint64_t result;
  uint64_t v11;
  __int16 v12;

  v3 = (char *)this + 4;
  if (((a2 >> 13) & 6) - 2 >= 4)
    v3 = (char *)this + 12;
  v4 = v3[4];
  v5 = v4 > 0xB;
  v6 = (1 << v4) & 0x818;
  if (v5 || v6 == 0)
    return 0;
  v9 = *((_DWORD *)a3 + 5);
  if ((v9 & 0x10000) != 0)
  {
    if (((unsigned __int16)*((_DWORD *)a3 + 24) >> 13) - 5 > 0xFFFFFFFD || (*((_DWORD *)a3 + 5) & 2) != 0)
      return 1;
  }
  else if ((v9 & 2) != 0)
  {
    return 1;
  }
  if ((*((_BYTE *)a3 + 45) & 1) != 0)
    return 0;
  result = *(_QWORD *)(*((_QWORD *)a3 + 3) + 8);
  if (!result)
    return result;
  if ((*(_WORD *)(result + 28) & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196448854);
  }
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 848))(result) & 1) == 0)
  {
    if ((*((_BYTE *)a3 + 45) & 1) == 0)
    {
      v11 = *(_QWORD *)(*((_QWORD *)a3 + 3) + 8);
      if (v11)
      {
        v12 = *(_WORD *)(v11 + 28);
        if ((v12 & 8) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x196448874);
        }
        if ((v12 & 0x10) != 0)
          return *(_QWORD *)(*(_QWORD *)(v11 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::imgTag + 24);
      }
    }
    return 0;
  }
  return 1;
}

WTF *WTF::WeakHashSet<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderTableCell>(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  int v19;
  WTF *v20;
  void *v21;
  WTF *result;
  void *v23;
  WTF *v24;
  WTF *v25;

  v6 = a2[3];
  v7 = a2[2] + 1;
  a2[2] = v7;
  if (v7 > v6)
  {
    v8 = *(_QWORD *)a2;
    if (!*(_QWORD *)a2)
    {
LABEL_3:
      v9 = 0;
      a2[2] = 0;
      goto LABEL_28;
    }
    v10 = *(_DWORD *)(v8 - 4);
    if (!v10)
      goto LABEL_25;
    v11 = 0;
    v12 = v10 - 1;
    do
    {
      v13 = v12;
      v14 = *(WTF **)(v8 + 8 * v12);
      if ((unint64_t)v14 + 1 >= 2 && !*((_QWORD *)v14 + 1))
      {
        *(_QWORD *)(v8 + 8 * v12) = 0;
        if (*(_DWORD *)v14 == 1)
          WTF::fastFree(v14, a2);
        else
          --*(_DWORD *)v14;
        *(_QWORD *)(v8 + 8 * v12) = -1;
        ++v11;
      }
      --v12;
    }
    while (v13);
    v8 = *(_QWORD *)a2;
    if (v11)
    {
      *(_DWORD *)(v8 - 16) += v11;
      v15 = *(_QWORD *)a2;
      if (*(_QWORD *)a2)
        v16 = *(_DWORD *)(v15 - 12);
      else
        v16 = 0;
      *(_DWORD *)(v15 - 12) = v16 - v11;
      v8 = *(_QWORD *)a2;
    }
    if (!v8)
      goto LABEL_3;
    v17 = *(_DWORD *)(v8 - 4);
    if (v17 < 9 || 6 * *(_DWORD *)(v8 - 12) >= v17)
    {
LABEL_25:
      a2[2] = 0;
    }
    else
    {
      WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a2);
      v8 = *(_QWORD *)a2;
      a2[2] = 0;
      if (!v8)
      {
        v9 = 0;
        goto LABEL_28;
      }
    }
    v9 = *(_DWORD *)(v8 - 12);
    v19 = 0x7FFFFFFF;
    if (v9 >= 0x7FFFFFFF)
    {
LABEL_29:
      a2[3] = 2 * v19;
      goto LABEL_30;
    }
LABEL_28:
    v19 = v9;
    goto LABEL_29;
  }
LABEL_30:
  v20 = *(WTF **)(a3 + 8);
  if (!v20)
  {
    v20 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v20 = 1;
    *((_QWORD *)v20 + 1) = a3;
    v24 = *(WTF **)(a3 + 8);
    *(_QWORD *)(a3 + 8) = v20;
    if (v24)
    {
      if (*(_DWORD *)v24 == 1)
      {
        WTF::fastFree(v24, v23);
        v20 = *(WTF **)(a3 + 8);
      }
      else
      {
        --*(_DWORD *)v24;
      }
    }
  }
  *(_DWORD *)v20 += 2;
  v25 = v20;
  WTF::HashSet<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::add((uint64_t *)a2, &v25, a1);
  result = v25;
  v25 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      result = (WTF *)WTF::fastFree(result, v21);
    else
      --*(_DWORD *)result;
  }
  if (*(_DWORD *)v20 == 1)
    return (WTF *)WTF::fastFree(v20, v21);
  --*(_DWORD *)v20;
  return result;
}

uint64_t WTF::WeakHashSet<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::computeSize(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t result;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v14;
  int v15;

  v3 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
  {
LABEL_2:
    *(_DWORD *)(a1 + 8) = 0;
LABEL_3:
    result = 0;
    *(_DWORD *)(a1 + 12) = 0;
    return result;
  }
  v5 = *(_DWORD *)(v3 - 4);
  if (!v5)
    goto LABEL_25;
  v6 = 0;
  v7 = v5 - 1;
  do
  {
    v8 = v7;
    v9 = *(WTF **)(v3 + 8 * v7);
    if ((unint64_t)v9 + 1 >= 2 && !*((_QWORD *)v9 + 1))
    {
      *(_QWORD *)(v3 + 8 * v7) = 0;
      if (*(_DWORD *)v9 == 1)
        WTF::fastFree(v9, a2);
      else
        --*(_DWORD *)v9;
      *(_QWORD *)(v3 + 8 * v7) = -1;
      ++v6;
    }
    --v7;
  }
  while (v8);
  v3 = *(_QWORD *)a1;
  if (v6)
  {
    *(_DWORD *)(v3 - 16) += v6;
    v10 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
      v11 = *(_DWORD *)(v10 - 12);
    else
      v11 = 0;
    *(_DWORD *)(v10 - 12) = v11 - v6;
    v3 = *(_QWORD *)a1;
  }
  if (!v3)
    goto LABEL_2;
  v12 = *(_DWORD *)(v3 - 4);
  if (v12 < 9 || 6 * *(_DWORD *)(v3 - 12) >= v12)
  {
LABEL_25:
    *(_DWORD *)(a1 + 8) = 0;
  }
  else
  {
    WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
    v3 = *(_QWORD *)a1;
    *(_DWORD *)(a1 + 8) = 0;
    if (!v3)
      goto LABEL_3;
  }
  v14 = *(_DWORD *)(v3 - 12);
  if (v14 >= 0x7FFFFFFF)
    v15 = -2;
  else
    v15 = 2 * v14;
  *(_DWORD *)(a1 + 12) = v15;
  return *(unsigned int *)(v3 - 12);
}

uint64_t WebCore::RenderTableSection::recalcOuterBorder(WebCore::RenderTableSection *this)
{
  uint64_t v2;
  int v3;
  char *v4;
  BOOL v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  int v21;
  float v22;
  double v23;
  float v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  double v31;
  float v32;
  double v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  char *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int8 *v54;
  int v55;
  float v56;
  uint64_t v57;
  float v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  double v63;
  float v64;
  double v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  _DWORD *v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int v95;
  unsigned int v96;
  uint64_t v97;
  float v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  int v104;
  float v105;
  double v106;
  float v107;
  double v108;
  uint64_t result;
  int v110;
  int v111;
  int v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  unsigned int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unsigned int v141;
  unsigned int v142;
  uint64_t v143;
  float v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  int v149;
  float v150;
  double v151;
  float v152;
  double v153;
  WTF *v154;
  void *v155;
  WTF *v156;
  void *v157;
  WTF *v158;
  void *v159;
  WTF *v160;
  void *v161;
  float v162;
  double v163;
  double v164;
  double v165;
  double v166;
  double v167;
  float v168;
  double v169;
  float v170;
  double v171;
  float v172;
  double v173;
  int v174;
  float v175;
  double v176;
  float v177;
  double v178;
  int v179;
  float v180;
  double v181;
  uint64_t v182;
  uint64_t v183;
  unsigned int v184;
  unsigned int v185;
  uint64_t v186;
  uint64_t v187;
  unsigned int v188;
  unsigned int v189;
  float v190;
  double v191;
  int v192;
  int v193;
  float v194;
  double v195;
  float v196;
  double v197;
  int v198;
  int v199;
  float v200;
  double v201;
  uint64_t v202;
  int v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  float v210;
  double v211;
  int v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  float v219;
  double v220;
  uint64_t v221;
  uint64_t v222;
  int v223;
  char *v224;
  char *v225;
  uint64_t v226;
  uint64_t v227;
  int v228;
  int v229;
  char *v230;
  char *v231;
  unint64_t v232;

  v2 = *(_QWORD *)(*((_QWORD *)this + 4) + 8);
  v3 = *(unsigned __int8 *)(v2 + 46);
  if (v3 != 35 && v3 != 63)
  {
    __break(0xC471u);
    JUMPOUT(0x196449FA4);
  }
  v4 = (char *)*(unsigned int *)(v2 + 228);
  if (*((_DWORD *)this + 53))
    v5 = (_DWORD)v4 == 0;
  else
    v5 = 1;
  if (v5)
  {
    v34 = 0;
    goto LABEL_50;
  }
  switch((unsigned __int16)*((_DWORD *)this + 31) >> 13)
  {
    case 1:
      v6 = *(_QWORD *)(*((_QWORD *)this + 11) + 24) + 176;
      break;
    case 2:
    case 4:
      v6 = *(_QWORD *)(*((_QWORD *)this + 11) + 24) + 104;
      break;
    case 3:
    case 5:
      v6 = *(_QWORD *)(*((_QWORD *)this + 11) + 24) + 128;
      break;
    default:
      v6 = *(_QWORD *)(*((_QWORD *)this + 11) + 24) + 152;
      break;
  }
  v7 = *(_BYTE *)(v6 + 20) & 0xF;
  if ((*(_BYTE *)(v6 + 20) & 0xF) != 0)
  {
    if (v7 == 1)
      goto LABEL_225;
    v164 = *(float *)(v6 + 16) * 64.0;
    if (v164 >= 2147483650.0)
    {
      v7 = 0x7FFFFFFF;
    }
    else if (v164 <= -2147483650.0)
    {
      v7 = 0x80000000;
    }
    else
    {
      v7 = (int)v164;
    }
  }
  v8 = *((unsigned int *)this + 16);
  v9 = v8 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32);
  if (v9)
  {
    v9 = *(_QWORD *)((v8 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8);
    if (v9)
    {
      if (*(_BYTE *)(v9 + 46) != 39)
      {
        __break(0xC471u);
        JUMPOUT(0x196449AA8);
      }
    }
  }
  switch((unsigned __int16)*(_DWORD *)(v9 + 124) >> 13)
  {
    case 1:
      v10 = *(_QWORD *)(*(_QWORD *)(v9 + 88) + 24) + 176;
      break;
    case 2:
    case 4:
      v10 = *(_QWORD *)(*(_QWORD *)(v9 + 88) + 24) + 104;
      break;
    case 3:
    case 5:
      v10 = *(_QWORD *)(*(_QWORD *)(v9 + 88) + 24) + 128;
      break;
    default:
      v10 = *(_QWORD *)(*(_QWORD *)(v9 + 88) + 24) + 152;
      break;
  }
  if ((*(_BYTE *)(v10 + 20) & 0xF) != 0)
  {
    if ((*(_BYTE *)(v10 + 20) & 0xF) == 1)
      goto LABEL_225;
    v168 = *(float *)(v10 + 16);
    if ((float)((float)v7 * 0.015625) < v168)
    {
      v169 = v168 * 64.0;
      if (v169 >= 2147483650.0)
      {
        v7 = 0x7FFFFFFF;
      }
      else if (v169 <= -2147483650.0)
      {
        v7 = 0x80000000;
      }
      else
      {
        v7 = (int)v169;
      }
    }
  }
  v11 = 0;
  v12 = 0;
  v13 = 1;
  do
  {
    if (!*((_DWORD *)this + 53))
    {
      __break(0xC471u);
      JUMPOUT(0x19644A2A4);
    }
    v14 = (uint64_t *)*((_QWORD *)this + 25);
    if ((unint64_t)v12 >= *((unsigned int *)v14 + 3))
    {
      __break(0xC471u);
      JUMPOUT(0x19644A29CLL);
    }
    v15 = *v14;
    if (!*(_BYTE *)(v15 + v11 + 24))
    {
      v16 = *(unsigned int *)(v15 + v11 + 12);
      if ((_DWORD)v16)
      {
        v17 = *(_QWORD *)(*(_QWORD *)(v15 + v11) + 8 * v16 - 8);
        switch((unsigned __int16)*(_DWORD *)(v17 + 124) >> 13)
        {
          case 1:
            v18 = *(_QWORD *)(*(_QWORD *)(v17 + 88) + 24) + 176;
            break;
          case 2:
          case 4:
            v18 = *(_QWORD *)(*(_QWORD *)(v17 + 88) + 24) + 104;
            break;
          case 3:
          case 5:
            v18 = *(_QWORD *)(*(_QWORD *)(v17 + 88) + 24) + 128;
            break;
          default:
            v18 = *(_QWORD *)(*(_QWORD *)(v17 + 88) + 24) + 152;
            break;
        }
        v19 = *((_QWORD *)this + 4);
        if (v19)
        {
          v20 = *(unsigned __int8 **)(v19 + 8);
          if (v20)
          {
            v21 = v20[46];
            if (v21 != 35 && v21 != 63)
            {
              __break(0xC471u);
              JUMPOUT(0x196449C3CLL);
            }
          }
        }
        else
        {
          v20 = 0;
        }
        if ((v20[328] & 4) == 0)
          goto LABEL_28;
        v231 = v12;
        v225 = v4;
        v227 = v11;
        v229 = v7;
        v223 = v13;
        v221 = v18;
        v186 = WebCore::RenderTable::slowColElement((WebCore::RenderTable *)v20, v12, 0, 0);
        v18 = v221;
        v13 = v223;
        v4 = v225;
        v11 = v227;
        v7 = v229;
        v12 = v231;
        if (v186)
        {
          v187 = WebCore::RenderStyle::borderBefore((WebCore::RenderStyle *)(v186 + 80));
          v188 = *(_BYTE *)(v187 + 20) & 0xF;
          if (v188 == 1 || (v189 = *(_BYTE *)(v221 + 20) & 0xF, v189 == 1))
          {
            v12 = v231;
            v4 = v225;
            v11 = v227;
            v7 = v229;
            v13 = v223;
          }
          else
          {
            if (v188 >= 2)
            {
              v196 = *(float *)(v187 + 16);
              if ((float)((float)v229 * 0.015625) < v196)
              {
                v197 = v196 * 64.0;
                if (v197 > -2147483650.0)
                  v198 = (int)v197;
                else
                  v198 = 0x80000000;
                if (v197 < 2147483650.0)
                  v199 = v198;
                else
                  v199 = 0x7FFFFFFF;
                v229 = v199;
              }
            }
            if (v189 < 2 || (v200 = *(float *)(v221 + 16), (float)((float)v229 * 0.015625) >= v200))
            {
              v13 = 0;
              v12 = v231;
              v4 = v225;
              v7 = v229;
            }
            else
            {
              v201 = v200 * 64.0;
              if (v201 >= 2147483650.0)
              {
                v13 = 0;
                v7 = 0x7FFFFFFF;
              }
              else
              {
                v13 = 0;
                if (v201 <= -2147483650.0)
                  v7 = 0x80000000;
                else
                  v7 = (int)v201;
              }
              v12 = v231;
              v4 = v225;
            }
            v11 = v227;
          }
        }
        else
        {
LABEL_28:
          if ((*(_BYTE *)(v18 + 20) & 0xF) == 0)
            goto LABEL_29;
          if ((*(_BYTE *)(v18 + 20) & 0xF) != 1)
          {
            v22 = *(float *)(v18 + 16);
            if ((float)((float)v7 * 0.015625) >= v22)
            {
LABEL_29:
              v13 = 0;
              goto LABEL_30;
            }
            v23 = v22 * 64.0;
            if (v23 >= 2147483650.0)
            {
              v13 = 0;
              v7 = 0x7FFFFFFF;
            }
            else
            {
              v13 = 0;
              if (v23 <= -2147483650.0)
                v7 = 0x80000000;
              else
                v7 = (int)v23;
            }
          }
        }
      }
    }
LABEL_30:
    ++v12;
    v11 += 32;
  }
  while (v4 != v12);
  if ((v13 & 1) != 0)
  {
LABEL_225:
    v34 = -64;
    goto LABEL_50;
  }
  v24 = (float)v7 * 0.015625;
  v25 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 528);
  v26 = 1.0;
  if (v25)
  {
    v27 = *(_QWORD *)(v25 + 8);
    if (v27)
    {
      v28 = *(_QWORD *)(v27 + 24);
      if (v28)
      {
        v29 = *(_QWORD *)(v28 + 8);
        if (v29)
        {
          v30 = (*(_DWORD *)v29)++;
          v26 = *(float *)(v29 + 364);
          if (v30)
          {
            *(_DWORD *)v29 = v30;
          }
          else
          {
            WebCore::Page::~Page(v29);
            WTF::fastFree(v154, v155);
          }
        }
      }
    }
  }
  v31 = (float)((float)(v24 + 0.0) * 0.5) * 64.0;
  if (v31 >= 2147483650.0)
  {
    v32 = 2147500000.0;
  }
  else if (v31 <= -2147483650.0)
  {
    v32 = -2147500000.0;
  }
  else
  {
    v32 = (float)(int)v31;
  }
  v33 = (float)(floorf((float)(v26 * v32) * 0.015625) / v26) * 64.0;
  if (v33 >= 2147483650.0)
  {
    v34 = 0x7FFFFFFF;
  }
  else if (v33 <= -2147483650.0)
  {
    v34 = 0x80000000;
  }
  else
  {
    v34 = (int)v33;
  }
LABEL_50:
  *((_DWORD *)this + 62) = v34;
  v35 = *(_QWORD *)(*((_QWORD *)this + 4) + 8);
  v36 = *(unsigned __int8 *)(v35 + 46);
  if (v36 != 35 && v36 != 63)
  {
    __break(0xC471u);
    JUMPOUT(0x196449FC4);
  }
  v37 = 0;
  if (*((_DWORD *)this + 53))
  {
    v38 = (char *)*(unsigned int *)(v35 + 228);
    if ((_DWORD)v38)
    {
      switch((unsigned __int16)*((_DWORD *)this + 31) >> 13)
      {
        case 1:
          v39 = *(_QWORD *)(*((_QWORD *)this + 11) + 24) + 152;
          break;
        case 2:
        case 4:
          v39 = *(_QWORD *)(*((_QWORD *)this + 11) + 24) + 128;
          break;
        case 3:
        case 5:
          v39 = *(_QWORD *)(*((_QWORD *)this + 11) + 24) + 104;
          break;
        default:
          v39 = *(_QWORD *)(*((_QWORD *)this + 11) + 24) + 176;
          break;
      }
      v40 = *(_BYTE *)(v39 + 20) & 0xF;
      if ((*(_BYTE *)(v39 + 20) & 0xF) != 0)
      {
        if (v40 == 1)
          goto LABEL_227;
        v165 = *(float *)(v39 + 16) * 64.0;
        if (v165 >= 2147483650.0)
        {
          v40 = 0x7FFFFFFF;
        }
        else if (v165 <= -2147483650.0)
        {
          v40 = 0x80000000;
        }
        else
        {
          v40 = (int)v165;
        }
      }
      v41 = *(unsigned int *)((char *)this + 71);
      v42 = v41 | ((unint64_t)*((unsigned __int8 *)this + 75) << 32);
      if (v42)
      {
        v42 = *(_QWORD *)((v41 | ((unint64_t)*((unsigned __int8 *)this + 75) << 32)) + 8);
        if (v42)
        {
          if (*(_BYTE *)(v42 + 46) != 39)
          {
            __break(0xC471u);
            JUMPOUT(0x196449AC8);
          }
        }
      }
      switch((unsigned __int16)*(_DWORD *)(v42 + 124) >> 13)
      {
        case 1:
          v43 = *(_QWORD *)(*(_QWORD *)(v42 + 88) + 24) + 152;
          break;
        case 2:
        case 4:
          v43 = *(_QWORD *)(*(_QWORD *)(v42 + 88) + 24) + 128;
          break;
        case 3:
        case 5:
          v43 = *(_QWORD *)(*(_QWORD *)(v42 + 88) + 24) + 104;
          break;
        default:
          v43 = *(_QWORD *)(*(_QWORD *)(v42 + 88) + 24) + 176;
          break;
      }
      if ((*(_BYTE *)(v43 + 20) & 0xF) != 0)
      {
        if ((*(_BYTE *)(v43 + 20) & 0xF) == 1)
          goto LABEL_227;
        v170 = *(float *)(v43 + 16);
        if ((float)((float)v40 * 0.015625) < v170)
        {
          v171 = v170 * 64.0;
          if (v171 >= 2147483650.0)
          {
            v40 = 0x7FFFFFFF;
          }
          else if (v171 <= -2147483650.0)
          {
            v40 = 0x80000000;
          }
          else
          {
            v40 = (int)v171;
          }
        }
      }
      v44 = 0;
      v45 = 0;
      v46 = 1;
      while (2)
      {
        v47 = *((_DWORD *)this + 53);
        if (!v47)
        {
          __break(0xC471u);
          JUMPOUT(0x19644A2B4);
        }
        v48 = *((_QWORD *)this + 25) + 40 * (v47 - 1);
        if ((unint64_t)v45 >= *(unsigned int *)(v48 + 12))
        {
          __break(0xC471u);
          JUMPOUT(0x19644A2ACLL);
        }
        v49 = *(_QWORD *)v48;
        if (!*(_BYTE *)(v49 + v44 + 24))
        {
          v50 = *(unsigned int *)(v49 + v44 + 12);
          if ((_DWORD)v50)
          {
            v51 = *(_QWORD *)(*(_QWORD *)(v49 + v44) + 8 * v50 - 8);
            switch((unsigned __int16)*(_DWORD *)(v51 + 124) >> 13)
            {
              case 1:
                v52 = *(_QWORD *)(*(_QWORD *)(v51 + 88) + 24) + 152;
                break;
              case 2:
              case 4:
                v52 = *(_QWORD *)(*(_QWORD *)(v51 + 88) + 24) + 128;
                break;
              case 3:
              case 5:
                v52 = *(_QWORD *)(*(_QWORD *)(v51 + 88) + 24) + 104;
                break;
              default:
                v52 = *(_QWORD *)(*(_QWORD *)(v51 + 88) + 24) + 176;
                break;
            }
            v53 = *((_QWORD *)this + 4);
            if (v53)
            {
              v54 = *(unsigned __int8 **)(v53 + 8);
              if (v54)
              {
                v55 = v54[46];
                if (v55 != 35 && v55 != 63)
                {
                  __break(0xC471u);
                  JUMPOUT(0x196449C1CLL);
                }
              }
            }
            else
            {
              v54 = 0;
            }
            if ((v54[328] & 4) == 0)
              goto LABEL_441;
            v230 = v45;
            v224 = v38;
            v226 = v44;
            v228 = v40;
            v222 = v52;
            v182 = WebCore::RenderTable::slowColElement((WebCore::RenderTable *)v54, v45, 0, 0);
            v52 = v222;
            v38 = v224;
            v44 = v226;
            v40 = v228;
            v45 = v230;
            if (v182)
            {
              v183 = WebCore::RenderStyle::borderAfter((WebCore::RenderStyle *)(v182 + 80));
              v184 = *(_BYTE *)(v183 + 20) & 0xF;
              if (v184 == 1 || (v185 = *(_BYTE *)(v222 + 20) & 0xF, v185 == 1))
              {
LABEL_278:
                v45 = v230;
                v38 = v224;
                v40 = v228;
              }
              else
              {
                if (v184 >= 2)
                {
                  v190 = *(float *)(v183 + 16);
                  if ((float)((float)v228 * 0.015625) < v190)
                  {
                    v191 = v190 * 64.0;
                    if (v191 > -2147483650.0)
                      v192 = (int)v191;
                    else
                      v192 = 0x80000000;
                    if (v191 < 2147483650.0)
                      v193 = v192;
                    else
                      v193 = 0x7FFFFFFF;
                    v228 = v193;
                  }
                }
                if (v185 < 2 || (v194 = *(float *)(v222 + 16), (float)((float)v228 * 0.015625) >= v194))
                {
                  v46 = 0;
                  goto LABEL_278;
                }
                v195 = v194 * 64.0;
                if (v195 >= 2147483650.0)
                {
                  v46 = 0;
                  v40 = 0x7FFFFFFF;
                }
                else
                {
                  v46 = 0;
                  if (v195 <= -2147483650.0)
                    v40 = 0x80000000;
                  else
                    v40 = (int)v195;
                }
                v45 = v230;
                v38 = v224;
              }
              v44 = v226;
            }
            else
            {
LABEL_441:
              if ((*(_BYTE *)(v52 + 20) & 0xF) == 0)
                goto LABEL_76;
              if ((*(_BYTE *)(v52 + 20) & 0xF) == 1)
                goto LABEL_77;
              v162 = *(float *)(v52 + 16);
              if ((float)((float)v40 * 0.015625) >= v162)
              {
LABEL_76:
                v46 = 0;
                goto LABEL_77;
              }
              v163 = v162 * 64.0;
              if (v163 >= 2147483650.0)
              {
                v46 = 0;
                v40 = 0x7FFFFFFF;
              }
              else
              {
                v46 = 0;
                if (v163 <= -2147483650.0)
                  v40 = 0x80000000;
                else
                  v40 = (int)v163;
              }
            }
          }
        }
LABEL_77:
        ++v45;
        v44 += 32;
        if (v38 == v45)
        {
          if ((v46 & 1) == 0)
          {
            v56 = (float)v40 * 0.015625;
            v57 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 528);
            v58 = 1.0;
            if (v57)
            {
              v59 = *(_QWORD *)(v57 + 8);
              if (v59)
              {
                v60 = *(_QWORD *)(v59 + 24);
                if (v60)
                {
                  v61 = *(_QWORD *)(v60 + 8);
                  if (v61)
                  {
                    v62 = (*(_DWORD *)v61)++;
                    v58 = *(float *)(v61 + 364);
                    if (v62)
                    {
                      *(_DWORD *)v61 = v62;
                    }
                    else
                    {
                      WebCore::Page::~Page(v61);
                      WTF::fastFree(v156, v157);
                    }
                  }
                }
              }
            }
            v63 = (float)((float)(v56 + (float)(1.0 / v58)) * 0.5) * 64.0;
            if (v63 >= 2147483650.0)
            {
              v64 = 2147500000.0;
            }
            else if (v63 <= -2147483650.0)
            {
              v64 = -2147500000.0;
            }
            else
            {
              v64 = (float)(int)v63;
            }
            v65 = (float)(floorf((float)(v58 * v64) * 0.015625) / v58) * 64.0;
            if (v65 >= 2147483650.0)
            {
              v37 = 0x7FFFFFFF;
            }
            else if (v65 <= -2147483650.0)
            {
              v37 = 0x80000000;
            }
            else
            {
              v37 = (int)v65;
            }
            break;
          }
LABEL_227:
          v37 = -64;
          break;
        }
        continue;
      }
    }
  }
  *((_DWORD *)this + 63) = v37;
  v66 = *(_QWORD *)(*((_QWORD *)this + 4) + 8);
  v67 = *(unsigned __int8 *)(v66 + 46);
  if (v67 != 35 && v67 != 63)
  {
    __break(0xC471u);
    JUMPOUT(0x196449FE4);
  }
  v68 = 0;
  if (*((_DWORD *)this + 53) && *(_DWORD *)(v66 + 228))
  {
    v69 = *((_DWORD *)this + 30);
    v70 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
    v71 = v70 + 176;
    if ((v69 & 0x4000000) == 0)
      v71 = v70 + 152;
    v72 = v70 + 128;
    v73 = v70 + 104;
    if ((v69 & 0x4000000) != 0)
      v74 = v72;
    else
      v74 = v73;
    if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
      v75 = v74;
    else
      v75 = v71;
    v76 = *(_BYTE *)(v75 + 20) & 0xF;
    if ((*(_BYTE *)(v75 + 20) & 0xF) != 0)
    {
      if (v76 != 1)
      {
        v166 = *(float *)(v75 + 16) * 64.0;
        if (v166 >= 2147483650.0)
        {
          v76 = 0x7FFFFFFF;
        }
        else if (v166 <= -2147483650.0)
        {
          v76 = 0x80000000;
        }
        else
        {
          v76 = (int)v166;
        }
        goto LABEL_104;
      }
      goto LABEL_221;
    }
    if ((*(_BYTE *)(v66 + 328) & 4) == 0)
      goto LABEL_105;
    v202 = WebCore::RenderTable::slowColElement((WebCore::RenderTable *)v66, 0, 0, 0);
    if (!v202)
      goto LABEL_105;
LABEL_104:
    v203 = *(_DWORD *)(v202 + 120);
    v204 = *(_QWORD *)(*(_QWORD *)(v202 + 88) + 24);
    v205 = v204 + 176;
    if ((v203 & 0x4000000) == 0)
      v205 = v204 + 152;
    v206 = v204 + 128;
    v207 = v204 + 104;
    v208 = (v203 & 0x4000000) != 0 ? v206 : v207;
    v209 = ((*(_DWORD *)(v202 + 124) >> 13) & 6u) - 2 >= 4 ? v208 : v205;
    if ((*(_BYTE *)(v209 + 20) & 0xF) != 0)
    {
      if ((*(_BYTE *)(v209 + 20) & 0xF) != 1)
      {
        v210 = *(float *)(v209 + 16);
        if ((float)((float)v76 * 0.015625) < v210)
        {
          v211 = v210 * 64.0;
          if (v211 >= 2147483650.0)
          {
            v76 = 0x7FFFFFFF;
          }
          else if (v211 <= -2147483650.0)
          {
            v76 = 0x80000000;
          }
          else
          {
            v76 = (int)v211;
          }
        }
        goto LABEL_105;
      }
LABEL_221:
      v68 = -64;
    }
    else
    {
LABEL_105:
      v77 = *((unsigned int *)this + 53);
      if (!(_DWORD)v77)
        goto LABEL_221;
      v78 = (_DWORD *)*((_QWORD *)this + 25);
      v79 = 1;
      do
      {
        if (!v78[3])
        {
          __break(0xC471u);
          JUMPOUT(0x19644A304);
        }
        v80 = *(unsigned int *)(*(_QWORD *)v78 + 12);
        if ((_DWORD)v80)
        {
          v81 = *(_QWORD *)(**(_QWORD **)v78 + 8 * v80 - 8);
          v82 = *(_DWORD *)(v81 + 120);
          v83 = *(_QWORD *)(*(_QWORD *)(v81 + 88) + 24);
          v84 = v83 + 176;
          if ((v82 & 0x4000000) == 0)
            v84 = v83 + 152;
          v85 = v83 + 128;
          v86 = v83 + 104;
          if ((v82 & 0x4000000) != 0)
            v87 = v85;
          else
            v87 = v86;
          if (((*(_DWORD *)(v81 + 124) >> 13) & 6u) - 2 < 4)
            v87 = v84;
          v88 = *(_QWORD *)(*(_QWORD *)(v81 + 32) + 8);
          v89 = *(_DWORD *)(v88 + 120);
          v90 = ((*(_DWORD *)(v88 + 124) >> 13) & 6) - 2;
          v91 = *(_QWORD *)(*(_QWORD *)(v88 + 88) + 24);
          v92 = v91 + 176;
          if ((v89 & 0x4000000) == 0)
            v92 = v91 + 152;
          v93 = v91 + 128;
          v94 = v91 + 104;
          if ((v89 & 0x4000000) != 0)
            v94 = v93;
          if (v90 < 4)
            v94 = v92;
          v95 = *(_BYTE *)(v87 + 20) & 0xF;
          if (v95 != 1)
          {
            v96 = *(_BYTE *)(v94 + 20) & 0xF;
            if (v96 != 1)
            {
              if (v95 >= 2)
              {
                v172 = *(float *)(v87 + 16);
                if ((float)((float)v76 * 0.015625) < v172)
                {
                  v173 = v172 * 64.0;
                  if (v173 > -2147483650.0)
                    v174 = (int)v173;
                  else
                    v174 = 0x80000000;
                  if (v173 < 2147483650.0)
                    v76 = v174;
                  else
                    v76 = 0x7FFFFFFF;
                }
              }
              if (v96 < 2 || (v175 = *(float *)(v94 + 16), (float)((float)v76 * 0.015625) >= v175))
              {
                v79 = 0;
              }
              else
              {
                v176 = v175 * 64.0;
                if (v176 >= 2147483650.0)
                {
                  v79 = 0;
                  v76 = 0x7FFFFFFF;
                }
                else
                {
                  v79 = 0;
                  if (v176 <= -2147483650.0)
                    v76 = 0x80000000;
                  else
                    v76 = (int)v176;
                }
              }
            }
          }
        }
        v78 += 10;
        --v77;
      }
      while (v77);
      if ((v79 & 1) != 0)
        goto LABEL_221;
      v97 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 528);
      v98 = 1.0;
      if (v97)
      {
        v99 = *(_QWORD *)(v97 + 8);
        if (v99)
        {
          v100 = *(_QWORD *)(v99 + 24);
          if (v100)
          {
            v101 = *(_QWORD *)(v100 + 8);
            if (v101)
            {
              v102 = (*(_DWORD *)v101)++;
              v98 = *(float *)(v101 + 364);
              if (v102)
              {
                *(_DWORD *)v101 = v102;
              }
              else
              {
                WebCore::Page::~Page(v101);
                WTF::fastFree(v158, v159);
              }
            }
          }
        }
      }
      v103 = *(_QWORD *)(*((_QWORD *)this + 4) + 8);
      v104 = *(unsigned __int8 *)(v103 + 46);
      if (v104 != 35 && v104 != 63)
      {
        __break(0xC471u);
        JUMPOUT(0x19644A064);
      }
      v105 = 1.0 / v98;
      if ((*(_BYTE *)(v103 + 123) & 4) == 0)
        v105 = 0.0;
      v106 = (float)((float)((float)((float)v76 * 0.015625) + v105) * 0.5) * 64.0;
      if (v106 >= 2147483650.0)
      {
        v107 = 2147500000.0;
      }
      else if (v106 <= -2147483650.0)
      {
        v107 = -2147500000.0;
      }
      else
      {
        v107 = (float)(int)v106;
      }
      v108 = (float)(floorf((float)(v98 * v107) * 0.015625) / v98) * 64.0;
      if (v108 >= 2147483650.0)
      {
        v68 = 0x7FFFFFFF;
      }
      else if (v108 <= -2147483650.0)
      {
        v68 = 0x80000000;
      }
      else
      {
        v68 = (int)v108;
      }
    }
  }
  *((_DWORD *)this + 60) = v68;
  result = *(_QWORD *)(*((_QWORD *)this + 4) + 8);
  v110 = *(unsigned __int8 *)(result + 46);
  if (v110 != 35 && v110 != 63)
  {
    __break(0xC471u);
    JUMPOUT(0x19644A004);
  }
  v111 = 0;
  if (*((_DWORD *)this + 53))
  {
    v112 = *(_DWORD *)(result + 228);
    if (v112)
    {
      v113 = *((_DWORD *)this + 30);
      v114 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
      v115 = v114 + 152;
      if ((v113 & 0x4000000) == 0)
        v115 = v114 + 176;
      v116 = v114 + 104;
      v117 = v114 + 128;
      if ((v113 & 0x4000000) != 0)
        v118 = v116;
      else
        v118 = v117;
      if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
        v119 = v118;
      else
        v119 = v115;
      v120 = *(_BYTE *)(v119 + 20) & 0xF;
      if ((*(_BYTE *)(v119 + 20) & 0xF) != 0)
      {
        if (v120 != 1)
        {
          v167 = *(float *)(v119 + 16) * 64.0;
          if (v167 >= 2147483650.0)
          {
            v120 = 0x7FFFFFFF;
          }
          else if (v167 <= -2147483650.0)
          {
            v120 = 0x80000000;
          }
          else
          {
            v120 = (int)v167;
          }
          goto LABEL_158;
        }
        goto LABEL_223;
      }
LABEL_158:
      v121 = (v112 - 1);
      if ((*(_BYTE *)(result + 328) & 4) == 0)
      {
LABEL_159:
        v122 = *((unsigned int *)this + 53);
        if ((_DWORD)v122)
        {
          v123 = *((_QWORD *)this + 25);
          v124 = 1;
          do
          {
            if (*(_DWORD *)(v123 + 12) <= v121)
            {
              __break(0xC471u);
              JUMPOUT(0x19644A30CLL);
            }
            v125 = *(_QWORD *)v123 + 32 * v121;
            v126 = *(unsigned int *)(v125 + 12);
            if ((_DWORD)v126)
            {
              v127 = *(_QWORD *)(*(_QWORD *)v125 + 8 * v126 - 8);
              v128 = *(_DWORD *)(v127 + 120);
              v129 = *(_QWORD *)(*(_QWORD *)(v127 + 88) + 24);
              v130 = v129 + 152;
              if ((v128 & 0x4000000) == 0)
                v130 = v129 + 176;
              v131 = v129 + 104;
              v132 = v129 + 128;
              if ((v128 & 0x4000000) != 0)
                v133 = v131;
              else
                v133 = v132;
              if (((*(_DWORD *)(v127 + 124) >> 13) & 6u) - 2 < 4)
                v133 = v130;
              v134 = *(_QWORD *)(*(_QWORD *)(v127 + 32) + 8);
              v135 = *(_DWORD *)(v134 + 120);
              v136 = ((*(_DWORD *)(v134 + 124) >> 13) & 6) - 2;
              v137 = *(_QWORD *)(*(_QWORD *)(v134 + 88) + 24);
              v138 = v137 + 152;
              if ((v135 & 0x4000000) == 0)
                v138 = v137 + 176;
              v139 = v137 + 104;
              v140 = v137 + 128;
              if ((v135 & 0x4000000) != 0)
                v140 = v139;
              if (v136 < 4)
                v140 = v138;
              v141 = *(_BYTE *)(v133 + 20) & 0xF;
              if (v141 != 1)
              {
                v142 = *(_BYTE *)(v140 + 20) & 0xF;
                if (v142 != 1)
                {
                  if (v141 >= 2)
                  {
                    v177 = *(float *)(v133 + 16);
                    if ((float)((float)v120 * 0.015625) < v177)
                    {
                      v178 = v177 * 64.0;
                      if (v178 > -2147483650.0)
                        v179 = (int)v178;
                      else
                        v179 = 0x80000000;
                      if (v178 < 2147483650.0)
                        v120 = v179;
                      else
                        v120 = 0x7FFFFFFF;
                    }
                  }
                  if (v142 < 2 || (v180 = *(float *)(v140 + 16), (float)((float)v120 * 0.015625) >= v180))
                  {
                    v124 = 0;
                  }
                  else
                  {
                    v181 = v180 * 64.0;
                    if (v181 >= 2147483650.0)
                    {
                      v124 = 0;
                      v120 = 0x7FFFFFFF;
                    }
                    else
                    {
                      v124 = 0;
                      if (v181 <= -2147483650.0)
                        v120 = 0x80000000;
                      else
                        v120 = (int)v181;
                    }
                  }
                }
              }
            }
            v123 += 40;
            --v122;
          }
          while (v122);
          if ((v124 & 1) == 0)
          {
            v143 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 528);
            v144 = 1.0;
            if (v143)
            {
              v145 = *(_QWORD *)(v143 + 8);
              if (v145)
              {
                v146 = *(_QWORD *)(v145 + 24);
                if (v146)
                {
                  result = *(_QWORD *)(v146 + 8);
                  if (result)
                  {
                    v147 = (*(_DWORD *)result)++;
                    v144 = *(float *)(result + 364);
                    if (v147)
                    {
                      *(_DWORD *)result = v147;
                    }
                    else
                    {
                      WebCore::Page::~Page(result);
                      result = WTF::fastFree(v160, v161);
                    }
                  }
                }
              }
            }
            v148 = *(_QWORD *)(*((_QWORD *)this + 4) + 8);
            v149 = *(unsigned __int8 *)(v148 + 46);
            if (v149 != 35 && v149 != 63)
            {
              __break(0xC471u);
              JUMPOUT(0x19644A084);
            }
            v150 = 1.0 / v144;
            if ((*(_BYTE *)(v148 + 123) & 4) != 0)
              v150 = 0.0;
            v151 = (float)((float)((float)((float)v120 * 0.015625) + v150) * 0.5) * 64.0;
            if (v151 >= 2147483650.0)
            {
              v152 = 2147500000.0;
            }
            else if (v151 <= -2147483650.0)
            {
              v152 = -2147500000.0;
            }
            else
            {
              v152 = (float)(int)v151;
            }
            v153 = (float)(floorf((float)(v144 * v152) * 0.015625) / v144) * 64.0;
            if (v153 >= 2147483650.0)
            {
              v111 = 0x7FFFFFFF;
            }
            else if (v153 <= -2147483650.0)
            {
              v111 = 0x80000000;
            }
            else
            {
              v111 = (int)v153;
            }
            goto LABEL_199;
          }
        }
LABEL_223:
        v111 = -64;
        goto LABEL_199;
      }
      v232 = (v112 - 1);
      result = WebCore::RenderTable::slowColElement((WebCore::RenderTable *)result, (void *)v121, 0, 0);
      if (result)
      {
        v212 = *(_DWORD *)(result + 120);
        v213 = *(_QWORD *)(*(_QWORD *)(result + 88) + 24);
        v214 = v213 + 152;
        if ((v212 & 0x4000000) == 0)
          v214 = v213 + 176;
        v215 = v213 + 104;
        v216 = v213 + 128;
        v217 = (v212 & 0x4000000) != 0 ? v215 : v216;
        v218 = ((*(_DWORD *)(result + 124) >> 13) & 6u) - 2 >= 4 ? v217 : v214;
        if ((*(_BYTE *)(v218 + 20) & 0xF) != 0)
        {
          if ((*(_BYTE *)(v218 + 20) & 0xF) == 1)
            goto LABEL_223;
          v219 = *(float *)(v218 + 16);
          v121 = v232;
          if ((float)((float)v120 * 0.015625) >= v219)
            goto LABEL_159;
          v220 = v219 * 64.0;
          if (v220 >= 2147483650.0)
          {
            v120 = 0x7FFFFFFF;
          }
          else if (v220 <= -2147483650.0)
          {
            v120 = 0x80000000;
          }
          else
          {
            v120 = (int)v220;
          }
        }
      }
      v121 = v232;
      goto LABEL_159;
    }
  }
LABEL_199:
  *((_DWORD *)this + 61) = v111;
  return result;
}

uint64_t WebCore::RenderTableSection::firstLineBaseline(uint64_t this)
{
  unsigned int v1;
  int v2;
  BOOL v3;
  int v4;
  int v5;
  unint64_t v6;
  int v7;
  uint64_t v8;

  if (!*(_DWORD *)(this + 212))
  {
    v8 = 0;
    LOBYTE(v6) = 0;
    v7 = 0;
    return v8 | v7 | v6;
  }
  v1 = *(_DWORD *)(*(_QWORD *)(this + 200) + 24);
  if (!v1)
  {
    v6 = WebCore::RenderTableSection::baselineFromCellContentEdges(this, 4);
    v7 = v6 & 0xFFFFFF00;
    v8 = v6 & 0x100000000;
    return v8 | v7 | v6;
  }
  if (*(_DWORD *)(this + 228))
  {
    v2 = **(_DWORD **)(this + 216);
    v3 = __OFADD__(v1, v2);
    v4 = v1 + v2;
    v5 = (v1 >> 31) + 0x7FFFFFFF;
    if (v3)
      LODWORD(v6) = v5;
    else
      LODWORD(v6) = v4;
    v7 = v6 & 0xFFFFFF00;
    v8 = 0x100000000;
    return v8 | v7 | v6;
  }
  __break(0xC471u);
  return this;
}

unint64_t WebCore::RenderTableSection::baselineFromCellContentEdges(uint64_t a1, int a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  WebCore::RenderBox *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  int v26;
  BOOL v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  char *v34;
  WTF *v35;
  uint64_t v38;

  v2 = *(_DWORD *)(a1 + 212);
  if (a2 == 4)
  {
    if (!v2)
    {
      __break(0xC471u);
      JUMPOUT(0x19644A6F8);
    }
    v3 = *(_QWORD *)(a1 + 200);
  }
  else
  {
    if (!v2)
    {
LABEL_49:
      __break(0xC471u);
      JUMPOUT(0x19644A6E8);
    }
    v3 = *(_QWORD *)(a1 + 200) + 40 * v2 - 40;
  }
  v4 = *(unsigned int *)(v3 + 12);
  if ((_DWORD)v4)
  {
    if (v4 >> 27)
    {
      __break(0xC471u);
      JUMPOUT(0x19644A6F0);
    }
    v38 = 32 * v4;
    v6 = (WTF *)WTF::fastMalloc((WTF *)(32 * v4));
    v7 = *(unsigned int *)(v3 + 12);
    if ((_DWORD)v7)
    {
      v8 = 0;
      v9 = *(_QWORD *)v3;
      v10 = 32 * v7;
      do
      {
        v11 = (char *)v6 + v8;
        v12 = v9 + v8;
        v13 = *(unsigned int *)(v9 + v8 + 12);
        v14 = (char *)v6 + v8 + 16;
        *(_QWORD *)v11 = v14;
        *((_DWORD *)v11 + 2) = 1;
        *((_DWORD *)v11 + 3) = v13;
        if (v13 >= 2)
        {
          if (v13 >> 29)
            goto LABEL_49;
          v14 = (char *)WTF::fastMalloc((WTF *)(8 * v13));
          *((_DWORD *)v11 + 2) = v13;
          *(_QWORD *)((char *)v6 + v8) = v14;
        }
        memcpy(v14, *(const void **)v12, 8 * *(unsigned int *)(v12 + 12));
        v11[24] = *(_BYTE *)(v12 + 24);
        v8 += 32;
      }
      while (v10 != v8);
    }
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = v6;
    do
    {
      v19 = *((unsigned int *)v18 + 3);
      if ((_DWORD)v19)
      {
        v20 = *(_QWORD *)v18 + 8 * v19;
        v21 = *(WebCore::RenderBox **)(v20 - 8);
        if (v21)
        {
          if (WebCore::RenderBox::contentLogicalHeight(*(WebCore::RenderBox **)(v20 - 8)))
          {
            v22 = (unsigned int *)((char *)v21 + 152);
            if (((*((_DWORD *)v21 + 31) >> 13) & 6u) - 2 >= 4)
              v22 = (unsigned int *)((char *)v21 + 156);
            v23 = *v22;
            v24 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)v21 + 1048))(v21);
            v25 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)v21 + 960))(v21);
            v26 = v24 + v25;
            if (__OFADD__(v24, v25))
              v26 = (v24 >> 31) + 0x7FFFFFFF;
            v27 = __OFADD__(v23, v26);
            v28 = v23 + v26;
            if (v27)
              v29 = (v23 >> 31) + 0x7FFFFFFF;
            else
              v29 = v28;
            v30 = WebCore::RenderBox::contentLogicalHeight(v21);
            v31 = v29 + v30;
            if (__OFADD__(v29, v30))
              v31 = (v29 >> 31) + 0x7FFFFFFF;
            v32 = v16 | (v15 << 8);
            if (!(_DWORD)v17)
              v32 = v31;
            if (v32 > v31)
              v31 = v32;
            v16 = v31;
            v15 = v31 >> 8;
            v17 = 1;
          }
        }
      }
      v18 = (WTF *)((char *)v18 + 32);
      --v4;
    }
    while (v4);
    v33 = 0;
    do
    {
      v34 = (char *)v6 + v33;
      v35 = *(WTF **)((char *)v6 + v33);
      if ((WTF *)((char *)v6 + v33 + 16) != v35 && v35 != 0)
      {
        *(_QWORD *)v34 = 0;
        *((_DWORD *)v34 + 2) = 0;
        WTF::fastFree(v35, v5);
      }
      v33 += 32;
    }
    while (v38 != v33);
    WTF::fastFree(v6, v5);
  }
  else
  {
    v17 = 0;
    v16 = 0;
    v15 = 0;
  }
  return v16 | ((unint64_t)v15 << 8) | (v17 << 32);
}

uint64_t WebCore::RenderTableSection::lastLineBaseline(uint64_t this)
{
  uint64_t v1;
  unint64_t v2;
  unsigned int v3;
  int v4;
  BOOL v5;
  int v6;
  int v7;
  unint64_t v8;
  int v9;
  uint64_t v10;

  v1 = *(unsigned int *)(this + 212);
  if (!(_DWORD)v1)
  {
    v10 = 0;
    LOBYTE(v8) = 0;
    v9 = 0;
    return v10 | v9 | v8;
  }
  v2 = v1 - 1;
  v3 = *(_DWORD *)(*(_QWORD *)(this + 200) + 40 * v2 + 24);
  if (!v3)
  {
    v8 = WebCore::RenderTableSection::baselineFromCellContentEdges(this, 5);
    v9 = v8 & 0xFFFFFF00;
    v10 = v8 & 0x100000000;
    return v10 | v9 | v8;
  }
  if (v2 < *(unsigned int *)(this + 228))
  {
    v4 = *(_DWORD *)(*(_QWORD *)(this + 216) + 4 * v2);
    v5 = __OFADD__(v3, v4);
    v6 = v3 + v4;
    v7 = (v3 >> 31) + 0x7FFFFFFF;
    if (v5)
      LODWORD(v8) = v7;
    else
      LODWORD(v8) = v6;
    v9 = v8 & 0xFFFFFF00;
    v10 = 0x100000000;
    return v10 | v9 | v8;
  }
  __break(0xC471u);
  return this;
}

void WebCore::RenderTableSection::paint(WebCore::RenderTableSection *this, WebCore::PaintInfo *a2, const WebCore::LayoutPoint *a3)
{
  int v3;
  uint64_t v6;
  int v7;
  int v8;
  int v10;
  int v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  _BOOL4 v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  float *v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  float v29;
  float v30;
  float v31;
  int v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  unsigned int v41;
  unint64_t v42;
  WebCore::RegionContext *v43;
  float v44;
  float v45;
  unsigned int v46;
  unint64_t v47;
  __int16 v48;
  WTF *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  float v54;
  float v55;
  float v56;
  float v57;
  _QWORD v58[6];
  unint64_t v59;
  unint64_t v60;

  v3 = *((_DWORD *)this + 5);
  if ((v3 & 0xF8) == 0)
  {
    v6 = *(_QWORD *)(*((_QWORD *)this + 4) + 8);
    v7 = *(unsigned __int8 *)(v6 + 46);
    if (v7 != 35 && v7 != 63)
    {
      __break(0xC471u);
      JUMPOUT(0x19644AC04);
    }
    v8 = *(_DWORD *)(v6 + 228);
    if (*((_DWORD *)this + 53) && v8 != 0)
    {
      v11 = *((_DWORD *)this + 38);
      v10 = *((_DWORD *)this + 39);
      v12 = *((_DWORD *)a3 + 1);
      v13 = __OFADD__(*(_DWORD *)a3, v11);
      LODWORD(v14) = *(_DWORD *)a3 + v11;
      if (v13)
        v14 = ((*(_DWORD *)a3 >> 31) + 0x7FFFFFFF);
      else
        v14 = v14;
      v13 = __OFADD__(v12, v10);
      LODWORD(v15) = v12 + v10;
      if (v13)
        v15 = (v12 >> 31) + 0x7FFFFFFF;
      else
        v15 = v15;
      v53 = v14 | (v15 << 32);
      v16 = *((unsigned __int16 *)a2 + 8);
      if (v16 > 0x3F)
      {
        if (v16 == 4096)
        {
          v17 = 0;
LABEL_21:
          v18 = (v3 & 0x10000) != 0 && (*(_BYTE *)(*((_QWORD *)this + 18) + 25) & 8) == 0;
          if ((v17 | v18) != 1)
            goto LABEL_24;
          v20 = *((unsigned __int16 *)a2 + 8);
          if (v20 == 16)
          {
            v48 = 32;
          }
          else
          {
            if (v20 != 1)
            {
LABEL_35:
              v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 528);
              v22 = 1.0;
              if (v21)
              {
                v23 = *(_QWORD *)(v21 + 8);
                if (v23)
                {
                  v24 = *(_QWORD *)(v23 + 24);
                  if (v24)
                  {
                    v25 = *(float **)(v24 + 8);
                    if (v25)
                    {
                      v26 = (*(_DWORD *)v25)++;
                      v22 = v25[91];
                      if (v26)
                      {
                        *(_DWORD *)v25 = v26;
                      }
                      else
                      {
                        WebCore::Page::~Page((uint64_t)v25);
                        WTF::fastFree(v49, v50);
                      }
                    }
                  }
                }
              }
              if (v17)
                v27 = (*(uint64_t (**)(WebCore::RenderTableSection *, unint64_t *))(*(_QWORD *)this + 1440))(this, &v53);
              else
                v27 = (*(uint64_t (**)(WebCore::RenderTableSection *, unint64_t *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)this + 1416))(this, &v53, 0, 0, *((unsigned __int16 *)a2 + 8));
              v59 = v27;
              v60 = v28;
              v54 = WebCore::snapRectToDevicePixels((int *)&v59, v22);
              v55 = v29;
              v56 = v30;
              v57 = v31;
              (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 10) + 96))(*((_QWORD *)a2 + 10), 1);
              if (WebCore::RenderStyle::hasBorderRadius((WebCore::RenderTableSection *)((char *)this + 80)))
              {
                v51 = *((_QWORD *)a2 + 10);
                v52 = *((_QWORD *)this + 20);
                v58[0] = v53;
                v58[1] = v52;
                WebCore::RenderStyle::getRoundedInnerBorderFor((WebCore::RenderTableSection *)((char *)this + 80), (const WebCore::LayoutRect *)v58, 1, 1, (uint64_t)&v59);
                WebCore::RoundedRect::pixelSnappedRoundedRectForPainting((WebCore::RoundedRect *)&v59, v22, (uint64_t)v58);
                (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v51 + 464))(v51, v58);
              }
              (*(void (**)(_QWORD, float *))(**((_QWORD **)a2 + 10) + 456))(*((_QWORD *)a2 + 10), &v54);
              v32 = *((unsigned __int16 *)a2 + 8);
              if (v32 != 4096 && v32 != 0x2000)
                goto LABEL_47;
              v33 = floorf(v54);
              if (v33 < 2147500000.0 && v33 > -2147500000.0
                || (v34 = 2147500000.0, v33 < 2147500000.0) && (v34 = -2147500000.0, v33 > -2147500000.0))
              {
                v34 = (float)(int)v33;
              }
              v35 = floorf(v55);
              if (v35 < 2147500000.0 && v35 > -2147500000.0
                || (v36 = 2147500000.0, v35 < 2147500000.0) && (v36 = -2147500000.0, v35 > -2147500000.0))
              {
                v36 = (float)(int)v35;
              }
              v37 = ceilf(v54 + v56);
              if (v37 < 2147500000.0 && v37 > -2147500000.0
                || (v38 = 2147500000.0, v37 < 2147500000.0) && (v38 = -2147500000.0, v37 > -2147500000.0))
              {
                v38 = (float)(int)v37;
              }
              v39 = ceilf(v55 + v57);
              if (v39 < 2147500000.0 && v39 > -2147500000.0
                || (v40 = 2147500000.0, v39 < 2147500000.0) && (v40 = -2147500000.0, v39 > -2147500000.0))
              {
                v40 = (float)(int)v39;
              }
              if (v34 < 2147500000.0 && v34 > -2147500000.0)
                goto LABEL_62;
              if (v34 >= 2147500000.0)
              {
                v41 = 0x7FFFFFFF;
              }
              else
              {
                if (v34 > -2147500000.0)
                {
LABEL_62:
                  v41 = (int)v34;
                  goto LABEL_63;
                }
                v41 = 0x80000000;
              }
LABEL_63:
              if (v36 < 2147500000.0 && v36 > -2147500000.0)
                goto LABEL_65;
              if (v36 >= 2147500000.0)
              {
                v42 = 0x7FFFFFFF00000000;
                goto LABEL_66;
              }
              if (v36 > -2147500000.0)
LABEL_65:
                v42 = (unint64_t)(int)v36 << 32;
              else
                v42 = 0x8000000000000000;
LABEL_66:
              v43 = (WebCore::RegionContext *)*((_QWORD *)a2 + 9);
              v44 = v38 - v34;
              v45 = v40 - v36;
              if (v44 < 2147500000.0 && v44 > -2147500000.0)
                goto LABEL_68;
              if (v44 >= 2147500000.0)
              {
                v46 = 0x7FFFFFFF;
              }
              else
              {
                if (v44 > -2147500000.0)
                {
LABEL_68:
                  v46 = (int)v44;
                  goto LABEL_69;
                }
                v46 = 0x80000000;
              }
LABEL_69:
              if (v45 < 2147500000.0 && v45 > -2147500000.0)
                goto LABEL_71;
              if (v45 >= 2147500000.0)
              {
                v47 = 0x7FFFFFFF00000000;
                goto LABEL_72;
              }
              if (v45 > -2147500000.0)
LABEL_71:
                v47 = (unint64_t)(int)v45 << 32;
              else
                v47 = 0x8000000000000000;
LABEL_72:
              v59 = v42 | v41;
              v60 = v47 | v46;
              WebCore::RegionContext::pushClip(v43, (const WebCore::IntRect *)&v59);
LABEL_47:
              WebCore::RenderTableSection::paintObject(this, a2, (const WebCore::LayoutPoint *)&v53);
              WebCore::RenderBox::popContentsClip((uint64_t)this, (uint64_t)a2, v16, (uint64_t)&v53);
              goto LABEL_25;
            }
            *((_WORD *)a2 + 8) = 0;
            (*(void (**)(WebCore::RenderTableSection *, WebCore::PaintInfo *, unint64_t *))(*(_QWORD *)this + 1448))(this, a2, &v53);
            v48 = 2;
          }
          *((_WORD *)a2 + 8) = v48;
          goto LABEL_35;
        }
        if (v16 == 64 || v16 == 1024)
          goto LABEL_24;
      }
      else if (!*((_WORD *)a2 + 8))
      {
LABEL_24:
        WebCore::RenderTableSection::paintObject(this, a2, (const WebCore::LayoutPoint *)&v53);
LABEL_25:
        if ((v16 == 64 || v16 == 16)
          && (*(_BYTE *)(*((_QWORD *)this + 13) + 239) & 4) == 0
          && (*((_BYTE *)this + 120) & 0x30) == 0)
        {
          v19 = *((_QWORD *)this + 20);
          v59 = v53;
          v60 = v19;
          WebCore::RenderElement::paintOutline(this, a2, (const WebCore::LayoutRect *)&v59);
        }
        return;
      }
      v17 = (*(uint64_t (**)(WebCore::RenderTableSection *))(*(_QWORD *)this + 1432))(this);
      v3 = *((_DWORD *)this + 5);
      goto LABEL_21;
    }
  }
}

void WebCore::RenderTableSection::paintObject(WebCore::RenderTableSection *this, WebCore::PaintInfo *a2, const WebCore::LayoutPoint *a3)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  char v18;
  unsigned int v19;
  unint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  WebCore::RenderTableSection *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  unint64_t v33;
  unint64_t v34;
  int *v35;
  _DWORD *v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  int *v45;
  _DWORD *v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  unint64_t v53;
  _DWORD *v54;
  _DWORD *v55;
  unint64_t v56;
  unint64_t v57;
  int *v58;
  _DWORD *v59;
  int v60;
  unint64_t v61;
  uint64_t v62;
  unsigned int v63;
  int v64;
  unint64_t v65;
  unint64_t v66;
  int *v67;
  _DWORD *v68;
  int v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unsigned int v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  int v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  const WebCore::LayoutPoint *v103;
  unsigned __int32 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  int v109;
  int v110;
  uint64_t v111;
  unsigned int v112;
  uint64_t v113;
  unsigned int v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  int *v120;
  int v121;
  int v122;
  unint64_t v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int v126;
  unsigned int v127;
  unint64_t v128;
  signed int v129;
  int v130;
  unint64_t v131;
  signed int v132;
  int v133;
  int v134;
  _BOOL4 v135;
  int v136;
  uint64_t v137;
  unsigned __int8 *v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  _BOOL4 v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  WebCore::FillLayer *v151;
  uint64_t v152;
  void *v153;
  uint64_t v154;
  uint64_t (*v155)();
  _BOOL4 v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  void *v166;
  uint64_t (*v167)();
  BOOL v168;
  int v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  int v176;
  uint64_t v177;
  uint64_t v178;
  void *v179;
  uint64_t (*v180)();
  uint64_t v181;
  uint64_t v182;
  _BOOL4 v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  int v191;
  uint64_t v192;
  uint64_t v193;
  void *v194;
  uint64_t (*v195)();
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  int v201;
  uint64_t v202;
  float v203;
  uint64_t v204;
  uint64_t v205;
  float *v206;
  int v207;
  WebCore::PaintInfo *v208;
  uint64_t v209;
  uint64_t v210;
  int v211;
  float v212;
  float v213;
  int v214;
  int v215;
  uint64_t v216;
  _QWORD *v217;
  unint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  WebCore::GraphicsContext *v222;
  uint64_t v223;
  int v224;
  unsigned int v225;
  int v226;
  int v227;
  int v228;
  unsigned int v229;
  int v230;
  int v231;
  int v232;
  int v233;
  float v234;
  float v235;
  float v236;
  float v237;
  float v238;
  float v239;
  WebCore::RegionContext *v240;
  float v241;
  float v242;
  unsigned int v243;
  unint64_t v244;
  float v245;
  unsigned int v246;
  float v247;
  unint64_t v248;
  uint64_t v249;
  int v250;
  __int16 v251;
  WebCore::PaintInfo *v252;
  WTF *v253;
  void *v254;
  uint64_t v255;
  uint64_t v256;
  unsigned int *v257;
  unsigned int v258;
  unsigned int v259;
  unsigned int *v260;
  unsigned int v261;
  unsigned int v262;
  unsigned int *v263;
  unsigned int v264;
  unsigned int v265;
  unsigned int *v266;
  unsigned int v267;
  unsigned int v268;
  float v269;
  unsigned int *v270;
  unsigned int v271;
  unsigned int v272;
  float v273;
  unsigned int *v274;
  unsigned int v275;
  unsigned int v276;
  float v277;
  unsigned int *v278;
  unsigned int v279;
  unsigned int v280;
  float v281;
  unsigned int *v282;
  unsigned int v283;
  unsigned int v284;
  unsigned int v285;
  uint64_t v286;
  char v287;
  uint64_t v288;
  unsigned int v289;
  unsigned int v290;
  uint64_t v291;
  unint64_t v292;
  unsigned int v293;
  unsigned int v294;
  unsigned int v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  WebCore::RenderTableCell *v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  WebCore::RenderTableCell *v303;
  unsigned int v304;
  uint64_t v305;
  const WebCore::LayoutPoint *v306;
  unsigned int v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  WebCore::RenderTableCell *v312;
  unsigned int *v313;
  unsigned int v314;
  unsigned int *v315;
  unsigned int v316;
  unsigned int *v317;
  unsigned int v318;
  unsigned int *v319;
  unsigned int v320;
  void *v321;
  int v322;
  int v323;
  int v324;
  unsigned int v325;
  unsigned int v326;
  unsigned int v327;
  _QWORD *v328;
  uint64_t v329;
  BOOL hasImageInAnyLayer;
  void *v331;
  int v332;
  int v333;
  int v334;
  unsigned int v335;
  char v336;
  _QWORD *v337;
  uint64_t v338;
  void *v339;
  int v340;
  int v341;
  int v342;
  unsigned int v343;
  unsigned int v344;
  char v345;
  unsigned int v346;
  _QWORD *v347;
  uint64_t v348;
  void *v349;
  int v350;
  int v351;
  int v352;
  unsigned int v353;
  unsigned int v354;
  char v355;
  unsigned int v356;
  _QWORD *v357;
  uint64_t v358;
  unsigned int v359;
  int v360;
  int v361;
  int v362;
  uint64_t v363;
  int v364;
  WebCore::RenderTableSection *v365;
  WebCore::PaintInfo *v366;
  unsigned int *v367;
  unsigned int v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  unsigned int v372;
  unsigned int v373;
  unsigned int v374;
  uint64_t v375;
  uint64_t v376;
  unint64_t v377;
  int v378;
  WebCore::RenderTable *v379;
  void *v380;
  int v381;
  unsigned int v382;
  int v383;
  int v384;
  uint64_t v385;
  _DWORD *v386;
  WebCore::RenderTable *v387;
  int v388;
  int v389;
  signed int v390;
  WebCore::RenderTable *v391;
  void *v392;
  int v393;
  unsigned int v394;
  int v395;
  int v396;
  uint64_t v397;
  _DWORD *v398;
  WebCore::RenderTable *v399;
  void *v400;
  int v401;
  int v402;
  signed int v403;
  uint64_t v404;
  unint64_t v405;
  uint64_t v406;
  unint64_t v407;
  uint64_t v408;
  uint64_t v409;
  int v410;
  int v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  unint64_t v416;
  unint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  int v421;
  unint64_t v422;
  unint64_t v423;
  unint64_t v424;
  unsigned int v425;
  int i;
  uint64_t v427;
  WebCore::RenderTableCell *v429;
  uint64_t v430;
  uint64_t v431;
  unint64_t v432;
  unint64_t v433;
  unint64_t v434;
  WTF *v435;
  uint64_t v436;
  void *v437;
  WTF *v438;
  uint64_t v439;
  _QWORD *v440;
  WTF **v441;
  WTF *v442;
  WTF *v443;
  int32x2_t v444;
  uint64_t v445;
  uint64_t v446;
  void *v447;
  WTF *v448;
  void *v449;
  WTF *v450;
  BOOL isEmptyIgnoringNullReferences;
  uint64_t *v452;
  uint64_t v453;
  WTF *v454;
  void *v455;
  unsigned int v456;
  uint64_t *v457;
  uint64_t v458;
  const WebCore::RenderBox *v459;
  uint64_t v460;
  void *v461;
  WebCore::RenderTable *v462;
  uint64_t v463;
  uint64_t v464;
  int v465;
  int v466;
  int v467;
  int v468;
  unsigned int v469;
  int v470;
  unsigned int v471;
  int v472;
  int v473;
  unsigned int v474;
  int v475;
  unsigned int v476;
  int v477;
  int v478;
  uint64_t v479;
  int32x4_t v480;
  WebCore::RenderTableSection *v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  int v485;
  int v486;
  int v487;
  int v488;
  unsigned int v489;
  int v490;
  unsigned int v491;
  int v492;
  int v493;
  unsigned int v494;
  int v495;
  unsigned int v496;
  int v497;
  int v498;
  uint64_t v499;
  int32x4_t v500;
  int v501;
  int v502;
  int v503;
  int v504;
  unsigned int v505;
  int v506;
  unsigned int v507;
  int v508;
  int v509;
  unsigned int v510;
  int v511;
  unsigned int v512;
  int v513;
  int v514;
  uint64_t v515;
  int32x4_t v516;
  int v517;
  int v518;
  int v519;
  int v520;
  unsigned int v521;
  int v522;
  unsigned int v523;
  int v524;
  int v525;
  unsigned int v526;
  int v527;
  unsigned int v528;
  int v529;
  int v530;
  uint64_t v531;
  int32x4_t v532;
  uint64_t v533;
  const WebCore::CachedImageClient *v534;
  uint64_t v535;
  unsigned int v536;
  int v537;
  unsigned int v538;
  int v539;
  unsigned int v540;
  unsigned int v541;
  int v542;
  int v543;
  int v544;
  unsigned int v545;
  unsigned int v546;
  unsigned int v547;
  int v548;
  int v549;
  int v550;
  unsigned int v551;
  int v552;
  unsigned int v553;
  unsigned int v554;
  unsigned int v555;
  int v556;
  int v557;
  int v558;
  unsigned int v559;
  int v560;
  unsigned int v561;
  unsigned int v562;
  unsigned int v563;
  int v564;
  unsigned int *v565;
  unsigned int v566;
  unsigned int v567;
  unsigned int *v568;
  unsigned int v569;
  unsigned int v570;
  unsigned int *v571;
  unsigned int v572;
  unsigned int v573;
  unsigned int *v574;
  unsigned int v575;
  unsigned int v576;
  unsigned int v577;
  unsigned int v578;
  unsigned int v579;
  unsigned int v580;
  uint64_t v581;
  uint64_t v582;
  unsigned int v583;
  unsigned int v584;
  unsigned int v585;
  uint64_t v586;
  unsigned int v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  unsigned int v591;
  int v592;
  unsigned int v593;
  unsigned int v594;
  int v595;
  unsigned int v596;
  int v597;
  unsigned int v598;
  int v599;
  int v600;
  int v601;
  int v602;
  unsigned int v603;
  unsigned int v604;
  int v605;
  unsigned int v606;
  unsigned int v607;
  unsigned int v608;
  int v609;
  int v610;
  int v611;
  unsigned int v612;
  unsigned int *v613;
  unsigned int v614;
  unsigned int v615;
  unsigned int *v616;
  unsigned int v617;
  unsigned int v618;
  unsigned int *v619;
  unsigned int v620;
  unsigned int v621;
  unsigned int *v622;
  unsigned int v623;
  unsigned int v624;
  int v625;
  int v626;
  int v627;
  int v628;
  int v629;
  int v630;
  uint64_t v631;
  int v632;
  int v633;
  int v634;
  unsigned int v635;
  uint64_t v636;
  int v637;
  int v638;
  int v639;
  uint64_t v640;
  unsigned __int32 v641;
  unsigned __int32 v642;
  uint64_t v643;
  const WebCore::CachedImageClient *v644;
  unsigned __int32 v645;
  uint64_t v646;
  unsigned __int32 v647;
  unsigned __int32 v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  unsigned __int32 v652;
  unint64_t v653;
  unsigned int v654;
  unsigned int v655;
  unint64_t v656;
  unint64_t v657;
  unsigned int v658;
  unint64_t v659;
  unint64_t v660;
  unint64_t v661;
  unsigned int v662;
  unsigned int v663;
  uint64_t *v664;
  unint64_t v667;
  uint64_t v668;
  unint64_t v669;
  float v670;
  float v671;
  uint64_t v672;
  uint64_t v673;
  float32x4_t v674;
  uint64_t *v675;
  uint64_t *v676;

  v4 = *(_DWORD *)a2;
  v5 = *((_DWORD *)a2 + 1);
  v6 = *((_QWORD *)a2 + 1);
  v7 = *((_DWORD *)a3 + 1);
  if (*(_DWORD *)a3 == 0x80000000)
    v8 = 0x7FFFFFFF;
  else
    v8 = -*(_DWORD *)a3;
  if (v7 == 0x80000000)
    v9 = 0x7FFFFFFF;
  else
    v9 = -v7;
  v10 = __OFADD__(v4, v8);
  LODWORD(v11) = v4 + v8;
  v12 = (v4 >> 31) + 0x7FFFFFFF;
  if (v10)
    v11 = v12;
  else
    v11 = v11;
  v10 = __OFADD__(v5, v9);
  v13 = v5 + v9;
  v14 = (v5 >> 31) + 0x7FFFFFFF;
  if (v10)
    v15 = v14;
  else
    v15 = v13;
  v16 = v11 | ((unint64_t)v15 << 32);
  v17 = *((_DWORD *)this + 31);
  v18 = v17 >> 13;
  v19 = (unsigned __int16)v17 >> 13;
  if (v19 <= 5 && ((1 << v19) & 0x2A) != 0)
  {
    if ((*((_BYTE *)this + 21) & 0x10) != 0)
    {
      v582 = v15 << 32;
      v583 = *((_DWORD *)this + 40);
      v10 = __OFADD__((_DWORD)v11, (_DWORD)v6);
      v584 = v11 + v6;
      v585 = (v11 >> 31) + 0x7FFFFFFF;
      if (!v10)
        v585 = v584;
      v10 = __OFSUB__(v583, v585);
      LODWORD(v586) = v583 - v585;
      v587 = (v583 >> 31) + 0x7FFFFFFF;
      if (v10)
        v586 = v587;
      else
        v586 = v586;
      v16 = v582 | v586;
    }
    else
    {
      v577 = *((_DWORD *)this + 41);
      v10 = __OFADD__((_DWORD)v15, HIDWORD(v6));
      v578 = v15 + HIDWORD(v6);
      v579 = (v15 >> 31) + 0x7FFFFFFF;
      if (!v10)
        v579 = v578;
      v10 = __OFSUB__(v577, v579);
      v580 = v577 - v579;
      LODWORD(v581) = (v577 >> 31) + 0x7FFFFFFF;
      if (v10)
        v581 = v581;
      else
        v581 = v580;
      v16 = v11 | (v581 << 32);
    }
  }
  v20 = __ROR8__(v16, 32);
  v21 = (v18 & 6u) - 2 > 3;
  v22 = __ROR8__(v6, 32);
  if (v21)
    v23 = *((_QWORD *)a2 + 1);
  else
    v23 = v22;
  if (v21)
    v24 = v16;
  else
    v24 = v20;
  v25 = (WebCore::RenderTableSection *)*((_QWORD *)this + 4);
  if (v25)
  {
    v26 = *((_QWORD *)v25 + 1);
    if (v26)
    {
      v27 = *(unsigned __int8 *)(v26 + 46);
      if (v27 != 35 && v27 != 63)
      {
        __break(0xC471u);
        JUMPOUT(0x19644D79CLL);
      }
    }
  }
  else
  {
    v26 = 0;
  }
  if ((*((_BYTE *)this + 123) & 4) != 0)
  {
    v371 = *(unsigned int *)(v26 + 212);
    if (!(_DWORD)v371)
    {
      __break(0xC471u);
      JUMPOUT(0x19644E29CLL);
    }
    v372 = *(_DWORD *)(*(_QWORD *)(v26 + 200) + 4 * (v371 - 1));
    if (__OFADD__((_DWORD)v24, (_DWORD)v23))
      v373 = (v24 >> 31) + 0x7FFFFFFF;
    else
      v373 = v24 + v23;
    v10 = __OFSUB__(v372, v373);
    v374 = v372 - v373;
    LODWORD(v375) = (v372 >> 31) + 0x7FFFFFFF;
    if (v10)
      v375 = v375;
    else
      v375 = v374;
    v24 = v24 & 0xFFFFFFFF00000000 | v375;
  }
  if (*((_BYTE *)this + 280))
  {
    v376 = 0;
    LODWORD(v39) = *((_DWORD *)this + 53);
LABEL_655:
    v377 = WebCore::RenderTableSection::fullTableColumnSpan(v25);
    v73 = v377;
    v74 = v377 & 0xFFFFFFFF00000000;
    v40 = v376;
    goto LABEL_82;
  }
  v28 = *((_QWORD *)this + 27);
  v29 = *((unsigned int *)this + 57);
  v30 = v28 + 4 * v29;
  v31 = HIDWORD(v24);
  v32 = (_DWORD *)v30;
  if ((_DWORD)v29)
  {
    v33 = *((unsigned int *)this + 57);
    v32 = (_DWORD *)*((_QWORD *)this + 27);
    do
    {
      v34 = v33 >> 1;
      v35 = &v32[v33 >> 1];
      v37 = *v35;
      v36 = v35 + 1;
      v33 += ~(v33 >> 1);
      if (v37 > SHIDWORD(v24))
        v33 = v34;
      else
        v32 = v36;
    }
    while (v33);
  }
  v38 = ((unint64_t)v32 - v28) >> 2;
  if ((_DWORD)v38)
  {
    v218 = (v38 - 1);
    if (v218 >= v29)
    {
      __break(0xC471u);
      JUMPOUT(0x19644DFA8);
    }
    LODWORD(v39) = v38 - (*(_DWORD *)(v28 + 4 * v218) == HIDWORD(v24));
  }
  else
  {
    LODWORD(v39) = 0;
  }
  if ((_DWORD)v29 == (_DWORD)v39)
  {
    v40 = (v29 - 1);
    LODWORD(v39) = v29 - 1;
    goto LABEL_51;
  }
  if ((_DWORD)v39)
    v40 = (v39 - 1);
  else
    v40 = 0;
  if (v29 <= v39)
  {
    __break(0xC471u);
    JUMPOUT(0x19644DF0CLL);
  }
  v41 = v39;
  v42 = HIDWORD(v24) + HIDWORD(v23);
  if (__OFADD__(HIDWORD(v24), HIDWORD(v23)))
  {
LABEL_567:
    v42 = 0x7FFFFFFF;
    if (*(_DWORD *)(v28 + 4 * v41) >= (signed int)((v31 >> 31) + 0x7FFFFFFF))
      goto LABEL_51;
  }
  else if (*(_DWORD *)(v28 + 4 * v39) >= v42)
  {
    goto LABEL_51;
  }
  if (v29 != (int)v39)
  {
    v43 = (v30 - (v28 + 4 * (int)v39)) >> 2;
    v30 = v28 + 4 * (int)v39;
    do
    {
      v44 = v43 >> 1;
      v45 = (int *)(v30 + 4 * (v43 >> 1));
      v47 = *v45;
      v46 = v45 + 1;
      v43 += ~(v43 >> 1);
      if (v42 < v47)
        v43 = v44;
      else
        v30 = (uint64_t)v46;
    }
    while (v43);
  }
  v48 = (unint64_t)(v30 - v28) >> 2;
  if ((_DWORD)v29 == (_DWORD)v48)
    LODWORD(v39) = v29 - 1;
  else
    LODWORD(v39) = v48;
LABEL_51:
  v49 = v29 - 1;
  if (v29 - 1 <= v40)
  {
    if (!(_DWORD)v29)
    {
      __break(0xC471u);
      JUMPOUT(0x19644E2A4);
    }
    v378 = v40;
    v379 = (WebCore::RenderTable *)WebCore::RenderTableSection::table(this);
    v381 = WebCore::RenderTable::outerBorderAfter(v379, v380);
    v382 = *(_DWORD *)(v28 + 4 * v49);
    v10 = __OFADD__(v382, v381);
    v383 = v382 + v381;
    v384 = (v382 >> 31) + 0x7FFFFFFF;
    if (!v10)
      v384 = v383;
    v40 = v378 - (v384 >= (int)v31);
  }
  if (!(_DWORD)v39)
  {
    if (!*((_DWORD *)this + 57))
    {
      __break(0xC471u);
      JUMPOUT(0x19644E2ACLL);
    }
    v385 = v40;
    v386 = (_DWORD *)*((_QWORD *)this + 27);
    v387 = (WebCore::RenderTable *)WebCore::RenderTableSection::table(this);
    v388 = WebCore::RenderTable::outerBorderBefore(v387);
    v389 = (*v386 >> 31) + 0x7FFFFFFF;
    if (!__OFSUB__(*v386, v388))
      v389 = *v386 - v388;
    v390 = v31 + HIDWORD(v23);
    if (__OFADD__((_DWORD)v31, HIDWORD(v23)))
      v390 = (v31 >> 31) + 0x7FFFFFFF;
    LODWORD(v39) = v389 <= v390;
    v40 = v385;
  }
  v25 = (WebCore::RenderTableSection *)*((_QWORD *)this + 4);
  if (*((_BYTE *)this + 280))
  {
    v376 = v40;
    goto LABEL_655;
  }
  v50 = *((_QWORD *)v25 + 1);
  v51 = *(unsigned __int8 *)(v50 + 46);
  if (v51 != 35 && v51 != 63)
  {
    __break(0xC471u);
    JUMPOUT(0x19644D75CLL);
  }
  v52 = *(_QWORD *)(v50 + 200);
  v53 = *(unsigned int *)(v50 + 212);
  v54 = (_DWORD *)(v52 + 4 * v53);
  v55 = v54;
  if ((_DWORD)v53)
  {
    v56 = *(unsigned int *)(v50 + 212);
    v55 = *(_DWORD **)(v50 + 200);
    do
    {
      v57 = v56 >> 1;
      v58 = &v55[v56 >> 1];
      v60 = *v58;
      v59 = v58 + 1;
      v56 += ~(v56 >> 1);
      if (v60 > (int)v24)
        v56 = v57;
      else
        v55 = v59;
    }
    while (v56);
  }
  v61 = ((unint64_t)v55 - v52) >> 2;
  if ((_DWORD)v61)
  {
    v200 = (v61 - 1);
    if (v200 >= v53)
    {
      __break(0xC471u);
      JUMPOUT(0x19644DFA0);
    }
    v62 = v61 - (*(_DWORD *)(v52 + 4 * v200) == (_DWORD)v24);
  }
  else
  {
    v62 = 0;
  }
  if ((_DWORD)v53 == (_DWORD)v62)
  {
    v63 = v53 - 1;
    v62 = (v53 - 1);
  }
  else
  {
    v63 = v62 - 1;
    if (!(_DWORD)v62)
      v63 = 0;
    if (v53 <= v62)
    {
      __break(0xC471u);
      JUMPOUT(0x19644DF14);
    }
    v64 = v24 + v23;
    if (__OFADD__((_DWORD)v24, (_DWORD)v23))
    {
      v64 = 0x7FFFFFFF;
      if (*(_DWORD *)(v52 + 4 * v62) < (signed int)((v24 >> 31) + 0x7FFFFFFF))
        goto LABEL_70;
    }
    else if (*(_DWORD *)(v52 + 4 * v62) < v64)
    {
LABEL_70:
      if (v53 != (int)v62)
      {
        v65 = (uint64_t)(4 * v53 - 4 * (int)v62) >> 2;
        v54 = (_DWORD *)(v52 + 4 * (int)v62);
        do
        {
          v66 = v65 >> 1;
          v67 = &v54[v65 >> 1];
          v69 = *v67;
          v68 = v67 + 1;
          v65 += ~(v65 >> 1);
          if (v64 < v69)
            v65 = v66;
          else
            v54 = v68;
        }
        while (v65);
      }
      v70 = ((unint64_t)v54 - v52) >> 2;
      if ((_DWORD)v53 == (_DWORD)v70)
        v62 = (v53 - 1);
      else
        v62 = v70;
    }
  }
  v71 = v53 - 1;
  v72 = v63 | ((unint64_t)v62 << 32);
  v73 = v63;
  if (v53 - 1 <= v63)
  {
    v663 = v40;
    if (!(_DWORD)v53)
    {
      __break(0xC471u);
      JUMPOUT(0x19644E2B4);
    }
    v391 = (WebCore::RenderTable *)WebCore::RenderTableSection::table(this);
    v393 = WebCore::RenderTable::outerBorderEnd(v391, v392);
    v394 = *(_DWORD *)(v52 + 4 * v71);
    v10 = __OFADD__(v394, v393);
    v395 = v394 + v393;
    v396 = (v394 >> 31) + 0x7FFFFFFF;
    if (!v10)
      v396 = v395;
    if (v396 >= (int)v24)
      v73 = v72 - 1;
    else
      v73 = v72;
    v40 = v663;
  }
  if (HIDWORD(v72))
  {
    v74 = v62 << 32;
  }
  else
  {
    if (!*(_DWORD *)(v50 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x19644E2BCLL);
    }
    v397 = v40;
    v398 = *(_DWORD **)(v50 + 200);
    v399 = (WebCore::RenderTable *)WebCore::RenderTableSection::table(this);
    v401 = WebCore::RenderTable::outerBorderStart(v399, v400);
    v402 = (*v398 >> 31) + 0x7FFFFFFF;
    if (!__OFSUB__(*v398, v401))
      v402 = *v398 - v401;
    v403 = v24 + v23;
    if (__OFADD__((_DWORD)v24, (_DWORD)v23))
      v403 = (v24 >> 31) + 0x7FFFFFFF;
    v74 = (unint64_t)(v402 <= v403) << 32;
    v40 = v397;
  }
LABEL_82:
  v660 = HIDWORD(v74);
  if (v73 >= HIDWORD(v74))
    return;
  if (!*((_BYTE *)this + 281))
  {
    v75 = *((_QWORD *)this + 32);
    if (!v75
      || !*(_DWORD *)(v75 - 12)
      || (v404 = v40,
          WTF::WeakHashSet<WebCore::RenderLayerModelObject,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((uint64_t **)&v674, (uint64_t *)this + 32), WTF::WeakHashSet<WebCore::ContainerNode,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::end((uint64_t **)&v672, (uint64_t *)this + 32), v40 = v404, v674.i64[1] == v673))
    {
      if (*((_WORD *)a2 + 8) != 256)
      {
        if (v40 >= v39)
          return;
        v76 = v40;
        v649 = v39;
        v661 = v73;
        v657 = v40;
LABEL_89:
        if (v76 >= *((unsigned int *)this + 53))
        {
          __break(0xC471u);
          JUMPOUT(0x19644DEFCLL);
        }
        v77 = *(_QWORD *)(*((_QWORD *)this + 25) + 40 * v76 + 16);
        if (v77)
        {
          v78 = *(_QWORD *)(v77 + 144);
          if (!v78 || (*(_BYTE *)(v78 + 25) & 8) == 0)
          {
            v79 = *(_DWORD *)(v77 + 152);
            v80 = *(_DWORD *)(v77 + 156);
            v81 = *((_DWORD *)a3 + 1);
            v10 = __OFADD__(*(_DWORD *)a3, v79);
            LODWORD(v82) = *(_DWORD *)a3 + v79;
            v82 = v10 ? ((*(_DWORD *)a3 >> 31) + 0x7FFFFFFF) : v82;
            v10 = __OFADD__(v81, v80);
            LODWORD(v83) = v81 + v80;
            v83 = v10 ? (v81 >> 31) + 0x7FFFFFFF : v83;
            v84 = *((unsigned __int16 *)a2 + 8);
            if ((v84 == 64 || v84 == 16)
              && (*(_BYTE *)(*(_QWORD *)(v77 + 104) + 239) & 4) == 0
              && (*(_BYTE *)(v77 + 120) & 0x30) == 0)
            {
              v85 = v82 | (v83 << 32);
              v86 = *(_QWORD *)(v77 + 160);
              v672 = v85;
              v673 = v86;
              if (((*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 10) + 40))(*((_QWORD *)a2 + 10)) & 1) == 0)
              {
                if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v77 + 88) + 16) + 52) & 0xE) != 0
                  && WebCore::RenderStyle::outlineWidth((WebCore::RenderStyle *)(v77 + 80)) > 0.0)
                {
                  goto LABEL_388;
                }
                if ((*(_BYTE *)(v77 + 45) & 1) == 0)
                {
                  v87 = *(_QWORD *)(*(_QWORD *)(v77 + 24) + 8);
                  if (v87)
                  {
                    if ((*(_WORD *)(v87 + 28) & 8) == 0)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19644C404);
                    }
                    if ((*(_WORD *)(v87 + 30) & 1) != 0)
                    {
                      v216 = *(_QWORD *)(*(_QWORD *)(v87 + 40) + 8);
                      if (*(_BYTE *)(v216 + 3382)
                        || (WebCore::LocalFrameView::paintBehavior(*(WebCore::LocalFrameView **)(*(_QWORD *)(v216 + 1944)
                                                                                               + 248)) & 0x2000) != 0)
                      {
LABEL_388:
                        v217 = WebCore::BackgroundPainter::BackgroundPainter(&v674, v77, (uint64_t)a2);
                        WebCore::BorderPainter::paintOutline((uint64_t)v217, (const WebCore::LayoutRect *)&v672);
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v654 = v76 - 1;
        v88 = v661;
        while (1)
        {
          if (*((_BYTE *)this + 282))
            WebCore::RenderTableSection::recalcCells(this);
          v89 = *((unsigned int *)this + 53);
          if (v76 >= v89)
          {
            __break(0xC471u);
            JUMPOUT(0x19644DE60);
          }
          v90 = *((_QWORD *)this + 25) + 40 * v76;
          if (v88 >= *(unsigned int *)(v90 + 12))
          {
            __break(0xC471u);
            JUMPOUT(0x19644DE68);
          }
          v91 = *(_QWORD *)v90 + 32 * v88;
          v92 = *(unsigned int *)(v91 + 12);
          if (!(_DWORD)v92)
            goto LABEL_190;
          v31 = *(_QWORD *)(*(_QWORD *)v91 + 8 * v92 - 8);
          if (!v31)
            goto LABEL_190;
          if (v76 > v657)
          {
            if (*((_BYTE *)this + 282))
            {
              WebCore::RenderTableSection::recalcCells(this);
              LODWORD(v89) = *((_DWORD *)this + 53);
            }
            if (v89 <= v654)
            {
              __break(0xC471u);
              JUMPOUT(0x19644DEA4);
            }
            v93 = *((_QWORD *)this + 25) + 40 * v654;
            if (v88 >= *(unsigned int *)(v93 + 12))
            {
              __break(0xC471u);
              JUMPOUT(0x19644DEACLL);
            }
            v94 = *(_QWORD *)v93 + 32 * v88;
            v95 = *(unsigned int *)(v94 + 12);
            v96 = (_DWORD)v95 ? *(_QWORD *)(*(_QWORD *)v94 + 8 * v95 - 8) : 0;
            if (v96 == v31)
              goto LABEL_190;
          }
          if (v88 > v661)
          {
            if (*((_BYTE *)this + 282))
            {
              WebCore::RenderTableSection::recalcCells(this);
              LODWORD(v89) = *((_DWORD *)this + 53);
            }
            if (v76 >= v89)
            {
              __break(0xC471u);
              JUMPOUT(0x19644DEB4);
            }
            v97 = (v88 - 1);
            v98 = *((_QWORD *)this + 25) + 40 * v76;
            if (*(_DWORD *)(v98 + 12) <= v97)
            {
              __break(0xC471u);
              JUMPOUT(0x19644DEBCLL);
            }
            v99 = *(_QWORD *)v98 + 32 * v97;
            v100 = *(unsigned int *)(v99 + 12);
            v101 = (_DWORD)v100 ? *(_QWORD *)(*(_QWORD *)v99 + 8 * v100 - 8) : 0;
            if (v101 == v31)
              goto LABEL_190;
          }
          v102 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
          if (v102 > 5 || ((1 << v102) & 0x2A) == 0)
            break;
          v104 = *(_DWORD *)a3;
          if ((*((_BYTE *)this + 21) & 0x10) != 0)
          {
            v550 = *((_DWORD *)this + 40);
            v10 = __OFADD__(v104, v550);
            v551 = v104 + v550;
            if (v10)
              v551 = (v104 >> 31) + 0x7FFFFFFF;
            v552 = *(_DWORD *)(v31 + 160);
            v10 = __OFSUB__(v551, v552);
            v553 = v551 - v552;
            v554 = (v551 >> 31) + 0x7FFFFFFF;
            if (!v10)
              v554 = v553;
            v555 = *(_DWORD *)(v31 + 152);
            v556 = 2 * v555;
            v557 = v555 ^ (2 * v555);
            v558 = (v555 >> 31) + 0x7FFFFFFF;
            if (v557 >= 0)
              v558 = v556;
            v10 = __OFSUB__(v554, v558);
            v559 = v554 - v558;
            v560 = (v554 >> 31) + 0x7FFFFFFF;
            if (v10)
              v104 = v560;
            else
              v104 = v559;
            v103 = a3;
            goto LABEL_134;
          }
          v536 = *((_DWORD *)a3 + 1);
          v537 = *((_DWORD *)this + 41);
          v10 = __OFADD__(v536, v537);
          v538 = v536 + v537;
          if (v10)
            v538 = (v536 >> 31) + 0x7FFFFFFF;
          v539 = *(_DWORD *)(v31 + 164);
          v10 = __OFSUB__(v538, v539);
          v540 = v538 - v539;
          if (v10)
            v540 = (v538 >> 31) + 0x7FFFFFFF;
          v541 = *(_DWORD *)(v31 + 156);
          v542 = 2 * v541;
          v543 = v541 ^ (2 * v541);
          v544 = (v541 >> 31) + 0x7FFFFFFF;
          if (v543 >= 0)
            v544 = v542;
          v10 = __OFSUB__(v540, v544);
          v545 = v540 - v544;
          v546 = (v540 >> 31) + 0x7FFFFFFF;
          if (v10)
            v23 = v546;
          else
            v23 = v545;
LABEL_135:
          v105 = *(_QWORD *)(v31 + 32);
          if (v105)
            v24 = *(_QWORD *)(v105 + 8);
          else
            v24 = 0;
          if (*(_BYTE *)(v24 + 46) != 39)
          {
            __break(0xC471u);
            JUMPOUT(0x19644C134);
          }
          if (*((unsigned __int16 *)a2 + 8) > 1u)
            goto LABEL_139;
          v137 = *((_QWORD *)this + 4);
          if (v137)
          {
            v138 = *(unsigned __int8 **)(v137 + 8);
            if (v138)
            {
              v139 = v138[46];
              if (v139 != 35 && v139 != 63)
              {
                __break(0xC471u);
                JUMPOUT(0x19644D46CLL);
              }
            }
          }
          else
          {
            v138 = 0;
          }
          v652 = v104;
          if ((v138[328] & 4) != 0)
          {
            v369 = WebCore::RenderTable::slowColElement((WebCore::RenderTable *)v138, (void *)(*(_DWORD *)(v31 + 248) & 0x1FFFFFF), 0, 0);
            v140 = v369;
            if (v369)
            {
              v370 = *(_QWORD *)(v369 + 32);
              v28 = v370 ? *(_QWORD *)(v370 + 8) : 0;
              if (*(_BYTE *)(v28 + 46) == 38)
                goto LABEL_199;
            }
          }
          else
          {
            v140 = 0;
          }
          v28 = 0;
LABEL_199:
          v141 = *((_QWORD *)a2 + 3);
          if (v141)
            v142 = v141 == v31;
          else
            v142 = 1;
          if (v28)
          {
            if (v142 && (*(_BYTE *)(*(_QWORD *)(v31 + 104) + 239) & 4) == 0)
            {
              v143 = *(_DWORD *)(v31 + 120);
              if ((v143 & 0x30) == 0)
              {
                v144 = *(_QWORD *)(v31 + 32);
                if (!v144)
                  goto LABEL_362;
                v145 = *(_QWORD *)(v144 + 8);
                if (!v145)
                  goto LABEL_362;
                if (*(_BYTE *)(v145 + 46) != 39)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19644C424);
                }
                v146 = *(_QWORD *)(v145 + 32);
                if (!v146)
                  goto LABEL_362;
                v147 = *(_QWORD *)(v146 + 8);
                if (!v147)
                  goto LABEL_362;
                if (*(_BYTE *)(v147 + 46) != 40)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19644C484);
                }
                v148 = *(_QWORD *)(v147 + 32);
                if (v148)
                {
                  v39 = *(_QWORD *)(v148 + 8);
                  if (v39)
                  {
                    v149 = *(unsigned __int8 *)(v39 + 46);
                    if (v149 != 35 && v149 != 63)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19644D528);
                    }
                  }
                }
                else
                {
LABEL_362:
                  v39 = 0;
                }
                if ((v143 & 1) == 0
                  || (*(_DWORD *)(v39 + 124) & 4) != 0
                  || (v482 = *(unsigned int *)(v31 + 64), v482 | ((unint64_t)*(unsigned __int8 *)(v31 + 68) << 32))
                  && *(_QWORD *)((v482 | ((unint64_t)*(unsigned __int8 *)(v31 + 68) << 32)) + 8))
                {
                  v150 = *(_QWORD *)(*(_QWORD *)(v28 + 88) + 16);
                  v151 = *(WebCore::FillLayer **)(v150 + 8);
                  v674.i64[0] = (uint64_t)&v668;
                  v674.i64[1] = (uint64_t)&v668;
                  v675 = &v668;
                  v676 = &v668;
                  v152 = *(unsigned int *)(v150 + 24);
                  if ((_DWORD)v152 == -1)
                    goto LABEL_566;
                  v669 = (unint64_t)&v674;
                  ((void (*)(uint64_t *__return_ptr, unint64_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v152])(&v672, &v669, v150 + 16);
                  if ((_DWORD)v673 == 1)
                  {
                    v197 = *(_QWORD *)(*(_QWORD *)(v28 + 112) + 328);
                    v667 = v197;
                    if ((v197 & 0x8000000000000) != 0)
                    {
                      v315 = (unsigned int *)(v197 & 0xFFFFFFFFFFFFLL);
                      do
                        v316 = __ldaxr(v315);
                      while (__stlxr(v316 + 1, v315));
                    }
                  }
                  else
                  {
                    v668 = *(_QWORD *)(v28 + 112) + 328;
                    v674.i64[0] = (uint64_t)&v668;
                    v674.i64[1] = (uint64_t)&v668;
                    v675 = &v668;
                    v676 = &v668;
                    if ((_DWORD)v673 == -1)
                      goto LABEL_566;
                    v669 = (unint64_t)&v674;
                    ((void (*)(unint64_t *__return_ptr, unint64_t *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix[v673])(&v667, &v669, &v672);
                  }
                  if ((_DWORD)v673 != -1)
                    ((void (*)(float32x4_t *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v673])(&v674, &v672);
                  v154 = v28 + 80;
                  if ((*(_DWORD *)(v28 + 124) & 0xC00) != 0x800
                    || (*(_BYTE *)(*(_QWORD *)(v28 + 104) + 239) & 2) != 0)
                  {
                    v669 = v667;
                  }
                  else
                  {
                    WebCore::RenderStyle::colorResolvingCurrentColor((_QWORD *)(v28 + 80), 61, 1, (WebCore::Color *)&v674);
                    if (v674.i64[0] == 0x1104000000000000)
                    {
                      v669 = 0;
                      if (v667)
                      {
                        v669 = v667;
                        v667 = 0;
                      }
                    }
                    else
                    {
                      if ((v667 & 0x8000000000000) != 0)
                        v273 = *(float *)((v667 & 0xFFFFFFFFFFFFLL) + 0x10);
                      else
                        v273 = (float)v667 / 255.0;
                      WebCore::Color::colorWithAlpha((uint64_t)&v674, v273, (uint64_t *)&v669);
                      if ((v674.i64[0] & 0x8000000000000) != 0)
                      {
                        v274 = (unsigned int *)(v674.i64[0] & 0xFFFFFFFFFFFFLL);
                        do
                        {
                          v275 = __ldaxr(v274);
                          v276 = v275 - 1;
                        }
                        while (__stlxr(v276, v274));
                        if (!v276)
                        {
                          atomic_store(1u, v274);
                          WTF::fastFree((WTF *)v274, v153);
                        }
                      }
                    }
                    v154 = v28 + 80;
                    if ((v667 & 0x8000000000000) != 0)
                    {
                      v260 = (unsigned int *)(v667 & 0xFFFFFFFFFFFFLL);
                      do
                      {
                        v261 = __ldaxr(v260);
                        v262 = v261 - 1;
                      }
                      while (__stlxr(v262, v260));
                      v154 = v28 + 80;
                      if (!v262)
                      {
                        atomic_store(1u, v260);
                        WTF::fastFree((WTF *)v260, v153);
                        v154 = v28 + 80;
                      }
                    }
                  }
                  if (*((_QWORD *)v151 + 1))
                  {
                    v646 = v154;
                    hasImageInAnyLayer = WebCore::FillLayer::hasImageInAnyLayer(v151);
                    v154 = v646;
                    if (!hasImageInAnyLayer)
                      goto LABEL_229;
                  }
                  else
                  {
                    v155 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
                    if (!*((_QWORD *)v151 + 2))
                      v155 = 0;
                    if (!v155)
                    {
LABEL_229:
                      if ((v669 & 0x8000000000000) != 0)
                      {
                        if (*(float *)((v669 & 0xFFFFFFFFFFFFLL) + 0x10) <= 0.0)
                        {
LABEL_231:
                          if ((v669 & 0x8000000000000) != 0)
                          {
                            v568 = (unsigned int *)(v669 & 0xFFFFFFFFFFFFLL);
                            do
                            {
                              v569 = __ldaxr(v568);
                              v570 = v569 - 1;
                            }
                            while (__stlxr(v570, v568));
                            if (!v570)
                            {
                              atomic_store(1u, v568);
                              WTF::fastFree((WTF *)v568, v153);
                            }
                          }
                          v141 = *((_QWORD *)a2 + 3);
                          goto LABEL_233;
                        }
                      }
                      else if (!(_BYTE)v669)
                      {
                        goto LABEL_231;
                      }
                    }
                  }
                  WebCore::RenderStyle::colorByApplyingColorFilter(v154, (const WebCore::Color *)&v669, (unint64_t *)&v674);
                  WebCore::Color::operator=(&v669, &v674);
                  if ((v674.i64[0] & 0x8000000000000) != 0)
                  {
                    v616 = (unsigned int *)(v674.i64[0] & 0xFFFFFFFFFFFFLL);
                    do
                    {
                      v617 = __ldaxr(v616);
                      v618 = v617 - 1;
                    }
                    while (__stlxr(v618, v616));
                    if (!v618)
                    {
                      atomic_store(1u, v616);
                      WTF::fastFree((WTF *)v616, v331);
                    }
                  }
                  if (v28 == v31)
                  {
                    v647 = v652;
                    v641 = v23;
                    if ((*(_BYTE *)(v31 + 21) & 0x80) != 0)
                      goto LABEL_832;
                  }
                  else
                  {
                    v333 = *(_DWORD *)(v31 + 152);
                    v332 = *(_DWORD *)(v31 + 156);
                    v10 = __OFADD__(v652, v333);
                    v334 = v652 + v333;
                    if (v10)
                      v334 = (v652 >> 31) + 0x7FFFFFFF;
                    v647 = v334;
                    v10 = __OFADD__((_DWORD)v23, v332);
                    v335 = v23 + v332;
                    if (v10)
                      v335 = (v23 >> 31) + 0x7FFFFFFF;
                    v641 = v335;
                    if ((*(_BYTE *)(v28 + 21) & 0x80) != 0)
                    {
                      v533 = *(_QWORD *)(v31 + 32);
                      if (v533)
                        v533 = *(_QWORD *)(v533 + 8);
                      if (v533 == v28)
                      {
LABEL_832:
                        v631 = *((_QWORD *)a2 + 10);
                        if ((*(_BYTE *)(v39 + 124) & 4) != 0)
                        {
                          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v631 + 96))(v631, 1);
                          v485 = WebCore::RenderTableCell::borderLeft((WebCore::RenderTableCell *)v31);
                          v486 = v647 + v485;
                          if (__OFADD__(v647, v485))
                            v486 = (v647 >> 31) + 0x7FFFFFFF;
                          v638 = v486;
                          v487 = WebCore::RenderTableCell::borderTop((WebCore::RenderTableCell *)v31);
                          v488 = v641 + v487;
                          if (__OFADD__(v641, v487))
                            v488 = (v641 >> 31) + 0x7FFFFFFF;
                          v628 = v488;
                          v489 = *(_DWORD *)(v31 + 160);
                          v490 = WebCore::RenderTableCell::borderLeft((WebCore::RenderTableCell *)v31);
                          if (__OFSUB__(v489, v490))
                            v491 = (v489 >> 31) + 0x7FFFFFFF;
                          else
                            v491 = v489 - v490;
                          v492 = WebCore::RenderTableCell::borderRight((WebCore::RenderTableCell *)v31);
                          v493 = v491 - v492;
                          if (__OFSUB__(v491, v492))
                            v493 = (v491 >> 31) + 0x7FFFFFFF;
                          v625 = v493;
                          v494 = *(_DWORD *)(v31 + 164);
                          v495 = WebCore::RenderTableCell::borderTop((WebCore::RenderTableCell *)v31);
                          if (__OFSUB__(v494, v495))
                            v496 = (v494 >> 31) + 0x7FFFFFFF;
                          else
                            v496 = v494 - v495;
                          v497 = WebCore::RenderTableCell::borderBottom((WebCore::RenderTableCell *)v31);
                          v498 = v496 - v497;
                          if (__OFSUB__(v496, v497))
                            v498 = (v496 >> 31) + 0x7FFFFFFF;
                          v499 = *((_QWORD *)a2 + 10);
                          v500.i64[0] = __PAIR64__(v628, v638);
                          v500.i64[1] = __PAIR64__(v498, v625);
                          v674 = vmulq_f32(vcvtq_f32_s32(v500), (float32x4_t)vdupq_n_s32(0x3C800000u));
                          (*(void (**)(uint64_t, float32x4_t *))(*(_QWORD *)v499 + 456))(v499, &v674);
                          v336 = 0;
                          goto LABEL_597;
                        }
LABEL_596:
                        v336 = 1;
LABEL_597:
                        v635 = WebCore::Document::compositeOperatorForBackgroundColor(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v31 + 24) + 8) + 40)+ 8), (const WebCore::Color *)&v669, (const WebCore::RenderObject *)v31);
                        v337 = WebCore::BackgroundPainter::BackgroundPainter(&v674, v31, (uint64_t)a2);
                        v338 = *(_QWORD *)(v31 + 160);
                        LODWORD(v672) = v647;
                        HIDWORD(v672) = v641;
                        v673 = v338;
                        WebCore::BackgroundPainter::paintFillLayers((uint64_t)v337, (const WebCore::CachedImageClient *)&v669, (uint64_t)v151, &v672, 0, v635, (const WebCore::CachedImageClient *)v28);
                        if ((v336 & 1) == 0)
                          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v631 + 104))(v631, 1);
                        goto LABEL_231;
                      }
                    }
                  }
                  v631 = *((_QWORD *)a2 + 10);
                  goto LABEL_596;
                }
              }
            }
          }
LABEL_233:
          v156 = v141 == v31;
          if (!v141)
            v156 = 1;
          if (v140)
          {
            if (v156 && (*(_BYTE *)(*(_QWORD *)(v31 + 104) + 239) & 4) == 0)
            {
              v157 = *(_DWORD *)(v31 + 120);
              if ((v157 & 0x30) == 0)
              {
                v158 = *(_QWORD *)(v31 + 32);
                if (!v158)
                  goto LABEL_363;
                v159 = *(_QWORD *)(v158 + 8);
                if (!v159)
                  goto LABEL_363;
                if (*(_BYTE *)(v159 + 46) != 39)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19644C444);
                }
                v160 = *(_QWORD *)(v159 + 32);
                if (!v160)
                  goto LABEL_363;
                v161 = *(_QWORD *)(v160 + 8);
                if (!v161)
                  goto LABEL_363;
                if (*(_BYTE *)(v161 + 46) != 40)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19644C4A4);
                }
                v162 = *(_QWORD *)(v161 + 32);
                if (v162)
                {
                  v39 = *(_QWORD *)(v162 + 8);
                  if (v39)
                  {
                    v163 = *(unsigned __int8 *)(v39 + 46);
                    if (v163 != 35 && v163 != 63)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19644D508);
                    }
                  }
                }
                else
                {
LABEL_363:
                  v39 = 0;
                }
                if ((v157 & 1) == 0
                  || (*(_DWORD *)(v39 + 124) & 4) != 0
                  || (v483 = *(unsigned int *)(v31 + 64), v483 | ((unint64_t)*(unsigned __int8 *)(v31 + 68) << 32))
                  && *(_QWORD *)((v483 | ((unint64_t)*(unsigned __int8 *)(v31 + 68) << 32)) + 8))
                {
                  v164 = *(_QWORD *)(*(_QWORD *)(v140 + 88) + 16);
                  v28 = *(_QWORD *)(v164 + 8);
                  v674.i64[0] = (uint64_t)&v668;
                  v674.i64[1] = (uint64_t)&v668;
                  v675 = &v668;
                  v676 = &v668;
                  v165 = *(unsigned int *)(v164 + 24);
                  if ((_DWORD)v165 == -1)
                    goto LABEL_566;
                  v669 = (unint64_t)&v674;
                  ((void (*)(uint64_t *__return_ptr, unint64_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v165])(&v672, &v669, v164 + 16);
                  if ((_DWORD)v673 == 1)
                  {
                    v198 = *(_QWORD *)(*(_QWORD *)(v140 + 112) + 328);
                    v667 = v198;
                    if ((v198 & 0x8000000000000) != 0)
                    {
                      v317 = (unsigned int *)(v198 & 0xFFFFFFFFFFFFLL);
                      do
                        v318 = __ldaxr(v317);
                      while (__stlxr(v318 + 1, v317));
                    }
                  }
                  else
                  {
                    v668 = *(_QWORD *)(v140 + 112) + 328;
                    v674.i64[0] = (uint64_t)&v668;
                    v674.i64[1] = (uint64_t)&v668;
                    v675 = &v668;
                    v676 = &v668;
                    if ((_DWORD)v673 == -1)
                      goto LABEL_566;
                    v669 = (unint64_t)&v674;
                    ((void (*)(unint64_t *__return_ptr, unint64_t *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix[v673])(&v667, &v669, &v672);
                  }
                  if ((_DWORD)v673 != -1)
                    ((void (*)(float32x4_t *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v673])(&v674, &v672);
                  v644 = (const WebCore::CachedImageClient *)v140;
                  if ((*(_DWORD *)(v140 + 124) & 0xC00) != 0x800
                    || (*(_BYTE *)(*(_QWORD *)(v140 + 104) + 239) & 2) != 0)
                  {
                    v669 = v667;
                  }
                  else
                  {
                    WebCore::RenderStyle::colorResolvingCurrentColor((_QWORD *)(v140 + 80), 61, 1, (WebCore::Color *)&v674);
                    if (v674.i64[0] == 0x1104000000000000)
                    {
                      v669 = 0;
                      if (v667)
                      {
                        v669 = v667;
                        v667 = 0;
                      }
                    }
                    else
                    {
                      if ((v667 & 0x8000000000000) != 0)
                        v277 = *(float *)((v667 & 0xFFFFFFFFFFFFLL) + 0x10);
                      else
                        v277 = (float)v667 / 255.0;
                      WebCore::Color::colorWithAlpha((uint64_t)&v674, v277, (uint64_t *)&v669);
                      if ((v674.i64[0] & 0x8000000000000) != 0)
                      {
                        v278 = (unsigned int *)(v674.i64[0] & 0xFFFFFFFFFFFFLL);
                        do
                        {
                          v279 = __ldaxr(v278);
                          v280 = v279 - 1;
                        }
                        while (__stlxr(v280, v278));
                        if (!v280)
                        {
                          atomic_store(1u, v278);
                          WTF::fastFree((WTF *)v278, v166);
                        }
                      }
                    }
                    if ((v667 & 0x8000000000000) != 0)
                    {
                      v263 = (unsigned int *)(v667 & 0xFFFFFFFFFFFFLL);
                      do
                      {
                        v264 = __ldaxr(v263);
                        v265 = v264 - 1;
                      }
                      while (__stlxr(v265, v263));
                      if (!v265)
                      {
                        atomic_store(1u, v263);
                        WTF::fastFree((WTF *)v263, v166);
                      }
                    }
                  }
                  if (*(_QWORD *)(v28 + 8))
                  {
                    if (!WebCore::FillLayer::hasImageInAnyLayer((WebCore::FillLayer *)v28))
                      goto LABEL_263;
                  }
                  else
                  {
                    v167 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
                    if (!*(_QWORD *)(v28 + 16))
                      v167 = 0;
                    if (!v167)
                    {
LABEL_263:
                      if ((v669 & 0x8000000000000) != 0)
                      {
                        if (*(float *)((v669 & 0xFFFFFFFFFFFFLL) + 0x10) <= 0.0)
                        {
LABEL_265:
                          if ((v669 & 0x8000000000000) != 0)
                          {
                            v571 = (unsigned int *)(v669 & 0xFFFFFFFFFFFFLL);
                            do
                            {
                              v572 = __ldaxr(v571);
                              v573 = v572 - 1;
                            }
                            while (__stlxr(v573, v571));
                            if (!v573)
                            {
                              atomic_store(1u, v571);
                              WTF::fastFree((WTF *)v571, v166);
                            }
                          }
                          v141 = *((_QWORD *)a2 + 3);
                          goto LABEL_267;
                        }
                      }
                      else if (!(_BYTE)v669)
                      {
                        goto LABEL_265;
                      }
                    }
                  }
                  WebCore::RenderStyle::colorByApplyingColorFilter(v140 + 80, (const WebCore::Color *)&v669, (unint64_t *)&v674);
                  WebCore::Color::operator=(&v669, &v674);
                  if ((v674.i64[0] & 0x8000000000000) != 0)
                  {
                    v619 = (unsigned int *)(v674.i64[0] & 0xFFFFFFFFFFFFLL);
                    do
                    {
                      v620 = __ldaxr(v619);
                      v621 = v620 - 1;
                    }
                    while (__stlxr(v621, v619));
                    if (!v621)
                    {
                      atomic_store(1u, v619);
                      WTF::fastFree((WTF *)v619, v339);
                    }
                  }
                  if (v140 == v31)
                  {
                    v642 = v652;
                    v344 = v23;
                    if ((*(_BYTE *)(v31 + 21) & 0x80) != 0)
                      goto LABEL_853;
                  }
                  else
                  {
                    v341 = *(_DWORD *)(v31 + 152);
                    v340 = *(_DWORD *)(v31 + 156);
                    v10 = __OFADD__(v652, v341);
                    v342 = v652 + v341;
                    if (v10)
                      v342 = (v652 >> 31) + 0x7FFFFFFF;
                    v642 = v342;
                    v10 = __OFADD__((_DWORD)v23, v340);
                    v343 = v23 + v340;
                    if (v10)
                      v344 = (v23 >> 31) + 0x7FFFFFFF;
                    else
                      v344 = v343;
                    if ((*((_BYTE *)v644 + 21) & 0x80) != 0)
                    {
                      v534 = *(const WebCore::CachedImageClient **)(v31 + 32);
                      if (v534)
                        v534 = (const WebCore::CachedImageClient *)*((_QWORD *)v534 + 1);
                      if (v534 == v644)
                      {
LABEL_853:
                        v636 = *((_QWORD *)a2 + 10);
                        if ((*(_BYTE *)(v39 + 124) & 4) != 0)
                        {
                          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v636 + 96))(v636, 1);
                          v501 = WebCore::RenderTableCell::borderLeft((WebCore::RenderTableCell *)v31);
                          v502 = v642 + v501;
                          if (__OFADD__(v642, v501))
                            v502 = (v642 >> 31) + 0x7FFFFFFF;
                          v633 = v502;
                          v503 = WebCore::RenderTableCell::borderTop((WebCore::RenderTableCell *)v31);
                          v504 = v344 + v503;
                          if (__OFADD__(v344, v503))
                            v504 = (v344 >> 31) + 0x7FFFFFFF;
                          v629 = v504;
                          v505 = *(_DWORD *)(v31 + 160);
                          v506 = WebCore::RenderTableCell::borderLeft((WebCore::RenderTableCell *)v31);
                          if (__OFSUB__(v505, v506))
                            v507 = (v505 >> 31) + 0x7FFFFFFF;
                          else
                            v507 = v505 - v506;
                          v508 = WebCore::RenderTableCell::borderRight((WebCore::RenderTableCell *)v31);
                          v509 = v507 - v508;
                          if (__OFSUB__(v507, v508))
                            v509 = (v507 >> 31) + 0x7FFFFFFF;
                          v626 = v509;
                          v510 = *(_DWORD *)(v31 + 164);
                          v511 = WebCore::RenderTableCell::borderTop((WebCore::RenderTableCell *)v31);
                          if (__OFSUB__(v510, v511))
                            v512 = (v510 >> 31) + 0x7FFFFFFF;
                          else
                            v512 = v510 - v511;
                          v513 = WebCore::RenderTableCell::borderBottom((WebCore::RenderTableCell *)v31);
                          v514 = v512 - v513;
                          if (__OFSUB__(v512, v513))
                            v514 = (v512 >> 31) + 0x7FFFFFFF;
                          v515 = *((_QWORD *)a2 + 10);
                          v516.i64[0] = __PAIR64__(v629, v633);
                          v516.i64[1] = __PAIR64__(v514, v626);
                          v674 = vmulq_f32(vcvtq_f32_s32(v516), (float32x4_t)vdupq_n_s32(0x3C800000u));
                          (*(void (**)(uint64_t, float32x4_t *))(*(_QWORD *)v515 + 456))(v515, &v674);
                          v345 = 0;
                          goto LABEL_611;
                        }
LABEL_610:
                        v345 = 1;
LABEL_611:
                        v346 = WebCore::Document::compositeOperatorForBackgroundColor(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v31 + 24) + 8) + 40)+ 8), (const WebCore::Color *)&v669, (const WebCore::RenderObject *)v31);
                        v347 = WebCore::BackgroundPainter::BackgroundPainter(&v674, v31, (uint64_t)a2);
                        v348 = *(_QWORD *)(v31 + 160);
                        LODWORD(v672) = v642;
                        HIDWORD(v672) = v344;
                        v673 = v348;
                        WebCore::BackgroundPainter::paintFillLayers((uint64_t)v347, (const WebCore::CachedImageClient *)&v669, v28, &v672, 0, v346, v644);
                        if ((v345 & 1) == 0)
                          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v636 + 104))(v636, 1);
                        goto LABEL_265;
                      }
                    }
                  }
                  v636 = *((_QWORD *)a2 + 10);
                  goto LABEL_610;
                }
              }
            }
          }
LABEL_267:
          if (v141)
            v168 = v141 == v31;
          else
            v168 = 1;
          v104 = v652;
          if (v168 && (*(_BYTE *)(*(_QWORD *)(v31 + 104) + 239) & 4) == 0)
          {
            v169 = *(_DWORD *)(v31 + 120);
            if ((v169 & 0x30) == 0)
            {
              v170 = *(_QWORD *)(v31 + 32);
              if (!v170)
                goto LABEL_361;
              v171 = *(_QWORD *)(v170 + 8);
              if (!v171)
                goto LABEL_361;
              if (*(_BYTE *)(v171 + 46) != 39)
              {
                __break(0xC471u);
                JUMPOUT(0x19644C250);
              }
              v172 = *(_QWORD *)(v171 + 32);
              if (!v172)
                goto LABEL_361;
              v173 = *(_QWORD *)(v172 + 8);
              if (!v173)
                goto LABEL_361;
              if (*(_BYTE *)(v173 + 46) != 40)
              {
                __break(0xC471u);
                JUMPOUT(0x19644C270);
              }
              v174 = *(_QWORD *)(v173 + 32);
              if (v174)
              {
                v175 = *(_QWORD *)(v174 + 8);
                if (v175)
                {
                  v176 = *(unsigned __int8 *)(v175 + 46);
                  if (v176 != 35 && v176 != 63)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19644D48CLL);
                  }
                }
              }
              else
              {
LABEL_361:
                v175 = 0;
              }
              if ((v169 & 1) == 0
                || (*(_DWORD *)(v175 + 124) & 4) != 0
                || (v464 = *(unsigned int *)(v31 + 64), v464 | ((unint64_t)*(unsigned __int8 *)(v31 + 68) << 32))
                && *(_QWORD *)((v464 | ((unint64_t)*(unsigned __int8 *)(v31 + 68) << 32)) + 8))
              {
                v177 = *(_QWORD *)(*((_QWORD *)this + 11) + 16);
                v39 = *(_QWORD *)(v177 + 8);
                v674.i64[0] = (uint64_t)&v668;
                v674.i64[1] = (uint64_t)&v668;
                v675 = &v668;
                v676 = &v668;
                v178 = *(unsigned int *)(v177 + 24);
                if ((_DWORD)v178 == -1)
                  goto LABEL_566;
                v669 = (unint64_t)&v674;
                ((void (*)(uint64_t *__return_ptr, unint64_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v178])(&v672, &v669, v177 + 16);
                if ((_DWORD)v673 == 1)
                {
                  v196 = *(_QWORD *)(*((_QWORD *)this + 14) + 328);
                  v667 = v196;
                  if ((v196 & 0x8000000000000) != 0)
                  {
                    v313 = (unsigned int *)(v196 & 0xFFFFFFFFFFFFLL);
                    do
                      v314 = __ldaxr(v313);
                    while (__stlxr(v314 + 1, v313));
                  }
                }
                else
                {
                  v668 = *((_QWORD *)this + 14) + 328;
                  v674.i64[0] = (uint64_t)&v668;
                  v674.i64[1] = (uint64_t)&v668;
                  v675 = &v668;
                  v676 = &v668;
                  if ((_DWORD)v673 == -1)
                    goto LABEL_566;
                  v669 = (unint64_t)&v674;
                  ((void (*)(unint64_t *__return_ptr, unint64_t *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix[v673])(&v667, &v669, &v672);
                }
                if ((_DWORD)v673 != -1)
                  ((void (*)(float32x4_t *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v673])(&v674, &v672);
                if ((*((_DWORD *)this + 31) & 0xC00) != 0x800 || (*(_BYTE *)(*((_QWORD *)this + 13) + 239) & 2) != 0)
                {
                  v669 = v667;
                }
                else
                {
                  WebCore::RenderStyle::colorResolvingCurrentColor((_QWORD *)this + 10, 61, 1, (WebCore::Color *)&v674);
                  if (v674.i64[0] == 0x1104000000000000)
                  {
                    v669 = 0;
                    if (v667)
                    {
                      v669 = v667;
                      v667 = 0;
                    }
                  }
                  else
                  {
                    if ((v667 & 0x8000000000000) != 0)
                      v269 = *(float *)((v667 & 0xFFFFFFFFFFFFLL) + 0x10);
                    else
                      v269 = (float)v667 / 255.0;
                    WebCore::Color::colorWithAlpha((uint64_t)&v674, v269, (uint64_t *)&v669);
                    if ((v674.i64[0] & 0x8000000000000) != 0)
                    {
                      v270 = (unsigned int *)(v674.i64[0] & 0xFFFFFFFFFFFFLL);
                      do
                      {
                        v271 = __ldaxr(v270);
                        v272 = v271 - 1;
                      }
                      while (__stlxr(v272, v270));
                      v104 = v652;
                      if (!v272)
                      {
                        atomic_store(1u, v270);
                        WTF::fastFree((WTF *)v270, v179);
                      }
                    }
                  }
                  if ((v667 & 0x8000000000000) != 0)
                  {
                    v257 = (unsigned int *)(v667 & 0xFFFFFFFFFFFFLL);
                    do
                    {
                      v258 = __ldaxr(v257);
                      v259 = v258 - 1;
                    }
                    while (__stlxr(v259, v257));
                    v104 = v652;
                    if (!v259)
                    {
                      atomic_store(1u, v257);
                      WTF::fastFree((WTF *)v257, v179);
                    }
                  }
                }
                if (*(_QWORD *)(v39 + 8))
                {
                  if (!WebCore::FillLayer::hasImageInAnyLayer((WebCore::FillLayer *)v39))
                    goto LABEL_298;
                }
                else
                {
                  v180 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
                  if (!*(_QWORD *)(v39 + 16))
                    v180 = 0;
                  if (!v180)
                  {
LABEL_298:
                    if ((v669 & 0x8000000000000) != 0)
                    {
                      if (*(float *)((v669 & 0xFFFFFFFFFFFFLL) + 0x10) <= 0.0)
                        goto LABEL_300;
                    }
                    else if (!(_BYTE)v669)
                    {
LABEL_300:
                      if ((v669 & 0x8000000000000) != 0)
                      {
                        v565 = (unsigned int *)(v669 & 0xFFFFFFFFFFFFLL);
                        do
                        {
                          v566 = __ldaxr(v565);
                          v567 = v566 - 1;
                        }
                        while (__stlxr(v567, v565));
                        v104 = v652;
                        if (!v567)
                        {
                          atomic_store(1u, v565);
                          WTF::fastFree((WTF *)v565, v179);
                        }
                      }
                      goto LABEL_301;
                    }
                  }
                }
                WebCore::RenderStyle::colorByApplyingColorFilter((uint64_t)this + 80, (const WebCore::Color *)&v669, (unint64_t *)&v674);
                WebCore::Color::operator=(&v669, &v674);
                if ((v674.i64[0] & 0x8000000000000) != 0)
                {
                  v613 = (unsigned int *)(v674.i64[0] & 0xFFFFFFFFFFFFLL);
                  do
                  {
                    v614 = __ldaxr(v613);
                    v615 = v614 - 1;
                  }
                  while (__stlxr(v615, v613));
                  if (!v615)
                  {
                    atomic_store(1u, v613);
                    WTF::fastFree((WTF *)v613, v321);
                  }
                }
                if ((WebCore::RenderTableSection *)v31 == this)
                {
                  v645 = v652;
                  v326 = v23;
                  if ((*((_BYTE *)this + 21) & 0x80) != 0)
                    goto LABEL_796;
                }
                else
                {
                  v323 = *(_DWORD *)(v31 + 152);
                  v322 = *(_DWORD *)(v31 + 156);
                  v10 = __OFADD__(v652, v323);
                  v324 = v652 + v323;
                  if (v10)
                    v324 = (v652 >> 31) + 0x7FFFFFFF;
                  v645 = v324;
                  v10 = __OFADD__((_DWORD)v23, v322);
                  v325 = v23 + v322;
                  if (v10)
                    v326 = (v23 >> 31) + 0x7FFFFFFF;
                  else
                    v326 = v325;
                  if ((*((_BYTE *)this + 21) & 0x80) != 0)
                  {
                    v481 = *(WebCore::RenderTableSection **)(v31 + 32);
                    if (v481)
                      v481 = (WebCore::RenderTableSection *)*((_QWORD *)v481 + 1);
                    if (v481 == this)
                    {
LABEL_796:
                      v640 = *((_QWORD *)a2 + 10);
                      if ((*(_BYTE *)(v175 + 124) & 4) != 0)
                      {
                        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v640 + 96))(v640, 1);
                        v465 = WebCore::RenderTableCell::borderLeft((WebCore::RenderTableCell *)v31);
                        v466 = v645 + v465;
                        if (__OFADD__(v645, v465))
                          v466 = (v645 >> 31) + 0x7FFFFFFF;
                        v637 = v466;
                        v467 = WebCore::RenderTableCell::borderTop((WebCore::RenderTableCell *)v31);
                        v468 = v326 + v467;
                        if (__OFADD__(v326, v467))
                          v468 = (v326 >> 31) + 0x7FFFFFFF;
                        v632 = v468;
                        v469 = *(_DWORD *)(v31 + 160);
                        v470 = WebCore::RenderTableCell::borderLeft((WebCore::RenderTableCell *)v31);
                        if (__OFSUB__(v469, v470))
                          v471 = (v469 >> 31) + 0x7FFFFFFF;
                        else
                          v471 = v469 - v470;
                        v472 = WebCore::RenderTableCell::borderRight((WebCore::RenderTableCell *)v31);
                        v473 = v471 - v472;
                        if (__OFSUB__(v471, v472))
                          v473 = (v471 >> 31) + 0x7FFFFFFF;
                        v627 = v473;
                        v474 = *(_DWORD *)(v31 + 164);
                        v475 = WebCore::RenderTableCell::borderTop((WebCore::RenderTableCell *)v31);
                        if (__OFSUB__(v474, v475))
                          v476 = (v474 >> 31) + 0x7FFFFFFF;
                        else
                          v476 = v474 - v475;
                        v477 = WebCore::RenderTableCell::borderBottom((WebCore::RenderTableCell *)v31);
                        v478 = v476 - v477;
                        if (__OFSUB__(v476, v477))
                          v478 = (v476 >> 31) + 0x7FFFFFFF;
                        v479 = *((_QWORD *)a2 + 10);
                        v480.i64[0] = __PAIR64__(v632, v637);
                        v480.i64[1] = __PAIR64__(v478, v627);
                        v674 = vmulq_f32(vcvtq_f32_s32(v480), (float32x4_t)vdupq_n_s32(0x3C800000u));
                        (*(void (**)(uint64_t, float32x4_t *))(*(_QWORD *)v479 + 456))(v479, &v674);
                        v28 = 0;
                        goto LABEL_583;
                      }
LABEL_582:
                      v28 = 1;
LABEL_583:
                      v327 = WebCore::Document::compositeOperatorForBackgroundColor(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v31 + 24) + 8) + 40) + 8), (const WebCore::Color *)&v669, (const WebCore::RenderObject *)v31);
                      v328 = WebCore::BackgroundPainter::BackgroundPainter(&v674, v31, (uint64_t)a2);
                      v329 = *(_QWORD *)(v31 + 160);
                      LODWORD(v672) = v645;
                      HIDWORD(v672) = v326;
                      v673 = v329;
                      WebCore::BackgroundPainter::paintFillLayers((uint64_t)v328, (const WebCore::CachedImageClient *)&v669, v39, &v672, 0, v327, this);
                      v104 = v652;
                      if ((v28 & 1) == 0)
                        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v640 + 104))(v640, 1);
                      goto LABEL_300;
                    }
                  }
                }
                v640 = *((_QWORD *)a2 + 10);
                goto LABEL_582;
              }
            }
          }
LABEL_301:
          v181 = *(_QWORD *)(v24 + 144);
          if (!v181 || (*(_BYTE *)(v181 + 25) & 8) == 0)
          {
            v182 = *((_QWORD *)a2 + 3);
            v183 = !v182 || v182 == v31;
            if (v24)
            {
              if (v183 && (*(_BYTE *)(*(_QWORD *)(v31 + 104) + 239) & 4) == 0)
              {
                v184 = *(_DWORD *)(v31 + 120);
                if ((v184 & 0x30) == 0)
                {
                  v185 = *(_QWORD *)(v31 + 32);
                  if (!v185)
                    goto LABEL_364;
                  v186 = *(_QWORD *)(v185 + 8);
                  if (!v186)
                    goto LABEL_364;
                  if (*(_BYTE *)(v186 + 46) != 39)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19644C464);
                  }
                  v187 = *(_QWORD *)(v186 + 32);
                  if (!v187)
                    goto LABEL_364;
                  v188 = *(_QWORD *)(v187 + 8);
                  if (!v188)
                    goto LABEL_364;
                  if (*(_BYTE *)(v188 + 46) != 40)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19644C4C4);
                  }
                  v189 = *(_QWORD *)(v188 + 32);
                  if (v189)
                  {
                    v190 = *(_QWORD *)(v189 + 8);
                    if (v190)
                    {
                      v191 = *(unsigned __int8 *)(v190 + 46);
                      if (v191 != 35 && v191 != 63)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19644D548);
                      }
                    }
                  }
                  else
                  {
LABEL_364:
                    v190 = 0;
                  }
                  if ((v184 & 1) == 0
                    || (*(_DWORD *)(v190 + 124) & 4) != 0
                    || (v484 = *(unsigned int *)(v31 + 64),
                        v484 | ((unint64_t)*(unsigned __int8 *)(v31 + 68) << 32))
                    && *(_QWORD *)((v484 | ((unint64_t)*(unsigned __int8 *)(v31 + 68) << 32)) + 8))
                  {
                    v192 = *(_QWORD *)(*(_QWORD *)(v24 + 88) + 16);
                    v39 = *(_QWORD *)(v192 + 8);
                    v674.i64[0] = (uint64_t)&v668;
                    v674.i64[1] = (uint64_t)&v668;
                    v675 = &v668;
                    v676 = &v668;
                    v193 = *(unsigned int *)(v192 + 24);
                    if ((_DWORD)v193 == -1)
                      goto LABEL_566;
                    v669 = (unint64_t)&v674;
                    ((void (*)(uint64_t *__return_ptr, unint64_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v193])(&v672, &v669, v192 + 16);
                    if ((_DWORD)v673 == 1)
                    {
                      v199 = *(_QWORD *)(*(_QWORD *)(v24 + 112) + 328);
                      v667 = v199;
                      if ((v199 & 0x8000000000000) != 0)
                      {
                        v319 = (unsigned int *)(v199 & 0xFFFFFFFFFFFFLL);
                        do
                          v320 = __ldaxr(v319);
                        while (__stlxr(v320 + 1, v319));
                      }
                    }
                    else
                    {
                      v668 = *(_QWORD *)(v24 + 112) + 328;
                      v674.i64[0] = (uint64_t)&v668;
                      v674.i64[1] = (uint64_t)&v668;
                      v675 = &v668;
                      v676 = &v668;
                      if ((_DWORD)v673 == -1)
                      {
LABEL_566:
                        std::__throw_bad_variant_access[abi:sn180100]();
                        goto LABEL_567;
                      }
                      v669 = (unint64_t)&v674;
                      ((void (*)(unint64_t *__return_ptr, unint64_t *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix[v673])(&v667, &v669, &v672);
                    }
                    if ((_DWORD)v673 != -1)
                      ((void (*)(float32x4_t *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v673])(&v674, &v672);
                    if ((*(_DWORD *)(v24 + 124) & 0xC00) != 0x800
                      || (*(_BYTE *)(*(_QWORD *)(v24 + 104) + 239) & 2) != 0)
                    {
                      v669 = v667;
                    }
                    else
                    {
                      WebCore::RenderStyle::colorResolvingCurrentColor((_QWORD *)(v24 + 80), 61, 1, (WebCore::Color *)&v674);
                      if (v674.i64[0] == 0x1104000000000000)
                      {
                        v669 = 0;
                        if (v667)
                        {
                          v669 = v667;
                          v667 = 0;
                        }
                      }
                      else
                      {
                        if ((v667 & 0x8000000000000) != 0)
                          v281 = *(float *)((v667 & 0xFFFFFFFFFFFFLL) + 0x10);
                        else
                          v281 = (float)v667 / 255.0;
                        WebCore::Color::colorWithAlpha((uint64_t)&v674, v281, (uint64_t *)&v669);
                        if ((v674.i64[0] & 0x8000000000000) != 0)
                        {
                          v282 = (unsigned int *)(v674.i64[0] & 0xFFFFFFFFFFFFLL);
                          do
                          {
                            v283 = __ldaxr(v282);
                            v284 = v283 - 1;
                          }
                          while (__stlxr(v284, v282));
                          v104 = v652;
                          if (!v284)
                          {
                            atomic_store(1u, v282);
                            WTF::fastFree((WTF *)v282, v194);
                          }
                        }
                      }
                      if ((v667 & 0x8000000000000) != 0)
                      {
                        v266 = (unsigned int *)(v667 & 0xFFFFFFFFFFFFLL);
                        do
                        {
                          v267 = __ldaxr(v266);
                          v268 = v267 - 1;
                        }
                        while (__stlxr(v268, v266));
                        v104 = v652;
                        if (!v268)
                        {
                          atomic_store(1u, v266);
                          WTF::fastFree((WTF *)v266, v194);
                        }
                      }
                    }
                    if (*(_QWORD *)(v39 + 8))
                    {
                      if (!WebCore::FillLayer::hasImageInAnyLayer((WebCore::FillLayer *)v39))
                        goto LABEL_332;
                    }
                    else
                    {
                      v195 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
                      if (!*(_QWORD *)(v39 + 16))
                        v195 = 0;
                      if (!v195)
                      {
LABEL_332:
                        if ((v669 & 0x8000000000000) != 0)
                        {
                          if (*(float *)((v669 & 0xFFFFFFFFFFFFLL) + 0x10) <= 0.0)
                            goto LABEL_334;
                        }
                        else if (!(_BYTE)v669)
                        {
LABEL_334:
                          if ((v669 & 0x8000000000000) != 0)
                          {
                            v574 = (unsigned int *)(v669 & 0xFFFFFFFFFFFFLL);
                            do
                            {
                              v575 = __ldaxr(v574);
                              v576 = v575 - 1;
                            }
                            while (__stlxr(v576, v574));
                            v104 = v652;
                            if (!v576)
                            {
                              atomic_store(1u, v574);
                              WTF::fastFree((WTF *)v574, v194);
                            }
                          }
                          goto LABEL_139;
                        }
                      }
                    }
                    WebCore::RenderStyle::colorByApplyingColorFilter(v24 + 80, (const WebCore::Color *)&v669, (unint64_t *)&v674);
                    WebCore::Color::operator=(&v669, &v674);
                    if ((v674.i64[0] & 0x8000000000000) != 0)
                    {
                      v622 = (unsigned int *)(v674.i64[0] & 0xFFFFFFFFFFFFLL);
                      do
                      {
                        v623 = __ldaxr(v622);
                        v624 = v623 - 1;
                      }
                      while (__stlxr(v624, v622));
                      if (!v624)
                      {
                        atomic_store(1u, v622);
                        WTF::fastFree((WTF *)v622, v349);
                      }
                    }
                    if (v24 == v31)
                    {
                      v648 = v652;
                      v354 = v23;
                      if ((*(_BYTE *)(v31 + 21) & 0x80) != 0)
                        goto LABEL_874;
                    }
                    else
                    {
                      v351 = *(_DWORD *)(v31 + 152);
                      v350 = *(_DWORD *)(v31 + 156);
                      v10 = __OFADD__(v652, v351);
                      v352 = v652 + v351;
                      if (v10)
                        v352 = (v652 >> 31) + 0x7FFFFFFF;
                      v648 = v352;
                      v10 = __OFADD__((_DWORD)v23, v350);
                      v353 = v23 + v350;
                      if (v10)
                        v354 = (v23 >> 31) + 0x7FFFFFFF;
                      else
                        v354 = v353;
                      if ((*(_BYTE *)(v24 + 21) & 0x80) != 0)
                      {
                        v535 = *(_QWORD *)(v31 + 32);
                        if (v535)
                          v535 = *(_QWORD *)(v535 + 8);
                        if (v535 == v24)
                        {
LABEL_874:
                          v643 = *((_QWORD *)a2 + 10);
                          if ((*(_BYTE *)(v190 + 124) & 4) != 0)
                          {
                            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v643 + 96))(v643, 1);
                            v517 = WebCore::RenderTableCell::borderLeft((WebCore::RenderTableCell *)v31);
                            v518 = v648 + v517;
                            if (__OFADD__(v648, v517))
                              v518 = (v648 >> 31) + 0x7FFFFFFF;
                            v639 = v518;
                            v519 = WebCore::RenderTableCell::borderTop((WebCore::RenderTableCell *)v31);
                            v520 = v354 + v519;
                            if (__OFADD__(v354, v519))
                              v520 = (v354 >> 31) + 0x7FFFFFFF;
                            v634 = v520;
                            v521 = *(_DWORD *)(v31 + 160);
                            v522 = WebCore::RenderTableCell::borderLeft((WebCore::RenderTableCell *)v31);
                            if (__OFSUB__(v521, v522))
                              v523 = (v521 >> 31) + 0x7FFFFFFF;
                            else
                              v523 = v521 - v522;
                            v524 = WebCore::RenderTableCell::borderRight((WebCore::RenderTableCell *)v31);
                            v525 = v523 - v524;
                            if (__OFSUB__(v523, v524))
                              v525 = (v523 >> 31) + 0x7FFFFFFF;
                            v630 = v525;
                            v526 = *(_DWORD *)(v31 + 164);
                            v527 = WebCore::RenderTableCell::borderTop((WebCore::RenderTableCell *)v31);
                            if (__OFSUB__(v526, v527))
                              v528 = (v526 >> 31) + 0x7FFFFFFF;
                            else
                              v528 = v526 - v527;
                            v529 = WebCore::RenderTableCell::borderBottom((WebCore::RenderTableCell *)v31);
                            v530 = v528 - v529;
                            if (__OFSUB__(v528, v529))
                              v530 = (v528 >> 31) + 0x7FFFFFFF;
                            v531 = *((_QWORD *)a2 + 10);
                            v532.i64[0] = __PAIR64__(v634, v639);
                            v532.i64[1] = __PAIR64__(v530, v630);
                            v674 = vmulq_f32(vcvtq_f32_s32(v532), (float32x4_t)vdupq_n_s32(0x3C800000u));
                            (*(void (**)(uint64_t, float32x4_t *))(*(_QWORD *)v531 + 456))(v531, &v674);
                            v355 = 0;
                            goto LABEL_625;
                          }
LABEL_624:
                          v355 = 1;
LABEL_625:
                          v356 = WebCore::Document::compositeOperatorForBackgroundColor(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v31 + 24) + 8) + 40)+ 8), (const WebCore::Color *)&v669, (const WebCore::RenderObject *)v31);
                          v357 = WebCore::BackgroundPainter::BackgroundPainter(&v674, v31, (uint64_t)a2);
                          v358 = *(_QWORD *)(v31 + 160);
                          LODWORD(v672) = v648;
                          HIDWORD(v672) = v354;
                          v673 = v358;
                          WebCore::BackgroundPainter::paintFillLayers((uint64_t)v357, (const WebCore::CachedImageClient *)&v669, v39, &v672, 0, v356, (const WebCore::CachedImageClient *)v24);
                          v104 = v652;
                          if ((v355 & 1) == 0)
                            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v643 + 104))(v643, 1);
                          goto LABEL_334;
                        }
                      }
                    }
                    v643 = *((_QWORD *)a2 + 10);
                    goto LABEL_624;
                  }
                }
              }
            }
          }
LABEL_139:
          v106 = *(_QWORD *)(v31 + 144);
          if (v106 && (*(_BYTE *)(v106 + 25) & 8) != 0)
            goto LABEL_190;
          v107 = *(_QWORD *)(v24 + 144);
          if (v107)
          {
            if ((*(_BYTE *)(v107 + 25) & 8) != 0)
              goto LABEL_190;
          }
          v109 = *(_DWORD *)(v31 + 152);
          v108 = *(_DWORD *)(v31 + 156);
          v10 = __OFADD__(v104, v109);
          v110 = v104 + v109;
          v111 = v10 ? (v104 >> 31) + 0x7FFFFFFF : v110;
          v10 = __OFADD__((_DWORD)v23, v108);
          v112 = v23 + v108;
          v113 = v10 ? (v23 >> 31) + 0x7FFFFFFF : v112;
          v668 = v111 | (v113 << 32);
          v114 = *((unsigned __int16 *)a2 + 8);
          if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v31 + 24) + 8) + 40) + 8) + 1272) != *(_QWORD *)(*(_QWORD *)(v31 + 24) + 8))
          {
            v115 = *(_QWORD *)a2;
            v116 = *((_QWORD *)a2 + 1);
            if ((*((_BYTE *)a2 + 21) & 0x10) == 0
              || (*(_BYTE *)(v31 + 21) & 0x80) == 0
              || (v117 = *(_QWORD *)(v106 + 264)) == 0
              || !*(_BYTE *)(v117 + 79)
              || !*(_QWORD *)(*(_QWORD *)(v117 + 96) + 256))
            {
              v118 = *(_QWORD *)(v31 + 192);
              if (v118)
              {
                v119 = *(_QWORD *)(v118 + 20);
                v120 = (int *)(v118 + 28);
              }
              else
              {
                v119 = 0;
                v120 = (int *)(v31 + 160);
              }
              v122 = *v120;
              v121 = v120[1];
              v123 = HIDWORD(v119);
              v124 = (unsigned __int16)*(_DWORD *)(v31 + 124) >> 13;
              if (v124 <= 5 && ((1 << v124) & 0x2A) != 0)
              {
                if ((*(_BYTE *)(v31 + 21) & 0x10) != 0)
                {
                  v561 = *(_DWORD *)(v31 + 160);
                  v10 = __OFADD__((_DWORD)v119, v122);
                  v562 = v119 + v122;
                  v563 = (v119 >> 31) + 0x7FFFFFFF;
                  if (!v10)
                    v563 = v562;
                  v10 = __OFSUB__(v561, v563);
                  LODWORD(v119) = v561 - v563;
                  v564 = (v561 >> 31) + 0x7FFFFFFF;
                  if (v10)
                    LODWORD(v119) = v564;
                }
                else
                {
                  v547 = *(_DWORD *)(v31 + 164);
                  v548 = (HIDWORD(v119) >> 31) + 0x7FFFFFFF;
                  if (!__OFADD__(HIDWORD(v119), v121))
                    v548 = HIDWORD(v119) + v121;
                  v10 = __OFSUB__(v547, v548);
                  LODWORD(v123) = v547 - v548;
                  v549 = (v547 >> 31) + 0x7FFFFFFF;
                  if (v10)
                    LODWORD(v123) = v549;
                }
              }
              v10 = __OFADD__((_DWORD)v119, (_DWORD)v111);
              v125 = v119 + v111;
              v126 = (v119 >> 31) + 0x7FFFFFFF;
              if (v10)
                v125 = v126;
              v10 = __OFADD__((_DWORD)v123, (_DWORD)v113);
              v127 = v123 + v113;
              if (v10)
                v127 = (v123 >> 31) + 0x7FFFFFFF;
              if (v122 < 1)
                goto LABEL_190;
              if (v121 < 1)
                goto LABEL_190;
              if ((int)v116 < 1)
                goto LABEL_190;
              v128 = HIDWORD(v116);
              if (SHIDWORD(v116) < 1)
                goto LABEL_190;
              v10 = __OFADD__((_DWORD)v115, (_DWORD)v116);
              v129 = v115 + v116;
              if (v10)
                v129 = (v115 >> 31) + 0x7FFFFFFF;
              if ((int)v125 >= v129)
                goto LABEL_190;
              v130 = v125 + v122;
              if (__OFADD__(v125, v122))
                v130 = (v125 >> 31) + 0x7FFFFFFF;
              if (v130 <= (int)v115)
                goto LABEL_190;
              v131 = HIDWORD(v115);
              v132 = v131 + v128;
              if (__OFADD__((_DWORD)v131, (_DWORD)v128))
                v132 = (v131 >> 31) + 0x7FFFFFFF;
              if ((int)v127 >= v132)
                goto LABEL_190;
              v10 = __OFADD__(v127, v121);
              v133 = v127 + v121;
              if (v10)
                v133 = (v127 >> 31) + 0x7FFFFFFF;
              if (v133 <= (int)v131)
                goto LABEL_190;
            }
          }
          if (*((unsigned __int16 *)a2 + 8) <= 0x3Fu)
          {
            if (!*((_WORD *)a2 + 8))
              goto LABEL_188;
LABEL_184:
            v134 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 1432))(v31);
            goto LABEL_185;
          }
          if (v114 != 4096)
          {
            if (v114 == 64 || v114 == 1024)
              goto LABEL_188;
            goto LABEL_184;
          }
          v134 = 0;
LABEL_185:
          v135 = (*(_BYTE *)(v31 + 22) & 1) != 0 && (*(_BYTE *)(*(_QWORD *)(v31 + 144) + 25) & 8) == 0;
          if ((v134 | v135) != 1)
          {
LABEL_188:
            (*(void (**)(uint64_t, WebCore::PaintInfo *, uint64_t *))(*(_QWORD *)v31 + 1448))(v31, a2, &v668);
            goto LABEL_189;
          }
          v201 = *((unsigned __int16 *)a2 + 8);
          if (v201 == 16)
          {
            v251 = 32;
            v252 = a2;
LABEL_437:
            *((_WORD *)v252 + 8) = v251;
            goto LABEL_369;
          }
          if (v201 == 1)
          {
            v252 = a2;
            *((_WORD *)a2 + 8) = 0;
            (*(void (**)(uint64_t, WebCore::PaintInfo *, uint64_t *))(*(_QWORD *)v31 + 1448))(v31, a2, &v668);
            v251 = 2;
            goto LABEL_437;
          }
LABEL_369:
          v202 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v31 + 24) + 8) + 40) + 8) + 528);
          v203 = 1.0;
          if (v202)
          {
            v204 = *(_QWORD *)(v202 + 8);
            if (v204)
            {
              v205 = *(_QWORD *)(v204 + 24);
              if (v205)
              {
                v206 = *(float **)(v205 + 8);
                if (v206)
                {
                  v207 = (*(_DWORD *)v206)++;
                  v203 = v206[91];
                  if (v207)
                  {
                    *(_DWORD *)v206 = v207;
                  }
                  else
                  {
                    WebCore::Page::~Page((uint64_t)v206);
                    WTF::fastFree(v253, v254);
                  }
                }
              }
            }
          }
          if (v134)
          {
            v209 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v31 + 1440))(v31, &v668);
            v208 = a2;
          }
          else
          {
            v208 = a2;
            v209 = (*(uint64_t (**)(uint64_t, uint64_t *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v31 + 1416))(v31, &v668, 0, 0, *((unsigned __int16 *)a2 + 8));
          }
          v674.i64[0] = v209;
          v674.i64[1] = v210;
          LODWORD(v669) = WebCore::snapRectToDevicePixels((int *)&v674, v203);
          HIDWORD(v669) = v211;
          v670 = v212;
          v671 = v213;
          (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v208 + 10) + 96))(*((_QWORD *)v208 + 10), 1);
          if (WebCore::RenderStyle::hasBorderRadius((WebCore::RenderStyle *)(v31 + 80)))
          {
            v255 = *((_QWORD *)v208 + 10);
            v256 = *(_QWORD *)(v31 + 160);
            v672 = v668;
            v673 = v256;
            WebCore::RenderStyle::getRoundedInnerBorderFor((WebCore::RenderStyle *)(v31 + 80), (const WebCore::LayoutRect *)&v672, 1, 1, (uint64_t)&v674);
            WebCore::RoundedRect::pixelSnappedRoundedRectForPainting((WebCore::RoundedRect *)&v674, v203, (uint64_t)&v672);
            (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v255 + 464))(v255, &v672);
          }
          (*(void (**)(_QWORD, unint64_t *))(**((_QWORD **)v208 + 10) + 456))(*((_QWORD *)v208 + 10), &v669);
          v214 = *((unsigned __int16 *)v208 + 8);
          if (v214 == 4096 || v214 == 0x2000)
          {
            v234 = floorf(*(float *)&v669);
            if (v234 < 2147500000.0 && v234 > -2147500000.0
              || (v235 = 2147500000.0, v234 < 2147500000.0) && (v235 = -2147500000.0, v234 > -2147500000.0))
            {
              v235 = (float)(int)v234;
            }
            v236 = floorf(*((float *)&v669 + 1));
            if (v236 < 2147500000.0 && v236 > -2147500000.0
              || (v237 = 2147500000.0, v236 < 2147500000.0) && (v237 = -2147500000.0, v236 > -2147500000.0))
            {
              v237 = (float)(int)v236;
            }
            v238 = ceilf(*(float *)&v669 + v670);
            if (v238 < 2147500000.0 && v238 > -2147500000.0
              || (v239 = 2147500000.0, v238 < 2147500000.0) && (v239 = -2147500000.0, v238 > -2147500000.0))
            {
              v239 = (float)(int)v238;
            }
            v240 = (WebCore::RegionContext *)*((_QWORD *)a2 + 9);
            v241 = ceilf(*((float *)&v669 + 1) + v671);
            if (v241 < 2147500000.0 && v241 > -2147500000.0
              || (v242 = 2147500000.0, v241 < 2147500000.0) && (v242 = -2147500000.0, v241 > -2147500000.0))
            {
              v242 = (float)(int)v241;
            }
            if (v235 >= 2147500000.0 || v235 <= -2147500000.0)
            {
              if (v235 >= 2147500000.0)
              {
                v243 = 0x7FFFFFFF;
              }
              else
              {
                if (v235 > -2147500000.0)
                  goto LABEL_423;
                v243 = 0x80000000;
              }
            }
            else
            {
LABEL_423:
              v243 = (int)v235;
            }
            if (v237 >= 2147500000.0 || v237 <= -2147500000.0)
            {
              if (v237 >= 2147500000.0)
              {
                v244 = 0x7FFFFFFF00000000;
              }
              else
              {
                if (v237 > -2147500000.0)
                  goto LABEL_426;
                v244 = 0x8000000000000000;
              }
            }
            else
            {
LABEL_426:
              v244 = (unint64_t)(int)v237 << 32;
            }
            v245 = v239 - v235;
            if (v245 >= 2147500000.0 || v245 <= -2147500000.0)
            {
              if (v245 >= 2147500000.0)
              {
                v246 = 0x7FFFFFFF;
              }
              else
              {
                if (v245 > -2147500000.0)
                  goto LABEL_429;
                v246 = 0x80000000;
              }
            }
            else
            {
LABEL_429:
              v246 = (int)v245;
            }
            v247 = v242 - v237;
            if (v247 >= 2147500000.0 || v247 <= -2147500000.0)
            {
              if (v247 >= 2147500000.0)
              {
                v248 = 0x7FFFFFFF00000000;
              }
              else
              {
                if (v247 > -2147500000.0)
                  goto LABEL_432;
                v248 = 0x8000000000000000;
              }
            }
            else
            {
LABEL_432:
              v248 = (unint64_t)(int)v247 << 32;
            }
            v674.i64[0] = v244 | v243;
            v674.i64[1] = v248 | v246;
            WebCore::RegionContext::pushClip(v240, (const WebCore::IntRect *)&v674);
          }
          (*(void (**)(uint64_t, WebCore::PaintInfo *, uint64_t *))(*(_QWORD *)v31 + 1448))(v31, a2, &v668);
          v215 = *((unsigned __int16 *)a2 + 8);
          if (v215 == 4096 || v215 == 0x2000)
          {
            v249 = *((_QWORD *)a2 + 9);
            v250 = *(_DWORD *)(v249 + 44);
            if (v250)
              *(_DWORD *)(v249 + 44) = v250 - 1;
          }
          (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 10) + 104))(*((_QWORD *)a2 + 10), 1);
          if (v114 == 16)
          {
            *((_WORD *)a2 + 8) = 64;
            (*(void (**)(uint64_t))(*(_QWORD *)v31 + 1448))(v31);
          }
          else if (v114 != 1)
          {
            goto LABEL_189;
          }
          *((_WORD *)a2 + 8) = v114;
LABEL_189:
          if (v114 <= 1 && (*(_BYTE *)(v31 + 22) & 1) != 0)
          {
            v219 = *(_QWORD *)(v31 + 144);
            if (v219)
            {
              v220 = *(_QWORD *)(v219 + 264);
              if (v220)
              {
                if ((*(_BYTE *)(*(_QWORD *)(v31 + 104) + 239) & 4) == 0 && (*(_BYTE *)(v31 + 120) & 0x30) == 0)
                {
                  v221 = *((_QWORD *)a2 + 3);
                  if ((!v221 || v221 == v31) && (*((_BYTE *)a2 + 20) & 0x40) == 0)
                  {
                    v222 = (WebCore::GraphicsContext *)*((_QWORD *)a2 + 10);
                    LODWORD(v672) = ((int)(v668 - (v136 & 0xFFFFFFC0) + 32) >> 6) + (int)v668 / 64;
                    HIDWORD(v672) = ((int)(HIDWORD(v668) - (v136 & 0xFFFFFFC0) + 32) >> 6) + SHIDWORD(v668) / 64;
                    v223 = HIDWORD(*(_QWORD *)a2);
                    if ((int)*(_QWORD *)a2 >= 0)
                      v224 = *(_QWORD *)a2;
                    else
                      v224 = *(_QWORD *)a2 + 63;
                    v225 = *(_QWORD *)a2 - (v224 & 0xFFFFFFC0);
                    if ((int)v223 >= 0)
                      v226 = HIDWORD(*(_QWORD *)a2);
                    else
                      v226 = v223 + 63;
                    v227 = *((_DWORD *)a2 + 2);
                    v10 = __OFADD__(v225, v227);
                    v228 = v225 + v227;
                    if (v10)
                      v228 = (v225 >> 31) + 0x7FFFFFFF;
                    v229 = v223 - (v226 & 0xFFFFFFC0);
                    v230 = *((_DWORD *)a2 + 3);
                    v10 = __OFADD__(v229, v230);
                    v231 = v229 + v230;
                    if (v10)
                      v231 = (v229 >> 31) + 0x7FFFFFFF;
                    v232 = v229 + 32;
                    v233 = v225 + 32;
                    v674.i64[0] = ((v224 >> 6) + (v233 >> 6)) | ((unint64_t)((v226 >> 6) + (v232 >> 6)) << 32);
                    v674.i64[1] = (v228 / 64 - (v233 >> 6) + ((int)(v228 - (v226 & 0xFFFFFFC0) + 32) >> 6)) | ((unint64_t)(v231 / 64 - (v232 >> 6) + ((int)(v231 - (v233 & 0xFFFFFFC0) + 32) >> 6)) << 32);
                    WebCore::RenderLayerScrollableArea::paintOverflowControls(v220, v222, (int32x2_t *)&v672, (const WebCore::IntRect *)&v674, 0);
                  }
                }
              }
            }
          }
LABEL_190:
          if (++v88 == v660)
          {
            if (++v76 == v649)
              return;
            goto LABEL_89;
          }
        }
        v103 = a3;
        v104 = *(_DWORD *)a3;
LABEL_134:
        v23 = *((unsigned int *)v103 + 1);
        goto LABEL_135;
      }
      if ((_DWORD)v40)
        v285 = v40 - 1;
      else
        v285 = 0;
      if (v39 <= v285)
        return;
      v286 = v39;
      v655 = v285;
LABEL_521:
      v287 = 0;
      v288 = v286 - 1;
      v289 = v286 - 1;
      v650 = v286;
      v290 = v286 - 2;
      v291 = 32 * (v660 - 1);
      v292 = v660;
      v293 = v660;
      v662 = v286 - 1;
      v658 = v286 - 2;
      while (1)
      {
        if (*((_BYTE *)this + 282))
        {
          v588 = v40;
          WebCore::RenderTableSection::recalcCells(this);
          v290 = v658;
          v289 = v662;
          v40 = v588;
        }
        v294 = *((_DWORD *)this + 53);
        if (v294 <= v288)
        {
          __break(0xC471u);
          JUMPOUT(0x19644E178);
        }
        v295 = v292 - 1;
        v296 = *((_QWORD *)this + 25) + 40 * v289;
        if (*(_DWORD *)(v296 + 12) <= (v292 - 1))
        {
          __break(0xC471u);
          JUMPOUT(0x19644E180);
        }
        v297 = *(_QWORD *)v296 + v291;
        v298 = *(unsigned int *)(v297 + 12);
        if (!(_DWORD)v298 || (v299 = *(WebCore::RenderTableCell **)(*(_QWORD *)v297 + 8 * v298 - 8)) == 0)
        {
          v305 = v40;
          if (v292 == *(_DWORD *)(WebCore::RenderTableSection::table(this) + 228))
          {
            v359 = *((_DWORD *)this + 30);
            v360 = ~(v359 >> 25) & 2;
            if ((v359 & 0x4000000) != 0)
              v361 = 3;
            else
              v361 = 1;
            if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
              v362 = v361;
            else
              v362 = v360;
            WebCore::RenderTableSection::paintRowGroupBorderIfRequired((uint64_t)this, (uint64_t)a2, (unsigned int *)a3, v288, v292 - 1, v362, 0);
          }
          v287 = 1;
          goto LABEL_543;
        }
        if (v40 < v288)
        {
          if (*((_BYTE *)this + 282))
          {
            v590 = v40;
            WebCore::RenderTableSection::recalcCells(this);
            v290 = v658;
            v289 = v662;
            v40 = v590;
            v294 = *((_DWORD *)this + 53);
          }
          if (v294 <= v290)
          {
            __break(0xC471u);
            JUMPOUT(0x19644E1B4);
          }
          v309 = *((_QWORD *)this + 25) + 40 * v290;
          if (*(_DWORD *)(v309 + 12) <= v295)
          {
            __break(0xC471u);
            JUMPOUT(0x19644E1BCLL);
          }
          v310 = *(_QWORD *)v309 + v291;
          v311 = *(unsigned int *)(v310 + 12);
          v312 = (_DWORD)v311 ? *(WebCore::RenderTableCell **)(*(_QWORD *)v310 + 8 * v311 - 8) : 0;
          if (v312 == v299)
            goto LABEL_544;
        }
        if (v295 > v73)
        {
          if (*((_BYTE *)this + 282))
          {
            v589 = v40;
            WebCore::RenderTableSection::recalcCells(this);
            v290 = v658;
            v289 = v662;
            v40 = v589;
            v294 = *((_DWORD *)this + 53);
          }
          if (v294 <= v288)
          {
            __break(0xC471u);
            JUMPOUT(0x19644E1A4);
          }
          v300 = *((_QWORD *)this + 25) + 40 * v289;
          if (*(_DWORD *)(v300 + 12) <= (v292 - 2))
          {
            __break(0xC471u);
            JUMPOUT(0x19644E1ACLL);
          }
          v301 = *(_QWORD *)v300 + 32 * (v292 - 2);
          v302 = *(unsigned int *)(v301 + 12);
          v303 = (_DWORD)v302 ? *(WebCore::RenderTableCell **)(*(_QWORD *)v301 + 8 * v302 - 8) : 0;
          if (v303 == v299)
            goto LABEL_544;
        }
        if ((v287 & 1) != 0)
        {
          v363 = v40;
          if (v650 == v294)
          {
            if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 <= 3)
            {
              if ((*((_BYTE *)this + 123) & 4) != 0)
                v364 = 1;
              else
                v364 = 3;
            }
            else
            {
              v364 = 2;
            }
            v365 = this;
            v367 = (unsigned int *)a3;
            v366 = a2;
            v368 = v288;
LABEL_640:
            WebCore::RenderTableSection::paintRowGroupBorderIfRequired((uint64_t)v365, (uint64_t)v366, v367, v368, v292 - 1, v364, v299);
            v40 = v363;
            goto LABEL_538;
          }
          if (!(_DWORD)v288)
          {
            v462 = (WebCore::RenderTable *)WebCore::RenderTableSection::table(this);
            v463 = WebCore::RenderTable::sectionAbove(v462, (uint64_t)this, 0);
            v40 = v363;
            if (!v463)
            {
              if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 <= 3)
              {
                if ((*((_BYTE *)this + 123) & 4) != 0)
                  v364 = 3;
                else
                  v364 = 1;
              }
              else
              {
                v364 = 0;
              }
              v365 = this;
              v367 = (unsigned int *)a3;
              v366 = a2;
              v368 = 0;
              goto LABEL_640;
            }
          }
        }
LABEL_538:
        v304 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
        if (v304 <= 5 && ((1 << v304) & 0x2A) != 0)
        {
          v305 = v40;
          v307 = *(_DWORD *)a3;
          if ((*((_BYTE *)this + 21) & 0x10) == 0)
          {
            v591 = *((_DWORD *)a3 + 1);
            v592 = *((_DWORD *)this + 41);
            v10 = __OFADD__(v591, v592);
            v593 = v591 + v592;
            v594 = (v591 >> 31) + 0x7FFFFFFF;
            if (!v10)
              v594 = v593;
            v595 = *((_DWORD *)v299 + 41);
            v10 = __OFSUB__(v594, v595);
            v596 = v594 - v595;
            v597 = (v594 >> 31) + 0x7FFFFFFF;
            if (v10)
              v596 = v597;
            v598 = *((_DWORD *)v299 + 39);
            v599 = 2 * v598;
            v600 = v598 ^ (2 * v598);
            v601 = (v598 >> 31) + 0x7FFFFFFF;
            if (v600 >= 0)
              v601 = v599;
            v10 = __OFSUB__(v596, v601);
            v308 = v596 - v601;
            if (v10)
              v308 = (v596 >> 31) + 0x7FFFFFFF;
            goto LABEL_542;
          }
          v602 = *((_DWORD *)this + 40);
          v10 = __OFADD__(v307, v602);
          v603 = v307 + v602;
          v604 = (v307 >> 31) + 0x7FFFFFFF;
          if (!v10)
            v604 = v603;
          v605 = *((_DWORD *)v299 + 40);
          v10 = __OFSUB__(v604, v605);
          v606 = v604 - v605;
          v607 = (v604 >> 31) + 0x7FFFFFFF;
          if (!v10)
            v607 = v606;
          v608 = *((_DWORD *)v299 + 38);
          v609 = 2 * v608;
          v610 = v608 ^ (2 * v608);
          v611 = (v608 >> 31) + 0x7FFFFFFF;
          if (v610 >= 0)
            v611 = v609;
          v10 = __OFSUB__(v607, v611);
          v612 = v607 - v611;
          v307 = (v607 >> 31) + 0x7FFFFFFF;
          if (!v10)
            v307 = v612;
          v306 = a3;
        }
        else
        {
          v305 = v40;
          v306 = a3;
          v307 = *(_DWORD *)a3;
        }
        v308 = *((unsigned int *)v306 + 1);
LABEL_542:
        v674.i64[0] = v307 | (unint64_t)(v308 << 32);
        WebCore::RenderTableCell::paintCollapsedBorders(v299, a2, (const WebCore::LayoutPoint *)&v674);
        v287 = 0;
LABEL_543:
        v40 = v305;
        v289 = v662;
        v290 = v658;
LABEL_544:
        --v293;
        v291 -= 32;
        --v292;
        if (v293 <= v73)
        {
          v286 = v288;
          if (v655 >= v288)
            return;
          goto LABEL_521;
        }
      }
    }
  }
  v672 = 0;
  v673 = 0;
  LODWORD(v405) = v40;
  v664 = (uint64_t *)((char *)this + 256);
  WTF::Mapper<WTF::Vector<WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVector<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl>(WTF::WeakHashSet<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&)::{lambda(WebCore::RenderTableCell&)#1},WTF::Vector<WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::WeakHashSet<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&,void>::map((uint64_t)&v672, (_DWORD *)this + 64);
  v669 = 0;
  if (v405 >= v39)
    goto LABEL_767;
  v405 = v405;
  v651 = v39;
  v653 = v73;
  do
  {
    if (v405 >= *((unsigned int *)this + 53))
    {
      __break(0xC471u);
      JUMPOUT(0x19644E1C4);
    }
    v406 = *(_QWORD *)(*((_QWORD *)this + 25) + 40 * v405 + 16);
    v407 = v653;
    v656 = v405;
    if (v406)
    {
      v408 = *(_QWORD *)(v406 + 144);
      if (!v408 || (v407 = v653, (*(_BYTE *)(v408 + 25) & 8) == 0))
      {
        WebCore::RenderTableRow::paintOutlineForRowIfNeeded(v406, a2, (const WebCore::LayoutPoint *)*(unsigned int *)a3, *((_DWORD *)a3 + 1));
        v407 = v653;
      }
    }
    do
    {
      if (*((_BYTE *)this + 282))
        WebCore::RenderTableSection::recalcCells(this);
      if (v405 >= *((unsigned int *)this + 53))
      {
        __break(0xC471u);
        JUMPOUT(0x19644E188);
      }
      v414 = *((_QWORD *)this + 25) + 40 * v405;
      if (v407 >= *(unsigned int *)(v414 + 12))
      {
        __break(0xC471u);
        JUMPOUT(0x19644E190);
      }
      v659 = v407;
      v415 = *(_QWORD *)v414 + 32 * v407;
      v416 = *(unsigned int *)(v415 + 12);
      if ((_DWORD)v416)
      {
        v417 = 0;
        while (1)
        {
          v418 = *(_QWORD *)(*(_QWORD *)v415 + 8 * v417);
          ++*((_DWORD *)this + 66);
          v419 = *(_QWORD *)(v418 + 8);
          if (v419)
          {
            if (*(_QWORD *)(v419 + 8))
            {
              v420 = *v664;
              if (*v664)
              {
                v421 = *(_DWORD *)(v420 - 8);
                v422 = (~(v419 << 32) + v419) ^ ((unint64_t)(~(v419 << 32) + v419) >> 22);
                v423 = 9 * ((v422 + ~(v422 << 13)) ^ ((v422 + ~(v422 << 13)) >> 8));
                v424 = (v423 ^ (v423 >> 15)) + ~((v423 ^ (v423 >> 15)) << 27);
                v425 = v421 & ((v424 >> 31) ^ v424);
                for (i = 1; ; ++i)
                {
                  v427 = *(_QWORD *)(v420 + 8 * v425);
                  if (!v427)
                    break;
                  if (v427 != -1 && v427 == v419)
                    goto LABEL_755;
                  v425 = (v425 + i) & v421;
                }
              }
            }
          }
          if ((*(_BYTE *)(v418 + 251) & 8) == 0)
            goto LABEL_723;
          if (WebCore::RenderTableCell::parseRowSpanFromDOM((WebCore::RenderTableCell *)v418) <= 1)
            break;
LABEL_694:
          if (v417 >= *(unsigned int *)(v415 + 12))
          {
            __break(0xC471u);
            JUMPOUT(0x19644E170);
          }
          v409 = *(_QWORD *)(*(_QWORD *)v415 + 8 * v417);
          v668 = v409;
          if (v409)
            ++*(_DWORD *)(v409 + 16);
          WTF::HashTable<WTF::CheckedPtr<WebCore::RenderTableCell,WTF::RawPtrTraits<WebCore::RenderTableCell>>,WTF::CheckedPtr<WebCore::RenderTableCell,WTF::RawPtrTraits<WebCore::RenderTableCell>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedPtr<WebCore::RenderTableCell,WTF::RawPtrTraits<WebCore::RenderTableCell>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::RenderTableCell,WTF::RawPtrTraits<WebCore::RenderTableCell>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::RenderTableCell,WTF::RawPtrTraits<WebCore::RenderTableCell>>>>::add((uint64_t)&v674, (uint64_t *)&v669, &v668);
          v410 = v675;
          if (v668)
          {
            v411 = *(_DWORD *)(v668 + 16);
            if (!v411)
            {
              __break(0xC471u);
              JUMPOUT(0x19644DD50);
            }
            *(_DWORD *)(v668 + 16) = v411 - 1;
          }
          if (!v410)
            goto LABEL_755;
LABEL_725:
          if (v417 >= *(unsigned int *)(v415 + 12))
          {
            __break(0xC471u);
            JUMPOUT(0x19644DFB8);
          }
          v430 = *(_QWORD *)v415;
          v431 = HIDWORD(v673);
          if (HIDWORD(v673) == (_DWORD)v673)
          {
            v432 = HIDWORD(v673) + ((unint64_t)HIDWORD(v673) >> 2);
            if (v432 >= 0x10)
              v433 = v432 + 1;
            else
              v433 = 16;
            if (v433 <= (unint64_t)HIDWORD(v673) + 1)
              v434 = HIDWORD(v673) + 1;
            else
              v434 = v433;
            if (v434 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x19644E118);
            }
            v435 = (WTF *)v672;
            v436 = WTF::fastMalloc((WTF *)(8 * v434));
            v438 = (WTF *)v436;
            LODWORD(v673) = v434;
            v672 = v436;
            if ((_DWORD)v431)
            {
              v439 = 8 * v431;
              v440 = (_QWORD *)v436;
              v441 = (WTF **)v435;
              do
              {
                v442 = *v441;
                *v441 = 0;
                *v440 = v442;
                v443 = *v441;
                *v441 = 0;
                if (v443)
                {
                  if (*(_DWORD *)v443 == 1)
                    WTF::fastFree(v443, v437);
                  else
                    --*(_DWORD *)v443;
                }
                ++v440;
                ++v441;
                v439 -= 8;
              }
              while (v439);
            }
            if (v435)
            {
              if (v438 == v435)
              {
                v438 = 0;
                v672 = 0;
                LODWORD(v673) = 0;
              }
              WTF::fastFree(v435, v437);
            }
            v446 = *(_QWORD *)(v430 + 8 * v417);
            if (v446)
            {
              v413 = *(_QWORD *)(v446 + 8);
              if (v413
                || (v413 = WTF::fastCompactMalloc((WTF *)0x10),
                    *(_DWORD *)v413 = 1,
                    *(_QWORD *)(v413 + 8) = v446,
                    v450 = *(WTF **)(v446 + 8),
                    *(_QWORD *)(v446 + 8) = v413,
                    !v450))
              {
LABEL_752:
                ++*(_DWORD *)v413;
              }
              else
              {
                if (*(_DWORD *)v450 != 1)
                {
                  --*(_DWORD *)v450;
                  goto LABEL_752;
                }
                WTF::fastFree(v450, v449);
                v413 = *(_QWORD *)(v446 + 8);
                if (v413)
                  goto LABEL_752;
              }
            }
            else
            {
              v413 = 0;
            }
            *((_QWORD *)v438 + v431) = v413;
            goto LABEL_754;
          }
          v444 = (int32x2_t)v672;
          v445 = *(_QWORD *)(v430 + 8 * v417);
          if (v445)
          {
            v412 = *(_QWORD *)(v445 + 8);
            if (!v412)
            {
              v412 = WTF::fastCompactMalloc((WTF *)0x10);
              *(_DWORD *)v412 = 1;
              *(_QWORD *)(v412 + 8) = v445;
              v448 = *(WTF **)(v445 + 8);
              *(_QWORD *)(v445 + 8) = v412;
              if (v448)
              {
                if (*(_DWORD *)v448 == 1)
                {
                  WTF::fastFree(v448, v447);
                  v412 = *(_QWORD *)(v445 + 8);
                  if (!v412)
                    goto LABEL_745;
                }
                else
                {
                  --*(_DWORD *)v448;
                }
              }
            }
            ++*(_DWORD *)v412;
          }
          else
          {
            v412 = 0;
          }
LABEL_745:
          *(_QWORD *)(*(_QWORD *)&v444 + 8 * v431) = v412;
LABEL_754:
          HIDWORD(v673) = v431 + 1;
LABEL_755:
          ++v417;
          v416 = *(unsigned int *)(v415 + 12);
          if (v417 >= v416)
            goto LABEL_765;
        }
        v416 = *(unsigned int *)(v415 + 12);
LABEL_723:
        if (v417 >= v416)
        {
          __break(0xC471u);
          JUMPOUT(0x19644DFB0);
        }
        v429 = *(WebCore::RenderTableCell **)(*(_QWORD *)v415 + 8 * v417);
        if ((*((_BYTE *)v429 + 251) & 4) == 0 || WebCore::RenderTableCell::parseColSpanFromDOM(v429) < 2)
          goto LABEL_725;
        goto LABEL_694;
      }
LABEL_765:
      v407 = v659 + 1;
      v405 = v656;
    }
    while (v659 + 1 != v660);
    v405 = v656 + 1;
  }
  while (v656 + 1 != v651);
LABEL_767:
  isEmptyIgnoringNullReferences = WTF::WeakHashSet<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences(v664);
  v452 = (uint64_t *)v672;
  v453 = HIDWORD(v673);
  v454 = (WTF *)(v672 + 8 * HIDWORD(v673));
  if (isEmptyIgnoringNullReferences)
    std::stable_sort[abi:sn180100]<WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> *,BOOL (*)(WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&)>((WTF *)v672, v454);
  else
    std::sort[abi:sn180100]<WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> *,BOOL (*)(WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&)>(v672, (WTF **)v454);
  if (*((_WORD *)a2 + 8) == 256)
  {
    if ((_DWORD)v453)
    {
      v456 = v453 - 1;
      v457 = &v452[(v453 - 1)];
      do
      {
        if (v453 <= v456)
        {
          __break(0xC471u);
          JUMPOUT(0x19644E1CCLL);
        }
        v458 = *v457--;
        v459 = *(const WebCore::RenderBox **)(v458 + 8);
        v674.i64[0] = WebCore::RenderBox::flipForWritingModeForChild(this, v459, a3);
        WebCore::RenderTableCell::paintCollapsedBorders(v459, a2, (const WebCore::LayoutPoint *)&v674);
        --v456;
      }
      while (v456 != -1);
    }
  }
  else if ((_DWORD)v453)
  {
    do
    {
      v460 = *v452++;
      WebCore::RenderTableSection::paintCell((uint64_t)this, *(WebCore::RenderTableCell **)(v460 + 8), a2, a3);
      --v453;
    }
    while (v453);
  }
  WTF::HashSet<WTF::CheckedPtr<WebCore::RenderTableCell,WTF::RawPtrTraits<WebCore::RenderTableCell>>,WTF::DefaultHash<WTF::CheckedPtr<WebCore::RenderTableCell,WTF::RawPtrTraits<WebCore::RenderTableCell>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::RenderTableCell,WTF::RawPtrTraits<WebCore::RenderTableCell>>>,WTF::HashTableTraits>::~HashSet((uint64_t **)&v669, v455);
  WTF::Vector<WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v672, v461);
}

uint64_t WebCore::RenderTableSection::paintCell(uint64_t this, WebCore::RenderTableCell *a2, WebCore::PaintInfo *a3, const WebCore::LayoutPoint *a4)
{
  WebCore::RenderElement *v6;
  unsigned int v7;
  BOOL v8;
  int v9;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  int v19;
  WebCore::RenderElement *v20;
  WebCore::RenderElement *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  BOOL v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  int v35;
  int v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  int v46;
  int v47;
  unsigned int v48;
  unint64_t v49;

  v6 = (WebCore::RenderElement *)this;
  v7 = (unsigned __int16)*(_DWORD *)(this + 124) >> 13;
  v8 = v7 > 5;
  v9 = (1 << v7) & 0x2A;
  if (v8 || v9 == 0)
  {
    v11 = *(_DWORD *)a4;
LABEL_7:
    v12 = *((unsigned int *)a4 + 1);
    goto LABEL_8;
  }
  v11 = *(_DWORD *)a4;
  if ((*(_BYTE *)(this + 21) & 0x10) != 0)
  {
    v38 = *(_DWORD *)(this + 160);
    v27 = __OFADD__(v11, v38);
    v39 = v11 + v38;
    v40 = (v11 >> 31) + 0x7FFFFFFF;
    if (!v27)
      v40 = v39;
    v41 = *((_DWORD *)a2 + 40);
    v27 = __OFSUB__(v40, v41);
    v42 = v40 - v41;
    v43 = (v40 >> 31) + 0x7FFFFFFF;
    if (!v27)
      v43 = v42;
    v44 = *((_DWORD *)a2 + 38);
    v45 = 2 * v44;
    v46 = v44 ^ (2 * v44);
    v47 = (v44 >> 31) + 0x7FFFFFFF;
    if (v46 >= 0)
      v47 = v45;
    v27 = __OFSUB__(v43, v47);
    v48 = v43 - v47;
    v11 = (v43 >> 31) + 0x7FFFFFFF;
    if (!v27)
      v11 = v48;
    goto LABEL_7;
  }
  v25 = *((_DWORD *)a4 + 1);
  v26 = *(_DWORD *)(this + 164);
  v27 = __OFADD__(v25, v26);
  v28 = v25 + v26;
  v29 = (v25 >> 31) + 0x7FFFFFFF;
  if (!v27)
    v29 = v28;
  v30 = *((_DWORD *)a2 + 41);
  v27 = __OFSUB__(v29, v30);
  v31 = v29 - v30;
  v32 = (v29 >> 31) + 0x7FFFFFFF;
  if (!v27)
    v32 = v31;
  v33 = *((_DWORD *)a2 + 39);
  v34 = 2 * v33;
  v35 = v33 ^ (2 * v33);
  v36 = (v33 >> 31) + 0x7FFFFFFF;
  if (v35 >= 0)
    v36 = v34;
  v27 = __OFSUB__(v32, v36);
  v37 = v32 - v36;
  LODWORD(v12) = (v32 >> 31) + 0x7FFFFFFF;
  if (v27)
    v12 = v12;
  else
    v12 = v37;
LABEL_8:
  v49 = v11 | (unint64_t)(v12 << 32);
  v13 = *((_QWORD *)a2 + 4);
  if (v13)
    v14 = *(_QWORD *)(v13 + 8);
  else
    v14 = 0;
  if (*(_BYTE *)(v14 + 46) != 39)
  {
    __break(0xC471u);
    JUMPOUT(0x19644E480);
  }
  if (*((unsigned __int16 *)a3 + 8) <= 1u)
  {
    v17 = *(_QWORD *)(this + 32);
    if (v17)
    {
      v18 = *(unsigned __int8 **)(v17 + 8);
      if (v18)
      {
        v19 = v18[46];
        if (v19 != 35 && v19 != 63)
        {
          __break(0xC471u);
          JUMPOUT(0x19644E4D8);
        }
      }
    }
    else
    {
      v18 = 0;
    }
    if ((v18[328] & 4) != 0)
    {
      v23 = WebCore::RenderTable::slowColElement((WebCore::RenderTable *)v18, (void *)(*((_DWORD *)a2 + 62) & 0x1FFFFFF), 0, 0);
      v20 = (WebCore::RenderElement *)v23;
      if (v23)
      {
        v24 = *(_QWORD *)(v23 + 32);
        if (v24)
          v24 = *(_QWORD *)(v24 + 8);
        if (*(_BYTE *)(v24 + 46) == 38)
          v21 = (WebCore::RenderElement *)v24;
        else
          v21 = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v20 = 0;
    }
    v21 = 0;
LABEL_22:
    WebCore::RenderTableCell::paintBackgroundsBehindCell((uint64_t)a2, a3, (const WebCore::LayoutPoint *)&v49, v21);
    WebCore::RenderTableCell::paintBackgroundsBehindCell((uint64_t)a2, a3, (const WebCore::LayoutPoint *)&v49, v20);
    this = WebCore::RenderTableCell::paintBackgroundsBehindCell((uint64_t)a2, a3, (const WebCore::LayoutPoint *)&v49, v6);
    v22 = *(_QWORD *)(v14 + 144);
    if (!v22 || (*(_BYTE *)(v22 + 25) & 8) == 0)
      this = WebCore::RenderTableCell::paintBackgroundsBehindCell((uint64_t)a2, a3, (const WebCore::LayoutPoint *)&v49, (WebCore::RenderElement *)v14);
  }
  v15 = *((_QWORD *)a2 + 18);
  if (!v15 || (*(_BYTE *)(v15 + 25) & 8) == 0)
  {
    v16 = *(_QWORD *)(v14 + 144);
    if (!v16 || (*(_BYTE *)(v16 + 25) & 8) == 0)
      return WebCore::RenderTableCell::paint((uint64_t)a2, a3, (const WebCore::LayoutPoint *)&v49);
  }
  return this;
}

uint64_t WebCore::RenderTableSection::logicalRectForWritingModeAndDirection(WebCore::RenderTableSection *this, const WebCore::LayoutRect *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  int v12;
  int v13;
  __int128 v14;

  v14 = *(_OWORD *)a2;
  WebCore::RenderBox::flipForWritingMode((uint64_t)this, (WebCore::LayoutRect *)&v14);
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 <= 3)
  {
    *(_QWORD *)&v14 = DWORD1(v14) | ((unint64_t)v14 << 32);
    *((_QWORD *)&v14 + 1) = HIDWORD(v14) | ((unint64_t)DWORD2(v14) << 32);
  }
  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    v3 = *(_QWORD *)(v3 + 8);
    if (v3)
    {
      v4 = *(unsigned __int8 *)(v3 + 46);
      if (v4 != 35 && v4 != 63)
        goto LABEL_15;
    }
  }
  if ((*((_BYTE *)this + 123) & 4) == 0)
    return v14;
  v6 = *(unsigned int *)(v3 + 212);
  if (!(_DWORD)v6)
  {
LABEL_15:
    __break(0xC471u);
    JUMPOUT(0x19644E65CLL);
  }
  v7 = v6 - 1;
  v8 = *(_QWORD *)(v3 + 200);
  v9 = (v14 >> 31) + 0x7FFFFFFF;
  if (!__OFADD__((_DWORD)v14, DWORD2(v14)))
    v9 = v14 + DWORD2(v14);
  v10 = *(_DWORD *)(v8 + 4 * v7);
  v11 = __OFSUB__(v10, v9);
  v12 = v10 - v9;
  v13 = (v10 >> 31) + 0x7FFFFFFF;
  if (!v11)
    v13 = v12;
  LODWORD(v14) = v13;
  return v14;
}

char *WebCore::RenderTableSection::spannedRows(char *result, unsigned int a2, unsigned int a3, int a4)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  int *v8;
  char *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  int *v20;
  char *v21;
  int v22;
  unint64_t v23;

  v4 = &result[4 * a2];
  v5 = v4;
  if (a2)
  {
    v6 = a2;
    v5 = result;
    do
    {
      v7 = v6 >> 1;
      v8 = (int *)&v5[4 * (v6 >> 1)];
      v10 = *v8;
      v9 = (char *)(v8 + 1);
      v6 += ~(v6 >> 1);
      if (v10 > (int)a3)
        v6 = v7;
      else
        v5 = v9;
    }
    while (v6);
  }
  v11 = v5 - result;
  v12 = (unint64_t)(v5 - result) >> 2;
  if ((_DWORD)v12 == a2)
  {
    v13 = a2 - 1;
    v12 = a2 - 1;
    return (char *)(v13 | (v12 << 32));
  }
  v13 = v12 - 1;
  if (!(_DWORD)v12)
    v13 = 0;
  if (v12 < a2)
  {
    v14 = ((unint64_t)v11 >> 2);
    v15 = a3 + a4;
    if (__OFADD__(a3, a4))
    {
      v15 = 0x7FFFFFFF;
      if (*(_DWORD *)&result[4 * v14] < (signed int)((a3 >> 31) + 0x7FFFFFFF))
        goto LABEL_13;
    }
    else if (*(_DWORD *)&result[4 * v14] < v15)
    {
LABEL_13:
      v16 = (int)(v11 >> 2);
      if (v16 != a2)
      {
        v17 = &result[4 * v16];
        v18 = (v4 - v17) >> 2;
        v4 = v17;
        do
        {
          v19 = v18 >> 1;
          v20 = (int *)&v4[4 * (v18 >> 1)];
          v22 = *v20;
          v21 = (char *)(v20 + 1);
          v18 += ~(v18 >> 1);
          if (v15 < v22)
            v18 = v19;
          else
            v4 = v21;
        }
        while (v18);
      }
      v23 = (unint64_t)(v4 - result) >> 2;
      if ((_DWORD)v23 == a2)
        v12 = a2 - 1;
      else
        v12 = v23;
    }
    return (char *)(v13 | (v12 << 32));
  }
  __break(0xC471u);
  return result;
}

unint64_t WebCore::RenderTableSection::fullTableColumnSpan(WebCore::RenderTableSection *this)
{
  uint64_t v1;
  int v2;
  unint64_t result;

  v1 = *((_QWORD *)this + 1);
  v2 = *(unsigned __int8 *)(v1 + 46);
  if (v2 == 35 || v2 == 63)
    return (unint64_t)*(unsigned int *)(v1 + 228) << 32;
  result = 105;
  __break(0xC471u);
  return result;
}

unint64_t WebCore::RenderTableSection::spannedColumns(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v3;
  int v4;
  char *v5;
  unint64_t v6;
  char *v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  int *v11;
  char *v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int *v22;
  char *v23;
  int v24;
  unint64_t v25;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(unsigned __int8 *)(v3 + 46);
  if (v4 != 35 && v4 != 63)
    goto LABEL_28;
  v5 = *(char **)(v3 + 200);
  v6 = *(unsigned int *)(v3 + 212);
  v7 = &v5[4 * v6];
  v8 = v7;
  if ((_DWORD)v6)
  {
    v9 = v6;
    v8 = v5;
    do
    {
      v10 = v9 >> 1;
      v11 = (int *)&v8[4 * (v9 >> 1)];
      v13 = *v11;
      v12 = (char *)(v11 + 1);
      v9 += ~(v9 >> 1);
      if (v13 > (int)a2)
        v9 = v10;
      else
        v8 = v12;
    }
    while (v9);
  }
  v14 = v8 - v5;
  v15 = (unint64_t)(v8 - v5) >> 2;
  if ((_DWORD)v6 == (_DWORD)v15)
  {
    v16 = v6 - 1;
    v15 = (v6 - 1);
    return v16 | (v15 << 32);
  }
  v16 = v15 - 1;
  if (!(_DWORD)v15)
    v16 = 0;
  if (v6 <= v15)
  {
LABEL_28:
    __break(0xC471u);
    JUMPOUT(0x19644E904);
  }
  v17 = ((unint64_t)v14 >> 2);
  v18 = a2 + a3;
  if (__OFADD__(a2, a3))
  {
    v18 = 0x7FFFFFFF;
    if (*(_DWORD *)&v5[4 * v17] >= (signed int)((a2 >> 31) + 0x7FFFFFFF))
      return v16 | (v15 << 32);
  }
  else if (*(_DWORD *)&v5[4 * v17] >= v18)
  {
    return v16 | (v15 << 32);
  }
  v19 = (int)(v14 >> 2);
  if (v19 != v6)
  {
    v20 = (uint64_t)(4 * v6 - 4 * v19) >> 2;
    v7 = &v5[4 * v19];
    do
    {
      v21 = v20 >> 1;
      v22 = (int *)&v7[4 * (v20 >> 1)];
      v24 = *v22;
      v23 = (char *)(v22 + 1);
      v20 += ~(v20 >> 1);
      if (v18 < v24)
        v20 = v21;
      else
        v7 = v23;
    }
    while (v20);
  }
  v25 = (unint64_t)(v7 - v5) >> 2;
  if ((_DWORD)v6 == (_DWORD)v25)
    v15 = (v6 - 1);
  else
    v15 = v25;
  return v16 | (v15 << 32);
}

void WebCore::RenderTableSection::paintRowGroupBorder(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8, char a9)
{
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  signed int v13;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v33;
  int32x4_t v34;
  _QWORD *v35;
  void *v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  unint64_t v40;
  float32x4_t v41;

  if (a9 != 1)
  {
    v9 = *(_DWORD *)a2;
    v10 = *(_DWORD *)(a2 + 4);
    if ((int)a4 <= *(_DWORD *)a2)
      v11 = *(_DWORD *)a2;
    else
      v11 = a4;
    if (SHIDWORD(a4) <= v10)
      v12 = *(_DWORD *)(a2 + 4);
    else
      v12 = HIDWORD(a4);
    v13 = a4 + a5;
    if (__OFADD__((_DWORD)a4, (_DWORD)a5))
      v13 = (a4 >> 31) + 0x7FFFFFFF;
    v14 = *(_DWORD *)(a2 + 8);
    v15 = *(_DWORD *)(a2 + 12);
    v16 = __OFADD__(v9, v14);
    v17 = v9 + v14;
    v18 = (v9 >> 31) + 0x7FFFFFFF;
    if (!v16)
      v18 = v17;
    if (v18 >= v13)
      v18 = v13;
    v19 = (HIDWORD(a4) >> 31) + 0x7FFFFFFF;
    if (!__OFADD__(HIDWORD(a4), HIDWORD(a5)))
      v19 = HIDWORD(a4) + HIDWORD(a5);
    v16 = __OFADD__(v10, v15);
    v20 = v10 + v15;
    v21 = (v10 >> 31) + 0x7FFFFFFF;
    if (!v16)
      v21 = v20;
    if (v21 < v19)
      v19 = v21;
    v22 = v11 < v18 && v12 < v19;
    if (v22)
      v23 = v18;
    else
      v23 = 0;
    if (v22)
      v24 = v19;
    else
      v24 = 0;
    if (v22)
      v25 = v11;
    else
      v25 = 0;
    if (v22)
      v26 = v12;
    else
      v26 = 0;
    v16 = __OFSUB__(v23, v25);
    v27 = v23 - v25;
    v28 = (v23 >> 31) + 0x7FFFFFFF;
    if (!v16)
      v28 = v27;
    v29 = v24 - v26;
    if (__OFSUB__(v24, v26))
      v29 = (v24 >> 31) + 0x7FFFFFFF;
    if (v28 >= 1 && v29 >= 1)
    {
      v33 = *(_QWORD *)(a2 + 80);
      v34.i64[0] = __PAIR64__(v26, v25);
      v35 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8);
      v34.i64[1] = __PAIR64__(v29, v28);
      v41 = vmulq_f32(vcvtq_f32_s32(v34), (float32x4_t)vdupq_n_s32(0x3C800000u));
      WebCore::RenderStyle::visitedDependentColorWithColorFilter(a1 + 80, a7, 0, &v40);
      WebCore::BorderPainter::drawLineForBoxSide(v33, v35, v41.f32, a6, (WebCore::Color *)&v40, a8, a3, 0.0, 0.0);
      if ((v40 & 0x8000000000000) != 0)
      {
        v37 = (unsigned int *)(v40 & 0xFFFFFFFFFFFFLL);
        do
        {
          v38 = __ldaxr(v37);
          v39 = v38 - 1;
        }
        while (__stlxr(v39, v37));
        if (!v39)
        {
          atomic_store(1u, v37);
          WTF::fastFree((WTF *)v37, v36);
        }
      }
    }
  }
}

uint64_t WebCore::RenderTableSection::offsetLeftForRowGroupBorder(WebCore::RenderTableSection *this, WebCore::RenderTableCell *a2, const WebCore::LayoutRect *a3, int a4)
{
  unsigned int v4;
  int v5;
  BOOL v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t result;
  char *v10;
  int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  char *v15;
  int v16;
  int v17;

  if (((unsigned __int16)*((_DWORD *)this + 31) >> 13) - 2 < 4)
  {
    v12 = a4 + 1;
    if (*((_DWORD *)this + 57) <= (a4 + 1))
    {
      __break(0xC471u);
      JUMPOUT(0x19644EBE0);
    }
    v13 = *(_DWORD *)(*((_QWORD *)this + 27) + 4 * v12);
    v6 = __OFSUB__((_DWORD)a3, v13);
    v14 = (_DWORD)a3 - v13;
    if (v6)
      v14 = (a3 >> 31) + 0x7FFFFFFF;
    if (*((_DWORD *)this + 53) == v12)
    {
      switch((unsigned __int16)*((_DWORD *)this + 31) >> 13)
      {
        case 2:
        case 4:
          v15 = (char *)this + 248;
          break;
        case 3:
        case 5:
          v15 = (char *)this + 252;
          break;
        default:
          if ((*((_BYTE *)this + 123) & 4) != 0)
            v15 = (char *)this + 244;
          else
            v15 = (char *)this + 240;
          break;
      }
      v16 = *(_DWORD *)v15;
      if (v16 == 0x80000000)
        v17 = 0x7FFFFFFF;
      else
        v17 = -v16;
    }
    else
    {
      v17 = 0;
    }
    result = v14 + v17;
    if (__OFADD__(v14, v17))
      return (v14 >> 31) + 0x7FFFFFFF;
  }
  else if ((*((_BYTE *)this + 123) & 4) != 0)
  {
    switch((unsigned __int16)*((_DWORD *)this + 31) >> 13)
    {
      case 2:
      case 4:
        v10 = (char *)this + 248;
        break;
      case 3:
      case 5:
        v10 = (char *)this + 252;
        break;
      default:
        v10 = (char *)this + 244;
        break;
    }
    v11 = *(_DWORD *)v10;
    if (v11 == 0x80000000)
      return 0x7FFFFFFFLL;
    else
      return -v11;
  }
  else if (a2)
  {
    v4 = *((_DWORD *)a2 + 38);
    v5 = *((_DWORD *)a2 + 40);
    v6 = __OFADD__(v4, v5);
    v7 = v4 + v5;
    v8 = (v4 >> 31) + 0x7FFFFFFF;
    if (v6)
      return v8;
    else
      return v7;
  }
  else
  {
    return 0;
  }
  return result;
}

uint64_t WebCore::RenderTableSection::verticalRowGroupBorderHeight(WebCore::RenderTableSection *this, WebCore::RenderTableCell *a2, const WebCore::LayoutRect *a3, unsigned int a4)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  unsigned int v11;
  int v12;
  BOOL v13;
  char *v14;
  char *v15;
  int v16;
  uint64_t result;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  char v27;
  char *v28;
  char *v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  unsigned int v33;

  v4 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
  v5 = v4 - 2;
  if ((v4 - 2) >= 4)
  {
    v6 = a4 + 1;
    v7 = *((_DWORD *)this + 57);
    if (v7 <= v6 || v7 <= a4)
    {
      __break(0xC471u);
      JUMPOUT(0x19644ED60);
    }
    v8 = *((_QWORD *)this + 27);
    v9 = *(_DWORD *)(v8 + 4 * v6);
    LODWORD(v8) = *(_DWORD *)(v8 + 4 * a4);
    v10 = __OFSUB__(v9, (_DWORD)v8);
    v11 = v9 - v8;
    v12 = (v9 >> 31) + 0x7FFFFFFF;
    if (v10)
      v11 = v12;
    if (a4)
    {
      if (*((_DWORD *)this + 53) != (_DWORD)v6)
      {
        v16 = 0;
LABEL_17:
        result = v11 + v16;
        if (__OFADD__(v11, v16))
          return (v11 >> 31) + 0x7FFFFFFF;
        return result;
      }
      if (v5 >= 4)
      {
        v13 = v4 == 1;
        v14 = (char *)this + 248;
        v15 = (char *)this + 252;
        goto LABEL_13;
      }
      v27 = *((_BYTE *)this + 123);
      v28 = (char *)this + 240;
      v29 = (char *)this + 244;
    }
    else
    {
      if (v5 >= 4)
      {
        v13 = v4 == 1;
        v14 = (char *)this + 252;
        v15 = (char *)this + 248;
LABEL_13:
        if (!v13)
          v14 = v15;
        goto LABEL_15;
      }
      v27 = *((_BYTE *)this + 123);
      v28 = (char *)this + 244;
      v29 = (char *)this + 240;
    }
    if ((v27 & 4) != 0)
      v14 = v28;
    else
      v14 = v29;
LABEL_15:
    v16 = *(_DWORD *)v14;
    goto LABEL_17;
  }
  if ((*((_BYTE *)this + 123) & 4) != 0)
  {
    if (a2)
    {
      v22 = *((_DWORD *)a2 + 39);
      v23 = *((_DWORD *)a2 + 41);
      v10 = __OFSUB__(v22, v23);
      v24 = v22 - v23;
      v25 = (v22 >> 31) + 0x7FFFFFFF;
      if (!v10)
        v25 = v24;
      v10 = __OFSUB__((_DWORD)a3, v25);
      v26 = (_DWORD)a3 - v25;
      if (v10)
        return (a3 >> 31) + 0x7FFFFFFF;
      else
        return v26;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    if (a2)
    {
      v18 = *((_DWORD *)a2 + 39);
      v19 = *((_DWORD *)a2 + 41);
      v10 = __OFADD__(v18, v19);
      v20 = v18 + v19;
      v21 = (v18 >> 31) + 0x7FFFFFFF;
      if (!v10)
        v21 = v20;
    }
    else
    {
      v21 = 0;
    }
    v10 = __OFSUB__((_DWORD)a3, v21);
    v30 = (_DWORD)a3 - v21;
    if (v10)
      v30 = (a3 >> 31) + 0x7FFFFFFF;
    v31 = *((_DWORD *)this + 61);
    v10 = __OFADD__(v30, v31);
    v32 = v30 + v31;
    v33 = (v30 >> 31) + 0x7FFFFFFF;
    if (v10)
      return v33;
    else
      return v32;
  }
}

uint64_t WebCore::RenderTableSection::horizontalRowGroupBorderWidth(WebCore::RenderTableSection *this, WebCore::RenderTableCell *a2, const WebCore::LayoutRect *a3, unsigned int a4, int a5)
{
  unsigned int v5;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  char *v19;
  uint64_t result;
  int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  char v28;
  char *v29;
  char *v30;
  int v31;
  char *v32;

  if (((unsigned __int16)*((_DWORD *)this + 31) >> 13) - 2 >= 4)
  {
    if ((*((_BYTE *)this + 123) & 4) != 0)
    {
      if (!a2)
        return 0;
      v9 = *((_DWORD *)a2 + 38);
      v10 = *((_DWORD *)a2 + 40);
      v13 = __OFSUB__(v9, v10);
      v11 = v9 - v10;
      v12 = (v9 >> 31) + 0x7FFFFFFF;
      if (!v13)
        v12 = v11;
      v13 = __OFSUB__((_DWORD)a3, v12);
      v14 = (_DWORD)a3 - v12;
      v15 = (a3 >> 31) + 0x7FFFFFFF;
      goto LABEL_27;
    }
    if (a2)
    {
      v5 = *((_DWORD *)a2 + 38);
      v6 = *((_DWORD *)a2 + 40);
      v13 = __OFADD__(v5, v6);
      v7 = v5 + v6;
      v8 = (v5 >> 31) + 0x7FFFFFFF;
      if (!v13)
        v8 = v7;
    }
    else
    {
      v8 = 0;
    }
    v13 = __OFSUB__((_DWORD)a3, v8);
    v16 = (_DWORD)a3 - v8;
    if (v13)
      v16 = (a3 >> 31) + 0x7FFFFFFF;
    if (a5)
    {
      v17 = *(_QWORD *)(*((_QWORD *)this + 4) + 8);
      v18 = *(unsigned __int8 *)(v17 + 46);
      if (v18 != 35 && v18 != 63)
      {
        __break(0xC471u);
        JUMPOUT(0x19644EE70);
      }
      if (*(_DWORD *)(v17 + 228) != a5)
      {
        v21 = 0;
        goto LABEL_26;
      }
      switch((unsigned __int16)*((_DWORD *)this + 31) >> 13)
      {
        case 2:
        case 4:
          goto LABEL_52;
        case 3:
        case 5:
          goto LABEL_50;
        default:
          v19 = (char *)this + 244;
          break;
      }
    }
    else
    {
      switch((unsigned __int16)*((_DWORD *)this + 31) >> 13)
      {
        case 2:
        case 4:
LABEL_50:
          v19 = (char *)this + 248;
          break;
        case 3:
        case 5:
LABEL_52:
          v19 = (char *)this + 252;
          break;
        default:
          v19 = (char *)this + 240;
          break;
      }
    }
    v21 = *(_DWORD *)v19;
LABEL_26:
    v13 = __OFADD__(v16, v21);
    v14 = v16 + v21;
    v15 = (v16 >> 31) + 0x7FFFFFFF;
LABEL_27:
    if (v13)
      return v15;
    else
      return v14;
  }
  v22 = a4 + 1;
  v23 = *((_DWORD *)this + 57);
  if (v23 <= a4 + 1)
  {
    __break(0xC471u);
    JUMPOUT(0x19644EF94);
  }
  if (v23 <= a4)
  {
    __break(0xC471u);
    JUMPOUT(0x19644EF9CLL);
  }
  v24 = *((_QWORD *)this + 27);
  v25 = *(_DWORD *)(v24 + 4 * v22);
  LODWORD(v24) = *(_DWORD *)(v24 + 4 * a4);
  v13 = __OFSUB__(v25, (_DWORD)v24);
  v26 = v25 - v24;
  v27 = (v25 >> 31) + 0x7FFFFFFF;
  if (v13)
    v26 = v27;
  if (*((_DWORD *)this + 53) == v22)
  {
    switch((unsigned __int16)*((_DWORD *)this + 31) >> 13)
    {
      case 2:
      case 4:
        goto LABEL_55;
      case 3:
      case 5:
        goto LABEL_57;
      default:
        v28 = *((_BYTE *)this + 123);
        v29 = (char *)this + 244;
        v30 = (char *)this + 240;
        goto LABEL_43;
    }
  }
  if (a4)
  {
    v31 = 0;
  }
  else
  {
    switch((unsigned __int16)*((_DWORD *)this + 31) >> 13)
    {
      case 2:
      case 4:
LABEL_57:
        v32 = (char *)this + 252;
        break;
      case 3:
      case 5:
LABEL_55:
        v32 = (char *)this + 248;
        break;
      default:
        v28 = *((_BYTE *)this + 123);
        v29 = (char *)this + 240;
        v30 = (char *)this + 244;
LABEL_43:
        if ((v28 & 4) != 0)
          v32 = v29;
        else
          v32 = v30;
        break;
    }
    v31 = *(_DWORD *)v32;
  }
  result = v26 + v31;
  if (__OFADD__(v26, v31))
    return (v26 >> 31) + 0x7FFFFFFF;
  return result;
}

void WebCore::RenderTableSection::paintRowGroupBorderIfRequired(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned int a4, int a5, int a6, WebCore::RenderTableCell *a7)
{
  uint64_t v14;
  int v15;
  const WebCore::LayoutRect *v16;
  const WebCore::LayoutRect *v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  int *v22;
  int v23;
  int v24;
  int v25;
  int *v26;
  int v27;
  BOOL v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  double v38;
  unint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  double v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  int *v52;
  int v53;
  uint64_t v54;
  int v55;
  unsigned int v56;
  int v57;
  uint64_t v58;
  double v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int *v64;
  int v65;
  unsigned int v66;
  int v67;
  uint64_t v68;
  double v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  _BOOL4 v74;
  unsigned int v75;
  int v76;
  int v77;
  int v78;
  double v79[3];
  double v80;

  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v15 = *(unsigned __int8 *)(v14 + 46);
  if (v15 != 35 && v15 != 63)
  {
    __break(0xC471u);
    JUMPOUT(0x19644F638);
  }
  if ((*(_BYTE *)(*(_QWORD *)(v14 + 320) + 16) & 0x70u) <= 0x40
    && ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 80) + 40))(*(_QWORD *)(a2 + 80)) & 1) == 0)
  {
    v78 = 1;
    (*(void (**)(double *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a2 + 80) + 672))(v79, *(_QWORD *)(a2 + 80), 1);
    if (v79[0] == 1.0)
    {
      v78 = 1;
      if (v79[1] == 0.0 && v79[2] == 0.0)
      {
        v74 = v80 != -1.0;
        if (v80 == 1.0)
          v74 = 0;
        v78 = v74;
      }
    }
    v17 = (const WebCore::LayoutRect *)*(unsigned int *)(a1 + 160);
    v16 = (const WebCore::LayoutRect *)*(unsigned int *)(a1 + 164);
    v19 = *a3;
    v18 = a3[1];
    v20 = (unsigned __int16)*(_DWORD *)(a1 + 124) >> 13;
    v21 = v20 - 2;
    switch((unsigned __int16)*(_DWORD *)(a1 + 124) >> 13)
    {
      case 2:
      case 4:
        v22 = (int *)(a1 + 248);
        break;
      case 3:
      case 5:
        v22 = (int *)(a1 + 252);
        break;
      default:
        if ((*(_BYTE *)(a1 + 123) & 4) != 0)
          v22 = (int *)(a1 + 244);
        else
          v22 = (int *)(a1 + 240);
        break;
    }
    v23 = *v22;
    if (a6 == 1)
    {
      v24 = 0;
      if (v23 == 0x80000000)
        v25 = 0x7FFFFFFF;
      else
        v25 = -v23;
    }
    else
    {
      if (v21 < 4)
      {
        if ((*(_BYTE *)(a1 + 123) & 4) != 0)
          v26 = (int *)(a1 + 244);
        else
          v26 = (int *)(a1 + 240);
      }
      else
      {
        v26 = (int *)(a1 + 252);
        if (v20 != 1)
          v26 = (int *)(a1 + 248);
      }
      v27 = *v26;
      if (v23 == 0x80000000)
        v25 = 0x7FFFFFFF;
      else
        v25 = -v23;
      if (v27 == 0x80000000)
        v24 = 0x7FFFFFFF;
      else
        v24 = -v27;
    }
    v28 = __OFADD__(v19, v25);
    v29 = v19 + v25;
    if (v28)
      v30 = (v19 >> 31) + 0x7FFFFFFF;
    else
      v30 = v29;
    v28 = __OFADD__(v18, v24);
    v31 = v18 + v24;
    v32 = (v18 >> 31) + 0x7FFFFFFF;
    if (v28)
      v33 = v32;
    else
      v33 = v31;
    switch(a6)
    {
      case 0:
        v34 = WebCore::RenderTableSection::offsetLeftForRowGroupBorder((WebCore::RenderTableSection *)a1, a7, (const WebCore::LayoutRect *)*(unsigned int *)(a1 + 160), a4);
        v35 = v19 + v34;
        if (__OFADD__(v19, v34))
          v35 = (v19 >> 31) + 0x7FFFFFFF;
        v36 = WebCore::RenderTableSection::horizontalRowGroupBorderWidth((WebCore::RenderTableSection *)a1, a7, v17, a4, a5);
        v37 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 24);
        v38 = *(float *)(v37 + 168) * 64.0;
        if (v38 >= 2147483650.0)
        {
          v39 = 0x7FFFFFFF00000000;
        }
        else if (v38 <= -2147483650.0)
        {
          v39 = 0x8000000000000000;
        }
        else
        {
          v39 = (unint64_t)(int)v38 << 32;
        }
        v40 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
        v41 = *(unsigned __int8 *)(v40 + 46);
        if (v41 != 35 && v41 != 63)
        {
          __break(0xC471u);
          JUMPOUT(0x19644F658);
        }
        WebCore::RenderTableSection::paintRowGroupBorder(a1, a2, v78, v35 | (unint64_t)(v33 << 32), v39 | v36, 0, 382, *(_BYTE *)(v37 + 172) & 0xF, *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v40 + 88) + 24) + 172) & 0xF);
        return;
      case 1:
        if (__OFADD__((_DWORD)v30, (_DWORD)v17))
          v54 = (v30 >> 31) + 0x7FFFFFFF;
        else
          v54 = (v30 + (_DWORD)v17);
        if (v21 < 4)
        {
          if ((*(_BYTE *)(a1 + 123) & 4) != 0)
          {
            v77 = *(_DWORD *)(a1 + 244);
            if (v77 == 0x80000000)
              v67 = 0x7FFFFFFF;
            else
              v67 = -v77;
            goto LABEL_81;
          }
          if (!a7)
          {
            v67 = 0;
            goto LABEL_81;
          }
          v66 = *((_DWORD *)a7 + 39);
          v55 = *((_DWORD *)a7 + 41);
        }
        else
        {
          if (*(_DWORD *)(a1 + 228) <= a4)
          {
            __break(0xC471u);
            JUMPOUT(0x19644F7DCLL);
          }
          if (a4)
          {
            v55 = 0;
          }
          else
          {
            if (v20 == 1)
              v64 = (int *)(a1 + 252);
            else
              v64 = (int *)(a1 + 248);
            v65 = *v64;
            if (v65 == 0x80000000)
              v55 = 0x7FFFFFFF;
            else
              v55 = -v65;
          }
          v66 = *(_DWORD *)(*(_QWORD *)(a1 + 216) + 4 * a4);
        }
        v28 = __OFADD__(v66, v55);
        v67 = v66 + v55;
        if (v28)
          v67 = (v66 >> 31) + 0x7FFFFFFF;
LABEL_81:
        v68 = (v33 + v67);
        if (__OFADD__((_DWORD)v33, v67))
          v68 = (v33 >> 31) + 0x7FFFFFFF;
        v69 = *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 24) + 144) * 64.0;
        if (v69 >= 2147483650.0)
        {
          v70 = 0x7FFFFFFFLL;
        }
        else if (v69 <= -2147483650.0)
        {
          v70 = 0x80000000;
        }
        else
        {
          v70 = (int)v69;
        }
        v71 = WebCore::RenderTableSection::verticalRowGroupBorderHeight((WebCore::RenderTableSection *)a1, a7, v16, a4);
        v72 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
        v73 = *(unsigned __int8 *)(v72 + 46);
        if (v73 != 35 && v73 != 63)
        {
          __break(0xC471u);
          JUMPOUT(0x19644F6B8);
        }
        WebCore::RenderTableSection::paintRowGroupBorder(a1, a2, v78, v54 | (v68 << 32), v70 | (v71 << 32), 1, 377, *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 24) + 148) & 0xF, *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v72 + 88) + 24) + 148) & 0xF);
        return;
      case 2:
        v42 = *(_DWORD *)(a1 + 164);
        v43 = WebCore::RenderTableSection::offsetLeftForRowGroupBorder((WebCore::RenderTableSection *)a1, a7, (const WebCore::LayoutRect *)*(unsigned int *)(a1 + 160), a4);
        v44 = v19 + v43;
        if (__OFADD__(v19, v43))
          v44 = (v19 >> 31) + 0x7FFFFFFF;
        v45 = (v33 + v42);
        if (__OFADD__((_DWORD)v33, v42))
          v45 = (v33 >> 31) + 0x7FFFFFFF;
        v46 = WebCore::RenderTableSection::horizontalRowGroupBorderWidth((WebCore::RenderTableSection *)a1, a7, v17, a4, a5);
        v47 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 24);
        v48 = *(float *)(v47 + 192) * 64.0;
        if (v48 >= 2147483650.0)
        {
          v49 = 0x7FFFFFFF00000000;
        }
        else if (v48 <= -2147483650.0)
        {
          v49 = 0x8000000000000000;
        }
        else
        {
          v49 = (unint64_t)(int)v48 << 32;
        }
        v50 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
        v51 = *(unsigned __int8 *)(v50 + 46);
        if (v51 != 35 && v51 != 63)
        {
          __break(0xC471u);
          JUMPOUT(0x19644F678);
        }
        WebCore::RenderTableSection::paintRowGroupBorder(a1, a2, v78, v44 | (unint64_t)(v45 << 32), v49 | v46, 2, 361, *(_BYTE *)(v47 + 196) & 0xF, *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v50 + 88) + 24) + 196) & 0xF);
        return;
      case 3:
        if (v21 < 4)
        {
          if ((*(_BYTE *)(a1 + 123) & 4) != 0)
          {
            v57 = 0;
            goto LABEL_65;
          }
          if (a7)
          {
            v75 = *((_DWORD *)a7 + 39);
            v76 = *((_DWORD *)a7 + 41);
            v28 = __OFADD__(v75, v76);
            v56 = v75 + v76;
            if (v28)
              v56 = (v75 >> 31) + 0x7FFFFFFF;
          }
          else
          {
            v56 = 0;
          }
          v53 = *(_DWORD *)(a1 + 240);
        }
        else
        {
          if (*(_DWORD *)(a1 + 228) <= a4)
          {
            __break(0xC471u);
            JUMPOUT(0x19644F7D4);
          }
          if (*(_DWORD *)(a1 + 212) == a4 + 1)
          {
            if (v20 == 1)
              v52 = (int *)(a1 + 252);
            else
              v52 = (int *)(a1 + 248);
            v53 = *v52;
          }
          else
          {
            v53 = 0;
          }
          v56 = *(_DWORD *)(*(_QWORD *)(a1 + 216) + 4 * a4);
        }
        v28 = __OFADD__(v56, v53);
        v57 = v56 + v53;
        if (v28)
          v57 = (v56 >> 31) + 0x7FFFFFFF;
LABEL_65:
        v58 = (v33 + v57);
        if (__OFADD__((_DWORD)v33, v57))
          v58 = (v33 >> 31) + 0x7FFFFFFF;
        v59 = *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 24) + 120) * 64.0;
        if (v59 >= 2147483650.0)
        {
          v60 = 0x7FFFFFFFLL;
        }
        else if (v59 <= -2147483650.0)
        {
          v60 = 0x80000000;
        }
        else
        {
          v60 = (int)v59;
        }
        v61 = WebCore::RenderTableSection::verticalRowGroupBorderHeight((WebCore::RenderTableSection *)a1, a7, v16, a4);
        v62 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
        v63 = *(unsigned __int8 *)(v62 + 46);
        if (v63 != 35 && v63 != 63)
        {
          __break(0xC471u);
          JUMPOUT(0x19644F698);
        }
        WebCore::RenderTableSection::paintRowGroupBorder(a1, a2, v78, v30 | (v58 << 32), v60 | (v61 << 32), 3, 374, *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 24) + 124) & 0xF, *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v62 + 88) + 24) + 124) & 0xF);
        break;
      default:
        return;
    }
  }
}

BOOL WTF::WeakHashSet<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences(uint64_t *a1)
{
  uint64_t *v3[5];
  uint64_t *v4[5];

  if (!*a1 || !*(_DWORD *)(*a1 - 12))
    return 1;
  WTF::WeakHashSet<WebCore::RenderLayerModelObject,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v4, a1);
  WTF::WeakHashSet<WebCore::ContainerNode,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::end(v3, a1);
  return v4[1] == v3[1];
}

void std::stable_sort[abi:sn180100]<WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> *,BOOL (*)(WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&)>(WTF *a1, WTF *a2)
{
  unint64_t v4;
  const std::nothrow_t *v5;
  unint64_t v6;
  WTF **v7;
  BOOL v8;
  WTF **v9;
  BOOL (*v10)(uint64_t, uint64_t);

  v10 = WebCore::compareCellPositions;
  v4 = (a2 - a1) >> 3;
  if (a2 - a1 < 1)
  {
LABEL_5:
    std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&),WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>*>(a1, a2, (uint64_t (**)(WTF **, uint64_t))&v10, v4, 0, 0);
  }
  else
  {
    v5 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
    v6 = (a2 - a1) >> 3;
    while (1)
    {
      v7 = (WTF **)operator new(8 * v6, v5);
      if (v7)
        break;
      v8 = v6 > 1;
      v6 >>= 1;
      if (!v8)
        goto LABEL_5;
    }
    v9 = v7;
    std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&),WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>*>(a1, a2, (uint64_t (**)(WTF **, uint64_t))&v10, v4, v7, v6);
    operator delete(v9);
  }
}

BOOL WebCore::compareCellPositions(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 32) + 8);
  if (*(_BYTE *)(v2 + 46) != 39
    || (v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 32) + 8), *(_BYTE *)(v3 + 46) != 39))
  {
    __break(0xC471u);
    JUMPOUT(0x19644F99CLL);
  }
  return (*(_DWORD *)(v2 + 200) & 0x7FFFFFFFu) < (*(_DWORD *)(v3 + 200) & 0x7FFFFFFFu);
}

uint64_t std::sort[abi:sn180100]<WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> *,BOOL (*)(WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&)>(uint64_t a1, WTF **a2)
{
  unint64_t v2;
  uint64_t v3;
  BOOL (*v5)(uint64_t, uint64_t);

  v2 = 126 - 2 * __clz(((uint64_t)a2 - a1) >> 3);
  v5 = WebCore::compareCellPositionsWithOverflowingCells;
  if (a2 == (WTF **)a1)
    v3 = 0;
  else
    v3 = v2;
  return std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&),WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>*,false>(a1, a2, (uint64_t (**)(WTF **, WTF **))&v5, v3, 1);
}

BOOL WebCore::compareCellPositionsWithOverflowingCells(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 32) + 8);
  if (*(_BYTE *)(v3 + 46) != 39
    || (v4 = *(_QWORD *)(*(_QWORD *)a2 + 8), v5 = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8), *(_BYTE *)(v5 + 46) != 39))
  {
    __break(0xC471u);
    JUMPOUT(0x19644FA9CLL);
  }
  v6 = *(_DWORD *)(v3 + 200);
  v7 = *(_DWORD *)(v5 + 200);
  if (((v7 ^ v6) & 0x7FFFFFFF) != 0)
  {
    v8 = v6 & 0x7FFFFFFF;
    v9 = v7 & 0x7FFFFFFF;
  }
  else
  {
    v8 = *(_DWORD *)(v2 + 248) & 0x1FFFFFF;
    v9 = *(_DWORD *)(v4 + 248) & 0x1FFFFFF;
  }
  return v8 < v9;
}

uint64_t WTF::HashSet<WTF::CheckedPtr<WebCore::RenderTableCell,WTF::RawPtrTraits<WebCore::RenderTableCell>>,WTF::DefaultHash<WTF::CheckedPtr<WebCore::RenderTableCell,WTF::RawPtrTraits<WebCore::RenderTableCell>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::RenderTableCell,WTF::RawPtrTraits<WebCore::RenderTableCell>>>,WTF::HashTableTraits>::~HashSet(uint64_t **a1, void *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  uint64_t result;

  v3 = *a1;
  if (!*a1)
    return (uint64_t)a1;
  v4 = *((unsigned int *)v3 - 1);
  if (!(_DWORD)v4)
  {
LABEL_8:
    WTF::fastFree((WTF *)(v3 - 2), a2);
    return (uint64_t)a1;
  }
  v5 = *a1;
  while (1)
  {
    v6 = *v5;
    if ((unint64_t)(*v5 + 1) >= 2)
      break;
LABEL_7:
    ++v5;
    if (!--v4)
      goto LABEL_8;
  }
  v7 = *(_DWORD *)(v6 + 16);
  if (v7)
  {
    *(_DWORD *)(v6 + 16) = v7 - 1;
    goto LABEL_7;
  }
  result = 286;
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF **v4;
  uint64_t v5;
  WTF *v6;
  WTF *v7;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(WTF ***)a1;
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 1)
          WTF::fastFree(v6, a2);
        else
          --*(_DWORD *)v6;
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

uint64_t WebCore::RenderTableSection::imageChanged(uint64_t this, const void *a2, const WebCore::IntRect *a3)
{
  uint64_t v3;
  _BYTE v4[20];
  __int128 v5;
  char v6;

  v3 = *(_QWORD *)(this + 32);
  if (v3
    && *(_QWORD *)(v3 + 8)
    && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 24) + 8) + 40)
                                                                                         + 8)
                                                                             + 1944)
                                                                 + 24)
                                                     + 8)
                                         + 40)
                             + 8)
                 + 3382))
  {
    LOBYTE(v5) = 0;
    v6 = 0;
    v4[0] = 0;
    v4[16] = 0;
    return WebCore::RenderObject::issueRepaint(this, &v5, 0, 0, (uint64_t)v4);
  }
  return this;
}

uint64_t WebCore::RenderTableSection::splitColumn(uint64_t this, unsigned int a2, unsigned int a3)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  WebCore::RenderTableCell *v22;
  uint64_t v23;
  int v24;
  WTF *v25;
  uint64_t v26;
  _QWORD v27[2];

  v5 = this;
  v6 = *(_DWORD *)(this + 232);
  if (v6 > a2)
    *(_DWORD *)(this + 232) = v6 + 1;
  if (*(_DWORD *)(this + 212))
  {
    v7 = 0;
    v8 = 0;
    v9 = a2 + 1;
    v10 = -a3;
    do
    {
      v11 = *(_QWORD *)(v5 + 200) + v7;
      v27[0] = 0;
      v27[1] = 0;
      v25 = (WTF *)v27;
      v26 = 1;
      WTF::Vector<WebCore::RenderTableSection::CellStruct,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::insert<WebCore::RenderTableSection::CellStruct>(v11, a2 + 1, (unint64_t)&v25);
      this = (uint64_t)v25;
      if (v27 != (_QWORD *)v25 && v25 != 0)
      {
        v25 = 0;
        LODWORD(v26) = 0;
        this = WTF::fastFree((WTF *)this, v12);
      }
      v14 = *(_DWORD *)(v11 + 12);
      if (v14 <= a2)
      {
LABEL_38:
        __break(0xC471u);
        JUMPOUT(0x19644FE0CLL);
      }
      v15 = *(_QWORD *)v11;
      v16 = *(_QWORD *)v11 + 32 * a2;
      v17 = *(_DWORD *)(v16 + 12);
      if (v17)
      {
        if (v14 <= v9)
        {
          __break(0xC471u);
          JUMPOUT(0x19644FE1CLL);
        }
        WTF::Vector<WebCore::RenderTableCell *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<WebCore::RenderTableCell *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>((void **)(v15 + 32 * v9), *(void **)v16, v17);
        v19 = *(_DWORD *)(v11 + 12);
        if (v19 <= a2)
        {
          __break(0xC471u);
          JUMPOUT(0x19644FE24);
        }
        v20 = *(_QWORD *)v11 + 32 * a2;
        v21 = *(unsigned int *)(v20 + 12);
        if ((_DWORD)v21)
          v22 = *(WebCore::RenderTableCell **)(*(_QWORD *)v20 + 8 * v21 - 8);
        else
          v22 = 0;
        if ((*((_BYTE *)v22 + 251) & 4) != 0)
        {
          this = WebCore::RenderTableCell::parseColSpanFromDOM(v22);
          v19 = *(_DWORD *)(v11 + 12);
        }
        else
        {
          this = 1;
        }
        if (v19 <= a2)
        {
          __break(0xC471u);
          JUMPOUT(0x19644FE2CLL);
        }
        v23 = *(_QWORD *)v11;
        v24 = *(unsigned __int8 *)(*(_QWORD *)v11 + 32 * a2 + 24);
        if ((int)this - v24 >= a3)
        {
          if (v19 <= v9)
          {
            __break(0xC471u);
            JUMPOUT(0x19644FE34);
          }
          *(_BYTE *)(v23 + 32 * v9 + 24) = v24 != v10;
          goto LABEL_15;
        }
        if (v19 <= v9)
          goto LABEL_38;
        v18 = v23 + 32 * v9;
      }
      else
      {
        if (v14 <= v9)
        {
          __break(0xC471u);
          JUMPOUT(0x19644FE14);
        }
        v18 = v15 + 32 * v9;
      }
      *(_BYTE *)(v18 + 24) = 0;
LABEL_15:
      ++v8;
      v7 += 40;
    }
    while (v8 < *(unsigned int *)(v5 + 212));
  }
  return this;
}

void **WTF::Vector<WebCore::RenderTableCell *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<WebCore::RenderTableCell *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>(void **result, void *__src, unsigned int a3)
{
  void **v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  if (a3)
  {
    v4 = result;
    v5 = a3;
    v6 = *((unsigned int *)result + 3);
    v7 = v6 + a3;
    if (v7 <= *((unsigned int *)result + 2)
      || (result = WTF::Vector<WebCore::RenderTableCell *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,WebCore::RenderTableCell * const>(result, v6 + a3), v6 = *((unsigned int *)v4 + 3), v7 >= v6))
    {
      result = (void **)memcpy((char *)*v4 + 8 * v6, __src, 8 * v5);
      *((_DWORD *)v4 + 3) = v7;
    }
    else
    {
      __break(0xC471u);
    }
  }
  return result;
}

uint64_t WebCore::RenderTableSection::nodeAtPoint(uint64_t a1, int *a2, WebCore::HitTestResult *a3, float32x4_t *a4, _DWORD *a5, uint64_t a6)
{
  unint64_t v6;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  BOOL v24;
  int v25;
  int v26;
  int v27;
  signed int v28;
  _BOOL4 v29;
  signed int v30;
  int v31;
  BOOL v32;
  int v33;
  _BOOL4 v34;
  int v35;
  int v36;
  _BOOL4 v37;
  int v38;
  int32x4_t v40;
  unsigned __int32 v41;
  unsigned __int32 v42;
  int v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  unsigned int v48;
  int v49;
  int v50;
  int v51;
  char *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  unsigned int v61;
  uint64_t v62;
  const WebCore::RenderBox *v63;
  int v64;
  unsigned __int32 v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  float32x4_t v75;

  v6 = *(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32);
  if (!v6)
    return v6;
  v6 = *(_QWORD *)((*(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8);
  if (!v6)
    return v6;
  if (*(_BYTE *)(v6 + 46) != 39)
  {
    __break(0xC471u);
    JUMPOUT(0x196450348);
  }
  v13 = *(_DWORD *)(a1 + 152);
  v12 = *(_DWORD *)(a1 + 156);
  v14 = a5[1];
  v24 = __OFADD__(*a5, v13);
  LODWORD(v15) = *a5 + v13;
  if (v24)
    v15 = ((*a5 >> 31) + 0x7FFFFFFF);
  else
    v15 = v15;
  v24 = __OFADD__(v14, v12);
  LODWORD(v16) = v14 + v12;
  if (v24)
    v16 = (v14 >> 31) + 0x7FFFFFFF;
  else
    v16 = v16;
  v74 = v15 | (v16 << 32);
  if ((*(_BYTE *)(a1 + 22) & 1) == 0)
    goto LABEL_11;
  v20 = WebCore::RenderBox::overflowClipRect((_QWORD *)a1, (unsigned int *)&v74, 0, 0);
  if ((int)a2 < 1 || SHIDWORD(a2) < 1)
    return 0;
  v6 = 0;
  v21 = a4[1].i32[0];
  if (v21 < 1)
    return v6;
  v22 = a4[1].i32[1];
  if (v22 < 1)
    return v6;
  v23 = a4->i32[2];
  v24 = __OFADD__(v23, v21);
  v25 = v23 + v21;
  v26 = v24;
  v27 = (v23 >> 31) + 0x7FFFFFFF;
  if (!v24)
    v27 = v25;
  if (v27 <= (int)v20)
    return 0;
  v28 = v20 + (_DWORD)a2;
  v29 = __OFADD__((_DWORD)v20, (_DWORD)a2);
  v30 = v20 + (_DWORD)a2;
  if (__OFADD__((_DWORD)v20, (_DWORD)a2))
    v30 = (v20 >> 31) + 0x7FFFFFFF;
  if (v23 >= v30)
    return 0;
  v31 = a4->i32[3];
  v32 = __OFADD__(v31, v22);
  v33 = v31 + v22;
  v34 = __OFADD__(v31, v22);
  v35 = v33;
  if (v32)
    v35 = (v31 >> 31) + 0x7FFFFFFF;
  if (v35 <= SHIDWORD(v20))
    return 0;
  v36 = HIDWORD(v20) + HIDWORD(a2);
  v37 = __OFADD__(HIDWORD(v20), HIDWORD(a2));
  v38 = HIDWORD(v20) + HIDWORD(a2);
  if (__OFADD__(HIDWORD(v20), HIDWORD(a2)))
    v38 = (HIDWORD(v20) >> 31) + 0x7FFFFFFF;
  if (v31 >= v38)
    return 0;
  if (a4[4].i8[1])
    goto LABEL_11;
  if (v23 < (int)v20)
    goto LABEL_61;
  if (v29)
  {
    v28 = (v20 >> 31) + 0x7FFFFFFF;
    if (!v26)
      goto LABEL_56;
LABEL_111:
    v25 = (v23 >> 31) + 0x7FFFFFFF;
    goto LABEL_56;
  }
  if (v26)
    goto LABEL_111;
LABEL_56:
  if (v28 >= v25 && v31 >= SHIDWORD(v20))
  {
    if (v37)
    {
      v36 = (HIDWORD(v20) >> 31) + 0x7FFFFFFF;
      if (!v34)
        goto LABEL_60;
    }
    else if (!v34)
    {
      goto LABEL_60;
    }
    v33 = (v31 >> 31) + 0x7FFFFFFF;
LABEL_60:
    if (v36 >= v33)
      goto LABEL_11;
  }
LABEL_61:
  v40.i64[0] = v20;
  v40.i64[1] = (uint64_t)a2;
  v75 = vmulq_f32(vcvtq_f32_s32(v40), (float32x4_t)vdupq_n_s32(0x3C800000u));
  if (!WebCore::FloatQuad::intersectsRect((WebCore::FloatQuad *)&a4[2], (const WebCore::FloatRect *)&v75))
    return 0;
LABEL_11:
  if (WTF::WeakHashSet<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::computeSize(a1 + 256, a2)|| *(_BYTE *)(a1 + 280))
  {
    v17 = *(unsigned int *)(a1 + 71);
    v6 = v17 | ((unint64_t)*(unsigned __int8 *)(a1 + 75) << 32);
    if (!v6)
      return v6;
    v18 = *(_QWORD *)((v17 | ((unint64_t)*(unsigned __int8 *)(a1 + 75) << 32)) + 8);
    if (v18)
    {
      if (*(_BYTE *)(v18 + 46) != 39)
      {
        __break(0xC471u);
        JUMPOUT(0x196450368);
      }
      while (1)
      {
        v19 = *(_QWORD *)(v18 + 144);
        if ((!v19 || (*(_BYTE *)(v19 + 25) & 8) == 0)
          && (WebCore::RenderTableRow::nodeAtPoint(v18, a2, a3, a4, (unsigned int *)&v74, a6) & 1) != 0)
        {
          break;
        }
        v18 = WebCore::RenderTableRow::previousRow((WebCore::RenderTableRow *)v18);
        if (!v18)
          return 0;
      }
      return 1;
    }
    return 0;
  }
  if (*(_BYTE *)(a1 + 282))
    WebCore::RenderTableSection::recalcCells((WebCore::RenderTableSection *)a1);
  v42 = a4->u32[2];
  v41 = a4->u32[3];
  v75.i64[1] = a4[1].i64[0];
  if ((_DWORD)v74 == 0x80000000)
    v43 = 0x7FFFFFFF;
  else
    v43 = -(int)v74;
  if (HIDWORD(v74) == 0x80000000)
    v44 = 0x7FFFFFFF;
  else
    v44 = -HIDWORD(v74);
  v24 = __OFADD__(v42, v43);
  v45 = v42 + v43;
  if (v24)
    v45 = (v42 >> 31) + 0x7FFFFFFF;
  v75.i32[0] = v45;
  v46 = v41 + v44;
  if (__OFADD__(v41, v44))
    v46 = (v41 >> 31) + 0x7FFFFFFF;
  v75.i32[1] = v46;
  v47 = WebCore::RenderTableSection::logicalRectForWritingModeAndDirection((WebCore::RenderTableSection *)a1, (const WebCore::LayoutRect *)&v75);
  v48 = v47;
  v50 = v49;
  v52 = WebCore::RenderTableSection::spannedRows(*(char **)(a1 + 216), *(_DWORD *)(a1 + 228), HIDWORD(v47), v51);
  LODWORD(v53) = (_DWORD)v52;
  v54 = (unint64_t)v52 >> 32;
  v55 = WebCore::RenderTableSection::spannedColumns(*(_QWORD *)(a1 + 32), v48, v50);
  if (v53 >= v54)
    return 0;
  v56 = v55;
  v57 = HIDWORD(v55);
  if (v55 >= HIDWORD(v55))
    return 0;
  v53 = v53;
  v69 = HIDWORD(v55);
  v70 = v54;
  v68 = v55;
  do
  {
    v71 = v53;
    while (1)
    {
LABEL_79:
      if (*(_BYTE *)(a1 + 282))
        WebCore::RenderTableSection::recalcCells((WebCore::RenderTableSection *)a1);
      if (v53 >= *(unsigned int *)(a1 + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x1964503BCLL);
      }
      v58 = *(_QWORD *)(a1 + 200) + 40 * v53;
      if (*(unsigned int *)(v58 + 12) <= v56)
      {
        __break(0xC471u);
        JUMPOUT(0x1964503C4);
      }
      v59 = *(_QWORD *)v58 + 32 * v56;
      v60 = *(_DWORD *)(v59 + 12);
      if (v60)
        break;
      if (++v56 >= v57)
      {
        v64 = *a2 & 0x8000;
        goto LABEL_94;
      }
    }
    v61 = v60 - 1;
    v62 = 8 * (v60 - 1);
    do
    {
      if (*(_DWORD *)(v59 + 12) <= v61)
      {
        __break(0xC471u);
        JUMPOUT(0x1964503B4);
      }
      v63 = *(const WebCore::RenderBox **)(*(_QWORD *)v59 + v62);
      v73 = WebCore::RenderBox::flipForWritingModeForChild((WebCore::RenderBox *)a1, v63, (const WebCore::LayoutPoint *)&v74);
      if (((*(uint64_t (**)(const WebCore::RenderBox *, int *, WebCore::HitTestResult *, float32x4_t *, unint64_t *, uint64_t))(*(_QWORD *)v63 + 336))(v63, a2, a3, a4, &v73, a6) & 1) != 0)
      {
        v65 = a4->u32[1];
        LODWORD(v66) = a4->i32[0] - v73;
        if (__OFSUB__(a4->i32[0], (_DWORD)v73))
          v66 = ((unsigned __int32)a4->i32[0] >> 31) + 0x7FFFFFFF;
        else
          v66 = v66;
        LODWORD(v67) = v65 - HIDWORD(v73);
        if (__OFSUB__(v65, HIDWORD(v73)))
          v67 = (v65 >> 31) + 0x7FFFFFFF;
        else
          v67 = v67;
        v72 = v66 | (v67 << 32);
        WebCore::RenderObject::updateHitTestResult((unsigned int *)a1, a3, (const WebCore::LayoutPoint *)&v72);
        return 1;
      }
      v62 -= 8;
      --v61;
    }
    while (v61 != -1);
    v64 = *a2 & 0x8000;
    v54 = v70;
    if (v64)
    {
      ++v56;
      v57 = v69;
      v53 = v71;
      if (v56 < v69)
        goto LABEL_79;
    }
    else
    {
      v57 = v69;
      v53 = v71;
    }
LABEL_94:
    v6 = 0;
    if (!v64)
      break;
    ++v53;
    v56 = v68;
  }
  while (v53 < v54);
  return v6;
}

uint64_t *WebCore::RenderTableSection::removeCachedCollapsedBorders(WebCore::RenderTableSection *this, const WebCore::RenderTableCell *a2)
{
  uint64_t *result;
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  const WebCore::RenderTableCell *v14;
  uint64_t v15;

  result = (uint64_t *)WebCore::RenderTableSection::table(this);
  if ((*((_BYTE *)result + 124) & 4) != 0)
  {
    v5 = (uint64_t **)((char *)this + 272);
    v14 = a2;
    v15 = 0;
    v6 = WTF::HashTable<std::pair<WebCore::RenderTableCell const*,int>,WTF::KeyValuePair<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue>>,WTF::DefaultHash<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashMap<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue,WTF::DefaultHash<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashTraits<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashTraits<WebCore::CollapsedBorderValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebCore::RenderTableCell const*,int>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue,WTF::DefaultHash<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashTraits<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashTraits<WebCore::CollapsedBorderValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WebCore::RenderTableCell const*,int>>>,std::pair<WebCore::RenderTableCell const*,int>>((uint64_t *)this + 34, (uint64_t)&v14);
    v7 = 0;
    v8 = *((_QWORD *)this + 34);
    if (v8)
      v7 = (uint64_t *)(v8 + 40 * *(unsigned int *)(v8 - 4));
    if (v7 != v6)
      WTF::HashTable<std::pair<WebCore::RenderTableCell const*,int>,WTF::KeyValuePair<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue>>,WTF::DefaultHash<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashMap<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue,WTF::DefaultHash<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashTraits<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashTraits<WebCore::CollapsedBorderValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebCore::RenderTableCell const*,int>>>::removeWithoutEntryConsistencyCheck((uint64_t *)this + 34, v6);
    v14 = a2;
    v15 = 1;
    v9 = WTF::HashTable<std::pair<WebCore::RenderTableCell const*,int>,WTF::KeyValuePair<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue>>,WTF::DefaultHash<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashMap<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue,WTF::DefaultHash<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashTraits<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashTraits<WebCore::CollapsedBorderValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebCore::RenderTableCell const*,int>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue,WTF::DefaultHash<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashTraits<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashTraits<WebCore::CollapsedBorderValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WebCore::RenderTableCell const*,int>>>,std::pair<WebCore::RenderTableCell const*,int>>((uint64_t *)this + 34, (uint64_t)&v14);
    v10 = *v5;
    if (*v5)
      v10 += 5 * *((unsigned int *)v10 - 1);
    if (v10 != v9)
      WTF::HashTable<std::pair<WebCore::RenderTableCell const*,int>,WTF::KeyValuePair<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue>>,WTF::DefaultHash<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashMap<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue,WTF::DefaultHash<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashTraits<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashTraits<WebCore::CollapsedBorderValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebCore::RenderTableCell const*,int>>>::removeWithoutEntryConsistencyCheck((uint64_t *)this + 34, v9);
    v14 = a2;
    v15 = 2;
    v11 = WTF::HashTable<std::pair<WebCore::RenderTableCell const*,int>,WTF::KeyValuePair<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue>>,WTF::DefaultHash<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashMap<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue,WTF::DefaultHash<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashTraits<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashTraits<WebCore::CollapsedBorderValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebCore::RenderTableCell const*,int>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue,WTF::DefaultHash<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashTraits<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashTraits<WebCore::CollapsedBorderValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WebCore::RenderTableCell const*,int>>>,std::pair<WebCore::RenderTableCell const*,int>>((uint64_t *)this + 34, (uint64_t)&v14);
    v12 = *v5;
    if (*v5)
      v12 += 5 * *((unsigned int *)v12 - 1);
    if (v12 != v11)
      WTF::HashTable<std::pair<WebCore::RenderTableCell const*,int>,WTF::KeyValuePair<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue>>,WTF::DefaultHash<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashMap<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue,WTF::DefaultHash<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashTraits<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashTraits<WebCore::CollapsedBorderValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebCore::RenderTableCell const*,int>>>::removeWithoutEntryConsistencyCheck((uint64_t *)this + 34, v11);
    v14 = a2;
    v15 = 3;
    result = WTF::HashTable<std::pair<WebCore::RenderTableCell const*,int>,WTF::KeyValuePair<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue>>,WTF::DefaultHash<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashMap<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue,WTF::DefaultHash<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashTraits<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashTraits<WebCore::CollapsedBorderValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebCore::RenderTableCell const*,int>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue,WTF::DefaultHash<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashTraits<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashTraits<WebCore::CollapsedBorderValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WebCore::RenderTableCell const*,int>>>,std::pair<WebCore::RenderTableCell const*,int>>((uint64_t *)this + 34, (uint64_t)&v14);
    v13 = *v5;
    if (*v5)
      v13 += 5 * *((unsigned int *)v13 - 1);
    if (v13 != result)
      return WTF::HashTable<std::pair<WebCore::RenderTableCell const*,int>,WTF::KeyValuePair<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue>>,WTF::DefaultHash<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashMap<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue,WTF::DefaultHash<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashTraits<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashTraits<WebCore::CollapsedBorderValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebCore::RenderTableCell const*,int>>>::removeWithoutEntryConsistencyCheck((uint64_t *)this + 34, result);
  }
  return result;
}

uint64_t *WebCore::RenderTableSection::cachedCollapsedBorder@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t *result;
  uint64_t *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  int v13;
  char v14;
  char v15;

  v11 = a2;
  v12 = a3;
  result = WTF::HashTable<std::pair<WebCore::RenderTableCell const*,int>,WTF::KeyValuePair<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue>>,WTF::DefaultHash<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashMap<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue,WTF::DefaultHash<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashTraits<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashTraits<WebCore::CollapsedBorderValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebCore::RenderTableCell const*,int>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue,WTF::DefaultHash<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashTraits<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashTraits<WebCore::CollapsedBorderValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WebCore::RenderTableCell const*,int>>>,std::pair<WebCore::RenderTableCell const*,int>>((uint64_t *)(a1 + 272), (uint64_t)&v11);
  v7 = *(uint64_t **)(a1 + 272);
  if (v7)
    v7 += 5 * *((unsigned int *)v7 - 1);
  if (v7 == result)
  {
    v12 = 1;
    v13 = 1077936128;
    v14 = 0;
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_BYTE *)(a4 + 16) = 96;
    return (uint64_t *)_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS8_17StyleCurrentColorEN3WTF9UniqueRefINS8_13StyleColorMixEEENSC_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSC_INSF_INS8_17HSLFunctionModernEEEEENSC_INSF_INS8_11HWBFunctionEEEEENSC_INSF_INS8_11LabFunctionEEEEENSC_INSF_INS8_11LCHFunctionEEEEENSC_INSF_INS8_13OKLabFunctionEEEEENSC_INSF_INS8_13OKLCHFunctionEEEEENSC_INSF_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEEEENSC_INSF_INS11_INS8_21ExtendedLinearEncodedIfS1N_EEEEEEEENSC_INSF_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSC_INSF_INS1X_INS1Y_IfLS1Z_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS29_1EJS9_SA_SE_SI_SL_SO_SR_SU_SX_S10_S17_S1C_S1H_S1M_S1R_S1W_S23_S27_EEEEEEDcS2B_DpT0_(&v15, &v11);
  }
  else
  {
    *(_DWORD *)a4 = *((_DWORD *)result + 4);
    v8 = result[3];
    *(_QWORD *)(a4 + 8) = v8;
    if ((v8 & 0x8000000000000) != 0)
    {
      v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFLL);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
    }
    *(_BYTE *)(a4 + 16) = *((_BYTE *)result + 32);
  }
  return result;
}

uint64_t WebCore::RenderText::operator new(uint64_t this)
{
  if (this == 120)
    return bmalloc::api::isoAllocate();
  __break(0xC471u);
  return this;
}

void WebCore::SecureTextTimer::fired(WebCore::SecureTextTimer *this)
{
  *((_DWORD *)this + 14) = 0;
  WebCore::RenderText::setText(*((const WTF::StringImpl ***)this + 6), (WTF **)(*((_QWORD *)this + 6) + 104), (const WTF::StringImpl *)1);
}

void WebCore::RenderText::setText(const WTF::StringImpl **this, WTF **a2, const WTF::StringImpl *a3)
{
  int v6;
  BOOL v7;
  const WTF::StringImpl *v8;
  int v9;
  const WTF::StringImpl *i;
  uint64_t v11;
  WebCore::LayoutIntegration::LineLayout *v12;

  v6 = WTF::equal(*a2, this[13], a3);
  (*((void (**)(const WTF::StringImpl **, WTF **, const WTF::StringImpl *))*this + 90))(this, a2, a3);
  if (v6)
    v7 = (_DWORD)a3 == 0;
  else
    v7 = 0;
  if (!v7)
  {
    v8 = this[13];
    v9 = v8 ? *((_DWORD *)v8 + 1) : 0;
    if (*((unsigned __int8 *)this + 46) - 32 <= 0xFFFFFFFD)
    {
      for (i = this[4]; i; i = *(const WTF::StringImpl **)(v11 + 32))
      {
        v11 = *((_QWORD *)i + 1);
        if (!v11 || (*(_BYTE *)(v11 + 22) & 4) == 0)
          break;
        if ((*(_BYTE *)(v11 + 52) & 7) == 1)
        {
          if (*(_DWORD *)(v11 + 240) == 1)
          {
            v12 = *(WebCore::LayoutIntegration::LineLayout **)(v11 + 232);
            if (v12)
            {
              if (WebCore::LayoutIntegration::shouldInvalidateLineLayoutPathAfterChangeFor((WebCore::RenderObject *)v11, (uint64_t)this, *(_QWORD *)(v11 + 232), 2)|| (WebCore::LayoutIntegration::LineLayout::updateTextContent(v12, (const WebCore::RenderText *)this, 0, v9) & 1) == 0)
              {
                WebCore::RenderBlockFlow::invalidateLineLayoutPath(v11, 2);
              }
            }
          }
          return;
        }
      }
    }
  }
}

uint64_t WebCore::capitalize@<X0>(WTF::StringImpl **a1@<X0>, int a2@<W1>, WTF::StringImpl **a3@<X8>)
{
  WTF::StringImpl *v6;
  int v7;
  uint64_t v8;
  WTF *v9;
  WTF *v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  WTF::StringImpl *v16;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  int v28;
  _BYTE *v30;
  unint64_t v31;
  int i;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  _WORD *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  unsigned int v42;
  unsigned __int8 *v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  unsigned __int8 *v47;
  unint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v53;
  __int16 v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  unsigned int v58;
  char v59;
  __int16 v60;

  v6 = *a1;
  if (*a1)
  {
    v7 = *((_DWORD *)v6 + 1);
    v8 = (v7 + 1);
    if (v7 == -1)
    {
      __break(0xC471u);
      JUMPOUT(0x196450C4CLL);
    }
    if ((v8 & 0x80000000) != 0)
      goto LABEL_111;
  }
  else
  {
    v8 = 1;
  }
  v9 = (WTF *)WTF::fastMalloc((WTF *)(2 * v8));
  v10 = v9;
  if (a2 == 160)
    v11 = 32;
  else
    v11 = a2;
  *(_WORD *)v9 = v11;
  if (v8 >= 2)
  {
    v12 = 0;
    v13 = (*((_DWORD *)v6 + 1) + 1) - 1;
    while (v13 != v12)
    {
      v14 = *((_QWORD *)v6 + 1);
      if ((*((_BYTE *)v6 + 16) & 4) != 0)
        v15 = *(unsigned __int8 *)(v14 + v12);
      else
        v15 = *(unsigned __int16 *)(v14 + 2 * v12);
      if (v8 - 1 == v12)
      {
        __break(0xC471u);
        JUMPOUT(0x196450C44);
      }
      if (v15 == 160)
        LOWORD(v15) = 32;
      *((_WORD *)v9 + ++v12) = v15;
      if (v8 - 1 == v12)
        goto LABEL_18;
    }
LABEL_111:
    __break(0xC471u);
    JUMPOUT(0x196450B50);
  }
LABEL_18:
  if (WTF::wordBreakIterator())
  {
    v56 = 0;
    v57 = 0;
    v58 = 0;
    v59 = 1;
    WTF::StringBuilder::reserveCapacity((WTF::StringBuilder *)&v56);
    v17 = ubrk_first();
    v18 = ubrk_next();
    while (v18 != -1)
    {
      v19 = v18;
      if (!v17)
        goto LABEL_38;
      v20 = v17 - 1;
      if (*((_DWORD *)v6 + 1) <= v20)
      {
        __break(0xC471u);
        JUMPOUT(0x196450BB4);
      }
      v21 = *((_QWORD *)v6 + 1);
      if ((*((_BYTE *)v6 + 16) & 4) != 0)
        v22 = *(unsigned __int8 *)(v21 + v20);
      else
        v22 = *(unsigned __int16 *)(v21 + 2 * v20);
      v23 = MEMORY[0x19AEA8610](v22);
      v24 = v23;
      if (v23 < 0x10000)
        v25 = 1;
      else
        v25 = 2;
      if (__CFADD__(v25, v58))
        v26 = 0xFFFFFFFFLL;
      else
        v26 = v25 + v58;
      v27 = v57;
      if (v57 || (v27 = v56) != 0)
      {
        v28 = *((_DWORD *)v27 + 4) & 4;
        if (v23 <= 0xFF && v28 != 0)
        {
LABEL_36:
          v30 = (_BYTE *)MEMORY[0x19AEA4824](&v56, v26);
          if (v30)
            *v30 = v24;
          goto LABEL_38;
        }
      }
      else if (v23 <= 0xFF)
      {
        goto LABEL_36;
      }
      v39 = (_WORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v56);
      if (v39)
      {
        if (HIWORD(v24))
        {
          v54 = v24 & 0x3FF | 0xDC00;
          v24 = (v24 >> 10) - 10304;
          v39[1] = v54;
        }
        *v39 = v24;
      }
LABEL_38:
      if ((int)(v17 + 1) < v19)
      {
        v31 = v17;
        for (i = ~v17 + v19; i; --i)
        {
          if (v31 >= *((unsigned int *)v6 + 1))
          {
            __break(0xC471u);
            JUMPOUT(0x196450B94);
          }
          v33 = *((_QWORD *)v6 + 1);
          if ((*((_BYTE *)v6 + 16) & 4) != 0)
            v34 = *(unsigned __int8 *)(v33 + v31);
          else
            v34 = *(unsigned __int16 *)(v33 + 2 * v31);
          v60 = v34;
          if (v57)
          {
            v35 = v58;
            if (v58 < *((_DWORD *)v57 + 1) && v56 == 0)
            {
              if ((*((_BYTE *)v57 + 16) & 4) == 0)
              {
                v37 = *((_QWORD *)v57 + 1);
                ++v58;
                *(_WORD *)(v37 + 2 * v35) = v34;
                goto LABEL_49;
              }
              if (v34 <= 0xFF)
              {
                v38 = *((_QWORD *)v57 + 1);
                ++v58;
                *(_BYTE *)(v38 + v35) = v34;
                goto LABEL_49;
              }
            }
          }
          WTF::StringBuilder::append();
LABEL_49:
          ++v31;
        }
      }
      v18 = ubrk_next();
      v17 = v19;
    }
    v40 = v57;
    if (v57)
    {
      v41 = v57;
    }
    else
    {
      v41 = v56;
      if (!v56)
        goto LABEL_66;
    }
    if ((*((_BYTE *)v41 + 16) & 4) == 0)
    {
      v42 = v58;
      if (v58)
      {
        v53 = v56;
        if (!v56)
          v53 = v57;
        if ((v58 & 0x80000000) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x196450C30);
        }
        v44 = 0;
        v43 = (unsigned __int8 *)*((_QWORD *)v53 + 1);
      }
      else
      {
        v44 = 0;
        v43 = 0;
      }
LABEL_72:
      v45 = v44 | v42;
      v46 = *a1;
      if (*a1)
      {
        v47 = (unsigned __int8 *)*((_QWORD *)v46 + 1);
        v48 = *((unsigned int *)v46 + 1) | ((unint64_t)((*((_DWORD *)v46 + 4) >> 2) & 1) << 32);
      }
      else
      {
        v47 = 0;
        v48 = 0x100000000;
      }
      if (WTF::operator==(v43, v45, v47, v48))
      {
        v49 = *a1;
        if (!*a1)
          goto LABEL_78;
      }
      else
      {
        v49 = v56;
        if (!v56)
        {
          WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v56);
          WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v56);
          v49 = v56;
          if (!v56)
            goto LABEL_78;
        }
      }
      *(_DWORD *)v49 += 2;
LABEL_78:
      *a3 = v49;
      v50 = v57;
      v57 = 0;
      if (v50)
      {
        if (*(_DWORD *)v50 == 2)
          WTF::StringImpl::destroy(v50, v16);
        else
          *(_DWORD *)v50 -= 2;
      }
      v51 = v56;
      v56 = 0;
      if (v51)
      {
        if (*(_DWORD *)v51 == 2)
          WTF::StringImpl::destroy(v51, v16);
        else
          *(_DWORD *)v51 -= 2;
      }
      return WTF::fastFree(v10, v16);
    }
LABEL_66:
    v42 = v58;
    if (v58)
    {
      if (v56)
        v40 = v56;
      if ((v58 & 0x80000000) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x196450BE0);
      }
      v43 = (unsigned __int8 *)*((_QWORD *)v40 + 1);
    }
    else
    {
      v43 = 0;
    }
    v44 = 0x100000000;
    goto LABEL_72;
  }
  v55 = *a1;
  if (*a1)
    *(_DWORD *)v55 += 2;
  *a3 = v55;
  return WTF::fastFree(v10, v16);
}

const char *WebCore::RenderText::renderName(WebCore::RenderText *this)
{
  return "RenderText";
}

BOOL WebCore::RenderText::computeUseBackslashAsYenSymbol(WebCore::RenderText *this)
{
  uint64_t v1;
  _BOOL8 result;
  uint64_t v3;

  v1 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 8) + 112);
  result = 1;
  if (!*(_BYTE *)(v1 + 260))
  {
    if ((*(_WORD *)(v1 + 228) & 0x200) != 0)
      return 0;
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1744);
    if (!v3 || PAL::TextEncoding::backslashAsCurrencySymbol((PAL::TextEncoding *)(v3 + 8)) == 92)
      return 0;
  }
  return result;
}

_QWORD *WebCore::RenderText::removeAndDestroyTextBoxes(WebCore::RenderText *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 3405))
  {
    v2 = (_QWORD *)*((_QWORD *)this + 8);
    if (v2)
    {
      do
      {
        v9 = v2[3];
        if (v9)
        {
          if ((*(_WORD *)(v9 + 52) & 0x100) == 0)
            (*(void (**)(_QWORD))(*(_QWORD *)v9 + 184))(v2[3]);
          if (*(_QWORD **)(v9 + 72) == v2)
            *(_QWORD *)(v9 + 72) = v2[1];
          if (*(_QWORD **)(v9 + 80) == v2)
            *(_QWORD *)(v9 + 80) = v2[2];
          v10 = v2[1];
          if (v10)
            *(_QWORD *)(v10 + 16) = v2[2];
          v11 = v2[2];
          if (v11)
            *(_QWORD *)(v11 + 8) = v10;
          v2[3] = 0;
        }
        v2 = (_QWORD *)v2[8];
      }
      while (v2);
    }
    else
    {
      v3 = *((_QWORD *)this + 4);
      if (v3)
      {
        v4 = *(_QWORD *)(v3 + 8);
        if (v4)
          (*(void (**)(uint64_t, WebCore::RenderText *))(*(_QWORD *)v4 + 672))(v4, this);
      }
    }
  }
  v7 = (_QWORD *)*((_QWORD *)this + 8);
  v6 = (_QWORD *)((char *)this + 64);
  result = v7;
  if (v7)
  {
    do
    {
      v8 = (_QWORD *)result[8];
      (*(void (**)(_QWORD *))(*result + 8))(result);
      result = v8;
    }
    while (v8);
    *v6 = 0;
    v6[1] = 0;
  }
  return result;
}

uint64_t WTF::WeakHashMap<WebCore::RenderText,std::unique_ptr<WebCore::SecureTextTimer>,WTF::SingleThreadWeakPtrImpl>::remove(uint64_t a1, void *a2)
{
  unsigned int v3;
  uint64_t result;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  int i;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  unsigned int v19;

  v3 = dword_1EE2F93A0++;
  if (v3 > *(_DWORD *)algn_1EE2F93A4)
    WTF::WeakHashMap<WebCore::RenderText,std::unique_ptr<WebCore::SecureTextTimer>,WTF::SingleThreadWeakPtrImpl>::removeNullReferences(&WebCore::secureTextTimers(void)::map, a2);
  result = *(_QWORD *)(a1 + 8);
  if (result)
  {
    if (*(_QWORD *)(result + 8))
    {
      v5 = WebCore::secureTextTimers(void)::map;
      if (WebCore::secureTextTimers(void)::map)
      {
        v6 = *(_DWORD *)(WebCore::secureTextTimers(void)::map - 8);
        v7 = (~(result << 32) + result) ^ ((unint64_t)(~(result << 32) + result) >> 22);
        v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
        v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
        v10 = v6 & ((v9 >> 31) ^ v9);
        for (i = 1; ; ++i)
        {
          v12 = v10;
          v13 = *(_QWORD *)(WebCore::secureTextTimers(void)::map + 16 * v10);
          if (v13 != -1)
          {
            if (!v13)
              return result;
            if (v13 == result)
              break;
          }
          v10 = (v12 + i) & v6;
        }
        if ((_DWORD)v12 != *(_DWORD *)(WebCore::secureTextTimers(void)::map - 4))
        {
          v14 = (_QWORD *)(WebCore::secureTextTimers(void)::map + 16 * v12);
          *v14 = 0;
          if (*(_DWORD *)result == 1)
            WTF::fastFree((WTF *)result, a2);
          else
            --*(_DWORD *)result;
          *v14 = -1;
          v15 = v5 + 16 * v12;
          result = *(_QWORD *)(v15 + 8);
          *(_QWORD *)(v15 + 8) = 0;
          if (result)
          {
            WebCore::TimerBase::~TimerBase((WebCore::TimerBase *)result);
            result = WTF::fastFree(v16, v17);
          }
          ++*(_DWORD *)(WebCore::secureTextTimers(void)::map - 16);
          if (WebCore::secureTextTimers(void)::map)
            v18 = *(_DWORD *)(WebCore::secureTextTimers(void)::map - 12) - 1;
          else
            v18 = -1;
          *(_DWORD *)(WebCore::secureTextTimers(void)::map - 12) = v18;
          if (WebCore::secureTextTimers(void)::map)
          {
            v19 = *(_DWORD *)(WebCore::secureTextTimers(void)::map - 4);
            if (6 * *(_DWORD *)(WebCore::secureTextTimers(void)::map - 12) < v19 && v19 >= 9)
              return (uint64_t)WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::SecureTextTimer>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::SecureTextTimer>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::SecureTextTimer>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<std::unique_ptr<WebCore::SecureTextTimer>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(&WebCore::secureTextTimers(void)::map, v19 >> 1, 0);
          }
        }
      }
    }
  }
  return result;
}

WTF::StringImpl *WTF::HashMap<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>,WTF::String,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::remove<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>(WTF::StringImpl *result, void *a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  int i;
  uint64_t v8;
  uint64_t v9;

  if (WebCore::originalTextMap(void)::map)
  {
    v2 = *(_DWORD *)(WebCore::originalTextMap(void)::map - 8);
    v3 = ((unint64_t)result + ~((_QWORD)result << 32)) ^ (((unint64_t)result + ~((_QWORD)result << 32)) >> 22);
    v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
    v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
    v6 = v2 & ((v5 >> 31) ^ v5);
    for (i = 1; ; ++i)
    {
      v8 = v6;
      v9 = *(_QWORD *)(WebCore::originalTextMap(void)::map + 16 * v6);
      if (v9 != -1)
      {
        if (!v9)
          return result;
        if (*(WTF::StringImpl **)(v9 + 8) == result)
          break;
      }
      v6 = (v8 + i) & v2;
    }
    if ((_DWORD)v8 != *(_DWORD *)(WebCore::originalTextMap(void)::map - 4))
      return WTF::HashTable<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>,WTF::String>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>,WTF::String,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>>::remove((WTF **)(WebCore::originalTextMap(void)::map + 16 * v8), a2);
  }
  return result;
}

_WORD *WebCore::RenderText::setInlineWrapperForDisplayContents(_WORD *this, WebCore::RenderInline *a2)
{
  void *v2;
  _WORD *v3;
  _WORD *v4;
  _BYTE v5[24];
  WTF *v6;
  WebCore::RenderInline *v7;

  v7 = a2;
  if (a2)
  {
    v4 = this;
    {
      WebCore::inlineWrapperForDisplayContentsMap(void)::map = 0;
    }
    WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>::WeakRef<void>((uint64_t *)&v6, (uint64_t)this);
    WTF::HashMap<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>,WTF::WeakPtr<WebCore::RenderInline,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakPtr<WebCore::RenderInline,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::add<WebCore::RenderInline*&>(&WebCore::inlineWrapperForDisplayContentsMap(void)::map, &v6, (uint64_t *)&v7, (uint64_t)v5);
    this = v6;
    v6 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 1)
        this = (_WORD *)WTF::fastFree((WTF *)this, v2);
      else
        --*(_DWORD *)this;
    }
    v4[59] |= 0x1000u;
  }
  else if ((this[59] & 0x1000) != 0)
  {
    v3 = this;
    {
      WebCore::inlineWrapperForDisplayContentsMap(void)::map = 0;
    }
    this = (_WORD *)WTF::HashMap<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>,WTF::WeakPtr<WebCore::RenderInline,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakPtr<WebCore::RenderInline,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::remove<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>(&WebCore::inlineWrapperForDisplayContentsMap(void)::map, (uint64_t)this);
    v3[59] &= ~0x1000u;
  }
  return this;
}

uint64_t WebCore::RenderText::originalText@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  if ((*(_WORD *)(this + 118) & 0x800) != 0)
  {
    {
      WebCore::originalTextMap(void)::map = 0;
    }
    return WTF::HashMap<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>,WTF::String,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::get<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>((uint64_t)&WebCore::originalTextMap(void)::map, this, a2);
  }
  else
  {
    v2 = *(_DWORD **)(this + 104);
    if (v2)
      *v2 += 2;
    *a2 = v2;
  }
  return this;
}

uint64_t WTF::HashMap<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>,WTF::String,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::get<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  int v6;
  int i;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;

  v4 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v6 = *(_DWORD *)(v4 - 8);
    result = WTF::PtrHashBase<WTF::AtomString *,false>::hash(a2);
    for (i = 0; ; result = (i + v8))
    {
      v8 = result & v6;
      v9 = *(_QWORD *)(v4 + 16 * v8);
      if (v9 != -1)
      {
        if (!v9)
          goto LABEL_10;
        if (*(_QWORD *)(v9 + 8) == a2)
          break;
      }
      ++i;
    }
    v10 = *(_DWORD **)(v4 + 16 * v8 + 8);
    if (v10)
      *v10 += 2;
  }
  else
  {
LABEL_10:
    v10 = 0;
  }
  *a3 = v10;
  return result;
}

uint64_t WebCore::RenderText::boundingRects(WebCore::LayoutIntegration::LineLayout *a1, WebCore::RenderObject *a2, _DWORD *a3)
{
  WebCore::LayoutIntegration::LineLayout *v5;
  WebCore::LayoutIntegration::LineLayout *v6;
  int v7;
  int v8;
  uint64_t result;
  double v10;
  float v11;
  float v12;
  float v13;
  int v14;
  unsigned int v15;
  double v16;
  unsigned int v17;
  double v18;
  int v19;
  double v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 *v28;
  __int128 v29;
  _BYTE v30[16];
  int v31;
  char v32;
  _QWORD v33[2];
  int v34;

  v5 = a1;
  v6 = (WebCore::LayoutIntegration::LineLayout *)WebCore::LayoutIntegration::LineLayout::containing(a1, a2);
  if (!v6)
    goto LABEL_46;
  WebCore::LayoutIntegration::LineLayout::textBoxesFor(v6, v5, (uint64_t)v33);
  v7 = v34;
  v30[0] = 0;
  v31 = -1;
  if (v34 == -1)
    goto LABEL_5;
  while (1)
  {
    ((void (*)(__int128 *, _BYTE *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v7])(&v29, v30, v33);
    v31 = v7;
    if (v34 != -1)
      ((void (*)(__int128 *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v34])(&v29, v33);
LABEL_5:
    LOBYTE(v33[0]) = 0;
    v34 = -1;
    v8 = v31;
    if (v31 != -1)
    {
      ((void (*)(__int128 *, _QWORD *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_2[v31])(&v29, v33, v30);
      v34 = v8;
    }
    result = WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v33);
    if ((result & 1) != 0)
      break;
    v5 = (WebCore::LayoutIntegration::LineLayout *)&v32;
    while (v34 != -1)
    {
      *(_QWORD *)&v29 = &v32;
      if ((((uint64_t (*)(__int128 *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v34])(&v29, v33) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19645152CLL);
      }
      if (v34 == -1)
        break;
      *(_QWORD *)&v29 = &v32;
      v10 = ((float (*)(__int128 *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box32visualRectIgnoringBlockDirectionEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_1[v34])(&v29, v33)* 64.0;
      v14 = (int)v10;
      if (v10 <= -2147483650.0)
        v14 = 0x80000000;
      if (v10 < 2147483650.0)
        v15 = v14;
      else
        v15 = 0x7FFFFFFF;
      v16 = v11 * 64.0;
      v17 = (int)v16;
      if (v16 <= -2147483650.0)
        v17 = 0x80000000;
      if (v16 >= 2147483650.0)
        v17 = 0x7FFFFFFF;
      v18 = v12 * 64.0;
      v19 = (int)v18;
      if (v18 <= -2147483650.0)
        v19 = 0x80000000;
      if (v18 >= 2147483650.0)
        v19 = 0x7FFFFFFF;
      DWORD2(v29) = v19;
      v20 = v13 * 64.0;
      if (v20 >= 2147483650.0)
      {
        v21 = 0x7FFFFFFF;
      }
      else if (v20 <= -2147483650.0)
      {
        v21 = 0x80000000;
      }
      else
      {
        v21 = (int)v20;
      }
      HIDWORD(v29) = v21;
      v22 = a3[1];
      v23 = v15 + *a3;
      if (__OFADD__(v15, *a3))
        v23 = (v15 >> 31) + 0x7FFFFFFF;
      LODWORD(v29) = v23;
      v24 = v17 + v22;
      if (__OFADD__(v17, v22))
        v24 = (v17 >> 31) + 0x7FFFFFFF;
      DWORD1(v29) = v24;
      v25 = *((unsigned int *)a2 + 3);
      if ((_DWORD)v25 == *((_DWORD *)a2 + 2))
      {
        v28 = (__int128 *)WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2, v25 + 1, (unint64_t)&v29);
        v25 = *((unsigned int *)a2 + 3);
        v26 = *(_QWORD *)a2;
        v27 = *v28;
      }
      else
      {
        v26 = *(_QWORD *)a2;
        v27 = v29;
      }
      *(_OWORD *)(v26 + 16 * v25) = v27;
      ++*((_DWORD *)a2 + 3);
      WebCore::InlineIterator::TextBoxIterator::traverseNextTextBox((WebCore::InlineIterator::TextBoxIterator *)v33);
      result = WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v33);
      if ((result & 1) != 0)
        goto LABEL_8;
    }
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_46:
    v33[0] = *((_QWORD *)v5 + 8);
    v7 = 1;
    v34 = 1;
    v30[0] = 0;
    v31 = -1;
  }
LABEL_8:
  if (v34 != -1)
    result = ((uint64_t (*)(__int128 *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_6[v34])(&v29, v33);
  if (v31 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_6[v31])(v33, v30);
  return result;
}

uint64_t WebCore::RenderText::absoluteQuadsForRange@<X0>(WebCore::RenderText *a1@<X0>, WebCore::RenderObject *a2@<X1>, unsigned int a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  float *v5;
  float v6;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  WebCore::RenderObject *v13;
  unsigned int v14;
  WebCore::RenderObject *v15;
  unsigned int v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;
  WebCore::LayoutIntegration::LineLayout *v20;
  int v21;
  int v22;
  uint64_t result;
  double v24;
  const WebCore::InlineIterator::TextBox *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  double v39;
  unint64_t v40;
  double v41;
  unint64_t v42;
  unint64_t v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  uint64_t v54;
  uint64_t v55;
  _OWORD *v56;
  _OWORD *v57;
  __int128 v58;
  float v59;
  float v60;
  uint64_t v61;
  int v62;
  void *v63;
  WTF *v64;
  uint64_t v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  double v74;
  int v75;
  double v76;
  int v77;
  double v78;
  int v79;
  double v80;
  int v81;
  int *v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  WebCore::FloatRect *v90;
  uint64_t v91;
  double v92;
  uint64_t v93;
  double v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  _OWORD *v99;
  __int128 v100;
  _OWORD *v101;
  __int128 v102;
  int v103;
  _OWORD *v104;
  __int128 v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  __int128 v114;
  __int128 v115;
  WTF *v116;
  unsigned int v117;
  WebCore::SVGInlineTextBox *v118[2];
  int v119;
  _BYTE v120[16];
  int v121;

  if (a2 >= 0x7FFFFFFF)
    v10 = 0x7FFFFFFF;
  else
    v10 = a2;
  if (a3 >= 0x7FFFFFFF)
    v11 = 0x7FFFFFFF;
  else
    v11 = a3;
  v12 = WebCore::RenderText::caretMinOffset(a1, a2);
  v14 = WebCore::RenderText::caretMaxOffset(a1, v13);
  if (v12 <= v10)
    v16 = v10;
  else
    v16 = v12;
  if (v14 >= v16)
    v17 = v16;
  else
    v17 = v14;
  if (v12 <= v11)
    v18 = v11;
  else
    v18 = v12;
  if (v14 >= v18)
    v19 = v18;
  else
    v19 = v14;
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  v20 = (WebCore::LayoutIntegration::LineLayout *)WebCore::LayoutIntegration::LineLayout::containing(a1, v15);
  if (v20)
  {
    WebCore::LayoutIntegration::LineLayout::textBoxesFor(v20, a1, (uint64_t)&v114);
    v21 = v115;
    v120[0] = 0;
    v121 = -1;
    if ((_DWORD)v115 == -1)
      goto LABEL_23;
  }
  else
  {
    *(_QWORD *)&v114 = *((_QWORD *)a1 + 8);
    v21 = 1;
    LODWORD(v115) = 1;
    v120[0] = 0;
    v121 = -1;
  }
  ((void (*)(float *, _BYTE *, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v21])(&v106, v120, &v114);
  v121 = v21;
  if ((_DWORD)v115 != -1)
    ((void (*)(float *, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v115])(&v106, &v114);
LABEL_23:
  LOBYTE(v118[0]) = 0;
  v119 = -1;
  v22 = v121;
  if (v121 != -1)
  {
    ((void (*)(__int128 *, WebCore::SVGInlineTextBox **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_2[v121])(&v114, v118, v120);
    v119 = v22;
  }
  result = WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v118);
  if ((a4 & 0x20) == 0)
  {
    if ((result & 1) != 0)
      goto LABEL_27;
    v5 = &v106;
    v24 = 64.0;
    v6 = 0.00000011921;
    while (1)
    {
      if (v119 == -1)
        goto LABEL_128;
      *(_QWORD *)&v114 = v5;
      if (!((unsigned int (*)(__int128 *, WebCore::SVGInlineTextBox **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v119])(&v114, v118))goto LABEL_119;
      if ((a4 & 8) != 0)
      {
        WebCore::InlineIterator::TextBox::selectableRange((uint64_t *)&v114, (WebCore::InlineIterator::TextBox *)v118);
        if ((WebCore::TextBoxSelectableRange::intersects((unsigned int *)&v114, v17, v19) & 1) == 0)
          goto LABEL_55;
      }
      if (v119 == -1)
        goto LABEL_128;
      *(_QWORD *)&v114 = v5;
      if (v17 <= ((unsigned int (*)(__int128 *, WebCore::SVGInlineTextBox **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7TextBox5startEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v119])(&v114, v118))
      {
        if (v119 == -1)
          goto LABEL_128;
        *(_QWORD *)&v114 = v5;
        if (((unsigned int (*)(__int128 *, WebCore::SVGInlineTextBox **))off_1E3437278[v119])(&v114, v118) <= v19)
        {
          WebCore::boundariesForTextBox(v118, v25);
          v47 = v46;
          v49 = v48;
          v51 = v50;
          v53 = v52;
          if ((a4 & 0x10) != 0)
          {
            v95 = WebCore::selectionRectForTextBox((WebCore *)v118, (const WebCore::InlineIterator::TextBox *)v17, v19);
            v97 = v96;
            if ((WebCore::InlineIterator::Box::isHorizontal((WebCore::InlineIterator::Box *)v118) & 1) != 0)
            {
              v53 = (float)SHIDWORD(v97) * 0.015625;
              v49 = (float)SHIDWORD(v95) * 0.015625;
            }
            else
            {
              v51 = (float)(int)v97 * 0.015625;
              v47 = (float)(int)v95 * 0.015625;
            }
          }
          v106 = v47;
          v107 = v49;
          v108 = v47 + v51;
          v109 = v49;
          v110 = v47 + v51;
          v111 = v49 + v53;
          v112 = v47;
          v113 = v49 + v53;
          WebCore::RenderObject::localToContainerQuad((uint64_t)a1, &v106, 0, 2u, &v114);
          v54 = *(unsigned int *)(a5 + 12);
          if ((_DWORD)v54 == *(_DWORD *)(a5 + 8))
          {
            WTF::Vector<WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::FloatQuad>(a5, (unint64_t)&v114);
          }
          else
          {
            v98 = v54 + 1;
            v99 = (_OWORD *)(*(_QWORD *)a5 + 32 * v54);
            v100 = v115;
            *v99 = v114;
            v99[1] = v100;
            *(_DWORD *)(a5 + 12) = v98;
          }
          goto LABEL_55;
        }
      }
      v26 = WebCore::selectionRectForTextBox((WebCore *)v118, (const WebCore::InlineIterator::TextBox *)v17, v19);
      v28 = HIDWORD(v27);
      if (HIDWORD(v27))
        break;
LABEL_55:
      WebCore::InlineIterator::TextBoxIterator::traverseNextTextBox((WebCore::InlineIterator::TextBoxIterator *)v118);
      result = WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v118);
      if ((_DWORD)result)
        goto LABEL_27;
    }
    v29 = v26;
    v30 = v27;
    if ((a4 & 0x10) == 0)
    {
      if (v119 == -1
        || (*(_QWORD *)&v114 = v5,
            ((void (*)(__int128 *, WebCore::SVGInlineTextBox **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box32visualRectIgnoringBlockDirectionEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_1[v119])(&v114, v118), v119 == -1))
      {
LABEL_128:
        std::__throw_bad_variant_access[abi:sn180100]();
        goto LABEL_129;
      }
      v35 = v31;
      v36 = v32;
      v37 = v33;
      v38 = v34;
      *(_QWORD *)&v114 = v5;
      if ((((uint64_t (*)(__int128 *, WebCore::SVGInlineTextBox **))off_1E34372C8[v119])(&v114, v118) & 1) != 0)
      {
        v39 = v38 * v24;
        if (v39 >= 2147483650.0)
        {
          v40 = 0x7FFFFFFF00000000;
        }
        else if (v39 <= -2147483650.0)
        {
          v40 = 0x8000000000000000;
        }
        else
        {
          v40 = (unint64_t)(int)v39 << 32;
        }
        v30 = v40 | v30;
        v41 = v36 * v24;
        if (v41 >= 2147483650.0)
        {
          v42 = 0x7FFFFFFF00000000;
        }
        else if (v41 <= -2147483650.0)
        {
          v42 = 0x8000000000000000;
        }
        else
        {
          v42 = (unint64_t)(int)v41 << 32;
        }
        v43 = 0xFFFFFFFFLL;
      }
      else
      {
        v92 = v37 * v24;
        if (v92 >= 2147483650.0)
        {
          v93 = 0x7FFFFFFFLL;
        }
        else if (v92 <= -2147483650.0)
        {
          v93 = 0x80000000;
        }
        else
        {
          v93 = (int)v92;
        }
        v30 = v93 | v30 & 0xFFFFFFFF00000000;
        v94 = v35 * v24;
        if (v94 >= 2147483650.0)
        {
          v43 = 0xFFFFFFFF00000000;
          v42 = 0x7FFFFFFFLL;
        }
        else if (v94 <= -2147483650.0)
        {
          v43 = 0xFFFFFFFF00000000;
          v42 = 0x80000000;
        }
        else
        {
          v42 = (int)v94;
          v43 = 0xFFFFFFFF00000000;
        }
      }
      v29 = v42 | v43 & v29;
      v28 = HIDWORD(v30);
    }
    v44 = (float)(int)v30 * 0.015625;
    v45 = (float)(int)v28 * 0.015625;
    if (v44 == 0.0)
      goto LABEL_69;
    v59 = -v44;
    if (v44 >= 0.0)
      v59 = (float)(int)v30 * 0.015625;
    if (v59 < v6)
    {
LABEL_69:
      if (v45 == 0.0)
        goto LABEL_55;
      v60 = -v45;
      if (v45 >= 0.0)
        v60 = (float)(int)v28 * 0.015625;
      if (v60 < v6)
        goto LABEL_55;
    }
    v106 = (float)(int)v29 * 0.015625;
    v107 = (float)SHIDWORD(v29) * 0.015625;
    v108 = v44 + v106;
    v109 = v107;
    v110 = v44 + v106;
    v111 = v45 + v107;
    v112 = v106;
    v113 = v45 + v107;
    WebCore::RenderObject::localToContainerQuad((uint64_t)a1, &v106, 0, 2u, &v114);
    v55 = *(unsigned int *)(a5 + 12);
    if ((_DWORD)v55 == *(_DWORD *)(a5 + 8))
    {
      v56 = (_OWORD *)WTF::Vector<WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a5, v55 + 1, (unint64_t)&v114);
      v55 = *(unsigned int *)(a5 + 12);
      v57 = (_OWORD *)(*(_QWORD *)a5 + 32 * v55);
      v58 = v56[1];
      *v57 = *v56;
      v57[1] = v58;
LABEL_62:
      *(_DWORD *)(a5 + 12) = v55 + 1;
      goto LABEL_55;
    }
LABEL_129:
    v101 = (_OWORD *)(*(_QWORD *)a5 + 32 * v55);
    v102 = v115;
    *v101 = v114;
    v101[1] = v102;
    goto LABEL_62;
  }
  if ((result & 1) == 0)
  {
    v24 = COERCE_DOUBLE(&v106);
    while (1)
    {
      if (v119 == -1)
        goto LABEL_128;
      *(_QWORD *)&v114 = &v106;
      if ((((uint64_t (*)(__int128 *, WebCore::SVGInlineTextBox **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v119])(&v114, v118) & 1) == 0)
      {
LABEL_119:
        __break(0xC471u);
        JUMPOUT(0x196451D10);
      }
      if ((a4 & 8) != 0)
      {
        WebCore::InlineIterator::TextBox::selectableRange((uint64_t *)&v114, (WebCore::InlineIterator::TextBox *)v118);
        if ((WebCore::TextBoxSelectableRange::intersects((unsigned int *)&v114, v17, v19) & 1) == 0)
          goto LABEL_106;
      }
      WebCore::characterRects((WebCore *)&v116, (const WebCore::InlineIterator::TextBox *)v118, v17, v19);
      v61 = v117;
      v62 = WTF::Vector<WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)1>(a5, v117 + (unint64_t)*(unsigned int *)(a5 + 12));
      v64 = v116;
      if (v62)
      {
        if ((a4 & 0x10) != 0)
          goto LABEL_98;
        v24 = COERCE_DOUBLE(&v106);
        if ((_DWORD)v61)
          break;
      }
LABEL_104:
      if (v64)
        WTF::fastFree(v64, v63);
LABEL_106:
      WebCore::InlineIterator::TextBoxIterator::traverseNextTextBox((WebCore::InlineIterator::TextBoxIterator *)v118);
      result = WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v118);
      if ((result & 1) != 0)
        goto LABEL_27;
    }
    v65 = 16 * v61;
    v5 = (float *)((char *)v116 + 8);
    do
    {
      WebCore::InlineIterator::Box::visualRectIgnoringBlockDirection((WebCore::InlineIterator::Box *)v118);
      v67 = v66;
      v69 = v68;
      v71 = v70;
      v73 = v72;
      if (WebCore::InlineIterator::Box::isHorizontal((WebCore::InlineIterator::Box *)v118))
      {
        v74 = v73 * 64.0;
        v75 = (int)v74;
        if (v74 <= -2147483650.0)
          v75 = 0x80000000;
        if (v74 >= 2147483650.0)
          v75 = 0x7FFFFFFF;
        *((_DWORD *)v5 + 1) = v75;
        v76 = v69 * 64.0;
        if (v76 >= 2147483650.0)
        {
          v77 = 0x7FFFFFFF;
        }
        else if (v76 <= -2147483650.0)
        {
          v77 = 0x80000000;
        }
        else
        {
          v77 = (int)v76;
        }
        *((_DWORD *)v5 - 1) = v77;
      }
      else
      {
        v78 = v71 * 64.0;
        v79 = (int)v78;
        if (v78 <= -2147483650.0)
          v79 = 0x80000000;
        if (v78 >= 2147483650.0)
          v79 = 0x7FFFFFFF;
        *(_DWORD *)v5 = v79;
        v80 = v67 * 64.0;
        if (v80 >= 2147483650.0)
        {
          v81 = 0x7FFFFFFF;
        }
        else if (v80 <= -2147483650.0)
        {
          v81 = 0x80000000;
        }
        else
        {
          v81 = (int)v80;
        }
        *((_DWORD *)v5 - 2) = v81;
      }
      v5 += 4;
      v65 -= 16;
    }
    while (v65);
LABEL_98:
    v24 = COERCE_DOUBLE(&v106);
    if ((_DWORD)v61)
    {
      v5 = (float *)(16 * v61);
      v82 = (int *)v64;
      do
      {
        v83 = WebCore::LayoutRect::operator WebCore::FloatRect(v82);
        v85 = v84;
        v87 = v86;
        v89 = v88;
        if (!WebCore::FloatRect::isZero(v90, v86, v88))
        {
          v106 = v83;
          v107 = v85;
          v108 = v83 + v87;
          v109 = v85;
          v110 = v83 + v87;
          v111 = v85 + v89;
          v112 = v83;
          v113 = v85 + v89;
          WebCore::RenderObject::localToContainerQuad((uint64_t)a1, &v106, 0, 2u, &v114);
          v91 = *(unsigned int *)(a5 + 12);
          if ((_DWORD)v91 == *(_DWORD *)(a5 + 8))
          {
            WTF::Vector<WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::FloatQuad>(a5, (unint64_t)&v114);
          }
          else
          {
            v103 = v91 + 1;
            v104 = (_OWORD *)(*(_QWORD *)a5 + 32 * v91);
            v105 = v115;
            *v104 = v114;
            v104[1] = v105;
            *(_DWORD *)(a5 + 12) = v103;
          }
        }
        v82 += 4;
        v5 -= 4;
      }
      while (v5);
    }
    goto LABEL_104;
  }
LABEL_27:
  if (v119 != -1)
    result = ((uint64_t (*)(__int128 *, WebCore::SVGInlineTextBox **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_6[v119])(&v114, v118);
  if (v121 != -1)
    return ((uint64_t (*)(__int128 *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_6[v121])(&v114, v120);
  return result;
}

uint64_t WebCore::RenderText::collectSelectionGeometries(uint64_t a1, WebCore::RenderObject *a2, const WebCore::InlineIterator::TextBox *a3, unsigned int a4)
{
  WebCore::LayoutIntegration::LineLayout *v8;
  uint64_t result;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  double v19;
  unint64_t v20;
  unsigned int v21;
  int v22;
  double v23;
  unsigned int v24;
  int v25;
  signed int v26;
  WebCore::RenderBlock *v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  double v33;
  unsigned int v34;
  int v35;
  int v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  double v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  uint64_t v47;
  _BOOL4 v48;
  uint64_t v49;
  int v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  int v73;
  int v74;
  float v75;
  int v76;
  float v77;
  uint64_t v78;
  unsigned int v79;
  int v80;
  unsigned int v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  int v91;
  unsigned int v92;
  char v93;
  uint64_t v94;
  int v95;
  BOOL v96;
  BOOL v97;
  uint64_t v98;
  const WebCore::Node *v99;
  char v100;
  WebCore::ImageOverlay *v101;
  char isOverlayText;
  char v103;
  int v104;
  int v105;
  int v106;
  int v107;
  uint64_t v108;
  int v109;
  char v110;
  float v111;
  float v112;
  float v113;
  uint64_t v114;
  float v115;
  float v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  uint64_t v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  uint64_t v132;
  __int16 v133;
  unsigned int v134;
  unsigned int v135;
  char v136;
  WebCore::RenderObject *v137;
  char v138;
  char v139;
  unsigned int v140;
  unsigned int v141;
  int v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  int v148;
  char v149;
  __int128 v150;
  __int128 v151;
  uint64_t v152[2];
  int v153;
  _QWORD v154[2];
  unsigned int v155;
  _BYTE v156[9];

  v8 = (WebCore::LayoutIntegration::LineLayout *)WebCore::LayoutIntegration::LineLayout::containing((WebCore::LayoutIntegration::LineLayout *)a1, a2);
  if (v8)
  {
    WebCore::LayoutIntegration::LineLayout::textBoxesFor(v8, (const WebCore::RenderText *)a1, (uint64_t)v154);
  }
  else
  {
    v154[0] = *(_QWORD *)(a1 + 64);
    v155 = 1;
  }
  result = WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v154);
  if ((result & 1) == 0)
  {
    v140 = a3;
    v141 = a4;
    v137 = a2;
    while (1)
    {
      if (v155 == -1)
        goto LABEL_353;
      v152[0] = (uint64_t)&v143;
      if ((((uint64_t (*)(uint64_t *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v155])(v152, v154) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x196453264);
      }
      if (v155 == -1)
      {
LABEL_353:
        std::__throw_bad_variant_access[abi:sn180100]();
LABEL_354:
        __break(0xC471u);
        JUMPOUT(0x196453568);
      }
      v152[0] = (uint64_t)&v143;
      if (((unsigned int (*)(uint64_t *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7TextBox5startEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v155])(v152, v154) >= a3)
      {
        if (v155 == -1)
          goto LABEL_353;
        v152[0] = (uint64_t)&v143;
        if ((((uint64_t (*)(uint64_t *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v155])(v152, v154) & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x196453484);
        }
        if (v155 == -1)
          goto LABEL_353;
        v152[0] = (uint64_t)&v143;
        if (((unsigned int (*)(uint64_t *, _QWORD *))off_1E3437278[v155])(v152, v154) <= a4)
          break;
      }
      if (v155 == -1)
        goto LABEL_353;
      v152[0] = (uint64_t)&v143;
      if ((((uint64_t (*)(uint64_t *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v155])(v152, v154) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x196453284);
      }
      if (v155 == -1)
        goto LABEL_353;
      v152[0] = (uint64_t)&v143;
      v10 = ((uint64_t (*)(uint64_t *, _QWORD *))off_1E3437278[v155])(v152, v154);
      v11 = v10 >= a4 ? a4 : v10;
      if (v155 == -1)
        goto LABEL_353;
      v152[0] = (uint64_t)&v143;
      if ((((uint64_t (*)(uint64_t *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v155])(v152, v154) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1964532A4);
      }
      v12 = WebCore::selectionRectForTextBox((WebCore *)v154, a3, v11);
      v14 = v13;
      if ((int)v13 >= 1 && SHIDWORD(v13) >= 1)
      {
        v15 = v12;
        goto LABEL_30;
      }
LABEL_285:
      WebCore::InlineIterator::TextBoxIterator::traverseNextTextBox((WebCore::InlineIterator::TextBoxIterator *)v154);
      if (v155 != -1)
      {
        v152[0] = (uint64_t)v154;
        ((void (*)(uint64_t *, _QWORD *, _QWORD *))off_1E3437308[v155])(v152, v154, v154);
      }
      result = WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v154);
      if ((result & 1) != 0)
        goto LABEL_4;
    }
    if (v155 == -1)
      goto LABEL_353;
    v152[0] = (uint64_t)&v143;
    if ((((uint64_t (*)(uint64_t *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v155])(v152, v154) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196453504);
    }
    v15 = WebCore::selectionRectForTextBox((WebCore *)v154, a3, a4);
    v14 = v16;
LABEL_30:
    if (v155 == -1)
      goto LABEL_353;
    v152[0] = (uint64_t)&v143;
    if ((((uint64_t (*)(uint64_t *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v155])(v152, v154) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1964532C4);
    }
    if (v155 == -1)
      goto LABEL_353;
    *(_QWORD *)&v143 = &v150;
    ((void (*)(uint64_t *__return_ptr, __int128 *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box7lineBoxEvE3__0JZNKSA_7lineBoxEvE3__1EEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v155])(v152, &v143, v154);
    if (v153 == -1)
      goto LABEL_353;
    *(_QWORD *)&v143 = &v150;
    v17 = ((uint64_t (*)(__int128 *, uint64_t *))off_1E34372A8[v153])(&v143, v152);
    if (v153 != -1)
      ((void (*)(__int128 *, uint64_t *))off_1E34372B8[v153])(&v143, v152);
    v18 = HIDWORD(v15);
    if (v17)
    {
      if (v155 == -1)
        goto LABEL_353;
      v152[0] = (uint64_t)&v143;
      if ((((uint64_t (*)(uint64_t *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v155])(v152, v154) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1964534A4);
      }
      if (v155 == -1)
        goto LABEL_353;
      v152[0] = (uint64_t)&v143;
      if (((unsigned int (*)(uint64_t *, _QWORD *))off_1E34372C8[v155])(v152, v154))
      {
        if (v155 == -1)
          goto LABEL_353;
        v152[0] = (uint64_t)&v143;
        if ((((uint64_t (*)(uint64_t *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v155])(v152, v154) & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x196453524);
        }
        if (v155 == -1)
          goto LABEL_353;
        *(_QWORD *)&v143 = &v150;
        ((void (*)(uint64_t *__return_ptr, __int128 *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box7lineBoxEvE3__0JZNKSA_7lineBoxEvE3__1EEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v155])(v152, &v143, v154);
        if (v153 == -1)
          goto LABEL_353;
        *(_QWORD *)&v143 = &v150;
        v19 = ((float (*)(__int128 *, uint64_t *))off_1E34372D8[v153])(&v143, v152) * 64.0;
        if (v19 >= 2147483650.0)
        {
          LODWORD(v20) = 0x7FFFFFFF;
        }
        else if (v19 <= -2147483650.0)
        {
          LODWORD(v20) = 0x80000000;
        }
        else
        {
          LODWORD(v20) = (int)v19;
        }
        v21 = v20 - HIDWORD(v15);
        if (__OFSUB__((_DWORD)v20, HIDWORD(v15)))
          v21 = (v20 >> 31) + 0x7FFFFFFF;
        v22 = HIDWORD(v14) - v21;
        if (__OFSUB__(HIDWORD(v14), v21))
          v22 = (HIDWORD(v14) >> 31) + 0x7FFFFFFF;
        if (v153 != -1)
          ((void (*)(__int128 *, uint64_t *))off_1E34372B8[v153])(&v143, v152);
        v14 = v14 | ((unint64_t)(v22 & ~(v22 >> 31)) << 32);
      }
      else
      {
        if (v155 == -1)
          goto LABEL_353;
        v152[0] = (uint64_t)&v143;
        if ((((uint64_t (*)(uint64_t *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v155])(v152, v154) & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x196453544);
        }
        if (v155 == -1)
          goto LABEL_353;
        *(_QWORD *)&v143 = &v150;
        ((void (*)(uint64_t *__return_ptr, __int128 *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box7lineBoxEvE3__0JZNKSA_7lineBoxEvE3__1EEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v155])(v152, &v143, v154);
        if (v153 == -1)
          goto LABEL_353;
        *(_QWORD *)&v143 = &v150;
        v23 = ((float (*)(__int128 *, uint64_t *))off_1E34372D8[v153])(&v143, v152) * 64.0;
        if (v23 >= 2147483650.0)
        {
          v24 = 0x7FFFFFFF;
        }
        else if (v23 <= -2147483650.0)
        {
          v24 = 0x80000000;
        }
        else
        {
          v24 = (int)v23;
        }
        v25 = v24 - v15;
        if (__OFSUB__(v24, (_DWORD)v15))
          v25 = (v24 >> 31) + 0x7FFFFFFF;
        v26 = v14 - v25;
        if (__OFSUB__((_DWORD)v14, v25))
          v26 = (v14 >> 31) + 0x7FFFFFFF;
        if (v153 != -1)
          ((void (*)(__int128 *, uint64_t *))off_1E34372B8[v153])(&v143, v152);
        v14 = v14 & 0xFFFFFFFF00000000 | v26 & ~(v26 >> 31);
        LODWORD(v20) = v18;
        LODWORD(v15) = v24;
      }
    }
    else
    {
      v20 = HIDWORD(v15);
    }
    v27 = WebCore::RenderObject::containingBlock((WebCore::RenderObject *)a1);
    WebCore::LogicalSelectionOffsetCaches::LogicalSelectionOffsetCaches((WebCore::LogicalSelectionOffsetCaches *)v152, v27);
    if (v155 == -1)
      goto LABEL_353;
    *(_QWORD *)&v143 = &v150;
    if ((((uint64_t (*)(__int128 *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v155])(&v143, v154) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1964532E4);
    }
    if (v155 == -1)
      goto LABEL_353;
    *(_QWORD *)&v143 = &v150;
    ((void (*)(__int128 *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box32visualRectIgnoringBlockDirectionEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_1[v155])(&v143, v154);
    if (v155 == -1)
      goto LABEL_353;
    v30 = v28;
    v31 = v29;
    *(_QWORD *)&v143 = &v150;
    v32 = ((unsigned int (*)(__int128 *, _QWORD *))off_1E34372C8[v155])(&v143, v154) ? v31 : v30;
    v33 = v32 * 64.0;
    v142 = v20;
    if (v33 >= 2147483650.0)
      v34 = 0x7FFFFFFF;
    else
      v34 = v33 <= -2147483650.0 ? 0x80000000 : (int)v33;
    v35 = WebCore::RenderBlock::logicalLeftSelectionOffset((uint64_t *)v27, (uint64_t)v27, v34, v152);
    if (v155 == -1)
      goto LABEL_353;
    v36 = v35;
    *(_QWORD *)&v143 = &v150;
    if ((((uint64_t (*)(__int128 *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v155])(&v143, v154) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196453304);
    }
    if (v155 == -1)
      goto LABEL_353;
    *(_QWORD *)&v143 = &v150;
    ((void (*)(__int128 *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box32visualRectIgnoringBlockDirectionEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_1[v155])(&v143, v154);
    if (v155 == -1)
      goto LABEL_353;
    v39 = v37;
    v40 = v38;
    *(_QWORD *)&v143 = &v150;
    v41 = ((unsigned int (*)(__int128 *, _QWORD *))off_1E34372C8[v155])(&v143, v154) ? v40 : v39;
    v42 = v41 * 64.0;
    if (v42 >= 2147483650.0)
      v43 = 0x7FFFFFFF;
    else
      v43 = v42 <= -2147483650.0 ? 0x80000000 : (int)v42;
    v44 = WebCore::RenderBlock::logicalRightSelectionOffset(v27, v27, v43, (uint64_t)v152);
    if (v155 == -1)
      goto LABEL_353;
    v45 = v44;
    *(_QWORD *)&v143 = &v150;
    if ((((uint64_t (*)(__int128 *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v155])(&v143, v154) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196453324);
    }
    if (v155 == -1)
      goto LABEL_353;
    *(_QWORD *)&v143 = &v150;
    v46 = ((uint64_t (*)(__int128 *, _QWORD *))off_1E34372C8[v155])(&v143, v154);
    v47 = v45 - v36;
    v48 = __OFSUB__(v45, v36);
    if (v46)
    {
      if (v48)
        LODWORD(v47) = (v45 >> 31) + 0x7FFFFFFF;
      HIDWORD(v49) = HIDWORD(v14);
      v50 = v36;
      v36 = v142;
    }
    else
    {
      if (v48)
        v47 = (v45 >> 31) + 0x7FFFFFFF;
      v49 = v47 << 32;
      LODWORD(v47) = v14;
      v50 = v15;
    }
    *(float *)&v150 = (float)v50 * 0.015625;
    *((float *)&v150 + 1) = (float)v36 * 0.015625;
    *((float *)&v150 + 2) = (float)((float)(int)v47 * 0.015625) + *(float *)&v150;
    *((float *)&v150 + 3) = *((float *)&v150 + 1);
    *(float *)&v151 = *((float *)&v150 + 2);
    *((float *)&v151 + 1) = *((float *)&v150 + 1) + (float)((float)SHIDWORD(v49) * 0.015625);
    *((float *)&v151 + 2) = *(float *)&v150;
    *((float *)&v151 + 3) = *((float *)&v151 + 1);
    WebCore::RenderObject::localToContainerQuad(a1, (float *)&v150, 0, 2u, &v143);
    v51 = *(float *)&v143;
    v52 = *(float *)&v144;
    if (*((float *)&v144 + 2) >= *(float *)&v144)
      v53 = *(float *)&v144;
    else
      v53 = *((float *)&v144 + 2);
    if (*((float *)&v143 + 2) >= *(float *)&v143)
      v54 = *(float *)&v143;
    else
      v54 = *((float *)&v143 + 2);
    if (v53 >= v54)
      v53 = v54;
    v55 = fabsf(v53);
    if (v55 == INFINITY || v55 > 2147500000.0)
      v53 = (float)((SLODWORD(v53) >> 31) ^ 0x7FFFFFFF);
    if (*((float *)&v144 + 3) >= *((float *)&v144 + 1))
      v56 = *((float *)&v144 + 1);
    else
      v56 = *((float *)&v144 + 3);
    if (*((float *)&v143 + 3) >= *((float *)&v143 + 1))
      v57 = *((float *)&v143 + 1);
    else
      v57 = *((float *)&v143 + 3);
    if (v56 >= v57)
      v56 = v57;
    v58 = fabsf(v56);
    if (v58 == INFINITY || v58 > 2147500000.0)
      v56 = (float)((SLODWORD(v56) >> 31) ^ 0x7FFFFFFF);
    if (*(float *)&v143 < *((float *)&v143 + 2))
      v51 = *((float *)&v143 + 2);
    if (*(float *)&v144 < *((float *)&v144 + 2))
      v52 = *((float *)&v144 + 2);
    if (v51 >= v52)
      v59 = v51;
    else
      v59 = v52;
    v60 = fabsf(v59);
    if (v60 == INFINITY || v60 > 2147500000.0)
      v59 = (float)((SLODWORD(v59) >> 31) ^ 0x7FFFFFFF);
    if (*((float *)&v143 + 1) >= *((float *)&v143 + 3))
      v61 = *((float *)&v143 + 1);
    else
      v61 = *((float *)&v143 + 3);
    if (*((float *)&v144 + 1) >= *((float *)&v144 + 3))
      v62 = *((float *)&v144 + 1);
    else
      v62 = *((float *)&v144 + 3);
    if (v61 >= v62)
      v63 = v61;
    else
      v63 = v62;
    v64 = fabsf(v63);
    if (v64 == INFINITY || v64 > 2147500000.0)
      v63 = (float)((SLODWORD(v63) >> 31) ^ 0x7FFFFFFF);
    v65 = floorf(v53);
    v66 = 2147500000.0;
    if (v65 < 2147500000.0)
    {
      v66 = -2147500000.0;
      if (v65 > -2147500000.0)
        v66 = (float)(int)v65;
    }
    v67 = floorf(v56);
    v68 = 2147500000.0;
    if (v67 < 2147500000.0)
    {
      v68 = -2147500000.0;
      if (v67 > -2147500000.0)
        v68 = (float)(int)v67;
    }
    v69 = ceilf(v53 + (float)(v59 - v53));
    v70 = 2147500000.0;
    if (v69 < 2147500000.0)
    {
      v70 = -2147500000.0;
      if (v69 > -2147500000.0)
        v70 = (float)(int)v69;
    }
    v71 = ceilf(v56 + (float)(v63 - v56));
    v72 = 2147500000.0;
    if (v71 < 2147500000.0)
    {
      v72 = -2147500000.0;
      if (v71 > -2147500000.0)
        v72 = (float)(int)v71;
    }
    if (v66 >= 2147500000.0)
    {
      v73 = 0x7FFFFFFF;
    }
    else if (v66 <= -2147500000.0)
    {
      v73 = 0x80000000;
    }
    else
    {
      v73 = (int)v66;
    }
    if (v68 >= 2147500000.0)
    {
      v74 = 0x7FFFFFFF;
    }
    else if (v68 <= -2147500000.0)
    {
      v74 = 0x80000000;
    }
    else
    {
      v74 = (int)v68;
    }
    v75 = v70 - v66;
    if (v75 >= 2147500000.0)
    {
      v76 = 0x7FFFFFFF;
    }
    else if (v75 <= -2147500000.0)
    {
      v76 = 0x80000000;
    }
    else
    {
      v76 = (int)v75;
    }
    v77 = v72 - v68;
    if ((float)(v72 - v68) >= 2147500000.0)
    {
      v78 = 0x7FFFFFFFLL;
    }
    else if (v77 <= -2147500000.0)
    {
      v78 = 0x80000000;
    }
    else
    {
      v78 = (int)v77;
    }
    v79 = v73 << 6;
    if (v73 < -33554432)
      v79 = 0x80000000;
    if (v73 <= 0x1FFFFFF)
      v80 = v79;
    else
      v80 = 0x7FFFFFFF;
    v81 = v74 << 6;
    if (v74 < -33554432)
      v81 = 0x80000000;
    if (v74 <= 0x1FFFFFF)
      v82 = v81;
    else
      v82 = 0x7FFFFFFF;
    v83 = (v76 << 6);
    v84 = v78 << 38;
    if ((int)v78 < -33554432)
      v84 = 0x8000000000000000;
    if (v76 < -33554432)
      v83 = 0x80000000;
    v85 = (int)v78 <= 0x1FFFFFF ? v84 : 0x7FFFFFFF00000000;
    v86 = v76 <= 0x1FFFFFF ? v83 : 0x7FFFFFFFLL;
    if (v155 == -1)
      goto LABEL_353;
    *(_QWORD *)&v143 = &v150;
    if ((((uint64_t (*)(__int128 *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v155])(&v143, v154) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196453344);
    }
    if (v155 == -1)
      goto LABEL_353;
    *(_QWORD *)&v143 = &v150;
    v87 = ((uint64_t (*)(__int128 *, _QWORD *))off_1E34372C8[v155])(&v143, v154);
    *((_QWORD *)&v89 + 1) = v86;
    *(_QWORD *)&v89 = v85;
    v88 = v89 >> 32;
    v90 = v87 ? v85 | v86 : v88;
    v91 = v87 ? v80 : v82;
    v92 = v87 ? v82 : v80;
    if (v155 == -1)
      goto LABEL_353;
    *(_QWORD *)&v143 = &v150;
    if ((((uint64_t (*)(__int128 *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v155])(&v143, v154) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196453364);
    }
    WebCore::InlineIterator::Box::previousOnLine((WebCore::InlineIterator::Box *)v154, (uint64_t)&v143);
    v93 = WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)&v143);
    if ((_DWORD)v144 != -1)
      ((void (*)(__int128 *, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_6[v144])(&v150, &v143);
    if (v155 == -1)
      goto LABEL_353;
    *(_QWORD *)&v143 = &v150;
    if ((((uint64_t (*)(__int128 *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v155])(&v143, v154) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196453384);
    }
    v139 = v93;
    LOBYTE(v143) = 0;
    LODWORD(v144) = -1;
    v94 = v155;
    if (v155 == -1)
      goto LABEL_353;
    ((void (*)(__int128 *, __int128 *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v155])(&v150, &v143, v154);
    LODWORD(v144) = v94;
    *(_QWORD *)&v150 = v156;
    ((void (*)(__int128 *, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator15LeafBoxIterator18traverseNextOnLineEvE3__0JEEEEEJRNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v94])(&v150, &v143);
    LOBYTE(v150) = 0;
    LODWORD(v151) = -1;
    v95 = v144;
    if ((_DWORD)v144 != -1)
    {
      ((void (*)(_BYTE *, __int128 *, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v144])(v156, &v150, &v143);
      LODWORD(v151) = v95;
      if ((_DWORD)v144 != -1)
        ((void (*)(_BYTE *, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v144])(v156, &v143);
    }
    v138 = WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)&v150);
    if ((_DWORD)v151 != -1)
      ((void (*)(__int128 *, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_6[v151])(&v143, &v150);
    if (v155 == -1)
      goto LABEL_353;
    *(_QWORD *)&v143 = &v150;
    if ((((uint64_t (*)(__int128 *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v155])(&v143, v154) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1964533A4);
    }
    if (v155 == -1)
      goto LABEL_353;
    *(_QWORD *)&v143 = &v150;
    if (((unsigned int (*)(__int128 *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7TextBox5startEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v155])(&v143, v154) <= v140)
    {
      if (v155 == -1)
        goto LABEL_353;
      *(_QWORD *)&v143 = &v150;
      if ((((uint64_t (*)(__int128 *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v155])(&v143, v154) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1964534C4);
      }
      if (v155 == -1)
        goto LABEL_353;
      *(_QWORD *)&v143 = &v150;
      v96 = ((unsigned int (*)(__int128 *, _QWORD *))off_1E3437278[v155])(&v143, v154) >= v140;
    }
    else
    {
      v96 = 0;
    }
    if (v155 == -1)
      goto LABEL_353;
    *(_QWORD *)&v143 = &v150;
    if ((((uint64_t (*)(__int128 *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v155])(&v143, v154) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1964533C4);
    }
    if (v155 == -1)
      goto LABEL_353;
    *(_QWORD *)&v143 = &v150;
    if (((unsigned int (*)(__int128 *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7TextBox5startEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v155])(&v143, v154) <= v141)
    {
      if (v155 == -1)
        goto LABEL_353;
      *(_QWORD *)&v143 = &v150;
      if ((((uint64_t (*)(__int128 *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v155])(&v143, v154) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1964534E4);
      }
      if (v155 == -1)
        goto LABEL_353;
      *(_QWORD *)&v143 = &v150;
      v97 = ((unsigned int (*)(__int128 *, _QWORD *))off_1E3437278[v155])(&v143, v154) >= v141;
    }
    else
    {
      v97 = 0;
    }
    v149 = 0;
    *(float *)&v143 = (float)(int)v15 * 0.015625;
    *((float *)&v143 + 1) = (float)v142 * 0.015625;
    *((float *)&v143 + 2) = (float)((float)(int)v14 * 0.015625) + *(float *)&v143;
    *((float *)&v143 + 3) = *((float *)&v143 + 1);
    *(float *)&v144 = *((float *)&v143 + 2);
    *((float *)&v144 + 1) = *((float *)&v143 + 1) + (float)((float)SHIDWORD(v14) * 0.015625);
    *((float *)&v144 + 2) = *(float *)&v143;
    *((float *)&v144 + 3) = *((float *)&v144 + 1);
    WebCore::RenderObject::localToContainerQuad(a1, (float *)&v143, 0, 2u, &v150);
    if (v155 == -1)
      goto LABEL_353;
    *(_QWORD *)&v143 = v156;
    if ((((uint64_t (*)(__int128 *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v155])(&v143, v154) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1964533E4);
    }
    v98 = v155;
    if (v155 == 1)
    {
      v132 = v154[0];
      if (!v154[0])
      {
        v98 = 1;
LABEL_233:
        *(_QWORD *)&v143 = v156;
        if ((((uint64_t (*)(__int128 *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v98])(&v143, v154) & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x196453444);
        }
        if (v155 == -1)
          goto LABEL_353;
        *(_QWORD *)&v143 = v156;
        v100 = ((uint64_t (*)(__int128 *, _QWORD *))off_1E34372C8[v155])(&v143, v154);
LABEL_236:
        if ((*(_BYTE *)(a1 + 45) & 1) != 0 || (v101 = *(WebCore::ImageOverlay **)(*(_QWORD *)(a1 + 24) + 8)) == 0)
        {
          isOverlayText = 0;
        }
        else
        {
          if ((*((_WORD *)v101 + 14) & 2) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x196453464);
          }
          isOverlayText = WebCore::ImageOverlay::isOverlayText(v101, v99);
        }
        if (v155 == -1)
          goto LABEL_353;
        *(_QWORD *)&v143 = v156;
        if ((((uint64_t (*)(__int128 *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v155])(&v143, v154) & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x196453404);
        }
        if (v155 == -1)
          goto LABEL_353;
        *(_QWORD *)&v143 = v156;
        v103 = ((uint64_t (*)(__int128 *, _QWORD *))off_1E34372E8[v155])(&v143, v154);
        if (v91 >= 0)
          v104 = v91;
        else
          v104 = v91 + 63;
        v105 = v91 + v90;
        if (__OFADD__(v91, (_DWORD)v90))
          v105 = (v91 >> 31) + 0x7FFFFFFF;
        if (v105 >= 0)
          v106 = v105;
        else
          v106 = v105 + 63;
        v107 = v92 + HIDWORD(v90);
        if (__OFADD__(v92, HIDWORD(v90)))
          v107 = (v92 >> 31) + 0x7FFFFFFF;
        v108 = (uint64_t)v137;
        v109 = v107 >= 0 ? v107 : v107 + 63;
        if (v155 == -1)
          goto LABEL_353;
        *(_QWORD *)&v143 = v156;
        if ((((uint64_t (*)(__int128 *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v155])(&v143, v154) & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x196453424);
        }
        if (v155 == -1)
          goto LABEL_353;
        *(_QWORD *)&v143 = v156;
        v110 = ((uint64_t (*)(__int128 *, _QWORD *))off_1E34372F8[v155])(&v143, v154);
        v111 = *(float *)&v150;
        v112 = *(float *)&v151;
        if (*((float *)&v151 + 2) < *(float *)&v151)
          v112 = *((float *)&v151 + 2);
        if (*((float *)&v150 + 2) < *(float *)&v150)
          v111 = *((float *)&v150 + 2);
        if (v112 < v111)
          v111 = v112;
        v113 = fabsf(v111);
        if (v113 == INFINITY || v113 > 2147500000.0)
          v111 = (float)((SLODWORD(v111) >> 31) ^ 0x7FFFFFFF);
        v114 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8) + 1944);
        v115 = floorf(v111);
        if (v115 < 2147500000.0)
        {
          if (v115 <= -2147500000.0)
            goto LABEL_308;
          v116 = (float)(int)v115;
          if (v116 < 2147500000.0)
          {
            if (v116 > -2147500000.0)
            {
              v117 = (int)v115;
LABEL_272:
              v118 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v114 + 24) + 8)
                                                                               + 40)
                                                                   + 8)
                                                       + 528)
                                           + 8)
                               + 24);
              if (v118)
                v118 = *(_QWORD *)(v118 + 8);
              if (*(_BYTE *)(v118 + 468))
              {
                v119 = *(_QWORD *)(v114 + 224);
                if (v119)
                {
                  v119 = *(_QWORD *)(v119 + 24);
                  if (v119)
                  {
                    v119 = *(_QWORD *)(v119 + 8);
                    if (v119)
                    {
                      if (*(_BYTE *)(v119 + 367))
                      {
                        LODWORD(v119) = 0;
                      }
                      else
                      {
                        v134 = *(_DWORD *)(v118 + 476) + *(_DWORD *)(v118 + 472);
                        if (*(_BYTE *)(v119 + 368))
                          v135 = v117;
                        else
                          v135 = v134 - v117;
                        LODWORD(v119) = v135 / v134;
                      }
                    }
                    v108 = (uint64_t)v137;
                  }
                }
              }
              else
              {
                LODWORD(v119) = 0;
              }
              v143 = v150;
              v144 = v151;
              LOBYTE(v145) = isOverlayText;
              BYTE1(v145) = v103 & 1;
              DWORD1(v145) = v104 >> 6;
              DWORD2(v145) = v106 >> 6;
              HIDWORD(v145) = v109 >> 6;
              LODWORD(v146) = 0;
              BYTE4(v146) = v110;
              BYTE5(v146) = v139;
              BYTE6(v146) = v138;
              BYTE7(v146) = v96;
              BYTE8(v146) = v97;
              BYTE9(v146) = v100;
              BYTE10(v146) = v149;
              HIDWORD(v146) = v119;
              LOBYTE(v147) = 0;
              LOBYTE(v148) = 0;
              v120 = *(unsigned int *)(v108 + 12);
              if ((_DWORD)v120 == *(_DWORD *)(v108 + 8))
              {
                v121 = WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v108, v120 + 1, (unint64_t)&v143);
                v122 = *(_QWORD *)v108 + 84 * *(unsigned int *)(v108 + 12);
                v124 = *((_OWORD *)v121 + 3);
                v123 = *((_OWORD *)v121 + 4);
                v125 = *((_OWORD *)v121 + 2);
                *(_DWORD *)(v122 + 80) = *((_DWORD *)v121 + 20);
                *(_OWORD *)(v122 + 48) = v124;
                *(_OWORD *)(v122 + 64) = v123;
                *(_OWORD *)(v122 + 32) = v125;
                v126 = *((_OWORD *)v121 + 1);
                *(_OWORD *)v122 = *(_OWORD *)v121;
                *(_OWORD *)(v122 + 16) = v126;
              }
              else
              {
                v127 = *(_QWORD *)v108 + 84 * v120;
                v128 = v144;
                *(_OWORD *)v127 = v143;
                *(_OWORD *)(v127 + 16) = v128;
                v129 = v145;
                v130 = v146;
                v131 = v147;
                *(_DWORD *)(v127 + 80) = v148;
                *(_OWORD *)(v127 + 48) = v130;
                *(_OWORD *)(v127 + 64) = v131;
                *(_OWORD *)(v127 + 32) = v129;
              }
              a3 = (const WebCore::InlineIterator::TextBox *)v140;
              a4 = v141;
              ++*(_DWORD *)(v108 + 12);
              goto LABEL_285;
            }
LABEL_308:
            v117 = 0x80000000;
            goto LABEL_272;
          }
        }
        v117 = 0x7FFFFFFF;
        goto LABEL_272;
      }
      if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v154[0] + 80))(v154[0]) & 1) == 0)
        goto LABEL_354;
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v132 + 96))(v132) & 1) != 0)
      {
        v133 = (unsigned __int16)*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 124) >> 13;
        v136 = 2;
        switch((unsigned __int16)*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 124) >> 13)
        {
          case 1:
          case 2:
            goto LABEL_295;
          case 3:
          case 5:
            LOBYTE(v133) = 3;
            goto LABEL_295;
          case 4:
            goto LABEL_296;
          default:
            LOBYTE(v133) = 0;
LABEL_295:
            v136 = v133;
LABEL_296:
            v100 = (v136 & 6) != 2;
            break;
        }
        goto LABEL_236;
      }
      v98 = v155;
    }
    if (v98 == 0xFFFFFFFFLL)
      goto LABEL_353;
    goto LABEL_233;
  }
LABEL_4:
  if (v155 != -1)
    return ((uint64_t (*)(uint64_t *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_6[v155])(v152, v154);
  return result;
}

unint64_t WebCore::selectionRectForTextBox(WebCore *this, const WebCore::InlineIterator::TextBox *a2, unsigned int a3)
{
  unsigned int v4;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  float v15;
  float v16;
  float v17;
  float v18;
  uint64_t v19;
  float v20;
  float v21;
  uint64_t v22;
  float v23;
  float v24;
  float v25;
  uint64_t v26;
  float v27;
  float v28;
  uint64_t v29;
  float v30;
  float v31;
  float v32;
  double v33;
  unsigned int v34;
  double v35;
  unsigned int v36;
  double v37;
  unsigned int v38;
  double v39;
  unsigned int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  float v52;
  float v53;
  float v54;
  float v55;
  uint64_t v56;
  float v57;
  float v58;
  float v59;
  float v60;
  int v61;
  uint64_t v62;
  float v63;
  float v64;
  float v65;
  const WebCore::LayoutRect *v66;
  WTF::StringImpl *v67;
  unint64_t v68;
  WTF::StringImpl *v69;
  unsigned int v71;
  BOOL v72;
  WebCore::SVGInlineTextBox *v73;
  BOOL v74;
  uint64_t v75;
  int v76;
  BOOL v77;
  unsigned int v78;
  int ****v79;
  WTF::StringImpl *v80;
  unsigned int v81;
  char v82;
  int ***v83;
  unsigned int v84;
  unsigned int v85;
  _BYTE v86[16];
  unsigned int v87;
  int v88;
  int *v89;
  int **v90;

  v4 = a2;
  v6 = *((_DWORD *)this + 4);
  if (v6 == 1)
  {
    v73 = *(WebCore::SVGInlineTextBox **)this;
    if (!*(_QWORD *)this)
    {
      v6 = 1;
      goto LABEL_3;
    }
    if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v73 + 80))(*(_QWORD *)this) & 1) == 0)
    {
LABEL_123:
      __break(0xC471u);
      JUMPOUT(0x196453CC4);
    }
    if ((*(unsigned int (**)(WebCore::SVGInlineTextBox *))(*(_QWORD *)v73 + 96))(v73))
      return WebCore::SVGInlineTextBox::localSelectionRect(v73, v4, a3);
    v6 = *((_DWORD *)this + 4);
  }
  if (v6 == -1)
    goto LABEL_122;
LABEL_3:
  v83 = &v90;
  ((void (*)(int *****__return_ptr, int ****, WebCore *))*(&off_1E3437318 + v6))(&v79, &v83, this);
  v7 = HIDWORD(v79) + (_DWORD)v79;
  if (__CFADD__(HIDWORD(v79), (_DWORD)v79))
  {
    __break(1u);
    goto LABEL_116;
  }
  if (v7 >= v4)
    v8 = v4;
  else
    v8 = HIDWORD(v79) + (_DWORD)v79;
  v9 = v8 - (_DWORD)v79;
  if (v79 <= v4)
    v10 = v9;
  else
    v10 = 0;
  if (v82 && v81)
  {
    if (v81 >= v10)
      v11 = v10;
    else
      v11 = v81;
    if (v7 >= a3)
      v7 = a3;
    v78 = v7 - (_DWORD)v79;
    if (v79 <= a3)
      v13 = v78;
    else
      v13 = 0;
  }
  else
  {
    if (v10 == HIDWORD(v79))
      v11 = (_DWORD)v80 + HIDWORD(v79);
    else
      v11 = v10;
    if (v7 >= a3)
      v7 = a3;
    v12 = v7 - (_DWORD)v79;
    if (v79 <= a3)
      v13 = v12;
    else
      v13 = 0;
    if (!v82)
      goto LABEL_20;
  }
  if (v81)
  {
    if (v81 < v13)
      v13 = v81;
    goto LABEL_22;
  }
LABEL_20:
  if (v13 == HIDWORD(v79))
    v13 = (_DWORD)v80 + HIDWORD(v79);
LABEL_22:
  if (v11 < v13)
    goto LABEL_23;
  v71 = WebCore::InlineIterator::TextBox::start(this);
  if (v4 != a3)
  {
    if (v71 <= v4 && WebCore::InlineIterator::TextBox::end(this) >= v4)
      goto LABEL_23;
    return 0;
  }
  v72 = v71 <= v4 && WebCore::InlineIterator::TextBox::end(this) > v4;
  v74 = WebCore::InlineIterator::TextBox::start(this) <= v4
     && WebCore::InlineIterator::TextBox::end(this) >= v4;
  WebCore::InlineIterator::TextBoxIterator::TextBoxIterator((WebCore::InlineIterator::TextBoxIterator *)v86, this);
  LOBYTE(v79) = 0;
  v81 = -1;
  v75 = v87;
  if (v87 != -1)
  {
    ((void (*)(int ****, int *****, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_2[v87])(&v83, &v79, v86);
    v81 = v75;
    ((void (*)(int ****, int *****))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_6[v75])(&v83, &v79);
    v81 = -1;
    if (v87 != -1)
      ((void (*)(int ****, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_6[v87])(&v83, v86);
  }
  v87 = -1;
  WebCore::InlineIterator::TextBox::nextTextBox(this, (uint64_t)&v79);
  v76 = WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)&v79);
  if (v81 != -1)
    ((void (*)(int ****, int *****))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_6[v81])(&v83, &v79);
  if (v76)
    v77 = v74;
  else
    v77 = v72;
  if (!v77)
    return 0;
LABEL_23:
  v14 = *((unsigned int *)this + 4);
  if ((_DWORD)v14 == -1)
    goto LABEL_122;
  v83 = &v90;
  ((void (*)(int *****__return_ptr, int ****, WebCore *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box7lineBoxEvE3__0JZNKSA_7lineBoxEvE3__1EEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v14])(&v79, &v83, this);
  WebCore::LineSelection::logicalRect((unsigned int *)&v79);
  v16 = v15;
  v18 = v17;
  if (v81 != -1)
    ((void (*)(int ****, int *****))off_1E34372B8[v81])(&v83, &v79);
  v19 = *((unsigned int *)this + 4);
  if ((_DWORD)v19 == -1)
    goto LABEL_122;
  v79 = &v83;
  ((void (*)(int *****, WebCore *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box32visualRectIgnoringBlockDirectionEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_1[v19])(&v79, this);
  v22 = *((unsigned int *)this + 4);
  if ((_DWORD)v22 == -1)
    goto LABEL_122;
  v23 = v20;
  v24 = v21;
  v79 = &v83;
  v25 = ((unsigned int (*)(int *****, WebCore *))off_1E34372C8[v22])(&v79, this) ? v23 : v24;
  v26 = *((unsigned int *)this + 4);
  if ((_DWORD)v26 == -1)
    goto LABEL_122;
  v79 = &v83;
  ((void (*)(int *****, WebCore *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box32visualRectIgnoringBlockDirectionEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_1[v26])(&v79, this);
  v29 = *((unsigned int *)this + 4);
  if ((_DWORD)v29 == -1)
    goto LABEL_122;
  v30 = v27;
  v31 = v28;
  v79 = &v83;
  v32 = ((unsigned int (*)(int *****, WebCore *))off_1E34372C8[v29])(&v79, this) ? v30 : v31;
  v33 = v25 * 64.0;
  if (v33 >= 2147483650.0)
    v34 = 0x7FFFFFFF;
  else
    v34 = v33 > -2147483650.0 ? (int)v33 : 0x80000000;
  LODWORD(v83) = v34;
  v35 = v16 * 64.0;
  if (v35 >= 2147483650.0)
    v36 = 0x7FFFFFFF;
  else
    v36 = v35 <= -2147483650.0 ? 0x80000000 : (int)v35;
  HIDWORD(v83) = v36;
  v37 = v32 * 64.0;
  if (v37 >= 2147483650.0)
    v38 = 0x7FFFFFFF;
  else
    v38 = v37 <= -2147483650.0 ? 0x80000000 : (int)v37;
  v84 = v38;
  v39 = v18 * 64.0;
  if (v39 >= 2147483650.0)
    v40 = 0x7FFFFFFF;
  else
    v40 = v39 <= -2147483650.0 ? 0x80000000 : (int)v39;
  v85 = v40;
  v88 = 0;
  v89 = &v88;
  v41 = *((unsigned int *)this + 4);
  if ((_DWORD)v41 == -1)
    goto LABEL_122;
  v90 = &v89;
  ((void (*)(int *****__return_ptr, int ***, WebCore *))off_1E3437288[v41])(&v79, &v90, this);
  if (v11)
    goto LABEL_54;
  v42 = (int)v80;
  if (v80)
    v42 = *((_DWORD *)v80 + 1);
  if (v42 != v13)
  {
LABEL_54:
    v43 = *((unsigned int *)this + 4);
    if ((_DWORD)v43 == -1)
      goto LABEL_122;
    v90 = &v89;
    v44 = ((uint64_t (*)(int ***, WebCore *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box8rendererEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v43])(&v90, this);
    if ((*(_BYTE *)(v44 + 45) & 2) != 0)
    {
      if (*(_BYTE *)(v44 + 46) == 3 && (*(_BYTE *)(v44 + 140) & 1) != 0)
      {
        v46 = *(_QWORD *)(v44 + 120);
      }
      else
      {
        v45 = *((unsigned int *)this + 4);
        if ((_DWORD)v45 == -1)
          goto LABEL_122;
        v90 = &v89;
        v46 = ((uint64_t (*)(int ***, WebCore *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box5styleEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v45])(&v90, this);
      }
      v47 = *((unsigned int *)this + 4);
      if ((_DWORD)v47 != -1)
      {
        v48 = *(_QWORD *)(v46 + 32);
        v90 = &v89;
        v49 = ((uint64_t (*)(int ***, WebCore *))off_1E3437298[v47])(&v90, this);
        if ((*(_BYTE *)(v49 + 45) & 2) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x196453C80);
        }
        v50 = *(unsigned __int16 *)(v49 + 112);
        if (v50 <= 0x100)
          LOBYTE(v50) = 0;
        WebCore::FontCascade::adjustSelectionRectForText(v48 + 32, (void *)(v50 != 0), (uint64_t)&v79, (WebCore::LayoutRect *)&v83, v11, v13 | 0x100000000);
        goto LABEL_64;
      }
LABEL_122:
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_123;
    }
LABEL_116:
    __break(0xC471u);
    JUMPOUT(0x196453C60);
  }
LABEL_64:
  v51 = *((unsigned int *)this + 4);
  if ((_DWORD)v51 == -1)
    goto LABEL_122;
  v90 = &v89;
  ((void (*)(int ***, WebCore *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box32visualRectIgnoringBlockDirectionEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_1[v51])(&v90, this);
  v56 = *((unsigned int *)this + 4);
  if ((_DWORD)v56 == -1)
    goto LABEL_122;
  v57 = v52;
  v58 = v53;
  v59 = v54;
  v60 = v55;
  v90 = &v89;
  v61 = ((uint64_t (*)(int ***, WebCore *))off_1E34372C8[v56])(&v90, this);
  v62 = *((unsigned int *)this + 4);
  if ((_DWORD)v62 == -1)
    goto LABEL_122;
  if (v61)
    v63 = v57;
  else
    v63 = v58;
  if (v61)
    v64 = v59;
  else
    v64 = v60;
  v65 = v63 + v64;
  v90 = &v89;
  v66 = (const WebCore::LayoutRect *)((uint64_t (*)(int ***, WebCore *))off_1E34372C8[v62])(&v90, this);
  v68 = WebCore::snappedSelectionRect((WebCore *)&v83, v66, v65, v16, v18);
  v69 = v80;
  v80 = 0;
  if (v69)
  {
    if (*(_DWORD *)v69 == 2)
      WTF::StringImpl::destroy(v69, v67);
    else
      *(_DWORD *)v69 -= 2;
  }
  return v68;
}

uint64_t WebCore::InlineIterator::Box::isHorizontal(WebCore::InlineIterator::Box *this)
{
  uint64_t v1;
  int v3;
  WebCore::LayoutIntegration::LineLayout *v4;
  char v5;
  char *v6;

  v1 = *((unsigned int *)this + 4);
  if ((_DWORD)v1 == -1)
  {
    v3 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::collectAbsoluteQuads(v3, v4);
  }
  else
  {
    v6 = &v5;
    return ((uint64_t (*)(char **, WebCore::InlineIterator::Box *))off_1E34372C8[v1])(&v6, this);
  }
}

uint64_t WebCore::collectAbsoluteQuads(uint64_t a1, WebCore::LayoutIntegration::LineLayout *this, uint64_t a3, int a4)
{
  WebCore::LayoutIntegration::LineLayout *v7;
  int v8;
  int v9;
  uint64_t result;
  const WebCore::InlineIterator::TextBox *v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  __int128 *v23;
  _OWORD *v24;
  __int128 v25;
  __int128 v26;
  float v27[8];
  __int128 v28;
  __int128 v29;
  WebCore::SVGInlineTextBox *v30[2];
  int v31;
  _BYTE v32[16];
  int v33;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v7 = (WebCore::LayoutIntegration::LineLayout *)WebCore::LayoutIntegration::LineLayout::containing(this, this);
  if (!v7)
    goto LABEL_30;
  WebCore::LayoutIntegration::LineLayout::textBoxesFor(v7, this, (uint64_t)&v28);
  v8 = v29;
  v32[0] = 0;
  v33 = -1;
  if ((_DWORD)v29 == -1)
    goto LABEL_5;
  while (1)
  {
    ((void (*)(float *, _BYTE *, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v8])(v27, v32, &v28);
    v33 = v8;
    if ((_DWORD)v29 != -1)
      ((void (*)(float *, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v29])(v27, &v28);
LABEL_5:
    LOBYTE(v30[0]) = 0;
    v31 = -1;
    v9 = v33;
    if (v33 != -1)
    {
      ((void (*)(__int128 *, WebCore::SVGInlineTextBox **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_2[v33])(&v28, v30, v32);
      v31 = v9;
    }
    result = WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v30);
    if ((result & 1) != 0)
      break;
    while (v31 != -1)
    {
      *(_QWORD *)&v28 = v27;
      if ((((uint64_t (*)(__int128 *, WebCore::SVGInlineTextBox **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v31])(&v28, v30) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x196454010);
      }
      WebCore::boundariesForTextBox(v30, v11);
      v13 = v12;
      v15 = v14;
      v17 = v16;
      v19 = v18;
      if (a4 == 1)
      {
        v20 = *((_QWORD *)this + 13);
        v21 = v20 ? *(_DWORD *)(v20 + 4) : 0;
        WebCore::ellipsisRectForTextBox((WebCore *)&v28, (const WebCore::InlineIterator::TextBox *)v30, 0, v21);
        if ((_BYTE)v29)
        {
          if (((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 8) + 124) >> 13) & 6u) - 2 < 4)
            v19 = (float)(HIDWORD(v28) + DWORD1(v28)) - v15;
          else
            v17 = (float)(DWORD2(v28) + v28) - v13;
        }
      }
      v27[0] = v13;
      v27[1] = v15;
      v27[2] = v13 + v17;
      v27[3] = v15;
      v27[4] = v13 + v17;
      v27[5] = v15 + v19;
      v27[6] = v13;
      v27[7] = v15 + v19;
      WebCore::RenderObject::localToContainerQuad((uint64_t)this, v27, 0, 2u, &v28);
      v22 = *(unsigned int *)(a1 + 12);
      if ((_DWORD)v22 == *(_DWORD *)(a1 + 8))
      {
        v23 = (__int128 *)WTF::Vector<WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, v22 + 1, (unint64_t)&v28);
        v24 = (_OWORD *)(*(_QWORD *)a1 + 32 * *(unsigned int *)(a1 + 12));
        v25 = *v23;
        v26 = v23[1];
      }
      else
      {
        v24 = (_OWORD *)(*(_QWORD *)a1 + 32 * v22);
        v25 = v28;
        v26 = v29;
      }
      *v24 = v25;
      v24[1] = v26;
      ++*(_DWORD *)(a1 + 12);
      WebCore::InlineIterator::TextBoxIterator::traverseNextTextBox((WebCore::InlineIterator::TextBoxIterator *)v30);
      result = WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v30);
      if ((result & 1) != 0)
        goto LABEL_8;
    }
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_30:
    *(_QWORD *)&v28 = *((_QWORD *)this + 8);
    v8 = 1;
    LODWORD(v29) = 1;
    v32[0] = 0;
    v33 = -1;
  }
LABEL_8:
  if (v31 != -1)
    result = ((uint64_t (*)(__int128 *, WebCore::SVGInlineTextBox **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_6[v31])(&v28, v30);
  if (v33 != -1)
    return ((uint64_t (*)(__int128 *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_6[v33])(&v28, v32);
  return result;
}

WTF *WebCore::RenderText::absoluteQuads(WebCore::LayoutIntegration::LineLayout *this, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;
  WTF *result;
  unsigned int v7;
  uint64_t v8;
  WTF *v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  WTF *v13;
  int v14;
  unsigned int v15;

  WebCore::collectAbsoluteQuads((uint64_t)&v13, this, a3, 0);
  v4 = v15;
  v5 = (void *)(v15 + (unint64_t)*(unsigned int *)(a2 + 12));
  if ((unint64_t)v5 > *(unsigned int *)(a2 + 8))
  {
    WTF::Vector<WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, (unint64_t)v5);
    v4 = v15;
  }
  result = v13;
  if ((_DWORD)v4)
  {
    v7 = *(_DWORD *)(a2 + 12);
    v8 = 32 * v4;
    v9 = v13;
    do
    {
      v10 = (_OWORD *)(*(_QWORD *)a2 + 32 * v7);
      v11 = *(_OWORD *)v9;
      v12 = *((_OWORD *)v9 + 1);
      v9 = (WTF *)((char *)v9 + 32);
      *v10 = v11;
      v10[1] = v12;
      v7 = *(_DWORD *)(a2 + 12) + 1;
      *(_DWORD *)(a2 + 12) = v7;
      v8 -= 32;
    }
    while (v8);
  }
  if (result)
  {
    v13 = 0;
    v14 = 0;
    return (WTF *)WTF::fastFree(result, v5);
  }
  return result;
}

unsigned int *WebCore::RenderText::caretMinOffset(WebCore::RenderText *this, WebCore::RenderObject *a2)
{
  WebCore::LayoutIntegration::LineLayout *v3;
  uint64_t v4;
  int v5;
  WebCore::InlineIterator::TextBox *v7;
  int v8;
  WebCore::RenderText *v9;
  WebCore::RenderObject *v10;
  _QWORD v11[2];
  int v12;
  _QWORD v13[2];
  int v14;
  char v15;

  v3 = (WebCore::LayoutIntegration::LineLayout *)WebCore::LayoutIntegration::LineLayout::containing(this, a2);
  if (v3)
  {
    WebCore::LayoutIntegration::LineLayout::textBoxesFor(v3, this, (uint64_t)v13);
  }
  else
  {
    v13[0] = *((_QWORD *)this + 8);
    v14 = 1;
  }
  if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v13) & 1) != 0)
  {
    v4 = 0;
  }
  else
  {
    if (v14 == -1)
      goto LABEL_21;
    v11[0] = &v15;
    if ((((uint64_t (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v14])(v11, v13) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196454250);
    }
    if (v14 == -1)
    {
LABEL_21:
      v9 = (WebCore::RenderText *)std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::RenderText::caretMaxOffset(v9, v10);
    }
    v11[0] = &v15;
    v4 = ((uint64_t (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7TextBox5startEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v14])(v11, v13);
    LOBYTE(v11[0]) = 0;
    v12 = -1;
    v5 = v14;
    if (v14 != -1)
    {
      ((void (*)(char *, _QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_2[v14])(&v15, v11, v13);
      v12 = v5;
    }
    while (1)
    {
      WebCore::InlineIterator::TextBoxIterator::traverseNextTextBox((WebCore::InlineIterator::TextBoxIterator *)v11);
      if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v11) & 1) != 0)
        break;
      v7 = (WebCore::InlineIterator::TextBox *)WebCore::InlineIterator::TextBoxIterator::operator->((uint64_t)v11);
      v8 = WebCore::InlineIterator::TextBox::start(v7);
      if (v8 >= (int)v4)
        v4 = v4;
      else
        v4 = v8;
    }
    if (v12 != -1)
      ((void (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_6[v12])(&v15, v11);
  }
  if (v14 != -1)
    ((void (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_6[v14])(v11, v13);
  return (unsigned int *)v4;
}

unsigned int *WebCore::RenderText::caretMaxOffset(WebCore::RenderText *this, WebCore::RenderObject *a2)
{
  WebCore::LayoutIntegration::LineLayout *v3;
  uint64_t v4;
  int v5;
  uint64_t v7;
  WebCore::InlineIterator::TextBox *v8;
  int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  _QWORD v13[2];
  int v14;
  _QWORD v15[2];
  int v16;
  char v17;

  v3 = (WebCore::LayoutIntegration::LineLayout *)WebCore::LayoutIntegration::LineLayout::containing(this, a2);
  if (v3)
  {
    WebCore::LayoutIntegration::LineLayout::textBoxesFor(v3, this, (uint64_t)v15);
  }
  else
  {
    v15[0] = *((_QWORD *)this + 8);
    v16 = 1;
  }
  if (WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v15))
  {
    v7 = *((_QWORD *)this + 13);
    if (v7)
      v4 = *(unsigned int *)(v7 + 4);
    else
      v4 = 0;
  }
  else
  {
    if (v16 == -1)
      goto LABEL_23;
    v13[0] = &v17;
    if ((((uint64_t (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v16])(v13, v15) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1964543ECLL);
    }
    if (v16 == -1)
    {
LABEL_23:
      v10 = (unsigned int *)std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::TextBoxSelectableRange::intersects(v10, v11, v12);
    }
    v13[0] = &v17;
    v4 = ((uint64_t (*)(_QWORD *, _QWORD *))off_1E3437278[v16])(v13, v15);
    LOBYTE(v13[0]) = 0;
    v14 = -1;
    v5 = v16;
    if (v16 != -1)
    {
      ((void (*)(char *, _QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_2[v16])(&v17, v13, v15);
      v14 = v5;
    }
    while (1)
    {
      WebCore::InlineIterator::TextBoxIterator::traverseNextTextBox((WebCore::InlineIterator::TextBoxIterator *)v13);
      if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v13) & 1) != 0)
        break;
      v8 = (WebCore::InlineIterator::TextBox *)WebCore::InlineIterator::TextBoxIterator::operator->((uint64_t)v13);
      v9 = WebCore::InlineIterator::TextBox::end(v8);
      if ((int)v4 <= v9)
        v4 = v9;
      else
        v4 = v4;
    }
    if (v14 != -1)
      ((void (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_6[v14])(&v17, v13);
  }
  if (v16 != -1)
    ((void (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_6[v16])(v13, v15);
  return (unsigned int *)v4;
}

unsigned int *WebCore::TextBoxSelectableRange::intersects(unsigned int *this, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  int *v6;
  unsigned int v7;
  int v8;
  BOOL v9;
  int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;

  v4 = *this;
  v3 = this[1];
  v5 = v3 + *this;
  v14 = v5;
  v15 = a2;
  if (__CFADD__(v3, v4))
  {
    __break(1u);
  }
  else
  {
    v6 = (int *)&v15;
    if (v5 < a2)
      v6 = (int *)&v14;
    if (v4 > a2)
      v6 = (int *)this;
    v7 = *v6 - v4;
    v8 = *((unsigned __int8 *)this + 20);
    if (*((_BYTE *)this + 20) && (v12 = this[4]) != 0)
    {
      if (v12 < v7)
        v7 = this[4];
    }
    else if (v7 == v3)
    {
      v7 = this[2] + v3;
    }
    v14 = v5;
    v15 = a3;
    v9 = v5 >= a3;
    v10 = (int *)&v15;
    if (!v9)
      v10 = (int *)&v14;
    if (v4 > a3)
      v10 = (int *)this;
    v11 = *v10 - v4;
    if (v8 && (v13 = this[4]) != 0)
    {
      if (v13 < v11)
        v11 = this[4];
    }
    else if (v11 == v3)
    {
      v11 = this[2] + v3;
    }
    return (unsigned int *)(v7 < v11);
  }
  return this;
}

WTF::StringImpl *WebCore::characterRects(WebCore *this, const WebCore::InlineIterator::TextBox *a2, unsigned int a3, unsigned int a4)
{
  uint64_t v4;
  WTF::StringImpl *result;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  float v19;
  float v20;
  float v21;
  float v22;
  uint64_t v23;
  float v24;
  float v25;
  uint64_t v26;
  float v27;
  float v28;
  float v29;
  uint64_t v30;
  float v31;
  float v32;
  uint64_t v33;
  float v34;
  float v35;
  float v36;
  double v37;
  unsigned int v38;
  double v39;
  unsigned int v40;
  double v41;
  unsigned int v42;
  double v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  unsigned int v53;
  WTF *v54;
  WebCore::SVGInlineTextBox *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl **v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  WTF *v66;
  float v67;
  float v68;
  float v69;
  float v70;
  uint64_t v71;
  float v72;
  float v73;
  float v74;
  float v75;
  int v76;
  uint64_t v77;
  WebCore *v78;
  float v79;
  float v80;
  float v81;
  const WebCore::LayoutRect *v82;
  unint64_t v83;
  unint64_t *v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  WTF **v88;
  WTF::StringImpl *v89;
  unsigned int v90;
  char v91;
  WTF *v92;
  int v93;
  unsigned int v94;
  WTF **v95;
  unsigned int v96;
  unsigned int v97;
  int v98;
  int *v99;

  v4 = *((unsigned int *)a2 + 4);
  if ((_DWORD)v4 == -1)
    goto LABEL_104;
  v95 = &v92;
  result = (WTF::StringImpl *)(*(&off_1E3437318 + v4))((int)&v88, (WebCore::InlineIterator::BoxModernPath *)&v95);
  v10 = HIDWORD(v88) + (_DWORD)v88;
  if (__CFADD__(HIDWORD(v88), (_DWORD)v88))
  {
    __break(1u);
    goto LABEL_99;
  }
  if (v10 >= a3)
    v11 = a3;
  else
    v11 = HIDWORD(v88) + (_DWORD)v88;
  v12 = v11 - (_DWORD)v88;
  if (v88 <= a3)
    v13 = v12;
  else
    v13 = 0;
  if (v91)
  {
    v85 = v90;
    if (v90)
    {
      if (v90 >= v13)
        v14 = v13;
      else
        v14 = v90;
      if (v10 >= a4)
        v86 = a4;
      else
        v86 = HIDWORD(v88) + (_DWORD)v88;
      v87 = v86 - (_DWORD)v88;
      if (v88 <= a4)
        v16 = v87;
      else
        v16 = 0;
LABEL_95:
      if (v85 < v16)
        v16 = v85;
      goto LABEL_21;
    }
  }
  if (v13 == HIDWORD(v88))
    v14 = (_DWORD)v89 + HIDWORD(v88);
  else
    v14 = v13;
  if (v10 >= a4)
    v10 = a4;
  v15 = v10 - (_DWORD)v88;
  if (v88 <= a4)
    v16 = v15;
  else
    v16 = 0;
  if (v91)
  {
    v85 = v90;
    if (v90)
      goto LABEL_95;
  }
  if (v16 == HIDWORD(v88))
    v16 = (_DWORD)v89 + HIDWORD(v88);
LABEL_21:
  if (v14 >= v16)
  {
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
    return result;
  }
  v17 = v16;
  v18 = *((_DWORD *)a2 + 4);
  if (v18 == 1)
  {
    v55 = *(WebCore::SVGInlineTextBox **)a2;
    if (!*(_QWORD *)a2)
    {
      v18 = 1;
      goto LABEL_24;
    }
    if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v55 + 80))(*(_QWORD *)a2) & 1) == 0)
    {
LABEL_105:
      __break(0xC471u);
      JUMPOUT(0x196454AE8);
    }
    if (((*(uint64_t (**)(WebCore::SVGInlineTextBox *))(*(_QWORD *)v55 + 96))(v55) & 1) != 0)
    {
      v56 = v17 - v14;
      *(_QWORD *)this = 0;
      *((_QWORD *)this + 1) = 0;
      if (v56 >> 28)
      {
        __break(0xC471u);
        JUMPOUT(0x196454B34);
      }
      v57 = WTF::fastMalloc((WTF *)(16 * v56));
      v58 = 0;
      *((_DWORD *)this + 2) = v56;
      *(_QWORD *)this = v57;
      do
      {
        result = (WTF::StringImpl *)WebCore::SVGInlineTextBox::localSelectionRect(v55, v14 + v58, v14 + v58 + 1);
        v59 = (WTF::StringImpl **)(v57 + 16 * v58);
        *v59 = result;
        v59[1] = v60;
        *((_DWORD *)this + 3) = ++v58;
      }
      while (v56 != v58);
      return result;
    }
    v18 = *((_DWORD *)a2 + 4);
  }
  if (v18 == -1)
    goto LABEL_104;
LABEL_24:
  v95 = &v92;
  ((void (*)(WTF ***__return_ptr, WTF ***, const WebCore::InlineIterator::TextBox *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box7lineBoxEvE3__0JZNKSA_7lineBoxEvE3__1EEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v18])(&v88, &v95, a2);
  WebCore::LineSelection::logicalRect((unsigned int *)&v88);
  v20 = v19;
  v22 = v21;
  if (v90 != -1)
    ((void (*)(WTF ***, WTF ***))off_1E34372B8[v90])(&v95, &v88);
  v23 = *((unsigned int *)a2 + 4);
  if ((_DWORD)v23 == -1)
    goto LABEL_104;
  v88 = (WTF **)&v95;
  ((void (*)(WTF ***, const WebCore::InlineIterator::TextBox *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box32visualRectIgnoringBlockDirectionEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_1[v23])(&v88, a2);
  v26 = *((unsigned int *)a2 + 4);
  if ((_DWORD)v26 == -1)
    goto LABEL_104;
  v27 = v24;
  v28 = v25;
  v88 = (WTF **)&v95;
  v29 = ((unsigned int (*)(WTF ***, const WebCore::InlineIterator::TextBox *))off_1E34372C8[v26])(&v88, a2)
      ? v27
      : v28;
  v30 = *((unsigned int *)a2 + 4);
  if ((_DWORD)v30 == -1)
    goto LABEL_104;
  v88 = (WTF **)&v95;
  ((void (*)(WTF ***, const WebCore::InlineIterator::TextBox *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box32visualRectIgnoringBlockDirectionEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_1[v30])(&v88, a2);
  v33 = *((unsigned int *)a2 + 4);
  if ((_DWORD)v33 == -1)
    goto LABEL_104;
  v34 = v31;
  v35 = v32;
  v88 = (WTF **)&v95;
  v36 = ((unsigned int (*)(WTF ***, const WebCore::InlineIterator::TextBox *))off_1E34372C8[v33])(&v88, a2)
      ? v34
      : v35;
  v37 = v29 * 64.0;
  if (v37 >= 2147483650.0)
    v38 = 0x7FFFFFFF;
  else
    v38 = v37 > -2147483650.0 ? (int)v37 : 0x80000000;
  LODWORD(v95) = v38;
  v39 = v20 * 64.0;
  if (v39 >= 2147483650.0)
    v40 = 0x7FFFFFFF;
  else
    v40 = v39 <= -2147483650.0 ? 0x80000000 : (int)v39;
  HIDWORD(v95) = v40;
  v41 = v36 * 64.0;
  if (v41 >= 2147483650.0)
    v42 = 0x7FFFFFFF;
  else
    v42 = v41 <= -2147483650.0 ? 0x80000000 : (int)v41;
  v96 = v42;
  v43 = v22 * 64.0;
  if (v43 >= 2147483650.0)
    v44 = 0x7FFFFFFF;
  else
    v44 = v43 <= -2147483650.0 ? 0x80000000 : (int)v43;
  v97 = v44;
  v45 = *((unsigned int *)a2 + 4);
  if ((_DWORD)v45 == -1)
    goto LABEL_104;
  v88 = &v92;
  v46 = ((uint64_t (*)(WTF ***, const WebCore::InlineIterator::TextBox *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box8rendererEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v45])(&v88, a2);
  if ((*(_BYTE *)(v46 + 45) & 2) == 0)
  {
LABEL_99:
    __break(0xC471u);
    JUMPOUT(0x196454AA4);
  }
  if (*(_BYTE *)(v46 + 46) != 3 || (*(_BYTE *)(v46 + 140) & 1) == 0)
  {
    v47 = *((unsigned int *)a2 + 4);
    if ((_DWORD)v47 != -1)
    {
      v88 = &v92;
      v48 = ((uint64_t (*)(WTF ***, const WebCore::InlineIterator::TextBox *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box5styleEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v47])(&v88, a2);
      goto LABEL_54;
    }
LABEL_104:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_105;
  }
  v48 = *(_QWORD *)(v46 + 120);
LABEL_54:
  v49 = *(_QWORD *)(v48 + 32);
  v98 = 0;
  v99 = &v98;
  v50 = *((unsigned int *)a2 + 4);
  if ((_DWORD)v50 == -1)
    goto LABEL_104;
  v51 = v49 + 32;
  v92 = (WTF *)&v99;
  ((void (*)(WTF ***__return_ptr, WTF **, const WebCore::InlineIterator::TextBox *))off_1E3437288[v50])(&v88, &v92, a2);
  WebCore::FontCascade::characterSelectionRectsForText(v51, (uint64_t)&v88);
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  v53 = v94;
  if (v94)
  {
    if (v94 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x196454B3CLL);
    }
    v61 = WTF::fastMalloc((WTF *)(16 * v94));
    *((_DWORD *)this + 2) = v53;
    *(_QWORD *)this = v61;
    if (v94)
    {
      v62 = v61;
      v63 = 0;
      v64 = 0;
      do
      {
        v65 = *((unsigned int *)a2 + 4);
        if ((_DWORD)v65 == -1)
          goto LABEL_104;
        v66 = v92;
        v99 = &v98;
        ((void (*)(int **, const WebCore::InlineIterator::TextBox *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box32visualRectIgnoringBlockDirectionEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_1[v65])(&v99, a2);
        v71 = *((unsigned int *)a2 + 4);
        if ((_DWORD)v71 == -1)
          goto LABEL_104;
        v72 = v67;
        v73 = v68;
        v74 = v69;
        v75 = v70;
        v99 = &v98;
        v76 = ((uint64_t (*)(int **, const WebCore::InlineIterator::TextBox *))off_1E34372C8[v71])(&v99, a2);
        v77 = *((unsigned int *)a2 + 4);
        if ((_DWORD)v77 == -1)
          goto LABEL_104;
        v78 = (WTF *)((char *)v66 + v63);
        if (v76)
          v79 = v72;
        else
          v79 = v73;
        if (v76)
          v80 = v74;
        else
          v80 = v75;
        v81 = v79 + v80;
        v99 = &v98;
        v82 = (const WebCore::LayoutRect *)((uint64_t (*)(int **, const WebCore::InlineIterator::TextBox *))off_1E34372C8[v77])(&v99, a2);
        v83 = WebCore::snappedSelectionRect(v78, v82, v81, v20, v22);
        v84 = (unint64_t *)(v62 + v63);
        *v84 = v83;
        v84[1] = (unint64_t)v52;
        *((_DWORD *)this + 3) = ++v64;
        v63 += 16;
      }
      while (v64 < v94);
    }
  }
  v54 = v92;
  if (v92)
  {
    v92 = 0;
    v93 = 0;
    WTF::fastFree(v54, v52);
  }
  result = v89;
  v89 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v52);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

BOOL WebCore::FloatRect::isZero(WebCore::FloatRect *this, float a2, float a3)
{
  float v3;
  float v4;

  if (a2 != 0.0)
  {
    if (a2 < 0.0)
      a2 = -a2;
    if (a2 >= 0.00000011921)
      return 0;
  }
  v3 = 0.0;
  v4 = -a3;
  if (a3 >= 0.0)
    v4 = a3;
  if (a3 != 0.0)
    v3 = v4;
  return v3 < 0.00000011921;
}

void WebCore::boundariesForTextBox(WebCore::SVGInlineTextBox **this, const WebCore::InlineIterator::TextBox *a2)
{
  WebCore::SVGInlineTextBox *v3;
  void *v5;

  v3 = *this;
  if (*((_DWORD *)this + 4) != 1 || v3 == 0)
    goto LABEL_6;
  if (((*(uint64_t (**)(WebCore::SVGInlineTextBox *, const WebCore::InlineIterator::TextBox *))(*(_QWORD *)v3 + 80))(*this, a2) & 1) != 0)
  {
    if ((*(unsigned int (**)(WebCore::SVGInlineTextBox *))(*(_QWORD *)v3 + 96))(v3))
    {
      WebCore::SVGInlineTextBox::calculateBoundaries(v3, v5);
      return;
    }
LABEL_6:
    WebCore::InlineIterator::Box::visualRectIgnoringBlockDirection((WebCore::InlineIterator::Box *)this);
    return;
  }
  __break(0xC471u);
}

unsigned int *WebCore::RenderText::positionForPoint@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v3;
  unsigned int *result;
  unsigned int v5;
  WebCore::Node *v6;
  int v7;
  char v8;

  (*(void (**)(WebCore::Node **__return_ptr))(*(_QWORD *)a1 + 352))(&v6);
  result = (unsigned int *)v6;
  if (v6)
  {
    v5 = *((_DWORD *)v6 + 6);
    *((_DWORD *)v6 + 6) = v5 + 2;
    *(_QWORD *)a2 = result;
    *(_DWORD *)(a2 + 8) = v7;
    *(_BYTE *)(a2 + 12) = v8;
    v6 = 0;
    if (v5)
    {
      result[6] = v5;
    }
    else if ((*((_WORD *)result + 15) & 0x400) == 0)
    {
      return WebCore::Node::removedLastRef((WebCore::Node *)result, v3);
    }
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_DWORD *)(a2 + 8) = v7;
    *(_BYTE *)(a2 + 12) = v8;
  }
  return result;
}

unsigned int *WebCore::RenderText::positionForPoint@<X0>(WebCore::LayoutIntegration::LineLayout *a1@<X0>, WebCore::RenderObject *a2@<X1>, uint64_t a3@<X8>)
{
  WebCore::LayoutIntegration::LineLayout *v6;
  uint64_t v7;
  int *v8;
  int v9;
  int v10;
  WebCore::RenderObject *v11;
  signed int v12;
  int v13;
  unsigned int v14;
  float v15;
  unsigned int *result;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  int v30;
  float v31;
  float v32;
  float v33;
  double v34;
  signed int v35;
  BOOL v36;
  BOOL v37;
  float v38;
  double v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  int v44;
  _BOOL4 v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  int v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  const WebCore::InlineIterator::TextBox *v59;
  int v60;
  int v61;
  int v62;
  const WebCore::InlineIterator::TextBox *v63;
  unsigned int v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  double v72;
  signed int v73;
  signed int v74;
  const WebCore::InlineIterator::TextBox *v75;
  int v76;
  int v77;
  int v78;
  int v79;
  uint64_t v80;
  int *v81;
  int v82;
  _QWORD v83[2];
  unsigned int v84;
  _QWORD v85[2];
  unsigned int v86;
  unsigned int v87[4];
  unsigned int v88;
  unsigned int v89[4];
  int v90;
  _QWORD v91[2];
  int v92;
  int v93[4];
  unsigned int v94;
  char v95;
  _QWORD v96[2];
  unsigned int v97;

  v6 = (WebCore::LayoutIntegration::LineLayout *)WebCore::LayoutIntegration::LineLayout::containing(a1, a2);
  if (v6)
  {
    WebCore::LayoutIntegration::LineLayout::textBoxesFor(v6, a1, (uint64_t)v91);
  }
  else
  {
    v91[0] = *((_QWORD *)a1 + 8);
    v92 = 1;
  }
  if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v91) & 1) != 0
    || (v7 = *((_QWORD *)a1 + 13)) == 0
    || !*(_DWORD *)(v7 + 4))
  {
    result = WebCore::RenderObject::createVisiblePosition((unsigned int *)a1, 0, 1, a3);
    goto LABEL_151;
  }
  if (v92 == -1)
    goto LABEL_192;
  v96[0] = v93;
  if ((((uint64_t (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v92])(v96, v91) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196455CD0);
  }
  if (v92 == -1)
    goto LABEL_192;
  v96[0] = v93;
  v8 = ((unsigned int (*)(_QWORD *, _QWORD *))off_1E34372C8[v92])(v96, v91)
     ? (int *)a2
     : (int *)((char *)a2 + 4);
  if (v92 == -1)
    goto LABEL_192;
  v9 = *v8;
  v96[0] = v93;
  if ((((uint64_t (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v92])(v96, v91) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196455CF0);
  }
  if (v92 == -1)
    goto LABEL_192;
  v96[0] = v93;
  v10 = ((uint64_t (*)(_QWORD *, _QWORD *))off_1E34372C8[v92])(v96, v91);
  v11 = (WebCore::RenderObject *)((char *)a2 + 4);
  if (!v10)
    v11 = a2;
  v12 = *(_DWORD *)v11;
  v13 = (unsigned __int16)*(_DWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 4) + 8) + 124) >> 13;
  v80 = a3;
  v79 = 2;
  switch((unsigned __int16)*(_DWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 4) + 8) + 124) >> 13)
  {
    case 1:
    case 2:
      goto LABEL_19;
    case 3:
    case 5:
      v13 = 3;
      goto LABEL_19;
    case 4:
      goto LABEL_20;
    default:
      v13 = 0;
LABEL_19:
      v79 = v13;
LABEL_20:
      v81 = (int *)a2;
      *(_QWORD *)v89 = 0;
      v90 = 1;
      LOBYTE(v87[0]) = 0;
      v88 = -1;
      v14 = v92;
      if (v92 != -1)
      {
        ((void (*)(_QWORD *, unsigned int *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_2[v92])(v96, v87, v91);
        v88 = v14;
      }
      v15 = (float)v9 * 0.015625;
      v82 = v9 / 64;
      if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v87) & 1) != 0)
        goto LABEL_23;
      v17 = v79 & 0xFFFFFFFD;
      break;
  }
  while (1)
  {
    if (v88 == -1)
      goto LABEL_192;
    v96[0] = v93;
    if ((((uint64_t (*)(_QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v88])(v96, v87) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196455BD0);
    }
    if (v88 == -1)
      goto LABEL_192;
    v96[0] = v93;
    if (((unsigned int (*)(_QWORD *, unsigned int *))off_1E34372F8[v88])(v96, v87))
    {
      if (v88 == -1)
        goto LABEL_192;
      v96[0] = v93;
      if ((((uint64_t (*)(_QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v88])(v96, v87) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x196455C10);
      }
      WebCore::InlineIterator::Box::previousOnLine((WebCore::InlineIterator::Box *)v87, (uint64_t)v93);
      if (WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v93))
      {
        if (v88 == -1)
          goto LABEL_192;
        v96[0] = v85;
        if ((((uint64_t (*)(_QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v88])(v96, v87) & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x196455C30);
        }
        LOBYTE(v96[0]) = 0;
        v97 = -1;
        v18 = v88;
        if (v88 == -1)
          goto LABEL_192;
        ((void (*)(_QWORD *, _QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v88])(v85, v96, v87);
        v97 = v18;
        v85[0] = v83;
        ((void (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator15LeafBoxIterator18traverseNextOnLineEvE3__0JEEEEEJRNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v18])(v85, v96);
        LOBYTE(v85[0]) = 0;
        v86 = -1;
        v19 = v97;
        if (v97 != -1)
        {
          ((void (*)(_QWORD *, _QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v97])(v83, v85, v96);
          v86 = v19;
          if (v97 != -1)
            ((void (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v97])(v83, v96);
        }
        if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v85) & 1) != 0)
        {
          v20 = 0;
        }
        else
        {
          if (v88 == -1)
            goto LABEL_192;
          v96[0] = v83;
          if ((((uint64_t (*)(_QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v88])(v96, v87) & 1) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x196455C70);
          }
          LOBYTE(v96[0]) = 0;
          v97 = -1;
          v21 = v88;
          if (v88 == -1)
            goto LABEL_192;
          ((void (*)(_QWORD *, _QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v88])(v83, v96, v87);
          v97 = v21;
          v83[0] = &v95;
          ((void (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator15LeafBoxIterator18traverseNextOnLineEvE3__0JEEEEEJRNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v21])(v83, v96);
          LOBYTE(v83[0]) = 0;
          v84 = -1;
          v22 = v97;
          if (v97 == -1)
            goto LABEL_192;
          ((void (*)(char *, _QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v97])(&v95, v83, v96);
          v84 = v22;
          if (v97 != -1)
          {
            ((void (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v97])(&v95, v96);
            v22 = v84;
            if (v84 == -1)
              goto LABEL_192;
          }
          v96[0] = &v95;
          v23 = ((uint64_t (*)(_QWORD *, _QWORD *))off_1E34372F8[v22])(v96, v83);
          if (v84 != -1)
            ((void (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_6[v84])(v96, v83);
          v20 = v23 ^ 1;
        }
        if (v86 != -1)
          ((void (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_6[v86])(v96, v85);
      }
      else
      {
        v20 = 0;
      }
      if (v94 != -1)
        ((void (*)(_QWORD *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_6[v94])(v96, v93);
      if (v20)
        WebCore::InlineIterator::TextBoxIterator::traverseNextTextBox((WebCore::InlineIterator::TextBoxIterator *)v87);
    }
    if (v88 == -1)
      goto LABEL_192;
    v96[0] = v93;
    if ((((uint64_t (*)(_QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v88])(v96, v87) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196455BF0);
    }
    if (v88 == -1)
      goto LABEL_192;
    v96[0] = v93;
    ((void (*)(_QWORD *__return_ptr, _QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box7lineBoxEvE3__0JZNKSA_7lineBoxEvE3__1EEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v88])(v85, v96, v87);
    LOBYTE(v96[0]) = 0;
    v97 = -1;
    v24 = v86;
    if (v86 == -1)
      goto LABEL_192;
    ((void (*)(int *, _QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal[v86])(v93, v96, v85);
    v97 = v24;
    *(_QWORD *)v93 = v83;
    ((void (*)(int *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator15LineBoxIterator16traversePreviousEvE3__0JEEEEEJRNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v24])(v93, v96);
    LOBYTE(v93[0]) = 0;
    v94 = -1;
    v25 = v97;
    if (v97 == -1)
      goto LABEL_192;
    ((void (*)(_QWORD *, int *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal[v97])(v83, v93, v96);
    v94 = v25;
    if (v97 != -1)
    {
      ((void (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v97])(v83, v96);
      v25 = v94;
      if (v94 == -1)
        goto LABEL_192;
    }
    v96[0] = v83;
    v26 = ((uint64_t (*)(_QWORD *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator15LineBoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v25])(v96, v93);
    if (v94 != -1)
      ((void (*)(_QWORD *, int *))off_1E34372B8[v94])(v96, v93);
    if (v26)
    {
      if (v86 == -1)
        goto LABEL_192;
      v96[0] = v93;
      v27 = ((uint64_t (*)(_QWORD *, _QWORD *))off_1E3437338[v86])(v96, v85);
      v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 1048))(v27);
      v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 960))(v27);
      v30 = v28 + v29;
      if (__OFADD__(v28, v29))
        v30 = (v28 >> 31) + 0x7FFFFFFF;
      v31 = (float)v30 * 0.015625;
    }
    else
    {
      WebCore::InlineIterator::LineBox::contentLogicalTopAdjustedForPrecedingLineBox((WebCore::InlineIterator::LineBox *)v85);
      v31 = v32;
    }
    if (v86 == -1)
      goto LABEL_192;
    v96[0] = v93;
    v33 = ((float (*)(_QWORD *, _QWORD *))off_1E3437348[v86])(v96, v85);
    if (v33 >= v31)
      v33 = v31;
    v34 = v33 * 64.0;
    if (v34 >= 2147483650.0)
      v35 = 0x7FFFFFFF;
    else
      v35 = v34 <= -2147483650.0 ? 0x80000000 : (int)v34;
    v36 = v12 <= v35;
    v37 = v12 != v35 || v17 == 1;
    if (!v36 || !v37)
    {
      WebCore::InlineIterator::LineBox::contentLogicalBottomAdjustedForFollowingLineBox((WebCore::InlineIterator::LineBox *)v85);
      v39 = v38 * 64.0;
      if (v39 >= 2147483650.0)
      {
        v40 = 0x7FFFFFFF;
      }
      else if (v39 <= -2147483650.0)
      {
        v40 = 0x80000000;
      }
      else
      {
        v40 = (int)v39;
      }
      LOBYTE(v96[0]) = 0;
      v97 = -1;
      v41 = v86;
      if (v86 == -1)
        goto LABEL_192;
      ((void (*)(int *, _QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal[v86])(v93, v96, v85);
      v97 = v41;
      *(_QWORD *)v93 = v83;
      ((void (*)(int *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator15LineBoxIterator12traverseNextEvE3__0JEEEEEJRNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v41])(v93, v96);
      LOBYTE(v93[0]) = 0;
      v94 = -1;
      v42 = v97;
      if (v97 == -1)
        goto LABEL_192;
      ((void (*)(_QWORD *, int *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal[v97])(v83, v93, v96);
      v94 = v42;
      if (v97 != -1)
      {
        ((void (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v97])(v83, v96);
        v42 = v94;
        if (v94 == -1)
          goto LABEL_192;
      }
      v96[0] = v83;
      if ((((uint64_t (*)(_QWORD *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator15LineBoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v42])(v96, v93) & 1) == 0)
      {
        if (v94 == -1)
          goto LABEL_192;
        v96[0] = v83;
        v43 = ((float (*)(_QWORD *, int *))off_1E3437348[v94])(v96, v93) * 64.0;
        if (v43 >= 2147483650.0)
        {
          v44 = 0x7FFFFFFF;
        }
        else if (v43 <= -2147483650.0)
        {
          v44 = 0x80000000;
        }
        else
        {
          v44 = (int)v43;
        }
        if (v44 < v40)
          v40 = v44;
      }
      if (v94 != -1)
        ((void (*)(_QWORD *, int *))off_1E34372B8[v94])(v96, v93);
      v45 = v17 == 1;
      if (v12 != v40)
        v45 = 0;
      if (v12 < v40 || v45)
        break;
    }
LABEL_128:
    if (v90 == -1)
    {
      if (v88 != -1)
      {
LABEL_132:
        v96[0] = v89;
        ((void (*)(_QWORD *, unsigned int *, unsigned int *))off_1E3437308[v88])(v96, v89, v87);
      }
    }
    else
    {
      if (v88 != -1)
        goto LABEL_132;
      ((void (*)(_QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_6[v90])(v96, v89);
      v90 = -1;
    }
    if (v86 != -1)
      ((void (*)(_QWORD *, _QWORD *))off_1E34372B8[v86])(v96, v85);
    WebCore::InlineIterator::TextBoxIterator::traverseNextTextBox((WebCore::InlineIterator::TextBoxIterator *)v87);
    if (WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v87))
    {
LABEL_23:
      if (v88 != -1)
        ((void (*)(_QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_6[v88])(v96, v87);
      if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v89) & 1) != 0)
      {
        result = WebCore::RenderObject::createVisiblePosition((unsigned int *)a1, 0, 1, v80);
        goto LABEL_149;
      }
      v93[0] = 0;
      WebCore::lineDirectionPointFitsInBox(v82, v89, v93);
      if (v90 != -1)
      {
        v96[0] = v87;
        if ((((uint64_t (*)(_QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v90])(v96, v89) & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x196455D10);
        }
        v60 = WebCore::offsetForPositionInRun((WebCore *)v89, v59, v15);
        if (v90 != -1)
        {
          v61 = v60;
          v96[0] = v87;
          if ((((uint64_t (*)(_QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v90])(v96, v89) & 1) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x196455D30);
          }
          if (v90 != -1)
          {
            v96[0] = v87;
            v62 = ((uint64_t (*)(_QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7TextBox5startEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v90])(v96, v89);
            result = WebCore::createVisiblePositionAfterAdjustingOffsetForBiDi(v80, v89, v62 + v61, v93[0]);
            goto LABEL_149;
          }
        }
      }
      goto LABEL_192;
    }
  }
  v93[0] = 0;
  if (v88 == -1)
    goto LABEL_192;
  v96[0] = v83;
  if ((((uint64_t (*)(_QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v88])(v96, v87) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196455C50);
  }
  if (v88 == -1)
    goto LABEL_192;
  v96[0] = v83;
  ((void (*)(_QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box32visualRectIgnoringBlockDirectionEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_1[v88])(v96, v87);
  if (v88 == -1)
    goto LABEL_192;
  v48 = v46;
  v49 = v47;
  v96[0] = v83;
  if (((unsigned int (*)(_QWORD *, unsigned int *))off_1E34372C8[v88])(v96, v87))
    v50 = v48;
  else
    v50 = v49;
  if (v15 == v50)
    goto LABEL_222;
  if (v88 == -1)
    goto LABEL_192;
  v51 = *v81;
  v96[0] = v83;
  if ((((uint64_t (*)(_QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v88])(v96, v87) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196455C90);
  }
  if (v88 == -1)
    goto LABEL_192;
  v96[0] = v83;
  ((void (*)(_QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box32visualRectIgnoringBlockDirectionEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_1[v88])(v96, v87);
  if (v88 == -1)
    goto LABEL_192;
  v53 = v52;
  v96[0] = v83;
  if ((((uint64_t (*)(_QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v88])(v96, v87) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196455CB0);
  }
  if (v88 == -1)
    goto LABEL_192;
  v96[0] = v83;
  ((void (*)(_QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box32visualRectIgnoringBlockDirectionEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_1[v88])(v96, v87);
  if (v88 == -1)
    goto LABEL_192;
  v56 = v54;
  v57 = v55;
  v96[0] = v83;
  v58 = ((unsigned int (*)(_QWORD *, unsigned int *))off_1E34372C8[v88])(v96, v87) ? v56 : v57;
  if ((float)((float)v51 * 0.015625) >= (float)(v53 + v58))
  {
LABEL_222:
    if (!WebCore::lineDirectionPointFitsInBox(v82, v87, v93))
      goto LABEL_128;
    if (v88 != -1)
    {
      v96[0] = v83;
      if ((((uint64_t (*)(_QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v88])(v96, v87) & 1) != 0)
      {
        v64 = WebCore::offsetForPositionInRun((WebCore *)v87, v63, v15);
        result = WebCore::createVisiblePositionAfterAdjustingOffsetForBiDi(v80, v87, v64, v93[0]);
        goto LABEL_176;
      }
LABEL_193:
      __break(0xC471u);
      JUMPOUT(0x196455D54);
    }
LABEL_192:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_193;
  }
  if (v88 == -1)
    goto LABEL_192;
  v96[0] = v83;
  if ((((uint64_t (*)(_QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v88])(v96, v87) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196455D88);
  }
  if (v88 == -1)
    goto LABEL_192;
  v96[0] = v83;
  ((void (*)(_QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box32visualRectIgnoringBlockDirectionEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_1[v88])(v96, v87);
  if (v88 == -1)
    goto LABEL_192;
  v66 = v65;
  v96[0] = v83;
  if ((((uint64_t (*)(_QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v88])(v96, v87) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196455DA8);
  }
  if (v88 == -1)
    goto LABEL_192;
  v96[0] = v83;
  ((void (*)(_QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box32visualRectIgnoringBlockDirectionEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_1[v88])(v96, v87);
  if (v88 == -1)
    goto LABEL_192;
  v69 = v67;
  v70 = v68;
  v96[0] = v83;
  v71 = ((unsigned int (*)(_QWORD *, unsigned int *))off_1E34372C8[v88])(v96, v87) ? v69 : v70;
  v72 = (float)(v66 + (float)(v71 * 0.5)) * 64.0;
  if (v72 >= 2147483650.0)
    v73 = 0x7FFFFFFF;
  else
    v73 = v72 <= -2147483650.0 ? 0x80000000 : (int)v72;
  if (v88 == -1)
    goto LABEL_192;
  v74 = *v81;
  v96[0] = v83;
  if ((((uint64_t (*)(_QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v88])(v96, v87) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196455DC8);
  }
  v76 = WebCore::offsetForPositionInRun((WebCore *)v87, v75, v15);
  if (v88 == -1)
    goto LABEL_192;
  v77 = v76;
  v96[0] = v83;
  if ((((uint64_t (*)(_QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v88])(v96, v87) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196455DE8);
  }
  if (v88 == -1)
    goto LABEL_192;
  v96[0] = v83;
  v78 = ((uint64_t (*)(_QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7TextBox5startEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v88])(v96, v87);
  result = WebCore::RenderObject::createVisiblePosition((unsigned int *)a1, v78 + v77, v74 < v73, v80);
LABEL_176:
  if (v86 != -1)
    result = (unsigned int *)((uint64_t (*)(_QWORD *, _QWORD *))off_1E34372B8[v86])(v96, v85);
  if (v88 != -1)
    result = (unsigned int *)((uint64_t (*)(_QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_6[v88])(v96, v87);
LABEL_149:
  if (v90 != -1)
    result = (unsigned int *)((uint64_t (*)(_QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_6[v90])(v96, v89);
LABEL_151:
  if (v92 != -1)
    return (unsigned int *)((uint64_t (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_6[v92])(v96, v91);
  return result;
}

uint64_t WebCore::offsetForPositionInRun(WebCore *this, const WebCore::InlineIterator::TextBox *a2, float a3)
{
  WebCore *v3;
  uint64_t (**v4)();
  uint64_t (**v5)();
  float v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float v11;
  uint64_t v12;
  float v13;
  float v14;
  float v15;
  uint64_t v16;
  float v17;
  float v18;
  uint64_t v19;
  float v20;
  float v21;
  float v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  float v27;
  uint64_t v28;
  float v29;
  float v30;
  float v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float v41;
  float v42;
  uint64_t v43;
  float v44;
  float v45;
  float v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  int ***v50;
  WTF::StringImpl *v51;
  int v52;
  int *v53;
  int **v54;

  v7 = *((unsigned int *)this + 4);
  if ((_DWORD)v7 == -1)
    goto LABEL_45;
  v6 = a3;
  v3 = this;
  v50 = &v54;
  if ((((uint64_t (*)(int ****, WebCore *))off_1E34372F8[v7])(&v50, this) & 1) != 0)
    return 0;
  v9 = *((unsigned int *)v3 + 4);
  if ((_DWORD)v9 == -1)
    goto LABEL_45;
  v5 = (uint64_t (**)())&v54;
  v50 = &v54;
  v4 = __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box32visualRectIgnoringBlockDirectionEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_1;
  ((void (*)(int ****, WebCore *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box32visualRectIgnoringBlockDirectionEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_1[v9])(&v50, v3);
  v12 = *((unsigned int *)v3 + 4);
  if ((_DWORD)v12 == -1)
    goto LABEL_45;
  v13 = v10;
  v14 = v11;
  v50 = &v54;
  v5 = off_1E34372C8;
  v15 = ((unsigned int (*)(int ****, WebCore *))off_1E34372C8[v12])(&v50, v3) ? v13 : v14;
  v16 = *((unsigned int *)v3 + 4);
  if ((_DWORD)v16 == -1)
    goto LABEL_45;
  v50 = &v54;
  ((void (*)(int ****, WebCore *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box32visualRectIgnoringBlockDirectionEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_1[v16])(&v50, v3);
  v19 = *((unsigned int *)v3 + 4);
  if ((_DWORD)v19 == -1)
    goto LABEL_45;
  v20 = v17;
  v21 = v18;
  v22 = v6 - v15;
  v50 = &v54;
  if (((unsigned int (*)(int ****, WebCore *))off_1E34372C8[v19])(&v50, v3))
    v23 = v20;
  else
    v23 = v21;
  if (v22 > v23)
  {
    v24 = *((unsigned int *)v3 + 4);
    if ((_DWORD)v24 == -1)
      goto LABEL_45;
    v50 = &v54;
    if ((((uint64_t (*)(int ****, WebCore *))off_1E34372E8[v24])(&v50, v3) & 1) != 0)
      return 0;
    goto LABEL_26;
  }
  v25 = *((unsigned int *)v3 + 4);
  if ((_DWORD)v25 == -1)
    goto LABEL_45;
  v50 = &v54;
  ((void (*)(int ****, WebCore *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box32visualRectIgnoringBlockDirectionEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_1[v25])(&v50, v3);
  v28 = *((unsigned int *)v3 + 4);
  if ((_DWORD)v28 == -1)
    goto LABEL_45;
  v29 = v26;
  v30 = v27;
  v50 = &v54;
  if (((unsigned int (*)(int ****, WebCore *))off_1E34372C8[v28])(&v50, v3))
    v31 = v29;
  else
    v31 = v30;
  if ((float)(v6 - v31) >= 0.0)
  {
    v34 = *((unsigned int *)v3 + 4);
    if ((_DWORD)v34 != -1)
    {
      v50 = &v54;
      v35 = ((uint64_t (*)(int ****, WebCore *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box8rendererEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v34])(&v50, v3);
      if ((*(_BYTE *)(v35 + 45) & 2) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1964561D4);
      }
      if (*(_BYTE *)(v35 + 46) == 3)
        goto LABEL_46;
      goto LABEL_31;
    }
    while (1)
    {
LABEL_45:
      while (1)
      {
        v35 = std::__throw_bad_variant_access[abi:sn180100]();
LABEL_46:
        if ((*(_BYTE *)(v35 + 140) & 1) == 0)
          break;
        v37 = *(_QWORD *)(v35 + 120);
LABEL_33:
        v38 = *(_QWORD *)(v37 + 32);
        v52 = 1;
        v53 = &v52;
        v39 = *((unsigned int *)v3 + 4);
        if ((_DWORD)v39 != -1)
        {
          v54 = &v53;
          ((void (*)(int ****__return_ptr, int ***, WebCore *))off_1E3437288[v39])(&v50, &v54, v3);
          v40 = *((unsigned int *)v3 + 4);
          if ((_DWORD)v40 != -1)
          {
            v54 = &v53;
            ((void (*)(int ***, WebCore *))v4[v40])(&v54, v3);
            v43 = *((unsigned int *)v3 + 4);
            if ((_DWORD)v43 != -1)
            {
              v44 = v41;
              v45 = v42;
              v54 = &v53;
              if (((unsigned int (*)(int ***, WebCore *))v5[v43])(&v54, v3))
                v46 = v44;
              else
                v46 = v45;
              v8 = WebCore::FontCascade::offsetForPosition((WebCore::FontCascade *)(v38 + 32), (const WebCore::TextRun *)&v50, v6 - v46);
              v48 = v51;
              v51 = 0;
              if (v48)
              {
                if (*(_DWORD *)v48 == 2)
                  WTF::StringImpl::destroy(v48, v47);
                else
                  *(_DWORD *)v48 -= 2;
              }
              return v8;
            }
          }
        }
      }
LABEL_31:
      v36 = *((unsigned int *)v3 + 4);
      if ((_DWORD)v36 != -1)
      {
        v50 = &v54;
        v37 = ((uint64_t (*)(int ****, WebCore *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box5styleEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v36])(&v50, v3);
        goto LABEL_33;
      }
    }
  }
  v32 = *((unsigned int *)v3 + 4);
  if ((_DWORD)v32 == -1)
    goto LABEL_45;
  v50 = &v54;
  if ((((uint64_t (*)(int ****, WebCore *))off_1E34372E8[v32])(&v50, v3) & 1) == 0)
    return 0;
LABEL_26:
  v33 = *((unsigned int *)v3 + 4);
  if ((_DWORD)v33 == -1)
    goto LABEL_45;
  v50 = &v54;
  return ((uint64_t (*)(int ****, WebCore *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7TextBox6lengthEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v33])(&v50, v3);
}

uint64_t WebCore::lineDirectionPointFitsInBox(int a1, unsigned int *a2, int *a3)
{
  uint64_t v3;
  uint64_t v7;
  float v8;
  float v9;
  uint64_t v10;
  float v11;
  float v12;
  float v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  float v19;
  uint64_t v20;
  float v21;
  float v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v28;
  _QWORD v29[2];
  int v30;
  char v31;
  char *v32;

  *a3 = 0;
  v3 = a2[4];
  if ((_DWORD)v3 == -1)
    goto LABEL_44;
  v29[0] = &v32;
  if ((((uint64_t (*)(_QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v3])(v29) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1964564F4);
  }
  v7 = a2[4];
  if ((_DWORD)v7 == -1)
    goto LABEL_44;
  v29[0] = &v32;
  ((void (*)(_QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box32visualRectIgnoringBlockDirectionEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_1[v7])(v29, a2);
  v10 = a2[4];
  if ((_DWORD)v10 == -1)
    goto LABEL_44;
  v11 = v8;
  v12 = v9;
  v13 = (float)a1;
  v29[0] = &v32;
  if (((unsigned int (*)(_QWORD *, unsigned int *))off_1E34372C8[v10])(v29, a2))
    v14 = v11;
  else
    v14 = v12;
  if (v14 >= v13)
  {
    v23 = a2[4];
    if ((_DWORD)v23 != -1)
    {
      v29[0] = &v32;
      if ((((uint64_t (*)(_QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v23])(v29, a2) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x196456534);
      }
      WebCore::InlineIterator::Box::previousOnLine((WebCore::InlineIterator::Box *)a2, (uint64_t)v29);
      if (WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v29))
        v24 = 2;
      else
        v24 = 0;
      *a3 = v24;
      if (v30 != -1)
        ((void (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_6[v30])(&v32, v29);
      return 1;
    }
    goto LABEL_44;
  }
  v15 = a2[4];
  if ((_DWORD)v15 == -1)
    goto LABEL_44;
  v32 = &v31;
  if ((((uint64_t (*)(char **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v15])(&v32, a2) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196456514);
  }
  WebCore::InlineIterator::Box::previousOnLineIgnoringLineBreak((WebCore::InlineIterator::Box *)a2, (uint64_t)v29);
  if (WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v29))
  {
    v16 = a2[4];
    if ((_DWORD)v16 == -1)
      goto LABEL_44;
    v32 = &v31;
    if ((((uint64_t (*)(char **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v16])(&v32, a2) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196456574);
    }
    v17 = a2[4];
    if ((_DWORD)v17 == -1)
      goto LABEL_44;
    v32 = &v31;
    ((void (*)(char **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box32visualRectIgnoringBlockDirectionEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_1[v17])(&v32, a2);
    v20 = a2[4];
    if ((_DWORD)v20 == -1)
      goto LABEL_44;
    v21 = v18;
    v22 = v19;
    v32 = &v31;
    if (!((unsigned int (*)(char **, unsigned int *))off_1E34372C8[v20])(&v32, a2))
      v21 = v22;
    if (v30 != -1)
      ((void (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_6[v30])(&v32, v29);
    if (v21 > v13)
      return 1;
  }
  else if (v30 != -1)
  {
    ((void (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_6[v30])(&v32, v29);
  }
  v25 = a2[4];
  if ((_DWORD)v25 == -1)
  {
LABEL_44:
    v28 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::createVisiblePositionAfterAdjustingOffsetForBiDi(v28);
  }
  v29[0] = &v32;
  if ((((uint64_t (*)(_QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v25])(v29, a2) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196456554);
  }
  WebCore::InlineIterator::Box::nextOnLineIgnoringLineBreak((WebCore::InlineIterator::Box *)a2, (uint64_t)v29);
  v26 = WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v29);
  if (v30 != -1)
    ((void (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_6[v30])(&v32, v29);
  if (v26)
  {
    *a3 = 2;
    return 1;
  }
  return 0;
}

unsigned int *WebCore::createVisiblePositionAfterAdjustingOffsetForBiDi(uint64_t a1, unsigned int *a2, unsigned int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WebCore::RenderObject *v23;
  WebCore::RenderObject *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WebCore::RenderObject *v45;
  WebCore::RenderObject *v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  int v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int v59;
  char v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  char v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int *result;
  uint64_t v71;
  unsigned int *v72;
  unsigned int v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  unsigned int v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  uint64_t v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int *v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD v104[2];
  unsigned int v105;
  unsigned int v106[4];
  int v107;
  _QWORD v108[2];
  unsigned int v109;
  char v110;
  char *v111;

  if (a3)
  {
    v8 = a2[4];
    if ((_DWORD)v8 == -1)
      goto LABEL_231;
    v108[0] = v106;
    if ((((uint64_t (*)(_QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v8])(v108, a2) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1964578B0);
    }
    v9 = a2[4];
    if ((_DWORD)v9 == -1)
      goto LABEL_231;
    v108[0] = v106;
    if (((unsigned int (*)(_QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7TextBox6lengthEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v9])(v108, a2) > a3)
    {
      v10 = a2[4];
      if ((_DWORD)v10 != -1)
      {
        v108[0] = v106;
        if ((((uint64_t (*)(_QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v10])(v108, a2) & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x196457950);
        }
        v11 = a2[4];
        if ((_DWORD)v11 != -1)
        {
          v108[0] = v106;
          v12 = ((uint64_t (*)(_QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7TextBox5startEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v11])(v108, a2)+ a3;
          v13 = a4 == 2
              ? WTF::switchOn<std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const&,WebCore::InlineIterator::Box::minimumCaretOffset(void)::{lambda(std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const& &)#1}>(a2) >= v12
              : a4 != 1;
          v71 = a2[4];
          if ((_DWORD)v71 != -1)
          {
            v108[0] = v106;
            v72 = (unsigned int *)((uint64_t (*)(_QWORD *, unsigned int *))off_1E3437298[v71])(v108, a2);
            return WebCore::RenderObject::createVisiblePosition(v72, v12, v13, a1);
          }
        }
      }
      goto LABEL_231;
    }
  }
  v14 = a2[4];
  if ((_DWORD)v14 == -1)
  {
LABEL_231:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_232;
  }
  v108[0] = v106;
  if ((((uint64_t (*)(_QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v14])(v108, a2) & 1) == 0)
  {
    __break(0xC471u);
    goto LABEL_244;
  }
  v15 = a2[4];
  if ((_DWORD)v15 == -1)
    goto LABEL_231;
  v108[0] = v106;
  if ((a3 == 0) != ((((uint64_t (*)(_QWORD *, unsigned int *))off_1E34372E8[v15])(v108, a2) & 1) == 0))
  {
    v16 = a2[4];
    if ((_DWORD)v16 == -1)
      goto LABEL_231;
    v108[0] = v106;
    if ((((uint64_t (*)(_QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v16])(v108, a2) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196457910);
    }
    WebCore::InlineIterator::Box::nextOnLineIgnoringLineBreak((WebCore::InlineIterator::Box *)a2, (uint64_t)v108);
    if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v108) & 1) != 0)
      goto LABEL_274;
    if (v109 == -1)
      goto LABEL_231;
    *(_QWORD *)v106 = v104;
    v17 = ((uint64_t (*)(unsigned int *, _QWORD *))off_1E34372E8[v109])(v106, v108);
    v18 = a2[4];
    if ((_DWORD)v18 == -1)
      goto LABEL_231;
    v19 = v17;
    *(_QWORD *)v106 = v104;
    if ((((uint64_t (*)(unsigned int *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v18])(v106, a2) & 1) == 0)
    {
LABEL_232:
      __break(0xC471u);
      JUMPOUT(0x196457AB4);
    }
    v20 = a2[4];
    if ((_DWORD)v20 == -1)
      goto LABEL_231;
    *(_QWORD *)v106 = v104;
    if (v19 != ((unsigned int (*)(unsigned int *, unsigned int *))off_1E34372E8[v20])(v106, a2))
    {
LABEL_274:
      v21 = a2[4];
      if ((_DWORD)v21 == -1)
        goto LABEL_231;
      *(_QWORD *)v106 = v104;
      if ((((uint64_t (*)(unsigned int *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v21])(v106, a2) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x196457970);
      }
      v22 = a2[4];
      if ((_DWORD)v22 == -1)
        goto LABEL_231;
      *(_QWORD *)v106 = v104;
      v23 = (WebCore::RenderObject *)((uint64_t (*)(unsigned int *, unsigned int *))off_1E3437298[v22])(v106, a2);
      if ((*((_BYTE *)v23 + 45) & 2) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x196457990);
      }
      v24 = WebCore::RenderObject::containingBlock(v23);
      v25 = a2[4];
      if ((_DWORD)v25 == -1)
        goto LABEL_231;
      v26 = *((_DWORD *)v24 + 30);
      *(_QWORD *)v106 = v104;
      if ((((uint64_t (*)(unsigned int *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v25])(v106, a2) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1964579B0);
      }
      v27 = a2[4];
      if ((_DWORD)v27 == -1)
        goto LABEL_231;
      *(_QWORD *)v106 = v104;
      if (((((unsigned int (*)(unsigned int *, unsigned int *))off_1E34372E8[v27])(v106, a2) ^ ((v26 & 0x4000000u) >> 26)) & 1) != 0)
      {
        if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v108) & 1) == 0)
        {
          if (v109 == -1)
            goto LABEL_231;
          *(_QWORD *)v106 = v104;
          v28 = ((uint64_t (*)(unsigned int *, _QWORD *))off_1E34372E8[v109])(v106, v108);
          v29 = a2[4];
          if ((_DWORD)v29 == -1)
            goto LABEL_231;
          v30 = v28;
          *(_QWORD *)v106 = v104;
          if ((((uint64_t (*)(unsigned int *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v29])(v106, a2) & 1) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x196457B74);
          }
          v31 = a2[4];
          if ((_DWORD)v31 == -1)
            goto LABEL_231;
          *(_QWORD *)v106 = v104;
          if (v30 > ((unsigned int (*)(unsigned int *, unsigned int *))off_1E34372E8[v31])(v106, a2))
          {
            LOBYTE(v106[0]) = 0;
            v107 = -1;
            v32 = v109;
            if (v109 != -1)
            {
              ((void (*)(_QWORD *, unsigned int *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_2[v109])(v104, v106, v108);
              v107 = v32;
            }
            if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v108) & 1) == 0)
            {
              while (v109 != -1)
              {
                v104[0] = &v111;
                v33 = ((uint64_t (*)(_QWORD *, _QWORD *))off_1E34372E8[v109])(v104, v108);
                v34 = a2[4];
                if ((_DWORD)v34 == -1)
                  break;
                v35 = v33;
                v104[0] = &v111;
                if ((((uint64_t (*)(_QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v34])(v104, a2) & 1) == 0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1964579D0);
                }
                v36 = a2[4];
                if ((_DWORD)v36 == -1)
                  break;
                v104[0] = &v111;
                if (v35 <= ((unsigned int (*)(_QWORD *, unsigned int *))off_1E34372E8[v36])(v104, a2))
                  goto LABEL_56;
                if (v107 == -1)
                {
                  if (v109 == -1)
                    goto LABEL_50;
LABEL_49:
                  v104[0] = v106;
                  ((void (*)(_QWORD *, unsigned int *, _QWORD *))off_1E3437308[v109])(v104, v106, v108);
                  goto LABEL_50;
                }
                if (v109 != -1)
                  goto LABEL_49;
                ((void (*)(_QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_6[v107])(v104, v106);
                v107 = -1;
                do
                {
LABEL_50:
                  if (v109 == -1)
                    goto LABEL_231;
                  v104[0] = &v111;
                  ((void (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator15LeafBoxIterator18traverseNextOnLineEvE3__0JEEEEEJRNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v109])(v104, v108);
                  if (v109 == -1)
                    goto LABEL_231;
                  v104[0] = &v111;
                  if ((((uint64_t (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator11BoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v109])(v104, v108) & 1) != 0)break;
                  if (v109 == -1)
                    goto LABEL_231;
                  v104[0] = &v111;
                }
                while ((((uint64_t (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box11isLineBreakEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v109])(v104, v108) & 1) != 0);
                if (WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v108))
                  goto LABEL_56;
              }
              goto LABEL_231;
            }
LABEL_56:
            if (v107 == -1)
              goto LABEL_231;
            v104[0] = &v111;
            v37 = a1;
            if ((((uint64_t (*)(_QWORD *, unsigned int *))off_1E34372E8[v107])(v104, v106) & 1) == 0)
              goto LABEL_186;
LABEL_152:
            if (v107 == -1)
              goto LABEL_231;
            v104[0] = &v111;
            v85 = ((uint64_t (*)(_QWORD *, unsigned int *))off_1E3437358[v107])(v104, v106);
            goto LABEL_187;
          }
        }
        if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v108) & 1) != 0)
          goto LABEL_126;
        if (v109 == -1)
          goto LABEL_231;
        *(_QWORD *)v106 = v104;
        v73 = ((uint64_t (*)(unsigned int *, _QWORD *))off_1E34372E8[v109])(v106, v108);
        v74 = a2[4];
        if ((_DWORD)v74 == -1)
          goto LABEL_231;
        v75 = v73;
        *(_QWORD *)v106 = v104;
        if ((((uint64_t (*)(unsigned int *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v74])(v106, a2) & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x196457BB4);
        }
        v76 = a2[4];
        if ((_DWORD)v76 == -1)
          goto LABEL_231;
        *(_QWORD *)v106 = v104;
        if (v75 < ((unsigned int (*)(unsigned int *, unsigned int *))off_1E34372E8[v76])(v106, a2))
        {
LABEL_126:
          LOBYTE(v106[0]) = 0;
          v107 = -1;
          v77 = a2[4];
          if ((_DWORD)v77 == -1)
            goto LABEL_231;
          ((void (*)(_QWORD *, unsigned int *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_2[v77])(v104, v106, a2);
          v107 = v77;
          v78 = a2[4];
          if ((_DWORD)v78 == -1)
            goto LABEL_231;
          v111 = &v110;
          if ((((uint64_t (*)(char **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v78])(&v111, a2) & 1) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x196457AF4);
          }
          WebCore::InlineIterator::Box::previousOnLineIgnoringLineBreak((WebCore::InlineIterator::Box *)a2, (uint64_t)v104);
          if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v104) & 1) == 0)
          {
            while (v105 != -1)
            {
              v111 = &v110;
              v79 = ((uint64_t (*)(char **, _QWORD *))off_1E34372E8[v105])(&v111, v104);
              v80 = a2[4];
              if ((_DWORD)v80 == -1)
                break;
              v81 = v79;
              v111 = &v110;
              if ((((uint64_t (*)(char **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v80])(&v111, a2) & 1) == 0)
              {
                __break(0xC471u);
                JUMPOUT(0x1964578D0);
              }
              v82 = a2[4];
              if ((_DWORD)v82 == -1)
                break;
              v111 = &v110;
              if (v81 < ((unsigned int (*)(char **, unsigned int *))off_1E34372E8[v82])(&v111, a2))
                goto LABEL_146;
              if (v107 == -1)
              {
                if (v105 == -1)
                  goto LABEL_140;
LABEL_139:
                v111 = (char *)v106;
                ((void (*)(char **, unsigned int *, _QWORD *))off_1E3437308[v105])(&v111, v106, v104);
                goto LABEL_140;
              }
              if (v105 != -1)
                goto LABEL_139;
              ((void (*)(char **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_6[v107])(&v111, v106);
              v107 = -1;
              do
              {
LABEL_140:
                if (v105 == -1)
                  goto LABEL_231;
                v111 = &v110;
                (*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator15LeafBoxIterator22traversePreviousOnLineEvE3__0JEEEEEJRNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix
                 + v105))((int)&v111, (WebCore::InlineIterator::BoxModernPath *)v104);
                if (v105 == -1)
                  goto LABEL_231;
                v111 = &v110;
                if ((((uint64_t (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator11BoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v105])(&v111, v104) & 1) != 0)break;
                if (v105 == -1)
                  goto LABEL_231;
                v111 = &v110;
              }
              while ((((uint64_t (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box11isLineBreakEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v105])(&v111, v104) & 1) != 0);
              if (WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v104))
                goto LABEL_146;
            }
            goto LABEL_231;
          }
LABEL_146:
          if (v105 != -1)
            ((void (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_6[v105])(&v111, v104);
          v83 = a2[4];
          v37 = a1;
          if ((_DWORD)v83 == -1)
            goto LABEL_231;
          v104[0] = &v111;
          if ((((uint64_t (*)(_QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v83])(v104, a2) & 1) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x196457B34);
          }
          v84 = a2[4];
          if ((_DWORD)v84 == -1)
            goto LABEL_231;
          v104[0] = &v111;
          if ((((uint64_t (*)(_QWORD *, unsigned int *))off_1E34372E8[v84])(v104, a2) & 1) != 0)
            goto LABEL_152;
          goto LABEL_186;
        }
        v99 = a2[4];
        if ((_DWORD)v99 == -1)
          goto LABEL_231;
        *(_QWORD *)v106 = v104;
        if ((((uint64_t (*)(unsigned int *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v99])(v106, a2) & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x196457BF4);
        }
        v100 = a2[4];
        if ((_DWORD)v100 == -1)
          goto LABEL_231;
        *(_QWORD *)v106 = v104;
        if ((((uint64_t (*)(unsigned int *, unsigned int *))off_1E34372E8[v100])(v106, a2) & 1) != 0)
        {
          v103 = a2[4];
          if ((_DWORD)v103 == -1)
            goto LABEL_231;
          *(_QWORD *)v106 = v104;
          v101 = ((uint64_t (*)(unsigned int *, unsigned int *))off_1E3437358[v103])(v106, a2);
        }
        else
        {
          v101 = WTF::switchOn<std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const&,WebCore::InlineIterator::Box::minimumCaretOffset(void)::{lambda(std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const& &)#1}>(a2);
        }
        goto LABEL_206;
      }
    }
    v61 = a2[4];
    if ((_DWORD)v61 == -1)
      goto LABEL_231;
    *(_QWORD *)v106 = v104;
    if ((((uint64_t (*)(unsigned int *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v61])(v106, a2) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196457A70);
    }
    v62 = WebCore::InlineIterator::Box::rightmostCaretOffset((WebCore::InlineIterator::Box *)a2);
LABEL_112:
    v66 = v62;
    if (a4 == 2)
      v67 = WTF::switchOn<std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const&,WebCore::InlineIterator::Box::minimumCaretOffset(void)::{lambda(std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const& &)#1}>(a2) >= v62;
    else
      v67 = a4 != 1;
    v68 = a2[4];
    if ((_DWORD)v68 == -1)
      goto LABEL_231;
    goto LABEL_116;
  }
  v38 = a2[4];
  if ((_DWORD)v38 == -1)
    goto LABEL_231;
  v108[0] = v106;
  if ((((uint64_t (*)(_QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v38])(v108, a2) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196457930);
  }
  WebCore::InlineIterator::Box::previousOnLineIgnoringLineBreak((WebCore::InlineIterator::Box *)a2, (uint64_t)v108);
  if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v108) & 1) == 0)
  {
    if (v109 == -1)
      goto LABEL_231;
    *(_QWORD *)v106 = v104;
    v39 = ((uint64_t (*)(unsigned int *, _QWORD *))off_1E34372E8[v109])(v106, v108);
    v40 = a2[4];
    if ((_DWORD)v40 == -1)
      goto LABEL_231;
    v41 = v39;
    *(_QWORD *)v106 = v104;
    if ((((uint64_t (*)(unsigned int *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v40])(v106, a2) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196457AD4);
    }
    v42 = a2[4];
    if ((_DWORD)v42 == -1)
      goto LABEL_231;
    *(_QWORD *)v106 = v104;
    if (v41 == ((unsigned int (*)(unsigned int *, unsigned int *))off_1E34372E8[v42])(v106, a2))
      goto LABEL_105;
  }
  v43 = a2[4];
  if ((_DWORD)v43 == -1)
    goto LABEL_231;
  *(_QWORD *)v106 = v104;
  if ((((uint64_t (*)(unsigned int *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v43])(v106, a2) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1964579F0);
  }
  v44 = a2[4];
  if ((_DWORD)v44 == -1)
    goto LABEL_231;
  *(_QWORD *)v106 = v104;
  v45 = (WebCore::RenderObject *)((uint64_t (*)(unsigned int *, unsigned int *))off_1E3437298[v44])(v106, a2);
  if ((*((_BYTE *)v45 + 45) & 2) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196457A10);
  }
  v46 = WebCore::RenderObject::containingBlock(v45);
  v47 = a2[4];
  if ((_DWORD)v47 == -1)
    goto LABEL_231;
  v48 = *((_DWORD *)v46 + 30);
  *(_QWORD *)v106 = v104;
  if ((((uint64_t (*)(unsigned int *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v47])(v106, a2) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196457A30);
  }
  v49 = a2[4];
  if ((_DWORD)v49 == -1)
    goto LABEL_231;
  *(_QWORD *)v106 = v104;
  if (((((unsigned int (*)(unsigned int *, unsigned int *))off_1E34372E8[v49])(v106, a2) ^ ((v48 & 0x4000000u) >> 26)) & 1) == 0)
  {
LABEL_105:
    v63 = a2[4];
    if ((_DWORD)v63 == -1)
      goto LABEL_231;
    *(_QWORD *)v106 = v104;
    if ((((uint64_t (*)(unsigned int *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v63])(v106, a2) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196457A90);
    }
    v64 = a2[4];
    if ((_DWORD)v64 == -1)
      goto LABEL_231;
    *(_QWORD *)v106 = v104;
    if ((((uint64_t (*)(unsigned int *, unsigned int *))off_1E34372E8[v64])(v106, a2) & 1) != 0)
    {
      v65 = a2[4];
      if ((_DWORD)v65 == -1)
        goto LABEL_231;
      *(_QWORD *)v106 = v104;
      v62 = ((uint64_t (*)(unsigned int *, unsigned int *))off_1E3437358[v65])(v106, a2);
    }
    else
    {
      v62 = WTF::switchOn<std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const&,WebCore::InlineIterator::Box::minimumCaretOffset(void)::{lambda(std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const& &)#1}>(a2);
    }
    goto LABEL_112;
  }
  if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v108) & 1) == 0)
  {
    if (v109 == -1)
      goto LABEL_231;
    *(_QWORD *)v106 = v104;
    v50 = ((uint64_t (*)(unsigned int *, _QWORD *))off_1E34372E8[v109])(v106, v108);
    v51 = a2[4];
    if ((_DWORD)v51 == -1)
      goto LABEL_231;
    v52 = v50;
    *(_QWORD *)v106 = v104;
    if ((((uint64_t (*)(unsigned int *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v51])(v106, a2) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196457B94);
    }
    v53 = a2[4];
    if ((_DWORD)v53 == -1)
      goto LABEL_231;
    *(_QWORD *)v106 = v104;
    if (v52 > ((unsigned int (*)(unsigned int *, unsigned int *))off_1E34372E8[v53])(v106, a2))
    {
      LOBYTE(v106[0]) = 0;
      v107 = -1;
      v54 = v109;
      if (v109 != -1)
      {
        ((void (*)(_QWORD *, unsigned int *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_2[v109])(v104, v106, v108);
        v107 = v54;
      }
      if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v108) & 1) == 0)
      {
        while (v109 != -1)
        {
          v104[0] = &v111;
          v55 = ((uint64_t (*)(_QWORD *, _QWORD *))off_1E34372E8[v109])(v104, v108);
          v56 = a2[4];
          if ((_DWORD)v56 == -1)
            break;
          v57 = v55;
          v104[0] = &v111;
          if ((((uint64_t (*)(_QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v56])(v104, a2) & 1) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x196457A50);
          }
          v58 = a2[4];
          if ((_DWORD)v58 == -1)
            break;
          v104[0] = &v111;
          if (v57 <= ((unsigned int (*)(_QWORD *, unsigned int *))off_1E34372E8[v58])(v104, a2))
            goto LABEL_100;
          if (v107 == -1)
          {
            if (v109 == -1)
              goto LABEL_94;
LABEL_93:
            v104[0] = v106;
            ((void (*)(_QWORD *, unsigned int *, _QWORD *))off_1E3437308[v109])(v104, v106, v108);
            goto LABEL_94;
          }
          if (v109 != -1)
            goto LABEL_93;
          ((void (*)(_QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_6[v107])(v104, v106);
          v107 = -1;
          do
          {
LABEL_94:
            if (v109 == -1)
              goto LABEL_231;
            v104[0] = &v111;
            (*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator15LeafBoxIterator22traversePreviousOnLineEvE3__0JEEEEEJRNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix
             + v109))((int)v104, (WebCore::InlineIterator::BoxModernPath *)v108);
            if (v109 == -1)
              goto LABEL_231;
            v104[0] = &v111;
            if ((((uint64_t (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator11BoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v109])(v104, v108) & 1) != 0)break;
            if (v109 == -1)
              goto LABEL_231;
            v104[0] = &v111;
          }
          while ((((uint64_t (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box11isLineBreakEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v109])(v104, v108) & 1) != 0);
          if (WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v108))
            goto LABEL_100;
        }
        goto LABEL_231;
      }
LABEL_100:
      v59 = WebCore::InlineIterator::Box::rightmostCaretOffset((WebCore::InlineIterator::Box *)v106);
      if (a4 == 2)
      {
        v60 = WTF::switchOn<std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const&,WebCore::InlineIterator::Box::minimumCaretOffset(void)::{lambda(std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const& &)#1}>(v106) >= v59;
        v37 = a1;
      }
      else
      {
        v37 = a1;
        v60 = a4 != 1;
      }
      if (v107 != -1)
        goto LABEL_191;
      goto LABEL_231;
    }
  }
  if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v108) & 1) != 0)
    goto LABEL_160;
  if (v109 == -1)
    goto LABEL_231;
  *(_QWORD *)v106 = v104;
  v86 = ((uint64_t (*)(unsigned int *, _QWORD *))off_1E34372E8[v109])(v106, v108);
  v87 = a2[4];
  if ((_DWORD)v87 == -1)
    goto LABEL_231;
  v88 = v86;
  *(_QWORD *)v106 = v104;
  if ((((uint64_t (*)(unsigned int *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v87])(v106, a2) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196457BD4);
  }
  v89 = a2[4];
  if ((_DWORD)v89 == -1)
    goto LABEL_231;
  *(_QWORD *)v106 = v104;
  if (v88 < ((unsigned int (*)(unsigned int *, unsigned int *))off_1E34372E8[v89])(v106, a2))
  {
LABEL_160:
    LOBYTE(v106[0]) = 0;
    v107 = -1;
    v90 = a2[4];
    if ((_DWORD)v90 == -1)
      goto LABEL_231;
    ((void (*)(_QWORD *, unsigned int *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_2[v90])(v104, v106, a2);
    v107 = v90;
    v91 = a2[4];
    if ((_DWORD)v91 == -1)
      goto LABEL_231;
    v111 = &v110;
    if ((((uint64_t (*)(char **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v91])(&v111, a2) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196457B14);
    }
    WebCore::InlineIterator::Box::nextOnLineIgnoringLineBreak((WebCore::InlineIterator::Box *)a2, (uint64_t)v104);
    if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v104) & 1) == 0)
    {
      while (v105 != -1)
      {
        v111 = &v110;
        v92 = ((uint64_t (*)(char **, _QWORD *))off_1E34372E8[v105])(&v111, v104);
        v93 = a2[4];
        if ((_DWORD)v93 == -1)
          break;
        v94 = v92;
        v111 = &v110;
        if ((((uint64_t (*)(char **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v93])(&v111, a2) & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1964578F0);
        }
        v95 = a2[4];
        if ((_DWORD)v95 == -1)
          break;
        v111 = &v110;
        if (v94 < ((unsigned int (*)(char **, unsigned int *))off_1E34372E8[v95])(&v111, a2))
          goto LABEL_180;
        if (v107 == -1)
        {
          if (v105 == -1)
            goto LABEL_174;
LABEL_173:
          v111 = (char *)v106;
          ((void (*)(char **, unsigned int *, _QWORD *))off_1E3437308[v105])(&v111, v106, v104);
          goto LABEL_174;
        }
        if (v105 != -1)
          goto LABEL_173;
        ((void (*)(char **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_6[v107])(&v111, v106);
        v107 = -1;
        do
        {
LABEL_174:
          if (v105 == -1)
            goto LABEL_231;
          v111 = &v110;
          ((void (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator15LeafBoxIterator18traverseNextOnLineEvE3__0JEEEEEJRNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v105])(&v111, v104);
          if (v105 == -1)
            goto LABEL_231;
          v111 = &v110;
          if ((((uint64_t (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator11BoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v105])(&v111, v104) & 1) != 0)break;
          if (v105 == -1)
            goto LABEL_231;
          v111 = &v110;
        }
        while ((((uint64_t (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box11isLineBreakEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v105])(&v111, v104) & 1) != 0);
        if (WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v104))
          goto LABEL_180;
      }
      goto LABEL_231;
    }
LABEL_180:
    if (v105 != -1)
      ((void (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_6[v105])(&v111, v104);
    v96 = a2[4];
    v37 = a1;
    if ((_DWORD)v96 == -1)
      goto LABEL_231;
    v104[0] = &v111;
    if ((((uint64_t (*)(_QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v96])(v104, a2) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196457B54);
    }
    v97 = a2[4];
    if ((_DWORD)v97 == -1)
      goto LABEL_231;
    v104[0] = &v111;
    if ((((uint64_t (*)(_QWORD *, unsigned int *))off_1E34372E8[v97])(v104, a2) & 1) == 0)
      goto LABEL_152;
LABEL_186:
    v85 = WTF::switchOn<std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const&,WebCore::InlineIterator::Box::minimumCaretOffset(void)::{lambda(std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const& &)#1}>(v106);
LABEL_187:
    v59 = v85;
    if (a4 == 2)
      v60 = WTF::switchOn<std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const&,WebCore::InlineIterator::Box::minimumCaretOffset(void)::{lambda(std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const& &)#1}>(v106) >= v85;
    else
      v60 = a4 != 1;
    if (v107 != -1)
    {
LABEL_191:
      v104[0] = &v111;
      v98 = (unsigned int *)((uint64_t (*)(_QWORD *, unsigned int *))off_1E3437298[v107])(v104, v106);
      result = WebCore::RenderObject::createVisiblePosition(v98, v59, v60, v37);
      if (v107 != -1)
        result = (unsigned int *)((uint64_t (*)(_QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_6[v107])(v104, v106);
      goto LABEL_193;
    }
    goto LABEL_231;
  }
  v102 = a2[4];
  if ((_DWORD)v102 == -1)
    goto LABEL_231;
  *(_QWORD *)v106 = v104;
  if ((((uint64_t (*)(unsigned int *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v102])(v106, a2) & 1) == 0)
  {
    __break(0xC471u);
LABEL_244:
    JUMPOUT(0x196457890);
  }
  v101 = WebCore::InlineIterator::Box::rightmostCaretOffset((WebCore::InlineIterator::Box *)a2);
LABEL_206:
  v66 = v101;
  if (a4 == 2)
    v67 = WTF::switchOn<std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const&,WebCore::InlineIterator::Box::minimumCaretOffset(void)::{lambda(std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const& &)#1}>(a2) >= v101;
  else
    v67 = a4 != 1;
  v68 = a2[4];
  if ((_DWORD)v68 == -1)
    goto LABEL_231;
LABEL_116:
  *(_QWORD *)v106 = v104;
  v69 = (unsigned int *)((uint64_t (*)(unsigned int *, unsigned int *))off_1E3437298[v68])(v106, a2);
  result = WebCore::RenderObject::createVisiblePosition(v69, v66, v67, a1);
LABEL_193:
  if (v109 != -1)
    return (unsigned int *)((uint64_t (*)(unsigned int *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_6[v109])(v106, v108);
  return result;
}

float WebCore::RenderText::hangablePunctuationStartWidth(WebCore::RenderText *this, uint64_t a2)
{
  uint64_t v2;
  float v3;
  uint64_t v4;
  uint64_t v6;
  UChar32 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  int v17;
  BOOL v18;
  BOOL v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  _BYTE v25[8];
  WTF::StringImpl *v26;
  int v27;
  char v28;
  int v29;
  char v30;

  v2 = *((_QWORD *)this + 13);
  v3 = 0.0;
  if (v2)
  {
    v4 = a2;
    if (*(_DWORD *)(v2 + 4) > a2)
    {
      v6 = *(_QWORD *)(v2 + 8);
      v7 = (*(_BYTE *)(v2 + 16) & 4) != 0
         ? *(unsigned __int8 *)(v6 + a2)
         : *(unsigned __int16 *)(v6 + 2 * a2);
      if (((1 << u_charType(v7)) & 0x30100000) != 0)
      {
        v8 = *((_QWORD *)this + 4);
        if (v8)
          v9 = *(_QWORD *)(v8 + 8);
        else
          v9 = 0;
        v10 = *(_QWORD *)(v9 + 112);
        if ((*(_BYTE *)(*(_QWORD *)(v9 + 104) + 231) & 1) != 0
          && *((_BYTE *)this + 46) == 3
          && (*((_BYTE *)this + 140) & 1) != 0)
        {
          return *(float *)(v10 + 204);
        }
        v11 = *((_QWORD *)this + 13);
        if (v11)
          v12 = *(unsigned int *)(v11 + 4) | ((unint64_t)((*(_DWORD *)(v11 + 16) >> 2) & 1) << 32);
        else
          v12 = 0x100000000;
        v13 = v12 - v4;
        if (v12 <= v4)
        {
          v14 = 0x100000000;
        }
        else
        {
          if (v13 <= 1)
          {
            if (!(_DWORD)v4)
            {
              v14 = v12;
              goto LABEL_23;
            }
          }
          else
          {
            v13 = 1;
          }
          v14 = v13;
          v15 = v12 - (unint64_t)v4;
          if ((v12 & 0x100000000) != 0)
          {
            if (v15 >= v14)
            {
              v14 |= 0x100000000uLL;
              goto LABEL_23;
            }
LABEL_55:
            __break(1u);
            goto LABEL_56;
          }
          if (v15 < v14)
            goto LABEL_55;
        }
LABEL_23:
        v4 = v10 + 32;
        WebCore::RenderBlock::constructTextRun(v14, v9 + 80, 4, 0, (uint64_t)v25);
        LODWORD(v10) = (*((unsigned __int16 *)this + 59) >> 5) & 8 | v30 & 0xF6;
        v16 = *(_DWORD *)(v9 + 120);
        v17 = (v16 >> 27) & 7;
        if ((v16 & 0x40000000) == 0 && v17 == 3)
        {
          v17 = 5;
          goto LABEL_30;
        }
        if (v17)
          v18 = 0;
        else
          v18 = (v16 & 0x40000000) == 0;
        if (v18)
        {
          v17 = 0;
          goto LABEL_30;
        }
        if ((v16 & 0x40000000) != 0 && !v17)
        {
          v17 = 4;
          goto LABEL_30;
        }
        if ((v16 & 0x40000000) != 0 && v17 == 1)
        {
LABEL_30:
          v20 = v17 == 5 || (v17 - 1) < 2;
          v21 = *(_QWORD *)(v9 + 104);
          v30 = (v10 | v20) ^ 8;
          v27 = *(_DWORD *)(v21 + 336);
          v28 = *(_BYTE *)(v21 + 340);
          v29 = 0;
          v3 = WebCore::FontCascade::width(v4, (uint64_t)v25);
          v23 = v26;
          v26 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
              WTF::StringImpl::destroy(v23, v22);
            else
              *(_DWORD *)v23 -= 2;
          }
          return v3;
        }
        if ((v16 & 0x40000000) != 0 || v17 != 2)
        {
          if (v17 == 1 && (v16 & 0x40000000) == 0)
            v17 = 2;
          else
            v17 = 0;
          goto LABEL_30;
        }
LABEL_56:
        v17 = 3;
        goto LABEL_30;
      }
    }
  }
  return v3;
}

float WebCore::RenderText::hangablePunctuationEndWidth(WebCore::RenderText *this, uint64_t a2)
{
  uint64_t v2;
  float v3;
  uint64_t v4;
  uint64_t v6;
  UChar32 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  int v17;
  BOOL v18;
  BOOL v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  _BYTE v25[8];
  WTF::StringImpl *v26;
  int v27;
  char v28;
  int v29;
  char v30;

  v2 = *((_QWORD *)this + 13);
  v3 = 0.0;
  if (v2)
  {
    v4 = a2;
    if (*(_DWORD *)(v2 + 4) > a2)
    {
      v6 = *(_QWORD *)(v2 + 8);
      v7 = (*(_BYTE *)(v2 + 16) & 4) != 0
         ? *(unsigned __int8 *)(v6 + a2)
         : *(unsigned __int16 *)(v6 + 2 * a2);
      if (((1 << u_charType(v7)) & 0x30200000) != 0)
      {
        v8 = *((_QWORD *)this + 4);
        if (v8)
          v9 = *(_QWORD *)(v8 + 8);
        else
          v9 = 0;
        v10 = *(_QWORD *)(v9 + 112);
        if ((*(_BYTE *)(*(_QWORD *)(v9 + 104) + 231) & 1) != 0
          && *((_BYTE *)this + 46) == 3
          && (*((_BYTE *)this + 140) & 1) != 0)
        {
          return *(float *)(v10 + 204);
        }
        v11 = *((_QWORD *)this + 13);
        if (v11)
          v12 = *(unsigned int *)(v11 + 4) | ((unint64_t)((*(_DWORD *)(v11 + 16) >> 2) & 1) << 32);
        else
          v12 = 0x100000000;
        v13 = v12 - v4;
        if (v12 <= v4)
        {
          v14 = 0x100000000;
        }
        else
        {
          if (v13 <= 1)
          {
            if (!(_DWORD)v4)
            {
              v14 = v12;
              goto LABEL_23;
            }
          }
          else
          {
            v13 = 1;
          }
          v14 = v13;
          v15 = v12 - (unint64_t)v4;
          if ((v12 & 0x100000000) != 0)
          {
            if (v15 >= v14)
            {
              v14 |= 0x100000000uLL;
              goto LABEL_23;
            }
LABEL_55:
            __break(1u);
            goto LABEL_56;
          }
          if (v15 < v14)
            goto LABEL_55;
        }
LABEL_23:
        v4 = v10 + 32;
        WebCore::RenderBlock::constructTextRun(v14, v9 + 80, 4, 0, (uint64_t)v25);
        LODWORD(v10) = (*((unsigned __int16 *)this + 59) >> 5) & 8 | v30 & 0xF6;
        v16 = *(_DWORD *)(v9 + 120);
        v17 = (v16 >> 27) & 7;
        if ((v16 & 0x40000000) == 0 && v17 == 3)
        {
          v17 = 5;
          goto LABEL_30;
        }
        if (v17)
          v18 = 0;
        else
          v18 = (v16 & 0x40000000) == 0;
        if (v18)
        {
          v17 = 0;
          goto LABEL_30;
        }
        if ((v16 & 0x40000000) != 0 && !v17)
        {
          v17 = 4;
          goto LABEL_30;
        }
        if ((v16 & 0x40000000) != 0 && v17 == 1)
        {
LABEL_30:
          v20 = v17 == 5 || (v17 - 1) < 2;
          v21 = *(_QWORD *)(v9 + 104);
          v30 = (v10 | v20) ^ 8;
          v27 = *(_DWORD *)(v21 + 336);
          v28 = *(_BYTE *)(v21 + 340);
          v29 = 0;
          v3 = WebCore::FontCascade::width(v4, (uint64_t)v25);
          v23 = v26;
          v26 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
              WTF::StringImpl::destroy(v23, v22);
            else
              *(_DWORD *)v23 -= 2;
          }
          return v3;
        }
        if ((v16 & 0x40000000) != 0 || v17 != 2)
        {
          if (v17 == 1 && (v16 & 0x40000000) == 0)
            v17 = 2;
          else
            v17 = 0;
          goto LABEL_30;
        }
LABEL_56:
        v17 = 3;
        goto LABEL_30;
      }
    }
  }
  return v3;
}

uint64_t WebCore::RenderText::isHangableStopOrComma(int a1)
{
  uint64_t result;
  int v3;

  result = 1;
  if (a1 <= 65103)
  {
    if (a1 > 1747)
    {
      if ((a1 - 12289) >= 2 && a1 != 1748)
        return 0;
    }
    else if (a1 != 44 && a1 != 46 && a1 != 1548)
    {
      return 0;
    }
  }
  else if (a1 <= 65291)
  {
    if ((a1 - 65104) >= 3)
      return 0;
  }
  else
  {
    if (a1 > 65376)
    {
      if (a1 == 65377)
        return result;
      v3 = 65380;
    }
    else
    {
      if (a1 == 65292)
        return result;
      v3 = 65294;
    }
    if (a1 != v3)
      return 0;
  }
  return result;
}

uint64_t WebCore::RenderText::firstCharacterIndexStrippingSpaces(WebCore::RenderText *this)
{
  unsigned int v1;
  int v2;
  uint64_t v3;
  uint64_t result;
  unsigned int v5;
  int v6;
  _BOOL4 v7;
  _BOOL4 v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  int v14;

  v1 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 8) + 120);
  v2 = (v1 >> 27) & 7;
  if ((v1 & 0x40000000) == 0 && v2 == 3)
    return 0;
  if (v2 == 1)
    return 0;
  v3 = *((_QWORD *)this + 13);
  if (!v3)
    return 0;
  result = *(unsigned int *)(v3 + 4);
  if ((_DWORD)result)
  {
    v5 = v1 & 0x40000000;
    if (v5)
      v6 = 1;
    else
      v6 = 2;
    v7 = v2 != v6;
    v8 = v2 != 1;
    v13 = v2 == 0;
    v9 = *(_QWORD *)(v3 + 8);
    v10 = v7 & (v8 | (v5 >> 30));
    if (v13)
      v10 = 1;
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v11 = 0;
      while (1)
      {
        v12 = *(unsigned __int8 *)(v9 + v11);
        if (v12 != 9 && v12 != 32)
        {
          v13 = v12 != 10 || v10 == 0;
          if (v13)
            break;
        }
        if (result == ++v11)
          return result;
      }
    }
    else
    {
      v11 = 0;
      while (1)
      {
        v14 = *(unsigned __int16 *)(v9 + 2 * v11);
        if (v14 != 9 && v14 != 32 && (v14 != 10 || v10 == 0))
          break;
        if (result == ++v11)
          return result;
      }
    }
    return v11;
  }
  return result;
}

uint64_t WebCore::RenderText::lastCharacterIndexStrippingSpaces(WebCore::RenderText *this)
{
  uint64_t v1;
  int v2;
  unsigned int v3;
  int v4;
  uint64_t result;
  unsigned int v6;
  int v7;
  _BOOL4 v8;
  _BOOL4 v9;
  BOOL v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  char v15;
  int v16;

  v1 = *((_QWORD *)this + 13);
  if (!v1)
    return 0;
  v2 = *(_DWORD *)(v1 + 4);
  if (!v2)
    return 0;
  v3 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 8) + 120);
  v4 = (v3 >> 27) & 7;
  if ((v3 & 0x40000000) == 0 && v4 == 3 || v4 == 1)
    return (v2 - 1);
  result = (v2 - 1);
  if (v2 - 1 >= 0)
  {
    v6 = v3 & 0x40000000;
    if ((v3 & 0x40000000) != 0)
      v7 = 1;
    else
      v7 = 2;
    v8 = v4 != v7;
    v9 = v4 != 1;
    v10 = v4 == 0;
    v11 = *(_DWORD *)(v1 + 16);
    v12 = *(_QWORD *)(v1 + 8);
    v13 = v8 & (v9 | (v6 >> 30));
    if (v10)
      LOBYTE(v13) = 1;
    while (1)
    {
      v14 = (v11 & 4) != 0 ? *(unsigned __int8 *)(v12 + result) : *(unsigned __int16 *)(v12 + 2 * result);
      if (v14 != 32)
      {
        v15 = v14 == 10 ? v13 : 0;
        if ((v15 & 1) == 0)
        {
          v16 = (v11 & 4) != 0 ? *(unsigned __int8 *)(v12 + result) : *(unsigned __int16 *)(v12 + 2 * result);
          if (v16 != 9)
            break;
        }
      }
      if (result-- <= 0)
        return 0xFFFFFFFFLL;
    }
  }
  return result;
}

float WebCore::RenderText::maxWordFragmentWidth(uint64_t a1, uint64_t a2, float *a3, uint64_t a4, uint64_t a5, unsigned int a6, unsigned int a7, int a8, float a9, float a10, int a11, float *a12, uint64_t a13, uint64_t a14)
{
  unsigned int v19;
  unsigned int HyphenLocation;
  void *v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  WTF *v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  int v35;
  uint64_t *v36;
  unint64_t v37;
  float v38;
  WTF::StringImpl *v39;
  unsigned int v40;
  uint64_t v41;
  float v42;
  float v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  unsigned int *v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  float v54;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  unsigned int v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  WTF *v63;
  WTF *v64;
  unsigned int *v65;
  void *v66;
  float v67;
  WTF *v68;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  int v75;
  char v76;
  WTF *v77;
  uint64_t v78;
  _BYTE v79[32];
  uint64_t v80;
  WTF::StringImpl *v81;
  WTF::StringImpl **v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;

  if (a5 > a7)
  {
    v77 = (WTF *)v79;
    v78 = 8;
    if (a6 <= 1)
      v19 = 1;
    else
      v19 = a6;
    HyphenLocation = WebCore::lastHyphenLocation(a4, a5, a5 - a7, (WTF::StringImpl *)(*(_QWORD *)(a2 + 32) + 176));
    if (v19 <= HyphenLocation)
    {
      v59 = HyphenLocation;
      do
      {
        if (HIDWORD(v78) == (_DWORD)v78)
        {
          v60 = HIDWORD(v78) + ((unint64_t)HIDWORD(v78) >> 2);
          if (v60 >= 0x10)
            v61 = v60 + 1;
          else
            v61 = 16;
          if (v61 <= (unint64_t)HIDWORD(v78) + 1)
            v62 = HIDWORD(v78) + 1;
          else
            v62 = v61;
          v63 = v77;
          if (v62 < 9)
          {
            v77 = (WTF *)v79;
            LODWORD(v78) = 8;
            v64 = (WTF *)v79;
          }
          else
          {
            if (v62 >> 30)
              goto LABEL_112;
            v64 = (WTF *)WTF::fastMalloc((WTF *)(4 * v62));
            LODWORD(v78) = v62;
            v77 = v64;
          }
          memcpy(v64, v63, 4 * HIDWORD(v78));
          if (v79 != (_BYTE *)v63 && v63)
          {
            if (v77 == v63)
            {
              v77 = 0;
              LODWORD(v78) = 0;
            }
            WTF::fastFree(v63, v66);
          }
          v65 = (unsigned int *)((char *)v77 + 4 * HIDWORD(v78));
        }
        else
        {
          v65 = (unsigned int *)((char *)v77 + 4 * HIDWORD(v78));
        }
        *v65 = v59;
        ++HIDWORD(v78);
        v59 = WebCore::lastHyphenLocation(a4, a5, v59, (WTF::StringImpl *)(*(_QWORD *)(a2 + 32) + 176));
      }
      while (v19 <= v59);
    }
    v22 = HIDWORD(v78);
    if (!HIDWORD(v78))
      goto LABEL_102;
    if (HIDWORD(v78) != 1)
    {
      v23 = 0;
      v24 = 0;
      v25 = v77;
      while (v24 < v22)
      {
        v26 = v22;
        v27 = v23 + v22 - 1;
        if (v27 >= v26)
        {
          __break(0xC471u);
LABEL_111:
          __break(1u);
LABEL_112:
          __break(0xC471u);
LABEL_113:
          JUMPOUT(0x196458A28);
        }
        v28 = *((_DWORD *)v25 + v24);
        *((_DWORD *)v25 + v24) = *((_DWORD *)v25 + v27);
        *((_DWORD *)v25 + v27) = v28;
        ++v24;
        v22 = HIDWORD(v78);
        --v23;
        if (v24 >= (unint64_t)HIDWORD(v78) >> 1)
          goto LABEL_12;
      }
      __break(0xC471u);
      goto LABEL_113;
    }
LABEL_12:
    v29 = *(_QWORD *)(a1 + 32);
    if (v29)
      v30 = *(_QWORD *)(v29 + 8);
    else
      v30 = 0;
    v31 = a3[43];
    v32 = *(_QWORD *)(*(_QWORD *)(v30 + 104) + 288);
    v33 = &unk_1EE2F9000;
    if (v32)
      goto LABEL_22;
    {
      WTF::AtomStringImpl::add();
      WebCore::RenderStyle::hyphenString(void)const::hyphenMinusString = v80;
    }
    {
      WTF::AtomStringImpl::add();
      WebCore::RenderStyle::hyphenString(void)const::hyphenString = v80;
    }
    v34 = WebCore::FontCascade::primaryFont((WebCore::FontCascade *)(*(_QWORD *)(v30 + 112) + 32), v21);
    v35 = WebCore::Font::glyphForCharacter(v34, (void *)0x2010);
    v36 = &WebCore::RenderStyle::hyphenString(void)const::hyphenMinusString;
    if (v35)
      v36 = &WebCore::RenderStyle::hyphenString(void)const::hyphenString;
    v32 = *v36;
    if (v32)
LABEL_22:
      v37 = *(unsigned int *)(v32 + 4) | ((unint64_t)((*(_DWORD *)(v32 + 16) >> 2) & 1) << 32);
    else
      v37 = 0x100000000;
    WebCore::RenderBlock::constructTextRun(v37, v30 + 80, 4, 0, (uint64_t)&v80);
    v38 = WebCore::FontCascade::width((uint64_t)a3, (uint64_t)&v80);
    v39 = v81;
    v81 = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 2)
        WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v21);
      else
        *(_DWORD *)v39 -= 2;
    }
    if (HIDWORD(v78))
    {
      v40 = 0;
      v41 = 0;
      v42 = (float)((float)(v31 * 5.0) * 0.25) + v38;
      v43 = 0.0;
      while (1)
      {
        v44 = *((_DWORD *)v77 + v41);
        v73 = 0;
        v74 = 0;
        v75 = 0;
        v76 = 1;
        if (a5 <= v40)
          goto LABEL_37;
        LODWORD(v45) = v44 - v40;
        if (a5 - v40 <= v44 - v40)
        {
          v45 = a5;
          if (!v40)
            goto LABEL_36;
          LODWORD(v45) = a5 - v40;
        }
        v45 = v45;
        v46 = a5 - (unint64_t)v40;
        if ((a5 & 0xFF00000000) != 0)
        {
          if (v46 < v45)
            goto LABEL_111;
          v45 = v45 | 0x100000000;
        }
        else if (v46 < v45)
        {
          goto LABEL_111;
        }
LABEL_36:
        if ((v45 & 0xFF00000000) == 0)
        {
          WTF::StringBuilder::append();
          goto LABEL_38;
        }
LABEL_37:
        WTF::StringBuilder::append();
LABEL_38:
        v48 = *(_QWORD *)(a2 + 24);
        if (*(_QWORD *)(v48 + 288))
        {
          v50 = (uint64_t *)(v48 + 288);
        }
        else
        {
          if ((v33[1424] & 1) == 0)
          {
            WTF::AtomStringImpl::add();
            WebCore::RenderStyle::hyphenString(void)const::hyphenMinusString = v80;
            v33[1424] = 1;
          }
          {
            WTF::AtomStringImpl::add();
            WebCore::RenderStyle::hyphenString(void)const::hyphenString = v80;
          }
          v49 = WebCore::FontCascade::primaryFont((WebCore::FontCascade *)(*(_QWORD *)(a2 + 32) + 32), v47);
          if (WebCore::Font::glyphForCharacter(v49, (void *)0x2010))
            v50 = &WebCore::RenderStyle::hyphenString(void)const::hyphenString;
          else
            v50 = &WebCore::RenderStyle::hyphenString(void)const::hyphenMinusString;
        }
        WTF::StringBuilder::append(&v73, (WTF::StringImpl **)v50);
        v51 = (unsigned int *)v73;
        if (v73
          || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v73),
              WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v73),
              (v51 = (unsigned int *)v73) != 0))
        {
          v52 = v51[1];
          *v51 += 2;
          WebCore::RenderBlock::constructTextRun(v52 | ((unint64_t)((v51[4] >> 2) & 1) << 32), a2, 4, 0, (uint64_t)&v80);
          if (*v51 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v51, v53);
          else
            *v51 -= 2;
        }
        else
        {
          WebCore::RenderBlock::constructTextRun(0x100000000uLL, a2, 4, 0, (uint64_t)&v80);
        }
        BYTE5(v84) = ((*(unsigned __int16 *)(a1 + 118) >> 5) & 8 | BYTE5(v84) & 0xF7) ^ 8;
        v54 = WebCore::FontCascade::width((uint64_t)a3, (uint64_t)&v80);
        if (v43 < v54 && v54 > v42)
          v43 = v54;
        if (v54 > v42)
          v40 = v44;
        v56 = v81;
        v81 = 0;
        v33 = (_BYTE *)&unk_1EE2F9000;
        if (v56)
        {
          if (*(_DWORD *)v56 == 2)
            WTF::StringImpl::destroy(v56, (WTF::StringImpl *)v21);
          else
            *(_DWORD *)v56 -= 2;
        }
        v57 = v74;
        v74 = 0;
        if (v57)
        {
          if (*(_DWORD *)v57 == 2)
            WTF::StringImpl::destroy(v57, (WTF::StringImpl *)v21);
          else
            *(_DWORD *)v57 -= 2;
        }
        v58 = v73;
        v73 = 0;
        if (v58)
        {
          if (*(_DWORD *)v58 == 2)
            WTF::StringImpl::destroy(v58, (WTF::StringImpl *)v21);
          else
            *(_DWORD *)v58 -= 2;
        }
        if (++v41 >= (unint64_t)HIDWORD(v78))
        {
          if (v40)
          {
            *(float *)&v73 = a9;
            v80 = a1;
            v81 = (WTF::StringImpl *)a3;
            v82 = &v73;
            v83 = a13;
            v84 = a14;
            v85 = a2;
            v67 = WebCore::RenderText::measureTextConsideringPossibleTrailingSpace<WebCore::RenderText::widthFromCacheConsideringPossibleTrailingSpace(WebCore::RenderStyle const&,WebCore::FontCascade const&,unsigned int,unsigned int,float,BOOL,WebCore::WordTrailingSpace &,WTF::WeakHashSet<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> &,WebCore::GlyphOverflow &)::{lambda(unsigned int,unsigned int)#1}>(a8, v40 + a11, a5 - v40, a12, a13, (uint64_t)&v80);
            if (v43 >= v67)
              a10 = v43;
            else
              a10 = v67;
          }
          break;
        }
      }
    }
LABEL_102:
    v68 = v77;
    if (v79 != (_BYTE *)v77 && v77)
    {
      v77 = 0;
      LODWORD(v78) = 0;
      WTF::fastFree(v68, v21);
    }
  }
  return a10;
}

float WebCore::hyphenWidth(WebCore *this, WebCore::RenderText *a2, const WebCore::FontCascade *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  float v12;
  WTF::StringImpl *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;

  if (this)
    v4 = *((_QWORD *)this + 1);
  else
    v4 = 0;
  v5 = v4 + 80;
  v6 = *(_QWORD *)(*(_QWORD *)(v4 + 104) + 288);
  if (v6)
    goto LABEL_11;
  {
    v15 = v4;
    WTF::AtomStringImpl::add();
    v4 = v15;
    WebCore::RenderStyle::hyphenString(void)const::hyphenMinusString = v17;
  }
  {
    v16 = v4;
    WTF::AtomStringImpl::add();
    v4 = v16;
    WebCore::RenderStyle::hyphenString(void)const::hyphenString = v17;
  }
  v7 = WebCore::FontCascade::primaryFont((WebCore::FontCascade *)(*(_QWORD *)(v4 + 112) + 32), a2);
  v8 = WebCore::Font::glyphForCharacter(v7, (void *)0x2010);
  v9 = &WebCore::RenderStyle::hyphenString(void)const::hyphenMinusString;
  if (v8)
    v9 = &WebCore::RenderStyle::hyphenString(void)const::hyphenString;
  v6 = *v9;
  if (*v9)
LABEL_11:
    v10 = *(unsigned int *)(v6 + 4) | ((unint64_t)((*(_DWORD *)(v6 + 16) >> 2) & 1) << 32);
  else
    v10 = 0x100000000;
  WebCore::RenderBlock::constructTextRun(v10, v5, 4, 0, (uint64_t)&v17);
  v12 = WebCore::FontCascade::width((uint64_t)a2, (uint64_t)&v17);
  v13 = v18;
  v18 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  return v12;
}

BOOL WebCore::RenderStyle::isCollapsibleWhiteSpace(WebCore::RenderStyle *a1, int a2)
{
  int v3;

  if (a2 == 32)
    goto LABEL_6;
  if (a2 == 10)
    return (WebCore::RenderStyle::whiteSpace(a1) & 0xFB) == 0;
  if (a2 != 9)
    return 0;
LABEL_6:
  v3 = WebCore::RenderStyle::whiteSpace(a1);
  return v3 != 5 && (v3 - 3) < 0xFFFFFFFE;
}

uint64_t WebCore::RenderText::containsOnlyCSSWhitespace(uint64_t this, unsigned int a2, unsigned int a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unsigned __int16 *i;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v11;
  unsigned __int8 *j;
  unsigned int v13;
  uint64_t v14;

  if (this)
  {
    v3 = *(_QWORD *)(this + 8);
    v4 = *(unsigned int *)(this + 4);
    if ((*(_BYTE *)(this + 16) & 4) == 0)
    {
      if (v4 >= a2 && v4 - a2 >= a3)
      {
        if (a3)
        {
          v5 = 2 * a3;
          for (i = (unsigned __int16 *)(v3 + 2 * a2); ; ++i)
          {
            v7 = *i;
            v8 = v7 > 0x20;
            v9 = (1 << v7) & 0x100000600;
            if (v8 || v9 == 0)
              break;
            v5 -= 2;
            if (!v5)
              return 1;
          }
          return 0;
        }
        return 1;
      }
      goto LABEL_25;
    }
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  if (v4 >= a2)
  {
    v11 = a3;
    if (v4 - a2 >= a3)
    {
      if (a3)
      {
        for (j = (unsigned __int8 *)(v3 + a2); ; ++j)
        {
          v13 = *j;
          v8 = v13 > 0x20;
          v14 = (1 << v13) & 0x100000600;
          if (v8 || v14 == 0)
            break;
          if (!--v11)
            return 1;
        }
        return 0;
      }
      return 1;
    }
  }
LABEL_25:
  __break(1u);
  return this;
}

uint64_t WebCore::RenderText::containsOnlyCollapsibleWhitespace(WebCore::RenderText *this)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  int v8;
  int v9;
  uint64_t result;
  uint64_t v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  unsigned int v20;
  int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  int v27;

  v1 = *((_QWORD *)this + 13);
  if (!v1)
  {
    v2 = 0;
    v3 = 0;
LABEL_20:
    v13 = *((_QWORD *)this + 4);
    if (v13)
      v13 = *(_QWORD *)(v13 + 8);
    if (!v3)
      return 1;
    while (1)
    {
      v14 = *v2;
      if (v14 != 32)
      {
        if (v14 == 10)
        {
          v24 = *(_DWORD *)(v13 + 120);
          v25 = (v24 >> 27) & 7;
          if ((v24 & 0x40000000) == 0 && v25 == 3)
            return 0;
          if (v25)
          {
            result = 0;
            v26 = v24 & 0x40000000;
            v27 = v26 ? 1 : 2;
            if (v25 == v27 || !((v25 != 1) | (v26 >> 30) & 1))
              return result;
          }
          goto LABEL_34;
        }
        if (v14 != 9)
          return 0;
      }
      v15 = *(_DWORD *)(v13 + 120);
      v16 = (v15 >> 27) & 7;
      v17 = v15 & 0x40000000;
      if (v16 == 3 && v17 == 0 || v16 == 1)
        return 0;
LABEL_34:
      ++v2;
      result = 1;
      if (!--v3)
        return result;
    }
  }
  v2 = *(unsigned __int8 **)(v1 + 8);
  v3 = *(unsigned int *)(v1 + 4);
  if ((*(_BYTE *)(v1 + 16) & 4) != 0)
    goto LABEL_20;
  v4 = *((_QWORD *)this + 4);
  if (v4)
    v4 = *(_QWORD *)(v4 + 8);
  if ((_DWORD)v3)
  {
    v5 = 2 * v3;
    while (1)
    {
      v6 = *(unsigned __int16 *)v2;
      if (v6 == 32)
        goto LABEL_10;
      if (v6 != 10)
        break;
      v20 = *(_DWORD *)(v4 + 120);
      v21 = (v20 >> 27) & 7;
      if ((v20 & 0x40000000) == 0 && v21 == 3)
        return 0;
      if (v21)
      {
        result = 0;
        v22 = v20 & 0x40000000;
        v23 = v22 ? 1 : 2;
        if (v21 == v23 || !((v21 != 1) | (v22 >> 30) & 1))
          return result;
      }
LABEL_17:
      v2 += 2;
      result = 1;
      v5 -= 2;
      if (!v5)
        return result;
    }
    if (v6 != 9)
      return 0;
LABEL_10:
    v7 = *(_DWORD *)(v4 + 120);
    v8 = (v7 >> 27) & 7;
    v9 = v7 & 0x40000000;
    if (v8 == 3 && v9 == 0 || v8 == 1)
      return 0;
    goto LABEL_17;
  }
  return 1;
}

uint64_t WebCore::RenderText::contentRangesBetweenOffsetsForType@<X0>(uint64_t result@<X0>, int a2@<W1>, unsigned int a3@<W2>, unsigned int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  _DWORD *v7;
  void *v10;
  uint64_t v11;
  WTF *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  WTF *v22;
  WTF *v23;
  unsigned int v24;
  unsigned int v25;
  WTF *v26;
  unint64_t v27;
  WTF *v28;
  int v29;
  unsigned int v30;

  if ((*(_BYTE *)(result + 45) & 1) == 0)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(result + 24) + 8);
    if (v6)
    {
      if ((*(_WORD *)(v6 + 28) & 2) == 0)
      {
        __break(0xC471u);
        goto LABEL_43;
      }
      v7 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(v6 + 40) + 8) + 1496);
      if (v7)
      {
        ++*v7;
        result = WebCore::DocumentMarkerController::markersFor((uint64_t)v7, v6, a2, (uint64_t)&v28);
        v11 = v30;
        *(_QWORD *)a5 = 0;
        *(_QWORD *)(a5 + 8) = 0;
        v12 = v28;
        if ((_DWORD)v11)
        {
          v13 = 0;
          LODWORD(v14) = 0;
          v15 = 8 * v11;
          do
          {
            v16 = *(_QWORD *)(*(_QWORD *)v12 + 8);
            v17 = *(_DWORD *)(v16 + 16);
            if (*(_DWORD *)(v16 + 12) <= a3)
              v18 = a3;
            else
              v18 = *(_DWORD *)(v16 + 12);
            if (v17 >= a4)
              v19 = a4;
            else
              v19 = v17;
            if (v19 >= a3 && v18 <= a4 && v18 < v19)
            {
              v27 = __PAIR64__(v19, v18);
              if ((_DWORD)v14 == *(_DWORD *)(a5 + 8))
              {
                result = (uint64_t)WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a5, v14 + 1, (unint64_t)&v27);
                v14 = *(unsigned int *)(a5 + 12);
                v13 = *(char **)a5;
                *(_QWORD *)(*(_QWORD *)a5 + 8 * v14) = *(_QWORD *)result;
              }
              else
              {
                *(_QWORD *)&v13[8 * v14] = v27;
              }
              LODWORD(v14) = v14 + 1;
              *(_DWORD *)(a5 + 12) = v14;
            }
            v12 = (WTF *)((char *)v12 + 8);
            v15 -= 8;
          }
          while (v15);
          v22 = v28;
          if (v30)
          {
            v23 = (WTF *)((char *)v28 + 8 * v30);
            do
            {
              result = *(_QWORD *)v22;
              *(_QWORD *)v22 = 0;
              if (result)
              {
                do
                {
                  v24 = __ldaxr((unsigned int *)result);
                  v25 = v24 - 1;
                }
                while (__stlxr(v25, (unsigned int *)result));
                if (!v25)
                {
                  atomic_store(1u, (unsigned int *)result);
                  result = WTF::fastFree((WTF *)result, v10);
                }
              }
              v22 = (WTF *)((char *)v22 + 8);
            }
            while (v22 != v23);
            v22 = v28;
          }
          if (!v22)
            goto LABEL_36;
          v28 = 0;
          v29 = 0;
          v26 = v22;
        }
        else
        {
          if (!v28)
            goto LABEL_36;
          v28 = 0;
          v29 = 0;
          v26 = v12;
        }
        result = WTF::fastFree(v26, v10);
LABEL_36:
        if (*v7)
        {
          --*v7;
          return result;
        }
        __break(0xC471u);
LABEL_43:
        JUMPOUT(0x196459034);
      }
    }
  }
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  return result;
}

unint64_t WebCore::RenderText::firstRunLocation(WebCore::RenderText *this, WebCore::RenderObject *a2)
{
  WebCore::RenderText *v2;
  WebCore::LayoutIntegration::LineLayout *v3;
  unint64_t v4;
  float v5;
  float v6;
  int v7;
  _QWORD v9[2];
  int v10;
  char v11;
  char *v12;

  v2 = this;
  v3 = (WebCore::LayoutIntegration::LineLayout *)WebCore::LayoutIntegration::LineLayout::containing(this, a2);
  if (v3)
  {
    WebCore::LayoutIntegration::LineLayout::textBoxesFor(v3, v2, (uint64_t)v9);
  }
  else
  {
    v9[0] = *((_QWORD *)v2 + 8);
    v10 = 1;
  }
  if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v9) & 1) != 0)
  {
    LODWORD(v2) = 0;
    v4 = 0;
    goto LABEL_17;
  }
  if (v10 == -1)
    goto LABEL_22;
  v12 = &v11;
  if ((((uint64_t (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v10])(&v12, v9) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196459190);
  }
  if (v10 == -1)
  {
LABEL_22:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_23:
    v4 = 0x7FFFFFFF00000000;
    goto LABEL_17;
  }
  v12 = &v11;
  v5 = ((float (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box32visualRectIgnoringBlockDirectionEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_1[v10])(&v12, v9);
  if (v5 > -2147500000.0)
    v7 = (int)v5;
  else
    v7 = 0x80000000;
  if (v5 < 2147500000.0)
    LODWORD(v2) = v7;
  else
    LODWORD(v2) = 0x7FFFFFFF;
  if (v6 >= 2147500000.0)
    goto LABEL_23;
  if (v6 <= -2147500000.0)
    v4 = 0x8000000000000000;
  else
    v4 = (unint64_t)(int)v6 << 32;
LABEL_17:
  if (v10 != -1)
    ((void (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_6[v10])(&v12, v9);
  return v4 | v2;
}

WebCore::RenderObject *WebCore::RenderText::setSelectionState(WebCore::RenderObject *a1, uint64_t a2)
{
  WebCore::RenderObject *result;

  *((_DWORD *)a1 + 5) = *((_DWORD *)a1 + 5) & 0xF1FFFFFF | ((a2 & 7) << 25);
  result = WebCore::RenderObject::containingBlock(a1);
  if (result)
  {
    if (*((_BYTE *)result + 46) != 49)
      return (WebCore::RenderObject *)(*(uint64_t (**)(WebCore::RenderObject *, uint64_t))(*(_QWORD *)result
                                                                                                  + 496))(result, a2);
  }
  return result;
}

uint64_t WebCore::RenderText::previousCharacter(WebCore::RenderText *this)
{
  uint64_t v2;
  WebCore::RenderText *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v8;
  uint64_t v9;
  uint64_t v10;

  while (1)
  {
    v2 = *((unsigned int *)this + 10);
    if (v2 | ((unint64_t)*((unsigned __int8 *)this + 44) << 32)
      && (v3 = *(WebCore::RenderText **)((v2 | ((unint64_t)*((unsigned __int8 *)this + 44) << 32)) + 8)) != 0)
    {
      do
      {
        this = v3;
        v3 = (WebCore::RenderText *)(*(uint64_t (**)(WebCore::RenderText *))(*(_QWORD *)v3 + 120))(v3);
      }
      while (v3);
    }
    else
    {
      v4 = *((_QWORD *)this + 4);
      if (!v4)
        return 32;
      this = *(WebCore::RenderText **)(v4 + 8);
      if (!this)
        return 32;
    }
    v5 = *((_DWORD *)this + 5);
    if ((v5 & 0x800) == 0 && (v5 & 0x1800000) != 0x1000000 && (*((_BYTE *)this + 45) & 0x20) == 0)
    {
      if ((*((_BYTE *)this + 45) & 2) == 0)
        return 32;
      v6 = *((_QWORD *)this + 13);
      if (v6)
      {
        v8 = *(_DWORD *)(v6 + 4);
        if (v8)
          break;
      }
    }
  }
  v9 = (v8 - 1);
  v10 = *(_QWORD *)(v6 + 8);
  if ((*(_BYTE *)(v6 + 16) & 4) != 0)
    return *(unsigned __int8 *)(v10 + v9);
  else
    return *(unsigned __int16 *)(v10 + 2 * v9);
}

WTF::StringImpl *WebCore::applyTextTransform@<X0>(WTF::StringImpl *result@<X0>, WTF::StringImpl **a2@<X1>, int a3@<W2>, WTF::StringImpl **a4@<X8>)
{
  unsigned int v5;
  WTF::StringImpl *v6;
  char v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  int v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  int v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;

  v5 = *((_DWORD *)result + 10);
  v6 = *a2;
  if (((v5 >> 10) & 0x1F) != 0)
  {
    v7 = v5 >> 10;
    if (v6)
      *(_DWORD *)v6 += 2;
    *a4 = v6;
    if ((v5 & 0x400) != 0)
    {
      WebCore::capitalize(a4, a3, &v17);
      result = *a4;
      *a4 = v17;
      if (!result)
        goto LABEL_10;
    }
    else
    {
      if (((v5 >> 10) & 2) != 0)
      {
        WTF::String::convertToUppercaseWithLocale((WTF::String *)a4, (const WTF::AtomString *)(*((_QWORD *)result + 4) + 176));
      }
      else
      {
        if (((v5 >> 10) & 4) == 0)
          goto LABEL_10;
        WTF::String::convertToLowercaseWithLocale((WTF::String *)a4, (const WTF::AtomString *)(*((_QWORD *)result + 4) + 176));
      }
      v9 = v17;
      v17 = 0;
      result = *a4;
      *a4 = v9;
      if (!result)
      {
LABEL_10:
        if ((v7 & 0x10) != 0)
        {
          WebCore::transformToFullWidth((WebCore *)a4, &v17);
          v13 = v17;
          v17 = 0;
          result = *a4;
          *a4 = v13;
          if (result)
          {
            v14 = *(_DWORD *)result - 2;
            if (*(_DWORD *)result == 2)
            {
              WTF::StringImpl::destroy(result, v12);
              result = v17;
              v17 = 0;
              if (!result)
                goto LABEL_11;
              v14 = *(_DWORD *)result - 2;
              if (*(_DWORD *)result == 2)
              {
                result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v16);
                goto LABEL_11;
              }
            }
            *(_DWORD *)result = v14;
          }
        }
LABEL_11:
        if ((v7 & 8) != 0)
        {
          WebCore::convertToFullSizeKana((uint64_t)&v17, *a4);
          result = *a4;
          *a4 = v17;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
            else
              *(_DWORD *)result -= 2;
          }
        }
        return result;
      }
      v10 = *(_DWORD *)result - 2;
      if (*(_DWORD *)result != 2)
      {
LABEL_9:
        *(_DWORD *)result = v10;
        goto LABEL_10;
      }
      WTF::StringImpl::destroy(result, v8);
      result = v17;
      v17 = 0;
      if (!result)
        goto LABEL_10;
    }
    v10 = *(_DWORD *)result - 2;
    if (*(_DWORD *)result == 2)
    {
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  if (v6)
    *(_DWORD *)v6 += 2;
  *a4 = v6;
  return result;
}

uint64_t WebCore::convertToFullSizeKana(uint64_t this, const WTF::String *a2)
{
  _QWORD *v2;
  int v3;
  unsigned __int16 *v4;
  uint64_t v5;
  char *v6;
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  unsigned __int16 *v9;
  int v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned __int8 *v20;
  unsigned int v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  int v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int *v34;
  char *v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  _BYTE *v42;
  uint64_t v43;
  _WORD *v44;
  uint64_t v45;
  __int16 v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  unsigned int v50;
  char v51;
  __int16 v52;

  v2 = (_QWORD *)this;
  if (!a2)
    goto LABEL_40;
  v3 = *((_DWORD *)a2 + 4);
  v4 = (unsigned __int16 *)*((_QWORD *)a2 + 1);
  v5 = *((unsigned int *)a2 + 1);
  v6 = (char *)v4 + v5;
  v7 = &v4[v5];
  if ((v3 & 4) != 0)
    v8 = (unsigned __int16 *)v6;
  else
    v8 = v7;
  if (v4 == v8)
  {
LABEL_39:
    *(_DWORD *)a2 += 2;
LABEL_40:
    *v2 = a2;
    return this;
  }
  if ((v3 & 4) != 0)
  {
    v20 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
    while (1)
    {
      v21 = *v20;
      v22 = (char *)&WebCore::convertToFullSizeKana(WTF::String const&)::kanasMap;
      v23 = 58;
      do
      {
        v24 = v23 >> 1;
        v25 = &v22[8 * (v23 >> 1)];
        v27 = *(_DWORD *)v25;
        v26 = v25 + 8;
        this = ~(v23 >> 1);
        v23 += this;
        if (v27 < v21)
          v22 = v26;
        else
          v23 = v24;
      }
      while (v23);
      if (v22 != &jpt_196468E7C && *(_DWORD *)v22 == v21)
        break;
      if (++v20 == (unsigned __int8 *)v8)
        goto LABEL_39;
    }
  }
  else
  {
    v9 = (unsigned __int16 *)*((_QWORD *)a2 + 1);
    while (1)
    {
      v10 = *v9;
      if ((v10 & 0xF800) != 0xD800 || (char *)v8 - (char *)v9 == 2)
      {
        v11 = *v9;
      }
      else
      {
        v11 = *v9;
        if ((v10 & 0x400) == 0)
        {
          v18 = v9[1];
          v19 = v18 & 0xFC00;
          v11 = v18 + (v10 << 10) - 56613888;
          if (v19 != 56320)
            v11 = *v9;
        }
      }
      this = (uint64_t)&WebCore::convertToFullSizeKana(WTF::String const&)::kanasMap;
      v12 = 58;
      do
      {
        v13 = v12 >> 1;
        v14 = (unsigned int *)(this + 8 * (v12 >> 1));
        v16 = *v14;
        v15 = (uint64_t)(v14 + 2);
        v12 += ~(v12 >> 1);
        if (v16 < v11)
          this = v15;
        else
          v12 = v13;
      }
      while (v12);
      if ((char *)this != &jpt_196468E7C)
      {
        this = *(unsigned int *)this;
        if ((_DWORD)this == v11)
          break;
      }
      if ((v10 & 0xFC00) != 0xD800 || (char *)v8 - (char *)v9 == 2)
      {
        v17 = 1;
      }
      else if ((v9[1] & 0xFC00) == 0xDC00)
      {
        v17 = 2;
      }
      else
      {
        v17 = 1;
      }
      v9 += v17;
      if (v9 == v8)
        goto LABEL_39;
    }
  }
  v48 = 0;
  v49 = 0;
  v50 = 0;
  v51 = 1;
  do
  {
    if ((v3 & 4) != 0)
    {
      v28 = *(unsigned __int8 *)v4;
    }
    else
    {
      v28 = *v4;
      if ((v28 & 0xF800) == 0xD800 && (char *)v8 - (char *)v4 != 2 && (v28 & 0x400) == 0)
      {
        v29 = v4[1];
        v39 = (v29 & 0xFC00) == 56320;
        v30 = v29 + (v28 << 10) - 56613888;
        if (v39)
          v28 = v30;
      }
    }
    v31 = (char *)&WebCore::convertToFullSizeKana(WTF::String const&)::kanasMap;
    v32 = 58;
    do
    {
      v33 = v32 >> 1;
      v34 = (unsigned int *)&v31[8 * (v32 >> 1)];
      v36 = *v34;
      v35 = (char *)(v34 + 2);
      v32 += ~(v32 >> 1);
      if (v36 < v28)
        v31 = v35;
      else
        v32 = v33;
    }
    while (v32);
    if (v31 == &jpt_196468E7C || *(_DWORD *)v31 != v28)
    {
      v41 = v49;
      if (v49 || (v41 = v48) != 0)
      {
        if (v28 <= 0xFF && (*((_DWORD *)v41 + 4) & 4) != 0)
        {
LABEL_69:
          v42 = (_BYTE *)MEMORY[0x19AEA4824](&v48);
          if (v42)
            *v42 = v28;
          goto LABEL_79;
        }
      }
      else if (v28 <= 0xFF)
      {
        goto LABEL_69;
      }
      v44 = (_WORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v48);
      if (v44)
      {
        if (HIWORD(v28))
        {
          v46 = v28 & 0x3FF | 0xDC00;
          v28 = (v28 >> 10) - 10304;
          v44[1] = v46;
        }
        *v44 = v28;
      }
    }
    else
    {
      v37 = *((unsigned __int16 *)v31 + 2);
      v52 = v37;
      if (!v49)
        goto LABEL_73;
      v38 = v50;
      v39 = v50 < *((_DWORD *)v49 + 1) && v48 == 0;
      if (!v39)
        goto LABEL_73;
      if ((*((_BYTE *)v49 + 16) & 4) == 0)
      {
        v40 = *((_QWORD *)v49 + 1);
        ++v50;
        *(_WORD *)(v40 + 2 * v38) = v37;
        goto LABEL_79;
      }
      if (v37 <= 0xFF)
      {
        v43 = *((_QWORD *)v49 + 1);
        ++v50;
        *(_BYTE *)(v43 + v38) = v37;
      }
      else
      {
LABEL_73:
        WTF::StringBuilder::append();
      }
    }
LABEL_79:
    if ((v3 & 4) != 0)
    {
      v4 = (unsigned __int16 *)((char *)v4 + 1);
    }
    else
    {
      if ((*v4 & 0xFC00) != 0xD800 || (char *)v8 - (char *)v4 == 2)
      {
        v45 = 1;
      }
      else if ((v4[1] & 0xFC00) == 0xDC00)
      {
        v45 = 2;
      }
      else
      {
        v45 = 1;
      }
      v4 += v45;
    }
  }
  while (v4 != v8);
  this = (uint64_t)v48;
  if (v48
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v48),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v48),
        (this = (uint64_t)v48) != 0))
  {
    *(_DWORD *)this += 2;
  }
  *v2 = this;
  v47 = v49;
  v49 = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 2)
    {
      WTF::StringImpl::destroy(v47, a2);
      this = (uint64_t)v48;
    }
    else
    {
      *(_DWORD *)v47 -= 2;
    }
  }
  v48 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
    else
      *(_DWORD *)this -= 2;
  }
  return this;
}

WTF::StringImpl *WebCore::RenderText::setRenderedText(WebCore::RenderText *this, WTF::StringImpl **a2)
{
  WTF::StringImpl **v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  int v16;
  WTF::StringImpl *v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  int i;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  _WORD *v35;
  unsigned int v36;
  _BOOL4 v37;
  const WTF::StringImpl *v38;
  __int16 v39;
  __int16 v40;
  __int16 v41;
  void *v42;
  __int16 v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unsigned int v48;
  int j;
  uint64_t v50;
  uint64_t v51;
  WTF *v52;
  uint64_t v53;
  unsigned int v54;
  WTF **v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  int v60;
  int k;
  uint64_t v62;
  WTF **v63;
  WTF *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  int v67;
  int v68;
  uint64_t v69;
  unint64_t v70;
  __int16 v71;
  WTF::StringImpl *result;
  WTF::StringImpl *v73;
  int v74;
  WTF *v75;
  unsigned int v76;
  uint64_t v77;
  WTF::StringImpl **v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  void *__b;
  WTF::StringImpl *v83;

  v4 = (WTF::StringImpl **)((char *)this + 104);
  (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)this + 664))(&v81);
  v6 = *a2;
  if (*a2)
    *(_DWORD *)v6 += 2;
  v7 = *v4;
  *v4 = v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v5);
    else
      *(_DWORD *)v7 -= 2;
  }
  if ((*((_WORD *)this + 59) & 0x400) != 0)
  {
    if (*v4)
    {
      WTF::StringImpl::replace();
      v9 = *v4;
      *v4 = v83;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v8);
        else
          *(_DWORD *)v9 -= 2;
      }
    }
    else
    {
      *v4 = 0;
    }
  }
  v10 = *((_QWORD *)this + 4);
  if (v10)
    v11 = *(_QWORD *)(v10 + 8);
  else
    v11 = 0;
  if ((*(_BYTE *)(v11 + 121) & 0x7C) == 0)
    goto LABEL_17;
  v12 = (*(uint64_t (**)(WebCore::RenderText *))(*(_QWORD *)this + 712))(this);
  WebCore::applyTextTransform((WTF::StringImpl *)(v11 + 80), v4, v12, &v83);
  v14 = v83;
  v83 = 0;
  v15 = (WTF::StringImpl *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = v14;
  if (!v15)
    goto LABEL_17;
  v16 = *(_DWORD *)v15 - 2;
  if (*(_DWORD *)v15 != 2)
    goto LABEL_16;
  WTF::StringImpl::destroy(v15, v13);
  v15 = v83;
  v83 = 0;
  if (v15)
  {
    v16 = *(_DWORD *)v15 - 2;
    if (*(_DWORD *)v15 != 2)
    {
LABEL_16:
      *(_DWORD *)v15 = v16;
      goto LABEL_17;
    }
    WTF::StringImpl::destroy(v15, v29);
  }
LABEL_17:
  if (((*(_DWORD *)(*(_QWORD *)(v11 + 104) + 228) >> 2) & 3u) - 1 <= 2)
  {
    v17 = *v4;
    if (*v4)
    {
      v18 = *((_DWORD *)v17 + 1);
      if (v18)
      {
        if ((*((_WORD *)this + 59) & 0x2000) == 0)
          goto LABEL_41;
        {
          v19 = dword_1EE2F93A0 + 1;
        }
        else
        {
          WebCore::secureTextTimers(void)::map = 0;
          *(_QWORD *)&dword_1EE2F93A0 = 0;
          v19 = 1;
        }
        dword_1EE2F93A0 = v19;
        v20 = *((_QWORD *)this + 1);
        if (!v20 || !*(_QWORD *)(v20 + 8) || !WebCore::secureTextTimers(void)::map)
          goto LABEL_41;
        v21 = *(_DWORD *)(WebCore::secureTextTimers(void)::map - 8);
        v22 = (~(v20 << 32) + v20) ^ ((unint64_t)(~(v20 << 32) + v20) >> 22);
        v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
        v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
        v25 = v21 & ((v24 >> 31) ^ v24);
        for (i = 1; ; v25 = (v27 + i++) & v21)
        {
          v27 = v25;
          v28 = *(_QWORD *)(WebCore::secureTextTimers(void)::map + 16 * v25);
          if (v28 != -1)
          {
            if (!v28)
              goto LABEL_41;
            if (v28 == v20)
              break;
          }
        }
        v30 = *(_QWORD *)(WebCore::secureTextTimers(void)::map + 16 * v27 + 8);
        if (v30)
        {
          LODWORD(v31) = *(_DWORD *)(v30 + 56);
          *(_DWORD *)(v30 + 56) = 0;
          if ((_DWORD)v31
            && v31 <= v18
            && (v31 = (v31 - 1), *((_DWORD *)v17 + 1) > v31))
          {
            v77 = *((_QWORD *)v17 + 1);
            if ((*((_BYTE *)v17 + 16) & 4) != 0)
              v32 = *(unsigned __int8 *)(v77 + v31);
            else
              v32 = *(unsigned __int16 *)(v77 + 2 * v31);
          }
          else
          {
            v32 = 0;
          }
        }
        else
        {
LABEL_41:
          v32 = 0;
          LODWORD(v31) = 0;
        }
        __b = 0;
        WTF::StringImpl::createUninitialized();
        v34 = *v4;
        *v4 = v83;
        if (v34)
        {
          if (*(_DWORD *)v34 == 2)
            WTF::StringImpl::destroy(v34, v33);
          else
            *(_DWORD *)v34 -= 2;
        }
        v35 = __b;
        if (v18 <= 1)
          v36 = 1;
        else
          v36 = v18;
        memset_pattern16(__b, &unk_1969FCF60, 2 * v36);
        if (v32)
          v35[v31] = v32;
      }
    }
  }
  v37 = WTF::String::containsOnlyASCII((WTF::String *)v4);
  if (v37)
    v39 = 128;
  else
    v39 = 0;
  v40 = *((_WORD *)this + 59) & 0xFF7F | v39;
  *((_WORD *)this + 59) = v40;
  if (v37
    || (v73 = *v4) == 0
    || (*((_BYTE *)v73 + 16) & 4) != 0
    || (v74 = WebCore::FontCascade::characterRangeCodePath(*((_QWORD *)v73 + 1), *((unsigned int *)v73 + 1)),
        v40 = *((_WORD *)this + 59),
        v74 == 1))
  {
    v41 = 256;
  }
  else
  {
    v41 = 0;
  }
  *((_WORD *)this + 59) = v40 & 0xFEFF | v41;
  *((_DWORD *)this + 28) = 0;
  *((_WORD *)this + 58) = 0;
  if ((WTF::equal(*((WTF **)this + 13), v81, v38) & 1) != 0)
  {
    v43 = *((_WORD *)this + 59);
    if ((v43 & 0x800) != 0)
    {
      {
        if (WebCore::originalTextMap(void)::map)
        {
          v44 = *(_DWORD *)(WebCore::originalTextMap(void)::map - 8);
          v45 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
          v46 = 9 * ((v45 + ~(v45 << 13)) ^ ((v45 + ~(v45 << 13)) >> 8));
          v47 = (v46 ^ (v46 >> 15)) + ~((v46 ^ (v46 >> 15)) << 27);
          v48 = v44 & ((v47 >> 31) ^ v47);
          for (j = 1; ; ++j)
          {
            v50 = v48;
            v51 = *(_QWORD *)(WebCore::originalTextMap(void)::map + 16 * v48);
            if (v51 != -1)
            {
              if (!v51)
                goto LABEL_90;
              if (*(WebCore::RenderText **)(v51 + 8) == this)
                break;
            }
            v48 = (v50 + j) & v44;
          }
          if ((_DWORD)v50 != *(_DWORD *)(WebCore::originalTextMap(void)::map - 4))
          {
            WTF::HashTable<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>,WTF::String>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>,WTF::String,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>>::remove((WTF **)(WebCore::originalTextMap(void)::map + 16 * v50), v42);
            v43 = *((_WORD *)this + 59);
          }
        }
      }
      else
      {
        WebCore::originalTextMap(void)::map = 0;
      }
LABEL_90:
      v71 = v43 & 0xF7FF;
      goto LABEL_91;
    }
    goto LABEL_92;
  }
  {
    WebCore::originalTextMap(void)::map = 0;
  }
  v52 = (WTF *)*((_QWORD *)this + 1);
  if (!v52)
  {
    v52 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v52 = 1;
    *((_QWORD *)v52 + 1) = this;
    v75 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v52;
    if (v75)
    {
      if (*(_DWORD *)v75 == 1)
      {
        WTF::fastFree(v75, v42);
        v52 = (WTF *)*((_QWORD *)this + 1);
      }
      else
      {
        --*(_DWORD *)v75;
      }
    }
  }
  ++*(_DWORD *)v52;
  v53 = WebCore::originalTextMap(void)::map;
  if (WebCore::originalTextMap(void)::map
    || (WTF::HashTable<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>,WTF::String>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>,WTF::String,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>>::expand(),
        (v53 = WebCore::originalTextMap(void)::map) != 0))
  {
    v54 = *(_DWORD *)(v53 - 8);
  }
  else
  {
    v54 = 0;
  }
  v55 = 0;
  v56 = *((_QWORD *)v52 + 1);
  v57 = (~(v56 << 32) + v56) ^ ((unint64_t)(~(v56 << 32) + v56) >> 22);
  v58 = 9 * ((v57 + ~(v57 << 13)) ^ ((v57 + ~(v57 << 13)) >> 8));
  v59 = (v58 ^ (v58 >> 15)) + ~((v58 ^ (v58 >> 15)) << 27);
  v60 = (v59 >> 31) ^ v59;
  for (k = 1; ; ++k)
  {
    v62 = v60 & v54;
    v63 = (WTF **)(v53 + 16 * v62);
    v64 = *v63;
    if (!*v63)
    {
      if (v55)
      {
        *v55 = 0;
        v55[1] = 0;
        --*(_DWORD *)(v53 - 16);
        *v55 = v52;
      }
      else
      {
        *v63 = v52;
        v55 = (WTF **)(v53 + 16 * v62);
      }
      v65 = v81;
      if (v81)
        *(_DWORD *)v81 += 2;
      v66 = v55[1];
      v55[1] = v65;
      if (v66)
      {
        if (*(_DWORD *)v66 == 2)
          WTF::StringImpl::destroy(v66, (WTF::StringImpl *)v42);
        else
          *(_DWORD *)v66 -= 2;
      }
      if (WebCore::originalTextMap(void)::map)
        v67 = *(_DWORD *)(WebCore::originalTextMap(void)::map - 12) + 1;
      else
        v67 = 1;
      *(_DWORD *)(WebCore::originalTextMap(void)::map - 12) = v67;
      if (WebCore::originalTextMap(void)::map)
        v68 = *(_DWORD *)(WebCore::originalTextMap(void)::map - 12);
      else
        v68 = 0;
      v69 = (*(_DWORD *)(WebCore::originalTextMap(void)::map - 16) + v68);
      v70 = *(unsigned int *)(WebCore::originalTextMap(void)::map - 4);
      if (v70 > 0x400)
      {
        if (v70 > 2 * v69)
          goto LABEL_87;
      }
      else
      {
        if (3 * v70 > 4 * v69)
          goto LABEL_87;
        if (!(_DWORD)v70)
        {
          v76 = 8;
LABEL_112:
          WTF::HashTable<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>,WTF::String>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>,WTF::String,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>>::rehash(v76);
          goto LABEL_87;
        }
      }
      v76 = (_DWORD)v70 << (6 * *(_DWORD *)(WebCore::originalTextMap(void)::map - 12) >= (2 * v70));
      goto LABEL_112;
    }
    if (v64 != (WTF *)-1)
    {
      v63 = v55;
      if (*((_QWORD *)v64 + 1) == v56)
        break;
    }
    v60 = k + v62;
    v55 = v63;
  }
  v78 = (WTF::StringImpl **)(v53 + 16 * v62 + 8);
  v79 = v81;
  if (v81)
    *(_DWORD *)v81 += 2;
  v80 = *v78;
  *v78 = v79;
  if (v80)
  {
    if (*(_DWORD *)v80 == 2)
      WTF::StringImpl::destroy(v80, (WTF::StringImpl *)v42);
    else
      *(_DWORD *)v80 -= 2;
  }
  if (*(_DWORD *)v52 == 1)
    WTF::fastFree(v52, v42);
  else
    --*(_DWORD *)v52;
LABEL_87:
  v71 = *((_WORD *)this + 59) | 0x800;
LABEL_91:
  *((_WORD *)this + 59) = v71;
LABEL_92:
  result = v81;
  v81 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v42);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t *WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>::WeakRef<void>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v6;
  WTF *v7;

  v3 = *(_QWORD *)(a2 + 8);
  if (!v3)
  {
    v3 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v3 = 1;
    *(_QWORD *)(v3 + 8) = a2;
    v7 = *(WTF **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = v3;
    if (v7)
    {
      if (*(_DWORD *)v7 == 1)
      {
        WTF::fastFree(v7, v6);
        v3 = *(_QWORD *)(a2 + 8);
      }
      else
      {
        --*(_DWORD *)v7;
      }
    }
  }
  ++*(_DWORD *)v3;
  *a1 = v3;
  return a1;
}

void WebCore::RenderText::setTextInternal(WebCore::RenderText *this, WTF **a2, char a3)
{
  WTF *v5;
  WTF::StringImpl *v6;
  int v7;
  WebCore::RenderElement *v8;
  uint64_t v9;
  int v10;
  const WTF::StringImpl *v11;
  char v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WebCore::AXObjectCache *v15;
  WebCore::Node *v16;
  WTF::StringImpl *v17;

  if ((a3 & 1) != 0)
    goto LABEL_2;
  (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::RenderText *))(*(_QWORD *)this + 664))(&v17, this);
  v12 = WTF::equal(*a2, v17, v11);
  v13 = v17;
  v17 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  if ((v12 & 1) == 0)
  {
LABEL_2:
    v5 = *a2;
    if (*a2)
      *(_DWORD *)v5 += 2;
    v6 = (WTF::StringImpl *)*((_QWORD *)this + 13);
    *((_QWORD *)this + 13) = v5;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v6 -= 2;
    }
    if ((*((_WORD *)this + 59) & 0x800) != 0)
    {
      {
        WebCore::originalTextMap(void)::map = 0;
      }
      WTF::HashMap<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>,WTF::String,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::remove<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>(this, a2);
      *((_WORD *)this + 59) &= ~0x800u;
    }
    (*(void (**)(WebCore::RenderText *, WTF **))(*(_QWORD *)this + 704))(this, a2);
    v7 = *((_DWORD *)this + 5);
    if ((v7 & 8) == 0)
    {
      *((_DWORD *)this + 5) = v7 | 8;
      v8 = WebCore::RenderObject::markContainingBlocksForLayout(this, 0);
      WebCore::RenderObject::scheduleLayout(this, v8);
      if ((*((_BYTE *)this + 21) & 0x80) != 0)
      {
        if ((*((_BYTE *)this + 45) & 0x10) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19645A188);
        }
        v9 = *((_QWORD *)this + 18);
        if (v9)
        {
          v10 = *(_DWORD *)(v9 + 8) + 1;
          *(_DWORD *)(v9 + 8) = v10;
        }
        else
        {
          v10 = MEMORY[8];
        }
        *(_QWORD *)(v9 + 24) = *(_QWORD *)(v9 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
        if (!v10)
        {
          __break(0xC471u);
          JUMPOUT(0x19645A1B4);
        }
        *(_DWORD *)(v9 + 8) = v10 - 1;
      }
    }
    WebCore::RenderObject::setPreferredLogicalWidthsDirty((uint64_t)this, 1, 1);
    *((_WORD *)this + 59) &= ~0x200u;
    if (WebCore::Document::hasEverCreatedAnAXObjectCache)
    {
      v14 = WebCore::Document::existingAXObjectCacheSlow(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8)
                                                                                           + 40)
                                                                               + 8));
      if (v14)
      {
        v15 = (WebCore::AXObjectCache *)v14;
        v16 = (WebCore::Node *)WebCore::RenderText::textNode(this);
        WebCore::AXObjectCache::deferTextChangedIfNeeded(v15, v16);
      }
    }
  }
}

void WebCore::RenderText::setTextWithOffset(WTF **this, const WTF::StringImpl **a2, const WTF::StringImpl *a3, unsigned int a4, int a5)
{
  unsigned int v6;
  int v9;
  WTF *v10;
  int v11;
  WTF *v12;
  WTF *v13;
  uint64_t v14;
  __int16 v15;
  WTF *v16;
  uint64_t v17;
  uint64_t v18;
  WebCore::LayoutIntegration::LineLayout *v19;

  v6 = a3;
  if ((a5 & 1) == 0 && (WTF::equal(this[13], *a2, a3) & 1) != 0)
    return;
  if (*a2)
    v9 = *((_DWORD *)*a2 + 1);
  else
    v9 = 0;
  v10 = this[13];
  if (v10)
    v11 = *((_DWORD *)v10 + 1);
  else
    v11 = 0;
  v12 = this[8];
  if (v12)
  {
    do
    {
      (*(void (**)(WTF *))(*(_QWORD *)v12 + 184))(v12);
      v12 = (WTF *)*((_QWORD *)v12 + 8);
    }
    while (v12);
    if (this[8])
      goto LABEL_11;
  }
  v13 = this[4];
  if (!v13)
  {
LABEL_32:
    v15 = 0;
    goto LABEL_12;
  }
  v14 = *((_QWORD *)v13 + 1);
  if (!v14)
  {
    LODWORD(v13) = 0;
    goto LABEL_32;
  }
  (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v14 + 672))(v14, this);
LABEL_11:
  v15 = 32;
  LODWORD(v13) = 1;
LABEL_12:
  *((_WORD *)this + 59) = *((_WORD *)this + 59) & 0xFFDF | v15;
  (*((void (**)(WTF **, const WTF::StringImpl **, _QWORD))*this + 90))(this, a2, v13 | a5);
  if (*((unsigned __int8 *)this + 46) - 32 <= 0xFFFFFFFD)
  {
    v16 = this[4];
    if (v16)
    {
      v17 = *((_QWORD *)v16 + 1);
      if (v17)
      {
        while ((*(_BYTE *)(v17 + 22) & 4) != 0)
        {
          if ((*(_BYTE *)(v17 + 52) & 7) == 1)
          {
            if (*(_DWORD *)(v17 + 240) == 1)
            {
              v19 = *(WebCore::LayoutIntegration::LineLayout **)(v17 + 232);
              if (v19)
              {
                if (WebCore::LayoutIntegration::shouldInvalidateLineLayoutPathAfterChangeFor((WebCore::RenderObject *)v17, (uint64_t)this, *(_QWORD *)(v17 + 232), 2)|| (WebCore::LayoutIntegration::LineLayout::updateTextContent(v19, (const WebCore::RenderText *)this, v6, v9 - v11) & 1) == 0)
                {
                  WebCore::RenderBlockFlow::invalidateLineLayoutPath(v17, 2);
                }
              }
            }
            return;
          }
          v18 = *(_QWORD *)(v17 + 32);
          if (v18)
          {
            v17 = *(_QWORD *)(v18 + 8);
            if (v17)
              continue;
          }
          return;
        }
      }
    }
  }
}

WTF::StringImpl *WebCore::RenderText::textWithoutConvertingBackslashToYenSymbol@<X0>(WTF::StringImpl *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  int v7;
  WTF::StringImpl *v8;
  WTF::StringImpl **v9;
  WTF::StringImpl *v10;

  if ((*((_WORD *)this + 59) & 0x400) == 0)
  {
LABEL_2:
    v2 = (WTF::StringImpl *)*((_QWORD *)this + 13);
    if (v2)
      *(_DWORD *)v2 += 2;
    *a2 = v2;
    return this;
  }
  v9 = a2;
  v3 = this;
  v4 = *((_QWORD *)this + 4);
  if (!v4)
  {
    a2 = v9;
    if ((*(_BYTE *)(MEMORY[0x68] + 228) & 0xC) != 0)
      goto LABEL_2;
    if ((MEMORY[0x79] & 0x7C) != 0)
    {
      v5 = 0;
      goto LABEL_9;
    }
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)this + 664))(this);
  }
  v5 = *(_QWORD *)(v4 + 8);
  a2 = v9;
  if ((*(_BYTE *)(*(_QWORD *)(v5 + 104) + 228) & 0xC) != 0)
    goto LABEL_2;
  if ((*(_BYTE *)(v5 + 121) & 0x7C) == 0)
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)this + 664))(this);
LABEL_9:
  v6 = (WTF::StringImpl *)(v5 + 80);
  (*(void (**)(WTF::StringImpl **__return_ptr, WTF::StringImpl *))(*(_QWORD *)this + 664))(&v10, this);
  v7 = (*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v3 + 712))(v3);
  WebCore::applyTextTransform(v6, &v10, v7, v9);
  this = v10;
  v10 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v8);
    else
      *(_DWORD *)this -= 2;
  }
  return this;
}

_QWORD **WebCore::RenderText::dirtyLineBoxes(_QWORD **this, int a2)
{
  _QWORD **v2;
  _QWORD *v3;
  _QWORD **v4;

  v2 = this;
  if (a2)
  {
    v3 = this + 8;
    this = (_QWORD **)this[8];
    if (this)
    {
      do
      {
        v4 = (_QWORD **)this[8];
        ((void (*)(_QWORD **))(*this)[1])(this);
        this = v4;
      }
      while (v4);
      *v3 = 0;
      v2[9] = 0;
    }
  }
  else if ((*((_WORD *)this + 59) & 0x20) == 0)
  {
    this = WebCore::RenderTextLineBoxes::dirtyAll(this + 8);
  }
  *((_WORD *)v2 + 59) &= ~0x20u;
  return this;
}

uint64_t WebCore::RenderText::createTextBox@<X0>(WebCore::RenderText *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;
  int v6;
  void *v7;
  WTF *v8;

  v4 = bmalloc::api::isoAllocate();
  *(_QWORD *)v4 = off_1E341E8B8;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  result = *((_QWORD *)this + 1);
  if (!result)
  {
    result = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)result = 1;
    *(_QWORD *)(result + 8) = this;
    v8 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = result;
    if (v8)
    {
      if (*(_DWORD *)v8 == 1)
      {
        WTF::fastFree(v8, v7);
        result = *((_QWORD *)this + 1);
        if (!result)
          goto LABEL_3;
      }
      else
      {
        --*(_DWORD *)v8;
      }
    }
  }
  ++*(_DWORD *)result;
LABEL_3:
  *(_QWORD *)(v4 + 32) = result;
  *(_QWORD *)(v4 + 40) = 0;
  *(_DWORD *)(v4 + 48) = 0;
  v6 = (*(unsigned __int16 *)(v4 + 52) | (*(unsigned __int8 *)(v4 + 54) << 16)) & 0xFE5000;
  *(_WORD *)(v4 + 52) = *(_WORD *)(v4 + 52) & 0x5000 | 0x2800;
  *(_BYTE *)(v4 + 54) = BYTE2(v6);
  *(_QWORD *)v4 = off_1E341E7D0;
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 72) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  *a2 = v4;
  return result;
}

float WebCore::RenderText::width(uint64_t a1, unsigned int a2, unsigned int a3, WebCore::FontCascade *this, const WTF::AtomString *a5, uint64_t a6, float a7)
{
  uint64_t v7;
  float v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v21;
  unsigned int v22;
  int v23;
  int v24;
  BOOL v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  int v31;
  BOOL v32;
  BOOL v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  float v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  _BYTE v46[8];
  WTF::StringImpl *v47;
  int v48;
  char v49;
  float v50;
  char v51;

  v7 = *(_QWORD *)(a1 + 104);
  v8 = 0.0;
  if (v7)
  {
    v9 = a3;
    if (a3)
    {
      v10 = *(unsigned int *)(v7 + 4);
      if ((_DWORD)v10)
      {
        v16 = *(_QWORD *)(a1 + 32);
        v17 = v16 ? *(_QWORD *)(v16 + 8) : 0;
        v8 = *((float *)this + 43);
        if ((*(_BYTE *)(*(_QWORD *)(v17 + 104) + 231) & (*(_BYTE *)(a1 + 46) == 3)) != 1
          || (*(_BYTE *)(a1 + 140) & 1) == 0)
        {
          if (a3 == 1 && v10 > a2)
          {
            v18 = *(_QWORD *)(v7 + 8);
            v19 = (*(_BYTE *)(v7 + 16) & 4) != 0
                ? *(unsigned __int8 *)(v18 + a2)
                : *(unsigned __int16 *)(v18 + 2 * a2);
            if (v19 == 32)
              return WebCore::FontCascade::widthOfSpaceString(this);
          }
          v21 = v17 + 80;
          if ((WebCore::FontCascade *)(*(_QWORD *)(v17 + 112) + 32) != this)
            goto LABEL_27;
          v22 = *(_DWORD *)(v17 + 120);
          v23 = (v22 >> 27) & 7;
          if ((v22 & 0x40000000) != 0 || v23 != 3)
          {
            v24 = 1;
            if (!v23)
            {
LABEL_17:
              v26 = (_DWORD)v10 != v9 || a2 != 0 || v24 == 0;
              if (!v26 && (!a6 || !*(_BYTE *)(a6 + 16)))
              {
                v39 = *(_DWORD *)(a1 + 20);
                if (!a5)
                {
                  if ((v39 & 0x2000) != 0)
                  {
                    (*(void (**)(uint64_t, BOOL, uint64_t, float))(*(_QWORD *)a1 + 696))(a1, (*(_DWORD *)(a1 + 20) & 0x2000) == 0, v21, 0.0);
                    v8 = *(float *)(a1 + 88);
                  }
                  else
                  {
                    v8 = *(float *)(a1 + 88);
                  }
                  goto LABEL_52;
                }
                if ((v39 & 0x2000) == 0 && (*(_WORD *)(a1 + 118) & 0x200) != 0)
                  goto LABEL_69;
                WebCore::RenderText::computePreferredLogicalWidths(a1, a5, a6, 0.0);
                v28 = *(_QWORD *)a5;
                if (!*(_QWORD *)a5 || !*(_DWORD *)(v28 - 12))
                  goto LABEL_64;
                v10 = *(unsigned int *)(v28 - 4);
                if ((_DWORD)v10)
                {
                  v42 = 8 * v10;
                  v43 = *(uint64_t **)a5;
                  while ((unint64_t)(*v43 + 1) <= 1)
                  {
                    ++v43;
                    v42 -= 8;
                    if (!v42)
                      goto LABEL_64;
                  }
LABEL_102:
                  v44 = (uint64_t *)(v28 + 8 * v10);
                  if (v43 != v44)
                  {
                    v45 = *v43;
LABEL_104:
                    if (*(_QWORD *)(v45 + 8))
                      goto LABEL_69;
                    while (++v43 != v44)
                    {
                      v45 = *v43;
                      if ((unint64_t)(*v43 + 1) > 1)
                      {
                        if (v43 != v44)
                          goto LABEL_104;
                        break;
                      }
                    }
                  }
LABEL_64:
                  if (!*(_DWORD *)a6 && !*(_DWORD *)(a6 + 4) && !*(_DWORD *)(a6 + 8) && !*(_DWORD *)(a6 + 12))
                    *(_WORD *)(a1 + 118) |= 0x200u;
LABEL_69:
                  v8 = *(float *)(a1 + 88);
LABEL_52:
                  v38 = 0.0;
                  if (v8 > 0.0)
                    v38 = v8;
                  if (v8 >= 3.4028e38)
                    return 3.4028e38;
                  else
                    return v38;
                }
LABEL_101:
                v43 = (uint64_t *)v28;
                goto LABEL_102;
              }
              goto LABEL_26;
            }
            if ((v22 & 0x40000000) != 0)
              v40 = 1;
            else
              v40 = 2;
            if (v23 != v40)
            {
              v41 = (v22 >> 30) & 1;
              if (v23 == 1)
                v24 = v41;
              else
                v24 = 1;
              goto LABEL_17;
            }
          }
LABEL_26:
          if ((*(_BYTE *)(*(_QWORD *)(v17 + 104) + 231) & (*(_BYTE *)(a1 + 46) == 3)) != 0
            && (*(_BYTE *)(a1 + 140) & 1) != 0)
          {
            goto LABEL_52;
          }
LABEL_27:
          if (v10 <= a2)
          {
            v28 = 0x100000000;
          }
          else
          {
            v27 = *(unsigned int *)(v7 + 16);
            if (v10 - a2 <= v9)
            {
              if (!a2)
              {
                v28 = v10 & 0xFFFFFFFEFFFFFFFFLL | (((v27 >> 2) & 1) << 32);
                goto LABEL_36;
              }
              v9 = v10 - a2;
            }
            v28 = v9;
            v29 = v10 - a2;
            if (((v27 >> 2) & 1) != 0)
            {
              if (v29 >= v28)
              {
                v28 |= 0x100000000uLL;
                goto LABEL_36;
              }
              goto LABEL_100;
            }
            if (v29 < v28)
            {
LABEL_100:
              __break(1u);
              goto LABEL_101;
            }
          }
LABEL_36:
          WebCore::RenderBlock::constructTextRun(v28, v21, 4, 0, (uint64_t)v46);
          v30 = *(_DWORD *)(v17 + 120);
          v31 = (v30 >> 27) & 7;
          if ((v30 & 0x40000000) == 0 && v31 == 3)
          {
            v31 = 5;
          }
          else
          {
            if (v31)
              v32 = 0;
            else
              v32 = (v30 & 0x40000000) == 0;
            if (v32)
            {
              v31 = 0;
            }
            else if ((v30 & 0x40000000) == 0 || v31)
            {
              if ((v30 & 0x40000000) == 0 || v31 != 1)
              {
                if ((v30 & 0x40000000) == 0 && v31 == 2)
                {
                  v31 = 3;
                }
                else if (v31 == 1 && (v30 & 0x40000000) == 0)
                {
                  v31 = 2;
                }
                else
                {
                  v31 = 0;
                }
              }
            }
            else
            {
              v31 = 4;
            }
          }
          v34 = v31 == 5 || (v31 - 1) < 2;
          v35 = *(_QWORD *)(v17 + 104);
          v51 = ((*(unsigned __int16 *)(a1 + 118) >> 5) & 8 | v51 & 0xF6 | v34) ^ 8;
          v48 = *(_DWORD *)(v35 + 336);
          v49 = *(_BYTE *)(v35 + 340);
          v50 = a7;
          v8 = WebCore::FontCascade::width((uint64_t)this, (uint64_t)v46);
          v37 = v47;
          v47 = 0;
          if (v37)
          {
            if (*(_DWORD *)v37 == 2)
              WTF::StringImpl::destroy(v37, v36);
            else
              *(_DWORD *)v37 -= 2;
          }
          goto LABEL_52;
        }
      }
    }
  }
  return v8;
}

unint64_t WebCore::RenderText::linesBoundingBox(WebCore::RenderText *this, WebCore::RenderObject *a2)
{
  WebCore::LayoutIntegration::LineLayout *v3;
  __int32 v4;
  int v5;
  int v6;
  int v7;
  float v8;
  float v9;
  float v10;
  float v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  WebCore::InlineIterator::Box *v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int v20;
  unint64_t v21;
  int v22;
  int v23;
  _QWORD v24[2];
  int v25;
  float32x2_t v26;
  int v27;
  int v28;
  _QWORD v29[2];
  int v30;

  v3 = (WebCore::LayoutIntegration::LineLayout *)WebCore::LayoutIntegration::LineLayout::containing(this, a2);
  if (v3)
  {
    WebCore::LayoutIntegration::LineLayout::textBoxesFor(v3, this, (uint64_t)v29);
  }
  else
  {
    v29[0] = *((_QWORD *)this + 8);
    v30 = 1;
  }
  if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v29) & 1) == 0)
  {
    if (v30 == -1)
      goto LABEL_32;
    v24[0] = &v26;
    if ((((uint64_t (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v30])(v24, v29) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19645ADD8);
    }
    if (v30 == -1)
    {
LABEL_32:
      std::__throw_bad_variant_access[abi:sn180100]();
    }
    else
    {
      v24[0] = &v26;
      v26.i32[0] = ((float (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box32visualRectIgnoringBlockDirectionEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_1[v30])(v24, v29);
      v26.i32[1] = v4;
      v27 = v5;
      v28 = v6;
      LOBYTE(v24[0]) = 0;
      v25 = -1;
      v7 = v30;
      if (v30 != -1)
      {
        ((void (*)(unint64_t *, _QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_2[v30])(&v21, v24, v29);
        v25 = v7;
      }
      while (1)
      {
        WebCore::InlineIterator::TextBoxIterator::traverseNextTextBox((WebCore::InlineIterator::TextBoxIterator *)v24);
        if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v24) & 1) != 0)
          break;
        v16 = (WebCore::InlineIterator::Box *)WebCore::InlineIterator::TextBoxIterator::operator->((uint64_t)v24);
        WebCore::InlineIterator::Box::visualRectIgnoringBlockDirection(v16);
        v21 = __PAIR64__(v18, v17);
        v22 = v19;
        v23 = v20;
        WebCore::FloatRect::uniteEvenIfEmpty(&v26, (float32x2_t *)&v21);
      }
      if (v25 != -1)
        ((void (*)(unint64_t *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_6[v25])(&v21, v24);
      v8 = floorf(v26.f32[0]);
      v9 = 2147500000.0;
      if (v8 < 2147500000.0)
      {
        v9 = -2147500000.0;
        if (v8 > -2147500000.0)
          v9 = (float)(int)v8;
      }
      v10 = floorf(v26.f32[1]);
      v11 = 2147500000.0;
      if (v10 < 2147500000.0)
      {
        v11 = -2147500000.0;
        if (v10 > -2147500000.0)
          v11 = (float)(int)v10;
      }
      if (v9 < 2147500000.0)
      {
        if (v9 <= -2147500000.0)
          v12 = 0x80000000;
        else
          v12 = (int)v9;
LABEL_21:
        if (v11 >= 2147500000.0)
        {
          v13 = 0x7FFFFFFF00000000;
        }
        else if (v11 <= -2147500000.0)
        {
          v13 = 0x8000000000000000;
        }
        else
        {
          v13 = (unint64_t)(int)v11 << 32;
        }
        v14 = v13 | v12;
        goto LABEL_25;
      }
    }
    v12 = 0x7FFFFFFFLL;
    goto LABEL_21;
  }
  v14 = 0;
LABEL_25:
  if (v30 != -1)
    ((void (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_6[v30])(v24, v29);
  return v14;
}

uint64_t WebCore::RenderText::rectsForRepaintingAfterLayout@<X0>(WebCore::RenderObject *a1@<X0>, WebCore::RenderObject *a2@<X1>, uint64_t a3@<X8>)
{
  WebCore::RenderObject *v4;
  WebCore::RenderObject *v6;
  WebCore::RenderObject *v7;
  WebCore::RenderObject *v8;
  uint64_t v9;
  WebCore::RenderObject *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v15;

  v4 = a1;
  v6 = WebCore::RenderObject::containingBlock(a1);
  while ((*((_BYTE *)v4 + 45) & 0x10) == 0)
    v4 = *(WebCore::RenderObject **)(*((_QWORD *)v4 + 4) + 8);
  while ((*((_BYTE *)v4 + 21) & 0x80) == 0)
  {
    do
      v4 = *(WebCore::RenderObject **)(*((_QWORD *)v4 + 4) + 8);
    while ((*((_BYTE *)v4 + 45) & 0x10) == 0);
  }
  v7 = *(WebCore::RenderObject **)(*((_QWORD *)v4 + 18) + 32);
  if (v7 == v6)
  {
LABEL_17:
    if (!a2)
    {
LABEL_28:
      result = (*(uint64_t (**)(WebCore::RenderObject *, WebCore::RenderObject *, uint64_t))(*(_QWORD *)v6 + 440))(v6, a2, 0xC00000000);
      goto LABEL_30;
    }
  }
  else
  {
    if (v6)
    {
      v8 = v6;
      while (1)
      {
        v9 = *((_QWORD *)v8 + 4);
        if (!v9)
          break;
        v8 = *(WebCore::RenderObject **)(v9 + 8);
        if (v8 == v7 || v8 == 0)
        {
          if (!v8)
            break;
          goto LABEL_17;
        }
      }
    }
    v6 = *(WebCore::RenderObject **)(*((_QWORD *)v4 + 18) + 32);
    if (!a2)
      goto LABEL_28;
  }
  if (v6 == a2)
    goto LABEL_28;
  if (v6)
  {
    v11 = v6;
    while (1)
    {
      v12 = *((_QWORD *)v11 + 4);
      if (!v12)
        break;
      v11 = *(WebCore::RenderObject **)(v12 + 8);
      if (v11 == a2 || v11 == 0)
      {
        if (!v11)
          break;
        goto LABEL_28;
      }
    }
  }
  result = (*(uint64_t (**)(WebCore::RenderObject *, WebCore::RenderObject *, uint64_t))(*(_QWORD *)a2 + 440))(a2, a2, 0xC00000000);
LABEL_30:
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v15;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 32) = 0;
  return result;
}

unint64_t WebCore::RenderText::collectSelectionGeometriesForLineBoxes(WebCore::RenderObject *a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v5;
  WebCore::RenderObject *v6;
  WebCore::RenderObject *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  WebCore::LayoutIntegration::LineLayout *v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _BOOL4 v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  signed int v41;
  BOOL v42;
  signed int v43;
  unsigned int v44;
  signed int v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int v49;
  signed int v50;
  signed int v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  __int128 *v56;
  _OWORD *v57;
  __int128 v58;
  __int128 v59;
  float v60;
  float v61;
  float v62;
  float v64;
  float v65;
  float v66;
  float v68;
  float v69;
  float v70;
  float v71;
  int v72;
  unint64_t v73;
  unint64_t v74;
  unsigned int v75;
  char v76;
  uint64_t v77;
  unsigned int v79;
  unsigned int v80;
  _BYTE v81[16];
  int v82;
  _BYTE v83[16];
  int v84;
  unint64_t v85;
  uint64_t v86;
  float v87;
  float v88;
  float v89;
  float v90;
  char v91;
  __int128 v92;
  __int128 v93;
  char v94;

  if ((*((_BYTE *)a1 + 23) & 0xE) == 0)
    goto LABEL_12;
  LOBYTE(v5) = a3;
  v6 = a1;
  if (!WebCore::RenderObject::containingBlock(a1))
    goto LABEL_12;
  v8 = (*((_DWORD *)v6 + 5) >> 25) & 7;
  if (v8 == 2)
  {
    v9 = *((_QWORD *)v6 + 13);
    if (!v9)
    {
      v13 = 0;
      return v9 | v13;
    }
    LODWORD(v10) = 0;
    goto LABEL_8;
  }
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v6 + 3) + 8) + 40) + 8) + 1944);
  LODWORD(v10) = *(_DWORD *)(v11 + 304);
  if (v8 == 1)
  {
    v9 = *((_QWORD *)v6 + 13);
    if (v9)
    {
LABEL_8:
      LODWORD(v12) = *(_DWORD *)(v9 + 4);
      goto LABEL_11;
    }
    LODWORD(v12) = 0;
  }
  else
  {
    LODWORD(v12) = *(_DWORD *)(v11 + 308);
    if (v8 == 3)
      LODWORD(v10) = 0;
  }
LABEL_11:
  if ((_DWORD)v10 == (_DWORD)v12)
  {
LABEL_12:
    v13 = 0;
    LODWORD(v9) = 0;
    return v9 | v13;
  }
  v15 = (WebCore::LayoutIntegration::LineLayout *)WebCore::LayoutIntegration::LineLayout::containing(v6, v7);
  v77 = (uint64_t)v6;
  if (!v15)
    goto LABEL_188;
  WebCore::LayoutIntegration::LineLayout::textBoxesFor(v15, v6, (uint64_t)&v92);
  v16 = v93;
  v83[0] = 0;
  v84 = -1;
  if ((_DWORD)v93 != -1)
  {
LABEL_16:
    ((void (*)(unint64_t *, _BYTE *, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v16])(&v85, v83, &v92);
    v84 = v16;
    if ((_DWORD)v93 != -1)
      ((void (*)(unint64_t *, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v93])(&v85, &v92);
  }
  v81[0] = 0;
  v82 = -1;
  v17 = v84;
  if (v84 != -1)
  {
    ((void (*)(__int128 *, _BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_2[v84])(&v92, v81, v83);
    v82 = v17;
  }
  v76 = v5;
  if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v81) & 1) == 0)
  {
    v79 = v12;
    v80 = v10;
    v6 = 0;
    v20 = 0;
    v5 = 0;
    while (1)
    {
      if (v82 == -1)
      {
        std::__throw_bad_variant_access[abi:sn180100]();
LABEL_188:
        *(_QWORD *)&v92 = *((_QWORD *)v6 + 8);
        v16 = 1;
        LODWORD(v93) = 1;
        v83[0] = 0;
        v84 = -1;
        goto LABEL_16;
      }
      *(_QWORD *)&v92 = &v85;
      if ((((uint64_t (*)(__int128 *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v82])(&v92, v81) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19645B7E4);
      }
      v21 = WebCore::selectionRectForTextBox((WebCore *)v81, (const WebCore::InlineIterator::TextBox *)v80, v79);
      v24 = (int)v22 < 1 || SHIDWORD(v22) < 1;
      if (v24)
        v25 = 0;
      else
        v25 = v22;
      if (v24)
        v26 = 0;
      else
        v26 = HIDWORD(v21);
      if (v24)
        v12 = 0;
      else
        v12 = v21;
      WebCore::ellipsisRectForTextBox((WebCore *)&v92, (const WebCore::InlineIterator::TextBox *)v81, v80, v79);
      v27 = *((_QWORD *)&v92 + 1);
      v28 = v92;
      if (!(_BYTE)v93)
      {
        v27 = 0;
        v28 = 0;
      }
      v29 = HIDWORD(v28);
      v30 = (_DWORD)v28 << 6;
      if ((int)v28 < -33554432)
        v30 = 0x80000000;
      if ((int)v28 <= 0x1FFFFFF)
        v31 = v30;
      else
        v31 = 0x7FFFFFFFLL;
      v32 = HIDWORD(v28) << 6;
      if ((int)v29 < -33554432)
        v32 = 0x80000000;
      if ((int)v29 <= 0x1FFFFFF)
        v33 = v32;
      else
        v33 = 0x7FFFFFFFLL;
      v34 = HIDWORD(v27);
      v35 = (_DWORD)v27 << 6;
      if ((int)v27 < -33554432)
        v35 = 0x80000000;
      if ((int)v27 <= 0x1FFFFFF)
        v36 = v35;
      else
        v36 = 0x7FFFFFFFLL;
      v37 = HIDWORD(v27) << 6;
      if ((int)v34 < -33554432)
        v37 = 0x80000000;
      if ((int)v34 <= 0x1FFFFFF)
        v38 = v37;
      else
        v38 = 0x7FFFFFFFLL;
      if ((int)v36 >= 1 && (int)v38 >= 1)
      {
        if ((int)v25 < 1 || v25 <= 0)
        {
          v25 = v36 | (v38 << 32);
          v26 = v33;
          v12 = v31;
        }
        else
        {
          if ((int)v31 >= (int)v12)
            v39 = v12;
          else
            v39 = v31;
          if ((int)v33 >= (int)v26)
            v40 = v26;
          else
            v40 = v33;
          v41 = v12 + v25;
          if (__OFADD__((_DWORD)v12, (_DWORD)v25))
            v41 = (v12 >> 31) + 0x7FFFFFFF;
          v42 = __OFADD__((_DWORD)v31, (_DWORD)v36);
          v43 = v31 + v36;
          if (v42)
            v43 = (v31 >> 31) + 0x7FFFFFFF;
          if (v41 <= v43)
            v44 = v43;
          else
            v44 = v41;
          v45 = v26 + HIDWORD(v25);
          if (__OFADD__((_DWORD)v26, HIDWORD(v25)))
            v45 = (v26 >> 31) + 0x7FFFFFFF;
          v42 = __OFADD__((_DWORD)v33, (_DWORD)v38);
          v46 = v33 + v38;
          if (v42)
            v46 = (v33 >> 31) + 0x7FFFFFFF;
          if (v45 > (int)v46)
            v46 = v45;
          v47 = v44 - v39;
          if (__OFSUB__(v44, (_DWORD)v39))
            v47 = (v44 >> 31) + 0x7FFFFFFF;
          v48 = v46 - v40;
          if (__OFSUB__(v46, (_DWORD)v40))
            v48 = (v46 >> 31) + 0x7FFFFFFF;
          v25 = v47 | (unint64_t)(v48 << 32);
          v26 = v40;
          v12 = v39;
        }
      }
      if ((int)v25 < 1 || SHIDWORD(v25) < 1)
      {
        v10 = v5;
        v18 = v20;
        v19 = (uint64_t)v6;
      }
      else
      {
        if ((int)v5 >= 1)
        {
          v10 = v25;
          v18 = v26;
          v19 = v12;
          if (SHIDWORD(v5) >= 1)
          {
            if ((int)v12 >= (int)v6)
              v19 = v6;
            else
              v19 = v12;
            if ((int)v26 >= (int)v20)
              v18 = v20;
            else
              v18 = v26;
            v49 = (_DWORD)v6 + v5;
            if (__OFADD__((_DWORD)v6, (_DWORD)v5))
              v49 = (v6 >> 31) + 0x7FFFFFFF;
            v50 = v12 + v25;
            if (__OFADD__((_DWORD)v12, (_DWORD)v25))
              v50 = (v12 >> 31) + 0x7FFFFFFF;
            if ((int)v49 <= v50)
              v49 = v50;
            v51 = v20 + HIDWORD(v5);
            if (__OFADD__((_DWORD)v20, HIDWORD(v5)))
              v51 = (v20 >> 31) + 0x7FFFFFFF;
            v52 = v26 + HIDWORD(v25);
            if (__OFADD__((_DWORD)v26, HIDWORD(v25)))
              v52 = (v26 >> 31) + 0x7FFFFFFF;
            if (v51 > (int)v52)
              v52 = v51;
            v53 = v49 - v19;
            if (__OFSUB__(v49, (_DWORD)v19))
              v53 = (v49 >> 31) + 0x7FFFFFFF;
            v54 = v52 - v18;
            if (__OFSUB__(v52, (_DWORD)v18))
              v54 = (v52 >> 31) + 0x7FFFFFFF;
            v10 = v53 | (unint64_t)(v54 << 32);
          }
          if (!a4)
            goto LABEL_129;
LABEL_125:
          *(float *)&v85 = (float)(int)v12 * 0.015625;
          *((float *)&v85 + 1) = (float)(int)v26 * 0.015625;
          *(float *)&v86 = (float)((float)(int)v25 * 0.015625) + *(float *)&v85;
          *((float *)&v86 + 1) = *((float *)&v85 + 1);
          v87 = *(float *)&v86;
          v88 = *((float *)&v85 + 1) + (float)((float)SHIDWORD(v25) * 0.015625);
          v89 = *(float *)&v85;
          v90 = v88;
          WebCore::RenderObject::localToContainerQuad(v77, (float *)&v85, a2, 2u, &v92);
          v55 = *(unsigned int *)(a4 + 12);
          if ((_DWORD)v55 == *(_DWORD *)(a4 + 8))
          {
            v56 = (__int128 *)WTF::Vector<WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, v55 + 1, (unint64_t)&v92);
            v57 = (_OWORD *)(*(_QWORD *)a4 + 32 * *(unsigned int *)(a4 + 12));
            v58 = *v56;
            v59 = v56[1];
          }
          else
          {
            v57 = (_OWORD *)(*(_QWORD *)a4 + 32 * v55);
            v58 = v92;
            v59 = v93;
          }
          *v57 = v58;
          v57[1] = v59;
          ++*(_DWORD *)(a4 + 12);
          goto LABEL_129;
        }
        v10 = v25;
        v18 = v26;
        v19 = v12;
        if (a4)
          goto LABEL_125;
      }
LABEL_129:
      WebCore::InlineIterator::TextBoxIterator::traverseNextTextBox((WebCore::InlineIterator::TextBoxIterator *)v81);
      v6 = (WebCore::RenderObject *)v19;
      v20 = v18;
      v5 = v10;
      if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v81) & 1) != 0)
        goto LABEL_22;
    }
  }
  v10 = 0;
  v18 = 0;
  LODWORD(v19) = 0;
LABEL_22:
  if (v82 != -1)
    ((void (*)(__int128 *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_6[v82])(&v92, v81);
  if (v84 != -1)
    ((void (*)(__int128 *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_6[v84])(&v92, v83);
  if ((v76 & 1) != 0)
  {
    v85 = v19 | (unint64_t)(v18 << 32);
    v86 = v10;
    LOBYTE(v87) = 0;
    v91 = 0;
    (*(void (**)(__int128 *__return_ptr, uint64_t, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)v77
                                                                                                  + 472))(&v92, v77, &v85, a2, 0xC00000000);
    if (!v94)
    {
      __break(0xC471u);
      JUMPOUT(0x19645B854);
    }
    LODWORD(v9) = v92;
    v13 = v92 & 0xFFFFFFFF00000000;
  }
  else
  {
    *(float *)&v85 = (float)(int)v19 * 0.015625;
    *((float *)&v85 + 1) = (float)(int)v18 * 0.015625;
    *(float *)&v86 = (float)((float)(int)v10 * 0.015625) + *(float *)&v85;
    *((float *)&v86 + 1) = *((float *)&v85 + 1);
    v87 = *(float *)&v86;
    v88 = *((float *)&v85 + 1) + (float)((float)SHIDWORD(v10) * 0.015625);
    v89 = *(float *)&v85;
    v90 = v88;
    WebCore::RenderObject::localToContainerQuad(v77, (float *)&v85, a2, 2u, &v92);
    if (*((float *)&v93 + 2) >= *(float *)&v93)
      v60 = *(float *)&v93;
    else
      v60 = *((float *)&v93 + 2);
    if (*((float *)&v92 + 2) >= *(float *)&v92)
      v61 = *(float *)&v92;
    else
      v61 = *((float *)&v92 + 2);
    if (v60 >= v61)
      v60 = v61;
    v62 = fabsf(v60);
    if (v62 == INFINITY || v62 > 2147500000.0)
      v60 = (float)((SLODWORD(v60) >> 31) ^ 0x7FFFFFFF);
    if (*((float *)&v93 + 3) >= *((float *)&v93 + 1))
      v64 = *((float *)&v93 + 1);
    else
      v64 = *((float *)&v93 + 3);
    if (*((float *)&v92 + 3) >= *((float *)&v92 + 1))
      v65 = *((float *)&v92 + 1);
    else
      v65 = *((float *)&v92 + 3);
    if (v64 >= v65)
      v64 = v65;
    v66 = fabsf(v64);
    if (v66 == INFINITY || v66 > 2147500000.0)
      v64 = (float)((SLODWORD(v64) >> 31) ^ 0x7FFFFFFF);
    v68 = floorf(v60);
    v69 = 2147500000.0;
    if (v68 < 2147500000.0)
    {
      v69 = -2147500000.0;
      if (v68 > -2147500000.0)
        v69 = (float)(int)v68;
    }
    v70 = floorf(v64);
    v71 = 2147500000.0;
    if (v70 < 2147500000.0)
    {
      v71 = -2147500000.0;
      if (v70 > -2147500000.0)
        v71 = (float)(int)v70;
    }
    if (v69 >= 2147500000.0)
    {
      v72 = 0x7FFFFFFF;
    }
    else if (v69 <= -2147500000.0)
    {
      v72 = 0x80000000;
    }
    else
    {
      v72 = (int)v69;
    }
    if (v71 >= 2147500000.0)
    {
      v73 = 0x7FFFFFFF00000000;
    }
    else if (v71 <= -2147500000.0)
    {
      v73 = 0x8000000000000000;
    }
    else
    {
      v73 = (unint64_t)(int)v71 << 32;
    }
    v74 = HIDWORD(v73);
    v75 = (v73 | v72) << 6;
    if (v72 < -33554432)
      v75 = 0x80000000;
    if (v72 <= 0x1FFFFFF)
      LODWORD(v9) = v75;
    else
      LODWORD(v9) = 0x7FFFFFFF;
    v13 = v73 << 6;
    if ((int)v74 < -33554432)
      v13 = 0x8000000000000000;
    if ((int)v74 > 0x1FFFFFF)
      v13 = 0x7FFFFFFF00000000;
  }
  return v9 | v13;
}

void WebCore::ellipsisRectForTextBox(WebCore *this, const WebCore::InlineIterator::TextBox *a2, int a3, int a4)
{
  WebCore *v4;
  uint64_t v5;
  uint64_t v9;
  char v10;
  unsigned int v11;
  float v12;
  float v13;
  float v14;
  float v15;
  int v16;
  int v17;
  int v18;
  int v19;
  _QWORD v20[2];
  unsigned int v21;
  char v22;
  unsigned int v23[4];
  int v24;
  char v25;
  char *v26;

  v5 = *((unsigned int *)a2 + 4);
  if ((_DWORD)v5 == -1)
    goto LABEL_30;
  v4 = this;
  v20[0] = &v26;
  ((void (*)(unsigned int *__return_ptr, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box7lineBoxEvE3__0JZNKSA_7lineBoxEvE3__1EEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v5])(v23, v20);
  if (v24 == -1)
    goto LABEL_30;
  v20[0] = &v26;
  if ((((uint64_t (*)(_QWORD *, unsigned int *))off_1E3437368[v24])(v20, v23) & 1) == 0)
  {
    *(_BYTE *)v4 = 0;
    *((_BYTE *)v4 + 16) = 0;
    goto LABEL_27;
  }
  v9 = *((unsigned int *)a2 + 4);
  if ((_DWORD)v9 == -1)
  {
LABEL_30:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_31;
  }
  v26 = &v25;
  ((void (*)(_QWORD *__return_ptr, char **, const WebCore::InlineIterator::TextBox *))*(&off_1E3437318 + v9))(v20, &v26, a2);
  v10 = v22;
  if (v22)
  {
    v11 = a4 - LODWORD(v20[0]);
    if (HIDWORD(v20[0]) < a4 - LODWORD(v20[0]))
      v11 = HIDWORD(v20[0]);
    if (v11 < v21 && a3 - LODWORD(v20[0]) > v21)
    {
      v10 = 0;
      goto LABEL_11;
    }
    v12 = WebCore::InlineIterator::LineBox::ellipsisVisualRect(v23, (WebCore::RenderBlock *)1);
    if (v12 < 2147500000.0)
    {
      if (v12 <= -2147500000.0)
        v16 = 0x80000000;
      else
        v16 = (int)v12;
LABEL_16:
      if (v13 >= 2147500000.0)
      {
        v17 = 0x7FFFFFFF;
      }
      else if (v13 <= -2147500000.0)
      {
        v17 = 0x80000000;
      }
      else
      {
        v17 = (int)v13;
      }
      if (v14 >= 2147500000.0)
      {
        v18 = 0x7FFFFFFF;
      }
      else if (v14 <= -2147500000.0)
      {
        v18 = 0x80000000;
      }
      else
      {
        v18 = (int)v14;
      }
      if (v15 >= 2147500000.0)
      {
        v19 = 0x7FFFFFFF;
      }
      else if (v15 <= -2147500000.0)
      {
        v19 = 0x80000000;
      }
      else
      {
        v19 = (int)v15;
      }
      *(_DWORD *)v4 = v16;
      *((_DWORD *)v4 + 1) = v17;
      v10 = 1;
      *((_DWORD *)v4 + 2) = v18;
      *((_DWORD *)v4 + 3) = v19;
      goto LABEL_26;
    }
LABEL_31:
    v16 = 0x7FFFFFFF;
    goto LABEL_16;
  }
LABEL_11:
  *(_BYTE *)v4 = 0;
LABEL_26:
  *((_BYTE *)v4 + 16) = v10;
LABEL_27:
  if (v24 != -1)
    ((void (*)(_QWORD *, unsigned int *))off_1E34372B8[v24])(v20, v23);
}

unint64_t WebCore::RenderText::selectionRectForRepaint(WebCore::RenderText *this, const WebCore::RenderLayerModelObject *a2, char a3)
{
  return WebCore::RenderText::collectSelectionGeometriesForLineBoxes(this, (uint64_t)a2, a3, 0);
}

unint64_t WebCore::RenderText::countRenderedCharacterOffsetsUntil(WebCore::RenderText *this, WebCore::RenderObject *a2)
{
  unsigned int v2;
  unint64_t v3;
  WebCore::LayoutIntegration::LineLayout *v4;
  int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  _BYTE v11[16];
  int v12;
  char v13;
  char *v14;
  _QWORD v15[2];
  int v16;

  v2 = a2;
  v3 = (unint64_t)this;
  v4 = (WebCore::LayoutIntegration::LineLayout *)WebCore::LayoutIntegration::LineLayout::containing(this, a2);
  if (!v4)
    goto LABEL_24;
  WebCore::LayoutIntegration::LineLayout::textBoxesFor(v4, (const WebCore::RenderText *)v3, (uint64_t)v15);
  v5 = v16;
  v11[0] = 0;
  v12 = -1;
  if (v16 == -1)
    goto LABEL_5;
  while (1)
  {
    ((void (*)(char **, _BYTE *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v5])(&v14, v11, v15);
    v12 = v5;
    if (v16 != -1)
      ((void (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v16])(&v14, v15);
LABEL_5:
    LOBYTE(v15[0]) = 0;
    v16 = -1;
    v6 = v12;
    if (v12 != -1)
    {
      ((void (*)(char **, _QWORD *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_2[v12])(&v14, v15, v11);
      v16 = v6;
    }
    v3 = 0;
    if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v15) & 1) != 0)
      break;
    while (v16 != -1)
    {
      v14 = &v13;
      if ((((uint64_t (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v16])(&v14, v15) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19645BCDCLL);
      }
      if (v16 == -1)
        break;
      v14 = &v13;
      v7 = ((uint64_t (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7TextBox5startEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v16])(&v14, v15);
      if (v16 == -1)
        break;
      v8 = v7;
      v14 = &v13;
      v9 = ((uint64_t (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7TextBox6lengthEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v16])(&v14, v15);
      if (v8 > v2)
        goto LABEL_17;
      if (v9 + v8 >= v2)
      {
        v3 = (_DWORD)v3 + v2 - v8;
        goto LABEL_17;
      }
      v3 = (v9 + v3);
      WebCore::InlineIterator::TextBoxIterator::traverseNextTextBox((WebCore::InlineIterator::TextBoxIterator *)v15);
      if (WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v15))
        goto LABEL_17;
    }
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_24:
    v15[0] = *(_QWORD *)(v3 + 64);
    v5 = 1;
    v16 = 1;
    v11[0] = 0;
    v12 = -1;
  }
LABEL_17:
  if (v16 != -1)
    ((void (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_6[v16])(&v14, v15);
  if (v12 != -1)
    ((void (*)(_QWORD *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_6[v12])(v15, v11);
  return v3;
}

BOOL WebCore::containsOffset(uint64_t a1, unsigned int a2, int a3)
{
  void *v6;
  unsigned int v7;
  _BOOL8 v8;
  WTF *v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  unsigned int v19[4];
  int v20;
  WTF *v21;
  unsigned int *v22;
  _QWORD v23[2];
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  WebCore::InlineIterator::firstTextBoxInLogicalOrderFor((WebCore::InlineIterator *)a1, (uint64_t)v19);
  if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v19) & 1) != 0)
  {
LABEL_22:
    v8 = 0;
    goto LABEL_23;
  }
  while (1)
  {
    if (v20 == -1)
      goto LABEL_55;
    v23[0] = &v22;
    if ((((uint64_t (*)(_QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v20])(v23, v19) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19645C038);
    }
    if (v20 == -1)
      goto LABEL_55;
    v23[0] = &v22;
    if (((unsigned int (*)(_QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7TextBox5startEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v20])(v23, v19) > a2)goto LABEL_22;
    if (v20 == -1)
      goto LABEL_55;
    v23[0] = &v22;
    if ((((uint64_t (*)(_QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v20])(v23, v19) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19645C058);
    }
    if (v20 == -1)
LABEL_55:
      std::__throw_bad_variant_access[abi:sn180100]();
    v23[0] = &v22;
    v7 = ((uint64_t (*)(_QWORD *, unsigned int *))off_1E3437278[v20])(v23, v19);
    if (v7 >= a2)
    {
      if (v7 != a2)
        break;
      if (a3)
      {
        if (v20 == -1)
          goto LABEL_55;
        v23[0] = &v22;
        if ((((uint64_t (*)(_QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v20])(v23, v19) & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19645C0CCLL);
        }
        if (v20 == -1)
          goto LABEL_55;
        v23[0] = &v22;
        if ((((uint64_t (*)(_QWORD *, unsigned int *))off_1E34372F8[v20])(v23, v19) & 1) == 0)
          break;
      }
    }
    WebCore::InlineIterator::nextTextBoxInLogicalOrder(v19, &v21, v23);
    if (v20 != -1)
    {
      if (v24 == -1)
      {
        ((void (*)(unsigned int **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_6[v20])(&v22, v19);
        v20 = -1;
      }
      else
      {
LABEL_12:
        v22 = v19;
        ((void (*)(unsigned int **, unsigned int *, _QWORD *))off_1E3437388[v24])(&v22, v19, v23);
      }
      if (v24 != -1)
        ((void (*)(unsigned int **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_6[v24])(&v22, v23);
      goto LABEL_15;
    }
    if (v24 != -1)
      goto LABEL_12;
LABEL_15:
    if (WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v19))
      goto LABEL_22;
  }
  v8 = 1;
  if (a2 && a3)
  {
    if ((*(_WORD *)(a1 + 118) & 0x80) != 0
      || (v15 = *(_QWORD *)(a1 + 104)) == 0
      || (v16 = *(_DWORD *)(v15 + 16), (v16 & 4) != 0))
    {
      v17 = a2 - 1;
    }
    else
    {
      WTF::CachedTextBreakIterator::CachedTextBreakIterator((uint64_t)v23, *(WTF::StringImpl **)(v15 + 8), *(unsigned int *)(v15 + 4) | ((unint64_t)((v16 >> 2) & 1) << 32), 0, 0, 0x100000000, MEMORY[0x1E0CBF2F8], 1);
      v18 = WTF::CachedTextBreakIterator::preceding((WTF::CachedTextBreakIterator *)v23, a2);
      if ((v18 & 0xFF00000000) != 0)
        v17 = v18;
      else
        v17 = a2 - 1;
      WTF::CachedTextBreakIterator::~CachedTextBreakIterator((WTF::CachedTextBreakIterator *)v23);
    }
    v8 = WebCore::RenderText::nextOffset((WebCore::RenderText *)a1, v17) == a2;
  }
LABEL_23:
  v9 = v21;
  v21 = 0;
  if (v9)
  {
    v10 = *((unsigned int *)v9 + 3);
    v11 = *(unsigned int **)v9;
    if ((_DWORD)v10)
    {
      v12 = 24 * v10;
      do
      {
        v13 = v11[4];
        if ((_DWORD)v13 != -1)
          ((void (*)(_QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_6[v13])(v23, v11);
        v11[4] = -1;
        v11 += 6;
        v12 -= 24;
      }
      while (v12);
      v11 = *(unsigned int **)v9;
    }
    if (v11)
    {
      *(_QWORD *)v9 = 0;
      *((_DWORD *)v9 + 2) = 0;
      WTF::fastFree((WTF *)v11, v6);
    }
    WTF::fastFree(v9, v6);
  }
  if (v20 != -1)
    ((void (*)(_QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_6[v20])(v23, v19);
  return v8;
}

uint64_t WebCore::RenderText::hasRenderedText(WebCore::RenderText *this, WebCore::RenderObject *a2)
{
  WebCore::LayoutIntegration::LineLayout *v3;
  int v4;
  int v5;
  int v6;
  _BOOL8 v7;
  WebCore::RenderText *v9;
  int v10;
  _BYTE v11[16];
  int v12;
  char v13;
  char *v14;
  _QWORD v15[2];
  int v16;

  v3 = (WebCore::LayoutIntegration::LineLayout *)WebCore::LayoutIntegration::LineLayout::containing(this, a2);
  if (v3)
  {
    WebCore::LayoutIntegration::LineLayout::textBoxesFor(v3, this, (uint64_t)v15);
    v4 = v16;
    v11[0] = 0;
    v12 = -1;
    if (v16 == -1)
      goto LABEL_5;
  }
  else
  {
    v15[0] = *((_QWORD *)this + 8);
    v4 = 1;
    v16 = 1;
    v11[0] = 0;
    v12 = -1;
  }
  ((void (*)(char **, _BYTE *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v4])(&v14, v11, v15);
  v12 = v4;
  if (v16 != -1)
    ((void (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v16])(&v14, v15);
LABEL_5:
  LOBYTE(v15[0]) = 0;
  v16 = -1;
  v5 = v12;
  if (v12 != -1)
  {
    ((void (*)(char **, _QWORD *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_2[v12])(&v14, v15, v11);
    v16 = v5;
  }
  if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v15) & 1) != 0)
  {
    v7 = 0;
LABEL_13:
    if (v16 != -1)
      ((void (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_6[v16])(&v14, v15);
    if (v12 != -1)
      ((void (*)(_QWORD *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_6[v12])(v15, v11);
    return v7;
  }
  else
  {
    while (v16 != -1)
    {
      v14 = &v13;
      if ((((uint64_t (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v16])(&v14, v15) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19645C298);
      }
      if (v16 == -1)
        break;
      v14 = &v13;
      v6 = ((uint64_t (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7TextBox6lengthEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v16])(&v14, v15);
      v7 = v6 != 0;
      if (!v6)
      {
        WebCore::InlineIterator::TextBoxIterator::traverseNextTextBox((WebCore::InlineIterator::TextBoxIterator *)v15);
        if (!WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v15))
          continue;
      }
      goto LABEL_13;
    }
    v9 = (WebCore::RenderText *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::RenderText::previousOffset(v9, v10);
  }
}

uint64_t WebCore::RenderText::previousOffset(WebCore::RenderText *this, int a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD v8[12];

  v8[11] = *MEMORY[0x1E0C80C00];
  if ((*((_WORD *)this + 59) & 0x80) != 0)
    return (a2 - 1);
  v3 = *((_QWORD *)this + 13);
  if (!v3)
    return (a2 - 1);
  v4 = *(_DWORD *)(v3 + 16);
  if ((v4 & 4) != 0)
    return (a2 - 1);
  WTF::CachedTextBreakIterator::CachedTextBreakIterator((uint64_t)v8, *(WTF::StringImpl **)(v3 + 8), *(unsigned int *)(v3 + 4) | ((unint64_t)((v4 >> 2) & 1) << 32), 0, 0, 0x100000000, MEMORY[0x1E0CBF2F8], 1);
  v7 = WTF::CachedTextBreakIterator::preceding((WTF::CachedTextBreakIterator *)v8, a2);
  if ((v7 & 0xFF00000000) != 0)
    v5 = v7;
  else
    v5 = (a2 - 1);
  WTF::CachedTextBreakIterator::~CachedTextBreakIterator((WTF::CachedTextBreakIterator *)v8);
  return v5;
}

uint64_t WTF::CachedTextBreakIterator::preceding(WTF::CachedTextBreakIterator *this, int a2)
{
  uint64_t v2;
  WebCore::RenderText *v4;
  int v5;
  int v6;
  int *v7;
  int **v8;

  if (*((_BYTE *)this + 80))
  {
    v6 = a2;
    v7 = &v6;
    v2 = *((unsigned int *)this + 12);
    if ((_DWORD)v2 != -1)
    {
      v8 = &v7;
      return ((uint64_t (*)(int ***, char *))off_1E3437398[v2])(&v8, (char *)this + 8);
    }
  }
  else
  {
    __break(1u);
  }
  v4 = (WebCore::RenderText *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::RenderText::previousOffsetForBackwardDeletion(v4, v5);
}

uint64_t WebCore::RenderText::previousOffsetForBackwardDeletion(WebCore::RenderText *this, int a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  int *v10;
  int **v11;
  _BYTE v12[8];
  uint64_t v13;
  int v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)this + 13);
  if (v3)
  {
    v4 = *(WTF::StringImpl **)(v3 + 8);
    v5 = *(unsigned int *)(v3 + 4) | ((unint64_t)((*(_DWORD *)(v3 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v4 = 0;
    v5 = 0x100000000;
  }
  WTF::CachedTextBreakIterator::CachedTextBreakIterator((uint64_t)v12, v4, v5, 0, 0, 0x200000000, MEMORY[0x1E0CBF2F8], 1);
  if (!v15)
  {
    __break(1u);
LABEL_11:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  v9 = a2;
  v10 = &v9;
  if (v14 == -1)
    goto LABEL_11;
  v11 = &v10;
  v6 = ((uint64_t (*)(int ***, uint64_t *))off_1E3437398[v14])(&v11, &v13);
  if ((v6 & 0xFF00000000) != 0)
    v7 = v6;
  else
    v7 = 0;
  WTF::CachedTextBreakIterator::~CachedTextBreakIterator((WTF::CachedTextBreakIterator *)v12);
  return v7;
}

uint64_t WebCore::RenderText::nextOffset(WebCore::RenderText *this, int a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD v8[12];

  v8[11] = *MEMORY[0x1E0C80C00];
  if ((*((_WORD *)this + 59) & 0x80) != 0)
    return (a2 + 1);
  v3 = *((_QWORD *)this + 13);
  if (!v3)
    return (a2 + 1);
  v4 = *(_DWORD *)(v3 + 16);
  if ((v4 & 4) != 0)
    return (a2 + 1);
  WTF::CachedTextBreakIterator::CachedTextBreakIterator((uint64_t)v8, *(WTF::StringImpl **)(v3 + 8), *(unsigned int *)(v3 + 4) | ((unint64_t)((v4 >> 2) & 1) << 32), 0, 0, 0x100000000, MEMORY[0x1E0CBF2F8], 1);
  v7 = WTF::CachedTextBreakIterator::following((WTF::CachedTextBreakIterator *)v8, a2);
  if ((v7 & 0xFF00000000) != 0)
    v5 = v7;
  else
    v5 = (a2 + 1);
  WTF::CachedTextBreakIterator::~CachedTextBreakIterator((WTF::CachedTextBreakIterator *)v8);
  return v5;
}

uint64_t WTF::CachedTextBreakIterator::following(WTF::CachedTextBreakIterator *this, int a2)
{
  uint64_t v2;
  WebCore::RenderText *v4;
  unsigned int v5;
  int v6;
  int *v7;
  int **v8;

  if (*((_BYTE *)this + 80))
  {
    v6 = a2;
    v7 = &v6;
    v2 = *((unsigned int *)this + 12);
    if ((_DWORD)v2 != -1)
    {
      v8 = &v7;
      return ((uint64_t (*)(int ***, char *))off_1E34373A8[v2])(&v8, (char *)this + 8);
    }
  }
  else
  {
    __break(1u);
  }
  v4 = (WebCore::RenderText *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::RenderText::momentarilyRevealLastTypedCharacter(v4, v5);
}

uint64_t WebCore::RenderText::momentarilyRevealLastTypedCharacter(uint64_t this, int a2)
{
  uint64_t v3;
  WebCore::TimerBase *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t StatusReg;
  unsigned int *v8;
  unsigned int v9;
  WTF *v10;
  void *v11;
  double v12;
  double v13;
  _BYTE v14[8];
  uint64_t v15;

  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 32) + 8) + 104) + 228) & 0xC) != 0)
  {
    v3 = this;
    *(_WORD *)(this + 118) |= 0x2000u;
    {
      WebCore::secureTextTimers(void)::map = 0;
      *(_QWORD *)&dword_1EE2F93A0 = 0;
    }
    v4 = WTF::WeakHashMap<WebCore::RenderText,std::unique_ptr<WebCore::SecureTextTimer>,WTF::SingleThreadWeakPtrImpl>::add<decltype(nullptr)>((uint64_t)&WebCore::secureTextTimers(void)::map, (_QWORD *)this, (uint64_t)v14);
    v5 = v15;
    v6 = *(_QWORD *)(v15 + 8);
    if (!v6)
    {
      v6 = WTF::fastMalloc((WTF *)0x40);
      *(_QWORD *)v6 = off_1E3407128;
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      *(_OWORD *)(v6 + 8) = 0u;
      *(_OWORD *)(v6 + 24) = 0u;
      v8 = *(unsigned int **)(StatusReg + 736);
      if (!v8)
        v8 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
      *(_QWORD *)v6 = off_1E3437220;
      *(_QWORD *)(v6 + 40) = v8;
      *(_QWORD *)(v6 + 48) = v3;
      *(_DWORD *)(v6 + 56) = 0;
      v4 = *(WebCore::TimerBase **)(v5 + 8);
      *(_QWORD *)(v5 + 8) = v6;
      if (v4)
      {
        WebCore::TimerBase::~TimerBase(v4);
        v4 = (WebCore::TimerBase *)WTF::fastFree(v10, v11);
        v6 = *(_QWORD *)(v5 + 8);
      }
    }
    *(_DWORD *)(v6 + 56) = a2;
    v12 = *(double *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 48) + 24) + 8) + 40)
                                                                                            + 8)
                                                                                + 528)
                                                                    + 8)
                                                        + 24)
                                            + 8)
                                + 112)
                    + 512);
    *(_QWORD *)(v6 + 24) = 0;
    WTF::MonotonicTime::now(v4);
    return WebCore::TimerBase::setNextFireTime(v6, v12 + v13);
  }
  return this;
}

WebCore::TimerBase *WTF::WeakHashMap<WebCore::RenderText,std::unique_ptr<WebCore::SecureTextTimer>,WTF::SingleThreadWeakPtrImpl>::add<decltype(nullptr)>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  int v11;
  uint64_t v12;
  char v13;
  int v14;
  WTF **v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int i;
  unsigned int v21;
  WebCore::TimerBase **v22;
  WebCore::TimerBase *result;
  uint64_t v24;
  uint64_t v25;
  char v26;
  WTF *v27;
  void *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  unsigned int v35;
  WTF *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WebCore::TimerBase **v40;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v6 + 1;
  if (v6 > v7)
    WTF::WeakHashMap<WebCore::RenderText,std::unique_ptr<WebCore::SecureTextTimer>,WTF::SingleThreadWeakPtrImpl>::removeNullReferences((uint64_t *)a1, a2);
  v8 = a2[1];
  if (!v8)
  {
    v8 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v8 = 1;
    *(_QWORD *)(v8 + 8) = a2;
    v36 = (WTF *)a2[1];
    a2[1] = v8;
    if (v36)
    {
      if (*(_DWORD *)v36 == 1)
      {
        WTF::fastFree(v36, a2);
        v8 = a2[1];
      }
      else
      {
        --*(_DWORD *)v36;
      }
    }
  }
  v9 = *(_DWORD *)v8;
  *(_DWORD *)v8 += 2;
  v10 = __CFADD__(v9, 1);
  v11 = v9 + 1;
  if (v10)
    WTF::fastFree((WTF *)v8, a2);
  else
    *(_DWORD *)v8 = v11;
  v12 = *(_QWORD *)a1;
  if (*(_QWORD *)a1
    || (WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::SecureTextTimer>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::SecureTextTimer>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::SecureTextTimer>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<std::unique_ptr<WebCore::SecureTextTimer>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash((uint64_t *)a1, 8u, 0), (v12 = *(_QWORD *)a1) != 0))
  {
    v13 = 0;
    v14 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v14 = 0;
    v13 = 1;
  }
  v15 = 0;
  v16 = (~(v8 << 32) + v8) ^ ((unint64_t)(~(v8 << 32) + v8) >> 22);
  v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
  v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
  v19 = (v18 >> 31) ^ v18;
  for (i = 1; ; ++i)
  {
    v21 = v19 & v14;
    v22 = (WebCore::TimerBase **)(v12 + 16 * v21);
    result = *v22;
    if (*v22 != (WebCore::TimerBase *)-1)
      break;
    v15 = (WTF **)(v12 + 16 * v21);
LABEL_15:
    v19 = i + v21;
  }
  if (!result)
  {
    if (v15)
    {
      *v15 = 0;
      v15[1] = 0;
      --*(_DWORD *)(*(_QWORD *)a1 - 16);
      *v15 = (WTF *)v8;
    }
    else
    {
      *v22 = (WebCore::TimerBase *)v8;
      v15 = (WTF **)(v12 + 16 * v21);
    }
    result = v15[1];
    v15[1] = 0;
    if (result)
    {
      WebCore::TimerBase::~TimerBase(result);
      result = (WebCore::TimerBase *)WTF::fastFree(v27, v28);
    }
    v29 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
      v30 = *(_DWORD *)(v29 - 12) + 1;
    else
      v30 = 1;
    *(_DWORD *)(v29 - 12) = v30;
    v31 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
      v32 = *(_DWORD *)(v31 - 12);
    else
      v32 = 0;
    v33 = (*(_DWORD *)(v31 - 16) + v32);
    v34 = *(unsigned int *)(v31 - 4);
    if (v34 > 0x400)
    {
      if (v34 <= 2 * v33)
        goto LABEL_35;
    }
    else if (3 * v34 <= 4 * v33)
    {
      if (!(_DWORD)v34)
      {
        v35 = 8;
LABEL_38:
        result = (WebCore::TimerBase *)WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::SecureTextTimer>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::SecureTextTimer>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::SecureTextTimer>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<std::unique_ptr<WebCore::SecureTextTimer>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash((uint64_t *)a1, v35, v15);
        v15 = (WTF **)result;
        v31 = *(_QWORD *)a1;
        if (*(_QWORD *)a1)
          v34 = *(unsigned int *)(v31 - 4);
        else
          v34 = 0;
        goto LABEL_45;
      }
LABEL_35:
      v35 = (_DWORD)v34 << (6 * *(_DWORD *)(v31 - 12) >= (2 * v34));
      goto LABEL_38;
    }
LABEL_45:
    v25 = v31 + 16 * v34;
    v26 = 1;
    v22 = v15;
    goto LABEL_46;
  }
  if (result != (WebCore::TimerBase *)v8)
    goto LABEL_15;
  if ((v13 & 1) != 0)
    v24 = 0;
  else
    v24 = *(unsigned int *)(v12 - 4);
  v25 = v12 + 16 * v24;
  if (*(_DWORD *)v8 == 1)
  {
    result = (WebCore::TimerBase *)WTF::fastFree((WTF *)v8, a2);
    v26 = 0;
  }
  else
  {
    v26 = 0;
    --*(_DWORD *)v8;
  }
LABEL_46:
  v37 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v38 = *(unsigned int *)(v37 - 4);
    v39 = v37 + 16 * v38;
  }
  else
  {
    v39 = 0;
    v38 = 0;
  }
  if (v22 != (WebCore::TimerBase **)v39)
  {
    while (!*((_QWORD *)*v22 + 1))
    {
      v40 = v22 + 2;
      v22 = (WebCore::TimerBase **)v25;
      if (v40 != (WebCore::TimerBase **)v25)
      {
        v22 = v40;
        while ((unint64_t)*v22 + 1 <= 1)
        {
          v22 += 2;
          if (v22 == (WebCore::TimerBase **)v25)
          {
            v22 = (WebCore::TimerBase **)v25;
            break;
          }
        }
      }
      if (v22 == (WebCore::TimerBase **)v39)
      {
        v22 = (WebCore::TimerBase **)v39;
        break;
      }
    }
  }
  *(_QWORD *)a3 = a1;
  *(_QWORD *)(a3 + 8) = v22;
  *(_QWORD *)(a3 + 16) = v25;
  *(_QWORD *)(a3 + 24) = v39;
  *(_QWORD *)(a3 + 32) = v37 + 16 * v38;
  *(_DWORD *)(a3 + 40) = 0;
  *(_BYTE *)(a3 + 48) = v26;
  return result;
}

WTF *WebCore::RenderText::inlineWrapperForDisplayContents(WebCore::RenderText *this)
{
  WTF *result;
  void *v2;
  uint64_t v3;
  WTF *v4;

  if ((*((_WORD *)this + 59) & 0x1000) == 0)
    return 0;
  {
    WebCore::inlineWrapperForDisplayContentsMap(void)::map = 0;
  }
  WTF::HashMap<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>,WTF::WeakPtr<WebCore::RenderInline,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakPtr<WebCore::RenderInline,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::get<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>((uint64_t)&WebCore::inlineWrapperForDisplayContentsMap(void)::map, (uint64_t)this, &v4);
  result = v4;
  if (v4)
  {
    v3 = *((_QWORD *)v4 + 1);
    v4 = 0;
    if (*(_DWORD *)result == 1)
      WTF::fastFree(result, v2);
    else
      --*(_DWORD *)result;
    return (WTF *)v3;
  }
  return result;
}

uint64_t WTF::HashMap<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>,WTF::WeakPtr<WebCore::RenderInline,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakPtr<WebCore::RenderInline,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::get<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  int v6;
  int i;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;

  v4 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v6 = *(_DWORD *)(v4 - 8);
    result = WTF::PtrHashBase<WTF::AtomString *,false>::hash(a2);
    for (i = 0; ; result = (i + v8))
    {
      v8 = result & v6;
      v9 = *(_QWORD *)(v4 + 16 * v8);
      if (v9 != -1)
      {
        if (!v9)
          goto LABEL_7;
        if (*(_QWORD *)(v9 + 8) == a2)
          break;
      }
      ++i;
    }
    v10 = *(_DWORD **)(v4 + 16 * v8 + 8);
    if (v10)
      ++*v10;
  }
  else
  {
LABEL_7:
    v10 = 0;
  }
  *a3 = v10;
  return result;
}

uint64_t WTF::HashMap<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>,WTF::WeakPtr<WebCore::RenderInline,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakPtr<WebCore::RenderInline,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::add<WebCore::RenderInline*&>@<X0>(uint64_t *a1@<X0>, WTF **a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t result;
  WTF **v12;
  int i;
  unsigned int v14;
  WTF **v15;
  WTF *v16;
  void *v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  WTF *v29;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>,WTF::WeakPtr<WebCore::RenderInline,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>,WTF::WeakPtr<WebCore::RenderInline,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>,WTF::WeakPtr<WebCore::RenderInline,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakPtr<WebCore::RenderInline,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>>::rehash(a1, 8u, 0), (v8 = *a1) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = *((_QWORD *)*a2 + 1);
  result = WTF::PtrHashBase<WTF::AtomString *,false>::hash(v10);
  v12 = 0;
  for (i = 1; ; ++i)
  {
    v14 = result & v9;
    v15 = (WTF **)(v8 + 16 * (result & v9));
    v16 = *v15;
    if (*v15 == (WTF *)-1)
    {
      v12 = (WTF **)(v8 + 16 * v14);
      goto LABEL_10;
    }
    if (!v16)
      break;
    if (*((_QWORD *)v16 + 1) == v10)
    {
      v22 = 0;
      v23 = v8 + 16 * *(unsigned int *)(v8 - 4);
      goto LABEL_35;
    }
LABEL_10:
    result = i + v14;
  }
  if (v12)
  {
    *v12 = 0;
    v12[1] = 0;
    --*(_DWORD *)(*a1 - 16);
    v15 = v12;
  }
  WTF::GenericHashTraits<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>::assignToEmpty<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>(v15, a2);
  v18 = *a3;
  if (!v18)
  {
    result = 0;
    goto LABEL_15;
  }
  result = *(_QWORD *)(v18 + 8);
  if (result)
    goto LABEL_38;
  result = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 8) = v18;
  v29 = *(WTF **)(v18 + 8);
  *(_QWORD *)(v18 + 8) = result;
  if (!v29)
    goto LABEL_38;
  if (*(_DWORD *)v29 != 1)
  {
    --*(_DWORD *)v29;
    goto LABEL_38;
  }
  WTF::fastFree(v29, v17);
  result = *(_QWORD *)(v18 + 8);
  if (result)
LABEL_38:
    ++*(_DWORD *)result;
LABEL_15:
  v19 = v15[1];
  v15[1] = (WTF *)result;
  if (v19)
  {
    if (*(_DWORD *)v19 == 1)
      result = WTF::fastFree(v19, v17);
    else
      --*(_DWORD *)v19;
  }
  v20 = *a1;
  if (*a1)
    v21 = *(_DWORD *)(v20 - 12) + 1;
  else
    v21 = 1;
  *(_DWORD *)(v20 - 12) = v21;
  v24 = *a1;
  if (*a1)
    v25 = *(_DWORD *)(v24 - 12);
  else
    v25 = 0;
  v26 = (*(_DWORD *)(v24 - 16) + v25);
  v27 = *(unsigned int *)(v24 - 4);
  if (v27 > 0x400)
  {
    if (v27 <= 2 * v26)
    {
LABEL_27:
      v28 = (_DWORD)v27 << (6 * *(_DWORD *)(v24 - 12) >= (2 * v27));
      goto LABEL_30;
    }
  }
  else if (3 * v27 <= 4 * v26)
  {
    if ((_DWORD)v27)
      goto LABEL_27;
    v28 = 8;
LABEL_30:
    result = (uint64_t)WTF::HashTable<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>,WTF::WeakPtr<WebCore::RenderInline,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>,WTF::WeakPtr<WebCore::RenderInline,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>,WTF::WeakPtr<WebCore::RenderInline,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakPtr<WebCore::RenderInline,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>>::rehash(a1, v28, (uint64_t **)v15);
    v15 = (WTF **)result;
    v24 = *a1;
    if (*a1)
      v27 = *(unsigned int *)(v24 - 4);
    else
      v27 = 0;
  }
  v23 = v24 + 16 * v27;
  v22 = 1;
LABEL_35:
  *(_QWORD *)a4 = v15;
  *(_QWORD *)(a4 + 8) = v23;
  *(_BYTE *)(a4 + 16) = v22;
  return result;
}

uint64_t WebCore::RenderText::emphasisMarkExistsAndIsAbove(WebCore::RenderText const&,WebCore::RenderStyle const&)::$_0::operator()(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (result)
  {
    v1 = *(_QWORD *)(result + 8);
    if (v1)
    {
      while ((*(_BYTE *)(v1 + 20) & 1) == 0)
      {
        if ((*(_QWORD *)(v1 + 96) & 0x1FLL) == 0x18)
        {
          v3 = *(unsigned int *)(v1 + 47) | ((unint64_t)*(unsigned __int8 *)(v1 + 51) << 32);
          if (v3)
          {
            v4 = *(_QWORD *)(v3 + 8);
            if (v4)
            {
              v5 = v4;
              if ((*(_BYTE *)(v4 + 45) & 2) != 0)
                v5 = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8);
              if ((*(_QWORD *)(v5 + 96) & 0x1FLL) == 0x19)
              {
                if ((*(_BYTE *)(v4 + 52) & 7) == 1)
                  return v4;
                else
                  return 0;
              }
            }
          }
          return 0;
        }
        v2 = *(_QWORD *)(v1 + 32);
        if (v2)
        {
          v1 = *(_QWORD *)(v2 + 8);
          if (v1)
            continue;
        }
        return 0;
      }
    }
    return 0;
  }
  return result;
}

uint64_t WebCore::RenderTextControl::textFormControlElement(WebCore::RenderTextControl *this)
{
  _WORD *v1;
  uint64_t result;

  v1 = *(_WORD **)(*((_QWORD *)this + 3) + 8);
  if ((v1[14] & 8) != 0
    && ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v1 + 872))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) != 0)
  {
    return (uint64_t)v1;
  }
  result = 96;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::RenderTextControl::innerTextElement(WebCore::RenderTextControl *this, _WORD *a2)
{
  uint64_t result;

  if ((a2[14] & 8) != 0 && ((*(uint64_t (**)(_WORD *))(*(_QWORD *)a2 + 872))(a2) & 1) != 0)
    return (*(uint64_t (**)(_WORD *))(*(_QWORD *)a2 + 1408))(a2);
  result = 96;
  __break(0xC471u);
  return result;
}

unsigned int *WebCore::RenderTextControl::styleDidChange(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  char v4;
  _WORD *v6;
  unsigned int *result;
  uint64_t v8;
  WebCore::HTMLTextFormControlElement *v9;
  void *v10;
  _WORD *v11;
  _WORD *v12;
  const WTF::StringImpl *v13;
  void *v14;
  const WebCore::Element *v15;
  char v16;
  void *v17;
  _QWORD v18[8];
  _QWORD v19[8];
  uint64_t v20;

  v4 = (char)a2;
  WebCore::RenderBlockFlow::styleDidChange(a1, a2, a3);
  v6 = *(_WORD **)(*(_QWORD *)(a1 + 24) + 8);
  if ((v6[14] & 8) == 0
    || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v6 + 872))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8)) & 1) == 0)
  {
    __break(0xC471u);
    goto LABEL_31;
  }
  result = (unsigned int *)(*(_QWORD *(**)(uint64_t *__return_ptr, _WORD *))(*(_QWORD *)v6 + 1408))(&v20, v6);
  if (!v20)
    return result;
  v8 = *(_QWORD *)(v20 + 64) & 0xFFFFFFFFFFFFLL;
  if (v8)
  {
    if ((*(_BYTE *)((*(_QWORD *)(v20 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19645D150);
    }
    if (*(_BYTE *)((*(_QWORD *)(v20 + 64) & 0xFFFFFFFFFFFFLL) + 0x2E) != 42)
    {
      __break(0xC471u);
      JUMPOUT(0x19645D170);
    }
    if (a3)
    {
      v11 = *(_WORD **)(*(_QWORD *)(a1 + 24) + 8);
      if ((v11[14] & 8) == 0
        || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v11 + 872))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8)) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19645D1A4);
      }
      (*(void (**)(_QWORD *__return_ptr, _WORD *, uint64_t))(*(_QWORD *)v11 + 1424))(v19, v11, a1 + 80);
      v12 = *(_WORD **)(*(_QWORD *)(a1 + 24) + 8);
      if ((v12[14] & 8) != 0
        && ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v12 + 872))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8)) & 1) != 0)
      {
        (*(void (**)(_QWORD *__return_ptr, _WORD *, uint64_t))(*(_QWORD *)v12 + 1424))(v18, v12, a3);
        WebCore::RenderStyle::operator==((uint64_t)v19, (uint64_t)v18, v13);
        if ((v16 & 1) != 0)
        {
          if ((v4 & 0xFE) == 2)
            WebCore::RenderObject::repaint(v8, 0);
        }
        else
        {
          WebCore::RenderElement::setStyle(v8, (WebCore::Style *)v19, 0, v15);
        }
        WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)v18, v14);
        WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)v19, v17);
        goto LABEL_8;
      }
      __break(0xC471u);
LABEL_31:
      JUMPOUT(0x19645D110);
    }
  }
LABEL_8:
  v9 = *(WebCore::HTMLTextFormControlElement **)(*(_QWORD *)(a1 + 24) + 8);
  if ((*((_WORD *)v9 + 14) & 8) == 0
    || ((*(uint64_t (**)(WebCore::HTMLTextFormControlElement *))(*(_QWORD *)v9 + 872))(v9) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19645D130);
  }
  WebCore::HTMLTextFormControlElement::updatePlaceholderVisibility(v9);
  result = (unsigned int *)v20;
  v20 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, v10);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

uint64_t WebCore::RenderTextControl::scrollbarThickness(WebCore::RenderTextControl *this)
{
  uint64_t *v1;
  char *v3;

  {
    if (BYTE1(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings))
    {
      v1 = &WebCore::ScrollbarTheme::theme(void)::mockTheme;
        return (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(*v1 + 40))(v1, *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 586), 1);
      WebCore::ScrollbarTheme::theme(void)::mockTheme = (uint64_t)off_1E341CAA8;
LABEL_9:
      *v3 = 1;
      return (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(*v1 + 40))(v1, *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 586), 1);
    }
  }
  else
  {
    WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
    *(_OWORD *)&byte_1ECE90A50 = 0u;
    qword_1ECE90A60 = 0;
    LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
    *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
    *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
    byte_1ECE90A56 = 1;
    *(_DWORD *)&algn_1ECE90A57 = 0;
    unk_1ECE90A5B = 0;
    byte_1ECE90A5D = 1;
    byte_1ECE90A5F = 1;
  }
  v1 = &WebCore::ScrollbarTheme::nativeTheme(void)::theme;
  {
    WebCore::ScrollbarTheme::nativeTheme(void)::theme = (uint64_t)off_1E3354BF8;
    goto LABEL_9;
  }
  return (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(*v1 + 40))(v1, *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 586), 1);
}

unsigned int *WebCore::RenderTextControl::computeLogicalHeight@<X0>(_QWORD *a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _WORD *v5;
  uint64_t v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  int v33;
  int v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  void *v39;
  unsigned int *result;
  int v41;
  unsigned int v42;
  unsigned int v43;
  WebCore::Node *v44;

  v5 = *(_WORD **)(a1[3] + 8);
  if ((v5[14] & 8) == 0
    || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v5 + 872))(*(_QWORD *)(a1[3] + 8)) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19645D540);
  }
  (*(void (**)(WebCore::Node **__return_ptr, _WORD *))(*(_QWORD *)v5 + 1408))(&v44, v5);
  if (v44)
  {
    if (*(_BYTE *)(*(_QWORD *)(a1[11] + 40) + 643))
    {
      v35 = a2;
    }
    else
    {
      v9 = *((_QWORD *)v44 + 8) & 0xFFFFFFFFFFFFLL;
      if (v9 && (*(_BYTE *)((*((_QWORD *)v44 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) != 0)
      {
        v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 1048))(v9);
        v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 960))(v9);
        if (__OFADD__(v10, v11))
          v12 = (v10 >> 31) + 0x7FFFFFFF;
        else
          v12 = v10 + v11;
        v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 1056))(v9);
        v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 968))(v9);
        v15 = v13 + v14;
        if (__OFADD__(v13, v14))
          v15 = (v13 >> 31) + 0x7FFFFFFF;
        v16 = __OFADD__(v12, v15);
        v17 = v12 + v15;
        if (v16)
          v18 = (v12 >> 31) + 0x7FFFFFFF;
        else
          v18 = v17;
        v19 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 1112))(v9, 0);
        v20 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 1120))(v9, 0);
        v21 = v19 + v20;
        if (__OFADD__(v19, v20))
          v21 = (v19 >> 31) + 0x7FFFFFFF;
        v16 = __OFADD__(v18, v21);
        v22 = v18 + v21;
        if (v16)
          v23 = (v18 >> 31) + 0x7FFFFFFF;
        else
          v23 = v22;
        v24 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v9 + 1152))(v9, 1, 0, 1);
        v25 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*a1 + 1960))(a1, v24, v23);
        v26 = 57344;
        if ((*((_DWORD *)a1 + 5) & 0x1000) == 0)
          v26 = 7168;
        v27 = 24576;
        if ((*((_DWORD *)a1 + 5) & 0x1000) == 0)
          v27 = 3072;
        if ((v26 & a1[12]) == v27)
        {
          v41 = WebCore::RenderTextControl::scrollbarThickness((WebCore::RenderTextControl *)a1);
          v42 = v41 << 6;
          if (v41 < -33554432)
            v42 = 0x80000000;
          if (v41 > 0x1FFFFFF)
            v42 = 0x7FFFFFFF;
          v16 = __OFADD__(v25, v42);
          v43 = v25 + v42;
          if (v16)
            v25 = (v25 >> 31) + 0x7FFFFFFF;
          else
            v25 = v43;
        }
        WebCore::RenderBox::cacheIntrinsicContentLogicalHeightForFlexItem((unint64_t)a1, v25);
        v28 = (*(uint64_t (**)(_QWORD *))(*a1 + 1048))(a1);
        v29 = (*(uint64_t (**)(_QWORD *))(*a1 + 960))(a1);
        v30 = v28 + v29;
        if (__OFADD__(v28, v29))
          v30 = (v28 >> 31) + 0x7FFFFFFF;
        v31 = (*(uint64_t (**)(_QWORD *))(*a1 + 1056))(a1);
        v32 = (*(uint64_t (**)(_QWORD *))(*a1 + 968))(a1);
        v33 = v31 + v32;
        if (__OFADD__(v31, v32))
          v33 = (v31 >> 31) + 0x7FFFFFFF;
        v16 = __OFADD__(v30, v33);
        v34 = v30 + v33;
        if (v16)
          v34 = (v30 >> 31) + 0x7FFFFFFF;
        a2 = v25 + v34;
        if (__OFADD__(v25, v34))
          a2 = (v25 >> 31) + 0x7FFFFFFF;
      }
      v35 = a2;
    }
    v36 = a3;
    v37 = a4;
    v38 = (unint64_t)a1;
  }
  else
  {
    v37 = a4;
    v38 = (unint64_t)a1;
    v35 = 0;
    v36 = 0;
  }
  WebCore::RenderBox::computeLogicalHeight(v38, v35, v36, v37);
  result = (unsigned int *)v44;
  v44 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, v39);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

unsigned int *WebCore::RenderTextControl::hitInnerTextElement(WebCore::RenderTextControl *this, WebCore::HitTestResult *a2, const WebCore::LayoutPoint *a3, const WebCore::LayoutPoint *a4)
{
  _WORD *v4;
  unsigned int *result;
  void *v10;
  WebCore::Node *v11;
  uint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  unsigned int v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;
  unint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  WebCore::Node **v38;
  WebCore::Node *v39;
  WebCore::Node *v40;
  unsigned int **v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WebCore::Node *v46;

  v4 = *(_WORD **)(*((_QWORD *)this + 3) + 8);
  if ((v4[14] & 8) == 0
    || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v4 + 872))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19645D88CLL);
  }
  result = (unsigned int *)(*(_QWORD *(**)(WebCore::Node **__return_ptr, _WORD *))(*(_QWORD *)v4 + 1408))(&v46, v4);
  v11 = v46;
  v12 = *((_QWORD *)v46 + 8) & 0xFFFFFFFFFFFFLL;
  if (!v12)
  {
    v46 = 0;
LABEL_54:
    if (*((_DWORD *)v11 + 6) == 2)
    {
      if ((*((_WORD *)v11 + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef(v11, v10);
    }
    else
    {
      *((_DWORD *)v11 + 6) -= 2;
    }
    return result;
  }
  if ((*(_BYTE *)((*((_QWORD *)v46 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19645D8ACLL);
  }
  if (*(_BYTE *)((*((_QWORD *)v46 + 8) & 0xFFFFFFFFFFFFLL) + 0x2E) != 42)
  {
    __break(0xC471u);
    JUMPOUT(0x19645D8CCLL);
  }
  v14 = *((_DWORD *)this + 38);
  v13 = *((_DWORD *)this + 39);
  v15 = *((_DWORD *)a4 + 1);
  v16 = (*(_DWORD *)a4 >> 31) + 0x7FFFFFFF;
  if (!__OFADD__(*(_DWORD *)a4, v14))
    v16 = *(_DWORD *)a4 + v14;
  v17 = __OFADD__(v15, v13);
  v18 = v15 + v13;
  if (v17)
    v18 = (v15 >> 31) + 0x7FFFFFFF;
  if ((*(_BYTE *)((*((_QWORD *)v46 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) == 0)
    v12 = 0;
  v21 = v12 + 152;
  v19 = *(_DWORD *)(v12 + 152);
  v20 = *(_DWORD *)(v21 + 4);
  v17 = __OFADD__(v16, v19);
  v22 = v16 + v19;
  if (v17)
    v22 = (v16 >> 31) + 0x7FFFFFFF;
  v17 = __OFADD__(v18, v20);
  v23 = v18 + v20;
  if (v17)
    v23 = (v18 >> 31) + 0x7FFFFFFF;
  v17 = __OFSUB__(*(_DWORD *)a3, v22);
  v24 = *(_DWORD *)a3 - v22;
  if (v17)
    v24 = (*(_DWORD *)a3 >> 31) + 0x7FFFFFFF;
  v25 = *((_DWORD *)a3 + 1);
  v17 = __OFSUB__(v25, v23);
  v26 = v25 - v23;
  if (v17)
    v26 = (v25 >> 31) + 0x7FFFFFFF;
  if ((*((_BYTE *)this + 22) & 1) == 0
    || ((*((_BYTE *)this + 45) & 2) != 0
      ? (v43 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 8) + 96))
      : (v43 = *((_QWORD *)this + 12)),
        v27 = v43 & 0x1C00,
        v27 == 2048))
  {
    v27 = 0;
LABEL_23:
    LODWORD(v28) = 0;
    goto LABEL_24;
  }
  if (!v27)
    goto LABEL_23;
  v27 = *(_QWORD *)(*((_QWORD *)this + 18) + 264);
  if (!v27)
    goto LABEL_23;
  v28 = *(_QWORD *)(v27 + 104);
  v27 = v28 & 0xFFFFFFFF00000000;
LABEL_24:
  v29 = HIDWORD(v27);
  v30 = (_DWORD)v28 << 6;
  v31 = v27 >> 26;
  if ((int)v28 < -33554432)
    v30 = 0x80000000;
  if ((int)v28 > 0x1FFFFFF)
    v30 = 0x7FFFFFFF;
  if ((int)v29 < -33554432)
    LODWORD(v31) = 0x80000000;
  if ((int)v29 > 0x1FFFFFF)
    LODWORD(v31) = 0x7FFFFFFF;
  v17 = __OFADD__(v24, v30);
  v32 = v24 + v30;
  v33 = (v24 >> 31) + 0x7FFFFFFF;
  if (v17)
    v34 = v33;
  else
    v34 = v32;
  v17 = __OFADD__(v26, (_DWORD)v31);
  v35 = v26 + v31;
  v36 = (v26 >> 31) + 0x7FFFFFFF;
  if (v17)
    v37 = v36;
  else
    v37 = v35;
  if ((~*((unsigned __int16 *)v46 + 14) & 0x408) != 0
    || !(*(unsigned int (**)(WebCore::Node *))(*(_QWORD *)v46 + 368))(v46))
  {
    v38 = (WebCore::Node **)((char *)a2 + 72);
LABEL_41:
    *((_DWORD *)v11 + 6) += 2;
    goto LABEL_42;
  }
  v44 = *((_QWORD *)v11 + 14);
  if (v44)
  {
    v11 = *(WebCore::Node **)(v44 + 8);
    v38 = (WebCore::Node **)((char *)a2 + 72);
    if (v11)
      goto LABEL_41;
  }
  else
  {
    v11 = 0;
    v38 = (WebCore::Node **)((char *)a2 + 72);
  }
LABEL_42:
  v39 = *v38;
  *v38 = v11;
  if (v39)
  {
    if (*((_DWORD *)v39 + 6) == 2)
    {
      if ((*((_WORD *)v39 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v39, v10);
    }
    else
    {
      *((_DWORD *)v39 + 6) -= 2;
    }
  }
  v40 = v46;
  if (!v46)
    goto LABEL_78;
  if ((~*((unsigned __int16 *)v46 + 14) & 0x408) != 0
    || !(*(unsigned int (**)(WebCore::Node *))(*(_QWORD *)v46 + 368))(v46))
  {
    v41 = (unsigned int **)((char *)a2 + 80);
LABEL_49:
    *((_DWORD *)v40 + 6) += 2;
    goto LABEL_50;
  }
  v45 = *((_QWORD *)v40 + 14);
  if (!v45)
  {
    v40 = 0;
LABEL_78:
    v41 = (unsigned int **)((char *)a2 + 80);
    goto LABEL_50;
  }
  v40 = *(WebCore::Node **)(v45 + 8);
  v41 = (unsigned int **)((char *)a2 + 80);
  if (v40)
    goto LABEL_49;
LABEL_50:
  v42 = v34 | (v37 << 32);
  result = *v41;
  *v41 = (unsigned int *)v40;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)result, v10);
    }
    else
    {
      result[6] -= 2;
    }
  }
  *((_QWORD *)a2 + 12) = v42;
  v11 = v46;
  v46 = 0;
  if (v11)
    goto LABEL_54;
  return result;
}

uint64_t WebCore::RenderTextControl::getAverageCharWidth(WebCore::RenderTextControl *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t result;
  WebCore::FontCascade *v14;
  void *v15;
  _BYTE v16[8];
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  __int16 v19;

  v2 = *((_QWORD *)this + 14);
  v3 = *(_QWORD *)(v2 + 216);
  if (*(_DWORD *)(v3 + 4))
  {
    v7 = *(_QWORD *)(v3 + 8);
    v6 = (uint64_t *)(v3 + 8);
    v5 = v7;
    if (!v7
      || !*(_DWORD *)(v5 + 4)
      || (v14 = (WebCore::FontCascade *)(v2 + 32),
          WebCore::FontCascade::primaryFont((WebCore::FontCascade *)(v2 + 32), a2),
          (CTFontIsSystemUIFont() & 1) != 0)
      || (WTF::SortedArraySet<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)0> [34]>::contains<WTF::AtomString>((uint64_t *)&WebCore::FontCascade::hasValidAverageCharWidth(void)const::set, v6) & 1) != 0)
    {
      v8 = (char *)this + 80;
      v19 = 48;
      WTF::String::String();
      v9 = *((_QWORD *)this + 14) + 32;
      if (v18)
        v10 = *((unsigned int *)v18 + 1) | ((unint64_t)((*((_DWORD *)v18 + 4) >> 2) & 1) << 32);
      else
        v10 = 0x100000000;
      WebCore::RenderBlock::constructTextRun(v10, (uint64_t)v8, 4, 0, (uint64_t)v16);
      WebCore::FontCascade::width(v9, (uint64_t)v16);
      v12 = v17;
      v17 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v11);
        else
          *(_DWORD *)v12 -= 2;
      }
      result = (uint64_t)v18;
      v18 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return WTF::StringImpl::destroy((WTF::StringImpl *)result, v11);
        else
          *(_DWORD *)result -= 2;
      }
    }
    else
    {
      return WebCore::FontCascade::primaryFont(v14, v15);
    }
  }
  else
  {
    result = 146;
    __break(0xC471u);
  }
  return result;
}

void WebCore::RenderTextControl::computeIntrinsicLogicalWidths(WebCore::RenderTextControl *this, WebCore::LayoutUnit *a2, WebCore::LayoutUnit *a3)
{
  _WORD *v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  int v11;
  int v12;
  unint64_t v13;
  void *v14;
  WebCore::Node *v15;
  uint64_t v16;
  WebCore::Node *v17;
  unsigned int v18;
  int v19;
  int v20;
  BOOL v21;
  int v22;
  int v23;
  WebCore::Node *v24;
  WebCore::Node *v25;

  if (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 643))
  {
    WebCore::RenderBlockFlow::computeIntrinsicLogicalWidths(this, a2, a3);
  }
  else if (WebCore::RenderElement::shouldApplySizeOrInlineSizeContainment(this))
  {
    v13 = WebCore::RenderBox::explicitIntrinsicInnerLogicalWidth(this);
    if ((v13 & 0xFF00000000) != 0)
    {
      *(_DWORD *)a2 = v13;
      *(_DWORD *)a3 = v13;
    }
  }
  else
  {
    (*(void (**)(WebCore::RenderTextControl *))(*(_QWORD *)this + 1944))(this);
    *(_DWORD *)a3 = (*(uint64_t (**)(WebCore::RenderTextControl *))(*(_QWORD *)this + 1952))(this);
    v6 = *(_WORD **)(*((_QWORD *)this + 3) + 8);
    if ((v6[14] & 8) == 0
      || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v6 + 872))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19645DBD8);
    }
    (*(void (**)(WebCore::Node **__return_ptr, _WORD *))(*(_QWORD *)v6 + 1408))(&v25, v6);
    if (v25)
    {
      WebCore::RenderTextControl::innerTextElement((WebCore::RenderTextControl *)&v24, *(_WORD **)(*((_QWORD *)this + 3) + 8));
      v15 = v24;
      if ((*((_QWORD *)v24 + 8) & 0xFFFFFFFFFFFFLL) != 0)
      {
        if ((*(_BYTE *)((*((_QWORD *)v24 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) != 0)
          v16 = *((_QWORD *)v24 + 8) & 0xFFFFFFFFFFFFLL;
        else
          v16 = 0;
      }
      else
      {
        v16 = 0;
      }
      v24 = 0;
      if (*((_DWORD *)v15 + 6) == 2)
      {
        if ((*((_WORD *)v15 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v15, v14);
      }
      else
      {
        *((_DWORD *)v15 + 6) -= 2;
      }
      v17 = v25;
      v25 = 0;
      if (v17)
      {
        if (*((_DWORD *)v17 + 6) == 2)
        {
          if ((*((_WORD *)v17 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v17, v14);
        }
        else
        {
          *((_DWORD *)v17 + 6) -= 2;
        }
      }
      if (v16)
      {
        v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 976))(v16);
        v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 984))(v16);
        v20 = v18 + v19;
        if (__OFADD__(v18, v19))
          v20 = (v18 >> 31) + 0x7FFFFFFF;
        v21 = __OFADD__(*(_DWORD *)a3, v20);
        v22 = *(_DWORD *)a3 + v20;
        if (v21)
          v22 = (*(_DWORD *)a3 >> 31) + 0x7FFFFFFF;
        *(_DWORD *)a3 = v22;
      }
    }
    v7 = *(_QWORD *)(*((_QWORD *)this + 11) + 8);
    v8 = (unsigned __int8 *)(v7 + 12);
    v9 = (unsigned __int8 *)(v7 + 4);
    if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
      v10 = v9;
    else
      v10 = v8;
    v11 = v10[4];
    if (v11 != 3)
    {
      if (v11 == 11)
      {
        v23 = WebCore::valueForLength(v10, 0);
        v12 = v23 & ~(v23 >> 31);
      }
      else
      {
        v12 = *(_DWORD *)a3;
      }
      *(_DWORD *)a2 = v12;
    }
  }
}

int *WebCore::RenderTextControl::computePreferredLogicalWidths(WebCore::RenderTextControl *this)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  const WebCore::RenderBox *v6;
  uint64_t v7;
  const WebCore::RenderBox *v8;
  uint64_t v9;
  const WebCore::RenderBox *v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t v20;
  float v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;

  v2 = *((_QWORD *)this + 11);
  if (*(_BYTE *)(*(_QWORD *)(v2 + 40) + 643))
    return WebCore::RenderBlock::computePreferredLogicalWidths(this);
  *((_DWORD *)this + 46) = 0;
  *((_DWORD *)this + 47) = 0;
  v3 = ((*((_DWORD *)this + 31) >> 13) & 6) - 2;
  v4 = *(_QWORD *)(v2 + 8);
  if (v3 <= 3)
  {
    if (*(_BYTE *)(v4 + 16) != 4)
      goto LABEL_4;
    v20 = v4 + 12;
  }
  else
  {
    if (*(_BYTE *)(v4 + 8) != 4)
      goto LABEL_4;
    v20 = v4 + 4;
  }
  if (*(_BYTE *)(v20 + 6))
    v21 = *(float *)v20;
  else
    v21 = (float)*(int *)v20;
  if (v21 >= 0.0)
  {
    v22 = v3 >= 4;
    v23 = v4 + 12;
    v24 = v4 + 4;
    if (v22)
      v25 = v24;
    else
      v25 = v23;
    v26 = WebCore::RenderBox::adjustContentBoxLogicalWidthForBoxSizing(this, v25);
    *((_DWORD *)this + 46) = v26;
    *((_DWORD *)this + 47) = v26;
    goto LABEL_5;
  }
LABEL_4:
  (*(void (**)(WebCore::RenderTextControl *))(*(_QWORD *)this + 1624))(this);
LABEL_5:
  v5 = *(_QWORD *)(*((_QWORD *)this + 11) + 8);
  v6 = (const WebCore::RenderBox *)(v5 + 36);
  v7 = v5 + 44;
  v8 = (const WebCore::RenderBox *)(v5 + 20);
  v9 = v5 + 28;
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
    v10 = v8;
  else
    v10 = v6;
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
    v11 = v9;
  else
    v11 = v7;
  v12 = (*(uint64_t (**)(WebCore::RenderTextControl *))(*(_QWORD *)this + 1064))(this);
  v13 = (*(uint64_t (**)(WebCore::RenderTextControl *))(*(_QWORD *)this + 1072))(this);
  if (__OFADD__(v12, v13))
    v14 = (v12 >> 31) + 0x7FFFFFFF;
  else
    v14 = v12 + v13;
  v15 = (*(uint64_t (**)(WebCore::RenderTextControl *))(*(_QWORD *)this + 976))(this);
  if (__OFADD__(v14, v15))
    v16 = (v14 >> 31) + 0x7FFFFFFF;
  else
    v16 = v14 + v15;
  v17 = (*(uint64_t (**)(WebCore::RenderTextControl *))(*(_QWORD *)this + 984))(this);
  if (__OFADD__(v16, v17))
    v18 = (v16 >> 31) + 0x7FFFFFFF;
  else
    v18 = v16 + v17;
  WebCore::RenderBox::computePreferredLogicalWidths((uint64_t)this, v10, v11, v18);
  return (int *)WebCore::RenderObject::setPreferredLogicalWidthsDirty((uint64_t)this, 0, 1);
}

uint64_t WebCore::RenderTextControl::addFocusRingRects(uint64_t result, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  v3 = *(_QWORD *)(result + 160);
  if ((int)v3 >= 1 && SHIDWORD(v3) >= 1)
  {
    *(_QWORD *)&v9 = *a3;
    *((_QWORD *)&v9 + 1) = v3;
    v6 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v6 == *(_DWORD *)(a2 + 8))
    {
      result = WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v6 + 1, (unint64_t)&v9);
      v6 = *(unsigned int *)(a2 + 12);
      v7 = *(_QWORD *)a2;
      v8 = *(_OWORD *)result;
    }
    else
    {
      v7 = *(_QWORD *)a2;
      v8 = v9;
    }
    *(_OWORD *)(v7 + 16 * v6) = v8;
    ++*(_DWORD *)(a2 + 12);
  }
  return result;
}

uint64_t WebCore::RenderTextControl::layoutExcludedChildren(WebCore::RenderTextControl *this, int a2)
{
  _WORD *v4;
  uint64_t result;
  uint64_t v6;
  int v7;

  WebCore::RenderBlockFlow::layoutExcludedChildren(this, a2);
  v4 = *(_WORD **)(*((_QWORD *)this + 3) + 8);
  if ((v4[14] & 8) == 0 || ((*(uint64_t (**)(_WORD *))(*(_QWORD *)v4 + 872))(v4) & 1) == 0)
    goto LABEL_10;
  result = (*(uint64_t (**)(_WORD *))(*(_QWORD *)v4 + 1376))(v4);
  if (!result)
    return result;
  v6 = *(_QWORD *)(result + 64) & 0xFFFFFFFFFFFFLL;
  if (!v6)
    return result;
  if ((*(_BYTE *)((*(_QWORD *)(result + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
LABEL_10:
    __break(0xC471u);
    JUMPOUT(0x19645DFE8);
  }
  v7 = *(_DWORD *)((*(_QWORD *)(result + 64) & 0xFFFFFFFFFFFFLL) + 0x14);
  *(_DWORD *)((*(_QWORD *)(result + 64) & 0xFFFFFFFFFFFFLL) + 0x14) = v7 | 0x400;
  if (a2)
  {
    if ((v7 & 0x20) == 0)
      *(_DWORD *)(v6 + 20) = v7 | 0x420;
  }
  return result;
}

uint64_t WebCore::RenderTextControl::canScroll(WebCore::RenderTextControl *this)
{
  _WORD *v1;
  void *v2;
  WebCore::Node *v3;
  uint64_t v4;
  WebCore::Node *v6;

  v1 = *(_WORD **)(*((_QWORD *)this + 3) + 8);
  if ((v1[14] & 8) == 0
    || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v1 + 872))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0)
  {
    __break(0xC471u);
    goto LABEL_18;
  }
  (*(void (**)(WebCore::Node **__return_ptr, _WORD *))(*(_QWORD *)v1 + 1408))(&v6, v1);
  v3 = v6;
  if (!v6)
    return 0;
  if ((*((_QWORD *)v6 + 8) & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)((*((_QWORD *)v6 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19645E108);
    }
    if (*(_BYTE *)((*((_QWORD *)v6 + 8) & 0xFFFFFFFFFFFFLL) + 0x2E) == 42)
    {
      v4 = *(_BYTE *)((*((_QWORD *)v6 + 8) & 0xFFFFFFFFFFFFLL) + 0x16) & 1;
      goto LABEL_8;
    }
    __break(0xC471u);
LABEL_18:
    JUMPOUT(0x19645E0E8);
  }
  v4 = 0;
LABEL_8:
  v6 = 0;
  if (*((_DWORD *)v3 + 6) == 2)
  {
    if ((*((_WORD *)v3 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v3, v2);
  }
  else
  {
    *((_DWORD *)v3 + 6) -= 2;
  }
  return v4;
}

uint64_t WebCore::RenderTextControl::innerLineHeight(WebCore::RenderTextControl *this)
{
  _WORD *v1;
  WebCore::RenderTextControl *v2;
  void *v3;
  void *v4;
  float v5;
  WebCore::Node *v6;
  WebCore::Node *v8;

  v1 = *(_WORD **)(*((_QWORD *)this + 3) + 8);
  if ((v1[14] & 8) == 0
    || (v2 = this,
        ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v1 + 872))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0))
  {
    __break(0xC471u);
    goto LABEL_16;
  }
  (*(void (**)(WebCore::Node **__return_ptr, _WORD *))(*(_QWORD *)v1 + 1408))(&v8, v1);
  if (v8 && (*((_QWORD *)v8 + 8) & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)((*((_QWORD *)v8 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19645E234);
    }
    v2 = (WebCore::RenderTextControl *)(*((_QWORD *)v8 + 8) & 0xFFFFFFFFFFFFLL);
    if (*((_BYTE *)v2 + 46) != 42)
    {
      __break(0xC471u);
LABEL_16:
      JUMPOUT(0x19645E214);
    }
  }
  v5 = WebCore::RenderStyle::computedLineHeight((WebCore::RenderTextControl *)((char *)v2 + 80), v3);
  v6 = v8;
  v8 = 0;
  if (v6)
  {
    if (*((_DWORD *)v6 + 6) == 2)
    {
      if ((*((_WORD *)v6 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v6, v4);
    }
    else
    {
      *((_DWORD *)v6 + 6) -= 2;
    }
  }
  return (int)v5;
}

void WebCore::RenderTextControlInnerContainer::~RenderTextControlInnerContainer(WebCore::RenderTextControlInnerContainer *this, void *a2)
{
  uint64_t v2;
  void *v3;

  WebCore::RenderFlexibleBox::~RenderFlexibleBox(this, a2);
  if (*(_DWORD *)(v2 + 16))
  {
    *(_QWORD *)(v2 + 400) = 0;
    *(_OWORD *)(v2 + 368) = 0u;
    *(_OWORD *)(v2 + 384) = 0u;
    *(_OWORD *)(v2 + 336) = 0u;
    *(_OWORD *)(v2 + 352) = 0u;
    *(_OWORD *)(v2 + 304) = 0u;
    *(_OWORD *)(v2 + 320) = 0u;
    *(_OWORD *)(v2 + 272) = 0u;
    *(_OWORD *)(v2 + 288) = 0u;
    *(_OWORD *)(v2 + 240) = 0u;
    *(_OWORD *)(v2 + 256) = 0u;
    *(_OWORD *)(v2 + 208) = 0u;
    *(_OWORD *)(v2 + 224) = 0u;
    *(_OWORD *)(v2 + 176) = 0u;
    *(_OWORD *)(v2 + 192) = 0u;
    *(_OWORD *)(v2 + 144) = 0u;
    *(_OWORD *)(v2 + 160) = 0u;
    *(_OWORD *)(v2 + 112) = 0u;
    *(_OWORD *)(v2 + 128) = 0u;
    *(_OWORD *)(v2 + 80) = 0u;
    *(_OWORD *)(v2 + 96) = 0u;
    *(_OWORD *)(v2 + 48) = 0u;
    *(_OWORD *)(v2 + 64) = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_OWORD *)v2 = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate((bmalloc::api *)v2, v3);
  }
}

void WebCore::RenderTextControlMultiLine::~RenderTextControlMultiLine(WebCore::RenderTextControlMultiLine *this, void *a2)
{
  uint64_t v2;
  void *v3;

  WebCore::RenderBlockFlow::~RenderBlockFlow(this, a2);
  if (*(_DWORD *)(v2 + 16))
  {
    *(_QWORD *)(v2 + 240) = 0;
    *(_OWORD *)(v2 + 208) = 0u;
    *(_OWORD *)(v2 + 224) = 0u;
    *(_OWORD *)(v2 + 176) = 0u;
    *(_OWORD *)(v2 + 192) = 0u;
    *(_OWORD *)(v2 + 144) = 0u;
    *(_OWORD *)(v2 + 160) = 0u;
    *(_OWORD *)(v2 + 112) = 0u;
    *(_OWORD *)(v2 + 128) = 0u;
    *(_OWORD *)(v2 + 80) = 0u;
    *(_OWORD *)(v2 + 96) = 0u;
    *(_OWORD *)(v2 + 48) = 0u;
    *(_OWORD *)(v2 + 64) = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_OWORD *)v2 = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate((bmalloc::api *)v2, v3);
  }
}

uint64_t WebCore::RenderTextControlMultiLine::nodeAtPoint(uint64_t a1, int *a2, WebCore::HitTestResult *a3, float32x4_t *a4, const WebCore::LayoutPoint *a5, uint64_t a6)
{
  uint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  BOOL v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _WORD *v20;
  WebCore::Node *v21;
  void *v22;
  WebCore::Node *v23;
  uint64_t v25;
  WebCore::RenderLayerScrollableArea *v26;
  unsigned __int32 v27;
  int v28;
  int v29;
  WebCore::Node *v30;

  v10 = WebCore::RenderBlock::nodeAtPoint(a1, a2, a3, a4, a5, a6);
  if ((_DWORD)v10)
  {
    v12 = *(_DWORD *)(a1 + 152);
    v11 = *(_DWORD *)(a1 + 156);
    v13 = *((_DWORD *)a5 + 1);
    v14 = __OFADD__(*(_DWORD *)a5, v12);
    v15 = *(_DWORD *)a5 + v12;
    if (v14)
      v15 = (*(_DWORD *)a5 >> 31) + 0x7FFFFFFF;
    v14 = __OFADD__(v13, v11);
    v16 = v13 + v11;
    if (v14)
      v16 = (v13 >> 31) + 0x7FFFFFFF;
    if ((*(_BYTE *)(a1 + 22) & 1) == 0)
      goto LABEL_11;
    v17 = *(_QWORD *)(a1 + 96);
    if (((v17 >> 10) & 7) - 3 >= 2 && ((unsigned __int16)v17 >> 13) - 3 > 1)
      goto LABEL_11;
    v25 = *(_QWORD *)(a1 + 144);
    if (!v25)
      goto LABEL_11;
    v26 = *(WebCore::RenderLayerScrollableArea **)(v25 + 264);
    if (!v26)
      goto LABEL_11;
    v27 = a4->u32[1];
    v14 = __OFSUB__(a4->i32[0], v15);
    v28 = a4->i32[0] - v15;
    if (v14)
      v28 = ((unsigned __int32)a4->i32[0] >> 31) + 0x7FFFFFFF;
    v14 = __OFSUB__(v27, v16);
    v29 = v27 - v16;
    if (v14)
      v29 = (v27 >> 31) + 0x7FFFFFFF;
    v30 = (WebCore::Node *)((((int)(v28 - (((v27 >> 31) + 0x7FFFFFFF) & 0xFFFFFFC0) + 32) >> 6) + v28 / 64) | ((unint64_t)(((int)(v29 - (((v27 >> 31) + 0x7FFFFFFF) & 0xFFFFFFC0) + 32) >> 6) + v29 / 64) << 32));
    if ((WebCore::RenderLayerScrollableArea::hitTestOverflowControls(v26, a3, (const WebCore::IntPoint *)&v30) & 1) == 0)
    {
LABEL_11:
      v18 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
      if ((*(_WORD *)(v18 + 28) & 8) == 0
        || (v19 = *((_QWORD *)a3 + 9),
            ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v18 + 872))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8)) & 1) == 0))
      {
        __break(0xC471u);
        JUMPOUT(0x19645E550);
      }
      if (*(_QWORD *)(*(_QWORD *)(v18 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::textareaTag + 24))
      {
        if (v19 == v18)
          goto LABEL_21;
        v20 = *(_WORD **)(*(_QWORD *)(a1 + 24) + 8);
        if ((v20[14] & 8) != 0)
        {
          v21 = (WebCore::Node *)*((_QWORD *)a3 + 9);
          if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v20 + 872))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8)) & 1) != 0)
          {
            (*(void (**)(WebCore::Node **__return_ptr, _WORD *))(*(_QWORD *)v20 + 1408))(&v30, v20);
            v23 = v30;
            v30 = 0;
            if (v23)
            {
              if (*((_DWORD *)v23 + 6) == 2)
              {
                if ((*((_WORD *)v23 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v23, v22);
              }
              else
              {
                *((_DWORD *)v23 + 6) -= 2;
              }
            }
            if (v23 != v21)
              return v10;
LABEL_21:
            WebCore::RenderTextControl::hitInnerTextElement((WebCore::RenderTextControl *)a1, a3, (const WebCore::LayoutPoint *)a4, a5);
            return v10;
          }
        }
      }
      __break(0xC471u);
      JUMPOUT(0x19645E530);
    }
  }
  return v10;
}

uint64_t WebCore::RenderTextControlMultiLine::preferredContentLogicalWidth(WebCore::RenderTextControlMultiLine *this, float a2)
{
  uint64_t v2;
  float v5;
  char v6;
  uint64_t *v7;
  double v8;
  char *v10;

  v2 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v2 + 28) & 8) == 0
    || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v2 + 872))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19645E6ECLL);
  }
  if (*(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::textareaTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x19645E6CCLL);
  }
  v5 = ceilf((float)*(unsigned int *)(v2 + 212) * a2);
  v6 = 13;
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
    v6 = 10;
  if (((*((_QWORD *)this + 12) >> v6) & 7) - 3 <= 1)
  {
    {
      if (BYTE1(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings))
      {
        v7 = &WebCore::ScrollbarTheme::theme(void)::mockTheme;
          goto LABEL_10;
        WebCore::ScrollbarTheme::theme(void)::mockTheme = (uint64_t)off_1E341CAA8;
        goto LABEL_21;
      }
    }
    else
    {
      WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
      *(_OWORD *)&byte_1ECE90A50 = 0u;
      qword_1ECE90A60 = 0;
      LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
      *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
      *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
      byte_1ECE90A56 = 1;
      *(_DWORD *)&algn_1ECE90A57 = 0;
      unk_1ECE90A5B = 0;
      byte_1ECE90A5D = 1;
      byte_1ECE90A5F = 1;
    }
    v7 = &WebCore::ScrollbarTheme::nativeTheme(void)::theme;
    {
LABEL_10:
      v5 = v5
         + (float)(*(int (**)(uint64_t *, _QWORD, uint64_t))(*v7 + 40))(v7, *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 586), 1);
      goto LABEL_11;
    }
    WebCore::ScrollbarTheme::nativeTheme(void)::theme = (uint64_t)off_1E3354BF8;
LABEL_21:
    *v10 = 1;
    goto LABEL_10;
  }
LABEL_11:
  v8 = v5 * 64.0;
  if (v8 >= 2147483650.0)
    return 0x7FFFFFFFLL;
  if (v8 <= -2147483650.0)
    return 0x80000000;
  return (int)v8;
}

uint64_t WebCore::RenderTextControlMultiLine::computeControlLogicalHeight(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v3;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  if ((*(_WORD *)(v3 + 28) & 8) == 0
    || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v3 + 872))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8)) & 1) == 0
    || *(_QWORD *)(*(_QWORD *)(v3 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::textareaTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x19645E868);
  }
  v6 = *(_DWORD *)(v3 + 208);
  LODWORD(v7) = v6 << 6;
  if (v6 <= 0x1FFFFFE)
    v7 = v7;
  else
    v7 = 0x7FFFFFFFLL;
  v8 = (int)a2 * v7 / 64;
  if (HIDWORD(v8) != (int)v8 >> 31)
    LODWORD(v8) = (a2 >> 31) + 0x7FFFFFFF;
  if (__OFADD__((_DWORD)v8, a3))
    return (v8 >> 31) + 0x7FFFFFFF;
  else
    return (v8 + a3);
}

uint64_t WebCore::RenderTextControlMultiLine::baselinePosition(uint64_t a1, int a2, uint64_t a3, int a4)
{
  int v4;
  unsigned int v5;
  BOOL v6;
  unsigned int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  int v15;
  unsigned int v16;
  int v17;
  int v18;

  if ((*(_BYTE *)(a1 + 20) & 2) == 0)
    return 0;
  if (a4)
  {
    v4 = *(_DWORD *)(a1 + 160);
    v5 = *(_DWORD *)(a1 + 172);
    v6 = __OFADD__(v5, v4);
    v7 = v5 + v4;
    v8 = (v5 >> 31) + 0x7FFFFFFF;
    if (v6)
      v7 = v8;
    v9 = *(_DWORD *)(a1 + 180);
  }
  else
  {
    v15 = *(_DWORD *)(a1 + 164);
    v16 = *(_DWORD *)(a1 + 168);
    v6 = __OFADD__(v16, v15);
    v7 = v16 + v15;
    v17 = (v16 >> 31) + 0x7FFFFFFF;
    if (v6)
      v7 = v17;
    v9 = *(_DWORD *)(a1 + 176);
  }
  v6 = __OFADD__(v7, v9);
  v10 = v7 + v9;
  v11 = (v7 >> 31) + 0x7FFFFFFF;
  if (!v6)
    v11 = v10;
  v12 = ((int)(v11 - (v10 & 0xFFFFFFC0) + 32) >> 6) + v11 / 64;
  if (a2)
  {
    if (v12 >= 0)
      v18 = v12;
    else
      v18 = v12 + 1;
    v12 -= v18 >> 1;
  }
  v13 = v12 << 6;
  if (v12 < -33554432)
    v13 = 0x80000000;
  if (v12 <= 0x1FFFFFF)
    return v13;
  else
    return 0x7FFFFFFFLL;
}

uint64_t WebCore::RenderTextControlMultiLine::layoutExcludedChildren(WebCore::RenderTextControlMultiLine *this, int a2)
{
  _WORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _WORD *v8;
  uint64_t result;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  BOOL v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  float v26;
  double v27;
  unsigned int v28;
  unsigned __int8 *v29;
  int v30;
  float v31;
  float v32;
  double v33;
  int v34;
  int v35;
  uint64_t v36;
  float v37;
  double v38;
  unsigned int v39;
  unsigned __int8 *v40;
  int v41;
  float v42;
  float v43;
  double v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  float v50;
  float v51;
  uint64_t v52;
  float v53;
  double v54;
  unsigned int v55;
  uint64_t v56;
  float v57;
  double v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  __int16 v63;
  char v64;

  WebCore::RenderBlockFlow::layoutExcludedChildren(this, a2);
  v4 = *(_WORD **)(*((_QWORD *)this + 3) + 8);
  if ((v4[14] & 8) == 0
    || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v4 + 872))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19645EE0CLL);
  }
  v5 = (*(uint64_t (**)(_WORD *))(*(_QWORD *)v4 + 1376))(v4);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFLL;
    if (v6)
    {
      if ((*(_BYTE *)((*(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19645EE4CLL);
      }
      v7 = *(_DWORD *)((*(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFLL) + 0x14);
      *(_DWORD *)((*(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFLL) + 0x14) = v7 | 0x400;
      if (a2 && (v7 & 0x20) == 0)
        *(_DWORD *)(v6 + 20) = v7 | 0x420;
    }
  }
  v8 = *(_WORD **)(*((_QWORD *)this + 3) + 8);
  if ((v8[14] & 8) == 0
    || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v8 + 872))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19645EE2CLL);
  }
  result = (*(uint64_t (**)(_WORD *))(*(_QWORD *)v8 + 1376))(v8);
  if (result)
  {
    v10 = *(_QWORD *)(result + 64) & 0xFFFFFFFFFFFFLL;
    if (v10)
    {
      if ((*(_BYTE *)((*(_QWORD *)(result + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19645EE6CLL);
      }
      if ((*(_BYTE *)((*(_QWORD *)(result + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) != 0)
      {
        ++*(_DWORD *)((*(_QWORD *)(result + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
        v11 = WebCore::RenderBox::contentLogicalWidth(this);
        v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 1064))(v10);
        v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 1072))(v10);
        if (__OFADD__(v12, v13))
          v14 = (v12 >> 31) + 0x7FFFFFFF;
        else
          v14 = v12 + v13;
        v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 976))(v10);
        if (__OFADD__(v14, v15))
          v16 = (v14 >> 31) + 0x7FFFFFFF;
        else
          v16 = v14 + v15;
        v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 984))(v10);
        v18 = v16 + v17;
        if (__OFADD__(v16, v17))
          v18 = (v16 >> 31) + 0x7FFFFFFF;
        v19 = __OFSUB__(v11, v18);
        v20 = v11 - v18;
        if (v19)
          v20 = (v11 >> 31) + 0x7FFFFFFF;
        *(float *)&v62 = (float)v20 * 0.015625;
        v63 = 4;
        v64 = 1;
        v21 = v10 + 80;
        if (((*(_DWORD *)(v10 + 124) >> 13) & 6u) - 2 < 4)
          result = WebCore::RenderStyle::setHeight(v21, (WebCore::Length *)&v62);
        else
          result = WebCore::RenderStyle::setWidth(v21, (WebCore::Length *)&v62);
        if (v63 == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          result = (uint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v62);
        }
        if ((*(_BYTE *)(v10 + 20) & 0xF8) != 0)
        {
          v22 = *(_QWORD *)(v10 + 32);
          if (v22
            && (v23 = *(_QWORD *)(v22 + 8)) != 0
            && (*(_BYTE *)(*(_QWORD *)(v23 + 104) + 239) & 0x18) != 0
            && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 24) + 8)
                                                                         + 40)
                                                             + 8)
                                                 + 1944)
                                     + 248)
                         + 479))
          {
            result = WebCore::RenderElement::clearNeedsLayoutForSkippedContent((WebCore::RenderElement *)v10);
          }
          else
          {
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 688))(v10);
          }
        }
        v24 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
        if ((v24 == 4 || v24 == 2) && (result = WebCore::RenderBlock::intrinsicBorderForFieldset(this), (_DWORD)result))
        {
          v56 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
          v57 = 0.0;
          if ((*(_BYTE *)(v56 + 124) & 0xE) != 0)
          {
            v61 = *(_QWORD *)(v56 + 200);
            if (*(_BYTE *)(v61 + 5) && *(_BYTE *)(v61 + 76) == 4)
            {
              if (*(_BYTE *)(v61 + 78))
                v57 = *(float *)(v61 + 72);
              else
                v57 = (float)*(int *)(v61 + 72);
            }
            else
            {
              v57 = *(float *)(v56 + 120);
            }
          }
          v58 = v57 * 64.0;
          if (v58 >= 2147483650.0)
          {
            v59 = 0x7FFFFFFF;
          }
          else if (v58 <= -2147483650.0)
          {
            v59 = 0x80000000;
          }
          else
          {
            v59 = (int)v58;
          }
          result = WebCore::RenderBlock::intrinsicBorderForFieldset(this);
          v28 = v59 + result;
          if (__OFADD__(v59, (_DWORD)result))
            v28 = (v59 >> 31) + 0x7FFFFFFF;
        }
        else
        {
          v25 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
          v26 = 0.0;
          if ((*(_BYTE *)(v25 + 124) & 0xE) != 0)
          {
            v48 = *(_QWORD *)(v25 + 200);
            if (*(_BYTE *)(v48 + 5) && *(_BYTE *)(v48 + 76) == 4)
            {
              if (*(_BYTE *)(v48 + 78))
                v26 = *(float *)(v48 + 72);
              else
                v26 = (float)*(int *)(v48 + 72);
            }
            else
            {
              v26 = *(float *)(v25 + 120);
            }
          }
          v27 = v26 * 64.0;
          if (v27 >= 2147483650.0)
          {
            v28 = 0x7FFFFFFF;
          }
          else if (v27 <= -2147483650.0)
          {
            v28 = 0x80000000;
          }
          else
          {
            v28 = (int)v27;
          }
        }
        v29 = *(unsigned __int8 **)(*((_QWORD *)this + 11) + 24);
        v30 = v29[100];
        if ((v30 & 0xFFFFFFF7) == 3)
        {
          result = (*(uint64_t (**)(WebCore::RenderTextControlMultiLine *))(*(_QWORD *)this + 1144))(this);
          v30 = v29[100];
          v31 = (float)(int)result * 0.015625;
        }
        else
        {
          v31 = 0.0;
        }
        switch(v30)
        {
          case 4:
            v32 = *((float *)v29 + 24);
            if (!v29[102])
              v32 = (float)SLODWORD(v32);
            break;
          case 3:
            v50 = *((float *)v29 + 24);
            if (!v29[102])
              v50 = (float)SLODWORD(v50);
            v32 = (float)(v31 * v50) / 100.0;
            break;
          case 11:
            result = WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v29 + 96), v31);
            break;
          default:
            v34 = 0;
            goto LABEL_48;
        }
        v33 = v32 * 64.0;
        if (v33 >= 2147483650.0)
        {
          v34 = 0x7FFFFFFF;
        }
        else if (v33 <= -2147483650.0)
        {
          v34 = 0x80000000;
        }
        else
        {
          v34 = (int)v33;
        }
LABEL_48:
        v19 = __OFADD__(v28, v34);
        v35 = v28 + v34;
        if (v19)
          v35 = (v28 >> 31) + 0x7FFFFFFF;
        *(_DWORD *)(v10 + 152) = v35;
        if (((unsigned __int16)*((_DWORD *)this + 31) >> 13) - 1 >= 5
          && (*(_WORD *)((_BYTE *)this + 69) & 0x400) != 0
          && (result = WTF::HashMap<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBlockRareData>>,WTF::HashTableTraits>::get<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>((uint64_t *)WebCore::gRareDataMap, (uint64_t)this)) != 0&& *(_DWORD *)(result + 8))
        {
          v52 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
          v53 = 0.0;
          if ((*(_BYTE *)(v52 + 172) & 0xE) != 0)
          {
            v60 = *(_QWORD *)(v52 + 200);
            if (*(_BYTE *)(v60 + 5) && *(_BYTE *)(v60 + 52) == 4)
            {
              if (*(_BYTE *)(v60 + 54))
                v53 = *(float *)(v60 + 48);
              else
                v53 = (float)*(int *)(v60 + 48);
            }
            else
            {
              v53 = *(float *)(v52 + 168);
            }
          }
          v54 = v53 * 64.0;
          if (v54 >= 2147483650.0)
          {
            v55 = 0x7FFFFFFF;
          }
          else if (v54 <= -2147483650.0)
          {
            v55 = 0x80000000;
          }
          else
          {
            v55 = (int)v54;
          }
          result = WebCore::RenderBlock::intrinsicBorderForFieldset(this);
          v39 = v55 + result;
          if (__OFADD__(v55, (_DWORD)result))
            v39 = (v55 >> 31) + 0x7FFFFFFF;
        }
        else
        {
          v36 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
          v37 = 0.0;
          if ((*(_BYTE *)(v36 + 172) & 0xE) != 0)
          {
            v49 = *(_QWORD *)(v36 + 200);
            if (*(_BYTE *)(v49 + 5) && *(_BYTE *)(v49 + 52) == 4)
            {
              if (*(_BYTE *)(v49 + 54))
                v37 = *(float *)(v49 + 48);
              else
                v37 = (float)*(int *)(v49 + 48);
            }
            else
            {
              v37 = *(float *)(v36 + 168);
            }
          }
          v38 = v37 * 64.0;
          if (v38 >= 2147483650.0)
          {
            v39 = 0x7FFFFFFF;
          }
          else if (v38 <= -2147483650.0)
          {
            v39 = 0x80000000;
          }
          else
          {
            v39 = (int)v38;
          }
        }
        v40 = *(unsigned __int8 **)(*((_QWORD *)this + 11) + 24);
        v41 = v40[76];
        if ((v41 & 0xFFFFFFF7) == 3)
        {
          result = (*(uint64_t (**)(WebCore::RenderTextControlMultiLine *))(*(_QWORD *)this + 1144))(this);
          v41 = v40[76];
          v42 = (float)(int)result * 0.015625;
        }
        else
        {
          v42 = 0.0;
        }
        switch(v41)
        {
          case 4:
            v43 = *((float *)v40 + 18);
            if (!v40[78])
              v43 = (float)SLODWORD(v43);
            break;
          case 3:
            v51 = *((float *)v40 + 18);
            if (!v40[78])
              v51 = (float)SLODWORD(v51);
            v43 = (float)(v42 * v51) / 100.0;
            break;
          case 11:
            result = WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v40 + 72), v42);
            break;
          default:
            v45 = 0;
LABEL_64:
            v19 = __OFADD__(v39, v45);
            v46 = v39 + v45;
            if (v19)
              v46 = (v39 >> 31) + 0x7FFFFFFF;
            *(_DWORD *)(v10 + 156) = v46;
            v47 = *(_DWORD *)(v10 + 16);
            if (!v47)
            {
              __break(0xC471u);
              JUMPOUT(0x19645EE8CLL);
            }
            *(_DWORD *)(v10 + 16) = v47 - 1;
            return result;
        }
        v44 = v43 * 64.0;
        if (v44 >= 2147483650.0)
        {
          v45 = 0x7FFFFFFF;
        }
        else if (v44 <= -2147483650.0)
        {
          v45 = 0x80000000;
        }
        else
        {
          v45 = (int)v44;
        }
        goto LABEL_64;
      }
    }
  }
  return result;
}

void WebCore::RenderTextControlSingleLine::~RenderTextControlSingleLine(WebCore::RenderTextControlSingleLine *this, void *a2)
{
  uint64_t v2;
  void *v3;

  WebCore::RenderBlockFlow::~RenderBlockFlow(this, a2);
  if (*(_DWORD *)(v2 + 16))
  {
    *(_QWORD *)(v2 + 240) = 0;
    *(_OWORD *)(v2 + 208) = 0u;
    *(_OWORD *)(v2 + 224) = 0u;
    *(_OWORD *)(v2 + 176) = 0u;
    *(_OWORD *)(v2 + 192) = 0u;
    *(_OWORD *)(v2 + 144) = 0u;
    *(_OWORD *)(v2 + 160) = 0u;
    *(_OWORD *)(v2 + 112) = 0u;
    *(_OWORD *)(v2 + 128) = 0u;
    *(_OWORD *)(v2 + 80) = 0u;
    *(_OWORD *)(v2 + 96) = 0u;
    *(_OWORD *)(v2 + 48) = 0u;
    *(_OWORD *)(v2 + 64) = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_OWORD *)v2 = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate((bmalloc::api *)v2, v3);
  }
}

uint64_t WebCore::RenderTextControlSingleLine::layout(WebCore::RenderTextControlSingleLine *this)
{
  _WORD *v1;
  _WORD *v3;
  void *v4;
  WebCore::Node *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const WebCore::RenderObject *v15;
  _QWORD *v16;
  char *v17;
  const WebCore::RenderObject *v18;
  const WebCore::RenderObject *v19;
  char *i;
  unsigned int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  int v27;
  BOOL v28;
  int v29;
  int v30;
  char *v31;
  int v32;
  int *v33;
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  int *v47;
  int *v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  int v54;
  uint64_t v55;
  unsigned int v56;
  int *v57;
  unsigned int *v58;
  _DWORD *v59;
  int v60;
  unsigned int v61;
  int v62;
  int *v63;
  int v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  int v68;
  int v69;
  char v70;
  char v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  int v75;
  int *v76;
  int v77;
  uint64_t v78;
  int v79;
  int v80;
  uint64_t v81;
  _DWORD *v82;
  BOOL v83;
  _BOOL4 v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int *v87;
  unsigned int v88;
  uint64_t v89;
  unsigned int v90;
  int v91;
  unsigned int v92;
  int v93;
  unsigned int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  uint64_t v103;
  int v104;
  const WebCore::RenderBlockFlow *v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  int v109;
  int v110;
  int v111;
  uint64_t *v112;
  int v113;
  int v114;
  unsigned int v115;
  uint64_t *v116;
  unsigned int v117;
  unsigned int *v118;
  int *v119;
  int v120;
  int *v121;
  int v122;
  int v123;
  int v124;
  unsigned int v125;
  unsigned int *v126;
  int v127;
  uint64_t v128;
  unsigned int v129;
  int v130;
  unsigned int v131;
  uint64_t v132;
  uint64_t result;
  WebCore::RenderBox *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  float v146;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  double v153;
  uint64_t v154;
  int v155;
  int v156;
  int v157;
  char v158;
  WebCore::Node *v159[2];
  char v160;
  __int128 v161;
  uint64_t v162;

  v1 = *(_WORD **)(*((_QWORD *)this + 3) + 8);
  if ((v1[14] & 8) == 0
    || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v1 + 872))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19645FEE4);
  }
  (*(void (**)(__int128 *__return_ptr, _WORD *))(*(_QWORD *)v1 + 1408))(&v161, v1);
  if ((_QWORD)v161)
  {
    v3 = *(_WORD **)(*((_QWORD *)this + 3) + 8);
    if ((v3[14] & 8) == 0
      || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v3 + 872))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19645FFE4);
    }
    (*(void (**)(WebCore::Node **__return_ptr, _WORD *))(*(_QWORD *)v3 + 1408))(v159, v3);
    v5 = v159[0];
    v6 = *((_QWORD *)v159[0] + 8) & 0xFFFFFFFFFFFFLL;
    if (v6)
    {
      if ((*(_BYTE *)((*((_QWORD *)v159[0] + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x196460044);
      }
      if (*(_BYTE *)((*((_QWORD *)v159[0] + 8) & 0xFFFFFFFFFFFFLL) + 0x2E) != 42)
      {
        __break(0xC471u);
        JUMPOUT(0x196460064);
      }
    }
    v159[0] = 0;
    if (*((_DWORD *)v5 + 6) == 2)
    {
      if ((*((_WORD *)v5 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v5, v4);
    }
    else
    {
      *((_DWORD *)v5 + 6) -= 2;
    }
    v7 = v161;
    *(_QWORD *)&v161 = 0;
    if (v7)
    {
      if (*(_DWORD *)(v7 + 24) == 2)
      {
        if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v7, v4);
      }
      else
      {
        *(_DWORD *)(v7 + 24) -= 2;
      }
    }
  }
  else
  {
    v6 = 0;
  }
  v8 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v8 + 28) & 8) == 0
    || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v8 + 872))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19645FF04);
  }
  v9 = &WebCore::HTMLNames::inputTag;
  if (*(_QWORD *)(*(_QWORD *)(v8 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x19645FE64);
  }
  if (!(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v8 + 240) + 536))(*(_QWORD *)(v8 + 240)))
    goto LABEL_26;
  v10 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v10 + 28) & 8) == 0
    || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v10 + 872))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196460004);
  }
  if (*(_QWORD *)(*(_QWORD *)(v10 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x19645FF84);
  }
  v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v10 + 240) + 536))(*(_QWORD *)(v10 + 240));
  if ((*(_QWORD *)(v11 + 64) & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)((*(_QWORD *)(v11 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) != 0)
      v12 = *(_QWORD *)(v11 + 64) & 0xFFFFFFFFFFFFLL;
    else
      v12 = 0;
  }
  else
  {
LABEL_26:
    v12 = 0;
  }
  v13 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v13 + 28) & 8) == 0
    || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v13 + 872))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19645FF24);
  }
  if (*(_QWORD *)(*(_QWORD *)(v13 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x19645FE84);
  }
  v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v13 + 240) + 528))(*(_QWORD *)(v13 + 240));
  v16 = (_QWORD *)v14;
  if (v14 && (*(_QWORD *)(v14 + 64) & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)((*(_QWORD *)(v14 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) != 0)
      v17 = (char *)(*(_QWORD *)(v14 + 64) & 0xFFFFFFFFFFFFLL);
    else
      v17 = 0;
  }
  else
  {
    v17 = 0;
  }
  WebCore::resetOverriddenHeight(v6, this, v15);
  WebCore::resetOverriddenHeight(v12, this, v18);
  WebCore::resetOverriddenHeight((uint64_t)v17, this, v19);
  if (v6)
  {
    v156 = *(_DWORD *)(v6 + 164);
    v157 = *(_DWORD *)(v6 + 160);
  }
  else
  {
    v156 = 0;
    v157 = 0;
  }
  WebCore::RenderBlockFlow::layoutBlock((uint64_t)this, 0, 0);
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
    goto LABEL_413;
  for (i = (char *)this + 164; ; i = (char *)this + 160)
  {
    v21 = *(_DWORD *)i;
    v22 = (*(uint64_t (**)(WebCore::RenderTextControlSingleLine *))(*(_QWORD *)this + 1048))(this);
    v23 = (*(uint64_t (**)(WebCore::RenderTextControlSingleLine *))(*(_QWORD *)this + 960))(this);
    v24 = v22 + v23;
    if (__OFADD__(v22, v23))
      v24 = (v22 >> 31) + 0x7FFFFFFF;
    v25 = (*(uint64_t (**)(WebCore::RenderTextControlSingleLine *))(*(_QWORD *)this + 1056))(this);
    v26 = (*(uint64_t (**)(WebCore::RenderTextControlSingleLine *))(*(_QWORD *)this + 968))(this);
    v27 = v25 + v26;
    if (__OFADD__(v25, v26))
      v27 = (v25 >> 31) + 0x7FFFFFFF;
    v28 = __OFADD__(v24, v27);
    v29 = v24 + v27;
    if (v28)
      v29 = (v24 >> 31) + 0x7FFFFFFF;
    v30 = v21 - v29;
    if (__OFSUB__(v21, v29))
      v30 = (v21 >> 31) + 0x7FFFFFFF;
    if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
      v31 = (char *)this + 160;
    else
      v31 = (char *)this + 164;
    v32 = *(_DWORD *)v31;
    if (!v6)
    {
      v34 = 0;
LABEL_81:
      v30 = v34;
      if (!v17)
      {
LABEL_127:
        v69 = 0;
        v70 = 1;
        goto LABEL_154;
      }
      goto LABEL_82;
    }
    if (((*(_DWORD *)(v6 + 124) >> 13) & 6u) - 2 < 4)
      v33 = (int *)(v6 + 160);
    else
      v33 = (int *)(v6 + 164);
    v34 = *v33;
    if (v34 <= v32)
      goto LABEL_81;
    if (!v17)
      goto LABEL_127;
    if (v30 != v34)
    {
      v35 = *((_DWORD *)this + 5);
      if ((v35 & 8) == 0)
      {
        *((_DWORD *)this + 5) = v35 | 8;
        if ((v35 & 0x8000) != 0)
        {
          if ((*((_BYTE *)this + 45) & 0x10) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x196460324);
          }
          v36 = *((_QWORD *)this + 18);
          if (v36)
          {
            v37 = *(_DWORD *)(v36 + 8) + 1;
            *(_DWORD *)(v36 + 8) = v37;
          }
          else
          {
            v37 = MEMORY[8];
          }
          *(_QWORD *)(v36 + 24) = *(_QWORD *)(v36 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
          if (!v37)
          {
            __break(0xC471u);
            JUMPOUT(0x196460350);
          }
          *(_DWORD *)(v36 + 8) = v37 - 1;
        }
      }
    }
    v38 = v6 + 80;
    *(float *)&v161 = (float)v30 * 0.015625;
    WORD2(v161) = 4;
    BYTE6(v161) = 1;
    if (((*(_DWORD *)(v6 + 124) >> 13) & 6u) - 2 < 4)
      WebCore::RenderStyle::setWidth(v38, (WebCore::Length *)&v161);
    else
      WebCore::RenderStyle::setHeight(v38, (WebCore::Length *)&v161);
    if (BYTE4(v161) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v161);
    }
    v39 = *(_DWORD *)(v6 + 20);
    if ((v39 & 8) != 0 || (*(_DWORD *)(v6 + 20) = v39 | 8, (v39 & 0x8000) == 0))
    {
      if (!v12)
        goto LABEL_82;
LABEL_70:
      v40 = v12 + 80;
      *(float *)&v161 = (float)v30 * 0.015625;
      WORD2(v161) = 4;
      BYTE6(v161) = 1;
      if (((*(_DWORD *)(v12 + 124) >> 13) & 6u) - 2 < 4)
        WebCore::RenderStyle::setWidth(v40, (WebCore::Length *)&v161);
      else
        WebCore::RenderStyle::setHeight(v40, (WebCore::Length *)&v161);
      if (BYTE4(v161) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v161);
      }
      v41 = *(_DWORD *)(v12 + 20);
      if ((v41 & 8) == 0)
      {
        *(_DWORD *)(v12 + 20) = v41 | 8;
        if ((v41 & 0x8000) != 0)
        {
          if ((*(_BYTE *)(v12 + 45) & 0x10) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x19646028CLL);
          }
          v42 = *(_QWORD *)(v12 + 144);
          if (v42)
          {
            v43 = *(_DWORD *)(v42 + 8) + 1;
            *(_DWORD *)(v42 + 8) = v43;
          }
          else
          {
            v43 = MEMORY[8];
          }
          *(_QWORD *)(v42 + 24) = *(_QWORD *)(v42 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
          if (!v43)
          {
            __break(0xC471u);
            JUMPOUT(0x1964602B8);
          }
          *(_DWORD *)(v42 + 8) = v43 - 1;
        }
      }
      goto LABEL_82;
    }
    if ((*(_BYTE *)(v6 + 45) & 0x10) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1964601D0);
    }
    v103 = *(_QWORD *)(v6 + 144);
    if (v103)
    {
      v104 = *(_DWORD *)(v103 + 8) + 1;
      *(_DWORD *)(v103 + 8) = v104;
    }
    else
    {
      v104 = MEMORY[8];
    }
    *(_QWORD *)(v103 + 24) = *(_QWORD *)(v103 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
    if (!v104)
    {
      __break(0xC471u);
      JUMPOUT(0x1964601FCLL);
    }
    *(_DWORD *)(v103 + 8) = v104 - 1;
    if (v12)
      goto LABEL_70;
LABEL_82:
    if ((v17[20] & 0xF8) != 0)
    {
      v44 = *((_QWORD *)v17 + 4);
      if (v44
        && (v45 = *(_QWORD *)(v44 + 8)) != 0
        && (*(_BYTE *)(*(_QWORD *)(v45 + 104) + 239) & 0x18) != 0
        && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v17 + 3) + 8) + 40)
                                                         + 8)
                                             + 1944)
                                 + 248)
                     + 479))
      {
        WebCore::RenderElement::clearNeedsLayoutForSkippedContent((WebCore::RenderElement *)v17);
      }
      else
      {
        (*(void (**)(char *))(*(_QWORD *)v17 + 688))(v17);
      }
    }
    v46 = v16;
    if (((*((_DWORD *)v17 + 31) >> 13) & 6u) - 2 < 4)
    {
      v47 = (int *)(v17 + 152);
      v48 = (int *)(v17 + 160);
    }
    else
    {
      v47 = (int *)(v17 + 156);
      v48 = (int *)(v17 + 164);
    }
    v49 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    if ((*(_WORD *)(v49 + 28) & 8) == 0
      || (v155 = *v47, v50 = *v48, ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 872))(v49) & 1) == 0))
    {
      __break(0xC471u);
      JUMPOUT(0x196460024);
    }
    if (*(_QWORD *)(*(_QWORD *)(v49 + 96) + 24) != *(_QWORD *)(*v9 + 24))
    {
      __break(0xC471u);
      JUMPOUT(0x19645FFA4);
    }
    if ((*(_WORD *)(v49 + 230) & 0x3800) != 0x1800)
      goto LABEL_128;
    v51 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    if ((*(_WORD *)(v51 + 28) & 8) == 0
      || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v51 + 872))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196460104);
    }
    if (*(_QWORD *)(*(_QWORD *)(v51 + 96) + 24) != *(_QWORD *)(*v9 + 24))
    {
      __break(0xC471u);
      JUMPOUT(0x1964600E4);
    }
    v52 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v51 + 240) + 560))(*(_QWORD *)(v51 + 240));
    if (!v52)
    {
LABEL_128:
      v55 = 0;
LABEL_129:
      v71 = 1;
      goto LABEL_131;
    }
    v54 = *(_DWORD *)(v52 + 24);
    *(_DWORD *)(v52 + 24) = v54 + 2;
    if ((*(_QWORD *)(v52 + 64) & 0xFFFFFFFFFFFFLL) != 0)
    {
      if ((*(_BYTE *)((*(_QWORD *)(v52 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) != 0)
        v55 = *(_QWORD *)(v52 + 64) & 0xFFFFFFFFFFFFLL;
      else
        v55 = 0;
      if (v54)
      {
LABEL_102:
        *(_DWORD *)(v52 + 24) = v54;
        goto LABEL_103;
      }
    }
    else
    {
      v55 = 0;
      if (v54)
        goto LABEL_102;
    }
    if ((*(_WORD *)(v52 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v52, v53);
LABEL_103:
    if (!v55)
      goto LABEL_129;
    ++*(_DWORD *)(v55 + 16);
    if (v6 && v12)
    {
      v56 = ((*(_DWORD *)(v55 + 124) >> 13) & 6) - 2;
      if (v56 < 4)
        v57 = (int *)(v55 + 152);
      else
        v57 = (int *)(v55 + 156);
      v16 = v46;
      if (((*(_DWORD *)(v12 + 124) >> 13) & 6u) - 2 < 4)
      {
        v58 = (unsigned int *)(v12 + 152);
        v59 = (_DWORD *)(v12 + 160);
      }
      else
      {
        v58 = (unsigned int *)(v12 + 156);
        v59 = (_DWORD *)(v12 + 164);
      }
      v60 = *v57;
      v61 = *v58;
      v62 = *v58 + *v59;
      if (__OFADD__(v61, *v59))
        v62 = (v61 >> 31) + 0x7FFFFFFF;
      if (v60 < v62)
      {
        v63 = (int *)(v56 < 4 ? v55 + 160 : v55 + 164);
        v64 = *v63;
        if (v30 <= v64)
          v30 = v64;
      }
      v65 = (uint64_t)(v17 + 80);
      *(float *)&v161 = (float)v30 * 0.015625;
      WORD2(v161) = 4;
      BYTE6(v161) = 1;
      if (((*((_DWORD *)v17 + 31) >> 13) & 6u) - 2 < 4)
        WebCore::RenderStyle::setWidth(v65, (WebCore::Length *)&v161);
      else
        WebCore::RenderStyle::setHeight(v65, (WebCore::Length *)&v161);
      if (BYTE4(v161) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v161);
      }
      v66 = *((_DWORD *)this + 5);
      if ((v66 & 8) == 0)
      {
        *((_DWORD *)this + 5) = v66 | 8;
        if ((v66 & 0x8000) != 0)
        {
          if ((*((_BYTE *)this + 45) & 0x10) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x196460240);
          }
          v67 = *((_QWORD *)this + 18);
          if (v67)
          {
            v68 = *(_DWORD *)(v67 + 8) + 1;
            *(_DWORD *)(v67 + 8) = v68;
          }
          else
          {
            v68 = MEMORY[8];
          }
          *(_QWORD *)(v67 + 24) = *(_QWORD *)(v67 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
          if (!v68)
          {
            __break(0xC471u);
            JUMPOUT(0x19646026CLL);
          }
          *(_DWORD *)(v67 + 8) = v68 - 1;
        }
      }
LABEL_151:
      v80 = *(_DWORD *)(v55 + 16);
      if (!v80)
      {
        __break(0xC471u);
        JUMPOUT(0x19645FFC4);
      }
      v70 = 0;
      *(_DWORD *)(v55 + 16) = v80 - 1;
      goto LABEL_153;
    }
    v71 = 0;
LABEL_131:
    if (v50 > v32)
    {
      v72 = (uint64_t)(v17 + 80);
      *(float *)&v161 = (float)v32 * 0.015625;
      WORD2(v161) = 4;
      BYTE6(v161) = 1;
      if (((*((_DWORD *)v17 + 31) >> 13) & 6u) - 2 < 4)
        WebCore::RenderStyle::setWidth(v72, (WebCore::Length *)&v161);
      else
        WebCore::RenderStyle::setHeight(v72, (WebCore::Length *)&v161);
      v16 = v46;
      if (BYTE4(v161) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v161);
      }
      v73 = *((_DWORD *)this + 5);
      if ((v73 & 8) != 0)
        goto LABEL_150;
      *((_DWORD *)this + 5) = v73 | 8;
      if ((v73 & 0x8000) == 0)
        goto LABEL_150;
      if ((*((_BYTE *)this + 45) & 0x10) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1964601A4);
      }
      v74 = *((_QWORD *)this + 18);
      if (v74)
      {
        v75 = *(_DWORD *)(v74 + 8) + 1;
        *(_DWORD *)(v74 + 8) = v75;
      }
      else
      {
        v75 = MEMORY[8];
      }
      *(_QWORD *)(v74 + 24) = *(_QWORD *)(v74 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
      if (!v75)
      {
        __break(0xC471u);
        JUMPOUT(0x19645F9D0);
      }
LABEL_236:
      *(_DWORD *)(v74 + 8) = v75 - 1;
      if ((v71 & 1) == 0)
        goto LABEL_151;
      goto LABEL_192;
    }
    if (((*((_DWORD *)v17 + 31) >> 13) & 6u) - 2 < 4)
      v76 = (int *)(v17 + 160);
    else
      v76 = (int *)(v17 + 164);
    v77 = *v76;
    if (v77 < (int)WebCore::RenderBox::contentLogicalHeight(this))
    {
      *(float *)&v161 = (float)(int)WebCore::RenderBox::contentLogicalHeight(this) * 0.015625;
      WORD2(v161) = 4;
      BYTE6(v161) = 1;
      v78 = (uint64_t)(v17 + 80);
      if (((*((_DWORD *)v17 + 31) >> 13) & 6u) - 2 < 4)
        WebCore::RenderStyle::setWidth(v78, (WebCore::Length *)&v161);
      else
        WebCore::RenderStyle::setHeight(v78, (WebCore::Length *)&v161);
      v16 = v46;
      if (BYTE4(v161) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v161);
      }
      v79 = *((_DWORD *)this + 5);
      if ((v79 & 8) != 0 || (*((_DWORD *)this + 5) = v79 | 8, (v79 & 0x8000) == 0))
      {
LABEL_150:
        if ((v71 & 1) == 0)
          goto LABEL_151;
        goto LABEL_192;
      }
      if ((*((_BYTE *)this + 45) & 0x10) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1964602D8);
      }
      v74 = *((_QWORD *)this + 18);
      if (v74)
      {
        v75 = *(_DWORD *)(v74 + 8) + 1;
        *(_DWORD *)(v74 + 8) = v75;
      }
      else
      {
        v75 = MEMORY[8];
      }
      *(_QWORD *)(v74 + 24) = *(_QWORD *)(v74 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
      if (!v75)
      {
        __break(0xC471u);
        JUMPOUT(0x196460304);
      }
      goto LABEL_236;
    }
    *(float *)&v161 = (float)v50 * 0.015625;
    WORD2(v161) = 4;
    BYTE6(v161) = 1;
    v89 = (uint64_t)(v17 + 80);
    if (((*((_DWORD *)v17 + 31) >> 13) & 6u) - 2 < 4)
      WebCore::RenderStyle::setWidth(v89, (WebCore::Length *)&v161);
    else
      WebCore::RenderStyle::setHeight(v89, (WebCore::Length *)&v161);
    v16 = v46;
    if (BYTE4(v161) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v161);
    }
    if ((v71 & 1) == 0)
      goto LABEL_151;
LABEL_192:
    v70 = 0;
LABEL_153:
    v69 = v155;
LABEL_154:
    if ((*((_BYTE *)this + 20) & 0xF8) != 0)
      WebCore::RenderBlockFlow::layoutBlock((uint64_t)this, 1, 0);
    v81 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    if ((*(_WORD *)(v81 + 28) & 8) == 0
      || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v81 + 872))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19645FF44);
    }
    if (*(_QWORD *)(*(_QWORD *)(v81 + 96) + 24) != *(_QWORD *)(*v9 + 24))
    {
      __break(0xC471u);
      JUMPOUT(0x19645FEA4);
    }
    if (v17 && (*(_WORD *)(v81 + 230) & 0x3800) == 0x1800)
    {
      if (((*((_DWORD *)v17 + 31) >> 13) & 6u) - 2 < 4)
        v82 = v17 + 152;
      else
        v82 = v17 + 156;
      *v82 = v69;
    }
    if (!v6 || v16)
    {
      if (v16 && v17)
        WebCore::RenderTextControlSingleLine::layout(void)::$_2::operator()(this, (WebCore::InlineIterator *)v17);
      if (!v6)
      {
        v84 = 0;
        goto LABEL_177;
      }
    }
    else
    {
      WebCore::RenderTextControlSingleLine::layout(void)::$_2::operator()(this, (WebCore::InlineIterator *)v6);
    }
    v83 = v157 == *(_DWORD *)(v6 + 160) && v156 == *(_DWORD *)(v6 + 164);
    v84 = !v83;
LABEL_177:
    v85 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    if ((*(_WORD *)(v85 + 28) & 8) == 0
      || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v85 + 872))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19645FF64);
    }
    if (*(_QWORD *)(*(_QWORD *)(v85 + 96) + 24) != *(_QWORD *)(*v9 + 24))
    {
      __break(0xC471u);
      JUMPOUT(0x19645FEC4);
    }
    v86 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v85 + 240) + 600))(*(_QWORD *)(v85 + 240));
    if (!v86)
      goto LABEL_361;
    v16 = (_QWORD *)(*(_QWORD *)(v86 + 64) & 0xFFFFFFFFFFFFLL);
    if (!v16 || (*(_BYTE *)((*(_QWORD *)(v86 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) == 0)
      goto LABEL_361;
    if (v6)
    {
      if (((*(_DWORD *)(v6 + 124) >> 13) & 6u) - 2 < 4)
        v87 = (unsigned int *)(v6 + 164);
      else
        v87 = (unsigned int *)(v6 + 160);
      v88 = *v87;
    }
    else
    {
      v88 = 0;
    }
    v90 = (*(uint64_t (**)(uint64_t))(*v16 + 1016))(*(_QWORD *)(v86 + 64) & 0xFFFFFFFFFFFFLL);
    v91 = (*(uint64_t (**)(_QWORD *))(*v16 + 1024))(v16);
    if (__OFADD__(v90, v91))
      v92 = (v90 >> 31) + 0x7FFFFFFF;
    else
      v92 = v90 + v91;
    v93 = (*(uint64_t (**)(_QWORD *))(*v16 + 944))(v16);
    if (__OFADD__(v92, v93))
      v94 = (v92 >> 31) + 0x7FFFFFFF;
    else
      v94 = v92 + v93;
    v95 = (*(uint64_t (**)(_QWORD *))(*v16 + 952))(v16);
    v96 = v94 + v95;
    if (__OFADD__(v94, v95))
      v96 = (v94 >> 31) + 0x7FFFFFFF;
    v28 = __OFSUB__(v88, v96);
    v97 = v88 - v96;
    if (v28)
      v97 = (v88 >> 31) + 0x7FFFFFFF;
    *(float *)&v161 = (float)v97 * 0.015625;
    WORD2(v161) = 4;
    BYTE6(v161) = 1;
    WebCore::RenderStyle::setWidth((uint64_t)(v16 + 10), (WebCore::Length *)&v161);
    if (BYTE4(v161) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v161);
    }
    v98 = *((_DWORD *)v16 + 5);
    if ((v98 & 0x20) == 0 && v84)
    {
      *((_DWORD *)v16 + 5) = v98 | 0x20;
    }
    else if ((v98 & 0xF8) == 0)
    {
      goto LABEL_217;
    }
    v100 = v16[4];
    if (!v100
      || (v101 = *(_QWORD *)(v100 + 8)) == 0
      || (*(_BYTE *)(*(_QWORD *)(v101 + 104) + 239) & 0x18) == 0
      || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16[3] + 8) + 40) + 8) + 1944)
                              + 248)
                  + 479))
    {
      (*(void (**)(_QWORD *))(*v16 + 688))(v16);
LABEL_217:
      if ((v70 & 1) == 0)
        goto LABEL_299;
      goto LABEL_218;
    }
    WebCore::RenderElement::clearNeedsLayoutForSkippedContent((WebCore::RenderElement *)v16);
    if ((v70 & 1) == 0)
    {
LABEL_299:
      v102 = *((_DWORD *)v17 + 38);
      v9 = (uint64_t *)*((unsigned int *)v17 + 39);
      goto LABEL_300;
    }
LABEL_218:
    v102 = 0;
    v9 = 0;
LABEL_300:
    v12 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    if ((*(_WORD *)(v12 + 28) & 8) == 0
      || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v12 + 872))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196460A1CLL);
    }
    if (*(_QWORD *)(*(_QWORD *)(v12 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
    {
      __break(0xC471u);
      JUMPOUT(0x1964609FCLL);
    }
    if (!(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 240) + 536))(*(_QWORD *)(v12 + 240)))
    {
LABEL_309:
      v107 = 0;
LABEL_310:
      v108 = 1;
      if (v6)
        goto LABEL_316;
      goto LABEL_320;
    }
    v12 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    if ((*(_WORD *)(v12 + 28) & 8) == 0
      || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v12 + 872))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196460A5CLL);
    }
    if (*(_QWORD *)(*(_QWORD *)(v12 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
    {
      __break(0xC471u);
      JUMPOUT(0x196460A3CLL);
    }
    v106 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 240) + 536))(*(_QWORD *)(v12 + 240));
    v107 = *(_QWORD *)(v106 + 64) & 0xFFFFFFFFFFFFLL;
    if (!v107)
      goto LABEL_310;
    if ((*(_BYTE *)((*(_QWORD *)(v106 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) == 0)
      goto LABEL_309;
    v110 = *(_DWORD *)((*(_QWORD *)(v106 + 64) & 0xFFFFFFFFFFFFLL) + 0x98);
    v109 = *(_DWORD *)((*(_QWORD *)(v106 + 64) & 0xFFFFFFFFFFFFLL) + 0x9C);
    v28 = __OFADD__(v102, v110);
    v111 = v102 + v110;
    v102 = v28 ? (v102 >> 31) + 0x7FFFFFFF : v111;
    v112 = (uint64_t *)((_DWORD)v9 + v109);
    if (__OFADD__((_DWORD)v9, v109))
    {
      v108 = 0;
      v9 = (uint64_t *)((v9 >> 31) + 0x7FFFFFFF);
      if (v6)
      {
LABEL_316:
        v114 = *(_DWORD *)(v6 + 152);
        v113 = *(_DWORD *)(v6 + 156);
        v28 = __OFADD__(v102, v114);
        v115 = v102 + v114;
        if (v28)
          v102 = (v102 >> 31) + 0x7FFFFFFF;
        else
          v102 = v115;
        v28 = __OFADD__((_DWORD)v9, v113);
        v116 = (uint64_t *)((_DWORD)v9 + v113);
        if (v28)
          v9 = (uint64_t *)((v9 >> 31) + 0x7FFFFFFF);
        else
          v9 = v116;
      }
    }
    else
    {
      v108 = 0;
      v9 = v112;
      if (v6)
        goto LABEL_316;
    }
LABEL_320:
    v117 = ((*((_DWORD *)v16 + 31) >> 13) & 6) - 2;
    if (v117 < 4)
      v118 = (unsigned int *)v16 + 39;
    else
      v118 = (unsigned int *)(v16 + 19);
    *v118 = v102;
    if (v108)
      v107 = (uint64_t)v17;
    if (v6)
      v107 = v6;
    if (!v107)
      goto LABEL_349;
    if (((*(_DWORD *)(v107 + 124) >> 13) & 6u) - 2 < 4)
      v119 = (int *)(v107 + 160);
    else
      v119 = (int *)(v107 + 164);
    v120 = *v119;
    if (v120 >= 0)
      v6 = v120;
    else
      v6 = (v120 + 1);
    if ((*((_BYTE *)v16 + 52) & 7) != 1)
      goto LABEL_338;
    WebCore::InlineIterator::firstLineBoxFor((uint64_t)v16, v105, (uint64_t)&v161);
    if ((_DWORD)v162 != -1)
    {
      v159[0] = (WebCore::Node *)&v158;
      if ((((uint64_t (*)(WebCore::Node **, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator15LineBoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v162])(v159, &v161) & 1) != 0)
      {
        if ((_DWORD)v162 != -1)
          ((void (*)(WebCore::Node **, __int128 *))off_1E34372B8[v162])(v159, &v161);
        v117 = ((*((_DWORD *)v16 + 31) >> 13) & 6) - 2;
LABEL_338:
        if (v117 < 4)
          v121 = (int *)(v16 + 20);
        else
          v121 = (int *)v16 + 41;
        v122 = *v121;
        goto LABEL_341;
      }
      if ((_DWORD)v162 != -1)
      {
        v17 = &v158;
        v159[0] = (WebCore::Node *)&v158;
        ((void (*)(WebCore::Node **, __int128 *))off_1E34373B8[v162])(v159, &v161);
        if ((_DWORD)v162 != -1)
        {
          v147 = v146;
          v159[0] = (WebCore::Node *)&v158;
          ((void (*)(WebCore::Node **, __int128 *))off_1E34372D8[v162])(v159, &v161);
          if ((_DWORD)v162 != -1)
          {
            v149 = v148;
            v17 = &v158;
            v159[0] = (WebCore::Node *)&v158;
            ((void (*)(WebCore::Node **, __int128 *))off_1E34373C8[v162])(v159, &v161);
            if ((_DWORD)v162 != -1)
              break;
          }
        }
      }
    }
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_413:
    ;
  }
  v151 = v147 - v149;
  v159[0] = (WebCore::Node *)&v158;
  v152 = v150 - ((float (*)(WebCore::Node **, __int128 *))off_1E3437348[v162])(v159, &v161);
  if (v151 >= v152)
    v152 = v151;
  v153 = v152 * 64.0;
  if (v153 >= 2147483650.0)
  {
    v122 = 0x7FFFFFFF;
  }
  else if (v153 <= -2147483650.0)
  {
    v122 = 0x80000000;
  }
  else
  {
    v122 = (int)v153;
  }
  if ((_DWORD)v162 != -1)
    ((void (*)(WebCore::Node **, __int128 *))off_1E34372B8[v162])(v159, &v161);
LABEL_341:
  if (v122 >= 0)
    v123 = v122;
  else
    v123 = v122 + 1;
  v124 = ((int)v6 >> 1) - (v123 >> 1);
  v28 = __OFADD__((_DWORD)v9, v124);
  v125 = (_DWORD)v9 + v124;
  if (v28)
    v125 = (v9 >> 31) + 0x7FFFFFFF;
  if (((*((_DWORD *)v16 + 31) >> 13) & 6u) - 2 < 4)
    v126 = (unsigned int *)(v16 + 19);
  else
    v126 = (unsigned int *)v16 + 39;
  *v126 = v125;
LABEL_349:
  v9 = &WebCore::HTMLNames::inputTag;
  if ((v98 & 0x200) == 0)
  {
    v127 = *((_DWORD *)v16 + 5);
    if ((v127 & 0x200) != 0)
    {
      if ((v127 & 0x8000) == 0)
        goto LABEL_352;
      if ((*((_BYTE *)v16 + 45) & 0x10) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x196460AC4);
      }
      v154 = v16[18];
      if (!v154 || (*(_BYTE *)(v154 + 25) & 8) == 0)
      {
LABEL_352:
        v128 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16[3] + 8) + 40) + 8);
        if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v128 + 528) + 8) + 288) + 476)
          && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v128 + 1944) + 24) + 8) + 40)
                                   + 8)
                       + 3382))
        {
          LOBYTE(v161) = 0;
          LOBYTE(v162) = 0;
          LOBYTE(v159[0]) = 0;
          v160 = 0;
          WebCore::RenderObject::issueRepaint((uint64_t)v16, &v161, 0, 0, (uint64_t)v159);
        }
      }
    }
  }
  if ((v98 & 0xF8) != 0)
  {
    v129 = (*(uint64_t (**)(WebCore::RenderTextControlSingleLine *))(*(_QWORD *)this + 1048))(this);
    if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
      v130 = WebCore::RenderBox::clientWidth(this);
    else
      v130 = WebCore::RenderBox::clientHeight(this);
    v131 = v129 + v130;
    if (__OFADD__(v129, v130))
      v131 = (v129 >> 31) + 0x7FFFFFFF;
    (*(void (**)(WebCore::RenderTextControlSingleLine *, _QWORD, _QWORD))(*(_QWORD *)this + 1752))(this, v131, 0);
  }
LABEL_361:
  v132 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v132 + 28) & 8) == 0
    || (result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v132 + 872))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)),
        (result & 1) == 0))
  {
    __break(0xC471u);
    JUMPOUT(0x1964609DCLL);
  }
  if (*(_QWORD *)(*(_QWORD *)(v132 + 96) + 24) != *(_QWORD *)(*v9 + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x1964609ACLL);
  }
  if (*(_DWORD *)(*(_QWORD *)(v132 + 240) + 12) == 0x8000)
    result = (uint64_t)WebCore::RenderThemeIOS::adjustRoundBorderRadius((int *)this + 20, this, v134);
  if (v84)
  {
    v135 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    v136 = *(_QWORD *)(*(_QWORD *)(v135 + 40) + 8);
    v137 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v136 + 528) + 8) + 296) + 3064);
    if ((*(_WORD *)(v137 + 256) & 4) != 0)
    {
      v138 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v137 + 32) + 8) + 528);
      if (v138)
      {
        v139 = *(_QWORD *)(v138 + 8);
        if (v139)
        {
          v140 = *(_QWORD *)(v139 + 24);
          if (v140)
          {
            v141 = *(_QWORD *)(v140 + 8);
            if (v141)
            {
              if ((*(_WORD *)(*(_QWORD *)(v141 + 72) + 26) & 1) != 0)
              {
                if ((*(_WORD *)(v135 + 28) & 8) == 0
                  || (v142 = *(_QWORD *)(v136 + 1248),
                      result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v135 + 872))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)),
                      (result & 1) == 0))
                {
                  __break(0xC471u);
                  JUMPOUT(0x196460A9CLL);
                }
                if (*(_QWORD *)(*(_QWORD *)(v135 + 96) + 24) != *(_QWORD *)(*v9 + 24))
                {
                  __break(0xC471u);
                  JUMPOUT(0x196460A7CLL);
                }
                if (v142 == v135)
                {
                  v143 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8)
                                                                                               + 40)
                                                                                   + 8)
                                                                       + 528)
                                                           + 8)
                                               + 296)
                                   + 3064);
                  *(_QWORD *)(v143 + 236) = 0;
                  *(_QWORD *)(v143 + 228) = 0;
                  *(_BYTE *)(v143 + 224) = 0;
                  *(_WORD *)(v143 + 256) |= 0x20u;
                  v144 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v143 + 32) + 8) + 1944);
                  if (v144)
                  {
                    v145 = v144 + 288;
                    if (!*(_BYTE *)(v144 + 328))
                      WebCore::RenderLayer::repaintBlockSelectionGaps(*(int **)(*(_QWORD *)(v144 + 320) + 144));
                    v161 = 0uLL;
                    v162 = 0;
                    return WebCore::RenderSelection::set(v145, &v161, 1);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::RenderTextControlSingleLine::innerBlockElement(WebCore::RenderTextControlSingleLine *this)
{
  if ((*((_WORD *)this + 14) & 8) == 0
    || ((*(uint64_t (**)(WebCore::RenderTextControlSingleLine *))(*(_QWORD *)this + 872))(this) & 1) == 0
    || *(_QWORD *)(*((_QWORD *)this + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x196460D28);
  }
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 30) + 536))(*((_QWORD *)this + 30));
}

uint64_t WebCore::RenderTextControlSingleLine::containerElement(WebCore::RenderTextControlSingleLine *this)
{
  if ((*((_WORD *)this + 14) & 8) == 0
    || ((*(uint64_t (**)(WebCore::RenderTextControlSingleLine *))(*(_QWORD *)this + 872))(this) & 1) == 0
    || *(_QWORD *)(*((_QWORD *)this + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x196460DC8);
  }
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 30) + 528))(*((_QWORD *)this + 30));
}

uint64_t WebCore::resetOverriddenHeight(uint64_t this, WebCore::RenderBox *a2, const WebCore::RenderObject *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _DWORD v10[2];
  uint64_t v11;
  uint64_t v12;

  if (this)
  {
    v11 = v3;
    v12 = v4;
    v6 = this;
    this += 80;
    v7 = *(_QWORD *)(*(_QWORD *)(v6 + 88) + 8);
    if (((*(_DWORD *)(v6 + 124) >> 13) & 6u) - 2 <= 3)
    {
      if (!*(_BYTE *)(v7 + 8))
        return this;
      *(_DWORD *)((char *)v10 + 3) = 0;
      v10[0] = 0;
      this = WebCore::RenderStyle::setWidth(this, (WebCore::Length *)v10);
    }
    else
    {
      if (!*(_BYTE *)(v7 + 16))
        return this;
      *(_DWORD *)((char *)v10 + 3) = 0;
      v10[0] = 0;
      this = WebCore::RenderStyle::setHeight(this, (WebCore::Length *)v10);
    }
    if (LOBYTE(v10[1]) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      this = (uint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v10[0]);
    }
    while ((WebCore::RenderBox *)v6 != a2)
    {
      v8 = *(_DWORD *)(v6 + 20);
      if ((v8 & 8) == 0)
      {
        *(_DWORD *)(v6 + 20) = v8 | 8;
        if ((v8 & 0x8000) != 0)
          this = WebCore::RenderObject::setLayerNeedsFullRepaint(v6);
      }
      v9 = *(_QWORD *)(v6 + 32);
      if (v9)
        v6 = *(_QWORD *)(v9 + 8);
      else
        v6 = 0;
    }
  }
  return this;
}

uint64_t WebCore::RenderTextControlSingleLine::inputElement(WebCore::RenderTextControlSingleLine *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v1 + 28) & 8) == 0
    || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v1 + 872))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0
    || *(_QWORD *)(*(_QWORD *)(v1 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x196460F78);
  }
  return v1;
}

uint64_t WebCore::RenderTextControlSingleLine::layout(void)::$_2::operator()(WebCore::RenderBox *this, WebCore::InlineIterator *a2)
{
  char *v4;
  int v5;
  uint64_t result;
  unsigned int v7;
  char *v8;
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  BOOL v14;
  int v15;
  int v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  double v24;
  _BYTE v25[16];
  int v26;
  char v27;
  char *v28;

  if ((*((_BYTE *)a2 + 52) & 7) != 1)
  {
LABEL_6:
    v4 = (char *)a2 + 160;
    if (((*((_DWORD *)a2 + 31) >> 13) & 6u) - 2 >= 4)
      v4 = (char *)a2 + 164;
    v5 = *(_DWORD *)v4;
    goto LABEL_9;
  }
  WebCore::InlineIterator::firstLineBoxFor((uint64_t)a2, a2, (uint64_t)v25);
  if (v26 == -1)
    goto LABEL_35;
  v28 = &v27;
  if ((((uint64_t (*)(char **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator15LineBoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v26])(&v28, v25) & 1) != 0)
  {
    if (v26 != -1)
      ((void (*)(char **, _BYTE *))off_1E34372B8[v26])(&v28, v25);
    goto LABEL_6;
  }
  if (v26 == -1)
    goto LABEL_35;
  v28 = &v27;
  ((void (*)(char **, _BYTE *))off_1E34373B8[v26])(&v28, v25);
  if (v26 == -1
    || (v18 = v17, v28 = &v27, ((void (*)(char **, _BYTE *))off_1E34372D8[v26])(&v28, v25), v26 == -1)
    || (v20 = v19, v28 = &v27, ((void (*)(char **, _BYTE *))off_1E34373C8[v26])(&v28, v25), v26 == -1))
  {
LABEL_35:
    result = std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_36;
  }
  v22 = v18 - v20;
  v28 = &v27;
  v23 = v21 - ((float (*)(char **, _BYTE *))off_1E3437348[v26])(&v28, v25);
  if (v22 >= v23)
    v23 = v22;
  v24 = v23 * 64.0;
  if (v24 >= 2147483650.0)
  {
    v5 = 0x7FFFFFFF;
  }
  else if (v24 <= -2147483650.0)
  {
    v5 = 0x80000000;
  }
  else
  {
    v5 = (int)v24;
  }
  if (v26 != -1)
    ((void (*)(char **, _BYTE *))off_1E34372B8[v26])(&v28, v25);
LABEL_9:
  result = WebCore::RenderBox::contentLogicalHeight(this);
  if ((_DWORD)result == v5)
    return result;
  v7 = ((*((_DWORD *)a2 + 31) >> 13) & 6) - 2;
  v8 = (char *)a2 + 152;
  if (v7 >= 4)
    v8 = (char *)a2 + 156;
  v9 = *(_DWORD *)v8;
  if ((int)result >= 0)
    v10 = result;
  else
    v10 = result + 1;
  v11 = v10 >> 1;
  if (v5 >= 0)
    v12 = v5;
  else
    v12 = v5 + 1;
  v13 = v11 - (v12 >> 1);
  v14 = __OFADD__(v9, v13);
  v15 = v9 + v13;
  v16 = (v9 >> 31) + 0x7FFFFFFF;
  if (!v14)
    v16 = v15;
  if (v7 < 4)
  {
LABEL_36:
    *((_DWORD *)a2 + 38) = v16;
    return result;
  }
  *((_DWORD *)a2 + 39) = v16;
  return result;
}

uint64_t WebCore::RenderTextControlSingleLine::nodeAtPoint(WebCore::RenderTextControlSingleLine *a1, int *a2, WebCore::HitTestResult *a3, float32x4_t *a4, const WebCore::LayoutPoint *a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v12;
  const WebCore::Node ***v13;
  void *v14;
  WebCore::Node *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  BOOL v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  WebCore::Node *v35;
  WebCore::Node *v36;
  WebCore::Node *v37;

  v10 = WebCore::RenderBlock::nodeAtPoint((uint64_t)a1, a2, a3, a4, a5, a6);
  if (!(_DWORD)v10)
    return v10;
  v12 = WebCore::RenderTextControlSingleLine::containerElement(*(WebCore::RenderTextControlSingleLine **)(*((_QWORD *)a1 + 3) + 8));
  v13 = (const WebCore::Node ***)*((_QWORD *)a3 + 9);
  WebCore::RenderTextControl::innerTextElement((WebCore::RenderTextControl *)&v37, *(_WORD **)(*((_QWORD *)a1 + 3) + 8));
  if (v37 && (WebCore::Node::isDescendantOf(v13, (const WebCore::Node ***)v37) & 1) != 0
    || (v33 = *((_QWORD *)a3 + 9), v33 == WebCore::RenderTextControlSingleLine::inputElement(a1)))
  {
    v15 = v37;
    v37 = 0;
    if (v15)
    {
      if (*((_DWORD *)v15 + 6) == 2)
      {
        if ((*((_WORD *)v15 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v15, v14);
      }
      else
      {
        *((_DWORD *)v15 + 6) -= 2;
      }
    }
    v16 = a4->i64[0];
    v37 = (WebCore::Node *)v16;
    if (!v12)
      goto LABEL_38;
    goto LABEL_9;
  }
  if (v12)
  {
    v34 = *((_QWORD *)a3 + 9);
    v35 = v37;
    v37 = 0;
    if (v35)
    {
      if (*((_DWORD *)v35 + 6) == 2)
      {
        if ((*((_WORD *)v35 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v35, v14);
      }
      else
      {
        *((_DWORD *)v35 + 6) -= 2;
      }
    }
    if (v12 == v34)
    {
      v16 = a4->i64[0];
      v37 = (WebCore::Node *)v16;
LABEL_9:
      if (WebCore::RenderTextControlSingleLine::innerBlockElement(*(WebCore::RenderTextControlSingleLine **)(*((_QWORD *)a1 + 3) + 8)))
      {
        v17 = HIDWORD(v16);
        v18 = WebCore::RenderTextControlSingleLine::innerBlockElement(*(WebCore::RenderTextControlSingleLine **)(*((_QWORD *)a1 + 3) + 8));
        if ((*(_QWORD *)(v18 + 64) & 0xFFFFFFFFFFFFLL) != 0
          && (*(_BYTE *)((*(_QWORD *)(v18 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) != 0)
        {
          v19 = *(_QWORD *)(WebCore::RenderTextControlSingleLine::innerBlockElement(*(WebCore::RenderTextControlSingleLine **)(*((_QWORD *)a1 + 3) + 8))
                          + 64) & 0xFFFFFFFFFFFFLL;
          if ((*(_BYTE *)(v19 + 0x2D) & 4) == 0)
            v19 = 0;
          v22 = v19 + 152;
          v20 = *(_DWORD *)(v19 + 152);
          v21 = *(_DWORD *)(v22 + 4);
          if (v20 == 0x80000000)
            v23 = 0x7FFFFFFF;
          else
            v23 = -v20;
          if (v21 == 0x80000000)
            v24 = 0x7FFFFFFF;
          else
            v24 = -v21;
          if (__OFADD__((_DWORD)v16, v23))
            LODWORD(v16) = (v16 >> 31) + 0x7FFFFFFF;
          else
            LODWORD(v16) = v16 + v23;
          LODWORD(v37) = v16;
          v25 = __OFADD__((_DWORD)v17, v24);
          v26 = v17 + v24;
          if (v25)
            LODWORD(v17) = (v17 >> 31) + 0x7FFFFFFF;
          else
            LODWORD(v17) = v26;
          HIDWORD(v37) = v17;
        }
        if ((*(_QWORD *)(v12 + 64) & 0xFFFFFFFFFFFFLL) != 0
          && (*(_BYTE *)((*(_QWORD *)(v12 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) != 0)
        {
          v27 = *(_DWORD *)((*(_QWORD *)(v12 + 64) & 0xFFFFFFFFFFFFLL) + 0x98);
          v28 = *(_DWORD *)((*(_QWORD *)(v12 + 64) & 0xFFFFFFFFFFFFLL) + 0x9C);
          if (v27 == 0x80000000)
            v29 = 0x7FFFFFFF;
          else
            v29 = -v27;
          if (v28 == 0x80000000)
            v30 = 0x7FFFFFFF;
          else
            v30 = -v28;
          v31 = v16 + v29;
          if (__OFADD__((_DWORD)v16, v29))
            v31 = (v16 >> 31) + 0x7FFFFFFF;
          LODWORD(v37) = v31;
          v25 = __OFADD__((_DWORD)v17, v30);
          v32 = v17 + v30;
          if (v25)
            v32 = (v17 >> 31) + 0x7FFFFFFF;
          HIDWORD(v37) = v32;
        }
      }
LABEL_38:
      WebCore::RenderTextControl::hitInnerTextElement(a1, a3, (const WebCore::LayoutPoint *)&v37, a5);
    }
  }
  else
  {
    v36 = v37;
    v37 = 0;
    if (v36)
    {
      if (*((_DWORD *)v36 + 6) == 2)
      {
        if ((*((_WORD *)v36 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v36, v14);
      }
      else
      {
        *((_DWORD *)v36 + 6) -= 2;
      }
    }
  }
  return v10;
}

void WebCore::RenderTextControlSingleLine::styleDidChange(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  int v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _WORD *v9;
  void *v10;
  WebCore::Node *v11;
  uint64_t v12;
  int v13;
  WebCore::RenderElement *v14;
  uint64_t v15;
  uint64_t v16;
  WebCore::RenderObject *v17;
  int v18;
  WebCore::RenderElement *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WebCore::Node *v24;

  v3 = (int)a2;
  WebCore::RenderTextControl::styleDidChange(a1, a2, a3);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  if ((*(_WORD *)(v5 + 28) & 8) == 0
    || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v5 + 872))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8)) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19646172CLL);
  }
  if (*(_QWORD *)(*(_QWORD *)(v5 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x1964616ECLL);
  }
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 240) + 536))(*(_QWORD *)(v5 + 240));
  if (v6)
  {
    v20 = *(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL;
    if (v20)
    {
      if ((*(_BYTE *)((*(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19646195CLL);
      }
      v21 = v20 + 80;
      *(_DWORD *)((char *)&v24 + 3) = 0;
      LODWORD(v24) = 0;
      WebCore::RenderStyle::setHeight(v20 + 80, (WebCore::Length *)&v24);
      if (BYTE4(v24) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v24);
      }
      *(_DWORD *)((char *)&v24 + 3) = 0;
      LODWORD(v24) = 0;
      WebCore::RenderStyle::setWidth(v21, (WebCore::Length *)&v24);
      if (BYTE4(v24) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v24);
      }
    }
  }
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  if ((*(_WORD *)(v7 + 28) & 8) == 0
    || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v7 + 872))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8)) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19646174CLL);
  }
  if (*(_QWORD *)(*(_QWORD *)(v7 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x19646170CLL);
  }
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 240) + 528))(*(_QWORD *)(v7 + 240));
  if (v8)
  {
    v22 = *(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL;
    if (v22)
    {
      if ((*(_BYTE *)((*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19646197CLL);
      }
      v23 = v22 + 80;
      *(_DWORD *)((char *)&v24 + 3) = 0;
      LODWORD(v24) = 0;
      WebCore::RenderStyle::setHeight(v22 + 80, (WebCore::Length *)&v24);
      if (BYTE4(v24) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v24);
      }
      *(_DWORD *)((char *)&v24 + 3) = 0;
      LODWORD(v24) = 0;
      WebCore::RenderStyle::setWidth(v23, (WebCore::Length *)&v24);
      if (BYTE4(v24) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v24);
      }
    }
  }
  if (v3 == 8)
  {
    v9 = *(_WORD **)(*(_QWORD *)(a1 + 24) + 8);
    if ((v9[14] & 8) == 0
      || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v9 + 872))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8)) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19646187CLL);
    }
    (*(void (**)(WebCore::Node **__return_ptr, _WORD *))(*(_QWORD *)v9 + 1408))(&v24, v9);
    v11 = v24;
    v12 = *((_QWORD *)v24 + 8) & 0xFFFFFFFFFFFFLL;
    if (v12)
    {
      if ((*(_BYTE *)((*((_QWORD *)v24 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1964618BCLL);
      }
      if (*(_BYTE *)((*((_QWORD *)v24 + 8) & 0xFFFFFFFFFFFFLL) + 0x2E) != 42)
      {
        __break(0xC471u);
        JUMPOUT(0x1964618DCLL);
      }
    }
    v24 = 0;
    if (*((_DWORD *)v11 + 6) == 2)
    {
      if ((*((_WORD *)v11 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v11, v10);
    }
    else
    {
      *((_DWORD *)v11 + 6) -= 2;
    }
    if (v12)
    {
      v13 = *(_DWORD *)(v12 + 20);
      if ((v13 & 8) == 0)
      {
        *(_DWORD *)(v12 + 20) = v13 | 8;
        v14 = WebCore::RenderObject::markContainingBlocksForLayout((WebCore::RenderObject *)v12, 0);
        WebCore::RenderObject::scheduleLayout((WebCore::RenderObject *)v12, v14);
        if ((*(_BYTE *)(v12 + 21) & 0x80) != 0)
          WebCore::RenderObject::setLayerNeedsFullRepaint(v12);
      }
    }
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
    if ((*(_WORD *)(v15 + 28) & 8) == 0
      || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v15 + 872))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8)) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19646189CLL);
    }
    if (*(_QWORD *)(*(_QWORD *)(v15 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
    {
      __break(0xC471u);
      JUMPOUT(0x19646185CLL);
    }
    v16 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v15 + 240) + 600))(*(_QWORD *)(v15 + 240));
    if (v16)
    {
      v17 = (WebCore::RenderObject *)(*(_QWORD *)(v16 + 64) & 0xFFFFFFFFFFFFLL);
      if (v17)
      {
        if ((*(_BYTE *)((*(_QWORD *)(v16 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1964618FCLL);
        }
        v18 = *(_DWORD *)((*(_QWORD *)(v16 + 64) & 0xFFFFFFFFFFFFLL) + 0x14);
        if ((v18 & 8) == 0)
        {
          *(_DWORD *)((*(_QWORD *)(v16 + 64) & 0xFFFFFFFFFFFFLL) + 0x14) = v18 | 8;
          v19 = WebCore::RenderObject::markContainingBlocksForLayout(v17, 0);
          WebCore::RenderObject::scheduleLayout(v17, v19);
          if ((*((_BYTE *)v17 + 21) & 0x80) != 0)
            WebCore::RenderObject::setLayerNeedsFullRepaint((uint64_t)v17);
        }
      }
    }
  }
  *(_DWORD *)(a1 + 20) &= ~0x10000u;
}

BOOL WebCore::RenderTextControlSingleLine::hasControlClip(WebCore::RenderTextControlSingleLine *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  WebCore::Node *v10;
  uint64_t v11;
  void *v12;
  WebCore::Node *v13;
  WebCore::Node *v15;

  v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v1 + 28) & 8) == 0
    || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v1 + 872))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196461C90);
  }
  if (*(_QWORD *)(*(_QWORD *)(v1 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
    goto LABEL_47;
  v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 240) + 528))(*(_QWORD *)(v1 + 240));
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 64) & 0xFFFFFFFFFFFFLL;
    if (v4)
    {
      if ((*(_BYTE *)((*(_QWORD *)(v3 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) != 0)
        return v4 != 0;
    }
  }
  v5 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v5 + 28) & 8) == 0
    || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v5 + 872))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196461CD0);
  }
  if (*(_QWORD *)(*(_QWORD *)(v5 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x196461CB0);
  }
  if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 240) + 600))(*(_QWORD *)(v5 + 240)))
  {
    v6 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    if ((*(_WORD *)(v6 + 28) & 8) == 0
      || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v6 + 872))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196461D78);
    }
    if (*(_QWORD *)(*(_QWORD *)(v6 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
    {
      v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 240) + 600))(*(_QWORD *)(v6 + 240));
      v4 = *(_QWORD *)(v7 + 64) & 0xFFFFFFFFFFFFLL;
      if (v4 && (*(_BYTE *)((*(_QWORD *)(v7 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) != 0)
        return v4 != 0;
      goto LABEL_16;
    }
LABEL_47:
    __break(0xC471u);
    JUMPOUT(0x196461C70);
  }
LABEL_16:
  v8 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v8 + 28) & 8) == 0
    || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v8 + 872))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196461D38);
  }
  if (*(_QWORD *)(*(_QWORD *)(v8 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x196461CF0);
  }
  (*(void (**)(WebCore::Node **__return_ptr))(**(_QWORD **)(v8 + 240) + 544))(&v15);
  v10 = v15;
  v15 = 0;
  if (v10)
  {
    if (*((_DWORD *)v10 + 6) == 2)
    {
      if ((*((_WORD *)v10 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v10, v9);
    }
    else
    {
      *((_DWORD *)v10 + 6) -= 2;
    }
    v11 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    if ((*(_WORD *)(v11 + 28) & 8) == 0
      || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 872))(v11) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196461D58);
    }
    if (*(_QWORD *)(*(_QWORD *)(v11 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
    {
      __break(0xC471u);
      JUMPOUT(0x196461D18);
    }
    (*(void (**)(WebCore::Node **__return_ptr))(**(_QWORD **)(v11 + 240) + 544))(&v15);
    v13 = v15;
    if ((*((_QWORD *)v15 + 8) & 0xFFFFFFFFFFFFLL) != 0)
    {
      if ((*(_BYTE *)((*((_QWORD *)v15 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) != 0)
        v4 = *((_QWORD *)v15 + 8) & 0xFFFFFFFFFFFFLL;
      else
        v4 = 0;
    }
    else
    {
      v4 = 0;
    }
    v15 = 0;
    if (*((_DWORD *)v13 + 6) == 2)
    {
      if ((*((_WORD *)v13 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v13, v12);
    }
    else
    {
      *((_DWORD *)v13 + 6) -= 2;
    }
  }
  else
  {
    v4 = 0;
  }
  return v4 != 0;
}

uint64_t WebCore::RenderTextControlSingleLine::controlClipRect(WebCore::RenderTextControlSingleLine *this, const WebCore::LayoutPoint *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  BOOL v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v15;
  __int128 v16;
  _QWORD v17[2];

  v4 = WebCore::RenderBox::paddingBoxRect(this);
  v6 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v6 + 28) & 8) == 0
    || (v7 = v4,
        v8 = v5,
        ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v6 + 872))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0))
  {
    __break(0xC471u);
    JUMPOUT(0x196461EA0);
  }
  if (*(_QWORD *)(*(_QWORD *)(v6 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x196461E80);
  }
  if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 240) + 528))(*(_QWORD *)(v6 + 240)))
  {
    v15 = WebCore::RenderTextControlSingleLine::containerElement(*(WebCore::RenderTextControlSingleLine **)(*((_QWORD *)this + 3) + 8));
    if ((*(_QWORD *)(v15 + 64) & 0xFFFFFFFFFFFFLL) != 0
      && (*(_BYTE *)((*(_QWORD *)(v15 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) != 0)
    {
      v16 = *(_OWORD *)((*(_QWORD *)(v15 + 64) & 0xFFFFFFFFFFFFLL) + 0x98);
      v17[0] = v7;
      v17[1] = v8;
      WebCore::LayoutRect::unite((WebCore::LayoutRect *)v17, (const WebCore::LayoutRect *)&v16);
      v7 = v17[0];
    }
  }
  v9 = *((_DWORD *)a2 + 1);
  LODWORD(v10) = v7 + *(_DWORD *)a2;
  if (__OFADD__((_DWORD)v7, *(_DWORD *)a2))
    v10 = (v7 >> 31) + 0x7FFFFFFF;
  else
    v10 = v10;
  v11 = __OFADD__(HIDWORD(v7), v9);
  v12 = HIDWORD(v7) + v9;
  LODWORD(v13) = (HIDWORD(v7) >> 31) + 0x7FFFFFFF;
  if (v11)
    v13 = v13;
  else
    v13 = v12;
  return v10 | (v13 << 32);
}

uint64_t WebCore::RenderTextControlSingleLine::preferredContentLogicalWidth(WebCore::RenderTextControlSingleLine *this, float a2)
{
  uint64_t v2;
  int v5;
  int v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  _WORD *v11;
  _WORD *v12;
  void *v13;
  WebCore::Node *v14;
  uint64_t v15;
  WebCore::Node *v16;
  WebCore::Node *v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  WebCore::Node *v22;
  WebCore::Node *v23;
  int v24;

  v24 = 0;
  v2 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v2 + 28) & 8) == 0
    || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v2 + 872))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1964621F8);
  }
  if (*(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x1964621D8);
  }
  v5 = (*(uint64_t (**)(_QWORD, uint64_t, int *))(**(_QWORD **)(v2 + 240) + 184))(*(_QWORD *)(v2 + 240), 20, &v24);
  v6 = v24;
  if (v24 <= 0)
  {
    v24 = 20;
    v6 = 20;
  }
  v7 = ceilf((float)((float)v6 * a2) * 64.0);
  if (v7 >= 2147500000.0)
  {
    v8 = 0x7FFFFFFFLL;
  }
  else if (v7 <= -2147500000.0)
  {
    v8 = 0x80000000;
  }
  else
  {
    v8 = (int)v7;
  }
  if (v5)
  {
    v9 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    if ((*(_WORD *)(v9 + 28) & 8) == 0
      || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v9 + 872))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1964622B8);
    }
    if (*(_QWORD *)(*(_QWORD *)(v9 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
    {
      __break(0xC471u);
      JUMPOUT(0x196462298);
    }
    v10 = (float)((float)((float)(int)v8 * 0.015625)
                + (*(float (**)(_QWORD))(**(_QWORD **)(v9 + 240) + 192))(*(_QWORD *)(v9 + 240)))
        * 64.0;
    if (v10 >= 2147483650.0)
    {
      v8 = 0x7FFFFFFFLL;
    }
    else if (v10 <= -2147483650.0)
    {
      v8 = 0x80000000;
    }
    else
    {
      v8 = (int)v10;
    }
  }
  v11 = *(_WORD **)(*((_QWORD *)this + 3) + 8);
  if ((v11[14] & 8) == 0
    || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v11 + 872))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196462218);
  }
  (*(void (**)(WebCore::Node **__return_ptr, _WORD *))(*(_QWORD *)v11 + 1408))(&v23, v11);
  if (v23)
  {
    v12 = *(_WORD **)(*((_QWORD *)this + 3) + 8);
    if ((v12[14] & 8) == 0 || ((*(uint64_t (**)(_WORD *))(*(_QWORD *)v12 + 872))(v12) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196462238);
    }
    (*(void (**)(WebCore::Node **__return_ptr, _WORD *))(*(_QWORD *)v12 + 1408))(&v22, v12);
    v14 = v22;
    v15 = *((_QWORD *)v22 + 8) & 0xFFFFFFFFFFFFLL;
    if (v15)
    {
      if ((*(_BYTE *)((*((_QWORD *)v22 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x196462258);
      }
      if (*(_BYTE *)((*((_QWORD *)v22 + 8) & 0xFFFFFFFFFFFFLL) + 0x2E) != 42)
      {
        __break(0xC471u);
        JUMPOUT(0x196462278);
      }
    }
    v22 = 0;
    if (*((_DWORD *)v14 + 6) == 2)
    {
      if ((*((_WORD *)v14 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v14, v13);
    }
    else
    {
      *((_DWORD *)v14 + 6) -= 2;
    }
    v16 = v23;
    v23 = 0;
    if (v16)
    {
      if (*((_DWORD *)v16 + 6) == 2)
      {
        if ((*((_WORD *)v16 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v16, v13);
      }
      else
      {
        *((_DWORD *)v16 + 6) -= 2;
      }
    }
    if (v15)
    {
      if ((*(_BYTE *)(v15 + 45) & 1) != 0)
        goto LABEL_34;
      v17 = *(WebCore::Node **)(*(_QWORD *)(v15 + 24) + 8);
      if (!v17)
        goto LABEL_34;
      if ((*((_WORD *)v17 + 14) & 8) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1964622D8);
      }
      if (WebCore::Node::isRootEditableElement(v17)
        && (*(_BYTE *)(v15 + 22) & 1) != 0
        && (*(_BYTE *)(v15 + 123) & 4) == 0)
      {
        v18 = ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 984))(v15) == 0) << 7;
      }
      else
      {
LABEL_34:
        v18 = 0;
      }
      v19 = __OFADD__((_DWORD)v8, v18);
      v20 = (v8 + v18);
      if (v19)
        return (v8 >> 31) + 0x7FFFFFFF;
      else
        return v20;
    }
  }
  return v8;
}

uint64_t WebCore::RenderTextControlSingleLine::computeControlLogicalHeight(uint64_t a1, unsigned int a2, int a3)
{
  if (__OFADD__(a2, a3))
    return (a2 >> 31) + 0x7FFFFFFF;
  else
    return a2 + a3;
}

unsigned int *WebCore::RenderTextControlSingleLine::autoscroll(WebCore::RenderTextControlSingleLine *this, const WebCore::IntPoint *a2)
{
  _WORD *v2;
  void *v4;
  const WebCore::IntPoint *v5;
  unsigned int *result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::Node *v14[3];
  __int16 v15;
  char v16;
  char v17;
  __int128 v18;

  v2 = *(_WORD **)(*((_QWORD *)this + 3) + 8);
  if ((v2[14] & 8) == 0
    || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v2 + 872))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0)
  {
    __break(0xC471u);
    goto LABEL_25;
  }
  (*(void (**)(WebCore::Node **__return_ptr, _WORD *))(*(_QWORD *)v2 + 1408))(v14, v2);
  result = (unsigned int *)v14[0];
  v7 = *((_QWORD *)v14[0] + 8) & 0xFFFFFFFFFFFFLL;
  if (v7)
  {
    if ((*(_BYTE *)((*((_QWORD *)v14[0] + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1964624B0);
    }
    if (*(_BYTE *)((*((_QWORD *)v14[0] + 8) & 0xFFFFFFFFFFFFLL) + 0x2E) != 42)
    {
      __break(0xC471u);
LABEL_25:
      JUMPOUT(0x196462490);
    }
  }
  v14[0] = 0;
  if (result[6] == 2)
  {
    if ((*((_WORD *)result + 15) & 0x400) == 0)
      result = WebCore::Node::removedLastRef((WebCore::Node *)result, v4);
  }
  else
  {
    result[6] -= 2;
  }
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 144);
    if (v8)
    {
      v9 = WebCore::ScrollView::windowToContents(*(WebCore::ScrollView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 32)+ 24)+ 8)+ 40)+ 8)+ 1944)+ 248), a2, v5);
      v10 = ((_DWORD)v9 << 6);
      if ((int)v9 < -33554432)
        v10 = 0x80000000;
      v11 = 0x8000000000000000;
      if (SHIDWORD(v9) >= -33554432)
        v11 = HIDWORD(v9) << 38;
      v12 = 0x7FFFFFFF00000000;
      if (SHIDWORD(v9) <= 0x1FFFFFF)
        v12 = v11;
      if ((int)v9 > 0x1FFFFFF)
        v10 = 0x7FFFFFFFLL;
      *(_QWORD *)&v18 = v12 | v10;
      *((_QWORD *)&v18 + 1) = 0x4000000040;
      v13 = *(_QWORD *)(v8 + 32);
      LOBYTE(v14[0]) = 0;
      v14[1] = (WebCore::Node *)&WebCore::ScrollAlignment::alignToEdgeIfNeeded;
      v14[2] = (WebCore::Node *)&WebCore::ScrollAlignment::alignToEdgeIfNeeded;
      v15 = 1;
      v16 = 0;
      v17 = 0;
      return (unsigned int *)WebCore::LocalFrameView::scrollRectToVisible(&v18, v13, 0, (int **)v14);
    }
  }
  return result;
}

uint64_t WebCore::RenderTextControlSingleLine::scrollWidth(WebCore::RenderTextControlSingleLine *this)
{
  _WORD *v1;
  _WORD *v3;
  void *v4;
  WebCore::Node *v5;
  WebCore::RenderBox *v6;
  WebCore::Node *v7;
  unsigned int v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  BOOL v13;
  int v14;
  int v15;
  WebCore::Node *v17;
  WebCore::Node *v18;

  v1 = *(_WORD **)(*((_QWORD *)this + 3) + 8);
  if ((v1[14] & 8) == 0
    || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v1 + 872))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0)
  {
    __break(0xC471u);
    goto LABEL_34;
  }
  (*(void (**)(WebCore::Node **__return_ptr, _WORD *))(*(_QWORD *)v1 + 1408))(&v18, v1);
  if (!v18)
    return WebCore::RenderBox::scrollWidth(this);
  v3 = *(_WORD **)(*((_QWORD *)this + 3) + 8);
  if ((v3[14] & 8) == 0
    || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v3 + 872))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1964626A0);
  }
  (*(void (**)(WebCore::Node **__return_ptr, _WORD *))(*(_QWORD *)v3 + 1408))(&v17, v3);
  v5 = v17;
  v6 = (WebCore::RenderBox *)(*((_QWORD *)v17 + 8) & 0xFFFFFFFFFFFFLL);
  if (v6)
  {
    if ((*(_BYTE *)((*((_QWORD *)v17 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1964626C0);
    }
    if (*(_BYTE *)((*((_QWORD *)v17 + 8) & 0xFFFFFFFFFFFFLL) + 0x2E) != 42)
    {
      __break(0xC471u);
LABEL_34:
      JUMPOUT(0x196462680);
    }
  }
  v17 = 0;
  if (*((_DWORD *)v5 + 6) == 2)
  {
    if ((*((_WORD *)v5 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v5, v4);
  }
  else
  {
    *((_DWORD *)v5 + 6) -= 2;
  }
  v7 = v18;
  v18 = 0;
  if (v7)
  {
    if (*((_DWORD *)v7 + 6) == 2)
    {
      if ((*((_WORD *)v7 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v7, v4);
    }
    else
    {
      *((_DWORD *)v7 + 6) -= 2;
    }
  }
  if (!v6)
    return WebCore::RenderBox::scrollWidth(this);
  v8 = WebCore::RenderBox::clientWidth(this);
  v9 = WebCore::RenderBox::clientWidth(v6);
  if (__OFSUB__(v8, v9))
    v10 = (v8 >> 31) + 0x7FFFFFFF;
  else
    v10 = v8 - v9;
  v11 = WebCore::RenderBox::scrollWidth(v6);
  v12 = v11 << 6;
  if (v11 < -33554432)
    v12 = 0x80000000;
  if (v11 > 0x1FFFFFF)
    v12 = 0x7FFFFFFF;
  v13 = __OFADD__(v12, v10);
  v14 = v12 + v10;
  v15 = (v12 >> 31) + 0x7FFFFFFF;
  if (!v13)
    v15 = v14;
  return (v15 / 64);
}

uint64_t WebCore::RenderTextControlSingleLine::scrollHeight(WebCore::RenderTextControlSingleLine *this)
{
  _WORD *v1;
  _WORD *v3;
  void *v4;
  WebCore::Node *v5;
  WebCore::RenderBox *v6;
  WebCore::Node *v7;
  unsigned int v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  BOOL v13;
  int v14;
  int v15;
  WebCore::Node *v17;
  WebCore::Node *v18;

  v1 = *(_WORD **)(*((_QWORD *)this + 3) + 8);
  if ((v1[14] & 8) == 0
    || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v1 + 872))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0)
  {
    __break(0xC471u);
    goto LABEL_34;
  }
  (*(void (**)(WebCore::Node **__return_ptr, _WORD *))(*(_QWORD *)v1 + 1408))(&v18, v1);
  if (!v18)
    return WebCore::RenderBox::scrollHeight(this);
  v3 = *(_WORD **)(*((_QWORD *)this + 3) + 8);
  if ((v3[14] & 8) == 0
    || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v3 + 872))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1964628B0);
  }
  (*(void (**)(WebCore::Node **__return_ptr, _WORD *))(*(_QWORD *)v3 + 1408))(&v17, v3);
  v5 = v17;
  v6 = (WebCore::RenderBox *)(*((_QWORD *)v17 + 8) & 0xFFFFFFFFFFFFLL);
  if (v6)
  {
    if ((*(_BYTE *)((*((_QWORD *)v17 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1964628D0);
    }
    if (*(_BYTE *)((*((_QWORD *)v17 + 8) & 0xFFFFFFFFFFFFLL) + 0x2E) != 42)
    {
      __break(0xC471u);
LABEL_34:
      JUMPOUT(0x196462890);
    }
  }
  v17 = 0;
  if (*((_DWORD *)v5 + 6) == 2)
  {
    if ((*((_WORD *)v5 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v5, v4);
  }
  else
  {
    *((_DWORD *)v5 + 6) -= 2;
  }
  v7 = v18;
  v18 = 0;
  if (v7)
  {
    if (*((_DWORD *)v7 + 6) == 2)
    {
      if ((*((_WORD *)v7 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v7, v4);
    }
    else
    {
      *((_DWORD *)v7 + 6) -= 2;
    }
  }
  if (!v6)
    return WebCore::RenderBox::scrollHeight(this);
  v8 = WebCore::RenderBox::clientHeight(this);
  v9 = WebCore::RenderBox::clientHeight(v6);
  if (__OFSUB__(v8, v9))
    v10 = (v8 >> 31) + 0x7FFFFFFF;
  else
    v10 = v8 - v9;
  v11 = WebCore::RenderBox::scrollHeight(v6);
  v12 = v11 << 6;
  if (v11 < -33554432)
    v12 = 0x80000000;
  if (v11 > 0x1FFFFFF)
    v12 = 0x7FFFFFFF;
  v13 = __OFADD__(v12, v10);
  v14 = v12 + v10;
  v15 = (v12 >> 31) + 0x7FFFFFFF;
  if (!v13)
    v15 = v14;
  return (v15 / 64);
}

_WORD *WebCore::RenderTextControlSingleLine::scrollLeft(WebCore::RenderTextControlSingleLine *this)
{
  _WORD *v1;
  void *v3;
  WebCore::Node *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::Node *v11;

  v1 = *(_WORD **)(*((_QWORD *)this + 3) + 8);
  if ((v1[14] & 8) == 0
    || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v1 + 872))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0)
  {
    __break(0xC471u);
    goto LABEL_26;
  }
  (*(void (**)(WebCore::Node **__return_ptr, _WORD *))(*(_QWORD *)v1 + 1408))(&v11, v1);
  v4 = v11;
  if (!v11)
  {
LABEL_15:
    v8 = *((_QWORD *)this + 18);
    if (!v8)
      return 0;
    v1 = 0;
    if ((*((_BYTE *)this + 22) & 1) != 0)
    {
      v9 = *(_QWORD *)(v8 + 264);
      if (v9)
        return (_WORD *)*(unsigned int *)(v9 + 104);
    }
    return v1;
  }
  v5 = *((_QWORD *)v11 + 8) & 0xFFFFFFFFFFFFLL;
  if (v5)
  {
    if ((*(_BYTE *)((*((_QWORD *)v11 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196462A3CLL);
    }
    if (*(_BYTE *)((*((_QWORD *)v11 + 8) & 0xFFFFFFFFFFFFLL) + 0x2E) == 42)
    {
      v6 = *(_QWORD *)((*((_QWORD *)v11 + 8) & 0xFFFFFFFFFFFFLL) + 0x90);
      if (v6)
      {
        v1 = 0;
        if ((*(_BYTE *)((*((_QWORD *)v11 + 8) & 0xFFFFFFFFFFFFLL) + 0x16) & 1) != 0)
        {
          v7 = *(_QWORD *)(v6 + 264);
          if (v7)
            v1 = (_WORD *)*(unsigned int *)(v7 + 104);
        }
      }
      else
      {
        v1 = 0;
      }
      goto LABEL_12;
    }
    __break(0xC471u);
LABEL_26:
    JUMPOUT(0x196462A1CLL);
  }
LABEL_12:
  v11 = 0;
  if (*((_DWORD *)v4 + 6) == 2)
  {
    if ((*((_WORD *)v4 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v4, v3);
  }
  else
  {
    *((_DWORD *)v4 + 6) -= 2;
  }
  if (!v5)
    goto LABEL_15;
  return v1;
}

_WORD *WebCore::RenderTextControlSingleLine::scrollTop(WebCore::RenderTextControlSingleLine *this)
{
  _WORD *v1;
  void *v3;
  WebCore::Node *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::Node *v11;

  v1 = *(_WORD **)(*((_QWORD *)this + 3) + 8);
  if ((v1[14] & 8) == 0
    || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v1 + 872))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0)
  {
    __break(0xC471u);
    goto LABEL_26;
  }
  (*(void (**)(WebCore::Node **__return_ptr, _WORD *))(*(_QWORD *)v1 + 1408))(&v11, v1);
  v4 = v11;
  if (!v11)
  {
LABEL_15:
    v8 = *((_QWORD *)this + 18);
    if (!v8)
      return 0;
    v1 = 0;
    if ((*((_BYTE *)this + 22) & 1) != 0)
    {
      v9 = *(_QWORD *)(v8 + 264);
      if (v9)
        return (_WORD *)*(unsigned int *)(v9 + 108);
    }
    return v1;
  }
  v5 = *((_QWORD *)v11 + 8) & 0xFFFFFFFFFFFFLL;
  if (v5)
  {
    if ((*(_BYTE *)((*((_QWORD *)v11 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196462BA8);
    }
    if (*(_BYTE *)((*((_QWORD *)v11 + 8) & 0xFFFFFFFFFFFFLL) + 0x2E) == 42)
    {
      v6 = *(_QWORD *)((*((_QWORD *)v11 + 8) & 0xFFFFFFFFFFFFLL) + 0x90);
      if (v6)
      {
        v1 = 0;
        if ((*(_BYTE *)((*((_QWORD *)v11 + 8) & 0xFFFFFFFFFFFFLL) + 0x16) & 1) != 0)
        {
          v7 = *(_QWORD *)(v6 + 264);
          if (v7)
            v1 = (_WORD *)*(unsigned int *)(v7 + 108);
        }
      }
      else
      {
        v1 = 0;
      }
      goto LABEL_12;
    }
    __break(0xC471u);
LABEL_26:
    JUMPOUT(0x196462B88);
  }
LABEL_12:
  v11 = 0;
  if (*((_DWORD *)v4 + 6) == 2)
  {
    if ((*((_WORD *)v4 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v4, v3);
  }
  else
  {
    *((_DWORD *)v4 + 6) -= 2;
  }
  if (!v5)
    goto LABEL_15;
  return v1;
}

unsigned int *WebCore::RenderTextControlSingleLine::setScrollLeft(uint64_t a1, int a2)
{
  _WORD *v2;
  void *v5;
  unsigned int *result;
  _WORD *v7;
  void *v8;
  WebCore::Node *v9;

  v2 = *(_WORD **)(*(_QWORD *)(a1 + 24) + 8);
  if ((v2[14] & 8) == 0
    || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v2 + 872))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8)) & 1) == 0)
  {
    __break(0xC471u);
    goto LABEL_18;
  }
  (*(void (**)(WebCore::Node **__return_ptr, _WORD *))(*(_QWORD *)v2 + 1408))(&v9, v2);
  result = (unsigned int *)v9;
  v9 = 0;
  if (!result)
    return result;
  if (result[6] == 2)
  {
    if ((*((_WORD *)result + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)result, v5);
  }
  else
  {
    result[6] -= 2;
  }
  v7 = *(_WORD **)(*(_QWORD *)(a1 + 24) + 8);
  if ((v7[14] & 8) == 0 || ((*(uint64_t (**)(_WORD *))(*(_QWORD *)v7 + 872))(v7) & 1) == 0)
  {
    __break(0xC471u);
LABEL_18:
    JUMPOUT(0x196462CECLL);
  }
  (*(void (**)(WebCore::Node **__return_ptr, _WORD *))(*(_QWORD *)v7 + 1408))(&v9, v7);
  WebCore::Element::setScrollLeft(v9, a2);
  result = (unsigned int *)v9;
  v9 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, v8);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

unsigned int *WebCore::RenderTextControlSingleLine::setScrollTop(uint64_t a1, int a2)
{
  _WORD *v2;
  void *v5;
  unsigned int *result;
  _WORD *v7;
  void *v8;
  WebCore::Node *v9;

  v2 = *(_WORD **)(*(_QWORD *)(a1 + 24) + 8);
  if ((v2[14] & 8) == 0
    || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v2 + 872))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8)) & 1) == 0)
  {
    __break(0xC471u);
    goto LABEL_18;
  }
  (*(void (**)(WebCore::Node **__return_ptr, _WORD *))(*(_QWORD *)v2 + 1408))(&v9, v2);
  result = (unsigned int *)v9;
  v9 = 0;
  if (!result)
    return result;
  if (result[6] == 2)
  {
    if ((*((_WORD *)result + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)result, v5);
  }
  else
  {
    result[6] -= 2;
  }
  v7 = *(_WORD **)(*(_QWORD *)(a1 + 24) + 8);
  if ((v7[14] & 8) == 0 || ((*(uint64_t (**)(_WORD *))(*(_QWORD *)v7 + 872))(v7) & 1) == 0)
  {
    __break(0xC471u);
LABEL_18:
    JUMPOUT(0x196462E30);
  }
  (*(void (**)(WebCore::Node **__return_ptr, _WORD *))(*(_QWORD *)v7 + 1408))(&v9, v7);
  WebCore::Element::setScrollTop(v9, a2);
  result = (unsigned int *)v9;
  v9 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, v8);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

uint64_t WebCore::RenderTextControlSingleLine::scroll(WebCore::RenderObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  _WORD *v7;
  void *v15;
  WebCore::Node *v16;
  uint64_t v17;
  uint64_t v18;
  WebCore::ScrollableArea *v19;
  WebCore::Node *v21;

  v7 = *(_WORD **)(*((_QWORD *)a1 + 3) + 8);
  if ((v7[14] & 8) == 0
    || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v7 + 872))(*(_QWORD *)(*((_QWORD *)a1 + 3) + 8)) & 1) == 0)
  {
    __break(0xC471u);
    goto LABEL_21;
  }
  (*(void (**)(WebCore::Node **__return_ptr, _WORD *))(*(_QWORD *)v7 + 1408))(&v21, v7);
  v16 = v21;
  v17 = *((_QWORD *)v21 + 8) & 0xFFFFFFFFFFFFLL;
  if (v17)
  {
    if ((*(_BYTE *)((*((_QWORD *)v21 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196462FBCLL);
    }
    if (*(_BYTE *)((*((_QWORD *)v21 + 8) & 0xFFFFFFFFFFFFLL) + 0x2E) != 42)
    {
      __break(0xC471u);
LABEL_21:
      JUMPOUT(0x196462F9CLL);
    }
  }
  v21 = 0;
  if (*((_DWORD *)v16 + 6) == 2)
  {
    if ((*((_WORD *)v16 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v16, v15);
  }
  else
  {
    *((_DWORD *)v16 + 6) -= 2;
  }
  if (!v17)
    return 0;
  v18 = *(_QWORD *)(v17 + 144);
  if (v18
    && (v19 = *(WebCore::ScrollableArea **)(v18 + 264)) != 0
    && (WebCore::ScrollableArea::scroll(v19, a2, a3, a4) & 1) != 0)
  {
    return 1;
  }
  else
  {
    return WebCore::RenderBox::scroll(a1, a2, a3, a4, a5, a6, a7);
  }
}

uint64_t WebCore::RenderTextControlSingleLine::logicalScroll(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _WORD *v5;
  void *v11;
  WebCore::Node *v12;
  uint64_t v13;
  WebCore::ScrollableArea *v14;
  int v15;
  char v16;
  char v18;
  WebCore::Node *v19;

  v5 = *(_WORD **)(*(_QWORD *)(a1 + 24) + 8);
  if ((v5[14] & 8) == 0
    || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v5 + 872))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8)) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1964631ACLL);
  }
  (*(void (**)(WebCore::Node **__return_ptr, _WORD *))(*(_QWORD *)v5 + 1408))(&v19, v5);
  v12 = v19;
  if ((*((_QWORD *)v19 + 8) & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)((*((_QWORD *)v19 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1964631CCLL);
    }
    if (*(_BYTE *)((*((_QWORD *)v19 + 8) & 0xFFFFFFFFFFFFLL) + 0x2E) != 42)
    {
      __break(0xC471u);
      JUMPOUT(0x1964631ECLL);
    }
  }
  v13 = *(_QWORD *)((*((_QWORD *)v19 + 8) & 0xFFFFFFFFFFFFLL) + 0x90);
  v19 = 0;
  if (*((_DWORD *)v12 + 6) == 2)
  {
    if ((*((_WORD *)v12 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v12, v11);
  }
  else
  {
    *((_DWORD *)v12 + 6) -= 2;
  }
  if (!v13)
    return WebCore::RenderBox::logicalScroll((WebCore::RenderObject *)a1, a2, a3, a4, a5);
  v14 = *(WebCore::ScrollableArea **)(v13 + 264);
  if (!v14)
    return WebCore::RenderBox::logicalScroll((WebCore::RenderObject *)a1, a2, a3, a4, a5);
  v18 = 2;
  switch((unsigned __int16)*(_DWORD *)(a1 + 124) >> 13)
  {
    case 1:
      v18 = 1;
      break;
    case 2:
    case 4:
      break;
    case 3:
    case 5:
      v18 = 3;
      break;
    default:
      v18 = 0;
      break;
  }
  v15 = v18 & 1;
  switch((int)a2)
  {
    case 0:
      break;
    case 1:
      v16 = v15 == 0;
      goto LABEL_20;
    case 2:
      if ((v18 & 1) != 0)
        v16 = 3;
      else
        v16 = 2;
      goto LABEL_20;
    case 3:
      if ((v18 & 1) != 0)
        v16 = 2;
      else
        v16 = 3;
LABEL_20:
      LOBYTE(v15) = v16;
      break;
    default:
      LOBYTE(v15) = 0;
      break;
  }
  if ((WebCore::ScrollableArea::scroll(v14, v15, a3, a4) & 1) != 0)
    return 1;
  else
    return WebCore::RenderBox::logicalScroll((WebCore::RenderObject *)a1, a2, a3, a4, a5);
}

void WebCore::RenderTextControlInnerBlock::~RenderTextControlInnerBlock(WebCore::RenderTextControlInnerBlock *this, void *a2)
{
  uint64_t v2;
  void *v3;

  WebCore::RenderBlockFlow::~RenderBlockFlow(this, a2);
  if (*(_DWORD *)(v2 + 16))
  {
    *(_QWORD *)(v2 + 240) = 0;
    *(_OWORD *)(v2 + 208) = 0u;
    *(_OWORD *)(v2 + 224) = 0u;
    *(_OWORD *)(v2 + 176) = 0u;
    *(_OWORD *)(v2 + 192) = 0u;
    *(_OWORD *)(v2 + 144) = 0u;
    *(_OWORD *)(v2 + 160) = 0u;
    *(_OWORD *)(v2 + 112) = 0u;
    *(_OWORD *)(v2 + 128) = 0u;
    *(_OWORD *)(v2 + 80) = 0u;
    *(_OWORD *)(v2 + 96) = 0u;
    *(_OWORD *)(v2 + 48) = 0u;
    *(_OWORD *)(v2 + 64) = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_OWORD *)v2 = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate((bmalloc::api *)v2, v3);
  }
}

void WebCore::RenderTextFragment::~RenderTextFragment(WebCore::RenderTextFragment *this, void *a2)
{
  WTF *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  v3 = (WTF *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  *(_QWORD *)this = off_1E3434D90;
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  WebCore::RenderObject::~RenderObject(this, a2);
}

{
  uint64_t v2;
  void *v3;

  WebCore::RenderTextFragment::~RenderTextFragment(this, a2);
  if (*(_DWORD *)(v2 + 16))
  {
    *(_QWORD *)(v2 + 144) = 0;
    *(_OWORD *)(v2 + 112) = 0u;
    *(_OWORD *)(v2 + 128) = 0u;
    *(_OWORD *)(v2 + 80) = 0u;
    *(_OWORD *)(v2 + 96) = 0u;
    *(_OWORD *)(v2 + 48) = 0u;
    *(_OWORD *)(v2 + 64) = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_OWORD *)v2 = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate((bmalloc::api *)v2, v3);
  }
}

uint64_t WebCore::RenderTextFragment::canBeSelectionLeaf(WebCore::RenderTextFragment *this)
{
  uint64_t result;

  if ((*((_BYTE *)this + 45) & 1) != 0)
    return 0;
  result = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if (result)
  {
    if ((*(_WORD *)(result + 28) & 2) != 0)
    {
      return WebCore::Node::computeEditability(result, 0, 1) != 0;
    }
    else
    {
      result = 105;
      __break(0xC471u);
    }
  }
  return result;
}

void WebCore::RenderTextFragment::setTextInternal(WebCore::RenderTextFragment *this, WTF **a2, char a3)
{
  uint64_t v4;
  uint64_t v5;
  WebCore::SVGTextLayoutAttributes **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::SVGTextLayoutAttributes **v12;
  _BYTE v13[144];

  WebCore::RenderText::setTextInternal(this, a2, a3);
  *((_DWORD *)this + 30) = 0;
  v7 = *((_QWORD *)this + 13);
  if (v7)
    LODWORD(v7) = *(_DWORD *)(v7 + 4);
  *((_DWORD *)this + 31) = v7;
  v8 = *((_QWORD *)this + 18);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (v9)
    {
      if (WebCore::RenderTreeBuilder::s_current)
      {
        WebCore::RenderTreeBuilder::destroy(WebCore::RenderTreeBuilder::s_current, v9, 1, v4, v5, v6);
      }
      else
      {
        WebCore::RenderTreeBuilder::RenderTreeBuilder((WebCore::RenderTreeBuilder *)v13, *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8)+ 1944));
        WebCore::RenderTreeBuilder::destroy((uint64_t)v13, *(_QWORD *)(*((_QWORD *)this + 18) + 8), 1, v10, v11, v12);
        WebCore::RenderTreeBuilder::~RenderTreeBuilder((WebCore::RenderTreeBuilder *)v13);
      }
    }
  }
}

uint64_t WebCore::RenderTextFragment::previousCharacter(WebCore::RenderTextFragment *this)
{
  unsigned __int16 v1;
  WebCore::RenderTextFragment *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  int *v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;

  v2 = this;
  if (!*((_DWORD *)this + 30))
    goto LABEL_37;
  if (WebCore::RenderText::textNode(this))
  {
    v13 = *(int **)(WebCore::RenderText::textNode(v2) + 80);
    if (!v13)
      goto LABEL_2;
  }
  else
  {
    v13 = (int *)*((_QWORD *)v2 + 17);
    if (!v13)
      goto LABEL_2;
  }
  v14 = *v13;
  v15 = v13[1];
  *v13 += 2;
  v16 = *((_DWORD *)v2 + 30);
  v19 = v16;
  v20 = v15;
  if (v16 <= v15)
  {
    v17 = v16 - 1;
    if (v15 <= v17)
    {
      v1 = 0;
    }
    else
    {
      v18 = *((_QWORD *)v13 + 1);
      if ((v13[4] & 4) != 0)
        v1 = *(unsigned __int8 *)(v18 + v17);
      else
        v1 = *(_WORD *)(v18 + 2 * v17);
    }
  }
  if (v14)
    *v13 = v14;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v13, v12);
  if (v19 > v20)
  {
LABEL_37:
    while (1)
    {
LABEL_2:
      v3 = *((unsigned int *)v2 + 10);
      if (v3 | ((unint64_t)*((unsigned __int8 *)v2 + 44) << 32)
        && (v4 = *(_QWORD *)((v3 | ((unint64_t)*((unsigned __int8 *)v2 + 44) << 32)) + 8)) != 0)
      {
        do
        {
          v2 = (WebCore::RenderTextFragment *)v4;
          v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 120))(v4);
        }
        while (v4);
      }
      else
      {
        v5 = *((_QWORD *)v2 + 4);
        if (!v5)
          return 32;
        v2 = *(WebCore::RenderTextFragment **)(v5 + 8);
        if (!v2)
          return 32;
      }
      v6 = *((_DWORD *)v2 + 5);
      if ((v6 & 0x800) == 0 && (v6 & 0x1800000) != 0x1000000 && (*((_BYTE *)v2 + 45) & 0x20) == 0)
      {
        if ((*((_BYTE *)v2 + 45) & 2) == 0)
          return 32;
        v7 = *((_QWORD *)v2 + 13);
        if (v7)
        {
          v9 = *(_DWORD *)(v7 + 4);
          if (v9)
            break;
        }
      }
    }
    v10 = (v9 - 1);
    v11 = *(_QWORD *)(v7 + 8);
    if ((*(_BYTE *)(v7 + 16) & 4) != 0)
      return *(unsigned __int8 *)(v11 + v10);
    else
      return *(unsigned __int16 *)(v11 + 2 * v10);
  }
  return v1;
}

uint64_t WebCore::RenderTextFragment::blockForAccompanyingFirstLetter(WebCore::RenderTextFragment *this)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *((_QWORD *)this + 18);
  if (!v1)
    return 0;
  v3 = *(_QWORD *)(v1 + 8);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 32);
  if (!v4 || !*(_QWORD *)(v4 + 8))
    return 0;
  v5 = *(_QWORD *)(v4 + 8);
  result = 0;
  while ((*(_BYTE *)(v5 + 45) & 0x40) == 0)
  {
    v6 = *(_QWORD *)(v5 + 32);
    if (!v6)
      return 0;
    v5 = *(_QWORD *)(v6 + 8);
    if (!v5)
      return result;
  }
  if (*(_BYTE *)(v5 + 46) == 25)
    return 0;
  while (1)
  {
    v9 = v5;
    if ((*(_BYTE *)(v5 + 102) & 2) != 0 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 128))(v5) & 1) != 0)
      break;
    v7 = *(_QWORD *)(v9 + 32);
    if (!v7 || !*(_QWORD *)(v7 + 8))
      return 0;
    v5 = *(_QWORD *)(v7 + 8);
    while ((*(_BYTE *)(v5 + 45) & 0x40) == 0)
    {
      v8 = *(_QWORD *)(v5 + 32);
      if (!v8)
        return 0;
      result = 0;
      v5 = *(_QWORD *)(v8 + 8);
      if (!v5)
        return result;
    }
    result = 0;
    if (*(_BYTE *)(v5 + 46) == 25)
      return result;
  }
  return v9;
}

const char *WebCore::RenderTableCol::renderName(WebCore::RenderTableCol *this)
{
  return "RenderTableCol";
}

uint64_t WebCore::RenderTableCol::requiresLayer(WebCore::RenderTableCol *this)
{
  return 0;
}

const char *WebCore::RenderTableRow::renderName(WebCore::RenderTableRow *this)
{
  unsigned __int16 *v1;

  if ((*((_BYTE *)this + 45) & 1) != 0)
    return "RenderTableRow (anonymous)";
  v1 = *(unsigned __int16 **)(*((_QWORD *)this + 3) + 8);
  if (v1 && (~v1[14] & 0x408) == 0 && (*(unsigned int (**)(unsigned __int16 *))(*(_QWORD *)v1 + 368))(v1))
    return "RenderTableRow (anonymous)";
  else
    return "RenderTableRow";
}

const char *WebCore::RenderTableSection::renderName(WebCore::RenderTableSection *this)
{
  unsigned __int16 *v1;

  if ((*((_BYTE *)this + 45) & 1) != 0)
    return "RenderTableSection (anonymous)";
  v1 = *(unsigned __int16 **)(*((_QWORD *)this + 3) + 8);
  if (v1 && (~v1[14] & 0x408) == 0 && (*(unsigned int (**)(unsigned __int16 *))(*(_QWORD *)v1 + 368))(v1))
    return "RenderTableSection (anonymous)";
  else
    return "RenderTableSection";
}

WTF::StringImpl *WebCore::RenderTableSection::createAnonymousBoxWithSameTypeAs@<X0>(const WebCore::RenderBox *a1@<X1>, const WTF::StringImpl *a2@<X2>, WebCore::RenderElement **a3@<X8>)
{
  uint64_t v5;
  WebCore::RenderElement *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  const WebCore::Element *v15;
  WTF::StringImpl *result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 3) + 8) + 40) + 8);
  WebCore::RenderStyle::createAnonymousStyleWithDisplay((_QWORD *)a1 + 10, (WTF::StringImpl *)6, a2, (uint64_t)&v17);
  v6 = (WebCore::RenderElement *)bmalloc::api::isoAllocate();
  v7 = WebCore::RenderObject::RenderObject((uint64_t)v6, 40, v5, 28, 0);
  *(_QWORD *)v7 = off_1E3422BC8;
  *(_QWORD *)(v7 + 64) = 0;
  *(_QWORD *)(v7 + 70) = 0;
  *(_DWORD *)(v7 + 80) = 0;
  v8 = v18;
  v9 = v19;
  v18 = 0;
  *(_QWORD *)(v7 + 88) = v8;
  *(_QWORD *)(v7 + 96) = v9;
  v10 = v20;
  v20 = 0u;
  *(_OWORD *)(v7 + 104) = v10;
  *(_QWORD *)(v7 + 120) = v21;
  v11 = v22;
  v22 = 0u;
  *(_OWORD *)(v7 + 128) = v11;
  *(_OWORD *)(v7 + 144) = 0u;
  *(_OWORD *)(v7 + 160) = 0u;
  *(_OWORD *)(v7 + 176) = 0u;
  *(_QWORD *)(v7 + 192) = 0;
  *(_QWORD *)v7 = off_1E3434710;
  *(_OWORD *)(v7 + 248) = 0u;
  *(_OWORD *)(v7 + 232) = 0u;
  *(_OWORD *)(v7 + 200) = 0u;
  *(_OWORD *)(v7 + 216) = 0u;
  *(_DWORD *)(v7 + 279) = 0;
  *(_OWORD *)(v7 + 264) = 0u;
  *(_DWORD *)(v7 + 20) |= 1u;
  WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)&v17, v12);
  result = WebCore::RenderElement::initializeStyle(v6, v13, v14, v15);
  *a3 = v6;
  return result;
}

void WebCore::SecureTextTimer::~SecureTextTimer(WebCore::SecureTextTimer *this)
{
  WTF *v1;
  void *v2;

  WebCore::TimerBase::~TimerBase(this);
  WTF::fastFree(v1, v2);
}

uint64_t WebCore::RenderTextControlInnerContainer::isFlexibleBoxImpl(WebCore::RenderTextControlInnerContainer *this)
{
  return 1;
}

uint64_t WebCore::RenderTextControlInnerBlock::canBeProgramaticallyScrolled(WebCore::RenderTextControlInnerBlock *this)
{
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v1 + 28) & 8) != 0)
  {
    v2 = **(_QWORD **)(v1 + 40);
    if (v2)
      v3 = (*(_WORD *)(v2 + 28) & 0x80) == 0;
    else
      v3 = 1;
    return v3
        || (v4 = *(_QWORD *)(v2 + 200)) == 0
        || (v5 = *(_QWORD *)(v4 + 8)) == 0
        || (*(_WORD *)(v5 + 28) & 0x10) == 0
        || *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24)
        || (*(_WORD *)(v5 + 230) & 0x3800) != 6144;
  }
  else
  {
    result = 105;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::RenderTextControlInnerBlock::hasLineIfEmpty(WebCore::RenderTextControlInnerBlock *this)
{
  return 1;
}

uint64_t WTF::HashTable<std::pair<WebCore::RenderTableCell const*,int>,WTF::KeyValuePair<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue>>,WTF::DefaultHash<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashMap<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue,WTF::DefaultHash<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashTraits<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashTraits<WebCore::CollapsedBorderValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebCore::RenderTableCell const*,int>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  unsigned int *v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v2)
  {
    for (i = 0; i != v2; ++i)
    {
      if (*(_QWORD *)(a1 + 40 * i) != -1)
      {
        v4 = *(_QWORD *)(a1 + 40 * i + 24);
        if ((v4 & 0x8000000000000) != 0)
        {
          v9 = i;
          v10 = v2;
          v11 = a1;
          v6 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
          do
          {
            v7 = __ldaxr(v6);
            v8 = --v7 == 0;
          }
          while (__stlxr(v7, v6));
          v2 = v10;
          if (v8)
          {
            atomic_store(1u, v6);
            WTF::fastFree((WTF *)v6, a2);
            i = v9;
            v2 = v10;
            a1 = v11;
          }
        }
      }
    }
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

WTF *WTF::Vector<WebCore::RenderTableCell *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(WTF *result, WTF *a2)
{
  WTF *v2;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  WTF *v13;
  uint64_t v14;

  v2 = result;
  if (a2 == result)
    return v2;
  v4 = *((_DWORD *)result + 3);
  v5 = *((_DWORD *)a2 + 3);
  if (v4 > v5)
  {
    *((_DWORD *)result + 3) = v5;
LABEL_21:
    v13 = *(WTF **)v2;
    if (v5)
    {
      memmove(v13, *(const void **)a2, 8 * v5);
      v14 = *((unsigned int *)v2 + 3);
      v13 = *(WTF **)v2;
    }
    else
    {
      v14 = 0;
    }
    memcpy((char *)v13 + 8 * v14, (const void *)(*(_QWORD *)a2 + 8 * v14), *(_QWORD *)a2 + 8 * *((unsigned int *)a2 + 3) - (*(_QWORD *)a2 + 8 * v14));
    *((_DWORD *)v2 + 3) = *((_DWORD *)a2 + 3);
    return v2;
  }
  v6 = *((_DWORD *)result + 2);
  if (v5 <= v6)
  {
LABEL_20:
    v5 = *((_DWORD *)v2 + 3);
    goto LABEL_21;
  }
  if (v6)
  {
    if (v4)
      *((_DWORD *)result + 3) = 0;
    result = *(WTF **)result;
    if ((WTF *)((char *)v2 + 16) == *(WTF **)v2)
    {
      if (result)
      {
LABEL_10:
        v7 = *((_DWORD *)v2 + 2);
        goto LABEL_14;
      }
    }
    else if (result)
    {
      *(_QWORD *)v2 = 0;
      *((_DWORD *)v2 + 2) = 0;
      WTF::fastFree(result, a2);
      result = *(WTF **)v2;
      if (*(_QWORD *)v2)
        goto LABEL_10;
    }
    *(_QWORD *)v2 = (char *)v2 + 16;
    v7 = 1;
    *((_DWORD *)v2 + 2) = 1;
  }
  else
  {
    v7 = 0;
  }
LABEL_14:
  v8 = *((unsigned int *)a2 + 3);
  if (v7 >= v8)
    goto LABEL_20;
  v9 = *(WTF **)v2;
  v10 = *((unsigned int *)v2 + 3);
  if (v8 < 2)
  {
    v11 = (char *)v2 + 16;
    *(_QWORD *)v2 = (char *)v2 + 16;
    *((_DWORD *)v2 + 2) = 1;
    goto LABEL_19;
  }
  if (!(v8 >> 29))
  {
    v11 = (void *)WTF::fastMalloc((WTF *)(8 * v8));
    *((_DWORD *)v2 + 2) = v8;
    *(_QWORD *)v2 = v11;
LABEL_19:
    memcpy(v11, v9, 8 * v10);
    if ((WTF *)((char *)v2 + 16) != v9 && v9)
    {
      if (*(WTF **)v2 == v9)
      {
        *(_QWORD *)v2 = 0;
        *((_DWORD *)v2 + 2) = 0;
      }
      WTF::fastFree(v9, v12);
    }
    goto LABEL_20;
  }
  __break(0xC471u);
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&),WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>*,false>(uint64_t result, WTF **a2, uint64_t (**a3)(WTF **, WTF **), uint64_t a4, char a5)
{
  WTF **v8;
  WTF **v9;
  WTF **v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  WTF **v14;
  WTF *v15;
  WTF *v16;
  WTF *v17;
  WTF *v18;
  uint64_t v19;
  WTF *v20;
  WTF **v21;
  WTF **v22;
  WTF **v23;
  uint64_t *v24;
  WTF *v25;
  uint64_t v26;
  WTF *v27;
  WTF **v28;
  WTF *v29;
  WTF *v30;
  WTF *v31;
  WTF *v32;
  WTF *v33;
  BOOL v34;
  WTF *v35;
  WTF **v36;
  uint64_t *v37;
  WTF *v38;
  uint64_t v39;
  WTF *v40;
  WTF **v41;
  WTF *v42;
  WTF *v43;
  WTF *v44;
  WTF *v45;
  WTF *v46;
  int64_t v47;
  int64_t v48;
  uint64_t v49;
  WTF **v50;
  uint64_t v51;
  WTF **v52;
  WTF *v53;
  WTF **v54;
  WTF *v55;
  WTF *v56;
  uint64_t v57;
  uint64_t v58;
  WTF *v59;
  WTF *v60;
  uint64_t v61;
  uint64_t v62;
  WTF **v63;
  WTF **v64;
  uint64_t v65;
  uint64_t v66;
  WTF *v67;
  WTF *v68;
  WTF *v69;
  WTF *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  WTF **v74;
  WTF *v75;
  uint64_t *v76;
  WTF *v77;
  WTF *v78;
  WTF *v79;
  int v80;
  BOOL v81;
  WTF **v82;
  uint64_t v83;
  WTF **v84;
  uint64_t v85;
  uint64_t v86;
  WTF **v87;
  WTF *v88;
  uint64_t v89;
  WTF **i;
  WTF *v91;
  WTF *v92;
  int v93;
  void *v94;
  int64_t v95;
  WTF *v96;
  WTF **v97;
  WTF *v98;

  v8 = a2;
  v9 = (WTF **)result;
LABEL_2:
  v97 = v8 - 1;
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = (char *)v8 - (char *)v10;
    v12 = v8 - v10;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = (*a3)(v97, v9);
        if ((_DWORD)result)
        {
          a3 = (uint64_t (**)(WTF **, WTF **))*v9;
          *v9 = 0;
          v46 = *v97;
          *v97 = 0;
          result = (uint64_t)*v9;
          *v9 = v46;
          if (!result)
            goto LABEL_110;
          if (*(_DWORD *)result != 1)
          {
            --*(_DWORD *)result;
            goto LABEL_110;
          }
          goto LABEL_209;
        }
        return result;
      case 3uLL:
        return (uint64_t)std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&),WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>*>(v9, v9 + 1, v97, a3);
      case 4uLL:
        return (uint64_t)std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&),WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>*>(v9, v9 + 1, v9 + 2, v97, a3);
      case 5uLL:
        return (uint64_t)std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&),WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>*>(v9, v9 + 1, v9 + 2, v9 + 3, v97, a3);
      default:
        if (v11 > 191)
        {
          if (!a4)
          {
            if (v9 == v8)
              return result;
            v47 = (v12 - 2) >> 1;
            v97 = (WTF **)v47;
            do
            {
              v48 = v47;
              if ((uint64_t)v97 >= v47)
              {
                v95 = v47;
                v49 = (2 * v47) | 1;
                v50 = &v9[v49];
                v51 = 2 * v47 + 2;
                if (v51 < (uint64_t)v12 && (*a3)(&v9[v49], v50 + 1))
                {
                  ++v50;
                  v49 = v51;
                }
                v48 = v95;
                v52 = &v9[v95];
                result = (*a3)(v50, v52);
                if ((result & 1) == 0)
                {
                  v53 = *v52;
                  *v52 = 0;
                  v98 = v53;
                  do
                  {
                    v54 = v50;
                    v55 = *v50;
                    *v50 = 0;
                    v56 = *v52;
                    *v52 = v55;
                    if (v56)
                    {
                      if (*(_DWORD *)v56 == 1)
                        WTF::fastFree(v56, a2);
                      else
                        --*(_DWORD *)v56;
                    }
                    if ((uint64_t)v97 < v49)
                      break;
                    v57 = (2 * v49) | 1;
                    v50 = &v9[v57];
                    v58 = 2 * v49 + 2;
                    if (v58 < (uint64_t)v12 && (*a3)(&v9[v57], v50 + 1))
                    {
                      ++v50;
                      v57 = v58;
                    }
                    v52 = v54;
                    v49 = v57;
                  }
                  while (!(*a3)(v50, &v98));
                  v59 = v98;
                  v98 = 0;
                  v60 = *v54;
                  *v54 = v59;
                  if (v60)
                  {
                    if (*(_DWORD *)v60 == 1)
                      WTF::fastFree(v60, a2);
                    else
                      --*(_DWORD *)v60;
                  }
                  result = (uint64_t)v98;
                  v98 = 0;
                  v48 = v95;
                  if (result)
                  {
                    if (*(_DWORD *)result == 1)
                      result = WTF::fastFree((WTF *)result, a2);
                    else
                      --*(_DWORD *)result;
                  }
                }
              }
              v47 = v48 - 1;
            }
            while (v48);
            v61 = (unint64_t)v11 >> 3;
            while (1)
            {
              if (v61 <= 0)
                goto LABEL_208;
              if (v61 == 1)
                return result;
              v97 = (WTF **)(v61 - 1);
              v62 = 0;
              v96 = *v9;
              *v9 = 0;
              v63 = v9;
              do
              {
                v64 = v63;
                v63 += v62 + 1;
                v65 = 2 * v62;
                v62 = (2 * v62) | 1;
                v66 = v65 + 2;
                if (v65 + 2 < v61 && (*a3)(v63, v63 + 1))
                {
                  ++v63;
                  v62 = v66;
                }
                v67 = *v63;
                *v63 = 0;
                v68 = *v64;
                *v64 = v67;
                if (v68)
                {
                  if (*(_DWORD *)v68 == 1)
                    WTF::fastFree(v68, a2);
                  else
                    --*(_DWORD *)v68;
                }
              }
              while (v62 <= (uint64_t)((unint64_t)(v61 - 2) >> 1));
              if (v63 == --v8)
              {
                result = (uint64_t)*v63;
                v71 = v61 - 1;
                *v63 = v96;
                if (!result)
                  goto LABEL_182;
                goto LABEL_180;
              }
              v69 = *v8;
              *v8 = 0;
              v70 = *v63;
              *v63 = v69;
              if (v70)
              {
                if (*(_DWORD *)v70 == 1)
                  WTF::fastFree(v70, a2);
                else
                  --*(_DWORD *)v70;
              }
              result = (uint64_t)*v8;
              v71 = v61 - 1;
              *v8 = v96;
              if (result)
              {
                if (*(_DWORD *)result == 1)
                  result = WTF::fastFree((WTF *)result, a2);
                else
                  --*(_DWORD *)result;
              }
              v72 = (char *)(v63 + 1) - (char *)v9;
              if (v72 >= 9)
              {
                v73 = (((unint64_t)v72 >> 3) - 2) >> 1;
                v74 = &v9[v73];
                result = (*a3)(v74, v63);
                if ((_DWORD)result)
                  break;
              }
LABEL_182:
              v81 = (unint64_t)v61 > 2;
              v61 = v71;
              if (!v81)
                return result;
            }
            v75 = *v63;
            *v63 = 0;
            v98 = v75;
            while (1)
            {
              v76 = (uint64_t *)v74;
              v77 = *v74;
              *v74 = 0;
              v78 = *v63;
              *v63 = v77;
              if (!v78)
                goto LABEL_171;
              if (*(_DWORD *)v78 != 1)
                break;
              WTF::fastFree(v78, a2);
              if (!v73)
              {
LABEL_175:
                v79 = v98;
                v98 = 0;
                result = *v76;
                *v76 = (uint64_t)v79;
                if (!result)
                  goto LABEL_182;
                v80 = *(_DWORD *)result - 1;
                if (*(_DWORD *)result == 1)
                {
                  WTF::fastFree((WTF *)result, a2);
                  result = (uint64_t)v98;
                  v98 = 0;
                  if (!result)
                    goto LABEL_182;
LABEL_180:
                  v80 = *(_DWORD *)result - 1;
                  if (*(_DWORD *)result == 1)
                  {
                    result = WTF::fastFree((WTF *)result, a2);
                    goto LABEL_182;
                  }
                }
                *(_DWORD *)result = v80;
                goto LABEL_182;
              }
LABEL_172:
              v73 = (v73 - 1) >> 1;
              v74 = &v9[v73];
              v63 = (WTF **)v76;
              if (((*a3)(v74, &v98) & 1) == 0)
                goto LABEL_175;
            }
            --*(_DWORD *)v78;
LABEL_171:
            if (!v73)
              goto LABEL_175;
            goto LABEL_172;
          }
          v13 = v12 >> 1;
          v14 = &v9[v12 >> 1];
          if ((unint64_t)v11 < 0x401)
          {
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&),WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>*>(&v9[v12 >> 1], v9, v97, a3);
          }
          else
          {
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&),WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>*>(v9, &v9[v12 >> 1], v97, a3);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&),WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>*>(v9 + 1, v14 - 1, v8 - 2, a3);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&),WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>*>(v9 + 2, &v9[v13 + 1], v8 - 3, a3);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&),WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>*>(v14 - 1, &v9[v12 >> 1], &v9[v13 + 1], a3);
            v15 = *v9;
            *v9 = 0;
            v16 = *v14;
            *v14 = 0;
            v17 = *v9;
            *v9 = v16;
            if (v17)
            {
              if (*(_DWORD *)v17 == 1)
                WTF::fastFree(v17, a2);
              else
                --*(_DWORD *)v17;
            }
            v18 = *v14;
            *v14 = v15;
            if (v18)
            {
              if (*(_DWORD *)v18 == 1)
                WTF::fastFree(v18, a2);
              else
                --*(_DWORD *)v18;
            }
          }
          --a4;
          if ((a5 & 1) == 0 && ((*a3)(v9 - 1, v9) & 1) == 0)
          {
            v35 = *v9;
            *v9 = 0;
            v98 = v35;
            result = (*a3)(&v98, v97);
            if ((result & 1) != 0)
            {
              v10 = v9;
              while (1)
              {
                if (++v10 == v8)
                  goto LABEL_208;
                result = (*a3)(&v98, v10);
                if ((result & 1) != 0)
                  goto LABEL_70;
              }
            }
            v36 = v9 + 1;
            do
            {
              v10 = v36;
              if (v36 >= v8)
                break;
              result = (*a3)(&v98, v36);
              v36 = v10 + 1;
            }
            while (!(_DWORD)result);
LABEL_70:
            v37 = (uint64_t *)v8;
            if (v10 < v8)
            {
              v37 = (uint64_t *)v8;
              while (v37 != (uint64_t *)v9)
              {
                result = (*a3)(&v98, (WTF **)--v37);
                if ((result & 1) == 0)
                  goto LABEL_74;
              }
              goto LABEL_208;
            }
LABEL_74:
            if (v10 < (WTF **)v37)
            {
              v38 = *v10;
              *v10 = 0;
              v39 = *v37;
              *v37 = 0;
              v40 = *v10;
              *v10 = (WTF *)v39;
              if (v40)
              {
                if (*(_DWORD *)v40 == 1)
                  WTF::fastFree(v40, a2);
                else
                  --*(_DWORD *)v40;
              }
              result = *v37;
              *v37 = (uint64_t)v38;
              if (result)
              {
                if (*(_DWORD *)result == 1)
                  result = WTF::fastFree((WTF *)result, a2);
                else
                  --*(_DWORD *)result;
              }
              while (1)
              {
                if (++v10 == v8)
                  goto LABEL_208;
                result = (*a3)(&v98, v10);
                if ((_DWORD)result)
                {
                  while (v37 != (uint64_t *)v9)
                  {
                    result = (*a3)(&v98, (WTF **)--v37);
                    if ((result & 1) == 0)
                      goto LABEL_74;
                  }
                  goto LABEL_208;
                }
              }
            }
            v41 = v10 - 1;
            if (v10 - 1 != v9)
            {
              v42 = *v41;
              *v41 = 0;
              v43 = *v9;
              *v9 = v42;
              if (v43)
              {
                if (*(_DWORD *)v43 == 1)
                  WTF::fastFree(v43, a2);
                else
                  --*(_DWORD *)v43;
              }
            }
            v44 = v98;
            v98 = 0;
            v45 = *v41;
            *v41 = v44;
            if (v45)
            {
              if (*(_DWORD *)v45 == 1)
                WTF::fastFree(v45, a2);
              else
                --*(_DWORD *)v45;
            }
            result = (uint64_t)v98;
            v98 = 0;
            if (result)
            {
              if (*(_DWORD *)result == 1)
                result = WTF::fastFree((WTF *)result, a2);
              else
                --*(_DWORD *)result;
            }
            a5 = 0;
            continue;
          }
          v19 = 0;
          v20 = *v9;
          *v9 = 0;
          v98 = v20;
          do
          {
            result = (uint64_t)&v9[v19 + 1];
            if ((WTF **)result == v8)
              goto LABEL_208;
            result = (*a3)((WTF **)result, &v98);
            ++v19;
          }
          while ((result & 1) != 0);
          v21 = &v9[v19];
          v22 = v8;
          if (v19 != 1)
          {
            while (v22 != v9)
            {
              result = (*a3)(--v22, &v98);
              if ((_DWORD)result)
                goto LABEL_26;
            }
LABEL_208:
            __break(1u);
LABEL_209:
            WTF::fastFree((WTF *)result, a2);
LABEL_110:
            result = (uint64_t)*v97;
            *v97 = (WTF *)a3;
            if (result)
            {
              if (*(_DWORD *)result == 1)
                return WTF::fastFree((WTF *)result, a2);
              else
                --*(_DWORD *)result;
            }
            return result;
          }
          v22 = v8;
          do
          {
            if (v21 >= v22)
              break;
            --v22;
          }
          while (((*a3)(v22, &v98) & 1) == 0);
LABEL_26:
          if (v21 >= v22)
          {
            v28 = v21 - 1;
          }
          else
          {
            v23 = &v9[v19];
            v24 = (uint64_t *)v22;
            do
            {
              v25 = *v23;
              *v23 = 0;
              v26 = *v24;
              *v24 = 0;
              v27 = *v23;
              *v23 = (WTF *)v26;
              if (v27)
              {
                if (*(_DWORD *)v27 == 1)
                  WTF::fastFree(v27, a2);
                else
                  --*(_DWORD *)v27;
              }
              result = *v24;
              *v24 = (uint64_t)v25;
              if (result)
              {
                if (*(_DWORD *)result == 1)
                  result = WTF::fastFree((WTF *)result, a2);
                else
                  --*(_DWORD *)result;
              }
              do
              {
                if (++v23 == v8)
                  goto LABEL_208;
                result = (*a3)(v23, &v98);
              }
              while ((result & 1) != 0);
              do
              {
                if (v24 == (uint64_t *)v9)
                  goto LABEL_208;
                result = (*a3)((WTF **)--v24, &v98);
              }
              while (!(_DWORD)result);
            }
            while (v23 < (WTF **)v24);
            v28 = v23 - 1;
          }
          if (v28 != v9)
          {
            v29 = *v28;
            *v28 = 0;
            v30 = *v9;
            *v9 = v29;
            if (v30)
            {
              if (*(_DWORD *)v30 == 1)
                WTF::fastFree(v30, a2);
              else
                --*(_DWORD *)v30;
            }
          }
          v31 = v98;
          v98 = 0;
          v32 = *v28;
          *v28 = v31;
          if (v32)
          {
            if (*(_DWORD *)v32 == 1)
              WTF::fastFree(v32, a2);
            else
              --*(_DWORD *)v32;
          }
          v33 = v98;
          v98 = 0;
          if (v33)
          {
            if (*(_DWORD *)v33 == 1)
              WTF::fastFree(v33, a2);
            else
              --*(_DWORD *)v33;
          }
          if (v21 < v22)
          {
LABEL_56:
            result = std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&),WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>*,false>(v9, v28, a3, a4, a5 & 1);
            a5 = 0;
            v10 = v28 + 1;
            continue;
          }
          v34 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&),WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>*>(v9, v28, a3);
          v10 = v28 + 1;
          result = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&),WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>*>(v28 + 1, v8, a3);
          if (!(_DWORD)result)
          {
            if (v34)
              continue;
            goto LABEL_56;
          }
          v8 = v28;
          if (v34)
            return result;
          goto LABEL_2;
        }
        if ((a5 & 1) != 0)
          return (uint64_t)std::__insertion_sort[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&),WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>*>((WTF *)v9, (WTF *)v8, (uint64_t (**)(WTF **, uint64_t))a3);
        if (v9 != v8)
        {
          v82 = v9 + 1;
          if (v9 + 1 != v8)
          {
            v83 = 0;
            v84 = v9 - 1;
            v85 = -1;
            v86 = 1;
            do
            {
              v87 = &v9[v83];
              v83 = v86;
              result = (*a3)(v82, v87);
              if (!(_DWORD)result)
                goto LABEL_203;
              result = 0;
              v88 = *v82;
              *v82 = 0;
              v98 = v88;
              v89 = v85;
              for (i = v84; ; --i)
              {
                v91 = i[1];
                i[1] = 0;
                i[2] = v91;
                if (!result)
                  goto LABEL_195;
                if (*(_DWORD *)result != 1)
                {
                  --*(_DWORD *)result;
LABEL_195:
                  if (!v89)
                    goto LABEL_208;
                  goto LABEL_196;
                }
                result = WTF::fastFree((WTF *)result, a2);
                if (!v89)
                  goto LABEL_208;
LABEL_196:
                if (((*a3)(&v98, i) & 1) == 0)
                  break;
                result = (uint64_t)i[1];
                ++v89;
              }
              v92 = v98;
              v98 = 0;
              result = (uint64_t)i[1];
              i[1] = v92;
              if (result)
              {
                v93 = *(_DWORD *)result - 1;
                if (*(_DWORD *)result != 1)
                  goto LABEL_202;
                WTF::fastFree((WTF *)result, a2);
                result = (uint64_t)v98;
                v98 = 0;
                if (result)
                {
                  v93 = *(_DWORD *)result - 1;
                  if (*(_DWORD *)result == 1)
                    result = WTF::fastFree((WTF *)result, v94);
                  else
LABEL_202:
                    *(_DWORD *)result = v93;
                }
              }
LABEL_203:
              v86 = v83 + 1;
              v82 = &v9[v83 + 1];
              ++v84;
              --v85;
            }
            while (v82 != v8);
          }
        }
        return result;
    }
  }
}

WTF *std::__insertion_sort[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&),WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>*>(WTF *result, WTF *a2, uint64_t (**a3)(WTF **, uint64_t))
{
  WTF *v3;
  WTF *v4;
  WTF **v6;
  WTF **v7;
  uint64_t v9;
  WTF **v10;
  WTF **v11;
  void *v12;
  WTF *v13;
  WTF *v14;
  uint64_t i;
  WTF **v16;
  WTF *v17;
  WTF **v18;
  WTF *v19;
  WTF *v20[11];

  if (result == a2)
    return result;
  v20[9] = v3;
  v20[10] = v4;
  v6 = (WTF **)result;
  v7 = (WTF **)((char *)result + 8);
  if ((WTF *)((char *)result + 8) == a2)
    return result;
  v9 = 0;
  v10 = (WTF **)result;
  do
  {
    v11 = v10;
    v10 = v7;
    result = (WTF *)(*a3)(v7, (uint64_t)v11);
    if (!(_DWORD)result)
      goto LABEL_20;
    v13 = 0;
    v14 = *v10;
    *v10 = 0;
    v20[0] = v14;
    for (i = v9; ; i -= 8)
    {
      v16 = (WTF **)((char *)v6 + i);
      v17 = *(WTF **)((char *)v6 + i);
      *v16 = 0;
      v16[1] = v17;
      if (!v13)
        goto LABEL_9;
      if (*(_DWORD *)v13 == 1)
        break;
      --*(_DWORD *)v13;
LABEL_9:
      if (!i)
        goto LABEL_13;
LABEL_10:
      v18 = (WTF **)((char *)v6 + i);
      if (((*a3)(v20, (uint64_t)v6 + i - 8) & 1) == 0)
        goto LABEL_14;
      v13 = *v16;
    }
    WTF::fastFree(v13, v12);
    if (i)
      goto LABEL_10;
LABEL_13:
    v18 = v6;
LABEL_14:
    v19 = v20[0];
    v20[0] = 0;
    result = *v18;
    *v18 = v19;
    if (result)
    {
      if (*(_DWORD *)result == 1)
        WTF::fastFree(result, v12);
      else
        --*(_DWORD *)result;
      result = v20[0];
      v20[0] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 1)
          result = (WTF *)WTF::fastFree(result, v12);
        else
          --*(_DWORD *)result;
      }
    }
LABEL_20:
    v7 = v10 + 1;
    v9 += 8;
  }
  while (v10 + 1 != (WTF **)a2);
  return result;
}

WTF *std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&),WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>*>(WTF **a1, WTF **a2, WTF **a3, uint64_t (**a4)(WTF **, WTF **))
{
  char v8;
  WTF *result;
  void *v10;
  WTF *v11;
  WTF *v12;
  WTF *v13;
  WTF *v14;
  WTF *v15;
  WTF *v16;
  WTF *v17;
  WTF *v18;
  WTF *v19;
  WTF *v20;
  WTF *v21;
  WTF *v22;
  WTF *v23;
  WTF *v24;
  WTF *v25;
  WTF *v26;

  v8 = (*a4)(a2, a1);
  result = (WTF *)(*a4)(a3, a2);
  if ((v8 & 1) != 0)
  {
    v11 = *a1;
    *a1 = 0;
    if ((_DWORD)result)
    {
      v12 = *a3;
      *a3 = 0;
      v13 = *a1;
      *a1 = v12;
      if (v13)
      {
        if (*(_DWORD *)v13 == 1)
          WTF::fastFree(v13, v10);
        else
          --*(_DWORD *)v13;
      }
      result = *a3;
      *a3 = v11;
      if (!result)
        return result;
LABEL_32:
      if (*(_DWORD *)result == 1)
        return (WTF *)WTF::fastFree(result, v10);
      --*(_DWORD *)result;
      return result;
    }
    v21 = *a2;
    *a2 = 0;
    v22 = *a1;
    *a1 = v21;
    if (v22)
    {
      if (*(_DWORD *)v22 == 1)
        WTF::fastFree(v22, v10);
      else
        --*(_DWORD *)v22;
    }
    v23 = *a2;
    *a2 = v11;
    if (v23)
    {
      if (*(_DWORD *)v23 == 1)
        WTF::fastFree(v23, v10);
      else
        --*(_DWORD *)v23;
    }
    result = (WTF *)(*a4)(a3, a2);
    if ((_DWORD)result)
    {
      v24 = *a2;
      *a2 = 0;
      v25 = *a3;
      *a3 = 0;
      v26 = *a2;
      *a2 = v25;
      if (v26)
      {
        if (*(_DWORD *)v26 == 1)
          WTF::fastFree(v26, v10);
        else
          --*(_DWORD *)v26;
      }
      result = *a3;
      *a3 = v24;
      if (result)
        goto LABEL_32;
    }
  }
  else if ((_DWORD)result)
  {
    v14 = *a2;
    *a2 = 0;
    v15 = *a3;
    *a3 = 0;
    v16 = *a2;
    *a2 = v15;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
        WTF::fastFree(v16, v10);
      else
        --*(_DWORD *)v16;
    }
    v17 = *a3;
    *a3 = v14;
    if (v17)
    {
      if (*(_DWORD *)v17 == 1)
        WTF::fastFree(v17, v10);
      else
        --*(_DWORD *)v17;
    }
    result = (WTF *)(*a4)(a2, a1);
    if ((_DWORD)result)
    {
      v18 = *a1;
      *a1 = 0;
      v19 = *a2;
      *a2 = 0;
      v20 = *a1;
      *a1 = v19;
      if (v20)
      {
        if (*(_DWORD *)v20 == 1)
          WTF::fastFree(v20, v10);
        else
          --*(_DWORD *)v20;
      }
      result = *a2;
      *a2 = v18;
      if (result)
        goto LABEL_32;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&),WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>*>(WTF **a1, WTF **a2, uint64_t (**a3)(WTF **, WTF **))
{
  uint64_t v6;
  _BOOL8 result;
  WTF **v8;
  void *v9;
  WTF *v10;
  WTF *v11;
  WTF *v12;
  WTF *v13;
  WTF **v14;
  WTF **v15;
  uint64_t v16;
  int v17;
  void *v18;
  WTF *v19;
  WTF *v20;
  uint64_t i;
  char *v22;
  uint64_t v23;
  WTF **v24;
  WTF *v25;
  WTF *v26;
  WTF *v27;
  WTF *v28;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = a2 - 1;
      if ((*a3)(a2 - 1, a1))
      {
        v10 = *a1;
        *a1 = 0;
        v11 = *v8;
        *v8 = 0;
        v12 = *a1;
        *a1 = v11;
        if (v12)
        {
          if (*(_DWORD *)v12 == 1)
            WTF::fastFree(v12, v9);
          else
            --*(_DWORD *)v12;
        }
        v13 = *v8;
        *v8 = v10;
        if (v13)
        {
          if (*(_DWORD *)v13 == 1)
            WTF::fastFree(v13, v9);
          else
            --*(_DWORD *)v13;
        }
      }
      return 1;
    case 3:
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&),WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>*>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&),WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>*>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&),WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>*>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v14 = a1 + 2;
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&),WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>*>(a1, a1 + 1, a1 + 2, a3);
      v15 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v16 = 0;
      v17 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(v15, v14))
    {
      v19 = 0;
      v20 = *v15;
      *v15 = 0;
      v28 = v20;
      for (i = v16; ; i -= 8)
      {
        v22 = (char *)a1 + i;
        v23 = *(uint64_t *)((char *)a1 + i + 16);
        *((_QWORD *)v22 + 2) = 0;
        *((_QWORD *)v22 + 3) = v23;
        if (v19)
        {
          if (*(_DWORD *)v19 == 1)
            WTF::fastFree(v19, v18);
          else
            --*(_DWORD *)v19;
        }
        if (i == -16)
        {
          v24 = a1;
          goto LABEL_22;
        }
        if (((*a3)(&v28, (WTF **)((char *)a1 + i + 8)) & 1) == 0)
          break;
        v19 = (WTF *)*((_QWORD *)v22 + 2);
      }
      v24 = (WTF **)((char *)a1 + i + 16);
LABEL_22:
      v25 = v28;
      v28 = 0;
      v26 = *v24;
      *v24 = v25;
      if (v26)
      {
        if (*(_DWORD *)v26 == 1)
          WTF::fastFree(v26, v18);
        else
          --*(_DWORD *)v26;
      }
      v27 = v28;
      v28 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 1)
          WTF::fastFree(v27, v18);
        else
          --*(_DWORD *)v27;
      }
      if (++v17 == 8)
        return v15 + 1 == a2;
    }
    v14 = v15;
    v16 += 8;
    if (++v15 == a2)
      return 1;
  }
}

WTF *std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&),WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>*>(WTF **a1, WTF **a2, WTF **a3, WTF **a4, uint64_t (**a5)(WTF **, WTF **))
{
  WTF *result;
  void *v11;
  WTF *v12;
  WTF *v13;
  WTF *v14;
  WTF *v15;
  void *v16;
  WTF *v17;
  WTF *v18;
  WTF *v19;
  WTF *v20;
  void *v21;
  WTF *v22;
  WTF *v23;
  WTF *v24;

  std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&,WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>> const&),WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>*>(a1, a2, a3, a5);
  result = (WTF *)(*a5)(a4, a3);
  if ((_DWORD)result)
  {
    v12 = *a3;
    *a3 = 0;
    v13 = *a4;
    *a4 = 0;
    v14 = *a3;
    *a3 = v13;
    if (v14)
    {
      if (*(_DWORD *)v14 == 1)
        WTF::fastFree(v14, v11);
      else
        --*(_DWORD *)v14;
    }
    v15 = *a4;
    *a4 = v12;
    if (v15)
    {
      if (*(_DWORD *)v15 == 1)
        WTF::fastFree(v15, v11);
      else
        --*(_DWORD *)v15;
    }
    result = (WTF *)(*a5)(a3, a2);
    if ((_DWORD)result)
    {
      v17 = *a2;
      *a2 = 0;
      v18 = *a3;
      *a3 = 0;
      v19 = *a2;
      *a2 = v18;
      if (v19)
      {
        if (*(_DWORD *)v19 == 1)
          WTF::fastFree(v19, v16);
        else
          --*(_DWORD *)v19;
      }
      v20 = *a3;
      *a3 = v17;
      if (v20)
      {
        if (*(_DWORD *)v20 == 1)
          WTF::fastFree(v20, v16);
        else
          --*(_DWORD *)v20;
      }
      result = (WTF *)(*a5)(a2, a1);
      if ((_DWORD)result)
      {
        v22 = *a1;
        *a1 = 0;
        v23 = *a2;
        *a2 = 0;
        v24 = *a1;
        *a1 = v23;
        if (v24)
        {
          if (*(_DWORD *)v24 == 1)
            WTF::fastFree(v24, v21);
          else
            --*(_DWORD *)v24;
        }
        result = *a2;
        *a2 = v22;
        if (result)
        {
          if (*(_DWORD *)result == 1)
            return (WTF *)WTF::fastFree(result, v21);
          else
            --*(_DWORD *)result;
        }
      }
    }
  }
  return result;
}

